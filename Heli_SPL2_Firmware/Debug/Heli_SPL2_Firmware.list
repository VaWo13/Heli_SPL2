
Heli_SPL2_Firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000184  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e6f8  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000b3c  0800e880  0800e880  0001e880  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f3bc  0800f3bc  000201ec  2**0
                  CONTENTS
  4 .ARM          00000008  0800f3bc  0800f3bc  0001f3bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f3c4  0800f3c4  000201ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800f3c4  0800f3c4  0001f3c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f3cc  0800f3cc  0001f3cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001ec  20000000  0800f3d0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001dc0  200001ec  0800f5bc  000201ec  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001fac  0800f5bc  00021fac  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003c3df  00000000  00000000  00020215  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000050c2  00000000  00000000  0005c5f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001eb8  00000000  00000000  000616b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001d08  00000000  00000000  00063570  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000278f5  00000000  00000000  00065278  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00021c0e  00000000  00000000  0008cb6d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cc1af  00000000  00000000  000ae77b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0017a92a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008eb8  00000000  00000000  0017a980  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200001ec 	.word	0x200001ec
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800e868 	.word	0x0800e868

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	200001f0 	.word	0x200001f0
 80001c4:	0800e868 	.word	0x0800e868

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__gedf2>:
 8000964:	f04f 3cff 	mov.w	ip, #4294967295
 8000968:	e006      	b.n	8000978 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__ledf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	e002      	b.n	8000978 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__cmpdf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	f84d cd04 	str.w	ip, [sp, #-4]!
 800097c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000980:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800098e:	d01b      	beq.n	80009c8 <__cmpdf2+0x54>
 8000990:	b001      	add	sp, #4
 8000992:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000996:	bf0c      	ite	eq
 8000998:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800099c:	ea91 0f03 	teqne	r1, r3
 80009a0:	bf02      	ittt	eq
 80009a2:	ea90 0f02 	teqeq	r0, r2
 80009a6:	2000      	moveq	r0, #0
 80009a8:	4770      	bxeq	lr
 80009aa:	f110 0f00 	cmn.w	r0, #0
 80009ae:	ea91 0f03 	teq	r1, r3
 80009b2:	bf58      	it	pl
 80009b4:	4299      	cmppl	r1, r3
 80009b6:	bf08      	it	eq
 80009b8:	4290      	cmpeq	r0, r2
 80009ba:	bf2c      	ite	cs
 80009bc:	17d8      	asrcs	r0, r3, #31
 80009be:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009c2:	f040 0001 	orr.w	r0, r0, #1
 80009c6:	4770      	bx	lr
 80009c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d0:	d102      	bne.n	80009d8 <__cmpdf2+0x64>
 80009d2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009d6:	d107      	bne.n	80009e8 <__cmpdf2+0x74>
 80009d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d1d6      	bne.n	8000990 <__cmpdf2+0x1c>
 80009e2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009e6:	d0d3      	beq.n	8000990 <__cmpdf2+0x1c>
 80009e8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop

080009f0 <__aeabi_cdrcmple>:
 80009f0:	4684      	mov	ip, r0
 80009f2:	4610      	mov	r0, r2
 80009f4:	4662      	mov	r2, ip
 80009f6:	468c      	mov	ip, r1
 80009f8:	4619      	mov	r1, r3
 80009fa:	4663      	mov	r3, ip
 80009fc:	e000      	b.n	8000a00 <__aeabi_cdcmpeq>
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdcmpeq>:
 8000a00:	b501      	push	{r0, lr}
 8000a02:	f7ff ffb7 	bl	8000974 <__cmpdf2>
 8000a06:	2800      	cmp	r0, #0
 8000a08:	bf48      	it	mi
 8000a0a:	f110 0f00 	cmnmi.w	r0, #0
 8000a0e:	bd01      	pop	{r0, pc}

08000a10 <__aeabi_dcmpeq>:
 8000a10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a14:	f7ff fff4 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a18:	bf0c      	ite	eq
 8000a1a:	2001      	moveq	r0, #1
 8000a1c:	2000      	movne	r0, #0
 8000a1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a22:	bf00      	nop

08000a24 <__aeabi_dcmplt>:
 8000a24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a28:	f7ff ffea 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a2c:	bf34      	ite	cc
 8000a2e:	2001      	movcc	r0, #1
 8000a30:	2000      	movcs	r0, #0
 8000a32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a36:	bf00      	nop

08000a38 <__aeabi_dcmple>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff ffe0 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a40:	bf94      	ite	ls
 8000a42:	2001      	movls	r0, #1
 8000a44:	2000      	movhi	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmpge>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffce 	bl	80009f0 <__aeabi_cdrcmple>
 8000a54:	bf94      	ite	ls
 8000a56:	2001      	movls	r0, #1
 8000a58:	2000      	movhi	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmpgt>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffc4 	bl	80009f0 <__aeabi_cdrcmple>
 8000a68:	bf34      	ite	cc
 8000a6a:	2001      	movcc	r0, #1
 8000a6c:	2000      	movcs	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_d2iz>:
 8000a74:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a78:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a7c:	d215      	bcs.n	8000aaa <__aeabi_d2iz+0x36>
 8000a7e:	d511      	bpl.n	8000aa4 <__aeabi_d2iz+0x30>
 8000a80:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a84:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a88:	d912      	bls.n	8000ab0 <__aeabi_d2iz+0x3c>
 8000a8a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a8e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a92:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a96:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a9a:	fa23 f002 	lsr.w	r0, r3, r2
 8000a9e:	bf18      	it	ne
 8000aa0:	4240      	negne	r0, r0
 8000aa2:	4770      	bx	lr
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aae:	d105      	bne.n	8000abc <__aeabi_d2iz+0x48>
 8000ab0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ab4:	bf08      	it	eq
 8000ab6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000aba:	4770      	bx	lr
 8000abc:	f04f 0000 	mov.w	r0, #0
 8000ac0:	4770      	bx	lr
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_d2uiz>:
 8000ac4:	004a      	lsls	r2, r1, #1
 8000ac6:	d211      	bcs.n	8000aec <__aeabi_d2uiz+0x28>
 8000ac8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000acc:	d211      	bcs.n	8000af2 <__aeabi_d2uiz+0x2e>
 8000ace:	d50d      	bpl.n	8000aec <__aeabi_d2uiz+0x28>
 8000ad0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ad4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ad8:	d40e      	bmi.n	8000af8 <__aeabi_d2uiz+0x34>
 8000ada:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ade:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ae2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ae6:	fa23 f002 	lsr.w	r0, r3, r2
 8000aea:	4770      	bx	lr
 8000aec:	f04f 0000 	mov.w	r0, #0
 8000af0:	4770      	bx	lr
 8000af2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000af6:	d102      	bne.n	8000afe <__aeabi_d2uiz+0x3a>
 8000af8:	f04f 30ff 	mov.w	r0, #4294967295
 8000afc:	4770      	bx	lr
 8000afe:	f04f 0000 	mov.w	r0, #0
 8000b02:	4770      	bx	lr

08000b04 <__aeabi_d2f>:
 8000b04:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b08:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b0c:	bf24      	itt	cs
 8000b0e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b12:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b16:	d90d      	bls.n	8000b34 <__aeabi_d2f+0x30>
 8000b18:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b1c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b20:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b24:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b28:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b2c:	bf08      	it	eq
 8000b2e:	f020 0001 	biceq.w	r0, r0, #1
 8000b32:	4770      	bx	lr
 8000b34:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b38:	d121      	bne.n	8000b7e <__aeabi_d2f+0x7a>
 8000b3a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b3e:	bfbc      	itt	lt
 8000b40:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b44:	4770      	bxlt	lr
 8000b46:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b4a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b4e:	f1c2 0218 	rsb	r2, r2, #24
 8000b52:	f1c2 0c20 	rsb	ip, r2, #32
 8000b56:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b5a:	fa20 f002 	lsr.w	r0, r0, r2
 8000b5e:	bf18      	it	ne
 8000b60:	f040 0001 	orrne.w	r0, r0, #1
 8000b64:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b68:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b6c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b70:	ea40 000c 	orr.w	r0, r0, ip
 8000b74:	fa23 f302 	lsr.w	r3, r3, r2
 8000b78:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b7c:	e7cc      	b.n	8000b18 <__aeabi_d2f+0x14>
 8000b7e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b82:	d107      	bne.n	8000b94 <__aeabi_d2f+0x90>
 8000b84:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b88:	bf1e      	ittt	ne
 8000b8a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b8e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b92:	4770      	bxne	lr
 8000b94:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b9c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ba0:	4770      	bx	lr
 8000ba2:	bf00      	nop

08000ba4 <__aeabi_frsub>:
 8000ba4:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000ba8:	e002      	b.n	8000bb0 <__addsf3>
 8000baa:	bf00      	nop

08000bac <__aeabi_fsub>:
 8000bac:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000bb0 <__addsf3>:
 8000bb0:	0042      	lsls	r2, r0, #1
 8000bb2:	bf1f      	itttt	ne
 8000bb4:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000bb8:	ea92 0f03 	teqne	r2, r3
 8000bbc:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000bc0:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bc4:	d06a      	beq.n	8000c9c <__addsf3+0xec>
 8000bc6:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000bca:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000bce:	bfc1      	itttt	gt
 8000bd0:	18d2      	addgt	r2, r2, r3
 8000bd2:	4041      	eorgt	r1, r0
 8000bd4:	4048      	eorgt	r0, r1
 8000bd6:	4041      	eorgt	r1, r0
 8000bd8:	bfb8      	it	lt
 8000bda:	425b      	neglt	r3, r3
 8000bdc:	2b19      	cmp	r3, #25
 8000bde:	bf88      	it	hi
 8000be0:	4770      	bxhi	lr
 8000be2:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000be6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bea:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000bee:	bf18      	it	ne
 8000bf0:	4240      	negne	r0, r0
 8000bf2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bf6:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bfa:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bfe:	bf18      	it	ne
 8000c00:	4249      	negne	r1, r1
 8000c02:	ea92 0f03 	teq	r2, r3
 8000c06:	d03f      	beq.n	8000c88 <__addsf3+0xd8>
 8000c08:	f1a2 0201 	sub.w	r2, r2, #1
 8000c0c:	fa41 fc03 	asr.w	ip, r1, r3
 8000c10:	eb10 000c 	adds.w	r0, r0, ip
 8000c14:	f1c3 0320 	rsb	r3, r3, #32
 8000c18:	fa01 f103 	lsl.w	r1, r1, r3
 8000c1c:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c20:	d502      	bpl.n	8000c28 <__addsf3+0x78>
 8000c22:	4249      	negs	r1, r1
 8000c24:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c28:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000c2c:	d313      	bcc.n	8000c56 <__addsf3+0xa6>
 8000c2e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000c32:	d306      	bcc.n	8000c42 <__addsf3+0x92>
 8000c34:	0840      	lsrs	r0, r0, #1
 8000c36:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c3a:	f102 0201 	add.w	r2, r2, #1
 8000c3e:	2afe      	cmp	r2, #254	; 0xfe
 8000c40:	d251      	bcs.n	8000ce6 <__addsf3+0x136>
 8000c42:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c46:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c4a:	bf08      	it	eq
 8000c4c:	f020 0001 	biceq.w	r0, r0, #1
 8000c50:	ea40 0003 	orr.w	r0, r0, r3
 8000c54:	4770      	bx	lr
 8000c56:	0049      	lsls	r1, r1, #1
 8000c58:	eb40 0000 	adc.w	r0, r0, r0
 8000c5c:	3a01      	subs	r2, #1
 8000c5e:	bf28      	it	cs
 8000c60:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c64:	d2ed      	bcs.n	8000c42 <__addsf3+0x92>
 8000c66:	fab0 fc80 	clz	ip, r0
 8000c6a:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c6e:	ebb2 020c 	subs.w	r2, r2, ip
 8000c72:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c76:	bfaa      	itet	ge
 8000c78:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c7c:	4252      	neglt	r2, r2
 8000c7e:	4318      	orrge	r0, r3
 8000c80:	bfbc      	itt	lt
 8000c82:	40d0      	lsrlt	r0, r2
 8000c84:	4318      	orrlt	r0, r3
 8000c86:	4770      	bx	lr
 8000c88:	f092 0f00 	teq	r2, #0
 8000c8c:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c90:	bf06      	itte	eq
 8000c92:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c96:	3201      	addeq	r2, #1
 8000c98:	3b01      	subne	r3, #1
 8000c9a:	e7b5      	b.n	8000c08 <__addsf3+0x58>
 8000c9c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000ca0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000ca4:	bf18      	it	ne
 8000ca6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000caa:	d021      	beq.n	8000cf0 <__addsf3+0x140>
 8000cac:	ea92 0f03 	teq	r2, r3
 8000cb0:	d004      	beq.n	8000cbc <__addsf3+0x10c>
 8000cb2:	f092 0f00 	teq	r2, #0
 8000cb6:	bf08      	it	eq
 8000cb8:	4608      	moveq	r0, r1
 8000cba:	4770      	bx	lr
 8000cbc:	ea90 0f01 	teq	r0, r1
 8000cc0:	bf1c      	itt	ne
 8000cc2:	2000      	movne	r0, #0
 8000cc4:	4770      	bxne	lr
 8000cc6:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000cca:	d104      	bne.n	8000cd6 <__addsf3+0x126>
 8000ccc:	0040      	lsls	r0, r0, #1
 8000cce:	bf28      	it	cs
 8000cd0:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000cd4:	4770      	bx	lr
 8000cd6:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000cda:	bf3c      	itt	cc
 8000cdc:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ce0:	4770      	bxcc	lr
 8000ce2:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ce6:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000cea:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cee:	4770      	bx	lr
 8000cf0:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cf4:	bf16      	itet	ne
 8000cf6:	4608      	movne	r0, r1
 8000cf8:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cfc:	4601      	movne	r1, r0
 8000cfe:	0242      	lsls	r2, r0, #9
 8000d00:	bf06      	itte	eq
 8000d02:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000d06:	ea90 0f01 	teqeq	r0, r1
 8000d0a:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000d0e:	4770      	bx	lr

08000d10 <__aeabi_ui2f>:
 8000d10:	f04f 0300 	mov.w	r3, #0
 8000d14:	e004      	b.n	8000d20 <__aeabi_i2f+0x8>
 8000d16:	bf00      	nop

08000d18 <__aeabi_i2f>:
 8000d18:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000d1c:	bf48      	it	mi
 8000d1e:	4240      	negmi	r0, r0
 8000d20:	ea5f 0c00 	movs.w	ip, r0
 8000d24:	bf08      	it	eq
 8000d26:	4770      	bxeq	lr
 8000d28:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000d2c:	4601      	mov	r1, r0
 8000d2e:	f04f 0000 	mov.w	r0, #0
 8000d32:	e01c      	b.n	8000d6e <__aeabi_l2f+0x2a>

08000d34 <__aeabi_ul2f>:
 8000d34:	ea50 0201 	orrs.w	r2, r0, r1
 8000d38:	bf08      	it	eq
 8000d3a:	4770      	bxeq	lr
 8000d3c:	f04f 0300 	mov.w	r3, #0
 8000d40:	e00a      	b.n	8000d58 <__aeabi_l2f+0x14>
 8000d42:	bf00      	nop

08000d44 <__aeabi_l2f>:
 8000d44:	ea50 0201 	orrs.w	r2, r0, r1
 8000d48:	bf08      	it	eq
 8000d4a:	4770      	bxeq	lr
 8000d4c:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d50:	d502      	bpl.n	8000d58 <__aeabi_l2f+0x14>
 8000d52:	4240      	negs	r0, r0
 8000d54:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d58:	ea5f 0c01 	movs.w	ip, r1
 8000d5c:	bf02      	ittt	eq
 8000d5e:	4684      	moveq	ip, r0
 8000d60:	4601      	moveq	r1, r0
 8000d62:	2000      	moveq	r0, #0
 8000d64:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d68:	bf08      	it	eq
 8000d6a:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d6e:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d72:	fabc f28c 	clz	r2, ip
 8000d76:	3a08      	subs	r2, #8
 8000d78:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d7c:	db10      	blt.n	8000da0 <__aeabi_l2f+0x5c>
 8000d7e:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d82:	4463      	add	r3, ip
 8000d84:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d88:	f1c2 0220 	rsb	r2, r2, #32
 8000d8c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d90:	fa20 f202 	lsr.w	r2, r0, r2
 8000d94:	eb43 0002 	adc.w	r0, r3, r2
 8000d98:	bf08      	it	eq
 8000d9a:	f020 0001 	biceq.w	r0, r0, #1
 8000d9e:	4770      	bx	lr
 8000da0:	f102 0220 	add.w	r2, r2, #32
 8000da4:	fa01 fc02 	lsl.w	ip, r1, r2
 8000da8:	f1c2 0220 	rsb	r2, r2, #32
 8000dac:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000db0:	fa21 f202 	lsr.w	r2, r1, r2
 8000db4:	eb43 0002 	adc.w	r0, r3, r2
 8000db8:	bf08      	it	eq
 8000dba:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000dbe:	4770      	bx	lr

08000dc0 <__aeabi_fmul>:
 8000dc0:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000dc4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000dc8:	bf1e      	ittt	ne
 8000dca:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000dce:	ea92 0f0c 	teqne	r2, ip
 8000dd2:	ea93 0f0c 	teqne	r3, ip
 8000dd6:	d06f      	beq.n	8000eb8 <__aeabi_fmul+0xf8>
 8000dd8:	441a      	add	r2, r3
 8000dda:	ea80 0c01 	eor.w	ip, r0, r1
 8000dde:	0240      	lsls	r0, r0, #9
 8000de0:	bf18      	it	ne
 8000de2:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000de6:	d01e      	beq.n	8000e26 <__aeabi_fmul+0x66>
 8000de8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000dec:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000df0:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000df4:	fba0 3101 	umull	r3, r1, r0, r1
 8000df8:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000dfc:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000e00:	bf3e      	ittt	cc
 8000e02:	0049      	lslcc	r1, r1, #1
 8000e04:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000e08:	005b      	lslcc	r3, r3, #1
 8000e0a:	ea40 0001 	orr.w	r0, r0, r1
 8000e0e:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000e12:	2afd      	cmp	r2, #253	; 0xfd
 8000e14:	d81d      	bhi.n	8000e52 <__aeabi_fmul+0x92>
 8000e16:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000e1a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e1e:	bf08      	it	eq
 8000e20:	f020 0001 	biceq.w	r0, r0, #1
 8000e24:	4770      	bx	lr
 8000e26:	f090 0f00 	teq	r0, #0
 8000e2a:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000e2e:	bf08      	it	eq
 8000e30:	0249      	lsleq	r1, r1, #9
 8000e32:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000e36:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000e3a:	3a7f      	subs	r2, #127	; 0x7f
 8000e3c:	bfc2      	ittt	gt
 8000e3e:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e42:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e46:	4770      	bxgt	lr
 8000e48:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e4c:	f04f 0300 	mov.w	r3, #0
 8000e50:	3a01      	subs	r2, #1
 8000e52:	dc5d      	bgt.n	8000f10 <__aeabi_fmul+0x150>
 8000e54:	f112 0f19 	cmn.w	r2, #25
 8000e58:	bfdc      	itt	le
 8000e5a:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e5e:	4770      	bxle	lr
 8000e60:	f1c2 0200 	rsb	r2, r2, #0
 8000e64:	0041      	lsls	r1, r0, #1
 8000e66:	fa21 f102 	lsr.w	r1, r1, r2
 8000e6a:	f1c2 0220 	rsb	r2, r2, #32
 8000e6e:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e72:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e76:	f140 0000 	adc.w	r0, r0, #0
 8000e7a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e7e:	bf08      	it	eq
 8000e80:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e84:	4770      	bx	lr
 8000e86:	f092 0f00 	teq	r2, #0
 8000e8a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e8e:	bf02      	ittt	eq
 8000e90:	0040      	lsleq	r0, r0, #1
 8000e92:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e96:	3a01      	subeq	r2, #1
 8000e98:	d0f9      	beq.n	8000e8e <__aeabi_fmul+0xce>
 8000e9a:	ea40 000c 	orr.w	r0, r0, ip
 8000e9e:	f093 0f00 	teq	r3, #0
 8000ea2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ea6:	bf02      	ittt	eq
 8000ea8:	0049      	lsleq	r1, r1, #1
 8000eaa:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000eae:	3b01      	subeq	r3, #1
 8000eb0:	d0f9      	beq.n	8000ea6 <__aeabi_fmul+0xe6>
 8000eb2:	ea41 010c 	orr.w	r1, r1, ip
 8000eb6:	e78f      	b.n	8000dd8 <__aeabi_fmul+0x18>
 8000eb8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000ebc:	ea92 0f0c 	teq	r2, ip
 8000ec0:	bf18      	it	ne
 8000ec2:	ea93 0f0c 	teqne	r3, ip
 8000ec6:	d00a      	beq.n	8000ede <__aeabi_fmul+0x11e>
 8000ec8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000ecc:	bf18      	it	ne
 8000ece:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000ed2:	d1d8      	bne.n	8000e86 <__aeabi_fmul+0xc6>
 8000ed4:	ea80 0001 	eor.w	r0, r0, r1
 8000ed8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000edc:	4770      	bx	lr
 8000ede:	f090 0f00 	teq	r0, #0
 8000ee2:	bf17      	itett	ne
 8000ee4:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000ee8:	4608      	moveq	r0, r1
 8000eea:	f091 0f00 	teqne	r1, #0
 8000eee:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000ef2:	d014      	beq.n	8000f1e <__aeabi_fmul+0x15e>
 8000ef4:	ea92 0f0c 	teq	r2, ip
 8000ef8:	d101      	bne.n	8000efe <__aeabi_fmul+0x13e>
 8000efa:	0242      	lsls	r2, r0, #9
 8000efc:	d10f      	bne.n	8000f1e <__aeabi_fmul+0x15e>
 8000efe:	ea93 0f0c 	teq	r3, ip
 8000f02:	d103      	bne.n	8000f0c <__aeabi_fmul+0x14c>
 8000f04:	024b      	lsls	r3, r1, #9
 8000f06:	bf18      	it	ne
 8000f08:	4608      	movne	r0, r1
 8000f0a:	d108      	bne.n	8000f1e <__aeabi_fmul+0x15e>
 8000f0c:	ea80 0001 	eor.w	r0, r0, r1
 8000f10:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000f14:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000f18:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f1c:	4770      	bx	lr
 8000f1e:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000f22:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000f26:	4770      	bx	lr

08000f28 <__aeabi_fdiv>:
 8000f28:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000f2c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000f30:	bf1e      	ittt	ne
 8000f32:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000f36:	ea92 0f0c 	teqne	r2, ip
 8000f3a:	ea93 0f0c 	teqne	r3, ip
 8000f3e:	d069      	beq.n	8001014 <__aeabi_fdiv+0xec>
 8000f40:	eba2 0203 	sub.w	r2, r2, r3
 8000f44:	ea80 0c01 	eor.w	ip, r0, r1
 8000f48:	0249      	lsls	r1, r1, #9
 8000f4a:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f4e:	d037      	beq.n	8000fc0 <__aeabi_fdiv+0x98>
 8000f50:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f54:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f58:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f5c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f60:	428b      	cmp	r3, r1
 8000f62:	bf38      	it	cc
 8000f64:	005b      	lslcc	r3, r3, #1
 8000f66:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f6a:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f6e:	428b      	cmp	r3, r1
 8000f70:	bf24      	itt	cs
 8000f72:	1a5b      	subcs	r3, r3, r1
 8000f74:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f78:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f7c:	bf24      	itt	cs
 8000f7e:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f82:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f86:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f8a:	bf24      	itt	cs
 8000f8c:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f90:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f94:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f98:	bf24      	itt	cs
 8000f9a:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f9e:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000fa2:	011b      	lsls	r3, r3, #4
 8000fa4:	bf18      	it	ne
 8000fa6:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000faa:	d1e0      	bne.n	8000f6e <__aeabi_fdiv+0x46>
 8000fac:	2afd      	cmp	r2, #253	; 0xfd
 8000fae:	f63f af50 	bhi.w	8000e52 <__aeabi_fmul+0x92>
 8000fb2:	428b      	cmp	r3, r1
 8000fb4:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000fb8:	bf08      	it	eq
 8000fba:	f020 0001 	biceq.w	r0, r0, #1
 8000fbe:	4770      	bx	lr
 8000fc0:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000fc4:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000fc8:	327f      	adds	r2, #127	; 0x7f
 8000fca:	bfc2      	ittt	gt
 8000fcc:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000fd0:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000fd4:	4770      	bxgt	lr
 8000fd6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000fda:	f04f 0300 	mov.w	r3, #0
 8000fde:	3a01      	subs	r2, #1
 8000fe0:	e737      	b.n	8000e52 <__aeabi_fmul+0x92>
 8000fe2:	f092 0f00 	teq	r2, #0
 8000fe6:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000fea:	bf02      	ittt	eq
 8000fec:	0040      	lsleq	r0, r0, #1
 8000fee:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000ff2:	3a01      	subeq	r2, #1
 8000ff4:	d0f9      	beq.n	8000fea <__aeabi_fdiv+0xc2>
 8000ff6:	ea40 000c 	orr.w	r0, r0, ip
 8000ffa:	f093 0f00 	teq	r3, #0
 8000ffe:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8001002:	bf02      	ittt	eq
 8001004:	0049      	lsleq	r1, r1, #1
 8001006:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800100a:	3b01      	subeq	r3, #1
 800100c:	d0f9      	beq.n	8001002 <__aeabi_fdiv+0xda>
 800100e:	ea41 010c 	orr.w	r1, r1, ip
 8001012:	e795      	b.n	8000f40 <__aeabi_fdiv+0x18>
 8001014:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8001018:	ea92 0f0c 	teq	r2, ip
 800101c:	d108      	bne.n	8001030 <__aeabi_fdiv+0x108>
 800101e:	0242      	lsls	r2, r0, #9
 8001020:	f47f af7d 	bne.w	8000f1e <__aeabi_fmul+0x15e>
 8001024:	ea93 0f0c 	teq	r3, ip
 8001028:	f47f af70 	bne.w	8000f0c <__aeabi_fmul+0x14c>
 800102c:	4608      	mov	r0, r1
 800102e:	e776      	b.n	8000f1e <__aeabi_fmul+0x15e>
 8001030:	ea93 0f0c 	teq	r3, ip
 8001034:	d104      	bne.n	8001040 <__aeabi_fdiv+0x118>
 8001036:	024b      	lsls	r3, r1, #9
 8001038:	f43f af4c 	beq.w	8000ed4 <__aeabi_fmul+0x114>
 800103c:	4608      	mov	r0, r1
 800103e:	e76e      	b.n	8000f1e <__aeabi_fmul+0x15e>
 8001040:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8001044:	bf18      	it	ne
 8001046:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800104a:	d1ca      	bne.n	8000fe2 <__aeabi_fdiv+0xba>
 800104c:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8001050:	f47f af5c 	bne.w	8000f0c <__aeabi_fmul+0x14c>
 8001054:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8001058:	f47f af3c 	bne.w	8000ed4 <__aeabi_fmul+0x114>
 800105c:	e75f      	b.n	8000f1e <__aeabi_fmul+0x15e>
 800105e:	bf00      	nop

08001060 <__gesf2>:
 8001060:	f04f 3cff 	mov.w	ip, #4294967295
 8001064:	e006      	b.n	8001074 <__cmpsf2+0x4>
 8001066:	bf00      	nop

08001068 <__lesf2>:
 8001068:	f04f 0c01 	mov.w	ip, #1
 800106c:	e002      	b.n	8001074 <__cmpsf2+0x4>
 800106e:	bf00      	nop

08001070 <__cmpsf2>:
 8001070:	f04f 0c01 	mov.w	ip, #1
 8001074:	f84d cd04 	str.w	ip, [sp, #-4]!
 8001078:	ea4f 0240 	mov.w	r2, r0, lsl #1
 800107c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001080:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001084:	bf18      	it	ne
 8001086:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800108a:	d011      	beq.n	80010b0 <__cmpsf2+0x40>
 800108c:	b001      	add	sp, #4
 800108e:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001092:	bf18      	it	ne
 8001094:	ea90 0f01 	teqne	r0, r1
 8001098:	bf58      	it	pl
 800109a:	ebb2 0003 	subspl.w	r0, r2, r3
 800109e:	bf88      	it	hi
 80010a0:	17c8      	asrhi	r0, r1, #31
 80010a2:	bf38      	it	cc
 80010a4:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 80010a8:	bf18      	it	ne
 80010aa:	f040 0001 	orrne.w	r0, r0, #1
 80010ae:	4770      	bx	lr
 80010b0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80010b4:	d102      	bne.n	80010bc <__cmpsf2+0x4c>
 80010b6:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 80010ba:	d105      	bne.n	80010c8 <__cmpsf2+0x58>
 80010bc:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 80010c0:	d1e4      	bne.n	800108c <__cmpsf2+0x1c>
 80010c2:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 80010c6:	d0e1      	beq.n	800108c <__cmpsf2+0x1c>
 80010c8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80010cc:	4770      	bx	lr
 80010ce:	bf00      	nop

080010d0 <__aeabi_cfrcmple>:
 80010d0:	4684      	mov	ip, r0
 80010d2:	4608      	mov	r0, r1
 80010d4:	4661      	mov	r1, ip
 80010d6:	e7ff      	b.n	80010d8 <__aeabi_cfcmpeq>

080010d8 <__aeabi_cfcmpeq>:
 80010d8:	b50f      	push	{r0, r1, r2, r3, lr}
 80010da:	f7ff ffc9 	bl	8001070 <__cmpsf2>
 80010de:	2800      	cmp	r0, #0
 80010e0:	bf48      	it	mi
 80010e2:	f110 0f00 	cmnmi.w	r0, #0
 80010e6:	bd0f      	pop	{r0, r1, r2, r3, pc}

080010e8 <__aeabi_fcmpeq>:
 80010e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ec:	f7ff fff4 	bl	80010d8 <__aeabi_cfcmpeq>
 80010f0:	bf0c      	ite	eq
 80010f2:	2001      	moveq	r0, #1
 80010f4:	2000      	movne	r0, #0
 80010f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010fa:	bf00      	nop

080010fc <__aeabi_fcmplt>:
 80010fc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001100:	f7ff ffea 	bl	80010d8 <__aeabi_cfcmpeq>
 8001104:	bf34      	ite	cc
 8001106:	2001      	movcc	r0, #1
 8001108:	2000      	movcs	r0, #0
 800110a:	f85d fb08 	ldr.w	pc, [sp], #8
 800110e:	bf00      	nop

08001110 <__aeabi_fcmple>:
 8001110:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001114:	f7ff ffe0 	bl	80010d8 <__aeabi_cfcmpeq>
 8001118:	bf94      	ite	ls
 800111a:	2001      	movls	r0, #1
 800111c:	2000      	movhi	r0, #0
 800111e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001122:	bf00      	nop

08001124 <__aeabi_fcmpge>:
 8001124:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001128:	f7ff ffd2 	bl	80010d0 <__aeabi_cfrcmple>
 800112c:	bf94      	ite	ls
 800112e:	2001      	movls	r0, #1
 8001130:	2000      	movhi	r0, #0
 8001132:	f85d fb08 	ldr.w	pc, [sp], #8
 8001136:	bf00      	nop

08001138 <__aeabi_fcmpgt>:
 8001138:	f84d ed08 	str.w	lr, [sp, #-8]!
 800113c:	f7ff ffc8 	bl	80010d0 <__aeabi_cfrcmple>
 8001140:	bf34      	ite	cc
 8001142:	2001      	movcc	r0, #1
 8001144:	2000      	movcs	r0, #0
 8001146:	f85d fb08 	ldr.w	pc, [sp], #8
 800114a:	bf00      	nop

0800114c <__aeabi_fcmpun>:
 800114c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001150:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001154:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001158:	d102      	bne.n	8001160 <__aeabi_fcmpun+0x14>
 800115a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800115e:	d108      	bne.n	8001172 <__aeabi_fcmpun+0x26>
 8001160:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001164:	d102      	bne.n	800116c <__aeabi_fcmpun+0x20>
 8001166:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800116a:	d102      	bne.n	8001172 <__aeabi_fcmpun+0x26>
 800116c:	f04f 0000 	mov.w	r0, #0
 8001170:	4770      	bx	lr
 8001172:	f04f 0001 	mov.w	r0, #1
 8001176:	4770      	bx	lr

08001178 <__aeabi_f2iz>:
 8001178:	ea4f 0240 	mov.w	r2, r0, lsl #1
 800117c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001180:	d30f      	bcc.n	80011a2 <__aeabi_f2iz+0x2a>
 8001182:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8001186:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800118a:	d90d      	bls.n	80011a8 <__aeabi_f2iz+0x30>
 800118c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001190:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001194:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8001198:	fa23 f002 	lsr.w	r0, r3, r2
 800119c:	bf18      	it	ne
 800119e:	4240      	negne	r0, r0
 80011a0:	4770      	bx	lr
 80011a2:	f04f 0000 	mov.w	r0, #0
 80011a6:	4770      	bx	lr
 80011a8:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80011ac:	d101      	bne.n	80011b2 <__aeabi_f2iz+0x3a>
 80011ae:	0242      	lsls	r2, r0, #9
 80011b0:	d105      	bne.n	80011be <__aeabi_f2iz+0x46>
 80011b2:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 80011b6:	bf08      	it	eq
 80011b8:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80011bc:	4770      	bx	lr
 80011be:	f04f 0000 	mov.w	r0, #0
 80011c2:	4770      	bx	lr

080011c4 <__aeabi_f2uiz>:
 80011c4:	0042      	lsls	r2, r0, #1
 80011c6:	d20e      	bcs.n	80011e6 <__aeabi_f2uiz+0x22>
 80011c8:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80011cc:	d30b      	bcc.n	80011e6 <__aeabi_f2uiz+0x22>
 80011ce:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80011d2:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80011d6:	d409      	bmi.n	80011ec <__aeabi_f2uiz+0x28>
 80011d8:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80011dc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80011e0:	fa23 f002 	lsr.w	r0, r3, r2
 80011e4:	4770      	bx	lr
 80011e6:	f04f 0000 	mov.w	r0, #0
 80011ea:	4770      	bx	lr
 80011ec:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80011f0:	d101      	bne.n	80011f6 <__aeabi_f2uiz+0x32>
 80011f2:	0242      	lsls	r2, r0, #9
 80011f4:	d102      	bne.n	80011fc <__aeabi_f2uiz+0x38>
 80011f6:	f04f 30ff 	mov.w	r0, #4294967295
 80011fa:	4770      	bx	lr
 80011fc:	f04f 0000 	mov.w	r0, #0
 8001200:	4770      	bx	lr
 8001202:	bf00      	nop

08001204 <__aeabi_uldivmod>:
 8001204:	b953      	cbnz	r3, 800121c <__aeabi_uldivmod+0x18>
 8001206:	b94a      	cbnz	r2, 800121c <__aeabi_uldivmod+0x18>
 8001208:	2900      	cmp	r1, #0
 800120a:	bf08      	it	eq
 800120c:	2800      	cmpeq	r0, #0
 800120e:	bf1c      	itt	ne
 8001210:	f04f 31ff 	movne.w	r1, #4294967295
 8001214:	f04f 30ff 	movne.w	r0, #4294967295
 8001218:	f000 b96e 	b.w	80014f8 <__aeabi_idiv0>
 800121c:	f1ad 0c08 	sub.w	ip, sp, #8
 8001220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8001224:	f000 f806 	bl	8001234 <__udivmoddi4>
 8001228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800122c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8001230:	b004      	add	sp, #16
 8001232:	4770      	bx	lr

08001234 <__udivmoddi4>:
 8001234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001238:	9e08      	ldr	r6, [sp, #32]
 800123a:	460d      	mov	r5, r1
 800123c:	4604      	mov	r4, r0
 800123e:	468e      	mov	lr, r1
 8001240:	2b00      	cmp	r3, #0
 8001242:	f040 8083 	bne.w	800134c <__udivmoddi4+0x118>
 8001246:	428a      	cmp	r2, r1
 8001248:	4617      	mov	r7, r2
 800124a:	d947      	bls.n	80012dc <__udivmoddi4+0xa8>
 800124c:	fab2 f382 	clz	r3, r2
 8001250:	b14b      	cbz	r3, 8001266 <__udivmoddi4+0x32>
 8001252:	f1c3 0120 	rsb	r1, r3, #32
 8001256:	fa05 fe03 	lsl.w	lr, r5, r3
 800125a:	fa20 f101 	lsr.w	r1, r0, r1
 800125e:	409f      	lsls	r7, r3
 8001260:	ea41 0e0e 	orr.w	lr, r1, lr
 8001264:	409c      	lsls	r4, r3
 8001266:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800126a:	fbbe fcf8 	udiv	ip, lr, r8
 800126e:	fa1f f987 	uxth.w	r9, r7
 8001272:	fb08 e21c 	mls	r2, r8, ip, lr
 8001276:	fb0c f009 	mul.w	r0, ip, r9
 800127a:	0c21      	lsrs	r1, r4, #16
 800127c:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
 8001280:	4290      	cmp	r0, r2
 8001282:	d90a      	bls.n	800129a <__udivmoddi4+0x66>
 8001284:	18ba      	adds	r2, r7, r2
 8001286:	f10c 31ff 	add.w	r1, ip, #4294967295
 800128a:	f080 8118 	bcs.w	80014be <__udivmoddi4+0x28a>
 800128e:	4290      	cmp	r0, r2
 8001290:	f240 8115 	bls.w	80014be <__udivmoddi4+0x28a>
 8001294:	f1ac 0c02 	sub.w	ip, ip, #2
 8001298:	443a      	add	r2, r7
 800129a:	1a12      	subs	r2, r2, r0
 800129c:	fbb2 f0f8 	udiv	r0, r2, r8
 80012a0:	fb08 2210 	mls	r2, r8, r0, r2
 80012a4:	fb00 f109 	mul.w	r1, r0, r9
 80012a8:	b2a4      	uxth	r4, r4
 80012aa:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80012ae:	42a1      	cmp	r1, r4
 80012b0:	d909      	bls.n	80012c6 <__udivmoddi4+0x92>
 80012b2:	193c      	adds	r4, r7, r4
 80012b4:	f100 32ff 	add.w	r2, r0, #4294967295
 80012b8:	f080 8103 	bcs.w	80014c2 <__udivmoddi4+0x28e>
 80012bc:	42a1      	cmp	r1, r4
 80012be:	f240 8100 	bls.w	80014c2 <__udivmoddi4+0x28e>
 80012c2:	3802      	subs	r0, #2
 80012c4:	443c      	add	r4, r7
 80012c6:	1a64      	subs	r4, r4, r1
 80012c8:	2100      	movs	r1, #0
 80012ca:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80012ce:	b11e      	cbz	r6, 80012d8 <__udivmoddi4+0xa4>
 80012d0:	2200      	movs	r2, #0
 80012d2:	40dc      	lsrs	r4, r3
 80012d4:	e9c6 4200 	strd	r4, r2, [r6]
 80012d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80012dc:	b902      	cbnz	r2, 80012e0 <__udivmoddi4+0xac>
 80012de:	deff      	udf	#255	; 0xff
 80012e0:	fab2 f382 	clz	r3, r2
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d14f      	bne.n	8001388 <__udivmoddi4+0x154>
 80012e8:	1a8d      	subs	r5, r1, r2
 80012ea:	2101      	movs	r1, #1
 80012ec:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80012f0:	fa1f f882 	uxth.w	r8, r2
 80012f4:	fbb5 fcfe 	udiv	ip, r5, lr
 80012f8:	fb0e 551c 	mls	r5, lr, ip, r5
 80012fc:	fb08 f00c 	mul.w	r0, r8, ip
 8001300:	0c22      	lsrs	r2, r4, #16
 8001302:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
 8001306:	42a8      	cmp	r0, r5
 8001308:	d907      	bls.n	800131a <__udivmoddi4+0xe6>
 800130a:	197d      	adds	r5, r7, r5
 800130c:	f10c 32ff 	add.w	r2, ip, #4294967295
 8001310:	d202      	bcs.n	8001318 <__udivmoddi4+0xe4>
 8001312:	42a8      	cmp	r0, r5
 8001314:	f200 80e9 	bhi.w	80014ea <__udivmoddi4+0x2b6>
 8001318:	4694      	mov	ip, r2
 800131a:	1a2d      	subs	r5, r5, r0
 800131c:	fbb5 f0fe 	udiv	r0, r5, lr
 8001320:	fb0e 5510 	mls	r5, lr, r0, r5
 8001324:	fb08 f800 	mul.w	r8, r8, r0
 8001328:	b2a4      	uxth	r4, r4
 800132a:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800132e:	45a0      	cmp	r8, r4
 8001330:	d907      	bls.n	8001342 <__udivmoddi4+0x10e>
 8001332:	193c      	adds	r4, r7, r4
 8001334:	f100 32ff 	add.w	r2, r0, #4294967295
 8001338:	d202      	bcs.n	8001340 <__udivmoddi4+0x10c>
 800133a:	45a0      	cmp	r8, r4
 800133c:	f200 80d9 	bhi.w	80014f2 <__udivmoddi4+0x2be>
 8001340:	4610      	mov	r0, r2
 8001342:	eba4 0408 	sub.w	r4, r4, r8
 8001346:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800134a:	e7c0      	b.n	80012ce <__udivmoddi4+0x9a>
 800134c:	428b      	cmp	r3, r1
 800134e:	d908      	bls.n	8001362 <__udivmoddi4+0x12e>
 8001350:	2e00      	cmp	r6, #0
 8001352:	f000 80b1 	beq.w	80014b8 <__udivmoddi4+0x284>
 8001356:	2100      	movs	r1, #0
 8001358:	e9c6 0500 	strd	r0, r5, [r6]
 800135c:	4608      	mov	r0, r1
 800135e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001362:	fab3 f183 	clz	r1, r3
 8001366:	2900      	cmp	r1, #0
 8001368:	d14b      	bne.n	8001402 <__udivmoddi4+0x1ce>
 800136a:	42ab      	cmp	r3, r5
 800136c:	d302      	bcc.n	8001374 <__udivmoddi4+0x140>
 800136e:	4282      	cmp	r2, r0
 8001370:	f200 80b9 	bhi.w	80014e6 <__udivmoddi4+0x2b2>
 8001374:	1a84      	subs	r4, r0, r2
 8001376:	eb65 0303 	sbc.w	r3, r5, r3
 800137a:	2001      	movs	r0, #1
 800137c:	469e      	mov	lr, r3
 800137e:	2e00      	cmp	r6, #0
 8001380:	d0aa      	beq.n	80012d8 <__udivmoddi4+0xa4>
 8001382:	e9c6 4e00 	strd	r4, lr, [r6]
 8001386:	e7a7      	b.n	80012d8 <__udivmoddi4+0xa4>
 8001388:	409f      	lsls	r7, r3
 800138a:	f1c3 0220 	rsb	r2, r3, #32
 800138e:	40d1      	lsrs	r1, r2
 8001390:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8001394:	fbb1 f0fe 	udiv	r0, r1, lr
 8001398:	fa1f f887 	uxth.w	r8, r7
 800139c:	fb0e 1110 	mls	r1, lr, r0, r1
 80013a0:	fa24 f202 	lsr.w	r2, r4, r2
 80013a4:	409d      	lsls	r5, r3
 80013a6:	fb00 fc08 	mul.w	ip, r0, r8
 80013aa:	432a      	orrs	r2, r5
 80013ac:	0c15      	lsrs	r5, r2, #16
 80013ae:	ea45 4501 	orr.w	r5, r5, r1, lsl #16
 80013b2:	45ac      	cmp	ip, r5
 80013b4:	fa04 f403 	lsl.w	r4, r4, r3
 80013b8:	d909      	bls.n	80013ce <__udivmoddi4+0x19a>
 80013ba:	197d      	adds	r5, r7, r5
 80013bc:	f100 31ff 	add.w	r1, r0, #4294967295
 80013c0:	f080 808f 	bcs.w	80014e2 <__udivmoddi4+0x2ae>
 80013c4:	45ac      	cmp	ip, r5
 80013c6:	f240 808c 	bls.w	80014e2 <__udivmoddi4+0x2ae>
 80013ca:	3802      	subs	r0, #2
 80013cc:	443d      	add	r5, r7
 80013ce:	eba5 050c 	sub.w	r5, r5, ip
 80013d2:	fbb5 f1fe 	udiv	r1, r5, lr
 80013d6:	fb0e 5c11 	mls	ip, lr, r1, r5
 80013da:	fb01 f908 	mul.w	r9, r1, r8
 80013de:	b295      	uxth	r5, r2
 80013e0:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 80013e4:	45a9      	cmp	r9, r5
 80013e6:	d907      	bls.n	80013f8 <__udivmoddi4+0x1c4>
 80013e8:	197d      	adds	r5, r7, r5
 80013ea:	f101 32ff 	add.w	r2, r1, #4294967295
 80013ee:	d274      	bcs.n	80014da <__udivmoddi4+0x2a6>
 80013f0:	45a9      	cmp	r9, r5
 80013f2:	d972      	bls.n	80014da <__udivmoddi4+0x2a6>
 80013f4:	3902      	subs	r1, #2
 80013f6:	443d      	add	r5, r7
 80013f8:	eba5 0509 	sub.w	r5, r5, r9
 80013fc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8001400:	e778      	b.n	80012f4 <__udivmoddi4+0xc0>
 8001402:	f1c1 0720 	rsb	r7, r1, #32
 8001406:	408b      	lsls	r3, r1
 8001408:	fa22 fc07 	lsr.w	ip, r2, r7
 800140c:	ea4c 0c03 	orr.w	ip, ip, r3
 8001410:	fa25 f407 	lsr.w	r4, r5, r7
 8001414:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8001418:	fbb4 f9fe 	udiv	r9, r4, lr
 800141c:	fa1f f88c 	uxth.w	r8, ip
 8001420:	fb0e 4419 	mls	r4, lr, r9, r4
 8001424:	fa20 f307 	lsr.w	r3, r0, r7
 8001428:	fb09 fa08 	mul.w	sl, r9, r8
 800142c:	408d      	lsls	r5, r1
 800142e:	431d      	orrs	r5, r3
 8001430:	0c2b      	lsrs	r3, r5, #16
 8001432:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8001436:	45a2      	cmp	sl, r4
 8001438:	fa02 f201 	lsl.w	r2, r2, r1
 800143c:	fa00 f301 	lsl.w	r3, r0, r1
 8001440:	d909      	bls.n	8001456 <__udivmoddi4+0x222>
 8001442:	eb1c 0404 	adds.w	r4, ip, r4
 8001446:	f109 30ff 	add.w	r0, r9, #4294967295
 800144a:	d248      	bcs.n	80014de <__udivmoddi4+0x2aa>
 800144c:	45a2      	cmp	sl, r4
 800144e:	d946      	bls.n	80014de <__udivmoddi4+0x2aa>
 8001450:	f1a9 0902 	sub.w	r9, r9, #2
 8001454:	4464      	add	r4, ip
 8001456:	eba4 040a 	sub.w	r4, r4, sl
 800145a:	fbb4 f0fe 	udiv	r0, r4, lr
 800145e:	fb0e 4410 	mls	r4, lr, r0, r4
 8001462:	fb00 fa08 	mul.w	sl, r0, r8
 8001466:	b2ad      	uxth	r5, r5
 8001468:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 800146c:	45a2      	cmp	sl, r4
 800146e:	d908      	bls.n	8001482 <__udivmoddi4+0x24e>
 8001470:	eb1c 0404 	adds.w	r4, ip, r4
 8001474:	f100 35ff 	add.w	r5, r0, #4294967295
 8001478:	d22d      	bcs.n	80014d6 <__udivmoddi4+0x2a2>
 800147a:	45a2      	cmp	sl, r4
 800147c:	d92b      	bls.n	80014d6 <__udivmoddi4+0x2a2>
 800147e:	3802      	subs	r0, #2
 8001480:	4464      	add	r4, ip
 8001482:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8001486:	fba0 8902 	umull	r8, r9, r0, r2
 800148a:	eba4 040a 	sub.w	r4, r4, sl
 800148e:	454c      	cmp	r4, r9
 8001490:	46c6      	mov	lr, r8
 8001492:	464d      	mov	r5, r9
 8001494:	d319      	bcc.n	80014ca <__udivmoddi4+0x296>
 8001496:	d016      	beq.n	80014c6 <__udivmoddi4+0x292>
 8001498:	b15e      	cbz	r6, 80014b2 <__udivmoddi4+0x27e>
 800149a:	ebb3 020e 	subs.w	r2, r3, lr
 800149e:	eb64 0405 	sbc.w	r4, r4, r5
 80014a2:	fa04 f707 	lsl.w	r7, r4, r7
 80014a6:	fa22 f301 	lsr.w	r3, r2, r1
 80014aa:	431f      	orrs	r7, r3
 80014ac:	40cc      	lsrs	r4, r1
 80014ae:	e9c6 7400 	strd	r7, r4, [r6]
 80014b2:	2100      	movs	r1, #0
 80014b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80014b8:	4631      	mov	r1, r6
 80014ba:	4630      	mov	r0, r6
 80014bc:	e70c      	b.n	80012d8 <__udivmoddi4+0xa4>
 80014be:	468c      	mov	ip, r1
 80014c0:	e6eb      	b.n	800129a <__udivmoddi4+0x66>
 80014c2:	4610      	mov	r0, r2
 80014c4:	e6ff      	b.n	80012c6 <__udivmoddi4+0x92>
 80014c6:	4543      	cmp	r3, r8
 80014c8:	d2e6      	bcs.n	8001498 <__udivmoddi4+0x264>
 80014ca:	ebb8 0e02 	subs.w	lr, r8, r2
 80014ce:	eb69 050c 	sbc.w	r5, r9, ip
 80014d2:	3801      	subs	r0, #1
 80014d4:	e7e0      	b.n	8001498 <__udivmoddi4+0x264>
 80014d6:	4628      	mov	r0, r5
 80014d8:	e7d3      	b.n	8001482 <__udivmoddi4+0x24e>
 80014da:	4611      	mov	r1, r2
 80014dc:	e78c      	b.n	80013f8 <__udivmoddi4+0x1c4>
 80014de:	4681      	mov	r9, r0
 80014e0:	e7b9      	b.n	8001456 <__udivmoddi4+0x222>
 80014e2:	4608      	mov	r0, r1
 80014e4:	e773      	b.n	80013ce <__udivmoddi4+0x19a>
 80014e6:	4608      	mov	r0, r1
 80014e8:	e749      	b.n	800137e <__udivmoddi4+0x14a>
 80014ea:	f1ac 0c02 	sub.w	ip, ip, #2
 80014ee:	443d      	add	r5, r7
 80014f0:	e713      	b.n	800131a <__udivmoddi4+0xe6>
 80014f2:	3802      	subs	r0, #2
 80014f4:	443c      	add	r4, r7
 80014f6:	e724      	b.n	8001342 <__udivmoddi4+0x10e>

080014f8 <__aeabi_idiv0>:
 80014f8:	4770      	bx	lr
 80014fa:	bf00      	nop

080014fc <_Z8readBitshhhhPh>:
 * @param bitStart First bit position to read (0-7)
 * @param length Number of bits to read (not more than 8)
 * @param data Container for right-aligned value (i.e. '101' read from any bitStart position will equal 0x05)
 * @return Status of read operation (true = success)
 */
int8_t readBits(uint8_t devAddr, uint8_t regAddr, uint8_t bitStart, uint8_t length, uint8_t *data) {
 80014fc:	b590      	push	{r4, r7, lr}
 80014fe:	b089      	sub	sp, #36	; 0x24
 8001500:	af04      	add	r7, sp, #16
 8001502:	4604      	mov	r4, r0
 8001504:	4608      	mov	r0, r1
 8001506:	4611      	mov	r1, r2
 8001508:	461a      	mov	r2, r3
 800150a:	4623      	mov	r3, r4
 800150c:	71fb      	strb	r3, [r7, #7]
 800150e:	4603      	mov	r3, r0
 8001510:	71bb      	strb	r3, [r7, #6]
 8001512:	460b      	mov	r3, r1
 8001514:	717b      	strb	r3, [r7, #5]
 8001516:	4613      	mov	r3, r2
 8001518:	713b      	strb	r3, [r7, #4]
  // 01101001 read byte
  // 76543210 bit numbers
  //    xxx   args: bitStart=4, length=3
  //    010   masked
  //   -> 010 shifted
  sendBuf[0] = regAddr;
 800151a:	4a25      	ldr	r2, [pc, #148]	; (80015b0 <_Z8readBitshhhhPh+0xb4>)
 800151c:	79bb      	ldrb	r3, [r7, #6]
 800151e:	7013      	strb	r3, [r2, #0]
  uint8_t buffer;
  while(HAL_I2C_Mem_Read(&hi2c1,devAddr,regAddr,I2C_MEMADD_SIZE_8BIT,&buffer,1,I2CDLY) != HAL_OK){
 8001520:	79fb      	ldrb	r3, [r7, #7]
 8001522:	b299      	uxth	r1, r3
 8001524:	79bb      	ldrb	r3, [r7, #6]
 8001526:	b29a      	uxth	r2, r3
 8001528:	2301      	movs	r3, #1
 800152a:	9302      	str	r3, [sp, #8]
 800152c:	2301      	movs	r3, #1
 800152e:	9301      	str	r3, [sp, #4]
 8001530:	f107 030c 	add.w	r3, r7, #12
 8001534:	9300      	str	r3, [sp, #0]
 8001536:	2301      	movs	r3, #1
 8001538:	481e      	ldr	r0, [pc, #120]	; (80015b4 <_Z8readBitshhhhPh+0xb8>)
 800153a:	f004 fb47 	bl	8005bcc <HAL_I2C_Mem_Read>
 800153e:	4603      	mov	r3, r0
 8001540:	2b00      	cmp	r3, #0
 8001542:	bf14      	ite	ne
 8001544:	2301      	movne	r3, #1
 8001546:	2300      	moveq	r3, #0
 8001548:	b2db      	uxtb	r3, r3
 800154a:	2b00      	cmp	r3, #0
 800154c:	d002      	beq.n	8001554 <_Z8readBitshhhhPh+0x58>
  	  MX_I2C1_Init();
 800154e:	f001 fd2b 	bl	8002fa8 <MX_I2C1_Init>
  while(HAL_I2C_Mem_Read(&hi2c1,devAddr,regAddr,I2C_MEMADD_SIZE_8BIT,&buffer,1,I2CDLY) != HAL_OK){
 8001552:	e7e5      	b.n	8001520 <_Z8readBitshhhhPh+0x24>
    }
  uint8_t response = BCM2835_I2C_REASON_OK;
 8001554:	2301      	movs	r3, #1
 8001556:	73fb      	strb	r3, [r7, #15]
  uint8_t b = buffer;
 8001558:	7b3b      	ldrb	r3, [r7, #12]
 800155a:	73bb      	strb	r3, [r7, #14]
  if (response == BCM2835_I2C_REASON_OK) {
 800155c:	7bfb      	ldrb	r3, [r7, #15]
 800155e:	2b01      	cmp	r3, #1
 8001560:	d11a      	bne.n	8001598 <_Z8readBitshhhhPh+0x9c>
    uint8_t mask = ((1 << length) - 1) << (bitStart - length + 1);
 8001562:	793b      	ldrb	r3, [r7, #4]
 8001564:	2201      	movs	r2, #1
 8001566:	fa02 f303 	lsl.w	r3, r2, r3
 800156a:	1e5a      	subs	r2, r3, #1
 800156c:	7979      	ldrb	r1, [r7, #5]
 800156e:	793b      	ldrb	r3, [r7, #4]
 8001570:	1acb      	subs	r3, r1, r3
 8001572:	3301      	adds	r3, #1
 8001574:	fa02 f303 	lsl.w	r3, r2, r3
 8001578:	737b      	strb	r3, [r7, #13]
    b &= mask;
 800157a:	7bba      	ldrb	r2, [r7, #14]
 800157c:	7b7b      	ldrb	r3, [r7, #13]
 800157e:	4013      	ands	r3, r2
 8001580:	73bb      	strb	r3, [r7, #14]
    b >>= (bitStart - length + 1);
 8001582:	7bba      	ldrb	r2, [r7, #14]
 8001584:	7979      	ldrb	r1, [r7, #5]
 8001586:	793b      	ldrb	r3, [r7, #4]
 8001588:	1acb      	subs	r3, r1, r3
 800158a:	3301      	adds	r3, #1
 800158c:	fa42 f303 	asr.w	r3, r2, r3
 8001590:	73bb      	strb	r3, [r7, #14]
    *data = b;
 8001592:	6a3b      	ldr	r3, [r7, #32]
 8001594:	7bba      	ldrb	r2, [r7, #14]
 8001596:	701a      	strb	r2, [r3, #0]
  }
  return response == BCM2835_I2C_REASON_OK;
 8001598:	7bfb      	ldrb	r3, [r7, #15]
 800159a:	2b01      	cmp	r3, #1
 800159c:	bf0c      	ite	eq
 800159e:	2301      	moveq	r3, #1
 80015a0:	2300      	movne	r3, #0
 80015a2:	b2db      	uxtb	r3, r3
 80015a4:	b25b      	sxtb	r3, r3
}
 80015a6:	4618      	mov	r0, r3
 80015a8:	3714      	adds	r7, #20
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bd90      	pop	{r4, r7, pc}
 80015ae:	bf00      	nop
 80015b0:	20000208 	.word	0x20000208
 80015b4:	20000434 	.word	0x20000434

080015b8 <_Z8readBytehhPh>:
 * @param devAddr I2C slave device address
 * @param regAddr Register regAddr to read from
 * @param data Container for byte value read from device
 * @return Status of read operation (true = success)
 */
int8_t readByte(uint8_t devAddr, uint8_t regAddr, uint8_t *data) {
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b088      	sub	sp, #32
 80015bc:	af04      	add	r7, sp, #16
 80015be:	4603      	mov	r3, r0
 80015c0:	603a      	str	r2, [r7, #0]
 80015c2:	71fb      	strb	r3, [r7, #7]
 80015c4:	460b      	mov	r3, r1
 80015c6:	71bb      	strb	r3, [r7, #6]
  sendBuf[0] = regAddr;
 80015c8:	4a16      	ldr	r2, [pc, #88]	; (8001624 <_Z8readBytehhPh+0x6c>)
 80015ca:	79bb      	ldrb	r3, [r7, #6]
 80015cc:	7013      	strb	r3, [r2, #0]
  uint8_t buffer;
  while(HAL_I2C_Mem_Read(&hi2c1,devAddr,regAddr,I2C_MEMADD_SIZE_8BIT,&buffer,1,I2CDLY) != HAL_OK){
 80015ce:	79fb      	ldrb	r3, [r7, #7]
 80015d0:	b299      	uxth	r1, r3
 80015d2:	79bb      	ldrb	r3, [r7, #6]
 80015d4:	b29a      	uxth	r2, r3
 80015d6:	2301      	movs	r3, #1
 80015d8:	9302      	str	r3, [sp, #8]
 80015da:	2301      	movs	r3, #1
 80015dc:	9301      	str	r3, [sp, #4]
 80015de:	f107 030e 	add.w	r3, r7, #14
 80015e2:	9300      	str	r3, [sp, #0]
 80015e4:	2301      	movs	r3, #1
 80015e6:	4810      	ldr	r0, [pc, #64]	; (8001628 <_Z8readBytehhPh+0x70>)
 80015e8:	f004 faf0 	bl	8005bcc <HAL_I2C_Mem_Read>
 80015ec:	4603      	mov	r3, r0
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	bf14      	ite	ne
 80015f2:	2301      	movne	r3, #1
 80015f4:	2300      	moveq	r3, #0
 80015f6:	b2db      	uxtb	r3, r3
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d002      	beq.n	8001602 <_Z8readBytehhPh+0x4a>
    MX_I2C1_Init();
 80015fc:	f001 fcd4 	bl	8002fa8 <MX_I2C1_Init>
  while(HAL_I2C_Mem_Read(&hi2c1,devAddr,regAddr,I2C_MEMADD_SIZE_8BIT,&buffer,1,I2CDLY) != HAL_OK){
 8001600:	e7e5      	b.n	80015ce <_Z8readBytehhPh+0x16>
  }
  uint8_t response = BCM2835_I2C_REASON_OK;
 8001602:	2301      	movs	r3, #1
 8001604:	73fb      	strb	r3, [r7, #15]
  data[0] = buffer;
 8001606:	7bba      	ldrb	r2, [r7, #14]
 8001608:	683b      	ldr	r3, [r7, #0]
 800160a:	701a      	strb	r2, [r3, #0]
  return response == BCM2835_I2C_REASON_OK;
 800160c:	7bfb      	ldrb	r3, [r7, #15]
 800160e:	2b01      	cmp	r3, #1
 8001610:	bf0c      	ite	eq
 8001612:	2301      	moveq	r3, #1
 8001614:	2300      	movne	r3, #0
 8001616:	b2db      	uxtb	r3, r3
 8001618:	b25b      	sxtb	r3, r3
}
 800161a:	4618      	mov	r0, r3
 800161c:	3710      	adds	r7, #16
 800161e:	46bd      	mov	sp, r7
 8001620:	bd80      	pop	{r7, pc}
 8001622:	bf00      	nop
 8001624:	20000208 	.word	0x20000208
 8001628:	20000434 	.word	0x20000434

0800162c <_Z9readByteshhhPh>:
 * @param regAddr First register regAddr to read from
 * @param length Number of bytes to read
 * @param data Buffer to store read data in
 * @return I2C_TransferReturn_TypeDef http://downloads.energymicro.com/documentation/doxygen/group__I2C.html
 */
int8_t readBytes(uint8_t devAddr, uint8_t regAddr, uint8_t length, uint8_t *data) {
 800162c:	b5b0      	push	{r4, r5, r7, lr}
 800162e:	b08a      	sub	sp, #40	; 0x28
 8001630:	af04      	add	r7, sp, #16
 8001632:	603b      	str	r3, [r7, #0]
 8001634:	4603      	mov	r3, r0
 8001636:	71fb      	strb	r3, [r7, #7]
 8001638:	460b      	mov	r3, r1
 800163a:	71bb      	strb	r3, [r7, #6]
 800163c:	4613      	mov	r3, r2
 800163e:	717b      	strb	r3, [r7, #5]
  uint8_t response = BCM2835_I2C_REASON_OK;
  int i ;
  for (i = 0; i < length ; i++) {
    data[i] = (uint8_t) buffer[i];
  }
  return response == BCM2835_I2C_REASON_OK;
 8001640:	466b      	mov	r3, sp
 8001642:	461d      	mov	r5, r3
  sendBuf[0] = regAddr;
 8001644:	4a32      	ldr	r2, [pc, #200]	; (8001710 <_Z9readByteshhhPh+0xe4>)
 8001646:	79bb      	ldrb	r3, [r7, #6]
 8001648:	7013      	strb	r3, [r2, #0]
  uint8_t buffer[length];
 800164a:	797b      	ldrb	r3, [r7, #5]
 800164c:	1e5c      	subs	r4, r3, #1
 800164e:	613c      	str	r4, [r7, #16]
 8001650:	4623      	mov	r3, r4
 8001652:	3301      	adds	r3, #1
 8001654:	4618      	mov	r0, r3
 8001656:	f04f 0100 	mov.w	r1, #0
 800165a:	f04f 0200 	mov.w	r2, #0
 800165e:	f04f 0300 	mov.w	r3, #0
 8001662:	00cb      	lsls	r3, r1, #3
 8001664:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8001668:	00c2      	lsls	r2, r0, #3
 800166a:	4623      	mov	r3, r4
 800166c:	3301      	adds	r3, #1
 800166e:	4618      	mov	r0, r3
 8001670:	f04f 0100 	mov.w	r1, #0
 8001674:	f04f 0200 	mov.w	r2, #0
 8001678:	f04f 0300 	mov.w	r3, #0
 800167c:	00cb      	lsls	r3, r1, #3
 800167e:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8001682:	00c2      	lsls	r2, r0, #3
 8001684:	4623      	mov	r3, r4
 8001686:	3301      	adds	r3, #1
 8001688:	3307      	adds	r3, #7
 800168a:	08db      	lsrs	r3, r3, #3
 800168c:	00db      	lsls	r3, r3, #3
 800168e:	ebad 0d03 	sub.w	sp, sp, r3
 8001692:	ab04      	add	r3, sp, #16
 8001694:	3300      	adds	r3, #0
 8001696:	60fb      	str	r3, [r7, #12]
  while(HAL_I2C_Mem_Read(&hi2c1,devAddr,regAddr,I2C_MEMADD_SIZE_8BIT,buffer,length,I2CDLY) != HAL_OK){
 8001698:	79fb      	ldrb	r3, [r7, #7]
 800169a:	b299      	uxth	r1, r3
 800169c:	79bb      	ldrb	r3, [r7, #6]
 800169e:	b298      	uxth	r0, r3
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	797a      	ldrb	r2, [r7, #5]
 80016a4:	b292      	uxth	r2, r2
 80016a6:	2401      	movs	r4, #1
 80016a8:	9402      	str	r4, [sp, #8]
 80016aa:	9201      	str	r2, [sp, #4]
 80016ac:	9300      	str	r3, [sp, #0]
 80016ae:	2301      	movs	r3, #1
 80016b0:	4602      	mov	r2, r0
 80016b2:	4818      	ldr	r0, [pc, #96]	; (8001714 <_Z9readByteshhhPh+0xe8>)
 80016b4:	f004 fa8a 	bl	8005bcc <HAL_I2C_Mem_Read>
 80016b8:	4603      	mov	r3, r0
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	bf14      	ite	ne
 80016be:	2301      	movne	r3, #1
 80016c0:	2300      	moveq	r3, #0
 80016c2:	b2db      	uxtb	r3, r3
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d002      	beq.n	80016ce <_Z9readByteshhhPh+0xa2>
    MX_I2C1_Init();
 80016c8:	f001 fc6e 	bl	8002fa8 <MX_I2C1_Init>
  while(HAL_I2C_Mem_Read(&hi2c1,devAddr,regAddr,I2C_MEMADD_SIZE_8BIT,buffer,length,I2CDLY) != HAL_OK){
 80016cc:	e7e4      	b.n	8001698 <_Z9readByteshhhPh+0x6c>
  uint8_t response = BCM2835_I2C_REASON_OK;
 80016ce:	2301      	movs	r3, #1
 80016d0:	72fb      	strb	r3, [r7, #11]
  for (i = 0; i < length ; i++) {
 80016d2:	2300      	movs	r3, #0
 80016d4:	617b      	str	r3, [r7, #20]
 80016d6:	797b      	ldrb	r3, [r7, #5]
 80016d8:	697a      	ldr	r2, [r7, #20]
 80016da:	429a      	cmp	r2, r3
 80016dc:	da0b      	bge.n	80016f6 <_Z9readByteshhhPh+0xca>
    data[i] = (uint8_t) buffer[i];
 80016de:	697b      	ldr	r3, [r7, #20]
 80016e0:	683a      	ldr	r2, [r7, #0]
 80016e2:	4413      	add	r3, r2
 80016e4:	68f9      	ldr	r1, [r7, #12]
 80016e6:	697a      	ldr	r2, [r7, #20]
 80016e8:	440a      	add	r2, r1
 80016ea:	7812      	ldrb	r2, [r2, #0]
 80016ec:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < length ; i++) {
 80016ee:	697b      	ldr	r3, [r7, #20]
 80016f0:	3301      	adds	r3, #1
 80016f2:	617b      	str	r3, [r7, #20]
 80016f4:	e7ef      	b.n	80016d6 <_Z9readByteshhhPh+0xaa>
  return response == BCM2835_I2C_REASON_OK;
 80016f6:	7afb      	ldrb	r3, [r7, #11]
 80016f8:	2b01      	cmp	r3, #1
 80016fa:	bf0c      	ite	eq
 80016fc:	2301      	moveq	r3, #1
 80016fe:	2300      	movne	r3, #0
 8001700:	b2db      	uxtb	r3, r3
 8001702:	b25b      	sxtb	r3, r3
 8001704:	46ad      	mov	sp, r5
}
 8001706:	4618      	mov	r0, r3
 8001708:	3718      	adds	r7, #24
 800170a:	46bd      	mov	sp, r7
 800170c:	bdb0      	pop	{r4, r5, r7, pc}
 800170e:	bf00      	nop
 8001710:	20000208 	.word	0x20000208
 8001714:	20000434 	.word	0x20000434

08001718 <_Z8writeBithhhh>:
 * @param regAddr Register regAddr to write to
 * @param bitNum Bit position to write (0-7)
 * @param value New bit value to write
 * @return Status of operation (true = success)
 */
bool writeBit(uint8_t devAddr, uint8_t regAddr, uint8_t bitNum, uint8_t data) {
 8001718:	b590      	push	{r4, r7, lr}
 800171a:	b089      	sub	sp, #36	; 0x24
 800171c:	af04      	add	r7, sp, #16
 800171e:	4604      	mov	r4, r0
 8001720:	4608      	mov	r0, r1
 8001722:	4611      	mov	r1, r2
 8001724:	461a      	mov	r2, r3
 8001726:	4623      	mov	r3, r4
 8001728:	71fb      	strb	r3, [r7, #7]
 800172a:	4603      	mov	r3, r0
 800172c:	71bb      	strb	r3, [r7, #6]
 800172e:	460b      	mov	r3, r1
 8001730:	717b      	strb	r3, [r7, #5]
 8001732:	4613      	mov	r3, r2
 8001734:	713b      	strb	r3, [r7, #4]

  //first reading registery value
  sendBuf[0] = regAddr;
 8001736:	4a34      	ldr	r2, [pc, #208]	; (8001808 <_Z8writeBithhhh+0xf0>)
 8001738:	79bb      	ldrb	r3, [r7, #6]
 800173a:	7013      	strb	r3, [r2, #0]
  uint8_t buffer;
  while(HAL_I2C_Mem_Read(&hi2c1,devAddr,regAddr,I2C_MEMADD_SIZE_8BIT,&buffer,1,I2CDLY) != HAL_OK){
 800173c:	79fb      	ldrb	r3, [r7, #7]
 800173e:	b299      	uxth	r1, r3
 8001740:	79bb      	ldrb	r3, [r7, #6]
 8001742:	b29a      	uxth	r2, r3
 8001744:	2301      	movs	r3, #1
 8001746:	9302      	str	r3, [sp, #8]
 8001748:	2301      	movs	r3, #1
 800174a:	9301      	str	r3, [sp, #4]
 800174c:	f107 030e 	add.w	r3, r7, #14
 8001750:	9300      	str	r3, [sp, #0]
 8001752:	2301      	movs	r3, #1
 8001754:	482d      	ldr	r0, [pc, #180]	; (800180c <_Z8writeBithhhh+0xf4>)
 8001756:	f004 fa39 	bl	8005bcc <HAL_I2C_Mem_Read>
 800175a:	4603      	mov	r3, r0
 800175c:	2b00      	cmp	r3, #0
 800175e:	bf14      	ite	ne
 8001760:	2301      	movne	r3, #1
 8001762:	2300      	moveq	r3, #0
 8001764:	b2db      	uxtb	r3, r3
 8001766:	2b00      	cmp	r3, #0
 8001768:	d002      	beq.n	8001770 <_Z8writeBithhhh+0x58>
    MX_I2C1_Init();
 800176a:	f001 fc1d 	bl	8002fa8 <MX_I2C1_Init>
  while(HAL_I2C_Mem_Read(&hi2c1,devAddr,regAddr,I2C_MEMADD_SIZE_8BIT,&buffer,1,I2CDLY) != HAL_OK){
 800176e:	e7e5      	b.n	800173c <_Z8writeBithhhh+0x24>
  }
  uint8_t response = BCM2835_I2C_REASON_OK;
 8001770:	2301      	movs	r3, #1
 8001772:	73fb      	strb	r3, [r7, #15]
  if ( response == BCM2835_I2C_REASON_OK ) {
 8001774:	7bfb      	ldrb	r3, [r7, #15]
 8001776:	2b01      	cmp	r3, #1
 8001778:	d13b      	bne.n	80017f2 <_Z8writeBithhhh+0xda>
    uint8_t b = buffer ;
 800177a:	7bbb      	ldrb	r3, [r7, #14]
 800177c:	737b      	strb	r3, [r7, #13]
    b = (data != 0) ? (b | (1 << bitNum)) : (b & ~(1 << bitNum));
 800177e:	793b      	ldrb	r3, [r7, #4]
 8001780:	2b00      	cmp	r3, #0
 8001782:	d00a      	beq.n	800179a <_Z8writeBithhhh+0x82>
 8001784:	797b      	ldrb	r3, [r7, #5]
 8001786:	2201      	movs	r2, #1
 8001788:	fa02 f303 	lsl.w	r3, r2, r3
 800178c:	b25a      	sxtb	r2, r3
 800178e:	7b7b      	ldrb	r3, [r7, #13]
 8001790:	b25b      	sxtb	r3, r3
 8001792:	4313      	orrs	r3, r2
 8001794:	b25b      	sxtb	r3, r3
 8001796:	b2db      	uxtb	r3, r3
 8001798:	e00b      	b.n	80017b2 <_Z8writeBithhhh+0x9a>
 800179a:	797b      	ldrb	r3, [r7, #5]
 800179c:	2201      	movs	r2, #1
 800179e:	fa02 f303 	lsl.w	r3, r2, r3
 80017a2:	b25b      	sxtb	r3, r3
 80017a4:	43db      	mvns	r3, r3
 80017a6:	b25a      	sxtb	r2, r3
 80017a8:	7b7b      	ldrb	r3, [r7, #13]
 80017aa:	b25b      	sxtb	r3, r3
 80017ac:	4013      	ands	r3, r2
 80017ae:	b25b      	sxtb	r3, r3
 80017b0:	b2db      	uxtb	r3, r3
 80017b2:	737b      	strb	r3, [r7, #13]
    sendBuf[1] = b ;
 80017b4:	7b7a      	ldrb	r2, [r7, #13]
 80017b6:	4b14      	ldr	r3, [pc, #80]	; (8001808 <_Z8writeBithhhh+0xf0>)
 80017b8:	705a      	strb	r2, [r3, #1]
    while(HAL_I2C_Mem_Write(&hi2c1,devAddr,regAddr, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&b, 1,I2CDLY) != HAL_OK){
 80017ba:	79fb      	ldrb	r3, [r7, #7]
 80017bc:	b299      	uxth	r1, r3
 80017be:	79bb      	ldrb	r3, [r7, #6]
 80017c0:	b29a      	uxth	r2, r3
 80017c2:	2301      	movs	r3, #1
 80017c4:	9302      	str	r3, [sp, #8]
 80017c6:	2301      	movs	r3, #1
 80017c8:	9301      	str	r3, [sp, #4]
 80017ca:	f107 030d 	add.w	r3, r7, #13
 80017ce:	9300      	str	r3, [sp, #0]
 80017d0:	2301      	movs	r3, #1
 80017d2:	480e      	ldr	r0, [pc, #56]	; (800180c <_Z8writeBithhhh+0xf4>)
 80017d4:	f004 f900 	bl	80059d8 <HAL_I2C_Mem_Write>
 80017d8:	4603      	mov	r3, r0
 80017da:	2b00      	cmp	r3, #0
 80017dc:	bf14      	ite	ne
 80017de:	2301      	movne	r3, #1
 80017e0:	2300      	moveq	r3, #0
 80017e2:	b2db      	uxtb	r3, r3
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d002      	beq.n	80017ee <_Z8writeBithhhh+0xd6>
    	MX_I2C1_Init();
 80017e8:	f001 fbde 	bl	8002fa8 <MX_I2C1_Init>
    while(HAL_I2C_Mem_Write(&hi2c1,devAddr,regAddr, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&b, 1,I2CDLY) != HAL_OK){
 80017ec:	e7e5      	b.n	80017ba <_Z8writeBithhhh+0xa2>
    }
    response = BCM2835_I2C_REASON_OK;
 80017ee:	2301      	movs	r3, #1
 80017f0:	73fb      	strb	r3, [r7, #15]
  }
  return response == BCM2835_I2C_REASON_OK;
 80017f2:	7bfb      	ldrb	r3, [r7, #15]
 80017f4:	2b01      	cmp	r3, #1
 80017f6:	bf0c      	ite	eq
 80017f8:	2301      	moveq	r3, #1
 80017fa:	2300      	movne	r3, #0
 80017fc:	b2db      	uxtb	r3, r3
}
 80017fe:	4618      	mov	r0, r3
 8001800:	3714      	adds	r7, #20
 8001802:	46bd      	mov	sp, r7
 8001804:	bd90      	pop	{r4, r7, pc}
 8001806:	bf00      	nop
 8001808:	20000208 	.word	0x20000208
 800180c:	20000434 	.word	0x20000434

08001810 <_Z9writeBitshhhhh>:
 * @param bitStart First bit position to write (0-7)
 * @param length Number of bits to write (not more than 8)
 * @param data Right-aligned value to write
 * @return Status of operation (true = success)
 */
bool writeBits(uint8_t devAddr, uint8_t regAddr, uint8_t bitStart, uint8_t length, uint8_t data) {
 8001810:	b590      	push	{r4, r7, lr}
 8001812:	b089      	sub	sp, #36	; 0x24
 8001814:	af04      	add	r7, sp, #16
 8001816:	4604      	mov	r4, r0
 8001818:	4608      	mov	r0, r1
 800181a:	4611      	mov	r1, r2
 800181c:	461a      	mov	r2, r3
 800181e:	4623      	mov	r3, r4
 8001820:	71fb      	strb	r3, [r7, #7]
 8001822:	4603      	mov	r3, r0
 8001824:	71bb      	strb	r3, [r7, #6]
 8001826:	460b      	mov	r3, r1
 8001828:	717b      	strb	r3, [r7, #5]
 800182a:	4613      	mov	r3, r2
 800182c:	713b      	strb	r3, [r7, #4]
  // 10101111 original value (sample)
  // 10100011 original & ~mask
  // 10101011 masked | value

  //first reading registery value
  sendBuf[0] = regAddr;
 800182e:	4a3c      	ldr	r2, [pc, #240]	; (8001920 <_Z9writeBitshhhhh+0x110>)
 8001830:	79bb      	ldrb	r3, [r7, #6]
 8001832:	7013      	strb	r3, [r2, #0]
  uint8_t buffer;
  while(HAL_I2C_Mem_Read(&hi2c1,devAddr,regAddr,I2C_MEMADD_SIZE_8BIT,&buffer,1,I2CDLY) != HAL_OK){
 8001834:	79fb      	ldrb	r3, [r7, #7]
 8001836:	b299      	uxth	r1, r3
 8001838:	79bb      	ldrb	r3, [r7, #6]
 800183a:	b29a      	uxth	r2, r3
 800183c:	2301      	movs	r3, #1
 800183e:	9302      	str	r3, [sp, #8]
 8001840:	2301      	movs	r3, #1
 8001842:	9301      	str	r3, [sp, #4]
 8001844:	f107 030d 	add.w	r3, r7, #13
 8001848:	9300      	str	r3, [sp, #0]
 800184a:	2301      	movs	r3, #1
 800184c:	4835      	ldr	r0, [pc, #212]	; (8001924 <_Z9writeBitshhhhh+0x114>)
 800184e:	f004 f9bd 	bl	8005bcc <HAL_I2C_Mem_Read>
 8001852:	4603      	mov	r3, r0
 8001854:	2b00      	cmp	r3, #0
 8001856:	bf14      	ite	ne
 8001858:	2301      	movne	r3, #1
 800185a:	2300      	moveq	r3, #0
 800185c:	b2db      	uxtb	r3, r3
 800185e:	2b00      	cmp	r3, #0
 8001860:	d002      	beq.n	8001868 <_Z9writeBitshhhhh+0x58>
    MX_I2C1_Init();
 8001862:	f001 fba1 	bl	8002fa8 <MX_I2C1_Init>
  while(HAL_I2C_Mem_Read(&hi2c1,devAddr,regAddr,I2C_MEMADD_SIZE_8BIT,&buffer,1,I2CDLY) != HAL_OK){
 8001866:	e7e5      	b.n	8001834 <_Z9writeBitshhhhh+0x24>
  }
  uint8_t response = BCM2835_I2C_REASON_OK;
 8001868:	2301      	movs	r3, #1
 800186a:	73fb      	strb	r3, [r7, #15]
  if ( response == BCM2835_I2C_REASON_OK ) {
 800186c:	7bfb      	ldrb	r3, [r7, #15]
 800186e:	2b01      	cmp	r3, #1
 8001870:	d14c      	bne.n	800190c <_Z9writeBitshhhhh+0xfc>
    uint8_t b = buffer;
 8001872:	7b7b      	ldrb	r3, [r7, #13]
 8001874:	733b      	strb	r3, [r7, #12]
    uint8_t mask = ((1 << length) - 1) << (bitStart - length + 1);
 8001876:	793b      	ldrb	r3, [r7, #4]
 8001878:	2201      	movs	r2, #1
 800187a:	fa02 f303 	lsl.w	r3, r2, r3
 800187e:	1e5a      	subs	r2, r3, #1
 8001880:	7979      	ldrb	r1, [r7, #5]
 8001882:	793b      	ldrb	r3, [r7, #4]
 8001884:	1acb      	subs	r3, r1, r3
 8001886:	3301      	adds	r3, #1
 8001888:	fa02 f303 	lsl.w	r3, r2, r3
 800188c:	73bb      	strb	r3, [r7, #14]
    data <<= (bitStart - length + 1); // shift data into correct position
 800188e:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001892:	7979      	ldrb	r1, [r7, #5]
 8001894:	793b      	ldrb	r3, [r7, #4]
 8001896:	1acb      	subs	r3, r1, r3
 8001898:	3301      	adds	r3, #1
 800189a:	fa02 f303 	lsl.w	r3, r2, r3
 800189e:	f887 3020 	strb.w	r3, [r7, #32]
    data &= mask; // zero all non-important bits in data
 80018a2:	f897 2020 	ldrb.w	r2, [r7, #32]
 80018a6:	7bbb      	ldrb	r3, [r7, #14]
 80018a8:	4013      	ands	r3, r2
 80018aa:	f887 3020 	strb.w	r3, [r7, #32]
    b &= ~(mask); // zero all important bits in existing byte
 80018ae:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80018b2:	43db      	mvns	r3, r3
 80018b4:	b25a      	sxtb	r2, r3
 80018b6:	7b3b      	ldrb	r3, [r7, #12]
 80018b8:	b25b      	sxtb	r3, r3
 80018ba:	4013      	ands	r3, r2
 80018bc:	b25b      	sxtb	r3, r3
 80018be:	b2db      	uxtb	r3, r3
 80018c0:	733b      	strb	r3, [r7, #12]
    b |= data; // combine data with existing byte
 80018c2:	7b3a      	ldrb	r2, [r7, #12]
 80018c4:	f897 3020 	ldrb.w	r3, [r7, #32]
 80018c8:	4313      	orrs	r3, r2
 80018ca:	b2db      	uxtb	r3, r3
 80018cc:	733b      	strb	r3, [r7, #12]
    sendBuf[1] = b ;
 80018ce:	7b3a      	ldrb	r2, [r7, #12]
 80018d0:	4b13      	ldr	r3, [pc, #76]	; (8001920 <_Z9writeBitshhhhh+0x110>)
 80018d2:	705a      	strb	r2, [r3, #1]
    while(HAL_I2C_Mem_Write(&hi2c1,devAddr,regAddr, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&b, 1,I2CDLY) != HAL_OK){
 80018d4:	79fb      	ldrb	r3, [r7, #7]
 80018d6:	b299      	uxth	r1, r3
 80018d8:	79bb      	ldrb	r3, [r7, #6]
 80018da:	b29a      	uxth	r2, r3
 80018dc:	2301      	movs	r3, #1
 80018de:	9302      	str	r3, [sp, #8]
 80018e0:	2301      	movs	r3, #1
 80018e2:	9301      	str	r3, [sp, #4]
 80018e4:	f107 030c 	add.w	r3, r7, #12
 80018e8:	9300      	str	r3, [sp, #0]
 80018ea:	2301      	movs	r3, #1
 80018ec:	480d      	ldr	r0, [pc, #52]	; (8001924 <_Z9writeBitshhhhh+0x114>)
 80018ee:	f004 f873 	bl	80059d8 <HAL_I2C_Mem_Write>
 80018f2:	4603      	mov	r3, r0
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	bf14      	ite	ne
 80018f8:	2301      	movne	r3, #1
 80018fa:	2300      	moveq	r3, #0
 80018fc:	b2db      	uxtb	r3, r3
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d002      	beq.n	8001908 <_Z9writeBitshhhhh+0xf8>
       MX_I2C1_Init();
 8001902:	f001 fb51 	bl	8002fa8 <MX_I2C1_Init>
    while(HAL_I2C_Mem_Write(&hi2c1,devAddr,regAddr, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&b, 1,I2CDLY) != HAL_OK){
 8001906:	e7e5      	b.n	80018d4 <_Z9writeBitshhhhh+0xc4>
    }
    response = BCM2835_I2C_REASON_OK;
 8001908:	2301      	movs	r3, #1
 800190a:	73fb      	strb	r3, [r7, #15]
    }
  return response == BCM2835_I2C_REASON_OK;
 800190c:	7bfb      	ldrb	r3, [r7, #15]
 800190e:	2b01      	cmp	r3, #1
 8001910:	bf0c      	ite	eq
 8001912:	2301      	moveq	r3, #1
 8001914:	2300      	movne	r3, #0
 8001916:	b2db      	uxtb	r3, r3
}
 8001918:	4618      	mov	r0, r3
 800191a:	3714      	adds	r7, #20
 800191c:	46bd      	mov	sp, r7
 800191e:	bd90      	pop	{r4, r7, pc}
 8001920:	20000208 	.word	0x20000208
 8001924:	20000434 	.word	0x20000434

08001928 <_Z9writeBytehhh>:
 * @param devAddr I2C slave device address
 * @param regAddr Register address to write to
 * @param data New byte value to write
 * @return Status of operation (true = success)
 */
bool writeByte(uint8_t devAddr, uint8_t regAddr, uint8_t data) {
 8001928:	b580      	push	{r7, lr}
 800192a:	b088      	sub	sp, #32
 800192c:	af04      	add	r7, sp, #16
 800192e:	4603      	mov	r3, r0
 8001930:	71fb      	strb	r3, [r7, #7]
 8001932:	460b      	mov	r3, r1
 8001934:	71bb      	strb	r3, [r7, #6]
 8001936:	4613      	mov	r3, r2
 8001938:	717b      	strb	r3, [r7, #5]

  sendBuf[0] = regAddr;
 800193a:	4a15      	ldr	r2, [pc, #84]	; (8001990 <_Z9writeBytehhh+0x68>)
 800193c:	79bb      	ldrb	r3, [r7, #6]
 800193e:	7013      	strb	r3, [r2, #0]
  sendBuf[1] = data;
 8001940:	797a      	ldrb	r2, [r7, #5]
 8001942:	4b13      	ldr	r3, [pc, #76]	; (8001990 <_Z9writeBytehhh+0x68>)
 8001944:	705a      	strb	r2, [r3, #1]
  while(HAL_I2C_Mem_Write(&hi2c1,devAddr,regAddr, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&data, 1,I2CDLY) != HAL_OK){
 8001946:	79fb      	ldrb	r3, [r7, #7]
 8001948:	b299      	uxth	r1, r3
 800194a:	79bb      	ldrb	r3, [r7, #6]
 800194c:	b29a      	uxth	r2, r3
 800194e:	2301      	movs	r3, #1
 8001950:	9302      	str	r3, [sp, #8]
 8001952:	2301      	movs	r3, #1
 8001954:	9301      	str	r3, [sp, #4]
 8001956:	1d7b      	adds	r3, r7, #5
 8001958:	9300      	str	r3, [sp, #0]
 800195a:	2301      	movs	r3, #1
 800195c:	480d      	ldr	r0, [pc, #52]	; (8001994 <_Z9writeBytehhh+0x6c>)
 800195e:	f004 f83b 	bl	80059d8 <HAL_I2C_Mem_Write>
 8001962:	4603      	mov	r3, r0
 8001964:	2b00      	cmp	r3, #0
 8001966:	bf14      	ite	ne
 8001968:	2301      	movne	r3, #1
 800196a:	2300      	moveq	r3, #0
 800196c:	b2db      	uxtb	r3, r3
 800196e:	2b00      	cmp	r3, #0
 8001970:	d002      	beq.n	8001978 <_Z9writeBytehhh+0x50>
     MX_I2C1_Init();
 8001972:	f001 fb19 	bl	8002fa8 <MX_I2C1_Init>
  while(HAL_I2C_Mem_Write(&hi2c1,devAddr,regAddr, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&data, 1,I2CDLY) != HAL_OK){
 8001976:	e7e6      	b.n	8001946 <_Z9writeBytehhh+0x1e>
  }
  uint8_t response = BCM2835_I2C_REASON_OK;
 8001978:	2301      	movs	r3, #1
 800197a:	73fb      	strb	r3, [r7, #15]
  return response == BCM2835_I2C_REASON_OK ;
 800197c:	7bfb      	ldrb	r3, [r7, #15]
 800197e:	2b01      	cmp	r3, #1
 8001980:	bf0c      	ite	eq
 8001982:	2301      	moveq	r3, #1
 8001984:	2300      	movne	r3, #0
 8001986:	b2db      	uxtb	r3, r3
}
 8001988:	4618      	mov	r0, r3
 800198a:	3710      	adds	r7, #16
 800198c:	46bd      	mov	sp, r7
 800198e:	bd80      	pop	{r7, pc}
 8001990:	20000208 	.word	0x20000208
 8001994:	20000434 	.word	0x20000434

08001998 <_Z9writeWordhht>:
    data[i] = (buffer[i*2] << 8) | buffer[i*2+1] ;
  }
  return  response == BCM2835_I2C_REASON_OK ;
}

bool writeWord(uint8_t devAddr, uint8_t regAddr, uint16_t data){
 8001998:	b580      	push	{r7, lr}
 800199a:	b088      	sub	sp, #32
 800199c:	af04      	add	r7, sp, #16
 800199e:	4603      	mov	r3, r0
 80019a0:	71fb      	strb	r3, [r7, #7]
 80019a2:	460b      	mov	r3, r1
 80019a4:	71bb      	strb	r3, [r7, #6]
 80019a6:	4613      	mov	r3, r2
 80019a8:	80bb      	strh	r3, [r7, #4]

  sendBuf[0] = (uint8_t) (data >> 8); //MSByte
 80019aa:	88bb      	ldrh	r3, [r7, #4]
 80019ac:	121b      	asrs	r3, r3, #8
 80019ae:	b2da      	uxtb	r2, r3
 80019b0:	4b15      	ldr	r3, [pc, #84]	; (8001a08 <_Z9writeWordhht+0x70>)
 80019b2:	701a      	strb	r2, [r3, #0]
  sendBuf[1] = (uint8_t) (data >> 0); //LSByte
 80019b4:	88bb      	ldrh	r3, [r7, #4]
 80019b6:	b2da      	uxtb	r2, r3
 80019b8:	4b13      	ldr	r3, [pc, #76]	; (8001a08 <_Z9writeWordhht+0x70>)
 80019ba:	705a      	strb	r2, [r3, #1]
  while(HAL_I2C_Mem_Write(&hi2c1,devAddr,regAddr, I2C_MEMADD_SIZE_8BIT, (uint8_t*)sendBuf, 2,I2CDLY) != HAL_OK){
 80019bc:	79fb      	ldrb	r3, [r7, #7]
 80019be:	b299      	uxth	r1, r3
 80019c0:	79bb      	ldrb	r3, [r7, #6]
 80019c2:	b29a      	uxth	r2, r3
 80019c4:	2301      	movs	r3, #1
 80019c6:	9302      	str	r3, [sp, #8]
 80019c8:	2302      	movs	r3, #2
 80019ca:	9301      	str	r3, [sp, #4]
 80019cc:	4b0e      	ldr	r3, [pc, #56]	; (8001a08 <_Z9writeWordhht+0x70>)
 80019ce:	9300      	str	r3, [sp, #0]
 80019d0:	2301      	movs	r3, #1
 80019d2:	480e      	ldr	r0, [pc, #56]	; (8001a0c <_Z9writeWordhht+0x74>)
 80019d4:	f004 f800 	bl	80059d8 <HAL_I2C_Mem_Write>
 80019d8:	4603      	mov	r3, r0
 80019da:	2b00      	cmp	r3, #0
 80019dc:	bf14      	ite	ne
 80019de:	2301      	movne	r3, #1
 80019e0:	2300      	moveq	r3, #0
 80019e2:	b2db      	uxtb	r3, r3
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d002      	beq.n	80019ee <_Z9writeWordhht+0x56>
     MX_I2C1_Init();
 80019e8:	f001 fade 	bl	8002fa8 <MX_I2C1_Init>
  while(HAL_I2C_Mem_Write(&hi2c1,devAddr,regAddr, I2C_MEMADD_SIZE_8BIT, (uint8_t*)sendBuf, 2,I2CDLY) != HAL_OK){
 80019ec:	e7e6      	b.n	80019bc <_Z9writeWordhht+0x24>
  }
  uint8_t response = BCM2835_I2C_REASON_OK;
 80019ee:	2301      	movs	r3, #1
 80019f0:	73fb      	strb	r3, [r7, #15]
  return response == BCM2835_I2C_REASON_OK ;
 80019f2:	7bfb      	ldrb	r3, [r7, #15]
 80019f4:	2b01      	cmp	r3, #1
 80019f6:	bf0c      	ite	eq
 80019f8:	2301      	moveq	r3, #1
 80019fa:	2300      	movne	r3, #0
 80019fc:	b2db      	uxtb	r3, r3
}
 80019fe:	4618      	mov	r0, r3
 8001a00:	3710      	adds	r7, #16
 8001a02:	46bd      	mov	sp, r7
 8001a04:	bd80      	pop	{r7, pc}
 8001a06:	bf00      	nop
 8001a08:	20000208 	.word	0x20000208
 8001a0c:	20000434 	.word	0x20000434

08001a10 <_Z10writeByteshhhPh>:

bool writeBytes(uint8_t devAddr, uint8_t regAddr, uint8_t length, uint8_t *data){
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b088      	sub	sp, #32
 8001a14:	af04      	add	r7, sp, #16
 8001a16:	603b      	str	r3, [r7, #0]
 8001a18:	4603      	mov	r3, r0
 8001a1a:	71fb      	strb	r3, [r7, #7]
 8001a1c:	460b      	mov	r3, r1
 8001a1e:	71bb      	strb	r3, [r7, #6]
 8001a20:	4613      	mov	r3, r2
 8001a22:	717b      	strb	r3, [r7, #5]
  uint8_t i;
  for (i = 0; i < length; i++) {
 8001a24:	2300      	movs	r3, #0
 8001a26:	73fb      	strb	r3, [r7, #15]
 8001a28:	7bfa      	ldrb	r2, [r7, #15]
 8001a2a:	797b      	ldrb	r3, [r7, #5]
 8001a2c:	429a      	cmp	r2, r3
 8001a2e:	d20a      	bcs.n	8001a46 <_Z10writeByteshhhPh+0x36>
    sendBuf[i] = data[i] ;
 8001a30:	7bfb      	ldrb	r3, [r7, #15]
 8001a32:	683a      	ldr	r2, [r7, #0]
 8001a34:	441a      	add	r2, r3
 8001a36:	7bfb      	ldrb	r3, [r7, #15]
 8001a38:	7811      	ldrb	r1, [r2, #0]
 8001a3a:	4a16      	ldr	r2, [pc, #88]	; (8001a94 <_Z10writeByteshhhPh+0x84>)
 8001a3c:	54d1      	strb	r1, [r2, r3]
  for (i = 0; i < length; i++) {
 8001a3e:	7bfb      	ldrb	r3, [r7, #15]
 8001a40:	3301      	adds	r3, #1
 8001a42:	73fb      	strb	r3, [r7, #15]
 8001a44:	e7f0      	b.n	8001a28 <_Z10writeByteshhhPh+0x18>
  }
  while(HAL_I2C_Mem_Write(&hi2c1,devAddr,regAddr, I2C_MEMADD_SIZE_8BIT, (uint8_t*)sendBuf, length,I2CDLY) != HAL_OK){
 8001a46:	79fb      	ldrb	r3, [r7, #7]
 8001a48:	b299      	uxth	r1, r3
 8001a4a:	79bb      	ldrb	r3, [r7, #6]
 8001a4c:	b29a      	uxth	r2, r3
 8001a4e:	797b      	ldrb	r3, [r7, #5]
 8001a50:	b29b      	uxth	r3, r3
 8001a52:	2001      	movs	r0, #1
 8001a54:	9002      	str	r0, [sp, #8]
 8001a56:	9301      	str	r3, [sp, #4]
 8001a58:	4b0e      	ldr	r3, [pc, #56]	; (8001a94 <_Z10writeByteshhhPh+0x84>)
 8001a5a:	9300      	str	r3, [sp, #0]
 8001a5c:	2301      	movs	r3, #1
 8001a5e:	480e      	ldr	r0, [pc, #56]	; (8001a98 <_Z10writeByteshhhPh+0x88>)
 8001a60:	f003 ffba 	bl	80059d8 <HAL_I2C_Mem_Write>
 8001a64:	4603      	mov	r3, r0
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	bf14      	ite	ne
 8001a6a:	2301      	movne	r3, #1
 8001a6c:	2300      	moveq	r3, #0
 8001a6e:	b2db      	uxtb	r3, r3
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d002      	beq.n	8001a7a <_Z10writeByteshhhPh+0x6a>
     MX_I2C1_Init();
 8001a74:	f001 fa98 	bl	8002fa8 <MX_I2C1_Init>
  while(HAL_I2C_Mem_Write(&hi2c1,devAddr,regAddr, I2C_MEMADD_SIZE_8BIT, (uint8_t*)sendBuf, length,I2CDLY) != HAL_OK){
 8001a78:	e7e5      	b.n	8001a46 <_Z10writeByteshhhPh+0x36>
  }
  uint8_t response = BCM2835_I2C_REASON_OK;
 8001a7a:	2301      	movs	r3, #1
 8001a7c:	73bb      	strb	r3, [r7, #14]
  return response == BCM2835_I2C_REASON_OK ;
 8001a7e:	7bbb      	ldrb	r3, [r7, #14]
 8001a80:	2b01      	cmp	r3, #1
 8001a82:	bf0c      	ite	eq
 8001a84:	2301      	moveq	r3, #1
 8001a86:	2300      	movne	r3, #0
 8001a88:	b2db      	uxtb	r3, r3
}
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	3710      	adds	r7, #16
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	bd80      	pop	{r7, pc}
 8001a92:	bf00      	nop
 8001a94:	20000208 	.word	0x20000208
 8001a98:	20000434 	.word	0x20000434

08001a9c <_ZN7MPU6050C1Ev>:


/** Default constructor, uses default I2C address.
 * @see MPU6050_DEFAULT_ADDRESS
 */
MPU6050::MPU6050() {
 8001a9c:	b480      	push	{r7}
 8001a9e:	b083      	sub	sp, #12
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
    devAddr = MPU6050_DEFAULT_ADDRESS;
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	22d0      	movs	r2, #208	; 0xd0
 8001aa8:	719a      	strb	r2, [r3, #6]
}
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	4618      	mov	r0, r3
 8001aae:	370c      	adds	r7, #12
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	bc80      	pop	{r7}
 8001ab4:	4770      	bx	lr

08001ab6 <_ZN7MPU605010initializeEv>:
 * after start-up). This function also sets both the accelerometer and the gyroscope
 * to their most sensitive settings, namely +/- 2g and +/- 250 degrees/sec, and sets
 * the clock source to use the X Gyro for reference, which is slightly better than
 * the default internal clock source.
 */
void MPU6050::initialize() {
 8001ab6:	b580      	push	{r7, lr}
 8001ab8:	b082      	sub	sp, #8
 8001aba:	af00      	add	r7, sp, #0
 8001abc:	6078      	str	r0, [r7, #4]
    setClockSource(MPU6050_CLOCK_PLL_XGYRO);
 8001abe:	2101      	movs	r1, #1
 8001ac0:	6878      	ldr	r0, [r7, #4]
 8001ac2:	f000 f951 	bl	8001d68 <_ZN7MPU605014setClockSourceEh>
    setFullScaleGyroRange(MPU6050_GYRO_FS_250);
 8001ac6:	2100      	movs	r1, #0
 8001ac8:	6878      	ldr	r0, [r7, #4]
 8001aca:	f000 f843 	bl	8001b54 <_ZN7MPU605021setFullScaleGyroRangeEh>
    setFullScaleAccelRange(MPU6050_ACCEL_FS_2);
 8001ace:	2100      	movs	r1, #0
 8001ad0:	6878      	ldr	r0, [r7, #4]
 8001ad2:	f000 f852 	bl	8001b7a <_ZN7MPU605022setFullScaleAccelRangeEh>
    setSleepEnabled(false); // thanks to Jack Elston for pointing this one out!
 8001ad6:	2100      	movs	r1, #0
 8001ad8:	6878      	ldr	r0, [r7, #4]
 8001ada:	f000 f934 	bl	8001d46 <_ZN7MPU605015setSleepEnabledEb>
}
 8001ade:	bf00      	nop
 8001ae0:	3708      	adds	r7, #8
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	bd80      	pop	{r7, pc}

08001ae6 <_ZN7MPU60507setRateEh>:
/** Set gyroscope sample rate divider.
 * @param rate New sample rate divider
 * @see getRate()
 * @see MPU6050_RA_SMPLRT_DIV
 */
void MPU6050::setRate(uint8_t rate) {
 8001ae6:	b580      	push	{r7, lr}
 8001ae8:	b082      	sub	sp, #8
 8001aea:	af00      	add	r7, sp, #0
 8001aec:	6078      	str	r0, [r7, #4]
 8001aee:	460b      	mov	r3, r1
 8001af0:	70fb      	strb	r3, [r7, #3]
    writeByte(devAddr, MPU6050_RA_SMPLRT_DIV, rate);
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	799b      	ldrb	r3, [r3, #6]
 8001af6:	78fa      	ldrb	r2, [r7, #3]
 8001af8:	2119      	movs	r1, #25
 8001afa:	4618      	mov	r0, r3
 8001afc:	f7ff ff14 	bl	8001928 <_Z9writeBytehhh>
}
 8001b00:	bf00      	nop
 8001b02:	3708      	adds	r7, #8
 8001b04:	46bd      	mov	sp, r7
 8001b06:	bd80      	pop	{r7, pc}

08001b08 <_ZN7MPU605020setExternalFrameSyncEh>:
/** Set external FSYNC configuration.
 * @see getExternalFrameSync()
 * @see MPU6050_RA_CONFIG
 * @param sync New FSYNC configuration value
 */
void MPU6050::setExternalFrameSync(uint8_t sync) {
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b084      	sub	sp, #16
 8001b0c:	af02      	add	r7, sp, #8
 8001b0e:	6078      	str	r0, [r7, #4]
 8001b10:	460b      	mov	r3, r1
 8001b12:	70fb      	strb	r3, [r7, #3]
    writeBits(devAddr, MPU6050_RA_CONFIG, MPU6050_CFG_EXT_SYNC_SET_BIT, MPU6050_CFG_EXT_SYNC_SET_LENGTH, sync);
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	7998      	ldrb	r0, [r3, #6]
 8001b18:	78fb      	ldrb	r3, [r7, #3]
 8001b1a:	9300      	str	r3, [sp, #0]
 8001b1c:	2303      	movs	r3, #3
 8001b1e:	2205      	movs	r2, #5
 8001b20:	211a      	movs	r1, #26
 8001b22:	f7ff fe75 	bl	8001810 <_Z9writeBitshhhhh>
}
 8001b26:	bf00      	nop
 8001b28:	3708      	adds	r7, #8
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	bd80      	pop	{r7, pc}

08001b2e <_ZN7MPU605011setDLPFModeEh>:
 * @see MPU6050_DLPF_BW_256
 * @see MPU6050_RA_CONFIG
 * @see MPU6050_CFG_DLPF_CFG_BIT
 * @see MPU6050_CFG_DLPF_CFG_LENGTH
 */
void MPU6050::setDLPFMode(uint8_t mode) {
 8001b2e:	b580      	push	{r7, lr}
 8001b30:	b084      	sub	sp, #16
 8001b32:	af02      	add	r7, sp, #8
 8001b34:	6078      	str	r0, [r7, #4]
 8001b36:	460b      	mov	r3, r1
 8001b38:	70fb      	strb	r3, [r7, #3]
    writeBits(devAddr, MPU6050_RA_CONFIG, MPU6050_CFG_DLPF_CFG_BIT, MPU6050_CFG_DLPF_CFG_LENGTH, mode);
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	7998      	ldrb	r0, [r3, #6]
 8001b3e:	78fb      	ldrb	r3, [r7, #3]
 8001b40:	9300      	str	r3, [sp, #0]
 8001b42:	2303      	movs	r3, #3
 8001b44:	2202      	movs	r2, #2
 8001b46:	211a      	movs	r1, #26
 8001b48:	f7ff fe62 	bl	8001810 <_Z9writeBitshhhhh>
}
 8001b4c:	bf00      	nop
 8001b4e:	3708      	adds	r7, #8
 8001b50:	46bd      	mov	sp, r7
 8001b52:	bd80      	pop	{r7, pc}

08001b54 <_ZN7MPU605021setFullScaleGyroRangeEh>:
 * @see MPU6050_GYRO_FS_250
 * @see MPU6050_RA_GYRO_CONFIG
 * @see MPU6050_GCONFIG_FS_SEL_BIT
 * @see MPU6050_GCONFIG_FS_SEL_LENGTH
 */
void MPU6050::setFullScaleGyroRange(uint8_t range) {
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b084      	sub	sp, #16
 8001b58:	af02      	add	r7, sp, #8
 8001b5a:	6078      	str	r0, [r7, #4]
 8001b5c:	460b      	mov	r3, r1
 8001b5e:	70fb      	strb	r3, [r7, #3]
    writeBits(devAddr, MPU6050_RA_GYRO_CONFIG, MPU6050_GCONFIG_FS_SEL_BIT, MPU6050_GCONFIG_FS_SEL_LENGTH, range);
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	7998      	ldrb	r0, [r3, #6]
 8001b64:	78fb      	ldrb	r3, [r7, #3]
 8001b66:	9300      	str	r3, [sp, #0]
 8001b68:	2302      	movs	r3, #2
 8001b6a:	2204      	movs	r2, #4
 8001b6c:	211b      	movs	r1, #27
 8001b6e:	f7ff fe4f 	bl	8001810 <_Z9writeBitshhhhh>
}
 8001b72:	bf00      	nop
 8001b74:	3708      	adds	r7, #8
 8001b76:	46bd      	mov	sp, r7
 8001b78:	bd80      	pop	{r7, pc}

08001b7a <_ZN7MPU605022setFullScaleAccelRangeEh>:
}
/** Set full-scale accelerometer range.
 * @param range New full-scale accelerometer range setting
 * @see getFullScaleAccelRange()
 */
void MPU6050::setFullScaleAccelRange(uint8_t range) {
 8001b7a:	b580      	push	{r7, lr}
 8001b7c:	b084      	sub	sp, #16
 8001b7e:	af02      	add	r7, sp, #8
 8001b80:	6078      	str	r0, [r7, #4]
 8001b82:	460b      	mov	r3, r1
 8001b84:	70fb      	strb	r3, [r7, #3]
    writeBits(devAddr, MPU6050_RA_ACCEL_CONFIG, MPU6050_ACONFIG_AFS_SEL_BIT, MPU6050_ACONFIG_AFS_SEL_LENGTH, range);
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	7998      	ldrb	r0, [r3, #6]
 8001b8a:	78fb      	ldrb	r3, [r7, #3]
 8001b8c:	9300      	str	r3, [sp, #0]
 8001b8e:	2302      	movs	r3, #2
 8001b90:	2204      	movs	r2, #4
 8001b92:	211c      	movs	r1, #28
 8001b94:	f7ff fe3c 	bl	8001810 <_Z9writeBitshhhhh>
}
 8001b98:	bf00      	nop
 8001b9a:	3708      	adds	r7, #8
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	bd80      	pop	{r7, pc}

08001ba0 <_ZN7MPU605027setMotionDetectionThresholdEh>:
/** Set motion detection event acceleration threshold.
 * @param threshold New motion detection acceleration threshold value (LSB = 2mg)
 * @see getMotionDetectionThreshold()
 * @see MPU6050_RA_MOT_THR
 */
void MPU6050::setMotionDetectionThreshold(uint8_t threshold) {
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b082      	sub	sp, #8
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
 8001ba8:	460b      	mov	r3, r1
 8001baa:	70fb      	strb	r3, [r7, #3]
    writeByte(devAddr, MPU6050_RA_MOT_THR, threshold);
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	799b      	ldrb	r3, [r3, #6]
 8001bb0:	78fa      	ldrb	r2, [r7, #3]
 8001bb2:	211f      	movs	r1, #31
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	f7ff feb7 	bl	8001928 <_Z9writeBytehhh>
}
 8001bba:	bf00      	nop
 8001bbc:	3708      	adds	r7, #8
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	bd80      	pop	{r7, pc}

08001bc2 <_ZN7MPU605026setMotionDetectionDurationEh>:
/** Set motion detection event duration threshold.
 * @param duration New motion detection duration threshold value (LSB = 1ms)
 * @see getMotionDetectionDuration()
 * @see MPU6050_RA_MOT_DUR
 */
void MPU6050::setMotionDetectionDuration(uint8_t duration) {
 8001bc2:	b580      	push	{r7, lr}
 8001bc4:	b082      	sub	sp, #8
 8001bc6:	af00      	add	r7, sp, #0
 8001bc8:	6078      	str	r0, [r7, #4]
 8001bca:	460b      	mov	r3, r1
 8001bcc:	70fb      	strb	r3, [r7, #3]
    writeByte(devAddr, MPU6050_RA_MOT_DUR, duration);
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	799b      	ldrb	r3, [r3, #6]
 8001bd2:	78fa      	ldrb	r2, [r7, #3]
 8001bd4:	2120      	movs	r1, #32
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	f7ff fea6 	bl	8001928 <_Z9writeBytehhh>
}
 8001bdc:	bf00      	nop
 8001bde:	3708      	adds	r7, #8
 8001be0:	46bd      	mov	sp, r7
 8001be2:	bd80      	pop	{r7, pc}

08001be4 <_ZN7MPU605031setZeroMotionDetectionThresholdEh>:
/** Set zero motion detection event acceleration threshold.
 * @param threshold New zero motion detection acceleration threshold value (LSB = 2mg)
 * @see getZeroMotionDetectionThreshold()
 * @see MPU6050_RA_ZRMOT_THR
 */
void MPU6050::setZeroMotionDetectionThreshold(uint8_t threshold) {
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b082      	sub	sp, #8
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
 8001bec:	460b      	mov	r3, r1
 8001bee:	70fb      	strb	r3, [r7, #3]
    writeByte(devAddr, MPU6050_RA_ZRMOT_THR, threshold);
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	799b      	ldrb	r3, [r3, #6]
 8001bf4:	78fa      	ldrb	r2, [r7, #3]
 8001bf6:	2121      	movs	r1, #33	; 0x21
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	f7ff fe95 	bl	8001928 <_Z9writeBytehhh>
}
 8001bfe:	bf00      	nop
 8001c00:	3708      	adds	r7, #8
 8001c02:	46bd      	mov	sp, r7
 8001c04:	bd80      	pop	{r7, pc}

08001c06 <_ZN7MPU605030setZeroMotionDetectionDurationEh>:
/** Set zero motion detection event duration threshold.
 * @param duration New zero motion detection duration threshold value (LSB = 1ms)
 * @see getZeroMotionDetectionDuration()
 * @see MPU6050_RA_ZRMOT_DUR
 */
void MPU6050::setZeroMotionDetectionDuration(uint8_t duration) {
 8001c06:	b580      	push	{r7, lr}
 8001c08:	b082      	sub	sp, #8
 8001c0a:	af00      	add	r7, sp, #0
 8001c0c:	6078      	str	r0, [r7, #4]
 8001c0e:	460b      	mov	r3, r1
 8001c10:	70fb      	strb	r3, [r7, #3]
    writeByte(devAddr, MPU6050_RA_ZRMOT_DUR, duration);
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	799b      	ldrb	r3, [r3, #6]
 8001c16:	78fa      	ldrb	r2, [r7, #3]
 8001c18:	2122      	movs	r1, #34	; 0x22
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	f7ff fe84 	bl	8001928 <_Z9writeBytehhh>
}
 8001c20:	bf00      	nop
 8001c22:	3708      	adds	r7, #8
 8001c24:	46bd      	mov	sp, r7
 8001c26:	bd80      	pop	{r7, pc}

08001c28 <_ZN7MPU605015setSlaveAddressEhh>:
 * @param num Slave number (0-3)
 * @param address New address for specified slave
 * @see getSlaveAddress()
 * @see MPU6050_RA_I2C_SLV0_ADDR
 */
void MPU6050::setSlaveAddress(uint8_t num, uint8_t address) {
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b082      	sub	sp, #8
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
 8001c30:	460b      	mov	r3, r1
 8001c32:	70fb      	strb	r3, [r7, #3]
 8001c34:	4613      	mov	r3, r2
 8001c36:	70bb      	strb	r3, [r7, #2]
    if (num > 3) return;
 8001c38:	78fb      	ldrb	r3, [r7, #3]
 8001c3a:	2b03      	cmp	r3, #3
 8001c3c:	d80d      	bhi.n	8001c5a <_ZN7MPU605015setSlaveAddressEhh+0x32>
    writeByte(devAddr, MPU6050_RA_I2C_SLV0_ADDR + num*3, address);
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	7998      	ldrb	r0, [r3, #6]
 8001c42:	78fb      	ldrb	r3, [r7, #3]
 8001c44:	461a      	mov	r2, r3
 8001c46:	0052      	lsls	r2, r2, #1
 8001c48:	4413      	add	r3, r2
 8001c4a:	b2db      	uxtb	r3, r3
 8001c4c:	3325      	adds	r3, #37	; 0x25
 8001c4e:	b2db      	uxtb	r3, r3
 8001c50:	78ba      	ldrb	r2, [r7, #2]
 8001c52:	4619      	mov	r1, r3
 8001c54:	f7ff fe68 	bl	8001928 <_Z9writeBytehhh>
 8001c58:	e000      	b.n	8001c5c <_ZN7MPU605015setSlaveAddressEhh+0x34>
    if (num > 3) return;
 8001c5a:	bf00      	nop
}
 8001c5c:	3708      	adds	r7, #8
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	bd80      	pop	{r7, pc}

08001c62 <_ZN7MPU605013setIntEnabledEh>:
 * @param enabled New interrupt enabled status
 * @see getIntFreefallEnabled()
 * @see MPU6050_RA_INT_ENABLE
 * @see MPU6050_INTERRUPT_FF_BIT
 **/
void MPU6050::setIntEnabled(uint8_t enabled) {
 8001c62:	b580      	push	{r7, lr}
 8001c64:	b082      	sub	sp, #8
 8001c66:	af00      	add	r7, sp, #0
 8001c68:	6078      	str	r0, [r7, #4]
 8001c6a:	460b      	mov	r3, r1
 8001c6c:	70fb      	strb	r3, [r7, #3]
    writeByte(devAddr, MPU6050_RA_INT_ENABLE, enabled);
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	799b      	ldrb	r3, [r3, #6]
 8001c72:	78fa      	ldrb	r2, [r7, #3]
 8001c74:	2138      	movs	r1, #56	; 0x38
 8001c76:	4618      	mov	r0, r3
 8001c78:	f7ff fe56 	bl	8001928 <_Z9writeBytehhh>
}
 8001c7c:	bf00      	nop
 8001c7e:	3708      	adds	r7, #8
 8001c80:	46bd      	mov	sp, r7
 8001c82:	bd80      	pop	{r7, pc}

08001c84 <_ZN7MPU605012getIntStatusEv>:
 * for getting multiple INT statuses, since each single bit read clears
 * all of them because it has to read the whole byte.
 * @return Current interrupt status
 * @see MPU6050_RA_INT_STATUS
 */
uint8_t MPU6050::getIntStatus() {
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b082      	sub	sp, #8
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
    readByte(devAddr, MPU6050_RA_INT_STATUS, buffer);
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	7998      	ldrb	r0, [r3, #6]
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	3307      	adds	r3, #7
 8001c94:	461a      	mov	r2, r3
 8001c96:	213a      	movs	r1, #58	; 0x3a
 8001c98:	f7ff fc8e 	bl	80015b8 <_Z8readBytehhPh>
    return buffer[0];
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	79db      	ldrb	r3, [r3, #7]
}
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	3708      	adds	r7, #8
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	bd80      	pop	{r7, pc}

08001ca8 <_ZN7MPU605014setFIFOEnabledEb>:
 * @param enabled New FIFO enabled status
 * @see getFIFOEnabled()
 * @see MPU6050_RA_USER_CTRL
 * @see MPU6050_USERCTRL_FIFO_EN_BIT
 */
void MPU6050::setFIFOEnabled(bool enabled) {
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b082      	sub	sp, #8
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
 8001cb0:	460b      	mov	r3, r1
 8001cb2:	70fb      	strb	r3, [r7, #3]
    writeBit(devAddr, MPU6050_RA_USER_CTRL, MPU6050_USERCTRL_FIFO_EN_BIT, enabled);
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	7998      	ldrb	r0, [r3, #6]
 8001cb8:	78fb      	ldrb	r3, [r7, #3]
 8001cba:	2206      	movs	r2, #6
 8001cbc:	216a      	movs	r1, #106	; 0x6a
 8001cbe:	f7ff fd2b 	bl	8001718 <_Z8writeBithhhh>
}
 8001cc2:	bf00      	nop
 8001cc4:	3708      	adds	r7, #8
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	bd80      	pop	{r7, pc}

08001cca <_ZN7MPU605023setI2CMasterModeEnabledEb>:
 * @param enabled New I2C Master Mode enabled status
 * @see getI2CMasterModeEnabled()
 * @see MPU6050_RA_USER_CTRL
 * @see MPU6050_USERCTRL_I2C_MST_EN_BIT
 */
void MPU6050::setI2CMasterModeEnabled(bool enabled) {
 8001cca:	b580      	push	{r7, lr}
 8001ccc:	b082      	sub	sp, #8
 8001cce:	af00      	add	r7, sp, #0
 8001cd0:	6078      	str	r0, [r7, #4]
 8001cd2:	460b      	mov	r3, r1
 8001cd4:	70fb      	strb	r3, [r7, #3]
    writeBit(devAddr, MPU6050_RA_USER_CTRL, MPU6050_USERCTRL_I2C_MST_EN_BIT, enabled);
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	7998      	ldrb	r0, [r3, #6]
 8001cda:	78fb      	ldrb	r3, [r7, #3]
 8001cdc:	2205      	movs	r2, #5
 8001cde:	216a      	movs	r1, #106	; 0x6a
 8001ce0:	f7ff fd1a 	bl	8001718 <_Z8writeBithhhh>
}
 8001ce4:	bf00      	nop
 8001ce6:	3708      	adds	r7, #8
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	bd80      	pop	{r7, pc}

08001cec <_ZN7MPU60509resetFIFOEv>:
 * This bit resets the FIFO buffer when set to 1 while FIFO_EN equals 0. This
 * bit automatically clears to 0 after the reset has been triggered.
 * @see MPU6050_RA_USER_CTRL
 * @see MPU6050_USERCTRL_FIFO_RESET_BIT
 */
void MPU6050::resetFIFO() {
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b082      	sub	sp, #8
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
    writeBit(devAddr, MPU6050_RA_USER_CTRL, MPU6050_USERCTRL_FIFO_RESET_BIT, true);
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	7998      	ldrb	r0, [r3, #6]
 8001cf8:	2301      	movs	r3, #1
 8001cfa:	2202      	movs	r2, #2
 8001cfc:	216a      	movs	r1, #106	; 0x6a
 8001cfe:	f7ff fd0b 	bl	8001718 <_Z8writeBithhhh>
}
 8001d02:	bf00      	nop
 8001d04:	3708      	adds	r7, #8
 8001d06:	46bd      	mov	sp, r7
 8001d08:	bd80      	pop	{r7, pc}

08001d0a <_ZN7MPU605014resetI2CMasterEv>:
 * This bit resets the I2C Master when set to 1 while I2C_MST_EN equals 0.
 * This bit automatically clears to 0 after the reset has been triggered.
 * @see MPU6050_RA_USER_CTRL
 * @see MPU6050_USERCTRL_I2C_MST_RESET_BIT
 */
void MPU6050::resetI2CMaster() {
 8001d0a:	b580      	push	{r7, lr}
 8001d0c:	b082      	sub	sp, #8
 8001d0e:	af00      	add	r7, sp, #0
 8001d10:	6078      	str	r0, [r7, #4]
    writeBit(devAddr, MPU6050_RA_USER_CTRL, MPU6050_USERCTRL_I2C_MST_RESET_BIT, true);
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	7998      	ldrb	r0, [r3, #6]
 8001d16:	2301      	movs	r3, #1
 8001d18:	2201      	movs	r2, #1
 8001d1a:	216a      	movs	r1, #106	; 0x6a
 8001d1c:	f7ff fcfc 	bl	8001718 <_Z8writeBithhhh>
}
 8001d20:	bf00      	nop
 8001d22:	3708      	adds	r7, #8
 8001d24:	46bd      	mov	sp, r7
 8001d26:	bd80      	pop	{r7, pc}

08001d28 <_ZN7MPU60505resetEv>:
/** Trigger a full device reset.
 * A small delay of ~50ms may be desirable after triggering a reset.
 * @see MPU6050_RA_PWR_MGMT_1
 * @see MPU6050_PWR1_DEVICE_RESET_BIT
 */
void MPU6050::reset() {
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b082      	sub	sp, #8
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
    writeBit(devAddr, MPU6050_RA_PWR_MGMT_1, MPU6050_PWR1_DEVICE_RESET_BIT, true);
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	7998      	ldrb	r0, [r3, #6]
 8001d34:	2301      	movs	r3, #1
 8001d36:	2207      	movs	r2, #7
 8001d38:	216b      	movs	r1, #107	; 0x6b
 8001d3a:	f7ff fced 	bl	8001718 <_Z8writeBithhhh>
}
 8001d3e:	bf00      	nop
 8001d40:	3708      	adds	r7, #8
 8001d42:	46bd      	mov	sp, r7
 8001d44:	bd80      	pop	{r7, pc}

08001d46 <_ZN7MPU605015setSleepEnabledEb>:
 * @param enabled New sleep mode enabled status
 * @see getSleepEnabled()
 * @see MPU6050_RA_PWR_MGMT_1
 * @see MPU6050_PWR1_SLEEP_BIT
 */
void MPU6050::setSleepEnabled(bool enabled) {
 8001d46:	b580      	push	{r7, lr}
 8001d48:	b082      	sub	sp, #8
 8001d4a:	af00      	add	r7, sp, #0
 8001d4c:	6078      	str	r0, [r7, #4]
 8001d4e:	460b      	mov	r3, r1
 8001d50:	70fb      	strb	r3, [r7, #3]
    writeBit(devAddr, MPU6050_RA_PWR_MGMT_1, MPU6050_PWR1_SLEEP_BIT, enabled);
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	7998      	ldrb	r0, [r3, #6]
 8001d56:	78fb      	ldrb	r3, [r7, #3]
 8001d58:	2206      	movs	r2, #6
 8001d5a:	216b      	movs	r1, #107	; 0x6b
 8001d5c:	f7ff fcdc 	bl	8001718 <_Z8writeBithhhh>
}
 8001d60:	bf00      	nop
 8001d62:	3708      	adds	r7, #8
 8001d64:	46bd      	mov	sp, r7
 8001d66:	bd80      	pop	{r7, pc}

08001d68 <_ZN7MPU605014setClockSourceEh>:
 * @see getClockSource()
 * @see MPU6050_RA_PWR_MGMT_1
 * @see MPU6050_PWR1_CLKSEL_BIT
 * @see MPU6050_PWR1_CLKSEL_LENGTH
 */
void MPU6050::setClockSource(uint8_t source) {
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b084      	sub	sp, #16
 8001d6c:	af02      	add	r7, sp, #8
 8001d6e:	6078      	str	r0, [r7, #4]
 8001d70:	460b      	mov	r3, r1
 8001d72:	70fb      	strb	r3, [r7, #3]
    writeBits(devAddr, MPU6050_RA_PWR_MGMT_1, MPU6050_PWR1_CLKSEL_BIT, MPU6050_PWR1_CLKSEL_LENGTH, source);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	7998      	ldrb	r0, [r3, #6]
 8001d78:	78fb      	ldrb	r3, [r7, #3]
 8001d7a:	9300      	str	r3, [sp, #0]
 8001d7c:	2303      	movs	r3, #3
 8001d7e:	2202      	movs	r2, #2
 8001d80:	216b      	movs	r1, #107	; 0x6b
 8001d82:	f7ff fd45 	bl	8001810 <_Z9writeBitshhhhh>
}
 8001d86:	bf00      	nop
 8001d88:	3708      	adds	r7, #8
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	bd80      	pop	{r7, pc}

08001d8e <_ZN7MPU605012getFIFOCountEv>:
 * number is in turn the number of bytes that can be read from the FIFO buffer
 * and it is directly proportional to the number of samples available given the
 * set of sensor data bound to be stored in the FIFO (register 35 and 36).
 * @return Current FIFO buffer size
 */
uint16_t MPU6050::getFIFOCount() {
 8001d8e:	b580      	push	{r7, lr}
 8001d90:	b082      	sub	sp, #8
 8001d92:	af00      	add	r7, sp, #0
 8001d94:	6078      	str	r0, [r7, #4]
    readBytes(devAddr, MPU6050_RA_FIFO_COUNTH, 2, buffer);
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	7998      	ldrb	r0, [r3, #6]
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	3307      	adds	r3, #7
 8001d9e:	2202      	movs	r2, #2
 8001da0:	2172      	movs	r1, #114	; 0x72
 8001da2:	f7ff fc43 	bl	800162c <_Z9readByteshhhPh>
    return (((uint16_t)buffer[0]) << 8) | buffer[1];
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	79db      	ldrb	r3, [r3, #7]
 8001daa:	021b      	lsls	r3, r3, #8
 8001dac:	b21a      	sxth	r2, r3
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	7a1b      	ldrb	r3, [r3, #8]
 8001db2:	b21b      	sxth	r3, r3
 8001db4:	4313      	orrs	r3, r2
 8001db6:	b21b      	sxth	r3, r3
 8001db8:	b29b      	uxth	r3, r3
}
 8001dba:	4618      	mov	r0, r3
 8001dbc:	3708      	adds	r7, #8
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	bd80      	pop	{r7, pc}

08001dc2 <_ZN7MPU605012getFIFOBytesEPhh>:
 */
uint8_t MPU6050::getFIFOByte() {
    readByte(devAddr, MPU6050_RA_FIFO_R_W, buffer);
    return buffer[0];
}
void MPU6050::getFIFOBytes(uint8_t *data, uint8_t length) {
 8001dc2:	b580      	push	{r7, lr}
 8001dc4:	b084      	sub	sp, #16
 8001dc6:	af00      	add	r7, sp, #0
 8001dc8:	60f8      	str	r0, [r7, #12]
 8001dca:	60b9      	str	r1, [r7, #8]
 8001dcc:	4613      	mov	r3, r2
 8001dce:	71fb      	strb	r3, [r7, #7]
    if(length > 0){
 8001dd0:	79fb      	ldrb	r3, [r7, #7]
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d007      	beq.n	8001de6 <_ZN7MPU605012getFIFOBytesEPhh+0x24>
        readBytes(devAddr, MPU6050_RA_FIFO_R_W, length, data);
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	7998      	ldrb	r0, [r3, #6]
 8001dda:	79fa      	ldrb	r2, [r7, #7]
 8001ddc:	68bb      	ldr	r3, [r7, #8]
 8001dde:	2174      	movs	r1, #116	; 0x74
 8001de0:	f7ff fc24 	bl	800162c <_Z9readByteshhhPh>
    } else {
    	*data = 0;
    }
}
 8001de4:	e002      	b.n	8001dec <_ZN7MPU605012getFIFOBytesEPhh+0x2a>
    	*data = 0;
 8001de6:	68bb      	ldr	r3, [r7, #8]
 8001de8:	2200      	movs	r2, #0
 8001dea:	701a      	strb	r2, [r3, #0]
}
 8001dec:	bf00      	nop
 8001dee:	3710      	adds	r7, #16
 8001df0:	46bd      	mov	sp, r7
 8001df2:	bd80      	pop	{r7, pc}

08001df4 <_ZN7MPU605015setOTPBankValidEb>:

uint8_t MPU6050::getOTPBankValid() {
    readBit(devAddr, MPU6050_RA_XG_OFFS_TC, MPU6050_TC_OTP_BNK_VLD_BIT, buffer);
    return buffer[0];
}
void MPU6050::setOTPBankValid(bool enabled) {
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b082      	sub	sp, #8
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
 8001dfc:	460b      	mov	r3, r1
 8001dfe:	70fb      	strb	r3, [r7, #3]
    writeBit(devAddr, MPU6050_RA_XG_OFFS_TC, MPU6050_TC_OTP_BNK_VLD_BIT, enabled);
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	7998      	ldrb	r0, [r3, #6]
 8001e04:	78fb      	ldrb	r3, [r7, #3]
 8001e06:	2200      	movs	r2, #0
 8001e08:	2100      	movs	r1, #0
 8001e0a:	f7ff fc85 	bl	8001718 <_Z8writeBithhhh>
}
 8001e0e:	bf00      	nop
 8001e10:	3708      	adds	r7, #8
 8001e12:	46bd      	mov	sp, r7
 8001e14:	bd80      	pop	{r7, pc}

08001e16 <_ZN7MPU605016getXGyroOffsetTCEv>:
int8_t MPU6050::getXGyroOffsetTC() {
 8001e16:	b580      	push	{r7, lr}
 8001e18:	b084      	sub	sp, #16
 8001e1a:	af02      	add	r7, sp, #8
 8001e1c:	6078      	str	r0, [r7, #4]
    readBits(devAddr, MPU6050_RA_XG_OFFS_TC, MPU6050_TC_OFFSET_BIT, MPU6050_TC_OFFSET_LENGTH, buffer);
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	7998      	ldrb	r0, [r3, #6]
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	3307      	adds	r3, #7
 8001e26:	9300      	str	r3, [sp, #0]
 8001e28:	2306      	movs	r3, #6
 8001e2a:	2206      	movs	r2, #6
 8001e2c:	2100      	movs	r1, #0
 8001e2e:	f7ff fb65 	bl	80014fc <_Z8readBitshhhhPh>
    return buffer[0];
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	79db      	ldrb	r3, [r3, #7]
 8001e36:	b25b      	sxtb	r3, r3
}
 8001e38:	4618      	mov	r0, r3
 8001e3a:	3708      	adds	r7, #8
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	bd80      	pop	{r7, pc}

08001e40 <_ZN7MPU605016setXGyroOffsetTCEa>:
void MPU6050::setXGyroOffsetTC(int8_t offset) {
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b084      	sub	sp, #16
 8001e44:	af02      	add	r7, sp, #8
 8001e46:	6078      	str	r0, [r7, #4]
 8001e48:	460b      	mov	r3, r1
 8001e4a:	70fb      	strb	r3, [r7, #3]
    writeBits(devAddr, MPU6050_RA_XG_OFFS_TC, MPU6050_TC_OFFSET_BIT, MPU6050_TC_OFFSET_LENGTH, offset);
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	7998      	ldrb	r0, [r3, #6]
 8001e50:	78fb      	ldrb	r3, [r7, #3]
 8001e52:	9300      	str	r3, [sp, #0]
 8001e54:	2306      	movs	r3, #6
 8001e56:	2206      	movs	r2, #6
 8001e58:	2100      	movs	r1, #0
 8001e5a:	f7ff fcd9 	bl	8001810 <_Z9writeBitshhhhh>
}
 8001e5e:	bf00      	nop
 8001e60:	3708      	adds	r7, #8
 8001e62:	46bd      	mov	sp, r7
 8001e64:	bd80      	pop	{r7, pc}

08001e66 <_ZN7MPU605016getYGyroOffsetTCEv>:

// YG_OFFS_TC register

int8_t MPU6050::getYGyroOffsetTC() {
 8001e66:	b580      	push	{r7, lr}
 8001e68:	b084      	sub	sp, #16
 8001e6a:	af02      	add	r7, sp, #8
 8001e6c:	6078      	str	r0, [r7, #4]
    readBits(devAddr, MPU6050_RA_YG_OFFS_TC, MPU6050_TC_OFFSET_BIT, MPU6050_TC_OFFSET_LENGTH, buffer);
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	7998      	ldrb	r0, [r3, #6]
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	3307      	adds	r3, #7
 8001e76:	9300      	str	r3, [sp, #0]
 8001e78:	2306      	movs	r3, #6
 8001e7a:	2206      	movs	r2, #6
 8001e7c:	2101      	movs	r1, #1
 8001e7e:	f7ff fb3d 	bl	80014fc <_Z8readBitshhhhPh>
    return buffer[0];
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	79db      	ldrb	r3, [r3, #7]
 8001e86:	b25b      	sxtb	r3, r3
}
 8001e88:	4618      	mov	r0, r3
 8001e8a:	3708      	adds	r7, #8
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	bd80      	pop	{r7, pc}

08001e90 <_ZN7MPU605016setYGyroOffsetTCEa>:
void MPU6050::setYGyroOffsetTC(int8_t offset) {
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b084      	sub	sp, #16
 8001e94:	af02      	add	r7, sp, #8
 8001e96:	6078      	str	r0, [r7, #4]
 8001e98:	460b      	mov	r3, r1
 8001e9a:	70fb      	strb	r3, [r7, #3]
    writeBits(devAddr, MPU6050_RA_YG_OFFS_TC, MPU6050_TC_OFFSET_BIT, MPU6050_TC_OFFSET_LENGTH, offset);
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	7998      	ldrb	r0, [r3, #6]
 8001ea0:	78fb      	ldrb	r3, [r7, #3]
 8001ea2:	9300      	str	r3, [sp, #0]
 8001ea4:	2306      	movs	r3, #6
 8001ea6:	2206      	movs	r2, #6
 8001ea8:	2101      	movs	r1, #1
 8001eaa:	f7ff fcb1 	bl	8001810 <_Z9writeBitshhhhh>
}
 8001eae:	bf00      	nop
 8001eb0:	3708      	adds	r7, #8
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	bd80      	pop	{r7, pc}

08001eb6 <_ZN7MPU605016getZGyroOffsetTCEv>:

// ZG_OFFS_TC register

int8_t MPU6050::getZGyroOffsetTC() {
 8001eb6:	b580      	push	{r7, lr}
 8001eb8:	b084      	sub	sp, #16
 8001eba:	af02      	add	r7, sp, #8
 8001ebc:	6078      	str	r0, [r7, #4]
    readBits(devAddr, MPU6050_RA_ZG_OFFS_TC, MPU6050_TC_OFFSET_BIT, MPU6050_TC_OFFSET_LENGTH, buffer);
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	7998      	ldrb	r0, [r3, #6]
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	3307      	adds	r3, #7
 8001ec6:	9300      	str	r3, [sp, #0]
 8001ec8:	2306      	movs	r3, #6
 8001eca:	2206      	movs	r2, #6
 8001ecc:	2102      	movs	r1, #2
 8001ece:	f7ff fb15 	bl	80014fc <_Z8readBitshhhhPh>
    return buffer[0];
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	79db      	ldrb	r3, [r3, #7]
 8001ed6:	b25b      	sxtb	r3, r3
}
 8001ed8:	4618      	mov	r0, r3
 8001eda:	3708      	adds	r7, #8
 8001edc:	46bd      	mov	sp, r7
 8001ede:	bd80      	pop	{r7, pc}

08001ee0 <_ZN7MPU605016setZGyroOffsetTCEa>:
void MPU6050::setZGyroOffsetTC(int8_t offset) {
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b084      	sub	sp, #16
 8001ee4:	af02      	add	r7, sp, #8
 8001ee6:	6078      	str	r0, [r7, #4]
 8001ee8:	460b      	mov	r3, r1
 8001eea:	70fb      	strb	r3, [r7, #3]
    writeBits(devAddr, MPU6050_RA_ZG_OFFS_TC, MPU6050_TC_OFFSET_BIT, MPU6050_TC_OFFSET_LENGTH, offset);
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	7998      	ldrb	r0, [r3, #6]
 8001ef0:	78fb      	ldrb	r3, [r7, #3]
 8001ef2:	9300      	str	r3, [sp, #0]
 8001ef4:	2306      	movs	r3, #6
 8001ef6:	2206      	movs	r2, #6
 8001ef8:	2102      	movs	r1, #2
 8001efa:	f7ff fc89 	bl	8001810 <_Z9writeBitshhhhh>
}
 8001efe:	bf00      	nop
 8001f00:	3708      	adds	r7, #8
 8001f02:	46bd      	mov	sp, r7
 8001f04:	bd80      	pop	{r7, pc}

08001f06 <_ZN7MPU605015setXAccelOffsetEs>:

int16_t MPU6050::getXAccelOffset() {
    readBytes(devAddr, MPU6050_RA_XA_OFFS_H, 2, buffer);
    return (((int16_t)buffer[0]) << 8) | buffer[1];
}
void MPU6050::setXAccelOffset(int16_t offset) {
 8001f06:	b580      	push	{r7, lr}
 8001f08:	b082      	sub	sp, #8
 8001f0a:	af00      	add	r7, sp, #0
 8001f0c:	6078      	str	r0, [r7, #4]
 8001f0e:	460b      	mov	r3, r1
 8001f10:	807b      	strh	r3, [r7, #2]
    writeWord(devAddr, MPU6050_RA_XA_OFFS_H, offset);
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	799b      	ldrb	r3, [r3, #6]
 8001f16:	887a      	ldrh	r2, [r7, #2]
 8001f18:	2106      	movs	r1, #6
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	f7ff fd3c 	bl	8001998 <_Z9writeWordhht>
}
 8001f20:	bf00      	nop
 8001f22:	3708      	adds	r7, #8
 8001f24:	46bd      	mov	sp, r7
 8001f26:	bd80      	pop	{r7, pc}

08001f28 <_ZN7MPU605015setYAccelOffsetEs>:

int16_t MPU6050::getYAccelOffset() {
    readBytes(devAddr, MPU6050_RA_YA_OFFS_H, 2, buffer);
    return (((int16_t)buffer[0]) << 8) | buffer[1];
}
void MPU6050::setYAccelOffset(int16_t offset) {
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b082      	sub	sp, #8
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
 8001f30:	460b      	mov	r3, r1
 8001f32:	807b      	strh	r3, [r7, #2]
    writeWord(devAddr, MPU6050_RA_YA_OFFS_H, offset);
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	799b      	ldrb	r3, [r3, #6]
 8001f38:	887a      	ldrh	r2, [r7, #2]
 8001f3a:	2108      	movs	r1, #8
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	f7ff fd2b 	bl	8001998 <_Z9writeWordhht>
}
 8001f42:	bf00      	nop
 8001f44:	3708      	adds	r7, #8
 8001f46:	46bd      	mov	sp, r7
 8001f48:	bd80      	pop	{r7, pc}

08001f4a <_ZN7MPU605015setZAccelOffsetEs>:

int16_t MPU6050::getZAccelOffset() {
    readBytes(devAddr, MPU6050_RA_ZA_OFFS_H, 2, buffer);
    return (((int16_t)buffer[0]) << 8) | buffer[1];
}
void MPU6050::setZAccelOffset(int16_t offset) {
 8001f4a:	b580      	push	{r7, lr}
 8001f4c:	b082      	sub	sp, #8
 8001f4e:	af00      	add	r7, sp, #0
 8001f50:	6078      	str	r0, [r7, #4]
 8001f52:	460b      	mov	r3, r1
 8001f54:	807b      	strh	r3, [r7, #2]
    writeWord(devAddr, MPU6050_RA_ZA_OFFS_H, offset);
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	799b      	ldrb	r3, [r3, #6]
 8001f5a:	887a      	ldrh	r2, [r7, #2]
 8001f5c:	210a      	movs	r1, #10
 8001f5e:	4618      	mov	r0, r3
 8001f60:	f7ff fd1a 	bl	8001998 <_Z9writeWordhht>
}
 8001f64:	bf00      	nop
 8001f66:	3708      	adds	r7, #8
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	bd80      	pop	{r7, pc}

08001f6c <_ZN7MPU605014setXGyroOffsetEs>:

int16_t MPU6050::getXGyroOffset() {
    readBytes(devAddr, MPU6050_RA_XG_OFFS_USRH, 2, buffer);
    return (((int16_t)buffer[0]) << 8) | buffer[1];
}
void MPU6050::setXGyroOffset(int16_t offset) {
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b082      	sub	sp, #8
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
 8001f74:	460b      	mov	r3, r1
 8001f76:	807b      	strh	r3, [r7, #2]
    writeWord(devAddr, MPU6050_RA_XG_OFFS_USRH, offset);
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	799b      	ldrb	r3, [r3, #6]
 8001f7c:	887a      	ldrh	r2, [r7, #2]
 8001f7e:	2113      	movs	r1, #19
 8001f80:	4618      	mov	r0, r3
 8001f82:	f7ff fd09 	bl	8001998 <_Z9writeWordhht>
}
 8001f86:	bf00      	nop
 8001f88:	3708      	adds	r7, #8
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	bd80      	pop	{r7, pc}

08001f8e <_ZN7MPU605014setYGyroOffsetEs>:

int16_t MPU6050::getYGyroOffset() {
    readBytes(devAddr, MPU6050_RA_YG_OFFS_USRH, 2, buffer);
    return (((int16_t)buffer[0]) << 8) | buffer[1];
}
void MPU6050::setYGyroOffset(int16_t offset) {
 8001f8e:	b580      	push	{r7, lr}
 8001f90:	b082      	sub	sp, #8
 8001f92:	af00      	add	r7, sp, #0
 8001f94:	6078      	str	r0, [r7, #4]
 8001f96:	460b      	mov	r3, r1
 8001f98:	807b      	strh	r3, [r7, #2]
    writeWord(devAddr, MPU6050_RA_YG_OFFS_USRH, offset);
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	799b      	ldrb	r3, [r3, #6]
 8001f9e:	887a      	ldrh	r2, [r7, #2]
 8001fa0:	2115      	movs	r1, #21
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	f7ff fcf8 	bl	8001998 <_Z9writeWordhht>
}
 8001fa8:	bf00      	nop
 8001faa:	3708      	adds	r7, #8
 8001fac:	46bd      	mov	sp, r7
 8001fae:	bd80      	pop	{r7, pc}

08001fb0 <_ZN7MPU605014setZGyroOffsetEs>:

int16_t MPU6050::getZGyroOffset() {
    readBytes(devAddr, MPU6050_RA_ZG_OFFS_USRH, 2, buffer);
    return (((int16_t)buffer[0]) << 8) | buffer[1];
}
void MPU6050::setZGyroOffset(int16_t offset) {
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b082      	sub	sp, #8
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
 8001fb8:	460b      	mov	r3, r1
 8001fba:	807b      	strh	r3, [r7, #2]
    writeWord(devAddr, MPU6050_RA_ZG_OFFS_USRH, offset);
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	799b      	ldrb	r3, [r3, #6]
 8001fc0:	887a      	ldrh	r2, [r7, #2]
 8001fc2:	2117      	movs	r1, #23
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	f7ff fce7 	bl	8001998 <_Z9writeWordhht>
}
 8001fca:	bf00      	nop
 8001fcc:	3708      	adds	r7, #8
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	bd80      	pop	{r7, pc}

08001fd2 <_ZN7MPU605013setDMPEnabledEb>:

bool MPU6050::getDMPEnabled() {
    readBit(devAddr, MPU6050_RA_USER_CTRL, MPU6050_USERCTRL_DMP_EN_BIT, buffer);
    return buffer[0];
}
void MPU6050::setDMPEnabled(bool enabled) {
 8001fd2:	b580      	push	{r7, lr}
 8001fd4:	b082      	sub	sp, #8
 8001fd6:	af00      	add	r7, sp, #0
 8001fd8:	6078      	str	r0, [r7, #4]
 8001fda:	460b      	mov	r3, r1
 8001fdc:	70fb      	strb	r3, [r7, #3]
    writeBit(devAddr, MPU6050_RA_USER_CTRL, MPU6050_USERCTRL_DMP_EN_BIT, enabled);
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	7998      	ldrb	r0, [r3, #6]
 8001fe2:	78fb      	ldrb	r3, [r7, #3]
 8001fe4:	2207      	movs	r2, #7
 8001fe6:	216a      	movs	r1, #106	; 0x6a
 8001fe8:	f7ff fb96 	bl	8001718 <_Z8writeBithhhh>
}
 8001fec:	bf00      	nop
 8001fee:	3708      	adds	r7, #8
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	bd80      	pop	{r7, pc}

08001ff4 <_ZN7MPU60508resetDMPEv>:
void MPU6050::resetDMP() {
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b082      	sub	sp, #8
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
    writeBit(devAddr, MPU6050_RA_USER_CTRL, MPU6050_USERCTRL_DMP_RESET_BIT, true);
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	7998      	ldrb	r0, [r3, #6]
 8002000:	2301      	movs	r3, #1
 8002002:	2203      	movs	r2, #3
 8002004:	216a      	movs	r1, #106	; 0x6a
 8002006:	f7ff fb87 	bl	8001718 <_Z8writeBithhhh>
}
 800200a:	bf00      	nop
 800200c:	3708      	adds	r7, #8
 800200e:	46bd      	mov	sp, r7
 8002010:	bd80      	pop	{r7, pc}

08002012 <_ZN7MPU605013setMemoryBankEhbb>:

// BANK_SEL register

void MPU6050::setMemoryBank(uint8_t bank, bool prefetchEnabled, bool userBank) {
 8002012:	b580      	push	{r7, lr}
 8002014:	b082      	sub	sp, #8
 8002016:	af00      	add	r7, sp, #0
 8002018:	6078      	str	r0, [r7, #4]
 800201a:	4608      	mov	r0, r1
 800201c:	4611      	mov	r1, r2
 800201e:	461a      	mov	r2, r3
 8002020:	4603      	mov	r3, r0
 8002022:	70fb      	strb	r3, [r7, #3]
 8002024:	460b      	mov	r3, r1
 8002026:	70bb      	strb	r3, [r7, #2]
 8002028:	4613      	mov	r3, r2
 800202a:	707b      	strb	r3, [r7, #1]
    bank &= 0x1F;
 800202c:	78fb      	ldrb	r3, [r7, #3]
 800202e:	f003 031f 	and.w	r3, r3, #31
 8002032:	70fb      	strb	r3, [r7, #3]
    if (userBank) bank |= 0x20;
 8002034:	787b      	ldrb	r3, [r7, #1]
 8002036:	2b00      	cmp	r3, #0
 8002038:	d003      	beq.n	8002042 <_ZN7MPU605013setMemoryBankEhbb+0x30>
 800203a:	78fb      	ldrb	r3, [r7, #3]
 800203c:	f043 0320 	orr.w	r3, r3, #32
 8002040:	70fb      	strb	r3, [r7, #3]
    if (prefetchEnabled) bank |= 0x40;
 8002042:	78bb      	ldrb	r3, [r7, #2]
 8002044:	2b00      	cmp	r3, #0
 8002046:	d003      	beq.n	8002050 <_ZN7MPU605013setMemoryBankEhbb+0x3e>
 8002048:	78fb      	ldrb	r3, [r7, #3]
 800204a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800204e:	70fb      	strb	r3, [r7, #3]
    writeByte(devAddr, MPU6050_RA_BANK_SEL, bank);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	799b      	ldrb	r3, [r3, #6]
 8002054:	78fa      	ldrb	r2, [r7, #3]
 8002056:	216d      	movs	r1, #109	; 0x6d
 8002058:	4618      	mov	r0, r3
 800205a:	f7ff fc65 	bl	8001928 <_Z9writeBytehhh>
}
 800205e:	bf00      	nop
 8002060:	3708      	adds	r7, #8
 8002062:	46bd      	mov	sp, r7
 8002064:	bd80      	pop	{r7, pc}

08002066 <_ZN7MPU605021setMemoryStartAddressEh>:

// MEM_START_ADDR register

void MPU6050::setMemoryStartAddress(uint8_t address) {
 8002066:	b580      	push	{r7, lr}
 8002068:	b082      	sub	sp, #8
 800206a:	af00      	add	r7, sp, #0
 800206c:	6078      	str	r0, [r7, #4]
 800206e:	460b      	mov	r3, r1
 8002070:	70fb      	strb	r3, [r7, #3]
    writeByte(devAddr, MPU6050_RA_MEM_START_ADDR, address);
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	799b      	ldrb	r3, [r3, #6]
 8002076:	78fa      	ldrb	r2, [r7, #3]
 8002078:	216e      	movs	r1, #110	; 0x6e
 800207a:	4618      	mov	r0, r3
 800207c:	f7ff fc54 	bl	8001928 <_Z9writeBytehhh>
}
 8002080:	bf00      	nop
 8002082:	3708      	adds	r7, #8
 8002084:	46bd      	mov	sp, r7
 8002086:	bd80      	pop	{r7, pc}

08002088 <_ZN7MPU605015readMemoryBlockEPhthh>:
    return buffer[0];
}
void MPU6050::writeMemoryByte(uint8_t data) {
    writeByte(devAddr, MPU6050_RA_MEM_R_W, data);
}
void MPU6050::readMemoryBlock(uint8_t *data, uint16_t dataSize, uint8_t bank, uint8_t address) {
 8002088:	b580      	push	{r7, lr}
 800208a:	b086      	sub	sp, #24
 800208c:	af00      	add	r7, sp, #0
 800208e:	60f8      	str	r0, [r7, #12]
 8002090:	60b9      	str	r1, [r7, #8]
 8002092:	4611      	mov	r1, r2
 8002094:	461a      	mov	r2, r3
 8002096:	460b      	mov	r3, r1
 8002098:	80fb      	strh	r3, [r7, #6]
 800209a:	4613      	mov	r3, r2
 800209c:	717b      	strb	r3, [r7, #5]
    setMemoryBank(bank);
 800209e:	7979      	ldrb	r1, [r7, #5]
 80020a0:	2300      	movs	r3, #0
 80020a2:	2200      	movs	r2, #0
 80020a4:	68f8      	ldr	r0, [r7, #12]
 80020a6:	f7ff ffb4 	bl	8002012 <_ZN7MPU605013setMemoryBankEhbb>
    setMemoryStartAddress(address);
 80020aa:	f897 3020 	ldrb.w	r3, [r7, #32]
 80020ae:	4619      	mov	r1, r3
 80020b0:	68f8      	ldr	r0, [r7, #12]
 80020b2:	f7ff ffd8 	bl	8002066 <_ZN7MPU605021setMemoryStartAddressEh>
    uint8_t chunkSize;
    for (uint16_t i = 0; i < dataSize;) {
 80020b6:	2300      	movs	r3, #0
 80020b8:	82bb      	strh	r3, [r7, #20]
 80020ba:	8aba      	ldrh	r2, [r7, #20]
 80020bc:	88fb      	ldrh	r3, [r7, #6]
 80020be:	429a      	cmp	r2, r3
 80020c0:	d244      	bcs.n	800214c <_ZN7MPU605015readMemoryBlockEPhthh+0xc4>
        // determine correct chunk size according to bank position and data size
        chunkSize = MPU6050_DMP_MEMORY_CHUNK_SIZE;
 80020c2:	2310      	movs	r3, #16
 80020c4:	75fb      	strb	r3, [r7, #23]

        // make sure we don't go past the data size
        if (i + chunkSize > dataSize) chunkSize = dataSize - i;
 80020c6:	8aba      	ldrh	r2, [r7, #20]
 80020c8:	7dfb      	ldrb	r3, [r7, #23]
 80020ca:	441a      	add	r2, r3
 80020cc:	88fb      	ldrh	r3, [r7, #6]
 80020ce:	429a      	cmp	r2, r3
 80020d0:	dd05      	ble.n	80020de <_ZN7MPU605015readMemoryBlockEPhthh+0x56>
 80020d2:	88fb      	ldrh	r3, [r7, #6]
 80020d4:	b2da      	uxtb	r2, r3
 80020d6:	8abb      	ldrh	r3, [r7, #20]
 80020d8:	b2db      	uxtb	r3, r3
 80020da:	1ad3      	subs	r3, r2, r3
 80020dc:	75fb      	strb	r3, [r7, #23]

        // make sure this chunk doesn't go past the bank boundary (256 bytes)
        if (chunkSize > 256 - address) chunkSize = 256 - address;
 80020de:	7dfa      	ldrb	r2, [r7, #23]
 80020e0:	f897 3020 	ldrb.w	r3, [r7, #32]
 80020e4:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 80020e8:	429a      	cmp	r2, r3
 80020ea:	dd03      	ble.n	80020f4 <_ZN7MPU605015readMemoryBlockEPhthh+0x6c>
 80020ec:	f897 3020 	ldrb.w	r3, [r7, #32]
 80020f0:	425b      	negs	r3, r3
 80020f2:	75fb      	strb	r3, [r7, #23]

        // read the chunk of data as specified
        readBytes(devAddr, MPU6050_RA_MEM_R_W, chunkSize, data + i);
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	7998      	ldrb	r0, [r3, #6]
 80020f8:	8abb      	ldrh	r3, [r7, #20]
 80020fa:	68ba      	ldr	r2, [r7, #8]
 80020fc:	4413      	add	r3, r2
 80020fe:	7dfa      	ldrb	r2, [r7, #23]
 8002100:	216f      	movs	r1, #111	; 0x6f
 8002102:	f7ff fa93 	bl	800162c <_Z9readByteshhhPh>
        
        // increase byte index by [chunkSize]
        i += chunkSize;
 8002106:	7dfb      	ldrb	r3, [r7, #23]
 8002108:	b29a      	uxth	r2, r3
 800210a:	8abb      	ldrh	r3, [r7, #20]
 800210c:	4413      	add	r3, r2
 800210e:	82bb      	strh	r3, [r7, #20]

        // uint8_t automatically wraps to 0 at 256
        address += chunkSize;
 8002110:	f897 2020 	ldrb.w	r2, [r7, #32]
 8002114:	7dfb      	ldrb	r3, [r7, #23]
 8002116:	4413      	add	r3, r2
 8002118:	f887 3020 	strb.w	r3, [r7, #32]

        // if we aren't done, update bank (if necessary) and address
        if (i < dataSize) {
 800211c:	8aba      	ldrh	r2, [r7, #20]
 800211e:	88fb      	ldrh	r3, [r7, #6]
 8002120:	429a      	cmp	r2, r3
 8002122:	d2ca      	bcs.n	80020ba <_ZN7MPU605015readMemoryBlockEPhthh+0x32>
            if (address == 0) bank++;
 8002124:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002128:	2b00      	cmp	r3, #0
 800212a:	d102      	bne.n	8002132 <_ZN7MPU605015readMemoryBlockEPhthh+0xaa>
 800212c:	797b      	ldrb	r3, [r7, #5]
 800212e:	3301      	adds	r3, #1
 8002130:	717b      	strb	r3, [r7, #5]
            setMemoryBank(bank);
 8002132:	7979      	ldrb	r1, [r7, #5]
 8002134:	2300      	movs	r3, #0
 8002136:	2200      	movs	r2, #0
 8002138:	68f8      	ldr	r0, [r7, #12]
 800213a:	f7ff ff6a 	bl	8002012 <_ZN7MPU605013setMemoryBankEhbb>
            setMemoryStartAddress(address);
 800213e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002142:	4619      	mov	r1, r3
 8002144:	68f8      	ldr	r0, [r7, #12]
 8002146:	f7ff ff8e 	bl	8002066 <_ZN7MPU605021setMemoryStartAddressEh>
    for (uint16_t i = 0; i < dataSize;) {
 800214a:	e7b6      	b.n	80020ba <_ZN7MPU605015readMemoryBlockEPhthh+0x32>
        }
    }
}
 800214c:	bf00      	nop
 800214e:	3718      	adds	r7, #24
 8002150:	46bd      	mov	sp, r7
 8002152:	bd80      	pop	{r7, pc}

08002154 <_ZN7MPU605016writeMemoryBlockEPKhthhbb>:
bool MPU6050::writeMemoryBlock(const uint8_t *data, uint16_t dataSize, uint8_t bank, uint8_t address, bool verify, bool useProgMem) {
 8002154:	b580      	push	{r7, lr}
 8002156:	b088      	sub	sp, #32
 8002158:	af00      	add	r7, sp, #0
 800215a:	60f8      	str	r0, [r7, #12]
 800215c:	60b9      	str	r1, [r7, #8]
 800215e:	4611      	mov	r1, r2
 8002160:	461a      	mov	r2, r3
 8002162:	460b      	mov	r3, r1
 8002164:	80fb      	strh	r3, [r7, #6]
 8002166:	4613      	mov	r3, r2
 8002168:	717b      	strb	r3, [r7, #5]
    setMemoryBank(bank);
 800216a:	7979      	ldrb	r1, [r7, #5]
 800216c:	2300      	movs	r3, #0
 800216e:	2200      	movs	r2, #0
 8002170:	68f8      	ldr	r0, [r7, #12]
 8002172:	f7ff ff4e 	bl	8002012 <_ZN7MPU605013setMemoryBankEhbb>
    setMemoryStartAddress(address);
 8002176:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800217a:	4619      	mov	r1, r3
 800217c:	68f8      	ldr	r0, [r7, #12]
 800217e:	f7ff ff72 	bl	8002066 <_ZN7MPU605021setMemoryStartAddressEh>
    uint8_t chunkSize;
    uint8_t *verifyBuffer=0;
 8002182:	2300      	movs	r3, #0
 8002184:	61bb      	str	r3, [r7, #24]
    uint8_t *progBuffer=0;
 8002186:	2300      	movs	r3, #0
 8002188:	617b      	str	r3, [r7, #20]
    uint16_t i;
    uint8_t j;
    if (verify) verifyBuffer = (uint8_t *)malloc(MPU6050_DMP_MEMORY_CHUNK_SIZE);
 800218a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800218e:	2b00      	cmp	r3, #0
 8002190:	d004      	beq.n	800219c <_ZN7MPU605016writeMemoryBlockEPKhthhbb+0x48>
 8002192:	2010      	movs	r0, #16
 8002194:	f00b ff00 	bl	800df98 <malloc>
 8002198:	4603      	mov	r3, r0
 800219a:	61bb      	str	r3, [r7, #24]
    if (useProgMem) progBuffer = (uint8_t *)malloc(MPU6050_DMP_MEMORY_CHUNK_SIZE);
 800219c:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d004      	beq.n	80021ae <_ZN7MPU605016writeMemoryBlockEPKhthhbb+0x5a>
 80021a4:	2010      	movs	r0, #16
 80021a6:	f00b fef7 	bl	800df98 <malloc>
 80021aa:	4603      	mov	r3, r0
 80021ac:	617b      	str	r3, [r7, #20]
    for (i = 0; i < dataSize;) {
 80021ae:	2300      	movs	r3, #0
 80021b0:	827b      	strh	r3, [r7, #18]
 80021b2:	8a7a      	ldrh	r2, [r7, #18]
 80021b4:	88fb      	ldrh	r3, [r7, #6]
 80021b6:	429a      	cmp	r2, r3
 80021b8:	f080 808e 	bcs.w	80022d8 <_ZN7MPU605016writeMemoryBlockEPKhthhbb+0x184>
        // determine correct chunk size according to bank position and data size
        chunkSize = MPU6050_DMP_MEMORY_CHUNK_SIZE;
 80021bc:	2310      	movs	r3, #16
 80021be:	77fb      	strb	r3, [r7, #31]

        // make sure we don't go past the data size
        if (i + chunkSize > dataSize) chunkSize = dataSize - i;
 80021c0:	8a7a      	ldrh	r2, [r7, #18]
 80021c2:	7ffb      	ldrb	r3, [r7, #31]
 80021c4:	441a      	add	r2, r3
 80021c6:	88fb      	ldrh	r3, [r7, #6]
 80021c8:	429a      	cmp	r2, r3
 80021ca:	dd05      	ble.n	80021d8 <_ZN7MPU605016writeMemoryBlockEPKhthhbb+0x84>
 80021cc:	88fb      	ldrh	r3, [r7, #6]
 80021ce:	b2da      	uxtb	r2, r3
 80021d0:	8a7b      	ldrh	r3, [r7, #18]
 80021d2:	b2db      	uxtb	r3, r3
 80021d4:	1ad3      	subs	r3, r2, r3
 80021d6:	77fb      	strb	r3, [r7, #31]

        // make sure this chunk doesn't go past the bank boundary (256 bytes)
        if (chunkSize > 256 - address) chunkSize = 256 - address;
 80021d8:	7ffa      	ldrb	r2, [r7, #31]
 80021da:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80021de:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 80021e2:	429a      	cmp	r2, r3
 80021e4:	dd03      	ble.n	80021ee <_ZN7MPU605016writeMemoryBlockEPKhthhbb+0x9a>
 80021e6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80021ea:	425b      	negs	r3, r3
 80021ec:	77fb      	strb	r3, [r7, #31]
        
        if (useProgMem) {
 80021ee:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d013      	beq.n	800221e <_ZN7MPU605016writeMemoryBlockEPKhthhbb+0xca>
            // write the chunk of data as specified
            for (j = 0; j < chunkSize; j++) progBuffer[j] = pgm_read_byte(data + i + j);
 80021f6:	2300      	movs	r3, #0
 80021f8:	747b      	strb	r3, [r7, #17]
 80021fa:	7c7a      	ldrb	r2, [r7, #17]
 80021fc:	7ffb      	ldrb	r3, [r7, #31]
 80021fe:	429a      	cmp	r2, r3
 8002200:	d211      	bcs.n	8002226 <_ZN7MPU605016writeMemoryBlockEPKhthhbb+0xd2>
 8002202:	8a7a      	ldrh	r2, [r7, #18]
 8002204:	7c7b      	ldrb	r3, [r7, #17]
 8002206:	4413      	add	r3, r2
 8002208:	68ba      	ldr	r2, [r7, #8]
 800220a:	441a      	add	r2, r3
 800220c:	7c7b      	ldrb	r3, [r7, #17]
 800220e:	6979      	ldr	r1, [r7, #20]
 8002210:	440b      	add	r3, r1
 8002212:	7812      	ldrb	r2, [r2, #0]
 8002214:	701a      	strb	r2, [r3, #0]
 8002216:	7c7b      	ldrb	r3, [r7, #17]
 8002218:	3301      	adds	r3, #1
 800221a:	747b      	strb	r3, [r7, #17]
 800221c:	e7ed      	b.n	80021fa <_ZN7MPU605016writeMemoryBlockEPKhthhbb+0xa6>
        } else {
            // write the chunk of data as specified
            progBuffer = (uint8_t *)data + i;
 800221e:	8a7b      	ldrh	r3, [r7, #18]
 8002220:	68ba      	ldr	r2, [r7, #8]
 8002222:	4413      	add	r3, r2
 8002224:	617b      	str	r3, [r7, #20]
        }

        writeBytes(devAddr, MPU6050_RA_MEM_R_W, chunkSize, progBuffer);
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	7998      	ldrb	r0, [r3, #6]
 800222a:	7ffa      	ldrb	r2, [r7, #31]
 800222c:	697b      	ldr	r3, [r7, #20]
 800222e:	216f      	movs	r1, #111	; 0x6f
 8002230:	f7ff fbee 	bl	8001a10 <_Z10writeByteshhhPh>

        // verify data if needed
        if (verify && verifyBuffer) {
 8002234:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8002238:	2b00      	cmp	r3, #0
 800223a:	d02a      	beq.n	8002292 <_ZN7MPU605016writeMemoryBlockEPKhthhbb+0x13e>
 800223c:	69bb      	ldr	r3, [r7, #24]
 800223e:	2b00      	cmp	r3, #0
 8002240:	d027      	beq.n	8002292 <_ZN7MPU605016writeMemoryBlockEPKhthhbb+0x13e>
            setMemoryBank(bank);
 8002242:	7979      	ldrb	r1, [r7, #5]
 8002244:	2300      	movs	r3, #0
 8002246:	2200      	movs	r2, #0
 8002248:	68f8      	ldr	r0, [r7, #12]
 800224a:	f7ff fee2 	bl	8002012 <_ZN7MPU605013setMemoryBankEhbb>
            setMemoryStartAddress(address);
 800224e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8002252:	4619      	mov	r1, r3
 8002254:	68f8      	ldr	r0, [r7, #12]
 8002256:	f7ff ff06 	bl	8002066 <_ZN7MPU605021setMemoryStartAddressEh>
            readBytes(devAddr, MPU6050_RA_MEM_R_W, chunkSize, verifyBuffer);
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	7998      	ldrb	r0, [r3, #6]
 800225e:	7ffa      	ldrb	r2, [r7, #31]
 8002260:	69bb      	ldr	r3, [r7, #24]
 8002262:	216f      	movs	r1, #111	; 0x6f
 8002264:	f7ff f9e2 	bl	800162c <_Z9readByteshhhPh>
            if (memcmp(progBuffer, verifyBuffer, chunkSize) != 0) {
 8002268:	7ffb      	ldrb	r3, [r7, #31]
 800226a:	461a      	mov	r2, r3
 800226c:	69b9      	ldr	r1, [r7, #24]
 800226e:	6978      	ldr	r0, [r7, #20]
 8002270:	f00b fea2 	bl	800dfb8 <memcmp>
 8002274:	4603      	mov	r3, r0
 8002276:	2b00      	cmp	r3, #0
 8002278:	d00b      	beq.n	8002292 <_ZN7MPU605016writeMemoryBlockEPKhthhbb+0x13e>
                    Serial.print(" 0x");
                    if (verifyBuffer[i + j] < 16) Serial.print("0");
                    Serial.print(verifyBuffer[i + j], HEX);
                }
                Serial.print("\n");*/
                free(verifyBuffer);
 800227a:	69b8      	ldr	r0, [r7, #24]
 800227c:	f00b fe94 	bl	800dfa8 <free>
                if (useProgMem) free(progBuffer);
 8002280:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8002284:	2b00      	cmp	r3, #0
 8002286:	d002      	beq.n	800228e <_ZN7MPU605016writeMemoryBlockEPKhthhbb+0x13a>
 8002288:	6978      	ldr	r0, [r7, #20]
 800228a:	f00b fe8d 	bl	800dfa8 <free>
                return false; // uh oh.
 800228e:	2300      	movs	r3, #0
 8002290:	e031      	b.n	80022f6 <_ZN7MPU605016writeMemoryBlockEPKhthhbb+0x1a2>
            }
        }

        // increase byte index by [chunkSize]
        i += chunkSize;
 8002292:	7ffb      	ldrb	r3, [r7, #31]
 8002294:	b29a      	uxth	r2, r3
 8002296:	8a7b      	ldrh	r3, [r7, #18]
 8002298:	4413      	add	r3, r2
 800229a:	827b      	strh	r3, [r7, #18]

        // uint8_t automatically wraps to 0 at 256
        address += chunkSize;
 800229c:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80022a0:	7ffb      	ldrb	r3, [r7, #31]
 80022a2:	4413      	add	r3, r2
 80022a4:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28

        // if we aren't done, update bank (if necessary) and address
        if (i < dataSize) {
 80022a8:	8a7a      	ldrh	r2, [r7, #18]
 80022aa:	88fb      	ldrh	r3, [r7, #6]
 80022ac:	429a      	cmp	r2, r3
 80022ae:	d280      	bcs.n	80021b2 <_ZN7MPU605016writeMemoryBlockEPKhthhbb+0x5e>
            if (address == 0) bank++;
 80022b0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d102      	bne.n	80022be <_ZN7MPU605016writeMemoryBlockEPKhthhbb+0x16a>
 80022b8:	797b      	ldrb	r3, [r7, #5]
 80022ba:	3301      	adds	r3, #1
 80022bc:	717b      	strb	r3, [r7, #5]
            setMemoryBank(bank);
 80022be:	7979      	ldrb	r1, [r7, #5]
 80022c0:	2300      	movs	r3, #0
 80022c2:	2200      	movs	r2, #0
 80022c4:	68f8      	ldr	r0, [r7, #12]
 80022c6:	f7ff fea4 	bl	8002012 <_ZN7MPU605013setMemoryBankEhbb>
            setMemoryStartAddress(address);
 80022ca:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80022ce:	4619      	mov	r1, r3
 80022d0:	68f8      	ldr	r0, [r7, #12]
 80022d2:	f7ff fec8 	bl	8002066 <_ZN7MPU605021setMemoryStartAddressEh>
    for (i = 0; i < dataSize;) {
 80022d6:	e76c      	b.n	80021b2 <_ZN7MPU605016writeMemoryBlockEPKhthhbb+0x5e>
        }
    }
    if (verify) free(verifyBuffer);
 80022d8:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d002      	beq.n	80022e6 <_ZN7MPU605016writeMemoryBlockEPKhthhbb+0x192>
 80022e0:	69b8      	ldr	r0, [r7, #24]
 80022e2:	f00b fe61 	bl	800dfa8 <free>
    if (useProgMem) free(progBuffer);
 80022e6:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d002      	beq.n	80022f4 <_ZN7MPU605016writeMemoryBlockEPKhthhbb+0x1a0>
 80022ee:	6978      	ldr	r0, [r7, #20]
 80022f0:	f00b fe5a 	bl	800dfa8 <free>
    return true;
 80022f4:	2301      	movs	r3, #1
}
 80022f6:	4618      	mov	r0, r3
 80022f8:	3720      	adds	r7, #32
 80022fa:	46bd      	mov	sp, r7
 80022fc:	bd80      	pop	{r7, pc}

080022fe <_ZN7MPU605020writeProgMemoryBlockEPKhthhb>:
bool MPU6050::writeProgMemoryBlock(const uint8_t *data, uint16_t dataSize, uint8_t bank, uint8_t address, bool verify) {
 80022fe:	b580      	push	{r7, lr}
 8002300:	b088      	sub	sp, #32
 8002302:	af04      	add	r7, sp, #16
 8002304:	60f8      	str	r0, [r7, #12]
 8002306:	60b9      	str	r1, [r7, #8]
 8002308:	4611      	mov	r1, r2
 800230a:	461a      	mov	r2, r3
 800230c:	460b      	mov	r3, r1
 800230e:	80fb      	strh	r3, [r7, #6]
 8002310:	4613      	mov	r3, r2
 8002312:	717b      	strb	r3, [r7, #5]
    return writeMemoryBlock(data, dataSize, bank, address, verify, true);
 8002314:	7979      	ldrb	r1, [r7, #5]
 8002316:	88fa      	ldrh	r2, [r7, #6]
 8002318:	2301      	movs	r3, #1
 800231a:	9302      	str	r3, [sp, #8]
 800231c:	7f3b      	ldrb	r3, [r7, #28]
 800231e:	9301      	str	r3, [sp, #4]
 8002320:	7e3b      	ldrb	r3, [r7, #24]
 8002322:	9300      	str	r3, [sp, #0]
 8002324:	460b      	mov	r3, r1
 8002326:	68b9      	ldr	r1, [r7, #8]
 8002328:	68f8      	ldr	r0, [r7, #12]
 800232a:	f7ff ff13 	bl	8002154 <_ZN7MPU605016writeMemoryBlockEPKhthhbb>
 800232e:	4603      	mov	r3, r0
}
 8002330:	4618      	mov	r0, r3
 8002332:	3710      	adds	r7, #16
 8002334:	46bd      	mov	sp, r7
 8002336:	bd80      	pop	{r7, pc}

08002338 <_ZN7MPU605024writeDMPConfigurationSetEPKhtb>:
bool MPU6050::writeDMPConfigurationSet(const uint8_t *data, uint16_t dataSize, bool useProgMem) {
 8002338:	b580      	push	{r7, lr}
 800233a:	b08c      	sub	sp, #48	; 0x30
 800233c:	af04      	add	r7, sp, #16
 800233e:	60f8      	str	r0, [r7, #12]
 8002340:	60b9      	str	r1, [r7, #8]
 8002342:	4611      	mov	r1, r2
 8002344:	461a      	mov	r2, r3
 8002346:	460b      	mov	r3, r1
 8002348:	80fb      	strh	r3, [r7, #6]
 800234a:	4613      	mov	r3, r2
 800234c:	717b      	strb	r3, [r7, #5]
    uint8_t *progBuffer = 0;
 800234e:	2300      	movs	r3, #0
 8002350:	61fb      	str	r3, [r7, #28]
	uint8_t success, special;
    uint16_t i, j;
    if (useProgMem) {
 8002352:	797b      	ldrb	r3, [r7, #5]
 8002354:	2b00      	cmp	r3, #0
 8002356:	d004      	beq.n	8002362 <_ZN7MPU605024writeDMPConfigurationSetEPKhtb+0x2a>
        progBuffer = (uint8_t *)malloc(8); // assume 8-byte blocks, realloc later if necessary
 8002358:	2008      	movs	r0, #8
 800235a:	f00b fe1d 	bl	800df98 <malloc>
 800235e:	4603      	mov	r3, r0
 8002360:	61fb      	str	r3, [r7, #28]
    }

    // config set data is a long string of blocks with the following structure:
    // [bank] [offset] [length] [byte[0], byte[1], ..., byte[length]]
    uint8_t bank, offset, length;
    for (i = 0; i < dataSize;) {
 8002362:	2300      	movs	r3, #0
 8002364:	833b      	strh	r3, [r7, #24]
 8002366:	8b3a      	ldrh	r2, [r7, #24]
 8002368:	88fb      	ldrh	r3, [r7, #6]
 800236a:	429a      	cmp	r2, r3
 800236c:	f080 80a1 	bcs.w	80024b2 <_ZN7MPU605024writeDMPConfigurationSetEPKhtb+0x17a>
        if (useProgMem) {
 8002370:	797b      	ldrb	r3, [r7, #5]
 8002372:	2b00      	cmp	r3, #0
 8002374:	d018      	beq.n	80023a8 <_ZN7MPU605024writeDMPConfigurationSetEPKhtb+0x70>
            bank = pgm_read_byte(data + i++);
 8002376:	8b3b      	ldrh	r3, [r7, #24]
 8002378:	1c5a      	adds	r2, r3, #1
 800237a:	833a      	strh	r2, [r7, #24]
 800237c:	461a      	mov	r2, r3
 800237e:	68bb      	ldr	r3, [r7, #8]
 8002380:	4413      	add	r3, r2
 8002382:	781b      	ldrb	r3, [r3, #0]
 8002384:	757b      	strb	r3, [r7, #21]
            offset = pgm_read_byte(data + i++);
 8002386:	8b3b      	ldrh	r3, [r7, #24]
 8002388:	1c5a      	adds	r2, r3, #1
 800238a:	833a      	strh	r2, [r7, #24]
 800238c:	461a      	mov	r2, r3
 800238e:	68bb      	ldr	r3, [r7, #8]
 8002390:	4413      	add	r3, r2
 8002392:	781b      	ldrb	r3, [r3, #0]
 8002394:	753b      	strb	r3, [r7, #20]
            length = pgm_read_byte(data + i++);
 8002396:	8b3b      	ldrh	r3, [r7, #24]
 8002398:	1c5a      	adds	r2, r3, #1
 800239a:	833a      	strh	r2, [r7, #24]
 800239c:	461a      	mov	r2, r3
 800239e:	68bb      	ldr	r3, [r7, #8]
 80023a0:	4413      	add	r3, r2
 80023a2:	781b      	ldrb	r3, [r3, #0]
 80023a4:	74fb      	strb	r3, [r7, #19]
 80023a6:	e017      	b.n	80023d8 <_ZN7MPU605024writeDMPConfigurationSetEPKhtb+0xa0>
        } else {
            bank = data[i++];
 80023a8:	8b3b      	ldrh	r3, [r7, #24]
 80023aa:	1c5a      	adds	r2, r3, #1
 80023ac:	833a      	strh	r2, [r7, #24]
 80023ae:	461a      	mov	r2, r3
 80023b0:	68bb      	ldr	r3, [r7, #8]
 80023b2:	4413      	add	r3, r2
 80023b4:	781b      	ldrb	r3, [r3, #0]
 80023b6:	757b      	strb	r3, [r7, #21]
            offset = data[i++];
 80023b8:	8b3b      	ldrh	r3, [r7, #24]
 80023ba:	1c5a      	adds	r2, r3, #1
 80023bc:	833a      	strh	r2, [r7, #24]
 80023be:	461a      	mov	r2, r3
 80023c0:	68bb      	ldr	r3, [r7, #8]
 80023c2:	4413      	add	r3, r2
 80023c4:	781b      	ldrb	r3, [r3, #0]
 80023c6:	753b      	strb	r3, [r7, #20]
            length = data[i++];
 80023c8:	8b3b      	ldrh	r3, [r7, #24]
 80023ca:	1c5a      	adds	r2, r3, #1
 80023cc:	833a      	strh	r2, [r7, #24]
 80023ce:	461a      	mov	r2, r3
 80023d0:	68bb      	ldr	r3, [r7, #8]
 80023d2:	4413      	add	r3, r2
 80023d4:	781b      	ldrb	r3, [r3, #0]
 80023d6:	74fb      	strb	r3, [r7, #19]
        }

        // write data or perform special action
        if (length > 0) {
 80023d8:	7cfb      	ldrb	r3, [r7, #19]
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d03a      	beq.n	8002454 <_ZN7MPU605024writeDMPConfigurationSetEPKhtb+0x11c>
            Serial.print(bank);
            Serial.print(", offset ");
            Serial.print(offset);
            Serial.print(", length=");
            Serial.println(length);*/
            if (useProgMem) {
 80023de:	797b      	ldrb	r3, [r7, #5]
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d01d      	beq.n	8002420 <_ZN7MPU605024writeDMPConfigurationSetEPKhtb+0xe8>
                if (sizeof(progBuffer) < length) progBuffer = (uint8_t *)realloc(progBuffer, length);
 80023e4:	7cfb      	ldrb	r3, [r7, #19]
 80023e6:	2b04      	cmp	r3, #4
 80023e8:	d905      	bls.n	80023f6 <_ZN7MPU605024writeDMPConfigurationSetEPKhtb+0xbe>
 80023ea:	7cfb      	ldrb	r3, [r7, #19]
 80023ec:	4619      	mov	r1, r3
 80023ee:	69f8      	ldr	r0, [r7, #28]
 80023f0:	f00b fe9e 	bl	800e130 <realloc>
 80023f4:	61f8      	str	r0, [r7, #28]
                for (j = 0; j < length; j++) progBuffer[j] = pgm_read_byte(data + i + j);
 80023f6:	2300      	movs	r3, #0
 80023f8:	82fb      	strh	r3, [r7, #22]
 80023fa:	7cfb      	ldrb	r3, [r7, #19]
 80023fc:	b29b      	uxth	r3, r3
 80023fe:	8afa      	ldrh	r2, [r7, #22]
 8002400:	429a      	cmp	r2, r3
 8002402:	d211      	bcs.n	8002428 <_ZN7MPU605024writeDMPConfigurationSetEPKhtb+0xf0>
 8002404:	8b3a      	ldrh	r2, [r7, #24]
 8002406:	8afb      	ldrh	r3, [r7, #22]
 8002408:	4413      	add	r3, r2
 800240a:	68ba      	ldr	r2, [r7, #8]
 800240c:	441a      	add	r2, r3
 800240e:	8afb      	ldrh	r3, [r7, #22]
 8002410:	69f9      	ldr	r1, [r7, #28]
 8002412:	440b      	add	r3, r1
 8002414:	7812      	ldrb	r2, [r2, #0]
 8002416:	701a      	strb	r2, [r3, #0]
 8002418:	8afb      	ldrh	r3, [r7, #22]
 800241a:	3301      	adds	r3, #1
 800241c:	82fb      	strh	r3, [r7, #22]
 800241e:	e7ec      	b.n	80023fa <_ZN7MPU605024writeDMPConfigurationSetEPKhtb+0xc2>
            } else {
                progBuffer = (uint8_t *)data + i;
 8002420:	8b3b      	ldrh	r3, [r7, #24]
 8002422:	68ba      	ldr	r2, [r7, #8]
 8002424:	4413      	add	r3, r2
 8002426:	61fb      	str	r3, [r7, #28]
            }
            success = writeMemoryBlock(progBuffer, length, bank, offset, true);
 8002428:	7cfb      	ldrb	r3, [r7, #19]
 800242a:	b29a      	uxth	r2, r3
 800242c:	7d79      	ldrb	r1, [r7, #21]
 800242e:	2300      	movs	r3, #0
 8002430:	9302      	str	r3, [sp, #8]
 8002432:	2301      	movs	r3, #1
 8002434:	9301      	str	r3, [sp, #4]
 8002436:	7d3b      	ldrb	r3, [r7, #20]
 8002438:	9300      	str	r3, [sp, #0]
 800243a:	460b      	mov	r3, r1
 800243c:	69f9      	ldr	r1, [r7, #28]
 800243e:	68f8      	ldr	r0, [r7, #12]
 8002440:	f7ff fe88 	bl	8002154 <_ZN7MPU605016writeMemoryBlockEPKhthhbb>
 8002444:	4603      	mov	r3, r0
 8002446:	76fb      	strb	r3, [r7, #27]
            i += length;
 8002448:	7cfb      	ldrb	r3, [r7, #19]
 800244a:	b29a      	uxth	r2, r3
 800244c:	8b3b      	ldrh	r3, [r7, #24]
 800244e:	4413      	add	r3, r2
 8002450:	833b      	strh	r3, [r7, #24]
 8002452:	e022      	b.n	800249a <_ZN7MPU605024writeDMPConfigurationSetEPKhtb+0x162>
            // special instruction
            // NOTE: this kind of behavior (what and when to do certain things)
            // is totally undocumented. This code is in here based on observed
            // behavior only, and exactly why (or even whether) it has to be here
            // is anybody's guess for now.
            if (useProgMem) {
 8002454:	797b      	ldrb	r3, [r7, #5]
 8002456:	2b00      	cmp	r3, #0
 8002458:	d008      	beq.n	800246c <_ZN7MPU605024writeDMPConfigurationSetEPKhtb+0x134>
                special = pgm_read_byte(data + i++);
 800245a:	8b3b      	ldrh	r3, [r7, #24]
 800245c:	1c5a      	adds	r2, r3, #1
 800245e:	833a      	strh	r2, [r7, #24]
 8002460:	461a      	mov	r2, r3
 8002462:	68bb      	ldr	r3, [r7, #8]
 8002464:	4413      	add	r3, r2
 8002466:	781b      	ldrb	r3, [r3, #0]
 8002468:	76bb      	strb	r3, [r7, #26]
 800246a:	e007      	b.n	800247c <_ZN7MPU605024writeDMPConfigurationSetEPKhtb+0x144>
            } else {
                special = data[i++];
 800246c:	8b3b      	ldrh	r3, [r7, #24]
 800246e:	1c5a      	adds	r2, r3, #1
 8002470:	833a      	strh	r2, [r7, #24]
 8002472:	461a      	mov	r2, r3
 8002474:	68bb      	ldr	r3, [r7, #8]
 8002476:	4413      	add	r3, r2
 8002478:	781b      	ldrb	r3, [r3, #0]
 800247a:	76bb      	strb	r3, [r7, #26]
            }
            /*Serial.print("Special command code ");
            Serial.print(special, HEX);
            Serial.println(" found...");*/
            if (special == 0x01) {
 800247c:	7ebb      	ldrb	r3, [r7, #26]
 800247e:	2b01      	cmp	r3, #1
 8002480:	d109      	bne.n	8002496 <_ZN7MPU605024writeDMPConfigurationSetEPKhtb+0x15e>
                // enable DMP-related interrupts
                
                //setIntZeroMotionEnabled(true);
                //setIntFIFOBufferOverflowEnabled(true);
                //setIntDMPEnabled(true);
                writeByte(devAddr, MPU6050_RA_INT_ENABLE, 0x32);  // single operation
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	799b      	ldrb	r3, [r3, #6]
 8002486:	2232      	movs	r2, #50	; 0x32
 8002488:	2138      	movs	r1, #56	; 0x38
 800248a:	4618      	mov	r0, r3
 800248c:	f7ff fa4c 	bl	8001928 <_Z9writeBytehhh>

                success = true;
 8002490:	2301      	movs	r3, #1
 8002492:	76fb      	strb	r3, [r7, #27]
 8002494:	e001      	b.n	800249a <_ZN7MPU605024writeDMPConfigurationSetEPKhtb+0x162>
            } else {
                // unknown special command
                success = false;
 8002496:	2300      	movs	r3, #0
 8002498:	76fb      	strb	r3, [r7, #27]
            }
        }
        
        if (!success) {
 800249a:	7efb      	ldrb	r3, [r7, #27]
 800249c:	2b00      	cmp	r3, #0
 800249e:	f47f af62 	bne.w	8002366 <_ZN7MPU605024writeDMPConfigurationSetEPKhtb+0x2e>
            if (useProgMem) free(progBuffer);
 80024a2:	797b      	ldrb	r3, [r7, #5]
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d002      	beq.n	80024ae <_ZN7MPU605024writeDMPConfigurationSetEPKhtb+0x176>
 80024a8:	69f8      	ldr	r0, [r7, #28]
 80024aa:	f00b fd7d 	bl	800dfa8 <free>
            return false; // uh oh
 80024ae:	2300      	movs	r3, #0
 80024b0:	e006      	b.n	80024c0 <_ZN7MPU605024writeDMPConfigurationSetEPKhtb+0x188>
        }
    }
    if (useProgMem) free(progBuffer);
 80024b2:	797b      	ldrb	r3, [r7, #5]
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d002      	beq.n	80024be <_ZN7MPU605024writeDMPConfigurationSetEPKhtb+0x186>
 80024b8:	69f8      	ldr	r0, [r7, #28]
 80024ba:	f00b fd75 	bl	800dfa8 <free>
    return true;
 80024be:	2301      	movs	r3, #1
}
 80024c0:	4618      	mov	r0, r3
 80024c2:	3720      	adds	r7, #32
 80024c4:	46bd      	mov	sp, r7
 80024c6:	bd80      	pop	{r7, pc}

080024c8 <_ZN7MPU605028writeProgDMPConfigurationSetEPKht>:
bool MPU6050::writeProgDMPConfigurationSet(const uint8_t *data, uint16_t dataSize) {
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b084      	sub	sp, #16
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	60f8      	str	r0, [r7, #12]
 80024d0:	60b9      	str	r1, [r7, #8]
 80024d2:	4613      	mov	r3, r2
 80024d4:	80fb      	strh	r3, [r7, #6]
    return writeDMPConfigurationSet(data, dataSize, true);
 80024d6:	88fa      	ldrh	r2, [r7, #6]
 80024d8:	2301      	movs	r3, #1
 80024da:	68b9      	ldr	r1, [r7, #8]
 80024dc:	68f8      	ldr	r0, [r7, #12]
 80024de:	f7ff ff2b 	bl	8002338 <_ZN7MPU605024writeDMPConfigurationSetEPKhtb>
 80024e2:	4603      	mov	r3, r0
}
 80024e4:	4618      	mov	r0, r3
 80024e6:	3710      	adds	r7, #16
 80024e8:	46bd      	mov	sp, r7
 80024ea:	bd80      	pop	{r7, pc}

080024ec <_ZN7MPU605013setDMPConfig1Eh>:

uint8_t MPU6050::getDMPConfig1() {
    readByte(devAddr, MPU6050_RA_DMP_CFG_1, buffer);
    return buffer[0];
}
void MPU6050::setDMPConfig1(uint8_t config) {
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b082      	sub	sp, #8
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
 80024f4:	460b      	mov	r3, r1
 80024f6:	70fb      	strb	r3, [r7, #3]
    writeByte(devAddr, MPU6050_RA_DMP_CFG_1, config);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	799b      	ldrb	r3, [r3, #6]
 80024fc:	78fa      	ldrb	r2, [r7, #3]
 80024fe:	2170      	movs	r1, #112	; 0x70
 8002500:	4618      	mov	r0, r3
 8002502:	f7ff fa11 	bl	8001928 <_Z9writeBytehhh>
}
 8002506:	bf00      	nop
 8002508:	3708      	adds	r7, #8
 800250a:	46bd      	mov	sp, r7
 800250c:	bd80      	pop	{r7, pc}

0800250e <_ZN7MPU605013setDMPConfig2Eh>:

uint8_t MPU6050::getDMPConfig2() {
    readByte(devAddr, MPU6050_RA_DMP_CFG_2, buffer);
    return buffer[0];
}
void MPU6050::setDMPConfig2(uint8_t config) {
 800250e:	b580      	push	{r7, lr}
 8002510:	b082      	sub	sp, #8
 8002512:	af00      	add	r7, sp, #0
 8002514:	6078      	str	r0, [r7, #4]
 8002516:	460b      	mov	r3, r1
 8002518:	70fb      	strb	r3, [r7, #3]
    writeByte(devAddr, MPU6050_RA_DMP_CFG_2, config);
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	799b      	ldrb	r3, [r3, #6]
 800251e:	78fa      	ldrb	r2, [r7, #3]
 8002520:	2171      	movs	r1, #113	; 0x71
 8002522:	4618      	mov	r0, r3
 8002524:	f7ff fa00 	bl	8001928 <_Z9writeBytehhh>
}
 8002528:	bf00      	nop
 800252a:	3708      	adds	r7, #8
 800252c:	46bd      	mov	sp, r7
 800252e:	bd80      	pop	{r7, pc}

08002530 <_ZN7MPU605013dmpInitializeEv>:


// 6_AXIS_MOTIONAPPS20
uint8_t MPU6050::dmpInitialize() {
 8002530:	b590      	push	{r4, r7, lr}
 8002532:	b0af      	sub	sp, #188	; 0xbc
 8002534:	af04      	add	r7, sp, #16
 8002536:	6078      	str	r0, [r7, #4]
    // reset device
    //DEBUG_PRINTLN(F("\n\nResetting MPU6050..."));
    reset();
 8002538:	6878      	ldr	r0, [r7, #4]
 800253a:	f7ff fbf5 	bl	8001d28 <_ZN7MPU60505resetEv>
    HAL_Delay(30); // wait after reset
 800253e:	201e      	movs	r0, #30
 8002540:	f001 ffba 	bl	80044b8 <HAL_Delay>
    Serial.println(F("Enabling wake cycle..."));
    setWakeCycleEnabled(true);*/

    // disable sleep mode
    //DEBUG_PRINTLN(F("Disabling sleep mode..."));
    setSleepEnabled(false);
 8002544:	2100      	movs	r1, #0
 8002546:	6878      	ldr	r0, [r7, #4]
 8002548:	f7ff fbfd 	bl	8001d46 <_ZN7MPU605015setSleepEnabledEb>

    // get MPU hardware revision
    //DEBUG_PRINTLN(F("Selecting user bank 16..."));
    setMemoryBank(0x10, true, true);
 800254c:	2301      	movs	r3, #1
 800254e:	2201      	movs	r2, #1
 8002550:	2110      	movs	r1, #16
 8002552:	6878      	ldr	r0, [r7, #4]
 8002554:	f7ff fd5d 	bl	8002012 <_ZN7MPU605013setMemoryBankEhbb>
    //DEBUG_PRINTLN(F("Selecting memory byte 6..."));
    setMemoryStartAddress(0x06);
 8002558:	2106      	movs	r1, #6
 800255a:	6878      	ldr	r0, [r7, #4]
 800255c:	f7ff fd83 	bl	8002066 <_ZN7MPU605021setMemoryStartAddressEh>
    //DEBUG_PRINTLN(F("Checking hardware revision..."));
    //DEBUG_PRINT(F("Revision @ user[16][6] = "));
    //DEBUG_PRINTLNF(readMemoryByte(), HEX);
    //DEBUG_PRINTLN(F("Resetting memory bank selection to 0..."));
    setMemoryBank(0, false, false);
 8002560:	2300      	movs	r3, #0
 8002562:	2200      	movs	r2, #0
 8002564:	2100      	movs	r1, #0
 8002566:	6878      	ldr	r0, [r7, #4]
 8002568:	f7ff fd53 	bl	8002012 <_ZN7MPU605013setMemoryBankEhbb>
    //DEBUG_PRINT(F("OTP bank is "));
    //DEBUG_PRINTLN(getOTPBankValid() ? F("valid!") : F("invalid!"));

    // get X/Y/Z gyro offsets
    //DEBUG_PRINTLN(F("Reading gyro offset TC values..."));
    int8_t xgOffsetTC = getXGyroOffsetTC();
 800256c:	6878      	ldr	r0, [r7, #4]
 800256e:	f7ff fc52 	bl	8001e16 <_ZN7MPU605016getXGyroOffsetTCEv>
 8002572:	4603      	mov	r3, r0
 8002574:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
    int8_t ygOffsetTC = getYGyroOffsetTC();
 8002578:	6878      	ldr	r0, [r7, #4]
 800257a:	f7ff fc74 	bl	8001e66 <_ZN7MPU605016getYGyroOffsetTCEv>
 800257e:	4603      	mov	r3, r0
 8002580:	f887 30a2 	strb.w	r3, [r7, #162]	; 0xa2
    int8_t zgOffsetTC = getZGyroOffsetTC();
 8002584:	6878      	ldr	r0, [r7, #4]
 8002586:	f7ff fc96 	bl	8001eb6 <_ZN7MPU605016getZGyroOffsetTCEv>
 800258a:	4603      	mov	r3, r0
 800258c:	f887 30a1 	strb.w	r3, [r7, #161]	; 0xa1
    //DEBUG_PRINT(F("Z gyro offset = "));
    //DEBUG_PRINTLN(zgOffsetTC);

    // setup weird slave stuff (?)
    //DEBUG_PRINTLN(F("Setting slave 0 address to 0x7F..."));
    setSlaveAddress(0, 0x7F);
 8002590:	227f      	movs	r2, #127	; 0x7f
 8002592:	2100      	movs	r1, #0
 8002594:	6878      	ldr	r0, [r7, #4]
 8002596:	f7ff fb47 	bl	8001c28 <_ZN7MPU605015setSlaveAddressEhh>
    //DEBUG_PRINTLN(F("Disabling I2C Master mode..."));
    setI2CMasterModeEnabled(false);
 800259a:	2100      	movs	r1, #0
 800259c:	6878      	ldr	r0, [r7, #4]
 800259e:	f7ff fb94 	bl	8001cca <_ZN7MPU605023setI2CMasterModeEnabledEb>
    //DEBUG_PRINTLN(F("Setting slave 0 address to 0x68 (self)..."));
    setSlaveAddress(0, 0x68);
 80025a2:	2268      	movs	r2, #104	; 0x68
 80025a4:	2100      	movs	r1, #0
 80025a6:	6878      	ldr	r0, [r7, #4]
 80025a8:	f7ff fb3e 	bl	8001c28 <_ZN7MPU605015setSlaveAddressEhh>
    //DEBUG_PRINTLN(F("Resetting I2C Master control..."));
    resetI2CMaster();
 80025ac:	6878      	ldr	r0, [r7, #4]
 80025ae:	f7ff fbac 	bl	8001d0a <_ZN7MPU605014resetI2CMasterEv>
    HAL_Delay(20);
 80025b2:	2014      	movs	r0, #20
 80025b4:	f001 ff80 	bl	80044b8 <HAL_Delay>

    // load DMP code into memory banks
    //DEBUG_PRINT(F("Writing DMP code to MPU memory banks ("));
    //DEBUG_PRINT(MPU6050_DMP_CODE_SIZE);
    //DEBUG_PRINTLN(F(" bytes)"));
    if (writeProgMemoryBlock(dmpMemory, MPU6050_DMP_CODE_SIZE)) {
 80025b8:	2301      	movs	r3, #1
 80025ba:	9301      	str	r3, [sp, #4]
 80025bc:	2300      	movs	r3, #0
 80025be:	9300      	str	r3, [sp, #0]
 80025c0:	2300      	movs	r3, #0
 80025c2:	f240 7289 	movw	r2, #1929	; 0x789
 80025c6:	49ce      	ldr	r1, [pc, #824]	; (8002900 <_ZN7MPU605013dmpInitializeEv+0x3d0>)
 80025c8:	6878      	ldr	r0, [r7, #4]
 80025ca:	f7ff fe98 	bl	80022fe <_ZN7MPU605020writeProgMemoryBlockEPKhthhb>
 80025ce:	4603      	mov	r3, r0
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	f000 8238 	beq.w	8002a46 <_ZN7MPU605013dmpInitializeEv+0x516>

        // write DMP configuration
        //DEBUG_PRINT(F("Writing DMP configuration to MPU memory banks ("));
        //DEBUG_PRINT(MPU6050_DMP_CONFIG_SIZE);
        //DEBUG_PRINTLN(F(" bytes in config def)"));
        if (writeProgDMPConfigurationSet(dmpConfig, MPU6050_DMP_CONFIG_SIZE)) {
 80025d6:	22c0      	movs	r2, #192	; 0xc0
 80025d8:	49ca      	ldr	r1, [pc, #808]	; (8002904 <_ZN7MPU605013dmpInitializeEv+0x3d4>)
 80025da:	6878      	ldr	r0, [r7, #4]
 80025dc:	f7ff ff74 	bl	80024c8 <_ZN7MPU605028writeProgDMPConfigurationSetEPKht>
 80025e0:	4603      	mov	r3, r0
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	f000 822d 	beq.w	8002a42 <_ZN7MPU605013dmpInitializeEv+0x512>
            //DEBUG_PRINTLN(F("Success! DMP configuration written and verified."));

            //DEBUG_PRINTLN(F("Setting clock source to Z Gyro..."));
            setClockSource(MPU6050_CLOCK_PLL_ZGYRO);
 80025e8:	2103      	movs	r1, #3
 80025ea:	6878      	ldr	r0, [r7, #4]
 80025ec:	f7ff fbbc 	bl	8001d68 <_ZN7MPU605014setClockSourceEh>

            //DEBUG_PRINTLN(F("Setting DMP and FIFO_OFLOW interrupts enabled..."));
            setIntEnabled(0x12);
 80025f0:	2112      	movs	r1, #18
 80025f2:	6878      	ldr	r0, [r7, #4]
 80025f4:	f7ff fb35 	bl	8001c62 <_ZN7MPU605013setIntEnabledEh>

            //DEBUG_PRINTLN(F("Setting sample rate to 200Hz..."));
            setRate(4); // 1khz / (1 + 4) = 200 Hz
 80025f8:	2104      	movs	r1, #4
 80025fa:	6878      	ldr	r0, [r7, #4]
 80025fc:	f7ff fa73 	bl	8001ae6 <_ZN7MPU60507setRateEh>

            //DEBUG_PRINTLN(F("Setting external frame sync to TEMP_OUT_L[0]..."));
            setExternalFrameSync(MPU6050_EXT_SYNC_TEMP_OUT_L);
 8002600:	2101      	movs	r1, #1
 8002602:	6878      	ldr	r0, [r7, #4]
 8002604:	f7ff fa80 	bl	8001b08 <_ZN7MPU605020setExternalFrameSyncEh>

            //DEBUG_PRINTLN(F("Setting DLPF bandwidth to 42Hz..."));
            setDLPFMode(MPU6050_DLPF_BW_42);
 8002608:	2103      	movs	r1, #3
 800260a:	6878      	ldr	r0, [r7, #4]
 800260c:	f7ff fa8f 	bl	8001b2e <_ZN7MPU605011setDLPFModeEh>

            //DEBUG_PRINTLN(F("Setting gyro sensitivity to +/- 2000 deg/sec..."));
            setFullScaleGyroRange(MPU6050_GYRO_FS_2000);
 8002610:	2103      	movs	r1, #3
 8002612:	6878      	ldr	r0, [r7, #4]
 8002614:	f7ff fa9e 	bl	8001b54 <_ZN7MPU605021setFullScaleGyroRangeEh>

            //DEBUG_PRINTLN(F("Setting DMP programm start address"));
            //write start address MSB into register
            setDMPConfig1(0x03);
 8002618:	2103      	movs	r1, #3
 800261a:	6878      	ldr	r0, [r7, #4]
 800261c:	f7ff ff66 	bl	80024ec <_ZN7MPU605013setDMPConfig1Eh>
            //write start address LSB into register
            setDMPConfig2(0x00);
 8002620:	2100      	movs	r1, #0
 8002622:	6878      	ldr	r0, [r7, #4]
 8002624:	f7ff ff73 	bl	800250e <_ZN7MPU605013setDMPConfig2Eh>

            //DEBUG_PRINTLN(F("Clearing OTP Bank flag..."));
            setOTPBankValid(false);
 8002628:	2100      	movs	r1, #0
 800262a:	6878      	ldr	r0, [r7, #4]
 800262c:	f7ff fbe2 	bl	8001df4 <_ZN7MPU605015setOTPBankValidEb>

            //DEBUG_PRINTLN(F("Setting X/Y/Z gyro offset TCs to previous values..."));
            setXGyroOffsetTC(xgOffsetTC);
 8002630:	f997 30a3 	ldrsb.w	r3, [r7, #163]	; 0xa3
 8002634:	4619      	mov	r1, r3
 8002636:	6878      	ldr	r0, [r7, #4]
 8002638:	f7ff fc02 	bl	8001e40 <_ZN7MPU605016setXGyroOffsetTCEa>
            setYGyroOffsetTC(ygOffsetTC);
 800263c:	f997 30a2 	ldrsb.w	r3, [r7, #162]	; 0xa2
 8002640:	4619      	mov	r1, r3
 8002642:	6878      	ldr	r0, [r7, #4]
 8002644:	f7ff fc24 	bl	8001e90 <_ZN7MPU605016setYGyroOffsetTCEa>
            setZGyroOffsetTC(zgOffsetTC);
 8002648:	f997 30a1 	ldrsb.w	r3, [r7, #161]	; 0xa1
 800264c:	4619      	mov	r1, r3
 800264e:	6878      	ldr	r0, [r7, #4]
 8002650:	f7ff fc46 	bl	8001ee0 <_ZN7MPU605016setZGyroOffsetTCEa>
            //setYGyroOffset(0);
            //setZGyroOffset(0);

            //DEBUG_PRINTLN(F("Writing final memory update 1/7 (function unknown)..."));
            uint8_t dmpUpdate[16], j;
            uint16_t pos = 0;
 8002654:	2300      	movs	r3, #0
 8002656:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
            for (j = 0; j < 4 || j < dmpUpdate[2] + 3; j++, pos++) dmpUpdate[j] = pgm_read_byte(&dmpUpdates[pos]);
 800265a:	2300      	movs	r3, #0
 800265c:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
 8002660:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8002664:	2b03      	cmp	r3, #3
 8002666:	d906      	bls.n	8002676 <_ZN7MPU605013dmpInitializeEv+0x146>
 8002668:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 800266c:	1c9a      	adds	r2, r3, #2
 800266e:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8002672:	429a      	cmp	r2, r3
 8002674:	db15      	blt.n	80026a2 <_ZN7MPU605013dmpInitializeEv+0x172>
 8002676:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 800267a:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 800267e:	49a2      	ldr	r1, [pc, #648]	; (8002908 <_ZN7MPU605013dmpInitializeEv+0x3d8>)
 8002680:	5c8a      	ldrb	r2, [r1, r2]
 8002682:	f107 01a8 	add.w	r1, r7, #168	; 0xa8
 8002686:	440b      	add	r3, r1
 8002688:	f803 2c1c 	strb.w	r2, [r3, #-28]
 800268c:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8002690:	3301      	adds	r3, #1
 8002692:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
 8002696:	f8b7 30a4 	ldrh.w	r3, [r7, #164]	; 0xa4
 800269a:	3301      	adds	r3, #1
 800269c:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
 80026a0:	e7de      	b.n	8002660 <_ZN7MPU605013dmpInitializeEv+0x130>
            writeMemoryBlock(dmpUpdate + 3, dmpUpdate[2], dmpUpdate[0], dmpUpdate[1]);
 80026a2:	f107 018c 	add.w	r1, r7, #140	; 0x8c
 80026a6:	3103      	adds	r1, #3
 80026a8:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 80026ac:	b29a      	uxth	r2, r3
 80026ae:	f897 008c 	ldrb.w	r0, [r7, #140]	; 0x8c
 80026b2:	f897 308d 	ldrb.w	r3, [r7, #141]	; 0x8d
 80026b6:	2400      	movs	r4, #0
 80026b8:	9402      	str	r4, [sp, #8]
 80026ba:	2401      	movs	r4, #1
 80026bc:	9401      	str	r4, [sp, #4]
 80026be:	9300      	str	r3, [sp, #0]
 80026c0:	4603      	mov	r3, r0
 80026c2:	6878      	ldr	r0, [r7, #4]
 80026c4:	f7ff fd46 	bl	8002154 <_ZN7MPU605016writeMemoryBlockEPKhthhbb>

            //DEBUG_PRINTLN(F("Writing final memory update 2/7 (function unknown)..."));
            for (j = 0; j < 4 || j < dmpUpdate[2] + 3; j++, pos++) dmpUpdate[j] = pgm_read_byte(&dmpUpdates[pos]);
 80026c8:	2300      	movs	r3, #0
 80026ca:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
 80026ce:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 80026d2:	2b03      	cmp	r3, #3
 80026d4:	d906      	bls.n	80026e4 <_ZN7MPU605013dmpInitializeEv+0x1b4>
 80026d6:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 80026da:	1c9a      	adds	r2, r3, #2
 80026dc:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 80026e0:	429a      	cmp	r2, r3
 80026e2:	db15      	blt.n	8002710 <_ZN7MPU605013dmpInitializeEv+0x1e0>
 80026e4:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 80026e8:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 80026ec:	4986      	ldr	r1, [pc, #536]	; (8002908 <_ZN7MPU605013dmpInitializeEv+0x3d8>)
 80026ee:	5c8a      	ldrb	r2, [r1, r2]
 80026f0:	f107 01a8 	add.w	r1, r7, #168	; 0xa8
 80026f4:	440b      	add	r3, r1
 80026f6:	f803 2c1c 	strb.w	r2, [r3, #-28]
 80026fa:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 80026fe:	3301      	adds	r3, #1
 8002700:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
 8002704:	f8b7 30a4 	ldrh.w	r3, [r7, #164]	; 0xa4
 8002708:	3301      	adds	r3, #1
 800270a:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
 800270e:	e7de      	b.n	80026ce <_ZN7MPU605013dmpInitializeEv+0x19e>
            writeMemoryBlock(dmpUpdate + 3, dmpUpdate[2], dmpUpdate[0], dmpUpdate[1]);
 8002710:	f107 018c 	add.w	r1, r7, #140	; 0x8c
 8002714:	3103      	adds	r1, #3
 8002716:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 800271a:	b29a      	uxth	r2, r3
 800271c:	f897 008c 	ldrb.w	r0, [r7, #140]	; 0x8c
 8002720:	f897 308d 	ldrb.w	r3, [r7, #141]	; 0x8d
 8002724:	2400      	movs	r4, #0
 8002726:	9402      	str	r4, [sp, #8]
 8002728:	2401      	movs	r4, #1
 800272a:	9401      	str	r4, [sp, #4]
 800272c:	9300      	str	r3, [sp, #0]
 800272e:	4603      	mov	r3, r0
 8002730:	6878      	ldr	r0, [r7, #4]
 8002732:	f7ff fd0f 	bl	8002154 <_ZN7MPU605016writeMemoryBlockEPKhthhbb>

            //DEBUG_PRINTLN(F("Resetting FIFO..."));
            resetFIFO();
 8002736:	6878      	ldr	r0, [r7, #4]
 8002738:	f7ff fad8 	bl	8001cec <_ZN7MPU60509resetFIFOEv>

            //DEBUG_PRINTLN(F("Reading FIFO count..."));
            uint16_t fifoCount = getFIFOCount();
 800273c:	6878      	ldr	r0, [r7, #4]
 800273e:	f7ff fb26 	bl	8001d8e <_ZN7MPU605012getFIFOCountEv>
 8002742:	4603      	mov	r3, r0
 8002744:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
            uint8_t fifoBuffer[128];

            //DEBUG_PRINT(F("Current FIFO count="));
            //DEBUG_PRINTLN(fifoCount);
            getFIFOBytes(fifoBuffer, fifoCount);
 8002748:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 800274c:	b2da      	uxtb	r2, r3
 800274e:	f107 030c 	add.w	r3, r7, #12
 8002752:	4619      	mov	r1, r3
 8002754:	6878      	ldr	r0, [r7, #4]
 8002756:	f7ff fb34 	bl	8001dc2 <_ZN7MPU605012getFIFOBytesEPhh>

            //DEBUG_PRINTLN(F("Setting motion detection threshold to 2..."));
            setMotionDetectionThreshold(2);
 800275a:	2102      	movs	r1, #2
 800275c:	6878      	ldr	r0, [r7, #4]
 800275e:	f7ff fa1f 	bl	8001ba0 <_ZN7MPU605027setMotionDetectionThresholdEh>

            //DEBUG_PRINTLN(F("Setting zero-motion detection threshold to 156..."));
            setZeroMotionDetectionThreshold(156);
 8002762:	219c      	movs	r1, #156	; 0x9c
 8002764:	6878      	ldr	r0, [r7, #4]
 8002766:	f7ff fa3d 	bl	8001be4 <_ZN7MPU605031setZeroMotionDetectionThresholdEh>

            //DEBUG_PRINTLN(F("Setting motion detection duration to 80..."));
            setMotionDetectionDuration(80);
 800276a:	2150      	movs	r1, #80	; 0x50
 800276c:	6878      	ldr	r0, [r7, #4]
 800276e:	f7ff fa28 	bl	8001bc2 <_ZN7MPU605026setMotionDetectionDurationEh>

            //DEBUG_PRINTLN(F("Setting zero-motion detection duration to 0..."));
            setZeroMotionDetectionDuration(0);
 8002772:	2100      	movs	r1, #0
 8002774:	6878      	ldr	r0, [r7, #4]
 8002776:	f7ff fa46 	bl	8001c06 <_ZN7MPU605030setZeroMotionDetectionDurationEh>

            //DEBUG_PRINTLN(F("Resetting FIFO..."));
            resetFIFO();
 800277a:	6878      	ldr	r0, [r7, #4]
 800277c:	f7ff fab6 	bl	8001cec <_ZN7MPU60509resetFIFOEv>

            //DEBUG_PRINTLN(F("Enabling FIFO..."));
            setFIFOEnabled(true);
 8002780:	2101      	movs	r1, #1
 8002782:	6878      	ldr	r0, [r7, #4]
 8002784:	f7ff fa90 	bl	8001ca8 <_ZN7MPU605014setFIFOEnabledEb>

            //DEBUG_PRINTLN(F("Enabling DMP..."));
            setDMPEnabled(true);
 8002788:	2101      	movs	r1, #1
 800278a:	6878      	ldr	r0, [r7, #4]
 800278c:	f7ff fc21 	bl	8001fd2 <_ZN7MPU605013setDMPEnabledEb>

            //DEBUG_PRINTLN(F("Resetting DMP..."));
            resetDMP();
 8002790:	6878      	ldr	r0, [r7, #4]
 8002792:	f7ff fc2f 	bl	8001ff4 <_ZN7MPU60508resetDMPEv>

            //DEBUG_PRINTLN(F("Writing final memory update 3/7 (function unknown)..."));
            for (j = 0; j < 4 || j < dmpUpdate[2] + 3; j++, pos++) dmpUpdate[j] = pgm_read_byte(&dmpUpdates[pos]);
 8002796:	2300      	movs	r3, #0
 8002798:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
 800279c:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 80027a0:	2b03      	cmp	r3, #3
 80027a2:	d906      	bls.n	80027b2 <_ZN7MPU605013dmpInitializeEv+0x282>
 80027a4:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 80027a8:	1c9a      	adds	r2, r3, #2
 80027aa:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 80027ae:	429a      	cmp	r2, r3
 80027b0:	db15      	blt.n	80027de <_ZN7MPU605013dmpInitializeEv+0x2ae>
 80027b2:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 80027b6:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 80027ba:	4953      	ldr	r1, [pc, #332]	; (8002908 <_ZN7MPU605013dmpInitializeEv+0x3d8>)
 80027bc:	5c8a      	ldrb	r2, [r1, r2]
 80027be:	f107 01a8 	add.w	r1, r7, #168	; 0xa8
 80027c2:	440b      	add	r3, r1
 80027c4:	f803 2c1c 	strb.w	r2, [r3, #-28]
 80027c8:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 80027cc:	3301      	adds	r3, #1
 80027ce:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
 80027d2:	f8b7 30a4 	ldrh.w	r3, [r7, #164]	; 0xa4
 80027d6:	3301      	adds	r3, #1
 80027d8:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
 80027dc:	e7de      	b.n	800279c <_ZN7MPU605013dmpInitializeEv+0x26c>
            writeMemoryBlock(dmpUpdate + 3, dmpUpdate[2], dmpUpdate[0], dmpUpdate[1]);
 80027de:	f107 018c 	add.w	r1, r7, #140	; 0x8c
 80027e2:	3103      	adds	r1, #3
 80027e4:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 80027e8:	b29a      	uxth	r2, r3
 80027ea:	f897 008c 	ldrb.w	r0, [r7, #140]	; 0x8c
 80027ee:	f897 308d 	ldrb.w	r3, [r7, #141]	; 0x8d
 80027f2:	2400      	movs	r4, #0
 80027f4:	9402      	str	r4, [sp, #8]
 80027f6:	2401      	movs	r4, #1
 80027f8:	9401      	str	r4, [sp, #4]
 80027fa:	9300      	str	r3, [sp, #0]
 80027fc:	4603      	mov	r3, r0
 80027fe:	6878      	ldr	r0, [r7, #4]
 8002800:	f7ff fca8 	bl	8002154 <_ZN7MPU605016writeMemoryBlockEPKhthhbb>

            //DEBUG_PRINTLN(F("Writing final memory update 4/7 (function unknown)..."));
            for (j = 0; j < 4 || j < dmpUpdate[2] + 3; j++, pos++) dmpUpdate[j] = pgm_read_byte(&dmpUpdates[pos]);
 8002804:	2300      	movs	r3, #0
 8002806:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
 800280a:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 800280e:	2b03      	cmp	r3, #3
 8002810:	d906      	bls.n	8002820 <_ZN7MPU605013dmpInitializeEv+0x2f0>
 8002812:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 8002816:	1c9a      	adds	r2, r3, #2
 8002818:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 800281c:	429a      	cmp	r2, r3
 800281e:	db15      	blt.n	800284c <_ZN7MPU605013dmpInitializeEv+0x31c>
 8002820:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 8002824:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8002828:	4937      	ldr	r1, [pc, #220]	; (8002908 <_ZN7MPU605013dmpInitializeEv+0x3d8>)
 800282a:	5c8a      	ldrb	r2, [r1, r2]
 800282c:	f107 01a8 	add.w	r1, r7, #168	; 0xa8
 8002830:	440b      	add	r3, r1
 8002832:	f803 2c1c 	strb.w	r2, [r3, #-28]
 8002836:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 800283a:	3301      	adds	r3, #1
 800283c:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
 8002840:	f8b7 30a4 	ldrh.w	r3, [r7, #164]	; 0xa4
 8002844:	3301      	adds	r3, #1
 8002846:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
 800284a:	e7de      	b.n	800280a <_ZN7MPU605013dmpInitializeEv+0x2da>
            writeMemoryBlock(dmpUpdate + 3, dmpUpdate[2], dmpUpdate[0], dmpUpdate[1]);
 800284c:	f107 018c 	add.w	r1, r7, #140	; 0x8c
 8002850:	3103      	adds	r1, #3
 8002852:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 8002856:	b29a      	uxth	r2, r3
 8002858:	f897 008c 	ldrb.w	r0, [r7, #140]	; 0x8c
 800285c:	f897 308d 	ldrb.w	r3, [r7, #141]	; 0x8d
 8002860:	2400      	movs	r4, #0
 8002862:	9402      	str	r4, [sp, #8]
 8002864:	2401      	movs	r4, #1
 8002866:	9401      	str	r4, [sp, #4]
 8002868:	9300      	str	r3, [sp, #0]
 800286a:	4603      	mov	r3, r0
 800286c:	6878      	ldr	r0, [r7, #4]
 800286e:	f7ff fc71 	bl	8002154 <_ZN7MPU605016writeMemoryBlockEPKhthhbb>

            //DEBUG_PRINTLN(F("Writing final memory update 5/7 (function unknown)..."));
            for (j = 0; j < 4 || j < dmpUpdate[2] + 3; j++, pos++) dmpUpdate[j] = pgm_read_byte(&dmpUpdates[pos]);
 8002872:	2300      	movs	r3, #0
 8002874:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
 8002878:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 800287c:	2b03      	cmp	r3, #3
 800287e:	d906      	bls.n	800288e <_ZN7MPU605013dmpInitializeEv+0x35e>
 8002880:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 8002884:	1c9a      	adds	r2, r3, #2
 8002886:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 800288a:	429a      	cmp	r2, r3
 800288c:	db15      	blt.n	80028ba <_ZN7MPU605013dmpInitializeEv+0x38a>
 800288e:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 8002892:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8002896:	491c      	ldr	r1, [pc, #112]	; (8002908 <_ZN7MPU605013dmpInitializeEv+0x3d8>)
 8002898:	5c8a      	ldrb	r2, [r1, r2]
 800289a:	f107 01a8 	add.w	r1, r7, #168	; 0xa8
 800289e:	440b      	add	r3, r1
 80028a0:	f803 2c1c 	strb.w	r2, [r3, #-28]
 80028a4:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 80028a8:	3301      	adds	r3, #1
 80028aa:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
 80028ae:	f8b7 30a4 	ldrh.w	r3, [r7, #164]	; 0xa4
 80028b2:	3301      	adds	r3, #1
 80028b4:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
 80028b8:	e7de      	b.n	8002878 <_ZN7MPU605013dmpInitializeEv+0x348>
            writeMemoryBlock(dmpUpdate + 3, dmpUpdate[2], dmpUpdate[0], dmpUpdate[1]);
 80028ba:	f107 018c 	add.w	r1, r7, #140	; 0x8c
 80028be:	3103      	adds	r1, #3
 80028c0:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 80028c4:	b29a      	uxth	r2, r3
 80028c6:	f897 008c 	ldrb.w	r0, [r7, #140]	; 0x8c
 80028ca:	f897 308d 	ldrb.w	r3, [r7, #141]	; 0x8d
 80028ce:	2400      	movs	r4, #0
 80028d0:	9402      	str	r4, [sp, #8]
 80028d2:	2401      	movs	r4, #1
 80028d4:	9401      	str	r4, [sp, #4]
 80028d6:	9300      	str	r3, [sp, #0]
 80028d8:	4603      	mov	r3, r0
 80028da:	6878      	ldr	r0, [r7, #4]
 80028dc:	f7ff fc3a 	bl	8002154 <_ZN7MPU605016writeMemoryBlockEPKhthhbb>

            //DEBUG_PRINTLN(F("Waiting for FIFO count > 2..."));
            while ((fifoCount = getFIFOCount()) < 3);
 80028e0:	6878      	ldr	r0, [r7, #4]
 80028e2:	f7ff fa54 	bl	8001d8e <_ZN7MPU605012getFIFOCountEv>
 80028e6:	4603      	mov	r3, r0
 80028e8:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
 80028ec:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 80028f0:	2b02      	cmp	r3, #2
 80028f2:	bf94      	ite	ls
 80028f4:	2301      	movls	r3, #1
 80028f6:	2300      	movhi	r3, #0
 80028f8:	b2db      	uxtb	r3, r3
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d006      	beq.n	800290c <_ZN7MPU605013dmpInitializeEv+0x3dc>
 80028fe:	e7ef      	b.n	80028e0 <_ZN7MPU605013dmpInitializeEv+0x3b0>
 8002900:	0800e8f4 	.word	0x0800e8f4
 8002904:	0800f080 	.word	0x0800f080
 8002908:	0800f140 	.word	0x0800f140

            //DEBUG_PRINT(F("Current FIFO count="));
            //DEBUG_PRINTLN(fifoCount);
            //DEBUG_PRINTLN(F("Reading FIFO data..."));
            getFIFOBytes(fifoBuffer, fifoCount);
 800290c:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8002910:	b2da      	uxtb	r2, r3
 8002912:	f107 030c 	add.w	r3, r7, #12
 8002916:	4619      	mov	r1, r3
 8002918:	6878      	ldr	r0, [r7, #4]
 800291a:	f7ff fa52 	bl	8001dc2 <_ZN7MPU605012getFIFOBytesEPhh>

            //DEBUG_PRINT(F("Current interrupt status="));
            //DEBUG_PRINTLNF(getIntStatus(), HEX);

            //DEBUG_PRINTLN(F("Reading final memory update 6/7 (function unknown)..."));
            for (j = 0; j < 4 || j < dmpUpdate[2] + 3; j++, pos++) dmpUpdate[j] = pgm_read_byte(&dmpUpdates[pos]);
 800291e:	2300      	movs	r3, #0
 8002920:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
 8002924:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8002928:	2b03      	cmp	r3, #3
 800292a:	d906      	bls.n	800293a <_ZN7MPU605013dmpInitializeEv+0x40a>
 800292c:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 8002930:	1c9a      	adds	r2, r3, #2
 8002932:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8002936:	429a      	cmp	r2, r3
 8002938:	db15      	blt.n	8002966 <_ZN7MPU605013dmpInitializeEv+0x436>
 800293a:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 800293e:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8002942:	4943      	ldr	r1, [pc, #268]	; (8002a50 <_ZN7MPU605013dmpInitializeEv+0x520>)
 8002944:	5c8a      	ldrb	r2, [r1, r2]
 8002946:	f107 01a8 	add.w	r1, r7, #168	; 0xa8
 800294a:	440b      	add	r3, r1
 800294c:	f803 2c1c 	strb.w	r2, [r3, #-28]
 8002950:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8002954:	3301      	adds	r3, #1
 8002956:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
 800295a:	f8b7 30a4 	ldrh.w	r3, [r7, #164]	; 0xa4
 800295e:	3301      	adds	r3, #1
 8002960:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
 8002964:	e7de      	b.n	8002924 <_ZN7MPU605013dmpInitializeEv+0x3f4>
            readMemoryBlock(dmpUpdate + 3, dmpUpdate[2], dmpUpdate[0], dmpUpdate[1]);
 8002966:	f107 018c 	add.w	r1, r7, #140	; 0x8c
 800296a:	3103      	adds	r1, #3
 800296c:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 8002970:	b29a      	uxth	r2, r3
 8002972:	f897 008c 	ldrb.w	r0, [r7, #140]	; 0x8c
 8002976:	f897 308d 	ldrb.w	r3, [r7, #141]	; 0x8d
 800297a:	9300      	str	r3, [sp, #0]
 800297c:	4603      	mov	r3, r0
 800297e:	6878      	ldr	r0, [r7, #4]
 8002980:	f7ff fb82 	bl	8002088 <_ZN7MPU605015readMemoryBlockEPhthh>

            //DEBUG_PRINTLN(F("Waiting for FIFO count > 2..."));
            while ((fifoCount = getFIFOCount()) < 3);
 8002984:	6878      	ldr	r0, [r7, #4]
 8002986:	f7ff fa02 	bl	8001d8e <_ZN7MPU605012getFIFOCountEv>
 800298a:	4603      	mov	r3, r0
 800298c:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
 8002990:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8002994:	2b02      	cmp	r3, #2
 8002996:	bf94      	ite	ls
 8002998:	2301      	movls	r3, #1
 800299a:	2300      	movhi	r3, #0
 800299c:	b2db      	uxtb	r3, r3
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d000      	beq.n	80029a4 <_ZN7MPU605013dmpInitializeEv+0x474>
 80029a2:	e7ef      	b.n	8002984 <_ZN7MPU605013dmpInitializeEv+0x454>

            //DEBUG_PRINT(F("Current FIFO count="));
            //DEBUG_PRINTLN(fifoCount);

            //DEBUG_PRINTLN(F("Reading FIFO data..."));
            getFIFOBytes(fifoBuffer, fifoCount);
 80029a4:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 80029a8:	b2da      	uxtb	r2, r3
 80029aa:	f107 030c 	add.w	r3, r7, #12
 80029ae:	4619      	mov	r1, r3
 80029b0:	6878      	ldr	r0, [r7, #4]
 80029b2:	f7ff fa06 	bl	8001dc2 <_ZN7MPU605012getFIFOBytesEPhh>

            //DEBUG_PRINT(F("Current interrupt status="));
            //DEBUG_PRINTLNF(getIntStatus(), HEX);

            //DEBUG_PRINTLN(F("Writing final memory update 7/7 (function unknown)..."));
            for (j = 0; j < 4 || j < dmpUpdate[2] + 3; j++, pos++) dmpUpdate[j] = pgm_read_byte(&dmpUpdates[pos]);
 80029b6:	2300      	movs	r3, #0
 80029b8:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
 80029bc:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 80029c0:	2b03      	cmp	r3, #3
 80029c2:	d906      	bls.n	80029d2 <_ZN7MPU605013dmpInitializeEv+0x4a2>
 80029c4:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 80029c8:	1c9a      	adds	r2, r3, #2
 80029ca:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 80029ce:	429a      	cmp	r2, r3
 80029d0:	db15      	blt.n	80029fe <_ZN7MPU605013dmpInitializeEv+0x4ce>
 80029d2:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 80029d6:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 80029da:	491d      	ldr	r1, [pc, #116]	; (8002a50 <_ZN7MPU605013dmpInitializeEv+0x520>)
 80029dc:	5c8a      	ldrb	r2, [r1, r2]
 80029de:	f107 01a8 	add.w	r1, r7, #168	; 0xa8
 80029e2:	440b      	add	r3, r1
 80029e4:	f803 2c1c 	strb.w	r2, [r3, #-28]
 80029e8:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 80029ec:	3301      	adds	r3, #1
 80029ee:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
 80029f2:	f8b7 30a4 	ldrh.w	r3, [r7, #164]	; 0xa4
 80029f6:	3301      	adds	r3, #1
 80029f8:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
 80029fc:	e7de      	b.n	80029bc <_ZN7MPU605013dmpInitializeEv+0x48c>
            writeMemoryBlock(dmpUpdate + 3, dmpUpdate[2], dmpUpdate[0], dmpUpdate[1]);
 80029fe:	f107 018c 	add.w	r1, r7, #140	; 0x8c
 8002a02:	3103      	adds	r1, #3
 8002a04:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 8002a08:	b29a      	uxth	r2, r3
 8002a0a:	f897 008c 	ldrb.w	r0, [r7, #140]	; 0x8c
 8002a0e:	f897 308d 	ldrb.w	r3, [r7, #141]	; 0x8d
 8002a12:	2400      	movs	r4, #0
 8002a14:	9402      	str	r4, [sp, #8]
 8002a16:	2401      	movs	r4, #1
 8002a18:	9401      	str	r4, [sp, #4]
 8002a1a:	9300      	str	r3, [sp, #0]
 8002a1c:	4603      	mov	r3, r0
 8002a1e:	6878      	ldr	r0, [r7, #4]
 8002a20:	f7ff fb98 	bl	8002154 <_ZN7MPU605016writeMemoryBlockEPKhthhbb>

            //DEBUG_PRINTLN(F("DMP is good to go! Finally."));

            //DEBUG_PRINTLN(F("Disabling DMP (you turn it on later)..."));
            setDMPEnabled(false);
 8002a24:	2100      	movs	r1, #0
 8002a26:	6878      	ldr	r0, [r7, #4]
 8002a28:	f7ff fad3 	bl	8001fd2 <_ZN7MPU605013setDMPEnabledEb>

            //DEBUG_PRINTLN(F("Setting up internal 42-byte (default) DMP packet buffer..."));
            dmpPacketSize = 42;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	222a      	movs	r2, #42	; 0x2a
 8002a30:	809a      	strh	r2, [r3, #4]
            /*if ((dmpPacketBuffer = (uint8_t *)malloc(42)) == 0) {
                return 3; // TODO: proper error code for no memory
            }*/

            //DEBUG_PRINTLN(F("Resetting FIFO and clearing INT status one last time..."));
            resetFIFO();
 8002a32:	6878      	ldr	r0, [r7, #4]
 8002a34:	f7ff f95a 	bl	8001cec <_ZN7MPU60509resetFIFOEv>
            getIntStatus();
 8002a38:	6878      	ldr	r0, [r7, #4]
 8002a3a:	f7ff f923 	bl	8001c84 <_ZN7MPU605012getIntStatusEv>
        }
    } else {
        //DEBUG_PRINTLN(F("ERROR! DMP code verification failed."));
        return 1; // main binary block loading failed
    }
    return 0; // success
 8002a3e:	2300      	movs	r3, #0
 8002a40:	e002      	b.n	8002a48 <_ZN7MPU605013dmpInitializeEv+0x518>
            return 2; // configuration block loading failed
 8002a42:	2302      	movs	r3, #2
 8002a44:	e000      	b.n	8002a48 <_ZN7MPU605013dmpInitializeEv+0x518>
        return 1; // main binary block loading failed
 8002a46:	2301      	movs	r3, #1
}
 8002a48:	4618      	mov	r0, r3
 8002a4a:	37ac      	adds	r7, #172	; 0xac
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	bd90      	pop	{r4, r7, pc}
 8002a50:	0800f140 	.word	0x0800f140

08002a54 <_Z16SBUS_RecieveBitsv>:
uint8_t SBUSNewPackage = false;



void SBUS_RecieveBits()
{
 8002a54:	b580      	push	{r7, lr}
 8002a56:	b082      	sub	sp, #8
 8002a58:	af00      	add	r7, sp, #0
  //collect bits:

  TIM4->CCR1 = (uint16_t)(fastPPM_MinTime + 500 + ((float)SBUS_Channels[2] / 2));
 8002a5a:	4b2c      	ldr	r3, [pc, #176]	; (8002b0c <_Z16SBUS_RecieveBitsv+0xb8>)
 8002a5c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002a60:	4618      	mov	r0, r3
 8002a62:	f7fe f959 	bl	8000d18 <__aeabi_i2f>
 8002a66:	4603      	mov	r3, r0
 8002a68:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	f7fe fa5b 	bl	8000f28 <__aeabi_fdiv>
 8002a72:	4603      	mov	r3, r0
 8002a74:	4926      	ldr	r1, [pc, #152]	; (8002b10 <_Z16SBUS_RecieveBitsv+0xbc>)
 8002a76:	4618      	mov	r0, r3
 8002a78:	f7fe f89a 	bl	8000bb0 <__addsf3>
 8002a7c:	4603      	mov	r3, r0
 8002a7e:	4618      	mov	r0, r3
 8002a80:	f7fe fba0 	bl	80011c4 <__aeabi_f2uiz>
 8002a84:	4603      	mov	r3, r0
 8002a86:	b29a      	uxth	r2, r3
 8002a88:	4b22      	ldr	r3, [pc, #136]	; (8002b14 <_Z16SBUS_RecieveBitsv+0xc0>)
 8002a8a:	635a      	str	r2, [r3, #52]	; 0x34
  SBUS_timerCount = TIM11->CNT + SBUS_StartTimeOffset;       //get current clock count register value + time offset
 8002a8c:	4b22      	ldr	r3, [pc, #136]	; (8002b18 <_Z16SBUS_RecieveBitsv+0xc4>)
 8002a8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a90:	b29b      	uxth	r3, r3
 8002a92:	3b05      	subs	r3, #5
 8002a94:	b29a      	uxth	r2, r3
 8002a96:	4b21      	ldr	r3, [pc, #132]	; (8002b1c <_Z16SBUS_RecieveBitsv+0xc8>)
 8002a98:	801a      	strh	r2, [r3, #0]
  SBUS_RxBitString[0] = true;
 8002a9a:	4b21      	ldr	r3, [pc, #132]	; (8002b20 <_Z16SBUS_RecieveBitsv+0xcc>)
 8002a9c:	2201      	movs	r2, #1
 8002a9e:	701a      	strb	r2, [r3, #0]
  //HAL_GPIO_TogglePin(ONBOARD_WRITE_3_GPIO_Port, ONBOARD_WRITE_3_Pin);   //debug Pin
  for (size_t i = 1; i < SBUS_NumberOfBits; i++)
 8002aa0:	2301      	movs	r3, #1
 8002aa2:	607b      	str	r3, [r7, #4]
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	2b8f      	cmp	r3, #143	; 0x8f
 8002aa8:	d829      	bhi.n	8002afe <_Z16SBUS_RecieveBitsv+0xaa>
  {
    ONBOARD_WRITE_3_GPIO_Port->BSRR = (uint32_t)ONBOARD_WRITE_3_Pin << 16U;
 8002aaa:	4b1e      	ldr	r3, [pc, #120]	; (8002b24 <_Z16SBUS_RecieveBitsv+0xd0>)
 8002aac:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002ab0:	619a      	str	r2, [r3, #24]
    SBUS_RxBitString[i] = ((ONBOARD_READ_IT_3_GPIO_Port->IDR & ONBOARD_READ_IT_3_Pin) != 0 ? true : false);     //if the pin is HIGH then the value is 1 else 0
 8002ab2:	4b1d      	ldr	r3, [pc, #116]	; (8002b28 <_Z16SBUS_RecieveBitsv+0xd4>)
 8002ab4:	691b      	ldr	r3, [r3, #16]
 8002ab6:	b2db      	uxtb	r3, r3
 8002ab8:	f003 0301 	and.w	r3, r3, #1
 8002abc:	b2d9      	uxtb	r1, r3
 8002abe:	4a18      	ldr	r2, [pc, #96]	; (8002b20 <_Z16SBUS_RecieveBitsv+0xcc>)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	4413      	add	r3, r2
 8002ac4:	460a      	mov	r2, r1
 8002ac6:	701a      	strb	r2, [r3, #0]
    ONBOARD_WRITE_3_GPIO_Port->BSRR = ONBOARD_WRITE_3_Pin;
 8002ac8:	4b16      	ldr	r3, [pc, #88]	; (8002b24 <_Z16SBUS_RecieveBitsv+0xd0>)
 8002aca:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002ace:	619a      	str	r2, [r3, #24]
    while ((TIM11->CNT - SBUS_timerCount) < 10)
 8002ad0:	4b11      	ldr	r3, [pc, #68]	; (8002b18 <_Z16SBUS_RecieveBitsv+0xc4>)
 8002ad2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ad4:	4a11      	ldr	r2, [pc, #68]	; (8002b1c <_Z16SBUS_RecieveBitsv+0xc8>)
 8002ad6:	8812      	ldrh	r2, [r2, #0]
 8002ad8:	1a9b      	subs	r3, r3, r2
 8002ada:	2b09      	cmp	r3, #9
 8002adc:	bf94      	ite	ls
 8002ade:	2301      	movls	r3, #1
 8002ae0:	2300      	movhi	r3, #0
 8002ae2:	b2db      	uxtb	r3, r3
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d000      	beq.n	8002aea <_Z16SBUS_RecieveBitsv+0x96>
 8002ae8:	e7f2      	b.n	8002ad0 <_Z16SBUS_RecieveBitsv+0x7c>
    {
    }
    SBUS_timerCount += 10;
 8002aea:	4b0c      	ldr	r3, [pc, #48]	; (8002b1c <_Z16SBUS_RecieveBitsv+0xc8>)
 8002aec:	881b      	ldrh	r3, [r3, #0]
 8002aee:	330a      	adds	r3, #10
 8002af0:	b29a      	uxth	r2, r3
 8002af2:	4b0a      	ldr	r3, [pc, #40]	; (8002b1c <_Z16SBUS_RecieveBitsv+0xc8>)
 8002af4:	801a      	strh	r2, [r3, #0]
  for (size_t i = 1; i < SBUS_NumberOfBits; i++)
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	3301      	adds	r3, #1
 8002afa:	607b      	str	r3, [r7, #4]
 8002afc:	e7d2      	b.n	8002aa4 <_Z16SBUS_RecieveBitsv+0x50>
  }
  SBUSNewPackage = true;
 8002afe:	4b0b      	ldr	r3, [pc, #44]	; (8002b2c <_Z16SBUS_RecieveBitsv+0xd8>)
 8002b00:	2201      	movs	r2, #1
 8002b02:	701a      	strb	r2, [r3, #0]
}
 8002b04:	bf00      	nop
 8002b06:	3708      	adds	r7, #8
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	bd80      	pop	{r7, pc}
 8002b0c:	200003d8 	.word	0x200003d8
 8002b10:	44bb8000 	.word	0x44bb8000
 8002b14:	40000800 	.word	0x40000800
 8002b18:	40014800 	.word	0x40014800
 8002b1c:	2000032a 	.word	0x2000032a
 8002b20:	2000032c 	.word	0x2000032c
 8002b24:	40020000 	.word	0x40020000
 8002b28:	40020800 	.word	0x40020800
 8002b2c:	200003e9 	.word	0x200003e9

08002b30 <_Z19SBUS_PostProcessingv>:

void SBUS_PostProcessing()
{
 8002b30:	b580      	push	{r7, lr}
 8002b32:	b088      	sub	sp, #32
 8002b34:	af00      	add	r7, sp, #0
    //check validity:

  SBUS_CorruptedPackage = false;                      //reset corrupted package flag
 8002b36:	4b88      	ldr	r3, [pc, #544]	; (8002d58 <_Z19SBUS_PostProcessingv+0x228>)
 8002b38:	2200      	movs	r2, #0
 8002b3a:	701a      	strb	r2, [r3, #0]
  for (size_t i = 0; i < SBUS_NumberOfBytes; i++)      //repeat for each byte
 8002b3c:	2300      	movs	r3, #0
 8002b3e:	61fb      	str	r3, [r7, #28]
 8002b40:	69fb      	ldr	r3, [r7, #28]
 8002b42:	2b0b      	cmp	r3, #11
 8002b44:	d85b      	bhi.n	8002bfe <_Z19SBUS_PostProcessingv+0xce>
  {
    if ((SBUS_RxBitString[0 + (i * SBUS_BitsPerByte)] == true) & (SBUS_RxBitString[10 + (i * SBUS_BitsPerByte)] == false) & (SBUS_RxBitString[11 + (i * SBUS_BitsPerByte)] == false))       //check start bit, 2 stop bit
 8002b46:	69fa      	ldr	r2, [r7, #28]
 8002b48:	4613      	mov	r3, r2
 8002b4a:	005b      	lsls	r3, r3, #1
 8002b4c:	4413      	add	r3, r2
 8002b4e:	009b      	lsls	r3, r3, #2
 8002b50:	461a      	mov	r2, r3
 8002b52:	4b82      	ldr	r3, [pc, #520]	; (8002d5c <_Z19SBUS_PostProcessingv+0x22c>)
 8002b54:	5c9b      	ldrb	r3, [r3, r2]
 8002b56:	2b01      	cmp	r3, #1
 8002b58:	bf0c      	ite	eq
 8002b5a:	2301      	moveq	r3, #1
 8002b5c:	2300      	movne	r3, #0
 8002b5e:	b2d9      	uxtb	r1, r3
 8002b60:	69fa      	ldr	r2, [r7, #28]
 8002b62:	4613      	mov	r3, r2
 8002b64:	005b      	lsls	r3, r3, #1
 8002b66:	4413      	add	r3, r2
 8002b68:	009b      	lsls	r3, r3, #2
 8002b6a:	330a      	adds	r3, #10
 8002b6c:	4a7b      	ldr	r2, [pc, #492]	; (8002d5c <_Z19SBUS_PostProcessingv+0x22c>)
 8002b6e:	5cd3      	ldrb	r3, [r2, r3]
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	bf0c      	ite	eq
 8002b74:	2301      	moveq	r3, #1
 8002b76:	2300      	movne	r3, #0
 8002b78:	b2db      	uxtb	r3, r3
 8002b7a:	400b      	ands	r3, r1
 8002b7c:	b2db      	uxtb	r3, r3
 8002b7e:	4619      	mov	r1, r3
 8002b80:	69fa      	ldr	r2, [r7, #28]
 8002b82:	4613      	mov	r3, r2
 8002b84:	005b      	lsls	r3, r3, #1
 8002b86:	4413      	add	r3, r2
 8002b88:	009b      	lsls	r3, r3, #2
 8002b8a:	330b      	adds	r3, #11
 8002b8c:	4a73      	ldr	r2, [pc, #460]	; (8002d5c <_Z19SBUS_PostProcessingv+0x22c>)
 8002b8e:	5cd3      	ldrb	r3, [r2, r3]
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	bf0c      	ite	eq
 8002b94:	2301      	moveq	r3, #1
 8002b96:	2300      	movne	r3, #0
 8002b98:	b2db      	uxtb	r3, r3
 8002b9a:	400b      	ands	r3, r1
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d027      	beq.n	8002bf0 <_Z19SBUS_PostProcessingv+0xc0>
    {
      uint8_t parityCheck = false;
 8002ba0:	2300      	movs	r3, #0
 8002ba2:	76fb      	strb	r3, [r7, #27]
      for (size_t x = 0; x < 8; x++)                                              //generate parity from 8 bits
 8002ba4:	2300      	movs	r3, #0
 8002ba6:	617b      	str	r3, [r7, #20]
 8002ba8:	697b      	ldr	r3, [r7, #20]
 8002baa:	2b07      	cmp	r3, #7
 8002bac:	d811      	bhi.n	8002bd2 <_Z19SBUS_PostProcessingv+0xa2>
      {
        parityCheck ^= SBUS_RxBitString[1 + x + (i * SBUS_BitsPerByte)];
 8002bae:	69fa      	ldr	r2, [r7, #28]
 8002bb0:	4613      	mov	r3, r2
 8002bb2:	005b      	lsls	r3, r3, #1
 8002bb4:	4413      	add	r3, r2
 8002bb6:	009b      	lsls	r3, r3, #2
 8002bb8:	461a      	mov	r2, r3
 8002bba:	697b      	ldr	r3, [r7, #20]
 8002bbc:	4413      	add	r3, r2
 8002bbe:	3301      	adds	r3, #1
 8002bc0:	4a66      	ldr	r2, [pc, #408]	; (8002d5c <_Z19SBUS_PostProcessingv+0x22c>)
 8002bc2:	5cd2      	ldrb	r2, [r2, r3]
 8002bc4:	7efb      	ldrb	r3, [r7, #27]
 8002bc6:	4053      	eors	r3, r2
 8002bc8:	76fb      	strb	r3, [r7, #27]
      for (size_t x = 0; x < 8; x++)                                              //generate parity from 8 bits
 8002bca:	697b      	ldr	r3, [r7, #20]
 8002bcc:	3301      	adds	r3, #1
 8002bce:	617b      	str	r3, [r7, #20]
 8002bd0:	e7ea      	b.n	8002ba8 <_Z19SBUS_PostProcessingv+0x78>
      }
      if (parityCheck == SBUS_RxBitString[9 + (i * SBUS_BitsPerByte)])            //if parity fails set corrupted flag
 8002bd2:	69fa      	ldr	r2, [r7, #28]
 8002bd4:	4613      	mov	r3, r2
 8002bd6:	005b      	lsls	r3, r3, #1
 8002bd8:	4413      	add	r3, r2
 8002bda:	009b      	lsls	r3, r3, #2
 8002bdc:	3309      	adds	r3, #9
 8002bde:	4a5f      	ldr	r2, [pc, #380]	; (8002d5c <_Z19SBUS_PostProcessingv+0x22c>)
 8002be0:	5cd3      	ldrb	r3, [r2, r3]
 8002be2:	7efa      	ldrb	r2, [r7, #27]
 8002be4:	429a      	cmp	r2, r3
 8002be6:	d106      	bne.n	8002bf6 <_Z19SBUS_PostProcessingv+0xc6>
      {
        SBUS_CorruptedPackage = true;
 8002be8:	4b5b      	ldr	r3, [pc, #364]	; (8002d58 <_Z19SBUS_PostProcessingv+0x228>)
 8002bea:	2201      	movs	r2, #1
 8002bec:	701a      	strb	r2, [r3, #0]
 8002bee:	e002      	b.n	8002bf6 <_Z19SBUS_PostProcessingv+0xc6>
      }
    }
    else                                                                            //if start or stop bits fail set corrupted flag
    {
      SBUS_CorruptedPackage = true;
 8002bf0:	4b59      	ldr	r3, [pc, #356]	; (8002d58 <_Z19SBUS_PostProcessingv+0x228>)
 8002bf2:	2201      	movs	r2, #1
 8002bf4:	701a      	strb	r2, [r3, #0]
  for (size_t i = 0; i < SBUS_NumberOfBytes; i++)      //repeat for each byte
 8002bf6:	69fb      	ldr	r3, [r7, #28]
 8002bf8:	3301      	adds	r3, #1
 8002bfa:	61fb      	str	r3, [r7, #28]
 8002bfc:	e7a0      	b.n	8002b40 <_Z19SBUS_PostProcessingv+0x10>
    }
  }
  SBUS_Bytes[0] = 0;
 8002bfe:	4b58      	ldr	r3, [pc, #352]	; (8002d60 <_Z19SBUS_PostProcessingv+0x230>)
 8002c00:	2200      	movs	r2, #0
 8002c02:	701a      	strb	r2, [r3, #0]
  for (size_t i = 0; i < 8; i++)
 8002c04:	2300      	movs	r3, #0
 8002c06:	613b      	str	r3, [r7, #16]
 8002c08:	693b      	ldr	r3, [r7, #16]
 8002c0a:	2b07      	cmp	r3, #7
 8002c0c:	d816      	bhi.n	8002c3c <_Z19SBUS_PostProcessingv+0x10c>
  {
    SBUS_Bytes[0] |= SBUS_RxBitString[1 + i] << (7 - i);
 8002c0e:	4b54      	ldr	r3, [pc, #336]	; (8002d60 <_Z19SBUS_PostProcessingv+0x230>)
 8002c10:	781b      	ldrb	r3, [r3, #0]
 8002c12:	b25a      	sxtb	r2, r3
 8002c14:	693b      	ldr	r3, [r7, #16]
 8002c16:	3301      	adds	r3, #1
 8002c18:	4950      	ldr	r1, [pc, #320]	; (8002d5c <_Z19SBUS_PostProcessingv+0x22c>)
 8002c1a:	5ccb      	ldrb	r3, [r1, r3]
 8002c1c:	4619      	mov	r1, r3
 8002c1e:	693b      	ldr	r3, [r7, #16]
 8002c20:	f1c3 0307 	rsb	r3, r3, #7
 8002c24:	fa01 f303 	lsl.w	r3, r1, r3
 8002c28:	b25b      	sxtb	r3, r3
 8002c2a:	4313      	orrs	r3, r2
 8002c2c:	b25b      	sxtb	r3, r3
 8002c2e:	b2da      	uxtb	r2, r3
 8002c30:	4b4b      	ldr	r3, [pc, #300]	; (8002d60 <_Z19SBUS_PostProcessingv+0x230>)
 8002c32:	701a      	strb	r2, [r3, #0]
  for (size_t i = 0; i < 8; i++)
 8002c34:	693b      	ldr	r3, [r7, #16]
 8002c36:	3301      	adds	r3, #1
 8002c38:	613b      	str	r3, [r7, #16]
 8002c3a:	e7e5      	b.n	8002c08 <_Z19SBUS_PostProcessingv+0xd8>
  }
  if (SBUS_Bytes[0] != 0x0FU)
 8002c3c:	4b48      	ldr	r3, [pc, #288]	; (8002d60 <_Z19SBUS_PostProcessingv+0x230>)
 8002c3e:	781b      	ldrb	r3, [r3, #0]
 8002c40:	2b0f      	cmp	r3, #15
 8002c42:	d002      	beq.n	8002c4a <_Z19SBUS_PostProcessingv+0x11a>
  {
    SBUS_CorruptedPackage = true;
 8002c44:	4b44      	ldr	r3, [pc, #272]	; (8002d58 <_Z19SBUS_PostProcessingv+0x228>)
 8002c46:	2201      	movs	r2, #1
 8002c48:	701a      	strb	r2, [r3, #0]
  
  

  //assemble channels:

  if (SBUS_CorruptedPackage == false)
 8002c4a:	4b43      	ldr	r3, [pc, #268]	; (8002d58 <_Z19SBUS_PostProcessingv+0x228>)
 8002c4c:	781b      	ldrb	r3, [r3, #0]
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d17a      	bne.n	8002d48 <_Z19SBUS_PostProcessingv+0x218>
  {
    uint8_t byteNumber = 0;         //0 to 21
 8002c52:	2300      	movs	r3, #0
 8002c54:	73fb      	strb	r3, [r7, #15]
    uint8_t bitNumber = 0;          //0(LSB) to 7/(MSB)
 8002c56:	2300      	movs	r3, #0
 8002c58:	73bb      	strb	r3, [r7, #14]
    for (size_t i = 0; i < SBUS_NumberOfChannels; i++)
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	60bb      	str	r3, [r7, #8]
 8002c5e:	68bb      	ldr	r3, [r7, #8]
 8002c60:	2b07      	cmp	r3, #7
 8002c62:	d871      	bhi.n	8002d48 <_Z19SBUS_PostProcessingv+0x218>
    {
      uint8_t bitInChannel = 0;   //0(LSB) to 10(MSB)
 8002c64:	2300      	movs	r3, #0
 8002c66:	71fb      	strb	r3, [r7, #7]
      SBUS_TempChannels[i] = 0;
 8002c68:	4a3e      	ldr	r2, [pc, #248]	; (8002d64 <_Z19SBUS_PostProcessingv+0x234>)
 8002c6a:	68bb      	ldr	r3, [r7, #8]
 8002c6c:	2100      	movs	r1, #0
 8002c6e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
      
      while (bitInChannel <= 10)
 8002c72:	79fb      	ldrb	r3, [r7, #7]
 8002c74:	2b0a      	cmp	r3, #10
 8002c76:	d843      	bhi.n	8002d00 <_Z19SBUS_PostProcessingv+0x1d0>
      {
        if (bitNumber <= 7)
 8002c78:	7bbb      	ldrb	r3, [r7, #14]
 8002c7a:	2b07      	cmp	r3, #7
 8002c7c:	d81a      	bhi.n	8002cb4 <_Z19SBUS_PostProcessingv+0x184>
        {
          //transfer bit
          SBUS_TempChannels[i] |= SBUS_RxBitString[13 + (bitNumber) + (byteNumber * SBUS_BitsPerByte)] << bitInChannel;
 8002c7e:	4a39      	ldr	r2, [pc, #228]	; (8002d64 <_Z19SBUS_PostProcessingv+0x234>)
 8002c80:	68bb      	ldr	r3, [r7, #8]
 8002c82:	f932 1013 	ldrsh.w	r1, [r2, r3, lsl #1]
 8002c86:	7bbb      	ldrb	r3, [r7, #14]
 8002c88:	f103 000d 	add.w	r0, r3, #13
 8002c8c:	7bfa      	ldrb	r2, [r7, #15]
 8002c8e:	4613      	mov	r3, r2
 8002c90:	005b      	lsls	r3, r3, #1
 8002c92:	4413      	add	r3, r2
 8002c94:	009b      	lsls	r3, r3, #2
 8002c96:	4403      	add	r3, r0
 8002c98:	4a30      	ldr	r2, [pc, #192]	; (8002d5c <_Z19SBUS_PostProcessingv+0x22c>)
 8002c9a:	5cd3      	ldrb	r3, [r2, r3]
 8002c9c:	461a      	mov	r2, r3
 8002c9e:	79fb      	ldrb	r3, [r7, #7]
 8002ca0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ca4:	b21b      	sxth	r3, r3
 8002ca6:	430b      	orrs	r3, r1
 8002ca8:	b219      	sxth	r1, r3
 8002caa:	4a2e      	ldr	r2, [pc, #184]	; (8002d64 <_Z19SBUS_PostProcessingv+0x234>)
 8002cac:	68bb      	ldr	r3, [r7, #8]
 8002cae:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8002cb2:	e01e      	b.n	8002cf2 <_Z19SBUS_PostProcessingv+0x1c2>
        }
        else
        {
          byteNumber ++;
 8002cb4:	7bfb      	ldrb	r3, [r7, #15]
 8002cb6:	3301      	adds	r3, #1
 8002cb8:	73fb      	strb	r3, [r7, #15]
          bitNumber = 0;
 8002cba:	2300      	movs	r3, #0
 8002cbc:	73bb      	strb	r3, [r7, #14]
          //transfer bit
          SBUS_TempChannels[i] |= SBUS_RxBitString[13 + (bitNumber) + (byteNumber * SBUS_BitsPerByte)] << bitInChannel;
 8002cbe:	4a29      	ldr	r2, [pc, #164]	; (8002d64 <_Z19SBUS_PostProcessingv+0x234>)
 8002cc0:	68bb      	ldr	r3, [r7, #8]
 8002cc2:	f932 1013 	ldrsh.w	r1, [r2, r3, lsl #1]
 8002cc6:	7bbb      	ldrb	r3, [r7, #14]
 8002cc8:	f103 000d 	add.w	r0, r3, #13
 8002ccc:	7bfa      	ldrb	r2, [r7, #15]
 8002cce:	4613      	mov	r3, r2
 8002cd0:	005b      	lsls	r3, r3, #1
 8002cd2:	4413      	add	r3, r2
 8002cd4:	009b      	lsls	r3, r3, #2
 8002cd6:	4403      	add	r3, r0
 8002cd8:	4a20      	ldr	r2, [pc, #128]	; (8002d5c <_Z19SBUS_PostProcessingv+0x22c>)
 8002cda:	5cd3      	ldrb	r3, [r2, r3]
 8002cdc:	461a      	mov	r2, r3
 8002cde:	79fb      	ldrb	r3, [r7, #7]
 8002ce0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ce4:	b21b      	sxth	r3, r3
 8002ce6:	430b      	orrs	r3, r1
 8002ce8:	b219      	sxth	r1, r3
 8002cea:	4a1e      	ldr	r2, [pc, #120]	; (8002d64 <_Z19SBUS_PostProcessingv+0x234>)
 8002cec:	68bb      	ldr	r3, [r7, #8]
 8002cee:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        }
        bitNumber ++;
 8002cf2:	7bbb      	ldrb	r3, [r7, #14]
 8002cf4:	3301      	adds	r3, #1
 8002cf6:	73bb      	strb	r3, [r7, #14]
        bitInChannel ++;
 8002cf8:	79fb      	ldrb	r3, [r7, #7]
 8002cfa:	3301      	adds	r3, #1
 8002cfc:	71fb      	strb	r3, [r7, #7]
      while (bitInChannel <= 10)
 8002cfe:	e7b8      	b.n	8002c72 <_Z19SBUS_PostProcessingv+0x142>
      }
      
      SBUS_TempChannels[i] = ((float)(SBUS_TempChannels[i] - 1054) * ((float)-1000 / (float)821));    //map from 233, 1875 to -1000, 1000
 8002d00:	4a18      	ldr	r2, [pc, #96]	; (8002d64 <_Z19SBUS_PostProcessingv+0x234>)
 8002d02:	68bb      	ldr	r3, [r7, #8]
 8002d04:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8002d08:	f2a3 431e 	subw	r3, r3, #1054	; 0x41e
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	f7fe f803 	bl	8000d18 <__aeabi_i2f>
 8002d12:	4603      	mov	r3, r0
 8002d14:	4914      	ldr	r1, [pc, #80]	; (8002d68 <_Z19SBUS_PostProcessingv+0x238>)
 8002d16:	4618      	mov	r0, r3
 8002d18:	f7fe f852 	bl	8000dc0 <__aeabi_fmul>
 8002d1c:	4603      	mov	r3, r0
 8002d1e:	4618      	mov	r0, r3
 8002d20:	f7fe fa2a 	bl	8001178 <__aeabi_f2iz>
 8002d24:	4603      	mov	r3, r0
 8002d26:	b219      	sxth	r1, r3
 8002d28:	4a0e      	ldr	r2, [pc, #56]	; (8002d64 <_Z19SBUS_PostProcessingv+0x234>)
 8002d2a:	68bb      	ldr	r3, [r7, #8]
 8002d2c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
      SBUS_Channels[i] = SBUS_TempChannels[i];
 8002d30:	4a0c      	ldr	r2, [pc, #48]	; (8002d64 <_Z19SBUS_PostProcessingv+0x234>)
 8002d32:	68bb      	ldr	r3, [r7, #8]
 8002d34:	f932 1013 	ldrsh.w	r1, [r2, r3, lsl #1]
 8002d38:	4a0c      	ldr	r2, [pc, #48]	; (8002d6c <_Z19SBUS_PostProcessingv+0x23c>)
 8002d3a:	68bb      	ldr	r3, [r7, #8]
 8002d3c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for (size_t i = 0; i < SBUS_NumberOfChannels; i++)
 8002d40:	68bb      	ldr	r3, [r7, #8]
 8002d42:	3301      	adds	r3, #1
 8002d44:	60bb      	str	r3, [r7, #8]
 8002d46:	e78a      	b.n	8002c5e <_Z19SBUS_PostProcessingv+0x12e>
    }
  }
  SBUSNewPackage = false;
 8002d48:	4b09      	ldr	r3, [pc, #36]	; (8002d70 <_Z19SBUS_PostProcessingv+0x240>)
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	701a      	strb	r2, [r3, #0]
 8002d4e:	bf00      	nop
 8002d50:	3720      	adds	r7, #32
 8002d52:	46bd      	mov	sp, r7
 8002d54:	bd80      	pop	{r7, pc}
 8002d56:	bf00      	nop
 8002d58:	200003e8 	.word	0x200003e8
 8002d5c:	2000032c 	.word	0x2000032c
 8002d60:	200003bc 	.word	0x200003bc
 8002d64:	200003c8 	.word	0x200003c8
 8002d68:	bf9be84d 	.word	0xbf9be84d
 8002d6c:	200003d8 	.word	0x200003d8
 8002d70:	200003e9 	.word	0x200003e9

08002d74 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002d74:	b580      	push	{r7, lr}
 8002d76:	b086      	sub	sp, #24
 8002d78:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002d7a:	f001 fb2f 	bl	80043dc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002d7e:	f000 f879 	bl	8002e74 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002d82:	f000 fab5 	bl	80032f0 <_ZL12MX_GPIO_Initv>
  MX_USB_DEVICE_Init();
 8002d86:	f009 f887 	bl	800be98 <MX_USB_DEVICE_Init>
  MX_ADC1_Init();
 8002d8a:	f000 f8cf 	bl	8002f2c <_ZL12MX_ADC1_Initv>
  MX_I2C1_Init();
 8002d8e:	f000 f90b 	bl	8002fa8 <MX_I2C1_Init>
  MX_TIM3_Init();
 8002d92:	f000 f93d 	bl	8003010 <_ZL12MX_TIM3_Initv>
  MX_TIM4_Init();
 8002d96:	f000 f9a3 	bl	80030e0 <_ZL12MX_TIM4_Initv>
  MX_TIM11_Init();
 8002d9a:	f000 fa09 	bl	80031b0 <_ZL13MX_TIM11_Initv>
  MX_TIM13_Init();
 8002d9e:	f000 fa2f 	bl	8003200 <_ZL13MX_TIM13_Initv>
  MX_TIM14_Init();
 8002da2:	f000 fa55 	bl	8003250 <_ZL13MX_TIM14_Initv>
  MX_DMA_Init();
 8002da6:	f000 fa7b 	bl	80032a0 <_ZL11MX_DMA_Initv>

  


  /* Initialize interrupts */
  MX_NVIC_Init();
 8002daa:	f000 f8b3 	bl	8002f14 <_ZL12MX_NVIC_Initv>
  /* USER CODE BEGIN 2 */


  HAL_NVIC_DisableIRQ(EXTI0_IRQn);
 8002dae:	2006      	movs	r0, #6
 8002db0:	f001 ffe5 	bl	8004d7e <HAL_NVIC_DisableIRQ>

  HAL_Delay(50);
 8002db4:	2032      	movs	r0, #50	; 0x32
 8002db6:	f001 fb7f 	bl	80044b8 <HAL_Delay>
  MPU6050 mpu;
 8002dba:	463b      	mov	r3, r7
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	f7fe fe6d 	bl	8001a9c <_ZN7MPU6050C1Ev>
  HAL_Delay(50);
 8002dc2:	2032      	movs	r0, #50	; 0x32
 8002dc4:	f001 fb78 	bl	80044b8 <HAL_Delay>
  mpu.initialize();
 8002dc8:	463b      	mov	r3, r7
 8002dca:	4618      	mov	r0, r3
 8002dcc:	f7fe fe73 	bl	8001ab6 <_ZN7MPU605010initializeEv>
  HAL_Delay(50);
 8002dd0:	2032      	movs	r0, #50	; 0x32
 8002dd2:	f001 fb71 	bl	80044b8 <HAL_Delay>
  mpu.dmpInitialize();
 8002dd6:	463b      	mov	r3, r7
 8002dd8:	4618      	mov	r0, r3
 8002dda:	f7ff fba9 	bl	8002530 <_ZN7MPU605013dmpInitializeEv>
  HAL_Delay(50);
 8002dde:	2032      	movs	r0, #50	; 0x32
 8002de0:	f001 fb6a 	bl	80044b8 <HAL_Delay>
  mpu.setDMPEnabled(true);
 8002de4:	463b      	mov	r3, r7
 8002de6:	2101      	movs	r1, #1
 8002de8:	4618      	mov	r0, r3
 8002dea:	f7ff f8f2 	bl	8001fd2 <_ZN7MPU605013setDMPEnabledEb>
  HAL_Delay(50);
 8002dee:	2032      	movs	r0, #50	; 0x32
 8002df0:	f001 fb62 	bl	80044b8 <HAL_Delay>

  mpu.setXGyroOffset(-169);
 8002df4:	463b      	mov	r3, r7
 8002df6:	f06f 01a8 	mvn.w	r1, #168	; 0xa8
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	f7ff f8b6 	bl	8001f6c <_ZN7MPU605014setXGyroOffsetEs>
  mpu.setYGyroOffset(165);
 8002e00:	463b      	mov	r3, r7
 8002e02:	21a5      	movs	r1, #165	; 0xa5
 8002e04:	4618      	mov	r0, r3
 8002e06:	f7ff f8c2 	bl	8001f8e <_ZN7MPU605014setYGyroOffsetEs>
  mpu.setZGyroOffset(110);
 8002e0a:	463b      	mov	r3, r7
 8002e0c:	216e      	movs	r1, #110	; 0x6e
 8002e0e:	4618      	mov	r0, r3
 8002e10:	f7ff f8ce 	bl	8001fb0 <_ZN7MPU605014setZGyroOffsetEs>
  mpu.setXAccelOffset(4599);
 8002e14:	463b      	mov	r3, r7
 8002e16:	f241 11f7 	movw	r1, #4599	; 0x11f7
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	f7ff f873 	bl	8001f06 <_ZN7MPU605015setXAccelOffsetEs>
  mpu.setYAccelOffset(-951);
 8002e20:	463b      	mov	r3, r7
 8002e22:	4910      	ldr	r1, [pc, #64]	; (8002e64 <main+0xf0>)
 8002e24:	4618      	mov	r0, r3
 8002e26:	f7ff f87f 	bl	8001f28 <_ZN7MPU605015setYAccelOffsetEs>
  mpu.setZAccelOffset(1930);
 8002e2a:	463b      	mov	r3, r7
 8002e2c:	f240 718a 	movw	r1, #1930	; 0x78a
 8002e30:	4618      	mov	r0, r3
 8002e32:	f7ff f88a 	bl	8001f4a <_ZN7MPU605015setZAccelOffsetEs>

  HAL_TIM_Base_Start_IT(&htim3);
 8002e36:	480c      	ldr	r0, [pc, #48]	; (8002e68 <main+0xf4>)
 8002e38:	f005 fac2 	bl	80083c0 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim4);
 8002e3c:	480b      	ldr	r0, [pc, #44]	; (8002e6c <main+0xf8>)
 8002e3e:	f005 fabf 	bl	80083c0 <HAL_TIM_Base_Start_IT>
  //HAL_TIM_Base_Start_IT(&htim14);
  //HAL_TIM_Base_Start_IT(&htim13);
  HAL_TIM_Base_Start(&htim11);
 8002e42:	480b      	ldr	r0, [pc, #44]	; (8002e70 <main+0xfc>)
 8002e44:	f005 fa56 	bl	80082f4 <HAL_TIM_Base_Start>

  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8002e48:	2100      	movs	r1, #0
 8002e4a:	4807      	ldr	r0, [pc, #28]	; (8002e68 <main+0xf4>)
 8002e4c:	f005 fb76 	bl	800853c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8002e50:	2100      	movs	r1, #0
 8002e52:	4806      	ldr	r0, [pc, #24]	; (8002e6c <main+0xf8>)
 8002e54:	f005 fb72 	bl	800853c <HAL_TIM_PWM_Start>

  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8002e58:	2006      	movs	r0, #6
 8002e5a:	f001 ff82 	bl	8004d62 <HAL_NVIC_EnableIRQ>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    loop();
 8002e5e:	f000 fbb3 	bl	80035c8 <_Z4loopv>
 8002e62:	e7fc      	b.n	8002e5e <main+0xea>
 8002e64:	fffffc49 	.word	0xfffffc49
 8002e68:	20000548 	.word	0x20000548
 8002e6c:	20000590 	.word	0x20000590
 8002e70:	200005d8 	.word	0x200005d8

08002e74 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002e74:	b580      	push	{r7, lr}
 8002e76:	b092      	sub	sp, #72	; 0x48
 8002e78:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002e7a:	f107 0318 	add.w	r3, r7, #24
 8002e7e:	2230      	movs	r2, #48	; 0x30
 8002e80:	2100      	movs	r1, #0
 8002e82:	4618      	mov	r0, r3
 8002e84:	f00b f8a6 	bl	800dfd4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002e88:	1d3b      	adds	r3, r7, #4
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	601a      	str	r2, [r3, #0]
 8002e8e:	605a      	str	r2, [r3, #4]
 8002e90:	609a      	str	r2, [r3, #8]
 8002e92:	60da      	str	r2, [r3, #12]
 8002e94:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002e96:	2301      	movs	r3, #1
 8002e98:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002e9a:	2301      	movs	r3, #1
 8002e9c:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002e9e:	2302      	movs	r3, #2
 8002ea0:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002ea2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002ea6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLM = 16;
 8002ea8:	2310      	movs	r3, #16
 8002eaa:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLN = 192;
 8002eac:	23c0      	movs	r3, #192	; 0xc0
 8002eae:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002eb0:	2302      	movs	r3, #2
 8002eb2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002eb4:	2304      	movs	r3, #4
 8002eb6:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002eb8:	f107 0318 	add.w	r3, r7, #24
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	f004 fd5b 	bl	8007978 <HAL_RCC_OscConfig>
 8002ec2:	4603      	mov	r3, r0
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	bf14      	ite	ne
 8002ec8:	2301      	movne	r3, #1
 8002eca:	2300      	moveq	r3, #0
 8002ecc:	b2db      	uxtb	r3, r3
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d001      	beq.n	8002ed6 <_Z18SystemClock_Configv+0x62>
  {
    Error_Handler();
 8002ed2:	f000 fb1f 	bl	8003514 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002ed6:	230f      	movs	r3, #15
 8002ed8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8002eda:	2301      	movs	r3, #1
 8002edc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002ede:	2300      	movs	r3, #0
 8002ee0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002ee2:	2300      	movs	r3, #0
 8002ee4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002ee6:	2300      	movs	r3, #0
 8002ee8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002eea:	1d3b      	adds	r3, r7, #4
 8002eec:	2100      	movs	r1, #0
 8002eee:	4618      	mov	r0, r3
 8002ef0:	f004 ff92 	bl	8007e18 <HAL_RCC_ClockConfig>
 8002ef4:	4603      	mov	r3, r0
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	bf14      	ite	ne
 8002efa:	2301      	movne	r3, #1
 8002efc:	2300      	moveq	r3, #0
 8002efe:	b2db      	uxtb	r3, r3
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d001      	beq.n	8002f08 <_Z18SystemClock_Configv+0x94>
  {
    Error_Handler();
 8002f04:	f000 fb06 	bl	8003514 <Error_Handler>
  }
  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 8002f08:	f005 f872 	bl	8007ff0 <HAL_RCC_EnableCSS>
}
 8002f0c:	bf00      	nop
 8002f0e:	3748      	adds	r7, #72	; 0x48
 8002f10:	46bd      	mov	sp, r7
 8002f12:	bd80      	pop	{r7, pc}

08002f14 <_ZL12MX_NVIC_Initv>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8002f14:	b580      	push	{r7, lr}
 8002f16:	af00      	add	r7, sp, #0
  /* EXTI0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8002f18:	2200      	movs	r2, #0
 8002f1a:	2100      	movs	r1, #0
 8002f1c:	2006      	movs	r0, #6
 8002f1e:	f001 ff04 	bl	8004d2a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8002f22:	2006      	movs	r0, #6
 8002f24:	f001 ff1d 	bl	8004d62 <HAL_NVIC_EnableIRQ>
}
 8002f28:	bf00      	nop
 8002f2a:	bd80      	pop	{r7, pc}

08002f2c <_ZL12MX_ADC1_Initv>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8002f30:	4b1a      	ldr	r3, [pc, #104]	; (8002f9c <_ZL12MX_ADC1_Initv+0x70>)
 8002f32:	4a1b      	ldr	r2, [pc, #108]	; (8002fa0 <_ZL12MX_ADC1_Initv+0x74>)
 8002f34:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8002f36:	4b19      	ldr	r3, [pc, #100]	; (8002f9c <_ZL12MX_ADC1_Initv+0x70>)
 8002f38:	2200      	movs	r2, #0
 8002f3a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002f3c:	4b17      	ldr	r3, [pc, #92]	; (8002f9c <_ZL12MX_ADC1_Initv+0x70>)
 8002f3e:	2200      	movs	r2, #0
 8002f40:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8002f42:	4b16      	ldr	r3, [pc, #88]	; (8002f9c <_ZL12MX_ADC1_Initv+0x70>)
 8002f44:	2201      	movs	r2, #1
 8002f46:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8002f48:	4b14      	ldr	r3, [pc, #80]	; (8002f9c <_ZL12MX_ADC1_Initv+0x70>)
 8002f4a:	2201      	movs	r2, #1
 8002f4c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002f4e:	4b13      	ldr	r3, [pc, #76]	; (8002f9c <_ZL12MX_ADC1_Initv+0x70>)
 8002f50:	2200      	movs	r2, #0
 8002f52:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002f56:	4b11      	ldr	r3, [pc, #68]	; (8002f9c <_ZL12MX_ADC1_Initv+0x70>)
 8002f58:	2200      	movs	r2, #0
 8002f5a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002f5c:	4b0f      	ldr	r3, [pc, #60]	; (8002f9c <_ZL12MX_ADC1_Initv+0x70>)
 8002f5e:	4a11      	ldr	r2, [pc, #68]	; (8002fa4 <_ZL12MX_ADC1_Initv+0x78>)
 8002f60:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002f62:	4b0e      	ldr	r3, [pc, #56]	; (8002f9c <_ZL12MX_ADC1_Initv+0x70>)
 8002f64:	2200      	movs	r2, #0
 8002f66:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8002f68:	4b0c      	ldr	r3, [pc, #48]	; (8002f9c <_ZL12MX_ADC1_Initv+0x70>)
 8002f6a:	2201      	movs	r2, #1
 8002f6c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8002f6e:	4b0b      	ldr	r3, [pc, #44]	; (8002f9c <_ZL12MX_ADC1_Initv+0x70>)
 8002f70:	2200      	movs	r2, #0
 8002f72:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002f76:	4b09      	ldr	r3, [pc, #36]	; (8002f9c <_ZL12MX_ADC1_Initv+0x70>)
 8002f78:	2201      	movs	r2, #1
 8002f7a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002f7c:	4807      	ldr	r0, [pc, #28]	; (8002f9c <_ZL12MX_ADC1_Initv+0x70>)
 8002f7e:	f001 fabf 	bl	8004500 <HAL_ADC_Init>
 8002f82:	4603      	mov	r3, r0
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	bf14      	ite	ne
 8002f88:	2301      	movne	r3, #1
 8002f8a:	2300      	moveq	r3, #0
 8002f8c:	b2db      	uxtb	r3, r3
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d001      	beq.n	8002f96 <_ZL12MX_ADC1_Initv+0x6a>
  {
    Error_Handler();
 8002f92:	f000 fabf 	bl	8003514 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002f96:	bf00      	nop
 8002f98:	bd80      	pop	{r7, pc}
 8002f9a:	bf00      	nop
 8002f9c:	200003ec 	.word	0x200003ec
 8002fa0:	40012000 	.word	0x40012000
 8002fa4:	0f000001 	.word	0x0f000001

08002fa8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
void MX_I2C1_Init(void)
{
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002fac:	4b15      	ldr	r3, [pc, #84]	; (8003004 <MX_I2C1_Init+0x5c>)
 8002fae:	4a16      	ldr	r2, [pc, #88]	; (8003008 <MX_I2C1_Init+0x60>)
 8002fb0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8002fb2:	4b14      	ldr	r3, [pc, #80]	; (8003004 <MX_I2C1_Init+0x5c>)
 8002fb4:	4a15      	ldr	r2, [pc, #84]	; (800300c <MX_I2C1_Init+0x64>)
 8002fb6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002fb8:	4b12      	ldr	r3, [pc, #72]	; (8003004 <MX_I2C1_Init+0x5c>)
 8002fba:	2200      	movs	r2, #0
 8002fbc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002fbe:	4b11      	ldr	r3, [pc, #68]	; (8003004 <MX_I2C1_Init+0x5c>)
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002fc4:	4b0f      	ldr	r3, [pc, #60]	; (8003004 <MX_I2C1_Init+0x5c>)
 8002fc6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002fca:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002fcc:	4b0d      	ldr	r3, [pc, #52]	; (8003004 <MX_I2C1_Init+0x5c>)
 8002fce:	2200      	movs	r2, #0
 8002fd0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002fd2:	4b0c      	ldr	r3, [pc, #48]	; (8003004 <MX_I2C1_Init+0x5c>)
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002fd8:	4b0a      	ldr	r3, [pc, #40]	; (8003004 <MX_I2C1_Init+0x5c>)
 8002fda:	2200      	movs	r2, #0
 8002fdc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002fde:	4b09      	ldr	r3, [pc, #36]	; (8003004 <MX_I2C1_Init+0x5c>)
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002fe4:	4807      	ldr	r0, [pc, #28]	; (8003004 <MX_I2C1_Init+0x5c>)
 8002fe6:	f002 fbb3 	bl	8005750 <HAL_I2C_Init>
 8002fea:	4603      	mov	r3, r0
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	bf14      	ite	ne
 8002ff0:	2301      	movne	r3, #1
 8002ff2:	2300      	moveq	r3, #0
 8002ff4:	b2db      	uxtb	r3, r3
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d001      	beq.n	8002ffe <MX_I2C1_Init+0x56>
  {
    Error_Handler();
 8002ffa:	f000 fa8b 	bl	8003514 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002ffe:	bf00      	nop
 8003000:	bd80      	pop	{r7, pc}
 8003002:	bf00      	nop
 8003004:	20000434 	.word	0x20000434
 8003008:	40005400 	.word	0x40005400
 800300c:	00061a80 	.word	0x00061a80

08003010 <_ZL12MX_TIM3_Initv>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8003010:	b580      	push	{r7, lr}
 8003012:	b08a      	sub	sp, #40	; 0x28
 8003014:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003016:	f107 0320 	add.w	r3, r7, #32
 800301a:	2200      	movs	r2, #0
 800301c:	601a      	str	r2, [r3, #0]
 800301e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003020:	1d3b      	adds	r3, r7, #4
 8003022:	2200      	movs	r2, #0
 8003024:	601a      	str	r2, [r3, #0]
 8003026:	605a      	str	r2, [r3, #4]
 8003028:	609a      	str	r2, [r3, #8]
 800302a:	60da      	str	r2, [r3, #12]
 800302c:	611a      	str	r2, [r3, #16]
 800302e:	615a      	str	r2, [r3, #20]
 8003030:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003032:	4b29      	ldr	r3, [pc, #164]	; (80030d8 <_ZL12MX_TIM3_Initv+0xc8>)
 8003034:	4a29      	ldr	r2, [pc, #164]	; (80030dc <_ZL12MX_TIM3_Initv+0xcc>)
 8003036:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 16-1;
 8003038:	4b27      	ldr	r3, [pc, #156]	; (80030d8 <_ZL12MX_TIM3_Initv+0xc8>)
 800303a:	220f      	movs	r2, #15
 800303c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800303e:	4b26      	ldr	r3, [pc, #152]	; (80030d8 <_ZL12MX_TIM3_Initv+0xc8>)
 8003040:	2200      	movs	r2, #0
 8003042:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 20000;
 8003044:	4b24      	ldr	r3, [pc, #144]	; (80030d8 <_ZL12MX_TIM3_Initv+0xc8>)
 8003046:	f644 6220 	movw	r2, #20000	; 0x4e20
 800304a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800304c:	4b22      	ldr	r3, [pc, #136]	; (80030d8 <_ZL12MX_TIM3_Initv+0xc8>)
 800304e:	2200      	movs	r2, #0
 8003050:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003052:	4b21      	ldr	r3, [pc, #132]	; (80030d8 <_ZL12MX_TIM3_Initv+0xc8>)
 8003054:	2200      	movs	r2, #0
 8003056:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8003058:	481f      	ldr	r0, [pc, #124]	; (80030d8 <_ZL12MX_TIM3_Initv+0xc8>)
 800305a:	f005 fa1f 	bl	800849c <HAL_TIM_PWM_Init>
 800305e:	4603      	mov	r3, r0
 8003060:	2b00      	cmp	r3, #0
 8003062:	bf14      	ite	ne
 8003064:	2301      	movne	r3, #1
 8003066:	2300      	moveq	r3, #0
 8003068:	b2db      	uxtb	r3, r3
 800306a:	2b00      	cmp	r3, #0
 800306c:	d001      	beq.n	8003072 <_ZL12MX_TIM3_Initv+0x62>
  {
    Error_Handler();
 800306e:	f000 fa51 	bl	8003514 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003072:	2300      	movs	r3, #0
 8003074:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003076:	2300      	movs	r3, #0
 8003078:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800307a:	f107 0320 	add.w	r3, r7, #32
 800307e:	4619      	mov	r1, r3
 8003080:	4815      	ldr	r0, [pc, #84]	; (80030d8 <_ZL12MX_TIM3_Initv+0xc8>)
 8003082:	f005 ff7b 	bl	8008f7c <HAL_TIMEx_MasterConfigSynchronization>
 8003086:	4603      	mov	r3, r0
 8003088:	2b00      	cmp	r3, #0
 800308a:	bf14      	ite	ne
 800308c:	2301      	movne	r3, #1
 800308e:	2300      	moveq	r3, #0
 8003090:	b2db      	uxtb	r3, r3
 8003092:	2b00      	cmp	r3, #0
 8003094:	d001      	beq.n	800309a <_ZL12MX_TIM3_Initv+0x8a>
  {
    Error_Handler();
 8003096:	f000 fa3d 	bl	8003514 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800309a:	2360      	movs	r3, #96	; 0x60
 800309c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800309e:	2300      	movs	r3, #0
 80030a0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80030a2:	2300      	movs	r3, #0
 80030a4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80030a6:	2300      	movs	r3, #0
 80030a8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80030aa:	1d3b      	adds	r3, r7, #4
 80030ac:	2200      	movs	r2, #0
 80030ae:	4619      	mov	r1, r3
 80030b0:	4809      	ldr	r0, [pc, #36]	; (80030d8 <_ZL12MX_TIM3_Initv+0xc8>)
 80030b2:	f005 fc13 	bl	80088dc <HAL_TIM_PWM_ConfigChannel>
 80030b6:	4603      	mov	r3, r0
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	bf14      	ite	ne
 80030bc:	2301      	movne	r3, #1
 80030be:	2300      	moveq	r3, #0
 80030c0:	b2db      	uxtb	r3, r3
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d001      	beq.n	80030ca <_ZL12MX_TIM3_Initv+0xba>
  {
    Error_Handler();
 80030c6:	f000 fa25 	bl	8003514 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80030ca:	4803      	ldr	r0, [pc, #12]	; (80030d8 <_ZL12MX_TIM3_Initv+0xc8>)
 80030cc:	f001 f85c 	bl	8004188 <HAL_TIM_MspPostInit>

}
 80030d0:	bf00      	nop
 80030d2:	3728      	adds	r7, #40	; 0x28
 80030d4:	46bd      	mov	sp, r7
 80030d6:	bd80      	pop	{r7, pc}
 80030d8:	20000548 	.word	0x20000548
 80030dc:	40000400 	.word	0x40000400

080030e0 <_ZL12MX_TIM4_Initv>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80030e0:	b580      	push	{r7, lr}
 80030e2:	b08a      	sub	sp, #40	; 0x28
 80030e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80030e6:	f107 0320 	add.w	r3, r7, #32
 80030ea:	2200      	movs	r2, #0
 80030ec:	601a      	str	r2, [r3, #0]
 80030ee:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80030f0:	1d3b      	adds	r3, r7, #4
 80030f2:	2200      	movs	r2, #0
 80030f4:	601a      	str	r2, [r3, #0]
 80030f6:	605a      	str	r2, [r3, #4]
 80030f8:	609a      	str	r2, [r3, #8]
 80030fa:	60da      	str	r2, [r3, #12]
 80030fc:	611a      	str	r2, [r3, #16]
 80030fe:	615a      	str	r2, [r3, #20]
 8003100:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8003102:	4b29      	ldr	r3, [pc, #164]	; (80031a8 <_ZL12MX_TIM4_Initv+0xc8>)
 8003104:	4a29      	ldr	r2, [pc, #164]	; (80031ac <_ZL12MX_TIM4_Initv+0xcc>)
 8003106:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 16-1;
 8003108:	4b27      	ldr	r3, [pc, #156]	; (80031a8 <_ZL12MX_TIM4_Initv+0xc8>)
 800310a:	220f      	movs	r2, #15
 800310c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800310e:	4b26      	ldr	r3, [pc, #152]	; (80031a8 <_ZL12MX_TIM4_Initv+0xc8>)
 8003110:	2200      	movs	r2, #0
 8003112:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 2500;
 8003114:	4b24      	ldr	r3, [pc, #144]	; (80031a8 <_ZL12MX_TIM4_Initv+0xc8>)
 8003116:	f640 12c4 	movw	r2, #2500	; 0x9c4
 800311a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800311c:	4b22      	ldr	r3, [pc, #136]	; (80031a8 <_ZL12MX_TIM4_Initv+0xc8>)
 800311e:	2200      	movs	r2, #0
 8003120:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003122:	4b21      	ldr	r3, [pc, #132]	; (80031a8 <_ZL12MX_TIM4_Initv+0xc8>)
 8003124:	2200      	movs	r2, #0
 8003126:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8003128:	481f      	ldr	r0, [pc, #124]	; (80031a8 <_ZL12MX_TIM4_Initv+0xc8>)
 800312a:	f005 f9b7 	bl	800849c <HAL_TIM_PWM_Init>
 800312e:	4603      	mov	r3, r0
 8003130:	2b00      	cmp	r3, #0
 8003132:	bf14      	ite	ne
 8003134:	2301      	movne	r3, #1
 8003136:	2300      	moveq	r3, #0
 8003138:	b2db      	uxtb	r3, r3
 800313a:	2b00      	cmp	r3, #0
 800313c:	d001      	beq.n	8003142 <_ZL12MX_TIM4_Initv+0x62>
  {
    Error_Handler();
 800313e:	f000 f9e9 	bl	8003514 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003142:	2300      	movs	r3, #0
 8003144:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003146:	2300      	movs	r3, #0
 8003148:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800314a:	f107 0320 	add.w	r3, r7, #32
 800314e:	4619      	mov	r1, r3
 8003150:	4815      	ldr	r0, [pc, #84]	; (80031a8 <_ZL12MX_TIM4_Initv+0xc8>)
 8003152:	f005 ff13 	bl	8008f7c <HAL_TIMEx_MasterConfigSynchronization>
 8003156:	4603      	mov	r3, r0
 8003158:	2b00      	cmp	r3, #0
 800315a:	bf14      	ite	ne
 800315c:	2301      	movne	r3, #1
 800315e:	2300      	moveq	r3, #0
 8003160:	b2db      	uxtb	r3, r3
 8003162:	2b00      	cmp	r3, #0
 8003164:	d001      	beq.n	800316a <_ZL12MX_TIM4_Initv+0x8a>
  {
    Error_Handler();
 8003166:	f000 f9d5 	bl	8003514 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800316a:	2360      	movs	r3, #96	; 0x60
 800316c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800316e:	2300      	movs	r3, #0
 8003170:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003172:	2300      	movs	r3, #0
 8003174:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003176:	2300      	movs	r3, #0
 8003178:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800317a:	1d3b      	adds	r3, r7, #4
 800317c:	2200      	movs	r2, #0
 800317e:	4619      	mov	r1, r3
 8003180:	4809      	ldr	r0, [pc, #36]	; (80031a8 <_ZL12MX_TIM4_Initv+0xc8>)
 8003182:	f005 fbab 	bl	80088dc <HAL_TIM_PWM_ConfigChannel>
 8003186:	4603      	mov	r3, r0
 8003188:	2b00      	cmp	r3, #0
 800318a:	bf14      	ite	ne
 800318c:	2301      	movne	r3, #1
 800318e:	2300      	moveq	r3, #0
 8003190:	b2db      	uxtb	r3, r3
 8003192:	2b00      	cmp	r3, #0
 8003194:	d001      	beq.n	800319a <_ZL12MX_TIM4_Initv+0xba>
  {
    Error_Handler();
 8003196:	f000 f9bd 	bl	8003514 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 800319a:	4803      	ldr	r0, [pc, #12]	; (80031a8 <_ZL12MX_TIM4_Initv+0xc8>)
 800319c:	f000 fff4 	bl	8004188 <HAL_TIM_MspPostInit>

}
 80031a0:	bf00      	nop
 80031a2:	3728      	adds	r7, #40	; 0x28
 80031a4:	46bd      	mov	sp, r7
 80031a6:	bd80      	pop	{r7, pc}
 80031a8:	20000590 	.word	0x20000590
 80031ac:	40000800 	.word	0x40000800

080031b0 <_ZL13MX_TIM11_Initv>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 80031b0:	b580      	push	{r7, lr}
 80031b2:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 80031b4:	4b10      	ldr	r3, [pc, #64]	; (80031f8 <_ZL13MX_TIM11_Initv+0x48>)
 80031b6:	4a11      	ldr	r2, [pc, #68]	; (80031fc <_ZL13MX_TIM11_Initv+0x4c>)
 80031b8:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 16 - 1;
 80031ba:	4b0f      	ldr	r3, [pc, #60]	; (80031f8 <_ZL13MX_TIM11_Initv+0x48>)
 80031bc:	220f      	movs	r2, #15
 80031be:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 80031c0:	4b0d      	ldr	r3, [pc, #52]	; (80031f8 <_ZL13MX_TIM11_Initv+0x48>)
 80031c2:	2200      	movs	r2, #0
 80031c4:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 65535;
 80031c6:	4b0c      	ldr	r3, [pc, #48]	; (80031f8 <_ZL13MX_TIM11_Initv+0x48>)
 80031c8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80031cc:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80031ce:	4b0a      	ldr	r3, [pc, #40]	; (80031f8 <_ZL13MX_TIM11_Initv+0x48>)
 80031d0:	2200      	movs	r2, #0
 80031d2:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80031d4:	4b08      	ldr	r3, [pc, #32]	; (80031f8 <_ZL13MX_TIM11_Initv+0x48>)
 80031d6:	2200      	movs	r2, #0
 80031d8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 80031da:	4807      	ldr	r0, [pc, #28]	; (80031f8 <_ZL13MX_TIM11_Initv+0x48>)
 80031dc:	f005 f83a 	bl	8008254 <HAL_TIM_Base_Init>
 80031e0:	4603      	mov	r3, r0
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	bf14      	ite	ne
 80031e6:	2301      	movne	r3, #1
 80031e8:	2300      	moveq	r3, #0
 80031ea:	b2db      	uxtb	r3, r3
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d001      	beq.n	80031f4 <_ZL13MX_TIM11_Initv+0x44>
  {
    Error_Handler();
 80031f0:	f000 f990 	bl	8003514 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 80031f4:	bf00      	nop
 80031f6:	bd80      	pop	{r7, pc}
 80031f8:	200005d8 	.word	0x200005d8
 80031fc:	40014800 	.word	0x40014800

08003200 <_ZL13MX_TIM13_Initv>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 8003200:	b580      	push	{r7, lr}
 8003202:	af00      	add	r7, sp, #0
  /* USER CODE END TIM13_Init 0 */

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8003204:	4b10      	ldr	r3, [pc, #64]	; (8003248 <_ZL13MX_TIM13_Initv+0x48>)
 8003206:	4a11      	ldr	r2, [pc, #68]	; (800324c <_ZL13MX_TIM13_Initv+0x4c>)
 8003208:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 16 - 1;
 800320a:	4b0f      	ldr	r3, [pc, #60]	; (8003248 <_ZL13MX_TIM13_Initv+0x48>)
 800320c:	220f      	movs	r2, #15
 800320e:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003210:	4b0d      	ldr	r3, [pc, #52]	; (8003248 <_ZL13MX_TIM13_Initv+0x48>)
 8003212:	2200      	movs	r2, #0
 8003214:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 65535;
 8003216:	4b0c      	ldr	r3, [pc, #48]	; (8003248 <_ZL13MX_TIM13_Initv+0x48>)
 8003218:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800321c:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800321e:	4b0a      	ldr	r3, [pc, #40]	; (8003248 <_ZL13MX_TIM13_Initv+0x48>)
 8003220:	2200      	movs	r2, #0
 8003222:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003224:	4b08      	ldr	r3, [pc, #32]	; (8003248 <_ZL13MX_TIM13_Initv+0x48>)
 8003226:	2200      	movs	r2, #0
 8003228:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 800322a:	4807      	ldr	r0, [pc, #28]	; (8003248 <_ZL13MX_TIM13_Initv+0x48>)
 800322c:	f005 f812 	bl	8008254 <HAL_TIM_Base_Init>
 8003230:	4603      	mov	r3, r0
 8003232:	2b00      	cmp	r3, #0
 8003234:	bf14      	ite	ne
 8003236:	2301      	movne	r3, #1
 8003238:	2300      	moveq	r3, #0
 800323a:	b2db      	uxtb	r3, r3
 800323c:	2b00      	cmp	r3, #0
 800323e:	d001      	beq.n	8003244 <_ZL13MX_TIM13_Initv+0x44>
  {
    Error_Handler();
 8003240:	f000 f968 	bl	8003514 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 8003244:	bf00      	nop
 8003246:	bd80      	pop	{r7, pc}
 8003248:	20000620 	.word	0x20000620
 800324c:	40001c00 	.word	0x40001c00

08003250 <_ZL13MX_TIM14_Initv>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 8003250:	b580      	push	{r7, lr}
 8003252:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8003254:	4b10      	ldr	r3, [pc, #64]	; (8003298 <_ZL13MX_TIM14_Initv+0x48>)
 8003256:	4a11      	ldr	r2, [pc, #68]	; (800329c <_ZL13MX_TIM14_Initv+0x4c>)
 8003258:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 16 - 1;
 800325a:	4b0f      	ldr	r3, [pc, #60]	; (8003298 <_ZL13MX_TIM14_Initv+0x48>)
 800325c:	220f      	movs	r2, #15
 800325e:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003260:	4b0d      	ldr	r3, [pc, #52]	; (8003298 <_ZL13MX_TIM14_Initv+0x48>)
 8003262:	2200      	movs	r2, #0
 8003264:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 65535;
 8003266:	4b0c      	ldr	r3, [pc, #48]	; (8003298 <_ZL13MX_TIM14_Initv+0x48>)
 8003268:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800326c:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800326e:	4b0a      	ldr	r3, [pc, #40]	; (8003298 <_ZL13MX_TIM14_Initv+0x48>)
 8003270:	2200      	movs	r2, #0
 8003272:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003274:	4b08      	ldr	r3, [pc, #32]	; (8003298 <_ZL13MX_TIM14_Initv+0x48>)
 8003276:	2200      	movs	r2, #0
 8003278:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 800327a:	4807      	ldr	r0, [pc, #28]	; (8003298 <_ZL13MX_TIM14_Initv+0x48>)
 800327c:	f004 ffea 	bl	8008254 <HAL_TIM_Base_Init>
 8003280:	4603      	mov	r3, r0
 8003282:	2b00      	cmp	r3, #0
 8003284:	bf14      	ite	ne
 8003286:	2301      	movne	r3, #1
 8003288:	2300      	moveq	r3, #0
 800328a:	b2db      	uxtb	r3, r3
 800328c:	2b00      	cmp	r3, #0
 800328e:	d001      	beq.n	8003294 <_ZL13MX_TIM14_Initv+0x44>
  {
    Error_Handler();
 8003290:	f000 f940 	bl	8003514 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 8003294:	bf00      	nop
 8003296:	bd80      	pop	{r7, pc}
 8003298:	20000668 	.word	0x20000668
 800329c:	40002000 	.word	0x40002000

080032a0 <_ZL11MX_DMA_Initv>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80032a0:	b580      	push	{r7, lr}
 80032a2:	b082      	sub	sp, #8
 80032a4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80032a6:	2300      	movs	r3, #0
 80032a8:	607b      	str	r3, [r7, #4]
 80032aa:	4b10      	ldr	r3, [pc, #64]	; (80032ec <_ZL11MX_DMA_Initv+0x4c>)
 80032ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032ae:	4a0f      	ldr	r2, [pc, #60]	; (80032ec <_ZL11MX_DMA_Initv+0x4c>)
 80032b0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80032b4:	6313      	str	r3, [r2, #48]	; 0x30
 80032b6:	4b0d      	ldr	r3, [pc, #52]	; (80032ec <_ZL11MX_DMA_Initv+0x4c>)
 80032b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032ba:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80032be:	607b      	str	r3, [r7, #4]
 80032c0:	687b      	ldr	r3, [r7, #4]
  
  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80032c2:	2200      	movs	r2, #0
 80032c4:	2100      	movs	r1, #0
 80032c6:	200b      	movs	r0, #11
 80032c8:	f001 fd2f 	bl	8004d2a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80032cc:	200b      	movs	r0, #11
 80032ce:	f001 fd48 	bl	8004d62 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 80032d2:	2200      	movs	r2, #0
 80032d4:	2100      	movs	r1, #0
 80032d6:	2011      	movs	r0, #17
 80032d8:	f001 fd27 	bl	8004d2a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 80032dc:	2011      	movs	r0, #17
 80032de:	f001 fd40 	bl	8004d62 <HAL_NVIC_EnableIRQ>

}
 80032e2:	bf00      	nop
 80032e4:	3708      	adds	r7, #8
 80032e6:	46bd      	mov	sp, r7
 80032e8:	bd80      	pop	{r7, pc}
 80032ea:	bf00      	nop
 80032ec:	40023800 	.word	0x40023800

080032f0 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80032f0:	b580      	push	{r7, lr}
 80032f2:	b08a      	sub	sp, #40	; 0x28
 80032f4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032f6:	f107 0314 	add.w	r3, r7, #20
 80032fa:	2200      	movs	r2, #0
 80032fc:	601a      	str	r2, [r3, #0]
 80032fe:	605a      	str	r2, [r3, #4]
 8003300:	609a      	str	r2, [r3, #8]
 8003302:	60da      	str	r2, [r3, #12]
 8003304:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003306:	2300      	movs	r3, #0
 8003308:	613b      	str	r3, [r7, #16]
 800330a:	4b44      	ldr	r3, [pc, #272]	; (800341c <_ZL12MX_GPIO_Initv+0x12c>)
 800330c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800330e:	4a43      	ldr	r2, [pc, #268]	; (800341c <_ZL12MX_GPIO_Initv+0x12c>)
 8003310:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003314:	6313      	str	r3, [r2, #48]	; 0x30
 8003316:	4b41      	ldr	r3, [pc, #260]	; (800341c <_ZL12MX_GPIO_Initv+0x12c>)
 8003318:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800331a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800331e:	613b      	str	r3, [r7, #16]
 8003320:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003322:	2300      	movs	r3, #0
 8003324:	60fb      	str	r3, [r7, #12]
 8003326:	4b3d      	ldr	r3, [pc, #244]	; (800341c <_ZL12MX_GPIO_Initv+0x12c>)
 8003328:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800332a:	4a3c      	ldr	r2, [pc, #240]	; (800341c <_ZL12MX_GPIO_Initv+0x12c>)
 800332c:	f043 0304 	orr.w	r3, r3, #4
 8003330:	6313      	str	r3, [r2, #48]	; 0x30
 8003332:	4b3a      	ldr	r3, [pc, #232]	; (800341c <_ZL12MX_GPIO_Initv+0x12c>)
 8003334:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003336:	f003 0304 	and.w	r3, r3, #4
 800333a:	60fb      	str	r3, [r7, #12]
 800333c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800333e:	2300      	movs	r3, #0
 8003340:	60bb      	str	r3, [r7, #8]
 8003342:	4b36      	ldr	r3, [pc, #216]	; (800341c <_ZL12MX_GPIO_Initv+0x12c>)
 8003344:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003346:	4a35      	ldr	r2, [pc, #212]	; (800341c <_ZL12MX_GPIO_Initv+0x12c>)
 8003348:	f043 0301 	orr.w	r3, r3, #1
 800334c:	6313      	str	r3, [r2, #48]	; 0x30
 800334e:	4b33      	ldr	r3, [pc, #204]	; (800341c <_ZL12MX_GPIO_Initv+0x12c>)
 8003350:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003352:	f003 0301 	and.w	r3, r3, #1
 8003356:	60bb      	str	r3, [r7, #8]
 8003358:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800335a:	2300      	movs	r3, #0
 800335c:	607b      	str	r3, [r7, #4]
 800335e:	4b2f      	ldr	r3, [pc, #188]	; (800341c <_ZL12MX_GPIO_Initv+0x12c>)
 8003360:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003362:	4a2e      	ldr	r2, [pc, #184]	; (800341c <_ZL12MX_GPIO_Initv+0x12c>)
 8003364:	f043 0302 	orr.w	r3, r3, #2
 8003368:	6313      	str	r3, [r2, #48]	; 0x30
 800336a:	4b2c      	ldr	r3, [pc, #176]	; (800341c <_ZL12MX_GPIO_Initv+0x12c>)
 800336c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800336e:	f003 0302 	and.w	r3, r3, #2
 8003372:	607b      	str	r3, [r7, #4]
 8003374:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ONBOARD_LED_1_Pin|ONBOARD_LED_2_Pin|ONBOARD_LED_3_Pin|ONBOARD_LED_4_Pin
 8003376:	2200      	movs	r2, #0
 8003378:	f44f 71f8 	mov.w	r1, #496	; 0x1f0
 800337c:	4828      	ldr	r0, [pc, #160]	; (8003420 <_ZL12MX_GPIO_Initv+0x130>)
 800337e:	f002 f99d 	bl	80056bc <HAL_GPIO_WritePin>
                          |ONBOARD_WRITE_3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ONBOARD_WRITE_2_GPIO_Port, ONBOARD_WRITE_2_Pin, GPIO_PIN_RESET);
 8003382:	2200      	movs	r2, #0
 8003384:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003388:	4826      	ldr	r0, [pc, #152]	; (8003424 <_ZL12MX_GPIO_Initv+0x134>)
 800338a:	f002 f997 	bl	80056bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : ONBOARD_READ_IT_3_Pin */
  GPIO_InitStruct.Pin = ONBOARD_READ_IT_3_Pin;
 800338e:	2301      	movs	r3, #1
 8003390:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003392:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8003396:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003398:	2302      	movs	r3, #2
 800339a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ONBOARD_READ_IT_3_GPIO_Port, &GPIO_InitStruct);
 800339c:	f107 0314 	add.w	r3, r7, #20
 80033a0:	4619      	mov	r1, r3
 80033a2:	4820      	ldr	r0, [pc, #128]	; (8003424 <_ZL12MX_GPIO_Initv+0x134>)
 80033a4:	f001 ffec 	bl	8005380 <HAL_GPIO_Init>

  /*Configure GPIO pins : ONBOARD_BUTTON_1_Pin ONBOARD_BUTTON_2_Pin ONBOARD_BUTTON_3_Pin ONBOARD_BUTTON_4_Pin */
  GPIO_InitStruct.Pin = ONBOARD_BUTTON_1_Pin|ONBOARD_BUTTON_2_Pin|ONBOARD_BUTTON_3_Pin|ONBOARD_BUTTON_4_Pin;
 80033a8:	230f      	movs	r3, #15
 80033aa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80033ac:	2300      	movs	r3, #0
 80033ae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033b0:	2300      	movs	r3, #0
 80033b2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80033b4:	f107 0314 	add.w	r3, r7, #20
 80033b8:	4619      	mov	r1, r3
 80033ba:	4819      	ldr	r0, [pc, #100]	; (8003420 <_ZL12MX_GPIO_Initv+0x130>)
 80033bc:	f001 ffe0 	bl	8005380 <HAL_GPIO_Init>

  /*Configure GPIO pins : ONBOARD_LED_1_Pin ONBOARD_LED_2_Pin ONBOARD_LED_3_Pin ONBOARD_LED_4_Pin
                           ONBOARD_WRITE_3_Pin */
  GPIO_InitStruct.Pin = ONBOARD_LED_1_Pin|ONBOARD_LED_2_Pin|ONBOARD_LED_3_Pin|ONBOARD_LED_4_Pin
 80033c0:	f44f 73f8 	mov.w	r3, #496	; 0x1f0
 80033c4:	617b      	str	r3, [r7, #20]
                          |ONBOARD_WRITE_3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80033c6:	2301      	movs	r3, #1
 80033c8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033ca:	2300      	movs	r3, #0
 80033cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033ce:	2300      	movs	r3, #0
 80033d0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80033d2:	f107 0314 	add.w	r3, r7, #20
 80033d6:	4619      	mov	r1, r3
 80033d8:	4811      	ldr	r0, [pc, #68]	; (8003420 <_ZL12MX_GPIO_Initv+0x130>)
 80033da:	f001 ffd1 	bl	8005380 <HAL_GPIO_Init>

  /*Configure GPIO pin : ONBOARD_WRITE_2_Pin */
  GPIO_InitStruct.Pin = ONBOARD_WRITE_2_Pin;
 80033de:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80033e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80033e4:	2301      	movs	r3, #1
 80033e6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033e8:	2300      	movs	r3, #0
 80033ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033ec:	2300      	movs	r3, #0
 80033ee:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(ONBOARD_WRITE_2_GPIO_Port, &GPIO_InitStruct);
 80033f0:	f107 0314 	add.w	r3, r7, #20
 80033f4:	4619      	mov	r1, r3
 80033f6:	480b      	ldr	r0, [pc, #44]	; (8003424 <_ZL12MX_GPIO_Initv+0x134>)
 80033f8:	f001 ffc2 	bl	8005380 <HAL_GPIO_Init>

  /*Configure GPIO pin : ONBOARD_READ_4_Pin */
  GPIO_InitStruct.Pin = ONBOARD_READ_4_Pin;
 80033fc:	2380      	movs	r3, #128	; 0x80
 80033fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003400:	2300      	movs	r3, #0
 8003402:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003404:	2300      	movs	r3, #0
 8003406:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ONBOARD_READ_4_GPIO_Port, &GPIO_InitStruct);
 8003408:	f107 0314 	add.w	r3, r7, #20
 800340c:	4619      	mov	r1, r3
 800340e:	4806      	ldr	r0, [pc, #24]	; (8003428 <_ZL12MX_GPIO_Initv+0x138>)
 8003410:	f001 ffb6 	bl	8005380 <HAL_GPIO_Init>

}
 8003414:	bf00      	nop
 8003416:	3728      	adds	r7, #40	; 0x28
 8003418:	46bd      	mov	sp, r7
 800341a:	bd80      	pop	{r7, pc}
 800341c:	40023800 	.word	0x40023800
 8003420:	40020000 	.word	0x40020000
 8003424:	40020800 	.word	0x40020800
 8003428:	40020400 	.word	0x40020400

0800342c <HAL_TIM_PeriodElapsedCallback>:
 * @brief Interrupt that is called when any Timer overflows
 * @param htim timer handle
 * @retval none
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800342c:	b480      	push	{r7}
 800342e:	b083      	sub	sp, #12
 8003430:	af00      	add	r7, sp, #0
 8003432:	6078      	str	r0, [r7, #4]
  // }
  // else
  // {
  //   SBUS_RecieveDone = false;
  // }
}
 8003434:	bf00      	nop
 8003436:	370c      	adds	r7, #12
 8003438:	46bd      	mov	sp, r7
 800343a:	bc80      	pop	{r7}
 800343c:	4770      	bx	lr
	...

08003440 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{ 
 8003440:	b580      	push	{r7, lr}
 8003442:	b084      	sub	sp, #16
 8003444:	af00      	add	r7, sp, #0
 8003446:	4603      	mov	r3, r0
 8003448:	80fb      	strh	r3, [r7, #6]
  if (GPIO_Pin == ONBOARD_READ_IT_3_Pin)
 800344a:	88fb      	ldrh	r3, [r7, #6]
 800344c:	2b01      	cmp	r3, #1
 800344e:	d10d      	bne.n	800346c <HAL_GPIO_EXTI_Callback+0x2c>
  {
    uint32_t time = HAL_GetTick();
 8003450:	f001 f828 	bl	80044a4 <HAL_GetTick>
 8003454:	60f8      	str	r0, [r7, #12]
    if (time - PinInterruptLastTime > 3)
 8003456:	4b07      	ldr	r3, [pc, #28]	; (8003474 <HAL_GPIO_EXTI_Callback+0x34>)
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	68fa      	ldr	r2, [r7, #12]
 800345c:	1ad3      	subs	r3, r2, r3
 800345e:	2b03      	cmp	r3, #3
 8003460:	d904      	bls.n	800346c <HAL_GPIO_EXTI_Callback+0x2c>
    {
      PinInterruptLastTime = time;
 8003462:	4a04      	ldr	r2, [pc, #16]	; (8003474 <HAL_GPIO_EXTI_Callback+0x34>)
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	6013      	str	r3, [r2, #0]
      SBUS_RecieveBits();
 8003468:	f7ff faf4 	bl	8002a54 <_Z16SBUS_RecieveBitsv>
    }
  }
}
 800346c:	bf00      	nop
 800346e:	3710      	adds	r7, #16
 8003470:	46bd      	mov	sp, r7
 8003472:	bd80      	pop	{r7, pc}
 8003474:	200006b0 	.word	0x200006b0

08003478 <ADC_Select_Channel_11>:

void ADC_Select_Channel_11()
{
 8003478:	b580      	push	{r7, lr}
 800347a:	b084      	sub	sp, #16
 800347c:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 800347e:	463b      	mov	r3, r7
 8003480:	2200      	movs	r2, #0
 8003482:	601a      	str	r2, [r3, #0]
 8003484:	605a      	str	r2, [r3, #4]
 8003486:	609a      	str	r2, [r3, #8]
 8003488:	60da      	str	r2, [r3, #12]
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 800348a:	230b      	movs	r3, #11
 800348c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800348e:	2301      	movs	r3, #1
 8003490:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 8003492:	2301      	movs	r3, #1
 8003494:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003496:	463b      	mov	r3, r7
 8003498:	4619      	mov	r1, r3
 800349a:	480a      	ldr	r0, [pc, #40]	; (80034c4 <ADC_Select_Channel_11+0x4c>)
 800349c:	f001 f924 	bl	80046e8 <HAL_ADC_ConfigChannel>
 80034a0:	4603      	mov	r3, r0
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	bf14      	ite	ne
 80034a6:	2301      	movne	r3, #1
 80034a8:	2300      	moveq	r3, #0
 80034aa:	b2db      	uxtb	r3, r3
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d001      	beq.n	80034b4 <ADC_Select_Channel_11+0x3c>
  {
    Error_Handler();
 80034b0:	f000 f830 	bl	8003514 <Error_Handler>
  }
  HAL_ADC_Start(&hadc1);
 80034b4:	4803      	ldr	r0, [pc, #12]	; (80034c4 <ADC_Select_Channel_11+0x4c>)
 80034b6:	f001 f867 	bl	8004588 <HAL_ADC_Start>
}
 80034ba:	bf00      	nop
 80034bc:	3710      	adds	r7, #16
 80034be:	46bd      	mov	sp, r7
 80034c0:	bd80      	pop	{r7, pc}
 80034c2:	bf00      	nop
 80034c4:	200003ec 	.word	0x200003ec

080034c8 <ADC_Select_Channel_12>:
void ADC_Select_Channel_12()
{
 80034c8:	b580      	push	{r7, lr}
 80034ca:	b084      	sub	sp, #16
 80034cc:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 80034ce:	463b      	mov	r3, r7
 80034d0:	2200      	movs	r2, #0
 80034d2:	601a      	str	r2, [r3, #0]
 80034d4:	605a      	str	r2, [r3, #4]
 80034d6:	609a      	str	r2, [r3, #8]
 80034d8:	60da      	str	r2, [r3, #12]
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 80034da:	230c      	movs	r3, #12
 80034dc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80034de:	2301      	movs	r3, #1
 80034e0:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80034e2:	463b      	mov	r3, r7
 80034e4:	4619      	mov	r1, r3
 80034e6:	480a      	ldr	r0, [pc, #40]	; (8003510 <ADC_Select_Channel_12+0x48>)
 80034e8:	f001 f8fe 	bl	80046e8 <HAL_ADC_ConfigChannel>
 80034ec:	4603      	mov	r3, r0
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	bf14      	ite	ne
 80034f2:	2301      	movne	r3, #1
 80034f4:	2300      	moveq	r3, #0
 80034f6:	b2db      	uxtb	r3, r3
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d001      	beq.n	8003500 <ADC_Select_Channel_12+0x38>
  {
    Error_Handler();
 80034fc:	f000 f80a 	bl	8003514 <Error_Handler>
  }
  HAL_ADC_Start(&hadc1);
 8003500:	4803      	ldr	r0, [pc, #12]	; (8003510 <ADC_Select_Channel_12+0x48>)
 8003502:	f001 f841 	bl	8004588 <HAL_ADC_Start>
}
 8003506:	bf00      	nop
 8003508:	3710      	adds	r7, #16
 800350a:	46bd      	mov	sp, r7
 800350c:	bd80      	pop	{r7, pc}
 800350e:	bf00      	nop
 8003510:	200003ec 	.word	0x200003ec

08003514 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003514:	b480      	push	{r7}
 8003516:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003518:	b672      	cpsid	i
}
 800351a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800351c:	e7fe      	b.n	800351c <Error_Handler+0x8>
	...

08003520 <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 8003520:	b480      	push	{r7}
 8003522:	b083      	sub	sp, #12
 8003524:	af00      	add	r7, sp, #0
 8003526:	6078      	str	r0, [r7, #4]
 8003528:	6039      	str	r1, [r7, #0]
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	2b01      	cmp	r3, #1
 800352e:	d114      	bne.n	800355a <_Z41__static_initialization_and_destruction_0ii+0x3a>
 8003530:	683b      	ldr	r3, [r7, #0]
 8003532:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003536:	4293      	cmp	r3, r2
 8003538:	d10f      	bne.n	800355a <_Z41__static_initialization_and_destruction_0ii+0x3a>
uint16_t fastPPM_OFFTime = fastPPM_Pulselength - fastPPM_ONTime;//OFF time in microseconds
 800353a:	4b0a      	ldr	r3, [pc, #40]	; (8003564 <_Z41__static_initialization_and_destruction_0ii+0x44>)
 800353c:	881b      	ldrh	r3, [r3, #0]
 800353e:	f5c3 631c 	rsb	r3, r3, #2496	; 0x9c0
 8003542:	3304      	adds	r3, #4
 8003544:	b29a      	uxth	r2, r3
 8003546:	4b08      	ldr	r3, [pc, #32]	; (8003568 <_Z41__static_initialization_and_destruction_0ii+0x48>)
 8003548:	801a      	strh	r2, [r3, #0]
uint16_t slowPPM1_OFFTime = fastPPM_Pulselength - fastPPM_ONTime;//OFF time in microseconds
 800354a:	4b06      	ldr	r3, [pc, #24]	; (8003564 <_Z41__static_initialization_and_destruction_0ii+0x44>)
 800354c:	881b      	ldrh	r3, [r3, #0]
 800354e:	f5c3 631c 	rsb	r3, r3, #2496	; 0x9c0
 8003552:	3304      	adds	r3, #4
 8003554:	b29a      	uxth	r2, r3
 8003556:	4b05      	ldr	r3, [pc, #20]	; (800356c <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 8003558:	801a      	strh	r2, [r3, #0]
}
 800355a:	bf00      	nop
 800355c:	370c      	adds	r7, #12
 800355e:	46bd      	mov	sp, r7
 8003560:	bc80      	pop	{r7}
 8003562:	4770      	bx	lr
 8003564:	20000000 	.word	0x20000000
 8003568:	200006b4 	.word	0x200006b4
 800356c:	200006b6 	.word	0x200006b6

08003570 <_GLOBAL__sub_I_hadc1>:
 8003570:	b580      	push	{r7, lr}
 8003572:	af00      	add	r7, sp, #0
 8003574:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003578:	2001      	movs	r0, #1
 800357a:	f7ff ffd1 	bl	8003520 <_Z41__static_initialization_and_destruction_0ii>
 800357e:	bd80      	pop	{r7, pc}

08003580 <_ZSt4acosf>:
  using ::acos;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  acos(float __x)
  { return __builtin_acosf(__x); }
 8003580:	b580      	push	{r7, lr}
 8003582:	b082      	sub	sp, #8
 8003584:	af00      	add	r7, sp, #0
 8003586:	6078      	str	r0, [r7, #4]
 8003588:	6878      	ldr	r0, [r7, #4]
 800358a:	f009 fb21 	bl	800cbd0 <acosf>
 800358e:	4603      	mov	r3, r0
 8003590:	4618      	mov	r0, r3
 8003592:	3708      	adds	r7, #8
 8003594:	46bd      	mov	sp, r7
 8003596:	bd80      	pop	{r7, pc}

08003598 <_ZSt4atanf>:
  using ::atan;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  atan(float __x)
  { return __builtin_atanf(__x); }
 8003598:	b580      	push	{r7, lr}
 800359a:	b082      	sub	sp, #8
 800359c:	af00      	add	r7, sp, #0
 800359e:	6078      	str	r0, [r7, #4]
 80035a0:	6878      	ldr	r0, [r7, #4]
 80035a2:	f009 fa05 	bl	800c9b0 <atanf>
 80035a6:	4603      	mov	r3, r0
 80035a8:	4618      	mov	r0, r3
 80035aa:	3708      	adds	r7, #8
 80035ac:	46bd      	mov	sp, r7
 80035ae:	bd80      	pop	{r7, pc}

080035b0 <_ZSt4sqrtf>:
  using ::sqrt;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  sqrt(float __x)
  { return __builtin_sqrtf(__x); }
 80035b0:	b580      	push	{r7, lr}
 80035b2:	b082      	sub	sp, #8
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	6078      	str	r0, [r7, #4]
 80035b8:	6878      	ldr	r0, [r7, #4]
 80035ba:	f009 fb2f 	bl	800cc1c <sqrtf>
 80035be:	4603      	mov	r3, r0
 80035c0:	4618      	mov	r0, r3
 80035c2:	3708      	adds	r7, #8
 80035c4:	46bd      	mov	sp, r7
 80035c6:	bd80      	pop	{r7, pc}

080035c8 <_Z4loopv>:
uint16_t adcValuesArray[2];
uint16_t angle;
uint8_t Step = 0;

void loop()
{
 80035c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80035cc:	b0e0      	sub	sp, #384	; 0x180
 80035ce:	af08      	add	r7, sp, #32
  if (TIM4->CNT < 1000)
 80035d0:	4b75      	ldr	r3, [pc, #468]	; (80037a8 <_Z4loopv+0x1e0>)
 80035d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035d4:	f240 32e7 	movw	r2, #999	; 0x3e7
 80035d8:	4293      	cmp	r3, r2
 80035da:	bf94      	ite	ls
 80035dc:	2301      	movls	r3, #1
 80035de:	2300      	movhi	r3, #0
 80035e0:	b2db      	uxtb	r3, r3
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	f000 837f 	beq.w	8003ce6 <_Z4loopv+0x71e>
  {
    switch (Step)
 80035e8:	4b70      	ldr	r3, [pc, #448]	; (80037ac <_Z4loopv+0x1e4>)
 80035ea:	781b      	ldrb	r3, [r3, #0]
 80035ec:	2b05      	cmp	r3, #5
 80035ee:	d00e      	beq.n	800360e <_Z4loopv+0x46>
 80035f0:	2b05      	cmp	r3, #5
 80035f2:	dc10      	bgt.n	8003616 <_Z4loopv+0x4e>
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d002      	beq.n	80035fe <_Z4loopv+0x36>
 80035f8:	2b04      	cmp	r3, #4
 80035fa:	d004      	beq.n	8003606 <_Z4loopv+0x3e>
    case 5:
      HAL_NVIC_DisableIRQ(EXTI0_IRQn);
      break;

    default:
      break;
 80035fc:	e00b      	b.n	8003616 <_Z4loopv+0x4e>
      HAL_NVIC_DisableIRQ(EXTI0_IRQn);
 80035fe:	2006      	movs	r0, #6
 8003600:	f001 fbbd 	bl	8004d7e <HAL_NVIC_DisableIRQ>
      break;
 8003604:	e008      	b.n	8003618 <_Z4loopv+0x50>
      HAL_NVIC_DisableIRQ(EXTI0_IRQn);
 8003606:	2006      	movs	r0, #6
 8003608:	f001 fbb9 	bl	8004d7e <HAL_NVIC_DisableIRQ>
      break;
 800360c:	e004      	b.n	8003618 <_Z4loopv+0x50>
      HAL_NVIC_DisableIRQ(EXTI0_IRQn);
 800360e:	2006      	movs	r0, #6
 8003610:	f001 fbb5 	bl	8004d7e <HAL_NVIC_DisableIRQ>
      break;
 8003614:	e000      	b.n	8003618 <_Z4loopv+0x50>
      break;
 8003616:	bf00      	nop
    }
    //get motor angle and update PPM_OnTime
    ADC_Select_Channel_11();
 8003618:	f7ff ff2e 	bl	8003478 <ADC_Select_Channel_11>
	  adcValuesArray[0] = (uint16_t)ADC1->DR;
 800361c:	4b64      	ldr	r3, [pc, #400]	; (80037b0 <_Z4loopv+0x1e8>)
 800361e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003620:	b29a      	uxth	r2, r3
 8003622:	4b64      	ldr	r3, [pc, #400]	; (80037b4 <_Z4loopv+0x1ec>)
 8003624:	801a      	strh	r2, [r3, #0]
	  ADC_Select_Channel_12();
 8003626:	f7ff ff4f 	bl	80034c8 <ADC_Select_Channel_12>
	  adcValuesArray[1] = (uint16_t)ADC1->DR;
 800362a:	4b61      	ldr	r3, [pc, #388]	; (80037b0 <_Z4loopv+0x1e8>)
 800362c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800362e:	b29a      	uxth	r2, r3
 8003630:	4b60      	ldr	r3, [pc, #384]	; (80037b4 <_Z4loopv+0x1ec>)
 8003632:	805a      	strh	r2, [r3, #2]
    angle = motorAngle(adcValuesArray[1] - 1250, adcValuesArray[0] - 1250);
 8003634:	4b5f      	ldr	r3, [pc, #380]	; (80037b4 <_Z4loopv+0x1ec>)
 8003636:	885b      	ldrh	r3, [r3, #2]
 8003638:	f2a3 43e2 	subw	r3, r3, #1250	; 0x4e2
 800363c:	4a5d      	ldr	r2, [pc, #372]	; (80037b4 <_Z4loopv+0x1ec>)
 800363e:	8812      	ldrh	r2, [r2, #0]
 8003640:	f2a2 42e2 	subw	r2, r2, #1250	; 0x4e2
 8003644:	4611      	mov	r1, r2
 8003646:	4618      	mov	r0, r3
 8003648:	f000 fb76 	bl	8003d38 <_Z10motorAnglell>
 800364c:	4603      	mov	r3, r0
 800364e:	461a      	mov	r2, r3
 8003650:	4b59      	ldr	r3, [pc, #356]	; (80037b8 <_Z4loopv+0x1f0>)
 8003652:	801a      	strh	r2, [r3, #0]
    TIM4->CCR1 = (uint16_t)(fastPPM_MinTime + 500 + ((float)SBUS_Channels[2] / 2) + ((float)sin((angle + 45) * (M_PI / 180)) * ((float)SBUS_Channels[0] / 10)) + ((float)cos((angle + 45) * (M_PI / 180)) * ((float)SBUS_Channels[1] / 10)));
 8003654:	4b59      	ldr	r3, [pc, #356]	; (80037bc <_Z4loopv+0x1f4>)
 8003656:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800365a:	4618      	mov	r0, r3
 800365c:	f7fd fb5c 	bl	8000d18 <__aeabi_i2f>
 8003660:	4603      	mov	r3, r0
 8003662:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8003666:	4618      	mov	r0, r3
 8003668:	f7fd fc5e 	bl	8000f28 <__aeabi_fdiv>
 800366c:	4603      	mov	r3, r0
 800366e:	4954      	ldr	r1, [pc, #336]	; (80037c0 <_Z4loopv+0x1f8>)
 8003670:	4618      	mov	r0, r3
 8003672:	f7fd fa9d 	bl	8000bb0 <__addsf3>
 8003676:	4603      	mov	r3, r0
 8003678:	461d      	mov	r5, r3
 800367a:	4b4f      	ldr	r3, [pc, #316]	; (80037b8 <_Z4loopv+0x1f0>)
 800367c:	881b      	ldrh	r3, [r3, #0]
 800367e:	332d      	adds	r3, #45	; 0x2d
 8003680:	4618      	mov	r0, r3
 8003682:	f7fc fef3 	bl	800046c <__aeabi_i2d>
 8003686:	a346      	add	r3, pc, #280	; (adr r3, 80037a0 <_Z4loopv+0x1d8>)
 8003688:	e9d3 2300 	ldrd	r2, r3, [r3]
 800368c:	f7fc ff58 	bl	8000540 <__aeabi_dmul>
 8003690:	4602      	mov	r2, r0
 8003692:	460b      	mov	r3, r1
 8003694:	4610      	mov	r0, r2
 8003696:	4619      	mov	r1, r3
 8003698:	f009 f944 	bl	800c924 <sin>
 800369c:	4602      	mov	r2, r0
 800369e:	460b      	mov	r3, r1
 80036a0:	4610      	mov	r0, r2
 80036a2:	4619      	mov	r1, r3
 80036a4:	f7fd fa2e 	bl	8000b04 <__aeabi_d2f>
 80036a8:	4604      	mov	r4, r0
 80036aa:	4b44      	ldr	r3, [pc, #272]	; (80037bc <_Z4loopv+0x1f4>)
 80036ac:	f9b3 3000 	ldrsh.w	r3, [r3]
 80036b0:	4618      	mov	r0, r3
 80036b2:	f7fd fb31 	bl	8000d18 <__aeabi_i2f>
 80036b6:	4603      	mov	r3, r0
 80036b8:	4942      	ldr	r1, [pc, #264]	; (80037c4 <_Z4loopv+0x1fc>)
 80036ba:	4618      	mov	r0, r3
 80036bc:	f7fd fc34 	bl	8000f28 <__aeabi_fdiv>
 80036c0:	4603      	mov	r3, r0
 80036c2:	4619      	mov	r1, r3
 80036c4:	4620      	mov	r0, r4
 80036c6:	f7fd fb7b 	bl	8000dc0 <__aeabi_fmul>
 80036ca:	4603      	mov	r3, r0
 80036cc:	4619      	mov	r1, r3
 80036ce:	4628      	mov	r0, r5
 80036d0:	f7fd fa6e 	bl	8000bb0 <__addsf3>
 80036d4:	4603      	mov	r3, r0
 80036d6:	461d      	mov	r5, r3
 80036d8:	4b37      	ldr	r3, [pc, #220]	; (80037b8 <_Z4loopv+0x1f0>)
 80036da:	881b      	ldrh	r3, [r3, #0]
 80036dc:	332d      	adds	r3, #45	; 0x2d
 80036de:	4618      	mov	r0, r3
 80036e0:	f7fc fec4 	bl	800046c <__aeabi_i2d>
 80036e4:	a32e      	add	r3, pc, #184	; (adr r3, 80037a0 <_Z4loopv+0x1d8>)
 80036e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036ea:	f7fc ff29 	bl	8000540 <__aeabi_dmul>
 80036ee:	4602      	mov	r2, r0
 80036f0:	460b      	mov	r3, r1
 80036f2:	4610      	mov	r0, r2
 80036f4:	4619      	mov	r1, r3
 80036f6:	f009 f8d3 	bl	800c8a0 <cos>
 80036fa:	4602      	mov	r2, r0
 80036fc:	460b      	mov	r3, r1
 80036fe:	4610      	mov	r0, r2
 8003700:	4619      	mov	r1, r3
 8003702:	f7fd f9ff 	bl	8000b04 <__aeabi_d2f>
 8003706:	4604      	mov	r4, r0
 8003708:	4b2c      	ldr	r3, [pc, #176]	; (80037bc <_Z4loopv+0x1f4>)
 800370a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800370e:	4618      	mov	r0, r3
 8003710:	f7fd fb02 	bl	8000d18 <__aeabi_i2f>
 8003714:	4603      	mov	r3, r0
 8003716:	492b      	ldr	r1, [pc, #172]	; (80037c4 <_Z4loopv+0x1fc>)
 8003718:	4618      	mov	r0, r3
 800371a:	f7fd fc05 	bl	8000f28 <__aeabi_fdiv>
 800371e:	4603      	mov	r3, r0
 8003720:	4619      	mov	r1, r3
 8003722:	4620      	mov	r0, r4
 8003724:	f7fd fb4c 	bl	8000dc0 <__aeabi_fmul>
 8003728:	4603      	mov	r3, r0
 800372a:	4619      	mov	r1, r3
 800372c:	4628      	mov	r0, r5
 800372e:	f7fd fa3f 	bl	8000bb0 <__addsf3>
 8003732:	4603      	mov	r3, r0
 8003734:	4618      	mov	r0, r3
 8003736:	f7fd fd45 	bl	80011c4 <__aeabi_f2uiz>
 800373a:	4603      	mov	r3, r0
 800373c:	b29a      	uxth	r2, r3
 800373e:	4b1a      	ldr	r3, [pc, #104]	; (80037a8 <_Z4loopv+0x1e0>)
 8003740:	635a      	str	r2, [r3, #52]	; 0x34


    switch (Step)
 8003742:	4b1a      	ldr	r3, [pc, #104]	; (80037ac <_Z4loopv+0x1e4>)
 8003744:	781b      	ldrb	r3, [r3, #0]
 8003746:	2b09      	cmp	r3, #9
 8003748:	f200 82b7 	bhi.w	8003cba <_Z4loopv+0x6f2>
 800374c:	a201      	add	r2, pc, #4	; (adr r2, 8003754 <_Z4loopv+0x18c>)
 800374e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003752:	bf00      	nop
 8003754:	0800377d 	.word	0x0800377d
 8003758:	08003791 	.word	0x08003791
 800375c:	080037cd 	.word	0x080037cd
 8003760:	08003cbb 	.word	0x08003cbb
 8003764:	08003b8f 	.word	0x08003b8f
 8003768:	08003bf3 	.word	0x08003bf3
 800376c:	08003cbb 	.word	0x08003cbb
 8003770:	08003cbb 	.word	0x08003cbb
 8003774:	08003cbb 	.word	0x08003cbb
 8003778:	08003cb3 	.word	0x08003cb3
    {
    case 0:   //get quaternions
      
      writeBit(MPU6050_Adresse, MPU6050_RA_USER_CTRL, MPU6050_USERCTRL_FIFO_RESET_BIT, true); //reset FIFO
 800377c:	2301      	movs	r3, #1
 800377e:	2202      	movs	r2, #2
 8003780:	216a      	movs	r1, #106	; 0x6a
 8003782:	20d0      	movs	r0, #208	; 0xd0
 8003784:	f7fd ffc8 	bl	8001718 <_Z8writeBithhhh>
      HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8003788:	2006      	movs	r0, #6
 800378a:	f001 faea 	bl	8004d62 <HAL_NVIC_EnableIRQ>
      break;
 800378e:	e299      	b.n	8003cc4 <_Z4loopv+0x6fc>
    case 1:
      if (SBUSNewPackage == true)
 8003790:	4b0d      	ldr	r3, [pc, #52]	; (80037c8 <_Z4loopv+0x200>)
 8003792:	781b      	ldrb	r3, [r3, #0]
 8003794:	2b01      	cmp	r3, #1
 8003796:	f040 8292 	bne.w	8003cbe <_Z4loopv+0x6f6>
      {
        SBUS_PostProcessing();
 800379a:	f7ff f9c9 	bl	8002b30 <_Z19SBUS_PostProcessingv>
      }
      break;
 800379e:	e28e      	b.n	8003cbe <_Z4loopv+0x6f6>
 80037a0:	a2529d39 	.word	0xa2529d39
 80037a4:	3f91df46 	.word	0x3f91df46
 80037a8:	40000800 	.word	0x40000800
 80037ac:	200006c2 	.word	0x200006c2
 80037b0:	40012000 	.word	0x40012000
 80037b4:	200006bc 	.word	0x200006bc
 80037b8:	200006c0 	.word	0x200006c0
 80037bc:	200003d8 	.word	0x200003d8
 80037c0:	44bb8000 	.word	0x44bb8000
 80037c4:	41200000 	.word	0x41200000
 80037c8:	200003e9 	.word	0x200003e9
    case 2:
      for (size_t i = 0; i < 1; i++)
 80037cc:	2300      	movs	r3, #0
 80037ce:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80037d2:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	f040 8273 	bne.w	8003cc2 <_Z4loopv+0x6fa>
	      for (size_t i = 0; i < x; i++)
	      {
	      	msgTransmit[i] = msg[i];
	      }
	      CDC_Transmit_FS((unsigned char*)msgTransmit, sizeof(msgTransmit));
      }
 80037dc:	466b      	mov	r3, sp
 80037de:	4698      	mov	r8, r3
	      sprintf((char*)msg," %ld %ld %ld %ld %hd %hd %hd %hd %hd %hd \r\n"                                                                                                                                                                                                                                                  \
 80037e0:	4baf      	ldr	r3, [pc, #700]	; (8003aa0 <_Z4loopv+0x4d8>)
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	61fb      	str	r3, [r7, #28]
 80037e6:	4bae      	ldr	r3, [pc, #696]	; (8003aa0 <_Z4loopv+0x4d8>)
 80037e8:	6859      	ldr	r1, [r3, #4]
 80037ea:	61b9      	str	r1, [r7, #24]
 80037ec:	4bac      	ldr	r3, [pc, #688]	; (8003aa0 <_Z4loopv+0x4d8>)
 80037ee:	6898      	ldr	r0, [r3, #8]
 80037f0:	6178      	str	r0, [r7, #20]
 80037f2:	4bab      	ldr	r3, [pc, #684]	; (8003aa0 <_Z4loopv+0x4d8>)
 80037f4:	68dd      	ldr	r5, [r3, #12]
 80037f6:	613d      	str	r5, [r7, #16]
        , 2 * (int16_t)(((float)atan((float)Quaternions[3] / (float)Quaternions[2]) * 180) / M_PI)                                                                                                                                                                                                                          \
 80037f8:	4ba9      	ldr	r3, [pc, #676]	; (8003aa0 <_Z4loopv+0x4d8>)
 80037fa:	68db      	ldr	r3, [r3, #12]
 80037fc:	4618      	mov	r0, r3
 80037fe:	f7fd fa8b 	bl	8000d18 <__aeabi_i2f>
 8003802:	4604      	mov	r4, r0
 8003804:	4ba6      	ldr	r3, [pc, #664]	; (8003aa0 <_Z4loopv+0x4d8>)
 8003806:	689b      	ldr	r3, [r3, #8]
 8003808:	4618      	mov	r0, r3
 800380a:	f7fd fa85 	bl	8000d18 <__aeabi_i2f>
 800380e:	4603      	mov	r3, r0
 8003810:	4619      	mov	r1, r3
 8003812:	4620      	mov	r0, r4
 8003814:	f7fd fb88 	bl	8000f28 <__aeabi_fdiv>
 8003818:	4603      	mov	r3, r0
 800381a:	4618      	mov	r0, r3
 800381c:	f7ff febc 	bl	8003598 <_ZSt4atanf>
 8003820:	4603      	mov	r3, r0
 8003822:	49a0      	ldr	r1, [pc, #640]	; (8003aa4 <_Z4loopv+0x4dc>)
 8003824:	4618      	mov	r0, r3
 8003826:	f7fd facb 	bl	8000dc0 <__aeabi_fmul>
 800382a:	4603      	mov	r3, r0
 800382c:	4618      	mov	r0, r3
 800382e:	f7fc fe2f 	bl	8000490 <__aeabi_f2d>
 8003832:	a399      	add	r3, pc, #612	; (adr r3, 8003a98 <_Z4loopv+0x4d0>)
 8003834:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003838:	f7fc ffac 	bl	8000794 <__aeabi_ddiv>
 800383c:	4602      	mov	r2, r0
 800383e:	460b      	mov	r3, r1
 8003840:	4610      	mov	r0, r2
 8003842:	4619      	mov	r1, r3
 8003844:	f7fd f916 	bl	8000a74 <__aeabi_d2iz>
 8003848:	4603      	mov	r3, r0
 800384a:	b21b      	sxth	r3, r3
	      sprintf((char*)msg," %ld %ld %ld %ld %hd %hd %hd %hd %hd %hd \r\n"                                                                                                                                                                                                                                                  \
 800384c:	005e      	lsls	r6, r3, #1
 800384e:	60fe      	str	r6, [r7, #12]
        , 2 * (int16_t)(((float)atan((float)Quaternions[3] / (float)Quaternions[1]) * 180) / M_PI)                                                                                                                                                                                                                          \
 8003850:	4b93      	ldr	r3, [pc, #588]	; (8003aa0 <_Z4loopv+0x4d8>)
 8003852:	68db      	ldr	r3, [r3, #12]
 8003854:	4618      	mov	r0, r3
 8003856:	f7fd fa5f 	bl	8000d18 <__aeabi_i2f>
 800385a:	4604      	mov	r4, r0
 800385c:	4b90      	ldr	r3, [pc, #576]	; (8003aa0 <_Z4loopv+0x4d8>)
 800385e:	685b      	ldr	r3, [r3, #4]
 8003860:	4618      	mov	r0, r3
 8003862:	f7fd fa59 	bl	8000d18 <__aeabi_i2f>
 8003866:	4603      	mov	r3, r0
 8003868:	4619      	mov	r1, r3
 800386a:	4620      	mov	r0, r4
 800386c:	f7fd fb5c 	bl	8000f28 <__aeabi_fdiv>
 8003870:	4603      	mov	r3, r0
 8003872:	4618      	mov	r0, r3
 8003874:	f7ff fe90 	bl	8003598 <_ZSt4atanf>
 8003878:	4603      	mov	r3, r0
 800387a:	498a      	ldr	r1, [pc, #552]	; (8003aa4 <_Z4loopv+0x4dc>)
 800387c:	4618      	mov	r0, r3
 800387e:	f7fd fa9f 	bl	8000dc0 <__aeabi_fmul>
 8003882:	4603      	mov	r3, r0
 8003884:	4618      	mov	r0, r3
 8003886:	f7fc fe03 	bl	8000490 <__aeabi_f2d>
 800388a:	a383      	add	r3, pc, #524	; (adr r3, 8003a98 <_Z4loopv+0x4d0>)
 800388c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003890:	f7fc ff80 	bl	8000794 <__aeabi_ddiv>
 8003894:	4602      	mov	r2, r0
 8003896:	460b      	mov	r3, r1
 8003898:	4610      	mov	r0, r2
 800389a:	4619      	mov	r1, r3
 800389c:	f7fd f8ea 	bl	8000a74 <__aeabi_d2iz>
 80038a0:	4603      	mov	r3, r0
 80038a2:	b21b      	sxth	r3, r3
	      sprintf((char*)msg," %ld %ld %ld %ld %hd %hd %hd %hd %hd %hd \r\n"                                                                                                                                                                                                                                                  \
 80038a4:	005a      	lsls	r2, r3, #1
 80038a6:	60ba      	str	r2, [r7, #8]
        , 2 * (int16_t)(((float)atan((float)Quaternions[1] / (float)Quaternions[2]) * 180) / M_PI)                                                                                                                                                                                                                          \
 80038a8:	4b7d      	ldr	r3, [pc, #500]	; (8003aa0 <_Z4loopv+0x4d8>)
 80038aa:	685b      	ldr	r3, [r3, #4]
 80038ac:	4618      	mov	r0, r3
 80038ae:	f7fd fa33 	bl	8000d18 <__aeabi_i2f>
 80038b2:	4604      	mov	r4, r0
 80038b4:	4b7a      	ldr	r3, [pc, #488]	; (8003aa0 <_Z4loopv+0x4d8>)
 80038b6:	689b      	ldr	r3, [r3, #8]
 80038b8:	4618      	mov	r0, r3
 80038ba:	f7fd fa2d 	bl	8000d18 <__aeabi_i2f>
 80038be:	4603      	mov	r3, r0
 80038c0:	4619      	mov	r1, r3
 80038c2:	4620      	mov	r0, r4
 80038c4:	f7fd fb30 	bl	8000f28 <__aeabi_fdiv>
 80038c8:	4603      	mov	r3, r0
 80038ca:	4618      	mov	r0, r3
 80038cc:	f7ff fe64 	bl	8003598 <_ZSt4atanf>
 80038d0:	4603      	mov	r3, r0
 80038d2:	4974      	ldr	r1, [pc, #464]	; (8003aa4 <_Z4loopv+0x4dc>)
 80038d4:	4618      	mov	r0, r3
 80038d6:	f7fd fa73 	bl	8000dc0 <__aeabi_fmul>
 80038da:	4603      	mov	r3, r0
 80038dc:	4618      	mov	r0, r3
 80038de:	f7fc fdd7 	bl	8000490 <__aeabi_f2d>
 80038e2:	a36d      	add	r3, pc, #436	; (adr r3, 8003a98 <_Z4loopv+0x4d0>)
 80038e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038e8:	f7fc ff54 	bl	8000794 <__aeabi_ddiv>
 80038ec:	4602      	mov	r2, r0
 80038ee:	460b      	mov	r3, r1
 80038f0:	4610      	mov	r0, r2
 80038f2:	4619      	mov	r1, r3
 80038f4:	f7fd f8be 	bl	8000a74 <__aeabi_d2iz>
 80038f8:	4603      	mov	r3, r0
 80038fa:	b21b      	sxth	r3, r3
	      sprintf((char*)msg," %ld %ld %ld %ld %hd %hd %hd %hd %hd %hd \r\n"                                                                                                                                                                                                                                                  \
 80038fc:	0059      	lsls	r1, r3, #1
 80038fe:	6079      	str	r1, [r7, #4]
        , 2 * (int16_t)(((float)atan((float)Quaternions[0] / (float)Quaternions[1]) * 180) / M_PI)                                                                                                                                                                                                                          \
 8003900:	4b67      	ldr	r3, [pc, #412]	; (8003aa0 <_Z4loopv+0x4d8>)
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	4618      	mov	r0, r3
 8003906:	f7fd fa07 	bl	8000d18 <__aeabi_i2f>
 800390a:	4604      	mov	r4, r0
 800390c:	4b64      	ldr	r3, [pc, #400]	; (8003aa0 <_Z4loopv+0x4d8>)
 800390e:	685b      	ldr	r3, [r3, #4]
 8003910:	4618      	mov	r0, r3
 8003912:	f7fd fa01 	bl	8000d18 <__aeabi_i2f>
 8003916:	4603      	mov	r3, r0
 8003918:	4619      	mov	r1, r3
 800391a:	4620      	mov	r0, r4
 800391c:	f7fd fb04 	bl	8000f28 <__aeabi_fdiv>
 8003920:	4603      	mov	r3, r0
 8003922:	4618      	mov	r0, r3
 8003924:	f7ff fe38 	bl	8003598 <_ZSt4atanf>
 8003928:	4603      	mov	r3, r0
 800392a:	495e      	ldr	r1, [pc, #376]	; (8003aa4 <_Z4loopv+0x4dc>)
 800392c:	4618      	mov	r0, r3
 800392e:	f7fd fa47 	bl	8000dc0 <__aeabi_fmul>
 8003932:	4603      	mov	r3, r0
 8003934:	4618      	mov	r0, r3
 8003936:	f7fc fdab 	bl	8000490 <__aeabi_f2d>
 800393a:	a357      	add	r3, pc, #348	; (adr r3, 8003a98 <_Z4loopv+0x4d0>)
 800393c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003940:	f7fc ff28 	bl	8000794 <__aeabi_ddiv>
 8003944:	4602      	mov	r2, r0
 8003946:	460b      	mov	r3, r1
 8003948:	4610      	mov	r0, r2
 800394a:	4619      	mov	r1, r3
 800394c:	f7fd f892 	bl	8000a74 <__aeabi_d2iz>
 8003950:	4603      	mov	r3, r0
 8003952:	b21b      	sxth	r3, r3
	      sprintf((char*)msg," %ld %ld %ld %ld %hd %hd %hd %hd %hd %hd \r\n"                                                                                                                                                                                                                                                  \
 8003954:	0058      	lsls	r0, r3, #1
 8003956:	6038      	str	r0, [r7, #0]
        , 2 * (int16_t)(((float)acos((float)Quaternions[0] / (float)1073741824) * 180) / M_PI)                                                                                                                                                                                                                              \
 8003958:	4b51      	ldr	r3, [pc, #324]	; (8003aa0 <_Z4loopv+0x4d8>)
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	4618      	mov	r0, r3
 800395e:	f7fd f9db 	bl	8000d18 <__aeabi_i2f>
 8003962:	4603      	mov	r3, r0
 8003964:	f04f 419d 	mov.w	r1, #1317011456	; 0x4e800000
 8003968:	4618      	mov	r0, r3
 800396a:	f7fd fadd 	bl	8000f28 <__aeabi_fdiv>
 800396e:	4603      	mov	r3, r0
 8003970:	4618      	mov	r0, r3
 8003972:	f7ff fe05 	bl	8003580 <_ZSt4acosf>
 8003976:	4603      	mov	r3, r0
 8003978:	494a      	ldr	r1, [pc, #296]	; (8003aa4 <_Z4loopv+0x4dc>)
 800397a:	4618      	mov	r0, r3
 800397c:	f7fd fa20 	bl	8000dc0 <__aeabi_fmul>
 8003980:	4603      	mov	r3, r0
 8003982:	4618      	mov	r0, r3
 8003984:	f7fc fd84 	bl	8000490 <__aeabi_f2d>
 8003988:	a343      	add	r3, pc, #268	; (adr r3, 8003a98 <_Z4loopv+0x4d0>)
 800398a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800398e:	f7fc ff01 	bl	8000794 <__aeabi_ddiv>
 8003992:	4602      	mov	r2, r0
 8003994:	460b      	mov	r3, r1
 8003996:	4610      	mov	r0, r2
 8003998:	4619      	mov	r1, r3
 800399a:	f7fd f86b 	bl	8000a74 <__aeabi_d2iz>
 800399e:	4603      	mov	r3, r0
 80039a0:	b21b      	sxth	r3, r3
	      sprintf((char*)msg," %ld %ld %ld %ld %hd %hd %hd %hd %hd %hd \r\n"                                                                                                                                                                                                                                                  \
 80039a2:	005e      	lsls	r6, r3, #1
        , (int16_t)((float)sqrt((((float)Quaternions[1] / (float)1073741824) * ((float)Quaternions[1] / (float)1073741824)) + (((float)Quaternions[2] / (float)1073741824) * ((float)Quaternions[2] / (float)1073741824)) + (((float)Quaternions[3] / (float)1073741824) * ((float)Quaternions[3] / (float)1073741824))))); \
 80039a4:	4b3e      	ldr	r3, [pc, #248]	; (8003aa0 <_Z4loopv+0x4d8>)
 80039a6:	685b      	ldr	r3, [r3, #4]
 80039a8:	4618      	mov	r0, r3
 80039aa:	f7fd f9b5 	bl	8000d18 <__aeabi_i2f>
 80039ae:	4603      	mov	r3, r0
 80039b0:	f04f 419d 	mov.w	r1, #1317011456	; 0x4e800000
 80039b4:	4618      	mov	r0, r3
 80039b6:	f7fd fab7 	bl	8000f28 <__aeabi_fdiv>
 80039ba:	4603      	mov	r3, r0
 80039bc:	461c      	mov	r4, r3
 80039be:	4b38      	ldr	r3, [pc, #224]	; (8003aa0 <_Z4loopv+0x4d8>)
 80039c0:	685b      	ldr	r3, [r3, #4]
 80039c2:	4618      	mov	r0, r3
 80039c4:	f7fd f9a8 	bl	8000d18 <__aeabi_i2f>
 80039c8:	4603      	mov	r3, r0
 80039ca:	f04f 419d 	mov.w	r1, #1317011456	; 0x4e800000
 80039ce:	4618      	mov	r0, r3
 80039d0:	f7fd faaa 	bl	8000f28 <__aeabi_fdiv>
 80039d4:	4603      	mov	r3, r0
 80039d6:	4619      	mov	r1, r3
 80039d8:	4620      	mov	r0, r4
 80039da:	f7fd f9f1 	bl	8000dc0 <__aeabi_fmul>
 80039de:	4603      	mov	r3, r0
 80039e0:	461d      	mov	r5, r3
 80039e2:	4b2f      	ldr	r3, [pc, #188]	; (8003aa0 <_Z4loopv+0x4d8>)
 80039e4:	689b      	ldr	r3, [r3, #8]
 80039e6:	4618      	mov	r0, r3
 80039e8:	f7fd f996 	bl	8000d18 <__aeabi_i2f>
 80039ec:	4603      	mov	r3, r0
 80039ee:	f04f 419d 	mov.w	r1, #1317011456	; 0x4e800000
 80039f2:	4618      	mov	r0, r3
 80039f4:	f7fd fa98 	bl	8000f28 <__aeabi_fdiv>
 80039f8:	4603      	mov	r3, r0
 80039fa:	461c      	mov	r4, r3
 80039fc:	4b28      	ldr	r3, [pc, #160]	; (8003aa0 <_Z4loopv+0x4d8>)
 80039fe:	689b      	ldr	r3, [r3, #8]
 8003a00:	4618      	mov	r0, r3
 8003a02:	f7fd f989 	bl	8000d18 <__aeabi_i2f>
 8003a06:	4603      	mov	r3, r0
 8003a08:	f04f 419d 	mov.w	r1, #1317011456	; 0x4e800000
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	f7fd fa8b 	bl	8000f28 <__aeabi_fdiv>
 8003a12:	4603      	mov	r3, r0
 8003a14:	4619      	mov	r1, r3
 8003a16:	4620      	mov	r0, r4
 8003a18:	f7fd f9d2 	bl	8000dc0 <__aeabi_fmul>
 8003a1c:	4603      	mov	r3, r0
 8003a1e:	4619      	mov	r1, r3
 8003a20:	4628      	mov	r0, r5
 8003a22:	f7fd f8c5 	bl	8000bb0 <__addsf3>
 8003a26:	4603      	mov	r3, r0
 8003a28:	461d      	mov	r5, r3
 8003a2a:	4b1d      	ldr	r3, [pc, #116]	; (8003aa0 <_Z4loopv+0x4d8>)
 8003a2c:	68db      	ldr	r3, [r3, #12]
 8003a2e:	4618      	mov	r0, r3
 8003a30:	f7fd f972 	bl	8000d18 <__aeabi_i2f>
 8003a34:	4603      	mov	r3, r0
 8003a36:	f04f 419d 	mov.w	r1, #1317011456	; 0x4e800000
 8003a3a:	4618      	mov	r0, r3
 8003a3c:	f7fd fa74 	bl	8000f28 <__aeabi_fdiv>
 8003a40:	4603      	mov	r3, r0
 8003a42:	461c      	mov	r4, r3
 8003a44:	4b16      	ldr	r3, [pc, #88]	; (8003aa0 <_Z4loopv+0x4d8>)
 8003a46:	68db      	ldr	r3, [r3, #12]
 8003a48:	4618      	mov	r0, r3
 8003a4a:	f7fd f965 	bl	8000d18 <__aeabi_i2f>
 8003a4e:	4603      	mov	r3, r0
 8003a50:	f04f 419d 	mov.w	r1, #1317011456	; 0x4e800000
 8003a54:	4618      	mov	r0, r3
 8003a56:	f7fd fa67 	bl	8000f28 <__aeabi_fdiv>
 8003a5a:	4603      	mov	r3, r0
 8003a5c:	4619      	mov	r1, r3
 8003a5e:	4620      	mov	r0, r4
 8003a60:	f7fd f9ae 	bl	8000dc0 <__aeabi_fmul>
 8003a64:	4603      	mov	r3, r0
 8003a66:	4619      	mov	r1, r3
 8003a68:	4628      	mov	r0, r5
 8003a6a:	f7fd f8a1 	bl	8000bb0 <__addsf3>
 8003a6e:	4603      	mov	r3, r0
 8003a70:	4618      	mov	r0, r3
 8003a72:	f7ff fd9d 	bl	80035b0 <_ZSt4sqrtf>
 8003a76:	4603      	mov	r3, r0
 8003a78:	4618      	mov	r0, r3
 8003a7a:	f7fd fb7d 	bl	8001178 <__aeabi_f2iz>
 8003a7e:	4603      	mov	r3, r0
 8003a80:	b21b      	sxth	r3, r3
	      sprintf((char*)msg," %ld %ld %ld %ld %hd %hd %hd %hd %hd %hd \r\n"                                                                                                                                                                                                                                                  \
 8003a82:	f107 0020 	add.w	r0, r7, #32
 8003a86:	9307      	str	r3, [sp, #28]
 8003a88:	9606      	str	r6, [sp, #24]
 8003a8a:	683c      	ldr	r4, [r7, #0]
 8003a8c:	9405      	str	r4, [sp, #20]
 8003a8e:	6879      	ldr	r1, [r7, #4]
 8003a90:	9104      	str	r1, [sp, #16]
 8003a92:	e009      	b.n	8003aa8 <_Z4loopv+0x4e0>
 8003a94:	f3af 8000 	nop.w
 8003a98:	54442d18 	.word	0x54442d18
 8003a9c:	400921fb 	.word	0x400921fb
 8003aa0:	20000318 	.word	0x20000318
 8003aa4:	43340000 	.word	0x43340000
 8003aa8:	68ba      	ldr	r2, [r7, #8]
 8003aaa:	9203      	str	r2, [sp, #12]
 8003aac:	68fe      	ldr	r6, [r7, #12]
 8003aae:	9602      	str	r6, [sp, #8]
 8003ab0:	693d      	ldr	r5, [r7, #16]
 8003ab2:	9501      	str	r5, [sp, #4]
 8003ab4:	697c      	ldr	r4, [r7, #20]
 8003ab6:	9400      	str	r4, [sp, #0]
 8003ab8:	69bb      	ldr	r3, [r7, #24]
 8003aba:	69fa      	ldr	r2, [r7, #28]
 8003abc:	4996      	ldr	r1, [pc, #600]	; (8003d18 <_Z4loopv+0x750>)
 8003abe:	f00a fb4f 	bl	800e160 <siprintf>
	      uint8_t x = 0;
 8003ac2:	2300      	movs	r3, #0
 8003ac4:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
	      while (msg[x] != NULL)
 8003ac8:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003acc:	f107 0220 	add.w	r2, r7, #32
 8003ad0:	5cd3      	ldrb	r3, [r2, r3]
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d005      	beq.n	8003ae2 <_Z4loopv+0x51a>
	      	x++;
 8003ad6:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003ada:	3301      	adds	r3, #1
 8003adc:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
	      while (msg[x] != NULL)
 8003ae0:	e7f2      	b.n	8003ac8 <_Z4loopv+0x500>
	      unsigned char msgTransmit[x];
 8003ae2:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003ae6:	1e5c      	subs	r4, r3, #1
 8003ae8:	f8c7 4150 	str.w	r4, [r7, #336]	; 0x150
 8003aec:	4623      	mov	r3, r4
 8003aee:	3301      	adds	r3, #1
 8003af0:	4618      	mov	r0, r3
 8003af2:	f04f 0100 	mov.w	r1, #0
 8003af6:	f04f 0200 	mov.w	r2, #0
 8003afa:	f04f 0300 	mov.w	r3, #0
 8003afe:	00cb      	lsls	r3, r1, #3
 8003b00:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8003b04:	00c2      	lsls	r2, r0, #3
 8003b06:	4623      	mov	r3, r4
 8003b08:	3301      	adds	r3, #1
 8003b0a:	4618      	mov	r0, r3
 8003b0c:	f04f 0100 	mov.w	r1, #0
 8003b10:	f04f 0200 	mov.w	r2, #0
 8003b14:	f04f 0300 	mov.w	r3, #0
 8003b18:	00cb      	lsls	r3, r1, #3
 8003b1a:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8003b1e:	00c2      	lsls	r2, r0, #3
 8003b20:	4623      	mov	r3, r4
 8003b22:	3301      	adds	r3, #1
 8003b24:	3307      	adds	r3, #7
 8003b26:	08db      	lsrs	r3, r3, #3
 8003b28:	00db      	lsls	r3, r3, #3
 8003b2a:	ebad 0d03 	sub.w	sp, sp, r3
 8003b2e:	ab08      	add	r3, sp, #32
 8003b30:	3300      	adds	r3, #0
 8003b32:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
	      for (size_t i = 0; i < x; i++)
 8003b36:	2300      	movs	r3, #0
 8003b38:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
 8003b3c:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003b40:	f8d7 215c 	ldr.w	r2, [r7, #348]	; 0x15c
 8003b44:	429a      	cmp	r2, r3
 8003b46:	d212      	bcs.n	8003b6e <_Z4loopv+0x5a6>
	      	msgTransmit[i] = msg[i];
 8003b48:	f107 0220 	add.w	r2, r7, #32
 8003b4c:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8003b50:	4413      	add	r3, r2
 8003b52:	7819      	ldrb	r1, [r3, #0]
 8003b54:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8003b58:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8003b5c:	4413      	add	r3, r2
 8003b5e:	460a      	mov	r2, r1
 8003b60:	701a      	strb	r2, [r3, #0]
	      for (size_t i = 0; i < x; i++)
 8003b62:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8003b66:	3301      	adds	r3, #1
 8003b68:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
 8003b6c:	e7e6      	b.n	8003b3c <_Z4loopv+0x574>
	      CDC_Transmit_FS((unsigned char*)msgTransmit, sizeof(msgTransmit));
 8003b6e:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8003b72:	b2a3      	uxth	r3, r4
 8003b74:	3301      	adds	r3, #1
 8003b76:	b29b      	uxth	r3, r3
 8003b78:	4619      	mov	r1, r3
 8003b7a:	4610      	mov	r0, r2
 8003b7c:	f008 fa5e 	bl	800c03c <CDC_Transmit_FS>
 8003b80:	46c5      	mov	sp, r8
      for (size_t i = 0; i < 1; i++)
 8003b82:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8003b86:	3301      	adds	r3, #1
 8003b88:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8003b8c:	e621      	b.n	80037d2 <_Z4loopv+0x20a>
      break;
    case 3:
      
      break;
    case 4:
      readBytes(MPU6050_Adresse, MPU6050_RA_FIFO_COUNTH, 2, MPU6050_RX_buf);  //get FIFO count
 8003b8e:	4b63      	ldr	r3, [pc, #396]	; (8003d1c <_Z4loopv+0x754>)
 8003b90:	2202      	movs	r2, #2
 8003b92:	2172      	movs	r1, #114	; 0x72
 8003b94:	20d0      	movs	r0, #208	; 0xd0
 8003b96:	f7fd fd49 	bl	800162c <_Z9readByteshhhPh>
      FIFOCounter = (((uint16_t)MPU6050_RX_buf[0]) << 8) | MPU6050_RX_buf[1];
 8003b9a:	4b60      	ldr	r3, [pc, #384]	; (8003d1c <_Z4loopv+0x754>)
 8003b9c:	781b      	ldrb	r3, [r3, #0]
 8003b9e:	021b      	lsls	r3, r3, #8
 8003ba0:	b21a      	sxth	r2, r3
 8003ba2:	4b5e      	ldr	r3, [pc, #376]	; (8003d1c <_Z4loopv+0x754>)
 8003ba4:	785b      	ldrb	r3, [r3, #1]
 8003ba6:	b21b      	sxth	r3, r3
 8003ba8:	4313      	orrs	r3, r2
 8003baa:	b21b      	sxth	r3, r3
 8003bac:	b29a      	uxth	r2, r3
 8003bae:	4b5c      	ldr	r3, [pc, #368]	; (8003d20 <_Z4loopv+0x758>)
 8003bb0:	801a      	strh	r2, [r3, #0]
      while (FIFOCounter < 42)
 8003bb2:	4b5b      	ldr	r3, [pc, #364]	; (8003d20 <_Z4loopv+0x758>)
 8003bb4:	881b      	ldrh	r3, [r3, #0]
 8003bb6:	2b29      	cmp	r3, #41	; 0x29
 8003bb8:	d817      	bhi.n	8003bea <_Z4loopv+0x622>
      {
        HAL_GPIO_TogglePin(ONBOARD_WRITE_2_GPIO_Port, ONBOARD_WRITE_2_Pin);   //debug Pin
 8003bba:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003bbe:	4859      	ldr	r0, [pc, #356]	; (8003d24 <_Z4loopv+0x75c>)
 8003bc0:	f001 fd94 	bl	80056ec <HAL_GPIO_TogglePin>
        readBytes(MPU6050_Adresse, MPU6050_RA_FIFO_COUNTH, 2, MPU6050_RX_buf);  //get FIFO count
 8003bc4:	4b55      	ldr	r3, [pc, #340]	; (8003d1c <_Z4loopv+0x754>)
 8003bc6:	2202      	movs	r2, #2
 8003bc8:	2172      	movs	r1, #114	; 0x72
 8003bca:	20d0      	movs	r0, #208	; 0xd0
 8003bcc:	f7fd fd2e 	bl	800162c <_Z9readByteshhhPh>
        FIFOCounter = (((uint16_t)MPU6050_RX_buf[0]) << 8) | MPU6050_RX_buf[1];
 8003bd0:	4b52      	ldr	r3, [pc, #328]	; (8003d1c <_Z4loopv+0x754>)
 8003bd2:	781b      	ldrb	r3, [r3, #0]
 8003bd4:	021b      	lsls	r3, r3, #8
 8003bd6:	b21a      	sxth	r2, r3
 8003bd8:	4b50      	ldr	r3, [pc, #320]	; (8003d1c <_Z4loopv+0x754>)
 8003bda:	785b      	ldrb	r3, [r3, #1]
 8003bdc:	b21b      	sxth	r3, r3
 8003bde:	4313      	orrs	r3, r2
 8003be0:	b21b      	sxth	r3, r3
 8003be2:	b29a      	uxth	r2, r3
 8003be4:	4b4e      	ldr	r3, [pc, #312]	; (8003d20 <_Z4loopv+0x758>)
 8003be6:	801a      	strh	r2, [r3, #0]
      while (FIFOCounter < 42)
 8003be8:	e7e3      	b.n	8003bb2 <_Z4loopv+0x5ea>
      }
      HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8003bea:	2006      	movs	r0, #6
 8003bec:	f001 f8b9 	bl	8004d62 <HAL_NVIC_EnableIRQ>
      break;
 8003bf0:	e068      	b.n	8003cc4 <_Z4loopv+0x6fc>
    case 5:
      if ((FIFOCounter == 42) | (FIFOCounter == 84))
 8003bf2:	4b4b      	ldr	r3, [pc, #300]	; (8003d20 <_Z4loopv+0x758>)
 8003bf4:	881b      	ldrh	r3, [r3, #0]
 8003bf6:	2b2a      	cmp	r3, #42	; 0x2a
 8003bf8:	bf0c      	ite	eq
 8003bfa:	2301      	moveq	r3, #1
 8003bfc:	2300      	movne	r3, #0
 8003bfe:	b2da      	uxtb	r2, r3
 8003c00:	4b47      	ldr	r3, [pc, #284]	; (8003d20 <_Z4loopv+0x758>)
 8003c02:	881b      	ldrh	r3, [r3, #0]
 8003c04:	2b54      	cmp	r3, #84	; 0x54
 8003c06:	bf0c      	ite	eq
 8003c08:	2301      	moveq	r3, #1
 8003c0a:	2300      	movne	r3, #0
 8003c0c:	b2db      	uxtb	r3, r3
 8003c0e:	4313      	orrs	r3, r2
 8003c10:	b2db      	uxtb	r3, r3
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d049      	beq.n	8003caa <_Z4loopv+0x6e2>
      {
        readBytes(MPU6050_Adresse, MPU6050_RA_FIFO_R_W, 16, MPU6050_RX_buf);      //get FIFO data
 8003c16:	4b41      	ldr	r3, [pc, #260]	; (8003d1c <_Z4loopv+0x754>)
 8003c18:	2210      	movs	r2, #16
 8003c1a:	2174      	movs	r1, #116	; 0x74
 8003c1c:	20d0      	movs	r0, #208	; 0xd0
 8003c1e:	f7fd fd05 	bl	800162c <_Z9readByteshhhPh>
        Quaternions[0] = (((uint32_t)MPU6050_RX_buf[0] << 24) |  ((uint32_t)MPU6050_RX_buf[1] << 16) |  ((uint32_t)MPU6050_RX_buf[2] << 8) |  MPU6050_RX_buf[3]);
 8003c22:	4b3e      	ldr	r3, [pc, #248]	; (8003d1c <_Z4loopv+0x754>)
 8003c24:	781b      	ldrb	r3, [r3, #0]
 8003c26:	061a      	lsls	r2, r3, #24
 8003c28:	4b3c      	ldr	r3, [pc, #240]	; (8003d1c <_Z4loopv+0x754>)
 8003c2a:	785b      	ldrb	r3, [r3, #1]
 8003c2c:	041b      	lsls	r3, r3, #16
 8003c2e:	431a      	orrs	r2, r3
 8003c30:	4b3a      	ldr	r3, [pc, #232]	; (8003d1c <_Z4loopv+0x754>)
 8003c32:	789b      	ldrb	r3, [r3, #2]
 8003c34:	021b      	lsls	r3, r3, #8
 8003c36:	4313      	orrs	r3, r2
 8003c38:	4a38      	ldr	r2, [pc, #224]	; (8003d1c <_Z4loopv+0x754>)
 8003c3a:	78d2      	ldrb	r2, [r2, #3]
 8003c3c:	4313      	orrs	r3, r2
 8003c3e:	461a      	mov	r2, r3
 8003c40:	4b39      	ldr	r3, [pc, #228]	; (8003d28 <_Z4loopv+0x760>)
 8003c42:	601a      	str	r2, [r3, #0]
        Quaternions[1] = (((uint32_t)MPU6050_RX_buf[4] << 24) |  ((uint32_t)MPU6050_RX_buf[5] << 16) |  ((uint32_t)MPU6050_RX_buf[6] << 8) |  MPU6050_RX_buf[7]);
 8003c44:	4b35      	ldr	r3, [pc, #212]	; (8003d1c <_Z4loopv+0x754>)
 8003c46:	791b      	ldrb	r3, [r3, #4]
 8003c48:	061a      	lsls	r2, r3, #24
 8003c4a:	4b34      	ldr	r3, [pc, #208]	; (8003d1c <_Z4loopv+0x754>)
 8003c4c:	795b      	ldrb	r3, [r3, #5]
 8003c4e:	041b      	lsls	r3, r3, #16
 8003c50:	431a      	orrs	r2, r3
 8003c52:	4b32      	ldr	r3, [pc, #200]	; (8003d1c <_Z4loopv+0x754>)
 8003c54:	799b      	ldrb	r3, [r3, #6]
 8003c56:	021b      	lsls	r3, r3, #8
 8003c58:	4313      	orrs	r3, r2
 8003c5a:	4a30      	ldr	r2, [pc, #192]	; (8003d1c <_Z4loopv+0x754>)
 8003c5c:	79d2      	ldrb	r2, [r2, #7]
 8003c5e:	4313      	orrs	r3, r2
 8003c60:	461a      	mov	r2, r3
 8003c62:	4b31      	ldr	r3, [pc, #196]	; (8003d28 <_Z4loopv+0x760>)
 8003c64:	605a      	str	r2, [r3, #4]
        Quaternions[2] = (((uint32_t)MPU6050_RX_buf[8] << 24) |  ((uint32_t)MPU6050_RX_buf[9] << 16) |  ((uint32_t)MPU6050_RX_buf[10] << 8) | MPU6050_RX_buf[11]);
 8003c66:	4b2d      	ldr	r3, [pc, #180]	; (8003d1c <_Z4loopv+0x754>)
 8003c68:	7a1b      	ldrb	r3, [r3, #8]
 8003c6a:	061a      	lsls	r2, r3, #24
 8003c6c:	4b2b      	ldr	r3, [pc, #172]	; (8003d1c <_Z4loopv+0x754>)
 8003c6e:	7a5b      	ldrb	r3, [r3, #9]
 8003c70:	041b      	lsls	r3, r3, #16
 8003c72:	431a      	orrs	r2, r3
 8003c74:	4b29      	ldr	r3, [pc, #164]	; (8003d1c <_Z4loopv+0x754>)
 8003c76:	7a9b      	ldrb	r3, [r3, #10]
 8003c78:	021b      	lsls	r3, r3, #8
 8003c7a:	4313      	orrs	r3, r2
 8003c7c:	4a27      	ldr	r2, [pc, #156]	; (8003d1c <_Z4loopv+0x754>)
 8003c7e:	7ad2      	ldrb	r2, [r2, #11]
 8003c80:	4313      	orrs	r3, r2
 8003c82:	461a      	mov	r2, r3
 8003c84:	4b28      	ldr	r3, [pc, #160]	; (8003d28 <_Z4loopv+0x760>)
 8003c86:	609a      	str	r2, [r3, #8]
        Quaternions[3] = (((uint32_t)MPU6050_RX_buf[12] << 24) | ((uint32_t)MPU6050_RX_buf[13] << 16) | ((uint32_t)MPU6050_RX_buf[14] << 8) | MPU6050_RX_buf[15]);
 8003c88:	4b24      	ldr	r3, [pc, #144]	; (8003d1c <_Z4loopv+0x754>)
 8003c8a:	7b1b      	ldrb	r3, [r3, #12]
 8003c8c:	061a      	lsls	r2, r3, #24
 8003c8e:	4b23      	ldr	r3, [pc, #140]	; (8003d1c <_Z4loopv+0x754>)
 8003c90:	7b5b      	ldrb	r3, [r3, #13]
 8003c92:	041b      	lsls	r3, r3, #16
 8003c94:	431a      	orrs	r2, r3
 8003c96:	4b21      	ldr	r3, [pc, #132]	; (8003d1c <_Z4loopv+0x754>)
 8003c98:	7b9b      	ldrb	r3, [r3, #14]
 8003c9a:	021b      	lsls	r3, r3, #8
 8003c9c:	4313      	orrs	r3, r2
 8003c9e:	4a1f      	ldr	r2, [pc, #124]	; (8003d1c <_Z4loopv+0x754>)
 8003ca0:	7bd2      	ldrb	r2, [r2, #15]
 8003ca2:	4313      	orrs	r3, r2
 8003ca4:	461a      	mov	r2, r3
 8003ca6:	4b20      	ldr	r3, [pc, #128]	; (8003d28 <_Z4loopv+0x760>)
 8003ca8:	60da      	str	r2, [r3, #12]
      }
      HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8003caa:	2006      	movs	r0, #6
 8003cac:	f001 f859 	bl	8004d62 <HAL_NVIC_EnableIRQ>
      break;
 8003cb0:	e008      	b.n	8003cc4 <_Z4loopv+0x6fc>
    case 9:
      Step = 255;
 8003cb2:	4b1e      	ldr	r3, [pc, #120]	; (8003d2c <_Z4loopv+0x764>)
 8003cb4:	22ff      	movs	r2, #255	; 0xff
 8003cb6:	701a      	strb	r2, [r3, #0]
      break;
 8003cb8:	e004      	b.n	8003cc4 <_Z4loopv+0x6fc>
    default:
      break;
 8003cba:	bf00      	nop
 8003cbc:	e002      	b.n	8003cc4 <_Z4loopv+0x6fc>
      break;
 8003cbe:	bf00      	nop
 8003cc0:	e000      	b.n	8003cc4 <_Z4loopv+0x6fc>
      break;
 8003cc2:	bf00      	nop
    }
    Step ++;
 8003cc4:	4b19      	ldr	r3, [pc, #100]	; (8003d2c <_Z4loopv+0x764>)
 8003cc6:	781b      	ldrb	r3, [r3, #0]
 8003cc8:	3301      	adds	r3, #1
 8003cca:	b2da      	uxtb	r2, r3
 8003ccc:	4b17      	ldr	r3, [pc, #92]	; (8003d2c <_Z4loopv+0x764>)
 8003cce:	701a      	strb	r2, [r3, #0]
    while (TIM4->CNT <= 1000)
 8003cd0:	4b17      	ldr	r3, [pc, #92]	; (8003d30 <_Z4loopv+0x768>)
 8003cd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cd4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003cd8:	bf94      	ite	ls
 8003cda:	2301      	movls	r3, #1
 8003cdc:	2300      	movhi	r3, #0
 8003cde:	b2db      	uxtb	r3, r3
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d000      	beq.n	8003ce6 <_Z4loopv+0x71e>
 8003ce4:	e7f4      	b.n	8003cd0 <_Z4loopv+0x708>
    {
    }
  }
  
  if ((HAL_GetTick() - timestamp) >= 50)
 8003ce6:	f000 fbdd 	bl	80044a4 <HAL_GetTick>
 8003cea:	4602      	mov	r2, r0
 8003cec:	4b11      	ldr	r3, [pc, #68]	; (8003d34 <_Z4loopv+0x76c>)
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	1ad3      	subs	r3, r2, r3
 8003cf2:	2b31      	cmp	r3, #49	; 0x31
 8003cf4:	bf8c      	ite	hi
 8003cf6:	2301      	movhi	r3, #1
 8003cf8:	2300      	movls	r3, #0
 8003cfa:	b2db      	uxtb	r3, r3
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d004      	beq.n	8003d0a <_Z4loopv+0x742>
  {
    timestamp += 50;
 8003d00:	4b0c      	ldr	r3, [pc, #48]	; (8003d34 <_Z4loopv+0x76c>)
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	3332      	adds	r3, #50	; 0x32
 8003d06:	4a0b      	ldr	r2, [pc, #44]	; (8003d34 <_Z4loopv+0x76c>)
 8003d08:	6013      	str	r3, [r2, #0]
  //// fastPPM_ONTime = (uint16_t)((((float)angle * (float)fastPPM_MinTime) / (float)360) + (float)fastPPM_MinTime);
  //fastPPM_ONTime = (uint16_t)(fastPPM_MinTime + ((float)SBUS_Channels[2] / 2));
  //fastPPM_OFFTime = fastPPM_Pulselength - fastPPM_ONTime;//OFF time in microseconds
  //TIM4->CCR1 = (uint16_t)(fastPPM_MinTime + 500 + ((float)SBUS_Channels[2] / 2) + ((float)sin((angle + 0) * (M_PI / 180)) * ((float)SBUS_Channels[0] / -10)) + ((float)cos((angle + 0) * (M_PI / 180)) * ((float)SBUS_Channels[1] / -10)));
  }
}
 8003d0a:	bf00      	nop
 8003d0c:	f507 77b0 	add.w	r7, r7, #352	; 0x160
 8003d10:	46bd      	mov	sp, r7
 8003d12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003d16:	bf00      	nop
 8003d18:	0800e880 	.word	0x0800e880
 8003d1c:	20000308 	.word	0x20000308
 8003d20:	20000328 	.word	0x20000328
 8003d24:	40020800 	.word	0x40020800
 8003d28:	20000318 	.word	0x20000318
 8003d2c:	200006c2 	.word	0x200006c2
 8003d30:	40000800 	.word	0x40000800
 8003d34:	200006b8 	.word	0x200006b8

08003d38 <_Z10motorAnglell>:


uint16_t motorAngle(int32_t hall_1, int32_t hall_2)
{
 8003d38:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003d3a:	b085      	sub	sp, #20
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	6078      	str	r0, [r7, #4]
 8003d40:	6039      	str	r1, [r7, #0]
  uint16_t angle = 0;
 8003d42:	2300      	movs	r3, #0
 8003d44:	81fb      	strh	r3, [r7, #14]
  uint16_t offset = 0;
 8003d46:	2300      	movs	r3, #0
 8003d48:	81bb      	strh	r3, [r7, #12]
  
  if ((hall_1 == 0) | (hall_2 == 0))
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	bf0c      	ite	eq
 8003d50:	2301      	moveq	r3, #1
 8003d52:	2300      	movne	r3, #0
 8003d54:	b2da      	uxtb	r2, r3
 8003d56:	683b      	ldr	r3, [r7, #0]
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	bf0c      	ite	eq
 8003d5c:	2301      	moveq	r3, #1
 8003d5e:	2300      	movne	r3, #0
 8003d60:	b2db      	uxtb	r3, r3
 8003d62:	4313      	orrs	r3, r2
 8003d64:	b2db      	uxtb	r3, r3
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d015      	beq.n	8003d96 <_Z10motorAnglell+0x5e>
    {
      if (hall_1 == 0)
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d108      	bne.n	8003d82 <_Z10motorAnglell+0x4a>
      {
        if (hall_2 > 0)
 8003d70:	683b      	ldr	r3, [r7, #0]
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	dd02      	ble.n	8003d7c <_Z10motorAnglell+0x44>
        {
          angle = 0;
 8003d76:	2300      	movs	r3, #0
 8003d78:	81fb      	strh	r3, [r7, #14]
 8003d7a:	e04d      	b.n	8003e18 <_Z10motorAnglell+0xe0>
        }
        else
        {
          angle = 180;
 8003d7c:	23b4      	movs	r3, #180	; 0xb4
 8003d7e:	81fb      	strh	r3, [r7, #14]
 8003d80:	e04a      	b.n	8003e18 <_Z10motorAnglell+0xe0>
        }
      }
      else
      {
        if (hall_1 > 0)
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	dd02      	ble.n	8003d8e <_Z10motorAnglell+0x56>
        {
          angle = 90;
 8003d88:	235a      	movs	r3, #90	; 0x5a
 8003d8a:	81fb      	strh	r3, [r7, #14]
 8003d8c:	e044      	b.n	8003e18 <_Z10motorAnglell+0xe0>
        }
        else
        {
          angle = 270;
 8003d8e:	f44f 7387 	mov.w	r3, #270	; 0x10e
 8003d92:	81fb      	strh	r3, [r7, #14]
 8003d94:	e040      	b.n	8003e18 <_Z10motorAnglell+0xe0>
        }
      }
    }
    else
    {
      if (hall_2 < 0)
 8003d96:	683b      	ldr	r3, [r7, #0]
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	da02      	bge.n	8003da2 <_Z10motorAnglell+0x6a>
      {
        offset = 180;
 8003d9c:	23b4      	movs	r3, #180	; 0xb4
 8003d9e:	81bb      	strh	r3, [r7, #12]
 8003da0:	e008      	b.n	8003db4 <_Z10motorAnglell+0x7c>
      }
      else
      {
        if (hall_1 > 0)
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	dd02      	ble.n	8003dae <_Z10motorAnglell+0x76>
        {
          offset = 0;
 8003da8:	2300      	movs	r3, #0
 8003daa:	81bb      	strh	r3, [r7, #12]
 8003dac:	e002      	b.n	8003db4 <_Z10motorAnglell+0x7c>
        }
        else
        {
          offset = 360;
 8003dae:	f44f 73b4 	mov.w	r3, #360	; 0x168
 8003db2:	81bb      	strh	r3, [r7, #12]
        }
      }  
      angle = offset + ((atan((float)hall_1 / (float)hall_2) * 180) / M_PI);
 8003db4:	89bb      	ldrh	r3, [r7, #12]
 8003db6:	4618      	mov	r0, r3
 8003db8:	f7fc fb58 	bl	800046c <__aeabi_i2d>
 8003dbc:	4604      	mov	r4, r0
 8003dbe:	460d      	mov	r5, r1
 8003dc0:	6878      	ldr	r0, [r7, #4]
 8003dc2:	f7fc ffa9 	bl	8000d18 <__aeabi_i2f>
 8003dc6:	4606      	mov	r6, r0
 8003dc8:	6838      	ldr	r0, [r7, #0]
 8003dca:	f7fc ffa5 	bl	8000d18 <__aeabi_i2f>
 8003dce:	4603      	mov	r3, r0
 8003dd0:	4619      	mov	r1, r3
 8003dd2:	4630      	mov	r0, r6
 8003dd4:	f7fd f8a8 	bl	8000f28 <__aeabi_fdiv>
 8003dd8:	4603      	mov	r3, r0
 8003dda:	4618      	mov	r0, r3
 8003ddc:	f7ff fbdc 	bl	8003598 <_ZSt4atanf>
 8003de0:	4603      	mov	r3, r0
 8003de2:	4913      	ldr	r1, [pc, #76]	; (8003e30 <_Z10motorAnglell+0xf8>)
 8003de4:	4618      	mov	r0, r3
 8003de6:	f7fc ffeb 	bl	8000dc0 <__aeabi_fmul>
 8003dea:	4603      	mov	r3, r0
 8003dec:	4618      	mov	r0, r3
 8003dee:	f7fc fb4f 	bl	8000490 <__aeabi_f2d>
 8003df2:	a30d      	add	r3, pc, #52	; (adr r3, 8003e28 <_Z10motorAnglell+0xf0>)
 8003df4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003df8:	f7fc fccc 	bl	8000794 <__aeabi_ddiv>
 8003dfc:	4602      	mov	r2, r0
 8003dfe:	460b      	mov	r3, r1
 8003e00:	4620      	mov	r0, r4
 8003e02:	4629      	mov	r1, r5
 8003e04:	f7fc f9e6 	bl	80001d4 <__adddf3>
 8003e08:	4602      	mov	r2, r0
 8003e0a:	460b      	mov	r3, r1
 8003e0c:	4610      	mov	r0, r2
 8003e0e:	4619      	mov	r1, r3
 8003e10:	f7fc fe58 	bl	8000ac4 <__aeabi_d2uiz>
 8003e14:	4603      	mov	r3, r0
 8003e16:	81fb      	strh	r3, [r7, #14]
    }  
    return angle;
 8003e18:	89fb      	ldrh	r3, [r7, #14]
 8003e1a:	4618      	mov	r0, r3
 8003e1c:	3714      	adds	r7, #20
 8003e1e:	46bd      	mov	sp, r7
 8003e20:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003e22:	bf00      	nop
 8003e24:	f3af 8000 	nop.w
 8003e28:	54442d18 	.word	0x54442d18
 8003e2c:	400921fb 	.word	0x400921fb
 8003e30:	43340000 	.word	0x43340000

08003e34 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003e34:	b480      	push	{r7}
 8003e36:	b083      	sub	sp, #12
 8003e38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003e3a:	2300      	movs	r3, #0
 8003e3c:	607b      	str	r3, [r7, #4]
 8003e3e:	4b0f      	ldr	r3, [pc, #60]	; (8003e7c <HAL_MspInit+0x48>)
 8003e40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e42:	4a0e      	ldr	r2, [pc, #56]	; (8003e7c <HAL_MspInit+0x48>)
 8003e44:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003e48:	6453      	str	r3, [r2, #68]	; 0x44
 8003e4a:	4b0c      	ldr	r3, [pc, #48]	; (8003e7c <HAL_MspInit+0x48>)
 8003e4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e4e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003e52:	607b      	str	r3, [r7, #4]
 8003e54:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003e56:	2300      	movs	r3, #0
 8003e58:	603b      	str	r3, [r7, #0]
 8003e5a:	4b08      	ldr	r3, [pc, #32]	; (8003e7c <HAL_MspInit+0x48>)
 8003e5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e5e:	4a07      	ldr	r2, [pc, #28]	; (8003e7c <HAL_MspInit+0x48>)
 8003e60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e64:	6413      	str	r3, [r2, #64]	; 0x40
 8003e66:	4b05      	ldr	r3, [pc, #20]	; (8003e7c <HAL_MspInit+0x48>)
 8003e68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e6e:	603b      	str	r3, [r7, #0]
 8003e70:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003e72:	bf00      	nop
 8003e74:	370c      	adds	r7, #12
 8003e76:	46bd      	mov	sp, r7
 8003e78:	bc80      	pop	{r7}
 8003e7a:	4770      	bx	lr
 8003e7c:	40023800 	.word	0x40023800

08003e80 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003e80:	b580      	push	{r7, lr}
 8003e82:	b08a      	sub	sp, #40	; 0x28
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e88:	f107 0314 	add.w	r3, r7, #20
 8003e8c:	2200      	movs	r2, #0
 8003e8e:	601a      	str	r2, [r3, #0]
 8003e90:	605a      	str	r2, [r3, #4]
 8003e92:	609a      	str	r2, [r3, #8]
 8003e94:	60da      	str	r2, [r3, #12]
 8003e96:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	4a17      	ldr	r2, [pc, #92]	; (8003efc <HAL_ADC_MspInit+0x7c>)
 8003e9e:	4293      	cmp	r3, r2
 8003ea0:	d127      	bne.n	8003ef2 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003ea2:	2300      	movs	r3, #0
 8003ea4:	613b      	str	r3, [r7, #16]
 8003ea6:	4b16      	ldr	r3, [pc, #88]	; (8003f00 <HAL_ADC_MspInit+0x80>)
 8003ea8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003eaa:	4a15      	ldr	r2, [pc, #84]	; (8003f00 <HAL_ADC_MspInit+0x80>)
 8003eac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003eb0:	6453      	str	r3, [r2, #68]	; 0x44
 8003eb2:	4b13      	ldr	r3, [pc, #76]	; (8003f00 <HAL_ADC_MspInit+0x80>)
 8003eb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003eb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003eba:	613b      	str	r3, [r7, #16]
 8003ebc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003ebe:	2300      	movs	r3, #0
 8003ec0:	60fb      	str	r3, [r7, #12]
 8003ec2:	4b0f      	ldr	r3, [pc, #60]	; (8003f00 <HAL_ADC_MspInit+0x80>)
 8003ec4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ec6:	4a0e      	ldr	r2, [pc, #56]	; (8003f00 <HAL_ADC_MspInit+0x80>)
 8003ec8:	f043 0304 	orr.w	r3, r3, #4
 8003ecc:	6313      	str	r3, [r2, #48]	; 0x30
 8003ece:	4b0c      	ldr	r3, [pc, #48]	; (8003f00 <HAL_ADC_MspInit+0x80>)
 8003ed0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ed2:	f003 0304 	and.w	r3, r3, #4
 8003ed6:	60fb      	str	r3, [r7, #12]
 8003ed8:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC1     ------> ADC1_IN11
    PC2     ------> ADC1_IN12
    */
    GPIO_InitStruct.Pin = ONBOARD_ADC_2_Pin|ONBOARD_ADC_1_Pin;
 8003eda:	2306      	movs	r3, #6
 8003edc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003ede:	2303      	movs	r3, #3
 8003ee0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ee2:	2300      	movs	r3, #0
 8003ee4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003ee6:	f107 0314 	add.w	r3, r7, #20
 8003eea:	4619      	mov	r1, r3
 8003eec:	4805      	ldr	r0, [pc, #20]	; (8003f04 <HAL_ADC_MspInit+0x84>)
 8003eee:	f001 fa47 	bl	8005380 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8003ef2:	bf00      	nop
 8003ef4:	3728      	adds	r7, #40	; 0x28
 8003ef6:	46bd      	mov	sp, r7
 8003ef8:	bd80      	pop	{r7, pc}
 8003efa:	bf00      	nop
 8003efc:	40012000 	.word	0x40012000
 8003f00:	40023800 	.word	0x40023800
 8003f04:	40020800 	.word	0x40020800

08003f08 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003f08:	b580      	push	{r7, lr}
 8003f0a:	b08a      	sub	sp, #40	; 0x28
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f10:	f107 0314 	add.w	r3, r7, #20
 8003f14:	2200      	movs	r2, #0
 8003f16:	601a      	str	r2, [r3, #0]
 8003f18:	605a      	str	r2, [r3, #4]
 8003f1a:	609a      	str	r2, [r3, #8]
 8003f1c:	60da      	str	r2, [r3, #12]
 8003f1e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	4a48      	ldr	r2, [pc, #288]	; (8004048 <HAL_I2C_MspInit+0x140>)
 8003f26:	4293      	cmp	r3, r2
 8003f28:	f040 8089 	bne.w	800403e <HAL_I2C_MspInit+0x136>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003f2c:	2300      	movs	r3, #0
 8003f2e:	613b      	str	r3, [r7, #16]
 8003f30:	4b46      	ldr	r3, [pc, #280]	; (800404c <HAL_I2C_MspInit+0x144>)
 8003f32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f34:	4a45      	ldr	r2, [pc, #276]	; (800404c <HAL_I2C_MspInit+0x144>)
 8003f36:	f043 0302 	orr.w	r3, r3, #2
 8003f3a:	6313      	str	r3, [r2, #48]	; 0x30
 8003f3c:	4b43      	ldr	r3, [pc, #268]	; (800404c <HAL_I2C_MspInit+0x144>)
 8003f3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f40:	f003 0302 	and.w	r3, r3, #2
 8003f44:	613b      	str	r3, [r7, #16]
 8003f46:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003f48:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003f4c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003f4e:	2312      	movs	r3, #18
 8003f50:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f52:	2300      	movs	r3, #0
 8003f54:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003f56:	2303      	movs	r3, #3
 8003f58:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003f5a:	2304      	movs	r3, #4
 8003f5c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003f5e:	f107 0314 	add.w	r3, r7, #20
 8003f62:	4619      	mov	r1, r3
 8003f64:	483a      	ldr	r0, [pc, #232]	; (8004050 <HAL_I2C_MspInit+0x148>)
 8003f66:	f001 fa0b 	bl	8005380 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003f6a:	2300      	movs	r3, #0
 8003f6c:	60fb      	str	r3, [r7, #12]
 8003f6e:	4b37      	ldr	r3, [pc, #220]	; (800404c <HAL_I2C_MspInit+0x144>)
 8003f70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f72:	4a36      	ldr	r2, [pc, #216]	; (800404c <HAL_I2C_MspInit+0x144>)
 8003f74:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003f78:	6413      	str	r3, [r2, #64]	; 0x40
 8003f7a:	4b34      	ldr	r3, [pc, #208]	; (800404c <HAL_I2C_MspInit+0x144>)
 8003f7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f7e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003f82:	60fb      	str	r3, [r7, #12]
 8003f84:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream6;
 8003f86:	4b33      	ldr	r3, [pc, #204]	; (8004054 <HAL_I2C_MspInit+0x14c>)
 8003f88:	4a33      	ldr	r2, [pc, #204]	; (8004058 <HAL_I2C_MspInit+0x150>)
 8003f8a:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_1;
 8003f8c:	4b31      	ldr	r3, [pc, #196]	; (8004054 <HAL_I2C_MspInit+0x14c>)
 8003f8e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003f92:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003f94:	4b2f      	ldr	r3, [pc, #188]	; (8004054 <HAL_I2C_MspInit+0x14c>)
 8003f96:	2240      	movs	r2, #64	; 0x40
 8003f98:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003f9a:	4b2e      	ldr	r3, [pc, #184]	; (8004054 <HAL_I2C_MspInit+0x14c>)
 8003f9c:	2200      	movs	r2, #0
 8003f9e:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003fa0:	4b2c      	ldr	r3, [pc, #176]	; (8004054 <HAL_I2C_MspInit+0x14c>)
 8003fa2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003fa6:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003fa8:	4b2a      	ldr	r3, [pc, #168]	; (8004054 <HAL_I2C_MspInit+0x14c>)
 8003faa:	2200      	movs	r2, #0
 8003fac:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003fae:	4b29      	ldr	r3, [pc, #164]	; (8004054 <HAL_I2C_MspInit+0x14c>)
 8003fb0:	2200      	movs	r2, #0
 8003fb2:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8003fb4:	4b27      	ldr	r3, [pc, #156]	; (8004054 <HAL_I2C_MspInit+0x14c>)
 8003fb6:	2200      	movs	r2, #0
 8003fb8:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003fba:	4b26      	ldr	r3, [pc, #152]	; (8004054 <HAL_I2C_MspInit+0x14c>)
 8003fbc:	2200      	movs	r2, #0
 8003fbe:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003fc0:	4b24      	ldr	r3, [pc, #144]	; (8004054 <HAL_I2C_MspInit+0x14c>)
 8003fc2:	2200      	movs	r2, #0
 8003fc4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8003fc6:	4823      	ldr	r0, [pc, #140]	; (8004054 <HAL_I2C_MspInit+0x14c>)
 8003fc8:	f000 fef4 	bl	8004db4 <HAL_DMA_Init>
 8003fcc:	4603      	mov	r3, r0
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d001      	beq.n	8003fd6 <HAL_I2C_MspInit+0xce>
    {
      Error_Handler();
 8003fd2:	f7ff fa9f 	bl	8003514 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	4a1e      	ldr	r2, [pc, #120]	; (8004054 <HAL_I2C_MspInit+0x14c>)
 8003fda:	635a      	str	r2, [r3, #52]	; 0x34
 8003fdc:	4a1d      	ldr	r2, [pc, #116]	; (8004054 <HAL_I2C_MspInit+0x14c>)
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 8003fe2:	4b1e      	ldr	r3, [pc, #120]	; (800405c <HAL_I2C_MspInit+0x154>)
 8003fe4:	4a1e      	ldr	r2, [pc, #120]	; (8004060 <HAL_I2C_MspInit+0x158>)
 8003fe6:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 8003fe8:	4b1c      	ldr	r3, [pc, #112]	; (800405c <HAL_I2C_MspInit+0x154>)
 8003fea:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003fee:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003ff0:	4b1a      	ldr	r3, [pc, #104]	; (800405c <HAL_I2C_MspInit+0x154>)
 8003ff2:	2200      	movs	r2, #0
 8003ff4:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003ff6:	4b19      	ldr	r3, [pc, #100]	; (800405c <HAL_I2C_MspInit+0x154>)
 8003ff8:	2200      	movs	r2, #0
 8003ffa:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003ffc:	4b17      	ldr	r3, [pc, #92]	; (800405c <HAL_I2C_MspInit+0x154>)
 8003ffe:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004002:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004004:	4b15      	ldr	r3, [pc, #84]	; (800405c <HAL_I2C_MspInit+0x154>)
 8004006:	2200      	movs	r2, #0
 8004008:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800400a:	4b14      	ldr	r3, [pc, #80]	; (800405c <HAL_I2C_MspInit+0x154>)
 800400c:	2200      	movs	r2, #0
 800400e:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8004010:	4b12      	ldr	r3, [pc, #72]	; (800405c <HAL_I2C_MspInit+0x154>)
 8004012:	2200      	movs	r2, #0
 8004014:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8004016:	4b11      	ldr	r3, [pc, #68]	; (800405c <HAL_I2C_MspInit+0x154>)
 8004018:	2200      	movs	r2, #0
 800401a:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800401c:	4b0f      	ldr	r3, [pc, #60]	; (800405c <HAL_I2C_MspInit+0x154>)
 800401e:	2200      	movs	r2, #0
 8004020:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8004022:	480e      	ldr	r0, [pc, #56]	; (800405c <HAL_I2C_MspInit+0x154>)
 8004024:	f000 fec6 	bl	8004db4 <HAL_DMA_Init>
 8004028:	4603      	mov	r3, r0
 800402a:	2b00      	cmp	r3, #0
 800402c:	d001      	beq.n	8004032 <HAL_I2C_MspInit+0x12a>
    {
      Error_Handler();
 800402e:	f7ff fa71 	bl	8003514 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	4a09      	ldr	r2, [pc, #36]	; (800405c <HAL_I2C_MspInit+0x154>)
 8004036:	639a      	str	r2, [r3, #56]	; 0x38
 8004038:	4a08      	ldr	r2, [pc, #32]	; (800405c <HAL_I2C_MspInit+0x154>)
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800403e:	bf00      	nop
 8004040:	3728      	adds	r7, #40	; 0x28
 8004042:	46bd      	mov	sp, r7
 8004044:	bd80      	pop	{r7, pc}
 8004046:	bf00      	nop
 8004048:	40005400 	.word	0x40005400
 800404c:	40023800 	.word	0x40023800
 8004050:	40020400 	.word	0x40020400
 8004054:	20000488 	.word	0x20000488
 8004058:	400260a0 	.word	0x400260a0
 800405c:	200004e8 	.word	0x200004e8
 8004060:	40026010 	.word	0x40026010

08004064 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8004064:	b480      	push	{r7}
 8004066:	b085      	sub	sp, #20
 8004068:	af00      	add	r7, sp, #0
 800406a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	4a14      	ldr	r2, [pc, #80]	; (80040c4 <HAL_TIM_PWM_MspInit+0x60>)
 8004072:	4293      	cmp	r3, r2
 8004074:	d10e      	bne.n	8004094 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004076:	2300      	movs	r3, #0
 8004078:	60fb      	str	r3, [r7, #12]
 800407a:	4b13      	ldr	r3, [pc, #76]	; (80040c8 <HAL_TIM_PWM_MspInit+0x64>)
 800407c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800407e:	4a12      	ldr	r2, [pc, #72]	; (80040c8 <HAL_TIM_PWM_MspInit+0x64>)
 8004080:	f043 0302 	orr.w	r3, r3, #2
 8004084:	6413      	str	r3, [r2, #64]	; 0x40
 8004086:	4b10      	ldr	r3, [pc, #64]	; (80040c8 <HAL_TIM_PWM_MspInit+0x64>)
 8004088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800408a:	f003 0302 	and.w	r3, r3, #2
 800408e:	60fb      	str	r3, [r7, #12]
 8004090:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8004092:	e012      	b.n	80040ba <HAL_TIM_PWM_MspInit+0x56>
  else if(htim_pwm->Instance==TIM4)
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	4a0c      	ldr	r2, [pc, #48]	; (80040cc <HAL_TIM_PWM_MspInit+0x68>)
 800409a:	4293      	cmp	r3, r2
 800409c:	d10d      	bne.n	80040ba <HAL_TIM_PWM_MspInit+0x56>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800409e:	2300      	movs	r3, #0
 80040a0:	60bb      	str	r3, [r7, #8]
 80040a2:	4b09      	ldr	r3, [pc, #36]	; (80040c8 <HAL_TIM_PWM_MspInit+0x64>)
 80040a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040a6:	4a08      	ldr	r2, [pc, #32]	; (80040c8 <HAL_TIM_PWM_MspInit+0x64>)
 80040a8:	f043 0304 	orr.w	r3, r3, #4
 80040ac:	6413      	str	r3, [r2, #64]	; 0x40
 80040ae:	4b06      	ldr	r3, [pc, #24]	; (80040c8 <HAL_TIM_PWM_MspInit+0x64>)
 80040b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040b2:	f003 0304 	and.w	r3, r3, #4
 80040b6:	60bb      	str	r3, [r7, #8]
 80040b8:	68bb      	ldr	r3, [r7, #8]
}
 80040ba:	bf00      	nop
 80040bc:	3714      	adds	r7, #20
 80040be:	46bd      	mov	sp, r7
 80040c0:	bc80      	pop	{r7}
 80040c2:	4770      	bx	lr
 80040c4:	40000400 	.word	0x40000400
 80040c8:	40023800 	.word	0x40023800
 80040cc:	40000800 	.word	0x40000800

080040d0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80040d0:	b580      	push	{r7, lr}
 80040d2:	b086      	sub	sp, #24
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM11)
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	4a26      	ldr	r2, [pc, #152]	; (8004178 <HAL_TIM_Base_MspInit+0xa8>)
 80040de:	4293      	cmp	r3, r2
 80040e0:	d10e      	bne.n	8004100 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM11_MspInit 0 */

  /* USER CODE END TIM11_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM11_CLK_ENABLE();
 80040e2:	2300      	movs	r3, #0
 80040e4:	617b      	str	r3, [r7, #20]
 80040e6:	4b25      	ldr	r3, [pc, #148]	; (800417c <HAL_TIM_Base_MspInit+0xac>)
 80040e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040ea:	4a24      	ldr	r2, [pc, #144]	; (800417c <HAL_TIM_Base_MspInit+0xac>)
 80040ec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80040f0:	6453      	str	r3, [r2, #68]	; 0x44
 80040f2:	4b22      	ldr	r3, [pc, #136]	; (800417c <HAL_TIM_Base_MspInit+0xac>)
 80040f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040f6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80040fa:	617b      	str	r3, [r7, #20]
 80040fc:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 80040fe:	e036      	b.n	800416e <HAL_TIM_Base_MspInit+0x9e>
  else if(htim_base->Instance==TIM13)
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	4a1e      	ldr	r2, [pc, #120]	; (8004180 <HAL_TIM_Base_MspInit+0xb0>)
 8004106:	4293      	cmp	r3, r2
 8004108:	d116      	bne.n	8004138 <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM13_CLK_ENABLE();
 800410a:	2300      	movs	r3, #0
 800410c:	613b      	str	r3, [r7, #16]
 800410e:	4b1b      	ldr	r3, [pc, #108]	; (800417c <HAL_TIM_Base_MspInit+0xac>)
 8004110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004112:	4a1a      	ldr	r2, [pc, #104]	; (800417c <HAL_TIM_Base_MspInit+0xac>)
 8004114:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004118:	6413      	str	r3, [r2, #64]	; 0x40
 800411a:	4b18      	ldr	r3, [pc, #96]	; (800417c <HAL_TIM_Base_MspInit+0xac>)
 800411c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800411e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004122:	613b      	str	r3, [r7, #16]
 8004124:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 1, 0);
 8004126:	2200      	movs	r2, #0
 8004128:	2101      	movs	r1, #1
 800412a:	202c      	movs	r0, #44	; 0x2c
 800412c:	f000 fdfd 	bl	8004d2a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8004130:	202c      	movs	r0, #44	; 0x2c
 8004132:	f000 fe16 	bl	8004d62 <HAL_NVIC_EnableIRQ>
}
 8004136:	e01a      	b.n	800416e <HAL_TIM_Base_MspInit+0x9e>
  else if(htim_base->Instance==TIM14)
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	4a11      	ldr	r2, [pc, #68]	; (8004184 <HAL_TIM_Base_MspInit+0xb4>)
 800413e:	4293      	cmp	r3, r2
 8004140:	d115      	bne.n	800416e <HAL_TIM_Base_MspInit+0x9e>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8004142:	2300      	movs	r3, #0
 8004144:	60fb      	str	r3, [r7, #12]
 8004146:	4b0d      	ldr	r3, [pc, #52]	; (800417c <HAL_TIM_Base_MspInit+0xac>)
 8004148:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800414a:	4a0c      	ldr	r2, [pc, #48]	; (800417c <HAL_TIM_Base_MspInit+0xac>)
 800414c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004150:	6413      	str	r3, [r2, #64]	; 0x40
 8004152:	4b0a      	ldr	r3, [pc, #40]	; (800417c <HAL_TIM_Base_MspInit+0xac>)
 8004154:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004156:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800415a:	60fb      	str	r3, [r7, #12]
 800415c:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 0, 0);
 800415e:	2200      	movs	r2, #0
 8004160:	2100      	movs	r1, #0
 8004162:	202d      	movs	r0, #45	; 0x2d
 8004164:	f000 fde1 	bl	8004d2a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8004168:	202d      	movs	r0, #45	; 0x2d
 800416a:	f000 fdfa 	bl	8004d62 <HAL_NVIC_EnableIRQ>
}
 800416e:	bf00      	nop
 8004170:	3718      	adds	r7, #24
 8004172:	46bd      	mov	sp, r7
 8004174:	bd80      	pop	{r7, pc}
 8004176:	bf00      	nop
 8004178:	40014800 	.word	0x40014800
 800417c:	40023800 	.word	0x40023800
 8004180:	40001c00 	.word	0x40001c00
 8004184:	40002000 	.word	0x40002000

08004188 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004188:	b580      	push	{r7, lr}
 800418a:	b08a      	sub	sp, #40	; 0x28
 800418c:	af00      	add	r7, sp, #0
 800418e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004190:	f107 0314 	add.w	r3, r7, #20
 8004194:	2200      	movs	r2, #0
 8004196:	601a      	str	r2, [r3, #0]
 8004198:	605a      	str	r2, [r3, #4]
 800419a:	609a      	str	r2, [r3, #8]
 800419c:	60da      	str	r2, [r3, #12]
 800419e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	4a24      	ldr	r2, [pc, #144]	; (8004238 <HAL_TIM_MspPostInit+0xb0>)
 80041a6:	4293      	cmp	r3, r2
 80041a8:	d11e      	bne.n	80041e8 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80041aa:	2300      	movs	r3, #0
 80041ac:	613b      	str	r3, [r7, #16]
 80041ae:	4b23      	ldr	r3, [pc, #140]	; (800423c <HAL_TIM_MspPostInit+0xb4>)
 80041b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041b2:	4a22      	ldr	r2, [pc, #136]	; (800423c <HAL_TIM_MspPostInit+0xb4>)
 80041b4:	f043 0304 	orr.w	r3, r3, #4
 80041b8:	6313      	str	r3, [r2, #48]	; 0x30
 80041ba:	4b20      	ldr	r3, [pc, #128]	; (800423c <HAL_TIM_MspPostInit+0xb4>)
 80041bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041be:	f003 0304 	and.w	r3, r3, #4
 80041c2:	613b      	str	r3, [r7, #16]
 80041c4:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PC6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = ONBOARD_WRITE_4_Pin;
 80041c6:	2340      	movs	r3, #64	; 0x40
 80041c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80041ca:	2302      	movs	r3, #2
 80041cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041ce:	2300      	movs	r3, #0
 80041d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80041d2:	2300      	movs	r3, #0
 80041d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80041d6:	2302      	movs	r3, #2
 80041d8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ONBOARD_WRITE_4_GPIO_Port, &GPIO_InitStruct);
 80041da:	f107 0314 	add.w	r3, r7, #20
 80041de:	4619      	mov	r1, r3
 80041e0:	4817      	ldr	r0, [pc, #92]	; (8004240 <HAL_TIM_MspPostInit+0xb8>)
 80041e2:	f001 f8cd 	bl	8005380 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80041e6:	e022      	b.n	800422e <HAL_TIM_MspPostInit+0xa6>
  else if(htim->Instance==TIM4)
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	4a15      	ldr	r2, [pc, #84]	; (8004244 <HAL_TIM_MspPostInit+0xbc>)
 80041ee:	4293      	cmp	r3, r2
 80041f0:	d11d      	bne.n	800422e <HAL_TIM_MspPostInit+0xa6>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80041f2:	2300      	movs	r3, #0
 80041f4:	60fb      	str	r3, [r7, #12]
 80041f6:	4b11      	ldr	r3, [pc, #68]	; (800423c <HAL_TIM_MspPostInit+0xb4>)
 80041f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041fa:	4a10      	ldr	r2, [pc, #64]	; (800423c <HAL_TIM_MspPostInit+0xb4>)
 80041fc:	f043 0302 	orr.w	r3, r3, #2
 8004200:	6313      	str	r3, [r2, #48]	; 0x30
 8004202:	4b0e      	ldr	r3, [pc, #56]	; (800423c <HAL_TIM_MspPostInit+0xb4>)
 8004204:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004206:	f003 0302 	and.w	r3, r3, #2
 800420a:	60fb      	str	r3, [r7, #12]
 800420c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ONBOARD_WRITE_1_Pin;
 800420e:	2340      	movs	r3, #64	; 0x40
 8004210:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004212:	2302      	movs	r3, #2
 8004214:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004216:	2300      	movs	r3, #0
 8004218:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800421a:	2300      	movs	r3, #0
 800421c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800421e:	2302      	movs	r3, #2
 8004220:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ONBOARD_WRITE_1_GPIO_Port, &GPIO_InitStruct);
 8004222:	f107 0314 	add.w	r3, r7, #20
 8004226:	4619      	mov	r1, r3
 8004228:	4807      	ldr	r0, [pc, #28]	; (8004248 <HAL_TIM_MspPostInit+0xc0>)
 800422a:	f001 f8a9 	bl	8005380 <HAL_GPIO_Init>
}
 800422e:	bf00      	nop
 8004230:	3728      	adds	r7, #40	; 0x28
 8004232:	46bd      	mov	sp, r7
 8004234:	bd80      	pop	{r7, pc}
 8004236:	bf00      	nop
 8004238:	40000400 	.word	0x40000400
 800423c:	40023800 	.word	0x40023800
 8004240:	40020800 	.word	0x40020800
 8004244:	40000800 	.word	0x40000800
 8004248:	40020400 	.word	0x40020400

0800424c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800424c:	b580      	push	{r7, lr}
 800424e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 8004250:	f003 ffe6 	bl	8008220 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004254:	e7fe      	b.n	8004254 <NMI_Handler+0x8>

08004256 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004256:	b480      	push	{r7}
 8004258:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800425a:	e7fe      	b.n	800425a <HardFault_Handler+0x4>

0800425c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800425c:	b480      	push	{r7}
 800425e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004260:	e7fe      	b.n	8004260 <MemManage_Handler+0x4>

08004262 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004262:	b480      	push	{r7}
 8004264:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004266:	e7fe      	b.n	8004266 <BusFault_Handler+0x4>

08004268 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004268:	b480      	push	{r7}
 800426a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800426c:	e7fe      	b.n	800426c <UsageFault_Handler+0x4>

0800426e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800426e:	b480      	push	{r7}
 8004270:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004272:	bf00      	nop
 8004274:	46bd      	mov	sp, r7
 8004276:	bc80      	pop	{r7}
 8004278:	4770      	bx	lr

0800427a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800427a:	b480      	push	{r7}
 800427c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800427e:	bf00      	nop
 8004280:	46bd      	mov	sp, r7
 8004282:	bc80      	pop	{r7}
 8004284:	4770      	bx	lr

08004286 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004286:	b480      	push	{r7}
 8004288:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800428a:	bf00      	nop
 800428c:	46bd      	mov	sp, r7
 800428e:	bc80      	pop	{r7}
 8004290:	4770      	bx	lr

08004292 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004292:	b580      	push	{r7, lr}
 8004294:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004296:	f000 f8f3 	bl	8004480 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800429a:	bf00      	nop
 800429c:	bd80      	pop	{r7, pc}

0800429e <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 800429e:	b580      	push	{r7, lr}
 80042a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ONBOARD_READ_IT_3_Pin);
 80042a2:	2001      	movs	r0, #1
 80042a4:	f001 fa3c 	bl	8005720 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80042a8:	bf00      	nop
 80042aa:	bd80      	pop	{r7, pc}

080042ac <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80042ac:	b580      	push	{r7, lr}
 80042ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 80042b0:	4802      	ldr	r0, [pc, #8]	; (80042bc <DMA1_Stream0_IRQHandler+0x10>)
 80042b2:	f000 fe2d 	bl	8004f10 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80042b6:	bf00      	nop
 80042b8:	bd80      	pop	{r7, pc}
 80042ba:	bf00      	nop
 80042bc:	200004e8 	.word	0x200004e8

080042c0 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 80042c0:	b580      	push	{r7, lr}
 80042c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 80042c4:	4802      	ldr	r0, [pc, #8]	; (80042d0 <DMA1_Stream6_IRQHandler+0x10>)
 80042c6:	f000 fe23 	bl	8004f10 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 80042ca:	bf00      	nop
 80042cc:	bd80      	pop	{r7, pc}
 80042ce:	bf00      	nop
 80042d0:	20000488 	.word	0x20000488

080042d4 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 80042d4:	b580      	push	{r7, lr}
 80042d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim13);
 80042d8:	4802      	ldr	r0, [pc, #8]	; (80042e4 <TIM8_UP_TIM13_IRQHandler+0x10>)
 80042da:	f004 f9f7 	bl	80086cc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 80042de:	bf00      	nop
 80042e0:	bd80      	pop	{r7, pc}
 80042e2:	bf00      	nop
 80042e4:	20000620 	.word	0x20000620

080042e8 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 80042e8:	b580      	push	{r7, lr}
 80042ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 80042ec:	4802      	ldr	r0, [pc, #8]	; (80042f8 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 80042ee:	f004 f9ed 	bl	80086cc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 80042f2:	bf00      	nop
 80042f4:	bd80      	pop	{r7, pc}
 80042f6:	bf00      	nop
 80042f8:	20000668 	.word	0x20000668

080042fc <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80042fc:	b580      	push	{r7, lr}
 80042fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8004300:	4802      	ldr	r0, [pc, #8]	; (800430c <OTG_FS_IRQHandler+0x10>)
 8004302:	f002 fb22 	bl	800694a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8004306:	bf00      	nop
 8004308:	bd80      	pop	{r7, pc}
 800430a:	bf00      	nop
 800430c:	20001b9c 	.word	0x20001b9c

08004310 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004310:	b580      	push	{r7, lr}
 8004312:	b086      	sub	sp, #24
 8004314:	af00      	add	r7, sp, #0
 8004316:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004318:	4a14      	ldr	r2, [pc, #80]	; (800436c <_sbrk+0x5c>)
 800431a:	4b15      	ldr	r3, [pc, #84]	; (8004370 <_sbrk+0x60>)
 800431c:	1ad3      	subs	r3, r2, r3
 800431e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004320:	697b      	ldr	r3, [r7, #20]
 8004322:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004324:	4b13      	ldr	r3, [pc, #76]	; (8004374 <_sbrk+0x64>)
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	2b00      	cmp	r3, #0
 800432a:	d102      	bne.n	8004332 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800432c:	4b11      	ldr	r3, [pc, #68]	; (8004374 <_sbrk+0x64>)
 800432e:	4a12      	ldr	r2, [pc, #72]	; (8004378 <_sbrk+0x68>)
 8004330:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004332:	4b10      	ldr	r3, [pc, #64]	; (8004374 <_sbrk+0x64>)
 8004334:	681a      	ldr	r2, [r3, #0]
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	4413      	add	r3, r2
 800433a:	693a      	ldr	r2, [r7, #16]
 800433c:	429a      	cmp	r2, r3
 800433e:	d207      	bcs.n	8004350 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004340:	f009 fe00 	bl	800df44 <__errno>
 8004344:	4603      	mov	r3, r0
 8004346:	220c      	movs	r2, #12
 8004348:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800434a:	f04f 33ff 	mov.w	r3, #4294967295
 800434e:	e009      	b.n	8004364 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004350:	4b08      	ldr	r3, [pc, #32]	; (8004374 <_sbrk+0x64>)
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004356:	4b07      	ldr	r3, [pc, #28]	; (8004374 <_sbrk+0x64>)
 8004358:	681a      	ldr	r2, [r3, #0]
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	4413      	add	r3, r2
 800435e:	4a05      	ldr	r2, [pc, #20]	; (8004374 <_sbrk+0x64>)
 8004360:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004362:	68fb      	ldr	r3, [r7, #12]
}
 8004364:	4618      	mov	r0, r3
 8004366:	3718      	adds	r7, #24
 8004368:	46bd      	mov	sp, r7
 800436a:	bd80      	pop	{r7, pc}
 800436c:	20020000 	.word	0x20020000
 8004370:	00000400 	.word	0x00000400
 8004374:	200006c4 	.word	0x200006c4
 8004378:	20001fb0 	.word	0x20001fb0

0800437c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800437c:	b480      	push	{r7}
 800437e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004380:	bf00      	nop
 8004382:	46bd      	mov	sp, r7
 8004384:	bc80      	pop	{r7}
 8004386:	4770      	bx	lr

08004388 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8004388:	f8df d034 	ldr.w	sp, [pc, #52]	; 80043c0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800438c:	480d      	ldr	r0, [pc, #52]	; (80043c4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800438e:	490e      	ldr	r1, [pc, #56]	; (80043c8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8004390:	4a0e      	ldr	r2, [pc, #56]	; (80043cc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8004392:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004394:	e002      	b.n	800439c <LoopCopyDataInit>

08004396 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004396:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004398:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800439a:	3304      	adds	r3, #4

0800439c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800439c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800439e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80043a0:	d3f9      	bcc.n	8004396 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80043a2:	4a0b      	ldr	r2, [pc, #44]	; (80043d0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80043a4:	4c0b      	ldr	r4, [pc, #44]	; (80043d4 <LoopFillZerobss+0x26>)
  movs r3, #0
 80043a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80043a8:	e001      	b.n	80043ae <LoopFillZerobss>

080043aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80043aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80043ac:	3204      	adds	r2, #4

080043ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80043ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80043b0:	d3fb      	bcc.n	80043aa <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80043b2:	f7ff ffe3 	bl	800437c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80043b6:	f009 fdcb 	bl	800df50 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80043ba:	f7fe fcdb 	bl	8002d74 <main>
  bx  lr    
 80043be:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80043c0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80043c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80043c8:	200001ec 	.word	0x200001ec
  ldr r2, =_sidata
 80043cc:	0800f3d0 	.word	0x0800f3d0
  ldr r2, =_sbss
 80043d0:	200001ec 	.word	0x200001ec
  ldr r4, =_ebss
 80043d4:	20001fac 	.word	0x20001fac

080043d8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80043d8:	e7fe      	b.n	80043d8 <ADC_IRQHandler>
	...

080043dc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80043dc:	b580      	push	{r7, lr}
 80043de:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
   __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80043e0:	4b0e      	ldr	r3, [pc, #56]	; (800441c <HAL_Init+0x40>)
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	4a0d      	ldr	r2, [pc, #52]	; (800441c <HAL_Init+0x40>)
 80043e6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80043ea:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
   __HAL_FLASH_DATA_CACHE_ENABLE();
 80043ec:	4b0b      	ldr	r3, [pc, #44]	; (800441c <HAL_Init+0x40>)
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	4a0a      	ldr	r2, [pc, #40]	; (800441c <HAL_Init+0x40>)
 80043f2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80043f6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80043f8:	4b08      	ldr	r3, [pc, #32]	; (800441c <HAL_Init+0x40>)
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	4a07      	ldr	r2, [pc, #28]	; (800441c <HAL_Init+0x40>)
 80043fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004402:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004404:	2003      	movs	r0, #3
 8004406:	f000 fc85 	bl	8004d14 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800440a:	200f      	movs	r0, #15
 800440c:	f000 f808 	bl	8004420 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8004410:	f7ff fd10 	bl	8003e34 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8004414:	2300      	movs	r3, #0
}
 8004416:	4618      	mov	r0, r3
 8004418:	bd80      	pop	{r7, pc}
 800441a:	bf00      	nop
 800441c:	40023c00 	.word	0x40023c00

08004420 <HAL_InitTick>:
  *       implementation  in user file.
  * @param  TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004420:	b580      	push	{r7, lr}
 8004422:	b082      	sub	sp, #8
 8004424:	af00      	add	r7, sp, #0
 8004426:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004428:	4b12      	ldr	r3, [pc, #72]	; (8004474 <HAL_InitTick+0x54>)
 800442a:	681a      	ldr	r2, [r3, #0]
 800442c:	4b12      	ldr	r3, [pc, #72]	; (8004478 <HAL_InitTick+0x58>)
 800442e:	781b      	ldrb	r3, [r3, #0]
 8004430:	4619      	mov	r1, r3
 8004432:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004436:	fbb3 f3f1 	udiv	r3, r3, r1
 800443a:	fbb2 f3f3 	udiv	r3, r2, r3
 800443e:	4618      	mov	r0, r3
 8004440:	f000 fcab 	bl	8004d9a <HAL_SYSTICK_Config>
 8004444:	4603      	mov	r3, r0
 8004446:	2b00      	cmp	r3, #0
 8004448:	d001      	beq.n	800444e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800444a:	2301      	movs	r3, #1
 800444c:	e00e      	b.n	800446c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	2b0f      	cmp	r3, #15
 8004452:	d80a      	bhi.n	800446a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004454:	2200      	movs	r2, #0
 8004456:	6879      	ldr	r1, [r7, #4]
 8004458:	f04f 30ff 	mov.w	r0, #4294967295
 800445c:	f000 fc65 	bl	8004d2a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004460:	4a06      	ldr	r2, [pc, #24]	; (800447c <HAL_InitTick+0x5c>)
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004466:	2300      	movs	r3, #0
 8004468:	e000      	b.n	800446c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800446a:	2301      	movs	r3, #1
}
 800446c:	4618      	mov	r0, r3
 800446e:	3708      	adds	r7, #8
 8004470:	46bd      	mov	sp, r7
 8004472:	bd80      	pop	{r7, pc}
 8004474:	20000004 	.word	0x20000004
 8004478:	2000000c 	.word	0x2000000c
 800447c:	20000008 	.word	0x20000008

08004480 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004480:	b480      	push	{r7}
 8004482:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004484:	4b05      	ldr	r3, [pc, #20]	; (800449c <HAL_IncTick+0x1c>)
 8004486:	781b      	ldrb	r3, [r3, #0]
 8004488:	461a      	mov	r2, r3
 800448a:	4b05      	ldr	r3, [pc, #20]	; (80044a0 <HAL_IncTick+0x20>)
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	4413      	add	r3, r2
 8004490:	4a03      	ldr	r2, [pc, #12]	; (80044a0 <HAL_IncTick+0x20>)
 8004492:	6013      	str	r3, [r2, #0]
}
 8004494:	bf00      	nop
 8004496:	46bd      	mov	sp, r7
 8004498:	bc80      	pop	{r7}
 800449a:	4770      	bx	lr
 800449c:	2000000c 	.word	0x2000000c
 80044a0:	200006d4 	.word	0x200006d4

080044a4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80044a4:	b480      	push	{r7}
 80044a6:	af00      	add	r7, sp, #0
  return uwTick;
 80044a8:	4b02      	ldr	r3, [pc, #8]	; (80044b4 <HAL_GetTick+0x10>)
 80044aa:	681b      	ldr	r3, [r3, #0]
}
 80044ac:	4618      	mov	r0, r3
 80044ae:	46bd      	mov	sp, r7
 80044b0:	bc80      	pop	{r7}
 80044b2:	4770      	bx	lr
 80044b4:	200006d4 	.word	0x200006d4

080044b8 <HAL_Delay>:
  *       implementations in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 80044b8:	b580      	push	{r7, lr}
 80044ba:	b084      	sub	sp, #16
 80044bc:	af00      	add	r7, sp, #0
 80044be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80044c0:	f7ff fff0 	bl	80044a4 <HAL_GetTick>
 80044c4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044d0:	d005      	beq.n	80044de <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80044d2:	4b0a      	ldr	r3, [pc, #40]	; (80044fc <HAL_Delay+0x44>)
 80044d4:	781b      	ldrb	r3, [r3, #0]
 80044d6:	461a      	mov	r2, r3
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	4413      	add	r3, r2
 80044dc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80044de:	bf00      	nop
 80044e0:	f7ff ffe0 	bl	80044a4 <HAL_GetTick>
 80044e4:	4602      	mov	r2, r0
 80044e6:	68bb      	ldr	r3, [r7, #8]
 80044e8:	1ad3      	subs	r3, r2, r3
 80044ea:	68fa      	ldr	r2, [r7, #12]
 80044ec:	429a      	cmp	r2, r3
 80044ee:	d8f7      	bhi.n	80044e0 <HAL_Delay+0x28>
  {
  }
}
 80044f0:	bf00      	nop
 80044f2:	bf00      	nop
 80044f4:	3710      	adds	r7, #16
 80044f6:	46bd      	mov	sp, r7
 80044f8:	bd80      	pop	{r7, pc}
 80044fa:	bf00      	nop
 80044fc:	2000000c 	.word	0x2000000c

08004500 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004500:	b580      	push	{r7, lr}
 8004502:	b084      	sub	sp, #16
 8004504:	af00      	add	r7, sp, #0
 8004506:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004508:	2300      	movs	r3, #0
 800450a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	2b00      	cmp	r3, #0
 8004510:	d101      	bne.n	8004516 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8004512:	2301      	movs	r3, #1
 8004514:	e033      	b.n	800457e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800451a:	2b00      	cmp	r3, #0
 800451c:	d109      	bne.n	8004532 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800451e:	6878      	ldr	r0, [r7, #4]
 8004520:	f7ff fcae 	bl	8003e80 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	2200      	movs	r2, #0
 8004528:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	2200      	movs	r2, #0
 800452e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004536:	f003 0310 	and.w	r3, r3, #16
 800453a:	2b00      	cmp	r3, #0
 800453c:	d118      	bne.n	8004570 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004542:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8004546:	f023 0302 	bic.w	r3, r3, #2
 800454a:	f043 0202 	orr.w	r2, r3, #2
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8004552:	6878      	ldr	r0, [r7, #4]
 8004554:	f000 f9e8 	bl	8004928 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	2200      	movs	r2, #0
 800455c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004562:	f023 0303 	bic.w	r3, r3, #3
 8004566:	f043 0201 	orr.w	r2, r3, #1
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	641a      	str	r2, [r3, #64]	; 0x40
 800456e:	e001      	b.n	8004574 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8004570:	2301      	movs	r3, #1
 8004572:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	2200      	movs	r2, #0
 8004578:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800457c:	7bfb      	ldrb	r3, [r7, #15]
}
 800457e:	4618      	mov	r0, r3
 8004580:	3710      	adds	r7, #16
 8004582:	46bd      	mov	sp, r7
 8004584:	bd80      	pop	{r7, pc}
	...

08004588 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8004588:	b480      	push	{r7}
 800458a:	b085      	sub	sp, #20
 800458c:	af00      	add	r7, sp, #0
 800458e:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8004590:	2300      	movs	r3, #0
 8004592:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800459a:	2b01      	cmp	r3, #1
 800459c:	d101      	bne.n	80045a2 <HAL_ADC_Start+0x1a>
 800459e:	2302      	movs	r3, #2
 80045a0:	e095      	b.n	80046ce <HAL_ADC_Start+0x146>
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	2201      	movs	r2, #1
 80045a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	689b      	ldr	r3, [r3, #8]
 80045b0:	f003 0301 	and.w	r3, r3, #1
 80045b4:	2b01      	cmp	r3, #1
 80045b6:	d018      	beq.n	80045ea <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	689a      	ldr	r2, [r3, #8]
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f042 0201 	orr.w	r2, r2, #1
 80045c6:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80045c8:	4b43      	ldr	r3, [pc, #268]	; (80046d8 <HAL_ADC_Start+0x150>)
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	4a43      	ldr	r2, [pc, #268]	; (80046dc <HAL_ADC_Start+0x154>)
 80045ce:	fba2 2303 	umull	r2, r3, r2, r3
 80045d2:	0c9a      	lsrs	r2, r3, #18
 80045d4:	4613      	mov	r3, r2
 80045d6:	005b      	lsls	r3, r3, #1
 80045d8:	4413      	add	r3, r2
 80045da:	60fb      	str	r3, [r7, #12]
    while(counter != 0U)
 80045dc:	e002      	b.n	80045e4 <HAL_ADC_Start+0x5c>
    {
      counter--;
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	3b01      	subs	r3, #1
 80045e2:	60fb      	str	r3, [r7, #12]
    while(counter != 0U)
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d1f9      	bne.n	80045de <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	689b      	ldr	r3, [r3, #8]
 80045f0:	f003 0301 	and.w	r3, r3, #1
 80045f4:	2b01      	cmp	r3, #1
 80045f6:	d15d      	bne.n	80046b4 <HAL_ADC_Start+0x12c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045fc:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8004600:	f023 0301 	bic.w	r3, r3, #1
 8004604:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	685b      	ldr	r3, [r3, #4]
 8004612:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004616:	2b00      	cmp	r3, #0
 8004618:	d007      	beq.n	800462a <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800461e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004622:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800462e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004632:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004636:	d106      	bne.n	8004646 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800463c:	f023 0206 	bic.w	r2, r3, #6
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	645a      	str	r2, [r3, #68]	; 0x44
 8004644:	e002      	b.n	800464c <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	2200      	movs	r2, #0
 800464a:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	2200      	movs	r2, #0
 8004650:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800465c:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 800465e:	4b20      	ldr	r3, [pc, #128]	; (80046e0 <HAL_ADC_Start+0x158>)
 8004660:	685b      	ldr	r3, [r3, #4]
 8004662:	f003 031f 	and.w	r3, r3, #31
 8004666:	2b00      	cmp	r3, #0
 8004668:	d10f      	bne.n	800468a <HAL_ADC_Start+0x102>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	689b      	ldr	r3, [r3, #8]
 8004670:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004674:	2b00      	cmp	r3, #0
 8004676:	d129      	bne.n	80046cc <HAL_ADC_Start+0x144>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	689a      	ldr	r2, [r3, #8]
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8004686:	609a      	str	r2, [r3, #8]
 8004688:	e020      	b.n	80046cc <HAL_ADC_Start+0x144>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	4a15      	ldr	r2, [pc, #84]	; (80046e4 <HAL_ADC_Start+0x15c>)
 8004690:	4293      	cmp	r3, r2
 8004692:	d11b      	bne.n	80046cc <HAL_ADC_Start+0x144>
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	689b      	ldr	r3, [r3, #8]
 800469a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d114      	bne.n	80046cc <HAL_ADC_Start+0x144>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	689a      	ldr	r2, [r3, #8]
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80046b0:	609a      	str	r2, [r3, #8]
 80046b2:	e00b      	b.n	80046cc <HAL_ADC_Start+0x144>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046b8:	f043 0210 	orr.w	r2, r3, #16
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046c4:	f043 0201 	orr.w	r2, r3, #1
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80046cc:	2300      	movs	r3, #0
}
 80046ce:	4618      	mov	r0, r3
 80046d0:	3714      	adds	r7, #20
 80046d2:	46bd      	mov	sp, r7
 80046d4:	bc80      	pop	{r7}
 80046d6:	4770      	bx	lr
 80046d8:	20000004 	.word	0x20000004
 80046dc:	431bde83 	.word	0x431bde83
 80046e0:	40012300 	.word	0x40012300
 80046e4:	40012000 	.word	0x40012000

080046e8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80046e8:	b480      	push	{r7}
 80046ea:	b085      	sub	sp, #20
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	6078      	str	r0, [r7, #4]
 80046f0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80046f2:	2300      	movs	r3, #0
 80046f4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80046fc:	2b01      	cmp	r3, #1
 80046fe:	d101      	bne.n	8004704 <HAL_ADC_ConfigChannel+0x1c>
 8004700:	2302      	movs	r3, #2
 8004702:	e103      	b.n	800490c <HAL_ADC_ConfigChannel+0x224>
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	2201      	movs	r2, #1
 8004708:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800470c:	683b      	ldr	r3, [r7, #0]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	2b09      	cmp	r3, #9
 8004712:	d925      	bls.n	8004760 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	68d9      	ldr	r1, [r3, #12]
 800471a:	683b      	ldr	r3, [r7, #0]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	b29b      	uxth	r3, r3
 8004720:	461a      	mov	r2, r3
 8004722:	4613      	mov	r3, r2
 8004724:	005b      	lsls	r3, r3, #1
 8004726:	4413      	add	r3, r2
 8004728:	3b1e      	subs	r3, #30
 800472a:	2207      	movs	r2, #7
 800472c:	fa02 f303 	lsl.w	r3, r2, r3
 8004730:	43da      	mvns	r2, r3
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	400a      	ands	r2, r1
 8004738:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	68d9      	ldr	r1, [r3, #12]
 8004740:	683b      	ldr	r3, [r7, #0]
 8004742:	689a      	ldr	r2, [r3, #8]
 8004744:	683b      	ldr	r3, [r7, #0]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	b29b      	uxth	r3, r3
 800474a:	4618      	mov	r0, r3
 800474c:	4603      	mov	r3, r0
 800474e:	005b      	lsls	r3, r3, #1
 8004750:	4403      	add	r3, r0
 8004752:	3b1e      	subs	r3, #30
 8004754:	409a      	lsls	r2, r3
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	430a      	orrs	r2, r1
 800475c:	60da      	str	r2, [r3, #12]
 800475e:	e022      	b.n	80047a6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	6919      	ldr	r1, [r3, #16]
 8004766:	683b      	ldr	r3, [r7, #0]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	b29b      	uxth	r3, r3
 800476c:	461a      	mov	r2, r3
 800476e:	4613      	mov	r3, r2
 8004770:	005b      	lsls	r3, r3, #1
 8004772:	4413      	add	r3, r2
 8004774:	2207      	movs	r2, #7
 8004776:	fa02 f303 	lsl.w	r3, r2, r3
 800477a:	43da      	mvns	r2, r3
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	400a      	ands	r2, r1
 8004782:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	6919      	ldr	r1, [r3, #16]
 800478a:	683b      	ldr	r3, [r7, #0]
 800478c:	689a      	ldr	r2, [r3, #8]
 800478e:	683b      	ldr	r3, [r7, #0]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	b29b      	uxth	r3, r3
 8004794:	4618      	mov	r0, r3
 8004796:	4603      	mov	r3, r0
 8004798:	005b      	lsls	r3, r3, #1
 800479a:	4403      	add	r3, r0
 800479c:	409a      	lsls	r2, r3
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	430a      	orrs	r2, r1
 80047a4:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80047a6:	683b      	ldr	r3, [r7, #0]
 80047a8:	685b      	ldr	r3, [r3, #4]
 80047aa:	2b06      	cmp	r3, #6
 80047ac:	d824      	bhi.n	80047f8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80047b4:	683b      	ldr	r3, [r7, #0]
 80047b6:	685a      	ldr	r2, [r3, #4]
 80047b8:	4613      	mov	r3, r2
 80047ba:	009b      	lsls	r3, r3, #2
 80047bc:	4413      	add	r3, r2
 80047be:	3b05      	subs	r3, #5
 80047c0:	221f      	movs	r2, #31
 80047c2:	fa02 f303 	lsl.w	r3, r2, r3
 80047c6:	43da      	mvns	r2, r3
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	400a      	ands	r2, r1
 80047ce:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80047d6:	683b      	ldr	r3, [r7, #0]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	b29b      	uxth	r3, r3
 80047dc:	4618      	mov	r0, r3
 80047de:	683b      	ldr	r3, [r7, #0]
 80047e0:	685a      	ldr	r2, [r3, #4]
 80047e2:	4613      	mov	r3, r2
 80047e4:	009b      	lsls	r3, r3, #2
 80047e6:	4413      	add	r3, r2
 80047e8:	3b05      	subs	r3, #5
 80047ea:	fa00 f203 	lsl.w	r2, r0, r3
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	430a      	orrs	r2, r1
 80047f4:	635a      	str	r2, [r3, #52]	; 0x34
 80047f6:	e04c      	b.n	8004892 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80047f8:	683b      	ldr	r3, [r7, #0]
 80047fa:	685b      	ldr	r3, [r3, #4]
 80047fc:	2b0c      	cmp	r3, #12
 80047fe:	d824      	bhi.n	800484a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004806:	683b      	ldr	r3, [r7, #0]
 8004808:	685a      	ldr	r2, [r3, #4]
 800480a:	4613      	mov	r3, r2
 800480c:	009b      	lsls	r3, r3, #2
 800480e:	4413      	add	r3, r2
 8004810:	3b23      	subs	r3, #35	; 0x23
 8004812:	221f      	movs	r2, #31
 8004814:	fa02 f303 	lsl.w	r3, r2, r3
 8004818:	43da      	mvns	r2, r3
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	400a      	ands	r2, r1
 8004820:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004828:	683b      	ldr	r3, [r7, #0]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	b29b      	uxth	r3, r3
 800482e:	4618      	mov	r0, r3
 8004830:	683b      	ldr	r3, [r7, #0]
 8004832:	685a      	ldr	r2, [r3, #4]
 8004834:	4613      	mov	r3, r2
 8004836:	009b      	lsls	r3, r3, #2
 8004838:	4413      	add	r3, r2
 800483a:	3b23      	subs	r3, #35	; 0x23
 800483c:	fa00 f203 	lsl.w	r2, r0, r3
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	430a      	orrs	r2, r1
 8004846:	631a      	str	r2, [r3, #48]	; 0x30
 8004848:	e023      	b.n	8004892 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004850:	683b      	ldr	r3, [r7, #0]
 8004852:	685a      	ldr	r2, [r3, #4]
 8004854:	4613      	mov	r3, r2
 8004856:	009b      	lsls	r3, r3, #2
 8004858:	4413      	add	r3, r2
 800485a:	3b41      	subs	r3, #65	; 0x41
 800485c:	221f      	movs	r2, #31
 800485e:	fa02 f303 	lsl.w	r3, r2, r3
 8004862:	43da      	mvns	r2, r3
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	400a      	ands	r2, r1
 800486a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004872:	683b      	ldr	r3, [r7, #0]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	b29b      	uxth	r3, r3
 8004878:	4618      	mov	r0, r3
 800487a:	683b      	ldr	r3, [r7, #0]
 800487c:	685a      	ldr	r2, [r3, #4]
 800487e:	4613      	mov	r3, r2
 8004880:	009b      	lsls	r3, r3, #2
 8004882:	4413      	add	r3, r2
 8004884:	3b41      	subs	r3, #65	; 0x41
 8004886:	fa00 f203 	lsl.w	r2, r0, r3
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	430a      	orrs	r2, r1
 8004890:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	4a20      	ldr	r2, [pc, #128]	; (8004918 <HAL_ADC_ConfigChannel+0x230>)
 8004898:	4293      	cmp	r3, r2
 800489a:	d109      	bne.n	80048b0 <HAL_ADC_ConfigChannel+0x1c8>
 800489c:	683b      	ldr	r3, [r7, #0]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	2b12      	cmp	r3, #18
 80048a2:	d105      	bne.n	80048b0 <HAL_ADC_ConfigChannel+0x1c8>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 80048a4:	4b1d      	ldr	r3, [pc, #116]	; (800491c <HAL_ADC_ConfigChannel+0x234>)
 80048a6:	685b      	ldr	r3, [r3, #4]
 80048a8:	4a1c      	ldr	r2, [pc, #112]	; (800491c <HAL_ADC_ConfigChannel+0x234>)
 80048aa:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80048ae:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	4a18      	ldr	r2, [pc, #96]	; (8004918 <HAL_ADC_ConfigChannel+0x230>)
 80048b6:	4293      	cmp	r3, r2
 80048b8:	d123      	bne.n	8004902 <HAL_ADC_ConfigChannel+0x21a>
 80048ba:	683b      	ldr	r3, [r7, #0]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	2b10      	cmp	r3, #16
 80048c0:	d003      	beq.n	80048ca <HAL_ADC_ConfigChannel+0x1e2>
 80048c2:	683b      	ldr	r3, [r7, #0]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	2b11      	cmp	r3, #17
 80048c8:	d11b      	bne.n	8004902 <HAL_ADC_ConfigChannel+0x21a>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 80048ca:	4b14      	ldr	r3, [pc, #80]	; (800491c <HAL_ADC_ConfigChannel+0x234>)
 80048cc:	685b      	ldr	r3, [r3, #4]
 80048ce:	4a13      	ldr	r2, [pc, #76]	; (800491c <HAL_ADC_ConfigChannel+0x234>)
 80048d0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80048d4:	6053      	str	r3, [r2, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80048d6:	683b      	ldr	r3, [r7, #0]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	2b10      	cmp	r3, #16
 80048dc:	d111      	bne.n	8004902 <HAL_ADC_ConfigChannel+0x21a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80048de:	4b10      	ldr	r3, [pc, #64]	; (8004920 <HAL_ADC_ConfigChannel+0x238>)
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	4a10      	ldr	r2, [pc, #64]	; (8004924 <HAL_ADC_ConfigChannel+0x23c>)
 80048e4:	fba2 2303 	umull	r2, r3, r2, r3
 80048e8:	0c9a      	lsrs	r2, r3, #18
 80048ea:	4613      	mov	r3, r2
 80048ec:	009b      	lsls	r3, r3, #2
 80048ee:	4413      	add	r3, r2
 80048f0:	005b      	lsls	r3, r3, #1
 80048f2:	60fb      	str	r3, [r7, #12]
      while(counter != 0U)
 80048f4:	e002      	b.n	80048fc <HAL_ADC_ConfigChannel+0x214>
      {
        counter--;
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	3b01      	subs	r3, #1
 80048fa:	60fb      	str	r3, [r7, #12]
      while(counter != 0U)
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d1f9      	bne.n	80048f6 <HAL_ADC_ConfigChannel+0x20e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	2200      	movs	r2, #0
 8004906:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800490a:	2300      	movs	r3, #0
}
 800490c:	4618      	mov	r0, r3
 800490e:	3714      	adds	r7, #20
 8004910:	46bd      	mov	sp, r7
 8004912:	bc80      	pop	{r7}
 8004914:	4770      	bx	lr
 8004916:	bf00      	nop
 8004918:	40012000 	.word	0x40012000
 800491c:	40012300 	.word	0x40012300
 8004920:	20000004 	.word	0x20000004
 8004924:	431bde83 	.word	0x431bde83

08004928 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004928:	b480      	push	{r7}
 800492a:	b085      	sub	sp, #20
 800492c:	af00      	add	r7, sp, #0
 800492e:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8004930:	4b7e      	ldr	r3, [pc, #504]	; (8004b2c <ADC_Init+0x204>)
 8004932:	685b      	ldr	r3, [r3, #4]
 8004934:	4a7d      	ldr	r2, [pc, #500]	; (8004b2c <ADC_Init+0x204>)
 8004936:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800493a:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 800493c:	4b7b      	ldr	r3, [pc, #492]	; (8004b2c <ADC_Init+0x204>)
 800493e:	685a      	ldr	r2, [r3, #4]
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	685b      	ldr	r3, [r3, #4]
 8004944:	4979      	ldr	r1, [pc, #484]	; (8004b2c <ADC_Init+0x204>)
 8004946:	4313      	orrs	r3, r2
 8004948:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	685a      	ldr	r2, [r3, #4]
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004958:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	6859      	ldr	r1, [r3, #4]
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	691b      	ldr	r3, [r3, #16]
 8004964:	021a      	lsls	r2, r3, #8
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	430a      	orrs	r2, r1
 800496c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	685a      	ldr	r2, [r3, #4]
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800497c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	6859      	ldr	r1, [r3, #4]
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	689a      	ldr	r2, [r3, #8]
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	430a      	orrs	r2, r1
 800498e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	689a      	ldr	r2, [r3, #8]
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800499e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	6899      	ldr	r1, [r3, #8]
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	68da      	ldr	r2, [r3, #12]
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	430a      	orrs	r2, r1
 80049b0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049b6:	4a5e      	ldr	r2, [pc, #376]	; (8004b30 <ADC_Init+0x208>)
 80049b8:	4293      	cmp	r3, r2
 80049ba:	d022      	beq.n	8004a02 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	689a      	ldr	r2, [r3, #8]
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80049ca:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	6899      	ldr	r1, [r3, #8]
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	430a      	orrs	r2, r1
 80049dc:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	689a      	ldr	r2, [r3, #8]
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80049ec:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	6899      	ldr	r1, [r3, #8]
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	430a      	orrs	r2, r1
 80049fe:	609a      	str	r2, [r3, #8]
 8004a00:	e00f      	b.n	8004a22 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	689a      	ldr	r2, [r3, #8]
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004a10:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	689a      	ldr	r2, [r3, #8]
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004a20:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	689a      	ldr	r2, [r3, #8]
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	f022 0202 	bic.w	r2, r2, #2
 8004a30:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	6899      	ldr	r1, [r3, #8]
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	7e1b      	ldrb	r3, [r3, #24]
 8004a3c:	005a      	lsls	r2, r3, #1
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	430a      	orrs	r2, r1
 8004a44:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d027      	beq.n	8004aa0 <ADC_Init+0x178>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	685a      	ldr	r2, [r3, #4]
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004a5e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	685a      	ldr	r2, [r3, #4]
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8004a6e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a74:	3b01      	subs	r3, #1
 8004a76:	f44f 4260 	mov.w	r2, #57344	; 0xe000
 8004a7a:	60fa      	str	r2, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a7c:	68fa      	ldr	r2, [r7, #12]
 8004a7e:	fa92 f2a2 	rbit	r2, r2
 8004a82:	60ba      	str	r2, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8004a84:	68ba      	ldr	r2, [r7, #8]
 8004a86:	fab2 f282 	clz	r2, r2
 8004a8a:	b2d2      	uxtb	r2, r2
 8004a8c:	fa03 f102 	lsl.w	r1, r3, r2
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	685a      	ldr	r2, [r3, #4]
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	430a      	orrs	r2, r1
 8004a9c:	605a      	str	r2, [r3, #4]
 8004a9e:	e007      	b.n	8004ab0 <ADC_Init+0x188>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	685a      	ldr	r2, [r3, #4]
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004aae:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8004abe:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	69db      	ldr	r3, [r3, #28]
 8004aca:	3b01      	subs	r3, #1
 8004acc:	051a      	lsls	r2, r3, #20
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	430a      	orrs	r2, r1
 8004ad4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	689a      	ldr	r2, [r3, #8]
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004ae4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	6899      	ldr	r1, [r3, #8]
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004af2:	025a      	lsls	r2, r3, #9
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	430a      	orrs	r2, r1
 8004afa:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	689a      	ldr	r2, [r3, #8]
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b0a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	6899      	ldr	r1, [r3, #8]
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	695b      	ldr	r3, [r3, #20]
 8004b16:	029a      	lsls	r2, r3, #10
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	430a      	orrs	r2, r1
 8004b1e:	609a      	str	r2, [r3, #8]
}
 8004b20:	bf00      	nop
 8004b22:	3714      	adds	r7, #20
 8004b24:	46bd      	mov	sp, r7
 8004b26:	bc80      	pop	{r7}
 8004b28:	4770      	bx	lr
 8004b2a:	bf00      	nop
 8004b2c:	40012300 	.word	0x40012300
 8004b30:	0f000001 	.word	0x0f000001

08004b34 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004b34:	b480      	push	{r7}
 8004b36:	b085      	sub	sp, #20
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	f003 0307 	and.w	r3, r3, #7
 8004b42:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004b44:	4b0c      	ldr	r3, [pc, #48]	; (8004b78 <__NVIC_SetPriorityGrouping+0x44>)
 8004b46:	68db      	ldr	r3, [r3, #12]
 8004b48:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004b4a:	68ba      	ldr	r2, [r7, #8]
 8004b4c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004b50:	4013      	ands	r3, r2
 8004b52:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004b58:	68bb      	ldr	r3, [r7, #8]
 8004b5a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004b5c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004b60:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004b64:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004b66:	4a04      	ldr	r2, [pc, #16]	; (8004b78 <__NVIC_SetPriorityGrouping+0x44>)
 8004b68:	68bb      	ldr	r3, [r7, #8]
 8004b6a:	60d3      	str	r3, [r2, #12]
}
 8004b6c:	bf00      	nop
 8004b6e:	3714      	adds	r7, #20
 8004b70:	46bd      	mov	sp, r7
 8004b72:	bc80      	pop	{r7}
 8004b74:	4770      	bx	lr
 8004b76:	bf00      	nop
 8004b78:	e000ed00 	.word	0xe000ed00

08004b7c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004b7c:	b480      	push	{r7}
 8004b7e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004b80:	4b04      	ldr	r3, [pc, #16]	; (8004b94 <__NVIC_GetPriorityGrouping+0x18>)
 8004b82:	68db      	ldr	r3, [r3, #12]
 8004b84:	0a1b      	lsrs	r3, r3, #8
 8004b86:	f003 0307 	and.w	r3, r3, #7
}
 8004b8a:	4618      	mov	r0, r3
 8004b8c:	46bd      	mov	sp, r7
 8004b8e:	bc80      	pop	{r7}
 8004b90:	4770      	bx	lr
 8004b92:	bf00      	nop
 8004b94:	e000ed00 	.word	0xe000ed00

08004b98 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004b98:	b480      	push	{r7}
 8004b9a:	b083      	sub	sp, #12
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	4603      	mov	r3, r0
 8004ba0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004ba2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	db0b      	blt.n	8004bc2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004baa:	79fb      	ldrb	r3, [r7, #7]
 8004bac:	f003 021f 	and.w	r2, r3, #31
 8004bb0:	4906      	ldr	r1, [pc, #24]	; (8004bcc <__NVIC_EnableIRQ+0x34>)
 8004bb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004bb6:	095b      	lsrs	r3, r3, #5
 8004bb8:	2001      	movs	r0, #1
 8004bba:	fa00 f202 	lsl.w	r2, r0, r2
 8004bbe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004bc2:	bf00      	nop
 8004bc4:	370c      	adds	r7, #12
 8004bc6:	46bd      	mov	sp, r7
 8004bc8:	bc80      	pop	{r7}
 8004bca:	4770      	bx	lr
 8004bcc:	e000e100 	.word	0xe000e100

08004bd0 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004bd0:	b480      	push	{r7}
 8004bd2:	b083      	sub	sp, #12
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	4603      	mov	r3, r0
 8004bd8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004bda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	db12      	blt.n	8004c08 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004be2:	79fb      	ldrb	r3, [r7, #7]
 8004be4:	f003 021f 	and.w	r2, r3, #31
 8004be8:	490a      	ldr	r1, [pc, #40]	; (8004c14 <__NVIC_DisableIRQ+0x44>)
 8004bea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004bee:	095b      	lsrs	r3, r3, #5
 8004bf0:	2001      	movs	r0, #1
 8004bf2:	fa00 f202 	lsl.w	r2, r0, r2
 8004bf6:	3320      	adds	r3, #32
 8004bf8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8004bfc:	f3bf 8f4f 	dsb	sy
}
 8004c00:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8004c02:	f3bf 8f6f 	isb	sy
}
 8004c06:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8004c08:	bf00      	nop
 8004c0a:	370c      	adds	r7, #12
 8004c0c:	46bd      	mov	sp, r7
 8004c0e:	bc80      	pop	{r7}
 8004c10:	4770      	bx	lr
 8004c12:	bf00      	nop
 8004c14:	e000e100 	.word	0xe000e100

08004c18 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004c18:	b480      	push	{r7}
 8004c1a:	b083      	sub	sp, #12
 8004c1c:	af00      	add	r7, sp, #0
 8004c1e:	4603      	mov	r3, r0
 8004c20:	6039      	str	r1, [r7, #0]
 8004c22:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004c24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	db0a      	blt.n	8004c42 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004c2c:	683b      	ldr	r3, [r7, #0]
 8004c2e:	b2da      	uxtb	r2, r3
 8004c30:	490c      	ldr	r1, [pc, #48]	; (8004c64 <__NVIC_SetPriority+0x4c>)
 8004c32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c36:	0112      	lsls	r2, r2, #4
 8004c38:	b2d2      	uxtb	r2, r2
 8004c3a:	440b      	add	r3, r1
 8004c3c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004c40:	e00a      	b.n	8004c58 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004c42:	683b      	ldr	r3, [r7, #0]
 8004c44:	b2da      	uxtb	r2, r3
 8004c46:	4908      	ldr	r1, [pc, #32]	; (8004c68 <__NVIC_SetPriority+0x50>)
 8004c48:	79fb      	ldrb	r3, [r7, #7]
 8004c4a:	f003 030f 	and.w	r3, r3, #15
 8004c4e:	3b04      	subs	r3, #4
 8004c50:	0112      	lsls	r2, r2, #4
 8004c52:	b2d2      	uxtb	r2, r2
 8004c54:	440b      	add	r3, r1
 8004c56:	761a      	strb	r2, [r3, #24]
}
 8004c58:	bf00      	nop
 8004c5a:	370c      	adds	r7, #12
 8004c5c:	46bd      	mov	sp, r7
 8004c5e:	bc80      	pop	{r7}
 8004c60:	4770      	bx	lr
 8004c62:	bf00      	nop
 8004c64:	e000e100 	.word	0xe000e100
 8004c68:	e000ed00 	.word	0xe000ed00

08004c6c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004c6c:	b480      	push	{r7}
 8004c6e:	b089      	sub	sp, #36	; 0x24
 8004c70:	af00      	add	r7, sp, #0
 8004c72:	60f8      	str	r0, [r7, #12]
 8004c74:	60b9      	str	r1, [r7, #8]
 8004c76:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	f003 0307 	and.w	r3, r3, #7
 8004c7e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004c80:	69fb      	ldr	r3, [r7, #28]
 8004c82:	f1c3 0307 	rsb	r3, r3, #7
 8004c86:	2b04      	cmp	r3, #4
 8004c88:	bf28      	it	cs
 8004c8a:	2304      	movcs	r3, #4
 8004c8c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004c8e:	69fb      	ldr	r3, [r7, #28]
 8004c90:	3304      	adds	r3, #4
 8004c92:	2b06      	cmp	r3, #6
 8004c94:	d902      	bls.n	8004c9c <NVIC_EncodePriority+0x30>
 8004c96:	69fb      	ldr	r3, [r7, #28]
 8004c98:	3b03      	subs	r3, #3
 8004c9a:	e000      	b.n	8004c9e <NVIC_EncodePriority+0x32>
 8004c9c:	2300      	movs	r3, #0
 8004c9e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004ca0:	f04f 32ff 	mov.w	r2, #4294967295
 8004ca4:	69bb      	ldr	r3, [r7, #24]
 8004ca6:	fa02 f303 	lsl.w	r3, r2, r3
 8004caa:	43da      	mvns	r2, r3
 8004cac:	68bb      	ldr	r3, [r7, #8]
 8004cae:	401a      	ands	r2, r3
 8004cb0:	697b      	ldr	r3, [r7, #20]
 8004cb2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004cb4:	f04f 31ff 	mov.w	r1, #4294967295
 8004cb8:	697b      	ldr	r3, [r7, #20]
 8004cba:	fa01 f303 	lsl.w	r3, r1, r3
 8004cbe:	43d9      	mvns	r1, r3
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004cc4:	4313      	orrs	r3, r2
         );
}
 8004cc6:	4618      	mov	r0, r3
 8004cc8:	3724      	adds	r7, #36	; 0x24
 8004cca:	46bd      	mov	sp, r7
 8004ccc:	bc80      	pop	{r7}
 8004cce:	4770      	bx	lr

08004cd0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004cd0:	b580      	push	{r7, lr}
 8004cd2:	b082      	sub	sp, #8
 8004cd4:	af00      	add	r7, sp, #0
 8004cd6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	3b01      	subs	r3, #1
 8004cdc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004ce0:	d301      	bcc.n	8004ce6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004ce2:	2301      	movs	r3, #1
 8004ce4:	e00f      	b.n	8004d06 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004ce6:	4a0a      	ldr	r2, [pc, #40]	; (8004d10 <SysTick_Config+0x40>)
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	3b01      	subs	r3, #1
 8004cec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004cee:	210f      	movs	r1, #15
 8004cf0:	f04f 30ff 	mov.w	r0, #4294967295
 8004cf4:	f7ff ff90 	bl	8004c18 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004cf8:	4b05      	ldr	r3, [pc, #20]	; (8004d10 <SysTick_Config+0x40>)
 8004cfa:	2200      	movs	r2, #0
 8004cfc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004cfe:	4b04      	ldr	r3, [pc, #16]	; (8004d10 <SysTick_Config+0x40>)
 8004d00:	2207      	movs	r2, #7
 8004d02:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004d04:	2300      	movs	r3, #0
}
 8004d06:	4618      	mov	r0, r3
 8004d08:	3708      	adds	r7, #8
 8004d0a:	46bd      	mov	sp, r7
 8004d0c:	bd80      	pop	{r7, pc}
 8004d0e:	bf00      	nop
 8004d10:	e000e010 	.word	0xe000e010

08004d14 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004d14:	b580      	push	{r7, lr}
 8004d16:	b082      	sub	sp, #8
 8004d18:	af00      	add	r7, sp, #0
 8004d1a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004d1c:	6878      	ldr	r0, [r7, #4]
 8004d1e:	f7ff ff09 	bl	8004b34 <__NVIC_SetPriorityGrouping>
}
 8004d22:	bf00      	nop
 8004d24:	3708      	adds	r7, #8
 8004d26:	46bd      	mov	sp, r7
 8004d28:	bd80      	pop	{r7, pc}

08004d2a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004d2a:	b580      	push	{r7, lr}
 8004d2c:	b086      	sub	sp, #24
 8004d2e:	af00      	add	r7, sp, #0
 8004d30:	4603      	mov	r3, r0
 8004d32:	60b9      	str	r1, [r7, #8]
 8004d34:	607a      	str	r2, [r7, #4]
 8004d36:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004d38:	2300      	movs	r3, #0
 8004d3a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004d3c:	f7ff ff1e 	bl	8004b7c <__NVIC_GetPriorityGrouping>
 8004d40:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004d42:	687a      	ldr	r2, [r7, #4]
 8004d44:	68b9      	ldr	r1, [r7, #8]
 8004d46:	6978      	ldr	r0, [r7, #20]
 8004d48:	f7ff ff90 	bl	8004c6c <NVIC_EncodePriority>
 8004d4c:	4602      	mov	r2, r0
 8004d4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004d52:	4611      	mov	r1, r2
 8004d54:	4618      	mov	r0, r3
 8004d56:	f7ff ff5f 	bl	8004c18 <__NVIC_SetPriority>
}
 8004d5a:	bf00      	nop
 8004d5c:	3718      	adds	r7, #24
 8004d5e:	46bd      	mov	sp, r7
 8004d60:	bd80      	pop	{r7, pc}

08004d62 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f2xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004d62:	b580      	push	{r7, lr}
 8004d64:	b082      	sub	sp, #8
 8004d66:	af00      	add	r7, sp, #0
 8004d68:	4603      	mov	r3, r0
 8004d6a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004d6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d70:	4618      	mov	r0, r3
 8004d72:	f7ff ff11 	bl	8004b98 <__NVIC_EnableIRQ>
}
 8004d76:	bf00      	nop
 8004d78:	3708      	adds	r7, #8
 8004d7a:	46bd      	mov	sp, r7
 8004d7c:	bd80      	pop	{r7, pc}

08004d7e <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f2xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004d7e:	b580      	push	{r7, lr}
 8004d80:	b082      	sub	sp, #8
 8004d82:	af00      	add	r7, sp, #0
 8004d84:	4603      	mov	r3, r0
 8004d86:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8004d88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d8c:	4618      	mov	r0, r3
 8004d8e:	f7ff ff1f 	bl	8004bd0 <__NVIC_DisableIRQ>
}
 8004d92:	bf00      	nop
 8004d94:	3708      	adds	r7, #8
 8004d96:	46bd      	mov	sp, r7
 8004d98:	bd80      	pop	{r7, pc}

08004d9a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004d9a:	b580      	push	{r7, lr}
 8004d9c:	b082      	sub	sp, #8
 8004d9e:	af00      	add	r7, sp, #0
 8004da0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004da2:	6878      	ldr	r0, [r7, #4]
 8004da4:	f7ff ff94 	bl	8004cd0 <SysTick_Config>
 8004da8:	4603      	mov	r3, r0
}
 8004daa:	4618      	mov	r0, r3
 8004dac:	3708      	adds	r7, #8
 8004dae:	46bd      	mov	sp, r7
 8004db0:	bd80      	pop	{r7, pc}
	...

08004db4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004db4:	b580      	push	{r7, lr}
 8004db6:	b086      	sub	sp, #24
 8004db8:	af00      	add	r7, sp, #0
 8004dba:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004dbc:	2300      	movs	r3, #0
 8004dbe:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004dc0:	f7ff fb70 	bl	80044a4 <HAL_GetTick>
 8004dc4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d101      	bne.n	8004dd0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004dcc:	2301      	movs	r3, #1
 8004dce:	e099      	b.n	8004f04 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	2202      	movs	r2, #2
 8004dd4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	2200      	movs	r2, #0
 8004ddc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	681a      	ldr	r2, [r3, #0]
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	f022 0201 	bic.w	r2, r2, #1
 8004dee:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004df0:	e00f      	b.n	8004e12 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004df2:	f7ff fb57 	bl	80044a4 <HAL_GetTick>
 8004df6:	4602      	mov	r2, r0
 8004df8:	693b      	ldr	r3, [r7, #16]
 8004dfa:	1ad3      	subs	r3, r2, r3
 8004dfc:	2b05      	cmp	r3, #5
 8004dfe:	d908      	bls.n	8004e12 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	2220      	movs	r2, #32
 8004e04:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	2203      	movs	r2, #3
 8004e0a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8004e0e:	2303      	movs	r3, #3
 8004e10:	e078      	b.n	8004f04 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	f003 0301 	and.w	r3, r3, #1
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d1e8      	bne.n	8004df2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004e28:	697a      	ldr	r2, [r7, #20]
 8004e2a:	4b38      	ldr	r3, [pc, #224]	; (8004f0c <HAL_DMA_Init+0x158>)
 8004e2c:	4013      	ands	r3, r2
 8004e2e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	685a      	ldr	r2, [r3, #4]
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	689b      	ldr	r3, [r3, #8]
 8004e38:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004e3e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	691b      	ldr	r3, [r3, #16]
 8004e44:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004e4a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	699b      	ldr	r3, [r3, #24]
 8004e50:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004e56:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	6a1b      	ldr	r3, [r3, #32]
 8004e5c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004e5e:	697a      	ldr	r2, [r7, #20]
 8004e60:	4313      	orrs	r3, r2
 8004e62:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e68:	2b04      	cmp	r3, #4
 8004e6a:	d107      	bne.n	8004e7c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e74:	4313      	orrs	r3, r2
 8004e76:	697a      	ldr	r2, [r7, #20]
 8004e78:	4313      	orrs	r3, r2
 8004e7a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	697a      	ldr	r2, [r7, #20]
 8004e82:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	695b      	ldr	r3, [r3, #20]
 8004e8a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004e8c:	697b      	ldr	r3, [r7, #20]
 8004e8e:	f023 0307 	bic.w	r3, r3, #7
 8004e92:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e98:	697a      	ldr	r2, [r7, #20]
 8004e9a:	4313      	orrs	r3, r2
 8004e9c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ea2:	2b04      	cmp	r3, #4
 8004ea4:	d117      	bne.n	8004ed6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004eaa:	697a      	ldr	r2, [r7, #20]
 8004eac:	4313      	orrs	r3, r2
 8004eae:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d00e      	beq.n	8004ed6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004eb8:	6878      	ldr	r0, [r7, #4]
 8004eba:	f000 f9e7 	bl	800528c <DMA_CheckFifoParam>
 8004ebe:	4603      	mov	r3, r0
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d008      	beq.n	8004ed6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	2240      	movs	r2, #64	; 0x40
 8004ec8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	2201      	movs	r2, #1
 8004ece:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8004ed2:	2301      	movs	r3, #1
 8004ed4:	e016      	b.n	8004f04 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	697a      	ldr	r2, [r7, #20]
 8004edc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004ede:	6878      	ldr	r0, [r7, #4]
 8004ee0:	f000 f9a0 	bl	8005224 <DMA_CalcBaseAndBitshift>
 8004ee4:	4603      	mov	r3, r0
 8004ee6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004eec:	223f      	movs	r2, #63	; 0x3f
 8004eee:	409a      	lsls	r2, r3
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	2200      	movs	r2, #0
 8004ef8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	2201      	movs	r2, #1
 8004efe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004f02:	2300      	movs	r3, #0
}
 8004f04:	4618      	mov	r0, r3
 8004f06:	3718      	adds	r7, #24
 8004f08:	46bd      	mov	sp, r7
 8004f0a:	bd80      	pop	{r7, pc}
 8004f0c:	f010803f 	.word	0xf010803f

08004f10 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004f10:	b580      	push	{r7, lr}
 8004f12:	b086      	sub	sp, #24
 8004f14:	af00      	add	r7, sp, #0
 8004f16:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004f18:	2300      	movs	r3, #0
 8004f1a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004f1c:	4b92      	ldr	r3, [pc, #584]	; (8005168 <HAL_DMA_IRQHandler+0x258>)
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	4a92      	ldr	r2, [pc, #584]	; (800516c <HAL_DMA_IRQHandler+0x25c>)
 8004f22:	fba2 2303 	umull	r2, r3, r2, r3
 8004f26:	0a9b      	lsrs	r3, r3, #10
 8004f28:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f2e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004f30:	693b      	ldr	r3, [r7, #16]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f3a:	2208      	movs	r2, #8
 8004f3c:	409a      	lsls	r2, r3
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	4013      	ands	r3, r2
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d01a      	beq.n	8004f7c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	f003 0304 	and.w	r3, r3, #4
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d013      	beq.n	8004f7c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	681a      	ldr	r2, [r3, #0]
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	f022 0204 	bic.w	r2, r2, #4
 8004f62:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f68:	2208      	movs	r2, #8
 8004f6a:	409a      	lsls	r2, r3
 8004f6c:	693b      	ldr	r3, [r7, #16]
 8004f6e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f74:	f043 0201 	orr.w	r2, r3, #1
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f80:	2201      	movs	r2, #1
 8004f82:	409a      	lsls	r2, r3
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	4013      	ands	r3, r2
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d012      	beq.n	8004fb2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	695b      	ldr	r3, [r3, #20]
 8004f92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d00b      	beq.n	8004fb2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f9e:	2201      	movs	r2, #1
 8004fa0:	409a      	lsls	r2, r3
 8004fa2:	693b      	ldr	r3, [r7, #16]
 8004fa4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004faa:	f043 0202 	orr.w	r2, r3, #2
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004fb6:	2204      	movs	r2, #4
 8004fb8:	409a      	lsls	r2, r3
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	4013      	ands	r3, r2
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d012      	beq.n	8004fe8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	f003 0302 	and.w	r3, r3, #2
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d00b      	beq.n	8004fe8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004fd4:	2204      	movs	r2, #4
 8004fd6:	409a      	lsls	r2, r3
 8004fd8:	693b      	ldr	r3, [r7, #16]
 8004fda:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fe0:	f043 0204 	orr.w	r2, r3, #4
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004fec:	2210      	movs	r2, #16
 8004fee:	409a      	lsls	r2, r3
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	4013      	ands	r3, r2
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d043      	beq.n	8005080 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	f003 0308 	and.w	r3, r3, #8
 8005002:	2b00      	cmp	r3, #0
 8005004:	d03c      	beq.n	8005080 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800500a:	2210      	movs	r2, #16
 800500c:	409a      	lsls	r2, r3
 800500e:	693b      	ldr	r3, [r7, #16]
 8005010:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800501c:	2b00      	cmp	r3, #0
 800501e:	d018      	beq.n	8005052 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800502a:	2b00      	cmp	r3, #0
 800502c:	d108      	bne.n	8005040 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005032:	2b00      	cmp	r3, #0
 8005034:	d024      	beq.n	8005080 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800503a:	6878      	ldr	r0, [r7, #4]
 800503c:	4798      	blx	r3
 800503e:	e01f      	b.n	8005080 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005044:	2b00      	cmp	r3, #0
 8005046:	d01b      	beq.n	8005080 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800504c:	6878      	ldr	r0, [r7, #4]
 800504e:	4798      	blx	r3
 8005050:	e016      	b.n	8005080 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800505c:	2b00      	cmp	r3, #0
 800505e:	d107      	bne.n	8005070 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	681a      	ldr	r2, [r3, #0]
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	f022 0208 	bic.w	r2, r2, #8
 800506e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005074:	2b00      	cmp	r3, #0
 8005076:	d003      	beq.n	8005080 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800507c:	6878      	ldr	r0, [r7, #4]
 800507e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005084:	2220      	movs	r2, #32
 8005086:	409a      	lsls	r2, r3
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	4013      	ands	r3, r2
 800508c:	2b00      	cmp	r3, #0
 800508e:	f000 808e 	beq.w	80051ae <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	f003 0310 	and.w	r3, r3, #16
 800509c:	2b00      	cmp	r3, #0
 800509e:	f000 8086 	beq.w	80051ae <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80050a6:	2220      	movs	r2, #32
 80050a8:	409a      	lsls	r2, r3
 80050aa:	693b      	ldr	r3, [r7, #16]
 80050ac:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80050b4:	b2db      	uxtb	r3, r3
 80050b6:	2b05      	cmp	r3, #5
 80050b8:	d136      	bne.n	8005128 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	681a      	ldr	r2, [r3, #0]
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	f022 0216 	bic.w	r2, r2, #22
 80050c8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	695a      	ldr	r2, [r3, #20]
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80050d8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d103      	bne.n	80050ea <HAL_DMA_IRQHandler+0x1da>
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d007      	beq.n	80050fa <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	681a      	ldr	r2, [r3, #0]
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	f022 0208 	bic.w	r2, r2, #8
 80050f8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80050fe:	223f      	movs	r2, #63	; 0x3f
 8005100:	409a      	lsls	r2, r3
 8005102:	693b      	ldr	r3, [r7, #16]
 8005104:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	2201      	movs	r2, #1
 800510a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	2200      	movs	r2, #0
 8005112:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800511a:	2b00      	cmp	r3, #0
 800511c:	d07d      	beq.n	800521a <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005122:	6878      	ldr	r0, [r7, #4]
 8005124:	4798      	blx	r3
        }
        return;
 8005126:	e078      	b.n	800521a <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005132:	2b00      	cmp	r3, #0
 8005134:	d01c      	beq.n	8005170 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005140:	2b00      	cmp	r3, #0
 8005142:	d108      	bne.n	8005156 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005148:	2b00      	cmp	r3, #0
 800514a:	d030      	beq.n	80051ae <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005150:	6878      	ldr	r0, [r7, #4]
 8005152:	4798      	blx	r3
 8005154:	e02b      	b.n	80051ae <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800515a:	2b00      	cmp	r3, #0
 800515c:	d027      	beq.n	80051ae <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005162:	6878      	ldr	r0, [r7, #4]
 8005164:	4798      	blx	r3
 8005166:	e022      	b.n	80051ae <HAL_DMA_IRQHandler+0x29e>
 8005168:	20000004 	.word	0x20000004
 800516c:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800517a:	2b00      	cmp	r3, #0
 800517c:	d10f      	bne.n	800519e <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	681a      	ldr	r2, [r3, #0]
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	f022 0210 	bic.w	r2, r2, #16
 800518c:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	2201      	movs	r2, #1
 8005192:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	2200      	movs	r2, #0
 800519a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d003      	beq.n	80051ae <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051aa:	6878      	ldr	r0, [r7, #4]
 80051ac:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d032      	beq.n	800521c <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051ba:	f003 0301 	and.w	r3, r3, #1
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d022      	beq.n	8005208 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	2205      	movs	r2, #5
 80051c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	681a      	ldr	r2, [r3, #0]
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	f022 0201 	bic.w	r2, r2, #1
 80051d8:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80051da:	68bb      	ldr	r3, [r7, #8]
 80051dc:	3301      	adds	r3, #1
 80051de:	60bb      	str	r3, [r7, #8]
 80051e0:	697a      	ldr	r2, [r7, #20]
 80051e2:	429a      	cmp	r2, r3
 80051e4:	d307      	bcc.n	80051f6 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	f003 0301 	and.w	r3, r3, #1
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d1f2      	bne.n	80051da <HAL_DMA_IRQHandler+0x2ca>
 80051f4:	e000      	b.n	80051f8 <HAL_DMA_IRQHandler+0x2e8>
          break;
 80051f6:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	2201      	movs	r2, #1
 80051fc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	2200      	movs	r2, #0
 8005204:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800520c:	2b00      	cmp	r3, #0
 800520e:	d005      	beq.n	800521c <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005214:	6878      	ldr	r0, [r7, #4]
 8005216:	4798      	blx	r3
 8005218:	e000      	b.n	800521c <HAL_DMA_IRQHandler+0x30c>
        return;
 800521a:	bf00      	nop
    }
  }
}
 800521c:	3718      	adds	r7, #24
 800521e:	46bd      	mov	sp, r7
 8005220:	bd80      	pop	{r7, pc}
 8005222:	bf00      	nop

08005224 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005224:	b480      	push	{r7}
 8005226:	b085      	sub	sp, #20
 8005228:	af00      	add	r7, sp, #0
 800522a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	b2db      	uxtb	r3, r3
 8005232:	3b10      	subs	r3, #16
 8005234:	4a13      	ldr	r2, [pc, #76]	; (8005284 <DMA_CalcBaseAndBitshift+0x60>)
 8005236:	fba2 2303 	umull	r2, r3, r2, r3
 800523a:	091b      	lsrs	r3, r3, #4
 800523c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800523e:	4a12      	ldr	r2, [pc, #72]	; (8005288 <DMA_CalcBaseAndBitshift+0x64>)
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	4413      	add	r3, r2
 8005244:	781b      	ldrb	r3, [r3, #0]
 8005246:	461a      	mov	r2, r3
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	2b03      	cmp	r3, #3
 8005250:	d909      	bls.n	8005266 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800525a:	f023 0303 	bic.w	r3, r3, #3
 800525e:	1d1a      	adds	r2, r3, #4
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	659a      	str	r2, [r3, #88]	; 0x58
 8005264:	e007      	b.n	8005276 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800526e:	f023 0303 	bic.w	r3, r3, #3
 8005272:	687a      	ldr	r2, [r7, #4]
 8005274:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800527a:	4618      	mov	r0, r3
 800527c:	3714      	adds	r7, #20
 800527e:	46bd      	mov	sp, r7
 8005280:	bc80      	pop	{r7}
 8005282:	4770      	bx	lr
 8005284:	aaaaaaab 	.word	0xaaaaaaab
 8005288:	0800f188 	.word	0x0800f188

0800528c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800528c:	b480      	push	{r7}
 800528e:	b085      	sub	sp, #20
 8005290:	af00      	add	r7, sp, #0
 8005292:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005294:	2300      	movs	r3, #0
 8005296:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800529c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	699b      	ldr	r3, [r3, #24]
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d11f      	bne.n	80052e6 <DMA_CheckFifoParam+0x5a>
 80052a6:	68bb      	ldr	r3, [r7, #8]
 80052a8:	2b03      	cmp	r3, #3
 80052aa:	d856      	bhi.n	800535a <DMA_CheckFifoParam+0xce>
 80052ac:	a201      	add	r2, pc, #4	; (adr r2, 80052b4 <DMA_CheckFifoParam+0x28>)
 80052ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052b2:	bf00      	nop
 80052b4:	080052c5 	.word	0x080052c5
 80052b8:	080052d7 	.word	0x080052d7
 80052bc:	080052c5 	.word	0x080052c5
 80052c0:	0800535b 	.word	0x0800535b
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052c8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d046      	beq.n	800535e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80052d0:	2301      	movs	r3, #1
 80052d2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80052d4:	e043      	b.n	800535e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052da:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80052de:	d140      	bne.n	8005362 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80052e0:	2301      	movs	r3, #1
 80052e2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80052e4:	e03d      	b.n	8005362 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	699b      	ldr	r3, [r3, #24]
 80052ea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80052ee:	d121      	bne.n	8005334 <DMA_CheckFifoParam+0xa8>
 80052f0:	68bb      	ldr	r3, [r7, #8]
 80052f2:	2b03      	cmp	r3, #3
 80052f4:	d837      	bhi.n	8005366 <DMA_CheckFifoParam+0xda>
 80052f6:	a201      	add	r2, pc, #4	; (adr r2, 80052fc <DMA_CheckFifoParam+0x70>)
 80052f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052fc:	0800530d 	.word	0x0800530d
 8005300:	08005313 	.word	0x08005313
 8005304:	0800530d 	.word	0x0800530d
 8005308:	08005325 	.word	0x08005325
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800530c:	2301      	movs	r3, #1
 800530e:	73fb      	strb	r3, [r7, #15]
      break;
 8005310:	e030      	b.n	8005374 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005316:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800531a:	2b00      	cmp	r3, #0
 800531c:	d025      	beq.n	800536a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800531e:	2301      	movs	r3, #1
 8005320:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005322:	e022      	b.n	800536a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005328:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800532c:	d11f      	bne.n	800536e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800532e:	2301      	movs	r3, #1
 8005330:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8005332:	e01c      	b.n	800536e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8005334:	68bb      	ldr	r3, [r7, #8]
 8005336:	2b02      	cmp	r3, #2
 8005338:	d903      	bls.n	8005342 <DMA_CheckFifoParam+0xb6>
 800533a:	68bb      	ldr	r3, [r7, #8]
 800533c:	2b03      	cmp	r3, #3
 800533e:	d003      	beq.n	8005348 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8005340:	e018      	b.n	8005374 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8005342:	2301      	movs	r3, #1
 8005344:	73fb      	strb	r3, [r7, #15]
      break;
 8005346:	e015      	b.n	8005374 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800534c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005350:	2b00      	cmp	r3, #0
 8005352:	d00e      	beq.n	8005372 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8005354:	2301      	movs	r3, #1
 8005356:	73fb      	strb	r3, [r7, #15]
      break;
 8005358:	e00b      	b.n	8005372 <DMA_CheckFifoParam+0xe6>
      break;
 800535a:	bf00      	nop
 800535c:	e00a      	b.n	8005374 <DMA_CheckFifoParam+0xe8>
      break;
 800535e:	bf00      	nop
 8005360:	e008      	b.n	8005374 <DMA_CheckFifoParam+0xe8>
      break;
 8005362:	bf00      	nop
 8005364:	e006      	b.n	8005374 <DMA_CheckFifoParam+0xe8>
      break;
 8005366:	bf00      	nop
 8005368:	e004      	b.n	8005374 <DMA_CheckFifoParam+0xe8>
      break;
 800536a:	bf00      	nop
 800536c:	e002      	b.n	8005374 <DMA_CheckFifoParam+0xe8>
      break;   
 800536e:	bf00      	nop
 8005370:	e000      	b.n	8005374 <DMA_CheckFifoParam+0xe8>
      break;
 8005372:	bf00      	nop
    }
  } 
  
  return status; 
 8005374:	7bfb      	ldrb	r3, [r7, #15]
}
 8005376:	4618      	mov	r0, r3
 8005378:	3714      	adds	r7, #20
 800537a:	46bd      	mov	sp, r7
 800537c:	bc80      	pop	{r7}
 800537e:	4770      	bx	lr

08005380 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005380:	b480      	push	{r7}
 8005382:	b087      	sub	sp, #28
 8005384:	af00      	add	r7, sp, #0
 8005386:	6078      	str	r0, [r7, #4]
 8005388:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800538a:	2300      	movs	r3, #0
 800538c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800538e:	e16f      	b.n	8005670 <HAL_GPIO_Init+0x2f0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8005390:	683b      	ldr	r3, [r7, #0]
 8005392:	681a      	ldr	r2, [r3, #0]
 8005394:	2101      	movs	r1, #1
 8005396:	697b      	ldr	r3, [r7, #20]
 8005398:	fa01 f303 	lsl.w	r3, r1, r3
 800539c:	4013      	ands	r3, r2
 800539e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	f000 8161 	beq.w	800566a <HAL_GPIO_Init+0x2ea>
    {
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80053a8:	683b      	ldr	r3, [r7, #0]
 80053aa:	685b      	ldr	r3, [r3, #4]
 80053ac:	f003 0303 	and.w	r3, r3, #3
 80053b0:	2b01      	cmp	r3, #1
 80053b2:	d005      	beq.n	80053c0 <HAL_GPIO_Init+0x40>
 80053b4:	683b      	ldr	r3, [r7, #0]
 80053b6:	685b      	ldr	r3, [r3, #4]
 80053b8:	f003 0303 	and.w	r3, r3, #3
 80053bc:	2b02      	cmp	r3, #2
 80053be:	d130      	bne.n	8005422 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	689b      	ldr	r3, [r3, #8]
 80053c4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80053c6:	697b      	ldr	r3, [r7, #20]
 80053c8:	005b      	lsls	r3, r3, #1
 80053ca:	2203      	movs	r2, #3
 80053cc:	fa02 f303 	lsl.w	r3, r2, r3
 80053d0:	43db      	mvns	r3, r3
 80053d2:	693a      	ldr	r2, [r7, #16]
 80053d4:	4013      	ands	r3, r2
 80053d6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80053d8:	683b      	ldr	r3, [r7, #0]
 80053da:	68da      	ldr	r2, [r3, #12]
 80053dc:	697b      	ldr	r3, [r7, #20]
 80053de:	005b      	lsls	r3, r3, #1
 80053e0:	fa02 f303 	lsl.w	r3, r2, r3
 80053e4:	693a      	ldr	r2, [r7, #16]
 80053e6:	4313      	orrs	r3, r2
 80053e8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	693a      	ldr	r2, [r7, #16]
 80053ee:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	685b      	ldr	r3, [r3, #4]
 80053f4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80053f6:	2201      	movs	r2, #1
 80053f8:	697b      	ldr	r3, [r7, #20]
 80053fa:	fa02 f303 	lsl.w	r3, r2, r3
 80053fe:	43db      	mvns	r3, r3
 8005400:	693a      	ldr	r2, [r7, #16]
 8005402:	4013      	ands	r3, r2
 8005404:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005406:	683b      	ldr	r3, [r7, #0]
 8005408:	685b      	ldr	r3, [r3, #4]
 800540a:	091b      	lsrs	r3, r3, #4
 800540c:	f003 0201 	and.w	r2, r3, #1
 8005410:	697b      	ldr	r3, [r7, #20]
 8005412:	fa02 f303 	lsl.w	r3, r2, r3
 8005416:	693a      	ldr	r2, [r7, #16]
 8005418:	4313      	orrs	r3, r2
 800541a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	693a      	ldr	r2, [r7, #16]
 8005420:	605a      	str	r2, [r3, #4]
      }
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005422:	683b      	ldr	r3, [r7, #0]
 8005424:	685b      	ldr	r3, [r3, #4]
 8005426:	f003 0303 	and.w	r3, r3, #3
 800542a:	2b03      	cmp	r3, #3
 800542c:	d017      	beq.n	800545e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	68db      	ldr	r3, [r3, #12]
 8005432:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8005434:	697b      	ldr	r3, [r7, #20]
 8005436:	005b      	lsls	r3, r3, #1
 8005438:	2203      	movs	r2, #3
 800543a:	fa02 f303 	lsl.w	r3, r2, r3
 800543e:	43db      	mvns	r3, r3
 8005440:	693a      	ldr	r2, [r7, #16]
 8005442:	4013      	ands	r3, r2
 8005444:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8005446:	683b      	ldr	r3, [r7, #0]
 8005448:	689a      	ldr	r2, [r3, #8]
 800544a:	697b      	ldr	r3, [r7, #20]
 800544c:	005b      	lsls	r3, r3, #1
 800544e:	fa02 f303 	lsl.w	r3, r2, r3
 8005452:	693a      	ldr	r2, [r7, #16]
 8005454:	4313      	orrs	r3, r2
 8005456:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	693a      	ldr	r2, [r7, #16]
 800545c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800545e:	683b      	ldr	r3, [r7, #0]
 8005460:	685b      	ldr	r3, [r3, #4]
 8005462:	f003 0303 	and.w	r3, r3, #3
 8005466:	2b02      	cmp	r3, #2
 8005468:	d123      	bne.n	80054b2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800546a:	697b      	ldr	r3, [r7, #20]
 800546c:	08da      	lsrs	r2, r3, #3
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	3208      	adds	r2, #8
 8005472:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005476:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8005478:	697b      	ldr	r3, [r7, #20]
 800547a:	f003 0307 	and.w	r3, r3, #7
 800547e:	009b      	lsls	r3, r3, #2
 8005480:	220f      	movs	r2, #15
 8005482:	fa02 f303 	lsl.w	r3, r2, r3
 8005486:	43db      	mvns	r3, r3
 8005488:	693a      	ldr	r2, [r7, #16]
 800548a:	4013      	ands	r3, r2
 800548c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800548e:	683b      	ldr	r3, [r7, #0]
 8005490:	691a      	ldr	r2, [r3, #16]
 8005492:	697b      	ldr	r3, [r7, #20]
 8005494:	f003 0307 	and.w	r3, r3, #7
 8005498:	009b      	lsls	r3, r3, #2
 800549a:	fa02 f303 	lsl.w	r3, r2, r3
 800549e:	693a      	ldr	r2, [r7, #16]
 80054a0:	4313      	orrs	r3, r2
 80054a2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80054a4:	697b      	ldr	r3, [r7, #20]
 80054a6:	08da      	lsrs	r2, r3, #3
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	3208      	adds	r2, #8
 80054ac:	6939      	ldr	r1, [r7, #16]
 80054ae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80054b8:	697b      	ldr	r3, [r7, #20]
 80054ba:	005b      	lsls	r3, r3, #1
 80054bc:	2203      	movs	r2, #3
 80054be:	fa02 f303 	lsl.w	r3, r2, r3
 80054c2:	43db      	mvns	r3, r3
 80054c4:	693a      	ldr	r2, [r7, #16]
 80054c6:	4013      	ands	r3, r2
 80054c8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80054ca:	683b      	ldr	r3, [r7, #0]
 80054cc:	685b      	ldr	r3, [r3, #4]
 80054ce:	f003 0203 	and.w	r2, r3, #3
 80054d2:	697b      	ldr	r3, [r7, #20]
 80054d4:	005b      	lsls	r3, r3, #1
 80054d6:	fa02 f303 	lsl.w	r3, r2, r3
 80054da:	693a      	ldr	r2, [r7, #16]
 80054dc:	4313      	orrs	r3, r2
 80054de:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	693a      	ldr	r2, [r7, #16]
 80054e4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80054e6:	683b      	ldr	r3, [r7, #0]
 80054e8:	685b      	ldr	r3, [r3, #4]
 80054ea:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	f000 80bb 	beq.w	800566a <HAL_GPIO_Init+0x2ea>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80054f4:	2300      	movs	r3, #0
 80054f6:	60bb      	str	r3, [r7, #8]
 80054f8:	4b64      	ldr	r3, [pc, #400]	; (800568c <HAL_GPIO_Init+0x30c>)
 80054fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054fc:	4a63      	ldr	r2, [pc, #396]	; (800568c <HAL_GPIO_Init+0x30c>)
 80054fe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005502:	6453      	str	r3, [r2, #68]	; 0x44
 8005504:	4b61      	ldr	r3, [pc, #388]	; (800568c <HAL_GPIO_Init+0x30c>)
 8005506:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005508:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800550c:	60bb      	str	r3, [r7, #8]
 800550e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8005510:	4a5f      	ldr	r2, [pc, #380]	; (8005690 <HAL_GPIO_Init+0x310>)
 8005512:	697b      	ldr	r3, [r7, #20]
 8005514:	089b      	lsrs	r3, r3, #2
 8005516:	3302      	adds	r3, #2
 8005518:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800551c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800551e:	697b      	ldr	r3, [r7, #20]
 8005520:	f003 0303 	and.w	r3, r3, #3
 8005524:	009b      	lsls	r3, r3, #2
 8005526:	220f      	movs	r2, #15
 8005528:	fa02 f303 	lsl.w	r3, r2, r3
 800552c:	43db      	mvns	r3, r3
 800552e:	693a      	ldr	r2, [r7, #16]
 8005530:	4013      	ands	r3, r2
 8005532:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	4a57      	ldr	r2, [pc, #348]	; (8005694 <HAL_GPIO_Init+0x314>)
 8005538:	4293      	cmp	r3, r2
 800553a:	d031      	beq.n	80055a0 <HAL_GPIO_Init+0x220>
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	4a56      	ldr	r2, [pc, #344]	; (8005698 <HAL_GPIO_Init+0x318>)
 8005540:	4293      	cmp	r3, r2
 8005542:	d02b      	beq.n	800559c <HAL_GPIO_Init+0x21c>
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	4a55      	ldr	r2, [pc, #340]	; (800569c <HAL_GPIO_Init+0x31c>)
 8005548:	4293      	cmp	r3, r2
 800554a:	d025      	beq.n	8005598 <HAL_GPIO_Init+0x218>
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	4a54      	ldr	r2, [pc, #336]	; (80056a0 <HAL_GPIO_Init+0x320>)
 8005550:	4293      	cmp	r3, r2
 8005552:	d01f      	beq.n	8005594 <HAL_GPIO_Init+0x214>
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	4a53      	ldr	r2, [pc, #332]	; (80056a4 <HAL_GPIO_Init+0x324>)
 8005558:	4293      	cmp	r3, r2
 800555a:	d019      	beq.n	8005590 <HAL_GPIO_Init+0x210>
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	4a52      	ldr	r2, [pc, #328]	; (80056a8 <HAL_GPIO_Init+0x328>)
 8005560:	4293      	cmp	r3, r2
 8005562:	d013      	beq.n	800558c <HAL_GPIO_Init+0x20c>
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	4a51      	ldr	r2, [pc, #324]	; (80056ac <HAL_GPIO_Init+0x32c>)
 8005568:	4293      	cmp	r3, r2
 800556a:	d00d      	beq.n	8005588 <HAL_GPIO_Init+0x208>
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	4a50      	ldr	r2, [pc, #320]	; (80056b0 <HAL_GPIO_Init+0x330>)
 8005570:	4293      	cmp	r3, r2
 8005572:	d007      	beq.n	8005584 <HAL_GPIO_Init+0x204>
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	4a4f      	ldr	r2, [pc, #316]	; (80056b4 <HAL_GPIO_Init+0x334>)
 8005578:	4293      	cmp	r3, r2
 800557a:	d101      	bne.n	8005580 <HAL_GPIO_Init+0x200>
 800557c:	2308      	movs	r3, #8
 800557e:	e010      	b.n	80055a2 <HAL_GPIO_Init+0x222>
 8005580:	2309      	movs	r3, #9
 8005582:	e00e      	b.n	80055a2 <HAL_GPIO_Init+0x222>
 8005584:	2307      	movs	r3, #7
 8005586:	e00c      	b.n	80055a2 <HAL_GPIO_Init+0x222>
 8005588:	2306      	movs	r3, #6
 800558a:	e00a      	b.n	80055a2 <HAL_GPIO_Init+0x222>
 800558c:	2305      	movs	r3, #5
 800558e:	e008      	b.n	80055a2 <HAL_GPIO_Init+0x222>
 8005590:	2304      	movs	r3, #4
 8005592:	e006      	b.n	80055a2 <HAL_GPIO_Init+0x222>
 8005594:	2303      	movs	r3, #3
 8005596:	e004      	b.n	80055a2 <HAL_GPIO_Init+0x222>
 8005598:	2302      	movs	r3, #2
 800559a:	e002      	b.n	80055a2 <HAL_GPIO_Init+0x222>
 800559c:	2301      	movs	r3, #1
 800559e:	e000      	b.n	80055a2 <HAL_GPIO_Init+0x222>
 80055a0:	2300      	movs	r3, #0
 80055a2:	697a      	ldr	r2, [r7, #20]
 80055a4:	f002 0203 	and.w	r2, r2, #3
 80055a8:	0092      	lsls	r2, r2, #2
 80055aa:	4093      	lsls	r3, r2
 80055ac:	461a      	mov	r2, r3
 80055ae:	693b      	ldr	r3, [r7, #16]
 80055b0:	4313      	orrs	r3, r2
 80055b2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80055b4:	4936      	ldr	r1, [pc, #216]	; (8005690 <HAL_GPIO_Init+0x310>)
 80055b6:	697b      	ldr	r3, [r7, #20]
 80055b8:	089b      	lsrs	r3, r3, #2
 80055ba:	3302      	adds	r3, #2
 80055bc:	693a      	ldr	r2, [r7, #16]
 80055be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80055c2:	4b3d      	ldr	r3, [pc, #244]	; (80056b8 <HAL_GPIO_Init+0x338>)
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	43db      	mvns	r3, r3
 80055cc:	693a      	ldr	r2, [r7, #16]
 80055ce:	4013      	ands	r3, r2
 80055d0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80055d2:	683b      	ldr	r3, [r7, #0]
 80055d4:	685b      	ldr	r3, [r3, #4]
 80055d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d003      	beq.n	80055e6 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80055de:	693a      	ldr	r2, [r7, #16]
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	4313      	orrs	r3, r2
 80055e4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80055e6:	4a34      	ldr	r2, [pc, #208]	; (80056b8 <HAL_GPIO_Init+0x338>)
 80055e8:	693b      	ldr	r3, [r7, #16]
 80055ea:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80055ec:	4b32      	ldr	r3, [pc, #200]	; (80056b8 <HAL_GPIO_Init+0x338>)
 80055ee:	685b      	ldr	r3, [r3, #4]
 80055f0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	43db      	mvns	r3, r3
 80055f6:	693a      	ldr	r2, [r7, #16]
 80055f8:	4013      	ands	r3, r2
 80055fa:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80055fc:	683b      	ldr	r3, [r7, #0]
 80055fe:	685b      	ldr	r3, [r3, #4]
 8005600:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005604:	2b00      	cmp	r3, #0
 8005606:	d003      	beq.n	8005610 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8005608:	693a      	ldr	r2, [r7, #16]
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	4313      	orrs	r3, r2
 800560e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8005610:	4a29      	ldr	r2, [pc, #164]	; (80056b8 <HAL_GPIO_Init+0x338>)
 8005612:	693b      	ldr	r3, [r7, #16]
 8005614:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005616:	4b28      	ldr	r3, [pc, #160]	; (80056b8 <HAL_GPIO_Init+0x338>)
 8005618:	689b      	ldr	r3, [r3, #8]
 800561a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	43db      	mvns	r3, r3
 8005620:	693a      	ldr	r2, [r7, #16]
 8005622:	4013      	ands	r3, r2
 8005624:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8005626:	683b      	ldr	r3, [r7, #0]
 8005628:	685b      	ldr	r3, [r3, #4]
 800562a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800562e:	2b00      	cmp	r3, #0
 8005630:	d003      	beq.n	800563a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8005632:	693a      	ldr	r2, [r7, #16]
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	4313      	orrs	r3, r2
 8005638:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800563a:	4a1f      	ldr	r2, [pc, #124]	; (80056b8 <HAL_GPIO_Init+0x338>)
 800563c:	693b      	ldr	r3, [r7, #16]
 800563e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005640:	4b1d      	ldr	r3, [pc, #116]	; (80056b8 <HAL_GPIO_Init+0x338>)
 8005642:	68db      	ldr	r3, [r3, #12]
 8005644:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	43db      	mvns	r3, r3
 800564a:	693a      	ldr	r2, [r7, #16]
 800564c:	4013      	ands	r3, r2
 800564e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8005650:	683b      	ldr	r3, [r7, #0]
 8005652:	685b      	ldr	r3, [r3, #4]
 8005654:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005658:	2b00      	cmp	r3, #0
 800565a:	d003      	beq.n	8005664 <HAL_GPIO_Init+0x2e4>
        {
          temp |= iocurrent;
 800565c:	693a      	ldr	r2, [r7, #16]
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	4313      	orrs	r3, r2
 8005662:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8005664:	4a14      	ldr	r2, [pc, #80]	; (80056b8 <HAL_GPIO_Init+0x338>)
 8005666:	693b      	ldr	r3, [r7, #16]
 8005668:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800566a:	697b      	ldr	r3, [r7, #20]
 800566c:	3301      	adds	r3, #1
 800566e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005670:	683b      	ldr	r3, [r7, #0]
 8005672:	681a      	ldr	r2, [r3, #0]
 8005674:	697b      	ldr	r3, [r7, #20]
 8005676:	fa22 f303 	lsr.w	r3, r2, r3
 800567a:	2b00      	cmp	r3, #0
 800567c:	f47f ae88 	bne.w	8005390 <HAL_GPIO_Init+0x10>
  }
}
 8005680:	bf00      	nop
 8005682:	bf00      	nop
 8005684:	371c      	adds	r7, #28
 8005686:	46bd      	mov	sp, r7
 8005688:	bc80      	pop	{r7}
 800568a:	4770      	bx	lr
 800568c:	40023800 	.word	0x40023800
 8005690:	40013800 	.word	0x40013800
 8005694:	40020000 	.word	0x40020000
 8005698:	40020400 	.word	0x40020400
 800569c:	40020800 	.word	0x40020800
 80056a0:	40020c00 	.word	0x40020c00
 80056a4:	40021000 	.word	0x40021000
 80056a8:	40021400 	.word	0x40021400
 80056ac:	40021800 	.word	0x40021800
 80056b0:	40021c00 	.word	0x40021c00
 80056b4:	40022000 	.word	0x40022000
 80056b8:	40013c00 	.word	0x40013c00

080056bc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80056bc:	b480      	push	{r7}
 80056be:	b083      	sub	sp, #12
 80056c0:	af00      	add	r7, sp, #0
 80056c2:	6078      	str	r0, [r7, #4]
 80056c4:	460b      	mov	r3, r1
 80056c6:	807b      	strh	r3, [r7, #2]
 80056c8:	4613      	mov	r3, r2
 80056ca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80056cc:	787b      	ldrb	r3, [r7, #1]
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d003      	beq.n	80056da <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80056d2:	887a      	ldrh	r2, [r7, #2]
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80056d8:	e003      	b.n	80056e2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80056da:	887b      	ldrh	r3, [r7, #2]
 80056dc:	041a      	lsls	r2, r3, #16
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	619a      	str	r2, [r3, #24]
}
 80056e2:	bf00      	nop
 80056e4:	370c      	adds	r7, #12
 80056e6:	46bd      	mov	sp, r7
 80056e8:	bc80      	pop	{r7}
 80056ea:	4770      	bx	lr

080056ec <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..I) to select the GPIO peripheral. 
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80056ec:	b480      	push	{r7}
 80056ee:	b085      	sub	sp, #20
 80056f0:	af00      	add	r7, sp, #0
 80056f2:	6078      	str	r0, [r7, #4]
 80056f4:	460b      	mov	r3, r1
 80056f6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	695b      	ldr	r3, [r3, #20]
 80056fc:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80056fe:	887a      	ldrh	r2, [r7, #2]
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	4013      	ands	r3, r2
 8005704:	041a      	lsls	r2, r3, #16
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	43d9      	mvns	r1, r3
 800570a:	887b      	ldrh	r3, [r7, #2]
 800570c:	400b      	ands	r3, r1
 800570e:	431a      	orrs	r2, r3
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	619a      	str	r2, [r3, #24]
}
 8005714:	bf00      	nop
 8005716:	3714      	adds	r7, #20
 8005718:	46bd      	mov	sp, r7
 800571a:	bc80      	pop	{r7}
 800571c:	4770      	bx	lr
	...

08005720 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005720:	b580      	push	{r7, lr}
 8005722:	b082      	sub	sp, #8
 8005724:	af00      	add	r7, sp, #0
 8005726:	4603      	mov	r3, r0
 8005728:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800572a:	4b08      	ldr	r3, [pc, #32]	; (800574c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800572c:	695a      	ldr	r2, [r3, #20]
 800572e:	88fb      	ldrh	r3, [r7, #6]
 8005730:	4013      	ands	r3, r2
 8005732:	2b00      	cmp	r3, #0
 8005734:	d006      	beq.n	8005744 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005736:	4a05      	ldr	r2, [pc, #20]	; (800574c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005738:	88fb      	ldrh	r3, [r7, #6]
 800573a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800573c:	88fb      	ldrh	r3, [r7, #6]
 800573e:	4618      	mov	r0, r3
 8005740:	f7fd fe7e 	bl	8003440 <HAL_GPIO_EXTI_Callback>
  }
}
 8005744:	bf00      	nop
 8005746:	3708      	adds	r7, #8
 8005748:	46bd      	mov	sp, r7
 800574a:	bd80      	pop	{r7, pc}
 800574c:	40013c00 	.word	0x40013c00

08005750 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005750:	b580      	push	{r7, lr}
 8005752:	b084      	sub	sp, #16
 8005754:	af00      	add	r7, sp, #0
 8005756:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	2b00      	cmp	r3, #0
 800575c:	d101      	bne.n	8005762 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800575e:	2301      	movs	r3, #1
 8005760:	e12b      	b.n	80059ba <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005768:	b2db      	uxtb	r3, r3
 800576a:	2b00      	cmp	r3, #0
 800576c:	d106      	bne.n	800577c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	2200      	movs	r2, #0
 8005772:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005776:	6878      	ldr	r0, [r7, #4]
 8005778:	f7fe fbc6 	bl	8003f08 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	2224      	movs	r2, #36	; 0x24
 8005780:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	681a      	ldr	r2, [r3, #0]
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	f022 0201 	bic.w	r2, r2, #1
 8005792:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	681a      	ldr	r2, [r3, #0]
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80057a2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	681a      	ldr	r2, [r3, #0]
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80057b2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80057b4:	f002 fd12 	bl	80081dc <HAL_RCC_GetPCLK1Freq>
 80057b8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	685b      	ldr	r3, [r3, #4]
 80057be:	4a81      	ldr	r2, [pc, #516]	; (80059c4 <HAL_I2C_Init+0x274>)
 80057c0:	4293      	cmp	r3, r2
 80057c2:	d807      	bhi.n	80057d4 <HAL_I2C_Init+0x84>
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	4a80      	ldr	r2, [pc, #512]	; (80059c8 <HAL_I2C_Init+0x278>)
 80057c8:	4293      	cmp	r3, r2
 80057ca:	bf94      	ite	ls
 80057cc:	2301      	movls	r3, #1
 80057ce:	2300      	movhi	r3, #0
 80057d0:	b2db      	uxtb	r3, r3
 80057d2:	e006      	b.n	80057e2 <HAL_I2C_Init+0x92>
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	4a7d      	ldr	r2, [pc, #500]	; (80059cc <HAL_I2C_Init+0x27c>)
 80057d8:	4293      	cmp	r3, r2
 80057da:	bf94      	ite	ls
 80057dc:	2301      	movls	r3, #1
 80057de:	2300      	movhi	r3, #0
 80057e0:	b2db      	uxtb	r3, r3
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d001      	beq.n	80057ea <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80057e6:	2301      	movs	r3, #1
 80057e8:	e0e7      	b.n	80059ba <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	4a78      	ldr	r2, [pc, #480]	; (80059d0 <HAL_I2C_Init+0x280>)
 80057ee:	fba2 2303 	umull	r2, r3, r2, r3
 80057f2:	0c9b      	lsrs	r3, r3, #18
 80057f4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	685b      	ldr	r3, [r3, #4]
 80057fc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	68ba      	ldr	r2, [r7, #8]
 8005806:	430a      	orrs	r2, r1
 8005808:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	6a1b      	ldr	r3, [r3, #32]
 8005810:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	685b      	ldr	r3, [r3, #4]
 8005818:	4a6a      	ldr	r2, [pc, #424]	; (80059c4 <HAL_I2C_Init+0x274>)
 800581a:	4293      	cmp	r3, r2
 800581c:	d802      	bhi.n	8005824 <HAL_I2C_Init+0xd4>
 800581e:	68bb      	ldr	r3, [r7, #8]
 8005820:	3301      	adds	r3, #1
 8005822:	e009      	b.n	8005838 <HAL_I2C_Init+0xe8>
 8005824:	68bb      	ldr	r3, [r7, #8]
 8005826:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800582a:	fb02 f303 	mul.w	r3, r2, r3
 800582e:	4a69      	ldr	r2, [pc, #420]	; (80059d4 <HAL_I2C_Init+0x284>)
 8005830:	fba2 2303 	umull	r2, r3, r2, r3
 8005834:	099b      	lsrs	r3, r3, #6
 8005836:	3301      	adds	r3, #1
 8005838:	687a      	ldr	r2, [r7, #4]
 800583a:	6812      	ldr	r2, [r2, #0]
 800583c:	430b      	orrs	r3, r1
 800583e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	69db      	ldr	r3, [r3, #28]
 8005846:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800584a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	685b      	ldr	r3, [r3, #4]
 8005852:	495c      	ldr	r1, [pc, #368]	; (80059c4 <HAL_I2C_Init+0x274>)
 8005854:	428b      	cmp	r3, r1
 8005856:	d819      	bhi.n	800588c <HAL_I2C_Init+0x13c>
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	1e59      	subs	r1, r3, #1
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	685b      	ldr	r3, [r3, #4]
 8005860:	005b      	lsls	r3, r3, #1
 8005862:	fbb1 f3f3 	udiv	r3, r1, r3
 8005866:	1c59      	adds	r1, r3, #1
 8005868:	f640 73fc 	movw	r3, #4092	; 0xffc
 800586c:	400b      	ands	r3, r1
 800586e:	2b00      	cmp	r3, #0
 8005870:	d00a      	beq.n	8005888 <HAL_I2C_Init+0x138>
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	1e59      	subs	r1, r3, #1
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	685b      	ldr	r3, [r3, #4]
 800587a:	005b      	lsls	r3, r3, #1
 800587c:	fbb1 f3f3 	udiv	r3, r1, r3
 8005880:	3301      	adds	r3, #1
 8005882:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005886:	e051      	b.n	800592c <HAL_I2C_Init+0x1dc>
 8005888:	2304      	movs	r3, #4
 800588a:	e04f      	b.n	800592c <HAL_I2C_Init+0x1dc>
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	689b      	ldr	r3, [r3, #8]
 8005890:	2b00      	cmp	r3, #0
 8005892:	d111      	bne.n	80058b8 <HAL_I2C_Init+0x168>
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	1e58      	subs	r0, r3, #1
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	6859      	ldr	r1, [r3, #4]
 800589c:	460b      	mov	r3, r1
 800589e:	005b      	lsls	r3, r3, #1
 80058a0:	440b      	add	r3, r1
 80058a2:	fbb0 f3f3 	udiv	r3, r0, r3
 80058a6:	3301      	adds	r3, #1
 80058a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	bf0c      	ite	eq
 80058b0:	2301      	moveq	r3, #1
 80058b2:	2300      	movne	r3, #0
 80058b4:	b2db      	uxtb	r3, r3
 80058b6:	e012      	b.n	80058de <HAL_I2C_Init+0x18e>
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	1e58      	subs	r0, r3, #1
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	6859      	ldr	r1, [r3, #4]
 80058c0:	460b      	mov	r3, r1
 80058c2:	009b      	lsls	r3, r3, #2
 80058c4:	440b      	add	r3, r1
 80058c6:	0099      	lsls	r1, r3, #2
 80058c8:	440b      	add	r3, r1
 80058ca:	fbb0 f3f3 	udiv	r3, r0, r3
 80058ce:	3301      	adds	r3, #1
 80058d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	bf0c      	ite	eq
 80058d8:	2301      	moveq	r3, #1
 80058da:	2300      	movne	r3, #0
 80058dc:	b2db      	uxtb	r3, r3
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d001      	beq.n	80058e6 <HAL_I2C_Init+0x196>
 80058e2:	2301      	movs	r3, #1
 80058e4:	e022      	b.n	800592c <HAL_I2C_Init+0x1dc>
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	689b      	ldr	r3, [r3, #8]
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d10e      	bne.n	800590c <HAL_I2C_Init+0x1bc>
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	1e58      	subs	r0, r3, #1
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	6859      	ldr	r1, [r3, #4]
 80058f6:	460b      	mov	r3, r1
 80058f8:	005b      	lsls	r3, r3, #1
 80058fa:	440b      	add	r3, r1
 80058fc:	fbb0 f3f3 	udiv	r3, r0, r3
 8005900:	3301      	adds	r3, #1
 8005902:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005906:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800590a:	e00f      	b.n	800592c <HAL_I2C_Init+0x1dc>
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	1e58      	subs	r0, r3, #1
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	6859      	ldr	r1, [r3, #4]
 8005914:	460b      	mov	r3, r1
 8005916:	009b      	lsls	r3, r3, #2
 8005918:	440b      	add	r3, r1
 800591a:	0099      	lsls	r1, r3, #2
 800591c:	440b      	add	r3, r1
 800591e:	fbb0 f3f3 	udiv	r3, r0, r3
 8005922:	3301      	adds	r3, #1
 8005924:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005928:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800592c:	6879      	ldr	r1, [r7, #4]
 800592e:	6809      	ldr	r1, [r1, #0]
 8005930:	4313      	orrs	r3, r2
 8005932:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	69da      	ldr	r2, [r3, #28]
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	6a1b      	ldr	r3, [r3, #32]
 8005946:	431a      	orrs	r2, r3
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	430a      	orrs	r2, r1
 800594e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	689b      	ldr	r3, [r3, #8]
 8005956:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800595a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800595e:	687a      	ldr	r2, [r7, #4]
 8005960:	6911      	ldr	r1, [r2, #16]
 8005962:	687a      	ldr	r2, [r7, #4]
 8005964:	68d2      	ldr	r2, [r2, #12]
 8005966:	4311      	orrs	r1, r2
 8005968:	687a      	ldr	r2, [r7, #4]
 800596a:	6812      	ldr	r2, [r2, #0]
 800596c:	430b      	orrs	r3, r1
 800596e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	68db      	ldr	r3, [r3, #12]
 8005976:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	695a      	ldr	r2, [r3, #20]
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	699b      	ldr	r3, [r3, #24]
 8005982:	431a      	orrs	r2, r3
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	430a      	orrs	r2, r1
 800598a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	681a      	ldr	r2, [r3, #0]
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	f042 0201 	orr.w	r2, r2, #1
 800599a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	2200      	movs	r2, #0
 80059a0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	2220      	movs	r2, #32
 80059a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	2200      	movs	r2, #0
 80059ae:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	2200      	movs	r2, #0
 80059b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80059b8:	2300      	movs	r3, #0
}
 80059ba:	4618      	mov	r0, r3
 80059bc:	3710      	adds	r7, #16
 80059be:	46bd      	mov	sp, r7
 80059c0:	bd80      	pop	{r7, pc}
 80059c2:	bf00      	nop
 80059c4:	000186a0 	.word	0x000186a0
 80059c8:	001e847f 	.word	0x001e847f
 80059cc:	003d08ff 	.word	0x003d08ff
 80059d0:	431bde83 	.word	0x431bde83
 80059d4:	10624dd3 	.word	0x10624dd3

080059d8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80059d8:	b580      	push	{r7, lr}
 80059da:	b088      	sub	sp, #32
 80059dc:	af02      	add	r7, sp, #8
 80059de:	60f8      	str	r0, [r7, #12]
 80059e0:	4608      	mov	r0, r1
 80059e2:	4611      	mov	r1, r2
 80059e4:	461a      	mov	r2, r3
 80059e6:	4603      	mov	r3, r0
 80059e8:	817b      	strh	r3, [r7, #10]
 80059ea:	460b      	mov	r3, r1
 80059ec:	813b      	strh	r3, [r7, #8]
 80059ee:	4613      	mov	r3, r2
 80059f0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80059f2:	f7fe fd57 	bl	80044a4 <HAL_GetTick>
 80059f6:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80059fe:	b2db      	uxtb	r3, r3
 8005a00:	2b20      	cmp	r3, #32
 8005a02:	f040 80d9 	bne.w	8005bb8 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005a06:	697b      	ldr	r3, [r7, #20]
 8005a08:	9300      	str	r3, [sp, #0]
 8005a0a:	2319      	movs	r3, #25
 8005a0c:	2201      	movs	r2, #1
 8005a0e:	496d      	ldr	r1, [pc, #436]	; (8005bc4 <HAL_I2C_Mem_Write+0x1ec>)
 8005a10:	68f8      	ldr	r0, [r7, #12]
 8005a12:	f000 fc7f 	bl	8006314 <I2C_WaitOnFlagUntilTimeout>
 8005a16:	4603      	mov	r3, r0
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d001      	beq.n	8005a20 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8005a1c:	2302      	movs	r3, #2
 8005a1e:	e0cc      	b.n	8005bba <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005a26:	2b01      	cmp	r3, #1
 8005a28:	d101      	bne.n	8005a2e <HAL_I2C_Mem_Write+0x56>
 8005a2a:	2302      	movs	r3, #2
 8005a2c:	e0c5      	b.n	8005bba <HAL_I2C_Mem_Write+0x1e2>
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	2201      	movs	r2, #1
 8005a32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	f003 0301 	and.w	r3, r3, #1
 8005a40:	2b01      	cmp	r3, #1
 8005a42:	d007      	beq.n	8005a54 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	681a      	ldr	r2, [r3, #0]
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	f042 0201 	orr.w	r2, r2, #1
 8005a52:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	681a      	ldr	r2, [r3, #0]
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005a62:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	2221      	movs	r2, #33	; 0x21
 8005a68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	2240      	movs	r2, #64	; 0x40
 8005a70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	2200      	movs	r2, #0
 8005a78:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	6a3a      	ldr	r2, [r7, #32]
 8005a7e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005a84:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a8a:	b29a      	uxth	r2, r3
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	4a4d      	ldr	r2, [pc, #308]	; (8005bc8 <HAL_I2C_Mem_Write+0x1f0>)
 8005a94:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005a96:	88f8      	ldrh	r0, [r7, #6]
 8005a98:	893a      	ldrh	r2, [r7, #8]
 8005a9a:	8979      	ldrh	r1, [r7, #10]
 8005a9c:	697b      	ldr	r3, [r7, #20]
 8005a9e:	9301      	str	r3, [sp, #4]
 8005aa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005aa2:	9300      	str	r3, [sp, #0]
 8005aa4:	4603      	mov	r3, r0
 8005aa6:	68f8      	ldr	r0, [r7, #12]
 8005aa8:	f000 fab6 	bl	8006018 <I2C_RequestMemoryWrite>
 8005aac:	4603      	mov	r3, r0
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d052      	beq.n	8005b58 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8005ab2:	2301      	movs	r3, #1
 8005ab4:	e081      	b.n	8005bba <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005ab6:	697a      	ldr	r2, [r7, #20]
 8005ab8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005aba:	68f8      	ldr	r0, [r7, #12]
 8005abc:	f000 fd00 	bl	80064c0 <I2C_WaitOnTXEFlagUntilTimeout>
 8005ac0:	4603      	mov	r3, r0
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d00d      	beq.n	8005ae2 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005aca:	2b04      	cmp	r3, #4
 8005acc:	d107      	bne.n	8005ade <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	681a      	ldr	r2, [r3, #0]
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005adc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005ade:	2301      	movs	r3, #1
 8005ae0:	e06b      	b.n	8005bba <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ae6:	781a      	ldrb	r2, [r3, #0]
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005af2:	1c5a      	adds	r2, r3, #1
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005afc:	3b01      	subs	r3, #1
 8005afe:	b29a      	uxth	r2, r3
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b08:	b29b      	uxth	r3, r3
 8005b0a:	3b01      	subs	r3, #1
 8005b0c:	b29a      	uxth	r2, r3
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	695b      	ldr	r3, [r3, #20]
 8005b18:	f003 0304 	and.w	r3, r3, #4
 8005b1c:	2b04      	cmp	r3, #4
 8005b1e:	d11b      	bne.n	8005b58 <HAL_I2C_Mem_Write+0x180>
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d017      	beq.n	8005b58 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b2c:	781a      	ldrb	r2, [r3, #0]
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b38:	1c5a      	adds	r2, r3, #1
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b42:	3b01      	subs	r3, #1
 8005b44:	b29a      	uxth	r2, r3
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b4e:	b29b      	uxth	r3, r3
 8005b50:	3b01      	subs	r3, #1
 8005b52:	b29a      	uxth	r2, r3
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d1aa      	bne.n	8005ab6 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005b60:	697a      	ldr	r2, [r7, #20]
 8005b62:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005b64:	68f8      	ldr	r0, [r7, #12]
 8005b66:	f000 fcec 	bl	8006542 <I2C_WaitOnBTFFlagUntilTimeout>
 8005b6a:	4603      	mov	r3, r0
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d00d      	beq.n	8005b8c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b74:	2b04      	cmp	r3, #4
 8005b76:	d107      	bne.n	8005b88 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	681a      	ldr	r2, [r3, #0]
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005b86:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005b88:	2301      	movs	r3, #1
 8005b8a:	e016      	b.n	8005bba <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	681a      	ldr	r2, [r3, #0]
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005b9a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	2220      	movs	r2, #32
 8005ba0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	2200      	movs	r2, #0
 8005ba8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	2200      	movs	r2, #0
 8005bb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005bb4:	2300      	movs	r3, #0
 8005bb6:	e000      	b.n	8005bba <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8005bb8:	2302      	movs	r3, #2
  }
}
 8005bba:	4618      	mov	r0, r3
 8005bbc:	3718      	adds	r7, #24
 8005bbe:	46bd      	mov	sp, r7
 8005bc0:	bd80      	pop	{r7, pc}
 8005bc2:	bf00      	nop
 8005bc4:	00100002 	.word	0x00100002
 8005bc8:	ffff0000 	.word	0xffff0000

08005bcc <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005bcc:	b580      	push	{r7, lr}
 8005bce:	b08c      	sub	sp, #48	; 0x30
 8005bd0:	af02      	add	r7, sp, #8
 8005bd2:	60f8      	str	r0, [r7, #12]
 8005bd4:	4608      	mov	r0, r1
 8005bd6:	4611      	mov	r1, r2
 8005bd8:	461a      	mov	r2, r3
 8005bda:	4603      	mov	r3, r0
 8005bdc:	817b      	strh	r3, [r7, #10]
 8005bde:	460b      	mov	r3, r1
 8005be0:	813b      	strh	r3, [r7, #8]
 8005be2:	4613      	mov	r3, r2
 8005be4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005be6:	f7fe fc5d 	bl	80044a4 <HAL_GetTick>
 8005bea:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005bf2:	b2db      	uxtb	r3, r3
 8005bf4:	2b20      	cmp	r3, #32
 8005bf6:	f040 8208 	bne.w	800600a <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005bfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bfc:	9300      	str	r3, [sp, #0]
 8005bfe:	2319      	movs	r3, #25
 8005c00:	2201      	movs	r2, #1
 8005c02:	497b      	ldr	r1, [pc, #492]	; (8005df0 <HAL_I2C_Mem_Read+0x224>)
 8005c04:	68f8      	ldr	r0, [r7, #12]
 8005c06:	f000 fb85 	bl	8006314 <I2C_WaitOnFlagUntilTimeout>
 8005c0a:	4603      	mov	r3, r0
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d001      	beq.n	8005c14 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8005c10:	2302      	movs	r3, #2
 8005c12:	e1fb      	b.n	800600c <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005c1a:	2b01      	cmp	r3, #1
 8005c1c:	d101      	bne.n	8005c22 <HAL_I2C_Mem_Read+0x56>
 8005c1e:	2302      	movs	r3, #2
 8005c20:	e1f4      	b.n	800600c <HAL_I2C_Mem_Read+0x440>
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	2201      	movs	r2, #1
 8005c26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	f003 0301 	and.w	r3, r3, #1
 8005c34:	2b01      	cmp	r3, #1
 8005c36:	d007      	beq.n	8005c48 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	681a      	ldr	r2, [r3, #0]
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	f042 0201 	orr.w	r2, r2, #1
 8005c46:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	681a      	ldr	r2, [r3, #0]
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005c56:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	2222      	movs	r2, #34	; 0x22
 8005c5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	2240      	movs	r2, #64	; 0x40
 8005c64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	2200      	movs	r2, #0
 8005c6c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005c72:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8005c78:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c7e:	b29a      	uxth	r2, r3
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	4a5b      	ldr	r2, [pc, #364]	; (8005df4 <HAL_I2C_Mem_Read+0x228>)
 8005c88:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005c8a:	88f8      	ldrh	r0, [r7, #6]
 8005c8c:	893a      	ldrh	r2, [r7, #8]
 8005c8e:	8979      	ldrh	r1, [r7, #10]
 8005c90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c92:	9301      	str	r3, [sp, #4]
 8005c94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c96:	9300      	str	r3, [sp, #0]
 8005c98:	4603      	mov	r3, r0
 8005c9a:	68f8      	ldr	r0, [r7, #12]
 8005c9c:	f000 fa52 	bl	8006144 <I2C_RequestMemoryRead>
 8005ca0:	4603      	mov	r3, r0
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d001      	beq.n	8005caa <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8005ca6:	2301      	movs	r3, #1
 8005ca8:	e1b0      	b.n	800600c <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d113      	bne.n	8005cda <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005cb2:	2300      	movs	r3, #0
 8005cb4:	623b      	str	r3, [r7, #32]
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	695b      	ldr	r3, [r3, #20]
 8005cbc:	623b      	str	r3, [r7, #32]
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	699b      	ldr	r3, [r3, #24]
 8005cc4:	623b      	str	r3, [r7, #32]
 8005cc6:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	681a      	ldr	r2, [r3, #0]
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005cd6:	601a      	str	r2, [r3, #0]
 8005cd8:	e184      	b.n	8005fe4 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005cde:	2b01      	cmp	r3, #1
 8005ce0:	d11b      	bne.n	8005d1a <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	681a      	ldr	r2, [r3, #0]
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005cf0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005cf2:	2300      	movs	r3, #0
 8005cf4:	61fb      	str	r3, [r7, #28]
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	695b      	ldr	r3, [r3, #20]
 8005cfc:	61fb      	str	r3, [r7, #28]
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	699b      	ldr	r3, [r3, #24]
 8005d04:	61fb      	str	r3, [r7, #28]
 8005d06:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	681a      	ldr	r2, [r3, #0]
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005d16:	601a      	str	r2, [r3, #0]
 8005d18:	e164      	b.n	8005fe4 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d1e:	2b02      	cmp	r3, #2
 8005d20:	d11b      	bne.n	8005d5a <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	681a      	ldr	r2, [r3, #0]
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005d30:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	681a      	ldr	r2, [r3, #0]
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005d40:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005d42:	2300      	movs	r3, #0
 8005d44:	61bb      	str	r3, [r7, #24]
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	695b      	ldr	r3, [r3, #20]
 8005d4c:	61bb      	str	r3, [r7, #24]
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	699b      	ldr	r3, [r3, #24]
 8005d54:	61bb      	str	r3, [r7, #24]
 8005d56:	69bb      	ldr	r3, [r7, #24]
 8005d58:	e144      	b.n	8005fe4 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005d5a:	2300      	movs	r3, #0
 8005d5c:	617b      	str	r3, [r7, #20]
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	695b      	ldr	r3, [r3, #20]
 8005d64:	617b      	str	r3, [r7, #20]
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	699b      	ldr	r3, [r3, #24]
 8005d6c:	617b      	str	r3, [r7, #20]
 8005d6e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8005d70:	e138      	b.n	8005fe4 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d76:	2b03      	cmp	r3, #3
 8005d78:	f200 80f1 	bhi.w	8005f5e <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d80:	2b01      	cmp	r3, #1
 8005d82:	d123      	bne.n	8005dcc <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005d84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d86:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005d88:	68f8      	ldr	r0, [r7, #12]
 8005d8a:	f000 fc1b 	bl	80065c4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005d8e:	4603      	mov	r3, r0
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d001      	beq.n	8005d98 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8005d94:	2301      	movs	r3, #1
 8005d96:	e139      	b.n	800600c <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	691a      	ldr	r2, [r3, #16]
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005da2:	b2d2      	uxtb	r2, r2
 8005da4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005daa:	1c5a      	adds	r2, r3, #1
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005db4:	3b01      	subs	r3, #1
 8005db6:	b29a      	uxth	r2, r3
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005dc0:	b29b      	uxth	r3, r3
 8005dc2:	3b01      	subs	r3, #1
 8005dc4:	b29a      	uxth	r2, r3
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005dca:	e10b      	b.n	8005fe4 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005dd0:	2b02      	cmp	r3, #2
 8005dd2:	d14e      	bne.n	8005e72 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005dd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dd6:	9300      	str	r3, [sp, #0]
 8005dd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dda:	2200      	movs	r2, #0
 8005ddc:	4906      	ldr	r1, [pc, #24]	; (8005df8 <HAL_I2C_Mem_Read+0x22c>)
 8005dde:	68f8      	ldr	r0, [r7, #12]
 8005de0:	f000 fa98 	bl	8006314 <I2C_WaitOnFlagUntilTimeout>
 8005de4:	4603      	mov	r3, r0
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d008      	beq.n	8005dfc <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8005dea:	2301      	movs	r3, #1
 8005dec:	e10e      	b.n	800600c <HAL_I2C_Mem_Read+0x440>
 8005dee:	bf00      	nop
 8005df0:	00100002 	.word	0x00100002
 8005df4:	ffff0000 	.word	0xffff0000
 8005df8:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	681a      	ldr	r2, [r3, #0]
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005e0a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	691a      	ldr	r2, [r3, #16]
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e16:	b2d2      	uxtb	r2, r2
 8005e18:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e1e:	1c5a      	adds	r2, r3, #1
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e28:	3b01      	subs	r3, #1
 8005e2a:	b29a      	uxth	r2, r3
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e34:	b29b      	uxth	r3, r3
 8005e36:	3b01      	subs	r3, #1
 8005e38:	b29a      	uxth	r2, r3
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	691a      	ldr	r2, [r3, #16]
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e48:	b2d2      	uxtb	r2, r2
 8005e4a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e50:	1c5a      	adds	r2, r3, #1
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e5a:	3b01      	subs	r3, #1
 8005e5c:	b29a      	uxth	r2, r3
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e66:	b29b      	uxth	r3, r3
 8005e68:	3b01      	subs	r3, #1
 8005e6a:	b29a      	uxth	r2, r3
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005e70:	e0b8      	b.n	8005fe4 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005e72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e74:	9300      	str	r3, [sp, #0]
 8005e76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e78:	2200      	movs	r2, #0
 8005e7a:	4966      	ldr	r1, [pc, #408]	; (8006014 <HAL_I2C_Mem_Read+0x448>)
 8005e7c:	68f8      	ldr	r0, [r7, #12]
 8005e7e:	f000 fa49 	bl	8006314 <I2C_WaitOnFlagUntilTimeout>
 8005e82:	4603      	mov	r3, r0
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d001      	beq.n	8005e8c <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8005e88:	2301      	movs	r3, #1
 8005e8a:	e0bf      	b.n	800600c <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	681a      	ldr	r2, [r3, #0]
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005e9a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	691a      	ldr	r2, [r3, #16]
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ea6:	b2d2      	uxtb	r2, r2
 8005ea8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005eae:	1c5a      	adds	r2, r3, #1
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005eb8:	3b01      	subs	r3, #1
 8005eba:	b29a      	uxth	r2, r3
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ec4:	b29b      	uxth	r3, r3
 8005ec6:	3b01      	subs	r3, #1
 8005ec8:	b29a      	uxth	r2, r3
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005ece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ed0:	9300      	str	r3, [sp, #0]
 8005ed2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ed4:	2200      	movs	r2, #0
 8005ed6:	494f      	ldr	r1, [pc, #316]	; (8006014 <HAL_I2C_Mem_Read+0x448>)
 8005ed8:	68f8      	ldr	r0, [r7, #12]
 8005eda:	f000 fa1b 	bl	8006314 <I2C_WaitOnFlagUntilTimeout>
 8005ede:	4603      	mov	r3, r0
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d001      	beq.n	8005ee8 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8005ee4:	2301      	movs	r3, #1
 8005ee6:	e091      	b.n	800600c <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	681a      	ldr	r2, [r3, #0]
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005ef6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	691a      	ldr	r2, [r3, #16]
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f02:	b2d2      	uxtb	r2, r2
 8005f04:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f0a:	1c5a      	adds	r2, r3, #1
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f14:	3b01      	subs	r3, #1
 8005f16:	b29a      	uxth	r2, r3
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f20:	b29b      	uxth	r3, r3
 8005f22:	3b01      	subs	r3, #1
 8005f24:	b29a      	uxth	r2, r3
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	691a      	ldr	r2, [r3, #16]
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f34:	b2d2      	uxtb	r2, r2
 8005f36:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f3c:	1c5a      	adds	r2, r3, #1
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f46:	3b01      	subs	r3, #1
 8005f48:	b29a      	uxth	r2, r3
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f52:	b29b      	uxth	r3, r3
 8005f54:	3b01      	subs	r3, #1
 8005f56:	b29a      	uxth	r2, r3
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005f5c:	e042      	b.n	8005fe4 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005f5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f60:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005f62:	68f8      	ldr	r0, [r7, #12]
 8005f64:	f000 fb2e 	bl	80065c4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005f68:	4603      	mov	r3, r0
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d001      	beq.n	8005f72 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8005f6e:	2301      	movs	r3, #1
 8005f70:	e04c      	b.n	800600c <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	691a      	ldr	r2, [r3, #16]
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f7c:	b2d2      	uxtb	r2, r2
 8005f7e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f84:	1c5a      	adds	r2, r3, #1
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f8e:	3b01      	subs	r3, #1
 8005f90:	b29a      	uxth	r2, r3
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f9a:	b29b      	uxth	r3, r3
 8005f9c:	3b01      	subs	r3, #1
 8005f9e:	b29a      	uxth	r2, r3
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	695b      	ldr	r3, [r3, #20]
 8005faa:	f003 0304 	and.w	r3, r3, #4
 8005fae:	2b04      	cmp	r3, #4
 8005fb0:	d118      	bne.n	8005fe4 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	691a      	ldr	r2, [r3, #16]
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fbc:	b2d2      	uxtb	r2, r2
 8005fbe:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fc4:	1c5a      	adds	r2, r3, #1
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005fce:	3b01      	subs	r3, #1
 8005fd0:	b29a      	uxth	r2, r3
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005fda:	b29b      	uxth	r3, r3
 8005fdc:	3b01      	subs	r3, #1
 8005fde:	b29a      	uxth	r2, r3
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	f47f aec2 	bne.w	8005d72 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	2220      	movs	r2, #32
 8005ff2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	2200      	movs	r2, #0
 8005ffa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	2200      	movs	r2, #0
 8006002:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006006:	2300      	movs	r3, #0
 8006008:	e000      	b.n	800600c <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 800600a:	2302      	movs	r3, #2
  }
}
 800600c:	4618      	mov	r0, r3
 800600e:	3728      	adds	r7, #40	; 0x28
 8006010:	46bd      	mov	sp, r7
 8006012:	bd80      	pop	{r7, pc}
 8006014:	00010004 	.word	0x00010004

08006018 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006018:	b580      	push	{r7, lr}
 800601a:	b088      	sub	sp, #32
 800601c:	af02      	add	r7, sp, #8
 800601e:	60f8      	str	r0, [r7, #12]
 8006020:	4608      	mov	r0, r1
 8006022:	4611      	mov	r1, r2
 8006024:	461a      	mov	r2, r3
 8006026:	4603      	mov	r3, r0
 8006028:	817b      	strh	r3, [r7, #10]
 800602a:	460b      	mov	r3, r1
 800602c:	813b      	strh	r3, [r7, #8]
 800602e:	4613      	mov	r3, r2
 8006030:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	681a      	ldr	r2, [r3, #0]
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006040:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006042:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006044:	9300      	str	r3, [sp, #0]
 8006046:	6a3b      	ldr	r3, [r7, #32]
 8006048:	2200      	movs	r2, #0
 800604a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800604e:	68f8      	ldr	r0, [r7, #12]
 8006050:	f000 f960 	bl	8006314 <I2C_WaitOnFlagUntilTimeout>
 8006054:	4603      	mov	r3, r0
 8006056:	2b00      	cmp	r3, #0
 8006058:	d00d      	beq.n	8006076 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006064:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006068:	d103      	bne.n	8006072 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006070:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006072:	2303      	movs	r3, #3
 8006074:	e05f      	b.n	8006136 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006076:	897b      	ldrh	r3, [r7, #10]
 8006078:	b2db      	uxtb	r3, r3
 800607a:	461a      	mov	r2, r3
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006084:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006088:	6a3a      	ldr	r2, [r7, #32]
 800608a:	492d      	ldr	r1, [pc, #180]	; (8006140 <I2C_RequestMemoryWrite+0x128>)
 800608c:	68f8      	ldr	r0, [r7, #12]
 800608e:	f000 f998 	bl	80063c2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006092:	4603      	mov	r3, r0
 8006094:	2b00      	cmp	r3, #0
 8006096:	d001      	beq.n	800609c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8006098:	2301      	movs	r3, #1
 800609a:	e04c      	b.n	8006136 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800609c:	2300      	movs	r3, #0
 800609e:	617b      	str	r3, [r7, #20]
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	695b      	ldr	r3, [r3, #20]
 80060a6:	617b      	str	r3, [r7, #20]
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	699b      	ldr	r3, [r3, #24]
 80060ae:	617b      	str	r3, [r7, #20]
 80060b0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80060b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80060b4:	6a39      	ldr	r1, [r7, #32]
 80060b6:	68f8      	ldr	r0, [r7, #12]
 80060b8:	f000 fa02 	bl	80064c0 <I2C_WaitOnTXEFlagUntilTimeout>
 80060bc:	4603      	mov	r3, r0
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d00d      	beq.n	80060de <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060c6:	2b04      	cmp	r3, #4
 80060c8:	d107      	bne.n	80060da <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	681a      	ldr	r2, [r3, #0]
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80060d8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80060da:	2301      	movs	r3, #1
 80060dc:	e02b      	b.n	8006136 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80060de:	88fb      	ldrh	r3, [r7, #6]
 80060e0:	2b01      	cmp	r3, #1
 80060e2:	d105      	bne.n	80060f0 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80060e4:	893b      	ldrh	r3, [r7, #8]
 80060e6:	b2da      	uxtb	r2, r3
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	611a      	str	r2, [r3, #16]
 80060ee:	e021      	b.n	8006134 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80060f0:	893b      	ldrh	r3, [r7, #8]
 80060f2:	0a1b      	lsrs	r3, r3, #8
 80060f4:	b29b      	uxth	r3, r3
 80060f6:	b2da      	uxtb	r2, r3
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80060fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006100:	6a39      	ldr	r1, [r7, #32]
 8006102:	68f8      	ldr	r0, [r7, #12]
 8006104:	f000 f9dc 	bl	80064c0 <I2C_WaitOnTXEFlagUntilTimeout>
 8006108:	4603      	mov	r3, r0
 800610a:	2b00      	cmp	r3, #0
 800610c:	d00d      	beq.n	800612a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006112:	2b04      	cmp	r3, #4
 8006114:	d107      	bne.n	8006126 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	681a      	ldr	r2, [r3, #0]
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006124:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006126:	2301      	movs	r3, #1
 8006128:	e005      	b.n	8006136 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800612a:	893b      	ldrh	r3, [r7, #8]
 800612c:	b2da      	uxtb	r2, r3
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8006134:	2300      	movs	r3, #0
}
 8006136:	4618      	mov	r0, r3
 8006138:	3718      	adds	r7, #24
 800613a:	46bd      	mov	sp, r7
 800613c:	bd80      	pop	{r7, pc}
 800613e:	bf00      	nop
 8006140:	00010002 	.word	0x00010002

08006144 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006144:	b580      	push	{r7, lr}
 8006146:	b088      	sub	sp, #32
 8006148:	af02      	add	r7, sp, #8
 800614a:	60f8      	str	r0, [r7, #12]
 800614c:	4608      	mov	r0, r1
 800614e:	4611      	mov	r1, r2
 8006150:	461a      	mov	r2, r3
 8006152:	4603      	mov	r3, r0
 8006154:	817b      	strh	r3, [r7, #10]
 8006156:	460b      	mov	r3, r1
 8006158:	813b      	strh	r3, [r7, #8]
 800615a:	4613      	mov	r3, r2
 800615c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	681a      	ldr	r2, [r3, #0]
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800616c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	681a      	ldr	r2, [r3, #0]
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800617c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800617e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006180:	9300      	str	r3, [sp, #0]
 8006182:	6a3b      	ldr	r3, [r7, #32]
 8006184:	2200      	movs	r2, #0
 8006186:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800618a:	68f8      	ldr	r0, [r7, #12]
 800618c:	f000 f8c2 	bl	8006314 <I2C_WaitOnFlagUntilTimeout>
 8006190:	4603      	mov	r3, r0
 8006192:	2b00      	cmp	r3, #0
 8006194:	d00d      	beq.n	80061b2 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061a0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80061a4:	d103      	bne.n	80061ae <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80061ac:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80061ae:	2303      	movs	r3, #3
 80061b0:	e0aa      	b.n	8006308 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80061b2:	897b      	ldrh	r3, [r7, #10]
 80061b4:	b2db      	uxtb	r3, r3
 80061b6:	461a      	mov	r2, r3
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80061c0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80061c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061c4:	6a3a      	ldr	r2, [r7, #32]
 80061c6:	4952      	ldr	r1, [pc, #328]	; (8006310 <I2C_RequestMemoryRead+0x1cc>)
 80061c8:	68f8      	ldr	r0, [r7, #12]
 80061ca:	f000 f8fa 	bl	80063c2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80061ce:	4603      	mov	r3, r0
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d001      	beq.n	80061d8 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80061d4:	2301      	movs	r3, #1
 80061d6:	e097      	b.n	8006308 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80061d8:	2300      	movs	r3, #0
 80061da:	617b      	str	r3, [r7, #20]
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	695b      	ldr	r3, [r3, #20]
 80061e2:	617b      	str	r3, [r7, #20]
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	699b      	ldr	r3, [r3, #24]
 80061ea:	617b      	str	r3, [r7, #20]
 80061ec:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80061ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80061f0:	6a39      	ldr	r1, [r7, #32]
 80061f2:	68f8      	ldr	r0, [r7, #12]
 80061f4:	f000 f964 	bl	80064c0 <I2C_WaitOnTXEFlagUntilTimeout>
 80061f8:	4603      	mov	r3, r0
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d00d      	beq.n	800621a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006202:	2b04      	cmp	r3, #4
 8006204:	d107      	bne.n	8006216 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	681a      	ldr	r2, [r3, #0]
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006214:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006216:	2301      	movs	r3, #1
 8006218:	e076      	b.n	8006308 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800621a:	88fb      	ldrh	r3, [r7, #6]
 800621c:	2b01      	cmp	r3, #1
 800621e:	d105      	bne.n	800622c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006220:	893b      	ldrh	r3, [r7, #8]
 8006222:	b2da      	uxtb	r2, r3
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	611a      	str	r2, [r3, #16]
 800622a:	e021      	b.n	8006270 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800622c:	893b      	ldrh	r3, [r7, #8]
 800622e:	0a1b      	lsrs	r3, r3, #8
 8006230:	b29b      	uxth	r3, r3
 8006232:	b2da      	uxtb	r2, r3
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800623a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800623c:	6a39      	ldr	r1, [r7, #32]
 800623e:	68f8      	ldr	r0, [r7, #12]
 8006240:	f000 f93e 	bl	80064c0 <I2C_WaitOnTXEFlagUntilTimeout>
 8006244:	4603      	mov	r3, r0
 8006246:	2b00      	cmp	r3, #0
 8006248:	d00d      	beq.n	8006266 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800624e:	2b04      	cmp	r3, #4
 8006250:	d107      	bne.n	8006262 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	681a      	ldr	r2, [r3, #0]
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006260:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006262:	2301      	movs	r3, #1
 8006264:	e050      	b.n	8006308 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006266:	893b      	ldrh	r3, [r7, #8]
 8006268:	b2da      	uxtb	r2, r3
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006270:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006272:	6a39      	ldr	r1, [r7, #32]
 8006274:	68f8      	ldr	r0, [r7, #12]
 8006276:	f000 f923 	bl	80064c0 <I2C_WaitOnTXEFlagUntilTimeout>
 800627a:	4603      	mov	r3, r0
 800627c:	2b00      	cmp	r3, #0
 800627e:	d00d      	beq.n	800629c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006284:	2b04      	cmp	r3, #4
 8006286:	d107      	bne.n	8006298 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	681a      	ldr	r2, [r3, #0]
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006296:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006298:	2301      	movs	r3, #1
 800629a:	e035      	b.n	8006308 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	681a      	ldr	r2, [r3, #0]
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80062aa:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80062ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062ae:	9300      	str	r3, [sp, #0]
 80062b0:	6a3b      	ldr	r3, [r7, #32]
 80062b2:	2200      	movs	r2, #0
 80062b4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80062b8:	68f8      	ldr	r0, [r7, #12]
 80062ba:	f000 f82b 	bl	8006314 <I2C_WaitOnFlagUntilTimeout>
 80062be:	4603      	mov	r3, r0
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d00d      	beq.n	80062e0 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80062ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80062d2:	d103      	bne.n	80062dc <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80062da:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80062dc:	2303      	movs	r3, #3
 80062de:	e013      	b.n	8006308 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80062e0:	897b      	ldrh	r3, [r7, #10]
 80062e2:	b2db      	uxtb	r3, r3
 80062e4:	f043 0301 	orr.w	r3, r3, #1
 80062e8:	b2da      	uxtb	r2, r3
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80062f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062f2:	6a3a      	ldr	r2, [r7, #32]
 80062f4:	4906      	ldr	r1, [pc, #24]	; (8006310 <I2C_RequestMemoryRead+0x1cc>)
 80062f6:	68f8      	ldr	r0, [r7, #12]
 80062f8:	f000 f863 	bl	80063c2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80062fc:	4603      	mov	r3, r0
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d001      	beq.n	8006306 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8006302:	2301      	movs	r3, #1
 8006304:	e000      	b.n	8006308 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8006306:	2300      	movs	r3, #0
}
 8006308:	4618      	mov	r0, r3
 800630a:	3718      	adds	r7, #24
 800630c:	46bd      	mov	sp, r7
 800630e:	bd80      	pop	{r7, pc}
 8006310:	00010002 	.word	0x00010002

08006314 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8006314:	b580      	push	{r7, lr}
 8006316:	b084      	sub	sp, #16
 8006318:	af00      	add	r7, sp, #0
 800631a:	60f8      	str	r0, [r7, #12]
 800631c:	60b9      	str	r1, [r7, #8]
 800631e:	603b      	str	r3, [r7, #0]
 8006320:	4613      	mov	r3, r2
 8006322:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006324:	e025      	b.n	8006372 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006326:	683b      	ldr	r3, [r7, #0]
 8006328:	f1b3 3fff 	cmp.w	r3, #4294967295
 800632c:	d021      	beq.n	8006372 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800632e:	f7fe f8b9 	bl	80044a4 <HAL_GetTick>
 8006332:	4602      	mov	r2, r0
 8006334:	69bb      	ldr	r3, [r7, #24]
 8006336:	1ad3      	subs	r3, r2, r3
 8006338:	683a      	ldr	r2, [r7, #0]
 800633a:	429a      	cmp	r2, r3
 800633c:	d302      	bcc.n	8006344 <I2C_WaitOnFlagUntilTimeout+0x30>
 800633e:	683b      	ldr	r3, [r7, #0]
 8006340:	2b00      	cmp	r3, #0
 8006342:	d116      	bne.n	8006372 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	2200      	movs	r2, #0
 8006348:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	2220      	movs	r2, #32
 800634e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	2200      	movs	r2, #0
 8006356:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800635e:	f043 0220 	orr.w	r2, r3, #32
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	2200      	movs	r2, #0
 800636a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800636e:	2301      	movs	r3, #1
 8006370:	e023      	b.n	80063ba <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006372:	68bb      	ldr	r3, [r7, #8]
 8006374:	0c1b      	lsrs	r3, r3, #16
 8006376:	b2db      	uxtb	r3, r3
 8006378:	2b01      	cmp	r3, #1
 800637a:	d10d      	bne.n	8006398 <I2C_WaitOnFlagUntilTimeout+0x84>
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	695b      	ldr	r3, [r3, #20]
 8006382:	43da      	mvns	r2, r3
 8006384:	68bb      	ldr	r3, [r7, #8]
 8006386:	4013      	ands	r3, r2
 8006388:	b29b      	uxth	r3, r3
 800638a:	2b00      	cmp	r3, #0
 800638c:	bf0c      	ite	eq
 800638e:	2301      	moveq	r3, #1
 8006390:	2300      	movne	r3, #0
 8006392:	b2db      	uxtb	r3, r3
 8006394:	461a      	mov	r2, r3
 8006396:	e00c      	b.n	80063b2 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	699b      	ldr	r3, [r3, #24]
 800639e:	43da      	mvns	r2, r3
 80063a0:	68bb      	ldr	r3, [r7, #8]
 80063a2:	4013      	ands	r3, r2
 80063a4:	b29b      	uxth	r3, r3
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	bf0c      	ite	eq
 80063aa:	2301      	moveq	r3, #1
 80063ac:	2300      	movne	r3, #0
 80063ae:	b2db      	uxtb	r3, r3
 80063b0:	461a      	mov	r2, r3
 80063b2:	79fb      	ldrb	r3, [r7, #7]
 80063b4:	429a      	cmp	r2, r3
 80063b6:	d0b6      	beq.n	8006326 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80063b8:	2300      	movs	r3, #0
}
 80063ba:	4618      	mov	r0, r3
 80063bc:	3710      	adds	r7, #16
 80063be:	46bd      	mov	sp, r7
 80063c0:	bd80      	pop	{r7, pc}

080063c2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80063c2:	b580      	push	{r7, lr}
 80063c4:	b084      	sub	sp, #16
 80063c6:	af00      	add	r7, sp, #0
 80063c8:	60f8      	str	r0, [r7, #12]
 80063ca:	60b9      	str	r1, [r7, #8]
 80063cc:	607a      	str	r2, [r7, #4]
 80063ce:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80063d0:	e051      	b.n	8006476 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	695b      	ldr	r3, [r3, #20]
 80063d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80063dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80063e0:	d123      	bne.n	800642a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	681a      	ldr	r2, [r3, #0]
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80063f0:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80063fa:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	2200      	movs	r2, #0
 8006400:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	2220      	movs	r2, #32
 8006406:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	2200      	movs	r2, #0
 800640e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006416:	f043 0204 	orr.w	r2, r3, #4
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	2200      	movs	r2, #0
 8006422:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006426:	2301      	movs	r3, #1
 8006428:	e046      	b.n	80064b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006430:	d021      	beq.n	8006476 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006432:	f7fe f837 	bl	80044a4 <HAL_GetTick>
 8006436:	4602      	mov	r2, r0
 8006438:	683b      	ldr	r3, [r7, #0]
 800643a:	1ad3      	subs	r3, r2, r3
 800643c:	687a      	ldr	r2, [r7, #4]
 800643e:	429a      	cmp	r2, r3
 8006440:	d302      	bcc.n	8006448 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	2b00      	cmp	r3, #0
 8006446:	d116      	bne.n	8006476 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	2200      	movs	r2, #0
 800644c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	2220      	movs	r2, #32
 8006452:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	2200      	movs	r2, #0
 800645a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006462:	f043 0220 	orr.w	r2, r3, #32
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	2200      	movs	r2, #0
 800646e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006472:	2301      	movs	r3, #1
 8006474:	e020      	b.n	80064b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006476:	68bb      	ldr	r3, [r7, #8]
 8006478:	0c1b      	lsrs	r3, r3, #16
 800647a:	b2db      	uxtb	r3, r3
 800647c:	2b01      	cmp	r3, #1
 800647e:	d10c      	bne.n	800649a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	695b      	ldr	r3, [r3, #20]
 8006486:	43da      	mvns	r2, r3
 8006488:	68bb      	ldr	r3, [r7, #8]
 800648a:	4013      	ands	r3, r2
 800648c:	b29b      	uxth	r3, r3
 800648e:	2b00      	cmp	r3, #0
 8006490:	bf14      	ite	ne
 8006492:	2301      	movne	r3, #1
 8006494:	2300      	moveq	r3, #0
 8006496:	b2db      	uxtb	r3, r3
 8006498:	e00b      	b.n	80064b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	699b      	ldr	r3, [r3, #24]
 80064a0:	43da      	mvns	r2, r3
 80064a2:	68bb      	ldr	r3, [r7, #8]
 80064a4:	4013      	ands	r3, r2
 80064a6:	b29b      	uxth	r3, r3
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	bf14      	ite	ne
 80064ac:	2301      	movne	r3, #1
 80064ae:	2300      	moveq	r3, #0
 80064b0:	b2db      	uxtb	r3, r3
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d18d      	bne.n	80063d2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80064b6:	2300      	movs	r3, #0
}
 80064b8:	4618      	mov	r0, r3
 80064ba:	3710      	adds	r7, #16
 80064bc:	46bd      	mov	sp, r7
 80064be:	bd80      	pop	{r7, pc}

080064c0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80064c0:	b580      	push	{r7, lr}
 80064c2:	b084      	sub	sp, #16
 80064c4:	af00      	add	r7, sp, #0
 80064c6:	60f8      	str	r0, [r7, #12]
 80064c8:	60b9      	str	r1, [r7, #8]
 80064ca:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80064cc:	e02d      	b.n	800652a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80064ce:	68f8      	ldr	r0, [r7, #12]
 80064d0:	f000 f8ce 	bl	8006670 <I2C_IsAcknowledgeFailed>
 80064d4:	4603      	mov	r3, r0
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d001      	beq.n	80064de <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80064da:	2301      	movs	r3, #1
 80064dc:	e02d      	b.n	800653a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80064de:	68bb      	ldr	r3, [r7, #8]
 80064e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064e4:	d021      	beq.n	800652a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80064e6:	f7fd ffdd 	bl	80044a4 <HAL_GetTick>
 80064ea:	4602      	mov	r2, r0
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	1ad3      	subs	r3, r2, r3
 80064f0:	68ba      	ldr	r2, [r7, #8]
 80064f2:	429a      	cmp	r2, r3
 80064f4:	d302      	bcc.n	80064fc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80064f6:	68bb      	ldr	r3, [r7, #8]
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d116      	bne.n	800652a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	2200      	movs	r2, #0
 8006500:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	2220      	movs	r2, #32
 8006506:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	2200      	movs	r2, #0
 800650e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006516:	f043 0220 	orr.w	r2, r3, #32
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	2200      	movs	r2, #0
 8006522:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006526:	2301      	movs	r3, #1
 8006528:	e007      	b.n	800653a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	695b      	ldr	r3, [r3, #20]
 8006530:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006534:	2b80      	cmp	r3, #128	; 0x80
 8006536:	d1ca      	bne.n	80064ce <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006538:	2300      	movs	r3, #0
}
 800653a:	4618      	mov	r0, r3
 800653c:	3710      	adds	r7, #16
 800653e:	46bd      	mov	sp, r7
 8006540:	bd80      	pop	{r7, pc}

08006542 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006542:	b580      	push	{r7, lr}
 8006544:	b084      	sub	sp, #16
 8006546:	af00      	add	r7, sp, #0
 8006548:	60f8      	str	r0, [r7, #12]
 800654a:	60b9      	str	r1, [r7, #8]
 800654c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800654e:	e02d      	b.n	80065ac <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006550:	68f8      	ldr	r0, [r7, #12]
 8006552:	f000 f88d 	bl	8006670 <I2C_IsAcknowledgeFailed>
 8006556:	4603      	mov	r3, r0
 8006558:	2b00      	cmp	r3, #0
 800655a:	d001      	beq.n	8006560 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800655c:	2301      	movs	r3, #1
 800655e:	e02d      	b.n	80065bc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006560:	68bb      	ldr	r3, [r7, #8]
 8006562:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006566:	d021      	beq.n	80065ac <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006568:	f7fd ff9c 	bl	80044a4 <HAL_GetTick>
 800656c:	4602      	mov	r2, r0
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	1ad3      	subs	r3, r2, r3
 8006572:	68ba      	ldr	r2, [r7, #8]
 8006574:	429a      	cmp	r2, r3
 8006576:	d302      	bcc.n	800657e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8006578:	68bb      	ldr	r3, [r7, #8]
 800657a:	2b00      	cmp	r3, #0
 800657c:	d116      	bne.n	80065ac <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	2200      	movs	r2, #0
 8006582:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	2220      	movs	r2, #32
 8006588:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	2200      	movs	r2, #0
 8006590:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006598:	f043 0220 	orr.w	r2, r3, #32
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	2200      	movs	r2, #0
 80065a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80065a8:	2301      	movs	r3, #1
 80065aa:	e007      	b.n	80065bc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	695b      	ldr	r3, [r3, #20]
 80065b2:	f003 0304 	and.w	r3, r3, #4
 80065b6:	2b04      	cmp	r3, #4
 80065b8:	d1ca      	bne.n	8006550 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80065ba:	2300      	movs	r3, #0
}
 80065bc:	4618      	mov	r0, r3
 80065be:	3710      	adds	r7, #16
 80065c0:	46bd      	mov	sp, r7
 80065c2:	bd80      	pop	{r7, pc}

080065c4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80065c4:	b580      	push	{r7, lr}
 80065c6:	b084      	sub	sp, #16
 80065c8:	af00      	add	r7, sp, #0
 80065ca:	60f8      	str	r0, [r7, #12]
 80065cc:	60b9      	str	r1, [r7, #8]
 80065ce:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80065d0:	e042      	b.n	8006658 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	695b      	ldr	r3, [r3, #20]
 80065d8:	f003 0310 	and.w	r3, r3, #16
 80065dc:	2b10      	cmp	r3, #16
 80065de:	d119      	bne.n	8006614 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	f06f 0210 	mvn.w	r2, #16
 80065e8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	2200      	movs	r2, #0
 80065ee:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	2220      	movs	r2, #32
 80065f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	2200      	movs	r2, #0
 80065fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	2200      	movs	r2, #0
 800660c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006610:	2301      	movs	r3, #1
 8006612:	e029      	b.n	8006668 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006614:	f7fd ff46 	bl	80044a4 <HAL_GetTick>
 8006618:	4602      	mov	r2, r0
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	1ad3      	subs	r3, r2, r3
 800661e:	68ba      	ldr	r2, [r7, #8]
 8006620:	429a      	cmp	r2, r3
 8006622:	d302      	bcc.n	800662a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8006624:	68bb      	ldr	r3, [r7, #8]
 8006626:	2b00      	cmp	r3, #0
 8006628:	d116      	bne.n	8006658 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	2200      	movs	r2, #0
 800662e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	2220      	movs	r2, #32
 8006634:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	2200      	movs	r2, #0
 800663c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006644:	f043 0220 	orr.w	r2, r3, #32
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	2200      	movs	r2, #0
 8006650:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006654:	2301      	movs	r3, #1
 8006656:	e007      	b.n	8006668 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	695b      	ldr	r3, [r3, #20]
 800665e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006662:	2b40      	cmp	r3, #64	; 0x40
 8006664:	d1b5      	bne.n	80065d2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8006666:	2300      	movs	r3, #0
}
 8006668:	4618      	mov	r0, r3
 800666a:	3710      	adds	r7, #16
 800666c:	46bd      	mov	sp, r7
 800666e:	bd80      	pop	{r7, pc}

08006670 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8006670:	b480      	push	{r7}
 8006672:	b083      	sub	sp, #12
 8006674:	af00      	add	r7, sp, #0
 8006676:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	695b      	ldr	r3, [r3, #20]
 800667e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006682:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006686:	d11b      	bne.n	80066c0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006690:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	2200      	movs	r2, #0
 8006696:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	2220      	movs	r2, #32
 800669c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	2200      	movs	r2, #0
 80066a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066ac:	f043 0204 	orr.w	r2, r3, #4
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	2200      	movs	r2, #0
 80066b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80066bc:	2301      	movs	r3, #1
 80066be:	e000      	b.n	80066c2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80066c0:	2300      	movs	r3, #0
}
 80066c2:	4618      	mov	r0, r3
 80066c4:	370c      	adds	r7, #12
 80066c6:	46bd      	mov	sp, r7
 80066c8:	bc80      	pop	{r7}
 80066ca:	4770      	bx	lr

080066cc <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80066cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80066ce:	b08f      	sub	sp, #60	; 0x3c
 80066d0:	af0a      	add	r7, sp, #40	; 0x28
 80066d2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d101      	bne.n	80066de <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80066da:	2301      	movs	r3, #1
 80066dc:	e10f      	b.n	80068fe <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80066ea:	b2db      	uxtb	r3, r3
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d106      	bne.n	80066fe <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	2200      	movs	r2, #0
 80066f4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80066f8:	6878      	ldr	r0, [r7, #4]
 80066fa:	f005 fdd3 	bl	800c2a4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	2203      	movs	r2, #3
 8006702:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8006706:	68bb      	ldr	r3, [r7, #8]
 8006708:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800670a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800670e:	2b00      	cmp	r3, #0
 8006710:	d102      	bne.n	8006718 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	2200      	movs	r2, #0
 8006716:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	4618      	mov	r0, r3
 800671e:	f002 fdc3 	bl	80092a8 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	603b      	str	r3, [r7, #0]
 8006728:	687e      	ldr	r6, [r7, #4]
 800672a:	466d      	mov	r5, sp
 800672c:	f106 0410 	add.w	r4, r6, #16
 8006730:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006732:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006734:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006736:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006738:	e894 0003 	ldmia.w	r4, {r0, r1}
 800673c:	e885 0003 	stmia.w	r5, {r0, r1}
 8006740:	1d33      	adds	r3, r6, #4
 8006742:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006744:	6838      	ldr	r0, [r7, #0]
 8006746:	f002 fca5 	bl	8009094 <USB_CoreInit>
 800674a:	4603      	mov	r3, r0
 800674c:	2b00      	cmp	r3, #0
 800674e:	d005      	beq.n	800675c <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	2202      	movs	r2, #2
 8006754:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8006758:	2301      	movs	r3, #1
 800675a:	e0d0      	b.n	80068fe <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	2100      	movs	r1, #0
 8006762:	4618      	mov	r0, r3
 8006764:	f002 fdb0 	bl	80092c8 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006768:	2300      	movs	r3, #0
 800676a:	73fb      	strb	r3, [r7, #15]
 800676c:	e04a      	b.n	8006804 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800676e:	7bfa      	ldrb	r2, [r7, #15]
 8006770:	6879      	ldr	r1, [r7, #4]
 8006772:	4613      	mov	r3, r2
 8006774:	00db      	lsls	r3, r3, #3
 8006776:	1a9b      	subs	r3, r3, r2
 8006778:	009b      	lsls	r3, r3, #2
 800677a:	440b      	add	r3, r1
 800677c:	333d      	adds	r3, #61	; 0x3d
 800677e:	2201      	movs	r2, #1
 8006780:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8006782:	7bfa      	ldrb	r2, [r7, #15]
 8006784:	6879      	ldr	r1, [r7, #4]
 8006786:	4613      	mov	r3, r2
 8006788:	00db      	lsls	r3, r3, #3
 800678a:	1a9b      	subs	r3, r3, r2
 800678c:	009b      	lsls	r3, r3, #2
 800678e:	440b      	add	r3, r1
 8006790:	333c      	adds	r3, #60	; 0x3c
 8006792:	7bfa      	ldrb	r2, [r7, #15]
 8006794:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8006796:	7bfa      	ldrb	r2, [r7, #15]
 8006798:	7bfb      	ldrb	r3, [r7, #15]
 800679a:	b298      	uxth	r0, r3
 800679c:	6879      	ldr	r1, [r7, #4]
 800679e:	4613      	mov	r3, r2
 80067a0:	00db      	lsls	r3, r3, #3
 80067a2:	1a9b      	subs	r3, r3, r2
 80067a4:	009b      	lsls	r3, r3, #2
 80067a6:	440b      	add	r3, r1
 80067a8:	3342      	adds	r3, #66	; 0x42
 80067aa:	4602      	mov	r2, r0
 80067ac:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80067ae:	7bfa      	ldrb	r2, [r7, #15]
 80067b0:	6879      	ldr	r1, [r7, #4]
 80067b2:	4613      	mov	r3, r2
 80067b4:	00db      	lsls	r3, r3, #3
 80067b6:	1a9b      	subs	r3, r3, r2
 80067b8:	009b      	lsls	r3, r3, #2
 80067ba:	440b      	add	r3, r1
 80067bc:	333f      	adds	r3, #63	; 0x3f
 80067be:	2200      	movs	r2, #0
 80067c0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80067c2:	7bfa      	ldrb	r2, [r7, #15]
 80067c4:	6879      	ldr	r1, [r7, #4]
 80067c6:	4613      	mov	r3, r2
 80067c8:	00db      	lsls	r3, r3, #3
 80067ca:	1a9b      	subs	r3, r3, r2
 80067cc:	009b      	lsls	r3, r3, #2
 80067ce:	440b      	add	r3, r1
 80067d0:	3344      	adds	r3, #68	; 0x44
 80067d2:	2200      	movs	r2, #0
 80067d4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80067d6:	7bfa      	ldrb	r2, [r7, #15]
 80067d8:	6879      	ldr	r1, [r7, #4]
 80067da:	4613      	mov	r3, r2
 80067dc:	00db      	lsls	r3, r3, #3
 80067de:	1a9b      	subs	r3, r3, r2
 80067e0:	009b      	lsls	r3, r3, #2
 80067e2:	440b      	add	r3, r1
 80067e4:	3348      	adds	r3, #72	; 0x48
 80067e6:	2200      	movs	r2, #0
 80067e8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80067ea:	7bfa      	ldrb	r2, [r7, #15]
 80067ec:	6879      	ldr	r1, [r7, #4]
 80067ee:	4613      	mov	r3, r2
 80067f0:	00db      	lsls	r3, r3, #3
 80067f2:	1a9b      	subs	r3, r3, r2
 80067f4:	009b      	lsls	r3, r3, #2
 80067f6:	440b      	add	r3, r1
 80067f8:	3350      	adds	r3, #80	; 0x50
 80067fa:	2200      	movs	r2, #0
 80067fc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80067fe:	7bfb      	ldrb	r3, [r7, #15]
 8006800:	3301      	adds	r3, #1
 8006802:	73fb      	strb	r3, [r7, #15]
 8006804:	7bfa      	ldrb	r2, [r7, #15]
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	685b      	ldr	r3, [r3, #4]
 800680a:	429a      	cmp	r2, r3
 800680c:	d3af      	bcc.n	800676e <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800680e:	2300      	movs	r3, #0
 8006810:	73fb      	strb	r3, [r7, #15]
 8006812:	e044      	b.n	800689e <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8006814:	7bfa      	ldrb	r2, [r7, #15]
 8006816:	6879      	ldr	r1, [r7, #4]
 8006818:	4613      	mov	r3, r2
 800681a:	00db      	lsls	r3, r3, #3
 800681c:	1a9b      	subs	r3, r3, r2
 800681e:	009b      	lsls	r3, r3, #2
 8006820:	440b      	add	r3, r1
 8006822:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8006826:	2200      	movs	r2, #0
 8006828:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800682a:	7bfa      	ldrb	r2, [r7, #15]
 800682c:	6879      	ldr	r1, [r7, #4]
 800682e:	4613      	mov	r3, r2
 8006830:	00db      	lsls	r3, r3, #3
 8006832:	1a9b      	subs	r3, r3, r2
 8006834:	009b      	lsls	r3, r3, #2
 8006836:	440b      	add	r3, r1
 8006838:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800683c:	7bfa      	ldrb	r2, [r7, #15]
 800683e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8006840:	7bfa      	ldrb	r2, [r7, #15]
 8006842:	6879      	ldr	r1, [r7, #4]
 8006844:	4613      	mov	r3, r2
 8006846:	00db      	lsls	r3, r3, #3
 8006848:	1a9b      	subs	r3, r3, r2
 800684a:	009b      	lsls	r3, r3, #2
 800684c:	440b      	add	r3, r1
 800684e:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8006852:	2200      	movs	r2, #0
 8006854:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8006856:	7bfa      	ldrb	r2, [r7, #15]
 8006858:	6879      	ldr	r1, [r7, #4]
 800685a:	4613      	mov	r3, r2
 800685c:	00db      	lsls	r3, r3, #3
 800685e:	1a9b      	subs	r3, r3, r2
 8006860:	009b      	lsls	r3, r3, #2
 8006862:	440b      	add	r3, r1
 8006864:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8006868:	2200      	movs	r2, #0
 800686a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800686c:	7bfa      	ldrb	r2, [r7, #15]
 800686e:	6879      	ldr	r1, [r7, #4]
 8006870:	4613      	mov	r3, r2
 8006872:	00db      	lsls	r3, r3, #3
 8006874:	1a9b      	subs	r3, r3, r2
 8006876:	009b      	lsls	r3, r3, #2
 8006878:	440b      	add	r3, r1
 800687a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800687e:	2200      	movs	r2, #0
 8006880:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8006882:	7bfa      	ldrb	r2, [r7, #15]
 8006884:	6879      	ldr	r1, [r7, #4]
 8006886:	4613      	mov	r3, r2
 8006888:	00db      	lsls	r3, r3, #3
 800688a:	1a9b      	subs	r3, r3, r2
 800688c:	009b      	lsls	r3, r3, #2
 800688e:	440b      	add	r3, r1
 8006890:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8006894:	2200      	movs	r2, #0
 8006896:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006898:	7bfb      	ldrb	r3, [r7, #15]
 800689a:	3301      	adds	r3, #1
 800689c:	73fb      	strb	r3, [r7, #15]
 800689e:	7bfa      	ldrb	r2, [r7, #15]
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	685b      	ldr	r3, [r3, #4]
 80068a4:	429a      	cmp	r2, r3
 80068a6:	d3b5      	bcc.n	8006814 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	603b      	str	r3, [r7, #0]
 80068ae:	687e      	ldr	r6, [r7, #4]
 80068b0:	466d      	mov	r5, sp
 80068b2:	f106 0410 	add.w	r4, r6, #16
 80068b6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80068b8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80068ba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80068bc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80068be:	e894 0003 	ldmia.w	r4, {r0, r1}
 80068c2:	e885 0003 	stmia.w	r5, {r0, r1}
 80068c6:	1d33      	adds	r3, r6, #4
 80068c8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80068ca:	6838      	ldr	r0, [r7, #0]
 80068cc:	f002 fd48 	bl	8009360 <USB_DevInit>
 80068d0:	4603      	mov	r3, r0
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d005      	beq.n	80068e2 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	2202      	movs	r2, #2
 80068da:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80068de:	2301      	movs	r3, #1
 80068e0:	e00d      	b.n	80068fe <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	2200      	movs	r2, #0
 80068e6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	2201      	movs	r2, #1
 80068ee:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  (void)USB_DevDisconnect(hpcd->Instance);
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	4618      	mov	r0, r3
 80068f8:	f003 fdb9 	bl	800a46e <USB_DevDisconnect>

  return HAL_OK;
 80068fc:	2300      	movs	r3, #0
}
 80068fe:	4618      	mov	r0, r3
 8006900:	3714      	adds	r7, #20
 8006902:	46bd      	mov	sp, r7
 8006904:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006906 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8006906:	b580      	push	{r7, lr}
 8006908:	b082      	sub	sp, #8
 800690a:	af00      	add	r7, sp, #0
 800690c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8006914:	2b01      	cmp	r3, #1
 8006916:	d101      	bne.n	800691c <HAL_PCD_Start+0x16>
 8006918:	2302      	movs	r3, #2
 800691a:	e012      	b.n	8006942 <HAL_PCD_Start+0x3c>
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	2201      	movs	r2, #1
 8006920:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  __HAL_PCD_ENABLE(hpcd);
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	4618      	mov	r0, r3
 800692a:	f002 fcad 	bl	8009288 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	4618      	mov	r0, r3
 8006934:	f003 fd7b 	bl	800a42e <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	2200      	movs	r2, #0
 800693c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8006940:	2300      	movs	r3, #0
}
 8006942:	4618      	mov	r0, r3
 8006944:	3708      	adds	r7, #8
 8006946:	46bd      	mov	sp, r7
 8006948:	bd80      	pop	{r7, pc}

0800694a <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800694a:	b590      	push	{r4, r7, lr}
 800694c:	b08d      	sub	sp, #52	; 0x34
 800694e:	af00      	add	r7, sp, #0
 8006950:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006958:	6a3b      	ldr	r3, [r7, #32]
 800695a:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t temp;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	4618      	mov	r0, r3
 8006962:	f003 fe32 	bl	800a5ca <USB_GetMode>
 8006966:	4603      	mov	r3, r0
 8006968:	2b00      	cmp	r3, #0
 800696a:	f040 838f 	bne.w	800708c <HAL_PCD_IRQHandler+0x742>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	4618      	mov	r0, r3
 8006974:	f003 fd9b 	bl	800a4ae <USB_ReadInterrupts>
 8006978:	4603      	mov	r3, r0
 800697a:	2b00      	cmp	r3, #0
 800697c:	f000 8385 	beq.w	800708a <HAL_PCD_IRQHandler+0x740>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	4618      	mov	r0, r3
 8006986:	f003 fd92 	bl	800a4ae <USB_ReadInterrupts>
 800698a:	4603      	mov	r3, r0
 800698c:	f003 0302 	and.w	r3, r3, #2
 8006990:	2b02      	cmp	r3, #2
 8006992:	d107      	bne.n	80069a4 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	695a      	ldr	r2, [r3, #20]
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	f002 0202 	and.w	r2, r2, #2
 80069a2:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	4618      	mov	r0, r3
 80069aa:	f003 fd80 	bl	800a4ae <USB_ReadInterrupts>
 80069ae:	4603      	mov	r3, r0
 80069b0:	f003 0310 	and.w	r3, r3, #16
 80069b4:	2b10      	cmp	r3, #16
 80069b6:	d161      	bne.n	8006a7c <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	699a      	ldr	r2, [r3, #24]
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	f022 0210 	bic.w	r2, r2, #16
 80069c6:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 80069c8:	6a3b      	ldr	r3, [r7, #32]
 80069ca:	6a1b      	ldr	r3, [r3, #32]
 80069cc:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 80069ce:	69bb      	ldr	r3, [r7, #24]
 80069d0:	f003 020f 	and.w	r2, r3, #15
 80069d4:	4613      	mov	r3, r2
 80069d6:	00db      	lsls	r3, r3, #3
 80069d8:	1a9b      	subs	r3, r3, r2
 80069da:	009b      	lsls	r3, r3, #2
 80069dc:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80069e0:	687a      	ldr	r2, [r7, #4]
 80069e2:	4413      	add	r3, r2
 80069e4:	3304      	adds	r3, #4
 80069e6:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80069e8:	69bb      	ldr	r3, [r7, #24]
 80069ea:	0c5b      	lsrs	r3, r3, #17
 80069ec:	f003 030f 	and.w	r3, r3, #15
 80069f0:	2b02      	cmp	r3, #2
 80069f2:	d124      	bne.n	8006a3e <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 80069f4:	69ba      	ldr	r2, [r7, #24]
 80069f6:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80069fa:	4013      	ands	r3, r2
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d035      	beq.n	8006a6c <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8006a00:	697b      	ldr	r3, [r7, #20]
 8006a02:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8006a04:	69bb      	ldr	r3, [r7, #24]
 8006a06:	091b      	lsrs	r3, r3, #4
 8006a08:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8006a0a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006a0e:	b29b      	uxth	r3, r3
 8006a10:	461a      	mov	r2, r3
 8006a12:	6a38      	ldr	r0, [r7, #32]
 8006a14:	f003 fbbd 	bl	800a192 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006a18:	697b      	ldr	r3, [r7, #20]
 8006a1a:	68da      	ldr	r2, [r3, #12]
 8006a1c:	69bb      	ldr	r3, [r7, #24]
 8006a1e:	091b      	lsrs	r3, r3, #4
 8006a20:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006a24:	441a      	add	r2, r3
 8006a26:	697b      	ldr	r3, [r7, #20]
 8006a28:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006a2a:	697b      	ldr	r3, [r7, #20]
 8006a2c:	699a      	ldr	r2, [r3, #24]
 8006a2e:	69bb      	ldr	r3, [r7, #24]
 8006a30:	091b      	lsrs	r3, r3, #4
 8006a32:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006a36:	441a      	add	r2, r3
 8006a38:	697b      	ldr	r3, [r7, #20]
 8006a3a:	619a      	str	r2, [r3, #24]
 8006a3c:	e016      	b.n	8006a6c <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8006a3e:	69bb      	ldr	r3, [r7, #24]
 8006a40:	0c5b      	lsrs	r3, r3, #17
 8006a42:	f003 030f 	and.w	r3, r3, #15
 8006a46:	2b06      	cmp	r3, #6
 8006a48:	d110      	bne.n	8006a6c <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8006a50:	2208      	movs	r2, #8
 8006a52:	4619      	mov	r1, r3
 8006a54:	6a38      	ldr	r0, [r7, #32]
 8006a56:	f003 fb9c 	bl	800a192 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006a5a:	697b      	ldr	r3, [r7, #20]
 8006a5c:	699a      	ldr	r2, [r3, #24]
 8006a5e:	69bb      	ldr	r3, [r7, #24]
 8006a60:	091b      	lsrs	r3, r3, #4
 8006a62:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006a66:	441a      	add	r2, r3
 8006a68:	697b      	ldr	r3, [r7, #20]
 8006a6a:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	699a      	ldr	r2, [r3, #24]
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	f042 0210 	orr.w	r2, r2, #16
 8006a7a:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	4618      	mov	r0, r3
 8006a82:	f003 fd14 	bl	800a4ae <USB_ReadInterrupts>
 8006a86:	4603      	mov	r3, r0
 8006a88:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006a8c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006a90:	d16e      	bne.n	8006b70 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8006a92:	2300      	movs	r3, #0
 8006a94:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	4618      	mov	r0, r3
 8006a9c:	f003 fd19 	bl	800a4d2 <USB_ReadDevAllOutEpInterrupt>
 8006aa0:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8006aa2:	e062      	b.n	8006b6a <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8006aa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006aa6:	f003 0301 	and.w	r3, r3, #1
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d057      	beq.n	8006b5e <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006ab4:	b2d2      	uxtb	r2, r2
 8006ab6:	4611      	mov	r1, r2
 8006ab8:	4618      	mov	r0, r3
 8006aba:	f003 fd3c 	bl	800a536 <USB_ReadDevOutEPInterrupt>
 8006abe:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8006ac0:	693b      	ldr	r3, [r7, #16]
 8006ac2:	f003 0301 	and.w	r3, r3, #1
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d00c      	beq.n	8006ae4 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8006aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006acc:	015a      	lsls	r2, r3, #5
 8006ace:	69fb      	ldr	r3, [r7, #28]
 8006ad0:	4413      	add	r3, r2
 8006ad2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ad6:	461a      	mov	r2, r3
 8006ad8:	2301      	movs	r3, #1
 8006ada:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8006adc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006ade:	6878      	ldr	r0, [r7, #4]
 8006ae0:	f000 fda2 	bl	8007628 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8006ae4:	693b      	ldr	r3, [r7, #16]
 8006ae6:	f003 0308 	and.w	r3, r3, #8
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d00c      	beq.n	8006b08 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8006aee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006af0:	015a      	lsls	r2, r3, #5
 8006af2:	69fb      	ldr	r3, [r7, #28]
 8006af4:	4413      	add	r3, r2
 8006af6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006afa:	461a      	mov	r2, r3
 8006afc:	2308      	movs	r3, #8
 8006afe:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8006b00:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006b02:	6878      	ldr	r0, [r7, #4]
 8006b04:	f000 fe9c 	bl	8007840 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8006b08:	693b      	ldr	r3, [r7, #16]
 8006b0a:	f003 0310 	and.w	r3, r3, #16
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d008      	beq.n	8006b24 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8006b12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b14:	015a      	lsls	r2, r3, #5
 8006b16:	69fb      	ldr	r3, [r7, #28]
 8006b18:	4413      	add	r3, r2
 8006b1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b1e:	461a      	mov	r2, r3
 8006b20:	2310      	movs	r3, #16
 8006b22:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8006b24:	693b      	ldr	r3, [r7, #16]
 8006b26:	f003 0320 	and.w	r3, r3, #32
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d008      	beq.n	8006b40 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8006b2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b30:	015a      	lsls	r2, r3, #5
 8006b32:	69fb      	ldr	r3, [r7, #28]
 8006b34:	4413      	add	r3, r2
 8006b36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b3a:	461a      	mov	r2, r3
 8006b3c:	2320      	movs	r3, #32
 8006b3e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8006b40:	693b      	ldr	r3, [r7, #16]
 8006b42:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d009      	beq.n	8006b5e <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8006b4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b4c:	015a      	lsls	r2, r3, #5
 8006b4e:	69fb      	ldr	r3, [r7, #28]
 8006b50:	4413      	add	r3, r2
 8006b52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b56:	461a      	mov	r2, r3
 8006b58:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006b5c:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8006b5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b60:	3301      	adds	r3, #1
 8006b62:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8006b64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b66:	085b      	lsrs	r3, r3, #1
 8006b68:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8006b6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d199      	bne.n	8006aa4 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	4618      	mov	r0, r3
 8006b76:	f003 fc9a 	bl	800a4ae <USB_ReadInterrupts>
 8006b7a:	4603      	mov	r3, r0
 8006b7c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006b80:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006b84:	f040 80c0 	bne.w	8006d08 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	4618      	mov	r0, r3
 8006b8e:	f003 fcb9 	bl	800a504 <USB_ReadDevAllInEpInterrupt>
 8006b92:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8006b94:	2300      	movs	r3, #0
 8006b96:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8006b98:	e0b2      	b.n	8006d00 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8006b9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b9c:	f003 0301 	and.w	r3, r3, #1
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	f000 80a7 	beq.w	8006cf4 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006bac:	b2d2      	uxtb	r2, r2
 8006bae:	4611      	mov	r1, r2
 8006bb0:	4618      	mov	r0, r3
 8006bb2:	f003 fcdd 	bl	800a570 <USB_ReadDevInEPInterrupt>
 8006bb6:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8006bb8:	693b      	ldr	r3, [r7, #16]
 8006bba:	f003 0301 	and.w	r3, r3, #1
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d057      	beq.n	8006c72 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8006bc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bc4:	f003 030f 	and.w	r3, r3, #15
 8006bc8:	2201      	movs	r2, #1
 8006bca:	fa02 f303 	lsl.w	r3, r2, r3
 8006bce:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8006bd0:	69fb      	ldr	r3, [r7, #28]
 8006bd2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006bd6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	43db      	mvns	r3, r3
 8006bdc:	69f9      	ldr	r1, [r7, #28]
 8006bde:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006be2:	4013      	ands	r3, r2
 8006be4:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8006be6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006be8:	015a      	lsls	r2, r3, #5
 8006bea:	69fb      	ldr	r3, [r7, #28]
 8006bec:	4413      	add	r3, r2
 8006bee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006bf2:	461a      	mov	r2, r3
 8006bf4:	2301      	movs	r3, #1
 8006bf6:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	691b      	ldr	r3, [r3, #16]
 8006bfc:	2b01      	cmp	r3, #1
 8006bfe:	d132      	bne.n	8006c66 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8006c00:	6879      	ldr	r1, [r7, #4]
 8006c02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006c04:	4613      	mov	r3, r2
 8006c06:	00db      	lsls	r3, r3, #3
 8006c08:	1a9b      	subs	r3, r3, r2
 8006c0a:	009b      	lsls	r3, r3, #2
 8006c0c:	440b      	add	r3, r1
 8006c0e:	3348      	adds	r3, #72	; 0x48
 8006c10:	6819      	ldr	r1, [r3, #0]
 8006c12:	6878      	ldr	r0, [r7, #4]
 8006c14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006c16:	4613      	mov	r3, r2
 8006c18:	00db      	lsls	r3, r3, #3
 8006c1a:	1a9b      	subs	r3, r3, r2
 8006c1c:	009b      	lsls	r3, r3, #2
 8006c1e:	4403      	add	r3, r0
 8006c20:	3344      	adds	r3, #68	; 0x44
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	4419      	add	r1, r3
 8006c26:	6878      	ldr	r0, [r7, #4]
 8006c28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006c2a:	4613      	mov	r3, r2
 8006c2c:	00db      	lsls	r3, r3, #3
 8006c2e:	1a9b      	subs	r3, r3, r2
 8006c30:	009b      	lsls	r3, r3, #2
 8006c32:	4403      	add	r3, r0
 8006c34:	3348      	adds	r3, #72	; 0x48
 8006c36:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8006c38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d113      	bne.n	8006c66 <HAL_PCD_IRQHandler+0x31c>
 8006c3e:	6879      	ldr	r1, [r7, #4]
 8006c40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006c42:	4613      	mov	r3, r2
 8006c44:	00db      	lsls	r3, r3, #3
 8006c46:	1a9b      	subs	r3, r3, r2
 8006c48:	009b      	lsls	r3, r3, #2
 8006c4a:	440b      	add	r3, r1
 8006c4c:	3350      	adds	r3, #80	; 0x50
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d108      	bne.n	8006c66 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	6818      	ldr	r0, [r3, #0]
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8006c5e:	461a      	mov	r2, r3
 8006c60:	2101      	movs	r1, #1
 8006c62:	f003 fce1 	bl	800a628 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8006c66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c68:	b2db      	uxtb	r3, r3
 8006c6a:	4619      	mov	r1, r3
 8006c6c:	6878      	ldr	r0, [r7, #4]
 8006c6e:	f005 fb9a 	bl	800c3a6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8006c72:	693b      	ldr	r3, [r7, #16]
 8006c74:	f003 0308 	and.w	r3, r3, #8
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d008      	beq.n	8006c8e <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8006c7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c7e:	015a      	lsls	r2, r3, #5
 8006c80:	69fb      	ldr	r3, [r7, #28]
 8006c82:	4413      	add	r3, r2
 8006c84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c88:	461a      	mov	r2, r3
 8006c8a:	2308      	movs	r3, #8
 8006c8c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8006c8e:	693b      	ldr	r3, [r7, #16]
 8006c90:	f003 0310 	and.w	r3, r3, #16
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d008      	beq.n	8006caa <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8006c98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c9a:	015a      	lsls	r2, r3, #5
 8006c9c:	69fb      	ldr	r3, [r7, #28]
 8006c9e:	4413      	add	r3, r2
 8006ca0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ca4:	461a      	mov	r2, r3
 8006ca6:	2310      	movs	r3, #16
 8006ca8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8006caa:	693b      	ldr	r3, [r7, #16]
 8006cac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d008      	beq.n	8006cc6 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8006cb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cb6:	015a      	lsls	r2, r3, #5
 8006cb8:	69fb      	ldr	r3, [r7, #28]
 8006cba:	4413      	add	r3, r2
 8006cbc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006cc0:	461a      	mov	r2, r3
 8006cc2:	2340      	movs	r3, #64	; 0x40
 8006cc4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8006cc6:	693b      	ldr	r3, [r7, #16]
 8006cc8:	f003 0302 	and.w	r3, r3, #2
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d008      	beq.n	8006ce2 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8006cd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cd2:	015a      	lsls	r2, r3, #5
 8006cd4:	69fb      	ldr	r3, [r7, #28]
 8006cd6:	4413      	add	r3, r2
 8006cd8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006cdc:	461a      	mov	r2, r3
 8006cde:	2302      	movs	r3, #2
 8006ce0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8006ce2:	693b      	ldr	r3, [r7, #16]
 8006ce4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d003      	beq.n	8006cf4 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8006cec:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006cee:	6878      	ldr	r0, [r7, #4]
 8006cf0:	f000 fc0c 	bl	800750c <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8006cf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cf6:	3301      	adds	r3, #1
 8006cf8:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8006cfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cfc:	085b      	lsrs	r3, r3, #1
 8006cfe:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8006d00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	f47f af49 	bne.w	8006b9a <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	4618      	mov	r0, r3
 8006d0e:	f003 fbce 	bl	800a4ae <USB_ReadInterrupts>
 8006d12:	4603      	mov	r3, r0
 8006d14:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006d18:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006d1c:	d114      	bne.n	8006d48 <HAL_PCD_IRQHandler+0x3fe>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8006d1e:	69fb      	ldr	r3, [r7, #28]
 8006d20:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d24:	685b      	ldr	r3, [r3, #4]
 8006d26:	69fa      	ldr	r2, [r7, #28]
 8006d28:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006d2c:	f023 0301 	bic.w	r3, r3, #1
 8006d30:	6053      	str	r3, [r2, #4]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResumeCallback(hpcd);
#else
      HAL_PCD_ResumeCallback(hpcd);
 8006d32:	6878      	ldr	r0, [r7, #4]
 8006d34:	f005 fbae 	bl	800c494 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	695a      	ldr	r2, [r3, #20]
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8006d46:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	4618      	mov	r0, r3
 8006d4e:	f003 fbae 	bl	800a4ae <USB_ReadInterrupts>
 8006d52:	4603      	mov	r3, r0
 8006d54:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006d58:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006d5c:	d112      	bne.n	8006d84 <HAL_PCD_IRQHandler+0x43a>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8006d5e:	69fb      	ldr	r3, [r7, #28]
 8006d60:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d64:	689b      	ldr	r3, [r3, #8]
 8006d66:	f003 0301 	and.w	r3, r3, #1
 8006d6a:	2b01      	cmp	r3, #1
 8006d6c:	d102      	bne.n	8006d74 <HAL_PCD_IRQHandler+0x42a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8006d6e:	6878      	ldr	r0, [r7, #4]
 8006d70:	f005 fb6a 	bl	800c448 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	695a      	ldr	r2, [r3, #20]
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8006d82:	615a      	str	r2, [r3, #20]
    }
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	4618      	mov	r0, r3
 8006d8a:	f003 fb90 	bl	800a4ae <USB_ReadInterrupts>
 8006d8e:	4603      	mov	r3, r0
 8006d90:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006d94:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006d98:	f040 80c7 	bne.w	8006f2a <HAL_PCD_IRQHandler+0x5e0>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8006d9c:	69fb      	ldr	r3, [r7, #28]
 8006d9e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006da2:	685b      	ldr	r3, [r3, #4]
 8006da4:	69fa      	ldr	r2, [r7, #28]
 8006da6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006daa:	f023 0301 	bic.w	r3, r3, #1
 8006dae:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	2110      	movs	r1, #16
 8006db6:	4618      	mov	r0, r3
 8006db8:	f002 fc36 	bl	8009628 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006dbc:	2300      	movs	r3, #0
 8006dbe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006dc0:	e056      	b.n	8006e70 <HAL_PCD_IRQHandler+0x526>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8006dc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006dc4:	015a      	lsls	r2, r3, #5
 8006dc6:	69fb      	ldr	r3, [r7, #28]
 8006dc8:	4413      	add	r3, r2
 8006dca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006dce:	461a      	mov	r2, r3
 8006dd0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006dd4:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006dd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006dd8:	015a      	lsls	r2, r3, #5
 8006dda:	69fb      	ldr	r3, [r7, #28]
 8006ddc:	4413      	add	r3, r2
 8006dde:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006de6:	0151      	lsls	r1, r2, #5
 8006de8:	69fa      	ldr	r2, [r7, #28]
 8006dea:	440a      	add	r2, r1
 8006dec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006df0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006df4:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8006df6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006df8:	015a      	lsls	r2, r3, #5
 8006dfa:	69fb      	ldr	r3, [r7, #28]
 8006dfc:	4413      	add	r3, r2
 8006dfe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006e06:	0151      	lsls	r1, r2, #5
 8006e08:	69fa      	ldr	r2, [r7, #28]
 8006e0a:	440a      	add	r2, r1
 8006e0c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006e10:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006e14:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8006e16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e18:	015a      	lsls	r2, r3, #5
 8006e1a:	69fb      	ldr	r3, [r7, #28]
 8006e1c:	4413      	add	r3, r2
 8006e1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e22:	461a      	mov	r2, r3
 8006e24:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006e28:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8006e2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e2c:	015a      	lsls	r2, r3, #5
 8006e2e:	69fb      	ldr	r3, [r7, #28]
 8006e30:	4413      	add	r3, r2
 8006e32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006e3a:	0151      	lsls	r1, r2, #5
 8006e3c:	69fa      	ldr	r2, [r7, #28]
 8006e3e:	440a      	add	r2, r1
 8006e40:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006e44:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006e48:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8006e4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e4c:	015a      	lsls	r2, r3, #5
 8006e4e:	69fb      	ldr	r3, [r7, #28]
 8006e50:	4413      	add	r3, r2
 8006e52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006e5a:	0151      	lsls	r1, r2, #5
 8006e5c:	69fa      	ldr	r2, [r7, #28]
 8006e5e:	440a      	add	r2, r1
 8006e60:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006e64:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006e68:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006e6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e6c:	3301      	adds	r3, #1
 8006e6e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	685b      	ldr	r3, [r3, #4]
 8006e74:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006e76:	429a      	cmp	r2, r3
 8006e78:	d3a3      	bcc.n	8006dc2 <HAL_PCD_IRQHandler+0x478>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8006e7a:	69fb      	ldr	r3, [r7, #28]
 8006e7c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e80:	69db      	ldr	r3, [r3, #28]
 8006e82:	69fa      	ldr	r2, [r7, #28]
 8006e84:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006e88:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8006e8c:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d016      	beq.n	8006ec4 <HAL_PCD_IRQHandler+0x57a>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8006e96:	69fb      	ldr	r3, [r7, #28]
 8006e98:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e9c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006ea0:	69fa      	ldr	r2, [r7, #28]
 8006ea2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006ea6:	f043 030b 	orr.w	r3, r3, #11
 8006eaa:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8006eae:	69fb      	ldr	r3, [r7, #28]
 8006eb0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006eb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006eb6:	69fa      	ldr	r2, [r7, #28]
 8006eb8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006ebc:	f043 030b 	orr.w	r3, r3, #11
 8006ec0:	6453      	str	r3, [r2, #68]	; 0x44
 8006ec2:	e015      	b.n	8006ef0 <HAL_PCD_IRQHandler+0x5a6>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8006ec4:	69fb      	ldr	r3, [r7, #28]
 8006ec6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006eca:	695b      	ldr	r3, [r3, #20]
 8006ecc:	69fa      	ldr	r2, [r7, #28]
 8006ece:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006ed2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8006ed6:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8006eda:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8006edc:	69fb      	ldr	r3, [r7, #28]
 8006ede:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ee2:	691b      	ldr	r3, [r3, #16]
 8006ee4:	69fa      	ldr	r2, [r7, #28]
 8006ee6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006eea:	f043 030b 	orr.w	r3, r3, #11
 8006eee:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8006ef0:	69fb      	ldr	r3, [r7, #28]
 8006ef2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	69fa      	ldr	r2, [r7, #28]
 8006efa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006efe:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8006f02:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	6818      	ldr	r0, [r3, #0]
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	691b      	ldr	r3, [r3, #16]
 8006f0c:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8006f14:	461a      	mov	r2, r3
 8006f16:	f003 fb87 	bl	800a628 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	695a      	ldr	r2, [r3, #20]
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8006f28:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	4618      	mov	r0, r3
 8006f30:	f003 fabd 	bl	800a4ae <USB_ReadInterrupts>
 8006f34:	4603      	mov	r3, r0
 8006f36:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006f3a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006f3e:	d124      	bne.n	8006f8a <HAL_PCD_IRQHandler+0x640>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	4618      	mov	r0, r3
 8006f46:	f003 fb4d 	bl	800a5e4 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	4618      	mov	r0, r3
 8006f50:	f002 fbc6 	bl	80096e0 <USB_GetDevSpeed>
 8006f54:	4603      	mov	r3, r0
 8006f56:	461a      	mov	r2, r3
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	681c      	ldr	r4, [r3, #0]
 8006f60:	f001 f932 	bl	80081c8 <HAL_RCC_GetHCLKFreq>
 8006f64:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8006f6a:	b2db      	uxtb	r3, r3
 8006f6c:	461a      	mov	r2, r3
 8006f6e:	4620      	mov	r0, r4
 8006f70:	f002 f8e8 	bl	8009144 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8006f74:	6878      	ldr	r0, [r7, #4]
 8006f76:	f005 fa3e 	bl	800c3f6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	695a      	ldr	r2, [r3, #20]
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8006f88:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	4618      	mov	r0, r3
 8006f90:	f003 fa8d 	bl	800a4ae <USB_ReadInterrupts>
 8006f94:	4603      	mov	r3, r0
 8006f96:	f003 0308 	and.w	r3, r3, #8
 8006f9a:	2b08      	cmp	r3, #8
 8006f9c:	d10a      	bne.n	8006fb4 <HAL_PCD_IRQHandler+0x66a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8006f9e:	6878      	ldr	r0, [r7, #4]
 8006fa0:	f005 fa1b 	bl	800c3da <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	695a      	ldr	r2, [r3, #20]
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	f002 0208 	and.w	r2, r2, #8
 8006fb2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	4618      	mov	r0, r3
 8006fba:	f003 fa78 	bl	800a4ae <USB_ReadInterrupts>
 8006fbe:	4603      	mov	r3, r0
 8006fc0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006fc4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006fc8:	d10f      	bne.n	8006fea <HAL_PCD_IRQHandler+0x6a0>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8006fca:	2300      	movs	r3, #0
 8006fcc:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8006fce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fd0:	b2db      	uxtb	r3, r3
 8006fd2:	4619      	mov	r1, r3
 8006fd4:	6878      	ldr	r0, [r7, #4]
 8006fd6:	f005 fa7d 	bl	800c4d4 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	695a      	ldr	r2, [r3, #20]
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8006fe8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	4618      	mov	r0, r3
 8006ff0:	f003 fa5d 	bl	800a4ae <USB_ReadInterrupts>
 8006ff4:	4603      	mov	r3, r0
 8006ff6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006ffa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006ffe:	d10f      	bne.n	8007020 <HAL_PCD_IRQHandler+0x6d6>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8007000:	2300      	movs	r3, #0
 8007002:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8007004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007006:	b2db      	uxtb	r3, r3
 8007008:	4619      	mov	r1, r3
 800700a:	6878      	ldr	r0, [r7, #4]
 800700c:	f005 fa50 	bl	800c4b0 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	695a      	ldr	r2, [r3, #20]
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800701e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	4618      	mov	r0, r3
 8007026:	f003 fa42 	bl	800a4ae <USB_ReadInterrupts>
 800702a:	4603      	mov	r3, r0
 800702c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007030:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007034:	d10a      	bne.n	800704c <HAL_PCD_IRQHandler+0x702>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8007036:	6878      	ldr	r0, [r7, #4]
 8007038:	f005 fa5e 	bl	800c4f8 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	695a      	ldr	r2, [r3, #20]
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800704a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	4618      	mov	r0, r3
 8007052:	f003 fa2c 	bl	800a4ae <USB_ReadInterrupts>
 8007056:	4603      	mov	r3, r0
 8007058:	f003 0304 	and.w	r3, r3, #4
 800705c:	2b04      	cmp	r3, #4
 800705e:	d115      	bne.n	800708c <HAL_PCD_IRQHandler+0x742>
    {
      temp = hpcd->Instance->GOTGINT;
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	685b      	ldr	r3, [r3, #4]
 8007066:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8007068:	69bb      	ldr	r3, [r7, #24]
 800706a:	f003 0304 	and.w	r3, r3, #4
 800706e:	2b00      	cmp	r3, #0
 8007070:	d002      	beq.n	8007078 <HAL_PCD_IRQHandler+0x72e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8007072:	6878      	ldr	r0, [r7, #4]
 8007074:	f005 fa4e 	bl	800c514 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	6859      	ldr	r1, [r3, #4]
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	69ba      	ldr	r2, [r7, #24]
 8007084:	430a      	orrs	r2, r1
 8007086:	605a      	str	r2, [r3, #4]
 8007088:	e000      	b.n	800708c <HAL_PCD_IRQHandler+0x742>
      return;
 800708a:	bf00      	nop
    }
  }
}
 800708c:	3734      	adds	r7, #52	; 0x34
 800708e:	46bd      	mov	sp, r7
 8007090:	bd90      	pop	{r4, r7, pc}

08007092 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8007092:	b580      	push	{r7, lr}
 8007094:	b082      	sub	sp, #8
 8007096:	af00      	add	r7, sp, #0
 8007098:	6078      	str	r0, [r7, #4]
 800709a:	460b      	mov	r3, r1
 800709c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80070a4:	2b01      	cmp	r3, #1
 80070a6:	d101      	bne.n	80070ac <HAL_PCD_SetAddress+0x1a>
 80070a8:	2302      	movs	r3, #2
 80070aa:	e013      	b.n	80070d4 <HAL_PCD_SetAddress+0x42>
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	2201      	movs	r2, #1
 80070b0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	78fa      	ldrb	r2, [r7, #3]
 80070b8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	78fa      	ldrb	r2, [r7, #3]
 80070c2:	4611      	mov	r1, r2
 80070c4:	4618      	mov	r0, r3
 80070c6:	f003 f98d 	bl	800a3e4 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	2200      	movs	r2, #0
 80070ce:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80070d2:	2300      	movs	r3, #0
}
 80070d4:	4618      	mov	r0, r3
 80070d6:	3708      	adds	r7, #8
 80070d8:	46bd      	mov	sp, r7
 80070da:	bd80      	pop	{r7, pc}

080070dc <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80070dc:	b580      	push	{r7, lr}
 80070de:	b084      	sub	sp, #16
 80070e0:	af00      	add	r7, sp, #0
 80070e2:	6078      	str	r0, [r7, #4]
 80070e4:	4608      	mov	r0, r1
 80070e6:	4611      	mov	r1, r2
 80070e8:	461a      	mov	r2, r3
 80070ea:	4603      	mov	r3, r0
 80070ec:	70fb      	strb	r3, [r7, #3]
 80070ee:	460b      	mov	r3, r1
 80070f0:	803b      	strh	r3, [r7, #0]
 80070f2:	4613      	mov	r3, r2
 80070f4:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80070f6:	2300      	movs	r3, #0
 80070f8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80070fa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80070fe:	2b00      	cmp	r3, #0
 8007100:	da0f      	bge.n	8007122 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007102:	78fb      	ldrb	r3, [r7, #3]
 8007104:	f003 020f 	and.w	r2, r3, #15
 8007108:	4613      	mov	r3, r2
 800710a:	00db      	lsls	r3, r3, #3
 800710c:	1a9b      	subs	r3, r3, r2
 800710e:	009b      	lsls	r3, r3, #2
 8007110:	3338      	adds	r3, #56	; 0x38
 8007112:	687a      	ldr	r2, [r7, #4]
 8007114:	4413      	add	r3, r2
 8007116:	3304      	adds	r3, #4
 8007118:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	2201      	movs	r2, #1
 800711e:	705a      	strb	r2, [r3, #1]
 8007120:	e00f      	b.n	8007142 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007122:	78fb      	ldrb	r3, [r7, #3]
 8007124:	f003 020f 	and.w	r2, r3, #15
 8007128:	4613      	mov	r3, r2
 800712a:	00db      	lsls	r3, r3, #3
 800712c:	1a9b      	subs	r3, r3, r2
 800712e:	009b      	lsls	r3, r3, #2
 8007130:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8007134:	687a      	ldr	r2, [r7, #4]
 8007136:	4413      	add	r3, r2
 8007138:	3304      	adds	r3, #4
 800713a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	2200      	movs	r2, #0
 8007140:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8007142:	78fb      	ldrb	r3, [r7, #3]
 8007144:	f003 030f 	and.w	r3, r3, #15
 8007148:	b2da      	uxtb	r2, r3
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800714e:	883a      	ldrh	r2, [r7, #0]
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	78ba      	ldrb	r2, [r7, #2]
 8007158:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	785b      	ldrb	r3, [r3, #1]
 800715e:	2b00      	cmp	r3, #0
 8007160:	d004      	beq.n	800716c <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	781b      	ldrb	r3, [r3, #0]
 8007166:	b29a      	uxth	r2, r3
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800716c:	78bb      	ldrb	r3, [r7, #2]
 800716e:	2b02      	cmp	r3, #2
 8007170:	d102      	bne.n	8007178 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	2200      	movs	r2, #0
 8007176:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800717e:	2b01      	cmp	r3, #1
 8007180:	d101      	bne.n	8007186 <HAL_PCD_EP_Open+0xaa>
 8007182:	2302      	movs	r3, #2
 8007184:	e00e      	b.n	80071a4 <HAL_PCD_EP_Open+0xc8>
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	2201      	movs	r2, #1
 800718a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	68f9      	ldr	r1, [r7, #12]
 8007194:	4618      	mov	r0, r3
 8007196:	f002 fac7 	bl	8009728 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	2200      	movs	r2, #0
 800719e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 80071a2:	7afb      	ldrb	r3, [r7, #11]
}
 80071a4:	4618      	mov	r0, r3
 80071a6:	3710      	adds	r7, #16
 80071a8:	46bd      	mov	sp, r7
 80071aa:	bd80      	pop	{r7, pc}

080071ac <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80071ac:	b580      	push	{r7, lr}
 80071ae:	b084      	sub	sp, #16
 80071b0:	af00      	add	r7, sp, #0
 80071b2:	6078      	str	r0, [r7, #4]
 80071b4:	460b      	mov	r3, r1
 80071b6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80071b8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80071bc:	2b00      	cmp	r3, #0
 80071be:	da0f      	bge.n	80071e0 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80071c0:	78fb      	ldrb	r3, [r7, #3]
 80071c2:	f003 020f 	and.w	r2, r3, #15
 80071c6:	4613      	mov	r3, r2
 80071c8:	00db      	lsls	r3, r3, #3
 80071ca:	1a9b      	subs	r3, r3, r2
 80071cc:	009b      	lsls	r3, r3, #2
 80071ce:	3338      	adds	r3, #56	; 0x38
 80071d0:	687a      	ldr	r2, [r7, #4]
 80071d2:	4413      	add	r3, r2
 80071d4:	3304      	adds	r3, #4
 80071d6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	2201      	movs	r2, #1
 80071dc:	705a      	strb	r2, [r3, #1]
 80071de:	e00f      	b.n	8007200 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80071e0:	78fb      	ldrb	r3, [r7, #3]
 80071e2:	f003 020f 	and.w	r2, r3, #15
 80071e6:	4613      	mov	r3, r2
 80071e8:	00db      	lsls	r3, r3, #3
 80071ea:	1a9b      	subs	r3, r3, r2
 80071ec:	009b      	lsls	r3, r3, #2
 80071ee:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80071f2:	687a      	ldr	r2, [r7, #4]
 80071f4:	4413      	add	r3, r2
 80071f6:	3304      	adds	r3, #4
 80071f8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	2200      	movs	r2, #0
 80071fe:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8007200:	78fb      	ldrb	r3, [r7, #3]
 8007202:	f003 030f 	and.w	r3, r3, #15
 8007206:	b2da      	uxtb	r2, r3
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8007212:	2b01      	cmp	r3, #1
 8007214:	d101      	bne.n	800721a <HAL_PCD_EP_Close+0x6e>
 8007216:	2302      	movs	r3, #2
 8007218:	e00e      	b.n	8007238 <HAL_PCD_EP_Close+0x8c>
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	2201      	movs	r2, #1
 800721e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	68f9      	ldr	r1, [r7, #12]
 8007228:	4618      	mov	r0, r3
 800722a:	f002 fb03 	bl	8009834 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	2200      	movs	r2, #0
 8007232:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8007236:	2300      	movs	r3, #0
}
 8007238:	4618      	mov	r0, r3
 800723a:	3710      	adds	r7, #16
 800723c:	46bd      	mov	sp, r7
 800723e:	bd80      	pop	{r7, pc}

08007240 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8007240:	b580      	push	{r7, lr}
 8007242:	b086      	sub	sp, #24
 8007244:	af00      	add	r7, sp, #0
 8007246:	60f8      	str	r0, [r7, #12]
 8007248:	607a      	str	r2, [r7, #4]
 800724a:	603b      	str	r3, [r7, #0]
 800724c:	460b      	mov	r3, r1
 800724e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007250:	7afb      	ldrb	r3, [r7, #11]
 8007252:	f003 020f 	and.w	r2, r3, #15
 8007256:	4613      	mov	r3, r2
 8007258:	00db      	lsls	r3, r3, #3
 800725a:	1a9b      	subs	r3, r3, r2
 800725c:	009b      	lsls	r3, r3, #2
 800725e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8007262:	68fa      	ldr	r2, [r7, #12]
 8007264:	4413      	add	r3, r2
 8007266:	3304      	adds	r3, #4
 8007268:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800726a:	697b      	ldr	r3, [r7, #20]
 800726c:	687a      	ldr	r2, [r7, #4]
 800726e:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8007270:	697b      	ldr	r3, [r7, #20]
 8007272:	683a      	ldr	r2, [r7, #0]
 8007274:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8007276:	697b      	ldr	r3, [r7, #20]
 8007278:	2200      	movs	r2, #0
 800727a:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 800727c:	697b      	ldr	r3, [r7, #20]
 800727e:	2200      	movs	r2, #0
 8007280:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007282:	7afb      	ldrb	r3, [r7, #11]
 8007284:	f003 030f 	and.w	r3, r3, #15
 8007288:	b2da      	uxtb	r2, r3
 800728a:	697b      	ldr	r3, [r7, #20]
 800728c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	691b      	ldr	r3, [r3, #16]
 8007292:	2b01      	cmp	r3, #1
 8007294:	d102      	bne.n	800729c <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8007296:	687a      	ldr	r2, [r7, #4]
 8007298:	697b      	ldr	r3, [r7, #20]
 800729a:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800729c:	7afb      	ldrb	r3, [r7, #11]
 800729e:	f003 030f 	and.w	r3, r3, #15
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d109      	bne.n	80072ba <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	6818      	ldr	r0, [r3, #0]
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	691b      	ldr	r3, [r3, #16]
 80072ae:	b2db      	uxtb	r3, r3
 80072b0:	461a      	mov	r2, r3
 80072b2:	6979      	ldr	r1, [r7, #20]
 80072b4:	f002 fdde 	bl	8009e74 <USB_EP0StartXfer>
 80072b8:	e008      	b.n	80072cc <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	6818      	ldr	r0, [r3, #0]
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	691b      	ldr	r3, [r3, #16]
 80072c2:	b2db      	uxtb	r3, r3
 80072c4:	461a      	mov	r2, r3
 80072c6:	6979      	ldr	r1, [r7, #20]
 80072c8:	f002 fb90 	bl	80099ec <USB_EPStartXfer>
  }

  return HAL_OK;
 80072cc:	2300      	movs	r3, #0
}
 80072ce:	4618      	mov	r0, r3
 80072d0:	3718      	adds	r7, #24
 80072d2:	46bd      	mov	sp, r7
 80072d4:	bd80      	pop	{r7, pc}

080072d6 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80072d6:	b480      	push	{r7}
 80072d8:	b083      	sub	sp, #12
 80072da:	af00      	add	r7, sp, #0
 80072dc:	6078      	str	r0, [r7, #4]
 80072de:	460b      	mov	r3, r1
 80072e0:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80072e2:	78fb      	ldrb	r3, [r7, #3]
 80072e4:	f003 020f 	and.w	r2, r3, #15
 80072e8:	6879      	ldr	r1, [r7, #4]
 80072ea:	4613      	mov	r3, r2
 80072ec:	00db      	lsls	r3, r3, #3
 80072ee:	1a9b      	subs	r3, r3, r2
 80072f0:	009b      	lsls	r3, r3, #2
 80072f2:	440b      	add	r3, r1
 80072f4:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80072f8:	681b      	ldr	r3, [r3, #0]
}
 80072fa:	4618      	mov	r0, r3
 80072fc:	370c      	adds	r7, #12
 80072fe:	46bd      	mov	sp, r7
 8007300:	bc80      	pop	{r7}
 8007302:	4770      	bx	lr

08007304 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8007304:	b580      	push	{r7, lr}
 8007306:	b086      	sub	sp, #24
 8007308:	af00      	add	r7, sp, #0
 800730a:	60f8      	str	r0, [r7, #12]
 800730c:	607a      	str	r2, [r7, #4]
 800730e:	603b      	str	r3, [r7, #0]
 8007310:	460b      	mov	r3, r1
 8007312:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007314:	7afb      	ldrb	r3, [r7, #11]
 8007316:	f003 020f 	and.w	r2, r3, #15
 800731a:	4613      	mov	r3, r2
 800731c:	00db      	lsls	r3, r3, #3
 800731e:	1a9b      	subs	r3, r3, r2
 8007320:	009b      	lsls	r3, r3, #2
 8007322:	3338      	adds	r3, #56	; 0x38
 8007324:	68fa      	ldr	r2, [r7, #12]
 8007326:	4413      	add	r3, r2
 8007328:	3304      	adds	r3, #4
 800732a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800732c:	697b      	ldr	r3, [r7, #20]
 800732e:	687a      	ldr	r2, [r7, #4]
 8007330:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8007332:	697b      	ldr	r3, [r7, #20]
 8007334:	683a      	ldr	r2, [r7, #0]
 8007336:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8007338:	697b      	ldr	r3, [r7, #20]
 800733a:	2200      	movs	r2, #0
 800733c:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 800733e:	697b      	ldr	r3, [r7, #20]
 8007340:	2201      	movs	r2, #1
 8007342:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007344:	7afb      	ldrb	r3, [r7, #11]
 8007346:	f003 030f 	and.w	r3, r3, #15
 800734a:	b2da      	uxtb	r2, r3
 800734c:	697b      	ldr	r3, [r7, #20]
 800734e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	691b      	ldr	r3, [r3, #16]
 8007354:	2b01      	cmp	r3, #1
 8007356:	d102      	bne.n	800735e <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8007358:	687a      	ldr	r2, [r7, #4]
 800735a:	697b      	ldr	r3, [r7, #20]
 800735c:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800735e:	7afb      	ldrb	r3, [r7, #11]
 8007360:	f003 030f 	and.w	r3, r3, #15
 8007364:	2b00      	cmp	r3, #0
 8007366:	d109      	bne.n	800737c <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	6818      	ldr	r0, [r3, #0]
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	691b      	ldr	r3, [r3, #16]
 8007370:	b2db      	uxtb	r3, r3
 8007372:	461a      	mov	r2, r3
 8007374:	6979      	ldr	r1, [r7, #20]
 8007376:	f002 fd7d 	bl	8009e74 <USB_EP0StartXfer>
 800737a:	e008      	b.n	800738e <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	6818      	ldr	r0, [r3, #0]
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	691b      	ldr	r3, [r3, #16]
 8007384:	b2db      	uxtb	r3, r3
 8007386:	461a      	mov	r2, r3
 8007388:	6979      	ldr	r1, [r7, #20]
 800738a:	f002 fb2f 	bl	80099ec <USB_EPStartXfer>
  }

  return HAL_OK;
 800738e:	2300      	movs	r3, #0
}
 8007390:	4618      	mov	r0, r3
 8007392:	3718      	adds	r7, #24
 8007394:	46bd      	mov	sp, r7
 8007396:	bd80      	pop	{r7, pc}

08007398 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007398:	b580      	push	{r7, lr}
 800739a:	b084      	sub	sp, #16
 800739c:	af00      	add	r7, sp, #0
 800739e:	6078      	str	r0, [r7, #4]
 80073a0:	460b      	mov	r3, r1
 80073a2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80073a4:	78fb      	ldrb	r3, [r7, #3]
 80073a6:	f003 020f 	and.w	r2, r3, #15
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	685b      	ldr	r3, [r3, #4]
 80073ae:	429a      	cmp	r2, r3
 80073b0:	d901      	bls.n	80073b6 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80073b2:	2301      	movs	r3, #1
 80073b4:	e050      	b.n	8007458 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80073b6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	da0f      	bge.n	80073de <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80073be:	78fb      	ldrb	r3, [r7, #3]
 80073c0:	f003 020f 	and.w	r2, r3, #15
 80073c4:	4613      	mov	r3, r2
 80073c6:	00db      	lsls	r3, r3, #3
 80073c8:	1a9b      	subs	r3, r3, r2
 80073ca:	009b      	lsls	r3, r3, #2
 80073cc:	3338      	adds	r3, #56	; 0x38
 80073ce:	687a      	ldr	r2, [r7, #4]
 80073d0:	4413      	add	r3, r2
 80073d2:	3304      	adds	r3, #4
 80073d4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	2201      	movs	r2, #1
 80073da:	705a      	strb	r2, [r3, #1]
 80073dc:	e00d      	b.n	80073fa <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80073de:	78fa      	ldrb	r2, [r7, #3]
 80073e0:	4613      	mov	r3, r2
 80073e2:	00db      	lsls	r3, r3, #3
 80073e4:	1a9b      	subs	r3, r3, r2
 80073e6:	009b      	lsls	r3, r3, #2
 80073e8:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80073ec:	687a      	ldr	r2, [r7, #4]
 80073ee:	4413      	add	r3, r2
 80073f0:	3304      	adds	r3, #4
 80073f2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	2200      	movs	r2, #0
 80073f8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	2201      	movs	r2, #1
 80073fe:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007400:	78fb      	ldrb	r3, [r7, #3]
 8007402:	f003 030f 	and.w	r3, r3, #15
 8007406:	b2da      	uxtb	r2, r3
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8007412:	2b01      	cmp	r3, #1
 8007414:	d101      	bne.n	800741a <HAL_PCD_EP_SetStall+0x82>
 8007416:	2302      	movs	r3, #2
 8007418:	e01e      	b.n	8007458 <HAL_PCD_EP_SetStall+0xc0>
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	2201      	movs	r2, #1
 800741e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	68f9      	ldr	r1, [r7, #12]
 8007428:	4618      	mov	r0, r3
 800742a:	f002 ff09 	bl	800a240 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800742e:	78fb      	ldrb	r3, [r7, #3]
 8007430:	f003 030f 	and.w	r3, r3, #15
 8007434:	2b00      	cmp	r3, #0
 8007436:	d10a      	bne.n	800744e <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	6818      	ldr	r0, [r3, #0]
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	691b      	ldr	r3, [r3, #16]
 8007440:	b2d9      	uxtb	r1, r3
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8007448:	461a      	mov	r2, r3
 800744a:	f003 f8ed 	bl	800a628 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	2200      	movs	r2, #0
 8007452:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8007456:	2300      	movs	r3, #0
}
 8007458:	4618      	mov	r0, r3
 800745a:	3710      	adds	r7, #16
 800745c:	46bd      	mov	sp, r7
 800745e:	bd80      	pop	{r7, pc}

08007460 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007460:	b580      	push	{r7, lr}
 8007462:	b084      	sub	sp, #16
 8007464:	af00      	add	r7, sp, #0
 8007466:	6078      	str	r0, [r7, #4]
 8007468:	460b      	mov	r3, r1
 800746a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800746c:	78fb      	ldrb	r3, [r7, #3]
 800746e:	f003 020f 	and.w	r2, r3, #15
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	685b      	ldr	r3, [r3, #4]
 8007476:	429a      	cmp	r2, r3
 8007478:	d901      	bls.n	800747e <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800747a:	2301      	movs	r3, #1
 800747c:	e042      	b.n	8007504 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800747e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007482:	2b00      	cmp	r3, #0
 8007484:	da0f      	bge.n	80074a6 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007486:	78fb      	ldrb	r3, [r7, #3]
 8007488:	f003 020f 	and.w	r2, r3, #15
 800748c:	4613      	mov	r3, r2
 800748e:	00db      	lsls	r3, r3, #3
 8007490:	1a9b      	subs	r3, r3, r2
 8007492:	009b      	lsls	r3, r3, #2
 8007494:	3338      	adds	r3, #56	; 0x38
 8007496:	687a      	ldr	r2, [r7, #4]
 8007498:	4413      	add	r3, r2
 800749a:	3304      	adds	r3, #4
 800749c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	2201      	movs	r2, #1
 80074a2:	705a      	strb	r2, [r3, #1]
 80074a4:	e00f      	b.n	80074c6 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80074a6:	78fb      	ldrb	r3, [r7, #3]
 80074a8:	f003 020f 	and.w	r2, r3, #15
 80074ac:	4613      	mov	r3, r2
 80074ae:	00db      	lsls	r3, r3, #3
 80074b0:	1a9b      	subs	r3, r3, r2
 80074b2:	009b      	lsls	r3, r3, #2
 80074b4:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80074b8:	687a      	ldr	r2, [r7, #4]
 80074ba:	4413      	add	r3, r2
 80074bc:	3304      	adds	r3, #4
 80074be:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	2200      	movs	r2, #0
 80074c4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	2200      	movs	r2, #0
 80074ca:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80074cc:	78fb      	ldrb	r3, [r7, #3]
 80074ce:	f003 030f 	and.w	r3, r3, #15
 80074d2:	b2da      	uxtb	r2, r3
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80074de:	2b01      	cmp	r3, #1
 80074e0:	d101      	bne.n	80074e6 <HAL_PCD_EP_ClrStall+0x86>
 80074e2:	2302      	movs	r3, #2
 80074e4:	e00e      	b.n	8007504 <HAL_PCD_EP_ClrStall+0xa4>
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	2201      	movs	r2, #1
 80074ea:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	68f9      	ldr	r1, [r7, #12]
 80074f4:	4618      	mov	r0, r3
 80074f6:	f002 ff10 	bl	800a31a <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	2200      	movs	r2, #0
 80074fe:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8007502:	2300      	movs	r3, #0
}
 8007504:	4618      	mov	r0, r3
 8007506:	3710      	adds	r7, #16
 8007508:	46bd      	mov	sp, r7
 800750a:	bd80      	pop	{r7, pc}

0800750c <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800750c:	b580      	push	{r7, lr}
 800750e:	b08a      	sub	sp, #40	; 0x28
 8007510:	af02      	add	r7, sp, #8
 8007512:	6078      	str	r0, [r7, #4]
 8007514:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800751c:	697b      	ldr	r3, [r7, #20]
 800751e:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8007520:	683a      	ldr	r2, [r7, #0]
 8007522:	4613      	mov	r3, r2
 8007524:	00db      	lsls	r3, r3, #3
 8007526:	1a9b      	subs	r3, r3, r2
 8007528:	009b      	lsls	r3, r3, #2
 800752a:	3338      	adds	r3, #56	; 0x38
 800752c:	687a      	ldr	r2, [r7, #4]
 800752e:	4413      	add	r3, r2
 8007530:	3304      	adds	r3, #4
 8007532:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	699a      	ldr	r2, [r3, #24]
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	695b      	ldr	r3, [r3, #20]
 800753c:	429a      	cmp	r2, r3
 800753e:	d901      	bls.n	8007544 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8007540:	2301      	movs	r3, #1
 8007542:	e06c      	b.n	800761e <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	695a      	ldr	r2, [r3, #20]
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	699b      	ldr	r3, [r3, #24]
 800754c:	1ad3      	subs	r3, r2, r3
 800754e:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	689b      	ldr	r3, [r3, #8]
 8007554:	69fa      	ldr	r2, [r7, #28]
 8007556:	429a      	cmp	r2, r3
 8007558:	d902      	bls.n	8007560 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	689b      	ldr	r3, [r3, #8]
 800755e:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8007560:	69fb      	ldr	r3, [r7, #28]
 8007562:	3303      	adds	r3, #3
 8007564:	089b      	lsrs	r3, r3, #2
 8007566:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8007568:	e02b      	b.n	80075c2 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	695a      	ldr	r2, [r3, #20]
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	699b      	ldr	r3, [r3, #24]
 8007572:	1ad3      	subs	r3, r2, r3
 8007574:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	689b      	ldr	r3, [r3, #8]
 800757a:	69fa      	ldr	r2, [r7, #28]
 800757c:	429a      	cmp	r2, r3
 800757e:	d902      	bls.n	8007586 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	689b      	ldr	r3, [r3, #8]
 8007584:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8007586:	69fb      	ldr	r3, [r7, #28]
 8007588:	3303      	adds	r3, #3
 800758a:	089b      	lsrs	r3, r3, #2
 800758c:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	68d9      	ldr	r1, [r3, #12]
 8007592:	683b      	ldr	r3, [r7, #0]
 8007594:	b2da      	uxtb	r2, r3
 8007596:	69fb      	ldr	r3, [r7, #28]
 8007598:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800759e:	b2db      	uxtb	r3, r3
 80075a0:	9300      	str	r3, [sp, #0]
 80075a2:	4603      	mov	r3, r0
 80075a4:	6978      	ldr	r0, [r7, #20]
 80075a6:	f002 fdb7 	bl	800a118 <USB_WritePacket>

    ep->xfer_buff  += len;
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	68da      	ldr	r2, [r3, #12]
 80075ae:	69fb      	ldr	r3, [r7, #28]
 80075b0:	441a      	add	r2, r3
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	699a      	ldr	r2, [r3, #24]
 80075ba:	69fb      	ldr	r3, [r7, #28]
 80075bc:	441a      	add	r2, r3
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80075c2:	683b      	ldr	r3, [r7, #0]
 80075c4:	015a      	lsls	r2, r3, #5
 80075c6:	693b      	ldr	r3, [r7, #16]
 80075c8:	4413      	add	r3, r2
 80075ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80075ce:	699b      	ldr	r3, [r3, #24]
 80075d0:	b29b      	uxth	r3, r3
 80075d2:	69ba      	ldr	r2, [r7, #24]
 80075d4:	429a      	cmp	r2, r3
 80075d6:	d809      	bhi.n	80075ec <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	699a      	ldr	r2, [r3, #24]
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80075e0:	429a      	cmp	r2, r3
 80075e2:	d203      	bcs.n	80075ec <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	695b      	ldr	r3, [r3, #20]
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d1be      	bne.n	800756a <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	695a      	ldr	r2, [r3, #20]
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	699b      	ldr	r3, [r3, #24]
 80075f4:	429a      	cmp	r2, r3
 80075f6:	d811      	bhi.n	800761c <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80075f8:	683b      	ldr	r3, [r7, #0]
 80075fa:	f003 030f 	and.w	r3, r3, #15
 80075fe:	2201      	movs	r2, #1
 8007600:	fa02 f303 	lsl.w	r3, r2, r3
 8007604:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8007606:	693b      	ldr	r3, [r7, #16]
 8007608:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800760c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800760e:	68bb      	ldr	r3, [r7, #8]
 8007610:	43db      	mvns	r3, r3
 8007612:	6939      	ldr	r1, [r7, #16]
 8007614:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007618:	4013      	ands	r3, r2
 800761a:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800761c:	2300      	movs	r3, #0
}
 800761e:	4618      	mov	r0, r3
 8007620:	3720      	adds	r7, #32
 8007622:	46bd      	mov	sp, r7
 8007624:	bd80      	pop	{r7, pc}
	...

08007628 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8007628:	b580      	push	{r7, lr}
 800762a:	b086      	sub	sp, #24
 800762c:	af00      	add	r7, sp, #0
 800762e:	6078      	str	r0, [r7, #4]
 8007630:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007638:	697b      	ldr	r3, [r7, #20]
 800763a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800763c:	697b      	ldr	r3, [r7, #20]
 800763e:	333c      	adds	r3, #60	; 0x3c
 8007640:	3304      	adds	r3, #4
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8007646:	683b      	ldr	r3, [r7, #0]
 8007648:	015a      	lsls	r2, r3, #5
 800764a:	693b      	ldr	r3, [r7, #16]
 800764c:	4413      	add	r3, r2
 800764e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007652:	689b      	ldr	r3, [r3, #8]
 8007654:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	691b      	ldr	r3, [r3, #16]
 800765a:	2b01      	cmp	r3, #1
 800765c:	f040 80a0 	bne.w	80077a0 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8007660:	68bb      	ldr	r3, [r7, #8]
 8007662:	f003 0308 	and.w	r3, r3, #8
 8007666:	2b00      	cmp	r3, #0
 8007668:	d015      	beq.n	8007696 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	4a72      	ldr	r2, [pc, #456]	; (8007838 <PCD_EP_OutXfrComplete_int+0x210>)
 800766e:	4293      	cmp	r3, r2
 8007670:	f240 80dd 	bls.w	800782e <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8007674:	68bb      	ldr	r3, [r7, #8]
 8007676:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800767a:	2b00      	cmp	r3, #0
 800767c:	f000 80d7 	beq.w	800782e <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007680:	683b      	ldr	r3, [r7, #0]
 8007682:	015a      	lsls	r2, r3, #5
 8007684:	693b      	ldr	r3, [r7, #16]
 8007686:	4413      	add	r3, r2
 8007688:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800768c:	461a      	mov	r2, r3
 800768e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007692:	6093      	str	r3, [r2, #8]
 8007694:	e0cb      	b.n	800782e <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8007696:	68bb      	ldr	r3, [r7, #8]
 8007698:	f003 0320 	and.w	r3, r3, #32
 800769c:	2b00      	cmp	r3, #0
 800769e:	d009      	beq.n	80076b4 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80076a0:	683b      	ldr	r3, [r7, #0]
 80076a2:	015a      	lsls	r2, r3, #5
 80076a4:	693b      	ldr	r3, [r7, #16]
 80076a6:	4413      	add	r3, r2
 80076a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80076ac:	461a      	mov	r2, r3
 80076ae:	2320      	movs	r3, #32
 80076b0:	6093      	str	r3, [r2, #8]
 80076b2:	e0bc      	b.n	800782e <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80076b4:	68bb      	ldr	r3, [r7, #8]
 80076b6:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	f040 80b7 	bne.w	800782e <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	4a5d      	ldr	r2, [pc, #372]	; (8007838 <PCD_EP_OutXfrComplete_int+0x210>)
 80076c4:	4293      	cmp	r3, r2
 80076c6:	d90f      	bls.n	80076e8 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80076c8:	68bb      	ldr	r3, [r7, #8]
 80076ca:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d00a      	beq.n	80076e8 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80076d2:	683b      	ldr	r3, [r7, #0]
 80076d4:	015a      	lsls	r2, r3, #5
 80076d6:	693b      	ldr	r3, [r7, #16]
 80076d8:	4413      	add	r3, r2
 80076da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80076de:	461a      	mov	r2, r3
 80076e0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80076e4:	6093      	str	r3, [r2, #8]
 80076e6:	e0a2      	b.n	800782e <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 80076e8:	6879      	ldr	r1, [r7, #4]
 80076ea:	683a      	ldr	r2, [r7, #0]
 80076ec:	4613      	mov	r3, r2
 80076ee:	00db      	lsls	r3, r3, #3
 80076f0:	1a9b      	subs	r3, r3, r2
 80076f2:	009b      	lsls	r3, r3, #2
 80076f4:	440b      	add	r3, r1
 80076f6:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80076fa:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80076fc:	683b      	ldr	r3, [r7, #0]
 80076fe:	0159      	lsls	r1, r3, #5
 8007700:	693b      	ldr	r3, [r7, #16]
 8007702:	440b      	add	r3, r1
 8007704:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007708:	691b      	ldr	r3, [r3, #16]
 800770a:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 800770e:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8007710:	6878      	ldr	r0, [r7, #4]
 8007712:	683a      	ldr	r2, [r7, #0]
 8007714:	4613      	mov	r3, r2
 8007716:	00db      	lsls	r3, r3, #3
 8007718:	1a9b      	subs	r3, r3, r2
 800771a:	009b      	lsls	r3, r3, #2
 800771c:	4403      	add	r3, r0
 800771e:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8007722:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8007724:	6879      	ldr	r1, [r7, #4]
 8007726:	683a      	ldr	r2, [r7, #0]
 8007728:	4613      	mov	r3, r2
 800772a:	00db      	lsls	r3, r3, #3
 800772c:	1a9b      	subs	r3, r3, r2
 800772e:	009b      	lsls	r3, r3, #2
 8007730:	440b      	add	r3, r1
 8007732:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8007736:	6819      	ldr	r1, [r3, #0]
 8007738:	6878      	ldr	r0, [r7, #4]
 800773a:	683a      	ldr	r2, [r7, #0]
 800773c:	4613      	mov	r3, r2
 800773e:	00db      	lsls	r3, r3, #3
 8007740:	1a9b      	subs	r3, r3, r2
 8007742:	009b      	lsls	r3, r3, #2
 8007744:	4403      	add	r3, r0
 8007746:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	4419      	add	r1, r3
 800774e:	6878      	ldr	r0, [r7, #4]
 8007750:	683a      	ldr	r2, [r7, #0]
 8007752:	4613      	mov	r3, r2
 8007754:	00db      	lsls	r3, r3, #3
 8007756:	1a9b      	subs	r3, r3, r2
 8007758:	009b      	lsls	r3, r3, #2
 800775a:	4403      	add	r3, r0
 800775c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8007760:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8007762:	683b      	ldr	r3, [r7, #0]
 8007764:	2b00      	cmp	r3, #0
 8007766:	d114      	bne.n	8007792 <PCD_EP_OutXfrComplete_int+0x16a>
 8007768:	6879      	ldr	r1, [r7, #4]
 800776a:	683a      	ldr	r2, [r7, #0]
 800776c:	4613      	mov	r3, r2
 800776e:	00db      	lsls	r3, r3, #3
 8007770:	1a9b      	subs	r3, r3, r2
 8007772:	009b      	lsls	r3, r3, #2
 8007774:	440b      	add	r3, r1
 8007776:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	2b00      	cmp	r3, #0
 800777e:	d108      	bne.n	8007792 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	6818      	ldr	r0, [r3, #0]
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800778a:	461a      	mov	r2, r3
 800778c:	2101      	movs	r1, #1
 800778e:	f002 ff4b 	bl	800a628 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8007792:	683b      	ldr	r3, [r7, #0]
 8007794:	b2db      	uxtb	r3, r3
 8007796:	4619      	mov	r1, r3
 8007798:	6878      	ldr	r0, [r7, #4]
 800779a:	f004 fde9 	bl	800c370 <HAL_PCD_DataOutStageCallback>
 800779e:	e046      	b.n	800782e <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	4a26      	ldr	r2, [pc, #152]	; (800783c <PCD_EP_OutXfrComplete_int+0x214>)
 80077a4:	4293      	cmp	r3, r2
 80077a6:	d124      	bne.n	80077f2 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80077a8:	68bb      	ldr	r3, [r7, #8]
 80077aa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d00a      	beq.n	80077c8 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80077b2:	683b      	ldr	r3, [r7, #0]
 80077b4:	015a      	lsls	r2, r3, #5
 80077b6:	693b      	ldr	r3, [r7, #16]
 80077b8:	4413      	add	r3, r2
 80077ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80077be:	461a      	mov	r2, r3
 80077c0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80077c4:	6093      	str	r3, [r2, #8]
 80077c6:	e032      	b.n	800782e <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80077c8:	68bb      	ldr	r3, [r7, #8]
 80077ca:	f003 0320 	and.w	r3, r3, #32
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d008      	beq.n	80077e4 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80077d2:	683b      	ldr	r3, [r7, #0]
 80077d4:	015a      	lsls	r2, r3, #5
 80077d6:	693b      	ldr	r3, [r7, #16]
 80077d8:	4413      	add	r3, r2
 80077da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80077de:	461a      	mov	r2, r3
 80077e0:	2320      	movs	r3, #32
 80077e2:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80077e4:	683b      	ldr	r3, [r7, #0]
 80077e6:	b2db      	uxtb	r3, r3
 80077e8:	4619      	mov	r1, r3
 80077ea:	6878      	ldr	r0, [r7, #4]
 80077ec:	f004 fdc0 	bl	800c370 <HAL_PCD_DataOutStageCallback>
 80077f0:	e01d      	b.n	800782e <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80077f2:	683b      	ldr	r3, [r7, #0]
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d114      	bne.n	8007822 <PCD_EP_OutXfrComplete_int+0x1fa>
 80077f8:	6879      	ldr	r1, [r7, #4]
 80077fa:	683a      	ldr	r2, [r7, #0]
 80077fc:	4613      	mov	r3, r2
 80077fe:	00db      	lsls	r3, r3, #3
 8007800:	1a9b      	subs	r3, r3, r2
 8007802:	009b      	lsls	r3, r3, #2
 8007804:	440b      	add	r3, r1
 8007806:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	2b00      	cmp	r3, #0
 800780e:	d108      	bne.n	8007822 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	6818      	ldr	r0, [r3, #0]
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800781a:	461a      	mov	r2, r3
 800781c:	2100      	movs	r1, #0
 800781e:	f002 ff03 	bl	800a628 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8007822:	683b      	ldr	r3, [r7, #0]
 8007824:	b2db      	uxtb	r3, r3
 8007826:	4619      	mov	r1, r3
 8007828:	6878      	ldr	r0, [r7, #4]
 800782a:	f004 fda1 	bl	800c370 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800782e:	2300      	movs	r3, #0
}
 8007830:	4618      	mov	r0, r3
 8007832:	3718      	adds	r7, #24
 8007834:	46bd      	mov	sp, r7
 8007836:	bd80      	pop	{r7, pc}
 8007838:	4f54300a 	.word	0x4f54300a
 800783c:	4f54310a 	.word	0x4f54310a

08007840 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8007840:	b580      	push	{r7, lr}
 8007842:	b086      	sub	sp, #24
 8007844:	af00      	add	r7, sp, #0
 8007846:	6078      	str	r0, [r7, #4]
 8007848:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007850:	697b      	ldr	r3, [r7, #20]
 8007852:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8007854:	697b      	ldr	r3, [r7, #20]
 8007856:	333c      	adds	r3, #60	; 0x3c
 8007858:	3304      	adds	r3, #4
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800785e:	683b      	ldr	r3, [r7, #0]
 8007860:	015a      	lsls	r2, r3, #5
 8007862:	693b      	ldr	r3, [r7, #16]
 8007864:	4413      	add	r3, r2
 8007866:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800786a:	689b      	ldr	r3, [r3, #8]
 800786c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	4a15      	ldr	r2, [pc, #84]	; (80078c8 <PCD_EP_OutSetupPacket_int+0x88>)
 8007872:	4293      	cmp	r3, r2
 8007874:	d90e      	bls.n	8007894 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8007876:	68bb      	ldr	r3, [r7, #8]
 8007878:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800787c:	2b00      	cmp	r3, #0
 800787e:	d009      	beq.n	8007894 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007880:	683b      	ldr	r3, [r7, #0]
 8007882:	015a      	lsls	r2, r3, #5
 8007884:	693b      	ldr	r3, [r7, #16]
 8007886:	4413      	add	r3, r2
 8007888:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800788c:	461a      	mov	r2, r3
 800788e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007892:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8007894:	6878      	ldr	r0, [r7, #4]
 8007896:	f004 fd59 	bl	800c34c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	4a0a      	ldr	r2, [pc, #40]	; (80078c8 <PCD_EP_OutSetupPacket_int+0x88>)
 800789e:	4293      	cmp	r3, r2
 80078a0:	d90c      	bls.n	80078bc <PCD_EP_OutSetupPacket_int+0x7c>
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	691b      	ldr	r3, [r3, #16]
 80078a6:	2b01      	cmp	r3, #1
 80078a8:	d108      	bne.n	80078bc <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	6818      	ldr	r0, [r3, #0]
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80078b4:	461a      	mov	r2, r3
 80078b6:	2101      	movs	r1, #1
 80078b8:	f002 feb6 	bl	800a628 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80078bc:	2300      	movs	r3, #0
}
 80078be:	4618      	mov	r0, r3
 80078c0:	3718      	adds	r7, #24
 80078c2:	46bd      	mov	sp, r7
 80078c4:	bd80      	pop	{r7, pc}
 80078c6:	bf00      	nop
 80078c8:	4f54300a 	.word	0x4f54300a

080078cc <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80078cc:	b480      	push	{r7}
 80078ce:	b085      	sub	sp, #20
 80078d0:	af00      	add	r7, sp, #0
 80078d2:	6078      	str	r0, [r7, #4]
 80078d4:	460b      	mov	r3, r1
 80078d6:	70fb      	strb	r3, [r7, #3]
 80078d8:	4613      	mov	r3, r2
 80078da:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078e2:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80078e4:	78fb      	ldrb	r3, [r7, #3]
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d107      	bne.n	80078fa <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80078ea:	883b      	ldrh	r3, [r7, #0]
 80078ec:	0419      	lsls	r1, r3, #16
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	68ba      	ldr	r2, [r7, #8]
 80078f4:	430a      	orrs	r2, r1
 80078f6:	629a      	str	r2, [r3, #40]	; 0x28
 80078f8:	e028      	b.n	800794c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007900:	0c1b      	lsrs	r3, r3, #16
 8007902:	68ba      	ldr	r2, [r7, #8]
 8007904:	4413      	add	r3, r2
 8007906:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8007908:	2300      	movs	r3, #0
 800790a:	73fb      	strb	r3, [r7, #15]
 800790c:	e00d      	b.n	800792a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	681a      	ldr	r2, [r3, #0]
 8007912:	7bfb      	ldrb	r3, [r7, #15]
 8007914:	3340      	adds	r3, #64	; 0x40
 8007916:	009b      	lsls	r3, r3, #2
 8007918:	4413      	add	r3, r2
 800791a:	685b      	ldr	r3, [r3, #4]
 800791c:	0c1b      	lsrs	r3, r3, #16
 800791e:	68ba      	ldr	r2, [r7, #8]
 8007920:	4413      	add	r3, r2
 8007922:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8007924:	7bfb      	ldrb	r3, [r7, #15]
 8007926:	3301      	adds	r3, #1
 8007928:	73fb      	strb	r3, [r7, #15]
 800792a:	7bfa      	ldrb	r2, [r7, #15]
 800792c:	78fb      	ldrb	r3, [r7, #3]
 800792e:	3b01      	subs	r3, #1
 8007930:	429a      	cmp	r2, r3
 8007932:	d3ec      	bcc.n	800790e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8007934:	883b      	ldrh	r3, [r7, #0]
 8007936:	0418      	lsls	r0, r3, #16
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	6819      	ldr	r1, [r3, #0]
 800793c:	78fb      	ldrb	r3, [r7, #3]
 800793e:	3b01      	subs	r3, #1
 8007940:	68ba      	ldr	r2, [r7, #8]
 8007942:	4302      	orrs	r2, r0
 8007944:	3340      	adds	r3, #64	; 0x40
 8007946:	009b      	lsls	r3, r3, #2
 8007948:	440b      	add	r3, r1
 800794a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800794c:	2300      	movs	r3, #0
}
 800794e:	4618      	mov	r0, r3
 8007950:	3714      	adds	r7, #20
 8007952:	46bd      	mov	sp, r7
 8007954:	bc80      	pop	{r7}
 8007956:	4770      	bx	lr

08007958 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8007958:	b480      	push	{r7}
 800795a:	b083      	sub	sp, #12
 800795c:	af00      	add	r7, sp, #0
 800795e:	6078      	str	r0, [r7, #4]
 8007960:	460b      	mov	r3, r1
 8007962:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	887a      	ldrh	r2, [r7, #2]
 800796a:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800796c:	2300      	movs	r3, #0
}
 800796e:	4618      	mov	r0, r3
 8007970:	370c      	adds	r7, #12
 8007972:	46bd      	mov	sp, r7
 8007974:	bc80      	pop	{r7}
 8007976:	4770      	bx	lr

08007978 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007978:	b580      	push	{r7, lr}
 800797a:	b08a      	sub	sp, #40	; 0x28
 800797c:	af00      	add	r7, sp, #0
 800797e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	2b00      	cmp	r3, #0
 8007984:	d101      	bne.n	800798a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007986:	2301      	movs	r3, #1
 8007988:	e237      	b.n	8007dfa <HAL_RCC_OscConfig+0x482>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	f003 0301 	and.w	r3, r3, #1
 8007992:	2b00      	cmp	r3, #0
 8007994:	d050      	beq.n	8007a38 <HAL_RCC_OscConfig+0xc0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007996:	4ba3      	ldr	r3, [pc, #652]	; (8007c24 <HAL_RCC_OscConfig+0x2ac>)
 8007998:	689b      	ldr	r3, [r3, #8]
 800799a:	f003 030c 	and.w	r3, r3, #12
 800799e:	2b04      	cmp	r3, #4
 80079a0:	d00c      	beq.n	80079bc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80079a2:	4ba0      	ldr	r3, [pc, #640]	; (8007c24 <HAL_RCC_OscConfig+0x2ac>)
 80079a4:	689b      	ldr	r3, [r3, #8]
 80079a6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80079aa:	2b08      	cmp	r3, #8
 80079ac:	d112      	bne.n	80079d4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80079ae:	4b9d      	ldr	r3, [pc, #628]	; (8007c24 <HAL_RCC_OscConfig+0x2ac>)
 80079b0:	685b      	ldr	r3, [r3, #4]
 80079b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80079b6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80079ba:	d10b      	bne.n	80079d4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80079bc:	4b99      	ldr	r3, [pc, #612]	; (8007c24 <HAL_RCC_OscConfig+0x2ac>)
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d036      	beq.n	8007a36 <HAL_RCC_OscConfig+0xbe>
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	685b      	ldr	r3, [r3, #4]
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d132      	bne.n	8007a36 <HAL_RCC_OscConfig+0xbe>
      {
        return HAL_ERROR;
 80079d0:	2301      	movs	r3, #1
 80079d2:	e212      	b.n	8007dfa <HAL_RCC_OscConfig+0x482>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	685a      	ldr	r2, [r3, #4]
 80079d8:	4b93      	ldr	r3, [pc, #588]	; (8007c28 <HAL_RCC_OscConfig+0x2b0>)
 80079da:	b2d2      	uxtb	r2, r2
 80079dc:	701a      	strb	r2, [r3, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	685b      	ldr	r3, [r3, #4]
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d013      	beq.n	8007a0e <HAL_RCC_OscConfig+0x96>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80079e6:	f7fc fd5d 	bl	80044a4 <HAL_GetTick>
 80079ea:	6238      	str	r0, [r7, #32]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80079ec:	e008      	b.n	8007a00 <HAL_RCC_OscConfig+0x88>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80079ee:	f7fc fd59 	bl	80044a4 <HAL_GetTick>
 80079f2:	4602      	mov	r2, r0
 80079f4:	6a3b      	ldr	r3, [r7, #32]
 80079f6:	1ad3      	subs	r3, r2, r3
 80079f8:	2b64      	cmp	r3, #100	; 0x64
 80079fa:	d901      	bls.n	8007a00 <HAL_RCC_OscConfig+0x88>
          {
            return HAL_TIMEOUT;
 80079fc:	2303      	movs	r3, #3
 80079fe:	e1fc      	b.n	8007dfa <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007a00:	4b88      	ldr	r3, [pc, #544]	; (8007c24 <HAL_RCC_OscConfig+0x2ac>)
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	d0f0      	beq.n	80079ee <HAL_RCC_OscConfig+0x76>
 8007a0c:	e014      	b.n	8007a38 <HAL_RCC_OscConfig+0xc0>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007a0e:	f7fc fd49 	bl	80044a4 <HAL_GetTick>
 8007a12:	6238      	str	r0, [r7, #32]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007a14:	e008      	b.n	8007a28 <HAL_RCC_OscConfig+0xb0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007a16:	f7fc fd45 	bl	80044a4 <HAL_GetTick>
 8007a1a:	4602      	mov	r2, r0
 8007a1c:	6a3b      	ldr	r3, [r7, #32]
 8007a1e:	1ad3      	subs	r3, r2, r3
 8007a20:	2b64      	cmp	r3, #100	; 0x64
 8007a22:	d901      	bls.n	8007a28 <HAL_RCC_OscConfig+0xb0>
          {
            return HAL_TIMEOUT;
 8007a24:	2303      	movs	r3, #3
 8007a26:	e1e8      	b.n	8007dfa <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007a28:	4b7e      	ldr	r3, [pc, #504]	; (8007c24 <HAL_RCC_OscConfig+0x2ac>)
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d1f0      	bne.n	8007a16 <HAL_RCC_OscConfig+0x9e>
 8007a34:	e000      	b.n	8007a38 <HAL_RCC_OscConfig+0xc0>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007a36:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	f003 0302 	and.w	r3, r3, #2
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d077      	beq.n	8007b34 <HAL_RCC_OscConfig+0x1bc>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007a44:	4b77      	ldr	r3, [pc, #476]	; (8007c24 <HAL_RCC_OscConfig+0x2ac>)
 8007a46:	689b      	ldr	r3, [r3, #8]
 8007a48:	f003 030c 	and.w	r3, r3, #12
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d00b      	beq.n	8007a68 <HAL_RCC_OscConfig+0xf0>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007a50:	4b74      	ldr	r3, [pc, #464]	; (8007c24 <HAL_RCC_OscConfig+0x2ac>)
 8007a52:	689b      	ldr	r3, [r3, #8]
 8007a54:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007a58:	2b08      	cmp	r3, #8
 8007a5a:	d126      	bne.n	8007aaa <HAL_RCC_OscConfig+0x132>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007a5c:	4b71      	ldr	r3, [pc, #452]	; (8007c24 <HAL_RCC_OscConfig+0x2ac>)
 8007a5e:	685b      	ldr	r3, [r3, #4]
 8007a60:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d120      	bne.n	8007aaa <HAL_RCC_OscConfig+0x132>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007a68:	4b6e      	ldr	r3, [pc, #440]	; (8007c24 <HAL_RCC_OscConfig+0x2ac>)
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	f003 0302 	and.w	r3, r3, #2
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d005      	beq.n	8007a80 <HAL_RCC_OscConfig+0x108>
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	68db      	ldr	r3, [r3, #12]
 8007a78:	2b01      	cmp	r3, #1
 8007a7a:	d001      	beq.n	8007a80 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007a7c:	2301      	movs	r3, #1
 8007a7e:	e1bc      	b.n	8007dfa <HAL_RCC_OscConfig+0x482>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007a80:	4b68      	ldr	r3, [pc, #416]	; (8007c24 <HAL_RCC_OscConfig+0x2ac>)
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	691b      	ldr	r3, [r3, #16]
 8007a8c:	21f8      	movs	r1, #248	; 0xf8
 8007a8e:	61b9      	str	r1, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007a90:	69b9      	ldr	r1, [r7, #24]
 8007a92:	fa91 f1a1 	rbit	r1, r1
 8007a96:	6179      	str	r1, [r7, #20]
  return result;
 8007a98:	6979      	ldr	r1, [r7, #20]
 8007a9a:	fab1 f181 	clz	r1, r1
 8007a9e:	b2c9      	uxtb	r1, r1
 8007aa0:	408b      	lsls	r3, r1
 8007aa2:	4960      	ldr	r1, [pc, #384]	; (8007c24 <HAL_RCC_OscConfig+0x2ac>)
 8007aa4:	4313      	orrs	r3, r2
 8007aa6:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007aa8:	e044      	b.n	8007b34 <HAL_RCC_OscConfig+0x1bc>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	68db      	ldr	r3, [r3, #12]
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d02a      	beq.n	8007b08 <HAL_RCC_OscConfig+0x190>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007ab2:	4b5e      	ldr	r3, [pc, #376]	; (8007c2c <HAL_RCC_OscConfig+0x2b4>)
 8007ab4:	2201      	movs	r2, #1
 8007ab6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007ab8:	f7fc fcf4 	bl	80044a4 <HAL_GetTick>
 8007abc:	6238      	str	r0, [r7, #32]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007abe:	e008      	b.n	8007ad2 <HAL_RCC_OscConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007ac0:	f7fc fcf0 	bl	80044a4 <HAL_GetTick>
 8007ac4:	4602      	mov	r2, r0
 8007ac6:	6a3b      	ldr	r3, [r7, #32]
 8007ac8:	1ad3      	subs	r3, r2, r3
 8007aca:	2b02      	cmp	r3, #2
 8007acc:	d901      	bls.n	8007ad2 <HAL_RCC_OscConfig+0x15a>
          {
            return HAL_TIMEOUT;
 8007ace:	2303      	movs	r3, #3
 8007ad0:	e193      	b.n	8007dfa <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007ad2:	4b54      	ldr	r3, [pc, #336]	; (8007c24 <HAL_RCC_OscConfig+0x2ac>)
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	f003 0302 	and.w	r3, r3, #2
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d0f0      	beq.n	8007ac0 <HAL_RCC_OscConfig+0x148>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007ade:	4b51      	ldr	r3, [pc, #324]	; (8007c24 <HAL_RCC_OscConfig+0x2ac>)
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	691b      	ldr	r3, [r3, #16]
 8007aea:	21f8      	movs	r1, #248	; 0xf8
 8007aec:	6139      	str	r1, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007aee:	6939      	ldr	r1, [r7, #16]
 8007af0:	fa91 f1a1 	rbit	r1, r1
 8007af4:	60f9      	str	r1, [r7, #12]
  return result;
 8007af6:	68f9      	ldr	r1, [r7, #12]
 8007af8:	fab1 f181 	clz	r1, r1
 8007afc:	b2c9      	uxtb	r1, r1
 8007afe:	408b      	lsls	r3, r1
 8007b00:	4948      	ldr	r1, [pc, #288]	; (8007c24 <HAL_RCC_OscConfig+0x2ac>)
 8007b02:	4313      	orrs	r3, r2
 8007b04:	600b      	str	r3, [r1, #0]
 8007b06:	e015      	b.n	8007b34 <HAL_RCC_OscConfig+0x1bc>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007b08:	4b48      	ldr	r3, [pc, #288]	; (8007c2c <HAL_RCC_OscConfig+0x2b4>)
 8007b0a:	2200      	movs	r2, #0
 8007b0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007b0e:	f7fc fcc9 	bl	80044a4 <HAL_GetTick>
 8007b12:	6238      	str	r0, [r7, #32]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007b14:	e008      	b.n	8007b28 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007b16:	f7fc fcc5 	bl	80044a4 <HAL_GetTick>
 8007b1a:	4602      	mov	r2, r0
 8007b1c:	6a3b      	ldr	r3, [r7, #32]
 8007b1e:	1ad3      	subs	r3, r2, r3
 8007b20:	2b02      	cmp	r3, #2
 8007b22:	d901      	bls.n	8007b28 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8007b24:	2303      	movs	r3, #3
 8007b26:	e168      	b.n	8007dfa <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007b28:	4b3e      	ldr	r3, [pc, #248]	; (8007c24 <HAL_RCC_OscConfig+0x2ac>)
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	f003 0302 	and.w	r3, r3, #2
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d1f0      	bne.n	8007b16 <HAL_RCC_OscConfig+0x19e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	f003 0308 	and.w	r3, r3, #8
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d030      	beq.n	8007ba2 <HAL_RCC_OscConfig+0x22a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	695b      	ldr	r3, [r3, #20]
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d016      	beq.n	8007b76 <HAL_RCC_OscConfig+0x1fe>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007b48:	4b39      	ldr	r3, [pc, #228]	; (8007c30 <HAL_RCC_OscConfig+0x2b8>)
 8007b4a:	2201      	movs	r2, #1
 8007b4c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007b4e:	f7fc fca9 	bl	80044a4 <HAL_GetTick>
 8007b52:	6238      	str	r0, [r7, #32]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007b54:	e008      	b.n	8007b68 <HAL_RCC_OscConfig+0x1f0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007b56:	f7fc fca5 	bl	80044a4 <HAL_GetTick>
 8007b5a:	4602      	mov	r2, r0
 8007b5c:	6a3b      	ldr	r3, [r7, #32]
 8007b5e:	1ad3      	subs	r3, r2, r3
 8007b60:	2b02      	cmp	r3, #2
 8007b62:	d901      	bls.n	8007b68 <HAL_RCC_OscConfig+0x1f0>
        {
          return HAL_TIMEOUT;
 8007b64:	2303      	movs	r3, #3
 8007b66:	e148      	b.n	8007dfa <HAL_RCC_OscConfig+0x482>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007b68:	4b2e      	ldr	r3, [pc, #184]	; (8007c24 <HAL_RCC_OscConfig+0x2ac>)
 8007b6a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007b6c:	f003 0302 	and.w	r3, r3, #2
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d0f0      	beq.n	8007b56 <HAL_RCC_OscConfig+0x1de>
 8007b74:	e015      	b.n	8007ba2 <HAL_RCC_OscConfig+0x22a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007b76:	4b2e      	ldr	r3, [pc, #184]	; (8007c30 <HAL_RCC_OscConfig+0x2b8>)
 8007b78:	2200      	movs	r2, #0
 8007b7a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007b7c:	f7fc fc92 	bl	80044a4 <HAL_GetTick>
 8007b80:	6238      	str	r0, [r7, #32]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007b82:	e008      	b.n	8007b96 <HAL_RCC_OscConfig+0x21e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007b84:	f7fc fc8e 	bl	80044a4 <HAL_GetTick>
 8007b88:	4602      	mov	r2, r0
 8007b8a:	6a3b      	ldr	r3, [r7, #32]
 8007b8c:	1ad3      	subs	r3, r2, r3
 8007b8e:	2b02      	cmp	r3, #2
 8007b90:	d901      	bls.n	8007b96 <HAL_RCC_OscConfig+0x21e>
        {
          return HAL_TIMEOUT;
 8007b92:	2303      	movs	r3, #3
 8007b94:	e131      	b.n	8007dfa <HAL_RCC_OscConfig+0x482>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007b96:	4b23      	ldr	r3, [pc, #140]	; (8007c24 <HAL_RCC_OscConfig+0x2ac>)
 8007b98:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007b9a:	f003 0302 	and.w	r3, r3, #2
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d1f0      	bne.n	8007b84 <HAL_RCC_OscConfig+0x20c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	f003 0304 	and.w	r3, r3, #4
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	f000 8088 	beq.w	8007cc0 <HAL_RCC_OscConfig+0x348>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007bb0:	2300      	movs	r3, #0
 8007bb2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007bb6:	4b1b      	ldr	r3, [pc, #108]	; (8007c24 <HAL_RCC_OscConfig+0x2ac>)
 8007bb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d110      	bne.n	8007be4 <HAL_RCC_OscConfig+0x26c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007bc2:	2300      	movs	r3, #0
 8007bc4:	60bb      	str	r3, [r7, #8]
 8007bc6:	4b17      	ldr	r3, [pc, #92]	; (8007c24 <HAL_RCC_OscConfig+0x2ac>)
 8007bc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bca:	4a16      	ldr	r2, [pc, #88]	; (8007c24 <HAL_RCC_OscConfig+0x2ac>)
 8007bcc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007bd0:	6413      	str	r3, [r2, #64]	; 0x40
 8007bd2:	4b14      	ldr	r3, [pc, #80]	; (8007c24 <HAL_RCC_OscConfig+0x2ac>)
 8007bd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bd6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007bda:	60bb      	str	r3, [r7, #8]
 8007bdc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007bde:	2301      	movs	r3, #1
 8007be0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8007be4:	4b13      	ldr	r3, [pc, #76]	; (8007c34 <HAL_RCC_OscConfig+0x2bc>)
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	4a12      	ldr	r2, [pc, #72]	; (8007c34 <HAL_RCC_OscConfig+0x2bc>)
 8007bea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007bee:	6013      	str	r3, [r2, #0]

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007bf0:	4b10      	ldr	r3, [pc, #64]	; (8007c34 <HAL_RCC_OscConfig+0x2bc>)
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d123      	bne.n	8007c44 <HAL_RCC_OscConfig+0x2cc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007bfc:	4b0d      	ldr	r3, [pc, #52]	; (8007c34 <HAL_RCC_OscConfig+0x2bc>)
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	4a0c      	ldr	r2, [pc, #48]	; (8007c34 <HAL_RCC_OscConfig+0x2bc>)
 8007c02:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007c06:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007c08:	f7fc fc4c 	bl	80044a4 <HAL_GetTick>
 8007c0c:	6238      	str	r0, [r7, #32]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007c0e:	e013      	b.n	8007c38 <HAL_RCC_OscConfig+0x2c0>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007c10:	f7fc fc48 	bl	80044a4 <HAL_GetTick>
 8007c14:	4602      	mov	r2, r0
 8007c16:	6a3b      	ldr	r3, [r7, #32]
 8007c18:	1ad3      	subs	r3, r2, r3
 8007c1a:	2b02      	cmp	r3, #2
 8007c1c:	d90c      	bls.n	8007c38 <HAL_RCC_OscConfig+0x2c0>
        {
          return HAL_TIMEOUT;
 8007c1e:	2303      	movs	r3, #3
 8007c20:	e0eb      	b.n	8007dfa <HAL_RCC_OscConfig+0x482>
 8007c22:	bf00      	nop
 8007c24:	40023800 	.word	0x40023800
 8007c28:	40023802 	.word	0x40023802
 8007c2c:	42470000 	.word	0x42470000
 8007c30:	42470e80 	.word	0x42470e80
 8007c34:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007c38:	4b72      	ldr	r3, [pc, #456]	; (8007e04 <HAL_RCC_OscConfig+0x48c>)
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d0e5      	beq.n	8007c10 <HAL_RCC_OscConfig+0x298>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	689a      	ldr	r2, [r3, #8]
 8007c48:	4b6f      	ldr	r3, [pc, #444]	; (8007e08 <HAL_RCC_OscConfig+0x490>)
 8007c4a:	b2d2      	uxtb	r2, r2
 8007c4c:	701a      	strb	r2, [r3, #0]
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	689b      	ldr	r3, [r3, #8]
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d015      	beq.n	8007c82 <HAL_RCC_OscConfig+0x30a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007c56:	f7fc fc25 	bl	80044a4 <HAL_GetTick>
 8007c5a:	6238      	str	r0, [r7, #32]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007c5c:	e00a      	b.n	8007c74 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007c5e:	f7fc fc21 	bl	80044a4 <HAL_GetTick>
 8007c62:	4602      	mov	r2, r0
 8007c64:	6a3b      	ldr	r3, [r7, #32]
 8007c66:	1ad3      	subs	r3, r2, r3
 8007c68:	f241 3288 	movw	r2, #5000	; 0x1388
 8007c6c:	4293      	cmp	r3, r2
 8007c6e:	d901      	bls.n	8007c74 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8007c70:	2303      	movs	r3, #3
 8007c72:	e0c2      	b.n	8007dfa <HAL_RCC_OscConfig+0x482>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007c74:	4b65      	ldr	r3, [pc, #404]	; (8007e0c <HAL_RCC_OscConfig+0x494>)
 8007c76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c78:	f003 0302 	and.w	r3, r3, #2
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d0ee      	beq.n	8007c5e <HAL_RCC_OscConfig+0x2e6>
 8007c80:	e014      	b.n	8007cac <HAL_RCC_OscConfig+0x334>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007c82:	f7fc fc0f 	bl	80044a4 <HAL_GetTick>
 8007c86:	6238      	str	r0, [r7, #32]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007c88:	e00a      	b.n	8007ca0 <HAL_RCC_OscConfig+0x328>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007c8a:	f7fc fc0b 	bl	80044a4 <HAL_GetTick>
 8007c8e:	4602      	mov	r2, r0
 8007c90:	6a3b      	ldr	r3, [r7, #32]
 8007c92:	1ad3      	subs	r3, r2, r3
 8007c94:	f241 3288 	movw	r2, #5000	; 0x1388
 8007c98:	4293      	cmp	r3, r2
 8007c9a:	d901      	bls.n	8007ca0 <HAL_RCC_OscConfig+0x328>
        {
          return HAL_TIMEOUT;
 8007c9c:	2303      	movs	r3, #3
 8007c9e:	e0ac      	b.n	8007dfa <HAL_RCC_OscConfig+0x482>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007ca0:	4b5a      	ldr	r3, [pc, #360]	; (8007e0c <HAL_RCC_OscConfig+0x494>)
 8007ca2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ca4:	f003 0302 	and.w	r3, r3, #2
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d1ee      	bne.n	8007c8a <HAL_RCC_OscConfig+0x312>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007cac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007cb0:	2b01      	cmp	r3, #1
 8007cb2:	d105      	bne.n	8007cc0 <HAL_RCC_OscConfig+0x348>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007cb4:	4b55      	ldr	r3, [pc, #340]	; (8007e0c <HAL_RCC_OscConfig+0x494>)
 8007cb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cb8:	4a54      	ldr	r2, [pc, #336]	; (8007e0c <HAL_RCC_OscConfig+0x494>)
 8007cba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007cbe:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	699b      	ldr	r3, [r3, #24]
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	f000 8097 	beq.w	8007df8 <HAL_RCC_OscConfig+0x480>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007cca:	4b50      	ldr	r3, [pc, #320]	; (8007e0c <HAL_RCC_OscConfig+0x494>)
 8007ccc:	689b      	ldr	r3, [r3, #8]
 8007cce:	f003 030c 	and.w	r3, r3, #12
 8007cd2:	2b08      	cmp	r3, #8
 8007cd4:	d061      	beq.n	8007d9a <HAL_RCC_OscConfig+0x422>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	699b      	ldr	r3, [r3, #24]
 8007cda:	2b02      	cmp	r3, #2
 8007cdc:	d146      	bne.n	8007d6c <HAL_RCC_OscConfig+0x3f4>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007cde:	4b4c      	ldr	r3, [pc, #304]	; (8007e10 <HAL_RCC_OscConfig+0x498>)
 8007ce0:	2200      	movs	r2, #0
 8007ce2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007ce4:	f7fc fbde 	bl	80044a4 <HAL_GetTick>
 8007ce8:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007cea:	e008      	b.n	8007cfe <HAL_RCC_OscConfig+0x386>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007cec:	f7fc fbda 	bl	80044a4 <HAL_GetTick>
 8007cf0:	4602      	mov	r2, r0
 8007cf2:	6a3b      	ldr	r3, [r7, #32]
 8007cf4:	1ad3      	subs	r3, r2, r3
 8007cf6:	2b64      	cmp	r3, #100	; 0x64
 8007cf8:	d901      	bls.n	8007cfe <HAL_RCC_OscConfig+0x386>
          {
            return HAL_TIMEOUT;
 8007cfa:	2303      	movs	r3, #3
 8007cfc:	e07d      	b.n	8007dfa <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007cfe:	4b43      	ldr	r3, [pc, #268]	; (8007e0c <HAL_RCC_OscConfig+0x494>)
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d1f0      	bne.n	8007cec <HAL_RCC_OscConfig+0x374>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007d0a:	4b40      	ldr	r3, [pc, #256]	; (8007e0c <HAL_RCC_OscConfig+0x494>)
 8007d0c:	685a      	ldr	r2, [r3, #4]
 8007d0e:	4b41      	ldr	r3, [pc, #260]	; (8007e14 <HAL_RCC_OscConfig+0x49c>)
 8007d10:	4013      	ands	r3, r2
 8007d12:	687a      	ldr	r2, [r7, #4]
 8007d14:	69d1      	ldr	r1, [r2, #28]
 8007d16:	687a      	ldr	r2, [r7, #4]
 8007d18:	6a12      	ldr	r2, [r2, #32]
 8007d1a:	4311      	orrs	r1, r2
 8007d1c:	687a      	ldr	r2, [r7, #4]
 8007d1e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007d20:	0192      	lsls	r2, r2, #6
 8007d22:	4311      	orrs	r1, r2
 8007d24:	687a      	ldr	r2, [r7, #4]
 8007d26:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8007d28:	0612      	lsls	r2, r2, #24
 8007d2a:	4311      	orrs	r1, r2
 8007d2c:	687a      	ldr	r2, [r7, #4]
 8007d2e:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8007d30:	0852      	lsrs	r2, r2, #1
 8007d32:	3a01      	subs	r2, #1
 8007d34:	0412      	lsls	r2, r2, #16
 8007d36:	430a      	orrs	r2, r1
 8007d38:	4934      	ldr	r1, [pc, #208]	; (8007e0c <HAL_RCC_OscConfig+0x494>)
 8007d3a:	4313      	orrs	r3, r2
 8007d3c:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007d3e:	4b34      	ldr	r3, [pc, #208]	; (8007e10 <HAL_RCC_OscConfig+0x498>)
 8007d40:	2201      	movs	r2, #1
 8007d42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007d44:	f7fc fbae 	bl	80044a4 <HAL_GetTick>
 8007d48:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007d4a:	e008      	b.n	8007d5e <HAL_RCC_OscConfig+0x3e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007d4c:	f7fc fbaa 	bl	80044a4 <HAL_GetTick>
 8007d50:	4602      	mov	r2, r0
 8007d52:	6a3b      	ldr	r3, [r7, #32]
 8007d54:	1ad3      	subs	r3, r2, r3
 8007d56:	2b64      	cmp	r3, #100	; 0x64
 8007d58:	d901      	bls.n	8007d5e <HAL_RCC_OscConfig+0x3e6>
          {
            return HAL_TIMEOUT;
 8007d5a:	2303      	movs	r3, #3
 8007d5c:	e04d      	b.n	8007dfa <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007d5e:	4b2b      	ldr	r3, [pc, #172]	; (8007e0c <HAL_RCC_OscConfig+0x494>)
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d0f0      	beq.n	8007d4c <HAL_RCC_OscConfig+0x3d4>
 8007d6a:	e045      	b.n	8007df8 <HAL_RCC_OscConfig+0x480>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007d6c:	4b28      	ldr	r3, [pc, #160]	; (8007e10 <HAL_RCC_OscConfig+0x498>)
 8007d6e:	2200      	movs	r2, #0
 8007d70:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007d72:	f7fc fb97 	bl	80044a4 <HAL_GetTick>
 8007d76:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007d78:	e008      	b.n	8007d8c <HAL_RCC_OscConfig+0x414>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007d7a:	f7fc fb93 	bl	80044a4 <HAL_GetTick>
 8007d7e:	4602      	mov	r2, r0
 8007d80:	6a3b      	ldr	r3, [r7, #32]
 8007d82:	1ad3      	subs	r3, r2, r3
 8007d84:	2b64      	cmp	r3, #100	; 0x64
 8007d86:	d901      	bls.n	8007d8c <HAL_RCC_OscConfig+0x414>
          {
            return HAL_TIMEOUT;
 8007d88:	2303      	movs	r3, #3
 8007d8a:	e036      	b.n	8007dfa <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007d8c:	4b1f      	ldr	r3, [pc, #124]	; (8007e0c <HAL_RCC_OscConfig+0x494>)
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d1f0      	bne.n	8007d7a <HAL_RCC_OscConfig+0x402>
 8007d98:	e02e      	b.n	8007df8 <HAL_RCC_OscConfig+0x480>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	699b      	ldr	r3, [r3, #24]
 8007d9e:	2b01      	cmp	r3, #1
 8007da0:	d101      	bne.n	8007da6 <HAL_RCC_OscConfig+0x42e>
      {
        return HAL_ERROR;
 8007da2:	2301      	movs	r3, #1
 8007da4:	e029      	b.n	8007dfa <HAL_RCC_OscConfig+0x482>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        uint32_t pllcfgr = RCC->PLLCFGR;
 8007da6:	4b19      	ldr	r3, [pc, #100]	; (8007e0c <HAL_RCC_OscConfig+0x494>)
 8007da8:	685b      	ldr	r3, [r3, #4]
 8007daa:	61fb      	str	r3, [r7, #28]
      
        if((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007dac:	69fb      	ldr	r3, [r7, #28]
 8007dae:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	69db      	ldr	r3, [r3, #28]
 8007db6:	429a      	cmp	r2, r3
 8007db8:	d11c      	bne.n	8007df4 <HAL_RCC_OscConfig+0x47c>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007dba:	69fb      	ldr	r3, [r7, #28]
 8007dbc:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007dc4:	429a      	cmp	r2, r3
 8007dc6:	d115      	bne.n	8007df4 <HAL_RCC_OscConfig+0x47c>
           ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8007dc8:	69fb      	ldr	r3, [r7, #28]
 8007dca:	099b      	lsrs	r3, r3, #6
 8007dcc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007dd4:	429a      	cmp	r2, r3
 8007dd6:	d10d      	bne.n	8007df4 <HAL_RCC_OscConfig+0x47c>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8007dd8:	69fb      	ldr	r3, [r7, #28]
 8007dda:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8007de2:	429a      	cmp	r2, r3
 8007de4:	d106      	bne.n	8007df4 <HAL_RCC_OscConfig+0x47c>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8007de6:	69fb      	ldr	r3, [r7, #28]
 8007de8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8007df0:	429a      	cmp	r2, r3
 8007df2:	d001      	beq.n	8007df8 <HAL_RCC_OscConfig+0x480>
        {
          return HAL_ERROR;
 8007df4:	2301      	movs	r3, #1
 8007df6:	e000      	b.n	8007dfa <HAL_RCC_OscConfig+0x482>
        }
      }
    }
  }
  return HAL_OK;
 8007df8:	2300      	movs	r3, #0
}
 8007dfa:	4618      	mov	r0, r3
 8007dfc:	3728      	adds	r7, #40	; 0x28
 8007dfe:	46bd      	mov	sp, r7
 8007e00:	bd80      	pop	{r7, pc}
 8007e02:	bf00      	nop
 8007e04:	40007000 	.word	0x40007000
 8007e08:	40023870 	.word	0x40023870
 8007e0c:	40023800 	.word	0x40023800
 8007e10:	42470060 	.word	0x42470060
 8007e14:	f0bc8000 	.word	0xf0bc8000

08007e18 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007e18:	b580      	push	{r7, lr}
 8007e1a:	b086      	sub	sp, #24
 8007e1c:	af00      	add	r7, sp, #0
 8007e1e:	6078      	str	r0, [r7, #4]
 8007e20:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	d101      	bne.n	8007e2c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007e28:	2301      	movs	r3, #1
 8007e2a:	e0d2      	b.n	8007fd2 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007e2c:	4b6b      	ldr	r3, [pc, #428]	; (8007fdc <HAL_RCC_ClockConfig+0x1c4>)
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	f003 030f 	and.w	r3, r3, #15
 8007e34:	683a      	ldr	r2, [r7, #0]
 8007e36:	429a      	cmp	r2, r3
 8007e38:	d90c      	bls.n	8007e54 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007e3a:	4b68      	ldr	r3, [pc, #416]	; (8007fdc <HAL_RCC_ClockConfig+0x1c4>)
 8007e3c:	683a      	ldr	r2, [r7, #0]
 8007e3e:	b2d2      	uxtb	r2, r2
 8007e40:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007e42:	4b66      	ldr	r3, [pc, #408]	; (8007fdc <HAL_RCC_ClockConfig+0x1c4>)
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	f003 030f 	and.w	r3, r3, #15
 8007e4a:	683a      	ldr	r2, [r7, #0]
 8007e4c:	429a      	cmp	r2, r3
 8007e4e:	d001      	beq.n	8007e54 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007e50:	2301      	movs	r3, #1
 8007e52:	e0be      	b.n	8007fd2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	f003 0302 	and.w	r3, r3, #2
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d020      	beq.n	8007ea2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	f003 0304 	and.w	r3, r3, #4
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	d005      	beq.n	8007e78 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007e6c:	4b5c      	ldr	r3, [pc, #368]	; (8007fe0 <HAL_RCC_ClockConfig+0x1c8>)
 8007e6e:	689b      	ldr	r3, [r3, #8]
 8007e70:	4a5b      	ldr	r2, [pc, #364]	; (8007fe0 <HAL_RCC_ClockConfig+0x1c8>)
 8007e72:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8007e76:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	f003 0308 	and.w	r3, r3, #8
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d005      	beq.n	8007e90 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3U));
 8007e84:	4b56      	ldr	r3, [pc, #344]	; (8007fe0 <HAL_RCC_ClockConfig+0x1c8>)
 8007e86:	689b      	ldr	r3, [r3, #8]
 8007e88:	4a55      	ldr	r2, [pc, #340]	; (8007fe0 <HAL_RCC_ClockConfig+0x1c8>)
 8007e8a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8007e8e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007e90:	4b53      	ldr	r3, [pc, #332]	; (8007fe0 <HAL_RCC_ClockConfig+0x1c8>)
 8007e92:	689b      	ldr	r3, [r3, #8]
 8007e94:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	689b      	ldr	r3, [r3, #8]
 8007e9c:	4950      	ldr	r1, [pc, #320]	; (8007fe0 <HAL_RCC_ClockConfig+0x1c8>)
 8007e9e:	4313      	orrs	r3, r2
 8007ea0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	f003 0301 	and.w	r3, r3, #1
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d040      	beq.n	8007f30 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	685b      	ldr	r3, [r3, #4]
 8007eb2:	2b01      	cmp	r3, #1
 8007eb4:	d107      	bne.n	8007ec6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007eb6:	4b4a      	ldr	r3, [pc, #296]	; (8007fe0 <HAL_RCC_ClockConfig+0x1c8>)
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	d115      	bne.n	8007eee <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8007ec2:	2301      	movs	r3, #1
 8007ec4:	e085      	b.n	8007fd2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	685b      	ldr	r3, [r3, #4]
 8007eca:	2b02      	cmp	r3, #2
 8007ecc:	d107      	bne.n	8007ede <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007ece:	4b44      	ldr	r3, [pc, #272]	; (8007fe0 <HAL_RCC_ClockConfig+0x1c8>)
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d109      	bne.n	8007eee <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8007eda:	2301      	movs	r3, #1
 8007edc:	e079      	b.n	8007fd2 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007ede:	4b40      	ldr	r3, [pc, #256]	; (8007fe0 <HAL_RCC_ClockConfig+0x1c8>)
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	f003 0302 	and.w	r3, r3, #2
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d101      	bne.n	8007eee <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8007eea:	2301      	movs	r3, #1
 8007eec:	e071      	b.n	8007fd2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007eee:	4b3c      	ldr	r3, [pc, #240]	; (8007fe0 <HAL_RCC_ClockConfig+0x1c8>)
 8007ef0:	689b      	ldr	r3, [r3, #8]
 8007ef2:	f023 0203 	bic.w	r2, r3, #3
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	685b      	ldr	r3, [r3, #4]
 8007efa:	4939      	ldr	r1, [pc, #228]	; (8007fe0 <HAL_RCC_ClockConfig+0x1c8>)
 8007efc:	4313      	orrs	r3, r2
 8007efe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007f00:	f7fc fad0 	bl	80044a4 <HAL_GetTick>
 8007f04:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007f06:	e00a      	b.n	8007f1e <HAL_RCC_ClockConfig+0x106>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007f08:	f7fc facc 	bl	80044a4 <HAL_GetTick>
 8007f0c:	4602      	mov	r2, r0
 8007f0e:	697b      	ldr	r3, [r7, #20]
 8007f10:	1ad3      	subs	r3, r2, r3
 8007f12:	f241 3288 	movw	r2, #5000	; 0x1388
 8007f16:	4293      	cmp	r3, r2
 8007f18:	d901      	bls.n	8007f1e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8007f1a:	2303      	movs	r3, #3
 8007f1c:	e059      	b.n	8007fd2 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007f1e:	4b30      	ldr	r3, [pc, #192]	; (8007fe0 <HAL_RCC_ClockConfig+0x1c8>)
 8007f20:	689b      	ldr	r3, [r3, #8]
 8007f22:	f003 020c 	and.w	r2, r3, #12
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	685b      	ldr	r3, [r3, #4]
 8007f2a:	009b      	lsls	r3, r3, #2
 8007f2c:	429a      	cmp	r2, r3
 8007f2e:	d1eb      	bne.n	8007f08 <HAL_RCC_ClockConfig+0xf0>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007f30:	4b2a      	ldr	r3, [pc, #168]	; (8007fdc <HAL_RCC_ClockConfig+0x1c4>)
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	f003 030f 	and.w	r3, r3, #15
 8007f38:	683a      	ldr	r2, [r7, #0]
 8007f3a:	429a      	cmp	r2, r3
 8007f3c:	d20c      	bcs.n	8007f58 <HAL_RCC_ClockConfig+0x140>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007f3e:	4b27      	ldr	r3, [pc, #156]	; (8007fdc <HAL_RCC_ClockConfig+0x1c4>)
 8007f40:	683a      	ldr	r2, [r7, #0]
 8007f42:	b2d2      	uxtb	r2, r2
 8007f44:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007f46:	4b25      	ldr	r3, [pc, #148]	; (8007fdc <HAL_RCC_ClockConfig+0x1c4>)
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	f003 030f 	and.w	r3, r3, #15
 8007f4e:	683a      	ldr	r2, [r7, #0]
 8007f50:	429a      	cmp	r2, r3
 8007f52:	d001      	beq.n	8007f58 <HAL_RCC_ClockConfig+0x140>
    {
      return HAL_ERROR;
 8007f54:	2301      	movs	r3, #1
 8007f56:	e03c      	b.n	8007fd2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	f003 0304 	and.w	r3, r3, #4
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	d008      	beq.n	8007f76 <HAL_RCC_ClockConfig+0x15e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007f64:	4b1e      	ldr	r3, [pc, #120]	; (8007fe0 <HAL_RCC_ClockConfig+0x1c8>)
 8007f66:	689b      	ldr	r3, [r3, #8]
 8007f68:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	68db      	ldr	r3, [r3, #12]
 8007f70:	491b      	ldr	r1, [pc, #108]	; (8007fe0 <HAL_RCC_ClockConfig+0x1c8>)
 8007f72:	4313      	orrs	r3, r2
 8007f74:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	f003 0308 	and.w	r3, r3, #8
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d009      	beq.n	8007f96 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007f82:	4b17      	ldr	r3, [pc, #92]	; (8007fe0 <HAL_RCC_ClockConfig+0x1c8>)
 8007f84:	689b      	ldr	r3, [r3, #8]
 8007f86:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	691b      	ldr	r3, [r3, #16]
 8007f8e:	00db      	lsls	r3, r3, #3
 8007f90:	4913      	ldr	r1, [pc, #76]	; (8007fe0 <HAL_RCC_ClockConfig+0x1c8>)
 8007f92:	4313      	orrs	r3, r2
 8007f94:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 8007f96:	f000 f837 	bl	8008008 <HAL_RCC_GetSysClockFreq>
 8007f9a:	4601      	mov	r1, r0
 8007f9c:	4b10      	ldr	r3, [pc, #64]	; (8007fe0 <HAL_RCC_ClockConfig+0x1c8>)
 8007f9e:	689b      	ldr	r3, [r3, #8]
 8007fa0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007fa4:	22f0      	movs	r2, #240	; 0xf0
 8007fa6:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007fa8:	693a      	ldr	r2, [r7, #16]
 8007faa:	fa92 f2a2 	rbit	r2, r2
 8007fae:	60fa      	str	r2, [r7, #12]
  return result;
 8007fb0:	68fa      	ldr	r2, [r7, #12]
 8007fb2:	fab2 f282 	clz	r2, r2
 8007fb6:	b2d2      	uxtb	r2, r2
 8007fb8:	40d3      	lsrs	r3, r2
 8007fba:	4a0a      	ldr	r2, [pc, #40]	; (8007fe4 <HAL_RCC_ClockConfig+0x1cc>)
 8007fbc:	5cd3      	ldrb	r3, [r2, r3]
 8007fbe:	fa21 f303 	lsr.w	r3, r1, r3
 8007fc2:	4a09      	ldr	r2, [pc, #36]	; (8007fe8 <HAL_RCC_ClockConfig+0x1d0>)
 8007fc4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8007fc6:	4b09      	ldr	r3, [pc, #36]	; (8007fec <HAL_RCC_ClockConfig+0x1d4>)
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	4618      	mov	r0, r3
 8007fcc:	f7fc fa28 	bl	8004420 <HAL_InitTick>

  return HAL_OK;
 8007fd0:	2300      	movs	r3, #0
}
 8007fd2:	4618      	mov	r0, r3
 8007fd4:	3718      	adds	r7, #24
 8007fd6:	46bd      	mov	sp, r7
 8007fd8:	bd80      	pop	{r7, pc}
 8007fda:	bf00      	nop
 8007fdc:	40023c00 	.word	0x40023c00
 8007fe0:	40023800 	.word	0x40023800
 8007fe4:	0800f170 	.word	0x0800f170
 8007fe8:	20000004 	.word	0x20000004
 8007fec:	20000008 	.word	0x20000008

08007ff0 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M3 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8007ff0:	b480      	push	{r7}
 8007ff2:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 8007ff4:	4b03      	ldr	r3, [pc, #12]	; (8008004 <HAL_RCC_EnableCSS+0x14>)
 8007ff6:	2201      	movs	r2, #1
 8007ff8:	601a      	str	r2, [r3, #0]
}
 8007ffa:	bf00      	nop
 8007ffc:	46bd      	mov	sp, r7
 8007ffe:	bc80      	pop	{r7}
 8008000:	4770      	bx	lr
 8008002:	bf00      	nop
 8008004:	4247004c 	.word	0x4247004c

08008008 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008008:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800800c:	b084      	sub	sp, #16
 800800e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8008010:	2300      	movs	r3, #0
 8008012:	607b      	str	r3, [r7, #4]
 8008014:	2300      	movs	r3, #0
 8008016:	60fb      	str	r3, [r7, #12]
 8008018:	2300      	movs	r3, #0
 800801a:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800801c:	2300      	movs	r3, #0
 800801e:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008020:	4b67      	ldr	r3, [pc, #412]	; (80081c0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8008022:	689b      	ldr	r3, [r3, #8]
 8008024:	f003 030c 	and.w	r3, r3, #12
 8008028:	2b08      	cmp	r3, #8
 800802a:	d00d      	beq.n	8008048 <HAL_RCC_GetSysClockFreq+0x40>
 800802c:	2b08      	cmp	r3, #8
 800802e:	f200 80bd 	bhi.w	80081ac <HAL_RCC_GetSysClockFreq+0x1a4>
 8008032:	2b00      	cmp	r3, #0
 8008034:	d002      	beq.n	800803c <HAL_RCC_GetSysClockFreq+0x34>
 8008036:	2b04      	cmp	r3, #4
 8008038:	d003      	beq.n	8008042 <HAL_RCC_GetSysClockFreq+0x3a>
 800803a:	e0b7      	b.n	80081ac <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800803c:	4b61      	ldr	r3, [pc, #388]	; (80081c4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800803e:	60bb      	str	r3, [r7, #8]
       break;
 8008040:	e0b7      	b.n	80081b2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8008042:	4b60      	ldr	r3, [pc, #384]	; (80081c4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8008044:	60bb      	str	r3, [r7, #8]
      break;
 8008046:	e0b4      	b.n	80081b2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008048:	4b5d      	ldr	r3, [pc, #372]	; (80081c0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800804a:	685b      	ldr	r3, [r3, #4]
 800804c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008050:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8008052:	4b5b      	ldr	r3, [pc, #364]	; (80081c0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8008054:	685b      	ldr	r3, [r3, #4]
 8008056:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800805a:	2b00      	cmp	r3, #0
 800805c:	d04d      	beq.n	80080fa <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800805e:	4b58      	ldr	r3, [pc, #352]	; (80081c0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8008060:	685b      	ldr	r3, [r3, #4]
 8008062:	099b      	lsrs	r3, r3, #6
 8008064:	461a      	mov	r2, r3
 8008066:	f04f 0300 	mov.w	r3, #0
 800806a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800806e:	f04f 0100 	mov.w	r1, #0
 8008072:	ea02 0800 	and.w	r8, r2, r0
 8008076:	ea03 0901 	and.w	r9, r3, r1
 800807a:	4640      	mov	r0, r8
 800807c:	4649      	mov	r1, r9
 800807e:	f04f 0200 	mov.w	r2, #0
 8008082:	f04f 0300 	mov.w	r3, #0
 8008086:	014b      	lsls	r3, r1, #5
 8008088:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800808c:	0142      	lsls	r2, r0, #5
 800808e:	4610      	mov	r0, r2
 8008090:	4619      	mov	r1, r3
 8008092:	ebb0 0008 	subs.w	r0, r0, r8
 8008096:	eb61 0109 	sbc.w	r1, r1, r9
 800809a:	f04f 0200 	mov.w	r2, #0
 800809e:	f04f 0300 	mov.w	r3, #0
 80080a2:	018b      	lsls	r3, r1, #6
 80080a4:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80080a8:	0182      	lsls	r2, r0, #6
 80080aa:	1a12      	subs	r2, r2, r0
 80080ac:	eb63 0301 	sbc.w	r3, r3, r1
 80080b0:	f04f 0000 	mov.w	r0, #0
 80080b4:	f04f 0100 	mov.w	r1, #0
 80080b8:	00d9      	lsls	r1, r3, #3
 80080ba:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80080be:	00d0      	lsls	r0, r2, #3
 80080c0:	4602      	mov	r2, r0
 80080c2:	460b      	mov	r3, r1
 80080c4:	eb12 0208 	adds.w	r2, r2, r8
 80080c8:	eb43 0309 	adc.w	r3, r3, r9
 80080cc:	f04f 0000 	mov.w	r0, #0
 80080d0:	f04f 0100 	mov.w	r1, #0
 80080d4:	0299      	lsls	r1, r3, #10
 80080d6:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80080da:	0290      	lsls	r0, r2, #10
 80080dc:	4602      	mov	r2, r0
 80080de:	460b      	mov	r3, r1
 80080e0:	4610      	mov	r0, r2
 80080e2:	4619      	mov	r1, r3
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	461a      	mov	r2, r3
 80080e8:	f04f 0300 	mov.w	r3, #0
 80080ec:	f7f9 f88a 	bl	8001204 <__aeabi_uldivmod>
 80080f0:	4602      	mov	r2, r0
 80080f2:	460b      	mov	r3, r1
 80080f4:	4613      	mov	r3, r2
 80080f6:	60fb      	str	r3, [r7, #12]
 80080f8:	e04a      	b.n	8008190 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80080fa:	4b31      	ldr	r3, [pc, #196]	; (80081c0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80080fc:	685b      	ldr	r3, [r3, #4]
 80080fe:	099b      	lsrs	r3, r3, #6
 8008100:	461a      	mov	r2, r3
 8008102:	f04f 0300 	mov.w	r3, #0
 8008106:	f240 10ff 	movw	r0, #511	; 0x1ff
 800810a:	f04f 0100 	mov.w	r1, #0
 800810e:	ea02 0400 	and.w	r4, r2, r0
 8008112:	ea03 0501 	and.w	r5, r3, r1
 8008116:	4620      	mov	r0, r4
 8008118:	4629      	mov	r1, r5
 800811a:	f04f 0200 	mov.w	r2, #0
 800811e:	f04f 0300 	mov.w	r3, #0
 8008122:	014b      	lsls	r3, r1, #5
 8008124:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8008128:	0142      	lsls	r2, r0, #5
 800812a:	4610      	mov	r0, r2
 800812c:	4619      	mov	r1, r3
 800812e:	1b00      	subs	r0, r0, r4
 8008130:	eb61 0105 	sbc.w	r1, r1, r5
 8008134:	f04f 0200 	mov.w	r2, #0
 8008138:	f04f 0300 	mov.w	r3, #0
 800813c:	018b      	lsls	r3, r1, #6
 800813e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8008142:	0182      	lsls	r2, r0, #6
 8008144:	1a12      	subs	r2, r2, r0
 8008146:	eb63 0301 	sbc.w	r3, r3, r1
 800814a:	f04f 0000 	mov.w	r0, #0
 800814e:	f04f 0100 	mov.w	r1, #0
 8008152:	00d9      	lsls	r1, r3, #3
 8008154:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008158:	00d0      	lsls	r0, r2, #3
 800815a:	4602      	mov	r2, r0
 800815c:	460b      	mov	r3, r1
 800815e:	1912      	adds	r2, r2, r4
 8008160:	eb45 0303 	adc.w	r3, r5, r3
 8008164:	f04f 0000 	mov.w	r0, #0
 8008168:	f04f 0100 	mov.w	r1, #0
 800816c:	0299      	lsls	r1, r3, #10
 800816e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8008172:	0290      	lsls	r0, r2, #10
 8008174:	4602      	mov	r2, r0
 8008176:	460b      	mov	r3, r1
 8008178:	4610      	mov	r0, r2
 800817a:	4619      	mov	r1, r3
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	461a      	mov	r2, r3
 8008180:	f04f 0300 	mov.w	r3, #0
 8008184:	f7f9 f83e 	bl	8001204 <__aeabi_uldivmod>
 8008188:	4602      	mov	r2, r0
 800818a:	460b      	mov	r3, r1
 800818c:	4613      	mov	r3, r2
 800818e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8008190:	4b0b      	ldr	r3, [pc, #44]	; (80081c0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8008192:	685b      	ldr	r3, [r3, #4]
 8008194:	0c1b      	lsrs	r3, r3, #16
 8008196:	f003 0303 	and.w	r3, r3, #3
 800819a:	3301      	adds	r3, #1
 800819c:	005b      	lsls	r3, r3, #1
 800819e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80081a0:	68fa      	ldr	r2, [r7, #12]
 80081a2:	683b      	ldr	r3, [r7, #0]
 80081a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80081a8:	60bb      	str	r3, [r7, #8]
      break;
 80081aa:	e002      	b.n	80081b2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80081ac:	4b05      	ldr	r3, [pc, #20]	; (80081c4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80081ae:	60bb      	str	r3, [r7, #8]
      break;
 80081b0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80081b2:	68bb      	ldr	r3, [r7, #8]
}
 80081b4:	4618      	mov	r0, r3
 80081b6:	3710      	adds	r7, #16
 80081b8:	46bd      	mov	sp, r7
 80081ba:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80081be:	bf00      	nop
 80081c0:	40023800 	.word	0x40023800
 80081c4:	00f42400 	.word	0x00f42400

080081c8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80081c8:	b480      	push	{r7}
 80081ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80081cc:	4b02      	ldr	r3, [pc, #8]	; (80081d8 <HAL_RCC_GetHCLKFreq+0x10>)
 80081ce:	681b      	ldr	r3, [r3, #0]
}
 80081d0:	4618      	mov	r0, r3
 80081d2:	46bd      	mov	sp, r7
 80081d4:	bc80      	pop	{r7}
 80081d6:	4770      	bx	lr
 80081d8:	20000004 	.word	0x20000004

080081dc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80081dc:	b580      	push	{r7, lr}
 80081de:	b082      	sub	sp, #8
 80081e0:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> POSITION_VAL(RCC_CFGR_PPRE1)]);
 80081e2:	f7ff fff1 	bl	80081c8 <HAL_RCC_GetHCLKFreq>
 80081e6:	4601      	mov	r1, r0
 80081e8:	4b0b      	ldr	r3, [pc, #44]	; (8008218 <HAL_RCC_GetPCLK1Freq+0x3c>)
 80081ea:	689b      	ldr	r3, [r3, #8]
 80081ec:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 80081f0:	f44f 52e0 	mov.w	r2, #7168	; 0x1c00
 80081f4:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80081f6:	687a      	ldr	r2, [r7, #4]
 80081f8:	fa92 f2a2 	rbit	r2, r2
 80081fc:	603a      	str	r2, [r7, #0]
  return result;
 80081fe:	683a      	ldr	r2, [r7, #0]
 8008200:	fab2 f282 	clz	r2, r2
 8008204:	b2d2      	uxtb	r2, r2
 8008206:	40d3      	lsrs	r3, r2
 8008208:	4a04      	ldr	r2, [pc, #16]	; (800821c <HAL_RCC_GetPCLK1Freq+0x40>)
 800820a:	5cd3      	ldrb	r3, [r2, r3]
 800820c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8008210:	4618      	mov	r0, r3
 8008212:	3708      	adds	r7, #8
 8008214:	46bd      	mov	sp, r7
 8008216:	bd80      	pop	{r7, pc}
 8008218:	40023800 	.word	0x40023800
 800821c:	0800f180 	.word	0x0800f180

08008220 <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 8008220:	b580      	push	{r7, lr}
 8008222:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 8008224:	4b06      	ldr	r3, [pc, #24]	; (8008240 <HAL_RCC_NMI_IRQHandler+0x20>)
 8008226:	68db      	ldr	r3, [r3, #12]
 8008228:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800822c:	2b80      	cmp	r3, #128	; 0x80
 800822e:	d104      	bne.n	800823a <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 8008230:	f000 f80a 	bl	8008248 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 8008234:	4b03      	ldr	r3, [pc, #12]	; (8008244 <HAL_RCC_NMI_IRQHandler+0x24>)
 8008236:	2280      	movs	r2, #128	; 0x80
 8008238:	701a      	strb	r2, [r3, #0]
  }
}
 800823a:	bf00      	nop
 800823c:	bd80      	pop	{r7, pc}
 800823e:	bf00      	nop
 8008240:	40023800 	.word	0x40023800
 8008244:	4002380e 	.word	0x4002380e

08008248 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval None
  */
__weak void HAL_RCC_CSSCallback(void)
{
 8008248:	b480      	push	{r7}
 800824a:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback could be implemented in the user file
   */
}
 800824c:	bf00      	nop
 800824e:	46bd      	mov	sp, r7
 8008250:	bc80      	pop	{r7}
 8008252:	4770      	bx	lr

08008254 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008254:	b580      	push	{r7, lr}
 8008256:	b082      	sub	sp, #8
 8008258:	af00      	add	r7, sp, #0
 800825a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	2b00      	cmp	r3, #0
 8008260:	d101      	bne.n	8008266 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008262:	2301      	movs	r3, #1
 8008264:	e041      	b.n	80082ea <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800826c:	b2db      	uxtb	r3, r3
 800826e:	2b00      	cmp	r3, #0
 8008270:	d106      	bne.n	8008280 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	2200      	movs	r2, #0
 8008276:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800827a:	6878      	ldr	r0, [r7, #4]
 800827c:	f7fb ff28 	bl	80040d0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	2202      	movs	r2, #2
 8008284:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	681a      	ldr	r2, [r3, #0]
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	3304      	adds	r3, #4
 8008290:	4619      	mov	r1, r3
 8008292:	4610      	mov	r0, r2
 8008294:	f000 fc04 	bl	8008aa0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	2201      	movs	r2, #1
 800829c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	2201      	movs	r2, #1
 80082a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	2201      	movs	r2, #1
 80082ac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	2201      	movs	r2, #1
 80082b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	2201      	movs	r2, #1
 80082bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	2201      	movs	r2, #1
 80082c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	2201      	movs	r2, #1
 80082cc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	2201      	movs	r2, #1
 80082d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	2201      	movs	r2, #1
 80082dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	2201      	movs	r2, #1
 80082e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80082e8:	2300      	movs	r3, #0
}
 80082ea:	4618      	mov	r0, r3
 80082ec:	3708      	adds	r7, #8
 80082ee:	46bd      	mov	sp, r7
 80082f0:	bd80      	pop	{r7, pc}
	...

080082f4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80082f4:	b480      	push	{r7}
 80082f6:	b085      	sub	sp, #20
 80082f8:	af00      	add	r7, sp, #0
 80082fa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008302:	b2db      	uxtb	r3, r3
 8008304:	2b01      	cmp	r3, #1
 8008306:	d001      	beq.n	800830c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8008308:	2301      	movs	r3, #1
 800830a:	e046      	b.n	800839a <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	2202      	movs	r2, #2
 8008310:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	4a22      	ldr	r2, [pc, #136]	; (80083a4 <HAL_TIM_Base_Start+0xb0>)
 800831a:	4293      	cmp	r3, r2
 800831c:	d022      	beq.n	8008364 <HAL_TIM_Base_Start+0x70>
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008326:	d01d      	beq.n	8008364 <HAL_TIM_Base_Start+0x70>
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	4a1e      	ldr	r2, [pc, #120]	; (80083a8 <HAL_TIM_Base_Start+0xb4>)
 800832e:	4293      	cmp	r3, r2
 8008330:	d018      	beq.n	8008364 <HAL_TIM_Base_Start+0x70>
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	4a1d      	ldr	r2, [pc, #116]	; (80083ac <HAL_TIM_Base_Start+0xb8>)
 8008338:	4293      	cmp	r3, r2
 800833a:	d013      	beq.n	8008364 <HAL_TIM_Base_Start+0x70>
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	4a1b      	ldr	r2, [pc, #108]	; (80083b0 <HAL_TIM_Base_Start+0xbc>)
 8008342:	4293      	cmp	r3, r2
 8008344:	d00e      	beq.n	8008364 <HAL_TIM_Base_Start+0x70>
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	4a1a      	ldr	r2, [pc, #104]	; (80083b4 <HAL_TIM_Base_Start+0xc0>)
 800834c:	4293      	cmp	r3, r2
 800834e:	d009      	beq.n	8008364 <HAL_TIM_Base_Start+0x70>
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	4a18      	ldr	r2, [pc, #96]	; (80083b8 <HAL_TIM_Base_Start+0xc4>)
 8008356:	4293      	cmp	r3, r2
 8008358:	d004      	beq.n	8008364 <HAL_TIM_Base_Start+0x70>
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	4a17      	ldr	r2, [pc, #92]	; (80083bc <HAL_TIM_Base_Start+0xc8>)
 8008360:	4293      	cmp	r3, r2
 8008362:	d111      	bne.n	8008388 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	689b      	ldr	r3, [r3, #8]
 800836a:	f003 0307 	and.w	r3, r3, #7
 800836e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	2b06      	cmp	r3, #6
 8008374:	d010      	beq.n	8008398 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	681a      	ldr	r2, [r3, #0]
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	f042 0201 	orr.w	r2, r2, #1
 8008384:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008386:	e007      	b.n	8008398 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	681a      	ldr	r2, [r3, #0]
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	f042 0201 	orr.w	r2, r2, #1
 8008396:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008398:	2300      	movs	r3, #0
}
 800839a:	4618      	mov	r0, r3
 800839c:	3714      	adds	r7, #20
 800839e:	46bd      	mov	sp, r7
 80083a0:	bc80      	pop	{r7}
 80083a2:	4770      	bx	lr
 80083a4:	40010000 	.word	0x40010000
 80083a8:	40000400 	.word	0x40000400
 80083ac:	40000800 	.word	0x40000800
 80083b0:	40000c00 	.word	0x40000c00
 80083b4:	40010400 	.word	0x40010400
 80083b8:	40014000 	.word	0x40014000
 80083bc:	40001800 	.word	0x40001800

080083c0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80083c0:	b480      	push	{r7}
 80083c2:	b085      	sub	sp, #20
 80083c4:	af00      	add	r7, sp, #0
 80083c6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80083ce:	b2db      	uxtb	r3, r3
 80083d0:	2b01      	cmp	r3, #1
 80083d2:	d001      	beq.n	80083d8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80083d4:	2301      	movs	r3, #1
 80083d6:	e04e      	b.n	8008476 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	2202      	movs	r2, #2
 80083dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	68da      	ldr	r2, [r3, #12]
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	f042 0201 	orr.w	r2, r2, #1
 80083ee:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	4a22      	ldr	r2, [pc, #136]	; (8008480 <HAL_TIM_Base_Start_IT+0xc0>)
 80083f6:	4293      	cmp	r3, r2
 80083f8:	d022      	beq.n	8008440 <HAL_TIM_Base_Start_IT+0x80>
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008402:	d01d      	beq.n	8008440 <HAL_TIM_Base_Start_IT+0x80>
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	4a1e      	ldr	r2, [pc, #120]	; (8008484 <HAL_TIM_Base_Start_IT+0xc4>)
 800840a:	4293      	cmp	r3, r2
 800840c:	d018      	beq.n	8008440 <HAL_TIM_Base_Start_IT+0x80>
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	4a1d      	ldr	r2, [pc, #116]	; (8008488 <HAL_TIM_Base_Start_IT+0xc8>)
 8008414:	4293      	cmp	r3, r2
 8008416:	d013      	beq.n	8008440 <HAL_TIM_Base_Start_IT+0x80>
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	4a1b      	ldr	r2, [pc, #108]	; (800848c <HAL_TIM_Base_Start_IT+0xcc>)
 800841e:	4293      	cmp	r3, r2
 8008420:	d00e      	beq.n	8008440 <HAL_TIM_Base_Start_IT+0x80>
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	4a1a      	ldr	r2, [pc, #104]	; (8008490 <HAL_TIM_Base_Start_IT+0xd0>)
 8008428:	4293      	cmp	r3, r2
 800842a:	d009      	beq.n	8008440 <HAL_TIM_Base_Start_IT+0x80>
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	4a18      	ldr	r2, [pc, #96]	; (8008494 <HAL_TIM_Base_Start_IT+0xd4>)
 8008432:	4293      	cmp	r3, r2
 8008434:	d004      	beq.n	8008440 <HAL_TIM_Base_Start_IT+0x80>
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	4a17      	ldr	r2, [pc, #92]	; (8008498 <HAL_TIM_Base_Start_IT+0xd8>)
 800843c:	4293      	cmp	r3, r2
 800843e:	d111      	bne.n	8008464 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	689b      	ldr	r3, [r3, #8]
 8008446:	f003 0307 	and.w	r3, r3, #7
 800844a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	2b06      	cmp	r3, #6
 8008450:	d010      	beq.n	8008474 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	681a      	ldr	r2, [r3, #0]
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	f042 0201 	orr.w	r2, r2, #1
 8008460:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008462:	e007      	b.n	8008474 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	681a      	ldr	r2, [r3, #0]
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	f042 0201 	orr.w	r2, r2, #1
 8008472:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008474:	2300      	movs	r3, #0
}
 8008476:	4618      	mov	r0, r3
 8008478:	3714      	adds	r7, #20
 800847a:	46bd      	mov	sp, r7
 800847c:	bc80      	pop	{r7}
 800847e:	4770      	bx	lr
 8008480:	40010000 	.word	0x40010000
 8008484:	40000400 	.word	0x40000400
 8008488:	40000800 	.word	0x40000800
 800848c:	40000c00 	.word	0x40000c00
 8008490:	40010400 	.word	0x40010400
 8008494:	40014000 	.word	0x40014000
 8008498:	40001800 	.word	0x40001800

0800849c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800849c:	b580      	push	{r7, lr}
 800849e:	b082      	sub	sp, #8
 80084a0:	af00      	add	r7, sp, #0
 80084a2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	d101      	bne.n	80084ae <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80084aa:	2301      	movs	r3, #1
 80084ac:	e041      	b.n	8008532 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80084b4:	b2db      	uxtb	r3, r3
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	d106      	bne.n	80084c8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	2200      	movs	r2, #0
 80084be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80084c2:	6878      	ldr	r0, [r7, #4]
 80084c4:	f7fb fdce 	bl	8004064 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	2202      	movs	r2, #2
 80084cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	681a      	ldr	r2, [r3, #0]
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	3304      	adds	r3, #4
 80084d8:	4619      	mov	r1, r3
 80084da:	4610      	mov	r0, r2
 80084dc:	f000 fae0 	bl	8008aa0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	2201      	movs	r2, #1
 80084e4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	2201      	movs	r2, #1
 80084ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	2201      	movs	r2, #1
 80084f4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	2201      	movs	r2, #1
 80084fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	2201      	movs	r2, #1
 8008504:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	2201      	movs	r2, #1
 800850c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	2201      	movs	r2, #1
 8008514:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	2201      	movs	r2, #1
 800851c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	2201      	movs	r2, #1
 8008524:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	2201      	movs	r2, #1
 800852c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008530:	2300      	movs	r3, #0
}
 8008532:	4618      	mov	r0, r3
 8008534:	3708      	adds	r7, #8
 8008536:	46bd      	mov	sp, r7
 8008538:	bd80      	pop	{r7, pc}
	...

0800853c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800853c:	b580      	push	{r7, lr}
 800853e:	b084      	sub	sp, #16
 8008540:	af00      	add	r7, sp, #0
 8008542:	6078      	str	r0, [r7, #4]
 8008544:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8008546:	683b      	ldr	r3, [r7, #0]
 8008548:	2b00      	cmp	r3, #0
 800854a:	d109      	bne.n	8008560 <HAL_TIM_PWM_Start+0x24>
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008552:	b2db      	uxtb	r3, r3
 8008554:	2b01      	cmp	r3, #1
 8008556:	bf14      	ite	ne
 8008558:	2301      	movne	r3, #1
 800855a:	2300      	moveq	r3, #0
 800855c:	b2db      	uxtb	r3, r3
 800855e:	e022      	b.n	80085a6 <HAL_TIM_PWM_Start+0x6a>
 8008560:	683b      	ldr	r3, [r7, #0]
 8008562:	2b04      	cmp	r3, #4
 8008564:	d109      	bne.n	800857a <HAL_TIM_PWM_Start+0x3e>
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800856c:	b2db      	uxtb	r3, r3
 800856e:	2b01      	cmp	r3, #1
 8008570:	bf14      	ite	ne
 8008572:	2301      	movne	r3, #1
 8008574:	2300      	moveq	r3, #0
 8008576:	b2db      	uxtb	r3, r3
 8008578:	e015      	b.n	80085a6 <HAL_TIM_PWM_Start+0x6a>
 800857a:	683b      	ldr	r3, [r7, #0]
 800857c:	2b08      	cmp	r3, #8
 800857e:	d109      	bne.n	8008594 <HAL_TIM_PWM_Start+0x58>
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008586:	b2db      	uxtb	r3, r3
 8008588:	2b01      	cmp	r3, #1
 800858a:	bf14      	ite	ne
 800858c:	2301      	movne	r3, #1
 800858e:	2300      	moveq	r3, #0
 8008590:	b2db      	uxtb	r3, r3
 8008592:	e008      	b.n	80085a6 <HAL_TIM_PWM_Start+0x6a>
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800859a:	b2db      	uxtb	r3, r3
 800859c:	2b01      	cmp	r3, #1
 800859e:	bf14      	ite	ne
 80085a0:	2301      	movne	r3, #1
 80085a2:	2300      	moveq	r3, #0
 80085a4:	b2db      	uxtb	r3, r3
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d001      	beq.n	80085ae <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80085aa:	2301      	movs	r3, #1
 80085ac:	e07c      	b.n	80086a8 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80085ae:	683b      	ldr	r3, [r7, #0]
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	d104      	bne.n	80085be <HAL_TIM_PWM_Start+0x82>
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	2202      	movs	r2, #2
 80085b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80085bc:	e013      	b.n	80085e6 <HAL_TIM_PWM_Start+0xaa>
 80085be:	683b      	ldr	r3, [r7, #0]
 80085c0:	2b04      	cmp	r3, #4
 80085c2:	d104      	bne.n	80085ce <HAL_TIM_PWM_Start+0x92>
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	2202      	movs	r2, #2
 80085c8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80085cc:	e00b      	b.n	80085e6 <HAL_TIM_PWM_Start+0xaa>
 80085ce:	683b      	ldr	r3, [r7, #0]
 80085d0:	2b08      	cmp	r3, #8
 80085d2:	d104      	bne.n	80085de <HAL_TIM_PWM_Start+0xa2>
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	2202      	movs	r2, #2
 80085d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80085dc:	e003      	b.n	80085e6 <HAL_TIM_PWM_Start+0xaa>
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	2202      	movs	r2, #2
 80085e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	2201      	movs	r2, #1
 80085ec:	6839      	ldr	r1, [r7, #0]
 80085ee:	4618      	mov	r0, r3
 80085f0:	f000 fca0 	bl	8008f34 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	4a2d      	ldr	r2, [pc, #180]	; (80086b0 <HAL_TIM_PWM_Start+0x174>)
 80085fa:	4293      	cmp	r3, r2
 80085fc:	d004      	beq.n	8008608 <HAL_TIM_PWM_Start+0xcc>
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	4a2c      	ldr	r2, [pc, #176]	; (80086b4 <HAL_TIM_PWM_Start+0x178>)
 8008604:	4293      	cmp	r3, r2
 8008606:	d101      	bne.n	800860c <HAL_TIM_PWM_Start+0xd0>
 8008608:	2301      	movs	r3, #1
 800860a:	e000      	b.n	800860e <HAL_TIM_PWM_Start+0xd2>
 800860c:	2300      	movs	r3, #0
 800860e:	2b00      	cmp	r3, #0
 8008610:	d007      	beq.n	8008622 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008620:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	4a22      	ldr	r2, [pc, #136]	; (80086b0 <HAL_TIM_PWM_Start+0x174>)
 8008628:	4293      	cmp	r3, r2
 800862a:	d022      	beq.n	8008672 <HAL_TIM_PWM_Start+0x136>
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008634:	d01d      	beq.n	8008672 <HAL_TIM_PWM_Start+0x136>
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	4a1f      	ldr	r2, [pc, #124]	; (80086b8 <HAL_TIM_PWM_Start+0x17c>)
 800863c:	4293      	cmp	r3, r2
 800863e:	d018      	beq.n	8008672 <HAL_TIM_PWM_Start+0x136>
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	4a1d      	ldr	r2, [pc, #116]	; (80086bc <HAL_TIM_PWM_Start+0x180>)
 8008646:	4293      	cmp	r3, r2
 8008648:	d013      	beq.n	8008672 <HAL_TIM_PWM_Start+0x136>
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	4a1c      	ldr	r2, [pc, #112]	; (80086c0 <HAL_TIM_PWM_Start+0x184>)
 8008650:	4293      	cmp	r3, r2
 8008652:	d00e      	beq.n	8008672 <HAL_TIM_PWM_Start+0x136>
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	4a16      	ldr	r2, [pc, #88]	; (80086b4 <HAL_TIM_PWM_Start+0x178>)
 800865a:	4293      	cmp	r3, r2
 800865c:	d009      	beq.n	8008672 <HAL_TIM_PWM_Start+0x136>
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	4a18      	ldr	r2, [pc, #96]	; (80086c4 <HAL_TIM_PWM_Start+0x188>)
 8008664:	4293      	cmp	r3, r2
 8008666:	d004      	beq.n	8008672 <HAL_TIM_PWM_Start+0x136>
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	4a16      	ldr	r2, [pc, #88]	; (80086c8 <HAL_TIM_PWM_Start+0x18c>)
 800866e:	4293      	cmp	r3, r2
 8008670:	d111      	bne.n	8008696 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	689b      	ldr	r3, [r3, #8]
 8008678:	f003 0307 	and.w	r3, r3, #7
 800867c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	2b06      	cmp	r3, #6
 8008682:	d010      	beq.n	80086a6 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	681a      	ldr	r2, [r3, #0]
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	f042 0201 	orr.w	r2, r2, #1
 8008692:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008694:	e007      	b.n	80086a6 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	681a      	ldr	r2, [r3, #0]
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	f042 0201 	orr.w	r2, r2, #1
 80086a4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80086a6:	2300      	movs	r3, #0
}
 80086a8:	4618      	mov	r0, r3
 80086aa:	3710      	adds	r7, #16
 80086ac:	46bd      	mov	sp, r7
 80086ae:	bd80      	pop	{r7, pc}
 80086b0:	40010000 	.word	0x40010000
 80086b4:	40010400 	.word	0x40010400
 80086b8:	40000400 	.word	0x40000400
 80086bc:	40000800 	.word	0x40000800
 80086c0:	40000c00 	.word	0x40000c00
 80086c4:	40014000 	.word	0x40014000
 80086c8:	40001800 	.word	0x40001800

080086cc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80086cc:	b580      	push	{r7, lr}
 80086ce:	b082      	sub	sp, #8
 80086d0:	af00      	add	r7, sp, #0
 80086d2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	691b      	ldr	r3, [r3, #16]
 80086da:	f003 0302 	and.w	r3, r3, #2
 80086de:	2b02      	cmp	r3, #2
 80086e0:	d122      	bne.n	8008728 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	68db      	ldr	r3, [r3, #12]
 80086e8:	f003 0302 	and.w	r3, r3, #2
 80086ec:	2b02      	cmp	r3, #2
 80086ee:	d11b      	bne.n	8008728 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	f06f 0202 	mvn.w	r2, #2
 80086f8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	2201      	movs	r2, #1
 80086fe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	699b      	ldr	r3, [r3, #24]
 8008706:	f003 0303 	and.w	r3, r3, #3
 800870a:	2b00      	cmp	r3, #0
 800870c:	d003      	beq.n	8008716 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800870e:	6878      	ldr	r0, [r7, #4]
 8008710:	f000 f9ab 	bl	8008a6a <HAL_TIM_IC_CaptureCallback>
 8008714:	e005      	b.n	8008722 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008716:	6878      	ldr	r0, [r7, #4]
 8008718:	f000 f99e 	bl	8008a58 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800871c:	6878      	ldr	r0, [r7, #4]
 800871e:	f000 f9ad 	bl	8008a7c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	2200      	movs	r2, #0
 8008726:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	691b      	ldr	r3, [r3, #16]
 800872e:	f003 0304 	and.w	r3, r3, #4
 8008732:	2b04      	cmp	r3, #4
 8008734:	d122      	bne.n	800877c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	68db      	ldr	r3, [r3, #12]
 800873c:	f003 0304 	and.w	r3, r3, #4
 8008740:	2b04      	cmp	r3, #4
 8008742:	d11b      	bne.n	800877c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	f06f 0204 	mvn.w	r2, #4
 800874c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	2202      	movs	r2, #2
 8008752:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	699b      	ldr	r3, [r3, #24]
 800875a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800875e:	2b00      	cmp	r3, #0
 8008760:	d003      	beq.n	800876a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008762:	6878      	ldr	r0, [r7, #4]
 8008764:	f000 f981 	bl	8008a6a <HAL_TIM_IC_CaptureCallback>
 8008768:	e005      	b.n	8008776 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800876a:	6878      	ldr	r0, [r7, #4]
 800876c:	f000 f974 	bl	8008a58 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008770:	6878      	ldr	r0, [r7, #4]
 8008772:	f000 f983 	bl	8008a7c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	2200      	movs	r2, #0
 800877a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	691b      	ldr	r3, [r3, #16]
 8008782:	f003 0308 	and.w	r3, r3, #8
 8008786:	2b08      	cmp	r3, #8
 8008788:	d122      	bne.n	80087d0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	68db      	ldr	r3, [r3, #12]
 8008790:	f003 0308 	and.w	r3, r3, #8
 8008794:	2b08      	cmp	r3, #8
 8008796:	d11b      	bne.n	80087d0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	f06f 0208 	mvn.w	r2, #8
 80087a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	2204      	movs	r2, #4
 80087a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	69db      	ldr	r3, [r3, #28]
 80087ae:	f003 0303 	and.w	r3, r3, #3
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	d003      	beq.n	80087be <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80087b6:	6878      	ldr	r0, [r7, #4]
 80087b8:	f000 f957 	bl	8008a6a <HAL_TIM_IC_CaptureCallback>
 80087bc:	e005      	b.n	80087ca <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80087be:	6878      	ldr	r0, [r7, #4]
 80087c0:	f000 f94a 	bl	8008a58 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80087c4:	6878      	ldr	r0, [r7, #4]
 80087c6:	f000 f959 	bl	8008a7c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	2200      	movs	r2, #0
 80087ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	691b      	ldr	r3, [r3, #16]
 80087d6:	f003 0310 	and.w	r3, r3, #16
 80087da:	2b10      	cmp	r3, #16
 80087dc:	d122      	bne.n	8008824 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	68db      	ldr	r3, [r3, #12]
 80087e4:	f003 0310 	and.w	r3, r3, #16
 80087e8:	2b10      	cmp	r3, #16
 80087ea:	d11b      	bne.n	8008824 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	f06f 0210 	mvn.w	r2, #16
 80087f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	2208      	movs	r2, #8
 80087fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	69db      	ldr	r3, [r3, #28]
 8008802:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008806:	2b00      	cmp	r3, #0
 8008808:	d003      	beq.n	8008812 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800880a:	6878      	ldr	r0, [r7, #4]
 800880c:	f000 f92d 	bl	8008a6a <HAL_TIM_IC_CaptureCallback>
 8008810:	e005      	b.n	800881e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008812:	6878      	ldr	r0, [r7, #4]
 8008814:	f000 f920 	bl	8008a58 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008818:	6878      	ldr	r0, [r7, #4]
 800881a:	f000 f92f 	bl	8008a7c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	2200      	movs	r2, #0
 8008822:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	691b      	ldr	r3, [r3, #16]
 800882a:	f003 0301 	and.w	r3, r3, #1
 800882e:	2b01      	cmp	r3, #1
 8008830:	d10e      	bne.n	8008850 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	68db      	ldr	r3, [r3, #12]
 8008838:	f003 0301 	and.w	r3, r3, #1
 800883c:	2b01      	cmp	r3, #1
 800883e:	d107      	bne.n	8008850 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	f06f 0201 	mvn.w	r2, #1
 8008848:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800884a:	6878      	ldr	r0, [r7, #4]
 800884c:	f7fa fdee 	bl	800342c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	691b      	ldr	r3, [r3, #16]
 8008856:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800885a:	2b80      	cmp	r3, #128	; 0x80
 800885c:	d10e      	bne.n	800887c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	68db      	ldr	r3, [r3, #12]
 8008864:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008868:	2b80      	cmp	r3, #128	; 0x80
 800886a:	d107      	bne.n	800887c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008874:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008876:	6878      	ldr	r0, [r7, #4]
 8008878:	f000 fc03 	bl	8009082 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	691b      	ldr	r3, [r3, #16]
 8008882:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008886:	2b40      	cmp	r3, #64	; 0x40
 8008888:	d10e      	bne.n	80088a8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	68db      	ldr	r3, [r3, #12]
 8008890:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008894:	2b40      	cmp	r3, #64	; 0x40
 8008896:	d107      	bne.n	80088a8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80088a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80088a2:	6878      	ldr	r0, [r7, #4]
 80088a4:	f000 f8f3 	bl	8008a8e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	691b      	ldr	r3, [r3, #16]
 80088ae:	f003 0320 	and.w	r3, r3, #32
 80088b2:	2b20      	cmp	r3, #32
 80088b4:	d10e      	bne.n	80088d4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	68db      	ldr	r3, [r3, #12]
 80088bc:	f003 0320 	and.w	r3, r3, #32
 80088c0:	2b20      	cmp	r3, #32
 80088c2:	d107      	bne.n	80088d4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	f06f 0220 	mvn.w	r2, #32
 80088cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80088ce:	6878      	ldr	r0, [r7, #4]
 80088d0:	f000 fbce 	bl	8009070 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80088d4:	bf00      	nop
 80088d6:	3708      	adds	r7, #8
 80088d8:	46bd      	mov	sp, r7
 80088da:	bd80      	pop	{r7, pc}

080088dc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80088dc:	b580      	push	{r7, lr}
 80088de:	b084      	sub	sp, #16
 80088e0:	af00      	add	r7, sp, #0
 80088e2:	60f8      	str	r0, [r7, #12]
 80088e4:	60b9      	str	r1, [r7, #8]
 80088e6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80088e8:	68fb      	ldr	r3, [r7, #12]
 80088ea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80088ee:	2b01      	cmp	r3, #1
 80088f0:	d101      	bne.n	80088f6 <HAL_TIM_PWM_ConfigChannel+0x1a>
 80088f2:	2302      	movs	r3, #2
 80088f4:	e0ac      	b.n	8008a50 <HAL_TIM_PWM_ConfigChannel+0x174>
 80088f6:	68fb      	ldr	r3, [r7, #12]
 80088f8:	2201      	movs	r2, #1
 80088fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	2b0c      	cmp	r3, #12
 8008902:	f200 809f 	bhi.w	8008a44 <HAL_TIM_PWM_ConfigChannel+0x168>
 8008906:	a201      	add	r2, pc, #4	; (adr r2, 800890c <HAL_TIM_PWM_ConfigChannel+0x30>)
 8008908:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800890c:	08008941 	.word	0x08008941
 8008910:	08008a45 	.word	0x08008a45
 8008914:	08008a45 	.word	0x08008a45
 8008918:	08008a45 	.word	0x08008a45
 800891c:	08008981 	.word	0x08008981
 8008920:	08008a45 	.word	0x08008a45
 8008924:	08008a45 	.word	0x08008a45
 8008928:	08008a45 	.word	0x08008a45
 800892c:	080089c3 	.word	0x080089c3
 8008930:	08008a45 	.word	0x08008a45
 8008934:	08008a45 	.word	0x08008a45
 8008938:	08008a45 	.word	0x08008a45
 800893c:	08008a03 	.word	0x08008a03
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	68b9      	ldr	r1, [r7, #8]
 8008946:	4618      	mov	r0, r3
 8008948:	f000 f948 	bl	8008bdc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800894c:	68fb      	ldr	r3, [r7, #12]
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	699a      	ldr	r2, [r3, #24]
 8008952:	68fb      	ldr	r3, [r7, #12]
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	f042 0208 	orr.w	r2, r2, #8
 800895a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800895c:	68fb      	ldr	r3, [r7, #12]
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	699a      	ldr	r2, [r3, #24]
 8008962:	68fb      	ldr	r3, [r7, #12]
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	f022 0204 	bic.w	r2, r2, #4
 800896a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800896c:	68fb      	ldr	r3, [r7, #12]
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	6999      	ldr	r1, [r3, #24]
 8008972:	68bb      	ldr	r3, [r7, #8]
 8008974:	691a      	ldr	r2, [r3, #16]
 8008976:	68fb      	ldr	r3, [r7, #12]
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	430a      	orrs	r2, r1
 800897c:	619a      	str	r2, [r3, #24]
      break;
 800897e:	e062      	b.n	8008a46 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	68b9      	ldr	r1, [r7, #8]
 8008986:	4618      	mov	r0, r3
 8008988:	f000 f998 	bl	8008cbc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	699a      	ldr	r2, [r3, #24]
 8008992:	68fb      	ldr	r3, [r7, #12]
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800899a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800899c:	68fb      	ldr	r3, [r7, #12]
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	699a      	ldr	r2, [r3, #24]
 80089a2:	68fb      	ldr	r3, [r7, #12]
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80089aa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	6999      	ldr	r1, [r3, #24]
 80089b2:	68bb      	ldr	r3, [r7, #8]
 80089b4:	691b      	ldr	r3, [r3, #16]
 80089b6:	021a      	lsls	r2, r3, #8
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	430a      	orrs	r2, r1
 80089be:	619a      	str	r2, [r3, #24]
      break;
 80089c0:	e041      	b.n	8008a46 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80089c2:	68fb      	ldr	r3, [r7, #12]
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	68b9      	ldr	r1, [r7, #8]
 80089c8:	4618      	mov	r0, r3
 80089ca:	f000 f9eb 	bl	8008da4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80089ce:	68fb      	ldr	r3, [r7, #12]
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	69da      	ldr	r2, [r3, #28]
 80089d4:	68fb      	ldr	r3, [r7, #12]
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	f042 0208 	orr.w	r2, r2, #8
 80089dc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80089de:	68fb      	ldr	r3, [r7, #12]
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	69da      	ldr	r2, [r3, #28]
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	f022 0204 	bic.w	r2, r2, #4
 80089ec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	69d9      	ldr	r1, [r3, #28]
 80089f4:	68bb      	ldr	r3, [r7, #8]
 80089f6:	691a      	ldr	r2, [r3, #16]
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	430a      	orrs	r2, r1
 80089fe:	61da      	str	r2, [r3, #28]
      break;
 8008a00:	e021      	b.n	8008a46 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008a02:	68fb      	ldr	r3, [r7, #12]
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	68b9      	ldr	r1, [r7, #8]
 8008a08:	4618      	mov	r0, r3
 8008a0a:	f000 fa3f 	bl	8008e8c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008a0e:	68fb      	ldr	r3, [r7, #12]
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	69da      	ldr	r2, [r3, #28]
 8008a14:	68fb      	ldr	r3, [r7, #12]
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008a1c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008a1e:	68fb      	ldr	r3, [r7, #12]
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	69da      	ldr	r2, [r3, #28]
 8008a24:	68fb      	ldr	r3, [r7, #12]
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008a2c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008a2e:	68fb      	ldr	r3, [r7, #12]
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	69d9      	ldr	r1, [r3, #28]
 8008a34:	68bb      	ldr	r3, [r7, #8]
 8008a36:	691b      	ldr	r3, [r3, #16]
 8008a38:	021a      	lsls	r2, r3, #8
 8008a3a:	68fb      	ldr	r3, [r7, #12]
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	430a      	orrs	r2, r1
 8008a40:	61da      	str	r2, [r3, #28]
      break;
 8008a42:	e000      	b.n	8008a46 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8008a44:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008a46:	68fb      	ldr	r3, [r7, #12]
 8008a48:	2200      	movs	r2, #0
 8008a4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008a4e:	2300      	movs	r3, #0
}
 8008a50:	4618      	mov	r0, r3
 8008a52:	3710      	adds	r7, #16
 8008a54:	46bd      	mov	sp, r7
 8008a56:	bd80      	pop	{r7, pc}

08008a58 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008a58:	b480      	push	{r7}
 8008a5a:	b083      	sub	sp, #12
 8008a5c:	af00      	add	r7, sp, #0
 8008a5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008a60:	bf00      	nop
 8008a62:	370c      	adds	r7, #12
 8008a64:	46bd      	mov	sp, r7
 8008a66:	bc80      	pop	{r7}
 8008a68:	4770      	bx	lr

08008a6a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008a6a:	b480      	push	{r7}
 8008a6c:	b083      	sub	sp, #12
 8008a6e:	af00      	add	r7, sp, #0
 8008a70:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008a72:	bf00      	nop
 8008a74:	370c      	adds	r7, #12
 8008a76:	46bd      	mov	sp, r7
 8008a78:	bc80      	pop	{r7}
 8008a7a:	4770      	bx	lr

08008a7c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008a7c:	b480      	push	{r7}
 8008a7e:	b083      	sub	sp, #12
 8008a80:	af00      	add	r7, sp, #0
 8008a82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008a84:	bf00      	nop
 8008a86:	370c      	adds	r7, #12
 8008a88:	46bd      	mov	sp, r7
 8008a8a:	bc80      	pop	{r7}
 8008a8c:	4770      	bx	lr

08008a8e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008a8e:	b480      	push	{r7}
 8008a90:	b083      	sub	sp, #12
 8008a92:	af00      	add	r7, sp, #0
 8008a94:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008a96:	bf00      	nop
 8008a98:	370c      	adds	r7, #12
 8008a9a:	46bd      	mov	sp, r7
 8008a9c:	bc80      	pop	{r7}
 8008a9e:	4770      	bx	lr

08008aa0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008aa0:	b480      	push	{r7}
 8008aa2:	b085      	sub	sp, #20
 8008aa4:	af00      	add	r7, sp, #0
 8008aa6:	6078      	str	r0, [r7, #4]
 8008aa8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	4a3f      	ldr	r2, [pc, #252]	; (8008bb0 <TIM_Base_SetConfig+0x110>)
 8008ab4:	4293      	cmp	r3, r2
 8008ab6:	d013      	beq.n	8008ae0 <TIM_Base_SetConfig+0x40>
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008abe:	d00f      	beq.n	8008ae0 <TIM_Base_SetConfig+0x40>
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	4a3c      	ldr	r2, [pc, #240]	; (8008bb4 <TIM_Base_SetConfig+0x114>)
 8008ac4:	4293      	cmp	r3, r2
 8008ac6:	d00b      	beq.n	8008ae0 <TIM_Base_SetConfig+0x40>
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	4a3b      	ldr	r2, [pc, #236]	; (8008bb8 <TIM_Base_SetConfig+0x118>)
 8008acc:	4293      	cmp	r3, r2
 8008ace:	d007      	beq.n	8008ae0 <TIM_Base_SetConfig+0x40>
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	4a3a      	ldr	r2, [pc, #232]	; (8008bbc <TIM_Base_SetConfig+0x11c>)
 8008ad4:	4293      	cmp	r3, r2
 8008ad6:	d003      	beq.n	8008ae0 <TIM_Base_SetConfig+0x40>
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	4a39      	ldr	r2, [pc, #228]	; (8008bc0 <TIM_Base_SetConfig+0x120>)
 8008adc:	4293      	cmp	r3, r2
 8008ade:	d108      	bne.n	8008af2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008ae0:	68fb      	ldr	r3, [r7, #12]
 8008ae2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008ae6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008ae8:	683b      	ldr	r3, [r7, #0]
 8008aea:	685b      	ldr	r3, [r3, #4]
 8008aec:	68fa      	ldr	r2, [r7, #12]
 8008aee:	4313      	orrs	r3, r2
 8008af0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	4a2e      	ldr	r2, [pc, #184]	; (8008bb0 <TIM_Base_SetConfig+0x110>)
 8008af6:	4293      	cmp	r3, r2
 8008af8:	d02b      	beq.n	8008b52 <TIM_Base_SetConfig+0xb2>
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008b00:	d027      	beq.n	8008b52 <TIM_Base_SetConfig+0xb2>
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	4a2b      	ldr	r2, [pc, #172]	; (8008bb4 <TIM_Base_SetConfig+0x114>)
 8008b06:	4293      	cmp	r3, r2
 8008b08:	d023      	beq.n	8008b52 <TIM_Base_SetConfig+0xb2>
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	4a2a      	ldr	r2, [pc, #168]	; (8008bb8 <TIM_Base_SetConfig+0x118>)
 8008b0e:	4293      	cmp	r3, r2
 8008b10:	d01f      	beq.n	8008b52 <TIM_Base_SetConfig+0xb2>
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	4a29      	ldr	r2, [pc, #164]	; (8008bbc <TIM_Base_SetConfig+0x11c>)
 8008b16:	4293      	cmp	r3, r2
 8008b18:	d01b      	beq.n	8008b52 <TIM_Base_SetConfig+0xb2>
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	4a28      	ldr	r2, [pc, #160]	; (8008bc0 <TIM_Base_SetConfig+0x120>)
 8008b1e:	4293      	cmp	r3, r2
 8008b20:	d017      	beq.n	8008b52 <TIM_Base_SetConfig+0xb2>
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	4a27      	ldr	r2, [pc, #156]	; (8008bc4 <TIM_Base_SetConfig+0x124>)
 8008b26:	4293      	cmp	r3, r2
 8008b28:	d013      	beq.n	8008b52 <TIM_Base_SetConfig+0xb2>
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	4a26      	ldr	r2, [pc, #152]	; (8008bc8 <TIM_Base_SetConfig+0x128>)
 8008b2e:	4293      	cmp	r3, r2
 8008b30:	d00f      	beq.n	8008b52 <TIM_Base_SetConfig+0xb2>
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	4a25      	ldr	r2, [pc, #148]	; (8008bcc <TIM_Base_SetConfig+0x12c>)
 8008b36:	4293      	cmp	r3, r2
 8008b38:	d00b      	beq.n	8008b52 <TIM_Base_SetConfig+0xb2>
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	4a24      	ldr	r2, [pc, #144]	; (8008bd0 <TIM_Base_SetConfig+0x130>)
 8008b3e:	4293      	cmp	r3, r2
 8008b40:	d007      	beq.n	8008b52 <TIM_Base_SetConfig+0xb2>
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	4a23      	ldr	r2, [pc, #140]	; (8008bd4 <TIM_Base_SetConfig+0x134>)
 8008b46:	4293      	cmp	r3, r2
 8008b48:	d003      	beq.n	8008b52 <TIM_Base_SetConfig+0xb2>
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	4a22      	ldr	r2, [pc, #136]	; (8008bd8 <TIM_Base_SetConfig+0x138>)
 8008b4e:	4293      	cmp	r3, r2
 8008b50:	d108      	bne.n	8008b64 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008b52:	68fb      	ldr	r3, [r7, #12]
 8008b54:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008b58:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008b5a:	683b      	ldr	r3, [r7, #0]
 8008b5c:	68db      	ldr	r3, [r3, #12]
 8008b5e:	68fa      	ldr	r2, [r7, #12]
 8008b60:	4313      	orrs	r3, r2
 8008b62:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008b64:	68fb      	ldr	r3, [r7, #12]
 8008b66:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008b6a:	683b      	ldr	r3, [r7, #0]
 8008b6c:	695b      	ldr	r3, [r3, #20]
 8008b6e:	4313      	orrs	r3, r2
 8008b70:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	68fa      	ldr	r2, [r7, #12]
 8008b76:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008b78:	683b      	ldr	r3, [r7, #0]
 8008b7a:	689a      	ldr	r2, [r3, #8]
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008b80:	683b      	ldr	r3, [r7, #0]
 8008b82:	681a      	ldr	r2, [r3, #0]
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	4a09      	ldr	r2, [pc, #36]	; (8008bb0 <TIM_Base_SetConfig+0x110>)
 8008b8c:	4293      	cmp	r3, r2
 8008b8e:	d003      	beq.n	8008b98 <TIM_Base_SetConfig+0xf8>
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	4a0b      	ldr	r2, [pc, #44]	; (8008bc0 <TIM_Base_SetConfig+0x120>)
 8008b94:	4293      	cmp	r3, r2
 8008b96:	d103      	bne.n	8008ba0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008b98:	683b      	ldr	r3, [r7, #0]
 8008b9a:	691a      	ldr	r2, [r3, #16]
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	2201      	movs	r2, #1
 8008ba4:	615a      	str	r2, [r3, #20]
}
 8008ba6:	bf00      	nop
 8008ba8:	3714      	adds	r7, #20
 8008baa:	46bd      	mov	sp, r7
 8008bac:	bc80      	pop	{r7}
 8008bae:	4770      	bx	lr
 8008bb0:	40010000 	.word	0x40010000
 8008bb4:	40000400 	.word	0x40000400
 8008bb8:	40000800 	.word	0x40000800
 8008bbc:	40000c00 	.word	0x40000c00
 8008bc0:	40010400 	.word	0x40010400
 8008bc4:	40014000 	.word	0x40014000
 8008bc8:	40014400 	.word	0x40014400
 8008bcc:	40014800 	.word	0x40014800
 8008bd0:	40001800 	.word	0x40001800
 8008bd4:	40001c00 	.word	0x40001c00
 8008bd8:	40002000 	.word	0x40002000

08008bdc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008bdc:	b480      	push	{r7}
 8008bde:	b087      	sub	sp, #28
 8008be0:	af00      	add	r7, sp, #0
 8008be2:	6078      	str	r0, [r7, #4]
 8008be4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	6a1b      	ldr	r3, [r3, #32]
 8008bea:	f023 0201 	bic.w	r2, r3, #1
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	6a1b      	ldr	r3, [r3, #32]
 8008bf6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	685b      	ldr	r3, [r3, #4]
 8008bfc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	699b      	ldr	r3, [r3, #24]
 8008c02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008c0a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008c0c:	68fb      	ldr	r3, [r7, #12]
 8008c0e:	f023 0303 	bic.w	r3, r3, #3
 8008c12:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008c14:	683b      	ldr	r3, [r7, #0]
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	68fa      	ldr	r2, [r7, #12]
 8008c1a:	4313      	orrs	r3, r2
 8008c1c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008c1e:	697b      	ldr	r3, [r7, #20]
 8008c20:	f023 0302 	bic.w	r3, r3, #2
 8008c24:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008c26:	683b      	ldr	r3, [r7, #0]
 8008c28:	689b      	ldr	r3, [r3, #8]
 8008c2a:	697a      	ldr	r2, [r7, #20]
 8008c2c:	4313      	orrs	r3, r2
 8008c2e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	4a20      	ldr	r2, [pc, #128]	; (8008cb4 <TIM_OC1_SetConfig+0xd8>)
 8008c34:	4293      	cmp	r3, r2
 8008c36:	d003      	beq.n	8008c40 <TIM_OC1_SetConfig+0x64>
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	4a1f      	ldr	r2, [pc, #124]	; (8008cb8 <TIM_OC1_SetConfig+0xdc>)
 8008c3c:	4293      	cmp	r3, r2
 8008c3e:	d10c      	bne.n	8008c5a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008c40:	697b      	ldr	r3, [r7, #20]
 8008c42:	f023 0308 	bic.w	r3, r3, #8
 8008c46:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008c48:	683b      	ldr	r3, [r7, #0]
 8008c4a:	68db      	ldr	r3, [r3, #12]
 8008c4c:	697a      	ldr	r2, [r7, #20]
 8008c4e:	4313      	orrs	r3, r2
 8008c50:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008c52:	697b      	ldr	r3, [r7, #20]
 8008c54:	f023 0304 	bic.w	r3, r3, #4
 8008c58:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	4a15      	ldr	r2, [pc, #84]	; (8008cb4 <TIM_OC1_SetConfig+0xd8>)
 8008c5e:	4293      	cmp	r3, r2
 8008c60:	d003      	beq.n	8008c6a <TIM_OC1_SetConfig+0x8e>
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	4a14      	ldr	r2, [pc, #80]	; (8008cb8 <TIM_OC1_SetConfig+0xdc>)
 8008c66:	4293      	cmp	r3, r2
 8008c68:	d111      	bne.n	8008c8e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008c6a:	693b      	ldr	r3, [r7, #16]
 8008c6c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008c70:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008c72:	693b      	ldr	r3, [r7, #16]
 8008c74:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008c78:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008c7a:	683b      	ldr	r3, [r7, #0]
 8008c7c:	695b      	ldr	r3, [r3, #20]
 8008c7e:	693a      	ldr	r2, [r7, #16]
 8008c80:	4313      	orrs	r3, r2
 8008c82:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008c84:	683b      	ldr	r3, [r7, #0]
 8008c86:	699b      	ldr	r3, [r3, #24]
 8008c88:	693a      	ldr	r2, [r7, #16]
 8008c8a:	4313      	orrs	r3, r2
 8008c8c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	693a      	ldr	r2, [r7, #16]
 8008c92:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	68fa      	ldr	r2, [r7, #12]
 8008c98:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008c9a:	683b      	ldr	r3, [r7, #0]
 8008c9c:	685a      	ldr	r2, [r3, #4]
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	697a      	ldr	r2, [r7, #20]
 8008ca6:	621a      	str	r2, [r3, #32]
}
 8008ca8:	bf00      	nop
 8008caa:	371c      	adds	r7, #28
 8008cac:	46bd      	mov	sp, r7
 8008cae:	bc80      	pop	{r7}
 8008cb0:	4770      	bx	lr
 8008cb2:	bf00      	nop
 8008cb4:	40010000 	.word	0x40010000
 8008cb8:	40010400 	.word	0x40010400

08008cbc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008cbc:	b480      	push	{r7}
 8008cbe:	b087      	sub	sp, #28
 8008cc0:	af00      	add	r7, sp, #0
 8008cc2:	6078      	str	r0, [r7, #4]
 8008cc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	6a1b      	ldr	r3, [r3, #32]
 8008cca:	f023 0210 	bic.w	r2, r3, #16
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	6a1b      	ldr	r3, [r3, #32]
 8008cd6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	685b      	ldr	r3, [r3, #4]
 8008cdc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	699b      	ldr	r3, [r3, #24]
 8008ce2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008ce4:	68fb      	ldr	r3, [r7, #12]
 8008ce6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008cea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008cec:	68fb      	ldr	r3, [r7, #12]
 8008cee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008cf2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008cf4:	683b      	ldr	r3, [r7, #0]
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	021b      	lsls	r3, r3, #8
 8008cfa:	68fa      	ldr	r2, [r7, #12]
 8008cfc:	4313      	orrs	r3, r2
 8008cfe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008d00:	697b      	ldr	r3, [r7, #20]
 8008d02:	f023 0320 	bic.w	r3, r3, #32
 8008d06:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008d08:	683b      	ldr	r3, [r7, #0]
 8008d0a:	689b      	ldr	r3, [r3, #8]
 8008d0c:	011b      	lsls	r3, r3, #4
 8008d0e:	697a      	ldr	r2, [r7, #20]
 8008d10:	4313      	orrs	r3, r2
 8008d12:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	4a21      	ldr	r2, [pc, #132]	; (8008d9c <TIM_OC2_SetConfig+0xe0>)
 8008d18:	4293      	cmp	r3, r2
 8008d1a:	d003      	beq.n	8008d24 <TIM_OC2_SetConfig+0x68>
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	4a20      	ldr	r2, [pc, #128]	; (8008da0 <TIM_OC2_SetConfig+0xe4>)
 8008d20:	4293      	cmp	r3, r2
 8008d22:	d10d      	bne.n	8008d40 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008d24:	697b      	ldr	r3, [r7, #20]
 8008d26:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008d2a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008d2c:	683b      	ldr	r3, [r7, #0]
 8008d2e:	68db      	ldr	r3, [r3, #12]
 8008d30:	011b      	lsls	r3, r3, #4
 8008d32:	697a      	ldr	r2, [r7, #20]
 8008d34:	4313      	orrs	r3, r2
 8008d36:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008d38:	697b      	ldr	r3, [r7, #20]
 8008d3a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008d3e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	4a16      	ldr	r2, [pc, #88]	; (8008d9c <TIM_OC2_SetConfig+0xe0>)
 8008d44:	4293      	cmp	r3, r2
 8008d46:	d003      	beq.n	8008d50 <TIM_OC2_SetConfig+0x94>
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	4a15      	ldr	r2, [pc, #84]	; (8008da0 <TIM_OC2_SetConfig+0xe4>)
 8008d4c:	4293      	cmp	r3, r2
 8008d4e:	d113      	bne.n	8008d78 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008d50:	693b      	ldr	r3, [r7, #16]
 8008d52:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008d56:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008d58:	693b      	ldr	r3, [r7, #16]
 8008d5a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008d5e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008d60:	683b      	ldr	r3, [r7, #0]
 8008d62:	695b      	ldr	r3, [r3, #20]
 8008d64:	009b      	lsls	r3, r3, #2
 8008d66:	693a      	ldr	r2, [r7, #16]
 8008d68:	4313      	orrs	r3, r2
 8008d6a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008d6c:	683b      	ldr	r3, [r7, #0]
 8008d6e:	699b      	ldr	r3, [r3, #24]
 8008d70:	009b      	lsls	r3, r3, #2
 8008d72:	693a      	ldr	r2, [r7, #16]
 8008d74:	4313      	orrs	r3, r2
 8008d76:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	693a      	ldr	r2, [r7, #16]
 8008d7c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	68fa      	ldr	r2, [r7, #12]
 8008d82:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008d84:	683b      	ldr	r3, [r7, #0]
 8008d86:	685a      	ldr	r2, [r3, #4]
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	697a      	ldr	r2, [r7, #20]
 8008d90:	621a      	str	r2, [r3, #32]
}
 8008d92:	bf00      	nop
 8008d94:	371c      	adds	r7, #28
 8008d96:	46bd      	mov	sp, r7
 8008d98:	bc80      	pop	{r7}
 8008d9a:	4770      	bx	lr
 8008d9c:	40010000 	.word	0x40010000
 8008da0:	40010400 	.word	0x40010400

08008da4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008da4:	b480      	push	{r7}
 8008da6:	b087      	sub	sp, #28
 8008da8:	af00      	add	r7, sp, #0
 8008daa:	6078      	str	r0, [r7, #4]
 8008dac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	6a1b      	ldr	r3, [r3, #32]
 8008db2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	6a1b      	ldr	r3, [r3, #32]
 8008dbe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	685b      	ldr	r3, [r3, #4]
 8008dc4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	69db      	ldr	r3, [r3, #28]
 8008dca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008dcc:	68fb      	ldr	r3, [r7, #12]
 8008dce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008dd2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	f023 0303 	bic.w	r3, r3, #3
 8008dda:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008ddc:	683b      	ldr	r3, [r7, #0]
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	68fa      	ldr	r2, [r7, #12]
 8008de2:	4313      	orrs	r3, r2
 8008de4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008de6:	697b      	ldr	r3, [r7, #20]
 8008de8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008dec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008dee:	683b      	ldr	r3, [r7, #0]
 8008df0:	689b      	ldr	r3, [r3, #8]
 8008df2:	021b      	lsls	r3, r3, #8
 8008df4:	697a      	ldr	r2, [r7, #20]
 8008df6:	4313      	orrs	r3, r2
 8008df8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	4a21      	ldr	r2, [pc, #132]	; (8008e84 <TIM_OC3_SetConfig+0xe0>)
 8008dfe:	4293      	cmp	r3, r2
 8008e00:	d003      	beq.n	8008e0a <TIM_OC3_SetConfig+0x66>
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	4a20      	ldr	r2, [pc, #128]	; (8008e88 <TIM_OC3_SetConfig+0xe4>)
 8008e06:	4293      	cmp	r3, r2
 8008e08:	d10d      	bne.n	8008e26 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008e0a:	697b      	ldr	r3, [r7, #20]
 8008e0c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008e10:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008e12:	683b      	ldr	r3, [r7, #0]
 8008e14:	68db      	ldr	r3, [r3, #12]
 8008e16:	021b      	lsls	r3, r3, #8
 8008e18:	697a      	ldr	r2, [r7, #20]
 8008e1a:	4313      	orrs	r3, r2
 8008e1c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008e1e:	697b      	ldr	r3, [r7, #20]
 8008e20:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008e24:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	4a16      	ldr	r2, [pc, #88]	; (8008e84 <TIM_OC3_SetConfig+0xe0>)
 8008e2a:	4293      	cmp	r3, r2
 8008e2c:	d003      	beq.n	8008e36 <TIM_OC3_SetConfig+0x92>
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	4a15      	ldr	r2, [pc, #84]	; (8008e88 <TIM_OC3_SetConfig+0xe4>)
 8008e32:	4293      	cmp	r3, r2
 8008e34:	d113      	bne.n	8008e5e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008e36:	693b      	ldr	r3, [r7, #16]
 8008e38:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008e3c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008e3e:	693b      	ldr	r3, [r7, #16]
 8008e40:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008e44:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008e46:	683b      	ldr	r3, [r7, #0]
 8008e48:	695b      	ldr	r3, [r3, #20]
 8008e4a:	011b      	lsls	r3, r3, #4
 8008e4c:	693a      	ldr	r2, [r7, #16]
 8008e4e:	4313      	orrs	r3, r2
 8008e50:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008e52:	683b      	ldr	r3, [r7, #0]
 8008e54:	699b      	ldr	r3, [r3, #24]
 8008e56:	011b      	lsls	r3, r3, #4
 8008e58:	693a      	ldr	r2, [r7, #16]
 8008e5a:	4313      	orrs	r3, r2
 8008e5c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	693a      	ldr	r2, [r7, #16]
 8008e62:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	68fa      	ldr	r2, [r7, #12]
 8008e68:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008e6a:	683b      	ldr	r3, [r7, #0]
 8008e6c:	685a      	ldr	r2, [r3, #4]
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	697a      	ldr	r2, [r7, #20]
 8008e76:	621a      	str	r2, [r3, #32]
}
 8008e78:	bf00      	nop
 8008e7a:	371c      	adds	r7, #28
 8008e7c:	46bd      	mov	sp, r7
 8008e7e:	bc80      	pop	{r7}
 8008e80:	4770      	bx	lr
 8008e82:	bf00      	nop
 8008e84:	40010000 	.word	0x40010000
 8008e88:	40010400 	.word	0x40010400

08008e8c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008e8c:	b480      	push	{r7}
 8008e8e:	b087      	sub	sp, #28
 8008e90:	af00      	add	r7, sp, #0
 8008e92:	6078      	str	r0, [r7, #4]
 8008e94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	6a1b      	ldr	r3, [r3, #32]
 8008e9a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	6a1b      	ldr	r3, [r3, #32]
 8008ea6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	685b      	ldr	r3, [r3, #4]
 8008eac:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	69db      	ldr	r3, [r3, #28]
 8008eb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008eb4:	68fb      	ldr	r3, [r7, #12]
 8008eb6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008eba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008ebc:	68fb      	ldr	r3, [r7, #12]
 8008ebe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008ec2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008ec4:	683b      	ldr	r3, [r7, #0]
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	021b      	lsls	r3, r3, #8
 8008eca:	68fa      	ldr	r2, [r7, #12]
 8008ecc:	4313      	orrs	r3, r2
 8008ece:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008ed0:	693b      	ldr	r3, [r7, #16]
 8008ed2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008ed6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008ed8:	683b      	ldr	r3, [r7, #0]
 8008eda:	689b      	ldr	r3, [r3, #8]
 8008edc:	031b      	lsls	r3, r3, #12
 8008ede:	693a      	ldr	r2, [r7, #16]
 8008ee0:	4313      	orrs	r3, r2
 8008ee2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	4a11      	ldr	r2, [pc, #68]	; (8008f2c <TIM_OC4_SetConfig+0xa0>)
 8008ee8:	4293      	cmp	r3, r2
 8008eea:	d003      	beq.n	8008ef4 <TIM_OC4_SetConfig+0x68>
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	4a10      	ldr	r2, [pc, #64]	; (8008f30 <TIM_OC4_SetConfig+0xa4>)
 8008ef0:	4293      	cmp	r3, r2
 8008ef2:	d109      	bne.n	8008f08 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008ef4:	697b      	ldr	r3, [r7, #20]
 8008ef6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008efa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008efc:	683b      	ldr	r3, [r7, #0]
 8008efe:	695b      	ldr	r3, [r3, #20]
 8008f00:	019b      	lsls	r3, r3, #6
 8008f02:	697a      	ldr	r2, [r7, #20]
 8008f04:	4313      	orrs	r3, r2
 8008f06:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	697a      	ldr	r2, [r7, #20]
 8008f0c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	68fa      	ldr	r2, [r7, #12]
 8008f12:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008f14:	683b      	ldr	r3, [r7, #0]
 8008f16:	685a      	ldr	r2, [r3, #4]
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	693a      	ldr	r2, [r7, #16]
 8008f20:	621a      	str	r2, [r3, #32]
}
 8008f22:	bf00      	nop
 8008f24:	371c      	adds	r7, #28
 8008f26:	46bd      	mov	sp, r7
 8008f28:	bc80      	pop	{r7}
 8008f2a:	4770      	bx	lr
 8008f2c:	40010000 	.word	0x40010000
 8008f30:	40010400 	.word	0x40010400

08008f34 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008f34:	b480      	push	{r7}
 8008f36:	b087      	sub	sp, #28
 8008f38:	af00      	add	r7, sp, #0
 8008f3a:	60f8      	str	r0, [r7, #12]
 8008f3c:	60b9      	str	r1, [r7, #8]
 8008f3e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008f40:	68bb      	ldr	r3, [r7, #8]
 8008f42:	f003 031f 	and.w	r3, r3, #31
 8008f46:	2201      	movs	r2, #1
 8008f48:	fa02 f303 	lsl.w	r3, r2, r3
 8008f4c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008f4e:	68fb      	ldr	r3, [r7, #12]
 8008f50:	6a1a      	ldr	r2, [r3, #32]
 8008f52:	697b      	ldr	r3, [r7, #20]
 8008f54:	43db      	mvns	r3, r3
 8008f56:	401a      	ands	r2, r3
 8008f58:	68fb      	ldr	r3, [r7, #12]
 8008f5a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008f5c:	68fb      	ldr	r3, [r7, #12]
 8008f5e:	6a1a      	ldr	r2, [r3, #32]
 8008f60:	68bb      	ldr	r3, [r7, #8]
 8008f62:	f003 031f 	and.w	r3, r3, #31
 8008f66:	6879      	ldr	r1, [r7, #4]
 8008f68:	fa01 f303 	lsl.w	r3, r1, r3
 8008f6c:	431a      	orrs	r2, r3
 8008f6e:	68fb      	ldr	r3, [r7, #12]
 8008f70:	621a      	str	r2, [r3, #32]
}
 8008f72:	bf00      	nop
 8008f74:	371c      	adds	r7, #28
 8008f76:	46bd      	mov	sp, r7
 8008f78:	bc80      	pop	{r7}
 8008f7a:	4770      	bx	lr

08008f7c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008f7c:	b480      	push	{r7}
 8008f7e:	b085      	sub	sp, #20
 8008f80:	af00      	add	r7, sp, #0
 8008f82:	6078      	str	r0, [r7, #4]
 8008f84:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008f8c:	2b01      	cmp	r3, #1
 8008f8e:	d101      	bne.n	8008f94 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008f90:	2302      	movs	r3, #2
 8008f92:	e05a      	b.n	800904a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	2201      	movs	r2, #1
 8008f98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	2202      	movs	r2, #2
 8008fa0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	685b      	ldr	r3, [r3, #4]
 8008faa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	689b      	ldr	r3, [r3, #8]
 8008fb2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008fb4:	68fb      	ldr	r3, [r7, #12]
 8008fb6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008fba:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008fbc:	683b      	ldr	r3, [r7, #0]
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	68fa      	ldr	r2, [r7, #12]
 8008fc2:	4313      	orrs	r3, r2
 8008fc4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	68fa      	ldr	r2, [r7, #12]
 8008fcc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	4a20      	ldr	r2, [pc, #128]	; (8009054 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8008fd4:	4293      	cmp	r3, r2
 8008fd6:	d022      	beq.n	800901e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008fe0:	d01d      	beq.n	800901e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	4a1c      	ldr	r2, [pc, #112]	; (8009058 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8008fe8:	4293      	cmp	r3, r2
 8008fea:	d018      	beq.n	800901e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	4a1a      	ldr	r2, [pc, #104]	; (800905c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8008ff2:	4293      	cmp	r3, r2
 8008ff4:	d013      	beq.n	800901e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	4a19      	ldr	r2, [pc, #100]	; (8009060 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8008ffc:	4293      	cmp	r3, r2
 8008ffe:	d00e      	beq.n	800901e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	4a17      	ldr	r2, [pc, #92]	; (8009064 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8009006:	4293      	cmp	r3, r2
 8009008:	d009      	beq.n	800901e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	4a16      	ldr	r2, [pc, #88]	; (8009068 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8009010:	4293      	cmp	r3, r2
 8009012:	d004      	beq.n	800901e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	4a14      	ldr	r2, [pc, #80]	; (800906c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800901a:	4293      	cmp	r3, r2
 800901c:	d10c      	bne.n	8009038 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800901e:	68bb      	ldr	r3, [r7, #8]
 8009020:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009024:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009026:	683b      	ldr	r3, [r7, #0]
 8009028:	685b      	ldr	r3, [r3, #4]
 800902a:	68ba      	ldr	r2, [r7, #8]
 800902c:	4313      	orrs	r3, r2
 800902e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	68ba      	ldr	r2, [r7, #8]
 8009036:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	2201      	movs	r2, #1
 800903c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	2200      	movs	r2, #0
 8009044:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009048:	2300      	movs	r3, #0
}
 800904a:	4618      	mov	r0, r3
 800904c:	3714      	adds	r7, #20
 800904e:	46bd      	mov	sp, r7
 8009050:	bc80      	pop	{r7}
 8009052:	4770      	bx	lr
 8009054:	40010000 	.word	0x40010000
 8009058:	40000400 	.word	0x40000400
 800905c:	40000800 	.word	0x40000800
 8009060:	40000c00 	.word	0x40000c00
 8009064:	40010400 	.word	0x40010400
 8009068:	40014000 	.word	0x40014000
 800906c:	40001800 	.word	0x40001800

08009070 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009070:	b480      	push	{r7}
 8009072:	b083      	sub	sp, #12
 8009074:	af00      	add	r7, sp, #0
 8009076:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009078:	bf00      	nop
 800907a:	370c      	adds	r7, #12
 800907c:	46bd      	mov	sp, r7
 800907e:	bc80      	pop	{r7}
 8009080:	4770      	bx	lr

08009082 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009082:	b480      	push	{r7}
 8009084:	b083      	sub	sp, #12
 8009086:	af00      	add	r7, sp, #0
 8009088:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800908a:	bf00      	nop
 800908c:	370c      	adds	r7, #12
 800908e:	46bd      	mov	sp, r7
 8009090:	bc80      	pop	{r7}
 8009092:	4770      	bx	lr

08009094 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009094:	b084      	sub	sp, #16
 8009096:	b580      	push	{r7, lr}
 8009098:	b084      	sub	sp, #16
 800909a:	af00      	add	r7, sp, #0
 800909c:	6078      	str	r0, [r7, #4]
 800909e:	f107 001c 	add.w	r0, r7, #28
 80090a2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80090a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090a8:	2b01      	cmp	r3, #1
 80090aa:	d122      	bne.n	80090f2 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80090b0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	68db      	ldr	r3, [r3, #12]
 80090bc:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80090c0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80090c4:	687a      	ldr	r2, [r7, #4]
 80090c6:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	68db      	ldr	r3, [r3, #12]
 80090cc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80090d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80090d6:	2b01      	cmp	r3, #1
 80090d8:	d105      	bne.n	80090e6 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	68db      	ldr	r3, [r3, #12]
 80090de:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80090e6:	6878      	ldr	r0, [r7, #4]
 80090e8:	f001 fafa 	bl	800a6e0 <USB_CoreReset>
 80090ec:	4603      	mov	r3, r0
 80090ee:	73fb      	strb	r3, [r7, #15]
 80090f0:	e010      	b.n	8009114 <USB_CoreInit+0x80>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	68db      	ldr	r3, [r3, #12]
 80090f6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80090fe:	6878      	ldr	r0, [r7, #4]
 8009100:	f001 faee 	bl	800a6e0 <USB_CoreReset>
 8009104:	4603      	mov	r3, r0
 8009106:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800910c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8009114:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009116:	2b01      	cmp	r3, #1
 8009118:	d10b      	bne.n	8009132 <USB_CoreInit+0x9e>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	689b      	ldr	r3, [r3, #8]
 800911e:	f043 0206 	orr.w	r2, r3, #6
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	689b      	ldr	r3, [r3, #8]
 800912a:	f043 0220 	orr.w	r2, r3, #32
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8009132:	7bfb      	ldrb	r3, [r7, #15]
}
 8009134:	4618      	mov	r0, r3
 8009136:	3710      	adds	r7, #16
 8009138:	46bd      	mov	sp, r7
 800913a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800913e:	b004      	add	sp, #16
 8009140:	4770      	bx	lr
	...

08009144 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8009144:	b480      	push	{r7}
 8009146:	b087      	sub	sp, #28
 8009148:	af00      	add	r7, sp, #0
 800914a:	60f8      	str	r0, [r7, #12]
 800914c:	60b9      	str	r1, [r7, #8]
 800914e:	4613      	mov	r3, r2
 8009150:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8009152:	79fb      	ldrb	r3, [r7, #7]
 8009154:	2b02      	cmp	r3, #2
 8009156:	d165      	bne.n	8009224 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8009158:	68bb      	ldr	r3, [r7, #8]
 800915a:	4a41      	ldr	r2, [pc, #260]	; (8009260 <USB_SetTurnaroundTime+0x11c>)
 800915c:	4293      	cmp	r3, r2
 800915e:	d906      	bls.n	800916e <USB_SetTurnaroundTime+0x2a>
 8009160:	68bb      	ldr	r3, [r7, #8]
 8009162:	4a40      	ldr	r2, [pc, #256]	; (8009264 <USB_SetTurnaroundTime+0x120>)
 8009164:	4293      	cmp	r3, r2
 8009166:	d202      	bcs.n	800916e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8009168:	230f      	movs	r3, #15
 800916a:	617b      	str	r3, [r7, #20]
 800916c:	e062      	b.n	8009234 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800916e:	68bb      	ldr	r3, [r7, #8]
 8009170:	4a3c      	ldr	r2, [pc, #240]	; (8009264 <USB_SetTurnaroundTime+0x120>)
 8009172:	4293      	cmp	r3, r2
 8009174:	d306      	bcc.n	8009184 <USB_SetTurnaroundTime+0x40>
 8009176:	68bb      	ldr	r3, [r7, #8]
 8009178:	4a3b      	ldr	r2, [pc, #236]	; (8009268 <USB_SetTurnaroundTime+0x124>)
 800917a:	4293      	cmp	r3, r2
 800917c:	d202      	bcs.n	8009184 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800917e:	230e      	movs	r3, #14
 8009180:	617b      	str	r3, [r7, #20]
 8009182:	e057      	b.n	8009234 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8009184:	68bb      	ldr	r3, [r7, #8]
 8009186:	4a38      	ldr	r2, [pc, #224]	; (8009268 <USB_SetTurnaroundTime+0x124>)
 8009188:	4293      	cmp	r3, r2
 800918a:	d306      	bcc.n	800919a <USB_SetTurnaroundTime+0x56>
 800918c:	68bb      	ldr	r3, [r7, #8]
 800918e:	4a37      	ldr	r2, [pc, #220]	; (800926c <USB_SetTurnaroundTime+0x128>)
 8009190:	4293      	cmp	r3, r2
 8009192:	d202      	bcs.n	800919a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8009194:	230d      	movs	r3, #13
 8009196:	617b      	str	r3, [r7, #20]
 8009198:	e04c      	b.n	8009234 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800919a:	68bb      	ldr	r3, [r7, #8]
 800919c:	4a33      	ldr	r2, [pc, #204]	; (800926c <USB_SetTurnaroundTime+0x128>)
 800919e:	4293      	cmp	r3, r2
 80091a0:	d306      	bcc.n	80091b0 <USB_SetTurnaroundTime+0x6c>
 80091a2:	68bb      	ldr	r3, [r7, #8]
 80091a4:	4a32      	ldr	r2, [pc, #200]	; (8009270 <USB_SetTurnaroundTime+0x12c>)
 80091a6:	4293      	cmp	r3, r2
 80091a8:	d802      	bhi.n	80091b0 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80091aa:	230c      	movs	r3, #12
 80091ac:	617b      	str	r3, [r7, #20]
 80091ae:	e041      	b.n	8009234 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80091b0:	68bb      	ldr	r3, [r7, #8]
 80091b2:	4a2f      	ldr	r2, [pc, #188]	; (8009270 <USB_SetTurnaroundTime+0x12c>)
 80091b4:	4293      	cmp	r3, r2
 80091b6:	d906      	bls.n	80091c6 <USB_SetTurnaroundTime+0x82>
 80091b8:	68bb      	ldr	r3, [r7, #8]
 80091ba:	4a2e      	ldr	r2, [pc, #184]	; (8009274 <USB_SetTurnaroundTime+0x130>)
 80091bc:	4293      	cmp	r3, r2
 80091be:	d802      	bhi.n	80091c6 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80091c0:	230b      	movs	r3, #11
 80091c2:	617b      	str	r3, [r7, #20]
 80091c4:	e036      	b.n	8009234 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80091c6:	68bb      	ldr	r3, [r7, #8]
 80091c8:	4a2a      	ldr	r2, [pc, #168]	; (8009274 <USB_SetTurnaroundTime+0x130>)
 80091ca:	4293      	cmp	r3, r2
 80091cc:	d906      	bls.n	80091dc <USB_SetTurnaroundTime+0x98>
 80091ce:	68bb      	ldr	r3, [r7, #8]
 80091d0:	4a29      	ldr	r2, [pc, #164]	; (8009278 <USB_SetTurnaroundTime+0x134>)
 80091d2:	4293      	cmp	r3, r2
 80091d4:	d802      	bhi.n	80091dc <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80091d6:	230a      	movs	r3, #10
 80091d8:	617b      	str	r3, [r7, #20]
 80091da:	e02b      	b.n	8009234 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80091dc:	68bb      	ldr	r3, [r7, #8]
 80091de:	4a26      	ldr	r2, [pc, #152]	; (8009278 <USB_SetTurnaroundTime+0x134>)
 80091e0:	4293      	cmp	r3, r2
 80091e2:	d906      	bls.n	80091f2 <USB_SetTurnaroundTime+0xae>
 80091e4:	68bb      	ldr	r3, [r7, #8]
 80091e6:	4a25      	ldr	r2, [pc, #148]	; (800927c <USB_SetTurnaroundTime+0x138>)
 80091e8:	4293      	cmp	r3, r2
 80091ea:	d202      	bcs.n	80091f2 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80091ec:	2309      	movs	r3, #9
 80091ee:	617b      	str	r3, [r7, #20]
 80091f0:	e020      	b.n	8009234 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80091f2:	68bb      	ldr	r3, [r7, #8]
 80091f4:	4a21      	ldr	r2, [pc, #132]	; (800927c <USB_SetTurnaroundTime+0x138>)
 80091f6:	4293      	cmp	r3, r2
 80091f8:	d306      	bcc.n	8009208 <USB_SetTurnaroundTime+0xc4>
 80091fa:	68bb      	ldr	r3, [r7, #8]
 80091fc:	4a20      	ldr	r2, [pc, #128]	; (8009280 <USB_SetTurnaroundTime+0x13c>)
 80091fe:	4293      	cmp	r3, r2
 8009200:	d802      	bhi.n	8009208 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8009202:	2308      	movs	r3, #8
 8009204:	617b      	str	r3, [r7, #20]
 8009206:	e015      	b.n	8009234 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8009208:	68bb      	ldr	r3, [r7, #8]
 800920a:	4a1d      	ldr	r2, [pc, #116]	; (8009280 <USB_SetTurnaroundTime+0x13c>)
 800920c:	4293      	cmp	r3, r2
 800920e:	d906      	bls.n	800921e <USB_SetTurnaroundTime+0xda>
 8009210:	68bb      	ldr	r3, [r7, #8]
 8009212:	4a1c      	ldr	r2, [pc, #112]	; (8009284 <USB_SetTurnaroundTime+0x140>)
 8009214:	4293      	cmp	r3, r2
 8009216:	d202      	bcs.n	800921e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8009218:	2307      	movs	r3, #7
 800921a:	617b      	str	r3, [r7, #20]
 800921c:	e00a      	b.n	8009234 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800921e:	2306      	movs	r3, #6
 8009220:	617b      	str	r3, [r7, #20]
 8009222:	e007      	b.n	8009234 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8009224:	79fb      	ldrb	r3, [r7, #7]
 8009226:	2b00      	cmp	r3, #0
 8009228:	d102      	bne.n	8009230 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800922a:	2309      	movs	r3, #9
 800922c:	617b      	str	r3, [r7, #20]
 800922e:	e001      	b.n	8009234 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8009230:	2309      	movs	r3, #9
 8009232:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8009234:	68fb      	ldr	r3, [r7, #12]
 8009236:	68db      	ldr	r3, [r3, #12]
 8009238:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800923c:	68fb      	ldr	r3, [r7, #12]
 800923e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8009240:	68fb      	ldr	r3, [r7, #12]
 8009242:	68da      	ldr	r2, [r3, #12]
 8009244:	697b      	ldr	r3, [r7, #20]
 8009246:	029b      	lsls	r3, r3, #10
 8009248:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800924c:	431a      	orrs	r2, r3
 800924e:	68fb      	ldr	r3, [r7, #12]
 8009250:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8009252:	2300      	movs	r3, #0
}
 8009254:	4618      	mov	r0, r3
 8009256:	371c      	adds	r7, #28
 8009258:	46bd      	mov	sp, r7
 800925a:	bc80      	pop	{r7}
 800925c:	4770      	bx	lr
 800925e:	bf00      	nop
 8009260:	00d8acbf 	.word	0x00d8acbf
 8009264:	00e4e1c0 	.word	0x00e4e1c0
 8009268:	00f42400 	.word	0x00f42400
 800926c:	01067380 	.word	0x01067380
 8009270:	011a499f 	.word	0x011a499f
 8009274:	01312cff 	.word	0x01312cff
 8009278:	014ca43f 	.word	0x014ca43f
 800927c:	016e3600 	.word	0x016e3600
 8009280:	01a6ab1f 	.word	0x01a6ab1f
 8009284:	01e84800 	.word	0x01e84800

08009288 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009288:	b480      	push	{r7}
 800928a:	b083      	sub	sp, #12
 800928c:	af00      	add	r7, sp, #0
 800928e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	689b      	ldr	r3, [r3, #8]
 8009294:	f043 0201 	orr.w	r2, r3, #1
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800929c:	2300      	movs	r3, #0
}
 800929e:	4618      	mov	r0, r3
 80092a0:	370c      	adds	r7, #12
 80092a2:	46bd      	mov	sp, r7
 80092a4:	bc80      	pop	{r7}
 80092a6:	4770      	bx	lr

080092a8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80092a8:	b480      	push	{r7}
 80092aa:	b083      	sub	sp, #12
 80092ac:	af00      	add	r7, sp, #0
 80092ae:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	689b      	ldr	r3, [r3, #8]
 80092b4:	f023 0201 	bic.w	r2, r3, #1
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80092bc:	2300      	movs	r3, #0
}
 80092be:	4618      	mov	r0, r3
 80092c0:	370c      	adds	r7, #12
 80092c2:	46bd      	mov	sp, r7
 80092c4:	bc80      	pop	{r7}
 80092c6:	4770      	bx	lr

080092c8 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80092c8:	b580      	push	{r7, lr}
 80092ca:	b084      	sub	sp, #16
 80092cc:	af00      	add	r7, sp, #0
 80092ce:	6078      	str	r0, [r7, #4]
 80092d0:	460b      	mov	r3, r1
 80092d2:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80092d4:	2300      	movs	r3, #0
 80092d6:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	68db      	ldr	r3, [r3, #12]
 80092dc:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80092e4:	78fb      	ldrb	r3, [r7, #3]
 80092e6:	2b01      	cmp	r3, #1
 80092e8:	d115      	bne.n	8009316 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	68db      	ldr	r3, [r3, #12]
 80092ee:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80092f6:	2001      	movs	r0, #1
 80092f8:	f7fb f8de 	bl	80044b8 <HAL_Delay>
      ms++;
 80092fc:	68fb      	ldr	r3, [r7, #12]
 80092fe:	3301      	adds	r3, #1
 8009300:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8009302:	6878      	ldr	r0, [r7, #4]
 8009304:	f001 f961 	bl	800a5ca <USB_GetMode>
 8009308:	4603      	mov	r3, r0
 800930a:	2b01      	cmp	r3, #1
 800930c:	d01e      	beq.n	800934c <USB_SetCurrentMode+0x84>
 800930e:	68fb      	ldr	r3, [r7, #12]
 8009310:	2b31      	cmp	r3, #49	; 0x31
 8009312:	d9f0      	bls.n	80092f6 <USB_SetCurrentMode+0x2e>
 8009314:	e01a      	b.n	800934c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8009316:	78fb      	ldrb	r3, [r7, #3]
 8009318:	2b00      	cmp	r3, #0
 800931a:	d115      	bne.n	8009348 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	68db      	ldr	r3, [r3, #12]
 8009320:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8009328:	2001      	movs	r0, #1
 800932a:	f7fb f8c5 	bl	80044b8 <HAL_Delay>
      ms++;
 800932e:	68fb      	ldr	r3, [r7, #12]
 8009330:	3301      	adds	r3, #1
 8009332:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8009334:	6878      	ldr	r0, [r7, #4]
 8009336:	f001 f948 	bl	800a5ca <USB_GetMode>
 800933a:	4603      	mov	r3, r0
 800933c:	2b00      	cmp	r3, #0
 800933e:	d005      	beq.n	800934c <USB_SetCurrentMode+0x84>
 8009340:	68fb      	ldr	r3, [r7, #12]
 8009342:	2b31      	cmp	r3, #49	; 0x31
 8009344:	d9f0      	bls.n	8009328 <USB_SetCurrentMode+0x60>
 8009346:	e001      	b.n	800934c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8009348:	2301      	movs	r3, #1
 800934a:	e005      	b.n	8009358 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800934c:	68fb      	ldr	r3, [r7, #12]
 800934e:	2b32      	cmp	r3, #50	; 0x32
 8009350:	d101      	bne.n	8009356 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8009352:	2301      	movs	r3, #1
 8009354:	e000      	b.n	8009358 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8009356:	2300      	movs	r3, #0
}
 8009358:	4618      	mov	r0, r3
 800935a:	3710      	adds	r7, #16
 800935c:	46bd      	mov	sp, r7
 800935e:	bd80      	pop	{r7, pc}

08009360 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009360:	b084      	sub	sp, #16
 8009362:	b580      	push	{r7, lr}
 8009364:	b086      	sub	sp, #24
 8009366:	af00      	add	r7, sp, #0
 8009368:	6078      	str	r0, [r7, #4]
 800936a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800936e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8009372:	2300      	movs	r3, #0
 8009374:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800937a:	2300      	movs	r3, #0
 800937c:	613b      	str	r3, [r7, #16]
 800937e:	e009      	b.n	8009394 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8009380:	687a      	ldr	r2, [r7, #4]
 8009382:	693b      	ldr	r3, [r7, #16]
 8009384:	3340      	adds	r3, #64	; 0x40
 8009386:	009b      	lsls	r3, r3, #2
 8009388:	4413      	add	r3, r2
 800938a:	2200      	movs	r2, #0
 800938c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800938e:	693b      	ldr	r3, [r7, #16]
 8009390:	3301      	adds	r3, #1
 8009392:	613b      	str	r3, [r7, #16]
 8009394:	693b      	ldr	r3, [r7, #16]
 8009396:	2b0e      	cmp	r3, #14
 8009398:	d9f2      	bls.n	8009380 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800939a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800939c:	2b00      	cmp	r3, #0
 800939e:	d11c      	bne.n	80093da <USB_DevInit+0x7a>
  {
    /*
     * disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80093a0:	68fb      	ldr	r3, [r7, #12]
 80093a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80093a6:	685b      	ldr	r3, [r3, #4]
 80093a8:	68fa      	ldr	r2, [r7, #12]
 80093aa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80093ae:	f043 0302 	orr.w	r3, r3, #2
 80093b2:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093b8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093c4:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093d0:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	639a      	str	r2, [r3, #56]	; 0x38
 80093d8:	e00b      	b.n	80093f2 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093de:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093ea:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80093f2:	68fb      	ldr	r3, [r7, #12]
 80093f4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80093f8:	461a      	mov	r2, r3
 80093fa:	2300      	movs	r3, #0
 80093fc:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80093fe:	68fb      	ldr	r3, [r7, #12]
 8009400:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009404:	4619      	mov	r1, r3
 8009406:	68fb      	ldr	r3, [r7, #12]
 8009408:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800940c:	461a      	mov	r2, r3
 800940e:	680b      	ldr	r3, [r1, #0]
 8009410:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8009412:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009414:	2b01      	cmp	r3, #1
 8009416:	d10c      	bne.n	8009432 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8009418:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800941a:	2b00      	cmp	r3, #0
 800941c:	d104      	bne.n	8009428 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800941e:	2100      	movs	r1, #0
 8009420:	6878      	ldr	r0, [r7, #4]
 8009422:	f000 f945 	bl	80096b0 <USB_SetDevSpeed>
 8009426:	e008      	b.n	800943a <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8009428:	2101      	movs	r1, #1
 800942a:	6878      	ldr	r0, [r7, #4]
 800942c:	f000 f940 	bl	80096b0 <USB_SetDevSpeed>
 8009430:	e003      	b.n	800943a <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8009432:	2103      	movs	r1, #3
 8009434:	6878      	ldr	r0, [r7, #4]
 8009436:	f000 f93b 	bl	80096b0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800943a:	2110      	movs	r1, #16
 800943c:	6878      	ldr	r0, [r7, #4]
 800943e:	f000 f8f3 	bl	8009628 <USB_FlushTxFifo>
 8009442:	4603      	mov	r3, r0
 8009444:	2b00      	cmp	r3, #0
 8009446:	d001      	beq.n	800944c <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8009448:	2301      	movs	r3, #1
 800944a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800944c:	6878      	ldr	r0, [r7, #4]
 800944e:	f000 f90f 	bl	8009670 <USB_FlushRxFifo>
 8009452:	4603      	mov	r3, r0
 8009454:	2b00      	cmp	r3, #0
 8009456:	d001      	beq.n	800945c <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8009458:	2301      	movs	r3, #1
 800945a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800945c:	68fb      	ldr	r3, [r7, #12]
 800945e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009462:	461a      	mov	r2, r3
 8009464:	2300      	movs	r3, #0
 8009466:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8009468:	68fb      	ldr	r3, [r7, #12]
 800946a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800946e:	461a      	mov	r2, r3
 8009470:	2300      	movs	r3, #0
 8009472:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8009474:	68fb      	ldr	r3, [r7, #12]
 8009476:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800947a:	461a      	mov	r2, r3
 800947c:	2300      	movs	r3, #0
 800947e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009480:	2300      	movs	r3, #0
 8009482:	613b      	str	r3, [r7, #16]
 8009484:	e043      	b.n	800950e <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009486:	693b      	ldr	r3, [r7, #16]
 8009488:	015a      	lsls	r2, r3, #5
 800948a:	68fb      	ldr	r3, [r7, #12]
 800948c:	4413      	add	r3, r2
 800948e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009498:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800949c:	d118      	bne.n	80094d0 <USB_DevInit+0x170>
    {
      if (i == 0U)
 800949e:	693b      	ldr	r3, [r7, #16]
 80094a0:	2b00      	cmp	r3, #0
 80094a2:	d10a      	bne.n	80094ba <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80094a4:	693b      	ldr	r3, [r7, #16]
 80094a6:	015a      	lsls	r2, r3, #5
 80094a8:	68fb      	ldr	r3, [r7, #12]
 80094aa:	4413      	add	r3, r2
 80094ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80094b0:	461a      	mov	r2, r3
 80094b2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80094b6:	6013      	str	r3, [r2, #0]
 80094b8:	e013      	b.n	80094e2 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80094ba:	693b      	ldr	r3, [r7, #16]
 80094bc:	015a      	lsls	r2, r3, #5
 80094be:	68fb      	ldr	r3, [r7, #12]
 80094c0:	4413      	add	r3, r2
 80094c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80094c6:	461a      	mov	r2, r3
 80094c8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80094cc:	6013      	str	r3, [r2, #0]
 80094ce:	e008      	b.n	80094e2 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80094d0:	693b      	ldr	r3, [r7, #16]
 80094d2:	015a      	lsls	r2, r3, #5
 80094d4:	68fb      	ldr	r3, [r7, #12]
 80094d6:	4413      	add	r3, r2
 80094d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80094dc:	461a      	mov	r2, r3
 80094de:	2300      	movs	r3, #0
 80094e0:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80094e2:	693b      	ldr	r3, [r7, #16]
 80094e4:	015a      	lsls	r2, r3, #5
 80094e6:	68fb      	ldr	r3, [r7, #12]
 80094e8:	4413      	add	r3, r2
 80094ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80094ee:	461a      	mov	r2, r3
 80094f0:	2300      	movs	r3, #0
 80094f2:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80094f4:	693b      	ldr	r3, [r7, #16]
 80094f6:	015a      	lsls	r2, r3, #5
 80094f8:	68fb      	ldr	r3, [r7, #12]
 80094fa:	4413      	add	r3, r2
 80094fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009500:	461a      	mov	r2, r3
 8009502:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8009506:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009508:	693b      	ldr	r3, [r7, #16]
 800950a:	3301      	adds	r3, #1
 800950c:	613b      	str	r3, [r7, #16]
 800950e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009510:	693a      	ldr	r2, [r7, #16]
 8009512:	429a      	cmp	r2, r3
 8009514:	d3b7      	bcc.n	8009486 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009516:	2300      	movs	r3, #0
 8009518:	613b      	str	r3, [r7, #16]
 800951a:	e043      	b.n	80095a4 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800951c:	693b      	ldr	r3, [r7, #16]
 800951e:	015a      	lsls	r2, r3, #5
 8009520:	68fb      	ldr	r3, [r7, #12]
 8009522:	4413      	add	r3, r2
 8009524:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009528:	681b      	ldr	r3, [r3, #0]
 800952a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800952e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009532:	d118      	bne.n	8009566 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8009534:	693b      	ldr	r3, [r7, #16]
 8009536:	2b00      	cmp	r3, #0
 8009538:	d10a      	bne.n	8009550 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800953a:	693b      	ldr	r3, [r7, #16]
 800953c:	015a      	lsls	r2, r3, #5
 800953e:	68fb      	ldr	r3, [r7, #12]
 8009540:	4413      	add	r3, r2
 8009542:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009546:	461a      	mov	r2, r3
 8009548:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800954c:	6013      	str	r3, [r2, #0]
 800954e:	e013      	b.n	8009578 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8009550:	693b      	ldr	r3, [r7, #16]
 8009552:	015a      	lsls	r2, r3, #5
 8009554:	68fb      	ldr	r3, [r7, #12]
 8009556:	4413      	add	r3, r2
 8009558:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800955c:	461a      	mov	r2, r3
 800955e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8009562:	6013      	str	r3, [r2, #0]
 8009564:	e008      	b.n	8009578 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8009566:	693b      	ldr	r3, [r7, #16]
 8009568:	015a      	lsls	r2, r3, #5
 800956a:	68fb      	ldr	r3, [r7, #12]
 800956c:	4413      	add	r3, r2
 800956e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009572:	461a      	mov	r2, r3
 8009574:	2300      	movs	r3, #0
 8009576:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8009578:	693b      	ldr	r3, [r7, #16]
 800957a:	015a      	lsls	r2, r3, #5
 800957c:	68fb      	ldr	r3, [r7, #12]
 800957e:	4413      	add	r3, r2
 8009580:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009584:	461a      	mov	r2, r3
 8009586:	2300      	movs	r3, #0
 8009588:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800958a:	693b      	ldr	r3, [r7, #16]
 800958c:	015a      	lsls	r2, r3, #5
 800958e:	68fb      	ldr	r3, [r7, #12]
 8009590:	4413      	add	r3, r2
 8009592:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009596:	461a      	mov	r2, r3
 8009598:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800959c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800959e:	693b      	ldr	r3, [r7, #16]
 80095a0:	3301      	adds	r3, #1
 80095a2:	613b      	str	r3, [r7, #16]
 80095a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095a6:	693a      	ldr	r2, [r7, #16]
 80095a8:	429a      	cmp	r2, r3
 80095aa:	d3b7      	bcc.n	800951c <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80095ac:	68fb      	ldr	r3, [r7, #12]
 80095ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80095b2:	691b      	ldr	r3, [r3, #16]
 80095b4:	68fa      	ldr	r2, [r7, #12]
 80095b6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80095ba:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80095be:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	2200      	movs	r2, #0
 80095c4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80095cc:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80095ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095d0:	2b00      	cmp	r3, #0
 80095d2:	d105      	bne.n	80095e0 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	699b      	ldr	r3, [r3, #24]
 80095d8:	f043 0210 	orr.w	r2, r3, #16
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	699a      	ldr	r2, [r3, #24]
 80095e4:	4b0f      	ldr	r3, [pc, #60]	; (8009624 <USB_DevInit+0x2c4>)
 80095e6:	4313      	orrs	r3, r2
 80095e8:	687a      	ldr	r2, [r7, #4]
 80095ea:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80095ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80095ee:	2b00      	cmp	r3, #0
 80095f0:	d005      	beq.n	80095fe <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	699b      	ldr	r3, [r3, #24]
 80095f6:	f043 0208 	orr.w	r2, r3, #8
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80095fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009600:	2b01      	cmp	r3, #1
 8009602:	d107      	bne.n	8009614 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	699b      	ldr	r3, [r3, #24]
 8009608:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800960c:	f043 0304 	orr.w	r3, r3, #4
 8009610:	687a      	ldr	r2, [r7, #4]
 8009612:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8009614:	7dfb      	ldrb	r3, [r7, #23]
}
 8009616:	4618      	mov	r0, r3
 8009618:	3718      	adds	r7, #24
 800961a:	46bd      	mov	sp, r7
 800961c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009620:	b004      	add	sp, #16
 8009622:	4770      	bx	lr
 8009624:	803c3800 	.word	0x803c3800

08009628 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8009628:	b480      	push	{r7}
 800962a:	b085      	sub	sp, #20
 800962c:	af00      	add	r7, sp, #0
 800962e:	6078      	str	r0, [r7, #4]
 8009630:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8009632:	2300      	movs	r3, #0
 8009634:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8009636:	683b      	ldr	r3, [r7, #0]
 8009638:	019b      	lsls	r3, r3, #6
 800963a:	f043 0220 	orr.w	r2, r3, #32
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8009642:	68fb      	ldr	r3, [r7, #12]
 8009644:	3301      	adds	r3, #1
 8009646:	60fb      	str	r3, [r7, #12]
 8009648:	68fb      	ldr	r3, [r7, #12]
 800964a:	4a08      	ldr	r2, [pc, #32]	; (800966c <USB_FlushTxFifo+0x44>)
 800964c:	4293      	cmp	r3, r2
 800964e:	d901      	bls.n	8009654 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8009650:	2303      	movs	r3, #3
 8009652:	e006      	b.n	8009662 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	691b      	ldr	r3, [r3, #16]
 8009658:	f003 0320 	and.w	r3, r3, #32
 800965c:	2b20      	cmp	r3, #32
 800965e:	d0f0      	beq.n	8009642 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8009660:	2300      	movs	r3, #0
}
 8009662:	4618      	mov	r0, r3
 8009664:	3714      	adds	r7, #20
 8009666:	46bd      	mov	sp, r7
 8009668:	bc80      	pop	{r7}
 800966a:	4770      	bx	lr
 800966c:	00030d40 	.word	0x00030d40

08009670 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8009670:	b480      	push	{r7}
 8009672:	b085      	sub	sp, #20
 8009674:	af00      	add	r7, sp, #0
 8009676:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8009678:	2300      	movs	r3, #0
 800967a:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	2210      	movs	r2, #16
 8009680:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8009682:	68fb      	ldr	r3, [r7, #12]
 8009684:	3301      	adds	r3, #1
 8009686:	60fb      	str	r3, [r7, #12]
 8009688:	68fb      	ldr	r3, [r7, #12]
 800968a:	4a08      	ldr	r2, [pc, #32]	; (80096ac <USB_FlushRxFifo+0x3c>)
 800968c:	4293      	cmp	r3, r2
 800968e:	d901      	bls.n	8009694 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8009690:	2303      	movs	r3, #3
 8009692:	e006      	b.n	80096a2 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	691b      	ldr	r3, [r3, #16]
 8009698:	f003 0310 	and.w	r3, r3, #16
 800969c:	2b10      	cmp	r3, #16
 800969e:	d0f0      	beq.n	8009682 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80096a0:	2300      	movs	r3, #0
}
 80096a2:	4618      	mov	r0, r3
 80096a4:	3714      	adds	r7, #20
 80096a6:	46bd      	mov	sp, r7
 80096a8:	bc80      	pop	{r7}
 80096aa:	4770      	bx	lr
 80096ac:	00030d40 	.word	0x00030d40

080096b0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80096b0:	b480      	push	{r7}
 80096b2:	b085      	sub	sp, #20
 80096b4:	af00      	add	r7, sp, #0
 80096b6:	6078      	str	r0, [r7, #4]
 80096b8:	460b      	mov	r3, r1
 80096ba:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80096c0:	68fb      	ldr	r3, [r7, #12]
 80096c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80096c6:	681a      	ldr	r2, [r3, #0]
 80096c8:	78fb      	ldrb	r3, [r7, #3]
 80096ca:	68f9      	ldr	r1, [r7, #12]
 80096cc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80096d0:	4313      	orrs	r3, r2
 80096d2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80096d4:	2300      	movs	r3, #0
}
 80096d6:	4618      	mov	r0, r3
 80096d8:	3714      	adds	r7, #20
 80096da:	46bd      	mov	sp, r7
 80096dc:	bc80      	pop	{r7}
 80096de:	4770      	bx	lr

080096e0 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80096e0:	b480      	push	{r7}
 80096e2:	b087      	sub	sp, #28
 80096e4:	af00      	add	r7, sp, #0
 80096e6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80096ec:	693b      	ldr	r3, [r7, #16]
 80096ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80096f2:	689b      	ldr	r3, [r3, #8]
 80096f4:	f003 0306 	and.w	r3, r3, #6
 80096f8:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80096fa:	68fb      	ldr	r3, [r7, #12]
 80096fc:	2b00      	cmp	r3, #0
 80096fe:	d102      	bne.n	8009706 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8009700:	2300      	movs	r3, #0
 8009702:	75fb      	strb	r3, [r7, #23]
 8009704:	e00a      	b.n	800971c <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8009706:	68fb      	ldr	r3, [r7, #12]
 8009708:	2b02      	cmp	r3, #2
 800970a:	d002      	beq.n	8009712 <USB_GetDevSpeed+0x32>
 800970c:	68fb      	ldr	r3, [r7, #12]
 800970e:	2b06      	cmp	r3, #6
 8009710:	d102      	bne.n	8009718 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8009712:	2302      	movs	r3, #2
 8009714:	75fb      	strb	r3, [r7, #23]
 8009716:	e001      	b.n	800971c <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8009718:	230f      	movs	r3, #15
 800971a:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800971c:	7dfb      	ldrb	r3, [r7, #23]
}
 800971e:	4618      	mov	r0, r3
 8009720:	371c      	adds	r7, #28
 8009722:	46bd      	mov	sp, r7
 8009724:	bc80      	pop	{r7}
 8009726:	4770      	bx	lr

08009728 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009728:	b480      	push	{r7}
 800972a:	b085      	sub	sp, #20
 800972c:	af00      	add	r7, sp, #0
 800972e:	6078      	str	r0, [r7, #4]
 8009730:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009736:	683b      	ldr	r3, [r7, #0]
 8009738:	781b      	ldrb	r3, [r3, #0]
 800973a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800973c:	683b      	ldr	r3, [r7, #0]
 800973e:	785b      	ldrb	r3, [r3, #1]
 8009740:	2b01      	cmp	r3, #1
 8009742:	d13a      	bne.n	80097ba <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8009744:	68fb      	ldr	r3, [r7, #12]
 8009746:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800974a:	69da      	ldr	r2, [r3, #28]
 800974c:	683b      	ldr	r3, [r7, #0]
 800974e:	781b      	ldrb	r3, [r3, #0]
 8009750:	f003 030f 	and.w	r3, r3, #15
 8009754:	2101      	movs	r1, #1
 8009756:	fa01 f303 	lsl.w	r3, r1, r3
 800975a:	b29b      	uxth	r3, r3
 800975c:	68f9      	ldr	r1, [r7, #12]
 800975e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009762:	4313      	orrs	r3, r2
 8009764:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8009766:	68bb      	ldr	r3, [r7, #8]
 8009768:	015a      	lsls	r2, r3, #5
 800976a:	68fb      	ldr	r3, [r7, #12]
 800976c:	4413      	add	r3, r2
 800976e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009772:	681b      	ldr	r3, [r3, #0]
 8009774:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009778:	2b00      	cmp	r3, #0
 800977a:	d155      	bne.n	8009828 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800977c:	68bb      	ldr	r3, [r7, #8]
 800977e:	015a      	lsls	r2, r3, #5
 8009780:	68fb      	ldr	r3, [r7, #12]
 8009782:	4413      	add	r3, r2
 8009784:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009788:	681a      	ldr	r2, [r3, #0]
 800978a:	683b      	ldr	r3, [r7, #0]
 800978c:	689b      	ldr	r3, [r3, #8]
 800978e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8009792:	683b      	ldr	r3, [r7, #0]
 8009794:	78db      	ldrb	r3, [r3, #3]
 8009796:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009798:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800979a:	68bb      	ldr	r3, [r7, #8]
 800979c:	059b      	lsls	r3, r3, #22
 800979e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80097a0:	4313      	orrs	r3, r2
 80097a2:	68ba      	ldr	r2, [r7, #8]
 80097a4:	0151      	lsls	r1, r2, #5
 80097a6:	68fa      	ldr	r2, [r7, #12]
 80097a8:	440a      	add	r2, r1
 80097aa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80097ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80097b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80097b6:	6013      	str	r3, [r2, #0]
 80097b8:	e036      	b.n	8009828 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80097ba:	68fb      	ldr	r3, [r7, #12]
 80097bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80097c0:	69da      	ldr	r2, [r3, #28]
 80097c2:	683b      	ldr	r3, [r7, #0]
 80097c4:	781b      	ldrb	r3, [r3, #0]
 80097c6:	f003 030f 	and.w	r3, r3, #15
 80097ca:	2101      	movs	r1, #1
 80097cc:	fa01 f303 	lsl.w	r3, r1, r3
 80097d0:	041b      	lsls	r3, r3, #16
 80097d2:	68f9      	ldr	r1, [r7, #12]
 80097d4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80097d8:	4313      	orrs	r3, r2
 80097da:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80097dc:	68bb      	ldr	r3, [r7, #8]
 80097de:	015a      	lsls	r2, r3, #5
 80097e0:	68fb      	ldr	r3, [r7, #12]
 80097e2:	4413      	add	r3, r2
 80097e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80097e8:	681b      	ldr	r3, [r3, #0]
 80097ea:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80097ee:	2b00      	cmp	r3, #0
 80097f0:	d11a      	bne.n	8009828 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80097f2:	68bb      	ldr	r3, [r7, #8]
 80097f4:	015a      	lsls	r2, r3, #5
 80097f6:	68fb      	ldr	r3, [r7, #12]
 80097f8:	4413      	add	r3, r2
 80097fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80097fe:	681a      	ldr	r2, [r3, #0]
 8009800:	683b      	ldr	r3, [r7, #0]
 8009802:	689b      	ldr	r3, [r3, #8]
 8009804:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8009808:	683b      	ldr	r3, [r7, #0]
 800980a:	78db      	ldrb	r3, [r3, #3]
 800980c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800980e:	430b      	orrs	r3, r1
 8009810:	4313      	orrs	r3, r2
 8009812:	68ba      	ldr	r2, [r7, #8]
 8009814:	0151      	lsls	r1, r2, #5
 8009816:	68fa      	ldr	r2, [r7, #12]
 8009818:	440a      	add	r2, r1
 800981a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800981e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009822:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009826:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8009828:	2300      	movs	r3, #0
}
 800982a:	4618      	mov	r0, r3
 800982c:	3714      	adds	r7, #20
 800982e:	46bd      	mov	sp, r7
 8009830:	bc80      	pop	{r7}
 8009832:	4770      	bx	lr

08009834 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009834:	b480      	push	{r7}
 8009836:	b085      	sub	sp, #20
 8009838:	af00      	add	r7, sp, #0
 800983a:	6078      	str	r0, [r7, #4]
 800983c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009842:	683b      	ldr	r3, [r7, #0]
 8009844:	781b      	ldrb	r3, [r3, #0]
 8009846:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8009848:	683b      	ldr	r3, [r7, #0]
 800984a:	785b      	ldrb	r3, [r3, #1]
 800984c:	2b01      	cmp	r3, #1
 800984e:	d161      	bne.n	8009914 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009850:	68bb      	ldr	r3, [r7, #8]
 8009852:	015a      	lsls	r2, r3, #5
 8009854:	68fb      	ldr	r3, [r7, #12]
 8009856:	4413      	add	r3, r2
 8009858:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800985c:	681b      	ldr	r3, [r3, #0]
 800985e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009862:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009866:	d11f      	bne.n	80098a8 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8009868:	68bb      	ldr	r3, [r7, #8]
 800986a:	015a      	lsls	r2, r3, #5
 800986c:	68fb      	ldr	r3, [r7, #12]
 800986e:	4413      	add	r3, r2
 8009870:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009874:	681b      	ldr	r3, [r3, #0]
 8009876:	68ba      	ldr	r2, [r7, #8]
 8009878:	0151      	lsls	r1, r2, #5
 800987a:	68fa      	ldr	r2, [r7, #12]
 800987c:	440a      	add	r2, r1
 800987e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009882:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8009886:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8009888:	68bb      	ldr	r3, [r7, #8]
 800988a:	015a      	lsls	r2, r3, #5
 800988c:	68fb      	ldr	r3, [r7, #12]
 800988e:	4413      	add	r3, r2
 8009890:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009894:	681b      	ldr	r3, [r3, #0]
 8009896:	68ba      	ldr	r2, [r7, #8]
 8009898:	0151      	lsls	r1, r2, #5
 800989a:	68fa      	ldr	r2, [r7, #12]
 800989c:	440a      	add	r2, r1
 800989e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80098a2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80098a6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80098a8:	68fb      	ldr	r3, [r7, #12]
 80098aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80098ae:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80098b0:	683b      	ldr	r3, [r7, #0]
 80098b2:	781b      	ldrb	r3, [r3, #0]
 80098b4:	f003 030f 	and.w	r3, r3, #15
 80098b8:	2101      	movs	r1, #1
 80098ba:	fa01 f303 	lsl.w	r3, r1, r3
 80098be:	b29b      	uxth	r3, r3
 80098c0:	43db      	mvns	r3, r3
 80098c2:	68f9      	ldr	r1, [r7, #12]
 80098c4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80098c8:	4013      	ands	r3, r2
 80098ca:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80098cc:	68fb      	ldr	r3, [r7, #12]
 80098ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80098d2:	69da      	ldr	r2, [r3, #28]
 80098d4:	683b      	ldr	r3, [r7, #0]
 80098d6:	781b      	ldrb	r3, [r3, #0]
 80098d8:	f003 030f 	and.w	r3, r3, #15
 80098dc:	2101      	movs	r1, #1
 80098de:	fa01 f303 	lsl.w	r3, r1, r3
 80098e2:	b29b      	uxth	r3, r3
 80098e4:	43db      	mvns	r3, r3
 80098e6:	68f9      	ldr	r1, [r7, #12]
 80098e8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80098ec:	4013      	ands	r3, r2
 80098ee:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80098f0:	68bb      	ldr	r3, [r7, #8]
 80098f2:	015a      	lsls	r2, r3, #5
 80098f4:	68fb      	ldr	r3, [r7, #12]
 80098f6:	4413      	add	r3, r2
 80098f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80098fc:	681a      	ldr	r2, [r3, #0]
 80098fe:	68bb      	ldr	r3, [r7, #8]
 8009900:	0159      	lsls	r1, r3, #5
 8009902:	68fb      	ldr	r3, [r7, #12]
 8009904:	440b      	add	r3, r1
 8009906:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800990a:	4619      	mov	r1, r3
 800990c:	4b35      	ldr	r3, [pc, #212]	; (80099e4 <USB_DeactivateEndpoint+0x1b0>)
 800990e:	4013      	ands	r3, r2
 8009910:	600b      	str	r3, [r1, #0]
 8009912:	e060      	b.n	80099d6 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009914:	68bb      	ldr	r3, [r7, #8]
 8009916:	015a      	lsls	r2, r3, #5
 8009918:	68fb      	ldr	r3, [r7, #12]
 800991a:	4413      	add	r3, r2
 800991c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009920:	681b      	ldr	r3, [r3, #0]
 8009922:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009926:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800992a:	d11f      	bne.n	800996c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800992c:	68bb      	ldr	r3, [r7, #8]
 800992e:	015a      	lsls	r2, r3, #5
 8009930:	68fb      	ldr	r3, [r7, #12]
 8009932:	4413      	add	r3, r2
 8009934:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009938:	681b      	ldr	r3, [r3, #0]
 800993a:	68ba      	ldr	r2, [r7, #8]
 800993c:	0151      	lsls	r1, r2, #5
 800993e:	68fa      	ldr	r2, [r7, #12]
 8009940:	440a      	add	r2, r1
 8009942:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009946:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800994a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800994c:	68bb      	ldr	r3, [r7, #8]
 800994e:	015a      	lsls	r2, r3, #5
 8009950:	68fb      	ldr	r3, [r7, #12]
 8009952:	4413      	add	r3, r2
 8009954:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009958:	681b      	ldr	r3, [r3, #0]
 800995a:	68ba      	ldr	r2, [r7, #8]
 800995c:	0151      	lsls	r1, r2, #5
 800995e:	68fa      	ldr	r2, [r7, #12]
 8009960:	440a      	add	r2, r1
 8009962:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009966:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800996a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800996c:	68fb      	ldr	r3, [r7, #12]
 800996e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009972:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009974:	683b      	ldr	r3, [r7, #0]
 8009976:	781b      	ldrb	r3, [r3, #0]
 8009978:	f003 030f 	and.w	r3, r3, #15
 800997c:	2101      	movs	r1, #1
 800997e:	fa01 f303 	lsl.w	r3, r1, r3
 8009982:	041b      	lsls	r3, r3, #16
 8009984:	43db      	mvns	r3, r3
 8009986:	68f9      	ldr	r1, [r7, #12]
 8009988:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800998c:	4013      	ands	r3, r2
 800998e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8009990:	68fb      	ldr	r3, [r7, #12]
 8009992:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009996:	69da      	ldr	r2, [r3, #28]
 8009998:	683b      	ldr	r3, [r7, #0]
 800999a:	781b      	ldrb	r3, [r3, #0]
 800999c:	f003 030f 	and.w	r3, r3, #15
 80099a0:	2101      	movs	r1, #1
 80099a2:	fa01 f303 	lsl.w	r3, r1, r3
 80099a6:	041b      	lsls	r3, r3, #16
 80099a8:	43db      	mvns	r3, r3
 80099aa:	68f9      	ldr	r1, [r7, #12]
 80099ac:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80099b0:	4013      	ands	r3, r2
 80099b2:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80099b4:	68bb      	ldr	r3, [r7, #8]
 80099b6:	015a      	lsls	r2, r3, #5
 80099b8:	68fb      	ldr	r3, [r7, #12]
 80099ba:	4413      	add	r3, r2
 80099bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80099c0:	681a      	ldr	r2, [r3, #0]
 80099c2:	68bb      	ldr	r3, [r7, #8]
 80099c4:	0159      	lsls	r1, r3, #5
 80099c6:	68fb      	ldr	r3, [r7, #12]
 80099c8:	440b      	add	r3, r1
 80099ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80099ce:	4619      	mov	r1, r3
 80099d0:	4b05      	ldr	r3, [pc, #20]	; (80099e8 <USB_DeactivateEndpoint+0x1b4>)
 80099d2:	4013      	ands	r3, r2
 80099d4:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80099d6:	2300      	movs	r3, #0
}
 80099d8:	4618      	mov	r0, r3
 80099da:	3714      	adds	r7, #20
 80099dc:	46bd      	mov	sp, r7
 80099de:	bc80      	pop	{r7}
 80099e0:	4770      	bx	lr
 80099e2:	bf00      	nop
 80099e4:	ec337800 	.word	0xec337800
 80099e8:	eff37800 	.word	0xeff37800

080099ec <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80099ec:	b580      	push	{r7, lr}
 80099ee:	b08a      	sub	sp, #40	; 0x28
 80099f0:	af02      	add	r7, sp, #8
 80099f2:	60f8      	str	r0, [r7, #12]
 80099f4:	60b9      	str	r1, [r7, #8]
 80099f6:	4613      	mov	r3, r2
 80099f8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80099fa:	68fb      	ldr	r3, [r7, #12]
 80099fc:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80099fe:	68bb      	ldr	r3, [r7, #8]
 8009a00:	781b      	ldrb	r3, [r3, #0]
 8009a02:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8009a04:	68bb      	ldr	r3, [r7, #8]
 8009a06:	785b      	ldrb	r3, [r3, #1]
 8009a08:	2b01      	cmp	r3, #1
 8009a0a:	f040 815c 	bne.w	8009cc6 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8009a0e:	68bb      	ldr	r3, [r7, #8]
 8009a10:	695b      	ldr	r3, [r3, #20]
 8009a12:	2b00      	cmp	r3, #0
 8009a14:	d132      	bne.n	8009a7c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009a16:	69bb      	ldr	r3, [r7, #24]
 8009a18:	015a      	lsls	r2, r3, #5
 8009a1a:	69fb      	ldr	r3, [r7, #28]
 8009a1c:	4413      	add	r3, r2
 8009a1e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009a22:	691b      	ldr	r3, [r3, #16]
 8009a24:	69ba      	ldr	r2, [r7, #24]
 8009a26:	0151      	lsls	r1, r2, #5
 8009a28:	69fa      	ldr	r2, [r7, #28]
 8009a2a:	440a      	add	r2, r1
 8009a2c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009a30:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009a34:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009a38:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8009a3a:	69bb      	ldr	r3, [r7, #24]
 8009a3c:	015a      	lsls	r2, r3, #5
 8009a3e:	69fb      	ldr	r3, [r7, #28]
 8009a40:	4413      	add	r3, r2
 8009a42:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009a46:	691b      	ldr	r3, [r3, #16]
 8009a48:	69ba      	ldr	r2, [r7, #24]
 8009a4a:	0151      	lsls	r1, r2, #5
 8009a4c:	69fa      	ldr	r2, [r7, #28]
 8009a4e:	440a      	add	r2, r1
 8009a50:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009a54:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009a58:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009a5a:	69bb      	ldr	r3, [r7, #24]
 8009a5c:	015a      	lsls	r2, r3, #5
 8009a5e:	69fb      	ldr	r3, [r7, #28]
 8009a60:	4413      	add	r3, r2
 8009a62:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009a66:	691b      	ldr	r3, [r3, #16]
 8009a68:	69ba      	ldr	r2, [r7, #24]
 8009a6a:	0151      	lsls	r1, r2, #5
 8009a6c:	69fa      	ldr	r2, [r7, #28]
 8009a6e:	440a      	add	r2, r1
 8009a70:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009a74:	0cdb      	lsrs	r3, r3, #19
 8009a76:	04db      	lsls	r3, r3, #19
 8009a78:	6113      	str	r3, [r2, #16]
 8009a7a:	e074      	b.n	8009b66 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009a7c:	69bb      	ldr	r3, [r7, #24]
 8009a7e:	015a      	lsls	r2, r3, #5
 8009a80:	69fb      	ldr	r3, [r7, #28]
 8009a82:	4413      	add	r3, r2
 8009a84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009a88:	691b      	ldr	r3, [r3, #16]
 8009a8a:	69ba      	ldr	r2, [r7, #24]
 8009a8c:	0151      	lsls	r1, r2, #5
 8009a8e:	69fa      	ldr	r2, [r7, #28]
 8009a90:	440a      	add	r2, r1
 8009a92:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009a96:	0cdb      	lsrs	r3, r3, #19
 8009a98:	04db      	lsls	r3, r3, #19
 8009a9a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009a9c:	69bb      	ldr	r3, [r7, #24]
 8009a9e:	015a      	lsls	r2, r3, #5
 8009aa0:	69fb      	ldr	r3, [r7, #28]
 8009aa2:	4413      	add	r3, r2
 8009aa4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009aa8:	691b      	ldr	r3, [r3, #16]
 8009aaa:	69ba      	ldr	r2, [r7, #24]
 8009aac:	0151      	lsls	r1, r2, #5
 8009aae:	69fa      	ldr	r2, [r7, #28]
 8009ab0:	440a      	add	r2, r1
 8009ab2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009ab6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009aba:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009abe:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8009ac0:	69bb      	ldr	r3, [r7, #24]
 8009ac2:	015a      	lsls	r2, r3, #5
 8009ac4:	69fb      	ldr	r3, [r7, #28]
 8009ac6:	4413      	add	r3, r2
 8009ac8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009acc:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8009ace:	68bb      	ldr	r3, [r7, #8]
 8009ad0:	6959      	ldr	r1, [r3, #20]
 8009ad2:	68bb      	ldr	r3, [r7, #8]
 8009ad4:	689b      	ldr	r3, [r3, #8]
 8009ad6:	440b      	add	r3, r1
 8009ad8:	1e59      	subs	r1, r3, #1
 8009ada:	68bb      	ldr	r3, [r7, #8]
 8009adc:	689b      	ldr	r3, [r3, #8]
 8009ade:	fbb1 f3f3 	udiv	r3, r1, r3
 8009ae2:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8009ae4:	4b9d      	ldr	r3, [pc, #628]	; (8009d5c <USB_EPStartXfer+0x370>)
 8009ae6:	400b      	ands	r3, r1
 8009ae8:	69b9      	ldr	r1, [r7, #24]
 8009aea:	0148      	lsls	r0, r1, #5
 8009aec:	69f9      	ldr	r1, [r7, #28]
 8009aee:	4401      	add	r1, r0
 8009af0:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8009af4:	4313      	orrs	r3, r2
 8009af6:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8009af8:	69bb      	ldr	r3, [r7, #24]
 8009afa:	015a      	lsls	r2, r3, #5
 8009afc:	69fb      	ldr	r3, [r7, #28]
 8009afe:	4413      	add	r3, r2
 8009b00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009b04:	691a      	ldr	r2, [r3, #16]
 8009b06:	68bb      	ldr	r3, [r7, #8]
 8009b08:	695b      	ldr	r3, [r3, #20]
 8009b0a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009b0e:	69b9      	ldr	r1, [r7, #24]
 8009b10:	0148      	lsls	r0, r1, #5
 8009b12:	69f9      	ldr	r1, [r7, #28]
 8009b14:	4401      	add	r1, r0
 8009b16:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8009b1a:	4313      	orrs	r3, r2
 8009b1c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8009b1e:	68bb      	ldr	r3, [r7, #8]
 8009b20:	78db      	ldrb	r3, [r3, #3]
 8009b22:	2b01      	cmp	r3, #1
 8009b24:	d11f      	bne.n	8009b66 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8009b26:	69bb      	ldr	r3, [r7, #24]
 8009b28:	015a      	lsls	r2, r3, #5
 8009b2a:	69fb      	ldr	r3, [r7, #28]
 8009b2c:	4413      	add	r3, r2
 8009b2e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009b32:	691b      	ldr	r3, [r3, #16]
 8009b34:	69ba      	ldr	r2, [r7, #24]
 8009b36:	0151      	lsls	r1, r2, #5
 8009b38:	69fa      	ldr	r2, [r7, #28]
 8009b3a:	440a      	add	r2, r1
 8009b3c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009b40:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8009b44:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8009b46:	69bb      	ldr	r3, [r7, #24]
 8009b48:	015a      	lsls	r2, r3, #5
 8009b4a:	69fb      	ldr	r3, [r7, #28]
 8009b4c:	4413      	add	r3, r2
 8009b4e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009b52:	691b      	ldr	r3, [r3, #16]
 8009b54:	69ba      	ldr	r2, [r7, #24]
 8009b56:	0151      	lsls	r1, r2, #5
 8009b58:	69fa      	ldr	r2, [r7, #28]
 8009b5a:	440a      	add	r2, r1
 8009b5c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009b60:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009b64:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8009b66:	79fb      	ldrb	r3, [r7, #7]
 8009b68:	2b01      	cmp	r3, #1
 8009b6a:	d14b      	bne.n	8009c04 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8009b6c:	68bb      	ldr	r3, [r7, #8]
 8009b6e:	691b      	ldr	r3, [r3, #16]
 8009b70:	2b00      	cmp	r3, #0
 8009b72:	d009      	beq.n	8009b88 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8009b74:	69bb      	ldr	r3, [r7, #24]
 8009b76:	015a      	lsls	r2, r3, #5
 8009b78:	69fb      	ldr	r3, [r7, #28]
 8009b7a:	4413      	add	r3, r2
 8009b7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009b80:	461a      	mov	r2, r3
 8009b82:	68bb      	ldr	r3, [r7, #8]
 8009b84:	691b      	ldr	r3, [r3, #16]
 8009b86:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8009b88:	68bb      	ldr	r3, [r7, #8]
 8009b8a:	78db      	ldrb	r3, [r3, #3]
 8009b8c:	2b01      	cmp	r3, #1
 8009b8e:	d128      	bne.n	8009be2 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009b90:	69fb      	ldr	r3, [r7, #28]
 8009b92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009b96:	689b      	ldr	r3, [r3, #8]
 8009b98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009b9c:	2b00      	cmp	r3, #0
 8009b9e:	d110      	bne.n	8009bc2 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8009ba0:	69bb      	ldr	r3, [r7, #24]
 8009ba2:	015a      	lsls	r2, r3, #5
 8009ba4:	69fb      	ldr	r3, [r7, #28]
 8009ba6:	4413      	add	r3, r2
 8009ba8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009bac:	681b      	ldr	r3, [r3, #0]
 8009bae:	69ba      	ldr	r2, [r7, #24]
 8009bb0:	0151      	lsls	r1, r2, #5
 8009bb2:	69fa      	ldr	r2, [r7, #28]
 8009bb4:	440a      	add	r2, r1
 8009bb6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009bba:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009bbe:	6013      	str	r3, [r2, #0]
 8009bc0:	e00f      	b.n	8009be2 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8009bc2:	69bb      	ldr	r3, [r7, #24]
 8009bc4:	015a      	lsls	r2, r3, #5
 8009bc6:	69fb      	ldr	r3, [r7, #28]
 8009bc8:	4413      	add	r3, r2
 8009bca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009bce:	681b      	ldr	r3, [r3, #0]
 8009bd0:	69ba      	ldr	r2, [r7, #24]
 8009bd2:	0151      	lsls	r1, r2, #5
 8009bd4:	69fa      	ldr	r2, [r7, #28]
 8009bd6:	440a      	add	r2, r1
 8009bd8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009bdc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009be0:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009be2:	69bb      	ldr	r3, [r7, #24]
 8009be4:	015a      	lsls	r2, r3, #5
 8009be6:	69fb      	ldr	r3, [r7, #28]
 8009be8:	4413      	add	r3, r2
 8009bea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009bee:	681b      	ldr	r3, [r3, #0]
 8009bf0:	69ba      	ldr	r2, [r7, #24]
 8009bf2:	0151      	lsls	r1, r2, #5
 8009bf4:	69fa      	ldr	r2, [r7, #28]
 8009bf6:	440a      	add	r2, r1
 8009bf8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009bfc:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009c00:	6013      	str	r3, [r2, #0]
 8009c02:	e12f      	b.n	8009e64 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009c04:	69bb      	ldr	r3, [r7, #24]
 8009c06:	015a      	lsls	r2, r3, #5
 8009c08:	69fb      	ldr	r3, [r7, #28]
 8009c0a:	4413      	add	r3, r2
 8009c0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009c10:	681b      	ldr	r3, [r3, #0]
 8009c12:	69ba      	ldr	r2, [r7, #24]
 8009c14:	0151      	lsls	r1, r2, #5
 8009c16:	69fa      	ldr	r2, [r7, #28]
 8009c18:	440a      	add	r2, r1
 8009c1a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009c1e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009c22:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8009c24:	68bb      	ldr	r3, [r7, #8]
 8009c26:	78db      	ldrb	r3, [r3, #3]
 8009c28:	2b01      	cmp	r3, #1
 8009c2a:	d015      	beq.n	8009c58 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8009c2c:	68bb      	ldr	r3, [r7, #8]
 8009c2e:	695b      	ldr	r3, [r3, #20]
 8009c30:	2b00      	cmp	r3, #0
 8009c32:	f000 8117 	beq.w	8009e64 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8009c36:	69fb      	ldr	r3, [r7, #28]
 8009c38:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009c3c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009c3e:	68bb      	ldr	r3, [r7, #8]
 8009c40:	781b      	ldrb	r3, [r3, #0]
 8009c42:	f003 030f 	and.w	r3, r3, #15
 8009c46:	2101      	movs	r1, #1
 8009c48:	fa01 f303 	lsl.w	r3, r1, r3
 8009c4c:	69f9      	ldr	r1, [r7, #28]
 8009c4e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009c52:	4313      	orrs	r3, r2
 8009c54:	634b      	str	r3, [r1, #52]	; 0x34
 8009c56:	e105      	b.n	8009e64 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009c58:	69fb      	ldr	r3, [r7, #28]
 8009c5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009c5e:	689b      	ldr	r3, [r3, #8]
 8009c60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009c64:	2b00      	cmp	r3, #0
 8009c66:	d110      	bne.n	8009c8a <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8009c68:	69bb      	ldr	r3, [r7, #24]
 8009c6a:	015a      	lsls	r2, r3, #5
 8009c6c:	69fb      	ldr	r3, [r7, #28]
 8009c6e:	4413      	add	r3, r2
 8009c70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009c74:	681b      	ldr	r3, [r3, #0]
 8009c76:	69ba      	ldr	r2, [r7, #24]
 8009c78:	0151      	lsls	r1, r2, #5
 8009c7a:	69fa      	ldr	r2, [r7, #28]
 8009c7c:	440a      	add	r2, r1
 8009c7e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009c82:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009c86:	6013      	str	r3, [r2, #0]
 8009c88:	e00f      	b.n	8009caa <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8009c8a:	69bb      	ldr	r3, [r7, #24]
 8009c8c:	015a      	lsls	r2, r3, #5
 8009c8e:	69fb      	ldr	r3, [r7, #28]
 8009c90:	4413      	add	r3, r2
 8009c92:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009c96:	681b      	ldr	r3, [r3, #0]
 8009c98:	69ba      	ldr	r2, [r7, #24]
 8009c9a:	0151      	lsls	r1, r2, #5
 8009c9c:	69fa      	ldr	r2, [r7, #28]
 8009c9e:	440a      	add	r2, r1
 8009ca0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009ca4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009ca8:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8009caa:	68bb      	ldr	r3, [r7, #8]
 8009cac:	68d9      	ldr	r1, [r3, #12]
 8009cae:	68bb      	ldr	r3, [r7, #8]
 8009cb0:	781a      	ldrb	r2, [r3, #0]
 8009cb2:	68bb      	ldr	r3, [r7, #8]
 8009cb4:	695b      	ldr	r3, [r3, #20]
 8009cb6:	b298      	uxth	r0, r3
 8009cb8:	79fb      	ldrb	r3, [r7, #7]
 8009cba:	9300      	str	r3, [sp, #0]
 8009cbc:	4603      	mov	r3, r0
 8009cbe:	68f8      	ldr	r0, [r7, #12]
 8009cc0:	f000 fa2a 	bl	800a118 <USB_WritePacket>
 8009cc4:	e0ce      	b.n	8009e64 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8009cc6:	69bb      	ldr	r3, [r7, #24]
 8009cc8:	015a      	lsls	r2, r3, #5
 8009cca:	69fb      	ldr	r3, [r7, #28]
 8009ccc:	4413      	add	r3, r2
 8009cce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009cd2:	691b      	ldr	r3, [r3, #16]
 8009cd4:	69ba      	ldr	r2, [r7, #24]
 8009cd6:	0151      	lsls	r1, r2, #5
 8009cd8:	69fa      	ldr	r2, [r7, #28]
 8009cda:	440a      	add	r2, r1
 8009cdc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009ce0:	0cdb      	lsrs	r3, r3, #19
 8009ce2:	04db      	lsls	r3, r3, #19
 8009ce4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8009ce6:	69bb      	ldr	r3, [r7, #24]
 8009ce8:	015a      	lsls	r2, r3, #5
 8009cea:	69fb      	ldr	r3, [r7, #28]
 8009cec:	4413      	add	r3, r2
 8009cee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009cf2:	691b      	ldr	r3, [r3, #16]
 8009cf4:	69ba      	ldr	r2, [r7, #24]
 8009cf6:	0151      	lsls	r1, r2, #5
 8009cf8:	69fa      	ldr	r2, [r7, #28]
 8009cfa:	440a      	add	r2, r1
 8009cfc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009d00:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009d04:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009d08:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8009d0a:	68bb      	ldr	r3, [r7, #8]
 8009d0c:	695b      	ldr	r3, [r3, #20]
 8009d0e:	2b00      	cmp	r3, #0
 8009d10:	d126      	bne.n	8009d60 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8009d12:	69bb      	ldr	r3, [r7, #24]
 8009d14:	015a      	lsls	r2, r3, #5
 8009d16:	69fb      	ldr	r3, [r7, #28]
 8009d18:	4413      	add	r3, r2
 8009d1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009d1e:	691a      	ldr	r2, [r3, #16]
 8009d20:	68bb      	ldr	r3, [r7, #8]
 8009d22:	689b      	ldr	r3, [r3, #8]
 8009d24:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009d28:	69b9      	ldr	r1, [r7, #24]
 8009d2a:	0148      	lsls	r0, r1, #5
 8009d2c:	69f9      	ldr	r1, [r7, #28]
 8009d2e:	4401      	add	r1, r0
 8009d30:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8009d34:	4313      	orrs	r3, r2
 8009d36:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009d38:	69bb      	ldr	r3, [r7, #24]
 8009d3a:	015a      	lsls	r2, r3, #5
 8009d3c:	69fb      	ldr	r3, [r7, #28]
 8009d3e:	4413      	add	r3, r2
 8009d40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009d44:	691b      	ldr	r3, [r3, #16]
 8009d46:	69ba      	ldr	r2, [r7, #24]
 8009d48:	0151      	lsls	r1, r2, #5
 8009d4a:	69fa      	ldr	r2, [r7, #28]
 8009d4c:	440a      	add	r2, r1
 8009d4e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009d52:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009d56:	6113      	str	r3, [r2, #16]
 8009d58:	e036      	b.n	8009dc8 <USB_EPStartXfer+0x3dc>
 8009d5a:	bf00      	nop
 8009d5c:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8009d60:	68bb      	ldr	r3, [r7, #8]
 8009d62:	695a      	ldr	r2, [r3, #20]
 8009d64:	68bb      	ldr	r3, [r7, #8]
 8009d66:	689b      	ldr	r3, [r3, #8]
 8009d68:	4413      	add	r3, r2
 8009d6a:	1e5a      	subs	r2, r3, #1
 8009d6c:	68bb      	ldr	r3, [r7, #8]
 8009d6e:	689b      	ldr	r3, [r3, #8]
 8009d70:	fbb2 f3f3 	udiv	r3, r2, r3
 8009d74:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8009d76:	69bb      	ldr	r3, [r7, #24]
 8009d78:	015a      	lsls	r2, r3, #5
 8009d7a:	69fb      	ldr	r3, [r7, #28]
 8009d7c:	4413      	add	r3, r2
 8009d7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009d82:	691a      	ldr	r2, [r3, #16]
 8009d84:	8afb      	ldrh	r3, [r7, #22]
 8009d86:	04d9      	lsls	r1, r3, #19
 8009d88:	4b39      	ldr	r3, [pc, #228]	; (8009e70 <USB_EPStartXfer+0x484>)
 8009d8a:	400b      	ands	r3, r1
 8009d8c:	69b9      	ldr	r1, [r7, #24]
 8009d8e:	0148      	lsls	r0, r1, #5
 8009d90:	69f9      	ldr	r1, [r7, #28]
 8009d92:	4401      	add	r1, r0
 8009d94:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8009d98:	4313      	orrs	r3, r2
 8009d9a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8009d9c:	69bb      	ldr	r3, [r7, #24]
 8009d9e:	015a      	lsls	r2, r3, #5
 8009da0:	69fb      	ldr	r3, [r7, #28]
 8009da2:	4413      	add	r3, r2
 8009da4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009da8:	691a      	ldr	r2, [r3, #16]
 8009daa:	68bb      	ldr	r3, [r7, #8]
 8009dac:	689b      	ldr	r3, [r3, #8]
 8009dae:	8af9      	ldrh	r1, [r7, #22]
 8009db0:	fb01 f303 	mul.w	r3, r1, r3
 8009db4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009db8:	69b9      	ldr	r1, [r7, #24]
 8009dba:	0148      	lsls	r0, r1, #5
 8009dbc:	69f9      	ldr	r1, [r7, #28]
 8009dbe:	4401      	add	r1, r0
 8009dc0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8009dc4:	4313      	orrs	r3, r2
 8009dc6:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8009dc8:	79fb      	ldrb	r3, [r7, #7]
 8009dca:	2b01      	cmp	r3, #1
 8009dcc:	d10d      	bne.n	8009dea <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8009dce:	68bb      	ldr	r3, [r7, #8]
 8009dd0:	68db      	ldr	r3, [r3, #12]
 8009dd2:	2b00      	cmp	r3, #0
 8009dd4:	d009      	beq.n	8009dea <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8009dd6:	68bb      	ldr	r3, [r7, #8]
 8009dd8:	68d9      	ldr	r1, [r3, #12]
 8009dda:	69bb      	ldr	r3, [r7, #24]
 8009ddc:	015a      	lsls	r2, r3, #5
 8009dde:	69fb      	ldr	r3, [r7, #28]
 8009de0:	4413      	add	r3, r2
 8009de2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009de6:	460a      	mov	r2, r1
 8009de8:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8009dea:	68bb      	ldr	r3, [r7, #8]
 8009dec:	78db      	ldrb	r3, [r3, #3]
 8009dee:	2b01      	cmp	r3, #1
 8009df0:	d128      	bne.n	8009e44 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009df2:	69fb      	ldr	r3, [r7, #28]
 8009df4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009df8:	689b      	ldr	r3, [r3, #8]
 8009dfa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009dfe:	2b00      	cmp	r3, #0
 8009e00:	d110      	bne.n	8009e24 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8009e02:	69bb      	ldr	r3, [r7, #24]
 8009e04:	015a      	lsls	r2, r3, #5
 8009e06:	69fb      	ldr	r3, [r7, #28]
 8009e08:	4413      	add	r3, r2
 8009e0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009e0e:	681b      	ldr	r3, [r3, #0]
 8009e10:	69ba      	ldr	r2, [r7, #24]
 8009e12:	0151      	lsls	r1, r2, #5
 8009e14:	69fa      	ldr	r2, [r7, #28]
 8009e16:	440a      	add	r2, r1
 8009e18:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009e1c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009e20:	6013      	str	r3, [r2, #0]
 8009e22:	e00f      	b.n	8009e44 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8009e24:	69bb      	ldr	r3, [r7, #24]
 8009e26:	015a      	lsls	r2, r3, #5
 8009e28:	69fb      	ldr	r3, [r7, #28]
 8009e2a:	4413      	add	r3, r2
 8009e2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009e30:	681b      	ldr	r3, [r3, #0]
 8009e32:	69ba      	ldr	r2, [r7, #24]
 8009e34:	0151      	lsls	r1, r2, #5
 8009e36:	69fa      	ldr	r2, [r7, #28]
 8009e38:	440a      	add	r2, r1
 8009e3a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009e3e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009e42:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8009e44:	69bb      	ldr	r3, [r7, #24]
 8009e46:	015a      	lsls	r2, r3, #5
 8009e48:	69fb      	ldr	r3, [r7, #28]
 8009e4a:	4413      	add	r3, r2
 8009e4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009e50:	681b      	ldr	r3, [r3, #0]
 8009e52:	69ba      	ldr	r2, [r7, #24]
 8009e54:	0151      	lsls	r1, r2, #5
 8009e56:	69fa      	ldr	r2, [r7, #28]
 8009e58:	440a      	add	r2, r1
 8009e5a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009e5e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009e62:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009e64:	2300      	movs	r3, #0
}
 8009e66:	4618      	mov	r0, r3
 8009e68:	3720      	adds	r7, #32
 8009e6a:	46bd      	mov	sp, r7
 8009e6c:	bd80      	pop	{r7, pc}
 8009e6e:	bf00      	nop
 8009e70:	1ff80000 	.word	0x1ff80000

08009e74 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8009e74:	b480      	push	{r7}
 8009e76:	b087      	sub	sp, #28
 8009e78:	af00      	add	r7, sp, #0
 8009e7a:	60f8      	str	r0, [r7, #12]
 8009e7c:	60b9      	str	r1, [r7, #8]
 8009e7e:	4613      	mov	r3, r2
 8009e80:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009e82:	68fb      	ldr	r3, [r7, #12]
 8009e84:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8009e86:	68bb      	ldr	r3, [r7, #8]
 8009e88:	781b      	ldrb	r3, [r3, #0]
 8009e8a:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8009e8c:	68bb      	ldr	r3, [r7, #8]
 8009e8e:	785b      	ldrb	r3, [r3, #1]
 8009e90:	2b01      	cmp	r3, #1
 8009e92:	f040 80cd 	bne.w	800a030 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8009e96:	68bb      	ldr	r3, [r7, #8]
 8009e98:	695b      	ldr	r3, [r3, #20]
 8009e9a:	2b00      	cmp	r3, #0
 8009e9c:	d132      	bne.n	8009f04 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009e9e:	693b      	ldr	r3, [r7, #16]
 8009ea0:	015a      	lsls	r2, r3, #5
 8009ea2:	697b      	ldr	r3, [r7, #20]
 8009ea4:	4413      	add	r3, r2
 8009ea6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009eaa:	691b      	ldr	r3, [r3, #16]
 8009eac:	693a      	ldr	r2, [r7, #16]
 8009eae:	0151      	lsls	r1, r2, #5
 8009eb0:	697a      	ldr	r2, [r7, #20]
 8009eb2:	440a      	add	r2, r1
 8009eb4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009eb8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009ebc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009ec0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8009ec2:	693b      	ldr	r3, [r7, #16]
 8009ec4:	015a      	lsls	r2, r3, #5
 8009ec6:	697b      	ldr	r3, [r7, #20]
 8009ec8:	4413      	add	r3, r2
 8009eca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009ece:	691b      	ldr	r3, [r3, #16]
 8009ed0:	693a      	ldr	r2, [r7, #16]
 8009ed2:	0151      	lsls	r1, r2, #5
 8009ed4:	697a      	ldr	r2, [r7, #20]
 8009ed6:	440a      	add	r2, r1
 8009ed8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009edc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009ee0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009ee2:	693b      	ldr	r3, [r7, #16]
 8009ee4:	015a      	lsls	r2, r3, #5
 8009ee6:	697b      	ldr	r3, [r7, #20]
 8009ee8:	4413      	add	r3, r2
 8009eea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009eee:	691b      	ldr	r3, [r3, #16]
 8009ef0:	693a      	ldr	r2, [r7, #16]
 8009ef2:	0151      	lsls	r1, r2, #5
 8009ef4:	697a      	ldr	r2, [r7, #20]
 8009ef6:	440a      	add	r2, r1
 8009ef8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009efc:	0cdb      	lsrs	r3, r3, #19
 8009efe:	04db      	lsls	r3, r3, #19
 8009f00:	6113      	str	r3, [r2, #16]
 8009f02:	e04e      	b.n	8009fa2 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009f04:	693b      	ldr	r3, [r7, #16]
 8009f06:	015a      	lsls	r2, r3, #5
 8009f08:	697b      	ldr	r3, [r7, #20]
 8009f0a:	4413      	add	r3, r2
 8009f0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009f10:	691b      	ldr	r3, [r3, #16]
 8009f12:	693a      	ldr	r2, [r7, #16]
 8009f14:	0151      	lsls	r1, r2, #5
 8009f16:	697a      	ldr	r2, [r7, #20]
 8009f18:	440a      	add	r2, r1
 8009f1a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009f1e:	0cdb      	lsrs	r3, r3, #19
 8009f20:	04db      	lsls	r3, r3, #19
 8009f22:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009f24:	693b      	ldr	r3, [r7, #16]
 8009f26:	015a      	lsls	r2, r3, #5
 8009f28:	697b      	ldr	r3, [r7, #20]
 8009f2a:	4413      	add	r3, r2
 8009f2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009f30:	691b      	ldr	r3, [r3, #16]
 8009f32:	693a      	ldr	r2, [r7, #16]
 8009f34:	0151      	lsls	r1, r2, #5
 8009f36:	697a      	ldr	r2, [r7, #20]
 8009f38:	440a      	add	r2, r1
 8009f3a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009f3e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009f42:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009f46:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8009f48:	68bb      	ldr	r3, [r7, #8]
 8009f4a:	695a      	ldr	r2, [r3, #20]
 8009f4c:	68bb      	ldr	r3, [r7, #8]
 8009f4e:	689b      	ldr	r3, [r3, #8]
 8009f50:	429a      	cmp	r2, r3
 8009f52:	d903      	bls.n	8009f5c <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8009f54:	68bb      	ldr	r3, [r7, #8]
 8009f56:	689a      	ldr	r2, [r3, #8]
 8009f58:	68bb      	ldr	r3, [r7, #8]
 8009f5a:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8009f5c:	693b      	ldr	r3, [r7, #16]
 8009f5e:	015a      	lsls	r2, r3, #5
 8009f60:	697b      	ldr	r3, [r7, #20]
 8009f62:	4413      	add	r3, r2
 8009f64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009f68:	691b      	ldr	r3, [r3, #16]
 8009f6a:	693a      	ldr	r2, [r7, #16]
 8009f6c:	0151      	lsls	r1, r2, #5
 8009f6e:	697a      	ldr	r2, [r7, #20]
 8009f70:	440a      	add	r2, r1
 8009f72:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009f76:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009f7a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8009f7c:	693b      	ldr	r3, [r7, #16]
 8009f7e:	015a      	lsls	r2, r3, #5
 8009f80:	697b      	ldr	r3, [r7, #20]
 8009f82:	4413      	add	r3, r2
 8009f84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009f88:	691a      	ldr	r2, [r3, #16]
 8009f8a:	68bb      	ldr	r3, [r7, #8]
 8009f8c:	695b      	ldr	r3, [r3, #20]
 8009f8e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009f92:	6939      	ldr	r1, [r7, #16]
 8009f94:	0148      	lsls	r0, r1, #5
 8009f96:	6979      	ldr	r1, [r7, #20]
 8009f98:	4401      	add	r1, r0
 8009f9a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8009f9e:	4313      	orrs	r3, r2
 8009fa0:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8009fa2:	79fb      	ldrb	r3, [r7, #7]
 8009fa4:	2b01      	cmp	r3, #1
 8009fa6:	d11e      	bne.n	8009fe6 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8009fa8:	68bb      	ldr	r3, [r7, #8]
 8009faa:	691b      	ldr	r3, [r3, #16]
 8009fac:	2b00      	cmp	r3, #0
 8009fae:	d009      	beq.n	8009fc4 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8009fb0:	693b      	ldr	r3, [r7, #16]
 8009fb2:	015a      	lsls	r2, r3, #5
 8009fb4:	697b      	ldr	r3, [r7, #20]
 8009fb6:	4413      	add	r3, r2
 8009fb8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009fbc:	461a      	mov	r2, r3
 8009fbe:	68bb      	ldr	r3, [r7, #8]
 8009fc0:	691b      	ldr	r3, [r3, #16]
 8009fc2:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009fc4:	693b      	ldr	r3, [r7, #16]
 8009fc6:	015a      	lsls	r2, r3, #5
 8009fc8:	697b      	ldr	r3, [r7, #20]
 8009fca:	4413      	add	r3, r2
 8009fcc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009fd0:	681b      	ldr	r3, [r3, #0]
 8009fd2:	693a      	ldr	r2, [r7, #16]
 8009fd4:	0151      	lsls	r1, r2, #5
 8009fd6:	697a      	ldr	r2, [r7, #20]
 8009fd8:	440a      	add	r2, r1
 8009fda:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009fde:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009fe2:	6013      	str	r3, [r2, #0]
 8009fe4:	e092      	b.n	800a10c <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009fe6:	693b      	ldr	r3, [r7, #16]
 8009fe8:	015a      	lsls	r2, r3, #5
 8009fea:	697b      	ldr	r3, [r7, #20]
 8009fec:	4413      	add	r3, r2
 8009fee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009ff2:	681b      	ldr	r3, [r3, #0]
 8009ff4:	693a      	ldr	r2, [r7, #16]
 8009ff6:	0151      	lsls	r1, r2, #5
 8009ff8:	697a      	ldr	r2, [r7, #20]
 8009ffa:	440a      	add	r2, r1
 8009ffc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a000:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a004:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800a006:	68bb      	ldr	r3, [r7, #8]
 800a008:	695b      	ldr	r3, [r3, #20]
 800a00a:	2b00      	cmp	r3, #0
 800a00c:	d07e      	beq.n	800a10c <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800a00e:	697b      	ldr	r3, [r7, #20]
 800a010:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a014:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a016:	68bb      	ldr	r3, [r7, #8]
 800a018:	781b      	ldrb	r3, [r3, #0]
 800a01a:	f003 030f 	and.w	r3, r3, #15
 800a01e:	2101      	movs	r1, #1
 800a020:	fa01 f303 	lsl.w	r3, r1, r3
 800a024:	6979      	ldr	r1, [r7, #20]
 800a026:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a02a:	4313      	orrs	r3, r2
 800a02c:	634b      	str	r3, [r1, #52]	; 0x34
 800a02e:	e06d      	b.n	800a10c <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800a030:	693b      	ldr	r3, [r7, #16]
 800a032:	015a      	lsls	r2, r3, #5
 800a034:	697b      	ldr	r3, [r7, #20]
 800a036:	4413      	add	r3, r2
 800a038:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a03c:	691b      	ldr	r3, [r3, #16]
 800a03e:	693a      	ldr	r2, [r7, #16]
 800a040:	0151      	lsls	r1, r2, #5
 800a042:	697a      	ldr	r2, [r7, #20]
 800a044:	440a      	add	r2, r1
 800a046:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a04a:	0cdb      	lsrs	r3, r3, #19
 800a04c:	04db      	lsls	r3, r3, #19
 800a04e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800a050:	693b      	ldr	r3, [r7, #16]
 800a052:	015a      	lsls	r2, r3, #5
 800a054:	697b      	ldr	r3, [r7, #20]
 800a056:	4413      	add	r3, r2
 800a058:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a05c:	691b      	ldr	r3, [r3, #16]
 800a05e:	693a      	ldr	r2, [r7, #16]
 800a060:	0151      	lsls	r1, r2, #5
 800a062:	697a      	ldr	r2, [r7, #20]
 800a064:	440a      	add	r2, r1
 800a066:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a06a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800a06e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800a072:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800a074:	68bb      	ldr	r3, [r7, #8]
 800a076:	695b      	ldr	r3, [r3, #20]
 800a078:	2b00      	cmp	r3, #0
 800a07a:	d003      	beq.n	800a084 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 800a07c:	68bb      	ldr	r3, [r7, #8]
 800a07e:	689a      	ldr	r2, [r3, #8]
 800a080:	68bb      	ldr	r3, [r7, #8]
 800a082:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a084:	693b      	ldr	r3, [r7, #16]
 800a086:	015a      	lsls	r2, r3, #5
 800a088:	697b      	ldr	r3, [r7, #20]
 800a08a:	4413      	add	r3, r2
 800a08c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a090:	691b      	ldr	r3, [r3, #16]
 800a092:	693a      	ldr	r2, [r7, #16]
 800a094:	0151      	lsls	r1, r2, #5
 800a096:	697a      	ldr	r2, [r7, #20]
 800a098:	440a      	add	r2, r1
 800a09a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a09e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a0a2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 800a0a4:	693b      	ldr	r3, [r7, #16]
 800a0a6:	015a      	lsls	r2, r3, #5
 800a0a8:	697b      	ldr	r3, [r7, #20]
 800a0aa:	4413      	add	r3, r2
 800a0ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a0b0:	691a      	ldr	r2, [r3, #16]
 800a0b2:	68bb      	ldr	r3, [r7, #8]
 800a0b4:	689b      	ldr	r3, [r3, #8]
 800a0b6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a0ba:	6939      	ldr	r1, [r7, #16]
 800a0bc:	0148      	lsls	r0, r1, #5
 800a0be:	6979      	ldr	r1, [r7, #20]
 800a0c0:	4401      	add	r1, r0
 800a0c2:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800a0c6:	4313      	orrs	r3, r2
 800a0c8:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800a0ca:	79fb      	ldrb	r3, [r7, #7]
 800a0cc:	2b01      	cmp	r3, #1
 800a0ce:	d10d      	bne.n	800a0ec <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800a0d0:	68bb      	ldr	r3, [r7, #8]
 800a0d2:	68db      	ldr	r3, [r3, #12]
 800a0d4:	2b00      	cmp	r3, #0
 800a0d6:	d009      	beq.n	800a0ec <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800a0d8:	68bb      	ldr	r3, [r7, #8]
 800a0da:	68d9      	ldr	r1, [r3, #12]
 800a0dc:	693b      	ldr	r3, [r7, #16]
 800a0de:	015a      	lsls	r2, r3, #5
 800a0e0:	697b      	ldr	r3, [r7, #20]
 800a0e2:	4413      	add	r3, r2
 800a0e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a0e8:	460a      	mov	r2, r1
 800a0ea:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800a0ec:	693b      	ldr	r3, [r7, #16]
 800a0ee:	015a      	lsls	r2, r3, #5
 800a0f0:	697b      	ldr	r3, [r7, #20]
 800a0f2:	4413      	add	r3, r2
 800a0f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a0f8:	681b      	ldr	r3, [r3, #0]
 800a0fa:	693a      	ldr	r2, [r7, #16]
 800a0fc:	0151      	lsls	r1, r2, #5
 800a0fe:	697a      	ldr	r2, [r7, #20]
 800a100:	440a      	add	r2, r1
 800a102:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a106:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a10a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a10c:	2300      	movs	r3, #0
}
 800a10e:	4618      	mov	r0, r3
 800a110:	371c      	adds	r7, #28
 800a112:	46bd      	mov	sp, r7
 800a114:	bc80      	pop	{r7}
 800a116:	4770      	bx	lr

0800a118 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800a118:	b480      	push	{r7}
 800a11a:	b089      	sub	sp, #36	; 0x24
 800a11c:	af00      	add	r7, sp, #0
 800a11e:	60f8      	str	r0, [r7, #12]
 800a120:	60b9      	str	r1, [r7, #8]
 800a122:	4611      	mov	r1, r2
 800a124:	461a      	mov	r2, r3
 800a126:	460b      	mov	r3, r1
 800a128:	71fb      	strb	r3, [r7, #7]
 800a12a:	4613      	mov	r3, r2
 800a12c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a12e:	68fb      	ldr	r3, [r7, #12]
 800a130:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800a132:	68bb      	ldr	r3, [r7, #8]
 800a134:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800a136:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800a13a:	2b00      	cmp	r3, #0
 800a13c:	d123      	bne.n	800a186 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800a13e:	88bb      	ldrh	r3, [r7, #4]
 800a140:	3303      	adds	r3, #3
 800a142:	089b      	lsrs	r3, r3, #2
 800a144:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800a146:	2300      	movs	r3, #0
 800a148:	61bb      	str	r3, [r7, #24]
 800a14a:	e018      	b.n	800a17e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800a14c:	79fb      	ldrb	r3, [r7, #7]
 800a14e:	031a      	lsls	r2, r3, #12
 800a150:	697b      	ldr	r3, [r7, #20]
 800a152:	4413      	add	r3, r2
 800a154:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a158:	461a      	mov	r2, r3
 800a15a:	69fb      	ldr	r3, [r7, #28]
 800a15c:	681b      	ldr	r3, [r3, #0]
 800a15e:	6013      	str	r3, [r2, #0]
      pSrc++;
 800a160:	69fb      	ldr	r3, [r7, #28]
 800a162:	3301      	adds	r3, #1
 800a164:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a166:	69fb      	ldr	r3, [r7, #28]
 800a168:	3301      	adds	r3, #1
 800a16a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a16c:	69fb      	ldr	r3, [r7, #28]
 800a16e:	3301      	adds	r3, #1
 800a170:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a172:	69fb      	ldr	r3, [r7, #28]
 800a174:	3301      	adds	r3, #1
 800a176:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800a178:	69bb      	ldr	r3, [r7, #24]
 800a17a:	3301      	adds	r3, #1
 800a17c:	61bb      	str	r3, [r7, #24]
 800a17e:	69ba      	ldr	r2, [r7, #24]
 800a180:	693b      	ldr	r3, [r7, #16]
 800a182:	429a      	cmp	r2, r3
 800a184:	d3e2      	bcc.n	800a14c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800a186:	2300      	movs	r3, #0
}
 800a188:	4618      	mov	r0, r3
 800a18a:	3724      	adds	r7, #36	; 0x24
 800a18c:	46bd      	mov	sp, r7
 800a18e:	bc80      	pop	{r7}
 800a190:	4770      	bx	lr

0800a192 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800a192:	b480      	push	{r7}
 800a194:	b08b      	sub	sp, #44	; 0x2c
 800a196:	af00      	add	r7, sp, #0
 800a198:	60f8      	str	r0, [r7, #12]
 800a19a:	60b9      	str	r1, [r7, #8]
 800a19c:	4613      	mov	r3, r2
 800a19e:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a1a0:	68fb      	ldr	r3, [r7, #12]
 800a1a2:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800a1a4:	68bb      	ldr	r3, [r7, #8]
 800a1a6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800a1a8:	88fb      	ldrh	r3, [r7, #6]
 800a1aa:	089b      	lsrs	r3, r3, #2
 800a1ac:	b29b      	uxth	r3, r3
 800a1ae:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800a1b0:	88fb      	ldrh	r3, [r7, #6]
 800a1b2:	f003 0303 	and.w	r3, r3, #3
 800a1b6:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800a1b8:	2300      	movs	r3, #0
 800a1ba:	623b      	str	r3, [r7, #32]
 800a1bc:	e014      	b.n	800a1e8 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800a1be:	69bb      	ldr	r3, [r7, #24]
 800a1c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a1c4:	681a      	ldr	r2, [r3, #0]
 800a1c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1c8:	601a      	str	r2, [r3, #0]
    pDest++;
 800a1ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1cc:	3301      	adds	r3, #1
 800a1ce:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800a1d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1d2:	3301      	adds	r3, #1
 800a1d4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800a1d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1d8:	3301      	adds	r3, #1
 800a1da:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800a1dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1de:	3301      	adds	r3, #1
 800a1e0:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800a1e2:	6a3b      	ldr	r3, [r7, #32]
 800a1e4:	3301      	adds	r3, #1
 800a1e6:	623b      	str	r3, [r7, #32]
 800a1e8:	6a3a      	ldr	r2, [r7, #32]
 800a1ea:	697b      	ldr	r3, [r7, #20]
 800a1ec:	429a      	cmp	r2, r3
 800a1ee:	d3e6      	bcc.n	800a1be <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800a1f0:	8bfb      	ldrh	r3, [r7, #30]
 800a1f2:	2b00      	cmp	r3, #0
 800a1f4:	d01e      	beq.n	800a234 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800a1f6:	2300      	movs	r3, #0
 800a1f8:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800a1fa:	69bb      	ldr	r3, [r7, #24]
 800a1fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a200:	461a      	mov	r2, r3
 800a202:	f107 0310 	add.w	r3, r7, #16
 800a206:	6812      	ldr	r2, [r2, #0]
 800a208:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800a20a:	693a      	ldr	r2, [r7, #16]
 800a20c:	6a3b      	ldr	r3, [r7, #32]
 800a20e:	b2db      	uxtb	r3, r3
 800a210:	00db      	lsls	r3, r3, #3
 800a212:	fa22 f303 	lsr.w	r3, r2, r3
 800a216:	b2da      	uxtb	r2, r3
 800a218:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a21a:	701a      	strb	r2, [r3, #0]
      i++;
 800a21c:	6a3b      	ldr	r3, [r7, #32]
 800a21e:	3301      	adds	r3, #1
 800a220:	623b      	str	r3, [r7, #32]
      pDest++;
 800a222:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a224:	3301      	adds	r3, #1
 800a226:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800a228:	8bfb      	ldrh	r3, [r7, #30]
 800a22a:	3b01      	subs	r3, #1
 800a22c:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800a22e:	8bfb      	ldrh	r3, [r7, #30]
 800a230:	2b00      	cmp	r3, #0
 800a232:	d1ea      	bne.n	800a20a <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800a234:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a236:	4618      	mov	r0, r3
 800a238:	372c      	adds	r7, #44	; 0x2c
 800a23a:	46bd      	mov	sp, r7
 800a23c:	bc80      	pop	{r7}
 800a23e:	4770      	bx	lr

0800a240 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a240:	b480      	push	{r7}
 800a242:	b085      	sub	sp, #20
 800a244:	af00      	add	r7, sp, #0
 800a246:	6078      	str	r0, [r7, #4]
 800a248:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a24e:	683b      	ldr	r3, [r7, #0]
 800a250:	781b      	ldrb	r3, [r3, #0]
 800a252:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800a254:	683b      	ldr	r3, [r7, #0]
 800a256:	785b      	ldrb	r3, [r3, #1]
 800a258:	2b01      	cmp	r3, #1
 800a25a:	d12c      	bne.n	800a2b6 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800a25c:	68bb      	ldr	r3, [r7, #8]
 800a25e:	015a      	lsls	r2, r3, #5
 800a260:	68fb      	ldr	r3, [r7, #12]
 800a262:	4413      	add	r3, r2
 800a264:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a268:	681b      	ldr	r3, [r3, #0]
 800a26a:	2b00      	cmp	r3, #0
 800a26c:	db12      	blt.n	800a294 <USB_EPSetStall+0x54>
 800a26e:	68bb      	ldr	r3, [r7, #8]
 800a270:	2b00      	cmp	r3, #0
 800a272:	d00f      	beq.n	800a294 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800a274:	68bb      	ldr	r3, [r7, #8]
 800a276:	015a      	lsls	r2, r3, #5
 800a278:	68fb      	ldr	r3, [r7, #12]
 800a27a:	4413      	add	r3, r2
 800a27c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a280:	681b      	ldr	r3, [r3, #0]
 800a282:	68ba      	ldr	r2, [r7, #8]
 800a284:	0151      	lsls	r1, r2, #5
 800a286:	68fa      	ldr	r2, [r7, #12]
 800a288:	440a      	add	r2, r1
 800a28a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a28e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800a292:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800a294:	68bb      	ldr	r3, [r7, #8]
 800a296:	015a      	lsls	r2, r3, #5
 800a298:	68fb      	ldr	r3, [r7, #12]
 800a29a:	4413      	add	r3, r2
 800a29c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a2a0:	681b      	ldr	r3, [r3, #0]
 800a2a2:	68ba      	ldr	r2, [r7, #8]
 800a2a4:	0151      	lsls	r1, r2, #5
 800a2a6:	68fa      	ldr	r2, [r7, #12]
 800a2a8:	440a      	add	r2, r1
 800a2aa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a2ae:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800a2b2:	6013      	str	r3, [r2, #0]
 800a2b4:	e02b      	b.n	800a30e <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800a2b6:	68bb      	ldr	r3, [r7, #8]
 800a2b8:	015a      	lsls	r2, r3, #5
 800a2ba:	68fb      	ldr	r3, [r7, #12]
 800a2bc:	4413      	add	r3, r2
 800a2be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a2c2:	681b      	ldr	r3, [r3, #0]
 800a2c4:	2b00      	cmp	r3, #0
 800a2c6:	db12      	blt.n	800a2ee <USB_EPSetStall+0xae>
 800a2c8:	68bb      	ldr	r3, [r7, #8]
 800a2ca:	2b00      	cmp	r3, #0
 800a2cc:	d00f      	beq.n	800a2ee <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800a2ce:	68bb      	ldr	r3, [r7, #8]
 800a2d0:	015a      	lsls	r2, r3, #5
 800a2d2:	68fb      	ldr	r3, [r7, #12]
 800a2d4:	4413      	add	r3, r2
 800a2d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a2da:	681b      	ldr	r3, [r3, #0]
 800a2dc:	68ba      	ldr	r2, [r7, #8]
 800a2de:	0151      	lsls	r1, r2, #5
 800a2e0:	68fa      	ldr	r2, [r7, #12]
 800a2e2:	440a      	add	r2, r1
 800a2e4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a2e8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800a2ec:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800a2ee:	68bb      	ldr	r3, [r7, #8]
 800a2f0:	015a      	lsls	r2, r3, #5
 800a2f2:	68fb      	ldr	r3, [r7, #12]
 800a2f4:	4413      	add	r3, r2
 800a2f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a2fa:	681b      	ldr	r3, [r3, #0]
 800a2fc:	68ba      	ldr	r2, [r7, #8]
 800a2fe:	0151      	lsls	r1, r2, #5
 800a300:	68fa      	ldr	r2, [r7, #12]
 800a302:	440a      	add	r2, r1
 800a304:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a308:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800a30c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a30e:	2300      	movs	r3, #0
}
 800a310:	4618      	mov	r0, r3
 800a312:	3714      	adds	r7, #20
 800a314:	46bd      	mov	sp, r7
 800a316:	bc80      	pop	{r7}
 800a318:	4770      	bx	lr

0800a31a <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a31a:	b480      	push	{r7}
 800a31c:	b085      	sub	sp, #20
 800a31e:	af00      	add	r7, sp, #0
 800a320:	6078      	str	r0, [r7, #4]
 800a322:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a328:	683b      	ldr	r3, [r7, #0]
 800a32a:	781b      	ldrb	r3, [r3, #0]
 800a32c:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800a32e:	683b      	ldr	r3, [r7, #0]
 800a330:	785b      	ldrb	r3, [r3, #1]
 800a332:	2b01      	cmp	r3, #1
 800a334:	d128      	bne.n	800a388 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800a336:	68bb      	ldr	r3, [r7, #8]
 800a338:	015a      	lsls	r2, r3, #5
 800a33a:	68fb      	ldr	r3, [r7, #12]
 800a33c:	4413      	add	r3, r2
 800a33e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a342:	681b      	ldr	r3, [r3, #0]
 800a344:	68ba      	ldr	r2, [r7, #8]
 800a346:	0151      	lsls	r1, r2, #5
 800a348:	68fa      	ldr	r2, [r7, #12]
 800a34a:	440a      	add	r2, r1
 800a34c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a350:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800a354:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800a356:	683b      	ldr	r3, [r7, #0]
 800a358:	78db      	ldrb	r3, [r3, #3]
 800a35a:	2b03      	cmp	r3, #3
 800a35c:	d003      	beq.n	800a366 <USB_EPClearStall+0x4c>
 800a35e:	683b      	ldr	r3, [r7, #0]
 800a360:	78db      	ldrb	r3, [r3, #3]
 800a362:	2b02      	cmp	r3, #2
 800a364:	d138      	bne.n	800a3d8 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800a366:	68bb      	ldr	r3, [r7, #8]
 800a368:	015a      	lsls	r2, r3, #5
 800a36a:	68fb      	ldr	r3, [r7, #12]
 800a36c:	4413      	add	r3, r2
 800a36e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a372:	681b      	ldr	r3, [r3, #0]
 800a374:	68ba      	ldr	r2, [r7, #8]
 800a376:	0151      	lsls	r1, r2, #5
 800a378:	68fa      	ldr	r2, [r7, #12]
 800a37a:	440a      	add	r2, r1
 800a37c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a380:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a384:	6013      	str	r3, [r2, #0]
 800a386:	e027      	b.n	800a3d8 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800a388:	68bb      	ldr	r3, [r7, #8]
 800a38a:	015a      	lsls	r2, r3, #5
 800a38c:	68fb      	ldr	r3, [r7, #12]
 800a38e:	4413      	add	r3, r2
 800a390:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a394:	681b      	ldr	r3, [r3, #0]
 800a396:	68ba      	ldr	r2, [r7, #8]
 800a398:	0151      	lsls	r1, r2, #5
 800a39a:	68fa      	ldr	r2, [r7, #12]
 800a39c:	440a      	add	r2, r1
 800a39e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a3a2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800a3a6:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800a3a8:	683b      	ldr	r3, [r7, #0]
 800a3aa:	78db      	ldrb	r3, [r3, #3]
 800a3ac:	2b03      	cmp	r3, #3
 800a3ae:	d003      	beq.n	800a3b8 <USB_EPClearStall+0x9e>
 800a3b0:	683b      	ldr	r3, [r7, #0]
 800a3b2:	78db      	ldrb	r3, [r3, #3]
 800a3b4:	2b02      	cmp	r3, #2
 800a3b6:	d10f      	bne.n	800a3d8 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800a3b8:	68bb      	ldr	r3, [r7, #8]
 800a3ba:	015a      	lsls	r2, r3, #5
 800a3bc:	68fb      	ldr	r3, [r7, #12]
 800a3be:	4413      	add	r3, r2
 800a3c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a3c4:	681b      	ldr	r3, [r3, #0]
 800a3c6:	68ba      	ldr	r2, [r7, #8]
 800a3c8:	0151      	lsls	r1, r2, #5
 800a3ca:	68fa      	ldr	r2, [r7, #12]
 800a3cc:	440a      	add	r2, r1
 800a3ce:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a3d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a3d6:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800a3d8:	2300      	movs	r3, #0
}
 800a3da:	4618      	mov	r0, r3
 800a3dc:	3714      	adds	r7, #20
 800a3de:	46bd      	mov	sp, r7
 800a3e0:	bc80      	pop	{r7}
 800a3e2:	4770      	bx	lr

0800a3e4 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800a3e4:	b480      	push	{r7}
 800a3e6:	b085      	sub	sp, #20
 800a3e8:	af00      	add	r7, sp, #0
 800a3ea:	6078      	str	r0, [r7, #4]
 800a3ec:	460b      	mov	r3, r1
 800a3ee:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800a3f4:	68fb      	ldr	r3, [r7, #12]
 800a3f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a3fa:	681b      	ldr	r3, [r3, #0]
 800a3fc:	68fa      	ldr	r2, [r7, #12]
 800a3fe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a402:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800a406:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800a408:	68fb      	ldr	r3, [r7, #12]
 800a40a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a40e:	681a      	ldr	r2, [r3, #0]
 800a410:	78fb      	ldrb	r3, [r7, #3]
 800a412:	011b      	lsls	r3, r3, #4
 800a414:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800a418:	68f9      	ldr	r1, [r7, #12]
 800a41a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a41e:	4313      	orrs	r3, r2
 800a420:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800a422:	2300      	movs	r3, #0
}
 800a424:	4618      	mov	r0, r3
 800a426:	3714      	adds	r7, #20
 800a428:	46bd      	mov	sp, r7
 800a42a:	bc80      	pop	{r7}
 800a42c:	4770      	bx	lr

0800a42e <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800a42e:	b480      	push	{r7}
 800a430:	b085      	sub	sp, #20
 800a432:	af00      	add	r7, sp, #0
 800a434:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800a43a:	68fb      	ldr	r3, [r7, #12]
 800a43c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a440:	681b      	ldr	r3, [r3, #0]
 800a442:	68fa      	ldr	r2, [r7, #12]
 800a444:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800a448:	f023 0303 	bic.w	r3, r3, #3
 800a44c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800a44e:	68fb      	ldr	r3, [r7, #12]
 800a450:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a454:	685b      	ldr	r3, [r3, #4]
 800a456:	68fa      	ldr	r2, [r7, #12]
 800a458:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a45c:	f023 0302 	bic.w	r3, r3, #2
 800a460:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a462:	2300      	movs	r3, #0
}
 800a464:	4618      	mov	r0, r3
 800a466:	3714      	adds	r7, #20
 800a468:	46bd      	mov	sp, r7
 800a46a:	bc80      	pop	{r7}
 800a46c:	4770      	bx	lr

0800a46e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800a46e:	b480      	push	{r7}
 800a470:	b085      	sub	sp, #20
 800a472:	af00      	add	r7, sp, #0
 800a474:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800a47a:	68fb      	ldr	r3, [r7, #12]
 800a47c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a480:	681b      	ldr	r3, [r3, #0]
 800a482:	68fa      	ldr	r2, [r7, #12]
 800a484:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800a488:	f023 0303 	bic.w	r3, r3, #3
 800a48c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800a48e:	68fb      	ldr	r3, [r7, #12]
 800a490:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a494:	685b      	ldr	r3, [r3, #4]
 800a496:	68fa      	ldr	r2, [r7, #12]
 800a498:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a49c:	f043 0302 	orr.w	r3, r3, #2
 800a4a0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a4a2:	2300      	movs	r3, #0
}
 800a4a4:	4618      	mov	r0, r3
 800a4a6:	3714      	adds	r7, #20
 800a4a8:	46bd      	mov	sp, r7
 800a4aa:	bc80      	pop	{r7}
 800a4ac:	4770      	bx	lr

0800a4ae <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800a4ae:	b480      	push	{r7}
 800a4b0:	b085      	sub	sp, #20
 800a4b2:	af00      	add	r7, sp, #0
 800a4b4:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	695b      	ldr	r3, [r3, #20]
 800a4ba:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	699b      	ldr	r3, [r3, #24]
 800a4c0:	68fa      	ldr	r2, [r7, #12]
 800a4c2:	4013      	ands	r3, r2
 800a4c4:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800a4c6:	68fb      	ldr	r3, [r7, #12]
}
 800a4c8:	4618      	mov	r0, r3
 800a4ca:	3714      	adds	r7, #20
 800a4cc:	46bd      	mov	sp, r7
 800a4ce:	bc80      	pop	{r7}
 800a4d0:	4770      	bx	lr

0800a4d2 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800a4d2:	b480      	push	{r7}
 800a4d4:	b085      	sub	sp, #20
 800a4d6:	af00      	add	r7, sp, #0
 800a4d8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800a4de:	68fb      	ldr	r3, [r7, #12]
 800a4e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a4e4:	699b      	ldr	r3, [r3, #24]
 800a4e6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800a4e8:	68fb      	ldr	r3, [r7, #12]
 800a4ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a4ee:	69db      	ldr	r3, [r3, #28]
 800a4f0:	68ba      	ldr	r2, [r7, #8]
 800a4f2:	4013      	ands	r3, r2
 800a4f4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800a4f6:	68bb      	ldr	r3, [r7, #8]
 800a4f8:	0c1b      	lsrs	r3, r3, #16
}
 800a4fa:	4618      	mov	r0, r3
 800a4fc:	3714      	adds	r7, #20
 800a4fe:	46bd      	mov	sp, r7
 800a500:	bc80      	pop	{r7}
 800a502:	4770      	bx	lr

0800a504 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800a504:	b480      	push	{r7}
 800a506:	b085      	sub	sp, #20
 800a508:	af00      	add	r7, sp, #0
 800a50a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800a510:	68fb      	ldr	r3, [r7, #12]
 800a512:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a516:	699b      	ldr	r3, [r3, #24]
 800a518:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800a51a:	68fb      	ldr	r3, [r7, #12]
 800a51c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a520:	69db      	ldr	r3, [r3, #28]
 800a522:	68ba      	ldr	r2, [r7, #8]
 800a524:	4013      	ands	r3, r2
 800a526:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800a528:	68bb      	ldr	r3, [r7, #8]
 800a52a:	b29b      	uxth	r3, r3
}
 800a52c:	4618      	mov	r0, r3
 800a52e:	3714      	adds	r7, #20
 800a530:	46bd      	mov	sp, r7
 800a532:	bc80      	pop	{r7}
 800a534:	4770      	bx	lr

0800a536 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800a536:	b480      	push	{r7}
 800a538:	b085      	sub	sp, #20
 800a53a:	af00      	add	r7, sp, #0
 800a53c:	6078      	str	r0, [r7, #4]
 800a53e:	460b      	mov	r3, r1
 800a540:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800a546:	78fb      	ldrb	r3, [r7, #3]
 800a548:	015a      	lsls	r2, r3, #5
 800a54a:	68fb      	ldr	r3, [r7, #12]
 800a54c:	4413      	add	r3, r2
 800a54e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a552:	689b      	ldr	r3, [r3, #8]
 800a554:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800a556:	68fb      	ldr	r3, [r7, #12]
 800a558:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a55c:	695b      	ldr	r3, [r3, #20]
 800a55e:	68ba      	ldr	r2, [r7, #8]
 800a560:	4013      	ands	r3, r2
 800a562:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800a564:	68bb      	ldr	r3, [r7, #8]
}
 800a566:	4618      	mov	r0, r3
 800a568:	3714      	adds	r7, #20
 800a56a:	46bd      	mov	sp, r7
 800a56c:	bc80      	pop	{r7}
 800a56e:	4770      	bx	lr

0800a570 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800a570:	b480      	push	{r7}
 800a572:	b087      	sub	sp, #28
 800a574:	af00      	add	r7, sp, #0
 800a576:	6078      	str	r0, [r7, #4]
 800a578:	460b      	mov	r3, r1
 800a57a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800a580:	697b      	ldr	r3, [r7, #20]
 800a582:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a586:	691b      	ldr	r3, [r3, #16]
 800a588:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800a58a:	697b      	ldr	r3, [r7, #20]
 800a58c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a590:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a592:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800a594:	78fb      	ldrb	r3, [r7, #3]
 800a596:	f003 030f 	and.w	r3, r3, #15
 800a59a:	68fa      	ldr	r2, [r7, #12]
 800a59c:	fa22 f303 	lsr.w	r3, r2, r3
 800a5a0:	01db      	lsls	r3, r3, #7
 800a5a2:	b2db      	uxtb	r3, r3
 800a5a4:	693a      	ldr	r2, [r7, #16]
 800a5a6:	4313      	orrs	r3, r2
 800a5a8:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800a5aa:	78fb      	ldrb	r3, [r7, #3]
 800a5ac:	015a      	lsls	r2, r3, #5
 800a5ae:	697b      	ldr	r3, [r7, #20]
 800a5b0:	4413      	add	r3, r2
 800a5b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a5b6:	689b      	ldr	r3, [r3, #8]
 800a5b8:	693a      	ldr	r2, [r7, #16]
 800a5ba:	4013      	ands	r3, r2
 800a5bc:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800a5be:	68bb      	ldr	r3, [r7, #8]
}
 800a5c0:	4618      	mov	r0, r3
 800a5c2:	371c      	adds	r7, #28
 800a5c4:	46bd      	mov	sp, r7
 800a5c6:	bc80      	pop	{r7}
 800a5c8:	4770      	bx	lr

0800a5ca <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800a5ca:	b480      	push	{r7}
 800a5cc:	b083      	sub	sp, #12
 800a5ce:	af00      	add	r7, sp, #0
 800a5d0:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	695b      	ldr	r3, [r3, #20]
 800a5d6:	f003 0301 	and.w	r3, r3, #1
}
 800a5da:	4618      	mov	r0, r3
 800a5dc:	370c      	adds	r7, #12
 800a5de:	46bd      	mov	sp, r7
 800a5e0:	bc80      	pop	{r7}
 800a5e2:	4770      	bx	lr

0800a5e4 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800a5e4:	b480      	push	{r7}
 800a5e6:	b085      	sub	sp, #20
 800a5e8:	af00      	add	r7, sp, #0
 800a5ea:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800a5f0:	68fb      	ldr	r3, [r7, #12]
 800a5f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a5f6:	681b      	ldr	r3, [r3, #0]
 800a5f8:	68fa      	ldr	r2, [r7, #12]
 800a5fa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a5fe:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800a602:	f023 0307 	bic.w	r3, r3, #7
 800a606:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800a608:	68fb      	ldr	r3, [r7, #12]
 800a60a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a60e:	685b      	ldr	r3, [r3, #4]
 800a610:	68fa      	ldr	r2, [r7, #12]
 800a612:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a616:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a61a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a61c:	2300      	movs	r3, #0
}
 800a61e:	4618      	mov	r0, r3
 800a620:	3714      	adds	r7, #20
 800a622:	46bd      	mov	sp, r7
 800a624:	bc80      	pop	{r7}
 800a626:	4770      	bx	lr

0800a628 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800a628:	b480      	push	{r7}
 800a62a:	b087      	sub	sp, #28
 800a62c:	af00      	add	r7, sp, #0
 800a62e:	60f8      	str	r0, [r7, #12]
 800a630:	460b      	mov	r3, r1
 800a632:	607a      	str	r2, [r7, #4]
 800a634:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a636:	68fb      	ldr	r3, [r7, #12]
 800a638:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800a63a:	68fb      	ldr	r3, [r7, #12]
 800a63c:	333c      	adds	r3, #60	; 0x3c
 800a63e:	3304      	adds	r3, #4
 800a640:	681b      	ldr	r3, [r3, #0]
 800a642:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800a644:	693b      	ldr	r3, [r7, #16]
 800a646:	4a25      	ldr	r2, [pc, #148]	; (800a6dc <USB_EP0_OutStart+0xb4>)
 800a648:	4293      	cmp	r3, r2
 800a64a:	d90a      	bls.n	800a662 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a64c:	697b      	ldr	r3, [r7, #20]
 800a64e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a652:	681b      	ldr	r3, [r3, #0]
 800a654:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a658:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a65c:	d101      	bne.n	800a662 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800a65e:	2300      	movs	r3, #0
 800a660:	e037      	b.n	800a6d2 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800a662:	697b      	ldr	r3, [r7, #20]
 800a664:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a668:	461a      	mov	r2, r3
 800a66a:	2300      	movs	r3, #0
 800a66c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a66e:	697b      	ldr	r3, [r7, #20]
 800a670:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a674:	691b      	ldr	r3, [r3, #16]
 800a676:	697a      	ldr	r2, [r7, #20]
 800a678:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a67c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a680:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800a682:	697b      	ldr	r3, [r7, #20]
 800a684:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a688:	691b      	ldr	r3, [r3, #16]
 800a68a:	697a      	ldr	r2, [r7, #20]
 800a68c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a690:	f043 0318 	orr.w	r3, r3, #24
 800a694:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800a696:	697b      	ldr	r3, [r7, #20]
 800a698:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a69c:	691b      	ldr	r3, [r3, #16]
 800a69e:	697a      	ldr	r2, [r7, #20]
 800a6a0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a6a4:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800a6a8:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800a6aa:	7afb      	ldrb	r3, [r7, #11]
 800a6ac:	2b01      	cmp	r3, #1
 800a6ae:	d10f      	bne.n	800a6d0 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800a6b0:	697b      	ldr	r3, [r7, #20]
 800a6b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a6b6:	461a      	mov	r2, r3
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800a6bc:	697b      	ldr	r3, [r7, #20]
 800a6be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a6c2:	681b      	ldr	r3, [r3, #0]
 800a6c4:	697a      	ldr	r2, [r7, #20]
 800a6c6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a6ca:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800a6ce:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a6d0:	2300      	movs	r3, #0
}
 800a6d2:	4618      	mov	r0, r3
 800a6d4:	371c      	adds	r7, #28
 800a6d6:	46bd      	mov	sp, r7
 800a6d8:	bc80      	pop	{r7}
 800a6da:	4770      	bx	lr
 800a6dc:	4f54300a 	.word	0x4f54300a

0800a6e0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800a6e0:	b480      	push	{r7}
 800a6e2:	b085      	sub	sp, #20
 800a6e4:	af00      	add	r7, sp, #0
 800a6e6:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800a6e8:	2300      	movs	r3, #0
 800a6ea:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800a6ec:	68fb      	ldr	r3, [r7, #12]
 800a6ee:	3301      	adds	r3, #1
 800a6f0:	60fb      	str	r3, [r7, #12]
 800a6f2:	68fb      	ldr	r3, [r7, #12]
 800a6f4:	4a12      	ldr	r2, [pc, #72]	; (800a740 <USB_CoreReset+0x60>)
 800a6f6:	4293      	cmp	r3, r2
 800a6f8:	d901      	bls.n	800a6fe <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800a6fa:	2303      	movs	r3, #3
 800a6fc:	e01b      	b.n	800a736 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	691b      	ldr	r3, [r3, #16]
 800a702:	2b00      	cmp	r3, #0
 800a704:	daf2      	bge.n	800a6ec <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800a706:	2300      	movs	r3, #0
 800a708:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	691b      	ldr	r3, [r3, #16]
 800a70e:	f043 0201 	orr.w	r2, r3, #1
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800a716:	68fb      	ldr	r3, [r7, #12]
 800a718:	3301      	adds	r3, #1
 800a71a:	60fb      	str	r3, [r7, #12]
 800a71c:	68fb      	ldr	r3, [r7, #12]
 800a71e:	4a08      	ldr	r2, [pc, #32]	; (800a740 <USB_CoreReset+0x60>)
 800a720:	4293      	cmp	r3, r2
 800a722:	d901      	bls.n	800a728 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800a724:	2303      	movs	r3, #3
 800a726:	e006      	b.n	800a736 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	691b      	ldr	r3, [r3, #16]
 800a72c:	f003 0301 	and.w	r3, r3, #1
 800a730:	2b01      	cmp	r3, #1
 800a732:	d0f0      	beq.n	800a716 <USB_CoreReset+0x36>

  return HAL_OK;
 800a734:	2300      	movs	r3, #0
}
 800a736:	4618      	mov	r0, r3
 800a738:	3714      	adds	r7, #20
 800a73a:	46bd      	mov	sp, r7
 800a73c:	bc80      	pop	{r7}
 800a73e:	4770      	bx	lr
 800a740:	00030d40 	.word	0x00030d40

0800a744 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a744:	b580      	push	{r7, lr}
 800a746:	b084      	sub	sp, #16
 800a748:	af00      	add	r7, sp, #0
 800a74a:	6078      	str	r0, [r7, #4]
 800a74c:	460b      	mov	r3, r1
 800a74e:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800a750:	2300      	movs	r3, #0
 800a752:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	7c1b      	ldrb	r3, [r3, #16]
 800a758:	2b00      	cmp	r3, #0
 800a75a:	d115      	bne.n	800a788 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800a75c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a760:	2202      	movs	r2, #2
 800a762:	2181      	movs	r1, #129	; 0x81
 800a764:	6878      	ldr	r0, [r7, #4]
 800a766:	f001 ff48 	bl	800c5fa <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	2201      	movs	r2, #1
 800a76e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800a770:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a774:	2202      	movs	r2, #2
 800a776:	2101      	movs	r1, #1
 800a778:	6878      	ldr	r0, [r7, #4]
 800a77a:	f001 ff3e 	bl	800c5fa <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	2201      	movs	r2, #1
 800a782:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 800a786:	e012      	b.n	800a7ae <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800a788:	2340      	movs	r3, #64	; 0x40
 800a78a:	2202      	movs	r2, #2
 800a78c:	2181      	movs	r1, #129	; 0x81
 800a78e:	6878      	ldr	r0, [r7, #4]
 800a790:	f001 ff33 	bl	800c5fa <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	2201      	movs	r2, #1
 800a798:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800a79a:	2340      	movs	r3, #64	; 0x40
 800a79c:	2202      	movs	r2, #2
 800a79e:	2101      	movs	r1, #1
 800a7a0:	6878      	ldr	r0, [r7, #4]
 800a7a2:	f001 ff2a 	bl	800c5fa <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	2201      	movs	r2, #1
 800a7aa:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800a7ae:	2308      	movs	r3, #8
 800a7b0:	2203      	movs	r2, #3
 800a7b2:	2182      	movs	r1, #130	; 0x82
 800a7b4:	6878      	ldr	r0, [r7, #4]
 800a7b6:	f001 ff20 	bl	800c5fa <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	2201      	movs	r2, #1
 800a7be:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800a7c0:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800a7c4:	f003 fbe8 	bl	800df98 <malloc>
 800a7c8:	4603      	mov	r3, r0
 800a7ca:	461a      	mov	r2, r3
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a7d8:	2b00      	cmp	r3, #0
 800a7da:	d102      	bne.n	800a7e2 <USBD_CDC_Init+0x9e>
  {
    ret = 1U;
 800a7dc:	2301      	movs	r3, #1
 800a7de:	73fb      	strb	r3, [r7, #15]
 800a7e0:	e026      	b.n	800a830 <USBD_CDC_Init+0xec>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a7e8:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a7f0:	681b      	ldr	r3, [r3, #0]
 800a7f2:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 800a7f4:	68bb      	ldr	r3, [r7, #8]
 800a7f6:	2200      	movs	r2, #0
 800a7f8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 800a7fc:	68bb      	ldr	r3, [r7, #8]
 800a7fe:	2200      	movs	r2, #0
 800a800:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	7c1b      	ldrb	r3, [r3, #16]
 800a808:	2b00      	cmp	r3, #0
 800a80a:	d109      	bne.n	800a820 <USBD_CDC_Init+0xdc>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800a80c:	68bb      	ldr	r3, [r7, #8]
 800a80e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a812:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a816:	2101      	movs	r1, #1
 800a818:	6878      	ldr	r0, [r7, #4]
 800a81a:	f001 ffde 	bl	800c7da <USBD_LL_PrepareReceive>
 800a81e:	e007      	b.n	800a830 <USBD_CDC_Init+0xec>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800a820:	68bb      	ldr	r3, [r7, #8]
 800a822:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a826:	2340      	movs	r3, #64	; 0x40
 800a828:	2101      	movs	r1, #1
 800a82a:	6878      	ldr	r0, [r7, #4]
 800a82c:	f001 ffd5 	bl	800c7da <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 800a830:	7bfb      	ldrb	r3, [r7, #15]
}
 800a832:	4618      	mov	r0, r3
 800a834:	3710      	adds	r7, #16
 800a836:	46bd      	mov	sp, r7
 800a838:	bd80      	pop	{r7, pc}

0800a83a <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a83a:	b580      	push	{r7, lr}
 800a83c:	b084      	sub	sp, #16
 800a83e:	af00      	add	r7, sp, #0
 800a840:	6078      	str	r0, [r7, #4]
 800a842:	460b      	mov	r3, r1
 800a844:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800a846:	2300      	movs	r3, #0
 800a848:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800a84a:	2181      	movs	r1, #129	; 0x81
 800a84c:	6878      	ldr	r0, [r7, #4]
 800a84e:	f001 fefa 	bl	800c646 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	2200      	movs	r2, #0
 800a856:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800a858:	2101      	movs	r1, #1
 800a85a:	6878      	ldr	r0, [r7, #4]
 800a85c:	f001 fef3 	bl	800c646 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	2200      	movs	r2, #0
 800a864:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800a868:	2182      	movs	r1, #130	; 0x82
 800a86a:	6878      	ldr	r0, [r7, #4]
 800a86c:	f001 feeb 	bl	800c646 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	2200      	movs	r2, #0
 800a874:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a87c:	2b00      	cmp	r3, #0
 800a87e:	d00e      	beq.n	800a89e <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a886:	685b      	ldr	r3, [r3, #4]
 800a888:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a890:	4618      	mov	r0, r3
 800a892:	f003 fb89 	bl	800dfa8 <free>
    pdev->pClassData = NULL;
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	2200      	movs	r2, #0
 800a89a:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 800a89e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a8a0:	4618      	mov	r0, r3
 800a8a2:	3710      	adds	r7, #16
 800a8a4:	46bd      	mov	sp, r7
 800a8a6:	bd80      	pop	{r7, pc}

0800a8a8 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800a8a8:	b580      	push	{r7, lr}
 800a8aa:	b086      	sub	sp, #24
 800a8ac:	af00      	add	r7, sp, #0
 800a8ae:	6078      	str	r0, [r7, #4]
 800a8b0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a8b8:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800a8ba:	2300      	movs	r3, #0
 800a8bc:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 800a8be:	2300      	movs	r3, #0
 800a8c0:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 800a8c2:	2300      	movs	r3, #0
 800a8c4:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a8c6:	683b      	ldr	r3, [r7, #0]
 800a8c8:	781b      	ldrb	r3, [r3, #0]
 800a8ca:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a8ce:	2b00      	cmp	r3, #0
 800a8d0:	d039      	beq.n	800a946 <USBD_CDC_Setup+0x9e>
 800a8d2:	2b20      	cmp	r3, #32
 800a8d4:	d17f      	bne.n	800a9d6 <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 800a8d6:	683b      	ldr	r3, [r7, #0]
 800a8d8:	88db      	ldrh	r3, [r3, #6]
 800a8da:	2b00      	cmp	r3, #0
 800a8dc:	d029      	beq.n	800a932 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 800a8de:	683b      	ldr	r3, [r7, #0]
 800a8e0:	781b      	ldrb	r3, [r3, #0]
 800a8e2:	b25b      	sxtb	r3, r3
 800a8e4:	2b00      	cmp	r3, #0
 800a8e6:	da11      	bge.n	800a90c <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a8ee:	689b      	ldr	r3, [r3, #8]
 800a8f0:	683a      	ldr	r2, [r7, #0]
 800a8f2:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 800a8f4:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800a8f6:	683a      	ldr	r2, [r7, #0]
 800a8f8:	88d2      	ldrh	r2, [r2, #6]
 800a8fa:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800a8fc:	6939      	ldr	r1, [r7, #16]
 800a8fe:	683b      	ldr	r3, [r7, #0]
 800a900:	88db      	ldrh	r3, [r3, #6]
 800a902:	461a      	mov	r2, r3
 800a904:	6878      	ldr	r0, [r7, #4]
 800a906:	f001 fa42 	bl	800bd8e <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 800a90a:	e06b      	b.n	800a9e4 <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 800a90c:	683b      	ldr	r3, [r7, #0]
 800a90e:	785a      	ldrb	r2, [r3, #1]
 800a910:	693b      	ldr	r3, [r7, #16]
 800a912:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800a916:	683b      	ldr	r3, [r7, #0]
 800a918:	88db      	ldrh	r3, [r3, #6]
 800a91a:	b2da      	uxtb	r2, r3
 800a91c:	693b      	ldr	r3, [r7, #16]
 800a91e:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800a922:	6939      	ldr	r1, [r7, #16]
 800a924:	683b      	ldr	r3, [r7, #0]
 800a926:	88db      	ldrh	r3, [r3, #6]
 800a928:	461a      	mov	r2, r3
 800a92a:	6878      	ldr	r0, [r7, #4]
 800a92c:	f001 fa5d 	bl	800bdea <USBD_CtlPrepareRx>
      break;
 800a930:	e058      	b.n	800a9e4 <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a938:	689b      	ldr	r3, [r3, #8]
 800a93a:	683a      	ldr	r2, [r7, #0]
 800a93c:	7850      	ldrb	r0, [r2, #1]
 800a93e:	2200      	movs	r2, #0
 800a940:	6839      	ldr	r1, [r7, #0]
 800a942:	4798      	blx	r3
      break;
 800a944:	e04e      	b.n	800a9e4 <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a946:	683b      	ldr	r3, [r7, #0]
 800a948:	785b      	ldrb	r3, [r3, #1]
 800a94a:	2b0b      	cmp	r3, #11
 800a94c:	d02e      	beq.n	800a9ac <USBD_CDC_Setup+0x104>
 800a94e:	2b0b      	cmp	r3, #11
 800a950:	dc38      	bgt.n	800a9c4 <USBD_CDC_Setup+0x11c>
 800a952:	2b00      	cmp	r3, #0
 800a954:	d002      	beq.n	800a95c <USBD_CDC_Setup+0xb4>
 800a956:	2b0a      	cmp	r3, #10
 800a958:	d014      	beq.n	800a984 <USBD_CDC_Setup+0xdc>
 800a95a:	e033      	b.n	800a9c4 <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a962:	2b03      	cmp	r3, #3
 800a964:	d107      	bne.n	800a976 <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 800a966:	f107 030c 	add.w	r3, r7, #12
 800a96a:	2202      	movs	r2, #2
 800a96c:	4619      	mov	r1, r3
 800a96e:	6878      	ldr	r0, [r7, #4]
 800a970:	f001 fa0d 	bl	800bd8e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a974:	e02e      	b.n	800a9d4 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 800a976:	6839      	ldr	r1, [r7, #0]
 800a978:	6878      	ldr	r0, [r7, #4]
 800a97a:	f001 f99e 	bl	800bcba <USBD_CtlError>
            ret = USBD_FAIL;
 800a97e:	2302      	movs	r3, #2
 800a980:	75fb      	strb	r3, [r7, #23]
          break;
 800a982:	e027      	b.n	800a9d4 <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a98a:	2b03      	cmp	r3, #3
 800a98c:	d107      	bne.n	800a99e <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 800a98e:	f107 030f 	add.w	r3, r7, #15
 800a992:	2201      	movs	r2, #1
 800a994:	4619      	mov	r1, r3
 800a996:	6878      	ldr	r0, [r7, #4]
 800a998:	f001 f9f9 	bl	800bd8e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a99c:	e01a      	b.n	800a9d4 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 800a99e:	6839      	ldr	r1, [r7, #0]
 800a9a0:	6878      	ldr	r0, [r7, #4]
 800a9a2:	f001 f98a 	bl	800bcba <USBD_CtlError>
            ret = USBD_FAIL;
 800a9a6:	2302      	movs	r3, #2
 800a9a8:	75fb      	strb	r3, [r7, #23]
          break;
 800a9aa:	e013      	b.n	800a9d4 <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a9b2:	2b03      	cmp	r3, #3
 800a9b4:	d00d      	beq.n	800a9d2 <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 800a9b6:	6839      	ldr	r1, [r7, #0]
 800a9b8:	6878      	ldr	r0, [r7, #4]
 800a9ba:	f001 f97e 	bl	800bcba <USBD_CtlError>
            ret = USBD_FAIL;
 800a9be:	2302      	movs	r3, #2
 800a9c0:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800a9c2:	e006      	b.n	800a9d2 <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 800a9c4:	6839      	ldr	r1, [r7, #0]
 800a9c6:	6878      	ldr	r0, [r7, #4]
 800a9c8:	f001 f977 	bl	800bcba <USBD_CtlError>
          ret = USBD_FAIL;
 800a9cc:	2302      	movs	r3, #2
 800a9ce:	75fb      	strb	r3, [r7, #23]
          break;
 800a9d0:	e000      	b.n	800a9d4 <USBD_CDC_Setup+0x12c>
          break;
 800a9d2:	bf00      	nop
      }
      break;
 800a9d4:	e006      	b.n	800a9e4 <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800a9d6:	6839      	ldr	r1, [r7, #0]
 800a9d8:	6878      	ldr	r0, [r7, #4]
 800a9da:	f001 f96e 	bl	800bcba <USBD_CtlError>
      ret = USBD_FAIL;
 800a9de:	2302      	movs	r3, #2
 800a9e0:	75fb      	strb	r3, [r7, #23]
      break;
 800a9e2:	bf00      	nop
  }

  return ret;
 800a9e4:	7dfb      	ldrb	r3, [r7, #23]
}
 800a9e6:	4618      	mov	r0, r3
 800a9e8:	3718      	adds	r7, #24
 800a9ea:	46bd      	mov	sp, r7
 800a9ec:	bd80      	pop	{r7, pc}

0800a9ee <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a9ee:	b580      	push	{r7, lr}
 800a9f0:	b084      	sub	sp, #16
 800a9f2:	af00      	add	r7, sp, #0
 800a9f4:	6078      	str	r0, [r7, #4]
 800a9f6:	460b      	mov	r3, r1
 800a9f8:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aa00:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800aa08:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aa10:	2b00      	cmp	r3, #0
 800aa12:	d03a      	beq.n	800aa8a <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800aa14:	78fa      	ldrb	r2, [r7, #3]
 800aa16:	6879      	ldr	r1, [r7, #4]
 800aa18:	4613      	mov	r3, r2
 800aa1a:	009b      	lsls	r3, r3, #2
 800aa1c:	4413      	add	r3, r2
 800aa1e:	009b      	lsls	r3, r3, #2
 800aa20:	440b      	add	r3, r1
 800aa22:	331c      	adds	r3, #28
 800aa24:	681b      	ldr	r3, [r3, #0]
 800aa26:	2b00      	cmp	r3, #0
 800aa28:	d029      	beq.n	800aa7e <USBD_CDC_DataIn+0x90>
 800aa2a:	78fa      	ldrb	r2, [r7, #3]
 800aa2c:	6879      	ldr	r1, [r7, #4]
 800aa2e:	4613      	mov	r3, r2
 800aa30:	009b      	lsls	r3, r3, #2
 800aa32:	4413      	add	r3, r2
 800aa34:	009b      	lsls	r3, r3, #2
 800aa36:	440b      	add	r3, r1
 800aa38:	331c      	adds	r3, #28
 800aa3a:	681a      	ldr	r2, [r3, #0]
 800aa3c:	78f9      	ldrb	r1, [r7, #3]
 800aa3e:	68b8      	ldr	r0, [r7, #8]
 800aa40:	460b      	mov	r3, r1
 800aa42:	00db      	lsls	r3, r3, #3
 800aa44:	1a5b      	subs	r3, r3, r1
 800aa46:	009b      	lsls	r3, r3, #2
 800aa48:	4403      	add	r3, r0
 800aa4a:	3344      	adds	r3, #68	; 0x44
 800aa4c:	681b      	ldr	r3, [r3, #0]
 800aa4e:	fbb2 f1f3 	udiv	r1, r2, r3
 800aa52:	fb03 f301 	mul.w	r3, r3, r1
 800aa56:	1ad3      	subs	r3, r2, r3
 800aa58:	2b00      	cmp	r3, #0
 800aa5a:	d110      	bne.n	800aa7e <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 800aa5c:	78fa      	ldrb	r2, [r7, #3]
 800aa5e:	6879      	ldr	r1, [r7, #4]
 800aa60:	4613      	mov	r3, r2
 800aa62:	009b      	lsls	r3, r3, #2
 800aa64:	4413      	add	r3, r2
 800aa66:	009b      	lsls	r3, r3, #2
 800aa68:	440b      	add	r3, r1
 800aa6a:	331c      	adds	r3, #28
 800aa6c:	2200      	movs	r2, #0
 800aa6e:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800aa70:	78f9      	ldrb	r1, [r7, #3]
 800aa72:	2300      	movs	r3, #0
 800aa74:	2200      	movs	r2, #0
 800aa76:	6878      	ldr	r0, [r7, #4]
 800aa78:	f001 fe8c 	bl	800c794 <USBD_LL_Transmit>
 800aa7c:	e003      	b.n	800aa86 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 800aa7e:	68fb      	ldr	r3, [r7, #12]
 800aa80:	2200      	movs	r2, #0
 800aa82:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 800aa86:	2300      	movs	r3, #0
 800aa88:	e000      	b.n	800aa8c <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 800aa8a:	2302      	movs	r3, #2
  }
}
 800aa8c:	4618      	mov	r0, r3
 800aa8e:	3710      	adds	r7, #16
 800aa90:	46bd      	mov	sp, r7
 800aa92:	bd80      	pop	{r7, pc}

0800aa94 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800aa94:	b580      	push	{r7, lr}
 800aa96:	b084      	sub	sp, #16
 800aa98:	af00      	add	r7, sp, #0
 800aa9a:	6078      	str	r0, [r7, #4]
 800aa9c:	460b      	mov	r3, r1
 800aa9e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aaa6:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800aaa8:	78fb      	ldrb	r3, [r7, #3]
 800aaaa:	4619      	mov	r1, r3
 800aaac:	6878      	ldr	r0, [r7, #4]
 800aaae:	f001 feb7 	bl	800c820 <USBD_LL_GetRxDataSize>
 800aab2:	4602      	mov	r2, r0
 800aab4:	68fb      	ldr	r3, [r7, #12]
 800aab6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aac0:	2b00      	cmp	r3, #0
 800aac2:	d00d      	beq.n	800aae0 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800aaca:	68db      	ldr	r3, [r3, #12]
 800aacc:	68fa      	ldr	r2, [r7, #12]
 800aace:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800aad2:	68fa      	ldr	r2, [r7, #12]
 800aad4:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800aad8:	4611      	mov	r1, r2
 800aada:	4798      	blx	r3

    return USBD_OK;
 800aadc:	2300      	movs	r3, #0
 800aade:	e000      	b.n	800aae2 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 800aae0:	2302      	movs	r3, #2
  }
}
 800aae2:	4618      	mov	r0, r3
 800aae4:	3710      	adds	r7, #16
 800aae6:	46bd      	mov	sp, r7
 800aae8:	bd80      	pop	{r7, pc}

0800aaea <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800aaea:	b580      	push	{r7, lr}
 800aaec:	b084      	sub	sp, #16
 800aaee:	af00      	add	r7, sp, #0
 800aaf0:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aaf8:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ab00:	2b00      	cmp	r3, #0
 800ab02:	d015      	beq.n	800ab30 <USBD_CDC_EP0_RxReady+0x46>
 800ab04:	68fb      	ldr	r3, [r7, #12]
 800ab06:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800ab0a:	2bff      	cmp	r3, #255	; 0xff
 800ab0c:	d010      	beq.n	800ab30 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ab14:	689b      	ldr	r3, [r3, #8]
 800ab16:	68fa      	ldr	r2, [r7, #12]
 800ab18:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 800ab1c:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800ab1e:	68fa      	ldr	r2, [r7, #12]
 800ab20:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800ab24:	b292      	uxth	r2, r2
 800ab26:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800ab28:	68fb      	ldr	r3, [r7, #12]
 800ab2a:	22ff      	movs	r2, #255	; 0xff
 800ab2c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 800ab30:	2300      	movs	r3, #0
}
 800ab32:	4618      	mov	r0, r3
 800ab34:	3710      	adds	r7, #16
 800ab36:	46bd      	mov	sp, r7
 800ab38:	bd80      	pop	{r7, pc}
	...

0800ab3c <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800ab3c:	b480      	push	{r7}
 800ab3e:	b083      	sub	sp, #12
 800ab40:	af00      	add	r7, sp, #0
 800ab42:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	2243      	movs	r2, #67	; 0x43
 800ab48:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 800ab4a:	4b03      	ldr	r3, [pc, #12]	; (800ab58 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800ab4c:	4618      	mov	r0, r3
 800ab4e:	370c      	adds	r7, #12
 800ab50:	46bd      	mov	sp, r7
 800ab52:	bc80      	pop	{r7}
 800ab54:	4770      	bx	lr
 800ab56:	bf00      	nop
 800ab58:	20000098 	.word	0x20000098

0800ab5c <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800ab5c:	b480      	push	{r7}
 800ab5e:	b083      	sub	sp, #12
 800ab60:	af00      	add	r7, sp, #0
 800ab62:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	2243      	movs	r2, #67	; 0x43
 800ab68:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 800ab6a:	4b03      	ldr	r3, [pc, #12]	; (800ab78 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800ab6c:	4618      	mov	r0, r3
 800ab6e:	370c      	adds	r7, #12
 800ab70:	46bd      	mov	sp, r7
 800ab72:	bc80      	pop	{r7}
 800ab74:	4770      	bx	lr
 800ab76:	bf00      	nop
 800ab78:	20000054 	.word	0x20000054

0800ab7c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800ab7c:	b480      	push	{r7}
 800ab7e:	b083      	sub	sp, #12
 800ab80:	af00      	add	r7, sp, #0
 800ab82:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	2243      	movs	r2, #67	; 0x43
 800ab88:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 800ab8a:	4b03      	ldr	r3, [pc, #12]	; (800ab98 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800ab8c:	4618      	mov	r0, r3
 800ab8e:	370c      	adds	r7, #12
 800ab90:	46bd      	mov	sp, r7
 800ab92:	bc80      	pop	{r7}
 800ab94:	4770      	bx	lr
 800ab96:	bf00      	nop
 800ab98:	200000dc 	.word	0x200000dc

0800ab9c <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800ab9c:	b480      	push	{r7}
 800ab9e:	b083      	sub	sp, #12
 800aba0:	af00      	add	r7, sp, #0
 800aba2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	220a      	movs	r2, #10
 800aba8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800abaa:	4b03      	ldr	r3, [pc, #12]	; (800abb8 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800abac:	4618      	mov	r0, r3
 800abae:	370c      	adds	r7, #12
 800abb0:	46bd      	mov	sp, r7
 800abb2:	bc80      	pop	{r7}
 800abb4:	4770      	bx	lr
 800abb6:	bf00      	nop
 800abb8:	20000010 	.word	0x20000010

0800abbc <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 800abbc:	b480      	push	{r7}
 800abbe:	b085      	sub	sp, #20
 800abc0:	af00      	add	r7, sp, #0
 800abc2:	6078      	str	r0, [r7, #4]
 800abc4:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800abc6:	2302      	movs	r3, #2
 800abc8:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 800abca:	683b      	ldr	r3, [r7, #0]
 800abcc:	2b00      	cmp	r3, #0
 800abce:	d005      	beq.n	800abdc <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	683a      	ldr	r2, [r7, #0]
 800abd4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 800abd8:	2300      	movs	r3, #0
 800abda:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800abdc:	7bfb      	ldrb	r3, [r7, #15]
}
 800abde:	4618      	mov	r0, r3
 800abe0:	3714      	adds	r7, #20
 800abe2:	46bd      	mov	sp, r7
 800abe4:	bc80      	pop	{r7}
 800abe6:	4770      	bx	lr

0800abe8 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 800abe8:	b480      	push	{r7}
 800abea:	b087      	sub	sp, #28
 800abec:	af00      	add	r7, sp, #0
 800abee:	60f8      	str	r0, [r7, #12]
 800abf0:	60b9      	str	r1, [r7, #8]
 800abf2:	4613      	mov	r3, r2
 800abf4:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800abf6:	68fb      	ldr	r3, [r7, #12]
 800abf8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800abfc:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800abfe:	697b      	ldr	r3, [r7, #20]
 800ac00:	68ba      	ldr	r2, [r7, #8]
 800ac02:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800ac06:	88fa      	ldrh	r2, [r7, #6]
 800ac08:	697b      	ldr	r3, [r7, #20]
 800ac0a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 800ac0e:	2300      	movs	r3, #0
}
 800ac10:	4618      	mov	r0, r3
 800ac12:	371c      	adds	r7, #28
 800ac14:	46bd      	mov	sp, r7
 800ac16:	bc80      	pop	{r7}
 800ac18:	4770      	bx	lr

0800ac1a <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 800ac1a:	b480      	push	{r7}
 800ac1c:	b085      	sub	sp, #20
 800ac1e:	af00      	add	r7, sp, #0
 800ac20:	6078      	str	r0, [r7, #4]
 800ac22:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ac2a:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800ac2c:	68fb      	ldr	r3, [r7, #12]
 800ac2e:	683a      	ldr	r2, [r7, #0]
 800ac30:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 800ac34:	2300      	movs	r3, #0
}
 800ac36:	4618      	mov	r0, r3
 800ac38:	3714      	adds	r7, #20
 800ac3a:	46bd      	mov	sp, r7
 800ac3c:	bc80      	pop	{r7}
 800ac3e:	4770      	bx	lr

0800ac40 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800ac40:	b580      	push	{r7, lr}
 800ac42:	b084      	sub	sp, #16
 800ac44:	af00      	add	r7, sp, #0
 800ac46:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ac4e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ac56:	2b00      	cmp	r3, #0
 800ac58:	d01c      	beq.n	800ac94 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 800ac5a:	68fb      	ldr	r3, [r7, #12]
 800ac5c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800ac60:	2b00      	cmp	r3, #0
 800ac62:	d115      	bne.n	800ac90 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 800ac64:	68fb      	ldr	r3, [r7, #12]
 800ac66:	2201      	movs	r2, #1
 800ac68:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800ac6c:	68fb      	ldr	r3, [r7, #12]
 800ac6e:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800ac76:	68fb      	ldr	r3, [r7, #12]
 800ac78:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 800ac7c:	68fb      	ldr	r3, [r7, #12]
 800ac7e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800ac82:	b29b      	uxth	r3, r3
 800ac84:	2181      	movs	r1, #129	; 0x81
 800ac86:	6878      	ldr	r0, [r7, #4]
 800ac88:	f001 fd84 	bl	800c794 <USBD_LL_Transmit>

      return USBD_OK;
 800ac8c:	2300      	movs	r3, #0
 800ac8e:	e002      	b.n	800ac96 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 800ac90:	2301      	movs	r3, #1
 800ac92:	e000      	b.n	800ac96 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 800ac94:	2302      	movs	r3, #2
  }
}
 800ac96:	4618      	mov	r0, r3
 800ac98:	3710      	adds	r7, #16
 800ac9a:	46bd      	mov	sp, r7
 800ac9c:	bd80      	pop	{r7, pc}

0800ac9e <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800ac9e:	b580      	push	{r7, lr}
 800aca0:	b084      	sub	sp, #16
 800aca2:	af00      	add	r7, sp, #0
 800aca4:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800acac:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800acb4:	2b00      	cmp	r3, #0
 800acb6:	d017      	beq.n	800ace8 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	7c1b      	ldrb	r3, [r3, #16]
 800acbc:	2b00      	cmp	r3, #0
 800acbe:	d109      	bne.n	800acd4 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800acc0:	68fb      	ldr	r3, [r7, #12]
 800acc2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800acc6:	f44f 7300 	mov.w	r3, #512	; 0x200
 800acca:	2101      	movs	r1, #1
 800accc:	6878      	ldr	r0, [r7, #4]
 800acce:	f001 fd84 	bl	800c7da <USBD_LL_PrepareReceive>
 800acd2:	e007      	b.n	800ace4 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800acd4:	68fb      	ldr	r3, [r7, #12]
 800acd6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800acda:	2340      	movs	r3, #64	; 0x40
 800acdc:	2101      	movs	r1, #1
 800acde:	6878      	ldr	r0, [r7, #4]
 800ace0:	f001 fd7b 	bl	800c7da <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 800ace4:	2300      	movs	r3, #0
 800ace6:	e000      	b.n	800acea <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 800ace8:	2302      	movs	r3, #2
  }
}
 800acea:	4618      	mov	r0, r3
 800acec:	3710      	adds	r7, #16
 800acee:	46bd      	mov	sp, r7
 800acf0:	bd80      	pop	{r7, pc}

0800acf2 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800acf2:	b580      	push	{r7, lr}
 800acf4:	b084      	sub	sp, #16
 800acf6:	af00      	add	r7, sp, #0
 800acf8:	60f8      	str	r0, [r7, #12]
 800acfa:	60b9      	str	r1, [r7, #8]
 800acfc:	4613      	mov	r3, r2
 800acfe:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800ad00:	68fb      	ldr	r3, [r7, #12]
 800ad02:	2b00      	cmp	r3, #0
 800ad04:	d101      	bne.n	800ad0a <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800ad06:	2302      	movs	r3, #2
 800ad08:	e01a      	b.n	800ad40 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 800ad0a:	68fb      	ldr	r3, [r7, #12]
 800ad0c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ad10:	2b00      	cmp	r3, #0
 800ad12:	d003      	beq.n	800ad1c <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800ad14:	68fb      	ldr	r3, [r7, #12]
 800ad16:	2200      	movs	r2, #0
 800ad18:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800ad1c:	68bb      	ldr	r3, [r7, #8]
 800ad1e:	2b00      	cmp	r3, #0
 800ad20:	d003      	beq.n	800ad2a <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 800ad22:	68fb      	ldr	r3, [r7, #12]
 800ad24:	68ba      	ldr	r2, [r7, #8]
 800ad26:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ad2a:	68fb      	ldr	r3, [r7, #12]
 800ad2c:	2201      	movs	r2, #1
 800ad2e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800ad32:	68fb      	ldr	r3, [r7, #12]
 800ad34:	79fa      	ldrb	r2, [r7, #7]
 800ad36:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800ad38:	68f8      	ldr	r0, [r7, #12]
 800ad3a:	f001 fbf9 	bl	800c530 <USBD_LL_Init>

  return USBD_OK;
 800ad3e:	2300      	movs	r3, #0
}
 800ad40:	4618      	mov	r0, r3
 800ad42:	3710      	adds	r7, #16
 800ad44:	46bd      	mov	sp, r7
 800ad46:	bd80      	pop	{r7, pc}

0800ad48 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800ad48:	b480      	push	{r7}
 800ad4a:	b085      	sub	sp, #20
 800ad4c:	af00      	add	r7, sp, #0
 800ad4e:	6078      	str	r0, [r7, #4]
 800ad50:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 800ad52:	2300      	movs	r3, #0
 800ad54:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 800ad56:	683b      	ldr	r3, [r7, #0]
 800ad58:	2b00      	cmp	r3, #0
 800ad5a:	d006      	beq.n	800ad6a <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	683a      	ldr	r2, [r7, #0]
 800ad60:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 800ad64:	2300      	movs	r3, #0
 800ad66:	73fb      	strb	r3, [r7, #15]
 800ad68:	e001      	b.n	800ad6e <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800ad6a:	2302      	movs	r3, #2
 800ad6c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800ad6e:	7bfb      	ldrb	r3, [r7, #15]
}
 800ad70:	4618      	mov	r0, r3
 800ad72:	3714      	adds	r7, #20
 800ad74:	46bd      	mov	sp, r7
 800ad76:	bc80      	pop	{r7}
 800ad78:	4770      	bx	lr

0800ad7a <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 800ad7a:	b580      	push	{r7, lr}
 800ad7c:	b082      	sub	sp, #8
 800ad7e:	af00      	add	r7, sp, #0
 800ad80:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800ad82:	6878      	ldr	r0, [r7, #4]
 800ad84:	f001 fc1e 	bl	800c5c4 <USBD_LL_Start>

  return USBD_OK;
 800ad88:	2300      	movs	r3, #0
}
 800ad8a:	4618      	mov	r0, r3
 800ad8c:	3708      	adds	r7, #8
 800ad8e:	46bd      	mov	sp, r7
 800ad90:	bd80      	pop	{r7, pc}

0800ad92 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800ad92:	b480      	push	{r7}
 800ad94:	b083      	sub	sp, #12
 800ad96:	af00      	add	r7, sp, #0
 800ad98:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800ad9a:	2300      	movs	r3, #0
}
 800ad9c:	4618      	mov	r0, r3
 800ad9e:	370c      	adds	r7, #12
 800ada0:	46bd      	mov	sp, r7
 800ada2:	bc80      	pop	{r7}
 800ada4:	4770      	bx	lr

0800ada6 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800ada6:	b580      	push	{r7, lr}
 800ada8:	b084      	sub	sp, #16
 800adaa:	af00      	add	r7, sp, #0
 800adac:	6078      	str	r0, [r7, #4]
 800adae:	460b      	mov	r3, r1
 800adb0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800adb2:	2302      	movs	r3, #2
 800adb4:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800adbc:	2b00      	cmp	r3, #0
 800adbe:	d00c      	beq.n	800adda <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800adc6:	681b      	ldr	r3, [r3, #0]
 800adc8:	78fa      	ldrb	r2, [r7, #3]
 800adca:	4611      	mov	r1, r2
 800adcc:	6878      	ldr	r0, [r7, #4]
 800adce:	4798      	blx	r3
 800add0:	4603      	mov	r3, r0
 800add2:	2b00      	cmp	r3, #0
 800add4:	d101      	bne.n	800adda <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800add6:	2300      	movs	r3, #0
 800add8:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800adda:	7bfb      	ldrb	r3, [r7, #15]
}
 800addc:	4618      	mov	r0, r3
 800adde:	3710      	adds	r7, #16
 800ade0:	46bd      	mov	sp, r7
 800ade2:	bd80      	pop	{r7, pc}

0800ade4 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800ade4:	b580      	push	{r7, lr}
 800ade6:	b082      	sub	sp, #8
 800ade8:	af00      	add	r7, sp, #0
 800adea:	6078      	str	r0, [r7, #4]
 800adec:	460b      	mov	r3, r1
 800adee:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800adf6:	685b      	ldr	r3, [r3, #4]
 800adf8:	78fa      	ldrb	r2, [r7, #3]
 800adfa:	4611      	mov	r1, r2
 800adfc:	6878      	ldr	r0, [r7, #4]
 800adfe:	4798      	blx	r3

  return USBD_OK;
 800ae00:	2300      	movs	r3, #0
}
 800ae02:	4618      	mov	r0, r3
 800ae04:	3708      	adds	r7, #8
 800ae06:	46bd      	mov	sp, r7
 800ae08:	bd80      	pop	{r7, pc}

0800ae0a <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800ae0a:	b580      	push	{r7, lr}
 800ae0c:	b082      	sub	sp, #8
 800ae0e:	af00      	add	r7, sp, #0
 800ae10:	6078      	str	r0, [r7, #4]
 800ae12:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800ae1a:	6839      	ldr	r1, [r7, #0]
 800ae1c:	4618      	mov	r0, r3
 800ae1e:	f000 ff10 	bl	800bc42 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	2201      	movs	r2, #1
 800ae26:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800ae30:	461a      	mov	r2, r3
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800ae3e:	f003 031f 	and.w	r3, r3, #31
 800ae42:	2b02      	cmp	r3, #2
 800ae44:	d016      	beq.n	800ae74 <USBD_LL_SetupStage+0x6a>
 800ae46:	2b02      	cmp	r3, #2
 800ae48:	d81c      	bhi.n	800ae84 <USBD_LL_SetupStage+0x7a>
 800ae4a:	2b00      	cmp	r3, #0
 800ae4c:	d002      	beq.n	800ae54 <USBD_LL_SetupStage+0x4a>
 800ae4e:	2b01      	cmp	r3, #1
 800ae50:	d008      	beq.n	800ae64 <USBD_LL_SetupStage+0x5a>
 800ae52:	e017      	b.n	800ae84 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800ae5a:	4619      	mov	r1, r3
 800ae5c:	6878      	ldr	r0, [r7, #4]
 800ae5e:	f000 fa03 	bl	800b268 <USBD_StdDevReq>
      break;
 800ae62:	e01a      	b.n	800ae9a <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800ae6a:	4619      	mov	r1, r3
 800ae6c:	6878      	ldr	r0, [r7, #4]
 800ae6e:	f000 fa65 	bl	800b33c <USBD_StdItfReq>
      break;
 800ae72:	e012      	b.n	800ae9a <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800ae7a:	4619      	mov	r1, r3
 800ae7c:	6878      	ldr	r0, [r7, #4]
 800ae7e:	f000 faa5 	bl	800b3cc <USBD_StdEPReq>
      break;
 800ae82:	e00a      	b.n	800ae9a <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800ae8a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800ae8e:	b2db      	uxtb	r3, r3
 800ae90:	4619      	mov	r1, r3
 800ae92:	6878      	ldr	r0, [r7, #4]
 800ae94:	f001 fbf6 	bl	800c684 <USBD_LL_StallEP>
      break;
 800ae98:	bf00      	nop
  }

  return USBD_OK;
 800ae9a:	2300      	movs	r3, #0
}
 800ae9c:	4618      	mov	r0, r3
 800ae9e:	3708      	adds	r7, #8
 800aea0:	46bd      	mov	sp, r7
 800aea2:	bd80      	pop	{r7, pc}

0800aea4 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800aea4:	b580      	push	{r7, lr}
 800aea6:	b086      	sub	sp, #24
 800aea8:	af00      	add	r7, sp, #0
 800aeaa:	60f8      	str	r0, [r7, #12]
 800aeac:	460b      	mov	r3, r1
 800aeae:	607a      	str	r2, [r7, #4]
 800aeb0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800aeb2:	7afb      	ldrb	r3, [r7, #11]
 800aeb4:	2b00      	cmp	r3, #0
 800aeb6:	d14b      	bne.n	800af50 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 800aeb8:	68fb      	ldr	r3, [r7, #12]
 800aeba:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800aebe:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800aec0:	68fb      	ldr	r3, [r7, #12]
 800aec2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800aec6:	2b03      	cmp	r3, #3
 800aec8:	d134      	bne.n	800af34 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 800aeca:	697b      	ldr	r3, [r7, #20]
 800aecc:	68da      	ldr	r2, [r3, #12]
 800aece:	697b      	ldr	r3, [r7, #20]
 800aed0:	691b      	ldr	r3, [r3, #16]
 800aed2:	429a      	cmp	r2, r3
 800aed4:	d919      	bls.n	800af0a <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 800aed6:	697b      	ldr	r3, [r7, #20]
 800aed8:	68da      	ldr	r2, [r3, #12]
 800aeda:	697b      	ldr	r3, [r7, #20]
 800aedc:	691b      	ldr	r3, [r3, #16]
 800aede:	1ad2      	subs	r2, r2, r3
 800aee0:	697b      	ldr	r3, [r7, #20]
 800aee2:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800aee4:	697b      	ldr	r3, [r7, #20]
 800aee6:	68da      	ldr	r2, [r3, #12]
 800aee8:	697b      	ldr	r3, [r7, #20]
 800aeea:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800aeec:	429a      	cmp	r2, r3
 800aeee:	d203      	bcs.n	800aef8 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800aef0:	697b      	ldr	r3, [r7, #20]
 800aef2:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 800aef4:	b29b      	uxth	r3, r3
 800aef6:	e002      	b.n	800aefe <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800aef8:	697b      	ldr	r3, [r7, #20]
 800aefa:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800aefc:	b29b      	uxth	r3, r3
 800aefe:	461a      	mov	r2, r3
 800af00:	6879      	ldr	r1, [r7, #4]
 800af02:	68f8      	ldr	r0, [r7, #12]
 800af04:	f000 ff8f 	bl	800be26 <USBD_CtlContinueRx>
 800af08:	e038      	b.n	800af7c <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800af0a:	68fb      	ldr	r3, [r7, #12]
 800af0c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800af10:	691b      	ldr	r3, [r3, #16]
 800af12:	2b00      	cmp	r3, #0
 800af14:	d00a      	beq.n	800af2c <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800af16:	68fb      	ldr	r3, [r7, #12]
 800af18:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800af1c:	2b03      	cmp	r3, #3
 800af1e:	d105      	bne.n	800af2c <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800af20:	68fb      	ldr	r3, [r7, #12]
 800af22:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800af26:	691b      	ldr	r3, [r3, #16]
 800af28:	68f8      	ldr	r0, [r7, #12]
 800af2a:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800af2c:	68f8      	ldr	r0, [r7, #12]
 800af2e:	f000 ff8c 	bl	800be4a <USBD_CtlSendStatus>
 800af32:	e023      	b.n	800af7c <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800af34:	68fb      	ldr	r3, [r7, #12]
 800af36:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800af3a:	2b05      	cmp	r3, #5
 800af3c:	d11e      	bne.n	800af7c <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800af3e:	68fb      	ldr	r3, [r7, #12]
 800af40:	2200      	movs	r2, #0
 800af42:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 800af46:	2100      	movs	r1, #0
 800af48:	68f8      	ldr	r0, [r7, #12]
 800af4a:	f001 fb9b 	bl	800c684 <USBD_LL_StallEP>
 800af4e:	e015      	b.n	800af7c <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800af50:	68fb      	ldr	r3, [r7, #12]
 800af52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800af56:	699b      	ldr	r3, [r3, #24]
 800af58:	2b00      	cmp	r3, #0
 800af5a:	d00d      	beq.n	800af78 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800af5c:	68fb      	ldr	r3, [r7, #12]
 800af5e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800af62:	2b03      	cmp	r3, #3
 800af64:	d108      	bne.n	800af78 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800af66:	68fb      	ldr	r3, [r7, #12]
 800af68:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800af6c:	699b      	ldr	r3, [r3, #24]
 800af6e:	7afa      	ldrb	r2, [r7, #11]
 800af70:	4611      	mov	r1, r2
 800af72:	68f8      	ldr	r0, [r7, #12]
 800af74:	4798      	blx	r3
 800af76:	e001      	b.n	800af7c <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800af78:	2302      	movs	r3, #2
 800af7a:	e000      	b.n	800af7e <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 800af7c:	2300      	movs	r3, #0
}
 800af7e:	4618      	mov	r0, r3
 800af80:	3718      	adds	r7, #24
 800af82:	46bd      	mov	sp, r7
 800af84:	bd80      	pop	{r7, pc}

0800af86 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800af86:	b580      	push	{r7, lr}
 800af88:	b086      	sub	sp, #24
 800af8a:	af00      	add	r7, sp, #0
 800af8c:	60f8      	str	r0, [r7, #12]
 800af8e:	460b      	mov	r3, r1
 800af90:	607a      	str	r2, [r7, #4]
 800af92:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800af94:	7afb      	ldrb	r3, [r7, #11]
 800af96:	2b00      	cmp	r3, #0
 800af98:	d17f      	bne.n	800b09a <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 800af9a:	68fb      	ldr	r3, [r7, #12]
 800af9c:	3314      	adds	r3, #20
 800af9e:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800afa0:	68fb      	ldr	r3, [r7, #12]
 800afa2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800afa6:	2b02      	cmp	r3, #2
 800afa8:	d15c      	bne.n	800b064 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 800afaa:	697b      	ldr	r3, [r7, #20]
 800afac:	68da      	ldr	r2, [r3, #12]
 800afae:	697b      	ldr	r3, [r7, #20]
 800afb0:	691b      	ldr	r3, [r3, #16]
 800afb2:	429a      	cmp	r2, r3
 800afb4:	d915      	bls.n	800afe2 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 800afb6:	697b      	ldr	r3, [r7, #20]
 800afb8:	68da      	ldr	r2, [r3, #12]
 800afba:	697b      	ldr	r3, [r7, #20]
 800afbc:	691b      	ldr	r3, [r3, #16]
 800afbe:	1ad2      	subs	r2, r2, r3
 800afc0:	697b      	ldr	r3, [r7, #20]
 800afc2:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 800afc4:	697b      	ldr	r3, [r7, #20]
 800afc6:	68db      	ldr	r3, [r3, #12]
 800afc8:	b29b      	uxth	r3, r3
 800afca:	461a      	mov	r2, r3
 800afcc:	6879      	ldr	r1, [r7, #4]
 800afce:	68f8      	ldr	r0, [r7, #12]
 800afd0:	f000 fef9 	bl	800bdc6 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800afd4:	2300      	movs	r3, #0
 800afd6:	2200      	movs	r2, #0
 800afd8:	2100      	movs	r1, #0
 800afda:	68f8      	ldr	r0, [r7, #12]
 800afdc:	f001 fbfd 	bl	800c7da <USBD_LL_PrepareReceive>
 800afe0:	e04e      	b.n	800b080 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800afe2:	697b      	ldr	r3, [r7, #20]
 800afe4:	689b      	ldr	r3, [r3, #8]
 800afe6:	697a      	ldr	r2, [r7, #20]
 800afe8:	6912      	ldr	r2, [r2, #16]
 800afea:	fbb3 f1f2 	udiv	r1, r3, r2
 800afee:	fb02 f201 	mul.w	r2, r2, r1
 800aff2:	1a9b      	subs	r3, r3, r2
 800aff4:	2b00      	cmp	r3, #0
 800aff6:	d11c      	bne.n	800b032 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 800aff8:	697b      	ldr	r3, [r7, #20]
 800affa:	689a      	ldr	r2, [r3, #8]
 800affc:	697b      	ldr	r3, [r7, #20]
 800affe:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800b000:	429a      	cmp	r2, r3
 800b002:	d316      	bcc.n	800b032 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 800b004:	697b      	ldr	r3, [r7, #20]
 800b006:	689a      	ldr	r2, [r3, #8]
 800b008:	68fb      	ldr	r3, [r7, #12]
 800b00a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800b00e:	429a      	cmp	r2, r3
 800b010:	d20f      	bcs.n	800b032 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800b012:	2200      	movs	r2, #0
 800b014:	2100      	movs	r1, #0
 800b016:	68f8      	ldr	r0, [r7, #12]
 800b018:	f000 fed5 	bl	800bdc6 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800b01c:	68fb      	ldr	r3, [r7, #12]
 800b01e:	2200      	movs	r2, #0
 800b020:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b024:	2300      	movs	r3, #0
 800b026:	2200      	movs	r2, #0
 800b028:	2100      	movs	r1, #0
 800b02a:	68f8      	ldr	r0, [r7, #12]
 800b02c:	f001 fbd5 	bl	800c7da <USBD_LL_PrepareReceive>
 800b030:	e026      	b.n	800b080 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800b032:	68fb      	ldr	r3, [r7, #12]
 800b034:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b038:	68db      	ldr	r3, [r3, #12]
 800b03a:	2b00      	cmp	r3, #0
 800b03c:	d00a      	beq.n	800b054 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800b03e:	68fb      	ldr	r3, [r7, #12]
 800b040:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800b044:	2b03      	cmp	r3, #3
 800b046:	d105      	bne.n	800b054 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800b048:	68fb      	ldr	r3, [r7, #12]
 800b04a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b04e:	68db      	ldr	r3, [r3, #12]
 800b050:	68f8      	ldr	r0, [r7, #12]
 800b052:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800b054:	2180      	movs	r1, #128	; 0x80
 800b056:	68f8      	ldr	r0, [r7, #12]
 800b058:	f001 fb14 	bl	800c684 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800b05c:	68f8      	ldr	r0, [r7, #12]
 800b05e:	f000 ff07 	bl	800be70 <USBD_CtlReceiveStatus>
 800b062:	e00d      	b.n	800b080 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800b064:	68fb      	ldr	r3, [r7, #12]
 800b066:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800b06a:	2b04      	cmp	r3, #4
 800b06c:	d004      	beq.n	800b078 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800b06e:	68fb      	ldr	r3, [r7, #12]
 800b070:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800b074:	2b00      	cmp	r3, #0
 800b076:	d103      	bne.n	800b080 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800b078:	2180      	movs	r1, #128	; 0x80
 800b07a:	68f8      	ldr	r0, [r7, #12]
 800b07c:	f001 fb02 	bl	800c684 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800b080:	68fb      	ldr	r3, [r7, #12]
 800b082:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800b086:	2b01      	cmp	r3, #1
 800b088:	d11d      	bne.n	800b0c6 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 800b08a:	68f8      	ldr	r0, [r7, #12]
 800b08c:	f7ff fe81 	bl	800ad92 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800b090:	68fb      	ldr	r3, [r7, #12]
 800b092:	2200      	movs	r2, #0
 800b094:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800b098:	e015      	b.n	800b0c6 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800b09a:	68fb      	ldr	r3, [r7, #12]
 800b09c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b0a0:	695b      	ldr	r3, [r3, #20]
 800b0a2:	2b00      	cmp	r3, #0
 800b0a4:	d00d      	beq.n	800b0c2 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800b0a6:	68fb      	ldr	r3, [r7, #12]
 800b0a8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800b0ac:	2b03      	cmp	r3, #3
 800b0ae:	d108      	bne.n	800b0c2 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800b0b0:	68fb      	ldr	r3, [r7, #12]
 800b0b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b0b6:	695b      	ldr	r3, [r3, #20]
 800b0b8:	7afa      	ldrb	r2, [r7, #11]
 800b0ba:	4611      	mov	r1, r2
 800b0bc:	68f8      	ldr	r0, [r7, #12]
 800b0be:	4798      	blx	r3
 800b0c0:	e001      	b.n	800b0c6 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800b0c2:	2302      	movs	r3, #2
 800b0c4:	e000      	b.n	800b0c8 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800b0c6:	2300      	movs	r3, #0
}
 800b0c8:	4618      	mov	r0, r3
 800b0ca:	3718      	adds	r7, #24
 800b0cc:	46bd      	mov	sp, r7
 800b0ce:	bd80      	pop	{r7, pc}

0800b0d0 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800b0d0:	b580      	push	{r7, lr}
 800b0d2:	b082      	sub	sp, #8
 800b0d4:	af00      	add	r7, sp, #0
 800b0d6:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b0d8:	2340      	movs	r3, #64	; 0x40
 800b0da:	2200      	movs	r2, #0
 800b0dc:	2100      	movs	r1, #0
 800b0de:	6878      	ldr	r0, [r7, #4]
 800b0e0:	f001 fa8b 	bl	800c5fa <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	2201      	movs	r2, #1
 800b0e8:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	2240      	movs	r2, #64	; 0x40
 800b0f0:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b0f4:	2340      	movs	r3, #64	; 0x40
 800b0f6:	2200      	movs	r2, #0
 800b0f8:	2180      	movs	r1, #128	; 0x80
 800b0fa:	6878      	ldr	r0, [r7, #4]
 800b0fc:	f001 fa7d 	bl	800c5fa <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	2201      	movs	r2, #1
 800b104:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	2240      	movs	r2, #64	; 0x40
 800b10a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	2201      	movs	r2, #1
 800b110:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	2200      	movs	r2, #0
 800b118:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	2200      	movs	r2, #0
 800b120:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	2200      	movs	r2, #0
 800b126:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b130:	2b00      	cmp	r3, #0
 800b132:	d009      	beq.n	800b148 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b13a:	685b      	ldr	r3, [r3, #4]
 800b13c:	687a      	ldr	r2, [r7, #4]
 800b13e:	6852      	ldr	r2, [r2, #4]
 800b140:	b2d2      	uxtb	r2, r2
 800b142:	4611      	mov	r1, r2
 800b144:	6878      	ldr	r0, [r7, #4]
 800b146:	4798      	blx	r3
  }

  return USBD_OK;
 800b148:	2300      	movs	r3, #0
}
 800b14a:	4618      	mov	r0, r3
 800b14c:	3708      	adds	r7, #8
 800b14e:	46bd      	mov	sp, r7
 800b150:	bd80      	pop	{r7, pc}

0800b152 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800b152:	b480      	push	{r7}
 800b154:	b083      	sub	sp, #12
 800b156:	af00      	add	r7, sp, #0
 800b158:	6078      	str	r0, [r7, #4]
 800b15a:	460b      	mov	r3, r1
 800b15c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	78fa      	ldrb	r2, [r7, #3]
 800b162:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800b164:	2300      	movs	r3, #0
}
 800b166:	4618      	mov	r0, r3
 800b168:	370c      	adds	r7, #12
 800b16a:	46bd      	mov	sp, r7
 800b16c:	bc80      	pop	{r7}
 800b16e:	4770      	bx	lr

0800b170 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800b170:	b480      	push	{r7}
 800b172:	b083      	sub	sp, #12
 800b174:	af00      	add	r7, sp, #0
 800b176:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	2204      	movs	r2, #4
 800b188:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800b18c:	2300      	movs	r3, #0
}
 800b18e:	4618      	mov	r0, r3
 800b190:	370c      	adds	r7, #12
 800b192:	46bd      	mov	sp, r7
 800b194:	bc80      	pop	{r7}
 800b196:	4770      	bx	lr

0800b198 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800b198:	b480      	push	{r7}
 800b19a:	b083      	sub	sp, #12
 800b19c:	af00      	add	r7, sp, #0
 800b19e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b1a6:	2b04      	cmp	r3, #4
 800b1a8:	d105      	bne.n	800b1b6 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800b1b6:	2300      	movs	r3, #0
}
 800b1b8:	4618      	mov	r0, r3
 800b1ba:	370c      	adds	r7, #12
 800b1bc:	46bd      	mov	sp, r7
 800b1be:	bc80      	pop	{r7}
 800b1c0:	4770      	bx	lr

0800b1c2 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800b1c2:	b580      	push	{r7, lr}
 800b1c4:	b082      	sub	sp, #8
 800b1c6:	af00      	add	r7, sp, #0
 800b1c8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b1d0:	2b03      	cmp	r3, #3
 800b1d2:	d10b      	bne.n	800b1ec <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b1da:	69db      	ldr	r3, [r3, #28]
 800b1dc:	2b00      	cmp	r3, #0
 800b1de:	d005      	beq.n	800b1ec <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b1e6:	69db      	ldr	r3, [r3, #28]
 800b1e8:	6878      	ldr	r0, [r7, #4]
 800b1ea:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800b1ec:	2300      	movs	r3, #0
}
 800b1ee:	4618      	mov	r0, r3
 800b1f0:	3708      	adds	r7, #8
 800b1f2:	46bd      	mov	sp, r7
 800b1f4:	bd80      	pop	{r7, pc}

0800b1f6 <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800b1f6:	b480      	push	{r7}
 800b1f8:	b083      	sub	sp, #12
 800b1fa:	af00      	add	r7, sp, #0
 800b1fc:	6078      	str	r0, [r7, #4]
 800b1fe:	460b      	mov	r3, r1
 800b200:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800b202:	2300      	movs	r3, #0
}
 800b204:	4618      	mov	r0, r3
 800b206:	370c      	adds	r7, #12
 800b208:	46bd      	mov	sp, r7
 800b20a:	bc80      	pop	{r7}
 800b20c:	4770      	bx	lr

0800b20e <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800b20e:	b480      	push	{r7}
 800b210:	b083      	sub	sp, #12
 800b212:	af00      	add	r7, sp, #0
 800b214:	6078      	str	r0, [r7, #4]
 800b216:	460b      	mov	r3, r1
 800b218:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800b21a:	2300      	movs	r3, #0
}
 800b21c:	4618      	mov	r0, r3
 800b21e:	370c      	adds	r7, #12
 800b220:	46bd      	mov	sp, r7
 800b222:	bc80      	pop	{r7}
 800b224:	4770      	bx	lr

0800b226 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800b226:	b480      	push	{r7}
 800b228:	b083      	sub	sp, #12
 800b22a:	af00      	add	r7, sp, #0
 800b22c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800b22e:	2300      	movs	r3, #0
}
 800b230:	4618      	mov	r0, r3
 800b232:	370c      	adds	r7, #12
 800b234:	46bd      	mov	sp, r7
 800b236:	bc80      	pop	{r7}
 800b238:	4770      	bx	lr

0800b23a <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800b23a:	b580      	push	{r7, lr}
 800b23c:	b082      	sub	sp, #8
 800b23e:	af00      	add	r7, sp, #0
 800b240:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	2201      	movs	r2, #1
 800b246:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b250:	685b      	ldr	r3, [r3, #4]
 800b252:	687a      	ldr	r2, [r7, #4]
 800b254:	6852      	ldr	r2, [r2, #4]
 800b256:	b2d2      	uxtb	r2, r2
 800b258:	4611      	mov	r1, r2
 800b25a:	6878      	ldr	r0, [r7, #4]
 800b25c:	4798      	blx	r3

  return USBD_OK;
 800b25e:	2300      	movs	r3, #0
}
 800b260:	4618      	mov	r0, r3
 800b262:	3708      	adds	r7, #8
 800b264:	46bd      	mov	sp, r7
 800b266:	bd80      	pop	{r7, pc}

0800b268 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 800b268:	b580      	push	{r7, lr}
 800b26a:	b084      	sub	sp, #16
 800b26c:	af00      	add	r7, sp, #0
 800b26e:	6078      	str	r0, [r7, #4]
 800b270:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b272:	2300      	movs	r3, #0
 800b274:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b276:	683b      	ldr	r3, [r7, #0]
 800b278:	781b      	ldrb	r3, [r3, #0]
 800b27a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b27e:	2b40      	cmp	r3, #64	; 0x40
 800b280:	d005      	beq.n	800b28e <USBD_StdDevReq+0x26>
 800b282:	2b40      	cmp	r3, #64	; 0x40
 800b284:	d84f      	bhi.n	800b326 <USBD_StdDevReq+0xbe>
 800b286:	2b00      	cmp	r3, #0
 800b288:	d009      	beq.n	800b29e <USBD_StdDevReq+0x36>
 800b28a:	2b20      	cmp	r3, #32
 800b28c:	d14b      	bne.n	800b326 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b294:	689b      	ldr	r3, [r3, #8]
 800b296:	6839      	ldr	r1, [r7, #0]
 800b298:	6878      	ldr	r0, [r7, #4]
 800b29a:	4798      	blx	r3
      break;
 800b29c:	e048      	b.n	800b330 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b29e:	683b      	ldr	r3, [r7, #0]
 800b2a0:	785b      	ldrb	r3, [r3, #1]
 800b2a2:	2b09      	cmp	r3, #9
 800b2a4:	d839      	bhi.n	800b31a <USBD_StdDevReq+0xb2>
 800b2a6:	a201      	add	r2, pc, #4	; (adr r2, 800b2ac <USBD_StdDevReq+0x44>)
 800b2a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b2ac:	0800b2fd 	.word	0x0800b2fd
 800b2b0:	0800b311 	.word	0x0800b311
 800b2b4:	0800b31b 	.word	0x0800b31b
 800b2b8:	0800b307 	.word	0x0800b307
 800b2bc:	0800b31b 	.word	0x0800b31b
 800b2c0:	0800b2df 	.word	0x0800b2df
 800b2c4:	0800b2d5 	.word	0x0800b2d5
 800b2c8:	0800b31b 	.word	0x0800b31b
 800b2cc:	0800b2f3 	.word	0x0800b2f3
 800b2d0:	0800b2e9 	.word	0x0800b2e9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800b2d4:	6839      	ldr	r1, [r7, #0]
 800b2d6:	6878      	ldr	r0, [r7, #4]
 800b2d8:	f000 f9dc 	bl	800b694 <USBD_GetDescriptor>
          break;
 800b2dc:	e022      	b.n	800b324 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800b2de:	6839      	ldr	r1, [r7, #0]
 800b2e0:	6878      	ldr	r0, [r7, #4]
 800b2e2:	f000 fb3f 	bl	800b964 <USBD_SetAddress>
          break;
 800b2e6:	e01d      	b.n	800b324 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 800b2e8:	6839      	ldr	r1, [r7, #0]
 800b2ea:	6878      	ldr	r0, [r7, #4]
 800b2ec:	f000 fb7e 	bl	800b9ec <USBD_SetConfig>
          break;
 800b2f0:	e018      	b.n	800b324 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800b2f2:	6839      	ldr	r1, [r7, #0]
 800b2f4:	6878      	ldr	r0, [r7, #4]
 800b2f6:	f000 fc07 	bl	800bb08 <USBD_GetConfig>
          break;
 800b2fa:	e013      	b.n	800b324 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800b2fc:	6839      	ldr	r1, [r7, #0]
 800b2fe:	6878      	ldr	r0, [r7, #4]
 800b300:	f000 fc37 	bl	800bb72 <USBD_GetStatus>
          break;
 800b304:	e00e      	b.n	800b324 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800b306:	6839      	ldr	r1, [r7, #0]
 800b308:	6878      	ldr	r0, [r7, #4]
 800b30a:	f000 fc65 	bl	800bbd8 <USBD_SetFeature>
          break;
 800b30e:	e009      	b.n	800b324 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800b310:	6839      	ldr	r1, [r7, #0]
 800b312:	6878      	ldr	r0, [r7, #4]
 800b314:	f000 fc74 	bl	800bc00 <USBD_ClrFeature>
          break;
 800b318:	e004      	b.n	800b324 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 800b31a:	6839      	ldr	r1, [r7, #0]
 800b31c:	6878      	ldr	r0, [r7, #4]
 800b31e:	f000 fccc 	bl	800bcba <USBD_CtlError>
          break;
 800b322:	bf00      	nop
      }
      break;
 800b324:	e004      	b.n	800b330 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 800b326:	6839      	ldr	r1, [r7, #0]
 800b328:	6878      	ldr	r0, [r7, #4]
 800b32a:	f000 fcc6 	bl	800bcba <USBD_CtlError>
      break;
 800b32e:	bf00      	nop
  }

  return ret;
 800b330:	7bfb      	ldrb	r3, [r7, #15]
}
 800b332:	4618      	mov	r0, r3
 800b334:	3710      	adds	r7, #16
 800b336:	46bd      	mov	sp, r7
 800b338:	bd80      	pop	{r7, pc}
 800b33a:	bf00      	nop

0800b33c <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 800b33c:	b580      	push	{r7, lr}
 800b33e:	b084      	sub	sp, #16
 800b340:	af00      	add	r7, sp, #0
 800b342:	6078      	str	r0, [r7, #4]
 800b344:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b346:	2300      	movs	r3, #0
 800b348:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b34a:	683b      	ldr	r3, [r7, #0]
 800b34c:	781b      	ldrb	r3, [r3, #0]
 800b34e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b352:	2b40      	cmp	r3, #64	; 0x40
 800b354:	d005      	beq.n	800b362 <USBD_StdItfReq+0x26>
 800b356:	2b40      	cmp	r3, #64	; 0x40
 800b358:	d82e      	bhi.n	800b3b8 <USBD_StdItfReq+0x7c>
 800b35a:	2b00      	cmp	r3, #0
 800b35c:	d001      	beq.n	800b362 <USBD_StdItfReq+0x26>
 800b35e:	2b20      	cmp	r3, #32
 800b360:	d12a      	bne.n	800b3b8 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800b362:	687b      	ldr	r3, [r7, #4]
 800b364:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b368:	3b01      	subs	r3, #1
 800b36a:	2b02      	cmp	r3, #2
 800b36c:	d81d      	bhi.n	800b3aa <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800b36e:	683b      	ldr	r3, [r7, #0]
 800b370:	889b      	ldrh	r3, [r3, #4]
 800b372:	b2db      	uxtb	r3, r3
 800b374:	2b01      	cmp	r3, #1
 800b376:	d813      	bhi.n	800b3a0 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b37e:	689b      	ldr	r3, [r3, #8]
 800b380:	6839      	ldr	r1, [r7, #0]
 800b382:	6878      	ldr	r0, [r7, #4]
 800b384:	4798      	blx	r3
 800b386:	4603      	mov	r3, r0
 800b388:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800b38a:	683b      	ldr	r3, [r7, #0]
 800b38c:	88db      	ldrh	r3, [r3, #6]
 800b38e:	2b00      	cmp	r3, #0
 800b390:	d110      	bne.n	800b3b4 <USBD_StdItfReq+0x78>
 800b392:	7bfb      	ldrb	r3, [r7, #15]
 800b394:	2b00      	cmp	r3, #0
 800b396:	d10d      	bne.n	800b3b4 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 800b398:	6878      	ldr	r0, [r7, #4]
 800b39a:	f000 fd56 	bl	800be4a <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800b39e:	e009      	b.n	800b3b4 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 800b3a0:	6839      	ldr	r1, [r7, #0]
 800b3a2:	6878      	ldr	r0, [r7, #4]
 800b3a4:	f000 fc89 	bl	800bcba <USBD_CtlError>
          break;
 800b3a8:	e004      	b.n	800b3b4 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 800b3aa:	6839      	ldr	r1, [r7, #0]
 800b3ac:	6878      	ldr	r0, [r7, #4]
 800b3ae:	f000 fc84 	bl	800bcba <USBD_CtlError>
          break;
 800b3b2:	e000      	b.n	800b3b6 <USBD_StdItfReq+0x7a>
          break;
 800b3b4:	bf00      	nop
      }
      break;
 800b3b6:	e004      	b.n	800b3c2 <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 800b3b8:	6839      	ldr	r1, [r7, #0]
 800b3ba:	6878      	ldr	r0, [r7, #4]
 800b3bc:	f000 fc7d 	bl	800bcba <USBD_CtlError>
      break;
 800b3c0:	bf00      	nop
  }

  return USBD_OK;
 800b3c2:	2300      	movs	r3, #0
}
 800b3c4:	4618      	mov	r0, r3
 800b3c6:	3710      	adds	r7, #16
 800b3c8:	46bd      	mov	sp, r7
 800b3ca:	bd80      	pop	{r7, pc}

0800b3cc <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 800b3cc:	b580      	push	{r7, lr}
 800b3ce:	b084      	sub	sp, #16
 800b3d0:	af00      	add	r7, sp, #0
 800b3d2:	6078      	str	r0, [r7, #4]
 800b3d4:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800b3d6:	2300      	movs	r3, #0
 800b3d8:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 800b3da:	683b      	ldr	r3, [r7, #0]
 800b3dc:	889b      	ldrh	r3, [r3, #4]
 800b3de:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b3e0:	683b      	ldr	r3, [r7, #0]
 800b3e2:	781b      	ldrb	r3, [r3, #0]
 800b3e4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b3e8:	2b40      	cmp	r3, #64	; 0x40
 800b3ea:	d007      	beq.n	800b3fc <USBD_StdEPReq+0x30>
 800b3ec:	2b40      	cmp	r3, #64	; 0x40
 800b3ee:	f200 8146 	bhi.w	800b67e <USBD_StdEPReq+0x2b2>
 800b3f2:	2b00      	cmp	r3, #0
 800b3f4:	d00a      	beq.n	800b40c <USBD_StdEPReq+0x40>
 800b3f6:	2b20      	cmp	r3, #32
 800b3f8:	f040 8141 	bne.w	800b67e <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b402:	689b      	ldr	r3, [r3, #8]
 800b404:	6839      	ldr	r1, [r7, #0]
 800b406:	6878      	ldr	r0, [r7, #4]
 800b408:	4798      	blx	r3
      break;
 800b40a:	e13d      	b.n	800b688 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 800b40c:	683b      	ldr	r3, [r7, #0]
 800b40e:	781b      	ldrb	r3, [r3, #0]
 800b410:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b414:	2b20      	cmp	r3, #32
 800b416:	d10a      	bne.n	800b42e <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b41e:	689b      	ldr	r3, [r3, #8]
 800b420:	6839      	ldr	r1, [r7, #0]
 800b422:	6878      	ldr	r0, [r7, #4]
 800b424:	4798      	blx	r3
 800b426:	4603      	mov	r3, r0
 800b428:	73fb      	strb	r3, [r7, #15]

        return ret;
 800b42a:	7bfb      	ldrb	r3, [r7, #15]
 800b42c:	e12d      	b.n	800b68a <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 800b42e:	683b      	ldr	r3, [r7, #0]
 800b430:	785b      	ldrb	r3, [r3, #1]
 800b432:	2b03      	cmp	r3, #3
 800b434:	d007      	beq.n	800b446 <USBD_StdEPReq+0x7a>
 800b436:	2b03      	cmp	r3, #3
 800b438:	f300 811b 	bgt.w	800b672 <USBD_StdEPReq+0x2a6>
 800b43c:	2b00      	cmp	r3, #0
 800b43e:	d072      	beq.n	800b526 <USBD_StdEPReq+0x15a>
 800b440:	2b01      	cmp	r3, #1
 800b442:	d03a      	beq.n	800b4ba <USBD_StdEPReq+0xee>
 800b444:	e115      	b.n	800b672 <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b44c:	2b02      	cmp	r3, #2
 800b44e:	d002      	beq.n	800b456 <USBD_StdEPReq+0x8a>
 800b450:	2b03      	cmp	r3, #3
 800b452:	d015      	beq.n	800b480 <USBD_StdEPReq+0xb4>
 800b454:	e02b      	b.n	800b4ae <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b456:	7bbb      	ldrb	r3, [r7, #14]
 800b458:	2b00      	cmp	r3, #0
 800b45a:	d00c      	beq.n	800b476 <USBD_StdEPReq+0xaa>
 800b45c:	7bbb      	ldrb	r3, [r7, #14]
 800b45e:	2b80      	cmp	r3, #128	; 0x80
 800b460:	d009      	beq.n	800b476 <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800b462:	7bbb      	ldrb	r3, [r7, #14]
 800b464:	4619      	mov	r1, r3
 800b466:	6878      	ldr	r0, [r7, #4]
 800b468:	f001 f90c 	bl	800c684 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800b46c:	2180      	movs	r1, #128	; 0x80
 800b46e:	6878      	ldr	r0, [r7, #4]
 800b470:	f001 f908 	bl	800c684 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b474:	e020      	b.n	800b4b8 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 800b476:	6839      	ldr	r1, [r7, #0]
 800b478:	6878      	ldr	r0, [r7, #4]
 800b47a:	f000 fc1e 	bl	800bcba <USBD_CtlError>
              break;
 800b47e:	e01b      	b.n	800b4b8 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b480:	683b      	ldr	r3, [r7, #0]
 800b482:	885b      	ldrh	r3, [r3, #2]
 800b484:	2b00      	cmp	r3, #0
 800b486:	d10e      	bne.n	800b4a6 <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 800b488:	7bbb      	ldrb	r3, [r7, #14]
 800b48a:	2b00      	cmp	r3, #0
 800b48c:	d00b      	beq.n	800b4a6 <USBD_StdEPReq+0xda>
 800b48e:	7bbb      	ldrb	r3, [r7, #14]
 800b490:	2b80      	cmp	r3, #128	; 0x80
 800b492:	d008      	beq.n	800b4a6 <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800b494:	683b      	ldr	r3, [r7, #0]
 800b496:	88db      	ldrh	r3, [r3, #6]
 800b498:	2b00      	cmp	r3, #0
 800b49a:	d104      	bne.n	800b4a6 <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 800b49c:	7bbb      	ldrb	r3, [r7, #14]
 800b49e:	4619      	mov	r1, r3
 800b4a0:	6878      	ldr	r0, [r7, #4]
 800b4a2:	f001 f8ef 	bl	800c684 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800b4a6:	6878      	ldr	r0, [r7, #4]
 800b4a8:	f000 fccf 	bl	800be4a <USBD_CtlSendStatus>

              break;
 800b4ac:	e004      	b.n	800b4b8 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 800b4ae:	6839      	ldr	r1, [r7, #0]
 800b4b0:	6878      	ldr	r0, [r7, #4]
 800b4b2:	f000 fc02 	bl	800bcba <USBD_CtlError>
              break;
 800b4b6:	bf00      	nop
          }
          break;
 800b4b8:	e0e0      	b.n	800b67c <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b4c0:	2b02      	cmp	r3, #2
 800b4c2:	d002      	beq.n	800b4ca <USBD_StdEPReq+0xfe>
 800b4c4:	2b03      	cmp	r3, #3
 800b4c6:	d015      	beq.n	800b4f4 <USBD_StdEPReq+0x128>
 800b4c8:	e026      	b.n	800b518 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b4ca:	7bbb      	ldrb	r3, [r7, #14]
 800b4cc:	2b00      	cmp	r3, #0
 800b4ce:	d00c      	beq.n	800b4ea <USBD_StdEPReq+0x11e>
 800b4d0:	7bbb      	ldrb	r3, [r7, #14]
 800b4d2:	2b80      	cmp	r3, #128	; 0x80
 800b4d4:	d009      	beq.n	800b4ea <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800b4d6:	7bbb      	ldrb	r3, [r7, #14]
 800b4d8:	4619      	mov	r1, r3
 800b4da:	6878      	ldr	r0, [r7, #4]
 800b4dc:	f001 f8d2 	bl	800c684 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800b4e0:	2180      	movs	r1, #128	; 0x80
 800b4e2:	6878      	ldr	r0, [r7, #4]
 800b4e4:	f001 f8ce 	bl	800c684 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b4e8:	e01c      	b.n	800b524 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 800b4ea:	6839      	ldr	r1, [r7, #0]
 800b4ec:	6878      	ldr	r0, [r7, #4]
 800b4ee:	f000 fbe4 	bl	800bcba <USBD_CtlError>
              break;
 800b4f2:	e017      	b.n	800b524 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b4f4:	683b      	ldr	r3, [r7, #0]
 800b4f6:	885b      	ldrh	r3, [r3, #2]
 800b4f8:	2b00      	cmp	r3, #0
 800b4fa:	d112      	bne.n	800b522 <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800b4fc:	7bbb      	ldrb	r3, [r7, #14]
 800b4fe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b502:	2b00      	cmp	r3, #0
 800b504:	d004      	beq.n	800b510 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800b506:	7bbb      	ldrb	r3, [r7, #14]
 800b508:	4619      	mov	r1, r3
 800b50a:	6878      	ldr	r0, [r7, #4]
 800b50c:	f001 f8d9 	bl	800c6c2 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 800b510:	6878      	ldr	r0, [r7, #4]
 800b512:	f000 fc9a 	bl	800be4a <USBD_CtlSendStatus>
              }
              break;
 800b516:	e004      	b.n	800b522 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 800b518:	6839      	ldr	r1, [r7, #0]
 800b51a:	6878      	ldr	r0, [r7, #4]
 800b51c:	f000 fbcd 	bl	800bcba <USBD_CtlError>
              break;
 800b520:	e000      	b.n	800b524 <USBD_StdEPReq+0x158>
              break;
 800b522:	bf00      	nop
          }
          break;
 800b524:	e0aa      	b.n	800b67c <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b52c:	2b02      	cmp	r3, #2
 800b52e:	d002      	beq.n	800b536 <USBD_StdEPReq+0x16a>
 800b530:	2b03      	cmp	r3, #3
 800b532:	d032      	beq.n	800b59a <USBD_StdEPReq+0x1ce>
 800b534:	e097      	b.n	800b666 <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b536:	7bbb      	ldrb	r3, [r7, #14]
 800b538:	2b00      	cmp	r3, #0
 800b53a:	d007      	beq.n	800b54c <USBD_StdEPReq+0x180>
 800b53c:	7bbb      	ldrb	r3, [r7, #14]
 800b53e:	2b80      	cmp	r3, #128	; 0x80
 800b540:	d004      	beq.n	800b54c <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 800b542:	6839      	ldr	r1, [r7, #0]
 800b544:	6878      	ldr	r0, [r7, #4]
 800b546:	f000 fbb8 	bl	800bcba <USBD_CtlError>
                break;
 800b54a:	e091      	b.n	800b670 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b54c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b550:	2b00      	cmp	r3, #0
 800b552:	da0b      	bge.n	800b56c <USBD_StdEPReq+0x1a0>
 800b554:	7bbb      	ldrb	r3, [r7, #14]
 800b556:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b55a:	4613      	mov	r3, r2
 800b55c:	009b      	lsls	r3, r3, #2
 800b55e:	4413      	add	r3, r2
 800b560:	009b      	lsls	r3, r3, #2
 800b562:	3310      	adds	r3, #16
 800b564:	687a      	ldr	r2, [r7, #4]
 800b566:	4413      	add	r3, r2
 800b568:	3304      	adds	r3, #4
 800b56a:	e00b      	b.n	800b584 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b56c:	7bbb      	ldrb	r3, [r7, #14]
 800b56e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b572:	4613      	mov	r3, r2
 800b574:	009b      	lsls	r3, r3, #2
 800b576:	4413      	add	r3, r2
 800b578:	009b      	lsls	r3, r3, #2
 800b57a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800b57e:	687a      	ldr	r2, [r7, #4]
 800b580:	4413      	add	r3, r2
 800b582:	3304      	adds	r3, #4
 800b584:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800b586:	68bb      	ldr	r3, [r7, #8]
 800b588:	2200      	movs	r2, #0
 800b58a:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800b58c:	68bb      	ldr	r3, [r7, #8]
 800b58e:	2202      	movs	r2, #2
 800b590:	4619      	mov	r1, r3
 800b592:	6878      	ldr	r0, [r7, #4]
 800b594:	f000 fbfb 	bl	800bd8e <USBD_CtlSendData>
              break;
 800b598:	e06a      	b.n	800b670 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800b59a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b59e:	2b00      	cmp	r3, #0
 800b5a0:	da11      	bge.n	800b5c6 <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800b5a2:	7bbb      	ldrb	r3, [r7, #14]
 800b5a4:	f003 020f 	and.w	r2, r3, #15
 800b5a8:	6879      	ldr	r1, [r7, #4]
 800b5aa:	4613      	mov	r3, r2
 800b5ac:	009b      	lsls	r3, r3, #2
 800b5ae:	4413      	add	r3, r2
 800b5b0:	009b      	lsls	r3, r3, #2
 800b5b2:	440b      	add	r3, r1
 800b5b4:	3318      	adds	r3, #24
 800b5b6:	681b      	ldr	r3, [r3, #0]
 800b5b8:	2b00      	cmp	r3, #0
 800b5ba:	d117      	bne.n	800b5ec <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800b5bc:	6839      	ldr	r1, [r7, #0]
 800b5be:	6878      	ldr	r0, [r7, #4]
 800b5c0:	f000 fb7b 	bl	800bcba <USBD_CtlError>
                  break;
 800b5c4:	e054      	b.n	800b670 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800b5c6:	7bbb      	ldrb	r3, [r7, #14]
 800b5c8:	f003 020f 	and.w	r2, r3, #15
 800b5cc:	6879      	ldr	r1, [r7, #4]
 800b5ce:	4613      	mov	r3, r2
 800b5d0:	009b      	lsls	r3, r3, #2
 800b5d2:	4413      	add	r3, r2
 800b5d4:	009b      	lsls	r3, r3, #2
 800b5d6:	440b      	add	r3, r1
 800b5d8:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 800b5dc:	681b      	ldr	r3, [r3, #0]
 800b5de:	2b00      	cmp	r3, #0
 800b5e0:	d104      	bne.n	800b5ec <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800b5e2:	6839      	ldr	r1, [r7, #0]
 800b5e4:	6878      	ldr	r0, [r7, #4]
 800b5e6:	f000 fb68 	bl	800bcba <USBD_CtlError>
                  break;
 800b5ea:	e041      	b.n	800b670 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b5ec:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b5f0:	2b00      	cmp	r3, #0
 800b5f2:	da0b      	bge.n	800b60c <USBD_StdEPReq+0x240>
 800b5f4:	7bbb      	ldrb	r3, [r7, #14]
 800b5f6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b5fa:	4613      	mov	r3, r2
 800b5fc:	009b      	lsls	r3, r3, #2
 800b5fe:	4413      	add	r3, r2
 800b600:	009b      	lsls	r3, r3, #2
 800b602:	3310      	adds	r3, #16
 800b604:	687a      	ldr	r2, [r7, #4]
 800b606:	4413      	add	r3, r2
 800b608:	3304      	adds	r3, #4
 800b60a:	e00b      	b.n	800b624 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b60c:	7bbb      	ldrb	r3, [r7, #14]
 800b60e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b612:	4613      	mov	r3, r2
 800b614:	009b      	lsls	r3, r3, #2
 800b616:	4413      	add	r3, r2
 800b618:	009b      	lsls	r3, r3, #2
 800b61a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800b61e:	687a      	ldr	r2, [r7, #4]
 800b620:	4413      	add	r3, r2
 800b622:	3304      	adds	r3, #4
 800b624:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800b626:	7bbb      	ldrb	r3, [r7, #14]
 800b628:	2b00      	cmp	r3, #0
 800b62a:	d002      	beq.n	800b632 <USBD_StdEPReq+0x266>
 800b62c:	7bbb      	ldrb	r3, [r7, #14]
 800b62e:	2b80      	cmp	r3, #128	; 0x80
 800b630:	d103      	bne.n	800b63a <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 800b632:	68bb      	ldr	r3, [r7, #8]
 800b634:	2200      	movs	r2, #0
 800b636:	601a      	str	r2, [r3, #0]
 800b638:	e00e      	b.n	800b658 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800b63a:	7bbb      	ldrb	r3, [r7, #14]
 800b63c:	4619      	mov	r1, r3
 800b63e:	6878      	ldr	r0, [r7, #4]
 800b640:	f001 f85e 	bl	800c700 <USBD_LL_IsStallEP>
 800b644:	4603      	mov	r3, r0
 800b646:	2b00      	cmp	r3, #0
 800b648:	d003      	beq.n	800b652 <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 800b64a:	68bb      	ldr	r3, [r7, #8]
 800b64c:	2201      	movs	r2, #1
 800b64e:	601a      	str	r2, [r3, #0]
 800b650:	e002      	b.n	800b658 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 800b652:	68bb      	ldr	r3, [r7, #8]
 800b654:	2200      	movs	r2, #0
 800b656:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800b658:	68bb      	ldr	r3, [r7, #8]
 800b65a:	2202      	movs	r2, #2
 800b65c:	4619      	mov	r1, r3
 800b65e:	6878      	ldr	r0, [r7, #4]
 800b660:	f000 fb95 	bl	800bd8e <USBD_CtlSendData>
              break;
 800b664:	e004      	b.n	800b670 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 800b666:	6839      	ldr	r1, [r7, #0]
 800b668:	6878      	ldr	r0, [r7, #4]
 800b66a:	f000 fb26 	bl	800bcba <USBD_CtlError>
              break;
 800b66e:	bf00      	nop
          }
          break;
 800b670:	e004      	b.n	800b67c <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 800b672:	6839      	ldr	r1, [r7, #0]
 800b674:	6878      	ldr	r0, [r7, #4]
 800b676:	f000 fb20 	bl	800bcba <USBD_CtlError>
          break;
 800b67a:	bf00      	nop
      }
      break;
 800b67c:	e004      	b.n	800b688 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 800b67e:	6839      	ldr	r1, [r7, #0]
 800b680:	6878      	ldr	r0, [r7, #4]
 800b682:	f000 fb1a 	bl	800bcba <USBD_CtlError>
      break;
 800b686:	bf00      	nop
  }

  return ret;
 800b688:	7bfb      	ldrb	r3, [r7, #15]
}
 800b68a:	4618      	mov	r0, r3
 800b68c:	3710      	adds	r7, #16
 800b68e:	46bd      	mov	sp, r7
 800b690:	bd80      	pop	{r7, pc}
	...

0800b694 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800b694:	b580      	push	{r7, lr}
 800b696:	b084      	sub	sp, #16
 800b698:	af00      	add	r7, sp, #0
 800b69a:	6078      	str	r0, [r7, #4]
 800b69c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b69e:	2300      	movs	r3, #0
 800b6a0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800b6a2:	2300      	movs	r3, #0
 800b6a4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800b6a6:	2300      	movs	r3, #0
 800b6a8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800b6aa:	683b      	ldr	r3, [r7, #0]
 800b6ac:	885b      	ldrh	r3, [r3, #2]
 800b6ae:	0a1b      	lsrs	r3, r3, #8
 800b6b0:	b29b      	uxth	r3, r3
 800b6b2:	3b01      	subs	r3, #1
 800b6b4:	2b06      	cmp	r3, #6
 800b6b6:	f200 8128 	bhi.w	800b90a <USBD_GetDescriptor+0x276>
 800b6ba:	a201      	add	r2, pc, #4	; (adr r2, 800b6c0 <USBD_GetDescriptor+0x2c>)
 800b6bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b6c0:	0800b6dd 	.word	0x0800b6dd
 800b6c4:	0800b6f5 	.word	0x0800b6f5
 800b6c8:	0800b735 	.word	0x0800b735
 800b6cc:	0800b90b 	.word	0x0800b90b
 800b6d0:	0800b90b 	.word	0x0800b90b
 800b6d4:	0800b8ab 	.word	0x0800b8ab
 800b6d8:	0800b8d7 	.word	0x0800b8d7
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b6e2:	681b      	ldr	r3, [r3, #0]
 800b6e4:	687a      	ldr	r2, [r7, #4]
 800b6e6:	7c12      	ldrb	r2, [r2, #16]
 800b6e8:	f107 0108 	add.w	r1, r7, #8
 800b6ec:	4610      	mov	r0, r2
 800b6ee:	4798      	blx	r3
 800b6f0:	60f8      	str	r0, [r7, #12]
      break;
 800b6f2:	e112      	b.n	800b91a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	7c1b      	ldrb	r3, [r3, #16]
 800b6f8:	2b00      	cmp	r3, #0
 800b6fa:	d10d      	bne.n	800b718 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b702:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b704:	f107 0208 	add.w	r2, r7, #8
 800b708:	4610      	mov	r0, r2
 800b70a:	4798      	blx	r3
 800b70c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b70e:	68fb      	ldr	r3, [r7, #12]
 800b710:	3301      	adds	r3, #1
 800b712:	2202      	movs	r2, #2
 800b714:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800b716:	e100      	b.n	800b91a <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b71e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b720:	f107 0208 	add.w	r2, r7, #8
 800b724:	4610      	mov	r0, r2
 800b726:	4798      	blx	r3
 800b728:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b72a:	68fb      	ldr	r3, [r7, #12]
 800b72c:	3301      	adds	r3, #1
 800b72e:	2202      	movs	r2, #2
 800b730:	701a      	strb	r2, [r3, #0]
      break;
 800b732:	e0f2      	b.n	800b91a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800b734:	683b      	ldr	r3, [r7, #0]
 800b736:	885b      	ldrh	r3, [r3, #2]
 800b738:	b2db      	uxtb	r3, r3
 800b73a:	2b05      	cmp	r3, #5
 800b73c:	f200 80ac 	bhi.w	800b898 <USBD_GetDescriptor+0x204>
 800b740:	a201      	add	r2, pc, #4	; (adr r2, 800b748 <USBD_GetDescriptor+0xb4>)
 800b742:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b746:	bf00      	nop
 800b748:	0800b761 	.word	0x0800b761
 800b74c:	0800b795 	.word	0x0800b795
 800b750:	0800b7c9 	.word	0x0800b7c9
 800b754:	0800b7fd 	.word	0x0800b7fd
 800b758:	0800b831 	.word	0x0800b831
 800b75c:	0800b865 	.word	0x0800b865
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b766:	685b      	ldr	r3, [r3, #4]
 800b768:	2b00      	cmp	r3, #0
 800b76a:	d00b      	beq.n	800b784 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b772:	685b      	ldr	r3, [r3, #4]
 800b774:	687a      	ldr	r2, [r7, #4]
 800b776:	7c12      	ldrb	r2, [r2, #16]
 800b778:	f107 0108 	add.w	r1, r7, #8
 800b77c:	4610      	mov	r0, r2
 800b77e:	4798      	blx	r3
 800b780:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b782:	e091      	b.n	800b8a8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b784:	6839      	ldr	r1, [r7, #0]
 800b786:	6878      	ldr	r0, [r7, #4]
 800b788:	f000 fa97 	bl	800bcba <USBD_CtlError>
            err++;
 800b78c:	7afb      	ldrb	r3, [r7, #11]
 800b78e:	3301      	adds	r3, #1
 800b790:	72fb      	strb	r3, [r7, #11]
          break;
 800b792:	e089      	b.n	800b8a8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800b794:	687b      	ldr	r3, [r7, #4]
 800b796:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b79a:	689b      	ldr	r3, [r3, #8]
 800b79c:	2b00      	cmp	r3, #0
 800b79e:	d00b      	beq.n	800b7b8 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b7a6:	689b      	ldr	r3, [r3, #8]
 800b7a8:	687a      	ldr	r2, [r7, #4]
 800b7aa:	7c12      	ldrb	r2, [r2, #16]
 800b7ac:	f107 0108 	add.w	r1, r7, #8
 800b7b0:	4610      	mov	r0, r2
 800b7b2:	4798      	blx	r3
 800b7b4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b7b6:	e077      	b.n	800b8a8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b7b8:	6839      	ldr	r1, [r7, #0]
 800b7ba:	6878      	ldr	r0, [r7, #4]
 800b7bc:	f000 fa7d 	bl	800bcba <USBD_CtlError>
            err++;
 800b7c0:	7afb      	ldrb	r3, [r7, #11]
 800b7c2:	3301      	adds	r3, #1
 800b7c4:	72fb      	strb	r3, [r7, #11]
          break;
 800b7c6:	e06f      	b.n	800b8a8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b7ce:	68db      	ldr	r3, [r3, #12]
 800b7d0:	2b00      	cmp	r3, #0
 800b7d2:	d00b      	beq.n	800b7ec <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b7da:	68db      	ldr	r3, [r3, #12]
 800b7dc:	687a      	ldr	r2, [r7, #4]
 800b7de:	7c12      	ldrb	r2, [r2, #16]
 800b7e0:	f107 0108 	add.w	r1, r7, #8
 800b7e4:	4610      	mov	r0, r2
 800b7e6:	4798      	blx	r3
 800b7e8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b7ea:	e05d      	b.n	800b8a8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b7ec:	6839      	ldr	r1, [r7, #0]
 800b7ee:	6878      	ldr	r0, [r7, #4]
 800b7f0:	f000 fa63 	bl	800bcba <USBD_CtlError>
            err++;
 800b7f4:	7afb      	ldrb	r3, [r7, #11]
 800b7f6:	3301      	adds	r3, #1
 800b7f8:	72fb      	strb	r3, [r7, #11]
          break;
 800b7fa:	e055      	b.n	800b8a8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800b7fc:	687b      	ldr	r3, [r7, #4]
 800b7fe:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b802:	691b      	ldr	r3, [r3, #16]
 800b804:	2b00      	cmp	r3, #0
 800b806:	d00b      	beq.n	800b820 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b80e:	691b      	ldr	r3, [r3, #16]
 800b810:	687a      	ldr	r2, [r7, #4]
 800b812:	7c12      	ldrb	r2, [r2, #16]
 800b814:	f107 0108 	add.w	r1, r7, #8
 800b818:	4610      	mov	r0, r2
 800b81a:	4798      	blx	r3
 800b81c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b81e:	e043      	b.n	800b8a8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b820:	6839      	ldr	r1, [r7, #0]
 800b822:	6878      	ldr	r0, [r7, #4]
 800b824:	f000 fa49 	bl	800bcba <USBD_CtlError>
            err++;
 800b828:	7afb      	ldrb	r3, [r7, #11]
 800b82a:	3301      	adds	r3, #1
 800b82c:	72fb      	strb	r3, [r7, #11]
          break;
 800b82e:	e03b      	b.n	800b8a8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b836:	695b      	ldr	r3, [r3, #20]
 800b838:	2b00      	cmp	r3, #0
 800b83a:	d00b      	beq.n	800b854 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b842:	695b      	ldr	r3, [r3, #20]
 800b844:	687a      	ldr	r2, [r7, #4]
 800b846:	7c12      	ldrb	r2, [r2, #16]
 800b848:	f107 0108 	add.w	r1, r7, #8
 800b84c:	4610      	mov	r0, r2
 800b84e:	4798      	blx	r3
 800b850:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b852:	e029      	b.n	800b8a8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b854:	6839      	ldr	r1, [r7, #0]
 800b856:	6878      	ldr	r0, [r7, #4]
 800b858:	f000 fa2f 	bl	800bcba <USBD_CtlError>
            err++;
 800b85c:	7afb      	ldrb	r3, [r7, #11]
 800b85e:	3301      	adds	r3, #1
 800b860:	72fb      	strb	r3, [r7, #11]
          break;
 800b862:	e021      	b.n	800b8a8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b86a:	699b      	ldr	r3, [r3, #24]
 800b86c:	2b00      	cmp	r3, #0
 800b86e:	d00b      	beq.n	800b888 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b876:	699b      	ldr	r3, [r3, #24]
 800b878:	687a      	ldr	r2, [r7, #4]
 800b87a:	7c12      	ldrb	r2, [r2, #16]
 800b87c:	f107 0108 	add.w	r1, r7, #8
 800b880:	4610      	mov	r0, r2
 800b882:	4798      	blx	r3
 800b884:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b886:	e00f      	b.n	800b8a8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b888:	6839      	ldr	r1, [r7, #0]
 800b88a:	6878      	ldr	r0, [r7, #4]
 800b88c:	f000 fa15 	bl	800bcba <USBD_CtlError>
            err++;
 800b890:	7afb      	ldrb	r3, [r7, #11]
 800b892:	3301      	adds	r3, #1
 800b894:	72fb      	strb	r3, [r7, #11]
          break;
 800b896:	e007      	b.n	800b8a8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 800b898:	6839      	ldr	r1, [r7, #0]
 800b89a:	6878      	ldr	r0, [r7, #4]
 800b89c:	f000 fa0d 	bl	800bcba <USBD_CtlError>
          err++;
 800b8a0:	7afb      	ldrb	r3, [r7, #11]
 800b8a2:	3301      	adds	r3, #1
 800b8a4:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 800b8a6:	e038      	b.n	800b91a <USBD_GetDescriptor+0x286>
 800b8a8:	e037      	b.n	800b91a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b8aa:	687b      	ldr	r3, [r7, #4]
 800b8ac:	7c1b      	ldrb	r3, [r3, #16]
 800b8ae:	2b00      	cmp	r3, #0
 800b8b0:	d109      	bne.n	800b8c6 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800b8b2:	687b      	ldr	r3, [r7, #4]
 800b8b4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b8b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b8ba:	f107 0208 	add.w	r2, r7, #8
 800b8be:	4610      	mov	r0, r2
 800b8c0:	4798      	blx	r3
 800b8c2:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b8c4:	e029      	b.n	800b91a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800b8c6:	6839      	ldr	r1, [r7, #0]
 800b8c8:	6878      	ldr	r0, [r7, #4]
 800b8ca:	f000 f9f6 	bl	800bcba <USBD_CtlError>
        err++;
 800b8ce:	7afb      	ldrb	r3, [r7, #11]
 800b8d0:	3301      	adds	r3, #1
 800b8d2:	72fb      	strb	r3, [r7, #11]
      break;
 800b8d4:	e021      	b.n	800b91a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b8d6:	687b      	ldr	r3, [r7, #4]
 800b8d8:	7c1b      	ldrb	r3, [r3, #16]
 800b8da:	2b00      	cmp	r3, #0
 800b8dc:	d10d      	bne.n	800b8fa <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800b8de:	687b      	ldr	r3, [r7, #4]
 800b8e0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b8e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b8e6:	f107 0208 	add.w	r2, r7, #8
 800b8ea:	4610      	mov	r0, r2
 800b8ec:	4798      	blx	r3
 800b8ee:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800b8f0:	68fb      	ldr	r3, [r7, #12]
 800b8f2:	3301      	adds	r3, #1
 800b8f4:	2207      	movs	r2, #7
 800b8f6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b8f8:	e00f      	b.n	800b91a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800b8fa:	6839      	ldr	r1, [r7, #0]
 800b8fc:	6878      	ldr	r0, [r7, #4]
 800b8fe:	f000 f9dc 	bl	800bcba <USBD_CtlError>
        err++;
 800b902:	7afb      	ldrb	r3, [r7, #11]
 800b904:	3301      	adds	r3, #1
 800b906:	72fb      	strb	r3, [r7, #11]
      break;
 800b908:	e007      	b.n	800b91a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800b90a:	6839      	ldr	r1, [r7, #0]
 800b90c:	6878      	ldr	r0, [r7, #4]
 800b90e:	f000 f9d4 	bl	800bcba <USBD_CtlError>
      err++;
 800b912:	7afb      	ldrb	r3, [r7, #11]
 800b914:	3301      	adds	r3, #1
 800b916:	72fb      	strb	r3, [r7, #11]
      break;
 800b918:	bf00      	nop
  }

  if (err != 0U)
 800b91a:	7afb      	ldrb	r3, [r7, #11]
 800b91c:	2b00      	cmp	r3, #0
 800b91e:	d11c      	bne.n	800b95a <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 800b920:	893b      	ldrh	r3, [r7, #8]
 800b922:	2b00      	cmp	r3, #0
 800b924:	d011      	beq.n	800b94a <USBD_GetDescriptor+0x2b6>
 800b926:	683b      	ldr	r3, [r7, #0]
 800b928:	88db      	ldrh	r3, [r3, #6]
 800b92a:	2b00      	cmp	r3, #0
 800b92c:	d00d      	beq.n	800b94a <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 800b92e:	683b      	ldr	r3, [r7, #0]
 800b930:	88da      	ldrh	r2, [r3, #6]
 800b932:	893b      	ldrh	r3, [r7, #8]
 800b934:	4293      	cmp	r3, r2
 800b936:	bf28      	it	cs
 800b938:	4613      	movcs	r3, r2
 800b93a:	b29b      	uxth	r3, r3
 800b93c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800b93e:	893b      	ldrh	r3, [r7, #8]
 800b940:	461a      	mov	r2, r3
 800b942:	68f9      	ldr	r1, [r7, #12]
 800b944:	6878      	ldr	r0, [r7, #4]
 800b946:	f000 fa22 	bl	800bd8e <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800b94a:	683b      	ldr	r3, [r7, #0]
 800b94c:	88db      	ldrh	r3, [r3, #6]
 800b94e:	2b00      	cmp	r3, #0
 800b950:	d104      	bne.n	800b95c <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 800b952:	6878      	ldr	r0, [r7, #4]
 800b954:	f000 fa79 	bl	800be4a <USBD_CtlSendStatus>
 800b958:	e000      	b.n	800b95c <USBD_GetDescriptor+0x2c8>
    return;
 800b95a:	bf00      	nop
    }
  }
}
 800b95c:	3710      	adds	r7, #16
 800b95e:	46bd      	mov	sp, r7
 800b960:	bd80      	pop	{r7, pc}
 800b962:	bf00      	nop

0800b964 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800b964:	b580      	push	{r7, lr}
 800b966:	b084      	sub	sp, #16
 800b968:	af00      	add	r7, sp, #0
 800b96a:	6078      	str	r0, [r7, #4]
 800b96c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800b96e:	683b      	ldr	r3, [r7, #0]
 800b970:	889b      	ldrh	r3, [r3, #4]
 800b972:	2b00      	cmp	r3, #0
 800b974:	d130      	bne.n	800b9d8 <USBD_SetAddress+0x74>
 800b976:	683b      	ldr	r3, [r7, #0]
 800b978:	88db      	ldrh	r3, [r3, #6]
 800b97a:	2b00      	cmp	r3, #0
 800b97c:	d12c      	bne.n	800b9d8 <USBD_SetAddress+0x74>
 800b97e:	683b      	ldr	r3, [r7, #0]
 800b980:	885b      	ldrh	r3, [r3, #2]
 800b982:	2b7f      	cmp	r3, #127	; 0x7f
 800b984:	d828      	bhi.n	800b9d8 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800b986:	683b      	ldr	r3, [r7, #0]
 800b988:	885b      	ldrh	r3, [r3, #2]
 800b98a:	b2db      	uxtb	r3, r3
 800b98c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b990:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b992:	687b      	ldr	r3, [r7, #4]
 800b994:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b998:	2b03      	cmp	r3, #3
 800b99a:	d104      	bne.n	800b9a6 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800b99c:	6839      	ldr	r1, [r7, #0]
 800b99e:	6878      	ldr	r0, [r7, #4]
 800b9a0:	f000 f98b 	bl	800bcba <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b9a4:	e01d      	b.n	800b9e2 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800b9a6:	687b      	ldr	r3, [r7, #4]
 800b9a8:	7bfa      	ldrb	r2, [r7, #15]
 800b9aa:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800b9ae:	7bfb      	ldrb	r3, [r7, #15]
 800b9b0:	4619      	mov	r1, r3
 800b9b2:	6878      	ldr	r0, [r7, #4]
 800b9b4:	f000 fecf 	bl	800c756 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800b9b8:	6878      	ldr	r0, [r7, #4]
 800b9ba:	f000 fa46 	bl	800be4a <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800b9be:	7bfb      	ldrb	r3, [r7, #15]
 800b9c0:	2b00      	cmp	r3, #0
 800b9c2:	d004      	beq.n	800b9ce <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	2202      	movs	r2, #2
 800b9c8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b9cc:	e009      	b.n	800b9e2 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800b9ce:	687b      	ldr	r3, [r7, #4]
 800b9d0:	2201      	movs	r2, #1
 800b9d2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b9d6:	e004      	b.n	800b9e2 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800b9d8:	6839      	ldr	r1, [r7, #0]
 800b9da:	6878      	ldr	r0, [r7, #4]
 800b9dc:	f000 f96d 	bl	800bcba <USBD_CtlError>
  }
}
 800b9e0:	bf00      	nop
 800b9e2:	bf00      	nop
 800b9e4:	3710      	adds	r7, #16
 800b9e6:	46bd      	mov	sp, r7
 800b9e8:	bd80      	pop	{r7, pc}
	...

0800b9ec <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b9ec:	b580      	push	{r7, lr}
 800b9ee:	b082      	sub	sp, #8
 800b9f0:	af00      	add	r7, sp, #0
 800b9f2:	6078      	str	r0, [r7, #4]
 800b9f4:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800b9f6:	683b      	ldr	r3, [r7, #0]
 800b9f8:	885b      	ldrh	r3, [r3, #2]
 800b9fa:	b2da      	uxtb	r2, r3
 800b9fc:	4b41      	ldr	r3, [pc, #260]	; (800bb04 <USBD_SetConfig+0x118>)
 800b9fe:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800ba00:	4b40      	ldr	r3, [pc, #256]	; (800bb04 <USBD_SetConfig+0x118>)
 800ba02:	781b      	ldrb	r3, [r3, #0]
 800ba04:	2b01      	cmp	r3, #1
 800ba06:	d904      	bls.n	800ba12 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 800ba08:	6839      	ldr	r1, [r7, #0]
 800ba0a:	6878      	ldr	r0, [r7, #4]
 800ba0c:	f000 f955 	bl	800bcba <USBD_CtlError>
 800ba10:	e075      	b.n	800bafe <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800ba12:	687b      	ldr	r3, [r7, #4]
 800ba14:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ba18:	2b02      	cmp	r3, #2
 800ba1a:	d002      	beq.n	800ba22 <USBD_SetConfig+0x36>
 800ba1c:	2b03      	cmp	r3, #3
 800ba1e:	d023      	beq.n	800ba68 <USBD_SetConfig+0x7c>
 800ba20:	e062      	b.n	800bae8 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800ba22:	4b38      	ldr	r3, [pc, #224]	; (800bb04 <USBD_SetConfig+0x118>)
 800ba24:	781b      	ldrb	r3, [r3, #0]
 800ba26:	2b00      	cmp	r3, #0
 800ba28:	d01a      	beq.n	800ba60 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 800ba2a:	4b36      	ldr	r3, [pc, #216]	; (800bb04 <USBD_SetConfig+0x118>)
 800ba2c:	781b      	ldrb	r3, [r3, #0]
 800ba2e:	461a      	mov	r2, r3
 800ba30:	687b      	ldr	r3, [r7, #4]
 800ba32:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	2203      	movs	r2, #3
 800ba38:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800ba3c:	4b31      	ldr	r3, [pc, #196]	; (800bb04 <USBD_SetConfig+0x118>)
 800ba3e:	781b      	ldrb	r3, [r3, #0]
 800ba40:	4619      	mov	r1, r3
 800ba42:	6878      	ldr	r0, [r7, #4]
 800ba44:	f7ff f9af 	bl	800ada6 <USBD_SetClassConfig>
 800ba48:	4603      	mov	r3, r0
 800ba4a:	2b02      	cmp	r3, #2
 800ba4c:	d104      	bne.n	800ba58 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800ba4e:	6839      	ldr	r1, [r7, #0]
 800ba50:	6878      	ldr	r0, [r7, #4]
 800ba52:	f000 f932 	bl	800bcba <USBD_CtlError>
            return;
 800ba56:	e052      	b.n	800bafe <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 800ba58:	6878      	ldr	r0, [r7, #4]
 800ba5a:	f000 f9f6 	bl	800be4a <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800ba5e:	e04e      	b.n	800bafe <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800ba60:	6878      	ldr	r0, [r7, #4]
 800ba62:	f000 f9f2 	bl	800be4a <USBD_CtlSendStatus>
        break;
 800ba66:	e04a      	b.n	800bafe <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 800ba68:	4b26      	ldr	r3, [pc, #152]	; (800bb04 <USBD_SetConfig+0x118>)
 800ba6a:	781b      	ldrb	r3, [r3, #0]
 800ba6c:	2b00      	cmp	r3, #0
 800ba6e:	d112      	bne.n	800ba96 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800ba70:	687b      	ldr	r3, [r7, #4]
 800ba72:	2202      	movs	r2, #2
 800ba74:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 800ba78:	4b22      	ldr	r3, [pc, #136]	; (800bb04 <USBD_SetConfig+0x118>)
 800ba7a:	781b      	ldrb	r3, [r3, #0]
 800ba7c:	461a      	mov	r2, r3
 800ba7e:	687b      	ldr	r3, [r7, #4]
 800ba80:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800ba82:	4b20      	ldr	r3, [pc, #128]	; (800bb04 <USBD_SetConfig+0x118>)
 800ba84:	781b      	ldrb	r3, [r3, #0]
 800ba86:	4619      	mov	r1, r3
 800ba88:	6878      	ldr	r0, [r7, #4]
 800ba8a:	f7ff f9ab 	bl	800ade4 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800ba8e:	6878      	ldr	r0, [r7, #4]
 800ba90:	f000 f9db 	bl	800be4a <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800ba94:	e033      	b.n	800bafe <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 800ba96:	4b1b      	ldr	r3, [pc, #108]	; (800bb04 <USBD_SetConfig+0x118>)
 800ba98:	781b      	ldrb	r3, [r3, #0]
 800ba9a:	461a      	mov	r2, r3
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	685b      	ldr	r3, [r3, #4]
 800baa0:	429a      	cmp	r2, r3
 800baa2:	d01d      	beq.n	800bae0 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	685b      	ldr	r3, [r3, #4]
 800baa8:	b2db      	uxtb	r3, r3
 800baaa:	4619      	mov	r1, r3
 800baac:	6878      	ldr	r0, [r7, #4]
 800baae:	f7ff f999 	bl	800ade4 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800bab2:	4b14      	ldr	r3, [pc, #80]	; (800bb04 <USBD_SetConfig+0x118>)
 800bab4:	781b      	ldrb	r3, [r3, #0]
 800bab6:	461a      	mov	r2, r3
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800babc:	4b11      	ldr	r3, [pc, #68]	; (800bb04 <USBD_SetConfig+0x118>)
 800babe:	781b      	ldrb	r3, [r3, #0]
 800bac0:	4619      	mov	r1, r3
 800bac2:	6878      	ldr	r0, [r7, #4]
 800bac4:	f7ff f96f 	bl	800ada6 <USBD_SetClassConfig>
 800bac8:	4603      	mov	r3, r0
 800baca:	2b02      	cmp	r3, #2
 800bacc:	d104      	bne.n	800bad8 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 800bace:	6839      	ldr	r1, [r7, #0]
 800bad0:	6878      	ldr	r0, [r7, #4]
 800bad2:	f000 f8f2 	bl	800bcba <USBD_CtlError>
            return;
 800bad6:	e012      	b.n	800bafe <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800bad8:	6878      	ldr	r0, [r7, #4]
 800bada:	f000 f9b6 	bl	800be4a <USBD_CtlSendStatus>
        break;
 800bade:	e00e      	b.n	800bafe <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800bae0:	6878      	ldr	r0, [r7, #4]
 800bae2:	f000 f9b2 	bl	800be4a <USBD_CtlSendStatus>
        break;
 800bae6:	e00a      	b.n	800bafe <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 800bae8:	6839      	ldr	r1, [r7, #0]
 800baea:	6878      	ldr	r0, [r7, #4]
 800baec:	f000 f8e5 	bl	800bcba <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 800baf0:	4b04      	ldr	r3, [pc, #16]	; (800bb04 <USBD_SetConfig+0x118>)
 800baf2:	781b      	ldrb	r3, [r3, #0]
 800baf4:	4619      	mov	r1, r3
 800baf6:	6878      	ldr	r0, [r7, #4]
 800baf8:	f7ff f974 	bl	800ade4 <USBD_ClrClassConfig>
        break;
 800bafc:	bf00      	nop
    }
  }
}
 800bafe:	3708      	adds	r7, #8
 800bb00:	46bd      	mov	sp, r7
 800bb02:	bd80      	pop	{r7, pc}
 800bb04:	200006c8 	.word	0x200006c8

0800bb08 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bb08:	b580      	push	{r7, lr}
 800bb0a:	b082      	sub	sp, #8
 800bb0c:	af00      	add	r7, sp, #0
 800bb0e:	6078      	str	r0, [r7, #4]
 800bb10:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800bb12:	683b      	ldr	r3, [r7, #0]
 800bb14:	88db      	ldrh	r3, [r3, #6]
 800bb16:	2b01      	cmp	r3, #1
 800bb18:	d004      	beq.n	800bb24 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800bb1a:	6839      	ldr	r1, [r7, #0]
 800bb1c:	6878      	ldr	r0, [r7, #4]
 800bb1e:	f000 f8cc 	bl	800bcba <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800bb22:	e022      	b.n	800bb6a <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 800bb24:	687b      	ldr	r3, [r7, #4]
 800bb26:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bb2a:	2b02      	cmp	r3, #2
 800bb2c:	dc02      	bgt.n	800bb34 <USBD_GetConfig+0x2c>
 800bb2e:	2b00      	cmp	r3, #0
 800bb30:	dc03      	bgt.n	800bb3a <USBD_GetConfig+0x32>
 800bb32:	e015      	b.n	800bb60 <USBD_GetConfig+0x58>
 800bb34:	2b03      	cmp	r3, #3
 800bb36:	d00b      	beq.n	800bb50 <USBD_GetConfig+0x48>
 800bb38:	e012      	b.n	800bb60 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 800bb3a:	687b      	ldr	r3, [r7, #4]
 800bb3c:	2200      	movs	r2, #0
 800bb3e:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800bb40:	687b      	ldr	r3, [r7, #4]
 800bb42:	3308      	adds	r3, #8
 800bb44:	2201      	movs	r2, #1
 800bb46:	4619      	mov	r1, r3
 800bb48:	6878      	ldr	r0, [r7, #4]
 800bb4a:	f000 f920 	bl	800bd8e <USBD_CtlSendData>
        break;
 800bb4e:	e00c      	b.n	800bb6a <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	3304      	adds	r3, #4
 800bb54:	2201      	movs	r2, #1
 800bb56:	4619      	mov	r1, r3
 800bb58:	6878      	ldr	r0, [r7, #4]
 800bb5a:	f000 f918 	bl	800bd8e <USBD_CtlSendData>
        break;
 800bb5e:	e004      	b.n	800bb6a <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 800bb60:	6839      	ldr	r1, [r7, #0]
 800bb62:	6878      	ldr	r0, [r7, #4]
 800bb64:	f000 f8a9 	bl	800bcba <USBD_CtlError>
        break;
 800bb68:	bf00      	nop
}
 800bb6a:	bf00      	nop
 800bb6c:	3708      	adds	r7, #8
 800bb6e:	46bd      	mov	sp, r7
 800bb70:	bd80      	pop	{r7, pc}

0800bb72 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bb72:	b580      	push	{r7, lr}
 800bb74:	b082      	sub	sp, #8
 800bb76:	af00      	add	r7, sp, #0
 800bb78:	6078      	str	r0, [r7, #4]
 800bb7a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800bb7c:	687b      	ldr	r3, [r7, #4]
 800bb7e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bb82:	3b01      	subs	r3, #1
 800bb84:	2b02      	cmp	r3, #2
 800bb86:	d81e      	bhi.n	800bbc6 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800bb88:	683b      	ldr	r3, [r7, #0]
 800bb8a:	88db      	ldrh	r3, [r3, #6]
 800bb8c:	2b02      	cmp	r3, #2
 800bb8e:	d004      	beq.n	800bb9a <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 800bb90:	6839      	ldr	r1, [r7, #0]
 800bb92:	6878      	ldr	r0, [r7, #4]
 800bb94:	f000 f891 	bl	800bcba <USBD_CtlError>
        break;
 800bb98:	e01a      	b.n	800bbd0 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800bb9a:	687b      	ldr	r3, [r7, #4]
 800bb9c:	2201      	movs	r2, #1
 800bb9e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800bba0:	687b      	ldr	r3, [r7, #4]
 800bba2:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800bba6:	2b00      	cmp	r3, #0
 800bba8:	d005      	beq.n	800bbb6 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800bbaa:	687b      	ldr	r3, [r7, #4]
 800bbac:	68db      	ldr	r3, [r3, #12]
 800bbae:	f043 0202 	orr.w	r2, r3, #2
 800bbb2:	687b      	ldr	r3, [r7, #4]
 800bbb4:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800bbb6:	687b      	ldr	r3, [r7, #4]
 800bbb8:	330c      	adds	r3, #12
 800bbba:	2202      	movs	r2, #2
 800bbbc:	4619      	mov	r1, r3
 800bbbe:	6878      	ldr	r0, [r7, #4]
 800bbc0:	f000 f8e5 	bl	800bd8e <USBD_CtlSendData>
      break;
 800bbc4:	e004      	b.n	800bbd0 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 800bbc6:	6839      	ldr	r1, [r7, #0]
 800bbc8:	6878      	ldr	r0, [r7, #4]
 800bbca:	f000 f876 	bl	800bcba <USBD_CtlError>
      break;
 800bbce:	bf00      	nop
  }
}
 800bbd0:	bf00      	nop
 800bbd2:	3708      	adds	r7, #8
 800bbd4:	46bd      	mov	sp, r7
 800bbd6:	bd80      	pop	{r7, pc}

0800bbd8 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800bbd8:	b580      	push	{r7, lr}
 800bbda:	b082      	sub	sp, #8
 800bbdc:	af00      	add	r7, sp, #0
 800bbde:	6078      	str	r0, [r7, #4]
 800bbe0:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800bbe2:	683b      	ldr	r3, [r7, #0]
 800bbe4:	885b      	ldrh	r3, [r3, #2]
 800bbe6:	2b01      	cmp	r3, #1
 800bbe8:	d106      	bne.n	800bbf8 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800bbea:	687b      	ldr	r3, [r7, #4]
 800bbec:	2201      	movs	r2, #1
 800bbee:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 800bbf2:	6878      	ldr	r0, [r7, #4]
 800bbf4:	f000 f929 	bl	800be4a <USBD_CtlSendStatus>
  }
}
 800bbf8:	bf00      	nop
 800bbfa:	3708      	adds	r7, #8
 800bbfc:	46bd      	mov	sp, r7
 800bbfe:	bd80      	pop	{r7, pc}

0800bc00 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800bc00:	b580      	push	{r7, lr}
 800bc02:	b082      	sub	sp, #8
 800bc04:	af00      	add	r7, sp, #0
 800bc06:	6078      	str	r0, [r7, #4]
 800bc08:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800bc0a:	687b      	ldr	r3, [r7, #4]
 800bc0c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bc10:	3b01      	subs	r3, #1
 800bc12:	2b02      	cmp	r3, #2
 800bc14:	d80b      	bhi.n	800bc2e <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800bc16:	683b      	ldr	r3, [r7, #0]
 800bc18:	885b      	ldrh	r3, [r3, #2]
 800bc1a:	2b01      	cmp	r3, #1
 800bc1c:	d10c      	bne.n	800bc38 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800bc1e:	687b      	ldr	r3, [r7, #4]
 800bc20:	2200      	movs	r2, #0
 800bc22:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 800bc26:	6878      	ldr	r0, [r7, #4]
 800bc28:	f000 f90f 	bl	800be4a <USBD_CtlSendStatus>
      }
      break;
 800bc2c:	e004      	b.n	800bc38 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800bc2e:	6839      	ldr	r1, [r7, #0]
 800bc30:	6878      	ldr	r0, [r7, #4]
 800bc32:	f000 f842 	bl	800bcba <USBD_CtlError>
      break;
 800bc36:	e000      	b.n	800bc3a <USBD_ClrFeature+0x3a>
      break;
 800bc38:	bf00      	nop
  }
}
 800bc3a:	bf00      	nop
 800bc3c:	3708      	adds	r7, #8
 800bc3e:	46bd      	mov	sp, r7
 800bc40:	bd80      	pop	{r7, pc}

0800bc42 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800bc42:	b480      	push	{r7}
 800bc44:	b083      	sub	sp, #12
 800bc46:	af00      	add	r7, sp, #0
 800bc48:	6078      	str	r0, [r7, #4]
 800bc4a:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800bc4c:	683b      	ldr	r3, [r7, #0]
 800bc4e:	781a      	ldrb	r2, [r3, #0]
 800bc50:	687b      	ldr	r3, [r7, #4]
 800bc52:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800bc54:	683b      	ldr	r3, [r7, #0]
 800bc56:	785a      	ldrb	r2, [r3, #1]
 800bc58:	687b      	ldr	r3, [r7, #4]
 800bc5a:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800bc5c:	683b      	ldr	r3, [r7, #0]
 800bc5e:	3302      	adds	r3, #2
 800bc60:	781b      	ldrb	r3, [r3, #0]
 800bc62:	b29a      	uxth	r2, r3
 800bc64:	683b      	ldr	r3, [r7, #0]
 800bc66:	3303      	adds	r3, #3
 800bc68:	781b      	ldrb	r3, [r3, #0]
 800bc6a:	b29b      	uxth	r3, r3
 800bc6c:	021b      	lsls	r3, r3, #8
 800bc6e:	b29b      	uxth	r3, r3
 800bc70:	4413      	add	r3, r2
 800bc72:	b29a      	uxth	r2, r3
 800bc74:	687b      	ldr	r3, [r7, #4]
 800bc76:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800bc78:	683b      	ldr	r3, [r7, #0]
 800bc7a:	3304      	adds	r3, #4
 800bc7c:	781b      	ldrb	r3, [r3, #0]
 800bc7e:	b29a      	uxth	r2, r3
 800bc80:	683b      	ldr	r3, [r7, #0]
 800bc82:	3305      	adds	r3, #5
 800bc84:	781b      	ldrb	r3, [r3, #0]
 800bc86:	b29b      	uxth	r3, r3
 800bc88:	021b      	lsls	r3, r3, #8
 800bc8a:	b29b      	uxth	r3, r3
 800bc8c:	4413      	add	r3, r2
 800bc8e:	b29a      	uxth	r2, r3
 800bc90:	687b      	ldr	r3, [r7, #4]
 800bc92:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800bc94:	683b      	ldr	r3, [r7, #0]
 800bc96:	3306      	adds	r3, #6
 800bc98:	781b      	ldrb	r3, [r3, #0]
 800bc9a:	b29a      	uxth	r2, r3
 800bc9c:	683b      	ldr	r3, [r7, #0]
 800bc9e:	3307      	adds	r3, #7
 800bca0:	781b      	ldrb	r3, [r3, #0]
 800bca2:	b29b      	uxth	r3, r3
 800bca4:	021b      	lsls	r3, r3, #8
 800bca6:	b29b      	uxth	r3, r3
 800bca8:	4413      	add	r3, r2
 800bcaa:	b29a      	uxth	r2, r3
 800bcac:	687b      	ldr	r3, [r7, #4]
 800bcae:	80da      	strh	r2, [r3, #6]

}
 800bcb0:	bf00      	nop
 800bcb2:	370c      	adds	r7, #12
 800bcb4:	46bd      	mov	sp, r7
 800bcb6:	bc80      	pop	{r7}
 800bcb8:	4770      	bx	lr

0800bcba <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800bcba:	b580      	push	{r7, lr}
 800bcbc:	b082      	sub	sp, #8
 800bcbe:	af00      	add	r7, sp, #0
 800bcc0:	6078      	str	r0, [r7, #4]
 800bcc2:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800bcc4:	2180      	movs	r1, #128	; 0x80
 800bcc6:	6878      	ldr	r0, [r7, #4]
 800bcc8:	f000 fcdc 	bl	800c684 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800bccc:	2100      	movs	r1, #0
 800bcce:	6878      	ldr	r0, [r7, #4]
 800bcd0:	f000 fcd8 	bl	800c684 <USBD_LL_StallEP>
}
 800bcd4:	bf00      	nop
 800bcd6:	3708      	adds	r7, #8
 800bcd8:	46bd      	mov	sp, r7
 800bcda:	bd80      	pop	{r7, pc}

0800bcdc <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800bcdc:	b580      	push	{r7, lr}
 800bcde:	b086      	sub	sp, #24
 800bce0:	af00      	add	r7, sp, #0
 800bce2:	60f8      	str	r0, [r7, #12]
 800bce4:	60b9      	str	r1, [r7, #8]
 800bce6:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800bce8:	2300      	movs	r3, #0
 800bcea:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800bcec:	68fb      	ldr	r3, [r7, #12]
 800bcee:	2b00      	cmp	r3, #0
 800bcf0:	d032      	beq.n	800bd58 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800bcf2:	68f8      	ldr	r0, [r7, #12]
 800bcf4:	f000 f834 	bl	800bd60 <USBD_GetLen>
 800bcf8:	4603      	mov	r3, r0
 800bcfa:	3301      	adds	r3, #1
 800bcfc:	b29b      	uxth	r3, r3
 800bcfe:	005b      	lsls	r3, r3, #1
 800bd00:	b29a      	uxth	r2, r3
 800bd02:	687b      	ldr	r3, [r7, #4]
 800bd04:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800bd06:	7dfb      	ldrb	r3, [r7, #23]
 800bd08:	1c5a      	adds	r2, r3, #1
 800bd0a:	75fa      	strb	r2, [r7, #23]
 800bd0c:	461a      	mov	r2, r3
 800bd0e:	68bb      	ldr	r3, [r7, #8]
 800bd10:	4413      	add	r3, r2
 800bd12:	687a      	ldr	r2, [r7, #4]
 800bd14:	7812      	ldrb	r2, [r2, #0]
 800bd16:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800bd18:	7dfb      	ldrb	r3, [r7, #23]
 800bd1a:	1c5a      	adds	r2, r3, #1
 800bd1c:	75fa      	strb	r2, [r7, #23]
 800bd1e:	461a      	mov	r2, r3
 800bd20:	68bb      	ldr	r3, [r7, #8]
 800bd22:	4413      	add	r3, r2
 800bd24:	2203      	movs	r2, #3
 800bd26:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800bd28:	e012      	b.n	800bd50 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800bd2a:	68fb      	ldr	r3, [r7, #12]
 800bd2c:	1c5a      	adds	r2, r3, #1
 800bd2e:	60fa      	str	r2, [r7, #12]
 800bd30:	7dfa      	ldrb	r2, [r7, #23]
 800bd32:	1c51      	adds	r1, r2, #1
 800bd34:	75f9      	strb	r1, [r7, #23]
 800bd36:	4611      	mov	r1, r2
 800bd38:	68ba      	ldr	r2, [r7, #8]
 800bd3a:	440a      	add	r2, r1
 800bd3c:	781b      	ldrb	r3, [r3, #0]
 800bd3e:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800bd40:	7dfb      	ldrb	r3, [r7, #23]
 800bd42:	1c5a      	adds	r2, r3, #1
 800bd44:	75fa      	strb	r2, [r7, #23]
 800bd46:	461a      	mov	r2, r3
 800bd48:	68bb      	ldr	r3, [r7, #8]
 800bd4a:	4413      	add	r3, r2
 800bd4c:	2200      	movs	r2, #0
 800bd4e:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800bd50:	68fb      	ldr	r3, [r7, #12]
 800bd52:	781b      	ldrb	r3, [r3, #0]
 800bd54:	2b00      	cmp	r3, #0
 800bd56:	d1e8      	bne.n	800bd2a <USBD_GetString+0x4e>
    }
  }
}
 800bd58:	bf00      	nop
 800bd5a:	3718      	adds	r7, #24
 800bd5c:	46bd      	mov	sp, r7
 800bd5e:	bd80      	pop	{r7, pc}

0800bd60 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800bd60:	b480      	push	{r7}
 800bd62:	b085      	sub	sp, #20
 800bd64:	af00      	add	r7, sp, #0
 800bd66:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800bd68:	2300      	movs	r3, #0
 800bd6a:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 800bd6c:	e005      	b.n	800bd7a <USBD_GetLen+0x1a>
  {
    len++;
 800bd6e:	7bfb      	ldrb	r3, [r7, #15]
 800bd70:	3301      	adds	r3, #1
 800bd72:	73fb      	strb	r3, [r7, #15]
    buf++;
 800bd74:	687b      	ldr	r3, [r7, #4]
 800bd76:	3301      	adds	r3, #1
 800bd78:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800bd7a:	687b      	ldr	r3, [r7, #4]
 800bd7c:	781b      	ldrb	r3, [r3, #0]
 800bd7e:	2b00      	cmp	r3, #0
 800bd80:	d1f5      	bne.n	800bd6e <USBD_GetLen+0xe>
  }

  return len;
 800bd82:	7bfb      	ldrb	r3, [r7, #15]
}
 800bd84:	4618      	mov	r0, r3
 800bd86:	3714      	adds	r7, #20
 800bd88:	46bd      	mov	sp, r7
 800bd8a:	bc80      	pop	{r7}
 800bd8c:	4770      	bx	lr

0800bd8e <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800bd8e:	b580      	push	{r7, lr}
 800bd90:	b084      	sub	sp, #16
 800bd92:	af00      	add	r7, sp, #0
 800bd94:	60f8      	str	r0, [r7, #12]
 800bd96:	60b9      	str	r1, [r7, #8]
 800bd98:	4613      	mov	r3, r2
 800bd9a:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800bd9c:	68fb      	ldr	r3, [r7, #12]
 800bd9e:	2202      	movs	r2, #2
 800bda0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800bda4:	88fa      	ldrh	r2, [r7, #6]
 800bda6:	68fb      	ldr	r3, [r7, #12]
 800bda8:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800bdaa:	88fa      	ldrh	r2, [r7, #6]
 800bdac:	68fb      	ldr	r3, [r7, #12]
 800bdae:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800bdb0:	88fb      	ldrh	r3, [r7, #6]
 800bdb2:	68ba      	ldr	r2, [r7, #8]
 800bdb4:	2100      	movs	r1, #0
 800bdb6:	68f8      	ldr	r0, [r7, #12]
 800bdb8:	f000 fcec 	bl	800c794 <USBD_LL_Transmit>

  return USBD_OK;
 800bdbc:	2300      	movs	r3, #0
}
 800bdbe:	4618      	mov	r0, r3
 800bdc0:	3710      	adds	r7, #16
 800bdc2:	46bd      	mov	sp, r7
 800bdc4:	bd80      	pop	{r7, pc}

0800bdc6 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800bdc6:	b580      	push	{r7, lr}
 800bdc8:	b084      	sub	sp, #16
 800bdca:	af00      	add	r7, sp, #0
 800bdcc:	60f8      	str	r0, [r7, #12]
 800bdce:	60b9      	str	r1, [r7, #8]
 800bdd0:	4613      	mov	r3, r2
 800bdd2:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800bdd4:	88fb      	ldrh	r3, [r7, #6]
 800bdd6:	68ba      	ldr	r2, [r7, #8]
 800bdd8:	2100      	movs	r1, #0
 800bdda:	68f8      	ldr	r0, [r7, #12]
 800bddc:	f000 fcda 	bl	800c794 <USBD_LL_Transmit>

  return USBD_OK;
 800bde0:	2300      	movs	r3, #0
}
 800bde2:	4618      	mov	r0, r3
 800bde4:	3710      	adds	r7, #16
 800bde6:	46bd      	mov	sp, r7
 800bde8:	bd80      	pop	{r7, pc}

0800bdea <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800bdea:	b580      	push	{r7, lr}
 800bdec:	b084      	sub	sp, #16
 800bdee:	af00      	add	r7, sp, #0
 800bdf0:	60f8      	str	r0, [r7, #12]
 800bdf2:	60b9      	str	r1, [r7, #8]
 800bdf4:	4613      	mov	r3, r2
 800bdf6:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800bdf8:	68fb      	ldr	r3, [r7, #12]
 800bdfa:	2203      	movs	r2, #3
 800bdfc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800be00:	88fa      	ldrh	r2, [r7, #6]
 800be02:	68fb      	ldr	r3, [r7, #12]
 800be04:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 800be08:	88fa      	ldrh	r2, [r7, #6]
 800be0a:	68fb      	ldr	r3, [r7, #12]
 800be0c:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800be10:	88fb      	ldrh	r3, [r7, #6]
 800be12:	68ba      	ldr	r2, [r7, #8]
 800be14:	2100      	movs	r1, #0
 800be16:	68f8      	ldr	r0, [r7, #12]
 800be18:	f000 fcdf 	bl	800c7da <USBD_LL_PrepareReceive>

  return USBD_OK;
 800be1c:	2300      	movs	r3, #0
}
 800be1e:	4618      	mov	r0, r3
 800be20:	3710      	adds	r7, #16
 800be22:	46bd      	mov	sp, r7
 800be24:	bd80      	pop	{r7, pc}

0800be26 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800be26:	b580      	push	{r7, lr}
 800be28:	b084      	sub	sp, #16
 800be2a:	af00      	add	r7, sp, #0
 800be2c:	60f8      	str	r0, [r7, #12]
 800be2e:	60b9      	str	r1, [r7, #8]
 800be30:	4613      	mov	r3, r2
 800be32:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800be34:	88fb      	ldrh	r3, [r7, #6]
 800be36:	68ba      	ldr	r2, [r7, #8]
 800be38:	2100      	movs	r1, #0
 800be3a:	68f8      	ldr	r0, [r7, #12]
 800be3c:	f000 fccd 	bl	800c7da <USBD_LL_PrepareReceive>

  return USBD_OK;
 800be40:	2300      	movs	r3, #0
}
 800be42:	4618      	mov	r0, r3
 800be44:	3710      	adds	r7, #16
 800be46:	46bd      	mov	sp, r7
 800be48:	bd80      	pop	{r7, pc}

0800be4a <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800be4a:	b580      	push	{r7, lr}
 800be4c:	b082      	sub	sp, #8
 800be4e:	af00      	add	r7, sp, #0
 800be50:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800be52:	687b      	ldr	r3, [r7, #4]
 800be54:	2204      	movs	r2, #4
 800be56:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800be5a:	2300      	movs	r3, #0
 800be5c:	2200      	movs	r2, #0
 800be5e:	2100      	movs	r1, #0
 800be60:	6878      	ldr	r0, [r7, #4]
 800be62:	f000 fc97 	bl	800c794 <USBD_LL_Transmit>

  return USBD_OK;
 800be66:	2300      	movs	r3, #0
}
 800be68:	4618      	mov	r0, r3
 800be6a:	3708      	adds	r7, #8
 800be6c:	46bd      	mov	sp, r7
 800be6e:	bd80      	pop	{r7, pc}

0800be70 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800be70:	b580      	push	{r7, lr}
 800be72:	b082      	sub	sp, #8
 800be74:	af00      	add	r7, sp, #0
 800be76:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800be78:	687b      	ldr	r3, [r7, #4]
 800be7a:	2205      	movs	r2, #5
 800be7c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800be80:	2300      	movs	r3, #0
 800be82:	2200      	movs	r2, #0
 800be84:	2100      	movs	r1, #0
 800be86:	6878      	ldr	r0, [r7, #4]
 800be88:	f000 fca7 	bl	800c7da <USBD_LL_PrepareReceive>

  return USBD_OK;
 800be8c:	2300      	movs	r3, #0
}
 800be8e:	4618      	mov	r0, r3
 800be90:	3708      	adds	r7, #8
 800be92:	46bd      	mov	sp, r7
 800be94:	bd80      	pop	{r7, pc}
	...

0800be98 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800be98:	b580      	push	{r7, lr}
 800be9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800be9c:	2200      	movs	r2, #0
 800be9e:	4912      	ldr	r1, [pc, #72]	; (800bee8 <MX_USB_DEVICE_Init+0x50>)
 800bea0:	4812      	ldr	r0, [pc, #72]	; (800beec <MX_USB_DEVICE_Init+0x54>)
 800bea2:	f7fe ff26 	bl	800acf2 <USBD_Init>
 800bea6:	4603      	mov	r3, r0
 800bea8:	2b00      	cmp	r3, #0
 800beaa:	d001      	beq.n	800beb0 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800beac:	f7f7 fb32 	bl	8003514 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800beb0:	490f      	ldr	r1, [pc, #60]	; (800bef0 <MX_USB_DEVICE_Init+0x58>)
 800beb2:	480e      	ldr	r0, [pc, #56]	; (800beec <MX_USB_DEVICE_Init+0x54>)
 800beb4:	f7fe ff48 	bl	800ad48 <USBD_RegisterClass>
 800beb8:	4603      	mov	r3, r0
 800beba:	2b00      	cmp	r3, #0
 800bebc:	d001      	beq.n	800bec2 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800bebe:	f7f7 fb29 	bl	8003514 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800bec2:	490c      	ldr	r1, [pc, #48]	; (800bef4 <MX_USB_DEVICE_Init+0x5c>)
 800bec4:	4809      	ldr	r0, [pc, #36]	; (800beec <MX_USB_DEVICE_Init+0x54>)
 800bec6:	f7fe fe79 	bl	800abbc <USBD_CDC_RegisterInterface>
 800beca:	4603      	mov	r3, r0
 800becc:	2b00      	cmp	r3, #0
 800bece:	d001      	beq.n	800bed4 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800bed0:	f7f7 fb20 	bl	8003514 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800bed4:	4805      	ldr	r0, [pc, #20]	; (800beec <MX_USB_DEVICE_Init+0x54>)
 800bed6:	f7fe ff50 	bl	800ad7a <USBD_Start>
 800beda:	4603      	mov	r3, r0
 800bedc:	2b00      	cmp	r3, #0
 800bede:	d001      	beq.n	800bee4 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800bee0:	f7f7 fb18 	bl	8003514 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800bee4:	bf00      	nop
 800bee6:	bd80      	pop	{r7, pc}
 800bee8:	20000138 	.word	0x20000138
 800beec:	200006d8 	.word	0x200006d8
 800bef0:	2000001c 	.word	0x2000001c
 800bef4:	20000120 	.word	0x20000120

0800bef8 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800bef8:	b580      	push	{r7, lr}
 800befa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800befc:	2200      	movs	r2, #0
 800befe:	4905      	ldr	r1, [pc, #20]	; (800bf14 <CDC_Init_FS+0x1c>)
 800bf00:	4805      	ldr	r0, [pc, #20]	; (800bf18 <CDC_Init_FS+0x20>)
 800bf02:	f7fe fe71 	bl	800abe8 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800bf06:	4905      	ldr	r1, [pc, #20]	; (800bf1c <CDC_Init_FS+0x24>)
 800bf08:	4803      	ldr	r0, [pc, #12]	; (800bf18 <CDC_Init_FS+0x20>)
 800bf0a:	f7fe fe86 	bl	800ac1a <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800bf0e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800bf10:	4618      	mov	r0, r3
 800bf12:	bd80      	pop	{r7, pc}
 800bf14:	2000119c 	.word	0x2000119c
 800bf18:	200006d8 	.word	0x200006d8
 800bf1c:	2000099c 	.word	0x2000099c

0800bf20 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800bf20:	b480      	push	{r7}
 800bf22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800bf24:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800bf26:	4618      	mov	r0, r3
 800bf28:	46bd      	mov	sp, r7
 800bf2a:	bc80      	pop	{r7}
 800bf2c:	4770      	bx	lr
	...

0800bf30 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800bf30:	b480      	push	{r7}
 800bf32:	b083      	sub	sp, #12
 800bf34:	af00      	add	r7, sp, #0
 800bf36:	4603      	mov	r3, r0
 800bf38:	6039      	str	r1, [r7, #0]
 800bf3a:	71fb      	strb	r3, [r7, #7]
 800bf3c:	4613      	mov	r3, r2
 800bf3e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800bf40:	79fb      	ldrb	r3, [r7, #7]
 800bf42:	2b23      	cmp	r3, #35	; 0x23
 800bf44:	d85c      	bhi.n	800c000 <CDC_Control_FS+0xd0>
 800bf46:	a201      	add	r2, pc, #4	; (adr r2, 800bf4c <CDC_Control_FS+0x1c>)
 800bf48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bf4c:	0800c001 	.word	0x0800c001
 800bf50:	0800c001 	.word	0x0800c001
 800bf54:	0800c001 	.word	0x0800c001
 800bf58:	0800c001 	.word	0x0800c001
 800bf5c:	0800c001 	.word	0x0800c001
 800bf60:	0800c001 	.word	0x0800c001
 800bf64:	0800c001 	.word	0x0800c001
 800bf68:	0800c001 	.word	0x0800c001
 800bf6c:	0800c001 	.word	0x0800c001
 800bf70:	0800c001 	.word	0x0800c001
 800bf74:	0800c001 	.word	0x0800c001
 800bf78:	0800c001 	.word	0x0800c001
 800bf7c:	0800c001 	.word	0x0800c001
 800bf80:	0800c001 	.word	0x0800c001
 800bf84:	0800c001 	.word	0x0800c001
 800bf88:	0800c001 	.word	0x0800c001
 800bf8c:	0800c001 	.word	0x0800c001
 800bf90:	0800c001 	.word	0x0800c001
 800bf94:	0800c001 	.word	0x0800c001
 800bf98:	0800c001 	.word	0x0800c001
 800bf9c:	0800c001 	.word	0x0800c001
 800bfa0:	0800c001 	.word	0x0800c001
 800bfa4:	0800c001 	.word	0x0800c001
 800bfa8:	0800c001 	.word	0x0800c001
 800bfac:	0800c001 	.word	0x0800c001
 800bfb0:	0800c001 	.word	0x0800c001
 800bfb4:	0800c001 	.word	0x0800c001
 800bfb8:	0800c001 	.word	0x0800c001
 800bfbc:	0800c001 	.word	0x0800c001
 800bfc0:	0800c001 	.word	0x0800c001
 800bfc4:	0800c001 	.word	0x0800c001
 800bfc8:	0800c001 	.word	0x0800c001
 800bfcc:	0800bfdd 	.word	0x0800bfdd
 800bfd0:	0800bfef 	.word	0x0800bfef
 800bfd4:	0800c001 	.word	0x0800c001
 800bfd8:	0800c001 	.word	0x0800c001
    static uint8_t lineCoding[7] // 115200bps, 1stop, no parity, 8bit

    = { 0x00, 0xC2, 0x01, 0x00, 0x00, 0x00, 0x08 };

    case CDC_SET_LINE_CODING:
      memcpy(lineCoding, pbuf, sizeof(lineCoding));
 800bfdc:	4b0c      	ldr	r3, [pc, #48]	; (800c010 <CDC_Control_FS+0xe0>)
 800bfde:	683a      	ldr	r2, [r7, #0]
 800bfe0:	6810      	ldr	r0, [r2, #0]
 800bfe2:	6018      	str	r0, [r3, #0]
 800bfe4:	8891      	ldrh	r1, [r2, #4]
 800bfe6:	7992      	ldrb	r2, [r2, #6]
 800bfe8:	8099      	strh	r1, [r3, #4]
 800bfea:	719a      	strb	r2, [r3, #6]
    break;
 800bfec:	e009      	b.n	800c002 <CDC_Control_FS+0xd2>

    case CDC_GET_LINE_CODING:
      memcpy(pbuf, lineCoding, sizeof(lineCoding));
 800bfee:	683b      	ldr	r3, [r7, #0]
 800bff0:	4a07      	ldr	r2, [pc, #28]	; (800c010 <CDC_Control_FS+0xe0>)
 800bff2:	6810      	ldr	r0, [r2, #0]
 800bff4:	6018      	str	r0, [r3, #0]
 800bff6:	8891      	ldrh	r1, [r2, #4]
 800bff8:	7992      	ldrb	r2, [r2, #6]
 800bffa:	8099      	strh	r1, [r3, #4]
 800bffc:	719a      	strb	r2, [r3, #6]
    break;
 800bffe:	e000      	b.n	800c002 <CDC_Control_FS+0xd2>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800c000:	bf00      	nop
  }

  return (USBD_OK);
 800c002:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800c004:	4618      	mov	r0, r3
 800c006:	370c      	adds	r7, #12
 800c008:	46bd      	mov	sp, r7
 800c00a:	bc80      	pop	{r7}
 800c00c:	4770      	bx	lr
 800c00e:	bf00      	nop
 800c010:	20000130 	.word	0x20000130

0800c014 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800c014:	b580      	push	{r7, lr}
 800c016:	b082      	sub	sp, #8
 800c018:	af00      	add	r7, sp, #0
 800c01a:	6078      	str	r0, [r7, #4]
 800c01c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800c01e:	6879      	ldr	r1, [r7, #4]
 800c020:	4805      	ldr	r0, [pc, #20]	; (800c038 <CDC_Receive_FS+0x24>)
 800c022:	f7fe fdfa 	bl	800ac1a <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800c026:	4804      	ldr	r0, [pc, #16]	; (800c038 <CDC_Receive_FS+0x24>)
 800c028:	f7fe fe39 	bl	800ac9e <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800c02c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800c02e:	4618      	mov	r0, r3
 800c030:	3708      	adds	r7, #8
 800c032:	46bd      	mov	sp, r7
 800c034:	bd80      	pop	{r7, pc}
 800c036:	bf00      	nop
 800c038:	200006d8 	.word	0x200006d8

0800c03c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800c03c:	b580      	push	{r7, lr}
 800c03e:	b084      	sub	sp, #16
 800c040:	af00      	add	r7, sp, #0
 800c042:	6078      	str	r0, [r7, #4]
 800c044:	460b      	mov	r3, r1
 800c046:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800c048:	2300      	movs	r3, #0
 800c04a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800c04c:	4b0d      	ldr	r3, [pc, #52]	; (800c084 <CDC_Transmit_FS+0x48>)
 800c04e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c052:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800c054:	68bb      	ldr	r3, [r7, #8]
 800c056:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800c05a:	2b00      	cmp	r3, #0
 800c05c:	d001      	beq.n	800c062 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800c05e:	2301      	movs	r3, #1
 800c060:	e00b      	b.n	800c07a <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800c062:	887b      	ldrh	r3, [r7, #2]
 800c064:	461a      	mov	r2, r3
 800c066:	6879      	ldr	r1, [r7, #4]
 800c068:	4806      	ldr	r0, [pc, #24]	; (800c084 <CDC_Transmit_FS+0x48>)
 800c06a:	f7fe fdbd 	bl	800abe8 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800c06e:	4805      	ldr	r0, [pc, #20]	; (800c084 <CDC_Transmit_FS+0x48>)
 800c070:	f7fe fde6 	bl	800ac40 <USBD_CDC_TransmitPacket>
 800c074:	4603      	mov	r3, r0
 800c076:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800c078:	7bfb      	ldrb	r3, [r7, #15]
}
 800c07a:	4618      	mov	r0, r3
 800c07c:	3710      	adds	r7, #16
 800c07e:	46bd      	mov	sp, r7
 800c080:	bd80      	pop	{r7, pc}
 800c082:	bf00      	nop
 800c084:	200006d8 	.word	0x200006d8

0800c088 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c088:	b480      	push	{r7}
 800c08a:	b083      	sub	sp, #12
 800c08c:	af00      	add	r7, sp, #0
 800c08e:	4603      	mov	r3, r0
 800c090:	6039      	str	r1, [r7, #0]
 800c092:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800c094:	683b      	ldr	r3, [r7, #0]
 800c096:	2212      	movs	r2, #18
 800c098:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800c09a:	4b03      	ldr	r3, [pc, #12]	; (800c0a8 <USBD_FS_DeviceDescriptor+0x20>)
}
 800c09c:	4618      	mov	r0, r3
 800c09e:	370c      	adds	r7, #12
 800c0a0:	46bd      	mov	sp, r7
 800c0a2:	bc80      	pop	{r7}
 800c0a4:	4770      	bx	lr
 800c0a6:	bf00      	nop
 800c0a8:	20000154 	.word	0x20000154

0800c0ac <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c0ac:	b480      	push	{r7}
 800c0ae:	b083      	sub	sp, #12
 800c0b0:	af00      	add	r7, sp, #0
 800c0b2:	4603      	mov	r3, r0
 800c0b4:	6039      	str	r1, [r7, #0]
 800c0b6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800c0b8:	683b      	ldr	r3, [r7, #0]
 800c0ba:	2204      	movs	r2, #4
 800c0bc:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800c0be:	4b03      	ldr	r3, [pc, #12]	; (800c0cc <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800c0c0:	4618      	mov	r0, r3
 800c0c2:	370c      	adds	r7, #12
 800c0c4:	46bd      	mov	sp, r7
 800c0c6:	bc80      	pop	{r7}
 800c0c8:	4770      	bx	lr
 800c0ca:	bf00      	nop
 800c0cc:	20000168 	.word	0x20000168

0800c0d0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c0d0:	b580      	push	{r7, lr}
 800c0d2:	b082      	sub	sp, #8
 800c0d4:	af00      	add	r7, sp, #0
 800c0d6:	4603      	mov	r3, r0
 800c0d8:	6039      	str	r1, [r7, #0]
 800c0da:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800c0dc:	79fb      	ldrb	r3, [r7, #7]
 800c0de:	2b00      	cmp	r3, #0
 800c0e0:	d105      	bne.n	800c0ee <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800c0e2:	683a      	ldr	r2, [r7, #0]
 800c0e4:	4907      	ldr	r1, [pc, #28]	; (800c104 <USBD_FS_ProductStrDescriptor+0x34>)
 800c0e6:	4808      	ldr	r0, [pc, #32]	; (800c108 <USBD_FS_ProductStrDescriptor+0x38>)
 800c0e8:	f7ff fdf8 	bl	800bcdc <USBD_GetString>
 800c0ec:	e004      	b.n	800c0f8 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800c0ee:	683a      	ldr	r2, [r7, #0]
 800c0f0:	4904      	ldr	r1, [pc, #16]	; (800c104 <USBD_FS_ProductStrDescriptor+0x34>)
 800c0f2:	4805      	ldr	r0, [pc, #20]	; (800c108 <USBD_FS_ProductStrDescriptor+0x38>)
 800c0f4:	f7ff fdf2 	bl	800bcdc <USBD_GetString>
  }
  return USBD_StrDesc;
 800c0f8:	4b02      	ldr	r3, [pc, #8]	; (800c104 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800c0fa:	4618      	mov	r0, r3
 800c0fc:	3708      	adds	r7, #8
 800c0fe:	46bd      	mov	sp, r7
 800c100:	bd80      	pop	{r7, pc}
 800c102:	bf00      	nop
 800c104:	2000199c 	.word	0x2000199c
 800c108:	0800e8ac 	.word	0x0800e8ac

0800c10c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c10c:	b580      	push	{r7, lr}
 800c10e:	b082      	sub	sp, #8
 800c110:	af00      	add	r7, sp, #0
 800c112:	4603      	mov	r3, r0
 800c114:	6039      	str	r1, [r7, #0]
 800c116:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800c118:	683a      	ldr	r2, [r7, #0]
 800c11a:	4904      	ldr	r1, [pc, #16]	; (800c12c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800c11c:	4804      	ldr	r0, [pc, #16]	; (800c130 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800c11e:	f7ff fddd 	bl	800bcdc <USBD_GetString>
  return USBD_StrDesc;
 800c122:	4b02      	ldr	r3, [pc, #8]	; (800c12c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800c124:	4618      	mov	r0, r3
 800c126:	3708      	adds	r7, #8
 800c128:	46bd      	mov	sp, r7
 800c12a:	bd80      	pop	{r7, pc}
 800c12c:	2000199c 	.word	0x2000199c
 800c130:	0800e8c4 	.word	0x0800e8c4

0800c134 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c134:	b580      	push	{r7, lr}
 800c136:	b082      	sub	sp, #8
 800c138:	af00      	add	r7, sp, #0
 800c13a:	4603      	mov	r3, r0
 800c13c:	6039      	str	r1, [r7, #0]
 800c13e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800c140:	683b      	ldr	r3, [r7, #0]
 800c142:	221a      	movs	r2, #26
 800c144:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800c146:	f000 f843 	bl	800c1d0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800c14a:	4b02      	ldr	r3, [pc, #8]	; (800c154 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800c14c:	4618      	mov	r0, r3
 800c14e:	3708      	adds	r7, #8
 800c150:	46bd      	mov	sp, r7
 800c152:	bd80      	pop	{r7, pc}
 800c154:	2000016c 	.word	0x2000016c

0800c158 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c158:	b580      	push	{r7, lr}
 800c15a:	b082      	sub	sp, #8
 800c15c:	af00      	add	r7, sp, #0
 800c15e:	4603      	mov	r3, r0
 800c160:	6039      	str	r1, [r7, #0]
 800c162:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800c164:	79fb      	ldrb	r3, [r7, #7]
 800c166:	2b00      	cmp	r3, #0
 800c168:	d105      	bne.n	800c176 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800c16a:	683a      	ldr	r2, [r7, #0]
 800c16c:	4907      	ldr	r1, [pc, #28]	; (800c18c <USBD_FS_ConfigStrDescriptor+0x34>)
 800c16e:	4808      	ldr	r0, [pc, #32]	; (800c190 <USBD_FS_ConfigStrDescriptor+0x38>)
 800c170:	f7ff fdb4 	bl	800bcdc <USBD_GetString>
 800c174:	e004      	b.n	800c180 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800c176:	683a      	ldr	r2, [r7, #0]
 800c178:	4904      	ldr	r1, [pc, #16]	; (800c18c <USBD_FS_ConfigStrDescriptor+0x34>)
 800c17a:	4805      	ldr	r0, [pc, #20]	; (800c190 <USBD_FS_ConfigStrDescriptor+0x38>)
 800c17c:	f7ff fdae 	bl	800bcdc <USBD_GetString>
  }
  return USBD_StrDesc;
 800c180:	4b02      	ldr	r3, [pc, #8]	; (800c18c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800c182:	4618      	mov	r0, r3
 800c184:	3708      	adds	r7, #8
 800c186:	46bd      	mov	sp, r7
 800c188:	bd80      	pop	{r7, pc}
 800c18a:	bf00      	nop
 800c18c:	2000199c 	.word	0x2000199c
 800c190:	0800e8d8 	.word	0x0800e8d8

0800c194 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c194:	b580      	push	{r7, lr}
 800c196:	b082      	sub	sp, #8
 800c198:	af00      	add	r7, sp, #0
 800c19a:	4603      	mov	r3, r0
 800c19c:	6039      	str	r1, [r7, #0]
 800c19e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800c1a0:	79fb      	ldrb	r3, [r7, #7]
 800c1a2:	2b00      	cmp	r3, #0
 800c1a4:	d105      	bne.n	800c1b2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800c1a6:	683a      	ldr	r2, [r7, #0]
 800c1a8:	4907      	ldr	r1, [pc, #28]	; (800c1c8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800c1aa:	4808      	ldr	r0, [pc, #32]	; (800c1cc <USBD_FS_InterfaceStrDescriptor+0x38>)
 800c1ac:	f7ff fd96 	bl	800bcdc <USBD_GetString>
 800c1b0:	e004      	b.n	800c1bc <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800c1b2:	683a      	ldr	r2, [r7, #0]
 800c1b4:	4904      	ldr	r1, [pc, #16]	; (800c1c8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800c1b6:	4805      	ldr	r0, [pc, #20]	; (800c1cc <USBD_FS_InterfaceStrDescriptor+0x38>)
 800c1b8:	f7ff fd90 	bl	800bcdc <USBD_GetString>
  }
  return USBD_StrDesc;
 800c1bc:	4b02      	ldr	r3, [pc, #8]	; (800c1c8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800c1be:	4618      	mov	r0, r3
 800c1c0:	3708      	adds	r7, #8
 800c1c2:	46bd      	mov	sp, r7
 800c1c4:	bd80      	pop	{r7, pc}
 800c1c6:	bf00      	nop
 800c1c8:	2000199c 	.word	0x2000199c
 800c1cc:	0800e8e4 	.word	0x0800e8e4

0800c1d0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800c1d0:	b580      	push	{r7, lr}
 800c1d2:	b084      	sub	sp, #16
 800c1d4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800c1d6:	4b0f      	ldr	r3, [pc, #60]	; (800c214 <Get_SerialNum+0x44>)
 800c1d8:	681b      	ldr	r3, [r3, #0]
 800c1da:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800c1dc:	4b0e      	ldr	r3, [pc, #56]	; (800c218 <Get_SerialNum+0x48>)
 800c1de:	681b      	ldr	r3, [r3, #0]
 800c1e0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800c1e2:	4b0e      	ldr	r3, [pc, #56]	; (800c21c <Get_SerialNum+0x4c>)
 800c1e4:	681b      	ldr	r3, [r3, #0]
 800c1e6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800c1e8:	68fa      	ldr	r2, [r7, #12]
 800c1ea:	687b      	ldr	r3, [r7, #4]
 800c1ec:	4413      	add	r3, r2
 800c1ee:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800c1f0:	68fb      	ldr	r3, [r7, #12]
 800c1f2:	2b00      	cmp	r3, #0
 800c1f4:	d009      	beq.n	800c20a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800c1f6:	2208      	movs	r2, #8
 800c1f8:	4909      	ldr	r1, [pc, #36]	; (800c220 <Get_SerialNum+0x50>)
 800c1fa:	68f8      	ldr	r0, [r7, #12]
 800c1fc:	f000 f814 	bl	800c228 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800c200:	2204      	movs	r2, #4
 800c202:	4908      	ldr	r1, [pc, #32]	; (800c224 <Get_SerialNum+0x54>)
 800c204:	68b8      	ldr	r0, [r7, #8]
 800c206:	f000 f80f 	bl	800c228 <IntToUnicode>
  }
}
 800c20a:	bf00      	nop
 800c20c:	3710      	adds	r7, #16
 800c20e:	46bd      	mov	sp, r7
 800c210:	bd80      	pop	{r7, pc}
 800c212:	bf00      	nop
 800c214:	1fff7a10 	.word	0x1fff7a10
 800c218:	1fff7a14 	.word	0x1fff7a14
 800c21c:	1fff7a18 	.word	0x1fff7a18
 800c220:	2000016e 	.word	0x2000016e
 800c224:	2000017e 	.word	0x2000017e

0800c228 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800c228:	b480      	push	{r7}
 800c22a:	b087      	sub	sp, #28
 800c22c:	af00      	add	r7, sp, #0
 800c22e:	60f8      	str	r0, [r7, #12]
 800c230:	60b9      	str	r1, [r7, #8]
 800c232:	4613      	mov	r3, r2
 800c234:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800c236:	2300      	movs	r3, #0
 800c238:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800c23a:	2300      	movs	r3, #0
 800c23c:	75fb      	strb	r3, [r7, #23]
 800c23e:	e027      	b.n	800c290 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800c240:	68fb      	ldr	r3, [r7, #12]
 800c242:	0f1b      	lsrs	r3, r3, #28
 800c244:	2b09      	cmp	r3, #9
 800c246:	d80b      	bhi.n	800c260 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800c248:	68fb      	ldr	r3, [r7, #12]
 800c24a:	0f1b      	lsrs	r3, r3, #28
 800c24c:	b2da      	uxtb	r2, r3
 800c24e:	7dfb      	ldrb	r3, [r7, #23]
 800c250:	005b      	lsls	r3, r3, #1
 800c252:	4619      	mov	r1, r3
 800c254:	68bb      	ldr	r3, [r7, #8]
 800c256:	440b      	add	r3, r1
 800c258:	3230      	adds	r2, #48	; 0x30
 800c25a:	b2d2      	uxtb	r2, r2
 800c25c:	701a      	strb	r2, [r3, #0]
 800c25e:	e00a      	b.n	800c276 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800c260:	68fb      	ldr	r3, [r7, #12]
 800c262:	0f1b      	lsrs	r3, r3, #28
 800c264:	b2da      	uxtb	r2, r3
 800c266:	7dfb      	ldrb	r3, [r7, #23]
 800c268:	005b      	lsls	r3, r3, #1
 800c26a:	4619      	mov	r1, r3
 800c26c:	68bb      	ldr	r3, [r7, #8]
 800c26e:	440b      	add	r3, r1
 800c270:	3237      	adds	r2, #55	; 0x37
 800c272:	b2d2      	uxtb	r2, r2
 800c274:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800c276:	68fb      	ldr	r3, [r7, #12]
 800c278:	011b      	lsls	r3, r3, #4
 800c27a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800c27c:	7dfb      	ldrb	r3, [r7, #23]
 800c27e:	005b      	lsls	r3, r3, #1
 800c280:	3301      	adds	r3, #1
 800c282:	68ba      	ldr	r2, [r7, #8]
 800c284:	4413      	add	r3, r2
 800c286:	2200      	movs	r2, #0
 800c288:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800c28a:	7dfb      	ldrb	r3, [r7, #23]
 800c28c:	3301      	adds	r3, #1
 800c28e:	75fb      	strb	r3, [r7, #23]
 800c290:	7dfa      	ldrb	r2, [r7, #23]
 800c292:	79fb      	ldrb	r3, [r7, #7]
 800c294:	429a      	cmp	r2, r3
 800c296:	d3d3      	bcc.n	800c240 <IntToUnicode+0x18>
  }
}
 800c298:	bf00      	nop
 800c29a:	bf00      	nop
 800c29c:	371c      	adds	r7, #28
 800c29e:	46bd      	mov	sp, r7
 800c2a0:	bc80      	pop	{r7}
 800c2a2:	4770      	bx	lr

0800c2a4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800c2a4:	b580      	push	{r7, lr}
 800c2a6:	b08a      	sub	sp, #40	; 0x28
 800c2a8:	af00      	add	r7, sp, #0
 800c2aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c2ac:	f107 0314 	add.w	r3, r7, #20
 800c2b0:	2200      	movs	r2, #0
 800c2b2:	601a      	str	r2, [r3, #0]
 800c2b4:	605a      	str	r2, [r3, #4]
 800c2b6:	609a      	str	r2, [r3, #8]
 800c2b8:	60da      	str	r2, [r3, #12]
 800c2ba:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800c2bc:	687b      	ldr	r3, [r7, #4]
 800c2be:	681b      	ldr	r3, [r3, #0]
 800c2c0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800c2c4:	d13a      	bne.n	800c33c <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800c2c6:	2300      	movs	r3, #0
 800c2c8:	613b      	str	r3, [r7, #16]
 800c2ca:	4b1e      	ldr	r3, [pc, #120]	; (800c344 <HAL_PCD_MspInit+0xa0>)
 800c2cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c2ce:	4a1d      	ldr	r2, [pc, #116]	; (800c344 <HAL_PCD_MspInit+0xa0>)
 800c2d0:	f043 0301 	orr.w	r3, r3, #1
 800c2d4:	6313      	str	r3, [r2, #48]	; 0x30
 800c2d6:	4b1b      	ldr	r3, [pc, #108]	; (800c344 <HAL_PCD_MspInit+0xa0>)
 800c2d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c2da:	f003 0301 	and.w	r3, r3, #1
 800c2de:	613b      	str	r3, [r7, #16]
 800c2e0:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800c2e2:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800c2e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c2e8:	2302      	movs	r3, #2
 800c2ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c2ec:	2300      	movs	r3, #0
 800c2ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c2f0:	2303      	movs	r3, #3
 800c2f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800c2f4:	230a      	movs	r3, #10
 800c2f6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c2f8:	f107 0314 	add.w	r3, r7, #20
 800c2fc:	4619      	mov	r1, r3
 800c2fe:	4812      	ldr	r0, [pc, #72]	; (800c348 <HAL_PCD_MspInit+0xa4>)
 800c300:	f7f9 f83e 	bl	8005380 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800c304:	4b0f      	ldr	r3, [pc, #60]	; (800c344 <HAL_PCD_MspInit+0xa0>)
 800c306:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c308:	4a0e      	ldr	r2, [pc, #56]	; (800c344 <HAL_PCD_MspInit+0xa0>)
 800c30a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c30e:	6353      	str	r3, [r2, #52]	; 0x34
 800c310:	2300      	movs	r3, #0
 800c312:	60fb      	str	r3, [r7, #12]
 800c314:	4b0b      	ldr	r3, [pc, #44]	; (800c344 <HAL_PCD_MspInit+0xa0>)
 800c316:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c318:	4a0a      	ldr	r2, [pc, #40]	; (800c344 <HAL_PCD_MspInit+0xa0>)
 800c31a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800c31e:	6453      	str	r3, [r2, #68]	; 0x44
 800c320:	4b08      	ldr	r3, [pc, #32]	; (800c344 <HAL_PCD_MspInit+0xa0>)
 800c322:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c324:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c328:	60fb      	str	r3, [r7, #12]
 800c32a:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800c32c:	2200      	movs	r2, #0
 800c32e:	2100      	movs	r1, #0
 800c330:	2043      	movs	r0, #67	; 0x43
 800c332:	f7f8 fcfa 	bl	8004d2a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800c336:	2043      	movs	r0, #67	; 0x43
 800c338:	f7f8 fd13 	bl	8004d62 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800c33c:	bf00      	nop
 800c33e:	3728      	adds	r7, #40	; 0x28
 800c340:	46bd      	mov	sp, r7
 800c342:	bd80      	pop	{r7, pc}
 800c344:	40023800 	.word	0x40023800
 800c348:	40020000 	.word	0x40020000

0800c34c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c34c:	b580      	push	{r7, lr}
 800c34e:	b082      	sub	sp, #8
 800c350:	af00      	add	r7, sp, #0
 800c352:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800c354:	687b      	ldr	r3, [r7, #4]
 800c356:	f8d3 23fc 	ldr.w	r2, [r3, #1020]	; 0x3fc
 800c35a:	687b      	ldr	r3, [r7, #4]
 800c35c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800c360:	4619      	mov	r1, r3
 800c362:	4610      	mov	r0, r2
 800c364:	f7fe fd51 	bl	800ae0a <USBD_LL_SetupStage>
}
 800c368:	bf00      	nop
 800c36a:	3708      	adds	r7, #8
 800c36c:	46bd      	mov	sp, r7
 800c36e:	bd80      	pop	{r7, pc}

0800c370 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c370:	b580      	push	{r7, lr}
 800c372:	b082      	sub	sp, #8
 800c374:	af00      	add	r7, sp, #0
 800c376:	6078      	str	r0, [r7, #4]
 800c378:	460b      	mov	r3, r1
 800c37a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800c37c:	687b      	ldr	r3, [r7, #4]
 800c37e:	f8d3 03fc 	ldr.w	r0, [r3, #1020]	; 0x3fc
 800c382:	78fa      	ldrb	r2, [r7, #3]
 800c384:	6879      	ldr	r1, [r7, #4]
 800c386:	4613      	mov	r3, r2
 800c388:	00db      	lsls	r3, r3, #3
 800c38a:	1a9b      	subs	r3, r3, r2
 800c38c:	009b      	lsls	r3, r3, #2
 800c38e:	440b      	add	r3, r1
 800c390:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800c394:	681a      	ldr	r2, [r3, #0]
 800c396:	78fb      	ldrb	r3, [r7, #3]
 800c398:	4619      	mov	r1, r3
 800c39a:	f7fe fd83 	bl	800aea4 <USBD_LL_DataOutStage>
}
 800c39e:	bf00      	nop
 800c3a0:	3708      	adds	r7, #8
 800c3a2:	46bd      	mov	sp, r7
 800c3a4:	bd80      	pop	{r7, pc}

0800c3a6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c3a6:	b580      	push	{r7, lr}
 800c3a8:	b082      	sub	sp, #8
 800c3aa:	af00      	add	r7, sp, #0
 800c3ac:	6078      	str	r0, [r7, #4]
 800c3ae:	460b      	mov	r3, r1
 800c3b0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800c3b2:	687b      	ldr	r3, [r7, #4]
 800c3b4:	f8d3 03fc 	ldr.w	r0, [r3, #1020]	; 0x3fc
 800c3b8:	78fa      	ldrb	r2, [r7, #3]
 800c3ba:	6879      	ldr	r1, [r7, #4]
 800c3bc:	4613      	mov	r3, r2
 800c3be:	00db      	lsls	r3, r3, #3
 800c3c0:	1a9b      	subs	r3, r3, r2
 800c3c2:	009b      	lsls	r3, r3, #2
 800c3c4:	440b      	add	r3, r1
 800c3c6:	3348      	adds	r3, #72	; 0x48
 800c3c8:	681a      	ldr	r2, [r3, #0]
 800c3ca:	78fb      	ldrb	r3, [r7, #3]
 800c3cc:	4619      	mov	r1, r3
 800c3ce:	f7fe fdda 	bl	800af86 <USBD_LL_DataInStage>
}
 800c3d2:	bf00      	nop
 800c3d4:	3708      	adds	r7, #8
 800c3d6:	46bd      	mov	sp, r7
 800c3d8:	bd80      	pop	{r7, pc}

0800c3da <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c3da:	b580      	push	{r7, lr}
 800c3dc:	b082      	sub	sp, #8
 800c3de:	af00      	add	r7, sp, #0
 800c3e0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800c3e2:	687b      	ldr	r3, [r7, #4]
 800c3e4:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 800c3e8:	4618      	mov	r0, r3
 800c3ea:	f7fe feea 	bl	800b1c2 <USBD_LL_SOF>
}
 800c3ee:	bf00      	nop
 800c3f0:	3708      	adds	r7, #8
 800c3f2:	46bd      	mov	sp, r7
 800c3f4:	bd80      	pop	{r7, pc}

0800c3f6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c3f6:	b580      	push	{r7, lr}
 800c3f8:	b084      	sub	sp, #16
 800c3fa:	af00      	add	r7, sp, #0
 800c3fc:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800c3fe:	2301      	movs	r3, #1
 800c400:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800c402:	687b      	ldr	r3, [r7, #4]
 800c404:	68db      	ldr	r3, [r3, #12]
 800c406:	2b00      	cmp	r3, #0
 800c408:	d102      	bne.n	800c410 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800c40a:	2300      	movs	r3, #0
 800c40c:	73fb      	strb	r3, [r7, #15]
 800c40e:	e008      	b.n	800c422 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800c410:	687b      	ldr	r3, [r7, #4]
 800c412:	68db      	ldr	r3, [r3, #12]
 800c414:	2b02      	cmp	r3, #2
 800c416:	d102      	bne.n	800c41e <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800c418:	2301      	movs	r3, #1
 800c41a:	73fb      	strb	r3, [r7, #15]
 800c41c:	e001      	b.n	800c422 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800c41e:	f7f7 f879 	bl	8003514 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800c422:	687b      	ldr	r3, [r7, #4]
 800c424:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 800c428:	7bfa      	ldrb	r2, [r7, #15]
 800c42a:	4611      	mov	r1, r2
 800c42c:	4618      	mov	r0, r3
 800c42e:	f7fe fe90 	bl	800b152 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800c432:	687b      	ldr	r3, [r7, #4]
 800c434:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 800c438:	4618      	mov	r0, r3
 800c43a:	f7fe fe49 	bl	800b0d0 <USBD_LL_Reset>
}
 800c43e:	bf00      	nop
 800c440:	3710      	adds	r7, #16
 800c442:	46bd      	mov	sp, r7
 800c444:	bd80      	pop	{r7, pc}
	...

0800c448 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c448:	b580      	push	{r7, lr}
 800c44a:	b082      	sub	sp, #8
 800c44c:	af00      	add	r7, sp, #0
 800c44e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800c450:	687b      	ldr	r3, [r7, #4]
 800c452:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 800c456:	4618      	mov	r0, r3
 800c458:	f7fe fe8a 	bl	800b170 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800c45c:	687b      	ldr	r3, [r7, #4]
 800c45e:	681b      	ldr	r3, [r3, #0]
 800c460:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800c464:	681b      	ldr	r3, [r3, #0]
 800c466:	687a      	ldr	r2, [r7, #4]
 800c468:	6812      	ldr	r2, [r2, #0]
 800c46a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800c46e:	f043 0301 	orr.w	r3, r3, #1
 800c472:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800c474:	687b      	ldr	r3, [r7, #4]
 800c476:	6a1b      	ldr	r3, [r3, #32]
 800c478:	2b00      	cmp	r3, #0
 800c47a:	d005      	beq.n	800c488 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c47c:	4b04      	ldr	r3, [pc, #16]	; (800c490 <HAL_PCD_SuspendCallback+0x48>)
 800c47e:	691b      	ldr	r3, [r3, #16]
 800c480:	4a03      	ldr	r2, [pc, #12]	; (800c490 <HAL_PCD_SuspendCallback+0x48>)
 800c482:	f043 0306 	orr.w	r3, r3, #6
 800c486:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800c488:	bf00      	nop
 800c48a:	3708      	adds	r7, #8
 800c48c:	46bd      	mov	sp, r7
 800c48e:	bd80      	pop	{r7, pc}
 800c490:	e000ed00 	.word	0xe000ed00

0800c494 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c494:	b580      	push	{r7, lr}
 800c496:	b082      	sub	sp, #8
 800c498:	af00      	add	r7, sp, #0
 800c49a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800c49c:	687b      	ldr	r3, [r7, #4]
 800c49e:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 800c4a2:	4618      	mov	r0, r3
 800c4a4:	f7fe fe78 	bl	800b198 <USBD_LL_Resume>
}
 800c4a8:	bf00      	nop
 800c4aa:	3708      	adds	r7, #8
 800c4ac:	46bd      	mov	sp, r7
 800c4ae:	bd80      	pop	{r7, pc}

0800c4b0 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c4b0:	b580      	push	{r7, lr}
 800c4b2:	b082      	sub	sp, #8
 800c4b4:	af00      	add	r7, sp, #0
 800c4b6:	6078      	str	r0, [r7, #4]
 800c4b8:	460b      	mov	r3, r1
 800c4ba:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800c4bc:	687b      	ldr	r3, [r7, #4]
 800c4be:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 800c4c2:	78fa      	ldrb	r2, [r7, #3]
 800c4c4:	4611      	mov	r1, r2
 800c4c6:	4618      	mov	r0, r3
 800c4c8:	f7fe fea1 	bl	800b20e <USBD_LL_IsoOUTIncomplete>
}
 800c4cc:	bf00      	nop
 800c4ce:	3708      	adds	r7, #8
 800c4d0:	46bd      	mov	sp, r7
 800c4d2:	bd80      	pop	{r7, pc}

0800c4d4 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c4d4:	b580      	push	{r7, lr}
 800c4d6:	b082      	sub	sp, #8
 800c4d8:	af00      	add	r7, sp, #0
 800c4da:	6078      	str	r0, [r7, #4]
 800c4dc:	460b      	mov	r3, r1
 800c4de:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800c4e0:	687b      	ldr	r3, [r7, #4]
 800c4e2:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 800c4e6:	78fa      	ldrb	r2, [r7, #3]
 800c4e8:	4611      	mov	r1, r2
 800c4ea:	4618      	mov	r0, r3
 800c4ec:	f7fe fe83 	bl	800b1f6 <USBD_LL_IsoINIncomplete>
}
 800c4f0:	bf00      	nop
 800c4f2:	3708      	adds	r7, #8
 800c4f4:	46bd      	mov	sp, r7
 800c4f6:	bd80      	pop	{r7, pc}

0800c4f8 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c4f8:	b580      	push	{r7, lr}
 800c4fa:	b082      	sub	sp, #8
 800c4fc:	af00      	add	r7, sp, #0
 800c4fe:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800c500:	687b      	ldr	r3, [r7, #4]
 800c502:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 800c506:	4618      	mov	r0, r3
 800c508:	f7fe fe8d 	bl	800b226 <USBD_LL_DevConnected>
}
 800c50c:	bf00      	nop
 800c50e:	3708      	adds	r7, #8
 800c510:	46bd      	mov	sp, r7
 800c512:	bd80      	pop	{r7, pc}

0800c514 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c514:	b580      	push	{r7, lr}
 800c516:	b082      	sub	sp, #8
 800c518:	af00      	add	r7, sp, #0
 800c51a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800c51c:	687b      	ldr	r3, [r7, #4]
 800c51e:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 800c522:	4618      	mov	r0, r3
 800c524:	f7fe fe89 	bl	800b23a <USBD_LL_DevDisconnected>
}
 800c528:	bf00      	nop
 800c52a:	3708      	adds	r7, #8
 800c52c:	46bd      	mov	sp, r7
 800c52e:	bd80      	pop	{r7, pc}

0800c530 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800c530:	b580      	push	{r7, lr}
 800c532:	b082      	sub	sp, #8
 800c534:	af00      	add	r7, sp, #0
 800c536:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800c538:	687b      	ldr	r3, [r7, #4]
 800c53a:	781b      	ldrb	r3, [r3, #0]
 800c53c:	2b00      	cmp	r3, #0
 800c53e:	d139      	bne.n	800c5b4 <USBD_LL_Init+0x84>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800c540:	4a1f      	ldr	r2, [pc, #124]	; (800c5c0 <USBD_LL_Init+0x90>)
 800c542:	687b      	ldr	r3, [r7, #4]
 800c544:	f8c2 33fc 	str.w	r3, [r2, #1020]	; 0x3fc
  pdev->pData = &hpcd_USB_OTG_FS;
 800c548:	687b      	ldr	r3, [r7, #4]
 800c54a:	4a1d      	ldr	r2, [pc, #116]	; (800c5c0 <USBD_LL_Init+0x90>)
 800c54c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800c550:	4b1b      	ldr	r3, [pc, #108]	; (800c5c0 <USBD_LL_Init+0x90>)
 800c552:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800c556:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800c558:	4b19      	ldr	r3, [pc, #100]	; (800c5c0 <USBD_LL_Init+0x90>)
 800c55a:	2204      	movs	r2, #4
 800c55c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800c55e:	4b18      	ldr	r3, [pc, #96]	; (800c5c0 <USBD_LL_Init+0x90>)
 800c560:	2202      	movs	r2, #2
 800c562:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800c564:	4b16      	ldr	r3, [pc, #88]	; (800c5c0 <USBD_LL_Init+0x90>)
 800c566:	2200      	movs	r2, #0
 800c568:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800c56a:	4b15      	ldr	r3, [pc, #84]	; (800c5c0 <USBD_LL_Init+0x90>)
 800c56c:	2202      	movs	r2, #2
 800c56e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800c570:	4b13      	ldr	r3, [pc, #76]	; (800c5c0 <USBD_LL_Init+0x90>)
 800c572:	2200      	movs	r2, #0
 800c574:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800c576:	4b12      	ldr	r3, [pc, #72]	; (800c5c0 <USBD_LL_Init+0x90>)
 800c578:	2200      	movs	r2, #0
 800c57a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800c57c:	4b10      	ldr	r3, [pc, #64]	; (800c5c0 <USBD_LL_Init+0x90>)
 800c57e:	2200      	movs	r2, #0
 800c580:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800c582:	4b0f      	ldr	r3, [pc, #60]	; (800c5c0 <USBD_LL_Init+0x90>)
 800c584:	2200      	movs	r2, #0
 800c586:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800c588:	480d      	ldr	r0, [pc, #52]	; (800c5c0 <USBD_LL_Init+0x90>)
 800c58a:	f7fa f89f 	bl	80066cc <HAL_PCD_Init>
 800c58e:	4603      	mov	r3, r0
 800c590:	2b00      	cmp	r3, #0
 800c592:	d001      	beq.n	800c598 <USBD_LL_Init+0x68>
  {
    Error_Handler( );
 800c594:	f7f6 ffbe 	bl	8003514 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800c598:	2180      	movs	r1, #128	; 0x80
 800c59a:	4809      	ldr	r0, [pc, #36]	; (800c5c0 <USBD_LL_Init+0x90>)
 800c59c:	f7fb f9dc 	bl	8007958 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800c5a0:	2240      	movs	r2, #64	; 0x40
 800c5a2:	2100      	movs	r1, #0
 800c5a4:	4806      	ldr	r0, [pc, #24]	; (800c5c0 <USBD_LL_Init+0x90>)
 800c5a6:	f7fb f991 	bl	80078cc <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800c5aa:	2280      	movs	r2, #128	; 0x80
 800c5ac:	2101      	movs	r1, #1
 800c5ae:	4804      	ldr	r0, [pc, #16]	; (800c5c0 <USBD_LL_Init+0x90>)
 800c5b0:	f7fb f98c 	bl	80078cc <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800c5b4:	2300      	movs	r3, #0
}
 800c5b6:	4618      	mov	r0, r3
 800c5b8:	3708      	adds	r7, #8
 800c5ba:	46bd      	mov	sp, r7
 800c5bc:	bd80      	pop	{r7, pc}
 800c5be:	bf00      	nop
 800c5c0:	20001b9c 	.word	0x20001b9c

0800c5c4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800c5c4:	b580      	push	{r7, lr}
 800c5c6:	b084      	sub	sp, #16
 800c5c8:	af00      	add	r7, sp, #0
 800c5ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c5cc:	2300      	movs	r3, #0
 800c5ce:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c5d0:	2300      	movs	r3, #0
 800c5d2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800c5d4:	687b      	ldr	r3, [r7, #4]
 800c5d6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c5da:	4618      	mov	r0, r3
 800c5dc:	f7fa f993 	bl	8006906 <HAL_PCD_Start>
 800c5e0:	4603      	mov	r3, r0
 800c5e2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c5e4:	7bfb      	ldrb	r3, [r7, #15]
 800c5e6:	4618      	mov	r0, r3
 800c5e8:	f000 f92e 	bl	800c848 <USBD_Get_USB_Status>
 800c5ec:	4603      	mov	r3, r0
 800c5ee:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c5f0:	7bbb      	ldrb	r3, [r7, #14]
}
 800c5f2:	4618      	mov	r0, r3
 800c5f4:	3710      	adds	r7, #16
 800c5f6:	46bd      	mov	sp, r7
 800c5f8:	bd80      	pop	{r7, pc}

0800c5fa <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800c5fa:	b580      	push	{r7, lr}
 800c5fc:	b084      	sub	sp, #16
 800c5fe:	af00      	add	r7, sp, #0
 800c600:	6078      	str	r0, [r7, #4]
 800c602:	4608      	mov	r0, r1
 800c604:	4611      	mov	r1, r2
 800c606:	461a      	mov	r2, r3
 800c608:	4603      	mov	r3, r0
 800c60a:	70fb      	strb	r3, [r7, #3]
 800c60c:	460b      	mov	r3, r1
 800c60e:	70bb      	strb	r3, [r7, #2]
 800c610:	4613      	mov	r3, r2
 800c612:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c614:	2300      	movs	r3, #0
 800c616:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c618:	2300      	movs	r3, #0
 800c61a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800c61c:	687b      	ldr	r3, [r7, #4]
 800c61e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800c622:	78bb      	ldrb	r3, [r7, #2]
 800c624:	883a      	ldrh	r2, [r7, #0]
 800c626:	78f9      	ldrb	r1, [r7, #3]
 800c628:	f7fa fd58 	bl	80070dc <HAL_PCD_EP_Open>
 800c62c:	4603      	mov	r3, r0
 800c62e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c630:	7bfb      	ldrb	r3, [r7, #15]
 800c632:	4618      	mov	r0, r3
 800c634:	f000 f908 	bl	800c848 <USBD_Get_USB_Status>
 800c638:	4603      	mov	r3, r0
 800c63a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c63c:	7bbb      	ldrb	r3, [r7, #14]
}
 800c63e:	4618      	mov	r0, r3
 800c640:	3710      	adds	r7, #16
 800c642:	46bd      	mov	sp, r7
 800c644:	bd80      	pop	{r7, pc}

0800c646 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c646:	b580      	push	{r7, lr}
 800c648:	b084      	sub	sp, #16
 800c64a:	af00      	add	r7, sp, #0
 800c64c:	6078      	str	r0, [r7, #4]
 800c64e:	460b      	mov	r3, r1
 800c650:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c652:	2300      	movs	r3, #0
 800c654:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c656:	2300      	movs	r3, #0
 800c658:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800c65a:	687b      	ldr	r3, [r7, #4]
 800c65c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c660:	78fa      	ldrb	r2, [r7, #3]
 800c662:	4611      	mov	r1, r2
 800c664:	4618      	mov	r0, r3
 800c666:	f7fa fda1 	bl	80071ac <HAL_PCD_EP_Close>
 800c66a:	4603      	mov	r3, r0
 800c66c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c66e:	7bfb      	ldrb	r3, [r7, #15]
 800c670:	4618      	mov	r0, r3
 800c672:	f000 f8e9 	bl	800c848 <USBD_Get_USB_Status>
 800c676:	4603      	mov	r3, r0
 800c678:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c67a:	7bbb      	ldrb	r3, [r7, #14]
}
 800c67c:	4618      	mov	r0, r3
 800c67e:	3710      	adds	r7, #16
 800c680:	46bd      	mov	sp, r7
 800c682:	bd80      	pop	{r7, pc}

0800c684 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c684:	b580      	push	{r7, lr}
 800c686:	b084      	sub	sp, #16
 800c688:	af00      	add	r7, sp, #0
 800c68a:	6078      	str	r0, [r7, #4]
 800c68c:	460b      	mov	r3, r1
 800c68e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c690:	2300      	movs	r3, #0
 800c692:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c694:	2300      	movs	r3, #0
 800c696:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800c698:	687b      	ldr	r3, [r7, #4]
 800c69a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c69e:	78fa      	ldrb	r2, [r7, #3]
 800c6a0:	4611      	mov	r1, r2
 800c6a2:	4618      	mov	r0, r3
 800c6a4:	f7fa fe78 	bl	8007398 <HAL_PCD_EP_SetStall>
 800c6a8:	4603      	mov	r3, r0
 800c6aa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c6ac:	7bfb      	ldrb	r3, [r7, #15]
 800c6ae:	4618      	mov	r0, r3
 800c6b0:	f000 f8ca 	bl	800c848 <USBD_Get_USB_Status>
 800c6b4:	4603      	mov	r3, r0
 800c6b6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c6b8:	7bbb      	ldrb	r3, [r7, #14]
}
 800c6ba:	4618      	mov	r0, r3
 800c6bc:	3710      	adds	r7, #16
 800c6be:	46bd      	mov	sp, r7
 800c6c0:	bd80      	pop	{r7, pc}

0800c6c2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c6c2:	b580      	push	{r7, lr}
 800c6c4:	b084      	sub	sp, #16
 800c6c6:	af00      	add	r7, sp, #0
 800c6c8:	6078      	str	r0, [r7, #4]
 800c6ca:	460b      	mov	r3, r1
 800c6cc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c6ce:	2300      	movs	r3, #0
 800c6d0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c6d2:	2300      	movs	r3, #0
 800c6d4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800c6d6:	687b      	ldr	r3, [r7, #4]
 800c6d8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c6dc:	78fa      	ldrb	r2, [r7, #3]
 800c6de:	4611      	mov	r1, r2
 800c6e0:	4618      	mov	r0, r3
 800c6e2:	f7fa febd 	bl	8007460 <HAL_PCD_EP_ClrStall>
 800c6e6:	4603      	mov	r3, r0
 800c6e8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c6ea:	7bfb      	ldrb	r3, [r7, #15]
 800c6ec:	4618      	mov	r0, r3
 800c6ee:	f000 f8ab 	bl	800c848 <USBD_Get_USB_Status>
 800c6f2:	4603      	mov	r3, r0
 800c6f4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c6f6:	7bbb      	ldrb	r3, [r7, #14]
}
 800c6f8:	4618      	mov	r0, r3
 800c6fa:	3710      	adds	r7, #16
 800c6fc:	46bd      	mov	sp, r7
 800c6fe:	bd80      	pop	{r7, pc}

0800c700 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c700:	b480      	push	{r7}
 800c702:	b085      	sub	sp, #20
 800c704:	af00      	add	r7, sp, #0
 800c706:	6078      	str	r0, [r7, #4]
 800c708:	460b      	mov	r3, r1
 800c70a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800c70c:	687b      	ldr	r3, [r7, #4]
 800c70e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c712:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800c714:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c718:	2b00      	cmp	r3, #0
 800c71a:	da0b      	bge.n	800c734 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800c71c:	78fb      	ldrb	r3, [r7, #3]
 800c71e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c722:	68f9      	ldr	r1, [r7, #12]
 800c724:	4613      	mov	r3, r2
 800c726:	00db      	lsls	r3, r3, #3
 800c728:	1a9b      	subs	r3, r3, r2
 800c72a:	009b      	lsls	r3, r3, #2
 800c72c:	440b      	add	r3, r1
 800c72e:	333e      	adds	r3, #62	; 0x3e
 800c730:	781b      	ldrb	r3, [r3, #0]
 800c732:	e00b      	b.n	800c74c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800c734:	78fb      	ldrb	r3, [r7, #3]
 800c736:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c73a:	68f9      	ldr	r1, [r7, #12]
 800c73c:	4613      	mov	r3, r2
 800c73e:	00db      	lsls	r3, r3, #3
 800c740:	1a9b      	subs	r3, r3, r2
 800c742:	009b      	lsls	r3, r3, #2
 800c744:	440b      	add	r3, r1
 800c746:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800c74a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800c74c:	4618      	mov	r0, r3
 800c74e:	3714      	adds	r7, #20
 800c750:	46bd      	mov	sp, r7
 800c752:	bc80      	pop	{r7}
 800c754:	4770      	bx	lr

0800c756 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800c756:	b580      	push	{r7, lr}
 800c758:	b084      	sub	sp, #16
 800c75a:	af00      	add	r7, sp, #0
 800c75c:	6078      	str	r0, [r7, #4]
 800c75e:	460b      	mov	r3, r1
 800c760:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c762:	2300      	movs	r3, #0
 800c764:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c766:	2300      	movs	r3, #0
 800c768:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800c76a:	687b      	ldr	r3, [r7, #4]
 800c76c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c770:	78fa      	ldrb	r2, [r7, #3]
 800c772:	4611      	mov	r1, r2
 800c774:	4618      	mov	r0, r3
 800c776:	f7fa fc8c 	bl	8007092 <HAL_PCD_SetAddress>
 800c77a:	4603      	mov	r3, r0
 800c77c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c77e:	7bfb      	ldrb	r3, [r7, #15]
 800c780:	4618      	mov	r0, r3
 800c782:	f000 f861 	bl	800c848 <USBD_Get_USB_Status>
 800c786:	4603      	mov	r3, r0
 800c788:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c78a:	7bbb      	ldrb	r3, [r7, #14]
}
 800c78c:	4618      	mov	r0, r3
 800c78e:	3710      	adds	r7, #16
 800c790:	46bd      	mov	sp, r7
 800c792:	bd80      	pop	{r7, pc}

0800c794 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800c794:	b580      	push	{r7, lr}
 800c796:	b086      	sub	sp, #24
 800c798:	af00      	add	r7, sp, #0
 800c79a:	60f8      	str	r0, [r7, #12]
 800c79c:	607a      	str	r2, [r7, #4]
 800c79e:	461a      	mov	r2, r3
 800c7a0:	460b      	mov	r3, r1
 800c7a2:	72fb      	strb	r3, [r7, #11]
 800c7a4:	4613      	mov	r3, r2
 800c7a6:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c7a8:	2300      	movs	r3, #0
 800c7aa:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c7ac:	2300      	movs	r3, #0
 800c7ae:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800c7b0:	68fb      	ldr	r3, [r7, #12]
 800c7b2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800c7b6:	893b      	ldrh	r3, [r7, #8]
 800c7b8:	7af9      	ldrb	r1, [r7, #11]
 800c7ba:	687a      	ldr	r2, [r7, #4]
 800c7bc:	f7fa fda2 	bl	8007304 <HAL_PCD_EP_Transmit>
 800c7c0:	4603      	mov	r3, r0
 800c7c2:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c7c4:	7dfb      	ldrb	r3, [r7, #23]
 800c7c6:	4618      	mov	r0, r3
 800c7c8:	f000 f83e 	bl	800c848 <USBD_Get_USB_Status>
 800c7cc:	4603      	mov	r3, r0
 800c7ce:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800c7d0:	7dbb      	ldrb	r3, [r7, #22]
}
 800c7d2:	4618      	mov	r0, r3
 800c7d4:	3718      	adds	r7, #24
 800c7d6:	46bd      	mov	sp, r7
 800c7d8:	bd80      	pop	{r7, pc}

0800c7da <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800c7da:	b580      	push	{r7, lr}
 800c7dc:	b086      	sub	sp, #24
 800c7de:	af00      	add	r7, sp, #0
 800c7e0:	60f8      	str	r0, [r7, #12]
 800c7e2:	607a      	str	r2, [r7, #4]
 800c7e4:	461a      	mov	r2, r3
 800c7e6:	460b      	mov	r3, r1
 800c7e8:	72fb      	strb	r3, [r7, #11]
 800c7ea:	4613      	mov	r3, r2
 800c7ec:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c7ee:	2300      	movs	r3, #0
 800c7f0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c7f2:	2300      	movs	r3, #0
 800c7f4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800c7f6:	68fb      	ldr	r3, [r7, #12]
 800c7f8:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800c7fc:	893b      	ldrh	r3, [r7, #8]
 800c7fe:	7af9      	ldrb	r1, [r7, #11]
 800c800:	687a      	ldr	r2, [r7, #4]
 800c802:	f7fa fd1d 	bl	8007240 <HAL_PCD_EP_Receive>
 800c806:	4603      	mov	r3, r0
 800c808:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c80a:	7dfb      	ldrb	r3, [r7, #23]
 800c80c:	4618      	mov	r0, r3
 800c80e:	f000 f81b 	bl	800c848 <USBD_Get_USB_Status>
 800c812:	4603      	mov	r3, r0
 800c814:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800c816:	7dbb      	ldrb	r3, [r7, #22]
}
 800c818:	4618      	mov	r0, r3
 800c81a:	3718      	adds	r7, #24
 800c81c:	46bd      	mov	sp, r7
 800c81e:	bd80      	pop	{r7, pc}

0800c820 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c820:	b580      	push	{r7, lr}
 800c822:	b082      	sub	sp, #8
 800c824:	af00      	add	r7, sp, #0
 800c826:	6078      	str	r0, [r7, #4]
 800c828:	460b      	mov	r3, r1
 800c82a:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800c82c:	687b      	ldr	r3, [r7, #4]
 800c82e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c832:	78fa      	ldrb	r2, [r7, #3]
 800c834:	4611      	mov	r1, r2
 800c836:	4618      	mov	r0, r3
 800c838:	f7fa fd4d 	bl	80072d6 <HAL_PCD_EP_GetRxCount>
 800c83c:	4603      	mov	r3, r0
}
 800c83e:	4618      	mov	r0, r3
 800c840:	3708      	adds	r7, #8
 800c842:	46bd      	mov	sp, r7
 800c844:	bd80      	pop	{r7, pc}
	...

0800c848 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800c848:	b480      	push	{r7}
 800c84a:	b085      	sub	sp, #20
 800c84c:	af00      	add	r7, sp, #0
 800c84e:	4603      	mov	r3, r0
 800c850:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c852:	2300      	movs	r3, #0
 800c854:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800c856:	79fb      	ldrb	r3, [r7, #7]
 800c858:	2b03      	cmp	r3, #3
 800c85a:	d817      	bhi.n	800c88c <USBD_Get_USB_Status+0x44>
 800c85c:	a201      	add	r2, pc, #4	; (adr r2, 800c864 <USBD_Get_USB_Status+0x1c>)
 800c85e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c862:	bf00      	nop
 800c864:	0800c875 	.word	0x0800c875
 800c868:	0800c87b 	.word	0x0800c87b
 800c86c:	0800c881 	.word	0x0800c881
 800c870:	0800c887 	.word	0x0800c887
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800c874:	2300      	movs	r3, #0
 800c876:	73fb      	strb	r3, [r7, #15]
    break;
 800c878:	e00b      	b.n	800c892 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800c87a:	2302      	movs	r3, #2
 800c87c:	73fb      	strb	r3, [r7, #15]
    break;
 800c87e:	e008      	b.n	800c892 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800c880:	2301      	movs	r3, #1
 800c882:	73fb      	strb	r3, [r7, #15]
    break;
 800c884:	e005      	b.n	800c892 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800c886:	2302      	movs	r3, #2
 800c888:	73fb      	strb	r3, [r7, #15]
    break;
 800c88a:	e002      	b.n	800c892 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800c88c:	2302      	movs	r3, #2
 800c88e:	73fb      	strb	r3, [r7, #15]
    break;
 800c890:	bf00      	nop
  }
  return usb_status;
 800c892:	7bfb      	ldrb	r3, [r7, #15]
}
 800c894:	4618      	mov	r0, r3
 800c896:	3714      	adds	r7, #20
 800c898:	46bd      	mov	sp, r7
 800c89a:	bc80      	pop	{r7}
 800c89c:	4770      	bx	lr
 800c89e:	bf00      	nop

0800c8a0 <cos>:
 800c8a0:	b530      	push	{r4, r5, lr}
 800c8a2:	4a1e      	ldr	r2, [pc, #120]	; (800c91c <cos+0x7c>)
 800c8a4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800c8a8:	4293      	cmp	r3, r2
 800c8aa:	b087      	sub	sp, #28
 800c8ac:	dc04      	bgt.n	800c8b8 <cos+0x18>
 800c8ae:	2200      	movs	r2, #0
 800c8b0:	2300      	movs	r3, #0
 800c8b2:	f000 fd79 	bl	800d3a8 <__kernel_cos>
 800c8b6:	e006      	b.n	800c8c6 <cos+0x26>
 800c8b8:	4a19      	ldr	r2, [pc, #100]	; (800c920 <cos+0x80>)
 800c8ba:	4293      	cmp	r3, r2
 800c8bc:	dd05      	ble.n	800c8ca <cos+0x2a>
 800c8be:	4602      	mov	r2, r0
 800c8c0:	460b      	mov	r3, r1
 800c8c2:	f7f3 fc85 	bl	80001d0 <__aeabi_dsub>
 800c8c6:	b007      	add	sp, #28
 800c8c8:	bd30      	pop	{r4, r5, pc}
 800c8ca:	aa02      	add	r2, sp, #8
 800c8cc:	f000 f9c8 	bl	800cc60 <__ieee754_rem_pio2>
 800c8d0:	f000 0003 	and.w	r0, r0, #3
 800c8d4:	2801      	cmp	r0, #1
 800c8d6:	d007      	beq.n	800c8e8 <cos+0x48>
 800c8d8:	2802      	cmp	r0, #2
 800c8da:	d00f      	beq.n	800c8fc <cos+0x5c>
 800c8dc:	b9a8      	cbnz	r0, 800c90a <cos+0x6a>
 800c8de:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c8e2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c8e6:	e7e4      	b.n	800c8b2 <cos+0x12>
 800c8e8:	9000      	str	r0, [sp, #0]
 800c8ea:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c8ee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c8f2:	f001 f961 	bl	800dbb8 <__kernel_sin>
 800c8f6:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 800c8fa:	e7e4      	b.n	800c8c6 <cos+0x26>
 800c8fc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c900:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c904:	f000 fd50 	bl	800d3a8 <__kernel_cos>
 800c908:	e7f5      	b.n	800c8f6 <cos+0x56>
 800c90a:	2301      	movs	r3, #1
 800c90c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c910:	9300      	str	r3, [sp, #0]
 800c912:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c916:	f001 f94f 	bl	800dbb8 <__kernel_sin>
 800c91a:	e7d4      	b.n	800c8c6 <cos+0x26>
 800c91c:	3fe921fb 	.word	0x3fe921fb
 800c920:	7fefffff 	.word	0x7fefffff

0800c924 <sin>:
 800c924:	b530      	push	{r4, r5, lr}
 800c926:	4a20      	ldr	r2, [pc, #128]	; (800c9a8 <sin+0x84>)
 800c928:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800c92c:	4293      	cmp	r3, r2
 800c92e:	b087      	sub	sp, #28
 800c930:	dc06      	bgt.n	800c940 <sin+0x1c>
 800c932:	2300      	movs	r3, #0
 800c934:	2200      	movs	r2, #0
 800c936:	9300      	str	r3, [sp, #0]
 800c938:	2300      	movs	r3, #0
 800c93a:	f001 f93d 	bl	800dbb8 <__kernel_sin>
 800c93e:	e006      	b.n	800c94e <sin+0x2a>
 800c940:	4a1a      	ldr	r2, [pc, #104]	; (800c9ac <sin+0x88>)
 800c942:	4293      	cmp	r3, r2
 800c944:	dd05      	ble.n	800c952 <sin+0x2e>
 800c946:	4602      	mov	r2, r0
 800c948:	460b      	mov	r3, r1
 800c94a:	f7f3 fc41 	bl	80001d0 <__aeabi_dsub>
 800c94e:	b007      	add	sp, #28
 800c950:	bd30      	pop	{r4, r5, pc}
 800c952:	aa02      	add	r2, sp, #8
 800c954:	f000 f984 	bl	800cc60 <__ieee754_rem_pio2>
 800c958:	f000 0003 	and.w	r0, r0, #3
 800c95c:	2801      	cmp	r0, #1
 800c95e:	d009      	beq.n	800c974 <sin+0x50>
 800c960:	2802      	cmp	r0, #2
 800c962:	d00e      	beq.n	800c982 <sin+0x5e>
 800c964:	b9c0      	cbnz	r0, 800c998 <sin+0x74>
 800c966:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c96a:	2301      	movs	r3, #1
 800c96c:	9300      	str	r3, [sp, #0]
 800c96e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c972:	e7e2      	b.n	800c93a <sin+0x16>
 800c974:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c978:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c97c:	f000 fd14 	bl	800d3a8 <__kernel_cos>
 800c980:	e7e5      	b.n	800c94e <sin+0x2a>
 800c982:	2301      	movs	r3, #1
 800c984:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c988:	9300      	str	r3, [sp, #0]
 800c98a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c98e:	f001 f913 	bl	800dbb8 <__kernel_sin>
 800c992:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 800c996:	e7da      	b.n	800c94e <sin+0x2a>
 800c998:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c99c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c9a0:	f000 fd02 	bl	800d3a8 <__kernel_cos>
 800c9a4:	e7f5      	b.n	800c992 <sin+0x6e>
 800c9a6:	bf00      	nop
 800c9a8:	3fe921fb 	.word	0x3fe921fb
 800c9ac:	7fefffff 	.word	0x7fefffff

0800c9b0 <atanf>:
 800c9b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c9b4:	f020 4500 	bic.w	r5, r0, #2147483648	; 0x80000000
 800c9b8:	f1b5 4fa1 	cmp.w	r5, #1350565888	; 0x50800000
 800c9bc:	4604      	mov	r4, r0
 800c9be:	4680      	mov	r8, r0
 800c9c0:	db0e      	blt.n	800c9e0 <atanf+0x30>
 800c9c2:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 800c9c6:	dd04      	ble.n	800c9d2 <atanf+0x22>
 800c9c8:	4601      	mov	r1, r0
 800c9ca:	f7f4 f8f1 	bl	8000bb0 <__addsf3>
 800c9ce:	4604      	mov	r4, r0
 800c9d0:	e003      	b.n	800c9da <atanf+0x2a>
 800c9d2:	2800      	cmp	r0, #0
 800c9d4:	f300 80ce 	bgt.w	800cb74 <atanf+0x1c4>
 800c9d8:	4c67      	ldr	r4, [pc, #412]	; (800cb78 <atanf+0x1c8>)
 800c9da:	4620      	mov	r0, r4
 800c9dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c9e0:	4b66      	ldr	r3, [pc, #408]	; (800cb7c <atanf+0x1cc>)
 800c9e2:	429d      	cmp	r5, r3
 800c9e4:	dc0e      	bgt.n	800ca04 <atanf+0x54>
 800c9e6:	f1b5 5f44 	cmp.w	r5, #822083584	; 0x31000000
 800c9ea:	da08      	bge.n	800c9fe <atanf+0x4e>
 800c9ec:	4964      	ldr	r1, [pc, #400]	; (800cb80 <atanf+0x1d0>)
 800c9ee:	f7f4 f8df 	bl	8000bb0 <__addsf3>
 800c9f2:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800c9f6:	f7f4 fb9f 	bl	8001138 <__aeabi_fcmpgt>
 800c9fa:	2800      	cmp	r0, #0
 800c9fc:	d1ed      	bne.n	800c9da <atanf+0x2a>
 800c9fe:	f04f 36ff 	mov.w	r6, #4294967295
 800ca02:	e01c      	b.n	800ca3e <atanf+0x8e>
 800ca04:	f000 f8e0 	bl	800cbc8 <fabsf>
 800ca08:	4b5e      	ldr	r3, [pc, #376]	; (800cb84 <atanf+0x1d4>)
 800ca0a:	4604      	mov	r4, r0
 800ca0c:	429d      	cmp	r5, r3
 800ca0e:	dc7c      	bgt.n	800cb0a <atanf+0x15a>
 800ca10:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 800ca14:	429d      	cmp	r5, r3
 800ca16:	dc67      	bgt.n	800cae8 <atanf+0x138>
 800ca18:	4601      	mov	r1, r0
 800ca1a:	f7f4 f8c9 	bl	8000bb0 <__addsf3>
 800ca1e:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800ca22:	f7f4 f8c3 	bl	8000bac <__aeabi_fsub>
 800ca26:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800ca2a:	4605      	mov	r5, r0
 800ca2c:	4620      	mov	r0, r4
 800ca2e:	f7f4 f8bf 	bl	8000bb0 <__addsf3>
 800ca32:	4601      	mov	r1, r0
 800ca34:	4628      	mov	r0, r5
 800ca36:	f7f4 fa77 	bl	8000f28 <__aeabi_fdiv>
 800ca3a:	2600      	movs	r6, #0
 800ca3c:	4604      	mov	r4, r0
 800ca3e:	4621      	mov	r1, r4
 800ca40:	4620      	mov	r0, r4
 800ca42:	f7f4 f9bd 	bl	8000dc0 <__aeabi_fmul>
 800ca46:	4601      	mov	r1, r0
 800ca48:	4607      	mov	r7, r0
 800ca4a:	f7f4 f9b9 	bl	8000dc0 <__aeabi_fmul>
 800ca4e:	4605      	mov	r5, r0
 800ca50:	494d      	ldr	r1, [pc, #308]	; (800cb88 <atanf+0x1d8>)
 800ca52:	f7f4 f9b5 	bl	8000dc0 <__aeabi_fmul>
 800ca56:	494d      	ldr	r1, [pc, #308]	; (800cb8c <atanf+0x1dc>)
 800ca58:	f7f4 f8aa 	bl	8000bb0 <__addsf3>
 800ca5c:	4629      	mov	r1, r5
 800ca5e:	f7f4 f9af 	bl	8000dc0 <__aeabi_fmul>
 800ca62:	494b      	ldr	r1, [pc, #300]	; (800cb90 <atanf+0x1e0>)
 800ca64:	f7f4 f8a4 	bl	8000bb0 <__addsf3>
 800ca68:	4629      	mov	r1, r5
 800ca6a:	f7f4 f9a9 	bl	8000dc0 <__aeabi_fmul>
 800ca6e:	4949      	ldr	r1, [pc, #292]	; (800cb94 <atanf+0x1e4>)
 800ca70:	f7f4 f89e 	bl	8000bb0 <__addsf3>
 800ca74:	4629      	mov	r1, r5
 800ca76:	f7f4 f9a3 	bl	8000dc0 <__aeabi_fmul>
 800ca7a:	4947      	ldr	r1, [pc, #284]	; (800cb98 <atanf+0x1e8>)
 800ca7c:	f7f4 f898 	bl	8000bb0 <__addsf3>
 800ca80:	4629      	mov	r1, r5
 800ca82:	f7f4 f99d 	bl	8000dc0 <__aeabi_fmul>
 800ca86:	4945      	ldr	r1, [pc, #276]	; (800cb9c <atanf+0x1ec>)
 800ca88:	f7f4 f892 	bl	8000bb0 <__addsf3>
 800ca8c:	4639      	mov	r1, r7
 800ca8e:	f7f4 f997 	bl	8000dc0 <__aeabi_fmul>
 800ca92:	4943      	ldr	r1, [pc, #268]	; (800cba0 <atanf+0x1f0>)
 800ca94:	4607      	mov	r7, r0
 800ca96:	4628      	mov	r0, r5
 800ca98:	f7f4 f992 	bl	8000dc0 <__aeabi_fmul>
 800ca9c:	4941      	ldr	r1, [pc, #260]	; (800cba4 <atanf+0x1f4>)
 800ca9e:	f7f4 f885 	bl	8000bac <__aeabi_fsub>
 800caa2:	4629      	mov	r1, r5
 800caa4:	f7f4 f98c 	bl	8000dc0 <__aeabi_fmul>
 800caa8:	493f      	ldr	r1, [pc, #252]	; (800cba8 <atanf+0x1f8>)
 800caaa:	f7f4 f87f 	bl	8000bac <__aeabi_fsub>
 800caae:	4629      	mov	r1, r5
 800cab0:	f7f4 f986 	bl	8000dc0 <__aeabi_fmul>
 800cab4:	493d      	ldr	r1, [pc, #244]	; (800cbac <atanf+0x1fc>)
 800cab6:	f7f4 f879 	bl	8000bac <__aeabi_fsub>
 800caba:	4629      	mov	r1, r5
 800cabc:	f7f4 f980 	bl	8000dc0 <__aeabi_fmul>
 800cac0:	493b      	ldr	r1, [pc, #236]	; (800cbb0 <atanf+0x200>)
 800cac2:	f7f4 f873 	bl	8000bac <__aeabi_fsub>
 800cac6:	4629      	mov	r1, r5
 800cac8:	f7f4 f97a 	bl	8000dc0 <__aeabi_fmul>
 800cacc:	4601      	mov	r1, r0
 800cace:	4638      	mov	r0, r7
 800cad0:	f7f4 f86e 	bl	8000bb0 <__addsf3>
 800cad4:	4621      	mov	r1, r4
 800cad6:	f7f4 f973 	bl	8000dc0 <__aeabi_fmul>
 800cada:	1c73      	adds	r3, r6, #1
 800cadc:	4601      	mov	r1, r0
 800cade:	d133      	bne.n	800cb48 <atanf+0x198>
 800cae0:	4620      	mov	r0, r4
 800cae2:	f7f4 f863 	bl	8000bac <__aeabi_fsub>
 800cae6:	e772      	b.n	800c9ce <atanf+0x1e>
 800cae8:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800caec:	f7f4 f85e 	bl	8000bac <__aeabi_fsub>
 800caf0:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800caf4:	4605      	mov	r5, r0
 800caf6:	4620      	mov	r0, r4
 800caf8:	f7f4 f85a 	bl	8000bb0 <__addsf3>
 800cafc:	4601      	mov	r1, r0
 800cafe:	4628      	mov	r0, r5
 800cb00:	f7f4 fa12 	bl	8000f28 <__aeabi_fdiv>
 800cb04:	2601      	movs	r6, #1
 800cb06:	4604      	mov	r4, r0
 800cb08:	e799      	b.n	800ca3e <atanf+0x8e>
 800cb0a:	4b2a      	ldr	r3, [pc, #168]	; (800cbb4 <atanf+0x204>)
 800cb0c:	429d      	cmp	r5, r3
 800cb0e:	dc14      	bgt.n	800cb3a <atanf+0x18a>
 800cb10:	f04f 517f 	mov.w	r1, #1069547520	; 0x3fc00000
 800cb14:	f7f4 f84a 	bl	8000bac <__aeabi_fsub>
 800cb18:	f04f 517f 	mov.w	r1, #1069547520	; 0x3fc00000
 800cb1c:	4605      	mov	r5, r0
 800cb1e:	4620      	mov	r0, r4
 800cb20:	f7f4 f94e 	bl	8000dc0 <__aeabi_fmul>
 800cb24:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800cb28:	f7f4 f842 	bl	8000bb0 <__addsf3>
 800cb2c:	4601      	mov	r1, r0
 800cb2e:	4628      	mov	r0, r5
 800cb30:	f7f4 f9fa 	bl	8000f28 <__aeabi_fdiv>
 800cb34:	2602      	movs	r6, #2
 800cb36:	4604      	mov	r4, r0
 800cb38:	e781      	b.n	800ca3e <atanf+0x8e>
 800cb3a:	4601      	mov	r1, r0
 800cb3c:	481e      	ldr	r0, [pc, #120]	; (800cbb8 <atanf+0x208>)
 800cb3e:	f7f4 f9f3 	bl	8000f28 <__aeabi_fdiv>
 800cb42:	2603      	movs	r6, #3
 800cb44:	4604      	mov	r4, r0
 800cb46:	e77a      	b.n	800ca3e <atanf+0x8e>
 800cb48:	4b1c      	ldr	r3, [pc, #112]	; (800cbbc <atanf+0x20c>)
 800cb4a:	f853 1026 	ldr.w	r1, [r3, r6, lsl #2]
 800cb4e:	f7f4 f82d 	bl	8000bac <__aeabi_fsub>
 800cb52:	4621      	mov	r1, r4
 800cb54:	f7f4 f82a 	bl	8000bac <__aeabi_fsub>
 800cb58:	4b19      	ldr	r3, [pc, #100]	; (800cbc0 <atanf+0x210>)
 800cb5a:	4601      	mov	r1, r0
 800cb5c:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800cb60:	f7f4 f824 	bl	8000bac <__aeabi_fsub>
 800cb64:	f1b8 0f00 	cmp.w	r8, #0
 800cb68:	4604      	mov	r4, r0
 800cb6a:	f6bf af36 	bge.w	800c9da <atanf+0x2a>
 800cb6e:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800cb72:	e72c      	b.n	800c9ce <atanf+0x1e>
 800cb74:	4c13      	ldr	r4, [pc, #76]	; (800cbc4 <atanf+0x214>)
 800cb76:	e730      	b.n	800c9da <atanf+0x2a>
 800cb78:	bfc90fdb 	.word	0xbfc90fdb
 800cb7c:	3edfffff 	.word	0x3edfffff
 800cb80:	7149f2ca 	.word	0x7149f2ca
 800cb84:	3f97ffff 	.word	0x3f97ffff
 800cb88:	3c8569d7 	.word	0x3c8569d7
 800cb8c:	3d4bda59 	.word	0x3d4bda59
 800cb90:	3d886b35 	.word	0x3d886b35
 800cb94:	3dba2e6e 	.word	0x3dba2e6e
 800cb98:	3e124925 	.word	0x3e124925
 800cb9c:	3eaaaaab 	.word	0x3eaaaaab
 800cba0:	bd15a221 	.word	0xbd15a221
 800cba4:	3d6ef16b 	.word	0x3d6ef16b
 800cba8:	3d9d8795 	.word	0x3d9d8795
 800cbac:	3de38e38 	.word	0x3de38e38
 800cbb0:	3e4ccccd 	.word	0x3e4ccccd
 800cbb4:	401bffff 	.word	0x401bffff
 800cbb8:	bf800000 	.word	0xbf800000
 800cbbc:	0800f1a0 	.word	0x0800f1a0
 800cbc0:	0800f190 	.word	0x0800f190
 800cbc4:	3fc90fdb 	.word	0x3fc90fdb

0800cbc8 <fabsf>:
 800cbc8:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800cbcc:	4770      	bx	lr
	...

0800cbd0 <acosf>:
 800cbd0:	b538      	push	{r3, r4, r5, lr}
 800cbd2:	4604      	mov	r4, r0
 800cbd4:	f000 fa34 	bl	800d040 <__ieee754_acosf>
 800cbd8:	4b0e      	ldr	r3, [pc, #56]	; (800cc14 <acosf+0x44>)
 800cbda:	4605      	mov	r5, r0
 800cbdc:	f993 3000 	ldrsb.w	r3, [r3]
 800cbe0:	3301      	adds	r3, #1
 800cbe2:	d015      	beq.n	800cc10 <acosf+0x40>
 800cbe4:	4621      	mov	r1, r4
 800cbe6:	4620      	mov	r0, r4
 800cbe8:	f7f4 fab0 	bl	800114c <__aeabi_fcmpun>
 800cbec:	b980      	cbnz	r0, 800cc10 <acosf+0x40>
 800cbee:	4620      	mov	r0, r4
 800cbf0:	f7ff ffea 	bl	800cbc8 <fabsf>
 800cbf4:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800cbf8:	f7f4 fa9e 	bl	8001138 <__aeabi_fcmpgt>
 800cbfc:	b140      	cbz	r0, 800cc10 <acosf+0x40>
 800cbfe:	f001 f9a1 	bl	800df44 <__errno>
 800cc02:	2321      	movs	r3, #33	; 0x21
 800cc04:	6003      	str	r3, [r0, #0]
 800cc06:	4804      	ldr	r0, [pc, #16]	; (800cc18 <acosf+0x48>)
 800cc08:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cc0c:	f001 b996 	b.w	800df3c <nanf>
 800cc10:	4628      	mov	r0, r5
 800cc12:	bd38      	pop	{r3, r4, r5, pc}
 800cc14:	20000186 	.word	0x20000186
 800cc18:	0800f38d 	.word	0x0800f38d

0800cc1c <sqrtf>:
 800cc1c:	b538      	push	{r3, r4, r5, lr}
 800cc1e:	4605      	mov	r5, r0
 800cc20:	f000 fb70 	bl	800d304 <__ieee754_sqrtf>
 800cc24:	4b0d      	ldr	r3, [pc, #52]	; (800cc5c <sqrtf+0x40>)
 800cc26:	4604      	mov	r4, r0
 800cc28:	f993 3000 	ldrsb.w	r3, [r3]
 800cc2c:	3301      	adds	r3, #1
 800cc2e:	d012      	beq.n	800cc56 <sqrtf+0x3a>
 800cc30:	4629      	mov	r1, r5
 800cc32:	4628      	mov	r0, r5
 800cc34:	f7f4 fa8a 	bl	800114c <__aeabi_fcmpun>
 800cc38:	b968      	cbnz	r0, 800cc56 <sqrtf+0x3a>
 800cc3a:	2100      	movs	r1, #0
 800cc3c:	4628      	mov	r0, r5
 800cc3e:	f7f4 fa5d 	bl	80010fc <__aeabi_fcmplt>
 800cc42:	b140      	cbz	r0, 800cc56 <sqrtf+0x3a>
 800cc44:	f001 f97e 	bl	800df44 <__errno>
 800cc48:	2321      	movs	r3, #33	; 0x21
 800cc4a:	2100      	movs	r1, #0
 800cc4c:	6003      	str	r3, [r0, #0]
 800cc4e:	4608      	mov	r0, r1
 800cc50:	f7f4 f96a 	bl	8000f28 <__aeabi_fdiv>
 800cc54:	4604      	mov	r4, r0
 800cc56:	4620      	mov	r0, r4
 800cc58:	bd38      	pop	{r3, r4, r5, pc}
 800cc5a:	bf00      	nop
 800cc5c:	20000186 	.word	0x20000186

0800cc60 <__ieee754_rem_pio2>:
 800cc60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cc64:	4614      	mov	r4, r2
 800cc66:	4ac4      	ldr	r2, [pc, #784]	; (800cf78 <__ieee754_rem_pio2+0x318>)
 800cc68:	f021 4a00 	bic.w	sl, r1, #2147483648	; 0x80000000
 800cc6c:	b08d      	sub	sp, #52	; 0x34
 800cc6e:	4592      	cmp	sl, r2
 800cc70:	9104      	str	r1, [sp, #16]
 800cc72:	dc07      	bgt.n	800cc84 <__ieee754_rem_pio2+0x24>
 800cc74:	2200      	movs	r2, #0
 800cc76:	2300      	movs	r3, #0
 800cc78:	e9c4 0100 	strd	r0, r1, [r4]
 800cc7c:	e9c4 2302 	strd	r2, r3, [r4, #8]
 800cc80:	2500      	movs	r5, #0
 800cc82:	e024      	b.n	800ccce <__ieee754_rem_pio2+0x6e>
 800cc84:	4abd      	ldr	r2, [pc, #756]	; (800cf7c <__ieee754_rem_pio2+0x31c>)
 800cc86:	4592      	cmp	sl, r2
 800cc88:	dc72      	bgt.n	800cd70 <__ieee754_rem_pio2+0x110>
 800cc8a:	9b04      	ldr	r3, [sp, #16]
 800cc8c:	4dbc      	ldr	r5, [pc, #752]	; (800cf80 <__ieee754_rem_pio2+0x320>)
 800cc8e:	2b00      	cmp	r3, #0
 800cc90:	a3ab      	add	r3, pc, #684	; (adr r3, 800cf40 <__ieee754_rem_pio2+0x2e0>)
 800cc92:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc96:	dd36      	ble.n	800cd06 <__ieee754_rem_pio2+0xa6>
 800cc98:	f7f3 fa9a 	bl	80001d0 <__aeabi_dsub>
 800cc9c:	45aa      	cmp	sl, r5
 800cc9e:	4606      	mov	r6, r0
 800cca0:	460f      	mov	r7, r1
 800cca2:	d018      	beq.n	800ccd6 <__ieee754_rem_pio2+0x76>
 800cca4:	a3a8      	add	r3, pc, #672	; (adr r3, 800cf48 <__ieee754_rem_pio2+0x2e8>)
 800cca6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ccaa:	f7f3 fa91 	bl	80001d0 <__aeabi_dsub>
 800ccae:	4602      	mov	r2, r0
 800ccb0:	460b      	mov	r3, r1
 800ccb2:	4630      	mov	r0, r6
 800ccb4:	e9c4 2300 	strd	r2, r3, [r4]
 800ccb8:	4639      	mov	r1, r7
 800ccba:	f7f3 fa89 	bl	80001d0 <__aeabi_dsub>
 800ccbe:	a3a2      	add	r3, pc, #648	; (adr r3, 800cf48 <__ieee754_rem_pio2+0x2e8>)
 800ccc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ccc4:	f7f3 fa84 	bl	80001d0 <__aeabi_dsub>
 800ccc8:	2501      	movs	r5, #1
 800ccca:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800ccce:	4628      	mov	r0, r5
 800ccd0:	b00d      	add	sp, #52	; 0x34
 800ccd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ccd6:	a39e      	add	r3, pc, #632	; (adr r3, 800cf50 <__ieee754_rem_pio2+0x2f0>)
 800ccd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ccdc:	f7f3 fa78 	bl	80001d0 <__aeabi_dsub>
 800cce0:	a39d      	add	r3, pc, #628	; (adr r3, 800cf58 <__ieee754_rem_pio2+0x2f8>)
 800cce2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cce6:	4606      	mov	r6, r0
 800cce8:	460f      	mov	r7, r1
 800ccea:	f7f3 fa71 	bl	80001d0 <__aeabi_dsub>
 800ccee:	4602      	mov	r2, r0
 800ccf0:	460b      	mov	r3, r1
 800ccf2:	4630      	mov	r0, r6
 800ccf4:	e9c4 2300 	strd	r2, r3, [r4]
 800ccf8:	4639      	mov	r1, r7
 800ccfa:	f7f3 fa69 	bl	80001d0 <__aeabi_dsub>
 800ccfe:	a396      	add	r3, pc, #600	; (adr r3, 800cf58 <__ieee754_rem_pio2+0x2f8>)
 800cd00:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd04:	e7de      	b.n	800ccc4 <__ieee754_rem_pio2+0x64>
 800cd06:	f7f3 fa65 	bl	80001d4 <__adddf3>
 800cd0a:	45aa      	cmp	sl, r5
 800cd0c:	4606      	mov	r6, r0
 800cd0e:	460f      	mov	r7, r1
 800cd10:	d016      	beq.n	800cd40 <__ieee754_rem_pio2+0xe0>
 800cd12:	a38d      	add	r3, pc, #564	; (adr r3, 800cf48 <__ieee754_rem_pio2+0x2e8>)
 800cd14:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd18:	f7f3 fa5c 	bl	80001d4 <__adddf3>
 800cd1c:	4602      	mov	r2, r0
 800cd1e:	460b      	mov	r3, r1
 800cd20:	4630      	mov	r0, r6
 800cd22:	e9c4 2300 	strd	r2, r3, [r4]
 800cd26:	4639      	mov	r1, r7
 800cd28:	f7f3 fa52 	bl	80001d0 <__aeabi_dsub>
 800cd2c:	a386      	add	r3, pc, #536	; (adr r3, 800cf48 <__ieee754_rem_pio2+0x2e8>)
 800cd2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd32:	f7f3 fa4f 	bl	80001d4 <__adddf3>
 800cd36:	f04f 35ff 	mov.w	r5, #4294967295
 800cd3a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800cd3e:	e7c6      	b.n	800ccce <__ieee754_rem_pio2+0x6e>
 800cd40:	a383      	add	r3, pc, #524	; (adr r3, 800cf50 <__ieee754_rem_pio2+0x2f0>)
 800cd42:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd46:	f7f3 fa45 	bl	80001d4 <__adddf3>
 800cd4a:	a383      	add	r3, pc, #524	; (adr r3, 800cf58 <__ieee754_rem_pio2+0x2f8>)
 800cd4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd50:	4606      	mov	r6, r0
 800cd52:	460f      	mov	r7, r1
 800cd54:	f7f3 fa3e 	bl	80001d4 <__adddf3>
 800cd58:	4602      	mov	r2, r0
 800cd5a:	460b      	mov	r3, r1
 800cd5c:	4630      	mov	r0, r6
 800cd5e:	e9c4 2300 	strd	r2, r3, [r4]
 800cd62:	4639      	mov	r1, r7
 800cd64:	f7f3 fa34 	bl	80001d0 <__aeabi_dsub>
 800cd68:	a37b      	add	r3, pc, #492	; (adr r3, 800cf58 <__ieee754_rem_pio2+0x2f8>)
 800cd6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd6e:	e7e0      	b.n	800cd32 <__ieee754_rem_pio2+0xd2>
 800cd70:	4a84      	ldr	r2, [pc, #528]	; (800cf84 <__ieee754_rem_pio2+0x324>)
 800cd72:	4592      	cmp	sl, r2
 800cd74:	f300 80d5 	bgt.w	800cf22 <__ieee754_rem_pio2+0x2c2>
 800cd78:	f000 ffd4 	bl	800dd24 <fabs>
 800cd7c:	a378      	add	r3, pc, #480	; (adr r3, 800cf60 <__ieee754_rem_pio2+0x300>)
 800cd7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd82:	4606      	mov	r6, r0
 800cd84:	460f      	mov	r7, r1
 800cd86:	f7f3 fbdb 	bl	8000540 <__aeabi_dmul>
 800cd8a:	2200      	movs	r2, #0
 800cd8c:	4b7e      	ldr	r3, [pc, #504]	; (800cf88 <__ieee754_rem_pio2+0x328>)
 800cd8e:	f7f3 fa21 	bl	80001d4 <__adddf3>
 800cd92:	f7f3 fe6f 	bl	8000a74 <__aeabi_d2iz>
 800cd96:	4605      	mov	r5, r0
 800cd98:	f7f3 fb68 	bl	800046c <__aeabi_i2d>
 800cd9c:	4602      	mov	r2, r0
 800cd9e:	460b      	mov	r3, r1
 800cda0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800cda4:	a366      	add	r3, pc, #408	; (adr r3, 800cf40 <__ieee754_rem_pio2+0x2e0>)
 800cda6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cdaa:	f7f3 fbc9 	bl	8000540 <__aeabi_dmul>
 800cdae:	4602      	mov	r2, r0
 800cdb0:	460b      	mov	r3, r1
 800cdb2:	4630      	mov	r0, r6
 800cdb4:	4639      	mov	r1, r7
 800cdb6:	f7f3 fa0b 	bl	80001d0 <__aeabi_dsub>
 800cdba:	a363      	add	r3, pc, #396	; (adr r3, 800cf48 <__ieee754_rem_pio2+0x2e8>)
 800cdbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cdc0:	4680      	mov	r8, r0
 800cdc2:	4689      	mov	r9, r1
 800cdc4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cdc8:	f7f3 fbba 	bl	8000540 <__aeabi_dmul>
 800cdcc:	2d1f      	cmp	r5, #31
 800cdce:	4606      	mov	r6, r0
 800cdd0:	460f      	mov	r7, r1
 800cdd2:	dc0e      	bgt.n	800cdf2 <__ieee754_rem_pio2+0x192>
 800cdd4:	4b6d      	ldr	r3, [pc, #436]	; (800cf8c <__ieee754_rem_pio2+0x32c>)
 800cdd6:	1e6a      	subs	r2, r5, #1
 800cdd8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cddc:	4553      	cmp	r3, sl
 800cdde:	d008      	beq.n	800cdf2 <__ieee754_rem_pio2+0x192>
 800cde0:	4632      	mov	r2, r6
 800cde2:	463b      	mov	r3, r7
 800cde4:	4640      	mov	r0, r8
 800cde6:	4649      	mov	r1, r9
 800cde8:	f7f3 f9f2 	bl	80001d0 <__aeabi_dsub>
 800cdec:	e9c4 0100 	strd	r0, r1, [r4]
 800cdf0:	e013      	b.n	800ce1a <__ieee754_rem_pio2+0x1ba>
 800cdf2:	463b      	mov	r3, r7
 800cdf4:	4632      	mov	r2, r6
 800cdf6:	4640      	mov	r0, r8
 800cdf8:	4649      	mov	r1, r9
 800cdfa:	f7f3 f9e9 	bl	80001d0 <__aeabi_dsub>
 800cdfe:	ea4f 532a 	mov.w	r3, sl, asr #20
 800ce02:	9305      	str	r3, [sp, #20]
 800ce04:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800ce08:	ebc3 5a1a 	rsb	sl, r3, sl, lsr #20
 800ce0c:	f1ba 0f10 	cmp.w	sl, #16
 800ce10:	dc1f      	bgt.n	800ce52 <__ieee754_rem_pio2+0x1f2>
 800ce12:	4602      	mov	r2, r0
 800ce14:	460b      	mov	r3, r1
 800ce16:	e9c4 2300 	strd	r2, r3, [r4]
 800ce1a:	e9d4 2a00 	ldrd	r2, sl, [r4]
 800ce1e:	4640      	mov	r0, r8
 800ce20:	4653      	mov	r3, sl
 800ce22:	4649      	mov	r1, r9
 800ce24:	f7f3 f9d4 	bl	80001d0 <__aeabi_dsub>
 800ce28:	4632      	mov	r2, r6
 800ce2a:	463b      	mov	r3, r7
 800ce2c:	f7f3 f9d0 	bl	80001d0 <__aeabi_dsub>
 800ce30:	460b      	mov	r3, r1
 800ce32:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800ce36:	9904      	ldr	r1, [sp, #16]
 800ce38:	4602      	mov	r2, r0
 800ce3a:	2900      	cmp	r1, #0
 800ce3c:	f6bf af47 	bge.w	800ccce <__ieee754_rem_pio2+0x6e>
 800ce40:	f10a 4100 	add.w	r1, sl, #2147483648	; 0x80000000
 800ce44:	e9c4 1201 	strd	r1, r2, [r4, #4]
 800ce48:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800ce4c:	60e3      	str	r3, [r4, #12]
 800ce4e:	426d      	negs	r5, r5
 800ce50:	e73d      	b.n	800ccce <__ieee754_rem_pio2+0x6e>
 800ce52:	a33f      	add	r3, pc, #252	; (adr r3, 800cf50 <__ieee754_rem_pio2+0x2f0>)
 800ce54:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce58:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ce5c:	f7f3 fb70 	bl	8000540 <__aeabi_dmul>
 800ce60:	4606      	mov	r6, r0
 800ce62:	460f      	mov	r7, r1
 800ce64:	4602      	mov	r2, r0
 800ce66:	460b      	mov	r3, r1
 800ce68:	4640      	mov	r0, r8
 800ce6a:	4649      	mov	r1, r9
 800ce6c:	f7f3 f9b0 	bl	80001d0 <__aeabi_dsub>
 800ce70:	4602      	mov	r2, r0
 800ce72:	460b      	mov	r3, r1
 800ce74:	4682      	mov	sl, r0
 800ce76:	468b      	mov	fp, r1
 800ce78:	4640      	mov	r0, r8
 800ce7a:	4649      	mov	r1, r9
 800ce7c:	f7f3 f9a8 	bl	80001d0 <__aeabi_dsub>
 800ce80:	4632      	mov	r2, r6
 800ce82:	463b      	mov	r3, r7
 800ce84:	f7f3 f9a4 	bl	80001d0 <__aeabi_dsub>
 800ce88:	a333      	add	r3, pc, #204	; (adr r3, 800cf58 <__ieee754_rem_pio2+0x2f8>)
 800ce8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce8e:	4606      	mov	r6, r0
 800ce90:	460f      	mov	r7, r1
 800ce92:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ce96:	f7f3 fb53 	bl	8000540 <__aeabi_dmul>
 800ce9a:	4632      	mov	r2, r6
 800ce9c:	463b      	mov	r3, r7
 800ce9e:	f7f3 f997 	bl	80001d0 <__aeabi_dsub>
 800cea2:	4602      	mov	r2, r0
 800cea4:	460b      	mov	r3, r1
 800cea6:	4606      	mov	r6, r0
 800cea8:	460f      	mov	r7, r1
 800ceaa:	4650      	mov	r0, sl
 800ceac:	4659      	mov	r1, fp
 800ceae:	f7f3 f98f 	bl	80001d0 <__aeabi_dsub>
 800ceb2:	9a05      	ldr	r2, [sp, #20]
 800ceb4:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800ceb8:	1ad3      	subs	r3, r2, r3
 800ceba:	2b31      	cmp	r3, #49	; 0x31
 800cebc:	dc06      	bgt.n	800cecc <__ieee754_rem_pio2+0x26c>
 800cebe:	4602      	mov	r2, r0
 800cec0:	460b      	mov	r3, r1
 800cec2:	46d0      	mov	r8, sl
 800cec4:	46d9      	mov	r9, fp
 800cec6:	e9c4 2300 	strd	r2, r3, [r4]
 800ceca:	e7a6      	b.n	800ce1a <__ieee754_rem_pio2+0x1ba>
 800cecc:	a326      	add	r3, pc, #152	; (adr r3, 800cf68 <__ieee754_rem_pio2+0x308>)
 800cece:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ced2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ced6:	f7f3 fb33 	bl	8000540 <__aeabi_dmul>
 800ceda:	4606      	mov	r6, r0
 800cedc:	460f      	mov	r7, r1
 800cede:	4602      	mov	r2, r0
 800cee0:	460b      	mov	r3, r1
 800cee2:	4650      	mov	r0, sl
 800cee4:	4659      	mov	r1, fp
 800cee6:	f7f3 f973 	bl	80001d0 <__aeabi_dsub>
 800ceea:	4602      	mov	r2, r0
 800ceec:	460b      	mov	r3, r1
 800ceee:	4680      	mov	r8, r0
 800cef0:	4689      	mov	r9, r1
 800cef2:	4650      	mov	r0, sl
 800cef4:	4659      	mov	r1, fp
 800cef6:	f7f3 f96b 	bl	80001d0 <__aeabi_dsub>
 800cefa:	4632      	mov	r2, r6
 800cefc:	463b      	mov	r3, r7
 800cefe:	f7f3 f967 	bl	80001d0 <__aeabi_dsub>
 800cf02:	a31b      	add	r3, pc, #108	; (adr r3, 800cf70 <__ieee754_rem_pio2+0x310>)
 800cf04:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf08:	4606      	mov	r6, r0
 800cf0a:	460f      	mov	r7, r1
 800cf0c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cf10:	f7f3 fb16 	bl	8000540 <__aeabi_dmul>
 800cf14:	4632      	mov	r2, r6
 800cf16:	463b      	mov	r3, r7
 800cf18:	f7f3 f95a 	bl	80001d0 <__aeabi_dsub>
 800cf1c:	4606      	mov	r6, r0
 800cf1e:	460f      	mov	r7, r1
 800cf20:	e75e      	b.n	800cde0 <__ieee754_rem_pio2+0x180>
 800cf22:	4a1b      	ldr	r2, [pc, #108]	; (800cf90 <__ieee754_rem_pio2+0x330>)
 800cf24:	4592      	cmp	sl, r2
 800cf26:	dd35      	ble.n	800cf94 <__ieee754_rem_pio2+0x334>
 800cf28:	4602      	mov	r2, r0
 800cf2a:	460b      	mov	r3, r1
 800cf2c:	f7f3 f950 	bl	80001d0 <__aeabi_dsub>
 800cf30:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800cf34:	e9c4 0100 	strd	r0, r1, [r4]
 800cf38:	e6a2      	b.n	800cc80 <__ieee754_rem_pio2+0x20>
 800cf3a:	bf00      	nop
 800cf3c:	f3af 8000 	nop.w
 800cf40:	54400000 	.word	0x54400000
 800cf44:	3ff921fb 	.word	0x3ff921fb
 800cf48:	1a626331 	.word	0x1a626331
 800cf4c:	3dd0b461 	.word	0x3dd0b461
 800cf50:	1a600000 	.word	0x1a600000
 800cf54:	3dd0b461 	.word	0x3dd0b461
 800cf58:	2e037073 	.word	0x2e037073
 800cf5c:	3ba3198a 	.word	0x3ba3198a
 800cf60:	6dc9c883 	.word	0x6dc9c883
 800cf64:	3fe45f30 	.word	0x3fe45f30
 800cf68:	2e000000 	.word	0x2e000000
 800cf6c:	3ba3198a 	.word	0x3ba3198a
 800cf70:	252049c1 	.word	0x252049c1
 800cf74:	397b839a 	.word	0x397b839a
 800cf78:	3fe921fb 	.word	0x3fe921fb
 800cf7c:	4002d97b 	.word	0x4002d97b
 800cf80:	3ff921fb 	.word	0x3ff921fb
 800cf84:	413921fb 	.word	0x413921fb
 800cf88:	3fe00000 	.word	0x3fe00000
 800cf8c:	0800f1b0 	.word	0x0800f1b0
 800cf90:	7fefffff 	.word	0x7fefffff
 800cf94:	ea4f 552a 	mov.w	r5, sl, asr #20
 800cf98:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 800cf9c:	ebaa 5105 	sub.w	r1, sl, r5, lsl #20
 800cfa0:	460f      	mov	r7, r1
 800cfa2:	4606      	mov	r6, r0
 800cfa4:	f7f3 fd66 	bl	8000a74 <__aeabi_d2iz>
 800cfa8:	f7f3 fa60 	bl	800046c <__aeabi_i2d>
 800cfac:	4602      	mov	r2, r0
 800cfae:	460b      	mov	r3, r1
 800cfb0:	4630      	mov	r0, r6
 800cfb2:	4639      	mov	r1, r7
 800cfb4:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800cfb8:	f7f3 f90a 	bl	80001d0 <__aeabi_dsub>
 800cfbc:	2200      	movs	r2, #0
 800cfbe:	4b1e      	ldr	r3, [pc, #120]	; (800d038 <__ieee754_rem_pio2+0x3d8>)
 800cfc0:	f7f3 fabe 	bl	8000540 <__aeabi_dmul>
 800cfc4:	460f      	mov	r7, r1
 800cfc6:	4606      	mov	r6, r0
 800cfc8:	f7f3 fd54 	bl	8000a74 <__aeabi_d2iz>
 800cfcc:	f7f3 fa4e 	bl	800046c <__aeabi_i2d>
 800cfd0:	4602      	mov	r2, r0
 800cfd2:	460b      	mov	r3, r1
 800cfd4:	4630      	mov	r0, r6
 800cfd6:	4639      	mov	r1, r7
 800cfd8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800cfdc:	f7f3 f8f8 	bl	80001d0 <__aeabi_dsub>
 800cfe0:	2200      	movs	r2, #0
 800cfe2:	4b15      	ldr	r3, [pc, #84]	; (800d038 <__ieee754_rem_pio2+0x3d8>)
 800cfe4:	f7f3 faac 	bl	8000540 <__aeabi_dmul>
 800cfe8:	f04f 0803 	mov.w	r8, #3
 800cfec:	2600      	movs	r6, #0
 800cfee:	2700      	movs	r7, #0
 800cff0:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800cff4:	f10d 0928 	add.w	r9, sp, #40	; 0x28
 800cff8:	4632      	mov	r2, r6
 800cffa:	e879 0102 	ldrd	r0, r1, [r9], #-8
 800cffe:	463b      	mov	r3, r7
 800d000:	46c2      	mov	sl, r8
 800d002:	f108 38ff 	add.w	r8, r8, #4294967295
 800d006:	f7f3 fd03 	bl	8000a10 <__aeabi_dcmpeq>
 800d00a:	2800      	cmp	r0, #0
 800d00c:	d1f4      	bne.n	800cff8 <__ieee754_rem_pio2+0x398>
 800d00e:	4b0b      	ldr	r3, [pc, #44]	; (800d03c <__ieee754_rem_pio2+0x3dc>)
 800d010:	462a      	mov	r2, r5
 800d012:	9301      	str	r3, [sp, #4]
 800d014:	2302      	movs	r3, #2
 800d016:	4621      	mov	r1, r4
 800d018:	9300      	str	r3, [sp, #0]
 800d01a:	a806      	add	r0, sp, #24
 800d01c:	4653      	mov	r3, sl
 800d01e:	f000 fa81 	bl	800d524 <__kernel_rem_pio2>
 800d022:	9b04      	ldr	r3, [sp, #16]
 800d024:	4605      	mov	r5, r0
 800d026:	2b00      	cmp	r3, #0
 800d028:	f6bf ae51 	bge.w	800ccce <__ieee754_rem_pio2+0x6e>
 800d02c:	6863      	ldr	r3, [r4, #4]
 800d02e:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800d032:	6063      	str	r3, [r4, #4]
 800d034:	68e3      	ldr	r3, [r4, #12]
 800d036:	e707      	b.n	800ce48 <__ieee754_rem_pio2+0x1e8>
 800d038:	41700000 	.word	0x41700000
 800d03c:	0800f230 	.word	0x0800f230

0800d040 <__ieee754_acosf>:
 800d040:	f020 4200 	bic.w	r2, r0, #2147483648	; 0x80000000
 800d044:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 800d048:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d04a:	4605      	mov	r5, r0
 800d04c:	d104      	bne.n	800d058 <__ieee754_acosf+0x18>
 800d04e:	2800      	cmp	r0, #0
 800d050:	f300 8135 	bgt.w	800d2be <__ieee754_acosf+0x27e>
 800d054:	489c      	ldr	r0, [pc, #624]	; (800d2c8 <__ieee754_acosf+0x288>)
 800d056:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d058:	dd06      	ble.n	800d068 <__ieee754_acosf+0x28>
 800d05a:	4601      	mov	r1, r0
 800d05c:	f7f3 fda6 	bl	8000bac <__aeabi_fsub>
 800d060:	4601      	mov	r1, r0
 800d062:	f7f3 ff61 	bl	8000f28 <__aeabi_fdiv>
 800d066:	e7f6      	b.n	800d056 <__ieee754_acosf+0x16>
 800d068:	f1b2 5f7c 	cmp.w	r2, #1056964608	; 0x3f000000
 800d06c:	da57      	bge.n	800d11e <__ieee754_acosf+0xde>
 800d06e:	f1b2 5f0c 	cmp.w	r2, #587202560	; 0x23000000
 800d072:	f340 8126 	ble.w	800d2c2 <__ieee754_acosf+0x282>
 800d076:	4601      	mov	r1, r0
 800d078:	f7f3 fea2 	bl	8000dc0 <__aeabi_fmul>
 800d07c:	4604      	mov	r4, r0
 800d07e:	4993      	ldr	r1, [pc, #588]	; (800d2cc <__ieee754_acosf+0x28c>)
 800d080:	f7f3 fe9e 	bl	8000dc0 <__aeabi_fmul>
 800d084:	4992      	ldr	r1, [pc, #584]	; (800d2d0 <__ieee754_acosf+0x290>)
 800d086:	f7f3 fd93 	bl	8000bb0 <__addsf3>
 800d08a:	4621      	mov	r1, r4
 800d08c:	f7f3 fe98 	bl	8000dc0 <__aeabi_fmul>
 800d090:	4990      	ldr	r1, [pc, #576]	; (800d2d4 <__ieee754_acosf+0x294>)
 800d092:	f7f3 fd8b 	bl	8000bac <__aeabi_fsub>
 800d096:	4621      	mov	r1, r4
 800d098:	f7f3 fe92 	bl	8000dc0 <__aeabi_fmul>
 800d09c:	498e      	ldr	r1, [pc, #568]	; (800d2d8 <__ieee754_acosf+0x298>)
 800d09e:	f7f3 fd87 	bl	8000bb0 <__addsf3>
 800d0a2:	4621      	mov	r1, r4
 800d0a4:	f7f3 fe8c 	bl	8000dc0 <__aeabi_fmul>
 800d0a8:	498c      	ldr	r1, [pc, #560]	; (800d2dc <__ieee754_acosf+0x29c>)
 800d0aa:	f7f3 fd7f 	bl	8000bac <__aeabi_fsub>
 800d0ae:	4621      	mov	r1, r4
 800d0b0:	f7f3 fe86 	bl	8000dc0 <__aeabi_fmul>
 800d0b4:	498a      	ldr	r1, [pc, #552]	; (800d2e0 <__ieee754_acosf+0x2a0>)
 800d0b6:	f7f3 fd7b 	bl	8000bb0 <__addsf3>
 800d0ba:	4621      	mov	r1, r4
 800d0bc:	f7f3 fe80 	bl	8000dc0 <__aeabi_fmul>
 800d0c0:	4988      	ldr	r1, [pc, #544]	; (800d2e4 <__ieee754_acosf+0x2a4>)
 800d0c2:	4606      	mov	r6, r0
 800d0c4:	4620      	mov	r0, r4
 800d0c6:	f7f3 fe7b 	bl	8000dc0 <__aeabi_fmul>
 800d0ca:	4987      	ldr	r1, [pc, #540]	; (800d2e8 <__ieee754_acosf+0x2a8>)
 800d0cc:	f7f3 fd6e 	bl	8000bac <__aeabi_fsub>
 800d0d0:	4621      	mov	r1, r4
 800d0d2:	f7f3 fe75 	bl	8000dc0 <__aeabi_fmul>
 800d0d6:	4985      	ldr	r1, [pc, #532]	; (800d2ec <__ieee754_acosf+0x2ac>)
 800d0d8:	f7f3 fd6a 	bl	8000bb0 <__addsf3>
 800d0dc:	4621      	mov	r1, r4
 800d0de:	f7f3 fe6f 	bl	8000dc0 <__aeabi_fmul>
 800d0e2:	4983      	ldr	r1, [pc, #524]	; (800d2f0 <__ieee754_acosf+0x2b0>)
 800d0e4:	f7f3 fd62 	bl	8000bac <__aeabi_fsub>
 800d0e8:	4621      	mov	r1, r4
 800d0ea:	f7f3 fe69 	bl	8000dc0 <__aeabi_fmul>
 800d0ee:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800d0f2:	f7f3 fd5d 	bl	8000bb0 <__addsf3>
 800d0f6:	4601      	mov	r1, r0
 800d0f8:	4630      	mov	r0, r6
 800d0fa:	f7f3 ff15 	bl	8000f28 <__aeabi_fdiv>
 800d0fe:	4629      	mov	r1, r5
 800d100:	f7f3 fe5e 	bl	8000dc0 <__aeabi_fmul>
 800d104:	4601      	mov	r1, r0
 800d106:	487b      	ldr	r0, [pc, #492]	; (800d2f4 <__ieee754_acosf+0x2b4>)
 800d108:	f7f3 fd50 	bl	8000bac <__aeabi_fsub>
 800d10c:	4601      	mov	r1, r0
 800d10e:	4628      	mov	r0, r5
 800d110:	f7f3 fd4c 	bl	8000bac <__aeabi_fsub>
 800d114:	4601      	mov	r1, r0
 800d116:	4878      	ldr	r0, [pc, #480]	; (800d2f8 <__ieee754_acosf+0x2b8>)
 800d118:	f7f3 fd48 	bl	8000bac <__aeabi_fsub>
 800d11c:	e79b      	b.n	800d056 <__ieee754_acosf+0x16>
 800d11e:	2800      	cmp	r0, #0
 800d120:	da5b      	bge.n	800d1da <__ieee754_acosf+0x19a>
 800d122:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800d126:	f7f3 fd43 	bl	8000bb0 <__addsf3>
 800d12a:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800d12e:	f7f3 fe47 	bl	8000dc0 <__aeabi_fmul>
 800d132:	4604      	mov	r4, r0
 800d134:	4965      	ldr	r1, [pc, #404]	; (800d2cc <__ieee754_acosf+0x28c>)
 800d136:	f7f3 fe43 	bl	8000dc0 <__aeabi_fmul>
 800d13a:	4965      	ldr	r1, [pc, #404]	; (800d2d0 <__ieee754_acosf+0x290>)
 800d13c:	f7f3 fd38 	bl	8000bb0 <__addsf3>
 800d140:	4621      	mov	r1, r4
 800d142:	f7f3 fe3d 	bl	8000dc0 <__aeabi_fmul>
 800d146:	4963      	ldr	r1, [pc, #396]	; (800d2d4 <__ieee754_acosf+0x294>)
 800d148:	f7f3 fd30 	bl	8000bac <__aeabi_fsub>
 800d14c:	4621      	mov	r1, r4
 800d14e:	f7f3 fe37 	bl	8000dc0 <__aeabi_fmul>
 800d152:	4961      	ldr	r1, [pc, #388]	; (800d2d8 <__ieee754_acosf+0x298>)
 800d154:	f7f3 fd2c 	bl	8000bb0 <__addsf3>
 800d158:	4621      	mov	r1, r4
 800d15a:	f7f3 fe31 	bl	8000dc0 <__aeabi_fmul>
 800d15e:	495f      	ldr	r1, [pc, #380]	; (800d2dc <__ieee754_acosf+0x29c>)
 800d160:	f7f3 fd24 	bl	8000bac <__aeabi_fsub>
 800d164:	4621      	mov	r1, r4
 800d166:	f7f3 fe2b 	bl	8000dc0 <__aeabi_fmul>
 800d16a:	495d      	ldr	r1, [pc, #372]	; (800d2e0 <__ieee754_acosf+0x2a0>)
 800d16c:	f7f3 fd20 	bl	8000bb0 <__addsf3>
 800d170:	4621      	mov	r1, r4
 800d172:	f7f3 fe25 	bl	8000dc0 <__aeabi_fmul>
 800d176:	4606      	mov	r6, r0
 800d178:	4620      	mov	r0, r4
 800d17a:	f000 f8c3 	bl	800d304 <__ieee754_sqrtf>
 800d17e:	4959      	ldr	r1, [pc, #356]	; (800d2e4 <__ieee754_acosf+0x2a4>)
 800d180:	4605      	mov	r5, r0
 800d182:	4620      	mov	r0, r4
 800d184:	f7f3 fe1c 	bl	8000dc0 <__aeabi_fmul>
 800d188:	4957      	ldr	r1, [pc, #348]	; (800d2e8 <__ieee754_acosf+0x2a8>)
 800d18a:	f7f3 fd0f 	bl	8000bac <__aeabi_fsub>
 800d18e:	4621      	mov	r1, r4
 800d190:	f7f3 fe16 	bl	8000dc0 <__aeabi_fmul>
 800d194:	4955      	ldr	r1, [pc, #340]	; (800d2ec <__ieee754_acosf+0x2ac>)
 800d196:	f7f3 fd0b 	bl	8000bb0 <__addsf3>
 800d19a:	4621      	mov	r1, r4
 800d19c:	f7f3 fe10 	bl	8000dc0 <__aeabi_fmul>
 800d1a0:	4953      	ldr	r1, [pc, #332]	; (800d2f0 <__ieee754_acosf+0x2b0>)
 800d1a2:	f7f3 fd03 	bl	8000bac <__aeabi_fsub>
 800d1a6:	4621      	mov	r1, r4
 800d1a8:	f7f3 fe0a 	bl	8000dc0 <__aeabi_fmul>
 800d1ac:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800d1b0:	f7f3 fcfe 	bl	8000bb0 <__addsf3>
 800d1b4:	4601      	mov	r1, r0
 800d1b6:	4630      	mov	r0, r6
 800d1b8:	f7f3 feb6 	bl	8000f28 <__aeabi_fdiv>
 800d1bc:	4629      	mov	r1, r5
 800d1be:	f7f3 fdff 	bl	8000dc0 <__aeabi_fmul>
 800d1c2:	494c      	ldr	r1, [pc, #304]	; (800d2f4 <__ieee754_acosf+0x2b4>)
 800d1c4:	f7f3 fcf2 	bl	8000bac <__aeabi_fsub>
 800d1c8:	4629      	mov	r1, r5
 800d1ca:	f7f3 fcf1 	bl	8000bb0 <__addsf3>
 800d1ce:	4601      	mov	r1, r0
 800d1d0:	f7f3 fcee 	bl	8000bb0 <__addsf3>
 800d1d4:	4601      	mov	r1, r0
 800d1d6:	4849      	ldr	r0, [pc, #292]	; (800d2fc <__ieee754_acosf+0x2bc>)
 800d1d8:	e79e      	b.n	800d118 <__ieee754_acosf+0xd8>
 800d1da:	4601      	mov	r1, r0
 800d1dc:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800d1e0:	f7f3 fce4 	bl	8000bac <__aeabi_fsub>
 800d1e4:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800d1e8:	f7f3 fdea 	bl	8000dc0 <__aeabi_fmul>
 800d1ec:	4604      	mov	r4, r0
 800d1ee:	f000 f889 	bl	800d304 <__ieee754_sqrtf>
 800d1f2:	4936      	ldr	r1, [pc, #216]	; (800d2cc <__ieee754_acosf+0x28c>)
 800d1f4:	4606      	mov	r6, r0
 800d1f6:	f420 657f 	bic.w	r5, r0, #4080	; 0xff0
 800d1fa:	4620      	mov	r0, r4
 800d1fc:	f7f3 fde0 	bl	8000dc0 <__aeabi_fmul>
 800d200:	4933      	ldr	r1, [pc, #204]	; (800d2d0 <__ieee754_acosf+0x290>)
 800d202:	f7f3 fcd5 	bl	8000bb0 <__addsf3>
 800d206:	4621      	mov	r1, r4
 800d208:	f7f3 fdda 	bl	8000dc0 <__aeabi_fmul>
 800d20c:	4931      	ldr	r1, [pc, #196]	; (800d2d4 <__ieee754_acosf+0x294>)
 800d20e:	f7f3 fccd 	bl	8000bac <__aeabi_fsub>
 800d212:	4621      	mov	r1, r4
 800d214:	f7f3 fdd4 	bl	8000dc0 <__aeabi_fmul>
 800d218:	492f      	ldr	r1, [pc, #188]	; (800d2d8 <__ieee754_acosf+0x298>)
 800d21a:	f7f3 fcc9 	bl	8000bb0 <__addsf3>
 800d21e:	4621      	mov	r1, r4
 800d220:	f7f3 fdce 	bl	8000dc0 <__aeabi_fmul>
 800d224:	492d      	ldr	r1, [pc, #180]	; (800d2dc <__ieee754_acosf+0x29c>)
 800d226:	f7f3 fcc1 	bl	8000bac <__aeabi_fsub>
 800d22a:	4621      	mov	r1, r4
 800d22c:	f7f3 fdc8 	bl	8000dc0 <__aeabi_fmul>
 800d230:	492b      	ldr	r1, [pc, #172]	; (800d2e0 <__ieee754_acosf+0x2a0>)
 800d232:	f7f3 fcbd 	bl	8000bb0 <__addsf3>
 800d236:	4621      	mov	r1, r4
 800d238:	f7f3 fdc2 	bl	8000dc0 <__aeabi_fmul>
 800d23c:	4929      	ldr	r1, [pc, #164]	; (800d2e4 <__ieee754_acosf+0x2a4>)
 800d23e:	4607      	mov	r7, r0
 800d240:	4620      	mov	r0, r4
 800d242:	f7f3 fdbd 	bl	8000dc0 <__aeabi_fmul>
 800d246:	4928      	ldr	r1, [pc, #160]	; (800d2e8 <__ieee754_acosf+0x2a8>)
 800d248:	f7f3 fcb0 	bl	8000bac <__aeabi_fsub>
 800d24c:	4621      	mov	r1, r4
 800d24e:	f7f3 fdb7 	bl	8000dc0 <__aeabi_fmul>
 800d252:	4926      	ldr	r1, [pc, #152]	; (800d2ec <__ieee754_acosf+0x2ac>)
 800d254:	f7f3 fcac 	bl	8000bb0 <__addsf3>
 800d258:	4621      	mov	r1, r4
 800d25a:	f7f3 fdb1 	bl	8000dc0 <__aeabi_fmul>
 800d25e:	4924      	ldr	r1, [pc, #144]	; (800d2f0 <__ieee754_acosf+0x2b0>)
 800d260:	f7f3 fca4 	bl	8000bac <__aeabi_fsub>
 800d264:	4621      	mov	r1, r4
 800d266:	f7f3 fdab 	bl	8000dc0 <__aeabi_fmul>
 800d26a:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800d26e:	f7f3 fc9f 	bl	8000bb0 <__addsf3>
 800d272:	4601      	mov	r1, r0
 800d274:	4638      	mov	r0, r7
 800d276:	f7f3 fe57 	bl	8000f28 <__aeabi_fdiv>
 800d27a:	4631      	mov	r1, r6
 800d27c:	f7f3 fda0 	bl	8000dc0 <__aeabi_fmul>
 800d280:	f025 050f 	bic.w	r5, r5, #15
 800d284:	4607      	mov	r7, r0
 800d286:	4629      	mov	r1, r5
 800d288:	4628      	mov	r0, r5
 800d28a:	f7f3 fd99 	bl	8000dc0 <__aeabi_fmul>
 800d28e:	4601      	mov	r1, r0
 800d290:	4620      	mov	r0, r4
 800d292:	f7f3 fc8b 	bl	8000bac <__aeabi_fsub>
 800d296:	4629      	mov	r1, r5
 800d298:	4604      	mov	r4, r0
 800d29a:	4630      	mov	r0, r6
 800d29c:	f7f3 fc88 	bl	8000bb0 <__addsf3>
 800d2a0:	4601      	mov	r1, r0
 800d2a2:	4620      	mov	r0, r4
 800d2a4:	f7f3 fe40 	bl	8000f28 <__aeabi_fdiv>
 800d2a8:	4601      	mov	r1, r0
 800d2aa:	4638      	mov	r0, r7
 800d2ac:	f7f3 fc80 	bl	8000bb0 <__addsf3>
 800d2b0:	4629      	mov	r1, r5
 800d2b2:	f7f3 fc7d 	bl	8000bb0 <__addsf3>
 800d2b6:	4601      	mov	r1, r0
 800d2b8:	f7f3 fc7a 	bl	8000bb0 <__addsf3>
 800d2bc:	e6cb      	b.n	800d056 <__ieee754_acosf+0x16>
 800d2be:	2000      	movs	r0, #0
 800d2c0:	e6c9      	b.n	800d056 <__ieee754_acosf+0x16>
 800d2c2:	480f      	ldr	r0, [pc, #60]	; (800d300 <__ieee754_acosf+0x2c0>)
 800d2c4:	e6c7      	b.n	800d056 <__ieee754_acosf+0x16>
 800d2c6:	bf00      	nop
 800d2c8:	40490fdb 	.word	0x40490fdb
 800d2cc:	3811ef08 	.word	0x3811ef08
 800d2d0:	3a4f7f04 	.word	0x3a4f7f04
 800d2d4:	3d241146 	.word	0x3d241146
 800d2d8:	3e4e0aa8 	.word	0x3e4e0aa8
 800d2dc:	3ea6b090 	.word	0x3ea6b090
 800d2e0:	3e2aaaab 	.word	0x3e2aaaab
 800d2e4:	3d9dc62e 	.word	0x3d9dc62e
 800d2e8:	3f303361 	.word	0x3f303361
 800d2ec:	4001572d 	.word	0x4001572d
 800d2f0:	4019d139 	.word	0x4019d139
 800d2f4:	33a22168 	.word	0x33a22168
 800d2f8:	3fc90fda 	.word	0x3fc90fda
 800d2fc:	40490fda 	.word	0x40490fda
 800d300:	3fc90fdb 	.word	0x3fc90fdb

0800d304 <__ieee754_sqrtf>:
 800d304:	f020 4200 	bic.w	r2, r0, #2147483648	; 0x80000000
 800d308:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800d30c:	b570      	push	{r4, r5, r6, lr}
 800d30e:	4603      	mov	r3, r0
 800d310:	4604      	mov	r4, r0
 800d312:	d309      	bcc.n	800d328 <__ieee754_sqrtf+0x24>
 800d314:	4601      	mov	r1, r0
 800d316:	f7f3 fd53 	bl	8000dc0 <__aeabi_fmul>
 800d31a:	4601      	mov	r1, r0
 800d31c:	4620      	mov	r0, r4
 800d31e:	f7f3 fc47 	bl	8000bb0 <__addsf3>
 800d322:	4604      	mov	r4, r0
 800d324:	4620      	mov	r0, r4
 800d326:	bd70      	pop	{r4, r5, r6, pc}
 800d328:	2a00      	cmp	r2, #0
 800d32a:	d0fb      	beq.n	800d324 <__ieee754_sqrtf+0x20>
 800d32c:	2800      	cmp	r0, #0
 800d32e:	da06      	bge.n	800d33e <__ieee754_sqrtf+0x3a>
 800d330:	4601      	mov	r1, r0
 800d332:	f7f3 fc3b 	bl	8000bac <__aeabi_fsub>
 800d336:	4601      	mov	r1, r0
 800d338:	f7f3 fdf6 	bl	8000f28 <__aeabi_fdiv>
 800d33c:	e7f1      	b.n	800d322 <__ieee754_sqrtf+0x1e>
 800d33e:	f010 42ff 	ands.w	r2, r0, #2139095040	; 0x7f800000
 800d342:	ea4f 51e0 	mov.w	r1, r0, asr #23
 800d346:	d029      	beq.n	800d39c <__ieee754_sqrtf+0x98>
 800d348:	f3c3 0216 	ubfx	r2, r3, #0, #23
 800d34c:	07cb      	lsls	r3, r1, #31
 800d34e:	f04f 0300 	mov.w	r3, #0
 800d352:	f1a1 007f 	sub.w	r0, r1, #127	; 0x7f
 800d356:	f04f 0419 	mov.w	r4, #25
 800d35a:	461e      	mov	r6, r3
 800d35c:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
 800d360:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800d364:	bf58      	it	pl
 800d366:	0052      	lslpl	r2, r2, #1
 800d368:	1040      	asrs	r0, r0, #1
 800d36a:	0052      	lsls	r2, r2, #1
 800d36c:	1875      	adds	r5, r6, r1
 800d36e:	4295      	cmp	r5, r2
 800d370:	bfde      	ittt	le
 800d372:	186e      	addle	r6, r5, r1
 800d374:	1b52      	suble	r2, r2, r5
 800d376:	185b      	addle	r3, r3, r1
 800d378:	3c01      	subs	r4, #1
 800d37a:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800d37e:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800d382:	d1f3      	bne.n	800d36c <__ieee754_sqrtf+0x68>
 800d384:	b112      	cbz	r2, 800d38c <__ieee754_sqrtf+0x88>
 800d386:	3301      	adds	r3, #1
 800d388:	f023 0301 	bic.w	r3, r3, #1
 800d38c:	105c      	asrs	r4, r3, #1
 800d38e:	f104 547c 	add.w	r4, r4, #1056964608	; 0x3f000000
 800d392:	eb04 54c0 	add.w	r4, r4, r0, lsl #23
 800d396:	e7c5      	b.n	800d324 <__ieee754_sqrtf+0x20>
 800d398:	005b      	lsls	r3, r3, #1
 800d39a:	3201      	adds	r2, #1
 800d39c:	0218      	lsls	r0, r3, #8
 800d39e:	d5fb      	bpl.n	800d398 <__ieee754_sqrtf+0x94>
 800d3a0:	3a01      	subs	r2, #1
 800d3a2:	1a89      	subs	r1, r1, r2
 800d3a4:	e7d0      	b.n	800d348 <__ieee754_sqrtf+0x44>
	...

0800d3a8 <__kernel_cos>:
 800d3a8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d3ac:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800d3b0:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 800d3b4:	4680      	mov	r8, r0
 800d3b6:	460f      	mov	r7, r1
 800d3b8:	e9cd 2300 	strd	r2, r3, [sp]
 800d3bc:	da04      	bge.n	800d3c8 <__kernel_cos+0x20>
 800d3be:	f7f3 fb59 	bl	8000a74 <__aeabi_d2iz>
 800d3c2:	2800      	cmp	r0, #0
 800d3c4:	f000 8086 	beq.w	800d4d4 <__kernel_cos+0x12c>
 800d3c8:	4642      	mov	r2, r8
 800d3ca:	463b      	mov	r3, r7
 800d3cc:	4640      	mov	r0, r8
 800d3ce:	4639      	mov	r1, r7
 800d3d0:	f7f3 f8b6 	bl	8000540 <__aeabi_dmul>
 800d3d4:	2200      	movs	r2, #0
 800d3d6:	4b4e      	ldr	r3, [pc, #312]	; (800d510 <__kernel_cos+0x168>)
 800d3d8:	4604      	mov	r4, r0
 800d3da:	460d      	mov	r5, r1
 800d3dc:	f7f3 f8b0 	bl	8000540 <__aeabi_dmul>
 800d3e0:	a33f      	add	r3, pc, #252	; (adr r3, 800d4e0 <__kernel_cos+0x138>)
 800d3e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d3e6:	4682      	mov	sl, r0
 800d3e8:	468b      	mov	fp, r1
 800d3ea:	4620      	mov	r0, r4
 800d3ec:	4629      	mov	r1, r5
 800d3ee:	f7f3 f8a7 	bl	8000540 <__aeabi_dmul>
 800d3f2:	a33d      	add	r3, pc, #244	; (adr r3, 800d4e8 <__kernel_cos+0x140>)
 800d3f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d3f8:	f7f2 feec 	bl	80001d4 <__adddf3>
 800d3fc:	4622      	mov	r2, r4
 800d3fe:	462b      	mov	r3, r5
 800d400:	f7f3 f89e 	bl	8000540 <__aeabi_dmul>
 800d404:	a33a      	add	r3, pc, #232	; (adr r3, 800d4f0 <__kernel_cos+0x148>)
 800d406:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d40a:	f7f2 fee1 	bl	80001d0 <__aeabi_dsub>
 800d40e:	4622      	mov	r2, r4
 800d410:	462b      	mov	r3, r5
 800d412:	f7f3 f895 	bl	8000540 <__aeabi_dmul>
 800d416:	a338      	add	r3, pc, #224	; (adr r3, 800d4f8 <__kernel_cos+0x150>)
 800d418:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d41c:	f7f2 feda 	bl	80001d4 <__adddf3>
 800d420:	4622      	mov	r2, r4
 800d422:	462b      	mov	r3, r5
 800d424:	f7f3 f88c 	bl	8000540 <__aeabi_dmul>
 800d428:	a335      	add	r3, pc, #212	; (adr r3, 800d500 <__kernel_cos+0x158>)
 800d42a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d42e:	f7f2 fecf 	bl	80001d0 <__aeabi_dsub>
 800d432:	4622      	mov	r2, r4
 800d434:	462b      	mov	r3, r5
 800d436:	f7f3 f883 	bl	8000540 <__aeabi_dmul>
 800d43a:	a333      	add	r3, pc, #204	; (adr r3, 800d508 <__kernel_cos+0x160>)
 800d43c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d440:	f7f2 fec8 	bl	80001d4 <__adddf3>
 800d444:	4622      	mov	r2, r4
 800d446:	462b      	mov	r3, r5
 800d448:	f7f3 f87a 	bl	8000540 <__aeabi_dmul>
 800d44c:	4622      	mov	r2, r4
 800d44e:	462b      	mov	r3, r5
 800d450:	f7f3 f876 	bl	8000540 <__aeabi_dmul>
 800d454:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d458:	4604      	mov	r4, r0
 800d45a:	460d      	mov	r5, r1
 800d45c:	4640      	mov	r0, r8
 800d45e:	4639      	mov	r1, r7
 800d460:	f7f3 f86e 	bl	8000540 <__aeabi_dmul>
 800d464:	460b      	mov	r3, r1
 800d466:	4602      	mov	r2, r0
 800d468:	4629      	mov	r1, r5
 800d46a:	4620      	mov	r0, r4
 800d46c:	f7f2 feb0 	bl	80001d0 <__aeabi_dsub>
 800d470:	4b28      	ldr	r3, [pc, #160]	; (800d514 <__kernel_cos+0x16c>)
 800d472:	4680      	mov	r8, r0
 800d474:	429e      	cmp	r6, r3
 800d476:	4689      	mov	r9, r1
 800d478:	dc0e      	bgt.n	800d498 <__kernel_cos+0xf0>
 800d47a:	4602      	mov	r2, r0
 800d47c:	460b      	mov	r3, r1
 800d47e:	4650      	mov	r0, sl
 800d480:	4659      	mov	r1, fp
 800d482:	f7f2 fea5 	bl	80001d0 <__aeabi_dsub>
 800d486:	4602      	mov	r2, r0
 800d488:	2000      	movs	r0, #0
 800d48a:	460b      	mov	r3, r1
 800d48c:	4922      	ldr	r1, [pc, #136]	; (800d518 <__kernel_cos+0x170>)
 800d48e:	f7f2 fe9f 	bl	80001d0 <__aeabi_dsub>
 800d492:	b003      	add	sp, #12
 800d494:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d498:	2400      	movs	r4, #0
 800d49a:	4b20      	ldr	r3, [pc, #128]	; (800d51c <__kernel_cos+0x174>)
 800d49c:	4622      	mov	r2, r4
 800d49e:	429e      	cmp	r6, r3
 800d4a0:	bfcc      	ite	gt
 800d4a2:	4d1f      	ldrgt	r5, [pc, #124]	; (800d520 <__kernel_cos+0x178>)
 800d4a4:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 800d4a8:	462b      	mov	r3, r5
 800d4aa:	2000      	movs	r0, #0
 800d4ac:	491a      	ldr	r1, [pc, #104]	; (800d518 <__kernel_cos+0x170>)
 800d4ae:	f7f2 fe8f 	bl	80001d0 <__aeabi_dsub>
 800d4b2:	4622      	mov	r2, r4
 800d4b4:	4606      	mov	r6, r0
 800d4b6:	460f      	mov	r7, r1
 800d4b8:	462b      	mov	r3, r5
 800d4ba:	4650      	mov	r0, sl
 800d4bc:	4659      	mov	r1, fp
 800d4be:	f7f2 fe87 	bl	80001d0 <__aeabi_dsub>
 800d4c2:	4642      	mov	r2, r8
 800d4c4:	464b      	mov	r3, r9
 800d4c6:	f7f2 fe83 	bl	80001d0 <__aeabi_dsub>
 800d4ca:	4602      	mov	r2, r0
 800d4cc:	460b      	mov	r3, r1
 800d4ce:	4630      	mov	r0, r6
 800d4d0:	4639      	mov	r1, r7
 800d4d2:	e7dc      	b.n	800d48e <__kernel_cos+0xe6>
 800d4d4:	2000      	movs	r0, #0
 800d4d6:	4910      	ldr	r1, [pc, #64]	; (800d518 <__kernel_cos+0x170>)
 800d4d8:	e7db      	b.n	800d492 <__kernel_cos+0xea>
 800d4da:	bf00      	nop
 800d4dc:	f3af 8000 	nop.w
 800d4e0:	be8838d4 	.word	0xbe8838d4
 800d4e4:	bda8fae9 	.word	0xbda8fae9
 800d4e8:	bdb4b1c4 	.word	0xbdb4b1c4
 800d4ec:	3e21ee9e 	.word	0x3e21ee9e
 800d4f0:	809c52ad 	.word	0x809c52ad
 800d4f4:	3e927e4f 	.word	0x3e927e4f
 800d4f8:	19cb1590 	.word	0x19cb1590
 800d4fc:	3efa01a0 	.word	0x3efa01a0
 800d500:	16c15177 	.word	0x16c15177
 800d504:	3f56c16c 	.word	0x3f56c16c
 800d508:	5555554c 	.word	0x5555554c
 800d50c:	3fa55555 	.word	0x3fa55555
 800d510:	3fe00000 	.word	0x3fe00000
 800d514:	3fd33332 	.word	0x3fd33332
 800d518:	3ff00000 	.word	0x3ff00000
 800d51c:	3fe90000 	.word	0x3fe90000
 800d520:	3fd20000 	.word	0x3fd20000

0800d524 <__kernel_rem_pio2>:
 800d524:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d528:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 800d52c:	9308      	str	r3, [sp, #32]
 800d52e:	9101      	str	r1, [sp, #4]
 800d530:	4bc0      	ldr	r3, [pc, #768]	; (800d834 <__kernel_rem_pio2+0x310>)
 800d532:	99a2      	ldr	r1, [sp, #648]	; 0x288
 800d534:	f112 0f14 	cmn.w	r2, #20
 800d538:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800d53c:	bfa8      	it	ge
 800d53e:	1ed4      	subge	r4, r2, #3
 800d540:	9304      	str	r3, [sp, #16]
 800d542:	9b08      	ldr	r3, [sp, #32]
 800d544:	bfb8      	it	lt
 800d546:	2400      	movlt	r4, #0
 800d548:	f103 33ff 	add.w	r3, r3, #4294967295
 800d54c:	9306      	str	r3, [sp, #24]
 800d54e:	bfa4      	itt	ge
 800d550:	2318      	movge	r3, #24
 800d552:	fb94 f4f3 	sdivge	r4, r4, r3
 800d556:	f06f 0317 	mvn.w	r3, #23
 800d55a:	fb04 3303 	mla	r3, r4, r3, r3
 800d55e:	eb03 0a02 	add.w	sl, r3, r2
 800d562:	9a06      	ldr	r2, [sp, #24]
 800d564:	9b04      	ldr	r3, [sp, #16]
 800d566:	1aa7      	subs	r7, r4, r2
 800d568:	eb03 0802 	add.w	r8, r3, r2
 800d56c:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 800d56e:	2500      	movs	r5, #0
 800d570:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800d574:	2200      	movs	r2, #0
 800d576:	2300      	movs	r3, #0
 800d578:	9009      	str	r0, [sp, #36]	; 0x24
 800d57a:	ae20      	add	r6, sp, #128	; 0x80
 800d57c:	4545      	cmp	r5, r8
 800d57e:	dd19      	ble.n	800d5b4 <__kernel_rem_pio2+0x90>
 800d580:	9b08      	ldr	r3, [sp, #32]
 800d582:	aa20      	add	r2, sp, #128	; 0x80
 800d584:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800d588:	f8dd 8018 	ldr.w	r8, [sp, #24]
 800d58c:	f1c3 0301 	rsb	r3, r3, #1
 800d590:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 800d594:	9307      	str	r3, [sp, #28]
 800d596:	9b07      	ldr	r3, [sp, #28]
 800d598:	9a04      	ldr	r2, [sp, #16]
 800d59a:	4443      	add	r3, r8
 800d59c:	429a      	cmp	r2, r3
 800d59e:	db35      	blt.n	800d60c <__kernel_rem_pio2+0xe8>
 800d5a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d5a2:	2200      	movs	r2, #0
 800d5a4:	f1a3 0908 	sub.w	r9, r3, #8
 800d5a8:	2300      	movs	r3, #0
 800d5aa:	462f      	mov	r7, r5
 800d5ac:	2600      	movs	r6, #0
 800d5ae:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800d5b2:	e01f      	b.n	800d5f4 <__kernel_rem_pio2+0xd0>
 800d5b4:	42ef      	cmn	r7, r5
 800d5b6:	d40b      	bmi.n	800d5d0 <__kernel_rem_pio2+0xac>
 800d5b8:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800d5bc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800d5c0:	f7f2 ff54 	bl	800046c <__aeabi_i2d>
 800d5c4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d5c8:	e8e6 0102 	strd	r0, r1, [r6], #8
 800d5cc:	3501      	adds	r5, #1
 800d5ce:	e7d5      	b.n	800d57c <__kernel_rem_pio2+0x58>
 800d5d0:	4610      	mov	r0, r2
 800d5d2:	4619      	mov	r1, r3
 800d5d4:	e7f8      	b.n	800d5c8 <__kernel_rem_pio2+0xa4>
 800d5d6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d5da:	e9f9 0102 	ldrd	r0, r1, [r9, #8]!
 800d5de:	f7f2 ffaf 	bl	8000540 <__aeabi_dmul>
 800d5e2:	4602      	mov	r2, r0
 800d5e4:	460b      	mov	r3, r1
 800d5e6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d5ea:	f7f2 fdf3 	bl	80001d4 <__adddf3>
 800d5ee:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d5f2:	3601      	adds	r6, #1
 800d5f4:	9b06      	ldr	r3, [sp, #24]
 800d5f6:	3f08      	subs	r7, #8
 800d5f8:	429e      	cmp	r6, r3
 800d5fa:	ddec      	ble.n	800d5d6 <__kernel_rem_pio2+0xb2>
 800d5fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d600:	3508      	adds	r5, #8
 800d602:	e8eb 2302 	strd	r2, r3, [fp], #8
 800d606:	f108 0801 	add.w	r8, r8, #1
 800d60a:	e7c4      	b.n	800d596 <__kernel_rem_pio2+0x72>
 800d60c:	9b04      	ldr	r3, [sp, #16]
 800d60e:	aa0c      	add	r2, sp, #48	; 0x30
 800d610:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800d614:	930b      	str	r3, [sp, #44]	; 0x2c
 800d616:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 800d618:	9f04      	ldr	r7, [sp, #16]
 800d61a:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800d61e:	930a      	str	r3, [sp, #40]	; 0x28
 800d620:	463e      	mov	r6, r7
 800d622:	ab98      	add	r3, sp, #608	; 0x260
 800d624:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
 800d628:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800d62c:	f8cd b008 	str.w	fp, [sp, #8]
 800d630:	e953 4528 	ldrd	r4, r5, [r3, #-160]	; 0xa0
 800d634:	2e00      	cmp	r6, #0
 800d636:	dc71      	bgt.n	800d71c <__kernel_rem_pio2+0x1f8>
 800d638:	4652      	mov	r2, sl
 800d63a:	4620      	mov	r0, r4
 800d63c:	4629      	mov	r1, r5
 800d63e:	f000 fbf7 	bl	800de30 <scalbn>
 800d642:	2200      	movs	r2, #0
 800d644:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800d648:	4604      	mov	r4, r0
 800d64a:	460d      	mov	r5, r1
 800d64c:	f7f2 ff78 	bl	8000540 <__aeabi_dmul>
 800d650:	f000 fb6e 	bl	800dd30 <floor>
 800d654:	2200      	movs	r2, #0
 800d656:	4b78      	ldr	r3, [pc, #480]	; (800d838 <__kernel_rem_pio2+0x314>)
 800d658:	f7f2 ff72 	bl	8000540 <__aeabi_dmul>
 800d65c:	4602      	mov	r2, r0
 800d65e:	460b      	mov	r3, r1
 800d660:	4620      	mov	r0, r4
 800d662:	4629      	mov	r1, r5
 800d664:	f7f2 fdb4 	bl	80001d0 <__aeabi_dsub>
 800d668:	460d      	mov	r5, r1
 800d66a:	4604      	mov	r4, r0
 800d66c:	f7f3 fa02 	bl	8000a74 <__aeabi_d2iz>
 800d670:	9007      	str	r0, [sp, #28]
 800d672:	f7f2 fefb 	bl	800046c <__aeabi_i2d>
 800d676:	4602      	mov	r2, r0
 800d678:	460b      	mov	r3, r1
 800d67a:	4620      	mov	r0, r4
 800d67c:	4629      	mov	r1, r5
 800d67e:	f7f2 fda7 	bl	80001d0 <__aeabi_dsub>
 800d682:	f1ba 0f00 	cmp.w	sl, #0
 800d686:	4680      	mov	r8, r0
 800d688:	4689      	mov	r9, r1
 800d68a:	dd70      	ble.n	800d76e <__kernel_rem_pio2+0x24a>
 800d68c:	1e7a      	subs	r2, r7, #1
 800d68e:	ab0c      	add	r3, sp, #48	; 0x30
 800d690:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800d694:	9c07      	ldr	r4, [sp, #28]
 800d696:	f1ca 0118 	rsb	r1, sl, #24
 800d69a:	fa40 f301 	asr.w	r3, r0, r1
 800d69e:	441c      	add	r4, r3
 800d6a0:	408b      	lsls	r3, r1
 800d6a2:	1ac0      	subs	r0, r0, r3
 800d6a4:	ab0c      	add	r3, sp, #48	; 0x30
 800d6a6:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800d6aa:	f1ca 0317 	rsb	r3, sl, #23
 800d6ae:	9407      	str	r4, [sp, #28]
 800d6b0:	fa40 f303 	asr.w	r3, r0, r3
 800d6b4:	9302      	str	r3, [sp, #8]
 800d6b6:	9b02      	ldr	r3, [sp, #8]
 800d6b8:	2b00      	cmp	r3, #0
 800d6ba:	dd66      	ble.n	800d78a <__kernel_rem_pio2+0x266>
 800d6bc:	2200      	movs	r2, #0
 800d6be:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800d6c2:	4614      	mov	r4, r2
 800d6c4:	9b07      	ldr	r3, [sp, #28]
 800d6c6:	3301      	adds	r3, #1
 800d6c8:	9307      	str	r3, [sp, #28]
 800d6ca:	4297      	cmp	r7, r2
 800d6cc:	f300 809f 	bgt.w	800d80e <__kernel_rem_pio2+0x2ea>
 800d6d0:	f1ba 0f00 	cmp.w	sl, #0
 800d6d4:	dd07      	ble.n	800d6e6 <__kernel_rem_pio2+0x1c2>
 800d6d6:	f1ba 0f01 	cmp.w	sl, #1
 800d6da:	f000 80b9 	beq.w	800d850 <__kernel_rem_pio2+0x32c>
 800d6de:	f1ba 0f02 	cmp.w	sl, #2
 800d6e2:	f000 80bf 	beq.w	800d864 <__kernel_rem_pio2+0x340>
 800d6e6:	9b02      	ldr	r3, [sp, #8]
 800d6e8:	2b02      	cmp	r3, #2
 800d6ea:	d14e      	bne.n	800d78a <__kernel_rem_pio2+0x266>
 800d6ec:	4642      	mov	r2, r8
 800d6ee:	464b      	mov	r3, r9
 800d6f0:	2000      	movs	r0, #0
 800d6f2:	4952      	ldr	r1, [pc, #328]	; (800d83c <__kernel_rem_pio2+0x318>)
 800d6f4:	f7f2 fd6c 	bl	80001d0 <__aeabi_dsub>
 800d6f8:	4680      	mov	r8, r0
 800d6fa:	4689      	mov	r9, r1
 800d6fc:	2c00      	cmp	r4, #0
 800d6fe:	d044      	beq.n	800d78a <__kernel_rem_pio2+0x266>
 800d700:	4652      	mov	r2, sl
 800d702:	2000      	movs	r0, #0
 800d704:	494d      	ldr	r1, [pc, #308]	; (800d83c <__kernel_rem_pio2+0x318>)
 800d706:	f000 fb93 	bl	800de30 <scalbn>
 800d70a:	4602      	mov	r2, r0
 800d70c:	460b      	mov	r3, r1
 800d70e:	4640      	mov	r0, r8
 800d710:	4649      	mov	r1, r9
 800d712:	f7f2 fd5d 	bl	80001d0 <__aeabi_dsub>
 800d716:	4680      	mov	r8, r0
 800d718:	4689      	mov	r9, r1
 800d71a:	e036      	b.n	800d78a <__kernel_rem_pio2+0x266>
 800d71c:	2200      	movs	r2, #0
 800d71e:	4b48      	ldr	r3, [pc, #288]	; (800d840 <__kernel_rem_pio2+0x31c>)
 800d720:	4620      	mov	r0, r4
 800d722:	4629      	mov	r1, r5
 800d724:	f7f2 ff0c 	bl	8000540 <__aeabi_dmul>
 800d728:	f7f3 f9a4 	bl	8000a74 <__aeabi_d2iz>
 800d72c:	f7f2 fe9e 	bl	800046c <__aeabi_i2d>
 800d730:	2200      	movs	r2, #0
 800d732:	4b44      	ldr	r3, [pc, #272]	; (800d844 <__kernel_rem_pio2+0x320>)
 800d734:	4680      	mov	r8, r0
 800d736:	4689      	mov	r9, r1
 800d738:	f7f2 ff02 	bl	8000540 <__aeabi_dmul>
 800d73c:	4602      	mov	r2, r0
 800d73e:	460b      	mov	r3, r1
 800d740:	4620      	mov	r0, r4
 800d742:	4629      	mov	r1, r5
 800d744:	f7f2 fd44 	bl	80001d0 <__aeabi_dsub>
 800d748:	f7f3 f994 	bl	8000a74 <__aeabi_d2iz>
 800d74c:	9b02      	ldr	r3, [sp, #8]
 800d74e:	3e01      	subs	r6, #1
 800d750:	f843 0b04 	str.w	r0, [r3], #4
 800d754:	9302      	str	r3, [sp, #8]
 800d756:	ab70      	add	r3, sp, #448	; 0x1c0
 800d758:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800d75c:	4640      	mov	r0, r8
 800d75e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d762:	4649      	mov	r1, r9
 800d764:	f7f2 fd36 	bl	80001d4 <__adddf3>
 800d768:	4604      	mov	r4, r0
 800d76a:	460d      	mov	r5, r1
 800d76c:	e762      	b.n	800d634 <__kernel_rem_pio2+0x110>
 800d76e:	d105      	bne.n	800d77c <__kernel_rem_pio2+0x258>
 800d770:	1e7b      	subs	r3, r7, #1
 800d772:	aa0c      	add	r2, sp, #48	; 0x30
 800d774:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800d778:	15c3      	asrs	r3, r0, #23
 800d77a:	e79b      	b.n	800d6b4 <__kernel_rem_pio2+0x190>
 800d77c:	2200      	movs	r2, #0
 800d77e:	4b32      	ldr	r3, [pc, #200]	; (800d848 <__kernel_rem_pio2+0x324>)
 800d780:	f7f3 f964 	bl	8000a4c <__aeabi_dcmpge>
 800d784:	2800      	cmp	r0, #0
 800d786:	d13f      	bne.n	800d808 <__kernel_rem_pio2+0x2e4>
 800d788:	9002      	str	r0, [sp, #8]
 800d78a:	2200      	movs	r2, #0
 800d78c:	2300      	movs	r3, #0
 800d78e:	4640      	mov	r0, r8
 800d790:	4649      	mov	r1, r9
 800d792:	f7f3 f93d 	bl	8000a10 <__aeabi_dcmpeq>
 800d796:	2800      	cmp	r0, #0
 800d798:	f000 80b5 	beq.w	800d906 <__kernel_rem_pio2+0x3e2>
 800d79c:	1e7c      	subs	r4, r7, #1
 800d79e:	4623      	mov	r3, r4
 800d7a0:	2200      	movs	r2, #0
 800d7a2:	9904      	ldr	r1, [sp, #16]
 800d7a4:	428b      	cmp	r3, r1
 800d7a6:	da64      	bge.n	800d872 <__kernel_rem_pio2+0x34e>
 800d7a8:	2a00      	cmp	r2, #0
 800d7aa:	d078      	beq.n	800d89e <__kernel_rem_pio2+0x37a>
 800d7ac:	ab0c      	add	r3, sp, #48	; 0x30
 800d7ae:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800d7b2:	f1aa 0a18 	sub.w	sl, sl, #24
 800d7b6:	2b00      	cmp	r3, #0
 800d7b8:	f000 80a3 	beq.w	800d902 <__kernel_rem_pio2+0x3de>
 800d7bc:	4652      	mov	r2, sl
 800d7be:	2000      	movs	r0, #0
 800d7c0:	491e      	ldr	r1, [pc, #120]	; (800d83c <__kernel_rem_pio2+0x318>)
 800d7c2:	f000 fb35 	bl	800de30 <scalbn>
 800d7c6:	46a2      	mov	sl, r4
 800d7c8:	4606      	mov	r6, r0
 800d7ca:	460f      	mov	r7, r1
 800d7cc:	f04f 0800 	mov.w	r8, #0
 800d7d0:	00e3      	lsls	r3, r4, #3
 800d7d2:	9306      	str	r3, [sp, #24]
 800d7d4:	f8df 9068 	ldr.w	r9, [pc, #104]	; 800d840 <__kernel_rem_pio2+0x31c>
 800d7d8:	ab70      	add	r3, sp, #448	; 0x1c0
 800d7da:	eb03 0bc4 	add.w	fp, r3, r4, lsl #3
 800d7de:	f1ba 0f00 	cmp.w	sl, #0
 800d7e2:	f280 80c6 	bge.w	800d972 <__kernel_rem_pio2+0x44e>
 800d7e6:	4627      	mov	r7, r4
 800d7e8:	f04f 0800 	mov.w	r8, #0
 800d7ec:	2f00      	cmp	r7, #0
 800d7ee:	f2c0 80f3 	blt.w	800d9d8 <__kernel_rem_pio2+0x4b4>
 800d7f2:	4b16      	ldr	r3, [pc, #88]	; (800d84c <__kernel_rem_pio2+0x328>)
 800d7f4:	f04f 0a00 	mov.w	sl, #0
 800d7f8:	461d      	mov	r5, r3
 800d7fa:	ab70      	add	r3, sp, #448	; 0x1c0
 800d7fc:	f04f 0b00 	mov.w	fp, #0
 800d800:	2600      	movs	r6, #0
 800d802:	eb03 09c7 	add.w	r9, r3, r7, lsl #3
 800d806:	e0d9      	b.n	800d9bc <__kernel_rem_pio2+0x498>
 800d808:	2302      	movs	r3, #2
 800d80a:	9302      	str	r3, [sp, #8]
 800d80c:	e756      	b.n	800d6bc <__kernel_rem_pio2+0x198>
 800d80e:	f8db 3000 	ldr.w	r3, [fp]
 800d812:	b954      	cbnz	r4, 800d82a <__kernel_rem_pio2+0x306>
 800d814:	b123      	cbz	r3, 800d820 <__kernel_rem_pio2+0x2fc>
 800d816:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800d81a:	f8cb 3000 	str.w	r3, [fp]
 800d81e:	2301      	movs	r3, #1
 800d820:	461c      	mov	r4, r3
 800d822:	3201      	adds	r2, #1
 800d824:	f10b 0b04 	add.w	fp, fp, #4
 800d828:	e74f      	b.n	800d6ca <__kernel_rem_pio2+0x1a6>
 800d82a:	1acb      	subs	r3, r1, r3
 800d82c:	f8cb 3000 	str.w	r3, [fp]
 800d830:	4623      	mov	r3, r4
 800d832:	e7f5      	b.n	800d820 <__kernel_rem_pio2+0x2fc>
 800d834:	0800f378 	.word	0x0800f378
 800d838:	40200000 	.word	0x40200000
 800d83c:	3ff00000 	.word	0x3ff00000
 800d840:	3e700000 	.word	0x3e700000
 800d844:	41700000 	.word	0x41700000
 800d848:	3fe00000 	.word	0x3fe00000
 800d84c:	0800f338 	.word	0x0800f338
 800d850:	1e7a      	subs	r2, r7, #1
 800d852:	ab0c      	add	r3, sp, #48	; 0x30
 800d854:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d858:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800d85c:	a90c      	add	r1, sp, #48	; 0x30
 800d85e:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800d862:	e740      	b.n	800d6e6 <__kernel_rem_pio2+0x1c2>
 800d864:	1e7a      	subs	r2, r7, #1
 800d866:	ab0c      	add	r3, sp, #48	; 0x30
 800d868:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d86c:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800d870:	e7f4      	b.n	800d85c <__kernel_rem_pio2+0x338>
 800d872:	a90c      	add	r1, sp, #48	; 0x30
 800d874:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800d878:	3b01      	subs	r3, #1
 800d87a:	430a      	orrs	r2, r1
 800d87c:	e791      	b.n	800d7a2 <__kernel_rem_pio2+0x27e>
 800d87e:	3401      	adds	r4, #1
 800d880:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800d884:	2a00      	cmp	r2, #0
 800d886:	d0fa      	beq.n	800d87e <__kernel_rem_pio2+0x35a>
 800d888:	9b08      	ldr	r3, [sp, #32]
 800d88a:	1c7e      	adds	r6, r7, #1
 800d88c:	18fd      	adds	r5, r7, r3
 800d88e:	ab20      	add	r3, sp, #128	; 0x80
 800d890:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800d894:	443c      	add	r4, r7
 800d896:	42b4      	cmp	r4, r6
 800d898:	da04      	bge.n	800d8a4 <__kernel_rem_pio2+0x380>
 800d89a:	4627      	mov	r7, r4
 800d89c:	e6c0      	b.n	800d620 <__kernel_rem_pio2+0xfc>
 800d89e:	2401      	movs	r4, #1
 800d8a0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d8a2:	e7ed      	b.n	800d880 <__kernel_rem_pio2+0x35c>
 800d8a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d8a6:	462f      	mov	r7, r5
 800d8a8:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800d8ac:	f7f2 fdde 	bl	800046c <__aeabi_i2d>
 800d8b0:	f04f 0b00 	mov.w	fp, #0
 800d8b4:	f04f 0800 	mov.w	r8, #0
 800d8b8:	f04f 0900 	mov.w	r9, #0
 800d8bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d8be:	e8e7 0102 	strd	r0, r1, [r7], #8
 800d8c2:	3b08      	subs	r3, #8
 800d8c4:	9302      	str	r3, [sp, #8]
 800d8c6:	9b06      	ldr	r3, [sp, #24]
 800d8c8:	459b      	cmp	fp, r3
 800d8ca:	dd07      	ble.n	800d8dc <__kernel_rem_pio2+0x3b8>
 800d8cc:	ab70      	add	r3, sp, #448	; 0x1c0
 800d8ce:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800d8d2:	463d      	mov	r5, r7
 800d8d4:	e9c3 8900 	strd	r8, r9, [r3]
 800d8d8:	3601      	adds	r6, #1
 800d8da:	e7dc      	b.n	800d896 <__kernel_rem_pio2+0x372>
 800d8dc:	9902      	ldr	r1, [sp, #8]
 800d8de:	f10b 0b01 	add.w	fp, fp, #1
 800d8e2:	e9f1 2302 	ldrd	r2, r3, [r1, #8]!
 800d8e6:	9102      	str	r1, [sp, #8]
 800d8e8:	e875 0102 	ldrd	r0, r1, [r5], #-8
 800d8ec:	f7f2 fe28 	bl	8000540 <__aeabi_dmul>
 800d8f0:	4602      	mov	r2, r0
 800d8f2:	460b      	mov	r3, r1
 800d8f4:	4640      	mov	r0, r8
 800d8f6:	4649      	mov	r1, r9
 800d8f8:	f7f2 fc6c 	bl	80001d4 <__adddf3>
 800d8fc:	4680      	mov	r8, r0
 800d8fe:	4689      	mov	r9, r1
 800d900:	e7e1      	b.n	800d8c6 <__kernel_rem_pio2+0x3a2>
 800d902:	3c01      	subs	r4, #1
 800d904:	e752      	b.n	800d7ac <__kernel_rem_pio2+0x288>
 800d906:	f1ca 0200 	rsb	r2, sl, #0
 800d90a:	4640      	mov	r0, r8
 800d90c:	4649      	mov	r1, r9
 800d90e:	f000 fa8f 	bl	800de30 <scalbn>
 800d912:	2200      	movs	r2, #0
 800d914:	4ba5      	ldr	r3, [pc, #660]	; (800dbac <__kernel_rem_pio2+0x688>)
 800d916:	4604      	mov	r4, r0
 800d918:	460d      	mov	r5, r1
 800d91a:	f7f3 f897 	bl	8000a4c <__aeabi_dcmpge>
 800d91e:	b1f8      	cbz	r0, 800d960 <__kernel_rem_pio2+0x43c>
 800d920:	2200      	movs	r2, #0
 800d922:	4ba3      	ldr	r3, [pc, #652]	; (800dbb0 <__kernel_rem_pio2+0x68c>)
 800d924:	4620      	mov	r0, r4
 800d926:	4629      	mov	r1, r5
 800d928:	f7f2 fe0a 	bl	8000540 <__aeabi_dmul>
 800d92c:	f7f3 f8a2 	bl	8000a74 <__aeabi_d2iz>
 800d930:	4606      	mov	r6, r0
 800d932:	f7f2 fd9b 	bl	800046c <__aeabi_i2d>
 800d936:	2200      	movs	r2, #0
 800d938:	4b9c      	ldr	r3, [pc, #624]	; (800dbac <__kernel_rem_pio2+0x688>)
 800d93a:	f7f2 fe01 	bl	8000540 <__aeabi_dmul>
 800d93e:	460b      	mov	r3, r1
 800d940:	4602      	mov	r2, r0
 800d942:	4629      	mov	r1, r5
 800d944:	4620      	mov	r0, r4
 800d946:	f7f2 fc43 	bl	80001d0 <__aeabi_dsub>
 800d94a:	f7f3 f893 	bl	8000a74 <__aeabi_d2iz>
 800d94e:	1c7c      	adds	r4, r7, #1
 800d950:	ab0c      	add	r3, sp, #48	; 0x30
 800d952:	f843 0027 	str.w	r0, [r3, r7, lsl #2]
 800d956:	f10a 0a18 	add.w	sl, sl, #24
 800d95a:	f843 6024 	str.w	r6, [r3, r4, lsl #2]
 800d95e:	e72d      	b.n	800d7bc <__kernel_rem_pio2+0x298>
 800d960:	4620      	mov	r0, r4
 800d962:	4629      	mov	r1, r5
 800d964:	f7f3 f886 	bl	8000a74 <__aeabi_d2iz>
 800d968:	ab0c      	add	r3, sp, #48	; 0x30
 800d96a:	463c      	mov	r4, r7
 800d96c:	f843 0027 	str.w	r0, [r3, r7, lsl #2]
 800d970:	e724      	b.n	800d7bc <__kernel_rem_pio2+0x298>
 800d972:	ab0c      	add	r3, sp, #48	; 0x30
 800d974:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 800d978:	f7f2 fd78 	bl	800046c <__aeabi_i2d>
 800d97c:	4632      	mov	r2, r6
 800d97e:	463b      	mov	r3, r7
 800d980:	f7f2 fdde 	bl	8000540 <__aeabi_dmul>
 800d984:	4642      	mov	r2, r8
 800d986:	e86b 0102 	strd	r0, r1, [fp], #-8
 800d98a:	464b      	mov	r3, r9
 800d98c:	4630      	mov	r0, r6
 800d98e:	4639      	mov	r1, r7
 800d990:	f7f2 fdd6 	bl	8000540 <__aeabi_dmul>
 800d994:	f10a 3aff 	add.w	sl, sl, #4294967295
 800d998:	4606      	mov	r6, r0
 800d99a:	460f      	mov	r7, r1
 800d99c:	e71f      	b.n	800d7de <__kernel_rem_pio2+0x2ba>
 800d99e:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 800d9a2:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 800d9a6:	f7f2 fdcb 	bl	8000540 <__aeabi_dmul>
 800d9aa:	4602      	mov	r2, r0
 800d9ac:	460b      	mov	r3, r1
 800d9ae:	4650      	mov	r0, sl
 800d9b0:	4659      	mov	r1, fp
 800d9b2:	f7f2 fc0f 	bl	80001d4 <__adddf3>
 800d9b6:	4682      	mov	sl, r0
 800d9b8:	468b      	mov	fp, r1
 800d9ba:	3601      	adds	r6, #1
 800d9bc:	9b04      	ldr	r3, [sp, #16]
 800d9be:	429e      	cmp	r6, r3
 800d9c0:	dc01      	bgt.n	800d9c6 <__kernel_rem_pio2+0x4a2>
 800d9c2:	45b0      	cmp	r8, r6
 800d9c4:	daeb      	bge.n	800d99e <__kernel_rem_pio2+0x47a>
 800d9c6:	ab48      	add	r3, sp, #288	; 0x120
 800d9c8:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800d9cc:	e9c3 ab00 	strd	sl, fp, [r3]
 800d9d0:	3f01      	subs	r7, #1
 800d9d2:	f108 0801 	add.w	r8, r8, #1
 800d9d6:	e709      	b.n	800d7ec <__kernel_rem_pio2+0x2c8>
 800d9d8:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 800d9da:	2b02      	cmp	r3, #2
 800d9dc:	dc09      	bgt.n	800d9f2 <__kernel_rem_pio2+0x4ce>
 800d9de:	2b00      	cmp	r3, #0
 800d9e0:	dc34      	bgt.n	800da4c <__kernel_rem_pio2+0x528>
 800d9e2:	d05e      	beq.n	800daa2 <__kernel_rem_pio2+0x57e>
 800d9e4:	9b07      	ldr	r3, [sp, #28]
 800d9e6:	f003 0007 	and.w	r0, r3, #7
 800d9ea:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 800d9ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d9f2:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 800d9f4:	2b03      	cmp	r3, #3
 800d9f6:	d1f5      	bne.n	800d9e4 <__kernel_rem_pio2+0x4c0>
 800d9f8:	9a06      	ldr	r2, [sp, #24]
 800d9fa:	ab48      	add	r3, sp, #288	; 0x120
 800d9fc:	441a      	add	r2, r3
 800d9fe:	4615      	mov	r5, r2
 800da00:	4692      	mov	sl, r2
 800da02:	46a3      	mov	fp, r4
 800da04:	f1bb 0f00 	cmp.w	fp, #0
 800da08:	dc7a      	bgt.n	800db00 <__kernel_rem_pio2+0x5dc>
 800da0a:	46aa      	mov	sl, r5
 800da0c:	46a3      	mov	fp, r4
 800da0e:	f1bb 0f01 	cmp.w	fp, #1
 800da12:	f300 8094 	bgt.w	800db3e <__kernel_rem_pio2+0x61a>
 800da16:	2700      	movs	r7, #0
 800da18:	463e      	mov	r6, r7
 800da1a:	2c01      	cmp	r4, #1
 800da1c:	f300 80ae 	bgt.w	800db7c <__kernel_rem_pio2+0x658>
 800da20:	e9dd 5048 	ldrd	r5, r0, [sp, #288]	; 0x120
 800da24:	e9dd 414a 	ldrd	r4, r1, [sp, #296]	; 0x128
 800da28:	9b02      	ldr	r3, [sp, #8]
 800da2a:	2b00      	cmp	r3, #0
 800da2c:	f040 80b0 	bne.w	800db90 <__kernel_rem_pio2+0x66c>
 800da30:	4603      	mov	r3, r0
 800da32:	462a      	mov	r2, r5
 800da34:	9801      	ldr	r0, [sp, #4]
 800da36:	e9c0 2300 	strd	r2, r3, [r0]
 800da3a:	4622      	mov	r2, r4
 800da3c:	460b      	mov	r3, r1
 800da3e:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800da42:	463a      	mov	r2, r7
 800da44:	4633      	mov	r3, r6
 800da46:	e9c0 2304 	strd	r2, r3, [r0, #16]
 800da4a:	e7cb      	b.n	800d9e4 <__kernel_rem_pio2+0x4c0>
 800da4c:	2000      	movs	r0, #0
 800da4e:	9a06      	ldr	r2, [sp, #24]
 800da50:	ab48      	add	r3, sp, #288	; 0x120
 800da52:	441a      	add	r2, r3
 800da54:	4615      	mov	r5, r2
 800da56:	46a0      	mov	r8, r4
 800da58:	4601      	mov	r1, r0
 800da5a:	f1b8 0f00 	cmp.w	r8, #0
 800da5e:	da3c      	bge.n	800dada <__kernel_rem_pio2+0x5b6>
 800da60:	9b02      	ldr	r3, [sp, #8]
 800da62:	2b00      	cmp	r3, #0
 800da64:	d040      	beq.n	800dae8 <__kernel_rem_pio2+0x5c4>
 800da66:	f101 4500 	add.w	r5, r1, #2147483648	; 0x80000000
 800da6a:	4602      	mov	r2, r0
 800da6c:	462b      	mov	r3, r5
 800da6e:	9d01      	ldr	r5, [sp, #4]
 800da70:	2601      	movs	r6, #1
 800da72:	e9c5 2300 	strd	r2, r3, [r5]
 800da76:	460b      	mov	r3, r1
 800da78:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 800da7c:	f7f2 fba8 	bl	80001d0 <__aeabi_dsub>
 800da80:	4684      	mov	ip, r0
 800da82:	460f      	mov	r7, r1
 800da84:	ad48      	add	r5, sp, #288	; 0x120
 800da86:	42b4      	cmp	r4, r6
 800da88:	f105 0508 	add.w	r5, r5, #8
 800da8c:	da2e      	bge.n	800daec <__kernel_rem_pio2+0x5c8>
 800da8e:	9b02      	ldr	r3, [sp, #8]
 800da90:	b10b      	cbz	r3, 800da96 <__kernel_rem_pio2+0x572>
 800da92:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
 800da96:	4662      	mov	r2, ip
 800da98:	463b      	mov	r3, r7
 800da9a:	9901      	ldr	r1, [sp, #4]
 800da9c:	e9c1 2302 	strd	r2, r3, [r1, #8]
 800daa0:	e7a0      	b.n	800d9e4 <__kernel_rem_pio2+0x4c0>
 800daa2:	9a06      	ldr	r2, [sp, #24]
 800daa4:	9ea2      	ldr	r6, [sp, #648]	; 0x288
 800daa6:	ab48      	add	r3, sp, #288	; 0x120
 800daa8:	441a      	add	r2, r3
 800daaa:	4615      	mov	r5, r2
 800daac:	4637      	mov	r7, r6
 800daae:	2c00      	cmp	r4, #0
 800dab0:	da09      	bge.n	800dac6 <__kernel_rem_pio2+0x5a2>
 800dab2:	9b02      	ldr	r3, [sp, #8]
 800dab4:	b10b      	cbz	r3, 800daba <__kernel_rem_pio2+0x596>
 800dab6:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
 800daba:	4632      	mov	r2, r6
 800dabc:	463b      	mov	r3, r7
 800dabe:	9901      	ldr	r1, [sp, #4]
 800dac0:	e9c1 2300 	strd	r2, r3, [r1]
 800dac4:	e78e      	b.n	800d9e4 <__kernel_rem_pio2+0x4c0>
 800dac6:	4630      	mov	r0, r6
 800dac8:	e875 2302 	ldrd	r2, r3, [r5], #-8
 800dacc:	4639      	mov	r1, r7
 800dace:	f7f2 fb81 	bl	80001d4 <__adddf3>
 800dad2:	3c01      	subs	r4, #1
 800dad4:	4606      	mov	r6, r0
 800dad6:	460f      	mov	r7, r1
 800dad8:	e7e9      	b.n	800daae <__kernel_rem_pio2+0x58a>
 800dada:	e875 2302 	ldrd	r2, r3, [r5], #-8
 800dade:	f7f2 fb79 	bl	80001d4 <__adddf3>
 800dae2:	f108 38ff 	add.w	r8, r8, #4294967295
 800dae6:	e7b8      	b.n	800da5a <__kernel_rem_pio2+0x536>
 800dae8:	460d      	mov	r5, r1
 800daea:	e7be      	b.n	800da6a <__kernel_rem_pio2+0x546>
 800daec:	4660      	mov	r0, ip
 800daee:	e9d5 2300 	ldrd	r2, r3, [r5]
 800daf2:	4639      	mov	r1, r7
 800daf4:	f7f2 fb6e 	bl	80001d4 <__adddf3>
 800daf8:	3601      	adds	r6, #1
 800dafa:	4684      	mov	ip, r0
 800dafc:	460f      	mov	r7, r1
 800dafe:	e7c2      	b.n	800da86 <__kernel_rem_pio2+0x562>
 800db00:	e9da 6700 	ldrd	r6, r7, [sl]
 800db04:	e95a 8902 	ldrd	r8, r9, [sl, #-8]
 800db08:	4632      	mov	r2, r6
 800db0a:	463b      	mov	r3, r7
 800db0c:	4640      	mov	r0, r8
 800db0e:	4649      	mov	r1, r9
 800db10:	f7f2 fb60 	bl	80001d4 <__adddf3>
 800db14:	4602      	mov	r2, r0
 800db16:	460b      	mov	r3, r1
 800db18:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800db1c:	4640      	mov	r0, r8
 800db1e:	4649      	mov	r1, r9
 800db20:	f7f2 fb56 	bl	80001d0 <__aeabi_dsub>
 800db24:	4632      	mov	r2, r6
 800db26:	463b      	mov	r3, r7
 800db28:	f7f2 fb54 	bl	80001d4 <__adddf3>
 800db2c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800db30:	e86a 0102 	strd	r0, r1, [sl], #-8
 800db34:	f10b 3bff 	add.w	fp, fp, #4294967295
 800db38:	e9ca 2300 	strd	r2, r3, [sl]
 800db3c:	e762      	b.n	800da04 <__kernel_rem_pio2+0x4e0>
 800db3e:	e9da 8900 	ldrd	r8, r9, [sl]
 800db42:	e95a 6702 	ldrd	r6, r7, [sl, #-8]
 800db46:	4642      	mov	r2, r8
 800db48:	464b      	mov	r3, r9
 800db4a:	4630      	mov	r0, r6
 800db4c:	4639      	mov	r1, r7
 800db4e:	f7f2 fb41 	bl	80001d4 <__adddf3>
 800db52:	4602      	mov	r2, r0
 800db54:	460b      	mov	r3, r1
 800db56:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800db5a:	4630      	mov	r0, r6
 800db5c:	4639      	mov	r1, r7
 800db5e:	f7f2 fb37 	bl	80001d0 <__aeabi_dsub>
 800db62:	4642      	mov	r2, r8
 800db64:	464b      	mov	r3, r9
 800db66:	f7f2 fb35 	bl	80001d4 <__adddf3>
 800db6a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800db6e:	e86a 0102 	strd	r0, r1, [sl], #-8
 800db72:	f10b 3bff 	add.w	fp, fp, #4294967295
 800db76:	e9ca 2300 	strd	r2, r3, [sl]
 800db7a:	e748      	b.n	800da0e <__kernel_rem_pio2+0x4ea>
 800db7c:	4638      	mov	r0, r7
 800db7e:	e875 2302 	ldrd	r2, r3, [r5], #-8
 800db82:	4631      	mov	r1, r6
 800db84:	f7f2 fb26 	bl	80001d4 <__adddf3>
 800db88:	3c01      	subs	r4, #1
 800db8a:	4607      	mov	r7, r0
 800db8c:	460e      	mov	r6, r1
 800db8e:	e744      	b.n	800da1a <__kernel_rem_pio2+0x4f6>
 800db90:	9b01      	ldr	r3, [sp, #4]
 800db92:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800db96:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 800db9a:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
 800db9e:	e9c3 0401 	strd	r0, r4, [r3, #4]
 800dba2:	e9c3 1703 	strd	r1, r7, [r3, #12]
 800dba6:	601d      	str	r5, [r3, #0]
 800dba8:	615e      	str	r6, [r3, #20]
 800dbaa:	e71b      	b.n	800d9e4 <__kernel_rem_pio2+0x4c0>
 800dbac:	41700000 	.word	0x41700000
 800dbb0:	3e700000 	.word	0x3e700000
 800dbb4:	00000000 	.word	0x00000000

0800dbb8 <__kernel_sin>:
 800dbb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dbbc:	b086      	sub	sp, #24
 800dbbe:	e9cd 2300 	strd	r2, r3, [sp]
 800dbc2:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800dbc6:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800dbca:	4682      	mov	sl, r0
 800dbcc:	460c      	mov	r4, r1
 800dbce:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 800dbd0:	da03      	bge.n	800dbda <__kernel_sin+0x22>
 800dbd2:	f7f2 ff4f 	bl	8000a74 <__aeabi_d2iz>
 800dbd6:	2800      	cmp	r0, #0
 800dbd8:	d050      	beq.n	800dc7c <__kernel_sin+0xc4>
 800dbda:	4652      	mov	r2, sl
 800dbdc:	4623      	mov	r3, r4
 800dbde:	4650      	mov	r0, sl
 800dbe0:	4621      	mov	r1, r4
 800dbe2:	f7f2 fcad 	bl	8000540 <__aeabi_dmul>
 800dbe6:	4606      	mov	r6, r0
 800dbe8:	460f      	mov	r7, r1
 800dbea:	4602      	mov	r2, r0
 800dbec:	460b      	mov	r3, r1
 800dbee:	4650      	mov	r0, sl
 800dbf0:	4621      	mov	r1, r4
 800dbf2:	f7f2 fca5 	bl	8000540 <__aeabi_dmul>
 800dbf6:	a33e      	add	r3, pc, #248	; (adr r3, 800dcf0 <__kernel_sin+0x138>)
 800dbf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dbfc:	4680      	mov	r8, r0
 800dbfe:	4689      	mov	r9, r1
 800dc00:	4630      	mov	r0, r6
 800dc02:	4639      	mov	r1, r7
 800dc04:	f7f2 fc9c 	bl	8000540 <__aeabi_dmul>
 800dc08:	a33b      	add	r3, pc, #236	; (adr r3, 800dcf8 <__kernel_sin+0x140>)
 800dc0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc0e:	f7f2 fadf 	bl	80001d0 <__aeabi_dsub>
 800dc12:	4632      	mov	r2, r6
 800dc14:	463b      	mov	r3, r7
 800dc16:	f7f2 fc93 	bl	8000540 <__aeabi_dmul>
 800dc1a:	a339      	add	r3, pc, #228	; (adr r3, 800dd00 <__kernel_sin+0x148>)
 800dc1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc20:	f7f2 fad8 	bl	80001d4 <__adddf3>
 800dc24:	4632      	mov	r2, r6
 800dc26:	463b      	mov	r3, r7
 800dc28:	f7f2 fc8a 	bl	8000540 <__aeabi_dmul>
 800dc2c:	a336      	add	r3, pc, #216	; (adr r3, 800dd08 <__kernel_sin+0x150>)
 800dc2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc32:	f7f2 facd 	bl	80001d0 <__aeabi_dsub>
 800dc36:	4632      	mov	r2, r6
 800dc38:	463b      	mov	r3, r7
 800dc3a:	f7f2 fc81 	bl	8000540 <__aeabi_dmul>
 800dc3e:	a334      	add	r3, pc, #208	; (adr r3, 800dd10 <__kernel_sin+0x158>)
 800dc40:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc44:	f7f2 fac6 	bl	80001d4 <__adddf3>
 800dc48:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800dc4c:	b9dd      	cbnz	r5, 800dc86 <__kernel_sin+0xce>
 800dc4e:	4602      	mov	r2, r0
 800dc50:	460b      	mov	r3, r1
 800dc52:	4630      	mov	r0, r6
 800dc54:	4639      	mov	r1, r7
 800dc56:	f7f2 fc73 	bl	8000540 <__aeabi_dmul>
 800dc5a:	a32f      	add	r3, pc, #188	; (adr r3, 800dd18 <__kernel_sin+0x160>)
 800dc5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc60:	f7f2 fab6 	bl	80001d0 <__aeabi_dsub>
 800dc64:	4642      	mov	r2, r8
 800dc66:	464b      	mov	r3, r9
 800dc68:	f7f2 fc6a 	bl	8000540 <__aeabi_dmul>
 800dc6c:	4602      	mov	r2, r0
 800dc6e:	460b      	mov	r3, r1
 800dc70:	4650      	mov	r0, sl
 800dc72:	4621      	mov	r1, r4
 800dc74:	f7f2 faae 	bl	80001d4 <__adddf3>
 800dc78:	4682      	mov	sl, r0
 800dc7a:	460c      	mov	r4, r1
 800dc7c:	4650      	mov	r0, sl
 800dc7e:	4621      	mov	r1, r4
 800dc80:	b006      	add	sp, #24
 800dc82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dc86:	2200      	movs	r2, #0
 800dc88:	e9dd 0100 	ldrd	r0, r1, [sp]
 800dc8c:	4b24      	ldr	r3, [pc, #144]	; (800dd20 <__kernel_sin+0x168>)
 800dc8e:	f7f2 fc57 	bl	8000540 <__aeabi_dmul>
 800dc92:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800dc96:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800dc9a:	4640      	mov	r0, r8
 800dc9c:	4649      	mov	r1, r9
 800dc9e:	f7f2 fc4f 	bl	8000540 <__aeabi_dmul>
 800dca2:	4602      	mov	r2, r0
 800dca4:	460b      	mov	r3, r1
 800dca6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800dcaa:	f7f2 fa91 	bl	80001d0 <__aeabi_dsub>
 800dcae:	4632      	mov	r2, r6
 800dcb0:	463b      	mov	r3, r7
 800dcb2:	f7f2 fc45 	bl	8000540 <__aeabi_dmul>
 800dcb6:	e9dd 2300 	ldrd	r2, r3, [sp]
 800dcba:	f7f2 fa89 	bl	80001d0 <__aeabi_dsub>
 800dcbe:	a316      	add	r3, pc, #88	; (adr r3, 800dd18 <__kernel_sin+0x160>)
 800dcc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dcc4:	4606      	mov	r6, r0
 800dcc6:	460f      	mov	r7, r1
 800dcc8:	4640      	mov	r0, r8
 800dcca:	4649      	mov	r1, r9
 800dccc:	f7f2 fc38 	bl	8000540 <__aeabi_dmul>
 800dcd0:	4602      	mov	r2, r0
 800dcd2:	460b      	mov	r3, r1
 800dcd4:	4630      	mov	r0, r6
 800dcd6:	4639      	mov	r1, r7
 800dcd8:	f7f2 fa7c 	bl	80001d4 <__adddf3>
 800dcdc:	4602      	mov	r2, r0
 800dcde:	460b      	mov	r3, r1
 800dce0:	4650      	mov	r0, sl
 800dce2:	4621      	mov	r1, r4
 800dce4:	f7f2 fa74 	bl	80001d0 <__aeabi_dsub>
 800dce8:	e7c6      	b.n	800dc78 <__kernel_sin+0xc0>
 800dcea:	bf00      	nop
 800dcec:	f3af 8000 	nop.w
 800dcf0:	5acfd57c 	.word	0x5acfd57c
 800dcf4:	3de5d93a 	.word	0x3de5d93a
 800dcf8:	8a2b9ceb 	.word	0x8a2b9ceb
 800dcfc:	3e5ae5e6 	.word	0x3e5ae5e6
 800dd00:	57b1fe7d 	.word	0x57b1fe7d
 800dd04:	3ec71de3 	.word	0x3ec71de3
 800dd08:	19c161d5 	.word	0x19c161d5
 800dd0c:	3f2a01a0 	.word	0x3f2a01a0
 800dd10:	1110f8a6 	.word	0x1110f8a6
 800dd14:	3f811111 	.word	0x3f811111
 800dd18:	55555549 	.word	0x55555549
 800dd1c:	3fc55555 	.word	0x3fc55555
 800dd20:	3fe00000 	.word	0x3fe00000

0800dd24 <fabs>:
 800dd24:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800dd28:	4770      	bx	lr
 800dd2a:	0000      	movs	r0, r0
 800dd2c:	0000      	movs	r0, r0
	...

0800dd30 <floor>:
 800dd30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dd34:	f3c1 580a 	ubfx	r8, r1, #20, #11
 800dd38:	f2a8 36ff 	subw	r6, r8, #1023	; 0x3ff
 800dd3c:	2e13      	cmp	r6, #19
 800dd3e:	4602      	mov	r2, r0
 800dd40:	460b      	mov	r3, r1
 800dd42:	4607      	mov	r7, r0
 800dd44:	460c      	mov	r4, r1
 800dd46:	4605      	mov	r5, r0
 800dd48:	dc34      	bgt.n	800ddb4 <floor+0x84>
 800dd4a:	2e00      	cmp	r6, #0
 800dd4c:	da15      	bge.n	800dd7a <floor+0x4a>
 800dd4e:	a334      	add	r3, pc, #208	; (adr r3, 800de20 <floor+0xf0>)
 800dd50:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd54:	f7f2 fa3e 	bl	80001d4 <__adddf3>
 800dd58:	2200      	movs	r2, #0
 800dd5a:	2300      	movs	r3, #0
 800dd5c:	f7f2 fe80 	bl	8000a60 <__aeabi_dcmpgt>
 800dd60:	b140      	cbz	r0, 800dd74 <floor+0x44>
 800dd62:	2c00      	cmp	r4, #0
 800dd64:	da59      	bge.n	800de1a <floor+0xea>
 800dd66:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800dd6a:	ea57 0503 	orrs.w	r5, r7, r3
 800dd6e:	d001      	beq.n	800dd74 <floor+0x44>
 800dd70:	2500      	movs	r5, #0
 800dd72:	4c2d      	ldr	r4, [pc, #180]	; (800de28 <floor+0xf8>)
 800dd74:	4623      	mov	r3, r4
 800dd76:	462f      	mov	r7, r5
 800dd78:	e025      	b.n	800ddc6 <floor+0x96>
 800dd7a:	4a2c      	ldr	r2, [pc, #176]	; (800de2c <floor+0xfc>)
 800dd7c:	fa42 f806 	asr.w	r8, r2, r6
 800dd80:	ea01 0208 	and.w	r2, r1, r8
 800dd84:	4302      	orrs	r2, r0
 800dd86:	d01e      	beq.n	800ddc6 <floor+0x96>
 800dd88:	a325      	add	r3, pc, #148	; (adr r3, 800de20 <floor+0xf0>)
 800dd8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd8e:	f7f2 fa21 	bl	80001d4 <__adddf3>
 800dd92:	2200      	movs	r2, #0
 800dd94:	2300      	movs	r3, #0
 800dd96:	f7f2 fe63 	bl	8000a60 <__aeabi_dcmpgt>
 800dd9a:	2800      	cmp	r0, #0
 800dd9c:	d0ea      	beq.n	800dd74 <floor+0x44>
 800dd9e:	2c00      	cmp	r4, #0
 800dda0:	bfbe      	ittt	lt
 800dda2:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800dda6:	fa43 f606 	asrlt.w	r6, r3, r6
 800ddaa:	19a4      	addlt	r4, r4, r6
 800ddac:	2500      	movs	r5, #0
 800ddae:	ea24 0408 	bic.w	r4, r4, r8
 800ddb2:	e7df      	b.n	800dd74 <floor+0x44>
 800ddb4:	2e33      	cmp	r6, #51	; 0x33
 800ddb6:	dd0a      	ble.n	800ddce <floor+0x9e>
 800ddb8:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800ddbc:	d103      	bne.n	800ddc6 <floor+0x96>
 800ddbe:	f7f2 fa09 	bl	80001d4 <__adddf3>
 800ddc2:	4607      	mov	r7, r0
 800ddc4:	460b      	mov	r3, r1
 800ddc6:	4638      	mov	r0, r7
 800ddc8:	4619      	mov	r1, r3
 800ddca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ddce:	f04f 32ff 	mov.w	r2, #4294967295
 800ddd2:	f2a8 4813 	subw	r8, r8, #1043	; 0x413
 800ddd6:	fa22 f808 	lsr.w	r8, r2, r8
 800ddda:	ea18 0f00 	tst.w	r8, r0
 800ddde:	d0f2      	beq.n	800ddc6 <floor+0x96>
 800dde0:	a30f      	add	r3, pc, #60	; (adr r3, 800de20 <floor+0xf0>)
 800dde2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dde6:	f7f2 f9f5 	bl	80001d4 <__adddf3>
 800ddea:	2200      	movs	r2, #0
 800ddec:	2300      	movs	r3, #0
 800ddee:	f7f2 fe37 	bl	8000a60 <__aeabi_dcmpgt>
 800ddf2:	2800      	cmp	r0, #0
 800ddf4:	d0be      	beq.n	800dd74 <floor+0x44>
 800ddf6:	2c00      	cmp	r4, #0
 800ddf8:	da02      	bge.n	800de00 <floor+0xd0>
 800ddfa:	2e14      	cmp	r6, #20
 800ddfc:	d103      	bne.n	800de06 <floor+0xd6>
 800ddfe:	3401      	adds	r4, #1
 800de00:	ea25 0508 	bic.w	r5, r5, r8
 800de04:	e7b6      	b.n	800dd74 <floor+0x44>
 800de06:	2301      	movs	r3, #1
 800de08:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800de0c:	fa03 f606 	lsl.w	r6, r3, r6
 800de10:	4435      	add	r5, r6
 800de12:	42bd      	cmp	r5, r7
 800de14:	bf38      	it	cc
 800de16:	18e4      	addcc	r4, r4, r3
 800de18:	e7f2      	b.n	800de00 <floor+0xd0>
 800de1a:	2500      	movs	r5, #0
 800de1c:	462c      	mov	r4, r5
 800de1e:	e7a9      	b.n	800dd74 <floor+0x44>
 800de20:	8800759c 	.word	0x8800759c
 800de24:	7e37e43c 	.word	0x7e37e43c
 800de28:	bff00000 	.word	0xbff00000
 800de2c:	000fffff 	.word	0x000fffff

0800de30 <scalbn>:
 800de30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800de32:	f3c1 560a 	ubfx	r6, r1, #20, #11
 800de36:	4604      	mov	r4, r0
 800de38:	460d      	mov	r5, r1
 800de3a:	4617      	mov	r7, r2
 800de3c:	460b      	mov	r3, r1
 800de3e:	b996      	cbnz	r6, 800de66 <scalbn+0x36>
 800de40:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800de44:	4303      	orrs	r3, r0
 800de46:	d039      	beq.n	800debc <scalbn+0x8c>
 800de48:	4b35      	ldr	r3, [pc, #212]	; (800df20 <scalbn+0xf0>)
 800de4a:	2200      	movs	r2, #0
 800de4c:	f7f2 fb78 	bl	8000540 <__aeabi_dmul>
 800de50:	4b34      	ldr	r3, [pc, #208]	; (800df24 <scalbn+0xf4>)
 800de52:	4604      	mov	r4, r0
 800de54:	429f      	cmp	r7, r3
 800de56:	460d      	mov	r5, r1
 800de58:	da0f      	bge.n	800de7a <scalbn+0x4a>
 800de5a:	a32d      	add	r3, pc, #180	; (adr r3, 800df10 <scalbn+0xe0>)
 800de5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de60:	f7f2 fb6e 	bl	8000540 <__aeabi_dmul>
 800de64:	e006      	b.n	800de74 <scalbn+0x44>
 800de66:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800de6a:	4296      	cmp	r6, r2
 800de6c:	d10a      	bne.n	800de84 <scalbn+0x54>
 800de6e:	4602      	mov	r2, r0
 800de70:	f7f2 f9b0 	bl	80001d4 <__adddf3>
 800de74:	4604      	mov	r4, r0
 800de76:	460d      	mov	r5, r1
 800de78:	e020      	b.n	800debc <scalbn+0x8c>
 800de7a:	460b      	mov	r3, r1
 800de7c:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800de80:	f1a1 0636 	sub.w	r6, r1, #54	; 0x36
 800de84:	f240 72fe 	movw	r2, #2046	; 0x7fe
 800de88:	19b9      	adds	r1, r7, r6
 800de8a:	4291      	cmp	r1, r2
 800de8c:	dd0e      	ble.n	800deac <scalbn+0x7c>
 800de8e:	a322      	add	r3, pc, #136	; (adr r3, 800df18 <scalbn+0xe8>)
 800de90:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de94:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 800de98:	f044 41fc 	orr.w	r1, r4, #2113929216	; 0x7e000000
 800de9c:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
 800dea0:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
 800dea4:	4820      	ldr	r0, [pc, #128]	; (800df28 <scalbn+0xf8>)
 800dea6:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
 800deaa:	e7d9      	b.n	800de60 <scalbn+0x30>
 800deac:	2900      	cmp	r1, #0
 800deae:	dd08      	ble.n	800dec2 <scalbn+0x92>
 800deb0:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800deb4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800deb8:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 800debc:	4620      	mov	r0, r4
 800debe:	4629      	mov	r1, r5
 800dec0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dec2:	f111 0f35 	cmn.w	r1, #53	; 0x35
 800dec6:	da16      	bge.n	800def6 <scalbn+0xc6>
 800dec8:	f24c 3350 	movw	r3, #50000	; 0xc350
 800decc:	429f      	cmp	r7, r3
 800dece:	ea4f 73d5 	mov.w	r3, r5, lsr #31
 800ded2:	dd08      	ble.n	800dee6 <scalbn+0xb6>
 800ded4:	4c15      	ldr	r4, [pc, #84]	; (800df2c <scalbn+0xfc>)
 800ded6:	4814      	ldr	r0, [pc, #80]	; (800df28 <scalbn+0xf8>)
 800ded8:	f363 74df 	bfi	r4, r3, #31, #1
 800dedc:	a30e      	add	r3, pc, #56	; (adr r3, 800df18 <scalbn+0xe8>)
 800dede:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dee2:	4621      	mov	r1, r4
 800dee4:	e7bc      	b.n	800de60 <scalbn+0x30>
 800dee6:	4c12      	ldr	r4, [pc, #72]	; (800df30 <scalbn+0x100>)
 800dee8:	4812      	ldr	r0, [pc, #72]	; (800df34 <scalbn+0x104>)
 800deea:	f363 74df 	bfi	r4, r3, #31, #1
 800deee:	a308      	add	r3, pc, #32	; (adr r3, 800df10 <scalbn+0xe0>)
 800def0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800def4:	e7f5      	b.n	800dee2 <scalbn+0xb2>
 800def6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800defa:	3136      	adds	r1, #54	; 0x36
 800defc:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800df00:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 800df04:	4620      	mov	r0, r4
 800df06:	4629      	mov	r1, r5
 800df08:	2200      	movs	r2, #0
 800df0a:	4b0b      	ldr	r3, [pc, #44]	; (800df38 <scalbn+0x108>)
 800df0c:	e7a8      	b.n	800de60 <scalbn+0x30>
 800df0e:	bf00      	nop
 800df10:	c2f8f359 	.word	0xc2f8f359
 800df14:	01a56e1f 	.word	0x01a56e1f
 800df18:	8800759c 	.word	0x8800759c
 800df1c:	7e37e43c 	.word	0x7e37e43c
 800df20:	43500000 	.word	0x43500000
 800df24:	ffff3cb0 	.word	0xffff3cb0
 800df28:	8800759c 	.word	0x8800759c
 800df2c:	7e37e43c 	.word	0x7e37e43c
 800df30:	01a56e1f 	.word	0x01a56e1f
 800df34:	c2f8f359 	.word	0xc2f8f359
 800df38:	3c900000 	.word	0x3c900000

0800df3c <nanf>:
 800df3c:	4800      	ldr	r0, [pc, #0]	; (800df40 <nanf+0x4>)
 800df3e:	4770      	bx	lr
 800df40:	7fc00000 	.word	0x7fc00000

0800df44 <__errno>:
 800df44:	4b01      	ldr	r3, [pc, #4]	; (800df4c <__errno+0x8>)
 800df46:	6818      	ldr	r0, [r3, #0]
 800df48:	4770      	bx	lr
 800df4a:	bf00      	nop
 800df4c:	20000188 	.word	0x20000188

0800df50 <__libc_init_array>:
 800df50:	b570      	push	{r4, r5, r6, lr}
 800df52:	2600      	movs	r6, #0
 800df54:	4d0c      	ldr	r5, [pc, #48]	; (800df88 <__libc_init_array+0x38>)
 800df56:	4c0d      	ldr	r4, [pc, #52]	; (800df8c <__libc_init_array+0x3c>)
 800df58:	1b64      	subs	r4, r4, r5
 800df5a:	10a4      	asrs	r4, r4, #2
 800df5c:	42a6      	cmp	r6, r4
 800df5e:	d109      	bne.n	800df74 <__libc_init_array+0x24>
 800df60:	f000 fc82 	bl	800e868 <_init>
 800df64:	2600      	movs	r6, #0
 800df66:	4d0a      	ldr	r5, [pc, #40]	; (800df90 <__libc_init_array+0x40>)
 800df68:	4c0a      	ldr	r4, [pc, #40]	; (800df94 <__libc_init_array+0x44>)
 800df6a:	1b64      	subs	r4, r4, r5
 800df6c:	10a4      	asrs	r4, r4, #2
 800df6e:	42a6      	cmp	r6, r4
 800df70:	d105      	bne.n	800df7e <__libc_init_array+0x2e>
 800df72:	bd70      	pop	{r4, r5, r6, pc}
 800df74:	f855 3b04 	ldr.w	r3, [r5], #4
 800df78:	4798      	blx	r3
 800df7a:	3601      	adds	r6, #1
 800df7c:	e7ee      	b.n	800df5c <__libc_init_array+0xc>
 800df7e:	f855 3b04 	ldr.w	r3, [r5], #4
 800df82:	4798      	blx	r3
 800df84:	3601      	adds	r6, #1
 800df86:	e7f2      	b.n	800df6e <__libc_init_array+0x1e>
 800df88:	0800f3c4 	.word	0x0800f3c4
 800df8c:	0800f3c4 	.word	0x0800f3c4
 800df90:	0800f3c4 	.word	0x0800f3c4
 800df94:	0800f3cc 	.word	0x0800f3cc

0800df98 <malloc>:
 800df98:	4b02      	ldr	r3, [pc, #8]	; (800dfa4 <malloc+0xc>)
 800df9a:	4601      	mov	r1, r0
 800df9c:	6818      	ldr	r0, [r3, #0]
 800df9e:	f000 b86d 	b.w	800e07c <_malloc_r>
 800dfa2:	bf00      	nop
 800dfa4:	20000188 	.word	0x20000188

0800dfa8 <free>:
 800dfa8:	4b02      	ldr	r3, [pc, #8]	; (800dfb4 <free+0xc>)
 800dfaa:	4601      	mov	r1, r0
 800dfac:	6818      	ldr	r0, [r3, #0]
 800dfae:	f000 b819 	b.w	800dfe4 <_free_r>
 800dfb2:	bf00      	nop
 800dfb4:	20000188 	.word	0x20000188

0800dfb8 <memcmp>:
 800dfb8:	b530      	push	{r4, r5, lr}
 800dfba:	2400      	movs	r4, #0
 800dfbc:	3901      	subs	r1, #1
 800dfbe:	42a2      	cmp	r2, r4
 800dfc0:	d101      	bne.n	800dfc6 <memcmp+0xe>
 800dfc2:	2000      	movs	r0, #0
 800dfc4:	e005      	b.n	800dfd2 <memcmp+0x1a>
 800dfc6:	5d03      	ldrb	r3, [r0, r4]
 800dfc8:	3401      	adds	r4, #1
 800dfca:	5d0d      	ldrb	r5, [r1, r4]
 800dfcc:	42ab      	cmp	r3, r5
 800dfce:	d0f6      	beq.n	800dfbe <memcmp+0x6>
 800dfd0:	1b58      	subs	r0, r3, r5
 800dfd2:	bd30      	pop	{r4, r5, pc}

0800dfd4 <memset>:
 800dfd4:	4603      	mov	r3, r0
 800dfd6:	4402      	add	r2, r0
 800dfd8:	4293      	cmp	r3, r2
 800dfda:	d100      	bne.n	800dfde <memset+0xa>
 800dfdc:	4770      	bx	lr
 800dfde:	f803 1b01 	strb.w	r1, [r3], #1
 800dfe2:	e7f9      	b.n	800dfd8 <memset+0x4>

0800dfe4 <_free_r>:
 800dfe4:	b538      	push	{r3, r4, r5, lr}
 800dfe6:	4605      	mov	r5, r0
 800dfe8:	2900      	cmp	r1, #0
 800dfea:	d043      	beq.n	800e074 <_free_r+0x90>
 800dfec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800dff0:	1f0c      	subs	r4, r1, #4
 800dff2:	2b00      	cmp	r3, #0
 800dff4:	bfb8      	it	lt
 800dff6:	18e4      	addlt	r4, r4, r3
 800dff8:	f000 f8d2 	bl	800e1a0 <__malloc_lock>
 800dffc:	4a1e      	ldr	r2, [pc, #120]	; (800e078 <_free_r+0x94>)
 800dffe:	6813      	ldr	r3, [r2, #0]
 800e000:	4610      	mov	r0, r2
 800e002:	b933      	cbnz	r3, 800e012 <_free_r+0x2e>
 800e004:	6063      	str	r3, [r4, #4]
 800e006:	6014      	str	r4, [r2, #0]
 800e008:	4628      	mov	r0, r5
 800e00a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e00e:	f000 b8cd 	b.w	800e1ac <__malloc_unlock>
 800e012:	42a3      	cmp	r3, r4
 800e014:	d90a      	bls.n	800e02c <_free_r+0x48>
 800e016:	6821      	ldr	r1, [r4, #0]
 800e018:	1862      	adds	r2, r4, r1
 800e01a:	4293      	cmp	r3, r2
 800e01c:	bf01      	itttt	eq
 800e01e:	681a      	ldreq	r2, [r3, #0]
 800e020:	685b      	ldreq	r3, [r3, #4]
 800e022:	1852      	addeq	r2, r2, r1
 800e024:	6022      	streq	r2, [r4, #0]
 800e026:	6063      	str	r3, [r4, #4]
 800e028:	6004      	str	r4, [r0, #0]
 800e02a:	e7ed      	b.n	800e008 <_free_r+0x24>
 800e02c:	461a      	mov	r2, r3
 800e02e:	685b      	ldr	r3, [r3, #4]
 800e030:	b10b      	cbz	r3, 800e036 <_free_r+0x52>
 800e032:	42a3      	cmp	r3, r4
 800e034:	d9fa      	bls.n	800e02c <_free_r+0x48>
 800e036:	6811      	ldr	r1, [r2, #0]
 800e038:	1850      	adds	r0, r2, r1
 800e03a:	42a0      	cmp	r0, r4
 800e03c:	d10b      	bne.n	800e056 <_free_r+0x72>
 800e03e:	6820      	ldr	r0, [r4, #0]
 800e040:	4401      	add	r1, r0
 800e042:	1850      	adds	r0, r2, r1
 800e044:	4283      	cmp	r3, r0
 800e046:	6011      	str	r1, [r2, #0]
 800e048:	d1de      	bne.n	800e008 <_free_r+0x24>
 800e04a:	6818      	ldr	r0, [r3, #0]
 800e04c:	685b      	ldr	r3, [r3, #4]
 800e04e:	4401      	add	r1, r0
 800e050:	6011      	str	r1, [r2, #0]
 800e052:	6053      	str	r3, [r2, #4]
 800e054:	e7d8      	b.n	800e008 <_free_r+0x24>
 800e056:	d902      	bls.n	800e05e <_free_r+0x7a>
 800e058:	230c      	movs	r3, #12
 800e05a:	602b      	str	r3, [r5, #0]
 800e05c:	e7d4      	b.n	800e008 <_free_r+0x24>
 800e05e:	6820      	ldr	r0, [r4, #0]
 800e060:	1821      	adds	r1, r4, r0
 800e062:	428b      	cmp	r3, r1
 800e064:	bf01      	itttt	eq
 800e066:	6819      	ldreq	r1, [r3, #0]
 800e068:	685b      	ldreq	r3, [r3, #4]
 800e06a:	1809      	addeq	r1, r1, r0
 800e06c:	6021      	streq	r1, [r4, #0]
 800e06e:	6063      	str	r3, [r4, #4]
 800e070:	6054      	str	r4, [r2, #4]
 800e072:	e7c9      	b.n	800e008 <_free_r+0x24>
 800e074:	bd38      	pop	{r3, r4, r5, pc}
 800e076:	bf00      	nop
 800e078:	200006cc 	.word	0x200006cc

0800e07c <_malloc_r>:
 800e07c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e07e:	1ccd      	adds	r5, r1, #3
 800e080:	f025 0503 	bic.w	r5, r5, #3
 800e084:	3508      	adds	r5, #8
 800e086:	2d0c      	cmp	r5, #12
 800e088:	bf38      	it	cc
 800e08a:	250c      	movcc	r5, #12
 800e08c:	2d00      	cmp	r5, #0
 800e08e:	4606      	mov	r6, r0
 800e090:	db01      	blt.n	800e096 <_malloc_r+0x1a>
 800e092:	42a9      	cmp	r1, r5
 800e094:	d903      	bls.n	800e09e <_malloc_r+0x22>
 800e096:	230c      	movs	r3, #12
 800e098:	6033      	str	r3, [r6, #0]
 800e09a:	2000      	movs	r0, #0
 800e09c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e09e:	f000 f87f 	bl	800e1a0 <__malloc_lock>
 800e0a2:	4921      	ldr	r1, [pc, #132]	; (800e128 <_malloc_r+0xac>)
 800e0a4:	680a      	ldr	r2, [r1, #0]
 800e0a6:	4614      	mov	r4, r2
 800e0a8:	b99c      	cbnz	r4, 800e0d2 <_malloc_r+0x56>
 800e0aa:	4f20      	ldr	r7, [pc, #128]	; (800e12c <_malloc_r+0xb0>)
 800e0ac:	683b      	ldr	r3, [r7, #0]
 800e0ae:	b923      	cbnz	r3, 800e0ba <_malloc_r+0x3e>
 800e0b0:	4621      	mov	r1, r4
 800e0b2:	4630      	mov	r0, r6
 800e0b4:	f000 f844 	bl	800e140 <_sbrk_r>
 800e0b8:	6038      	str	r0, [r7, #0]
 800e0ba:	4629      	mov	r1, r5
 800e0bc:	4630      	mov	r0, r6
 800e0be:	f000 f83f 	bl	800e140 <_sbrk_r>
 800e0c2:	1c43      	adds	r3, r0, #1
 800e0c4:	d123      	bne.n	800e10e <_malloc_r+0x92>
 800e0c6:	230c      	movs	r3, #12
 800e0c8:	4630      	mov	r0, r6
 800e0ca:	6033      	str	r3, [r6, #0]
 800e0cc:	f000 f86e 	bl	800e1ac <__malloc_unlock>
 800e0d0:	e7e3      	b.n	800e09a <_malloc_r+0x1e>
 800e0d2:	6823      	ldr	r3, [r4, #0]
 800e0d4:	1b5b      	subs	r3, r3, r5
 800e0d6:	d417      	bmi.n	800e108 <_malloc_r+0x8c>
 800e0d8:	2b0b      	cmp	r3, #11
 800e0da:	d903      	bls.n	800e0e4 <_malloc_r+0x68>
 800e0dc:	6023      	str	r3, [r4, #0]
 800e0de:	441c      	add	r4, r3
 800e0e0:	6025      	str	r5, [r4, #0]
 800e0e2:	e004      	b.n	800e0ee <_malloc_r+0x72>
 800e0e4:	6863      	ldr	r3, [r4, #4]
 800e0e6:	42a2      	cmp	r2, r4
 800e0e8:	bf0c      	ite	eq
 800e0ea:	600b      	streq	r3, [r1, #0]
 800e0ec:	6053      	strne	r3, [r2, #4]
 800e0ee:	4630      	mov	r0, r6
 800e0f0:	f000 f85c 	bl	800e1ac <__malloc_unlock>
 800e0f4:	f104 000b 	add.w	r0, r4, #11
 800e0f8:	1d23      	adds	r3, r4, #4
 800e0fa:	f020 0007 	bic.w	r0, r0, #7
 800e0fe:	1ac2      	subs	r2, r0, r3
 800e100:	d0cc      	beq.n	800e09c <_malloc_r+0x20>
 800e102:	1a1b      	subs	r3, r3, r0
 800e104:	50a3      	str	r3, [r4, r2]
 800e106:	e7c9      	b.n	800e09c <_malloc_r+0x20>
 800e108:	4622      	mov	r2, r4
 800e10a:	6864      	ldr	r4, [r4, #4]
 800e10c:	e7cc      	b.n	800e0a8 <_malloc_r+0x2c>
 800e10e:	1cc4      	adds	r4, r0, #3
 800e110:	f024 0403 	bic.w	r4, r4, #3
 800e114:	42a0      	cmp	r0, r4
 800e116:	d0e3      	beq.n	800e0e0 <_malloc_r+0x64>
 800e118:	1a21      	subs	r1, r4, r0
 800e11a:	4630      	mov	r0, r6
 800e11c:	f000 f810 	bl	800e140 <_sbrk_r>
 800e120:	3001      	adds	r0, #1
 800e122:	d1dd      	bne.n	800e0e0 <_malloc_r+0x64>
 800e124:	e7cf      	b.n	800e0c6 <_malloc_r+0x4a>
 800e126:	bf00      	nop
 800e128:	200006cc 	.word	0x200006cc
 800e12c:	200006d0 	.word	0x200006d0

0800e130 <realloc>:
 800e130:	4b02      	ldr	r3, [pc, #8]	; (800e13c <realloc+0xc>)
 800e132:	460a      	mov	r2, r1
 800e134:	4601      	mov	r1, r0
 800e136:	6818      	ldr	r0, [r3, #0]
 800e138:	f000 b83e 	b.w	800e1b8 <_realloc_r>
 800e13c:	20000188 	.word	0x20000188

0800e140 <_sbrk_r>:
 800e140:	b538      	push	{r3, r4, r5, lr}
 800e142:	2300      	movs	r3, #0
 800e144:	4d05      	ldr	r5, [pc, #20]	; (800e15c <_sbrk_r+0x1c>)
 800e146:	4604      	mov	r4, r0
 800e148:	4608      	mov	r0, r1
 800e14a:	602b      	str	r3, [r5, #0]
 800e14c:	f7f6 f8e0 	bl	8004310 <_sbrk>
 800e150:	1c43      	adds	r3, r0, #1
 800e152:	d102      	bne.n	800e15a <_sbrk_r+0x1a>
 800e154:	682b      	ldr	r3, [r5, #0]
 800e156:	b103      	cbz	r3, 800e15a <_sbrk_r+0x1a>
 800e158:	6023      	str	r3, [r4, #0]
 800e15a:	bd38      	pop	{r3, r4, r5, pc}
 800e15c:	20001f9c 	.word	0x20001f9c

0800e160 <siprintf>:
 800e160:	b40e      	push	{r1, r2, r3}
 800e162:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800e166:	b500      	push	{lr}
 800e168:	b09c      	sub	sp, #112	; 0x70
 800e16a:	ab1d      	add	r3, sp, #116	; 0x74
 800e16c:	9002      	str	r0, [sp, #8]
 800e16e:	9006      	str	r0, [sp, #24]
 800e170:	9107      	str	r1, [sp, #28]
 800e172:	9104      	str	r1, [sp, #16]
 800e174:	4808      	ldr	r0, [pc, #32]	; (800e198 <siprintf+0x38>)
 800e176:	4909      	ldr	r1, [pc, #36]	; (800e19c <siprintf+0x3c>)
 800e178:	f853 2b04 	ldr.w	r2, [r3], #4
 800e17c:	9105      	str	r1, [sp, #20]
 800e17e:	6800      	ldr	r0, [r0, #0]
 800e180:	a902      	add	r1, sp, #8
 800e182:	9301      	str	r3, [sp, #4]
 800e184:	f000 f89a 	bl	800e2bc <_svfiprintf_r>
 800e188:	2200      	movs	r2, #0
 800e18a:	9b02      	ldr	r3, [sp, #8]
 800e18c:	701a      	strb	r2, [r3, #0]
 800e18e:	b01c      	add	sp, #112	; 0x70
 800e190:	f85d eb04 	ldr.w	lr, [sp], #4
 800e194:	b003      	add	sp, #12
 800e196:	4770      	bx	lr
 800e198:	20000188 	.word	0x20000188
 800e19c:	ffff0208 	.word	0xffff0208

0800e1a0 <__malloc_lock>:
 800e1a0:	4801      	ldr	r0, [pc, #4]	; (800e1a8 <__malloc_lock+0x8>)
 800e1a2:	f000 bb21 	b.w	800e7e8 <__retarget_lock_acquire_recursive>
 800e1a6:	bf00      	nop
 800e1a8:	20001fa4 	.word	0x20001fa4

0800e1ac <__malloc_unlock>:
 800e1ac:	4801      	ldr	r0, [pc, #4]	; (800e1b4 <__malloc_unlock+0x8>)
 800e1ae:	f000 bb1c 	b.w	800e7ea <__retarget_lock_release_recursive>
 800e1b2:	bf00      	nop
 800e1b4:	20001fa4 	.word	0x20001fa4

0800e1b8 <_realloc_r>:
 800e1b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e1ba:	4607      	mov	r7, r0
 800e1bc:	4614      	mov	r4, r2
 800e1be:	460e      	mov	r6, r1
 800e1c0:	b921      	cbnz	r1, 800e1cc <_realloc_r+0x14>
 800e1c2:	4611      	mov	r1, r2
 800e1c4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800e1c8:	f7ff bf58 	b.w	800e07c <_malloc_r>
 800e1cc:	b922      	cbnz	r2, 800e1d8 <_realloc_r+0x20>
 800e1ce:	f7ff ff09 	bl	800dfe4 <_free_r>
 800e1d2:	4625      	mov	r5, r4
 800e1d4:	4628      	mov	r0, r5
 800e1d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e1d8:	f000 fb3e 	bl	800e858 <_malloc_usable_size_r>
 800e1dc:	42a0      	cmp	r0, r4
 800e1de:	d20f      	bcs.n	800e200 <_realloc_r+0x48>
 800e1e0:	4621      	mov	r1, r4
 800e1e2:	4638      	mov	r0, r7
 800e1e4:	f7ff ff4a 	bl	800e07c <_malloc_r>
 800e1e8:	4605      	mov	r5, r0
 800e1ea:	2800      	cmp	r0, #0
 800e1ec:	d0f2      	beq.n	800e1d4 <_realloc_r+0x1c>
 800e1ee:	4631      	mov	r1, r6
 800e1f0:	4622      	mov	r2, r4
 800e1f2:	f000 fb09 	bl	800e808 <memcpy>
 800e1f6:	4631      	mov	r1, r6
 800e1f8:	4638      	mov	r0, r7
 800e1fa:	f7ff fef3 	bl	800dfe4 <_free_r>
 800e1fe:	e7e9      	b.n	800e1d4 <_realloc_r+0x1c>
 800e200:	4635      	mov	r5, r6
 800e202:	e7e7      	b.n	800e1d4 <_realloc_r+0x1c>

0800e204 <__ssputs_r>:
 800e204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e208:	688e      	ldr	r6, [r1, #8]
 800e20a:	4682      	mov	sl, r0
 800e20c:	429e      	cmp	r6, r3
 800e20e:	460c      	mov	r4, r1
 800e210:	4690      	mov	r8, r2
 800e212:	461f      	mov	r7, r3
 800e214:	d838      	bhi.n	800e288 <__ssputs_r+0x84>
 800e216:	898a      	ldrh	r2, [r1, #12]
 800e218:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800e21c:	d032      	beq.n	800e284 <__ssputs_r+0x80>
 800e21e:	6825      	ldr	r5, [r4, #0]
 800e220:	6909      	ldr	r1, [r1, #16]
 800e222:	3301      	adds	r3, #1
 800e224:	eba5 0901 	sub.w	r9, r5, r1
 800e228:	6965      	ldr	r5, [r4, #20]
 800e22a:	444b      	add	r3, r9
 800e22c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e230:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800e234:	106d      	asrs	r5, r5, #1
 800e236:	429d      	cmp	r5, r3
 800e238:	bf38      	it	cc
 800e23a:	461d      	movcc	r5, r3
 800e23c:	0553      	lsls	r3, r2, #21
 800e23e:	d531      	bpl.n	800e2a4 <__ssputs_r+0xa0>
 800e240:	4629      	mov	r1, r5
 800e242:	f7ff ff1b 	bl	800e07c <_malloc_r>
 800e246:	4606      	mov	r6, r0
 800e248:	b950      	cbnz	r0, 800e260 <__ssputs_r+0x5c>
 800e24a:	230c      	movs	r3, #12
 800e24c:	f04f 30ff 	mov.w	r0, #4294967295
 800e250:	f8ca 3000 	str.w	r3, [sl]
 800e254:	89a3      	ldrh	r3, [r4, #12]
 800e256:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e25a:	81a3      	strh	r3, [r4, #12]
 800e25c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e260:	464a      	mov	r2, r9
 800e262:	6921      	ldr	r1, [r4, #16]
 800e264:	f000 fad0 	bl	800e808 <memcpy>
 800e268:	89a3      	ldrh	r3, [r4, #12]
 800e26a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800e26e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e272:	81a3      	strh	r3, [r4, #12]
 800e274:	6126      	str	r6, [r4, #16]
 800e276:	444e      	add	r6, r9
 800e278:	6026      	str	r6, [r4, #0]
 800e27a:	463e      	mov	r6, r7
 800e27c:	6165      	str	r5, [r4, #20]
 800e27e:	eba5 0509 	sub.w	r5, r5, r9
 800e282:	60a5      	str	r5, [r4, #8]
 800e284:	42be      	cmp	r6, r7
 800e286:	d900      	bls.n	800e28a <__ssputs_r+0x86>
 800e288:	463e      	mov	r6, r7
 800e28a:	4632      	mov	r2, r6
 800e28c:	4641      	mov	r1, r8
 800e28e:	6820      	ldr	r0, [r4, #0]
 800e290:	f000 fac8 	bl	800e824 <memmove>
 800e294:	68a3      	ldr	r3, [r4, #8]
 800e296:	6822      	ldr	r2, [r4, #0]
 800e298:	1b9b      	subs	r3, r3, r6
 800e29a:	4432      	add	r2, r6
 800e29c:	2000      	movs	r0, #0
 800e29e:	60a3      	str	r3, [r4, #8]
 800e2a0:	6022      	str	r2, [r4, #0]
 800e2a2:	e7db      	b.n	800e25c <__ssputs_r+0x58>
 800e2a4:	462a      	mov	r2, r5
 800e2a6:	f7ff ff87 	bl	800e1b8 <_realloc_r>
 800e2aa:	4606      	mov	r6, r0
 800e2ac:	2800      	cmp	r0, #0
 800e2ae:	d1e1      	bne.n	800e274 <__ssputs_r+0x70>
 800e2b0:	4650      	mov	r0, sl
 800e2b2:	6921      	ldr	r1, [r4, #16]
 800e2b4:	f7ff fe96 	bl	800dfe4 <_free_r>
 800e2b8:	e7c7      	b.n	800e24a <__ssputs_r+0x46>
	...

0800e2bc <_svfiprintf_r>:
 800e2bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e2c0:	4698      	mov	r8, r3
 800e2c2:	898b      	ldrh	r3, [r1, #12]
 800e2c4:	4607      	mov	r7, r0
 800e2c6:	061b      	lsls	r3, r3, #24
 800e2c8:	460d      	mov	r5, r1
 800e2ca:	4614      	mov	r4, r2
 800e2cc:	b09d      	sub	sp, #116	; 0x74
 800e2ce:	d50e      	bpl.n	800e2ee <_svfiprintf_r+0x32>
 800e2d0:	690b      	ldr	r3, [r1, #16]
 800e2d2:	b963      	cbnz	r3, 800e2ee <_svfiprintf_r+0x32>
 800e2d4:	2140      	movs	r1, #64	; 0x40
 800e2d6:	f7ff fed1 	bl	800e07c <_malloc_r>
 800e2da:	6028      	str	r0, [r5, #0]
 800e2dc:	6128      	str	r0, [r5, #16]
 800e2de:	b920      	cbnz	r0, 800e2ea <_svfiprintf_r+0x2e>
 800e2e0:	230c      	movs	r3, #12
 800e2e2:	603b      	str	r3, [r7, #0]
 800e2e4:	f04f 30ff 	mov.w	r0, #4294967295
 800e2e8:	e0d1      	b.n	800e48e <_svfiprintf_r+0x1d2>
 800e2ea:	2340      	movs	r3, #64	; 0x40
 800e2ec:	616b      	str	r3, [r5, #20]
 800e2ee:	2300      	movs	r3, #0
 800e2f0:	9309      	str	r3, [sp, #36]	; 0x24
 800e2f2:	2320      	movs	r3, #32
 800e2f4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e2f8:	2330      	movs	r3, #48	; 0x30
 800e2fa:	f04f 0901 	mov.w	r9, #1
 800e2fe:	f8cd 800c 	str.w	r8, [sp, #12]
 800e302:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800e4a8 <_svfiprintf_r+0x1ec>
 800e306:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e30a:	4623      	mov	r3, r4
 800e30c:	469a      	mov	sl, r3
 800e30e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e312:	b10a      	cbz	r2, 800e318 <_svfiprintf_r+0x5c>
 800e314:	2a25      	cmp	r2, #37	; 0x25
 800e316:	d1f9      	bne.n	800e30c <_svfiprintf_r+0x50>
 800e318:	ebba 0b04 	subs.w	fp, sl, r4
 800e31c:	d00b      	beq.n	800e336 <_svfiprintf_r+0x7a>
 800e31e:	465b      	mov	r3, fp
 800e320:	4622      	mov	r2, r4
 800e322:	4629      	mov	r1, r5
 800e324:	4638      	mov	r0, r7
 800e326:	f7ff ff6d 	bl	800e204 <__ssputs_r>
 800e32a:	3001      	adds	r0, #1
 800e32c:	f000 80aa 	beq.w	800e484 <_svfiprintf_r+0x1c8>
 800e330:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e332:	445a      	add	r2, fp
 800e334:	9209      	str	r2, [sp, #36]	; 0x24
 800e336:	f89a 3000 	ldrb.w	r3, [sl]
 800e33a:	2b00      	cmp	r3, #0
 800e33c:	f000 80a2 	beq.w	800e484 <_svfiprintf_r+0x1c8>
 800e340:	2300      	movs	r3, #0
 800e342:	f04f 32ff 	mov.w	r2, #4294967295
 800e346:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e34a:	f10a 0a01 	add.w	sl, sl, #1
 800e34e:	9304      	str	r3, [sp, #16]
 800e350:	9307      	str	r3, [sp, #28]
 800e352:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e356:	931a      	str	r3, [sp, #104]	; 0x68
 800e358:	4654      	mov	r4, sl
 800e35a:	2205      	movs	r2, #5
 800e35c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e360:	4851      	ldr	r0, [pc, #324]	; (800e4a8 <_svfiprintf_r+0x1ec>)
 800e362:	f000 fa43 	bl	800e7ec <memchr>
 800e366:	9a04      	ldr	r2, [sp, #16]
 800e368:	b9d8      	cbnz	r0, 800e3a2 <_svfiprintf_r+0xe6>
 800e36a:	06d0      	lsls	r0, r2, #27
 800e36c:	bf44      	itt	mi
 800e36e:	2320      	movmi	r3, #32
 800e370:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e374:	0711      	lsls	r1, r2, #28
 800e376:	bf44      	itt	mi
 800e378:	232b      	movmi	r3, #43	; 0x2b
 800e37a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e37e:	f89a 3000 	ldrb.w	r3, [sl]
 800e382:	2b2a      	cmp	r3, #42	; 0x2a
 800e384:	d015      	beq.n	800e3b2 <_svfiprintf_r+0xf6>
 800e386:	4654      	mov	r4, sl
 800e388:	2000      	movs	r0, #0
 800e38a:	f04f 0c0a 	mov.w	ip, #10
 800e38e:	9a07      	ldr	r2, [sp, #28]
 800e390:	4621      	mov	r1, r4
 800e392:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e396:	3b30      	subs	r3, #48	; 0x30
 800e398:	2b09      	cmp	r3, #9
 800e39a:	d94e      	bls.n	800e43a <_svfiprintf_r+0x17e>
 800e39c:	b1b0      	cbz	r0, 800e3cc <_svfiprintf_r+0x110>
 800e39e:	9207      	str	r2, [sp, #28]
 800e3a0:	e014      	b.n	800e3cc <_svfiprintf_r+0x110>
 800e3a2:	eba0 0308 	sub.w	r3, r0, r8
 800e3a6:	fa09 f303 	lsl.w	r3, r9, r3
 800e3aa:	4313      	orrs	r3, r2
 800e3ac:	46a2      	mov	sl, r4
 800e3ae:	9304      	str	r3, [sp, #16]
 800e3b0:	e7d2      	b.n	800e358 <_svfiprintf_r+0x9c>
 800e3b2:	9b03      	ldr	r3, [sp, #12]
 800e3b4:	1d19      	adds	r1, r3, #4
 800e3b6:	681b      	ldr	r3, [r3, #0]
 800e3b8:	9103      	str	r1, [sp, #12]
 800e3ba:	2b00      	cmp	r3, #0
 800e3bc:	bfbb      	ittet	lt
 800e3be:	425b      	neglt	r3, r3
 800e3c0:	f042 0202 	orrlt.w	r2, r2, #2
 800e3c4:	9307      	strge	r3, [sp, #28]
 800e3c6:	9307      	strlt	r3, [sp, #28]
 800e3c8:	bfb8      	it	lt
 800e3ca:	9204      	strlt	r2, [sp, #16]
 800e3cc:	7823      	ldrb	r3, [r4, #0]
 800e3ce:	2b2e      	cmp	r3, #46	; 0x2e
 800e3d0:	d10c      	bne.n	800e3ec <_svfiprintf_r+0x130>
 800e3d2:	7863      	ldrb	r3, [r4, #1]
 800e3d4:	2b2a      	cmp	r3, #42	; 0x2a
 800e3d6:	d135      	bne.n	800e444 <_svfiprintf_r+0x188>
 800e3d8:	9b03      	ldr	r3, [sp, #12]
 800e3da:	3402      	adds	r4, #2
 800e3dc:	1d1a      	adds	r2, r3, #4
 800e3de:	681b      	ldr	r3, [r3, #0]
 800e3e0:	9203      	str	r2, [sp, #12]
 800e3e2:	2b00      	cmp	r3, #0
 800e3e4:	bfb8      	it	lt
 800e3e6:	f04f 33ff 	movlt.w	r3, #4294967295
 800e3ea:	9305      	str	r3, [sp, #20]
 800e3ec:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800e4b8 <_svfiprintf_r+0x1fc>
 800e3f0:	2203      	movs	r2, #3
 800e3f2:	4650      	mov	r0, sl
 800e3f4:	7821      	ldrb	r1, [r4, #0]
 800e3f6:	f000 f9f9 	bl	800e7ec <memchr>
 800e3fa:	b140      	cbz	r0, 800e40e <_svfiprintf_r+0x152>
 800e3fc:	2340      	movs	r3, #64	; 0x40
 800e3fe:	eba0 000a 	sub.w	r0, r0, sl
 800e402:	fa03 f000 	lsl.w	r0, r3, r0
 800e406:	9b04      	ldr	r3, [sp, #16]
 800e408:	3401      	adds	r4, #1
 800e40a:	4303      	orrs	r3, r0
 800e40c:	9304      	str	r3, [sp, #16]
 800e40e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e412:	2206      	movs	r2, #6
 800e414:	4825      	ldr	r0, [pc, #148]	; (800e4ac <_svfiprintf_r+0x1f0>)
 800e416:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e41a:	f000 f9e7 	bl	800e7ec <memchr>
 800e41e:	2800      	cmp	r0, #0
 800e420:	d038      	beq.n	800e494 <_svfiprintf_r+0x1d8>
 800e422:	4b23      	ldr	r3, [pc, #140]	; (800e4b0 <_svfiprintf_r+0x1f4>)
 800e424:	bb1b      	cbnz	r3, 800e46e <_svfiprintf_r+0x1b2>
 800e426:	9b03      	ldr	r3, [sp, #12]
 800e428:	3307      	adds	r3, #7
 800e42a:	f023 0307 	bic.w	r3, r3, #7
 800e42e:	3308      	adds	r3, #8
 800e430:	9303      	str	r3, [sp, #12]
 800e432:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e434:	4433      	add	r3, r6
 800e436:	9309      	str	r3, [sp, #36]	; 0x24
 800e438:	e767      	b.n	800e30a <_svfiprintf_r+0x4e>
 800e43a:	460c      	mov	r4, r1
 800e43c:	2001      	movs	r0, #1
 800e43e:	fb0c 3202 	mla	r2, ip, r2, r3
 800e442:	e7a5      	b.n	800e390 <_svfiprintf_r+0xd4>
 800e444:	2300      	movs	r3, #0
 800e446:	f04f 0c0a 	mov.w	ip, #10
 800e44a:	4619      	mov	r1, r3
 800e44c:	3401      	adds	r4, #1
 800e44e:	9305      	str	r3, [sp, #20]
 800e450:	4620      	mov	r0, r4
 800e452:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e456:	3a30      	subs	r2, #48	; 0x30
 800e458:	2a09      	cmp	r2, #9
 800e45a:	d903      	bls.n	800e464 <_svfiprintf_r+0x1a8>
 800e45c:	2b00      	cmp	r3, #0
 800e45e:	d0c5      	beq.n	800e3ec <_svfiprintf_r+0x130>
 800e460:	9105      	str	r1, [sp, #20]
 800e462:	e7c3      	b.n	800e3ec <_svfiprintf_r+0x130>
 800e464:	4604      	mov	r4, r0
 800e466:	2301      	movs	r3, #1
 800e468:	fb0c 2101 	mla	r1, ip, r1, r2
 800e46c:	e7f0      	b.n	800e450 <_svfiprintf_r+0x194>
 800e46e:	ab03      	add	r3, sp, #12
 800e470:	9300      	str	r3, [sp, #0]
 800e472:	462a      	mov	r2, r5
 800e474:	4638      	mov	r0, r7
 800e476:	4b0f      	ldr	r3, [pc, #60]	; (800e4b4 <_svfiprintf_r+0x1f8>)
 800e478:	a904      	add	r1, sp, #16
 800e47a:	f3af 8000 	nop.w
 800e47e:	1c42      	adds	r2, r0, #1
 800e480:	4606      	mov	r6, r0
 800e482:	d1d6      	bne.n	800e432 <_svfiprintf_r+0x176>
 800e484:	89ab      	ldrh	r3, [r5, #12]
 800e486:	065b      	lsls	r3, r3, #25
 800e488:	f53f af2c 	bmi.w	800e2e4 <_svfiprintf_r+0x28>
 800e48c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e48e:	b01d      	add	sp, #116	; 0x74
 800e490:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e494:	ab03      	add	r3, sp, #12
 800e496:	9300      	str	r3, [sp, #0]
 800e498:	462a      	mov	r2, r5
 800e49a:	4638      	mov	r0, r7
 800e49c:	4b05      	ldr	r3, [pc, #20]	; (800e4b4 <_svfiprintf_r+0x1f8>)
 800e49e:	a904      	add	r1, sp, #16
 800e4a0:	f000 f87c 	bl	800e59c <_printf_i>
 800e4a4:	e7eb      	b.n	800e47e <_svfiprintf_r+0x1c2>
 800e4a6:	bf00      	nop
 800e4a8:	0800f388 	.word	0x0800f388
 800e4ac:	0800f392 	.word	0x0800f392
 800e4b0:	00000000 	.word	0x00000000
 800e4b4:	0800e205 	.word	0x0800e205
 800e4b8:	0800f38e 	.word	0x0800f38e

0800e4bc <_printf_common>:
 800e4bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e4c0:	4616      	mov	r6, r2
 800e4c2:	4699      	mov	r9, r3
 800e4c4:	688a      	ldr	r2, [r1, #8]
 800e4c6:	690b      	ldr	r3, [r1, #16]
 800e4c8:	4607      	mov	r7, r0
 800e4ca:	4293      	cmp	r3, r2
 800e4cc:	bfb8      	it	lt
 800e4ce:	4613      	movlt	r3, r2
 800e4d0:	6033      	str	r3, [r6, #0]
 800e4d2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800e4d6:	460c      	mov	r4, r1
 800e4d8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800e4dc:	b10a      	cbz	r2, 800e4e2 <_printf_common+0x26>
 800e4de:	3301      	adds	r3, #1
 800e4e0:	6033      	str	r3, [r6, #0]
 800e4e2:	6823      	ldr	r3, [r4, #0]
 800e4e4:	0699      	lsls	r1, r3, #26
 800e4e6:	bf42      	ittt	mi
 800e4e8:	6833      	ldrmi	r3, [r6, #0]
 800e4ea:	3302      	addmi	r3, #2
 800e4ec:	6033      	strmi	r3, [r6, #0]
 800e4ee:	6825      	ldr	r5, [r4, #0]
 800e4f0:	f015 0506 	ands.w	r5, r5, #6
 800e4f4:	d106      	bne.n	800e504 <_printf_common+0x48>
 800e4f6:	f104 0a19 	add.w	sl, r4, #25
 800e4fa:	68e3      	ldr	r3, [r4, #12]
 800e4fc:	6832      	ldr	r2, [r6, #0]
 800e4fe:	1a9b      	subs	r3, r3, r2
 800e500:	42ab      	cmp	r3, r5
 800e502:	dc28      	bgt.n	800e556 <_printf_common+0x9a>
 800e504:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800e508:	1e13      	subs	r3, r2, #0
 800e50a:	6822      	ldr	r2, [r4, #0]
 800e50c:	bf18      	it	ne
 800e50e:	2301      	movne	r3, #1
 800e510:	0692      	lsls	r2, r2, #26
 800e512:	d42d      	bmi.n	800e570 <_printf_common+0xb4>
 800e514:	4649      	mov	r1, r9
 800e516:	4638      	mov	r0, r7
 800e518:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800e51c:	47c0      	blx	r8
 800e51e:	3001      	adds	r0, #1
 800e520:	d020      	beq.n	800e564 <_printf_common+0xa8>
 800e522:	6823      	ldr	r3, [r4, #0]
 800e524:	68e5      	ldr	r5, [r4, #12]
 800e526:	f003 0306 	and.w	r3, r3, #6
 800e52a:	2b04      	cmp	r3, #4
 800e52c:	bf18      	it	ne
 800e52e:	2500      	movne	r5, #0
 800e530:	6832      	ldr	r2, [r6, #0]
 800e532:	f04f 0600 	mov.w	r6, #0
 800e536:	68a3      	ldr	r3, [r4, #8]
 800e538:	bf08      	it	eq
 800e53a:	1aad      	subeq	r5, r5, r2
 800e53c:	6922      	ldr	r2, [r4, #16]
 800e53e:	bf08      	it	eq
 800e540:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e544:	4293      	cmp	r3, r2
 800e546:	bfc4      	itt	gt
 800e548:	1a9b      	subgt	r3, r3, r2
 800e54a:	18ed      	addgt	r5, r5, r3
 800e54c:	341a      	adds	r4, #26
 800e54e:	42b5      	cmp	r5, r6
 800e550:	d11a      	bne.n	800e588 <_printf_common+0xcc>
 800e552:	2000      	movs	r0, #0
 800e554:	e008      	b.n	800e568 <_printf_common+0xac>
 800e556:	2301      	movs	r3, #1
 800e558:	4652      	mov	r2, sl
 800e55a:	4649      	mov	r1, r9
 800e55c:	4638      	mov	r0, r7
 800e55e:	47c0      	blx	r8
 800e560:	3001      	adds	r0, #1
 800e562:	d103      	bne.n	800e56c <_printf_common+0xb0>
 800e564:	f04f 30ff 	mov.w	r0, #4294967295
 800e568:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e56c:	3501      	adds	r5, #1
 800e56e:	e7c4      	b.n	800e4fa <_printf_common+0x3e>
 800e570:	2030      	movs	r0, #48	; 0x30
 800e572:	18e1      	adds	r1, r4, r3
 800e574:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800e578:	1c5a      	adds	r2, r3, #1
 800e57a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800e57e:	4422      	add	r2, r4
 800e580:	3302      	adds	r3, #2
 800e582:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800e586:	e7c5      	b.n	800e514 <_printf_common+0x58>
 800e588:	2301      	movs	r3, #1
 800e58a:	4622      	mov	r2, r4
 800e58c:	4649      	mov	r1, r9
 800e58e:	4638      	mov	r0, r7
 800e590:	47c0      	blx	r8
 800e592:	3001      	adds	r0, #1
 800e594:	d0e6      	beq.n	800e564 <_printf_common+0xa8>
 800e596:	3601      	adds	r6, #1
 800e598:	e7d9      	b.n	800e54e <_printf_common+0x92>
	...

0800e59c <_printf_i>:
 800e59c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e5a0:	460c      	mov	r4, r1
 800e5a2:	7e27      	ldrb	r7, [r4, #24]
 800e5a4:	4691      	mov	r9, r2
 800e5a6:	2f78      	cmp	r7, #120	; 0x78
 800e5a8:	4680      	mov	r8, r0
 800e5aa:	469a      	mov	sl, r3
 800e5ac:	990c      	ldr	r1, [sp, #48]	; 0x30
 800e5ae:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800e5b2:	d807      	bhi.n	800e5c4 <_printf_i+0x28>
 800e5b4:	2f62      	cmp	r7, #98	; 0x62
 800e5b6:	d80a      	bhi.n	800e5ce <_printf_i+0x32>
 800e5b8:	2f00      	cmp	r7, #0
 800e5ba:	f000 80d9 	beq.w	800e770 <_printf_i+0x1d4>
 800e5be:	2f58      	cmp	r7, #88	; 0x58
 800e5c0:	f000 80a4 	beq.w	800e70c <_printf_i+0x170>
 800e5c4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800e5c8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800e5cc:	e03a      	b.n	800e644 <_printf_i+0xa8>
 800e5ce:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800e5d2:	2b15      	cmp	r3, #21
 800e5d4:	d8f6      	bhi.n	800e5c4 <_printf_i+0x28>
 800e5d6:	a001      	add	r0, pc, #4	; (adr r0, 800e5dc <_printf_i+0x40>)
 800e5d8:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800e5dc:	0800e635 	.word	0x0800e635
 800e5e0:	0800e649 	.word	0x0800e649
 800e5e4:	0800e5c5 	.word	0x0800e5c5
 800e5e8:	0800e5c5 	.word	0x0800e5c5
 800e5ec:	0800e5c5 	.word	0x0800e5c5
 800e5f0:	0800e5c5 	.word	0x0800e5c5
 800e5f4:	0800e649 	.word	0x0800e649
 800e5f8:	0800e5c5 	.word	0x0800e5c5
 800e5fc:	0800e5c5 	.word	0x0800e5c5
 800e600:	0800e5c5 	.word	0x0800e5c5
 800e604:	0800e5c5 	.word	0x0800e5c5
 800e608:	0800e757 	.word	0x0800e757
 800e60c:	0800e679 	.word	0x0800e679
 800e610:	0800e739 	.word	0x0800e739
 800e614:	0800e5c5 	.word	0x0800e5c5
 800e618:	0800e5c5 	.word	0x0800e5c5
 800e61c:	0800e779 	.word	0x0800e779
 800e620:	0800e5c5 	.word	0x0800e5c5
 800e624:	0800e679 	.word	0x0800e679
 800e628:	0800e5c5 	.word	0x0800e5c5
 800e62c:	0800e5c5 	.word	0x0800e5c5
 800e630:	0800e741 	.word	0x0800e741
 800e634:	680b      	ldr	r3, [r1, #0]
 800e636:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800e63a:	1d1a      	adds	r2, r3, #4
 800e63c:	681b      	ldr	r3, [r3, #0]
 800e63e:	600a      	str	r2, [r1, #0]
 800e640:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800e644:	2301      	movs	r3, #1
 800e646:	e0a4      	b.n	800e792 <_printf_i+0x1f6>
 800e648:	6825      	ldr	r5, [r4, #0]
 800e64a:	6808      	ldr	r0, [r1, #0]
 800e64c:	062e      	lsls	r6, r5, #24
 800e64e:	f100 0304 	add.w	r3, r0, #4
 800e652:	d50a      	bpl.n	800e66a <_printf_i+0xce>
 800e654:	6805      	ldr	r5, [r0, #0]
 800e656:	600b      	str	r3, [r1, #0]
 800e658:	2d00      	cmp	r5, #0
 800e65a:	da03      	bge.n	800e664 <_printf_i+0xc8>
 800e65c:	232d      	movs	r3, #45	; 0x2d
 800e65e:	426d      	negs	r5, r5
 800e660:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e664:	230a      	movs	r3, #10
 800e666:	485e      	ldr	r0, [pc, #376]	; (800e7e0 <_printf_i+0x244>)
 800e668:	e019      	b.n	800e69e <_printf_i+0x102>
 800e66a:	f015 0f40 	tst.w	r5, #64	; 0x40
 800e66e:	6805      	ldr	r5, [r0, #0]
 800e670:	600b      	str	r3, [r1, #0]
 800e672:	bf18      	it	ne
 800e674:	b22d      	sxthne	r5, r5
 800e676:	e7ef      	b.n	800e658 <_printf_i+0xbc>
 800e678:	680b      	ldr	r3, [r1, #0]
 800e67a:	6825      	ldr	r5, [r4, #0]
 800e67c:	1d18      	adds	r0, r3, #4
 800e67e:	6008      	str	r0, [r1, #0]
 800e680:	0628      	lsls	r0, r5, #24
 800e682:	d501      	bpl.n	800e688 <_printf_i+0xec>
 800e684:	681d      	ldr	r5, [r3, #0]
 800e686:	e002      	b.n	800e68e <_printf_i+0xf2>
 800e688:	0669      	lsls	r1, r5, #25
 800e68a:	d5fb      	bpl.n	800e684 <_printf_i+0xe8>
 800e68c:	881d      	ldrh	r5, [r3, #0]
 800e68e:	2f6f      	cmp	r7, #111	; 0x6f
 800e690:	bf0c      	ite	eq
 800e692:	2308      	moveq	r3, #8
 800e694:	230a      	movne	r3, #10
 800e696:	4852      	ldr	r0, [pc, #328]	; (800e7e0 <_printf_i+0x244>)
 800e698:	2100      	movs	r1, #0
 800e69a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800e69e:	6866      	ldr	r6, [r4, #4]
 800e6a0:	2e00      	cmp	r6, #0
 800e6a2:	bfa8      	it	ge
 800e6a4:	6821      	ldrge	r1, [r4, #0]
 800e6a6:	60a6      	str	r6, [r4, #8]
 800e6a8:	bfa4      	itt	ge
 800e6aa:	f021 0104 	bicge.w	r1, r1, #4
 800e6ae:	6021      	strge	r1, [r4, #0]
 800e6b0:	b90d      	cbnz	r5, 800e6b6 <_printf_i+0x11a>
 800e6b2:	2e00      	cmp	r6, #0
 800e6b4:	d04d      	beq.n	800e752 <_printf_i+0x1b6>
 800e6b6:	4616      	mov	r6, r2
 800e6b8:	fbb5 f1f3 	udiv	r1, r5, r3
 800e6bc:	fb03 5711 	mls	r7, r3, r1, r5
 800e6c0:	5dc7      	ldrb	r7, [r0, r7]
 800e6c2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800e6c6:	462f      	mov	r7, r5
 800e6c8:	42bb      	cmp	r3, r7
 800e6ca:	460d      	mov	r5, r1
 800e6cc:	d9f4      	bls.n	800e6b8 <_printf_i+0x11c>
 800e6ce:	2b08      	cmp	r3, #8
 800e6d0:	d10b      	bne.n	800e6ea <_printf_i+0x14e>
 800e6d2:	6823      	ldr	r3, [r4, #0]
 800e6d4:	07df      	lsls	r7, r3, #31
 800e6d6:	d508      	bpl.n	800e6ea <_printf_i+0x14e>
 800e6d8:	6923      	ldr	r3, [r4, #16]
 800e6da:	6861      	ldr	r1, [r4, #4]
 800e6dc:	4299      	cmp	r1, r3
 800e6de:	bfde      	ittt	le
 800e6e0:	2330      	movle	r3, #48	; 0x30
 800e6e2:	f806 3c01 	strble.w	r3, [r6, #-1]
 800e6e6:	f106 36ff 	addle.w	r6, r6, #4294967295
 800e6ea:	1b92      	subs	r2, r2, r6
 800e6ec:	6122      	str	r2, [r4, #16]
 800e6ee:	464b      	mov	r3, r9
 800e6f0:	4621      	mov	r1, r4
 800e6f2:	4640      	mov	r0, r8
 800e6f4:	f8cd a000 	str.w	sl, [sp]
 800e6f8:	aa03      	add	r2, sp, #12
 800e6fa:	f7ff fedf 	bl	800e4bc <_printf_common>
 800e6fe:	3001      	adds	r0, #1
 800e700:	d14c      	bne.n	800e79c <_printf_i+0x200>
 800e702:	f04f 30ff 	mov.w	r0, #4294967295
 800e706:	b004      	add	sp, #16
 800e708:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e70c:	4834      	ldr	r0, [pc, #208]	; (800e7e0 <_printf_i+0x244>)
 800e70e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800e712:	680e      	ldr	r6, [r1, #0]
 800e714:	6823      	ldr	r3, [r4, #0]
 800e716:	f856 5b04 	ldr.w	r5, [r6], #4
 800e71a:	061f      	lsls	r7, r3, #24
 800e71c:	600e      	str	r6, [r1, #0]
 800e71e:	d514      	bpl.n	800e74a <_printf_i+0x1ae>
 800e720:	07d9      	lsls	r1, r3, #31
 800e722:	bf44      	itt	mi
 800e724:	f043 0320 	orrmi.w	r3, r3, #32
 800e728:	6023      	strmi	r3, [r4, #0]
 800e72a:	b91d      	cbnz	r5, 800e734 <_printf_i+0x198>
 800e72c:	6823      	ldr	r3, [r4, #0]
 800e72e:	f023 0320 	bic.w	r3, r3, #32
 800e732:	6023      	str	r3, [r4, #0]
 800e734:	2310      	movs	r3, #16
 800e736:	e7af      	b.n	800e698 <_printf_i+0xfc>
 800e738:	6823      	ldr	r3, [r4, #0]
 800e73a:	f043 0320 	orr.w	r3, r3, #32
 800e73e:	6023      	str	r3, [r4, #0]
 800e740:	2378      	movs	r3, #120	; 0x78
 800e742:	4828      	ldr	r0, [pc, #160]	; (800e7e4 <_printf_i+0x248>)
 800e744:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800e748:	e7e3      	b.n	800e712 <_printf_i+0x176>
 800e74a:	065e      	lsls	r6, r3, #25
 800e74c:	bf48      	it	mi
 800e74e:	b2ad      	uxthmi	r5, r5
 800e750:	e7e6      	b.n	800e720 <_printf_i+0x184>
 800e752:	4616      	mov	r6, r2
 800e754:	e7bb      	b.n	800e6ce <_printf_i+0x132>
 800e756:	680b      	ldr	r3, [r1, #0]
 800e758:	6826      	ldr	r6, [r4, #0]
 800e75a:	1d1d      	adds	r5, r3, #4
 800e75c:	6960      	ldr	r0, [r4, #20]
 800e75e:	600d      	str	r5, [r1, #0]
 800e760:	0635      	lsls	r5, r6, #24
 800e762:	681b      	ldr	r3, [r3, #0]
 800e764:	d501      	bpl.n	800e76a <_printf_i+0x1ce>
 800e766:	6018      	str	r0, [r3, #0]
 800e768:	e002      	b.n	800e770 <_printf_i+0x1d4>
 800e76a:	0671      	lsls	r1, r6, #25
 800e76c:	d5fb      	bpl.n	800e766 <_printf_i+0x1ca>
 800e76e:	8018      	strh	r0, [r3, #0]
 800e770:	2300      	movs	r3, #0
 800e772:	4616      	mov	r6, r2
 800e774:	6123      	str	r3, [r4, #16]
 800e776:	e7ba      	b.n	800e6ee <_printf_i+0x152>
 800e778:	680b      	ldr	r3, [r1, #0]
 800e77a:	1d1a      	adds	r2, r3, #4
 800e77c:	600a      	str	r2, [r1, #0]
 800e77e:	681e      	ldr	r6, [r3, #0]
 800e780:	2100      	movs	r1, #0
 800e782:	4630      	mov	r0, r6
 800e784:	6862      	ldr	r2, [r4, #4]
 800e786:	f000 f831 	bl	800e7ec <memchr>
 800e78a:	b108      	cbz	r0, 800e790 <_printf_i+0x1f4>
 800e78c:	1b80      	subs	r0, r0, r6
 800e78e:	6060      	str	r0, [r4, #4]
 800e790:	6863      	ldr	r3, [r4, #4]
 800e792:	6123      	str	r3, [r4, #16]
 800e794:	2300      	movs	r3, #0
 800e796:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e79a:	e7a8      	b.n	800e6ee <_printf_i+0x152>
 800e79c:	4632      	mov	r2, r6
 800e79e:	4649      	mov	r1, r9
 800e7a0:	4640      	mov	r0, r8
 800e7a2:	6923      	ldr	r3, [r4, #16]
 800e7a4:	47d0      	blx	sl
 800e7a6:	3001      	adds	r0, #1
 800e7a8:	d0ab      	beq.n	800e702 <_printf_i+0x166>
 800e7aa:	6823      	ldr	r3, [r4, #0]
 800e7ac:	079b      	lsls	r3, r3, #30
 800e7ae:	d413      	bmi.n	800e7d8 <_printf_i+0x23c>
 800e7b0:	68e0      	ldr	r0, [r4, #12]
 800e7b2:	9b03      	ldr	r3, [sp, #12]
 800e7b4:	4298      	cmp	r0, r3
 800e7b6:	bfb8      	it	lt
 800e7b8:	4618      	movlt	r0, r3
 800e7ba:	e7a4      	b.n	800e706 <_printf_i+0x16a>
 800e7bc:	2301      	movs	r3, #1
 800e7be:	4632      	mov	r2, r6
 800e7c0:	4649      	mov	r1, r9
 800e7c2:	4640      	mov	r0, r8
 800e7c4:	47d0      	blx	sl
 800e7c6:	3001      	adds	r0, #1
 800e7c8:	d09b      	beq.n	800e702 <_printf_i+0x166>
 800e7ca:	3501      	adds	r5, #1
 800e7cc:	68e3      	ldr	r3, [r4, #12]
 800e7ce:	9903      	ldr	r1, [sp, #12]
 800e7d0:	1a5b      	subs	r3, r3, r1
 800e7d2:	42ab      	cmp	r3, r5
 800e7d4:	dcf2      	bgt.n	800e7bc <_printf_i+0x220>
 800e7d6:	e7eb      	b.n	800e7b0 <_printf_i+0x214>
 800e7d8:	2500      	movs	r5, #0
 800e7da:	f104 0619 	add.w	r6, r4, #25
 800e7de:	e7f5      	b.n	800e7cc <_printf_i+0x230>
 800e7e0:	0800f399 	.word	0x0800f399
 800e7e4:	0800f3aa 	.word	0x0800f3aa

0800e7e8 <__retarget_lock_acquire_recursive>:
 800e7e8:	4770      	bx	lr

0800e7ea <__retarget_lock_release_recursive>:
 800e7ea:	4770      	bx	lr

0800e7ec <memchr>:
 800e7ec:	4603      	mov	r3, r0
 800e7ee:	b510      	push	{r4, lr}
 800e7f0:	b2c9      	uxtb	r1, r1
 800e7f2:	4402      	add	r2, r0
 800e7f4:	4293      	cmp	r3, r2
 800e7f6:	4618      	mov	r0, r3
 800e7f8:	d101      	bne.n	800e7fe <memchr+0x12>
 800e7fa:	2000      	movs	r0, #0
 800e7fc:	e003      	b.n	800e806 <memchr+0x1a>
 800e7fe:	7804      	ldrb	r4, [r0, #0]
 800e800:	3301      	adds	r3, #1
 800e802:	428c      	cmp	r4, r1
 800e804:	d1f6      	bne.n	800e7f4 <memchr+0x8>
 800e806:	bd10      	pop	{r4, pc}

0800e808 <memcpy>:
 800e808:	440a      	add	r2, r1
 800e80a:	4291      	cmp	r1, r2
 800e80c:	f100 33ff 	add.w	r3, r0, #4294967295
 800e810:	d100      	bne.n	800e814 <memcpy+0xc>
 800e812:	4770      	bx	lr
 800e814:	b510      	push	{r4, lr}
 800e816:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e81a:	4291      	cmp	r1, r2
 800e81c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e820:	d1f9      	bne.n	800e816 <memcpy+0xe>
 800e822:	bd10      	pop	{r4, pc}

0800e824 <memmove>:
 800e824:	4288      	cmp	r0, r1
 800e826:	b510      	push	{r4, lr}
 800e828:	eb01 0402 	add.w	r4, r1, r2
 800e82c:	d902      	bls.n	800e834 <memmove+0x10>
 800e82e:	4284      	cmp	r4, r0
 800e830:	4623      	mov	r3, r4
 800e832:	d807      	bhi.n	800e844 <memmove+0x20>
 800e834:	1e43      	subs	r3, r0, #1
 800e836:	42a1      	cmp	r1, r4
 800e838:	d008      	beq.n	800e84c <memmove+0x28>
 800e83a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e83e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e842:	e7f8      	b.n	800e836 <memmove+0x12>
 800e844:	4601      	mov	r1, r0
 800e846:	4402      	add	r2, r0
 800e848:	428a      	cmp	r2, r1
 800e84a:	d100      	bne.n	800e84e <memmove+0x2a>
 800e84c:	bd10      	pop	{r4, pc}
 800e84e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e852:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e856:	e7f7      	b.n	800e848 <memmove+0x24>

0800e858 <_malloc_usable_size_r>:
 800e858:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e85c:	1f18      	subs	r0, r3, #4
 800e85e:	2b00      	cmp	r3, #0
 800e860:	bfbc      	itt	lt
 800e862:	580b      	ldrlt	r3, [r1, r0]
 800e864:	18c0      	addlt	r0, r0, r3
 800e866:	4770      	bx	lr

0800e868 <_init>:
 800e868:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e86a:	bf00      	nop
 800e86c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e86e:	bc08      	pop	{r3}
 800e870:	469e      	mov	lr, r3
 800e872:	4770      	bx	lr

0800e874 <_fini>:
 800e874:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e876:	bf00      	nop
 800e878:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e87a:	bc08      	pop	{r3}
 800e87c:	469e      	mov	lr, r3
 800e87e:	4770      	bx	lr
