
Heli_SPL2_Firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000184  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010d00  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000eec  08010e88  08010e88  00020e88  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08011d74  08011d74  00030358  2**0
                  CONTENTS
  4 .ARM          00000008  08011d74  08011d74  00021d74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08011d7c  08011d7c  00030358  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08011d7c  08011d7c  00021d7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08011d84  08011d84  00021d84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000358  20000000  08011d88  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001dc0  20000358  080120e0  00030358  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002118  080120e0  00032118  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00030358  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003d469  00000000  00000000  00030381  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000053a6  00000000  00000000  0006d7ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001f78  00000000  00000000  00072b90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001db8  00000000  00000000  00074b08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000286ea  00000000  00000000  000768c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002257e  00000000  00000000  0009efaa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cd3ea  00000000  00000000  000c1528  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0018e912  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009d5c  00000000  00000000  0018e968  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000358 	.word	0x20000358
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08010e70 	.word	0x08010e70

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000035c 	.word	0x2000035c
 80001c4:	08010e70 	.word	0x08010e70

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmpun>:
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x10>
 8000a8e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a92:	d10a      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000a94:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	d102      	bne.n	8000aa4 <__aeabi_dcmpun+0x20>
 8000a9e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aa2:	d102      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	f04f 0001 	mov.w	r0, #1
 8000aae:	4770      	bx	lr

08000ab0 <__aeabi_d2iz>:
 8000ab0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ab4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ab8:	d215      	bcs.n	8000ae6 <__aeabi_d2iz+0x36>
 8000aba:	d511      	bpl.n	8000ae0 <__aeabi_d2iz+0x30>
 8000abc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ac0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ac4:	d912      	bls.n	8000aec <__aeabi_d2iz+0x3c>
 8000ac6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aca:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ace:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ad2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ad6:	fa23 f002 	lsr.w	r0, r3, r2
 8000ada:	bf18      	it	ne
 8000adc:	4240      	negne	r0, r0
 8000ade:	4770      	bx	lr
 8000ae0:	f04f 0000 	mov.w	r0, #0
 8000ae4:	4770      	bx	lr
 8000ae6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aea:	d105      	bne.n	8000af8 <__aeabi_d2iz+0x48>
 8000aec:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000af0:	bf08      	it	eq
 8000af2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000af6:	4770      	bx	lr
 8000af8:	f04f 0000 	mov.w	r0, #0
 8000afc:	4770      	bx	lr
 8000afe:	bf00      	nop

08000b00 <__aeabi_d2uiz>:
 8000b00:	004a      	lsls	r2, r1, #1
 8000b02:	d211      	bcs.n	8000b28 <__aeabi_d2uiz+0x28>
 8000b04:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b08:	d211      	bcs.n	8000b2e <__aeabi_d2uiz+0x2e>
 8000b0a:	d50d      	bpl.n	8000b28 <__aeabi_d2uiz+0x28>
 8000b0c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b10:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b14:	d40e      	bmi.n	8000b34 <__aeabi_d2uiz+0x34>
 8000b16:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b1a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b1e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b22:	fa23 f002 	lsr.w	r0, r3, r2
 8000b26:	4770      	bx	lr
 8000b28:	f04f 0000 	mov.w	r0, #0
 8000b2c:	4770      	bx	lr
 8000b2e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b32:	d102      	bne.n	8000b3a <__aeabi_d2uiz+0x3a>
 8000b34:	f04f 30ff 	mov.w	r0, #4294967295
 8000b38:	4770      	bx	lr
 8000b3a:	f04f 0000 	mov.w	r0, #0
 8000b3e:	4770      	bx	lr

08000b40 <__aeabi_d2f>:
 8000b40:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b44:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b48:	bf24      	itt	cs
 8000b4a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b4e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b52:	d90d      	bls.n	8000b70 <__aeabi_d2f+0x30>
 8000b54:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b58:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b5c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b60:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b64:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b68:	bf08      	it	eq
 8000b6a:	f020 0001 	biceq.w	r0, r0, #1
 8000b6e:	4770      	bx	lr
 8000b70:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b74:	d121      	bne.n	8000bba <__aeabi_d2f+0x7a>
 8000b76:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b7a:	bfbc      	itt	lt
 8000b7c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b80:	4770      	bxlt	lr
 8000b82:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b86:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b8a:	f1c2 0218 	rsb	r2, r2, #24
 8000b8e:	f1c2 0c20 	rsb	ip, r2, #32
 8000b92:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b96:	fa20 f002 	lsr.w	r0, r0, r2
 8000b9a:	bf18      	it	ne
 8000b9c:	f040 0001 	orrne.w	r0, r0, #1
 8000ba0:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba4:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ba8:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bac:	ea40 000c 	orr.w	r0, r0, ip
 8000bb0:	fa23 f302 	lsr.w	r3, r3, r2
 8000bb4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bb8:	e7cc      	b.n	8000b54 <__aeabi_d2f+0x14>
 8000bba:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bbe:	d107      	bne.n	8000bd0 <__aeabi_d2f+0x90>
 8000bc0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bc4:	bf1e      	ittt	ne
 8000bc6:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000bca:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000bce:	4770      	bxne	lr
 8000bd0:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000bd4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bd8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bdc:	4770      	bx	lr
 8000bde:	bf00      	nop

08000be0 <__aeabi_frsub>:
 8000be0:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000be4:	e002      	b.n	8000bec <__addsf3>
 8000be6:	bf00      	nop

08000be8 <__aeabi_fsub>:
 8000be8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000bec <__addsf3>:
 8000bec:	0042      	lsls	r2, r0, #1
 8000bee:	bf1f      	itttt	ne
 8000bf0:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000bf4:	ea92 0f03 	teqne	r2, r3
 8000bf8:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000bfc:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c00:	d06a      	beq.n	8000cd8 <__addsf3+0xec>
 8000c02:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000c06:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000c0a:	bfc1      	itttt	gt
 8000c0c:	18d2      	addgt	r2, r2, r3
 8000c0e:	4041      	eorgt	r1, r0
 8000c10:	4048      	eorgt	r0, r1
 8000c12:	4041      	eorgt	r1, r0
 8000c14:	bfb8      	it	lt
 8000c16:	425b      	neglt	r3, r3
 8000c18:	2b19      	cmp	r3, #25
 8000c1a:	bf88      	it	hi
 8000c1c:	4770      	bxhi	lr
 8000c1e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000c22:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c26:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000c2a:	bf18      	it	ne
 8000c2c:	4240      	negne	r0, r0
 8000c2e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000c32:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000c36:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000c3a:	bf18      	it	ne
 8000c3c:	4249      	negne	r1, r1
 8000c3e:	ea92 0f03 	teq	r2, r3
 8000c42:	d03f      	beq.n	8000cc4 <__addsf3+0xd8>
 8000c44:	f1a2 0201 	sub.w	r2, r2, #1
 8000c48:	fa41 fc03 	asr.w	ip, r1, r3
 8000c4c:	eb10 000c 	adds.w	r0, r0, ip
 8000c50:	f1c3 0320 	rsb	r3, r3, #32
 8000c54:	fa01 f103 	lsl.w	r1, r1, r3
 8000c58:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c5c:	d502      	bpl.n	8000c64 <__addsf3+0x78>
 8000c5e:	4249      	negs	r1, r1
 8000c60:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c64:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000c68:	d313      	bcc.n	8000c92 <__addsf3+0xa6>
 8000c6a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000c6e:	d306      	bcc.n	8000c7e <__addsf3+0x92>
 8000c70:	0840      	lsrs	r0, r0, #1
 8000c72:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c76:	f102 0201 	add.w	r2, r2, #1
 8000c7a:	2afe      	cmp	r2, #254	; 0xfe
 8000c7c:	d251      	bcs.n	8000d22 <__addsf3+0x136>
 8000c7e:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c82:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c86:	bf08      	it	eq
 8000c88:	f020 0001 	biceq.w	r0, r0, #1
 8000c8c:	ea40 0003 	orr.w	r0, r0, r3
 8000c90:	4770      	bx	lr
 8000c92:	0049      	lsls	r1, r1, #1
 8000c94:	eb40 0000 	adc.w	r0, r0, r0
 8000c98:	3a01      	subs	r2, #1
 8000c9a:	bf28      	it	cs
 8000c9c:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000ca0:	d2ed      	bcs.n	8000c7e <__addsf3+0x92>
 8000ca2:	fab0 fc80 	clz	ip, r0
 8000ca6:	f1ac 0c08 	sub.w	ip, ip, #8
 8000caa:	ebb2 020c 	subs.w	r2, r2, ip
 8000cae:	fa00 f00c 	lsl.w	r0, r0, ip
 8000cb2:	bfaa      	itet	ge
 8000cb4:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000cb8:	4252      	neglt	r2, r2
 8000cba:	4318      	orrge	r0, r3
 8000cbc:	bfbc      	itt	lt
 8000cbe:	40d0      	lsrlt	r0, r2
 8000cc0:	4318      	orrlt	r0, r3
 8000cc2:	4770      	bx	lr
 8000cc4:	f092 0f00 	teq	r2, #0
 8000cc8:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000ccc:	bf06      	itte	eq
 8000cce:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000cd2:	3201      	addeq	r2, #1
 8000cd4:	3b01      	subne	r3, #1
 8000cd6:	e7b5      	b.n	8000c44 <__addsf3+0x58>
 8000cd8:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000cdc:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000ce0:	bf18      	it	ne
 8000ce2:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ce6:	d021      	beq.n	8000d2c <__addsf3+0x140>
 8000ce8:	ea92 0f03 	teq	r2, r3
 8000cec:	d004      	beq.n	8000cf8 <__addsf3+0x10c>
 8000cee:	f092 0f00 	teq	r2, #0
 8000cf2:	bf08      	it	eq
 8000cf4:	4608      	moveq	r0, r1
 8000cf6:	4770      	bx	lr
 8000cf8:	ea90 0f01 	teq	r0, r1
 8000cfc:	bf1c      	itt	ne
 8000cfe:	2000      	movne	r0, #0
 8000d00:	4770      	bxne	lr
 8000d02:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000d06:	d104      	bne.n	8000d12 <__addsf3+0x126>
 8000d08:	0040      	lsls	r0, r0, #1
 8000d0a:	bf28      	it	cs
 8000d0c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000d10:	4770      	bx	lr
 8000d12:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000d16:	bf3c      	itt	cc
 8000d18:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000d1c:	4770      	bxcc	lr
 8000d1e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000d22:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000d26:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d2a:	4770      	bx	lr
 8000d2c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000d30:	bf16      	itet	ne
 8000d32:	4608      	movne	r0, r1
 8000d34:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000d38:	4601      	movne	r1, r0
 8000d3a:	0242      	lsls	r2, r0, #9
 8000d3c:	bf06      	itte	eq
 8000d3e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000d42:	ea90 0f01 	teqeq	r0, r1
 8000d46:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000d4a:	4770      	bx	lr

08000d4c <__aeabi_ui2f>:
 8000d4c:	f04f 0300 	mov.w	r3, #0
 8000d50:	e004      	b.n	8000d5c <__aeabi_i2f+0x8>
 8000d52:	bf00      	nop

08000d54 <__aeabi_i2f>:
 8000d54:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000d58:	bf48      	it	mi
 8000d5a:	4240      	negmi	r0, r0
 8000d5c:	ea5f 0c00 	movs.w	ip, r0
 8000d60:	bf08      	it	eq
 8000d62:	4770      	bxeq	lr
 8000d64:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000d68:	4601      	mov	r1, r0
 8000d6a:	f04f 0000 	mov.w	r0, #0
 8000d6e:	e01c      	b.n	8000daa <__aeabi_l2f+0x2a>

08000d70 <__aeabi_ul2f>:
 8000d70:	ea50 0201 	orrs.w	r2, r0, r1
 8000d74:	bf08      	it	eq
 8000d76:	4770      	bxeq	lr
 8000d78:	f04f 0300 	mov.w	r3, #0
 8000d7c:	e00a      	b.n	8000d94 <__aeabi_l2f+0x14>
 8000d7e:	bf00      	nop

08000d80 <__aeabi_l2f>:
 8000d80:	ea50 0201 	orrs.w	r2, r0, r1
 8000d84:	bf08      	it	eq
 8000d86:	4770      	bxeq	lr
 8000d88:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d8c:	d502      	bpl.n	8000d94 <__aeabi_l2f+0x14>
 8000d8e:	4240      	negs	r0, r0
 8000d90:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d94:	ea5f 0c01 	movs.w	ip, r1
 8000d98:	bf02      	ittt	eq
 8000d9a:	4684      	moveq	ip, r0
 8000d9c:	4601      	moveq	r1, r0
 8000d9e:	2000      	moveq	r0, #0
 8000da0:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000da4:	bf08      	it	eq
 8000da6:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000daa:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000dae:	fabc f28c 	clz	r2, ip
 8000db2:	3a08      	subs	r2, #8
 8000db4:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000db8:	db10      	blt.n	8000ddc <__aeabi_l2f+0x5c>
 8000dba:	fa01 fc02 	lsl.w	ip, r1, r2
 8000dbe:	4463      	add	r3, ip
 8000dc0:	fa00 fc02 	lsl.w	ip, r0, r2
 8000dc4:	f1c2 0220 	rsb	r2, r2, #32
 8000dc8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000dcc:	fa20 f202 	lsr.w	r2, r0, r2
 8000dd0:	eb43 0002 	adc.w	r0, r3, r2
 8000dd4:	bf08      	it	eq
 8000dd6:	f020 0001 	biceq.w	r0, r0, #1
 8000dda:	4770      	bx	lr
 8000ddc:	f102 0220 	add.w	r2, r2, #32
 8000de0:	fa01 fc02 	lsl.w	ip, r1, r2
 8000de4:	f1c2 0220 	rsb	r2, r2, #32
 8000de8:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000dec:	fa21 f202 	lsr.w	r2, r1, r2
 8000df0:	eb43 0002 	adc.w	r0, r3, r2
 8000df4:	bf08      	it	eq
 8000df6:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000dfa:	4770      	bx	lr

08000dfc <__aeabi_fmul>:
 8000dfc:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e00:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e04:	bf1e      	ittt	ne
 8000e06:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e0a:	ea92 0f0c 	teqne	r2, ip
 8000e0e:	ea93 0f0c 	teqne	r3, ip
 8000e12:	d06f      	beq.n	8000ef4 <__aeabi_fmul+0xf8>
 8000e14:	441a      	add	r2, r3
 8000e16:	ea80 0c01 	eor.w	ip, r0, r1
 8000e1a:	0240      	lsls	r0, r0, #9
 8000e1c:	bf18      	it	ne
 8000e1e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000e22:	d01e      	beq.n	8000e62 <__aeabi_fmul+0x66>
 8000e24:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000e28:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000e2c:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000e30:	fba0 3101 	umull	r3, r1, r0, r1
 8000e34:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e38:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000e3c:	bf3e      	ittt	cc
 8000e3e:	0049      	lslcc	r1, r1, #1
 8000e40:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000e44:	005b      	lslcc	r3, r3, #1
 8000e46:	ea40 0001 	orr.w	r0, r0, r1
 8000e4a:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000e4e:	2afd      	cmp	r2, #253	; 0xfd
 8000e50:	d81d      	bhi.n	8000e8e <__aeabi_fmul+0x92>
 8000e52:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000e56:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e5a:	bf08      	it	eq
 8000e5c:	f020 0001 	biceq.w	r0, r0, #1
 8000e60:	4770      	bx	lr
 8000e62:	f090 0f00 	teq	r0, #0
 8000e66:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000e6a:	bf08      	it	eq
 8000e6c:	0249      	lsleq	r1, r1, #9
 8000e6e:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000e72:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000e76:	3a7f      	subs	r2, #127	; 0x7f
 8000e78:	bfc2      	ittt	gt
 8000e7a:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e7e:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e82:	4770      	bxgt	lr
 8000e84:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e88:	f04f 0300 	mov.w	r3, #0
 8000e8c:	3a01      	subs	r2, #1
 8000e8e:	dc5d      	bgt.n	8000f4c <__aeabi_fmul+0x150>
 8000e90:	f112 0f19 	cmn.w	r2, #25
 8000e94:	bfdc      	itt	le
 8000e96:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e9a:	4770      	bxle	lr
 8000e9c:	f1c2 0200 	rsb	r2, r2, #0
 8000ea0:	0041      	lsls	r1, r0, #1
 8000ea2:	fa21 f102 	lsr.w	r1, r1, r2
 8000ea6:	f1c2 0220 	rsb	r2, r2, #32
 8000eaa:	fa00 fc02 	lsl.w	ip, r0, r2
 8000eae:	ea5f 0031 	movs.w	r0, r1, rrx
 8000eb2:	f140 0000 	adc.w	r0, r0, #0
 8000eb6:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000eba:	bf08      	it	eq
 8000ebc:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ec0:	4770      	bx	lr
 8000ec2:	f092 0f00 	teq	r2, #0
 8000ec6:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000eca:	bf02      	ittt	eq
 8000ecc:	0040      	lsleq	r0, r0, #1
 8000ece:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000ed2:	3a01      	subeq	r2, #1
 8000ed4:	d0f9      	beq.n	8000eca <__aeabi_fmul+0xce>
 8000ed6:	ea40 000c 	orr.w	r0, r0, ip
 8000eda:	f093 0f00 	teq	r3, #0
 8000ede:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ee2:	bf02      	ittt	eq
 8000ee4:	0049      	lsleq	r1, r1, #1
 8000ee6:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000eea:	3b01      	subeq	r3, #1
 8000eec:	d0f9      	beq.n	8000ee2 <__aeabi_fmul+0xe6>
 8000eee:	ea41 010c 	orr.w	r1, r1, ip
 8000ef2:	e78f      	b.n	8000e14 <__aeabi_fmul+0x18>
 8000ef4:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000ef8:	ea92 0f0c 	teq	r2, ip
 8000efc:	bf18      	it	ne
 8000efe:	ea93 0f0c 	teqne	r3, ip
 8000f02:	d00a      	beq.n	8000f1a <__aeabi_fmul+0x11e>
 8000f04:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f08:	bf18      	it	ne
 8000f0a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f0e:	d1d8      	bne.n	8000ec2 <__aeabi_fmul+0xc6>
 8000f10:	ea80 0001 	eor.w	r0, r0, r1
 8000f14:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000f18:	4770      	bx	lr
 8000f1a:	f090 0f00 	teq	r0, #0
 8000f1e:	bf17      	itett	ne
 8000f20:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000f24:	4608      	moveq	r0, r1
 8000f26:	f091 0f00 	teqne	r1, #0
 8000f2a:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000f2e:	d014      	beq.n	8000f5a <__aeabi_fmul+0x15e>
 8000f30:	ea92 0f0c 	teq	r2, ip
 8000f34:	d101      	bne.n	8000f3a <__aeabi_fmul+0x13e>
 8000f36:	0242      	lsls	r2, r0, #9
 8000f38:	d10f      	bne.n	8000f5a <__aeabi_fmul+0x15e>
 8000f3a:	ea93 0f0c 	teq	r3, ip
 8000f3e:	d103      	bne.n	8000f48 <__aeabi_fmul+0x14c>
 8000f40:	024b      	lsls	r3, r1, #9
 8000f42:	bf18      	it	ne
 8000f44:	4608      	movne	r0, r1
 8000f46:	d108      	bne.n	8000f5a <__aeabi_fmul+0x15e>
 8000f48:	ea80 0001 	eor.w	r0, r0, r1
 8000f4c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000f50:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000f54:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f58:	4770      	bx	lr
 8000f5a:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000f5e:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000f62:	4770      	bx	lr

08000f64 <__aeabi_fdiv>:
 8000f64:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000f68:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000f6c:	bf1e      	ittt	ne
 8000f6e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000f72:	ea92 0f0c 	teqne	r2, ip
 8000f76:	ea93 0f0c 	teqne	r3, ip
 8000f7a:	d069      	beq.n	8001050 <__aeabi_fdiv+0xec>
 8000f7c:	eba2 0203 	sub.w	r2, r2, r3
 8000f80:	ea80 0c01 	eor.w	ip, r0, r1
 8000f84:	0249      	lsls	r1, r1, #9
 8000f86:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f8a:	d037      	beq.n	8000ffc <__aeabi_fdiv+0x98>
 8000f8c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f90:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f94:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f98:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f9c:	428b      	cmp	r3, r1
 8000f9e:	bf38      	it	cc
 8000fa0:	005b      	lslcc	r3, r3, #1
 8000fa2:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000fa6:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000faa:	428b      	cmp	r3, r1
 8000fac:	bf24      	itt	cs
 8000fae:	1a5b      	subcs	r3, r3, r1
 8000fb0:	ea40 000c 	orrcs.w	r0, r0, ip
 8000fb4:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000fb8:	bf24      	itt	cs
 8000fba:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000fbe:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000fc2:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000fc6:	bf24      	itt	cs
 8000fc8:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000fcc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000fd0:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000fd4:	bf24      	itt	cs
 8000fd6:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000fda:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000fde:	011b      	lsls	r3, r3, #4
 8000fe0:	bf18      	it	ne
 8000fe2:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000fe6:	d1e0      	bne.n	8000faa <__aeabi_fdiv+0x46>
 8000fe8:	2afd      	cmp	r2, #253	; 0xfd
 8000fea:	f63f af50 	bhi.w	8000e8e <__aeabi_fmul+0x92>
 8000fee:	428b      	cmp	r3, r1
 8000ff0:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000ff4:	bf08      	it	eq
 8000ff6:	f020 0001 	biceq.w	r0, r0, #1
 8000ffa:	4770      	bx	lr
 8000ffc:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8001000:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8001004:	327f      	adds	r2, #127	; 0x7f
 8001006:	bfc2      	ittt	gt
 8001008:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 800100c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8001010:	4770      	bxgt	lr
 8001012:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8001016:	f04f 0300 	mov.w	r3, #0
 800101a:	3a01      	subs	r2, #1
 800101c:	e737      	b.n	8000e8e <__aeabi_fmul+0x92>
 800101e:	f092 0f00 	teq	r2, #0
 8001022:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8001026:	bf02      	ittt	eq
 8001028:	0040      	lsleq	r0, r0, #1
 800102a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800102e:	3a01      	subeq	r2, #1
 8001030:	d0f9      	beq.n	8001026 <__aeabi_fdiv+0xc2>
 8001032:	ea40 000c 	orr.w	r0, r0, ip
 8001036:	f093 0f00 	teq	r3, #0
 800103a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800103e:	bf02      	ittt	eq
 8001040:	0049      	lsleq	r1, r1, #1
 8001042:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8001046:	3b01      	subeq	r3, #1
 8001048:	d0f9      	beq.n	800103e <__aeabi_fdiv+0xda>
 800104a:	ea41 010c 	orr.w	r1, r1, ip
 800104e:	e795      	b.n	8000f7c <__aeabi_fdiv+0x18>
 8001050:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8001054:	ea92 0f0c 	teq	r2, ip
 8001058:	d108      	bne.n	800106c <__aeabi_fdiv+0x108>
 800105a:	0242      	lsls	r2, r0, #9
 800105c:	f47f af7d 	bne.w	8000f5a <__aeabi_fmul+0x15e>
 8001060:	ea93 0f0c 	teq	r3, ip
 8001064:	f47f af70 	bne.w	8000f48 <__aeabi_fmul+0x14c>
 8001068:	4608      	mov	r0, r1
 800106a:	e776      	b.n	8000f5a <__aeabi_fmul+0x15e>
 800106c:	ea93 0f0c 	teq	r3, ip
 8001070:	d104      	bne.n	800107c <__aeabi_fdiv+0x118>
 8001072:	024b      	lsls	r3, r1, #9
 8001074:	f43f af4c 	beq.w	8000f10 <__aeabi_fmul+0x114>
 8001078:	4608      	mov	r0, r1
 800107a:	e76e      	b.n	8000f5a <__aeabi_fmul+0x15e>
 800107c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8001080:	bf18      	it	ne
 8001082:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8001086:	d1ca      	bne.n	800101e <__aeabi_fdiv+0xba>
 8001088:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 800108c:	f47f af5c 	bne.w	8000f48 <__aeabi_fmul+0x14c>
 8001090:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8001094:	f47f af3c 	bne.w	8000f10 <__aeabi_fmul+0x114>
 8001098:	e75f      	b.n	8000f5a <__aeabi_fmul+0x15e>
 800109a:	bf00      	nop

0800109c <__gesf2>:
 800109c:	f04f 3cff 	mov.w	ip, #4294967295
 80010a0:	e006      	b.n	80010b0 <__cmpsf2+0x4>
 80010a2:	bf00      	nop

080010a4 <__lesf2>:
 80010a4:	f04f 0c01 	mov.w	ip, #1
 80010a8:	e002      	b.n	80010b0 <__cmpsf2+0x4>
 80010aa:	bf00      	nop

080010ac <__cmpsf2>:
 80010ac:	f04f 0c01 	mov.w	ip, #1
 80010b0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80010b4:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80010b8:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80010bc:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80010c0:	bf18      	it	ne
 80010c2:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80010c6:	d011      	beq.n	80010ec <__cmpsf2+0x40>
 80010c8:	b001      	add	sp, #4
 80010ca:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 80010ce:	bf18      	it	ne
 80010d0:	ea90 0f01 	teqne	r0, r1
 80010d4:	bf58      	it	pl
 80010d6:	ebb2 0003 	subspl.w	r0, r2, r3
 80010da:	bf88      	it	hi
 80010dc:	17c8      	asrhi	r0, r1, #31
 80010de:	bf38      	it	cc
 80010e0:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 80010e4:	bf18      	it	ne
 80010e6:	f040 0001 	orrne.w	r0, r0, #1
 80010ea:	4770      	bx	lr
 80010ec:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80010f0:	d102      	bne.n	80010f8 <__cmpsf2+0x4c>
 80010f2:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 80010f6:	d105      	bne.n	8001104 <__cmpsf2+0x58>
 80010f8:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 80010fc:	d1e4      	bne.n	80010c8 <__cmpsf2+0x1c>
 80010fe:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8001102:	d0e1      	beq.n	80010c8 <__cmpsf2+0x1c>
 8001104:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001108:	4770      	bx	lr
 800110a:	bf00      	nop

0800110c <__aeabi_cfrcmple>:
 800110c:	4684      	mov	ip, r0
 800110e:	4608      	mov	r0, r1
 8001110:	4661      	mov	r1, ip
 8001112:	e7ff      	b.n	8001114 <__aeabi_cfcmpeq>

08001114 <__aeabi_cfcmpeq>:
 8001114:	b50f      	push	{r0, r1, r2, r3, lr}
 8001116:	f7ff ffc9 	bl	80010ac <__cmpsf2>
 800111a:	2800      	cmp	r0, #0
 800111c:	bf48      	it	mi
 800111e:	f110 0f00 	cmnmi.w	r0, #0
 8001122:	bd0f      	pop	{r0, r1, r2, r3, pc}

08001124 <__aeabi_fcmpeq>:
 8001124:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001128:	f7ff fff4 	bl	8001114 <__aeabi_cfcmpeq>
 800112c:	bf0c      	ite	eq
 800112e:	2001      	moveq	r0, #1
 8001130:	2000      	movne	r0, #0
 8001132:	f85d fb08 	ldr.w	pc, [sp], #8
 8001136:	bf00      	nop

08001138 <__aeabi_fcmplt>:
 8001138:	f84d ed08 	str.w	lr, [sp, #-8]!
 800113c:	f7ff ffea 	bl	8001114 <__aeabi_cfcmpeq>
 8001140:	bf34      	ite	cc
 8001142:	2001      	movcc	r0, #1
 8001144:	2000      	movcs	r0, #0
 8001146:	f85d fb08 	ldr.w	pc, [sp], #8
 800114a:	bf00      	nop

0800114c <__aeabi_fcmple>:
 800114c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001150:	f7ff ffe0 	bl	8001114 <__aeabi_cfcmpeq>
 8001154:	bf94      	ite	ls
 8001156:	2001      	movls	r0, #1
 8001158:	2000      	movhi	r0, #0
 800115a:	f85d fb08 	ldr.w	pc, [sp], #8
 800115e:	bf00      	nop

08001160 <__aeabi_fcmpge>:
 8001160:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001164:	f7ff ffd2 	bl	800110c <__aeabi_cfrcmple>
 8001168:	bf94      	ite	ls
 800116a:	2001      	movls	r0, #1
 800116c:	2000      	movhi	r0, #0
 800116e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001172:	bf00      	nop

08001174 <__aeabi_fcmpgt>:
 8001174:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001178:	f7ff ffc8 	bl	800110c <__aeabi_cfrcmple>
 800117c:	bf34      	ite	cc
 800117e:	2001      	movcc	r0, #1
 8001180:	2000      	movcs	r0, #0
 8001182:	f85d fb08 	ldr.w	pc, [sp], #8
 8001186:	bf00      	nop

08001188 <__aeabi_fcmpun>:
 8001188:	ea4f 0240 	mov.w	r2, r0, lsl #1
 800118c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001190:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001194:	d102      	bne.n	800119c <__aeabi_fcmpun+0x14>
 8001196:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800119a:	d108      	bne.n	80011ae <__aeabi_fcmpun+0x26>
 800119c:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 80011a0:	d102      	bne.n	80011a8 <__aeabi_fcmpun+0x20>
 80011a2:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 80011a6:	d102      	bne.n	80011ae <__aeabi_fcmpun+0x26>
 80011a8:	f04f 0000 	mov.w	r0, #0
 80011ac:	4770      	bx	lr
 80011ae:	f04f 0001 	mov.w	r0, #1
 80011b2:	4770      	bx	lr

080011b4 <__aeabi_f2iz>:
 80011b4:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80011b8:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80011bc:	d30f      	bcc.n	80011de <__aeabi_f2iz+0x2a>
 80011be:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80011c2:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80011c6:	d90d      	bls.n	80011e4 <__aeabi_f2iz+0x30>
 80011c8:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80011cc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80011d0:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80011d4:	fa23 f002 	lsr.w	r0, r3, r2
 80011d8:	bf18      	it	ne
 80011da:	4240      	negne	r0, r0
 80011dc:	4770      	bx	lr
 80011de:	f04f 0000 	mov.w	r0, #0
 80011e2:	4770      	bx	lr
 80011e4:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80011e8:	d101      	bne.n	80011ee <__aeabi_f2iz+0x3a>
 80011ea:	0242      	lsls	r2, r0, #9
 80011ec:	d105      	bne.n	80011fa <__aeabi_f2iz+0x46>
 80011ee:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 80011f2:	bf08      	it	eq
 80011f4:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80011f8:	4770      	bx	lr
 80011fa:	f04f 0000 	mov.w	r0, #0
 80011fe:	4770      	bx	lr

08001200 <__aeabi_f2uiz>:
 8001200:	0042      	lsls	r2, r0, #1
 8001202:	d20e      	bcs.n	8001222 <__aeabi_f2uiz+0x22>
 8001204:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001208:	d30b      	bcc.n	8001222 <__aeabi_f2uiz+0x22>
 800120a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800120e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001212:	d409      	bmi.n	8001228 <__aeabi_f2uiz+0x28>
 8001214:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001218:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800121c:	fa23 f002 	lsr.w	r0, r3, r2
 8001220:	4770      	bx	lr
 8001222:	f04f 0000 	mov.w	r0, #0
 8001226:	4770      	bx	lr
 8001228:	f112 0f61 	cmn.w	r2, #97	; 0x61
 800122c:	d101      	bne.n	8001232 <__aeabi_f2uiz+0x32>
 800122e:	0242      	lsls	r2, r0, #9
 8001230:	d102      	bne.n	8001238 <__aeabi_f2uiz+0x38>
 8001232:	f04f 30ff 	mov.w	r0, #4294967295
 8001236:	4770      	bx	lr
 8001238:	f04f 0000 	mov.w	r0, #0
 800123c:	4770      	bx	lr
 800123e:	bf00      	nop

08001240 <__aeabi_uldivmod>:
 8001240:	b953      	cbnz	r3, 8001258 <__aeabi_uldivmod+0x18>
 8001242:	b94a      	cbnz	r2, 8001258 <__aeabi_uldivmod+0x18>
 8001244:	2900      	cmp	r1, #0
 8001246:	bf08      	it	eq
 8001248:	2800      	cmpeq	r0, #0
 800124a:	bf1c      	itt	ne
 800124c:	f04f 31ff 	movne.w	r1, #4294967295
 8001250:	f04f 30ff 	movne.w	r0, #4294967295
 8001254:	f000 b96e 	b.w	8001534 <__aeabi_idiv0>
 8001258:	f1ad 0c08 	sub.w	ip, sp, #8
 800125c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8001260:	f000 f806 	bl	8001270 <__udivmoddi4>
 8001264:	f8dd e004 	ldr.w	lr, [sp, #4]
 8001268:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800126c:	b004      	add	sp, #16
 800126e:	4770      	bx	lr

08001270 <__udivmoddi4>:
 8001270:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001274:	9e08      	ldr	r6, [sp, #32]
 8001276:	460d      	mov	r5, r1
 8001278:	4604      	mov	r4, r0
 800127a:	468e      	mov	lr, r1
 800127c:	2b00      	cmp	r3, #0
 800127e:	f040 8083 	bne.w	8001388 <__udivmoddi4+0x118>
 8001282:	428a      	cmp	r2, r1
 8001284:	4617      	mov	r7, r2
 8001286:	d947      	bls.n	8001318 <__udivmoddi4+0xa8>
 8001288:	fab2 f382 	clz	r3, r2
 800128c:	b14b      	cbz	r3, 80012a2 <__udivmoddi4+0x32>
 800128e:	f1c3 0120 	rsb	r1, r3, #32
 8001292:	fa05 fe03 	lsl.w	lr, r5, r3
 8001296:	fa20 f101 	lsr.w	r1, r0, r1
 800129a:	409f      	lsls	r7, r3
 800129c:	ea41 0e0e 	orr.w	lr, r1, lr
 80012a0:	409c      	lsls	r4, r3
 80012a2:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80012a6:	fbbe fcf8 	udiv	ip, lr, r8
 80012aa:	fa1f f987 	uxth.w	r9, r7
 80012ae:	fb08 e21c 	mls	r2, r8, ip, lr
 80012b2:	fb0c f009 	mul.w	r0, ip, r9
 80012b6:	0c21      	lsrs	r1, r4, #16
 80012b8:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
 80012bc:	4290      	cmp	r0, r2
 80012be:	d90a      	bls.n	80012d6 <__udivmoddi4+0x66>
 80012c0:	18ba      	adds	r2, r7, r2
 80012c2:	f10c 31ff 	add.w	r1, ip, #4294967295
 80012c6:	f080 8118 	bcs.w	80014fa <__udivmoddi4+0x28a>
 80012ca:	4290      	cmp	r0, r2
 80012cc:	f240 8115 	bls.w	80014fa <__udivmoddi4+0x28a>
 80012d0:	f1ac 0c02 	sub.w	ip, ip, #2
 80012d4:	443a      	add	r2, r7
 80012d6:	1a12      	subs	r2, r2, r0
 80012d8:	fbb2 f0f8 	udiv	r0, r2, r8
 80012dc:	fb08 2210 	mls	r2, r8, r0, r2
 80012e0:	fb00 f109 	mul.w	r1, r0, r9
 80012e4:	b2a4      	uxth	r4, r4
 80012e6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80012ea:	42a1      	cmp	r1, r4
 80012ec:	d909      	bls.n	8001302 <__udivmoddi4+0x92>
 80012ee:	193c      	adds	r4, r7, r4
 80012f0:	f100 32ff 	add.w	r2, r0, #4294967295
 80012f4:	f080 8103 	bcs.w	80014fe <__udivmoddi4+0x28e>
 80012f8:	42a1      	cmp	r1, r4
 80012fa:	f240 8100 	bls.w	80014fe <__udivmoddi4+0x28e>
 80012fe:	3802      	subs	r0, #2
 8001300:	443c      	add	r4, r7
 8001302:	1a64      	subs	r4, r4, r1
 8001304:	2100      	movs	r1, #0
 8001306:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800130a:	b11e      	cbz	r6, 8001314 <__udivmoddi4+0xa4>
 800130c:	2200      	movs	r2, #0
 800130e:	40dc      	lsrs	r4, r3
 8001310:	e9c6 4200 	strd	r4, r2, [r6]
 8001314:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001318:	b902      	cbnz	r2, 800131c <__udivmoddi4+0xac>
 800131a:	deff      	udf	#255	; 0xff
 800131c:	fab2 f382 	clz	r3, r2
 8001320:	2b00      	cmp	r3, #0
 8001322:	d14f      	bne.n	80013c4 <__udivmoddi4+0x154>
 8001324:	1a8d      	subs	r5, r1, r2
 8001326:	2101      	movs	r1, #1
 8001328:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800132c:	fa1f f882 	uxth.w	r8, r2
 8001330:	fbb5 fcfe 	udiv	ip, r5, lr
 8001334:	fb0e 551c 	mls	r5, lr, ip, r5
 8001338:	fb08 f00c 	mul.w	r0, r8, ip
 800133c:	0c22      	lsrs	r2, r4, #16
 800133e:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
 8001342:	42a8      	cmp	r0, r5
 8001344:	d907      	bls.n	8001356 <__udivmoddi4+0xe6>
 8001346:	197d      	adds	r5, r7, r5
 8001348:	f10c 32ff 	add.w	r2, ip, #4294967295
 800134c:	d202      	bcs.n	8001354 <__udivmoddi4+0xe4>
 800134e:	42a8      	cmp	r0, r5
 8001350:	f200 80e9 	bhi.w	8001526 <__udivmoddi4+0x2b6>
 8001354:	4694      	mov	ip, r2
 8001356:	1a2d      	subs	r5, r5, r0
 8001358:	fbb5 f0fe 	udiv	r0, r5, lr
 800135c:	fb0e 5510 	mls	r5, lr, r0, r5
 8001360:	fb08 f800 	mul.w	r8, r8, r0
 8001364:	b2a4      	uxth	r4, r4
 8001366:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800136a:	45a0      	cmp	r8, r4
 800136c:	d907      	bls.n	800137e <__udivmoddi4+0x10e>
 800136e:	193c      	adds	r4, r7, r4
 8001370:	f100 32ff 	add.w	r2, r0, #4294967295
 8001374:	d202      	bcs.n	800137c <__udivmoddi4+0x10c>
 8001376:	45a0      	cmp	r8, r4
 8001378:	f200 80d9 	bhi.w	800152e <__udivmoddi4+0x2be>
 800137c:	4610      	mov	r0, r2
 800137e:	eba4 0408 	sub.w	r4, r4, r8
 8001382:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8001386:	e7c0      	b.n	800130a <__udivmoddi4+0x9a>
 8001388:	428b      	cmp	r3, r1
 800138a:	d908      	bls.n	800139e <__udivmoddi4+0x12e>
 800138c:	2e00      	cmp	r6, #0
 800138e:	f000 80b1 	beq.w	80014f4 <__udivmoddi4+0x284>
 8001392:	2100      	movs	r1, #0
 8001394:	e9c6 0500 	strd	r0, r5, [r6]
 8001398:	4608      	mov	r0, r1
 800139a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800139e:	fab3 f183 	clz	r1, r3
 80013a2:	2900      	cmp	r1, #0
 80013a4:	d14b      	bne.n	800143e <__udivmoddi4+0x1ce>
 80013a6:	42ab      	cmp	r3, r5
 80013a8:	d302      	bcc.n	80013b0 <__udivmoddi4+0x140>
 80013aa:	4282      	cmp	r2, r0
 80013ac:	f200 80b9 	bhi.w	8001522 <__udivmoddi4+0x2b2>
 80013b0:	1a84      	subs	r4, r0, r2
 80013b2:	eb65 0303 	sbc.w	r3, r5, r3
 80013b6:	2001      	movs	r0, #1
 80013b8:	469e      	mov	lr, r3
 80013ba:	2e00      	cmp	r6, #0
 80013bc:	d0aa      	beq.n	8001314 <__udivmoddi4+0xa4>
 80013be:	e9c6 4e00 	strd	r4, lr, [r6]
 80013c2:	e7a7      	b.n	8001314 <__udivmoddi4+0xa4>
 80013c4:	409f      	lsls	r7, r3
 80013c6:	f1c3 0220 	rsb	r2, r3, #32
 80013ca:	40d1      	lsrs	r1, r2
 80013cc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80013d0:	fbb1 f0fe 	udiv	r0, r1, lr
 80013d4:	fa1f f887 	uxth.w	r8, r7
 80013d8:	fb0e 1110 	mls	r1, lr, r0, r1
 80013dc:	fa24 f202 	lsr.w	r2, r4, r2
 80013e0:	409d      	lsls	r5, r3
 80013e2:	fb00 fc08 	mul.w	ip, r0, r8
 80013e6:	432a      	orrs	r2, r5
 80013e8:	0c15      	lsrs	r5, r2, #16
 80013ea:	ea45 4501 	orr.w	r5, r5, r1, lsl #16
 80013ee:	45ac      	cmp	ip, r5
 80013f0:	fa04 f403 	lsl.w	r4, r4, r3
 80013f4:	d909      	bls.n	800140a <__udivmoddi4+0x19a>
 80013f6:	197d      	adds	r5, r7, r5
 80013f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80013fc:	f080 808f 	bcs.w	800151e <__udivmoddi4+0x2ae>
 8001400:	45ac      	cmp	ip, r5
 8001402:	f240 808c 	bls.w	800151e <__udivmoddi4+0x2ae>
 8001406:	3802      	subs	r0, #2
 8001408:	443d      	add	r5, r7
 800140a:	eba5 050c 	sub.w	r5, r5, ip
 800140e:	fbb5 f1fe 	udiv	r1, r5, lr
 8001412:	fb0e 5c11 	mls	ip, lr, r1, r5
 8001416:	fb01 f908 	mul.w	r9, r1, r8
 800141a:	b295      	uxth	r5, r2
 800141c:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8001420:	45a9      	cmp	r9, r5
 8001422:	d907      	bls.n	8001434 <__udivmoddi4+0x1c4>
 8001424:	197d      	adds	r5, r7, r5
 8001426:	f101 32ff 	add.w	r2, r1, #4294967295
 800142a:	d274      	bcs.n	8001516 <__udivmoddi4+0x2a6>
 800142c:	45a9      	cmp	r9, r5
 800142e:	d972      	bls.n	8001516 <__udivmoddi4+0x2a6>
 8001430:	3902      	subs	r1, #2
 8001432:	443d      	add	r5, r7
 8001434:	eba5 0509 	sub.w	r5, r5, r9
 8001438:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800143c:	e778      	b.n	8001330 <__udivmoddi4+0xc0>
 800143e:	f1c1 0720 	rsb	r7, r1, #32
 8001442:	408b      	lsls	r3, r1
 8001444:	fa22 fc07 	lsr.w	ip, r2, r7
 8001448:	ea4c 0c03 	orr.w	ip, ip, r3
 800144c:	fa25 f407 	lsr.w	r4, r5, r7
 8001450:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8001454:	fbb4 f9fe 	udiv	r9, r4, lr
 8001458:	fa1f f88c 	uxth.w	r8, ip
 800145c:	fb0e 4419 	mls	r4, lr, r9, r4
 8001460:	fa20 f307 	lsr.w	r3, r0, r7
 8001464:	fb09 fa08 	mul.w	sl, r9, r8
 8001468:	408d      	lsls	r5, r1
 800146a:	431d      	orrs	r5, r3
 800146c:	0c2b      	lsrs	r3, r5, #16
 800146e:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8001472:	45a2      	cmp	sl, r4
 8001474:	fa02 f201 	lsl.w	r2, r2, r1
 8001478:	fa00 f301 	lsl.w	r3, r0, r1
 800147c:	d909      	bls.n	8001492 <__udivmoddi4+0x222>
 800147e:	eb1c 0404 	adds.w	r4, ip, r4
 8001482:	f109 30ff 	add.w	r0, r9, #4294967295
 8001486:	d248      	bcs.n	800151a <__udivmoddi4+0x2aa>
 8001488:	45a2      	cmp	sl, r4
 800148a:	d946      	bls.n	800151a <__udivmoddi4+0x2aa>
 800148c:	f1a9 0902 	sub.w	r9, r9, #2
 8001490:	4464      	add	r4, ip
 8001492:	eba4 040a 	sub.w	r4, r4, sl
 8001496:	fbb4 f0fe 	udiv	r0, r4, lr
 800149a:	fb0e 4410 	mls	r4, lr, r0, r4
 800149e:	fb00 fa08 	mul.w	sl, r0, r8
 80014a2:	b2ad      	uxth	r5, r5
 80014a4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80014a8:	45a2      	cmp	sl, r4
 80014aa:	d908      	bls.n	80014be <__udivmoddi4+0x24e>
 80014ac:	eb1c 0404 	adds.w	r4, ip, r4
 80014b0:	f100 35ff 	add.w	r5, r0, #4294967295
 80014b4:	d22d      	bcs.n	8001512 <__udivmoddi4+0x2a2>
 80014b6:	45a2      	cmp	sl, r4
 80014b8:	d92b      	bls.n	8001512 <__udivmoddi4+0x2a2>
 80014ba:	3802      	subs	r0, #2
 80014bc:	4464      	add	r4, ip
 80014be:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80014c2:	fba0 8902 	umull	r8, r9, r0, r2
 80014c6:	eba4 040a 	sub.w	r4, r4, sl
 80014ca:	454c      	cmp	r4, r9
 80014cc:	46c6      	mov	lr, r8
 80014ce:	464d      	mov	r5, r9
 80014d0:	d319      	bcc.n	8001506 <__udivmoddi4+0x296>
 80014d2:	d016      	beq.n	8001502 <__udivmoddi4+0x292>
 80014d4:	b15e      	cbz	r6, 80014ee <__udivmoddi4+0x27e>
 80014d6:	ebb3 020e 	subs.w	r2, r3, lr
 80014da:	eb64 0405 	sbc.w	r4, r4, r5
 80014de:	fa04 f707 	lsl.w	r7, r4, r7
 80014e2:	fa22 f301 	lsr.w	r3, r2, r1
 80014e6:	431f      	orrs	r7, r3
 80014e8:	40cc      	lsrs	r4, r1
 80014ea:	e9c6 7400 	strd	r7, r4, [r6]
 80014ee:	2100      	movs	r1, #0
 80014f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80014f4:	4631      	mov	r1, r6
 80014f6:	4630      	mov	r0, r6
 80014f8:	e70c      	b.n	8001314 <__udivmoddi4+0xa4>
 80014fa:	468c      	mov	ip, r1
 80014fc:	e6eb      	b.n	80012d6 <__udivmoddi4+0x66>
 80014fe:	4610      	mov	r0, r2
 8001500:	e6ff      	b.n	8001302 <__udivmoddi4+0x92>
 8001502:	4543      	cmp	r3, r8
 8001504:	d2e6      	bcs.n	80014d4 <__udivmoddi4+0x264>
 8001506:	ebb8 0e02 	subs.w	lr, r8, r2
 800150a:	eb69 050c 	sbc.w	r5, r9, ip
 800150e:	3801      	subs	r0, #1
 8001510:	e7e0      	b.n	80014d4 <__udivmoddi4+0x264>
 8001512:	4628      	mov	r0, r5
 8001514:	e7d3      	b.n	80014be <__udivmoddi4+0x24e>
 8001516:	4611      	mov	r1, r2
 8001518:	e78c      	b.n	8001434 <__udivmoddi4+0x1c4>
 800151a:	4681      	mov	r9, r0
 800151c:	e7b9      	b.n	8001492 <__udivmoddi4+0x222>
 800151e:	4608      	mov	r0, r1
 8001520:	e773      	b.n	800140a <__udivmoddi4+0x19a>
 8001522:	4608      	mov	r0, r1
 8001524:	e749      	b.n	80013ba <__udivmoddi4+0x14a>
 8001526:	f1ac 0c02 	sub.w	ip, ip, #2
 800152a:	443d      	add	r5, r7
 800152c:	e713      	b.n	8001356 <__udivmoddi4+0xe6>
 800152e:	3802      	subs	r0, #2
 8001530:	443c      	add	r4, r7
 8001532:	e724      	b.n	800137e <__udivmoddi4+0x10e>

08001534 <__aeabi_idiv0>:
 8001534:	4770      	bx	lr
 8001536:	bf00      	nop

08001538 <_Z8readBitshhhhPh>:
 * @param bitStart First bit position to read (0-7)
 * @param length Number of bits to read (not more than 8)
 * @param data Container for right-aligned value (i.e. '101' read from any bitStart position will equal 0x05)
 * @return Status of read operation (true = success)
 */
int8_t readBits(uint8_t devAddr, uint8_t regAddr, uint8_t bitStart, uint8_t length, uint8_t *data) {
 8001538:	b590      	push	{r4, r7, lr}
 800153a:	b089      	sub	sp, #36	; 0x24
 800153c:	af04      	add	r7, sp, #16
 800153e:	4604      	mov	r4, r0
 8001540:	4608      	mov	r0, r1
 8001542:	4611      	mov	r1, r2
 8001544:	461a      	mov	r2, r3
 8001546:	4623      	mov	r3, r4
 8001548:	71fb      	strb	r3, [r7, #7]
 800154a:	4603      	mov	r3, r0
 800154c:	71bb      	strb	r3, [r7, #6]
 800154e:	460b      	mov	r3, r1
 8001550:	717b      	strb	r3, [r7, #5]
 8001552:	4613      	mov	r3, r2
 8001554:	713b      	strb	r3, [r7, #4]
  // 01101001 read byte
  // 76543210 bit numbers
  //    xxx   args: bitStart=4, length=3
  //    010   masked
  //   -> 010 shifted
  sendBuf[0] = regAddr;
 8001556:	4a25      	ldr	r2, [pc, #148]	; (80015ec <_Z8readBitshhhhPh+0xb4>)
 8001558:	79bb      	ldrb	r3, [r7, #6]
 800155a:	7013      	strb	r3, [r2, #0]
  uint8_t buffer;
  while(HAL_I2C_Mem_Read(&hi2c1,devAddr,regAddr,I2C_MEMADD_SIZE_8BIT,&buffer,1,I2CDLY) != HAL_OK){
 800155c:	79fb      	ldrb	r3, [r7, #7]
 800155e:	b299      	uxth	r1, r3
 8001560:	79bb      	ldrb	r3, [r7, #6]
 8001562:	b29a      	uxth	r2, r3
 8001564:	2301      	movs	r3, #1
 8001566:	9302      	str	r3, [sp, #8]
 8001568:	2301      	movs	r3, #1
 800156a:	9301      	str	r3, [sp, #4]
 800156c:	f107 030c 	add.w	r3, r7, #12
 8001570:	9300      	str	r3, [sp, #0]
 8001572:	2301      	movs	r3, #1
 8001574:	481e      	ldr	r0, [pc, #120]	; (80015f0 <_Z8readBitshhhhPh+0xb8>)
 8001576:	f004 fbd3 	bl	8005d20 <HAL_I2C_Mem_Read>
 800157a:	4603      	mov	r3, r0
 800157c:	2b00      	cmp	r3, #0
 800157e:	bf14      	ite	ne
 8001580:	2301      	movne	r3, #1
 8001582:	2300      	moveq	r3, #0
 8001584:	b2db      	uxtb	r3, r3
 8001586:	2b00      	cmp	r3, #0
 8001588:	d002      	beq.n	8001590 <_Z8readBitshhhhPh+0x58>
  	  MX_I2C1_Init();
 800158a:	f001 fd2b 	bl	8002fe4 <MX_I2C1_Init>
  while(HAL_I2C_Mem_Read(&hi2c1,devAddr,regAddr,I2C_MEMADD_SIZE_8BIT,&buffer,1,I2CDLY) != HAL_OK){
 800158e:	e7e5      	b.n	800155c <_Z8readBitshhhhPh+0x24>
    }
  uint8_t response = BCM2835_I2C_REASON_OK;
 8001590:	2301      	movs	r3, #1
 8001592:	73fb      	strb	r3, [r7, #15]
  uint8_t b = buffer;
 8001594:	7b3b      	ldrb	r3, [r7, #12]
 8001596:	73bb      	strb	r3, [r7, #14]
  if (response == BCM2835_I2C_REASON_OK) {
 8001598:	7bfb      	ldrb	r3, [r7, #15]
 800159a:	2b01      	cmp	r3, #1
 800159c:	d11a      	bne.n	80015d4 <_Z8readBitshhhhPh+0x9c>
    uint8_t mask = ((1 << length) - 1) << (bitStart - length + 1);
 800159e:	793b      	ldrb	r3, [r7, #4]
 80015a0:	2201      	movs	r2, #1
 80015a2:	fa02 f303 	lsl.w	r3, r2, r3
 80015a6:	1e5a      	subs	r2, r3, #1
 80015a8:	7979      	ldrb	r1, [r7, #5]
 80015aa:	793b      	ldrb	r3, [r7, #4]
 80015ac:	1acb      	subs	r3, r1, r3
 80015ae:	3301      	adds	r3, #1
 80015b0:	fa02 f303 	lsl.w	r3, r2, r3
 80015b4:	737b      	strb	r3, [r7, #13]
    b &= mask;
 80015b6:	7bba      	ldrb	r2, [r7, #14]
 80015b8:	7b7b      	ldrb	r3, [r7, #13]
 80015ba:	4013      	ands	r3, r2
 80015bc:	73bb      	strb	r3, [r7, #14]
    b >>= (bitStart - length + 1);
 80015be:	7bba      	ldrb	r2, [r7, #14]
 80015c0:	7979      	ldrb	r1, [r7, #5]
 80015c2:	793b      	ldrb	r3, [r7, #4]
 80015c4:	1acb      	subs	r3, r1, r3
 80015c6:	3301      	adds	r3, #1
 80015c8:	fa42 f303 	asr.w	r3, r2, r3
 80015cc:	73bb      	strb	r3, [r7, #14]
    *data = b;
 80015ce:	6a3b      	ldr	r3, [r7, #32]
 80015d0:	7bba      	ldrb	r2, [r7, #14]
 80015d2:	701a      	strb	r2, [r3, #0]
  }
  return response == BCM2835_I2C_REASON_OK;
 80015d4:	7bfb      	ldrb	r3, [r7, #15]
 80015d6:	2b01      	cmp	r3, #1
 80015d8:	bf0c      	ite	eq
 80015da:	2301      	moveq	r3, #1
 80015dc:	2300      	movne	r3, #0
 80015de:	b2db      	uxtb	r3, r3
 80015e0:	b25b      	sxtb	r3, r3
}
 80015e2:	4618      	mov	r0, r3
 80015e4:	3714      	adds	r7, #20
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bd90      	pop	{r4, r7, pc}
 80015ea:	bf00      	nop
 80015ec:	20000374 	.word	0x20000374
 80015f0:	200005a0 	.word	0x200005a0

080015f4 <_Z8readBytehhPh>:
 * @param devAddr I2C slave device address
 * @param regAddr Register regAddr to read from
 * @param data Container for byte value read from device
 * @return Status of read operation (true = success)
 */
int8_t readByte(uint8_t devAddr, uint8_t regAddr, uint8_t *data) {
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b088      	sub	sp, #32
 80015f8:	af04      	add	r7, sp, #16
 80015fa:	4603      	mov	r3, r0
 80015fc:	603a      	str	r2, [r7, #0]
 80015fe:	71fb      	strb	r3, [r7, #7]
 8001600:	460b      	mov	r3, r1
 8001602:	71bb      	strb	r3, [r7, #6]
  sendBuf[0] = regAddr;
 8001604:	4a16      	ldr	r2, [pc, #88]	; (8001660 <_Z8readBytehhPh+0x6c>)
 8001606:	79bb      	ldrb	r3, [r7, #6]
 8001608:	7013      	strb	r3, [r2, #0]
  uint8_t buffer;
  while(HAL_I2C_Mem_Read(&hi2c1,devAddr,regAddr,I2C_MEMADD_SIZE_8BIT,&buffer,1,I2CDLY) != HAL_OK){
 800160a:	79fb      	ldrb	r3, [r7, #7]
 800160c:	b299      	uxth	r1, r3
 800160e:	79bb      	ldrb	r3, [r7, #6]
 8001610:	b29a      	uxth	r2, r3
 8001612:	2301      	movs	r3, #1
 8001614:	9302      	str	r3, [sp, #8]
 8001616:	2301      	movs	r3, #1
 8001618:	9301      	str	r3, [sp, #4]
 800161a:	f107 030e 	add.w	r3, r7, #14
 800161e:	9300      	str	r3, [sp, #0]
 8001620:	2301      	movs	r3, #1
 8001622:	4810      	ldr	r0, [pc, #64]	; (8001664 <_Z8readBytehhPh+0x70>)
 8001624:	f004 fb7c 	bl	8005d20 <HAL_I2C_Mem_Read>
 8001628:	4603      	mov	r3, r0
 800162a:	2b00      	cmp	r3, #0
 800162c:	bf14      	ite	ne
 800162e:	2301      	movne	r3, #1
 8001630:	2300      	moveq	r3, #0
 8001632:	b2db      	uxtb	r3, r3
 8001634:	2b00      	cmp	r3, #0
 8001636:	d002      	beq.n	800163e <_Z8readBytehhPh+0x4a>
    MX_I2C1_Init();
 8001638:	f001 fcd4 	bl	8002fe4 <MX_I2C1_Init>
  while(HAL_I2C_Mem_Read(&hi2c1,devAddr,regAddr,I2C_MEMADD_SIZE_8BIT,&buffer,1,I2CDLY) != HAL_OK){
 800163c:	e7e5      	b.n	800160a <_Z8readBytehhPh+0x16>
  }
  uint8_t response = BCM2835_I2C_REASON_OK;
 800163e:	2301      	movs	r3, #1
 8001640:	73fb      	strb	r3, [r7, #15]
  data[0] = buffer;
 8001642:	7bba      	ldrb	r2, [r7, #14]
 8001644:	683b      	ldr	r3, [r7, #0]
 8001646:	701a      	strb	r2, [r3, #0]
  return response == BCM2835_I2C_REASON_OK;
 8001648:	7bfb      	ldrb	r3, [r7, #15]
 800164a:	2b01      	cmp	r3, #1
 800164c:	bf0c      	ite	eq
 800164e:	2301      	moveq	r3, #1
 8001650:	2300      	movne	r3, #0
 8001652:	b2db      	uxtb	r3, r3
 8001654:	b25b      	sxtb	r3, r3
}
 8001656:	4618      	mov	r0, r3
 8001658:	3710      	adds	r7, #16
 800165a:	46bd      	mov	sp, r7
 800165c:	bd80      	pop	{r7, pc}
 800165e:	bf00      	nop
 8001660:	20000374 	.word	0x20000374
 8001664:	200005a0 	.word	0x200005a0

08001668 <_Z9readByteshhhPh>:
 * @param regAddr First register regAddr to read from
 * @param length Number of bytes to read
 * @param data Buffer to store read data in
 * @return I2C_TransferReturn_TypeDef http://downloads.energymicro.com/documentation/doxygen/group__I2C.html
 */
int8_t readBytes(uint8_t devAddr, uint8_t regAddr, uint8_t length, uint8_t *data) {
 8001668:	b5b0      	push	{r4, r5, r7, lr}
 800166a:	b08a      	sub	sp, #40	; 0x28
 800166c:	af04      	add	r7, sp, #16
 800166e:	603b      	str	r3, [r7, #0]
 8001670:	4603      	mov	r3, r0
 8001672:	71fb      	strb	r3, [r7, #7]
 8001674:	460b      	mov	r3, r1
 8001676:	71bb      	strb	r3, [r7, #6]
 8001678:	4613      	mov	r3, r2
 800167a:	717b      	strb	r3, [r7, #5]
  uint8_t response = BCM2835_I2C_REASON_OK;
  int i ;
  for (i = 0; i < length ; i++) {
    data[i] = (uint8_t) buffer[i];
  }
  return response == BCM2835_I2C_REASON_OK;
 800167c:	466b      	mov	r3, sp
 800167e:	461d      	mov	r5, r3
  sendBuf[0] = regAddr;
 8001680:	4a32      	ldr	r2, [pc, #200]	; (800174c <_Z9readByteshhhPh+0xe4>)
 8001682:	79bb      	ldrb	r3, [r7, #6]
 8001684:	7013      	strb	r3, [r2, #0]
  uint8_t buffer[length];
 8001686:	797b      	ldrb	r3, [r7, #5]
 8001688:	1e5c      	subs	r4, r3, #1
 800168a:	613c      	str	r4, [r7, #16]
 800168c:	4623      	mov	r3, r4
 800168e:	3301      	adds	r3, #1
 8001690:	4618      	mov	r0, r3
 8001692:	f04f 0100 	mov.w	r1, #0
 8001696:	f04f 0200 	mov.w	r2, #0
 800169a:	f04f 0300 	mov.w	r3, #0
 800169e:	00cb      	lsls	r3, r1, #3
 80016a0:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80016a4:	00c2      	lsls	r2, r0, #3
 80016a6:	4623      	mov	r3, r4
 80016a8:	3301      	adds	r3, #1
 80016aa:	4618      	mov	r0, r3
 80016ac:	f04f 0100 	mov.w	r1, #0
 80016b0:	f04f 0200 	mov.w	r2, #0
 80016b4:	f04f 0300 	mov.w	r3, #0
 80016b8:	00cb      	lsls	r3, r1, #3
 80016ba:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80016be:	00c2      	lsls	r2, r0, #3
 80016c0:	4623      	mov	r3, r4
 80016c2:	3301      	adds	r3, #1
 80016c4:	3307      	adds	r3, #7
 80016c6:	08db      	lsrs	r3, r3, #3
 80016c8:	00db      	lsls	r3, r3, #3
 80016ca:	ebad 0d03 	sub.w	sp, sp, r3
 80016ce:	ab04      	add	r3, sp, #16
 80016d0:	3300      	adds	r3, #0
 80016d2:	60fb      	str	r3, [r7, #12]
  while(HAL_I2C_Mem_Read(&hi2c1,devAddr,regAddr,I2C_MEMADD_SIZE_8BIT,buffer,length,I2CDLY) != HAL_OK){
 80016d4:	79fb      	ldrb	r3, [r7, #7]
 80016d6:	b299      	uxth	r1, r3
 80016d8:	79bb      	ldrb	r3, [r7, #6]
 80016da:	b298      	uxth	r0, r3
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	797a      	ldrb	r2, [r7, #5]
 80016e0:	b292      	uxth	r2, r2
 80016e2:	2401      	movs	r4, #1
 80016e4:	9402      	str	r4, [sp, #8]
 80016e6:	9201      	str	r2, [sp, #4]
 80016e8:	9300      	str	r3, [sp, #0]
 80016ea:	2301      	movs	r3, #1
 80016ec:	4602      	mov	r2, r0
 80016ee:	4818      	ldr	r0, [pc, #96]	; (8001750 <_Z9readByteshhhPh+0xe8>)
 80016f0:	f004 fb16 	bl	8005d20 <HAL_I2C_Mem_Read>
 80016f4:	4603      	mov	r3, r0
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	bf14      	ite	ne
 80016fa:	2301      	movne	r3, #1
 80016fc:	2300      	moveq	r3, #0
 80016fe:	b2db      	uxtb	r3, r3
 8001700:	2b00      	cmp	r3, #0
 8001702:	d002      	beq.n	800170a <_Z9readByteshhhPh+0xa2>
    MX_I2C1_Init();
 8001704:	f001 fc6e 	bl	8002fe4 <MX_I2C1_Init>
  while(HAL_I2C_Mem_Read(&hi2c1,devAddr,regAddr,I2C_MEMADD_SIZE_8BIT,buffer,length,I2CDLY) != HAL_OK){
 8001708:	e7e4      	b.n	80016d4 <_Z9readByteshhhPh+0x6c>
  uint8_t response = BCM2835_I2C_REASON_OK;
 800170a:	2301      	movs	r3, #1
 800170c:	72fb      	strb	r3, [r7, #11]
  for (i = 0; i < length ; i++) {
 800170e:	2300      	movs	r3, #0
 8001710:	617b      	str	r3, [r7, #20]
 8001712:	797b      	ldrb	r3, [r7, #5]
 8001714:	697a      	ldr	r2, [r7, #20]
 8001716:	429a      	cmp	r2, r3
 8001718:	da0b      	bge.n	8001732 <_Z9readByteshhhPh+0xca>
    data[i] = (uint8_t) buffer[i];
 800171a:	697b      	ldr	r3, [r7, #20]
 800171c:	683a      	ldr	r2, [r7, #0]
 800171e:	4413      	add	r3, r2
 8001720:	68f9      	ldr	r1, [r7, #12]
 8001722:	697a      	ldr	r2, [r7, #20]
 8001724:	440a      	add	r2, r1
 8001726:	7812      	ldrb	r2, [r2, #0]
 8001728:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < length ; i++) {
 800172a:	697b      	ldr	r3, [r7, #20]
 800172c:	3301      	adds	r3, #1
 800172e:	617b      	str	r3, [r7, #20]
 8001730:	e7ef      	b.n	8001712 <_Z9readByteshhhPh+0xaa>
  return response == BCM2835_I2C_REASON_OK;
 8001732:	7afb      	ldrb	r3, [r7, #11]
 8001734:	2b01      	cmp	r3, #1
 8001736:	bf0c      	ite	eq
 8001738:	2301      	moveq	r3, #1
 800173a:	2300      	movne	r3, #0
 800173c:	b2db      	uxtb	r3, r3
 800173e:	b25b      	sxtb	r3, r3
 8001740:	46ad      	mov	sp, r5
}
 8001742:	4618      	mov	r0, r3
 8001744:	3718      	adds	r7, #24
 8001746:	46bd      	mov	sp, r7
 8001748:	bdb0      	pop	{r4, r5, r7, pc}
 800174a:	bf00      	nop
 800174c:	20000374 	.word	0x20000374
 8001750:	200005a0 	.word	0x200005a0

08001754 <_Z8writeBithhhh>:
 * @param regAddr Register regAddr to write to
 * @param bitNum Bit position to write (0-7)
 * @param value New bit value to write
 * @return Status of operation (true = success)
 */
bool writeBit(uint8_t devAddr, uint8_t regAddr, uint8_t bitNum, uint8_t data) {
 8001754:	b590      	push	{r4, r7, lr}
 8001756:	b089      	sub	sp, #36	; 0x24
 8001758:	af04      	add	r7, sp, #16
 800175a:	4604      	mov	r4, r0
 800175c:	4608      	mov	r0, r1
 800175e:	4611      	mov	r1, r2
 8001760:	461a      	mov	r2, r3
 8001762:	4623      	mov	r3, r4
 8001764:	71fb      	strb	r3, [r7, #7]
 8001766:	4603      	mov	r3, r0
 8001768:	71bb      	strb	r3, [r7, #6]
 800176a:	460b      	mov	r3, r1
 800176c:	717b      	strb	r3, [r7, #5]
 800176e:	4613      	mov	r3, r2
 8001770:	713b      	strb	r3, [r7, #4]

  //first reading registery value
  sendBuf[0] = regAddr;
 8001772:	4a34      	ldr	r2, [pc, #208]	; (8001844 <_Z8writeBithhhh+0xf0>)
 8001774:	79bb      	ldrb	r3, [r7, #6]
 8001776:	7013      	strb	r3, [r2, #0]
  uint8_t buffer;
  while(HAL_I2C_Mem_Read(&hi2c1,devAddr,regAddr,I2C_MEMADD_SIZE_8BIT,&buffer,1,I2CDLY) != HAL_OK){
 8001778:	79fb      	ldrb	r3, [r7, #7]
 800177a:	b299      	uxth	r1, r3
 800177c:	79bb      	ldrb	r3, [r7, #6]
 800177e:	b29a      	uxth	r2, r3
 8001780:	2301      	movs	r3, #1
 8001782:	9302      	str	r3, [sp, #8]
 8001784:	2301      	movs	r3, #1
 8001786:	9301      	str	r3, [sp, #4]
 8001788:	f107 030e 	add.w	r3, r7, #14
 800178c:	9300      	str	r3, [sp, #0]
 800178e:	2301      	movs	r3, #1
 8001790:	482d      	ldr	r0, [pc, #180]	; (8001848 <_Z8writeBithhhh+0xf4>)
 8001792:	f004 fac5 	bl	8005d20 <HAL_I2C_Mem_Read>
 8001796:	4603      	mov	r3, r0
 8001798:	2b00      	cmp	r3, #0
 800179a:	bf14      	ite	ne
 800179c:	2301      	movne	r3, #1
 800179e:	2300      	moveq	r3, #0
 80017a0:	b2db      	uxtb	r3, r3
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d002      	beq.n	80017ac <_Z8writeBithhhh+0x58>
    MX_I2C1_Init();
 80017a6:	f001 fc1d 	bl	8002fe4 <MX_I2C1_Init>
  while(HAL_I2C_Mem_Read(&hi2c1,devAddr,regAddr,I2C_MEMADD_SIZE_8BIT,&buffer,1,I2CDLY) != HAL_OK){
 80017aa:	e7e5      	b.n	8001778 <_Z8writeBithhhh+0x24>
  }
  uint8_t response = BCM2835_I2C_REASON_OK;
 80017ac:	2301      	movs	r3, #1
 80017ae:	73fb      	strb	r3, [r7, #15]
  if ( response == BCM2835_I2C_REASON_OK ) {
 80017b0:	7bfb      	ldrb	r3, [r7, #15]
 80017b2:	2b01      	cmp	r3, #1
 80017b4:	d13b      	bne.n	800182e <_Z8writeBithhhh+0xda>
    uint8_t b = buffer ;
 80017b6:	7bbb      	ldrb	r3, [r7, #14]
 80017b8:	737b      	strb	r3, [r7, #13]
    b = (data != 0) ? (b | (1 << bitNum)) : (b & ~(1 << bitNum));
 80017ba:	793b      	ldrb	r3, [r7, #4]
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d00a      	beq.n	80017d6 <_Z8writeBithhhh+0x82>
 80017c0:	797b      	ldrb	r3, [r7, #5]
 80017c2:	2201      	movs	r2, #1
 80017c4:	fa02 f303 	lsl.w	r3, r2, r3
 80017c8:	b25a      	sxtb	r2, r3
 80017ca:	7b7b      	ldrb	r3, [r7, #13]
 80017cc:	b25b      	sxtb	r3, r3
 80017ce:	4313      	orrs	r3, r2
 80017d0:	b25b      	sxtb	r3, r3
 80017d2:	b2db      	uxtb	r3, r3
 80017d4:	e00b      	b.n	80017ee <_Z8writeBithhhh+0x9a>
 80017d6:	797b      	ldrb	r3, [r7, #5]
 80017d8:	2201      	movs	r2, #1
 80017da:	fa02 f303 	lsl.w	r3, r2, r3
 80017de:	b25b      	sxtb	r3, r3
 80017e0:	43db      	mvns	r3, r3
 80017e2:	b25a      	sxtb	r2, r3
 80017e4:	7b7b      	ldrb	r3, [r7, #13]
 80017e6:	b25b      	sxtb	r3, r3
 80017e8:	4013      	ands	r3, r2
 80017ea:	b25b      	sxtb	r3, r3
 80017ec:	b2db      	uxtb	r3, r3
 80017ee:	737b      	strb	r3, [r7, #13]
    sendBuf[1] = b ;
 80017f0:	7b7a      	ldrb	r2, [r7, #13]
 80017f2:	4b14      	ldr	r3, [pc, #80]	; (8001844 <_Z8writeBithhhh+0xf0>)
 80017f4:	705a      	strb	r2, [r3, #1]
    while(HAL_I2C_Mem_Write(&hi2c1,devAddr,regAddr, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&b, 1,I2CDLY) != HAL_OK){
 80017f6:	79fb      	ldrb	r3, [r7, #7]
 80017f8:	b299      	uxth	r1, r3
 80017fa:	79bb      	ldrb	r3, [r7, #6]
 80017fc:	b29a      	uxth	r2, r3
 80017fe:	2301      	movs	r3, #1
 8001800:	9302      	str	r3, [sp, #8]
 8001802:	2301      	movs	r3, #1
 8001804:	9301      	str	r3, [sp, #4]
 8001806:	f107 030d 	add.w	r3, r7, #13
 800180a:	9300      	str	r3, [sp, #0]
 800180c:	2301      	movs	r3, #1
 800180e:	480e      	ldr	r0, [pc, #56]	; (8001848 <_Z8writeBithhhh+0xf4>)
 8001810:	f004 f98c 	bl	8005b2c <HAL_I2C_Mem_Write>
 8001814:	4603      	mov	r3, r0
 8001816:	2b00      	cmp	r3, #0
 8001818:	bf14      	ite	ne
 800181a:	2301      	movne	r3, #1
 800181c:	2300      	moveq	r3, #0
 800181e:	b2db      	uxtb	r3, r3
 8001820:	2b00      	cmp	r3, #0
 8001822:	d002      	beq.n	800182a <_Z8writeBithhhh+0xd6>
    	MX_I2C1_Init();
 8001824:	f001 fbde 	bl	8002fe4 <MX_I2C1_Init>
    while(HAL_I2C_Mem_Write(&hi2c1,devAddr,regAddr, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&b, 1,I2CDLY) != HAL_OK){
 8001828:	e7e5      	b.n	80017f6 <_Z8writeBithhhh+0xa2>
    }
    response = BCM2835_I2C_REASON_OK;
 800182a:	2301      	movs	r3, #1
 800182c:	73fb      	strb	r3, [r7, #15]
  }
  return response == BCM2835_I2C_REASON_OK;
 800182e:	7bfb      	ldrb	r3, [r7, #15]
 8001830:	2b01      	cmp	r3, #1
 8001832:	bf0c      	ite	eq
 8001834:	2301      	moveq	r3, #1
 8001836:	2300      	movne	r3, #0
 8001838:	b2db      	uxtb	r3, r3
}
 800183a:	4618      	mov	r0, r3
 800183c:	3714      	adds	r7, #20
 800183e:	46bd      	mov	sp, r7
 8001840:	bd90      	pop	{r4, r7, pc}
 8001842:	bf00      	nop
 8001844:	20000374 	.word	0x20000374
 8001848:	200005a0 	.word	0x200005a0

0800184c <_Z9writeBitshhhhh>:
 * @param bitStart First bit position to write (0-7)
 * @param length Number of bits to write (not more than 8)
 * @param data Right-aligned value to write
 * @return Status of operation (true = success)
 */
bool writeBits(uint8_t devAddr, uint8_t regAddr, uint8_t bitStart, uint8_t length, uint8_t data) {
 800184c:	b590      	push	{r4, r7, lr}
 800184e:	b089      	sub	sp, #36	; 0x24
 8001850:	af04      	add	r7, sp, #16
 8001852:	4604      	mov	r4, r0
 8001854:	4608      	mov	r0, r1
 8001856:	4611      	mov	r1, r2
 8001858:	461a      	mov	r2, r3
 800185a:	4623      	mov	r3, r4
 800185c:	71fb      	strb	r3, [r7, #7]
 800185e:	4603      	mov	r3, r0
 8001860:	71bb      	strb	r3, [r7, #6]
 8001862:	460b      	mov	r3, r1
 8001864:	717b      	strb	r3, [r7, #5]
 8001866:	4613      	mov	r3, r2
 8001868:	713b      	strb	r3, [r7, #4]
  // 10101111 original value (sample)
  // 10100011 original & ~mask
  // 10101011 masked | value

  //first reading registery value
  sendBuf[0] = regAddr;
 800186a:	4a3c      	ldr	r2, [pc, #240]	; (800195c <_Z9writeBitshhhhh+0x110>)
 800186c:	79bb      	ldrb	r3, [r7, #6]
 800186e:	7013      	strb	r3, [r2, #0]
  uint8_t buffer;
  while(HAL_I2C_Mem_Read(&hi2c1,devAddr,regAddr,I2C_MEMADD_SIZE_8BIT,&buffer,1,I2CDLY) != HAL_OK){
 8001870:	79fb      	ldrb	r3, [r7, #7]
 8001872:	b299      	uxth	r1, r3
 8001874:	79bb      	ldrb	r3, [r7, #6]
 8001876:	b29a      	uxth	r2, r3
 8001878:	2301      	movs	r3, #1
 800187a:	9302      	str	r3, [sp, #8]
 800187c:	2301      	movs	r3, #1
 800187e:	9301      	str	r3, [sp, #4]
 8001880:	f107 030d 	add.w	r3, r7, #13
 8001884:	9300      	str	r3, [sp, #0]
 8001886:	2301      	movs	r3, #1
 8001888:	4835      	ldr	r0, [pc, #212]	; (8001960 <_Z9writeBitshhhhh+0x114>)
 800188a:	f004 fa49 	bl	8005d20 <HAL_I2C_Mem_Read>
 800188e:	4603      	mov	r3, r0
 8001890:	2b00      	cmp	r3, #0
 8001892:	bf14      	ite	ne
 8001894:	2301      	movne	r3, #1
 8001896:	2300      	moveq	r3, #0
 8001898:	b2db      	uxtb	r3, r3
 800189a:	2b00      	cmp	r3, #0
 800189c:	d002      	beq.n	80018a4 <_Z9writeBitshhhhh+0x58>
    MX_I2C1_Init();
 800189e:	f001 fba1 	bl	8002fe4 <MX_I2C1_Init>
  while(HAL_I2C_Mem_Read(&hi2c1,devAddr,regAddr,I2C_MEMADD_SIZE_8BIT,&buffer,1,I2CDLY) != HAL_OK){
 80018a2:	e7e5      	b.n	8001870 <_Z9writeBitshhhhh+0x24>
  }
  uint8_t response = BCM2835_I2C_REASON_OK;
 80018a4:	2301      	movs	r3, #1
 80018a6:	73fb      	strb	r3, [r7, #15]
  if ( response == BCM2835_I2C_REASON_OK ) {
 80018a8:	7bfb      	ldrb	r3, [r7, #15]
 80018aa:	2b01      	cmp	r3, #1
 80018ac:	d14c      	bne.n	8001948 <_Z9writeBitshhhhh+0xfc>
    uint8_t b = buffer;
 80018ae:	7b7b      	ldrb	r3, [r7, #13]
 80018b0:	733b      	strb	r3, [r7, #12]
    uint8_t mask = ((1 << length) - 1) << (bitStart - length + 1);
 80018b2:	793b      	ldrb	r3, [r7, #4]
 80018b4:	2201      	movs	r2, #1
 80018b6:	fa02 f303 	lsl.w	r3, r2, r3
 80018ba:	1e5a      	subs	r2, r3, #1
 80018bc:	7979      	ldrb	r1, [r7, #5]
 80018be:	793b      	ldrb	r3, [r7, #4]
 80018c0:	1acb      	subs	r3, r1, r3
 80018c2:	3301      	adds	r3, #1
 80018c4:	fa02 f303 	lsl.w	r3, r2, r3
 80018c8:	73bb      	strb	r3, [r7, #14]
    data <<= (bitStart - length + 1); // shift data into correct position
 80018ca:	f897 2020 	ldrb.w	r2, [r7, #32]
 80018ce:	7979      	ldrb	r1, [r7, #5]
 80018d0:	793b      	ldrb	r3, [r7, #4]
 80018d2:	1acb      	subs	r3, r1, r3
 80018d4:	3301      	adds	r3, #1
 80018d6:	fa02 f303 	lsl.w	r3, r2, r3
 80018da:	f887 3020 	strb.w	r3, [r7, #32]
    data &= mask; // zero all non-important bits in data
 80018de:	f897 2020 	ldrb.w	r2, [r7, #32]
 80018e2:	7bbb      	ldrb	r3, [r7, #14]
 80018e4:	4013      	ands	r3, r2
 80018e6:	f887 3020 	strb.w	r3, [r7, #32]
    b &= ~(mask); // zero all important bits in existing byte
 80018ea:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80018ee:	43db      	mvns	r3, r3
 80018f0:	b25a      	sxtb	r2, r3
 80018f2:	7b3b      	ldrb	r3, [r7, #12]
 80018f4:	b25b      	sxtb	r3, r3
 80018f6:	4013      	ands	r3, r2
 80018f8:	b25b      	sxtb	r3, r3
 80018fa:	b2db      	uxtb	r3, r3
 80018fc:	733b      	strb	r3, [r7, #12]
    b |= data; // combine data with existing byte
 80018fe:	7b3a      	ldrb	r2, [r7, #12]
 8001900:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001904:	4313      	orrs	r3, r2
 8001906:	b2db      	uxtb	r3, r3
 8001908:	733b      	strb	r3, [r7, #12]
    sendBuf[1] = b ;
 800190a:	7b3a      	ldrb	r2, [r7, #12]
 800190c:	4b13      	ldr	r3, [pc, #76]	; (800195c <_Z9writeBitshhhhh+0x110>)
 800190e:	705a      	strb	r2, [r3, #1]
    while(HAL_I2C_Mem_Write(&hi2c1,devAddr,regAddr, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&b, 1,I2CDLY) != HAL_OK){
 8001910:	79fb      	ldrb	r3, [r7, #7]
 8001912:	b299      	uxth	r1, r3
 8001914:	79bb      	ldrb	r3, [r7, #6]
 8001916:	b29a      	uxth	r2, r3
 8001918:	2301      	movs	r3, #1
 800191a:	9302      	str	r3, [sp, #8]
 800191c:	2301      	movs	r3, #1
 800191e:	9301      	str	r3, [sp, #4]
 8001920:	f107 030c 	add.w	r3, r7, #12
 8001924:	9300      	str	r3, [sp, #0]
 8001926:	2301      	movs	r3, #1
 8001928:	480d      	ldr	r0, [pc, #52]	; (8001960 <_Z9writeBitshhhhh+0x114>)
 800192a:	f004 f8ff 	bl	8005b2c <HAL_I2C_Mem_Write>
 800192e:	4603      	mov	r3, r0
 8001930:	2b00      	cmp	r3, #0
 8001932:	bf14      	ite	ne
 8001934:	2301      	movne	r3, #1
 8001936:	2300      	moveq	r3, #0
 8001938:	b2db      	uxtb	r3, r3
 800193a:	2b00      	cmp	r3, #0
 800193c:	d002      	beq.n	8001944 <_Z9writeBitshhhhh+0xf8>
       MX_I2C1_Init();
 800193e:	f001 fb51 	bl	8002fe4 <MX_I2C1_Init>
    while(HAL_I2C_Mem_Write(&hi2c1,devAddr,regAddr, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&b, 1,I2CDLY) != HAL_OK){
 8001942:	e7e5      	b.n	8001910 <_Z9writeBitshhhhh+0xc4>
    }
    response = BCM2835_I2C_REASON_OK;
 8001944:	2301      	movs	r3, #1
 8001946:	73fb      	strb	r3, [r7, #15]
    }
  return response == BCM2835_I2C_REASON_OK;
 8001948:	7bfb      	ldrb	r3, [r7, #15]
 800194a:	2b01      	cmp	r3, #1
 800194c:	bf0c      	ite	eq
 800194e:	2301      	moveq	r3, #1
 8001950:	2300      	movne	r3, #0
 8001952:	b2db      	uxtb	r3, r3
}
 8001954:	4618      	mov	r0, r3
 8001956:	3714      	adds	r7, #20
 8001958:	46bd      	mov	sp, r7
 800195a:	bd90      	pop	{r4, r7, pc}
 800195c:	20000374 	.word	0x20000374
 8001960:	200005a0 	.word	0x200005a0

08001964 <_Z9writeBytehhh>:
 * @param devAddr I2C slave device address
 * @param regAddr Register address to write to
 * @param data New byte value to write
 * @return Status of operation (true = success)
 */
bool writeByte(uint8_t devAddr, uint8_t regAddr, uint8_t data) {
 8001964:	b580      	push	{r7, lr}
 8001966:	b088      	sub	sp, #32
 8001968:	af04      	add	r7, sp, #16
 800196a:	4603      	mov	r3, r0
 800196c:	71fb      	strb	r3, [r7, #7]
 800196e:	460b      	mov	r3, r1
 8001970:	71bb      	strb	r3, [r7, #6]
 8001972:	4613      	mov	r3, r2
 8001974:	717b      	strb	r3, [r7, #5]

  sendBuf[0] = regAddr;
 8001976:	4a15      	ldr	r2, [pc, #84]	; (80019cc <_Z9writeBytehhh+0x68>)
 8001978:	79bb      	ldrb	r3, [r7, #6]
 800197a:	7013      	strb	r3, [r2, #0]
  sendBuf[1] = data;
 800197c:	797a      	ldrb	r2, [r7, #5]
 800197e:	4b13      	ldr	r3, [pc, #76]	; (80019cc <_Z9writeBytehhh+0x68>)
 8001980:	705a      	strb	r2, [r3, #1]
  while(HAL_I2C_Mem_Write(&hi2c1,devAddr,regAddr, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&data, 1,I2CDLY) != HAL_OK){
 8001982:	79fb      	ldrb	r3, [r7, #7]
 8001984:	b299      	uxth	r1, r3
 8001986:	79bb      	ldrb	r3, [r7, #6]
 8001988:	b29a      	uxth	r2, r3
 800198a:	2301      	movs	r3, #1
 800198c:	9302      	str	r3, [sp, #8]
 800198e:	2301      	movs	r3, #1
 8001990:	9301      	str	r3, [sp, #4]
 8001992:	1d7b      	adds	r3, r7, #5
 8001994:	9300      	str	r3, [sp, #0]
 8001996:	2301      	movs	r3, #1
 8001998:	480d      	ldr	r0, [pc, #52]	; (80019d0 <_Z9writeBytehhh+0x6c>)
 800199a:	f004 f8c7 	bl	8005b2c <HAL_I2C_Mem_Write>
 800199e:	4603      	mov	r3, r0
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	bf14      	ite	ne
 80019a4:	2301      	movne	r3, #1
 80019a6:	2300      	moveq	r3, #0
 80019a8:	b2db      	uxtb	r3, r3
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d002      	beq.n	80019b4 <_Z9writeBytehhh+0x50>
     MX_I2C1_Init();
 80019ae:	f001 fb19 	bl	8002fe4 <MX_I2C1_Init>
  while(HAL_I2C_Mem_Write(&hi2c1,devAddr,regAddr, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&data, 1,I2CDLY) != HAL_OK){
 80019b2:	e7e6      	b.n	8001982 <_Z9writeBytehhh+0x1e>
  }
  uint8_t response = BCM2835_I2C_REASON_OK;
 80019b4:	2301      	movs	r3, #1
 80019b6:	73fb      	strb	r3, [r7, #15]
  return response == BCM2835_I2C_REASON_OK ;
 80019b8:	7bfb      	ldrb	r3, [r7, #15]
 80019ba:	2b01      	cmp	r3, #1
 80019bc:	bf0c      	ite	eq
 80019be:	2301      	moveq	r3, #1
 80019c0:	2300      	movne	r3, #0
 80019c2:	b2db      	uxtb	r3, r3
}
 80019c4:	4618      	mov	r0, r3
 80019c6:	3710      	adds	r7, #16
 80019c8:	46bd      	mov	sp, r7
 80019ca:	bd80      	pop	{r7, pc}
 80019cc:	20000374 	.word	0x20000374
 80019d0:	200005a0 	.word	0x200005a0

080019d4 <_Z9writeWordhht>:
    data[i] = (buffer[i*2] << 8) | buffer[i*2+1] ;
  }
  return  response == BCM2835_I2C_REASON_OK ;
}

bool writeWord(uint8_t devAddr, uint8_t regAddr, uint16_t data){
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b088      	sub	sp, #32
 80019d8:	af04      	add	r7, sp, #16
 80019da:	4603      	mov	r3, r0
 80019dc:	71fb      	strb	r3, [r7, #7]
 80019de:	460b      	mov	r3, r1
 80019e0:	71bb      	strb	r3, [r7, #6]
 80019e2:	4613      	mov	r3, r2
 80019e4:	80bb      	strh	r3, [r7, #4]

  sendBuf[0] = (uint8_t) (data >> 8); //MSByte
 80019e6:	88bb      	ldrh	r3, [r7, #4]
 80019e8:	121b      	asrs	r3, r3, #8
 80019ea:	b2da      	uxtb	r2, r3
 80019ec:	4b15      	ldr	r3, [pc, #84]	; (8001a44 <_Z9writeWordhht+0x70>)
 80019ee:	701a      	strb	r2, [r3, #0]
  sendBuf[1] = (uint8_t) (data >> 0); //LSByte
 80019f0:	88bb      	ldrh	r3, [r7, #4]
 80019f2:	b2da      	uxtb	r2, r3
 80019f4:	4b13      	ldr	r3, [pc, #76]	; (8001a44 <_Z9writeWordhht+0x70>)
 80019f6:	705a      	strb	r2, [r3, #1]
  while(HAL_I2C_Mem_Write(&hi2c1,devAddr,regAddr, I2C_MEMADD_SIZE_8BIT, (uint8_t*)sendBuf, 2,I2CDLY) != HAL_OK){
 80019f8:	79fb      	ldrb	r3, [r7, #7]
 80019fa:	b299      	uxth	r1, r3
 80019fc:	79bb      	ldrb	r3, [r7, #6]
 80019fe:	b29a      	uxth	r2, r3
 8001a00:	2301      	movs	r3, #1
 8001a02:	9302      	str	r3, [sp, #8]
 8001a04:	2302      	movs	r3, #2
 8001a06:	9301      	str	r3, [sp, #4]
 8001a08:	4b0e      	ldr	r3, [pc, #56]	; (8001a44 <_Z9writeWordhht+0x70>)
 8001a0a:	9300      	str	r3, [sp, #0]
 8001a0c:	2301      	movs	r3, #1
 8001a0e:	480e      	ldr	r0, [pc, #56]	; (8001a48 <_Z9writeWordhht+0x74>)
 8001a10:	f004 f88c 	bl	8005b2c <HAL_I2C_Mem_Write>
 8001a14:	4603      	mov	r3, r0
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	bf14      	ite	ne
 8001a1a:	2301      	movne	r3, #1
 8001a1c:	2300      	moveq	r3, #0
 8001a1e:	b2db      	uxtb	r3, r3
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d002      	beq.n	8001a2a <_Z9writeWordhht+0x56>
     MX_I2C1_Init();
 8001a24:	f001 fade 	bl	8002fe4 <MX_I2C1_Init>
  while(HAL_I2C_Mem_Write(&hi2c1,devAddr,regAddr, I2C_MEMADD_SIZE_8BIT, (uint8_t*)sendBuf, 2,I2CDLY) != HAL_OK){
 8001a28:	e7e6      	b.n	80019f8 <_Z9writeWordhht+0x24>
  }
  uint8_t response = BCM2835_I2C_REASON_OK;
 8001a2a:	2301      	movs	r3, #1
 8001a2c:	73fb      	strb	r3, [r7, #15]
  return response == BCM2835_I2C_REASON_OK ;
 8001a2e:	7bfb      	ldrb	r3, [r7, #15]
 8001a30:	2b01      	cmp	r3, #1
 8001a32:	bf0c      	ite	eq
 8001a34:	2301      	moveq	r3, #1
 8001a36:	2300      	movne	r3, #0
 8001a38:	b2db      	uxtb	r3, r3
}
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	3710      	adds	r7, #16
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bd80      	pop	{r7, pc}
 8001a42:	bf00      	nop
 8001a44:	20000374 	.word	0x20000374
 8001a48:	200005a0 	.word	0x200005a0

08001a4c <_Z10writeByteshhhPh>:

bool writeBytes(uint8_t devAddr, uint8_t regAddr, uint8_t length, uint8_t *data){
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b088      	sub	sp, #32
 8001a50:	af04      	add	r7, sp, #16
 8001a52:	603b      	str	r3, [r7, #0]
 8001a54:	4603      	mov	r3, r0
 8001a56:	71fb      	strb	r3, [r7, #7]
 8001a58:	460b      	mov	r3, r1
 8001a5a:	71bb      	strb	r3, [r7, #6]
 8001a5c:	4613      	mov	r3, r2
 8001a5e:	717b      	strb	r3, [r7, #5]
  uint8_t i;
  for (i = 0; i < length; i++) {
 8001a60:	2300      	movs	r3, #0
 8001a62:	73fb      	strb	r3, [r7, #15]
 8001a64:	7bfa      	ldrb	r2, [r7, #15]
 8001a66:	797b      	ldrb	r3, [r7, #5]
 8001a68:	429a      	cmp	r2, r3
 8001a6a:	d20a      	bcs.n	8001a82 <_Z10writeByteshhhPh+0x36>
    sendBuf[i] = data[i] ;
 8001a6c:	7bfb      	ldrb	r3, [r7, #15]
 8001a6e:	683a      	ldr	r2, [r7, #0]
 8001a70:	441a      	add	r2, r3
 8001a72:	7bfb      	ldrb	r3, [r7, #15]
 8001a74:	7811      	ldrb	r1, [r2, #0]
 8001a76:	4a16      	ldr	r2, [pc, #88]	; (8001ad0 <_Z10writeByteshhhPh+0x84>)
 8001a78:	54d1      	strb	r1, [r2, r3]
  for (i = 0; i < length; i++) {
 8001a7a:	7bfb      	ldrb	r3, [r7, #15]
 8001a7c:	3301      	adds	r3, #1
 8001a7e:	73fb      	strb	r3, [r7, #15]
 8001a80:	e7f0      	b.n	8001a64 <_Z10writeByteshhhPh+0x18>
  }
  while(HAL_I2C_Mem_Write(&hi2c1,devAddr,regAddr, I2C_MEMADD_SIZE_8BIT, (uint8_t*)sendBuf, length,I2CDLY) != HAL_OK){
 8001a82:	79fb      	ldrb	r3, [r7, #7]
 8001a84:	b299      	uxth	r1, r3
 8001a86:	79bb      	ldrb	r3, [r7, #6]
 8001a88:	b29a      	uxth	r2, r3
 8001a8a:	797b      	ldrb	r3, [r7, #5]
 8001a8c:	b29b      	uxth	r3, r3
 8001a8e:	2001      	movs	r0, #1
 8001a90:	9002      	str	r0, [sp, #8]
 8001a92:	9301      	str	r3, [sp, #4]
 8001a94:	4b0e      	ldr	r3, [pc, #56]	; (8001ad0 <_Z10writeByteshhhPh+0x84>)
 8001a96:	9300      	str	r3, [sp, #0]
 8001a98:	2301      	movs	r3, #1
 8001a9a:	480e      	ldr	r0, [pc, #56]	; (8001ad4 <_Z10writeByteshhhPh+0x88>)
 8001a9c:	f004 f846 	bl	8005b2c <HAL_I2C_Mem_Write>
 8001aa0:	4603      	mov	r3, r0
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	bf14      	ite	ne
 8001aa6:	2301      	movne	r3, #1
 8001aa8:	2300      	moveq	r3, #0
 8001aaa:	b2db      	uxtb	r3, r3
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d002      	beq.n	8001ab6 <_Z10writeByteshhhPh+0x6a>
     MX_I2C1_Init();
 8001ab0:	f001 fa98 	bl	8002fe4 <MX_I2C1_Init>
  while(HAL_I2C_Mem_Write(&hi2c1,devAddr,regAddr, I2C_MEMADD_SIZE_8BIT, (uint8_t*)sendBuf, length,I2CDLY) != HAL_OK){
 8001ab4:	e7e5      	b.n	8001a82 <_Z10writeByteshhhPh+0x36>
  }
  uint8_t response = BCM2835_I2C_REASON_OK;
 8001ab6:	2301      	movs	r3, #1
 8001ab8:	73bb      	strb	r3, [r7, #14]
  return response == BCM2835_I2C_REASON_OK ;
 8001aba:	7bbb      	ldrb	r3, [r7, #14]
 8001abc:	2b01      	cmp	r3, #1
 8001abe:	bf0c      	ite	eq
 8001ac0:	2301      	moveq	r3, #1
 8001ac2:	2300      	movne	r3, #0
 8001ac4:	b2db      	uxtb	r3, r3
}
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	3710      	adds	r7, #16
 8001aca:	46bd      	mov	sp, r7
 8001acc:	bd80      	pop	{r7, pc}
 8001ace:	bf00      	nop
 8001ad0:	20000374 	.word	0x20000374
 8001ad4:	200005a0 	.word	0x200005a0

08001ad8 <_ZN7MPU6050C1Ev>:


/** Default constructor, uses default I2C address.
 * @see MPU6050_DEFAULT_ADDRESS
 */
MPU6050::MPU6050() {
 8001ad8:	b480      	push	{r7}
 8001ada:	b083      	sub	sp, #12
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
    devAddr = MPU6050_DEFAULT_ADDRESS;
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	22d0      	movs	r2, #208	; 0xd0
 8001ae4:	719a      	strb	r2, [r3, #6]
}
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	4618      	mov	r0, r3
 8001aea:	370c      	adds	r7, #12
 8001aec:	46bd      	mov	sp, r7
 8001aee:	bc80      	pop	{r7}
 8001af0:	4770      	bx	lr

08001af2 <_ZN7MPU605010initializeEv>:
 * after start-up). This function also sets both the accelerometer and the gyroscope
 * to their most sensitive settings, namely +/- 2g and +/- 250 degrees/sec, and sets
 * the clock source to use the X Gyro for reference, which is slightly better than
 * the default internal clock source.
 */
void MPU6050::initialize() {
 8001af2:	b580      	push	{r7, lr}
 8001af4:	b082      	sub	sp, #8
 8001af6:	af00      	add	r7, sp, #0
 8001af8:	6078      	str	r0, [r7, #4]
    setClockSource(MPU6050_CLOCK_PLL_XGYRO);
 8001afa:	2101      	movs	r1, #1
 8001afc:	6878      	ldr	r0, [r7, #4]
 8001afe:	f000 f951 	bl	8001da4 <_ZN7MPU605014setClockSourceEh>
    setFullScaleGyroRange(MPU6050_GYRO_FS_250);
 8001b02:	2100      	movs	r1, #0
 8001b04:	6878      	ldr	r0, [r7, #4]
 8001b06:	f000 f843 	bl	8001b90 <_ZN7MPU605021setFullScaleGyroRangeEh>
    setFullScaleAccelRange(MPU6050_ACCEL_FS_2);
 8001b0a:	2100      	movs	r1, #0
 8001b0c:	6878      	ldr	r0, [r7, #4]
 8001b0e:	f000 f852 	bl	8001bb6 <_ZN7MPU605022setFullScaleAccelRangeEh>
    setSleepEnabled(false); // thanks to Jack Elston for pointing this one out!
 8001b12:	2100      	movs	r1, #0
 8001b14:	6878      	ldr	r0, [r7, #4]
 8001b16:	f000 f934 	bl	8001d82 <_ZN7MPU605015setSleepEnabledEb>
}
 8001b1a:	bf00      	nop
 8001b1c:	3708      	adds	r7, #8
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	bd80      	pop	{r7, pc}

08001b22 <_ZN7MPU60507setRateEh>:
/** Set gyroscope sample rate divider.
 * @param rate New sample rate divider
 * @see getRate()
 * @see MPU6050_RA_SMPLRT_DIV
 */
void MPU6050::setRate(uint8_t rate) {
 8001b22:	b580      	push	{r7, lr}
 8001b24:	b082      	sub	sp, #8
 8001b26:	af00      	add	r7, sp, #0
 8001b28:	6078      	str	r0, [r7, #4]
 8001b2a:	460b      	mov	r3, r1
 8001b2c:	70fb      	strb	r3, [r7, #3]
    writeByte(devAddr, MPU6050_RA_SMPLRT_DIV, rate);
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	799b      	ldrb	r3, [r3, #6]
 8001b32:	78fa      	ldrb	r2, [r7, #3]
 8001b34:	2119      	movs	r1, #25
 8001b36:	4618      	mov	r0, r3
 8001b38:	f7ff ff14 	bl	8001964 <_Z9writeBytehhh>
}
 8001b3c:	bf00      	nop
 8001b3e:	3708      	adds	r7, #8
 8001b40:	46bd      	mov	sp, r7
 8001b42:	bd80      	pop	{r7, pc}

08001b44 <_ZN7MPU605020setExternalFrameSyncEh>:
/** Set external FSYNC configuration.
 * @see getExternalFrameSync()
 * @see MPU6050_RA_CONFIG
 * @param sync New FSYNC configuration value
 */
void MPU6050::setExternalFrameSync(uint8_t sync) {
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b084      	sub	sp, #16
 8001b48:	af02      	add	r7, sp, #8
 8001b4a:	6078      	str	r0, [r7, #4]
 8001b4c:	460b      	mov	r3, r1
 8001b4e:	70fb      	strb	r3, [r7, #3]
    writeBits(devAddr, MPU6050_RA_CONFIG, MPU6050_CFG_EXT_SYNC_SET_BIT, MPU6050_CFG_EXT_SYNC_SET_LENGTH, sync);
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	7998      	ldrb	r0, [r3, #6]
 8001b54:	78fb      	ldrb	r3, [r7, #3]
 8001b56:	9300      	str	r3, [sp, #0]
 8001b58:	2303      	movs	r3, #3
 8001b5a:	2205      	movs	r2, #5
 8001b5c:	211a      	movs	r1, #26
 8001b5e:	f7ff fe75 	bl	800184c <_Z9writeBitshhhhh>
}
 8001b62:	bf00      	nop
 8001b64:	3708      	adds	r7, #8
 8001b66:	46bd      	mov	sp, r7
 8001b68:	bd80      	pop	{r7, pc}

08001b6a <_ZN7MPU605011setDLPFModeEh>:
 * @see MPU6050_DLPF_BW_256
 * @see MPU6050_RA_CONFIG
 * @see MPU6050_CFG_DLPF_CFG_BIT
 * @see MPU6050_CFG_DLPF_CFG_LENGTH
 */
void MPU6050::setDLPFMode(uint8_t mode) {
 8001b6a:	b580      	push	{r7, lr}
 8001b6c:	b084      	sub	sp, #16
 8001b6e:	af02      	add	r7, sp, #8
 8001b70:	6078      	str	r0, [r7, #4]
 8001b72:	460b      	mov	r3, r1
 8001b74:	70fb      	strb	r3, [r7, #3]
    writeBits(devAddr, MPU6050_RA_CONFIG, MPU6050_CFG_DLPF_CFG_BIT, MPU6050_CFG_DLPF_CFG_LENGTH, mode);
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	7998      	ldrb	r0, [r3, #6]
 8001b7a:	78fb      	ldrb	r3, [r7, #3]
 8001b7c:	9300      	str	r3, [sp, #0]
 8001b7e:	2303      	movs	r3, #3
 8001b80:	2202      	movs	r2, #2
 8001b82:	211a      	movs	r1, #26
 8001b84:	f7ff fe62 	bl	800184c <_Z9writeBitshhhhh>
}
 8001b88:	bf00      	nop
 8001b8a:	3708      	adds	r7, #8
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	bd80      	pop	{r7, pc}

08001b90 <_ZN7MPU605021setFullScaleGyroRangeEh>:
 * @see MPU6050_GYRO_FS_250
 * @see MPU6050_RA_GYRO_CONFIG
 * @see MPU6050_GCONFIG_FS_SEL_BIT
 * @see MPU6050_GCONFIG_FS_SEL_LENGTH
 */
void MPU6050::setFullScaleGyroRange(uint8_t range) {
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b084      	sub	sp, #16
 8001b94:	af02      	add	r7, sp, #8
 8001b96:	6078      	str	r0, [r7, #4]
 8001b98:	460b      	mov	r3, r1
 8001b9a:	70fb      	strb	r3, [r7, #3]
    writeBits(devAddr, MPU6050_RA_GYRO_CONFIG, MPU6050_GCONFIG_FS_SEL_BIT, MPU6050_GCONFIG_FS_SEL_LENGTH, range);
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	7998      	ldrb	r0, [r3, #6]
 8001ba0:	78fb      	ldrb	r3, [r7, #3]
 8001ba2:	9300      	str	r3, [sp, #0]
 8001ba4:	2302      	movs	r3, #2
 8001ba6:	2204      	movs	r2, #4
 8001ba8:	211b      	movs	r1, #27
 8001baa:	f7ff fe4f 	bl	800184c <_Z9writeBitshhhhh>
}
 8001bae:	bf00      	nop
 8001bb0:	3708      	adds	r7, #8
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	bd80      	pop	{r7, pc}

08001bb6 <_ZN7MPU605022setFullScaleAccelRangeEh>:
}
/** Set full-scale accelerometer range.
 * @param range New full-scale accelerometer range setting
 * @see getFullScaleAccelRange()
 */
void MPU6050::setFullScaleAccelRange(uint8_t range) {
 8001bb6:	b580      	push	{r7, lr}
 8001bb8:	b084      	sub	sp, #16
 8001bba:	af02      	add	r7, sp, #8
 8001bbc:	6078      	str	r0, [r7, #4]
 8001bbe:	460b      	mov	r3, r1
 8001bc0:	70fb      	strb	r3, [r7, #3]
    writeBits(devAddr, MPU6050_RA_ACCEL_CONFIG, MPU6050_ACONFIG_AFS_SEL_BIT, MPU6050_ACONFIG_AFS_SEL_LENGTH, range);
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	7998      	ldrb	r0, [r3, #6]
 8001bc6:	78fb      	ldrb	r3, [r7, #3]
 8001bc8:	9300      	str	r3, [sp, #0]
 8001bca:	2302      	movs	r3, #2
 8001bcc:	2204      	movs	r2, #4
 8001bce:	211c      	movs	r1, #28
 8001bd0:	f7ff fe3c 	bl	800184c <_Z9writeBitshhhhh>
}
 8001bd4:	bf00      	nop
 8001bd6:	3708      	adds	r7, #8
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	bd80      	pop	{r7, pc}

08001bdc <_ZN7MPU605027setMotionDetectionThresholdEh>:
/** Set motion detection event acceleration threshold.
 * @param threshold New motion detection acceleration threshold value (LSB = 2mg)
 * @see getMotionDetectionThreshold()
 * @see MPU6050_RA_MOT_THR
 */
void MPU6050::setMotionDetectionThreshold(uint8_t threshold) {
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b082      	sub	sp, #8
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
 8001be4:	460b      	mov	r3, r1
 8001be6:	70fb      	strb	r3, [r7, #3]
    writeByte(devAddr, MPU6050_RA_MOT_THR, threshold);
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	799b      	ldrb	r3, [r3, #6]
 8001bec:	78fa      	ldrb	r2, [r7, #3]
 8001bee:	211f      	movs	r1, #31
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	f7ff feb7 	bl	8001964 <_Z9writeBytehhh>
}
 8001bf6:	bf00      	nop
 8001bf8:	3708      	adds	r7, #8
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	bd80      	pop	{r7, pc}

08001bfe <_ZN7MPU605026setMotionDetectionDurationEh>:
/** Set motion detection event duration threshold.
 * @param duration New motion detection duration threshold value (LSB = 1ms)
 * @see getMotionDetectionDuration()
 * @see MPU6050_RA_MOT_DUR
 */
void MPU6050::setMotionDetectionDuration(uint8_t duration) {
 8001bfe:	b580      	push	{r7, lr}
 8001c00:	b082      	sub	sp, #8
 8001c02:	af00      	add	r7, sp, #0
 8001c04:	6078      	str	r0, [r7, #4]
 8001c06:	460b      	mov	r3, r1
 8001c08:	70fb      	strb	r3, [r7, #3]
    writeByte(devAddr, MPU6050_RA_MOT_DUR, duration);
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	799b      	ldrb	r3, [r3, #6]
 8001c0e:	78fa      	ldrb	r2, [r7, #3]
 8001c10:	2120      	movs	r1, #32
 8001c12:	4618      	mov	r0, r3
 8001c14:	f7ff fea6 	bl	8001964 <_Z9writeBytehhh>
}
 8001c18:	bf00      	nop
 8001c1a:	3708      	adds	r7, #8
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	bd80      	pop	{r7, pc}

08001c20 <_ZN7MPU605031setZeroMotionDetectionThresholdEh>:
/** Set zero motion detection event acceleration threshold.
 * @param threshold New zero motion detection acceleration threshold value (LSB = 2mg)
 * @see getZeroMotionDetectionThreshold()
 * @see MPU6050_RA_ZRMOT_THR
 */
void MPU6050::setZeroMotionDetectionThreshold(uint8_t threshold) {
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b082      	sub	sp, #8
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
 8001c28:	460b      	mov	r3, r1
 8001c2a:	70fb      	strb	r3, [r7, #3]
    writeByte(devAddr, MPU6050_RA_ZRMOT_THR, threshold);
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	799b      	ldrb	r3, [r3, #6]
 8001c30:	78fa      	ldrb	r2, [r7, #3]
 8001c32:	2121      	movs	r1, #33	; 0x21
 8001c34:	4618      	mov	r0, r3
 8001c36:	f7ff fe95 	bl	8001964 <_Z9writeBytehhh>
}
 8001c3a:	bf00      	nop
 8001c3c:	3708      	adds	r7, #8
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	bd80      	pop	{r7, pc}

08001c42 <_ZN7MPU605030setZeroMotionDetectionDurationEh>:
/** Set zero motion detection event duration threshold.
 * @param duration New zero motion detection duration threshold value (LSB = 1ms)
 * @see getZeroMotionDetectionDuration()
 * @see MPU6050_RA_ZRMOT_DUR
 */
void MPU6050::setZeroMotionDetectionDuration(uint8_t duration) {
 8001c42:	b580      	push	{r7, lr}
 8001c44:	b082      	sub	sp, #8
 8001c46:	af00      	add	r7, sp, #0
 8001c48:	6078      	str	r0, [r7, #4]
 8001c4a:	460b      	mov	r3, r1
 8001c4c:	70fb      	strb	r3, [r7, #3]
    writeByte(devAddr, MPU6050_RA_ZRMOT_DUR, duration);
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	799b      	ldrb	r3, [r3, #6]
 8001c52:	78fa      	ldrb	r2, [r7, #3]
 8001c54:	2122      	movs	r1, #34	; 0x22
 8001c56:	4618      	mov	r0, r3
 8001c58:	f7ff fe84 	bl	8001964 <_Z9writeBytehhh>
}
 8001c5c:	bf00      	nop
 8001c5e:	3708      	adds	r7, #8
 8001c60:	46bd      	mov	sp, r7
 8001c62:	bd80      	pop	{r7, pc}

08001c64 <_ZN7MPU605015setSlaveAddressEhh>:
 * @param num Slave number (0-3)
 * @param address New address for specified slave
 * @see getSlaveAddress()
 * @see MPU6050_RA_I2C_SLV0_ADDR
 */
void MPU6050::setSlaveAddress(uint8_t num, uint8_t address) {
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b082      	sub	sp, #8
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
 8001c6c:	460b      	mov	r3, r1
 8001c6e:	70fb      	strb	r3, [r7, #3]
 8001c70:	4613      	mov	r3, r2
 8001c72:	70bb      	strb	r3, [r7, #2]
    if (num > 3) return;
 8001c74:	78fb      	ldrb	r3, [r7, #3]
 8001c76:	2b03      	cmp	r3, #3
 8001c78:	d80d      	bhi.n	8001c96 <_ZN7MPU605015setSlaveAddressEhh+0x32>
    writeByte(devAddr, MPU6050_RA_I2C_SLV0_ADDR + num*3, address);
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	7998      	ldrb	r0, [r3, #6]
 8001c7e:	78fb      	ldrb	r3, [r7, #3]
 8001c80:	461a      	mov	r2, r3
 8001c82:	0052      	lsls	r2, r2, #1
 8001c84:	4413      	add	r3, r2
 8001c86:	b2db      	uxtb	r3, r3
 8001c88:	3325      	adds	r3, #37	; 0x25
 8001c8a:	b2db      	uxtb	r3, r3
 8001c8c:	78ba      	ldrb	r2, [r7, #2]
 8001c8e:	4619      	mov	r1, r3
 8001c90:	f7ff fe68 	bl	8001964 <_Z9writeBytehhh>
 8001c94:	e000      	b.n	8001c98 <_ZN7MPU605015setSlaveAddressEhh+0x34>
    if (num > 3) return;
 8001c96:	bf00      	nop
}
 8001c98:	3708      	adds	r7, #8
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	bd80      	pop	{r7, pc}

08001c9e <_ZN7MPU605013setIntEnabledEh>:
 * @param enabled New interrupt enabled status
 * @see getIntFreefallEnabled()
 * @see MPU6050_RA_INT_ENABLE
 * @see MPU6050_INTERRUPT_FF_BIT
 **/
void MPU6050::setIntEnabled(uint8_t enabled) {
 8001c9e:	b580      	push	{r7, lr}
 8001ca0:	b082      	sub	sp, #8
 8001ca2:	af00      	add	r7, sp, #0
 8001ca4:	6078      	str	r0, [r7, #4]
 8001ca6:	460b      	mov	r3, r1
 8001ca8:	70fb      	strb	r3, [r7, #3]
    writeByte(devAddr, MPU6050_RA_INT_ENABLE, enabled);
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	799b      	ldrb	r3, [r3, #6]
 8001cae:	78fa      	ldrb	r2, [r7, #3]
 8001cb0:	2138      	movs	r1, #56	; 0x38
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	f7ff fe56 	bl	8001964 <_Z9writeBytehhh>
}
 8001cb8:	bf00      	nop
 8001cba:	3708      	adds	r7, #8
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	bd80      	pop	{r7, pc}

08001cc0 <_ZN7MPU605012getIntStatusEv>:
 * for getting multiple INT statuses, since each single bit read clears
 * all of them because it has to read the whole byte.
 * @return Current interrupt status
 * @see MPU6050_RA_INT_STATUS
 */
uint8_t MPU6050::getIntStatus() {
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b082      	sub	sp, #8
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
    readByte(devAddr, MPU6050_RA_INT_STATUS, buffer);
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	7998      	ldrb	r0, [r3, #6]
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	3307      	adds	r3, #7
 8001cd0:	461a      	mov	r2, r3
 8001cd2:	213a      	movs	r1, #58	; 0x3a
 8001cd4:	f7ff fc8e 	bl	80015f4 <_Z8readBytehhPh>
    return buffer[0];
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	79db      	ldrb	r3, [r3, #7]
}
 8001cdc:	4618      	mov	r0, r3
 8001cde:	3708      	adds	r7, #8
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	bd80      	pop	{r7, pc}

08001ce4 <_ZN7MPU605014setFIFOEnabledEb>:
 * @param enabled New FIFO enabled status
 * @see getFIFOEnabled()
 * @see MPU6050_RA_USER_CTRL
 * @see MPU6050_USERCTRL_FIFO_EN_BIT
 */
void MPU6050::setFIFOEnabled(bool enabled) {
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b082      	sub	sp, #8
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
 8001cec:	460b      	mov	r3, r1
 8001cee:	70fb      	strb	r3, [r7, #3]
    writeBit(devAddr, MPU6050_RA_USER_CTRL, MPU6050_USERCTRL_FIFO_EN_BIT, enabled);
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	7998      	ldrb	r0, [r3, #6]
 8001cf4:	78fb      	ldrb	r3, [r7, #3]
 8001cf6:	2206      	movs	r2, #6
 8001cf8:	216a      	movs	r1, #106	; 0x6a
 8001cfa:	f7ff fd2b 	bl	8001754 <_Z8writeBithhhh>
}
 8001cfe:	bf00      	nop
 8001d00:	3708      	adds	r7, #8
 8001d02:	46bd      	mov	sp, r7
 8001d04:	bd80      	pop	{r7, pc}

08001d06 <_ZN7MPU605023setI2CMasterModeEnabledEb>:
 * @param enabled New I2C Master Mode enabled status
 * @see getI2CMasterModeEnabled()
 * @see MPU6050_RA_USER_CTRL
 * @see MPU6050_USERCTRL_I2C_MST_EN_BIT
 */
void MPU6050::setI2CMasterModeEnabled(bool enabled) {
 8001d06:	b580      	push	{r7, lr}
 8001d08:	b082      	sub	sp, #8
 8001d0a:	af00      	add	r7, sp, #0
 8001d0c:	6078      	str	r0, [r7, #4]
 8001d0e:	460b      	mov	r3, r1
 8001d10:	70fb      	strb	r3, [r7, #3]
    writeBit(devAddr, MPU6050_RA_USER_CTRL, MPU6050_USERCTRL_I2C_MST_EN_BIT, enabled);
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	7998      	ldrb	r0, [r3, #6]
 8001d16:	78fb      	ldrb	r3, [r7, #3]
 8001d18:	2205      	movs	r2, #5
 8001d1a:	216a      	movs	r1, #106	; 0x6a
 8001d1c:	f7ff fd1a 	bl	8001754 <_Z8writeBithhhh>
}
 8001d20:	bf00      	nop
 8001d22:	3708      	adds	r7, #8
 8001d24:	46bd      	mov	sp, r7
 8001d26:	bd80      	pop	{r7, pc}

08001d28 <_ZN7MPU60509resetFIFOEv>:
 * This bit resets the FIFO buffer when set to 1 while FIFO_EN equals 0. This
 * bit automatically clears to 0 after the reset has been triggered.
 * @see MPU6050_RA_USER_CTRL
 * @see MPU6050_USERCTRL_FIFO_RESET_BIT
 */
void MPU6050::resetFIFO() {
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b082      	sub	sp, #8
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
    writeBit(devAddr, MPU6050_RA_USER_CTRL, MPU6050_USERCTRL_FIFO_RESET_BIT, true);
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	7998      	ldrb	r0, [r3, #6]
 8001d34:	2301      	movs	r3, #1
 8001d36:	2202      	movs	r2, #2
 8001d38:	216a      	movs	r1, #106	; 0x6a
 8001d3a:	f7ff fd0b 	bl	8001754 <_Z8writeBithhhh>
}
 8001d3e:	bf00      	nop
 8001d40:	3708      	adds	r7, #8
 8001d42:	46bd      	mov	sp, r7
 8001d44:	bd80      	pop	{r7, pc}

08001d46 <_ZN7MPU605014resetI2CMasterEv>:
 * This bit resets the I2C Master when set to 1 while I2C_MST_EN equals 0.
 * This bit automatically clears to 0 after the reset has been triggered.
 * @see MPU6050_RA_USER_CTRL
 * @see MPU6050_USERCTRL_I2C_MST_RESET_BIT
 */
void MPU6050::resetI2CMaster() {
 8001d46:	b580      	push	{r7, lr}
 8001d48:	b082      	sub	sp, #8
 8001d4a:	af00      	add	r7, sp, #0
 8001d4c:	6078      	str	r0, [r7, #4]
    writeBit(devAddr, MPU6050_RA_USER_CTRL, MPU6050_USERCTRL_I2C_MST_RESET_BIT, true);
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	7998      	ldrb	r0, [r3, #6]
 8001d52:	2301      	movs	r3, #1
 8001d54:	2201      	movs	r2, #1
 8001d56:	216a      	movs	r1, #106	; 0x6a
 8001d58:	f7ff fcfc 	bl	8001754 <_Z8writeBithhhh>
}
 8001d5c:	bf00      	nop
 8001d5e:	3708      	adds	r7, #8
 8001d60:	46bd      	mov	sp, r7
 8001d62:	bd80      	pop	{r7, pc}

08001d64 <_ZN7MPU60505resetEv>:
/** Trigger a full device reset.
 * A small delay of ~50ms may be desirable after triggering a reset.
 * @see MPU6050_RA_PWR_MGMT_1
 * @see MPU6050_PWR1_DEVICE_RESET_BIT
 */
void MPU6050::reset() {
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b082      	sub	sp, #8
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
    writeBit(devAddr, MPU6050_RA_PWR_MGMT_1, MPU6050_PWR1_DEVICE_RESET_BIT, true);
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	7998      	ldrb	r0, [r3, #6]
 8001d70:	2301      	movs	r3, #1
 8001d72:	2207      	movs	r2, #7
 8001d74:	216b      	movs	r1, #107	; 0x6b
 8001d76:	f7ff fced 	bl	8001754 <_Z8writeBithhhh>
}
 8001d7a:	bf00      	nop
 8001d7c:	3708      	adds	r7, #8
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	bd80      	pop	{r7, pc}

08001d82 <_ZN7MPU605015setSleepEnabledEb>:
 * @param enabled New sleep mode enabled status
 * @see getSleepEnabled()
 * @see MPU6050_RA_PWR_MGMT_1
 * @see MPU6050_PWR1_SLEEP_BIT
 */
void MPU6050::setSleepEnabled(bool enabled) {
 8001d82:	b580      	push	{r7, lr}
 8001d84:	b082      	sub	sp, #8
 8001d86:	af00      	add	r7, sp, #0
 8001d88:	6078      	str	r0, [r7, #4]
 8001d8a:	460b      	mov	r3, r1
 8001d8c:	70fb      	strb	r3, [r7, #3]
    writeBit(devAddr, MPU6050_RA_PWR_MGMT_1, MPU6050_PWR1_SLEEP_BIT, enabled);
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	7998      	ldrb	r0, [r3, #6]
 8001d92:	78fb      	ldrb	r3, [r7, #3]
 8001d94:	2206      	movs	r2, #6
 8001d96:	216b      	movs	r1, #107	; 0x6b
 8001d98:	f7ff fcdc 	bl	8001754 <_Z8writeBithhhh>
}
 8001d9c:	bf00      	nop
 8001d9e:	3708      	adds	r7, #8
 8001da0:	46bd      	mov	sp, r7
 8001da2:	bd80      	pop	{r7, pc}

08001da4 <_ZN7MPU605014setClockSourceEh>:
 * @see getClockSource()
 * @see MPU6050_RA_PWR_MGMT_1
 * @see MPU6050_PWR1_CLKSEL_BIT
 * @see MPU6050_PWR1_CLKSEL_LENGTH
 */
void MPU6050::setClockSource(uint8_t source) {
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b084      	sub	sp, #16
 8001da8:	af02      	add	r7, sp, #8
 8001daa:	6078      	str	r0, [r7, #4]
 8001dac:	460b      	mov	r3, r1
 8001dae:	70fb      	strb	r3, [r7, #3]
    writeBits(devAddr, MPU6050_RA_PWR_MGMT_1, MPU6050_PWR1_CLKSEL_BIT, MPU6050_PWR1_CLKSEL_LENGTH, source);
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	7998      	ldrb	r0, [r3, #6]
 8001db4:	78fb      	ldrb	r3, [r7, #3]
 8001db6:	9300      	str	r3, [sp, #0]
 8001db8:	2303      	movs	r3, #3
 8001dba:	2202      	movs	r2, #2
 8001dbc:	216b      	movs	r1, #107	; 0x6b
 8001dbe:	f7ff fd45 	bl	800184c <_Z9writeBitshhhhh>
}
 8001dc2:	bf00      	nop
 8001dc4:	3708      	adds	r7, #8
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	bd80      	pop	{r7, pc}

08001dca <_ZN7MPU605012getFIFOCountEv>:
 * number is in turn the number of bytes that can be read from the FIFO buffer
 * and it is directly proportional to the number of samples available given the
 * set of sensor data bound to be stored in the FIFO (register 35 and 36).
 * @return Current FIFO buffer size
 */
uint16_t MPU6050::getFIFOCount() {
 8001dca:	b580      	push	{r7, lr}
 8001dcc:	b082      	sub	sp, #8
 8001dce:	af00      	add	r7, sp, #0
 8001dd0:	6078      	str	r0, [r7, #4]
    readBytes(devAddr, MPU6050_RA_FIFO_COUNTH, 2, buffer);
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	7998      	ldrb	r0, [r3, #6]
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	3307      	adds	r3, #7
 8001dda:	2202      	movs	r2, #2
 8001ddc:	2172      	movs	r1, #114	; 0x72
 8001dde:	f7ff fc43 	bl	8001668 <_Z9readByteshhhPh>
    return (((uint16_t)buffer[0]) << 8) | buffer[1];
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	79db      	ldrb	r3, [r3, #7]
 8001de6:	021b      	lsls	r3, r3, #8
 8001de8:	b21a      	sxth	r2, r3
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	7a1b      	ldrb	r3, [r3, #8]
 8001dee:	b21b      	sxth	r3, r3
 8001df0:	4313      	orrs	r3, r2
 8001df2:	b21b      	sxth	r3, r3
 8001df4:	b29b      	uxth	r3, r3
}
 8001df6:	4618      	mov	r0, r3
 8001df8:	3708      	adds	r7, #8
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	bd80      	pop	{r7, pc}

08001dfe <_ZN7MPU605012getFIFOBytesEPhh>:
 */
uint8_t MPU6050::getFIFOByte() {
    readByte(devAddr, MPU6050_RA_FIFO_R_W, buffer);
    return buffer[0];
}
void MPU6050::getFIFOBytes(uint8_t *data, uint8_t length) {
 8001dfe:	b580      	push	{r7, lr}
 8001e00:	b084      	sub	sp, #16
 8001e02:	af00      	add	r7, sp, #0
 8001e04:	60f8      	str	r0, [r7, #12]
 8001e06:	60b9      	str	r1, [r7, #8]
 8001e08:	4613      	mov	r3, r2
 8001e0a:	71fb      	strb	r3, [r7, #7]
    if(length > 0){
 8001e0c:	79fb      	ldrb	r3, [r7, #7]
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d007      	beq.n	8001e22 <_ZN7MPU605012getFIFOBytesEPhh+0x24>
        readBytes(devAddr, MPU6050_RA_FIFO_R_W, length, data);
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	7998      	ldrb	r0, [r3, #6]
 8001e16:	79fa      	ldrb	r2, [r7, #7]
 8001e18:	68bb      	ldr	r3, [r7, #8]
 8001e1a:	2174      	movs	r1, #116	; 0x74
 8001e1c:	f7ff fc24 	bl	8001668 <_Z9readByteshhhPh>
    } else {
    	*data = 0;
    }
}
 8001e20:	e002      	b.n	8001e28 <_ZN7MPU605012getFIFOBytesEPhh+0x2a>
    	*data = 0;
 8001e22:	68bb      	ldr	r3, [r7, #8]
 8001e24:	2200      	movs	r2, #0
 8001e26:	701a      	strb	r2, [r3, #0]
}
 8001e28:	bf00      	nop
 8001e2a:	3710      	adds	r7, #16
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	bd80      	pop	{r7, pc}

08001e30 <_ZN7MPU605015setOTPBankValidEb>:

uint8_t MPU6050::getOTPBankValid() {
    readBit(devAddr, MPU6050_RA_XG_OFFS_TC, MPU6050_TC_OTP_BNK_VLD_BIT, buffer);
    return buffer[0];
}
void MPU6050::setOTPBankValid(bool enabled) {
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b082      	sub	sp, #8
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
 8001e38:	460b      	mov	r3, r1
 8001e3a:	70fb      	strb	r3, [r7, #3]
    writeBit(devAddr, MPU6050_RA_XG_OFFS_TC, MPU6050_TC_OTP_BNK_VLD_BIT, enabled);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	7998      	ldrb	r0, [r3, #6]
 8001e40:	78fb      	ldrb	r3, [r7, #3]
 8001e42:	2200      	movs	r2, #0
 8001e44:	2100      	movs	r1, #0
 8001e46:	f7ff fc85 	bl	8001754 <_Z8writeBithhhh>
}
 8001e4a:	bf00      	nop
 8001e4c:	3708      	adds	r7, #8
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	bd80      	pop	{r7, pc}

08001e52 <_ZN7MPU605016getXGyroOffsetTCEv>:
int8_t MPU6050::getXGyroOffsetTC() {
 8001e52:	b580      	push	{r7, lr}
 8001e54:	b084      	sub	sp, #16
 8001e56:	af02      	add	r7, sp, #8
 8001e58:	6078      	str	r0, [r7, #4]
    readBits(devAddr, MPU6050_RA_XG_OFFS_TC, MPU6050_TC_OFFSET_BIT, MPU6050_TC_OFFSET_LENGTH, buffer);
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	7998      	ldrb	r0, [r3, #6]
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	3307      	adds	r3, #7
 8001e62:	9300      	str	r3, [sp, #0]
 8001e64:	2306      	movs	r3, #6
 8001e66:	2206      	movs	r2, #6
 8001e68:	2100      	movs	r1, #0
 8001e6a:	f7ff fb65 	bl	8001538 <_Z8readBitshhhhPh>
    return buffer[0];
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	79db      	ldrb	r3, [r3, #7]
 8001e72:	b25b      	sxtb	r3, r3
}
 8001e74:	4618      	mov	r0, r3
 8001e76:	3708      	adds	r7, #8
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	bd80      	pop	{r7, pc}

08001e7c <_ZN7MPU605016setXGyroOffsetTCEa>:
void MPU6050::setXGyroOffsetTC(int8_t offset) {
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b084      	sub	sp, #16
 8001e80:	af02      	add	r7, sp, #8
 8001e82:	6078      	str	r0, [r7, #4]
 8001e84:	460b      	mov	r3, r1
 8001e86:	70fb      	strb	r3, [r7, #3]
    writeBits(devAddr, MPU6050_RA_XG_OFFS_TC, MPU6050_TC_OFFSET_BIT, MPU6050_TC_OFFSET_LENGTH, offset);
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	7998      	ldrb	r0, [r3, #6]
 8001e8c:	78fb      	ldrb	r3, [r7, #3]
 8001e8e:	9300      	str	r3, [sp, #0]
 8001e90:	2306      	movs	r3, #6
 8001e92:	2206      	movs	r2, #6
 8001e94:	2100      	movs	r1, #0
 8001e96:	f7ff fcd9 	bl	800184c <_Z9writeBitshhhhh>
}
 8001e9a:	bf00      	nop
 8001e9c:	3708      	adds	r7, #8
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	bd80      	pop	{r7, pc}

08001ea2 <_ZN7MPU605016getYGyroOffsetTCEv>:

// YG_OFFS_TC register

int8_t MPU6050::getYGyroOffsetTC() {
 8001ea2:	b580      	push	{r7, lr}
 8001ea4:	b084      	sub	sp, #16
 8001ea6:	af02      	add	r7, sp, #8
 8001ea8:	6078      	str	r0, [r7, #4]
    readBits(devAddr, MPU6050_RA_YG_OFFS_TC, MPU6050_TC_OFFSET_BIT, MPU6050_TC_OFFSET_LENGTH, buffer);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	7998      	ldrb	r0, [r3, #6]
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	3307      	adds	r3, #7
 8001eb2:	9300      	str	r3, [sp, #0]
 8001eb4:	2306      	movs	r3, #6
 8001eb6:	2206      	movs	r2, #6
 8001eb8:	2101      	movs	r1, #1
 8001eba:	f7ff fb3d 	bl	8001538 <_Z8readBitshhhhPh>
    return buffer[0];
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	79db      	ldrb	r3, [r3, #7]
 8001ec2:	b25b      	sxtb	r3, r3
}
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	3708      	adds	r7, #8
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	bd80      	pop	{r7, pc}

08001ecc <_ZN7MPU605016setYGyroOffsetTCEa>:
void MPU6050::setYGyroOffsetTC(int8_t offset) {
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b084      	sub	sp, #16
 8001ed0:	af02      	add	r7, sp, #8
 8001ed2:	6078      	str	r0, [r7, #4]
 8001ed4:	460b      	mov	r3, r1
 8001ed6:	70fb      	strb	r3, [r7, #3]
    writeBits(devAddr, MPU6050_RA_YG_OFFS_TC, MPU6050_TC_OFFSET_BIT, MPU6050_TC_OFFSET_LENGTH, offset);
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	7998      	ldrb	r0, [r3, #6]
 8001edc:	78fb      	ldrb	r3, [r7, #3]
 8001ede:	9300      	str	r3, [sp, #0]
 8001ee0:	2306      	movs	r3, #6
 8001ee2:	2206      	movs	r2, #6
 8001ee4:	2101      	movs	r1, #1
 8001ee6:	f7ff fcb1 	bl	800184c <_Z9writeBitshhhhh>
}
 8001eea:	bf00      	nop
 8001eec:	3708      	adds	r7, #8
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	bd80      	pop	{r7, pc}

08001ef2 <_ZN7MPU605016getZGyroOffsetTCEv>:

// ZG_OFFS_TC register

int8_t MPU6050::getZGyroOffsetTC() {
 8001ef2:	b580      	push	{r7, lr}
 8001ef4:	b084      	sub	sp, #16
 8001ef6:	af02      	add	r7, sp, #8
 8001ef8:	6078      	str	r0, [r7, #4]
    readBits(devAddr, MPU6050_RA_ZG_OFFS_TC, MPU6050_TC_OFFSET_BIT, MPU6050_TC_OFFSET_LENGTH, buffer);
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	7998      	ldrb	r0, [r3, #6]
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	3307      	adds	r3, #7
 8001f02:	9300      	str	r3, [sp, #0]
 8001f04:	2306      	movs	r3, #6
 8001f06:	2206      	movs	r2, #6
 8001f08:	2102      	movs	r1, #2
 8001f0a:	f7ff fb15 	bl	8001538 <_Z8readBitshhhhPh>
    return buffer[0];
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	79db      	ldrb	r3, [r3, #7]
 8001f12:	b25b      	sxtb	r3, r3
}
 8001f14:	4618      	mov	r0, r3
 8001f16:	3708      	adds	r7, #8
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	bd80      	pop	{r7, pc}

08001f1c <_ZN7MPU605016setZGyroOffsetTCEa>:
void MPU6050::setZGyroOffsetTC(int8_t offset) {
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b084      	sub	sp, #16
 8001f20:	af02      	add	r7, sp, #8
 8001f22:	6078      	str	r0, [r7, #4]
 8001f24:	460b      	mov	r3, r1
 8001f26:	70fb      	strb	r3, [r7, #3]
    writeBits(devAddr, MPU6050_RA_ZG_OFFS_TC, MPU6050_TC_OFFSET_BIT, MPU6050_TC_OFFSET_LENGTH, offset);
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	7998      	ldrb	r0, [r3, #6]
 8001f2c:	78fb      	ldrb	r3, [r7, #3]
 8001f2e:	9300      	str	r3, [sp, #0]
 8001f30:	2306      	movs	r3, #6
 8001f32:	2206      	movs	r2, #6
 8001f34:	2102      	movs	r1, #2
 8001f36:	f7ff fc89 	bl	800184c <_Z9writeBitshhhhh>
}
 8001f3a:	bf00      	nop
 8001f3c:	3708      	adds	r7, #8
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	bd80      	pop	{r7, pc}

08001f42 <_ZN7MPU605015setXAccelOffsetEs>:

int16_t MPU6050::getXAccelOffset() {
    readBytes(devAddr, MPU6050_RA_XA_OFFS_H, 2, buffer);
    return (((int16_t)buffer[0]) << 8) | buffer[1];
}
void MPU6050::setXAccelOffset(int16_t offset) {
 8001f42:	b580      	push	{r7, lr}
 8001f44:	b082      	sub	sp, #8
 8001f46:	af00      	add	r7, sp, #0
 8001f48:	6078      	str	r0, [r7, #4]
 8001f4a:	460b      	mov	r3, r1
 8001f4c:	807b      	strh	r3, [r7, #2]
    writeWord(devAddr, MPU6050_RA_XA_OFFS_H, offset);
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	799b      	ldrb	r3, [r3, #6]
 8001f52:	887a      	ldrh	r2, [r7, #2]
 8001f54:	2106      	movs	r1, #6
 8001f56:	4618      	mov	r0, r3
 8001f58:	f7ff fd3c 	bl	80019d4 <_Z9writeWordhht>
}
 8001f5c:	bf00      	nop
 8001f5e:	3708      	adds	r7, #8
 8001f60:	46bd      	mov	sp, r7
 8001f62:	bd80      	pop	{r7, pc}

08001f64 <_ZN7MPU605015setYAccelOffsetEs>:

int16_t MPU6050::getYAccelOffset() {
    readBytes(devAddr, MPU6050_RA_YA_OFFS_H, 2, buffer);
    return (((int16_t)buffer[0]) << 8) | buffer[1];
}
void MPU6050::setYAccelOffset(int16_t offset) {
 8001f64:	b580      	push	{r7, lr}
 8001f66:	b082      	sub	sp, #8
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
 8001f6c:	460b      	mov	r3, r1
 8001f6e:	807b      	strh	r3, [r7, #2]
    writeWord(devAddr, MPU6050_RA_YA_OFFS_H, offset);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	799b      	ldrb	r3, [r3, #6]
 8001f74:	887a      	ldrh	r2, [r7, #2]
 8001f76:	2108      	movs	r1, #8
 8001f78:	4618      	mov	r0, r3
 8001f7a:	f7ff fd2b 	bl	80019d4 <_Z9writeWordhht>
}
 8001f7e:	bf00      	nop
 8001f80:	3708      	adds	r7, #8
 8001f82:	46bd      	mov	sp, r7
 8001f84:	bd80      	pop	{r7, pc}

08001f86 <_ZN7MPU605015setZAccelOffsetEs>:

int16_t MPU6050::getZAccelOffset() {
    readBytes(devAddr, MPU6050_RA_ZA_OFFS_H, 2, buffer);
    return (((int16_t)buffer[0]) << 8) | buffer[1];
}
void MPU6050::setZAccelOffset(int16_t offset) {
 8001f86:	b580      	push	{r7, lr}
 8001f88:	b082      	sub	sp, #8
 8001f8a:	af00      	add	r7, sp, #0
 8001f8c:	6078      	str	r0, [r7, #4]
 8001f8e:	460b      	mov	r3, r1
 8001f90:	807b      	strh	r3, [r7, #2]
    writeWord(devAddr, MPU6050_RA_ZA_OFFS_H, offset);
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	799b      	ldrb	r3, [r3, #6]
 8001f96:	887a      	ldrh	r2, [r7, #2]
 8001f98:	210a      	movs	r1, #10
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	f7ff fd1a 	bl	80019d4 <_Z9writeWordhht>
}
 8001fa0:	bf00      	nop
 8001fa2:	3708      	adds	r7, #8
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	bd80      	pop	{r7, pc}

08001fa8 <_ZN7MPU605014setXGyroOffsetEs>:

int16_t MPU6050::getXGyroOffset() {
    readBytes(devAddr, MPU6050_RA_XG_OFFS_USRH, 2, buffer);
    return (((int16_t)buffer[0]) << 8) | buffer[1];
}
void MPU6050::setXGyroOffset(int16_t offset) {
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b082      	sub	sp, #8
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
 8001fb0:	460b      	mov	r3, r1
 8001fb2:	807b      	strh	r3, [r7, #2]
    writeWord(devAddr, MPU6050_RA_XG_OFFS_USRH, offset);
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	799b      	ldrb	r3, [r3, #6]
 8001fb8:	887a      	ldrh	r2, [r7, #2]
 8001fba:	2113      	movs	r1, #19
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	f7ff fd09 	bl	80019d4 <_Z9writeWordhht>
}
 8001fc2:	bf00      	nop
 8001fc4:	3708      	adds	r7, #8
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	bd80      	pop	{r7, pc}

08001fca <_ZN7MPU605014setYGyroOffsetEs>:

int16_t MPU6050::getYGyroOffset() {
    readBytes(devAddr, MPU6050_RA_YG_OFFS_USRH, 2, buffer);
    return (((int16_t)buffer[0]) << 8) | buffer[1];
}
void MPU6050::setYGyroOffset(int16_t offset) {
 8001fca:	b580      	push	{r7, lr}
 8001fcc:	b082      	sub	sp, #8
 8001fce:	af00      	add	r7, sp, #0
 8001fd0:	6078      	str	r0, [r7, #4]
 8001fd2:	460b      	mov	r3, r1
 8001fd4:	807b      	strh	r3, [r7, #2]
    writeWord(devAddr, MPU6050_RA_YG_OFFS_USRH, offset);
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	799b      	ldrb	r3, [r3, #6]
 8001fda:	887a      	ldrh	r2, [r7, #2]
 8001fdc:	2115      	movs	r1, #21
 8001fde:	4618      	mov	r0, r3
 8001fe0:	f7ff fcf8 	bl	80019d4 <_Z9writeWordhht>
}
 8001fe4:	bf00      	nop
 8001fe6:	3708      	adds	r7, #8
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	bd80      	pop	{r7, pc}

08001fec <_ZN7MPU605014setZGyroOffsetEs>:

int16_t MPU6050::getZGyroOffset() {
    readBytes(devAddr, MPU6050_RA_ZG_OFFS_USRH, 2, buffer);
    return (((int16_t)buffer[0]) << 8) | buffer[1];
}
void MPU6050::setZGyroOffset(int16_t offset) {
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b082      	sub	sp, #8
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
 8001ff4:	460b      	mov	r3, r1
 8001ff6:	807b      	strh	r3, [r7, #2]
    writeWord(devAddr, MPU6050_RA_ZG_OFFS_USRH, offset);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	799b      	ldrb	r3, [r3, #6]
 8001ffc:	887a      	ldrh	r2, [r7, #2]
 8001ffe:	2117      	movs	r1, #23
 8002000:	4618      	mov	r0, r3
 8002002:	f7ff fce7 	bl	80019d4 <_Z9writeWordhht>
}
 8002006:	bf00      	nop
 8002008:	3708      	adds	r7, #8
 800200a:	46bd      	mov	sp, r7
 800200c:	bd80      	pop	{r7, pc}

0800200e <_ZN7MPU605013setDMPEnabledEb>:

bool MPU6050::getDMPEnabled() {
    readBit(devAddr, MPU6050_RA_USER_CTRL, MPU6050_USERCTRL_DMP_EN_BIT, buffer);
    return buffer[0];
}
void MPU6050::setDMPEnabled(bool enabled) {
 800200e:	b580      	push	{r7, lr}
 8002010:	b082      	sub	sp, #8
 8002012:	af00      	add	r7, sp, #0
 8002014:	6078      	str	r0, [r7, #4]
 8002016:	460b      	mov	r3, r1
 8002018:	70fb      	strb	r3, [r7, #3]
    writeBit(devAddr, MPU6050_RA_USER_CTRL, MPU6050_USERCTRL_DMP_EN_BIT, enabled);
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	7998      	ldrb	r0, [r3, #6]
 800201e:	78fb      	ldrb	r3, [r7, #3]
 8002020:	2207      	movs	r2, #7
 8002022:	216a      	movs	r1, #106	; 0x6a
 8002024:	f7ff fb96 	bl	8001754 <_Z8writeBithhhh>
}
 8002028:	bf00      	nop
 800202a:	3708      	adds	r7, #8
 800202c:	46bd      	mov	sp, r7
 800202e:	bd80      	pop	{r7, pc}

08002030 <_ZN7MPU60508resetDMPEv>:
void MPU6050::resetDMP() {
 8002030:	b580      	push	{r7, lr}
 8002032:	b082      	sub	sp, #8
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
    writeBit(devAddr, MPU6050_RA_USER_CTRL, MPU6050_USERCTRL_DMP_RESET_BIT, true);
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	7998      	ldrb	r0, [r3, #6]
 800203c:	2301      	movs	r3, #1
 800203e:	2203      	movs	r2, #3
 8002040:	216a      	movs	r1, #106	; 0x6a
 8002042:	f7ff fb87 	bl	8001754 <_Z8writeBithhhh>
}
 8002046:	bf00      	nop
 8002048:	3708      	adds	r7, #8
 800204a:	46bd      	mov	sp, r7
 800204c:	bd80      	pop	{r7, pc}

0800204e <_ZN7MPU605013setMemoryBankEhbb>:

// BANK_SEL register

void MPU6050::setMemoryBank(uint8_t bank, bool prefetchEnabled, bool userBank) {
 800204e:	b580      	push	{r7, lr}
 8002050:	b082      	sub	sp, #8
 8002052:	af00      	add	r7, sp, #0
 8002054:	6078      	str	r0, [r7, #4]
 8002056:	4608      	mov	r0, r1
 8002058:	4611      	mov	r1, r2
 800205a:	461a      	mov	r2, r3
 800205c:	4603      	mov	r3, r0
 800205e:	70fb      	strb	r3, [r7, #3]
 8002060:	460b      	mov	r3, r1
 8002062:	70bb      	strb	r3, [r7, #2]
 8002064:	4613      	mov	r3, r2
 8002066:	707b      	strb	r3, [r7, #1]
    bank &= 0x1F;
 8002068:	78fb      	ldrb	r3, [r7, #3]
 800206a:	f003 031f 	and.w	r3, r3, #31
 800206e:	70fb      	strb	r3, [r7, #3]
    if (userBank) bank |= 0x20;
 8002070:	787b      	ldrb	r3, [r7, #1]
 8002072:	2b00      	cmp	r3, #0
 8002074:	d003      	beq.n	800207e <_ZN7MPU605013setMemoryBankEhbb+0x30>
 8002076:	78fb      	ldrb	r3, [r7, #3]
 8002078:	f043 0320 	orr.w	r3, r3, #32
 800207c:	70fb      	strb	r3, [r7, #3]
    if (prefetchEnabled) bank |= 0x40;
 800207e:	78bb      	ldrb	r3, [r7, #2]
 8002080:	2b00      	cmp	r3, #0
 8002082:	d003      	beq.n	800208c <_ZN7MPU605013setMemoryBankEhbb+0x3e>
 8002084:	78fb      	ldrb	r3, [r7, #3]
 8002086:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800208a:	70fb      	strb	r3, [r7, #3]
    writeByte(devAddr, MPU6050_RA_BANK_SEL, bank);
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	799b      	ldrb	r3, [r3, #6]
 8002090:	78fa      	ldrb	r2, [r7, #3]
 8002092:	216d      	movs	r1, #109	; 0x6d
 8002094:	4618      	mov	r0, r3
 8002096:	f7ff fc65 	bl	8001964 <_Z9writeBytehhh>
}
 800209a:	bf00      	nop
 800209c:	3708      	adds	r7, #8
 800209e:	46bd      	mov	sp, r7
 80020a0:	bd80      	pop	{r7, pc}

080020a2 <_ZN7MPU605021setMemoryStartAddressEh>:

// MEM_START_ADDR register

void MPU6050::setMemoryStartAddress(uint8_t address) {
 80020a2:	b580      	push	{r7, lr}
 80020a4:	b082      	sub	sp, #8
 80020a6:	af00      	add	r7, sp, #0
 80020a8:	6078      	str	r0, [r7, #4]
 80020aa:	460b      	mov	r3, r1
 80020ac:	70fb      	strb	r3, [r7, #3]
    writeByte(devAddr, MPU6050_RA_MEM_START_ADDR, address);
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	799b      	ldrb	r3, [r3, #6]
 80020b2:	78fa      	ldrb	r2, [r7, #3]
 80020b4:	216e      	movs	r1, #110	; 0x6e
 80020b6:	4618      	mov	r0, r3
 80020b8:	f7ff fc54 	bl	8001964 <_Z9writeBytehhh>
}
 80020bc:	bf00      	nop
 80020be:	3708      	adds	r7, #8
 80020c0:	46bd      	mov	sp, r7
 80020c2:	bd80      	pop	{r7, pc}

080020c4 <_ZN7MPU605015readMemoryBlockEPhthh>:
    return buffer[0];
}
void MPU6050::writeMemoryByte(uint8_t data) {
    writeByte(devAddr, MPU6050_RA_MEM_R_W, data);
}
void MPU6050::readMemoryBlock(uint8_t *data, uint16_t dataSize, uint8_t bank, uint8_t address) {
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b086      	sub	sp, #24
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	60f8      	str	r0, [r7, #12]
 80020cc:	60b9      	str	r1, [r7, #8]
 80020ce:	4611      	mov	r1, r2
 80020d0:	461a      	mov	r2, r3
 80020d2:	460b      	mov	r3, r1
 80020d4:	80fb      	strh	r3, [r7, #6]
 80020d6:	4613      	mov	r3, r2
 80020d8:	717b      	strb	r3, [r7, #5]
    setMemoryBank(bank);
 80020da:	7979      	ldrb	r1, [r7, #5]
 80020dc:	2300      	movs	r3, #0
 80020de:	2200      	movs	r2, #0
 80020e0:	68f8      	ldr	r0, [r7, #12]
 80020e2:	f7ff ffb4 	bl	800204e <_ZN7MPU605013setMemoryBankEhbb>
    setMemoryStartAddress(address);
 80020e6:	f897 3020 	ldrb.w	r3, [r7, #32]
 80020ea:	4619      	mov	r1, r3
 80020ec:	68f8      	ldr	r0, [r7, #12]
 80020ee:	f7ff ffd8 	bl	80020a2 <_ZN7MPU605021setMemoryStartAddressEh>
    uint8_t chunkSize;
    for (uint16_t i = 0; i < dataSize;) {
 80020f2:	2300      	movs	r3, #0
 80020f4:	82bb      	strh	r3, [r7, #20]
 80020f6:	8aba      	ldrh	r2, [r7, #20]
 80020f8:	88fb      	ldrh	r3, [r7, #6]
 80020fa:	429a      	cmp	r2, r3
 80020fc:	d244      	bcs.n	8002188 <_ZN7MPU605015readMemoryBlockEPhthh+0xc4>
        // determine correct chunk size according to bank position and data size
        chunkSize = MPU6050_DMP_MEMORY_CHUNK_SIZE;
 80020fe:	2310      	movs	r3, #16
 8002100:	75fb      	strb	r3, [r7, #23]

        // make sure we don't go past the data size
        if (i + chunkSize > dataSize) chunkSize = dataSize - i;
 8002102:	8aba      	ldrh	r2, [r7, #20]
 8002104:	7dfb      	ldrb	r3, [r7, #23]
 8002106:	441a      	add	r2, r3
 8002108:	88fb      	ldrh	r3, [r7, #6]
 800210a:	429a      	cmp	r2, r3
 800210c:	dd05      	ble.n	800211a <_ZN7MPU605015readMemoryBlockEPhthh+0x56>
 800210e:	88fb      	ldrh	r3, [r7, #6]
 8002110:	b2da      	uxtb	r2, r3
 8002112:	8abb      	ldrh	r3, [r7, #20]
 8002114:	b2db      	uxtb	r3, r3
 8002116:	1ad3      	subs	r3, r2, r3
 8002118:	75fb      	strb	r3, [r7, #23]

        // make sure this chunk doesn't go past the bank boundary (256 bytes)
        if (chunkSize > 256 - address) chunkSize = 256 - address;
 800211a:	7dfa      	ldrb	r2, [r7, #23]
 800211c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002120:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8002124:	429a      	cmp	r2, r3
 8002126:	dd03      	ble.n	8002130 <_ZN7MPU605015readMemoryBlockEPhthh+0x6c>
 8002128:	f897 3020 	ldrb.w	r3, [r7, #32]
 800212c:	425b      	negs	r3, r3
 800212e:	75fb      	strb	r3, [r7, #23]

        // read the chunk of data as specified
        readBytes(devAddr, MPU6050_RA_MEM_R_W, chunkSize, data + i);
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	7998      	ldrb	r0, [r3, #6]
 8002134:	8abb      	ldrh	r3, [r7, #20]
 8002136:	68ba      	ldr	r2, [r7, #8]
 8002138:	4413      	add	r3, r2
 800213a:	7dfa      	ldrb	r2, [r7, #23]
 800213c:	216f      	movs	r1, #111	; 0x6f
 800213e:	f7ff fa93 	bl	8001668 <_Z9readByteshhhPh>
        
        // increase byte index by [chunkSize]
        i += chunkSize;
 8002142:	7dfb      	ldrb	r3, [r7, #23]
 8002144:	b29a      	uxth	r2, r3
 8002146:	8abb      	ldrh	r3, [r7, #20]
 8002148:	4413      	add	r3, r2
 800214a:	82bb      	strh	r3, [r7, #20]

        // uint8_t automatically wraps to 0 at 256
        address += chunkSize;
 800214c:	f897 2020 	ldrb.w	r2, [r7, #32]
 8002150:	7dfb      	ldrb	r3, [r7, #23]
 8002152:	4413      	add	r3, r2
 8002154:	f887 3020 	strb.w	r3, [r7, #32]

        // if we aren't done, update bank (if necessary) and address
        if (i < dataSize) {
 8002158:	8aba      	ldrh	r2, [r7, #20]
 800215a:	88fb      	ldrh	r3, [r7, #6]
 800215c:	429a      	cmp	r2, r3
 800215e:	d2ca      	bcs.n	80020f6 <_ZN7MPU605015readMemoryBlockEPhthh+0x32>
            if (address == 0) bank++;
 8002160:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002164:	2b00      	cmp	r3, #0
 8002166:	d102      	bne.n	800216e <_ZN7MPU605015readMemoryBlockEPhthh+0xaa>
 8002168:	797b      	ldrb	r3, [r7, #5]
 800216a:	3301      	adds	r3, #1
 800216c:	717b      	strb	r3, [r7, #5]
            setMemoryBank(bank);
 800216e:	7979      	ldrb	r1, [r7, #5]
 8002170:	2300      	movs	r3, #0
 8002172:	2200      	movs	r2, #0
 8002174:	68f8      	ldr	r0, [r7, #12]
 8002176:	f7ff ff6a 	bl	800204e <_ZN7MPU605013setMemoryBankEhbb>
            setMemoryStartAddress(address);
 800217a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800217e:	4619      	mov	r1, r3
 8002180:	68f8      	ldr	r0, [r7, #12]
 8002182:	f7ff ff8e 	bl	80020a2 <_ZN7MPU605021setMemoryStartAddressEh>
    for (uint16_t i = 0; i < dataSize;) {
 8002186:	e7b6      	b.n	80020f6 <_ZN7MPU605015readMemoryBlockEPhthh+0x32>
        }
    }
}
 8002188:	bf00      	nop
 800218a:	3718      	adds	r7, #24
 800218c:	46bd      	mov	sp, r7
 800218e:	bd80      	pop	{r7, pc}

08002190 <_ZN7MPU605016writeMemoryBlockEPKhthhbb>:
bool MPU6050::writeMemoryBlock(const uint8_t *data, uint16_t dataSize, uint8_t bank, uint8_t address, bool verify, bool useProgMem) {
 8002190:	b580      	push	{r7, lr}
 8002192:	b088      	sub	sp, #32
 8002194:	af00      	add	r7, sp, #0
 8002196:	60f8      	str	r0, [r7, #12]
 8002198:	60b9      	str	r1, [r7, #8]
 800219a:	4611      	mov	r1, r2
 800219c:	461a      	mov	r2, r3
 800219e:	460b      	mov	r3, r1
 80021a0:	80fb      	strh	r3, [r7, #6]
 80021a2:	4613      	mov	r3, r2
 80021a4:	717b      	strb	r3, [r7, #5]
    setMemoryBank(bank);
 80021a6:	7979      	ldrb	r1, [r7, #5]
 80021a8:	2300      	movs	r3, #0
 80021aa:	2200      	movs	r2, #0
 80021ac:	68f8      	ldr	r0, [r7, #12]
 80021ae:	f7ff ff4e 	bl	800204e <_ZN7MPU605013setMemoryBankEhbb>
    setMemoryStartAddress(address);
 80021b2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80021b6:	4619      	mov	r1, r3
 80021b8:	68f8      	ldr	r0, [r7, #12]
 80021ba:	f7ff ff72 	bl	80020a2 <_ZN7MPU605021setMemoryStartAddressEh>
    uint8_t chunkSize;
    uint8_t *verifyBuffer=0;
 80021be:	2300      	movs	r3, #0
 80021c0:	61bb      	str	r3, [r7, #24]
    uint8_t *progBuffer=0;
 80021c2:	2300      	movs	r3, #0
 80021c4:	617b      	str	r3, [r7, #20]
    uint16_t i;
    uint8_t j;
    if (verify) verifyBuffer = (uint8_t *)malloc(MPU6050_DMP_MEMORY_CHUNK_SIZE);
 80021c6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d004      	beq.n	80021d8 <_ZN7MPU605016writeMemoryBlockEPKhthhbb+0x48>
 80021ce:	2010      	movs	r0, #16
 80021d0:	f00b ff8e 	bl	800e0f0 <malloc>
 80021d4:	4603      	mov	r3, r0
 80021d6:	61bb      	str	r3, [r7, #24]
    if (useProgMem) progBuffer = (uint8_t *)malloc(MPU6050_DMP_MEMORY_CHUNK_SIZE);
 80021d8:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d004      	beq.n	80021ea <_ZN7MPU605016writeMemoryBlockEPKhthhbb+0x5a>
 80021e0:	2010      	movs	r0, #16
 80021e2:	f00b ff85 	bl	800e0f0 <malloc>
 80021e6:	4603      	mov	r3, r0
 80021e8:	617b      	str	r3, [r7, #20]
    for (i = 0; i < dataSize;) {
 80021ea:	2300      	movs	r3, #0
 80021ec:	827b      	strh	r3, [r7, #18]
 80021ee:	8a7a      	ldrh	r2, [r7, #18]
 80021f0:	88fb      	ldrh	r3, [r7, #6]
 80021f2:	429a      	cmp	r2, r3
 80021f4:	f080 808e 	bcs.w	8002314 <_ZN7MPU605016writeMemoryBlockEPKhthhbb+0x184>
        // determine correct chunk size according to bank position and data size
        chunkSize = MPU6050_DMP_MEMORY_CHUNK_SIZE;
 80021f8:	2310      	movs	r3, #16
 80021fa:	77fb      	strb	r3, [r7, #31]

        // make sure we don't go past the data size
        if (i + chunkSize > dataSize) chunkSize = dataSize - i;
 80021fc:	8a7a      	ldrh	r2, [r7, #18]
 80021fe:	7ffb      	ldrb	r3, [r7, #31]
 8002200:	441a      	add	r2, r3
 8002202:	88fb      	ldrh	r3, [r7, #6]
 8002204:	429a      	cmp	r2, r3
 8002206:	dd05      	ble.n	8002214 <_ZN7MPU605016writeMemoryBlockEPKhthhbb+0x84>
 8002208:	88fb      	ldrh	r3, [r7, #6]
 800220a:	b2da      	uxtb	r2, r3
 800220c:	8a7b      	ldrh	r3, [r7, #18]
 800220e:	b2db      	uxtb	r3, r3
 8002210:	1ad3      	subs	r3, r2, r3
 8002212:	77fb      	strb	r3, [r7, #31]

        // make sure this chunk doesn't go past the bank boundary (256 bytes)
        if (chunkSize > 256 - address) chunkSize = 256 - address;
 8002214:	7ffa      	ldrb	r2, [r7, #31]
 8002216:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800221a:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 800221e:	429a      	cmp	r2, r3
 8002220:	dd03      	ble.n	800222a <_ZN7MPU605016writeMemoryBlockEPKhthhbb+0x9a>
 8002222:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8002226:	425b      	negs	r3, r3
 8002228:	77fb      	strb	r3, [r7, #31]
        
        if (useProgMem) {
 800222a:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800222e:	2b00      	cmp	r3, #0
 8002230:	d013      	beq.n	800225a <_ZN7MPU605016writeMemoryBlockEPKhthhbb+0xca>
            // write the chunk of data as specified
            for (j = 0; j < chunkSize; j++) progBuffer[j] = pgm_read_byte(data + i + j);
 8002232:	2300      	movs	r3, #0
 8002234:	747b      	strb	r3, [r7, #17]
 8002236:	7c7a      	ldrb	r2, [r7, #17]
 8002238:	7ffb      	ldrb	r3, [r7, #31]
 800223a:	429a      	cmp	r2, r3
 800223c:	d211      	bcs.n	8002262 <_ZN7MPU605016writeMemoryBlockEPKhthhbb+0xd2>
 800223e:	8a7a      	ldrh	r2, [r7, #18]
 8002240:	7c7b      	ldrb	r3, [r7, #17]
 8002242:	4413      	add	r3, r2
 8002244:	68ba      	ldr	r2, [r7, #8]
 8002246:	441a      	add	r2, r3
 8002248:	7c7b      	ldrb	r3, [r7, #17]
 800224a:	6979      	ldr	r1, [r7, #20]
 800224c:	440b      	add	r3, r1
 800224e:	7812      	ldrb	r2, [r2, #0]
 8002250:	701a      	strb	r2, [r3, #0]
 8002252:	7c7b      	ldrb	r3, [r7, #17]
 8002254:	3301      	adds	r3, #1
 8002256:	747b      	strb	r3, [r7, #17]
 8002258:	e7ed      	b.n	8002236 <_ZN7MPU605016writeMemoryBlockEPKhthhbb+0xa6>
        } else {
            // write the chunk of data as specified
            progBuffer = (uint8_t *)data + i;
 800225a:	8a7b      	ldrh	r3, [r7, #18]
 800225c:	68ba      	ldr	r2, [r7, #8]
 800225e:	4413      	add	r3, r2
 8002260:	617b      	str	r3, [r7, #20]
        }

        writeBytes(devAddr, MPU6050_RA_MEM_R_W, chunkSize, progBuffer);
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	7998      	ldrb	r0, [r3, #6]
 8002266:	7ffa      	ldrb	r2, [r7, #31]
 8002268:	697b      	ldr	r3, [r7, #20]
 800226a:	216f      	movs	r1, #111	; 0x6f
 800226c:	f7ff fbee 	bl	8001a4c <_Z10writeByteshhhPh>

        // verify data if needed
        if (verify && verifyBuffer) {
 8002270:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8002274:	2b00      	cmp	r3, #0
 8002276:	d02a      	beq.n	80022ce <_ZN7MPU605016writeMemoryBlockEPKhthhbb+0x13e>
 8002278:	69bb      	ldr	r3, [r7, #24]
 800227a:	2b00      	cmp	r3, #0
 800227c:	d027      	beq.n	80022ce <_ZN7MPU605016writeMemoryBlockEPKhthhbb+0x13e>
            setMemoryBank(bank);
 800227e:	7979      	ldrb	r1, [r7, #5]
 8002280:	2300      	movs	r3, #0
 8002282:	2200      	movs	r2, #0
 8002284:	68f8      	ldr	r0, [r7, #12]
 8002286:	f7ff fee2 	bl	800204e <_ZN7MPU605013setMemoryBankEhbb>
            setMemoryStartAddress(address);
 800228a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800228e:	4619      	mov	r1, r3
 8002290:	68f8      	ldr	r0, [r7, #12]
 8002292:	f7ff ff06 	bl	80020a2 <_ZN7MPU605021setMemoryStartAddressEh>
            readBytes(devAddr, MPU6050_RA_MEM_R_W, chunkSize, verifyBuffer);
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	7998      	ldrb	r0, [r3, #6]
 800229a:	7ffa      	ldrb	r2, [r7, #31]
 800229c:	69bb      	ldr	r3, [r7, #24]
 800229e:	216f      	movs	r1, #111	; 0x6f
 80022a0:	f7ff f9e2 	bl	8001668 <_Z9readByteshhhPh>
            if (memcmp(progBuffer, verifyBuffer, chunkSize) != 0) {
 80022a4:	7ffb      	ldrb	r3, [r7, #31]
 80022a6:	461a      	mov	r2, r3
 80022a8:	69b9      	ldr	r1, [r7, #24]
 80022aa:	6978      	ldr	r0, [r7, #20]
 80022ac:	f00b ff30 	bl	800e110 <memcmp>
 80022b0:	4603      	mov	r3, r0
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d00b      	beq.n	80022ce <_ZN7MPU605016writeMemoryBlockEPKhthhbb+0x13e>
                    Serial.print(" 0x");
                    if (verifyBuffer[i + j] < 16) Serial.print("0");
                    Serial.print(verifyBuffer[i + j], HEX);
                }
                Serial.print("\n");*/
                free(verifyBuffer);
 80022b6:	69b8      	ldr	r0, [r7, #24]
 80022b8:	f00b ff22 	bl	800e100 <free>
                if (useProgMem) free(progBuffer);
 80022bc:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d002      	beq.n	80022ca <_ZN7MPU605016writeMemoryBlockEPKhthhbb+0x13a>
 80022c4:	6978      	ldr	r0, [r7, #20]
 80022c6:	f00b ff1b 	bl	800e100 <free>
                return false; // uh oh.
 80022ca:	2300      	movs	r3, #0
 80022cc:	e031      	b.n	8002332 <_ZN7MPU605016writeMemoryBlockEPKhthhbb+0x1a2>
            }
        }

        // increase byte index by [chunkSize]
        i += chunkSize;
 80022ce:	7ffb      	ldrb	r3, [r7, #31]
 80022d0:	b29a      	uxth	r2, r3
 80022d2:	8a7b      	ldrh	r3, [r7, #18]
 80022d4:	4413      	add	r3, r2
 80022d6:	827b      	strh	r3, [r7, #18]

        // uint8_t automatically wraps to 0 at 256
        address += chunkSize;
 80022d8:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80022dc:	7ffb      	ldrb	r3, [r7, #31]
 80022de:	4413      	add	r3, r2
 80022e0:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28

        // if we aren't done, update bank (if necessary) and address
        if (i < dataSize) {
 80022e4:	8a7a      	ldrh	r2, [r7, #18]
 80022e6:	88fb      	ldrh	r3, [r7, #6]
 80022e8:	429a      	cmp	r2, r3
 80022ea:	d280      	bcs.n	80021ee <_ZN7MPU605016writeMemoryBlockEPKhthhbb+0x5e>
            if (address == 0) bank++;
 80022ec:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d102      	bne.n	80022fa <_ZN7MPU605016writeMemoryBlockEPKhthhbb+0x16a>
 80022f4:	797b      	ldrb	r3, [r7, #5]
 80022f6:	3301      	adds	r3, #1
 80022f8:	717b      	strb	r3, [r7, #5]
            setMemoryBank(bank);
 80022fa:	7979      	ldrb	r1, [r7, #5]
 80022fc:	2300      	movs	r3, #0
 80022fe:	2200      	movs	r2, #0
 8002300:	68f8      	ldr	r0, [r7, #12]
 8002302:	f7ff fea4 	bl	800204e <_ZN7MPU605013setMemoryBankEhbb>
            setMemoryStartAddress(address);
 8002306:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800230a:	4619      	mov	r1, r3
 800230c:	68f8      	ldr	r0, [r7, #12]
 800230e:	f7ff fec8 	bl	80020a2 <_ZN7MPU605021setMemoryStartAddressEh>
    for (i = 0; i < dataSize;) {
 8002312:	e76c      	b.n	80021ee <_ZN7MPU605016writeMemoryBlockEPKhthhbb+0x5e>
        }
    }
    if (verify) free(verifyBuffer);
 8002314:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8002318:	2b00      	cmp	r3, #0
 800231a:	d002      	beq.n	8002322 <_ZN7MPU605016writeMemoryBlockEPKhthhbb+0x192>
 800231c:	69b8      	ldr	r0, [r7, #24]
 800231e:	f00b feef 	bl	800e100 <free>
    if (useProgMem) free(progBuffer);
 8002322:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8002326:	2b00      	cmp	r3, #0
 8002328:	d002      	beq.n	8002330 <_ZN7MPU605016writeMemoryBlockEPKhthhbb+0x1a0>
 800232a:	6978      	ldr	r0, [r7, #20]
 800232c:	f00b fee8 	bl	800e100 <free>
    return true;
 8002330:	2301      	movs	r3, #1
}
 8002332:	4618      	mov	r0, r3
 8002334:	3720      	adds	r7, #32
 8002336:	46bd      	mov	sp, r7
 8002338:	bd80      	pop	{r7, pc}

0800233a <_ZN7MPU605020writeProgMemoryBlockEPKhthhb>:
bool MPU6050::writeProgMemoryBlock(const uint8_t *data, uint16_t dataSize, uint8_t bank, uint8_t address, bool verify) {
 800233a:	b580      	push	{r7, lr}
 800233c:	b088      	sub	sp, #32
 800233e:	af04      	add	r7, sp, #16
 8002340:	60f8      	str	r0, [r7, #12]
 8002342:	60b9      	str	r1, [r7, #8]
 8002344:	4611      	mov	r1, r2
 8002346:	461a      	mov	r2, r3
 8002348:	460b      	mov	r3, r1
 800234a:	80fb      	strh	r3, [r7, #6]
 800234c:	4613      	mov	r3, r2
 800234e:	717b      	strb	r3, [r7, #5]
    return writeMemoryBlock(data, dataSize, bank, address, verify, true);
 8002350:	7979      	ldrb	r1, [r7, #5]
 8002352:	88fa      	ldrh	r2, [r7, #6]
 8002354:	2301      	movs	r3, #1
 8002356:	9302      	str	r3, [sp, #8]
 8002358:	7f3b      	ldrb	r3, [r7, #28]
 800235a:	9301      	str	r3, [sp, #4]
 800235c:	7e3b      	ldrb	r3, [r7, #24]
 800235e:	9300      	str	r3, [sp, #0]
 8002360:	460b      	mov	r3, r1
 8002362:	68b9      	ldr	r1, [r7, #8]
 8002364:	68f8      	ldr	r0, [r7, #12]
 8002366:	f7ff ff13 	bl	8002190 <_ZN7MPU605016writeMemoryBlockEPKhthhbb>
 800236a:	4603      	mov	r3, r0
}
 800236c:	4618      	mov	r0, r3
 800236e:	3710      	adds	r7, #16
 8002370:	46bd      	mov	sp, r7
 8002372:	bd80      	pop	{r7, pc}

08002374 <_ZN7MPU605024writeDMPConfigurationSetEPKhtb>:
bool MPU6050::writeDMPConfigurationSet(const uint8_t *data, uint16_t dataSize, bool useProgMem) {
 8002374:	b580      	push	{r7, lr}
 8002376:	b08c      	sub	sp, #48	; 0x30
 8002378:	af04      	add	r7, sp, #16
 800237a:	60f8      	str	r0, [r7, #12]
 800237c:	60b9      	str	r1, [r7, #8]
 800237e:	4611      	mov	r1, r2
 8002380:	461a      	mov	r2, r3
 8002382:	460b      	mov	r3, r1
 8002384:	80fb      	strh	r3, [r7, #6]
 8002386:	4613      	mov	r3, r2
 8002388:	717b      	strb	r3, [r7, #5]
    uint8_t *progBuffer = 0;
 800238a:	2300      	movs	r3, #0
 800238c:	61fb      	str	r3, [r7, #28]
	uint8_t success, special;
    uint16_t i, j;
    if (useProgMem) {
 800238e:	797b      	ldrb	r3, [r7, #5]
 8002390:	2b00      	cmp	r3, #0
 8002392:	d004      	beq.n	800239e <_ZN7MPU605024writeDMPConfigurationSetEPKhtb+0x2a>
        progBuffer = (uint8_t *)malloc(8); // assume 8-byte blocks, realloc later if necessary
 8002394:	2008      	movs	r0, #8
 8002396:	f00b feab 	bl	800e0f0 <malloc>
 800239a:	4603      	mov	r3, r0
 800239c:	61fb      	str	r3, [r7, #28]
    }

    // config set data is a long string of blocks with the following structure:
    // [bank] [offset] [length] [byte[0], byte[1], ..., byte[length]]
    uint8_t bank, offset, length;
    for (i = 0; i < dataSize;) {
 800239e:	2300      	movs	r3, #0
 80023a0:	833b      	strh	r3, [r7, #24]
 80023a2:	8b3a      	ldrh	r2, [r7, #24]
 80023a4:	88fb      	ldrh	r3, [r7, #6]
 80023a6:	429a      	cmp	r2, r3
 80023a8:	f080 80a1 	bcs.w	80024ee <_ZN7MPU605024writeDMPConfigurationSetEPKhtb+0x17a>
        if (useProgMem) {
 80023ac:	797b      	ldrb	r3, [r7, #5]
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d018      	beq.n	80023e4 <_ZN7MPU605024writeDMPConfigurationSetEPKhtb+0x70>
            bank = pgm_read_byte(data + i++);
 80023b2:	8b3b      	ldrh	r3, [r7, #24]
 80023b4:	1c5a      	adds	r2, r3, #1
 80023b6:	833a      	strh	r2, [r7, #24]
 80023b8:	461a      	mov	r2, r3
 80023ba:	68bb      	ldr	r3, [r7, #8]
 80023bc:	4413      	add	r3, r2
 80023be:	781b      	ldrb	r3, [r3, #0]
 80023c0:	757b      	strb	r3, [r7, #21]
            offset = pgm_read_byte(data + i++);
 80023c2:	8b3b      	ldrh	r3, [r7, #24]
 80023c4:	1c5a      	adds	r2, r3, #1
 80023c6:	833a      	strh	r2, [r7, #24]
 80023c8:	461a      	mov	r2, r3
 80023ca:	68bb      	ldr	r3, [r7, #8]
 80023cc:	4413      	add	r3, r2
 80023ce:	781b      	ldrb	r3, [r3, #0]
 80023d0:	753b      	strb	r3, [r7, #20]
            length = pgm_read_byte(data + i++);
 80023d2:	8b3b      	ldrh	r3, [r7, #24]
 80023d4:	1c5a      	adds	r2, r3, #1
 80023d6:	833a      	strh	r2, [r7, #24]
 80023d8:	461a      	mov	r2, r3
 80023da:	68bb      	ldr	r3, [r7, #8]
 80023dc:	4413      	add	r3, r2
 80023de:	781b      	ldrb	r3, [r3, #0]
 80023e0:	74fb      	strb	r3, [r7, #19]
 80023e2:	e017      	b.n	8002414 <_ZN7MPU605024writeDMPConfigurationSetEPKhtb+0xa0>
        } else {
            bank = data[i++];
 80023e4:	8b3b      	ldrh	r3, [r7, #24]
 80023e6:	1c5a      	adds	r2, r3, #1
 80023e8:	833a      	strh	r2, [r7, #24]
 80023ea:	461a      	mov	r2, r3
 80023ec:	68bb      	ldr	r3, [r7, #8]
 80023ee:	4413      	add	r3, r2
 80023f0:	781b      	ldrb	r3, [r3, #0]
 80023f2:	757b      	strb	r3, [r7, #21]
            offset = data[i++];
 80023f4:	8b3b      	ldrh	r3, [r7, #24]
 80023f6:	1c5a      	adds	r2, r3, #1
 80023f8:	833a      	strh	r2, [r7, #24]
 80023fa:	461a      	mov	r2, r3
 80023fc:	68bb      	ldr	r3, [r7, #8]
 80023fe:	4413      	add	r3, r2
 8002400:	781b      	ldrb	r3, [r3, #0]
 8002402:	753b      	strb	r3, [r7, #20]
            length = data[i++];
 8002404:	8b3b      	ldrh	r3, [r7, #24]
 8002406:	1c5a      	adds	r2, r3, #1
 8002408:	833a      	strh	r2, [r7, #24]
 800240a:	461a      	mov	r2, r3
 800240c:	68bb      	ldr	r3, [r7, #8]
 800240e:	4413      	add	r3, r2
 8002410:	781b      	ldrb	r3, [r3, #0]
 8002412:	74fb      	strb	r3, [r7, #19]
        }

        // write data or perform special action
        if (length > 0) {
 8002414:	7cfb      	ldrb	r3, [r7, #19]
 8002416:	2b00      	cmp	r3, #0
 8002418:	d03a      	beq.n	8002490 <_ZN7MPU605024writeDMPConfigurationSetEPKhtb+0x11c>
            Serial.print(bank);
            Serial.print(", offset ");
            Serial.print(offset);
            Serial.print(", length=");
            Serial.println(length);*/
            if (useProgMem) {
 800241a:	797b      	ldrb	r3, [r7, #5]
 800241c:	2b00      	cmp	r3, #0
 800241e:	d01d      	beq.n	800245c <_ZN7MPU605024writeDMPConfigurationSetEPKhtb+0xe8>
                if (sizeof(progBuffer) < length) progBuffer = (uint8_t *)realloc(progBuffer, length);
 8002420:	7cfb      	ldrb	r3, [r7, #19]
 8002422:	2b04      	cmp	r3, #4
 8002424:	d905      	bls.n	8002432 <_ZN7MPU605024writeDMPConfigurationSetEPKhtb+0xbe>
 8002426:	7cfb      	ldrb	r3, [r7, #19]
 8002428:	4619      	mov	r1, r3
 800242a:	69f8      	ldr	r0, [r7, #28]
 800242c:	f00c fb8c 	bl	800eb48 <realloc>
 8002430:	61f8      	str	r0, [r7, #28]
                for (j = 0; j < length; j++) progBuffer[j] = pgm_read_byte(data + i + j);
 8002432:	2300      	movs	r3, #0
 8002434:	82fb      	strh	r3, [r7, #22]
 8002436:	7cfb      	ldrb	r3, [r7, #19]
 8002438:	b29b      	uxth	r3, r3
 800243a:	8afa      	ldrh	r2, [r7, #22]
 800243c:	429a      	cmp	r2, r3
 800243e:	d211      	bcs.n	8002464 <_ZN7MPU605024writeDMPConfigurationSetEPKhtb+0xf0>
 8002440:	8b3a      	ldrh	r2, [r7, #24]
 8002442:	8afb      	ldrh	r3, [r7, #22]
 8002444:	4413      	add	r3, r2
 8002446:	68ba      	ldr	r2, [r7, #8]
 8002448:	441a      	add	r2, r3
 800244a:	8afb      	ldrh	r3, [r7, #22]
 800244c:	69f9      	ldr	r1, [r7, #28]
 800244e:	440b      	add	r3, r1
 8002450:	7812      	ldrb	r2, [r2, #0]
 8002452:	701a      	strb	r2, [r3, #0]
 8002454:	8afb      	ldrh	r3, [r7, #22]
 8002456:	3301      	adds	r3, #1
 8002458:	82fb      	strh	r3, [r7, #22]
 800245a:	e7ec      	b.n	8002436 <_ZN7MPU605024writeDMPConfigurationSetEPKhtb+0xc2>
            } else {
                progBuffer = (uint8_t *)data + i;
 800245c:	8b3b      	ldrh	r3, [r7, #24]
 800245e:	68ba      	ldr	r2, [r7, #8]
 8002460:	4413      	add	r3, r2
 8002462:	61fb      	str	r3, [r7, #28]
            }
            success = writeMemoryBlock(progBuffer, length, bank, offset, true);
 8002464:	7cfb      	ldrb	r3, [r7, #19]
 8002466:	b29a      	uxth	r2, r3
 8002468:	7d79      	ldrb	r1, [r7, #21]
 800246a:	2300      	movs	r3, #0
 800246c:	9302      	str	r3, [sp, #8]
 800246e:	2301      	movs	r3, #1
 8002470:	9301      	str	r3, [sp, #4]
 8002472:	7d3b      	ldrb	r3, [r7, #20]
 8002474:	9300      	str	r3, [sp, #0]
 8002476:	460b      	mov	r3, r1
 8002478:	69f9      	ldr	r1, [r7, #28]
 800247a:	68f8      	ldr	r0, [r7, #12]
 800247c:	f7ff fe88 	bl	8002190 <_ZN7MPU605016writeMemoryBlockEPKhthhbb>
 8002480:	4603      	mov	r3, r0
 8002482:	76fb      	strb	r3, [r7, #27]
            i += length;
 8002484:	7cfb      	ldrb	r3, [r7, #19]
 8002486:	b29a      	uxth	r2, r3
 8002488:	8b3b      	ldrh	r3, [r7, #24]
 800248a:	4413      	add	r3, r2
 800248c:	833b      	strh	r3, [r7, #24]
 800248e:	e022      	b.n	80024d6 <_ZN7MPU605024writeDMPConfigurationSetEPKhtb+0x162>
            // special instruction
            // NOTE: this kind of behavior (what and when to do certain things)
            // is totally undocumented. This code is in here based on observed
            // behavior only, and exactly why (or even whether) it has to be here
            // is anybody's guess for now.
            if (useProgMem) {
 8002490:	797b      	ldrb	r3, [r7, #5]
 8002492:	2b00      	cmp	r3, #0
 8002494:	d008      	beq.n	80024a8 <_ZN7MPU605024writeDMPConfigurationSetEPKhtb+0x134>
                special = pgm_read_byte(data + i++);
 8002496:	8b3b      	ldrh	r3, [r7, #24]
 8002498:	1c5a      	adds	r2, r3, #1
 800249a:	833a      	strh	r2, [r7, #24]
 800249c:	461a      	mov	r2, r3
 800249e:	68bb      	ldr	r3, [r7, #8]
 80024a0:	4413      	add	r3, r2
 80024a2:	781b      	ldrb	r3, [r3, #0]
 80024a4:	76bb      	strb	r3, [r7, #26]
 80024a6:	e007      	b.n	80024b8 <_ZN7MPU605024writeDMPConfigurationSetEPKhtb+0x144>
            } else {
                special = data[i++];
 80024a8:	8b3b      	ldrh	r3, [r7, #24]
 80024aa:	1c5a      	adds	r2, r3, #1
 80024ac:	833a      	strh	r2, [r7, #24]
 80024ae:	461a      	mov	r2, r3
 80024b0:	68bb      	ldr	r3, [r7, #8]
 80024b2:	4413      	add	r3, r2
 80024b4:	781b      	ldrb	r3, [r3, #0]
 80024b6:	76bb      	strb	r3, [r7, #26]
            }
            /*Serial.print("Special command code ");
            Serial.print(special, HEX);
            Serial.println(" found...");*/
            if (special == 0x01) {
 80024b8:	7ebb      	ldrb	r3, [r7, #26]
 80024ba:	2b01      	cmp	r3, #1
 80024bc:	d109      	bne.n	80024d2 <_ZN7MPU605024writeDMPConfigurationSetEPKhtb+0x15e>
                // enable DMP-related interrupts
                
                //setIntZeroMotionEnabled(true);
                //setIntFIFOBufferOverflowEnabled(true);
                //setIntDMPEnabled(true);
                writeByte(devAddr, MPU6050_RA_INT_ENABLE, 0x32);  // single operation
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	799b      	ldrb	r3, [r3, #6]
 80024c2:	2232      	movs	r2, #50	; 0x32
 80024c4:	2138      	movs	r1, #56	; 0x38
 80024c6:	4618      	mov	r0, r3
 80024c8:	f7ff fa4c 	bl	8001964 <_Z9writeBytehhh>

                success = true;
 80024cc:	2301      	movs	r3, #1
 80024ce:	76fb      	strb	r3, [r7, #27]
 80024d0:	e001      	b.n	80024d6 <_ZN7MPU605024writeDMPConfigurationSetEPKhtb+0x162>
            } else {
                // unknown special command
                success = false;
 80024d2:	2300      	movs	r3, #0
 80024d4:	76fb      	strb	r3, [r7, #27]
            }
        }
        
        if (!success) {
 80024d6:	7efb      	ldrb	r3, [r7, #27]
 80024d8:	2b00      	cmp	r3, #0
 80024da:	f47f af62 	bne.w	80023a2 <_ZN7MPU605024writeDMPConfigurationSetEPKhtb+0x2e>
            if (useProgMem) free(progBuffer);
 80024de:	797b      	ldrb	r3, [r7, #5]
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d002      	beq.n	80024ea <_ZN7MPU605024writeDMPConfigurationSetEPKhtb+0x176>
 80024e4:	69f8      	ldr	r0, [r7, #28]
 80024e6:	f00b fe0b 	bl	800e100 <free>
            return false; // uh oh
 80024ea:	2300      	movs	r3, #0
 80024ec:	e006      	b.n	80024fc <_ZN7MPU605024writeDMPConfigurationSetEPKhtb+0x188>
        }
    }
    if (useProgMem) free(progBuffer);
 80024ee:	797b      	ldrb	r3, [r7, #5]
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d002      	beq.n	80024fa <_ZN7MPU605024writeDMPConfigurationSetEPKhtb+0x186>
 80024f4:	69f8      	ldr	r0, [r7, #28]
 80024f6:	f00b fe03 	bl	800e100 <free>
    return true;
 80024fa:	2301      	movs	r3, #1
}
 80024fc:	4618      	mov	r0, r3
 80024fe:	3720      	adds	r7, #32
 8002500:	46bd      	mov	sp, r7
 8002502:	bd80      	pop	{r7, pc}

08002504 <_ZN7MPU605028writeProgDMPConfigurationSetEPKht>:
bool MPU6050::writeProgDMPConfigurationSet(const uint8_t *data, uint16_t dataSize) {
 8002504:	b580      	push	{r7, lr}
 8002506:	b084      	sub	sp, #16
 8002508:	af00      	add	r7, sp, #0
 800250a:	60f8      	str	r0, [r7, #12]
 800250c:	60b9      	str	r1, [r7, #8]
 800250e:	4613      	mov	r3, r2
 8002510:	80fb      	strh	r3, [r7, #6]
    return writeDMPConfigurationSet(data, dataSize, true);
 8002512:	88fa      	ldrh	r2, [r7, #6]
 8002514:	2301      	movs	r3, #1
 8002516:	68b9      	ldr	r1, [r7, #8]
 8002518:	68f8      	ldr	r0, [r7, #12]
 800251a:	f7ff ff2b 	bl	8002374 <_ZN7MPU605024writeDMPConfigurationSetEPKhtb>
 800251e:	4603      	mov	r3, r0
}
 8002520:	4618      	mov	r0, r3
 8002522:	3710      	adds	r7, #16
 8002524:	46bd      	mov	sp, r7
 8002526:	bd80      	pop	{r7, pc}

08002528 <_ZN7MPU605013setDMPConfig1Eh>:

uint8_t MPU6050::getDMPConfig1() {
    readByte(devAddr, MPU6050_RA_DMP_CFG_1, buffer);
    return buffer[0];
}
void MPU6050::setDMPConfig1(uint8_t config) {
 8002528:	b580      	push	{r7, lr}
 800252a:	b082      	sub	sp, #8
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]
 8002530:	460b      	mov	r3, r1
 8002532:	70fb      	strb	r3, [r7, #3]
    writeByte(devAddr, MPU6050_RA_DMP_CFG_1, config);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	799b      	ldrb	r3, [r3, #6]
 8002538:	78fa      	ldrb	r2, [r7, #3]
 800253a:	2170      	movs	r1, #112	; 0x70
 800253c:	4618      	mov	r0, r3
 800253e:	f7ff fa11 	bl	8001964 <_Z9writeBytehhh>
}
 8002542:	bf00      	nop
 8002544:	3708      	adds	r7, #8
 8002546:	46bd      	mov	sp, r7
 8002548:	bd80      	pop	{r7, pc}

0800254a <_ZN7MPU605013setDMPConfig2Eh>:

uint8_t MPU6050::getDMPConfig2() {
    readByte(devAddr, MPU6050_RA_DMP_CFG_2, buffer);
    return buffer[0];
}
void MPU6050::setDMPConfig2(uint8_t config) {
 800254a:	b580      	push	{r7, lr}
 800254c:	b082      	sub	sp, #8
 800254e:	af00      	add	r7, sp, #0
 8002550:	6078      	str	r0, [r7, #4]
 8002552:	460b      	mov	r3, r1
 8002554:	70fb      	strb	r3, [r7, #3]
    writeByte(devAddr, MPU6050_RA_DMP_CFG_2, config);
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	799b      	ldrb	r3, [r3, #6]
 800255a:	78fa      	ldrb	r2, [r7, #3]
 800255c:	2171      	movs	r1, #113	; 0x71
 800255e:	4618      	mov	r0, r3
 8002560:	f7ff fa00 	bl	8001964 <_Z9writeBytehhh>
}
 8002564:	bf00      	nop
 8002566:	3708      	adds	r7, #8
 8002568:	46bd      	mov	sp, r7
 800256a:	bd80      	pop	{r7, pc}

0800256c <_ZN7MPU605013dmpInitializeEv>:


// 6_AXIS_MOTIONAPPS20
uint8_t MPU6050::dmpInitialize() {
 800256c:	b590      	push	{r4, r7, lr}
 800256e:	b0af      	sub	sp, #188	; 0xbc
 8002570:	af04      	add	r7, sp, #16
 8002572:	6078      	str	r0, [r7, #4]
    // reset device
    //DEBUG_PRINTLN(F("\n\nResetting MPU6050..."));
    reset();
 8002574:	6878      	ldr	r0, [r7, #4]
 8002576:	f7ff fbf5 	bl	8001d64 <_ZN7MPU60505resetEv>
    HAL_Delay(30); // wait after reset
 800257a:	201e      	movs	r0, #30
 800257c:	f002 f846 	bl	800460c <HAL_Delay>
    Serial.println(F("Enabling wake cycle..."));
    setWakeCycleEnabled(true);*/

    // disable sleep mode
    //DEBUG_PRINTLN(F("Disabling sleep mode..."));
    setSleepEnabled(false);
 8002580:	2100      	movs	r1, #0
 8002582:	6878      	ldr	r0, [r7, #4]
 8002584:	f7ff fbfd 	bl	8001d82 <_ZN7MPU605015setSleepEnabledEb>

    // get MPU hardware revision
    //DEBUG_PRINTLN(F("Selecting user bank 16..."));
    setMemoryBank(0x10, true, true);
 8002588:	2301      	movs	r3, #1
 800258a:	2201      	movs	r2, #1
 800258c:	2110      	movs	r1, #16
 800258e:	6878      	ldr	r0, [r7, #4]
 8002590:	f7ff fd5d 	bl	800204e <_ZN7MPU605013setMemoryBankEhbb>
    //DEBUG_PRINTLN(F("Selecting memory byte 6..."));
    setMemoryStartAddress(0x06);
 8002594:	2106      	movs	r1, #6
 8002596:	6878      	ldr	r0, [r7, #4]
 8002598:	f7ff fd83 	bl	80020a2 <_ZN7MPU605021setMemoryStartAddressEh>
    //DEBUG_PRINTLN(F("Checking hardware revision..."));
    //DEBUG_PRINT(F("Revision @ user[16][6] = "));
    //DEBUG_PRINTLNF(readMemoryByte(), HEX);
    //DEBUG_PRINTLN(F("Resetting memory bank selection to 0..."));
    setMemoryBank(0, false, false);
 800259c:	2300      	movs	r3, #0
 800259e:	2200      	movs	r2, #0
 80025a0:	2100      	movs	r1, #0
 80025a2:	6878      	ldr	r0, [r7, #4]
 80025a4:	f7ff fd53 	bl	800204e <_ZN7MPU605013setMemoryBankEhbb>
    //DEBUG_PRINT(F("OTP bank is "));
    //DEBUG_PRINTLN(getOTPBankValid() ? F("valid!") : F("invalid!"));

    // get X/Y/Z gyro offsets
    //DEBUG_PRINTLN(F("Reading gyro offset TC values..."));
    int8_t xgOffsetTC = getXGyroOffsetTC();
 80025a8:	6878      	ldr	r0, [r7, #4]
 80025aa:	f7ff fc52 	bl	8001e52 <_ZN7MPU605016getXGyroOffsetTCEv>
 80025ae:	4603      	mov	r3, r0
 80025b0:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
    int8_t ygOffsetTC = getYGyroOffsetTC();
 80025b4:	6878      	ldr	r0, [r7, #4]
 80025b6:	f7ff fc74 	bl	8001ea2 <_ZN7MPU605016getYGyroOffsetTCEv>
 80025ba:	4603      	mov	r3, r0
 80025bc:	f887 30a2 	strb.w	r3, [r7, #162]	; 0xa2
    int8_t zgOffsetTC = getZGyroOffsetTC();
 80025c0:	6878      	ldr	r0, [r7, #4]
 80025c2:	f7ff fc96 	bl	8001ef2 <_ZN7MPU605016getZGyroOffsetTCEv>
 80025c6:	4603      	mov	r3, r0
 80025c8:	f887 30a1 	strb.w	r3, [r7, #161]	; 0xa1
    //DEBUG_PRINT(F("Z gyro offset = "));
    //DEBUG_PRINTLN(zgOffsetTC);

    // setup weird slave stuff (?)
    //DEBUG_PRINTLN(F("Setting slave 0 address to 0x7F..."));
    setSlaveAddress(0, 0x7F);
 80025cc:	227f      	movs	r2, #127	; 0x7f
 80025ce:	2100      	movs	r1, #0
 80025d0:	6878      	ldr	r0, [r7, #4]
 80025d2:	f7ff fb47 	bl	8001c64 <_ZN7MPU605015setSlaveAddressEhh>
    //DEBUG_PRINTLN(F("Disabling I2C Master mode..."));
    setI2CMasterModeEnabled(false);
 80025d6:	2100      	movs	r1, #0
 80025d8:	6878      	ldr	r0, [r7, #4]
 80025da:	f7ff fb94 	bl	8001d06 <_ZN7MPU605023setI2CMasterModeEnabledEb>
    //DEBUG_PRINTLN(F("Setting slave 0 address to 0x68 (self)..."));
    setSlaveAddress(0, 0x68);
 80025de:	2268      	movs	r2, #104	; 0x68
 80025e0:	2100      	movs	r1, #0
 80025e2:	6878      	ldr	r0, [r7, #4]
 80025e4:	f7ff fb3e 	bl	8001c64 <_ZN7MPU605015setSlaveAddressEhh>
    //DEBUG_PRINTLN(F("Resetting I2C Master control..."));
    resetI2CMaster();
 80025e8:	6878      	ldr	r0, [r7, #4]
 80025ea:	f7ff fbac 	bl	8001d46 <_ZN7MPU605014resetI2CMasterEv>
    HAL_Delay(20);
 80025ee:	2014      	movs	r0, #20
 80025f0:	f002 f80c 	bl	800460c <HAL_Delay>

    // load DMP code into memory banks
    //DEBUG_PRINT(F("Writing DMP code to MPU memory banks ("));
    //DEBUG_PRINT(MPU6050_DMP_CODE_SIZE);
    //DEBUG_PRINTLN(F(" bytes)"));
    if (writeProgMemoryBlock(dmpMemory, MPU6050_DMP_CODE_SIZE)) {
 80025f4:	2301      	movs	r3, #1
 80025f6:	9301      	str	r3, [sp, #4]
 80025f8:	2300      	movs	r3, #0
 80025fa:	9300      	str	r3, [sp, #0]
 80025fc:	2300      	movs	r3, #0
 80025fe:	f240 7289 	movw	r2, #1929	; 0x789
 8002602:	49ce      	ldr	r1, [pc, #824]	; (800293c <_ZN7MPU605013dmpInitializeEv+0x3d0>)
 8002604:	6878      	ldr	r0, [r7, #4]
 8002606:	f7ff fe98 	bl	800233a <_ZN7MPU605020writeProgMemoryBlockEPKhthhb>
 800260a:	4603      	mov	r3, r0
 800260c:	2b00      	cmp	r3, #0
 800260e:	f000 8238 	beq.w	8002a82 <_ZN7MPU605013dmpInitializeEv+0x516>

        // write DMP configuration
        //DEBUG_PRINT(F("Writing DMP configuration to MPU memory banks ("));
        //DEBUG_PRINT(MPU6050_DMP_CONFIG_SIZE);
        //DEBUG_PRINTLN(F(" bytes in config def)"));
        if (writeProgDMPConfigurationSet(dmpConfig, MPU6050_DMP_CONFIG_SIZE)) {
 8002612:	22c0      	movs	r2, #192	; 0xc0
 8002614:	49ca      	ldr	r1, [pc, #808]	; (8002940 <_ZN7MPU605013dmpInitializeEv+0x3d4>)
 8002616:	6878      	ldr	r0, [r7, #4]
 8002618:	f7ff ff74 	bl	8002504 <_ZN7MPU605028writeProgDMPConfigurationSetEPKht>
 800261c:	4603      	mov	r3, r0
 800261e:	2b00      	cmp	r3, #0
 8002620:	f000 822d 	beq.w	8002a7e <_ZN7MPU605013dmpInitializeEv+0x512>
            //DEBUG_PRINTLN(F("Success! DMP configuration written and verified."));

            //DEBUG_PRINTLN(F("Setting clock source to Z Gyro..."));
            setClockSource(MPU6050_CLOCK_PLL_ZGYRO);
 8002624:	2103      	movs	r1, #3
 8002626:	6878      	ldr	r0, [r7, #4]
 8002628:	f7ff fbbc 	bl	8001da4 <_ZN7MPU605014setClockSourceEh>

            //DEBUG_PRINTLN(F("Setting DMP and FIFO_OFLOW interrupts enabled..."));
            setIntEnabled(0x12);
 800262c:	2112      	movs	r1, #18
 800262e:	6878      	ldr	r0, [r7, #4]
 8002630:	f7ff fb35 	bl	8001c9e <_ZN7MPU605013setIntEnabledEh>

            //DEBUG_PRINTLN(F("Setting sample rate to 200Hz..."));
            setRate(4); // 1khz / (1 + 4) = 200 Hz
 8002634:	2104      	movs	r1, #4
 8002636:	6878      	ldr	r0, [r7, #4]
 8002638:	f7ff fa73 	bl	8001b22 <_ZN7MPU60507setRateEh>

            //DEBUG_PRINTLN(F("Setting external frame sync to TEMP_OUT_L[0]..."));
            setExternalFrameSync(MPU6050_EXT_SYNC_TEMP_OUT_L);
 800263c:	2101      	movs	r1, #1
 800263e:	6878      	ldr	r0, [r7, #4]
 8002640:	f7ff fa80 	bl	8001b44 <_ZN7MPU605020setExternalFrameSyncEh>

            //DEBUG_PRINTLN(F("Setting DLPF bandwidth to 42Hz..."));
            setDLPFMode(MPU6050_DLPF_BW_42);
 8002644:	2103      	movs	r1, #3
 8002646:	6878      	ldr	r0, [r7, #4]
 8002648:	f7ff fa8f 	bl	8001b6a <_ZN7MPU605011setDLPFModeEh>

            //DEBUG_PRINTLN(F("Setting gyro sensitivity to +/- 2000 deg/sec..."));
            setFullScaleGyroRange(MPU6050_GYRO_FS_2000);
 800264c:	2103      	movs	r1, #3
 800264e:	6878      	ldr	r0, [r7, #4]
 8002650:	f7ff fa9e 	bl	8001b90 <_ZN7MPU605021setFullScaleGyroRangeEh>

            //DEBUG_PRINTLN(F("Setting DMP programm start address"));
            //write start address MSB into register
            setDMPConfig1(0x03);
 8002654:	2103      	movs	r1, #3
 8002656:	6878      	ldr	r0, [r7, #4]
 8002658:	f7ff ff66 	bl	8002528 <_ZN7MPU605013setDMPConfig1Eh>
            //write start address LSB into register
            setDMPConfig2(0x00);
 800265c:	2100      	movs	r1, #0
 800265e:	6878      	ldr	r0, [r7, #4]
 8002660:	f7ff ff73 	bl	800254a <_ZN7MPU605013setDMPConfig2Eh>

            //DEBUG_PRINTLN(F("Clearing OTP Bank flag..."));
            setOTPBankValid(false);
 8002664:	2100      	movs	r1, #0
 8002666:	6878      	ldr	r0, [r7, #4]
 8002668:	f7ff fbe2 	bl	8001e30 <_ZN7MPU605015setOTPBankValidEb>

            //DEBUG_PRINTLN(F("Setting X/Y/Z gyro offset TCs to previous values..."));
            setXGyroOffsetTC(xgOffsetTC);
 800266c:	f997 30a3 	ldrsb.w	r3, [r7, #163]	; 0xa3
 8002670:	4619      	mov	r1, r3
 8002672:	6878      	ldr	r0, [r7, #4]
 8002674:	f7ff fc02 	bl	8001e7c <_ZN7MPU605016setXGyroOffsetTCEa>
            setYGyroOffsetTC(ygOffsetTC);
 8002678:	f997 30a2 	ldrsb.w	r3, [r7, #162]	; 0xa2
 800267c:	4619      	mov	r1, r3
 800267e:	6878      	ldr	r0, [r7, #4]
 8002680:	f7ff fc24 	bl	8001ecc <_ZN7MPU605016setYGyroOffsetTCEa>
            setZGyroOffsetTC(zgOffsetTC);
 8002684:	f997 30a1 	ldrsb.w	r3, [r7, #161]	; 0xa1
 8002688:	4619      	mov	r1, r3
 800268a:	6878      	ldr	r0, [r7, #4]
 800268c:	f7ff fc46 	bl	8001f1c <_ZN7MPU605016setZGyroOffsetTCEa>
            //setYGyroOffset(0);
            //setZGyroOffset(0);

            //DEBUG_PRINTLN(F("Writing final memory update 1/7 (function unknown)..."));
            uint8_t dmpUpdate[16], j;
            uint16_t pos = 0;
 8002690:	2300      	movs	r3, #0
 8002692:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
            for (j = 0; j < 4 || j < dmpUpdate[2] + 3; j++, pos++) dmpUpdate[j] = pgm_read_byte(&dmpUpdates[pos]);
 8002696:	2300      	movs	r3, #0
 8002698:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
 800269c:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 80026a0:	2b03      	cmp	r3, #3
 80026a2:	d906      	bls.n	80026b2 <_ZN7MPU605013dmpInitializeEv+0x146>
 80026a4:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 80026a8:	1c9a      	adds	r2, r3, #2
 80026aa:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 80026ae:	429a      	cmp	r2, r3
 80026b0:	db15      	blt.n	80026de <_ZN7MPU605013dmpInitializeEv+0x172>
 80026b2:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 80026b6:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 80026ba:	49a2      	ldr	r1, [pc, #648]	; (8002944 <_ZN7MPU605013dmpInitializeEv+0x3d8>)
 80026bc:	5c8a      	ldrb	r2, [r1, r2]
 80026be:	f107 01a8 	add.w	r1, r7, #168	; 0xa8
 80026c2:	440b      	add	r3, r1
 80026c4:	f803 2c1c 	strb.w	r2, [r3, #-28]
 80026c8:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 80026cc:	3301      	adds	r3, #1
 80026ce:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
 80026d2:	f8b7 30a4 	ldrh.w	r3, [r7, #164]	; 0xa4
 80026d6:	3301      	adds	r3, #1
 80026d8:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
 80026dc:	e7de      	b.n	800269c <_ZN7MPU605013dmpInitializeEv+0x130>
            writeMemoryBlock(dmpUpdate + 3, dmpUpdate[2], dmpUpdate[0], dmpUpdate[1]);
 80026de:	f107 018c 	add.w	r1, r7, #140	; 0x8c
 80026e2:	3103      	adds	r1, #3
 80026e4:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 80026e8:	b29a      	uxth	r2, r3
 80026ea:	f897 008c 	ldrb.w	r0, [r7, #140]	; 0x8c
 80026ee:	f897 308d 	ldrb.w	r3, [r7, #141]	; 0x8d
 80026f2:	2400      	movs	r4, #0
 80026f4:	9402      	str	r4, [sp, #8]
 80026f6:	2401      	movs	r4, #1
 80026f8:	9401      	str	r4, [sp, #4]
 80026fa:	9300      	str	r3, [sp, #0]
 80026fc:	4603      	mov	r3, r0
 80026fe:	6878      	ldr	r0, [r7, #4]
 8002700:	f7ff fd46 	bl	8002190 <_ZN7MPU605016writeMemoryBlockEPKhthhbb>

            //DEBUG_PRINTLN(F("Writing final memory update 2/7 (function unknown)..."));
            for (j = 0; j < 4 || j < dmpUpdate[2] + 3; j++, pos++) dmpUpdate[j] = pgm_read_byte(&dmpUpdates[pos]);
 8002704:	2300      	movs	r3, #0
 8002706:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
 800270a:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 800270e:	2b03      	cmp	r3, #3
 8002710:	d906      	bls.n	8002720 <_ZN7MPU605013dmpInitializeEv+0x1b4>
 8002712:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 8002716:	1c9a      	adds	r2, r3, #2
 8002718:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 800271c:	429a      	cmp	r2, r3
 800271e:	db15      	blt.n	800274c <_ZN7MPU605013dmpInitializeEv+0x1e0>
 8002720:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 8002724:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8002728:	4986      	ldr	r1, [pc, #536]	; (8002944 <_ZN7MPU605013dmpInitializeEv+0x3d8>)
 800272a:	5c8a      	ldrb	r2, [r1, r2]
 800272c:	f107 01a8 	add.w	r1, r7, #168	; 0xa8
 8002730:	440b      	add	r3, r1
 8002732:	f803 2c1c 	strb.w	r2, [r3, #-28]
 8002736:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 800273a:	3301      	adds	r3, #1
 800273c:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
 8002740:	f8b7 30a4 	ldrh.w	r3, [r7, #164]	; 0xa4
 8002744:	3301      	adds	r3, #1
 8002746:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
 800274a:	e7de      	b.n	800270a <_ZN7MPU605013dmpInitializeEv+0x19e>
            writeMemoryBlock(dmpUpdate + 3, dmpUpdate[2], dmpUpdate[0], dmpUpdate[1]);
 800274c:	f107 018c 	add.w	r1, r7, #140	; 0x8c
 8002750:	3103      	adds	r1, #3
 8002752:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 8002756:	b29a      	uxth	r2, r3
 8002758:	f897 008c 	ldrb.w	r0, [r7, #140]	; 0x8c
 800275c:	f897 308d 	ldrb.w	r3, [r7, #141]	; 0x8d
 8002760:	2400      	movs	r4, #0
 8002762:	9402      	str	r4, [sp, #8]
 8002764:	2401      	movs	r4, #1
 8002766:	9401      	str	r4, [sp, #4]
 8002768:	9300      	str	r3, [sp, #0]
 800276a:	4603      	mov	r3, r0
 800276c:	6878      	ldr	r0, [r7, #4]
 800276e:	f7ff fd0f 	bl	8002190 <_ZN7MPU605016writeMemoryBlockEPKhthhbb>

            //DEBUG_PRINTLN(F("Resetting FIFO..."));
            resetFIFO();
 8002772:	6878      	ldr	r0, [r7, #4]
 8002774:	f7ff fad8 	bl	8001d28 <_ZN7MPU60509resetFIFOEv>

            //DEBUG_PRINTLN(F("Reading FIFO count..."));
            uint16_t fifoCount = getFIFOCount();
 8002778:	6878      	ldr	r0, [r7, #4]
 800277a:	f7ff fb26 	bl	8001dca <_ZN7MPU605012getFIFOCountEv>
 800277e:	4603      	mov	r3, r0
 8002780:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
            uint8_t fifoBuffer[128];

            //DEBUG_PRINT(F("Current FIFO count="));
            //DEBUG_PRINTLN(fifoCount);
            getFIFOBytes(fifoBuffer, fifoCount);
 8002784:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8002788:	b2da      	uxtb	r2, r3
 800278a:	f107 030c 	add.w	r3, r7, #12
 800278e:	4619      	mov	r1, r3
 8002790:	6878      	ldr	r0, [r7, #4]
 8002792:	f7ff fb34 	bl	8001dfe <_ZN7MPU605012getFIFOBytesEPhh>

            //DEBUG_PRINTLN(F("Setting motion detection threshold to 2..."));
            setMotionDetectionThreshold(2);
 8002796:	2102      	movs	r1, #2
 8002798:	6878      	ldr	r0, [r7, #4]
 800279a:	f7ff fa1f 	bl	8001bdc <_ZN7MPU605027setMotionDetectionThresholdEh>

            //DEBUG_PRINTLN(F("Setting zero-motion detection threshold to 156..."));
            setZeroMotionDetectionThreshold(156);
 800279e:	219c      	movs	r1, #156	; 0x9c
 80027a0:	6878      	ldr	r0, [r7, #4]
 80027a2:	f7ff fa3d 	bl	8001c20 <_ZN7MPU605031setZeroMotionDetectionThresholdEh>

            //DEBUG_PRINTLN(F("Setting motion detection duration to 80..."));
            setMotionDetectionDuration(80);
 80027a6:	2150      	movs	r1, #80	; 0x50
 80027a8:	6878      	ldr	r0, [r7, #4]
 80027aa:	f7ff fa28 	bl	8001bfe <_ZN7MPU605026setMotionDetectionDurationEh>

            //DEBUG_PRINTLN(F("Setting zero-motion detection duration to 0..."));
            setZeroMotionDetectionDuration(0);
 80027ae:	2100      	movs	r1, #0
 80027b0:	6878      	ldr	r0, [r7, #4]
 80027b2:	f7ff fa46 	bl	8001c42 <_ZN7MPU605030setZeroMotionDetectionDurationEh>

            //DEBUG_PRINTLN(F("Resetting FIFO..."));
            resetFIFO();
 80027b6:	6878      	ldr	r0, [r7, #4]
 80027b8:	f7ff fab6 	bl	8001d28 <_ZN7MPU60509resetFIFOEv>

            //DEBUG_PRINTLN(F("Enabling FIFO..."));
            setFIFOEnabled(true);
 80027bc:	2101      	movs	r1, #1
 80027be:	6878      	ldr	r0, [r7, #4]
 80027c0:	f7ff fa90 	bl	8001ce4 <_ZN7MPU605014setFIFOEnabledEb>

            //DEBUG_PRINTLN(F("Enabling DMP..."));
            setDMPEnabled(true);
 80027c4:	2101      	movs	r1, #1
 80027c6:	6878      	ldr	r0, [r7, #4]
 80027c8:	f7ff fc21 	bl	800200e <_ZN7MPU605013setDMPEnabledEb>

            //DEBUG_PRINTLN(F("Resetting DMP..."));
            resetDMP();
 80027cc:	6878      	ldr	r0, [r7, #4]
 80027ce:	f7ff fc2f 	bl	8002030 <_ZN7MPU60508resetDMPEv>

            //DEBUG_PRINTLN(F("Writing final memory update 3/7 (function unknown)..."));
            for (j = 0; j < 4 || j < dmpUpdate[2] + 3; j++, pos++) dmpUpdate[j] = pgm_read_byte(&dmpUpdates[pos]);
 80027d2:	2300      	movs	r3, #0
 80027d4:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
 80027d8:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 80027dc:	2b03      	cmp	r3, #3
 80027de:	d906      	bls.n	80027ee <_ZN7MPU605013dmpInitializeEv+0x282>
 80027e0:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 80027e4:	1c9a      	adds	r2, r3, #2
 80027e6:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 80027ea:	429a      	cmp	r2, r3
 80027ec:	db15      	blt.n	800281a <_ZN7MPU605013dmpInitializeEv+0x2ae>
 80027ee:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 80027f2:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 80027f6:	4953      	ldr	r1, [pc, #332]	; (8002944 <_ZN7MPU605013dmpInitializeEv+0x3d8>)
 80027f8:	5c8a      	ldrb	r2, [r1, r2]
 80027fa:	f107 01a8 	add.w	r1, r7, #168	; 0xa8
 80027fe:	440b      	add	r3, r1
 8002800:	f803 2c1c 	strb.w	r2, [r3, #-28]
 8002804:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8002808:	3301      	adds	r3, #1
 800280a:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
 800280e:	f8b7 30a4 	ldrh.w	r3, [r7, #164]	; 0xa4
 8002812:	3301      	adds	r3, #1
 8002814:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
 8002818:	e7de      	b.n	80027d8 <_ZN7MPU605013dmpInitializeEv+0x26c>
            writeMemoryBlock(dmpUpdate + 3, dmpUpdate[2], dmpUpdate[0], dmpUpdate[1]);
 800281a:	f107 018c 	add.w	r1, r7, #140	; 0x8c
 800281e:	3103      	adds	r1, #3
 8002820:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 8002824:	b29a      	uxth	r2, r3
 8002826:	f897 008c 	ldrb.w	r0, [r7, #140]	; 0x8c
 800282a:	f897 308d 	ldrb.w	r3, [r7, #141]	; 0x8d
 800282e:	2400      	movs	r4, #0
 8002830:	9402      	str	r4, [sp, #8]
 8002832:	2401      	movs	r4, #1
 8002834:	9401      	str	r4, [sp, #4]
 8002836:	9300      	str	r3, [sp, #0]
 8002838:	4603      	mov	r3, r0
 800283a:	6878      	ldr	r0, [r7, #4]
 800283c:	f7ff fca8 	bl	8002190 <_ZN7MPU605016writeMemoryBlockEPKhthhbb>

            //DEBUG_PRINTLN(F("Writing final memory update 4/7 (function unknown)..."));
            for (j = 0; j < 4 || j < dmpUpdate[2] + 3; j++, pos++) dmpUpdate[j] = pgm_read_byte(&dmpUpdates[pos]);
 8002840:	2300      	movs	r3, #0
 8002842:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
 8002846:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 800284a:	2b03      	cmp	r3, #3
 800284c:	d906      	bls.n	800285c <_ZN7MPU605013dmpInitializeEv+0x2f0>
 800284e:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 8002852:	1c9a      	adds	r2, r3, #2
 8002854:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8002858:	429a      	cmp	r2, r3
 800285a:	db15      	blt.n	8002888 <_ZN7MPU605013dmpInitializeEv+0x31c>
 800285c:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 8002860:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8002864:	4937      	ldr	r1, [pc, #220]	; (8002944 <_ZN7MPU605013dmpInitializeEv+0x3d8>)
 8002866:	5c8a      	ldrb	r2, [r1, r2]
 8002868:	f107 01a8 	add.w	r1, r7, #168	; 0xa8
 800286c:	440b      	add	r3, r1
 800286e:	f803 2c1c 	strb.w	r2, [r3, #-28]
 8002872:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8002876:	3301      	adds	r3, #1
 8002878:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
 800287c:	f8b7 30a4 	ldrh.w	r3, [r7, #164]	; 0xa4
 8002880:	3301      	adds	r3, #1
 8002882:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
 8002886:	e7de      	b.n	8002846 <_ZN7MPU605013dmpInitializeEv+0x2da>
            writeMemoryBlock(dmpUpdate + 3, dmpUpdate[2], dmpUpdate[0], dmpUpdate[1]);
 8002888:	f107 018c 	add.w	r1, r7, #140	; 0x8c
 800288c:	3103      	adds	r1, #3
 800288e:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 8002892:	b29a      	uxth	r2, r3
 8002894:	f897 008c 	ldrb.w	r0, [r7, #140]	; 0x8c
 8002898:	f897 308d 	ldrb.w	r3, [r7, #141]	; 0x8d
 800289c:	2400      	movs	r4, #0
 800289e:	9402      	str	r4, [sp, #8]
 80028a0:	2401      	movs	r4, #1
 80028a2:	9401      	str	r4, [sp, #4]
 80028a4:	9300      	str	r3, [sp, #0]
 80028a6:	4603      	mov	r3, r0
 80028a8:	6878      	ldr	r0, [r7, #4]
 80028aa:	f7ff fc71 	bl	8002190 <_ZN7MPU605016writeMemoryBlockEPKhthhbb>

            //DEBUG_PRINTLN(F("Writing final memory update 5/7 (function unknown)..."));
            for (j = 0; j < 4 || j < dmpUpdate[2] + 3; j++, pos++) dmpUpdate[j] = pgm_read_byte(&dmpUpdates[pos]);
 80028ae:	2300      	movs	r3, #0
 80028b0:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
 80028b4:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 80028b8:	2b03      	cmp	r3, #3
 80028ba:	d906      	bls.n	80028ca <_ZN7MPU605013dmpInitializeEv+0x35e>
 80028bc:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 80028c0:	1c9a      	adds	r2, r3, #2
 80028c2:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 80028c6:	429a      	cmp	r2, r3
 80028c8:	db15      	blt.n	80028f6 <_ZN7MPU605013dmpInitializeEv+0x38a>
 80028ca:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 80028ce:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 80028d2:	491c      	ldr	r1, [pc, #112]	; (8002944 <_ZN7MPU605013dmpInitializeEv+0x3d8>)
 80028d4:	5c8a      	ldrb	r2, [r1, r2]
 80028d6:	f107 01a8 	add.w	r1, r7, #168	; 0xa8
 80028da:	440b      	add	r3, r1
 80028dc:	f803 2c1c 	strb.w	r2, [r3, #-28]
 80028e0:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 80028e4:	3301      	adds	r3, #1
 80028e6:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
 80028ea:	f8b7 30a4 	ldrh.w	r3, [r7, #164]	; 0xa4
 80028ee:	3301      	adds	r3, #1
 80028f0:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
 80028f4:	e7de      	b.n	80028b4 <_ZN7MPU605013dmpInitializeEv+0x348>
            writeMemoryBlock(dmpUpdate + 3, dmpUpdate[2], dmpUpdate[0], dmpUpdate[1]);
 80028f6:	f107 018c 	add.w	r1, r7, #140	; 0x8c
 80028fa:	3103      	adds	r1, #3
 80028fc:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 8002900:	b29a      	uxth	r2, r3
 8002902:	f897 008c 	ldrb.w	r0, [r7, #140]	; 0x8c
 8002906:	f897 308d 	ldrb.w	r3, [r7, #141]	; 0x8d
 800290a:	2400      	movs	r4, #0
 800290c:	9402      	str	r4, [sp, #8]
 800290e:	2401      	movs	r4, #1
 8002910:	9401      	str	r4, [sp, #4]
 8002912:	9300      	str	r3, [sp, #0]
 8002914:	4603      	mov	r3, r0
 8002916:	6878      	ldr	r0, [r7, #4]
 8002918:	f7ff fc3a 	bl	8002190 <_ZN7MPU605016writeMemoryBlockEPKhthhbb>

            //DEBUG_PRINTLN(F("Waiting for FIFO count > 2..."));
            while ((fifoCount = getFIFOCount()) < 3);
 800291c:	6878      	ldr	r0, [r7, #4]
 800291e:	f7ff fa54 	bl	8001dca <_ZN7MPU605012getFIFOCountEv>
 8002922:	4603      	mov	r3, r0
 8002924:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
 8002928:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 800292c:	2b02      	cmp	r3, #2
 800292e:	bf94      	ite	ls
 8002930:	2301      	movls	r3, #1
 8002932:	2300      	movhi	r3, #0
 8002934:	b2db      	uxtb	r3, r3
 8002936:	2b00      	cmp	r3, #0
 8002938:	d006      	beq.n	8002948 <_ZN7MPU605013dmpInitializeEv+0x3dc>
 800293a:	e7ef      	b.n	800291c <_ZN7MPU605013dmpInitializeEv+0x3b0>
 800293c:	08010ef8 	.word	0x08010ef8
 8002940:	08011684 	.word	0x08011684
 8002944:	08011744 	.word	0x08011744

            //DEBUG_PRINT(F("Current FIFO count="));
            //DEBUG_PRINTLN(fifoCount);
            //DEBUG_PRINTLN(F("Reading FIFO data..."));
            getFIFOBytes(fifoBuffer, fifoCount);
 8002948:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 800294c:	b2da      	uxtb	r2, r3
 800294e:	f107 030c 	add.w	r3, r7, #12
 8002952:	4619      	mov	r1, r3
 8002954:	6878      	ldr	r0, [r7, #4]
 8002956:	f7ff fa52 	bl	8001dfe <_ZN7MPU605012getFIFOBytesEPhh>

            //DEBUG_PRINT(F("Current interrupt status="));
            //DEBUG_PRINTLNF(getIntStatus(), HEX);

            //DEBUG_PRINTLN(F("Reading final memory update 6/7 (function unknown)..."));
            for (j = 0; j < 4 || j < dmpUpdate[2] + 3; j++, pos++) dmpUpdate[j] = pgm_read_byte(&dmpUpdates[pos]);
 800295a:	2300      	movs	r3, #0
 800295c:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
 8002960:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8002964:	2b03      	cmp	r3, #3
 8002966:	d906      	bls.n	8002976 <_ZN7MPU605013dmpInitializeEv+0x40a>
 8002968:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 800296c:	1c9a      	adds	r2, r3, #2
 800296e:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8002972:	429a      	cmp	r2, r3
 8002974:	db15      	blt.n	80029a2 <_ZN7MPU605013dmpInitializeEv+0x436>
 8002976:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 800297a:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 800297e:	4943      	ldr	r1, [pc, #268]	; (8002a8c <_ZN7MPU605013dmpInitializeEv+0x520>)
 8002980:	5c8a      	ldrb	r2, [r1, r2]
 8002982:	f107 01a8 	add.w	r1, r7, #168	; 0xa8
 8002986:	440b      	add	r3, r1
 8002988:	f803 2c1c 	strb.w	r2, [r3, #-28]
 800298c:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8002990:	3301      	adds	r3, #1
 8002992:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
 8002996:	f8b7 30a4 	ldrh.w	r3, [r7, #164]	; 0xa4
 800299a:	3301      	adds	r3, #1
 800299c:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
 80029a0:	e7de      	b.n	8002960 <_ZN7MPU605013dmpInitializeEv+0x3f4>
            readMemoryBlock(dmpUpdate + 3, dmpUpdate[2], dmpUpdate[0], dmpUpdate[1]);
 80029a2:	f107 018c 	add.w	r1, r7, #140	; 0x8c
 80029a6:	3103      	adds	r1, #3
 80029a8:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 80029ac:	b29a      	uxth	r2, r3
 80029ae:	f897 008c 	ldrb.w	r0, [r7, #140]	; 0x8c
 80029b2:	f897 308d 	ldrb.w	r3, [r7, #141]	; 0x8d
 80029b6:	9300      	str	r3, [sp, #0]
 80029b8:	4603      	mov	r3, r0
 80029ba:	6878      	ldr	r0, [r7, #4]
 80029bc:	f7ff fb82 	bl	80020c4 <_ZN7MPU605015readMemoryBlockEPhthh>

            //DEBUG_PRINTLN(F("Waiting for FIFO count > 2..."));
            while ((fifoCount = getFIFOCount()) < 3);
 80029c0:	6878      	ldr	r0, [r7, #4]
 80029c2:	f7ff fa02 	bl	8001dca <_ZN7MPU605012getFIFOCountEv>
 80029c6:	4603      	mov	r3, r0
 80029c8:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
 80029cc:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 80029d0:	2b02      	cmp	r3, #2
 80029d2:	bf94      	ite	ls
 80029d4:	2301      	movls	r3, #1
 80029d6:	2300      	movhi	r3, #0
 80029d8:	b2db      	uxtb	r3, r3
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d000      	beq.n	80029e0 <_ZN7MPU605013dmpInitializeEv+0x474>
 80029de:	e7ef      	b.n	80029c0 <_ZN7MPU605013dmpInitializeEv+0x454>

            //DEBUG_PRINT(F("Current FIFO count="));
            //DEBUG_PRINTLN(fifoCount);

            //DEBUG_PRINTLN(F("Reading FIFO data..."));
            getFIFOBytes(fifoBuffer, fifoCount);
 80029e0:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 80029e4:	b2da      	uxtb	r2, r3
 80029e6:	f107 030c 	add.w	r3, r7, #12
 80029ea:	4619      	mov	r1, r3
 80029ec:	6878      	ldr	r0, [r7, #4]
 80029ee:	f7ff fa06 	bl	8001dfe <_ZN7MPU605012getFIFOBytesEPhh>

            //DEBUG_PRINT(F("Current interrupt status="));
            //DEBUG_PRINTLNF(getIntStatus(), HEX);

            //DEBUG_PRINTLN(F("Writing final memory update 7/7 (function unknown)..."));
            for (j = 0; j < 4 || j < dmpUpdate[2] + 3; j++, pos++) dmpUpdate[j] = pgm_read_byte(&dmpUpdates[pos]);
 80029f2:	2300      	movs	r3, #0
 80029f4:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
 80029f8:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 80029fc:	2b03      	cmp	r3, #3
 80029fe:	d906      	bls.n	8002a0e <_ZN7MPU605013dmpInitializeEv+0x4a2>
 8002a00:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 8002a04:	1c9a      	adds	r2, r3, #2
 8002a06:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8002a0a:	429a      	cmp	r2, r3
 8002a0c:	db15      	blt.n	8002a3a <_ZN7MPU605013dmpInitializeEv+0x4ce>
 8002a0e:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 8002a12:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8002a16:	491d      	ldr	r1, [pc, #116]	; (8002a8c <_ZN7MPU605013dmpInitializeEv+0x520>)
 8002a18:	5c8a      	ldrb	r2, [r1, r2]
 8002a1a:	f107 01a8 	add.w	r1, r7, #168	; 0xa8
 8002a1e:	440b      	add	r3, r1
 8002a20:	f803 2c1c 	strb.w	r2, [r3, #-28]
 8002a24:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8002a28:	3301      	adds	r3, #1
 8002a2a:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
 8002a2e:	f8b7 30a4 	ldrh.w	r3, [r7, #164]	; 0xa4
 8002a32:	3301      	adds	r3, #1
 8002a34:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
 8002a38:	e7de      	b.n	80029f8 <_ZN7MPU605013dmpInitializeEv+0x48c>
            writeMemoryBlock(dmpUpdate + 3, dmpUpdate[2], dmpUpdate[0], dmpUpdate[1]);
 8002a3a:	f107 018c 	add.w	r1, r7, #140	; 0x8c
 8002a3e:	3103      	adds	r1, #3
 8002a40:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 8002a44:	b29a      	uxth	r2, r3
 8002a46:	f897 008c 	ldrb.w	r0, [r7, #140]	; 0x8c
 8002a4a:	f897 308d 	ldrb.w	r3, [r7, #141]	; 0x8d
 8002a4e:	2400      	movs	r4, #0
 8002a50:	9402      	str	r4, [sp, #8]
 8002a52:	2401      	movs	r4, #1
 8002a54:	9401      	str	r4, [sp, #4]
 8002a56:	9300      	str	r3, [sp, #0]
 8002a58:	4603      	mov	r3, r0
 8002a5a:	6878      	ldr	r0, [r7, #4]
 8002a5c:	f7ff fb98 	bl	8002190 <_ZN7MPU605016writeMemoryBlockEPKhthhbb>

            //DEBUG_PRINTLN(F("DMP is good to go! Finally."));

            //DEBUG_PRINTLN(F("Disabling DMP (you turn it on later)..."));
            setDMPEnabled(false);
 8002a60:	2100      	movs	r1, #0
 8002a62:	6878      	ldr	r0, [r7, #4]
 8002a64:	f7ff fad3 	bl	800200e <_ZN7MPU605013setDMPEnabledEb>

            //DEBUG_PRINTLN(F("Setting up internal 42-byte (default) DMP packet buffer..."));
            dmpPacketSize = 42;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	222a      	movs	r2, #42	; 0x2a
 8002a6c:	809a      	strh	r2, [r3, #4]
            /*if ((dmpPacketBuffer = (uint8_t *)malloc(42)) == 0) {
                return 3; // TODO: proper error code for no memory
            }*/

            //DEBUG_PRINTLN(F("Resetting FIFO and clearing INT status one last time..."));
            resetFIFO();
 8002a6e:	6878      	ldr	r0, [r7, #4]
 8002a70:	f7ff f95a 	bl	8001d28 <_ZN7MPU60509resetFIFOEv>
            getIntStatus();
 8002a74:	6878      	ldr	r0, [r7, #4]
 8002a76:	f7ff f923 	bl	8001cc0 <_ZN7MPU605012getIntStatusEv>
        }
    } else {
        //DEBUG_PRINTLN(F("ERROR! DMP code verification failed."));
        return 1; // main binary block loading failed
    }
    return 0; // success
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	e002      	b.n	8002a84 <_ZN7MPU605013dmpInitializeEv+0x518>
            return 2; // configuration block loading failed
 8002a7e:	2302      	movs	r3, #2
 8002a80:	e000      	b.n	8002a84 <_ZN7MPU605013dmpInitializeEv+0x518>
        return 1; // main binary block loading failed
 8002a82:	2301      	movs	r3, #1
}
 8002a84:	4618      	mov	r0, r3
 8002a86:	37ac      	adds	r7, #172	; 0xac
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	bd90      	pop	{r4, r7, pc}
 8002a8c:	08011744 	.word	0x08011744

08002a90 <_Z16SBUS_RecieveBitsv>:
uint8_t SBUSNewPackage = false;



void SBUS_RecieveBits()
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	b082      	sub	sp, #8
 8002a94:	af00      	add	r7, sp, #0
  //collect bits:

  TIM4->CCR1 = (uint16_t)(fastPPM_MinTime + 500 + ((float)SBUS_Channels[2] / 2));
 8002a96:	4b2c      	ldr	r3, [pc, #176]	; (8002b48 <_Z16SBUS_RecieveBitsv+0xb8>)
 8002a98:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	f7fe f959 	bl	8000d54 <__aeabi_i2f>
 8002aa2:	4603      	mov	r3, r0
 8002aa4:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	f7fe fa5b 	bl	8000f64 <__aeabi_fdiv>
 8002aae:	4603      	mov	r3, r0
 8002ab0:	4926      	ldr	r1, [pc, #152]	; (8002b4c <_Z16SBUS_RecieveBitsv+0xbc>)
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	f7fe f89a 	bl	8000bec <__addsf3>
 8002ab8:	4603      	mov	r3, r0
 8002aba:	4618      	mov	r0, r3
 8002abc:	f7fe fba0 	bl	8001200 <__aeabi_f2uiz>
 8002ac0:	4603      	mov	r3, r0
 8002ac2:	b29a      	uxth	r2, r3
 8002ac4:	4b22      	ldr	r3, [pc, #136]	; (8002b50 <_Z16SBUS_RecieveBitsv+0xc0>)
 8002ac6:	635a      	str	r2, [r3, #52]	; 0x34
  SBUS_timerCount = TIM11->CNT + SBUS_StartTimeOffset;       //get current clock count register value + time offset
 8002ac8:	4b22      	ldr	r3, [pc, #136]	; (8002b54 <_Z16SBUS_RecieveBitsv+0xc4>)
 8002aca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002acc:	b29b      	uxth	r3, r3
 8002ace:	3b05      	subs	r3, #5
 8002ad0:	b29a      	uxth	r2, r3
 8002ad2:	4b21      	ldr	r3, [pc, #132]	; (8002b58 <_Z16SBUS_RecieveBitsv+0xc8>)
 8002ad4:	801a      	strh	r2, [r3, #0]
  SBUS_RxBitString[0] = true;
 8002ad6:	4b21      	ldr	r3, [pc, #132]	; (8002b5c <_Z16SBUS_RecieveBitsv+0xcc>)
 8002ad8:	2201      	movs	r2, #1
 8002ada:	701a      	strb	r2, [r3, #0]
  //HAL_GPIO_TogglePin(ONBOARD_WRITE_3_GPIO_Port, ONBOARD_WRITE_3_Pin);   //debug Pin
  for (size_t i = 1; i < SBUS_NumberOfBits; i++)
 8002adc:	2301      	movs	r3, #1
 8002ade:	607b      	str	r3, [r7, #4]
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	2b8f      	cmp	r3, #143	; 0x8f
 8002ae4:	d829      	bhi.n	8002b3a <_Z16SBUS_RecieveBitsv+0xaa>
  {
    ONBOARD_WRITE_3_GPIO_Port->BSRR = (uint32_t)ONBOARD_WRITE_3_Pin << 16U;
 8002ae6:	4b1e      	ldr	r3, [pc, #120]	; (8002b60 <_Z16SBUS_RecieveBitsv+0xd0>)
 8002ae8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002aec:	619a      	str	r2, [r3, #24]
    SBUS_RxBitString[i] = ((ONBOARD_READ_IT_3_GPIO_Port->IDR & ONBOARD_READ_IT_3_Pin) != 0 ? true : false);     //if the pin is HIGH then the value is 1 else 0
 8002aee:	4b1d      	ldr	r3, [pc, #116]	; (8002b64 <_Z16SBUS_RecieveBitsv+0xd4>)
 8002af0:	691b      	ldr	r3, [r3, #16]
 8002af2:	b2db      	uxtb	r3, r3
 8002af4:	f003 0301 	and.w	r3, r3, #1
 8002af8:	b2d9      	uxtb	r1, r3
 8002afa:	4a18      	ldr	r2, [pc, #96]	; (8002b5c <_Z16SBUS_RecieveBitsv+0xcc>)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	4413      	add	r3, r2
 8002b00:	460a      	mov	r2, r1
 8002b02:	701a      	strb	r2, [r3, #0]
    ONBOARD_WRITE_3_GPIO_Port->BSRR = ONBOARD_WRITE_3_Pin;
 8002b04:	4b16      	ldr	r3, [pc, #88]	; (8002b60 <_Z16SBUS_RecieveBitsv+0xd0>)
 8002b06:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002b0a:	619a      	str	r2, [r3, #24]
    while ((TIM11->CNT - SBUS_timerCount) < 10)
 8002b0c:	4b11      	ldr	r3, [pc, #68]	; (8002b54 <_Z16SBUS_RecieveBitsv+0xc4>)
 8002b0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b10:	4a11      	ldr	r2, [pc, #68]	; (8002b58 <_Z16SBUS_RecieveBitsv+0xc8>)
 8002b12:	8812      	ldrh	r2, [r2, #0]
 8002b14:	1a9b      	subs	r3, r3, r2
 8002b16:	2b09      	cmp	r3, #9
 8002b18:	bf94      	ite	ls
 8002b1a:	2301      	movls	r3, #1
 8002b1c:	2300      	movhi	r3, #0
 8002b1e:	b2db      	uxtb	r3, r3
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d000      	beq.n	8002b26 <_Z16SBUS_RecieveBitsv+0x96>
 8002b24:	e7f2      	b.n	8002b0c <_Z16SBUS_RecieveBitsv+0x7c>
    {
    }
    SBUS_timerCount += 10;
 8002b26:	4b0c      	ldr	r3, [pc, #48]	; (8002b58 <_Z16SBUS_RecieveBitsv+0xc8>)
 8002b28:	881b      	ldrh	r3, [r3, #0]
 8002b2a:	330a      	adds	r3, #10
 8002b2c:	b29a      	uxth	r2, r3
 8002b2e:	4b0a      	ldr	r3, [pc, #40]	; (8002b58 <_Z16SBUS_RecieveBitsv+0xc8>)
 8002b30:	801a      	strh	r2, [r3, #0]
  for (size_t i = 1; i < SBUS_NumberOfBits; i++)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	3301      	adds	r3, #1
 8002b36:	607b      	str	r3, [r7, #4]
 8002b38:	e7d2      	b.n	8002ae0 <_Z16SBUS_RecieveBitsv+0x50>
  }
  SBUSNewPackage = true;
 8002b3a:	4b0b      	ldr	r3, [pc, #44]	; (8002b68 <_Z16SBUS_RecieveBitsv+0xd8>)
 8002b3c:	2201      	movs	r2, #1
 8002b3e:	701a      	strb	r2, [r3, #0]
}
 8002b40:	bf00      	nop
 8002b42:	3708      	adds	r7, #8
 8002b44:	46bd      	mov	sp, r7
 8002b46:	bd80      	pop	{r7, pc}
 8002b48:	20000544 	.word	0x20000544
 8002b4c:	44bb8000 	.word	0x44bb8000
 8002b50:	40000800 	.word	0x40000800
 8002b54:	40014800 	.word	0x40014800
 8002b58:	20000496 	.word	0x20000496
 8002b5c:	20000498 	.word	0x20000498
 8002b60:	40020000 	.word	0x40020000
 8002b64:	40020800 	.word	0x40020800
 8002b68:	20000555 	.word	0x20000555

08002b6c <_Z19SBUS_PostProcessingv>:

void SBUS_PostProcessing()
{
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	b088      	sub	sp, #32
 8002b70:	af00      	add	r7, sp, #0
    //check validity:

  SBUS_CorruptedPackage = false;                      //reset corrupted package flag
 8002b72:	4b88      	ldr	r3, [pc, #544]	; (8002d94 <_Z19SBUS_PostProcessingv+0x228>)
 8002b74:	2200      	movs	r2, #0
 8002b76:	701a      	strb	r2, [r3, #0]
  for (size_t i = 0; i < SBUS_NumberOfBytes; i++)      //repeat for each byte
 8002b78:	2300      	movs	r3, #0
 8002b7a:	61fb      	str	r3, [r7, #28]
 8002b7c:	69fb      	ldr	r3, [r7, #28]
 8002b7e:	2b0b      	cmp	r3, #11
 8002b80:	d85b      	bhi.n	8002c3a <_Z19SBUS_PostProcessingv+0xce>
  {
    if ((SBUS_RxBitString[0 + (i * SBUS_BitsPerByte)] == true) & (SBUS_RxBitString[10 + (i * SBUS_BitsPerByte)] == false) & (SBUS_RxBitString[11 + (i * SBUS_BitsPerByte)] == false))       //check start bit, 2 stop bit
 8002b82:	69fa      	ldr	r2, [r7, #28]
 8002b84:	4613      	mov	r3, r2
 8002b86:	005b      	lsls	r3, r3, #1
 8002b88:	4413      	add	r3, r2
 8002b8a:	009b      	lsls	r3, r3, #2
 8002b8c:	461a      	mov	r2, r3
 8002b8e:	4b82      	ldr	r3, [pc, #520]	; (8002d98 <_Z19SBUS_PostProcessingv+0x22c>)
 8002b90:	5c9b      	ldrb	r3, [r3, r2]
 8002b92:	2b01      	cmp	r3, #1
 8002b94:	bf0c      	ite	eq
 8002b96:	2301      	moveq	r3, #1
 8002b98:	2300      	movne	r3, #0
 8002b9a:	b2d9      	uxtb	r1, r3
 8002b9c:	69fa      	ldr	r2, [r7, #28]
 8002b9e:	4613      	mov	r3, r2
 8002ba0:	005b      	lsls	r3, r3, #1
 8002ba2:	4413      	add	r3, r2
 8002ba4:	009b      	lsls	r3, r3, #2
 8002ba6:	330a      	adds	r3, #10
 8002ba8:	4a7b      	ldr	r2, [pc, #492]	; (8002d98 <_Z19SBUS_PostProcessingv+0x22c>)
 8002baa:	5cd3      	ldrb	r3, [r2, r3]
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	bf0c      	ite	eq
 8002bb0:	2301      	moveq	r3, #1
 8002bb2:	2300      	movne	r3, #0
 8002bb4:	b2db      	uxtb	r3, r3
 8002bb6:	400b      	ands	r3, r1
 8002bb8:	b2db      	uxtb	r3, r3
 8002bba:	4619      	mov	r1, r3
 8002bbc:	69fa      	ldr	r2, [r7, #28]
 8002bbe:	4613      	mov	r3, r2
 8002bc0:	005b      	lsls	r3, r3, #1
 8002bc2:	4413      	add	r3, r2
 8002bc4:	009b      	lsls	r3, r3, #2
 8002bc6:	330b      	adds	r3, #11
 8002bc8:	4a73      	ldr	r2, [pc, #460]	; (8002d98 <_Z19SBUS_PostProcessingv+0x22c>)
 8002bca:	5cd3      	ldrb	r3, [r2, r3]
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	bf0c      	ite	eq
 8002bd0:	2301      	moveq	r3, #1
 8002bd2:	2300      	movne	r3, #0
 8002bd4:	b2db      	uxtb	r3, r3
 8002bd6:	400b      	ands	r3, r1
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d027      	beq.n	8002c2c <_Z19SBUS_PostProcessingv+0xc0>
    {
      uint8_t parityCheck = false;
 8002bdc:	2300      	movs	r3, #0
 8002bde:	76fb      	strb	r3, [r7, #27]
      for (size_t x = 0; x < 8; x++)                                              //generate parity from 8 bits
 8002be0:	2300      	movs	r3, #0
 8002be2:	617b      	str	r3, [r7, #20]
 8002be4:	697b      	ldr	r3, [r7, #20]
 8002be6:	2b07      	cmp	r3, #7
 8002be8:	d811      	bhi.n	8002c0e <_Z19SBUS_PostProcessingv+0xa2>
      {
        parityCheck ^= SBUS_RxBitString[1 + x + (i * SBUS_BitsPerByte)];
 8002bea:	69fa      	ldr	r2, [r7, #28]
 8002bec:	4613      	mov	r3, r2
 8002bee:	005b      	lsls	r3, r3, #1
 8002bf0:	4413      	add	r3, r2
 8002bf2:	009b      	lsls	r3, r3, #2
 8002bf4:	461a      	mov	r2, r3
 8002bf6:	697b      	ldr	r3, [r7, #20]
 8002bf8:	4413      	add	r3, r2
 8002bfa:	3301      	adds	r3, #1
 8002bfc:	4a66      	ldr	r2, [pc, #408]	; (8002d98 <_Z19SBUS_PostProcessingv+0x22c>)
 8002bfe:	5cd2      	ldrb	r2, [r2, r3]
 8002c00:	7efb      	ldrb	r3, [r7, #27]
 8002c02:	4053      	eors	r3, r2
 8002c04:	76fb      	strb	r3, [r7, #27]
      for (size_t x = 0; x < 8; x++)                                              //generate parity from 8 bits
 8002c06:	697b      	ldr	r3, [r7, #20]
 8002c08:	3301      	adds	r3, #1
 8002c0a:	617b      	str	r3, [r7, #20]
 8002c0c:	e7ea      	b.n	8002be4 <_Z19SBUS_PostProcessingv+0x78>
      }
      if (parityCheck == SBUS_RxBitString[9 + (i * SBUS_BitsPerByte)])            //if parity fails set corrupted flag
 8002c0e:	69fa      	ldr	r2, [r7, #28]
 8002c10:	4613      	mov	r3, r2
 8002c12:	005b      	lsls	r3, r3, #1
 8002c14:	4413      	add	r3, r2
 8002c16:	009b      	lsls	r3, r3, #2
 8002c18:	3309      	adds	r3, #9
 8002c1a:	4a5f      	ldr	r2, [pc, #380]	; (8002d98 <_Z19SBUS_PostProcessingv+0x22c>)
 8002c1c:	5cd3      	ldrb	r3, [r2, r3]
 8002c1e:	7efa      	ldrb	r2, [r7, #27]
 8002c20:	429a      	cmp	r2, r3
 8002c22:	d106      	bne.n	8002c32 <_Z19SBUS_PostProcessingv+0xc6>
      {
        SBUS_CorruptedPackage = true;
 8002c24:	4b5b      	ldr	r3, [pc, #364]	; (8002d94 <_Z19SBUS_PostProcessingv+0x228>)
 8002c26:	2201      	movs	r2, #1
 8002c28:	701a      	strb	r2, [r3, #0]
 8002c2a:	e002      	b.n	8002c32 <_Z19SBUS_PostProcessingv+0xc6>
      }
    }
    else                                                                            //if start or stop bits fail set corrupted flag
    {
      SBUS_CorruptedPackage = true;
 8002c2c:	4b59      	ldr	r3, [pc, #356]	; (8002d94 <_Z19SBUS_PostProcessingv+0x228>)
 8002c2e:	2201      	movs	r2, #1
 8002c30:	701a      	strb	r2, [r3, #0]
  for (size_t i = 0; i < SBUS_NumberOfBytes; i++)      //repeat for each byte
 8002c32:	69fb      	ldr	r3, [r7, #28]
 8002c34:	3301      	adds	r3, #1
 8002c36:	61fb      	str	r3, [r7, #28]
 8002c38:	e7a0      	b.n	8002b7c <_Z19SBUS_PostProcessingv+0x10>
    }
  }
  SBUS_Bytes[0] = 0;
 8002c3a:	4b58      	ldr	r3, [pc, #352]	; (8002d9c <_Z19SBUS_PostProcessingv+0x230>)
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	701a      	strb	r2, [r3, #0]
  for (size_t i = 0; i < 8; i++)
 8002c40:	2300      	movs	r3, #0
 8002c42:	613b      	str	r3, [r7, #16]
 8002c44:	693b      	ldr	r3, [r7, #16]
 8002c46:	2b07      	cmp	r3, #7
 8002c48:	d816      	bhi.n	8002c78 <_Z19SBUS_PostProcessingv+0x10c>
  {
    SBUS_Bytes[0] |= SBUS_RxBitString[1 + i] << (7 - i);
 8002c4a:	4b54      	ldr	r3, [pc, #336]	; (8002d9c <_Z19SBUS_PostProcessingv+0x230>)
 8002c4c:	781b      	ldrb	r3, [r3, #0]
 8002c4e:	b25a      	sxtb	r2, r3
 8002c50:	693b      	ldr	r3, [r7, #16]
 8002c52:	3301      	adds	r3, #1
 8002c54:	4950      	ldr	r1, [pc, #320]	; (8002d98 <_Z19SBUS_PostProcessingv+0x22c>)
 8002c56:	5ccb      	ldrb	r3, [r1, r3]
 8002c58:	4619      	mov	r1, r3
 8002c5a:	693b      	ldr	r3, [r7, #16]
 8002c5c:	f1c3 0307 	rsb	r3, r3, #7
 8002c60:	fa01 f303 	lsl.w	r3, r1, r3
 8002c64:	b25b      	sxtb	r3, r3
 8002c66:	4313      	orrs	r3, r2
 8002c68:	b25b      	sxtb	r3, r3
 8002c6a:	b2da      	uxtb	r2, r3
 8002c6c:	4b4b      	ldr	r3, [pc, #300]	; (8002d9c <_Z19SBUS_PostProcessingv+0x230>)
 8002c6e:	701a      	strb	r2, [r3, #0]
  for (size_t i = 0; i < 8; i++)
 8002c70:	693b      	ldr	r3, [r7, #16]
 8002c72:	3301      	adds	r3, #1
 8002c74:	613b      	str	r3, [r7, #16]
 8002c76:	e7e5      	b.n	8002c44 <_Z19SBUS_PostProcessingv+0xd8>
  }
  if (SBUS_Bytes[0] != 0x0FU)
 8002c78:	4b48      	ldr	r3, [pc, #288]	; (8002d9c <_Z19SBUS_PostProcessingv+0x230>)
 8002c7a:	781b      	ldrb	r3, [r3, #0]
 8002c7c:	2b0f      	cmp	r3, #15
 8002c7e:	d002      	beq.n	8002c86 <_Z19SBUS_PostProcessingv+0x11a>
  {
    SBUS_CorruptedPackage = true;
 8002c80:	4b44      	ldr	r3, [pc, #272]	; (8002d94 <_Z19SBUS_PostProcessingv+0x228>)
 8002c82:	2201      	movs	r2, #1
 8002c84:	701a      	strb	r2, [r3, #0]
  
  

  //assemble channels:

  if (SBUS_CorruptedPackage == false)
 8002c86:	4b43      	ldr	r3, [pc, #268]	; (8002d94 <_Z19SBUS_PostProcessingv+0x228>)
 8002c88:	781b      	ldrb	r3, [r3, #0]
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d17a      	bne.n	8002d84 <_Z19SBUS_PostProcessingv+0x218>
  {
    uint8_t byteNumber = 0;         //0 to 21
 8002c8e:	2300      	movs	r3, #0
 8002c90:	73fb      	strb	r3, [r7, #15]
    uint8_t bitNumber = 0;          //0(LSB) to 7/(MSB)
 8002c92:	2300      	movs	r3, #0
 8002c94:	73bb      	strb	r3, [r7, #14]
    for (size_t i = 0; i < SBUS_NumberOfChannels; i++)
 8002c96:	2300      	movs	r3, #0
 8002c98:	60bb      	str	r3, [r7, #8]
 8002c9a:	68bb      	ldr	r3, [r7, #8]
 8002c9c:	2b07      	cmp	r3, #7
 8002c9e:	d871      	bhi.n	8002d84 <_Z19SBUS_PostProcessingv+0x218>
    {
      uint8_t bitInChannel = 0;   //0(LSB) to 10(MSB)
 8002ca0:	2300      	movs	r3, #0
 8002ca2:	71fb      	strb	r3, [r7, #7]
      SBUS_TempChannels[i] = 0;
 8002ca4:	4a3e      	ldr	r2, [pc, #248]	; (8002da0 <_Z19SBUS_PostProcessingv+0x234>)
 8002ca6:	68bb      	ldr	r3, [r7, #8]
 8002ca8:	2100      	movs	r1, #0
 8002caa:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
      
      while (bitInChannel <= 10)
 8002cae:	79fb      	ldrb	r3, [r7, #7]
 8002cb0:	2b0a      	cmp	r3, #10
 8002cb2:	d843      	bhi.n	8002d3c <_Z19SBUS_PostProcessingv+0x1d0>
      {
        if (bitNumber <= 7)
 8002cb4:	7bbb      	ldrb	r3, [r7, #14]
 8002cb6:	2b07      	cmp	r3, #7
 8002cb8:	d81a      	bhi.n	8002cf0 <_Z19SBUS_PostProcessingv+0x184>
        {
          //transfer bit
          SBUS_TempChannels[i] |= SBUS_RxBitString[13 + (bitNumber) + (byteNumber * SBUS_BitsPerByte)] << bitInChannel;
 8002cba:	4a39      	ldr	r2, [pc, #228]	; (8002da0 <_Z19SBUS_PostProcessingv+0x234>)
 8002cbc:	68bb      	ldr	r3, [r7, #8]
 8002cbe:	f932 1013 	ldrsh.w	r1, [r2, r3, lsl #1]
 8002cc2:	7bbb      	ldrb	r3, [r7, #14]
 8002cc4:	f103 000d 	add.w	r0, r3, #13
 8002cc8:	7bfa      	ldrb	r2, [r7, #15]
 8002cca:	4613      	mov	r3, r2
 8002ccc:	005b      	lsls	r3, r3, #1
 8002cce:	4413      	add	r3, r2
 8002cd0:	009b      	lsls	r3, r3, #2
 8002cd2:	4403      	add	r3, r0
 8002cd4:	4a30      	ldr	r2, [pc, #192]	; (8002d98 <_Z19SBUS_PostProcessingv+0x22c>)
 8002cd6:	5cd3      	ldrb	r3, [r2, r3]
 8002cd8:	461a      	mov	r2, r3
 8002cda:	79fb      	ldrb	r3, [r7, #7]
 8002cdc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ce0:	b21b      	sxth	r3, r3
 8002ce2:	430b      	orrs	r3, r1
 8002ce4:	b219      	sxth	r1, r3
 8002ce6:	4a2e      	ldr	r2, [pc, #184]	; (8002da0 <_Z19SBUS_PostProcessingv+0x234>)
 8002ce8:	68bb      	ldr	r3, [r7, #8]
 8002cea:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8002cee:	e01e      	b.n	8002d2e <_Z19SBUS_PostProcessingv+0x1c2>
        }
        else
        {
          byteNumber ++;
 8002cf0:	7bfb      	ldrb	r3, [r7, #15]
 8002cf2:	3301      	adds	r3, #1
 8002cf4:	73fb      	strb	r3, [r7, #15]
          bitNumber = 0;
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	73bb      	strb	r3, [r7, #14]
          //transfer bit
          SBUS_TempChannels[i] |= SBUS_RxBitString[13 + (bitNumber) + (byteNumber * SBUS_BitsPerByte)] << bitInChannel;
 8002cfa:	4a29      	ldr	r2, [pc, #164]	; (8002da0 <_Z19SBUS_PostProcessingv+0x234>)
 8002cfc:	68bb      	ldr	r3, [r7, #8]
 8002cfe:	f932 1013 	ldrsh.w	r1, [r2, r3, lsl #1]
 8002d02:	7bbb      	ldrb	r3, [r7, #14]
 8002d04:	f103 000d 	add.w	r0, r3, #13
 8002d08:	7bfa      	ldrb	r2, [r7, #15]
 8002d0a:	4613      	mov	r3, r2
 8002d0c:	005b      	lsls	r3, r3, #1
 8002d0e:	4413      	add	r3, r2
 8002d10:	009b      	lsls	r3, r3, #2
 8002d12:	4403      	add	r3, r0
 8002d14:	4a20      	ldr	r2, [pc, #128]	; (8002d98 <_Z19SBUS_PostProcessingv+0x22c>)
 8002d16:	5cd3      	ldrb	r3, [r2, r3]
 8002d18:	461a      	mov	r2, r3
 8002d1a:	79fb      	ldrb	r3, [r7, #7]
 8002d1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d20:	b21b      	sxth	r3, r3
 8002d22:	430b      	orrs	r3, r1
 8002d24:	b219      	sxth	r1, r3
 8002d26:	4a1e      	ldr	r2, [pc, #120]	; (8002da0 <_Z19SBUS_PostProcessingv+0x234>)
 8002d28:	68bb      	ldr	r3, [r7, #8]
 8002d2a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        }
        bitNumber ++;
 8002d2e:	7bbb      	ldrb	r3, [r7, #14]
 8002d30:	3301      	adds	r3, #1
 8002d32:	73bb      	strb	r3, [r7, #14]
        bitInChannel ++;
 8002d34:	79fb      	ldrb	r3, [r7, #7]
 8002d36:	3301      	adds	r3, #1
 8002d38:	71fb      	strb	r3, [r7, #7]
      while (bitInChannel <= 10)
 8002d3a:	e7b8      	b.n	8002cae <_Z19SBUS_PostProcessingv+0x142>
      }
      
      SBUS_TempChannels[i] = ((float)(SBUS_TempChannels[i] - 1054) * ((float)-1000 / (float)821));    //map from 233, 1875 to -1000, 1000
 8002d3c:	4a18      	ldr	r2, [pc, #96]	; (8002da0 <_Z19SBUS_PostProcessingv+0x234>)
 8002d3e:	68bb      	ldr	r3, [r7, #8]
 8002d40:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8002d44:	f2a3 431e 	subw	r3, r3, #1054	; 0x41e
 8002d48:	4618      	mov	r0, r3
 8002d4a:	f7fe f803 	bl	8000d54 <__aeabi_i2f>
 8002d4e:	4603      	mov	r3, r0
 8002d50:	4914      	ldr	r1, [pc, #80]	; (8002da4 <_Z19SBUS_PostProcessingv+0x238>)
 8002d52:	4618      	mov	r0, r3
 8002d54:	f7fe f852 	bl	8000dfc <__aeabi_fmul>
 8002d58:	4603      	mov	r3, r0
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	f7fe fa2a 	bl	80011b4 <__aeabi_f2iz>
 8002d60:	4603      	mov	r3, r0
 8002d62:	b219      	sxth	r1, r3
 8002d64:	4a0e      	ldr	r2, [pc, #56]	; (8002da0 <_Z19SBUS_PostProcessingv+0x234>)
 8002d66:	68bb      	ldr	r3, [r7, #8]
 8002d68:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
      SBUS_Channels[i] = SBUS_TempChannels[i];
 8002d6c:	4a0c      	ldr	r2, [pc, #48]	; (8002da0 <_Z19SBUS_PostProcessingv+0x234>)
 8002d6e:	68bb      	ldr	r3, [r7, #8]
 8002d70:	f932 1013 	ldrsh.w	r1, [r2, r3, lsl #1]
 8002d74:	4a0c      	ldr	r2, [pc, #48]	; (8002da8 <_Z19SBUS_PostProcessingv+0x23c>)
 8002d76:	68bb      	ldr	r3, [r7, #8]
 8002d78:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for (size_t i = 0; i < SBUS_NumberOfChannels; i++)
 8002d7c:	68bb      	ldr	r3, [r7, #8]
 8002d7e:	3301      	adds	r3, #1
 8002d80:	60bb      	str	r3, [r7, #8]
 8002d82:	e78a      	b.n	8002c9a <_Z19SBUS_PostProcessingv+0x12e>
    }
  }
  SBUSNewPackage = false;
 8002d84:	4b09      	ldr	r3, [pc, #36]	; (8002dac <_Z19SBUS_PostProcessingv+0x240>)
 8002d86:	2200      	movs	r2, #0
 8002d88:	701a      	strb	r2, [r3, #0]
 8002d8a:	bf00      	nop
 8002d8c:	3720      	adds	r7, #32
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	bd80      	pop	{r7, pc}
 8002d92:	bf00      	nop
 8002d94:	20000554 	.word	0x20000554
 8002d98:	20000498 	.word	0x20000498
 8002d9c:	20000528 	.word	0x20000528
 8002da0:	20000534 	.word	0x20000534
 8002da4:	bf9be84d 	.word	0xbf9be84d
 8002da8:	20000544 	.word	0x20000544
 8002dac:	20000555 	.word	0x20000555

08002db0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002db0:	b580      	push	{r7, lr}
 8002db2:	b086      	sub	sp, #24
 8002db4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002db6:	f001 fbbb 	bl	8004530 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002dba:	f000 f879 	bl	8002eb0 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002dbe:	f000 fab5 	bl	800332c <_ZL12MX_GPIO_Initv>
  MX_USB_DEVICE_Init();
 8002dc2:	f009 f913 	bl	800bfec <MX_USB_DEVICE_Init>
  MX_ADC1_Init();
 8002dc6:	f000 f8cf 	bl	8002f68 <_ZL12MX_ADC1_Initv>
  MX_I2C1_Init();
 8002dca:	f000 f90b 	bl	8002fe4 <MX_I2C1_Init>
  MX_TIM3_Init();
 8002dce:	f000 f93d 	bl	800304c <_ZL12MX_TIM3_Initv>
  MX_TIM4_Init();
 8002dd2:	f000 f9a3 	bl	800311c <_ZL12MX_TIM4_Initv>
  MX_TIM11_Init();
 8002dd6:	f000 fa09 	bl	80031ec <_ZL13MX_TIM11_Initv>
  MX_TIM13_Init();
 8002dda:	f000 fa2f 	bl	800323c <_ZL13MX_TIM13_Initv>
  MX_TIM14_Init();
 8002dde:	f000 fa55 	bl	800328c <_ZL13MX_TIM14_Initv>
  MX_DMA_Init();
 8002de2:	f000 fa7b 	bl	80032dc <_ZL11MX_DMA_Initv>

  


  /* Initialize interrupts */
  MX_NVIC_Init();
 8002de6:	f000 f8b3 	bl	8002f50 <_ZL12MX_NVIC_Initv>
  /* USER CODE BEGIN 2 */


  HAL_NVIC_DisableIRQ(EXTI0_IRQn);
 8002dea:	2006      	movs	r0, #6
 8002dec:	f002 f871 	bl	8004ed2 <HAL_NVIC_DisableIRQ>

  HAL_Delay(50);
 8002df0:	2032      	movs	r0, #50	; 0x32
 8002df2:	f001 fc0b 	bl	800460c <HAL_Delay>
  MPU6050 mpu;
 8002df6:	463b      	mov	r3, r7
 8002df8:	4618      	mov	r0, r3
 8002dfa:	f7fe fe6d 	bl	8001ad8 <_ZN7MPU6050C1Ev>
  HAL_Delay(50);
 8002dfe:	2032      	movs	r0, #50	; 0x32
 8002e00:	f001 fc04 	bl	800460c <HAL_Delay>
  mpu.initialize();
 8002e04:	463b      	mov	r3, r7
 8002e06:	4618      	mov	r0, r3
 8002e08:	f7fe fe73 	bl	8001af2 <_ZN7MPU605010initializeEv>
  HAL_Delay(50);
 8002e0c:	2032      	movs	r0, #50	; 0x32
 8002e0e:	f001 fbfd 	bl	800460c <HAL_Delay>
  mpu.dmpInitialize();
 8002e12:	463b      	mov	r3, r7
 8002e14:	4618      	mov	r0, r3
 8002e16:	f7ff fba9 	bl	800256c <_ZN7MPU605013dmpInitializeEv>
  HAL_Delay(50);
 8002e1a:	2032      	movs	r0, #50	; 0x32
 8002e1c:	f001 fbf6 	bl	800460c <HAL_Delay>
  mpu.setDMPEnabled(true);
 8002e20:	463b      	mov	r3, r7
 8002e22:	2101      	movs	r1, #1
 8002e24:	4618      	mov	r0, r3
 8002e26:	f7ff f8f2 	bl	800200e <_ZN7MPU605013setDMPEnabledEb>
  HAL_Delay(50);
 8002e2a:	2032      	movs	r0, #50	; 0x32
 8002e2c:	f001 fbee 	bl	800460c <HAL_Delay>

  mpu.setXGyroOffset(-169);
 8002e30:	463b      	mov	r3, r7
 8002e32:	f06f 01a8 	mvn.w	r1, #168	; 0xa8
 8002e36:	4618      	mov	r0, r3
 8002e38:	f7ff f8b6 	bl	8001fa8 <_ZN7MPU605014setXGyroOffsetEs>
  mpu.setYGyroOffset(165);
 8002e3c:	463b      	mov	r3, r7
 8002e3e:	21a5      	movs	r1, #165	; 0xa5
 8002e40:	4618      	mov	r0, r3
 8002e42:	f7ff f8c2 	bl	8001fca <_ZN7MPU605014setYGyroOffsetEs>
  mpu.setZGyroOffset(110);
 8002e46:	463b      	mov	r3, r7
 8002e48:	216e      	movs	r1, #110	; 0x6e
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	f7ff f8ce 	bl	8001fec <_ZN7MPU605014setZGyroOffsetEs>
  mpu.setXAccelOffset(4599);
 8002e50:	463b      	mov	r3, r7
 8002e52:	f241 11f7 	movw	r1, #4599	; 0x11f7
 8002e56:	4618      	mov	r0, r3
 8002e58:	f7ff f873 	bl	8001f42 <_ZN7MPU605015setXAccelOffsetEs>
  mpu.setYAccelOffset(-951);
 8002e5c:	463b      	mov	r3, r7
 8002e5e:	4910      	ldr	r1, [pc, #64]	; (8002ea0 <main+0xf0>)
 8002e60:	4618      	mov	r0, r3
 8002e62:	f7ff f87f 	bl	8001f64 <_ZN7MPU605015setYAccelOffsetEs>
  mpu.setZAccelOffset(1930);
 8002e66:	463b      	mov	r3, r7
 8002e68:	f240 718a 	movw	r1, #1930	; 0x78a
 8002e6c:	4618      	mov	r0, r3
 8002e6e:	f7ff f88a 	bl	8001f86 <_ZN7MPU605015setZAccelOffsetEs>

  HAL_TIM_Base_Start_IT(&htim3);
 8002e72:	480c      	ldr	r0, [pc, #48]	; (8002ea4 <main+0xf4>)
 8002e74:	f005 fb4e 	bl	8008514 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim4);
 8002e78:	480b      	ldr	r0, [pc, #44]	; (8002ea8 <main+0xf8>)
 8002e7a:	f005 fb4b 	bl	8008514 <HAL_TIM_Base_Start_IT>
  //HAL_TIM_Base_Start_IT(&htim14);
  //HAL_TIM_Base_Start_IT(&htim13);
  HAL_TIM_Base_Start(&htim11);
 8002e7e:	480b      	ldr	r0, [pc, #44]	; (8002eac <main+0xfc>)
 8002e80:	f005 fae2 	bl	8008448 <HAL_TIM_Base_Start>

  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8002e84:	2100      	movs	r1, #0
 8002e86:	4807      	ldr	r0, [pc, #28]	; (8002ea4 <main+0xf4>)
 8002e88:	f005 fc02 	bl	8008690 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8002e8c:	2100      	movs	r1, #0
 8002e8e:	4806      	ldr	r0, [pc, #24]	; (8002ea8 <main+0xf8>)
 8002e90:	f005 fbfe 	bl	8008690 <HAL_TIM_PWM_Start>

  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8002e94:	2006      	movs	r0, #6
 8002e96:	f002 f80e 	bl	8004eb6 <HAL_NVIC_EnableIRQ>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    loop();
 8002e9a:	f000 fbb5 	bl	8003608 <_Z4loopv>
 8002e9e:	e7fc      	b.n	8002e9a <main+0xea>
 8002ea0:	fffffc49 	.word	0xfffffc49
 8002ea4:	200006b4 	.word	0x200006b4
 8002ea8:	200006fc 	.word	0x200006fc
 8002eac:	20000744 	.word	0x20000744

08002eb0 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	b092      	sub	sp, #72	; 0x48
 8002eb4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002eb6:	f107 0318 	add.w	r3, r7, #24
 8002eba:	2230      	movs	r2, #48	; 0x30
 8002ebc:	2100      	movs	r1, #0
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	f00b f934 	bl	800e12c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002ec4:	1d3b      	adds	r3, r7, #4
 8002ec6:	2200      	movs	r2, #0
 8002ec8:	601a      	str	r2, [r3, #0]
 8002eca:	605a      	str	r2, [r3, #4]
 8002ecc:	609a      	str	r2, [r3, #8]
 8002ece:	60da      	str	r2, [r3, #12]
 8002ed0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002ed2:	2301      	movs	r3, #1
 8002ed4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002ed6:	2301      	movs	r3, #1
 8002ed8:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002eda:	2302      	movs	r3, #2
 8002edc:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002ede:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002ee2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLM = 16;
 8002ee4:	2310      	movs	r3, #16
 8002ee6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLN = 192;
 8002ee8:	23c0      	movs	r3, #192	; 0xc0
 8002eea:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002eec:	2302      	movs	r3, #2
 8002eee:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002ef0:	2304      	movs	r3, #4
 8002ef2:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002ef4:	f107 0318 	add.w	r3, r7, #24
 8002ef8:	4618      	mov	r0, r3
 8002efa:	f004 fde7 	bl	8007acc <HAL_RCC_OscConfig>
 8002efe:	4603      	mov	r3, r0
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	bf14      	ite	ne
 8002f04:	2301      	movne	r3, #1
 8002f06:	2300      	moveq	r3, #0
 8002f08:	b2db      	uxtb	r3, r3
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d001      	beq.n	8002f12 <_Z18SystemClock_Configv+0x62>
  {
    Error_Handler();
 8002f0e:	f000 fb1f 	bl	8003550 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002f12:	230f      	movs	r3, #15
 8002f14:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8002f16:	2301      	movs	r3, #1
 8002f18:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002f1a:	2300      	movs	r3, #0
 8002f1c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002f1e:	2300      	movs	r3, #0
 8002f20:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002f22:	2300      	movs	r3, #0
 8002f24:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002f26:	1d3b      	adds	r3, r7, #4
 8002f28:	2100      	movs	r1, #0
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	f005 f81e 	bl	8007f6c <HAL_RCC_ClockConfig>
 8002f30:	4603      	mov	r3, r0
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	bf14      	ite	ne
 8002f36:	2301      	movne	r3, #1
 8002f38:	2300      	moveq	r3, #0
 8002f3a:	b2db      	uxtb	r3, r3
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d001      	beq.n	8002f44 <_Z18SystemClock_Configv+0x94>
  {
    Error_Handler();
 8002f40:	f000 fb06 	bl	8003550 <Error_Handler>
  }
  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 8002f44:	f005 f8fe 	bl	8008144 <HAL_RCC_EnableCSS>
}
 8002f48:	bf00      	nop
 8002f4a:	3748      	adds	r7, #72	; 0x48
 8002f4c:	46bd      	mov	sp, r7
 8002f4e:	bd80      	pop	{r7, pc}

08002f50 <_ZL12MX_NVIC_Initv>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8002f50:	b580      	push	{r7, lr}
 8002f52:	af00      	add	r7, sp, #0
  /* EXTI0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8002f54:	2200      	movs	r2, #0
 8002f56:	2100      	movs	r1, #0
 8002f58:	2006      	movs	r0, #6
 8002f5a:	f001 ff90 	bl	8004e7e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8002f5e:	2006      	movs	r0, #6
 8002f60:	f001 ffa9 	bl	8004eb6 <HAL_NVIC_EnableIRQ>
}
 8002f64:	bf00      	nop
 8002f66:	bd80      	pop	{r7, pc}

08002f68 <_ZL12MX_ADC1_Initv>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8002f6c:	4b1a      	ldr	r3, [pc, #104]	; (8002fd8 <_ZL12MX_ADC1_Initv+0x70>)
 8002f6e:	4a1b      	ldr	r2, [pc, #108]	; (8002fdc <_ZL12MX_ADC1_Initv+0x74>)
 8002f70:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8002f72:	4b19      	ldr	r3, [pc, #100]	; (8002fd8 <_ZL12MX_ADC1_Initv+0x70>)
 8002f74:	2200      	movs	r2, #0
 8002f76:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002f78:	4b17      	ldr	r3, [pc, #92]	; (8002fd8 <_ZL12MX_ADC1_Initv+0x70>)
 8002f7a:	2200      	movs	r2, #0
 8002f7c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8002f7e:	4b16      	ldr	r3, [pc, #88]	; (8002fd8 <_ZL12MX_ADC1_Initv+0x70>)
 8002f80:	2201      	movs	r2, #1
 8002f82:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8002f84:	4b14      	ldr	r3, [pc, #80]	; (8002fd8 <_ZL12MX_ADC1_Initv+0x70>)
 8002f86:	2201      	movs	r2, #1
 8002f88:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002f8a:	4b13      	ldr	r3, [pc, #76]	; (8002fd8 <_ZL12MX_ADC1_Initv+0x70>)
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002f92:	4b11      	ldr	r3, [pc, #68]	; (8002fd8 <_ZL12MX_ADC1_Initv+0x70>)
 8002f94:	2200      	movs	r2, #0
 8002f96:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002f98:	4b0f      	ldr	r3, [pc, #60]	; (8002fd8 <_ZL12MX_ADC1_Initv+0x70>)
 8002f9a:	4a11      	ldr	r2, [pc, #68]	; (8002fe0 <_ZL12MX_ADC1_Initv+0x78>)
 8002f9c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002f9e:	4b0e      	ldr	r3, [pc, #56]	; (8002fd8 <_ZL12MX_ADC1_Initv+0x70>)
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8002fa4:	4b0c      	ldr	r3, [pc, #48]	; (8002fd8 <_ZL12MX_ADC1_Initv+0x70>)
 8002fa6:	2201      	movs	r2, #1
 8002fa8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8002faa:	4b0b      	ldr	r3, [pc, #44]	; (8002fd8 <_ZL12MX_ADC1_Initv+0x70>)
 8002fac:	2200      	movs	r2, #0
 8002fae:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002fb2:	4b09      	ldr	r3, [pc, #36]	; (8002fd8 <_ZL12MX_ADC1_Initv+0x70>)
 8002fb4:	2201      	movs	r2, #1
 8002fb6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002fb8:	4807      	ldr	r0, [pc, #28]	; (8002fd8 <_ZL12MX_ADC1_Initv+0x70>)
 8002fba:	f001 fb4b 	bl	8004654 <HAL_ADC_Init>
 8002fbe:	4603      	mov	r3, r0
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	bf14      	ite	ne
 8002fc4:	2301      	movne	r3, #1
 8002fc6:	2300      	moveq	r3, #0
 8002fc8:	b2db      	uxtb	r3, r3
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d001      	beq.n	8002fd2 <_ZL12MX_ADC1_Initv+0x6a>
  {
    Error_Handler();
 8002fce:	f000 fabf 	bl	8003550 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002fd2:	bf00      	nop
 8002fd4:	bd80      	pop	{r7, pc}
 8002fd6:	bf00      	nop
 8002fd8:	20000558 	.word	0x20000558
 8002fdc:	40012000 	.word	0x40012000
 8002fe0:	0f000001 	.word	0x0f000001

08002fe4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
void MX_I2C1_Init(void)
{
 8002fe4:	b580      	push	{r7, lr}
 8002fe6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002fe8:	4b15      	ldr	r3, [pc, #84]	; (8003040 <MX_I2C1_Init+0x5c>)
 8002fea:	4a16      	ldr	r2, [pc, #88]	; (8003044 <MX_I2C1_Init+0x60>)
 8002fec:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8002fee:	4b14      	ldr	r3, [pc, #80]	; (8003040 <MX_I2C1_Init+0x5c>)
 8002ff0:	4a15      	ldr	r2, [pc, #84]	; (8003048 <MX_I2C1_Init+0x64>)
 8002ff2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002ff4:	4b12      	ldr	r3, [pc, #72]	; (8003040 <MX_I2C1_Init+0x5c>)
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002ffa:	4b11      	ldr	r3, [pc, #68]	; (8003040 <MX_I2C1_Init+0x5c>)
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003000:	4b0f      	ldr	r3, [pc, #60]	; (8003040 <MX_I2C1_Init+0x5c>)
 8003002:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003006:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003008:	4b0d      	ldr	r3, [pc, #52]	; (8003040 <MX_I2C1_Init+0x5c>)
 800300a:	2200      	movs	r2, #0
 800300c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800300e:	4b0c      	ldr	r3, [pc, #48]	; (8003040 <MX_I2C1_Init+0x5c>)
 8003010:	2200      	movs	r2, #0
 8003012:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003014:	4b0a      	ldr	r3, [pc, #40]	; (8003040 <MX_I2C1_Init+0x5c>)
 8003016:	2200      	movs	r2, #0
 8003018:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800301a:	4b09      	ldr	r3, [pc, #36]	; (8003040 <MX_I2C1_Init+0x5c>)
 800301c:	2200      	movs	r2, #0
 800301e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003020:	4807      	ldr	r0, [pc, #28]	; (8003040 <MX_I2C1_Init+0x5c>)
 8003022:	f002 fc3f 	bl	80058a4 <HAL_I2C_Init>
 8003026:	4603      	mov	r3, r0
 8003028:	2b00      	cmp	r3, #0
 800302a:	bf14      	ite	ne
 800302c:	2301      	movne	r3, #1
 800302e:	2300      	moveq	r3, #0
 8003030:	b2db      	uxtb	r3, r3
 8003032:	2b00      	cmp	r3, #0
 8003034:	d001      	beq.n	800303a <MX_I2C1_Init+0x56>
  {
    Error_Handler();
 8003036:	f000 fa8b 	bl	8003550 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800303a:	bf00      	nop
 800303c:	bd80      	pop	{r7, pc}
 800303e:	bf00      	nop
 8003040:	200005a0 	.word	0x200005a0
 8003044:	40005400 	.word	0x40005400
 8003048:	00061a80 	.word	0x00061a80

0800304c <_ZL12MX_TIM3_Initv>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800304c:	b580      	push	{r7, lr}
 800304e:	b08a      	sub	sp, #40	; 0x28
 8003050:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003052:	f107 0320 	add.w	r3, r7, #32
 8003056:	2200      	movs	r2, #0
 8003058:	601a      	str	r2, [r3, #0]
 800305a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800305c:	1d3b      	adds	r3, r7, #4
 800305e:	2200      	movs	r2, #0
 8003060:	601a      	str	r2, [r3, #0]
 8003062:	605a      	str	r2, [r3, #4]
 8003064:	609a      	str	r2, [r3, #8]
 8003066:	60da      	str	r2, [r3, #12]
 8003068:	611a      	str	r2, [r3, #16]
 800306a:	615a      	str	r2, [r3, #20]
 800306c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800306e:	4b29      	ldr	r3, [pc, #164]	; (8003114 <_ZL12MX_TIM3_Initv+0xc8>)
 8003070:	4a29      	ldr	r2, [pc, #164]	; (8003118 <_ZL12MX_TIM3_Initv+0xcc>)
 8003072:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 16-1;
 8003074:	4b27      	ldr	r3, [pc, #156]	; (8003114 <_ZL12MX_TIM3_Initv+0xc8>)
 8003076:	220f      	movs	r2, #15
 8003078:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800307a:	4b26      	ldr	r3, [pc, #152]	; (8003114 <_ZL12MX_TIM3_Initv+0xc8>)
 800307c:	2200      	movs	r2, #0
 800307e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 20000;
 8003080:	4b24      	ldr	r3, [pc, #144]	; (8003114 <_ZL12MX_TIM3_Initv+0xc8>)
 8003082:	f644 6220 	movw	r2, #20000	; 0x4e20
 8003086:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003088:	4b22      	ldr	r3, [pc, #136]	; (8003114 <_ZL12MX_TIM3_Initv+0xc8>)
 800308a:	2200      	movs	r2, #0
 800308c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800308e:	4b21      	ldr	r3, [pc, #132]	; (8003114 <_ZL12MX_TIM3_Initv+0xc8>)
 8003090:	2200      	movs	r2, #0
 8003092:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8003094:	481f      	ldr	r0, [pc, #124]	; (8003114 <_ZL12MX_TIM3_Initv+0xc8>)
 8003096:	f005 faab 	bl	80085f0 <HAL_TIM_PWM_Init>
 800309a:	4603      	mov	r3, r0
 800309c:	2b00      	cmp	r3, #0
 800309e:	bf14      	ite	ne
 80030a0:	2301      	movne	r3, #1
 80030a2:	2300      	moveq	r3, #0
 80030a4:	b2db      	uxtb	r3, r3
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d001      	beq.n	80030ae <_ZL12MX_TIM3_Initv+0x62>
  {
    Error_Handler();
 80030aa:	f000 fa51 	bl	8003550 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80030ae:	2300      	movs	r3, #0
 80030b0:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80030b2:	2300      	movs	r3, #0
 80030b4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80030b6:	f107 0320 	add.w	r3, r7, #32
 80030ba:	4619      	mov	r1, r3
 80030bc:	4815      	ldr	r0, [pc, #84]	; (8003114 <_ZL12MX_TIM3_Initv+0xc8>)
 80030be:	f006 f807 	bl	80090d0 <HAL_TIMEx_MasterConfigSynchronization>
 80030c2:	4603      	mov	r3, r0
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	bf14      	ite	ne
 80030c8:	2301      	movne	r3, #1
 80030ca:	2300      	moveq	r3, #0
 80030cc:	b2db      	uxtb	r3, r3
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d001      	beq.n	80030d6 <_ZL12MX_TIM3_Initv+0x8a>
  {
    Error_Handler();
 80030d2:	f000 fa3d 	bl	8003550 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80030d6:	2360      	movs	r3, #96	; 0x60
 80030d8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80030da:	2300      	movs	r3, #0
 80030dc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80030de:	2300      	movs	r3, #0
 80030e0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80030e2:	2300      	movs	r3, #0
 80030e4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80030e6:	1d3b      	adds	r3, r7, #4
 80030e8:	2200      	movs	r2, #0
 80030ea:	4619      	mov	r1, r3
 80030ec:	4809      	ldr	r0, [pc, #36]	; (8003114 <_ZL12MX_TIM3_Initv+0xc8>)
 80030ee:	f005 fc9f 	bl	8008a30 <HAL_TIM_PWM_ConfigChannel>
 80030f2:	4603      	mov	r3, r0
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	bf14      	ite	ne
 80030f8:	2301      	movne	r3, #1
 80030fa:	2300      	moveq	r3, #0
 80030fc:	b2db      	uxtb	r3, r3
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d001      	beq.n	8003106 <_ZL12MX_TIM3_Initv+0xba>
  {
    Error_Handler();
 8003102:	f000 fa25 	bl	8003550 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8003106:	4803      	ldr	r0, [pc, #12]	; (8003114 <_ZL12MX_TIM3_Initv+0xc8>)
 8003108:	f001 f85e 	bl	80041c8 <HAL_TIM_MspPostInit>

}
 800310c:	bf00      	nop
 800310e:	3728      	adds	r7, #40	; 0x28
 8003110:	46bd      	mov	sp, r7
 8003112:	bd80      	pop	{r7, pc}
 8003114:	200006b4 	.word	0x200006b4
 8003118:	40000400 	.word	0x40000400

0800311c <_ZL12MX_TIM4_Initv>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800311c:	b580      	push	{r7, lr}
 800311e:	b08a      	sub	sp, #40	; 0x28
 8003120:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003122:	f107 0320 	add.w	r3, r7, #32
 8003126:	2200      	movs	r2, #0
 8003128:	601a      	str	r2, [r3, #0]
 800312a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800312c:	1d3b      	adds	r3, r7, #4
 800312e:	2200      	movs	r2, #0
 8003130:	601a      	str	r2, [r3, #0]
 8003132:	605a      	str	r2, [r3, #4]
 8003134:	609a      	str	r2, [r3, #8]
 8003136:	60da      	str	r2, [r3, #12]
 8003138:	611a      	str	r2, [r3, #16]
 800313a:	615a      	str	r2, [r3, #20]
 800313c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800313e:	4b29      	ldr	r3, [pc, #164]	; (80031e4 <_ZL12MX_TIM4_Initv+0xc8>)
 8003140:	4a29      	ldr	r2, [pc, #164]	; (80031e8 <_ZL12MX_TIM4_Initv+0xcc>)
 8003142:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 16-1;
 8003144:	4b27      	ldr	r3, [pc, #156]	; (80031e4 <_ZL12MX_TIM4_Initv+0xc8>)
 8003146:	220f      	movs	r2, #15
 8003148:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800314a:	4b26      	ldr	r3, [pc, #152]	; (80031e4 <_ZL12MX_TIM4_Initv+0xc8>)
 800314c:	2200      	movs	r2, #0
 800314e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 2500;
 8003150:	4b24      	ldr	r3, [pc, #144]	; (80031e4 <_ZL12MX_TIM4_Initv+0xc8>)
 8003152:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8003156:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003158:	4b22      	ldr	r3, [pc, #136]	; (80031e4 <_ZL12MX_TIM4_Initv+0xc8>)
 800315a:	2200      	movs	r2, #0
 800315c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800315e:	4b21      	ldr	r3, [pc, #132]	; (80031e4 <_ZL12MX_TIM4_Initv+0xc8>)
 8003160:	2200      	movs	r2, #0
 8003162:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8003164:	481f      	ldr	r0, [pc, #124]	; (80031e4 <_ZL12MX_TIM4_Initv+0xc8>)
 8003166:	f005 fa43 	bl	80085f0 <HAL_TIM_PWM_Init>
 800316a:	4603      	mov	r3, r0
 800316c:	2b00      	cmp	r3, #0
 800316e:	bf14      	ite	ne
 8003170:	2301      	movne	r3, #1
 8003172:	2300      	moveq	r3, #0
 8003174:	b2db      	uxtb	r3, r3
 8003176:	2b00      	cmp	r3, #0
 8003178:	d001      	beq.n	800317e <_ZL12MX_TIM4_Initv+0x62>
  {
    Error_Handler();
 800317a:	f000 f9e9 	bl	8003550 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800317e:	2300      	movs	r3, #0
 8003180:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003182:	2300      	movs	r3, #0
 8003184:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8003186:	f107 0320 	add.w	r3, r7, #32
 800318a:	4619      	mov	r1, r3
 800318c:	4815      	ldr	r0, [pc, #84]	; (80031e4 <_ZL12MX_TIM4_Initv+0xc8>)
 800318e:	f005 ff9f 	bl	80090d0 <HAL_TIMEx_MasterConfigSynchronization>
 8003192:	4603      	mov	r3, r0
 8003194:	2b00      	cmp	r3, #0
 8003196:	bf14      	ite	ne
 8003198:	2301      	movne	r3, #1
 800319a:	2300      	moveq	r3, #0
 800319c:	b2db      	uxtb	r3, r3
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d001      	beq.n	80031a6 <_ZL12MX_TIM4_Initv+0x8a>
  {
    Error_Handler();
 80031a2:	f000 f9d5 	bl	8003550 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80031a6:	2360      	movs	r3, #96	; 0x60
 80031a8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80031aa:	2300      	movs	r3, #0
 80031ac:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80031ae:	2300      	movs	r3, #0
 80031b0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80031b2:	2300      	movs	r3, #0
 80031b4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80031b6:	1d3b      	adds	r3, r7, #4
 80031b8:	2200      	movs	r2, #0
 80031ba:	4619      	mov	r1, r3
 80031bc:	4809      	ldr	r0, [pc, #36]	; (80031e4 <_ZL12MX_TIM4_Initv+0xc8>)
 80031be:	f005 fc37 	bl	8008a30 <HAL_TIM_PWM_ConfigChannel>
 80031c2:	4603      	mov	r3, r0
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	bf14      	ite	ne
 80031c8:	2301      	movne	r3, #1
 80031ca:	2300      	moveq	r3, #0
 80031cc:	b2db      	uxtb	r3, r3
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d001      	beq.n	80031d6 <_ZL12MX_TIM4_Initv+0xba>
  {
    Error_Handler();
 80031d2:	f000 f9bd 	bl	8003550 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80031d6:	4803      	ldr	r0, [pc, #12]	; (80031e4 <_ZL12MX_TIM4_Initv+0xc8>)
 80031d8:	f000 fff6 	bl	80041c8 <HAL_TIM_MspPostInit>

}
 80031dc:	bf00      	nop
 80031de:	3728      	adds	r7, #40	; 0x28
 80031e0:	46bd      	mov	sp, r7
 80031e2:	bd80      	pop	{r7, pc}
 80031e4:	200006fc 	.word	0x200006fc
 80031e8:	40000800 	.word	0x40000800

080031ec <_ZL13MX_TIM11_Initv>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 80031ec:	b580      	push	{r7, lr}
 80031ee:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 80031f0:	4b10      	ldr	r3, [pc, #64]	; (8003234 <_ZL13MX_TIM11_Initv+0x48>)
 80031f2:	4a11      	ldr	r2, [pc, #68]	; (8003238 <_ZL13MX_TIM11_Initv+0x4c>)
 80031f4:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 16 - 1;
 80031f6:	4b0f      	ldr	r3, [pc, #60]	; (8003234 <_ZL13MX_TIM11_Initv+0x48>)
 80031f8:	220f      	movs	r2, #15
 80031fa:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 80031fc:	4b0d      	ldr	r3, [pc, #52]	; (8003234 <_ZL13MX_TIM11_Initv+0x48>)
 80031fe:	2200      	movs	r2, #0
 8003200:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 65535;
 8003202:	4b0c      	ldr	r3, [pc, #48]	; (8003234 <_ZL13MX_TIM11_Initv+0x48>)
 8003204:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003208:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800320a:	4b0a      	ldr	r3, [pc, #40]	; (8003234 <_ZL13MX_TIM11_Initv+0x48>)
 800320c:	2200      	movs	r2, #0
 800320e:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003210:	4b08      	ldr	r3, [pc, #32]	; (8003234 <_ZL13MX_TIM11_Initv+0x48>)
 8003212:	2200      	movs	r2, #0
 8003214:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8003216:	4807      	ldr	r0, [pc, #28]	; (8003234 <_ZL13MX_TIM11_Initv+0x48>)
 8003218:	f005 f8c6 	bl	80083a8 <HAL_TIM_Base_Init>
 800321c:	4603      	mov	r3, r0
 800321e:	2b00      	cmp	r3, #0
 8003220:	bf14      	ite	ne
 8003222:	2301      	movne	r3, #1
 8003224:	2300      	moveq	r3, #0
 8003226:	b2db      	uxtb	r3, r3
 8003228:	2b00      	cmp	r3, #0
 800322a:	d001      	beq.n	8003230 <_ZL13MX_TIM11_Initv+0x44>
  {
    Error_Handler();
 800322c:	f000 f990 	bl	8003550 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 8003230:	bf00      	nop
 8003232:	bd80      	pop	{r7, pc}
 8003234:	20000744 	.word	0x20000744
 8003238:	40014800 	.word	0x40014800

0800323c <_ZL13MX_TIM13_Initv>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 800323c:	b580      	push	{r7, lr}
 800323e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM13_Init 0 */

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8003240:	4b10      	ldr	r3, [pc, #64]	; (8003284 <_ZL13MX_TIM13_Initv+0x48>)
 8003242:	4a11      	ldr	r2, [pc, #68]	; (8003288 <_ZL13MX_TIM13_Initv+0x4c>)
 8003244:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 16 - 1;
 8003246:	4b0f      	ldr	r3, [pc, #60]	; (8003284 <_ZL13MX_TIM13_Initv+0x48>)
 8003248:	220f      	movs	r2, #15
 800324a:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 800324c:	4b0d      	ldr	r3, [pc, #52]	; (8003284 <_ZL13MX_TIM13_Initv+0x48>)
 800324e:	2200      	movs	r2, #0
 8003250:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 65535;
 8003252:	4b0c      	ldr	r3, [pc, #48]	; (8003284 <_ZL13MX_TIM13_Initv+0x48>)
 8003254:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003258:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800325a:	4b0a      	ldr	r3, [pc, #40]	; (8003284 <_ZL13MX_TIM13_Initv+0x48>)
 800325c:	2200      	movs	r2, #0
 800325e:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003260:	4b08      	ldr	r3, [pc, #32]	; (8003284 <_ZL13MX_TIM13_Initv+0x48>)
 8003262:	2200      	movs	r2, #0
 8003264:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8003266:	4807      	ldr	r0, [pc, #28]	; (8003284 <_ZL13MX_TIM13_Initv+0x48>)
 8003268:	f005 f89e 	bl	80083a8 <HAL_TIM_Base_Init>
 800326c:	4603      	mov	r3, r0
 800326e:	2b00      	cmp	r3, #0
 8003270:	bf14      	ite	ne
 8003272:	2301      	movne	r3, #1
 8003274:	2300      	moveq	r3, #0
 8003276:	b2db      	uxtb	r3, r3
 8003278:	2b00      	cmp	r3, #0
 800327a:	d001      	beq.n	8003280 <_ZL13MX_TIM13_Initv+0x44>
  {
    Error_Handler();
 800327c:	f000 f968 	bl	8003550 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 8003280:	bf00      	nop
 8003282:	bd80      	pop	{r7, pc}
 8003284:	2000078c 	.word	0x2000078c
 8003288:	40001c00 	.word	0x40001c00

0800328c <_ZL13MX_TIM14_Initv>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 800328c:	b580      	push	{r7, lr}
 800328e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8003290:	4b10      	ldr	r3, [pc, #64]	; (80032d4 <_ZL13MX_TIM14_Initv+0x48>)
 8003292:	4a11      	ldr	r2, [pc, #68]	; (80032d8 <_ZL13MX_TIM14_Initv+0x4c>)
 8003294:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 16 - 1;
 8003296:	4b0f      	ldr	r3, [pc, #60]	; (80032d4 <_ZL13MX_TIM14_Initv+0x48>)
 8003298:	220f      	movs	r2, #15
 800329a:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 800329c:	4b0d      	ldr	r3, [pc, #52]	; (80032d4 <_ZL13MX_TIM14_Initv+0x48>)
 800329e:	2200      	movs	r2, #0
 80032a0:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 65535;
 80032a2:	4b0c      	ldr	r3, [pc, #48]	; (80032d4 <_ZL13MX_TIM14_Initv+0x48>)
 80032a4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80032a8:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80032aa:	4b0a      	ldr	r3, [pc, #40]	; (80032d4 <_ZL13MX_TIM14_Initv+0x48>)
 80032ac:	2200      	movs	r2, #0
 80032ae:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80032b0:	4b08      	ldr	r3, [pc, #32]	; (80032d4 <_ZL13MX_TIM14_Initv+0x48>)
 80032b2:	2200      	movs	r2, #0
 80032b4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 80032b6:	4807      	ldr	r0, [pc, #28]	; (80032d4 <_ZL13MX_TIM14_Initv+0x48>)
 80032b8:	f005 f876 	bl	80083a8 <HAL_TIM_Base_Init>
 80032bc:	4603      	mov	r3, r0
 80032be:	2b00      	cmp	r3, #0
 80032c0:	bf14      	ite	ne
 80032c2:	2301      	movne	r3, #1
 80032c4:	2300      	moveq	r3, #0
 80032c6:	b2db      	uxtb	r3, r3
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d001      	beq.n	80032d0 <_ZL13MX_TIM14_Initv+0x44>
  {
    Error_Handler();
 80032cc:	f000 f940 	bl	8003550 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 80032d0:	bf00      	nop
 80032d2:	bd80      	pop	{r7, pc}
 80032d4:	200007d4 	.word	0x200007d4
 80032d8:	40002000 	.word	0x40002000

080032dc <_ZL11MX_DMA_Initv>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80032dc:	b580      	push	{r7, lr}
 80032de:	b082      	sub	sp, #8
 80032e0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80032e2:	2300      	movs	r3, #0
 80032e4:	607b      	str	r3, [r7, #4]
 80032e6:	4b10      	ldr	r3, [pc, #64]	; (8003328 <_ZL11MX_DMA_Initv+0x4c>)
 80032e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032ea:	4a0f      	ldr	r2, [pc, #60]	; (8003328 <_ZL11MX_DMA_Initv+0x4c>)
 80032ec:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80032f0:	6313      	str	r3, [r2, #48]	; 0x30
 80032f2:	4b0d      	ldr	r3, [pc, #52]	; (8003328 <_ZL11MX_DMA_Initv+0x4c>)
 80032f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032f6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80032fa:	607b      	str	r3, [r7, #4]
 80032fc:	687b      	ldr	r3, [r7, #4]
  
  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80032fe:	2200      	movs	r2, #0
 8003300:	2100      	movs	r1, #0
 8003302:	200b      	movs	r0, #11
 8003304:	f001 fdbb 	bl	8004e7e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8003308:	200b      	movs	r0, #11
 800330a:	f001 fdd4 	bl	8004eb6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 800330e:	2200      	movs	r2, #0
 8003310:	2100      	movs	r1, #0
 8003312:	2011      	movs	r0, #17
 8003314:	f001 fdb3 	bl	8004e7e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8003318:	2011      	movs	r0, #17
 800331a:	f001 fdcc 	bl	8004eb6 <HAL_NVIC_EnableIRQ>

}
 800331e:	bf00      	nop
 8003320:	3708      	adds	r7, #8
 8003322:	46bd      	mov	sp, r7
 8003324:	bd80      	pop	{r7, pc}
 8003326:	bf00      	nop
 8003328:	40023800 	.word	0x40023800

0800332c <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800332c:	b580      	push	{r7, lr}
 800332e:	b08a      	sub	sp, #40	; 0x28
 8003330:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003332:	f107 0314 	add.w	r3, r7, #20
 8003336:	2200      	movs	r2, #0
 8003338:	601a      	str	r2, [r3, #0]
 800333a:	605a      	str	r2, [r3, #4]
 800333c:	609a      	str	r2, [r3, #8]
 800333e:	60da      	str	r2, [r3, #12]
 8003340:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003342:	2300      	movs	r3, #0
 8003344:	613b      	str	r3, [r7, #16]
 8003346:	4b44      	ldr	r3, [pc, #272]	; (8003458 <_ZL12MX_GPIO_Initv+0x12c>)
 8003348:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800334a:	4a43      	ldr	r2, [pc, #268]	; (8003458 <_ZL12MX_GPIO_Initv+0x12c>)
 800334c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003350:	6313      	str	r3, [r2, #48]	; 0x30
 8003352:	4b41      	ldr	r3, [pc, #260]	; (8003458 <_ZL12MX_GPIO_Initv+0x12c>)
 8003354:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003356:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800335a:	613b      	str	r3, [r7, #16]
 800335c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800335e:	2300      	movs	r3, #0
 8003360:	60fb      	str	r3, [r7, #12]
 8003362:	4b3d      	ldr	r3, [pc, #244]	; (8003458 <_ZL12MX_GPIO_Initv+0x12c>)
 8003364:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003366:	4a3c      	ldr	r2, [pc, #240]	; (8003458 <_ZL12MX_GPIO_Initv+0x12c>)
 8003368:	f043 0304 	orr.w	r3, r3, #4
 800336c:	6313      	str	r3, [r2, #48]	; 0x30
 800336e:	4b3a      	ldr	r3, [pc, #232]	; (8003458 <_ZL12MX_GPIO_Initv+0x12c>)
 8003370:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003372:	f003 0304 	and.w	r3, r3, #4
 8003376:	60fb      	str	r3, [r7, #12]
 8003378:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800337a:	2300      	movs	r3, #0
 800337c:	60bb      	str	r3, [r7, #8]
 800337e:	4b36      	ldr	r3, [pc, #216]	; (8003458 <_ZL12MX_GPIO_Initv+0x12c>)
 8003380:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003382:	4a35      	ldr	r2, [pc, #212]	; (8003458 <_ZL12MX_GPIO_Initv+0x12c>)
 8003384:	f043 0301 	orr.w	r3, r3, #1
 8003388:	6313      	str	r3, [r2, #48]	; 0x30
 800338a:	4b33      	ldr	r3, [pc, #204]	; (8003458 <_ZL12MX_GPIO_Initv+0x12c>)
 800338c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800338e:	f003 0301 	and.w	r3, r3, #1
 8003392:	60bb      	str	r3, [r7, #8]
 8003394:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003396:	2300      	movs	r3, #0
 8003398:	607b      	str	r3, [r7, #4]
 800339a:	4b2f      	ldr	r3, [pc, #188]	; (8003458 <_ZL12MX_GPIO_Initv+0x12c>)
 800339c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800339e:	4a2e      	ldr	r2, [pc, #184]	; (8003458 <_ZL12MX_GPIO_Initv+0x12c>)
 80033a0:	f043 0302 	orr.w	r3, r3, #2
 80033a4:	6313      	str	r3, [r2, #48]	; 0x30
 80033a6:	4b2c      	ldr	r3, [pc, #176]	; (8003458 <_ZL12MX_GPIO_Initv+0x12c>)
 80033a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033aa:	f003 0302 	and.w	r3, r3, #2
 80033ae:	607b      	str	r3, [r7, #4]
 80033b0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ONBOARD_LED_1_Pin|ONBOARD_LED_2_Pin|ONBOARD_LED_3_Pin|ONBOARD_LED_4_Pin
 80033b2:	2200      	movs	r2, #0
 80033b4:	f44f 71f8 	mov.w	r1, #496	; 0x1f0
 80033b8:	4828      	ldr	r0, [pc, #160]	; (800345c <_ZL12MX_GPIO_Initv+0x130>)
 80033ba:	f002 fa29 	bl	8005810 <HAL_GPIO_WritePin>
                          |ONBOARD_WRITE_3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ONBOARD_WRITE_2_GPIO_Port, ONBOARD_WRITE_2_Pin, GPIO_PIN_RESET);
 80033be:	2200      	movs	r2, #0
 80033c0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80033c4:	4826      	ldr	r0, [pc, #152]	; (8003460 <_ZL12MX_GPIO_Initv+0x134>)
 80033c6:	f002 fa23 	bl	8005810 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : ONBOARD_READ_IT_3_Pin */
  GPIO_InitStruct.Pin = ONBOARD_READ_IT_3_Pin;
 80033ca:	2301      	movs	r3, #1
 80033cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80033ce:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80033d2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80033d4:	2302      	movs	r3, #2
 80033d6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ONBOARD_READ_IT_3_GPIO_Port, &GPIO_InitStruct);
 80033d8:	f107 0314 	add.w	r3, r7, #20
 80033dc:	4619      	mov	r1, r3
 80033de:	4820      	ldr	r0, [pc, #128]	; (8003460 <_ZL12MX_GPIO_Initv+0x134>)
 80033e0:	f002 f878 	bl	80054d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ONBOARD_BUTTON_1_Pin ONBOARD_BUTTON_2_Pin ONBOARD_BUTTON_3_Pin ONBOARD_BUTTON_4_Pin */
  GPIO_InitStruct.Pin = ONBOARD_BUTTON_1_Pin|ONBOARD_BUTTON_2_Pin|ONBOARD_BUTTON_3_Pin|ONBOARD_BUTTON_4_Pin;
 80033e4:	230f      	movs	r3, #15
 80033e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80033e8:	2300      	movs	r3, #0
 80033ea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033ec:	2300      	movs	r3, #0
 80033ee:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80033f0:	f107 0314 	add.w	r3, r7, #20
 80033f4:	4619      	mov	r1, r3
 80033f6:	4819      	ldr	r0, [pc, #100]	; (800345c <_ZL12MX_GPIO_Initv+0x130>)
 80033f8:	f002 f86c 	bl	80054d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ONBOARD_LED_1_Pin ONBOARD_LED_2_Pin ONBOARD_LED_3_Pin ONBOARD_LED_4_Pin
                           ONBOARD_WRITE_3_Pin */
  GPIO_InitStruct.Pin = ONBOARD_LED_1_Pin|ONBOARD_LED_2_Pin|ONBOARD_LED_3_Pin|ONBOARD_LED_4_Pin
 80033fc:	f44f 73f8 	mov.w	r3, #496	; 0x1f0
 8003400:	617b      	str	r3, [r7, #20]
                          |ONBOARD_WRITE_3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003402:	2301      	movs	r3, #1
 8003404:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003406:	2300      	movs	r3, #0
 8003408:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800340a:	2300      	movs	r3, #0
 800340c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800340e:	f107 0314 	add.w	r3, r7, #20
 8003412:	4619      	mov	r1, r3
 8003414:	4811      	ldr	r0, [pc, #68]	; (800345c <_ZL12MX_GPIO_Initv+0x130>)
 8003416:	f002 f85d 	bl	80054d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : ONBOARD_WRITE_2_Pin */
  GPIO_InitStruct.Pin = ONBOARD_WRITE_2_Pin;
 800341a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800341e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003420:	2301      	movs	r3, #1
 8003422:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003424:	2300      	movs	r3, #0
 8003426:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003428:	2300      	movs	r3, #0
 800342a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(ONBOARD_WRITE_2_GPIO_Port, &GPIO_InitStruct);
 800342c:	f107 0314 	add.w	r3, r7, #20
 8003430:	4619      	mov	r1, r3
 8003432:	480b      	ldr	r0, [pc, #44]	; (8003460 <_ZL12MX_GPIO_Initv+0x134>)
 8003434:	f002 f84e 	bl	80054d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : ONBOARD_READ_4_Pin */
  GPIO_InitStruct.Pin = ONBOARD_READ_4_Pin;
 8003438:	2380      	movs	r3, #128	; 0x80
 800343a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800343c:	2300      	movs	r3, #0
 800343e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003440:	2300      	movs	r3, #0
 8003442:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ONBOARD_READ_4_GPIO_Port, &GPIO_InitStruct);
 8003444:	f107 0314 	add.w	r3, r7, #20
 8003448:	4619      	mov	r1, r3
 800344a:	4806      	ldr	r0, [pc, #24]	; (8003464 <_ZL12MX_GPIO_Initv+0x138>)
 800344c:	f002 f842 	bl	80054d4 <HAL_GPIO_Init>

}
 8003450:	bf00      	nop
 8003452:	3728      	adds	r7, #40	; 0x28
 8003454:	46bd      	mov	sp, r7
 8003456:	bd80      	pop	{r7, pc}
 8003458:	40023800 	.word	0x40023800
 800345c:	40020000 	.word	0x40020000
 8003460:	40020800 	.word	0x40020800
 8003464:	40020400 	.word	0x40020400

08003468 <HAL_TIM_PeriodElapsedCallback>:
 * @brief Interrupt that is called when any Timer overflows
 * @param htim timer handle
 * @retval none
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003468:	b480      	push	{r7}
 800346a:	b083      	sub	sp, #12
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]
  // }
  // else
  // {
  //   SBUS_RecieveDone = false;
  // }
}
 8003470:	bf00      	nop
 8003472:	370c      	adds	r7, #12
 8003474:	46bd      	mov	sp, r7
 8003476:	bc80      	pop	{r7}
 8003478:	4770      	bx	lr
	...

0800347c <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{ 
 800347c:	b580      	push	{r7, lr}
 800347e:	b084      	sub	sp, #16
 8003480:	af00      	add	r7, sp, #0
 8003482:	4603      	mov	r3, r0
 8003484:	80fb      	strh	r3, [r7, #6]
  if (GPIO_Pin == ONBOARD_READ_IT_3_Pin)
 8003486:	88fb      	ldrh	r3, [r7, #6]
 8003488:	2b01      	cmp	r3, #1
 800348a:	d10d      	bne.n	80034a8 <HAL_GPIO_EXTI_Callback+0x2c>
  {
    uint32_t time = HAL_GetTick();
 800348c:	f001 f8b4 	bl	80045f8 <HAL_GetTick>
 8003490:	60f8      	str	r0, [r7, #12]
    if (time - PinInterruptLastTime > 3)
 8003492:	4b07      	ldr	r3, [pc, #28]	; (80034b0 <HAL_GPIO_EXTI_Callback+0x34>)
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	68fa      	ldr	r2, [r7, #12]
 8003498:	1ad3      	subs	r3, r2, r3
 800349a:	2b03      	cmp	r3, #3
 800349c:	d904      	bls.n	80034a8 <HAL_GPIO_EXTI_Callback+0x2c>
    {
      PinInterruptLastTime = time;
 800349e:	4a04      	ldr	r2, [pc, #16]	; (80034b0 <HAL_GPIO_EXTI_Callback+0x34>)
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	6013      	str	r3, [r2, #0]
      SBUS_RecieveBits();
 80034a4:	f7ff faf4 	bl	8002a90 <_Z16SBUS_RecieveBitsv>
    }
  }
}
 80034a8:	bf00      	nop
 80034aa:	3710      	adds	r7, #16
 80034ac:	46bd      	mov	sp, r7
 80034ae:	bd80      	pop	{r7, pc}
 80034b0:	2000081c 	.word	0x2000081c

080034b4 <ADC_Select_Channel_11>:

void ADC_Select_Channel_11()
{
 80034b4:	b580      	push	{r7, lr}
 80034b6:	b084      	sub	sp, #16
 80034b8:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 80034ba:	463b      	mov	r3, r7
 80034bc:	2200      	movs	r2, #0
 80034be:	601a      	str	r2, [r3, #0]
 80034c0:	605a      	str	r2, [r3, #4]
 80034c2:	609a      	str	r2, [r3, #8]
 80034c4:	60da      	str	r2, [r3, #12]
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 80034c6:	230b      	movs	r3, #11
 80034c8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80034ca:	2301      	movs	r3, #1
 80034cc:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 80034ce:	2301      	movs	r3, #1
 80034d0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80034d2:	463b      	mov	r3, r7
 80034d4:	4619      	mov	r1, r3
 80034d6:	480a      	ldr	r0, [pc, #40]	; (8003500 <ADC_Select_Channel_11+0x4c>)
 80034d8:	f001 f9b0 	bl	800483c <HAL_ADC_ConfigChannel>
 80034dc:	4603      	mov	r3, r0
 80034de:	2b00      	cmp	r3, #0
 80034e0:	bf14      	ite	ne
 80034e2:	2301      	movne	r3, #1
 80034e4:	2300      	moveq	r3, #0
 80034e6:	b2db      	uxtb	r3, r3
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d001      	beq.n	80034f0 <ADC_Select_Channel_11+0x3c>
  {
    Error_Handler();
 80034ec:	f000 f830 	bl	8003550 <Error_Handler>
  }
  HAL_ADC_Start(&hadc1);
 80034f0:	4803      	ldr	r0, [pc, #12]	; (8003500 <ADC_Select_Channel_11+0x4c>)
 80034f2:	f001 f8f3 	bl	80046dc <HAL_ADC_Start>
}
 80034f6:	bf00      	nop
 80034f8:	3710      	adds	r7, #16
 80034fa:	46bd      	mov	sp, r7
 80034fc:	bd80      	pop	{r7, pc}
 80034fe:	bf00      	nop
 8003500:	20000558 	.word	0x20000558

08003504 <ADC_Select_Channel_12>:
void ADC_Select_Channel_12()
{
 8003504:	b580      	push	{r7, lr}
 8003506:	b084      	sub	sp, #16
 8003508:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 800350a:	463b      	mov	r3, r7
 800350c:	2200      	movs	r2, #0
 800350e:	601a      	str	r2, [r3, #0]
 8003510:	605a      	str	r2, [r3, #4]
 8003512:	609a      	str	r2, [r3, #8]
 8003514:	60da      	str	r2, [r3, #12]
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8003516:	230c      	movs	r3, #12
 8003518:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800351a:	2301      	movs	r3, #1
 800351c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800351e:	463b      	mov	r3, r7
 8003520:	4619      	mov	r1, r3
 8003522:	480a      	ldr	r0, [pc, #40]	; (800354c <ADC_Select_Channel_12+0x48>)
 8003524:	f001 f98a 	bl	800483c <HAL_ADC_ConfigChannel>
 8003528:	4603      	mov	r3, r0
 800352a:	2b00      	cmp	r3, #0
 800352c:	bf14      	ite	ne
 800352e:	2301      	movne	r3, #1
 8003530:	2300      	moveq	r3, #0
 8003532:	b2db      	uxtb	r3, r3
 8003534:	2b00      	cmp	r3, #0
 8003536:	d001      	beq.n	800353c <ADC_Select_Channel_12+0x38>
  {
    Error_Handler();
 8003538:	f000 f80a 	bl	8003550 <Error_Handler>
  }
  HAL_ADC_Start(&hadc1);
 800353c:	4803      	ldr	r0, [pc, #12]	; (800354c <ADC_Select_Channel_12+0x48>)
 800353e:	f001 f8cd 	bl	80046dc <HAL_ADC_Start>
}
 8003542:	bf00      	nop
 8003544:	3710      	adds	r7, #16
 8003546:	46bd      	mov	sp, r7
 8003548:	bd80      	pop	{r7, pc}
 800354a:	bf00      	nop
 800354c:	20000558 	.word	0x20000558

08003550 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003550:	b480      	push	{r7}
 8003552:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003554:	b672      	cpsid	i
}
 8003556:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003558:	e7fe      	b.n	8003558 <Error_Handler+0x8>
	...

0800355c <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 800355c:	b480      	push	{r7}
 800355e:	b083      	sub	sp, #12
 8003560:	af00      	add	r7, sp, #0
 8003562:	6078      	str	r0, [r7, #4]
 8003564:	6039      	str	r1, [r7, #0]
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	2b01      	cmp	r3, #1
 800356a:	d114      	bne.n	8003596 <_Z41__static_initialization_and_destruction_0ii+0x3a>
 800356c:	683b      	ldr	r3, [r7, #0]
 800356e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003572:	4293      	cmp	r3, r2
 8003574:	d10f      	bne.n	8003596 <_Z41__static_initialization_and_destruction_0ii+0x3a>
uint16_t fastPPM_OFFTime = fastPPM_Pulselength - fastPPM_ONTime;//OFF time in microseconds
 8003576:	4b0a      	ldr	r3, [pc, #40]	; (80035a0 <_Z41__static_initialization_and_destruction_0ii+0x44>)
 8003578:	881b      	ldrh	r3, [r3, #0]
 800357a:	f5c3 631c 	rsb	r3, r3, #2496	; 0x9c0
 800357e:	3304      	adds	r3, #4
 8003580:	b29a      	uxth	r2, r3
 8003582:	4b08      	ldr	r3, [pc, #32]	; (80035a4 <_Z41__static_initialization_and_destruction_0ii+0x48>)
 8003584:	801a      	strh	r2, [r3, #0]
uint16_t slowPPM1_OFFTime = fastPPM_Pulselength - fastPPM_ONTime;//OFF time in microseconds
 8003586:	4b06      	ldr	r3, [pc, #24]	; (80035a0 <_Z41__static_initialization_and_destruction_0ii+0x44>)
 8003588:	881b      	ldrh	r3, [r3, #0]
 800358a:	f5c3 631c 	rsb	r3, r3, #2496	; 0x9c0
 800358e:	3304      	adds	r3, #4
 8003590:	b29a      	uxth	r2, r3
 8003592:	4b05      	ldr	r3, [pc, #20]	; (80035a8 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 8003594:	801a      	strh	r2, [r3, #0]
}
 8003596:	bf00      	nop
 8003598:	370c      	adds	r7, #12
 800359a:	46bd      	mov	sp, r7
 800359c:	bc80      	pop	{r7}
 800359e:	4770      	bx	lr
 80035a0:	20000000 	.word	0x20000000
 80035a4:	20000820 	.word	0x20000820
 80035a8:	20000822 	.word	0x20000822

080035ac <_GLOBAL__sub_I_hadc1>:
 80035ac:	b580      	push	{r7, lr}
 80035ae:	af00      	add	r7, sp, #0
 80035b0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80035b4:	2001      	movs	r0, #1
 80035b6:	f7ff ffd1 	bl	800355c <_Z41__static_initialization_and_destruction_0ii>
 80035ba:	bd80      	pop	{r7, pc}

080035bc <_ZSt4acosf>:
  using ::acos;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  acos(float __x)
  { return __builtin_acosf(__x); }
 80035bc:	b580      	push	{r7, lr}
 80035be:	b082      	sub	sp, #8
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	6078      	str	r0, [r7, #4]
 80035c4:	6878      	ldr	r0, [r7, #4]
 80035c6:	f009 fbad 	bl	800cd24 <acosf>
 80035ca:	4603      	mov	r3, r0
 80035cc:	4618      	mov	r0, r3
 80035ce:	3708      	adds	r7, #8
 80035d0:	46bd      	mov	sp, r7
 80035d2:	bd80      	pop	{r7, pc}

080035d4 <_ZSt4atanf>:
  using ::atan;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  atan(float __x)
  { return __builtin_atanf(__x); }
 80035d4:	b580      	push	{r7, lr}
 80035d6:	b082      	sub	sp, #8
 80035d8:	af00      	add	r7, sp, #0
 80035da:	6078      	str	r0, [r7, #4]
 80035dc:	6878      	ldr	r0, [r7, #4]
 80035de:	f009 fa91 	bl	800cb04 <atanf>
 80035e2:	4603      	mov	r3, r0
 80035e4:	4618      	mov	r0, r3
 80035e6:	3708      	adds	r7, #8
 80035e8:	46bd      	mov	sp, r7
 80035ea:	bd80      	pop	{r7, pc}

080035ec <_ZSt4sqrtf>:
  using ::sqrt;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  sqrt(float __x)
  { return __builtin_sqrtf(__x); }
 80035ec:	b580      	push	{r7, lr}
 80035ee:	b082      	sub	sp, #8
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	6078      	str	r0, [r7, #4]
 80035f4:	6878      	ldr	r0, [r7, #4]
 80035f6:	f009 fbbb 	bl	800cd70 <sqrtf>
 80035fa:	4603      	mov	r3, r0
 80035fc:	4618      	mov	r0, r3
 80035fe:	3708      	adds	r7, #8
 8003600:	46bd      	mov	sp, r7
 8003602:	bd80      	pop	{r7, pc}
 8003604:	0000      	movs	r0, r0
	...

08003608 <_Z4loopv>:
uint16_t adcValuesArray[2];
uint16_t angle;
uint8_t Step = 0;

void loop()
{
 8003608:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800360c:	b0e7      	sub	sp, #412	; 0x19c
 800360e:	af0c      	add	r7, sp, #48	; 0x30
  if (TIM4->CNT < 1000)
 8003610:	4b75      	ldr	r3, [pc, #468]	; (80037e8 <_Z4loopv+0x1e0>)
 8003612:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003614:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003618:	4293      	cmp	r3, r2
 800361a:	bf94      	ite	ls
 800361c:	2301      	movls	r3, #1
 800361e:	2300      	movhi	r3, #0
 8003620:	b2db      	uxtb	r3, r3
 8003622:	2b00      	cmp	r3, #0
 8003624:	f000 8381 	beq.w	8003d2a <_Z4loopv+0x722>
  {
    switch (Step)
 8003628:	4b70      	ldr	r3, [pc, #448]	; (80037ec <_Z4loopv+0x1e4>)
 800362a:	781b      	ldrb	r3, [r3, #0]
 800362c:	2b05      	cmp	r3, #5
 800362e:	d00e      	beq.n	800364e <_Z4loopv+0x46>
 8003630:	2b05      	cmp	r3, #5
 8003632:	dc10      	bgt.n	8003656 <_Z4loopv+0x4e>
 8003634:	2b00      	cmp	r3, #0
 8003636:	d002      	beq.n	800363e <_Z4loopv+0x36>
 8003638:	2b04      	cmp	r3, #4
 800363a:	d004      	beq.n	8003646 <_Z4loopv+0x3e>
    case 5:
      HAL_NVIC_DisableIRQ(EXTI0_IRQn);
      break;

    default:
      break;
 800363c:	e00b      	b.n	8003656 <_Z4loopv+0x4e>
      HAL_NVIC_DisableIRQ(EXTI0_IRQn);
 800363e:	2006      	movs	r0, #6
 8003640:	f001 fc47 	bl	8004ed2 <HAL_NVIC_DisableIRQ>
      break;
 8003644:	e008      	b.n	8003658 <_Z4loopv+0x50>
      HAL_NVIC_DisableIRQ(EXTI0_IRQn);
 8003646:	2006      	movs	r0, #6
 8003648:	f001 fc43 	bl	8004ed2 <HAL_NVIC_DisableIRQ>
      break;
 800364c:	e004      	b.n	8003658 <_Z4loopv+0x50>
      HAL_NVIC_DisableIRQ(EXTI0_IRQn);
 800364e:	2006      	movs	r0, #6
 8003650:	f001 fc3f 	bl	8004ed2 <HAL_NVIC_DisableIRQ>
      break;
 8003654:	e000      	b.n	8003658 <_Z4loopv+0x50>
      break;
 8003656:	bf00      	nop
    }
    //get motor angle and update PPM_OnTime
    ADC_Select_Channel_11();
 8003658:	f7ff ff2c 	bl	80034b4 <ADC_Select_Channel_11>
	  adcValuesArray[0] = (uint16_t)ADC1->DR;
 800365c:	4b64      	ldr	r3, [pc, #400]	; (80037f0 <_Z4loopv+0x1e8>)
 800365e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003660:	b29a      	uxth	r2, r3
 8003662:	4b64      	ldr	r3, [pc, #400]	; (80037f4 <_Z4loopv+0x1ec>)
 8003664:	801a      	strh	r2, [r3, #0]
	  ADC_Select_Channel_12();
 8003666:	f7ff ff4d 	bl	8003504 <ADC_Select_Channel_12>
	  adcValuesArray[1] = (uint16_t)ADC1->DR;
 800366a:	4b61      	ldr	r3, [pc, #388]	; (80037f0 <_Z4loopv+0x1e8>)
 800366c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800366e:	b29a      	uxth	r2, r3
 8003670:	4b60      	ldr	r3, [pc, #384]	; (80037f4 <_Z4loopv+0x1ec>)
 8003672:	805a      	strh	r2, [r3, #2]
    angle = motorAngle(adcValuesArray[1] - 1250, adcValuesArray[0] - 1250);
 8003674:	4b5f      	ldr	r3, [pc, #380]	; (80037f4 <_Z4loopv+0x1ec>)
 8003676:	885b      	ldrh	r3, [r3, #2]
 8003678:	f2a3 43e2 	subw	r3, r3, #1250	; 0x4e2
 800367c:	4a5d      	ldr	r2, [pc, #372]	; (80037f4 <_Z4loopv+0x1ec>)
 800367e:	8812      	ldrh	r2, [r2, #0]
 8003680:	f2a2 42e2 	subw	r2, r2, #1250	; 0x4e2
 8003684:	4611      	mov	r1, r2
 8003686:	4618      	mov	r0, r3
 8003688:	f000 fb76 	bl	8003d78 <_Z10motorAnglell>
 800368c:	4603      	mov	r3, r0
 800368e:	461a      	mov	r2, r3
 8003690:	4b59      	ldr	r3, [pc, #356]	; (80037f8 <_Z4loopv+0x1f0>)
 8003692:	801a      	strh	r2, [r3, #0]
    TIM4->CCR1 = (uint16_t)(fastPPM_MinTime + 500 + ((float)SBUS_Channels[2] / 2) + ((float)sin((angle + 45) * (M_PI / 180)) * ((float)SBUS_Channels[0] / 10)) + ((float)cos((angle + 45) * (M_PI / 180)) * ((float)SBUS_Channels[1] / 10)));
 8003694:	4b59      	ldr	r3, [pc, #356]	; (80037fc <_Z4loopv+0x1f4>)
 8003696:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800369a:	4618      	mov	r0, r3
 800369c:	f7fd fb5a 	bl	8000d54 <__aeabi_i2f>
 80036a0:	4603      	mov	r3, r0
 80036a2:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80036a6:	4618      	mov	r0, r3
 80036a8:	f7fd fc5c 	bl	8000f64 <__aeabi_fdiv>
 80036ac:	4603      	mov	r3, r0
 80036ae:	4954      	ldr	r1, [pc, #336]	; (8003800 <_Z4loopv+0x1f8>)
 80036b0:	4618      	mov	r0, r3
 80036b2:	f7fd fa9b 	bl	8000bec <__addsf3>
 80036b6:	4603      	mov	r3, r0
 80036b8:	461d      	mov	r5, r3
 80036ba:	4b4f      	ldr	r3, [pc, #316]	; (80037f8 <_Z4loopv+0x1f0>)
 80036bc:	881b      	ldrh	r3, [r3, #0]
 80036be:	332d      	adds	r3, #45	; 0x2d
 80036c0:	4618      	mov	r0, r3
 80036c2:	f7fc fedb 	bl	800047c <__aeabi_i2d>
 80036c6:	a346      	add	r3, pc, #280	; (adr r3, 80037e0 <_Z4loopv+0x1d8>)
 80036c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036cc:	f7fc ff40 	bl	8000550 <__aeabi_dmul>
 80036d0:	4602      	mov	r2, r0
 80036d2:	460b      	mov	r3, r1
 80036d4:	4610      	mov	r0, r2
 80036d6:	4619      	mov	r1, r3
 80036d8:	f009 f9ce 	bl	800ca78 <sin>
 80036dc:	4602      	mov	r2, r0
 80036de:	460b      	mov	r3, r1
 80036e0:	4610      	mov	r0, r2
 80036e2:	4619      	mov	r1, r3
 80036e4:	f7fd fa2c 	bl	8000b40 <__aeabi_d2f>
 80036e8:	4604      	mov	r4, r0
 80036ea:	4b44      	ldr	r3, [pc, #272]	; (80037fc <_Z4loopv+0x1f4>)
 80036ec:	f9b3 3000 	ldrsh.w	r3, [r3]
 80036f0:	4618      	mov	r0, r3
 80036f2:	f7fd fb2f 	bl	8000d54 <__aeabi_i2f>
 80036f6:	4603      	mov	r3, r0
 80036f8:	4942      	ldr	r1, [pc, #264]	; (8003804 <_Z4loopv+0x1fc>)
 80036fa:	4618      	mov	r0, r3
 80036fc:	f7fd fc32 	bl	8000f64 <__aeabi_fdiv>
 8003700:	4603      	mov	r3, r0
 8003702:	4619      	mov	r1, r3
 8003704:	4620      	mov	r0, r4
 8003706:	f7fd fb79 	bl	8000dfc <__aeabi_fmul>
 800370a:	4603      	mov	r3, r0
 800370c:	4619      	mov	r1, r3
 800370e:	4628      	mov	r0, r5
 8003710:	f7fd fa6c 	bl	8000bec <__addsf3>
 8003714:	4603      	mov	r3, r0
 8003716:	461d      	mov	r5, r3
 8003718:	4b37      	ldr	r3, [pc, #220]	; (80037f8 <_Z4loopv+0x1f0>)
 800371a:	881b      	ldrh	r3, [r3, #0]
 800371c:	332d      	adds	r3, #45	; 0x2d
 800371e:	4618      	mov	r0, r3
 8003720:	f7fc feac 	bl	800047c <__aeabi_i2d>
 8003724:	a32e      	add	r3, pc, #184	; (adr r3, 80037e0 <_Z4loopv+0x1d8>)
 8003726:	e9d3 2300 	ldrd	r2, r3, [r3]
 800372a:	f7fc ff11 	bl	8000550 <__aeabi_dmul>
 800372e:	4602      	mov	r2, r0
 8003730:	460b      	mov	r3, r1
 8003732:	4610      	mov	r0, r2
 8003734:	4619      	mov	r1, r3
 8003736:	f009 f95d 	bl	800c9f4 <cos>
 800373a:	4602      	mov	r2, r0
 800373c:	460b      	mov	r3, r1
 800373e:	4610      	mov	r0, r2
 8003740:	4619      	mov	r1, r3
 8003742:	f7fd f9fd 	bl	8000b40 <__aeabi_d2f>
 8003746:	4604      	mov	r4, r0
 8003748:	4b2c      	ldr	r3, [pc, #176]	; (80037fc <_Z4loopv+0x1f4>)
 800374a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800374e:	4618      	mov	r0, r3
 8003750:	f7fd fb00 	bl	8000d54 <__aeabi_i2f>
 8003754:	4603      	mov	r3, r0
 8003756:	492b      	ldr	r1, [pc, #172]	; (8003804 <_Z4loopv+0x1fc>)
 8003758:	4618      	mov	r0, r3
 800375a:	f7fd fc03 	bl	8000f64 <__aeabi_fdiv>
 800375e:	4603      	mov	r3, r0
 8003760:	4619      	mov	r1, r3
 8003762:	4620      	mov	r0, r4
 8003764:	f7fd fb4a 	bl	8000dfc <__aeabi_fmul>
 8003768:	4603      	mov	r3, r0
 800376a:	4619      	mov	r1, r3
 800376c:	4628      	mov	r0, r5
 800376e:	f7fd fa3d 	bl	8000bec <__addsf3>
 8003772:	4603      	mov	r3, r0
 8003774:	4618      	mov	r0, r3
 8003776:	f7fd fd43 	bl	8001200 <__aeabi_f2uiz>
 800377a:	4603      	mov	r3, r0
 800377c:	b29a      	uxth	r2, r3
 800377e:	4b1a      	ldr	r3, [pc, #104]	; (80037e8 <_Z4loopv+0x1e0>)
 8003780:	635a      	str	r2, [r3, #52]	; 0x34


    switch (Step)
 8003782:	4b1a      	ldr	r3, [pc, #104]	; (80037ec <_Z4loopv+0x1e4>)
 8003784:	781b      	ldrb	r3, [r3, #0]
 8003786:	2b09      	cmp	r3, #9
 8003788:	f200 82b9 	bhi.w	8003cfe <_Z4loopv+0x6f6>
 800378c:	a201      	add	r2, pc, #4	; (adr r2, 8003794 <_Z4loopv+0x18c>)
 800378e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003792:	bf00      	nop
 8003794:	080037bd 	.word	0x080037bd
 8003798:	080037d1 	.word	0x080037d1
 800379c:	0800380d 	.word	0x0800380d
 80037a0:	08003cff 	.word	0x08003cff
 80037a4:	08003b83 	.word	0x08003b83
 80037a8:	08003be7 	.word	0x08003be7
 80037ac:	08003cff 	.word	0x08003cff
 80037b0:	08003cff 	.word	0x08003cff
 80037b4:	08003cff 	.word	0x08003cff
 80037b8:	08003cf7 	.word	0x08003cf7
    {
    case 0:   //get quaternions
      
      writeBit(MPU6050_Adresse, MPU6050_RA_USER_CTRL, MPU6050_USERCTRL_FIFO_RESET_BIT, true); //reset FIFO
 80037bc:	2301      	movs	r3, #1
 80037be:	2202      	movs	r2, #2
 80037c0:	216a      	movs	r1, #106	; 0x6a
 80037c2:	20d0      	movs	r0, #208	; 0xd0
 80037c4:	f7fd ffc6 	bl	8001754 <_Z8writeBithhhh>
      HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80037c8:	2006      	movs	r0, #6
 80037ca:	f001 fb74 	bl	8004eb6 <HAL_NVIC_EnableIRQ>
      break;
 80037ce:	e29b      	b.n	8003d08 <_Z4loopv+0x700>
    case 1:
      if (SBUSNewPackage == true)
 80037d0:	4b0d      	ldr	r3, [pc, #52]	; (8003808 <_Z4loopv+0x200>)
 80037d2:	781b      	ldrb	r3, [r3, #0]
 80037d4:	2b01      	cmp	r3, #1
 80037d6:	f040 8294 	bne.w	8003d02 <_Z4loopv+0x6fa>
      {
        SBUS_PostProcessing();
 80037da:	f7ff f9c7 	bl	8002b6c <_Z19SBUS_PostProcessingv>
      }
      break;
 80037de:	e290      	b.n	8003d02 <_Z4loopv+0x6fa>
 80037e0:	a2529d39 	.word	0xa2529d39
 80037e4:	3f91df46 	.word	0x3f91df46
 80037e8:	40000800 	.word	0x40000800
 80037ec:	2000082e 	.word	0x2000082e
 80037f0:	40012000 	.word	0x40012000
 80037f4:	20000828 	.word	0x20000828
 80037f8:	2000082c 	.word	0x2000082c
 80037fc:	20000544 	.word	0x20000544
 8003800:	44bb8000 	.word	0x44bb8000
 8003804:	41200000 	.word	0x41200000
 8003808:	20000555 	.word	0x20000555
    case 2:
      for (size_t i = 0; i < 1; i++)
 800380c:	2300      	movs	r3, #0
 800380e:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
 8003812:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8003816:	2b00      	cmp	r3, #0
 8003818:	f040 8275 	bne.w	8003d06 <_Z4loopv+0x6fe>
	      for (size_t i = 0; i < x; i++)
	      {
	      	msgTransmit[i] = msg[i];
	      }
	      CDC_Transmit_FS((unsigned char*)msgTransmit, sizeof(msgTransmit));
      }
 800381c:	466b      	mov	r3, sp
 800381e:	607b      	str	r3, [r7, #4]
        , (MPUoutputQuaternion[0])                                                                                                                                                                                                                                                                                                                                          \
 8003820:	4ba9      	ldr	r3, [pc, #676]	; (8003ac8 <_Z4loopv+0x4c0>)
 8003822:	681b      	ldr	r3, [r3, #0]
	      sprintf((char*)msg," %f %f %f %f %hd %hd %hd %hd %hd %hd \r\n"                                                                                                                                                                                                                                                                                                      \
 8003824:	4618      	mov	r0, r3
 8003826:	f7fc fe3b 	bl	80004a0 <__aeabi_f2d>
 800382a:	e9c7 0108 	strd	r0, r1, [r7, #32]
        , (MPUoutputQuaternion[1])                                                                                                                                                                                                                                                                                                                                          \
 800382e:	4ba6      	ldr	r3, [pc, #664]	; (8003ac8 <_Z4loopv+0x4c0>)
 8003830:	685b      	ldr	r3, [r3, #4]
	      sprintf((char*)msg," %f %f %f %f %hd %hd %hd %hd %hd %hd \r\n"                                                                                                                                                                                                                                                                                                      \
 8003832:	4618      	mov	r0, r3
 8003834:	f7fc fe34 	bl	80004a0 <__aeabi_f2d>
 8003838:	4680      	mov	r8, r0
 800383a:	4689      	mov	r9, r1
        , (MPUoutputQuaternion[2])                                                                                                                                                                                                                                                                                                                                          \
 800383c:	4ba2      	ldr	r3, [pc, #648]	; (8003ac8 <_Z4loopv+0x4c0>)
 800383e:	689b      	ldr	r3, [r3, #8]
	      sprintf((char*)msg," %f %f %f %f %hd %hd %hd %hd %hd %hd \r\n"                                                                                                                                                                                                                                                                                                      \
 8003840:	4618      	mov	r0, r3
 8003842:	f7fc fe2d 	bl	80004a0 <__aeabi_f2d>
 8003846:	4682      	mov	sl, r0
 8003848:	468b      	mov	fp, r1
        , (MPUoutputQuaternion[3])                                                                                                                                                                                                                                                                                                                                          \
 800384a:	4b9f      	ldr	r3, [pc, #636]	; (8003ac8 <_Z4loopv+0x4c0>)
 800384c:	68db      	ldr	r3, [r3, #12]
	      sprintf((char*)msg," %f %f %f %f %hd %hd %hd %hd %hd %hd \r\n"                                                                                                                                                                                                                                                                                                      \
 800384e:	4618      	mov	r0, r3
 8003850:	f7fc fe26 	bl	80004a0 <__aeabi_f2d>
 8003854:	e9c7 0106 	strd	r0, r1, [r7, #24]
        , 2 * (int16_t)(((float)atan((float)MPUoutputQuaternion[3] / (float)MPUoutputQuaternion[2]) * 180) / M_PI)                                                                                                                                                                                                                                                          \
 8003858:	4b9b      	ldr	r3, [pc, #620]	; (8003ac8 <_Z4loopv+0x4c0>)
 800385a:	68db      	ldr	r3, [r3, #12]
 800385c:	4a9a      	ldr	r2, [pc, #616]	; (8003ac8 <_Z4loopv+0x4c0>)
 800385e:	6892      	ldr	r2, [r2, #8]
 8003860:	4611      	mov	r1, r2
 8003862:	4618      	mov	r0, r3
 8003864:	f7fd fb7e 	bl	8000f64 <__aeabi_fdiv>
 8003868:	4603      	mov	r3, r0
 800386a:	4618      	mov	r0, r3
 800386c:	f7ff feb2 	bl	80035d4 <_ZSt4atanf>
 8003870:	4603      	mov	r3, r0
 8003872:	4996      	ldr	r1, [pc, #600]	; (8003acc <_Z4loopv+0x4c4>)
 8003874:	4618      	mov	r0, r3
 8003876:	f7fd fac1 	bl	8000dfc <__aeabi_fmul>
 800387a:	4603      	mov	r3, r0
 800387c:	4618      	mov	r0, r3
 800387e:	f7fc fe0f 	bl	80004a0 <__aeabi_f2d>
 8003882:	a38f      	add	r3, pc, #572	; (adr r3, 8003ac0 <_Z4loopv+0x4b8>)
 8003884:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003888:	f7fc ff8c 	bl	80007a4 <__aeabi_ddiv>
 800388c:	4602      	mov	r2, r0
 800388e:	460b      	mov	r3, r1
 8003890:	4610      	mov	r0, r2
 8003892:	4619      	mov	r1, r3
 8003894:	f7fd f90c 	bl	8000ab0 <__aeabi_d2iz>
 8003898:	4603      	mov	r3, r0
 800389a:	b21b      	sxth	r3, r3
	      sprintf((char*)msg," %f %f %f %f %hd %hd %hd %hd %hd %hd \r\n"                                                                                                                                                                                                                                                                                                      \
 800389c:	005b      	lsls	r3, r3, #1
 800389e:	617b      	str	r3, [r7, #20]
        , 2 * (int16_t)(((float)atan((float)MPUoutputQuaternion[3] / (float)MPUoutputQuaternion[1]) * 180) / M_PI)                                                                                                                                                                                                                                                          \
 80038a0:	4b89      	ldr	r3, [pc, #548]	; (8003ac8 <_Z4loopv+0x4c0>)
 80038a2:	68db      	ldr	r3, [r3, #12]
 80038a4:	4a88      	ldr	r2, [pc, #544]	; (8003ac8 <_Z4loopv+0x4c0>)
 80038a6:	6852      	ldr	r2, [r2, #4]
 80038a8:	4611      	mov	r1, r2
 80038aa:	4618      	mov	r0, r3
 80038ac:	f7fd fb5a 	bl	8000f64 <__aeabi_fdiv>
 80038b0:	4603      	mov	r3, r0
 80038b2:	4618      	mov	r0, r3
 80038b4:	f7ff fe8e 	bl	80035d4 <_ZSt4atanf>
 80038b8:	4603      	mov	r3, r0
 80038ba:	4984      	ldr	r1, [pc, #528]	; (8003acc <_Z4loopv+0x4c4>)
 80038bc:	4618      	mov	r0, r3
 80038be:	f7fd fa9d 	bl	8000dfc <__aeabi_fmul>
 80038c2:	4603      	mov	r3, r0
 80038c4:	4618      	mov	r0, r3
 80038c6:	f7fc fdeb 	bl	80004a0 <__aeabi_f2d>
 80038ca:	a37d      	add	r3, pc, #500	; (adr r3, 8003ac0 <_Z4loopv+0x4b8>)
 80038cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038d0:	f7fc ff68 	bl	80007a4 <__aeabi_ddiv>
 80038d4:	4602      	mov	r2, r0
 80038d6:	460b      	mov	r3, r1
 80038d8:	4610      	mov	r0, r2
 80038da:	4619      	mov	r1, r3
 80038dc:	f7fd f8e8 	bl	8000ab0 <__aeabi_d2iz>
 80038e0:	4603      	mov	r3, r0
 80038e2:	b21b      	sxth	r3, r3
	      sprintf((char*)msg," %f %f %f %f %hd %hd %hd %hd %hd %hd \r\n"                                                                                                                                                                                                                                                                                                      \
 80038e4:	0059      	lsls	r1, r3, #1
 80038e6:	6139      	str	r1, [r7, #16]
        , 2 * (int16_t)(((float)atan((float)MPUoutputQuaternion[1] / (float)MPUoutputQuaternion[2]) * 180) / M_PI)                                                                                                                                                                                                                                                          \
 80038e8:	4b77      	ldr	r3, [pc, #476]	; (8003ac8 <_Z4loopv+0x4c0>)
 80038ea:	685b      	ldr	r3, [r3, #4]
 80038ec:	4a76      	ldr	r2, [pc, #472]	; (8003ac8 <_Z4loopv+0x4c0>)
 80038ee:	6892      	ldr	r2, [r2, #8]
 80038f0:	4611      	mov	r1, r2
 80038f2:	4618      	mov	r0, r3
 80038f4:	f7fd fb36 	bl	8000f64 <__aeabi_fdiv>
 80038f8:	4603      	mov	r3, r0
 80038fa:	4618      	mov	r0, r3
 80038fc:	f7ff fe6a 	bl	80035d4 <_ZSt4atanf>
 8003900:	4603      	mov	r3, r0
 8003902:	4972      	ldr	r1, [pc, #456]	; (8003acc <_Z4loopv+0x4c4>)
 8003904:	4618      	mov	r0, r3
 8003906:	f7fd fa79 	bl	8000dfc <__aeabi_fmul>
 800390a:	4603      	mov	r3, r0
 800390c:	4618      	mov	r0, r3
 800390e:	f7fc fdc7 	bl	80004a0 <__aeabi_f2d>
 8003912:	a36b      	add	r3, pc, #428	; (adr r3, 8003ac0 <_Z4loopv+0x4b8>)
 8003914:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003918:	f7fc ff44 	bl	80007a4 <__aeabi_ddiv>
 800391c:	4602      	mov	r2, r0
 800391e:	460b      	mov	r3, r1
 8003920:	4610      	mov	r0, r2
 8003922:	4619      	mov	r1, r3
 8003924:	f7fd f8c4 	bl	8000ab0 <__aeabi_d2iz>
 8003928:	4603      	mov	r3, r0
 800392a:	b21b      	sxth	r3, r3
	      sprintf((char*)msg," %f %f %f %f %hd %hd %hd %hd %hd %hd \r\n"                                                                                                                                                                                                                                                                                                      \
 800392c:	005c      	lsls	r4, r3, #1
 800392e:	60fc      	str	r4, [r7, #12]
        , 2 * (int16_t)(((float)atan((float)MPUoutputQuaternion[0] / (float)MPUoutputQuaternion[1]) * 180) / M_PI)                                                                                                                                                                                                                                                          \
 8003930:	4b65      	ldr	r3, [pc, #404]	; (8003ac8 <_Z4loopv+0x4c0>)
 8003932:	681a      	ldr	r2, [r3, #0]
 8003934:	4b64      	ldr	r3, [pc, #400]	; (8003ac8 <_Z4loopv+0x4c0>)
 8003936:	685b      	ldr	r3, [r3, #4]
 8003938:	4619      	mov	r1, r3
 800393a:	4610      	mov	r0, r2
 800393c:	f7fd fb12 	bl	8000f64 <__aeabi_fdiv>
 8003940:	4603      	mov	r3, r0
 8003942:	4618      	mov	r0, r3
 8003944:	f7ff fe46 	bl	80035d4 <_ZSt4atanf>
 8003948:	4603      	mov	r3, r0
 800394a:	4960      	ldr	r1, [pc, #384]	; (8003acc <_Z4loopv+0x4c4>)
 800394c:	4618      	mov	r0, r3
 800394e:	f7fd fa55 	bl	8000dfc <__aeabi_fmul>
 8003952:	4603      	mov	r3, r0
 8003954:	4618      	mov	r0, r3
 8003956:	f7fc fda3 	bl	80004a0 <__aeabi_f2d>
 800395a:	a359      	add	r3, pc, #356	; (adr r3, 8003ac0 <_Z4loopv+0x4b8>)
 800395c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003960:	f7fc ff20 	bl	80007a4 <__aeabi_ddiv>
 8003964:	4602      	mov	r2, r0
 8003966:	460b      	mov	r3, r1
 8003968:	4610      	mov	r0, r2
 800396a:	4619      	mov	r1, r3
 800396c:	f7fd f8a0 	bl	8000ab0 <__aeabi_d2iz>
 8003970:	4603      	mov	r3, r0
 8003972:	b21b      	sxth	r3, r3
	      sprintf((char*)msg," %f %f %f %f %hd %hd %hd %hd %hd %hd \r\n"                                                                                                                                                                                                                                                                                                      \
 8003974:	005d      	lsls	r5, r3, #1
 8003976:	60bd      	str	r5, [r7, #8]
        , 2 * (int16_t)(((float)acos((float)MPUoutputQuaternion[0] / (float)1073741824) * 180) / M_PI)                                                                                                                                                                                                                                                                      \
 8003978:	4b53      	ldr	r3, [pc, #332]	; (8003ac8 <_Z4loopv+0x4c0>)
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f04f 419d 	mov.w	r1, #1317011456	; 0x4e800000
 8003980:	4618      	mov	r0, r3
 8003982:	f7fd faef 	bl	8000f64 <__aeabi_fdiv>
 8003986:	4603      	mov	r3, r0
 8003988:	4618      	mov	r0, r3
 800398a:	f7ff fe17 	bl	80035bc <_ZSt4acosf>
 800398e:	4603      	mov	r3, r0
 8003990:	494e      	ldr	r1, [pc, #312]	; (8003acc <_Z4loopv+0x4c4>)
 8003992:	4618      	mov	r0, r3
 8003994:	f7fd fa32 	bl	8000dfc <__aeabi_fmul>
 8003998:	4603      	mov	r3, r0
 800399a:	4618      	mov	r0, r3
 800399c:	f7fc fd80 	bl	80004a0 <__aeabi_f2d>
 80039a0:	a347      	add	r3, pc, #284	; (adr r3, 8003ac0 <_Z4loopv+0x4b8>)
 80039a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039a6:	f7fc fefd 	bl	80007a4 <__aeabi_ddiv>
 80039aa:	4602      	mov	r2, r0
 80039ac:	460b      	mov	r3, r1
 80039ae:	4610      	mov	r0, r2
 80039b0:	4619      	mov	r1, r3
 80039b2:	f7fd f87d 	bl	8000ab0 <__aeabi_d2iz>
 80039b6:	4603      	mov	r3, r0
 80039b8:	b21b      	sxth	r3, r3
	      sprintf((char*)msg," %f %f %f %f %hd %hd %hd %hd %hd %hd \r\n"                                                                                                                                                                                                                                                                                                      \
 80039ba:	005e      	lsls	r6, r3, #1
        , (int16_t)((float)sqrt((((float)MPUoutputQuaternion[1] / (float)1073741824) * ((float)MPUoutputQuaternion[1] / (float)1073741824)) + (((float)MPUoutputQuaternion[2] / (float)1073741824) * ((float)MPUoutputQuaternion[2] / (float)1073741824)) + (((float)MPUoutputQuaternion[3] / (float)1073741824) * ((float)MPUoutputQuaternion[3] / (float)1073741824))))); \
 80039bc:	4b42      	ldr	r3, [pc, #264]	; (8003ac8 <_Z4loopv+0x4c0>)
 80039be:	685b      	ldr	r3, [r3, #4]
 80039c0:	f04f 419d 	mov.w	r1, #1317011456	; 0x4e800000
 80039c4:	4618      	mov	r0, r3
 80039c6:	f7fd facd 	bl	8000f64 <__aeabi_fdiv>
 80039ca:	4603      	mov	r3, r0
 80039cc:	461c      	mov	r4, r3
 80039ce:	4b3e      	ldr	r3, [pc, #248]	; (8003ac8 <_Z4loopv+0x4c0>)
 80039d0:	685b      	ldr	r3, [r3, #4]
 80039d2:	f04f 419d 	mov.w	r1, #1317011456	; 0x4e800000
 80039d6:	4618      	mov	r0, r3
 80039d8:	f7fd fac4 	bl	8000f64 <__aeabi_fdiv>
 80039dc:	4603      	mov	r3, r0
 80039de:	4619      	mov	r1, r3
 80039e0:	4620      	mov	r0, r4
 80039e2:	f7fd fa0b 	bl	8000dfc <__aeabi_fmul>
 80039e6:	4603      	mov	r3, r0
 80039e8:	461d      	mov	r5, r3
 80039ea:	4b37      	ldr	r3, [pc, #220]	; (8003ac8 <_Z4loopv+0x4c0>)
 80039ec:	689b      	ldr	r3, [r3, #8]
 80039ee:	f04f 419d 	mov.w	r1, #1317011456	; 0x4e800000
 80039f2:	4618      	mov	r0, r3
 80039f4:	f7fd fab6 	bl	8000f64 <__aeabi_fdiv>
 80039f8:	4603      	mov	r3, r0
 80039fa:	461c      	mov	r4, r3
 80039fc:	4b32      	ldr	r3, [pc, #200]	; (8003ac8 <_Z4loopv+0x4c0>)
 80039fe:	689b      	ldr	r3, [r3, #8]
 8003a00:	f04f 419d 	mov.w	r1, #1317011456	; 0x4e800000
 8003a04:	4618      	mov	r0, r3
 8003a06:	f7fd faad 	bl	8000f64 <__aeabi_fdiv>
 8003a0a:	4603      	mov	r3, r0
 8003a0c:	4619      	mov	r1, r3
 8003a0e:	4620      	mov	r0, r4
 8003a10:	f7fd f9f4 	bl	8000dfc <__aeabi_fmul>
 8003a14:	4603      	mov	r3, r0
 8003a16:	4619      	mov	r1, r3
 8003a18:	4628      	mov	r0, r5
 8003a1a:	f7fd f8e7 	bl	8000bec <__addsf3>
 8003a1e:	4603      	mov	r3, r0
 8003a20:	461d      	mov	r5, r3
 8003a22:	4b29      	ldr	r3, [pc, #164]	; (8003ac8 <_Z4loopv+0x4c0>)
 8003a24:	68db      	ldr	r3, [r3, #12]
 8003a26:	f04f 419d 	mov.w	r1, #1317011456	; 0x4e800000
 8003a2a:	4618      	mov	r0, r3
 8003a2c:	f7fd fa9a 	bl	8000f64 <__aeabi_fdiv>
 8003a30:	4603      	mov	r3, r0
 8003a32:	461c      	mov	r4, r3
 8003a34:	4b24      	ldr	r3, [pc, #144]	; (8003ac8 <_Z4loopv+0x4c0>)
 8003a36:	68db      	ldr	r3, [r3, #12]
 8003a38:	f04f 419d 	mov.w	r1, #1317011456	; 0x4e800000
 8003a3c:	4618      	mov	r0, r3
 8003a3e:	f7fd fa91 	bl	8000f64 <__aeabi_fdiv>
 8003a42:	4603      	mov	r3, r0
 8003a44:	4619      	mov	r1, r3
 8003a46:	4620      	mov	r0, r4
 8003a48:	f7fd f9d8 	bl	8000dfc <__aeabi_fmul>
 8003a4c:	4603      	mov	r3, r0
 8003a4e:	4619      	mov	r1, r3
 8003a50:	4628      	mov	r0, r5
 8003a52:	f7fd f8cb 	bl	8000bec <__addsf3>
 8003a56:	4603      	mov	r3, r0
 8003a58:	4618      	mov	r0, r3
 8003a5a:	f7ff fdc7 	bl	80035ec <_ZSt4sqrtf>
 8003a5e:	4603      	mov	r3, r0
 8003a60:	4618      	mov	r0, r3
 8003a62:	f7fd fba7 	bl	80011b4 <__aeabi_f2iz>
 8003a66:	4603      	mov	r3, r0
 8003a68:	b21b      	sxth	r3, r3
	      sprintf((char*)msg," %f %f %f %f %hd %hd %hd %hd %hd %hd \r\n"                                                                                                                                                                                                                                                                                                      \
 8003a6a:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8003a6e:	930b      	str	r3, [sp, #44]	; 0x2c
 8003a70:	960a      	str	r6, [sp, #40]	; 0x28
 8003a72:	68bd      	ldr	r5, [r7, #8]
 8003a74:	9509      	str	r5, [sp, #36]	; 0x24
 8003a76:	68fc      	ldr	r4, [r7, #12]
 8003a78:	9408      	str	r4, [sp, #32]
 8003a7a:	6939      	ldr	r1, [r7, #16]
 8003a7c:	9107      	str	r1, [sp, #28]
 8003a7e:	697b      	ldr	r3, [r7, #20]
 8003a80:	9306      	str	r3, [sp, #24]
 8003a82:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8003a86:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8003a8a:	e9cd ab02 	strd	sl, fp, [sp, #8]
 8003a8e:	e9cd 8900 	strd	r8, r9, [sp]
 8003a92:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003a96:	490e      	ldr	r1, [pc, #56]	; (8003ad0 <_Z4loopv+0x4c8>)
 8003a98:	f00b f86e 	bl	800eb78 <siprintf>
	      uint8_t x = 0;
 8003a9c:	2300      	movs	r3, #0
 8003a9e:	f887 3163 	strb.w	r3, [r7, #355]	; 0x163
	      while (msg[x] != NULL)
 8003aa2:	f897 3163 	ldrb.w	r3, [r7, #355]	; 0x163
 8003aa6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003aaa:	5cd3      	ldrb	r3, [r2, r3]
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d011      	beq.n	8003ad4 <_Z4loopv+0x4cc>
	      	x++;
 8003ab0:	f897 3163 	ldrb.w	r3, [r7, #355]	; 0x163
 8003ab4:	3301      	adds	r3, #1
 8003ab6:	f887 3163 	strb.w	r3, [r7, #355]	; 0x163
	      while (msg[x] != NULL)
 8003aba:	e7f2      	b.n	8003aa2 <_Z4loopv+0x49a>
 8003abc:	f3af 8000 	nop.w
 8003ac0:	54442d18 	.word	0x54442d18
 8003ac4:	400921fb 	.word	0x400921fb
 8003ac8:	20000484 	.word	0x20000484
 8003acc:	43340000 	.word	0x43340000
 8003ad0:	08010e88 	.word	0x08010e88
	      unsigned char msgTransmit[x];
 8003ad4:	f897 3163 	ldrb.w	r3, [r7, #355]	; 0x163
 8003ad8:	1e5c      	subs	r4, r3, #1
 8003ada:	f8c7 4158 	str.w	r4, [r7, #344]	; 0x158
 8003ade:	4623      	mov	r3, r4
 8003ae0:	3301      	adds	r3, #1
 8003ae2:	4618      	mov	r0, r3
 8003ae4:	f04f 0100 	mov.w	r1, #0
 8003ae8:	f04f 0200 	mov.w	r2, #0
 8003aec:	f04f 0300 	mov.w	r3, #0
 8003af0:	00cb      	lsls	r3, r1, #3
 8003af2:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8003af6:	00c2      	lsls	r2, r0, #3
 8003af8:	4623      	mov	r3, r4
 8003afa:	3301      	adds	r3, #1
 8003afc:	4618      	mov	r0, r3
 8003afe:	f04f 0100 	mov.w	r1, #0
 8003b02:	f04f 0200 	mov.w	r2, #0
 8003b06:	f04f 0300 	mov.w	r3, #0
 8003b0a:	00cb      	lsls	r3, r1, #3
 8003b0c:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8003b10:	00c2      	lsls	r2, r0, #3
 8003b12:	4623      	mov	r3, r4
 8003b14:	3301      	adds	r3, #1
 8003b16:	3307      	adds	r3, #7
 8003b18:	08db      	lsrs	r3, r3, #3
 8003b1a:	00db      	lsls	r3, r3, #3
 8003b1c:	ebad 0d03 	sub.w	sp, sp, r3
 8003b20:	ab0c      	add	r3, sp, #48	; 0x30
 8003b22:	3300      	adds	r3, #0
 8003b24:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
	      for (size_t i = 0; i < x; i++)
 8003b28:	2300      	movs	r3, #0
 8003b2a:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
 8003b2e:	f897 3163 	ldrb.w	r3, [r7, #355]	; 0x163
 8003b32:	f8d7 2164 	ldr.w	r2, [r7, #356]	; 0x164
 8003b36:	429a      	cmp	r2, r3
 8003b38:	d212      	bcs.n	8003b60 <_Z4loopv+0x558>
	      	msgTransmit[i] = msg[i];
 8003b3a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003b3e:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8003b42:	4413      	add	r3, r2
 8003b44:	7819      	ldrb	r1, [r3, #0]
 8003b46:	f8d7 2154 	ldr.w	r2, [r7, #340]	; 0x154
 8003b4a:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8003b4e:	4413      	add	r3, r2
 8003b50:	460a      	mov	r2, r1
 8003b52:	701a      	strb	r2, [r3, #0]
	      for (size_t i = 0; i < x; i++)
 8003b54:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8003b58:	3301      	adds	r3, #1
 8003b5a:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
 8003b5e:	e7e6      	b.n	8003b2e <_Z4loopv+0x526>
	      CDC_Transmit_FS((unsigned char*)msgTransmit, sizeof(msgTransmit));
 8003b60:	f8d7 2154 	ldr.w	r2, [r7, #340]	; 0x154
 8003b64:	b2a3      	uxth	r3, r4
 8003b66:	3301      	adds	r3, #1
 8003b68:	b29b      	uxth	r3, r3
 8003b6a:	4619      	mov	r1, r3
 8003b6c:	4610      	mov	r0, r2
 8003b6e:	f008 fb0f 	bl	800c190 <CDC_Transmit_FS>
 8003b72:	f8d7 d004 	ldr.w	sp, [r7, #4]
      for (size_t i = 0; i < 1; i++)
 8003b76:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8003b7a:	3301      	adds	r3, #1
 8003b7c:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
 8003b80:	e647      	b.n	8003812 <_Z4loopv+0x20a>
      break;
    case 3:
      
      break;
    case 4:
      readBytes(MPU6050_Adresse, MPU6050_RA_FIFO_COUNTH, 2, MPU6050_RX_buf);  //get FIFO count
 8003b82:	4b76      	ldr	r3, [pc, #472]	; (8003d5c <_Z4loopv+0x754>)
 8003b84:	2202      	movs	r2, #2
 8003b86:	2172      	movs	r1, #114	; 0x72
 8003b88:	20d0      	movs	r0, #208	; 0xd0
 8003b8a:	f7fd fd6d 	bl	8001668 <_Z9readByteshhhPh>
      FIFOCounter = (((uint16_t)MPU6050_RX_buf[0]) << 8) | MPU6050_RX_buf[1];
 8003b8e:	4b73      	ldr	r3, [pc, #460]	; (8003d5c <_Z4loopv+0x754>)
 8003b90:	781b      	ldrb	r3, [r3, #0]
 8003b92:	021b      	lsls	r3, r3, #8
 8003b94:	b21a      	sxth	r2, r3
 8003b96:	4b71      	ldr	r3, [pc, #452]	; (8003d5c <_Z4loopv+0x754>)
 8003b98:	785b      	ldrb	r3, [r3, #1]
 8003b9a:	b21b      	sxth	r3, r3
 8003b9c:	4313      	orrs	r3, r2
 8003b9e:	b21b      	sxth	r3, r3
 8003ba0:	b29a      	uxth	r2, r3
 8003ba2:	4b6f      	ldr	r3, [pc, #444]	; (8003d60 <_Z4loopv+0x758>)
 8003ba4:	801a      	strh	r2, [r3, #0]
      while (FIFOCounter < 42)
 8003ba6:	4b6e      	ldr	r3, [pc, #440]	; (8003d60 <_Z4loopv+0x758>)
 8003ba8:	881b      	ldrh	r3, [r3, #0]
 8003baa:	2b29      	cmp	r3, #41	; 0x29
 8003bac:	d817      	bhi.n	8003bde <_Z4loopv+0x5d6>
      {
        HAL_GPIO_TogglePin(ONBOARD_WRITE_2_GPIO_Port, ONBOARD_WRITE_2_Pin);   //debug Pin
 8003bae:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003bb2:	486c      	ldr	r0, [pc, #432]	; (8003d64 <_Z4loopv+0x75c>)
 8003bb4:	f001 fe44 	bl	8005840 <HAL_GPIO_TogglePin>
        readBytes(MPU6050_Adresse, MPU6050_RA_FIFO_COUNTH, 2, MPU6050_RX_buf);  //get FIFO count
 8003bb8:	4b68      	ldr	r3, [pc, #416]	; (8003d5c <_Z4loopv+0x754>)
 8003bba:	2202      	movs	r2, #2
 8003bbc:	2172      	movs	r1, #114	; 0x72
 8003bbe:	20d0      	movs	r0, #208	; 0xd0
 8003bc0:	f7fd fd52 	bl	8001668 <_Z9readByteshhhPh>
        FIFOCounter = (((uint16_t)MPU6050_RX_buf[0]) << 8) | MPU6050_RX_buf[1];
 8003bc4:	4b65      	ldr	r3, [pc, #404]	; (8003d5c <_Z4loopv+0x754>)
 8003bc6:	781b      	ldrb	r3, [r3, #0]
 8003bc8:	021b      	lsls	r3, r3, #8
 8003bca:	b21a      	sxth	r2, r3
 8003bcc:	4b63      	ldr	r3, [pc, #396]	; (8003d5c <_Z4loopv+0x754>)
 8003bce:	785b      	ldrb	r3, [r3, #1]
 8003bd0:	b21b      	sxth	r3, r3
 8003bd2:	4313      	orrs	r3, r2
 8003bd4:	b21b      	sxth	r3, r3
 8003bd6:	b29a      	uxth	r2, r3
 8003bd8:	4b61      	ldr	r3, [pc, #388]	; (8003d60 <_Z4loopv+0x758>)
 8003bda:	801a      	strh	r2, [r3, #0]
      while (FIFOCounter < 42)
 8003bdc:	e7e3      	b.n	8003ba6 <_Z4loopv+0x59e>
      }
      HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8003bde:	2006      	movs	r0, #6
 8003be0:	f001 f969 	bl	8004eb6 <HAL_NVIC_EnableIRQ>
      break;
 8003be4:	e090      	b.n	8003d08 <_Z4loopv+0x700>
    case 5:
      if ((FIFOCounter == 42) | (FIFOCounter == 84))
 8003be6:	4b5e      	ldr	r3, [pc, #376]	; (8003d60 <_Z4loopv+0x758>)
 8003be8:	881b      	ldrh	r3, [r3, #0]
 8003bea:	2b2a      	cmp	r3, #42	; 0x2a
 8003bec:	bf0c      	ite	eq
 8003bee:	2301      	moveq	r3, #1
 8003bf0:	2300      	movne	r3, #0
 8003bf2:	b2da      	uxtb	r2, r3
 8003bf4:	4b5a      	ldr	r3, [pc, #360]	; (8003d60 <_Z4loopv+0x758>)
 8003bf6:	881b      	ldrh	r3, [r3, #0]
 8003bf8:	2b54      	cmp	r3, #84	; 0x54
 8003bfa:	bf0c      	ite	eq
 8003bfc:	2301      	moveq	r3, #1
 8003bfe:	2300      	movne	r3, #0
 8003c00:	b2db      	uxtb	r3, r3
 8003c02:	4313      	orrs	r3, r2
 8003c04:	b2db      	uxtb	r3, r3
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d071      	beq.n	8003cee <_Z4loopv+0x6e6>
      {
        readBytes(MPU6050_Adresse, MPU6050_RA_FIFO_R_W, 16, MPU6050_RX_buf);      //get FIFO data
 8003c0a:	4b54      	ldr	r3, [pc, #336]	; (8003d5c <_Z4loopv+0x754>)
 8003c0c:	2210      	movs	r2, #16
 8003c0e:	2174      	movs	r1, #116	; 0x74
 8003c10:	20d0      	movs	r0, #208	; 0xd0
 8003c12:	f7fd fd29 	bl	8001668 <_Z9readByteshhhPh>
        MPUoutputQuaternion[0] = (float)(((int32_t)MPU6050_RX_buf[0] << 24) |  ((int32_t)MPU6050_RX_buf[1] << 16) |  ((int32_t)MPU6050_RX_buf[2] << 8) |  MPU6050_RX_buf[3 ]) / 1073741824;
 8003c16:	4b51      	ldr	r3, [pc, #324]	; (8003d5c <_Z4loopv+0x754>)
 8003c18:	781b      	ldrb	r3, [r3, #0]
 8003c1a:	061a      	lsls	r2, r3, #24
 8003c1c:	4b4f      	ldr	r3, [pc, #316]	; (8003d5c <_Z4loopv+0x754>)
 8003c1e:	785b      	ldrb	r3, [r3, #1]
 8003c20:	041b      	lsls	r3, r3, #16
 8003c22:	431a      	orrs	r2, r3
 8003c24:	4b4d      	ldr	r3, [pc, #308]	; (8003d5c <_Z4loopv+0x754>)
 8003c26:	789b      	ldrb	r3, [r3, #2]
 8003c28:	021b      	lsls	r3, r3, #8
 8003c2a:	4313      	orrs	r3, r2
 8003c2c:	4a4b      	ldr	r2, [pc, #300]	; (8003d5c <_Z4loopv+0x754>)
 8003c2e:	78d2      	ldrb	r2, [r2, #3]
 8003c30:	4313      	orrs	r3, r2
 8003c32:	4618      	mov	r0, r3
 8003c34:	f7fd f88e 	bl	8000d54 <__aeabi_i2f>
 8003c38:	4603      	mov	r3, r0
 8003c3a:	f04f 419d 	mov.w	r1, #1317011456	; 0x4e800000
 8003c3e:	4618      	mov	r0, r3
 8003c40:	f7fd f990 	bl	8000f64 <__aeabi_fdiv>
 8003c44:	4603      	mov	r3, r0
 8003c46:	461a      	mov	r2, r3
 8003c48:	4b47      	ldr	r3, [pc, #284]	; (8003d68 <_Z4loopv+0x760>)
 8003c4a:	601a      	str	r2, [r3, #0]
        MPUoutputQuaternion[1] = (float)(((int32_t)MPU6050_RX_buf[4] << 24) |  ((int32_t)MPU6050_RX_buf[5] << 16) |  ((int32_t)MPU6050_RX_buf[6] << 8) |  MPU6050_RX_buf[7 ]) / 1073741824;
 8003c4c:	4b43      	ldr	r3, [pc, #268]	; (8003d5c <_Z4loopv+0x754>)
 8003c4e:	791b      	ldrb	r3, [r3, #4]
 8003c50:	061a      	lsls	r2, r3, #24
 8003c52:	4b42      	ldr	r3, [pc, #264]	; (8003d5c <_Z4loopv+0x754>)
 8003c54:	795b      	ldrb	r3, [r3, #5]
 8003c56:	041b      	lsls	r3, r3, #16
 8003c58:	431a      	orrs	r2, r3
 8003c5a:	4b40      	ldr	r3, [pc, #256]	; (8003d5c <_Z4loopv+0x754>)
 8003c5c:	799b      	ldrb	r3, [r3, #6]
 8003c5e:	021b      	lsls	r3, r3, #8
 8003c60:	4313      	orrs	r3, r2
 8003c62:	4a3e      	ldr	r2, [pc, #248]	; (8003d5c <_Z4loopv+0x754>)
 8003c64:	79d2      	ldrb	r2, [r2, #7]
 8003c66:	4313      	orrs	r3, r2
 8003c68:	4618      	mov	r0, r3
 8003c6a:	f7fd f873 	bl	8000d54 <__aeabi_i2f>
 8003c6e:	4603      	mov	r3, r0
 8003c70:	f04f 419d 	mov.w	r1, #1317011456	; 0x4e800000
 8003c74:	4618      	mov	r0, r3
 8003c76:	f7fd f975 	bl	8000f64 <__aeabi_fdiv>
 8003c7a:	4603      	mov	r3, r0
 8003c7c:	461a      	mov	r2, r3
 8003c7e:	4b3a      	ldr	r3, [pc, #232]	; (8003d68 <_Z4loopv+0x760>)
 8003c80:	605a      	str	r2, [r3, #4]
        MPUoutputQuaternion[2] = (float)(((int32_t)MPU6050_RX_buf[8] << 24) |  ((int32_t)MPU6050_RX_buf[9] << 16) |  ((int32_t)MPU6050_RX_buf[10] << 8) | MPU6050_RX_buf[11]) / 1073741824;
 8003c82:	4b36      	ldr	r3, [pc, #216]	; (8003d5c <_Z4loopv+0x754>)
 8003c84:	7a1b      	ldrb	r3, [r3, #8]
 8003c86:	061a      	lsls	r2, r3, #24
 8003c88:	4b34      	ldr	r3, [pc, #208]	; (8003d5c <_Z4loopv+0x754>)
 8003c8a:	7a5b      	ldrb	r3, [r3, #9]
 8003c8c:	041b      	lsls	r3, r3, #16
 8003c8e:	431a      	orrs	r2, r3
 8003c90:	4b32      	ldr	r3, [pc, #200]	; (8003d5c <_Z4loopv+0x754>)
 8003c92:	7a9b      	ldrb	r3, [r3, #10]
 8003c94:	021b      	lsls	r3, r3, #8
 8003c96:	4313      	orrs	r3, r2
 8003c98:	4a30      	ldr	r2, [pc, #192]	; (8003d5c <_Z4loopv+0x754>)
 8003c9a:	7ad2      	ldrb	r2, [r2, #11]
 8003c9c:	4313      	orrs	r3, r2
 8003c9e:	4618      	mov	r0, r3
 8003ca0:	f7fd f858 	bl	8000d54 <__aeabi_i2f>
 8003ca4:	4603      	mov	r3, r0
 8003ca6:	f04f 419d 	mov.w	r1, #1317011456	; 0x4e800000
 8003caa:	4618      	mov	r0, r3
 8003cac:	f7fd f95a 	bl	8000f64 <__aeabi_fdiv>
 8003cb0:	4603      	mov	r3, r0
 8003cb2:	461a      	mov	r2, r3
 8003cb4:	4b2c      	ldr	r3, [pc, #176]	; (8003d68 <_Z4loopv+0x760>)
 8003cb6:	609a      	str	r2, [r3, #8]
        MPUoutputQuaternion[3] = (float)(((int32_t)MPU6050_RX_buf[12] << 24) | ((int32_t)MPU6050_RX_buf[13] << 16) | ((int32_t)MPU6050_RX_buf[14] << 8) | MPU6050_RX_buf[15]) / 1073741824;
 8003cb8:	4b28      	ldr	r3, [pc, #160]	; (8003d5c <_Z4loopv+0x754>)
 8003cba:	7b1b      	ldrb	r3, [r3, #12]
 8003cbc:	061a      	lsls	r2, r3, #24
 8003cbe:	4b27      	ldr	r3, [pc, #156]	; (8003d5c <_Z4loopv+0x754>)
 8003cc0:	7b5b      	ldrb	r3, [r3, #13]
 8003cc2:	041b      	lsls	r3, r3, #16
 8003cc4:	431a      	orrs	r2, r3
 8003cc6:	4b25      	ldr	r3, [pc, #148]	; (8003d5c <_Z4loopv+0x754>)
 8003cc8:	7b9b      	ldrb	r3, [r3, #14]
 8003cca:	021b      	lsls	r3, r3, #8
 8003ccc:	4313      	orrs	r3, r2
 8003cce:	4a23      	ldr	r2, [pc, #140]	; (8003d5c <_Z4loopv+0x754>)
 8003cd0:	7bd2      	ldrb	r2, [r2, #15]
 8003cd2:	4313      	orrs	r3, r2
 8003cd4:	4618      	mov	r0, r3
 8003cd6:	f7fd f83d 	bl	8000d54 <__aeabi_i2f>
 8003cda:	4603      	mov	r3, r0
 8003cdc:	f04f 419d 	mov.w	r1, #1317011456	; 0x4e800000
 8003ce0:	4618      	mov	r0, r3
 8003ce2:	f7fd f93f 	bl	8000f64 <__aeabi_fdiv>
 8003ce6:	4603      	mov	r3, r0
 8003ce8:	461a      	mov	r2, r3
 8003cea:	4b1f      	ldr	r3, [pc, #124]	; (8003d68 <_Z4loopv+0x760>)
 8003cec:	60da      	str	r2, [r3, #12]
      }
      HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8003cee:	2006      	movs	r0, #6
 8003cf0:	f001 f8e1 	bl	8004eb6 <HAL_NVIC_EnableIRQ>
      break;
 8003cf4:	e008      	b.n	8003d08 <_Z4loopv+0x700>
    case 9:
      Step = 255;
 8003cf6:	4b1d      	ldr	r3, [pc, #116]	; (8003d6c <_Z4loopv+0x764>)
 8003cf8:	22ff      	movs	r2, #255	; 0xff
 8003cfa:	701a      	strb	r2, [r3, #0]
      break;
 8003cfc:	e004      	b.n	8003d08 <_Z4loopv+0x700>
    default:
      break;
 8003cfe:	bf00      	nop
 8003d00:	e002      	b.n	8003d08 <_Z4loopv+0x700>
      break;
 8003d02:	bf00      	nop
 8003d04:	e000      	b.n	8003d08 <_Z4loopv+0x700>
      break;
 8003d06:	bf00      	nop
    }
    Step ++;
 8003d08:	4b18      	ldr	r3, [pc, #96]	; (8003d6c <_Z4loopv+0x764>)
 8003d0a:	781b      	ldrb	r3, [r3, #0]
 8003d0c:	3301      	adds	r3, #1
 8003d0e:	b2da      	uxtb	r2, r3
 8003d10:	4b16      	ldr	r3, [pc, #88]	; (8003d6c <_Z4loopv+0x764>)
 8003d12:	701a      	strb	r2, [r3, #0]
    while (TIM4->CNT <= 1000)
 8003d14:	4b16      	ldr	r3, [pc, #88]	; (8003d70 <_Z4loopv+0x768>)
 8003d16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d18:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003d1c:	bf94      	ite	ls
 8003d1e:	2301      	movls	r3, #1
 8003d20:	2300      	movhi	r3, #0
 8003d22:	b2db      	uxtb	r3, r3
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d000      	beq.n	8003d2a <_Z4loopv+0x722>
 8003d28:	e7f4      	b.n	8003d14 <_Z4loopv+0x70c>
    {
    }
  }
  
  if ((HAL_GetTick() - timestamp) >= 50)
 8003d2a:	f000 fc65 	bl	80045f8 <HAL_GetTick>
 8003d2e:	4602      	mov	r2, r0
 8003d30:	4b10      	ldr	r3, [pc, #64]	; (8003d74 <_Z4loopv+0x76c>)
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	1ad3      	subs	r3, r2, r3
 8003d36:	2b31      	cmp	r3, #49	; 0x31
 8003d38:	bf8c      	ite	hi
 8003d3a:	2301      	movhi	r3, #1
 8003d3c:	2300      	movls	r3, #0
 8003d3e:	b2db      	uxtb	r3, r3
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d004      	beq.n	8003d4e <_Z4loopv+0x746>
  {
    timestamp += 50;
 8003d44:	4b0b      	ldr	r3, [pc, #44]	; (8003d74 <_Z4loopv+0x76c>)
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	3332      	adds	r3, #50	; 0x32
 8003d4a:	4a0a      	ldr	r2, [pc, #40]	; (8003d74 <_Z4loopv+0x76c>)
 8003d4c:	6013      	str	r3, [r2, #0]
  //// fastPPM_ONTime = (uint16_t)((((float)angle * (float)fastPPM_MinTime) / (float)360) + (float)fastPPM_MinTime);
  //fastPPM_ONTime = (uint16_t)(fastPPM_MinTime + ((float)SBUS_Channels[2] / 2));
  //fastPPM_OFFTime = fastPPM_Pulselength - fastPPM_ONTime;//OFF time in microseconds
  //TIM4->CCR1 = (uint16_t)(fastPPM_MinTime + 500 + ((float)SBUS_Channels[2] / 2) + ((float)sin((angle + 0) * (M_PI / 180)) * ((float)SBUS_Channels[0] / -10)) + ((float)cos((angle + 0) * (M_PI / 180)) * ((float)SBUS_Channels[1] / -10)));
  }
}
 8003d4e:	bf00      	nop
 8003d50:	f507 77b6 	add.w	r7, r7, #364	; 0x16c
 8003d54:	46bd      	mov	sp, r7
 8003d56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003d5a:	bf00      	nop
 8003d5c:	20000474 	.word	0x20000474
 8003d60:	20000494 	.word	0x20000494
 8003d64:	40020800 	.word	0x40020800
 8003d68:	20000484 	.word	0x20000484
 8003d6c:	2000082e 	.word	0x2000082e
 8003d70:	40000800 	.word	0x40000800
 8003d74:	20000824 	.word	0x20000824

08003d78 <_Z10motorAnglell>:


uint16_t motorAngle(int32_t hall_1, int32_t hall_2)
{
 8003d78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003d7a:	b085      	sub	sp, #20
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	6078      	str	r0, [r7, #4]
 8003d80:	6039      	str	r1, [r7, #0]
  uint16_t angle = 0;
 8003d82:	2300      	movs	r3, #0
 8003d84:	81fb      	strh	r3, [r7, #14]
  uint16_t offset = 0;
 8003d86:	2300      	movs	r3, #0
 8003d88:	81bb      	strh	r3, [r7, #12]
  
  if ((hall_1 == 0) | (hall_2 == 0))
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	bf0c      	ite	eq
 8003d90:	2301      	moveq	r3, #1
 8003d92:	2300      	movne	r3, #0
 8003d94:	b2da      	uxtb	r2, r3
 8003d96:	683b      	ldr	r3, [r7, #0]
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	bf0c      	ite	eq
 8003d9c:	2301      	moveq	r3, #1
 8003d9e:	2300      	movne	r3, #0
 8003da0:	b2db      	uxtb	r3, r3
 8003da2:	4313      	orrs	r3, r2
 8003da4:	b2db      	uxtb	r3, r3
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d015      	beq.n	8003dd6 <_Z10motorAnglell+0x5e>
    {
      if (hall_1 == 0)
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d108      	bne.n	8003dc2 <_Z10motorAnglell+0x4a>
      {
        if (hall_2 > 0)
 8003db0:	683b      	ldr	r3, [r7, #0]
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	dd02      	ble.n	8003dbc <_Z10motorAnglell+0x44>
        {
          angle = 0;
 8003db6:	2300      	movs	r3, #0
 8003db8:	81fb      	strh	r3, [r7, #14]
 8003dba:	e04d      	b.n	8003e58 <_Z10motorAnglell+0xe0>
        }
        else
        {
          angle = 180;
 8003dbc:	23b4      	movs	r3, #180	; 0xb4
 8003dbe:	81fb      	strh	r3, [r7, #14]
 8003dc0:	e04a      	b.n	8003e58 <_Z10motorAnglell+0xe0>
        }
      }
      else
      {
        if (hall_1 > 0)
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	dd02      	ble.n	8003dce <_Z10motorAnglell+0x56>
        {
          angle = 90;
 8003dc8:	235a      	movs	r3, #90	; 0x5a
 8003dca:	81fb      	strh	r3, [r7, #14]
 8003dcc:	e044      	b.n	8003e58 <_Z10motorAnglell+0xe0>
        }
        else
        {
          angle = 270;
 8003dce:	f44f 7387 	mov.w	r3, #270	; 0x10e
 8003dd2:	81fb      	strh	r3, [r7, #14]
 8003dd4:	e040      	b.n	8003e58 <_Z10motorAnglell+0xe0>
        }
      }
    }
    else
    {
      if (hall_2 < 0)
 8003dd6:	683b      	ldr	r3, [r7, #0]
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	da02      	bge.n	8003de2 <_Z10motorAnglell+0x6a>
      {
        offset = 180;
 8003ddc:	23b4      	movs	r3, #180	; 0xb4
 8003dde:	81bb      	strh	r3, [r7, #12]
 8003de0:	e008      	b.n	8003df4 <_Z10motorAnglell+0x7c>
      }
      else
      {
        if (hall_1 > 0)
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	dd02      	ble.n	8003dee <_Z10motorAnglell+0x76>
        {
          offset = 0;
 8003de8:	2300      	movs	r3, #0
 8003dea:	81bb      	strh	r3, [r7, #12]
 8003dec:	e002      	b.n	8003df4 <_Z10motorAnglell+0x7c>
        }
        else
        {
          offset = 360;
 8003dee:	f44f 73b4 	mov.w	r3, #360	; 0x168
 8003df2:	81bb      	strh	r3, [r7, #12]
        }
      }  
      angle = offset + ((atan((float)hall_1 / (float)hall_2) * 180) / M_PI);
 8003df4:	89bb      	ldrh	r3, [r7, #12]
 8003df6:	4618      	mov	r0, r3
 8003df8:	f7fc fb40 	bl	800047c <__aeabi_i2d>
 8003dfc:	4604      	mov	r4, r0
 8003dfe:	460d      	mov	r5, r1
 8003e00:	6878      	ldr	r0, [r7, #4]
 8003e02:	f7fc ffa7 	bl	8000d54 <__aeabi_i2f>
 8003e06:	4606      	mov	r6, r0
 8003e08:	6838      	ldr	r0, [r7, #0]
 8003e0a:	f7fc ffa3 	bl	8000d54 <__aeabi_i2f>
 8003e0e:	4603      	mov	r3, r0
 8003e10:	4619      	mov	r1, r3
 8003e12:	4630      	mov	r0, r6
 8003e14:	f7fd f8a6 	bl	8000f64 <__aeabi_fdiv>
 8003e18:	4603      	mov	r3, r0
 8003e1a:	4618      	mov	r0, r3
 8003e1c:	f7ff fbda 	bl	80035d4 <_ZSt4atanf>
 8003e20:	4603      	mov	r3, r0
 8003e22:	4913      	ldr	r1, [pc, #76]	; (8003e70 <_Z10motorAnglell+0xf8>)
 8003e24:	4618      	mov	r0, r3
 8003e26:	f7fc ffe9 	bl	8000dfc <__aeabi_fmul>
 8003e2a:	4603      	mov	r3, r0
 8003e2c:	4618      	mov	r0, r3
 8003e2e:	f7fc fb37 	bl	80004a0 <__aeabi_f2d>
 8003e32:	a30d      	add	r3, pc, #52	; (adr r3, 8003e68 <_Z10motorAnglell+0xf0>)
 8003e34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e38:	f7fc fcb4 	bl	80007a4 <__aeabi_ddiv>
 8003e3c:	4602      	mov	r2, r0
 8003e3e:	460b      	mov	r3, r1
 8003e40:	4620      	mov	r0, r4
 8003e42:	4629      	mov	r1, r5
 8003e44:	f7fc f9ce 	bl	80001e4 <__adddf3>
 8003e48:	4602      	mov	r2, r0
 8003e4a:	460b      	mov	r3, r1
 8003e4c:	4610      	mov	r0, r2
 8003e4e:	4619      	mov	r1, r3
 8003e50:	f7fc fe56 	bl	8000b00 <__aeabi_d2uiz>
 8003e54:	4603      	mov	r3, r0
 8003e56:	81fb      	strh	r3, [r7, #14]
    }  
    return angle;
 8003e58:	89fb      	ldrh	r3, [r7, #14]
 8003e5a:	4618      	mov	r0, r3
 8003e5c:	3714      	adds	r7, #20
 8003e5e:	46bd      	mov	sp, r7
 8003e60:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003e62:	bf00      	nop
 8003e64:	f3af 8000 	nop.w
 8003e68:	54442d18 	.word	0x54442d18
 8003e6c:	400921fb 	.word	0x400921fb
 8003e70:	43340000 	.word	0x43340000

08003e74 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003e74:	b480      	push	{r7}
 8003e76:	b083      	sub	sp, #12
 8003e78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003e7a:	2300      	movs	r3, #0
 8003e7c:	607b      	str	r3, [r7, #4]
 8003e7e:	4b0f      	ldr	r3, [pc, #60]	; (8003ebc <HAL_MspInit+0x48>)
 8003e80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e82:	4a0e      	ldr	r2, [pc, #56]	; (8003ebc <HAL_MspInit+0x48>)
 8003e84:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003e88:	6453      	str	r3, [r2, #68]	; 0x44
 8003e8a:	4b0c      	ldr	r3, [pc, #48]	; (8003ebc <HAL_MspInit+0x48>)
 8003e8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e8e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003e92:	607b      	str	r3, [r7, #4]
 8003e94:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003e96:	2300      	movs	r3, #0
 8003e98:	603b      	str	r3, [r7, #0]
 8003e9a:	4b08      	ldr	r3, [pc, #32]	; (8003ebc <HAL_MspInit+0x48>)
 8003e9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e9e:	4a07      	ldr	r2, [pc, #28]	; (8003ebc <HAL_MspInit+0x48>)
 8003ea0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ea4:	6413      	str	r3, [r2, #64]	; 0x40
 8003ea6:	4b05      	ldr	r3, [pc, #20]	; (8003ebc <HAL_MspInit+0x48>)
 8003ea8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eaa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003eae:	603b      	str	r3, [r7, #0]
 8003eb0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003eb2:	bf00      	nop
 8003eb4:	370c      	adds	r7, #12
 8003eb6:	46bd      	mov	sp, r7
 8003eb8:	bc80      	pop	{r7}
 8003eba:	4770      	bx	lr
 8003ebc:	40023800 	.word	0x40023800

08003ec0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003ec0:	b580      	push	{r7, lr}
 8003ec2:	b08a      	sub	sp, #40	; 0x28
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ec8:	f107 0314 	add.w	r3, r7, #20
 8003ecc:	2200      	movs	r2, #0
 8003ece:	601a      	str	r2, [r3, #0]
 8003ed0:	605a      	str	r2, [r3, #4]
 8003ed2:	609a      	str	r2, [r3, #8]
 8003ed4:	60da      	str	r2, [r3, #12]
 8003ed6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	4a17      	ldr	r2, [pc, #92]	; (8003f3c <HAL_ADC_MspInit+0x7c>)
 8003ede:	4293      	cmp	r3, r2
 8003ee0:	d127      	bne.n	8003f32 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003ee2:	2300      	movs	r3, #0
 8003ee4:	613b      	str	r3, [r7, #16]
 8003ee6:	4b16      	ldr	r3, [pc, #88]	; (8003f40 <HAL_ADC_MspInit+0x80>)
 8003ee8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003eea:	4a15      	ldr	r2, [pc, #84]	; (8003f40 <HAL_ADC_MspInit+0x80>)
 8003eec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ef0:	6453      	str	r3, [r2, #68]	; 0x44
 8003ef2:	4b13      	ldr	r3, [pc, #76]	; (8003f40 <HAL_ADC_MspInit+0x80>)
 8003ef4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ef6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003efa:	613b      	str	r3, [r7, #16]
 8003efc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003efe:	2300      	movs	r3, #0
 8003f00:	60fb      	str	r3, [r7, #12]
 8003f02:	4b0f      	ldr	r3, [pc, #60]	; (8003f40 <HAL_ADC_MspInit+0x80>)
 8003f04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f06:	4a0e      	ldr	r2, [pc, #56]	; (8003f40 <HAL_ADC_MspInit+0x80>)
 8003f08:	f043 0304 	orr.w	r3, r3, #4
 8003f0c:	6313      	str	r3, [r2, #48]	; 0x30
 8003f0e:	4b0c      	ldr	r3, [pc, #48]	; (8003f40 <HAL_ADC_MspInit+0x80>)
 8003f10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f12:	f003 0304 	and.w	r3, r3, #4
 8003f16:	60fb      	str	r3, [r7, #12]
 8003f18:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC1     ------> ADC1_IN11
    PC2     ------> ADC1_IN12
    */
    GPIO_InitStruct.Pin = ONBOARD_ADC_2_Pin|ONBOARD_ADC_1_Pin;
 8003f1a:	2306      	movs	r3, #6
 8003f1c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003f1e:	2303      	movs	r3, #3
 8003f20:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f22:	2300      	movs	r3, #0
 8003f24:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003f26:	f107 0314 	add.w	r3, r7, #20
 8003f2a:	4619      	mov	r1, r3
 8003f2c:	4805      	ldr	r0, [pc, #20]	; (8003f44 <HAL_ADC_MspInit+0x84>)
 8003f2e:	f001 fad1 	bl	80054d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8003f32:	bf00      	nop
 8003f34:	3728      	adds	r7, #40	; 0x28
 8003f36:	46bd      	mov	sp, r7
 8003f38:	bd80      	pop	{r7, pc}
 8003f3a:	bf00      	nop
 8003f3c:	40012000 	.word	0x40012000
 8003f40:	40023800 	.word	0x40023800
 8003f44:	40020800 	.word	0x40020800

08003f48 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003f48:	b580      	push	{r7, lr}
 8003f4a:	b08a      	sub	sp, #40	; 0x28
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f50:	f107 0314 	add.w	r3, r7, #20
 8003f54:	2200      	movs	r2, #0
 8003f56:	601a      	str	r2, [r3, #0]
 8003f58:	605a      	str	r2, [r3, #4]
 8003f5a:	609a      	str	r2, [r3, #8]
 8003f5c:	60da      	str	r2, [r3, #12]
 8003f5e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	4a48      	ldr	r2, [pc, #288]	; (8004088 <HAL_I2C_MspInit+0x140>)
 8003f66:	4293      	cmp	r3, r2
 8003f68:	f040 8089 	bne.w	800407e <HAL_I2C_MspInit+0x136>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003f6c:	2300      	movs	r3, #0
 8003f6e:	613b      	str	r3, [r7, #16]
 8003f70:	4b46      	ldr	r3, [pc, #280]	; (800408c <HAL_I2C_MspInit+0x144>)
 8003f72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f74:	4a45      	ldr	r2, [pc, #276]	; (800408c <HAL_I2C_MspInit+0x144>)
 8003f76:	f043 0302 	orr.w	r3, r3, #2
 8003f7a:	6313      	str	r3, [r2, #48]	; 0x30
 8003f7c:	4b43      	ldr	r3, [pc, #268]	; (800408c <HAL_I2C_MspInit+0x144>)
 8003f7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f80:	f003 0302 	and.w	r3, r3, #2
 8003f84:	613b      	str	r3, [r7, #16]
 8003f86:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003f88:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003f8c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003f8e:	2312      	movs	r3, #18
 8003f90:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f92:	2300      	movs	r3, #0
 8003f94:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003f96:	2303      	movs	r3, #3
 8003f98:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003f9a:	2304      	movs	r3, #4
 8003f9c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003f9e:	f107 0314 	add.w	r3, r7, #20
 8003fa2:	4619      	mov	r1, r3
 8003fa4:	483a      	ldr	r0, [pc, #232]	; (8004090 <HAL_I2C_MspInit+0x148>)
 8003fa6:	f001 fa95 	bl	80054d4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003faa:	2300      	movs	r3, #0
 8003fac:	60fb      	str	r3, [r7, #12]
 8003fae:	4b37      	ldr	r3, [pc, #220]	; (800408c <HAL_I2C_MspInit+0x144>)
 8003fb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fb2:	4a36      	ldr	r2, [pc, #216]	; (800408c <HAL_I2C_MspInit+0x144>)
 8003fb4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003fb8:	6413      	str	r3, [r2, #64]	; 0x40
 8003fba:	4b34      	ldr	r3, [pc, #208]	; (800408c <HAL_I2C_MspInit+0x144>)
 8003fbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fbe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003fc2:	60fb      	str	r3, [r7, #12]
 8003fc4:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream6;
 8003fc6:	4b33      	ldr	r3, [pc, #204]	; (8004094 <HAL_I2C_MspInit+0x14c>)
 8003fc8:	4a33      	ldr	r2, [pc, #204]	; (8004098 <HAL_I2C_MspInit+0x150>)
 8003fca:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_1;
 8003fcc:	4b31      	ldr	r3, [pc, #196]	; (8004094 <HAL_I2C_MspInit+0x14c>)
 8003fce:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003fd2:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003fd4:	4b2f      	ldr	r3, [pc, #188]	; (8004094 <HAL_I2C_MspInit+0x14c>)
 8003fd6:	2240      	movs	r2, #64	; 0x40
 8003fd8:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003fda:	4b2e      	ldr	r3, [pc, #184]	; (8004094 <HAL_I2C_MspInit+0x14c>)
 8003fdc:	2200      	movs	r2, #0
 8003fde:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003fe0:	4b2c      	ldr	r3, [pc, #176]	; (8004094 <HAL_I2C_MspInit+0x14c>)
 8003fe2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003fe6:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003fe8:	4b2a      	ldr	r3, [pc, #168]	; (8004094 <HAL_I2C_MspInit+0x14c>)
 8003fea:	2200      	movs	r2, #0
 8003fec:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003fee:	4b29      	ldr	r3, [pc, #164]	; (8004094 <HAL_I2C_MspInit+0x14c>)
 8003ff0:	2200      	movs	r2, #0
 8003ff2:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8003ff4:	4b27      	ldr	r3, [pc, #156]	; (8004094 <HAL_I2C_MspInit+0x14c>)
 8003ff6:	2200      	movs	r2, #0
 8003ff8:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003ffa:	4b26      	ldr	r3, [pc, #152]	; (8004094 <HAL_I2C_MspInit+0x14c>)
 8003ffc:	2200      	movs	r2, #0
 8003ffe:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004000:	4b24      	ldr	r3, [pc, #144]	; (8004094 <HAL_I2C_MspInit+0x14c>)
 8004002:	2200      	movs	r2, #0
 8004004:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8004006:	4823      	ldr	r0, [pc, #140]	; (8004094 <HAL_I2C_MspInit+0x14c>)
 8004008:	f000 ff7e 	bl	8004f08 <HAL_DMA_Init>
 800400c:	4603      	mov	r3, r0
 800400e:	2b00      	cmp	r3, #0
 8004010:	d001      	beq.n	8004016 <HAL_I2C_MspInit+0xce>
    {
      Error_Handler();
 8004012:	f7ff fa9d 	bl	8003550 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	4a1e      	ldr	r2, [pc, #120]	; (8004094 <HAL_I2C_MspInit+0x14c>)
 800401a:	635a      	str	r2, [r3, #52]	; 0x34
 800401c:	4a1d      	ldr	r2, [pc, #116]	; (8004094 <HAL_I2C_MspInit+0x14c>)
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 8004022:	4b1e      	ldr	r3, [pc, #120]	; (800409c <HAL_I2C_MspInit+0x154>)
 8004024:	4a1e      	ldr	r2, [pc, #120]	; (80040a0 <HAL_I2C_MspInit+0x158>)
 8004026:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 8004028:	4b1c      	ldr	r3, [pc, #112]	; (800409c <HAL_I2C_MspInit+0x154>)
 800402a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800402e:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004030:	4b1a      	ldr	r3, [pc, #104]	; (800409c <HAL_I2C_MspInit+0x154>)
 8004032:	2200      	movs	r2, #0
 8004034:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004036:	4b19      	ldr	r3, [pc, #100]	; (800409c <HAL_I2C_MspInit+0x154>)
 8004038:	2200      	movs	r2, #0
 800403a:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800403c:	4b17      	ldr	r3, [pc, #92]	; (800409c <HAL_I2C_MspInit+0x154>)
 800403e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004042:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004044:	4b15      	ldr	r3, [pc, #84]	; (800409c <HAL_I2C_MspInit+0x154>)
 8004046:	2200      	movs	r2, #0
 8004048:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800404a:	4b14      	ldr	r3, [pc, #80]	; (800409c <HAL_I2C_MspInit+0x154>)
 800404c:	2200      	movs	r2, #0
 800404e:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8004050:	4b12      	ldr	r3, [pc, #72]	; (800409c <HAL_I2C_MspInit+0x154>)
 8004052:	2200      	movs	r2, #0
 8004054:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8004056:	4b11      	ldr	r3, [pc, #68]	; (800409c <HAL_I2C_MspInit+0x154>)
 8004058:	2200      	movs	r2, #0
 800405a:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800405c:	4b0f      	ldr	r3, [pc, #60]	; (800409c <HAL_I2C_MspInit+0x154>)
 800405e:	2200      	movs	r2, #0
 8004060:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8004062:	480e      	ldr	r0, [pc, #56]	; (800409c <HAL_I2C_MspInit+0x154>)
 8004064:	f000 ff50 	bl	8004f08 <HAL_DMA_Init>
 8004068:	4603      	mov	r3, r0
 800406a:	2b00      	cmp	r3, #0
 800406c:	d001      	beq.n	8004072 <HAL_I2C_MspInit+0x12a>
    {
      Error_Handler();
 800406e:	f7ff fa6f 	bl	8003550 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	4a09      	ldr	r2, [pc, #36]	; (800409c <HAL_I2C_MspInit+0x154>)
 8004076:	639a      	str	r2, [r3, #56]	; 0x38
 8004078:	4a08      	ldr	r2, [pc, #32]	; (800409c <HAL_I2C_MspInit+0x154>)
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800407e:	bf00      	nop
 8004080:	3728      	adds	r7, #40	; 0x28
 8004082:	46bd      	mov	sp, r7
 8004084:	bd80      	pop	{r7, pc}
 8004086:	bf00      	nop
 8004088:	40005400 	.word	0x40005400
 800408c:	40023800 	.word	0x40023800
 8004090:	40020400 	.word	0x40020400
 8004094:	200005f4 	.word	0x200005f4
 8004098:	400260a0 	.word	0x400260a0
 800409c:	20000654 	.word	0x20000654
 80040a0:	40026010 	.word	0x40026010

080040a4 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80040a4:	b480      	push	{r7}
 80040a6:	b085      	sub	sp, #20
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	4a14      	ldr	r2, [pc, #80]	; (8004104 <HAL_TIM_PWM_MspInit+0x60>)
 80040b2:	4293      	cmp	r3, r2
 80040b4:	d10e      	bne.n	80040d4 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80040b6:	2300      	movs	r3, #0
 80040b8:	60fb      	str	r3, [r7, #12]
 80040ba:	4b13      	ldr	r3, [pc, #76]	; (8004108 <HAL_TIM_PWM_MspInit+0x64>)
 80040bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040be:	4a12      	ldr	r2, [pc, #72]	; (8004108 <HAL_TIM_PWM_MspInit+0x64>)
 80040c0:	f043 0302 	orr.w	r3, r3, #2
 80040c4:	6413      	str	r3, [r2, #64]	; 0x40
 80040c6:	4b10      	ldr	r3, [pc, #64]	; (8004108 <HAL_TIM_PWM_MspInit+0x64>)
 80040c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040ca:	f003 0302 	and.w	r3, r3, #2
 80040ce:	60fb      	str	r3, [r7, #12]
 80040d0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80040d2:	e012      	b.n	80040fa <HAL_TIM_PWM_MspInit+0x56>
  else if(htim_pwm->Instance==TIM4)
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	4a0c      	ldr	r2, [pc, #48]	; (800410c <HAL_TIM_PWM_MspInit+0x68>)
 80040da:	4293      	cmp	r3, r2
 80040dc:	d10d      	bne.n	80040fa <HAL_TIM_PWM_MspInit+0x56>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80040de:	2300      	movs	r3, #0
 80040e0:	60bb      	str	r3, [r7, #8]
 80040e2:	4b09      	ldr	r3, [pc, #36]	; (8004108 <HAL_TIM_PWM_MspInit+0x64>)
 80040e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040e6:	4a08      	ldr	r2, [pc, #32]	; (8004108 <HAL_TIM_PWM_MspInit+0x64>)
 80040e8:	f043 0304 	orr.w	r3, r3, #4
 80040ec:	6413      	str	r3, [r2, #64]	; 0x40
 80040ee:	4b06      	ldr	r3, [pc, #24]	; (8004108 <HAL_TIM_PWM_MspInit+0x64>)
 80040f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040f2:	f003 0304 	and.w	r3, r3, #4
 80040f6:	60bb      	str	r3, [r7, #8]
 80040f8:	68bb      	ldr	r3, [r7, #8]
}
 80040fa:	bf00      	nop
 80040fc:	3714      	adds	r7, #20
 80040fe:	46bd      	mov	sp, r7
 8004100:	bc80      	pop	{r7}
 8004102:	4770      	bx	lr
 8004104:	40000400 	.word	0x40000400
 8004108:	40023800 	.word	0x40023800
 800410c:	40000800 	.word	0x40000800

08004110 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004110:	b580      	push	{r7, lr}
 8004112:	b086      	sub	sp, #24
 8004114:	af00      	add	r7, sp, #0
 8004116:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM11)
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	4a26      	ldr	r2, [pc, #152]	; (80041b8 <HAL_TIM_Base_MspInit+0xa8>)
 800411e:	4293      	cmp	r3, r2
 8004120:	d10e      	bne.n	8004140 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM11_MspInit 0 */

  /* USER CODE END TIM11_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM11_CLK_ENABLE();
 8004122:	2300      	movs	r3, #0
 8004124:	617b      	str	r3, [r7, #20]
 8004126:	4b25      	ldr	r3, [pc, #148]	; (80041bc <HAL_TIM_Base_MspInit+0xac>)
 8004128:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800412a:	4a24      	ldr	r2, [pc, #144]	; (80041bc <HAL_TIM_Base_MspInit+0xac>)
 800412c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004130:	6453      	str	r3, [r2, #68]	; 0x44
 8004132:	4b22      	ldr	r3, [pc, #136]	; (80041bc <HAL_TIM_Base_MspInit+0xac>)
 8004134:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004136:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800413a:	617b      	str	r3, [r7, #20]
 800413c:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 800413e:	e036      	b.n	80041ae <HAL_TIM_Base_MspInit+0x9e>
  else if(htim_base->Instance==TIM13)
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	4a1e      	ldr	r2, [pc, #120]	; (80041c0 <HAL_TIM_Base_MspInit+0xb0>)
 8004146:	4293      	cmp	r3, r2
 8004148:	d116      	bne.n	8004178 <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM13_CLK_ENABLE();
 800414a:	2300      	movs	r3, #0
 800414c:	613b      	str	r3, [r7, #16]
 800414e:	4b1b      	ldr	r3, [pc, #108]	; (80041bc <HAL_TIM_Base_MspInit+0xac>)
 8004150:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004152:	4a1a      	ldr	r2, [pc, #104]	; (80041bc <HAL_TIM_Base_MspInit+0xac>)
 8004154:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004158:	6413      	str	r3, [r2, #64]	; 0x40
 800415a:	4b18      	ldr	r3, [pc, #96]	; (80041bc <HAL_TIM_Base_MspInit+0xac>)
 800415c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800415e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004162:	613b      	str	r3, [r7, #16]
 8004164:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 1, 0);
 8004166:	2200      	movs	r2, #0
 8004168:	2101      	movs	r1, #1
 800416a:	202c      	movs	r0, #44	; 0x2c
 800416c:	f000 fe87 	bl	8004e7e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8004170:	202c      	movs	r0, #44	; 0x2c
 8004172:	f000 fea0 	bl	8004eb6 <HAL_NVIC_EnableIRQ>
}
 8004176:	e01a      	b.n	80041ae <HAL_TIM_Base_MspInit+0x9e>
  else if(htim_base->Instance==TIM14)
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	4a11      	ldr	r2, [pc, #68]	; (80041c4 <HAL_TIM_Base_MspInit+0xb4>)
 800417e:	4293      	cmp	r3, r2
 8004180:	d115      	bne.n	80041ae <HAL_TIM_Base_MspInit+0x9e>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8004182:	2300      	movs	r3, #0
 8004184:	60fb      	str	r3, [r7, #12]
 8004186:	4b0d      	ldr	r3, [pc, #52]	; (80041bc <HAL_TIM_Base_MspInit+0xac>)
 8004188:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800418a:	4a0c      	ldr	r2, [pc, #48]	; (80041bc <HAL_TIM_Base_MspInit+0xac>)
 800418c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004190:	6413      	str	r3, [r2, #64]	; 0x40
 8004192:	4b0a      	ldr	r3, [pc, #40]	; (80041bc <HAL_TIM_Base_MspInit+0xac>)
 8004194:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004196:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800419a:	60fb      	str	r3, [r7, #12]
 800419c:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 0, 0);
 800419e:	2200      	movs	r2, #0
 80041a0:	2100      	movs	r1, #0
 80041a2:	202d      	movs	r0, #45	; 0x2d
 80041a4:	f000 fe6b 	bl	8004e7e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 80041a8:	202d      	movs	r0, #45	; 0x2d
 80041aa:	f000 fe84 	bl	8004eb6 <HAL_NVIC_EnableIRQ>
}
 80041ae:	bf00      	nop
 80041b0:	3718      	adds	r7, #24
 80041b2:	46bd      	mov	sp, r7
 80041b4:	bd80      	pop	{r7, pc}
 80041b6:	bf00      	nop
 80041b8:	40014800 	.word	0x40014800
 80041bc:	40023800 	.word	0x40023800
 80041c0:	40001c00 	.word	0x40001c00
 80041c4:	40002000 	.word	0x40002000

080041c8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80041c8:	b580      	push	{r7, lr}
 80041ca:	b08a      	sub	sp, #40	; 0x28
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80041d0:	f107 0314 	add.w	r3, r7, #20
 80041d4:	2200      	movs	r2, #0
 80041d6:	601a      	str	r2, [r3, #0]
 80041d8:	605a      	str	r2, [r3, #4]
 80041da:	609a      	str	r2, [r3, #8]
 80041dc:	60da      	str	r2, [r3, #12]
 80041de:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	4a24      	ldr	r2, [pc, #144]	; (8004278 <HAL_TIM_MspPostInit+0xb0>)
 80041e6:	4293      	cmp	r3, r2
 80041e8:	d11e      	bne.n	8004228 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80041ea:	2300      	movs	r3, #0
 80041ec:	613b      	str	r3, [r7, #16]
 80041ee:	4b23      	ldr	r3, [pc, #140]	; (800427c <HAL_TIM_MspPostInit+0xb4>)
 80041f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041f2:	4a22      	ldr	r2, [pc, #136]	; (800427c <HAL_TIM_MspPostInit+0xb4>)
 80041f4:	f043 0304 	orr.w	r3, r3, #4
 80041f8:	6313      	str	r3, [r2, #48]	; 0x30
 80041fa:	4b20      	ldr	r3, [pc, #128]	; (800427c <HAL_TIM_MspPostInit+0xb4>)
 80041fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041fe:	f003 0304 	and.w	r3, r3, #4
 8004202:	613b      	str	r3, [r7, #16]
 8004204:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PC6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = ONBOARD_WRITE_4_Pin;
 8004206:	2340      	movs	r3, #64	; 0x40
 8004208:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800420a:	2302      	movs	r3, #2
 800420c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800420e:	2300      	movs	r3, #0
 8004210:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004212:	2300      	movs	r3, #0
 8004214:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8004216:	2302      	movs	r3, #2
 8004218:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ONBOARD_WRITE_4_GPIO_Port, &GPIO_InitStruct);
 800421a:	f107 0314 	add.w	r3, r7, #20
 800421e:	4619      	mov	r1, r3
 8004220:	4817      	ldr	r0, [pc, #92]	; (8004280 <HAL_TIM_MspPostInit+0xb8>)
 8004222:	f001 f957 	bl	80054d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8004226:	e022      	b.n	800426e <HAL_TIM_MspPostInit+0xa6>
  else if(htim->Instance==TIM4)
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	4a15      	ldr	r2, [pc, #84]	; (8004284 <HAL_TIM_MspPostInit+0xbc>)
 800422e:	4293      	cmp	r3, r2
 8004230:	d11d      	bne.n	800426e <HAL_TIM_MspPostInit+0xa6>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004232:	2300      	movs	r3, #0
 8004234:	60fb      	str	r3, [r7, #12]
 8004236:	4b11      	ldr	r3, [pc, #68]	; (800427c <HAL_TIM_MspPostInit+0xb4>)
 8004238:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800423a:	4a10      	ldr	r2, [pc, #64]	; (800427c <HAL_TIM_MspPostInit+0xb4>)
 800423c:	f043 0302 	orr.w	r3, r3, #2
 8004240:	6313      	str	r3, [r2, #48]	; 0x30
 8004242:	4b0e      	ldr	r3, [pc, #56]	; (800427c <HAL_TIM_MspPostInit+0xb4>)
 8004244:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004246:	f003 0302 	and.w	r3, r3, #2
 800424a:	60fb      	str	r3, [r7, #12]
 800424c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ONBOARD_WRITE_1_Pin;
 800424e:	2340      	movs	r3, #64	; 0x40
 8004250:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004252:	2302      	movs	r3, #2
 8004254:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004256:	2300      	movs	r3, #0
 8004258:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800425a:	2300      	movs	r3, #0
 800425c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800425e:	2302      	movs	r3, #2
 8004260:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ONBOARD_WRITE_1_GPIO_Port, &GPIO_InitStruct);
 8004262:	f107 0314 	add.w	r3, r7, #20
 8004266:	4619      	mov	r1, r3
 8004268:	4807      	ldr	r0, [pc, #28]	; (8004288 <HAL_TIM_MspPostInit+0xc0>)
 800426a:	f001 f933 	bl	80054d4 <HAL_GPIO_Init>
}
 800426e:	bf00      	nop
 8004270:	3728      	adds	r7, #40	; 0x28
 8004272:	46bd      	mov	sp, r7
 8004274:	bd80      	pop	{r7, pc}
 8004276:	bf00      	nop
 8004278:	40000400 	.word	0x40000400
 800427c:	40023800 	.word	0x40023800
 8004280:	40020800 	.word	0x40020800
 8004284:	40000800 	.word	0x40000800
 8004288:	40020400 	.word	0x40020400

0800428c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800428c:	b580      	push	{r7, lr}
 800428e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 8004290:	f004 f870 	bl	8008374 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004294:	e7fe      	b.n	8004294 <NMI_Handler+0x8>

08004296 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004296:	b480      	push	{r7}
 8004298:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800429a:	e7fe      	b.n	800429a <HardFault_Handler+0x4>

0800429c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800429c:	b480      	push	{r7}
 800429e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80042a0:	e7fe      	b.n	80042a0 <MemManage_Handler+0x4>

080042a2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80042a2:	b480      	push	{r7}
 80042a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80042a6:	e7fe      	b.n	80042a6 <BusFault_Handler+0x4>

080042a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80042a8:	b480      	push	{r7}
 80042aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80042ac:	e7fe      	b.n	80042ac <UsageFault_Handler+0x4>

080042ae <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80042ae:	b480      	push	{r7}
 80042b0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80042b2:	bf00      	nop
 80042b4:	46bd      	mov	sp, r7
 80042b6:	bc80      	pop	{r7}
 80042b8:	4770      	bx	lr

080042ba <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80042ba:	b480      	push	{r7}
 80042bc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80042be:	bf00      	nop
 80042c0:	46bd      	mov	sp, r7
 80042c2:	bc80      	pop	{r7}
 80042c4:	4770      	bx	lr

080042c6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80042c6:	b480      	push	{r7}
 80042c8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80042ca:	bf00      	nop
 80042cc:	46bd      	mov	sp, r7
 80042ce:	bc80      	pop	{r7}
 80042d0:	4770      	bx	lr

080042d2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80042d2:	b580      	push	{r7, lr}
 80042d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80042d6:	f000 f97d 	bl	80045d4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80042da:	bf00      	nop
 80042dc:	bd80      	pop	{r7, pc}

080042de <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80042de:	b580      	push	{r7, lr}
 80042e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ONBOARD_READ_IT_3_Pin);
 80042e2:	2001      	movs	r0, #1
 80042e4:	f001 fac6 	bl	8005874 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80042e8:	bf00      	nop
 80042ea:	bd80      	pop	{r7, pc}

080042ec <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80042ec:	b580      	push	{r7, lr}
 80042ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 80042f0:	4802      	ldr	r0, [pc, #8]	; (80042fc <DMA1_Stream0_IRQHandler+0x10>)
 80042f2:	f000 feb7 	bl	8005064 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80042f6:	bf00      	nop
 80042f8:	bd80      	pop	{r7, pc}
 80042fa:	bf00      	nop
 80042fc:	20000654 	.word	0x20000654

08004300 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8004300:	b580      	push	{r7, lr}
 8004302:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8004304:	4802      	ldr	r0, [pc, #8]	; (8004310 <DMA1_Stream6_IRQHandler+0x10>)
 8004306:	f000 fead 	bl	8005064 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 800430a:	bf00      	nop
 800430c:	bd80      	pop	{r7, pc}
 800430e:	bf00      	nop
 8004310:	200005f4 	.word	0x200005f4

08004314 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8004314:	b580      	push	{r7, lr}
 8004316:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim13);
 8004318:	4802      	ldr	r0, [pc, #8]	; (8004324 <TIM8_UP_TIM13_IRQHandler+0x10>)
 800431a:	f004 fa81 	bl	8008820 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 800431e:	bf00      	nop
 8004320:	bd80      	pop	{r7, pc}
 8004322:	bf00      	nop
 8004324:	2000078c 	.word	0x2000078c

08004328 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8004328:	b580      	push	{r7, lr}
 800432a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 800432c:	4802      	ldr	r0, [pc, #8]	; (8004338 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 800432e:	f004 fa77 	bl	8008820 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8004332:	bf00      	nop
 8004334:	bd80      	pop	{r7, pc}
 8004336:	bf00      	nop
 8004338:	200007d4 	.word	0x200007d4

0800433c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800433c:	b580      	push	{r7, lr}
 800433e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8004340:	4802      	ldr	r0, [pc, #8]	; (800434c <OTG_FS_IRQHandler+0x10>)
 8004342:	f002 fbac 	bl	8006a9e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8004346:	bf00      	nop
 8004348:	bd80      	pop	{r7, pc}
 800434a:	bf00      	nop
 800434c:	20001d08 	.word	0x20001d08

08004350 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004350:	b480      	push	{r7}
 8004352:	af00      	add	r7, sp, #0
	return 1;
 8004354:	2301      	movs	r3, #1
}
 8004356:	4618      	mov	r0, r3
 8004358:	46bd      	mov	sp, r7
 800435a:	bc80      	pop	{r7}
 800435c:	4770      	bx	lr

0800435e <_kill>:

int _kill(int pid, int sig)
{
 800435e:	b580      	push	{r7, lr}
 8004360:	b082      	sub	sp, #8
 8004362:	af00      	add	r7, sp, #0
 8004364:	6078      	str	r0, [r7, #4]
 8004366:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8004368:	f009 fe98 	bl	800e09c <__errno>
 800436c:	4603      	mov	r3, r0
 800436e:	2216      	movs	r2, #22
 8004370:	601a      	str	r2, [r3, #0]
	return -1;
 8004372:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004376:	4618      	mov	r0, r3
 8004378:	3708      	adds	r7, #8
 800437a:	46bd      	mov	sp, r7
 800437c:	bd80      	pop	{r7, pc}

0800437e <_exit>:

void _exit (int status)
{
 800437e:	b580      	push	{r7, lr}
 8004380:	b082      	sub	sp, #8
 8004382:	af00      	add	r7, sp, #0
 8004384:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8004386:	f04f 31ff 	mov.w	r1, #4294967295
 800438a:	6878      	ldr	r0, [r7, #4]
 800438c:	f7ff ffe7 	bl	800435e <_kill>
	while (1) {}		/* Make sure we hang here */
 8004390:	e7fe      	b.n	8004390 <_exit+0x12>

08004392 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004392:	b580      	push	{r7, lr}
 8004394:	b086      	sub	sp, #24
 8004396:	af00      	add	r7, sp, #0
 8004398:	60f8      	str	r0, [r7, #12]
 800439a:	60b9      	str	r1, [r7, #8]
 800439c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800439e:	2300      	movs	r3, #0
 80043a0:	617b      	str	r3, [r7, #20]
 80043a2:	e00a      	b.n	80043ba <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80043a4:	f3af 8000 	nop.w
 80043a8:	4601      	mov	r1, r0
 80043aa:	68bb      	ldr	r3, [r7, #8]
 80043ac:	1c5a      	adds	r2, r3, #1
 80043ae:	60ba      	str	r2, [r7, #8]
 80043b0:	b2ca      	uxtb	r2, r1
 80043b2:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80043b4:	697b      	ldr	r3, [r7, #20]
 80043b6:	3301      	adds	r3, #1
 80043b8:	617b      	str	r3, [r7, #20]
 80043ba:	697a      	ldr	r2, [r7, #20]
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	429a      	cmp	r2, r3
 80043c0:	dbf0      	blt.n	80043a4 <_read+0x12>
	}

return len;
 80043c2:	687b      	ldr	r3, [r7, #4]
}
 80043c4:	4618      	mov	r0, r3
 80043c6:	3718      	adds	r7, #24
 80043c8:	46bd      	mov	sp, r7
 80043ca:	bd80      	pop	{r7, pc}

080043cc <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80043cc:	b580      	push	{r7, lr}
 80043ce:	b086      	sub	sp, #24
 80043d0:	af00      	add	r7, sp, #0
 80043d2:	60f8      	str	r0, [r7, #12]
 80043d4:	60b9      	str	r1, [r7, #8]
 80043d6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80043d8:	2300      	movs	r3, #0
 80043da:	617b      	str	r3, [r7, #20]
 80043dc:	e009      	b.n	80043f2 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80043de:	68bb      	ldr	r3, [r7, #8]
 80043e0:	1c5a      	adds	r2, r3, #1
 80043e2:	60ba      	str	r2, [r7, #8]
 80043e4:	781b      	ldrb	r3, [r3, #0]
 80043e6:	4618      	mov	r0, r3
 80043e8:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80043ec:	697b      	ldr	r3, [r7, #20]
 80043ee:	3301      	adds	r3, #1
 80043f0:	617b      	str	r3, [r7, #20]
 80043f2:	697a      	ldr	r2, [r7, #20]
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	429a      	cmp	r2, r3
 80043f8:	dbf1      	blt.n	80043de <_write+0x12>
	}
	return len;
 80043fa:	687b      	ldr	r3, [r7, #4]
}
 80043fc:	4618      	mov	r0, r3
 80043fe:	3718      	adds	r7, #24
 8004400:	46bd      	mov	sp, r7
 8004402:	bd80      	pop	{r7, pc}

08004404 <_close>:

int _close(int file)
{
 8004404:	b480      	push	{r7}
 8004406:	b083      	sub	sp, #12
 8004408:	af00      	add	r7, sp, #0
 800440a:	6078      	str	r0, [r7, #4]
	return -1;
 800440c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004410:	4618      	mov	r0, r3
 8004412:	370c      	adds	r7, #12
 8004414:	46bd      	mov	sp, r7
 8004416:	bc80      	pop	{r7}
 8004418:	4770      	bx	lr

0800441a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800441a:	b480      	push	{r7}
 800441c:	b083      	sub	sp, #12
 800441e:	af00      	add	r7, sp, #0
 8004420:	6078      	str	r0, [r7, #4]
 8004422:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8004424:	683b      	ldr	r3, [r7, #0]
 8004426:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800442a:	605a      	str	r2, [r3, #4]
	return 0;
 800442c:	2300      	movs	r3, #0
}
 800442e:	4618      	mov	r0, r3
 8004430:	370c      	adds	r7, #12
 8004432:	46bd      	mov	sp, r7
 8004434:	bc80      	pop	{r7}
 8004436:	4770      	bx	lr

08004438 <_isatty>:

int _isatty(int file)
{
 8004438:	b480      	push	{r7}
 800443a:	b083      	sub	sp, #12
 800443c:	af00      	add	r7, sp, #0
 800443e:	6078      	str	r0, [r7, #4]
	return 1;
 8004440:	2301      	movs	r3, #1
}
 8004442:	4618      	mov	r0, r3
 8004444:	370c      	adds	r7, #12
 8004446:	46bd      	mov	sp, r7
 8004448:	bc80      	pop	{r7}
 800444a:	4770      	bx	lr

0800444c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800444c:	b480      	push	{r7}
 800444e:	b085      	sub	sp, #20
 8004450:	af00      	add	r7, sp, #0
 8004452:	60f8      	str	r0, [r7, #12]
 8004454:	60b9      	str	r1, [r7, #8]
 8004456:	607a      	str	r2, [r7, #4]
	return 0;
 8004458:	2300      	movs	r3, #0
}
 800445a:	4618      	mov	r0, r3
 800445c:	3714      	adds	r7, #20
 800445e:	46bd      	mov	sp, r7
 8004460:	bc80      	pop	{r7}
 8004462:	4770      	bx	lr

08004464 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004464:	b580      	push	{r7, lr}
 8004466:	b086      	sub	sp, #24
 8004468:	af00      	add	r7, sp, #0
 800446a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800446c:	4a14      	ldr	r2, [pc, #80]	; (80044c0 <_sbrk+0x5c>)
 800446e:	4b15      	ldr	r3, [pc, #84]	; (80044c4 <_sbrk+0x60>)
 8004470:	1ad3      	subs	r3, r2, r3
 8004472:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004474:	697b      	ldr	r3, [r7, #20]
 8004476:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004478:	4b13      	ldr	r3, [pc, #76]	; (80044c8 <_sbrk+0x64>)
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	2b00      	cmp	r3, #0
 800447e:	d102      	bne.n	8004486 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004480:	4b11      	ldr	r3, [pc, #68]	; (80044c8 <_sbrk+0x64>)
 8004482:	4a12      	ldr	r2, [pc, #72]	; (80044cc <_sbrk+0x68>)
 8004484:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004486:	4b10      	ldr	r3, [pc, #64]	; (80044c8 <_sbrk+0x64>)
 8004488:	681a      	ldr	r2, [r3, #0]
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	4413      	add	r3, r2
 800448e:	693a      	ldr	r2, [r7, #16]
 8004490:	429a      	cmp	r2, r3
 8004492:	d207      	bcs.n	80044a4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004494:	f009 fe02 	bl	800e09c <__errno>
 8004498:	4603      	mov	r3, r0
 800449a:	220c      	movs	r2, #12
 800449c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800449e:	f04f 33ff 	mov.w	r3, #4294967295
 80044a2:	e009      	b.n	80044b8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80044a4:	4b08      	ldr	r3, [pc, #32]	; (80044c8 <_sbrk+0x64>)
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80044aa:	4b07      	ldr	r3, [pc, #28]	; (80044c8 <_sbrk+0x64>)
 80044ac:	681a      	ldr	r2, [r3, #0]
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	4413      	add	r3, r2
 80044b2:	4a05      	ldr	r2, [pc, #20]	; (80044c8 <_sbrk+0x64>)
 80044b4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80044b6:	68fb      	ldr	r3, [r7, #12]
}
 80044b8:	4618      	mov	r0, r3
 80044ba:	3718      	adds	r7, #24
 80044bc:	46bd      	mov	sp, r7
 80044be:	bd80      	pop	{r7, pc}
 80044c0:	20020000 	.word	0x20020000
 80044c4:	00000400 	.word	0x00000400
 80044c8:	20000830 	.word	0x20000830
 80044cc:	20002118 	.word	0x20002118

080044d0 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80044d0:	b480      	push	{r7}
 80044d2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80044d4:	bf00      	nop
 80044d6:	46bd      	mov	sp, r7
 80044d8:	bc80      	pop	{r7}
 80044da:	4770      	bx	lr

080044dc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80044dc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004514 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80044e0:	480d      	ldr	r0, [pc, #52]	; (8004518 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80044e2:	490e      	ldr	r1, [pc, #56]	; (800451c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80044e4:	4a0e      	ldr	r2, [pc, #56]	; (8004520 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80044e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80044e8:	e002      	b.n	80044f0 <LoopCopyDataInit>

080044ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80044ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80044ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80044ee:	3304      	adds	r3, #4

080044f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80044f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80044f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80044f4:	d3f9      	bcc.n	80044ea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80044f6:	4a0b      	ldr	r2, [pc, #44]	; (8004524 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80044f8:	4c0b      	ldr	r4, [pc, #44]	; (8004528 <LoopFillZerobss+0x26>)
  movs r3, #0
 80044fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80044fc:	e001      	b.n	8004502 <LoopFillZerobss>

080044fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80044fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004500:	3204      	adds	r2, #4

08004502 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004502:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004504:	d3fb      	bcc.n	80044fe <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8004506:	f7ff ffe3 	bl	80044d0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800450a:	f009 fdcd 	bl	800e0a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800450e:	f7fe fc4f 	bl	8002db0 <main>
  bx  lr    
 8004512:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8004514:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8004518:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800451c:	20000358 	.word	0x20000358
  ldr r2, =_sidata
 8004520:	08011d88 	.word	0x08011d88
  ldr r2, =_sbss
 8004524:	20000358 	.word	0x20000358
  ldr r4, =_ebss
 8004528:	20002118 	.word	0x20002118

0800452c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800452c:	e7fe      	b.n	800452c <ADC_IRQHandler>
	...

08004530 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004530:	b580      	push	{r7, lr}
 8004532:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
   __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004534:	4b0e      	ldr	r3, [pc, #56]	; (8004570 <HAL_Init+0x40>)
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	4a0d      	ldr	r2, [pc, #52]	; (8004570 <HAL_Init+0x40>)
 800453a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800453e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
   __HAL_FLASH_DATA_CACHE_ENABLE();
 8004540:	4b0b      	ldr	r3, [pc, #44]	; (8004570 <HAL_Init+0x40>)
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	4a0a      	ldr	r2, [pc, #40]	; (8004570 <HAL_Init+0x40>)
 8004546:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800454a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800454c:	4b08      	ldr	r3, [pc, #32]	; (8004570 <HAL_Init+0x40>)
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	4a07      	ldr	r2, [pc, #28]	; (8004570 <HAL_Init+0x40>)
 8004552:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004556:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004558:	2003      	movs	r0, #3
 800455a:	f000 fc85 	bl	8004e68 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800455e:	200f      	movs	r0, #15
 8004560:	f000 f808 	bl	8004574 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8004564:	f7ff fc86 	bl	8003e74 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8004568:	2300      	movs	r3, #0
}
 800456a:	4618      	mov	r0, r3
 800456c:	bd80      	pop	{r7, pc}
 800456e:	bf00      	nop
 8004570:	40023c00 	.word	0x40023c00

08004574 <HAL_InitTick>:
  *       implementation  in user file.
  * @param  TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004574:	b580      	push	{r7, lr}
 8004576:	b082      	sub	sp, #8
 8004578:	af00      	add	r7, sp, #0
 800457a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800457c:	4b12      	ldr	r3, [pc, #72]	; (80045c8 <HAL_InitTick+0x54>)
 800457e:	681a      	ldr	r2, [r3, #0]
 8004580:	4b12      	ldr	r3, [pc, #72]	; (80045cc <HAL_InitTick+0x58>)
 8004582:	781b      	ldrb	r3, [r3, #0]
 8004584:	4619      	mov	r1, r3
 8004586:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800458a:	fbb3 f3f1 	udiv	r3, r3, r1
 800458e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004592:	4618      	mov	r0, r3
 8004594:	f000 fcab 	bl	8004eee <HAL_SYSTICK_Config>
 8004598:	4603      	mov	r3, r0
 800459a:	2b00      	cmp	r3, #0
 800459c:	d001      	beq.n	80045a2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800459e:	2301      	movs	r3, #1
 80045a0:	e00e      	b.n	80045c0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	2b0f      	cmp	r3, #15
 80045a6:	d80a      	bhi.n	80045be <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80045a8:	2200      	movs	r2, #0
 80045aa:	6879      	ldr	r1, [r7, #4]
 80045ac:	f04f 30ff 	mov.w	r0, #4294967295
 80045b0:	f000 fc65 	bl	8004e7e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80045b4:	4a06      	ldr	r2, [pc, #24]	; (80045d0 <HAL_InitTick+0x5c>)
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80045ba:	2300      	movs	r3, #0
 80045bc:	e000      	b.n	80045c0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80045be:	2301      	movs	r3, #1
}
 80045c0:	4618      	mov	r0, r3
 80045c2:	3708      	adds	r7, #8
 80045c4:	46bd      	mov	sp, r7
 80045c6:	bd80      	pop	{r7, pc}
 80045c8:	20000004 	.word	0x20000004
 80045cc:	2000000c 	.word	0x2000000c
 80045d0:	20000008 	.word	0x20000008

080045d4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80045d4:	b480      	push	{r7}
 80045d6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80045d8:	4b05      	ldr	r3, [pc, #20]	; (80045f0 <HAL_IncTick+0x1c>)
 80045da:	781b      	ldrb	r3, [r3, #0]
 80045dc:	461a      	mov	r2, r3
 80045de:	4b05      	ldr	r3, [pc, #20]	; (80045f4 <HAL_IncTick+0x20>)
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	4413      	add	r3, r2
 80045e4:	4a03      	ldr	r2, [pc, #12]	; (80045f4 <HAL_IncTick+0x20>)
 80045e6:	6013      	str	r3, [r2, #0]
}
 80045e8:	bf00      	nop
 80045ea:	46bd      	mov	sp, r7
 80045ec:	bc80      	pop	{r7}
 80045ee:	4770      	bx	lr
 80045f0:	2000000c 	.word	0x2000000c
 80045f4:	20000840 	.word	0x20000840

080045f8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80045f8:	b480      	push	{r7}
 80045fa:	af00      	add	r7, sp, #0
  return uwTick;
 80045fc:	4b02      	ldr	r3, [pc, #8]	; (8004608 <HAL_GetTick+0x10>)
 80045fe:	681b      	ldr	r3, [r3, #0]
}
 8004600:	4618      	mov	r0, r3
 8004602:	46bd      	mov	sp, r7
 8004604:	bc80      	pop	{r7}
 8004606:	4770      	bx	lr
 8004608:	20000840 	.word	0x20000840

0800460c <HAL_Delay>:
  *       implementations in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 800460c:	b580      	push	{r7, lr}
 800460e:	b084      	sub	sp, #16
 8004610:	af00      	add	r7, sp, #0
 8004612:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004614:	f7ff fff0 	bl	80045f8 <HAL_GetTick>
 8004618:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004624:	d005      	beq.n	8004632 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004626:	4b0a      	ldr	r3, [pc, #40]	; (8004650 <HAL_Delay+0x44>)
 8004628:	781b      	ldrb	r3, [r3, #0]
 800462a:	461a      	mov	r2, r3
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	4413      	add	r3, r2
 8004630:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004632:	bf00      	nop
 8004634:	f7ff ffe0 	bl	80045f8 <HAL_GetTick>
 8004638:	4602      	mov	r2, r0
 800463a:	68bb      	ldr	r3, [r7, #8]
 800463c:	1ad3      	subs	r3, r2, r3
 800463e:	68fa      	ldr	r2, [r7, #12]
 8004640:	429a      	cmp	r2, r3
 8004642:	d8f7      	bhi.n	8004634 <HAL_Delay+0x28>
  {
  }
}
 8004644:	bf00      	nop
 8004646:	bf00      	nop
 8004648:	3710      	adds	r7, #16
 800464a:	46bd      	mov	sp, r7
 800464c:	bd80      	pop	{r7, pc}
 800464e:	bf00      	nop
 8004650:	2000000c 	.word	0x2000000c

08004654 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004654:	b580      	push	{r7, lr}
 8004656:	b084      	sub	sp, #16
 8004658:	af00      	add	r7, sp, #0
 800465a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800465c:	2300      	movs	r3, #0
 800465e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	2b00      	cmp	r3, #0
 8004664:	d101      	bne.n	800466a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8004666:	2301      	movs	r3, #1
 8004668:	e033      	b.n	80046d2 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800466e:	2b00      	cmp	r3, #0
 8004670:	d109      	bne.n	8004686 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004672:	6878      	ldr	r0, [r7, #4]
 8004674:	f7ff fc24 	bl	8003ec0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	2200      	movs	r2, #0
 800467c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	2200      	movs	r2, #0
 8004682:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800468a:	f003 0310 	and.w	r3, r3, #16
 800468e:	2b00      	cmp	r3, #0
 8004690:	d118      	bne.n	80046c4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004696:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800469a:	f023 0302 	bic.w	r3, r3, #2
 800469e:	f043 0202 	orr.w	r2, r3, #2
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80046a6:	6878      	ldr	r0, [r7, #4]
 80046a8:	f000 f9e8 	bl	8004a7c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	2200      	movs	r2, #0
 80046b0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046b6:	f023 0303 	bic.w	r3, r3, #3
 80046ba:	f043 0201 	orr.w	r2, r3, #1
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	641a      	str	r2, [r3, #64]	; 0x40
 80046c2:	e001      	b.n	80046c8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80046c4:	2301      	movs	r3, #1
 80046c6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	2200      	movs	r2, #0
 80046cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80046d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80046d2:	4618      	mov	r0, r3
 80046d4:	3710      	adds	r7, #16
 80046d6:	46bd      	mov	sp, r7
 80046d8:	bd80      	pop	{r7, pc}
	...

080046dc <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80046dc:	b480      	push	{r7}
 80046de:	b085      	sub	sp, #20
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80046e4:	2300      	movs	r3, #0
 80046e6:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80046ee:	2b01      	cmp	r3, #1
 80046f0:	d101      	bne.n	80046f6 <HAL_ADC_Start+0x1a>
 80046f2:	2302      	movs	r3, #2
 80046f4:	e095      	b.n	8004822 <HAL_ADC_Start+0x146>
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	2201      	movs	r2, #1
 80046fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	689b      	ldr	r3, [r3, #8]
 8004704:	f003 0301 	and.w	r3, r3, #1
 8004708:	2b01      	cmp	r3, #1
 800470a:	d018      	beq.n	800473e <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	689a      	ldr	r2, [r3, #8]
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	f042 0201 	orr.w	r2, r2, #1
 800471a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800471c:	4b43      	ldr	r3, [pc, #268]	; (800482c <HAL_ADC_Start+0x150>)
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	4a43      	ldr	r2, [pc, #268]	; (8004830 <HAL_ADC_Start+0x154>)
 8004722:	fba2 2303 	umull	r2, r3, r2, r3
 8004726:	0c9a      	lsrs	r2, r3, #18
 8004728:	4613      	mov	r3, r2
 800472a:	005b      	lsls	r3, r3, #1
 800472c:	4413      	add	r3, r2
 800472e:	60fb      	str	r3, [r7, #12]
    while(counter != 0U)
 8004730:	e002      	b.n	8004738 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	3b01      	subs	r3, #1
 8004736:	60fb      	str	r3, [r7, #12]
    while(counter != 0U)
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	2b00      	cmp	r3, #0
 800473c:	d1f9      	bne.n	8004732 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	689b      	ldr	r3, [r3, #8]
 8004744:	f003 0301 	and.w	r3, r3, #1
 8004748:	2b01      	cmp	r3, #1
 800474a:	d15d      	bne.n	8004808 <HAL_ADC_Start+0x12c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004750:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8004754:	f023 0301 	bic.w	r3, r3, #1
 8004758:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	685b      	ldr	r3, [r3, #4]
 8004766:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800476a:	2b00      	cmp	r3, #0
 800476c:	d007      	beq.n	800477e <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004772:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004776:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004782:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004786:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800478a:	d106      	bne.n	800479a <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004790:	f023 0206 	bic.w	r2, r3, #6
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	645a      	str	r2, [r3, #68]	; 0x44
 8004798:	e002      	b.n	80047a0 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	2200      	movs	r2, #0
 800479e:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	2200      	movs	r2, #0
 80047a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80047b0:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 80047b2:	4b20      	ldr	r3, [pc, #128]	; (8004834 <HAL_ADC_Start+0x158>)
 80047b4:	685b      	ldr	r3, [r3, #4]
 80047b6:	f003 031f 	and.w	r3, r3, #31
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d10f      	bne.n	80047de <HAL_ADC_Start+0x102>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	689b      	ldr	r3, [r3, #8]
 80047c4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d129      	bne.n	8004820 <HAL_ADC_Start+0x144>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	689a      	ldr	r2, [r3, #8]
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80047da:	609a      	str	r2, [r3, #8]
 80047dc:	e020      	b.n	8004820 <HAL_ADC_Start+0x144>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	4a15      	ldr	r2, [pc, #84]	; (8004838 <HAL_ADC_Start+0x15c>)
 80047e4:	4293      	cmp	r3, r2
 80047e6:	d11b      	bne.n	8004820 <HAL_ADC_Start+0x144>
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	689b      	ldr	r3, [r3, #8]
 80047ee:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d114      	bne.n	8004820 <HAL_ADC_Start+0x144>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	689a      	ldr	r2, [r3, #8]
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8004804:	609a      	str	r2, [r3, #8]
 8004806:	e00b      	b.n	8004820 <HAL_ADC_Start+0x144>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800480c:	f043 0210 	orr.w	r2, r3, #16
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004818:	f043 0201 	orr.w	r2, r3, #1
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8004820:	2300      	movs	r3, #0
}
 8004822:	4618      	mov	r0, r3
 8004824:	3714      	adds	r7, #20
 8004826:	46bd      	mov	sp, r7
 8004828:	bc80      	pop	{r7}
 800482a:	4770      	bx	lr
 800482c:	20000004 	.word	0x20000004
 8004830:	431bde83 	.word	0x431bde83
 8004834:	40012300 	.word	0x40012300
 8004838:	40012000 	.word	0x40012000

0800483c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800483c:	b480      	push	{r7}
 800483e:	b085      	sub	sp, #20
 8004840:	af00      	add	r7, sp, #0
 8004842:	6078      	str	r0, [r7, #4]
 8004844:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8004846:	2300      	movs	r3, #0
 8004848:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004850:	2b01      	cmp	r3, #1
 8004852:	d101      	bne.n	8004858 <HAL_ADC_ConfigChannel+0x1c>
 8004854:	2302      	movs	r3, #2
 8004856:	e103      	b.n	8004a60 <HAL_ADC_ConfigChannel+0x224>
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	2201      	movs	r2, #1
 800485c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8004860:	683b      	ldr	r3, [r7, #0]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	2b09      	cmp	r3, #9
 8004866:	d925      	bls.n	80048b4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	68d9      	ldr	r1, [r3, #12]
 800486e:	683b      	ldr	r3, [r7, #0]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	b29b      	uxth	r3, r3
 8004874:	461a      	mov	r2, r3
 8004876:	4613      	mov	r3, r2
 8004878:	005b      	lsls	r3, r3, #1
 800487a:	4413      	add	r3, r2
 800487c:	3b1e      	subs	r3, #30
 800487e:	2207      	movs	r2, #7
 8004880:	fa02 f303 	lsl.w	r3, r2, r3
 8004884:	43da      	mvns	r2, r3
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	400a      	ands	r2, r1
 800488c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	68d9      	ldr	r1, [r3, #12]
 8004894:	683b      	ldr	r3, [r7, #0]
 8004896:	689a      	ldr	r2, [r3, #8]
 8004898:	683b      	ldr	r3, [r7, #0]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	b29b      	uxth	r3, r3
 800489e:	4618      	mov	r0, r3
 80048a0:	4603      	mov	r3, r0
 80048a2:	005b      	lsls	r3, r3, #1
 80048a4:	4403      	add	r3, r0
 80048a6:	3b1e      	subs	r3, #30
 80048a8:	409a      	lsls	r2, r3
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	430a      	orrs	r2, r1
 80048b0:	60da      	str	r2, [r3, #12]
 80048b2:	e022      	b.n	80048fa <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	6919      	ldr	r1, [r3, #16]
 80048ba:	683b      	ldr	r3, [r7, #0]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	b29b      	uxth	r3, r3
 80048c0:	461a      	mov	r2, r3
 80048c2:	4613      	mov	r3, r2
 80048c4:	005b      	lsls	r3, r3, #1
 80048c6:	4413      	add	r3, r2
 80048c8:	2207      	movs	r2, #7
 80048ca:	fa02 f303 	lsl.w	r3, r2, r3
 80048ce:	43da      	mvns	r2, r3
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	400a      	ands	r2, r1
 80048d6:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	6919      	ldr	r1, [r3, #16]
 80048de:	683b      	ldr	r3, [r7, #0]
 80048e0:	689a      	ldr	r2, [r3, #8]
 80048e2:	683b      	ldr	r3, [r7, #0]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	b29b      	uxth	r3, r3
 80048e8:	4618      	mov	r0, r3
 80048ea:	4603      	mov	r3, r0
 80048ec:	005b      	lsls	r3, r3, #1
 80048ee:	4403      	add	r3, r0
 80048f0:	409a      	lsls	r2, r3
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	430a      	orrs	r2, r1
 80048f8:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80048fa:	683b      	ldr	r3, [r7, #0]
 80048fc:	685b      	ldr	r3, [r3, #4]
 80048fe:	2b06      	cmp	r3, #6
 8004900:	d824      	bhi.n	800494c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004908:	683b      	ldr	r3, [r7, #0]
 800490a:	685a      	ldr	r2, [r3, #4]
 800490c:	4613      	mov	r3, r2
 800490e:	009b      	lsls	r3, r3, #2
 8004910:	4413      	add	r3, r2
 8004912:	3b05      	subs	r3, #5
 8004914:	221f      	movs	r2, #31
 8004916:	fa02 f303 	lsl.w	r3, r2, r3
 800491a:	43da      	mvns	r2, r3
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	400a      	ands	r2, r1
 8004922:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800492a:	683b      	ldr	r3, [r7, #0]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	b29b      	uxth	r3, r3
 8004930:	4618      	mov	r0, r3
 8004932:	683b      	ldr	r3, [r7, #0]
 8004934:	685a      	ldr	r2, [r3, #4]
 8004936:	4613      	mov	r3, r2
 8004938:	009b      	lsls	r3, r3, #2
 800493a:	4413      	add	r3, r2
 800493c:	3b05      	subs	r3, #5
 800493e:	fa00 f203 	lsl.w	r2, r0, r3
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	430a      	orrs	r2, r1
 8004948:	635a      	str	r2, [r3, #52]	; 0x34
 800494a:	e04c      	b.n	80049e6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800494c:	683b      	ldr	r3, [r7, #0]
 800494e:	685b      	ldr	r3, [r3, #4]
 8004950:	2b0c      	cmp	r3, #12
 8004952:	d824      	bhi.n	800499e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800495a:	683b      	ldr	r3, [r7, #0]
 800495c:	685a      	ldr	r2, [r3, #4]
 800495e:	4613      	mov	r3, r2
 8004960:	009b      	lsls	r3, r3, #2
 8004962:	4413      	add	r3, r2
 8004964:	3b23      	subs	r3, #35	; 0x23
 8004966:	221f      	movs	r2, #31
 8004968:	fa02 f303 	lsl.w	r3, r2, r3
 800496c:	43da      	mvns	r2, r3
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	400a      	ands	r2, r1
 8004974:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800497c:	683b      	ldr	r3, [r7, #0]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	b29b      	uxth	r3, r3
 8004982:	4618      	mov	r0, r3
 8004984:	683b      	ldr	r3, [r7, #0]
 8004986:	685a      	ldr	r2, [r3, #4]
 8004988:	4613      	mov	r3, r2
 800498a:	009b      	lsls	r3, r3, #2
 800498c:	4413      	add	r3, r2
 800498e:	3b23      	subs	r3, #35	; 0x23
 8004990:	fa00 f203 	lsl.w	r2, r0, r3
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	430a      	orrs	r2, r1
 800499a:	631a      	str	r2, [r3, #48]	; 0x30
 800499c:	e023      	b.n	80049e6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80049a4:	683b      	ldr	r3, [r7, #0]
 80049a6:	685a      	ldr	r2, [r3, #4]
 80049a8:	4613      	mov	r3, r2
 80049aa:	009b      	lsls	r3, r3, #2
 80049ac:	4413      	add	r3, r2
 80049ae:	3b41      	subs	r3, #65	; 0x41
 80049b0:	221f      	movs	r2, #31
 80049b2:	fa02 f303 	lsl.w	r3, r2, r3
 80049b6:	43da      	mvns	r2, r3
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	400a      	ands	r2, r1
 80049be:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80049c6:	683b      	ldr	r3, [r7, #0]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	b29b      	uxth	r3, r3
 80049cc:	4618      	mov	r0, r3
 80049ce:	683b      	ldr	r3, [r7, #0]
 80049d0:	685a      	ldr	r2, [r3, #4]
 80049d2:	4613      	mov	r3, r2
 80049d4:	009b      	lsls	r3, r3, #2
 80049d6:	4413      	add	r3, r2
 80049d8:	3b41      	subs	r3, #65	; 0x41
 80049da:	fa00 f203 	lsl.w	r2, r0, r3
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	430a      	orrs	r2, r1
 80049e4:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	4a20      	ldr	r2, [pc, #128]	; (8004a6c <HAL_ADC_ConfigChannel+0x230>)
 80049ec:	4293      	cmp	r3, r2
 80049ee:	d109      	bne.n	8004a04 <HAL_ADC_ConfigChannel+0x1c8>
 80049f0:	683b      	ldr	r3, [r7, #0]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	2b12      	cmp	r3, #18
 80049f6:	d105      	bne.n	8004a04 <HAL_ADC_ConfigChannel+0x1c8>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 80049f8:	4b1d      	ldr	r3, [pc, #116]	; (8004a70 <HAL_ADC_ConfigChannel+0x234>)
 80049fa:	685b      	ldr	r3, [r3, #4]
 80049fc:	4a1c      	ldr	r2, [pc, #112]	; (8004a70 <HAL_ADC_ConfigChannel+0x234>)
 80049fe:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004a02:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	4a18      	ldr	r2, [pc, #96]	; (8004a6c <HAL_ADC_ConfigChannel+0x230>)
 8004a0a:	4293      	cmp	r3, r2
 8004a0c:	d123      	bne.n	8004a56 <HAL_ADC_ConfigChannel+0x21a>
 8004a0e:	683b      	ldr	r3, [r7, #0]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	2b10      	cmp	r3, #16
 8004a14:	d003      	beq.n	8004a1e <HAL_ADC_ConfigChannel+0x1e2>
 8004a16:	683b      	ldr	r3, [r7, #0]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	2b11      	cmp	r3, #17
 8004a1c:	d11b      	bne.n	8004a56 <HAL_ADC_ConfigChannel+0x21a>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8004a1e:	4b14      	ldr	r3, [pc, #80]	; (8004a70 <HAL_ADC_ConfigChannel+0x234>)
 8004a20:	685b      	ldr	r3, [r3, #4]
 8004a22:	4a13      	ldr	r2, [pc, #76]	; (8004a70 <HAL_ADC_ConfigChannel+0x234>)
 8004a24:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004a28:	6053      	str	r3, [r2, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004a2a:	683b      	ldr	r3, [r7, #0]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	2b10      	cmp	r3, #16
 8004a30:	d111      	bne.n	8004a56 <HAL_ADC_ConfigChannel+0x21a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8004a32:	4b10      	ldr	r3, [pc, #64]	; (8004a74 <HAL_ADC_ConfigChannel+0x238>)
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	4a10      	ldr	r2, [pc, #64]	; (8004a78 <HAL_ADC_ConfigChannel+0x23c>)
 8004a38:	fba2 2303 	umull	r2, r3, r2, r3
 8004a3c:	0c9a      	lsrs	r2, r3, #18
 8004a3e:	4613      	mov	r3, r2
 8004a40:	009b      	lsls	r3, r3, #2
 8004a42:	4413      	add	r3, r2
 8004a44:	005b      	lsls	r3, r3, #1
 8004a46:	60fb      	str	r3, [r7, #12]
      while(counter != 0U)
 8004a48:	e002      	b.n	8004a50 <HAL_ADC_ConfigChannel+0x214>
      {
        counter--;
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	3b01      	subs	r3, #1
 8004a4e:	60fb      	str	r3, [r7, #12]
      while(counter != 0U)
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d1f9      	bne.n	8004a4a <HAL_ADC_ConfigChannel+0x20e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	2200      	movs	r2, #0
 8004a5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8004a5e:	2300      	movs	r3, #0
}
 8004a60:	4618      	mov	r0, r3
 8004a62:	3714      	adds	r7, #20
 8004a64:	46bd      	mov	sp, r7
 8004a66:	bc80      	pop	{r7}
 8004a68:	4770      	bx	lr
 8004a6a:	bf00      	nop
 8004a6c:	40012000 	.word	0x40012000
 8004a70:	40012300 	.word	0x40012300
 8004a74:	20000004 	.word	0x20000004
 8004a78:	431bde83 	.word	0x431bde83

08004a7c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004a7c:	b480      	push	{r7}
 8004a7e:	b085      	sub	sp, #20
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8004a84:	4b7e      	ldr	r3, [pc, #504]	; (8004c80 <ADC_Init+0x204>)
 8004a86:	685b      	ldr	r3, [r3, #4]
 8004a88:	4a7d      	ldr	r2, [pc, #500]	; (8004c80 <ADC_Init+0x204>)
 8004a8a:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8004a8e:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8004a90:	4b7b      	ldr	r3, [pc, #492]	; (8004c80 <ADC_Init+0x204>)
 8004a92:	685a      	ldr	r2, [r3, #4]
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	685b      	ldr	r3, [r3, #4]
 8004a98:	4979      	ldr	r1, [pc, #484]	; (8004c80 <ADC_Init+0x204>)
 8004a9a:	4313      	orrs	r3, r2
 8004a9c:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	685a      	ldr	r2, [r3, #4]
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004aac:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	6859      	ldr	r1, [r3, #4]
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	691b      	ldr	r3, [r3, #16]
 8004ab8:	021a      	lsls	r2, r3, #8
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	430a      	orrs	r2, r1
 8004ac0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	685a      	ldr	r2, [r3, #4]
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8004ad0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	6859      	ldr	r1, [r3, #4]
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	689a      	ldr	r2, [r3, #8]
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	430a      	orrs	r2, r1
 8004ae2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	689a      	ldr	r2, [r3, #8]
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004af2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	6899      	ldr	r1, [r3, #8]
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	68da      	ldr	r2, [r3, #12]
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	430a      	orrs	r2, r1
 8004b04:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b0a:	4a5e      	ldr	r2, [pc, #376]	; (8004c84 <ADC_Init+0x208>)
 8004b0c:	4293      	cmp	r3, r2
 8004b0e:	d022      	beq.n	8004b56 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	689a      	ldr	r2, [r3, #8]
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004b1e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	6899      	ldr	r1, [r3, #8]
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	430a      	orrs	r2, r1
 8004b30:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	689a      	ldr	r2, [r3, #8]
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004b40:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	6899      	ldr	r1, [r3, #8]
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	430a      	orrs	r2, r1
 8004b52:	609a      	str	r2, [r3, #8]
 8004b54:	e00f      	b.n	8004b76 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	689a      	ldr	r2, [r3, #8]
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004b64:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	689a      	ldr	r2, [r3, #8]
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004b74:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	689a      	ldr	r2, [r3, #8]
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	f022 0202 	bic.w	r2, r2, #2
 8004b84:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	6899      	ldr	r1, [r3, #8]
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	7e1b      	ldrb	r3, [r3, #24]
 8004b90:	005a      	lsls	r2, r3, #1
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	430a      	orrs	r2, r1
 8004b98:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d027      	beq.n	8004bf4 <ADC_Init+0x178>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	685a      	ldr	r2, [r3, #4]
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004bb2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	685a      	ldr	r2, [r3, #4]
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8004bc2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bc8:	3b01      	subs	r3, #1
 8004bca:	f44f 4260 	mov.w	r2, #57344	; 0xe000
 8004bce:	60fa      	str	r2, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004bd0:	68fa      	ldr	r2, [r7, #12]
 8004bd2:	fa92 f2a2 	rbit	r2, r2
 8004bd6:	60ba      	str	r2, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8004bd8:	68ba      	ldr	r2, [r7, #8]
 8004bda:	fab2 f282 	clz	r2, r2
 8004bde:	b2d2      	uxtb	r2, r2
 8004be0:	fa03 f102 	lsl.w	r1, r3, r2
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	685a      	ldr	r2, [r3, #4]
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	430a      	orrs	r2, r1
 8004bf0:	605a      	str	r2, [r3, #4]
 8004bf2:	e007      	b.n	8004c04 <ADC_Init+0x188>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	685a      	ldr	r2, [r3, #4]
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004c02:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8004c12:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	69db      	ldr	r3, [r3, #28]
 8004c1e:	3b01      	subs	r3, #1
 8004c20:	051a      	lsls	r2, r3, #20
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	430a      	orrs	r2, r1
 8004c28:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	689a      	ldr	r2, [r3, #8]
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004c38:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	6899      	ldr	r1, [r3, #8]
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004c46:	025a      	lsls	r2, r3, #9
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	430a      	orrs	r2, r1
 8004c4e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	689a      	ldr	r2, [r3, #8]
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c5e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	6899      	ldr	r1, [r3, #8]
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	695b      	ldr	r3, [r3, #20]
 8004c6a:	029a      	lsls	r2, r3, #10
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	430a      	orrs	r2, r1
 8004c72:	609a      	str	r2, [r3, #8]
}
 8004c74:	bf00      	nop
 8004c76:	3714      	adds	r7, #20
 8004c78:	46bd      	mov	sp, r7
 8004c7a:	bc80      	pop	{r7}
 8004c7c:	4770      	bx	lr
 8004c7e:	bf00      	nop
 8004c80:	40012300 	.word	0x40012300
 8004c84:	0f000001 	.word	0x0f000001

08004c88 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004c88:	b480      	push	{r7}
 8004c8a:	b085      	sub	sp, #20
 8004c8c:	af00      	add	r7, sp, #0
 8004c8e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	f003 0307 	and.w	r3, r3, #7
 8004c96:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004c98:	4b0c      	ldr	r3, [pc, #48]	; (8004ccc <__NVIC_SetPriorityGrouping+0x44>)
 8004c9a:	68db      	ldr	r3, [r3, #12]
 8004c9c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004c9e:	68ba      	ldr	r2, [r7, #8]
 8004ca0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004ca4:	4013      	ands	r3, r2
 8004ca6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004cac:	68bb      	ldr	r3, [r7, #8]
 8004cae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004cb0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004cb4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004cb8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004cba:	4a04      	ldr	r2, [pc, #16]	; (8004ccc <__NVIC_SetPriorityGrouping+0x44>)
 8004cbc:	68bb      	ldr	r3, [r7, #8]
 8004cbe:	60d3      	str	r3, [r2, #12]
}
 8004cc0:	bf00      	nop
 8004cc2:	3714      	adds	r7, #20
 8004cc4:	46bd      	mov	sp, r7
 8004cc6:	bc80      	pop	{r7}
 8004cc8:	4770      	bx	lr
 8004cca:	bf00      	nop
 8004ccc:	e000ed00 	.word	0xe000ed00

08004cd0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004cd0:	b480      	push	{r7}
 8004cd2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004cd4:	4b04      	ldr	r3, [pc, #16]	; (8004ce8 <__NVIC_GetPriorityGrouping+0x18>)
 8004cd6:	68db      	ldr	r3, [r3, #12]
 8004cd8:	0a1b      	lsrs	r3, r3, #8
 8004cda:	f003 0307 	and.w	r3, r3, #7
}
 8004cde:	4618      	mov	r0, r3
 8004ce0:	46bd      	mov	sp, r7
 8004ce2:	bc80      	pop	{r7}
 8004ce4:	4770      	bx	lr
 8004ce6:	bf00      	nop
 8004ce8:	e000ed00 	.word	0xe000ed00

08004cec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004cec:	b480      	push	{r7}
 8004cee:	b083      	sub	sp, #12
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	4603      	mov	r3, r0
 8004cf4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004cf6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	db0b      	blt.n	8004d16 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004cfe:	79fb      	ldrb	r3, [r7, #7]
 8004d00:	f003 021f 	and.w	r2, r3, #31
 8004d04:	4906      	ldr	r1, [pc, #24]	; (8004d20 <__NVIC_EnableIRQ+0x34>)
 8004d06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d0a:	095b      	lsrs	r3, r3, #5
 8004d0c:	2001      	movs	r0, #1
 8004d0e:	fa00 f202 	lsl.w	r2, r0, r2
 8004d12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004d16:	bf00      	nop
 8004d18:	370c      	adds	r7, #12
 8004d1a:	46bd      	mov	sp, r7
 8004d1c:	bc80      	pop	{r7}
 8004d1e:	4770      	bx	lr
 8004d20:	e000e100 	.word	0xe000e100

08004d24 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004d24:	b480      	push	{r7}
 8004d26:	b083      	sub	sp, #12
 8004d28:	af00      	add	r7, sp, #0
 8004d2a:	4603      	mov	r3, r0
 8004d2c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004d2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	db12      	blt.n	8004d5c <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004d36:	79fb      	ldrb	r3, [r7, #7]
 8004d38:	f003 021f 	and.w	r2, r3, #31
 8004d3c:	490a      	ldr	r1, [pc, #40]	; (8004d68 <__NVIC_DisableIRQ+0x44>)
 8004d3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d42:	095b      	lsrs	r3, r3, #5
 8004d44:	2001      	movs	r0, #1
 8004d46:	fa00 f202 	lsl.w	r2, r0, r2
 8004d4a:	3320      	adds	r3, #32
 8004d4c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8004d50:	f3bf 8f4f 	dsb	sy
}
 8004d54:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8004d56:	f3bf 8f6f 	isb	sy
}
 8004d5a:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8004d5c:	bf00      	nop
 8004d5e:	370c      	adds	r7, #12
 8004d60:	46bd      	mov	sp, r7
 8004d62:	bc80      	pop	{r7}
 8004d64:	4770      	bx	lr
 8004d66:	bf00      	nop
 8004d68:	e000e100 	.word	0xe000e100

08004d6c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004d6c:	b480      	push	{r7}
 8004d6e:	b083      	sub	sp, #12
 8004d70:	af00      	add	r7, sp, #0
 8004d72:	4603      	mov	r3, r0
 8004d74:	6039      	str	r1, [r7, #0]
 8004d76:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004d78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	db0a      	blt.n	8004d96 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004d80:	683b      	ldr	r3, [r7, #0]
 8004d82:	b2da      	uxtb	r2, r3
 8004d84:	490c      	ldr	r1, [pc, #48]	; (8004db8 <__NVIC_SetPriority+0x4c>)
 8004d86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d8a:	0112      	lsls	r2, r2, #4
 8004d8c:	b2d2      	uxtb	r2, r2
 8004d8e:	440b      	add	r3, r1
 8004d90:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004d94:	e00a      	b.n	8004dac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004d96:	683b      	ldr	r3, [r7, #0]
 8004d98:	b2da      	uxtb	r2, r3
 8004d9a:	4908      	ldr	r1, [pc, #32]	; (8004dbc <__NVIC_SetPriority+0x50>)
 8004d9c:	79fb      	ldrb	r3, [r7, #7]
 8004d9e:	f003 030f 	and.w	r3, r3, #15
 8004da2:	3b04      	subs	r3, #4
 8004da4:	0112      	lsls	r2, r2, #4
 8004da6:	b2d2      	uxtb	r2, r2
 8004da8:	440b      	add	r3, r1
 8004daa:	761a      	strb	r2, [r3, #24]
}
 8004dac:	bf00      	nop
 8004dae:	370c      	adds	r7, #12
 8004db0:	46bd      	mov	sp, r7
 8004db2:	bc80      	pop	{r7}
 8004db4:	4770      	bx	lr
 8004db6:	bf00      	nop
 8004db8:	e000e100 	.word	0xe000e100
 8004dbc:	e000ed00 	.word	0xe000ed00

08004dc0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004dc0:	b480      	push	{r7}
 8004dc2:	b089      	sub	sp, #36	; 0x24
 8004dc4:	af00      	add	r7, sp, #0
 8004dc6:	60f8      	str	r0, [r7, #12]
 8004dc8:	60b9      	str	r1, [r7, #8]
 8004dca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	f003 0307 	and.w	r3, r3, #7
 8004dd2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004dd4:	69fb      	ldr	r3, [r7, #28]
 8004dd6:	f1c3 0307 	rsb	r3, r3, #7
 8004dda:	2b04      	cmp	r3, #4
 8004ddc:	bf28      	it	cs
 8004dde:	2304      	movcs	r3, #4
 8004de0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004de2:	69fb      	ldr	r3, [r7, #28]
 8004de4:	3304      	adds	r3, #4
 8004de6:	2b06      	cmp	r3, #6
 8004de8:	d902      	bls.n	8004df0 <NVIC_EncodePriority+0x30>
 8004dea:	69fb      	ldr	r3, [r7, #28]
 8004dec:	3b03      	subs	r3, #3
 8004dee:	e000      	b.n	8004df2 <NVIC_EncodePriority+0x32>
 8004df0:	2300      	movs	r3, #0
 8004df2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004df4:	f04f 32ff 	mov.w	r2, #4294967295
 8004df8:	69bb      	ldr	r3, [r7, #24]
 8004dfa:	fa02 f303 	lsl.w	r3, r2, r3
 8004dfe:	43da      	mvns	r2, r3
 8004e00:	68bb      	ldr	r3, [r7, #8]
 8004e02:	401a      	ands	r2, r3
 8004e04:	697b      	ldr	r3, [r7, #20]
 8004e06:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004e08:	f04f 31ff 	mov.w	r1, #4294967295
 8004e0c:	697b      	ldr	r3, [r7, #20]
 8004e0e:	fa01 f303 	lsl.w	r3, r1, r3
 8004e12:	43d9      	mvns	r1, r3
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004e18:	4313      	orrs	r3, r2
         );
}
 8004e1a:	4618      	mov	r0, r3
 8004e1c:	3724      	adds	r7, #36	; 0x24
 8004e1e:	46bd      	mov	sp, r7
 8004e20:	bc80      	pop	{r7}
 8004e22:	4770      	bx	lr

08004e24 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004e24:	b580      	push	{r7, lr}
 8004e26:	b082      	sub	sp, #8
 8004e28:	af00      	add	r7, sp, #0
 8004e2a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	3b01      	subs	r3, #1
 8004e30:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004e34:	d301      	bcc.n	8004e3a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004e36:	2301      	movs	r3, #1
 8004e38:	e00f      	b.n	8004e5a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004e3a:	4a0a      	ldr	r2, [pc, #40]	; (8004e64 <SysTick_Config+0x40>)
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	3b01      	subs	r3, #1
 8004e40:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004e42:	210f      	movs	r1, #15
 8004e44:	f04f 30ff 	mov.w	r0, #4294967295
 8004e48:	f7ff ff90 	bl	8004d6c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004e4c:	4b05      	ldr	r3, [pc, #20]	; (8004e64 <SysTick_Config+0x40>)
 8004e4e:	2200      	movs	r2, #0
 8004e50:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004e52:	4b04      	ldr	r3, [pc, #16]	; (8004e64 <SysTick_Config+0x40>)
 8004e54:	2207      	movs	r2, #7
 8004e56:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004e58:	2300      	movs	r3, #0
}
 8004e5a:	4618      	mov	r0, r3
 8004e5c:	3708      	adds	r7, #8
 8004e5e:	46bd      	mov	sp, r7
 8004e60:	bd80      	pop	{r7, pc}
 8004e62:	bf00      	nop
 8004e64:	e000e010 	.word	0xe000e010

08004e68 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004e68:	b580      	push	{r7, lr}
 8004e6a:	b082      	sub	sp, #8
 8004e6c:	af00      	add	r7, sp, #0
 8004e6e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004e70:	6878      	ldr	r0, [r7, #4]
 8004e72:	f7ff ff09 	bl	8004c88 <__NVIC_SetPriorityGrouping>
}
 8004e76:	bf00      	nop
 8004e78:	3708      	adds	r7, #8
 8004e7a:	46bd      	mov	sp, r7
 8004e7c:	bd80      	pop	{r7, pc}

08004e7e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004e7e:	b580      	push	{r7, lr}
 8004e80:	b086      	sub	sp, #24
 8004e82:	af00      	add	r7, sp, #0
 8004e84:	4603      	mov	r3, r0
 8004e86:	60b9      	str	r1, [r7, #8]
 8004e88:	607a      	str	r2, [r7, #4]
 8004e8a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004e8c:	2300      	movs	r3, #0
 8004e8e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004e90:	f7ff ff1e 	bl	8004cd0 <__NVIC_GetPriorityGrouping>
 8004e94:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004e96:	687a      	ldr	r2, [r7, #4]
 8004e98:	68b9      	ldr	r1, [r7, #8]
 8004e9a:	6978      	ldr	r0, [r7, #20]
 8004e9c:	f7ff ff90 	bl	8004dc0 <NVIC_EncodePriority>
 8004ea0:	4602      	mov	r2, r0
 8004ea2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004ea6:	4611      	mov	r1, r2
 8004ea8:	4618      	mov	r0, r3
 8004eaa:	f7ff ff5f 	bl	8004d6c <__NVIC_SetPriority>
}
 8004eae:	bf00      	nop
 8004eb0:	3718      	adds	r7, #24
 8004eb2:	46bd      	mov	sp, r7
 8004eb4:	bd80      	pop	{r7, pc}

08004eb6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f2xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004eb6:	b580      	push	{r7, lr}
 8004eb8:	b082      	sub	sp, #8
 8004eba:	af00      	add	r7, sp, #0
 8004ebc:	4603      	mov	r3, r0
 8004ebe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004ec0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ec4:	4618      	mov	r0, r3
 8004ec6:	f7ff ff11 	bl	8004cec <__NVIC_EnableIRQ>
}
 8004eca:	bf00      	nop
 8004ecc:	3708      	adds	r7, #8
 8004ece:	46bd      	mov	sp, r7
 8004ed0:	bd80      	pop	{r7, pc}

08004ed2 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f2xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004ed2:	b580      	push	{r7, lr}
 8004ed4:	b082      	sub	sp, #8
 8004ed6:	af00      	add	r7, sp, #0
 8004ed8:	4603      	mov	r3, r0
 8004eda:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8004edc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ee0:	4618      	mov	r0, r3
 8004ee2:	f7ff ff1f 	bl	8004d24 <__NVIC_DisableIRQ>
}
 8004ee6:	bf00      	nop
 8004ee8:	3708      	adds	r7, #8
 8004eea:	46bd      	mov	sp, r7
 8004eec:	bd80      	pop	{r7, pc}

08004eee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004eee:	b580      	push	{r7, lr}
 8004ef0:	b082      	sub	sp, #8
 8004ef2:	af00      	add	r7, sp, #0
 8004ef4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004ef6:	6878      	ldr	r0, [r7, #4]
 8004ef8:	f7ff ff94 	bl	8004e24 <SysTick_Config>
 8004efc:	4603      	mov	r3, r0
}
 8004efe:	4618      	mov	r0, r3
 8004f00:	3708      	adds	r7, #8
 8004f02:	46bd      	mov	sp, r7
 8004f04:	bd80      	pop	{r7, pc}
	...

08004f08 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004f08:	b580      	push	{r7, lr}
 8004f0a:	b086      	sub	sp, #24
 8004f0c:	af00      	add	r7, sp, #0
 8004f0e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004f10:	2300      	movs	r3, #0
 8004f12:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004f14:	f7ff fb70 	bl	80045f8 <HAL_GetTick>
 8004f18:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d101      	bne.n	8004f24 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004f20:	2301      	movs	r3, #1
 8004f22:	e099      	b.n	8005058 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	2202      	movs	r2, #2
 8004f28:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	2200      	movs	r2, #0
 8004f30:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	681a      	ldr	r2, [r3, #0]
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	f022 0201 	bic.w	r2, r2, #1
 8004f42:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004f44:	e00f      	b.n	8004f66 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004f46:	f7ff fb57 	bl	80045f8 <HAL_GetTick>
 8004f4a:	4602      	mov	r2, r0
 8004f4c:	693b      	ldr	r3, [r7, #16]
 8004f4e:	1ad3      	subs	r3, r2, r3
 8004f50:	2b05      	cmp	r3, #5
 8004f52:	d908      	bls.n	8004f66 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	2220      	movs	r2, #32
 8004f58:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	2203      	movs	r2, #3
 8004f5e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8004f62:	2303      	movs	r3, #3
 8004f64:	e078      	b.n	8005058 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	f003 0301 	and.w	r3, r3, #1
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d1e8      	bne.n	8004f46 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004f7c:	697a      	ldr	r2, [r7, #20]
 8004f7e:	4b38      	ldr	r3, [pc, #224]	; (8005060 <HAL_DMA_Init+0x158>)
 8004f80:	4013      	ands	r3, r2
 8004f82:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	685a      	ldr	r2, [r3, #4]
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	689b      	ldr	r3, [r3, #8]
 8004f8c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004f92:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	691b      	ldr	r3, [r3, #16]
 8004f98:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004f9e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	699b      	ldr	r3, [r3, #24]
 8004fa4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004faa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	6a1b      	ldr	r3, [r3, #32]
 8004fb0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004fb2:	697a      	ldr	r2, [r7, #20]
 8004fb4:	4313      	orrs	r3, r2
 8004fb6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fbc:	2b04      	cmp	r3, #4
 8004fbe:	d107      	bne.n	8004fd0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fc8:	4313      	orrs	r3, r2
 8004fca:	697a      	ldr	r2, [r7, #20]
 8004fcc:	4313      	orrs	r3, r2
 8004fce:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	697a      	ldr	r2, [r7, #20]
 8004fd6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	695b      	ldr	r3, [r3, #20]
 8004fde:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004fe0:	697b      	ldr	r3, [r7, #20]
 8004fe2:	f023 0307 	bic.w	r3, r3, #7
 8004fe6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fec:	697a      	ldr	r2, [r7, #20]
 8004fee:	4313      	orrs	r3, r2
 8004ff0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ff6:	2b04      	cmp	r3, #4
 8004ff8:	d117      	bne.n	800502a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ffe:	697a      	ldr	r2, [r7, #20]
 8005000:	4313      	orrs	r3, r2
 8005002:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005008:	2b00      	cmp	r3, #0
 800500a:	d00e      	beq.n	800502a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800500c:	6878      	ldr	r0, [r7, #4]
 800500e:	f000 f9e7 	bl	80053e0 <DMA_CheckFifoParam>
 8005012:	4603      	mov	r3, r0
 8005014:	2b00      	cmp	r3, #0
 8005016:	d008      	beq.n	800502a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	2240      	movs	r2, #64	; 0x40
 800501c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	2201      	movs	r2, #1
 8005022:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8005026:	2301      	movs	r3, #1
 8005028:	e016      	b.n	8005058 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	697a      	ldr	r2, [r7, #20]
 8005030:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005032:	6878      	ldr	r0, [r7, #4]
 8005034:	f000 f9a0 	bl	8005378 <DMA_CalcBaseAndBitshift>
 8005038:	4603      	mov	r3, r0
 800503a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005040:	223f      	movs	r2, #63	; 0x3f
 8005042:	409a      	lsls	r2, r3
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	2200      	movs	r2, #0
 800504c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	2201      	movs	r2, #1
 8005052:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8005056:	2300      	movs	r3, #0
}
 8005058:	4618      	mov	r0, r3
 800505a:	3718      	adds	r7, #24
 800505c:	46bd      	mov	sp, r7
 800505e:	bd80      	pop	{r7, pc}
 8005060:	f010803f 	.word	0xf010803f

08005064 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005064:	b580      	push	{r7, lr}
 8005066:	b086      	sub	sp, #24
 8005068:	af00      	add	r7, sp, #0
 800506a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800506c:	2300      	movs	r3, #0
 800506e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005070:	4b92      	ldr	r3, [pc, #584]	; (80052bc <HAL_DMA_IRQHandler+0x258>)
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	4a92      	ldr	r2, [pc, #584]	; (80052c0 <HAL_DMA_IRQHandler+0x25c>)
 8005076:	fba2 2303 	umull	r2, r3, r2, r3
 800507a:	0a9b      	lsrs	r3, r3, #10
 800507c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005082:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8005084:	693b      	ldr	r3, [r7, #16]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800508e:	2208      	movs	r2, #8
 8005090:	409a      	lsls	r2, r3
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	4013      	ands	r3, r2
 8005096:	2b00      	cmp	r3, #0
 8005098:	d01a      	beq.n	80050d0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	f003 0304 	and.w	r3, r3, #4
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d013      	beq.n	80050d0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	681a      	ldr	r2, [r3, #0]
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	f022 0204 	bic.w	r2, r2, #4
 80050b6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80050bc:	2208      	movs	r2, #8
 80050be:	409a      	lsls	r2, r3
 80050c0:	693b      	ldr	r3, [r7, #16]
 80050c2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050c8:	f043 0201 	orr.w	r2, r3, #1
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80050d4:	2201      	movs	r2, #1
 80050d6:	409a      	lsls	r2, r3
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	4013      	ands	r3, r2
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d012      	beq.n	8005106 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	695b      	ldr	r3, [r3, #20]
 80050e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d00b      	beq.n	8005106 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80050f2:	2201      	movs	r2, #1
 80050f4:	409a      	lsls	r2, r3
 80050f6:	693b      	ldr	r3, [r7, #16]
 80050f8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050fe:	f043 0202 	orr.w	r2, r3, #2
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800510a:	2204      	movs	r2, #4
 800510c:	409a      	lsls	r2, r3
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	4013      	ands	r3, r2
 8005112:	2b00      	cmp	r3, #0
 8005114:	d012      	beq.n	800513c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	f003 0302 	and.w	r3, r3, #2
 8005120:	2b00      	cmp	r3, #0
 8005122:	d00b      	beq.n	800513c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005128:	2204      	movs	r2, #4
 800512a:	409a      	lsls	r2, r3
 800512c:	693b      	ldr	r3, [r7, #16]
 800512e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005134:	f043 0204 	orr.w	r2, r3, #4
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005140:	2210      	movs	r2, #16
 8005142:	409a      	lsls	r2, r3
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	4013      	ands	r3, r2
 8005148:	2b00      	cmp	r3, #0
 800514a:	d043      	beq.n	80051d4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	f003 0308 	and.w	r3, r3, #8
 8005156:	2b00      	cmp	r3, #0
 8005158:	d03c      	beq.n	80051d4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800515e:	2210      	movs	r2, #16
 8005160:	409a      	lsls	r2, r3
 8005162:	693b      	ldr	r3, [r7, #16]
 8005164:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005170:	2b00      	cmp	r3, #0
 8005172:	d018      	beq.n	80051a6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800517e:	2b00      	cmp	r3, #0
 8005180:	d108      	bne.n	8005194 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005186:	2b00      	cmp	r3, #0
 8005188:	d024      	beq.n	80051d4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800518e:	6878      	ldr	r0, [r7, #4]
 8005190:	4798      	blx	r3
 8005192:	e01f      	b.n	80051d4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005198:	2b00      	cmp	r3, #0
 800519a:	d01b      	beq.n	80051d4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80051a0:	6878      	ldr	r0, [r7, #4]
 80051a2:	4798      	blx	r3
 80051a4:	e016      	b.n	80051d4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d107      	bne.n	80051c4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	681a      	ldr	r2, [r3, #0]
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	f022 0208 	bic.w	r2, r2, #8
 80051c2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d003      	beq.n	80051d4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051d0:	6878      	ldr	r0, [r7, #4]
 80051d2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80051d8:	2220      	movs	r2, #32
 80051da:	409a      	lsls	r2, r3
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	4013      	ands	r3, r2
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	f000 808e 	beq.w	8005302 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	f003 0310 	and.w	r3, r3, #16
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	f000 8086 	beq.w	8005302 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80051fa:	2220      	movs	r2, #32
 80051fc:	409a      	lsls	r2, r3
 80051fe:	693b      	ldr	r3, [r7, #16]
 8005200:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005208:	b2db      	uxtb	r3, r3
 800520a:	2b05      	cmp	r3, #5
 800520c:	d136      	bne.n	800527c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	681a      	ldr	r2, [r3, #0]
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	f022 0216 	bic.w	r2, r2, #22
 800521c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	695a      	ldr	r2, [r3, #20]
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800522c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005232:	2b00      	cmp	r3, #0
 8005234:	d103      	bne.n	800523e <HAL_DMA_IRQHandler+0x1da>
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800523a:	2b00      	cmp	r3, #0
 800523c:	d007      	beq.n	800524e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	681a      	ldr	r2, [r3, #0]
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	f022 0208 	bic.w	r2, r2, #8
 800524c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005252:	223f      	movs	r2, #63	; 0x3f
 8005254:	409a      	lsls	r2, r3
 8005256:	693b      	ldr	r3, [r7, #16]
 8005258:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	2201      	movs	r2, #1
 800525e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	2200      	movs	r2, #0
 8005266:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800526e:	2b00      	cmp	r3, #0
 8005270:	d07d      	beq.n	800536e <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005276:	6878      	ldr	r0, [r7, #4]
 8005278:	4798      	blx	r3
        }
        return;
 800527a:	e078      	b.n	800536e <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005286:	2b00      	cmp	r3, #0
 8005288:	d01c      	beq.n	80052c4 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005294:	2b00      	cmp	r3, #0
 8005296:	d108      	bne.n	80052aa <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800529c:	2b00      	cmp	r3, #0
 800529e:	d030      	beq.n	8005302 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052a4:	6878      	ldr	r0, [r7, #4]
 80052a6:	4798      	blx	r3
 80052a8:	e02b      	b.n	8005302 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d027      	beq.n	8005302 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052b6:	6878      	ldr	r0, [r7, #4]
 80052b8:	4798      	blx	r3
 80052ba:	e022      	b.n	8005302 <HAL_DMA_IRQHandler+0x29e>
 80052bc:	20000004 	.word	0x20000004
 80052c0:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d10f      	bne.n	80052f2 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	681a      	ldr	r2, [r3, #0]
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	f022 0210 	bic.w	r2, r2, #16
 80052e0:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	2201      	movs	r2, #1
 80052e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	2200      	movs	r2, #0
 80052ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d003      	beq.n	8005302 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052fe:	6878      	ldr	r0, [r7, #4]
 8005300:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005306:	2b00      	cmp	r3, #0
 8005308:	d032      	beq.n	8005370 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800530e:	f003 0301 	and.w	r3, r3, #1
 8005312:	2b00      	cmp	r3, #0
 8005314:	d022      	beq.n	800535c <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	2205      	movs	r2, #5
 800531a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	681a      	ldr	r2, [r3, #0]
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	f022 0201 	bic.w	r2, r2, #1
 800532c:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800532e:	68bb      	ldr	r3, [r7, #8]
 8005330:	3301      	adds	r3, #1
 8005332:	60bb      	str	r3, [r7, #8]
 8005334:	697a      	ldr	r2, [r7, #20]
 8005336:	429a      	cmp	r2, r3
 8005338:	d307      	bcc.n	800534a <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	f003 0301 	and.w	r3, r3, #1
 8005344:	2b00      	cmp	r3, #0
 8005346:	d1f2      	bne.n	800532e <HAL_DMA_IRQHandler+0x2ca>
 8005348:	e000      	b.n	800534c <HAL_DMA_IRQHandler+0x2e8>
          break;
 800534a:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	2201      	movs	r2, #1
 8005350:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	2200      	movs	r2, #0
 8005358:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005360:	2b00      	cmp	r3, #0
 8005362:	d005      	beq.n	8005370 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005368:	6878      	ldr	r0, [r7, #4]
 800536a:	4798      	blx	r3
 800536c:	e000      	b.n	8005370 <HAL_DMA_IRQHandler+0x30c>
        return;
 800536e:	bf00      	nop
    }
  }
}
 8005370:	3718      	adds	r7, #24
 8005372:	46bd      	mov	sp, r7
 8005374:	bd80      	pop	{r7, pc}
 8005376:	bf00      	nop

08005378 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005378:	b480      	push	{r7}
 800537a:	b085      	sub	sp, #20
 800537c:	af00      	add	r7, sp, #0
 800537e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	b2db      	uxtb	r3, r3
 8005386:	3b10      	subs	r3, #16
 8005388:	4a13      	ldr	r2, [pc, #76]	; (80053d8 <DMA_CalcBaseAndBitshift+0x60>)
 800538a:	fba2 2303 	umull	r2, r3, r2, r3
 800538e:	091b      	lsrs	r3, r3, #4
 8005390:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8005392:	4a12      	ldr	r2, [pc, #72]	; (80053dc <DMA_CalcBaseAndBitshift+0x64>)
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	4413      	add	r3, r2
 8005398:	781b      	ldrb	r3, [r3, #0]
 800539a:	461a      	mov	r2, r3
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	2b03      	cmp	r3, #3
 80053a4:	d909      	bls.n	80053ba <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80053ae:	f023 0303 	bic.w	r3, r3, #3
 80053b2:	1d1a      	adds	r2, r3, #4
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	659a      	str	r2, [r3, #88]	; 0x58
 80053b8:	e007      	b.n	80053ca <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80053c2:	f023 0303 	bic.w	r3, r3, #3
 80053c6:	687a      	ldr	r2, [r7, #4]
 80053c8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80053ce:	4618      	mov	r0, r3
 80053d0:	3714      	adds	r7, #20
 80053d2:	46bd      	mov	sp, r7
 80053d4:	bc80      	pop	{r7}
 80053d6:	4770      	bx	lr
 80053d8:	aaaaaaab 	.word	0xaaaaaaab
 80053dc:	0801178c 	.word	0x0801178c

080053e0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80053e0:	b480      	push	{r7}
 80053e2:	b085      	sub	sp, #20
 80053e4:	af00      	add	r7, sp, #0
 80053e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80053e8:	2300      	movs	r3, #0
 80053ea:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053f0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	699b      	ldr	r3, [r3, #24]
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d11f      	bne.n	800543a <DMA_CheckFifoParam+0x5a>
 80053fa:	68bb      	ldr	r3, [r7, #8]
 80053fc:	2b03      	cmp	r3, #3
 80053fe:	d856      	bhi.n	80054ae <DMA_CheckFifoParam+0xce>
 8005400:	a201      	add	r2, pc, #4	; (adr r2, 8005408 <DMA_CheckFifoParam+0x28>)
 8005402:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005406:	bf00      	nop
 8005408:	08005419 	.word	0x08005419
 800540c:	0800542b 	.word	0x0800542b
 8005410:	08005419 	.word	0x08005419
 8005414:	080054af 	.word	0x080054af
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800541c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005420:	2b00      	cmp	r3, #0
 8005422:	d046      	beq.n	80054b2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8005424:	2301      	movs	r3, #1
 8005426:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005428:	e043      	b.n	80054b2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800542e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005432:	d140      	bne.n	80054b6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8005434:	2301      	movs	r3, #1
 8005436:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005438:	e03d      	b.n	80054b6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	699b      	ldr	r3, [r3, #24]
 800543e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005442:	d121      	bne.n	8005488 <DMA_CheckFifoParam+0xa8>
 8005444:	68bb      	ldr	r3, [r7, #8]
 8005446:	2b03      	cmp	r3, #3
 8005448:	d837      	bhi.n	80054ba <DMA_CheckFifoParam+0xda>
 800544a:	a201      	add	r2, pc, #4	; (adr r2, 8005450 <DMA_CheckFifoParam+0x70>)
 800544c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005450:	08005461 	.word	0x08005461
 8005454:	08005467 	.word	0x08005467
 8005458:	08005461 	.word	0x08005461
 800545c:	08005479 	.word	0x08005479
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8005460:	2301      	movs	r3, #1
 8005462:	73fb      	strb	r3, [r7, #15]
      break;
 8005464:	e030      	b.n	80054c8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800546a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800546e:	2b00      	cmp	r3, #0
 8005470:	d025      	beq.n	80054be <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8005472:	2301      	movs	r3, #1
 8005474:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005476:	e022      	b.n	80054be <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800547c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005480:	d11f      	bne.n	80054c2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8005482:	2301      	movs	r3, #1
 8005484:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8005486:	e01c      	b.n	80054c2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8005488:	68bb      	ldr	r3, [r7, #8]
 800548a:	2b02      	cmp	r3, #2
 800548c:	d903      	bls.n	8005496 <DMA_CheckFifoParam+0xb6>
 800548e:	68bb      	ldr	r3, [r7, #8]
 8005490:	2b03      	cmp	r3, #3
 8005492:	d003      	beq.n	800549c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8005494:	e018      	b.n	80054c8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8005496:	2301      	movs	r3, #1
 8005498:	73fb      	strb	r3, [r7, #15]
      break;
 800549a:	e015      	b.n	80054c8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054a0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d00e      	beq.n	80054c6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80054a8:	2301      	movs	r3, #1
 80054aa:	73fb      	strb	r3, [r7, #15]
      break;
 80054ac:	e00b      	b.n	80054c6 <DMA_CheckFifoParam+0xe6>
      break;
 80054ae:	bf00      	nop
 80054b0:	e00a      	b.n	80054c8 <DMA_CheckFifoParam+0xe8>
      break;
 80054b2:	bf00      	nop
 80054b4:	e008      	b.n	80054c8 <DMA_CheckFifoParam+0xe8>
      break;
 80054b6:	bf00      	nop
 80054b8:	e006      	b.n	80054c8 <DMA_CheckFifoParam+0xe8>
      break;
 80054ba:	bf00      	nop
 80054bc:	e004      	b.n	80054c8 <DMA_CheckFifoParam+0xe8>
      break;
 80054be:	bf00      	nop
 80054c0:	e002      	b.n	80054c8 <DMA_CheckFifoParam+0xe8>
      break;   
 80054c2:	bf00      	nop
 80054c4:	e000      	b.n	80054c8 <DMA_CheckFifoParam+0xe8>
      break;
 80054c6:	bf00      	nop
    }
  } 
  
  return status; 
 80054c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80054ca:	4618      	mov	r0, r3
 80054cc:	3714      	adds	r7, #20
 80054ce:	46bd      	mov	sp, r7
 80054d0:	bc80      	pop	{r7}
 80054d2:	4770      	bx	lr

080054d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80054d4:	b480      	push	{r7}
 80054d6:	b087      	sub	sp, #28
 80054d8:	af00      	add	r7, sp, #0
 80054da:	6078      	str	r0, [r7, #4]
 80054dc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80054de:	2300      	movs	r3, #0
 80054e0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80054e2:	e16f      	b.n	80057c4 <HAL_GPIO_Init+0x2f0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80054e4:	683b      	ldr	r3, [r7, #0]
 80054e6:	681a      	ldr	r2, [r3, #0]
 80054e8:	2101      	movs	r1, #1
 80054ea:	697b      	ldr	r3, [r7, #20]
 80054ec:	fa01 f303 	lsl.w	r3, r1, r3
 80054f0:	4013      	ands	r3, r2
 80054f2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	f000 8161 	beq.w	80057be <HAL_GPIO_Init+0x2ea>
    {
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80054fc:	683b      	ldr	r3, [r7, #0]
 80054fe:	685b      	ldr	r3, [r3, #4]
 8005500:	f003 0303 	and.w	r3, r3, #3
 8005504:	2b01      	cmp	r3, #1
 8005506:	d005      	beq.n	8005514 <HAL_GPIO_Init+0x40>
 8005508:	683b      	ldr	r3, [r7, #0]
 800550a:	685b      	ldr	r3, [r3, #4]
 800550c:	f003 0303 	and.w	r3, r3, #3
 8005510:	2b02      	cmp	r3, #2
 8005512:	d130      	bne.n	8005576 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	689b      	ldr	r3, [r3, #8]
 8005518:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800551a:	697b      	ldr	r3, [r7, #20]
 800551c:	005b      	lsls	r3, r3, #1
 800551e:	2203      	movs	r2, #3
 8005520:	fa02 f303 	lsl.w	r3, r2, r3
 8005524:	43db      	mvns	r3, r3
 8005526:	693a      	ldr	r2, [r7, #16]
 8005528:	4013      	ands	r3, r2
 800552a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800552c:	683b      	ldr	r3, [r7, #0]
 800552e:	68da      	ldr	r2, [r3, #12]
 8005530:	697b      	ldr	r3, [r7, #20]
 8005532:	005b      	lsls	r3, r3, #1
 8005534:	fa02 f303 	lsl.w	r3, r2, r3
 8005538:	693a      	ldr	r2, [r7, #16]
 800553a:	4313      	orrs	r3, r2
 800553c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	693a      	ldr	r2, [r7, #16]
 8005542:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	685b      	ldr	r3, [r3, #4]
 8005548:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800554a:	2201      	movs	r2, #1
 800554c:	697b      	ldr	r3, [r7, #20]
 800554e:	fa02 f303 	lsl.w	r3, r2, r3
 8005552:	43db      	mvns	r3, r3
 8005554:	693a      	ldr	r2, [r7, #16]
 8005556:	4013      	ands	r3, r2
 8005558:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800555a:	683b      	ldr	r3, [r7, #0]
 800555c:	685b      	ldr	r3, [r3, #4]
 800555e:	091b      	lsrs	r3, r3, #4
 8005560:	f003 0201 	and.w	r2, r3, #1
 8005564:	697b      	ldr	r3, [r7, #20]
 8005566:	fa02 f303 	lsl.w	r3, r2, r3
 800556a:	693a      	ldr	r2, [r7, #16]
 800556c:	4313      	orrs	r3, r2
 800556e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	693a      	ldr	r2, [r7, #16]
 8005574:	605a      	str	r2, [r3, #4]
      }
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005576:	683b      	ldr	r3, [r7, #0]
 8005578:	685b      	ldr	r3, [r3, #4]
 800557a:	f003 0303 	and.w	r3, r3, #3
 800557e:	2b03      	cmp	r3, #3
 8005580:	d017      	beq.n	80055b2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	68db      	ldr	r3, [r3, #12]
 8005586:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8005588:	697b      	ldr	r3, [r7, #20]
 800558a:	005b      	lsls	r3, r3, #1
 800558c:	2203      	movs	r2, #3
 800558e:	fa02 f303 	lsl.w	r3, r2, r3
 8005592:	43db      	mvns	r3, r3
 8005594:	693a      	ldr	r2, [r7, #16]
 8005596:	4013      	ands	r3, r2
 8005598:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800559a:	683b      	ldr	r3, [r7, #0]
 800559c:	689a      	ldr	r2, [r3, #8]
 800559e:	697b      	ldr	r3, [r7, #20]
 80055a0:	005b      	lsls	r3, r3, #1
 80055a2:	fa02 f303 	lsl.w	r3, r2, r3
 80055a6:	693a      	ldr	r2, [r7, #16]
 80055a8:	4313      	orrs	r3, r2
 80055aa:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	693a      	ldr	r2, [r7, #16]
 80055b0:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80055b2:	683b      	ldr	r3, [r7, #0]
 80055b4:	685b      	ldr	r3, [r3, #4]
 80055b6:	f003 0303 	and.w	r3, r3, #3
 80055ba:	2b02      	cmp	r3, #2
 80055bc:	d123      	bne.n	8005606 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80055be:	697b      	ldr	r3, [r7, #20]
 80055c0:	08da      	lsrs	r2, r3, #3
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	3208      	adds	r2, #8
 80055c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80055ca:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80055cc:	697b      	ldr	r3, [r7, #20]
 80055ce:	f003 0307 	and.w	r3, r3, #7
 80055d2:	009b      	lsls	r3, r3, #2
 80055d4:	220f      	movs	r2, #15
 80055d6:	fa02 f303 	lsl.w	r3, r2, r3
 80055da:	43db      	mvns	r3, r3
 80055dc:	693a      	ldr	r2, [r7, #16]
 80055de:	4013      	ands	r3, r2
 80055e0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80055e2:	683b      	ldr	r3, [r7, #0]
 80055e4:	691a      	ldr	r2, [r3, #16]
 80055e6:	697b      	ldr	r3, [r7, #20]
 80055e8:	f003 0307 	and.w	r3, r3, #7
 80055ec:	009b      	lsls	r3, r3, #2
 80055ee:	fa02 f303 	lsl.w	r3, r2, r3
 80055f2:	693a      	ldr	r2, [r7, #16]
 80055f4:	4313      	orrs	r3, r2
 80055f6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80055f8:	697b      	ldr	r3, [r7, #20]
 80055fa:	08da      	lsrs	r2, r3, #3
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	3208      	adds	r2, #8
 8005600:	6939      	ldr	r1, [r7, #16]
 8005602:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800560c:	697b      	ldr	r3, [r7, #20]
 800560e:	005b      	lsls	r3, r3, #1
 8005610:	2203      	movs	r2, #3
 8005612:	fa02 f303 	lsl.w	r3, r2, r3
 8005616:	43db      	mvns	r3, r3
 8005618:	693a      	ldr	r2, [r7, #16]
 800561a:	4013      	ands	r3, r2
 800561c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800561e:	683b      	ldr	r3, [r7, #0]
 8005620:	685b      	ldr	r3, [r3, #4]
 8005622:	f003 0203 	and.w	r2, r3, #3
 8005626:	697b      	ldr	r3, [r7, #20]
 8005628:	005b      	lsls	r3, r3, #1
 800562a:	fa02 f303 	lsl.w	r3, r2, r3
 800562e:	693a      	ldr	r2, [r7, #16]
 8005630:	4313      	orrs	r3, r2
 8005632:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	693a      	ldr	r2, [r7, #16]
 8005638:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800563a:	683b      	ldr	r3, [r7, #0]
 800563c:	685b      	ldr	r3, [r3, #4]
 800563e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005642:	2b00      	cmp	r3, #0
 8005644:	f000 80bb 	beq.w	80057be <HAL_GPIO_Init+0x2ea>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005648:	2300      	movs	r3, #0
 800564a:	60bb      	str	r3, [r7, #8]
 800564c:	4b64      	ldr	r3, [pc, #400]	; (80057e0 <HAL_GPIO_Init+0x30c>)
 800564e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005650:	4a63      	ldr	r2, [pc, #396]	; (80057e0 <HAL_GPIO_Init+0x30c>)
 8005652:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005656:	6453      	str	r3, [r2, #68]	; 0x44
 8005658:	4b61      	ldr	r3, [pc, #388]	; (80057e0 <HAL_GPIO_Init+0x30c>)
 800565a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800565c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005660:	60bb      	str	r3, [r7, #8]
 8005662:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8005664:	4a5f      	ldr	r2, [pc, #380]	; (80057e4 <HAL_GPIO_Init+0x310>)
 8005666:	697b      	ldr	r3, [r7, #20]
 8005668:	089b      	lsrs	r3, r3, #2
 800566a:	3302      	adds	r3, #2
 800566c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005670:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8005672:	697b      	ldr	r3, [r7, #20]
 8005674:	f003 0303 	and.w	r3, r3, #3
 8005678:	009b      	lsls	r3, r3, #2
 800567a:	220f      	movs	r2, #15
 800567c:	fa02 f303 	lsl.w	r3, r2, r3
 8005680:	43db      	mvns	r3, r3
 8005682:	693a      	ldr	r2, [r7, #16]
 8005684:	4013      	ands	r3, r2
 8005686:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	4a57      	ldr	r2, [pc, #348]	; (80057e8 <HAL_GPIO_Init+0x314>)
 800568c:	4293      	cmp	r3, r2
 800568e:	d031      	beq.n	80056f4 <HAL_GPIO_Init+0x220>
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	4a56      	ldr	r2, [pc, #344]	; (80057ec <HAL_GPIO_Init+0x318>)
 8005694:	4293      	cmp	r3, r2
 8005696:	d02b      	beq.n	80056f0 <HAL_GPIO_Init+0x21c>
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	4a55      	ldr	r2, [pc, #340]	; (80057f0 <HAL_GPIO_Init+0x31c>)
 800569c:	4293      	cmp	r3, r2
 800569e:	d025      	beq.n	80056ec <HAL_GPIO_Init+0x218>
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	4a54      	ldr	r2, [pc, #336]	; (80057f4 <HAL_GPIO_Init+0x320>)
 80056a4:	4293      	cmp	r3, r2
 80056a6:	d01f      	beq.n	80056e8 <HAL_GPIO_Init+0x214>
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	4a53      	ldr	r2, [pc, #332]	; (80057f8 <HAL_GPIO_Init+0x324>)
 80056ac:	4293      	cmp	r3, r2
 80056ae:	d019      	beq.n	80056e4 <HAL_GPIO_Init+0x210>
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	4a52      	ldr	r2, [pc, #328]	; (80057fc <HAL_GPIO_Init+0x328>)
 80056b4:	4293      	cmp	r3, r2
 80056b6:	d013      	beq.n	80056e0 <HAL_GPIO_Init+0x20c>
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	4a51      	ldr	r2, [pc, #324]	; (8005800 <HAL_GPIO_Init+0x32c>)
 80056bc:	4293      	cmp	r3, r2
 80056be:	d00d      	beq.n	80056dc <HAL_GPIO_Init+0x208>
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	4a50      	ldr	r2, [pc, #320]	; (8005804 <HAL_GPIO_Init+0x330>)
 80056c4:	4293      	cmp	r3, r2
 80056c6:	d007      	beq.n	80056d8 <HAL_GPIO_Init+0x204>
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	4a4f      	ldr	r2, [pc, #316]	; (8005808 <HAL_GPIO_Init+0x334>)
 80056cc:	4293      	cmp	r3, r2
 80056ce:	d101      	bne.n	80056d4 <HAL_GPIO_Init+0x200>
 80056d0:	2308      	movs	r3, #8
 80056d2:	e010      	b.n	80056f6 <HAL_GPIO_Init+0x222>
 80056d4:	2309      	movs	r3, #9
 80056d6:	e00e      	b.n	80056f6 <HAL_GPIO_Init+0x222>
 80056d8:	2307      	movs	r3, #7
 80056da:	e00c      	b.n	80056f6 <HAL_GPIO_Init+0x222>
 80056dc:	2306      	movs	r3, #6
 80056de:	e00a      	b.n	80056f6 <HAL_GPIO_Init+0x222>
 80056e0:	2305      	movs	r3, #5
 80056e2:	e008      	b.n	80056f6 <HAL_GPIO_Init+0x222>
 80056e4:	2304      	movs	r3, #4
 80056e6:	e006      	b.n	80056f6 <HAL_GPIO_Init+0x222>
 80056e8:	2303      	movs	r3, #3
 80056ea:	e004      	b.n	80056f6 <HAL_GPIO_Init+0x222>
 80056ec:	2302      	movs	r3, #2
 80056ee:	e002      	b.n	80056f6 <HAL_GPIO_Init+0x222>
 80056f0:	2301      	movs	r3, #1
 80056f2:	e000      	b.n	80056f6 <HAL_GPIO_Init+0x222>
 80056f4:	2300      	movs	r3, #0
 80056f6:	697a      	ldr	r2, [r7, #20]
 80056f8:	f002 0203 	and.w	r2, r2, #3
 80056fc:	0092      	lsls	r2, r2, #2
 80056fe:	4093      	lsls	r3, r2
 8005700:	461a      	mov	r2, r3
 8005702:	693b      	ldr	r3, [r7, #16]
 8005704:	4313      	orrs	r3, r2
 8005706:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8005708:	4936      	ldr	r1, [pc, #216]	; (80057e4 <HAL_GPIO_Init+0x310>)
 800570a:	697b      	ldr	r3, [r7, #20]
 800570c:	089b      	lsrs	r3, r3, #2
 800570e:	3302      	adds	r3, #2
 8005710:	693a      	ldr	r2, [r7, #16]
 8005712:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005716:	4b3d      	ldr	r3, [pc, #244]	; (800580c <HAL_GPIO_Init+0x338>)
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	43db      	mvns	r3, r3
 8005720:	693a      	ldr	r2, [r7, #16]
 8005722:	4013      	ands	r3, r2
 8005724:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8005726:	683b      	ldr	r3, [r7, #0]
 8005728:	685b      	ldr	r3, [r3, #4]
 800572a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800572e:	2b00      	cmp	r3, #0
 8005730:	d003      	beq.n	800573a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8005732:	693a      	ldr	r2, [r7, #16]
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	4313      	orrs	r3, r2
 8005738:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800573a:	4a34      	ldr	r2, [pc, #208]	; (800580c <HAL_GPIO_Init+0x338>)
 800573c:	693b      	ldr	r3, [r7, #16]
 800573e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8005740:	4b32      	ldr	r3, [pc, #200]	; (800580c <HAL_GPIO_Init+0x338>)
 8005742:	685b      	ldr	r3, [r3, #4]
 8005744:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	43db      	mvns	r3, r3
 800574a:	693a      	ldr	r2, [r7, #16]
 800574c:	4013      	ands	r3, r2
 800574e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8005750:	683b      	ldr	r3, [r7, #0]
 8005752:	685b      	ldr	r3, [r3, #4]
 8005754:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005758:	2b00      	cmp	r3, #0
 800575a:	d003      	beq.n	8005764 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 800575c:	693a      	ldr	r2, [r7, #16]
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	4313      	orrs	r3, r2
 8005762:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8005764:	4a29      	ldr	r2, [pc, #164]	; (800580c <HAL_GPIO_Init+0x338>)
 8005766:	693b      	ldr	r3, [r7, #16]
 8005768:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800576a:	4b28      	ldr	r3, [pc, #160]	; (800580c <HAL_GPIO_Init+0x338>)
 800576c:	689b      	ldr	r3, [r3, #8]
 800576e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	43db      	mvns	r3, r3
 8005774:	693a      	ldr	r2, [r7, #16]
 8005776:	4013      	ands	r3, r2
 8005778:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800577a:	683b      	ldr	r3, [r7, #0]
 800577c:	685b      	ldr	r3, [r3, #4]
 800577e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005782:	2b00      	cmp	r3, #0
 8005784:	d003      	beq.n	800578e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8005786:	693a      	ldr	r2, [r7, #16]
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	4313      	orrs	r3, r2
 800578c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800578e:	4a1f      	ldr	r2, [pc, #124]	; (800580c <HAL_GPIO_Init+0x338>)
 8005790:	693b      	ldr	r3, [r7, #16]
 8005792:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005794:	4b1d      	ldr	r3, [pc, #116]	; (800580c <HAL_GPIO_Init+0x338>)
 8005796:	68db      	ldr	r3, [r3, #12]
 8005798:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	43db      	mvns	r3, r3
 800579e:	693a      	ldr	r2, [r7, #16]
 80057a0:	4013      	ands	r3, r2
 80057a2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80057a4:	683b      	ldr	r3, [r7, #0]
 80057a6:	685b      	ldr	r3, [r3, #4]
 80057a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d003      	beq.n	80057b8 <HAL_GPIO_Init+0x2e4>
        {
          temp |= iocurrent;
 80057b0:	693a      	ldr	r2, [r7, #16]
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	4313      	orrs	r3, r2
 80057b6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80057b8:	4a14      	ldr	r2, [pc, #80]	; (800580c <HAL_GPIO_Init+0x338>)
 80057ba:	693b      	ldr	r3, [r7, #16]
 80057bc:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80057be:	697b      	ldr	r3, [r7, #20]
 80057c0:	3301      	adds	r3, #1
 80057c2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80057c4:	683b      	ldr	r3, [r7, #0]
 80057c6:	681a      	ldr	r2, [r3, #0]
 80057c8:	697b      	ldr	r3, [r7, #20]
 80057ca:	fa22 f303 	lsr.w	r3, r2, r3
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	f47f ae88 	bne.w	80054e4 <HAL_GPIO_Init+0x10>
  }
}
 80057d4:	bf00      	nop
 80057d6:	bf00      	nop
 80057d8:	371c      	adds	r7, #28
 80057da:	46bd      	mov	sp, r7
 80057dc:	bc80      	pop	{r7}
 80057de:	4770      	bx	lr
 80057e0:	40023800 	.word	0x40023800
 80057e4:	40013800 	.word	0x40013800
 80057e8:	40020000 	.word	0x40020000
 80057ec:	40020400 	.word	0x40020400
 80057f0:	40020800 	.word	0x40020800
 80057f4:	40020c00 	.word	0x40020c00
 80057f8:	40021000 	.word	0x40021000
 80057fc:	40021400 	.word	0x40021400
 8005800:	40021800 	.word	0x40021800
 8005804:	40021c00 	.word	0x40021c00
 8005808:	40022000 	.word	0x40022000
 800580c:	40013c00 	.word	0x40013c00

08005810 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005810:	b480      	push	{r7}
 8005812:	b083      	sub	sp, #12
 8005814:	af00      	add	r7, sp, #0
 8005816:	6078      	str	r0, [r7, #4]
 8005818:	460b      	mov	r3, r1
 800581a:	807b      	strh	r3, [r7, #2]
 800581c:	4613      	mov	r3, r2
 800581e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005820:	787b      	ldrb	r3, [r7, #1]
 8005822:	2b00      	cmp	r3, #0
 8005824:	d003      	beq.n	800582e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005826:	887a      	ldrh	r2, [r7, #2]
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800582c:	e003      	b.n	8005836 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800582e:	887b      	ldrh	r3, [r7, #2]
 8005830:	041a      	lsls	r2, r3, #16
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	619a      	str	r2, [r3, #24]
}
 8005836:	bf00      	nop
 8005838:	370c      	adds	r7, #12
 800583a:	46bd      	mov	sp, r7
 800583c:	bc80      	pop	{r7}
 800583e:	4770      	bx	lr

08005840 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..I) to select the GPIO peripheral. 
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005840:	b480      	push	{r7}
 8005842:	b085      	sub	sp, #20
 8005844:	af00      	add	r7, sp, #0
 8005846:	6078      	str	r0, [r7, #4]
 8005848:	460b      	mov	r3, r1
 800584a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	695b      	ldr	r3, [r3, #20]
 8005850:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005852:	887a      	ldrh	r2, [r7, #2]
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	4013      	ands	r3, r2
 8005858:	041a      	lsls	r2, r3, #16
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	43d9      	mvns	r1, r3
 800585e:	887b      	ldrh	r3, [r7, #2]
 8005860:	400b      	ands	r3, r1
 8005862:	431a      	orrs	r2, r3
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	619a      	str	r2, [r3, #24]
}
 8005868:	bf00      	nop
 800586a:	3714      	adds	r7, #20
 800586c:	46bd      	mov	sp, r7
 800586e:	bc80      	pop	{r7}
 8005870:	4770      	bx	lr
	...

08005874 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005874:	b580      	push	{r7, lr}
 8005876:	b082      	sub	sp, #8
 8005878:	af00      	add	r7, sp, #0
 800587a:	4603      	mov	r3, r0
 800587c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800587e:	4b08      	ldr	r3, [pc, #32]	; (80058a0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005880:	695a      	ldr	r2, [r3, #20]
 8005882:	88fb      	ldrh	r3, [r7, #6]
 8005884:	4013      	ands	r3, r2
 8005886:	2b00      	cmp	r3, #0
 8005888:	d006      	beq.n	8005898 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800588a:	4a05      	ldr	r2, [pc, #20]	; (80058a0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800588c:	88fb      	ldrh	r3, [r7, #6]
 800588e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005890:	88fb      	ldrh	r3, [r7, #6]
 8005892:	4618      	mov	r0, r3
 8005894:	f7fd fdf2 	bl	800347c <HAL_GPIO_EXTI_Callback>
  }
}
 8005898:	bf00      	nop
 800589a:	3708      	adds	r7, #8
 800589c:	46bd      	mov	sp, r7
 800589e:	bd80      	pop	{r7, pc}
 80058a0:	40013c00 	.word	0x40013c00

080058a4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80058a4:	b580      	push	{r7, lr}
 80058a6:	b084      	sub	sp, #16
 80058a8:	af00      	add	r7, sp, #0
 80058aa:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d101      	bne.n	80058b6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80058b2:	2301      	movs	r3, #1
 80058b4:	e12b      	b.n	8005b0e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80058bc:	b2db      	uxtb	r3, r3
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d106      	bne.n	80058d0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	2200      	movs	r2, #0
 80058c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80058ca:	6878      	ldr	r0, [r7, #4]
 80058cc:	f7fe fb3c 	bl	8003f48 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	2224      	movs	r2, #36	; 0x24
 80058d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	681a      	ldr	r2, [r3, #0]
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	f022 0201 	bic.w	r2, r2, #1
 80058e6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	681a      	ldr	r2, [r3, #0]
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80058f6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	681a      	ldr	r2, [r3, #0]
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005906:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005908:	f002 fd12 	bl	8008330 <HAL_RCC_GetPCLK1Freq>
 800590c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	685b      	ldr	r3, [r3, #4]
 8005912:	4a81      	ldr	r2, [pc, #516]	; (8005b18 <HAL_I2C_Init+0x274>)
 8005914:	4293      	cmp	r3, r2
 8005916:	d807      	bhi.n	8005928 <HAL_I2C_Init+0x84>
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	4a80      	ldr	r2, [pc, #512]	; (8005b1c <HAL_I2C_Init+0x278>)
 800591c:	4293      	cmp	r3, r2
 800591e:	bf94      	ite	ls
 8005920:	2301      	movls	r3, #1
 8005922:	2300      	movhi	r3, #0
 8005924:	b2db      	uxtb	r3, r3
 8005926:	e006      	b.n	8005936 <HAL_I2C_Init+0x92>
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	4a7d      	ldr	r2, [pc, #500]	; (8005b20 <HAL_I2C_Init+0x27c>)
 800592c:	4293      	cmp	r3, r2
 800592e:	bf94      	ite	ls
 8005930:	2301      	movls	r3, #1
 8005932:	2300      	movhi	r3, #0
 8005934:	b2db      	uxtb	r3, r3
 8005936:	2b00      	cmp	r3, #0
 8005938:	d001      	beq.n	800593e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800593a:	2301      	movs	r3, #1
 800593c:	e0e7      	b.n	8005b0e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	4a78      	ldr	r2, [pc, #480]	; (8005b24 <HAL_I2C_Init+0x280>)
 8005942:	fba2 2303 	umull	r2, r3, r2, r3
 8005946:	0c9b      	lsrs	r3, r3, #18
 8005948:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	685b      	ldr	r3, [r3, #4]
 8005950:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	68ba      	ldr	r2, [r7, #8]
 800595a:	430a      	orrs	r2, r1
 800595c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	6a1b      	ldr	r3, [r3, #32]
 8005964:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	685b      	ldr	r3, [r3, #4]
 800596c:	4a6a      	ldr	r2, [pc, #424]	; (8005b18 <HAL_I2C_Init+0x274>)
 800596e:	4293      	cmp	r3, r2
 8005970:	d802      	bhi.n	8005978 <HAL_I2C_Init+0xd4>
 8005972:	68bb      	ldr	r3, [r7, #8]
 8005974:	3301      	adds	r3, #1
 8005976:	e009      	b.n	800598c <HAL_I2C_Init+0xe8>
 8005978:	68bb      	ldr	r3, [r7, #8]
 800597a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800597e:	fb02 f303 	mul.w	r3, r2, r3
 8005982:	4a69      	ldr	r2, [pc, #420]	; (8005b28 <HAL_I2C_Init+0x284>)
 8005984:	fba2 2303 	umull	r2, r3, r2, r3
 8005988:	099b      	lsrs	r3, r3, #6
 800598a:	3301      	adds	r3, #1
 800598c:	687a      	ldr	r2, [r7, #4]
 800598e:	6812      	ldr	r2, [r2, #0]
 8005990:	430b      	orrs	r3, r1
 8005992:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	69db      	ldr	r3, [r3, #28]
 800599a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800599e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	685b      	ldr	r3, [r3, #4]
 80059a6:	495c      	ldr	r1, [pc, #368]	; (8005b18 <HAL_I2C_Init+0x274>)
 80059a8:	428b      	cmp	r3, r1
 80059aa:	d819      	bhi.n	80059e0 <HAL_I2C_Init+0x13c>
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	1e59      	subs	r1, r3, #1
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	685b      	ldr	r3, [r3, #4]
 80059b4:	005b      	lsls	r3, r3, #1
 80059b6:	fbb1 f3f3 	udiv	r3, r1, r3
 80059ba:	1c59      	adds	r1, r3, #1
 80059bc:	f640 73fc 	movw	r3, #4092	; 0xffc
 80059c0:	400b      	ands	r3, r1
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d00a      	beq.n	80059dc <HAL_I2C_Init+0x138>
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	1e59      	subs	r1, r3, #1
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	685b      	ldr	r3, [r3, #4]
 80059ce:	005b      	lsls	r3, r3, #1
 80059d0:	fbb1 f3f3 	udiv	r3, r1, r3
 80059d4:	3301      	adds	r3, #1
 80059d6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80059da:	e051      	b.n	8005a80 <HAL_I2C_Init+0x1dc>
 80059dc:	2304      	movs	r3, #4
 80059de:	e04f      	b.n	8005a80 <HAL_I2C_Init+0x1dc>
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	689b      	ldr	r3, [r3, #8]
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d111      	bne.n	8005a0c <HAL_I2C_Init+0x168>
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	1e58      	subs	r0, r3, #1
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	6859      	ldr	r1, [r3, #4]
 80059f0:	460b      	mov	r3, r1
 80059f2:	005b      	lsls	r3, r3, #1
 80059f4:	440b      	add	r3, r1
 80059f6:	fbb0 f3f3 	udiv	r3, r0, r3
 80059fa:	3301      	adds	r3, #1
 80059fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	bf0c      	ite	eq
 8005a04:	2301      	moveq	r3, #1
 8005a06:	2300      	movne	r3, #0
 8005a08:	b2db      	uxtb	r3, r3
 8005a0a:	e012      	b.n	8005a32 <HAL_I2C_Init+0x18e>
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	1e58      	subs	r0, r3, #1
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	6859      	ldr	r1, [r3, #4]
 8005a14:	460b      	mov	r3, r1
 8005a16:	009b      	lsls	r3, r3, #2
 8005a18:	440b      	add	r3, r1
 8005a1a:	0099      	lsls	r1, r3, #2
 8005a1c:	440b      	add	r3, r1
 8005a1e:	fbb0 f3f3 	udiv	r3, r0, r3
 8005a22:	3301      	adds	r3, #1
 8005a24:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	bf0c      	ite	eq
 8005a2c:	2301      	moveq	r3, #1
 8005a2e:	2300      	movne	r3, #0
 8005a30:	b2db      	uxtb	r3, r3
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d001      	beq.n	8005a3a <HAL_I2C_Init+0x196>
 8005a36:	2301      	movs	r3, #1
 8005a38:	e022      	b.n	8005a80 <HAL_I2C_Init+0x1dc>
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	689b      	ldr	r3, [r3, #8]
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d10e      	bne.n	8005a60 <HAL_I2C_Init+0x1bc>
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	1e58      	subs	r0, r3, #1
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	6859      	ldr	r1, [r3, #4]
 8005a4a:	460b      	mov	r3, r1
 8005a4c:	005b      	lsls	r3, r3, #1
 8005a4e:	440b      	add	r3, r1
 8005a50:	fbb0 f3f3 	udiv	r3, r0, r3
 8005a54:	3301      	adds	r3, #1
 8005a56:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005a5a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005a5e:	e00f      	b.n	8005a80 <HAL_I2C_Init+0x1dc>
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	1e58      	subs	r0, r3, #1
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	6859      	ldr	r1, [r3, #4]
 8005a68:	460b      	mov	r3, r1
 8005a6a:	009b      	lsls	r3, r3, #2
 8005a6c:	440b      	add	r3, r1
 8005a6e:	0099      	lsls	r1, r3, #2
 8005a70:	440b      	add	r3, r1
 8005a72:	fbb0 f3f3 	udiv	r3, r0, r3
 8005a76:	3301      	adds	r3, #1
 8005a78:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005a7c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005a80:	6879      	ldr	r1, [r7, #4]
 8005a82:	6809      	ldr	r1, [r1, #0]
 8005a84:	4313      	orrs	r3, r2
 8005a86:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	69da      	ldr	r2, [r3, #28]
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	6a1b      	ldr	r3, [r3, #32]
 8005a9a:	431a      	orrs	r2, r3
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	430a      	orrs	r2, r1
 8005aa2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	689b      	ldr	r3, [r3, #8]
 8005aaa:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8005aae:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005ab2:	687a      	ldr	r2, [r7, #4]
 8005ab4:	6911      	ldr	r1, [r2, #16]
 8005ab6:	687a      	ldr	r2, [r7, #4]
 8005ab8:	68d2      	ldr	r2, [r2, #12]
 8005aba:	4311      	orrs	r1, r2
 8005abc:	687a      	ldr	r2, [r7, #4]
 8005abe:	6812      	ldr	r2, [r2, #0]
 8005ac0:	430b      	orrs	r3, r1
 8005ac2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	68db      	ldr	r3, [r3, #12]
 8005aca:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	695a      	ldr	r2, [r3, #20]
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	699b      	ldr	r3, [r3, #24]
 8005ad6:	431a      	orrs	r2, r3
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	430a      	orrs	r2, r1
 8005ade:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	681a      	ldr	r2, [r3, #0]
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	f042 0201 	orr.w	r2, r2, #1
 8005aee:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	2200      	movs	r2, #0
 8005af4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	2220      	movs	r2, #32
 8005afa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	2200      	movs	r2, #0
 8005b02:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	2200      	movs	r2, #0
 8005b08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005b0c:	2300      	movs	r3, #0
}
 8005b0e:	4618      	mov	r0, r3
 8005b10:	3710      	adds	r7, #16
 8005b12:	46bd      	mov	sp, r7
 8005b14:	bd80      	pop	{r7, pc}
 8005b16:	bf00      	nop
 8005b18:	000186a0 	.word	0x000186a0
 8005b1c:	001e847f 	.word	0x001e847f
 8005b20:	003d08ff 	.word	0x003d08ff
 8005b24:	431bde83 	.word	0x431bde83
 8005b28:	10624dd3 	.word	0x10624dd3

08005b2c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005b2c:	b580      	push	{r7, lr}
 8005b2e:	b088      	sub	sp, #32
 8005b30:	af02      	add	r7, sp, #8
 8005b32:	60f8      	str	r0, [r7, #12]
 8005b34:	4608      	mov	r0, r1
 8005b36:	4611      	mov	r1, r2
 8005b38:	461a      	mov	r2, r3
 8005b3a:	4603      	mov	r3, r0
 8005b3c:	817b      	strh	r3, [r7, #10]
 8005b3e:	460b      	mov	r3, r1
 8005b40:	813b      	strh	r3, [r7, #8]
 8005b42:	4613      	mov	r3, r2
 8005b44:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005b46:	f7fe fd57 	bl	80045f8 <HAL_GetTick>
 8005b4a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b52:	b2db      	uxtb	r3, r3
 8005b54:	2b20      	cmp	r3, #32
 8005b56:	f040 80d9 	bne.w	8005d0c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005b5a:	697b      	ldr	r3, [r7, #20]
 8005b5c:	9300      	str	r3, [sp, #0]
 8005b5e:	2319      	movs	r3, #25
 8005b60:	2201      	movs	r2, #1
 8005b62:	496d      	ldr	r1, [pc, #436]	; (8005d18 <HAL_I2C_Mem_Write+0x1ec>)
 8005b64:	68f8      	ldr	r0, [r7, #12]
 8005b66:	f000 fc7f 	bl	8006468 <I2C_WaitOnFlagUntilTimeout>
 8005b6a:	4603      	mov	r3, r0
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d001      	beq.n	8005b74 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8005b70:	2302      	movs	r3, #2
 8005b72:	e0cc      	b.n	8005d0e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005b7a:	2b01      	cmp	r3, #1
 8005b7c:	d101      	bne.n	8005b82 <HAL_I2C_Mem_Write+0x56>
 8005b7e:	2302      	movs	r3, #2
 8005b80:	e0c5      	b.n	8005d0e <HAL_I2C_Mem_Write+0x1e2>
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	2201      	movs	r2, #1
 8005b86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	f003 0301 	and.w	r3, r3, #1
 8005b94:	2b01      	cmp	r3, #1
 8005b96:	d007      	beq.n	8005ba8 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	681a      	ldr	r2, [r3, #0]
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	f042 0201 	orr.w	r2, r2, #1
 8005ba6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	681a      	ldr	r2, [r3, #0]
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005bb6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	2221      	movs	r2, #33	; 0x21
 8005bbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	2240      	movs	r2, #64	; 0x40
 8005bc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	2200      	movs	r2, #0
 8005bcc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	6a3a      	ldr	r2, [r7, #32]
 8005bd2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005bd8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005bde:	b29a      	uxth	r2, r3
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	4a4d      	ldr	r2, [pc, #308]	; (8005d1c <HAL_I2C_Mem_Write+0x1f0>)
 8005be8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005bea:	88f8      	ldrh	r0, [r7, #6]
 8005bec:	893a      	ldrh	r2, [r7, #8]
 8005bee:	8979      	ldrh	r1, [r7, #10]
 8005bf0:	697b      	ldr	r3, [r7, #20]
 8005bf2:	9301      	str	r3, [sp, #4]
 8005bf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bf6:	9300      	str	r3, [sp, #0]
 8005bf8:	4603      	mov	r3, r0
 8005bfa:	68f8      	ldr	r0, [r7, #12]
 8005bfc:	f000 fab6 	bl	800616c <I2C_RequestMemoryWrite>
 8005c00:	4603      	mov	r3, r0
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d052      	beq.n	8005cac <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8005c06:	2301      	movs	r3, #1
 8005c08:	e081      	b.n	8005d0e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005c0a:	697a      	ldr	r2, [r7, #20]
 8005c0c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005c0e:	68f8      	ldr	r0, [r7, #12]
 8005c10:	f000 fd00 	bl	8006614 <I2C_WaitOnTXEFlagUntilTimeout>
 8005c14:	4603      	mov	r3, r0
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d00d      	beq.n	8005c36 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c1e:	2b04      	cmp	r3, #4
 8005c20:	d107      	bne.n	8005c32 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	681a      	ldr	r2, [r3, #0]
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005c30:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005c32:	2301      	movs	r3, #1
 8005c34:	e06b      	b.n	8005d0e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c3a:	781a      	ldrb	r2, [r3, #0]
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c46:	1c5a      	adds	r2, r3, #1
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c50:	3b01      	subs	r3, #1
 8005c52:	b29a      	uxth	r2, r3
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c5c:	b29b      	uxth	r3, r3
 8005c5e:	3b01      	subs	r3, #1
 8005c60:	b29a      	uxth	r2, r3
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	695b      	ldr	r3, [r3, #20]
 8005c6c:	f003 0304 	and.w	r3, r3, #4
 8005c70:	2b04      	cmp	r3, #4
 8005c72:	d11b      	bne.n	8005cac <HAL_I2C_Mem_Write+0x180>
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d017      	beq.n	8005cac <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c80:	781a      	ldrb	r2, [r3, #0]
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c8c:	1c5a      	adds	r2, r3, #1
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c96:	3b01      	subs	r3, #1
 8005c98:	b29a      	uxth	r2, r3
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ca2:	b29b      	uxth	r3, r3
 8005ca4:	3b01      	subs	r3, #1
 8005ca6:	b29a      	uxth	r2, r3
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d1aa      	bne.n	8005c0a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005cb4:	697a      	ldr	r2, [r7, #20]
 8005cb6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005cb8:	68f8      	ldr	r0, [r7, #12]
 8005cba:	f000 fcec 	bl	8006696 <I2C_WaitOnBTFFlagUntilTimeout>
 8005cbe:	4603      	mov	r3, r0
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d00d      	beq.n	8005ce0 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cc8:	2b04      	cmp	r3, #4
 8005cca:	d107      	bne.n	8005cdc <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	681a      	ldr	r2, [r3, #0]
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005cda:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005cdc:	2301      	movs	r3, #1
 8005cde:	e016      	b.n	8005d0e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	681a      	ldr	r2, [r3, #0]
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005cee:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	2220      	movs	r2, #32
 8005cf4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	2200      	movs	r2, #0
 8005cfc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	2200      	movs	r2, #0
 8005d04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005d08:	2300      	movs	r3, #0
 8005d0a:	e000      	b.n	8005d0e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8005d0c:	2302      	movs	r3, #2
  }
}
 8005d0e:	4618      	mov	r0, r3
 8005d10:	3718      	adds	r7, #24
 8005d12:	46bd      	mov	sp, r7
 8005d14:	bd80      	pop	{r7, pc}
 8005d16:	bf00      	nop
 8005d18:	00100002 	.word	0x00100002
 8005d1c:	ffff0000 	.word	0xffff0000

08005d20 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005d20:	b580      	push	{r7, lr}
 8005d22:	b08c      	sub	sp, #48	; 0x30
 8005d24:	af02      	add	r7, sp, #8
 8005d26:	60f8      	str	r0, [r7, #12]
 8005d28:	4608      	mov	r0, r1
 8005d2a:	4611      	mov	r1, r2
 8005d2c:	461a      	mov	r2, r3
 8005d2e:	4603      	mov	r3, r0
 8005d30:	817b      	strh	r3, [r7, #10]
 8005d32:	460b      	mov	r3, r1
 8005d34:	813b      	strh	r3, [r7, #8]
 8005d36:	4613      	mov	r3, r2
 8005d38:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005d3a:	f7fe fc5d 	bl	80045f8 <HAL_GetTick>
 8005d3e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d46:	b2db      	uxtb	r3, r3
 8005d48:	2b20      	cmp	r3, #32
 8005d4a:	f040 8208 	bne.w	800615e <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005d4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d50:	9300      	str	r3, [sp, #0]
 8005d52:	2319      	movs	r3, #25
 8005d54:	2201      	movs	r2, #1
 8005d56:	497b      	ldr	r1, [pc, #492]	; (8005f44 <HAL_I2C_Mem_Read+0x224>)
 8005d58:	68f8      	ldr	r0, [r7, #12]
 8005d5a:	f000 fb85 	bl	8006468 <I2C_WaitOnFlagUntilTimeout>
 8005d5e:	4603      	mov	r3, r0
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d001      	beq.n	8005d68 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8005d64:	2302      	movs	r3, #2
 8005d66:	e1fb      	b.n	8006160 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005d6e:	2b01      	cmp	r3, #1
 8005d70:	d101      	bne.n	8005d76 <HAL_I2C_Mem_Read+0x56>
 8005d72:	2302      	movs	r3, #2
 8005d74:	e1f4      	b.n	8006160 <HAL_I2C_Mem_Read+0x440>
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	2201      	movs	r2, #1
 8005d7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	f003 0301 	and.w	r3, r3, #1
 8005d88:	2b01      	cmp	r3, #1
 8005d8a:	d007      	beq.n	8005d9c <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	681a      	ldr	r2, [r3, #0]
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	f042 0201 	orr.w	r2, r2, #1
 8005d9a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	681a      	ldr	r2, [r3, #0]
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005daa:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	2222      	movs	r2, #34	; 0x22
 8005db0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	2240      	movs	r2, #64	; 0x40
 8005db8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	2200      	movs	r2, #0
 8005dc0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005dc6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8005dcc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005dd2:	b29a      	uxth	r2, r3
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	4a5b      	ldr	r2, [pc, #364]	; (8005f48 <HAL_I2C_Mem_Read+0x228>)
 8005ddc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005dde:	88f8      	ldrh	r0, [r7, #6]
 8005de0:	893a      	ldrh	r2, [r7, #8]
 8005de2:	8979      	ldrh	r1, [r7, #10]
 8005de4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005de6:	9301      	str	r3, [sp, #4]
 8005de8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dea:	9300      	str	r3, [sp, #0]
 8005dec:	4603      	mov	r3, r0
 8005dee:	68f8      	ldr	r0, [r7, #12]
 8005df0:	f000 fa52 	bl	8006298 <I2C_RequestMemoryRead>
 8005df4:	4603      	mov	r3, r0
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d001      	beq.n	8005dfe <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8005dfa:	2301      	movs	r3, #1
 8005dfc:	e1b0      	b.n	8006160 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d113      	bne.n	8005e2e <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005e06:	2300      	movs	r3, #0
 8005e08:	623b      	str	r3, [r7, #32]
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	695b      	ldr	r3, [r3, #20]
 8005e10:	623b      	str	r3, [r7, #32]
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	699b      	ldr	r3, [r3, #24]
 8005e18:	623b      	str	r3, [r7, #32]
 8005e1a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	681a      	ldr	r2, [r3, #0]
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005e2a:	601a      	str	r2, [r3, #0]
 8005e2c:	e184      	b.n	8006138 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e32:	2b01      	cmp	r3, #1
 8005e34:	d11b      	bne.n	8005e6e <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	681a      	ldr	r2, [r3, #0]
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005e44:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005e46:	2300      	movs	r3, #0
 8005e48:	61fb      	str	r3, [r7, #28]
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	695b      	ldr	r3, [r3, #20]
 8005e50:	61fb      	str	r3, [r7, #28]
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	699b      	ldr	r3, [r3, #24]
 8005e58:	61fb      	str	r3, [r7, #28]
 8005e5a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	681a      	ldr	r2, [r3, #0]
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005e6a:	601a      	str	r2, [r3, #0]
 8005e6c:	e164      	b.n	8006138 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e72:	2b02      	cmp	r3, #2
 8005e74:	d11b      	bne.n	8005eae <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	681a      	ldr	r2, [r3, #0]
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005e84:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	681a      	ldr	r2, [r3, #0]
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005e94:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005e96:	2300      	movs	r3, #0
 8005e98:	61bb      	str	r3, [r7, #24]
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	695b      	ldr	r3, [r3, #20]
 8005ea0:	61bb      	str	r3, [r7, #24]
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	699b      	ldr	r3, [r3, #24]
 8005ea8:	61bb      	str	r3, [r7, #24]
 8005eaa:	69bb      	ldr	r3, [r7, #24]
 8005eac:	e144      	b.n	8006138 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005eae:	2300      	movs	r3, #0
 8005eb0:	617b      	str	r3, [r7, #20]
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	695b      	ldr	r3, [r3, #20]
 8005eb8:	617b      	str	r3, [r7, #20]
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	699b      	ldr	r3, [r3, #24]
 8005ec0:	617b      	str	r3, [r7, #20]
 8005ec2:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8005ec4:	e138      	b.n	8006138 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005eca:	2b03      	cmp	r3, #3
 8005ecc:	f200 80f1 	bhi.w	80060b2 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ed4:	2b01      	cmp	r3, #1
 8005ed6:	d123      	bne.n	8005f20 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005ed8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005eda:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005edc:	68f8      	ldr	r0, [r7, #12]
 8005ede:	f000 fc1b 	bl	8006718 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005ee2:	4603      	mov	r3, r0
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d001      	beq.n	8005eec <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8005ee8:	2301      	movs	r3, #1
 8005eea:	e139      	b.n	8006160 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	691a      	ldr	r2, [r3, #16]
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ef6:	b2d2      	uxtb	r2, r2
 8005ef8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005efe:	1c5a      	adds	r2, r3, #1
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f08:	3b01      	subs	r3, #1
 8005f0a:	b29a      	uxth	r2, r3
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f14:	b29b      	uxth	r3, r3
 8005f16:	3b01      	subs	r3, #1
 8005f18:	b29a      	uxth	r2, r3
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005f1e:	e10b      	b.n	8006138 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f24:	2b02      	cmp	r3, #2
 8005f26:	d14e      	bne.n	8005fc6 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005f28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f2a:	9300      	str	r3, [sp, #0]
 8005f2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f2e:	2200      	movs	r2, #0
 8005f30:	4906      	ldr	r1, [pc, #24]	; (8005f4c <HAL_I2C_Mem_Read+0x22c>)
 8005f32:	68f8      	ldr	r0, [r7, #12]
 8005f34:	f000 fa98 	bl	8006468 <I2C_WaitOnFlagUntilTimeout>
 8005f38:	4603      	mov	r3, r0
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d008      	beq.n	8005f50 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8005f3e:	2301      	movs	r3, #1
 8005f40:	e10e      	b.n	8006160 <HAL_I2C_Mem_Read+0x440>
 8005f42:	bf00      	nop
 8005f44:	00100002 	.word	0x00100002
 8005f48:	ffff0000 	.word	0xffff0000
 8005f4c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	681a      	ldr	r2, [r3, #0]
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005f5e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	691a      	ldr	r2, [r3, #16]
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f6a:	b2d2      	uxtb	r2, r2
 8005f6c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f72:	1c5a      	adds	r2, r3, #1
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f7c:	3b01      	subs	r3, #1
 8005f7e:	b29a      	uxth	r2, r3
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f88:	b29b      	uxth	r3, r3
 8005f8a:	3b01      	subs	r3, #1
 8005f8c:	b29a      	uxth	r2, r3
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	691a      	ldr	r2, [r3, #16]
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f9c:	b2d2      	uxtb	r2, r2
 8005f9e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fa4:	1c5a      	adds	r2, r3, #1
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005fae:	3b01      	subs	r3, #1
 8005fb0:	b29a      	uxth	r2, r3
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005fba:	b29b      	uxth	r3, r3
 8005fbc:	3b01      	subs	r3, #1
 8005fbe:	b29a      	uxth	r2, r3
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005fc4:	e0b8      	b.n	8006138 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005fc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fc8:	9300      	str	r3, [sp, #0]
 8005fca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fcc:	2200      	movs	r2, #0
 8005fce:	4966      	ldr	r1, [pc, #408]	; (8006168 <HAL_I2C_Mem_Read+0x448>)
 8005fd0:	68f8      	ldr	r0, [r7, #12]
 8005fd2:	f000 fa49 	bl	8006468 <I2C_WaitOnFlagUntilTimeout>
 8005fd6:	4603      	mov	r3, r0
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d001      	beq.n	8005fe0 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8005fdc:	2301      	movs	r3, #1
 8005fde:	e0bf      	b.n	8006160 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	681a      	ldr	r2, [r3, #0]
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005fee:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	691a      	ldr	r2, [r3, #16]
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ffa:	b2d2      	uxtb	r2, r2
 8005ffc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006002:	1c5a      	adds	r2, r3, #1
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800600c:	3b01      	subs	r3, #1
 800600e:	b29a      	uxth	r2, r3
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006018:	b29b      	uxth	r3, r3
 800601a:	3b01      	subs	r3, #1
 800601c:	b29a      	uxth	r2, r3
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006022:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006024:	9300      	str	r3, [sp, #0]
 8006026:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006028:	2200      	movs	r2, #0
 800602a:	494f      	ldr	r1, [pc, #316]	; (8006168 <HAL_I2C_Mem_Read+0x448>)
 800602c:	68f8      	ldr	r0, [r7, #12]
 800602e:	f000 fa1b 	bl	8006468 <I2C_WaitOnFlagUntilTimeout>
 8006032:	4603      	mov	r3, r0
 8006034:	2b00      	cmp	r3, #0
 8006036:	d001      	beq.n	800603c <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8006038:	2301      	movs	r3, #1
 800603a:	e091      	b.n	8006160 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	681a      	ldr	r2, [r3, #0]
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800604a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	691a      	ldr	r2, [r3, #16]
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006056:	b2d2      	uxtb	r2, r2
 8006058:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800605e:	1c5a      	adds	r2, r3, #1
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006068:	3b01      	subs	r3, #1
 800606a:	b29a      	uxth	r2, r3
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006074:	b29b      	uxth	r3, r3
 8006076:	3b01      	subs	r3, #1
 8006078:	b29a      	uxth	r2, r3
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	691a      	ldr	r2, [r3, #16]
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006088:	b2d2      	uxtb	r2, r2
 800608a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006090:	1c5a      	adds	r2, r3, #1
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800609a:	3b01      	subs	r3, #1
 800609c:	b29a      	uxth	r2, r3
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80060a6:	b29b      	uxth	r3, r3
 80060a8:	3b01      	subs	r3, #1
 80060aa:	b29a      	uxth	r2, r3
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	855a      	strh	r2, [r3, #42]	; 0x2a
 80060b0:	e042      	b.n	8006138 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80060b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80060b4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80060b6:	68f8      	ldr	r0, [r7, #12]
 80060b8:	f000 fb2e 	bl	8006718 <I2C_WaitOnRXNEFlagUntilTimeout>
 80060bc:	4603      	mov	r3, r0
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d001      	beq.n	80060c6 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80060c2:	2301      	movs	r3, #1
 80060c4:	e04c      	b.n	8006160 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	691a      	ldr	r2, [r3, #16]
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060d0:	b2d2      	uxtb	r2, r2
 80060d2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060d8:	1c5a      	adds	r2, r3, #1
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80060e2:	3b01      	subs	r3, #1
 80060e4:	b29a      	uxth	r2, r3
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80060ee:	b29b      	uxth	r3, r3
 80060f0:	3b01      	subs	r3, #1
 80060f2:	b29a      	uxth	r2, r3
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	695b      	ldr	r3, [r3, #20]
 80060fe:	f003 0304 	and.w	r3, r3, #4
 8006102:	2b04      	cmp	r3, #4
 8006104:	d118      	bne.n	8006138 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	691a      	ldr	r2, [r3, #16]
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006110:	b2d2      	uxtb	r2, r2
 8006112:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006118:	1c5a      	adds	r2, r3, #1
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006122:	3b01      	subs	r3, #1
 8006124:	b29a      	uxth	r2, r3
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800612e:	b29b      	uxth	r3, r3
 8006130:	3b01      	subs	r3, #1
 8006132:	b29a      	uxth	r2, r3
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800613c:	2b00      	cmp	r3, #0
 800613e:	f47f aec2 	bne.w	8005ec6 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	2220      	movs	r2, #32
 8006146:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	2200      	movs	r2, #0
 800614e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	2200      	movs	r2, #0
 8006156:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800615a:	2300      	movs	r3, #0
 800615c:	e000      	b.n	8006160 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 800615e:	2302      	movs	r3, #2
  }
}
 8006160:	4618      	mov	r0, r3
 8006162:	3728      	adds	r7, #40	; 0x28
 8006164:	46bd      	mov	sp, r7
 8006166:	bd80      	pop	{r7, pc}
 8006168:	00010004 	.word	0x00010004

0800616c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800616c:	b580      	push	{r7, lr}
 800616e:	b088      	sub	sp, #32
 8006170:	af02      	add	r7, sp, #8
 8006172:	60f8      	str	r0, [r7, #12]
 8006174:	4608      	mov	r0, r1
 8006176:	4611      	mov	r1, r2
 8006178:	461a      	mov	r2, r3
 800617a:	4603      	mov	r3, r0
 800617c:	817b      	strh	r3, [r7, #10]
 800617e:	460b      	mov	r3, r1
 8006180:	813b      	strh	r3, [r7, #8]
 8006182:	4613      	mov	r3, r2
 8006184:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	681a      	ldr	r2, [r3, #0]
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006194:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006198:	9300      	str	r3, [sp, #0]
 800619a:	6a3b      	ldr	r3, [r7, #32]
 800619c:	2200      	movs	r2, #0
 800619e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80061a2:	68f8      	ldr	r0, [r7, #12]
 80061a4:	f000 f960 	bl	8006468 <I2C_WaitOnFlagUntilTimeout>
 80061a8:	4603      	mov	r3, r0
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d00d      	beq.n	80061ca <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061b8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80061bc:	d103      	bne.n	80061c6 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80061c4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80061c6:	2303      	movs	r3, #3
 80061c8:	e05f      	b.n	800628a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80061ca:	897b      	ldrh	r3, [r7, #10]
 80061cc:	b2db      	uxtb	r3, r3
 80061ce:	461a      	mov	r2, r3
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80061d8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80061da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061dc:	6a3a      	ldr	r2, [r7, #32]
 80061de:	492d      	ldr	r1, [pc, #180]	; (8006294 <I2C_RequestMemoryWrite+0x128>)
 80061e0:	68f8      	ldr	r0, [r7, #12]
 80061e2:	f000 f998 	bl	8006516 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80061e6:	4603      	mov	r3, r0
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d001      	beq.n	80061f0 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80061ec:	2301      	movs	r3, #1
 80061ee:	e04c      	b.n	800628a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80061f0:	2300      	movs	r3, #0
 80061f2:	617b      	str	r3, [r7, #20]
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	695b      	ldr	r3, [r3, #20]
 80061fa:	617b      	str	r3, [r7, #20]
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	699b      	ldr	r3, [r3, #24]
 8006202:	617b      	str	r3, [r7, #20]
 8006204:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006206:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006208:	6a39      	ldr	r1, [r7, #32]
 800620a:	68f8      	ldr	r0, [r7, #12]
 800620c:	f000 fa02 	bl	8006614 <I2C_WaitOnTXEFlagUntilTimeout>
 8006210:	4603      	mov	r3, r0
 8006212:	2b00      	cmp	r3, #0
 8006214:	d00d      	beq.n	8006232 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800621a:	2b04      	cmp	r3, #4
 800621c:	d107      	bne.n	800622e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	681a      	ldr	r2, [r3, #0]
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800622c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800622e:	2301      	movs	r3, #1
 8006230:	e02b      	b.n	800628a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006232:	88fb      	ldrh	r3, [r7, #6]
 8006234:	2b01      	cmp	r3, #1
 8006236:	d105      	bne.n	8006244 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006238:	893b      	ldrh	r3, [r7, #8]
 800623a:	b2da      	uxtb	r2, r3
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	611a      	str	r2, [r3, #16]
 8006242:	e021      	b.n	8006288 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006244:	893b      	ldrh	r3, [r7, #8]
 8006246:	0a1b      	lsrs	r3, r3, #8
 8006248:	b29b      	uxth	r3, r3
 800624a:	b2da      	uxtb	r2, r3
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006252:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006254:	6a39      	ldr	r1, [r7, #32]
 8006256:	68f8      	ldr	r0, [r7, #12]
 8006258:	f000 f9dc 	bl	8006614 <I2C_WaitOnTXEFlagUntilTimeout>
 800625c:	4603      	mov	r3, r0
 800625e:	2b00      	cmp	r3, #0
 8006260:	d00d      	beq.n	800627e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006266:	2b04      	cmp	r3, #4
 8006268:	d107      	bne.n	800627a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	681a      	ldr	r2, [r3, #0]
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006278:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800627a:	2301      	movs	r3, #1
 800627c:	e005      	b.n	800628a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800627e:	893b      	ldrh	r3, [r7, #8]
 8006280:	b2da      	uxtb	r2, r3
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8006288:	2300      	movs	r3, #0
}
 800628a:	4618      	mov	r0, r3
 800628c:	3718      	adds	r7, #24
 800628e:	46bd      	mov	sp, r7
 8006290:	bd80      	pop	{r7, pc}
 8006292:	bf00      	nop
 8006294:	00010002 	.word	0x00010002

08006298 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006298:	b580      	push	{r7, lr}
 800629a:	b088      	sub	sp, #32
 800629c:	af02      	add	r7, sp, #8
 800629e:	60f8      	str	r0, [r7, #12]
 80062a0:	4608      	mov	r0, r1
 80062a2:	4611      	mov	r1, r2
 80062a4:	461a      	mov	r2, r3
 80062a6:	4603      	mov	r3, r0
 80062a8:	817b      	strh	r3, [r7, #10]
 80062aa:	460b      	mov	r3, r1
 80062ac:	813b      	strh	r3, [r7, #8]
 80062ae:	4613      	mov	r3, r2
 80062b0:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	681a      	ldr	r2, [r3, #0]
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80062c0:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	681a      	ldr	r2, [r3, #0]
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80062d0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80062d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062d4:	9300      	str	r3, [sp, #0]
 80062d6:	6a3b      	ldr	r3, [r7, #32]
 80062d8:	2200      	movs	r2, #0
 80062da:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80062de:	68f8      	ldr	r0, [r7, #12]
 80062e0:	f000 f8c2 	bl	8006468 <I2C_WaitOnFlagUntilTimeout>
 80062e4:	4603      	mov	r3, r0
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d00d      	beq.n	8006306 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80062f4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80062f8:	d103      	bne.n	8006302 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006300:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006302:	2303      	movs	r3, #3
 8006304:	e0aa      	b.n	800645c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006306:	897b      	ldrh	r3, [r7, #10]
 8006308:	b2db      	uxtb	r3, r3
 800630a:	461a      	mov	r2, r3
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006314:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006316:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006318:	6a3a      	ldr	r2, [r7, #32]
 800631a:	4952      	ldr	r1, [pc, #328]	; (8006464 <I2C_RequestMemoryRead+0x1cc>)
 800631c:	68f8      	ldr	r0, [r7, #12]
 800631e:	f000 f8fa 	bl	8006516 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006322:	4603      	mov	r3, r0
 8006324:	2b00      	cmp	r3, #0
 8006326:	d001      	beq.n	800632c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8006328:	2301      	movs	r3, #1
 800632a:	e097      	b.n	800645c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800632c:	2300      	movs	r3, #0
 800632e:	617b      	str	r3, [r7, #20]
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	695b      	ldr	r3, [r3, #20]
 8006336:	617b      	str	r3, [r7, #20]
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	699b      	ldr	r3, [r3, #24]
 800633e:	617b      	str	r3, [r7, #20]
 8006340:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006342:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006344:	6a39      	ldr	r1, [r7, #32]
 8006346:	68f8      	ldr	r0, [r7, #12]
 8006348:	f000 f964 	bl	8006614 <I2C_WaitOnTXEFlagUntilTimeout>
 800634c:	4603      	mov	r3, r0
 800634e:	2b00      	cmp	r3, #0
 8006350:	d00d      	beq.n	800636e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006356:	2b04      	cmp	r3, #4
 8006358:	d107      	bne.n	800636a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	681a      	ldr	r2, [r3, #0]
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006368:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800636a:	2301      	movs	r3, #1
 800636c:	e076      	b.n	800645c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800636e:	88fb      	ldrh	r3, [r7, #6]
 8006370:	2b01      	cmp	r3, #1
 8006372:	d105      	bne.n	8006380 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006374:	893b      	ldrh	r3, [r7, #8]
 8006376:	b2da      	uxtb	r2, r3
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	611a      	str	r2, [r3, #16]
 800637e:	e021      	b.n	80063c4 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006380:	893b      	ldrh	r3, [r7, #8]
 8006382:	0a1b      	lsrs	r3, r3, #8
 8006384:	b29b      	uxth	r3, r3
 8006386:	b2da      	uxtb	r2, r3
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800638e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006390:	6a39      	ldr	r1, [r7, #32]
 8006392:	68f8      	ldr	r0, [r7, #12]
 8006394:	f000 f93e 	bl	8006614 <I2C_WaitOnTXEFlagUntilTimeout>
 8006398:	4603      	mov	r3, r0
 800639a:	2b00      	cmp	r3, #0
 800639c:	d00d      	beq.n	80063ba <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063a2:	2b04      	cmp	r3, #4
 80063a4:	d107      	bne.n	80063b6 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	681a      	ldr	r2, [r3, #0]
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80063b4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80063b6:	2301      	movs	r3, #1
 80063b8:	e050      	b.n	800645c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80063ba:	893b      	ldrh	r3, [r7, #8]
 80063bc:	b2da      	uxtb	r2, r3
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80063c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80063c6:	6a39      	ldr	r1, [r7, #32]
 80063c8:	68f8      	ldr	r0, [r7, #12]
 80063ca:	f000 f923 	bl	8006614 <I2C_WaitOnTXEFlagUntilTimeout>
 80063ce:	4603      	mov	r3, r0
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d00d      	beq.n	80063f0 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063d8:	2b04      	cmp	r3, #4
 80063da:	d107      	bne.n	80063ec <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	681a      	ldr	r2, [r3, #0]
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80063ea:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80063ec:	2301      	movs	r3, #1
 80063ee:	e035      	b.n	800645c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	681a      	ldr	r2, [r3, #0]
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80063fe:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006400:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006402:	9300      	str	r3, [sp, #0]
 8006404:	6a3b      	ldr	r3, [r7, #32]
 8006406:	2200      	movs	r2, #0
 8006408:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800640c:	68f8      	ldr	r0, [r7, #12]
 800640e:	f000 f82b 	bl	8006468 <I2C_WaitOnFlagUntilTimeout>
 8006412:	4603      	mov	r3, r0
 8006414:	2b00      	cmp	r3, #0
 8006416:	d00d      	beq.n	8006434 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006422:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006426:	d103      	bne.n	8006430 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800642e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006430:	2303      	movs	r3, #3
 8006432:	e013      	b.n	800645c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8006434:	897b      	ldrh	r3, [r7, #10]
 8006436:	b2db      	uxtb	r3, r3
 8006438:	f043 0301 	orr.w	r3, r3, #1
 800643c:	b2da      	uxtb	r2, r3
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006446:	6a3a      	ldr	r2, [r7, #32]
 8006448:	4906      	ldr	r1, [pc, #24]	; (8006464 <I2C_RequestMemoryRead+0x1cc>)
 800644a:	68f8      	ldr	r0, [r7, #12]
 800644c:	f000 f863 	bl	8006516 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006450:	4603      	mov	r3, r0
 8006452:	2b00      	cmp	r3, #0
 8006454:	d001      	beq.n	800645a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8006456:	2301      	movs	r3, #1
 8006458:	e000      	b.n	800645c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800645a:	2300      	movs	r3, #0
}
 800645c:	4618      	mov	r0, r3
 800645e:	3718      	adds	r7, #24
 8006460:	46bd      	mov	sp, r7
 8006462:	bd80      	pop	{r7, pc}
 8006464:	00010002 	.word	0x00010002

08006468 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8006468:	b580      	push	{r7, lr}
 800646a:	b084      	sub	sp, #16
 800646c:	af00      	add	r7, sp, #0
 800646e:	60f8      	str	r0, [r7, #12]
 8006470:	60b9      	str	r1, [r7, #8]
 8006472:	603b      	str	r3, [r7, #0]
 8006474:	4613      	mov	r3, r2
 8006476:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006478:	e025      	b.n	80064c6 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800647a:	683b      	ldr	r3, [r7, #0]
 800647c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006480:	d021      	beq.n	80064c6 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006482:	f7fe f8b9 	bl	80045f8 <HAL_GetTick>
 8006486:	4602      	mov	r2, r0
 8006488:	69bb      	ldr	r3, [r7, #24]
 800648a:	1ad3      	subs	r3, r2, r3
 800648c:	683a      	ldr	r2, [r7, #0]
 800648e:	429a      	cmp	r2, r3
 8006490:	d302      	bcc.n	8006498 <I2C_WaitOnFlagUntilTimeout+0x30>
 8006492:	683b      	ldr	r3, [r7, #0]
 8006494:	2b00      	cmp	r3, #0
 8006496:	d116      	bne.n	80064c6 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	2200      	movs	r2, #0
 800649c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	2220      	movs	r2, #32
 80064a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	2200      	movs	r2, #0
 80064aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064b2:	f043 0220 	orr.w	r2, r3, #32
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	2200      	movs	r2, #0
 80064be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80064c2:	2301      	movs	r3, #1
 80064c4:	e023      	b.n	800650e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80064c6:	68bb      	ldr	r3, [r7, #8]
 80064c8:	0c1b      	lsrs	r3, r3, #16
 80064ca:	b2db      	uxtb	r3, r3
 80064cc:	2b01      	cmp	r3, #1
 80064ce:	d10d      	bne.n	80064ec <I2C_WaitOnFlagUntilTimeout+0x84>
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	695b      	ldr	r3, [r3, #20]
 80064d6:	43da      	mvns	r2, r3
 80064d8:	68bb      	ldr	r3, [r7, #8]
 80064da:	4013      	ands	r3, r2
 80064dc:	b29b      	uxth	r3, r3
 80064de:	2b00      	cmp	r3, #0
 80064e0:	bf0c      	ite	eq
 80064e2:	2301      	moveq	r3, #1
 80064e4:	2300      	movne	r3, #0
 80064e6:	b2db      	uxtb	r3, r3
 80064e8:	461a      	mov	r2, r3
 80064ea:	e00c      	b.n	8006506 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	699b      	ldr	r3, [r3, #24]
 80064f2:	43da      	mvns	r2, r3
 80064f4:	68bb      	ldr	r3, [r7, #8]
 80064f6:	4013      	ands	r3, r2
 80064f8:	b29b      	uxth	r3, r3
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	bf0c      	ite	eq
 80064fe:	2301      	moveq	r3, #1
 8006500:	2300      	movne	r3, #0
 8006502:	b2db      	uxtb	r3, r3
 8006504:	461a      	mov	r2, r3
 8006506:	79fb      	ldrb	r3, [r7, #7]
 8006508:	429a      	cmp	r2, r3
 800650a:	d0b6      	beq.n	800647a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800650c:	2300      	movs	r3, #0
}
 800650e:	4618      	mov	r0, r3
 8006510:	3710      	adds	r7, #16
 8006512:	46bd      	mov	sp, r7
 8006514:	bd80      	pop	{r7, pc}

08006516 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8006516:	b580      	push	{r7, lr}
 8006518:	b084      	sub	sp, #16
 800651a:	af00      	add	r7, sp, #0
 800651c:	60f8      	str	r0, [r7, #12]
 800651e:	60b9      	str	r1, [r7, #8]
 8006520:	607a      	str	r2, [r7, #4]
 8006522:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006524:	e051      	b.n	80065ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	695b      	ldr	r3, [r3, #20]
 800652c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006530:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006534:	d123      	bne.n	800657e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	681a      	ldr	r2, [r3, #0]
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006544:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800654e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	2200      	movs	r2, #0
 8006554:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	2220      	movs	r2, #32
 800655a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	2200      	movs	r2, #0
 8006562:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800656a:	f043 0204 	orr.w	r2, r3, #4
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	2200      	movs	r2, #0
 8006576:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800657a:	2301      	movs	r3, #1
 800657c:	e046      	b.n	800660c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006584:	d021      	beq.n	80065ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006586:	f7fe f837 	bl	80045f8 <HAL_GetTick>
 800658a:	4602      	mov	r2, r0
 800658c:	683b      	ldr	r3, [r7, #0]
 800658e:	1ad3      	subs	r3, r2, r3
 8006590:	687a      	ldr	r2, [r7, #4]
 8006592:	429a      	cmp	r2, r3
 8006594:	d302      	bcc.n	800659c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	2b00      	cmp	r3, #0
 800659a:	d116      	bne.n	80065ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	2200      	movs	r2, #0
 80065a0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	2220      	movs	r2, #32
 80065a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	2200      	movs	r2, #0
 80065ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065b6:	f043 0220 	orr.w	r2, r3, #32
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	2200      	movs	r2, #0
 80065c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80065c6:	2301      	movs	r3, #1
 80065c8:	e020      	b.n	800660c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80065ca:	68bb      	ldr	r3, [r7, #8]
 80065cc:	0c1b      	lsrs	r3, r3, #16
 80065ce:	b2db      	uxtb	r3, r3
 80065d0:	2b01      	cmp	r3, #1
 80065d2:	d10c      	bne.n	80065ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	695b      	ldr	r3, [r3, #20]
 80065da:	43da      	mvns	r2, r3
 80065dc:	68bb      	ldr	r3, [r7, #8]
 80065de:	4013      	ands	r3, r2
 80065e0:	b29b      	uxth	r3, r3
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	bf14      	ite	ne
 80065e6:	2301      	movne	r3, #1
 80065e8:	2300      	moveq	r3, #0
 80065ea:	b2db      	uxtb	r3, r3
 80065ec:	e00b      	b.n	8006606 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	699b      	ldr	r3, [r3, #24]
 80065f4:	43da      	mvns	r2, r3
 80065f6:	68bb      	ldr	r3, [r7, #8]
 80065f8:	4013      	ands	r3, r2
 80065fa:	b29b      	uxth	r3, r3
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	bf14      	ite	ne
 8006600:	2301      	movne	r3, #1
 8006602:	2300      	moveq	r3, #0
 8006604:	b2db      	uxtb	r3, r3
 8006606:	2b00      	cmp	r3, #0
 8006608:	d18d      	bne.n	8006526 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800660a:	2300      	movs	r3, #0
}
 800660c:	4618      	mov	r0, r3
 800660e:	3710      	adds	r7, #16
 8006610:	46bd      	mov	sp, r7
 8006612:	bd80      	pop	{r7, pc}

08006614 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006614:	b580      	push	{r7, lr}
 8006616:	b084      	sub	sp, #16
 8006618:	af00      	add	r7, sp, #0
 800661a:	60f8      	str	r0, [r7, #12]
 800661c:	60b9      	str	r1, [r7, #8]
 800661e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006620:	e02d      	b.n	800667e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006622:	68f8      	ldr	r0, [r7, #12]
 8006624:	f000 f8ce 	bl	80067c4 <I2C_IsAcknowledgeFailed>
 8006628:	4603      	mov	r3, r0
 800662a:	2b00      	cmp	r3, #0
 800662c:	d001      	beq.n	8006632 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800662e:	2301      	movs	r3, #1
 8006630:	e02d      	b.n	800668e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006632:	68bb      	ldr	r3, [r7, #8]
 8006634:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006638:	d021      	beq.n	800667e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800663a:	f7fd ffdd 	bl	80045f8 <HAL_GetTick>
 800663e:	4602      	mov	r2, r0
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	1ad3      	subs	r3, r2, r3
 8006644:	68ba      	ldr	r2, [r7, #8]
 8006646:	429a      	cmp	r2, r3
 8006648:	d302      	bcc.n	8006650 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800664a:	68bb      	ldr	r3, [r7, #8]
 800664c:	2b00      	cmp	r3, #0
 800664e:	d116      	bne.n	800667e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	2200      	movs	r2, #0
 8006654:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	2220      	movs	r2, #32
 800665a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	2200      	movs	r2, #0
 8006662:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800666a:	f043 0220 	orr.w	r2, r3, #32
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	2200      	movs	r2, #0
 8006676:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800667a:	2301      	movs	r3, #1
 800667c:	e007      	b.n	800668e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	695b      	ldr	r3, [r3, #20]
 8006684:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006688:	2b80      	cmp	r3, #128	; 0x80
 800668a:	d1ca      	bne.n	8006622 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800668c:	2300      	movs	r3, #0
}
 800668e:	4618      	mov	r0, r3
 8006690:	3710      	adds	r7, #16
 8006692:	46bd      	mov	sp, r7
 8006694:	bd80      	pop	{r7, pc}

08006696 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006696:	b580      	push	{r7, lr}
 8006698:	b084      	sub	sp, #16
 800669a:	af00      	add	r7, sp, #0
 800669c:	60f8      	str	r0, [r7, #12]
 800669e:	60b9      	str	r1, [r7, #8]
 80066a0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80066a2:	e02d      	b.n	8006700 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80066a4:	68f8      	ldr	r0, [r7, #12]
 80066a6:	f000 f88d 	bl	80067c4 <I2C_IsAcknowledgeFailed>
 80066aa:	4603      	mov	r3, r0
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d001      	beq.n	80066b4 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80066b0:	2301      	movs	r3, #1
 80066b2:	e02d      	b.n	8006710 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80066b4:	68bb      	ldr	r3, [r7, #8]
 80066b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066ba:	d021      	beq.n	8006700 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80066bc:	f7fd ff9c 	bl	80045f8 <HAL_GetTick>
 80066c0:	4602      	mov	r2, r0
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	1ad3      	subs	r3, r2, r3
 80066c6:	68ba      	ldr	r2, [r7, #8]
 80066c8:	429a      	cmp	r2, r3
 80066ca:	d302      	bcc.n	80066d2 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80066cc:	68bb      	ldr	r3, [r7, #8]
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d116      	bne.n	8006700 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	2200      	movs	r2, #0
 80066d6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	2220      	movs	r2, #32
 80066dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	2200      	movs	r2, #0
 80066e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066ec:	f043 0220 	orr.w	r2, r3, #32
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	2200      	movs	r2, #0
 80066f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80066fc:	2301      	movs	r3, #1
 80066fe:	e007      	b.n	8006710 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	695b      	ldr	r3, [r3, #20]
 8006706:	f003 0304 	and.w	r3, r3, #4
 800670a:	2b04      	cmp	r3, #4
 800670c:	d1ca      	bne.n	80066a4 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800670e:	2300      	movs	r3, #0
}
 8006710:	4618      	mov	r0, r3
 8006712:	3710      	adds	r7, #16
 8006714:	46bd      	mov	sp, r7
 8006716:	bd80      	pop	{r7, pc}

08006718 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006718:	b580      	push	{r7, lr}
 800671a:	b084      	sub	sp, #16
 800671c:	af00      	add	r7, sp, #0
 800671e:	60f8      	str	r0, [r7, #12]
 8006720:	60b9      	str	r1, [r7, #8]
 8006722:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006724:	e042      	b.n	80067ac <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	695b      	ldr	r3, [r3, #20]
 800672c:	f003 0310 	and.w	r3, r3, #16
 8006730:	2b10      	cmp	r3, #16
 8006732:	d119      	bne.n	8006768 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	f06f 0210 	mvn.w	r2, #16
 800673c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	2200      	movs	r2, #0
 8006742:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	2220      	movs	r2, #32
 8006748:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	2200      	movs	r2, #0
 8006750:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	2200      	movs	r2, #0
 8006760:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006764:	2301      	movs	r3, #1
 8006766:	e029      	b.n	80067bc <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006768:	f7fd ff46 	bl	80045f8 <HAL_GetTick>
 800676c:	4602      	mov	r2, r0
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	1ad3      	subs	r3, r2, r3
 8006772:	68ba      	ldr	r2, [r7, #8]
 8006774:	429a      	cmp	r2, r3
 8006776:	d302      	bcc.n	800677e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8006778:	68bb      	ldr	r3, [r7, #8]
 800677a:	2b00      	cmp	r3, #0
 800677c:	d116      	bne.n	80067ac <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	2200      	movs	r2, #0
 8006782:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	2220      	movs	r2, #32
 8006788:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	2200      	movs	r2, #0
 8006790:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006798:	f043 0220 	orr.w	r2, r3, #32
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	2200      	movs	r2, #0
 80067a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80067a8:	2301      	movs	r3, #1
 80067aa:	e007      	b.n	80067bc <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	695b      	ldr	r3, [r3, #20]
 80067b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067b6:	2b40      	cmp	r3, #64	; 0x40
 80067b8:	d1b5      	bne.n	8006726 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80067ba:	2300      	movs	r3, #0
}
 80067bc:	4618      	mov	r0, r3
 80067be:	3710      	adds	r7, #16
 80067c0:	46bd      	mov	sp, r7
 80067c2:	bd80      	pop	{r7, pc}

080067c4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80067c4:	b480      	push	{r7}
 80067c6:	b083      	sub	sp, #12
 80067c8:	af00      	add	r7, sp, #0
 80067ca:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	695b      	ldr	r3, [r3, #20]
 80067d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80067d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80067da:	d11b      	bne.n	8006814 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80067e4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	2200      	movs	r2, #0
 80067ea:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	2220      	movs	r2, #32
 80067f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	2200      	movs	r2, #0
 80067f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006800:	f043 0204 	orr.w	r2, r3, #4
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	2200      	movs	r2, #0
 800680c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8006810:	2301      	movs	r3, #1
 8006812:	e000      	b.n	8006816 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8006814:	2300      	movs	r3, #0
}
 8006816:	4618      	mov	r0, r3
 8006818:	370c      	adds	r7, #12
 800681a:	46bd      	mov	sp, r7
 800681c:	bc80      	pop	{r7}
 800681e:	4770      	bx	lr

08006820 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8006820:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006822:	b08f      	sub	sp, #60	; 0x3c
 8006824:	af0a      	add	r7, sp, #40	; 0x28
 8006826:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	2b00      	cmp	r3, #0
 800682c:	d101      	bne.n	8006832 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800682e:	2301      	movs	r3, #1
 8006830:	e10f      	b.n	8006a52 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 800683e:	b2db      	uxtb	r3, r3
 8006840:	2b00      	cmp	r3, #0
 8006842:	d106      	bne.n	8006852 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	2200      	movs	r2, #0
 8006848:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800684c:	6878      	ldr	r0, [r7, #4]
 800684e:	f005 fdd3 	bl	800c3f8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	2203      	movs	r2, #3
 8006856:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800685a:	68bb      	ldr	r3, [r7, #8]
 800685c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800685e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006862:	2b00      	cmp	r3, #0
 8006864:	d102      	bne.n	800686c <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	2200      	movs	r2, #0
 800686a:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	4618      	mov	r0, r3
 8006872:	f002 fdc3 	bl	80093fc <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	603b      	str	r3, [r7, #0]
 800687c:	687e      	ldr	r6, [r7, #4]
 800687e:	466d      	mov	r5, sp
 8006880:	f106 0410 	add.w	r4, r6, #16
 8006884:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006886:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006888:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800688a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800688c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8006890:	e885 0003 	stmia.w	r5, {r0, r1}
 8006894:	1d33      	adds	r3, r6, #4
 8006896:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006898:	6838      	ldr	r0, [r7, #0]
 800689a:	f002 fca5 	bl	80091e8 <USB_CoreInit>
 800689e:	4603      	mov	r3, r0
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d005      	beq.n	80068b0 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	2202      	movs	r2, #2
 80068a8:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80068ac:	2301      	movs	r3, #1
 80068ae:	e0d0      	b.n	8006a52 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	2100      	movs	r1, #0
 80068b6:	4618      	mov	r0, r3
 80068b8:	f002 fdb0 	bl	800941c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80068bc:	2300      	movs	r3, #0
 80068be:	73fb      	strb	r3, [r7, #15]
 80068c0:	e04a      	b.n	8006958 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80068c2:	7bfa      	ldrb	r2, [r7, #15]
 80068c4:	6879      	ldr	r1, [r7, #4]
 80068c6:	4613      	mov	r3, r2
 80068c8:	00db      	lsls	r3, r3, #3
 80068ca:	1a9b      	subs	r3, r3, r2
 80068cc:	009b      	lsls	r3, r3, #2
 80068ce:	440b      	add	r3, r1
 80068d0:	333d      	adds	r3, #61	; 0x3d
 80068d2:	2201      	movs	r2, #1
 80068d4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80068d6:	7bfa      	ldrb	r2, [r7, #15]
 80068d8:	6879      	ldr	r1, [r7, #4]
 80068da:	4613      	mov	r3, r2
 80068dc:	00db      	lsls	r3, r3, #3
 80068de:	1a9b      	subs	r3, r3, r2
 80068e0:	009b      	lsls	r3, r3, #2
 80068e2:	440b      	add	r3, r1
 80068e4:	333c      	adds	r3, #60	; 0x3c
 80068e6:	7bfa      	ldrb	r2, [r7, #15]
 80068e8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80068ea:	7bfa      	ldrb	r2, [r7, #15]
 80068ec:	7bfb      	ldrb	r3, [r7, #15]
 80068ee:	b298      	uxth	r0, r3
 80068f0:	6879      	ldr	r1, [r7, #4]
 80068f2:	4613      	mov	r3, r2
 80068f4:	00db      	lsls	r3, r3, #3
 80068f6:	1a9b      	subs	r3, r3, r2
 80068f8:	009b      	lsls	r3, r3, #2
 80068fa:	440b      	add	r3, r1
 80068fc:	3342      	adds	r3, #66	; 0x42
 80068fe:	4602      	mov	r2, r0
 8006900:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8006902:	7bfa      	ldrb	r2, [r7, #15]
 8006904:	6879      	ldr	r1, [r7, #4]
 8006906:	4613      	mov	r3, r2
 8006908:	00db      	lsls	r3, r3, #3
 800690a:	1a9b      	subs	r3, r3, r2
 800690c:	009b      	lsls	r3, r3, #2
 800690e:	440b      	add	r3, r1
 8006910:	333f      	adds	r3, #63	; 0x3f
 8006912:	2200      	movs	r2, #0
 8006914:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8006916:	7bfa      	ldrb	r2, [r7, #15]
 8006918:	6879      	ldr	r1, [r7, #4]
 800691a:	4613      	mov	r3, r2
 800691c:	00db      	lsls	r3, r3, #3
 800691e:	1a9b      	subs	r3, r3, r2
 8006920:	009b      	lsls	r3, r3, #2
 8006922:	440b      	add	r3, r1
 8006924:	3344      	adds	r3, #68	; 0x44
 8006926:	2200      	movs	r2, #0
 8006928:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800692a:	7bfa      	ldrb	r2, [r7, #15]
 800692c:	6879      	ldr	r1, [r7, #4]
 800692e:	4613      	mov	r3, r2
 8006930:	00db      	lsls	r3, r3, #3
 8006932:	1a9b      	subs	r3, r3, r2
 8006934:	009b      	lsls	r3, r3, #2
 8006936:	440b      	add	r3, r1
 8006938:	3348      	adds	r3, #72	; 0x48
 800693a:	2200      	movs	r2, #0
 800693c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800693e:	7bfa      	ldrb	r2, [r7, #15]
 8006940:	6879      	ldr	r1, [r7, #4]
 8006942:	4613      	mov	r3, r2
 8006944:	00db      	lsls	r3, r3, #3
 8006946:	1a9b      	subs	r3, r3, r2
 8006948:	009b      	lsls	r3, r3, #2
 800694a:	440b      	add	r3, r1
 800694c:	3350      	adds	r3, #80	; 0x50
 800694e:	2200      	movs	r2, #0
 8006950:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006952:	7bfb      	ldrb	r3, [r7, #15]
 8006954:	3301      	adds	r3, #1
 8006956:	73fb      	strb	r3, [r7, #15]
 8006958:	7bfa      	ldrb	r2, [r7, #15]
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	685b      	ldr	r3, [r3, #4]
 800695e:	429a      	cmp	r2, r3
 8006960:	d3af      	bcc.n	80068c2 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006962:	2300      	movs	r3, #0
 8006964:	73fb      	strb	r3, [r7, #15]
 8006966:	e044      	b.n	80069f2 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8006968:	7bfa      	ldrb	r2, [r7, #15]
 800696a:	6879      	ldr	r1, [r7, #4]
 800696c:	4613      	mov	r3, r2
 800696e:	00db      	lsls	r3, r3, #3
 8006970:	1a9b      	subs	r3, r3, r2
 8006972:	009b      	lsls	r3, r3, #2
 8006974:	440b      	add	r3, r1
 8006976:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 800697a:	2200      	movs	r2, #0
 800697c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800697e:	7bfa      	ldrb	r2, [r7, #15]
 8006980:	6879      	ldr	r1, [r7, #4]
 8006982:	4613      	mov	r3, r2
 8006984:	00db      	lsls	r3, r3, #3
 8006986:	1a9b      	subs	r3, r3, r2
 8006988:	009b      	lsls	r3, r3, #2
 800698a:	440b      	add	r3, r1
 800698c:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8006990:	7bfa      	ldrb	r2, [r7, #15]
 8006992:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8006994:	7bfa      	ldrb	r2, [r7, #15]
 8006996:	6879      	ldr	r1, [r7, #4]
 8006998:	4613      	mov	r3, r2
 800699a:	00db      	lsls	r3, r3, #3
 800699c:	1a9b      	subs	r3, r3, r2
 800699e:	009b      	lsls	r3, r3, #2
 80069a0:	440b      	add	r3, r1
 80069a2:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80069a6:	2200      	movs	r2, #0
 80069a8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80069aa:	7bfa      	ldrb	r2, [r7, #15]
 80069ac:	6879      	ldr	r1, [r7, #4]
 80069ae:	4613      	mov	r3, r2
 80069b0:	00db      	lsls	r3, r3, #3
 80069b2:	1a9b      	subs	r3, r3, r2
 80069b4:	009b      	lsls	r3, r3, #2
 80069b6:	440b      	add	r3, r1
 80069b8:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80069bc:	2200      	movs	r2, #0
 80069be:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80069c0:	7bfa      	ldrb	r2, [r7, #15]
 80069c2:	6879      	ldr	r1, [r7, #4]
 80069c4:	4613      	mov	r3, r2
 80069c6:	00db      	lsls	r3, r3, #3
 80069c8:	1a9b      	subs	r3, r3, r2
 80069ca:	009b      	lsls	r3, r3, #2
 80069cc:	440b      	add	r3, r1
 80069ce:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80069d2:	2200      	movs	r2, #0
 80069d4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80069d6:	7bfa      	ldrb	r2, [r7, #15]
 80069d8:	6879      	ldr	r1, [r7, #4]
 80069da:	4613      	mov	r3, r2
 80069dc:	00db      	lsls	r3, r3, #3
 80069de:	1a9b      	subs	r3, r3, r2
 80069e0:	009b      	lsls	r3, r3, #2
 80069e2:	440b      	add	r3, r1
 80069e4:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80069e8:	2200      	movs	r2, #0
 80069ea:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80069ec:	7bfb      	ldrb	r3, [r7, #15]
 80069ee:	3301      	adds	r3, #1
 80069f0:	73fb      	strb	r3, [r7, #15]
 80069f2:	7bfa      	ldrb	r2, [r7, #15]
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	685b      	ldr	r3, [r3, #4]
 80069f8:	429a      	cmp	r2, r3
 80069fa:	d3b5      	bcc.n	8006968 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	603b      	str	r3, [r7, #0]
 8006a02:	687e      	ldr	r6, [r7, #4]
 8006a04:	466d      	mov	r5, sp
 8006a06:	f106 0410 	add.w	r4, r6, #16
 8006a0a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006a0c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006a0e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006a10:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006a12:	e894 0003 	ldmia.w	r4, {r0, r1}
 8006a16:	e885 0003 	stmia.w	r5, {r0, r1}
 8006a1a:	1d33      	adds	r3, r6, #4
 8006a1c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006a1e:	6838      	ldr	r0, [r7, #0]
 8006a20:	f002 fd48 	bl	80094b4 <USB_DevInit>
 8006a24:	4603      	mov	r3, r0
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d005      	beq.n	8006a36 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	2202      	movs	r2, #2
 8006a2e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8006a32:	2301      	movs	r3, #1
 8006a34:	e00d      	b.n	8006a52 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	2200      	movs	r2, #0
 8006a3a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	2201      	movs	r2, #1
 8006a42:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  (void)USB_DevDisconnect(hpcd->Instance);
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	4618      	mov	r0, r3
 8006a4c:	f003 fdb9 	bl	800a5c2 <USB_DevDisconnect>

  return HAL_OK;
 8006a50:	2300      	movs	r3, #0
}
 8006a52:	4618      	mov	r0, r3
 8006a54:	3714      	adds	r7, #20
 8006a56:	46bd      	mov	sp, r7
 8006a58:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006a5a <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8006a5a:	b580      	push	{r7, lr}
 8006a5c:	b082      	sub	sp, #8
 8006a5e:	af00      	add	r7, sp, #0
 8006a60:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8006a68:	2b01      	cmp	r3, #1
 8006a6a:	d101      	bne.n	8006a70 <HAL_PCD_Start+0x16>
 8006a6c:	2302      	movs	r3, #2
 8006a6e:	e012      	b.n	8006a96 <HAL_PCD_Start+0x3c>
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	2201      	movs	r2, #1
 8006a74:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  __HAL_PCD_ENABLE(hpcd);
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	4618      	mov	r0, r3
 8006a7e:	f002 fcad 	bl	80093dc <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	4618      	mov	r0, r3
 8006a88:	f003 fd7b 	bl	800a582 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	2200      	movs	r2, #0
 8006a90:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8006a94:	2300      	movs	r3, #0
}
 8006a96:	4618      	mov	r0, r3
 8006a98:	3708      	adds	r7, #8
 8006a9a:	46bd      	mov	sp, r7
 8006a9c:	bd80      	pop	{r7, pc}

08006a9e <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8006a9e:	b590      	push	{r4, r7, lr}
 8006aa0:	b08d      	sub	sp, #52	; 0x34
 8006aa2:	af00      	add	r7, sp, #0
 8006aa4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006aac:	6a3b      	ldr	r3, [r7, #32]
 8006aae:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t temp;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	4618      	mov	r0, r3
 8006ab6:	f003 fe32 	bl	800a71e <USB_GetMode>
 8006aba:	4603      	mov	r3, r0
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	f040 838f 	bne.w	80071e0 <HAL_PCD_IRQHandler+0x742>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	4618      	mov	r0, r3
 8006ac8:	f003 fd9b 	bl	800a602 <USB_ReadInterrupts>
 8006acc:	4603      	mov	r3, r0
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	f000 8385 	beq.w	80071de <HAL_PCD_IRQHandler+0x740>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	4618      	mov	r0, r3
 8006ada:	f003 fd92 	bl	800a602 <USB_ReadInterrupts>
 8006ade:	4603      	mov	r3, r0
 8006ae0:	f003 0302 	and.w	r3, r3, #2
 8006ae4:	2b02      	cmp	r3, #2
 8006ae6:	d107      	bne.n	8006af8 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	695a      	ldr	r2, [r3, #20]
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	f002 0202 	and.w	r2, r2, #2
 8006af6:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	4618      	mov	r0, r3
 8006afe:	f003 fd80 	bl	800a602 <USB_ReadInterrupts>
 8006b02:	4603      	mov	r3, r0
 8006b04:	f003 0310 	and.w	r3, r3, #16
 8006b08:	2b10      	cmp	r3, #16
 8006b0a:	d161      	bne.n	8006bd0 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	699a      	ldr	r2, [r3, #24]
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	f022 0210 	bic.w	r2, r2, #16
 8006b1a:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8006b1c:	6a3b      	ldr	r3, [r7, #32]
 8006b1e:	6a1b      	ldr	r3, [r3, #32]
 8006b20:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8006b22:	69bb      	ldr	r3, [r7, #24]
 8006b24:	f003 020f 	and.w	r2, r3, #15
 8006b28:	4613      	mov	r3, r2
 8006b2a:	00db      	lsls	r3, r3, #3
 8006b2c:	1a9b      	subs	r3, r3, r2
 8006b2e:	009b      	lsls	r3, r3, #2
 8006b30:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8006b34:	687a      	ldr	r2, [r7, #4]
 8006b36:	4413      	add	r3, r2
 8006b38:	3304      	adds	r3, #4
 8006b3a:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8006b3c:	69bb      	ldr	r3, [r7, #24]
 8006b3e:	0c5b      	lsrs	r3, r3, #17
 8006b40:	f003 030f 	and.w	r3, r3, #15
 8006b44:	2b02      	cmp	r3, #2
 8006b46:	d124      	bne.n	8006b92 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8006b48:	69ba      	ldr	r2, [r7, #24]
 8006b4a:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8006b4e:	4013      	ands	r3, r2
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d035      	beq.n	8006bc0 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8006b54:	697b      	ldr	r3, [r7, #20]
 8006b56:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8006b58:	69bb      	ldr	r3, [r7, #24]
 8006b5a:	091b      	lsrs	r3, r3, #4
 8006b5c:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8006b5e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006b62:	b29b      	uxth	r3, r3
 8006b64:	461a      	mov	r2, r3
 8006b66:	6a38      	ldr	r0, [r7, #32]
 8006b68:	f003 fbbd 	bl	800a2e6 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006b6c:	697b      	ldr	r3, [r7, #20]
 8006b6e:	68da      	ldr	r2, [r3, #12]
 8006b70:	69bb      	ldr	r3, [r7, #24]
 8006b72:	091b      	lsrs	r3, r3, #4
 8006b74:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006b78:	441a      	add	r2, r3
 8006b7a:	697b      	ldr	r3, [r7, #20]
 8006b7c:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006b7e:	697b      	ldr	r3, [r7, #20]
 8006b80:	699a      	ldr	r2, [r3, #24]
 8006b82:	69bb      	ldr	r3, [r7, #24]
 8006b84:	091b      	lsrs	r3, r3, #4
 8006b86:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006b8a:	441a      	add	r2, r3
 8006b8c:	697b      	ldr	r3, [r7, #20]
 8006b8e:	619a      	str	r2, [r3, #24]
 8006b90:	e016      	b.n	8006bc0 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8006b92:	69bb      	ldr	r3, [r7, #24]
 8006b94:	0c5b      	lsrs	r3, r3, #17
 8006b96:	f003 030f 	and.w	r3, r3, #15
 8006b9a:	2b06      	cmp	r3, #6
 8006b9c:	d110      	bne.n	8006bc0 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8006ba4:	2208      	movs	r2, #8
 8006ba6:	4619      	mov	r1, r3
 8006ba8:	6a38      	ldr	r0, [r7, #32]
 8006baa:	f003 fb9c 	bl	800a2e6 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006bae:	697b      	ldr	r3, [r7, #20]
 8006bb0:	699a      	ldr	r2, [r3, #24]
 8006bb2:	69bb      	ldr	r3, [r7, #24]
 8006bb4:	091b      	lsrs	r3, r3, #4
 8006bb6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006bba:	441a      	add	r2, r3
 8006bbc:	697b      	ldr	r3, [r7, #20]
 8006bbe:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	699a      	ldr	r2, [r3, #24]
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	f042 0210 	orr.w	r2, r2, #16
 8006bce:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	4618      	mov	r0, r3
 8006bd6:	f003 fd14 	bl	800a602 <USB_ReadInterrupts>
 8006bda:	4603      	mov	r3, r0
 8006bdc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006be0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006be4:	d16e      	bne.n	8006cc4 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8006be6:	2300      	movs	r3, #0
 8006be8:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	4618      	mov	r0, r3
 8006bf0:	f003 fd19 	bl	800a626 <USB_ReadDevAllOutEpInterrupt>
 8006bf4:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8006bf6:	e062      	b.n	8006cbe <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8006bf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bfa:	f003 0301 	and.w	r3, r3, #1
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d057      	beq.n	8006cb2 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006c08:	b2d2      	uxtb	r2, r2
 8006c0a:	4611      	mov	r1, r2
 8006c0c:	4618      	mov	r0, r3
 8006c0e:	f003 fd3c 	bl	800a68a <USB_ReadDevOutEPInterrupt>
 8006c12:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8006c14:	693b      	ldr	r3, [r7, #16]
 8006c16:	f003 0301 	and.w	r3, r3, #1
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d00c      	beq.n	8006c38 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8006c1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c20:	015a      	lsls	r2, r3, #5
 8006c22:	69fb      	ldr	r3, [r7, #28]
 8006c24:	4413      	add	r3, r2
 8006c26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c2a:	461a      	mov	r2, r3
 8006c2c:	2301      	movs	r3, #1
 8006c2e:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8006c30:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006c32:	6878      	ldr	r0, [r7, #4]
 8006c34:	f000 fda2 	bl	800777c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8006c38:	693b      	ldr	r3, [r7, #16]
 8006c3a:	f003 0308 	and.w	r3, r3, #8
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d00c      	beq.n	8006c5c <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8006c42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c44:	015a      	lsls	r2, r3, #5
 8006c46:	69fb      	ldr	r3, [r7, #28]
 8006c48:	4413      	add	r3, r2
 8006c4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c4e:	461a      	mov	r2, r3
 8006c50:	2308      	movs	r3, #8
 8006c52:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8006c54:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006c56:	6878      	ldr	r0, [r7, #4]
 8006c58:	f000 fe9c 	bl	8007994 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8006c5c:	693b      	ldr	r3, [r7, #16]
 8006c5e:	f003 0310 	and.w	r3, r3, #16
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d008      	beq.n	8006c78 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8006c66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c68:	015a      	lsls	r2, r3, #5
 8006c6a:	69fb      	ldr	r3, [r7, #28]
 8006c6c:	4413      	add	r3, r2
 8006c6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c72:	461a      	mov	r2, r3
 8006c74:	2310      	movs	r3, #16
 8006c76:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8006c78:	693b      	ldr	r3, [r7, #16]
 8006c7a:	f003 0320 	and.w	r3, r3, #32
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d008      	beq.n	8006c94 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8006c82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c84:	015a      	lsls	r2, r3, #5
 8006c86:	69fb      	ldr	r3, [r7, #28]
 8006c88:	4413      	add	r3, r2
 8006c8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c8e:	461a      	mov	r2, r3
 8006c90:	2320      	movs	r3, #32
 8006c92:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8006c94:	693b      	ldr	r3, [r7, #16]
 8006c96:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d009      	beq.n	8006cb2 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8006c9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ca0:	015a      	lsls	r2, r3, #5
 8006ca2:	69fb      	ldr	r3, [r7, #28]
 8006ca4:	4413      	add	r3, r2
 8006ca6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006caa:	461a      	mov	r2, r3
 8006cac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006cb0:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8006cb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cb4:	3301      	adds	r3, #1
 8006cb6:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8006cb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cba:	085b      	lsrs	r3, r3, #1
 8006cbc:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8006cbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d199      	bne.n	8006bf8 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	4618      	mov	r0, r3
 8006cca:	f003 fc9a 	bl	800a602 <USB_ReadInterrupts>
 8006cce:	4603      	mov	r3, r0
 8006cd0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006cd4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006cd8:	f040 80c0 	bne.w	8006e5c <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	4618      	mov	r0, r3
 8006ce2:	f003 fcb9 	bl	800a658 <USB_ReadDevAllInEpInterrupt>
 8006ce6:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8006ce8:	2300      	movs	r3, #0
 8006cea:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8006cec:	e0b2      	b.n	8006e54 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8006cee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cf0:	f003 0301 	and.w	r3, r3, #1
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	f000 80a7 	beq.w	8006e48 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006d00:	b2d2      	uxtb	r2, r2
 8006d02:	4611      	mov	r1, r2
 8006d04:	4618      	mov	r0, r3
 8006d06:	f003 fcdd 	bl	800a6c4 <USB_ReadDevInEPInterrupt>
 8006d0a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8006d0c:	693b      	ldr	r3, [r7, #16]
 8006d0e:	f003 0301 	and.w	r3, r3, #1
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d057      	beq.n	8006dc6 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8006d16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d18:	f003 030f 	and.w	r3, r3, #15
 8006d1c:	2201      	movs	r2, #1
 8006d1e:	fa02 f303 	lsl.w	r3, r2, r3
 8006d22:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8006d24:	69fb      	ldr	r3, [r7, #28]
 8006d26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d2a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	43db      	mvns	r3, r3
 8006d30:	69f9      	ldr	r1, [r7, #28]
 8006d32:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006d36:	4013      	ands	r3, r2
 8006d38:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8006d3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d3c:	015a      	lsls	r2, r3, #5
 8006d3e:	69fb      	ldr	r3, [r7, #28]
 8006d40:	4413      	add	r3, r2
 8006d42:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d46:	461a      	mov	r2, r3
 8006d48:	2301      	movs	r3, #1
 8006d4a:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	691b      	ldr	r3, [r3, #16]
 8006d50:	2b01      	cmp	r3, #1
 8006d52:	d132      	bne.n	8006dba <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8006d54:	6879      	ldr	r1, [r7, #4]
 8006d56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006d58:	4613      	mov	r3, r2
 8006d5a:	00db      	lsls	r3, r3, #3
 8006d5c:	1a9b      	subs	r3, r3, r2
 8006d5e:	009b      	lsls	r3, r3, #2
 8006d60:	440b      	add	r3, r1
 8006d62:	3348      	adds	r3, #72	; 0x48
 8006d64:	6819      	ldr	r1, [r3, #0]
 8006d66:	6878      	ldr	r0, [r7, #4]
 8006d68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006d6a:	4613      	mov	r3, r2
 8006d6c:	00db      	lsls	r3, r3, #3
 8006d6e:	1a9b      	subs	r3, r3, r2
 8006d70:	009b      	lsls	r3, r3, #2
 8006d72:	4403      	add	r3, r0
 8006d74:	3344      	adds	r3, #68	; 0x44
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	4419      	add	r1, r3
 8006d7a:	6878      	ldr	r0, [r7, #4]
 8006d7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006d7e:	4613      	mov	r3, r2
 8006d80:	00db      	lsls	r3, r3, #3
 8006d82:	1a9b      	subs	r3, r3, r2
 8006d84:	009b      	lsls	r3, r3, #2
 8006d86:	4403      	add	r3, r0
 8006d88:	3348      	adds	r3, #72	; 0x48
 8006d8a:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8006d8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d113      	bne.n	8006dba <HAL_PCD_IRQHandler+0x31c>
 8006d92:	6879      	ldr	r1, [r7, #4]
 8006d94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006d96:	4613      	mov	r3, r2
 8006d98:	00db      	lsls	r3, r3, #3
 8006d9a:	1a9b      	subs	r3, r3, r2
 8006d9c:	009b      	lsls	r3, r3, #2
 8006d9e:	440b      	add	r3, r1
 8006da0:	3350      	adds	r3, #80	; 0x50
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d108      	bne.n	8006dba <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	6818      	ldr	r0, [r3, #0]
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8006db2:	461a      	mov	r2, r3
 8006db4:	2101      	movs	r1, #1
 8006db6:	f003 fce1 	bl	800a77c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8006dba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dbc:	b2db      	uxtb	r3, r3
 8006dbe:	4619      	mov	r1, r3
 8006dc0:	6878      	ldr	r0, [r7, #4]
 8006dc2:	f005 fb9a 	bl	800c4fa <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8006dc6:	693b      	ldr	r3, [r7, #16]
 8006dc8:	f003 0308 	and.w	r3, r3, #8
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d008      	beq.n	8006de2 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8006dd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dd2:	015a      	lsls	r2, r3, #5
 8006dd4:	69fb      	ldr	r3, [r7, #28]
 8006dd6:	4413      	add	r3, r2
 8006dd8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ddc:	461a      	mov	r2, r3
 8006dde:	2308      	movs	r3, #8
 8006de0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8006de2:	693b      	ldr	r3, [r7, #16]
 8006de4:	f003 0310 	and.w	r3, r3, #16
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d008      	beq.n	8006dfe <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8006dec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dee:	015a      	lsls	r2, r3, #5
 8006df0:	69fb      	ldr	r3, [r7, #28]
 8006df2:	4413      	add	r3, r2
 8006df4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006df8:	461a      	mov	r2, r3
 8006dfa:	2310      	movs	r3, #16
 8006dfc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8006dfe:	693b      	ldr	r3, [r7, #16]
 8006e00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d008      	beq.n	8006e1a <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8006e08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e0a:	015a      	lsls	r2, r3, #5
 8006e0c:	69fb      	ldr	r3, [r7, #28]
 8006e0e:	4413      	add	r3, r2
 8006e10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e14:	461a      	mov	r2, r3
 8006e16:	2340      	movs	r3, #64	; 0x40
 8006e18:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8006e1a:	693b      	ldr	r3, [r7, #16]
 8006e1c:	f003 0302 	and.w	r3, r3, #2
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d008      	beq.n	8006e36 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8006e24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e26:	015a      	lsls	r2, r3, #5
 8006e28:	69fb      	ldr	r3, [r7, #28]
 8006e2a:	4413      	add	r3, r2
 8006e2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e30:	461a      	mov	r2, r3
 8006e32:	2302      	movs	r3, #2
 8006e34:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8006e36:	693b      	ldr	r3, [r7, #16]
 8006e38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d003      	beq.n	8006e48 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8006e40:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006e42:	6878      	ldr	r0, [r7, #4]
 8006e44:	f000 fc0c 	bl	8007660 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8006e48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e4a:	3301      	adds	r3, #1
 8006e4c:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8006e4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e50:	085b      	lsrs	r3, r3, #1
 8006e52:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8006e54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	f47f af49 	bne.w	8006cee <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	4618      	mov	r0, r3
 8006e62:	f003 fbce 	bl	800a602 <USB_ReadInterrupts>
 8006e66:	4603      	mov	r3, r0
 8006e68:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006e6c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006e70:	d114      	bne.n	8006e9c <HAL_PCD_IRQHandler+0x3fe>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8006e72:	69fb      	ldr	r3, [r7, #28]
 8006e74:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e78:	685b      	ldr	r3, [r3, #4]
 8006e7a:	69fa      	ldr	r2, [r7, #28]
 8006e7c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006e80:	f023 0301 	bic.w	r3, r3, #1
 8006e84:	6053      	str	r3, [r2, #4]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResumeCallback(hpcd);
#else
      HAL_PCD_ResumeCallback(hpcd);
 8006e86:	6878      	ldr	r0, [r7, #4]
 8006e88:	f005 fbae 	bl	800c5e8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	695a      	ldr	r2, [r3, #20]
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8006e9a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	4618      	mov	r0, r3
 8006ea2:	f003 fbae 	bl	800a602 <USB_ReadInterrupts>
 8006ea6:	4603      	mov	r3, r0
 8006ea8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006eac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006eb0:	d112      	bne.n	8006ed8 <HAL_PCD_IRQHandler+0x43a>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8006eb2:	69fb      	ldr	r3, [r7, #28]
 8006eb4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006eb8:	689b      	ldr	r3, [r3, #8]
 8006eba:	f003 0301 	and.w	r3, r3, #1
 8006ebe:	2b01      	cmp	r3, #1
 8006ec0:	d102      	bne.n	8006ec8 <HAL_PCD_IRQHandler+0x42a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8006ec2:	6878      	ldr	r0, [r7, #4]
 8006ec4:	f005 fb6a 	bl	800c59c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	695a      	ldr	r2, [r3, #20]
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8006ed6:	615a      	str	r2, [r3, #20]
    }
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	4618      	mov	r0, r3
 8006ede:	f003 fb90 	bl	800a602 <USB_ReadInterrupts>
 8006ee2:	4603      	mov	r3, r0
 8006ee4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006ee8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006eec:	f040 80c7 	bne.w	800707e <HAL_PCD_IRQHandler+0x5e0>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8006ef0:	69fb      	ldr	r3, [r7, #28]
 8006ef2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ef6:	685b      	ldr	r3, [r3, #4]
 8006ef8:	69fa      	ldr	r2, [r7, #28]
 8006efa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006efe:	f023 0301 	bic.w	r3, r3, #1
 8006f02:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	2110      	movs	r1, #16
 8006f0a:	4618      	mov	r0, r3
 8006f0c:	f002 fc36 	bl	800977c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006f10:	2300      	movs	r3, #0
 8006f12:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006f14:	e056      	b.n	8006fc4 <HAL_PCD_IRQHandler+0x526>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8006f16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f18:	015a      	lsls	r2, r3, #5
 8006f1a:	69fb      	ldr	r3, [r7, #28]
 8006f1c:	4413      	add	r3, r2
 8006f1e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f22:	461a      	mov	r2, r3
 8006f24:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006f28:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006f2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f2c:	015a      	lsls	r2, r3, #5
 8006f2e:	69fb      	ldr	r3, [r7, #28]
 8006f30:	4413      	add	r3, r2
 8006f32:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006f3a:	0151      	lsls	r1, r2, #5
 8006f3c:	69fa      	ldr	r2, [r7, #28]
 8006f3e:	440a      	add	r2, r1
 8006f40:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006f44:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006f48:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8006f4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f4c:	015a      	lsls	r2, r3, #5
 8006f4e:	69fb      	ldr	r3, [r7, #28]
 8006f50:	4413      	add	r3, r2
 8006f52:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006f5a:	0151      	lsls	r1, r2, #5
 8006f5c:	69fa      	ldr	r2, [r7, #28]
 8006f5e:	440a      	add	r2, r1
 8006f60:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006f64:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006f68:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8006f6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f6c:	015a      	lsls	r2, r3, #5
 8006f6e:	69fb      	ldr	r3, [r7, #28]
 8006f70:	4413      	add	r3, r2
 8006f72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f76:	461a      	mov	r2, r3
 8006f78:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006f7c:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8006f7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f80:	015a      	lsls	r2, r3, #5
 8006f82:	69fb      	ldr	r3, [r7, #28]
 8006f84:	4413      	add	r3, r2
 8006f86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006f8e:	0151      	lsls	r1, r2, #5
 8006f90:	69fa      	ldr	r2, [r7, #28]
 8006f92:	440a      	add	r2, r1
 8006f94:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006f98:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006f9c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8006f9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fa0:	015a      	lsls	r2, r3, #5
 8006fa2:	69fb      	ldr	r3, [r7, #28]
 8006fa4:	4413      	add	r3, r2
 8006fa6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006fae:	0151      	lsls	r1, r2, #5
 8006fb0:	69fa      	ldr	r2, [r7, #28]
 8006fb2:	440a      	add	r2, r1
 8006fb4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006fb8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006fbc:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006fbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fc0:	3301      	adds	r3, #1
 8006fc2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	685b      	ldr	r3, [r3, #4]
 8006fc8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006fca:	429a      	cmp	r2, r3
 8006fcc:	d3a3      	bcc.n	8006f16 <HAL_PCD_IRQHandler+0x478>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8006fce:	69fb      	ldr	r3, [r7, #28]
 8006fd0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006fd4:	69db      	ldr	r3, [r3, #28]
 8006fd6:	69fa      	ldr	r2, [r7, #28]
 8006fd8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006fdc:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8006fe0:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d016      	beq.n	8007018 <HAL_PCD_IRQHandler+0x57a>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8006fea:	69fb      	ldr	r3, [r7, #28]
 8006fec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ff0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006ff4:	69fa      	ldr	r2, [r7, #28]
 8006ff6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006ffa:	f043 030b 	orr.w	r3, r3, #11
 8006ffe:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8007002:	69fb      	ldr	r3, [r7, #28]
 8007004:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007008:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800700a:	69fa      	ldr	r2, [r7, #28]
 800700c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007010:	f043 030b 	orr.w	r3, r3, #11
 8007014:	6453      	str	r3, [r2, #68]	; 0x44
 8007016:	e015      	b.n	8007044 <HAL_PCD_IRQHandler+0x5a6>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8007018:	69fb      	ldr	r3, [r7, #28]
 800701a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800701e:	695b      	ldr	r3, [r3, #20]
 8007020:	69fa      	ldr	r2, [r7, #28]
 8007022:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007026:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800702a:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800702e:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8007030:	69fb      	ldr	r3, [r7, #28]
 8007032:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007036:	691b      	ldr	r3, [r3, #16]
 8007038:	69fa      	ldr	r2, [r7, #28]
 800703a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800703e:	f043 030b 	orr.w	r3, r3, #11
 8007042:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8007044:	69fb      	ldr	r3, [r7, #28]
 8007046:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	69fa      	ldr	r2, [r7, #28]
 800704e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007052:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8007056:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	6818      	ldr	r0, [r3, #0]
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	691b      	ldr	r3, [r3, #16]
 8007060:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8007068:	461a      	mov	r2, r3
 800706a:	f003 fb87 	bl	800a77c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	695a      	ldr	r2, [r3, #20]
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800707c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	4618      	mov	r0, r3
 8007084:	f003 fabd 	bl	800a602 <USB_ReadInterrupts>
 8007088:	4603      	mov	r3, r0
 800708a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800708e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007092:	d124      	bne.n	80070de <HAL_PCD_IRQHandler+0x640>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	4618      	mov	r0, r3
 800709a:	f003 fb4d 	bl	800a738 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	4618      	mov	r0, r3
 80070a4:	f002 fbc6 	bl	8009834 <USB_GetDevSpeed>
 80070a8:	4603      	mov	r3, r0
 80070aa:	461a      	mov	r2, r3
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	681c      	ldr	r4, [r3, #0]
 80070b4:	f001 f932 	bl	800831c <HAL_RCC_GetHCLKFreq>
 80070b8:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80070be:	b2db      	uxtb	r3, r3
 80070c0:	461a      	mov	r2, r3
 80070c2:	4620      	mov	r0, r4
 80070c4:	f002 f8e8 	bl	8009298 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80070c8:	6878      	ldr	r0, [r7, #4]
 80070ca:	f005 fa3e 	bl	800c54a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	695a      	ldr	r2, [r3, #20]
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80070dc:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	4618      	mov	r0, r3
 80070e4:	f003 fa8d 	bl	800a602 <USB_ReadInterrupts>
 80070e8:	4603      	mov	r3, r0
 80070ea:	f003 0308 	and.w	r3, r3, #8
 80070ee:	2b08      	cmp	r3, #8
 80070f0:	d10a      	bne.n	8007108 <HAL_PCD_IRQHandler+0x66a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80070f2:	6878      	ldr	r0, [r7, #4]
 80070f4:	f005 fa1b 	bl	800c52e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	695a      	ldr	r2, [r3, #20]
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	f002 0208 	and.w	r2, r2, #8
 8007106:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	4618      	mov	r0, r3
 800710e:	f003 fa78 	bl	800a602 <USB_ReadInterrupts>
 8007112:	4603      	mov	r3, r0
 8007114:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007118:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800711c:	d10f      	bne.n	800713e <HAL_PCD_IRQHandler+0x6a0>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800711e:	2300      	movs	r3, #0
 8007120:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8007122:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007124:	b2db      	uxtb	r3, r3
 8007126:	4619      	mov	r1, r3
 8007128:	6878      	ldr	r0, [r7, #4]
 800712a:	f005 fa7d 	bl	800c628 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	695a      	ldr	r2, [r3, #20]
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800713c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	4618      	mov	r0, r3
 8007144:	f003 fa5d 	bl	800a602 <USB_ReadInterrupts>
 8007148:	4603      	mov	r3, r0
 800714a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800714e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007152:	d10f      	bne.n	8007174 <HAL_PCD_IRQHandler+0x6d6>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8007154:	2300      	movs	r3, #0
 8007156:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8007158:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800715a:	b2db      	uxtb	r3, r3
 800715c:	4619      	mov	r1, r3
 800715e:	6878      	ldr	r0, [r7, #4]
 8007160:	f005 fa50 	bl	800c604 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	695a      	ldr	r2, [r3, #20]
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8007172:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	4618      	mov	r0, r3
 800717a:	f003 fa42 	bl	800a602 <USB_ReadInterrupts>
 800717e:	4603      	mov	r3, r0
 8007180:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007184:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007188:	d10a      	bne.n	80071a0 <HAL_PCD_IRQHandler+0x702>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800718a:	6878      	ldr	r0, [r7, #4]
 800718c:	f005 fa5e 	bl	800c64c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	695a      	ldr	r2, [r3, #20]
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800719e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	4618      	mov	r0, r3
 80071a6:	f003 fa2c 	bl	800a602 <USB_ReadInterrupts>
 80071aa:	4603      	mov	r3, r0
 80071ac:	f003 0304 	and.w	r3, r3, #4
 80071b0:	2b04      	cmp	r3, #4
 80071b2:	d115      	bne.n	80071e0 <HAL_PCD_IRQHandler+0x742>
    {
      temp = hpcd->Instance->GOTGINT;
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	685b      	ldr	r3, [r3, #4]
 80071ba:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80071bc:	69bb      	ldr	r3, [r7, #24]
 80071be:	f003 0304 	and.w	r3, r3, #4
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d002      	beq.n	80071cc <HAL_PCD_IRQHandler+0x72e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80071c6:	6878      	ldr	r0, [r7, #4]
 80071c8:	f005 fa4e 	bl	800c668 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	6859      	ldr	r1, [r3, #4]
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	69ba      	ldr	r2, [r7, #24]
 80071d8:	430a      	orrs	r2, r1
 80071da:	605a      	str	r2, [r3, #4]
 80071dc:	e000      	b.n	80071e0 <HAL_PCD_IRQHandler+0x742>
      return;
 80071de:	bf00      	nop
    }
  }
}
 80071e0:	3734      	adds	r7, #52	; 0x34
 80071e2:	46bd      	mov	sp, r7
 80071e4:	bd90      	pop	{r4, r7, pc}

080071e6 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80071e6:	b580      	push	{r7, lr}
 80071e8:	b082      	sub	sp, #8
 80071ea:	af00      	add	r7, sp, #0
 80071ec:	6078      	str	r0, [r7, #4]
 80071ee:	460b      	mov	r3, r1
 80071f0:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80071f8:	2b01      	cmp	r3, #1
 80071fa:	d101      	bne.n	8007200 <HAL_PCD_SetAddress+0x1a>
 80071fc:	2302      	movs	r3, #2
 80071fe:	e013      	b.n	8007228 <HAL_PCD_SetAddress+0x42>
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	2201      	movs	r2, #1
 8007204:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	78fa      	ldrb	r2, [r7, #3]
 800720c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	78fa      	ldrb	r2, [r7, #3]
 8007216:	4611      	mov	r1, r2
 8007218:	4618      	mov	r0, r3
 800721a:	f003 f98d 	bl	800a538 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	2200      	movs	r2, #0
 8007222:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8007226:	2300      	movs	r3, #0
}
 8007228:	4618      	mov	r0, r3
 800722a:	3708      	adds	r7, #8
 800722c:	46bd      	mov	sp, r7
 800722e:	bd80      	pop	{r7, pc}

08007230 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8007230:	b580      	push	{r7, lr}
 8007232:	b084      	sub	sp, #16
 8007234:	af00      	add	r7, sp, #0
 8007236:	6078      	str	r0, [r7, #4]
 8007238:	4608      	mov	r0, r1
 800723a:	4611      	mov	r1, r2
 800723c:	461a      	mov	r2, r3
 800723e:	4603      	mov	r3, r0
 8007240:	70fb      	strb	r3, [r7, #3]
 8007242:	460b      	mov	r3, r1
 8007244:	803b      	strh	r3, [r7, #0]
 8007246:	4613      	mov	r3, r2
 8007248:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800724a:	2300      	movs	r3, #0
 800724c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800724e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007252:	2b00      	cmp	r3, #0
 8007254:	da0f      	bge.n	8007276 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007256:	78fb      	ldrb	r3, [r7, #3]
 8007258:	f003 020f 	and.w	r2, r3, #15
 800725c:	4613      	mov	r3, r2
 800725e:	00db      	lsls	r3, r3, #3
 8007260:	1a9b      	subs	r3, r3, r2
 8007262:	009b      	lsls	r3, r3, #2
 8007264:	3338      	adds	r3, #56	; 0x38
 8007266:	687a      	ldr	r2, [r7, #4]
 8007268:	4413      	add	r3, r2
 800726a:	3304      	adds	r3, #4
 800726c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	2201      	movs	r2, #1
 8007272:	705a      	strb	r2, [r3, #1]
 8007274:	e00f      	b.n	8007296 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007276:	78fb      	ldrb	r3, [r7, #3]
 8007278:	f003 020f 	and.w	r2, r3, #15
 800727c:	4613      	mov	r3, r2
 800727e:	00db      	lsls	r3, r3, #3
 8007280:	1a9b      	subs	r3, r3, r2
 8007282:	009b      	lsls	r3, r3, #2
 8007284:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8007288:	687a      	ldr	r2, [r7, #4]
 800728a:	4413      	add	r3, r2
 800728c:	3304      	adds	r3, #4
 800728e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	2200      	movs	r2, #0
 8007294:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8007296:	78fb      	ldrb	r3, [r7, #3]
 8007298:	f003 030f 	and.w	r3, r3, #15
 800729c:	b2da      	uxtb	r2, r3
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80072a2:	883a      	ldrh	r2, [r7, #0]
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	78ba      	ldrb	r2, [r7, #2]
 80072ac:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	785b      	ldrb	r3, [r3, #1]
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d004      	beq.n	80072c0 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	781b      	ldrb	r3, [r3, #0]
 80072ba:	b29a      	uxth	r2, r3
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80072c0:	78bb      	ldrb	r3, [r7, #2]
 80072c2:	2b02      	cmp	r3, #2
 80072c4:	d102      	bne.n	80072cc <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	2200      	movs	r2, #0
 80072ca:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80072d2:	2b01      	cmp	r3, #1
 80072d4:	d101      	bne.n	80072da <HAL_PCD_EP_Open+0xaa>
 80072d6:	2302      	movs	r3, #2
 80072d8:	e00e      	b.n	80072f8 <HAL_PCD_EP_Open+0xc8>
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	2201      	movs	r2, #1
 80072de:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	68f9      	ldr	r1, [r7, #12]
 80072e8:	4618      	mov	r0, r3
 80072ea:	f002 fac7 	bl	800987c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	2200      	movs	r2, #0
 80072f2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 80072f6:	7afb      	ldrb	r3, [r7, #11]
}
 80072f8:	4618      	mov	r0, r3
 80072fa:	3710      	adds	r7, #16
 80072fc:	46bd      	mov	sp, r7
 80072fe:	bd80      	pop	{r7, pc}

08007300 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007300:	b580      	push	{r7, lr}
 8007302:	b084      	sub	sp, #16
 8007304:	af00      	add	r7, sp, #0
 8007306:	6078      	str	r0, [r7, #4]
 8007308:	460b      	mov	r3, r1
 800730a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800730c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007310:	2b00      	cmp	r3, #0
 8007312:	da0f      	bge.n	8007334 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007314:	78fb      	ldrb	r3, [r7, #3]
 8007316:	f003 020f 	and.w	r2, r3, #15
 800731a:	4613      	mov	r3, r2
 800731c:	00db      	lsls	r3, r3, #3
 800731e:	1a9b      	subs	r3, r3, r2
 8007320:	009b      	lsls	r3, r3, #2
 8007322:	3338      	adds	r3, #56	; 0x38
 8007324:	687a      	ldr	r2, [r7, #4]
 8007326:	4413      	add	r3, r2
 8007328:	3304      	adds	r3, #4
 800732a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	2201      	movs	r2, #1
 8007330:	705a      	strb	r2, [r3, #1]
 8007332:	e00f      	b.n	8007354 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007334:	78fb      	ldrb	r3, [r7, #3]
 8007336:	f003 020f 	and.w	r2, r3, #15
 800733a:	4613      	mov	r3, r2
 800733c:	00db      	lsls	r3, r3, #3
 800733e:	1a9b      	subs	r3, r3, r2
 8007340:	009b      	lsls	r3, r3, #2
 8007342:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8007346:	687a      	ldr	r2, [r7, #4]
 8007348:	4413      	add	r3, r2
 800734a:	3304      	adds	r3, #4
 800734c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	2200      	movs	r2, #0
 8007352:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8007354:	78fb      	ldrb	r3, [r7, #3]
 8007356:	f003 030f 	and.w	r3, r3, #15
 800735a:	b2da      	uxtb	r2, r3
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8007366:	2b01      	cmp	r3, #1
 8007368:	d101      	bne.n	800736e <HAL_PCD_EP_Close+0x6e>
 800736a:	2302      	movs	r3, #2
 800736c:	e00e      	b.n	800738c <HAL_PCD_EP_Close+0x8c>
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	2201      	movs	r2, #1
 8007372:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	68f9      	ldr	r1, [r7, #12]
 800737c:	4618      	mov	r0, r3
 800737e:	f002 fb03 	bl	8009988 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	2200      	movs	r2, #0
 8007386:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 800738a:	2300      	movs	r3, #0
}
 800738c:	4618      	mov	r0, r3
 800738e:	3710      	adds	r7, #16
 8007390:	46bd      	mov	sp, r7
 8007392:	bd80      	pop	{r7, pc}

08007394 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8007394:	b580      	push	{r7, lr}
 8007396:	b086      	sub	sp, #24
 8007398:	af00      	add	r7, sp, #0
 800739a:	60f8      	str	r0, [r7, #12]
 800739c:	607a      	str	r2, [r7, #4]
 800739e:	603b      	str	r3, [r7, #0]
 80073a0:	460b      	mov	r3, r1
 80073a2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80073a4:	7afb      	ldrb	r3, [r7, #11]
 80073a6:	f003 020f 	and.w	r2, r3, #15
 80073aa:	4613      	mov	r3, r2
 80073ac:	00db      	lsls	r3, r3, #3
 80073ae:	1a9b      	subs	r3, r3, r2
 80073b0:	009b      	lsls	r3, r3, #2
 80073b2:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80073b6:	68fa      	ldr	r2, [r7, #12]
 80073b8:	4413      	add	r3, r2
 80073ba:	3304      	adds	r3, #4
 80073bc:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80073be:	697b      	ldr	r3, [r7, #20]
 80073c0:	687a      	ldr	r2, [r7, #4]
 80073c2:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80073c4:	697b      	ldr	r3, [r7, #20]
 80073c6:	683a      	ldr	r2, [r7, #0]
 80073c8:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80073ca:	697b      	ldr	r3, [r7, #20]
 80073cc:	2200      	movs	r2, #0
 80073ce:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 80073d0:	697b      	ldr	r3, [r7, #20]
 80073d2:	2200      	movs	r2, #0
 80073d4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80073d6:	7afb      	ldrb	r3, [r7, #11]
 80073d8:	f003 030f 	and.w	r3, r3, #15
 80073dc:	b2da      	uxtb	r2, r3
 80073de:	697b      	ldr	r3, [r7, #20]
 80073e0:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	691b      	ldr	r3, [r3, #16]
 80073e6:	2b01      	cmp	r3, #1
 80073e8:	d102      	bne.n	80073f0 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80073ea:	687a      	ldr	r2, [r7, #4]
 80073ec:	697b      	ldr	r3, [r7, #20]
 80073ee:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80073f0:	7afb      	ldrb	r3, [r7, #11]
 80073f2:	f003 030f 	and.w	r3, r3, #15
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d109      	bne.n	800740e <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	6818      	ldr	r0, [r3, #0]
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	691b      	ldr	r3, [r3, #16]
 8007402:	b2db      	uxtb	r3, r3
 8007404:	461a      	mov	r2, r3
 8007406:	6979      	ldr	r1, [r7, #20]
 8007408:	f002 fdde 	bl	8009fc8 <USB_EP0StartXfer>
 800740c:	e008      	b.n	8007420 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	6818      	ldr	r0, [r3, #0]
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	691b      	ldr	r3, [r3, #16]
 8007416:	b2db      	uxtb	r3, r3
 8007418:	461a      	mov	r2, r3
 800741a:	6979      	ldr	r1, [r7, #20]
 800741c:	f002 fb90 	bl	8009b40 <USB_EPStartXfer>
  }

  return HAL_OK;
 8007420:	2300      	movs	r3, #0
}
 8007422:	4618      	mov	r0, r3
 8007424:	3718      	adds	r7, #24
 8007426:	46bd      	mov	sp, r7
 8007428:	bd80      	pop	{r7, pc}

0800742a <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800742a:	b480      	push	{r7}
 800742c:	b083      	sub	sp, #12
 800742e:	af00      	add	r7, sp, #0
 8007430:	6078      	str	r0, [r7, #4]
 8007432:	460b      	mov	r3, r1
 8007434:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8007436:	78fb      	ldrb	r3, [r7, #3]
 8007438:	f003 020f 	and.w	r2, r3, #15
 800743c:	6879      	ldr	r1, [r7, #4]
 800743e:	4613      	mov	r3, r2
 8007440:	00db      	lsls	r3, r3, #3
 8007442:	1a9b      	subs	r3, r3, r2
 8007444:	009b      	lsls	r3, r3, #2
 8007446:	440b      	add	r3, r1
 8007448:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800744c:	681b      	ldr	r3, [r3, #0]
}
 800744e:	4618      	mov	r0, r3
 8007450:	370c      	adds	r7, #12
 8007452:	46bd      	mov	sp, r7
 8007454:	bc80      	pop	{r7}
 8007456:	4770      	bx	lr

08007458 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8007458:	b580      	push	{r7, lr}
 800745a:	b086      	sub	sp, #24
 800745c:	af00      	add	r7, sp, #0
 800745e:	60f8      	str	r0, [r7, #12]
 8007460:	607a      	str	r2, [r7, #4]
 8007462:	603b      	str	r3, [r7, #0]
 8007464:	460b      	mov	r3, r1
 8007466:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007468:	7afb      	ldrb	r3, [r7, #11]
 800746a:	f003 020f 	and.w	r2, r3, #15
 800746e:	4613      	mov	r3, r2
 8007470:	00db      	lsls	r3, r3, #3
 8007472:	1a9b      	subs	r3, r3, r2
 8007474:	009b      	lsls	r3, r3, #2
 8007476:	3338      	adds	r3, #56	; 0x38
 8007478:	68fa      	ldr	r2, [r7, #12]
 800747a:	4413      	add	r3, r2
 800747c:	3304      	adds	r3, #4
 800747e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8007480:	697b      	ldr	r3, [r7, #20]
 8007482:	687a      	ldr	r2, [r7, #4]
 8007484:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8007486:	697b      	ldr	r3, [r7, #20]
 8007488:	683a      	ldr	r2, [r7, #0]
 800748a:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800748c:	697b      	ldr	r3, [r7, #20]
 800748e:	2200      	movs	r2, #0
 8007490:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8007492:	697b      	ldr	r3, [r7, #20]
 8007494:	2201      	movs	r2, #1
 8007496:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007498:	7afb      	ldrb	r3, [r7, #11]
 800749a:	f003 030f 	and.w	r3, r3, #15
 800749e:	b2da      	uxtb	r2, r3
 80074a0:	697b      	ldr	r3, [r7, #20]
 80074a2:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	691b      	ldr	r3, [r3, #16]
 80074a8:	2b01      	cmp	r3, #1
 80074aa:	d102      	bne.n	80074b2 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80074ac:	687a      	ldr	r2, [r7, #4]
 80074ae:	697b      	ldr	r3, [r7, #20]
 80074b0:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80074b2:	7afb      	ldrb	r3, [r7, #11]
 80074b4:	f003 030f 	and.w	r3, r3, #15
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d109      	bne.n	80074d0 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	6818      	ldr	r0, [r3, #0]
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	691b      	ldr	r3, [r3, #16]
 80074c4:	b2db      	uxtb	r3, r3
 80074c6:	461a      	mov	r2, r3
 80074c8:	6979      	ldr	r1, [r7, #20]
 80074ca:	f002 fd7d 	bl	8009fc8 <USB_EP0StartXfer>
 80074ce:	e008      	b.n	80074e2 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	6818      	ldr	r0, [r3, #0]
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	691b      	ldr	r3, [r3, #16]
 80074d8:	b2db      	uxtb	r3, r3
 80074da:	461a      	mov	r2, r3
 80074dc:	6979      	ldr	r1, [r7, #20]
 80074de:	f002 fb2f 	bl	8009b40 <USB_EPStartXfer>
  }

  return HAL_OK;
 80074e2:	2300      	movs	r3, #0
}
 80074e4:	4618      	mov	r0, r3
 80074e6:	3718      	adds	r7, #24
 80074e8:	46bd      	mov	sp, r7
 80074ea:	bd80      	pop	{r7, pc}

080074ec <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80074ec:	b580      	push	{r7, lr}
 80074ee:	b084      	sub	sp, #16
 80074f0:	af00      	add	r7, sp, #0
 80074f2:	6078      	str	r0, [r7, #4]
 80074f4:	460b      	mov	r3, r1
 80074f6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80074f8:	78fb      	ldrb	r3, [r7, #3]
 80074fa:	f003 020f 	and.w	r2, r3, #15
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	685b      	ldr	r3, [r3, #4]
 8007502:	429a      	cmp	r2, r3
 8007504:	d901      	bls.n	800750a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8007506:	2301      	movs	r3, #1
 8007508:	e050      	b.n	80075ac <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800750a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800750e:	2b00      	cmp	r3, #0
 8007510:	da0f      	bge.n	8007532 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007512:	78fb      	ldrb	r3, [r7, #3]
 8007514:	f003 020f 	and.w	r2, r3, #15
 8007518:	4613      	mov	r3, r2
 800751a:	00db      	lsls	r3, r3, #3
 800751c:	1a9b      	subs	r3, r3, r2
 800751e:	009b      	lsls	r3, r3, #2
 8007520:	3338      	adds	r3, #56	; 0x38
 8007522:	687a      	ldr	r2, [r7, #4]
 8007524:	4413      	add	r3, r2
 8007526:	3304      	adds	r3, #4
 8007528:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	2201      	movs	r2, #1
 800752e:	705a      	strb	r2, [r3, #1]
 8007530:	e00d      	b.n	800754e <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8007532:	78fa      	ldrb	r2, [r7, #3]
 8007534:	4613      	mov	r3, r2
 8007536:	00db      	lsls	r3, r3, #3
 8007538:	1a9b      	subs	r3, r3, r2
 800753a:	009b      	lsls	r3, r3, #2
 800753c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8007540:	687a      	ldr	r2, [r7, #4]
 8007542:	4413      	add	r3, r2
 8007544:	3304      	adds	r3, #4
 8007546:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	2200      	movs	r2, #0
 800754c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	2201      	movs	r2, #1
 8007552:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007554:	78fb      	ldrb	r3, [r7, #3]
 8007556:	f003 030f 	and.w	r3, r3, #15
 800755a:	b2da      	uxtb	r2, r3
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8007566:	2b01      	cmp	r3, #1
 8007568:	d101      	bne.n	800756e <HAL_PCD_EP_SetStall+0x82>
 800756a:	2302      	movs	r3, #2
 800756c:	e01e      	b.n	80075ac <HAL_PCD_EP_SetStall+0xc0>
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	2201      	movs	r2, #1
 8007572:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	68f9      	ldr	r1, [r7, #12]
 800757c:	4618      	mov	r0, r3
 800757e:	f002 ff09 	bl	800a394 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8007582:	78fb      	ldrb	r3, [r7, #3]
 8007584:	f003 030f 	and.w	r3, r3, #15
 8007588:	2b00      	cmp	r3, #0
 800758a:	d10a      	bne.n	80075a2 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	6818      	ldr	r0, [r3, #0]
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	691b      	ldr	r3, [r3, #16]
 8007594:	b2d9      	uxtb	r1, r3
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800759c:	461a      	mov	r2, r3
 800759e:	f003 f8ed 	bl	800a77c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	2200      	movs	r2, #0
 80075a6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80075aa:	2300      	movs	r3, #0
}
 80075ac:	4618      	mov	r0, r3
 80075ae:	3710      	adds	r7, #16
 80075b0:	46bd      	mov	sp, r7
 80075b2:	bd80      	pop	{r7, pc}

080075b4 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80075b4:	b580      	push	{r7, lr}
 80075b6:	b084      	sub	sp, #16
 80075b8:	af00      	add	r7, sp, #0
 80075ba:	6078      	str	r0, [r7, #4]
 80075bc:	460b      	mov	r3, r1
 80075be:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80075c0:	78fb      	ldrb	r3, [r7, #3]
 80075c2:	f003 020f 	and.w	r2, r3, #15
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	685b      	ldr	r3, [r3, #4]
 80075ca:	429a      	cmp	r2, r3
 80075cc:	d901      	bls.n	80075d2 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80075ce:	2301      	movs	r3, #1
 80075d0:	e042      	b.n	8007658 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80075d2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	da0f      	bge.n	80075fa <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80075da:	78fb      	ldrb	r3, [r7, #3]
 80075dc:	f003 020f 	and.w	r2, r3, #15
 80075e0:	4613      	mov	r3, r2
 80075e2:	00db      	lsls	r3, r3, #3
 80075e4:	1a9b      	subs	r3, r3, r2
 80075e6:	009b      	lsls	r3, r3, #2
 80075e8:	3338      	adds	r3, #56	; 0x38
 80075ea:	687a      	ldr	r2, [r7, #4]
 80075ec:	4413      	add	r3, r2
 80075ee:	3304      	adds	r3, #4
 80075f0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	2201      	movs	r2, #1
 80075f6:	705a      	strb	r2, [r3, #1]
 80075f8:	e00f      	b.n	800761a <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80075fa:	78fb      	ldrb	r3, [r7, #3]
 80075fc:	f003 020f 	and.w	r2, r3, #15
 8007600:	4613      	mov	r3, r2
 8007602:	00db      	lsls	r3, r3, #3
 8007604:	1a9b      	subs	r3, r3, r2
 8007606:	009b      	lsls	r3, r3, #2
 8007608:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800760c:	687a      	ldr	r2, [r7, #4]
 800760e:	4413      	add	r3, r2
 8007610:	3304      	adds	r3, #4
 8007612:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	2200      	movs	r2, #0
 8007618:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	2200      	movs	r2, #0
 800761e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007620:	78fb      	ldrb	r3, [r7, #3]
 8007622:	f003 030f 	and.w	r3, r3, #15
 8007626:	b2da      	uxtb	r2, r3
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8007632:	2b01      	cmp	r3, #1
 8007634:	d101      	bne.n	800763a <HAL_PCD_EP_ClrStall+0x86>
 8007636:	2302      	movs	r3, #2
 8007638:	e00e      	b.n	8007658 <HAL_PCD_EP_ClrStall+0xa4>
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	2201      	movs	r2, #1
 800763e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	68f9      	ldr	r1, [r7, #12]
 8007648:	4618      	mov	r0, r3
 800764a:	f002 ff10 	bl	800a46e <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	2200      	movs	r2, #0
 8007652:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8007656:	2300      	movs	r3, #0
}
 8007658:	4618      	mov	r0, r3
 800765a:	3710      	adds	r7, #16
 800765c:	46bd      	mov	sp, r7
 800765e:	bd80      	pop	{r7, pc}

08007660 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8007660:	b580      	push	{r7, lr}
 8007662:	b08a      	sub	sp, #40	; 0x28
 8007664:	af02      	add	r7, sp, #8
 8007666:	6078      	str	r0, [r7, #4]
 8007668:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007670:	697b      	ldr	r3, [r7, #20]
 8007672:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8007674:	683a      	ldr	r2, [r7, #0]
 8007676:	4613      	mov	r3, r2
 8007678:	00db      	lsls	r3, r3, #3
 800767a:	1a9b      	subs	r3, r3, r2
 800767c:	009b      	lsls	r3, r3, #2
 800767e:	3338      	adds	r3, #56	; 0x38
 8007680:	687a      	ldr	r2, [r7, #4]
 8007682:	4413      	add	r3, r2
 8007684:	3304      	adds	r3, #4
 8007686:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	699a      	ldr	r2, [r3, #24]
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	695b      	ldr	r3, [r3, #20]
 8007690:	429a      	cmp	r2, r3
 8007692:	d901      	bls.n	8007698 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8007694:	2301      	movs	r3, #1
 8007696:	e06c      	b.n	8007772 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	695a      	ldr	r2, [r3, #20]
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	699b      	ldr	r3, [r3, #24]
 80076a0:	1ad3      	subs	r3, r2, r3
 80076a2:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	689b      	ldr	r3, [r3, #8]
 80076a8:	69fa      	ldr	r2, [r7, #28]
 80076aa:	429a      	cmp	r2, r3
 80076ac:	d902      	bls.n	80076b4 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	689b      	ldr	r3, [r3, #8]
 80076b2:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80076b4:	69fb      	ldr	r3, [r7, #28]
 80076b6:	3303      	adds	r3, #3
 80076b8:	089b      	lsrs	r3, r3, #2
 80076ba:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80076bc:	e02b      	b.n	8007716 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	695a      	ldr	r2, [r3, #20]
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	699b      	ldr	r3, [r3, #24]
 80076c6:	1ad3      	subs	r3, r2, r3
 80076c8:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	689b      	ldr	r3, [r3, #8]
 80076ce:	69fa      	ldr	r2, [r7, #28]
 80076d0:	429a      	cmp	r2, r3
 80076d2:	d902      	bls.n	80076da <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	689b      	ldr	r3, [r3, #8]
 80076d8:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80076da:	69fb      	ldr	r3, [r7, #28]
 80076dc:	3303      	adds	r3, #3
 80076de:	089b      	lsrs	r3, r3, #2
 80076e0:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	68d9      	ldr	r1, [r3, #12]
 80076e6:	683b      	ldr	r3, [r7, #0]
 80076e8:	b2da      	uxtb	r2, r3
 80076ea:	69fb      	ldr	r3, [r7, #28]
 80076ec:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80076f2:	b2db      	uxtb	r3, r3
 80076f4:	9300      	str	r3, [sp, #0]
 80076f6:	4603      	mov	r3, r0
 80076f8:	6978      	ldr	r0, [r7, #20]
 80076fa:	f002 fdb7 	bl	800a26c <USB_WritePacket>

    ep->xfer_buff  += len;
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	68da      	ldr	r2, [r3, #12]
 8007702:	69fb      	ldr	r3, [r7, #28]
 8007704:	441a      	add	r2, r3
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	699a      	ldr	r2, [r3, #24]
 800770e:	69fb      	ldr	r3, [r7, #28]
 8007710:	441a      	add	r2, r3
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8007716:	683b      	ldr	r3, [r7, #0]
 8007718:	015a      	lsls	r2, r3, #5
 800771a:	693b      	ldr	r3, [r7, #16]
 800771c:	4413      	add	r3, r2
 800771e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007722:	699b      	ldr	r3, [r3, #24]
 8007724:	b29b      	uxth	r3, r3
 8007726:	69ba      	ldr	r2, [r7, #24]
 8007728:	429a      	cmp	r2, r3
 800772a:	d809      	bhi.n	8007740 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	699a      	ldr	r2, [r3, #24]
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8007734:	429a      	cmp	r2, r3
 8007736:	d203      	bcs.n	8007740 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	695b      	ldr	r3, [r3, #20]
 800773c:	2b00      	cmp	r3, #0
 800773e:	d1be      	bne.n	80076be <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	695a      	ldr	r2, [r3, #20]
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	699b      	ldr	r3, [r3, #24]
 8007748:	429a      	cmp	r2, r3
 800774a:	d811      	bhi.n	8007770 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800774c:	683b      	ldr	r3, [r7, #0]
 800774e:	f003 030f 	and.w	r3, r3, #15
 8007752:	2201      	movs	r2, #1
 8007754:	fa02 f303 	lsl.w	r3, r2, r3
 8007758:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800775a:	693b      	ldr	r3, [r7, #16]
 800775c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007760:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007762:	68bb      	ldr	r3, [r7, #8]
 8007764:	43db      	mvns	r3, r3
 8007766:	6939      	ldr	r1, [r7, #16]
 8007768:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800776c:	4013      	ands	r3, r2
 800776e:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8007770:	2300      	movs	r3, #0
}
 8007772:	4618      	mov	r0, r3
 8007774:	3720      	adds	r7, #32
 8007776:	46bd      	mov	sp, r7
 8007778:	bd80      	pop	{r7, pc}
	...

0800777c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800777c:	b580      	push	{r7, lr}
 800777e:	b086      	sub	sp, #24
 8007780:	af00      	add	r7, sp, #0
 8007782:	6078      	str	r0, [r7, #4]
 8007784:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800778c:	697b      	ldr	r3, [r7, #20]
 800778e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8007790:	697b      	ldr	r3, [r7, #20]
 8007792:	333c      	adds	r3, #60	; 0x3c
 8007794:	3304      	adds	r3, #4
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800779a:	683b      	ldr	r3, [r7, #0]
 800779c:	015a      	lsls	r2, r3, #5
 800779e:	693b      	ldr	r3, [r7, #16]
 80077a0:	4413      	add	r3, r2
 80077a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80077a6:	689b      	ldr	r3, [r3, #8]
 80077a8:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	691b      	ldr	r3, [r3, #16]
 80077ae:	2b01      	cmp	r3, #1
 80077b0:	f040 80a0 	bne.w	80078f4 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80077b4:	68bb      	ldr	r3, [r7, #8]
 80077b6:	f003 0308 	and.w	r3, r3, #8
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d015      	beq.n	80077ea <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	4a72      	ldr	r2, [pc, #456]	; (800798c <PCD_EP_OutXfrComplete_int+0x210>)
 80077c2:	4293      	cmp	r3, r2
 80077c4:	f240 80dd 	bls.w	8007982 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80077c8:	68bb      	ldr	r3, [r7, #8]
 80077ca:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	f000 80d7 	beq.w	8007982 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80077d4:	683b      	ldr	r3, [r7, #0]
 80077d6:	015a      	lsls	r2, r3, #5
 80077d8:	693b      	ldr	r3, [r7, #16]
 80077da:	4413      	add	r3, r2
 80077dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80077e0:	461a      	mov	r2, r3
 80077e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80077e6:	6093      	str	r3, [r2, #8]
 80077e8:	e0cb      	b.n	8007982 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80077ea:	68bb      	ldr	r3, [r7, #8]
 80077ec:	f003 0320 	and.w	r3, r3, #32
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d009      	beq.n	8007808 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80077f4:	683b      	ldr	r3, [r7, #0]
 80077f6:	015a      	lsls	r2, r3, #5
 80077f8:	693b      	ldr	r3, [r7, #16]
 80077fa:	4413      	add	r3, r2
 80077fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007800:	461a      	mov	r2, r3
 8007802:	2320      	movs	r3, #32
 8007804:	6093      	str	r3, [r2, #8]
 8007806:	e0bc      	b.n	8007982 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8007808:	68bb      	ldr	r3, [r7, #8]
 800780a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800780e:	2b00      	cmp	r3, #0
 8007810:	f040 80b7 	bne.w	8007982 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	4a5d      	ldr	r2, [pc, #372]	; (800798c <PCD_EP_OutXfrComplete_int+0x210>)
 8007818:	4293      	cmp	r3, r2
 800781a:	d90f      	bls.n	800783c <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800781c:	68bb      	ldr	r3, [r7, #8]
 800781e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007822:	2b00      	cmp	r3, #0
 8007824:	d00a      	beq.n	800783c <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007826:	683b      	ldr	r3, [r7, #0]
 8007828:	015a      	lsls	r2, r3, #5
 800782a:	693b      	ldr	r3, [r7, #16]
 800782c:	4413      	add	r3, r2
 800782e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007832:	461a      	mov	r2, r3
 8007834:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007838:	6093      	str	r3, [r2, #8]
 800783a:	e0a2      	b.n	8007982 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 800783c:	6879      	ldr	r1, [r7, #4]
 800783e:	683a      	ldr	r2, [r7, #0]
 8007840:	4613      	mov	r3, r2
 8007842:	00db      	lsls	r3, r3, #3
 8007844:	1a9b      	subs	r3, r3, r2
 8007846:	009b      	lsls	r3, r3, #2
 8007848:	440b      	add	r3, r1
 800784a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800784e:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8007850:	683b      	ldr	r3, [r7, #0]
 8007852:	0159      	lsls	r1, r3, #5
 8007854:	693b      	ldr	r3, [r7, #16]
 8007856:	440b      	add	r3, r1
 8007858:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800785c:	691b      	ldr	r3, [r3, #16]
 800785e:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8007862:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8007864:	6878      	ldr	r0, [r7, #4]
 8007866:	683a      	ldr	r2, [r7, #0]
 8007868:	4613      	mov	r3, r2
 800786a:	00db      	lsls	r3, r3, #3
 800786c:	1a9b      	subs	r3, r3, r2
 800786e:	009b      	lsls	r3, r3, #2
 8007870:	4403      	add	r3, r0
 8007872:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8007876:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8007878:	6879      	ldr	r1, [r7, #4]
 800787a:	683a      	ldr	r2, [r7, #0]
 800787c:	4613      	mov	r3, r2
 800787e:	00db      	lsls	r3, r3, #3
 8007880:	1a9b      	subs	r3, r3, r2
 8007882:	009b      	lsls	r3, r3, #2
 8007884:	440b      	add	r3, r1
 8007886:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800788a:	6819      	ldr	r1, [r3, #0]
 800788c:	6878      	ldr	r0, [r7, #4]
 800788e:	683a      	ldr	r2, [r7, #0]
 8007890:	4613      	mov	r3, r2
 8007892:	00db      	lsls	r3, r3, #3
 8007894:	1a9b      	subs	r3, r3, r2
 8007896:	009b      	lsls	r3, r3, #2
 8007898:	4403      	add	r3, r0
 800789a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	4419      	add	r1, r3
 80078a2:	6878      	ldr	r0, [r7, #4]
 80078a4:	683a      	ldr	r2, [r7, #0]
 80078a6:	4613      	mov	r3, r2
 80078a8:	00db      	lsls	r3, r3, #3
 80078aa:	1a9b      	subs	r3, r3, r2
 80078ac:	009b      	lsls	r3, r3, #2
 80078ae:	4403      	add	r3, r0
 80078b0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80078b4:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80078b6:	683b      	ldr	r3, [r7, #0]
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d114      	bne.n	80078e6 <PCD_EP_OutXfrComplete_int+0x16a>
 80078bc:	6879      	ldr	r1, [r7, #4]
 80078be:	683a      	ldr	r2, [r7, #0]
 80078c0:	4613      	mov	r3, r2
 80078c2:	00db      	lsls	r3, r3, #3
 80078c4:	1a9b      	subs	r3, r3, r2
 80078c6:	009b      	lsls	r3, r3, #2
 80078c8:	440b      	add	r3, r1
 80078ca:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d108      	bne.n	80078e6 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	6818      	ldr	r0, [r3, #0]
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80078de:	461a      	mov	r2, r3
 80078e0:	2101      	movs	r1, #1
 80078e2:	f002 ff4b 	bl	800a77c <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80078e6:	683b      	ldr	r3, [r7, #0]
 80078e8:	b2db      	uxtb	r3, r3
 80078ea:	4619      	mov	r1, r3
 80078ec:	6878      	ldr	r0, [r7, #4]
 80078ee:	f004 fde9 	bl	800c4c4 <HAL_PCD_DataOutStageCallback>
 80078f2:	e046      	b.n	8007982 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	4a26      	ldr	r2, [pc, #152]	; (8007990 <PCD_EP_OutXfrComplete_int+0x214>)
 80078f8:	4293      	cmp	r3, r2
 80078fa:	d124      	bne.n	8007946 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80078fc:	68bb      	ldr	r3, [r7, #8]
 80078fe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007902:	2b00      	cmp	r3, #0
 8007904:	d00a      	beq.n	800791c <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007906:	683b      	ldr	r3, [r7, #0]
 8007908:	015a      	lsls	r2, r3, #5
 800790a:	693b      	ldr	r3, [r7, #16]
 800790c:	4413      	add	r3, r2
 800790e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007912:	461a      	mov	r2, r3
 8007914:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007918:	6093      	str	r3, [r2, #8]
 800791a:	e032      	b.n	8007982 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800791c:	68bb      	ldr	r3, [r7, #8]
 800791e:	f003 0320 	and.w	r3, r3, #32
 8007922:	2b00      	cmp	r3, #0
 8007924:	d008      	beq.n	8007938 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8007926:	683b      	ldr	r3, [r7, #0]
 8007928:	015a      	lsls	r2, r3, #5
 800792a:	693b      	ldr	r3, [r7, #16]
 800792c:	4413      	add	r3, r2
 800792e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007932:	461a      	mov	r2, r3
 8007934:	2320      	movs	r3, #32
 8007936:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8007938:	683b      	ldr	r3, [r7, #0]
 800793a:	b2db      	uxtb	r3, r3
 800793c:	4619      	mov	r1, r3
 800793e:	6878      	ldr	r0, [r7, #4]
 8007940:	f004 fdc0 	bl	800c4c4 <HAL_PCD_DataOutStageCallback>
 8007944:	e01d      	b.n	8007982 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8007946:	683b      	ldr	r3, [r7, #0]
 8007948:	2b00      	cmp	r3, #0
 800794a:	d114      	bne.n	8007976 <PCD_EP_OutXfrComplete_int+0x1fa>
 800794c:	6879      	ldr	r1, [r7, #4]
 800794e:	683a      	ldr	r2, [r7, #0]
 8007950:	4613      	mov	r3, r2
 8007952:	00db      	lsls	r3, r3, #3
 8007954:	1a9b      	subs	r3, r3, r2
 8007956:	009b      	lsls	r3, r3, #2
 8007958:	440b      	add	r3, r1
 800795a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	2b00      	cmp	r3, #0
 8007962:	d108      	bne.n	8007976 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	6818      	ldr	r0, [r3, #0]
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800796e:	461a      	mov	r2, r3
 8007970:	2100      	movs	r1, #0
 8007972:	f002 ff03 	bl	800a77c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8007976:	683b      	ldr	r3, [r7, #0]
 8007978:	b2db      	uxtb	r3, r3
 800797a:	4619      	mov	r1, r3
 800797c:	6878      	ldr	r0, [r7, #4]
 800797e:	f004 fda1 	bl	800c4c4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8007982:	2300      	movs	r3, #0
}
 8007984:	4618      	mov	r0, r3
 8007986:	3718      	adds	r7, #24
 8007988:	46bd      	mov	sp, r7
 800798a:	bd80      	pop	{r7, pc}
 800798c:	4f54300a 	.word	0x4f54300a
 8007990:	4f54310a 	.word	0x4f54310a

08007994 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8007994:	b580      	push	{r7, lr}
 8007996:	b086      	sub	sp, #24
 8007998:	af00      	add	r7, sp, #0
 800799a:	6078      	str	r0, [r7, #4]
 800799c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80079a4:	697b      	ldr	r3, [r7, #20]
 80079a6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80079a8:	697b      	ldr	r3, [r7, #20]
 80079aa:	333c      	adds	r3, #60	; 0x3c
 80079ac:	3304      	adds	r3, #4
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80079b2:	683b      	ldr	r3, [r7, #0]
 80079b4:	015a      	lsls	r2, r3, #5
 80079b6:	693b      	ldr	r3, [r7, #16]
 80079b8:	4413      	add	r3, r2
 80079ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80079be:	689b      	ldr	r3, [r3, #8]
 80079c0:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	4a15      	ldr	r2, [pc, #84]	; (8007a1c <PCD_EP_OutSetupPacket_int+0x88>)
 80079c6:	4293      	cmp	r3, r2
 80079c8:	d90e      	bls.n	80079e8 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80079ca:	68bb      	ldr	r3, [r7, #8]
 80079cc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d009      	beq.n	80079e8 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80079d4:	683b      	ldr	r3, [r7, #0]
 80079d6:	015a      	lsls	r2, r3, #5
 80079d8:	693b      	ldr	r3, [r7, #16]
 80079da:	4413      	add	r3, r2
 80079dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80079e0:	461a      	mov	r2, r3
 80079e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80079e6:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80079e8:	6878      	ldr	r0, [r7, #4]
 80079ea:	f004 fd59 	bl	800c4a0 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	4a0a      	ldr	r2, [pc, #40]	; (8007a1c <PCD_EP_OutSetupPacket_int+0x88>)
 80079f2:	4293      	cmp	r3, r2
 80079f4:	d90c      	bls.n	8007a10 <PCD_EP_OutSetupPacket_int+0x7c>
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	691b      	ldr	r3, [r3, #16]
 80079fa:	2b01      	cmp	r3, #1
 80079fc:	d108      	bne.n	8007a10 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	6818      	ldr	r0, [r3, #0]
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8007a08:	461a      	mov	r2, r3
 8007a0a:	2101      	movs	r1, #1
 8007a0c:	f002 feb6 	bl	800a77c <USB_EP0_OutStart>
  }

  return HAL_OK;
 8007a10:	2300      	movs	r3, #0
}
 8007a12:	4618      	mov	r0, r3
 8007a14:	3718      	adds	r7, #24
 8007a16:	46bd      	mov	sp, r7
 8007a18:	bd80      	pop	{r7, pc}
 8007a1a:	bf00      	nop
 8007a1c:	4f54300a 	.word	0x4f54300a

08007a20 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8007a20:	b480      	push	{r7}
 8007a22:	b085      	sub	sp, #20
 8007a24:	af00      	add	r7, sp, #0
 8007a26:	6078      	str	r0, [r7, #4]
 8007a28:	460b      	mov	r3, r1
 8007a2a:	70fb      	strb	r3, [r7, #3]
 8007a2c:	4613      	mov	r3, r2
 8007a2e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a36:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8007a38:	78fb      	ldrb	r3, [r7, #3]
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d107      	bne.n	8007a4e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8007a3e:	883b      	ldrh	r3, [r7, #0]
 8007a40:	0419      	lsls	r1, r3, #16
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	68ba      	ldr	r2, [r7, #8]
 8007a48:	430a      	orrs	r2, r1
 8007a4a:	629a      	str	r2, [r3, #40]	; 0x28
 8007a4c:	e028      	b.n	8007aa0 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a54:	0c1b      	lsrs	r3, r3, #16
 8007a56:	68ba      	ldr	r2, [r7, #8]
 8007a58:	4413      	add	r3, r2
 8007a5a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8007a5c:	2300      	movs	r3, #0
 8007a5e:	73fb      	strb	r3, [r7, #15]
 8007a60:	e00d      	b.n	8007a7e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	681a      	ldr	r2, [r3, #0]
 8007a66:	7bfb      	ldrb	r3, [r7, #15]
 8007a68:	3340      	adds	r3, #64	; 0x40
 8007a6a:	009b      	lsls	r3, r3, #2
 8007a6c:	4413      	add	r3, r2
 8007a6e:	685b      	ldr	r3, [r3, #4]
 8007a70:	0c1b      	lsrs	r3, r3, #16
 8007a72:	68ba      	ldr	r2, [r7, #8]
 8007a74:	4413      	add	r3, r2
 8007a76:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8007a78:	7bfb      	ldrb	r3, [r7, #15]
 8007a7a:	3301      	adds	r3, #1
 8007a7c:	73fb      	strb	r3, [r7, #15]
 8007a7e:	7bfa      	ldrb	r2, [r7, #15]
 8007a80:	78fb      	ldrb	r3, [r7, #3]
 8007a82:	3b01      	subs	r3, #1
 8007a84:	429a      	cmp	r2, r3
 8007a86:	d3ec      	bcc.n	8007a62 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8007a88:	883b      	ldrh	r3, [r7, #0]
 8007a8a:	0418      	lsls	r0, r3, #16
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	6819      	ldr	r1, [r3, #0]
 8007a90:	78fb      	ldrb	r3, [r7, #3]
 8007a92:	3b01      	subs	r3, #1
 8007a94:	68ba      	ldr	r2, [r7, #8]
 8007a96:	4302      	orrs	r2, r0
 8007a98:	3340      	adds	r3, #64	; 0x40
 8007a9a:	009b      	lsls	r3, r3, #2
 8007a9c:	440b      	add	r3, r1
 8007a9e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8007aa0:	2300      	movs	r3, #0
}
 8007aa2:	4618      	mov	r0, r3
 8007aa4:	3714      	adds	r7, #20
 8007aa6:	46bd      	mov	sp, r7
 8007aa8:	bc80      	pop	{r7}
 8007aaa:	4770      	bx	lr

08007aac <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8007aac:	b480      	push	{r7}
 8007aae:	b083      	sub	sp, #12
 8007ab0:	af00      	add	r7, sp, #0
 8007ab2:	6078      	str	r0, [r7, #4]
 8007ab4:	460b      	mov	r3, r1
 8007ab6:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	887a      	ldrh	r2, [r7, #2]
 8007abe:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8007ac0:	2300      	movs	r3, #0
}
 8007ac2:	4618      	mov	r0, r3
 8007ac4:	370c      	adds	r7, #12
 8007ac6:	46bd      	mov	sp, r7
 8007ac8:	bc80      	pop	{r7}
 8007aca:	4770      	bx	lr

08007acc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007acc:	b580      	push	{r7, lr}
 8007ace:	b08a      	sub	sp, #40	; 0x28
 8007ad0:	af00      	add	r7, sp, #0
 8007ad2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d101      	bne.n	8007ade <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007ada:	2301      	movs	r3, #1
 8007adc:	e237      	b.n	8007f4e <HAL_RCC_OscConfig+0x482>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	f003 0301 	and.w	r3, r3, #1
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	d050      	beq.n	8007b8c <HAL_RCC_OscConfig+0xc0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007aea:	4ba3      	ldr	r3, [pc, #652]	; (8007d78 <HAL_RCC_OscConfig+0x2ac>)
 8007aec:	689b      	ldr	r3, [r3, #8]
 8007aee:	f003 030c 	and.w	r3, r3, #12
 8007af2:	2b04      	cmp	r3, #4
 8007af4:	d00c      	beq.n	8007b10 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007af6:	4ba0      	ldr	r3, [pc, #640]	; (8007d78 <HAL_RCC_OscConfig+0x2ac>)
 8007af8:	689b      	ldr	r3, [r3, #8]
 8007afa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007afe:	2b08      	cmp	r3, #8
 8007b00:	d112      	bne.n	8007b28 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007b02:	4b9d      	ldr	r3, [pc, #628]	; (8007d78 <HAL_RCC_OscConfig+0x2ac>)
 8007b04:	685b      	ldr	r3, [r3, #4]
 8007b06:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007b0a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007b0e:	d10b      	bne.n	8007b28 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007b10:	4b99      	ldr	r3, [pc, #612]	; (8007d78 <HAL_RCC_OscConfig+0x2ac>)
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d036      	beq.n	8007b8a <HAL_RCC_OscConfig+0xbe>
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	685b      	ldr	r3, [r3, #4]
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d132      	bne.n	8007b8a <HAL_RCC_OscConfig+0xbe>
      {
        return HAL_ERROR;
 8007b24:	2301      	movs	r3, #1
 8007b26:	e212      	b.n	8007f4e <HAL_RCC_OscConfig+0x482>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	685a      	ldr	r2, [r3, #4]
 8007b2c:	4b93      	ldr	r3, [pc, #588]	; (8007d7c <HAL_RCC_OscConfig+0x2b0>)
 8007b2e:	b2d2      	uxtb	r2, r2
 8007b30:	701a      	strb	r2, [r3, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	685b      	ldr	r3, [r3, #4]
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d013      	beq.n	8007b62 <HAL_RCC_OscConfig+0x96>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007b3a:	f7fc fd5d 	bl	80045f8 <HAL_GetTick>
 8007b3e:	6238      	str	r0, [r7, #32]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007b40:	e008      	b.n	8007b54 <HAL_RCC_OscConfig+0x88>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007b42:	f7fc fd59 	bl	80045f8 <HAL_GetTick>
 8007b46:	4602      	mov	r2, r0
 8007b48:	6a3b      	ldr	r3, [r7, #32]
 8007b4a:	1ad3      	subs	r3, r2, r3
 8007b4c:	2b64      	cmp	r3, #100	; 0x64
 8007b4e:	d901      	bls.n	8007b54 <HAL_RCC_OscConfig+0x88>
          {
            return HAL_TIMEOUT;
 8007b50:	2303      	movs	r3, #3
 8007b52:	e1fc      	b.n	8007f4e <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007b54:	4b88      	ldr	r3, [pc, #544]	; (8007d78 <HAL_RCC_OscConfig+0x2ac>)
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d0f0      	beq.n	8007b42 <HAL_RCC_OscConfig+0x76>
 8007b60:	e014      	b.n	8007b8c <HAL_RCC_OscConfig+0xc0>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007b62:	f7fc fd49 	bl	80045f8 <HAL_GetTick>
 8007b66:	6238      	str	r0, [r7, #32]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007b68:	e008      	b.n	8007b7c <HAL_RCC_OscConfig+0xb0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007b6a:	f7fc fd45 	bl	80045f8 <HAL_GetTick>
 8007b6e:	4602      	mov	r2, r0
 8007b70:	6a3b      	ldr	r3, [r7, #32]
 8007b72:	1ad3      	subs	r3, r2, r3
 8007b74:	2b64      	cmp	r3, #100	; 0x64
 8007b76:	d901      	bls.n	8007b7c <HAL_RCC_OscConfig+0xb0>
          {
            return HAL_TIMEOUT;
 8007b78:	2303      	movs	r3, #3
 8007b7a:	e1e8      	b.n	8007f4e <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007b7c:	4b7e      	ldr	r3, [pc, #504]	; (8007d78 <HAL_RCC_OscConfig+0x2ac>)
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d1f0      	bne.n	8007b6a <HAL_RCC_OscConfig+0x9e>
 8007b88:	e000      	b.n	8007b8c <HAL_RCC_OscConfig+0xc0>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007b8a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	f003 0302 	and.w	r3, r3, #2
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d077      	beq.n	8007c88 <HAL_RCC_OscConfig+0x1bc>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007b98:	4b77      	ldr	r3, [pc, #476]	; (8007d78 <HAL_RCC_OscConfig+0x2ac>)
 8007b9a:	689b      	ldr	r3, [r3, #8]
 8007b9c:	f003 030c 	and.w	r3, r3, #12
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d00b      	beq.n	8007bbc <HAL_RCC_OscConfig+0xf0>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007ba4:	4b74      	ldr	r3, [pc, #464]	; (8007d78 <HAL_RCC_OscConfig+0x2ac>)
 8007ba6:	689b      	ldr	r3, [r3, #8]
 8007ba8:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007bac:	2b08      	cmp	r3, #8
 8007bae:	d126      	bne.n	8007bfe <HAL_RCC_OscConfig+0x132>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007bb0:	4b71      	ldr	r3, [pc, #452]	; (8007d78 <HAL_RCC_OscConfig+0x2ac>)
 8007bb2:	685b      	ldr	r3, [r3, #4]
 8007bb4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d120      	bne.n	8007bfe <HAL_RCC_OscConfig+0x132>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007bbc:	4b6e      	ldr	r3, [pc, #440]	; (8007d78 <HAL_RCC_OscConfig+0x2ac>)
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	f003 0302 	and.w	r3, r3, #2
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d005      	beq.n	8007bd4 <HAL_RCC_OscConfig+0x108>
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	68db      	ldr	r3, [r3, #12]
 8007bcc:	2b01      	cmp	r3, #1
 8007bce:	d001      	beq.n	8007bd4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007bd0:	2301      	movs	r3, #1
 8007bd2:	e1bc      	b.n	8007f4e <HAL_RCC_OscConfig+0x482>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007bd4:	4b68      	ldr	r3, [pc, #416]	; (8007d78 <HAL_RCC_OscConfig+0x2ac>)
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	691b      	ldr	r3, [r3, #16]
 8007be0:	21f8      	movs	r1, #248	; 0xf8
 8007be2:	61b9      	str	r1, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007be4:	69b9      	ldr	r1, [r7, #24]
 8007be6:	fa91 f1a1 	rbit	r1, r1
 8007bea:	6179      	str	r1, [r7, #20]
  return result;
 8007bec:	6979      	ldr	r1, [r7, #20]
 8007bee:	fab1 f181 	clz	r1, r1
 8007bf2:	b2c9      	uxtb	r1, r1
 8007bf4:	408b      	lsls	r3, r1
 8007bf6:	4960      	ldr	r1, [pc, #384]	; (8007d78 <HAL_RCC_OscConfig+0x2ac>)
 8007bf8:	4313      	orrs	r3, r2
 8007bfa:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007bfc:	e044      	b.n	8007c88 <HAL_RCC_OscConfig+0x1bc>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	68db      	ldr	r3, [r3, #12]
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d02a      	beq.n	8007c5c <HAL_RCC_OscConfig+0x190>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007c06:	4b5e      	ldr	r3, [pc, #376]	; (8007d80 <HAL_RCC_OscConfig+0x2b4>)
 8007c08:	2201      	movs	r2, #1
 8007c0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007c0c:	f7fc fcf4 	bl	80045f8 <HAL_GetTick>
 8007c10:	6238      	str	r0, [r7, #32]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007c12:	e008      	b.n	8007c26 <HAL_RCC_OscConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007c14:	f7fc fcf0 	bl	80045f8 <HAL_GetTick>
 8007c18:	4602      	mov	r2, r0
 8007c1a:	6a3b      	ldr	r3, [r7, #32]
 8007c1c:	1ad3      	subs	r3, r2, r3
 8007c1e:	2b02      	cmp	r3, #2
 8007c20:	d901      	bls.n	8007c26 <HAL_RCC_OscConfig+0x15a>
          {
            return HAL_TIMEOUT;
 8007c22:	2303      	movs	r3, #3
 8007c24:	e193      	b.n	8007f4e <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007c26:	4b54      	ldr	r3, [pc, #336]	; (8007d78 <HAL_RCC_OscConfig+0x2ac>)
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	f003 0302 	and.w	r3, r3, #2
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d0f0      	beq.n	8007c14 <HAL_RCC_OscConfig+0x148>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007c32:	4b51      	ldr	r3, [pc, #324]	; (8007d78 <HAL_RCC_OscConfig+0x2ac>)
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	691b      	ldr	r3, [r3, #16]
 8007c3e:	21f8      	movs	r1, #248	; 0xf8
 8007c40:	6139      	str	r1, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007c42:	6939      	ldr	r1, [r7, #16]
 8007c44:	fa91 f1a1 	rbit	r1, r1
 8007c48:	60f9      	str	r1, [r7, #12]
  return result;
 8007c4a:	68f9      	ldr	r1, [r7, #12]
 8007c4c:	fab1 f181 	clz	r1, r1
 8007c50:	b2c9      	uxtb	r1, r1
 8007c52:	408b      	lsls	r3, r1
 8007c54:	4948      	ldr	r1, [pc, #288]	; (8007d78 <HAL_RCC_OscConfig+0x2ac>)
 8007c56:	4313      	orrs	r3, r2
 8007c58:	600b      	str	r3, [r1, #0]
 8007c5a:	e015      	b.n	8007c88 <HAL_RCC_OscConfig+0x1bc>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007c5c:	4b48      	ldr	r3, [pc, #288]	; (8007d80 <HAL_RCC_OscConfig+0x2b4>)
 8007c5e:	2200      	movs	r2, #0
 8007c60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007c62:	f7fc fcc9 	bl	80045f8 <HAL_GetTick>
 8007c66:	6238      	str	r0, [r7, #32]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007c68:	e008      	b.n	8007c7c <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007c6a:	f7fc fcc5 	bl	80045f8 <HAL_GetTick>
 8007c6e:	4602      	mov	r2, r0
 8007c70:	6a3b      	ldr	r3, [r7, #32]
 8007c72:	1ad3      	subs	r3, r2, r3
 8007c74:	2b02      	cmp	r3, #2
 8007c76:	d901      	bls.n	8007c7c <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8007c78:	2303      	movs	r3, #3
 8007c7a:	e168      	b.n	8007f4e <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007c7c:	4b3e      	ldr	r3, [pc, #248]	; (8007d78 <HAL_RCC_OscConfig+0x2ac>)
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	f003 0302 	and.w	r3, r3, #2
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	d1f0      	bne.n	8007c6a <HAL_RCC_OscConfig+0x19e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	f003 0308 	and.w	r3, r3, #8
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d030      	beq.n	8007cf6 <HAL_RCC_OscConfig+0x22a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	695b      	ldr	r3, [r3, #20]
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d016      	beq.n	8007cca <HAL_RCC_OscConfig+0x1fe>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007c9c:	4b39      	ldr	r3, [pc, #228]	; (8007d84 <HAL_RCC_OscConfig+0x2b8>)
 8007c9e:	2201      	movs	r2, #1
 8007ca0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007ca2:	f7fc fca9 	bl	80045f8 <HAL_GetTick>
 8007ca6:	6238      	str	r0, [r7, #32]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007ca8:	e008      	b.n	8007cbc <HAL_RCC_OscConfig+0x1f0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007caa:	f7fc fca5 	bl	80045f8 <HAL_GetTick>
 8007cae:	4602      	mov	r2, r0
 8007cb0:	6a3b      	ldr	r3, [r7, #32]
 8007cb2:	1ad3      	subs	r3, r2, r3
 8007cb4:	2b02      	cmp	r3, #2
 8007cb6:	d901      	bls.n	8007cbc <HAL_RCC_OscConfig+0x1f0>
        {
          return HAL_TIMEOUT;
 8007cb8:	2303      	movs	r3, #3
 8007cba:	e148      	b.n	8007f4e <HAL_RCC_OscConfig+0x482>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007cbc:	4b2e      	ldr	r3, [pc, #184]	; (8007d78 <HAL_RCC_OscConfig+0x2ac>)
 8007cbe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007cc0:	f003 0302 	and.w	r3, r3, #2
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d0f0      	beq.n	8007caa <HAL_RCC_OscConfig+0x1de>
 8007cc8:	e015      	b.n	8007cf6 <HAL_RCC_OscConfig+0x22a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007cca:	4b2e      	ldr	r3, [pc, #184]	; (8007d84 <HAL_RCC_OscConfig+0x2b8>)
 8007ccc:	2200      	movs	r2, #0
 8007cce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007cd0:	f7fc fc92 	bl	80045f8 <HAL_GetTick>
 8007cd4:	6238      	str	r0, [r7, #32]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007cd6:	e008      	b.n	8007cea <HAL_RCC_OscConfig+0x21e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007cd8:	f7fc fc8e 	bl	80045f8 <HAL_GetTick>
 8007cdc:	4602      	mov	r2, r0
 8007cde:	6a3b      	ldr	r3, [r7, #32]
 8007ce0:	1ad3      	subs	r3, r2, r3
 8007ce2:	2b02      	cmp	r3, #2
 8007ce4:	d901      	bls.n	8007cea <HAL_RCC_OscConfig+0x21e>
        {
          return HAL_TIMEOUT;
 8007ce6:	2303      	movs	r3, #3
 8007ce8:	e131      	b.n	8007f4e <HAL_RCC_OscConfig+0x482>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007cea:	4b23      	ldr	r3, [pc, #140]	; (8007d78 <HAL_RCC_OscConfig+0x2ac>)
 8007cec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007cee:	f003 0302 	and.w	r3, r3, #2
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d1f0      	bne.n	8007cd8 <HAL_RCC_OscConfig+0x20c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	f003 0304 	and.w	r3, r3, #4
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	f000 8088 	beq.w	8007e14 <HAL_RCC_OscConfig+0x348>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007d04:	2300      	movs	r3, #0
 8007d06:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007d0a:	4b1b      	ldr	r3, [pc, #108]	; (8007d78 <HAL_RCC_OscConfig+0x2ac>)
 8007d0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d110      	bne.n	8007d38 <HAL_RCC_OscConfig+0x26c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007d16:	2300      	movs	r3, #0
 8007d18:	60bb      	str	r3, [r7, #8]
 8007d1a:	4b17      	ldr	r3, [pc, #92]	; (8007d78 <HAL_RCC_OscConfig+0x2ac>)
 8007d1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d1e:	4a16      	ldr	r2, [pc, #88]	; (8007d78 <HAL_RCC_OscConfig+0x2ac>)
 8007d20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007d24:	6413      	str	r3, [r2, #64]	; 0x40
 8007d26:	4b14      	ldr	r3, [pc, #80]	; (8007d78 <HAL_RCC_OscConfig+0x2ac>)
 8007d28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007d2e:	60bb      	str	r3, [r7, #8]
 8007d30:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007d32:	2301      	movs	r3, #1
 8007d34:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8007d38:	4b13      	ldr	r3, [pc, #76]	; (8007d88 <HAL_RCC_OscConfig+0x2bc>)
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	4a12      	ldr	r2, [pc, #72]	; (8007d88 <HAL_RCC_OscConfig+0x2bc>)
 8007d3e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007d42:	6013      	str	r3, [r2, #0]

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007d44:	4b10      	ldr	r3, [pc, #64]	; (8007d88 <HAL_RCC_OscConfig+0x2bc>)
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d123      	bne.n	8007d98 <HAL_RCC_OscConfig+0x2cc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007d50:	4b0d      	ldr	r3, [pc, #52]	; (8007d88 <HAL_RCC_OscConfig+0x2bc>)
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	4a0c      	ldr	r2, [pc, #48]	; (8007d88 <HAL_RCC_OscConfig+0x2bc>)
 8007d56:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007d5a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007d5c:	f7fc fc4c 	bl	80045f8 <HAL_GetTick>
 8007d60:	6238      	str	r0, [r7, #32]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007d62:	e013      	b.n	8007d8c <HAL_RCC_OscConfig+0x2c0>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007d64:	f7fc fc48 	bl	80045f8 <HAL_GetTick>
 8007d68:	4602      	mov	r2, r0
 8007d6a:	6a3b      	ldr	r3, [r7, #32]
 8007d6c:	1ad3      	subs	r3, r2, r3
 8007d6e:	2b02      	cmp	r3, #2
 8007d70:	d90c      	bls.n	8007d8c <HAL_RCC_OscConfig+0x2c0>
        {
          return HAL_TIMEOUT;
 8007d72:	2303      	movs	r3, #3
 8007d74:	e0eb      	b.n	8007f4e <HAL_RCC_OscConfig+0x482>
 8007d76:	bf00      	nop
 8007d78:	40023800 	.word	0x40023800
 8007d7c:	40023802 	.word	0x40023802
 8007d80:	42470000 	.word	0x42470000
 8007d84:	42470e80 	.word	0x42470e80
 8007d88:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007d8c:	4b72      	ldr	r3, [pc, #456]	; (8007f58 <HAL_RCC_OscConfig+0x48c>)
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d0e5      	beq.n	8007d64 <HAL_RCC_OscConfig+0x298>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	689a      	ldr	r2, [r3, #8]
 8007d9c:	4b6f      	ldr	r3, [pc, #444]	; (8007f5c <HAL_RCC_OscConfig+0x490>)
 8007d9e:	b2d2      	uxtb	r2, r2
 8007da0:	701a      	strb	r2, [r3, #0]
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	689b      	ldr	r3, [r3, #8]
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d015      	beq.n	8007dd6 <HAL_RCC_OscConfig+0x30a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007daa:	f7fc fc25 	bl	80045f8 <HAL_GetTick>
 8007dae:	6238      	str	r0, [r7, #32]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007db0:	e00a      	b.n	8007dc8 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007db2:	f7fc fc21 	bl	80045f8 <HAL_GetTick>
 8007db6:	4602      	mov	r2, r0
 8007db8:	6a3b      	ldr	r3, [r7, #32]
 8007dba:	1ad3      	subs	r3, r2, r3
 8007dbc:	f241 3288 	movw	r2, #5000	; 0x1388
 8007dc0:	4293      	cmp	r3, r2
 8007dc2:	d901      	bls.n	8007dc8 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8007dc4:	2303      	movs	r3, #3
 8007dc6:	e0c2      	b.n	8007f4e <HAL_RCC_OscConfig+0x482>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007dc8:	4b65      	ldr	r3, [pc, #404]	; (8007f60 <HAL_RCC_OscConfig+0x494>)
 8007dca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007dcc:	f003 0302 	and.w	r3, r3, #2
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d0ee      	beq.n	8007db2 <HAL_RCC_OscConfig+0x2e6>
 8007dd4:	e014      	b.n	8007e00 <HAL_RCC_OscConfig+0x334>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007dd6:	f7fc fc0f 	bl	80045f8 <HAL_GetTick>
 8007dda:	6238      	str	r0, [r7, #32]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007ddc:	e00a      	b.n	8007df4 <HAL_RCC_OscConfig+0x328>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007dde:	f7fc fc0b 	bl	80045f8 <HAL_GetTick>
 8007de2:	4602      	mov	r2, r0
 8007de4:	6a3b      	ldr	r3, [r7, #32]
 8007de6:	1ad3      	subs	r3, r2, r3
 8007de8:	f241 3288 	movw	r2, #5000	; 0x1388
 8007dec:	4293      	cmp	r3, r2
 8007dee:	d901      	bls.n	8007df4 <HAL_RCC_OscConfig+0x328>
        {
          return HAL_TIMEOUT;
 8007df0:	2303      	movs	r3, #3
 8007df2:	e0ac      	b.n	8007f4e <HAL_RCC_OscConfig+0x482>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007df4:	4b5a      	ldr	r3, [pc, #360]	; (8007f60 <HAL_RCC_OscConfig+0x494>)
 8007df6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007df8:	f003 0302 	and.w	r3, r3, #2
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d1ee      	bne.n	8007dde <HAL_RCC_OscConfig+0x312>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007e00:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007e04:	2b01      	cmp	r3, #1
 8007e06:	d105      	bne.n	8007e14 <HAL_RCC_OscConfig+0x348>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007e08:	4b55      	ldr	r3, [pc, #340]	; (8007f60 <HAL_RCC_OscConfig+0x494>)
 8007e0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e0c:	4a54      	ldr	r2, [pc, #336]	; (8007f60 <HAL_RCC_OscConfig+0x494>)
 8007e0e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007e12:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	699b      	ldr	r3, [r3, #24]
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	f000 8097 	beq.w	8007f4c <HAL_RCC_OscConfig+0x480>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007e1e:	4b50      	ldr	r3, [pc, #320]	; (8007f60 <HAL_RCC_OscConfig+0x494>)
 8007e20:	689b      	ldr	r3, [r3, #8]
 8007e22:	f003 030c 	and.w	r3, r3, #12
 8007e26:	2b08      	cmp	r3, #8
 8007e28:	d061      	beq.n	8007eee <HAL_RCC_OscConfig+0x422>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	699b      	ldr	r3, [r3, #24]
 8007e2e:	2b02      	cmp	r3, #2
 8007e30:	d146      	bne.n	8007ec0 <HAL_RCC_OscConfig+0x3f4>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007e32:	4b4c      	ldr	r3, [pc, #304]	; (8007f64 <HAL_RCC_OscConfig+0x498>)
 8007e34:	2200      	movs	r2, #0
 8007e36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007e38:	f7fc fbde 	bl	80045f8 <HAL_GetTick>
 8007e3c:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007e3e:	e008      	b.n	8007e52 <HAL_RCC_OscConfig+0x386>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007e40:	f7fc fbda 	bl	80045f8 <HAL_GetTick>
 8007e44:	4602      	mov	r2, r0
 8007e46:	6a3b      	ldr	r3, [r7, #32]
 8007e48:	1ad3      	subs	r3, r2, r3
 8007e4a:	2b64      	cmp	r3, #100	; 0x64
 8007e4c:	d901      	bls.n	8007e52 <HAL_RCC_OscConfig+0x386>
          {
            return HAL_TIMEOUT;
 8007e4e:	2303      	movs	r3, #3
 8007e50:	e07d      	b.n	8007f4e <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007e52:	4b43      	ldr	r3, [pc, #268]	; (8007f60 <HAL_RCC_OscConfig+0x494>)
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d1f0      	bne.n	8007e40 <HAL_RCC_OscConfig+0x374>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007e5e:	4b40      	ldr	r3, [pc, #256]	; (8007f60 <HAL_RCC_OscConfig+0x494>)
 8007e60:	685a      	ldr	r2, [r3, #4]
 8007e62:	4b41      	ldr	r3, [pc, #260]	; (8007f68 <HAL_RCC_OscConfig+0x49c>)
 8007e64:	4013      	ands	r3, r2
 8007e66:	687a      	ldr	r2, [r7, #4]
 8007e68:	69d1      	ldr	r1, [r2, #28]
 8007e6a:	687a      	ldr	r2, [r7, #4]
 8007e6c:	6a12      	ldr	r2, [r2, #32]
 8007e6e:	4311      	orrs	r1, r2
 8007e70:	687a      	ldr	r2, [r7, #4]
 8007e72:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007e74:	0192      	lsls	r2, r2, #6
 8007e76:	4311      	orrs	r1, r2
 8007e78:	687a      	ldr	r2, [r7, #4]
 8007e7a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8007e7c:	0612      	lsls	r2, r2, #24
 8007e7e:	4311      	orrs	r1, r2
 8007e80:	687a      	ldr	r2, [r7, #4]
 8007e82:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8007e84:	0852      	lsrs	r2, r2, #1
 8007e86:	3a01      	subs	r2, #1
 8007e88:	0412      	lsls	r2, r2, #16
 8007e8a:	430a      	orrs	r2, r1
 8007e8c:	4934      	ldr	r1, [pc, #208]	; (8007f60 <HAL_RCC_OscConfig+0x494>)
 8007e8e:	4313      	orrs	r3, r2
 8007e90:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007e92:	4b34      	ldr	r3, [pc, #208]	; (8007f64 <HAL_RCC_OscConfig+0x498>)
 8007e94:	2201      	movs	r2, #1
 8007e96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007e98:	f7fc fbae 	bl	80045f8 <HAL_GetTick>
 8007e9c:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007e9e:	e008      	b.n	8007eb2 <HAL_RCC_OscConfig+0x3e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007ea0:	f7fc fbaa 	bl	80045f8 <HAL_GetTick>
 8007ea4:	4602      	mov	r2, r0
 8007ea6:	6a3b      	ldr	r3, [r7, #32]
 8007ea8:	1ad3      	subs	r3, r2, r3
 8007eaa:	2b64      	cmp	r3, #100	; 0x64
 8007eac:	d901      	bls.n	8007eb2 <HAL_RCC_OscConfig+0x3e6>
          {
            return HAL_TIMEOUT;
 8007eae:	2303      	movs	r3, #3
 8007eb0:	e04d      	b.n	8007f4e <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007eb2:	4b2b      	ldr	r3, [pc, #172]	; (8007f60 <HAL_RCC_OscConfig+0x494>)
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d0f0      	beq.n	8007ea0 <HAL_RCC_OscConfig+0x3d4>
 8007ebe:	e045      	b.n	8007f4c <HAL_RCC_OscConfig+0x480>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007ec0:	4b28      	ldr	r3, [pc, #160]	; (8007f64 <HAL_RCC_OscConfig+0x498>)
 8007ec2:	2200      	movs	r2, #0
 8007ec4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007ec6:	f7fc fb97 	bl	80045f8 <HAL_GetTick>
 8007eca:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007ecc:	e008      	b.n	8007ee0 <HAL_RCC_OscConfig+0x414>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007ece:	f7fc fb93 	bl	80045f8 <HAL_GetTick>
 8007ed2:	4602      	mov	r2, r0
 8007ed4:	6a3b      	ldr	r3, [r7, #32]
 8007ed6:	1ad3      	subs	r3, r2, r3
 8007ed8:	2b64      	cmp	r3, #100	; 0x64
 8007eda:	d901      	bls.n	8007ee0 <HAL_RCC_OscConfig+0x414>
          {
            return HAL_TIMEOUT;
 8007edc:	2303      	movs	r3, #3
 8007ede:	e036      	b.n	8007f4e <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007ee0:	4b1f      	ldr	r3, [pc, #124]	; (8007f60 <HAL_RCC_OscConfig+0x494>)
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	d1f0      	bne.n	8007ece <HAL_RCC_OscConfig+0x402>
 8007eec:	e02e      	b.n	8007f4c <HAL_RCC_OscConfig+0x480>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	699b      	ldr	r3, [r3, #24]
 8007ef2:	2b01      	cmp	r3, #1
 8007ef4:	d101      	bne.n	8007efa <HAL_RCC_OscConfig+0x42e>
      {
        return HAL_ERROR;
 8007ef6:	2301      	movs	r3, #1
 8007ef8:	e029      	b.n	8007f4e <HAL_RCC_OscConfig+0x482>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        uint32_t pllcfgr = RCC->PLLCFGR;
 8007efa:	4b19      	ldr	r3, [pc, #100]	; (8007f60 <HAL_RCC_OscConfig+0x494>)
 8007efc:	685b      	ldr	r3, [r3, #4]
 8007efe:	61fb      	str	r3, [r7, #28]
      
        if((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007f00:	69fb      	ldr	r3, [r7, #28]
 8007f02:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	69db      	ldr	r3, [r3, #28]
 8007f0a:	429a      	cmp	r2, r3
 8007f0c:	d11c      	bne.n	8007f48 <HAL_RCC_OscConfig+0x47c>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007f0e:	69fb      	ldr	r3, [r7, #28]
 8007f10:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007f18:	429a      	cmp	r2, r3
 8007f1a:	d115      	bne.n	8007f48 <HAL_RCC_OscConfig+0x47c>
           ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8007f1c:	69fb      	ldr	r3, [r7, #28]
 8007f1e:	099b      	lsrs	r3, r3, #6
 8007f20:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007f28:	429a      	cmp	r2, r3
 8007f2a:	d10d      	bne.n	8007f48 <HAL_RCC_OscConfig+0x47c>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8007f2c:	69fb      	ldr	r3, [r7, #28]
 8007f2e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8007f36:	429a      	cmp	r2, r3
 8007f38:	d106      	bne.n	8007f48 <HAL_RCC_OscConfig+0x47c>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8007f3a:	69fb      	ldr	r3, [r7, #28]
 8007f3c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8007f44:	429a      	cmp	r2, r3
 8007f46:	d001      	beq.n	8007f4c <HAL_RCC_OscConfig+0x480>
        {
          return HAL_ERROR;
 8007f48:	2301      	movs	r3, #1
 8007f4a:	e000      	b.n	8007f4e <HAL_RCC_OscConfig+0x482>
        }
      }
    }
  }
  return HAL_OK;
 8007f4c:	2300      	movs	r3, #0
}
 8007f4e:	4618      	mov	r0, r3
 8007f50:	3728      	adds	r7, #40	; 0x28
 8007f52:	46bd      	mov	sp, r7
 8007f54:	bd80      	pop	{r7, pc}
 8007f56:	bf00      	nop
 8007f58:	40007000 	.word	0x40007000
 8007f5c:	40023870 	.word	0x40023870
 8007f60:	40023800 	.word	0x40023800
 8007f64:	42470060 	.word	0x42470060
 8007f68:	f0bc8000 	.word	0xf0bc8000

08007f6c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007f6c:	b580      	push	{r7, lr}
 8007f6e:	b086      	sub	sp, #24
 8007f70:	af00      	add	r7, sp, #0
 8007f72:	6078      	str	r0, [r7, #4]
 8007f74:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d101      	bne.n	8007f80 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007f7c:	2301      	movs	r3, #1
 8007f7e:	e0d2      	b.n	8008126 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007f80:	4b6b      	ldr	r3, [pc, #428]	; (8008130 <HAL_RCC_ClockConfig+0x1c4>)
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	f003 030f 	and.w	r3, r3, #15
 8007f88:	683a      	ldr	r2, [r7, #0]
 8007f8a:	429a      	cmp	r2, r3
 8007f8c:	d90c      	bls.n	8007fa8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007f8e:	4b68      	ldr	r3, [pc, #416]	; (8008130 <HAL_RCC_ClockConfig+0x1c4>)
 8007f90:	683a      	ldr	r2, [r7, #0]
 8007f92:	b2d2      	uxtb	r2, r2
 8007f94:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007f96:	4b66      	ldr	r3, [pc, #408]	; (8008130 <HAL_RCC_ClockConfig+0x1c4>)
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	f003 030f 	and.w	r3, r3, #15
 8007f9e:	683a      	ldr	r2, [r7, #0]
 8007fa0:	429a      	cmp	r2, r3
 8007fa2:	d001      	beq.n	8007fa8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007fa4:	2301      	movs	r3, #1
 8007fa6:	e0be      	b.n	8008126 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	f003 0302 	and.w	r3, r3, #2
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d020      	beq.n	8007ff6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	f003 0304 	and.w	r3, r3, #4
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	d005      	beq.n	8007fcc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007fc0:	4b5c      	ldr	r3, [pc, #368]	; (8008134 <HAL_RCC_ClockConfig+0x1c8>)
 8007fc2:	689b      	ldr	r3, [r3, #8]
 8007fc4:	4a5b      	ldr	r2, [pc, #364]	; (8008134 <HAL_RCC_ClockConfig+0x1c8>)
 8007fc6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8007fca:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	f003 0308 	and.w	r3, r3, #8
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d005      	beq.n	8007fe4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3U));
 8007fd8:	4b56      	ldr	r3, [pc, #344]	; (8008134 <HAL_RCC_ClockConfig+0x1c8>)
 8007fda:	689b      	ldr	r3, [r3, #8]
 8007fdc:	4a55      	ldr	r2, [pc, #340]	; (8008134 <HAL_RCC_ClockConfig+0x1c8>)
 8007fde:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8007fe2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007fe4:	4b53      	ldr	r3, [pc, #332]	; (8008134 <HAL_RCC_ClockConfig+0x1c8>)
 8007fe6:	689b      	ldr	r3, [r3, #8]
 8007fe8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	689b      	ldr	r3, [r3, #8]
 8007ff0:	4950      	ldr	r1, [pc, #320]	; (8008134 <HAL_RCC_ClockConfig+0x1c8>)
 8007ff2:	4313      	orrs	r3, r2
 8007ff4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	f003 0301 	and.w	r3, r3, #1
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d040      	beq.n	8008084 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	685b      	ldr	r3, [r3, #4]
 8008006:	2b01      	cmp	r3, #1
 8008008:	d107      	bne.n	800801a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800800a:	4b4a      	ldr	r3, [pc, #296]	; (8008134 <HAL_RCC_ClockConfig+0x1c8>)
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008012:	2b00      	cmp	r3, #0
 8008014:	d115      	bne.n	8008042 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8008016:	2301      	movs	r3, #1
 8008018:	e085      	b.n	8008126 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	685b      	ldr	r3, [r3, #4]
 800801e:	2b02      	cmp	r3, #2
 8008020:	d107      	bne.n	8008032 <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008022:	4b44      	ldr	r3, [pc, #272]	; (8008134 <HAL_RCC_ClockConfig+0x1c8>)
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800802a:	2b00      	cmp	r3, #0
 800802c:	d109      	bne.n	8008042 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800802e:	2301      	movs	r3, #1
 8008030:	e079      	b.n	8008126 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008032:	4b40      	ldr	r3, [pc, #256]	; (8008134 <HAL_RCC_ClockConfig+0x1c8>)
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	f003 0302 	and.w	r3, r3, #2
 800803a:	2b00      	cmp	r3, #0
 800803c:	d101      	bne.n	8008042 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800803e:	2301      	movs	r3, #1
 8008040:	e071      	b.n	8008126 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008042:	4b3c      	ldr	r3, [pc, #240]	; (8008134 <HAL_RCC_ClockConfig+0x1c8>)
 8008044:	689b      	ldr	r3, [r3, #8]
 8008046:	f023 0203 	bic.w	r2, r3, #3
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	685b      	ldr	r3, [r3, #4]
 800804e:	4939      	ldr	r1, [pc, #228]	; (8008134 <HAL_RCC_ClockConfig+0x1c8>)
 8008050:	4313      	orrs	r3, r2
 8008052:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008054:	f7fc fad0 	bl	80045f8 <HAL_GetTick>
 8008058:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800805a:	e00a      	b.n	8008072 <HAL_RCC_ClockConfig+0x106>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800805c:	f7fc facc 	bl	80045f8 <HAL_GetTick>
 8008060:	4602      	mov	r2, r0
 8008062:	697b      	ldr	r3, [r7, #20]
 8008064:	1ad3      	subs	r3, r2, r3
 8008066:	f241 3288 	movw	r2, #5000	; 0x1388
 800806a:	4293      	cmp	r3, r2
 800806c:	d901      	bls.n	8008072 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800806e:	2303      	movs	r3, #3
 8008070:	e059      	b.n	8008126 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008072:	4b30      	ldr	r3, [pc, #192]	; (8008134 <HAL_RCC_ClockConfig+0x1c8>)
 8008074:	689b      	ldr	r3, [r3, #8]
 8008076:	f003 020c 	and.w	r2, r3, #12
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	685b      	ldr	r3, [r3, #4]
 800807e:	009b      	lsls	r3, r3, #2
 8008080:	429a      	cmp	r2, r3
 8008082:	d1eb      	bne.n	800805c <HAL_RCC_ClockConfig+0xf0>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008084:	4b2a      	ldr	r3, [pc, #168]	; (8008130 <HAL_RCC_ClockConfig+0x1c4>)
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	f003 030f 	and.w	r3, r3, #15
 800808c:	683a      	ldr	r2, [r7, #0]
 800808e:	429a      	cmp	r2, r3
 8008090:	d20c      	bcs.n	80080ac <HAL_RCC_ClockConfig+0x140>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008092:	4b27      	ldr	r3, [pc, #156]	; (8008130 <HAL_RCC_ClockConfig+0x1c4>)
 8008094:	683a      	ldr	r2, [r7, #0]
 8008096:	b2d2      	uxtb	r2, r2
 8008098:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800809a:	4b25      	ldr	r3, [pc, #148]	; (8008130 <HAL_RCC_ClockConfig+0x1c4>)
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	f003 030f 	and.w	r3, r3, #15
 80080a2:	683a      	ldr	r2, [r7, #0]
 80080a4:	429a      	cmp	r2, r3
 80080a6:	d001      	beq.n	80080ac <HAL_RCC_ClockConfig+0x140>
    {
      return HAL_ERROR;
 80080a8:	2301      	movs	r3, #1
 80080aa:	e03c      	b.n	8008126 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	f003 0304 	and.w	r3, r3, #4
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	d008      	beq.n	80080ca <HAL_RCC_ClockConfig+0x15e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80080b8:	4b1e      	ldr	r3, [pc, #120]	; (8008134 <HAL_RCC_ClockConfig+0x1c8>)
 80080ba:	689b      	ldr	r3, [r3, #8]
 80080bc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	68db      	ldr	r3, [r3, #12]
 80080c4:	491b      	ldr	r1, [pc, #108]	; (8008134 <HAL_RCC_ClockConfig+0x1c8>)
 80080c6:	4313      	orrs	r3, r2
 80080c8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	f003 0308 	and.w	r3, r3, #8
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d009      	beq.n	80080ea <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80080d6:	4b17      	ldr	r3, [pc, #92]	; (8008134 <HAL_RCC_ClockConfig+0x1c8>)
 80080d8:	689b      	ldr	r3, [r3, #8]
 80080da:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	691b      	ldr	r3, [r3, #16]
 80080e2:	00db      	lsls	r3, r3, #3
 80080e4:	4913      	ldr	r1, [pc, #76]	; (8008134 <HAL_RCC_ClockConfig+0x1c8>)
 80080e6:	4313      	orrs	r3, r2
 80080e8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 80080ea:	f000 f837 	bl	800815c <HAL_RCC_GetSysClockFreq>
 80080ee:	4601      	mov	r1, r0
 80080f0:	4b10      	ldr	r3, [pc, #64]	; (8008134 <HAL_RCC_ClockConfig+0x1c8>)
 80080f2:	689b      	ldr	r3, [r3, #8]
 80080f4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80080f8:	22f0      	movs	r2, #240	; 0xf0
 80080fa:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80080fc:	693a      	ldr	r2, [r7, #16]
 80080fe:	fa92 f2a2 	rbit	r2, r2
 8008102:	60fa      	str	r2, [r7, #12]
  return result;
 8008104:	68fa      	ldr	r2, [r7, #12]
 8008106:	fab2 f282 	clz	r2, r2
 800810a:	b2d2      	uxtb	r2, r2
 800810c:	40d3      	lsrs	r3, r2
 800810e:	4a0a      	ldr	r2, [pc, #40]	; (8008138 <HAL_RCC_ClockConfig+0x1cc>)
 8008110:	5cd3      	ldrb	r3, [r2, r3]
 8008112:	fa21 f303 	lsr.w	r3, r1, r3
 8008116:	4a09      	ldr	r2, [pc, #36]	; (800813c <HAL_RCC_ClockConfig+0x1d0>)
 8008118:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800811a:	4b09      	ldr	r3, [pc, #36]	; (8008140 <HAL_RCC_ClockConfig+0x1d4>)
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	4618      	mov	r0, r3
 8008120:	f7fc fa28 	bl	8004574 <HAL_InitTick>

  return HAL_OK;
 8008124:	2300      	movs	r3, #0
}
 8008126:	4618      	mov	r0, r3
 8008128:	3718      	adds	r7, #24
 800812a:	46bd      	mov	sp, r7
 800812c:	bd80      	pop	{r7, pc}
 800812e:	bf00      	nop
 8008130:	40023c00 	.word	0x40023c00
 8008134:	40023800 	.word	0x40023800
 8008138:	08011774 	.word	0x08011774
 800813c:	20000004 	.word	0x20000004
 8008140:	20000008 	.word	0x20000008

08008144 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M3 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8008144:	b480      	push	{r7}
 8008146:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 8008148:	4b03      	ldr	r3, [pc, #12]	; (8008158 <HAL_RCC_EnableCSS+0x14>)
 800814a:	2201      	movs	r2, #1
 800814c:	601a      	str	r2, [r3, #0]
}
 800814e:	bf00      	nop
 8008150:	46bd      	mov	sp, r7
 8008152:	bc80      	pop	{r7}
 8008154:	4770      	bx	lr
 8008156:	bf00      	nop
 8008158:	4247004c 	.word	0x4247004c

0800815c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800815c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8008160:	b084      	sub	sp, #16
 8008162:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8008164:	2300      	movs	r3, #0
 8008166:	607b      	str	r3, [r7, #4]
 8008168:	2300      	movs	r3, #0
 800816a:	60fb      	str	r3, [r7, #12]
 800816c:	2300      	movs	r3, #0
 800816e:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8008170:	2300      	movs	r3, #0
 8008172:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008174:	4b67      	ldr	r3, [pc, #412]	; (8008314 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8008176:	689b      	ldr	r3, [r3, #8]
 8008178:	f003 030c 	and.w	r3, r3, #12
 800817c:	2b08      	cmp	r3, #8
 800817e:	d00d      	beq.n	800819c <HAL_RCC_GetSysClockFreq+0x40>
 8008180:	2b08      	cmp	r3, #8
 8008182:	f200 80bd 	bhi.w	8008300 <HAL_RCC_GetSysClockFreq+0x1a4>
 8008186:	2b00      	cmp	r3, #0
 8008188:	d002      	beq.n	8008190 <HAL_RCC_GetSysClockFreq+0x34>
 800818a:	2b04      	cmp	r3, #4
 800818c:	d003      	beq.n	8008196 <HAL_RCC_GetSysClockFreq+0x3a>
 800818e:	e0b7      	b.n	8008300 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008190:	4b61      	ldr	r3, [pc, #388]	; (8008318 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8008192:	60bb      	str	r3, [r7, #8]
       break;
 8008194:	e0b7      	b.n	8008306 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8008196:	4b60      	ldr	r3, [pc, #384]	; (8008318 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8008198:	60bb      	str	r3, [r7, #8]
      break;
 800819a:	e0b4      	b.n	8008306 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800819c:	4b5d      	ldr	r3, [pc, #372]	; (8008314 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800819e:	685b      	ldr	r3, [r3, #4]
 80081a0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80081a4:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80081a6:	4b5b      	ldr	r3, [pc, #364]	; (8008314 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80081a8:	685b      	ldr	r3, [r3, #4]
 80081aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d04d      	beq.n	800824e <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80081b2:	4b58      	ldr	r3, [pc, #352]	; (8008314 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80081b4:	685b      	ldr	r3, [r3, #4]
 80081b6:	099b      	lsrs	r3, r3, #6
 80081b8:	461a      	mov	r2, r3
 80081ba:	f04f 0300 	mov.w	r3, #0
 80081be:	f240 10ff 	movw	r0, #511	; 0x1ff
 80081c2:	f04f 0100 	mov.w	r1, #0
 80081c6:	ea02 0800 	and.w	r8, r2, r0
 80081ca:	ea03 0901 	and.w	r9, r3, r1
 80081ce:	4640      	mov	r0, r8
 80081d0:	4649      	mov	r1, r9
 80081d2:	f04f 0200 	mov.w	r2, #0
 80081d6:	f04f 0300 	mov.w	r3, #0
 80081da:	014b      	lsls	r3, r1, #5
 80081dc:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80081e0:	0142      	lsls	r2, r0, #5
 80081e2:	4610      	mov	r0, r2
 80081e4:	4619      	mov	r1, r3
 80081e6:	ebb0 0008 	subs.w	r0, r0, r8
 80081ea:	eb61 0109 	sbc.w	r1, r1, r9
 80081ee:	f04f 0200 	mov.w	r2, #0
 80081f2:	f04f 0300 	mov.w	r3, #0
 80081f6:	018b      	lsls	r3, r1, #6
 80081f8:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80081fc:	0182      	lsls	r2, r0, #6
 80081fe:	1a12      	subs	r2, r2, r0
 8008200:	eb63 0301 	sbc.w	r3, r3, r1
 8008204:	f04f 0000 	mov.w	r0, #0
 8008208:	f04f 0100 	mov.w	r1, #0
 800820c:	00d9      	lsls	r1, r3, #3
 800820e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008212:	00d0      	lsls	r0, r2, #3
 8008214:	4602      	mov	r2, r0
 8008216:	460b      	mov	r3, r1
 8008218:	eb12 0208 	adds.w	r2, r2, r8
 800821c:	eb43 0309 	adc.w	r3, r3, r9
 8008220:	f04f 0000 	mov.w	r0, #0
 8008224:	f04f 0100 	mov.w	r1, #0
 8008228:	0299      	lsls	r1, r3, #10
 800822a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800822e:	0290      	lsls	r0, r2, #10
 8008230:	4602      	mov	r2, r0
 8008232:	460b      	mov	r3, r1
 8008234:	4610      	mov	r0, r2
 8008236:	4619      	mov	r1, r3
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	461a      	mov	r2, r3
 800823c:	f04f 0300 	mov.w	r3, #0
 8008240:	f7f8 fffe 	bl	8001240 <__aeabi_uldivmod>
 8008244:	4602      	mov	r2, r0
 8008246:	460b      	mov	r3, r1
 8008248:	4613      	mov	r3, r2
 800824a:	60fb      	str	r3, [r7, #12]
 800824c:	e04a      	b.n	80082e4 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800824e:	4b31      	ldr	r3, [pc, #196]	; (8008314 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8008250:	685b      	ldr	r3, [r3, #4]
 8008252:	099b      	lsrs	r3, r3, #6
 8008254:	461a      	mov	r2, r3
 8008256:	f04f 0300 	mov.w	r3, #0
 800825a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800825e:	f04f 0100 	mov.w	r1, #0
 8008262:	ea02 0400 	and.w	r4, r2, r0
 8008266:	ea03 0501 	and.w	r5, r3, r1
 800826a:	4620      	mov	r0, r4
 800826c:	4629      	mov	r1, r5
 800826e:	f04f 0200 	mov.w	r2, #0
 8008272:	f04f 0300 	mov.w	r3, #0
 8008276:	014b      	lsls	r3, r1, #5
 8008278:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800827c:	0142      	lsls	r2, r0, #5
 800827e:	4610      	mov	r0, r2
 8008280:	4619      	mov	r1, r3
 8008282:	1b00      	subs	r0, r0, r4
 8008284:	eb61 0105 	sbc.w	r1, r1, r5
 8008288:	f04f 0200 	mov.w	r2, #0
 800828c:	f04f 0300 	mov.w	r3, #0
 8008290:	018b      	lsls	r3, r1, #6
 8008292:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8008296:	0182      	lsls	r2, r0, #6
 8008298:	1a12      	subs	r2, r2, r0
 800829a:	eb63 0301 	sbc.w	r3, r3, r1
 800829e:	f04f 0000 	mov.w	r0, #0
 80082a2:	f04f 0100 	mov.w	r1, #0
 80082a6:	00d9      	lsls	r1, r3, #3
 80082a8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80082ac:	00d0      	lsls	r0, r2, #3
 80082ae:	4602      	mov	r2, r0
 80082b0:	460b      	mov	r3, r1
 80082b2:	1912      	adds	r2, r2, r4
 80082b4:	eb45 0303 	adc.w	r3, r5, r3
 80082b8:	f04f 0000 	mov.w	r0, #0
 80082bc:	f04f 0100 	mov.w	r1, #0
 80082c0:	0299      	lsls	r1, r3, #10
 80082c2:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80082c6:	0290      	lsls	r0, r2, #10
 80082c8:	4602      	mov	r2, r0
 80082ca:	460b      	mov	r3, r1
 80082cc:	4610      	mov	r0, r2
 80082ce:	4619      	mov	r1, r3
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	461a      	mov	r2, r3
 80082d4:	f04f 0300 	mov.w	r3, #0
 80082d8:	f7f8 ffb2 	bl	8001240 <__aeabi_uldivmod>
 80082dc:	4602      	mov	r2, r0
 80082de:	460b      	mov	r3, r1
 80082e0:	4613      	mov	r3, r2
 80082e2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80082e4:	4b0b      	ldr	r3, [pc, #44]	; (8008314 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80082e6:	685b      	ldr	r3, [r3, #4]
 80082e8:	0c1b      	lsrs	r3, r3, #16
 80082ea:	f003 0303 	and.w	r3, r3, #3
 80082ee:	3301      	adds	r3, #1
 80082f0:	005b      	lsls	r3, r3, #1
 80082f2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80082f4:	68fa      	ldr	r2, [r7, #12]
 80082f6:	683b      	ldr	r3, [r7, #0]
 80082f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80082fc:	60bb      	str	r3, [r7, #8]
      break;
 80082fe:	e002      	b.n	8008306 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008300:	4b05      	ldr	r3, [pc, #20]	; (8008318 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8008302:	60bb      	str	r3, [r7, #8]
      break;
 8008304:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008306:	68bb      	ldr	r3, [r7, #8]
}
 8008308:	4618      	mov	r0, r3
 800830a:	3710      	adds	r7, #16
 800830c:	46bd      	mov	sp, r7
 800830e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8008312:	bf00      	nop
 8008314:	40023800 	.word	0x40023800
 8008318:	00f42400 	.word	0x00f42400

0800831c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800831c:	b480      	push	{r7}
 800831e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008320:	4b02      	ldr	r3, [pc, #8]	; (800832c <HAL_RCC_GetHCLKFreq+0x10>)
 8008322:	681b      	ldr	r3, [r3, #0]
}
 8008324:	4618      	mov	r0, r3
 8008326:	46bd      	mov	sp, r7
 8008328:	bc80      	pop	{r7}
 800832a:	4770      	bx	lr
 800832c:	20000004 	.word	0x20000004

08008330 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008330:	b580      	push	{r7, lr}
 8008332:	b082      	sub	sp, #8
 8008334:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> POSITION_VAL(RCC_CFGR_PPRE1)]);
 8008336:	f7ff fff1 	bl	800831c <HAL_RCC_GetHCLKFreq>
 800833a:	4601      	mov	r1, r0
 800833c:	4b0b      	ldr	r3, [pc, #44]	; (800836c <HAL_RCC_GetPCLK1Freq+0x3c>)
 800833e:	689b      	ldr	r3, [r3, #8]
 8008340:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8008344:	f44f 52e0 	mov.w	r2, #7168	; 0x1c00
 8008348:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800834a:	687a      	ldr	r2, [r7, #4]
 800834c:	fa92 f2a2 	rbit	r2, r2
 8008350:	603a      	str	r2, [r7, #0]
  return result;
 8008352:	683a      	ldr	r2, [r7, #0]
 8008354:	fab2 f282 	clz	r2, r2
 8008358:	b2d2      	uxtb	r2, r2
 800835a:	40d3      	lsrs	r3, r2
 800835c:	4a04      	ldr	r2, [pc, #16]	; (8008370 <HAL_RCC_GetPCLK1Freq+0x40>)
 800835e:	5cd3      	ldrb	r3, [r2, r3]
 8008360:	fa21 f303 	lsr.w	r3, r1, r3
}
 8008364:	4618      	mov	r0, r3
 8008366:	3708      	adds	r7, #8
 8008368:	46bd      	mov	sp, r7
 800836a:	bd80      	pop	{r7, pc}
 800836c:	40023800 	.word	0x40023800
 8008370:	08011784 	.word	0x08011784

08008374 <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 8008374:	b580      	push	{r7, lr}
 8008376:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 8008378:	4b06      	ldr	r3, [pc, #24]	; (8008394 <HAL_RCC_NMI_IRQHandler+0x20>)
 800837a:	68db      	ldr	r3, [r3, #12]
 800837c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008380:	2b80      	cmp	r3, #128	; 0x80
 8008382:	d104      	bne.n	800838e <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 8008384:	f000 f80a 	bl	800839c <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 8008388:	4b03      	ldr	r3, [pc, #12]	; (8008398 <HAL_RCC_NMI_IRQHandler+0x24>)
 800838a:	2280      	movs	r2, #128	; 0x80
 800838c:	701a      	strb	r2, [r3, #0]
  }
}
 800838e:	bf00      	nop
 8008390:	bd80      	pop	{r7, pc}
 8008392:	bf00      	nop
 8008394:	40023800 	.word	0x40023800
 8008398:	4002380e 	.word	0x4002380e

0800839c <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval None
  */
__weak void HAL_RCC_CSSCallback(void)
{
 800839c:	b480      	push	{r7}
 800839e:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback could be implemented in the user file
   */
}
 80083a0:	bf00      	nop
 80083a2:	46bd      	mov	sp, r7
 80083a4:	bc80      	pop	{r7}
 80083a6:	4770      	bx	lr

080083a8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80083a8:	b580      	push	{r7, lr}
 80083aa:	b082      	sub	sp, #8
 80083ac:	af00      	add	r7, sp, #0
 80083ae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	d101      	bne.n	80083ba <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80083b6:	2301      	movs	r3, #1
 80083b8:	e041      	b.n	800843e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80083c0:	b2db      	uxtb	r3, r3
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d106      	bne.n	80083d4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	2200      	movs	r2, #0
 80083ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80083ce:	6878      	ldr	r0, [r7, #4]
 80083d0:	f7fb fe9e 	bl	8004110 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	2202      	movs	r2, #2
 80083d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	681a      	ldr	r2, [r3, #0]
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	3304      	adds	r3, #4
 80083e4:	4619      	mov	r1, r3
 80083e6:	4610      	mov	r0, r2
 80083e8:	f000 fc04 	bl	8008bf4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	2201      	movs	r2, #1
 80083f0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	2201      	movs	r2, #1
 80083f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	2201      	movs	r2, #1
 8008400:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	2201      	movs	r2, #1
 8008408:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	2201      	movs	r2, #1
 8008410:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	2201      	movs	r2, #1
 8008418:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	2201      	movs	r2, #1
 8008420:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	2201      	movs	r2, #1
 8008428:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	2201      	movs	r2, #1
 8008430:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	2201      	movs	r2, #1
 8008438:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800843c:	2300      	movs	r3, #0
}
 800843e:	4618      	mov	r0, r3
 8008440:	3708      	adds	r7, #8
 8008442:	46bd      	mov	sp, r7
 8008444:	bd80      	pop	{r7, pc}
	...

08008448 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8008448:	b480      	push	{r7}
 800844a:	b085      	sub	sp, #20
 800844c:	af00      	add	r7, sp, #0
 800844e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008456:	b2db      	uxtb	r3, r3
 8008458:	2b01      	cmp	r3, #1
 800845a:	d001      	beq.n	8008460 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800845c:	2301      	movs	r3, #1
 800845e:	e046      	b.n	80084ee <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	2202      	movs	r2, #2
 8008464:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	4a22      	ldr	r2, [pc, #136]	; (80084f8 <HAL_TIM_Base_Start+0xb0>)
 800846e:	4293      	cmp	r3, r2
 8008470:	d022      	beq.n	80084b8 <HAL_TIM_Base_Start+0x70>
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800847a:	d01d      	beq.n	80084b8 <HAL_TIM_Base_Start+0x70>
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	4a1e      	ldr	r2, [pc, #120]	; (80084fc <HAL_TIM_Base_Start+0xb4>)
 8008482:	4293      	cmp	r3, r2
 8008484:	d018      	beq.n	80084b8 <HAL_TIM_Base_Start+0x70>
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	4a1d      	ldr	r2, [pc, #116]	; (8008500 <HAL_TIM_Base_Start+0xb8>)
 800848c:	4293      	cmp	r3, r2
 800848e:	d013      	beq.n	80084b8 <HAL_TIM_Base_Start+0x70>
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	4a1b      	ldr	r2, [pc, #108]	; (8008504 <HAL_TIM_Base_Start+0xbc>)
 8008496:	4293      	cmp	r3, r2
 8008498:	d00e      	beq.n	80084b8 <HAL_TIM_Base_Start+0x70>
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	4a1a      	ldr	r2, [pc, #104]	; (8008508 <HAL_TIM_Base_Start+0xc0>)
 80084a0:	4293      	cmp	r3, r2
 80084a2:	d009      	beq.n	80084b8 <HAL_TIM_Base_Start+0x70>
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	4a18      	ldr	r2, [pc, #96]	; (800850c <HAL_TIM_Base_Start+0xc4>)
 80084aa:	4293      	cmp	r3, r2
 80084ac:	d004      	beq.n	80084b8 <HAL_TIM_Base_Start+0x70>
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	4a17      	ldr	r2, [pc, #92]	; (8008510 <HAL_TIM_Base_Start+0xc8>)
 80084b4:	4293      	cmp	r3, r2
 80084b6:	d111      	bne.n	80084dc <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	689b      	ldr	r3, [r3, #8]
 80084be:	f003 0307 	and.w	r3, r3, #7
 80084c2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	2b06      	cmp	r3, #6
 80084c8:	d010      	beq.n	80084ec <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	681a      	ldr	r2, [r3, #0]
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	f042 0201 	orr.w	r2, r2, #1
 80084d8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80084da:	e007      	b.n	80084ec <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	681a      	ldr	r2, [r3, #0]
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	f042 0201 	orr.w	r2, r2, #1
 80084ea:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80084ec:	2300      	movs	r3, #0
}
 80084ee:	4618      	mov	r0, r3
 80084f0:	3714      	adds	r7, #20
 80084f2:	46bd      	mov	sp, r7
 80084f4:	bc80      	pop	{r7}
 80084f6:	4770      	bx	lr
 80084f8:	40010000 	.word	0x40010000
 80084fc:	40000400 	.word	0x40000400
 8008500:	40000800 	.word	0x40000800
 8008504:	40000c00 	.word	0x40000c00
 8008508:	40010400 	.word	0x40010400
 800850c:	40014000 	.word	0x40014000
 8008510:	40001800 	.word	0x40001800

08008514 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008514:	b480      	push	{r7}
 8008516:	b085      	sub	sp, #20
 8008518:	af00      	add	r7, sp, #0
 800851a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008522:	b2db      	uxtb	r3, r3
 8008524:	2b01      	cmp	r3, #1
 8008526:	d001      	beq.n	800852c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008528:	2301      	movs	r3, #1
 800852a:	e04e      	b.n	80085ca <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	2202      	movs	r2, #2
 8008530:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	68da      	ldr	r2, [r3, #12]
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	f042 0201 	orr.w	r2, r2, #1
 8008542:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	4a22      	ldr	r2, [pc, #136]	; (80085d4 <HAL_TIM_Base_Start_IT+0xc0>)
 800854a:	4293      	cmp	r3, r2
 800854c:	d022      	beq.n	8008594 <HAL_TIM_Base_Start_IT+0x80>
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008556:	d01d      	beq.n	8008594 <HAL_TIM_Base_Start_IT+0x80>
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	4a1e      	ldr	r2, [pc, #120]	; (80085d8 <HAL_TIM_Base_Start_IT+0xc4>)
 800855e:	4293      	cmp	r3, r2
 8008560:	d018      	beq.n	8008594 <HAL_TIM_Base_Start_IT+0x80>
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	4a1d      	ldr	r2, [pc, #116]	; (80085dc <HAL_TIM_Base_Start_IT+0xc8>)
 8008568:	4293      	cmp	r3, r2
 800856a:	d013      	beq.n	8008594 <HAL_TIM_Base_Start_IT+0x80>
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	4a1b      	ldr	r2, [pc, #108]	; (80085e0 <HAL_TIM_Base_Start_IT+0xcc>)
 8008572:	4293      	cmp	r3, r2
 8008574:	d00e      	beq.n	8008594 <HAL_TIM_Base_Start_IT+0x80>
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	4a1a      	ldr	r2, [pc, #104]	; (80085e4 <HAL_TIM_Base_Start_IT+0xd0>)
 800857c:	4293      	cmp	r3, r2
 800857e:	d009      	beq.n	8008594 <HAL_TIM_Base_Start_IT+0x80>
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	4a18      	ldr	r2, [pc, #96]	; (80085e8 <HAL_TIM_Base_Start_IT+0xd4>)
 8008586:	4293      	cmp	r3, r2
 8008588:	d004      	beq.n	8008594 <HAL_TIM_Base_Start_IT+0x80>
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	4a17      	ldr	r2, [pc, #92]	; (80085ec <HAL_TIM_Base_Start_IT+0xd8>)
 8008590:	4293      	cmp	r3, r2
 8008592:	d111      	bne.n	80085b8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	689b      	ldr	r3, [r3, #8]
 800859a:	f003 0307 	and.w	r3, r3, #7
 800859e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	2b06      	cmp	r3, #6
 80085a4:	d010      	beq.n	80085c8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	681a      	ldr	r2, [r3, #0]
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	f042 0201 	orr.w	r2, r2, #1
 80085b4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80085b6:	e007      	b.n	80085c8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	681a      	ldr	r2, [r3, #0]
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	f042 0201 	orr.w	r2, r2, #1
 80085c6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80085c8:	2300      	movs	r3, #0
}
 80085ca:	4618      	mov	r0, r3
 80085cc:	3714      	adds	r7, #20
 80085ce:	46bd      	mov	sp, r7
 80085d0:	bc80      	pop	{r7}
 80085d2:	4770      	bx	lr
 80085d4:	40010000 	.word	0x40010000
 80085d8:	40000400 	.word	0x40000400
 80085dc:	40000800 	.word	0x40000800
 80085e0:	40000c00 	.word	0x40000c00
 80085e4:	40010400 	.word	0x40010400
 80085e8:	40014000 	.word	0x40014000
 80085ec:	40001800 	.word	0x40001800

080085f0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80085f0:	b580      	push	{r7, lr}
 80085f2:	b082      	sub	sp, #8
 80085f4:	af00      	add	r7, sp, #0
 80085f6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	d101      	bne.n	8008602 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80085fe:	2301      	movs	r3, #1
 8008600:	e041      	b.n	8008686 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008608:	b2db      	uxtb	r3, r3
 800860a:	2b00      	cmp	r3, #0
 800860c:	d106      	bne.n	800861c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	2200      	movs	r2, #0
 8008612:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008616:	6878      	ldr	r0, [r7, #4]
 8008618:	f7fb fd44 	bl	80040a4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	2202      	movs	r2, #2
 8008620:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	681a      	ldr	r2, [r3, #0]
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	3304      	adds	r3, #4
 800862c:	4619      	mov	r1, r3
 800862e:	4610      	mov	r0, r2
 8008630:	f000 fae0 	bl	8008bf4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	2201      	movs	r2, #1
 8008638:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	2201      	movs	r2, #1
 8008640:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	2201      	movs	r2, #1
 8008648:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	2201      	movs	r2, #1
 8008650:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	2201      	movs	r2, #1
 8008658:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	2201      	movs	r2, #1
 8008660:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	2201      	movs	r2, #1
 8008668:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	2201      	movs	r2, #1
 8008670:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	2201      	movs	r2, #1
 8008678:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	2201      	movs	r2, #1
 8008680:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008684:	2300      	movs	r3, #0
}
 8008686:	4618      	mov	r0, r3
 8008688:	3708      	adds	r7, #8
 800868a:	46bd      	mov	sp, r7
 800868c:	bd80      	pop	{r7, pc}
	...

08008690 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008690:	b580      	push	{r7, lr}
 8008692:	b084      	sub	sp, #16
 8008694:	af00      	add	r7, sp, #0
 8008696:	6078      	str	r0, [r7, #4]
 8008698:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800869a:	683b      	ldr	r3, [r7, #0]
 800869c:	2b00      	cmp	r3, #0
 800869e:	d109      	bne.n	80086b4 <HAL_TIM_PWM_Start+0x24>
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80086a6:	b2db      	uxtb	r3, r3
 80086a8:	2b01      	cmp	r3, #1
 80086aa:	bf14      	ite	ne
 80086ac:	2301      	movne	r3, #1
 80086ae:	2300      	moveq	r3, #0
 80086b0:	b2db      	uxtb	r3, r3
 80086b2:	e022      	b.n	80086fa <HAL_TIM_PWM_Start+0x6a>
 80086b4:	683b      	ldr	r3, [r7, #0]
 80086b6:	2b04      	cmp	r3, #4
 80086b8:	d109      	bne.n	80086ce <HAL_TIM_PWM_Start+0x3e>
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80086c0:	b2db      	uxtb	r3, r3
 80086c2:	2b01      	cmp	r3, #1
 80086c4:	bf14      	ite	ne
 80086c6:	2301      	movne	r3, #1
 80086c8:	2300      	moveq	r3, #0
 80086ca:	b2db      	uxtb	r3, r3
 80086cc:	e015      	b.n	80086fa <HAL_TIM_PWM_Start+0x6a>
 80086ce:	683b      	ldr	r3, [r7, #0]
 80086d0:	2b08      	cmp	r3, #8
 80086d2:	d109      	bne.n	80086e8 <HAL_TIM_PWM_Start+0x58>
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80086da:	b2db      	uxtb	r3, r3
 80086dc:	2b01      	cmp	r3, #1
 80086de:	bf14      	ite	ne
 80086e0:	2301      	movne	r3, #1
 80086e2:	2300      	moveq	r3, #0
 80086e4:	b2db      	uxtb	r3, r3
 80086e6:	e008      	b.n	80086fa <HAL_TIM_PWM_Start+0x6a>
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80086ee:	b2db      	uxtb	r3, r3
 80086f0:	2b01      	cmp	r3, #1
 80086f2:	bf14      	ite	ne
 80086f4:	2301      	movne	r3, #1
 80086f6:	2300      	moveq	r3, #0
 80086f8:	b2db      	uxtb	r3, r3
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	d001      	beq.n	8008702 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80086fe:	2301      	movs	r3, #1
 8008700:	e07c      	b.n	80087fc <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008702:	683b      	ldr	r3, [r7, #0]
 8008704:	2b00      	cmp	r3, #0
 8008706:	d104      	bne.n	8008712 <HAL_TIM_PWM_Start+0x82>
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	2202      	movs	r2, #2
 800870c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008710:	e013      	b.n	800873a <HAL_TIM_PWM_Start+0xaa>
 8008712:	683b      	ldr	r3, [r7, #0]
 8008714:	2b04      	cmp	r3, #4
 8008716:	d104      	bne.n	8008722 <HAL_TIM_PWM_Start+0x92>
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	2202      	movs	r2, #2
 800871c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008720:	e00b      	b.n	800873a <HAL_TIM_PWM_Start+0xaa>
 8008722:	683b      	ldr	r3, [r7, #0]
 8008724:	2b08      	cmp	r3, #8
 8008726:	d104      	bne.n	8008732 <HAL_TIM_PWM_Start+0xa2>
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	2202      	movs	r2, #2
 800872c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008730:	e003      	b.n	800873a <HAL_TIM_PWM_Start+0xaa>
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	2202      	movs	r2, #2
 8008736:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	2201      	movs	r2, #1
 8008740:	6839      	ldr	r1, [r7, #0]
 8008742:	4618      	mov	r0, r3
 8008744:	f000 fca0 	bl	8009088 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	4a2d      	ldr	r2, [pc, #180]	; (8008804 <HAL_TIM_PWM_Start+0x174>)
 800874e:	4293      	cmp	r3, r2
 8008750:	d004      	beq.n	800875c <HAL_TIM_PWM_Start+0xcc>
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	4a2c      	ldr	r2, [pc, #176]	; (8008808 <HAL_TIM_PWM_Start+0x178>)
 8008758:	4293      	cmp	r3, r2
 800875a:	d101      	bne.n	8008760 <HAL_TIM_PWM_Start+0xd0>
 800875c:	2301      	movs	r3, #1
 800875e:	e000      	b.n	8008762 <HAL_TIM_PWM_Start+0xd2>
 8008760:	2300      	movs	r3, #0
 8008762:	2b00      	cmp	r3, #0
 8008764:	d007      	beq.n	8008776 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008774:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	4a22      	ldr	r2, [pc, #136]	; (8008804 <HAL_TIM_PWM_Start+0x174>)
 800877c:	4293      	cmp	r3, r2
 800877e:	d022      	beq.n	80087c6 <HAL_TIM_PWM_Start+0x136>
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008788:	d01d      	beq.n	80087c6 <HAL_TIM_PWM_Start+0x136>
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	4a1f      	ldr	r2, [pc, #124]	; (800880c <HAL_TIM_PWM_Start+0x17c>)
 8008790:	4293      	cmp	r3, r2
 8008792:	d018      	beq.n	80087c6 <HAL_TIM_PWM_Start+0x136>
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	4a1d      	ldr	r2, [pc, #116]	; (8008810 <HAL_TIM_PWM_Start+0x180>)
 800879a:	4293      	cmp	r3, r2
 800879c:	d013      	beq.n	80087c6 <HAL_TIM_PWM_Start+0x136>
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	4a1c      	ldr	r2, [pc, #112]	; (8008814 <HAL_TIM_PWM_Start+0x184>)
 80087a4:	4293      	cmp	r3, r2
 80087a6:	d00e      	beq.n	80087c6 <HAL_TIM_PWM_Start+0x136>
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	4a16      	ldr	r2, [pc, #88]	; (8008808 <HAL_TIM_PWM_Start+0x178>)
 80087ae:	4293      	cmp	r3, r2
 80087b0:	d009      	beq.n	80087c6 <HAL_TIM_PWM_Start+0x136>
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	4a18      	ldr	r2, [pc, #96]	; (8008818 <HAL_TIM_PWM_Start+0x188>)
 80087b8:	4293      	cmp	r3, r2
 80087ba:	d004      	beq.n	80087c6 <HAL_TIM_PWM_Start+0x136>
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	4a16      	ldr	r2, [pc, #88]	; (800881c <HAL_TIM_PWM_Start+0x18c>)
 80087c2:	4293      	cmp	r3, r2
 80087c4:	d111      	bne.n	80087ea <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	689b      	ldr	r3, [r3, #8]
 80087cc:	f003 0307 	and.w	r3, r3, #7
 80087d0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80087d2:	68fb      	ldr	r3, [r7, #12]
 80087d4:	2b06      	cmp	r3, #6
 80087d6:	d010      	beq.n	80087fa <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	681a      	ldr	r2, [r3, #0]
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	f042 0201 	orr.w	r2, r2, #1
 80087e6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80087e8:	e007      	b.n	80087fa <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	681a      	ldr	r2, [r3, #0]
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	f042 0201 	orr.w	r2, r2, #1
 80087f8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80087fa:	2300      	movs	r3, #0
}
 80087fc:	4618      	mov	r0, r3
 80087fe:	3710      	adds	r7, #16
 8008800:	46bd      	mov	sp, r7
 8008802:	bd80      	pop	{r7, pc}
 8008804:	40010000 	.word	0x40010000
 8008808:	40010400 	.word	0x40010400
 800880c:	40000400 	.word	0x40000400
 8008810:	40000800 	.word	0x40000800
 8008814:	40000c00 	.word	0x40000c00
 8008818:	40014000 	.word	0x40014000
 800881c:	40001800 	.word	0x40001800

08008820 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008820:	b580      	push	{r7, lr}
 8008822:	b082      	sub	sp, #8
 8008824:	af00      	add	r7, sp, #0
 8008826:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	691b      	ldr	r3, [r3, #16]
 800882e:	f003 0302 	and.w	r3, r3, #2
 8008832:	2b02      	cmp	r3, #2
 8008834:	d122      	bne.n	800887c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	68db      	ldr	r3, [r3, #12]
 800883c:	f003 0302 	and.w	r3, r3, #2
 8008840:	2b02      	cmp	r3, #2
 8008842:	d11b      	bne.n	800887c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	f06f 0202 	mvn.w	r2, #2
 800884c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	2201      	movs	r2, #1
 8008852:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	699b      	ldr	r3, [r3, #24]
 800885a:	f003 0303 	and.w	r3, r3, #3
 800885e:	2b00      	cmp	r3, #0
 8008860:	d003      	beq.n	800886a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008862:	6878      	ldr	r0, [r7, #4]
 8008864:	f000 f9ab 	bl	8008bbe <HAL_TIM_IC_CaptureCallback>
 8008868:	e005      	b.n	8008876 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800886a:	6878      	ldr	r0, [r7, #4]
 800886c:	f000 f99e 	bl	8008bac <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008870:	6878      	ldr	r0, [r7, #4]
 8008872:	f000 f9ad 	bl	8008bd0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	2200      	movs	r2, #0
 800887a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	691b      	ldr	r3, [r3, #16]
 8008882:	f003 0304 	and.w	r3, r3, #4
 8008886:	2b04      	cmp	r3, #4
 8008888:	d122      	bne.n	80088d0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	68db      	ldr	r3, [r3, #12]
 8008890:	f003 0304 	and.w	r3, r3, #4
 8008894:	2b04      	cmp	r3, #4
 8008896:	d11b      	bne.n	80088d0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	f06f 0204 	mvn.w	r2, #4
 80088a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	2202      	movs	r2, #2
 80088a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	699b      	ldr	r3, [r3, #24]
 80088ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	d003      	beq.n	80088be <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80088b6:	6878      	ldr	r0, [r7, #4]
 80088b8:	f000 f981 	bl	8008bbe <HAL_TIM_IC_CaptureCallback>
 80088bc:	e005      	b.n	80088ca <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80088be:	6878      	ldr	r0, [r7, #4]
 80088c0:	f000 f974 	bl	8008bac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80088c4:	6878      	ldr	r0, [r7, #4]
 80088c6:	f000 f983 	bl	8008bd0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	2200      	movs	r2, #0
 80088ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	691b      	ldr	r3, [r3, #16]
 80088d6:	f003 0308 	and.w	r3, r3, #8
 80088da:	2b08      	cmp	r3, #8
 80088dc:	d122      	bne.n	8008924 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	68db      	ldr	r3, [r3, #12]
 80088e4:	f003 0308 	and.w	r3, r3, #8
 80088e8:	2b08      	cmp	r3, #8
 80088ea:	d11b      	bne.n	8008924 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	f06f 0208 	mvn.w	r2, #8
 80088f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	2204      	movs	r2, #4
 80088fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	69db      	ldr	r3, [r3, #28]
 8008902:	f003 0303 	and.w	r3, r3, #3
 8008906:	2b00      	cmp	r3, #0
 8008908:	d003      	beq.n	8008912 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800890a:	6878      	ldr	r0, [r7, #4]
 800890c:	f000 f957 	bl	8008bbe <HAL_TIM_IC_CaptureCallback>
 8008910:	e005      	b.n	800891e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008912:	6878      	ldr	r0, [r7, #4]
 8008914:	f000 f94a 	bl	8008bac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008918:	6878      	ldr	r0, [r7, #4]
 800891a:	f000 f959 	bl	8008bd0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	2200      	movs	r2, #0
 8008922:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	691b      	ldr	r3, [r3, #16]
 800892a:	f003 0310 	and.w	r3, r3, #16
 800892e:	2b10      	cmp	r3, #16
 8008930:	d122      	bne.n	8008978 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	68db      	ldr	r3, [r3, #12]
 8008938:	f003 0310 	and.w	r3, r3, #16
 800893c:	2b10      	cmp	r3, #16
 800893e:	d11b      	bne.n	8008978 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	f06f 0210 	mvn.w	r2, #16
 8008948:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	2208      	movs	r2, #8
 800894e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	69db      	ldr	r3, [r3, #28]
 8008956:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800895a:	2b00      	cmp	r3, #0
 800895c:	d003      	beq.n	8008966 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800895e:	6878      	ldr	r0, [r7, #4]
 8008960:	f000 f92d 	bl	8008bbe <HAL_TIM_IC_CaptureCallback>
 8008964:	e005      	b.n	8008972 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008966:	6878      	ldr	r0, [r7, #4]
 8008968:	f000 f920 	bl	8008bac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800896c:	6878      	ldr	r0, [r7, #4]
 800896e:	f000 f92f 	bl	8008bd0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	2200      	movs	r2, #0
 8008976:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	691b      	ldr	r3, [r3, #16]
 800897e:	f003 0301 	and.w	r3, r3, #1
 8008982:	2b01      	cmp	r3, #1
 8008984:	d10e      	bne.n	80089a4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	68db      	ldr	r3, [r3, #12]
 800898c:	f003 0301 	and.w	r3, r3, #1
 8008990:	2b01      	cmp	r3, #1
 8008992:	d107      	bne.n	80089a4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	f06f 0201 	mvn.w	r2, #1
 800899c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800899e:	6878      	ldr	r0, [r7, #4]
 80089a0:	f7fa fd62 	bl	8003468 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	691b      	ldr	r3, [r3, #16]
 80089aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80089ae:	2b80      	cmp	r3, #128	; 0x80
 80089b0:	d10e      	bne.n	80089d0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	68db      	ldr	r3, [r3, #12]
 80089b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80089bc:	2b80      	cmp	r3, #128	; 0x80
 80089be:	d107      	bne.n	80089d0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80089c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80089ca:	6878      	ldr	r0, [r7, #4]
 80089cc:	f000 fc03 	bl	80091d6 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	691b      	ldr	r3, [r3, #16]
 80089d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80089da:	2b40      	cmp	r3, #64	; 0x40
 80089dc:	d10e      	bne.n	80089fc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	68db      	ldr	r3, [r3, #12]
 80089e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80089e8:	2b40      	cmp	r3, #64	; 0x40
 80089ea:	d107      	bne.n	80089fc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80089f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80089f6:	6878      	ldr	r0, [r7, #4]
 80089f8:	f000 f8f3 	bl	8008be2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	691b      	ldr	r3, [r3, #16]
 8008a02:	f003 0320 	and.w	r3, r3, #32
 8008a06:	2b20      	cmp	r3, #32
 8008a08:	d10e      	bne.n	8008a28 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	68db      	ldr	r3, [r3, #12]
 8008a10:	f003 0320 	and.w	r3, r3, #32
 8008a14:	2b20      	cmp	r3, #32
 8008a16:	d107      	bne.n	8008a28 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	f06f 0220 	mvn.w	r2, #32
 8008a20:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008a22:	6878      	ldr	r0, [r7, #4]
 8008a24:	f000 fbce 	bl	80091c4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008a28:	bf00      	nop
 8008a2a:	3708      	adds	r7, #8
 8008a2c:	46bd      	mov	sp, r7
 8008a2e:	bd80      	pop	{r7, pc}

08008a30 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008a30:	b580      	push	{r7, lr}
 8008a32:	b084      	sub	sp, #16
 8008a34:	af00      	add	r7, sp, #0
 8008a36:	60f8      	str	r0, [r7, #12]
 8008a38:	60b9      	str	r1, [r7, #8]
 8008a3a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008a3c:	68fb      	ldr	r3, [r7, #12]
 8008a3e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008a42:	2b01      	cmp	r3, #1
 8008a44:	d101      	bne.n	8008a4a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8008a46:	2302      	movs	r3, #2
 8008a48:	e0ac      	b.n	8008ba4 <HAL_TIM_PWM_ConfigChannel+0x174>
 8008a4a:	68fb      	ldr	r3, [r7, #12]
 8008a4c:	2201      	movs	r2, #1
 8008a4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	2b0c      	cmp	r3, #12
 8008a56:	f200 809f 	bhi.w	8008b98 <HAL_TIM_PWM_ConfigChannel+0x168>
 8008a5a:	a201      	add	r2, pc, #4	; (adr r2, 8008a60 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8008a5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a60:	08008a95 	.word	0x08008a95
 8008a64:	08008b99 	.word	0x08008b99
 8008a68:	08008b99 	.word	0x08008b99
 8008a6c:	08008b99 	.word	0x08008b99
 8008a70:	08008ad5 	.word	0x08008ad5
 8008a74:	08008b99 	.word	0x08008b99
 8008a78:	08008b99 	.word	0x08008b99
 8008a7c:	08008b99 	.word	0x08008b99
 8008a80:	08008b17 	.word	0x08008b17
 8008a84:	08008b99 	.word	0x08008b99
 8008a88:	08008b99 	.word	0x08008b99
 8008a8c:	08008b99 	.word	0x08008b99
 8008a90:	08008b57 	.word	0x08008b57
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008a94:	68fb      	ldr	r3, [r7, #12]
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	68b9      	ldr	r1, [r7, #8]
 8008a9a:	4618      	mov	r0, r3
 8008a9c:	f000 f948 	bl	8008d30 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	699a      	ldr	r2, [r3, #24]
 8008aa6:	68fb      	ldr	r3, [r7, #12]
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	f042 0208 	orr.w	r2, r2, #8
 8008aae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008ab0:	68fb      	ldr	r3, [r7, #12]
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	699a      	ldr	r2, [r3, #24]
 8008ab6:	68fb      	ldr	r3, [r7, #12]
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	f022 0204 	bic.w	r2, r2, #4
 8008abe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	6999      	ldr	r1, [r3, #24]
 8008ac6:	68bb      	ldr	r3, [r7, #8]
 8008ac8:	691a      	ldr	r2, [r3, #16]
 8008aca:	68fb      	ldr	r3, [r7, #12]
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	430a      	orrs	r2, r1
 8008ad0:	619a      	str	r2, [r3, #24]
      break;
 8008ad2:	e062      	b.n	8008b9a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008ad4:	68fb      	ldr	r3, [r7, #12]
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	68b9      	ldr	r1, [r7, #8]
 8008ada:	4618      	mov	r0, r3
 8008adc:	f000 f998 	bl	8008e10 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008ae0:	68fb      	ldr	r3, [r7, #12]
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	699a      	ldr	r2, [r3, #24]
 8008ae6:	68fb      	ldr	r3, [r7, #12]
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008aee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008af0:	68fb      	ldr	r3, [r7, #12]
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	699a      	ldr	r2, [r3, #24]
 8008af6:	68fb      	ldr	r3, [r7, #12]
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008afe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008b00:	68fb      	ldr	r3, [r7, #12]
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	6999      	ldr	r1, [r3, #24]
 8008b06:	68bb      	ldr	r3, [r7, #8]
 8008b08:	691b      	ldr	r3, [r3, #16]
 8008b0a:	021a      	lsls	r2, r3, #8
 8008b0c:	68fb      	ldr	r3, [r7, #12]
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	430a      	orrs	r2, r1
 8008b12:	619a      	str	r2, [r3, #24]
      break;
 8008b14:	e041      	b.n	8008b9a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008b16:	68fb      	ldr	r3, [r7, #12]
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	68b9      	ldr	r1, [r7, #8]
 8008b1c:	4618      	mov	r0, r3
 8008b1e:	f000 f9eb 	bl	8008ef8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008b22:	68fb      	ldr	r3, [r7, #12]
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	69da      	ldr	r2, [r3, #28]
 8008b28:	68fb      	ldr	r3, [r7, #12]
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	f042 0208 	orr.w	r2, r2, #8
 8008b30:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008b32:	68fb      	ldr	r3, [r7, #12]
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	69da      	ldr	r2, [r3, #28]
 8008b38:	68fb      	ldr	r3, [r7, #12]
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	f022 0204 	bic.w	r2, r2, #4
 8008b40:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008b42:	68fb      	ldr	r3, [r7, #12]
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	69d9      	ldr	r1, [r3, #28]
 8008b48:	68bb      	ldr	r3, [r7, #8]
 8008b4a:	691a      	ldr	r2, [r3, #16]
 8008b4c:	68fb      	ldr	r3, [r7, #12]
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	430a      	orrs	r2, r1
 8008b52:	61da      	str	r2, [r3, #28]
      break;
 8008b54:	e021      	b.n	8008b9a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008b56:	68fb      	ldr	r3, [r7, #12]
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	68b9      	ldr	r1, [r7, #8]
 8008b5c:	4618      	mov	r0, r3
 8008b5e:	f000 fa3f 	bl	8008fe0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008b62:	68fb      	ldr	r3, [r7, #12]
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	69da      	ldr	r2, [r3, #28]
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008b70:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008b72:	68fb      	ldr	r3, [r7, #12]
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	69da      	ldr	r2, [r3, #28]
 8008b78:	68fb      	ldr	r3, [r7, #12]
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008b80:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008b82:	68fb      	ldr	r3, [r7, #12]
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	69d9      	ldr	r1, [r3, #28]
 8008b88:	68bb      	ldr	r3, [r7, #8]
 8008b8a:	691b      	ldr	r3, [r3, #16]
 8008b8c:	021a      	lsls	r2, r3, #8
 8008b8e:	68fb      	ldr	r3, [r7, #12]
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	430a      	orrs	r2, r1
 8008b94:	61da      	str	r2, [r3, #28]
      break;
 8008b96:	e000      	b.n	8008b9a <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8008b98:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008b9a:	68fb      	ldr	r3, [r7, #12]
 8008b9c:	2200      	movs	r2, #0
 8008b9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008ba2:	2300      	movs	r3, #0
}
 8008ba4:	4618      	mov	r0, r3
 8008ba6:	3710      	adds	r7, #16
 8008ba8:	46bd      	mov	sp, r7
 8008baa:	bd80      	pop	{r7, pc}

08008bac <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008bac:	b480      	push	{r7}
 8008bae:	b083      	sub	sp, #12
 8008bb0:	af00      	add	r7, sp, #0
 8008bb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008bb4:	bf00      	nop
 8008bb6:	370c      	adds	r7, #12
 8008bb8:	46bd      	mov	sp, r7
 8008bba:	bc80      	pop	{r7}
 8008bbc:	4770      	bx	lr

08008bbe <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008bbe:	b480      	push	{r7}
 8008bc0:	b083      	sub	sp, #12
 8008bc2:	af00      	add	r7, sp, #0
 8008bc4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008bc6:	bf00      	nop
 8008bc8:	370c      	adds	r7, #12
 8008bca:	46bd      	mov	sp, r7
 8008bcc:	bc80      	pop	{r7}
 8008bce:	4770      	bx	lr

08008bd0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008bd0:	b480      	push	{r7}
 8008bd2:	b083      	sub	sp, #12
 8008bd4:	af00      	add	r7, sp, #0
 8008bd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008bd8:	bf00      	nop
 8008bda:	370c      	adds	r7, #12
 8008bdc:	46bd      	mov	sp, r7
 8008bde:	bc80      	pop	{r7}
 8008be0:	4770      	bx	lr

08008be2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008be2:	b480      	push	{r7}
 8008be4:	b083      	sub	sp, #12
 8008be6:	af00      	add	r7, sp, #0
 8008be8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008bea:	bf00      	nop
 8008bec:	370c      	adds	r7, #12
 8008bee:	46bd      	mov	sp, r7
 8008bf0:	bc80      	pop	{r7}
 8008bf2:	4770      	bx	lr

08008bf4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008bf4:	b480      	push	{r7}
 8008bf6:	b085      	sub	sp, #20
 8008bf8:	af00      	add	r7, sp, #0
 8008bfa:	6078      	str	r0, [r7, #4]
 8008bfc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	4a3f      	ldr	r2, [pc, #252]	; (8008d04 <TIM_Base_SetConfig+0x110>)
 8008c08:	4293      	cmp	r3, r2
 8008c0a:	d013      	beq.n	8008c34 <TIM_Base_SetConfig+0x40>
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008c12:	d00f      	beq.n	8008c34 <TIM_Base_SetConfig+0x40>
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	4a3c      	ldr	r2, [pc, #240]	; (8008d08 <TIM_Base_SetConfig+0x114>)
 8008c18:	4293      	cmp	r3, r2
 8008c1a:	d00b      	beq.n	8008c34 <TIM_Base_SetConfig+0x40>
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	4a3b      	ldr	r2, [pc, #236]	; (8008d0c <TIM_Base_SetConfig+0x118>)
 8008c20:	4293      	cmp	r3, r2
 8008c22:	d007      	beq.n	8008c34 <TIM_Base_SetConfig+0x40>
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	4a3a      	ldr	r2, [pc, #232]	; (8008d10 <TIM_Base_SetConfig+0x11c>)
 8008c28:	4293      	cmp	r3, r2
 8008c2a:	d003      	beq.n	8008c34 <TIM_Base_SetConfig+0x40>
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	4a39      	ldr	r2, [pc, #228]	; (8008d14 <TIM_Base_SetConfig+0x120>)
 8008c30:	4293      	cmp	r3, r2
 8008c32:	d108      	bne.n	8008c46 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008c34:	68fb      	ldr	r3, [r7, #12]
 8008c36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008c3a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008c3c:	683b      	ldr	r3, [r7, #0]
 8008c3e:	685b      	ldr	r3, [r3, #4]
 8008c40:	68fa      	ldr	r2, [r7, #12]
 8008c42:	4313      	orrs	r3, r2
 8008c44:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	4a2e      	ldr	r2, [pc, #184]	; (8008d04 <TIM_Base_SetConfig+0x110>)
 8008c4a:	4293      	cmp	r3, r2
 8008c4c:	d02b      	beq.n	8008ca6 <TIM_Base_SetConfig+0xb2>
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008c54:	d027      	beq.n	8008ca6 <TIM_Base_SetConfig+0xb2>
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	4a2b      	ldr	r2, [pc, #172]	; (8008d08 <TIM_Base_SetConfig+0x114>)
 8008c5a:	4293      	cmp	r3, r2
 8008c5c:	d023      	beq.n	8008ca6 <TIM_Base_SetConfig+0xb2>
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	4a2a      	ldr	r2, [pc, #168]	; (8008d0c <TIM_Base_SetConfig+0x118>)
 8008c62:	4293      	cmp	r3, r2
 8008c64:	d01f      	beq.n	8008ca6 <TIM_Base_SetConfig+0xb2>
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	4a29      	ldr	r2, [pc, #164]	; (8008d10 <TIM_Base_SetConfig+0x11c>)
 8008c6a:	4293      	cmp	r3, r2
 8008c6c:	d01b      	beq.n	8008ca6 <TIM_Base_SetConfig+0xb2>
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	4a28      	ldr	r2, [pc, #160]	; (8008d14 <TIM_Base_SetConfig+0x120>)
 8008c72:	4293      	cmp	r3, r2
 8008c74:	d017      	beq.n	8008ca6 <TIM_Base_SetConfig+0xb2>
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	4a27      	ldr	r2, [pc, #156]	; (8008d18 <TIM_Base_SetConfig+0x124>)
 8008c7a:	4293      	cmp	r3, r2
 8008c7c:	d013      	beq.n	8008ca6 <TIM_Base_SetConfig+0xb2>
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	4a26      	ldr	r2, [pc, #152]	; (8008d1c <TIM_Base_SetConfig+0x128>)
 8008c82:	4293      	cmp	r3, r2
 8008c84:	d00f      	beq.n	8008ca6 <TIM_Base_SetConfig+0xb2>
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	4a25      	ldr	r2, [pc, #148]	; (8008d20 <TIM_Base_SetConfig+0x12c>)
 8008c8a:	4293      	cmp	r3, r2
 8008c8c:	d00b      	beq.n	8008ca6 <TIM_Base_SetConfig+0xb2>
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	4a24      	ldr	r2, [pc, #144]	; (8008d24 <TIM_Base_SetConfig+0x130>)
 8008c92:	4293      	cmp	r3, r2
 8008c94:	d007      	beq.n	8008ca6 <TIM_Base_SetConfig+0xb2>
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	4a23      	ldr	r2, [pc, #140]	; (8008d28 <TIM_Base_SetConfig+0x134>)
 8008c9a:	4293      	cmp	r3, r2
 8008c9c:	d003      	beq.n	8008ca6 <TIM_Base_SetConfig+0xb2>
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	4a22      	ldr	r2, [pc, #136]	; (8008d2c <TIM_Base_SetConfig+0x138>)
 8008ca2:	4293      	cmp	r3, r2
 8008ca4:	d108      	bne.n	8008cb8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008ca6:	68fb      	ldr	r3, [r7, #12]
 8008ca8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008cac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008cae:	683b      	ldr	r3, [r7, #0]
 8008cb0:	68db      	ldr	r3, [r3, #12]
 8008cb2:	68fa      	ldr	r2, [r7, #12]
 8008cb4:	4313      	orrs	r3, r2
 8008cb6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008cbe:	683b      	ldr	r3, [r7, #0]
 8008cc0:	695b      	ldr	r3, [r3, #20]
 8008cc2:	4313      	orrs	r3, r2
 8008cc4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	68fa      	ldr	r2, [r7, #12]
 8008cca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008ccc:	683b      	ldr	r3, [r7, #0]
 8008cce:	689a      	ldr	r2, [r3, #8]
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008cd4:	683b      	ldr	r3, [r7, #0]
 8008cd6:	681a      	ldr	r2, [r3, #0]
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	4a09      	ldr	r2, [pc, #36]	; (8008d04 <TIM_Base_SetConfig+0x110>)
 8008ce0:	4293      	cmp	r3, r2
 8008ce2:	d003      	beq.n	8008cec <TIM_Base_SetConfig+0xf8>
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	4a0b      	ldr	r2, [pc, #44]	; (8008d14 <TIM_Base_SetConfig+0x120>)
 8008ce8:	4293      	cmp	r3, r2
 8008cea:	d103      	bne.n	8008cf4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008cec:	683b      	ldr	r3, [r7, #0]
 8008cee:	691a      	ldr	r2, [r3, #16]
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	2201      	movs	r2, #1
 8008cf8:	615a      	str	r2, [r3, #20]
}
 8008cfa:	bf00      	nop
 8008cfc:	3714      	adds	r7, #20
 8008cfe:	46bd      	mov	sp, r7
 8008d00:	bc80      	pop	{r7}
 8008d02:	4770      	bx	lr
 8008d04:	40010000 	.word	0x40010000
 8008d08:	40000400 	.word	0x40000400
 8008d0c:	40000800 	.word	0x40000800
 8008d10:	40000c00 	.word	0x40000c00
 8008d14:	40010400 	.word	0x40010400
 8008d18:	40014000 	.word	0x40014000
 8008d1c:	40014400 	.word	0x40014400
 8008d20:	40014800 	.word	0x40014800
 8008d24:	40001800 	.word	0x40001800
 8008d28:	40001c00 	.word	0x40001c00
 8008d2c:	40002000 	.word	0x40002000

08008d30 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008d30:	b480      	push	{r7}
 8008d32:	b087      	sub	sp, #28
 8008d34:	af00      	add	r7, sp, #0
 8008d36:	6078      	str	r0, [r7, #4]
 8008d38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	6a1b      	ldr	r3, [r3, #32]
 8008d3e:	f023 0201 	bic.w	r2, r3, #1
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	6a1b      	ldr	r3, [r3, #32]
 8008d4a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	685b      	ldr	r3, [r3, #4]
 8008d50:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	699b      	ldr	r3, [r3, #24]
 8008d56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008d58:	68fb      	ldr	r3, [r7, #12]
 8008d5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008d5e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008d60:	68fb      	ldr	r3, [r7, #12]
 8008d62:	f023 0303 	bic.w	r3, r3, #3
 8008d66:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008d68:	683b      	ldr	r3, [r7, #0]
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	68fa      	ldr	r2, [r7, #12]
 8008d6e:	4313      	orrs	r3, r2
 8008d70:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008d72:	697b      	ldr	r3, [r7, #20]
 8008d74:	f023 0302 	bic.w	r3, r3, #2
 8008d78:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008d7a:	683b      	ldr	r3, [r7, #0]
 8008d7c:	689b      	ldr	r3, [r3, #8]
 8008d7e:	697a      	ldr	r2, [r7, #20]
 8008d80:	4313      	orrs	r3, r2
 8008d82:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	4a20      	ldr	r2, [pc, #128]	; (8008e08 <TIM_OC1_SetConfig+0xd8>)
 8008d88:	4293      	cmp	r3, r2
 8008d8a:	d003      	beq.n	8008d94 <TIM_OC1_SetConfig+0x64>
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	4a1f      	ldr	r2, [pc, #124]	; (8008e0c <TIM_OC1_SetConfig+0xdc>)
 8008d90:	4293      	cmp	r3, r2
 8008d92:	d10c      	bne.n	8008dae <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008d94:	697b      	ldr	r3, [r7, #20]
 8008d96:	f023 0308 	bic.w	r3, r3, #8
 8008d9a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008d9c:	683b      	ldr	r3, [r7, #0]
 8008d9e:	68db      	ldr	r3, [r3, #12]
 8008da0:	697a      	ldr	r2, [r7, #20]
 8008da2:	4313      	orrs	r3, r2
 8008da4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008da6:	697b      	ldr	r3, [r7, #20]
 8008da8:	f023 0304 	bic.w	r3, r3, #4
 8008dac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	4a15      	ldr	r2, [pc, #84]	; (8008e08 <TIM_OC1_SetConfig+0xd8>)
 8008db2:	4293      	cmp	r3, r2
 8008db4:	d003      	beq.n	8008dbe <TIM_OC1_SetConfig+0x8e>
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	4a14      	ldr	r2, [pc, #80]	; (8008e0c <TIM_OC1_SetConfig+0xdc>)
 8008dba:	4293      	cmp	r3, r2
 8008dbc:	d111      	bne.n	8008de2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008dbe:	693b      	ldr	r3, [r7, #16]
 8008dc0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008dc4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008dc6:	693b      	ldr	r3, [r7, #16]
 8008dc8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008dcc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008dce:	683b      	ldr	r3, [r7, #0]
 8008dd0:	695b      	ldr	r3, [r3, #20]
 8008dd2:	693a      	ldr	r2, [r7, #16]
 8008dd4:	4313      	orrs	r3, r2
 8008dd6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008dd8:	683b      	ldr	r3, [r7, #0]
 8008dda:	699b      	ldr	r3, [r3, #24]
 8008ddc:	693a      	ldr	r2, [r7, #16]
 8008dde:	4313      	orrs	r3, r2
 8008de0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	693a      	ldr	r2, [r7, #16]
 8008de6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	68fa      	ldr	r2, [r7, #12]
 8008dec:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008dee:	683b      	ldr	r3, [r7, #0]
 8008df0:	685a      	ldr	r2, [r3, #4]
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	697a      	ldr	r2, [r7, #20]
 8008dfa:	621a      	str	r2, [r3, #32]
}
 8008dfc:	bf00      	nop
 8008dfe:	371c      	adds	r7, #28
 8008e00:	46bd      	mov	sp, r7
 8008e02:	bc80      	pop	{r7}
 8008e04:	4770      	bx	lr
 8008e06:	bf00      	nop
 8008e08:	40010000 	.word	0x40010000
 8008e0c:	40010400 	.word	0x40010400

08008e10 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008e10:	b480      	push	{r7}
 8008e12:	b087      	sub	sp, #28
 8008e14:	af00      	add	r7, sp, #0
 8008e16:	6078      	str	r0, [r7, #4]
 8008e18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	6a1b      	ldr	r3, [r3, #32]
 8008e1e:	f023 0210 	bic.w	r2, r3, #16
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	6a1b      	ldr	r3, [r3, #32]
 8008e2a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	685b      	ldr	r3, [r3, #4]
 8008e30:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	699b      	ldr	r3, [r3, #24]
 8008e36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008e38:	68fb      	ldr	r3, [r7, #12]
 8008e3a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008e3e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008e40:	68fb      	ldr	r3, [r7, #12]
 8008e42:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008e46:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008e48:	683b      	ldr	r3, [r7, #0]
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	021b      	lsls	r3, r3, #8
 8008e4e:	68fa      	ldr	r2, [r7, #12]
 8008e50:	4313      	orrs	r3, r2
 8008e52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008e54:	697b      	ldr	r3, [r7, #20]
 8008e56:	f023 0320 	bic.w	r3, r3, #32
 8008e5a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008e5c:	683b      	ldr	r3, [r7, #0]
 8008e5e:	689b      	ldr	r3, [r3, #8]
 8008e60:	011b      	lsls	r3, r3, #4
 8008e62:	697a      	ldr	r2, [r7, #20]
 8008e64:	4313      	orrs	r3, r2
 8008e66:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	4a21      	ldr	r2, [pc, #132]	; (8008ef0 <TIM_OC2_SetConfig+0xe0>)
 8008e6c:	4293      	cmp	r3, r2
 8008e6e:	d003      	beq.n	8008e78 <TIM_OC2_SetConfig+0x68>
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	4a20      	ldr	r2, [pc, #128]	; (8008ef4 <TIM_OC2_SetConfig+0xe4>)
 8008e74:	4293      	cmp	r3, r2
 8008e76:	d10d      	bne.n	8008e94 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008e78:	697b      	ldr	r3, [r7, #20]
 8008e7a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008e7e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008e80:	683b      	ldr	r3, [r7, #0]
 8008e82:	68db      	ldr	r3, [r3, #12]
 8008e84:	011b      	lsls	r3, r3, #4
 8008e86:	697a      	ldr	r2, [r7, #20]
 8008e88:	4313      	orrs	r3, r2
 8008e8a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008e8c:	697b      	ldr	r3, [r7, #20]
 8008e8e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008e92:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	4a16      	ldr	r2, [pc, #88]	; (8008ef0 <TIM_OC2_SetConfig+0xe0>)
 8008e98:	4293      	cmp	r3, r2
 8008e9a:	d003      	beq.n	8008ea4 <TIM_OC2_SetConfig+0x94>
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	4a15      	ldr	r2, [pc, #84]	; (8008ef4 <TIM_OC2_SetConfig+0xe4>)
 8008ea0:	4293      	cmp	r3, r2
 8008ea2:	d113      	bne.n	8008ecc <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008ea4:	693b      	ldr	r3, [r7, #16]
 8008ea6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008eaa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008eac:	693b      	ldr	r3, [r7, #16]
 8008eae:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008eb2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008eb4:	683b      	ldr	r3, [r7, #0]
 8008eb6:	695b      	ldr	r3, [r3, #20]
 8008eb8:	009b      	lsls	r3, r3, #2
 8008eba:	693a      	ldr	r2, [r7, #16]
 8008ebc:	4313      	orrs	r3, r2
 8008ebe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008ec0:	683b      	ldr	r3, [r7, #0]
 8008ec2:	699b      	ldr	r3, [r3, #24]
 8008ec4:	009b      	lsls	r3, r3, #2
 8008ec6:	693a      	ldr	r2, [r7, #16]
 8008ec8:	4313      	orrs	r3, r2
 8008eca:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	693a      	ldr	r2, [r7, #16]
 8008ed0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	68fa      	ldr	r2, [r7, #12]
 8008ed6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008ed8:	683b      	ldr	r3, [r7, #0]
 8008eda:	685a      	ldr	r2, [r3, #4]
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	697a      	ldr	r2, [r7, #20]
 8008ee4:	621a      	str	r2, [r3, #32]
}
 8008ee6:	bf00      	nop
 8008ee8:	371c      	adds	r7, #28
 8008eea:	46bd      	mov	sp, r7
 8008eec:	bc80      	pop	{r7}
 8008eee:	4770      	bx	lr
 8008ef0:	40010000 	.word	0x40010000
 8008ef4:	40010400 	.word	0x40010400

08008ef8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008ef8:	b480      	push	{r7}
 8008efa:	b087      	sub	sp, #28
 8008efc:	af00      	add	r7, sp, #0
 8008efe:	6078      	str	r0, [r7, #4]
 8008f00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	6a1b      	ldr	r3, [r3, #32]
 8008f06:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	6a1b      	ldr	r3, [r3, #32]
 8008f12:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	685b      	ldr	r3, [r3, #4]
 8008f18:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	69db      	ldr	r3, [r3, #28]
 8008f1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008f20:	68fb      	ldr	r3, [r7, #12]
 8008f22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008f26:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008f28:	68fb      	ldr	r3, [r7, #12]
 8008f2a:	f023 0303 	bic.w	r3, r3, #3
 8008f2e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008f30:	683b      	ldr	r3, [r7, #0]
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	68fa      	ldr	r2, [r7, #12]
 8008f36:	4313      	orrs	r3, r2
 8008f38:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008f3a:	697b      	ldr	r3, [r7, #20]
 8008f3c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008f40:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008f42:	683b      	ldr	r3, [r7, #0]
 8008f44:	689b      	ldr	r3, [r3, #8]
 8008f46:	021b      	lsls	r3, r3, #8
 8008f48:	697a      	ldr	r2, [r7, #20]
 8008f4a:	4313      	orrs	r3, r2
 8008f4c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	4a21      	ldr	r2, [pc, #132]	; (8008fd8 <TIM_OC3_SetConfig+0xe0>)
 8008f52:	4293      	cmp	r3, r2
 8008f54:	d003      	beq.n	8008f5e <TIM_OC3_SetConfig+0x66>
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	4a20      	ldr	r2, [pc, #128]	; (8008fdc <TIM_OC3_SetConfig+0xe4>)
 8008f5a:	4293      	cmp	r3, r2
 8008f5c:	d10d      	bne.n	8008f7a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008f5e:	697b      	ldr	r3, [r7, #20]
 8008f60:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008f64:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008f66:	683b      	ldr	r3, [r7, #0]
 8008f68:	68db      	ldr	r3, [r3, #12]
 8008f6a:	021b      	lsls	r3, r3, #8
 8008f6c:	697a      	ldr	r2, [r7, #20]
 8008f6e:	4313      	orrs	r3, r2
 8008f70:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008f72:	697b      	ldr	r3, [r7, #20]
 8008f74:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008f78:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	4a16      	ldr	r2, [pc, #88]	; (8008fd8 <TIM_OC3_SetConfig+0xe0>)
 8008f7e:	4293      	cmp	r3, r2
 8008f80:	d003      	beq.n	8008f8a <TIM_OC3_SetConfig+0x92>
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	4a15      	ldr	r2, [pc, #84]	; (8008fdc <TIM_OC3_SetConfig+0xe4>)
 8008f86:	4293      	cmp	r3, r2
 8008f88:	d113      	bne.n	8008fb2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008f8a:	693b      	ldr	r3, [r7, #16]
 8008f8c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008f90:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008f92:	693b      	ldr	r3, [r7, #16]
 8008f94:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008f98:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008f9a:	683b      	ldr	r3, [r7, #0]
 8008f9c:	695b      	ldr	r3, [r3, #20]
 8008f9e:	011b      	lsls	r3, r3, #4
 8008fa0:	693a      	ldr	r2, [r7, #16]
 8008fa2:	4313      	orrs	r3, r2
 8008fa4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008fa6:	683b      	ldr	r3, [r7, #0]
 8008fa8:	699b      	ldr	r3, [r3, #24]
 8008faa:	011b      	lsls	r3, r3, #4
 8008fac:	693a      	ldr	r2, [r7, #16]
 8008fae:	4313      	orrs	r3, r2
 8008fb0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	693a      	ldr	r2, [r7, #16]
 8008fb6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	68fa      	ldr	r2, [r7, #12]
 8008fbc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008fbe:	683b      	ldr	r3, [r7, #0]
 8008fc0:	685a      	ldr	r2, [r3, #4]
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	697a      	ldr	r2, [r7, #20]
 8008fca:	621a      	str	r2, [r3, #32]
}
 8008fcc:	bf00      	nop
 8008fce:	371c      	adds	r7, #28
 8008fd0:	46bd      	mov	sp, r7
 8008fd2:	bc80      	pop	{r7}
 8008fd4:	4770      	bx	lr
 8008fd6:	bf00      	nop
 8008fd8:	40010000 	.word	0x40010000
 8008fdc:	40010400 	.word	0x40010400

08008fe0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008fe0:	b480      	push	{r7}
 8008fe2:	b087      	sub	sp, #28
 8008fe4:	af00      	add	r7, sp, #0
 8008fe6:	6078      	str	r0, [r7, #4]
 8008fe8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	6a1b      	ldr	r3, [r3, #32]
 8008fee:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	6a1b      	ldr	r3, [r3, #32]
 8008ffa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	685b      	ldr	r3, [r3, #4]
 8009000:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	69db      	ldr	r3, [r3, #28]
 8009006:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009008:	68fb      	ldr	r3, [r7, #12]
 800900a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800900e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009010:	68fb      	ldr	r3, [r7, #12]
 8009012:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009016:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009018:	683b      	ldr	r3, [r7, #0]
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	021b      	lsls	r3, r3, #8
 800901e:	68fa      	ldr	r2, [r7, #12]
 8009020:	4313      	orrs	r3, r2
 8009022:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009024:	693b      	ldr	r3, [r7, #16]
 8009026:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800902a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800902c:	683b      	ldr	r3, [r7, #0]
 800902e:	689b      	ldr	r3, [r3, #8]
 8009030:	031b      	lsls	r3, r3, #12
 8009032:	693a      	ldr	r2, [r7, #16]
 8009034:	4313      	orrs	r3, r2
 8009036:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	4a11      	ldr	r2, [pc, #68]	; (8009080 <TIM_OC4_SetConfig+0xa0>)
 800903c:	4293      	cmp	r3, r2
 800903e:	d003      	beq.n	8009048 <TIM_OC4_SetConfig+0x68>
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	4a10      	ldr	r2, [pc, #64]	; (8009084 <TIM_OC4_SetConfig+0xa4>)
 8009044:	4293      	cmp	r3, r2
 8009046:	d109      	bne.n	800905c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009048:	697b      	ldr	r3, [r7, #20]
 800904a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800904e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009050:	683b      	ldr	r3, [r7, #0]
 8009052:	695b      	ldr	r3, [r3, #20]
 8009054:	019b      	lsls	r3, r3, #6
 8009056:	697a      	ldr	r2, [r7, #20]
 8009058:	4313      	orrs	r3, r2
 800905a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	697a      	ldr	r2, [r7, #20]
 8009060:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	68fa      	ldr	r2, [r7, #12]
 8009066:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009068:	683b      	ldr	r3, [r7, #0]
 800906a:	685a      	ldr	r2, [r3, #4]
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	693a      	ldr	r2, [r7, #16]
 8009074:	621a      	str	r2, [r3, #32]
}
 8009076:	bf00      	nop
 8009078:	371c      	adds	r7, #28
 800907a:	46bd      	mov	sp, r7
 800907c:	bc80      	pop	{r7}
 800907e:	4770      	bx	lr
 8009080:	40010000 	.word	0x40010000
 8009084:	40010400 	.word	0x40010400

08009088 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009088:	b480      	push	{r7}
 800908a:	b087      	sub	sp, #28
 800908c:	af00      	add	r7, sp, #0
 800908e:	60f8      	str	r0, [r7, #12]
 8009090:	60b9      	str	r1, [r7, #8]
 8009092:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009094:	68bb      	ldr	r3, [r7, #8]
 8009096:	f003 031f 	and.w	r3, r3, #31
 800909a:	2201      	movs	r2, #1
 800909c:	fa02 f303 	lsl.w	r3, r2, r3
 80090a0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80090a2:	68fb      	ldr	r3, [r7, #12]
 80090a4:	6a1a      	ldr	r2, [r3, #32]
 80090a6:	697b      	ldr	r3, [r7, #20]
 80090a8:	43db      	mvns	r3, r3
 80090aa:	401a      	ands	r2, r3
 80090ac:	68fb      	ldr	r3, [r7, #12]
 80090ae:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80090b0:	68fb      	ldr	r3, [r7, #12]
 80090b2:	6a1a      	ldr	r2, [r3, #32]
 80090b4:	68bb      	ldr	r3, [r7, #8]
 80090b6:	f003 031f 	and.w	r3, r3, #31
 80090ba:	6879      	ldr	r1, [r7, #4]
 80090bc:	fa01 f303 	lsl.w	r3, r1, r3
 80090c0:	431a      	orrs	r2, r3
 80090c2:	68fb      	ldr	r3, [r7, #12]
 80090c4:	621a      	str	r2, [r3, #32]
}
 80090c6:	bf00      	nop
 80090c8:	371c      	adds	r7, #28
 80090ca:	46bd      	mov	sp, r7
 80090cc:	bc80      	pop	{r7}
 80090ce:	4770      	bx	lr

080090d0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80090d0:	b480      	push	{r7}
 80090d2:	b085      	sub	sp, #20
 80090d4:	af00      	add	r7, sp, #0
 80090d6:	6078      	str	r0, [r7, #4]
 80090d8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80090e0:	2b01      	cmp	r3, #1
 80090e2:	d101      	bne.n	80090e8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80090e4:	2302      	movs	r3, #2
 80090e6:	e05a      	b.n	800919e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	2201      	movs	r2, #1
 80090ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	2202      	movs	r2, #2
 80090f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	685b      	ldr	r3, [r3, #4]
 80090fe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	689b      	ldr	r3, [r3, #8]
 8009106:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009108:	68fb      	ldr	r3, [r7, #12]
 800910a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800910e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009110:	683b      	ldr	r3, [r7, #0]
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	68fa      	ldr	r2, [r7, #12]
 8009116:	4313      	orrs	r3, r2
 8009118:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	68fa      	ldr	r2, [r7, #12]
 8009120:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	4a20      	ldr	r2, [pc, #128]	; (80091a8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8009128:	4293      	cmp	r3, r2
 800912a:	d022      	beq.n	8009172 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009134:	d01d      	beq.n	8009172 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	4a1c      	ldr	r2, [pc, #112]	; (80091ac <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800913c:	4293      	cmp	r3, r2
 800913e:	d018      	beq.n	8009172 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	4a1a      	ldr	r2, [pc, #104]	; (80091b0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8009146:	4293      	cmp	r3, r2
 8009148:	d013      	beq.n	8009172 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	681b      	ldr	r3, [r3, #0]
 800914e:	4a19      	ldr	r2, [pc, #100]	; (80091b4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8009150:	4293      	cmp	r3, r2
 8009152:	d00e      	beq.n	8009172 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	4a17      	ldr	r2, [pc, #92]	; (80091b8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800915a:	4293      	cmp	r3, r2
 800915c:	d009      	beq.n	8009172 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	4a16      	ldr	r2, [pc, #88]	; (80091bc <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8009164:	4293      	cmp	r3, r2
 8009166:	d004      	beq.n	8009172 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	4a14      	ldr	r2, [pc, #80]	; (80091c0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800916e:	4293      	cmp	r3, r2
 8009170:	d10c      	bne.n	800918c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009172:	68bb      	ldr	r3, [r7, #8]
 8009174:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009178:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800917a:	683b      	ldr	r3, [r7, #0]
 800917c:	685b      	ldr	r3, [r3, #4]
 800917e:	68ba      	ldr	r2, [r7, #8]
 8009180:	4313      	orrs	r3, r2
 8009182:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	68ba      	ldr	r2, [r7, #8]
 800918a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	2201      	movs	r2, #1
 8009190:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	2200      	movs	r2, #0
 8009198:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800919c:	2300      	movs	r3, #0
}
 800919e:	4618      	mov	r0, r3
 80091a0:	3714      	adds	r7, #20
 80091a2:	46bd      	mov	sp, r7
 80091a4:	bc80      	pop	{r7}
 80091a6:	4770      	bx	lr
 80091a8:	40010000 	.word	0x40010000
 80091ac:	40000400 	.word	0x40000400
 80091b0:	40000800 	.word	0x40000800
 80091b4:	40000c00 	.word	0x40000c00
 80091b8:	40010400 	.word	0x40010400
 80091bc:	40014000 	.word	0x40014000
 80091c0:	40001800 	.word	0x40001800

080091c4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80091c4:	b480      	push	{r7}
 80091c6:	b083      	sub	sp, #12
 80091c8:	af00      	add	r7, sp, #0
 80091ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80091cc:	bf00      	nop
 80091ce:	370c      	adds	r7, #12
 80091d0:	46bd      	mov	sp, r7
 80091d2:	bc80      	pop	{r7}
 80091d4:	4770      	bx	lr

080091d6 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80091d6:	b480      	push	{r7}
 80091d8:	b083      	sub	sp, #12
 80091da:	af00      	add	r7, sp, #0
 80091dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80091de:	bf00      	nop
 80091e0:	370c      	adds	r7, #12
 80091e2:	46bd      	mov	sp, r7
 80091e4:	bc80      	pop	{r7}
 80091e6:	4770      	bx	lr

080091e8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80091e8:	b084      	sub	sp, #16
 80091ea:	b580      	push	{r7, lr}
 80091ec:	b084      	sub	sp, #16
 80091ee:	af00      	add	r7, sp, #0
 80091f0:	6078      	str	r0, [r7, #4]
 80091f2:	f107 001c 	add.w	r0, r7, #28
 80091f6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80091fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091fc:	2b01      	cmp	r3, #1
 80091fe:	d122      	bne.n	8009246 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009204:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	68db      	ldr	r3, [r3, #12]
 8009210:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8009214:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009218:	687a      	ldr	r2, [r7, #4]
 800921a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	68db      	ldr	r3, [r3, #12]
 8009220:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8009228:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800922a:	2b01      	cmp	r3, #1
 800922c:	d105      	bne.n	800923a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	68db      	ldr	r3, [r3, #12]
 8009232:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800923a:	6878      	ldr	r0, [r7, #4]
 800923c:	f001 fafa 	bl	800a834 <USB_CoreReset>
 8009240:	4603      	mov	r3, r0
 8009242:	73fb      	strb	r3, [r7, #15]
 8009244:	e010      	b.n	8009268 <USB_CoreInit+0x80>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	68db      	ldr	r3, [r3, #12]
 800924a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8009252:	6878      	ldr	r0, [r7, #4]
 8009254:	f001 faee 	bl	800a834 <USB_CoreReset>
 8009258:	4603      	mov	r3, r0
 800925a:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009260:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8009268:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800926a:	2b01      	cmp	r3, #1
 800926c:	d10b      	bne.n	8009286 <USB_CoreInit+0x9e>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	689b      	ldr	r3, [r3, #8]
 8009272:	f043 0206 	orr.w	r2, r3, #6
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	689b      	ldr	r3, [r3, #8]
 800927e:	f043 0220 	orr.w	r2, r3, #32
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8009286:	7bfb      	ldrb	r3, [r7, #15]
}
 8009288:	4618      	mov	r0, r3
 800928a:	3710      	adds	r7, #16
 800928c:	46bd      	mov	sp, r7
 800928e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009292:	b004      	add	sp, #16
 8009294:	4770      	bx	lr
	...

08009298 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8009298:	b480      	push	{r7}
 800929a:	b087      	sub	sp, #28
 800929c:	af00      	add	r7, sp, #0
 800929e:	60f8      	str	r0, [r7, #12]
 80092a0:	60b9      	str	r1, [r7, #8]
 80092a2:	4613      	mov	r3, r2
 80092a4:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80092a6:	79fb      	ldrb	r3, [r7, #7]
 80092a8:	2b02      	cmp	r3, #2
 80092aa:	d165      	bne.n	8009378 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80092ac:	68bb      	ldr	r3, [r7, #8]
 80092ae:	4a41      	ldr	r2, [pc, #260]	; (80093b4 <USB_SetTurnaroundTime+0x11c>)
 80092b0:	4293      	cmp	r3, r2
 80092b2:	d906      	bls.n	80092c2 <USB_SetTurnaroundTime+0x2a>
 80092b4:	68bb      	ldr	r3, [r7, #8]
 80092b6:	4a40      	ldr	r2, [pc, #256]	; (80093b8 <USB_SetTurnaroundTime+0x120>)
 80092b8:	4293      	cmp	r3, r2
 80092ba:	d202      	bcs.n	80092c2 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80092bc:	230f      	movs	r3, #15
 80092be:	617b      	str	r3, [r7, #20]
 80092c0:	e062      	b.n	8009388 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80092c2:	68bb      	ldr	r3, [r7, #8]
 80092c4:	4a3c      	ldr	r2, [pc, #240]	; (80093b8 <USB_SetTurnaroundTime+0x120>)
 80092c6:	4293      	cmp	r3, r2
 80092c8:	d306      	bcc.n	80092d8 <USB_SetTurnaroundTime+0x40>
 80092ca:	68bb      	ldr	r3, [r7, #8]
 80092cc:	4a3b      	ldr	r2, [pc, #236]	; (80093bc <USB_SetTurnaroundTime+0x124>)
 80092ce:	4293      	cmp	r3, r2
 80092d0:	d202      	bcs.n	80092d8 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80092d2:	230e      	movs	r3, #14
 80092d4:	617b      	str	r3, [r7, #20]
 80092d6:	e057      	b.n	8009388 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80092d8:	68bb      	ldr	r3, [r7, #8]
 80092da:	4a38      	ldr	r2, [pc, #224]	; (80093bc <USB_SetTurnaroundTime+0x124>)
 80092dc:	4293      	cmp	r3, r2
 80092de:	d306      	bcc.n	80092ee <USB_SetTurnaroundTime+0x56>
 80092e0:	68bb      	ldr	r3, [r7, #8]
 80092e2:	4a37      	ldr	r2, [pc, #220]	; (80093c0 <USB_SetTurnaroundTime+0x128>)
 80092e4:	4293      	cmp	r3, r2
 80092e6:	d202      	bcs.n	80092ee <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80092e8:	230d      	movs	r3, #13
 80092ea:	617b      	str	r3, [r7, #20]
 80092ec:	e04c      	b.n	8009388 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80092ee:	68bb      	ldr	r3, [r7, #8]
 80092f0:	4a33      	ldr	r2, [pc, #204]	; (80093c0 <USB_SetTurnaroundTime+0x128>)
 80092f2:	4293      	cmp	r3, r2
 80092f4:	d306      	bcc.n	8009304 <USB_SetTurnaroundTime+0x6c>
 80092f6:	68bb      	ldr	r3, [r7, #8]
 80092f8:	4a32      	ldr	r2, [pc, #200]	; (80093c4 <USB_SetTurnaroundTime+0x12c>)
 80092fa:	4293      	cmp	r3, r2
 80092fc:	d802      	bhi.n	8009304 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80092fe:	230c      	movs	r3, #12
 8009300:	617b      	str	r3, [r7, #20]
 8009302:	e041      	b.n	8009388 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8009304:	68bb      	ldr	r3, [r7, #8]
 8009306:	4a2f      	ldr	r2, [pc, #188]	; (80093c4 <USB_SetTurnaroundTime+0x12c>)
 8009308:	4293      	cmp	r3, r2
 800930a:	d906      	bls.n	800931a <USB_SetTurnaroundTime+0x82>
 800930c:	68bb      	ldr	r3, [r7, #8]
 800930e:	4a2e      	ldr	r2, [pc, #184]	; (80093c8 <USB_SetTurnaroundTime+0x130>)
 8009310:	4293      	cmp	r3, r2
 8009312:	d802      	bhi.n	800931a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8009314:	230b      	movs	r3, #11
 8009316:	617b      	str	r3, [r7, #20]
 8009318:	e036      	b.n	8009388 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800931a:	68bb      	ldr	r3, [r7, #8]
 800931c:	4a2a      	ldr	r2, [pc, #168]	; (80093c8 <USB_SetTurnaroundTime+0x130>)
 800931e:	4293      	cmp	r3, r2
 8009320:	d906      	bls.n	8009330 <USB_SetTurnaroundTime+0x98>
 8009322:	68bb      	ldr	r3, [r7, #8]
 8009324:	4a29      	ldr	r2, [pc, #164]	; (80093cc <USB_SetTurnaroundTime+0x134>)
 8009326:	4293      	cmp	r3, r2
 8009328:	d802      	bhi.n	8009330 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800932a:	230a      	movs	r3, #10
 800932c:	617b      	str	r3, [r7, #20]
 800932e:	e02b      	b.n	8009388 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8009330:	68bb      	ldr	r3, [r7, #8]
 8009332:	4a26      	ldr	r2, [pc, #152]	; (80093cc <USB_SetTurnaroundTime+0x134>)
 8009334:	4293      	cmp	r3, r2
 8009336:	d906      	bls.n	8009346 <USB_SetTurnaroundTime+0xae>
 8009338:	68bb      	ldr	r3, [r7, #8]
 800933a:	4a25      	ldr	r2, [pc, #148]	; (80093d0 <USB_SetTurnaroundTime+0x138>)
 800933c:	4293      	cmp	r3, r2
 800933e:	d202      	bcs.n	8009346 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8009340:	2309      	movs	r3, #9
 8009342:	617b      	str	r3, [r7, #20]
 8009344:	e020      	b.n	8009388 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8009346:	68bb      	ldr	r3, [r7, #8]
 8009348:	4a21      	ldr	r2, [pc, #132]	; (80093d0 <USB_SetTurnaroundTime+0x138>)
 800934a:	4293      	cmp	r3, r2
 800934c:	d306      	bcc.n	800935c <USB_SetTurnaroundTime+0xc4>
 800934e:	68bb      	ldr	r3, [r7, #8]
 8009350:	4a20      	ldr	r2, [pc, #128]	; (80093d4 <USB_SetTurnaroundTime+0x13c>)
 8009352:	4293      	cmp	r3, r2
 8009354:	d802      	bhi.n	800935c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8009356:	2308      	movs	r3, #8
 8009358:	617b      	str	r3, [r7, #20]
 800935a:	e015      	b.n	8009388 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800935c:	68bb      	ldr	r3, [r7, #8]
 800935e:	4a1d      	ldr	r2, [pc, #116]	; (80093d4 <USB_SetTurnaroundTime+0x13c>)
 8009360:	4293      	cmp	r3, r2
 8009362:	d906      	bls.n	8009372 <USB_SetTurnaroundTime+0xda>
 8009364:	68bb      	ldr	r3, [r7, #8]
 8009366:	4a1c      	ldr	r2, [pc, #112]	; (80093d8 <USB_SetTurnaroundTime+0x140>)
 8009368:	4293      	cmp	r3, r2
 800936a:	d202      	bcs.n	8009372 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800936c:	2307      	movs	r3, #7
 800936e:	617b      	str	r3, [r7, #20]
 8009370:	e00a      	b.n	8009388 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8009372:	2306      	movs	r3, #6
 8009374:	617b      	str	r3, [r7, #20]
 8009376:	e007      	b.n	8009388 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8009378:	79fb      	ldrb	r3, [r7, #7]
 800937a:	2b00      	cmp	r3, #0
 800937c:	d102      	bne.n	8009384 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800937e:	2309      	movs	r3, #9
 8009380:	617b      	str	r3, [r7, #20]
 8009382:	e001      	b.n	8009388 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8009384:	2309      	movs	r3, #9
 8009386:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8009388:	68fb      	ldr	r3, [r7, #12]
 800938a:	68db      	ldr	r3, [r3, #12]
 800938c:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8009390:	68fb      	ldr	r3, [r7, #12]
 8009392:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8009394:	68fb      	ldr	r3, [r7, #12]
 8009396:	68da      	ldr	r2, [r3, #12]
 8009398:	697b      	ldr	r3, [r7, #20]
 800939a:	029b      	lsls	r3, r3, #10
 800939c:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80093a0:	431a      	orrs	r2, r3
 80093a2:	68fb      	ldr	r3, [r7, #12]
 80093a4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80093a6:	2300      	movs	r3, #0
}
 80093a8:	4618      	mov	r0, r3
 80093aa:	371c      	adds	r7, #28
 80093ac:	46bd      	mov	sp, r7
 80093ae:	bc80      	pop	{r7}
 80093b0:	4770      	bx	lr
 80093b2:	bf00      	nop
 80093b4:	00d8acbf 	.word	0x00d8acbf
 80093b8:	00e4e1c0 	.word	0x00e4e1c0
 80093bc:	00f42400 	.word	0x00f42400
 80093c0:	01067380 	.word	0x01067380
 80093c4:	011a499f 	.word	0x011a499f
 80093c8:	01312cff 	.word	0x01312cff
 80093cc:	014ca43f 	.word	0x014ca43f
 80093d0:	016e3600 	.word	0x016e3600
 80093d4:	01a6ab1f 	.word	0x01a6ab1f
 80093d8:	01e84800 	.word	0x01e84800

080093dc <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80093dc:	b480      	push	{r7}
 80093de:	b083      	sub	sp, #12
 80093e0:	af00      	add	r7, sp, #0
 80093e2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	689b      	ldr	r3, [r3, #8]
 80093e8:	f043 0201 	orr.w	r2, r3, #1
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80093f0:	2300      	movs	r3, #0
}
 80093f2:	4618      	mov	r0, r3
 80093f4:	370c      	adds	r7, #12
 80093f6:	46bd      	mov	sp, r7
 80093f8:	bc80      	pop	{r7}
 80093fa:	4770      	bx	lr

080093fc <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80093fc:	b480      	push	{r7}
 80093fe:	b083      	sub	sp, #12
 8009400:	af00      	add	r7, sp, #0
 8009402:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	689b      	ldr	r3, [r3, #8]
 8009408:	f023 0201 	bic.w	r2, r3, #1
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009410:	2300      	movs	r3, #0
}
 8009412:	4618      	mov	r0, r3
 8009414:	370c      	adds	r7, #12
 8009416:	46bd      	mov	sp, r7
 8009418:	bc80      	pop	{r7}
 800941a:	4770      	bx	lr

0800941c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800941c:	b580      	push	{r7, lr}
 800941e:	b084      	sub	sp, #16
 8009420:	af00      	add	r7, sp, #0
 8009422:	6078      	str	r0, [r7, #4]
 8009424:	460b      	mov	r3, r1
 8009426:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8009428:	2300      	movs	r3, #0
 800942a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	68db      	ldr	r3, [r3, #12]
 8009430:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8009438:	78fb      	ldrb	r3, [r7, #3]
 800943a:	2b01      	cmp	r3, #1
 800943c:	d115      	bne.n	800946a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	68db      	ldr	r3, [r3, #12]
 8009442:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800944a:	2001      	movs	r0, #1
 800944c:	f7fb f8de 	bl	800460c <HAL_Delay>
      ms++;
 8009450:	68fb      	ldr	r3, [r7, #12]
 8009452:	3301      	adds	r3, #1
 8009454:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8009456:	6878      	ldr	r0, [r7, #4]
 8009458:	f001 f961 	bl	800a71e <USB_GetMode>
 800945c:	4603      	mov	r3, r0
 800945e:	2b01      	cmp	r3, #1
 8009460:	d01e      	beq.n	80094a0 <USB_SetCurrentMode+0x84>
 8009462:	68fb      	ldr	r3, [r7, #12]
 8009464:	2b31      	cmp	r3, #49	; 0x31
 8009466:	d9f0      	bls.n	800944a <USB_SetCurrentMode+0x2e>
 8009468:	e01a      	b.n	80094a0 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800946a:	78fb      	ldrb	r3, [r7, #3]
 800946c:	2b00      	cmp	r3, #0
 800946e:	d115      	bne.n	800949c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	68db      	ldr	r3, [r3, #12]
 8009474:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800947c:	2001      	movs	r0, #1
 800947e:	f7fb f8c5 	bl	800460c <HAL_Delay>
      ms++;
 8009482:	68fb      	ldr	r3, [r7, #12]
 8009484:	3301      	adds	r3, #1
 8009486:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8009488:	6878      	ldr	r0, [r7, #4]
 800948a:	f001 f948 	bl	800a71e <USB_GetMode>
 800948e:	4603      	mov	r3, r0
 8009490:	2b00      	cmp	r3, #0
 8009492:	d005      	beq.n	80094a0 <USB_SetCurrentMode+0x84>
 8009494:	68fb      	ldr	r3, [r7, #12]
 8009496:	2b31      	cmp	r3, #49	; 0x31
 8009498:	d9f0      	bls.n	800947c <USB_SetCurrentMode+0x60>
 800949a:	e001      	b.n	80094a0 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800949c:	2301      	movs	r3, #1
 800949e:	e005      	b.n	80094ac <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80094a0:	68fb      	ldr	r3, [r7, #12]
 80094a2:	2b32      	cmp	r3, #50	; 0x32
 80094a4:	d101      	bne.n	80094aa <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80094a6:	2301      	movs	r3, #1
 80094a8:	e000      	b.n	80094ac <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80094aa:	2300      	movs	r3, #0
}
 80094ac:	4618      	mov	r0, r3
 80094ae:	3710      	adds	r7, #16
 80094b0:	46bd      	mov	sp, r7
 80094b2:	bd80      	pop	{r7, pc}

080094b4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80094b4:	b084      	sub	sp, #16
 80094b6:	b580      	push	{r7, lr}
 80094b8:	b086      	sub	sp, #24
 80094ba:	af00      	add	r7, sp, #0
 80094bc:	6078      	str	r0, [r7, #4]
 80094be:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80094c2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80094c6:	2300      	movs	r3, #0
 80094c8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80094ce:	2300      	movs	r3, #0
 80094d0:	613b      	str	r3, [r7, #16]
 80094d2:	e009      	b.n	80094e8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80094d4:	687a      	ldr	r2, [r7, #4]
 80094d6:	693b      	ldr	r3, [r7, #16]
 80094d8:	3340      	adds	r3, #64	; 0x40
 80094da:	009b      	lsls	r3, r3, #2
 80094dc:	4413      	add	r3, r2
 80094de:	2200      	movs	r2, #0
 80094e0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80094e2:	693b      	ldr	r3, [r7, #16]
 80094e4:	3301      	adds	r3, #1
 80094e6:	613b      	str	r3, [r7, #16]
 80094e8:	693b      	ldr	r3, [r7, #16]
 80094ea:	2b0e      	cmp	r3, #14
 80094ec:	d9f2      	bls.n	80094d4 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80094ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80094f0:	2b00      	cmp	r3, #0
 80094f2:	d11c      	bne.n	800952e <USB_DevInit+0x7a>
  {
    /*
     * disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80094f4:	68fb      	ldr	r3, [r7, #12]
 80094f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80094fa:	685b      	ldr	r3, [r3, #4]
 80094fc:	68fa      	ldr	r2, [r7, #12]
 80094fe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009502:	f043 0302 	orr.w	r3, r3, #2
 8009506:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800950c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009518:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009524:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	639a      	str	r2, [r3, #56]	; 0x38
 800952c:	e00b      	b.n	8009546 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009532:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800953e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8009546:	68fb      	ldr	r3, [r7, #12]
 8009548:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800954c:	461a      	mov	r2, r3
 800954e:	2300      	movs	r3, #0
 8009550:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8009552:	68fb      	ldr	r3, [r7, #12]
 8009554:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009558:	4619      	mov	r1, r3
 800955a:	68fb      	ldr	r3, [r7, #12]
 800955c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009560:	461a      	mov	r2, r3
 8009562:	680b      	ldr	r3, [r1, #0]
 8009564:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8009566:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009568:	2b01      	cmp	r3, #1
 800956a:	d10c      	bne.n	8009586 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800956c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800956e:	2b00      	cmp	r3, #0
 8009570:	d104      	bne.n	800957c <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8009572:	2100      	movs	r1, #0
 8009574:	6878      	ldr	r0, [r7, #4]
 8009576:	f000 f945 	bl	8009804 <USB_SetDevSpeed>
 800957a:	e008      	b.n	800958e <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800957c:	2101      	movs	r1, #1
 800957e:	6878      	ldr	r0, [r7, #4]
 8009580:	f000 f940 	bl	8009804 <USB_SetDevSpeed>
 8009584:	e003      	b.n	800958e <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8009586:	2103      	movs	r1, #3
 8009588:	6878      	ldr	r0, [r7, #4]
 800958a:	f000 f93b 	bl	8009804 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800958e:	2110      	movs	r1, #16
 8009590:	6878      	ldr	r0, [r7, #4]
 8009592:	f000 f8f3 	bl	800977c <USB_FlushTxFifo>
 8009596:	4603      	mov	r3, r0
 8009598:	2b00      	cmp	r3, #0
 800959a:	d001      	beq.n	80095a0 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 800959c:	2301      	movs	r3, #1
 800959e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80095a0:	6878      	ldr	r0, [r7, #4]
 80095a2:	f000 f90f 	bl	80097c4 <USB_FlushRxFifo>
 80095a6:	4603      	mov	r3, r0
 80095a8:	2b00      	cmp	r3, #0
 80095aa:	d001      	beq.n	80095b0 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 80095ac:	2301      	movs	r3, #1
 80095ae:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80095b0:	68fb      	ldr	r3, [r7, #12]
 80095b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80095b6:	461a      	mov	r2, r3
 80095b8:	2300      	movs	r3, #0
 80095ba:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80095bc:	68fb      	ldr	r3, [r7, #12]
 80095be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80095c2:	461a      	mov	r2, r3
 80095c4:	2300      	movs	r3, #0
 80095c6:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80095c8:	68fb      	ldr	r3, [r7, #12]
 80095ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80095ce:	461a      	mov	r2, r3
 80095d0:	2300      	movs	r3, #0
 80095d2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80095d4:	2300      	movs	r3, #0
 80095d6:	613b      	str	r3, [r7, #16]
 80095d8:	e043      	b.n	8009662 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80095da:	693b      	ldr	r3, [r7, #16]
 80095dc:	015a      	lsls	r2, r3, #5
 80095de:	68fb      	ldr	r3, [r7, #12]
 80095e0:	4413      	add	r3, r2
 80095e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80095ec:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80095f0:	d118      	bne.n	8009624 <USB_DevInit+0x170>
    {
      if (i == 0U)
 80095f2:	693b      	ldr	r3, [r7, #16]
 80095f4:	2b00      	cmp	r3, #0
 80095f6:	d10a      	bne.n	800960e <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80095f8:	693b      	ldr	r3, [r7, #16]
 80095fa:	015a      	lsls	r2, r3, #5
 80095fc:	68fb      	ldr	r3, [r7, #12]
 80095fe:	4413      	add	r3, r2
 8009600:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009604:	461a      	mov	r2, r3
 8009606:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800960a:	6013      	str	r3, [r2, #0]
 800960c:	e013      	b.n	8009636 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800960e:	693b      	ldr	r3, [r7, #16]
 8009610:	015a      	lsls	r2, r3, #5
 8009612:	68fb      	ldr	r3, [r7, #12]
 8009614:	4413      	add	r3, r2
 8009616:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800961a:	461a      	mov	r2, r3
 800961c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8009620:	6013      	str	r3, [r2, #0]
 8009622:	e008      	b.n	8009636 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8009624:	693b      	ldr	r3, [r7, #16]
 8009626:	015a      	lsls	r2, r3, #5
 8009628:	68fb      	ldr	r3, [r7, #12]
 800962a:	4413      	add	r3, r2
 800962c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009630:	461a      	mov	r2, r3
 8009632:	2300      	movs	r3, #0
 8009634:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8009636:	693b      	ldr	r3, [r7, #16]
 8009638:	015a      	lsls	r2, r3, #5
 800963a:	68fb      	ldr	r3, [r7, #12]
 800963c:	4413      	add	r3, r2
 800963e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009642:	461a      	mov	r2, r3
 8009644:	2300      	movs	r3, #0
 8009646:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8009648:	693b      	ldr	r3, [r7, #16]
 800964a:	015a      	lsls	r2, r3, #5
 800964c:	68fb      	ldr	r3, [r7, #12]
 800964e:	4413      	add	r3, r2
 8009650:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009654:	461a      	mov	r2, r3
 8009656:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800965a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800965c:	693b      	ldr	r3, [r7, #16]
 800965e:	3301      	adds	r3, #1
 8009660:	613b      	str	r3, [r7, #16]
 8009662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009664:	693a      	ldr	r2, [r7, #16]
 8009666:	429a      	cmp	r2, r3
 8009668:	d3b7      	bcc.n	80095da <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800966a:	2300      	movs	r3, #0
 800966c:	613b      	str	r3, [r7, #16]
 800966e:	e043      	b.n	80096f8 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009670:	693b      	ldr	r3, [r7, #16]
 8009672:	015a      	lsls	r2, r3, #5
 8009674:	68fb      	ldr	r3, [r7, #12]
 8009676:	4413      	add	r3, r2
 8009678:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800967c:	681b      	ldr	r3, [r3, #0]
 800967e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009682:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009686:	d118      	bne.n	80096ba <USB_DevInit+0x206>
    {
      if (i == 0U)
 8009688:	693b      	ldr	r3, [r7, #16]
 800968a:	2b00      	cmp	r3, #0
 800968c:	d10a      	bne.n	80096a4 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800968e:	693b      	ldr	r3, [r7, #16]
 8009690:	015a      	lsls	r2, r3, #5
 8009692:	68fb      	ldr	r3, [r7, #12]
 8009694:	4413      	add	r3, r2
 8009696:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800969a:	461a      	mov	r2, r3
 800969c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80096a0:	6013      	str	r3, [r2, #0]
 80096a2:	e013      	b.n	80096cc <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80096a4:	693b      	ldr	r3, [r7, #16]
 80096a6:	015a      	lsls	r2, r3, #5
 80096a8:	68fb      	ldr	r3, [r7, #12]
 80096aa:	4413      	add	r3, r2
 80096ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80096b0:	461a      	mov	r2, r3
 80096b2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80096b6:	6013      	str	r3, [r2, #0]
 80096b8:	e008      	b.n	80096cc <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80096ba:	693b      	ldr	r3, [r7, #16]
 80096bc:	015a      	lsls	r2, r3, #5
 80096be:	68fb      	ldr	r3, [r7, #12]
 80096c0:	4413      	add	r3, r2
 80096c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80096c6:	461a      	mov	r2, r3
 80096c8:	2300      	movs	r3, #0
 80096ca:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80096cc:	693b      	ldr	r3, [r7, #16]
 80096ce:	015a      	lsls	r2, r3, #5
 80096d0:	68fb      	ldr	r3, [r7, #12]
 80096d2:	4413      	add	r3, r2
 80096d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80096d8:	461a      	mov	r2, r3
 80096da:	2300      	movs	r3, #0
 80096dc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80096de:	693b      	ldr	r3, [r7, #16]
 80096e0:	015a      	lsls	r2, r3, #5
 80096e2:	68fb      	ldr	r3, [r7, #12]
 80096e4:	4413      	add	r3, r2
 80096e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80096ea:	461a      	mov	r2, r3
 80096ec:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80096f0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80096f2:	693b      	ldr	r3, [r7, #16]
 80096f4:	3301      	adds	r3, #1
 80096f6:	613b      	str	r3, [r7, #16]
 80096f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096fa:	693a      	ldr	r2, [r7, #16]
 80096fc:	429a      	cmp	r2, r3
 80096fe:	d3b7      	bcc.n	8009670 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8009700:	68fb      	ldr	r3, [r7, #12]
 8009702:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009706:	691b      	ldr	r3, [r3, #16]
 8009708:	68fa      	ldr	r2, [r7, #12]
 800970a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800970e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009712:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	2200      	movs	r2, #0
 8009718:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8009720:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8009722:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009724:	2b00      	cmp	r3, #0
 8009726:	d105      	bne.n	8009734 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	699b      	ldr	r3, [r3, #24]
 800972c:	f043 0210 	orr.w	r2, r3, #16
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	699a      	ldr	r2, [r3, #24]
 8009738:	4b0f      	ldr	r3, [pc, #60]	; (8009778 <USB_DevInit+0x2c4>)
 800973a:	4313      	orrs	r3, r2
 800973c:	687a      	ldr	r2, [r7, #4]
 800973e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8009740:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009742:	2b00      	cmp	r3, #0
 8009744:	d005      	beq.n	8009752 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	699b      	ldr	r3, [r3, #24]
 800974a:	f043 0208 	orr.w	r2, r3, #8
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8009752:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009754:	2b01      	cmp	r3, #1
 8009756:	d107      	bne.n	8009768 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	699b      	ldr	r3, [r3, #24]
 800975c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009760:	f043 0304 	orr.w	r3, r3, #4
 8009764:	687a      	ldr	r2, [r7, #4]
 8009766:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8009768:	7dfb      	ldrb	r3, [r7, #23]
}
 800976a:	4618      	mov	r0, r3
 800976c:	3718      	adds	r7, #24
 800976e:	46bd      	mov	sp, r7
 8009770:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009774:	b004      	add	sp, #16
 8009776:	4770      	bx	lr
 8009778:	803c3800 	.word	0x803c3800

0800977c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800977c:	b480      	push	{r7}
 800977e:	b085      	sub	sp, #20
 8009780:	af00      	add	r7, sp, #0
 8009782:	6078      	str	r0, [r7, #4]
 8009784:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8009786:	2300      	movs	r3, #0
 8009788:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800978a:	683b      	ldr	r3, [r7, #0]
 800978c:	019b      	lsls	r3, r3, #6
 800978e:	f043 0220 	orr.w	r2, r3, #32
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8009796:	68fb      	ldr	r3, [r7, #12]
 8009798:	3301      	adds	r3, #1
 800979a:	60fb      	str	r3, [r7, #12]
 800979c:	68fb      	ldr	r3, [r7, #12]
 800979e:	4a08      	ldr	r2, [pc, #32]	; (80097c0 <USB_FlushTxFifo+0x44>)
 80097a0:	4293      	cmp	r3, r2
 80097a2:	d901      	bls.n	80097a8 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 80097a4:	2303      	movs	r3, #3
 80097a6:	e006      	b.n	80097b6 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	691b      	ldr	r3, [r3, #16]
 80097ac:	f003 0320 	and.w	r3, r3, #32
 80097b0:	2b20      	cmp	r3, #32
 80097b2:	d0f0      	beq.n	8009796 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80097b4:	2300      	movs	r3, #0
}
 80097b6:	4618      	mov	r0, r3
 80097b8:	3714      	adds	r7, #20
 80097ba:	46bd      	mov	sp, r7
 80097bc:	bc80      	pop	{r7}
 80097be:	4770      	bx	lr
 80097c0:	00030d40 	.word	0x00030d40

080097c4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80097c4:	b480      	push	{r7}
 80097c6:	b085      	sub	sp, #20
 80097c8:	af00      	add	r7, sp, #0
 80097ca:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 80097cc:	2300      	movs	r3, #0
 80097ce:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	2210      	movs	r2, #16
 80097d4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80097d6:	68fb      	ldr	r3, [r7, #12]
 80097d8:	3301      	adds	r3, #1
 80097da:	60fb      	str	r3, [r7, #12]
 80097dc:	68fb      	ldr	r3, [r7, #12]
 80097de:	4a08      	ldr	r2, [pc, #32]	; (8009800 <USB_FlushRxFifo+0x3c>)
 80097e0:	4293      	cmp	r3, r2
 80097e2:	d901      	bls.n	80097e8 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 80097e4:	2303      	movs	r3, #3
 80097e6:	e006      	b.n	80097f6 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	691b      	ldr	r3, [r3, #16]
 80097ec:	f003 0310 	and.w	r3, r3, #16
 80097f0:	2b10      	cmp	r3, #16
 80097f2:	d0f0      	beq.n	80097d6 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80097f4:	2300      	movs	r3, #0
}
 80097f6:	4618      	mov	r0, r3
 80097f8:	3714      	adds	r7, #20
 80097fa:	46bd      	mov	sp, r7
 80097fc:	bc80      	pop	{r7}
 80097fe:	4770      	bx	lr
 8009800:	00030d40 	.word	0x00030d40

08009804 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8009804:	b480      	push	{r7}
 8009806:	b085      	sub	sp, #20
 8009808:	af00      	add	r7, sp, #0
 800980a:	6078      	str	r0, [r7, #4]
 800980c:	460b      	mov	r3, r1
 800980e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8009814:	68fb      	ldr	r3, [r7, #12]
 8009816:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800981a:	681a      	ldr	r2, [r3, #0]
 800981c:	78fb      	ldrb	r3, [r7, #3]
 800981e:	68f9      	ldr	r1, [r7, #12]
 8009820:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009824:	4313      	orrs	r3, r2
 8009826:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8009828:	2300      	movs	r3, #0
}
 800982a:	4618      	mov	r0, r3
 800982c:	3714      	adds	r7, #20
 800982e:	46bd      	mov	sp, r7
 8009830:	bc80      	pop	{r7}
 8009832:	4770      	bx	lr

08009834 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8009834:	b480      	push	{r7}
 8009836:	b087      	sub	sp, #28
 8009838:	af00      	add	r7, sp, #0
 800983a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8009840:	693b      	ldr	r3, [r7, #16]
 8009842:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009846:	689b      	ldr	r3, [r3, #8]
 8009848:	f003 0306 	and.w	r3, r3, #6
 800984c:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800984e:	68fb      	ldr	r3, [r7, #12]
 8009850:	2b00      	cmp	r3, #0
 8009852:	d102      	bne.n	800985a <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8009854:	2300      	movs	r3, #0
 8009856:	75fb      	strb	r3, [r7, #23]
 8009858:	e00a      	b.n	8009870 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800985a:	68fb      	ldr	r3, [r7, #12]
 800985c:	2b02      	cmp	r3, #2
 800985e:	d002      	beq.n	8009866 <USB_GetDevSpeed+0x32>
 8009860:	68fb      	ldr	r3, [r7, #12]
 8009862:	2b06      	cmp	r3, #6
 8009864:	d102      	bne.n	800986c <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8009866:	2302      	movs	r3, #2
 8009868:	75fb      	strb	r3, [r7, #23]
 800986a:	e001      	b.n	8009870 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800986c:	230f      	movs	r3, #15
 800986e:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8009870:	7dfb      	ldrb	r3, [r7, #23]
}
 8009872:	4618      	mov	r0, r3
 8009874:	371c      	adds	r7, #28
 8009876:	46bd      	mov	sp, r7
 8009878:	bc80      	pop	{r7}
 800987a:	4770      	bx	lr

0800987c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800987c:	b480      	push	{r7}
 800987e:	b085      	sub	sp, #20
 8009880:	af00      	add	r7, sp, #0
 8009882:	6078      	str	r0, [r7, #4]
 8009884:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800988a:	683b      	ldr	r3, [r7, #0]
 800988c:	781b      	ldrb	r3, [r3, #0]
 800988e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009890:	683b      	ldr	r3, [r7, #0]
 8009892:	785b      	ldrb	r3, [r3, #1]
 8009894:	2b01      	cmp	r3, #1
 8009896:	d13a      	bne.n	800990e <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8009898:	68fb      	ldr	r3, [r7, #12]
 800989a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800989e:	69da      	ldr	r2, [r3, #28]
 80098a0:	683b      	ldr	r3, [r7, #0]
 80098a2:	781b      	ldrb	r3, [r3, #0]
 80098a4:	f003 030f 	and.w	r3, r3, #15
 80098a8:	2101      	movs	r1, #1
 80098aa:	fa01 f303 	lsl.w	r3, r1, r3
 80098ae:	b29b      	uxth	r3, r3
 80098b0:	68f9      	ldr	r1, [r7, #12]
 80098b2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80098b6:	4313      	orrs	r3, r2
 80098b8:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80098ba:	68bb      	ldr	r3, [r7, #8]
 80098bc:	015a      	lsls	r2, r3, #5
 80098be:	68fb      	ldr	r3, [r7, #12]
 80098c0:	4413      	add	r3, r2
 80098c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80098c6:	681b      	ldr	r3, [r3, #0]
 80098c8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80098cc:	2b00      	cmp	r3, #0
 80098ce:	d155      	bne.n	800997c <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80098d0:	68bb      	ldr	r3, [r7, #8]
 80098d2:	015a      	lsls	r2, r3, #5
 80098d4:	68fb      	ldr	r3, [r7, #12]
 80098d6:	4413      	add	r3, r2
 80098d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80098dc:	681a      	ldr	r2, [r3, #0]
 80098de:	683b      	ldr	r3, [r7, #0]
 80098e0:	689b      	ldr	r3, [r3, #8]
 80098e2:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80098e6:	683b      	ldr	r3, [r7, #0]
 80098e8:	78db      	ldrb	r3, [r3, #3]
 80098ea:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80098ec:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80098ee:	68bb      	ldr	r3, [r7, #8]
 80098f0:	059b      	lsls	r3, r3, #22
 80098f2:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80098f4:	4313      	orrs	r3, r2
 80098f6:	68ba      	ldr	r2, [r7, #8]
 80098f8:	0151      	lsls	r1, r2, #5
 80098fa:	68fa      	ldr	r2, [r7, #12]
 80098fc:	440a      	add	r2, r1
 80098fe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009902:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009906:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800990a:	6013      	str	r3, [r2, #0]
 800990c:	e036      	b.n	800997c <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800990e:	68fb      	ldr	r3, [r7, #12]
 8009910:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009914:	69da      	ldr	r2, [r3, #28]
 8009916:	683b      	ldr	r3, [r7, #0]
 8009918:	781b      	ldrb	r3, [r3, #0]
 800991a:	f003 030f 	and.w	r3, r3, #15
 800991e:	2101      	movs	r1, #1
 8009920:	fa01 f303 	lsl.w	r3, r1, r3
 8009924:	041b      	lsls	r3, r3, #16
 8009926:	68f9      	ldr	r1, [r7, #12]
 8009928:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800992c:	4313      	orrs	r3, r2
 800992e:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8009930:	68bb      	ldr	r3, [r7, #8]
 8009932:	015a      	lsls	r2, r3, #5
 8009934:	68fb      	ldr	r3, [r7, #12]
 8009936:	4413      	add	r3, r2
 8009938:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800993c:	681b      	ldr	r3, [r3, #0]
 800993e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009942:	2b00      	cmp	r3, #0
 8009944:	d11a      	bne.n	800997c <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8009946:	68bb      	ldr	r3, [r7, #8]
 8009948:	015a      	lsls	r2, r3, #5
 800994a:	68fb      	ldr	r3, [r7, #12]
 800994c:	4413      	add	r3, r2
 800994e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009952:	681a      	ldr	r2, [r3, #0]
 8009954:	683b      	ldr	r3, [r7, #0]
 8009956:	689b      	ldr	r3, [r3, #8]
 8009958:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800995c:	683b      	ldr	r3, [r7, #0]
 800995e:	78db      	ldrb	r3, [r3, #3]
 8009960:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8009962:	430b      	orrs	r3, r1
 8009964:	4313      	orrs	r3, r2
 8009966:	68ba      	ldr	r2, [r7, #8]
 8009968:	0151      	lsls	r1, r2, #5
 800996a:	68fa      	ldr	r2, [r7, #12]
 800996c:	440a      	add	r2, r1
 800996e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009972:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009976:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800997a:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800997c:	2300      	movs	r3, #0
}
 800997e:	4618      	mov	r0, r3
 8009980:	3714      	adds	r7, #20
 8009982:	46bd      	mov	sp, r7
 8009984:	bc80      	pop	{r7}
 8009986:	4770      	bx	lr

08009988 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009988:	b480      	push	{r7}
 800998a:	b085      	sub	sp, #20
 800998c:	af00      	add	r7, sp, #0
 800998e:	6078      	str	r0, [r7, #4]
 8009990:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009996:	683b      	ldr	r3, [r7, #0]
 8009998:	781b      	ldrb	r3, [r3, #0]
 800999a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800999c:	683b      	ldr	r3, [r7, #0]
 800999e:	785b      	ldrb	r3, [r3, #1]
 80099a0:	2b01      	cmp	r3, #1
 80099a2:	d161      	bne.n	8009a68 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80099a4:	68bb      	ldr	r3, [r7, #8]
 80099a6:	015a      	lsls	r2, r3, #5
 80099a8:	68fb      	ldr	r3, [r7, #12]
 80099aa:	4413      	add	r3, r2
 80099ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80099b0:	681b      	ldr	r3, [r3, #0]
 80099b2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80099b6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80099ba:	d11f      	bne.n	80099fc <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80099bc:	68bb      	ldr	r3, [r7, #8]
 80099be:	015a      	lsls	r2, r3, #5
 80099c0:	68fb      	ldr	r3, [r7, #12]
 80099c2:	4413      	add	r3, r2
 80099c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80099c8:	681b      	ldr	r3, [r3, #0]
 80099ca:	68ba      	ldr	r2, [r7, #8]
 80099cc:	0151      	lsls	r1, r2, #5
 80099ce:	68fa      	ldr	r2, [r7, #12]
 80099d0:	440a      	add	r2, r1
 80099d2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80099d6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80099da:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80099dc:	68bb      	ldr	r3, [r7, #8]
 80099de:	015a      	lsls	r2, r3, #5
 80099e0:	68fb      	ldr	r3, [r7, #12]
 80099e2:	4413      	add	r3, r2
 80099e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80099e8:	681b      	ldr	r3, [r3, #0]
 80099ea:	68ba      	ldr	r2, [r7, #8]
 80099ec:	0151      	lsls	r1, r2, #5
 80099ee:	68fa      	ldr	r2, [r7, #12]
 80099f0:	440a      	add	r2, r1
 80099f2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80099f6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80099fa:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80099fc:	68fb      	ldr	r3, [r7, #12]
 80099fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009a02:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009a04:	683b      	ldr	r3, [r7, #0]
 8009a06:	781b      	ldrb	r3, [r3, #0]
 8009a08:	f003 030f 	and.w	r3, r3, #15
 8009a0c:	2101      	movs	r1, #1
 8009a0e:	fa01 f303 	lsl.w	r3, r1, r3
 8009a12:	b29b      	uxth	r3, r3
 8009a14:	43db      	mvns	r3, r3
 8009a16:	68f9      	ldr	r1, [r7, #12]
 8009a18:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009a1c:	4013      	ands	r3, r2
 8009a1e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8009a20:	68fb      	ldr	r3, [r7, #12]
 8009a22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009a26:	69da      	ldr	r2, [r3, #28]
 8009a28:	683b      	ldr	r3, [r7, #0]
 8009a2a:	781b      	ldrb	r3, [r3, #0]
 8009a2c:	f003 030f 	and.w	r3, r3, #15
 8009a30:	2101      	movs	r1, #1
 8009a32:	fa01 f303 	lsl.w	r3, r1, r3
 8009a36:	b29b      	uxth	r3, r3
 8009a38:	43db      	mvns	r3, r3
 8009a3a:	68f9      	ldr	r1, [r7, #12]
 8009a3c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009a40:	4013      	ands	r3, r2
 8009a42:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8009a44:	68bb      	ldr	r3, [r7, #8]
 8009a46:	015a      	lsls	r2, r3, #5
 8009a48:	68fb      	ldr	r3, [r7, #12]
 8009a4a:	4413      	add	r3, r2
 8009a4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009a50:	681a      	ldr	r2, [r3, #0]
 8009a52:	68bb      	ldr	r3, [r7, #8]
 8009a54:	0159      	lsls	r1, r3, #5
 8009a56:	68fb      	ldr	r3, [r7, #12]
 8009a58:	440b      	add	r3, r1
 8009a5a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009a5e:	4619      	mov	r1, r3
 8009a60:	4b35      	ldr	r3, [pc, #212]	; (8009b38 <USB_DeactivateEndpoint+0x1b0>)
 8009a62:	4013      	ands	r3, r2
 8009a64:	600b      	str	r3, [r1, #0]
 8009a66:	e060      	b.n	8009b2a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009a68:	68bb      	ldr	r3, [r7, #8]
 8009a6a:	015a      	lsls	r2, r3, #5
 8009a6c:	68fb      	ldr	r3, [r7, #12]
 8009a6e:	4413      	add	r3, r2
 8009a70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009a74:	681b      	ldr	r3, [r3, #0]
 8009a76:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009a7a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009a7e:	d11f      	bne.n	8009ac0 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8009a80:	68bb      	ldr	r3, [r7, #8]
 8009a82:	015a      	lsls	r2, r3, #5
 8009a84:	68fb      	ldr	r3, [r7, #12]
 8009a86:	4413      	add	r3, r2
 8009a88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009a8c:	681b      	ldr	r3, [r3, #0]
 8009a8e:	68ba      	ldr	r2, [r7, #8]
 8009a90:	0151      	lsls	r1, r2, #5
 8009a92:	68fa      	ldr	r2, [r7, #12]
 8009a94:	440a      	add	r2, r1
 8009a96:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009a9a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8009a9e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8009aa0:	68bb      	ldr	r3, [r7, #8]
 8009aa2:	015a      	lsls	r2, r3, #5
 8009aa4:	68fb      	ldr	r3, [r7, #12]
 8009aa6:	4413      	add	r3, r2
 8009aa8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009aac:	681b      	ldr	r3, [r3, #0]
 8009aae:	68ba      	ldr	r2, [r7, #8]
 8009ab0:	0151      	lsls	r1, r2, #5
 8009ab2:	68fa      	ldr	r2, [r7, #12]
 8009ab4:	440a      	add	r2, r1
 8009ab6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009aba:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009abe:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8009ac0:	68fb      	ldr	r3, [r7, #12]
 8009ac2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009ac6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009ac8:	683b      	ldr	r3, [r7, #0]
 8009aca:	781b      	ldrb	r3, [r3, #0]
 8009acc:	f003 030f 	and.w	r3, r3, #15
 8009ad0:	2101      	movs	r1, #1
 8009ad2:	fa01 f303 	lsl.w	r3, r1, r3
 8009ad6:	041b      	lsls	r3, r3, #16
 8009ad8:	43db      	mvns	r3, r3
 8009ada:	68f9      	ldr	r1, [r7, #12]
 8009adc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009ae0:	4013      	ands	r3, r2
 8009ae2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8009ae4:	68fb      	ldr	r3, [r7, #12]
 8009ae6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009aea:	69da      	ldr	r2, [r3, #28]
 8009aec:	683b      	ldr	r3, [r7, #0]
 8009aee:	781b      	ldrb	r3, [r3, #0]
 8009af0:	f003 030f 	and.w	r3, r3, #15
 8009af4:	2101      	movs	r1, #1
 8009af6:	fa01 f303 	lsl.w	r3, r1, r3
 8009afa:	041b      	lsls	r3, r3, #16
 8009afc:	43db      	mvns	r3, r3
 8009afe:	68f9      	ldr	r1, [r7, #12]
 8009b00:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009b04:	4013      	ands	r3, r2
 8009b06:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8009b08:	68bb      	ldr	r3, [r7, #8]
 8009b0a:	015a      	lsls	r2, r3, #5
 8009b0c:	68fb      	ldr	r3, [r7, #12]
 8009b0e:	4413      	add	r3, r2
 8009b10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009b14:	681a      	ldr	r2, [r3, #0]
 8009b16:	68bb      	ldr	r3, [r7, #8]
 8009b18:	0159      	lsls	r1, r3, #5
 8009b1a:	68fb      	ldr	r3, [r7, #12]
 8009b1c:	440b      	add	r3, r1
 8009b1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009b22:	4619      	mov	r1, r3
 8009b24:	4b05      	ldr	r3, [pc, #20]	; (8009b3c <USB_DeactivateEndpoint+0x1b4>)
 8009b26:	4013      	ands	r3, r2
 8009b28:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8009b2a:	2300      	movs	r3, #0
}
 8009b2c:	4618      	mov	r0, r3
 8009b2e:	3714      	adds	r7, #20
 8009b30:	46bd      	mov	sp, r7
 8009b32:	bc80      	pop	{r7}
 8009b34:	4770      	bx	lr
 8009b36:	bf00      	nop
 8009b38:	ec337800 	.word	0xec337800
 8009b3c:	eff37800 	.word	0xeff37800

08009b40 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8009b40:	b580      	push	{r7, lr}
 8009b42:	b08a      	sub	sp, #40	; 0x28
 8009b44:	af02      	add	r7, sp, #8
 8009b46:	60f8      	str	r0, [r7, #12]
 8009b48:	60b9      	str	r1, [r7, #8]
 8009b4a:	4613      	mov	r3, r2
 8009b4c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009b4e:	68fb      	ldr	r3, [r7, #12]
 8009b50:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8009b52:	68bb      	ldr	r3, [r7, #8]
 8009b54:	781b      	ldrb	r3, [r3, #0]
 8009b56:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8009b58:	68bb      	ldr	r3, [r7, #8]
 8009b5a:	785b      	ldrb	r3, [r3, #1]
 8009b5c:	2b01      	cmp	r3, #1
 8009b5e:	f040 815c 	bne.w	8009e1a <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8009b62:	68bb      	ldr	r3, [r7, #8]
 8009b64:	695b      	ldr	r3, [r3, #20]
 8009b66:	2b00      	cmp	r3, #0
 8009b68:	d132      	bne.n	8009bd0 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009b6a:	69bb      	ldr	r3, [r7, #24]
 8009b6c:	015a      	lsls	r2, r3, #5
 8009b6e:	69fb      	ldr	r3, [r7, #28]
 8009b70:	4413      	add	r3, r2
 8009b72:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009b76:	691b      	ldr	r3, [r3, #16]
 8009b78:	69ba      	ldr	r2, [r7, #24]
 8009b7a:	0151      	lsls	r1, r2, #5
 8009b7c:	69fa      	ldr	r2, [r7, #28]
 8009b7e:	440a      	add	r2, r1
 8009b80:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009b84:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009b88:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009b8c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8009b8e:	69bb      	ldr	r3, [r7, #24]
 8009b90:	015a      	lsls	r2, r3, #5
 8009b92:	69fb      	ldr	r3, [r7, #28]
 8009b94:	4413      	add	r3, r2
 8009b96:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009b9a:	691b      	ldr	r3, [r3, #16]
 8009b9c:	69ba      	ldr	r2, [r7, #24]
 8009b9e:	0151      	lsls	r1, r2, #5
 8009ba0:	69fa      	ldr	r2, [r7, #28]
 8009ba2:	440a      	add	r2, r1
 8009ba4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009ba8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009bac:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009bae:	69bb      	ldr	r3, [r7, #24]
 8009bb0:	015a      	lsls	r2, r3, #5
 8009bb2:	69fb      	ldr	r3, [r7, #28]
 8009bb4:	4413      	add	r3, r2
 8009bb6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009bba:	691b      	ldr	r3, [r3, #16]
 8009bbc:	69ba      	ldr	r2, [r7, #24]
 8009bbe:	0151      	lsls	r1, r2, #5
 8009bc0:	69fa      	ldr	r2, [r7, #28]
 8009bc2:	440a      	add	r2, r1
 8009bc4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009bc8:	0cdb      	lsrs	r3, r3, #19
 8009bca:	04db      	lsls	r3, r3, #19
 8009bcc:	6113      	str	r3, [r2, #16]
 8009bce:	e074      	b.n	8009cba <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009bd0:	69bb      	ldr	r3, [r7, #24]
 8009bd2:	015a      	lsls	r2, r3, #5
 8009bd4:	69fb      	ldr	r3, [r7, #28]
 8009bd6:	4413      	add	r3, r2
 8009bd8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009bdc:	691b      	ldr	r3, [r3, #16]
 8009bde:	69ba      	ldr	r2, [r7, #24]
 8009be0:	0151      	lsls	r1, r2, #5
 8009be2:	69fa      	ldr	r2, [r7, #28]
 8009be4:	440a      	add	r2, r1
 8009be6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009bea:	0cdb      	lsrs	r3, r3, #19
 8009bec:	04db      	lsls	r3, r3, #19
 8009bee:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009bf0:	69bb      	ldr	r3, [r7, #24]
 8009bf2:	015a      	lsls	r2, r3, #5
 8009bf4:	69fb      	ldr	r3, [r7, #28]
 8009bf6:	4413      	add	r3, r2
 8009bf8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009bfc:	691b      	ldr	r3, [r3, #16]
 8009bfe:	69ba      	ldr	r2, [r7, #24]
 8009c00:	0151      	lsls	r1, r2, #5
 8009c02:	69fa      	ldr	r2, [r7, #28]
 8009c04:	440a      	add	r2, r1
 8009c06:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009c0a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009c0e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009c12:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8009c14:	69bb      	ldr	r3, [r7, #24]
 8009c16:	015a      	lsls	r2, r3, #5
 8009c18:	69fb      	ldr	r3, [r7, #28]
 8009c1a:	4413      	add	r3, r2
 8009c1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009c20:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8009c22:	68bb      	ldr	r3, [r7, #8]
 8009c24:	6959      	ldr	r1, [r3, #20]
 8009c26:	68bb      	ldr	r3, [r7, #8]
 8009c28:	689b      	ldr	r3, [r3, #8]
 8009c2a:	440b      	add	r3, r1
 8009c2c:	1e59      	subs	r1, r3, #1
 8009c2e:	68bb      	ldr	r3, [r7, #8]
 8009c30:	689b      	ldr	r3, [r3, #8]
 8009c32:	fbb1 f3f3 	udiv	r3, r1, r3
 8009c36:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8009c38:	4b9d      	ldr	r3, [pc, #628]	; (8009eb0 <USB_EPStartXfer+0x370>)
 8009c3a:	400b      	ands	r3, r1
 8009c3c:	69b9      	ldr	r1, [r7, #24]
 8009c3e:	0148      	lsls	r0, r1, #5
 8009c40:	69f9      	ldr	r1, [r7, #28]
 8009c42:	4401      	add	r1, r0
 8009c44:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8009c48:	4313      	orrs	r3, r2
 8009c4a:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8009c4c:	69bb      	ldr	r3, [r7, #24]
 8009c4e:	015a      	lsls	r2, r3, #5
 8009c50:	69fb      	ldr	r3, [r7, #28]
 8009c52:	4413      	add	r3, r2
 8009c54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009c58:	691a      	ldr	r2, [r3, #16]
 8009c5a:	68bb      	ldr	r3, [r7, #8]
 8009c5c:	695b      	ldr	r3, [r3, #20]
 8009c5e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009c62:	69b9      	ldr	r1, [r7, #24]
 8009c64:	0148      	lsls	r0, r1, #5
 8009c66:	69f9      	ldr	r1, [r7, #28]
 8009c68:	4401      	add	r1, r0
 8009c6a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8009c6e:	4313      	orrs	r3, r2
 8009c70:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8009c72:	68bb      	ldr	r3, [r7, #8]
 8009c74:	78db      	ldrb	r3, [r3, #3]
 8009c76:	2b01      	cmp	r3, #1
 8009c78:	d11f      	bne.n	8009cba <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8009c7a:	69bb      	ldr	r3, [r7, #24]
 8009c7c:	015a      	lsls	r2, r3, #5
 8009c7e:	69fb      	ldr	r3, [r7, #28]
 8009c80:	4413      	add	r3, r2
 8009c82:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009c86:	691b      	ldr	r3, [r3, #16]
 8009c88:	69ba      	ldr	r2, [r7, #24]
 8009c8a:	0151      	lsls	r1, r2, #5
 8009c8c:	69fa      	ldr	r2, [r7, #28]
 8009c8e:	440a      	add	r2, r1
 8009c90:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009c94:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8009c98:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8009c9a:	69bb      	ldr	r3, [r7, #24]
 8009c9c:	015a      	lsls	r2, r3, #5
 8009c9e:	69fb      	ldr	r3, [r7, #28]
 8009ca0:	4413      	add	r3, r2
 8009ca2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009ca6:	691b      	ldr	r3, [r3, #16]
 8009ca8:	69ba      	ldr	r2, [r7, #24]
 8009caa:	0151      	lsls	r1, r2, #5
 8009cac:	69fa      	ldr	r2, [r7, #28]
 8009cae:	440a      	add	r2, r1
 8009cb0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009cb4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009cb8:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8009cba:	79fb      	ldrb	r3, [r7, #7]
 8009cbc:	2b01      	cmp	r3, #1
 8009cbe:	d14b      	bne.n	8009d58 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8009cc0:	68bb      	ldr	r3, [r7, #8]
 8009cc2:	691b      	ldr	r3, [r3, #16]
 8009cc4:	2b00      	cmp	r3, #0
 8009cc6:	d009      	beq.n	8009cdc <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8009cc8:	69bb      	ldr	r3, [r7, #24]
 8009cca:	015a      	lsls	r2, r3, #5
 8009ccc:	69fb      	ldr	r3, [r7, #28]
 8009cce:	4413      	add	r3, r2
 8009cd0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009cd4:	461a      	mov	r2, r3
 8009cd6:	68bb      	ldr	r3, [r7, #8]
 8009cd8:	691b      	ldr	r3, [r3, #16]
 8009cda:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8009cdc:	68bb      	ldr	r3, [r7, #8]
 8009cde:	78db      	ldrb	r3, [r3, #3]
 8009ce0:	2b01      	cmp	r3, #1
 8009ce2:	d128      	bne.n	8009d36 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009ce4:	69fb      	ldr	r3, [r7, #28]
 8009ce6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009cea:	689b      	ldr	r3, [r3, #8]
 8009cec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009cf0:	2b00      	cmp	r3, #0
 8009cf2:	d110      	bne.n	8009d16 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8009cf4:	69bb      	ldr	r3, [r7, #24]
 8009cf6:	015a      	lsls	r2, r3, #5
 8009cf8:	69fb      	ldr	r3, [r7, #28]
 8009cfa:	4413      	add	r3, r2
 8009cfc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009d00:	681b      	ldr	r3, [r3, #0]
 8009d02:	69ba      	ldr	r2, [r7, #24]
 8009d04:	0151      	lsls	r1, r2, #5
 8009d06:	69fa      	ldr	r2, [r7, #28]
 8009d08:	440a      	add	r2, r1
 8009d0a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009d0e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009d12:	6013      	str	r3, [r2, #0]
 8009d14:	e00f      	b.n	8009d36 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8009d16:	69bb      	ldr	r3, [r7, #24]
 8009d18:	015a      	lsls	r2, r3, #5
 8009d1a:	69fb      	ldr	r3, [r7, #28]
 8009d1c:	4413      	add	r3, r2
 8009d1e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009d22:	681b      	ldr	r3, [r3, #0]
 8009d24:	69ba      	ldr	r2, [r7, #24]
 8009d26:	0151      	lsls	r1, r2, #5
 8009d28:	69fa      	ldr	r2, [r7, #28]
 8009d2a:	440a      	add	r2, r1
 8009d2c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009d30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009d34:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009d36:	69bb      	ldr	r3, [r7, #24]
 8009d38:	015a      	lsls	r2, r3, #5
 8009d3a:	69fb      	ldr	r3, [r7, #28]
 8009d3c:	4413      	add	r3, r2
 8009d3e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009d42:	681b      	ldr	r3, [r3, #0]
 8009d44:	69ba      	ldr	r2, [r7, #24]
 8009d46:	0151      	lsls	r1, r2, #5
 8009d48:	69fa      	ldr	r2, [r7, #28]
 8009d4a:	440a      	add	r2, r1
 8009d4c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009d50:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009d54:	6013      	str	r3, [r2, #0]
 8009d56:	e12f      	b.n	8009fb8 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009d58:	69bb      	ldr	r3, [r7, #24]
 8009d5a:	015a      	lsls	r2, r3, #5
 8009d5c:	69fb      	ldr	r3, [r7, #28]
 8009d5e:	4413      	add	r3, r2
 8009d60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009d64:	681b      	ldr	r3, [r3, #0]
 8009d66:	69ba      	ldr	r2, [r7, #24]
 8009d68:	0151      	lsls	r1, r2, #5
 8009d6a:	69fa      	ldr	r2, [r7, #28]
 8009d6c:	440a      	add	r2, r1
 8009d6e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009d72:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009d76:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8009d78:	68bb      	ldr	r3, [r7, #8]
 8009d7a:	78db      	ldrb	r3, [r3, #3]
 8009d7c:	2b01      	cmp	r3, #1
 8009d7e:	d015      	beq.n	8009dac <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8009d80:	68bb      	ldr	r3, [r7, #8]
 8009d82:	695b      	ldr	r3, [r3, #20]
 8009d84:	2b00      	cmp	r3, #0
 8009d86:	f000 8117 	beq.w	8009fb8 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8009d8a:	69fb      	ldr	r3, [r7, #28]
 8009d8c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009d90:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009d92:	68bb      	ldr	r3, [r7, #8]
 8009d94:	781b      	ldrb	r3, [r3, #0]
 8009d96:	f003 030f 	and.w	r3, r3, #15
 8009d9a:	2101      	movs	r1, #1
 8009d9c:	fa01 f303 	lsl.w	r3, r1, r3
 8009da0:	69f9      	ldr	r1, [r7, #28]
 8009da2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009da6:	4313      	orrs	r3, r2
 8009da8:	634b      	str	r3, [r1, #52]	; 0x34
 8009daa:	e105      	b.n	8009fb8 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009dac:	69fb      	ldr	r3, [r7, #28]
 8009dae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009db2:	689b      	ldr	r3, [r3, #8]
 8009db4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009db8:	2b00      	cmp	r3, #0
 8009dba:	d110      	bne.n	8009dde <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8009dbc:	69bb      	ldr	r3, [r7, #24]
 8009dbe:	015a      	lsls	r2, r3, #5
 8009dc0:	69fb      	ldr	r3, [r7, #28]
 8009dc2:	4413      	add	r3, r2
 8009dc4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009dc8:	681b      	ldr	r3, [r3, #0]
 8009dca:	69ba      	ldr	r2, [r7, #24]
 8009dcc:	0151      	lsls	r1, r2, #5
 8009dce:	69fa      	ldr	r2, [r7, #28]
 8009dd0:	440a      	add	r2, r1
 8009dd2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009dd6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009dda:	6013      	str	r3, [r2, #0]
 8009ddc:	e00f      	b.n	8009dfe <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8009dde:	69bb      	ldr	r3, [r7, #24]
 8009de0:	015a      	lsls	r2, r3, #5
 8009de2:	69fb      	ldr	r3, [r7, #28]
 8009de4:	4413      	add	r3, r2
 8009de6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009dea:	681b      	ldr	r3, [r3, #0]
 8009dec:	69ba      	ldr	r2, [r7, #24]
 8009dee:	0151      	lsls	r1, r2, #5
 8009df0:	69fa      	ldr	r2, [r7, #28]
 8009df2:	440a      	add	r2, r1
 8009df4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009df8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009dfc:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8009dfe:	68bb      	ldr	r3, [r7, #8]
 8009e00:	68d9      	ldr	r1, [r3, #12]
 8009e02:	68bb      	ldr	r3, [r7, #8]
 8009e04:	781a      	ldrb	r2, [r3, #0]
 8009e06:	68bb      	ldr	r3, [r7, #8]
 8009e08:	695b      	ldr	r3, [r3, #20]
 8009e0a:	b298      	uxth	r0, r3
 8009e0c:	79fb      	ldrb	r3, [r7, #7]
 8009e0e:	9300      	str	r3, [sp, #0]
 8009e10:	4603      	mov	r3, r0
 8009e12:	68f8      	ldr	r0, [r7, #12]
 8009e14:	f000 fa2a 	bl	800a26c <USB_WritePacket>
 8009e18:	e0ce      	b.n	8009fb8 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8009e1a:	69bb      	ldr	r3, [r7, #24]
 8009e1c:	015a      	lsls	r2, r3, #5
 8009e1e:	69fb      	ldr	r3, [r7, #28]
 8009e20:	4413      	add	r3, r2
 8009e22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009e26:	691b      	ldr	r3, [r3, #16]
 8009e28:	69ba      	ldr	r2, [r7, #24]
 8009e2a:	0151      	lsls	r1, r2, #5
 8009e2c:	69fa      	ldr	r2, [r7, #28]
 8009e2e:	440a      	add	r2, r1
 8009e30:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009e34:	0cdb      	lsrs	r3, r3, #19
 8009e36:	04db      	lsls	r3, r3, #19
 8009e38:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8009e3a:	69bb      	ldr	r3, [r7, #24]
 8009e3c:	015a      	lsls	r2, r3, #5
 8009e3e:	69fb      	ldr	r3, [r7, #28]
 8009e40:	4413      	add	r3, r2
 8009e42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009e46:	691b      	ldr	r3, [r3, #16]
 8009e48:	69ba      	ldr	r2, [r7, #24]
 8009e4a:	0151      	lsls	r1, r2, #5
 8009e4c:	69fa      	ldr	r2, [r7, #28]
 8009e4e:	440a      	add	r2, r1
 8009e50:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009e54:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009e58:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009e5c:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8009e5e:	68bb      	ldr	r3, [r7, #8]
 8009e60:	695b      	ldr	r3, [r3, #20]
 8009e62:	2b00      	cmp	r3, #0
 8009e64:	d126      	bne.n	8009eb4 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8009e66:	69bb      	ldr	r3, [r7, #24]
 8009e68:	015a      	lsls	r2, r3, #5
 8009e6a:	69fb      	ldr	r3, [r7, #28]
 8009e6c:	4413      	add	r3, r2
 8009e6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009e72:	691a      	ldr	r2, [r3, #16]
 8009e74:	68bb      	ldr	r3, [r7, #8]
 8009e76:	689b      	ldr	r3, [r3, #8]
 8009e78:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009e7c:	69b9      	ldr	r1, [r7, #24]
 8009e7e:	0148      	lsls	r0, r1, #5
 8009e80:	69f9      	ldr	r1, [r7, #28]
 8009e82:	4401      	add	r1, r0
 8009e84:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8009e88:	4313      	orrs	r3, r2
 8009e8a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009e8c:	69bb      	ldr	r3, [r7, #24]
 8009e8e:	015a      	lsls	r2, r3, #5
 8009e90:	69fb      	ldr	r3, [r7, #28]
 8009e92:	4413      	add	r3, r2
 8009e94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009e98:	691b      	ldr	r3, [r3, #16]
 8009e9a:	69ba      	ldr	r2, [r7, #24]
 8009e9c:	0151      	lsls	r1, r2, #5
 8009e9e:	69fa      	ldr	r2, [r7, #28]
 8009ea0:	440a      	add	r2, r1
 8009ea2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009ea6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009eaa:	6113      	str	r3, [r2, #16]
 8009eac:	e036      	b.n	8009f1c <USB_EPStartXfer+0x3dc>
 8009eae:	bf00      	nop
 8009eb0:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8009eb4:	68bb      	ldr	r3, [r7, #8]
 8009eb6:	695a      	ldr	r2, [r3, #20]
 8009eb8:	68bb      	ldr	r3, [r7, #8]
 8009eba:	689b      	ldr	r3, [r3, #8]
 8009ebc:	4413      	add	r3, r2
 8009ebe:	1e5a      	subs	r2, r3, #1
 8009ec0:	68bb      	ldr	r3, [r7, #8]
 8009ec2:	689b      	ldr	r3, [r3, #8]
 8009ec4:	fbb2 f3f3 	udiv	r3, r2, r3
 8009ec8:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8009eca:	69bb      	ldr	r3, [r7, #24]
 8009ecc:	015a      	lsls	r2, r3, #5
 8009ece:	69fb      	ldr	r3, [r7, #28]
 8009ed0:	4413      	add	r3, r2
 8009ed2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009ed6:	691a      	ldr	r2, [r3, #16]
 8009ed8:	8afb      	ldrh	r3, [r7, #22]
 8009eda:	04d9      	lsls	r1, r3, #19
 8009edc:	4b39      	ldr	r3, [pc, #228]	; (8009fc4 <USB_EPStartXfer+0x484>)
 8009ede:	400b      	ands	r3, r1
 8009ee0:	69b9      	ldr	r1, [r7, #24]
 8009ee2:	0148      	lsls	r0, r1, #5
 8009ee4:	69f9      	ldr	r1, [r7, #28]
 8009ee6:	4401      	add	r1, r0
 8009ee8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8009eec:	4313      	orrs	r3, r2
 8009eee:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8009ef0:	69bb      	ldr	r3, [r7, #24]
 8009ef2:	015a      	lsls	r2, r3, #5
 8009ef4:	69fb      	ldr	r3, [r7, #28]
 8009ef6:	4413      	add	r3, r2
 8009ef8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009efc:	691a      	ldr	r2, [r3, #16]
 8009efe:	68bb      	ldr	r3, [r7, #8]
 8009f00:	689b      	ldr	r3, [r3, #8]
 8009f02:	8af9      	ldrh	r1, [r7, #22]
 8009f04:	fb01 f303 	mul.w	r3, r1, r3
 8009f08:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009f0c:	69b9      	ldr	r1, [r7, #24]
 8009f0e:	0148      	lsls	r0, r1, #5
 8009f10:	69f9      	ldr	r1, [r7, #28]
 8009f12:	4401      	add	r1, r0
 8009f14:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8009f18:	4313      	orrs	r3, r2
 8009f1a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8009f1c:	79fb      	ldrb	r3, [r7, #7]
 8009f1e:	2b01      	cmp	r3, #1
 8009f20:	d10d      	bne.n	8009f3e <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8009f22:	68bb      	ldr	r3, [r7, #8]
 8009f24:	68db      	ldr	r3, [r3, #12]
 8009f26:	2b00      	cmp	r3, #0
 8009f28:	d009      	beq.n	8009f3e <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8009f2a:	68bb      	ldr	r3, [r7, #8]
 8009f2c:	68d9      	ldr	r1, [r3, #12]
 8009f2e:	69bb      	ldr	r3, [r7, #24]
 8009f30:	015a      	lsls	r2, r3, #5
 8009f32:	69fb      	ldr	r3, [r7, #28]
 8009f34:	4413      	add	r3, r2
 8009f36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009f3a:	460a      	mov	r2, r1
 8009f3c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8009f3e:	68bb      	ldr	r3, [r7, #8]
 8009f40:	78db      	ldrb	r3, [r3, #3]
 8009f42:	2b01      	cmp	r3, #1
 8009f44:	d128      	bne.n	8009f98 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009f46:	69fb      	ldr	r3, [r7, #28]
 8009f48:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009f4c:	689b      	ldr	r3, [r3, #8]
 8009f4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009f52:	2b00      	cmp	r3, #0
 8009f54:	d110      	bne.n	8009f78 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8009f56:	69bb      	ldr	r3, [r7, #24]
 8009f58:	015a      	lsls	r2, r3, #5
 8009f5a:	69fb      	ldr	r3, [r7, #28]
 8009f5c:	4413      	add	r3, r2
 8009f5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009f62:	681b      	ldr	r3, [r3, #0]
 8009f64:	69ba      	ldr	r2, [r7, #24]
 8009f66:	0151      	lsls	r1, r2, #5
 8009f68:	69fa      	ldr	r2, [r7, #28]
 8009f6a:	440a      	add	r2, r1
 8009f6c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009f70:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009f74:	6013      	str	r3, [r2, #0]
 8009f76:	e00f      	b.n	8009f98 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8009f78:	69bb      	ldr	r3, [r7, #24]
 8009f7a:	015a      	lsls	r2, r3, #5
 8009f7c:	69fb      	ldr	r3, [r7, #28]
 8009f7e:	4413      	add	r3, r2
 8009f80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009f84:	681b      	ldr	r3, [r3, #0]
 8009f86:	69ba      	ldr	r2, [r7, #24]
 8009f88:	0151      	lsls	r1, r2, #5
 8009f8a:	69fa      	ldr	r2, [r7, #28]
 8009f8c:	440a      	add	r2, r1
 8009f8e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009f92:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009f96:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8009f98:	69bb      	ldr	r3, [r7, #24]
 8009f9a:	015a      	lsls	r2, r3, #5
 8009f9c:	69fb      	ldr	r3, [r7, #28]
 8009f9e:	4413      	add	r3, r2
 8009fa0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009fa4:	681b      	ldr	r3, [r3, #0]
 8009fa6:	69ba      	ldr	r2, [r7, #24]
 8009fa8:	0151      	lsls	r1, r2, #5
 8009faa:	69fa      	ldr	r2, [r7, #28]
 8009fac:	440a      	add	r2, r1
 8009fae:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009fb2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009fb6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009fb8:	2300      	movs	r3, #0
}
 8009fba:	4618      	mov	r0, r3
 8009fbc:	3720      	adds	r7, #32
 8009fbe:	46bd      	mov	sp, r7
 8009fc0:	bd80      	pop	{r7, pc}
 8009fc2:	bf00      	nop
 8009fc4:	1ff80000 	.word	0x1ff80000

08009fc8 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8009fc8:	b480      	push	{r7}
 8009fca:	b087      	sub	sp, #28
 8009fcc:	af00      	add	r7, sp, #0
 8009fce:	60f8      	str	r0, [r7, #12]
 8009fd0:	60b9      	str	r1, [r7, #8]
 8009fd2:	4613      	mov	r3, r2
 8009fd4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009fd6:	68fb      	ldr	r3, [r7, #12]
 8009fd8:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8009fda:	68bb      	ldr	r3, [r7, #8]
 8009fdc:	781b      	ldrb	r3, [r3, #0]
 8009fde:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8009fe0:	68bb      	ldr	r3, [r7, #8]
 8009fe2:	785b      	ldrb	r3, [r3, #1]
 8009fe4:	2b01      	cmp	r3, #1
 8009fe6:	f040 80cd 	bne.w	800a184 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8009fea:	68bb      	ldr	r3, [r7, #8]
 8009fec:	695b      	ldr	r3, [r3, #20]
 8009fee:	2b00      	cmp	r3, #0
 8009ff0:	d132      	bne.n	800a058 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009ff2:	693b      	ldr	r3, [r7, #16]
 8009ff4:	015a      	lsls	r2, r3, #5
 8009ff6:	697b      	ldr	r3, [r7, #20]
 8009ff8:	4413      	add	r3, r2
 8009ffa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009ffe:	691b      	ldr	r3, [r3, #16]
 800a000:	693a      	ldr	r2, [r7, #16]
 800a002:	0151      	lsls	r1, r2, #5
 800a004:	697a      	ldr	r2, [r7, #20]
 800a006:	440a      	add	r2, r1
 800a008:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a00c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800a010:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800a014:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800a016:	693b      	ldr	r3, [r7, #16]
 800a018:	015a      	lsls	r2, r3, #5
 800a01a:	697b      	ldr	r3, [r7, #20]
 800a01c:	4413      	add	r3, r2
 800a01e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a022:	691b      	ldr	r3, [r3, #16]
 800a024:	693a      	ldr	r2, [r7, #16]
 800a026:	0151      	lsls	r1, r2, #5
 800a028:	697a      	ldr	r2, [r7, #20]
 800a02a:	440a      	add	r2, r1
 800a02c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a030:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a034:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a036:	693b      	ldr	r3, [r7, #16]
 800a038:	015a      	lsls	r2, r3, #5
 800a03a:	697b      	ldr	r3, [r7, #20]
 800a03c:	4413      	add	r3, r2
 800a03e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a042:	691b      	ldr	r3, [r3, #16]
 800a044:	693a      	ldr	r2, [r7, #16]
 800a046:	0151      	lsls	r1, r2, #5
 800a048:	697a      	ldr	r2, [r7, #20]
 800a04a:	440a      	add	r2, r1
 800a04c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a050:	0cdb      	lsrs	r3, r3, #19
 800a052:	04db      	lsls	r3, r3, #19
 800a054:	6113      	str	r3, [r2, #16]
 800a056:	e04e      	b.n	800a0f6 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a058:	693b      	ldr	r3, [r7, #16]
 800a05a:	015a      	lsls	r2, r3, #5
 800a05c:	697b      	ldr	r3, [r7, #20]
 800a05e:	4413      	add	r3, r2
 800a060:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a064:	691b      	ldr	r3, [r3, #16]
 800a066:	693a      	ldr	r2, [r7, #16]
 800a068:	0151      	lsls	r1, r2, #5
 800a06a:	697a      	ldr	r2, [r7, #20]
 800a06c:	440a      	add	r2, r1
 800a06e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a072:	0cdb      	lsrs	r3, r3, #19
 800a074:	04db      	lsls	r3, r3, #19
 800a076:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a078:	693b      	ldr	r3, [r7, #16]
 800a07a:	015a      	lsls	r2, r3, #5
 800a07c:	697b      	ldr	r3, [r7, #20]
 800a07e:	4413      	add	r3, r2
 800a080:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a084:	691b      	ldr	r3, [r3, #16]
 800a086:	693a      	ldr	r2, [r7, #16]
 800a088:	0151      	lsls	r1, r2, #5
 800a08a:	697a      	ldr	r2, [r7, #20]
 800a08c:	440a      	add	r2, r1
 800a08e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a092:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800a096:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800a09a:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800a09c:	68bb      	ldr	r3, [r7, #8]
 800a09e:	695a      	ldr	r2, [r3, #20]
 800a0a0:	68bb      	ldr	r3, [r7, #8]
 800a0a2:	689b      	ldr	r3, [r3, #8]
 800a0a4:	429a      	cmp	r2, r3
 800a0a6:	d903      	bls.n	800a0b0 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800a0a8:	68bb      	ldr	r3, [r7, #8]
 800a0aa:	689a      	ldr	r2, [r3, #8]
 800a0ac:	68bb      	ldr	r3, [r7, #8]
 800a0ae:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800a0b0:	693b      	ldr	r3, [r7, #16]
 800a0b2:	015a      	lsls	r2, r3, #5
 800a0b4:	697b      	ldr	r3, [r7, #20]
 800a0b6:	4413      	add	r3, r2
 800a0b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a0bc:	691b      	ldr	r3, [r3, #16]
 800a0be:	693a      	ldr	r2, [r7, #16]
 800a0c0:	0151      	lsls	r1, r2, #5
 800a0c2:	697a      	ldr	r2, [r7, #20]
 800a0c4:	440a      	add	r2, r1
 800a0c6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a0ca:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a0ce:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800a0d0:	693b      	ldr	r3, [r7, #16]
 800a0d2:	015a      	lsls	r2, r3, #5
 800a0d4:	697b      	ldr	r3, [r7, #20]
 800a0d6:	4413      	add	r3, r2
 800a0d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a0dc:	691a      	ldr	r2, [r3, #16]
 800a0de:	68bb      	ldr	r3, [r7, #8]
 800a0e0:	695b      	ldr	r3, [r3, #20]
 800a0e2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a0e6:	6939      	ldr	r1, [r7, #16]
 800a0e8:	0148      	lsls	r0, r1, #5
 800a0ea:	6979      	ldr	r1, [r7, #20]
 800a0ec:	4401      	add	r1, r0
 800a0ee:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800a0f2:	4313      	orrs	r3, r2
 800a0f4:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800a0f6:	79fb      	ldrb	r3, [r7, #7]
 800a0f8:	2b01      	cmp	r3, #1
 800a0fa:	d11e      	bne.n	800a13a <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800a0fc:	68bb      	ldr	r3, [r7, #8]
 800a0fe:	691b      	ldr	r3, [r3, #16]
 800a100:	2b00      	cmp	r3, #0
 800a102:	d009      	beq.n	800a118 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800a104:	693b      	ldr	r3, [r7, #16]
 800a106:	015a      	lsls	r2, r3, #5
 800a108:	697b      	ldr	r3, [r7, #20]
 800a10a:	4413      	add	r3, r2
 800a10c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a110:	461a      	mov	r2, r3
 800a112:	68bb      	ldr	r3, [r7, #8]
 800a114:	691b      	ldr	r3, [r3, #16]
 800a116:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800a118:	693b      	ldr	r3, [r7, #16]
 800a11a:	015a      	lsls	r2, r3, #5
 800a11c:	697b      	ldr	r3, [r7, #20]
 800a11e:	4413      	add	r3, r2
 800a120:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a124:	681b      	ldr	r3, [r3, #0]
 800a126:	693a      	ldr	r2, [r7, #16]
 800a128:	0151      	lsls	r1, r2, #5
 800a12a:	697a      	ldr	r2, [r7, #20]
 800a12c:	440a      	add	r2, r1
 800a12e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a132:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a136:	6013      	str	r3, [r2, #0]
 800a138:	e092      	b.n	800a260 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800a13a:	693b      	ldr	r3, [r7, #16]
 800a13c:	015a      	lsls	r2, r3, #5
 800a13e:	697b      	ldr	r3, [r7, #20]
 800a140:	4413      	add	r3, r2
 800a142:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a146:	681b      	ldr	r3, [r3, #0]
 800a148:	693a      	ldr	r2, [r7, #16]
 800a14a:	0151      	lsls	r1, r2, #5
 800a14c:	697a      	ldr	r2, [r7, #20]
 800a14e:	440a      	add	r2, r1
 800a150:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a154:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a158:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800a15a:	68bb      	ldr	r3, [r7, #8]
 800a15c:	695b      	ldr	r3, [r3, #20]
 800a15e:	2b00      	cmp	r3, #0
 800a160:	d07e      	beq.n	800a260 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800a162:	697b      	ldr	r3, [r7, #20]
 800a164:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a168:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a16a:	68bb      	ldr	r3, [r7, #8]
 800a16c:	781b      	ldrb	r3, [r3, #0]
 800a16e:	f003 030f 	and.w	r3, r3, #15
 800a172:	2101      	movs	r1, #1
 800a174:	fa01 f303 	lsl.w	r3, r1, r3
 800a178:	6979      	ldr	r1, [r7, #20]
 800a17a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a17e:	4313      	orrs	r3, r2
 800a180:	634b      	str	r3, [r1, #52]	; 0x34
 800a182:	e06d      	b.n	800a260 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800a184:	693b      	ldr	r3, [r7, #16]
 800a186:	015a      	lsls	r2, r3, #5
 800a188:	697b      	ldr	r3, [r7, #20]
 800a18a:	4413      	add	r3, r2
 800a18c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a190:	691b      	ldr	r3, [r3, #16]
 800a192:	693a      	ldr	r2, [r7, #16]
 800a194:	0151      	lsls	r1, r2, #5
 800a196:	697a      	ldr	r2, [r7, #20]
 800a198:	440a      	add	r2, r1
 800a19a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a19e:	0cdb      	lsrs	r3, r3, #19
 800a1a0:	04db      	lsls	r3, r3, #19
 800a1a2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800a1a4:	693b      	ldr	r3, [r7, #16]
 800a1a6:	015a      	lsls	r2, r3, #5
 800a1a8:	697b      	ldr	r3, [r7, #20]
 800a1aa:	4413      	add	r3, r2
 800a1ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a1b0:	691b      	ldr	r3, [r3, #16]
 800a1b2:	693a      	ldr	r2, [r7, #16]
 800a1b4:	0151      	lsls	r1, r2, #5
 800a1b6:	697a      	ldr	r2, [r7, #20]
 800a1b8:	440a      	add	r2, r1
 800a1ba:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a1be:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800a1c2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800a1c6:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800a1c8:	68bb      	ldr	r3, [r7, #8]
 800a1ca:	695b      	ldr	r3, [r3, #20]
 800a1cc:	2b00      	cmp	r3, #0
 800a1ce:	d003      	beq.n	800a1d8 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 800a1d0:	68bb      	ldr	r3, [r7, #8]
 800a1d2:	689a      	ldr	r2, [r3, #8]
 800a1d4:	68bb      	ldr	r3, [r7, #8]
 800a1d6:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a1d8:	693b      	ldr	r3, [r7, #16]
 800a1da:	015a      	lsls	r2, r3, #5
 800a1dc:	697b      	ldr	r3, [r7, #20]
 800a1de:	4413      	add	r3, r2
 800a1e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a1e4:	691b      	ldr	r3, [r3, #16]
 800a1e6:	693a      	ldr	r2, [r7, #16]
 800a1e8:	0151      	lsls	r1, r2, #5
 800a1ea:	697a      	ldr	r2, [r7, #20]
 800a1ec:	440a      	add	r2, r1
 800a1ee:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a1f2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a1f6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 800a1f8:	693b      	ldr	r3, [r7, #16]
 800a1fa:	015a      	lsls	r2, r3, #5
 800a1fc:	697b      	ldr	r3, [r7, #20]
 800a1fe:	4413      	add	r3, r2
 800a200:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a204:	691a      	ldr	r2, [r3, #16]
 800a206:	68bb      	ldr	r3, [r7, #8]
 800a208:	689b      	ldr	r3, [r3, #8]
 800a20a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a20e:	6939      	ldr	r1, [r7, #16]
 800a210:	0148      	lsls	r0, r1, #5
 800a212:	6979      	ldr	r1, [r7, #20]
 800a214:	4401      	add	r1, r0
 800a216:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800a21a:	4313      	orrs	r3, r2
 800a21c:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800a21e:	79fb      	ldrb	r3, [r7, #7]
 800a220:	2b01      	cmp	r3, #1
 800a222:	d10d      	bne.n	800a240 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800a224:	68bb      	ldr	r3, [r7, #8]
 800a226:	68db      	ldr	r3, [r3, #12]
 800a228:	2b00      	cmp	r3, #0
 800a22a:	d009      	beq.n	800a240 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800a22c:	68bb      	ldr	r3, [r7, #8]
 800a22e:	68d9      	ldr	r1, [r3, #12]
 800a230:	693b      	ldr	r3, [r7, #16]
 800a232:	015a      	lsls	r2, r3, #5
 800a234:	697b      	ldr	r3, [r7, #20]
 800a236:	4413      	add	r3, r2
 800a238:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a23c:	460a      	mov	r2, r1
 800a23e:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800a240:	693b      	ldr	r3, [r7, #16]
 800a242:	015a      	lsls	r2, r3, #5
 800a244:	697b      	ldr	r3, [r7, #20]
 800a246:	4413      	add	r3, r2
 800a248:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a24c:	681b      	ldr	r3, [r3, #0]
 800a24e:	693a      	ldr	r2, [r7, #16]
 800a250:	0151      	lsls	r1, r2, #5
 800a252:	697a      	ldr	r2, [r7, #20]
 800a254:	440a      	add	r2, r1
 800a256:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a25a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a25e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a260:	2300      	movs	r3, #0
}
 800a262:	4618      	mov	r0, r3
 800a264:	371c      	adds	r7, #28
 800a266:	46bd      	mov	sp, r7
 800a268:	bc80      	pop	{r7}
 800a26a:	4770      	bx	lr

0800a26c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800a26c:	b480      	push	{r7}
 800a26e:	b089      	sub	sp, #36	; 0x24
 800a270:	af00      	add	r7, sp, #0
 800a272:	60f8      	str	r0, [r7, #12]
 800a274:	60b9      	str	r1, [r7, #8]
 800a276:	4611      	mov	r1, r2
 800a278:	461a      	mov	r2, r3
 800a27a:	460b      	mov	r3, r1
 800a27c:	71fb      	strb	r3, [r7, #7]
 800a27e:	4613      	mov	r3, r2
 800a280:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a282:	68fb      	ldr	r3, [r7, #12]
 800a284:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800a286:	68bb      	ldr	r3, [r7, #8]
 800a288:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800a28a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800a28e:	2b00      	cmp	r3, #0
 800a290:	d123      	bne.n	800a2da <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800a292:	88bb      	ldrh	r3, [r7, #4]
 800a294:	3303      	adds	r3, #3
 800a296:	089b      	lsrs	r3, r3, #2
 800a298:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800a29a:	2300      	movs	r3, #0
 800a29c:	61bb      	str	r3, [r7, #24]
 800a29e:	e018      	b.n	800a2d2 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800a2a0:	79fb      	ldrb	r3, [r7, #7]
 800a2a2:	031a      	lsls	r2, r3, #12
 800a2a4:	697b      	ldr	r3, [r7, #20]
 800a2a6:	4413      	add	r3, r2
 800a2a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a2ac:	461a      	mov	r2, r3
 800a2ae:	69fb      	ldr	r3, [r7, #28]
 800a2b0:	681b      	ldr	r3, [r3, #0]
 800a2b2:	6013      	str	r3, [r2, #0]
      pSrc++;
 800a2b4:	69fb      	ldr	r3, [r7, #28]
 800a2b6:	3301      	adds	r3, #1
 800a2b8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a2ba:	69fb      	ldr	r3, [r7, #28]
 800a2bc:	3301      	adds	r3, #1
 800a2be:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a2c0:	69fb      	ldr	r3, [r7, #28]
 800a2c2:	3301      	adds	r3, #1
 800a2c4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a2c6:	69fb      	ldr	r3, [r7, #28]
 800a2c8:	3301      	adds	r3, #1
 800a2ca:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800a2cc:	69bb      	ldr	r3, [r7, #24]
 800a2ce:	3301      	adds	r3, #1
 800a2d0:	61bb      	str	r3, [r7, #24]
 800a2d2:	69ba      	ldr	r2, [r7, #24]
 800a2d4:	693b      	ldr	r3, [r7, #16]
 800a2d6:	429a      	cmp	r2, r3
 800a2d8:	d3e2      	bcc.n	800a2a0 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800a2da:	2300      	movs	r3, #0
}
 800a2dc:	4618      	mov	r0, r3
 800a2de:	3724      	adds	r7, #36	; 0x24
 800a2e0:	46bd      	mov	sp, r7
 800a2e2:	bc80      	pop	{r7}
 800a2e4:	4770      	bx	lr

0800a2e6 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800a2e6:	b480      	push	{r7}
 800a2e8:	b08b      	sub	sp, #44	; 0x2c
 800a2ea:	af00      	add	r7, sp, #0
 800a2ec:	60f8      	str	r0, [r7, #12]
 800a2ee:	60b9      	str	r1, [r7, #8]
 800a2f0:	4613      	mov	r3, r2
 800a2f2:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a2f4:	68fb      	ldr	r3, [r7, #12]
 800a2f6:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800a2f8:	68bb      	ldr	r3, [r7, #8]
 800a2fa:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800a2fc:	88fb      	ldrh	r3, [r7, #6]
 800a2fe:	089b      	lsrs	r3, r3, #2
 800a300:	b29b      	uxth	r3, r3
 800a302:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800a304:	88fb      	ldrh	r3, [r7, #6]
 800a306:	f003 0303 	and.w	r3, r3, #3
 800a30a:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800a30c:	2300      	movs	r3, #0
 800a30e:	623b      	str	r3, [r7, #32]
 800a310:	e014      	b.n	800a33c <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800a312:	69bb      	ldr	r3, [r7, #24]
 800a314:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a318:	681a      	ldr	r2, [r3, #0]
 800a31a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a31c:	601a      	str	r2, [r3, #0]
    pDest++;
 800a31e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a320:	3301      	adds	r3, #1
 800a322:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800a324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a326:	3301      	adds	r3, #1
 800a328:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800a32a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a32c:	3301      	adds	r3, #1
 800a32e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800a330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a332:	3301      	adds	r3, #1
 800a334:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800a336:	6a3b      	ldr	r3, [r7, #32]
 800a338:	3301      	adds	r3, #1
 800a33a:	623b      	str	r3, [r7, #32]
 800a33c:	6a3a      	ldr	r2, [r7, #32]
 800a33e:	697b      	ldr	r3, [r7, #20]
 800a340:	429a      	cmp	r2, r3
 800a342:	d3e6      	bcc.n	800a312 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800a344:	8bfb      	ldrh	r3, [r7, #30]
 800a346:	2b00      	cmp	r3, #0
 800a348:	d01e      	beq.n	800a388 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800a34a:	2300      	movs	r3, #0
 800a34c:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800a34e:	69bb      	ldr	r3, [r7, #24]
 800a350:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a354:	461a      	mov	r2, r3
 800a356:	f107 0310 	add.w	r3, r7, #16
 800a35a:	6812      	ldr	r2, [r2, #0]
 800a35c:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800a35e:	693a      	ldr	r2, [r7, #16]
 800a360:	6a3b      	ldr	r3, [r7, #32]
 800a362:	b2db      	uxtb	r3, r3
 800a364:	00db      	lsls	r3, r3, #3
 800a366:	fa22 f303 	lsr.w	r3, r2, r3
 800a36a:	b2da      	uxtb	r2, r3
 800a36c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a36e:	701a      	strb	r2, [r3, #0]
      i++;
 800a370:	6a3b      	ldr	r3, [r7, #32]
 800a372:	3301      	adds	r3, #1
 800a374:	623b      	str	r3, [r7, #32]
      pDest++;
 800a376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a378:	3301      	adds	r3, #1
 800a37a:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800a37c:	8bfb      	ldrh	r3, [r7, #30]
 800a37e:	3b01      	subs	r3, #1
 800a380:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800a382:	8bfb      	ldrh	r3, [r7, #30]
 800a384:	2b00      	cmp	r3, #0
 800a386:	d1ea      	bne.n	800a35e <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800a388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a38a:	4618      	mov	r0, r3
 800a38c:	372c      	adds	r7, #44	; 0x2c
 800a38e:	46bd      	mov	sp, r7
 800a390:	bc80      	pop	{r7}
 800a392:	4770      	bx	lr

0800a394 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a394:	b480      	push	{r7}
 800a396:	b085      	sub	sp, #20
 800a398:	af00      	add	r7, sp, #0
 800a39a:	6078      	str	r0, [r7, #4]
 800a39c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a3a2:	683b      	ldr	r3, [r7, #0]
 800a3a4:	781b      	ldrb	r3, [r3, #0]
 800a3a6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800a3a8:	683b      	ldr	r3, [r7, #0]
 800a3aa:	785b      	ldrb	r3, [r3, #1]
 800a3ac:	2b01      	cmp	r3, #1
 800a3ae:	d12c      	bne.n	800a40a <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800a3b0:	68bb      	ldr	r3, [r7, #8]
 800a3b2:	015a      	lsls	r2, r3, #5
 800a3b4:	68fb      	ldr	r3, [r7, #12]
 800a3b6:	4413      	add	r3, r2
 800a3b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a3bc:	681b      	ldr	r3, [r3, #0]
 800a3be:	2b00      	cmp	r3, #0
 800a3c0:	db12      	blt.n	800a3e8 <USB_EPSetStall+0x54>
 800a3c2:	68bb      	ldr	r3, [r7, #8]
 800a3c4:	2b00      	cmp	r3, #0
 800a3c6:	d00f      	beq.n	800a3e8 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800a3c8:	68bb      	ldr	r3, [r7, #8]
 800a3ca:	015a      	lsls	r2, r3, #5
 800a3cc:	68fb      	ldr	r3, [r7, #12]
 800a3ce:	4413      	add	r3, r2
 800a3d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a3d4:	681b      	ldr	r3, [r3, #0]
 800a3d6:	68ba      	ldr	r2, [r7, #8]
 800a3d8:	0151      	lsls	r1, r2, #5
 800a3da:	68fa      	ldr	r2, [r7, #12]
 800a3dc:	440a      	add	r2, r1
 800a3de:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a3e2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800a3e6:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800a3e8:	68bb      	ldr	r3, [r7, #8]
 800a3ea:	015a      	lsls	r2, r3, #5
 800a3ec:	68fb      	ldr	r3, [r7, #12]
 800a3ee:	4413      	add	r3, r2
 800a3f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a3f4:	681b      	ldr	r3, [r3, #0]
 800a3f6:	68ba      	ldr	r2, [r7, #8]
 800a3f8:	0151      	lsls	r1, r2, #5
 800a3fa:	68fa      	ldr	r2, [r7, #12]
 800a3fc:	440a      	add	r2, r1
 800a3fe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a402:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800a406:	6013      	str	r3, [r2, #0]
 800a408:	e02b      	b.n	800a462 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800a40a:	68bb      	ldr	r3, [r7, #8]
 800a40c:	015a      	lsls	r2, r3, #5
 800a40e:	68fb      	ldr	r3, [r7, #12]
 800a410:	4413      	add	r3, r2
 800a412:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a416:	681b      	ldr	r3, [r3, #0]
 800a418:	2b00      	cmp	r3, #0
 800a41a:	db12      	blt.n	800a442 <USB_EPSetStall+0xae>
 800a41c:	68bb      	ldr	r3, [r7, #8]
 800a41e:	2b00      	cmp	r3, #0
 800a420:	d00f      	beq.n	800a442 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800a422:	68bb      	ldr	r3, [r7, #8]
 800a424:	015a      	lsls	r2, r3, #5
 800a426:	68fb      	ldr	r3, [r7, #12]
 800a428:	4413      	add	r3, r2
 800a42a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a42e:	681b      	ldr	r3, [r3, #0]
 800a430:	68ba      	ldr	r2, [r7, #8]
 800a432:	0151      	lsls	r1, r2, #5
 800a434:	68fa      	ldr	r2, [r7, #12]
 800a436:	440a      	add	r2, r1
 800a438:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a43c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800a440:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800a442:	68bb      	ldr	r3, [r7, #8]
 800a444:	015a      	lsls	r2, r3, #5
 800a446:	68fb      	ldr	r3, [r7, #12]
 800a448:	4413      	add	r3, r2
 800a44a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a44e:	681b      	ldr	r3, [r3, #0]
 800a450:	68ba      	ldr	r2, [r7, #8]
 800a452:	0151      	lsls	r1, r2, #5
 800a454:	68fa      	ldr	r2, [r7, #12]
 800a456:	440a      	add	r2, r1
 800a458:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a45c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800a460:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a462:	2300      	movs	r3, #0
}
 800a464:	4618      	mov	r0, r3
 800a466:	3714      	adds	r7, #20
 800a468:	46bd      	mov	sp, r7
 800a46a:	bc80      	pop	{r7}
 800a46c:	4770      	bx	lr

0800a46e <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a46e:	b480      	push	{r7}
 800a470:	b085      	sub	sp, #20
 800a472:	af00      	add	r7, sp, #0
 800a474:	6078      	str	r0, [r7, #4]
 800a476:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a47c:	683b      	ldr	r3, [r7, #0]
 800a47e:	781b      	ldrb	r3, [r3, #0]
 800a480:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800a482:	683b      	ldr	r3, [r7, #0]
 800a484:	785b      	ldrb	r3, [r3, #1]
 800a486:	2b01      	cmp	r3, #1
 800a488:	d128      	bne.n	800a4dc <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800a48a:	68bb      	ldr	r3, [r7, #8]
 800a48c:	015a      	lsls	r2, r3, #5
 800a48e:	68fb      	ldr	r3, [r7, #12]
 800a490:	4413      	add	r3, r2
 800a492:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a496:	681b      	ldr	r3, [r3, #0]
 800a498:	68ba      	ldr	r2, [r7, #8]
 800a49a:	0151      	lsls	r1, r2, #5
 800a49c:	68fa      	ldr	r2, [r7, #12]
 800a49e:	440a      	add	r2, r1
 800a4a0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a4a4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800a4a8:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800a4aa:	683b      	ldr	r3, [r7, #0]
 800a4ac:	78db      	ldrb	r3, [r3, #3]
 800a4ae:	2b03      	cmp	r3, #3
 800a4b0:	d003      	beq.n	800a4ba <USB_EPClearStall+0x4c>
 800a4b2:	683b      	ldr	r3, [r7, #0]
 800a4b4:	78db      	ldrb	r3, [r3, #3]
 800a4b6:	2b02      	cmp	r3, #2
 800a4b8:	d138      	bne.n	800a52c <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800a4ba:	68bb      	ldr	r3, [r7, #8]
 800a4bc:	015a      	lsls	r2, r3, #5
 800a4be:	68fb      	ldr	r3, [r7, #12]
 800a4c0:	4413      	add	r3, r2
 800a4c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a4c6:	681b      	ldr	r3, [r3, #0]
 800a4c8:	68ba      	ldr	r2, [r7, #8]
 800a4ca:	0151      	lsls	r1, r2, #5
 800a4cc:	68fa      	ldr	r2, [r7, #12]
 800a4ce:	440a      	add	r2, r1
 800a4d0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a4d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a4d8:	6013      	str	r3, [r2, #0]
 800a4da:	e027      	b.n	800a52c <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800a4dc:	68bb      	ldr	r3, [r7, #8]
 800a4de:	015a      	lsls	r2, r3, #5
 800a4e0:	68fb      	ldr	r3, [r7, #12]
 800a4e2:	4413      	add	r3, r2
 800a4e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a4e8:	681b      	ldr	r3, [r3, #0]
 800a4ea:	68ba      	ldr	r2, [r7, #8]
 800a4ec:	0151      	lsls	r1, r2, #5
 800a4ee:	68fa      	ldr	r2, [r7, #12]
 800a4f0:	440a      	add	r2, r1
 800a4f2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a4f6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800a4fa:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800a4fc:	683b      	ldr	r3, [r7, #0]
 800a4fe:	78db      	ldrb	r3, [r3, #3]
 800a500:	2b03      	cmp	r3, #3
 800a502:	d003      	beq.n	800a50c <USB_EPClearStall+0x9e>
 800a504:	683b      	ldr	r3, [r7, #0]
 800a506:	78db      	ldrb	r3, [r3, #3]
 800a508:	2b02      	cmp	r3, #2
 800a50a:	d10f      	bne.n	800a52c <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800a50c:	68bb      	ldr	r3, [r7, #8]
 800a50e:	015a      	lsls	r2, r3, #5
 800a510:	68fb      	ldr	r3, [r7, #12]
 800a512:	4413      	add	r3, r2
 800a514:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a518:	681b      	ldr	r3, [r3, #0]
 800a51a:	68ba      	ldr	r2, [r7, #8]
 800a51c:	0151      	lsls	r1, r2, #5
 800a51e:	68fa      	ldr	r2, [r7, #12]
 800a520:	440a      	add	r2, r1
 800a522:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a526:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a52a:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800a52c:	2300      	movs	r3, #0
}
 800a52e:	4618      	mov	r0, r3
 800a530:	3714      	adds	r7, #20
 800a532:	46bd      	mov	sp, r7
 800a534:	bc80      	pop	{r7}
 800a536:	4770      	bx	lr

0800a538 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800a538:	b480      	push	{r7}
 800a53a:	b085      	sub	sp, #20
 800a53c:	af00      	add	r7, sp, #0
 800a53e:	6078      	str	r0, [r7, #4]
 800a540:	460b      	mov	r3, r1
 800a542:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800a548:	68fb      	ldr	r3, [r7, #12]
 800a54a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a54e:	681b      	ldr	r3, [r3, #0]
 800a550:	68fa      	ldr	r2, [r7, #12]
 800a552:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a556:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800a55a:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800a55c:	68fb      	ldr	r3, [r7, #12]
 800a55e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a562:	681a      	ldr	r2, [r3, #0]
 800a564:	78fb      	ldrb	r3, [r7, #3]
 800a566:	011b      	lsls	r3, r3, #4
 800a568:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800a56c:	68f9      	ldr	r1, [r7, #12]
 800a56e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a572:	4313      	orrs	r3, r2
 800a574:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800a576:	2300      	movs	r3, #0
}
 800a578:	4618      	mov	r0, r3
 800a57a:	3714      	adds	r7, #20
 800a57c:	46bd      	mov	sp, r7
 800a57e:	bc80      	pop	{r7}
 800a580:	4770      	bx	lr

0800a582 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800a582:	b480      	push	{r7}
 800a584:	b085      	sub	sp, #20
 800a586:	af00      	add	r7, sp, #0
 800a588:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800a58e:	68fb      	ldr	r3, [r7, #12]
 800a590:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a594:	681b      	ldr	r3, [r3, #0]
 800a596:	68fa      	ldr	r2, [r7, #12]
 800a598:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800a59c:	f023 0303 	bic.w	r3, r3, #3
 800a5a0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800a5a2:	68fb      	ldr	r3, [r7, #12]
 800a5a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a5a8:	685b      	ldr	r3, [r3, #4]
 800a5aa:	68fa      	ldr	r2, [r7, #12]
 800a5ac:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a5b0:	f023 0302 	bic.w	r3, r3, #2
 800a5b4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a5b6:	2300      	movs	r3, #0
}
 800a5b8:	4618      	mov	r0, r3
 800a5ba:	3714      	adds	r7, #20
 800a5bc:	46bd      	mov	sp, r7
 800a5be:	bc80      	pop	{r7}
 800a5c0:	4770      	bx	lr

0800a5c2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800a5c2:	b480      	push	{r7}
 800a5c4:	b085      	sub	sp, #20
 800a5c6:	af00      	add	r7, sp, #0
 800a5c8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800a5ce:	68fb      	ldr	r3, [r7, #12]
 800a5d0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a5d4:	681b      	ldr	r3, [r3, #0]
 800a5d6:	68fa      	ldr	r2, [r7, #12]
 800a5d8:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800a5dc:	f023 0303 	bic.w	r3, r3, #3
 800a5e0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800a5e2:	68fb      	ldr	r3, [r7, #12]
 800a5e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a5e8:	685b      	ldr	r3, [r3, #4]
 800a5ea:	68fa      	ldr	r2, [r7, #12]
 800a5ec:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a5f0:	f043 0302 	orr.w	r3, r3, #2
 800a5f4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a5f6:	2300      	movs	r3, #0
}
 800a5f8:	4618      	mov	r0, r3
 800a5fa:	3714      	adds	r7, #20
 800a5fc:	46bd      	mov	sp, r7
 800a5fe:	bc80      	pop	{r7}
 800a600:	4770      	bx	lr

0800a602 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800a602:	b480      	push	{r7}
 800a604:	b085      	sub	sp, #20
 800a606:	af00      	add	r7, sp, #0
 800a608:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	695b      	ldr	r3, [r3, #20]
 800a60e:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	699b      	ldr	r3, [r3, #24]
 800a614:	68fa      	ldr	r2, [r7, #12]
 800a616:	4013      	ands	r3, r2
 800a618:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800a61a:	68fb      	ldr	r3, [r7, #12]
}
 800a61c:	4618      	mov	r0, r3
 800a61e:	3714      	adds	r7, #20
 800a620:	46bd      	mov	sp, r7
 800a622:	bc80      	pop	{r7}
 800a624:	4770      	bx	lr

0800a626 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800a626:	b480      	push	{r7}
 800a628:	b085      	sub	sp, #20
 800a62a:	af00      	add	r7, sp, #0
 800a62c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800a632:	68fb      	ldr	r3, [r7, #12]
 800a634:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a638:	699b      	ldr	r3, [r3, #24]
 800a63a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800a63c:	68fb      	ldr	r3, [r7, #12]
 800a63e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a642:	69db      	ldr	r3, [r3, #28]
 800a644:	68ba      	ldr	r2, [r7, #8]
 800a646:	4013      	ands	r3, r2
 800a648:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800a64a:	68bb      	ldr	r3, [r7, #8]
 800a64c:	0c1b      	lsrs	r3, r3, #16
}
 800a64e:	4618      	mov	r0, r3
 800a650:	3714      	adds	r7, #20
 800a652:	46bd      	mov	sp, r7
 800a654:	bc80      	pop	{r7}
 800a656:	4770      	bx	lr

0800a658 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800a658:	b480      	push	{r7}
 800a65a:	b085      	sub	sp, #20
 800a65c:	af00      	add	r7, sp, #0
 800a65e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800a664:	68fb      	ldr	r3, [r7, #12]
 800a666:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a66a:	699b      	ldr	r3, [r3, #24]
 800a66c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800a66e:	68fb      	ldr	r3, [r7, #12]
 800a670:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a674:	69db      	ldr	r3, [r3, #28]
 800a676:	68ba      	ldr	r2, [r7, #8]
 800a678:	4013      	ands	r3, r2
 800a67a:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800a67c:	68bb      	ldr	r3, [r7, #8]
 800a67e:	b29b      	uxth	r3, r3
}
 800a680:	4618      	mov	r0, r3
 800a682:	3714      	adds	r7, #20
 800a684:	46bd      	mov	sp, r7
 800a686:	bc80      	pop	{r7}
 800a688:	4770      	bx	lr

0800a68a <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800a68a:	b480      	push	{r7}
 800a68c:	b085      	sub	sp, #20
 800a68e:	af00      	add	r7, sp, #0
 800a690:	6078      	str	r0, [r7, #4]
 800a692:	460b      	mov	r3, r1
 800a694:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800a69a:	78fb      	ldrb	r3, [r7, #3]
 800a69c:	015a      	lsls	r2, r3, #5
 800a69e:	68fb      	ldr	r3, [r7, #12]
 800a6a0:	4413      	add	r3, r2
 800a6a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a6a6:	689b      	ldr	r3, [r3, #8]
 800a6a8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800a6aa:	68fb      	ldr	r3, [r7, #12]
 800a6ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a6b0:	695b      	ldr	r3, [r3, #20]
 800a6b2:	68ba      	ldr	r2, [r7, #8]
 800a6b4:	4013      	ands	r3, r2
 800a6b6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800a6b8:	68bb      	ldr	r3, [r7, #8]
}
 800a6ba:	4618      	mov	r0, r3
 800a6bc:	3714      	adds	r7, #20
 800a6be:	46bd      	mov	sp, r7
 800a6c0:	bc80      	pop	{r7}
 800a6c2:	4770      	bx	lr

0800a6c4 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800a6c4:	b480      	push	{r7}
 800a6c6:	b087      	sub	sp, #28
 800a6c8:	af00      	add	r7, sp, #0
 800a6ca:	6078      	str	r0, [r7, #4]
 800a6cc:	460b      	mov	r3, r1
 800a6ce:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800a6d4:	697b      	ldr	r3, [r7, #20]
 800a6d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a6da:	691b      	ldr	r3, [r3, #16]
 800a6dc:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800a6de:	697b      	ldr	r3, [r7, #20]
 800a6e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a6e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a6e6:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800a6e8:	78fb      	ldrb	r3, [r7, #3]
 800a6ea:	f003 030f 	and.w	r3, r3, #15
 800a6ee:	68fa      	ldr	r2, [r7, #12]
 800a6f0:	fa22 f303 	lsr.w	r3, r2, r3
 800a6f4:	01db      	lsls	r3, r3, #7
 800a6f6:	b2db      	uxtb	r3, r3
 800a6f8:	693a      	ldr	r2, [r7, #16]
 800a6fa:	4313      	orrs	r3, r2
 800a6fc:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800a6fe:	78fb      	ldrb	r3, [r7, #3]
 800a700:	015a      	lsls	r2, r3, #5
 800a702:	697b      	ldr	r3, [r7, #20]
 800a704:	4413      	add	r3, r2
 800a706:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a70a:	689b      	ldr	r3, [r3, #8]
 800a70c:	693a      	ldr	r2, [r7, #16]
 800a70e:	4013      	ands	r3, r2
 800a710:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800a712:	68bb      	ldr	r3, [r7, #8]
}
 800a714:	4618      	mov	r0, r3
 800a716:	371c      	adds	r7, #28
 800a718:	46bd      	mov	sp, r7
 800a71a:	bc80      	pop	{r7}
 800a71c:	4770      	bx	lr

0800a71e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800a71e:	b480      	push	{r7}
 800a720:	b083      	sub	sp, #12
 800a722:	af00      	add	r7, sp, #0
 800a724:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	695b      	ldr	r3, [r3, #20]
 800a72a:	f003 0301 	and.w	r3, r3, #1
}
 800a72e:	4618      	mov	r0, r3
 800a730:	370c      	adds	r7, #12
 800a732:	46bd      	mov	sp, r7
 800a734:	bc80      	pop	{r7}
 800a736:	4770      	bx	lr

0800a738 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800a738:	b480      	push	{r7}
 800a73a:	b085      	sub	sp, #20
 800a73c:	af00      	add	r7, sp, #0
 800a73e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800a744:	68fb      	ldr	r3, [r7, #12]
 800a746:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a74a:	681b      	ldr	r3, [r3, #0]
 800a74c:	68fa      	ldr	r2, [r7, #12]
 800a74e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a752:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800a756:	f023 0307 	bic.w	r3, r3, #7
 800a75a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800a75c:	68fb      	ldr	r3, [r7, #12]
 800a75e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a762:	685b      	ldr	r3, [r3, #4]
 800a764:	68fa      	ldr	r2, [r7, #12]
 800a766:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a76a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a76e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a770:	2300      	movs	r3, #0
}
 800a772:	4618      	mov	r0, r3
 800a774:	3714      	adds	r7, #20
 800a776:	46bd      	mov	sp, r7
 800a778:	bc80      	pop	{r7}
 800a77a:	4770      	bx	lr

0800a77c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800a77c:	b480      	push	{r7}
 800a77e:	b087      	sub	sp, #28
 800a780:	af00      	add	r7, sp, #0
 800a782:	60f8      	str	r0, [r7, #12]
 800a784:	460b      	mov	r3, r1
 800a786:	607a      	str	r2, [r7, #4]
 800a788:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a78a:	68fb      	ldr	r3, [r7, #12]
 800a78c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800a78e:	68fb      	ldr	r3, [r7, #12]
 800a790:	333c      	adds	r3, #60	; 0x3c
 800a792:	3304      	adds	r3, #4
 800a794:	681b      	ldr	r3, [r3, #0]
 800a796:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800a798:	693b      	ldr	r3, [r7, #16]
 800a79a:	4a25      	ldr	r2, [pc, #148]	; (800a830 <USB_EP0_OutStart+0xb4>)
 800a79c:	4293      	cmp	r3, r2
 800a79e:	d90a      	bls.n	800a7b6 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a7a0:	697b      	ldr	r3, [r7, #20]
 800a7a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a7a6:	681b      	ldr	r3, [r3, #0]
 800a7a8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a7ac:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a7b0:	d101      	bne.n	800a7b6 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800a7b2:	2300      	movs	r3, #0
 800a7b4:	e037      	b.n	800a826 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800a7b6:	697b      	ldr	r3, [r7, #20]
 800a7b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a7bc:	461a      	mov	r2, r3
 800a7be:	2300      	movs	r3, #0
 800a7c0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a7c2:	697b      	ldr	r3, [r7, #20]
 800a7c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a7c8:	691b      	ldr	r3, [r3, #16]
 800a7ca:	697a      	ldr	r2, [r7, #20]
 800a7cc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a7d0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a7d4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800a7d6:	697b      	ldr	r3, [r7, #20]
 800a7d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a7dc:	691b      	ldr	r3, [r3, #16]
 800a7de:	697a      	ldr	r2, [r7, #20]
 800a7e0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a7e4:	f043 0318 	orr.w	r3, r3, #24
 800a7e8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800a7ea:	697b      	ldr	r3, [r7, #20]
 800a7ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a7f0:	691b      	ldr	r3, [r3, #16]
 800a7f2:	697a      	ldr	r2, [r7, #20]
 800a7f4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a7f8:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800a7fc:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800a7fe:	7afb      	ldrb	r3, [r7, #11]
 800a800:	2b01      	cmp	r3, #1
 800a802:	d10f      	bne.n	800a824 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800a804:	697b      	ldr	r3, [r7, #20]
 800a806:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a80a:	461a      	mov	r2, r3
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800a810:	697b      	ldr	r3, [r7, #20]
 800a812:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a816:	681b      	ldr	r3, [r3, #0]
 800a818:	697a      	ldr	r2, [r7, #20]
 800a81a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a81e:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800a822:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a824:	2300      	movs	r3, #0
}
 800a826:	4618      	mov	r0, r3
 800a828:	371c      	adds	r7, #28
 800a82a:	46bd      	mov	sp, r7
 800a82c:	bc80      	pop	{r7}
 800a82e:	4770      	bx	lr
 800a830:	4f54300a 	.word	0x4f54300a

0800a834 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800a834:	b480      	push	{r7}
 800a836:	b085      	sub	sp, #20
 800a838:	af00      	add	r7, sp, #0
 800a83a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800a83c:	2300      	movs	r3, #0
 800a83e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800a840:	68fb      	ldr	r3, [r7, #12]
 800a842:	3301      	adds	r3, #1
 800a844:	60fb      	str	r3, [r7, #12]
 800a846:	68fb      	ldr	r3, [r7, #12]
 800a848:	4a12      	ldr	r2, [pc, #72]	; (800a894 <USB_CoreReset+0x60>)
 800a84a:	4293      	cmp	r3, r2
 800a84c:	d901      	bls.n	800a852 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800a84e:	2303      	movs	r3, #3
 800a850:	e01b      	b.n	800a88a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	691b      	ldr	r3, [r3, #16]
 800a856:	2b00      	cmp	r3, #0
 800a858:	daf2      	bge.n	800a840 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800a85a:	2300      	movs	r3, #0
 800a85c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	691b      	ldr	r3, [r3, #16]
 800a862:	f043 0201 	orr.w	r2, r3, #1
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800a86a:	68fb      	ldr	r3, [r7, #12]
 800a86c:	3301      	adds	r3, #1
 800a86e:	60fb      	str	r3, [r7, #12]
 800a870:	68fb      	ldr	r3, [r7, #12]
 800a872:	4a08      	ldr	r2, [pc, #32]	; (800a894 <USB_CoreReset+0x60>)
 800a874:	4293      	cmp	r3, r2
 800a876:	d901      	bls.n	800a87c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800a878:	2303      	movs	r3, #3
 800a87a:	e006      	b.n	800a88a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	691b      	ldr	r3, [r3, #16]
 800a880:	f003 0301 	and.w	r3, r3, #1
 800a884:	2b01      	cmp	r3, #1
 800a886:	d0f0      	beq.n	800a86a <USB_CoreReset+0x36>

  return HAL_OK;
 800a888:	2300      	movs	r3, #0
}
 800a88a:	4618      	mov	r0, r3
 800a88c:	3714      	adds	r7, #20
 800a88e:	46bd      	mov	sp, r7
 800a890:	bc80      	pop	{r7}
 800a892:	4770      	bx	lr
 800a894:	00030d40 	.word	0x00030d40

0800a898 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a898:	b580      	push	{r7, lr}
 800a89a:	b084      	sub	sp, #16
 800a89c:	af00      	add	r7, sp, #0
 800a89e:	6078      	str	r0, [r7, #4]
 800a8a0:	460b      	mov	r3, r1
 800a8a2:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800a8a4:	2300      	movs	r3, #0
 800a8a6:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	7c1b      	ldrb	r3, [r3, #16]
 800a8ac:	2b00      	cmp	r3, #0
 800a8ae:	d115      	bne.n	800a8dc <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800a8b0:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a8b4:	2202      	movs	r2, #2
 800a8b6:	2181      	movs	r1, #129	; 0x81
 800a8b8:	6878      	ldr	r0, [r7, #4]
 800a8ba:	f001 ff48 	bl	800c74e <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	2201      	movs	r2, #1
 800a8c2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800a8c4:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a8c8:	2202      	movs	r2, #2
 800a8ca:	2101      	movs	r1, #1
 800a8cc:	6878      	ldr	r0, [r7, #4]
 800a8ce:	f001 ff3e 	bl	800c74e <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	2201      	movs	r2, #1
 800a8d6:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 800a8da:	e012      	b.n	800a902 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800a8dc:	2340      	movs	r3, #64	; 0x40
 800a8de:	2202      	movs	r2, #2
 800a8e0:	2181      	movs	r1, #129	; 0x81
 800a8e2:	6878      	ldr	r0, [r7, #4]
 800a8e4:	f001 ff33 	bl	800c74e <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	2201      	movs	r2, #1
 800a8ec:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800a8ee:	2340      	movs	r3, #64	; 0x40
 800a8f0:	2202      	movs	r2, #2
 800a8f2:	2101      	movs	r1, #1
 800a8f4:	6878      	ldr	r0, [r7, #4]
 800a8f6:	f001 ff2a 	bl	800c74e <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	2201      	movs	r2, #1
 800a8fe:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800a902:	2308      	movs	r3, #8
 800a904:	2203      	movs	r2, #3
 800a906:	2182      	movs	r1, #130	; 0x82
 800a908:	6878      	ldr	r0, [r7, #4]
 800a90a:	f001 ff20 	bl	800c74e <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	2201      	movs	r2, #1
 800a912:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800a914:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800a918:	f003 fbea 	bl	800e0f0 <malloc>
 800a91c:	4603      	mov	r3, r0
 800a91e:	461a      	mov	r2, r3
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a92c:	2b00      	cmp	r3, #0
 800a92e:	d102      	bne.n	800a936 <USBD_CDC_Init+0x9e>
  {
    ret = 1U;
 800a930:	2301      	movs	r3, #1
 800a932:	73fb      	strb	r3, [r7, #15]
 800a934:	e026      	b.n	800a984 <USBD_CDC_Init+0xec>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a93c:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a944:	681b      	ldr	r3, [r3, #0]
 800a946:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 800a948:	68bb      	ldr	r3, [r7, #8]
 800a94a:	2200      	movs	r2, #0
 800a94c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 800a950:	68bb      	ldr	r3, [r7, #8]
 800a952:	2200      	movs	r2, #0
 800a954:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	7c1b      	ldrb	r3, [r3, #16]
 800a95c:	2b00      	cmp	r3, #0
 800a95e:	d109      	bne.n	800a974 <USBD_CDC_Init+0xdc>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800a960:	68bb      	ldr	r3, [r7, #8]
 800a962:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a966:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a96a:	2101      	movs	r1, #1
 800a96c:	6878      	ldr	r0, [r7, #4]
 800a96e:	f001 ffde 	bl	800c92e <USBD_LL_PrepareReceive>
 800a972:	e007      	b.n	800a984 <USBD_CDC_Init+0xec>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800a974:	68bb      	ldr	r3, [r7, #8]
 800a976:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a97a:	2340      	movs	r3, #64	; 0x40
 800a97c:	2101      	movs	r1, #1
 800a97e:	6878      	ldr	r0, [r7, #4]
 800a980:	f001 ffd5 	bl	800c92e <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 800a984:	7bfb      	ldrb	r3, [r7, #15]
}
 800a986:	4618      	mov	r0, r3
 800a988:	3710      	adds	r7, #16
 800a98a:	46bd      	mov	sp, r7
 800a98c:	bd80      	pop	{r7, pc}

0800a98e <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a98e:	b580      	push	{r7, lr}
 800a990:	b084      	sub	sp, #16
 800a992:	af00      	add	r7, sp, #0
 800a994:	6078      	str	r0, [r7, #4]
 800a996:	460b      	mov	r3, r1
 800a998:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800a99a:	2300      	movs	r3, #0
 800a99c:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800a99e:	2181      	movs	r1, #129	; 0x81
 800a9a0:	6878      	ldr	r0, [r7, #4]
 800a9a2:	f001 fefa 	bl	800c79a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	2200      	movs	r2, #0
 800a9aa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800a9ac:	2101      	movs	r1, #1
 800a9ae:	6878      	ldr	r0, [r7, #4]
 800a9b0:	f001 fef3 	bl	800c79a <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	2200      	movs	r2, #0
 800a9b8:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800a9bc:	2182      	movs	r1, #130	; 0x82
 800a9be:	6878      	ldr	r0, [r7, #4]
 800a9c0:	f001 feeb 	bl	800c79a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	2200      	movs	r2, #0
 800a9c8:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a9d0:	2b00      	cmp	r3, #0
 800a9d2:	d00e      	beq.n	800a9f2 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a9da:	685b      	ldr	r3, [r3, #4]
 800a9dc:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a9e4:	4618      	mov	r0, r3
 800a9e6:	f003 fb8b 	bl	800e100 <free>
    pdev->pClassData = NULL;
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	2200      	movs	r2, #0
 800a9ee:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 800a9f2:	7bfb      	ldrb	r3, [r7, #15]
}
 800a9f4:	4618      	mov	r0, r3
 800a9f6:	3710      	adds	r7, #16
 800a9f8:	46bd      	mov	sp, r7
 800a9fa:	bd80      	pop	{r7, pc}

0800a9fc <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800a9fc:	b580      	push	{r7, lr}
 800a9fe:	b086      	sub	sp, #24
 800aa00:	af00      	add	r7, sp, #0
 800aa02:	6078      	str	r0, [r7, #4]
 800aa04:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aa0c:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800aa0e:	2300      	movs	r3, #0
 800aa10:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 800aa12:	2300      	movs	r3, #0
 800aa14:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 800aa16:	2300      	movs	r3, #0
 800aa18:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800aa1a:	683b      	ldr	r3, [r7, #0]
 800aa1c:	781b      	ldrb	r3, [r3, #0]
 800aa1e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800aa22:	2b00      	cmp	r3, #0
 800aa24:	d039      	beq.n	800aa9a <USBD_CDC_Setup+0x9e>
 800aa26:	2b20      	cmp	r3, #32
 800aa28:	d17f      	bne.n	800ab2a <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 800aa2a:	683b      	ldr	r3, [r7, #0]
 800aa2c:	88db      	ldrh	r3, [r3, #6]
 800aa2e:	2b00      	cmp	r3, #0
 800aa30:	d029      	beq.n	800aa86 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 800aa32:	683b      	ldr	r3, [r7, #0]
 800aa34:	781b      	ldrb	r3, [r3, #0]
 800aa36:	b25b      	sxtb	r3, r3
 800aa38:	2b00      	cmp	r3, #0
 800aa3a:	da11      	bge.n	800aa60 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800aa42:	689b      	ldr	r3, [r3, #8]
 800aa44:	683a      	ldr	r2, [r7, #0]
 800aa46:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 800aa48:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800aa4a:	683a      	ldr	r2, [r7, #0]
 800aa4c:	88d2      	ldrh	r2, [r2, #6]
 800aa4e:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800aa50:	6939      	ldr	r1, [r7, #16]
 800aa52:	683b      	ldr	r3, [r7, #0]
 800aa54:	88db      	ldrh	r3, [r3, #6]
 800aa56:	461a      	mov	r2, r3
 800aa58:	6878      	ldr	r0, [r7, #4]
 800aa5a:	f001 fa42 	bl	800bee2 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 800aa5e:	e06b      	b.n	800ab38 <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 800aa60:	683b      	ldr	r3, [r7, #0]
 800aa62:	785a      	ldrb	r2, [r3, #1]
 800aa64:	693b      	ldr	r3, [r7, #16]
 800aa66:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800aa6a:	683b      	ldr	r3, [r7, #0]
 800aa6c:	88db      	ldrh	r3, [r3, #6]
 800aa6e:	b2da      	uxtb	r2, r3
 800aa70:	693b      	ldr	r3, [r7, #16]
 800aa72:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800aa76:	6939      	ldr	r1, [r7, #16]
 800aa78:	683b      	ldr	r3, [r7, #0]
 800aa7a:	88db      	ldrh	r3, [r3, #6]
 800aa7c:	461a      	mov	r2, r3
 800aa7e:	6878      	ldr	r0, [r7, #4]
 800aa80:	f001 fa5d 	bl	800bf3e <USBD_CtlPrepareRx>
      break;
 800aa84:	e058      	b.n	800ab38 <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800aa8c:	689b      	ldr	r3, [r3, #8]
 800aa8e:	683a      	ldr	r2, [r7, #0]
 800aa90:	7850      	ldrb	r0, [r2, #1]
 800aa92:	2200      	movs	r2, #0
 800aa94:	6839      	ldr	r1, [r7, #0]
 800aa96:	4798      	blx	r3
      break;
 800aa98:	e04e      	b.n	800ab38 <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800aa9a:	683b      	ldr	r3, [r7, #0]
 800aa9c:	785b      	ldrb	r3, [r3, #1]
 800aa9e:	2b0b      	cmp	r3, #11
 800aaa0:	d02e      	beq.n	800ab00 <USBD_CDC_Setup+0x104>
 800aaa2:	2b0b      	cmp	r3, #11
 800aaa4:	dc38      	bgt.n	800ab18 <USBD_CDC_Setup+0x11c>
 800aaa6:	2b00      	cmp	r3, #0
 800aaa8:	d002      	beq.n	800aab0 <USBD_CDC_Setup+0xb4>
 800aaaa:	2b0a      	cmp	r3, #10
 800aaac:	d014      	beq.n	800aad8 <USBD_CDC_Setup+0xdc>
 800aaae:	e033      	b.n	800ab18 <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aab6:	2b03      	cmp	r3, #3
 800aab8:	d107      	bne.n	800aaca <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 800aaba:	f107 030c 	add.w	r3, r7, #12
 800aabe:	2202      	movs	r2, #2
 800aac0:	4619      	mov	r1, r3
 800aac2:	6878      	ldr	r0, [r7, #4]
 800aac4:	f001 fa0d 	bl	800bee2 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800aac8:	e02e      	b.n	800ab28 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 800aaca:	6839      	ldr	r1, [r7, #0]
 800aacc:	6878      	ldr	r0, [r7, #4]
 800aace:	f001 f99e 	bl	800be0e <USBD_CtlError>
            ret = USBD_FAIL;
 800aad2:	2302      	movs	r3, #2
 800aad4:	75fb      	strb	r3, [r7, #23]
          break;
 800aad6:	e027      	b.n	800ab28 <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aade:	2b03      	cmp	r3, #3
 800aae0:	d107      	bne.n	800aaf2 <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 800aae2:	f107 030f 	add.w	r3, r7, #15
 800aae6:	2201      	movs	r2, #1
 800aae8:	4619      	mov	r1, r3
 800aaea:	6878      	ldr	r0, [r7, #4]
 800aaec:	f001 f9f9 	bl	800bee2 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800aaf0:	e01a      	b.n	800ab28 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 800aaf2:	6839      	ldr	r1, [r7, #0]
 800aaf4:	6878      	ldr	r0, [r7, #4]
 800aaf6:	f001 f98a 	bl	800be0e <USBD_CtlError>
            ret = USBD_FAIL;
 800aafa:	2302      	movs	r3, #2
 800aafc:	75fb      	strb	r3, [r7, #23]
          break;
 800aafe:	e013      	b.n	800ab28 <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ab06:	2b03      	cmp	r3, #3
 800ab08:	d00d      	beq.n	800ab26 <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 800ab0a:	6839      	ldr	r1, [r7, #0]
 800ab0c:	6878      	ldr	r0, [r7, #4]
 800ab0e:	f001 f97e 	bl	800be0e <USBD_CtlError>
            ret = USBD_FAIL;
 800ab12:	2302      	movs	r3, #2
 800ab14:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800ab16:	e006      	b.n	800ab26 <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 800ab18:	6839      	ldr	r1, [r7, #0]
 800ab1a:	6878      	ldr	r0, [r7, #4]
 800ab1c:	f001 f977 	bl	800be0e <USBD_CtlError>
          ret = USBD_FAIL;
 800ab20:	2302      	movs	r3, #2
 800ab22:	75fb      	strb	r3, [r7, #23]
          break;
 800ab24:	e000      	b.n	800ab28 <USBD_CDC_Setup+0x12c>
          break;
 800ab26:	bf00      	nop
      }
      break;
 800ab28:	e006      	b.n	800ab38 <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800ab2a:	6839      	ldr	r1, [r7, #0]
 800ab2c:	6878      	ldr	r0, [r7, #4]
 800ab2e:	f001 f96e 	bl	800be0e <USBD_CtlError>
      ret = USBD_FAIL;
 800ab32:	2302      	movs	r3, #2
 800ab34:	75fb      	strb	r3, [r7, #23]
      break;
 800ab36:	bf00      	nop
  }

  return ret;
 800ab38:	7dfb      	ldrb	r3, [r7, #23]
}
 800ab3a:	4618      	mov	r0, r3
 800ab3c:	3718      	adds	r7, #24
 800ab3e:	46bd      	mov	sp, r7
 800ab40:	bd80      	pop	{r7, pc}

0800ab42 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800ab42:	b580      	push	{r7, lr}
 800ab44:	b084      	sub	sp, #16
 800ab46:	af00      	add	r7, sp, #0
 800ab48:	6078      	str	r0, [r7, #4]
 800ab4a:	460b      	mov	r3, r1
 800ab4c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ab54:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ab5c:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ab64:	2b00      	cmp	r3, #0
 800ab66:	d03a      	beq.n	800abde <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800ab68:	78fa      	ldrb	r2, [r7, #3]
 800ab6a:	6879      	ldr	r1, [r7, #4]
 800ab6c:	4613      	mov	r3, r2
 800ab6e:	009b      	lsls	r3, r3, #2
 800ab70:	4413      	add	r3, r2
 800ab72:	009b      	lsls	r3, r3, #2
 800ab74:	440b      	add	r3, r1
 800ab76:	331c      	adds	r3, #28
 800ab78:	681b      	ldr	r3, [r3, #0]
 800ab7a:	2b00      	cmp	r3, #0
 800ab7c:	d029      	beq.n	800abd2 <USBD_CDC_DataIn+0x90>
 800ab7e:	78fa      	ldrb	r2, [r7, #3]
 800ab80:	6879      	ldr	r1, [r7, #4]
 800ab82:	4613      	mov	r3, r2
 800ab84:	009b      	lsls	r3, r3, #2
 800ab86:	4413      	add	r3, r2
 800ab88:	009b      	lsls	r3, r3, #2
 800ab8a:	440b      	add	r3, r1
 800ab8c:	331c      	adds	r3, #28
 800ab8e:	681a      	ldr	r2, [r3, #0]
 800ab90:	78f9      	ldrb	r1, [r7, #3]
 800ab92:	68b8      	ldr	r0, [r7, #8]
 800ab94:	460b      	mov	r3, r1
 800ab96:	00db      	lsls	r3, r3, #3
 800ab98:	1a5b      	subs	r3, r3, r1
 800ab9a:	009b      	lsls	r3, r3, #2
 800ab9c:	4403      	add	r3, r0
 800ab9e:	3344      	adds	r3, #68	; 0x44
 800aba0:	681b      	ldr	r3, [r3, #0]
 800aba2:	fbb2 f1f3 	udiv	r1, r2, r3
 800aba6:	fb03 f301 	mul.w	r3, r3, r1
 800abaa:	1ad3      	subs	r3, r2, r3
 800abac:	2b00      	cmp	r3, #0
 800abae:	d110      	bne.n	800abd2 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 800abb0:	78fa      	ldrb	r2, [r7, #3]
 800abb2:	6879      	ldr	r1, [r7, #4]
 800abb4:	4613      	mov	r3, r2
 800abb6:	009b      	lsls	r3, r3, #2
 800abb8:	4413      	add	r3, r2
 800abba:	009b      	lsls	r3, r3, #2
 800abbc:	440b      	add	r3, r1
 800abbe:	331c      	adds	r3, #28
 800abc0:	2200      	movs	r2, #0
 800abc2:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800abc4:	78f9      	ldrb	r1, [r7, #3]
 800abc6:	2300      	movs	r3, #0
 800abc8:	2200      	movs	r2, #0
 800abca:	6878      	ldr	r0, [r7, #4]
 800abcc:	f001 fe8c 	bl	800c8e8 <USBD_LL_Transmit>
 800abd0:	e003      	b.n	800abda <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 800abd2:	68fb      	ldr	r3, [r7, #12]
 800abd4:	2200      	movs	r2, #0
 800abd6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 800abda:	2300      	movs	r3, #0
 800abdc:	e000      	b.n	800abe0 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 800abde:	2302      	movs	r3, #2
  }
}
 800abe0:	4618      	mov	r0, r3
 800abe2:	3710      	adds	r7, #16
 800abe4:	46bd      	mov	sp, r7
 800abe6:	bd80      	pop	{r7, pc}

0800abe8 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800abe8:	b580      	push	{r7, lr}
 800abea:	b084      	sub	sp, #16
 800abec:	af00      	add	r7, sp, #0
 800abee:	6078      	str	r0, [r7, #4]
 800abf0:	460b      	mov	r3, r1
 800abf2:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800abfa:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800abfc:	78fb      	ldrb	r3, [r7, #3]
 800abfe:	4619      	mov	r1, r3
 800ac00:	6878      	ldr	r0, [r7, #4]
 800ac02:	f001 feb7 	bl	800c974 <USBD_LL_GetRxDataSize>
 800ac06:	4602      	mov	r2, r0
 800ac08:	68fb      	ldr	r3, [r7, #12]
 800ac0a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ac14:	2b00      	cmp	r3, #0
 800ac16:	d00d      	beq.n	800ac34 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ac1e:	68db      	ldr	r3, [r3, #12]
 800ac20:	68fa      	ldr	r2, [r7, #12]
 800ac22:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800ac26:	68fa      	ldr	r2, [r7, #12]
 800ac28:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800ac2c:	4611      	mov	r1, r2
 800ac2e:	4798      	blx	r3

    return USBD_OK;
 800ac30:	2300      	movs	r3, #0
 800ac32:	e000      	b.n	800ac36 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 800ac34:	2302      	movs	r3, #2
  }
}
 800ac36:	4618      	mov	r0, r3
 800ac38:	3710      	adds	r7, #16
 800ac3a:	46bd      	mov	sp, r7
 800ac3c:	bd80      	pop	{r7, pc}

0800ac3e <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800ac3e:	b580      	push	{r7, lr}
 800ac40:	b084      	sub	sp, #16
 800ac42:	af00      	add	r7, sp, #0
 800ac44:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ac4c:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ac54:	2b00      	cmp	r3, #0
 800ac56:	d015      	beq.n	800ac84 <USBD_CDC_EP0_RxReady+0x46>
 800ac58:	68fb      	ldr	r3, [r7, #12]
 800ac5a:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800ac5e:	2bff      	cmp	r3, #255	; 0xff
 800ac60:	d010      	beq.n	800ac84 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ac68:	689b      	ldr	r3, [r3, #8]
 800ac6a:	68fa      	ldr	r2, [r7, #12]
 800ac6c:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 800ac70:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800ac72:	68fa      	ldr	r2, [r7, #12]
 800ac74:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800ac78:	b292      	uxth	r2, r2
 800ac7a:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800ac7c:	68fb      	ldr	r3, [r7, #12]
 800ac7e:	22ff      	movs	r2, #255	; 0xff
 800ac80:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 800ac84:	2300      	movs	r3, #0
}
 800ac86:	4618      	mov	r0, r3
 800ac88:	3710      	adds	r7, #16
 800ac8a:	46bd      	mov	sp, r7
 800ac8c:	bd80      	pop	{r7, pc}
	...

0800ac90 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800ac90:	b480      	push	{r7}
 800ac92:	b083      	sub	sp, #12
 800ac94:	af00      	add	r7, sp, #0
 800ac96:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	2243      	movs	r2, #67	; 0x43
 800ac9c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 800ac9e:	4b03      	ldr	r3, [pc, #12]	; (800acac <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800aca0:	4618      	mov	r0, r3
 800aca2:	370c      	adds	r7, #12
 800aca4:	46bd      	mov	sp, r7
 800aca6:	bc80      	pop	{r7}
 800aca8:	4770      	bx	lr
 800acaa:	bf00      	nop
 800acac:	20000098 	.word	0x20000098

0800acb0 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800acb0:	b480      	push	{r7}
 800acb2:	b083      	sub	sp, #12
 800acb4:	af00      	add	r7, sp, #0
 800acb6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	2243      	movs	r2, #67	; 0x43
 800acbc:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 800acbe:	4b03      	ldr	r3, [pc, #12]	; (800accc <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800acc0:	4618      	mov	r0, r3
 800acc2:	370c      	adds	r7, #12
 800acc4:	46bd      	mov	sp, r7
 800acc6:	bc80      	pop	{r7}
 800acc8:	4770      	bx	lr
 800acca:	bf00      	nop
 800accc:	20000054 	.word	0x20000054

0800acd0 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800acd0:	b480      	push	{r7}
 800acd2:	b083      	sub	sp, #12
 800acd4:	af00      	add	r7, sp, #0
 800acd6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	2243      	movs	r2, #67	; 0x43
 800acdc:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 800acde:	4b03      	ldr	r3, [pc, #12]	; (800acec <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800ace0:	4618      	mov	r0, r3
 800ace2:	370c      	adds	r7, #12
 800ace4:	46bd      	mov	sp, r7
 800ace6:	bc80      	pop	{r7}
 800ace8:	4770      	bx	lr
 800acea:	bf00      	nop
 800acec:	200000dc 	.word	0x200000dc

0800acf0 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800acf0:	b480      	push	{r7}
 800acf2:	b083      	sub	sp, #12
 800acf4:	af00      	add	r7, sp, #0
 800acf6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	220a      	movs	r2, #10
 800acfc:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800acfe:	4b03      	ldr	r3, [pc, #12]	; (800ad0c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800ad00:	4618      	mov	r0, r3
 800ad02:	370c      	adds	r7, #12
 800ad04:	46bd      	mov	sp, r7
 800ad06:	bc80      	pop	{r7}
 800ad08:	4770      	bx	lr
 800ad0a:	bf00      	nop
 800ad0c:	20000010 	.word	0x20000010

0800ad10 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 800ad10:	b480      	push	{r7}
 800ad12:	b085      	sub	sp, #20
 800ad14:	af00      	add	r7, sp, #0
 800ad16:	6078      	str	r0, [r7, #4]
 800ad18:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800ad1a:	2302      	movs	r3, #2
 800ad1c:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 800ad1e:	683b      	ldr	r3, [r7, #0]
 800ad20:	2b00      	cmp	r3, #0
 800ad22:	d005      	beq.n	800ad30 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	683a      	ldr	r2, [r7, #0]
 800ad28:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 800ad2c:	2300      	movs	r3, #0
 800ad2e:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800ad30:	7bfb      	ldrb	r3, [r7, #15]
}
 800ad32:	4618      	mov	r0, r3
 800ad34:	3714      	adds	r7, #20
 800ad36:	46bd      	mov	sp, r7
 800ad38:	bc80      	pop	{r7}
 800ad3a:	4770      	bx	lr

0800ad3c <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 800ad3c:	b480      	push	{r7}
 800ad3e:	b087      	sub	sp, #28
 800ad40:	af00      	add	r7, sp, #0
 800ad42:	60f8      	str	r0, [r7, #12]
 800ad44:	60b9      	str	r1, [r7, #8]
 800ad46:	4613      	mov	r3, r2
 800ad48:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800ad4a:	68fb      	ldr	r3, [r7, #12]
 800ad4c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ad50:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800ad52:	697b      	ldr	r3, [r7, #20]
 800ad54:	68ba      	ldr	r2, [r7, #8]
 800ad56:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800ad5a:	88fa      	ldrh	r2, [r7, #6]
 800ad5c:	697b      	ldr	r3, [r7, #20]
 800ad5e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 800ad62:	2300      	movs	r3, #0
}
 800ad64:	4618      	mov	r0, r3
 800ad66:	371c      	adds	r7, #28
 800ad68:	46bd      	mov	sp, r7
 800ad6a:	bc80      	pop	{r7}
 800ad6c:	4770      	bx	lr

0800ad6e <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 800ad6e:	b480      	push	{r7}
 800ad70:	b085      	sub	sp, #20
 800ad72:	af00      	add	r7, sp, #0
 800ad74:	6078      	str	r0, [r7, #4]
 800ad76:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ad7e:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800ad80:	68fb      	ldr	r3, [r7, #12]
 800ad82:	683a      	ldr	r2, [r7, #0]
 800ad84:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 800ad88:	2300      	movs	r3, #0
}
 800ad8a:	4618      	mov	r0, r3
 800ad8c:	3714      	adds	r7, #20
 800ad8e:	46bd      	mov	sp, r7
 800ad90:	bc80      	pop	{r7}
 800ad92:	4770      	bx	lr

0800ad94 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800ad94:	b580      	push	{r7, lr}
 800ad96:	b084      	sub	sp, #16
 800ad98:	af00      	add	r7, sp, #0
 800ad9a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ada2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800adaa:	2b00      	cmp	r3, #0
 800adac:	d01c      	beq.n	800ade8 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 800adae:	68fb      	ldr	r3, [r7, #12]
 800adb0:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800adb4:	2b00      	cmp	r3, #0
 800adb6:	d115      	bne.n	800ade4 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 800adb8:	68fb      	ldr	r3, [r7, #12]
 800adba:	2201      	movs	r2, #1
 800adbc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800adc0:	68fb      	ldr	r3, [r7, #12]
 800adc2:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800adca:	68fb      	ldr	r3, [r7, #12]
 800adcc:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 800add0:	68fb      	ldr	r3, [r7, #12]
 800add2:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800add6:	b29b      	uxth	r3, r3
 800add8:	2181      	movs	r1, #129	; 0x81
 800adda:	6878      	ldr	r0, [r7, #4]
 800addc:	f001 fd84 	bl	800c8e8 <USBD_LL_Transmit>

      return USBD_OK;
 800ade0:	2300      	movs	r3, #0
 800ade2:	e002      	b.n	800adea <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 800ade4:	2301      	movs	r3, #1
 800ade6:	e000      	b.n	800adea <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 800ade8:	2302      	movs	r3, #2
  }
}
 800adea:	4618      	mov	r0, r3
 800adec:	3710      	adds	r7, #16
 800adee:	46bd      	mov	sp, r7
 800adf0:	bd80      	pop	{r7, pc}

0800adf2 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800adf2:	b580      	push	{r7, lr}
 800adf4:	b084      	sub	sp, #16
 800adf6:	af00      	add	r7, sp, #0
 800adf8:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ae00:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ae08:	2b00      	cmp	r3, #0
 800ae0a:	d017      	beq.n	800ae3c <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	7c1b      	ldrb	r3, [r3, #16]
 800ae10:	2b00      	cmp	r3, #0
 800ae12:	d109      	bne.n	800ae28 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800ae14:	68fb      	ldr	r3, [r7, #12]
 800ae16:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800ae1a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ae1e:	2101      	movs	r1, #1
 800ae20:	6878      	ldr	r0, [r7, #4]
 800ae22:	f001 fd84 	bl	800c92e <USBD_LL_PrepareReceive>
 800ae26:	e007      	b.n	800ae38 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800ae28:	68fb      	ldr	r3, [r7, #12]
 800ae2a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800ae2e:	2340      	movs	r3, #64	; 0x40
 800ae30:	2101      	movs	r1, #1
 800ae32:	6878      	ldr	r0, [r7, #4]
 800ae34:	f001 fd7b 	bl	800c92e <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 800ae38:	2300      	movs	r3, #0
 800ae3a:	e000      	b.n	800ae3e <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 800ae3c:	2302      	movs	r3, #2
  }
}
 800ae3e:	4618      	mov	r0, r3
 800ae40:	3710      	adds	r7, #16
 800ae42:	46bd      	mov	sp, r7
 800ae44:	bd80      	pop	{r7, pc}

0800ae46 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800ae46:	b580      	push	{r7, lr}
 800ae48:	b084      	sub	sp, #16
 800ae4a:	af00      	add	r7, sp, #0
 800ae4c:	60f8      	str	r0, [r7, #12]
 800ae4e:	60b9      	str	r1, [r7, #8]
 800ae50:	4613      	mov	r3, r2
 800ae52:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800ae54:	68fb      	ldr	r3, [r7, #12]
 800ae56:	2b00      	cmp	r3, #0
 800ae58:	d101      	bne.n	800ae5e <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800ae5a:	2302      	movs	r3, #2
 800ae5c:	e01a      	b.n	800ae94 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 800ae5e:	68fb      	ldr	r3, [r7, #12]
 800ae60:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ae64:	2b00      	cmp	r3, #0
 800ae66:	d003      	beq.n	800ae70 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800ae68:	68fb      	ldr	r3, [r7, #12]
 800ae6a:	2200      	movs	r2, #0
 800ae6c:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800ae70:	68bb      	ldr	r3, [r7, #8]
 800ae72:	2b00      	cmp	r3, #0
 800ae74:	d003      	beq.n	800ae7e <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 800ae76:	68fb      	ldr	r3, [r7, #12]
 800ae78:	68ba      	ldr	r2, [r7, #8]
 800ae7a:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ae7e:	68fb      	ldr	r3, [r7, #12]
 800ae80:	2201      	movs	r2, #1
 800ae82:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800ae86:	68fb      	ldr	r3, [r7, #12]
 800ae88:	79fa      	ldrb	r2, [r7, #7]
 800ae8a:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800ae8c:	68f8      	ldr	r0, [r7, #12]
 800ae8e:	f001 fbf9 	bl	800c684 <USBD_LL_Init>

  return USBD_OK;
 800ae92:	2300      	movs	r3, #0
}
 800ae94:	4618      	mov	r0, r3
 800ae96:	3710      	adds	r7, #16
 800ae98:	46bd      	mov	sp, r7
 800ae9a:	bd80      	pop	{r7, pc}

0800ae9c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800ae9c:	b480      	push	{r7}
 800ae9e:	b085      	sub	sp, #20
 800aea0:	af00      	add	r7, sp, #0
 800aea2:	6078      	str	r0, [r7, #4]
 800aea4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 800aea6:	2300      	movs	r3, #0
 800aea8:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 800aeaa:	683b      	ldr	r3, [r7, #0]
 800aeac:	2b00      	cmp	r3, #0
 800aeae:	d006      	beq.n	800aebe <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	683a      	ldr	r2, [r7, #0]
 800aeb4:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 800aeb8:	2300      	movs	r3, #0
 800aeba:	73fb      	strb	r3, [r7, #15]
 800aebc:	e001      	b.n	800aec2 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800aebe:	2302      	movs	r3, #2
 800aec0:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800aec2:	7bfb      	ldrb	r3, [r7, #15]
}
 800aec4:	4618      	mov	r0, r3
 800aec6:	3714      	adds	r7, #20
 800aec8:	46bd      	mov	sp, r7
 800aeca:	bc80      	pop	{r7}
 800aecc:	4770      	bx	lr

0800aece <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 800aece:	b580      	push	{r7, lr}
 800aed0:	b082      	sub	sp, #8
 800aed2:	af00      	add	r7, sp, #0
 800aed4:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800aed6:	6878      	ldr	r0, [r7, #4]
 800aed8:	f001 fc1e 	bl	800c718 <USBD_LL_Start>

  return USBD_OK;
 800aedc:	2300      	movs	r3, #0
}
 800aede:	4618      	mov	r0, r3
 800aee0:	3708      	adds	r7, #8
 800aee2:	46bd      	mov	sp, r7
 800aee4:	bd80      	pop	{r7, pc}

0800aee6 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800aee6:	b480      	push	{r7}
 800aee8:	b083      	sub	sp, #12
 800aeea:	af00      	add	r7, sp, #0
 800aeec:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800aeee:	2300      	movs	r3, #0
}
 800aef0:	4618      	mov	r0, r3
 800aef2:	370c      	adds	r7, #12
 800aef4:	46bd      	mov	sp, r7
 800aef6:	bc80      	pop	{r7}
 800aef8:	4770      	bx	lr

0800aefa <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800aefa:	b580      	push	{r7, lr}
 800aefc:	b084      	sub	sp, #16
 800aefe:	af00      	add	r7, sp, #0
 800af00:	6078      	str	r0, [r7, #4]
 800af02:	460b      	mov	r3, r1
 800af04:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800af06:	2302      	movs	r3, #2
 800af08:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800af10:	2b00      	cmp	r3, #0
 800af12:	d00c      	beq.n	800af2e <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800af1a:	681b      	ldr	r3, [r3, #0]
 800af1c:	78fa      	ldrb	r2, [r7, #3]
 800af1e:	4611      	mov	r1, r2
 800af20:	6878      	ldr	r0, [r7, #4]
 800af22:	4798      	blx	r3
 800af24:	4603      	mov	r3, r0
 800af26:	2b00      	cmp	r3, #0
 800af28:	d101      	bne.n	800af2e <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800af2a:	2300      	movs	r3, #0
 800af2c:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800af2e:	7bfb      	ldrb	r3, [r7, #15]
}
 800af30:	4618      	mov	r0, r3
 800af32:	3710      	adds	r7, #16
 800af34:	46bd      	mov	sp, r7
 800af36:	bd80      	pop	{r7, pc}

0800af38 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800af38:	b580      	push	{r7, lr}
 800af3a:	b082      	sub	sp, #8
 800af3c:	af00      	add	r7, sp, #0
 800af3e:	6078      	str	r0, [r7, #4]
 800af40:	460b      	mov	r3, r1
 800af42:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800af4a:	685b      	ldr	r3, [r3, #4]
 800af4c:	78fa      	ldrb	r2, [r7, #3]
 800af4e:	4611      	mov	r1, r2
 800af50:	6878      	ldr	r0, [r7, #4]
 800af52:	4798      	blx	r3

  return USBD_OK;
 800af54:	2300      	movs	r3, #0
}
 800af56:	4618      	mov	r0, r3
 800af58:	3708      	adds	r7, #8
 800af5a:	46bd      	mov	sp, r7
 800af5c:	bd80      	pop	{r7, pc}

0800af5e <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800af5e:	b580      	push	{r7, lr}
 800af60:	b082      	sub	sp, #8
 800af62:	af00      	add	r7, sp, #0
 800af64:	6078      	str	r0, [r7, #4]
 800af66:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800af6e:	6839      	ldr	r1, [r7, #0]
 800af70:	4618      	mov	r0, r3
 800af72:	f000 ff10 	bl	800bd96 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	2201      	movs	r2, #1
 800af7a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800af84:	461a      	mov	r2, r3
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800af92:	f003 031f 	and.w	r3, r3, #31
 800af96:	2b02      	cmp	r3, #2
 800af98:	d016      	beq.n	800afc8 <USBD_LL_SetupStage+0x6a>
 800af9a:	2b02      	cmp	r3, #2
 800af9c:	d81c      	bhi.n	800afd8 <USBD_LL_SetupStage+0x7a>
 800af9e:	2b00      	cmp	r3, #0
 800afa0:	d002      	beq.n	800afa8 <USBD_LL_SetupStage+0x4a>
 800afa2:	2b01      	cmp	r3, #1
 800afa4:	d008      	beq.n	800afb8 <USBD_LL_SetupStage+0x5a>
 800afa6:	e017      	b.n	800afd8 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800afae:	4619      	mov	r1, r3
 800afb0:	6878      	ldr	r0, [r7, #4]
 800afb2:	f000 fa03 	bl	800b3bc <USBD_StdDevReq>
      break;
 800afb6:	e01a      	b.n	800afee <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800afbe:	4619      	mov	r1, r3
 800afc0:	6878      	ldr	r0, [r7, #4]
 800afc2:	f000 fa65 	bl	800b490 <USBD_StdItfReq>
      break;
 800afc6:	e012      	b.n	800afee <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800afce:	4619      	mov	r1, r3
 800afd0:	6878      	ldr	r0, [r7, #4]
 800afd2:	f000 faa5 	bl	800b520 <USBD_StdEPReq>
      break;
 800afd6:	e00a      	b.n	800afee <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800afde:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800afe2:	b2db      	uxtb	r3, r3
 800afe4:	4619      	mov	r1, r3
 800afe6:	6878      	ldr	r0, [r7, #4]
 800afe8:	f001 fbf6 	bl	800c7d8 <USBD_LL_StallEP>
      break;
 800afec:	bf00      	nop
  }

  return USBD_OK;
 800afee:	2300      	movs	r3, #0
}
 800aff0:	4618      	mov	r0, r3
 800aff2:	3708      	adds	r7, #8
 800aff4:	46bd      	mov	sp, r7
 800aff6:	bd80      	pop	{r7, pc}

0800aff8 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800aff8:	b580      	push	{r7, lr}
 800affa:	b086      	sub	sp, #24
 800affc:	af00      	add	r7, sp, #0
 800affe:	60f8      	str	r0, [r7, #12]
 800b000:	460b      	mov	r3, r1
 800b002:	607a      	str	r2, [r7, #4]
 800b004:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800b006:	7afb      	ldrb	r3, [r7, #11]
 800b008:	2b00      	cmp	r3, #0
 800b00a:	d14b      	bne.n	800b0a4 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 800b00c:	68fb      	ldr	r3, [r7, #12]
 800b00e:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800b012:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800b014:	68fb      	ldr	r3, [r7, #12]
 800b016:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800b01a:	2b03      	cmp	r3, #3
 800b01c:	d134      	bne.n	800b088 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 800b01e:	697b      	ldr	r3, [r7, #20]
 800b020:	68da      	ldr	r2, [r3, #12]
 800b022:	697b      	ldr	r3, [r7, #20]
 800b024:	691b      	ldr	r3, [r3, #16]
 800b026:	429a      	cmp	r2, r3
 800b028:	d919      	bls.n	800b05e <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 800b02a:	697b      	ldr	r3, [r7, #20]
 800b02c:	68da      	ldr	r2, [r3, #12]
 800b02e:	697b      	ldr	r3, [r7, #20]
 800b030:	691b      	ldr	r3, [r3, #16]
 800b032:	1ad2      	subs	r2, r2, r3
 800b034:	697b      	ldr	r3, [r7, #20]
 800b036:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800b038:	697b      	ldr	r3, [r7, #20]
 800b03a:	68da      	ldr	r2, [r3, #12]
 800b03c:	697b      	ldr	r3, [r7, #20]
 800b03e:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800b040:	429a      	cmp	r2, r3
 800b042:	d203      	bcs.n	800b04c <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800b044:	697b      	ldr	r3, [r7, #20]
 800b046:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 800b048:	b29b      	uxth	r3, r3
 800b04a:	e002      	b.n	800b052 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800b04c:	697b      	ldr	r3, [r7, #20]
 800b04e:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800b050:	b29b      	uxth	r3, r3
 800b052:	461a      	mov	r2, r3
 800b054:	6879      	ldr	r1, [r7, #4]
 800b056:	68f8      	ldr	r0, [r7, #12]
 800b058:	f000 ff8f 	bl	800bf7a <USBD_CtlContinueRx>
 800b05c:	e038      	b.n	800b0d0 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800b05e:	68fb      	ldr	r3, [r7, #12]
 800b060:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b064:	691b      	ldr	r3, [r3, #16]
 800b066:	2b00      	cmp	r3, #0
 800b068:	d00a      	beq.n	800b080 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800b06a:	68fb      	ldr	r3, [r7, #12]
 800b06c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800b070:	2b03      	cmp	r3, #3
 800b072:	d105      	bne.n	800b080 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800b074:	68fb      	ldr	r3, [r7, #12]
 800b076:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b07a:	691b      	ldr	r3, [r3, #16]
 800b07c:	68f8      	ldr	r0, [r7, #12]
 800b07e:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800b080:	68f8      	ldr	r0, [r7, #12]
 800b082:	f000 ff8c 	bl	800bf9e <USBD_CtlSendStatus>
 800b086:	e023      	b.n	800b0d0 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800b088:	68fb      	ldr	r3, [r7, #12]
 800b08a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800b08e:	2b05      	cmp	r3, #5
 800b090:	d11e      	bne.n	800b0d0 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800b092:	68fb      	ldr	r3, [r7, #12]
 800b094:	2200      	movs	r2, #0
 800b096:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 800b09a:	2100      	movs	r1, #0
 800b09c:	68f8      	ldr	r0, [r7, #12]
 800b09e:	f001 fb9b 	bl	800c7d8 <USBD_LL_StallEP>
 800b0a2:	e015      	b.n	800b0d0 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800b0a4:	68fb      	ldr	r3, [r7, #12]
 800b0a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b0aa:	699b      	ldr	r3, [r3, #24]
 800b0ac:	2b00      	cmp	r3, #0
 800b0ae:	d00d      	beq.n	800b0cc <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800b0b0:	68fb      	ldr	r3, [r7, #12]
 800b0b2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800b0b6:	2b03      	cmp	r3, #3
 800b0b8:	d108      	bne.n	800b0cc <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800b0ba:	68fb      	ldr	r3, [r7, #12]
 800b0bc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b0c0:	699b      	ldr	r3, [r3, #24]
 800b0c2:	7afa      	ldrb	r2, [r7, #11]
 800b0c4:	4611      	mov	r1, r2
 800b0c6:	68f8      	ldr	r0, [r7, #12]
 800b0c8:	4798      	blx	r3
 800b0ca:	e001      	b.n	800b0d0 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800b0cc:	2302      	movs	r3, #2
 800b0ce:	e000      	b.n	800b0d2 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 800b0d0:	2300      	movs	r3, #0
}
 800b0d2:	4618      	mov	r0, r3
 800b0d4:	3718      	adds	r7, #24
 800b0d6:	46bd      	mov	sp, r7
 800b0d8:	bd80      	pop	{r7, pc}

0800b0da <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800b0da:	b580      	push	{r7, lr}
 800b0dc:	b086      	sub	sp, #24
 800b0de:	af00      	add	r7, sp, #0
 800b0e0:	60f8      	str	r0, [r7, #12]
 800b0e2:	460b      	mov	r3, r1
 800b0e4:	607a      	str	r2, [r7, #4]
 800b0e6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800b0e8:	7afb      	ldrb	r3, [r7, #11]
 800b0ea:	2b00      	cmp	r3, #0
 800b0ec:	d17f      	bne.n	800b1ee <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 800b0ee:	68fb      	ldr	r3, [r7, #12]
 800b0f0:	3314      	adds	r3, #20
 800b0f2:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800b0f4:	68fb      	ldr	r3, [r7, #12]
 800b0f6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800b0fa:	2b02      	cmp	r3, #2
 800b0fc:	d15c      	bne.n	800b1b8 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 800b0fe:	697b      	ldr	r3, [r7, #20]
 800b100:	68da      	ldr	r2, [r3, #12]
 800b102:	697b      	ldr	r3, [r7, #20]
 800b104:	691b      	ldr	r3, [r3, #16]
 800b106:	429a      	cmp	r2, r3
 800b108:	d915      	bls.n	800b136 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 800b10a:	697b      	ldr	r3, [r7, #20]
 800b10c:	68da      	ldr	r2, [r3, #12]
 800b10e:	697b      	ldr	r3, [r7, #20]
 800b110:	691b      	ldr	r3, [r3, #16]
 800b112:	1ad2      	subs	r2, r2, r3
 800b114:	697b      	ldr	r3, [r7, #20]
 800b116:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 800b118:	697b      	ldr	r3, [r7, #20]
 800b11a:	68db      	ldr	r3, [r3, #12]
 800b11c:	b29b      	uxth	r3, r3
 800b11e:	461a      	mov	r2, r3
 800b120:	6879      	ldr	r1, [r7, #4]
 800b122:	68f8      	ldr	r0, [r7, #12]
 800b124:	f000 fef9 	bl	800bf1a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b128:	2300      	movs	r3, #0
 800b12a:	2200      	movs	r2, #0
 800b12c:	2100      	movs	r1, #0
 800b12e:	68f8      	ldr	r0, [r7, #12]
 800b130:	f001 fbfd 	bl	800c92e <USBD_LL_PrepareReceive>
 800b134:	e04e      	b.n	800b1d4 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800b136:	697b      	ldr	r3, [r7, #20]
 800b138:	689b      	ldr	r3, [r3, #8]
 800b13a:	697a      	ldr	r2, [r7, #20]
 800b13c:	6912      	ldr	r2, [r2, #16]
 800b13e:	fbb3 f1f2 	udiv	r1, r3, r2
 800b142:	fb02 f201 	mul.w	r2, r2, r1
 800b146:	1a9b      	subs	r3, r3, r2
 800b148:	2b00      	cmp	r3, #0
 800b14a:	d11c      	bne.n	800b186 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 800b14c:	697b      	ldr	r3, [r7, #20]
 800b14e:	689a      	ldr	r2, [r3, #8]
 800b150:	697b      	ldr	r3, [r7, #20]
 800b152:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800b154:	429a      	cmp	r2, r3
 800b156:	d316      	bcc.n	800b186 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 800b158:	697b      	ldr	r3, [r7, #20]
 800b15a:	689a      	ldr	r2, [r3, #8]
 800b15c:	68fb      	ldr	r3, [r7, #12]
 800b15e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800b162:	429a      	cmp	r2, r3
 800b164:	d20f      	bcs.n	800b186 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800b166:	2200      	movs	r2, #0
 800b168:	2100      	movs	r1, #0
 800b16a:	68f8      	ldr	r0, [r7, #12]
 800b16c:	f000 fed5 	bl	800bf1a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800b170:	68fb      	ldr	r3, [r7, #12]
 800b172:	2200      	movs	r2, #0
 800b174:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b178:	2300      	movs	r3, #0
 800b17a:	2200      	movs	r2, #0
 800b17c:	2100      	movs	r1, #0
 800b17e:	68f8      	ldr	r0, [r7, #12]
 800b180:	f001 fbd5 	bl	800c92e <USBD_LL_PrepareReceive>
 800b184:	e026      	b.n	800b1d4 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800b186:	68fb      	ldr	r3, [r7, #12]
 800b188:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b18c:	68db      	ldr	r3, [r3, #12]
 800b18e:	2b00      	cmp	r3, #0
 800b190:	d00a      	beq.n	800b1a8 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800b192:	68fb      	ldr	r3, [r7, #12]
 800b194:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800b198:	2b03      	cmp	r3, #3
 800b19a:	d105      	bne.n	800b1a8 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800b19c:	68fb      	ldr	r3, [r7, #12]
 800b19e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b1a2:	68db      	ldr	r3, [r3, #12]
 800b1a4:	68f8      	ldr	r0, [r7, #12]
 800b1a6:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800b1a8:	2180      	movs	r1, #128	; 0x80
 800b1aa:	68f8      	ldr	r0, [r7, #12]
 800b1ac:	f001 fb14 	bl	800c7d8 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800b1b0:	68f8      	ldr	r0, [r7, #12]
 800b1b2:	f000 ff07 	bl	800bfc4 <USBD_CtlReceiveStatus>
 800b1b6:	e00d      	b.n	800b1d4 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800b1b8:	68fb      	ldr	r3, [r7, #12]
 800b1ba:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800b1be:	2b04      	cmp	r3, #4
 800b1c0:	d004      	beq.n	800b1cc <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800b1c2:	68fb      	ldr	r3, [r7, #12]
 800b1c4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800b1c8:	2b00      	cmp	r3, #0
 800b1ca:	d103      	bne.n	800b1d4 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800b1cc:	2180      	movs	r1, #128	; 0x80
 800b1ce:	68f8      	ldr	r0, [r7, #12]
 800b1d0:	f001 fb02 	bl	800c7d8 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800b1d4:	68fb      	ldr	r3, [r7, #12]
 800b1d6:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800b1da:	2b01      	cmp	r3, #1
 800b1dc:	d11d      	bne.n	800b21a <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 800b1de:	68f8      	ldr	r0, [r7, #12]
 800b1e0:	f7ff fe81 	bl	800aee6 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800b1e4:	68fb      	ldr	r3, [r7, #12]
 800b1e6:	2200      	movs	r2, #0
 800b1e8:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800b1ec:	e015      	b.n	800b21a <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800b1ee:	68fb      	ldr	r3, [r7, #12]
 800b1f0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b1f4:	695b      	ldr	r3, [r3, #20]
 800b1f6:	2b00      	cmp	r3, #0
 800b1f8:	d00d      	beq.n	800b216 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800b1fa:	68fb      	ldr	r3, [r7, #12]
 800b1fc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800b200:	2b03      	cmp	r3, #3
 800b202:	d108      	bne.n	800b216 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800b204:	68fb      	ldr	r3, [r7, #12]
 800b206:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b20a:	695b      	ldr	r3, [r3, #20]
 800b20c:	7afa      	ldrb	r2, [r7, #11]
 800b20e:	4611      	mov	r1, r2
 800b210:	68f8      	ldr	r0, [r7, #12]
 800b212:	4798      	blx	r3
 800b214:	e001      	b.n	800b21a <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800b216:	2302      	movs	r3, #2
 800b218:	e000      	b.n	800b21c <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800b21a:	2300      	movs	r3, #0
}
 800b21c:	4618      	mov	r0, r3
 800b21e:	3718      	adds	r7, #24
 800b220:	46bd      	mov	sp, r7
 800b222:	bd80      	pop	{r7, pc}

0800b224 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800b224:	b580      	push	{r7, lr}
 800b226:	b082      	sub	sp, #8
 800b228:	af00      	add	r7, sp, #0
 800b22a:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b22c:	2340      	movs	r3, #64	; 0x40
 800b22e:	2200      	movs	r2, #0
 800b230:	2100      	movs	r1, #0
 800b232:	6878      	ldr	r0, [r7, #4]
 800b234:	f001 fa8b 	bl	800c74e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	2201      	movs	r2, #1
 800b23c:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	2240      	movs	r2, #64	; 0x40
 800b244:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b248:	2340      	movs	r3, #64	; 0x40
 800b24a:	2200      	movs	r2, #0
 800b24c:	2180      	movs	r1, #128	; 0x80
 800b24e:	6878      	ldr	r0, [r7, #4]
 800b250:	f001 fa7d 	bl	800c74e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	2201      	movs	r2, #1
 800b258:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	2240      	movs	r2, #64	; 0x40
 800b25e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	2201      	movs	r2, #1
 800b264:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	2200      	movs	r2, #0
 800b26c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	2200      	movs	r2, #0
 800b274:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	2200      	movs	r2, #0
 800b27a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b284:	2b00      	cmp	r3, #0
 800b286:	d009      	beq.n	800b29c <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b28e:	685b      	ldr	r3, [r3, #4]
 800b290:	687a      	ldr	r2, [r7, #4]
 800b292:	6852      	ldr	r2, [r2, #4]
 800b294:	b2d2      	uxtb	r2, r2
 800b296:	4611      	mov	r1, r2
 800b298:	6878      	ldr	r0, [r7, #4]
 800b29a:	4798      	blx	r3
  }

  return USBD_OK;
 800b29c:	2300      	movs	r3, #0
}
 800b29e:	4618      	mov	r0, r3
 800b2a0:	3708      	adds	r7, #8
 800b2a2:	46bd      	mov	sp, r7
 800b2a4:	bd80      	pop	{r7, pc}

0800b2a6 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800b2a6:	b480      	push	{r7}
 800b2a8:	b083      	sub	sp, #12
 800b2aa:	af00      	add	r7, sp, #0
 800b2ac:	6078      	str	r0, [r7, #4]
 800b2ae:	460b      	mov	r3, r1
 800b2b0:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800b2b2:	687b      	ldr	r3, [r7, #4]
 800b2b4:	78fa      	ldrb	r2, [r7, #3]
 800b2b6:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800b2b8:	2300      	movs	r3, #0
}
 800b2ba:	4618      	mov	r0, r3
 800b2bc:	370c      	adds	r7, #12
 800b2be:	46bd      	mov	sp, r7
 800b2c0:	bc80      	pop	{r7}
 800b2c2:	4770      	bx	lr

0800b2c4 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800b2c4:	b480      	push	{r7}
 800b2c6:	b083      	sub	sp, #12
 800b2c8:	af00      	add	r7, sp, #0
 800b2ca:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	2204      	movs	r2, #4
 800b2dc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800b2e0:	2300      	movs	r3, #0
}
 800b2e2:	4618      	mov	r0, r3
 800b2e4:	370c      	adds	r7, #12
 800b2e6:	46bd      	mov	sp, r7
 800b2e8:	bc80      	pop	{r7}
 800b2ea:	4770      	bx	lr

0800b2ec <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800b2ec:	b480      	push	{r7}
 800b2ee:	b083      	sub	sp, #12
 800b2f0:	af00      	add	r7, sp, #0
 800b2f2:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b2fa:	2b04      	cmp	r3, #4
 800b2fc:	d105      	bne.n	800b30a <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800b30a:	2300      	movs	r3, #0
}
 800b30c:	4618      	mov	r0, r3
 800b30e:	370c      	adds	r7, #12
 800b310:	46bd      	mov	sp, r7
 800b312:	bc80      	pop	{r7}
 800b314:	4770      	bx	lr

0800b316 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800b316:	b580      	push	{r7, lr}
 800b318:	b082      	sub	sp, #8
 800b31a:	af00      	add	r7, sp, #0
 800b31c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b324:	2b03      	cmp	r3, #3
 800b326:	d10b      	bne.n	800b340 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b32e:	69db      	ldr	r3, [r3, #28]
 800b330:	2b00      	cmp	r3, #0
 800b332:	d005      	beq.n	800b340 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b33a:	69db      	ldr	r3, [r3, #28]
 800b33c:	6878      	ldr	r0, [r7, #4]
 800b33e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800b340:	2300      	movs	r3, #0
}
 800b342:	4618      	mov	r0, r3
 800b344:	3708      	adds	r7, #8
 800b346:	46bd      	mov	sp, r7
 800b348:	bd80      	pop	{r7, pc}

0800b34a <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800b34a:	b480      	push	{r7}
 800b34c:	b083      	sub	sp, #12
 800b34e:	af00      	add	r7, sp, #0
 800b350:	6078      	str	r0, [r7, #4]
 800b352:	460b      	mov	r3, r1
 800b354:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800b356:	2300      	movs	r3, #0
}
 800b358:	4618      	mov	r0, r3
 800b35a:	370c      	adds	r7, #12
 800b35c:	46bd      	mov	sp, r7
 800b35e:	bc80      	pop	{r7}
 800b360:	4770      	bx	lr

0800b362 <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800b362:	b480      	push	{r7}
 800b364:	b083      	sub	sp, #12
 800b366:	af00      	add	r7, sp, #0
 800b368:	6078      	str	r0, [r7, #4]
 800b36a:	460b      	mov	r3, r1
 800b36c:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800b36e:	2300      	movs	r3, #0
}
 800b370:	4618      	mov	r0, r3
 800b372:	370c      	adds	r7, #12
 800b374:	46bd      	mov	sp, r7
 800b376:	bc80      	pop	{r7}
 800b378:	4770      	bx	lr

0800b37a <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800b37a:	b480      	push	{r7}
 800b37c:	b083      	sub	sp, #12
 800b37e:	af00      	add	r7, sp, #0
 800b380:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800b382:	2300      	movs	r3, #0
}
 800b384:	4618      	mov	r0, r3
 800b386:	370c      	adds	r7, #12
 800b388:	46bd      	mov	sp, r7
 800b38a:	bc80      	pop	{r7}
 800b38c:	4770      	bx	lr

0800b38e <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800b38e:	b580      	push	{r7, lr}
 800b390:	b082      	sub	sp, #8
 800b392:	af00      	add	r7, sp, #0
 800b394:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b396:	687b      	ldr	r3, [r7, #4]
 800b398:	2201      	movs	r2, #1
 800b39a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b3a4:	685b      	ldr	r3, [r3, #4]
 800b3a6:	687a      	ldr	r2, [r7, #4]
 800b3a8:	6852      	ldr	r2, [r2, #4]
 800b3aa:	b2d2      	uxtb	r2, r2
 800b3ac:	4611      	mov	r1, r2
 800b3ae:	6878      	ldr	r0, [r7, #4]
 800b3b0:	4798      	blx	r3

  return USBD_OK;
 800b3b2:	2300      	movs	r3, #0
}
 800b3b4:	4618      	mov	r0, r3
 800b3b6:	3708      	adds	r7, #8
 800b3b8:	46bd      	mov	sp, r7
 800b3ba:	bd80      	pop	{r7, pc}

0800b3bc <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 800b3bc:	b580      	push	{r7, lr}
 800b3be:	b084      	sub	sp, #16
 800b3c0:	af00      	add	r7, sp, #0
 800b3c2:	6078      	str	r0, [r7, #4]
 800b3c4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b3c6:	2300      	movs	r3, #0
 800b3c8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b3ca:	683b      	ldr	r3, [r7, #0]
 800b3cc:	781b      	ldrb	r3, [r3, #0]
 800b3ce:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b3d2:	2b40      	cmp	r3, #64	; 0x40
 800b3d4:	d005      	beq.n	800b3e2 <USBD_StdDevReq+0x26>
 800b3d6:	2b40      	cmp	r3, #64	; 0x40
 800b3d8:	d84f      	bhi.n	800b47a <USBD_StdDevReq+0xbe>
 800b3da:	2b00      	cmp	r3, #0
 800b3dc:	d009      	beq.n	800b3f2 <USBD_StdDevReq+0x36>
 800b3de:	2b20      	cmp	r3, #32
 800b3e0:	d14b      	bne.n	800b47a <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b3e8:	689b      	ldr	r3, [r3, #8]
 800b3ea:	6839      	ldr	r1, [r7, #0]
 800b3ec:	6878      	ldr	r0, [r7, #4]
 800b3ee:	4798      	blx	r3
      break;
 800b3f0:	e048      	b.n	800b484 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b3f2:	683b      	ldr	r3, [r7, #0]
 800b3f4:	785b      	ldrb	r3, [r3, #1]
 800b3f6:	2b09      	cmp	r3, #9
 800b3f8:	d839      	bhi.n	800b46e <USBD_StdDevReq+0xb2>
 800b3fa:	a201      	add	r2, pc, #4	; (adr r2, 800b400 <USBD_StdDevReq+0x44>)
 800b3fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b400:	0800b451 	.word	0x0800b451
 800b404:	0800b465 	.word	0x0800b465
 800b408:	0800b46f 	.word	0x0800b46f
 800b40c:	0800b45b 	.word	0x0800b45b
 800b410:	0800b46f 	.word	0x0800b46f
 800b414:	0800b433 	.word	0x0800b433
 800b418:	0800b429 	.word	0x0800b429
 800b41c:	0800b46f 	.word	0x0800b46f
 800b420:	0800b447 	.word	0x0800b447
 800b424:	0800b43d 	.word	0x0800b43d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800b428:	6839      	ldr	r1, [r7, #0]
 800b42a:	6878      	ldr	r0, [r7, #4]
 800b42c:	f000 f9dc 	bl	800b7e8 <USBD_GetDescriptor>
          break;
 800b430:	e022      	b.n	800b478 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800b432:	6839      	ldr	r1, [r7, #0]
 800b434:	6878      	ldr	r0, [r7, #4]
 800b436:	f000 fb3f 	bl	800bab8 <USBD_SetAddress>
          break;
 800b43a:	e01d      	b.n	800b478 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 800b43c:	6839      	ldr	r1, [r7, #0]
 800b43e:	6878      	ldr	r0, [r7, #4]
 800b440:	f000 fb7e 	bl	800bb40 <USBD_SetConfig>
          break;
 800b444:	e018      	b.n	800b478 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800b446:	6839      	ldr	r1, [r7, #0]
 800b448:	6878      	ldr	r0, [r7, #4]
 800b44a:	f000 fc07 	bl	800bc5c <USBD_GetConfig>
          break;
 800b44e:	e013      	b.n	800b478 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800b450:	6839      	ldr	r1, [r7, #0]
 800b452:	6878      	ldr	r0, [r7, #4]
 800b454:	f000 fc37 	bl	800bcc6 <USBD_GetStatus>
          break;
 800b458:	e00e      	b.n	800b478 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800b45a:	6839      	ldr	r1, [r7, #0]
 800b45c:	6878      	ldr	r0, [r7, #4]
 800b45e:	f000 fc65 	bl	800bd2c <USBD_SetFeature>
          break;
 800b462:	e009      	b.n	800b478 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800b464:	6839      	ldr	r1, [r7, #0]
 800b466:	6878      	ldr	r0, [r7, #4]
 800b468:	f000 fc74 	bl	800bd54 <USBD_ClrFeature>
          break;
 800b46c:	e004      	b.n	800b478 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 800b46e:	6839      	ldr	r1, [r7, #0]
 800b470:	6878      	ldr	r0, [r7, #4]
 800b472:	f000 fccc 	bl	800be0e <USBD_CtlError>
          break;
 800b476:	bf00      	nop
      }
      break;
 800b478:	e004      	b.n	800b484 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 800b47a:	6839      	ldr	r1, [r7, #0]
 800b47c:	6878      	ldr	r0, [r7, #4]
 800b47e:	f000 fcc6 	bl	800be0e <USBD_CtlError>
      break;
 800b482:	bf00      	nop
  }

  return ret;
 800b484:	7bfb      	ldrb	r3, [r7, #15]
}
 800b486:	4618      	mov	r0, r3
 800b488:	3710      	adds	r7, #16
 800b48a:	46bd      	mov	sp, r7
 800b48c:	bd80      	pop	{r7, pc}
 800b48e:	bf00      	nop

0800b490 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 800b490:	b580      	push	{r7, lr}
 800b492:	b084      	sub	sp, #16
 800b494:	af00      	add	r7, sp, #0
 800b496:	6078      	str	r0, [r7, #4]
 800b498:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b49a:	2300      	movs	r3, #0
 800b49c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b49e:	683b      	ldr	r3, [r7, #0]
 800b4a0:	781b      	ldrb	r3, [r3, #0]
 800b4a2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b4a6:	2b40      	cmp	r3, #64	; 0x40
 800b4a8:	d005      	beq.n	800b4b6 <USBD_StdItfReq+0x26>
 800b4aa:	2b40      	cmp	r3, #64	; 0x40
 800b4ac:	d82e      	bhi.n	800b50c <USBD_StdItfReq+0x7c>
 800b4ae:	2b00      	cmp	r3, #0
 800b4b0:	d001      	beq.n	800b4b6 <USBD_StdItfReq+0x26>
 800b4b2:	2b20      	cmp	r3, #32
 800b4b4:	d12a      	bne.n	800b50c <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800b4b6:	687b      	ldr	r3, [r7, #4]
 800b4b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b4bc:	3b01      	subs	r3, #1
 800b4be:	2b02      	cmp	r3, #2
 800b4c0:	d81d      	bhi.n	800b4fe <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800b4c2:	683b      	ldr	r3, [r7, #0]
 800b4c4:	889b      	ldrh	r3, [r3, #4]
 800b4c6:	b2db      	uxtb	r3, r3
 800b4c8:	2b01      	cmp	r3, #1
 800b4ca:	d813      	bhi.n	800b4f4 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b4d2:	689b      	ldr	r3, [r3, #8]
 800b4d4:	6839      	ldr	r1, [r7, #0]
 800b4d6:	6878      	ldr	r0, [r7, #4]
 800b4d8:	4798      	blx	r3
 800b4da:	4603      	mov	r3, r0
 800b4dc:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800b4de:	683b      	ldr	r3, [r7, #0]
 800b4e0:	88db      	ldrh	r3, [r3, #6]
 800b4e2:	2b00      	cmp	r3, #0
 800b4e4:	d110      	bne.n	800b508 <USBD_StdItfReq+0x78>
 800b4e6:	7bfb      	ldrb	r3, [r7, #15]
 800b4e8:	2b00      	cmp	r3, #0
 800b4ea:	d10d      	bne.n	800b508 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 800b4ec:	6878      	ldr	r0, [r7, #4]
 800b4ee:	f000 fd56 	bl	800bf9e <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800b4f2:	e009      	b.n	800b508 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 800b4f4:	6839      	ldr	r1, [r7, #0]
 800b4f6:	6878      	ldr	r0, [r7, #4]
 800b4f8:	f000 fc89 	bl	800be0e <USBD_CtlError>
          break;
 800b4fc:	e004      	b.n	800b508 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 800b4fe:	6839      	ldr	r1, [r7, #0]
 800b500:	6878      	ldr	r0, [r7, #4]
 800b502:	f000 fc84 	bl	800be0e <USBD_CtlError>
          break;
 800b506:	e000      	b.n	800b50a <USBD_StdItfReq+0x7a>
          break;
 800b508:	bf00      	nop
      }
      break;
 800b50a:	e004      	b.n	800b516 <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 800b50c:	6839      	ldr	r1, [r7, #0]
 800b50e:	6878      	ldr	r0, [r7, #4]
 800b510:	f000 fc7d 	bl	800be0e <USBD_CtlError>
      break;
 800b514:	bf00      	nop
  }

  return USBD_OK;
 800b516:	2300      	movs	r3, #0
}
 800b518:	4618      	mov	r0, r3
 800b51a:	3710      	adds	r7, #16
 800b51c:	46bd      	mov	sp, r7
 800b51e:	bd80      	pop	{r7, pc}

0800b520 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 800b520:	b580      	push	{r7, lr}
 800b522:	b084      	sub	sp, #16
 800b524:	af00      	add	r7, sp, #0
 800b526:	6078      	str	r0, [r7, #4]
 800b528:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800b52a:	2300      	movs	r3, #0
 800b52c:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 800b52e:	683b      	ldr	r3, [r7, #0]
 800b530:	889b      	ldrh	r3, [r3, #4]
 800b532:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b534:	683b      	ldr	r3, [r7, #0]
 800b536:	781b      	ldrb	r3, [r3, #0]
 800b538:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b53c:	2b40      	cmp	r3, #64	; 0x40
 800b53e:	d007      	beq.n	800b550 <USBD_StdEPReq+0x30>
 800b540:	2b40      	cmp	r3, #64	; 0x40
 800b542:	f200 8146 	bhi.w	800b7d2 <USBD_StdEPReq+0x2b2>
 800b546:	2b00      	cmp	r3, #0
 800b548:	d00a      	beq.n	800b560 <USBD_StdEPReq+0x40>
 800b54a:	2b20      	cmp	r3, #32
 800b54c:	f040 8141 	bne.w	800b7d2 <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b556:	689b      	ldr	r3, [r3, #8]
 800b558:	6839      	ldr	r1, [r7, #0]
 800b55a:	6878      	ldr	r0, [r7, #4]
 800b55c:	4798      	blx	r3
      break;
 800b55e:	e13d      	b.n	800b7dc <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 800b560:	683b      	ldr	r3, [r7, #0]
 800b562:	781b      	ldrb	r3, [r3, #0]
 800b564:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b568:	2b20      	cmp	r3, #32
 800b56a:	d10a      	bne.n	800b582 <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b572:	689b      	ldr	r3, [r3, #8]
 800b574:	6839      	ldr	r1, [r7, #0]
 800b576:	6878      	ldr	r0, [r7, #4]
 800b578:	4798      	blx	r3
 800b57a:	4603      	mov	r3, r0
 800b57c:	73fb      	strb	r3, [r7, #15]

        return ret;
 800b57e:	7bfb      	ldrb	r3, [r7, #15]
 800b580:	e12d      	b.n	800b7de <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 800b582:	683b      	ldr	r3, [r7, #0]
 800b584:	785b      	ldrb	r3, [r3, #1]
 800b586:	2b03      	cmp	r3, #3
 800b588:	d007      	beq.n	800b59a <USBD_StdEPReq+0x7a>
 800b58a:	2b03      	cmp	r3, #3
 800b58c:	f300 811b 	bgt.w	800b7c6 <USBD_StdEPReq+0x2a6>
 800b590:	2b00      	cmp	r3, #0
 800b592:	d072      	beq.n	800b67a <USBD_StdEPReq+0x15a>
 800b594:	2b01      	cmp	r3, #1
 800b596:	d03a      	beq.n	800b60e <USBD_StdEPReq+0xee>
 800b598:	e115      	b.n	800b7c6 <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b5a0:	2b02      	cmp	r3, #2
 800b5a2:	d002      	beq.n	800b5aa <USBD_StdEPReq+0x8a>
 800b5a4:	2b03      	cmp	r3, #3
 800b5a6:	d015      	beq.n	800b5d4 <USBD_StdEPReq+0xb4>
 800b5a8:	e02b      	b.n	800b602 <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b5aa:	7bbb      	ldrb	r3, [r7, #14]
 800b5ac:	2b00      	cmp	r3, #0
 800b5ae:	d00c      	beq.n	800b5ca <USBD_StdEPReq+0xaa>
 800b5b0:	7bbb      	ldrb	r3, [r7, #14]
 800b5b2:	2b80      	cmp	r3, #128	; 0x80
 800b5b4:	d009      	beq.n	800b5ca <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800b5b6:	7bbb      	ldrb	r3, [r7, #14]
 800b5b8:	4619      	mov	r1, r3
 800b5ba:	6878      	ldr	r0, [r7, #4]
 800b5bc:	f001 f90c 	bl	800c7d8 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800b5c0:	2180      	movs	r1, #128	; 0x80
 800b5c2:	6878      	ldr	r0, [r7, #4]
 800b5c4:	f001 f908 	bl	800c7d8 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b5c8:	e020      	b.n	800b60c <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 800b5ca:	6839      	ldr	r1, [r7, #0]
 800b5cc:	6878      	ldr	r0, [r7, #4]
 800b5ce:	f000 fc1e 	bl	800be0e <USBD_CtlError>
              break;
 800b5d2:	e01b      	b.n	800b60c <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b5d4:	683b      	ldr	r3, [r7, #0]
 800b5d6:	885b      	ldrh	r3, [r3, #2]
 800b5d8:	2b00      	cmp	r3, #0
 800b5da:	d10e      	bne.n	800b5fa <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 800b5dc:	7bbb      	ldrb	r3, [r7, #14]
 800b5de:	2b00      	cmp	r3, #0
 800b5e0:	d00b      	beq.n	800b5fa <USBD_StdEPReq+0xda>
 800b5e2:	7bbb      	ldrb	r3, [r7, #14]
 800b5e4:	2b80      	cmp	r3, #128	; 0x80
 800b5e6:	d008      	beq.n	800b5fa <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800b5e8:	683b      	ldr	r3, [r7, #0]
 800b5ea:	88db      	ldrh	r3, [r3, #6]
 800b5ec:	2b00      	cmp	r3, #0
 800b5ee:	d104      	bne.n	800b5fa <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 800b5f0:	7bbb      	ldrb	r3, [r7, #14]
 800b5f2:	4619      	mov	r1, r3
 800b5f4:	6878      	ldr	r0, [r7, #4]
 800b5f6:	f001 f8ef 	bl	800c7d8 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800b5fa:	6878      	ldr	r0, [r7, #4]
 800b5fc:	f000 fccf 	bl	800bf9e <USBD_CtlSendStatus>

              break;
 800b600:	e004      	b.n	800b60c <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 800b602:	6839      	ldr	r1, [r7, #0]
 800b604:	6878      	ldr	r0, [r7, #4]
 800b606:	f000 fc02 	bl	800be0e <USBD_CtlError>
              break;
 800b60a:	bf00      	nop
          }
          break;
 800b60c:	e0e0      	b.n	800b7d0 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800b60e:	687b      	ldr	r3, [r7, #4]
 800b610:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b614:	2b02      	cmp	r3, #2
 800b616:	d002      	beq.n	800b61e <USBD_StdEPReq+0xfe>
 800b618:	2b03      	cmp	r3, #3
 800b61a:	d015      	beq.n	800b648 <USBD_StdEPReq+0x128>
 800b61c:	e026      	b.n	800b66c <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b61e:	7bbb      	ldrb	r3, [r7, #14]
 800b620:	2b00      	cmp	r3, #0
 800b622:	d00c      	beq.n	800b63e <USBD_StdEPReq+0x11e>
 800b624:	7bbb      	ldrb	r3, [r7, #14]
 800b626:	2b80      	cmp	r3, #128	; 0x80
 800b628:	d009      	beq.n	800b63e <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800b62a:	7bbb      	ldrb	r3, [r7, #14]
 800b62c:	4619      	mov	r1, r3
 800b62e:	6878      	ldr	r0, [r7, #4]
 800b630:	f001 f8d2 	bl	800c7d8 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800b634:	2180      	movs	r1, #128	; 0x80
 800b636:	6878      	ldr	r0, [r7, #4]
 800b638:	f001 f8ce 	bl	800c7d8 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b63c:	e01c      	b.n	800b678 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 800b63e:	6839      	ldr	r1, [r7, #0]
 800b640:	6878      	ldr	r0, [r7, #4]
 800b642:	f000 fbe4 	bl	800be0e <USBD_CtlError>
              break;
 800b646:	e017      	b.n	800b678 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b648:	683b      	ldr	r3, [r7, #0]
 800b64a:	885b      	ldrh	r3, [r3, #2]
 800b64c:	2b00      	cmp	r3, #0
 800b64e:	d112      	bne.n	800b676 <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800b650:	7bbb      	ldrb	r3, [r7, #14]
 800b652:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b656:	2b00      	cmp	r3, #0
 800b658:	d004      	beq.n	800b664 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800b65a:	7bbb      	ldrb	r3, [r7, #14]
 800b65c:	4619      	mov	r1, r3
 800b65e:	6878      	ldr	r0, [r7, #4]
 800b660:	f001 f8d9 	bl	800c816 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 800b664:	6878      	ldr	r0, [r7, #4]
 800b666:	f000 fc9a 	bl	800bf9e <USBD_CtlSendStatus>
              }
              break;
 800b66a:	e004      	b.n	800b676 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 800b66c:	6839      	ldr	r1, [r7, #0]
 800b66e:	6878      	ldr	r0, [r7, #4]
 800b670:	f000 fbcd 	bl	800be0e <USBD_CtlError>
              break;
 800b674:	e000      	b.n	800b678 <USBD_StdEPReq+0x158>
              break;
 800b676:	bf00      	nop
          }
          break;
 800b678:	e0aa      	b.n	800b7d0 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800b67a:	687b      	ldr	r3, [r7, #4]
 800b67c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b680:	2b02      	cmp	r3, #2
 800b682:	d002      	beq.n	800b68a <USBD_StdEPReq+0x16a>
 800b684:	2b03      	cmp	r3, #3
 800b686:	d032      	beq.n	800b6ee <USBD_StdEPReq+0x1ce>
 800b688:	e097      	b.n	800b7ba <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b68a:	7bbb      	ldrb	r3, [r7, #14]
 800b68c:	2b00      	cmp	r3, #0
 800b68e:	d007      	beq.n	800b6a0 <USBD_StdEPReq+0x180>
 800b690:	7bbb      	ldrb	r3, [r7, #14]
 800b692:	2b80      	cmp	r3, #128	; 0x80
 800b694:	d004      	beq.n	800b6a0 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 800b696:	6839      	ldr	r1, [r7, #0]
 800b698:	6878      	ldr	r0, [r7, #4]
 800b69a:	f000 fbb8 	bl	800be0e <USBD_CtlError>
                break;
 800b69e:	e091      	b.n	800b7c4 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b6a0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b6a4:	2b00      	cmp	r3, #0
 800b6a6:	da0b      	bge.n	800b6c0 <USBD_StdEPReq+0x1a0>
 800b6a8:	7bbb      	ldrb	r3, [r7, #14]
 800b6aa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b6ae:	4613      	mov	r3, r2
 800b6b0:	009b      	lsls	r3, r3, #2
 800b6b2:	4413      	add	r3, r2
 800b6b4:	009b      	lsls	r3, r3, #2
 800b6b6:	3310      	adds	r3, #16
 800b6b8:	687a      	ldr	r2, [r7, #4]
 800b6ba:	4413      	add	r3, r2
 800b6bc:	3304      	adds	r3, #4
 800b6be:	e00b      	b.n	800b6d8 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b6c0:	7bbb      	ldrb	r3, [r7, #14]
 800b6c2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b6c6:	4613      	mov	r3, r2
 800b6c8:	009b      	lsls	r3, r3, #2
 800b6ca:	4413      	add	r3, r2
 800b6cc:	009b      	lsls	r3, r3, #2
 800b6ce:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800b6d2:	687a      	ldr	r2, [r7, #4]
 800b6d4:	4413      	add	r3, r2
 800b6d6:	3304      	adds	r3, #4
 800b6d8:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800b6da:	68bb      	ldr	r3, [r7, #8]
 800b6dc:	2200      	movs	r2, #0
 800b6de:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800b6e0:	68bb      	ldr	r3, [r7, #8]
 800b6e2:	2202      	movs	r2, #2
 800b6e4:	4619      	mov	r1, r3
 800b6e6:	6878      	ldr	r0, [r7, #4]
 800b6e8:	f000 fbfb 	bl	800bee2 <USBD_CtlSendData>
              break;
 800b6ec:	e06a      	b.n	800b7c4 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800b6ee:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b6f2:	2b00      	cmp	r3, #0
 800b6f4:	da11      	bge.n	800b71a <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800b6f6:	7bbb      	ldrb	r3, [r7, #14]
 800b6f8:	f003 020f 	and.w	r2, r3, #15
 800b6fc:	6879      	ldr	r1, [r7, #4]
 800b6fe:	4613      	mov	r3, r2
 800b700:	009b      	lsls	r3, r3, #2
 800b702:	4413      	add	r3, r2
 800b704:	009b      	lsls	r3, r3, #2
 800b706:	440b      	add	r3, r1
 800b708:	3318      	adds	r3, #24
 800b70a:	681b      	ldr	r3, [r3, #0]
 800b70c:	2b00      	cmp	r3, #0
 800b70e:	d117      	bne.n	800b740 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800b710:	6839      	ldr	r1, [r7, #0]
 800b712:	6878      	ldr	r0, [r7, #4]
 800b714:	f000 fb7b 	bl	800be0e <USBD_CtlError>
                  break;
 800b718:	e054      	b.n	800b7c4 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800b71a:	7bbb      	ldrb	r3, [r7, #14]
 800b71c:	f003 020f 	and.w	r2, r3, #15
 800b720:	6879      	ldr	r1, [r7, #4]
 800b722:	4613      	mov	r3, r2
 800b724:	009b      	lsls	r3, r3, #2
 800b726:	4413      	add	r3, r2
 800b728:	009b      	lsls	r3, r3, #2
 800b72a:	440b      	add	r3, r1
 800b72c:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 800b730:	681b      	ldr	r3, [r3, #0]
 800b732:	2b00      	cmp	r3, #0
 800b734:	d104      	bne.n	800b740 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800b736:	6839      	ldr	r1, [r7, #0]
 800b738:	6878      	ldr	r0, [r7, #4]
 800b73a:	f000 fb68 	bl	800be0e <USBD_CtlError>
                  break;
 800b73e:	e041      	b.n	800b7c4 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b740:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b744:	2b00      	cmp	r3, #0
 800b746:	da0b      	bge.n	800b760 <USBD_StdEPReq+0x240>
 800b748:	7bbb      	ldrb	r3, [r7, #14]
 800b74a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b74e:	4613      	mov	r3, r2
 800b750:	009b      	lsls	r3, r3, #2
 800b752:	4413      	add	r3, r2
 800b754:	009b      	lsls	r3, r3, #2
 800b756:	3310      	adds	r3, #16
 800b758:	687a      	ldr	r2, [r7, #4]
 800b75a:	4413      	add	r3, r2
 800b75c:	3304      	adds	r3, #4
 800b75e:	e00b      	b.n	800b778 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b760:	7bbb      	ldrb	r3, [r7, #14]
 800b762:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b766:	4613      	mov	r3, r2
 800b768:	009b      	lsls	r3, r3, #2
 800b76a:	4413      	add	r3, r2
 800b76c:	009b      	lsls	r3, r3, #2
 800b76e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800b772:	687a      	ldr	r2, [r7, #4]
 800b774:	4413      	add	r3, r2
 800b776:	3304      	adds	r3, #4
 800b778:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800b77a:	7bbb      	ldrb	r3, [r7, #14]
 800b77c:	2b00      	cmp	r3, #0
 800b77e:	d002      	beq.n	800b786 <USBD_StdEPReq+0x266>
 800b780:	7bbb      	ldrb	r3, [r7, #14]
 800b782:	2b80      	cmp	r3, #128	; 0x80
 800b784:	d103      	bne.n	800b78e <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 800b786:	68bb      	ldr	r3, [r7, #8]
 800b788:	2200      	movs	r2, #0
 800b78a:	601a      	str	r2, [r3, #0]
 800b78c:	e00e      	b.n	800b7ac <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800b78e:	7bbb      	ldrb	r3, [r7, #14]
 800b790:	4619      	mov	r1, r3
 800b792:	6878      	ldr	r0, [r7, #4]
 800b794:	f001 f85e 	bl	800c854 <USBD_LL_IsStallEP>
 800b798:	4603      	mov	r3, r0
 800b79a:	2b00      	cmp	r3, #0
 800b79c:	d003      	beq.n	800b7a6 <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 800b79e:	68bb      	ldr	r3, [r7, #8]
 800b7a0:	2201      	movs	r2, #1
 800b7a2:	601a      	str	r2, [r3, #0]
 800b7a4:	e002      	b.n	800b7ac <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 800b7a6:	68bb      	ldr	r3, [r7, #8]
 800b7a8:	2200      	movs	r2, #0
 800b7aa:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800b7ac:	68bb      	ldr	r3, [r7, #8]
 800b7ae:	2202      	movs	r2, #2
 800b7b0:	4619      	mov	r1, r3
 800b7b2:	6878      	ldr	r0, [r7, #4]
 800b7b4:	f000 fb95 	bl	800bee2 <USBD_CtlSendData>
              break;
 800b7b8:	e004      	b.n	800b7c4 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 800b7ba:	6839      	ldr	r1, [r7, #0]
 800b7bc:	6878      	ldr	r0, [r7, #4]
 800b7be:	f000 fb26 	bl	800be0e <USBD_CtlError>
              break;
 800b7c2:	bf00      	nop
          }
          break;
 800b7c4:	e004      	b.n	800b7d0 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 800b7c6:	6839      	ldr	r1, [r7, #0]
 800b7c8:	6878      	ldr	r0, [r7, #4]
 800b7ca:	f000 fb20 	bl	800be0e <USBD_CtlError>
          break;
 800b7ce:	bf00      	nop
      }
      break;
 800b7d0:	e004      	b.n	800b7dc <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 800b7d2:	6839      	ldr	r1, [r7, #0]
 800b7d4:	6878      	ldr	r0, [r7, #4]
 800b7d6:	f000 fb1a 	bl	800be0e <USBD_CtlError>
      break;
 800b7da:	bf00      	nop
  }

  return ret;
 800b7dc:	7bfb      	ldrb	r3, [r7, #15]
}
 800b7de:	4618      	mov	r0, r3
 800b7e0:	3710      	adds	r7, #16
 800b7e2:	46bd      	mov	sp, r7
 800b7e4:	bd80      	pop	{r7, pc}
	...

0800b7e8 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800b7e8:	b580      	push	{r7, lr}
 800b7ea:	b084      	sub	sp, #16
 800b7ec:	af00      	add	r7, sp, #0
 800b7ee:	6078      	str	r0, [r7, #4]
 800b7f0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b7f2:	2300      	movs	r3, #0
 800b7f4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800b7f6:	2300      	movs	r3, #0
 800b7f8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800b7fa:	2300      	movs	r3, #0
 800b7fc:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800b7fe:	683b      	ldr	r3, [r7, #0]
 800b800:	885b      	ldrh	r3, [r3, #2]
 800b802:	0a1b      	lsrs	r3, r3, #8
 800b804:	b29b      	uxth	r3, r3
 800b806:	3b01      	subs	r3, #1
 800b808:	2b06      	cmp	r3, #6
 800b80a:	f200 8128 	bhi.w	800ba5e <USBD_GetDescriptor+0x276>
 800b80e:	a201      	add	r2, pc, #4	; (adr r2, 800b814 <USBD_GetDescriptor+0x2c>)
 800b810:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b814:	0800b831 	.word	0x0800b831
 800b818:	0800b849 	.word	0x0800b849
 800b81c:	0800b889 	.word	0x0800b889
 800b820:	0800ba5f 	.word	0x0800ba5f
 800b824:	0800ba5f 	.word	0x0800ba5f
 800b828:	0800b9ff 	.word	0x0800b9ff
 800b82c:	0800ba2b 	.word	0x0800ba2b
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b836:	681b      	ldr	r3, [r3, #0]
 800b838:	687a      	ldr	r2, [r7, #4]
 800b83a:	7c12      	ldrb	r2, [r2, #16]
 800b83c:	f107 0108 	add.w	r1, r7, #8
 800b840:	4610      	mov	r0, r2
 800b842:	4798      	blx	r3
 800b844:	60f8      	str	r0, [r7, #12]
      break;
 800b846:	e112      	b.n	800ba6e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	7c1b      	ldrb	r3, [r3, #16]
 800b84c:	2b00      	cmp	r3, #0
 800b84e:	d10d      	bne.n	800b86c <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b856:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b858:	f107 0208 	add.w	r2, r7, #8
 800b85c:	4610      	mov	r0, r2
 800b85e:	4798      	blx	r3
 800b860:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b862:	68fb      	ldr	r3, [r7, #12]
 800b864:	3301      	adds	r3, #1
 800b866:	2202      	movs	r2, #2
 800b868:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800b86a:	e100      	b.n	800ba6e <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b872:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b874:	f107 0208 	add.w	r2, r7, #8
 800b878:	4610      	mov	r0, r2
 800b87a:	4798      	blx	r3
 800b87c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b87e:	68fb      	ldr	r3, [r7, #12]
 800b880:	3301      	adds	r3, #1
 800b882:	2202      	movs	r2, #2
 800b884:	701a      	strb	r2, [r3, #0]
      break;
 800b886:	e0f2      	b.n	800ba6e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800b888:	683b      	ldr	r3, [r7, #0]
 800b88a:	885b      	ldrh	r3, [r3, #2]
 800b88c:	b2db      	uxtb	r3, r3
 800b88e:	2b05      	cmp	r3, #5
 800b890:	f200 80ac 	bhi.w	800b9ec <USBD_GetDescriptor+0x204>
 800b894:	a201      	add	r2, pc, #4	; (adr r2, 800b89c <USBD_GetDescriptor+0xb4>)
 800b896:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b89a:	bf00      	nop
 800b89c:	0800b8b5 	.word	0x0800b8b5
 800b8a0:	0800b8e9 	.word	0x0800b8e9
 800b8a4:	0800b91d 	.word	0x0800b91d
 800b8a8:	0800b951 	.word	0x0800b951
 800b8ac:	0800b985 	.word	0x0800b985
 800b8b0:	0800b9b9 	.word	0x0800b9b9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800b8b4:	687b      	ldr	r3, [r7, #4]
 800b8b6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b8ba:	685b      	ldr	r3, [r3, #4]
 800b8bc:	2b00      	cmp	r3, #0
 800b8be:	d00b      	beq.n	800b8d8 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b8c6:	685b      	ldr	r3, [r3, #4]
 800b8c8:	687a      	ldr	r2, [r7, #4]
 800b8ca:	7c12      	ldrb	r2, [r2, #16]
 800b8cc:	f107 0108 	add.w	r1, r7, #8
 800b8d0:	4610      	mov	r0, r2
 800b8d2:	4798      	blx	r3
 800b8d4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b8d6:	e091      	b.n	800b9fc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b8d8:	6839      	ldr	r1, [r7, #0]
 800b8da:	6878      	ldr	r0, [r7, #4]
 800b8dc:	f000 fa97 	bl	800be0e <USBD_CtlError>
            err++;
 800b8e0:	7afb      	ldrb	r3, [r7, #11]
 800b8e2:	3301      	adds	r3, #1
 800b8e4:	72fb      	strb	r3, [r7, #11]
          break;
 800b8e6:	e089      	b.n	800b9fc <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b8ee:	689b      	ldr	r3, [r3, #8]
 800b8f0:	2b00      	cmp	r3, #0
 800b8f2:	d00b      	beq.n	800b90c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b8fa:	689b      	ldr	r3, [r3, #8]
 800b8fc:	687a      	ldr	r2, [r7, #4]
 800b8fe:	7c12      	ldrb	r2, [r2, #16]
 800b900:	f107 0108 	add.w	r1, r7, #8
 800b904:	4610      	mov	r0, r2
 800b906:	4798      	blx	r3
 800b908:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b90a:	e077      	b.n	800b9fc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b90c:	6839      	ldr	r1, [r7, #0]
 800b90e:	6878      	ldr	r0, [r7, #4]
 800b910:	f000 fa7d 	bl	800be0e <USBD_CtlError>
            err++;
 800b914:	7afb      	ldrb	r3, [r7, #11]
 800b916:	3301      	adds	r3, #1
 800b918:	72fb      	strb	r3, [r7, #11]
          break;
 800b91a:	e06f      	b.n	800b9fc <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b922:	68db      	ldr	r3, [r3, #12]
 800b924:	2b00      	cmp	r3, #0
 800b926:	d00b      	beq.n	800b940 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b92e:	68db      	ldr	r3, [r3, #12]
 800b930:	687a      	ldr	r2, [r7, #4]
 800b932:	7c12      	ldrb	r2, [r2, #16]
 800b934:	f107 0108 	add.w	r1, r7, #8
 800b938:	4610      	mov	r0, r2
 800b93a:	4798      	blx	r3
 800b93c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b93e:	e05d      	b.n	800b9fc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b940:	6839      	ldr	r1, [r7, #0]
 800b942:	6878      	ldr	r0, [r7, #4]
 800b944:	f000 fa63 	bl	800be0e <USBD_CtlError>
            err++;
 800b948:	7afb      	ldrb	r3, [r7, #11]
 800b94a:	3301      	adds	r3, #1
 800b94c:	72fb      	strb	r3, [r7, #11]
          break;
 800b94e:	e055      	b.n	800b9fc <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800b950:	687b      	ldr	r3, [r7, #4]
 800b952:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b956:	691b      	ldr	r3, [r3, #16]
 800b958:	2b00      	cmp	r3, #0
 800b95a:	d00b      	beq.n	800b974 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800b95c:	687b      	ldr	r3, [r7, #4]
 800b95e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b962:	691b      	ldr	r3, [r3, #16]
 800b964:	687a      	ldr	r2, [r7, #4]
 800b966:	7c12      	ldrb	r2, [r2, #16]
 800b968:	f107 0108 	add.w	r1, r7, #8
 800b96c:	4610      	mov	r0, r2
 800b96e:	4798      	blx	r3
 800b970:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b972:	e043      	b.n	800b9fc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b974:	6839      	ldr	r1, [r7, #0]
 800b976:	6878      	ldr	r0, [r7, #4]
 800b978:	f000 fa49 	bl	800be0e <USBD_CtlError>
            err++;
 800b97c:	7afb      	ldrb	r3, [r7, #11]
 800b97e:	3301      	adds	r3, #1
 800b980:	72fb      	strb	r3, [r7, #11]
          break;
 800b982:	e03b      	b.n	800b9fc <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b98a:	695b      	ldr	r3, [r3, #20]
 800b98c:	2b00      	cmp	r3, #0
 800b98e:	d00b      	beq.n	800b9a8 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b996:	695b      	ldr	r3, [r3, #20]
 800b998:	687a      	ldr	r2, [r7, #4]
 800b99a:	7c12      	ldrb	r2, [r2, #16]
 800b99c:	f107 0108 	add.w	r1, r7, #8
 800b9a0:	4610      	mov	r0, r2
 800b9a2:	4798      	blx	r3
 800b9a4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b9a6:	e029      	b.n	800b9fc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b9a8:	6839      	ldr	r1, [r7, #0]
 800b9aa:	6878      	ldr	r0, [r7, #4]
 800b9ac:	f000 fa2f 	bl	800be0e <USBD_CtlError>
            err++;
 800b9b0:	7afb      	ldrb	r3, [r7, #11]
 800b9b2:	3301      	adds	r3, #1
 800b9b4:	72fb      	strb	r3, [r7, #11]
          break;
 800b9b6:	e021      	b.n	800b9fc <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b9be:	699b      	ldr	r3, [r3, #24]
 800b9c0:	2b00      	cmp	r3, #0
 800b9c2:	d00b      	beq.n	800b9dc <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b9ca:	699b      	ldr	r3, [r3, #24]
 800b9cc:	687a      	ldr	r2, [r7, #4]
 800b9ce:	7c12      	ldrb	r2, [r2, #16]
 800b9d0:	f107 0108 	add.w	r1, r7, #8
 800b9d4:	4610      	mov	r0, r2
 800b9d6:	4798      	blx	r3
 800b9d8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b9da:	e00f      	b.n	800b9fc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b9dc:	6839      	ldr	r1, [r7, #0]
 800b9de:	6878      	ldr	r0, [r7, #4]
 800b9e0:	f000 fa15 	bl	800be0e <USBD_CtlError>
            err++;
 800b9e4:	7afb      	ldrb	r3, [r7, #11]
 800b9e6:	3301      	adds	r3, #1
 800b9e8:	72fb      	strb	r3, [r7, #11]
          break;
 800b9ea:	e007      	b.n	800b9fc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 800b9ec:	6839      	ldr	r1, [r7, #0]
 800b9ee:	6878      	ldr	r0, [r7, #4]
 800b9f0:	f000 fa0d 	bl	800be0e <USBD_CtlError>
          err++;
 800b9f4:	7afb      	ldrb	r3, [r7, #11]
 800b9f6:	3301      	adds	r3, #1
 800b9f8:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 800b9fa:	e038      	b.n	800ba6e <USBD_GetDescriptor+0x286>
 800b9fc:	e037      	b.n	800ba6e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b9fe:	687b      	ldr	r3, [r7, #4]
 800ba00:	7c1b      	ldrb	r3, [r3, #16]
 800ba02:	2b00      	cmp	r3, #0
 800ba04:	d109      	bne.n	800ba1a <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800ba06:	687b      	ldr	r3, [r7, #4]
 800ba08:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ba0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ba0e:	f107 0208 	add.w	r2, r7, #8
 800ba12:	4610      	mov	r0, r2
 800ba14:	4798      	blx	r3
 800ba16:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ba18:	e029      	b.n	800ba6e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800ba1a:	6839      	ldr	r1, [r7, #0]
 800ba1c:	6878      	ldr	r0, [r7, #4]
 800ba1e:	f000 f9f6 	bl	800be0e <USBD_CtlError>
        err++;
 800ba22:	7afb      	ldrb	r3, [r7, #11]
 800ba24:	3301      	adds	r3, #1
 800ba26:	72fb      	strb	r3, [r7, #11]
      break;
 800ba28:	e021      	b.n	800ba6e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ba2a:	687b      	ldr	r3, [r7, #4]
 800ba2c:	7c1b      	ldrb	r3, [r3, #16]
 800ba2e:	2b00      	cmp	r3, #0
 800ba30:	d10d      	bne.n	800ba4e <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800ba32:	687b      	ldr	r3, [r7, #4]
 800ba34:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ba38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ba3a:	f107 0208 	add.w	r2, r7, #8
 800ba3e:	4610      	mov	r0, r2
 800ba40:	4798      	blx	r3
 800ba42:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800ba44:	68fb      	ldr	r3, [r7, #12]
 800ba46:	3301      	adds	r3, #1
 800ba48:	2207      	movs	r2, #7
 800ba4a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ba4c:	e00f      	b.n	800ba6e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800ba4e:	6839      	ldr	r1, [r7, #0]
 800ba50:	6878      	ldr	r0, [r7, #4]
 800ba52:	f000 f9dc 	bl	800be0e <USBD_CtlError>
        err++;
 800ba56:	7afb      	ldrb	r3, [r7, #11]
 800ba58:	3301      	adds	r3, #1
 800ba5a:	72fb      	strb	r3, [r7, #11]
      break;
 800ba5c:	e007      	b.n	800ba6e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800ba5e:	6839      	ldr	r1, [r7, #0]
 800ba60:	6878      	ldr	r0, [r7, #4]
 800ba62:	f000 f9d4 	bl	800be0e <USBD_CtlError>
      err++;
 800ba66:	7afb      	ldrb	r3, [r7, #11]
 800ba68:	3301      	adds	r3, #1
 800ba6a:	72fb      	strb	r3, [r7, #11]
      break;
 800ba6c:	bf00      	nop
  }

  if (err != 0U)
 800ba6e:	7afb      	ldrb	r3, [r7, #11]
 800ba70:	2b00      	cmp	r3, #0
 800ba72:	d11c      	bne.n	800baae <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 800ba74:	893b      	ldrh	r3, [r7, #8]
 800ba76:	2b00      	cmp	r3, #0
 800ba78:	d011      	beq.n	800ba9e <USBD_GetDescriptor+0x2b6>
 800ba7a:	683b      	ldr	r3, [r7, #0]
 800ba7c:	88db      	ldrh	r3, [r3, #6]
 800ba7e:	2b00      	cmp	r3, #0
 800ba80:	d00d      	beq.n	800ba9e <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 800ba82:	683b      	ldr	r3, [r7, #0]
 800ba84:	88da      	ldrh	r2, [r3, #6]
 800ba86:	893b      	ldrh	r3, [r7, #8]
 800ba88:	4293      	cmp	r3, r2
 800ba8a:	bf28      	it	cs
 800ba8c:	4613      	movcs	r3, r2
 800ba8e:	b29b      	uxth	r3, r3
 800ba90:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800ba92:	893b      	ldrh	r3, [r7, #8]
 800ba94:	461a      	mov	r2, r3
 800ba96:	68f9      	ldr	r1, [r7, #12]
 800ba98:	6878      	ldr	r0, [r7, #4]
 800ba9a:	f000 fa22 	bl	800bee2 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800ba9e:	683b      	ldr	r3, [r7, #0]
 800baa0:	88db      	ldrh	r3, [r3, #6]
 800baa2:	2b00      	cmp	r3, #0
 800baa4:	d104      	bne.n	800bab0 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 800baa6:	6878      	ldr	r0, [r7, #4]
 800baa8:	f000 fa79 	bl	800bf9e <USBD_CtlSendStatus>
 800baac:	e000      	b.n	800bab0 <USBD_GetDescriptor+0x2c8>
    return;
 800baae:	bf00      	nop
    }
  }
}
 800bab0:	3710      	adds	r7, #16
 800bab2:	46bd      	mov	sp, r7
 800bab4:	bd80      	pop	{r7, pc}
 800bab6:	bf00      	nop

0800bab8 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800bab8:	b580      	push	{r7, lr}
 800baba:	b084      	sub	sp, #16
 800babc:	af00      	add	r7, sp, #0
 800babe:	6078      	str	r0, [r7, #4]
 800bac0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800bac2:	683b      	ldr	r3, [r7, #0]
 800bac4:	889b      	ldrh	r3, [r3, #4]
 800bac6:	2b00      	cmp	r3, #0
 800bac8:	d130      	bne.n	800bb2c <USBD_SetAddress+0x74>
 800baca:	683b      	ldr	r3, [r7, #0]
 800bacc:	88db      	ldrh	r3, [r3, #6]
 800bace:	2b00      	cmp	r3, #0
 800bad0:	d12c      	bne.n	800bb2c <USBD_SetAddress+0x74>
 800bad2:	683b      	ldr	r3, [r7, #0]
 800bad4:	885b      	ldrh	r3, [r3, #2]
 800bad6:	2b7f      	cmp	r3, #127	; 0x7f
 800bad8:	d828      	bhi.n	800bb2c <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800bada:	683b      	ldr	r3, [r7, #0]
 800badc:	885b      	ldrh	r3, [r3, #2]
 800bade:	b2db      	uxtb	r3, r3
 800bae0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bae4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bae6:	687b      	ldr	r3, [r7, #4]
 800bae8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800baec:	2b03      	cmp	r3, #3
 800baee:	d104      	bne.n	800bafa <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800baf0:	6839      	ldr	r1, [r7, #0]
 800baf2:	6878      	ldr	r0, [r7, #4]
 800baf4:	f000 f98b 	bl	800be0e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800baf8:	e01d      	b.n	800bb36 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800bafa:	687b      	ldr	r3, [r7, #4]
 800bafc:	7bfa      	ldrb	r2, [r7, #15]
 800bafe:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800bb02:	7bfb      	ldrb	r3, [r7, #15]
 800bb04:	4619      	mov	r1, r3
 800bb06:	6878      	ldr	r0, [r7, #4]
 800bb08:	f000 fecf 	bl	800c8aa <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800bb0c:	6878      	ldr	r0, [r7, #4]
 800bb0e:	f000 fa46 	bl	800bf9e <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800bb12:	7bfb      	ldrb	r3, [r7, #15]
 800bb14:	2b00      	cmp	r3, #0
 800bb16:	d004      	beq.n	800bb22 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800bb18:	687b      	ldr	r3, [r7, #4]
 800bb1a:	2202      	movs	r2, #2
 800bb1c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bb20:	e009      	b.n	800bb36 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800bb22:	687b      	ldr	r3, [r7, #4]
 800bb24:	2201      	movs	r2, #1
 800bb26:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bb2a:	e004      	b.n	800bb36 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800bb2c:	6839      	ldr	r1, [r7, #0]
 800bb2e:	6878      	ldr	r0, [r7, #4]
 800bb30:	f000 f96d 	bl	800be0e <USBD_CtlError>
  }
}
 800bb34:	bf00      	nop
 800bb36:	bf00      	nop
 800bb38:	3710      	adds	r7, #16
 800bb3a:	46bd      	mov	sp, r7
 800bb3c:	bd80      	pop	{r7, pc}
	...

0800bb40 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bb40:	b580      	push	{r7, lr}
 800bb42:	b082      	sub	sp, #8
 800bb44:	af00      	add	r7, sp, #0
 800bb46:	6078      	str	r0, [r7, #4]
 800bb48:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800bb4a:	683b      	ldr	r3, [r7, #0]
 800bb4c:	885b      	ldrh	r3, [r3, #2]
 800bb4e:	b2da      	uxtb	r2, r3
 800bb50:	4b41      	ldr	r3, [pc, #260]	; (800bc58 <USBD_SetConfig+0x118>)
 800bb52:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800bb54:	4b40      	ldr	r3, [pc, #256]	; (800bc58 <USBD_SetConfig+0x118>)
 800bb56:	781b      	ldrb	r3, [r3, #0]
 800bb58:	2b01      	cmp	r3, #1
 800bb5a:	d904      	bls.n	800bb66 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 800bb5c:	6839      	ldr	r1, [r7, #0]
 800bb5e:	6878      	ldr	r0, [r7, #4]
 800bb60:	f000 f955 	bl	800be0e <USBD_CtlError>
 800bb64:	e075      	b.n	800bc52 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800bb66:	687b      	ldr	r3, [r7, #4]
 800bb68:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bb6c:	2b02      	cmp	r3, #2
 800bb6e:	d002      	beq.n	800bb76 <USBD_SetConfig+0x36>
 800bb70:	2b03      	cmp	r3, #3
 800bb72:	d023      	beq.n	800bbbc <USBD_SetConfig+0x7c>
 800bb74:	e062      	b.n	800bc3c <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800bb76:	4b38      	ldr	r3, [pc, #224]	; (800bc58 <USBD_SetConfig+0x118>)
 800bb78:	781b      	ldrb	r3, [r3, #0]
 800bb7a:	2b00      	cmp	r3, #0
 800bb7c:	d01a      	beq.n	800bbb4 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 800bb7e:	4b36      	ldr	r3, [pc, #216]	; (800bc58 <USBD_SetConfig+0x118>)
 800bb80:	781b      	ldrb	r3, [r3, #0]
 800bb82:	461a      	mov	r2, r3
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	2203      	movs	r2, #3
 800bb8c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800bb90:	4b31      	ldr	r3, [pc, #196]	; (800bc58 <USBD_SetConfig+0x118>)
 800bb92:	781b      	ldrb	r3, [r3, #0]
 800bb94:	4619      	mov	r1, r3
 800bb96:	6878      	ldr	r0, [r7, #4]
 800bb98:	f7ff f9af 	bl	800aefa <USBD_SetClassConfig>
 800bb9c:	4603      	mov	r3, r0
 800bb9e:	2b02      	cmp	r3, #2
 800bba0:	d104      	bne.n	800bbac <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800bba2:	6839      	ldr	r1, [r7, #0]
 800bba4:	6878      	ldr	r0, [r7, #4]
 800bba6:	f000 f932 	bl	800be0e <USBD_CtlError>
            return;
 800bbaa:	e052      	b.n	800bc52 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 800bbac:	6878      	ldr	r0, [r7, #4]
 800bbae:	f000 f9f6 	bl	800bf9e <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800bbb2:	e04e      	b.n	800bc52 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800bbb4:	6878      	ldr	r0, [r7, #4]
 800bbb6:	f000 f9f2 	bl	800bf9e <USBD_CtlSendStatus>
        break;
 800bbba:	e04a      	b.n	800bc52 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 800bbbc:	4b26      	ldr	r3, [pc, #152]	; (800bc58 <USBD_SetConfig+0x118>)
 800bbbe:	781b      	ldrb	r3, [r3, #0]
 800bbc0:	2b00      	cmp	r3, #0
 800bbc2:	d112      	bne.n	800bbea <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800bbc4:	687b      	ldr	r3, [r7, #4]
 800bbc6:	2202      	movs	r2, #2
 800bbc8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 800bbcc:	4b22      	ldr	r3, [pc, #136]	; (800bc58 <USBD_SetConfig+0x118>)
 800bbce:	781b      	ldrb	r3, [r3, #0]
 800bbd0:	461a      	mov	r2, r3
 800bbd2:	687b      	ldr	r3, [r7, #4]
 800bbd4:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800bbd6:	4b20      	ldr	r3, [pc, #128]	; (800bc58 <USBD_SetConfig+0x118>)
 800bbd8:	781b      	ldrb	r3, [r3, #0]
 800bbda:	4619      	mov	r1, r3
 800bbdc:	6878      	ldr	r0, [r7, #4]
 800bbde:	f7ff f9ab 	bl	800af38 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800bbe2:	6878      	ldr	r0, [r7, #4]
 800bbe4:	f000 f9db 	bl	800bf9e <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800bbe8:	e033      	b.n	800bc52 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 800bbea:	4b1b      	ldr	r3, [pc, #108]	; (800bc58 <USBD_SetConfig+0x118>)
 800bbec:	781b      	ldrb	r3, [r3, #0]
 800bbee:	461a      	mov	r2, r3
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	685b      	ldr	r3, [r3, #4]
 800bbf4:	429a      	cmp	r2, r3
 800bbf6:	d01d      	beq.n	800bc34 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800bbf8:	687b      	ldr	r3, [r7, #4]
 800bbfa:	685b      	ldr	r3, [r3, #4]
 800bbfc:	b2db      	uxtb	r3, r3
 800bbfe:	4619      	mov	r1, r3
 800bc00:	6878      	ldr	r0, [r7, #4]
 800bc02:	f7ff f999 	bl	800af38 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800bc06:	4b14      	ldr	r3, [pc, #80]	; (800bc58 <USBD_SetConfig+0x118>)
 800bc08:	781b      	ldrb	r3, [r3, #0]
 800bc0a:	461a      	mov	r2, r3
 800bc0c:	687b      	ldr	r3, [r7, #4]
 800bc0e:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800bc10:	4b11      	ldr	r3, [pc, #68]	; (800bc58 <USBD_SetConfig+0x118>)
 800bc12:	781b      	ldrb	r3, [r3, #0]
 800bc14:	4619      	mov	r1, r3
 800bc16:	6878      	ldr	r0, [r7, #4]
 800bc18:	f7ff f96f 	bl	800aefa <USBD_SetClassConfig>
 800bc1c:	4603      	mov	r3, r0
 800bc1e:	2b02      	cmp	r3, #2
 800bc20:	d104      	bne.n	800bc2c <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 800bc22:	6839      	ldr	r1, [r7, #0]
 800bc24:	6878      	ldr	r0, [r7, #4]
 800bc26:	f000 f8f2 	bl	800be0e <USBD_CtlError>
            return;
 800bc2a:	e012      	b.n	800bc52 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800bc2c:	6878      	ldr	r0, [r7, #4]
 800bc2e:	f000 f9b6 	bl	800bf9e <USBD_CtlSendStatus>
        break;
 800bc32:	e00e      	b.n	800bc52 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800bc34:	6878      	ldr	r0, [r7, #4]
 800bc36:	f000 f9b2 	bl	800bf9e <USBD_CtlSendStatus>
        break;
 800bc3a:	e00a      	b.n	800bc52 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 800bc3c:	6839      	ldr	r1, [r7, #0]
 800bc3e:	6878      	ldr	r0, [r7, #4]
 800bc40:	f000 f8e5 	bl	800be0e <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 800bc44:	4b04      	ldr	r3, [pc, #16]	; (800bc58 <USBD_SetConfig+0x118>)
 800bc46:	781b      	ldrb	r3, [r3, #0]
 800bc48:	4619      	mov	r1, r3
 800bc4a:	6878      	ldr	r0, [r7, #4]
 800bc4c:	f7ff f974 	bl	800af38 <USBD_ClrClassConfig>
        break;
 800bc50:	bf00      	nop
    }
  }
}
 800bc52:	3708      	adds	r7, #8
 800bc54:	46bd      	mov	sp, r7
 800bc56:	bd80      	pop	{r7, pc}
 800bc58:	20000834 	.word	0x20000834

0800bc5c <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bc5c:	b580      	push	{r7, lr}
 800bc5e:	b082      	sub	sp, #8
 800bc60:	af00      	add	r7, sp, #0
 800bc62:	6078      	str	r0, [r7, #4]
 800bc64:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800bc66:	683b      	ldr	r3, [r7, #0]
 800bc68:	88db      	ldrh	r3, [r3, #6]
 800bc6a:	2b01      	cmp	r3, #1
 800bc6c:	d004      	beq.n	800bc78 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800bc6e:	6839      	ldr	r1, [r7, #0]
 800bc70:	6878      	ldr	r0, [r7, #4]
 800bc72:	f000 f8cc 	bl	800be0e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800bc76:	e022      	b.n	800bcbe <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bc7e:	2b02      	cmp	r3, #2
 800bc80:	dc02      	bgt.n	800bc88 <USBD_GetConfig+0x2c>
 800bc82:	2b00      	cmp	r3, #0
 800bc84:	dc03      	bgt.n	800bc8e <USBD_GetConfig+0x32>
 800bc86:	e015      	b.n	800bcb4 <USBD_GetConfig+0x58>
 800bc88:	2b03      	cmp	r3, #3
 800bc8a:	d00b      	beq.n	800bca4 <USBD_GetConfig+0x48>
 800bc8c:	e012      	b.n	800bcb4 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 800bc8e:	687b      	ldr	r3, [r7, #4]
 800bc90:	2200      	movs	r2, #0
 800bc92:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800bc94:	687b      	ldr	r3, [r7, #4]
 800bc96:	3308      	adds	r3, #8
 800bc98:	2201      	movs	r2, #1
 800bc9a:	4619      	mov	r1, r3
 800bc9c:	6878      	ldr	r0, [r7, #4]
 800bc9e:	f000 f920 	bl	800bee2 <USBD_CtlSendData>
        break;
 800bca2:	e00c      	b.n	800bcbe <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800bca4:	687b      	ldr	r3, [r7, #4]
 800bca6:	3304      	adds	r3, #4
 800bca8:	2201      	movs	r2, #1
 800bcaa:	4619      	mov	r1, r3
 800bcac:	6878      	ldr	r0, [r7, #4]
 800bcae:	f000 f918 	bl	800bee2 <USBD_CtlSendData>
        break;
 800bcb2:	e004      	b.n	800bcbe <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 800bcb4:	6839      	ldr	r1, [r7, #0]
 800bcb6:	6878      	ldr	r0, [r7, #4]
 800bcb8:	f000 f8a9 	bl	800be0e <USBD_CtlError>
        break;
 800bcbc:	bf00      	nop
}
 800bcbe:	bf00      	nop
 800bcc0:	3708      	adds	r7, #8
 800bcc2:	46bd      	mov	sp, r7
 800bcc4:	bd80      	pop	{r7, pc}

0800bcc6 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bcc6:	b580      	push	{r7, lr}
 800bcc8:	b082      	sub	sp, #8
 800bcca:	af00      	add	r7, sp, #0
 800bccc:	6078      	str	r0, [r7, #4]
 800bcce:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bcd6:	3b01      	subs	r3, #1
 800bcd8:	2b02      	cmp	r3, #2
 800bcda:	d81e      	bhi.n	800bd1a <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800bcdc:	683b      	ldr	r3, [r7, #0]
 800bcde:	88db      	ldrh	r3, [r3, #6]
 800bce0:	2b02      	cmp	r3, #2
 800bce2:	d004      	beq.n	800bcee <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 800bce4:	6839      	ldr	r1, [r7, #0]
 800bce6:	6878      	ldr	r0, [r7, #4]
 800bce8:	f000 f891 	bl	800be0e <USBD_CtlError>
        break;
 800bcec:	e01a      	b.n	800bd24 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800bcee:	687b      	ldr	r3, [r7, #4]
 800bcf0:	2201      	movs	r2, #1
 800bcf2:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800bcf4:	687b      	ldr	r3, [r7, #4]
 800bcf6:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800bcfa:	2b00      	cmp	r3, #0
 800bcfc:	d005      	beq.n	800bd0a <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800bcfe:	687b      	ldr	r3, [r7, #4]
 800bd00:	68db      	ldr	r3, [r3, #12]
 800bd02:	f043 0202 	orr.w	r2, r3, #2
 800bd06:	687b      	ldr	r3, [r7, #4]
 800bd08:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800bd0a:	687b      	ldr	r3, [r7, #4]
 800bd0c:	330c      	adds	r3, #12
 800bd0e:	2202      	movs	r2, #2
 800bd10:	4619      	mov	r1, r3
 800bd12:	6878      	ldr	r0, [r7, #4]
 800bd14:	f000 f8e5 	bl	800bee2 <USBD_CtlSendData>
      break;
 800bd18:	e004      	b.n	800bd24 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 800bd1a:	6839      	ldr	r1, [r7, #0]
 800bd1c:	6878      	ldr	r0, [r7, #4]
 800bd1e:	f000 f876 	bl	800be0e <USBD_CtlError>
      break;
 800bd22:	bf00      	nop
  }
}
 800bd24:	bf00      	nop
 800bd26:	3708      	adds	r7, #8
 800bd28:	46bd      	mov	sp, r7
 800bd2a:	bd80      	pop	{r7, pc}

0800bd2c <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800bd2c:	b580      	push	{r7, lr}
 800bd2e:	b082      	sub	sp, #8
 800bd30:	af00      	add	r7, sp, #0
 800bd32:	6078      	str	r0, [r7, #4]
 800bd34:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800bd36:	683b      	ldr	r3, [r7, #0]
 800bd38:	885b      	ldrh	r3, [r3, #2]
 800bd3a:	2b01      	cmp	r3, #1
 800bd3c:	d106      	bne.n	800bd4c <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800bd3e:	687b      	ldr	r3, [r7, #4]
 800bd40:	2201      	movs	r2, #1
 800bd42:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 800bd46:	6878      	ldr	r0, [r7, #4]
 800bd48:	f000 f929 	bl	800bf9e <USBD_CtlSendStatus>
  }
}
 800bd4c:	bf00      	nop
 800bd4e:	3708      	adds	r7, #8
 800bd50:	46bd      	mov	sp, r7
 800bd52:	bd80      	pop	{r7, pc}

0800bd54 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800bd54:	b580      	push	{r7, lr}
 800bd56:	b082      	sub	sp, #8
 800bd58:	af00      	add	r7, sp, #0
 800bd5a:	6078      	str	r0, [r7, #4]
 800bd5c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800bd5e:	687b      	ldr	r3, [r7, #4]
 800bd60:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bd64:	3b01      	subs	r3, #1
 800bd66:	2b02      	cmp	r3, #2
 800bd68:	d80b      	bhi.n	800bd82 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800bd6a:	683b      	ldr	r3, [r7, #0]
 800bd6c:	885b      	ldrh	r3, [r3, #2]
 800bd6e:	2b01      	cmp	r3, #1
 800bd70:	d10c      	bne.n	800bd8c <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800bd72:	687b      	ldr	r3, [r7, #4]
 800bd74:	2200      	movs	r2, #0
 800bd76:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 800bd7a:	6878      	ldr	r0, [r7, #4]
 800bd7c:	f000 f90f 	bl	800bf9e <USBD_CtlSendStatus>
      }
      break;
 800bd80:	e004      	b.n	800bd8c <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800bd82:	6839      	ldr	r1, [r7, #0]
 800bd84:	6878      	ldr	r0, [r7, #4]
 800bd86:	f000 f842 	bl	800be0e <USBD_CtlError>
      break;
 800bd8a:	e000      	b.n	800bd8e <USBD_ClrFeature+0x3a>
      break;
 800bd8c:	bf00      	nop
  }
}
 800bd8e:	bf00      	nop
 800bd90:	3708      	adds	r7, #8
 800bd92:	46bd      	mov	sp, r7
 800bd94:	bd80      	pop	{r7, pc}

0800bd96 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800bd96:	b480      	push	{r7}
 800bd98:	b083      	sub	sp, #12
 800bd9a:	af00      	add	r7, sp, #0
 800bd9c:	6078      	str	r0, [r7, #4]
 800bd9e:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800bda0:	683b      	ldr	r3, [r7, #0]
 800bda2:	781a      	ldrb	r2, [r3, #0]
 800bda4:	687b      	ldr	r3, [r7, #4]
 800bda6:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800bda8:	683b      	ldr	r3, [r7, #0]
 800bdaa:	785a      	ldrb	r2, [r3, #1]
 800bdac:	687b      	ldr	r3, [r7, #4]
 800bdae:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800bdb0:	683b      	ldr	r3, [r7, #0]
 800bdb2:	3302      	adds	r3, #2
 800bdb4:	781b      	ldrb	r3, [r3, #0]
 800bdb6:	b29a      	uxth	r2, r3
 800bdb8:	683b      	ldr	r3, [r7, #0]
 800bdba:	3303      	adds	r3, #3
 800bdbc:	781b      	ldrb	r3, [r3, #0]
 800bdbe:	b29b      	uxth	r3, r3
 800bdc0:	021b      	lsls	r3, r3, #8
 800bdc2:	b29b      	uxth	r3, r3
 800bdc4:	4413      	add	r3, r2
 800bdc6:	b29a      	uxth	r2, r3
 800bdc8:	687b      	ldr	r3, [r7, #4]
 800bdca:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800bdcc:	683b      	ldr	r3, [r7, #0]
 800bdce:	3304      	adds	r3, #4
 800bdd0:	781b      	ldrb	r3, [r3, #0]
 800bdd2:	b29a      	uxth	r2, r3
 800bdd4:	683b      	ldr	r3, [r7, #0]
 800bdd6:	3305      	adds	r3, #5
 800bdd8:	781b      	ldrb	r3, [r3, #0]
 800bdda:	b29b      	uxth	r3, r3
 800bddc:	021b      	lsls	r3, r3, #8
 800bdde:	b29b      	uxth	r3, r3
 800bde0:	4413      	add	r3, r2
 800bde2:	b29a      	uxth	r2, r3
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800bde8:	683b      	ldr	r3, [r7, #0]
 800bdea:	3306      	adds	r3, #6
 800bdec:	781b      	ldrb	r3, [r3, #0]
 800bdee:	b29a      	uxth	r2, r3
 800bdf0:	683b      	ldr	r3, [r7, #0]
 800bdf2:	3307      	adds	r3, #7
 800bdf4:	781b      	ldrb	r3, [r3, #0]
 800bdf6:	b29b      	uxth	r3, r3
 800bdf8:	021b      	lsls	r3, r3, #8
 800bdfa:	b29b      	uxth	r3, r3
 800bdfc:	4413      	add	r3, r2
 800bdfe:	b29a      	uxth	r2, r3
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	80da      	strh	r2, [r3, #6]

}
 800be04:	bf00      	nop
 800be06:	370c      	adds	r7, #12
 800be08:	46bd      	mov	sp, r7
 800be0a:	bc80      	pop	{r7}
 800be0c:	4770      	bx	lr

0800be0e <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800be0e:	b580      	push	{r7, lr}
 800be10:	b082      	sub	sp, #8
 800be12:	af00      	add	r7, sp, #0
 800be14:	6078      	str	r0, [r7, #4]
 800be16:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800be18:	2180      	movs	r1, #128	; 0x80
 800be1a:	6878      	ldr	r0, [r7, #4]
 800be1c:	f000 fcdc 	bl	800c7d8 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800be20:	2100      	movs	r1, #0
 800be22:	6878      	ldr	r0, [r7, #4]
 800be24:	f000 fcd8 	bl	800c7d8 <USBD_LL_StallEP>
}
 800be28:	bf00      	nop
 800be2a:	3708      	adds	r7, #8
 800be2c:	46bd      	mov	sp, r7
 800be2e:	bd80      	pop	{r7, pc}

0800be30 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800be30:	b580      	push	{r7, lr}
 800be32:	b086      	sub	sp, #24
 800be34:	af00      	add	r7, sp, #0
 800be36:	60f8      	str	r0, [r7, #12]
 800be38:	60b9      	str	r1, [r7, #8]
 800be3a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800be3c:	2300      	movs	r3, #0
 800be3e:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800be40:	68fb      	ldr	r3, [r7, #12]
 800be42:	2b00      	cmp	r3, #0
 800be44:	d032      	beq.n	800beac <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800be46:	68f8      	ldr	r0, [r7, #12]
 800be48:	f000 f834 	bl	800beb4 <USBD_GetLen>
 800be4c:	4603      	mov	r3, r0
 800be4e:	3301      	adds	r3, #1
 800be50:	b29b      	uxth	r3, r3
 800be52:	005b      	lsls	r3, r3, #1
 800be54:	b29a      	uxth	r2, r3
 800be56:	687b      	ldr	r3, [r7, #4]
 800be58:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800be5a:	7dfb      	ldrb	r3, [r7, #23]
 800be5c:	1c5a      	adds	r2, r3, #1
 800be5e:	75fa      	strb	r2, [r7, #23]
 800be60:	461a      	mov	r2, r3
 800be62:	68bb      	ldr	r3, [r7, #8]
 800be64:	4413      	add	r3, r2
 800be66:	687a      	ldr	r2, [r7, #4]
 800be68:	7812      	ldrb	r2, [r2, #0]
 800be6a:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800be6c:	7dfb      	ldrb	r3, [r7, #23]
 800be6e:	1c5a      	adds	r2, r3, #1
 800be70:	75fa      	strb	r2, [r7, #23]
 800be72:	461a      	mov	r2, r3
 800be74:	68bb      	ldr	r3, [r7, #8]
 800be76:	4413      	add	r3, r2
 800be78:	2203      	movs	r2, #3
 800be7a:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800be7c:	e012      	b.n	800bea4 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800be7e:	68fb      	ldr	r3, [r7, #12]
 800be80:	1c5a      	adds	r2, r3, #1
 800be82:	60fa      	str	r2, [r7, #12]
 800be84:	7dfa      	ldrb	r2, [r7, #23]
 800be86:	1c51      	adds	r1, r2, #1
 800be88:	75f9      	strb	r1, [r7, #23]
 800be8a:	4611      	mov	r1, r2
 800be8c:	68ba      	ldr	r2, [r7, #8]
 800be8e:	440a      	add	r2, r1
 800be90:	781b      	ldrb	r3, [r3, #0]
 800be92:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800be94:	7dfb      	ldrb	r3, [r7, #23]
 800be96:	1c5a      	adds	r2, r3, #1
 800be98:	75fa      	strb	r2, [r7, #23]
 800be9a:	461a      	mov	r2, r3
 800be9c:	68bb      	ldr	r3, [r7, #8]
 800be9e:	4413      	add	r3, r2
 800bea0:	2200      	movs	r2, #0
 800bea2:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800bea4:	68fb      	ldr	r3, [r7, #12]
 800bea6:	781b      	ldrb	r3, [r3, #0]
 800bea8:	2b00      	cmp	r3, #0
 800beaa:	d1e8      	bne.n	800be7e <USBD_GetString+0x4e>
    }
  }
}
 800beac:	bf00      	nop
 800beae:	3718      	adds	r7, #24
 800beb0:	46bd      	mov	sp, r7
 800beb2:	bd80      	pop	{r7, pc}

0800beb4 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800beb4:	b480      	push	{r7}
 800beb6:	b085      	sub	sp, #20
 800beb8:	af00      	add	r7, sp, #0
 800beba:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800bebc:	2300      	movs	r3, #0
 800bebe:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 800bec0:	e005      	b.n	800bece <USBD_GetLen+0x1a>
  {
    len++;
 800bec2:	7bfb      	ldrb	r3, [r7, #15]
 800bec4:	3301      	adds	r3, #1
 800bec6:	73fb      	strb	r3, [r7, #15]
    buf++;
 800bec8:	687b      	ldr	r3, [r7, #4]
 800beca:	3301      	adds	r3, #1
 800becc:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800bece:	687b      	ldr	r3, [r7, #4]
 800bed0:	781b      	ldrb	r3, [r3, #0]
 800bed2:	2b00      	cmp	r3, #0
 800bed4:	d1f5      	bne.n	800bec2 <USBD_GetLen+0xe>
  }

  return len;
 800bed6:	7bfb      	ldrb	r3, [r7, #15]
}
 800bed8:	4618      	mov	r0, r3
 800beda:	3714      	adds	r7, #20
 800bedc:	46bd      	mov	sp, r7
 800bede:	bc80      	pop	{r7}
 800bee0:	4770      	bx	lr

0800bee2 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800bee2:	b580      	push	{r7, lr}
 800bee4:	b084      	sub	sp, #16
 800bee6:	af00      	add	r7, sp, #0
 800bee8:	60f8      	str	r0, [r7, #12]
 800beea:	60b9      	str	r1, [r7, #8]
 800beec:	4613      	mov	r3, r2
 800beee:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800bef0:	68fb      	ldr	r3, [r7, #12]
 800bef2:	2202      	movs	r2, #2
 800bef4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800bef8:	88fa      	ldrh	r2, [r7, #6]
 800befa:	68fb      	ldr	r3, [r7, #12]
 800befc:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800befe:	88fa      	ldrh	r2, [r7, #6]
 800bf00:	68fb      	ldr	r3, [r7, #12]
 800bf02:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800bf04:	88fb      	ldrh	r3, [r7, #6]
 800bf06:	68ba      	ldr	r2, [r7, #8]
 800bf08:	2100      	movs	r1, #0
 800bf0a:	68f8      	ldr	r0, [r7, #12]
 800bf0c:	f000 fcec 	bl	800c8e8 <USBD_LL_Transmit>

  return USBD_OK;
 800bf10:	2300      	movs	r3, #0
}
 800bf12:	4618      	mov	r0, r3
 800bf14:	3710      	adds	r7, #16
 800bf16:	46bd      	mov	sp, r7
 800bf18:	bd80      	pop	{r7, pc}

0800bf1a <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800bf1a:	b580      	push	{r7, lr}
 800bf1c:	b084      	sub	sp, #16
 800bf1e:	af00      	add	r7, sp, #0
 800bf20:	60f8      	str	r0, [r7, #12]
 800bf22:	60b9      	str	r1, [r7, #8]
 800bf24:	4613      	mov	r3, r2
 800bf26:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800bf28:	88fb      	ldrh	r3, [r7, #6]
 800bf2a:	68ba      	ldr	r2, [r7, #8]
 800bf2c:	2100      	movs	r1, #0
 800bf2e:	68f8      	ldr	r0, [r7, #12]
 800bf30:	f000 fcda 	bl	800c8e8 <USBD_LL_Transmit>

  return USBD_OK;
 800bf34:	2300      	movs	r3, #0
}
 800bf36:	4618      	mov	r0, r3
 800bf38:	3710      	adds	r7, #16
 800bf3a:	46bd      	mov	sp, r7
 800bf3c:	bd80      	pop	{r7, pc}

0800bf3e <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800bf3e:	b580      	push	{r7, lr}
 800bf40:	b084      	sub	sp, #16
 800bf42:	af00      	add	r7, sp, #0
 800bf44:	60f8      	str	r0, [r7, #12]
 800bf46:	60b9      	str	r1, [r7, #8]
 800bf48:	4613      	mov	r3, r2
 800bf4a:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800bf4c:	68fb      	ldr	r3, [r7, #12]
 800bf4e:	2203      	movs	r2, #3
 800bf50:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800bf54:	88fa      	ldrh	r2, [r7, #6]
 800bf56:	68fb      	ldr	r3, [r7, #12]
 800bf58:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 800bf5c:	88fa      	ldrh	r2, [r7, #6]
 800bf5e:	68fb      	ldr	r3, [r7, #12]
 800bf60:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800bf64:	88fb      	ldrh	r3, [r7, #6]
 800bf66:	68ba      	ldr	r2, [r7, #8]
 800bf68:	2100      	movs	r1, #0
 800bf6a:	68f8      	ldr	r0, [r7, #12]
 800bf6c:	f000 fcdf 	bl	800c92e <USBD_LL_PrepareReceive>

  return USBD_OK;
 800bf70:	2300      	movs	r3, #0
}
 800bf72:	4618      	mov	r0, r3
 800bf74:	3710      	adds	r7, #16
 800bf76:	46bd      	mov	sp, r7
 800bf78:	bd80      	pop	{r7, pc}

0800bf7a <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800bf7a:	b580      	push	{r7, lr}
 800bf7c:	b084      	sub	sp, #16
 800bf7e:	af00      	add	r7, sp, #0
 800bf80:	60f8      	str	r0, [r7, #12]
 800bf82:	60b9      	str	r1, [r7, #8]
 800bf84:	4613      	mov	r3, r2
 800bf86:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800bf88:	88fb      	ldrh	r3, [r7, #6]
 800bf8a:	68ba      	ldr	r2, [r7, #8]
 800bf8c:	2100      	movs	r1, #0
 800bf8e:	68f8      	ldr	r0, [r7, #12]
 800bf90:	f000 fccd 	bl	800c92e <USBD_LL_PrepareReceive>

  return USBD_OK;
 800bf94:	2300      	movs	r3, #0
}
 800bf96:	4618      	mov	r0, r3
 800bf98:	3710      	adds	r7, #16
 800bf9a:	46bd      	mov	sp, r7
 800bf9c:	bd80      	pop	{r7, pc}

0800bf9e <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800bf9e:	b580      	push	{r7, lr}
 800bfa0:	b082      	sub	sp, #8
 800bfa2:	af00      	add	r7, sp, #0
 800bfa4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800bfa6:	687b      	ldr	r3, [r7, #4]
 800bfa8:	2204      	movs	r2, #4
 800bfaa:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800bfae:	2300      	movs	r3, #0
 800bfb0:	2200      	movs	r2, #0
 800bfb2:	2100      	movs	r1, #0
 800bfb4:	6878      	ldr	r0, [r7, #4]
 800bfb6:	f000 fc97 	bl	800c8e8 <USBD_LL_Transmit>

  return USBD_OK;
 800bfba:	2300      	movs	r3, #0
}
 800bfbc:	4618      	mov	r0, r3
 800bfbe:	3708      	adds	r7, #8
 800bfc0:	46bd      	mov	sp, r7
 800bfc2:	bd80      	pop	{r7, pc}

0800bfc4 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800bfc4:	b580      	push	{r7, lr}
 800bfc6:	b082      	sub	sp, #8
 800bfc8:	af00      	add	r7, sp, #0
 800bfca:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800bfcc:	687b      	ldr	r3, [r7, #4]
 800bfce:	2205      	movs	r2, #5
 800bfd0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800bfd4:	2300      	movs	r3, #0
 800bfd6:	2200      	movs	r2, #0
 800bfd8:	2100      	movs	r1, #0
 800bfda:	6878      	ldr	r0, [r7, #4]
 800bfdc:	f000 fca7 	bl	800c92e <USBD_LL_PrepareReceive>

  return USBD_OK;
 800bfe0:	2300      	movs	r3, #0
}
 800bfe2:	4618      	mov	r0, r3
 800bfe4:	3708      	adds	r7, #8
 800bfe6:	46bd      	mov	sp, r7
 800bfe8:	bd80      	pop	{r7, pc}
	...

0800bfec <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800bfec:	b580      	push	{r7, lr}
 800bfee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800bff0:	2200      	movs	r2, #0
 800bff2:	4912      	ldr	r1, [pc, #72]	; (800c03c <MX_USB_DEVICE_Init+0x50>)
 800bff4:	4812      	ldr	r0, [pc, #72]	; (800c040 <MX_USB_DEVICE_Init+0x54>)
 800bff6:	f7fe ff26 	bl	800ae46 <USBD_Init>
 800bffa:	4603      	mov	r3, r0
 800bffc:	2b00      	cmp	r3, #0
 800bffe:	d001      	beq.n	800c004 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800c000:	f7f7 faa6 	bl	8003550 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800c004:	490f      	ldr	r1, [pc, #60]	; (800c044 <MX_USB_DEVICE_Init+0x58>)
 800c006:	480e      	ldr	r0, [pc, #56]	; (800c040 <MX_USB_DEVICE_Init+0x54>)
 800c008:	f7fe ff48 	bl	800ae9c <USBD_RegisterClass>
 800c00c:	4603      	mov	r3, r0
 800c00e:	2b00      	cmp	r3, #0
 800c010:	d001      	beq.n	800c016 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800c012:	f7f7 fa9d 	bl	8003550 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800c016:	490c      	ldr	r1, [pc, #48]	; (800c048 <MX_USB_DEVICE_Init+0x5c>)
 800c018:	4809      	ldr	r0, [pc, #36]	; (800c040 <MX_USB_DEVICE_Init+0x54>)
 800c01a:	f7fe fe79 	bl	800ad10 <USBD_CDC_RegisterInterface>
 800c01e:	4603      	mov	r3, r0
 800c020:	2b00      	cmp	r3, #0
 800c022:	d001      	beq.n	800c028 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800c024:	f7f7 fa94 	bl	8003550 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800c028:	4805      	ldr	r0, [pc, #20]	; (800c040 <MX_USB_DEVICE_Init+0x54>)
 800c02a:	f7fe ff50 	bl	800aece <USBD_Start>
 800c02e:	4603      	mov	r3, r0
 800c030:	2b00      	cmp	r3, #0
 800c032:	d001      	beq.n	800c038 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800c034:	f7f7 fa8c 	bl	8003550 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800c038:	bf00      	nop
 800c03a:	bd80      	pop	{r7, pc}
 800c03c:	20000138 	.word	0x20000138
 800c040:	20000844 	.word	0x20000844
 800c044:	2000001c 	.word	0x2000001c
 800c048:	20000120 	.word	0x20000120

0800c04c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800c04c:	b580      	push	{r7, lr}
 800c04e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800c050:	2200      	movs	r2, #0
 800c052:	4905      	ldr	r1, [pc, #20]	; (800c068 <CDC_Init_FS+0x1c>)
 800c054:	4805      	ldr	r0, [pc, #20]	; (800c06c <CDC_Init_FS+0x20>)
 800c056:	f7fe fe71 	bl	800ad3c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800c05a:	4905      	ldr	r1, [pc, #20]	; (800c070 <CDC_Init_FS+0x24>)
 800c05c:	4803      	ldr	r0, [pc, #12]	; (800c06c <CDC_Init_FS+0x20>)
 800c05e:	f7fe fe86 	bl	800ad6e <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800c062:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800c064:	4618      	mov	r0, r3
 800c066:	bd80      	pop	{r7, pc}
 800c068:	20001308 	.word	0x20001308
 800c06c:	20000844 	.word	0x20000844
 800c070:	20000b08 	.word	0x20000b08

0800c074 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800c074:	b480      	push	{r7}
 800c076:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800c078:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800c07a:	4618      	mov	r0, r3
 800c07c:	46bd      	mov	sp, r7
 800c07e:	bc80      	pop	{r7}
 800c080:	4770      	bx	lr
	...

0800c084 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800c084:	b480      	push	{r7}
 800c086:	b083      	sub	sp, #12
 800c088:	af00      	add	r7, sp, #0
 800c08a:	4603      	mov	r3, r0
 800c08c:	6039      	str	r1, [r7, #0]
 800c08e:	71fb      	strb	r3, [r7, #7]
 800c090:	4613      	mov	r3, r2
 800c092:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800c094:	79fb      	ldrb	r3, [r7, #7]
 800c096:	2b23      	cmp	r3, #35	; 0x23
 800c098:	d85c      	bhi.n	800c154 <CDC_Control_FS+0xd0>
 800c09a:	a201      	add	r2, pc, #4	; (adr r2, 800c0a0 <CDC_Control_FS+0x1c>)
 800c09c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c0a0:	0800c155 	.word	0x0800c155
 800c0a4:	0800c155 	.word	0x0800c155
 800c0a8:	0800c155 	.word	0x0800c155
 800c0ac:	0800c155 	.word	0x0800c155
 800c0b0:	0800c155 	.word	0x0800c155
 800c0b4:	0800c155 	.word	0x0800c155
 800c0b8:	0800c155 	.word	0x0800c155
 800c0bc:	0800c155 	.word	0x0800c155
 800c0c0:	0800c155 	.word	0x0800c155
 800c0c4:	0800c155 	.word	0x0800c155
 800c0c8:	0800c155 	.word	0x0800c155
 800c0cc:	0800c155 	.word	0x0800c155
 800c0d0:	0800c155 	.word	0x0800c155
 800c0d4:	0800c155 	.word	0x0800c155
 800c0d8:	0800c155 	.word	0x0800c155
 800c0dc:	0800c155 	.word	0x0800c155
 800c0e0:	0800c155 	.word	0x0800c155
 800c0e4:	0800c155 	.word	0x0800c155
 800c0e8:	0800c155 	.word	0x0800c155
 800c0ec:	0800c155 	.word	0x0800c155
 800c0f0:	0800c155 	.word	0x0800c155
 800c0f4:	0800c155 	.word	0x0800c155
 800c0f8:	0800c155 	.word	0x0800c155
 800c0fc:	0800c155 	.word	0x0800c155
 800c100:	0800c155 	.word	0x0800c155
 800c104:	0800c155 	.word	0x0800c155
 800c108:	0800c155 	.word	0x0800c155
 800c10c:	0800c155 	.word	0x0800c155
 800c110:	0800c155 	.word	0x0800c155
 800c114:	0800c155 	.word	0x0800c155
 800c118:	0800c155 	.word	0x0800c155
 800c11c:	0800c155 	.word	0x0800c155
 800c120:	0800c131 	.word	0x0800c131
 800c124:	0800c143 	.word	0x0800c143
 800c128:	0800c155 	.word	0x0800c155
 800c12c:	0800c155 	.word	0x0800c155
    static uint8_t lineCoding[7] // 115200bps, 1stop, no parity, 8bit

    = { 0x00, 0xC2, 0x01, 0x00, 0x00, 0x00, 0x08 };

    case CDC_SET_LINE_CODING:
      memcpy(lineCoding, pbuf, sizeof(lineCoding));
 800c130:	4b0c      	ldr	r3, [pc, #48]	; (800c164 <CDC_Control_FS+0xe0>)
 800c132:	683a      	ldr	r2, [r7, #0]
 800c134:	6810      	ldr	r0, [r2, #0]
 800c136:	6018      	str	r0, [r3, #0]
 800c138:	8891      	ldrh	r1, [r2, #4]
 800c13a:	7992      	ldrb	r2, [r2, #6]
 800c13c:	8099      	strh	r1, [r3, #4]
 800c13e:	719a      	strb	r2, [r3, #6]
    break;
 800c140:	e009      	b.n	800c156 <CDC_Control_FS+0xd2>

    case CDC_GET_LINE_CODING:
      memcpy(pbuf, lineCoding, sizeof(lineCoding));
 800c142:	683b      	ldr	r3, [r7, #0]
 800c144:	4a07      	ldr	r2, [pc, #28]	; (800c164 <CDC_Control_FS+0xe0>)
 800c146:	6810      	ldr	r0, [r2, #0]
 800c148:	6018      	str	r0, [r3, #0]
 800c14a:	8891      	ldrh	r1, [r2, #4]
 800c14c:	7992      	ldrb	r2, [r2, #6]
 800c14e:	8099      	strh	r1, [r3, #4]
 800c150:	719a      	strb	r2, [r3, #6]
    break;
 800c152:	e000      	b.n	800c156 <CDC_Control_FS+0xd2>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800c154:	bf00      	nop
  }

  return (USBD_OK);
 800c156:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800c158:	4618      	mov	r0, r3
 800c15a:	370c      	adds	r7, #12
 800c15c:	46bd      	mov	sp, r7
 800c15e:	bc80      	pop	{r7}
 800c160:	4770      	bx	lr
 800c162:	bf00      	nop
 800c164:	20000130 	.word	0x20000130

0800c168 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800c168:	b580      	push	{r7, lr}
 800c16a:	b082      	sub	sp, #8
 800c16c:	af00      	add	r7, sp, #0
 800c16e:	6078      	str	r0, [r7, #4]
 800c170:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800c172:	6879      	ldr	r1, [r7, #4]
 800c174:	4805      	ldr	r0, [pc, #20]	; (800c18c <CDC_Receive_FS+0x24>)
 800c176:	f7fe fdfa 	bl	800ad6e <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800c17a:	4804      	ldr	r0, [pc, #16]	; (800c18c <CDC_Receive_FS+0x24>)
 800c17c:	f7fe fe39 	bl	800adf2 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800c180:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800c182:	4618      	mov	r0, r3
 800c184:	3708      	adds	r7, #8
 800c186:	46bd      	mov	sp, r7
 800c188:	bd80      	pop	{r7, pc}
 800c18a:	bf00      	nop
 800c18c:	20000844 	.word	0x20000844

0800c190 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800c190:	b580      	push	{r7, lr}
 800c192:	b084      	sub	sp, #16
 800c194:	af00      	add	r7, sp, #0
 800c196:	6078      	str	r0, [r7, #4]
 800c198:	460b      	mov	r3, r1
 800c19a:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800c19c:	2300      	movs	r3, #0
 800c19e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800c1a0:	4b0d      	ldr	r3, [pc, #52]	; (800c1d8 <CDC_Transmit_FS+0x48>)
 800c1a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c1a6:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800c1a8:	68bb      	ldr	r3, [r7, #8]
 800c1aa:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800c1ae:	2b00      	cmp	r3, #0
 800c1b0:	d001      	beq.n	800c1b6 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800c1b2:	2301      	movs	r3, #1
 800c1b4:	e00b      	b.n	800c1ce <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800c1b6:	887b      	ldrh	r3, [r7, #2]
 800c1b8:	461a      	mov	r2, r3
 800c1ba:	6879      	ldr	r1, [r7, #4]
 800c1bc:	4806      	ldr	r0, [pc, #24]	; (800c1d8 <CDC_Transmit_FS+0x48>)
 800c1be:	f7fe fdbd 	bl	800ad3c <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800c1c2:	4805      	ldr	r0, [pc, #20]	; (800c1d8 <CDC_Transmit_FS+0x48>)
 800c1c4:	f7fe fde6 	bl	800ad94 <USBD_CDC_TransmitPacket>
 800c1c8:	4603      	mov	r3, r0
 800c1ca:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800c1cc:	7bfb      	ldrb	r3, [r7, #15]
}
 800c1ce:	4618      	mov	r0, r3
 800c1d0:	3710      	adds	r7, #16
 800c1d2:	46bd      	mov	sp, r7
 800c1d4:	bd80      	pop	{r7, pc}
 800c1d6:	bf00      	nop
 800c1d8:	20000844 	.word	0x20000844

0800c1dc <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c1dc:	b480      	push	{r7}
 800c1de:	b083      	sub	sp, #12
 800c1e0:	af00      	add	r7, sp, #0
 800c1e2:	4603      	mov	r3, r0
 800c1e4:	6039      	str	r1, [r7, #0]
 800c1e6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800c1e8:	683b      	ldr	r3, [r7, #0]
 800c1ea:	2212      	movs	r2, #18
 800c1ec:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800c1ee:	4b03      	ldr	r3, [pc, #12]	; (800c1fc <USBD_FS_DeviceDescriptor+0x20>)
}
 800c1f0:	4618      	mov	r0, r3
 800c1f2:	370c      	adds	r7, #12
 800c1f4:	46bd      	mov	sp, r7
 800c1f6:	bc80      	pop	{r7}
 800c1f8:	4770      	bx	lr
 800c1fa:	bf00      	nop
 800c1fc:	20000154 	.word	0x20000154

0800c200 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c200:	b480      	push	{r7}
 800c202:	b083      	sub	sp, #12
 800c204:	af00      	add	r7, sp, #0
 800c206:	4603      	mov	r3, r0
 800c208:	6039      	str	r1, [r7, #0]
 800c20a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800c20c:	683b      	ldr	r3, [r7, #0]
 800c20e:	2204      	movs	r2, #4
 800c210:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800c212:	4b03      	ldr	r3, [pc, #12]	; (800c220 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800c214:	4618      	mov	r0, r3
 800c216:	370c      	adds	r7, #12
 800c218:	46bd      	mov	sp, r7
 800c21a:	bc80      	pop	{r7}
 800c21c:	4770      	bx	lr
 800c21e:	bf00      	nop
 800c220:	20000168 	.word	0x20000168

0800c224 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c224:	b580      	push	{r7, lr}
 800c226:	b082      	sub	sp, #8
 800c228:	af00      	add	r7, sp, #0
 800c22a:	4603      	mov	r3, r0
 800c22c:	6039      	str	r1, [r7, #0]
 800c22e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800c230:	79fb      	ldrb	r3, [r7, #7]
 800c232:	2b00      	cmp	r3, #0
 800c234:	d105      	bne.n	800c242 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800c236:	683a      	ldr	r2, [r7, #0]
 800c238:	4907      	ldr	r1, [pc, #28]	; (800c258 <USBD_FS_ProductStrDescriptor+0x34>)
 800c23a:	4808      	ldr	r0, [pc, #32]	; (800c25c <USBD_FS_ProductStrDescriptor+0x38>)
 800c23c:	f7ff fdf8 	bl	800be30 <USBD_GetString>
 800c240:	e004      	b.n	800c24c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800c242:	683a      	ldr	r2, [r7, #0]
 800c244:	4904      	ldr	r1, [pc, #16]	; (800c258 <USBD_FS_ProductStrDescriptor+0x34>)
 800c246:	4805      	ldr	r0, [pc, #20]	; (800c25c <USBD_FS_ProductStrDescriptor+0x38>)
 800c248:	f7ff fdf2 	bl	800be30 <USBD_GetString>
  }
  return USBD_StrDesc;
 800c24c:	4b02      	ldr	r3, [pc, #8]	; (800c258 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800c24e:	4618      	mov	r0, r3
 800c250:	3708      	adds	r7, #8
 800c252:	46bd      	mov	sp, r7
 800c254:	bd80      	pop	{r7, pc}
 800c256:	bf00      	nop
 800c258:	20001b08 	.word	0x20001b08
 800c25c:	08010eb0 	.word	0x08010eb0

0800c260 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c260:	b580      	push	{r7, lr}
 800c262:	b082      	sub	sp, #8
 800c264:	af00      	add	r7, sp, #0
 800c266:	4603      	mov	r3, r0
 800c268:	6039      	str	r1, [r7, #0]
 800c26a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800c26c:	683a      	ldr	r2, [r7, #0]
 800c26e:	4904      	ldr	r1, [pc, #16]	; (800c280 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800c270:	4804      	ldr	r0, [pc, #16]	; (800c284 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800c272:	f7ff fddd 	bl	800be30 <USBD_GetString>
  return USBD_StrDesc;
 800c276:	4b02      	ldr	r3, [pc, #8]	; (800c280 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800c278:	4618      	mov	r0, r3
 800c27a:	3708      	adds	r7, #8
 800c27c:	46bd      	mov	sp, r7
 800c27e:	bd80      	pop	{r7, pc}
 800c280:	20001b08 	.word	0x20001b08
 800c284:	08010ec8 	.word	0x08010ec8

0800c288 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c288:	b580      	push	{r7, lr}
 800c28a:	b082      	sub	sp, #8
 800c28c:	af00      	add	r7, sp, #0
 800c28e:	4603      	mov	r3, r0
 800c290:	6039      	str	r1, [r7, #0]
 800c292:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800c294:	683b      	ldr	r3, [r7, #0]
 800c296:	221a      	movs	r2, #26
 800c298:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800c29a:	f000 f843 	bl	800c324 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800c29e:	4b02      	ldr	r3, [pc, #8]	; (800c2a8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800c2a0:	4618      	mov	r0, r3
 800c2a2:	3708      	adds	r7, #8
 800c2a4:	46bd      	mov	sp, r7
 800c2a6:	bd80      	pop	{r7, pc}
 800c2a8:	2000016c 	.word	0x2000016c

0800c2ac <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c2ac:	b580      	push	{r7, lr}
 800c2ae:	b082      	sub	sp, #8
 800c2b0:	af00      	add	r7, sp, #0
 800c2b2:	4603      	mov	r3, r0
 800c2b4:	6039      	str	r1, [r7, #0]
 800c2b6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800c2b8:	79fb      	ldrb	r3, [r7, #7]
 800c2ba:	2b00      	cmp	r3, #0
 800c2bc:	d105      	bne.n	800c2ca <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800c2be:	683a      	ldr	r2, [r7, #0]
 800c2c0:	4907      	ldr	r1, [pc, #28]	; (800c2e0 <USBD_FS_ConfigStrDescriptor+0x34>)
 800c2c2:	4808      	ldr	r0, [pc, #32]	; (800c2e4 <USBD_FS_ConfigStrDescriptor+0x38>)
 800c2c4:	f7ff fdb4 	bl	800be30 <USBD_GetString>
 800c2c8:	e004      	b.n	800c2d4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800c2ca:	683a      	ldr	r2, [r7, #0]
 800c2cc:	4904      	ldr	r1, [pc, #16]	; (800c2e0 <USBD_FS_ConfigStrDescriptor+0x34>)
 800c2ce:	4805      	ldr	r0, [pc, #20]	; (800c2e4 <USBD_FS_ConfigStrDescriptor+0x38>)
 800c2d0:	f7ff fdae 	bl	800be30 <USBD_GetString>
  }
  return USBD_StrDesc;
 800c2d4:	4b02      	ldr	r3, [pc, #8]	; (800c2e0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800c2d6:	4618      	mov	r0, r3
 800c2d8:	3708      	adds	r7, #8
 800c2da:	46bd      	mov	sp, r7
 800c2dc:	bd80      	pop	{r7, pc}
 800c2de:	bf00      	nop
 800c2e0:	20001b08 	.word	0x20001b08
 800c2e4:	08010edc 	.word	0x08010edc

0800c2e8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c2e8:	b580      	push	{r7, lr}
 800c2ea:	b082      	sub	sp, #8
 800c2ec:	af00      	add	r7, sp, #0
 800c2ee:	4603      	mov	r3, r0
 800c2f0:	6039      	str	r1, [r7, #0]
 800c2f2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800c2f4:	79fb      	ldrb	r3, [r7, #7]
 800c2f6:	2b00      	cmp	r3, #0
 800c2f8:	d105      	bne.n	800c306 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800c2fa:	683a      	ldr	r2, [r7, #0]
 800c2fc:	4907      	ldr	r1, [pc, #28]	; (800c31c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800c2fe:	4808      	ldr	r0, [pc, #32]	; (800c320 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800c300:	f7ff fd96 	bl	800be30 <USBD_GetString>
 800c304:	e004      	b.n	800c310 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800c306:	683a      	ldr	r2, [r7, #0]
 800c308:	4904      	ldr	r1, [pc, #16]	; (800c31c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800c30a:	4805      	ldr	r0, [pc, #20]	; (800c320 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800c30c:	f7ff fd90 	bl	800be30 <USBD_GetString>
  }
  return USBD_StrDesc;
 800c310:	4b02      	ldr	r3, [pc, #8]	; (800c31c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800c312:	4618      	mov	r0, r3
 800c314:	3708      	adds	r7, #8
 800c316:	46bd      	mov	sp, r7
 800c318:	bd80      	pop	{r7, pc}
 800c31a:	bf00      	nop
 800c31c:	20001b08 	.word	0x20001b08
 800c320:	08010ee8 	.word	0x08010ee8

0800c324 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800c324:	b580      	push	{r7, lr}
 800c326:	b084      	sub	sp, #16
 800c328:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800c32a:	4b0f      	ldr	r3, [pc, #60]	; (800c368 <Get_SerialNum+0x44>)
 800c32c:	681b      	ldr	r3, [r3, #0]
 800c32e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800c330:	4b0e      	ldr	r3, [pc, #56]	; (800c36c <Get_SerialNum+0x48>)
 800c332:	681b      	ldr	r3, [r3, #0]
 800c334:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800c336:	4b0e      	ldr	r3, [pc, #56]	; (800c370 <Get_SerialNum+0x4c>)
 800c338:	681b      	ldr	r3, [r3, #0]
 800c33a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800c33c:	68fa      	ldr	r2, [r7, #12]
 800c33e:	687b      	ldr	r3, [r7, #4]
 800c340:	4413      	add	r3, r2
 800c342:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800c344:	68fb      	ldr	r3, [r7, #12]
 800c346:	2b00      	cmp	r3, #0
 800c348:	d009      	beq.n	800c35e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800c34a:	2208      	movs	r2, #8
 800c34c:	4909      	ldr	r1, [pc, #36]	; (800c374 <Get_SerialNum+0x50>)
 800c34e:	68f8      	ldr	r0, [r7, #12]
 800c350:	f000 f814 	bl	800c37c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800c354:	2204      	movs	r2, #4
 800c356:	4908      	ldr	r1, [pc, #32]	; (800c378 <Get_SerialNum+0x54>)
 800c358:	68b8      	ldr	r0, [r7, #8]
 800c35a:	f000 f80f 	bl	800c37c <IntToUnicode>
  }
}
 800c35e:	bf00      	nop
 800c360:	3710      	adds	r7, #16
 800c362:	46bd      	mov	sp, r7
 800c364:	bd80      	pop	{r7, pc}
 800c366:	bf00      	nop
 800c368:	1fff7a10 	.word	0x1fff7a10
 800c36c:	1fff7a14 	.word	0x1fff7a14
 800c370:	1fff7a18 	.word	0x1fff7a18
 800c374:	2000016e 	.word	0x2000016e
 800c378:	2000017e 	.word	0x2000017e

0800c37c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800c37c:	b480      	push	{r7}
 800c37e:	b087      	sub	sp, #28
 800c380:	af00      	add	r7, sp, #0
 800c382:	60f8      	str	r0, [r7, #12]
 800c384:	60b9      	str	r1, [r7, #8]
 800c386:	4613      	mov	r3, r2
 800c388:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800c38a:	2300      	movs	r3, #0
 800c38c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800c38e:	2300      	movs	r3, #0
 800c390:	75fb      	strb	r3, [r7, #23]
 800c392:	e027      	b.n	800c3e4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800c394:	68fb      	ldr	r3, [r7, #12]
 800c396:	0f1b      	lsrs	r3, r3, #28
 800c398:	2b09      	cmp	r3, #9
 800c39a:	d80b      	bhi.n	800c3b4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800c39c:	68fb      	ldr	r3, [r7, #12]
 800c39e:	0f1b      	lsrs	r3, r3, #28
 800c3a0:	b2da      	uxtb	r2, r3
 800c3a2:	7dfb      	ldrb	r3, [r7, #23]
 800c3a4:	005b      	lsls	r3, r3, #1
 800c3a6:	4619      	mov	r1, r3
 800c3a8:	68bb      	ldr	r3, [r7, #8]
 800c3aa:	440b      	add	r3, r1
 800c3ac:	3230      	adds	r2, #48	; 0x30
 800c3ae:	b2d2      	uxtb	r2, r2
 800c3b0:	701a      	strb	r2, [r3, #0]
 800c3b2:	e00a      	b.n	800c3ca <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800c3b4:	68fb      	ldr	r3, [r7, #12]
 800c3b6:	0f1b      	lsrs	r3, r3, #28
 800c3b8:	b2da      	uxtb	r2, r3
 800c3ba:	7dfb      	ldrb	r3, [r7, #23]
 800c3bc:	005b      	lsls	r3, r3, #1
 800c3be:	4619      	mov	r1, r3
 800c3c0:	68bb      	ldr	r3, [r7, #8]
 800c3c2:	440b      	add	r3, r1
 800c3c4:	3237      	adds	r2, #55	; 0x37
 800c3c6:	b2d2      	uxtb	r2, r2
 800c3c8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800c3ca:	68fb      	ldr	r3, [r7, #12]
 800c3cc:	011b      	lsls	r3, r3, #4
 800c3ce:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800c3d0:	7dfb      	ldrb	r3, [r7, #23]
 800c3d2:	005b      	lsls	r3, r3, #1
 800c3d4:	3301      	adds	r3, #1
 800c3d6:	68ba      	ldr	r2, [r7, #8]
 800c3d8:	4413      	add	r3, r2
 800c3da:	2200      	movs	r2, #0
 800c3dc:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800c3de:	7dfb      	ldrb	r3, [r7, #23]
 800c3e0:	3301      	adds	r3, #1
 800c3e2:	75fb      	strb	r3, [r7, #23]
 800c3e4:	7dfa      	ldrb	r2, [r7, #23]
 800c3e6:	79fb      	ldrb	r3, [r7, #7]
 800c3e8:	429a      	cmp	r2, r3
 800c3ea:	d3d3      	bcc.n	800c394 <IntToUnicode+0x18>
  }
}
 800c3ec:	bf00      	nop
 800c3ee:	bf00      	nop
 800c3f0:	371c      	adds	r7, #28
 800c3f2:	46bd      	mov	sp, r7
 800c3f4:	bc80      	pop	{r7}
 800c3f6:	4770      	bx	lr

0800c3f8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800c3f8:	b580      	push	{r7, lr}
 800c3fa:	b08a      	sub	sp, #40	; 0x28
 800c3fc:	af00      	add	r7, sp, #0
 800c3fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c400:	f107 0314 	add.w	r3, r7, #20
 800c404:	2200      	movs	r2, #0
 800c406:	601a      	str	r2, [r3, #0]
 800c408:	605a      	str	r2, [r3, #4]
 800c40a:	609a      	str	r2, [r3, #8]
 800c40c:	60da      	str	r2, [r3, #12]
 800c40e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800c410:	687b      	ldr	r3, [r7, #4]
 800c412:	681b      	ldr	r3, [r3, #0]
 800c414:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800c418:	d13a      	bne.n	800c490 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800c41a:	2300      	movs	r3, #0
 800c41c:	613b      	str	r3, [r7, #16]
 800c41e:	4b1e      	ldr	r3, [pc, #120]	; (800c498 <HAL_PCD_MspInit+0xa0>)
 800c420:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c422:	4a1d      	ldr	r2, [pc, #116]	; (800c498 <HAL_PCD_MspInit+0xa0>)
 800c424:	f043 0301 	orr.w	r3, r3, #1
 800c428:	6313      	str	r3, [r2, #48]	; 0x30
 800c42a:	4b1b      	ldr	r3, [pc, #108]	; (800c498 <HAL_PCD_MspInit+0xa0>)
 800c42c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c42e:	f003 0301 	and.w	r3, r3, #1
 800c432:	613b      	str	r3, [r7, #16]
 800c434:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800c436:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800c43a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c43c:	2302      	movs	r3, #2
 800c43e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c440:	2300      	movs	r3, #0
 800c442:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c444:	2303      	movs	r3, #3
 800c446:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800c448:	230a      	movs	r3, #10
 800c44a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c44c:	f107 0314 	add.w	r3, r7, #20
 800c450:	4619      	mov	r1, r3
 800c452:	4812      	ldr	r0, [pc, #72]	; (800c49c <HAL_PCD_MspInit+0xa4>)
 800c454:	f7f9 f83e 	bl	80054d4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800c458:	4b0f      	ldr	r3, [pc, #60]	; (800c498 <HAL_PCD_MspInit+0xa0>)
 800c45a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c45c:	4a0e      	ldr	r2, [pc, #56]	; (800c498 <HAL_PCD_MspInit+0xa0>)
 800c45e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c462:	6353      	str	r3, [r2, #52]	; 0x34
 800c464:	2300      	movs	r3, #0
 800c466:	60fb      	str	r3, [r7, #12]
 800c468:	4b0b      	ldr	r3, [pc, #44]	; (800c498 <HAL_PCD_MspInit+0xa0>)
 800c46a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c46c:	4a0a      	ldr	r2, [pc, #40]	; (800c498 <HAL_PCD_MspInit+0xa0>)
 800c46e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800c472:	6453      	str	r3, [r2, #68]	; 0x44
 800c474:	4b08      	ldr	r3, [pc, #32]	; (800c498 <HAL_PCD_MspInit+0xa0>)
 800c476:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c478:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c47c:	60fb      	str	r3, [r7, #12]
 800c47e:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800c480:	2200      	movs	r2, #0
 800c482:	2100      	movs	r1, #0
 800c484:	2043      	movs	r0, #67	; 0x43
 800c486:	f7f8 fcfa 	bl	8004e7e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800c48a:	2043      	movs	r0, #67	; 0x43
 800c48c:	f7f8 fd13 	bl	8004eb6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800c490:	bf00      	nop
 800c492:	3728      	adds	r7, #40	; 0x28
 800c494:	46bd      	mov	sp, r7
 800c496:	bd80      	pop	{r7, pc}
 800c498:	40023800 	.word	0x40023800
 800c49c:	40020000 	.word	0x40020000

0800c4a0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c4a0:	b580      	push	{r7, lr}
 800c4a2:	b082      	sub	sp, #8
 800c4a4:	af00      	add	r7, sp, #0
 800c4a6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800c4a8:	687b      	ldr	r3, [r7, #4]
 800c4aa:	f8d3 23fc 	ldr.w	r2, [r3, #1020]	; 0x3fc
 800c4ae:	687b      	ldr	r3, [r7, #4]
 800c4b0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800c4b4:	4619      	mov	r1, r3
 800c4b6:	4610      	mov	r0, r2
 800c4b8:	f7fe fd51 	bl	800af5e <USBD_LL_SetupStage>
}
 800c4bc:	bf00      	nop
 800c4be:	3708      	adds	r7, #8
 800c4c0:	46bd      	mov	sp, r7
 800c4c2:	bd80      	pop	{r7, pc}

0800c4c4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c4c4:	b580      	push	{r7, lr}
 800c4c6:	b082      	sub	sp, #8
 800c4c8:	af00      	add	r7, sp, #0
 800c4ca:	6078      	str	r0, [r7, #4]
 800c4cc:	460b      	mov	r3, r1
 800c4ce:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800c4d0:	687b      	ldr	r3, [r7, #4]
 800c4d2:	f8d3 03fc 	ldr.w	r0, [r3, #1020]	; 0x3fc
 800c4d6:	78fa      	ldrb	r2, [r7, #3]
 800c4d8:	6879      	ldr	r1, [r7, #4]
 800c4da:	4613      	mov	r3, r2
 800c4dc:	00db      	lsls	r3, r3, #3
 800c4de:	1a9b      	subs	r3, r3, r2
 800c4e0:	009b      	lsls	r3, r3, #2
 800c4e2:	440b      	add	r3, r1
 800c4e4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800c4e8:	681a      	ldr	r2, [r3, #0]
 800c4ea:	78fb      	ldrb	r3, [r7, #3]
 800c4ec:	4619      	mov	r1, r3
 800c4ee:	f7fe fd83 	bl	800aff8 <USBD_LL_DataOutStage>
}
 800c4f2:	bf00      	nop
 800c4f4:	3708      	adds	r7, #8
 800c4f6:	46bd      	mov	sp, r7
 800c4f8:	bd80      	pop	{r7, pc}

0800c4fa <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c4fa:	b580      	push	{r7, lr}
 800c4fc:	b082      	sub	sp, #8
 800c4fe:	af00      	add	r7, sp, #0
 800c500:	6078      	str	r0, [r7, #4]
 800c502:	460b      	mov	r3, r1
 800c504:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800c506:	687b      	ldr	r3, [r7, #4]
 800c508:	f8d3 03fc 	ldr.w	r0, [r3, #1020]	; 0x3fc
 800c50c:	78fa      	ldrb	r2, [r7, #3]
 800c50e:	6879      	ldr	r1, [r7, #4]
 800c510:	4613      	mov	r3, r2
 800c512:	00db      	lsls	r3, r3, #3
 800c514:	1a9b      	subs	r3, r3, r2
 800c516:	009b      	lsls	r3, r3, #2
 800c518:	440b      	add	r3, r1
 800c51a:	3348      	adds	r3, #72	; 0x48
 800c51c:	681a      	ldr	r2, [r3, #0]
 800c51e:	78fb      	ldrb	r3, [r7, #3]
 800c520:	4619      	mov	r1, r3
 800c522:	f7fe fdda 	bl	800b0da <USBD_LL_DataInStage>
}
 800c526:	bf00      	nop
 800c528:	3708      	adds	r7, #8
 800c52a:	46bd      	mov	sp, r7
 800c52c:	bd80      	pop	{r7, pc}

0800c52e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c52e:	b580      	push	{r7, lr}
 800c530:	b082      	sub	sp, #8
 800c532:	af00      	add	r7, sp, #0
 800c534:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800c536:	687b      	ldr	r3, [r7, #4]
 800c538:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 800c53c:	4618      	mov	r0, r3
 800c53e:	f7fe feea 	bl	800b316 <USBD_LL_SOF>
}
 800c542:	bf00      	nop
 800c544:	3708      	adds	r7, #8
 800c546:	46bd      	mov	sp, r7
 800c548:	bd80      	pop	{r7, pc}

0800c54a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c54a:	b580      	push	{r7, lr}
 800c54c:	b084      	sub	sp, #16
 800c54e:	af00      	add	r7, sp, #0
 800c550:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800c552:	2301      	movs	r3, #1
 800c554:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800c556:	687b      	ldr	r3, [r7, #4]
 800c558:	68db      	ldr	r3, [r3, #12]
 800c55a:	2b00      	cmp	r3, #0
 800c55c:	d102      	bne.n	800c564 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800c55e:	2300      	movs	r3, #0
 800c560:	73fb      	strb	r3, [r7, #15]
 800c562:	e008      	b.n	800c576 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800c564:	687b      	ldr	r3, [r7, #4]
 800c566:	68db      	ldr	r3, [r3, #12]
 800c568:	2b02      	cmp	r3, #2
 800c56a:	d102      	bne.n	800c572 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800c56c:	2301      	movs	r3, #1
 800c56e:	73fb      	strb	r3, [r7, #15]
 800c570:	e001      	b.n	800c576 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800c572:	f7f6 ffed 	bl	8003550 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800c576:	687b      	ldr	r3, [r7, #4]
 800c578:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 800c57c:	7bfa      	ldrb	r2, [r7, #15]
 800c57e:	4611      	mov	r1, r2
 800c580:	4618      	mov	r0, r3
 800c582:	f7fe fe90 	bl	800b2a6 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800c586:	687b      	ldr	r3, [r7, #4]
 800c588:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 800c58c:	4618      	mov	r0, r3
 800c58e:	f7fe fe49 	bl	800b224 <USBD_LL_Reset>
}
 800c592:	bf00      	nop
 800c594:	3710      	adds	r7, #16
 800c596:	46bd      	mov	sp, r7
 800c598:	bd80      	pop	{r7, pc}
	...

0800c59c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c59c:	b580      	push	{r7, lr}
 800c59e:	b082      	sub	sp, #8
 800c5a0:	af00      	add	r7, sp, #0
 800c5a2:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800c5a4:	687b      	ldr	r3, [r7, #4]
 800c5a6:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 800c5aa:	4618      	mov	r0, r3
 800c5ac:	f7fe fe8a 	bl	800b2c4 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800c5b0:	687b      	ldr	r3, [r7, #4]
 800c5b2:	681b      	ldr	r3, [r3, #0]
 800c5b4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800c5b8:	681b      	ldr	r3, [r3, #0]
 800c5ba:	687a      	ldr	r2, [r7, #4]
 800c5bc:	6812      	ldr	r2, [r2, #0]
 800c5be:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800c5c2:	f043 0301 	orr.w	r3, r3, #1
 800c5c6:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800c5c8:	687b      	ldr	r3, [r7, #4]
 800c5ca:	6a1b      	ldr	r3, [r3, #32]
 800c5cc:	2b00      	cmp	r3, #0
 800c5ce:	d005      	beq.n	800c5dc <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c5d0:	4b04      	ldr	r3, [pc, #16]	; (800c5e4 <HAL_PCD_SuspendCallback+0x48>)
 800c5d2:	691b      	ldr	r3, [r3, #16]
 800c5d4:	4a03      	ldr	r2, [pc, #12]	; (800c5e4 <HAL_PCD_SuspendCallback+0x48>)
 800c5d6:	f043 0306 	orr.w	r3, r3, #6
 800c5da:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800c5dc:	bf00      	nop
 800c5de:	3708      	adds	r7, #8
 800c5e0:	46bd      	mov	sp, r7
 800c5e2:	bd80      	pop	{r7, pc}
 800c5e4:	e000ed00 	.word	0xe000ed00

0800c5e8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c5e8:	b580      	push	{r7, lr}
 800c5ea:	b082      	sub	sp, #8
 800c5ec:	af00      	add	r7, sp, #0
 800c5ee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800c5f0:	687b      	ldr	r3, [r7, #4]
 800c5f2:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 800c5f6:	4618      	mov	r0, r3
 800c5f8:	f7fe fe78 	bl	800b2ec <USBD_LL_Resume>
}
 800c5fc:	bf00      	nop
 800c5fe:	3708      	adds	r7, #8
 800c600:	46bd      	mov	sp, r7
 800c602:	bd80      	pop	{r7, pc}

0800c604 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c604:	b580      	push	{r7, lr}
 800c606:	b082      	sub	sp, #8
 800c608:	af00      	add	r7, sp, #0
 800c60a:	6078      	str	r0, [r7, #4]
 800c60c:	460b      	mov	r3, r1
 800c60e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800c610:	687b      	ldr	r3, [r7, #4]
 800c612:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 800c616:	78fa      	ldrb	r2, [r7, #3]
 800c618:	4611      	mov	r1, r2
 800c61a:	4618      	mov	r0, r3
 800c61c:	f7fe fea1 	bl	800b362 <USBD_LL_IsoOUTIncomplete>
}
 800c620:	bf00      	nop
 800c622:	3708      	adds	r7, #8
 800c624:	46bd      	mov	sp, r7
 800c626:	bd80      	pop	{r7, pc}

0800c628 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c628:	b580      	push	{r7, lr}
 800c62a:	b082      	sub	sp, #8
 800c62c:	af00      	add	r7, sp, #0
 800c62e:	6078      	str	r0, [r7, #4]
 800c630:	460b      	mov	r3, r1
 800c632:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800c634:	687b      	ldr	r3, [r7, #4]
 800c636:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 800c63a:	78fa      	ldrb	r2, [r7, #3]
 800c63c:	4611      	mov	r1, r2
 800c63e:	4618      	mov	r0, r3
 800c640:	f7fe fe83 	bl	800b34a <USBD_LL_IsoINIncomplete>
}
 800c644:	bf00      	nop
 800c646:	3708      	adds	r7, #8
 800c648:	46bd      	mov	sp, r7
 800c64a:	bd80      	pop	{r7, pc}

0800c64c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c64c:	b580      	push	{r7, lr}
 800c64e:	b082      	sub	sp, #8
 800c650:	af00      	add	r7, sp, #0
 800c652:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800c654:	687b      	ldr	r3, [r7, #4]
 800c656:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 800c65a:	4618      	mov	r0, r3
 800c65c:	f7fe fe8d 	bl	800b37a <USBD_LL_DevConnected>
}
 800c660:	bf00      	nop
 800c662:	3708      	adds	r7, #8
 800c664:	46bd      	mov	sp, r7
 800c666:	bd80      	pop	{r7, pc}

0800c668 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c668:	b580      	push	{r7, lr}
 800c66a:	b082      	sub	sp, #8
 800c66c:	af00      	add	r7, sp, #0
 800c66e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800c670:	687b      	ldr	r3, [r7, #4]
 800c672:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 800c676:	4618      	mov	r0, r3
 800c678:	f7fe fe89 	bl	800b38e <USBD_LL_DevDisconnected>
}
 800c67c:	bf00      	nop
 800c67e:	3708      	adds	r7, #8
 800c680:	46bd      	mov	sp, r7
 800c682:	bd80      	pop	{r7, pc}

0800c684 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800c684:	b580      	push	{r7, lr}
 800c686:	b082      	sub	sp, #8
 800c688:	af00      	add	r7, sp, #0
 800c68a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800c68c:	687b      	ldr	r3, [r7, #4]
 800c68e:	781b      	ldrb	r3, [r3, #0]
 800c690:	2b00      	cmp	r3, #0
 800c692:	d139      	bne.n	800c708 <USBD_LL_Init+0x84>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800c694:	4a1f      	ldr	r2, [pc, #124]	; (800c714 <USBD_LL_Init+0x90>)
 800c696:	687b      	ldr	r3, [r7, #4]
 800c698:	f8c2 33fc 	str.w	r3, [r2, #1020]	; 0x3fc
  pdev->pData = &hpcd_USB_OTG_FS;
 800c69c:	687b      	ldr	r3, [r7, #4]
 800c69e:	4a1d      	ldr	r2, [pc, #116]	; (800c714 <USBD_LL_Init+0x90>)
 800c6a0:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800c6a4:	4b1b      	ldr	r3, [pc, #108]	; (800c714 <USBD_LL_Init+0x90>)
 800c6a6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800c6aa:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800c6ac:	4b19      	ldr	r3, [pc, #100]	; (800c714 <USBD_LL_Init+0x90>)
 800c6ae:	2204      	movs	r2, #4
 800c6b0:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800c6b2:	4b18      	ldr	r3, [pc, #96]	; (800c714 <USBD_LL_Init+0x90>)
 800c6b4:	2202      	movs	r2, #2
 800c6b6:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800c6b8:	4b16      	ldr	r3, [pc, #88]	; (800c714 <USBD_LL_Init+0x90>)
 800c6ba:	2200      	movs	r2, #0
 800c6bc:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800c6be:	4b15      	ldr	r3, [pc, #84]	; (800c714 <USBD_LL_Init+0x90>)
 800c6c0:	2202      	movs	r2, #2
 800c6c2:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800c6c4:	4b13      	ldr	r3, [pc, #76]	; (800c714 <USBD_LL_Init+0x90>)
 800c6c6:	2200      	movs	r2, #0
 800c6c8:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800c6ca:	4b12      	ldr	r3, [pc, #72]	; (800c714 <USBD_LL_Init+0x90>)
 800c6cc:	2200      	movs	r2, #0
 800c6ce:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800c6d0:	4b10      	ldr	r3, [pc, #64]	; (800c714 <USBD_LL_Init+0x90>)
 800c6d2:	2200      	movs	r2, #0
 800c6d4:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800c6d6:	4b0f      	ldr	r3, [pc, #60]	; (800c714 <USBD_LL_Init+0x90>)
 800c6d8:	2200      	movs	r2, #0
 800c6da:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800c6dc:	480d      	ldr	r0, [pc, #52]	; (800c714 <USBD_LL_Init+0x90>)
 800c6de:	f7fa f89f 	bl	8006820 <HAL_PCD_Init>
 800c6e2:	4603      	mov	r3, r0
 800c6e4:	2b00      	cmp	r3, #0
 800c6e6:	d001      	beq.n	800c6ec <USBD_LL_Init+0x68>
  {
    Error_Handler( );
 800c6e8:	f7f6 ff32 	bl	8003550 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800c6ec:	2180      	movs	r1, #128	; 0x80
 800c6ee:	4809      	ldr	r0, [pc, #36]	; (800c714 <USBD_LL_Init+0x90>)
 800c6f0:	f7fb f9dc 	bl	8007aac <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800c6f4:	2240      	movs	r2, #64	; 0x40
 800c6f6:	2100      	movs	r1, #0
 800c6f8:	4806      	ldr	r0, [pc, #24]	; (800c714 <USBD_LL_Init+0x90>)
 800c6fa:	f7fb f991 	bl	8007a20 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800c6fe:	2280      	movs	r2, #128	; 0x80
 800c700:	2101      	movs	r1, #1
 800c702:	4804      	ldr	r0, [pc, #16]	; (800c714 <USBD_LL_Init+0x90>)
 800c704:	f7fb f98c 	bl	8007a20 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800c708:	2300      	movs	r3, #0
}
 800c70a:	4618      	mov	r0, r3
 800c70c:	3708      	adds	r7, #8
 800c70e:	46bd      	mov	sp, r7
 800c710:	bd80      	pop	{r7, pc}
 800c712:	bf00      	nop
 800c714:	20001d08 	.word	0x20001d08

0800c718 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800c718:	b580      	push	{r7, lr}
 800c71a:	b084      	sub	sp, #16
 800c71c:	af00      	add	r7, sp, #0
 800c71e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c720:	2300      	movs	r3, #0
 800c722:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c724:	2300      	movs	r3, #0
 800c726:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800c728:	687b      	ldr	r3, [r7, #4]
 800c72a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c72e:	4618      	mov	r0, r3
 800c730:	f7fa f993 	bl	8006a5a <HAL_PCD_Start>
 800c734:	4603      	mov	r3, r0
 800c736:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c738:	7bfb      	ldrb	r3, [r7, #15]
 800c73a:	4618      	mov	r0, r3
 800c73c:	f000 f92e 	bl	800c99c <USBD_Get_USB_Status>
 800c740:	4603      	mov	r3, r0
 800c742:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c744:	7bbb      	ldrb	r3, [r7, #14]
}
 800c746:	4618      	mov	r0, r3
 800c748:	3710      	adds	r7, #16
 800c74a:	46bd      	mov	sp, r7
 800c74c:	bd80      	pop	{r7, pc}

0800c74e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800c74e:	b580      	push	{r7, lr}
 800c750:	b084      	sub	sp, #16
 800c752:	af00      	add	r7, sp, #0
 800c754:	6078      	str	r0, [r7, #4]
 800c756:	4608      	mov	r0, r1
 800c758:	4611      	mov	r1, r2
 800c75a:	461a      	mov	r2, r3
 800c75c:	4603      	mov	r3, r0
 800c75e:	70fb      	strb	r3, [r7, #3]
 800c760:	460b      	mov	r3, r1
 800c762:	70bb      	strb	r3, [r7, #2]
 800c764:	4613      	mov	r3, r2
 800c766:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c768:	2300      	movs	r3, #0
 800c76a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c76c:	2300      	movs	r3, #0
 800c76e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800c770:	687b      	ldr	r3, [r7, #4]
 800c772:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800c776:	78bb      	ldrb	r3, [r7, #2]
 800c778:	883a      	ldrh	r2, [r7, #0]
 800c77a:	78f9      	ldrb	r1, [r7, #3]
 800c77c:	f7fa fd58 	bl	8007230 <HAL_PCD_EP_Open>
 800c780:	4603      	mov	r3, r0
 800c782:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c784:	7bfb      	ldrb	r3, [r7, #15]
 800c786:	4618      	mov	r0, r3
 800c788:	f000 f908 	bl	800c99c <USBD_Get_USB_Status>
 800c78c:	4603      	mov	r3, r0
 800c78e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c790:	7bbb      	ldrb	r3, [r7, #14]
}
 800c792:	4618      	mov	r0, r3
 800c794:	3710      	adds	r7, #16
 800c796:	46bd      	mov	sp, r7
 800c798:	bd80      	pop	{r7, pc}

0800c79a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c79a:	b580      	push	{r7, lr}
 800c79c:	b084      	sub	sp, #16
 800c79e:	af00      	add	r7, sp, #0
 800c7a0:	6078      	str	r0, [r7, #4]
 800c7a2:	460b      	mov	r3, r1
 800c7a4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c7a6:	2300      	movs	r3, #0
 800c7a8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c7aa:	2300      	movs	r3, #0
 800c7ac:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800c7ae:	687b      	ldr	r3, [r7, #4]
 800c7b0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c7b4:	78fa      	ldrb	r2, [r7, #3]
 800c7b6:	4611      	mov	r1, r2
 800c7b8:	4618      	mov	r0, r3
 800c7ba:	f7fa fda1 	bl	8007300 <HAL_PCD_EP_Close>
 800c7be:	4603      	mov	r3, r0
 800c7c0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c7c2:	7bfb      	ldrb	r3, [r7, #15]
 800c7c4:	4618      	mov	r0, r3
 800c7c6:	f000 f8e9 	bl	800c99c <USBD_Get_USB_Status>
 800c7ca:	4603      	mov	r3, r0
 800c7cc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c7ce:	7bbb      	ldrb	r3, [r7, #14]
}
 800c7d0:	4618      	mov	r0, r3
 800c7d2:	3710      	adds	r7, #16
 800c7d4:	46bd      	mov	sp, r7
 800c7d6:	bd80      	pop	{r7, pc}

0800c7d8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c7d8:	b580      	push	{r7, lr}
 800c7da:	b084      	sub	sp, #16
 800c7dc:	af00      	add	r7, sp, #0
 800c7de:	6078      	str	r0, [r7, #4]
 800c7e0:	460b      	mov	r3, r1
 800c7e2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c7e4:	2300      	movs	r3, #0
 800c7e6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c7e8:	2300      	movs	r3, #0
 800c7ea:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800c7ec:	687b      	ldr	r3, [r7, #4]
 800c7ee:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c7f2:	78fa      	ldrb	r2, [r7, #3]
 800c7f4:	4611      	mov	r1, r2
 800c7f6:	4618      	mov	r0, r3
 800c7f8:	f7fa fe78 	bl	80074ec <HAL_PCD_EP_SetStall>
 800c7fc:	4603      	mov	r3, r0
 800c7fe:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c800:	7bfb      	ldrb	r3, [r7, #15]
 800c802:	4618      	mov	r0, r3
 800c804:	f000 f8ca 	bl	800c99c <USBD_Get_USB_Status>
 800c808:	4603      	mov	r3, r0
 800c80a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c80c:	7bbb      	ldrb	r3, [r7, #14]
}
 800c80e:	4618      	mov	r0, r3
 800c810:	3710      	adds	r7, #16
 800c812:	46bd      	mov	sp, r7
 800c814:	bd80      	pop	{r7, pc}

0800c816 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c816:	b580      	push	{r7, lr}
 800c818:	b084      	sub	sp, #16
 800c81a:	af00      	add	r7, sp, #0
 800c81c:	6078      	str	r0, [r7, #4]
 800c81e:	460b      	mov	r3, r1
 800c820:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c822:	2300      	movs	r3, #0
 800c824:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c826:	2300      	movs	r3, #0
 800c828:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800c82a:	687b      	ldr	r3, [r7, #4]
 800c82c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c830:	78fa      	ldrb	r2, [r7, #3]
 800c832:	4611      	mov	r1, r2
 800c834:	4618      	mov	r0, r3
 800c836:	f7fa febd 	bl	80075b4 <HAL_PCD_EP_ClrStall>
 800c83a:	4603      	mov	r3, r0
 800c83c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c83e:	7bfb      	ldrb	r3, [r7, #15]
 800c840:	4618      	mov	r0, r3
 800c842:	f000 f8ab 	bl	800c99c <USBD_Get_USB_Status>
 800c846:	4603      	mov	r3, r0
 800c848:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c84a:	7bbb      	ldrb	r3, [r7, #14]
}
 800c84c:	4618      	mov	r0, r3
 800c84e:	3710      	adds	r7, #16
 800c850:	46bd      	mov	sp, r7
 800c852:	bd80      	pop	{r7, pc}

0800c854 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c854:	b480      	push	{r7}
 800c856:	b085      	sub	sp, #20
 800c858:	af00      	add	r7, sp, #0
 800c85a:	6078      	str	r0, [r7, #4]
 800c85c:	460b      	mov	r3, r1
 800c85e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800c860:	687b      	ldr	r3, [r7, #4]
 800c862:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c866:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800c868:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c86c:	2b00      	cmp	r3, #0
 800c86e:	da0b      	bge.n	800c888 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800c870:	78fb      	ldrb	r3, [r7, #3]
 800c872:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c876:	68f9      	ldr	r1, [r7, #12]
 800c878:	4613      	mov	r3, r2
 800c87a:	00db      	lsls	r3, r3, #3
 800c87c:	1a9b      	subs	r3, r3, r2
 800c87e:	009b      	lsls	r3, r3, #2
 800c880:	440b      	add	r3, r1
 800c882:	333e      	adds	r3, #62	; 0x3e
 800c884:	781b      	ldrb	r3, [r3, #0]
 800c886:	e00b      	b.n	800c8a0 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800c888:	78fb      	ldrb	r3, [r7, #3]
 800c88a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c88e:	68f9      	ldr	r1, [r7, #12]
 800c890:	4613      	mov	r3, r2
 800c892:	00db      	lsls	r3, r3, #3
 800c894:	1a9b      	subs	r3, r3, r2
 800c896:	009b      	lsls	r3, r3, #2
 800c898:	440b      	add	r3, r1
 800c89a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800c89e:	781b      	ldrb	r3, [r3, #0]
  }
}
 800c8a0:	4618      	mov	r0, r3
 800c8a2:	3714      	adds	r7, #20
 800c8a4:	46bd      	mov	sp, r7
 800c8a6:	bc80      	pop	{r7}
 800c8a8:	4770      	bx	lr

0800c8aa <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800c8aa:	b580      	push	{r7, lr}
 800c8ac:	b084      	sub	sp, #16
 800c8ae:	af00      	add	r7, sp, #0
 800c8b0:	6078      	str	r0, [r7, #4]
 800c8b2:	460b      	mov	r3, r1
 800c8b4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c8b6:	2300      	movs	r3, #0
 800c8b8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c8ba:	2300      	movs	r3, #0
 800c8bc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800c8be:	687b      	ldr	r3, [r7, #4]
 800c8c0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c8c4:	78fa      	ldrb	r2, [r7, #3]
 800c8c6:	4611      	mov	r1, r2
 800c8c8:	4618      	mov	r0, r3
 800c8ca:	f7fa fc8c 	bl	80071e6 <HAL_PCD_SetAddress>
 800c8ce:	4603      	mov	r3, r0
 800c8d0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c8d2:	7bfb      	ldrb	r3, [r7, #15]
 800c8d4:	4618      	mov	r0, r3
 800c8d6:	f000 f861 	bl	800c99c <USBD_Get_USB_Status>
 800c8da:	4603      	mov	r3, r0
 800c8dc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c8de:	7bbb      	ldrb	r3, [r7, #14]
}
 800c8e0:	4618      	mov	r0, r3
 800c8e2:	3710      	adds	r7, #16
 800c8e4:	46bd      	mov	sp, r7
 800c8e6:	bd80      	pop	{r7, pc}

0800c8e8 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800c8e8:	b580      	push	{r7, lr}
 800c8ea:	b086      	sub	sp, #24
 800c8ec:	af00      	add	r7, sp, #0
 800c8ee:	60f8      	str	r0, [r7, #12]
 800c8f0:	607a      	str	r2, [r7, #4]
 800c8f2:	461a      	mov	r2, r3
 800c8f4:	460b      	mov	r3, r1
 800c8f6:	72fb      	strb	r3, [r7, #11]
 800c8f8:	4613      	mov	r3, r2
 800c8fa:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c8fc:	2300      	movs	r3, #0
 800c8fe:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c900:	2300      	movs	r3, #0
 800c902:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800c904:	68fb      	ldr	r3, [r7, #12]
 800c906:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800c90a:	893b      	ldrh	r3, [r7, #8]
 800c90c:	7af9      	ldrb	r1, [r7, #11]
 800c90e:	687a      	ldr	r2, [r7, #4]
 800c910:	f7fa fda2 	bl	8007458 <HAL_PCD_EP_Transmit>
 800c914:	4603      	mov	r3, r0
 800c916:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c918:	7dfb      	ldrb	r3, [r7, #23]
 800c91a:	4618      	mov	r0, r3
 800c91c:	f000 f83e 	bl	800c99c <USBD_Get_USB_Status>
 800c920:	4603      	mov	r3, r0
 800c922:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800c924:	7dbb      	ldrb	r3, [r7, #22]
}
 800c926:	4618      	mov	r0, r3
 800c928:	3718      	adds	r7, #24
 800c92a:	46bd      	mov	sp, r7
 800c92c:	bd80      	pop	{r7, pc}

0800c92e <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800c92e:	b580      	push	{r7, lr}
 800c930:	b086      	sub	sp, #24
 800c932:	af00      	add	r7, sp, #0
 800c934:	60f8      	str	r0, [r7, #12]
 800c936:	607a      	str	r2, [r7, #4]
 800c938:	461a      	mov	r2, r3
 800c93a:	460b      	mov	r3, r1
 800c93c:	72fb      	strb	r3, [r7, #11]
 800c93e:	4613      	mov	r3, r2
 800c940:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c942:	2300      	movs	r3, #0
 800c944:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c946:	2300      	movs	r3, #0
 800c948:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800c94a:	68fb      	ldr	r3, [r7, #12]
 800c94c:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800c950:	893b      	ldrh	r3, [r7, #8]
 800c952:	7af9      	ldrb	r1, [r7, #11]
 800c954:	687a      	ldr	r2, [r7, #4]
 800c956:	f7fa fd1d 	bl	8007394 <HAL_PCD_EP_Receive>
 800c95a:	4603      	mov	r3, r0
 800c95c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c95e:	7dfb      	ldrb	r3, [r7, #23]
 800c960:	4618      	mov	r0, r3
 800c962:	f000 f81b 	bl	800c99c <USBD_Get_USB_Status>
 800c966:	4603      	mov	r3, r0
 800c968:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800c96a:	7dbb      	ldrb	r3, [r7, #22]
}
 800c96c:	4618      	mov	r0, r3
 800c96e:	3718      	adds	r7, #24
 800c970:	46bd      	mov	sp, r7
 800c972:	bd80      	pop	{r7, pc}

0800c974 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c974:	b580      	push	{r7, lr}
 800c976:	b082      	sub	sp, #8
 800c978:	af00      	add	r7, sp, #0
 800c97a:	6078      	str	r0, [r7, #4]
 800c97c:	460b      	mov	r3, r1
 800c97e:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800c980:	687b      	ldr	r3, [r7, #4]
 800c982:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c986:	78fa      	ldrb	r2, [r7, #3]
 800c988:	4611      	mov	r1, r2
 800c98a:	4618      	mov	r0, r3
 800c98c:	f7fa fd4d 	bl	800742a <HAL_PCD_EP_GetRxCount>
 800c990:	4603      	mov	r3, r0
}
 800c992:	4618      	mov	r0, r3
 800c994:	3708      	adds	r7, #8
 800c996:	46bd      	mov	sp, r7
 800c998:	bd80      	pop	{r7, pc}
	...

0800c99c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800c99c:	b480      	push	{r7}
 800c99e:	b085      	sub	sp, #20
 800c9a0:	af00      	add	r7, sp, #0
 800c9a2:	4603      	mov	r3, r0
 800c9a4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c9a6:	2300      	movs	r3, #0
 800c9a8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800c9aa:	79fb      	ldrb	r3, [r7, #7]
 800c9ac:	2b03      	cmp	r3, #3
 800c9ae:	d817      	bhi.n	800c9e0 <USBD_Get_USB_Status+0x44>
 800c9b0:	a201      	add	r2, pc, #4	; (adr r2, 800c9b8 <USBD_Get_USB_Status+0x1c>)
 800c9b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c9b6:	bf00      	nop
 800c9b8:	0800c9c9 	.word	0x0800c9c9
 800c9bc:	0800c9cf 	.word	0x0800c9cf
 800c9c0:	0800c9d5 	.word	0x0800c9d5
 800c9c4:	0800c9db 	.word	0x0800c9db
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800c9c8:	2300      	movs	r3, #0
 800c9ca:	73fb      	strb	r3, [r7, #15]
    break;
 800c9cc:	e00b      	b.n	800c9e6 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800c9ce:	2302      	movs	r3, #2
 800c9d0:	73fb      	strb	r3, [r7, #15]
    break;
 800c9d2:	e008      	b.n	800c9e6 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800c9d4:	2301      	movs	r3, #1
 800c9d6:	73fb      	strb	r3, [r7, #15]
    break;
 800c9d8:	e005      	b.n	800c9e6 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800c9da:	2302      	movs	r3, #2
 800c9dc:	73fb      	strb	r3, [r7, #15]
    break;
 800c9de:	e002      	b.n	800c9e6 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800c9e0:	2302      	movs	r3, #2
 800c9e2:	73fb      	strb	r3, [r7, #15]
    break;
 800c9e4:	bf00      	nop
  }
  return usb_status;
 800c9e6:	7bfb      	ldrb	r3, [r7, #15]
}
 800c9e8:	4618      	mov	r0, r3
 800c9ea:	3714      	adds	r7, #20
 800c9ec:	46bd      	mov	sp, r7
 800c9ee:	bc80      	pop	{r7}
 800c9f0:	4770      	bx	lr
 800c9f2:	bf00      	nop

0800c9f4 <cos>:
 800c9f4:	b530      	push	{r4, r5, lr}
 800c9f6:	4a1e      	ldr	r2, [pc, #120]	; (800ca70 <cos+0x7c>)
 800c9f8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800c9fc:	4293      	cmp	r3, r2
 800c9fe:	b087      	sub	sp, #28
 800ca00:	dc04      	bgt.n	800ca0c <cos+0x18>
 800ca02:	2200      	movs	r2, #0
 800ca04:	2300      	movs	r3, #0
 800ca06:	f000 fd7b 	bl	800d500 <__kernel_cos>
 800ca0a:	e006      	b.n	800ca1a <cos+0x26>
 800ca0c:	4a19      	ldr	r2, [pc, #100]	; (800ca74 <cos+0x80>)
 800ca0e:	4293      	cmp	r3, r2
 800ca10:	dd05      	ble.n	800ca1e <cos+0x2a>
 800ca12:	4602      	mov	r2, r0
 800ca14:	460b      	mov	r3, r1
 800ca16:	f7f3 fbe3 	bl	80001e0 <__aeabi_dsub>
 800ca1a:	b007      	add	sp, #28
 800ca1c:	bd30      	pop	{r4, r5, pc}
 800ca1e:	aa02      	add	r2, sp, #8
 800ca20:	f000 f9ca 	bl	800cdb8 <__ieee754_rem_pio2>
 800ca24:	f000 0003 	and.w	r0, r0, #3
 800ca28:	2801      	cmp	r0, #1
 800ca2a:	d007      	beq.n	800ca3c <cos+0x48>
 800ca2c:	2802      	cmp	r0, #2
 800ca2e:	d00f      	beq.n	800ca50 <cos+0x5c>
 800ca30:	b9a8      	cbnz	r0, 800ca5e <cos+0x6a>
 800ca32:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ca36:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ca3a:	e7e4      	b.n	800ca06 <cos+0x12>
 800ca3c:	9000      	str	r0, [sp, #0]
 800ca3e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ca42:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ca46:	f001 f963 	bl	800dd10 <__kernel_sin>
 800ca4a:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 800ca4e:	e7e4      	b.n	800ca1a <cos+0x26>
 800ca50:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ca54:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ca58:	f000 fd52 	bl	800d500 <__kernel_cos>
 800ca5c:	e7f5      	b.n	800ca4a <cos+0x56>
 800ca5e:	2301      	movs	r3, #1
 800ca60:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ca64:	9300      	str	r3, [sp, #0]
 800ca66:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ca6a:	f001 f951 	bl	800dd10 <__kernel_sin>
 800ca6e:	e7d4      	b.n	800ca1a <cos+0x26>
 800ca70:	3fe921fb 	.word	0x3fe921fb
 800ca74:	7fefffff 	.word	0x7fefffff

0800ca78 <sin>:
 800ca78:	b530      	push	{r4, r5, lr}
 800ca7a:	4a20      	ldr	r2, [pc, #128]	; (800cafc <sin+0x84>)
 800ca7c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800ca80:	4293      	cmp	r3, r2
 800ca82:	b087      	sub	sp, #28
 800ca84:	dc06      	bgt.n	800ca94 <sin+0x1c>
 800ca86:	2300      	movs	r3, #0
 800ca88:	2200      	movs	r2, #0
 800ca8a:	9300      	str	r3, [sp, #0]
 800ca8c:	2300      	movs	r3, #0
 800ca8e:	f001 f93f 	bl	800dd10 <__kernel_sin>
 800ca92:	e006      	b.n	800caa2 <sin+0x2a>
 800ca94:	4a1a      	ldr	r2, [pc, #104]	; (800cb00 <sin+0x88>)
 800ca96:	4293      	cmp	r3, r2
 800ca98:	dd05      	ble.n	800caa6 <sin+0x2e>
 800ca9a:	4602      	mov	r2, r0
 800ca9c:	460b      	mov	r3, r1
 800ca9e:	f7f3 fb9f 	bl	80001e0 <__aeabi_dsub>
 800caa2:	b007      	add	sp, #28
 800caa4:	bd30      	pop	{r4, r5, pc}
 800caa6:	aa02      	add	r2, sp, #8
 800caa8:	f000 f986 	bl	800cdb8 <__ieee754_rem_pio2>
 800caac:	f000 0003 	and.w	r0, r0, #3
 800cab0:	2801      	cmp	r0, #1
 800cab2:	d009      	beq.n	800cac8 <sin+0x50>
 800cab4:	2802      	cmp	r0, #2
 800cab6:	d00e      	beq.n	800cad6 <sin+0x5e>
 800cab8:	b9c0      	cbnz	r0, 800caec <sin+0x74>
 800caba:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cabe:	2301      	movs	r3, #1
 800cac0:	9300      	str	r3, [sp, #0]
 800cac2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800cac6:	e7e2      	b.n	800ca8e <sin+0x16>
 800cac8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800cacc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cad0:	f000 fd16 	bl	800d500 <__kernel_cos>
 800cad4:	e7e5      	b.n	800caa2 <sin+0x2a>
 800cad6:	2301      	movs	r3, #1
 800cad8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cadc:	9300      	str	r3, [sp, #0]
 800cade:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800cae2:	f001 f915 	bl	800dd10 <__kernel_sin>
 800cae6:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 800caea:	e7da      	b.n	800caa2 <sin+0x2a>
 800caec:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800caf0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800caf4:	f000 fd04 	bl	800d500 <__kernel_cos>
 800caf8:	e7f5      	b.n	800cae6 <sin+0x6e>
 800cafa:	bf00      	nop
 800cafc:	3fe921fb 	.word	0x3fe921fb
 800cb00:	7fefffff 	.word	0x7fefffff

0800cb04 <atanf>:
 800cb04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cb08:	f020 4500 	bic.w	r5, r0, #2147483648	; 0x80000000
 800cb0c:	f1b5 4fa1 	cmp.w	r5, #1350565888	; 0x50800000
 800cb10:	4604      	mov	r4, r0
 800cb12:	4680      	mov	r8, r0
 800cb14:	db0e      	blt.n	800cb34 <atanf+0x30>
 800cb16:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 800cb1a:	dd04      	ble.n	800cb26 <atanf+0x22>
 800cb1c:	4601      	mov	r1, r0
 800cb1e:	f7f4 f865 	bl	8000bec <__addsf3>
 800cb22:	4604      	mov	r4, r0
 800cb24:	e003      	b.n	800cb2e <atanf+0x2a>
 800cb26:	2800      	cmp	r0, #0
 800cb28:	f300 80ce 	bgt.w	800ccc8 <atanf+0x1c4>
 800cb2c:	4c67      	ldr	r4, [pc, #412]	; (800cccc <atanf+0x1c8>)
 800cb2e:	4620      	mov	r0, r4
 800cb30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cb34:	4b66      	ldr	r3, [pc, #408]	; (800ccd0 <atanf+0x1cc>)
 800cb36:	429d      	cmp	r5, r3
 800cb38:	dc0e      	bgt.n	800cb58 <atanf+0x54>
 800cb3a:	f1b5 5f44 	cmp.w	r5, #822083584	; 0x31000000
 800cb3e:	da08      	bge.n	800cb52 <atanf+0x4e>
 800cb40:	4964      	ldr	r1, [pc, #400]	; (800ccd4 <atanf+0x1d0>)
 800cb42:	f7f4 f853 	bl	8000bec <__addsf3>
 800cb46:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800cb4a:	f7f4 fb13 	bl	8001174 <__aeabi_fcmpgt>
 800cb4e:	2800      	cmp	r0, #0
 800cb50:	d1ed      	bne.n	800cb2e <atanf+0x2a>
 800cb52:	f04f 36ff 	mov.w	r6, #4294967295
 800cb56:	e01c      	b.n	800cb92 <atanf+0x8e>
 800cb58:	f000 f8e0 	bl	800cd1c <fabsf>
 800cb5c:	4b5e      	ldr	r3, [pc, #376]	; (800ccd8 <atanf+0x1d4>)
 800cb5e:	4604      	mov	r4, r0
 800cb60:	429d      	cmp	r5, r3
 800cb62:	dc7c      	bgt.n	800cc5e <atanf+0x15a>
 800cb64:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 800cb68:	429d      	cmp	r5, r3
 800cb6a:	dc67      	bgt.n	800cc3c <atanf+0x138>
 800cb6c:	4601      	mov	r1, r0
 800cb6e:	f7f4 f83d 	bl	8000bec <__addsf3>
 800cb72:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800cb76:	f7f4 f837 	bl	8000be8 <__aeabi_fsub>
 800cb7a:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800cb7e:	4605      	mov	r5, r0
 800cb80:	4620      	mov	r0, r4
 800cb82:	f7f4 f833 	bl	8000bec <__addsf3>
 800cb86:	4601      	mov	r1, r0
 800cb88:	4628      	mov	r0, r5
 800cb8a:	f7f4 f9eb 	bl	8000f64 <__aeabi_fdiv>
 800cb8e:	2600      	movs	r6, #0
 800cb90:	4604      	mov	r4, r0
 800cb92:	4621      	mov	r1, r4
 800cb94:	4620      	mov	r0, r4
 800cb96:	f7f4 f931 	bl	8000dfc <__aeabi_fmul>
 800cb9a:	4601      	mov	r1, r0
 800cb9c:	4607      	mov	r7, r0
 800cb9e:	f7f4 f92d 	bl	8000dfc <__aeabi_fmul>
 800cba2:	4605      	mov	r5, r0
 800cba4:	494d      	ldr	r1, [pc, #308]	; (800ccdc <atanf+0x1d8>)
 800cba6:	f7f4 f929 	bl	8000dfc <__aeabi_fmul>
 800cbaa:	494d      	ldr	r1, [pc, #308]	; (800cce0 <atanf+0x1dc>)
 800cbac:	f7f4 f81e 	bl	8000bec <__addsf3>
 800cbb0:	4629      	mov	r1, r5
 800cbb2:	f7f4 f923 	bl	8000dfc <__aeabi_fmul>
 800cbb6:	494b      	ldr	r1, [pc, #300]	; (800cce4 <atanf+0x1e0>)
 800cbb8:	f7f4 f818 	bl	8000bec <__addsf3>
 800cbbc:	4629      	mov	r1, r5
 800cbbe:	f7f4 f91d 	bl	8000dfc <__aeabi_fmul>
 800cbc2:	4949      	ldr	r1, [pc, #292]	; (800cce8 <atanf+0x1e4>)
 800cbc4:	f7f4 f812 	bl	8000bec <__addsf3>
 800cbc8:	4629      	mov	r1, r5
 800cbca:	f7f4 f917 	bl	8000dfc <__aeabi_fmul>
 800cbce:	4947      	ldr	r1, [pc, #284]	; (800ccec <atanf+0x1e8>)
 800cbd0:	f7f4 f80c 	bl	8000bec <__addsf3>
 800cbd4:	4629      	mov	r1, r5
 800cbd6:	f7f4 f911 	bl	8000dfc <__aeabi_fmul>
 800cbda:	4945      	ldr	r1, [pc, #276]	; (800ccf0 <atanf+0x1ec>)
 800cbdc:	f7f4 f806 	bl	8000bec <__addsf3>
 800cbe0:	4639      	mov	r1, r7
 800cbe2:	f7f4 f90b 	bl	8000dfc <__aeabi_fmul>
 800cbe6:	4943      	ldr	r1, [pc, #268]	; (800ccf4 <atanf+0x1f0>)
 800cbe8:	4607      	mov	r7, r0
 800cbea:	4628      	mov	r0, r5
 800cbec:	f7f4 f906 	bl	8000dfc <__aeabi_fmul>
 800cbf0:	4941      	ldr	r1, [pc, #260]	; (800ccf8 <atanf+0x1f4>)
 800cbf2:	f7f3 fff9 	bl	8000be8 <__aeabi_fsub>
 800cbf6:	4629      	mov	r1, r5
 800cbf8:	f7f4 f900 	bl	8000dfc <__aeabi_fmul>
 800cbfc:	493f      	ldr	r1, [pc, #252]	; (800ccfc <atanf+0x1f8>)
 800cbfe:	f7f3 fff3 	bl	8000be8 <__aeabi_fsub>
 800cc02:	4629      	mov	r1, r5
 800cc04:	f7f4 f8fa 	bl	8000dfc <__aeabi_fmul>
 800cc08:	493d      	ldr	r1, [pc, #244]	; (800cd00 <atanf+0x1fc>)
 800cc0a:	f7f3 ffed 	bl	8000be8 <__aeabi_fsub>
 800cc0e:	4629      	mov	r1, r5
 800cc10:	f7f4 f8f4 	bl	8000dfc <__aeabi_fmul>
 800cc14:	493b      	ldr	r1, [pc, #236]	; (800cd04 <atanf+0x200>)
 800cc16:	f7f3 ffe7 	bl	8000be8 <__aeabi_fsub>
 800cc1a:	4629      	mov	r1, r5
 800cc1c:	f7f4 f8ee 	bl	8000dfc <__aeabi_fmul>
 800cc20:	4601      	mov	r1, r0
 800cc22:	4638      	mov	r0, r7
 800cc24:	f7f3 ffe2 	bl	8000bec <__addsf3>
 800cc28:	4621      	mov	r1, r4
 800cc2a:	f7f4 f8e7 	bl	8000dfc <__aeabi_fmul>
 800cc2e:	1c73      	adds	r3, r6, #1
 800cc30:	4601      	mov	r1, r0
 800cc32:	d133      	bne.n	800cc9c <atanf+0x198>
 800cc34:	4620      	mov	r0, r4
 800cc36:	f7f3 ffd7 	bl	8000be8 <__aeabi_fsub>
 800cc3a:	e772      	b.n	800cb22 <atanf+0x1e>
 800cc3c:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800cc40:	f7f3 ffd2 	bl	8000be8 <__aeabi_fsub>
 800cc44:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800cc48:	4605      	mov	r5, r0
 800cc4a:	4620      	mov	r0, r4
 800cc4c:	f7f3 ffce 	bl	8000bec <__addsf3>
 800cc50:	4601      	mov	r1, r0
 800cc52:	4628      	mov	r0, r5
 800cc54:	f7f4 f986 	bl	8000f64 <__aeabi_fdiv>
 800cc58:	2601      	movs	r6, #1
 800cc5a:	4604      	mov	r4, r0
 800cc5c:	e799      	b.n	800cb92 <atanf+0x8e>
 800cc5e:	4b2a      	ldr	r3, [pc, #168]	; (800cd08 <atanf+0x204>)
 800cc60:	429d      	cmp	r5, r3
 800cc62:	dc14      	bgt.n	800cc8e <atanf+0x18a>
 800cc64:	f04f 517f 	mov.w	r1, #1069547520	; 0x3fc00000
 800cc68:	f7f3 ffbe 	bl	8000be8 <__aeabi_fsub>
 800cc6c:	f04f 517f 	mov.w	r1, #1069547520	; 0x3fc00000
 800cc70:	4605      	mov	r5, r0
 800cc72:	4620      	mov	r0, r4
 800cc74:	f7f4 f8c2 	bl	8000dfc <__aeabi_fmul>
 800cc78:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800cc7c:	f7f3 ffb6 	bl	8000bec <__addsf3>
 800cc80:	4601      	mov	r1, r0
 800cc82:	4628      	mov	r0, r5
 800cc84:	f7f4 f96e 	bl	8000f64 <__aeabi_fdiv>
 800cc88:	2602      	movs	r6, #2
 800cc8a:	4604      	mov	r4, r0
 800cc8c:	e781      	b.n	800cb92 <atanf+0x8e>
 800cc8e:	4601      	mov	r1, r0
 800cc90:	481e      	ldr	r0, [pc, #120]	; (800cd0c <atanf+0x208>)
 800cc92:	f7f4 f967 	bl	8000f64 <__aeabi_fdiv>
 800cc96:	2603      	movs	r6, #3
 800cc98:	4604      	mov	r4, r0
 800cc9a:	e77a      	b.n	800cb92 <atanf+0x8e>
 800cc9c:	4b1c      	ldr	r3, [pc, #112]	; (800cd10 <atanf+0x20c>)
 800cc9e:	f853 1026 	ldr.w	r1, [r3, r6, lsl #2]
 800cca2:	f7f3 ffa1 	bl	8000be8 <__aeabi_fsub>
 800cca6:	4621      	mov	r1, r4
 800cca8:	f7f3 ff9e 	bl	8000be8 <__aeabi_fsub>
 800ccac:	4b19      	ldr	r3, [pc, #100]	; (800cd14 <atanf+0x210>)
 800ccae:	4601      	mov	r1, r0
 800ccb0:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800ccb4:	f7f3 ff98 	bl	8000be8 <__aeabi_fsub>
 800ccb8:	f1b8 0f00 	cmp.w	r8, #0
 800ccbc:	4604      	mov	r4, r0
 800ccbe:	f6bf af36 	bge.w	800cb2e <atanf+0x2a>
 800ccc2:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800ccc6:	e72c      	b.n	800cb22 <atanf+0x1e>
 800ccc8:	4c13      	ldr	r4, [pc, #76]	; (800cd18 <atanf+0x214>)
 800ccca:	e730      	b.n	800cb2e <atanf+0x2a>
 800cccc:	bfc90fdb 	.word	0xbfc90fdb
 800ccd0:	3edfffff 	.word	0x3edfffff
 800ccd4:	7149f2ca 	.word	0x7149f2ca
 800ccd8:	3f97ffff 	.word	0x3f97ffff
 800ccdc:	3c8569d7 	.word	0x3c8569d7
 800cce0:	3d4bda59 	.word	0x3d4bda59
 800cce4:	3d886b35 	.word	0x3d886b35
 800cce8:	3dba2e6e 	.word	0x3dba2e6e
 800ccec:	3e124925 	.word	0x3e124925
 800ccf0:	3eaaaaab 	.word	0x3eaaaaab
 800ccf4:	bd15a221 	.word	0xbd15a221
 800ccf8:	3d6ef16b 	.word	0x3d6ef16b
 800ccfc:	3d9d8795 	.word	0x3d9d8795
 800cd00:	3de38e38 	.word	0x3de38e38
 800cd04:	3e4ccccd 	.word	0x3e4ccccd
 800cd08:	401bffff 	.word	0x401bffff
 800cd0c:	bf800000 	.word	0xbf800000
 800cd10:	080117a4 	.word	0x080117a4
 800cd14:	08011794 	.word	0x08011794
 800cd18:	3fc90fdb 	.word	0x3fc90fdb

0800cd1c <fabsf>:
 800cd1c:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800cd20:	4770      	bx	lr
	...

0800cd24 <acosf>:
 800cd24:	b538      	push	{r3, r4, r5, lr}
 800cd26:	4604      	mov	r4, r0
 800cd28:	f000 fa36 	bl	800d198 <__ieee754_acosf>
 800cd2c:	4b0e      	ldr	r3, [pc, #56]	; (800cd68 <acosf+0x44>)
 800cd2e:	4605      	mov	r5, r0
 800cd30:	f993 3000 	ldrsb.w	r3, [r3]
 800cd34:	3301      	adds	r3, #1
 800cd36:	d015      	beq.n	800cd64 <acosf+0x40>
 800cd38:	4621      	mov	r1, r4
 800cd3a:	4620      	mov	r0, r4
 800cd3c:	f7f4 fa24 	bl	8001188 <__aeabi_fcmpun>
 800cd40:	b980      	cbnz	r0, 800cd64 <acosf+0x40>
 800cd42:	4620      	mov	r0, r4
 800cd44:	f7ff ffea 	bl	800cd1c <fabsf>
 800cd48:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800cd4c:	f7f4 fa12 	bl	8001174 <__aeabi_fcmpgt>
 800cd50:	b140      	cbz	r0, 800cd64 <acosf+0x40>
 800cd52:	f001 f9a3 	bl	800e09c <__errno>
 800cd56:	2321      	movs	r3, #33	; 0x21
 800cd58:	6003      	str	r3, [r0, #0]
 800cd5a:	4804      	ldr	r0, [pc, #16]	; (800cd6c <acosf+0x48>)
 800cd5c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cd60:	f001 b998 	b.w	800e094 <nanf>
 800cd64:	4628      	mov	r0, r5
 800cd66:	bd38      	pop	{r3, r4, r5, pc}
 800cd68:	20000186 	.word	0x20000186
 800cd6c:	08011c08 	.word	0x08011c08

0800cd70 <sqrtf>:
 800cd70:	b538      	push	{r3, r4, r5, lr}
 800cd72:	4605      	mov	r5, r0
 800cd74:	f000 fb72 	bl	800d45c <__ieee754_sqrtf>
 800cd78:	4b0d      	ldr	r3, [pc, #52]	; (800cdb0 <sqrtf+0x40>)
 800cd7a:	4604      	mov	r4, r0
 800cd7c:	f993 3000 	ldrsb.w	r3, [r3]
 800cd80:	3301      	adds	r3, #1
 800cd82:	d012      	beq.n	800cdaa <sqrtf+0x3a>
 800cd84:	4629      	mov	r1, r5
 800cd86:	4628      	mov	r0, r5
 800cd88:	f7f4 f9fe 	bl	8001188 <__aeabi_fcmpun>
 800cd8c:	b968      	cbnz	r0, 800cdaa <sqrtf+0x3a>
 800cd8e:	2100      	movs	r1, #0
 800cd90:	4628      	mov	r0, r5
 800cd92:	f7f4 f9d1 	bl	8001138 <__aeabi_fcmplt>
 800cd96:	b140      	cbz	r0, 800cdaa <sqrtf+0x3a>
 800cd98:	f001 f980 	bl	800e09c <__errno>
 800cd9c:	2321      	movs	r3, #33	; 0x21
 800cd9e:	2100      	movs	r1, #0
 800cda0:	6003      	str	r3, [r0, #0]
 800cda2:	4608      	mov	r0, r1
 800cda4:	f7f4 f8de 	bl	8000f64 <__aeabi_fdiv>
 800cda8:	4604      	mov	r4, r0
 800cdaa:	4620      	mov	r0, r4
 800cdac:	bd38      	pop	{r3, r4, r5, pc}
 800cdae:	bf00      	nop
 800cdb0:	20000186 	.word	0x20000186
 800cdb4:	00000000 	.word	0x00000000

0800cdb8 <__ieee754_rem_pio2>:
 800cdb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cdbc:	4614      	mov	r4, r2
 800cdbe:	4ac4      	ldr	r2, [pc, #784]	; (800d0d0 <__ieee754_rem_pio2+0x318>)
 800cdc0:	f021 4a00 	bic.w	sl, r1, #2147483648	; 0x80000000
 800cdc4:	b08d      	sub	sp, #52	; 0x34
 800cdc6:	4592      	cmp	sl, r2
 800cdc8:	9104      	str	r1, [sp, #16]
 800cdca:	dc07      	bgt.n	800cddc <__ieee754_rem_pio2+0x24>
 800cdcc:	2200      	movs	r2, #0
 800cdce:	2300      	movs	r3, #0
 800cdd0:	e9c4 0100 	strd	r0, r1, [r4]
 800cdd4:	e9c4 2302 	strd	r2, r3, [r4, #8]
 800cdd8:	2500      	movs	r5, #0
 800cdda:	e024      	b.n	800ce26 <__ieee754_rem_pio2+0x6e>
 800cddc:	4abd      	ldr	r2, [pc, #756]	; (800d0d4 <__ieee754_rem_pio2+0x31c>)
 800cdde:	4592      	cmp	sl, r2
 800cde0:	dc72      	bgt.n	800cec8 <__ieee754_rem_pio2+0x110>
 800cde2:	9b04      	ldr	r3, [sp, #16]
 800cde4:	4dbc      	ldr	r5, [pc, #752]	; (800d0d8 <__ieee754_rem_pio2+0x320>)
 800cde6:	2b00      	cmp	r3, #0
 800cde8:	a3ab      	add	r3, pc, #684	; (adr r3, 800d098 <__ieee754_rem_pio2+0x2e0>)
 800cdea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cdee:	dd36      	ble.n	800ce5e <__ieee754_rem_pio2+0xa6>
 800cdf0:	f7f3 f9f6 	bl	80001e0 <__aeabi_dsub>
 800cdf4:	45aa      	cmp	sl, r5
 800cdf6:	4606      	mov	r6, r0
 800cdf8:	460f      	mov	r7, r1
 800cdfa:	d018      	beq.n	800ce2e <__ieee754_rem_pio2+0x76>
 800cdfc:	a3a8      	add	r3, pc, #672	; (adr r3, 800d0a0 <__ieee754_rem_pio2+0x2e8>)
 800cdfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce02:	f7f3 f9ed 	bl	80001e0 <__aeabi_dsub>
 800ce06:	4602      	mov	r2, r0
 800ce08:	460b      	mov	r3, r1
 800ce0a:	4630      	mov	r0, r6
 800ce0c:	e9c4 2300 	strd	r2, r3, [r4]
 800ce10:	4639      	mov	r1, r7
 800ce12:	f7f3 f9e5 	bl	80001e0 <__aeabi_dsub>
 800ce16:	a3a2      	add	r3, pc, #648	; (adr r3, 800d0a0 <__ieee754_rem_pio2+0x2e8>)
 800ce18:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce1c:	f7f3 f9e0 	bl	80001e0 <__aeabi_dsub>
 800ce20:	2501      	movs	r5, #1
 800ce22:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800ce26:	4628      	mov	r0, r5
 800ce28:	b00d      	add	sp, #52	; 0x34
 800ce2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ce2e:	a39e      	add	r3, pc, #632	; (adr r3, 800d0a8 <__ieee754_rem_pio2+0x2f0>)
 800ce30:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce34:	f7f3 f9d4 	bl	80001e0 <__aeabi_dsub>
 800ce38:	a39d      	add	r3, pc, #628	; (adr r3, 800d0b0 <__ieee754_rem_pio2+0x2f8>)
 800ce3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce3e:	4606      	mov	r6, r0
 800ce40:	460f      	mov	r7, r1
 800ce42:	f7f3 f9cd 	bl	80001e0 <__aeabi_dsub>
 800ce46:	4602      	mov	r2, r0
 800ce48:	460b      	mov	r3, r1
 800ce4a:	4630      	mov	r0, r6
 800ce4c:	e9c4 2300 	strd	r2, r3, [r4]
 800ce50:	4639      	mov	r1, r7
 800ce52:	f7f3 f9c5 	bl	80001e0 <__aeabi_dsub>
 800ce56:	a396      	add	r3, pc, #600	; (adr r3, 800d0b0 <__ieee754_rem_pio2+0x2f8>)
 800ce58:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce5c:	e7de      	b.n	800ce1c <__ieee754_rem_pio2+0x64>
 800ce5e:	f7f3 f9c1 	bl	80001e4 <__adddf3>
 800ce62:	45aa      	cmp	sl, r5
 800ce64:	4606      	mov	r6, r0
 800ce66:	460f      	mov	r7, r1
 800ce68:	d016      	beq.n	800ce98 <__ieee754_rem_pio2+0xe0>
 800ce6a:	a38d      	add	r3, pc, #564	; (adr r3, 800d0a0 <__ieee754_rem_pio2+0x2e8>)
 800ce6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce70:	f7f3 f9b8 	bl	80001e4 <__adddf3>
 800ce74:	4602      	mov	r2, r0
 800ce76:	460b      	mov	r3, r1
 800ce78:	4630      	mov	r0, r6
 800ce7a:	e9c4 2300 	strd	r2, r3, [r4]
 800ce7e:	4639      	mov	r1, r7
 800ce80:	f7f3 f9ae 	bl	80001e0 <__aeabi_dsub>
 800ce84:	a386      	add	r3, pc, #536	; (adr r3, 800d0a0 <__ieee754_rem_pio2+0x2e8>)
 800ce86:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce8a:	f7f3 f9ab 	bl	80001e4 <__adddf3>
 800ce8e:	f04f 35ff 	mov.w	r5, #4294967295
 800ce92:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800ce96:	e7c6      	b.n	800ce26 <__ieee754_rem_pio2+0x6e>
 800ce98:	a383      	add	r3, pc, #524	; (adr r3, 800d0a8 <__ieee754_rem_pio2+0x2f0>)
 800ce9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce9e:	f7f3 f9a1 	bl	80001e4 <__adddf3>
 800cea2:	a383      	add	r3, pc, #524	; (adr r3, 800d0b0 <__ieee754_rem_pio2+0x2f8>)
 800cea4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cea8:	4606      	mov	r6, r0
 800ceaa:	460f      	mov	r7, r1
 800ceac:	f7f3 f99a 	bl	80001e4 <__adddf3>
 800ceb0:	4602      	mov	r2, r0
 800ceb2:	460b      	mov	r3, r1
 800ceb4:	4630      	mov	r0, r6
 800ceb6:	e9c4 2300 	strd	r2, r3, [r4]
 800ceba:	4639      	mov	r1, r7
 800cebc:	f7f3 f990 	bl	80001e0 <__aeabi_dsub>
 800cec0:	a37b      	add	r3, pc, #492	; (adr r3, 800d0b0 <__ieee754_rem_pio2+0x2f8>)
 800cec2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cec6:	e7e0      	b.n	800ce8a <__ieee754_rem_pio2+0xd2>
 800cec8:	4a84      	ldr	r2, [pc, #528]	; (800d0dc <__ieee754_rem_pio2+0x324>)
 800ceca:	4592      	cmp	sl, r2
 800cecc:	f300 80d5 	bgt.w	800d07a <__ieee754_rem_pio2+0x2c2>
 800ced0:	f000 ffd4 	bl	800de7c <fabs>
 800ced4:	a378      	add	r3, pc, #480	; (adr r3, 800d0b8 <__ieee754_rem_pio2+0x300>)
 800ced6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ceda:	4606      	mov	r6, r0
 800cedc:	460f      	mov	r7, r1
 800cede:	f7f3 fb37 	bl	8000550 <__aeabi_dmul>
 800cee2:	2200      	movs	r2, #0
 800cee4:	4b7e      	ldr	r3, [pc, #504]	; (800d0e0 <__ieee754_rem_pio2+0x328>)
 800cee6:	f7f3 f97d 	bl	80001e4 <__adddf3>
 800ceea:	f7f3 fde1 	bl	8000ab0 <__aeabi_d2iz>
 800ceee:	4605      	mov	r5, r0
 800cef0:	f7f3 fac4 	bl	800047c <__aeabi_i2d>
 800cef4:	4602      	mov	r2, r0
 800cef6:	460b      	mov	r3, r1
 800cef8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800cefc:	a366      	add	r3, pc, #408	; (adr r3, 800d098 <__ieee754_rem_pio2+0x2e0>)
 800cefe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf02:	f7f3 fb25 	bl	8000550 <__aeabi_dmul>
 800cf06:	4602      	mov	r2, r0
 800cf08:	460b      	mov	r3, r1
 800cf0a:	4630      	mov	r0, r6
 800cf0c:	4639      	mov	r1, r7
 800cf0e:	f7f3 f967 	bl	80001e0 <__aeabi_dsub>
 800cf12:	a363      	add	r3, pc, #396	; (adr r3, 800d0a0 <__ieee754_rem_pio2+0x2e8>)
 800cf14:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf18:	4680      	mov	r8, r0
 800cf1a:	4689      	mov	r9, r1
 800cf1c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cf20:	f7f3 fb16 	bl	8000550 <__aeabi_dmul>
 800cf24:	2d1f      	cmp	r5, #31
 800cf26:	4606      	mov	r6, r0
 800cf28:	460f      	mov	r7, r1
 800cf2a:	dc0e      	bgt.n	800cf4a <__ieee754_rem_pio2+0x192>
 800cf2c:	4b6d      	ldr	r3, [pc, #436]	; (800d0e4 <__ieee754_rem_pio2+0x32c>)
 800cf2e:	1e6a      	subs	r2, r5, #1
 800cf30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cf34:	4553      	cmp	r3, sl
 800cf36:	d008      	beq.n	800cf4a <__ieee754_rem_pio2+0x192>
 800cf38:	4632      	mov	r2, r6
 800cf3a:	463b      	mov	r3, r7
 800cf3c:	4640      	mov	r0, r8
 800cf3e:	4649      	mov	r1, r9
 800cf40:	f7f3 f94e 	bl	80001e0 <__aeabi_dsub>
 800cf44:	e9c4 0100 	strd	r0, r1, [r4]
 800cf48:	e013      	b.n	800cf72 <__ieee754_rem_pio2+0x1ba>
 800cf4a:	463b      	mov	r3, r7
 800cf4c:	4632      	mov	r2, r6
 800cf4e:	4640      	mov	r0, r8
 800cf50:	4649      	mov	r1, r9
 800cf52:	f7f3 f945 	bl	80001e0 <__aeabi_dsub>
 800cf56:	ea4f 532a 	mov.w	r3, sl, asr #20
 800cf5a:	9305      	str	r3, [sp, #20]
 800cf5c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800cf60:	ebc3 5a1a 	rsb	sl, r3, sl, lsr #20
 800cf64:	f1ba 0f10 	cmp.w	sl, #16
 800cf68:	dc1f      	bgt.n	800cfaa <__ieee754_rem_pio2+0x1f2>
 800cf6a:	4602      	mov	r2, r0
 800cf6c:	460b      	mov	r3, r1
 800cf6e:	e9c4 2300 	strd	r2, r3, [r4]
 800cf72:	e9d4 2a00 	ldrd	r2, sl, [r4]
 800cf76:	4640      	mov	r0, r8
 800cf78:	4653      	mov	r3, sl
 800cf7a:	4649      	mov	r1, r9
 800cf7c:	f7f3 f930 	bl	80001e0 <__aeabi_dsub>
 800cf80:	4632      	mov	r2, r6
 800cf82:	463b      	mov	r3, r7
 800cf84:	f7f3 f92c 	bl	80001e0 <__aeabi_dsub>
 800cf88:	460b      	mov	r3, r1
 800cf8a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800cf8e:	9904      	ldr	r1, [sp, #16]
 800cf90:	4602      	mov	r2, r0
 800cf92:	2900      	cmp	r1, #0
 800cf94:	f6bf af47 	bge.w	800ce26 <__ieee754_rem_pio2+0x6e>
 800cf98:	f10a 4100 	add.w	r1, sl, #2147483648	; 0x80000000
 800cf9c:	e9c4 1201 	strd	r1, r2, [r4, #4]
 800cfa0:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800cfa4:	60e3      	str	r3, [r4, #12]
 800cfa6:	426d      	negs	r5, r5
 800cfa8:	e73d      	b.n	800ce26 <__ieee754_rem_pio2+0x6e>
 800cfaa:	a33f      	add	r3, pc, #252	; (adr r3, 800d0a8 <__ieee754_rem_pio2+0x2f0>)
 800cfac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cfb0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cfb4:	f7f3 facc 	bl	8000550 <__aeabi_dmul>
 800cfb8:	4606      	mov	r6, r0
 800cfba:	460f      	mov	r7, r1
 800cfbc:	4602      	mov	r2, r0
 800cfbe:	460b      	mov	r3, r1
 800cfc0:	4640      	mov	r0, r8
 800cfc2:	4649      	mov	r1, r9
 800cfc4:	f7f3 f90c 	bl	80001e0 <__aeabi_dsub>
 800cfc8:	4602      	mov	r2, r0
 800cfca:	460b      	mov	r3, r1
 800cfcc:	4682      	mov	sl, r0
 800cfce:	468b      	mov	fp, r1
 800cfd0:	4640      	mov	r0, r8
 800cfd2:	4649      	mov	r1, r9
 800cfd4:	f7f3 f904 	bl	80001e0 <__aeabi_dsub>
 800cfd8:	4632      	mov	r2, r6
 800cfda:	463b      	mov	r3, r7
 800cfdc:	f7f3 f900 	bl	80001e0 <__aeabi_dsub>
 800cfe0:	a333      	add	r3, pc, #204	; (adr r3, 800d0b0 <__ieee754_rem_pio2+0x2f8>)
 800cfe2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cfe6:	4606      	mov	r6, r0
 800cfe8:	460f      	mov	r7, r1
 800cfea:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cfee:	f7f3 faaf 	bl	8000550 <__aeabi_dmul>
 800cff2:	4632      	mov	r2, r6
 800cff4:	463b      	mov	r3, r7
 800cff6:	f7f3 f8f3 	bl	80001e0 <__aeabi_dsub>
 800cffa:	4602      	mov	r2, r0
 800cffc:	460b      	mov	r3, r1
 800cffe:	4606      	mov	r6, r0
 800d000:	460f      	mov	r7, r1
 800d002:	4650      	mov	r0, sl
 800d004:	4659      	mov	r1, fp
 800d006:	f7f3 f8eb 	bl	80001e0 <__aeabi_dsub>
 800d00a:	9a05      	ldr	r2, [sp, #20]
 800d00c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800d010:	1ad3      	subs	r3, r2, r3
 800d012:	2b31      	cmp	r3, #49	; 0x31
 800d014:	dc06      	bgt.n	800d024 <__ieee754_rem_pio2+0x26c>
 800d016:	4602      	mov	r2, r0
 800d018:	460b      	mov	r3, r1
 800d01a:	46d0      	mov	r8, sl
 800d01c:	46d9      	mov	r9, fp
 800d01e:	e9c4 2300 	strd	r2, r3, [r4]
 800d022:	e7a6      	b.n	800cf72 <__ieee754_rem_pio2+0x1ba>
 800d024:	a326      	add	r3, pc, #152	; (adr r3, 800d0c0 <__ieee754_rem_pio2+0x308>)
 800d026:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d02a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d02e:	f7f3 fa8f 	bl	8000550 <__aeabi_dmul>
 800d032:	4606      	mov	r6, r0
 800d034:	460f      	mov	r7, r1
 800d036:	4602      	mov	r2, r0
 800d038:	460b      	mov	r3, r1
 800d03a:	4650      	mov	r0, sl
 800d03c:	4659      	mov	r1, fp
 800d03e:	f7f3 f8cf 	bl	80001e0 <__aeabi_dsub>
 800d042:	4602      	mov	r2, r0
 800d044:	460b      	mov	r3, r1
 800d046:	4680      	mov	r8, r0
 800d048:	4689      	mov	r9, r1
 800d04a:	4650      	mov	r0, sl
 800d04c:	4659      	mov	r1, fp
 800d04e:	f7f3 f8c7 	bl	80001e0 <__aeabi_dsub>
 800d052:	4632      	mov	r2, r6
 800d054:	463b      	mov	r3, r7
 800d056:	f7f3 f8c3 	bl	80001e0 <__aeabi_dsub>
 800d05a:	a31b      	add	r3, pc, #108	; (adr r3, 800d0c8 <__ieee754_rem_pio2+0x310>)
 800d05c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d060:	4606      	mov	r6, r0
 800d062:	460f      	mov	r7, r1
 800d064:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d068:	f7f3 fa72 	bl	8000550 <__aeabi_dmul>
 800d06c:	4632      	mov	r2, r6
 800d06e:	463b      	mov	r3, r7
 800d070:	f7f3 f8b6 	bl	80001e0 <__aeabi_dsub>
 800d074:	4606      	mov	r6, r0
 800d076:	460f      	mov	r7, r1
 800d078:	e75e      	b.n	800cf38 <__ieee754_rem_pio2+0x180>
 800d07a:	4a1b      	ldr	r2, [pc, #108]	; (800d0e8 <__ieee754_rem_pio2+0x330>)
 800d07c:	4592      	cmp	sl, r2
 800d07e:	dd35      	ble.n	800d0ec <__ieee754_rem_pio2+0x334>
 800d080:	4602      	mov	r2, r0
 800d082:	460b      	mov	r3, r1
 800d084:	f7f3 f8ac 	bl	80001e0 <__aeabi_dsub>
 800d088:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800d08c:	e9c4 0100 	strd	r0, r1, [r4]
 800d090:	e6a2      	b.n	800cdd8 <__ieee754_rem_pio2+0x20>
 800d092:	bf00      	nop
 800d094:	f3af 8000 	nop.w
 800d098:	54400000 	.word	0x54400000
 800d09c:	3ff921fb 	.word	0x3ff921fb
 800d0a0:	1a626331 	.word	0x1a626331
 800d0a4:	3dd0b461 	.word	0x3dd0b461
 800d0a8:	1a600000 	.word	0x1a600000
 800d0ac:	3dd0b461 	.word	0x3dd0b461
 800d0b0:	2e037073 	.word	0x2e037073
 800d0b4:	3ba3198a 	.word	0x3ba3198a
 800d0b8:	6dc9c883 	.word	0x6dc9c883
 800d0bc:	3fe45f30 	.word	0x3fe45f30
 800d0c0:	2e000000 	.word	0x2e000000
 800d0c4:	3ba3198a 	.word	0x3ba3198a
 800d0c8:	252049c1 	.word	0x252049c1
 800d0cc:	397b839a 	.word	0x397b839a
 800d0d0:	3fe921fb 	.word	0x3fe921fb
 800d0d4:	4002d97b 	.word	0x4002d97b
 800d0d8:	3ff921fb 	.word	0x3ff921fb
 800d0dc:	413921fb 	.word	0x413921fb
 800d0e0:	3fe00000 	.word	0x3fe00000
 800d0e4:	080117b4 	.word	0x080117b4
 800d0e8:	7fefffff 	.word	0x7fefffff
 800d0ec:	ea4f 552a 	mov.w	r5, sl, asr #20
 800d0f0:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 800d0f4:	ebaa 5105 	sub.w	r1, sl, r5, lsl #20
 800d0f8:	460f      	mov	r7, r1
 800d0fa:	4606      	mov	r6, r0
 800d0fc:	f7f3 fcd8 	bl	8000ab0 <__aeabi_d2iz>
 800d100:	f7f3 f9bc 	bl	800047c <__aeabi_i2d>
 800d104:	4602      	mov	r2, r0
 800d106:	460b      	mov	r3, r1
 800d108:	4630      	mov	r0, r6
 800d10a:	4639      	mov	r1, r7
 800d10c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800d110:	f7f3 f866 	bl	80001e0 <__aeabi_dsub>
 800d114:	2200      	movs	r2, #0
 800d116:	4b1e      	ldr	r3, [pc, #120]	; (800d190 <__ieee754_rem_pio2+0x3d8>)
 800d118:	f7f3 fa1a 	bl	8000550 <__aeabi_dmul>
 800d11c:	460f      	mov	r7, r1
 800d11e:	4606      	mov	r6, r0
 800d120:	f7f3 fcc6 	bl	8000ab0 <__aeabi_d2iz>
 800d124:	f7f3 f9aa 	bl	800047c <__aeabi_i2d>
 800d128:	4602      	mov	r2, r0
 800d12a:	460b      	mov	r3, r1
 800d12c:	4630      	mov	r0, r6
 800d12e:	4639      	mov	r1, r7
 800d130:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800d134:	f7f3 f854 	bl	80001e0 <__aeabi_dsub>
 800d138:	2200      	movs	r2, #0
 800d13a:	4b15      	ldr	r3, [pc, #84]	; (800d190 <__ieee754_rem_pio2+0x3d8>)
 800d13c:	f7f3 fa08 	bl	8000550 <__aeabi_dmul>
 800d140:	f04f 0803 	mov.w	r8, #3
 800d144:	2600      	movs	r6, #0
 800d146:	2700      	movs	r7, #0
 800d148:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800d14c:	f10d 0928 	add.w	r9, sp, #40	; 0x28
 800d150:	4632      	mov	r2, r6
 800d152:	e879 0102 	ldrd	r0, r1, [r9], #-8
 800d156:	463b      	mov	r3, r7
 800d158:	46c2      	mov	sl, r8
 800d15a:	f108 38ff 	add.w	r8, r8, #4294967295
 800d15e:	f7f3 fc5f 	bl	8000a20 <__aeabi_dcmpeq>
 800d162:	2800      	cmp	r0, #0
 800d164:	d1f4      	bne.n	800d150 <__ieee754_rem_pio2+0x398>
 800d166:	4b0b      	ldr	r3, [pc, #44]	; (800d194 <__ieee754_rem_pio2+0x3dc>)
 800d168:	462a      	mov	r2, r5
 800d16a:	9301      	str	r3, [sp, #4]
 800d16c:	2302      	movs	r3, #2
 800d16e:	4621      	mov	r1, r4
 800d170:	9300      	str	r3, [sp, #0]
 800d172:	a806      	add	r0, sp, #24
 800d174:	4653      	mov	r3, sl
 800d176:	f000 fa81 	bl	800d67c <__kernel_rem_pio2>
 800d17a:	9b04      	ldr	r3, [sp, #16]
 800d17c:	4605      	mov	r5, r0
 800d17e:	2b00      	cmp	r3, #0
 800d180:	f6bf ae51 	bge.w	800ce26 <__ieee754_rem_pio2+0x6e>
 800d184:	6863      	ldr	r3, [r4, #4]
 800d186:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800d18a:	6063      	str	r3, [r4, #4]
 800d18c:	68e3      	ldr	r3, [r4, #12]
 800d18e:	e707      	b.n	800cfa0 <__ieee754_rem_pio2+0x1e8>
 800d190:	41700000 	.word	0x41700000
 800d194:	08011834 	.word	0x08011834

0800d198 <__ieee754_acosf>:
 800d198:	f020 4200 	bic.w	r2, r0, #2147483648	; 0x80000000
 800d19c:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 800d1a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d1a2:	4605      	mov	r5, r0
 800d1a4:	d104      	bne.n	800d1b0 <__ieee754_acosf+0x18>
 800d1a6:	2800      	cmp	r0, #0
 800d1a8:	f300 8135 	bgt.w	800d416 <__ieee754_acosf+0x27e>
 800d1ac:	489c      	ldr	r0, [pc, #624]	; (800d420 <__ieee754_acosf+0x288>)
 800d1ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d1b0:	dd06      	ble.n	800d1c0 <__ieee754_acosf+0x28>
 800d1b2:	4601      	mov	r1, r0
 800d1b4:	f7f3 fd18 	bl	8000be8 <__aeabi_fsub>
 800d1b8:	4601      	mov	r1, r0
 800d1ba:	f7f3 fed3 	bl	8000f64 <__aeabi_fdiv>
 800d1be:	e7f6      	b.n	800d1ae <__ieee754_acosf+0x16>
 800d1c0:	f1b2 5f7c 	cmp.w	r2, #1056964608	; 0x3f000000
 800d1c4:	da57      	bge.n	800d276 <__ieee754_acosf+0xde>
 800d1c6:	f1b2 5f0c 	cmp.w	r2, #587202560	; 0x23000000
 800d1ca:	f340 8126 	ble.w	800d41a <__ieee754_acosf+0x282>
 800d1ce:	4601      	mov	r1, r0
 800d1d0:	f7f3 fe14 	bl	8000dfc <__aeabi_fmul>
 800d1d4:	4604      	mov	r4, r0
 800d1d6:	4993      	ldr	r1, [pc, #588]	; (800d424 <__ieee754_acosf+0x28c>)
 800d1d8:	f7f3 fe10 	bl	8000dfc <__aeabi_fmul>
 800d1dc:	4992      	ldr	r1, [pc, #584]	; (800d428 <__ieee754_acosf+0x290>)
 800d1de:	f7f3 fd05 	bl	8000bec <__addsf3>
 800d1e2:	4621      	mov	r1, r4
 800d1e4:	f7f3 fe0a 	bl	8000dfc <__aeabi_fmul>
 800d1e8:	4990      	ldr	r1, [pc, #576]	; (800d42c <__ieee754_acosf+0x294>)
 800d1ea:	f7f3 fcfd 	bl	8000be8 <__aeabi_fsub>
 800d1ee:	4621      	mov	r1, r4
 800d1f0:	f7f3 fe04 	bl	8000dfc <__aeabi_fmul>
 800d1f4:	498e      	ldr	r1, [pc, #568]	; (800d430 <__ieee754_acosf+0x298>)
 800d1f6:	f7f3 fcf9 	bl	8000bec <__addsf3>
 800d1fa:	4621      	mov	r1, r4
 800d1fc:	f7f3 fdfe 	bl	8000dfc <__aeabi_fmul>
 800d200:	498c      	ldr	r1, [pc, #560]	; (800d434 <__ieee754_acosf+0x29c>)
 800d202:	f7f3 fcf1 	bl	8000be8 <__aeabi_fsub>
 800d206:	4621      	mov	r1, r4
 800d208:	f7f3 fdf8 	bl	8000dfc <__aeabi_fmul>
 800d20c:	498a      	ldr	r1, [pc, #552]	; (800d438 <__ieee754_acosf+0x2a0>)
 800d20e:	f7f3 fced 	bl	8000bec <__addsf3>
 800d212:	4621      	mov	r1, r4
 800d214:	f7f3 fdf2 	bl	8000dfc <__aeabi_fmul>
 800d218:	4988      	ldr	r1, [pc, #544]	; (800d43c <__ieee754_acosf+0x2a4>)
 800d21a:	4606      	mov	r6, r0
 800d21c:	4620      	mov	r0, r4
 800d21e:	f7f3 fded 	bl	8000dfc <__aeabi_fmul>
 800d222:	4987      	ldr	r1, [pc, #540]	; (800d440 <__ieee754_acosf+0x2a8>)
 800d224:	f7f3 fce0 	bl	8000be8 <__aeabi_fsub>
 800d228:	4621      	mov	r1, r4
 800d22a:	f7f3 fde7 	bl	8000dfc <__aeabi_fmul>
 800d22e:	4985      	ldr	r1, [pc, #532]	; (800d444 <__ieee754_acosf+0x2ac>)
 800d230:	f7f3 fcdc 	bl	8000bec <__addsf3>
 800d234:	4621      	mov	r1, r4
 800d236:	f7f3 fde1 	bl	8000dfc <__aeabi_fmul>
 800d23a:	4983      	ldr	r1, [pc, #524]	; (800d448 <__ieee754_acosf+0x2b0>)
 800d23c:	f7f3 fcd4 	bl	8000be8 <__aeabi_fsub>
 800d240:	4621      	mov	r1, r4
 800d242:	f7f3 fddb 	bl	8000dfc <__aeabi_fmul>
 800d246:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800d24a:	f7f3 fccf 	bl	8000bec <__addsf3>
 800d24e:	4601      	mov	r1, r0
 800d250:	4630      	mov	r0, r6
 800d252:	f7f3 fe87 	bl	8000f64 <__aeabi_fdiv>
 800d256:	4629      	mov	r1, r5
 800d258:	f7f3 fdd0 	bl	8000dfc <__aeabi_fmul>
 800d25c:	4601      	mov	r1, r0
 800d25e:	487b      	ldr	r0, [pc, #492]	; (800d44c <__ieee754_acosf+0x2b4>)
 800d260:	f7f3 fcc2 	bl	8000be8 <__aeabi_fsub>
 800d264:	4601      	mov	r1, r0
 800d266:	4628      	mov	r0, r5
 800d268:	f7f3 fcbe 	bl	8000be8 <__aeabi_fsub>
 800d26c:	4601      	mov	r1, r0
 800d26e:	4878      	ldr	r0, [pc, #480]	; (800d450 <__ieee754_acosf+0x2b8>)
 800d270:	f7f3 fcba 	bl	8000be8 <__aeabi_fsub>
 800d274:	e79b      	b.n	800d1ae <__ieee754_acosf+0x16>
 800d276:	2800      	cmp	r0, #0
 800d278:	da5b      	bge.n	800d332 <__ieee754_acosf+0x19a>
 800d27a:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800d27e:	f7f3 fcb5 	bl	8000bec <__addsf3>
 800d282:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800d286:	f7f3 fdb9 	bl	8000dfc <__aeabi_fmul>
 800d28a:	4604      	mov	r4, r0
 800d28c:	4965      	ldr	r1, [pc, #404]	; (800d424 <__ieee754_acosf+0x28c>)
 800d28e:	f7f3 fdb5 	bl	8000dfc <__aeabi_fmul>
 800d292:	4965      	ldr	r1, [pc, #404]	; (800d428 <__ieee754_acosf+0x290>)
 800d294:	f7f3 fcaa 	bl	8000bec <__addsf3>
 800d298:	4621      	mov	r1, r4
 800d29a:	f7f3 fdaf 	bl	8000dfc <__aeabi_fmul>
 800d29e:	4963      	ldr	r1, [pc, #396]	; (800d42c <__ieee754_acosf+0x294>)
 800d2a0:	f7f3 fca2 	bl	8000be8 <__aeabi_fsub>
 800d2a4:	4621      	mov	r1, r4
 800d2a6:	f7f3 fda9 	bl	8000dfc <__aeabi_fmul>
 800d2aa:	4961      	ldr	r1, [pc, #388]	; (800d430 <__ieee754_acosf+0x298>)
 800d2ac:	f7f3 fc9e 	bl	8000bec <__addsf3>
 800d2b0:	4621      	mov	r1, r4
 800d2b2:	f7f3 fda3 	bl	8000dfc <__aeabi_fmul>
 800d2b6:	495f      	ldr	r1, [pc, #380]	; (800d434 <__ieee754_acosf+0x29c>)
 800d2b8:	f7f3 fc96 	bl	8000be8 <__aeabi_fsub>
 800d2bc:	4621      	mov	r1, r4
 800d2be:	f7f3 fd9d 	bl	8000dfc <__aeabi_fmul>
 800d2c2:	495d      	ldr	r1, [pc, #372]	; (800d438 <__ieee754_acosf+0x2a0>)
 800d2c4:	f7f3 fc92 	bl	8000bec <__addsf3>
 800d2c8:	4621      	mov	r1, r4
 800d2ca:	f7f3 fd97 	bl	8000dfc <__aeabi_fmul>
 800d2ce:	4606      	mov	r6, r0
 800d2d0:	4620      	mov	r0, r4
 800d2d2:	f000 f8c3 	bl	800d45c <__ieee754_sqrtf>
 800d2d6:	4959      	ldr	r1, [pc, #356]	; (800d43c <__ieee754_acosf+0x2a4>)
 800d2d8:	4605      	mov	r5, r0
 800d2da:	4620      	mov	r0, r4
 800d2dc:	f7f3 fd8e 	bl	8000dfc <__aeabi_fmul>
 800d2e0:	4957      	ldr	r1, [pc, #348]	; (800d440 <__ieee754_acosf+0x2a8>)
 800d2e2:	f7f3 fc81 	bl	8000be8 <__aeabi_fsub>
 800d2e6:	4621      	mov	r1, r4
 800d2e8:	f7f3 fd88 	bl	8000dfc <__aeabi_fmul>
 800d2ec:	4955      	ldr	r1, [pc, #340]	; (800d444 <__ieee754_acosf+0x2ac>)
 800d2ee:	f7f3 fc7d 	bl	8000bec <__addsf3>
 800d2f2:	4621      	mov	r1, r4
 800d2f4:	f7f3 fd82 	bl	8000dfc <__aeabi_fmul>
 800d2f8:	4953      	ldr	r1, [pc, #332]	; (800d448 <__ieee754_acosf+0x2b0>)
 800d2fa:	f7f3 fc75 	bl	8000be8 <__aeabi_fsub>
 800d2fe:	4621      	mov	r1, r4
 800d300:	f7f3 fd7c 	bl	8000dfc <__aeabi_fmul>
 800d304:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800d308:	f7f3 fc70 	bl	8000bec <__addsf3>
 800d30c:	4601      	mov	r1, r0
 800d30e:	4630      	mov	r0, r6
 800d310:	f7f3 fe28 	bl	8000f64 <__aeabi_fdiv>
 800d314:	4629      	mov	r1, r5
 800d316:	f7f3 fd71 	bl	8000dfc <__aeabi_fmul>
 800d31a:	494c      	ldr	r1, [pc, #304]	; (800d44c <__ieee754_acosf+0x2b4>)
 800d31c:	f7f3 fc64 	bl	8000be8 <__aeabi_fsub>
 800d320:	4629      	mov	r1, r5
 800d322:	f7f3 fc63 	bl	8000bec <__addsf3>
 800d326:	4601      	mov	r1, r0
 800d328:	f7f3 fc60 	bl	8000bec <__addsf3>
 800d32c:	4601      	mov	r1, r0
 800d32e:	4849      	ldr	r0, [pc, #292]	; (800d454 <__ieee754_acosf+0x2bc>)
 800d330:	e79e      	b.n	800d270 <__ieee754_acosf+0xd8>
 800d332:	4601      	mov	r1, r0
 800d334:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800d338:	f7f3 fc56 	bl	8000be8 <__aeabi_fsub>
 800d33c:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800d340:	f7f3 fd5c 	bl	8000dfc <__aeabi_fmul>
 800d344:	4604      	mov	r4, r0
 800d346:	f000 f889 	bl	800d45c <__ieee754_sqrtf>
 800d34a:	4936      	ldr	r1, [pc, #216]	; (800d424 <__ieee754_acosf+0x28c>)
 800d34c:	4606      	mov	r6, r0
 800d34e:	f420 657f 	bic.w	r5, r0, #4080	; 0xff0
 800d352:	4620      	mov	r0, r4
 800d354:	f7f3 fd52 	bl	8000dfc <__aeabi_fmul>
 800d358:	4933      	ldr	r1, [pc, #204]	; (800d428 <__ieee754_acosf+0x290>)
 800d35a:	f7f3 fc47 	bl	8000bec <__addsf3>
 800d35e:	4621      	mov	r1, r4
 800d360:	f7f3 fd4c 	bl	8000dfc <__aeabi_fmul>
 800d364:	4931      	ldr	r1, [pc, #196]	; (800d42c <__ieee754_acosf+0x294>)
 800d366:	f7f3 fc3f 	bl	8000be8 <__aeabi_fsub>
 800d36a:	4621      	mov	r1, r4
 800d36c:	f7f3 fd46 	bl	8000dfc <__aeabi_fmul>
 800d370:	492f      	ldr	r1, [pc, #188]	; (800d430 <__ieee754_acosf+0x298>)
 800d372:	f7f3 fc3b 	bl	8000bec <__addsf3>
 800d376:	4621      	mov	r1, r4
 800d378:	f7f3 fd40 	bl	8000dfc <__aeabi_fmul>
 800d37c:	492d      	ldr	r1, [pc, #180]	; (800d434 <__ieee754_acosf+0x29c>)
 800d37e:	f7f3 fc33 	bl	8000be8 <__aeabi_fsub>
 800d382:	4621      	mov	r1, r4
 800d384:	f7f3 fd3a 	bl	8000dfc <__aeabi_fmul>
 800d388:	492b      	ldr	r1, [pc, #172]	; (800d438 <__ieee754_acosf+0x2a0>)
 800d38a:	f7f3 fc2f 	bl	8000bec <__addsf3>
 800d38e:	4621      	mov	r1, r4
 800d390:	f7f3 fd34 	bl	8000dfc <__aeabi_fmul>
 800d394:	4929      	ldr	r1, [pc, #164]	; (800d43c <__ieee754_acosf+0x2a4>)
 800d396:	4607      	mov	r7, r0
 800d398:	4620      	mov	r0, r4
 800d39a:	f7f3 fd2f 	bl	8000dfc <__aeabi_fmul>
 800d39e:	4928      	ldr	r1, [pc, #160]	; (800d440 <__ieee754_acosf+0x2a8>)
 800d3a0:	f7f3 fc22 	bl	8000be8 <__aeabi_fsub>
 800d3a4:	4621      	mov	r1, r4
 800d3a6:	f7f3 fd29 	bl	8000dfc <__aeabi_fmul>
 800d3aa:	4926      	ldr	r1, [pc, #152]	; (800d444 <__ieee754_acosf+0x2ac>)
 800d3ac:	f7f3 fc1e 	bl	8000bec <__addsf3>
 800d3b0:	4621      	mov	r1, r4
 800d3b2:	f7f3 fd23 	bl	8000dfc <__aeabi_fmul>
 800d3b6:	4924      	ldr	r1, [pc, #144]	; (800d448 <__ieee754_acosf+0x2b0>)
 800d3b8:	f7f3 fc16 	bl	8000be8 <__aeabi_fsub>
 800d3bc:	4621      	mov	r1, r4
 800d3be:	f7f3 fd1d 	bl	8000dfc <__aeabi_fmul>
 800d3c2:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800d3c6:	f7f3 fc11 	bl	8000bec <__addsf3>
 800d3ca:	4601      	mov	r1, r0
 800d3cc:	4638      	mov	r0, r7
 800d3ce:	f7f3 fdc9 	bl	8000f64 <__aeabi_fdiv>
 800d3d2:	4631      	mov	r1, r6
 800d3d4:	f7f3 fd12 	bl	8000dfc <__aeabi_fmul>
 800d3d8:	f025 050f 	bic.w	r5, r5, #15
 800d3dc:	4607      	mov	r7, r0
 800d3de:	4629      	mov	r1, r5
 800d3e0:	4628      	mov	r0, r5
 800d3e2:	f7f3 fd0b 	bl	8000dfc <__aeabi_fmul>
 800d3e6:	4601      	mov	r1, r0
 800d3e8:	4620      	mov	r0, r4
 800d3ea:	f7f3 fbfd 	bl	8000be8 <__aeabi_fsub>
 800d3ee:	4629      	mov	r1, r5
 800d3f0:	4604      	mov	r4, r0
 800d3f2:	4630      	mov	r0, r6
 800d3f4:	f7f3 fbfa 	bl	8000bec <__addsf3>
 800d3f8:	4601      	mov	r1, r0
 800d3fa:	4620      	mov	r0, r4
 800d3fc:	f7f3 fdb2 	bl	8000f64 <__aeabi_fdiv>
 800d400:	4601      	mov	r1, r0
 800d402:	4638      	mov	r0, r7
 800d404:	f7f3 fbf2 	bl	8000bec <__addsf3>
 800d408:	4629      	mov	r1, r5
 800d40a:	f7f3 fbef 	bl	8000bec <__addsf3>
 800d40e:	4601      	mov	r1, r0
 800d410:	f7f3 fbec 	bl	8000bec <__addsf3>
 800d414:	e6cb      	b.n	800d1ae <__ieee754_acosf+0x16>
 800d416:	2000      	movs	r0, #0
 800d418:	e6c9      	b.n	800d1ae <__ieee754_acosf+0x16>
 800d41a:	480f      	ldr	r0, [pc, #60]	; (800d458 <__ieee754_acosf+0x2c0>)
 800d41c:	e6c7      	b.n	800d1ae <__ieee754_acosf+0x16>
 800d41e:	bf00      	nop
 800d420:	40490fdb 	.word	0x40490fdb
 800d424:	3811ef08 	.word	0x3811ef08
 800d428:	3a4f7f04 	.word	0x3a4f7f04
 800d42c:	3d241146 	.word	0x3d241146
 800d430:	3e4e0aa8 	.word	0x3e4e0aa8
 800d434:	3ea6b090 	.word	0x3ea6b090
 800d438:	3e2aaaab 	.word	0x3e2aaaab
 800d43c:	3d9dc62e 	.word	0x3d9dc62e
 800d440:	3f303361 	.word	0x3f303361
 800d444:	4001572d 	.word	0x4001572d
 800d448:	4019d139 	.word	0x4019d139
 800d44c:	33a22168 	.word	0x33a22168
 800d450:	3fc90fda 	.word	0x3fc90fda
 800d454:	40490fda 	.word	0x40490fda
 800d458:	3fc90fdb 	.word	0x3fc90fdb

0800d45c <__ieee754_sqrtf>:
 800d45c:	f020 4200 	bic.w	r2, r0, #2147483648	; 0x80000000
 800d460:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800d464:	b570      	push	{r4, r5, r6, lr}
 800d466:	4603      	mov	r3, r0
 800d468:	4604      	mov	r4, r0
 800d46a:	d309      	bcc.n	800d480 <__ieee754_sqrtf+0x24>
 800d46c:	4601      	mov	r1, r0
 800d46e:	f7f3 fcc5 	bl	8000dfc <__aeabi_fmul>
 800d472:	4601      	mov	r1, r0
 800d474:	4620      	mov	r0, r4
 800d476:	f7f3 fbb9 	bl	8000bec <__addsf3>
 800d47a:	4604      	mov	r4, r0
 800d47c:	4620      	mov	r0, r4
 800d47e:	bd70      	pop	{r4, r5, r6, pc}
 800d480:	2a00      	cmp	r2, #0
 800d482:	d0fb      	beq.n	800d47c <__ieee754_sqrtf+0x20>
 800d484:	2800      	cmp	r0, #0
 800d486:	da06      	bge.n	800d496 <__ieee754_sqrtf+0x3a>
 800d488:	4601      	mov	r1, r0
 800d48a:	f7f3 fbad 	bl	8000be8 <__aeabi_fsub>
 800d48e:	4601      	mov	r1, r0
 800d490:	f7f3 fd68 	bl	8000f64 <__aeabi_fdiv>
 800d494:	e7f1      	b.n	800d47a <__ieee754_sqrtf+0x1e>
 800d496:	f010 42ff 	ands.w	r2, r0, #2139095040	; 0x7f800000
 800d49a:	ea4f 51e0 	mov.w	r1, r0, asr #23
 800d49e:	d029      	beq.n	800d4f4 <__ieee754_sqrtf+0x98>
 800d4a0:	f3c3 0216 	ubfx	r2, r3, #0, #23
 800d4a4:	07cb      	lsls	r3, r1, #31
 800d4a6:	f04f 0300 	mov.w	r3, #0
 800d4aa:	f1a1 007f 	sub.w	r0, r1, #127	; 0x7f
 800d4ae:	f04f 0419 	mov.w	r4, #25
 800d4b2:	461e      	mov	r6, r3
 800d4b4:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
 800d4b8:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800d4bc:	bf58      	it	pl
 800d4be:	0052      	lslpl	r2, r2, #1
 800d4c0:	1040      	asrs	r0, r0, #1
 800d4c2:	0052      	lsls	r2, r2, #1
 800d4c4:	1875      	adds	r5, r6, r1
 800d4c6:	4295      	cmp	r5, r2
 800d4c8:	bfde      	ittt	le
 800d4ca:	186e      	addle	r6, r5, r1
 800d4cc:	1b52      	suble	r2, r2, r5
 800d4ce:	185b      	addle	r3, r3, r1
 800d4d0:	3c01      	subs	r4, #1
 800d4d2:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800d4d6:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800d4da:	d1f3      	bne.n	800d4c4 <__ieee754_sqrtf+0x68>
 800d4dc:	b112      	cbz	r2, 800d4e4 <__ieee754_sqrtf+0x88>
 800d4de:	3301      	adds	r3, #1
 800d4e0:	f023 0301 	bic.w	r3, r3, #1
 800d4e4:	105c      	asrs	r4, r3, #1
 800d4e6:	f104 547c 	add.w	r4, r4, #1056964608	; 0x3f000000
 800d4ea:	eb04 54c0 	add.w	r4, r4, r0, lsl #23
 800d4ee:	e7c5      	b.n	800d47c <__ieee754_sqrtf+0x20>
 800d4f0:	005b      	lsls	r3, r3, #1
 800d4f2:	3201      	adds	r2, #1
 800d4f4:	0218      	lsls	r0, r3, #8
 800d4f6:	d5fb      	bpl.n	800d4f0 <__ieee754_sqrtf+0x94>
 800d4f8:	3a01      	subs	r2, #1
 800d4fa:	1a89      	subs	r1, r1, r2
 800d4fc:	e7d0      	b.n	800d4a0 <__ieee754_sqrtf+0x44>
	...

0800d500 <__kernel_cos>:
 800d500:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d504:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800d508:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 800d50c:	4680      	mov	r8, r0
 800d50e:	460f      	mov	r7, r1
 800d510:	e9cd 2300 	strd	r2, r3, [sp]
 800d514:	da04      	bge.n	800d520 <__kernel_cos+0x20>
 800d516:	f7f3 facb 	bl	8000ab0 <__aeabi_d2iz>
 800d51a:	2800      	cmp	r0, #0
 800d51c:	f000 8086 	beq.w	800d62c <__kernel_cos+0x12c>
 800d520:	4642      	mov	r2, r8
 800d522:	463b      	mov	r3, r7
 800d524:	4640      	mov	r0, r8
 800d526:	4639      	mov	r1, r7
 800d528:	f7f3 f812 	bl	8000550 <__aeabi_dmul>
 800d52c:	2200      	movs	r2, #0
 800d52e:	4b4e      	ldr	r3, [pc, #312]	; (800d668 <__kernel_cos+0x168>)
 800d530:	4604      	mov	r4, r0
 800d532:	460d      	mov	r5, r1
 800d534:	f7f3 f80c 	bl	8000550 <__aeabi_dmul>
 800d538:	a33f      	add	r3, pc, #252	; (adr r3, 800d638 <__kernel_cos+0x138>)
 800d53a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d53e:	4682      	mov	sl, r0
 800d540:	468b      	mov	fp, r1
 800d542:	4620      	mov	r0, r4
 800d544:	4629      	mov	r1, r5
 800d546:	f7f3 f803 	bl	8000550 <__aeabi_dmul>
 800d54a:	a33d      	add	r3, pc, #244	; (adr r3, 800d640 <__kernel_cos+0x140>)
 800d54c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d550:	f7f2 fe48 	bl	80001e4 <__adddf3>
 800d554:	4622      	mov	r2, r4
 800d556:	462b      	mov	r3, r5
 800d558:	f7f2 fffa 	bl	8000550 <__aeabi_dmul>
 800d55c:	a33a      	add	r3, pc, #232	; (adr r3, 800d648 <__kernel_cos+0x148>)
 800d55e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d562:	f7f2 fe3d 	bl	80001e0 <__aeabi_dsub>
 800d566:	4622      	mov	r2, r4
 800d568:	462b      	mov	r3, r5
 800d56a:	f7f2 fff1 	bl	8000550 <__aeabi_dmul>
 800d56e:	a338      	add	r3, pc, #224	; (adr r3, 800d650 <__kernel_cos+0x150>)
 800d570:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d574:	f7f2 fe36 	bl	80001e4 <__adddf3>
 800d578:	4622      	mov	r2, r4
 800d57a:	462b      	mov	r3, r5
 800d57c:	f7f2 ffe8 	bl	8000550 <__aeabi_dmul>
 800d580:	a335      	add	r3, pc, #212	; (adr r3, 800d658 <__kernel_cos+0x158>)
 800d582:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d586:	f7f2 fe2b 	bl	80001e0 <__aeabi_dsub>
 800d58a:	4622      	mov	r2, r4
 800d58c:	462b      	mov	r3, r5
 800d58e:	f7f2 ffdf 	bl	8000550 <__aeabi_dmul>
 800d592:	a333      	add	r3, pc, #204	; (adr r3, 800d660 <__kernel_cos+0x160>)
 800d594:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d598:	f7f2 fe24 	bl	80001e4 <__adddf3>
 800d59c:	4622      	mov	r2, r4
 800d59e:	462b      	mov	r3, r5
 800d5a0:	f7f2 ffd6 	bl	8000550 <__aeabi_dmul>
 800d5a4:	4622      	mov	r2, r4
 800d5a6:	462b      	mov	r3, r5
 800d5a8:	f7f2 ffd2 	bl	8000550 <__aeabi_dmul>
 800d5ac:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d5b0:	4604      	mov	r4, r0
 800d5b2:	460d      	mov	r5, r1
 800d5b4:	4640      	mov	r0, r8
 800d5b6:	4639      	mov	r1, r7
 800d5b8:	f7f2 ffca 	bl	8000550 <__aeabi_dmul>
 800d5bc:	460b      	mov	r3, r1
 800d5be:	4602      	mov	r2, r0
 800d5c0:	4629      	mov	r1, r5
 800d5c2:	4620      	mov	r0, r4
 800d5c4:	f7f2 fe0c 	bl	80001e0 <__aeabi_dsub>
 800d5c8:	4b28      	ldr	r3, [pc, #160]	; (800d66c <__kernel_cos+0x16c>)
 800d5ca:	4680      	mov	r8, r0
 800d5cc:	429e      	cmp	r6, r3
 800d5ce:	4689      	mov	r9, r1
 800d5d0:	dc0e      	bgt.n	800d5f0 <__kernel_cos+0xf0>
 800d5d2:	4602      	mov	r2, r0
 800d5d4:	460b      	mov	r3, r1
 800d5d6:	4650      	mov	r0, sl
 800d5d8:	4659      	mov	r1, fp
 800d5da:	f7f2 fe01 	bl	80001e0 <__aeabi_dsub>
 800d5de:	4602      	mov	r2, r0
 800d5e0:	2000      	movs	r0, #0
 800d5e2:	460b      	mov	r3, r1
 800d5e4:	4922      	ldr	r1, [pc, #136]	; (800d670 <__kernel_cos+0x170>)
 800d5e6:	f7f2 fdfb 	bl	80001e0 <__aeabi_dsub>
 800d5ea:	b003      	add	sp, #12
 800d5ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d5f0:	2400      	movs	r4, #0
 800d5f2:	4b20      	ldr	r3, [pc, #128]	; (800d674 <__kernel_cos+0x174>)
 800d5f4:	4622      	mov	r2, r4
 800d5f6:	429e      	cmp	r6, r3
 800d5f8:	bfcc      	ite	gt
 800d5fa:	4d1f      	ldrgt	r5, [pc, #124]	; (800d678 <__kernel_cos+0x178>)
 800d5fc:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 800d600:	462b      	mov	r3, r5
 800d602:	2000      	movs	r0, #0
 800d604:	491a      	ldr	r1, [pc, #104]	; (800d670 <__kernel_cos+0x170>)
 800d606:	f7f2 fdeb 	bl	80001e0 <__aeabi_dsub>
 800d60a:	4622      	mov	r2, r4
 800d60c:	4606      	mov	r6, r0
 800d60e:	460f      	mov	r7, r1
 800d610:	462b      	mov	r3, r5
 800d612:	4650      	mov	r0, sl
 800d614:	4659      	mov	r1, fp
 800d616:	f7f2 fde3 	bl	80001e0 <__aeabi_dsub>
 800d61a:	4642      	mov	r2, r8
 800d61c:	464b      	mov	r3, r9
 800d61e:	f7f2 fddf 	bl	80001e0 <__aeabi_dsub>
 800d622:	4602      	mov	r2, r0
 800d624:	460b      	mov	r3, r1
 800d626:	4630      	mov	r0, r6
 800d628:	4639      	mov	r1, r7
 800d62a:	e7dc      	b.n	800d5e6 <__kernel_cos+0xe6>
 800d62c:	2000      	movs	r0, #0
 800d62e:	4910      	ldr	r1, [pc, #64]	; (800d670 <__kernel_cos+0x170>)
 800d630:	e7db      	b.n	800d5ea <__kernel_cos+0xea>
 800d632:	bf00      	nop
 800d634:	f3af 8000 	nop.w
 800d638:	be8838d4 	.word	0xbe8838d4
 800d63c:	bda8fae9 	.word	0xbda8fae9
 800d640:	bdb4b1c4 	.word	0xbdb4b1c4
 800d644:	3e21ee9e 	.word	0x3e21ee9e
 800d648:	809c52ad 	.word	0x809c52ad
 800d64c:	3e927e4f 	.word	0x3e927e4f
 800d650:	19cb1590 	.word	0x19cb1590
 800d654:	3efa01a0 	.word	0x3efa01a0
 800d658:	16c15177 	.word	0x16c15177
 800d65c:	3f56c16c 	.word	0x3f56c16c
 800d660:	5555554c 	.word	0x5555554c
 800d664:	3fa55555 	.word	0x3fa55555
 800d668:	3fe00000 	.word	0x3fe00000
 800d66c:	3fd33332 	.word	0x3fd33332
 800d670:	3ff00000 	.word	0x3ff00000
 800d674:	3fe90000 	.word	0x3fe90000
 800d678:	3fd20000 	.word	0x3fd20000

0800d67c <__kernel_rem_pio2>:
 800d67c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d680:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 800d684:	9308      	str	r3, [sp, #32]
 800d686:	9101      	str	r1, [sp, #4]
 800d688:	4bc0      	ldr	r3, [pc, #768]	; (800d98c <__kernel_rem_pio2+0x310>)
 800d68a:	99a2      	ldr	r1, [sp, #648]	; 0x288
 800d68c:	f112 0f14 	cmn.w	r2, #20
 800d690:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800d694:	bfa8      	it	ge
 800d696:	1ed4      	subge	r4, r2, #3
 800d698:	9304      	str	r3, [sp, #16]
 800d69a:	9b08      	ldr	r3, [sp, #32]
 800d69c:	bfb8      	it	lt
 800d69e:	2400      	movlt	r4, #0
 800d6a0:	f103 33ff 	add.w	r3, r3, #4294967295
 800d6a4:	9306      	str	r3, [sp, #24]
 800d6a6:	bfa4      	itt	ge
 800d6a8:	2318      	movge	r3, #24
 800d6aa:	fb94 f4f3 	sdivge	r4, r4, r3
 800d6ae:	f06f 0317 	mvn.w	r3, #23
 800d6b2:	fb04 3303 	mla	r3, r4, r3, r3
 800d6b6:	eb03 0a02 	add.w	sl, r3, r2
 800d6ba:	9a06      	ldr	r2, [sp, #24]
 800d6bc:	9b04      	ldr	r3, [sp, #16]
 800d6be:	1aa7      	subs	r7, r4, r2
 800d6c0:	eb03 0802 	add.w	r8, r3, r2
 800d6c4:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 800d6c6:	2500      	movs	r5, #0
 800d6c8:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800d6cc:	2200      	movs	r2, #0
 800d6ce:	2300      	movs	r3, #0
 800d6d0:	9009      	str	r0, [sp, #36]	; 0x24
 800d6d2:	ae20      	add	r6, sp, #128	; 0x80
 800d6d4:	4545      	cmp	r5, r8
 800d6d6:	dd19      	ble.n	800d70c <__kernel_rem_pio2+0x90>
 800d6d8:	9b08      	ldr	r3, [sp, #32]
 800d6da:	aa20      	add	r2, sp, #128	; 0x80
 800d6dc:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800d6e0:	f8dd 8018 	ldr.w	r8, [sp, #24]
 800d6e4:	f1c3 0301 	rsb	r3, r3, #1
 800d6e8:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 800d6ec:	9307      	str	r3, [sp, #28]
 800d6ee:	9b07      	ldr	r3, [sp, #28]
 800d6f0:	9a04      	ldr	r2, [sp, #16]
 800d6f2:	4443      	add	r3, r8
 800d6f4:	429a      	cmp	r2, r3
 800d6f6:	db35      	blt.n	800d764 <__kernel_rem_pio2+0xe8>
 800d6f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d6fa:	2200      	movs	r2, #0
 800d6fc:	f1a3 0908 	sub.w	r9, r3, #8
 800d700:	2300      	movs	r3, #0
 800d702:	462f      	mov	r7, r5
 800d704:	2600      	movs	r6, #0
 800d706:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800d70a:	e01f      	b.n	800d74c <__kernel_rem_pio2+0xd0>
 800d70c:	42ef      	cmn	r7, r5
 800d70e:	d40b      	bmi.n	800d728 <__kernel_rem_pio2+0xac>
 800d710:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800d714:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800d718:	f7f2 feb0 	bl	800047c <__aeabi_i2d>
 800d71c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d720:	e8e6 0102 	strd	r0, r1, [r6], #8
 800d724:	3501      	adds	r5, #1
 800d726:	e7d5      	b.n	800d6d4 <__kernel_rem_pio2+0x58>
 800d728:	4610      	mov	r0, r2
 800d72a:	4619      	mov	r1, r3
 800d72c:	e7f8      	b.n	800d720 <__kernel_rem_pio2+0xa4>
 800d72e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d732:	e9f9 0102 	ldrd	r0, r1, [r9, #8]!
 800d736:	f7f2 ff0b 	bl	8000550 <__aeabi_dmul>
 800d73a:	4602      	mov	r2, r0
 800d73c:	460b      	mov	r3, r1
 800d73e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d742:	f7f2 fd4f 	bl	80001e4 <__adddf3>
 800d746:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d74a:	3601      	adds	r6, #1
 800d74c:	9b06      	ldr	r3, [sp, #24]
 800d74e:	3f08      	subs	r7, #8
 800d750:	429e      	cmp	r6, r3
 800d752:	ddec      	ble.n	800d72e <__kernel_rem_pio2+0xb2>
 800d754:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d758:	3508      	adds	r5, #8
 800d75a:	e8eb 2302 	strd	r2, r3, [fp], #8
 800d75e:	f108 0801 	add.w	r8, r8, #1
 800d762:	e7c4      	b.n	800d6ee <__kernel_rem_pio2+0x72>
 800d764:	9b04      	ldr	r3, [sp, #16]
 800d766:	aa0c      	add	r2, sp, #48	; 0x30
 800d768:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800d76c:	930b      	str	r3, [sp, #44]	; 0x2c
 800d76e:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 800d770:	9f04      	ldr	r7, [sp, #16]
 800d772:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800d776:	930a      	str	r3, [sp, #40]	; 0x28
 800d778:	463e      	mov	r6, r7
 800d77a:	ab98      	add	r3, sp, #608	; 0x260
 800d77c:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
 800d780:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800d784:	f8cd b008 	str.w	fp, [sp, #8]
 800d788:	e953 4528 	ldrd	r4, r5, [r3, #-160]	; 0xa0
 800d78c:	2e00      	cmp	r6, #0
 800d78e:	dc71      	bgt.n	800d874 <__kernel_rem_pio2+0x1f8>
 800d790:	4652      	mov	r2, sl
 800d792:	4620      	mov	r0, r4
 800d794:	4629      	mov	r1, r5
 800d796:	f000 fbf7 	bl	800df88 <scalbn>
 800d79a:	2200      	movs	r2, #0
 800d79c:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800d7a0:	4604      	mov	r4, r0
 800d7a2:	460d      	mov	r5, r1
 800d7a4:	f7f2 fed4 	bl	8000550 <__aeabi_dmul>
 800d7a8:	f000 fb6e 	bl	800de88 <floor>
 800d7ac:	2200      	movs	r2, #0
 800d7ae:	4b78      	ldr	r3, [pc, #480]	; (800d990 <__kernel_rem_pio2+0x314>)
 800d7b0:	f7f2 fece 	bl	8000550 <__aeabi_dmul>
 800d7b4:	4602      	mov	r2, r0
 800d7b6:	460b      	mov	r3, r1
 800d7b8:	4620      	mov	r0, r4
 800d7ba:	4629      	mov	r1, r5
 800d7bc:	f7f2 fd10 	bl	80001e0 <__aeabi_dsub>
 800d7c0:	460d      	mov	r5, r1
 800d7c2:	4604      	mov	r4, r0
 800d7c4:	f7f3 f974 	bl	8000ab0 <__aeabi_d2iz>
 800d7c8:	9007      	str	r0, [sp, #28]
 800d7ca:	f7f2 fe57 	bl	800047c <__aeabi_i2d>
 800d7ce:	4602      	mov	r2, r0
 800d7d0:	460b      	mov	r3, r1
 800d7d2:	4620      	mov	r0, r4
 800d7d4:	4629      	mov	r1, r5
 800d7d6:	f7f2 fd03 	bl	80001e0 <__aeabi_dsub>
 800d7da:	f1ba 0f00 	cmp.w	sl, #0
 800d7de:	4680      	mov	r8, r0
 800d7e0:	4689      	mov	r9, r1
 800d7e2:	dd70      	ble.n	800d8c6 <__kernel_rem_pio2+0x24a>
 800d7e4:	1e7a      	subs	r2, r7, #1
 800d7e6:	ab0c      	add	r3, sp, #48	; 0x30
 800d7e8:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800d7ec:	9c07      	ldr	r4, [sp, #28]
 800d7ee:	f1ca 0118 	rsb	r1, sl, #24
 800d7f2:	fa40 f301 	asr.w	r3, r0, r1
 800d7f6:	441c      	add	r4, r3
 800d7f8:	408b      	lsls	r3, r1
 800d7fa:	1ac0      	subs	r0, r0, r3
 800d7fc:	ab0c      	add	r3, sp, #48	; 0x30
 800d7fe:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800d802:	f1ca 0317 	rsb	r3, sl, #23
 800d806:	9407      	str	r4, [sp, #28]
 800d808:	fa40 f303 	asr.w	r3, r0, r3
 800d80c:	9302      	str	r3, [sp, #8]
 800d80e:	9b02      	ldr	r3, [sp, #8]
 800d810:	2b00      	cmp	r3, #0
 800d812:	dd66      	ble.n	800d8e2 <__kernel_rem_pio2+0x266>
 800d814:	2200      	movs	r2, #0
 800d816:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800d81a:	4614      	mov	r4, r2
 800d81c:	9b07      	ldr	r3, [sp, #28]
 800d81e:	3301      	adds	r3, #1
 800d820:	9307      	str	r3, [sp, #28]
 800d822:	4297      	cmp	r7, r2
 800d824:	f300 809f 	bgt.w	800d966 <__kernel_rem_pio2+0x2ea>
 800d828:	f1ba 0f00 	cmp.w	sl, #0
 800d82c:	dd07      	ble.n	800d83e <__kernel_rem_pio2+0x1c2>
 800d82e:	f1ba 0f01 	cmp.w	sl, #1
 800d832:	f000 80b9 	beq.w	800d9a8 <__kernel_rem_pio2+0x32c>
 800d836:	f1ba 0f02 	cmp.w	sl, #2
 800d83a:	f000 80bf 	beq.w	800d9bc <__kernel_rem_pio2+0x340>
 800d83e:	9b02      	ldr	r3, [sp, #8]
 800d840:	2b02      	cmp	r3, #2
 800d842:	d14e      	bne.n	800d8e2 <__kernel_rem_pio2+0x266>
 800d844:	4642      	mov	r2, r8
 800d846:	464b      	mov	r3, r9
 800d848:	2000      	movs	r0, #0
 800d84a:	4952      	ldr	r1, [pc, #328]	; (800d994 <__kernel_rem_pio2+0x318>)
 800d84c:	f7f2 fcc8 	bl	80001e0 <__aeabi_dsub>
 800d850:	4680      	mov	r8, r0
 800d852:	4689      	mov	r9, r1
 800d854:	2c00      	cmp	r4, #0
 800d856:	d044      	beq.n	800d8e2 <__kernel_rem_pio2+0x266>
 800d858:	4652      	mov	r2, sl
 800d85a:	2000      	movs	r0, #0
 800d85c:	494d      	ldr	r1, [pc, #308]	; (800d994 <__kernel_rem_pio2+0x318>)
 800d85e:	f000 fb93 	bl	800df88 <scalbn>
 800d862:	4602      	mov	r2, r0
 800d864:	460b      	mov	r3, r1
 800d866:	4640      	mov	r0, r8
 800d868:	4649      	mov	r1, r9
 800d86a:	f7f2 fcb9 	bl	80001e0 <__aeabi_dsub>
 800d86e:	4680      	mov	r8, r0
 800d870:	4689      	mov	r9, r1
 800d872:	e036      	b.n	800d8e2 <__kernel_rem_pio2+0x266>
 800d874:	2200      	movs	r2, #0
 800d876:	4b48      	ldr	r3, [pc, #288]	; (800d998 <__kernel_rem_pio2+0x31c>)
 800d878:	4620      	mov	r0, r4
 800d87a:	4629      	mov	r1, r5
 800d87c:	f7f2 fe68 	bl	8000550 <__aeabi_dmul>
 800d880:	f7f3 f916 	bl	8000ab0 <__aeabi_d2iz>
 800d884:	f7f2 fdfa 	bl	800047c <__aeabi_i2d>
 800d888:	2200      	movs	r2, #0
 800d88a:	4b44      	ldr	r3, [pc, #272]	; (800d99c <__kernel_rem_pio2+0x320>)
 800d88c:	4680      	mov	r8, r0
 800d88e:	4689      	mov	r9, r1
 800d890:	f7f2 fe5e 	bl	8000550 <__aeabi_dmul>
 800d894:	4602      	mov	r2, r0
 800d896:	460b      	mov	r3, r1
 800d898:	4620      	mov	r0, r4
 800d89a:	4629      	mov	r1, r5
 800d89c:	f7f2 fca0 	bl	80001e0 <__aeabi_dsub>
 800d8a0:	f7f3 f906 	bl	8000ab0 <__aeabi_d2iz>
 800d8a4:	9b02      	ldr	r3, [sp, #8]
 800d8a6:	3e01      	subs	r6, #1
 800d8a8:	f843 0b04 	str.w	r0, [r3], #4
 800d8ac:	9302      	str	r3, [sp, #8]
 800d8ae:	ab70      	add	r3, sp, #448	; 0x1c0
 800d8b0:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800d8b4:	4640      	mov	r0, r8
 800d8b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d8ba:	4649      	mov	r1, r9
 800d8bc:	f7f2 fc92 	bl	80001e4 <__adddf3>
 800d8c0:	4604      	mov	r4, r0
 800d8c2:	460d      	mov	r5, r1
 800d8c4:	e762      	b.n	800d78c <__kernel_rem_pio2+0x110>
 800d8c6:	d105      	bne.n	800d8d4 <__kernel_rem_pio2+0x258>
 800d8c8:	1e7b      	subs	r3, r7, #1
 800d8ca:	aa0c      	add	r2, sp, #48	; 0x30
 800d8cc:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800d8d0:	15c3      	asrs	r3, r0, #23
 800d8d2:	e79b      	b.n	800d80c <__kernel_rem_pio2+0x190>
 800d8d4:	2200      	movs	r2, #0
 800d8d6:	4b32      	ldr	r3, [pc, #200]	; (800d9a0 <__kernel_rem_pio2+0x324>)
 800d8d8:	f7f3 f8c0 	bl	8000a5c <__aeabi_dcmpge>
 800d8dc:	2800      	cmp	r0, #0
 800d8de:	d13f      	bne.n	800d960 <__kernel_rem_pio2+0x2e4>
 800d8e0:	9002      	str	r0, [sp, #8]
 800d8e2:	2200      	movs	r2, #0
 800d8e4:	2300      	movs	r3, #0
 800d8e6:	4640      	mov	r0, r8
 800d8e8:	4649      	mov	r1, r9
 800d8ea:	f7f3 f899 	bl	8000a20 <__aeabi_dcmpeq>
 800d8ee:	2800      	cmp	r0, #0
 800d8f0:	f000 80b5 	beq.w	800da5e <__kernel_rem_pio2+0x3e2>
 800d8f4:	1e7c      	subs	r4, r7, #1
 800d8f6:	4623      	mov	r3, r4
 800d8f8:	2200      	movs	r2, #0
 800d8fa:	9904      	ldr	r1, [sp, #16]
 800d8fc:	428b      	cmp	r3, r1
 800d8fe:	da64      	bge.n	800d9ca <__kernel_rem_pio2+0x34e>
 800d900:	2a00      	cmp	r2, #0
 800d902:	d078      	beq.n	800d9f6 <__kernel_rem_pio2+0x37a>
 800d904:	ab0c      	add	r3, sp, #48	; 0x30
 800d906:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800d90a:	f1aa 0a18 	sub.w	sl, sl, #24
 800d90e:	2b00      	cmp	r3, #0
 800d910:	f000 80a3 	beq.w	800da5a <__kernel_rem_pio2+0x3de>
 800d914:	4652      	mov	r2, sl
 800d916:	2000      	movs	r0, #0
 800d918:	491e      	ldr	r1, [pc, #120]	; (800d994 <__kernel_rem_pio2+0x318>)
 800d91a:	f000 fb35 	bl	800df88 <scalbn>
 800d91e:	46a2      	mov	sl, r4
 800d920:	4606      	mov	r6, r0
 800d922:	460f      	mov	r7, r1
 800d924:	f04f 0800 	mov.w	r8, #0
 800d928:	00e3      	lsls	r3, r4, #3
 800d92a:	9306      	str	r3, [sp, #24]
 800d92c:	f8df 9068 	ldr.w	r9, [pc, #104]	; 800d998 <__kernel_rem_pio2+0x31c>
 800d930:	ab70      	add	r3, sp, #448	; 0x1c0
 800d932:	eb03 0bc4 	add.w	fp, r3, r4, lsl #3
 800d936:	f1ba 0f00 	cmp.w	sl, #0
 800d93a:	f280 80c6 	bge.w	800daca <__kernel_rem_pio2+0x44e>
 800d93e:	4627      	mov	r7, r4
 800d940:	f04f 0800 	mov.w	r8, #0
 800d944:	2f00      	cmp	r7, #0
 800d946:	f2c0 80f3 	blt.w	800db30 <__kernel_rem_pio2+0x4b4>
 800d94a:	4b16      	ldr	r3, [pc, #88]	; (800d9a4 <__kernel_rem_pio2+0x328>)
 800d94c:	f04f 0a00 	mov.w	sl, #0
 800d950:	461d      	mov	r5, r3
 800d952:	ab70      	add	r3, sp, #448	; 0x1c0
 800d954:	f04f 0b00 	mov.w	fp, #0
 800d958:	2600      	movs	r6, #0
 800d95a:	eb03 09c7 	add.w	r9, r3, r7, lsl #3
 800d95e:	e0d9      	b.n	800db14 <__kernel_rem_pio2+0x498>
 800d960:	2302      	movs	r3, #2
 800d962:	9302      	str	r3, [sp, #8]
 800d964:	e756      	b.n	800d814 <__kernel_rem_pio2+0x198>
 800d966:	f8db 3000 	ldr.w	r3, [fp]
 800d96a:	b954      	cbnz	r4, 800d982 <__kernel_rem_pio2+0x306>
 800d96c:	b123      	cbz	r3, 800d978 <__kernel_rem_pio2+0x2fc>
 800d96e:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800d972:	f8cb 3000 	str.w	r3, [fp]
 800d976:	2301      	movs	r3, #1
 800d978:	461c      	mov	r4, r3
 800d97a:	3201      	adds	r2, #1
 800d97c:	f10b 0b04 	add.w	fp, fp, #4
 800d980:	e74f      	b.n	800d822 <__kernel_rem_pio2+0x1a6>
 800d982:	1acb      	subs	r3, r1, r3
 800d984:	f8cb 3000 	str.w	r3, [fp]
 800d988:	4623      	mov	r3, r4
 800d98a:	e7f5      	b.n	800d978 <__kernel_rem_pio2+0x2fc>
 800d98c:	08011980 	.word	0x08011980
 800d990:	40200000 	.word	0x40200000
 800d994:	3ff00000 	.word	0x3ff00000
 800d998:	3e700000 	.word	0x3e700000
 800d99c:	41700000 	.word	0x41700000
 800d9a0:	3fe00000 	.word	0x3fe00000
 800d9a4:	08011940 	.word	0x08011940
 800d9a8:	1e7a      	subs	r2, r7, #1
 800d9aa:	ab0c      	add	r3, sp, #48	; 0x30
 800d9ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d9b0:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800d9b4:	a90c      	add	r1, sp, #48	; 0x30
 800d9b6:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800d9ba:	e740      	b.n	800d83e <__kernel_rem_pio2+0x1c2>
 800d9bc:	1e7a      	subs	r2, r7, #1
 800d9be:	ab0c      	add	r3, sp, #48	; 0x30
 800d9c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d9c4:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800d9c8:	e7f4      	b.n	800d9b4 <__kernel_rem_pio2+0x338>
 800d9ca:	a90c      	add	r1, sp, #48	; 0x30
 800d9cc:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800d9d0:	3b01      	subs	r3, #1
 800d9d2:	430a      	orrs	r2, r1
 800d9d4:	e791      	b.n	800d8fa <__kernel_rem_pio2+0x27e>
 800d9d6:	3401      	adds	r4, #1
 800d9d8:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800d9dc:	2a00      	cmp	r2, #0
 800d9de:	d0fa      	beq.n	800d9d6 <__kernel_rem_pio2+0x35a>
 800d9e0:	9b08      	ldr	r3, [sp, #32]
 800d9e2:	1c7e      	adds	r6, r7, #1
 800d9e4:	18fd      	adds	r5, r7, r3
 800d9e6:	ab20      	add	r3, sp, #128	; 0x80
 800d9e8:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800d9ec:	443c      	add	r4, r7
 800d9ee:	42b4      	cmp	r4, r6
 800d9f0:	da04      	bge.n	800d9fc <__kernel_rem_pio2+0x380>
 800d9f2:	4627      	mov	r7, r4
 800d9f4:	e6c0      	b.n	800d778 <__kernel_rem_pio2+0xfc>
 800d9f6:	2401      	movs	r4, #1
 800d9f8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d9fa:	e7ed      	b.n	800d9d8 <__kernel_rem_pio2+0x35c>
 800d9fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d9fe:	462f      	mov	r7, r5
 800da00:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800da04:	f7f2 fd3a 	bl	800047c <__aeabi_i2d>
 800da08:	f04f 0b00 	mov.w	fp, #0
 800da0c:	f04f 0800 	mov.w	r8, #0
 800da10:	f04f 0900 	mov.w	r9, #0
 800da14:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800da16:	e8e7 0102 	strd	r0, r1, [r7], #8
 800da1a:	3b08      	subs	r3, #8
 800da1c:	9302      	str	r3, [sp, #8]
 800da1e:	9b06      	ldr	r3, [sp, #24]
 800da20:	459b      	cmp	fp, r3
 800da22:	dd07      	ble.n	800da34 <__kernel_rem_pio2+0x3b8>
 800da24:	ab70      	add	r3, sp, #448	; 0x1c0
 800da26:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800da2a:	463d      	mov	r5, r7
 800da2c:	e9c3 8900 	strd	r8, r9, [r3]
 800da30:	3601      	adds	r6, #1
 800da32:	e7dc      	b.n	800d9ee <__kernel_rem_pio2+0x372>
 800da34:	9902      	ldr	r1, [sp, #8]
 800da36:	f10b 0b01 	add.w	fp, fp, #1
 800da3a:	e9f1 2302 	ldrd	r2, r3, [r1, #8]!
 800da3e:	9102      	str	r1, [sp, #8]
 800da40:	e875 0102 	ldrd	r0, r1, [r5], #-8
 800da44:	f7f2 fd84 	bl	8000550 <__aeabi_dmul>
 800da48:	4602      	mov	r2, r0
 800da4a:	460b      	mov	r3, r1
 800da4c:	4640      	mov	r0, r8
 800da4e:	4649      	mov	r1, r9
 800da50:	f7f2 fbc8 	bl	80001e4 <__adddf3>
 800da54:	4680      	mov	r8, r0
 800da56:	4689      	mov	r9, r1
 800da58:	e7e1      	b.n	800da1e <__kernel_rem_pio2+0x3a2>
 800da5a:	3c01      	subs	r4, #1
 800da5c:	e752      	b.n	800d904 <__kernel_rem_pio2+0x288>
 800da5e:	f1ca 0200 	rsb	r2, sl, #0
 800da62:	4640      	mov	r0, r8
 800da64:	4649      	mov	r1, r9
 800da66:	f000 fa8f 	bl	800df88 <scalbn>
 800da6a:	2200      	movs	r2, #0
 800da6c:	4ba5      	ldr	r3, [pc, #660]	; (800dd04 <__kernel_rem_pio2+0x688>)
 800da6e:	4604      	mov	r4, r0
 800da70:	460d      	mov	r5, r1
 800da72:	f7f2 fff3 	bl	8000a5c <__aeabi_dcmpge>
 800da76:	b1f8      	cbz	r0, 800dab8 <__kernel_rem_pio2+0x43c>
 800da78:	2200      	movs	r2, #0
 800da7a:	4ba3      	ldr	r3, [pc, #652]	; (800dd08 <__kernel_rem_pio2+0x68c>)
 800da7c:	4620      	mov	r0, r4
 800da7e:	4629      	mov	r1, r5
 800da80:	f7f2 fd66 	bl	8000550 <__aeabi_dmul>
 800da84:	f7f3 f814 	bl	8000ab0 <__aeabi_d2iz>
 800da88:	4606      	mov	r6, r0
 800da8a:	f7f2 fcf7 	bl	800047c <__aeabi_i2d>
 800da8e:	2200      	movs	r2, #0
 800da90:	4b9c      	ldr	r3, [pc, #624]	; (800dd04 <__kernel_rem_pio2+0x688>)
 800da92:	f7f2 fd5d 	bl	8000550 <__aeabi_dmul>
 800da96:	460b      	mov	r3, r1
 800da98:	4602      	mov	r2, r0
 800da9a:	4629      	mov	r1, r5
 800da9c:	4620      	mov	r0, r4
 800da9e:	f7f2 fb9f 	bl	80001e0 <__aeabi_dsub>
 800daa2:	f7f3 f805 	bl	8000ab0 <__aeabi_d2iz>
 800daa6:	1c7c      	adds	r4, r7, #1
 800daa8:	ab0c      	add	r3, sp, #48	; 0x30
 800daaa:	f843 0027 	str.w	r0, [r3, r7, lsl #2]
 800daae:	f10a 0a18 	add.w	sl, sl, #24
 800dab2:	f843 6024 	str.w	r6, [r3, r4, lsl #2]
 800dab6:	e72d      	b.n	800d914 <__kernel_rem_pio2+0x298>
 800dab8:	4620      	mov	r0, r4
 800daba:	4629      	mov	r1, r5
 800dabc:	f7f2 fff8 	bl	8000ab0 <__aeabi_d2iz>
 800dac0:	ab0c      	add	r3, sp, #48	; 0x30
 800dac2:	463c      	mov	r4, r7
 800dac4:	f843 0027 	str.w	r0, [r3, r7, lsl #2]
 800dac8:	e724      	b.n	800d914 <__kernel_rem_pio2+0x298>
 800daca:	ab0c      	add	r3, sp, #48	; 0x30
 800dacc:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 800dad0:	f7f2 fcd4 	bl	800047c <__aeabi_i2d>
 800dad4:	4632      	mov	r2, r6
 800dad6:	463b      	mov	r3, r7
 800dad8:	f7f2 fd3a 	bl	8000550 <__aeabi_dmul>
 800dadc:	4642      	mov	r2, r8
 800dade:	e86b 0102 	strd	r0, r1, [fp], #-8
 800dae2:	464b      	mov	r3, r9
 800dae4:	4630      	mov	r0, r6
 800dae6:	4639      	mov	r1, r7
 800dae8:	f7f2 fd32 	bl	8000550 <__aeabi_dmul>
 800daec:	f10a 3aff 	add.w	sl, sl, #4294967295
 800daf0:	4606      	mov	r6, r0
 800daf2:	460f      	mov	r7, r1
 800daf4:	e71f      	b.n	800d936 <__kernel_rem_pio2+0x2ba>
 800daf6:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 800dafa:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 800dafe:	f7f2 fd27 	bl	8000550 <__aeabi_dmul>
 800db02:	4602      	mov	r2, r0
 800db04:	460b      	mov	r3, r1
 800db06:	4650      	mov	r0, sl
 800db08:	4659      	mov	r1, fp
 800db0a:	f7f2 fb6b 	bl	80001e4 <__adddf3>
 800db0e:	4682      	mov	sl, r0
 800db10:	468b      	mov	fp, r1
 800db12:	3601      	adds	r6, #1
 800db14:	9b04      	ldr	r3, [sp, #16]
 800db16:	429e      	cmp	r6, r3
 800db18:	dc01      	bgt.n	800db1e <__kernel_rem_pio2+0x4a2>
 800db1a:	45b0      	cmp	r8, r6
 800db1c:	daeb      	bge.n	800daf6 <__kernel_rem_pio2+0x47a>
 800db1e:	ab48      	add	r3, sp, #288	; 0x120
 800db20:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800db24:	e9c3 ab00 	strd	sl, fp, [r3]
 800db28:	3f01      	subs	r7, #1
 800db2a:	f108 0801 	add.w	r8, r8, #1
 800db2e:	e709      	b.n	800d944 <__kernel_rem_pio2+0x2c8>
 800db30:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 800db32:	2b02      	cmp	r3, #2
 800db34:	dc09      	bgt.n	800db4a <__kernel_rem_pio2+0x4ce>
 800db36:	2b00      	cmp	r3, #0
 800db38:	dc34      	bgt.n	800dba4 <__kernel_rem_pio2+0x528>
 800db3a:	d05e      	beq.n	800dbfa <__kernel_rem_pio2+0x57e>
 800db3c:	9b07      	ldr	r3, [sp, #28]
 800db3e:	f003 0007 	and.w	r0, r3, #7
 800db42:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 800db46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800db4a:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 800db4c:	2b03      	cmp	r3, #3
 800db4e:	d1f5      	bne.n	800db3c <__kernel_rem_pio2+0x4c0>
 800db50:	9a06      	ldr	r2, [sp, #24]
 800db52:	ab48      	add	r3, sp, #288	; 0x120
 800db54:	441a      	add	r2, r3
 800db56:	4615      	mov	r5, r2
 800db58:	4692      	mov	sl, r2
 800db5a:	46a3      	mov	fp, r4
 800db5c:	f1bb 0f00 	cmp.w	fp, #0
 800db60:	dc7a      	bgt.n	800dc58 <__kernel_rem_pio2+0x5dc>
 800db62:	46aa      	mov	sl, r5
 800db64:	46a3      	mov	fp, r4
 800db66:	f1bb 0f01 	cmp.w	fp, #1
 800db6a:	f300 8094 	bgt.w	800dc96 <__kernel_rem_pio2+0x61a>
 800db6e:	2700      	movs	r7, #0
 800db70:	463e      	mov	r6, r7
 800db72:	2c01      	cmp	r4, #1
 800db74:	f300 80ae 	bgt.w	800dcd4 <__kernel_rem_pio2+0x658>
 800db78:	e9dd 5048 	ldrd	r5, r0, [sp, #288]	; 0x120
 800db7c:	e9dd 414a 	ldrd	r4, r1, [sp, #296]	; 0x128
 800db80:	9b02      	ldr	r3, [sp, #8]
 800db82:	2b00      	cmp	r3, #0
 800db84:	f040 80b0 	bne.w	800dce8 <__kernel_rem_pio2+0x66c>
 800db88:	4603      	mov	r3, r0
 800db8a:	462a      	mov	r2, r5
 800db8c:	9801      	ldr	r0, [sp, #4]
 800db8e:	e9c0 2300 	strd	r2, r3, [r0]
 800db92:	4622      	mov	r2, r4
 800db94:	460b      	mov	r3, r1
 800db96:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800db9a:	463a      	mov	r2, r7
 800db9c:	4633      	mov	r3, r6
 800db9e:	e9c0 2304 	strd	r2, r3, [r0, #16]
 800dba2:	e7cb      	b.n	800db3c <__kernel_rem_pio2+0x4c0>
 800dba4:	2000      	movs	r0, #0
 800dba6:	9a06      	ldr	r2, [sp, #24]
 800dba8:	ab48      	add	r3, sp, #288	; 0x120
 800dbaa:	441a      	add	r2, r3
 800dbac:	4615      	mov	r5, r2
 800dbae:	46a0      	mov	r8, r4
 800dbb0:	4601      	mov	r1, r0
 800dbb2:	f1b8 0f00 	cmp.w	r8, #0
 800dbb6:	da3c      	bge.n	800dc32 <__kernel_rem_pio2+0x5b6>
 800dbb8:	9b02      	ldr	r3, [sp, #8]
 800dbba:	2b00      	cmp	r3, #0
 800dbbc:	d040      	beq.n	800dc40 <__kernel_rem_pio2+0x5c4>
 800dbbe:	f101 4500 	add.w	r5, r1, #2147483648	; 0x80000000
 800dbc2:	4602      	mov	r2, r0
 800dbc4:	462b      	mov	r3, r5
 800dbc6:	9d01      	ldr	r5, [sp, #4]
 800dbc8:	2601      	movs	r6, #1
 800dbca:	e9c5 2300 	strd	r2, r3, [r5]
 800dbce:	460b      	mov	r3, r1
 800dbd0:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 800dbd4:	f7f2 fb04 	bl	80001e0 <__aeabi_dsub>
 800dbd8:	4684      	mov	ip, r0
 800dbda:	460f      	mov	r7, r1
 800dbdc:	ad48      	add	r5, sp, #288	; 0x120
 800dbde:	42b4      	cmp	r4, r6
 800dbe0:	f105 0508 	add.w	r5, r5, #8
 800dbe4:	da2e      	bge.n	800dc44 <__kernel_rem_pio2+0x5c8>
 800dbe6:	9b02      	ldr	r3, [sp, #8]
 800dbe8:	b10b      	cbz	r3, 800dbee <__kernel_rem_pio2+0x572>
 800dbea:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
 800dbee:	4662      	mov	r2, ip
 800dbf0:	463b      	mov	r3, r7
 800dbf2:	9901      	ldr	r1, [sp, #4]
 800dbf4:	e9c1 2302 	strd	r2, r3, [r1, #8]
 800dbf8:	e7a0      	b.n	800db3c <__kernel_rem_pio2+0x4c0>
 800dbfa:	9a06      	ldr	r2, [sp, #24]
 800dbfc:	9ea2      	ldr	r6, [sp, #648]	; 0x288
 800dbfe:	ab48      	add	r3, sp, #288	; 0x120
 800dc00:	441a      	add	r2, r3
 800dc02:	4615      	mov	r5, r2
 800dc04:	4637      	mov	r7, r6
 800dc06:	2c00      	cmp	r4, #0
 800dc08:	da09      	bge.n	800dc1e <__kernel_rem_pio2+0x5a2>
 800dc0a:	9b02      	ldr	r3, [sp, #8]
 800dc0c:	b10b      	cbz	r3, 800dc12 <__kernel_rem_pio2+0x596>
 800dc0e:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
 800dc12:	4632      	mov	r2, r6
 800dc14:	463b      	mov	r3, r7
 800dc16:	9901      	ldr	r1, [sp, #4]
 800dc18:	e9c1 2300 	strd	r2, r3, [r1]
 800dc1c:	e78e      	b.n	800db3c <__kernel_rem_pio2+0x4c0>
 800dc1e:	4630      	mov	r0, r6
 800dc20:	e875 2302 	ldrd	r2, r3, [r5], #-8
 800dc24:	4639      	mov	r1, r7
 800dc26:	f7f2 fadd 	bl	80001e4 <__adddf3>
 800dc2a:	3c01      	subs	r4, #1
 800dc2c:	4606      	mov	r6, r0
 800dc2e:	460f      	mov	r7, r1
 800dc30:	e7e9      	b.n	800dc06 <__kernel_rem_pio2+0x58a>
 800dc32:	e875 2302 	ldrd	r2, r3, [r5], #-8
 800dc36:	f7f2 fad5 	bl	80001e4 <__adddf3>
 800dc3a:	f108 38ff 	add.w	r8, r8, #4294967295
 800dc3e:	e7b8      	b.n	800dbb2 <__kernel_rem_pio2+0x536>
 800dc40:	460d      	mov	r5, r1
 800dc42:	e7be      	b.n	800dbc2 <__kernel_rem_pio2+0x546>
 800dc44:	4660      	mov	r0, ip
 800dc46:	e9d5 2300 	ldrd	r2, r3, [r5]
 800dc4a:	4639      	mov	r1, r7
 800dc4c:	f7f2 faca 	bl	80001e4 <__adddf3>
 800dc50:	3601      	adds	r6, #1
 800dc52:	4684      	mov	ip, r0
 800dc54:	460f      	mov	r7, r1
 800dc56:	e7c2      	b.n	800dbde <__kernel_rem_pio2+0x562>
 800dc58:	e9da 6700 	ldrd	r6, r7, [sl]
 800dc5c:	e95a 8902 	ldrd	r8, r9, [sl, #-8]
 800dc60:	4632      	mov	r2, r6
 800dc62:	463b      	mov	r3, r7
 800dc64:	4640      	mov	r0, r8
 800dc66:	4649      	mov	r1, r9
 800dc68:	f7f2 fabc 	bl	80001e4 <__adddf3>
 800dc6c:	4602      	mov	r2, r0
 800dc6e:	460b      	mov	r3, r1
 800dc70:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800dc74:	4640      	mov	r0, r8
 800dc76:	4649      	mov	r1, r9
 800dc78:	f7f2 fab2 	bl	80001e0 <__aeabi_dsub>
 800dc7c:	4632      	mov	r2, r6
 800dc7e:	463b      	mov	r3, r7
 800dc80:	f7f2 fab0 	bl	80001e4 <__adddf3>
 800dc84:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800dc88:	e86a 0102 	strd	r0, r1, [sl], #-8
 800dc8c:	f10b 3bff 	add.w	fp, fp, #4294967295
 800dc90:	e9ca 2300 	strd	r2, r3, [sl]
 800dc94:	e762      	b.n	800db5c <__kernel_rem_pio2+0x4e0>
 800dc96:	e9da 8900 	ldrd	r8, r9, [sl]
 800dc9a:	e95a 6702 	ldrd	r6, r7, [sl, #-8]
 800dc9e:	4642      	mov	r2, r8
 800dca0:	464b      	mov	r3, r9
 800dca2:	4630      	mov	r0, r6
 800dca4:	4639      	mov	r1, r7
 800dca6:	f7f2 fa9d 	bl	80001e4 <__adddf3>
 800dcaa:	4602      	mov	r2, r0
 800dcac:	460b      	mov	r3, r1
 800dcae:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800dcb2:	4630      	mov	r0, r6
 800dcb4:	4639      	mov	r1, r7
 800dcb6:	f7f2 fa93 	bl	80001e0 <__aeabi_dsub>
 800dcba:	4642      	mov	r2, r8
 800dcbc:	464b      	mov	r3, r9
 800dcbe:	f7f2 fa91 	bl	80001e4 <__adddf3>
 800dcc2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800dcc6:	e86a 0102 	strd	r0, r1, [sl], #-8
 800dcca:	f10b 3bff 	add.w	fp, fp, #4294967295
 800dcce:	e9ca 2300 	strd	r2, r3, [sl]
 800dcd2:	e748      	b.n	800db66 <__kernel_rem_pio2+0x4ea>
 800dcd4:	4638      	mov	r0, r7
 800dcd6:	e875 2302 	ldrd	r2, r3, [r5], #-8
 800dcda:	4631      	mov	r1, r6
 800dcdc:	f7f2 fa82 	bl	80001e4 <__adddf3>
 800dce0:	3c01      	subs	r4, #1
 800dce2:	4607      	mov	r7, r0
 800dce4:	460e      	mov	r6, r1
 800dce6:	e744      	b.n	800db72 <__kernel_rem_pio2+0x4f6>
 800dce8:	9b01      	ldr	r3, [sp, #4]
 800dcea:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800dcee:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 800dcf2:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
 800dcf6:	e9c3 0401 	strd	r0, r4, [r3, #4]
 800dcfa:	e9c3 1703 	strd	r1, r7, [r3, #12]
 800dcfe:	601d      	str	r5, [r3, #0]
 800dd00:	615e      	str	r6, [r3, #20]
 800dd02:	e71b      	b.n	800db3c <__kernel_rem_pio2+0x4c0>
 800dd04:	41700000 	.word	0x41700000
 800dd08:	3e700000 	.word	0x3e700000
 800dd0c:	00000000 	.word	0x00000000

0800dd10 <__kernel_sin>:
 800dd10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dd14:	b086      	sub	sp, #24
 800dd16:	e9cd 2300 	strd	r2, r3, [sp]
 800dd1a:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800dd1e:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800dd22:	4682      	mov	sl, r0
 800dd24:	460c      	mov	r4, r1
 800dd26:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 800dd28:	da03      	bge.n	800dd32 <__kernel_sin+0x22>
 800dd2a:	f7f2 fec1 	bl	8000ab0 <__aeabi_d2iz>
 800dd2e:	2800      	cmp	r0, #0
 800dd30:	d050      	beq.n	800ddd4 <__kernel_sin+0xc4>
 800dd32:	4652      	mov	r2, sl
 800dd34:	4623      	mov	r3, r4
 800dd36:	4650      	mov	r0, sl
 800dd38:	4621      	mov	r1, r4
 800dd3a:	f7f2 fc09 	bl	8000550 <__aeabi_dmul>
 800dd3e:	4606      	mov	r6, r0
 800dd40:	460f      	mov	r7, r1
 800dd42:	4602      	mov	r2, r0
 800dd44:	460b      	mov	r3, r1
 800dd46:	4650      	mov	r0, sl
 800dd48:	4621      	mov	r1, r4
 800dd4a:	f7f2 fc01 	bl	8000550 <__aeabi_dmul>
 800dd4e:	a33e      	add	r3, pc, #248	; (adr r3, 800de48 <__kernel_sin+0x138>)
 800dd50:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd54:	4680      	mov	r8, r0
 800dd56:	4689      	mov	r9, r1
 800dd58:	4630      	mov	r0, r6
 800dd5a:	4639      	mov	r1, r7
 800dd5c:	f7f2 fbf8 	bl	8000550 <__aeabi_dmul>
 800dd60:	a33b      	add	r3, pc, #236	; (adr r3, 800de50 <__kernel_sin+0x140>)
 800dd62:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd66:	f7f2 fa3b 	bl	80001e0 <__aeabi_dsub>
 800dd6a:	4632      	mov	r2, r6
 800dd6c:	463b      	mov	r3, r7
 800dd6e:	f7f2 fbef 	bl	8000550 <__aeabi_dmul>
 800dd72:	a339      	add	r3, pc, #228	; (adr r3, 800de58 <__kernel_sin+0x148>)
 800dd74:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd78:	f7f2 fa34 	bl	80001e4 <__adddf3>
 800dd7c:	4632      	mov	r2, r6
 800dd7e:	463b      	mov	r3, r7
 800dd80:	f7f2 fbe6 	bl	8000550 <__aeabi_dmul>
 800dd84:	a336      	add	r3, pc, #216	; (adr r3, 800de60 <__kernel_sin+0x150>)
 800dd86:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd8a:	f7f2 fa29 	bl	80001e0 <__aeabi_dsub>
 800dd8e:	4632      	mov	r2, r6
 800dd90:	463b      	mov	r3, r7
 800dd92:	f7f2 fbdd 	bl	8000550 <__aeabi_dmul>
 800dd96:	a334      	add	r3, pc, #208	; (adr r3, 800de68 <__kernel_sin+0x158>)
 800dd98:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd9c:	f7f2 fa22 	bl	80001e4 <__adddf3>
 800dda0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800dda4:	b9dd      	cbnz	r5, 800ddde <__kernel_sin+0xce>
 800dda6:	4602      	mov	r2, r0
 800dda8:	460b      	mov	r3, r1
 800ddaa:	4630      	mov	r0, r6
 800ddac:	4639      	mov	r1, r7
 800ddae:	f7f2 fbcf 	bl	8000550 <__aeabi_dmul>
 800ddb2:	a32f      	add	r3, pc, #188	; (adr r3, 800de70 <__kernel_sin+0x160>)
 800ddb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ddb8:	f7f2 fa12 	bl	80001e0 <__aeabi_dsub>
 800ddbc:	4642      	mov	r2, r8
 800ddbe:	464b      	mov	r3, r9
 800ddc0:	f7f2 fbc6 	bl	8000550 <__aeabi_dmul>
 800ddc4:	4602      	mov	r2, r0
 800ddc6:	460b      	mov	r3, r1
 800ddc8:	4650      	mov	r0, sl
 800ddca:	4621      	mov	r1, r4
 800ddcc:	f7f2 fa0a 	bl	80001e4 <__adddf3>
 800ddd0:	4682      	mov	sl, r0
 800ddd2:	460c      	mov	r4, r1
 800ddd4:	4650      	mov	r0, sl
 800ddd6:	4621      	mov	r1, r4
 800ddd8:	b006      	add	sp, #24
 800ddda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ddde:	2200      	movs	r2, #0
 800dde0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800dde4:	4b24      	ldr	r3, [pc, #144]	; (800de78 <__kernel_sin+0x168>)
 800dde6:	f7f2 fbb3 	bl	8000550 <__aeabi_dmul>
 800ddea:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ddee:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ddf2:	4640      	mov	r0, r8
 800ddf4:	4649      	mov	r1, r9
 800ddf6:	f7f2 fbab 	bl	8000550 <__aeabi_dmul>
 800ddfa:	4602      	mov	r2, r0
 800ddfc:	460b      	mov	r3, r1
 800ddfe:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800de02:	f7f2 f9ed 	bl	80001e0 <__aeabi_dsub>
 800de06:	4632      	mov	r2, r6
 800de08:	463b      	mov	r3, r7
 800de0a:	f7f2 fba1 	bl	8000550 <__aeabi_dmul>
 800de0e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800de12:	f7f2 f9e5 	bl	80001e0 <__aeabi_dsub>
 800de16:	a316      	add	r3, pc, #88	; (adr r3, 800de70 <__kernel_sin+0x160>)
 800de18:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de1c:	4606      	mov	r6, r0
 800de1e:	460f      	mov	r7, r1
 800de20:	4640      	mov	r0, r8
 800de22:	4649      	mov	r1, r9
 800de24:	f7f2 fb94 	bl	8000550 <__aeabi_dmul>
 800de28:	4602      	mov	r2, r0
 800de2a:	460b      	mov	r3, r1
 800de2c:	4630      	mov	r0, r6
 800de2e:	4639      	mov	r1, r7
 800de30:	f7f2 f9d8 	bl	80001e4 <__adddf3>
 800de34:	4602      	mov	r2, r0
 800de36:	460b      	mov	r3, r1
 800de38:	4650      	mov	r0, sl
 800de3a:	4621      	mov	r1, r4
 800de3c:	f7f2 f9d0 	bl	80001e0 <__aeabi_dsub>
 800de40:	e7c6      	b.n	800ddd0 <__kernel_sin+0xc0>
 800de42:	bf00      	nop
 800de44:	f3af 8000 	nop.w
 800de48:	5acfd57c 	.word	0x5acfd57c
 800de4c:	3de5d93a 	.word	0x3de5d93a
 800de50:	8a2b9ceb 	.word	0x8a2b9ceb
 800de54:	3e5ae5e6 	.word	0x3e5ae5e6
 800de58:	57b1fe7d 	.word	0x57b1fe7d
 800de5c:	3ec71de3 	.word	0x3ec71de3
 800de60:	19c161d5 	.word	0x19c161d5
 800de64:	3f2a01a0 	.word	0x3f2a01a0
 800de68:	1110f8a6 	.word	0x1110f8a6
 800de6c:	3f811111 	.word	0x3f811111
 800de70:	55555549 	.word	0x55555549
 800de74:	3fc55555 	.word	0x3fc55555
 800de78:	3fe00000 	.word	0x3fe00000

0800de7c <fabs>:
 800de7c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800de80:	4770      	bx	lr
 800de82:	0000      	movs	r0, r0
 800de84:	0000      	movs	r0, r0
	...

0800de88 <floor>:
 800de88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800de8c:	f3c1 580a 	ubfx	r8, r1, #20, #11
 800de90:	f2a8 36ff 	subw	r6, r8, #1023	; 0x3ff
 800de94:	2e13      	cmp	r6, #19
 800de96:	4602      	mov	r2, r0
 800de98:	460b      	mov	r3, r1
 800de9a:	4607      	mov	r7, r0
 800de9c:	460c      	mov	r4, r1
 800de9e:	4605      	mov	r5, r0
 800dea0:	dc34      	bgt.n	800df0c <floor+0x84>
 800dea2:	2e00      	cmp	r6, #0
 800dea4:	da15      	bge.n	800ded2 <floor+0x4a>
 800dea6:	a334      	add	r3, pc, #208	; (adr r3, 800df78 <floor+0xf0>)
 800dea8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800deac:	f7f2 f99a 	bl	80001e4 <__adddf3>
 800deb0:	2200      	movs	r2, #0
 800deb2:	2300      	movs	r3, #0
 800deb4:	f7f2 fddc 	bl	8000a70 <__aeabi_dcmpgt>
 800deb8:	b140      	cbz	r0, 800decc <floor+0x44>
 800deba:	2c00      	cmp	r4, #0
 800debc:	da59      	bge.n	800df72 <floor+0xea>
 800debe:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800dec2:	ea57 0503 	orrs.w	r5, r7, r3
 800dec6:	d001      	beq.n	800decc <floor+0x44>
 800dec8:	2500      	movs	r5, #0
 800deca:	4c2d      	ldr	r4, [pc, #180]	; (800df80 <floor+0xf8>)
 800decc:	4623      	mov	r3, r4
 800dece:	462f      	mov	r7, r5
 800ded0:	e025      	b.n	800df1e <floor+0x96>
 800ded2:	4a2c      	ldr	r2, [pc, #176]	; (800df84 <floor+0xfc>)
 800ded4:	fa42 f806 	asr.w	r8, r2, r6
 800ded8:	ea01 0208 	and.w	r2, r1, r8
 800dedc:	4302      	orrs	r2, r0
 800dede:	d01e      	beq.n	800df1e <floor+0x96>
 800dee0:	a325      	add	r3, pc, #148	; (adr r3, 800df78 <floor+0xf0>)
 800dee2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dee6:	f7f2 f97d 	bl	80001e4 <__adddf3>
 800deea:	2200      	movs	r2, #0
 800deec:	2300      	movs	r3, #0
 800deee:	f7f2 fdbf 	bl	8000a70 <__aeabi_dcmpgt>
 800def2:	2800      	cmp	r0, #0
 800def4:	d0ea      	beq.n	800decc <floor+0x44>
 800def6:	2c00      	cmp	r4, #0
 800def8:	bfbe      	ittt	lt
 800defa:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800defe:	fa43 f606 	asrlt.w	r6, r3, r6
 800df02:	19a4      	addlt	r4, r4, r6
 800df04:	2500      	movs	r5, #0
 800df06:	ea24 0408 	bic.w	r4, r4, r8
 800df0a:	e7df      	b.n	800decc <floor+0x44>
 800df0c:	2e33      	cmp	r6, #51	; 0x33
 800df0e:	dd0a      	ble.n	800df26 <floor+0x9e>
 800df10:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800df14:	d103      	bne.n	800df1e <floor+0x96>
 800df16:	f7f2 f965 	bl	80001e4 <__adddf3>
 800df1a:	4607      	mov	r7, r0
 800df1c:	460b      	mov	r3, r1
 800df1e:	4638      	mov	r0, r7
 800df20:	4619      	mov	r1, r3
 800df22:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800df26:	f04f 32ff 	mov.w	r2, #4294967295
 800df2a:	f2a8 4813 	subw	r8, r8, #1043	; 0x413
 800df2e:	fa22 f808 	lsr.w	r8, r2, r8
 800df32:	ea18 0f00 	tst.w	r8, r0
 800df36:	d0f2      	beq.n	800df1e <floor+0x96>
 800df38:	a30f      	add	r3, pc, #60	; (adr r3, 800df78 <floor+0xf0>)
 800df3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df3e:	f7f2 f951 	bl	80001e4 <__adddf3>
 800df42:	2200      	movs	r2, #0
 800df44:	2300      	movs	r3, #0
 800df46:	f7f2 fd93 	bl	8000a70 <__aeabi_dcmpgt>
 800df4a:	2800      	cmp	r0, #0
 800df4c:	d0be      	beq.n	800decc <floor+0x44>
 800df4e:	2c00      	cmp	r4, #0
 800df50:	da02      	bge.n	800df58 <floor+0xd0>
 800df52:	2e14      	cmp	r6, #20
 800df54:	d103      	bne.n	800df5e <floor+0xd6>
 800df56:	3401      	adds	r4, #1
 800df58:	ea25 0508 	bic.w	r5, r5, r8
 800df5c:	e7b6      	b.n	800decc <floor+0x44>
 800df5e:	2301      	movs	r3, #1
 800df60:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800df64:	fa03 f606 	lsl.w	r6, r3, r6
 800df68:	4435      	add	r5, r6
 800df6a:	42bd      	cmp	r5, r7
 800df6c:	bf38      	it	cc
 800df6e:	18e4      	addcc	r4, r4, r3
 800df70:	e7f2      	b.n	800df58 <floor+0xd0>
 800df72:	2500      	movs	r5, #0
 800df74:	462c      	mov	r4, r5
 800df76:	e7a9      	b.n	800decc <floor+0x44>
 800df78:	8800759c 	.word	0x8800759c
 800df7c:	7e37e43c 	.word	0x7e37e43c
 800df80:	bff00000 	.word	0xbff00000
 800df84:	000fffff 	.word	0x000fffff

0800df88 <scalbn>:
 800df88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800df8a:	f3c1 560a 	ubfx	r6, r1, #20, #11
 800df8e:	4604      	mov	r4, r0
 800df90:	460d      	mov	r5, r1
 800df92:	4617      	mov	r7, r2
 800df94:	460b      	mov	r3, r1
 800df96:	b996      	cbnz	r6, 800dfbe <scalbn+0x36>
 800df98:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800df9c:	4303      	orrs	r3, r0
 800df9e:	d039      	beq.n	800e014 <scalbn+0x8c>
 800dfa0:	4b35      	ldr	r3, [pc, #212]	; (800e078 <scalbn+0xf0>)
 800dfa2:	2200      	movs	r2, #0
 800dfa4:	f7f2 fad4 	bl	8000550 <__aeabi_dmul>
 800dfa8:	4b34      	ldr	r3, [pc, #208]	; (800e07c <scalbn+0xf4>)
 800dfaa:	4604      	mov	r4, r0
 800dfac:	429f      	cmp	r7, r3
 800dfae:	460d      	mov	r5, r1
 800dfb0:	da0f      	bge.n	800dfd2 <scalbn+0x4a>
 800dfb2:	a32d      	add	r3, pc, #180	; (adr r3, 800e068 <scalbn+0xe0>)
 800dfb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dfb8:	f7f2 faca 	bl	8000550 <__aeabi_dmul>
 800dfbc:	e006      	b.n	800dfcc <scalbn+0x44>
 800dfbe:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800dfc2:	4296      	cmp	r6, r2
 800dfc4:	d10a      	bne.n	800dfdc <scalbn+0x54>
 800dfc6:	4602      	mov	r2, r0
 800dfc8:	f7f2 f90c 	bl	80001e4 <__adddf3>
 800dfcc:	4604      	mov	r4, r0
 800dfce:	460d      	mov	r5, r1
 800dfd0:	e020      	b.n	800e014 <scalbn+0x8c>
 800dfd2:	460b      	mov	r3, r1
 800dfd4:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800dfd8:	f1a1 0636 	sub.w	r6, r1, #54	; 0x36
 800dfdc:	f240 72fe 	movw	r2, #2046	; 0x7fe
 800dfe0:	19b9      	adds	r1, r7, r6
 800dfe2:	4291      	cmp	r1, r2
 800dfe4:	dd0e      	ble.n	800e004 <scalbn+0x7c>
 800dfe6:	a322      	add	r3, pc, #136	; (adr r3, 800e070 <scalbn+0xe8>)
 800dfe8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dfec:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 800dff0:	f044 41fc 	orr.w	r1, r4, #2113929216	; 0x7e000000
 800dff4:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
 800dff8:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
 800dffc:	4820      	ldr	r0, [pc, #128]	; (800e080 <scalbn+0xf8>)
 800dffe:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
 800e002:	e7d9      	b.n	800dfb8 <scalbn+0x30>
 800e004:	2900      	cmp	r1, #0
 800e006:	dd08      	ble.n	800e01a <scalbn+0x92>
 800e008:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800e00c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800e010:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 800e014:	4620      	mov	r0, r4
 800e016:	4629      	mov	r1, r5
 800e018:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e01a:	f111 0f35 	cmn.w	r1, #53	; 0x35
 800e01e:	da16      	bge.n	800e04e <scalbn+0xc6>
 800e020:	f24c 3350 	movw	r3, #50000	; 0xc350
 800e024:	429f      	cmp	r7, r3
 800e026:	ea4f 73d5 	mov.w	r3, r5, lsr #31
 800e02a:	dd08      	ble.n	800e03e <scalbn+0xb6>
 800e02c:	4c15      	ldr	r4, [pc, #84]	; (800e084 <scalbn+0xfc>)
 800e02e:	4814      	ldr	r0, [pc, #80]	; (800e080 <scalbn+0xf8>)
 800e030:	f363 74df 	bfi	r4, r3, #31, #1
 800e034:	a30e      	add	r3, pc, #56	; (adr r3, 800e070 <scalbn+0xe8>)
 800e036:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e03a:	4621      	mov	r1, r4
 800e03c:	e7bc      	b.n	800dfb8 <scalbn+0x30>
 800e03e:	4c12      	ldr	r4, [pc, #72]	; (800e088 <scalbn+0x100>)
 800e040:	4812      	ldr	r0, [pc, #72]	; (800e08c <scalbn+0x104>)
 800e042:	f363 74df 	bfi	r4, r3, #31, #1
 800e046:	a308      	add	r3, pc, #32	; (adr r3, 800e068 <scalbn+0xe0>)
 800e048:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e04c:	e7f5      	b.n	800e03a <scalbn+0xb2>
 800e04e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800e052:	3136      	adds	r1, #54	; 0x36
 800e054:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800e058:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 800e05c:	4620      	mov	r0, r4
 800e05e:	4629      	mov	r1, r5
 800e060:	2200      	movs	r2, #0
 800e062:	4b0b      	ldr	r3, [pc, #44]	; (800e090 <scalbn+0x108>)
 800e064:	e7a8      	b.n	800dfb8 <scalbn+0x30>
 800e066:	bf00      	nop
 800e068:	c2f8f359 	.word	0xc2f8f359
 800e06c:	01a56e1f 	.word	0x01a56e1f
 800e070:	8800759c 	.word	0x8800759c
 800e074:	7e37e43c 	.word	0x7e37e43c
 800e078:	43500000 	.word	0x43500000
 800e07c:	ffff3cb0 	.word	0xffff3cb0
 800e080:	8800759c 	.word	0x8800759c
 800e084:	7e37e43c 	.word	0x7e37e43c
 800e088:	01a56e1f 	.word	0x01a56e1f
 800e08c:	c2f8f359 	.word	0xc2f8f359
 800e090:	3c900000 	.word	0x3c900000

0800e094 <nanf>:
 800e094:	4800      	ldr	r0, [pc, #0]	; (800e098 <nanf+0x4>)
 800e096:	4770      	bx	lr
 800e098:	7fc00000 	.word	0x7fc00000

0800e09c <__errno>:
 800e09c:	4b01      	ldr	r3, [pc, #4]	; (800e0a4 <__errno+0x8>)
 800e09e:	6818      	ldr	r0, [r3, #0]
 800e0a0:	4770      	bx	lr
 800e0a2:	bf00      	nop
 800e0a4:	20000188 	.word	0x20000188

0800e0a8 <__libc_init_array>:
 800e0a8:	b570      	push	{r4, r5, r6, lr}
 800e0aa:	2600      	movs	r6, #0
 800e0ac:	4d0c      	ldr	r5, [pc, #48]	; (800e0e0 <__libc_init_array+0x38>)
 800e0ae:	4c0d      	ldr	r4, [pc, #52]	; (800e0e4 <__libc_init_array+0x3c>)
 800e0b0:	1b64      	subs	r4, r4, r5
 800e0b2:	10a4      	asrs	r4, r4, #2
 800e0b4:	42a6      	cmp	r6, r4
 800e0b6:	d109      	bne.n	800e0cc <__libc_init_array+0x24>
 800e0b8:	f002 feda 	bl	8010e70 <_init>
 800e0bc:	2600      	movs	r6, #0
 800e0be:	4d0a      	ldr	r5, [pc, #40]	; (800e0e8 <__libc_init_array+0x40>)
 800e0c0:	4c0a      	ldr	r4, [pc, #40]	; (800e0ec <__libc_init_array+0x44>)
 800e0c2:	1b64      	subs	r4, r4, r5
 800e0c4:	10a4      	asrs	r4, r4, #2
 800e0c6:	42a6      	cmp	r6, r4
 800e0c8:	d105      	bne.n	800e0d6 <__libc_init_array+0x2e>
 800e0ca:	bd70      	pop	{r4, r5, r6, pc}
 800e0cc:	f855 3b04 	ldr.w	r3, [r5], #4
 800e0d0:	4798      	blx	r3
 800e0d2:	3601      	adds	r6, #1
 800e0d4:	e7ee      	b.n	800e0b4 <__libc_init_array+0xc>
 800e0d6:	f855 3b04 	ldr.w	r3, [r5], #4
 800e0da:	4798      	blx	r3
 800e0dc:	3601      	adds	r6, #1
 800e0de:	e7f2      	b.n	800e0c6 <__libc_init_array+0x1e>
 800e0e0:	08011d7c 	.word	0x08011d7c
 800e0e4:	08011d7c 	.word	0x08011d7c
 800e0e8:	08011d7c 	.word	0x08011d7c
 800e0ec:	08011d84 	.word	0x08011d84

0800e0f0 <malloc>:
 800e0f0:	4b02      	ldr	r3, [pc, #8]	; (800e0fc <malloc+0xc>)
 800e0f2:	4601      	mov	r1, r0
 800e0f4:	6818      	ldr	r0, [r3, #0]
 800e0f6:	f000 b86d 	b.w	800e1d4 <_malloc_r>
 800e0fa:	bf00      	nop
 800e0fc:	20000188 	.word	0x20000188

0800e100 <free>:
 800e100:	4b02      	ldr	r3, [pc, #8]	; (800e10c <free+0xc>)
 800e102:	4601      	mov	r1, r0
 800e104:	6818      	ldr	r0, [r3, #0]
 800e106:	f000 b819 	b.w	800e13c <_free_r>
 800e10a:	bf00      	nop
 800e10c:	20000188 	.word	0x20000188

0800e110 <memcmp>:
 800e110:	b530      	push	{r4, r5, lr}
 800e112:	2400      	movs	r4, #0
 800e114:	3901      	subs	r1, #1
 800e116:	42a2      	cmp	r2, r4
 800e118:	d101      	bne.n	800e11e <memcmp+0xe>
 800e11a:	2000      	movs	r0, #0
 800e11c:	e005      	b.n	800e12a <memcmp+0x1a>
 800e11e:	5d03      	ldrb	r3, [r0, r4]
 800e120:	3401      	adds	r4, #1
 800e122:	5d0d      	ldrb	r5, [r1, r4]
 800e124:	42ab      	cmp	r3, r5
 800e126:	d0f6      	beq.n	800e116 <memcmp+0x6>
 800e128:	1b58      	subs	r0, r3, r5
 800e12a:	bd30      	pop	{r4, r5, pc}

0800e12c <memset>:
 800e12c:	4603      	mov	r3, r0
 800e12e:	4402      	add	r2, r0
 800e130:	4293      	cmp	r3, r2
 800e132:	d100      	bne.n	800e136 <memset+0xa>
 800e134:	4770      	bx	lr
 800e136:	f803 1b01 	strb.w	r1, [r3], #1
 800e13a:	e7f9      	b.n	800e130 <memset+0x4>

0800e13c <_free_r>:
 800e13c:	b538      	push	{r3, r4, r5, lr}
 800e13e:	4605      	mov	r5, r0
 800e140:	2900      	cmp	r1, #0
 800e142:	d043      	beq.n	800e1cc <_free_r+0x90>
 800e144:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e148:	1f0c      	subs	r4, r1, #4
 800e14a:	2b00      	cmp	r3, #0
 800e14c:	bfb8      	it	lt
 800e14e:	18e4      	addlt	r4, r4, r3
 800e150:	f001 fbd0 	bl	800f8f4 <__malloc_lock>
 800e154:	4a1e      	ldr	r2, [pc, #120]	; (800e1d0 <_free_r+0x94>)
 800e156:	6813      	ldr	r3, [r2, #0]
 800e158:	4610      	mov	r0, r2
 800e15a:	b933      	cbnz	r3, 800e16a <_free_r+0x2e>
 800e15c:	6063      	str	r3, [r4, #4]
 800e15e:	6014      	str	r4, [r2, #0]
 800e160:	4628      	mov	r0, r5
 800e162:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e166:	f001 bbcb 	b.w	800f900 <__malloc_unlock>
 800e16a:	42a3      	cmp	r3, r4
 800e16c:	d90a      	bls.n	800e184 <_free_r+0x48>
 800e16e:	6821      	ldr	r1, [r4, #0]
 800e170:	1862      	adds	r2, r4, r1
 800e172:	4293      	cmp	r3, r2
 800e174:	bf01      	itttt	eq
 800e176:	681a      	ldreq	r2, [r3, #0]
 800e178:	685b      	ldreq	r3, [r3, #4]
 800e17a:	1852      	addeq	r2, r2, r1
 800e17c:	6022      	streq	r2, [r4, #0]
 800e17e:	6063      	str	r3, [r4, #4]
 800e180:	6004      	str	r4, [r0, #0]
 800e182:	e7ed      	b.n	800e160 <_free_r+0x24>
 800e184:	461a      	mov	r2, r3
 800e186:	685b      	ldr	r3, [r3, #4]
 800e188:	b10b      	cbz	r3, 800e18e <_free_r+0x52>
 800e18a:	42a3      	cmp	r3, r4
 800e18c:	d9fa      	bls.n	800e184 <_free_r+0x48>
 800e18e:	6811      	ldr	r1, [r2, #0]
 800e190:	1850      	adds	r0, r2, r1
 800e192:	42a0      	cmp	r0, r4
 800e194:	d10b      	bne.n	800e1ae <_free_r+0x72>
 800e196:	6820      	ldr	r0, [r4, #0]
 800e198:	4401      	add	r1, r0
 800e19a:	1850      	adds	r0, r2, r1
 800e19c:	4283      	cmp	r3, r0
 800e19e:	6011      	str	r1, [r2, #0]
 800e1a0:	d1de      	bne.n	800e160 <_free_r+0x24>
 800e1a2:	6818      	ldr	r0, [r3, #0]
 800e1a4:	685b      	ldr	r3, [r3, #4]
 800e1a6:	4401      	add	r1, r0
 800e1a8:	6011      	str	r1, [r2, #0]
 800e1aa:	6053      	str	r3, [r2, #4]
 800e1ac:	e7d8      	b.n	800e160 <_free_r+0x24>
 800e1ae:	d902      	bls.n	800e1b6 <_free_r+0x7a>
 800e1b0:	230c      	movs	r3, #12
 800e1b2:	602b      	str	r3, [r5, #0]
 800e1b4:	e7d4      	b.n	800e160 <_free_r+0x24>
 800e1b6:	6820      	ldr	r0, [r4, #0]
 800e1b8:	1821      	adds	r1, r4, r0
 800e1ba:	428b      	cmp	r3, r1
 800e1bc:	bf01      	itttt	eq
 800e1be:	6819      	ldreq	r1, [r3, #0]
 800e1c0:	685b      	ldreq	r3, [r3, #4]
 800e1c2:	1809      	addeq	r1, r1, r0
 800e1c4:	6021      	streq	r1, [r4, #0]
 800e1c6:	6063      	str	r3, [r4, #4]
 800e1c8:	6054      	str	r4, [r2, #4]
 800e1ca:	e7c9      	b.n	800e160 <_free_r+0x24>
 800e1cc:	bd38      	pop	{r3, r4, r5, pc}
 800e1ce:	bf00      	nop
 800e1d0:	20000838 	.word	0x20000838

0800e1d4 <_malloc_r>:
 800e1d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e1d6:	1ccd      	adds	r5, r1, #3
 800e1d8:	f025 0503 	bic.w	r5, r5, #3
 800e1dc:	3508      	adds	r5, #8
 800e1de:	2d0c      	cmp	r5, #12
 800e1e0:	bf38      	it	cc
 800e1e2:	250c      	movcc	r5, #12
 800e1e4:	2d00      	cmp	r5, #0
 800e1e6:	4606      	mov	r6, r0
 800e1e8:	db01      	blt.n	800e1ee <_malloc_r+0x1a>
 800e1ea:	42a9      	cmp	r1, r5
 800e1ec:	d903      	bls.n	800e1f6 <_malloc_r+0x22>
 800e1ee:	230c      	movs	r3, #12
 800e1f0:	6033      	str	r3, [r6, #0]
 800e1f2:	2000      	movs	r0, #0
 800e1f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e1f6:	f001 fb7d 	bl	800f8f4 <__malloc_lock>
 800e1fa:	4921      	ldr	r1, [pc, #132]	; (800e280 <_malloc_r+0xac>)
 800e1fc:	680a      	ldr	r2, [r1, #0]
 800e1fe:	4614      	mov	r4, r2
 800e200:	b99c      	cbnz	r4, 800e22a <_malloc_r+0x56>
 800e202:	4f20      	ldr	r7, [pc, #128]	; (800e284 <_malloc_r+0xb0>)
 800e204:	683b      	ldr	r3, [r7, #0]
 800e206:	b923      	cbnz	r3, 800e212 <_malloc_r+0x3e>
 800e208:	4621      	mov	r1, r4
 800e20a:	4630      	mov	r0, r6
 800e20c:	f000 fca4 	bl	800eb58 <_sbrk_r>
 800e210:	6038      	str	r0, [r7, #0]
 800e212:	4629      	mov	r1, r5
 800e214:	4630      	mov	r0, r6
 800e216:	f000 fc9f 	bl	800eb58 <_sbrk_r>
 800e21a:	1c43      	adds	r3, r0, #1
 800e21c:	d123      	bne.n	800e266 <_malloc_r+0x92>
 800e21e:	230c      	movs	r3, #12
 800e220:	4630      	mov	r0, r6
 800e222:	6033      	str	r3, [r6, #0]
 800e224:	f001 fb6c 	bl	800f900 <__malloc_unlock>
 800e228:	e7e3      	b.n	800e1f2 <_malloc_r+0x1e>
 800e22a:	6823      	ldr	r3, [r4, #0]
 800e22c:	1b5b      	subs	r3, r3, r5
 800e22e:	d417      	bmi.n	800e260 <_malloc_r+0x8c>
 800e230:	2b0b      	cmp	r3, #11
 800e232:	d903      	bls.n	800e23c <_malloc_r+0x68>
 800e234:	6023      	str	r3, [r4, #0]
 800e236:	441c      	add	r4, r3
 800e238:	6025      	str	r5, [r4, #0]
 800e23a:	e004      	b.n	800e246 <_malloc_r+0x72>
 800e23c:	6863      	ldr	r3, [r4, #4]
 800e23e:	42a2      	cmp	r2, r4
 800e240:	bf0c      	ite	eq
 800e242:	600b      	streq	r3, [r1, #0]
 800e244:	6053      	strne	r3, [r2, #4]
 800e246:	4630      	mov	r0, r6
 800e248:	f001 fb5a 	bl	800f900 <__malloc_unlock>
 800e24c:	f104 000b 	add.w	r0, r4, #11
 800e250:	1d23      	adds	r3, r4, #4
 800e252:	f020 0007 	bic.w	r0, r0, #7
 800e256:	1ac2      	subs	r2, r0, r3
 800e258:	d0cc      	beq.n	800e1f4 <_malloc_r+0x20>
 800e25a:	1a1b      	subs	r3, r3, r0
 800e25c:	50a3      	str	r3, [r4, r2]
 800e25e:	e7c9      	b.n	800e1f4 <_malloc_r+0x20>
 800e260:	4622      	mov	r2, r4
 800e262:	6864      	ldr	r4, [r4, #4]
 800e264:	e7cc      	b.n	800e200 <_malloc_r+0x2c>
 800e266:	1cc4      	adds	r4, r0, #3
 800e268:	f024 0403 	bic.w	r4, r4, #3
 800e26c:	42a0      	cmp	r0, r4
 800e26e:	d0e3      	beq.n	800e238 <_malloc_r+0x64>
 800e270:	1a21      	subs	r1, r4, r0
 800e272:	4630      	mov	r0, r6
 800e274:	f000 fc70 	bl	800eb58 <_sbrk_r>
 800e278:	3001      	adds	r0, #1
 800e27a:	d1dd      	bne.n	800e238 <_malloc_r+0x64>
 800e27c:	e7cf      	b.n	800e21e <_malloc_r+0x4a>
 800e27e:	bf00      	nop
 800e280:	20000838 	.word	0x20000838
 800e284:	2000083c 	.word	0x2000083c

0800e288 <__cvt>:
 800e288:	2b00      	cmp	r3, #0
 800e28a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e28e:	461f      	mov	r7, r3
 800e290:	bfbb      	ittet	lt
 800e292:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 800e296:	461f      	movlt	r7, r3
 800e298:	2300      	movge	r3, #0
 800e29a:	232d      	movlt	r3, #45	; 0x2d
 800e29c:	b088      	sub	sp, #32
 800e29e:	4614      	mov	r4, r2
 800e2a0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800e2a2:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800e2a4:	7013      	strb	r3, [r2, #0]
 800e2a6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800e2a8:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 800e2ac:	f023 0820 	bic.w	r8, r3, #32
 800e2b0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800e2b4:	d005      	beq.n	800e2c2 <__cvt+0x3a>
 800e2b6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800e2ba:	d100      	bne.n	800e2be <__cvt+0x36>
 800e2bc:	3501      	adds	r5, #1
 800e2be:	2302      	movs	r3, #2
 800e2c0:	e000      	b.n	800e2c4 <__cvt+0x3c>
 800e2c2:	2303      	movs	r3, #3
 800e2c4:	aa07      	add	r2, sp, #28
 800e2c6:	9204      	str	r2, [sp, #16]
 800e2c8:	aa06      	add	r2, sp, #24
 800e2ca:	e9cd a202 	strd	sl, r2, [sp, #8]
 800e2ce:	e9cd 3500 	strd	r3, r5, [sp]
 800e2d2:	4622      	mov	r2, r4
 800e2d4:	463b      	mov	r3, r7
 800e2d6:	f000 fcff 	bl	800ecd8 <_dtoa_r>
 800e2da:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800e2de:	4606      	mov	r6, r0
 800e2e0:	d102      	bne.n	800e2e8 <__cvt+0x60>
 800e2e2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800e2e4:	07db      	lsls	r3, r3, #31
 800e2e6:	d522      	bpl.n	800e32e <__cvt+0xa6>
 800e2e8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800e2ec:	eb06 0905 	add.w	r9, r6, r5
 800e2f0:	d110      	bne.n	800e314 <__cvt+0x8c>
 800e2f2:	7833      	ldrb	r3, [r6, #0]
 800e2f4:	2b30      	cmp	r3, #48	; 0x30
 800e2f6:	d10a      	bne.n	800e30e <__cvt+0x86>
 800e2f8:	2200      	movs	r2, #0
 800e2fa:	2300      	movs	r3, #0
 800e2fc:	4620      	mov	r0, r4
 800e2fe:	4639      	mov	r1, r7
 800e300:	f7f2 fb8e 	bl	8000a20 <__aeabi_dcmpeq>
 800e304:	b918      	cbnz	r0, 800e30e <__cvt+0x86>
 800e306:	f1c5 0501 	rsb	r5, r5, #1
 800e30a:	f8ca 5000 	str.w	r5, [sl]
 800e30e:	f8da 3000 	ldr.w	r3, [sl]
 800e312:	4499      	add	r9, r3
 800e314:	2200      	movs	r2, #0
 800e316:	2300      	movs	r3, #0
 800e318:	4620      	mov	r0, r4
 800e31a:	4639      	mov	r1, r7
 800e31c:	f7f2 fb80 	bl	8000a20 <__aeabi_dcmpeq>
 800e320:	b108      	cbz	r0, 800e326 <__cvt+0x9e>
 800e322:	f8cd 901c 	str.w	r9, [sp, #28]
 800e326:	2230      	movs	r2, #48	; 0x30
 800e328:	9b07      	ldr	r3, [sp, #28]
 800e32a:	454b      	cmp	r3, r9
 800e32c:	d307      	bcc.n	800e33e <__cvt+0xb6>
 800e32e:	4630      	mov	r0, r6
 800e330:	9b07      	ldr	r3, [sp, #28]
 800e332:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800e334:	1b9b      	subs	r3, r3, r6
 800e336:	6013      	str	r3, [r2, #0]
 800e338:	b008      	add	sp, #32
 800e33a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e33e:	1c59      	adds	r1, r3, #1
 800e340:	9107      	str	r1, [sp, #28]
 800e342:	701a      	strb	r2, [r3, #0]
 800e344:	e7f0      	b.n	800e328 <__cvt+0xa0>

0800e346 <__exponent>:
 800e346:	4603      	mov	r3, r0
 800e348:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e34a:	2900      	cmp	r1, #0
 800e34c:	f803 2b02 	strb.w	r2, [r3], #2
 800e350:	bfb6      	itet	lt
 800e352:	222d      	movlt	r2, #45	; 0x2d
 800e354:	222b      	movge	r2, #43	; 0x2b
 800e356:	4249      	neglt	r1, r1
 800e358:	2909      	cmp	r1, #9
 800e35a:	7042      	strb	r2, [r0, #1]
 800e35c:	dd2b      	ble.n	800e3b6 <__exponent+0x70>
 800e35e:	f10d 0407 	add.w	r4, sp, #7
 800e362:	46a4      	mov	ip, r4
 800e364:	270a      	movs	r7, #10
 800e366:	fb91 f6f7 	sdiv	r6, r1, r7
 800e36a:	460a      	mov	r2, r1
 800e36c:	46a6      	mov	lr, r4
 800e36e:	fb07 1516 	mls	r5, r7, r6, r1
 800e372:	2a63      	cmp	r2, #99	; 0x63
 800e374:	f105 0530 	add.w	r5, r5, #48	; 0x30
 800e378:	4631      	mov	r1, r6
 800e37a:	f104 34ff 	add.w	r4, r4, #4294967295
 800e37e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800e382:	dcf0      	bgt.n	800e366 <__exponent+0x20>
 800e384:	3130      	adds	r1, #48	; 0x30
 800e386:	f1ae 0502 	sub.w	r5, lr, #2
 800e38a:	f804 1c01 	strb.w	r1, [r4, #-1]
 800e38e:	4629      	mov	r1, r5
 800e390:	1c44      	adds	r4, r0, #1
 800e392:	4561      	cmp	r1, ip
 800e394:	d30a      	bcc.n	800e3ac <__exponent+0x66>
 800e396:	f10d 0209 	add.w	r2, sp, #9
 800e39a:	eba2 020e 	sub.w	r2, r2, lr
 800e39e:	4565      	cmp	r5, ip
 800e3a0:	bf88      	it	hi
 800e3a2:	2200      	movhi	r2, #0
 800e3a4:	4413      	add	r3, r2
 800e3a6:	1a18      	subs	r0, r3, r0
 800e3a8:	b003      	add	sp, #12
 800e3aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e3ac:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e3b0:	f804 2f01 	strb.w	r2, [r4, #1]!
 800e3b4:	e7ed      	b.n	800e392 <__exponent+0x4c>
 800e3b6:	2330      	movs	r3, #48	; 0x30
 800e3b8:	3130      	adds	r1, #48	; 0x30
 800e3ba:	7083      	strb	r3, [r0, #2]
 800e3bc:	70c1      	strb	r1, [r0, #3]
 800e3be:	1d03      	adds	r3, r0, #4
 800e3c0:	e7f1      	b.n	800e3a6 <__exponent+0x60>
	...

0800e3c4 <_printf_float>:
 800e3c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e3c8:	b091      	sub	sp, #68	; 0x44
 800e3ca:	460c      	mov	r4, r1
 800e3cc:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 800e3d0:	4616      	mov	r6, r2
 800e3d2:	461f      	mov	r7, r3
 800e3d4:	4605      	mov	r5, r0
 800e3d6:	f001 fa6d 	bl	800f8b4 <_localeconv_r>
 800e3da:	6803      	ldr	r3, [r0, #0]
 800e3dc:	4618      	mov	r0, r3
 800e3de:	9309      	str	r3, [sp, #36]	; 0x24
 800e3e0:	f7f1 fef2 	bl	80001c8 <strlen>
 800e3e4:	2300      	movs	r3, #0
 800e3e6:	930e      	str	r3, [sp, #56]	; 0x38
 800e3e8:	f8d8 3000 	ldr.w	r3, [r8]
 800e3ec:	900a      	str	r0, [sp, #40]	; 0x28
 800e3ee:	3307      	adds	r3, #7
 800e3f0:	f023 0307 	bic.w	r3, r3, #7
 800e3f4:	f103 0208 	add.w	r2, r3, #8
 800e3f8:	f894 9018 	ldrb.w	r9, [r4, #24]
 800e3fc:	f8d4 b000 	ldr.w	fp, [r4]
 800e400:	f8c8 2000 	str.w	r2, [r8]
 800e404:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e408:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800e40c:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 800e410:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 800e414:	930b      	str	r3, [sp, #44]	; 0x2c
 800e416:	f04f 32ff 	mov.w	r2, #4294967295
 800e41a:	4640      	mov	r0, r8
 800e41c:	4b9c      	ldr	r3, [pc, #624]	; (800e690 <_printf_float+0x2cc>)
 800e41e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e420:	f7f2 fb30 	bl	8000a84 <__aeabi_dcmpun>
 800e424:	bb70      	cbnz	r0, 800e484 <_printf_float+0xc0>
 800e426:	f04f 32ff 	mov.w	r2, #4294967295
 800e42a:	4640      	mov	r0, r8
 800e42c:	4b98      	ldr	r3, [pc, #608]	; (800e690 <_printf_float+0x2cc>)
 800e42e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e430:	f7f2 fb0a 	bl	8000a48 <__aeabi_dcmple>
 800e434:	bb30      	cbnz	r0, 800e484 <_printf_float+0xc0>
 800e436:	2200      	movs	r2, #0
 800e438:	2300      	movs	r3, #0
 800e43a:	4640      	mov	r0, r8
 800e43c:	4651      	mov	r1, sl
 800e43e:	f7f2 faf9 	bl	8000a34 <__aeabi_dcmplt>
 800e442:	b110      	cbz	r0, 800e44a <_printf_float+0x86>
 800e444:	232d      	movs	r3, #45	; 0x2d
 800e446:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e44a:	4b92      	ldr	r3, [pc, #584]	; (800e694 <_printf_float+0x2d0>)
 800e44c:	4892      	ldr	r0, [pc, #584]	; (800e698 <_printf_float+0x2d4>)
 800e44e:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800e452:	bf94      	ite	ls
 800e454:	4698      	movls	r8, r3
 800e456:	4680      	movhi	r8, r0
 800e458:	2303      	movs	r3, #3
 800e45a:	f04f 0a00 	mov.w	sl, #0
 800e45e:	6123      	str	r3, [r4, #16]
 800e460:	f02b 0304 	bic.w	r3, fp, #4
 800e464:	6023      	str	r3, [r4, #0]
 800e466:	4633      	mov	r3, r6
 800e468:	4621      	mov	r1, r4
 800e46a:	4628      	mov	r0, r5
 800e46c:	9700      	str	r7, [sp, #0]
 800e46e:	aa0f      	add	r2, sp, #60	; 0x3c
 800e470:	f000 f9d4 	bl	800e81c <_printf_common>
 800e474:	3001      	adds	r0, #1
 800e476:	f040 8090 	bne.w	800e59a <_printf_float+0x1d6>
 800e47a:	f04f 30ff 	mov.w	r0, #4294967295
 800e47e:	b011      	add	sp, #68	; 0x44
 800e480:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e484:	4642      	mov	r2, r8
 800e486:	4653      	mov	r3, sl
 800e488:	4640      	mov	r0, r8
 800e48a:	4651      	mov	r1, sl
 800e48c:	f7f2 fafa 	bl	8000a84 <__aeabi_dcmpun>
 800e490:	b148      	cbz	r0, 800e4a6 <_printf_float+0xe2>
 800e492:	f1ba 0f00 	cmp.w	sl, #0
 800e496:	bfb8      	it	lt
 800e498:	232d      	movlt	r3, #45	; 0x2d
 800e49a:	4880      	ldr	r0, [pc, #512]	; (800e69c <_printf_float+0x2d8>)
 800e49c:	bfb8      	it	lt
 800e49e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800e4a2:	4b7f      	ldr	r3, [pc, #508]	; (800e6a0 <_printf_float+0x2dc>)
 800e4a4:	e7d3      	b.n	800e44e <_printf_float+0x8a>
 800e4a6:	6863      	ldr	r3, [r4, #4]
 800e4a8:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800e4ac:	1c5a      	adds	r2, r3, #1
 800e4ae:	d142      	bne.n	800e536 <_printf_float+0x172>
 800e4b0:	2306      	movs	r3, #6
 800e4b2:	6063      	str	r3, [r4, #4]
 800e4b4:	2200      	movs	r2, #0
 800e4b6:	9206      	str	r2, [sp, #24]
 800e4b8:	aa0e      	add	r2, sp, #56	; 0x38
 800e4ba:	e9cd 9204 	strd	r9, r2, [sp, #16]
 800e4be:	aa0d      	add	r2, sp, #52	; 0x34
 800e4c0:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 800e4c4:	9203      	str	r2, [sp, #12]
 800e4c6:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 800e4ca:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800e4ce:	6023      	str	r3, [r4, #0]
 800e4d0:	6863      	ldr	r3, [r4, #4]
 800e4d2:	4642      	mov	r2, r8
 800e4d4:	9300      	str	r3, [sp, #0]
 800e4d6:	4628      	mov	r0, r5
 800e4d8:	4653      	mov	r3, sl
 800e4da:	910b      	str	r1, [sp, #44]	; 0x2c
 800e4dc:	f7ff fed4 	bl	800e288 <__cvt>
 800e4e0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e4e2:	4680      	mov	r8, r0
 800e4e4:	2947      	cmp	r1, #71	; 0x47
 800e4e6:	990d      	ldr	r1, [sp, #52]	; 0x34
 800e4e8:	d108      	bne.n	800e4fc <_printf_float+0x138>
 800e4ea:	1cc8      	adds	r0, r1, #3
 800e4ec:	db02      	blt.n	800e4f4 <_printf_float+0x130>
 800e4ee:	6863      	ldr	r3, [r4, #4]
 800e4f0:	4299      	cmp	r1, r3
 800e4f2:	dd40      	ble.n	800e576 <_printf_float+0x1b2>
 800e4f4:	f1a9 0902 	sub.w	r9, r9, #2
 800e4f8:	fa5f f989 	uxtb.w	r9, r9
 800e4fc:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800e500:	d81f      	bhi.n	800e542 <_printf_float+0x17e>
 800e502:	464a      	mov	r2, r9
 800e504:	3901      	subs	r1, #1
 800e506:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800e50a:	910d      	str	r1, [sp, #52]	; 0x34
 800e50c:	f7ff ff1b 	bl	800e346 <__exponent>
 800e510:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e512:	4682      	mov	sl, r0
 800e514:	1813      	adds	r3, r2, r0
 800e516:	2a01      	cmp	r2, #1
 800e518:	6123      	str	r3, [r4, #16]
 800e51a:	dc02      	bgt.n	800e522 <_printf_float+0x15e>
 800e51c:	6822      	ldr	r2, [r4, #0]
 800e51e:	07d2      	lsls	r2, r2, #31
 800e520:	d501      	bpl.n	800e526 <_printf_float+0x162>
 800e522:	3301      	adds	r3, #1
 800e524:	6123      	str	r3, [r4, #16]
 800e526:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800e52a:	2b00      	cmp	r3, #0
 800e52c:	d09b      	beq.n	800e466 <_printf_float+0xa2>
 800e52e:	232d      	movs	r3, #45	; 0x2d
 800e530:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e534:	e797      	b.n	800e466 <_printf_float+0xa2>
 800e536:	2947      	cmp	r1, #71	; 0x47
 800e538:	d1bc      	bne.n	800e4b4 <_printf_float+0xf0>
 800e53a:	2b00      	cmp	r3, #0
 800e53c:	d1ba      	bne.n	800e4b4 <_printf_float+0xf0>
 800e53e:	2301      	movs	r3, #1
 800e540:	e7b7      	b.n	800e4b2 <_printf_float+0xee>
 800e542:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800e546:	d118      	bne.n	800e57a <_printf_float+0x1b6>
 800e548:	2900      	cmp	r1, #0
 800e54a:	6863      	ldr	r3, [r4, #4]
 800e54c:	dd0b      	ble.n	800e566 <_printf_float+0x1a2>
 800e54e:	6121      	str	r1, [r4, #16]
 800e550:	b913      	cbnz	r3, 800e558 <_printf_float+0x194>
 800e552:	6822      	ldr	r2, [r4, #0]
 800e554:	07d0      	lsls	r0, r2, #31
 800e556:	d502      	bpl.n	800e55e <_printf_float+0x19a>
 800e558:	3301      	adds	r3, #1
 800e55a:	440b      	add	r3, r1
 800e55c:	6123      	str	r3, [r4, #16]
 800e55e:	f04f 0a00 	mov.w	sl, #0
 800e562:	65a1      	str	r1, [r4, #88]	; 0x58
 800e564:	e7df      	b.n	800e526 <_printf_float+0x162>
 800e566:	b913      	cbnz	r3, 800e56e <_printf_float+0x1aa>
 800e568:	6822      	ldr	r2, [r4, #0]
 800e56a:	07d2      	lsls	r2, r2, #31
 800e56c:	d501      	bpl.n	800e572 <_printf_float+0x1ae>
 800e56e:	3302      	adds	r3, #2
 800e570:	e7f4      	b.n	800e55c <_printf_float+0x198>
 800e572:	2301      	movs	r3, #1
 800e574:	e7f2      	b.n	800e55c <_printf_float+0x198>
 800e576:	f04f 0967 	mov.w	r9, #103	; 0x67
 800e57a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e57c:	4299      	cmp	r1, r3
 800e57e:	db05      	blt.n	800e58c <_printf_float+0x1c8>
 800e580:	6823      	ldr	r3, [r4, #0]
 800e582:	6121      	str	r1, [r4, #16]
 800e584:	07d8      	lsls	r0, r3, #31
 800e586:	d5ea      	bpl.n	800e55e <_printf_float+0x19a>
 800e588:	1c4b      	adds	r3, r1, #1
 800e58a:	e7e7      	b.n	800e55c <_printf_float+0x198>
 800e58c:	2900      	cmp	r1, #0
 800e58e:	bfcc      	ite	gt
 800e590:	2201      	movgt	r2, #1
 800e592:	f1c1 0202 	rsble	r2, r1, #2
 800e596:	4413      	add	r3, r2
 800e598:	e7e0      	b.n	800e55c <_printf_float+0x198>
 800e59a:	6823      	ldr	r3, [r4, #0]
 800e59c:	055a      	lsls	r2, r3, #21
 800e59e:	d407      	bmi.n	800e5b0 <_printf_float+0x1ec>
 800e5a0:	6923      	ldr	r3, [r4, #16]
 800e5a2:	4642      	mov	r2, r8
 800e5a4:	4631      	mov	r1, r6
 800e5a6:	4628      	mov	r0, r5
 800e5a8:	47b8      	blx	r7
 800e5aa:	3001      	adds	r0, #1
 800e5ac:	d12b      	bne.n	800e606 <_printf_float+0x242>
 800e5ae:	e764      	b.n	800e47a <_printf_float+0xb6>
 800e5b0:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800e5b4:	f240 80dd 	bls.w	800e772 <_printf_float+0x3ae>
 800e5b8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800e5bc:	2200      	movs	r2, #0
 800e5be:	2300      	movs	r3, #0
 800e5c0:	f7f2 fa2e 	bl	8000a20 <__aeabi_dcmpeq>
 800e5c4:	2800      	cmp	r0, #0
 800e5c6:	d033      	beq.n	800e630 <_printf_float+0x26c>
 800e5c8:	2301      	movs	r3, #1
 800e5ca:	4631      	mov	r1, r6
 800e5cc:	4628      	mov	r0, r5
 800e5ce:	4a35      	ldr	r2, [pc, #212]	; (800e6a4 <_printf_float+0x2e0>)
 800e5d0:	47b8      	blx	r7
 800e5d2:	3001      	adds	r0, #1
 800e5d4:	f43f af51 	beq.w	800e47a <_printf_float+0xb6>
 800e5d8:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800e5dc:	429a      	cmp	r2, r3
 800e5de:	db02      	blt.n	800e5e6 <_printf_float+0x222>
 800e5e0:	6823      	ldr	r3, [r4, #0]
 800e5e2:	07d8      	lsls	r0, r3, #31
 800e5e4:	d50f      	bpl.n	800e606 <_printf_float+0x242>
 800e5e6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800e5ea:	4631      	mov	r1, r6
 800e5ec:	4628      	mov	r0, r5
 800e5ee:	47b8      	blx	r7
 800e5f0:	3001      	adds	r0, #1
 800e5f2:	f43f af42 	beq.w	800e47a <_printf_float+0xb6>
 800e5f6:	f04f 0800 	mov.w	r8, #0
 800e5fa:	f104 091a 	add.w	r9, r4, #26
 800e5fe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e600:	3b01      	subs	r3, #1
 800e602:	4543      	cmp	r3, r8
 800e604:	dc09      	bgt.n	800e61a <_printf_float+0x256>
 800e606:	6823      	ldr	r3, [r4, #0]
 800e608:	079b      	lsls	r3, r3, #30
 800e60a:	f100 8102 	bmi.w	800e812 <_printf_float+0x44e>
 800e60e:	68e0      	ldr	r0, [r4, #12]
 800e610:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e612:	4298      	cmp	r0, r3
 800e614:	bfb8      	it	lt
 800e616:	4618      	movlt	r0, r3
 800e618:	e731      	b.n	800e47e <_printf_float+0xba>
 800e61a:	2301      	movs	r3, #1
 800e61c:	464a      	mov	r2, r9
 800e61e:	4631      	mov	r1, r6
 800e620:	4628      	mov	r0, r5
 800e622:	47b8      	blx	r7
 800e624:	3001      	adds	r0, #1
 800e626:	f43f af28 	beq.w	800e47a <_printf_float+0xb6>
 800e62a:	f108 0801 	add.w	r8, r8, #1
 800e62e:	e7e6      	b.n	800e5fe <_printf_float+0x23a>
 800e630:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e632:	2b00      	cmp	r3, #0
 800e634:	dc38      	bgt.n	800e6a8 <_printf_float+0x2e4>
 800e636:	2301      	movs	r3, #1
 800e638:	4631      	mov	r1, r6
 800e63a:	4628      	mov	r0, r5
 800e63c:	4a19      	ldr	r2, [pc, #100]	; (800e6a4 <_printf_float+0x2e0>)
 800e63e:	47b8      	blx	r7
 800e640:	3001      	adds	r0, #1
 800e642:	f43f af1a 	beq.w	800e47a <_printf_float+0xb6>
 800e646:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800e64a:	4313      	orrs	r3, r2
 800e64c:	d102      	bne.n	800e654 <_printf_float+0x290>
 800e64e:	6823      	ldr	r3, [r4, #0]
 800e650:	07d9      	lsls	r1, r3, #31
 800e652:	d5d8      	bpl.n	800e606 <_printf_float+0x242>
 800e654:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800e658:	4631      	mov	r1, r6
 800e65a:	4628      	mov	r0, r5
 800e65c:	47b8      	blx	r7
 800e65e:	3001      	adds	r0, #1
 800e660:	f43f af0b 	beq.w	800e47a <_printf_float+0xb6>
 800e664:	f04f 0900 	mov.w	r9, #0
 800e668:	f104 0a1a 	add.w	sl, r4, #26
 800e66c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e66e:	425b      	negs	r3, r3
 800e670:	454b      	cmp	r3, r9
 800e672:	dc01      	bgt.n	800e678 <_printf_float+0x2b4>
 800e674:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e676:	e794      	b.n	800e5a2 <_printf_float+0x1de>
 800e678:	2301      	movs	r3, #1
 800e67a:	4652      	mov	r2, sl
 800e67c:	4631      	mov	r1, r6
 800e67e:	4628      	mov	r0, r5
 800e680:	47b8      	blx	r7
 800e682:	3001      	adds	r0, #1
 800e684:	f43f aef9 	beq.w	800e47a <_printf_float+0xb6>
 800e688:	f109 0901 	add.w	r9, r9, #1
 800e68c:	e7ee      	b.n	800e66c <_printf_float+0x2a8>
 800e68e:	bf00      	nop
 800e690:	7fefffff 	.word	0x7fefffff
 800e694:	08011994 	.word	0x08011994
 800e698:	08011998 	.word	0x08011998
 800e69c:	080119a0 	.word	0x080119a0
 800e6a0:	0801199c 	.word	0x0801199c
 800e6a4:	080119a4 	.word	0x080119a4
 800e6a8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e6aa:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800e6ac:	429a      	cmp	r2, r3
 800e6ae:	bfa8      	it	ge
 800e6b0:	461a      	movge	r2, r3
 800e6b2:	2a00      	cmp	r2, #0
 800e6b4:	4691      	mov	r9, r2
 800e6b6:	dc37      	bgt.n	800e728 <_printf_float+0x364>
 800e6b8:	f04f 0b00 	mov.w	fp, #0
 800e6bc:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800e6c0:	f104 021a 	add.w	r2, r4, #26
 800e6c4:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800e6c8:	ebaa 0309 	sub.w	r3, sl, r9
 800e6cc:	455b      	cmp	r3, fp
 800e6ce:	dc33      	bgt.n	800e738 <_printf_float+0x374>
 800e6d0:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800e6d4:	429a      	cmp	r2, r3
 800e6d6:	db3b      	blt.n	800e750 <_printf_float+0x38c>
 800e6d8:	6823      	ldr	r3, [r4, #0]
 800e6da:	07da      	lsls	r2, r3, #31
 800e6dc:	d438      	bmi.n	800e750 <_printf_float+0x38c>
 800e6de:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e6e0:	990d      	ldr	r1, [sp, #52]	; 0x34
 800e6e2:	eba2 030a 	sub.w	r3, r2, sl
 800e6e6:	eba2 0901 	sub.w	r9, r2, r1
 800e6ea:	4599      	cmp	r9, r3
 800e6ec:	bfa8      	it	ge
 800e6ee:	4699      	movge	r9, r3
 800e6f0:	f1b9 0f00 	cmp.w	r9, #0
 800e6f4:	dc34      	bgt.n	800e760 <_printf_float+0x39c>
 800e6f6:	f04f 0800 	mov.w	r8, #0
 800e6fa:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800e6fe:	f104 0a1a 	add.w	sl, r4, #26
 800e702:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800e706:	1a9b      	subs	r3, r3, r2
 800e708:	eba3 0309 	sub.w	r3, r3, r9
 800e70c:	4543      	cmp	r3, r8
 800e70e:	f77f af7a 	ble.w	800e606 <_printf_float+0x242>
 800e712:	2301      	movs	r3, #1
 800e714:	4652      	mov	r2, sl
 800e716:	4631      	mov	r1, r6
 800e718:	4628      	mov	r0, r5
 800e71a:	47b8      	blx	r7
 800e71c:	3001      	adds	r0, #1
 800e71e:	f43f aeac 	beq.w	800e47a <_printf_float+0xb6>
 800e722:	f108 0801 	add.w	r8, r8, #1
 800e726:	e7ec      	b.n	800e702 <_printf_float+0x33e>
 800e728:	4613      	mov	r3, r2
 800e72a:	4631      	mov	r1, r6
 800e72c:	4642      	mov	r2, r8
 800e72e:	4628      	mov	r0, r5
 800e730:	47b8      	blx	r7
 800e732:	3001      	adds	r0, #1
 800e734:	d1c0      	bne.n	800e6b8 <_printf_float+0x2f4>
 800e736:	e6a0      	b.n	800e47a <_printf_float+0xb6>
 800e738:	2301      	movs	r3, #1
 800e73a:	4631      	mov	r1, r6
 800e73c:	4628      	mov	r0, r5
 800e73e:	920b      	str	r2, [sp, #44]	; 0x2c
 800e740:	47b8      	blx	r7
 800e742:	3001      	adds	r0, #1
 800e744:	f43f ae99 	beq.w	800e47a <_printf_float+0xb6>
 800e748:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800e74a:	f10b 0b01 	add.w	fp, fp, #1
 800e74e:	e7b9      	b.n	800e6c4 <_printf_float+0x300>
 800e750:	4631      	mov	r1, r6
 800e752:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800e756:	4628      	mov	r0, r5
 800e758:	47b8      	blx	r7
 800e75a:	3001      	adds	r0, #1
 800e75c:	d1bf      	bne.n	800e6de <_printf_float+0x31a>
 800e75e:	e68c      	b.n	800e47a <_printf_float+0xb6>
 800e760:	464b      	mov	r3, r9
 800e762:	4631      	mov	r1, r6
 800e764:	4628      	mov	r0, r5
 800e766:	eb08 020a 	add.w	r2, r8, sl
 800e76a:	47b8      	blx	r7
 800e76c:	3001      	adds	r0, #1
 800e76e:	d1c2      	bne.n	800e6f6 <_printf_float+0x332>
 800e770:	e683      	b.n	800e47a <_printf_float+0xb6>
 800e772:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e774:	2a01      	cmp	r2, #1
 800e776:	dc01      	bgt.n	800e77c <_printf_float+0x3b8>
 800e778:	07db      	lsls	r3, r3, #31
 800e77a:	d537      	bpl.n	800e7ec <_printf_float+0x428>
 800e77c:	2301      	movs	r3, #1
 800e77e:	4642      	mov	r2, r8
 800e780:	4631      	mov	r1, r6
 800e782:	4628      	mov	r0, r5
 800e784:	47b8      	blx	r7
 800e786:	3001      	adds	r0, #1
 800e788:	f43f ae77 	beq.w	800e47a <_printf_float+0xb6>
 800e78c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800e790:	4631      	mov	r1, r6
 800e792:	4628      	mov	r0, r5
 800e794:	47b8      	blx	r7
 800e796:	3001      	adds	r0, #1
 800e798:	f43f ae6f 	beq.w	800e47a <_printf_float+0xb6>
 800e79c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800e7a0:	2200      	movs	r2, #0
 800e7a2:	2300      	movs	r3, #0
 800e7a4:	f7f2 f93c 	bl	8000a20 <__aeabi_dcmpeq>
 800e7a8:	b9d8      	cbnz	r0, 800e7e2 <_printf_float+0x41e>
 800e7aa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e7ac:	f108 0201 	add.w	r2, r8, #1
 800e7b0:	3b01      	subs	r3, #1
 800e7b2:	4631      	mov	r1, r6
 800e7b4:	4628      	mov	r0, r5
 800e7b6:	47b8      	blx	r7
 800e7b8:	3001      	adds	r0, #1
 800e7ba:	d10e      	bne.n	800e7da <_printf_float+0x416>
 800e7bc:	e65d      	b.n	800e47a <_printf_float+0xb6>
 800e7be:	2301      	movs	r3, #1
 800e7c0:	464a      	mov	r2, r9
 800e7c2:	4631      	mov	r1, r6
 800e7c4:	4628      	mov	r0, r5
 800e7c6:	47b8      	blx	r7
 800e7c8:	3001      	adds	r0, #1
 800e7ca:	f43f ae56 	beq.w	800e47a <_printf_float+0xb6>
 800e7ce:	f108 0801 	add.w	r8, r8, #1
 800e7d2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e7d4:	3b01      	subs	r3, #1
 800e7d6:	4543      	cmp	r3, r8
 800e7d8:	dcf1      	bgt.n	800e7be <_printf_float+0x3fa>
 800e7da:	4653      	mov	r3, sl
 800e7dc:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800e7e0:	e6e0      	b.n	800e5a4 <_printf_float+0x1e0>
 800e7e2:	f04f 0800 	mov.w	r8, #0
 800e7e6:	f104 091a 	add.w	r9, r4, #26
 800e7ea:	e7f2      	b.n	800e7d2 <_printf_float+0x40e>
 800e7ec:	2301      	movs	r3, #1
 800e7ee:	4642      	mov	r2, r8
 800e7f0:	e7df      	b.n	800e7b2 <_printf_float+0x3ee>
 800e7f2:	2301      	movs	r3, #1
 800e7f4:	464a      	mov	r2, r9
 800e7f6:	4631      	mov	r1, r6
 800e7f8:	4628      	mov	r0, r5
 800e7fa:	47b8      	blx	r7
 800e7fc:	3001      	adds	r0, #1
 800e7fe:	f43f ae3c 	beq.w	800e47a <_printf_float+0xb6>
 800e802:	f108 0801 	add.w	r8, r8, #1
 800e806:	68e3      	ldr	r3, [r4, #12]
 800e808:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800e80a:	1a5b      	subs	r3, r3, r1
 800e80c:	4543      	cmp	r3, r8
 800e80e:	dcf0      	bgt.n	800e7f2 <_printf_float+0x42e>
 800e810:	e6fd      	b.n	800e60e <_printf_float+0x24a>
 800e812:	f04f 0800 	mov.w	r8, #0
 800e816:	f104 0919 	add.w	r9, r4, #25
 800e81a:	e7f4      	b.n	800e806 <_printf_float+0x442>

0800e81c <_printf_common>:
 800e81c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e820:	4616      	mov	r6, r2
 800e822:	4699      	mov	r9, r3
 800e824:	688a      	ldr	r2, [r1, #8]
 800e826:	690b      	ldr	r3, [r1, #16]
 800e828:	4607      	mov	r7, r0
 800e82a:	4293      	cmp	r3, r2
 800e82c:	bfb8      	it	lt
 800e82e:	4613      	movlt	r3, r2
 800e830:	6033      	str	r3, [r6, #0]
 800e832:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800e836:	460c      	mov	r4, r1
 800e838:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800e83c:	b10a      	cbz	r2, 800e842 <_printf_common+0x26>
 800e83e:	3301      	adds	r3, #1
 800e840:	6033      	str	r3, [r6, #0]
 800e842:	6823      	ldr	r3, [r4, #0]
 800e844:	0699      	lsls	r1, r3, #26
 800e846:	bf42      	ittt	mi
 800e848:	6833      	ldrmi	r3, [r6, #0]
 800e84a:	3302      	addmi	r3, #2
 800e84c:	6033      	strmi	r3, [r6, #0]
 800e84e:	6825      	ldr	r5, [r4, #0]
 800e850:	f015 0506 	ands.w	r5, r5, #6
 800e854:	d106      	bne.n	800e864 <_printf_common+0x48>
 800e856:	f104 0a19 	add.w	sl, r4, #25
 800e85a:	68e3      	ldr	r3, [r4, #12]
 800e85c:	6832      	ldr	r2, [r6, #0]
 800e85e:	1a9b      	subs	r3, r3, r2
 800e860:	42ab      	cmp	r3, r5
 800e862:	dc28      	bgt.n	800e8b6 <_printf_common+0x9a>
 800e864:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800e868:	1e13      	subs	r3, r2, #0
 800e86a:	6822      	ldr	r2, [r4, #0]
 800e86c:	bf18      	it	ne
 800e86e:	2301      	movne	r3, #1
 800e870:	0692      	lsls	r2, r2, #26
 800e872:	d42d      	bmi.n	800e8d0 <_printf_common+0xb4>
 800e874:	4649      	mov	r1, r9
 800e876:	4638      	mov	r0, r7
 800e878:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800e87c:	47c0      	blx	r8
 800e87e:	3001      	adds	r0, #1
 800e880:	d020      	beq.n	800e8c4 <_printf_common+0xa8>
 800e882:	6823      	ldr	r3, [r4, #0]
 800e884:	68e5      	ldr	r5, [r4, #12]
 800e886:	f003 0306 	and.w	r3, r3, #6
 800e88a:	2b04      	cmp	r3, #4
 800e88c:	bf18      	it	ne
 800e88e:	2500      	movne	r5, #0
 800e890:	6832      	ldr	r2, [r6, #0]
 800e892:	f04f 0600 	mov.w	r6, #0
 800e896:	68a3      	ldr	r3, [r4, #8]
 800e898:	bf08      	it	eq
 800e89a:	1aad      	subeq	r5, r5, r2
 800e89c:	6922      	ldr	r2, [r4, #16]
 800e89e:	bf08      	it	eq
 800e8a0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e8a4:	4293      	cmp	r3, r2
 800e8a6:	bfc4      	itt	gt
 800e8a8:	1a9b      	subgt	r3, r3, r2
 800e8aa:	18ed      	addgt	r5, r5, r3
 800e8ac:	341a      	adds	r4, #26
 800e8ae:	42b5      	cmp	r5, r6
 800e8b0:	d11a      	bne.n	800e8e8 <_printf_common+0xcc>
 800e8b2:	2000      	movs	r0, #0
 800e8b4:	e008      	b.n	800e8c8 <_printf_common+0xac>
 800e8b6:	2301      	movs	r3, #1
 800e8b8:	4652      	mov	r2, sl
 800e8ba:	4649      	mov	r1, r9
 800e8bc:	4638      	mov	r0, r7
 800e8be:	47c0      	blx	r8
 800e8c0:	3001      	adds	r0, #1
 800e8c2:	d103      	bne.n	800e8cc <_printf_common+0xb0>
 800e8c4:	f04f 30ff 	mov.w	r0, #4294967295
 800e8c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e8cc:	3501      	adds	r5, #1
 800e8ce:	e7c4      	b.n	800e85a <_printf_common+0x3e>
 800e8d0:	2030      	movs	r0, #48	; 0x30
 800e8d2:	18e1      	adds	r1, r4, r3
 800e8d4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800e8d8:	1c5a      	adds	r2, r3, #1
 800e8da:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800e8de:	4422      	add	r2, r4
 800e8e0:	3302      	adds	r3, #2
 800e8e2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800e8e6:	e7c5      	b.n	800e874 <_printf_common+0x58>
 800e8e8:	2301      	movs	r3, #1
 800e8ea:	4622      	mov	r2, r4
 800e8ec:	4649      	mov	r1, r9
 800e8ee:	4638      	mov	r0, r7
 800e8f0:	47c0      	blx	r8
 800e8f2:	3001      	adds	r0, #1
 800e8f4:	d0e6      	beq.n	800e8c4 <_printf_common+0xa8>
 800e8f6:	3601      	adds	r6, #1
 800e8f8:	e7d9      	b.n	800e8ae <_printf_common+0x92>
	...

0800e8fc <_printf_i>:
 800e8fc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e900:	460c      	mov	r4, r1
 800e902:	7e27      	ldrb	r7, [r4, #24]
 800e904:	4691      	mov	r9, r2
 800e906:	2f78      	cmp	r7, #120	; 0x78
 800e908:	4680      	mov	r8, r0
 800e90a:	469a      	mov	sl, r3
 800e90c:	990c      	ldr	r1, [sp, #48]	; 0x30
 800e90e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800e912:	d807      	bhi.n	800e924 <_printf_i+0x28>
 800e914:	2f62      	cmp	r7, #98	; 0x62
 800e916:	d80a      	bhi.n	800e92e <_printf_i+0x32>
 800e918:	2f00      	cmp	r7, #0
 800e91a:	f000 80d9 	beq.w	800ead0 <_printf_i+0x1d4>
 800e91e:	2f58      	cmp	r7, #88	; 0x58
 800e920:	f000 80a4 	beq.w	800ea6c <_printf_i+0x170>
 800e924:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800e928:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800e92c:	e03a      	b.n	800e9a4 <_printf_i+0xa8>
 800e92e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800e932:	2b15      	cmp	r3, #21
 800e934:	d8f6      	bhi.n	800e924 <_printf_i+0x28>
 800e936:	a001      	add	r0, pc, #4	; (adr r0, 800e93c <_printf_i+0x40>)
 800e938:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800e93c:	0800e995 	.word	0x0800e995
 800e940:	0800e9a9 	.word	0x0800e9a9
 800e944:	0800e925 	.word	0x0800e925
 800e948:	0800e925 	.word	0x0800e925
 800e94c:	0800e925 	.word	0x0800e925
 800e950:	0800e925 	.word	0x0800e925
 800e954:	0800e9a9 	.word	0x0800e9a9
 800e958:	0800e925 	.word	0x0800e925
 800e95c:	0800e925 	.word	0x0800e925
 800e960:	0800e925 	.word	0x0800e925
 800e964:	0800e925 	.word	0x0800e925
 800e968:	0800eab7 	.word	0x0800eab7
 800e96c:	0800e9d9 	.word	0x0800e9d9
 800e970:	0800ea99 	.word	0x0800ea99
 800e974:	0800e925 	.word	0x0800e925
 800e978:	0800e925 	.word	0x0800e925
 800e97c:	0800ead9 	.word	0x0800ead9
 800e980:	0800e925 	.word	0x0800e925
 800e984:	0800e9d9 	.word	0x0800e9d9
 800e988:	0800e925 	.word	0x0800e925
 800e98c:	0800e925 	.word	0x0800e925
 800e990:	0800eaa1 	.word	0x0800eaa1
 800e994:	680b      	ldr	r3, [r1, #0]
 800e996:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800e99a:	1d1a      	adds	r2, r3, #4
 800e99c:	681b      	ldr	r3, [r3, #0]
 800e99e:	600a      	str	r2, [r1, #0]
 800e9a0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800e9a4:	2301      	movs	r3, #1
 800e9a6:	e0a4      	b.n	800eaf2 <_printf_i+0x1f6>
 800e9a8:	6825      	ldr	r5, [r4, #0]
 800e9aa:	6808      	ldr	r0, [r1, #0]
 800e9ac:	062e      	lsls	r6, r5, #24
 800e9ae:	f100 0304 	add.w	r3, r0, #4
 800e9b2:	d50a      	bpl.n	800e9ca <_printf_i+0xce>
 800e9b4:	6805      	ldr	r5, [r0, #0]
 800e9b6:	600b      	str	r3, [r1, #0]
 800e9b8:	2d00      	cmp	r5, #0
 800e9ba:	da03      	bge.n	800e9c4 <_printf_i+0xc8>
 800e9bc:	232d      	movs	r3, #45	; 0x2d
 800e9be:	426d      	negs	r5, r5
 800e9c0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e9c4:	230a      	movs	r3, #10
 800e9c6:	485e      	ldr	r0, [pc, #376]	; (800eb40 <_printf_i+0x244>)
 800e9c8:	e019      	b.n	800e9fe <_printf_i+0x102>
 800e9ca:	f015 0f40 	tst.w	r5, #64	; 0x40
 800e9ce:	6805      	ldr	r5, [r0, #0]
 800e9d0:	600b      	str	r3, [r1, #0]
 800e9d2:	bf18      	it	ne
 800e9d4:	b22d      	sxthne	r5, r5
 800e9d6:	e7ef      	b.n	800e9b8 <_printf_i+0xbc>
 800e9d8:	680b      	ldr	r3, [r1, #0]
 800e9da:	6825      	ldr	r5, [r4, #0]
 800e9dc:	1d18      	adds	r0, r3, #4
 800e9de:	6008      	str	r0, [r1, #0]
 800e9e0:	0628      	lsls	r0, r5, #24
 800e9e2:	d501      	bpl.n	800e9e8 <_printf_i+0xec>
 800e9e4:	681d      	ldr	r5, [r3, #0]
 800e9e6:	e002      	b.n	800e9ee <_printf_i+0xf2>
 800e9e8:	0669      	lsls	r1, r5, #25
 800e9ea:	d5fb      	bpl.n	800e9e4 <_printf_i+0xe8>
 800e9ec:	881d      	ldrh	r5, [r3, #0]
 800e9ee:	2f6f      	cmp	r7, #111	; 0x6f
 800e9f0:	bf0c      	ite	eq
 800e9f2:	2308      	moveq	r3, #8
 800e9f4:	230a      	movne	r3, #10
 800e9f6:	4852      	ldr	r0, [pc, #328]	; (800eb40 <_printf_i+0x244>)
 800e9f8:	2100      	movs	r1, #0
 800e9fa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800e9fe:	6866      	ldr	r6, [r4, #4]
 800ea00:	2e00      	cmp	r6, #0
 800ea02:	bfa8      	it	ge
 800ea04:	6821      	ldrge	r1, [r4, #0]
 800ea06:	60a6      	str	r6, [r4, #8]
 800ea08:	bfa4      	itt	ge
 800ea0a:	f021 0104 	bicge.w	r1, r1, #4
 800ea0e:	6021      	strge	r1, [r4, #0]
 800ea10:	b90d      	cbnz	r5, 800ea16 <_printf_i+0x11a>
 800ea12:	2e00      	cmp	r6, #0
 800ea14:	d04d      	beq.n	800eab2 <_printf_i+0x1b6>
 800ea16:	4616      	mov	r6, r2
 800ea18:	fbb5 f1f3 	udiv	r1, r5, r3
 800ea1c:	fb03 5711 	mls	r7, r3, r1, r5
 800ea20:	5dc7      	ldrb	r7, [r0, r7]
 800ea22:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800ea26:	462f      	mov	r7, r5
 800ea28:	42bb      	cmp	r3, r7
 800ea2a:	460d      	mov	r5, r1
 800ea2c:	d9f4      	bls.n	800ea18 <_printf_i+0x11c>
 800ea2e:	2b08      	cmp	r3, #8
 800ea30:	d10b      	bne.n	800ea4a <_printf_i+0x14e>
 800ea32:	6823      	ldr	r3, [r4, #0]
 800ea34:	07df      	lsls	r7, r3, #31
 800ea36:	d508      	bpl.n	800ea4a <_printf_i+0x14e>
 800ea38:	6923      	ldr	r3, [r4, #16]
 800ea3a:	6861      	ldr	r1, [r4, #4]
 800ea3c:	4299      	cmp	r1, r3
 800ea3e:	bfde      	ittt	le
 800ea40:	2330      	movle	r3, #48	; 0x30
 800ea42:	f806 3c01 	strble.w	r3, [r6, #-1]
 800ea46:	f106 36ff 	addle.w	r6, r6, #4294967295
 800ea4a:	1b92      	subs	r2, r2, r6
 800ea4c:	6122      	str	r2, [r4, #16]
 800ea4e:	464b      	mov	r3, r9
 800ea50:	4621      	mov	r1, r4
 800ea52:	4640      	mov	r0, r8
 800ea54:	f8cd a000 	str.w	sl, [sp]
 800ea58:	aa03      	add	r2, sp, #12
 800ea5a:	f7ff fedf 	bl	800e81c <_printf_common>
 800ea5e:	3001      	adds	r0, #1
 800ea60:	d14c      	bne.n	800eafc <_printf_i+0x200>
 800ea62:	f04f 30ff 	mov.w	r0, #4294967295
 800ea66:	b004      	add	sp, #16
 800ea68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ea6c:	4834      	ldr	r0, [pc, #208]	; (800eb40 <_printf_i+0x244>)
 800ea6e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800ea72:	680e      	ldr	r6, [r1, #0]
 800ea74:	6823      	ldr	r3, [r4, #0]
 800ea76:	f856 5b04 	ldr.w	r5, [r6], #4
 800ea7a:	061f      	lsls	r7, r3, #24
 800ea7c:	600e      	str	r6, [r1, #0]
 800ea7e:	d514      	bpl.n	800eaaa <_printf_i+0x1ae>
 800ea80:	07d9      	lsls	r1, r3, #31
 800ea82:	bf44      	itt	mi
 800ea84:	f043 0320 	orrmi.w	r3, r3, #32
 800ea88:	6023      	strmi	r3, [r4, #0]
 800ea8a:	b91d      	cbnz	r5, 800ea94 <_printf_i+0x198>
 800ea8c:	6823      	ldr	r3, [r4, #0]
 800ea8e:	f023 0320 	bic.w	r3, r3, #32
 800ea92:	6023      	str	r3, [r4, #0]
 800ea94:	2310      	movs	r3, #16
 800ea96:	e7af      	b.n	800e9f8 <_printf_i+0xfc>
 800ea98:	6823      	ldr	r3, [r4, #0]
 800ea9a:	f043 0320 	orr.w	r3, r3, #32
 800ea9e:	6023      	str	r3, [r4, #0]
 800eaa0:	2378      	movs	r3, #120	; 0x78
 800eaa2:	4828      	ldr	r0, [pc, #160]	; (800eb44 <_printf_i+0x248>)
 800eaa4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800eaa8:	e7e3      	b.n	800ea72 <_printf_i+0x176>
 800eaaa:	065e      	lsls	r6, r3, #25
 800eaac:	bf48      	it	mi
 800eaae:	b2ad      	uxthmi	r5, r5
 800eab0:	e7e6      	b.n	800ea80 <_printf_i+0x184>
 800eab2:	4616      	mov	r6, r2
 800eab4:	e7bb      	b.n	800ea2e <_printf_i+0x132>
 800eab6:	680b      	ldr	r3, [r1, #0]
 800eab8:	6826      	ldr	r6, [r4, #0]
 800eaba:	1d1d      	adds	r5, r3, #4
 800eabc:	6960      	ldr	r0, [r4, #20]
 800eabe:	600d      	str	r5, [r1, #0]
 800eac0:	0635      	lsls	r5, r6, #24
 800eac2:	681b      	ldr	r3, [r3, #0]
 800eac4:	d501      	bpl.n	800eaca <_printf_i+0x1ce>
 800eac6:	6018      	str	r0, [r3, #0]
 800eac8:	e002      	b.n	800ead0 <_printf_i+0x1d4>
 800eaca:	0671      	lsls	r1, r6, #25
 800eacc:	d5fb      	bpl.n	800eac6 <_printf_i+0x1ca>
 800eace:	8018      	strh	r0, [r3, #0]
 800ead0:	2300      	movs	r3, #0
 800ead2:	4616      	mov	r6, r2
 800ead4:	6123      	str	r3, [r4, #16]
 800ead6:	e7ba      	b.n	800ea4e <_printf_i+0x152>
 800ead8:	680b      	ldr	r3, [r1, #0]
 800eada:	1d1a      	adds	r2, r3, #4
 800eadc:	600a      	str	r2, [r1, #0]
 800eade:	681e      	ldr	r6, [r3, #0]
 800eae0:	2100      	movs	r1, #0
 800eae2:	4630      	mov	r0, r6
 800eae4:	6862      	ldr	r2, [r4, #4]
 800eae6:	f000 fee9 	bl	800f8bc <memchr>
 800eaea:	b108      	cbz	r0, 800eaf0 <_printf_i+0x1f4>
 800eaec:	1b80      	subs	r0, r0, r6
 800eaee:	6060      	str	r0, [r4, #4]
 800eaf0:	6863      	ldr	r3, [r4, #4]
 800eaf2:	6123      	str	r3, [r4, #16]
 800eaf4:	2300      	movs	r3, #0
 800eaf6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800eafa:	e7a8      	b.n	800ea4e <_printf_i+0x152>
 800eafc:	4632      	mov	r2, r6
 800eafe:	4649      	mov	r1, r9
 800eb00:	4640      	mov	r0, r8
 800eb02:	6923      	ldr	r3, [r4, #16]
 800eb04:	47d0      	blx	sl
 800eb06:	3001      	adds	r0, #1
 800eb08:	d0ab      	beq.n	800ea62 <_printf_i+0x166>
 800eb0a:	6823      	ldr	r3, [r4, #0]
 800eb0c:	079b      	lsls	r3, r3, #30
 800eb0e:	d413      	bmi.n	800eb38 <_printf_i+0x23c>
 800eb10:	68e0      	ldr	r0, [r4, #12]
 800eb12:	9b03      	ldr	r3, [sp, #12]
 800eb14:	4298      	cmp	r0, r3
 800eb16:	bfb8      	it	lt
 800eb18:	4618      	movlt	r0, r3
 800eb1a:	e7a4      	b.n	800ea66 <_printf_i+0x16a>
 800eb1c:	2301      	movs	r3, #1
 800eb1e:	4632      	mov	r2, r6
 800eb20:	4649      	mov	r1, r9
 800eb22:	4640      	mov	r0, r8
 800eb24:	47d0      	blx	sl
 800eb26:	3001      	adds	r0, #1
 800eb28:	d09b      	beq.n	800ea62 <_printf_i+0x166>
 800eb2a:	3501      	adds	r5, #1
 800eb2c:	68e3      	ldr	r3, [r4, #12]
 800eb2e:	9903      	ldr	r1, [sp, #12]
 800eb30:	1a5b      	subs	r3, r3, r1
 800eb32:	42ab      	cmp	r3, r5
 800eb34:	dcf2      	bgt.n	800eb1c <_printf_i+0x220>
 800eb36:	e7eb      	b.n	800eb10 <_printf_i+0x214>
 800eb38:	2500      	movs	r5, #0
 800eb3a:	f104 0619 	add.w	r6, r4, #25
 800eb3e:	e7f5      	b.n	800eb2c <_printf_i+0x230>
 800eb40:	080119a6 	.word	0x080119a6
 800eb44:	080119b7 	.word	0x080119b7

0800eb48 <realloc>:
 800eb48:	4b02      	ldr	r3, [pc, #8]	; (800eb54 <realloc+0xc>)
 800eb4a:	460a      	mov	r2, r1
 800eb4c:	4601      	mov	r1, r0
 800eb4e:	6818      	ldr	r0, [r3, #0]
 800eb50:	f001 ba6c 	b.w	801002c <_realloc_r>
 800eb54:	20000188 	.word	0x20000188

0800eb58 <_sbrk_r>:
 800eb58:	b538      	push	{r3, r4, r5, lr}
 800eb5a:	2300      	movs	r3, #0
 800eb5c:	4d05      	ldr	r5, [pc, #20]	; (800eb74 <_sbrk_r+0x1c>)
 800eb5e:	4604      	mov	r4, r0
 800eb60:	4608      	mov	r0, r1
 800eb62:	602b      	str	r3, [r5, #0]
 800eb64:	f7f5 fc7e 	bl	8004464 <_sbrk>
 800eb68:	1c43      	adds	r3, r0, #1
 800eb6a:	d102      	bne.n	800eb72 <_sbrk_r+0x1a>
 800eb6c:	682b      	ldr	r3, [r5, #0]
 800eb6e:	b103      	cbz	r3, 800eb72 <_sbrk_r+0x1a>
 800eb70:	6023      	str	r3, [r4, #0]
 800eb72:	bd38      	pop	{r3, r4, r5, pc}
 800eb74:	20002108 	.word	0x20002108

0800eb78 <siprintf>:
 800eb78:	b40e      	push	{r1, r2, r3}
 800eb7a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800eb7e:	b500      	push	{lr}
 800eb80:	b09c      	sub	sp, #112	; 0x70
 800eb82:	ab1d      	add	r3, sp, #116	; 0x74
 800eb84:	9002      	str	r0, [sp, #8]
 800eb86:	9006      	str	r0, [sp, #24]
 800eb88:	9107      	str	r1, [sp, #28]
 800eb8a:	9104      	str	r1, [sp, #16]
 800eb8c:	4808      	ldr	r0, [pc, #32]	; (800ebb0 <siprintf+0x38>)
 800eb8e:	4909      	ldr	r1, [pc, #36]	; (800ebb4 <siprintf+0x3c>)
 800eb90:	f853 2b04 	ldr.w	r2, [r3], #4
 800eb94:	9105      	str	r1, [sp, #20]
 800eb96:	6800      	ldr	r0, [r0, #0]
 800eb98:	a902      	add	r1, sp, #8
 800eb9a:	9301      	str	r3, [sp, #4]
 800eb9c:	f001 fac8 	bl	8010130 <_svfiprintf_r>
 800eba0:	2200      	movs	r2, #0
 800eba2:	9b02      	ldr	r3, [sp, #8]
 800eba4:	701a      	strb	r2, [r3, #0]
 800eba6:	b01c      	add	sp, #112	; 0x70
 800eba8:	f85d eb04 	ldr.w	lr, [sp], #4
 800ebac:	b003      	add	sp, #12
 800ebae:	4770      	bx	lr
 800ebb0:	20000188 	.word	0x20000188
 800ebb4:	ffff0208 	.word	0xffff0208

0800ebb8 <quorem>:
 800ebb8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ebbc:	6903      	ldr	r3, [r0, #16]
 800ebbe:	690c      	ldr	r4, [r1, #16]
 800ebc0:	4607      	mov	r7, r0
 800ebc2:	42a3      	cmp	r3, r4
 800ebc4:	f2c0 8083 	blt.w	800ecce <quorem+0x116>
 800ebc8:	3c01      	subs	r4, #1
 800ebca:	f100 0514 	add.w	r5, r0, #20
 800ebce:	f101 0814 	add.w	r8, r1, #20
 800ebd2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ebd6:	9301      	str	r3, [sp, #4]
 800ebd8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800ebdc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ebe0:	3301      	adds	r3, #1
 800ebe2:	429a      	cmp	r2, r3
 800ebe4:	fbb2 f6f3 	udiv	r6, r2, r3
 800ebe8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800ebec:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800ebf0:	d332      	bcc.n	800ec58 <quorem+0xa0>
 800ebf2:	f04f 0e00 	mov.w	lr, #0
 800ebf6:	4640      	mov	r0, r8
 800ebf8:	46ac      	mov	ip, r5
 800ebfa:	46f2      	mov	sl, lr
 800ebfc:	f850 2b04 	ldr.w	r2, [r0], #4
 800ec00:	b293      	uxth	r3, r2
 800ec02:	fb06 e303 	mla	r3, r6, r3, lr
 800ec06:	0c12      	lsrs	r2, r2, #16
 800ec08:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800ec0c:	fb06 e202 	mla	r2, r6, r2, lr
 800ec10:	b29b      	uxth	r3, r3
 800ec12:	ebaa 0303 	sub.w	r3, sl, r3
 800ec16:	f8dc a000 	ldr.w	sl, [ip]
 800ec1a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800ec1e:	fa1f fa8a 	uxth.w	sl, sl
 800ec22:	4453      	add	r3, sl
 800ec24:	fa1f fa82 	uxth.w	sl, r2
 800ec28:	f8dc 2000 	ldr.w	r2, [ip]
 800ec2c:	4581      	cmp	r9, r0
 800ec2e:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800ec32:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800ec36:	b29b      	uxth	r3, r3
 800ec38:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ec3c:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800ec40:	f84c 3b04 	str.w	r3, [ip], #4
 800ec44:	d2da      	bcs.n	800ebfc <quorem+0x44>
 800ec46:	f855 300b 	ldr.w	r3, [r5, fp]
 800ec4a:	b92b      	cbnz	r3, 800ec58 <quorem+0xa0>
 800ec4c:	9b01      	ldr	r3, [sp, #4]
 800ec4e:	3b04      	subs	r3, #4
 800ec50:	429d      	cmp	r5, r3
 800ec52:	461a      	mov	r2, r3
 800ec54:	d32f      	bcc.n	800ecb6 <quorem+0xfe>
 800ec56:	613c      	str	r4, [r7, #16]
 800ec58:	4638      	mov	r0, r7
 800ec5a:	f001 f8d1 	bl	800fe00 <__mcmp>
 800ec5e:	2800      	cmp	r0, #0
 800ec60:	db25      	blt.n	800ecae <quorem+0xf6>
 800ec62:	4628      	mov	r0, r5
 800ec64:	f04f 0c00 	mov.w	ip, #0
 800ec68:	3601      	adds	r6, #1
 800ec6a:	f858 1b04 	ldr.w	r1, [r8], #4
 800ec6e:	f8d0 e000 	ldr.w	lr, [r0]
 800ec72:	b28b      	uxth	r3, r1
 800ec74:	ebac 0303 	sub.w	r3, ip, r3
 800ec78:	fa1f f28e 	uxth.w	r2, lr
 800ec7c:	4413      	add	r3, r2
 800ec7e:	0c0a      	lsrs	r2, r1, #16
 800ec80:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800ec84:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800ec88:	b29b      	uxth	r3, r3
 800ec8a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ec8e:	45c1      	cmp	r9, r8
 800ec90:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800ec94:	f840 3b04 	str.w	r3, [r0], #4
 800ec98:	d2e7      	bcs.n	800ec6a <quorem+0xb2>
 800ec9a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ec9e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800eca2:	b922      	cbnz	r2, 800ecae <quorem+0xf6>
 800eca4:	3b04      	subs	r3, #4
 800eca6:	429d      	cmp	r5, r3
 800eca8:	461a      	mov	r2, r3
 800ecaa:	d30a      	bcc.n	800ecc2 <quorem+0x10a>
 800ecac:	613c      	str	r4, [r7, #16]
 800ecae:	4630      	mov	r0, r6
 800ecb0:	b003      	add	sp, #12
 800ecb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ecb6:	6812      	ldr	r2, [r2, #0]
 800ecb8:	3b04      	subs	r3, #4
 800ecba:	2a00      	cmp	r2, #0
 800ecbc:	d1cb      	bne.n	800ec56 <quorem+0x9e>
 800ecbe:	3c01      	subs	r4, #1
 800ecc0:	e7c6      	b.n	800ec50 <quorem+0x98>
 800ecc2:	6812      	ldr	r2, [r2, #0]
 800ecc4:	3b04      	subs	r3, #4
 800ecc6:	2a00      	cmp	r2, #0
 800ecc8:	d1f0      	bne.n	800ecac <quorem+0xf4>
 800ecca:	3c01      	subs	r4, #1
 800eccc:	e7eb      	b.n	800eca6 <quorem+0xee>
 800ecce:	2000      	movs	r0, #0
 800ecd0:	e7ee      	b.n	800ecb0 <quorem+0xf8>
 800ecd2:	0000      	movs	r0, r0
 800ecd4:	0000      	movs	r0, r0
	...

0800ecd8 <_dtoa_r>:
 800ecd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ecdc:	4616      	mov	r6, r2
 800ecde:	461f      	mov	r7, r3
 800ece0:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800ece2:	b099      	sub	sp, #100	; 0x64
 800ece4:	4605      	mov	r5, r0
 800ece6:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800ecea:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 800ecee:	b974      	cbnz	r4, 800ed0e <_dtoa_r+0x36>
 800ecf0:	2010      	movs	r0, #16
 800ecf2:	f7ff f9fd 	bl	800e0f0 <malloc>
 800ecf6:	4602      	mov	r2, r0
 800ecf8:	6268      	str	r0, [r5, #36]	; 0x24
 800ecfa:	b920      	cbnz	r0, 800ed06 <_dtoa_r+0x2e>
 800ecfc:	21ea      	movs	r1, #234	; 0xea
 800ecfe:	4bae      	ldr	r3, [pc, #696]	; (800efb8 <_dtoa_r+0x2e0>)
 800ed00:	48ae      	ldr	r0, [pc, #696]	; (800efbc <_dtoa_r+0x2e4>)
 800ed02:	f001 fb15 	bl	8010330 <__assert_func>
 800ed06:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ed0a:	6004      	str	r4, [r0, #0]
 800ed0c:	60c4      	str	r4, [r0, #12]
 800ed0e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800ed10:	6819      	ldr	r1, [r3, #0]
 800ed12:	b151      	cbz	r1, 800ed2a <_dtoa_r+0x52>
 800ed14:	685a      	ldr	r2, [r3, #4]
 800ed16:	2301      	movs	r3, #1
 800ed18:	4093      	lsls	r3, r2
 800ed1a:	604a      	str	r2, [r1, #4]
 800ed1c:	608b      	str	r3, [r1, #8]
 800ed1e:	4628      	mov	r0, r5
 800ed20:	f000 fe34 	bl	800f98c <_Bfree>
 800ed24:	2200      	movs	r2, #0
 800ed26:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800ed28:	601a      	str	r2, [r3, #0]
 800ed2a:	1e3b      	subs	r3, r7, #0
 800ed2c:	bfaf      	iteee	ge
 800ed2e:	2300      	movge	r3, #0
 800ed30:	2201      	movlt	r2, #1
 800ed32:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800ed36:	9305      	strlt	r3, [sp, #20]
 800ed38:	bfa8      	it	ge
 800ed3a:	f8c8 3000 	strge.w	r3, [r8]
 800ed3e:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800ed42:	4b9f      	ldr	r3, [pc, #636]	; (800efc0 <_dtoa_r+0x2e8>)
 800ed44:	bfb8      	it	lt
 800ed46:	f8c8 2000 	strlt.w	r2, [r8]
 800ed4a:	ea33 0309 	bics.w	r3, r3, r9
 800ed4e:	d119      	bne.n	800ed84 <_dtoa_r+0xac>
 800ed50:	f242 730f 	movw	r3, #9999	; 0x270f
 800ed54:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800ed56:	6013      	str	r3, [r2, #0]
 800ed58:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ed5c:	4333      	orrs	r3, r6
 800ed5e:	f000 8580 	beq.w	800f862 <_dtoa_r+0xb8a>
 800ed62:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800ed64:	b953      	cbnz	r3, 800ed7c <_dtoa_r+0xa4>
 800ed66:	4b97      	ldr	r3, [pc, #604]	; (800efc4 <_dtoa_r+0x2ec>)
 800ed68:	e022      	b.n	800edb0 <_dtoa_r+0xd8>
 800ed6a:	4b97      	ldr	r3, [pc, #604]	; (800efc8 <_dtoa_r+0x2f0>)
 800ed6c:	9308      	str	r3, [sp, #32]
 800ed6e:	3308      	adds	r3, #8
 800ed70:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800ed72:	6013      	str	r3, [r2, #0]
 800ed74:	9808      	ldr	r0, [sp, #32]
 800ed76:	b019      	add	sp, #100	; 0x64
 800ed78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ed7c:	4b91      	ldr	r3, [pc, #580]	; (800efc4 <_dtoa_r+0x2ec>)
 800ed7e:	9308      	str	r3, [sp, #32]
 800ed80:	3303      	adds	r3, #3
 800ed82:	e7f5      	b.n	800ed70 <_dtoa_r+0x98>
 800ed84:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800ed88:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 800ed8c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800ed90:	2200      	movs	r2, #0
 800ed92:	2300      	movs	r3, #0
 800ed94:	f7f1 fe44 	bl	8000a20 <__aeabi_dcmpeq>
 800ed98:	4680      	mov	r8, r0
 800ed9a:	b158      	cbz	r0, 800edb4 <_dtoa_r+0xdc>
 800ed9c:	2301      	movs	r3, #1
 800ed9e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800eda0:	6013      	str	r3, [r2, #0]
 800eda2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800eda4:	2b00      	cmp	r3, #0
 800eda6:	f000 8559 	beq.w	800f85c <_dtoa_r+0xb84>
 800edaa:	4888      	ldr	r0, [pc, #544]	; (800efcc <_dtoa_r+0x2f4>)
 800edac:	6018      	str	r0, [r3, #0]
 800edae:	1e43      	subs	r3, r0, #1
 800edb0:	9308      	str	r3, [sp, #32]
 800edb2:	e7df      	b.n	800ed74 <_dtoa_r+0x9c>
 800edb4:	ab16      	add	r3, sp, #88	; 0x58
 800edb6:	9301      	str	r3, [sp, #4]
 800edb8:	ab17      	add	r3, sp, #92	; 0x5c
 800edba:	9300      	str	r3, [sp, #0]
 800edbc:	4628      	mov	r0, r5
 800edbe:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800edc2:	f001 f8c9 	bl	800ff58 <__d2b>
 800edc6:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800edca:	4682      	mov	sl, r0
 800edcc:	2c00      	cmp	r4, #0
 800edce:	d07e      	beq.n	800eece <_dtoa_r+0x1f6>
 800edd0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800edd4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800edd6:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800edda:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800edde:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 800ede2:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800ede6:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 800edea:	2200      	movs	r2, #0
 800edec:	4b78      	ldr	r3, [pc, #480]	; (800efd0 <_dtoa_r+0x2f8>)
 800edee:	f7f1 f9f7 	bl	80001e0 <__aeabi_dsub>
 800edf2:	a36b      	add	r3, pc, #428	; (adr r3, 800efa0 <_dtoa_r+0x2c8>)
 800edf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800edf8:	f7f1 fbaa 	bl	8000550 <__aeabi_dmul>
 800edfc:	a36a      	add	r3, pc, #424	; (adr r3, 800efa8 <_dtoa_r+0x2d0>)
 800edfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee02:	f7f1 f9ef 	bl	80001e4 <__adddf3>
 800ee06:	4606      	mov	r6, r0
 800ee08:	4620      	mov	r0, r4
 800ee0a:	460f      	mov	r7, r1
 800ee0c:	f7f1 fb36 	bl	800047c <__aeabi_i2d>
 800ee10:	a367      	add	r3, pc, #412	; (adr r3, 800efb0 <_dtoa_r+0x2d8>)
 800ee12:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee16:	f7f1 fb9b 	bl	8000550 <__aeabi_dmul>
 800ee1a:	4602      	mov	r2, r0
 800ee1c:	460b      	mov	r3, r1
 800ee1e:	4630      	mov	r0, r6
 800ee20:	4639      	mov	r1, r7
 800ee22:	f7f1 f9df 	bl	80001e4 <__adddf3>
 800ee26:	4606      	mov	r6, r0
 800ee28:	460f      	mov	r7, r1
 800ee2a:	f7f1 fe41 	bl	8000ab0 <__aeabi_d2iz>
 800ee2e:	2200      	movs	r2, #0
 800ee30:	4681      	mov	r9, r0
 800ee32:	2300      	movs	r3, #0
 800ee34:	4630      	mov	r0, r6
 800ee36:	4639      	mov	r1, r7
 800ee38:	f7f1 fdfc 	bl	8000a34 <__aeabi_dcmplt>
 800ee3c:	b148      	cbz	r0, 800ee52 <_dtoa_r+0x17a>
 800ee3e:	4648      	mov	r0, r9
 800ee40:	f7f1 fb1c 	bl	800047c <__aeabi_i2d>
 800ee44:	4632      	mov	r2, r6
 800ee46:	463b      	mov	r3, r7
 800ee48:	f7f1 fdea 	bl	8000a20 <__aeabi_dcmpeq>
 800ee4c:	b908      	cbnz	r0, 800ee52 <_dtoa_r+0x17a>
 800ee4e:	f109 39ff 	add.w	r9, r9, #4294967295
 800ee52:	f1b9 0f16 	cmp.w	r9, #22
 800ee56:	d857      	bhi.n	800ef08 <_dtoa_r+0x230>
 800ee58:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800ee5c:	4b5d      	ldr	r3, [pc, #372]	; (800efd4 <_dtoa_r+0x2fc>)
 800ee5e:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 800ee62:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee66:	f7f1 fde5 	bl	8000a34 <__aeabi_dcmplt>
 800ee6a:	2800      	cmp	r0, #0
 800ee6c:	d04e      	beq.n	800ef0c <_dtoa_r+0x234>
 800ee6e:	2300      	movs	r3, #0
 800ee70:	f109 39ff 	add.w	r9, r9, #4294967295
 800ee74:	930f      	str	r3, [sp, #60]	; 0x3c
 800ee76:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800ee78:	1b1c      	subs	r4, r3, r4
 800ee7a:	1e63      	subs	r3, r4, #1
 800ee7c:	9309      	str	r3, [sp, #36]	; 0x24
 800ee7e:	bf49      	itett	mi
 800ee80:	f1c4 0301 	rsbmi	r3, r4, #1
 800ee84:	2300      	movpl	r3, #0
 800ee86:	9306      	strmi	r3, [sp, #24]
 800ee88:	2300      	movmi	r3, #0
 800ee8a:	bf54      	ite	pl
 800ee8c:	9306      	strpl	r3, [sp, #24]
 800ee8e:	9309      	strmi	r3, [sp, #36]	; 0x24
 800ee90:	f1b9 0f00 	cmp.w	r9, #0
 800ee94:	db3c      	blt.n	800ef10 <_dtoa_r+0x238>
 800ee96:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ee98:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800ee9c:	444b      	add	r3, r9
 800ee9e:	9309      	str	r3, [sp, #36]	; 0x24
 800eea0:	2300      	movs	r3, #0
 800eea2:	930a      	str	r3, [sp, #40]	; 0x28
 800eea4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800eea6:	2b09      	cmp	r3, #9
 800eea8:	d86c      	bhi.n	800ef84 <_dtoa_r+0x2ac>
 800eeaa:	2b05      	cmp	r3, #5
 800eeac:	bfc4      	itt	gt
 800eeae:	3b04      	subgt	r3, #4
 800eeb0:	9322      	strgt	r3, [sp, #136]	; 0x88
 800eeb2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800eeb4:	bfc8      	it	gt
 800eeb6:	2400      	movgt	r4, #0
 800eeb8:	f1a3 0302 	sub.w	r3, r3, #2
 800eebc:	bfd8      	it	le
 800eebe:	2401      	movle	r4, #1
 800eec0:	2b03      	cmp	r3, #3
 800eec2:	f200 808b 	bhi.w	800efdc <_dtoa_r+0x304>
 800eec6:	e8df f003 	tbb	[pc, r3]
 800eeca:	4f2d      	.short	0x4f2d
 800eecc:	5b4d      	.short	0x5b4d
 800eece:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 800eed2:	441c      	add	r4, r3
 800eed4:	f204 4332 	addw	r3, r4, #1074	; 0x432
 800eed8:	2b20      	cmp	r3, #32
 800eeda:	bfc3      	ittte	gt
 800eedc:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800eee0:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 800eee4:	fa09 f303 	lslgt.w	r3, r9, r3
 800eee8:	f1c3 0320 	rsble	r3, r3, #32
 800eeec:	bfc6      	itte	gt
 800eeee:	fa26 f000 	lsrgt.w	r0, r6, r0
 800eef2:	4318      	orrgt	r0, r3
 800eef4:	fa06 f003 	lslle.w	r0, r6, r3
 800eef8:	f7f1 fab0 	bl	800045c <__aeabi_ui2d>
 800eefc:	2301      	movs	r3, #1
 800eefe:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 800ef02:	3c01      	subs	r4, #1
 800ef04:	9313      	str	r3, [sp, #76]	; 0x4c
 800ef06:	e770      	b.n	800edea <_dtoa_r+0x112>
 800ef08:	2301      	movs	r3, #1
 800ef0a:	e7b3      	b.n	800ee74 <_dtoa_r+0x19c>
 800ef0c:	900f      	str	r0, [sp, #60]	; 0x3c
 800ef0e:	e7b2      	b.n	800ee76 <_dtoa_r+0x19e>
 800ef10:	9b06      	ldr	r3, [sp, #24]
 800ef12:	eba3 0309 	sub.w	r3, r3, r9
 800ef16:	9306      	str	r3, [sp, #24]
 800ef18:	f1c9 0300 	rsb	r3, r9, #0
 800ef1c:	930a      	str	r3, [sp, #40]	; 0x28
 800ef1e:	2300      	movs	r3, #0
 800ef20:	930e      	str	r3, [sp, #56]	; 0x38
 800ef22:	e7bf      	b.n	800eea4 <_dtoa_r+0x1cc>
 800ef24:	2300      	movs	r3, #0
 800ef26:	930b      	str	r3, [sp, #44]	; 0x2c
 800ef28:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800ef2a:	2b00      	cmp	r3, #0
 800ef2c:	dc59      	bgt.n	800efe2 <_dtoa_r+0x30a>
 800ef2e:	f04f 0b01 	mov.w	fp, #1
 800ef32:	465b      	mov	r3, fp
 800ef34:	f8cd b008 	str.w	fp, [sp, #8]
 800ef38:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 800ef3c:	2200      	movs	r2, #0
 800ef3e:	6a68      	ldr	r0, [r5, #36]	; 0x24
 800ef40:	6042      	str	r2, [r0, #4]
 800ef42:	2204      	movs	r2, #4
 800ef44:	f102 0614 	add.w	r6, r2, #20
 800ef48:	429e      	cmp	r6, r3
 800ef4a:	6841      	ldr	r1, [r0, #4]
 800ef4c:	d94f      	bls.n	800efee <_dtoa_r+0x316>
 800ef4e:	4628      	mov	r0, r5
 800ef50:	f000 fcdc 	bl	800f90c <_Balloc>
 800ef54:	9008      	str	r0, [sp, #32]
 800ef56:	2800      	cmp	r0, #0
 800ef58:	d14d      	bne.n	800eff6 <_dtoa_r+0x31e>
 800ef5a:	4602      	mov	r2, r0
 800ef5c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800ef60:	4b1d      	ldr	r3, [pc, #116]	; (800efd8 <_dtoa_r+0x300>)
 800ef62:	e6cd      	b.n	800ed00 <_dtoa_r+0x28>
 800ef64:	2301      	movs	r3, #1
 800ef66:	e7de      	b.n	800ef26 <_dtoa_r+0x24e>
 800ef68:	2300      	movs	r3, #0
 800ef6a:	930b      	str	r3, [sp, #44]	; 0x2c
 800ef6c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800ef6e:	eb09 0b03 	add.w	fp, r9, r3
 800ef72:	f10b 0301 	add.w	r3, fp, #1
 800ef76:	2b01      	cmp	r3, #1
 800ef78:	9302      	str	r3, [sp, #8]
 800ef7a:	bfb8      	it	lt
 800ef7c:	2301      	movlt	r3, #1
 800ef7e:	e7dd      	b.n	800ef3c <_dtoa_r+0x264>
 800ef80:	2301      	movs	r3, #1
 800ef82:	e7f2      	b.n	800ef6a <_dtoa_r+0x292>
 800ef84:	2401      	movs	r4, #1
 800ef86:	2300      	movs	r3, #0
 800ef88:	940b      	str	r4, [sp, #44]	; 0x2c
 800ef8a:	9322      	str	r3, [sp, #136]	; 0x88
 800ef8c:	f04f 3bff 	mov.w	fp, #4294967295
 800ef90:	2200      	movs	r2, #0
 800ef92:	2312      	movs	r3, #18
 800ef94:	f8cd b008 	str.w	fp, [sp, #8]
 800ef98:	9223      	str	r2, [sp, #140]	; 0x8c
 800ef9a:	e7cf      	b.n	800ef3c <_dtoa_r+0x264>
 800ef9c:	f3af 8000 	nop.w
 800efa0:	636f4361 	.word	0x636f4361
 800efa4:	3fd287a7 	.word	0x3fd287a7
 800efa8:	8b60c8b3 	.word	0x8b60c8b3
 800efac:	3fc68a28 	.word	0x3fc68a28
 800efb0:	509f79fb 	.word	0x509f79fb
 800efb4:	3fd34413 	.word	0x3fd34413
 800efb8:	080119d5 	.word	0x080119d5
 800efbc:	080119ec 	.word	0x080119ec
 800efc0:	7ff00000 	.word	0x7ff00000
 800efc4:	080119d1 	.word	0x080119d1
 800efc8:	080119c8 	.word	0x080119c8
 800efcc:	080119a5 	.word	0x080119a5
 800efd0:	3ff80000 	.word	0x3ff80000
 800efd4:	08011ae8 	.word	0x08011ae8
 800efd8:	08011a4b 	.word	0x08011a4b
 800efdc:	2301      	movs	r3, #1
 800efde:	930b      	str	r3, [sp, #44]	; 0x2c
 800efe0:	e7d4      	b.n	800ef8c <_dtoa_r+0x2b4>
 800efe2:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 800efe6:	465b      	mov	r3, fp
 800efe8:	f8cd b008 	str.w	fp, [sp, #8]
 800efec:	e7a6      	b.n	800ef3c <_dtoa_r+0x264>
 800efee:	3101      	adds	r1, #1
 800eff0:	6041      	str	r1, [r0, #4]
 800eff2:	0052      	lsls	r2, r2, #1
 800eff4:	e7a6      	b.n	800ef44 <_dtoa_r+0x26c>
 800eff6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800eff8:	9a08      	ldr	r2, [sp, #32]
 800effa:	601a      	str	r2, [r3, #0]
 800effc:	9b02      	ldr	r3, [sp, #8]
 800effe:	2b0e      	cmp	r3, #14
 800f000:	f200 80a8 	bhi.w	800f154 <_dtoa_r+0x47c>
 800f004:	2c00      	cmp	r4, #0
 800f006:	f000 80a5 	beq.w	800f154 <_dtoa_r+0x47c>
 800f00a:	f1b9 0f00 	cmp.w	r9, #0
 800f00e:	dd34      	ble.n	800f07a <_dtoa_r+0x3a2>
 800f010:	4a9a      	ldr	r2, [pc, #616]	; (800f27c <_dtoa_r+0x5a4>)
 800f012:	f009 030f 	and.w	r3, r9, #15
 800f016:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800f01a:	f419 7f80 	tst.w	r9, #256	; 0x100
 800f01e:	e9d3 3400 	ldrd	r3, r4, [r3]
 800f022:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800f026:	ea4f 1429 	mov.w	r4, r9, asr #4
 800f02a:	d016      	beq.n	800f05a <_dtoa_r+0x382>
 800f02c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800f030:	4b93      	ldr	r3, [pc, #588]	; (800f280 <_dtoa_r+0x5a8>)
 800f032:	2703      	movs	r7, #3
 800f034:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800f038:	f7f1 fbb4 	bl	80007a4 <__aeabi_ddiv>
 800f03c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800f040:	f004 040f 	and.w	r4, r4, #15
 800f044:	4e8e      	ldr	r6, [pc, #568]	; (800f280 <_dtoa_r+0x5a8>)
 800f046:	b954      	cbnz	r4, 800f05e <_dtoa_r+0x386>
 800f048:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800f04c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800f050:	f7f1 fba8 	bl	80007a4 <__aeabi_ddiv>
 800f054:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800f058:	e029      	b.n	800f0ae <_dtoa_r+0x3d6>
 800f05a:	2702      	movs	r7, #2
 800f05c:	e7f2      	b.n	800f044 <_dtoa_r+0x36c>
 800f05e:	07e1      	lsls	r1, r4, #31
 800f060:	d508      	bpl.n	800f074 <_dtoa_r+0x39c>
 800f062:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800f066:	e9d6 2300 	ldrd	r2, r3, [r6]
 800f06a:	f7f1 fa71 	bl	8000550 <__aeabi_dmul>
 800f06e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800f072:	3701      	adds	r7, #1
 800f074:	1064      	asrs	r4, r4, #1
 800f076:	3608      	adds	r6, #8
 800f078:	e7e5      	b.n	800f046 <_dtoa_r+0x36e>
 800f07a:	f000 80a5 	beq.w	800f1c8 <_dtoa_r+0x4f0>
 800f07e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800f082:	f1c9 0400 	rsb	r4, r9, #0
 800f086:	4b7d      	ldr	r3, [pc, #500]	; (800f27c <_dtoa_r+0x5a4>)
 800f088:	f004 020f 	and.w	r2, r4, #15
 800f08c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f090:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f094:	f7f1 fa5c 	bl	8000550 <__aeabi_dmul>
 800f098:	2702      	movs	r7, #2
 800f09a:	2300      	movs	r3, #0
 800f09c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800f0a0:	4e77      	ldr	r6, [pc, #476]	; (800f280 <_dtoa_r+0x5a8>)
 800f0a2:	1124      	asrs	r4, r4, #4
 800f0a4:	2c00      	cmp	r4, #0
 800f0a6:	f040 8084 	bne.w	800f1b2 <_dtoa_r+0x4da>
 800f0aa:	2b00      	cmp	r3, #0
 800f0ac:	d1d2      	bne.n	800f054 <_dtoa_r+0x37c>
 800f0ae:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f0b0:	2b00      	cmp	r3, #0
 800f0b2:	f000 808b 	beq.w	800f1cc <_dtoa_r+0x4f4>
 800f0b6:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800f0ba:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800f0be:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800f0c2:	2200      	movs	r2, #0
 800f0c4:	4b6f      	ldr	r3, [pc, #444]	; (800f284 <_dtoa_r+0x5ac>)
 800f0c6:	f7f1 fcb5 	bl	8000a34 <__aeabi_dcmplt>
 800f0ca:	2800      	cmp	r0, #0
 800f0cc:	d07e      	beq.n	800f1cc <_dtoa_r+0x4f4>
 800f0ce:	9b02      	ldr	r3, [sp, #8]
 800f0d0:	2b00      	cmp	r3, #0
 800f0d2:	d07b      	beq.n	800f1cc <_dtoa_r+0x4f4>
 800f0d4:	f1bb 0f00 	cmp.w	fp, #0
 800f0d8:	dd38      	ble.n	800f14c <_dtoa_r+0x474>
 800f0da:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800f0de:	2200      	movs	r2, #0
 800f0e0:	4b69      	ldr	r3, [pc, #420]	; (800f288 <_dtoa_r+0x5b0>)
 800f0e2:	f7f1 fa35 	bl	8000550 <__aeabi_dmul>
 800f0e6:	465c      	mov	r4, fp
 800f0e8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800f0ec:	f109 38ff 	add.w	r8, r9, #4294967295
 800f0f0:	3701      	adds	r7, #1
 800f0f2:	4638      	mov	r0, r7
 800f0f4:	f7f1 f9c2 	bl	800047c <__aeabi_i2d>
 800f0f8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f0fc:	f7f1 fa28 	bl	8000550 <__aeabi_dmul>
 800f100:	2200      	movs	r2, #0
 800f102:	4b62      	ldr	r3, [pc, #392]	; (800f28c <_dtoa_r+0x5b4>)
 800f104:	f7f1 f86e 	bl	80001e4 <__adddf3>
 800f108:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800f10c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800f110:	9611      	str	r6, [sp, #68]	; 0x44
 800f112:	2c00      	cmp	r4, #0
 800f114:	d15d      	bne.n	800f1d2 <_dtoa_r+0x4fa>
 800f116:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800f11a:	2200      	movs	r2, #0
 800f11c:	4b5c      	ldr	r3, [pc, #368]	; (800f290 <_dtoa_r+0x5b8>)
 800f11e:	f7f1 f85f 	bl	80001e0 <__aeabi_dsub>
 800f122:	4602      	mov	r2, r0
 800f124:	460b      	mov	r3, r1
 800f126:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800f12a:	4633      	mov	r3, r6
 800f12c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800f12e:	f7f1 fc9f 	bl	8000a70 <__aeabi_dcmpgt>
 800f132:	2800      	cmp	r0, #0
 800f134:	f040 829e 	bne.w	800f674 <_dtoa_r+0x99c>
 800f138:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800f13c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800f13e:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800f142:	f7f1 fc77 	bl	8000a34 <__aeabi_dcmplt>
 800f146:	2800      	cmp	r0, #0
 800f148:	f040 8292 	bne.w	800f670 <_dtoa_r+0x998>
 800f14c:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 800f150:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800f154:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800f156:	2b00      	cmp	r3, #0
 800f158:	f2c0 8153 	blt.w	800f402 <_dtoa_r+0x72a>
 800f15c:	f1b9 0f0e 	cmp.w	r9, #14
 800f160:	f300 814f 	bgt.w	800f402 <_dtoa_r+0x72a>
 800f164:	4b45      	ldr	r3, [pc, #276]	; (800f27c <_dtoa_r+0x5a4>)
 800f166:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 800f16a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800f16e:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800f172:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800f174:	2b00      	cmp	r3, #0
 800f176:	f280 80db 	bge.w	800f330 <_dtoa_r+0x658>
 800f17a:	9b02      	ldr	r3, [sp, #8]
 800f17c:	2b00      	cmp	r3, #0
 800f17e:	f300 80d7 	bgt.w	800f330 <_dtoa_r+0x658>
 800f182:	f040 8274 	bne.w	800f66e <_dtoa_r+0x996>
 800f186:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800f18a:	2200      	movs	r2, #0
 800f18c:	4b40      	ldr	r3, [pc, #256]	; (800f290 <_dtoa_r+0x5b8>)
 800f18e:	f7f1 f9df 	bl	8000550 <__aeabi_dmul>
 800f192:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f196:	f7f1 fc61 	bl	8000a5c <__aeabi_dcmpge>
 800f19a:	9c02      	ldr	r4, [sp, #8]
 800f19c:	4626      	mov	r6, r4
 800f19e:	2800      	cmp	r0, #0
 800f1a0:	f040 824a 	bne.w	800f638 <_dtoa_r+0x960>
 800f1a4:	2331      	movs	r3, #49	; 0x31
 800f1a6:	9f08      	ldr	r7, [sp, #32]
 800f1a8:	f109 0901 	add.w	r9, r9, #1
 800f1ac:	f807 3b01 	strb.w	r3, [r7], #1
 800f1b0:	e246      	b.n	800f640 <_dtoa_r+0x968>
 800f1b2:	07e2      	lsls	r2, r4, #31
 800f1b4:	d505      	bpl.n	800f1c2 <_dtoa_r+0x4ea>
 800f1b6:	e9d6 2300 	ldrd	r2, r3, [r6]
 800f1ba:	f7f1 f9c9 	bl	8000550 <__aeabi_dmul>
 800f1be:	2301      	movs	r3, #1
 800f1c0:	3701      	adds	r7, #1
 800f1c2:	1064      	asrs	r4, r4, #1
 800f1c4:	3608      	adds	r6, #8
 800f1c6:	e76d      	b.n	800f0a4 <_dtoa_r+0x3cc>
 800f1c8:	2702      	movs	r7, #2
 800f1ca:	e770      	b.n	800f0ae <_dtoa_r+0x3d6>
 800f1cc:	46c8      	mov	r8, r9
 800f1ce:	9c02      	ldr	r4, [sp, #8]
 800f1d0:	e78f      	b.n	800f0f2 <_dtoa_r+0x41a>
 800f1d2:	9908      	ldr	r1, [sp, #32]
 800f1d4:	4b29      	ldr	r3, [pc, #164]	; (800f27c <_dtoa_r+0x5a4>)
 800f1d6:	4421      	add	r1, r4
 800f1d8:	9112      	str	r1, [sp, #72]	; 0x48
 800f1da:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800f1dc:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800f1e0:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800f1e4:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800f1e8:	2900      	cmp	r1, #0
 800f1ea:	d055      	beq.n	800f298 <_dtoa_r+0x5c0>
 800f1ec:	2000      	movs	r0, #0
 800f1ee:	4929      	ldr	r1, [pc, #164]	; (800f294 <_dtoa_r+0x5bc>)
 800f1f0:	f7f1 fad8 	bl	80007a4 <__aeabi_ddiv>
 800f1f4:	463b      	mov	r3, r7
 800f1f6:	4632      	mov	r2, r6
 800f1f8:	f7f0 fff2 	bl	80001e0 <__aeabi_dsub>
 800f1fc:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800f200:	9f08      	ldr	r7, [sp, #32]
 800f202:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800f206:	f7f1 fc53 	bl	8000ab0 <__aeabi_d2iz>
 800f20a:	4604      	mov	r4, r0
 800f20c:	f7f1 f936 	bl	800047c <__aeabi_i2d>
 800f210:	4602      	mov	r2, r0
 800f212:	460b      	mov	r3, r1
 800f214:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800f218:	f7f0 ffe2 	bl	80001e0 <__aeabi_dsub>
 800f21c:	4602      	mov	r2, r0
 800f21e:	460b      	mov	r3, r1
 800f220:	3430      	adds	r4, #48	; 0x30
 800f222:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800f226:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800f22a:	f807 4b01 	strb.w	r4, [r7], #1
 800f22e:	f7f1 fc01 	bl	8000a34 <__aeabi_dcmplt>
 800f232:	2800      	cmp	r0, #0
 800f234:	d174      	bne.n	800f320 <_dtoa_r+0x648>
 800f236:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f23a:	2000      	movs	r0, #0
 800f23c:	4911      	ldr	r1, [pc, #68]	; (800f284 <_dtoa_r+0x5ac>)
 800f23e:	f7f0 ffcf 	bl	80001e0 <__aeabi_dsub>
 800f242:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800f246:	f7f1 fbf5 	bl	8000a34 <__aeabi_dcmplt>
 800f24a:	2800      	cmp	r0, #0
 800f24c:	f040 80b6 	bne.w	800f3bc <_dtoa_r+0x6e4>
 800f250:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800f252:	429f      	cmp	r7, r3
 800f254:	f43f af7a 	beq.w	800f14c <_dtoa_r+0x474>
 800f258:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800f25c:	2200      	movs	r2, #0
 800f25e:	4b0a      	ldr	r3, [pc, #40]	; (800f288 <_dtoa_r+0x5b0>)
 800f260:	f7f1 f976 	bl	8000550 <__aeabi_dmul>
 800f264:	2200      	movs	r2, #0
 800f266:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800f26a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800f26e:	4b06      	ldr	r3, [pc, #24]	; (800f288 <_dtoa_r+0x5b0>)
 800f270:	f7f1 f96e 	bl	8000550 <__aeabi_dmul>
 800f274:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800f278:	e7c3      	b.n	800f202 <_dtoa_r+0x52a>
 800f27a:	bf00      	nop
 800f27c:	08011ae8 	.word	0x08011ae8
 800f280:	08011ac0 	.word	0x08011ac0
 800f284:	3ff00000 	.word	0x3ff00000
 800f288:	40240000 	.word	0x40240000
 800f28c:	401c0000 	.word	0x401c0000
 800f290:	40140000 	.word	0x40140000
 800f294:	3fe00000 	.word	0x3fe00000
 800f298:	4630      	mov	r0, r6
 800f29a:	4639      	mov	r1, r7
 800f29c:	f7f1 f958 	bl	8000550 <__aeabi_dmul>
 800f2a0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800f2a2:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800f2a6:	9c08      	ldr	r4, [sp, #32]
 800f2a8:	9314      	str	r3, [sp, #80]	; 0x50
 800f2aa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800f2ae:	f7f1 fbff 	bl	8000ab0 <__aeabi_d2iz>
 800f2b2:	9015      	str	r0, [sp, #84]	; 0x54
 800f2b4:	f7f1 f8e2 	bl	800047c <__aeabi_i2d>
 800f2b8:	4602      	mov	r2, r0
 800f2ba:	460b      	mov	r3, r1
 800f2bc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800f2c0:	f7f0 ff8e 	bl	80001e0 <__aeabi_dsub>
 800f2c4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f2c6:	4606      	mov	r6, r0
 800f2c8:	3330      	adds	r3, #48	; 0x30
 800f2ca:	f804 3b01 	strb.w	r3, [r4], #1
 800f2ce:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800f2d0:	460f      	mov	r7, r1
 800f2d2:	429c      	cmp	r4, r3
 800f2d4:	f04f 0200 	mov.w	r2, #0
 800f2d8:	d124      	bne.n	800f324 <_dtoa_r+0x64c>
 800f2da:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800f2de:	4bb3      	ldr	r3, [pc, #716]	; (800f5ac <_dtoa_r+0x8d4>)
 800f2e0:	f7f0 ff80 	bl	80001e4 <__adddf3>
 800f2e4:	4602      	mov	r2, r0
 800f2e6:	460b      	mov	r3, r1
 800f2e8:	4630      	mov	r0, r6
 800f2ea:	4639      	mov	r1, r7
 800f2ec:	f7f1 fbc0 	bl	8000a70 <__aeabi_dcmpgt>
 800f2f0:	2800      	cmp	r0, #0
 800f2f2:	d162      	bne.n	800f3ba <_dtoa_r+0x6e2>
 800f2f4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800f2f8:	2000      	movs	r0, #0
 800f2fa:	49ac      	ldr	r1, [pc, #688]	; (800f5ac <_dtoa_r+0x8d4>)
 800f2fc:	f7f0 ff70 	bl	80001e0 <__aeabi_dsub>
 800f300:	4602      	mov	r2, r0
 800f302:	460b      	mov	r3, r1
 800f304:	4630      	mov	r0, r6
 800f306:	4639      	mov	r1, r7
 800f308:	f7f1 fb94 	bl	8000a34 <__aeabi_dcmplt>
 800f30c:	2800      	cmp	r0, #0
 800f30e:	f43f af1d 	beq.w	800f14c <_dtoa_r+0x474>
 800f312:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800f314:	1e7b      	subs	r3, r7, #1
 800f316:	9314      	str	r3, [sp, #80]	; 0x50
 800f318:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 800f31c:	2b30      	cmp	r3, #48	; 0x30
 800f31e:	d0f8      	beq.n	800f312 <_dtoa_r+0x63a>
 800f320:	46c1      	mov	r9, r8
 800f322:	e03a      	b.n	800f39a <_dtoa_r+0x6c2>
 800f324:	4ba2      	ldr	r3, [pc, #648]	; (800f5b0 <_dtoa_r+0x8d8>)
 800f326:	f7f1 f913 	bl	8000550 <__aeabi_dmul>
 800f32a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800f32e:	e7bc      	b.n	800f2aa <_dtoa_r+0x5d2>
 800f330:	9f08      	ldr	r7, [sp, #32]
 800f332:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800f336:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800f33a:	f7f1 fa33 	bl	80007a4 <__aeabi_ddiv>
 800f33e:	f7f1 fbb7 	bl	8000ab0 <__aeabi_d2iz>
 800f342:	4604      	mov	r4, r0
 800f344:	f7f1 f89a 	bl	800047c <__aeabi_i2d>
 800f348:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800f34c:	f7f1 f900 	bl	8000550 <__aeabi_dmul>
 800f350:	f104 0630 	add.w	r6, r4, #48	; 0x30
 800f354:	460b      	mov	r3, r1
 800f356:	4602      	mov	r2, r0
 800f358:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800f35c:	f7f0 ff40 	bl	80001e0 <__aeabi_dsub>
 800f360:	f807 6b01 	strb.w	r6, [r7], #1
 800f364:	9e08      	ldr	r6, [sp, #32]
 800f366:	9b02      	ldr	r3, [sp, #8]
 800f368:	1bbe      	subs	r6, r7, r6
 800f36a:	42b3      	cmp	r3, r6
 800f36c:	d13a      	bne.n	800f3e4 <_dtoa_r+0x70c>
 800f36e:	4602      	mov	r2, r0
 800f370:	460b      	mov	r3, r1
 800f372:	f7f0 ff37 	bl	80001e4 <__adddf3>
 800f376:	4602      	mov	r2, r0
 800f378:	460b      	mov	r3, r1
 800f37a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800f37e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800f382:	f7f1 fb75 	bl	8000a70 <__aeabi_dcmpgt>
 800f386:	bb58      	cbnz	r0, 800f3e0 <_dtoa_r+0x708>
 800f388:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800f38c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f390:	f7f1 fb46 	bl	8000a20 <__aeabi_dcmpeq>
 800f394:	b108      	cbz	r0, 800f39a <_dtoa_r+0x6c2>
 800f396:	07e1      	lsls	r1, r4, #31
 800f398:	d422      	bmi.n	800f3e0 <_dtoa_r+0x708>
 800f39a:	4628      	mov	r0, r5
 800f39c:	4651      	mov	r1, sl
 800f39e:	f000 faf5 	bl	800f98c <_Bfree>
 800f3a2:	2300      	movs	r3, #0
 800f3a4:	703b      	strb	r3, [r7, #0]
 800f3a6:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800f3a8:	f109 0001 	add.w	r0, r9, #1
 800f3ac:	6018      	str	r0, [r3, #0]
 800f3ae:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800f3b0:	2b00      	cmp	r3, #0
 800f3b2:	f43f acdf 	beq.w	800ed74 <_dtoa_r+0x9c>
 800f3b6:	601f      	str	r7, [r3, #0]
 800f3b8:	e4dc      	b.n	800ed74 <_dtoa_r+0x9c>
 800f3ba:	4627      	mov	r7, r4
 800f3bc:	463b      	mov	r3, r7
 800f3be:	461f      	mov	r7, r3
 800f3c0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800f3c4:	2a39      	cmp	r2, #57	; 0x39
 800f3c6:	d107      	bne.n	800f3d8 <_dtoa_r+0x700>
 800f3c8:	9a08      	ldr	r2, [sp, #32]
 800f3ca:	429a      	cmp	r2, r3
 800f3cc:	d1f7      	bne.n	800f3be <_dtoa_r+0x6e6>
 800f3ce:	2230      	movs	r2, #48	; 0x30
 800f3d0:	9908      	ldr	r1, [sp, #32]
 800f3d2:	f108 0801 	add.w	r8, r8, #1
 800f3d6:	700a      	strb	r2, [r1, #0]
 800f3d8:	781a      	ldrb	r2, [r3, #0]
 800f3da:	3201      	adds	r2, #1
 800f3dc:	701a      	strb	r2, [r3, #0]
 800f3de:	e79f      	b.n	800f320 <_dtoa_r+0x648>
 800f3e0:	46c8      	mov	r8, r9
 800f3e2:	e7eb      	b.n	800f3bc <_dtoa_r+0x6e4>
 800f3e4:	2200      	movs	r2, #0
 800f3e6:	4b72      	ldr	r3, [pc, #456]	; (800f5b0 <_dtoa_r+0x8d8>)
 800f3e8:	f7f1 f8b2 	bl	8000550 <__aeabi_dmul>
 800f3ec:	4602      	mov	r2, r0
 800f3ee:	460b      	mov	r3, r1
 800f3f0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800f3f4:	2200      	movs	r2, #0
 800f3f6:	2300      	movs	r3, #0
 800f3f8:	f7f1 fb12 	bl	8000a20 <__aeabi_dcmpeq>
 800f3fc:	2800      	cmp	r0, #0
 800f3fe:	d098      	beq.n	800f332 <_dtoa_r+0x65a>
 800f400:	e7cb      	b.n	800f39a <_dtoa_r+0x6c2>
 800f402:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800f404:	2a00      	cmp	r2, #0
 800f406:	f000 80cd 	beq.w	800f5a4 <_dtoa_r+0x8cc>
 800f40a:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800f40c:	2a01      	cmp	r2, #1
 800f40e:	f300 80af 	bgt.w	800f570 <_dtoa_r+0x898>
 800f412:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800f414:	2a00      	cmp	r2, #0
 800f416:	f000 80a7 	beq.w	800f568 <_dtoa_r+0x890>
 800f41a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800f41e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800f420:	9f06      	ldr	r7, [sp, #24]
 800f422:	9a06      	ldr	r2, [sp, #24]
 800f424:	2101      	movs	r1, #1
 800f426:	441a      	add	r2, r3
 800f428:	9206      	str	r2, [sp, #24]
 800f42a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f42c:	4628      	mov	r0, r5
 800f42e:	441a      	add	r2, r3
 800f430:	9209      	str	r2, [sp, #36]	; 0x24
 800f432:	f000 fb65 	bl	800fb00 <__i2b>
 800f436:	4606      	mov	r6, r0
 800f438:	2f00      	cmp	r7, #0
 800f43a:	dd0c      	ble.n	800f456 <_dtoa_r+0x77e>
 800f43c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f43e:	2b00      	cmp	r3, #0
 800f440:	dd09      	ble.n	800f456 <_dtoa_r+0x77e>
 800f442:	42bb      	cmp	r3, r7
 800f444:	bfa8      	it	ge
 800f446:	463b      	movge	r3, r7
 800f448:	9a06      	ldr	r2, [sp, #24]
 800f44a:	1aff      	subs	r7, r7, r3
 800f44c:	1ad2      	subs	r2, r2, r3
 800f44e:	9206      	str	r2, [sp, #24]
 800f450:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f452:	1ad3      	subs	r3, r2, r3
 800f454:	9309      	str	r3, [sp, #36]	; 0x24
 800f456:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f458:	b1f3      	cbz	r3, 800f498 <_dtoa_r+0x7c0>
 800f45a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f45c:	2b00      	cmp	r3, #0
 800f45e:	f000 80a9 	beq.w	800f5b4 <_dtoa_r+0x8dc>
 800f462:	2c00      	cmp	r4, #0
 800f464:	dd10      	ble.n	800f488 <_dtoa_r+0x7b0>
 800f466:	4631      	mov	r1, r6
 800f468:	4622      	mov	r2, r4
 800f46a:	4628      	mov	r0, r5
 800f46c:	f000 fc02 	bl	800fc74 <__pow5mult>
 800f470:	4652      	mov	r2, sl
 800f472:	4601      	mov	r1, r0
 800f474:	4606      	mov	r6, r0
 800f476:	4628      	mov	r0, r5
 800f478:	f000 fb58 	bl	800fb2c <__multiply>
 800f47c:	4680      	mov	r8, r0
 800f47e:	4651      	mov	r1, sl
 800f480:	4628      	mov	r0, r5
 800f482:	f000 fa83 	bl	800f98c <_Bfree>
 800f486:	46c2      	mov	sl, r8
 800f488:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f48a:	1b1a      	subs	r2, r3, r4
 800f48c:	d004      	beq.n	800f498 <_dtoa_r+0x7c0>
 800f48e:	4651      	mov	r1, sl
 800f490:	4628      	mov	r0, r5
 800f492:	f000 fbef 	bl	800fc74 <__pow5mult>
 800f496:	4682      	mov	sl, r0
 800f498:	2101      	movs	r1, #1
 800f49a:	4628      	mov	r0, r5
 800f49c:	f000 fb30 	bl	800fb00 <__i2b>
 800f4a0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f4a2:	4604      	mov	r4, r0
 800f4a4:	2b00      	cmp	r3, #0
 800f4a6:	f340 8087 	ble.w	800f5b8 <_dtoa_r+0x8e0>
 800f4aa:	461a      	mov	r2, r3
 800f4ac:	4601      	mov	r1, r0
 800f4ae:	4628      	mov	r0, r5
 800f4b0:	f000 fbe0 	bl	800fc74 <__pow5mult>
 800f4b4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800f4b6:	4604      	mov	r4, r0
 800f4b8:	2b01      	cmp	r3, #1
 800f4ba:	f340 8080 	ble.w	800f5be <_dtoa_r+0x8e6>
 800f4be:	f04f 0800 	mov.w	r8, #0
 800f4c2:	6923      	ldr	r3, [r4, #16]
 800f4c4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800f4c8:	6918      	ldr	r0, [r3, #16]
 800f4ca:	f000 facb 	bl	800fa64 <__hi0bits>
 800f4ce:	f1c0 0020 	rsb	r0, r0, #32
 800f4d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f4d4:	4418      	add	r0, r3
 800f4d6:	f010 001f 	ands.w	r0, r0, #31
 800f4da:	f000 8092 	beq.w	800f602 <_dtoa_r+0x92a>
 800f4de:	f1c0 0320 	rsb	r3, r0, #32
 800f4e2:	2b04      	cmp	r3, #4
 800f4e4:	f340 808a 	ble.w	800f5fc <_dtoa_r+0x924>
 800f4e8:	f1c0 001c 	rsb	r0, r0, #28
 800f4ec:	9b06      	ldr	r3, [sp, #24]
 800f4ee:	4407      	add	r7, r0
 800f4f0:	4403      	add	r3, r0
 800f4f2:	9306      	str	r3, [sp, #24]
 800f4f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f4f6:	4403      	add	r3, r0
 800f4f8:	9309      	str	r3, [sp, #36]	; 0x24
 800f4fa:	9b06      	ldr	r3, [sp, #24]
 800f4fc:	2b00      	cmp	r3, #0
 800f4fe:	dd05      	ble.n	800f50c <_dtoa_r+0x834>
 800f500:	4651      	mov	r1, sl
 800f502:	461a      	mov	r2, r3
 800f504:	4628      	mov	r0, r5
 800f506:	f000 fc0f 	bl	800fd28 <__lshift>
 800f50a:	4682      	mov	sl, r0
 800f50c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f50e:	2b00      	cmp	r3, #0
 800f510:	dd05      	ble.n	800f51e <_dtoa_r+0x846>
 800f512:	4621      	mov	r1, r4
 800f514:	461a      	mov	r2, r3
 800f516:	4628      	mov	r0, r5
 800f518:	f000 fc06 	bl	800fd28 <__lshift>
 800f51c:	4604      	mov	r4, r0
 800f51e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f520:	2b00      	cmp	r3, #0
 800f522:	d070      	beq.n	800f606 <_dtoa_r+0x92e>
 800f524:	4621      	mov	r1, r4
 800f526:	4650      	mov	r0, sl
 800f528:	f000 fc6a 	bl	800fe00 <__mcmp>
 800f52c:	2800      	cmp	r0, #0
 800f52e:	da6a      	bge.n	800f606 <_dtoa_r+0x92e>
 800f530:	2300      	movs	r3, #0
 800f532:	4651      	mov	r1, sl
 800f534:	220a      	movs	r2, #10
 800f536:	4628      	mov	r0, r5
 800f538:	f000 fa4a 	bl	800f9d0 <__multadd>
 800f53c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f53e:	4682      	mov	sl, r0
 800f540:	f109 39ff 	add.w	r9, r9, #4294967295
 800f544:	2b00      	cmp	r3, #0
 800f546:	f000 8193 	beq.w	800f870 <_dtoa_r+0xb98>
 800f54a:	4631      	mov	r1, r6
 800f54c:	2300      	movs	r3, #0
 800f54e:	220a      	movs	r2, #10
 800f550:	4628      	mov	r0, r5
 800f552:	f000 fa3d 	bl	800f9d0 <__multadd>
 800f556:	f1bb 0f00 	cmp.w	fp, #0
 800f55a:	4606      	mov	r6, r0
 800f55c:	f300 8093 	bgt.w	800f686 <_dtoa_r+0x9ae>
 800f560:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800f562:	2b02      	cmp	r3, #2
 800f564:	dc57      	bgt.n	800f616 <_dtoa_r+0x93e>
 800f566:	e08e      	b.n	800f686 <_dtoa_r+0x9ae>
 800f568:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800f56a:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800f56e:	e756      	b.n	800f41e <_dtoa_r+0x746>
 800f570:	9b02      	ldr	r3, [sp, #8]
 800f572:	1e5c      	subs	r4, r3, #1
 800f574:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f576:	42a3      	cmp	r3, r4
 800f578:	bfb7      	itett	lt
 800f57a:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800f57c:	1b1c      	subge	r4, r3, r4
 800f57e:	1ae2      	sublt	r2, r4, r3
 800f580:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800f582:	bfbe      	ittt	lt
 800f584:	940a      	strlt	r4, [sp, #40]	; 0x28
 800f586:	189b      	addlt	r3, r3, r2
 800f588:	930e      	strlt	r3, [sp, #56]	; 0x38
 800f58a:	9b02      	ldr	r3, [sp, #8]
 800f58c:	bfb8      	it	lt
 800f58e:	2400      	movlt	r4, #0
 800f590:	2b00      	cmp	r3, #0
 800f592:	bfbb      	ittet	lt
 800f594:	9b06      	ldrlt	r3, [sp, #24]
 800f596:	9a02      	ldrlt	r2, [sp, #8]
 800f598:	9f06      	ldrge	r7, [sp, #24]
 800f59a:	1a9f      	sublt	r7, r3, r2
 800f59c:	bfac      	ite	ge
 800f59e:	9b02      	ldrge	r3, [sp, #8]
 800f5a0:	2300      	movlt	r3, #0
 800f5a2:	e73e      	b.n	800f422 <_dtoa_r+0x74a>
 800f5a4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800f5a6:	9f06      	ldr	r7, [sp, #24]
 800f5a8:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800f5aa:	e745      	b.n	800f438 <_dtoa_r+0x760>
 800f5ac:	3fe00000 	.word	0x3fe00000
 800f5b0:	40240000 	.word	0x40240000
 800f5b4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f5b6:	e76a      	b.n	800f48e <_dtoa_r+0x7b6>
 800f5b8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800f5ba:	2b01      	cmp	r3, #1
 800f5bc:	dc19      	bgt.n	800f5f2 <_dtoa_r+0x91a>
 800f5be:	9b04      	ldr	r3, [sp, #16]
 800f5c0:	b9bb      	cbnz	r3, 800f5f2 <_dtoa_r+0x91a>
 800f5c2:	9b05      	ldr	r3, [sp, #20]
 800f5c4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f5c8:	b99b      	cbnz	r3, 800f5f2 <_dtoa_r+0x91a>
 800f5ca:	9b05      	ldr	r3, [sp, #20]
 800f5cc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800f5d0:	0d1b      	lsrs	r3, r3, #20
 800f5d2:	051b      	lsls	r3, r3, #20
 800f5d4:	b183      	cbz	r3, 800f5f8 <_dtoa_r+0x920>
 800f5d6:	f04f 0801 	mov.w	r8, #1
 800f5da:	9b06      	ldr	r3, [sp, #24]
 800f5dc:	3301      	adds	r3, #1
 800f5de:	9306      	str	r3, [sp, #24]
 800f5e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f5e2:	3301      	adds	r3, #1
 800f5e4:	9309      	str	r3, [sp, #36]	; 0x24
 800f5e6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f5e8:	2b00      	cmp	r3, #0
 800f5ea:	f47f af6a 	bne.w	800f4c2 <_dtoa_r+0x7ea>
 800f5ee:	2001      	movs	r0, #1
 800f5f0:	e76f      	b.n	800f4d2 <_dtoa_r+0x7fa>
 800f5f2:	f04f 0800 	mov.w	r8, #0
 800f5f6:	e7f6      	b.n	800f5e6 <_dtoa_r+0x90e>
 800f5f8:	4698      	mov	r8, r3
 800f5fa:	e7f4      	b.n	800f5e6 <_dtoa_r+0x90e>
 800f5fc:	f43f af7d 	beq.w	800f4fa <_dtoa_r+0x822>
 800f600:	4618      	mov	r0, r3
 800f602:	301c      	adds	r0, #28
 800f604:	e772      	b.n	800f4ec <_dtoa_r+0x814>
 800f606:	9b02      	ldr	r3, [sp, #8]
 800f608:	2b00      	cmp	r3, #0
 800f60a:	dc36      	bgt.n	800f67a <_dtoa_r+0x9a2>
 800f60c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800f60e:	2b02      	cmp	r3, #2
 800f610:	dd33      	ble.n	800f67a <_dtoa_r+0x9a2>
 800f612:	f8dd b008 	ldr.w	fp, [sp, #8]
 800f616:	f1bb 0f00 	cmp.w	fp, #0
 800f61a:	d10d      	bne.n	800f638 <_dtoa_r+0x960>
 800f61c:	4621      	mov	r1, r4
 800f61e:	465b      	mov	r3, fp
 800f620:	2205      	movs	r2, #5
 800f622:	4628      	mov	r0, r5
 800f624:	f000 f9d4 	bl	800f9d0 <__multadd>
 800f628:	4601      	mov	r1, r0
 800f62a:	4604      	mov	r4, r0
 800f62c:	4650      	mov	r0, sl
 800f62e:	f000 fbe7 	bl	800fe00 <__mcmp>
 800f632:	2800      	cmp	r0, #0
 800f634:	f73f adb6 	bgt.w	800f1a4 <_dtoa_r+0x4cc>
 800f638:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800f63a:	9f08      	ldr	r7, [sp, #32]
 800f63c:	ea6f 0903 	mvn.w	r9, r3
 800f640:	f04f 0800 	mov.w	r8, #0
 800f644:	4621      	mov	r1, r4
 800f646:	4628      	mov	r0, r5
 800f648:	f000 f9a0 	bl	800f98c <_Bfree>
 800f64c:	2e00      	cmp	r6, #0
 800f64e:	f43f aea4 	beq.w	800f39a <_dtoa_r+0x6c2>
 800f652:	f1b8 0f00 	cmp.w	r8, #0
 800f656:	d005      	beq.n	800f664 <_dtoa_r+0x98c>
 800f658:	45b0      	cmp	r8, r6
 800f65a:	d003      	beq.n	800f664 <_dtoa_r+0x98c>
 800f65c:	4641      	mov	r1, r8
 800f65e:	4628      	mov	r0, r5
 800f660:	f000 f994 	bl	800f98c <_Bfree>
 800f664:	4631      	mov	r1, r6
 800f666:	4628      	mov	r0, r5
 800f668:	f000 f990 	bl	800f98c <_Bfree>
 800f66c:	e695      	b.n	800f39a <_dtoa_r+0x6c2>
 800f66e:	2400      	movs	r4, #0
 800f670:	4626      	mov	r6, r4
 800f672:	e7e1      	b.n	800f638 <_dtoa_r+0x960>
 800f674:	46c1      	mov	r9, r8
 800f676:	4626      	mov	r6, r4
 800f678:	e594      	b.n	800f1a4 <_dtoa_r+0x4cc>
 800f67a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f67c:	f8dd b008 	ldr.w	fp, [sp, #8]
 800f680:	2b00      	cmp	r3, #0
 800f682:	f000 80fc 	beq.w	800f87e <_dtoa_r+0xba6>
 800f686:	2f00      	cmp	r7, #0
 800f688:	dd05      	ble.n	800f696 <_dtoa_r+0x9be>
 800f68a:	4631      	mov	r1, r6
 800f68c:	463a      	mov	r2, r7
 800f68e:	4628      	mov	r0, r5
 800f690:	f000 fb4a 	bl	800fd28 <__lshift>
 800f694:	4606      	mov	r6, r0
 800f696:	f1b8 0f00 	cmp.w	r8, #0
 800f69a:	d05c      	beq.n	800f756 <_dtoa_r+0xa7e>
 800f69c:	4628      	mov	r0, r5
 800f69e:	6871      	ldr	r1, [r6, #4]
 800f6a0:	f000 f934 	bl	800f90c <_Balloc>
 800f6a4:	4607      	mov	r7, r0
 800f6a6:	b928      	cbnz	r0, 800f6b4 <_dtoa_r+0x9dc>
 800f6a8:	4602      	mov	r2, r0
 800f6aa:	f240 21ea 	movw	r1, #746	; 0x2ea
 800f6ae:	4b7e      	ldr	r3, [pc, #504]	; (800f8a8 <_dtoa_r+0xbd0>)
 800f6b0:	f7ff bb26 	b.w	800ed00 <_dtoa_r+0x28>
 800f6b4:	6932      	ldr	r2, [r6, #16]
 800f6b6:	f106 010c 	add.w	r1, r6, #12
 800f6ba:	3202      	adds	r2, #2
 800f6bc:	0092      	lsls	r2, r2, #2
 800f6be:	300c      	adds	r0, #12
 800f6c0:	f000 f90a 	bl	800f8d8 <memcpy>
 800f6c4:	2201      	movs	r2, #1
 800f6c6:	4639      	mov	r1, r7
 800f6c8:	4628      	mov	r0, r5
 800f6ca:	f000 fb2d 	bl	800fd28 <__lshift>
 800f6ce:	46b0      	mov	r8, r6
 800f6d0:	4606      	mov	r6, r0
 800f6d2:	9b08      	ldr	r3, [sp, #32]
 800f6d4:	3301      	adds	r3, #1
 800f6d6:	9302      	str	r3, [sp, #8]
 800f6d8:	9b08      	ldr	r3, [sp, #32]
 800f6da:	445b      	add	r3, fp
 800f6dc:	930a      	str	r3, [sp, #40]	; 0x28
 800f6de:	9b04      	ldr	r3, [sp, #16]
 800f6e0:	f003 0301 	and.w	r3, r3, #1
 800f6e4:	9309      	str	r3, [sp, #36]	; 0x24
 800f6e6:	9b02      	ldr	r3, [sp, #8]
 800f6e8:	4621      	mov	r1, r4
 800f6ea:	4650      	mov	r0, sl
 800f6ec:	f103 3bff 	add.w	fp, r3, #4294967295
 800f6f0:	f7ff fa62 	bl	800ebb8 <quorem>
 800f6f4:	4603      	mov	r3, r0
 800f6f6:	4641      	mov	r1, r8
 800f6f8:	3330      	adds	r3, #48	; 0x30
 800f6fa:	9004      	str	r0, [sp, #16]
 800f6fc:	4650      	mov	r0, sl
 800f6fe:	930b      	str	r3, [sp, #44]	; 0x2c
 800f700:	f000 fb7e 	bl	800fe00 <__mcmp>
 800f704:	4632      	mov	r2, r6
 800f706:	9006      	str	r0, [sp, #24]
 800f708:	4621      	mov	r1, r4
 800f70a:	4628      	mov	r0, r5
 800f70c:	f000 fb94 	bl	800fe38 <__mdiff>
 800f710:	68c2      	ldr	r2, [r0, #12]
 800f712:	4607      	mov	r7, r0
 800f714:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f716:	bb02      	cbnz	r2, 800f75a <_dtoa_r+0xa82>
 800f718:	4601      	mov	r1, r0
 800f71a:	4650      	mov	r0, sl
 800f71c:	f000 fb70 	bl	800fe00 <__mcmp>
 800f720:	4602      	mov	r2, r0
 800f722:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f724:	4639      	mov	r1, r7
 800f726:	4628      	mov	r0, r5
 800f728:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 800f72c:	f000 f92e 	bl	800f98c <_Bfree>
 800f730:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800f732:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800f734:	9f02      	ldr	r7, [sp, #8]
 800f736:	ea43 0102 	orr.w	r1, r3, r2
 800f73a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f73c:	430b      	orrs	r3, r1
 800f73e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f740:	d10d      	bne.n	800f75e <_dtoa_r+0xa86>
 800f742:	2b39      	cmp	r3, #57	; 0x39
 800f744:	d027      	beq.n	800f796 <_dtoa_r+0xabe>
 800f746:	9a06      	ldr	r2, [sp, #24]
 800f748:	2a00      	cmp	r2, #0
 800f74a:	dd01      	ble.n	800f750 <_dtoa_r+0xa78>
 800f74c:	9b04      	ldr	r3, [sp, #16]
 800f74e:	3331      	adds	r3, #49	; 0x31
 800f750:	f88b 3000 	strb.w	r3, [fp]
 800f754:	e776      	b.n	800f644 <_dtoa_r+0x96c>
 800f756:	4630      	mov	r0, r6
 800f758:	e7b9      	b.n	800f6ce <_dtoa_r+0x9f6>
 800f75a:	2201      	movs	r2, #1
 800f75c:	e7e2      	b.n	800f724 <_dtoa_r+0xa4c>
 800f75e:	9906      	ldr	r1, [sp, #24]
 800f760:	2900      	cmp	r1, #0
 800f762:	db04      	blt.n	800f76e <_dtoa_r+0xa96>
 800f764:	9822      	ldr	r0, [sp, #136]	; 0x88
 800f766:	4301      	orrs	r1, r0
 800f768:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f76a:	4301      	orrs	r1, r0
 800f76c:	d120      	bne.n	800f7b0 <_dtoa_r+0xad8>
 800f76e:	2a00      	cmp	r2, #0
 800f770:	ddee      	ble.n	800f750 <_dtoa_r+0xa78>
 800f772:	4651      	mov	r1, sl
 800f774:	2201      	movs	r2, #1
 800f776:	4628      	mov	r0, r5
 800f778:	9302      	str	r3, [sp, #8]
 800f77a:	f000 fad5 	bl	800fd28 <__lshift>
 800f77e:	4621      	mov	r1, r4
 800f780:	4682      	mov	sl, r0
 800f782:	f000 fb3d 	bl	800fe00 <__mcmp>
 800f786:	2800      	cmp	r0, #0
 800f788:	9b02      	ldr	r3, [sp, #8]
 800f78a:	dc02      	bgt.n	800f792 <_dtoa_r+0xaba>
 800f78c:	d1e0      	bne.n	800f750 <_dtoa_r+0xa78>
 800f78e:	07da      	lsls	r2, r3, #31
 800f790:	d5de      	bpl.n	800f750 <_dtoa_r+0xa78>
 800f792:	2b39      	cmp	r3, #57	; 0x39
 800f794:	d1da      	bne.n	800f74c <_dtoa_r+0xa74>
 800f796:	2339      	movs	r3, #57	; 0x39
 800f798:	f88b 3000 	strb.w	r3, [fp]
 800f79c:	463b      	mov	r3, r7
 800f79e:	461f      	mov	r7, r3
 800f7a0:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 800f7a4:	3b01      	subs	r3, #1
 800f7a6:	2a39      	cmp	r2, #57	; 0x39
 800f7a8:	d050      	beq.n	800f84c <_dtoa_r+0xb74>
 800f7aa:	3201      	adds	r2, #1
 800f7ac:	701a      	strb	r2, [r3, #0]
 800f7ae:	e749      	b.n	800f644 <_dtoa_r+0x96c>
 800f7b0:	2a00      	cmp	r2, #0
 800f7b2:	dd03      	ble.n	800f7bc <_dtoa_r+0xae4>
 800f7b4:	2b39      	cmp	r3, #57	; 0x39
 800f7b6:	d0ee      	beq.n	800f796 <_dtoa_r+0xabe>
 800f7b8:	3301      	adds	r3, #1
 800f7ba:	e7c9      	b.n	800f750 <_dtoa_r+0xa78>
 800f7bc:	9a02      	ldr	r2, [sp, #8]
 800f7be:	990a      	ldr	r1, [sp, #40]	; 0x28
 800f7c0:	f802 3c01 	strb.w	r3, [r2, #-1]
 800f7c4:	428a      	cmp	r2, r1
 800f7c6:	d02a      	beq.n	800f81e <_dtoa_r+0xb46>
 800f7c8:	4651      	mov	r1, sl
 800f7ca:	2300      	movs	r3, #0
 800f7cc:	220a      	movs	r2, #10
 800f7ce:	4628      	mov	r0, r5
 800f7d0:	f000 f8fe 	bl	800f9d0 <__multadd>
 800f7d4:	45b0      	cmp	r8, r6
 800f7d6:	4682      	mov	sl, r0
 800f7d8:	f04f 0300 	mov.w	r3, #0
 800f7dc:	f04f 020a 	mov.w	r2, #10
 800f7e0:	4641      	mov	r1, r8
 800f7e2:	4628      	mov	r0, r5
 800f7e4:	d107      	bne.n	800f7f6 <_dtoa_r+0xb1e>
 800f7e6:	f000 f8f3 	bl	800f9d0 <__multadd>
 800f7ea:	4680      	mov	r8, r0
 800f7ec:	4606      	mov	r6, r0
 800f7ee:	9b02      	ldr	r3, [sp, #8]
 800f7f0:	3301      	adds	r3, #1
 800f7f2:	9302      	str	r3, [sp, #8]
 800f7f4:	e777      	b.n	800f6e6 <_dtoa_r+0xa0e>
 800f7f6:	f000 f8eb 	bl	800f9d0 <__multadd>
 800f7fa:	4631      	mov	r1, r6
 800f7fc:	4680      	mov	r8, r0
 800f7fe:	2300      	movs	r3, #0
 800f800:	220a      	movs	r2, #10
 800f802:	4628      	mov	r0, r5
 800f804:	f000 f8e4 	bl	800f9d0 <__multadd>
 800f808:	4606      	mov	r6, r0
 800f80a:	e7f0      	b.n	800f7ee <_dtoa_r+0xb16>
 800f80c:	f1bb 0f00 	cmp.w	fp, #0
 800f810:	bfcc      	ite	gt
 800f812:	465f      	movgt	r7, fp
 800f814:	2701      	movle	r7, #1
 800f816:	f04f 0800 	mov.w	r8, #0
 800f81a:	9a08      	ldr	r2, [sp, #32]
 800f81c:	4417      	add	r7, r2
 800f81e:	4651      	mov	r1, sl
 800f820:	2201      	movs	r2, #1
 800f822:	4628      	mov	r0, r5
 800f824:	9302      	str	r3, [sp, #8]
 800f826:	f000 fa7f 	bl	800fd28 <__lshift>
 800f82a:	4621      	mov	r1, r4
 800f82c:	4682      	mov	sl, r0
 800f82e:	f000 fae7 	bl	800fe00 <__mcmp>
 800f832:	2800      	cmp	r0, #0
 800f834:	dcb2      	bgt.n	800f79c <_dtoa_r+0xac4>
 800f836:	d102      	bne.n	800f83e <_dtoa_r+0xb66>
 800f838:	9b02      	ldr	r3, [sp, #8]
 800f83a:	07db      	lsls	r3, r3, #31
 800f83c:	d4ae      	bmi.n	800f79c <_dtoa_r+0xac4>
 800f83e:	463b      	mov	r3, r7
 800f840:	461f      	mov	r7, r3
 800f842:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800f846:	2a30      	cmp	r2, #48	; 0x30
 800f848:	d0fa      	beq.n	800f840 <_dtoa_r+0xb68>
 800f84a:	e6fb      	b.n	800f644 <_dtoa_r+0x96c>
 800f84c:	9a08      	ldr	r2, [sp, #32]
 800f84e:	429a      	cmp	r2, r3
 800f850:	d1a5      	bne.n	800f79e <_dtoa_r+0xac6>
 800f852:	2331      	movs	r3, #49	; 0x31
 800f854:	f109 0901 	add.w	r9, r9, #1
 800f858:	7013      	strb	r3, [r2, #0]
 800f85a:	e6f3      	b.n	800f644 <_dtoa_r+0x96c>
 800f85c:	4b13      	ldr	r3, [pc, #76]	; (800f8ac <_dtoa_r+0xbd4>)
 800f85e:	f7ff baa7 	b.w	800edb0 <_dtoa_r+0xd8>
 800f862:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800f864:	2b00      	cmp	r3, #0
 800f866:	f47f aa80 	bne.w	800ed6a <_dtoa_r+0x92>
 800f86a:	4b11      	ldr	r3, [pc, #68]	; (800f8b0 <_dtoa_r+0xbd8>)
 800f86c:	f7ff baa0 	b.w	800edb0 <_dtoa_r+0xd8>
 800f870:	f1bb 0f00 	cmp.w	fp, #0
 800f874:	dc03      	bgt.n	800f87e <_dtoa_r+0xba6>
 800f876:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800f878:	2b02      	cmp	r3, #2
 800f87a:	f73f aecc 	bgt.w	800f616 <_dtoa_r+0x93e>
 800f87e:	9f08      	ldr	r7, [sp, #32]
 800f880:	4621      	mov	r1, r4
 800f882:	4650      	mov	r0, sl
 800f884:	f7ff f998 	bl	800ebb8 <quorem>
 800f888:	9a08      	ldr	r2, [sp, #32]
 800f88a:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800f88e:	f807 3b01 	strb.w	r3, [r7], #1
 800f892:	1aba      	subs	r2, r7, r2
 800f894:	4593      	cmp	fp, r2
 800f896:	ddb9      	ble.n	800f80c <_dtoa_r+0xb34>
 800f898:	4651      	mov	r1, sl
 800f89a:	2300      	movs	r3, #0
 800f89c:	220a      	movs	r2, #10
 800f89e:	4628      	mov	r0, r5
 800f8a0:	f000 f896 	bl	800f9d0 <__multadd>
 800f8a4:	4682      	mov	sl, r0
 800f8a6:	e7eb      	b.n	800f880 <_dtoa_r+0xba8>
 800f8a8:	08011a4b 	.word	0x08011a4b
 800f8ac:	080119a4 	.word	0x080119a4
 800f8b0:	080119c8 	.word	0x080119c8

0800f8b4 <_localeconv_r>:
 800f8b4:	4800      	ldr	r0, [pc, #0]	; (800f8b8 <_localeconv_r+0x4>)
 800f8b6:	4770      	bx	lr
 800f8b8:	200002dc 	.word	0x200002dc

0800f8bc <memchr>:
 800f8bc:	4603      	mov	r3, r0
 800f8be:	b510      	push	{r4, lr}
 800f8c0:	b2c9      	uxtb	r1, r1
 800f8c2:	4402      	add	r2, r0
 800f8c4:	4293      	cmp	r3, r2
 800f8c6:	4618      	mov	r0, r3
 800f8c8:	d101      	bne.n	800f8ce <memchr+0x12>
 800f8ca:	2000      	movs	r0, #0
 800f8cc:	e003      	b.n	800f8d6 <memchr+0x1a>
 800f8ce:	7804      	ldrb	r4, [r0, #0]
 800f8d0:	3301      	adds	r3, #1
 800f8d2:	428c      	cmp	r4, r1
 800f8d4:	d1f6      	bne.n	800f8c4 <memchr+0x8>
 800f8d6:	bd10      	pop	{r4, pc}

0800f8d8 <memcpy>:
 800f8d8:	440a      	add	r2, r1
 800f8da:	4291      	cmp	r1, r2
 800f8dc:	f100 33ff 	add.w	r3, r0, #4294967295
 800f8e0:	d100      	bne.n	800f8e4 <memcpy+0xc>
 800f8e2:	4770      	bx	lr
 800f8e4:	b510      	push	{r4, lr}
 800f8e6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f8ea:	4291      	cmp	r1, r2
 800f8ec:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f8f0:	d1f9      	bne.n	800f8e6 <memcpy+0xe>
 800f8f2:	bd10      	pop	{r4, pc}

0800f8f4 <__malloc_lock>:
 800f8f4:	4801      	ldr	r0, [pc, #4]	; (800f8fc <__malloc_lock+0x8>)
 800f8f6:	f000 bd4c 	b.w	8010392 <__retarget_lock_acquire_recursive>
 800f8fa:	bf00      	nop
 800f8fc:	20002110 	.word	0x20002110

0800f900 <__malloc_unlock>:
 800f900:	4801      	ldr	r0, [pc, #4]	; (800f908 <__malloc_unlock+0x8>)
 800f902:	f000 bd47 	b.w	8010394 <__retarget_lock_release_recursive>
 800f906:	bf00      	nop
 800f908:	20002110 	.word	0x20002110

0800f90c <_Balloc>:
 800f90c:	b570      	push	{r4, r5, r6, lr}
 800f90e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800f910:	4604      	mov	r4, r0
 800f912:	460d      	mov	r5, r1
 800f914:	b976      	cbnz	r6, 800f934 <_Balloc+0x28>
 800f916:	2010      	movs	r0, #16
 800f918:	f7fe fbea 	bl	800e0f0 <malloc>
 800f91c:	4602      	mov	r2, r0
 800f91e:	6260      	str	r0, [r4, #36]	; 0x24
 800f920:	b920      	cbnz	r0, 800f92c <_Balloc+0x20>
 800f922:	2166      	movs	r1, #102	; 0x66
 800f924:	4b17      	ldr	r3, [pc, #92]	; (800f984 <_Balloc+0x78>)
 800f926:	4818      	ldr	r0, [pc, #96]	; (800f988 <_Balloc+0x7c>)
 800f928:	f000 fd02 	bl	8010330 <__assert_func>
 800f92c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f930:	6006      	str	r6, [r0, #0]
 800f932:	60c6      	str	r6, [r0, #12]
 800f934:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800f936:	68f3      	ldr	r3, [r6, #12]
 800f938:	b183      	cbz	r3, 800f95c <_Balloc+0x50>
 800f93a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f93c:	68db      	ldr	r3, [r3, #12]
 800f93e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800f942:	b9b8      	cbnz	r0, 800f974 <_Balloc+0x68>
 800f944:	2101      	movs	r1, #1
 800f946:	fa01 f605 	lsl.w	r6, r1, r5
 800f94a:	1d72      	adds	r2, r6, #5
 800f94c:	4620      	mov	r0, r4
 800f94e:	0092      	lsls	r2, r2, #2
 800f950:	f000 fb5e 	bl	8010010 <_calloc_r>
 800f954:	b160      	cbz	r0, 800f970 <_Balloc+0x64>
 800f956:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800f95a:	e00e      	b.n	800f97a <_Balloc+0x6e>
 800f95c:	2221      	movs	r2, #33	; 0x21
 800f95e:	2104      	movs	r1, #4
 800f960:	4620      	mov	r0, r4
 800f962:	f000 fb55 	bl	8010010 <_calloc_r>
 800f966:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f968:	60f0      	str	r0, [r6, #12]
 800f96a:	68db      	ldr	r3, [r3, #12]
 800f96c:	2b00      	cmp	r3, #0
 800f96e:	d1e4      	bne.n	800f93a <_Balloc+0x2e>
 800f970:	2000      	movs	r0, #0
 800f972:	bd70      	pop	{r4, r5, r6, pc}
 800f974:	6802      	ldr	r2, [r0, #0]
 800f976:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800f97a:	2300      	movs	r3, #0
 800f97c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800f980:	e7f7      	b.n	800f972 <_Balloc+0x66>
 800f982:	bf00      	nop
 800f984:	080119d5 	.word	0x080119d5
 800f988:	08011a5c 	.word	0x08011a5c

0800f98c <_Bfree>:
 800f98c:	b570      	push	{r4, r5, r6, lr}
 800f98e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800f990:	4605      	mov	r5, r0
 800f992:	460c      	mov	r4, r1
 800f994:	b976      	cbnz	r6, 800f9b4 <_Bfree+0x28>
 800f996:	2010      	movs	r0, #16
 800f998:	f7fe fbaa 	bl	800e0f0 <malloc>
 800f99c:	4602      	mov	r2, r0
 800f99e:	6268      	str	r0, [r5, #36]	; 0x24
 800f9a0:	b920      	cbnz	r0, 800f9ac <_Bfree+0x20>
 800f9a2:	218a      	movs	r1, #138	; 0x8a
 800f9a4:	4b08      	ldr	r3, [pc, #32]	; (800f9c8 <_Bfree+0x3c>)
 800f9a6:	4809      	ldr	r0, [pc, #36]	; (800f9cc <_Bfree+0x40>)
 800f9a8:	f000 fcc2 	bl	8010330 <__assert_func>
 800f9ac:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f9b0:	6006      	str	r6, [r0, #0]
 800f9b2:	60c6      	str	r6, [r0, #12]
 800f9b4:	b13c      	cbz	r4, 800f9c6 <_Bfree+0x3a>
 800f9b6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800f9b8:	6862      	ldr	r2, [r4, #4]
 800f9ba:	68db      	ldr	r3, [r3, #12]
 800f9bc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800f9c0:	6021      	str	r1, [r4, #0]
 800f9c2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800f9c6:	bd70      	pop	{r4, r5, r6, pc}
 800f9c8:	080119d5 	.word	0x080119d5
 800f9cc:	08011a5c 	.word	0x08011a5c

0800f9d0 <__multadd>:
 800f9d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f9d4:	4698      	mov	r8, r3
 800f9d6:	460c      	mov	r4, r1
 800f9d8:	2300      	movs	r3, #0
 800f9da:	690e      	ldr	r6, [r1, #16]
 800f9dc:	4607      	mov	r7, r0
 800f9de:	f101 0014 	add.w	r0, r1, #20
 800f9e2:	6805      	ldr	r5, [r0, #0]
 800f9e4:	3301      	adds	r3, #1
 800f9e6:	b2a9      	uxth	r1, r5
 800f9e8:	fb02 8101 	mla	r1, r2, r1, r8
 800f9ec:	0c2d      	lsrs	r5, r5, #16
 800f9ee:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800f9f2:	fb02 c505 	mla	r5, r2, r5, ip
 800f9f6:	b289      	uxth	r1, r1
 800f9f8:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800f9fc:	429e      	cmp	r6, r3
 800f9fe:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800fa02:	f840 1b04 	str.w	r1, [r0], #4
 800fa06:	dcec      	bgt.n	800f9e2 <__multadd+0x12>
 800fa08:	f1b8 0f00 	cmp.w	r8, #0
 800fa0c:	d022      	beq.n	800fa54 <__multadd+0x84>
 800fa0e:	68a3      	ldr	r3, [r4, #8]
 800fa10:	42b3      	cmp	r3, r6
 800fa12:	dc19      	bgt.n	800fa48 <__multadd+0x78>
 800fa14:	6861      	ldr	r1, [r4, #4]
 800fa16:	4638      	mov	r0, r7
 800fa18:	3101      	adds	r1, #1
 800fa1a:	f7ff ff77 	bl	800f90c <_Balloc>
 800fa1e:	4605      	mov	r5, r0
 800fa20:	b928      	cbnz	r0, 800fa2e <__multadd+0x5e>
 800fa22:	4602      	mov	r2, r0
 800fa24:	21b5      	movs	r1, #181	; 0xb5
 800fa26:	4b0d      	ldr	r3, [pc, #52]	; (800fa5c <__multadd+0x8c>)
 800fa28:	480d      	ldr	r0, [pc, #52]	; (800fa60 <__multadd+0x90>)
 800fa2a:	f000 fc81 	bl	8010330 <__assert_func>
 800fa2e:	6922      	ldr	r2, [r4, #16]
 800fa30:	f104 010c 	add.w	r1, r4, #12
 800fa34:	3202      	adds	r2, #2
 800fa36:	0092      	lsls	r2, r2, #2
 800fa38:	300c      	adds	r0, #12
 800fa3a:	f7ff ff4d 	bl	800f8d8 <memcpy>
 800fa3e:	4621      	mov	r1, r4
 800fa40:	4638      	mov	r0, r7
 800fa42:	f7ff ffa3 	bl	800f98c <_Bfree>
 800fa46:	462c      	mov	r4, r5
 800fa48:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800fa4c:	3601      	adds	r6, #1
 800fa4e:	f8c3 8014 	str.w	r8, [r3, #20]
 800fa52:	6126      	str	r6, [r4, #16]
 800fa54:	4620      	mov	r0, r4
 800fa56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fa5a:	bf00      	nop
 800fa5c:	08011a4b 	.word	0x08011a4b
 800fa60:	08011a5c 	.word	0x08011a5c

0800fa64 <__hi0bits>:
 800fa64:	0c02      	lsrs	r2, r0, #16
 800fa66:	0412      	lsls	r2, r2, #16
 800fa68:	4603      	mov	r3, r0
 800fa6a:	b9ca      	cbnz	r2, 800faa0 <__hi0bits+0x3c>
 800fa6c:	0403      	lsls	r3, r0, #16
 800fa6e:	2010      	movs	r0, #16
 800fa70:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800fa74:	bf04      	itt	eq
 800fa76:	021b      	lsleq	r3, r3, #8
 800fa78:	3008      	addeq	r0, #8
 800fa7a:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800fa7e:	bf04      	itt	eq
 800fa80:	011b      	lsleq	r3, r3, #4
 800fa82:	3004      	addeq	r0, #4
 800fa84:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800fa88:	bf04      	itt	eq
 800fa8a:	009b      	lsleq	r3, r3, #2
 800fa8c:	3002      	addeq	r0, #2
 800fa8e:	2b00      	cmp	r3, #0
 800fa90:	db05      	blt.n	800fa9e <__hi0bits+0x3a>
 800fa92:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800fa96:	f100 0001 	add.w	r0, r0, #1
 800fa9a:	bf08      	it	eq
 800fa9c:	2020      	moveq	r0, #32
 800fa9e:	4770      	bx	lr
 800faa0:	2000      	movs	r0, #0
 800faa2:	e7e5      	b.n	800fa70 <__hi0bits+0xc>

0800faa4 <__lo0bits>:
 800faa4:	6803      	ldr	r3, [r0, #0]
 800faa6:	4602      	mov	r2, r0
 800faa8:	f013 0007 	ands.w	r0, r3, #7
 800faac:	d00b      	beq.n	800fac6 <__lo0bits+0x22>
 800faae:	07d9      	lsls	r1, r3, #31
 800fab0:	d422      	bmi.n	800faf8 <__lo0bits+0x54>
 800fab2:	0798      	lsls	r0, r3, #30
 800fab4:	bf49      	itett	mi
 800fab6:	085b      	lsrmi	r3, r3, #1
 800fab8:	089b      	lsrpl	r3, r3, #2
 800faba:	2001      	movmi	r0, #1
 800fabc:	6013      	strmi	r3, [r2, #0]
 800fabe:	bf5c      	itt	pl
 800fac0:	2002      	movpl	r0, #2
 800fac2:	6013      	strpl	r3, [r2, #0]
 800fac4:	4770      	bx	lr
 800fac6:	b299      	uxth	r1, r3
 800fac8:	b909      	cbnz	r1, 800face <__lo0bits+0x2a>
 800faca:	2010      	movs	r0, #16
 800facc:	0c1b      	lsrs	r3, r3, #16
 800face:	f013 0fff 	tst.w	r3, #255	; 0xff
 800fad2:	bf04      	itt	eq
 800fad4:	0a1b      	lsreq	r3, r3, #8
 800fad6:	3008      	addeq	r0, #8
 800fad8:	0719      	lsls	r1, r3, #28
 800fada:	bf04      	itt	eq
 800fadc:	091b      	lsreq	r3, r3, #4
 800fade:	3004      	addeq	r0, #4
 800fae0:	0799      	lsls	r1, r3, #30
 800fae2:	bf04      	itt	eq
 800fae4:	089b      	lsreq	r3, r3, #2
 800fae6:	3002      	addeq	r0, #2
 800fae8:	07d9      	lsls	r1, r3, #31
 800faea:	d403      	bmi.n	800faf4 <__lo0bits+0x50>
 800faec:	085b      	lsrs	r3, r3, #1
 800faee:	f100 0001 	add.w	r0, r0, #1
 800faf2:	d003      	beq.n	800fafc <__lo0bits+0x58>
 800faf4:	6013      	str	r3, [r2, #0]
 800faf6:	4770      	bx	lr
 800faf8:	2000      	movs	r0, #0
 800fafa:	4770      	bx	lr
 800fafc:	2020      	movs	r0, #32
 800fafe:	4770      	bx	lr

0800fb00 <__i2b>:
 800fb00:	b510      	push	{r4, lr}
 800fb02:	460c      	mov	r4, r1
 800fb04:	2101      	movs	r1, #1
 800fb06:	f7ff ff01 	bl	800f90c <_Balloc>
 800fb0a:	4602      	mov	r2, r0
 800fb0c:	b928      	cbnz	r0, 800fb1a <__i2b+0x1a>
 800fb0e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800fb12:	4b04      	ldr	r3, [pc, #16]	; (800fb24 <__i2b+0x24>)
 800fb14:	4804      	ldr	r0, [pc, #16]	; (800fb28 <__i2b+0x28>)
 800fb16:	f000 fc0b 	bl	8010330 <__assert_func>
 800fb1a:	2301      	movs	r3, #1
 800fb1c:	6144      	str	r4, [r0, #20]
 800fb1e:	6103      	str	r3, [r0, #16]
 800fb20:	bd10      	pop	{r4, pc}
 800fb22:	bf00      	nop
 800fb24:	08011a4b 	.word	0x08011a4b
 800fb28:	08011a5c 	.word	0x08011a5c

0800fb2c <__multiply>:
 800fb2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fb30:	4614      	mov	r4, r2
 800fb32:	690a      	ldr	r2, [r1, #16]
 800fb34:	6923      	ldr	r3, [r4, #16]
 800fb36:	460d      	mov	r5, r1
 800fb38:	429a      	cmp	r2, r3
 800fb3a:	bfbe      	ittt	lt
 800fb3c:	460b      	movlt	r3, r1
 800fb3e:	4625      	movlt	r5, r4
 800fb40:	461c      	movlt	r4, r3
 800fb42:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800fb46:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800fb4a:	68ab      	ldr	r3, [r5, #8]
 800fb4c:	6869      	ldr	r1, [r5, #4]
 800fb4e:	eb0a 0709 	add.w	r7, sl, r9
 800fb52:	42bb      	cmp	r3, r7
 800fb54:	b085      	sub	sp, #20
 800fb56:	bfb8      	it	lt
 800fb58:	3101      	addlt	r1, #1
 800fb5a:	f7ff fed7 	bl	800f90c <_Balloc>
 800fb5e:	b930      	cbnz	r0, 800fb6e <__multiply+0x42>
 800fb60:	4602      	mov	r2, r0
 800fb62:	f240 115d 	movw	r1, #349	; 0x15d
 800fb66:	4b41      	ldr	r3, [pc, #260]	; (800fc6c <__multiply+0x140>)
 800fb68:	4841      	ldr	r0, [pc, #260]	; (800fc70 <__multiply+0x144>)
 800fb6a:	f000 fbe1 	bl	8010330 <__assert_func>
 800fb6e:	f100 0614 	add.w	r6, r0, #20
 800fb72:	4633      	mov	r3, r6
 800fb74:	2200      	movs	r2, #0
 800fb76:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800fb7a:	4543      	cmp	r3, r8
 800fb7c:	d31e      	bcc.n	800fbbc <__multiply+0x90>
 800fb7e:	f105 0c14 	add.w	ip, r5, #20
 800fb82:	f104 0314 	add.w	r3, r4, #20
 800fb86:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800fb8a:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800fb8e:	9202      	str	r2, [sp, #8]
 800fb90:	ebac 0205 	sub.w	r2, ip, r5
 800fb94:	3a15      	subs	r2, #21
 800fb96:	f022 0203 	bic.w	r2, r2, #3
 800fb9a:	3204      	adds	r2, #4
 800fb9c:	f105 0115 	add.w	r1, r5, #21
 800fba0:	458c      	cmp	ip, r1
 800fba2:	bf38      	it	cc
 800fba4:	2204      	movcc	r2, #4
 800fba6:	9201      	str	r2, [sp, #4]
 800fba8:	9a02      	ldr	r2, [sp, #8]
 800fbaa:	9303      	str	r3, [sp, #12]
 800fbac:	429a      	cmp	r2, r3
 800fbae:	d808      	bhi.n	800fbc2 <__multiply+0x96>
 800fbb0:	2f00      	cmp	r7, #0
 800fbb2:	dc55      	bgt.n	800fc60 <__multiply+0x134>
 800fbb4:	6107      	str	r7, [r0, #16]
 800fbb6:	b005      	add	sp, #20
 800fbb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fbbc:	f843 2b04 	str.w	r2, [r3], #4
 800fbc0:	e7db      	b.n	800fb7a <__multiply+0x4e>
 800fbc2:	f8b3 a000 	ldrh.w	sl, [r3]
 800fbc6:	f1ba 0f00 	cmp.w	sl, #0
 800fbca:	d020      	beq.n	800fc0e <__multiply+0xe2>
 800fbcc:	46b1      	mov	r9, r6
 800fbce:	2200      	movs	r2, #0
 800fbd0:	f105 0e14 	add.w	lr, r5, #20
 800fbd4:	f85e 4b04 	ldr.w	r4, [lr], #4
 800fbd8:	f8d9 b000 	ldr.w	fp, [r9]
 800fbdc:	b2a1      	uxth	r1, r4
 800fbde:	fa1f fb8b 	uxth.w	fp, fp
 800fbe2:	fb0a b101 	mla	r1, sl, r1, fp
 800fbe6:	4411      	add	r1, r2
 800fbe8:	f8d9 2000 	ldr.w	r2, [r9]
 800fbec:	0c24      	lsrs	r4, r4, #16
 800fbee:	0c12      	lsrs	r2, r2, #16
 800fbf0:	fb0a 2404 	mla	r4, sl, r4, r2
 800fbf4:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800fbf8:	b289      	uxth	r1, r1
 800fbfa:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800fbfe:	45f4      	cmp	ip, lr
 800fc00:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800fc04:	f849 1b04 	str.w	r1, [r9], #4
 800fc08:	d8e4      	bhi.n	800fbd4 <__multiply+0xa8>
 800fc0a:	9901      	ldr	r1, [sp, #4]
 800fc0c:	5072      	str	r2, [r6, r1]
 800fc0e:	9a03      	ldr	r2, [sp, #12]
 800fc10:	3304      	adds	r3, #4
 800fc12:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800fc16:	f1b9 0f00 	cmp.w	r9, #0
 800fc1a:	d01f      	beq.n	800fc5c <__multiply+0x130>
 800fc1c:	46b6      	mov	lr, r6
 800fc1e:	f04f 0a00 	mov.w	sl, #0
 800fc22:	6834      	ldr	r4, [r6, #0]
 800fc24:	f105 0114 	add.w	r1, r5, #20
 800fc28:	880a      	ldrh	r2, [r1, #0]
 800fc2a:	f8be b002 	ldrh.w	fp, [lr, #2]
 800fc2e:	b2a4      	uxth	r4, r4
 800fc30:	fb09 b202 	mla	r2, r9, r2, fp
 800fc34:	4492      	add	sl, r2
 800fc36:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800fc3a:	f84e 4b04 	str.w	r4, [lr], #4
 800fc3e:	f851 4b04 	ldr.w	r4, [r1], #4
 800fc42:	f8be 2000 	ldrh.w	r2, [lr]
 800fc46:	0c24      	lsrs	r4, r4, #16
 800fc48:	fb09 2404 	mla	r4, r9, r4, r2
 800fc4c:	458c      	cmp	ip, r1
 800fc4e:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800fc52:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800fc56:	d8e7      	bhi.n	800fc28 <__multiply+0xfc>
 800fc58:	9a01      	ldr	r2, [sp, #4]
 800fc5a:	50b4      	str	r4, [r6, r2]
 800fc5c:	3604      	adds	r6, #4
 800fc5e:	e7a3      	b.n	800fba8 <__multiply+0x7c>
 800fc60:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800fc64:	2b00      	cmp	r3, #0
 800fc66:	d1a5      	bne.n	800fbb4 <__multiply+0x88>
 800fc68:	3f01      	subs	r7, #1
 800fc6a:	e7a1      	b.n	800fbb0 <__multiply+0x84>
 800fc6c:	08011a4b 	.word	0x08011a4b
 800fc70:	08011a5c 	.word	0x08011a5c

0800fc74 <__pow5mult>:
 800fc74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fc78:	4615      	mov	r5, r2
 800fc7a:	f012 0203 	ands.w	r2, r2, #3
 800fc7e:	4606      	mov	r6, r0
 800fc80:	460f      	mov	r7, r1
 800fc82:	d007      	beq.n	800fc94 <__pow5mult+0x20>
 800fc84:	4c25      	ldr	r4, [pc, #148]	; (800fd1c <__pow5mult+0xa8>)
 800fc86:	3a01      	subs	r2, #1
 800fc88:	2300      	movs	r3, #0
 800fc8a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800fc8e:	f7ff fe9f 	bl	800f9d0 <__multadd>
 800fc92:	4607      	mov	r7, r0
 800fc94:	10ad      	asrs	r5, r5, #2
 800fc96:	d03d      	beq.n	800fd14 <__pow5mult+0xa0>
 800fc98:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800fc9a:	b97c      	cbnz	r4, 800fcbc <__pow5mult+0x48>
 800fc9c:	2010      	movs	r0, #16
 800fc9e:	f7fe fa27 	bl	800e0f0 <malloc>
 800fca2:	4602      	mov	r2, r0
 800fca4:	6270      	str	r0, [r6, #36]	; 0x24
 800fca6:	b928      	cbnz	r0, 800fcb4 <__pow5mult+0x40>
 800fca8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800fcac:	4b1c      	ldr	r3, [pc, #112]	; (800fd20 <__pow5mult+0xac>)
 800fcae:	481d      	ldr	r0, [pc, #116]	; (800fd24 <__pow5mult+0xb0>)
 800fcb0:	f000 fb3e 	bl	8010330 <__assert_func>
 800fcb4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800fcb8:	6004      	str	r4, [r0, #0]
 800fcba:	60c4      	str	r4, [r0, #12]
 800fcbc:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800fcc0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800fcc4:	b94c      	cbnz	r4, 800fcda <__pow5mult+0x66>
 800fcc6:	f240 2171 	movw	r1, #625	; 0x271
 800fcca:	4630      	mov	r0, r6
 800fccc:	f7ff ff18 	bl	800fb00 <__i2b>
 800fcd0:	2300      	movs	r3, #0
 800fcd2:	4604      	mov	r4, r0
 800fcd4:	f8c8 0008 	str.w	r0, [r8, #8]
 800fcd8:	6003      	str	r3, [r0, #0]
 800fcda:	f04f 0900 	mov.w	r9, #0
 800fcde:	07eb      	lsls	r3, r5, #31
 800fce0:	d50a      	bpl.n	800fcf8 <__pow5mult+0x84>
 800fce2:	4639      	mov	r1, r7
 800fce4:	4622      	mov	r2, r4
 800fce6:	4630      	mov	r0, r6
 800fce8:	f7ff ff20 	bl	800fb2c <__multiply>
 800fcec:	4680      	mov	r8, r0
 800fcee:	4639      	mov	r1, r7
 800fcf0:	4630      	mov	r0, r6
 800fcf2:	f7ff fe4b 	bl	800f98c <_Bfree>
 800fcf6:	4647      	mov	r7, r8
 800fcf8:	106d      	asrs	r5, r5, #1
 800fcfa:	d00b      	beq.n	800fd14 <__pow5mult+0xa0>
 800fcfc:	6820      	ldr	r0, [r4, #0]
 800fcfe:	b938      	cbnz	r0, 800fd10 <__pow5mult+0x9c>
 800fd00:	4622      	mov	r2, r4
 800fd02:	4621      	mov	r1, r4
 800fd04:	4630      	mov	r0, r6
 800fd06:	f7ff ff11 	bl	800fb2c <__multiply>
 800fd0a:	6020      	str	r0, [r4, #0]
 800fd0c:	f8c0 9000 	str.w	r9, [r0]
 800fd10:	4604      	mov	r4, r0
 800fd12:	e7e4      	b.n	800fcde <__pow5mult+0x6a>
 800fd14:	4638      	mov	r0, r7
 800fd16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fd1a:	bf00      	nop
 800fd1c:	08011bb0 	.word	0x08011bb0
 800fd20:	080119d5 	.word	0x080119d5
 800fd24:	08011a5c 	.word	0x08011a5c

0800fd28 <__lshift>:
 800fd28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fd2c:	460c      	mov	r4, r1
 800fd2e:	4607      	mov	r7, r0
 800fd30:	4691      	mov	r9, r2
 800fd32:	6923      	ldr	r3, [r4, #16]
 800fd34:	6849      	ldr	r1, [r1, #4]
 800fd36:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800fd3a:	68a3      	ldr	r3, [r4, #8]
 800fd3c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800fd40:	f108 0601 	add.w	r6, r8, #1
 800fd44:	42b3      	cmp	r3, r6
 800fd46:	db0b      	blt.n	800fd60 <__lshift+0x38>
 800fd48:	4638      	mov	r0, r7
 800fd4a:	f7ff fddf 	bl	800f90c <_Balloc>
 800fd4e:	4605      	mov	r5, r0
 800fd50:	b948      	cbnz	r0, 800fd66 <__lshift+0x3e>
 800fd52:	4602      	mov	r2, r0
 800fd54:	f240 11d9 	movw	r1, #473	; 0x1d9
 800fd58:	4b27      	ldr	r3, [pc, #156]	; (800fdf8 <__lshift+0xd0>)
 800fd5a:	4828      	ldr	r0, [pc, #160]	; (800fdfc <__lshift+0xd4>)
 800fd5c:	f000 fae8 	bl	8010330 <__assert_func>
 800fd60:	3101      	adds	r1, #1
 800fd62:	005b      	lsls	r3, r3, #1
 800fd64:	e7ee      	b.n	800fd44 <__lshift+0x1c>
 800fd66:	2300      	movs	r3, #0
 800fd68:	f100 0114 	add.w	r1, r0, #20
 800fd6c:	f100 0210 	add.w	r2, r0, #16
 800fd70:	4618      	mov	r0, r3
 800fd72:	4553      	cmp	r3, sl
 800fd74:	db33      	blt.n	800fdde <__lshift+0xb6>
 800fd76:	6920      	ldr	r0, [r4, #16]
 800fd78:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800fd7c:	f104 0314 	add.w	r3, r4, #20
 800fd80:	f019 091f 	ands.w	r9, r9, #31
 800fd84:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800fd88:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800fd8c:	d02b      	beq.n	800fde6 <__lshift+0xbe>
 800fd8e:	468a      	mov	sl, r1
 800fd90:	2200      	movs	r2, #0
 800fd92:	f1c9 0e20 	rsb	lr, r9, #32
 800fd96:	6818      	ldr	r0, [r3, #0]
 800fd98:	fa00 f009 	lsl.w	r0, r0, r9
 800fd9c:	4302      	orrs	r2, r0
 800fd9e:	f84a 2b04 	str.w	r2, [sl], #4
 800fda2:	f853 2b04 	ldr.w	r2, [r3], #4
 800fda6:	459c      	cmp	ip, r3
 800fda8:	fa22 f20e 	lsr.w	r2, r2, lr
 800fdac:	d8f3      	bhi.n	800fd96 <__lshift+0x6e>
 800fdae:	ebac 0304 	sub.w	r3, ip, r4
 800fdb2:	3b15      	subs	r3, #21
 800fdb4:	f023 0303 	bic.w	r3, r3, #3
 800fdb8:	3304      	adds	r3, #4
 800fdba:	f104 0015 	add.w	r0, r4, #21
 800fdbe:	4584      	cmp	ip, r0
 800fdc0:	bf38      	it	cc
 800fdc2:	2304      	movcc	r3, #4
 800fdc4:	50ca      	str	r2, [r1, r3]
 800fdc6:	b10a      	cbz	r2, 800fdcc <__lshift+0xa4>
 800fdc8:	f108 0602 	add.w	r6, r8, #2
 800fdcc:	3e01      	subs	r6, #1
 800fdce:	4638      	mov	r0, r7
 800fdd0:	4621      	mov	r1, r4
 800fdd2:	612e      	str	r6, [r5, #16]
 800fdd4:	f7ff fdda 	bl	800f98c <_Bfree>
 800fdd8:	4628      	mov	r0, r5
 800fdda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fdde:	f842 0f04 	str.w	r0, [r2, #4]!
 800fde2:	3301      	adds	r3, #1
 800fde4:	e7c5      	b.n	800fd72 <__lshift+0x4a>
 800fde6:	3904      	subs	r1, #4
 800fde8:	f853 2b04 	ldr.w	r2, [r3], #4
 800fdec:	459c      	cmp	ip, r3
 800fdee:	f841 2f04 	str.w	r2, [r1, #4]!
 800fdf2:	d8f9      	bhi.n	800fde8 <__lshift+0xc0>
 800fdf4:	e7ea      	b.n	800fdcc <__lshift+0xa4>
 800fdf6:	bf00      	nop
 800fdf8:	08011a4b 	.word	0x08011a4b
 800fdfc:	08011a5c 	.word	0x08011a5c

0800fe00 <__mcmp>:
 800fe00:	4603      	mov	r3, r0
 800fe02:	690a      	ldr	r2, [r1, #16]
 800fe04:	6900      	ldr	r0, [r0, #16]
 800fe06:	b530      	push	{r4, r5, lr}
 800fe08:	1a80      	subs	r0, r0, r2
 800fe0a:	d10d      	bne.n	800fe28 <__mcmp+0x28>
 800fe0c:	3314      	adds	r3, #20
 800fe0e:	3114      	adds	r1, #20
 800fe10:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800fe14:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800fe18:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800fe1c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800fe20:	4295      	cmp	r5, r2
 800fe22:	d002      	beq.n	800fe2a <__mcmp+0x2a>
 800fe24:	d304      	bcc.n	800fe30 <__mcmp+0x30>
 800fe26:	2001      	movs	r0, #1
 800fe28:	bd30      	pop	{r4, r5, pc}
 800fe2a:	42a3      	cmp	r3, r4
 800fe2c:	d3f4      	bcc.n	800fe18 <__mcmp+0x18>
 800fe2e:	e7fb      	b.n	800fe28 <__mcmp+0x28>
 800fe30:	f04f 30ff 	mov.w	r0, #4294967295
 800fe34:	e7f8      	b.n	800fe28 <__mcmp+0x28>
	...

0800fe38 <__mdiff>:
 800fe38:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fe3c:	460c      	mov	r4, r1
 800fe3e:	4606      	mov	r6, r0
 800fe40:	4611      	mov	r1, r2
 800fe42:	4620      	mov	r0, r4
 800fe44:	4692      	mov	sl, r2
 800fe46:	f7ff ffdb 	bl	800fe00 <__mcmp>
 800fe4a:	1e05      	subs	r5, r0, #0
 800fe4c:	d111      	bne.n	800fe72 <__mdiff+0x3a>
 800fe4e:	4629      	mov	r1, r5
 800fe50:	4630      	mov	r0, r6
 800fe52:	f7ff fd5b 	bl	800f90c <_Balloc>
 800fe56:	4602      	mov	r2, r0
 800fe58:	b928      	cbnz	r0, 800fe66 <__mdiff+0x2e>
 800fe5a:	f240 2132 	movw	r1, #562	; 0x232
 800fe5e:	4b3c      	ldr	r3, [pc, #240]	; (800ff50 <__mdiff+0x118>)
 800fe60:	483c      	ldr	r0, [pc, #240]	; (800ff54 <__mdiff+0x11c>)
 800fe62:	f000 fa65 	bl	8010330 <__assert_func>
 800fe66:	2301      	movs	r3, #1
 800fe68:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800fe6c:	4610      	mov	r0, r2
 800fe6e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fe72:	bfa4      	itt	ge
 800fe74:	4653      	movge	r3, sl
 800fe76:	46a2      	movge	sl, r4
 800fe78:	4630      	mov	r0, r6
 800fe7a:	f8da 1004 	ldr.w	r1, [sl, #4]
 800fe7e:	bfa6      	itte	ge
 800fe80:	461c      	movge	r4, r3
 800fe82:	2500      	movge	r5, #0
 800fe84:	2501      	movlt	r5, #1
 800fe86:	f7ff fd41 	bl	800f90c <_Balloc>
 800fe8a:	4602      	mov	r2, r0
 800fe8c:	b918      	cbnz	r0, 800fe96 <__mdiff+0x5e>
 800fe8e:	f44f 7110 	mov.w	r1, #576	; 0x240
 800fe92:	4b2f      	ldr	r3, [pc, #188]	; (800ff50 <__mdiff+0x118>)
 800fe94:	e7e4      	b.n	800fe60 <__mdiff+0x28>
 800fe96:	f100 0814 	add.w	r8, r0, #20
 800fe9a:	f8da 7010 	ldr.w	r7, [sl, #16]
 800fe9e:	60c5      	str	r5, [r0, #12]
 800fea0:	f04f 0c00 	mov.w	ip, #0
 800fea4:	f10a 0514 	add.w	r5, sl, #20
 800fea8:	f10a 0010 	add.w	r0, sl, #16
 800feac:	46c2      	mov	sl, r8
 800feae:	6926      	ldr	r6, [r4, #16]
 800feb0:	f104 0914 	add.w	r9, r4, #20
 800feb4:	eb05 0e87 	add.w	lr, r5, r7, lsl #2
 800feb8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800febc:	f850 bf04 	ldr.w	fp, [r0, #4]!
 800fec0:	f859 3b04 	ldr.w	r3, [r9], #4
 800fec4:	fa1f f18b 	uxth.w	r1, fp
 800fec8:	4461      	add	r1, ip
 800feca:	fa1f fc83 	uxth.w	ip, r3
 800fece:	0c1b      	lsrs	r3, r3, #16
 800fed0:	eba1 010c 	sub.w	r1, r1, ip
 800fed4:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800fed8:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800fedc:	b289      	uxth	r1, r1
 800fede:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800fee2:	454e      	cmp	r6, r9
 800fee4:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800fee8:	f84a 3b04 	str.w	r3, [sl], #4
 800feec:	d8e6      	bhi.n	800febc <__mdiff+0x84>
 800feee:	1b33      	subs	r3, r6, r4
 800fef0:	3b15      	subs	r3, #21
 800fef2:	f023 0303 	bic.w	r3, r3, #3
 800fef6:	3415      	adds	r4, #21
 800fef8:	3304      	adds	r3, #4
 800fefa:	42a6      	cmp	r6, r4
 800fefc:	bf38      	it	cc
 800fefe:	2304      	movcc	r3, #4
 800ff00:	441d      	add	r5, r3
 800ff02:	4443      	add	r3, r8
 800ff04:	461e      	mov	r6, r3
 800ff06:	462c      	mov	r4, r5
 800ff08:	4574      	cmp	r4, lr
 800ff0a:	d30e      	bcc.n	800ff2a <__mdiff+0xf2>
 800ff0c:	f10e 0103 	add.w	r1, lr, #3
 800ff10:	1b49      	subs	r1, r1, r5
 800ff12:	f021 0103 	bic.w	r1, r1, #3
 800ff16:	3d03      	subs	r5, #3
 800ff18:	45ae      	cmp	lr, r5
 800ff1a:	bf38      	it	cc
 800ff1c:	2100      	movcc	r1, #0
 800ff1e:	4419      	add	r1, r3
 800ff20:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 800ff24:	b18b      	cbz	r3, 800ff4a <__mdiff+0x112>
 800ff26:	6117      	str	r7, [r2, #16]
 800ff28:	e7a0      	b.n	800fe6c <__mdiff+0x34>
 800ff2a:	f854 8b04 	ldr.w	r8, [r4], #4
 800ff2e:	fa1f f188 	uxth.w	r1, r8
 800ff32:	4461      	add	r1, ip
 800ff34:	1408      	asrs	r0, r1, #16
 800ff36:	eb00 4018 	add.w	r0, r0, r8, lsr #16
 800ff3a:	b289      	uxth	r1, r1
 800ff3c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800ff40:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800ff44:	f846 1b04 	str.w	r1, [r6], #4
 800ff48:	e7de      	b.n	800ff08 <__mdiff+0xd0>
 800ff4a:	3f01      	subs	r7, #1
 800ff4c:	e7e8      	b.n	800ff20 <__mdiff+0xe8>
 800ff4e:	bf00      	nop
 800ff50:	08011a4b 	.word	0x08011a4b
 800ff54:	08011a5c 	.word	0x08011a5c

0800ff58 <__d2b>:
 800ff58:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800ff5c:	2101      	movs	r1, #1
 800ff5e:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 800ff62:	4690      	mov	r8, r2
 800ff64:	461d      	mov	r5, r3
 800ff66:	f7ff fcd1 	bl	800f90c <_Balloc>
 800ff6a:	4604      	mov	r4, r0
 800ff6c:	b930      	cbnz	r0, 800ff7c <__d2b+0x24>
 800ff6e:	4602      	mov	r2, r0
 800ff70:	f240 310a 	movw	r1, #778	; 0x30a
 800ff74:	4b24      	ldr	r3, [pc, #144]	; (8010008 <__d2b+0xb0>)
 800ff76:	4825      	ldr	r0, [pc, #148]	; (801000c <__d2b+0xb4>)
 800ff78:	f000 f9da 	bl	8010330 <__assert_func>
 800ff7c:	f3c5 0313 	ubfx	r3, r5, #0, #20
 800ff80:	f3c5 550a 	ubfx	r5, r5, #20, #11
 800ff84:	bb2d      	cbnz	r5, 800ffd2 <__d2b+0x7a>
 800ff86:	9301      	str	r3, [sp, #4]
 800ff88:	f1b8 0300 	subs.w	r3, r8, #0
 800ff8c:	d026      	beq.n	800ffdc <__d2b+0x84>
 800ff8e:	4668      	mov	r0, sp
 800ff90:	9300      	str	r3, [sp, #0]
 800ff92:	f7ff fd87 	bl	800faa4 <__lo0bits>
 800ff96:	9900      	ldr	r1, [sp, #0]
 800ff98:	b1f0      	cbz	r0, 800ffd8 <__d2b+0x80>
 800ff9a:	9a01      	ldr	r2, [sp, #4]
 800ff9c:	f1c0 0320 	rsb	r3, r0, #32
 800ffa0:	fa02 f303 	lsl.w	r3, r2, r3
 800ffa4:	430b      	orrs	r3, r1
 800ffa6:	40c2      	lsrs	r2, r0
 800ffa8:	6163      	str	r3, [r4, #20]
 800ffaa:	9201      	str	r2, [sp, #4]
 800ffac:	9b01      	ldr	r3, [sp, #4]
 800ffae:	2b00      	cmp	r3, #0
 800ffb0:	bf14      	ite	ne
 800ffb2:	2102      	movne	r1, #2
 800ffb4:	2101      	moveq	r1, #1
 800ffb6:	61a3      	str	r3, [r4, #24]
 800ffb8:	6121      	str	r1, [r4, #16]
 800ffba:	b1c5      	cbz	r5, 800ffee <__d2b+0x96>
 800ffbc:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800ffc0:	4405      	add	r5, r0
 800ffc2:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800ffc6:	603d      	str	r5, [r7, #0]
 800ffc8:	6030      	str	r0, [r6, #0]
 800ffca:	4620      	mov	r0, r4
 800ffcc:	b002      	add	sp, #8
 800ffce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ffd2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ffd6:	e7d6      	b.n	800ff86 <__d2b+0x2e>
 800ffd8:	6161      	str	r1, [r4, #20]
 800ffda:	e7e7      	b.n	800ffac <__d2b+0x54>
 800ffdc:	a801      	add	r0, sp, #4
 800ffde:	f7ff fd61 	bl	800faa4 <__lo0bits>
 800ffe2:	2101      	movs	r1, #1
 800ffe4:	9b01      	ldr	r3, [sp, #4]
 800ffe6:	6121      	str	r1, [r4, #16]
 800ffe8:	6163      	str	r3, [r4, #20]
 800ffea:	3020      	adds	r0, #32
 800ffec:	e7e5      	b.n	800ffba <__d2b+0x62>
 800ffee:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 800fff2:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800fff6:	6038      	str	r0, [r7, #0]
 800fff8:	6918      	ldr	r0, [r3, #16]
 800fffa:	f7ff fd33 	bl	800fa64 <__hi0bits>
 800fffe:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 8010002:	6031      	str	r1, [r6, #0]
 8010004:	e7e1      	b.n	800ffca <__d2b+0x72>
 8010006:	bf00      	nop
 8010008:	08011a4b 	.word	0x08011a4b
 801000c:	08011a5c 	.word	0x08011a5c

08010010 <_calloc_r>:
 8010010:	b538      	push	{r3, r4, r5, lr}
 8010012:	fb02 f501 	mul.w	r5, r2, r1
 8010016:	4629      	mov	r1, r5
 8010018:	f7fe f8dc 	bl	800e1d4 <_malloc_r>
 801001c:	4604      	mov	r4, r0
 801001e:	b118      	cbz	r0, 8010028 <_calloc_r+0x18>
 8010020:	462a      	mov	r2, r5
 8010022:	2100      	movs	r1, #0
 8010024:	f7fe f882 	bl	800e12c <memset>
 8010028:	4620      	mov	r0, r4
 801002a:	bd38      	pop	{r3, r4, r5, pc}

0801002c <_realloc_r>:
 801002c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801002e:	4607      	mov	r7, r0
 8010030:	4614      	mov	r4, r2
 8010032:	460e      	mov	r6, r1
 8010034:	b921      	cbnz	r1, 8010040 <_realloc_r+0x14>
 8010036:	4611      	mov	r1, r2
 8010038:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801003c:	f7fe b8ca 	b.w	800e1d4 <_malloc_r>
 8010040:	b922      	cbnz	r2, 801004c <_realloc_r+0x20>
 8010042:	f7fe f87b 	bl	800e13c <_free_r>
 8010046:	4625      	mov	r5, r4
 8010048:	4628      	mov	r0, r5
 801004a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801004c:	f000 f9cf 	bl	80103ee <_malloc_usable_size_r>
 8010050:	42a0      	cmp	r0, r4
 8010052:	d20f      	bcs.n	8010074 <_realloc_r+0x48>
 8010054:	4621      	mov	r1, r4
 8010056:	4638      	mov	r0, r7
 8010058:	f7fe f8bc 	bl	800e1d4 <_malloc_r>
 801005c:	4605      	mov	r5, r0
 801005e:	2800      	cmp	r0, #0
 8010060:	d0f2      	beq.n	8010048 <_realloc_r+0x1c>
 8010062:	4631      	mov	r1, r6
 8010064:	4622      	mov	r2, r4
 8010066:	f7ff fc37 	bl	800f8d8 <memcpy>
 801006a:	4631      	mov	r1, r6
 801006c:	4638      	mov	r0, r7
 801006e:	f7fe f865 	bl	800e13c <_free_r>
 8010072:	e7e9      	b.n	8010048 <_realloc_r+0x1c>
 8010074:	4635      	mov	r5, r6
 8010076:	e7e7      	b.n	8010048 <_realloc_r+0x1c>

08010078 <__ssputs_r>:
 8010078:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801007c:	688e      	ldr	r6, [r1, #8]
 801007e:	4682      	mov	sl, r0
 8010080:	429e      	cmp	r6, r3
 8010082:	460c      	mov	r4, r1
 8010084:	4690      	mov	r8, r2
 8010086:	461f      	mov	r7, r3
 8010088:	d838      	bhi.n	80100fc <__ssputs_r+0x84>
 801008a:	898a      	ldrh	r2, [r1, #12]
 801008c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8010090:	d032      	beq.n	80100f8 <__ssputs_r+0x80>
 8010092:	6825      	ldr	r5, [r4, #0]
 8010094:	6909      	ldr	r1, [r1, #16]
 8010096:	3301      	adds	r3, #1
 8010098:	eba5 0901 	sub.w	r9, r5, r1
 801009c:	6965      	ldr	r5, [r4, #20]
 801009e:	444b      	add	r3, r9
 80100a0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80100a4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80100a8:	106d      	asrs	r5, r5, #1
 80100aa:	429d      	cmp	r5, r3
 80100ac:	bf38      	it	cc
 80100ae:	461d      	movcc	r5, r3
 80100b0:	0553      	lsls	r3, r2, #21
 80100b2:	d531      	bpl.n	8010118 <__ssputs_r+0xa0>
 80100b4:	4629      	mov	r1, r5
 80100b6:	f7fe f88d 	bl	800e1d4 <_malloc_r>
 80100ba:	4606      	mov	r6, r0
 80100bc:	b950      	cbnz	r0, 80100d4 <__ssputs_r+0x5c>
 80100be:	230c      	movs	r3, #12
 80100c0:	f04f 30ff 	mov.w	r0, #4294967295
 80100c4:	f8ca 3000 	str.w	r3, [sl]
 80100c8:	89a3      	ldrh	r3, [r4, #12]
 80100ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80100ce:	81a3      	strh	r3, [r4, #12]
 80100d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80100d4:	464a      	mov	r2, r9
 80100d6:	6921      	ldr	r1, [r4, #16]
 80100d8:	f7ff fbfe 	bl	800f8d8 <memcpy>
 80100dc:	89a3      	ldrh	r3, [r4, #12]
 80100de:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80100e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80100e6:	81a3      	strh	r3, [r4, #12]
 80100e8:	6126      	str	r6, [r4, #16]
 80100ea:	444e      	add	r6, r9
 80100ec:	6026      	str	r6, [r4, #0]
 80100ee:	463e      	mov	r6, r7
 80100f0:	6165      	str	r5, [r4, #20]
 80100f2:	eba5 0509 	sub.w	r5, r5, r9
 80100f6:	60a5      	str	r5, [r4, #8]
 80100f8:	42be      	cmp	r6, r7
 80100fa:	d900      	bls.n	80100fe <__ssputs_r+0x86>
 80100fc:	463e      	mov	r6, r7
 80100fe:	4632      	mov	r2, r6
 8010100:	4641      	mov	r1, r8
 8010102:	6820      	ldr	r0, [r4, #0]
 8010104:	f000 f959 	bl	80103ba <memmove>
 8010108:	68a3      	ldr	r3, [r4, #8]
 801010a:	6822      	ldr	r2, [r4, #0]
 801010c:	1b9b      	subs	r3, r3, r6
 801010e:	4432      	add	r2, r6
 8010110:	2000      	movs	r0, #0
 8010112:	60a3      	str	r3, [r4, #8]
 8010114:	6022      	str	r2, [r4, #0]
 8010116:	e7db      	b.n	80100d0 <__ssputs_r+0x58>
 8010118:	462a      	mov	r2, r5
 801011a:	f7ff ff87 	bl	801002c <_realloc_r>
 801011e:	4606      	mov	r6, r0
 8010120:	2800      	cmp	r0, #0
 8010122:	d1e1      	bne.n	80100e8 <__ssputs_r+0x70>
 8010124:	4650      	mov	r0, sl
 8010126:	6921      	ldr	r1, [r4, #16]
 8010128:	f7fe f808 	bl	800e13c <_free_r>
 801012c:	e7c7      	b.n	80100be <__ssputs_r+0x46>
	...

08010130 <_svfiprintf_r>:
 8010130:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010134:	4698      	mov	r8, r3
 8010136:	898b      	ldrh	r3, [r1, #12]
 8010138:	4607      	mov	r7, r0
 801013a:	061b      	lsls	r3, r3, #24
 801013c:	460d      	mov	r5, r1
 801013e:	4614      	mov	r4, r2
 8010140:	b09d      	sub	sp, #116	; 0x74
 8010142:	d50e      	bpl.n	8010162 <_svfiprintf_r+0x32>
 8010144:	690b      	ldr	r3, [r1, #16]
 8010146:	b963      	cbnz	r3, 8010162 <_svfiprintf_r+0x32>
 8010148:	2140      	movs	r1, #64	; 0x40
 801014a:	f7fe f843 	bl	800e1d4 <_malloc_r>
 801014e:	6028      	str	r0, [r5, #0]
 8010150:	6128      	str	r0, [r5, #16]
 8010152:	b920      	cbnz	r0, 801015e <_svfiprintf_r+0x2e>
 8010154:	230c      	movs	r3, #12
 8010156:	603b      	str	r3, [r7, #0]
 8010158:	f04f 30ff 	mov.w	r0, #4294967295
 801015c:	e0d1      	b.n	8010302 <_svfiprintf_r+0x1d2>
 801015e:	2340      	movs	r3, #64	; 0x40
 8010160:	616b      	str	r3, [r5, #20]
 8010162:	2300      	movs	r3, #0
 8010164:	9309      	str	r3, [sp, #36]	; 0x24
 8010166:	2320      	movs	r3, #32
 8010168:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801016c:	2330      	movs	r3, #48	; 0x30
 801016e:	f04f 0901 	mov.w	r9, #1
 8010172:	f8cd 800c 	str.w	r8, [sp, #12]
 8010176:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 801031c <_svfiprintf_r+0x1ec>
 801017a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801017e:	4623      	mov	r3, r4
 8010180:	469a      	mov	sl, r3
 8010182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010186:	b10a      	cbz	r2, 801018c <_svfiprintf_r+0x5c>
 8010188:	2a25      	cmp	r2, #37	; 0x25
 801018a:	d1f9      	bne.n	8010180 <_svfiprintf_r+0x50>
 801018c:	ebba 0b04 	subs.w	fp, sl, r4
 8010190:	d00b      	beq.n	80101aa <_svfiprintf_r+0x7a>
 8010192:	465b      	mov	r3, fp
 8010194:	4622      	mov	r2, r4
 8010196:	4629      	mov	r1, r5
 8010198:	4638      	mov	r0, r7
 801019a:	f7ff ff6d 	bl	8010078 <__ssputs_r>
 801019e:	3001      	adds	r0, #1
 80101a0:	f000 80aa 	beq.w	80102f8 <_svfiprintf_r+0x1c8>
 80101a4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80101a6:	445a      	add	r2, fp
 80101a8:	9209      	str	r2, [sp, #36]	; 0x24
 80101aa:	f89a 3000 	ldrb.w	r3, [sl]
 80101ae:	2b00      	cmp	r3, #0
 80101b0:	f000 80a2 	beq.w	80102f8 <_svfiprintf_r+0x1c8>
 80101b4:	2300      	movs	r3, #0
 80101b6:	f04f 32ff 	mov.w	r2, #4294967295
 80101ba:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80101be:	f10a 0a01 	add.w	sl, sl, #1
 80101c2:	9304      	str	r3, [sp, #16]
 80101c4:	9307      	str	r3, [sp, #28]
 80101c6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80101ca:	931a      	str	r3, [sp, #104]	; 0x68
 80101cc:	4654      	mov	r4, sl
 80101ce:	2205      	movs	r2, #5
 80101d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80101d4:	4851      	ldr	r0, [pc, #324]	; (801031c <_svfiprintf_r+0x1ec>)
 80101d6:	f7ff fb71 	bl	800f8bc <memchr>
 80101da:	9a04      	ldr	r2, [sp, #16]
 80101dc:	b9d8      	cbnz	r0, 8010216 <_svfiprintf_r+0xe6>
 80101de:	06d0      	lsls	r0, r2, #27
 80101e0:	bf44      	itt	mi
 80101e2:	2320      	movmi	r3, #32
 80101e4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80101e8:	0711      	lsls	r1, r2, #28
 80101ea:	bf44      	itt	mi
 80101ec:	232b      	movmi	r3, #43	; 0x2b
 80101ee:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80101f2:	f89a 3000 	ldrb.w	r3, [sl]
 80101f6:	2b2a      	cmp	r3, #42	; 0x2a
 80101f8:	d015      	beq.n	8010226 <_svfiprintf_r+0xf6>
 80101fa:	4654      	mov	r4, sl
 80101fc:	2000      	movs	r0, #0
 80101fe:	f04f 0c0a 	mov.w	ip, #10
 8010202:	9a07      	ldr	r2, [sp, #28]
 8010204:	4621      	mov	r1, r4
 8010206:	f811 3b01 	ldrb.w	r3, [r1], #1
 801020a:	3b30      	subs	r3, #48	; 0x30
 801020c:	2b09      	cmp	r3, #9
 801020e:	d94e      	bls.n	80102ae <_svfiprintf_r+0x17e>
 8010210:	b1b0      	cbz	r0, 8010240 <_svfiprintf_r+0x110>
 8010212:	9207      	str	r2, [sp, #28]
 8010214:	e014      	b.n	8010240 <_svfiprintf_r+0x110>
 8010216:	eba0 0308 	sub.w	r3, r0, r8
 801021a:	fa09 f303 	lsl.w	r3, r9, r3
 801021e:	4313      	orrs	r3, r2
 8010220:	46a2      	mov	sl, r4
 8010222:	9304      	str	r3, [sp, #16]
 8010224:	e7d2      	b.n	80101cc <_svfiprintf_r+0x9c>
 8010226:	9b03      	ldr	r3, [sp, #12]
 8010228:	1d19      	adds	r1, r3, #4
 801022a:	681b      	ldr	r3, [r3, #0]
 801022c:	9103      	str	r1, [sp, #12]
 801022e:	2b00      	cmp	r3, #0
 8010230:	bfbb      	ittet	lt
 8010232:	425b      	neglt	r3, r3
 8010234:	f042 0202 	orrlt.w	r2, r2, #2
 8010238:	9307      	strge	r3, [sp, #28]
 801023a:	9307      	strlt	r3, [sp, #28]
 801023c:	bfb8      	it	lt
 801023e:	9204      	strlt	r2, [sp, #16]
 8010240:	7823      	ldrb	r3, [r4, #0]
 8010242:	2b2e      	cmp	r3, #46	; 0x2e
 8010244:	d10c      	bne.n	8010260 <_svfiprintf_r+0x130>
 8010246:	7863      	ldrb	r3, [r4, #1]
 8010248:	2b2a      	cmp	r3, #42	; 0x2a
 801024a:	d135      	bne.n	80102b8 <_svfiprintf_r+0x188>
 801024c:	9b03      	ldr	r3, [sp, #12]
 801024e:	3402      	adds	r4, #2
 8010250:	1d1a      	adds	r2, r3, #4
 8010252:	681b      	ldr	r3, [r3, #0]
 8010254:	9203      	str	r2, [sp, #12]
 8010256:	2b00      	cmp	r3, #0
 8010258:	bfb8      	it	lt
 801025a:	f04f 33ff 	movlt.w	r3, #4294967295
 801025e:	9305      	str	r3, [sp, #20]
 8010260:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 801032c <_svfiprintf_r+0x1fc>
 8010264:	2203      	movs	r2, #3
 8010266:	4650      	mov	r0, sl
 8010268:	7821      	ldrb	r1, [r4, #0]
 801026a:	f7ff fb27 	bl	800f8bc <memchr>
 801026e:	b140      	cbz	r0, 8010282 <_svfiprintf_r+0x152>
 8010270:	2340      	movs	r3, #64	; 0x40
 8010272:	eba0 000a 	sub.w	r0, r0, sl
 8010276:	fa03 f000 	lsl.w	r0, r3, r0
 801027a:	9b04      	ldr	r3, [sp, #16]
 801027c:	3401      	adds	r4, #1
 801027e:	4303      	orrs	r3, r0
 8010280:	9304      	str	r3, [sp, #16]
 8010282:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010286:	2206      	movs	r2, #6
 8010288:	4825      	ldr	r0, [pc, #148]	; (8010320 <_svfiprintf_r+0x1f0>)
 801028a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801028e:	f7ff fb15 	bl	800f8bc <memchr>
 8010292:	2800      	cmp	r0, #0
 8010294:	d038      	beq.n	8010308 <_svfiprintf_r+0x1d8>
 8010296:	4b23      	ldr	r3, [pc, #140]	; (8010324 <_svfiprintf_r+0x1f4>)
 8010298:	bb1b      	cbnz	r3, 80102e2 <_svfiprintf_r+0x1b2>
 801029a:	9b03      	ldr	r3, [sp, #12]
 801029c:	3307      	adds	r3, #7
 801029e:	f023 0307 	bic.w	r3, r3, #7
 80102a2:	3308      	adds	r3, #8
 80102a4:	9303      	str	r3, [sp, #12]
 80102a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80102a8:	4433      	add	r3, r6
 80102aa:	9309      	str	r3, [sp, #36]	; 0x24
 80102ac:	e767      	b.n	801017e <_svfiprintf_r+0x4e>
 80102ae:	460c      	mov	r4, r1
 80102b0:	2001      	movs	r0, #1
 80102b2:	fb0c 3202 	mla	r2, ip, r2, r3
 80102b6:	e7a5      	b.n	8010204 <_svfiprintf_r+0xd4>
 80102b8:	2300      	movs	r3, #0
 80102ba:	f04f 0c0a 	mov.w	ip, #10
 80102be:	4619      	mov	r1, r3
 80102c0:	3401      	adds	r4, #1
 80102c2:	9305      	str	r3, [sp, #20]
 80102c4:	4620      	mov	r0, r4
 80102c6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80102ca:	3a30      	subs	r2, #48	; 0x30
 80102cc:	2a09      	cmp	r2, #9
 80102ce:	d903      	bls.n	80102d8 <_svfiprintf_r+0x1a8>
 80102d0:	2b00      	cmp	r3, #0
 80102d2:	d0c5      	beq.n	8010260 <_svfiprintf_r+0x130>
 80102d4:	9105      	str	r1, [sp, #20]
 80102d6:	e7c3      	b.n	8010260 <_svfiprintf_r+0x130>
 80102d8:	4604      	mov	r4, r0
 80102da:	2301      	movs	r3, #1
 80102dc:	fb0c 2101 	mla	r1, ip, r1, r2
 80102e0:	e7f0      	b.n	80102c4 <_svfiprintf_r+0x194>
 80102e2:	ab03      	add	r3, sp, #12
 80102e4:	9300      	str	r3, [sp, #0]
 80102e6:	462a      	mov	r2, r5
 80102e8:	4638      	mov	r0, r7
 80102ea:	4b0f      	ldr	r3, [pc, #60]	; (8010328 <_svfiprintf_r+0x1f8>)
 80102ec:	a904      	add	r1, sp, #16
 80102ee:	f7fe f869 	bl	800e3c4 <_printf_float>
 80102f2:	1c42      	adds	r2, r0, #1
 80102f4:	4606      	mov	r6, r0
 80102f6:	d1d6      	bne.n	80102a6 <_svfiprintf_r+0x176>
 80102f8:	89ab      	ldrh	r3, [r5, #12]
 80102fa:	065b      	lsls	r3, r3, #25
 80102fc:	f53f af2c 	bmi.w	8010158 <_svfiprintf_r+0x28>
 8010300:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010302:	b01d      	add	sp, #116	; 0x74
 8010304:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010308:	ab03      	add	r3, sp, #12
 801030a:	9300      	str	r3, [sp, #0]
 801030c:	462a      	mov	r2, r5
 801030e:	4638      	mov	r0, r7
 8010310:	4b05      	ldr	r3, [pc, #20]	; (8010328 <_svfiprintf_r+0x1f8>)
 8010312:	a904      	add	r1, sp, #16
 8010314:	f7fe faf2 	bl	800e8fc <_printf_i>
 8010318:	e7eb      	b.n	80102f2 <_svfiprintf_r+0x1c2>
 801031a:	bf00      	nop
 801031c:	08011bbc 	.word	0x08011bbc
 8010320:	08011bc6 	.word	0x08011bc6
 8010324:	0800e3c5 	.word	0x0800e3c5
 8010328:	08010079 	.word	0x08010079
 801032c:	08011bc2 	.word	0x08011bc2

08010330 <__assert_func>:
 8010330:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8010332:	4614      	mov	r4, r2
 8010334:	461a      	mov	r2, r3
 8010336:	4b09      	ldr	r3, [pc, #36]	; (801035c <__assert_func+0x2c>)
 8010338:	4605      	mov	r5, r0
 801033a:	681b      	ldr	r3, [r3, #0]
 801033c:	68d8      	ldr	r0, [r3, #12]
 801033e:	b14c      	cbz	r4, 8010354 <__assert_func+0x24>
 8010340:	4b07      	ldr	r3, [pc, #28]	; (8010360 <__assert_func+0x30>)
 8010342:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8010346:	9100      	str	r1, [sp, #0]
 8010348:	462b      	mov	r3, r5
 801034a:	4906      	ldr	r1, [pc, #24]	; (8010364 <__assert_func+0x34>)
 801034c:	f000 f80e 	bl	801036c <fiprintf>
 8010350:	f000 fa7a 	bl	8010848 <abort>
 8010354:	4b04      	ldr	r3, [pc, #16]	; (8010368 <__assert_func+0x38>)
 8010356:	461c      	mov	r4, r3
 8010358:	e7f3      	b.n	8010342 <__assert_func+0x12>
 801035a:	bf00      	nop
 801035c:	20000188 	.word	0x20000188
 8010360:	08011bcd 	.word	0x08011bcd
 8010364:	08011bda 	.word	0x08011bda
 8010368:	08011c08 	.word	0x08011c08

0801036c <fiprintf>:
 801036c:	b40e      	push	{r1, r2, r3}
 801036e:	b503      	push	{r0, r1, lr}
 8010370:	4601      	mov	r1, r0
 8010372:	ab03      	add	r3, sp, #12
 8010374:	4805      	ldr	r0, [pc, #20]	; (801038c <fiprintf+0x20>)
 8010376:	f853 2b04 	ldr.w	r2, [r3], #4
 801037a:	6800      	ldr	r0, [r0, #0]
 801037c:	9301      	str	r3, [sp, #4]
 801037e:	f000 f865 	bl	801044c <_vfiprintf_r>
 8010382:	b002      	add	sp, #8
 8010384:	f85d eb04 	ldr.w	lr, [sp], #4
 8010388:	b003      	add	sp, #12
 801038a:	4770      	bx	lr
 801038c:	20000188 	.word	0x20000188

08010390 <__retarget_lock_init_recursive>:
 8010390:	4770      	bx	lr

08010392 <__retarget_lock_acquire_recursive>:
 8010392:	4770      	bx	lr

08010394 <__retarget_lock_release_recursive>:
 8010394:	4770      	bx	lr

08010396 <__ascii_mbtowc>:
 8010396:	b082      	sub	sp, #8
 8010398:	b901      	cbnz	r1, 801039c <__ascii_mbtowc+0x6>
 801039a:	a901      	add	r1, sp, #4
 801039c:	b142      	cbz	r2, 80103b0 <__ascii_mbtowc+0x1a>
 801039e:	b14b      	cbz	r3, 80103b4 <__ascii_mbtowc+0x1e>
 80103a0:	7813      	ldrb	r3, [r2, #0]
 80103a2:	600b      	str	r3, [r1, #0]
 80103a4:	7812      	ldrb	r2, [r2, #0]
 80103a6:	1e10      	subs	r0, r2, #0
 80103a8:	bf18      	it	ne
 80103aa:	2001      	movne	r0, #1
 80103ac:	b002      	add	sp, #8
 80103ae:	4770      	bx	lr
 80103b0:	4610      	mov	r0, r2
 80103b2:	e7fb      	b.n	80103ac <__ascii_mbtowc+0x16>
 80103b4:	f06f 0001 	mvn.w	r0, #1
 80103b8:	e7f8      	b.n	80103ac <__ascii_mbtowc+0x16>

080103ba <memmove>:
 80103ba:	4288      	cmp	r0, r1
 80103bc:	b510      	push	{r4, lr}
 80103be:	eb01 0402 	add.w	r4, r1, r2
 80103c2:	d902      	bls.n	80103ca <memmove+0x10>
 80103c4:	4284      	cmp	r4, r0
 80103c6:	4623      	mov	r3, r4
 80103c8:	d807      	bhi.n	80103da <memmove+0x20>
 80103ca:	1e43      	subs	r3, r0, #1
 80103cc:	42a1      	cmp	r1, r4
 80103ce:	d008      	beq.n	80103e2 <memmove+0x28>
 80103d0:	f811 2b01 	ldrb.w	r2, [r1], #1
 80103d4:	f803 2f01 	strb.w	r2, [r3, #1]!
 80103d8:	e7f8      	b.n	80103cc <memmove+0x12>
 80103da:	4601      	mov	r1, r0
 80103dc:	4402      	add	r2, r0
 80103de:	428a      	cmp	r2, r1
 80103e0:	d100      	bne.n	80103e4 <memmove+0x2a>
 80103e2:	bd10      	pop	{r4, pc}
 80103e4:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80103e8:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80103ec:	e7f7      	b.n	80103de <memmove+0x24>

080103ee <_malloc_usable_size_r>:
 80103ee:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80103f2:	1f18      	subs	r0, r3, #4
 80103f4:	2b00      	cmp	r3, #0
 80103f6:	bfbc      	itt	lt
 80103f8:	580b      	ldrlt	r3, [r1, r0]
 80103fa:	18c0      	addlt	r0, r0, r3
 80103fc:	4770      	bx	lr

080103fe <__sfputc_r>:
 80103fe:	6893      	ldr	r3, [r2, #8]
 8010400:	b410      	push	{r4}
 8010402:	3b01      	subs	r3, #1
 8010404:	2b00      	cmp	r3, #0
 8010406:	6093      	str	r3, [r2, #8]
 8010408:	da07      	bge.n	801041a <__sfputc_r+0x1c>
 801040a:	6994      	ldr	r4, [r2, #24]
 801040c:	42a3      	cmp	r3, r4
 801040e:	db01      	blt.n	8010414 <__sfputc_r+0x16>
 8010410:	290a      	cmp	r1, #10
 8010412:	d102      	bne.n	801041a <__sfputc_r+0x1c>
 8010414:	bc10      	pop	{r4}
 8010416:	f000 b949 	b.w	80106ac <__swbuf_r>
 801041a:	6813      	ldr	r3, [r2, #0]
 801041c:	1c58      	adds	r0, r3, #1
 801041e:	6010      	str	r0, [r2, #0]
 8010420:	7019      	strb	r1, [r3, #0]
 8010422:	4608      	mov	r0, r1
 8010424:	bc10      	pop	{r4}
 8010426:	4770      	bx	lr

08010428 <__sfputs_r>:
 8010428:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801042a:	4606      	mov	r6, r0
 801042c:	460f      	mov	r7, r1
 801042e:	4614      	mov	r4, r2
 8010430:	18d5      	adds	r5, r2, r3
 8010432:	42ac      	cmp	r4, r5
 8010434:	d101      	bne.n	801043a <__sfputs_r+0x12>
 8010436:	2000      	movs	r0, #0
 8010438:	e007      	b.n	801044a <__sfputs_r+0x22>
 801043a:	463a      	mov	r2, r7
 801043c:	4630      	mov	r0, r6
 801043e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010442:	f7ff ffdc 	bl	80103fe <__sfputc_r>
 8010446:	1c43      	adds	r3, r0, #1
 8010448:	d1f3      	bne.n	8010432 <__sfputs_r+0xa>
 801044a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801044c <_vfiprintf_r>:
 801044c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010450:	460d      	mov	r5, r1
 8010452:	4614      	mov	r4, r2
 8010454:	4698      	mov	r8, r3
 8010456:	4606      	mov	r6, r0
 8010458:	b09d      	sub	sp, #116	; 0x74
 801045a:	b118      	cbz	r0, 8010464 <_vfiprintf_r+0x18>
 801045c:	6983      	ldr	r3, [r0, #24]
 801045e:	b90b      	cbnz	r3, 8010464 <_vfiprintf_r+0x18>
 8010460:	f000 fb14 	bl	8010a8c <__sinit>
 8010464:	4b89      	ldr	r3, [pc, #548]	; (801068c <_vfiprintf_r+0x240>)
 8010466:	429d      	cmp	r5, r3
 8010468:	d11b      	bne.n	80104a2 <_vfiprintf_r+0x56>
 801046a:	6875      	ldr	r5, [r6, #4]
 801046c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801046e:	07d9      	lsls	r1, r3, #31
 8010470:	d405      	bmi.n	801047e <_vfiprintf_r+0x32>
 8010472:	89ab      	ldrh	r3, [r5, #12]
 8010474:	059a      	lsls	r2, r3, #22
 8010476:	d402      	bmi.n	801047e <_vfiprintf_r+0x32>
 8010478:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801047a:	f7ff ff8a 	bl	8010392 <__retarget_lock_acquire_recursive>
 801047e:	89ab      	ldrh	r3, [r5, #12]
 8010480:	071b      	lsls	r3, r3, #28
 8010482:	d501      	bpl.n	8010488 <_vfiprintf_r+0x3c>
 8010484:	692b      	ldr	r3, [r5, #16]
 8010486:	b9eb      	cbnz	r3, 80104c4 <_vfiprintf_r+0x78>
 8010488:	4629      	mov	r1, r5
 801048a:	4630      	mov	r0, r6
 801048c:	f000 f96e 	bl	801076c <__swsetup_r>
 8010490:	b1c0      	cbz	r0, 80104c4 <_vfiprintf_r+0x78>
 8010492:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010494:	07dc      	lsls	r4, r3, #31
 8010496:	d50e      	bpl.n	80104b6 <_vfiprintf_r+0x6a>
 8010498:	f04f 30ff 	mov.w	r0, #4294967295
 801049c:	b01d      	add	sp, #116	; 0x74
 801049e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80104a2:	4b7b      	ldr	r3, [pc, #492]	; (8010690 <_vfiprintf_r+0x244>)
 80104a4:	429d      	cmp	r5, r3
 80104a6:	d101      	bne.n	80104ac <_vfiprintf_r+0x60>
 80104a8:	68b5      	ldr	r5, [r6, #8]
 80104aa:	e7df      	b.n	801046c <_vfiprintf_r+0x20>
 80104ac:	4b79      	ldr	r3, [pc, #484]	; (8010694 <_vfiprintf_r+0x248>)
 80104ae:	429d      	cmp	r5, r3
 80104b0:	bf08      	it	eq
 80104b2:	68f5      	ldreq	r5, [r6, #12]
 80104b4:	e7da      	b.n	801046c <_vfiprintf_r+0x20>
 80104b6:	89ab      	ldrh	r3, [r5, #12]
 80104b8:	0598      	lsls	r0, r3, #22
 80104ba:	d4ed      	bmi.n	8010498 <_vfiprintf_r+0x4c>
 80104bc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80104be:	f7ff ff69 	bl	8010394 <__retarget_lock_release_recursive>
 80104c2:	e7e9      	b.n	8010498 <_vfiprintf_r+0x4c>
 80104c4:	2300      	movs	r3, #0
 80104c6:	9309      	str	r3, [sp, #36]	; 0x24
 80104c8:	2320      	movs	r3, #32
 80104ca:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80104ce:	2330      	movs	r3, #48	; 0x30
 80104d0:	f04f 0901 	mov.w	r9, #1
 80104d4:	f8cd 800c 	str.w	r8, [sp, #12]
 80104d8:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8010698 <_vfiprintf_r+0x24c>
 80104dc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80104e0:	4623      	mov	r3, r4
 80104e2:	469a      	mov	sl, r3
 80104e4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80104e8:	b10a      	cbz	r2, 80104ee <_vfiprintf_r+0xa2>
 80104ea:	2a25      	cmp	r2, #37	; 0x25
 80104ec:	d1f9      	bne.n	80104e2 <_vfiprintf_r+0x96>
 80104ee:	ebba 0b04 	subs.w	fp, sl, r4
 80104f2:	d00b      	beq.n	801050c <_vfiprintf_r+0xc0>
 80104f4:	465b      	mov	r3, fp
 80104f6:	4622      	mov	r2, r4
 80104f8:	4629      	mov	r1, r5
 80104fa:	4630      	mov	r0, r6
 80104fc:	f7ff ff94 	bl	8010428 <__sfputs_r>
 8010500:	3001      	adds	r0, #1
 8010502:	f000 80aa 	beq.w	801065a <_vfiprintf_r+0x20e>
 8010506:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010508:	445a      	add	r2, fp
 801050a:	9209      	str	r2, [sp, #36]	; 0x24
 801050c:	f89a 3000 	ldrb.w	r3, [sl]
 8010510:	2b00      	cmp	r3, #0
 8010512:	f000 80a2 	beq.w	801065a <_vfiprintf_r+0x20e>
 8010516:	2300      	movs	r3, #0
 8010518:	f04f 32ff 	mov.w	r2, #4294967295
 801051c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010520:	f10a 0a01 	add.w	sl, sl, #1
 8010524:	9304      	str	r3, [sp, #16]
 8010526:	9307      	str	r3, [sp, #28]
 8010528:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801052c:	931a      	str	r3, [sp, #104]	; 0x68
 801052e:	4654      	mov	r4, sl
 8010530:	2205      	movs	r2, #5
 8010532:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010536:	4858      	ldr	r0, [pc, #352]	; (8010698 <_vfiprintf_r+0x24c>)
 8010538:	f7ff f9c0 	bl	800f8bc <memchr>
 801053c:	9a04      	ldr	r2, [sp, #16]
 801053e:	b9d8      	cbnz	r0, 8010578 <_vfiprintf_r+0x12c>
 8010540:	06d1      	lsls	r1, r2, #27
 8010542:	bf44      	itt	mi
 8010544:	2320      	movmi	r3, #32
 8010546:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801054a:	0713      	lsls	r3, r2, #28
 801054c:	bf44      	itt	mi
 801054e:	232b      	movmi	r3, #43	; 0x2b
 8010550:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010554:	f89a 3000 	ldrb.w	r3, [sl]
 8010558:	2b2a      	cmp	r3, #42	; 0x2a
 801055a:	d015      	beq.n	8010588 <_vfiprintf_r+0x13c>
 801055c:	4654      	mov	r4, sl
 801055e:	2000      	movs	r0, #0
 8010560:	f04f 0c0a 	mov.w	ip, #10
 8010564:	9a07      	ldr	r2, [sp, #28]
 8010566:	4621      	mov	r1, r4
 8010568:	f811 3b01 	ldrb.w	r3, [r1], #1
 801056c:	3b30      	subs	r3, #48	; 0x30
 801056e:	2b09      	cmp	r3, #9
 8010570:	d94e      	bls.n	8010610 <_vfiprintf_r+0x1c4>
 8010572:	b1b0      	cbz	r0, 80105a2 <_vfiprintf_r+0x156>
 8010574:	9207      	str	r2, [sp, #28]
 8010576:	e014      	b.n	80105a2 <_vfiprintf_r+0x156>
 8010578:	eba0 0308 	sub.w	r3, r0, r8
 801057c:	fa09 f303 	lsl.w	r3, r9, r3
 8010580:	4313      	orrs	r3, r2
 8010582:	46a2      	mov	sl, r4
 8010584:	9304      	str	r3, [sp, #16]
 8010586:	e7d2      	b.n	801052e <_vfiprintf_r+0xe2>
 8010588:	9b03      	ldr	r3, [sp, #12]
 801058a:	1d19      	adds	r1, r3, #4
 801058c:	681b      	ldr	r3, [r3, #0]
 801058e:	9103      	str	r1, [sp, #12]
 8010590:	2b00      	cmp	r3, #0
 8010592:	bfbb      	ittet	lt
 8010594:	425b      	neglt	r3, r3
 8010596:	f042 0202 	orrlt.w	r2, r2, #2
 801059a:	9307      	strge	r3, [sp, #28]
 801059c:	9307      	strlt	r3, [sp, #28]
 801059e:	bfb8      	it	lt
 80105a0:	9204      	strlt	r2, [sp, #16]
 80105a2:	7823      	ldrb	r3, [r4, #0]
 80105a4:	2b2e      	cmp	r3, #46	; 0x2e
 80105a6:	d10c      	bne.n	80105c2 <_vfiprintf_r+0x176>
 80105a8:	7863      	ldrb	r3, [r4, #1]
 80105aa:	2b2a      	cmp	r3, #42	; 0x2a
 80105ac:	d135      	bne.n	801061a <_vfiprintf_r+0x1ce>
 80105ae:	9b03      	ldr	r3, [sp, #12]
 80105b0:	3402      	adds	r4, #2
 80105b2:	1d1a      	adds	r2, r3, #4
 80105b4:	681b      	ldr	r3, [r3, #0]
 80105b6:	9203      	str	r2, [sp, #12]
 80105b8:	2b00      	cmp	r3, #0
 80105ba:	bfb8      	it	lt
 80105bc:	f04f 33ff 	movlt.w	r3, #4294967295
 80105c0:	9305      	str	r3, [sp, #20]
 80105c2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80106a8 <_vfiprintf_r+0x25c>
 80105c6:	2203      	movs	r2, #3
 80105c8:	4650      	mov	r0, sl
 80105ca:	7821      	ldrb	r1, [r4, #0]
 80105cc:	f7ff f976 	bl	800f8bc <memchr>
 80105d0:	b140      	cbz	r0, 80105e4 <_vfiprintf_r+0x198>
 80105d2:	2340      	movs	r3, #64	; 0x40
 80105d4:	eba0 000a 	sub.w	r0, r0, sl
 80105d8:	fa03 f000 	lsl.w	r0, r3, r0
 80105dc:	9b04      	ldr	r3, [sp, #16]
 80105de:	3401      	adds	r4, #1
 80105e0:	4303      	orrs	r3, r0
 80105e2:	9304      	str	r3, [sp, #16]
 80105e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80105e8:	2206      	movs	r2, #6
 80105ea:	482c      	ldr	r0, [pc, #176]	; (801069c <_vfiprintf_r+0x250>)
 80105ec:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80105f0:	f7ff f964 	bl	800f8bc <memchr>
 80105f4:	2800      	cmp	r0, #0
 80105f6:	d03f      	beq.n	8010678 <_vfiprintf_r+0x22c>
 80105f8:	4b29      	ldr	r3, [pc, #164]	; (80106a0 <_vfiprintf_r+0x254>)
 80105fa:	bb1b      	cbnz	r3, 8010644 <_vfiprintf_r+0x1f8>
 80105fc:	9b03      	ldr	r3, [sp, #12]
 80105fe:	3307      	adds	r3, #7
 8010600:	f023 0307 	bic.w	r3, r3, #7
 8010604:	3308      	adds	r3, #8
 8010606:	9303      	str	r3, [sp, #12]
 8010608:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801060a:	443b      	add	r3, r7
 801060c:	9309      	str	r3, [sp, #36]	; 0x24
 801060e:	e767      	b.n	80104e0 <_vfiprintf_r+0x94>
 8010610:	460c      	mov	r4, r1
 8010612:	2001      	movs	r0, #1
 8010614:	fb0c 3202 	mla	r2, ip, r2, r3
 8010618:	e7a5      	b.n	8010566 <_vfiprintf_r+0x11a>
 801061a:	2300      	movs	r3, #0
 801061c:	f04f 0c0a 	mov.w	ip, #10
 8010620:	4619      	mov	r1, r3
 8010622:	3401      	adds	r4, #1
 8010624:	9305      	str	r3, [sp, #20]
 8010626:	4620      	mov	r0, r4
 8010628:	f810 2b01 	ldrb.w	r2, [r0], #1
 801062c:	3a30      	subs	r2, #48	; 0x30
 801062e:	2a09      	cmp	r2, #9
 8010630:	d903      	bls.n	801063a <_vfiprintf_r+0x1ee>
 8010632:	2b00      	cmp	r3, #0
 8010634:	d0c5      	beq.n	80105c2 <_vfiprintf_r+0x176>
 8010636:	9105      	str	r1, [sp, #20]
 8010638:	e7c3      	b.n	80105c2 <_vfiprintf_r+0x176>
 801063a:	4604      	mov	r4, r0
 801063c:	2301      	movs	r3, #1
 801063e:	fb0c 2101 	mla	r1, ip, r1, r2
 8010642:	e7f0      	b.n	8010626 <_vfiprintf_r+0x1da>
 8010644:	ab03      	add	r3, sp, #12
 8010646:	9300      	str	r3, [sp, #0]
 8010648:	462a      	mov	r2, r5
 801064a:	4630      	mov	r0, r6
 801064c:	4b15      	ldr	r3, [pc, #84]	; (80106a4 <_vfiprintf_r+0x258>)
 801064e:	a904      	add	r1, sp, #16
 8010650:	f7fd feb8 	bl	800e3c4 <_printf_float>
 8010654:	4607      	mov	r7, r0
 8010656:	1c78      	adds	r0, r7, #1
 8010658:	d1d6      	bne.n	8010608 <_vfiprintf_r+0x1bc>
 801065a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801065c:	07d9      	lsls	r1, r3, #31
 801065e:	d405      	bmi.n	801066c <_vfiprintf_r+0x220>
 8010660:	89ab      	ldrh	r3, [r5, #12]
 8010662:	059a      	lsls	r2, r3, #22
 8010664:	d402      	bmi.n	801066c <_vfiprintf_r+0x220>
 8010666:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010668:	f7ff fe94 	bl	8010394 <__retarget_lock_release_recursive>
 801066c:	89ab      	ldrh	r3, [r5, #12]
 801066e:	065b      	lsls	r3, r3, #25
 8010670:	f53f af12 	bmi.w	8010498 <_vfiprintf_r+0x4c>
 8010674:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010676:	e711      	b.n	801049c <_vfiprintf_r+0x50>
 8010678:	ab03      	add	r3, sp, #12
 801067a:	9300      	str	r3, [sp, #0]
 801067c:	462a      	mov	r2, r5
 801067e:	4630      	mov	r0, r6
 8010680:	4b08      	ldr	r3, [pc, #32]	; (80106a4 <_vfiprintf_r+0x258>)
 8010682:	a904      	add	r1, sp, #16
 8010684:	f7fe f93a 	bl	800e8fc <_printf_i>
 8010688:	e7e4      	b.n	8010654 <_vfiprintf_r+0x208>
 801068a:	bf00      	nop
 801068c:	08011d34 	.word	0x08011d34
 8010690:	08011d54 	.word	0x08011d54
 8010694:	08011d14 	.word	0x08011d14
 8010698:	08011bbc 	.word	0x08011bbc
 801069c:	08011bc6 	.word	0x08011bc6
 80106a0:	0800e3c5 	.word	0x0800e3c5
 80106a4:	08010429 	.word	0x08010429
 80106a8:	08011bc2 	.word	0x08011bc2

080106ac <__swbuf_r>:
 80106ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80106ae:	460e      	mov	r6, r1
 80106b0:	4614      	mov	r4, r2
 80106b2:	4605      	mov	r5, r0
 80106b4:	b118      	cbz	r0, 80106be <__swbuf_r+0x12>
 80106b6:	6983      	ldr	r3, [r0, #24]
 80106b8:	b90b      	cbnz	r3, 80106be <__swbuf_r+0x12>
 80106ba:	f000 f9e7 	bl	8010a8c <__sinit>
 80106be:	4b21      	ldr	r3, [pc, #132]	; (8010744 <__swbuf_r+0x98>)
 80106c0:	429c      	cmp	r4, r3
 80106c2:	d12b      	bne.n	801071c <__swbuf_r+0x70>
 80106c4:	686c      	ldr	r4, [r5, #4]
 80106c6:	69a3      	ldr	r3, [r4, #24]
 80106c8:	60a3      	str	r3, [r4, #8]
 80106ca:	89a3      	ldrh	r3, [r4, #12]
 80106cc:	071a      	lsls	r2, r3, #28
 80106ce:	d52f      	bpl.n	8010730 <__swbuf_r+0x84>
 80106d0:	6923      	ldr	r3, [r4, #16]
 80106d2:	b36b      	cbz	r3, 8010730 <__swbuf_r+0x84>
 80106d4:	6923      	ldr	r3, [r4, #16]
 80106d6:	6820      	ldr	r0, [r4, #0]
 80106d8:	b2f6      	uxtb	r6, r6
 80106da:	1ac0      	subs	r0, r0, r3
 80106dc:	6963      	ldr	r3, [r4, #20]
 80106de:	4637      	mov	r7, r6
 80106e0:	4283      	cmp	r3, r0
 80106e2:	dc04      	bgt.n	80106ee <__swbuf_r+0x42>
 80106e4:	4621      	mov	r1, r4
 80106e6:	4628      	mov	r0, r5
 80106e8:	f000 f93c 	bl	8010964 <_fflush_r>
 80106ec:	bb30      	cbnz	r0, 801073c <__swbuf_r+0x90>
 80106ee:	68a3      	ldr	r3, [r4, #8]
 80106f0:	3001      	adds	r0, #1
 80106f2:	3b01      	subs	r3, #1
 80106f4:	60a3      	str	r3, [r4, #8]
 80106f6:	6823      	ldr	r3, [r4, #0]
 80106f8:	1c5a      	adds	r2, r3, #1
 80106fa:	6022      	str	r2, [r4, #0]
 80106fc:	701e      	strb	r6, [r3, #0]
 80106fe:	6963      	ldr	r3, [r4, #20]
 8010700:	4283      	cmp	r3, r0
 8010702:	d004      	beq.n	801070e <__swbuf_r+0x62>
 8010704:	89a3      	ldrh	r3, [r4, #12]
 8010706:	07db      	lsls	r3, r3, #31
 8010708:	d506      	bpl.n	8010718 <__swbuf_r+0x6c>
 801070a:	2e0a      	cmp	r6, #10
 801070c:	d104      	bne.n	8010718 <__swbuf_r+0x6c>
 801070e:	4621      	mov	r1, r4
 8010710:	4628      	mov	r0, r5
 8010712:	f000 f927 	bl	8010964 <_fflush_r>
 8010716:	b988      	cbnz	r0, 801073c <__swbuf_r+0x90>
 8010718:	4638      	mov	r0, r7
 801071a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801071c:	4b0a      	ldr	r3, [pc, #40]	; (8010748 <__swbuf_r+0x9c>)
 801071e:	429c      	cmp	r4, r3
 8010720:	d101      	bne.n	8010726 <__swbuf_r+0x7a>
 8010722:	68ac      	ldr	r4, [r5, #8]
 8010724:	e7cf      	b.n	80106c6 <__swbuf_r+0x1a>
 8010726:	4b09      	ldr	r3, [pc, #36]	; (801074c <__swbuf_r+0xa0>)
 8010728:	429c      	cmp	r4, r3
 801072a:	bf08      	it	eq
 801072c:	68ec      	ldreq	r4, [r5, #12]
 801072e:	e7ca      	b.n	80106c6 <__swbuf_r+0x1a>
 8010730:	4621      	mov	r1, r4
 8010732:	4628      	mov	r0, r5
 8010734:	f000 f81a 	bl	801076c <__swsetup_r>
 8010738:	2800      	cmp	r0, #0
 801073a:	d0cb      	beq.n	80106d4 <__swbuf_r+0x28>
 801073c:	f04f 37ff 	mov.w	r7, #4294967295
 8010740:	e7ea      	b.n	8010718 <__swbuf_r+0x6c>
 8010742:	bf00      	nop
 8010744:	08011d34 	.word	0x08011d34
 8010748:	08011d54 	.word	0x08011d54
 801074c:	08011d14 	.word	0x08011d14

08010750 <__ascii_wctomb>:
 8010750:	4603      	mov	r3, r0
 8010752:	4608      	mov	r0, r1
 8010754:	b141      	cbz	r1, 8010768 <__ascii_wctomb+0x18>
 8010756:	2aff      	cmp	r2, #255	; 0xff
 8010758:	d904      	bls.n	8010764 <__ascii_wctomb+0x14>
 801075a:	228a      	movs	r2, #138	; 0x8a
 801075c:	f04f 30ff 	mov.w	r0, #4294967295
 8010760:	601a      	str	r2, [r3, #0]
 8010762:	4770      	bx	lr
 8010764:	2001      	movs	r0, #1
 8010766:	700a      	strb	r2, [r1, #0]
 8010768:	4770      	bx	lr
	...

0801076c <__swsetup_r>:
 801076c:	4b32      	ldr	r3, [pc, #200]	; (8010838 <__swsetup_r+0xcc>)
 801076e:	b570      	push	{r4, r5, r6, lr}
 8010770:	681d      	ldr	r5, [r3, #0]
 8010772:	4606      	mov	r6, r0
 8010774:	460c      	mov	r4, r1
 8010776:	b125      	cbz	r5, 8010782 <__swsetup_r+0x16>
 8010778:	69ab      	ldr	r3, [r5, #24]
 801077a:	b913      	cbnz	r3, 8010782 <__swsetup_r+0x16>
 801077c:	4628      	mov	r0, r5
 801077e:	f000 f985 	bl	8010a8c <__sinit>
 8010782:	4b2e      	ldr	r3, [pc, #184]	; (801083c <__swsetup_r+0xd0>)
 8010784:	429c      	cmp	r4, r3
 8010786:	d10f      	bne.n	80107a8 <__swsetup_r+0x3c>
 8010788:	686c      	ldr	r4, [r5, #4]
 801078a:	89a3      	ldrh	r3, [r4, #12]
 801078c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8010790:	0719      	lsls	r1, r3, #28
 8010792:	d42c      	bmi.n	80107ee <__swsetup_r+0x82>
 8010794:	06dd      	lsls	r5, r3, #27
 8010796:	d411      	bmi.n	80107bc <__swsetup_r+0x50>
 8010798:	2309      	movs	r3, #9
 801079a:	6033      	str	r3, [r6, #0]
 801079c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80107a0:	f04f 30ff 	mov.w	r0, #4294967295
 80107a4:	81a3      	strh	r3, [r4, #12]
 80107a6:	e03e      	b.n	8010826 <__swsetup_r+0xba>
 80107a8:	4b25      	ldr	r3, [pc, #148]	; (8010840 <__swsetup_r+0xd4>)
 80107aa:	429c      	cmp	r4, r3
 80107ac:	d101      	bne.n	80107b2 <__swsetup_r+0x46>
 80107ae:	68ac      	ldr	r4, [r5, #8]
 80107b0:	e7eb      	b.n	801078a <__swsetup_r+0x1e>
 80107b2:	4b24      	ldr	r3, [pc, #144]	; (8010844 <__swsetup_r+0xd8>)
 80107b4:	429c      	cmp	r4, r3
 80107b6:	bf08      	it	eq
 80107b8:	68ec      	ldreq	r4, [r5, #12]
 80107ba:	e7e6      	b.n	801078a <__swsetup_r+0x1e>
 80107bc:	0758      	lsls	r0, r3, #29
 80107be:	d512      	bpl.n	80107e6 <__swsetup_r+0x7a>
 80107c0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80107c2:	b141      	cbz	r1, 80107d6 <__swsetup_r+0x6a>
 80107c4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80107c8:	4299      	cmp	r1, r3
 80107ca:	d002      	beq.n	80107d2 <__swsetup_r+0x66>
 80107cc:	4630      	mov	r0, r6
 80107ce:	f7fd fcb5 	bl	800e13c <_free_r>
 80107d2:	2300      	movs	r3, #0
 80107d4:	6363      	str	r3, [r4, #52]	; 0x34
 80107d6:	89a3      	ldrh	r3, [r4, #12]
 80107d8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80107dc:	81a3      	strh	r3, [r4, #12]
 80107de:	2300      	movs	r3, #0
 80107e0:	6063      	str	r3, [r4, #4]
 80107e2:	6923      	ldr	r3, [r4, #16]
 80107e4:	6023      	str	r3, [r4, #0]
 80107e6:	89a3      	ldrh	r3, [r4, #12]
 80107e8:	f043 0308 	orr.w	r3, r3, #8
 80107ec:	81a3      	strh	r3, [r4, #12]
 80107ee:	6923      	ldr	r3, [r4, #16]
 80107f0:	b94b      	cbnz	r3, 8010806 <__swsetup_r+0x9a>
 80107f2:	89a3      	ldrh	r3, [r4, #12]
 80107f4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80107f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80107fc:	d003      	beq.n	8010806 <__swsetup_r+0x9a>
 80107fe:	4621      	mov	r1, r4
 8010800:	4630      	mov	r0, r6
 8010802:	f000 fa05 	bl	8010c10 <__smakebuf_r>
 8010806:	89a0      	ldrh	r0, [r4, #12]
 8010808:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801080c:	f010 0301 	ands.w	r3, r0, #1
 8010810:	d00a      	beq.n	8010828 <__swsetup_r+0xbc>
 8010812:	2300      	movs	r3, #0
 8010814:	60a3      	str	r3, [r4, #8]
 8010816:	6963      	ldr	r3, [r4, #20]
 8010818:	425b      	negs	r3, r3
 801081a:	61a3      	str	r3, [r4, #24]
 801081c:	6923      	ldr	r3, [r4, #16]
 801081e:	b943      	cbnz	r3, 8010832 <__swsetup_r+0xc6>
 8010820:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8010824:	d1ba      	bne.n	801079c <__swsetup_r+0x30>
 8010826:	bd70      	pop	{r4, r5, r6, pc}
 8010828:	0781      	lsls	r1, r0, #30
 801082a:	bf58      	it	pl
 801082c:	6963      	ldrpl	r3, [r4, #20]
 801082e:	60a3      	str	r3, [r4, #8]
 8010830:	e7f4      	b.n	801081c <__swsetup_r+0xb0>
 8010832:	2000      	movs	r0, #0
 8010834:	e7f7      	b.n	8010826 <__swsetup_r+0xba>
 8010836:	bf00      	nop
 8010838:	20000188 	.word	0x20000188
 801083c:	08011d34 	.word	0x08011d34
 8010840:	08011d54 	.word	0x08011d54
 8010844:	08011d14 	.word	0x08011d14

08010848 <abort>:
 8010848:	2006      	movs	r0, #6
 801084a:	b508      	push	{r3, lr}
 801084c:	f000 fa48 	bl	8010ce0 <raise>
 8010850:	2001      	movs	r0, #1
 8010852:	f7f3 fd94 	bl	800437e <_exit>
	...

08010858 <__sflush_r>:
 8010858:	898a      	ldrh	r2, [r1, #12]
 801085a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801085e:	4605      	mov	r5, r0
 8010860:	0710      	lsls	r0, r2, #28
 8010862:	460c      	mov	r4, r1
 8010864:	d458      	bmi.n	8010918 <__sflush_r+0xc0>
 8010866:	684b      	ldr	r3, [r1, #4]
 8010868:	2b00      	cmp	r3, #0
 801086a:	dc05      	bgt.n	8010878 <__sflush_r+0x20>
 801086c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801086e:	2b00      	cmp	r3, #0
 8010870:	dc02      	bgt.n	8010878 <__sflush_r+0x20>
 8010872:	2000      	movs	r0, #0
 8010874:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010878:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801087a:	2e00      	cmp	r6, #0
 801087c:	d0f9      	beq.n	8010872 <__sflush_r+0x1a>
 801087e:	2300      	movs	r3, #0
 8010880:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8010884:	682f      	ldr	r7, [r5, #0]
 8010886:	602b      	str	r3, [r5, #0]
 8010888:	d032      	beq.n	80108f0 <__sflush_r+0x98>
 801088a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801088c:	89a3      	ldrh	r3, [r4, #12]
 801088e:	075a      	lsls	r2, r3, #29
 8010890:	d505      	bpl.n	801089e <__sflush_r+0x46>
 8010892:	6863      	ldr	r3, [r4, #4]
 8010894:	1ac0      	subs	r0, r0, r3
 8010896:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8010898:	b10b      	cbz	r3, 801089e <__sflush_r+0x46>
 801089a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801089c:	1ac0      	subs	r0, r0, r3
 801089e:	2300      	movs	r3, #0
 80108a0:	4602      	mov	r2, r0
 80108a2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80108a4:	4628      	mov	r0, r5
 80108a6:	6a21      	ldr	r1, [r4, #32]
 80108a8:	47b0      	blx	r6
 80108aa:	1c43      	adds	r3, r0, #1
 80108ac:	89a3      	ldrh	r3, [r4, #12]
 80108ae:	d106      	bne.n	80108be <__sflush_r+0x66>
 80108b0:	6829      	ldr	r1, [r5, #0]
 80108b2:	291d      	cmp	r1, #29
 80108b4:	d82c      	bhi.n	8010910 <__sflush_r+0xb8>
 80108b6:	4a2a      	ldr	r2, [pc, #168]	; (8010960 <__sflush_r+0x108>)
 80108b8:	40ca      	lsrs	r2, r1
 80108ba:	07d6      	lsls	r6, r2, #31
 80108bc:	d528      	bpl.n	8010910 <__sflush_r+0xb8>
 80108be:	2200      	movs	r2, #0
 80108c0:	6062      	str	r2, [r4, #4]
 80108c2:	6922      	ldr	r2, [r4, #16]
 80108c4:	04d9      	lsls	r1, r3, #19
 80108c6:	6022      	str	r2, [r4, #0]
 80108c8:	d504      	bpl.n	80108d4 <__sflush_r+0x7c>
 80108ca:	1c42      	adds	r2, r0, #1
 80108cc:	d101      	bne.n	80108d2 <__sflush_r+0x7a>
 80108ce:	682b      	ldr	r3, [r5, #0]
 80108d0:	b903      	cbnz	r3, 80108d4 <__sflush_r+0x7c>
 80108d2:	6560      	str	r0, [r4, #84]	; 0x54
 80108d4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80108d6:	602f      	str	r7, [r5, #0]
 80108d8:	2900      	cmp	r1, #0
 80108da:	d0ca      	beq.n	8010872 <__sflush_r+0x1a>
 80108dc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80108e0:	4299      	cmp	r1, r3
 80108e2:	d002      	beq.n	80108ea <__sflush_r+0x92>
 80108e4:	4628      	mov	r0, r5
 80108e6:	f7fd fc29 	bl	800e13c <_free_r>
 80108ea:	2000      	movs	r0, #0
 80108ec:	6360      	str	r0, [r4, #52]	; 0x34
 80108ee:	e7c1      	b.n	8010874 <__sflush_r+0x1c>
 80108f0:	6a21      	ldr	r1, [r4, #32]
 80108f2:	2301      	movs	r3, #1
 80108f4:	4628      	mov	r0, r5
 80108f6:	47b0      	blx	r6
 80108f8:	1c41      	adds	r1, r0, #1
 80108fa:	d1c7      	bne.n	801088c <__sflush_r+0x34>
 80108fc:	682b      	ldr	r3, [r5, #0]
 80108fe:	2b00      	cmp	r3, #0
 8010900:	d0c4      	beq.n	801088c <__sflush_r+0x34>
 8010902:	2b1d      	cmp	r3, #29
 8010904:	d001      	beq.n	801090a <__sflush_r+0xb2>
 8010906:	2b16      	cmp	r3, #22
 8010908:	d101      	bne.n	801090e <__sflush_r+0xb6>
 801090a:	602f      	str	r7, [r5, #0]
 801090c:	e7b1      	b.n	8010872 <__sflush_r+0x1a>
 801090e:	89a3      	ldrh	r3, [r4, #12]
 8010910:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010914:	81a3      	strh	r3, [r4, #12]
 8010916:	e7ad      	b.n	8010874 <__sflush_r+0x1c>
 8010918:	690f      	ldr	r7, [r1, #16]
 801091a:	2f00      	cmp	r7, #0
 801091c:	d0a9      	beq.n	8010872 <__sflush_r+0x1a>
 801091e:	0793      	lsls	r3, r2, #30
 8010920:	bf18      	it	ne
 8010922:	2300      	movne	r3, #0
 8010924:	680e      	ldr	r6, [r1, #0]
 8010926:	bf08      	it	eq
 8010928:	694b      	ldreq	r3, [r1, #20]
 801092a:	eba6 0807 	sub.w	r8, r6, r7
 801092e:	600f      	str	r7, [r1, #0]
 8010930:	608b      	str	r3, [r1, #8]
 8010932:	f1b8 0f00 	cmp.w	r8, #0
 8010936:	dd9c      	ble.n	8010872 <__sflush_r+0x1a>
 8010938:	4643      	mov	r3, r8
 801093a:	463a      	mov	r2, r7
 801093c:	4628      	mov	r0, r5
 801093e:	6a21      	ldr	r1, [r4, #32]
 8010940:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8010942:	47b0      	blx	r6
 8010944:	2800      	cmp	r0, #0
 8010946:	dc06      	bgt.n	8010956 <__sflush_r+0xfe>
 8010948:	89a3      	ldrh	r3, [r4, #12]
 801094a:	f04f 30ff 	mov.w	r0, #4294967295
 801094e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010952:	81a3      	strh	r3, [r4, #12]
 8010954:	e78e      	b.n	8010874 <__sflush_r+0x1c>
 8010956:	4407      	add	r7, r0
 8010958:	eba8 0800 	sub.w	r8, r8, r0
 801095c:	e7e9      	b.n	8010932 <__sflush_r+0xda>
 801095e:	bf00      	nop
 8010960:	20400001 	.word	0x20400001

08010964 <_fflush_r>:
 8010964:	b538      	push	{r3, r4, r5, lr}
 8010966:	690b      	ldr	r3, [r1, #16]
 8010968:	4605      	mov	r5, r0
 801096a:	460c      	mov	r4, r1
 801096c:	b913      	cbnz	r3, 8010974 <_fflush_r+0x10>
 801096e:	2500      	movs	r5, #0
 8010970:	4628      	mov	r0, r5
 8010972:	bd38      	pop	{r3, r4, r5, pc}
 8010974:	b118      	cbz	r0, 801097e <_fflush_r+0x1a>
 8010976:	6983      	ldr	r3, [r0, #24]
 8010978:	b90b      	cbnz	r3, 801097e <_fflush_r+0x1a>
 801097a:	f000 f887 	bl	8010a8c <__sinit>
 801097e:	4b14      	ldr	r3, [pc, #80]	; (80109d0 <_fflush_r+0x6c>)
 8010980:	429c      	cmp	r4, r3
 8010982:	d11b      	bne.n	80109bc <_fflush_r+0x58>
 8010984:	686c      	ldr	r4, [r5, #4]
 8010986:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801098a:	2b00      	cmp	r3, #0
 801098c:	d0ef      	beq.n	801096e <_fflush_r+0xa>
 801098e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8010990:	07d0      	lsls	r0, r2, #31
 8010992:	d404      	bmi.n	801099e <_fflush_r+0x3a>
 8010994:	0599      	lsls	r1, r3, #22
 8010996:	d402      	bmi.n	801099e <_fflush_r+0x3a>
 8010998:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801099a:	f7ff fcfa 	bl	8010392 <__retarget_lock_acquire_recursive>
 801099e:	4628      	mov	r0, r5
 80109a0:	4621      	mov	r1, r4
 80109a2:	f7ff ff59 	bl	8010858 <__sflush_r>
 80109a6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80109a8:	4605      	mov	r5, r0
 80109aa:	07da      	lsls	r2, r3, #31
 80109ac:	d4e0      	bmi.n	8010970 <_fflush_r+0xc>
 80109ae:	89a3      	ldrh	r3, [r4, #12]
 80109b0:	059b      	lsls	r3, r3, #22
 80109b2:	d4dd      	bmi.n	8010970 <_fflush_r+0xc>
 80109b4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80109b6:	f7ff fced 	bl	8010394 <__retarget_lock_release_recursive>
 80109ba:	e7d9      	b.n	8010970 <_fflush_r+0xc>
 80109bc:	4b05      	ldr	r3, [pc, #20]	; (80109d4 <_fflush_r+0x70>)
 80109be:	429c      	cmp	r4, r3
 80109c0:	d101      	bne.n	80109c6 <_fflush_r+0x62>
 80109c2:	68ac      	ldr	r4, [r5, #8]
 80109c4:	e7df      	b.n	8010986 <_fflush_r+0x22>
 80109c6:	4b04      	ldr	r3, [pc, #16]	; (80109d8 <_fflush_r+0x74>)
 80109c8:	429c      	cmp	r4, r3
 80109ca:	bf08      	it	eq
 80109cc:	68ec      	ldreq	r4, [r5, #12]
 80109ce:	e7da      	b.n	8010986 <_fflush_r+0x22>
 80109d0:	08011d34 	.word	0x08011d34
 80109d4:	08011d54 	.word	0x08011d54
 80109d8:	08011d14 	.word	0x08011d14

080109dc <std>:
 80109dc:	2300      	movs	r3, #0
 80109de:	b510      	push	{r4, lr}
 80109e0:	4604      	mov	r4, r0
 80109e2:	e9c0 3300 	strd	r3, r3, [r0]
 80109e6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80109ea:	6083      	str	r3, [r0, #8]
 80109ec:	8181      	strh	r1, [r0, #12]
 80109ee:	6643      	str	r3, [r0, #100]	; 0x64
 80109f0:	81c2      	strh	r2, [r0, #14]
 80109f2:	6183      	str	r3, [r0, #24]
 80109f4:	4619      	mov	r1, r3
 80109f6:	2208      	movs	r2, #8
 80109f8:	305c      	adds	r0, #92	; 0x5c
 80109fa:	f7fd fb97 	bl	800e12c <memset>
 80109fe:	4b05      	ldr	r3, [pc, #20]	; (8010a14 <std+0x38>)
 8010a00:	6224      	str	r4, [r4, #32]
 8010a02:	6263      	str	r3, [r4, #36]	; 0x24
 8010a04:	4b04      	ldr	r3, [pc, #16]	; (8010a18 <std+0x3c>)
 8010a06:	62a3      	str	r3, [r4, #40]	; 0x28
 8010a08:	4b04      	ldr	r3, [pc, #16]	; (8010a1c <std+0x40>)
 8010a0a:	62e3      	str	r3, [r4, #44]	; 0x2c
 8010a0c:	4b04      	ldr	r3, [pc, #16]	; (8010a20 <std+0x44>)
 8010a0e:	6323      	str	r3, [r4, #48]	; 0x30
 8010a10:	bd10      	pop	{r4, pc}
 8010a12:	bf00      	nop
 8010a14:	08010d19 	.word	0x08010d19
 8010a18:	08010d3b 	.word	0x08010d3b
 8010a1c:	08010d73 	.word	0x08010d73
 8010a20:	08010d97 	.word	0x08010d97

08010a24 <_cleanup_r>:
 8010a24:	4901      	ldr	r1, [pc, #4]	; (8010a2c <_cleanup_r+0x8>)
 8010a26:	f000 b8af 	b.w	8010b88 <_fwalk_reent>
 8010a2a:	bf00      	nop
 8010a2c:	08010965 	.word	0x08010965

08010a30 <__sfmoreglue>:
 8010a30:	b570      	push	{r4, r5, r6, lr}
 8010a32:	2568      	movs	r5, #104	; 0x68
 8010a34:	1e4a      	subs	r2, r1, #1
 8010a36:	4355      	muls	r5, r2
 8010a38:	460e      	mov	r6, r1
 8010a3a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8010a3e:	f7fd fbc9 	bl	800e1d4 <_malloc_r>
 8010a42:	4604      	mov	r4, r0
 8010a44:	b140      	cbz	r0, 8010a58 <__sfmoreglue+0x28>
 8010a46:	2100      	movs	r1, #0
 8010a48:	e9c0 1600 	strd	r1, r6, [r0]
 8010a4c:	300c      	adds	r0, #12
 8010a4e:	60a0      	str	r0, [r4, #8]
 8010a50:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8010a54:	f7fd fb6a 	bl	800e12c <memset>
 8010a58:	4620      	mov	r0, r4
 8010a5a:	bd70      	pop	{r4, r5, r6, pc}

08010a5c <__sfp_lock_acquire>:
 8010a5c:	4801      	ldr	r0, [pc, #4]	; (8010a64 <__sfp_lock_acquire+0x8>)
 8010a5e:	f7ff bc98 	b.w	8010392 <__retarget_lock_acquire_recursive>
 8010a62:	bf00      	nop
 8010a64:	20002114 	.word	0x20002114

08010a68 <__sfp_lock_release>:
 8010a68:	4801      	ldr	r0, [pc, #4]	; (8010a70 <__sfp_lock_release+0x8>)
 8010a6a:	f7ff bc93 	b.w	8010394 <__retarget_lock_release_recursive>
 8010a6e:	bf00      	nop
 8010a70:	20002114 	.word	0x20002114

08010a74 <__sinit_lock_acquire>:
 8010a74:	4801      	ldr	r0, [pc, #4]	; (8010a7c <__sinit_lock_acquire+0x8>)
 8010a76:	f7ff bc8c 	b.w	8010392 <__retarget_lock_acquire_recursive>
 8010a7a:	bf00      	nop
 8010a7c:	2000210f 	.word	0x2000210f

08010a80 <__sinit_lock_release>:
 8010a80:	4801      	ldr	r0, [pc, #4]	; (8010a88 <__sinit_lock_release+0x8>)
 8010a82:	f7ff bc87 	b.w	8010394 <__retarget_lock_release_recursive>
 8010a86:	bf00      	nop
 8010a88:	2000210f 	.word	0x2000210f

08010a8c <__sinit>:
 8010a8c:	b510      	push	{r4, lr}
 8010a8e:	4604      	mov	r4, r0
 8010a90:	f7ff fff0 	bl	8010a74 <__sinit_lock_acquire>
 8010a94:	69a3      	ldr	r3, [r4, #24]
 8010a96:	b11b      	cbz	r3, 8010aa0 <__sinit+0x14>
 8010a98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010a9c:	f7ff bff0 	b.w	8010a80 <__sinit_lock_release>
 8010aa0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8010aa4:	6523      	str	r3, [r4, #80]	; 0x50
 8010aa6:	4b13      	ldr	r3, [pc, #76]	; (8010af4 <__sinit+0x68>)
 8010aa8:	4a13      	ldr	r2, [pc, #76]	; (8010af8 <__sinit+0x6c>)
 8010aaa:	681b      	ldr	r3, [r3, #0]
 8010aac:	62a2      	str	r2, [r4, #40]	; 0x28
 8010aae:	42a3      	cmp	r3, r4
 8010ab0:	bf08      	it	eq
 8010ab2:	2301      	moveq	r3, #1
 8010ab4:	4620      	mov	r0, r4
 8010ab6:	bf08      	it	eq
 8010ab8:	61a3      	streq	r3, [r4, #24]
 8010aba:	f000 f81f 	bl	8010afc <__sfp>
 8010abe:	6060      	str	r0, [r4, #4]
 8010ac0:	4620      	mov	r0, r4
 8010ac2:	f000 f81b 	bl	8010afc <__sfp>
 8010ac6:	60a0      	str	r0, [r4, #8]
 8010ac8:	4620      	mov	r0, r4
 8010aca:	f000 f817 	bl	8010afc <__sfp>
 8010ace:	2200      	movs	r2, #0
 8010ad0:	2104      	movs	r1, #4
 8010ad2:	60e0      	str	r0, [r4, #12]
 8010ad4:	6860      	ldr	r0, [r4, #4]
 8010ad6:	f7ff ff81 	bl	80109dc <std>
 8010ada:	2201      	movs	r2, #1
 8010adc:	2109      	movs	r1, #9
 8010ade:	68a0      	ldr	r0, [r4, #8]
 8010ae0:	f7ff ff7c 	bl	80109dc <std>
 8010ae4:	2202      	movs	r2, #2
 8010ae6:	2112      	movs	r1, #18
 8010ae8:	68e0      	ldr	r0, [r4, #12]
 8010aea:	f7ff ff77 	bl	80109dc <std>
 8010aee:	2301      	movs	r3, #1
 8010af0:	61a3      	str	r3, [r4, #24]
 8010af2:	e7d1      	b.n	8010a98 <__sinit+0xc>
 8010af4:	08011990 	.word	0x08011990
 8010af8:	08010a25 	.word	0x08010a25

08010afc <__sfp>:
 8010afc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010afe:	4607      	mov	r7, r0
 8010b00:	f7ff ffac 	bl	8010a5c <__sfp_lock_acquire>
 8010b04:	4b1e      	ldr	r3, [pc, #120]	; (8010b80 <__sfp+0x84>)
 8010b06:	681e      	ldr	r6, [r3, #0]
 8010b08:	69b3      	ldr	r3, [r6, #24]
 8010b0a:	b913      	cbnz	r3, 8010b12 <__sfp+0x16>
 8010b0c:	4630      	mov	r0, r6
 8010b0e:	f7ff ffbd 	bl	8010a8c <__sinit>
 8010b12:	3648      	adds	r6, #72	; 0x48
 8010b14:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8010b18:	3b01      	subs	r3, #1
 8010b1a:	d503      	bpl.n	8010b24 <__sfp+0x28>
 8010b1c:	6833      	ldr	r3, [r6, #0]
 8010b1e:	b30b      	cbz	r3, 8010b64 <__sfp+0x68>
 8010b20:	6836      	ldr	r6, [r6, #0]
 8010b22:	e7f7      	b.n	8010b14 <__sfp+0x18>
 8010b24:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8010b28:	b9d5      	cbnz	r5, 8010b60 <__sfp+0x64>
 8010b2a:	4b16      	ldr	r3, [pc, #88]	; (8010b84 <__sfp+0x88>)
 8010b2c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8010b30:	60e3      	str	r3, [r4, #12]
 8010b32:	6665      	str	r5, [r4, #100]	; 0x64
 8010b34:	f7ff fc2c 	bl	8010390 <__retarget_lock_init_recursive>
 8010b38:	f7ff ff96 	bl	8010a68 <__sfp_lock_release>
 8010b3c:	2208      	movs	r2, #8
 8010b3e:	4629      	mov	r1, r5
 8010b40:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8010b44:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8010b48:	6025      	str	r5, [r4, #0]
 8010b4a:	61a5      	str	r5, [r4, #24]
 8010b4c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8010b50:	f7fd faec 	bl	800e12c <memset>
 8010b54:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8010b58:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8010b5c:	4620      	mov	r0, r4
 8010b5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010b60:	3468      	adds	r4, #104	; 0x68
 8010b62:	e7d9      	b.n	8010b18 <__sfp+0x1c>
 8010b64:	2104      	movs	r1, #4
 8010b66:	4638      	mov	r0, r7
 8010b68:	f7ff ff62 	bl	8010a30 <__sfmoreglue>
 8010b6c:	4604      	mov	r4, r0
 8010b6e:	6030      	str	r0, [r6, #0]
 8010b70:	2800      	cmp	r0, #0
 8010b72:	d1d5      	bne.n	8010b20 <__sfp+0x24>
 8010b74:	f7ff ff78 	bl	8010a68 <__sfp_lock_release>
 8010b78:	230c      	movs	r3, #12
 8010b7a:	603b      	str	r3, [r7, #0]
 8010b7c:	e7ee      	b.n	8010b5c <__sfp+0x60>
 8010b7e:	bf00      	nop
 8010b80:	08011990 	.word	0x08011990
 8010b84:	ffff0001 	.word	0xffff0001

08010b88 <_fwalk_reent>:
 8010b88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010b8c:	4606      	mov	r6, r0
 8010b8e:	4688      	mov	r8, r1
 8010b90:	2700      	movs	r7, #0
 8010b92:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8010b96:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8010b9a:	f1b9 0901 	subs.w	r9, r9, #1
 8010b9e:	d505      	bpl.n	8010bac <_fwalk_reent+0x24>
 8010ba0:	6824      	ldr	r4, [r4, #0]
 8010ba2:	2c00      	cmp	r4, #0
 8010ba4:	d1f7      	bne.n	8010b96 <_fwalk_reent+0xe>
 8010ba6:	4638      	mov	r0, r7
 8010ba8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010bac:	89ab      	ldrh	r3, [r5, #12]
 8010bae:	2b01      	cmp	r3, #1
 8010bb0:	d907      	bls.n	8010bc2 <_fwalk_reent+0x3a>
 8010bb2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8010bb6:	3301      	adds	r3, #1
 8010bb8:	d003      	beq.n	8010bc2 <_fwalk_reent+0x3a>
 8010bba:	4629      	mov	r1, r5
 8010bbc:	4630      	mov	r0, r6
 8010bbe:	47c0      	blx	r8
 8010bc0:	4307      	orrs	r7, r0
 8010bc2:	3568      	adds	r5, #104	; 0x68
 8010bc4:	e7e9      	b.n	8010b9a <_fwalk_reent+0x12>

08010bc6 <__swhatbuf_r>:
 8010bc6:	b570      	push	{r4, r5, r6, lr}
 8010bc8:	460e      	mov	r6, r1
 8010bca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010bce:	4614      	mov	r4, r2
 8010bd0:	2900      	cmp	r1, #0
 8010bd2:	461d      	mov	r5, r3
 8010bd4:	b096      	sub	sp, #88	; 0x58
 8010bd6:	da07      	bge.n	8010be8 <__swhatbuf_r+0x22>
 8010bd8:	2300      	movs	r3, #0
 8010bda:	602b      	str	r3, [r5, #0]
 8010bdc:	89b3      	ldrh	r3, [r6, #12]
 8010bde:	061a      	lsls	r2, r3, #24
 8010be0:	d410      	bmi.n	8010c04 <__swhatbuf_r+0x3e>
 8010be2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010be6:	e00e      	b.n	8010c06 <__swhatbuf_r+0x40>
 8010be8:	466a      	mov	r2, sp
 8010bea:	f000 f8fb 	bl	8010de4 <_fstat_r>
 8010bee:	2800      	cmp	r0, #0
 8010bf0:	dbf2      	blt.n	8010bd8 <__swhatbuf_r+0x12>
 8010bf2:	9a01      	ldr	r2, [sp, #4]
 8010bf4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8010bf8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8010bfc:	425a      	negs	r2, r3
 8010bfe:	415a      	adcs	r2, r3
 8010c00:	602a      	str	r2, [r5, #0]
 8010c02:	e7ee      	b.n	8010be2 <__swhatbuf_r+0x1c>
 8010c04:	2340      	movs	r3, #64	; 0x40
 8010c06:	2000      	movs	r0, #0
 8010c08:	6023      	str	r3, [r4, #0]
 8010c0a:	b016      	add	sp, #88	; 0x58
 8010c0c:	bd70      	pop	{r4, r5, r6, pc}
	...

08010c10 <__smakebuf_r>:
 8010c10:	898b      	ldrh	r3, [r1, #12]
 8010c12:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8010c14:	079d      	lsls	r5, r3, #30
 8010c16:	4606      	mov	r6, r0
 8010c18:	460c      	mov	r4, r1
 8010c1a:	d507      	bpl.n	8010c2c <__smakebuf_r+0x1c>
 8010c1c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8010c20:	6023      	str	r3, [r4, #0]
 8010c22:	6123      	str	r3, [r4, #16]
 8010c24:	2301      	movs	r3, #1
 8010c26:	6163      	str	r3, [r4, #20]
 8010c28:	b002      	add	sp, #8
 8010c2a:	bd70      	pop	{r4, r5, r6, pc}
 8010c2c:	466a      	mov	r2, sp
 8010c2e:	ab01      	add	r3, sp, #4
 8010c30:	f7ff ffc9 	bl	8010bc6 <__swhatbuf_r>
 8010c34:	9900      	ldr	r1, [sp, #0]
 8010c36:	4605      	mov	r5, r0
 8010c38:	4630      	mov	r0, r6
 8010c3a:	f7fd facb 	bl	800e1d4 <_malloc_r>
 8010c3e:	b948      	cbnz	r0, 8010c54 <__smakebuf_r+0x44>
 8010c40:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010c44:	059a      	lsls	r2, r3, #22
 8010c46:	d4ef      	bmi.n	8010c28 <__smakebuf_r+0x18>
 8010c48:	f023 0303 	bic.w	r3, r3, #3
 8010c4c:	f043 0302 	orr.w	r3, r3, #2
 8010c50:	81a3      	strh	r3, [r4, #12]
 8010c52:	e7e3      	b.n	8010c1c <__smakebuf_r+0xc>
 8010c54:	4b0d      	ldr	r3, [pc, #52]	; (8010c8c <__smakebuf_r+0x7c>)
 8010c56:	62b3      	str	r3, [r6, #40]	; 0x28
 8010c58:	89a3      	ldrh	r3, [r4, #12]
 8010c5a:	6020      	str	r0, [r4, #0]
 8010c5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010c60:	81a3      	strh	r3, [r4, #12]
 8010c62:	9b00      	ldr	r3, [sp, #0]
 8010c64:	6120      	str	r0, [r4, #16]
 8010c66:	6163      	str	r3, [r4, #20]
 8010c68:	9b01      	ldr	r3, [sp, #4]
 8010c6a:	b15b      	cbz	r3, 8010c84 <__smakebuf_r+0x74>
 8010c6c:	4630      	mov	r0, r6
 8010c6e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010c72:	f000 f8c9 	bl	8010e08 <_isatty_r>
 8010c76:	b128      	cbz	r0, 8010c84 <__smakebuf_r+0x74>
 8010c78:	89a3      	ldrh	r3, [r4, #12]
 8010c7a:	f023 0303 	bic.w	r3, r3, #3
 8010c7e:	f043 0301 	orr.w	r3, r3, #1
 8010c82:	81a3      	strh	r3, [r4, #12]
 8010c84:	89a0      	ldrh	r0, [r4, #12]
 8010c86:	4305      	orrs	r5, r0
 8010c88:	81a5      	strh	r5, [r4, #12]
 8010c8a:	e7cd      	b.n	8010c28 <__smakebuf_r+0x18>
 8010c8c:	08010a25 	.word	0x08010a25

08010c90 <_raise_r>:
 8010c90:	291f      	cmp	r1, #31
 8010c92:	b538      	push	{r3, r4, r5, lr}
 8010c94:	4604      	mov	r4, r0
 8010c96:	460d      	mov	r5, r1
 8010c98:	d904      	bls.n	8010ca4 <_raise_r+0x14>
 8010c9a:	2316      	movs	r3, #22
 8010c9c:	6003      	str	r3, [r0, #0]
 8010c9e:	f04f 30ff 	mov.w	r0, #4294967295
 8010ca2:	bd38      	pop	{r3, r4, r5, pc}
 8010ca4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8010ca6:	b112      	cbz	r2, 8010cae <_raise_r+0x1e>
 8010ca8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8010cac:	b94b      	cbnz	r3, 8010cc2 <_raise_r+0x32>
 8010cae:	4620      	mov	r0, r4
 8010cb0:	f000 f830 	bl	8010d14 <_getpid_r>
 8010cb4:	462a      	mov	r2, r5
 8010cb6:	4601      	mov	r1, r0
 8010cb8:	4620      	mov	r0, r4
 8010cba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010cbe:	f000 b817 	b.w	8010cf0 <_kill_r>
 8010cc2:	2b01      	cmp	r3, #1
 8010cc4:	d00a      	beq.n	8010cdc <_raise_r+0x4c>
 8010cc6:	1c59      	adds	r1, r3, #1
 8010cc8:	d103      	bne.n	8010cd2 <_raise_r+0x42>
 8010cca:	2316      	movs	r3, #22
 8010ccc:	6003      	str	r3, [r0, #0]
 8010cce:	2001      	movs	r0, #1
 8010cd0:	e7e7      	b.n	8010ca2 <_raise_r+0x12>
 8010cd2:	2400      	movs	r4, #0
 8010cd4:	4628      	mov	r0, r5
 8010cd6:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8010cda:	4798      	blx	r3
 8010cdc:	2000      	movs	r0, #0
 8010cde:	e7e0      	b.n	8010ca2 <_raise_r+0x12>

08010ce0 <raise>:
 8010ce0:	4b02      	ldr	r3, [pc, #8]	; (8010cec <raise+0xc>)
 8010ce2:	4601      	mov	r1, r0
 8010ce4:	6818      	ldr	r0, [r3, #0]
 8010ce6:	f7ff bfd3 	b.w	8010c90 <_raise_r>
 8010cea:	bf00      	nop
 8010cec:	20000188 	.word	0x20000188

08010cf0 <_kill_r>:
 8010cf0:	b538      	push	{r3, r4, r5, lr}
 8010cf2:	2300      	movs	r3, #0
 8010cf4:	4d06      	ldr	r5, [pc, #24]	; (8010d10 <_kill_r+0x20>)
 8010cf6:	4604      	mov	r4, r0
 8010cf8:	4608      	mov	r0, r1
 8010cfa:	4611      	mov	r1, r2
 8010cfc:	602b      	str	r3, [r5, #0]
 8010cfe:	f7f3 fb2e 	bl	800435e <_kill>
 8010d02:	1c43      	adds	r3, r0, #1
 8010d04:	d102      	bne.n	8010d0c <_kill_r+0x1c>
 8010d06:	682b      	ldr	r3, [r5, #0]
 8010d08:	b103      	cbz	r3, 8010d0c <_kill_r+0x1c>
 8010d0a:	6023      	str	r3, [r4, #0]
 8010d0c:	bd38      	pop	{r3, r4, r5, pc}
 8010d0e:	bf00      	nop
 8010d10:	20002108 	.word	0x20002108

08010d14 <_getpid_r>:
 8010d14:	f7f3 bb1c 	b.w	8004350 <_getpid>

08010d18 <__sread>:
 8010d18:	b510      	push	{r4, lr}
 8010d1a:	460c      	mov	r4, r1
 8010d1c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010d20:	f000 f894 	bl	8010e4c <_read_r>
 8010d24:	2800      	cmp	r0, #0
 8010d26:	bfab      	itete	ge
 8010d28:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8010d2a:	89a3      	ldrhlt	r3, [r4, #12]
 8010d2c:	181b      	addge	r3, r3, r0
 8010d2e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8010d32:	bfac      	ite	ge
 8010d34:	6563      	strge	r3, [r4, #84]	; 0x54
 8010d36:	81a3      	strhlt	r3, [r4, #12]
 8010d38:	bd10      	pop	{r4, pc}

08010d3a <__swrite>:
 8010d3a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010d3e:	461f      	mov	r7, r3
 8010d40:	898b      	ldrh	r3, [r1, #12]
 8010d42:	4605      	mov	r5, r0
 8010d44:	05db      	lsls	r3, r3, #23
 8010d46:	460c      	mov	r4, r1
 8010d48:	4616      	mov	r6, r2
 8010d4a:	d505      	bpl.n	8010d58 <__swrite+0x1e>
 8010d4c:	2302      	movs	r3, #2
 8010d4e:	2200      	movs	r2, #0
 8010d50:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010d54:	f000 f868 	bl	8010e28 <_lseek_r>
 8010d58:	89a3      	ldrh	r3, [r4, #12]
 8010d5a:	4632      	mov	r2, r6
 8010d5c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8010d60:	81a3      	strh	r3, [r4, #12]
 8010d62:	4628      	mov	r0, r5
 8010d64:	463b      	mov	r3, r7
 8010d66:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010d6a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010d6e:	f000 b817 	b.w	8010da0 <_write_r>

08010d72 <__sseek>:
 8010d72:	b510      	push	{r4, lr}
 8010d74:	460c      	mov	r4, r1
 8010d76:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010d7a:	f000 f855 	bl	8010e28 <_lseek_r>
 8010d7e:	1c43      	adds	r3, r0, #1
 8010d80:	89a3      	ldrh	r3, [r4, #12]
 8010d82:	bf15      	itete	ne
 8010d84:	6560      	strne	r0, [r4, #84]	; 0x54
 8010d86:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8010d8a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8010d8e:	81a3      	strheq	r3, [r4, #12]
 8010d90:	bf18      	it	ne
 8010d92:	81a3      	strhne	r3, [r4, #12]
 8010d94:	bd10      	pop	{r4, pc}

08010d96 <__sclose>:
 8010d96:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010d9a:	f000 b813 	b.w	8010dc4 <_close_r>
	...

08010da0 <_write_r>:
 8010da0:	b538      	push	{r3, r4, r5, lr}
 8010da2:	4604      	mov	r4, r0
 8010da4:	4608      	mov	r0, r1
 8010da6:	4611      	mov	r1, r2
 8010da8:	2200      	movs	r2, #0
 8010daa:	4d05      	ldr	r5, [pc, #20]	; (8010dc0 <_write_r+0x20>)
 8010dac:	602a      	str	r2, [r5, #0]
 8010dae:	461a      	mov	r2, r3
 8010db0:	f7f3 fb0c 	bl	80043cc <_write>
 8010db4:	1c43      	adds	r3, r0, #1
 8010db6:	d102      	bne.n	8010dbe <_write_r+0x1e>
 8010db8:	682b      	ldr	r3, [r5, #0]
 8010dba:	b103      	cbz	r3, 8010dbe <_write_r+0x1e>
 8010dbc:	6023      	str	r3, [r4, #0]
 8010dbe:	bd38      	pop	{r3, r4, r5, pc}
 8010dc0:	20002108 	.word	0x20002108

08010dc4 <_close_r>:
 8010dc4:	b538      	push	{r3, r4, r5, lr}
 8010dc6:	2300      	movs	r3, #0
 8010dc8:	4d05      	ldr	r5, [pc, #20]	; (8010de0 <_close_r+0x1c>)
 8010dca:	4604      	mov	r4, r0
 8010dcc:	4608      	mov	r0, r1
 8010dce:	602b      	str	r3, [r5, #0]
 8010dd0:	f7f3 fb18 	bl	8004404 <_close>
 8010dd4:	1c43      	adds	r3, r0, #1
 8010dd6:	d102      	bne.n	8010dde <_close_r+0x1a>
 8010dd8:	682b      	ldr	r3, [r5, #0]
 8010dda:	b103      	cbz	r3, 8010dde <_close_r+0x1a>
 8010ddc:	6023      	str	r3, [r4, #0]
 8010dde:	bd38      	pop	{r3, r4, r5, pc}
 8010de0:	20002108 	.word	0x20002108

08010de4 <_fstat_r>:
 8010de4:	b538      	push	{r3, r4, r5, lr}
 8010de6:	2300      	movs	r3, #0
 8010de8:	4d06      	ldr	r5, [pc, #24]	; (8010e04 <_fstat_r+0x20>)
 8010dea:	4604      	mov	r4, r0
 8010dec:	4608      	mov	r0, r1
 8010dee:	4611      	mov	r1, r2
 8010df0:	602b      	str	r3, [r5, #0]
 8010df2:	f7f3 fb12 	bl	800441a <_fstat>
 8010df6:	1c43      	adds	r3, r0, #1
 8010df8:	d102      	bne.n	8010e00 <_fstat_r+0x1c>
 8010dfa:	682b      	ldr	r3, [r5, #0]
 8010dfc:	b103      	cbz	r3, 8010e00 <_fstat_r+0x1c>
 8010dfe:	6023      	str	r3, [r4, #0]
 8010e00:	bd38      	pop	{r3, r4, r5, pc}
 8010e02:	bf00      	nop
 8010e04:	20002108 	.word	0x20002108

08010e08 <_isatty_r>:
 8010e08:	b538      	push	{r3, r4, r5, lr}
 8010e0a:	2300      	movs	r3, #0
 8010e0c:	4d05      	ldr	r5, [pc, #20]	; (8010e24 <_isatty_r+0x1c>)
 8010e0e:	4604      	mov	r4, r0
 8010e10:	4608      	mov	r0, r1
 8010e12:	602b      	str	r3, [r5, #0]
 8010e14:	f7f3 fb10 	bl	8004438 <_isatty>
 8010e18:	1c43      	adds	r3, r0, #1
 8010e1a:	d102      	bne.n	8010e22 <_isatty_r+0x1a>
 8010e1c:	682b      	ldr	r3, [r5, #0]
 8010e1e:	b103      	cbz	r3, 8010e22 <_isatty_r+0x1a>
 8010e20:	6023      	str	r3, [r4, #0]
 8010e22:	bd38      	pop	{r3, r4, r5, pc}
 8010e24:	20002108 	.word	0x20002108

08010e28 <_lseek_r>:
 8010e28:	b538      	push	{r3, r4, r5, lr}
 8010e2a:	4604      	mov	r4, r0
 8010e2c:	4608      	mov	r0, r1
 8010e2e:	4611      	mov	r1, r2
 8010e30:	2200      	movs	r2, #0
 8010e32:	4d05      	ldr	r5, [pc, #20]	; (8010e48 <_lseek_r+0x20>)
 8010e34:	602a      	str	r2, [r5, #0]
 8010e36:	461a      	mov	r2, r3
 8010e38:	f7f3 fb08 	bl	800444c <_lseek>
 8010e3c:	1c43      	adds	r3, r0, #1
 8010e3e:	d102      	bne.n	8010e46 <_lseek_r+0x1e>
 8010e40:	682b      	ldr	r3, [r5, #0]
 8010e42:	b103      	cbz	r3, 8010e46 <_lseek_r+0x1e>
 8010e44:	6023      	str	r3, [r4, #0]
 8010e46:	bd38      	pop	{r3, r4, r5, pc}
 8010e48:	20002108 	.word	0x20002108

08010e4c <_read_r>:
 8010e4c:	b538      	push	{r3, r4, r5, lr}
 8010e4e:	4604      	mov	r4, r0
 8010e50:	4608      	mov	r0, r1
 8010e52:	4611      	mov	r1, r2
 8010e54:	2200      	movs	r2, #0
 8010e56:	4d05      	ldr	r5, [pc, #20]	; (8010e6c <_read_r+0x20>)
 8010e58:	602a      	str	r2, [r5, #0]
 8010e5a:	461a      	mov	r2, r3
 8010e5c:	f7f3 fa99 	bl	8004392 <_read>
 8010e60:	1c43      	adds	r3, r0, #1
 8010e62:	d102      	bne.n	8010e6a <_read_r+0x1e>
 8010e64:	682b      	ldr	r3, [r5, #0]
 8010e66:	b103      	cbz	r3, 8010e6a <_read_r+0x1e>
 8010e68:	6023      	str	r3, [r4, #0]
 8010e6a:	bd38      	pop	{r3, r4, r5, pc}
 8010e6c:	20002108 	.word	0x20002108

08010e70 <_init>:
 8010e70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010e72:	bf00      	nop
 8010e74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010e76:	bc08      	pop	{r3}
 8010e78:	469e      	mov	lr, r3
 8010e7a:	4770      	bx	lr

08010e7c <_fini>:
 8010e7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010e7e:	bf00      	nop
 8010e80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010e82:	bc08      	pop	{r3}
 8010e84:	469e      	mov	lr, r3
 8010e86:	4770      	bx	lr
