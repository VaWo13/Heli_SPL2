
Heli_SPL2_Firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000184  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a4b0  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f0  0800a638  0800a638  0001a638  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a728  0800a728  000201ec  2**0
                  CONTENTS
  4 .ARM          00000008  0800a728  0800a728  0001a728  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a730  0800a730  000201ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800a730  0800a730  0001a730  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a738  0800a738  0001a738  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001ec  20000000  0800a73c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001c00  200001ec  0800a928  000201ec  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001dec  0800a928  00021dec  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   000274f2  00000000  00000000  00020215  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000453b  00000000  00000000  00047707  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000014d0  00000000  00000000  0004bc48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001350  00000000  00000000  0004d118  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025eeb  00000000  00000000  0004e468  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c396  00000000  00000000  00074353  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c44cb  00000000  00000000  000906e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00154bb4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005ea0  00000000  00000000  00154c08  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200001ec 	.word	0x200001ec
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800a620 	.word	0x0800a620

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	200001f0 	.word	0x200001f0
 80001c4:	0800a620 	.word	0x0800a620

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__aeabi_d2uiz>:
 8000964:	004a      	lsls	r2, r1, #1
 8000966:	d211      	bcs.n	800098c <__aeabi_d2uiz+0x28>
 8000968:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 800096c:	d211      	bcs.n	8000992 <__aeabi_d2uiz+0x2e>
 800096e:	d50d      	bpl.n	800098c <__aeabi_d2uiz+0x28>
 8000970:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000974:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000978:	d40e      	bmi.n	8000998 <__aeabi_d2uiz+0x34>
 800097a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800097e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000982:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000986:	fa23 f002 	lsr.w	r0, r3, r2
 800098a:	4770      	bx	lr
 800098c:	f04f 0000 	mov.w	r0, #0
 8000990:	4770      	bx	lr
 8000992:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000996:	d102      	bne.n	800099e <__aeabi_d2uiz+0x3a>
 8000998:	f04f 30ff 	mov.w	r0, #4294967295
 800099c:	4770      	bx	lr
 800099e:	f04f 0000 	mov.w	r0, #0
 80009a2:	4770      	bx	lr

080009a4 <__aeabi_frsub>:
 80009a4:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80009a8:	e002      	b.n	80009b0 <__addsf3>
 80009aa:	bf00      	nop

080009ac <__aeabi_fsub>:
 80009ac:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080009b0 <__addsf3>:
 80009b0:	0042      	lsls	r2, r0, #1
 80009b2:	bf1f      	itttt	ne
 80009b4:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80009b8:	ea92 0f03 	teqne	r2, r3
 80009bc:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80009c0:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80009c4:	d06a      	beq.n	8000a9c <__addsf3+0xec>
 80009c6:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80009ca:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80009ce:	bfc1      	itttt	gt
 80009d0:	18d2      	addgt	r2, r2, r3
 80009d2:	4041      	eorgt	r1, r0
 80009d4:	4048      	eorgt	r0, r1
 80009d6:	4041      	eorgt	r1, r0
 80009d8:	bfb8      	it	lt
 80009da:	425b      	neglt	r3, r3
 80009dc:	2b19      	cmp	r3, #25
 80009de:	bf88      	it	hi
 80009e0:	4770      	bxhi	lr
 80009e2:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80009e6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80009ea:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80009ee:	bf18      	it	ne
 80009f0:	4240      	negne	r0, r0
 80009f2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80009f6:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80009fa:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80009fe:	bf18      	it	ne
 8000a00:	4249      	negne	r1, r1
 8000a02:	ea92 0f03 	teq	r2, r3
 8000a06:	d03f      	beq.n	8000a88 <__addsf3+0xd8>
 8000a08:	f1a2 0201 	sub.w	r2, r2, #1
 8000a0c:	fa41 fc03 	asr.w	ip, r1, r3
 8000a10:	eb10 000c 	adds.w	r0, r0, ip
 8000a14:	f1c3 0320 	rsb	r3, r3, #32
 8000a18:	fa01 f103 	lsl.w	r1, r1, r3
 8000a1c:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000a20:	d502      	bpl.n	8000a28 <__addsf3+0x78>
 8000a22:	4249      	negs	r1, r1
 8000a24:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000a28:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000a2c:	d313      	bcc.n	8000a56 <__addsf3+0xa6>
 8000a2e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000a32:	d306      	bcc.n	8000a42 <__addsf3+0x92>
 8000a34:	0840      	lsrs	r0, r0, #1
 8000a36:	ea4f 0131 	mov.w	r1, r1, rrx
 8000a3a:	f102 0201 	add.w	r2, r2, #1
 8000a3e:	2afe      	cmp	r2, #254	; 0xfe
 8000a40:	d251      	bcs.n	8000ae6 <__addsf3+0x136>
 8000a42:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000a46:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000a4a:	bf08      	it	eq
 8000a4c:	f020 0001 	biceq.w	r0, r0, #1
 8000a50:	ea40 0003 	orr.w	r0, r0, r3
 8000a54:	4770      	bx	lr
 8000a56:	0049      	lsls	r1, r1, #1
 8000a58:	eb40 0000 	adc.w	r0, r0, r0
 8000a5c:	3a01      	subs	r2, #1
 8000a5e:	bf28      	it	cs
 8000a60:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000a64:	d2ed      	bcs.n	8000a42 <__addsf3+0x92>
 8000a66:	fab0 fc80 	clz	ip, r0
 8000a6a:	f1ac 0c08 	sub.w	ip, ip, #8
 8000a6e:	ebb2 020c 	subs.w	r2, r2, ip
 8000a72:	fa00 f00c 	lsl.w	r0, r0, ip
 8000a76:	bfaa      	itet	ge
 8000a78:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000a7c:	4252      	neglt	r2, r2
 8000a7e:	4318      	orrge	r0, r3
 8000a80:	bfbc      	itt	lt
 8000a82:	40d0      	lsrlt	r0, r2
 8000a84:	4318      	orrlt	r0, r3
 8000a86:	4770      	bx	lr
 8000a88:	f092 0f00 	teq	r2, #0
 8000a8c:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000a90:	bf06      	itte	eq
 8000a92:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000a96:	3201      	addeq	r2, #1
 8000a98:	3b01      	subne	r3, #1
 8000a9a:	e7b5      	b.n	8000a08 <__addsf3+0x58>
 8000a9c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000aa0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000aa4:	bf18      	it	ne
 8000aa6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000aaa:	d021      	beq.n	8000af0 <__addsf3+0x140>
 8000aac:	ea92 0f03 	teq	r2, r3
 8000ab0:	d004      	beq.n	8000abc <__addsf3+0x10c>
 8000ab2:	f092 0f00 	teq	r2, #0
 8000ab6:	bf08      	it	eq
 8000ab8:	4608      	moveq	r0, r1
 8000aba:	4770      	bx	lr
 8000abc:	ea90 0f01 	teq	r0, r1
 8000ac0:	bf1c      	itt	ne
 8000ac2:	2000      	movne	r0, #0
 8000ac4:	4770      	bxne	lr
 8000ac6:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000aca:	d104      	bne.n	8000ad6 <__addsf3+0x126>
 8000acc:	0040      	lsls	r0, r0, #1
 8000ace:	bf28      	it	cs
 8000ad0:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000ad4:	4770      	bx	lr
 8000ad6:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000ada:	bf3c      	itt	cc
 8000adc:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ae0:	4770      	bxcc	lr
 8000ae2:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ae6:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000aea:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000aee:	4770      	bx	lr
 8000af0:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000af4:	bf16      	itet	ne
 8000af6:	4608      	movne	r0, r1
 8000af8:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000afc:	4601      	movne	r1, r0
 8000afe:	0242      	lsls	r2, r0, #9
 8000b00:	bf06      	itte	eq
 8000b02:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000b06:	ea90 0f01 	teqeq	r0, r1
 8000b0a:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000b0e:	4770      	bx	lr

08000b10 <__aeabi_ui2f>:
 8000b10:	f04f 0300 	mov.w	r3, #0
 8000b14:	e004      	b.n	8000b20 <__aeabi_i2f+0x8>
 8000b16:	bf00      	nop

08000b18 <__aeabi_i2f>:
 8000b18:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000b1c:	bf48      	it	mi
 8000b1e:	4240      	negmi	r0, r0
 8000b20:	ea5f 0c00 	movs.w	ip, r0
 8000b24:	bf08      	it	eq
 8000b26:	4770      	bxeq	lr
 8000b28:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000b2c:	4601      	mov	r1, r0
 8000b2e:	f04f 0000 	mov.w	r0, #0
 8000b32:	e01c      	b.n	8000b6e <__aeabi_l2f+0x2a>

08000b34 <__aeabi_ul2f>:
 8000b34:	ea50 0201 	orrs.w	r2, r0, r1
 8000b38:	bf08      	it	eq
 8000b3a:	4770      	bxeq	lr
 8000b3c:	f04f 0300 	mov.w	r3, #0
 8000b40:	e00a      	b.n	8000b58 <__aeabi_l2f+0x14>
 8000b42:	bf00      	nop

08000b44 <__aeabi_l2f>:
 8000b44:	ea50 0201 	orrs.w	r2, r0, r1
 8000b48:	bf08      	it	eq
 8000b4a:	4770      	bxeq	lr
 8000b4c:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000b50:	d502      	bpl.n	8000b58 <__aeabi_l2f+0x14>
 8000b52:	4240      	negs	r0, r0
 8000b54:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b58:	ea5f 0c01 	movs.w	ip, r1
 8000b5c:	bf02      	ittt	eq
 8000b5e:	4684      	moveq	ip, r0
 8000b60:	4601      	moveq	r1, r0
 8000b62:	2000      	moveq	r0, #0
 8000b64:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000b68:	bf08      	it	eq
 8000b6a:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000b6e:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000b72:	fabc f28c 	clz	r2, ip
 8000b76:	3a08      	subs	r2, #8
 8000b78:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000b7c:	db10      	blt.n	8000ba0 <__aeabi_l2f+0x5c>
 8000b7e:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b82:	4463      	add	r3, ip
 8000b84:	fa00 fc02 	lsl.w	ip, r0, r2
 8000b88:	f1c2 0220 	rsb	r2, r2, #32
 8000b8c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000b90:	fa20 f202 	lsr.w	r2, r0, r2
 8000b94:	eb43 0002 	adc.w	r0, r3, r2
 8000b98:	bf08      	it	eq
 8000b9a:	f020 0001 	biceq.w	r0, r0, #1
 8000b9e:	4770      	bx	lr
 8000ba0:	f102 0220 	add.w	r2, r2, #32
 8000ba4:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ba8:	f1c2 0220 	rsb	r2, r2, #32
 8000bac:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000bb0:	fa21 f202 	lsr.w	r2, r1, r2
 8000bb4:	eb43 0002 	adc.w	r0, r3, r2
 8000bb8:	bf08      	it	eq
 8000bba:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000bbe:	4770      	bx	lr

08000bc0 <__aeabi_fmul>:
 8000bc0:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000bc4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000bc8:	bf1e      	ittt	ne
 8000bca:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000bce:	ea92 0f0c 	teqne	r2, ip
 8000bd2:	ea93 0f0c 	teqne	r3, ip
 8000bd6:	d06f      	beq.n	8000cb8 <__aeabi_fmul+0xf8>
 8000bd8:	441a      	add	r2, r3
 8000bda:	ea80 0c01 	eor.w	ip, r0, r1
 8000bde:	0240      	lsls	r0, r0, #9
 8000be0:	bf18      	it	ne
 8000be2:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000be6:	d01e      	beq.n	8000c26 <__aeabi_fmul+0x66>
 8000be8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000bec:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000bf0:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000bf4:	fba0 3101 	umull	r3, r1, r0, r1
 8000bf8:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000bfc:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000c00:	bf3e      	ittt	cc
 8000c02:	0049      	lslcc	r1, r1, #1
 8000c04:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000c08:	005b      	lslcc	r3, r3, #1
 8000c0a:	ea40 0001 	orr.w	r0, r0, r1
 8000c0e:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000c12:	2afd      	cmp	r2, #253	; 0xfd
 8000c14:	d81d      	bhi.n	8000c52 <__aeabi_fmul+0x92>
 8000c16:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000c1a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c1e:	bf08      	it	eq
 8000c20:	f020 0001 	biceq.w	r0, r0, #1
 8000c24:	4770      	bx	lr
 8000c26:	f090 0f00 	teq	r0, #0
 8000c2a:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000c2e:	bf08      	it	eq
 8000c30:	0249      	lsleq	r1, r1, #9
 8000c32:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000c36:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000c3a:	3a7f      	subs	r2, #127	; 0x7f
 8000c3c:	bfc2      	ittt	gt
 8000c3e:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000c42:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000c46:	4770      	bxgt	lr
 8000c48:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c4c:	f04f 0300 	mov.w	r3, #0
 8000c50:	3a01      	subs	r2, #1
 8000c52:	dc5d      	bgt.n	8000d10 <__aeabi_fmul+0x150>
 8000c54:	f112 0f19 	cmn.w	r2, #25
 8000c58:	bfdc      	itt	le
 8000c5a:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000c5e:	4770      	bxle	lr
 8000c60:	f1c2 0200 	rsb	r2, r2, #0
 8000c64:	0041      	lsls	r1, r0, #1
 8000c66:	fa21 f102 	lsr.w	r1, r1, r2
 8000c6a:	f1c2 0220 	rsb	r2, r2, #32
 8000c6e:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c72:	ea5f 0031 	movs.w	r0, r1, rrx
 8000c76:	f140 0000 	adc.w	r0, r0, #0
 8000c7a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000c7e:	bf08      	it	eq
 8000c80:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000c84:	4770      	bx	lr
 8000c86:	f092 0f00 	teq	r2, #0
 8000c8a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000c8e:	bf02      	ittt	eq
 8000c90:	0040      	lsleq	r0, r0, #1
 8000c92:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000c96:	3a01      	subeq	r2, #1
 8000c98:	d0f9      	beq.n	8000c8e <__aeabi_fmul+0xce>
 8000c9a:	ea40 000c 	orr.w	r0, r0, ip
 8000c9e:	f093 0f00 	teq	r3, #0
 8000ca2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ca6:	bf02      	ittt	eq
 8000ca8:	0049      	lsleq	r1, r1, #1
 8000caa:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000cae:	3b01      	subeq	r3, #1
 8000cb0:	d0f9      	beq.n	8000ca6 <__aeabi_fmul+0xe6>
 8000cb2:	ea41 010c 	orr.w	r1, r1, ip
 8000cb6:	e78f      	b.n	8000bd8 <__aeabi_fmul+0x18>
 8000cb8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000cbc:	ea92 0f0c 	teq	r2, ip
 8000cc0:	bf18      	it	ne
 8000cc2:	ea93 0f0c 	teqne	r3, ip
 8000cc6:	d00a      	beq.n	8000cde <__aeabi_fmul+0x11e>
 8000cc8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000ccc:	bf18      	it	ne
 8000cce:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000cd2:	d1d8      	bne.n	8000c86 <__aeabi_fmul+0xc6>
 8000cd4:	ea80 0001 	eor.w	r0, r0, r1
 8000cd8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000cdc:	4770      	bx	lr
 8000cde:	f090 0f00 	teq	r0, #0
 8000ce2:	bf17      	itett	ne
 8000ce4:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000ce8:	4608      	moveq	r0, r1
 8000cea:	f091 0f00 	teqne	r1, #0
 8000cee:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000cf2:	d014      	beq.n	8000d1e <__aeabi_fmul+0x15e>
 8000cf4:	ea92 0f0c 	teq	r2, ip
 8000cf8:	d101      	bne.n	8000cfe <__aeabi_fmul+0x13e>
 8000cfa:	0242      	lsls	r2, r0, #9
 8000cfc:	d10f      	bne.n	8000d1e <__aeabi_fmul+0x15e>
 8000cfe:	ea93 0f0c 	teq	r3, ip
 8000d02:	d103      	bne.n	8000d0c <__aeabi_fmul+0x14c>
 8000d04:	024b      	lsls	r3, r1, #9
 8000d06:	bf18      	it	ne
 8000d08:	4608      	movne	r0, r1
 8000d0a:	d108      	bne.n	8000d1e <__aeabi_fmul+0x15e>
 8000d0c:	ea80 0001 	eor.w	r0, r0, r1
 8000d10:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000d14:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000d18:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d1c:	4770      	bx	lr
 8000d1e:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000d22:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000d26:	4770      	bx	lr

08000d28 <__aeabi_fdiv>:
 8000d28:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d2c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d30:	bf1e      	ittt	ne
 8000d32:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d36:	ea92 0f0c 	teqne	r2, ip
 8000d3a:	ea93 0f0c 	teqne	r3, ip
 8000d3e:	d069      	beq.n	8000e14 <__aeabi_fdiv+0xec>
 8000d40:	eba2 0203 	sub.w	r2, r2, r3
 8000d44:	ea80 0c01 	eor.w	ip, r0, r1
 8000d48:	0249      	lsls	r1, r1, #9
 8000d4a:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000d4e:	d037      	beq.n	8000dc0 <__aeabi_fdiv+0x98>
 8000d50:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000d54:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000d58:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000d5c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d60:	428b      	cmp	r3, r1
 8000d62:	bf38      	it	cc
 8000d64:	005b      	lslcc	r3, r3, #1
 8000d66:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000d6a:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000d6e:	428b      	cmp	r3, r1
 8000d70:	bf24      	itt	cs
 8000d72:	1a5b      	subcs	r3, r3, r1
 8000d74:	ea40 000c 	orrcs.w	r0, r0, ip
 8000d78:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000d7c:	bf24      	itt	cs
 8000d7e:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000d82:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000d86:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000d8a:	bf24      	itt	cs
 8000d8c:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000d90:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000d94:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000d98:	bf24      	itt	cs
 8000d9a:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000d9e:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000da2:	011b      	lsls	r3, r3, #4
 8000da4:	bf18      	it	ne
 8000da6:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000daa:	d1e0      	bne.n	8000d6e <__aeabi_fdiv+0x46>
 8000dac:	2afd      	cmp	r2, #253	; 0xfd
 8000dae:	f63f af50 	bhi.w	8000c52 <__aeabi_fmul+0x92>
 8000db2:	428b      	cmp	r3, r1
 8000db4:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000db8:	bf08      	it	eq
 8000dba:	f020 0001 	biceq.w	r0, r0, #1
 8000dbe:	4770      	bx	lr
 8000dc0:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000dc4:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dc8:	327f      	adds	r2, #127	; 0x7f
 8000dca:	bfc2      	ittt	gt
 8000dcc:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000dd0:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dd4:	4770      	bxgt	lr
 8000dd6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000dda:	f04f 0300 	mov.w	r3, #0
 8000dde:	3a01      	subs	r2, #1
 8000de0:	e737      	b.n	8000c52 <__aeabi_fmul+0x92>
 8000de2:	f092 0f00 	teq	r2, #0
 8000de6:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000dea:	bf02      	ittt	eq
 8000dec:	0040      	lsleq	r0, r0, #1
 8000dee:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000df2:	3a01      	subeq	r2, #1
 8000df4:	d0f9      	beq.n	8000dea <__aeabi_fdiv+0xc2>
 8000df6:	ea40 000c 	orr.w	r0, r0, ip
 8000dfa:	f093 0f00 	teq	r3, #0
 8000dfe:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e02:	bf02      	ittt	eq
 8000e04:	0049      	lsleq	r1, r1, #1
 8000e06:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e0a:	3b01      	subeq	r3, #1
 8000e0c:	d0f9      	beq.n	8000e02 <__aeabi_fdiv+0xda>
 8000e0e:	ea41 010c 	orr.w	r1, r1, ip
 8000e12:	e795      	b.n	8000d40 <__aeabi_fdiv+0x18>
 8000e14:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e18:	ea92 0f0c 	teq	r2, ip
 8000e1c:	d108      	bne.n	8000e30 <__aeabi_fdiv+0x108>
 8000e1e:	0242      	lsls	r2, r0, #9
 8000e20:	f47f af7d 	bne.w	8000d1e <__aeabi_fmul+0x15e>
 8000e24:	ea93 0f0c 	teq	r3, ip
 8000e28:	f47f af70 	bne.w	8000d0c <__aeabi_fmul+0x14c>
 8000e2c:	4608      	mov	r0, r1
 8000e2e:	e776      	b.n	8000d1e <__aeabi_fmul+0x15e>
 8000e30:	ea93 0f0c 	teq	r3, ip
 8000e34:	d104      	bne.n	8000e40 <__aeabi_fdiv+0x118>
 8000e36:	024b      	lsls	r3, r1, #9
 8000e38:	f43f af4c 	beq.w	8000cd4 <__aeabi_fmul+0x114>
 8000e3c:	4608      	mov	r0, r1
 8000e3e:	e76e      	b.n	8000d1e <__aeabi_fmul+0x15e>
 8000e40:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e44:	bf18      	it	ne
 8000e46:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e4a:	d1ca      	bne.n	8000de2 <__aeabi_fdiv+0xba>
 8000e4c:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000e50:	f47f af5c 	bne.w	8000d0c <__aeabi_fmul+0x14c>
 8000e54:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000e58:	f47f af3c 	bne.w	8000cd4 <__aeabi_fmul+0x114>
 8000e5c:	e75f      	b.n	8000d1e <__aeabi_fmul+0x15e>
 8000e5e:	bf00      	nop

08000e60 <__gesf2>:
 8000e60:	f04f 3cff 	mov.w	ip, #4294967295
 8000e64:	e006      	b.n	8000e74 <__cmpsf2+0x4>
 8000e66:	bf00      	nop

08000e68 <__lesf2>:
 8000e68:	f04f 0c01 	mov.w	ip, #1
 8000e6c:	e002      	b.n	8000e74 <__cmpsf2+0x4>
 8000e6e:	bf00      	nop

08000e70 <__cmpsf2>:
 8000e70:	f04f 0c01 	mov.w	ip, #1
 8000e74:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000e78:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000e7c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000e80:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000e84:	bf18      	it	ne
 8000e86:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000e8a:	d011      	beq.n	8000eb0 <__cmpsf2+0x40>
 8000e8c:	b001      	add	sp, #4
 8000e8e:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000e92:	bf18      	it	ne
 8000e94:	ea90 0f01 	teqne	r0, r1
 8000e98:	bf58      	it	pl
 8000e9a:	ebb2 0003 	subspl.w	r0, r2, r3
 8000e9e:	bf88      	it	hi
 8000ea0:	17c8      	asrhi	r0, r1, #31
 8000ea2:	bf38      	it	cc
 8000ea4:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000ea8:	bf18      	it	ne
 8000eaa:	f040 0001 	orrne.w	r0, r0, #1
 8000eae:	4770      	bx	lr
 8000eb0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000eb4:	d102      	bne.n	8000ebc <__cmpsf2+0x4c>
 8000eb6:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000eba:	d105      	bne.n	8000ec8 <__cmpsf2+0x58>
 8000ebc:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000ec0:	d1e4      	bne.n	8000e8c <__cmpsf2+0x1c>
 8000ec2:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000ec6:	d0e1      	beq.n	8000e8c <__cmpsf2+0x1c>
 8000ec8:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ecc:	4770      	bx	lr
 8000ece:	bf00      	nop

08000ed0 <__aeabi_cfrcmple>:
 8000ed0:	4684      	mov	ip, r0
 8000ed2:	4608      	mov	r0, r1
 8000ed4:	4661      	mov	r1, ip
 8000ed6:	e7ff      	b.n	8000ed8 <__aeabi_cfcmpeq>

08000ed8 <__aeabi_cfcmpeq>:
 8000ed8:	b50f      	push	{r0, r1, r2, r3, lr}
 8000eda:	f7ff ffc9 	bl	8000e70 <__cmpsf2>
 8000ede:	2800      	cmp	r0, #0
 8000ee0:	bf48      	it	mi
 8000ee2:	f110 0f00 	cmnmi.w	r0, #0
 8000ee6:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000ee8 <__aeabi_fcmpeq>:
 8000ee8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000eec:	f7ff fff4 	bl	8000ed8 <__aeabi_cfcmpeq>
 8000ef0:	bf0c      	ite	eq
 8000ef2:	2001      	moveq	r0, #1
 8000ef4:	2000      	movne	r0, #0
 8000ef6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000efa:	bf00      	nop

08000efc <__aeabi_fcmplt>:
 8000efc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f00:	f7ff ffea 	bl	8000ed8 <__aeabi_cfcmpeq>
 8000f04:	bf34      	ite	cc
 8000f06:	2001      	movcc	r0, #1
 8000f08:	2000      	movcs	r0, #0
 8000f0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f0e:	bf00      	nop

08000f10 <__aeabi_fcmple>:
 8000f10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f14:	f7ff ffe0 	bl	8000ed8 <__aeabi_cfcmpeq>
 8000f18:	bf94      	ite	ls
 8000f1a:	2001      	movls	r0, #1
 8000f1c:	2000      	movhi	r0, #0
 8000f1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f22:	bf00      	nop

08000f24 <__aeabi_fcmpge>:
 8000f24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f28:	f7ff ffd2 	bl	8000ed0 <__aeabi_cfrcmple>
 8000f2c:	bf94      	ite	ls
 8000f2e:	2001      	movls	r0, #1
 8000f30:	2000      	movhi	r0, #0
 8000f32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f36:	bf00      	nop

08000f38 <__aeabi_fcmpgt>:
 8000f38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f3c:	f7ff ffc8 	bl	8000ed0 <__aeabi_cfrcmple>
 8000f40:	bf34      	ite	cc
 8000f42:	2001      	movcc	r0, #1
 8000f44:	2000      	movcs	r0, #0
 8000f46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f4a:	bf00      	nop

08000f4c <__aeabi_f2iz>:
 8000f4c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000f50:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000f54:	d30f      	bcc.n	8000f76 <__aeabi_f2iz+0x2a>
 8000f56:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000f5a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000f5e:	d90d      	bls.n	8000f7c <__aeabi_f2iz+0x30>
 8000f60:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000f64:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000f68:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000f6c:	fa23 f002 	lsr.w	r0, r3, r2
 8000f70:	bf18      	it	ne
 8000f72:	4240      	negne	r0, r0
 8000f74:	4770      	bx	lr
 8000f76:	f04f 0000 	mov.w	r0, #0
 8000f7a:	4770      	bx	lr
 8000f7c:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000f80:	d101      	bne.n	8000f86 <__aeabi_f2iz+0x3a>
 8000f82:	0242      	lsls	r2, r0, #9
 8000f84:	d105      	bne.n	8000f92 <__aeabi_f2iz+0x46>
 8000f86:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000f8a:	bf08      	it	eq
 8000f8c:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000f90:	4770      	bx	lr
 8000f92:	f04f 0000 	mov.w	r0, #0
 8000f96:	4770      	bx	lr

08000f98 <__aeabi_f2uiz>:
 8000f98:	0042      	lsls	r2, r0, #1
 8000f9a:	d20e      	bcs.n	8000fba <__aeabi_f2uiz+0x22>
 8000f9c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000fa0:	d30b      	bcc.n	8000fba <__aeabi_f2uiz+0x22>
 8000fa2:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000fa6:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000faa:	d409      	bmi.n	8000fc0 <__aeabi_f2uiz+0x28>
 8000fac:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000fb0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000fb4:	fa23 f002 	lsr.w	r0, r3, r2
 8000fb8:	4770      	bx	lr
 8000fba:	f04f 0000 	mov.w	r0, #0
 8000fbe:	4770      	bx	lr
 8000fc0:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000fc4:	d101      	bne.n	8000fca <__aeabi_f2uiz+0x32>
 8000fc6:	0242      	lsls	r2, r0, #9
 8000fc8:	d102      	bne.n	8000fd0 <__aeabi_f2uiz+0x38>
 8000fca:	f04f 30ff 	mov.w	r0, #4294967295
 8000fce:	4770      	bx	lr
 8000fd0:	f04f 0000 	mov.w	r0, #0
 8000fd4:	4770      	bx	lr
 8000fd6:	bf00      	nop

08000fd8 <__aeabi_uldivmod>:
 8000fd8:	b953      	cbnz	r3, 8000ff0 <__aeabi_uldivmod+0x18>
 8000fda:	b94a      	cbnz	r2, 8000ff0 <__aeabi_uldivmod+0x18>
 8000fdc:	2900      	cmp	r1, #0
 8000fde:	bf08      	it	eq
 8000fe0:	2800      	cmpeq	r0, #0
 8000fe2:	bf1c      	itt	ne
 8000fe4:	f04f 31ff 	movne.w	r1, #4294967295
 8000fe8:	f04f 30ff 	movne.w	r0, #4294967295
 8000fec:	f000 b96e 	b.w	80012cc <__aeabi_idiv0>
 8000ff0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ff4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ff8:	f000 f806 	bl	8001008 <__udivmoddi4>
 8000ffc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8001000:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8001004:	b004      	add	sp, #16
 8001006:	4770      	bx	lr

08001008 <__udivmoddi4>:
 8001008:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800100c:	9e08      	ldr	r6, [sp, #32]
 800100e:	460d      	mov	r5, r1
 8001010:	4604      	mov	r4, r0
 8001012:	468e      	mov	lr, r1
 8001014:	2b00      	cmp	r3, #0
 8001016:	f040 8083 	bne.w	8001120 <__udivmoddi4+0x118>
 800101a:	428a      	cmp	r2, r1
 800101c:	4617      	mov	r7, r2
 800101e:	d947      	bls.n	80010b0 <__udivmoddi4+0xa8>
 8001020:	fab2 f382 	clz	r3, r2
 8001024:	b14b      	cbz	r3, 800103a <__udivmoddi4+0x32>
 8001026:	f1c3 0120 	rsb	r1, r3, #32
 800102a:	fa05 fe03 	lsl.w	lr, r5, r3
 800102e:	fa20 f101 	lsr.w	r1, r0, r1
 8001032:	409f      	lsls	r7, r3
 8001034:	ea41 0e0e 	orr.w	lr, r1, lr
 8001038:	409c      	lsls	r4, r3
 800103a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800103e:	fbbe fcf8 	udiv	ip, lr, r8
 8001042:	fa1f f987 	uxth.w	r9, r7
 8001046:	fb08 e21c 	mls	r2, r8, ip, lr
 800104a:	fb0c f009 	mul.w	r0, ip, r9
 800104e:	0c21      	lsrs	r1, r4, #16
 8001050:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
 8001054:	4290      	cmp	r0, r2
 8001056:	d90a      	bls.n	800106e <__udivmoddi4+0x66>
 8001058:	18ba      	adds	r2, r7, r2
 800105a:	f10c 31ff 	add.w	r1, ip, #4294967295
 800105e:	f080 8118 	bcs.w	8001292 <__udivmoddi4+0x28a>
 8001062:	4290      	cmp	r0, r2
 8001064:	f240 8115 	bls.w	8001292 <__udivmoddi4+0x28a>
 8001068:	f1ac 0c02 	sub.w	ip, ip, #2
 800106c:	443a      	add	r2, r7
 800106e:	1a12      	subs	r2, r2, r0
 8001070:	fbb2 f0f8 	udiv	r0, r2, r8
 8001074:	fb08 2210 	mls	r2, r8, r0, r2
 8001078:	fb00 f109 	mul.w	r1, r0, r9
 800107c:	b2a4      	uxth	r4, r4
 800107e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8001082:	42a1      	cmp	r1, r4
 8001084:	d909      	bls.n	800109a <__udivmoddi4+0x92>
 8001086:	193c      	adds	r4, r7, r4
 8001088:	f100 32ff 	add.w	r2, r0, #4294967295
 800108c:	f080 8103 	bcs.w	8001296 <__udivmoddi4+0x28e>
 8001090:	42a1      	cmp	r1, r4
 8001092:	f240 8100 	bls.w	8001296 <__udivmoddi4+0x28e>
 8001096:	3802      	subs	r0, #2
 8001098:	443c      	add	r4, r7
 800109a:	1a64      	subs	r4, r4, r1
 800109c:	2100      	movs	r1, #0
 800109e:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80010a2:	b11e      	cbz	r6, 80010ac <__udivmoddi4+0xa4>
 80010a4:	2200      	movs	r2, #0
 80010a6:	40dc      	lsrs	r4, r3
 80010a8:	e9c6 4200 	strd	r4, r2, [r6]
 80010ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80010b0:	b902      	cbnz	r2, 80010b4 <__udivmoddi4+0xac>
 80010b2:	deff      	udf	#255	; 0xff
 80010b4:	fab2 f382 	clz	r3, r2
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d14f      	bne.n	800115c <__udivmoddi4+0x154>
 80010bc:	1a8d      	subs	r5, r1, r2
 80010be:	2101      	movs	r1, #1
 80010c0:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80010c4:	fa1f f882 	uxth.w	r8, r2
 80010c8:	fbb5 fcfe 	udiv	ip, r5, lr
 80010cc:	fb0e 551c 	mls	r5, lr, ip, r5
 80010d0:	fb08 f00c 	mul.w	r0, r8, ip
 80010d4:	0c22      	lsrs	r2, r4, #16
 80010d6:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
 80010da:	42a8      	cmp	r0, r5
 80010dc:	d907      	bls.n	80010ee <__udivmoddi4+0xe6>
 80010de:	197d      	adds	r5, r7, r5
 80010e0:	f10c 32ff 	add.w	r2, ip, #4294967295
 80010e4:	d202      	bcs.n	80010ec <__udivmoddi4+0xe4>
 80010e6:	42a8      	cmp	r0, r5
 80010e8:	f200 80e9 	bhi.w	80012be <__udivmoddi4+0x2b6>
 80010ec:	4694      	mov	ip, r2
 80010ee:	1a2d      	subs	r5, r5, r0
 80010f0:	fbb5 f0fe 	udiv	r0, r5, lr
 80010f4:	fb0e 5510 	mls	r5, lr, r0, r5
 80010f8:	fb08 f800 	mul.w	r8, r8, r0
 80010fc:	b2a4      	uxth	r4, r4
 80010fe:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8001102:	45a0      	cmp	r8, r4
 8001104:	d907      	bls.n	8001116 <__udivmoddi4+0x10e>
 8001106:	193c      	adds	r4, r7, r4
 8001108:	f100 32ff 	add.w	r2, r0, #4294967295
 800110c:	d202      	bcs.n	8001114 <__udivmoddi4+0x10c>
 800110e:	45a0      	cmp	r8, r4
 8001110:	f200 80d9 	bhi.w	80012c6 <__udivmoddi4+0x2be>
 8001114:	4610      	mov	r0, r2
 8001116:	eba4 0408 	sub.w	r4, r4, r8
 800111a:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800111e:	e7c0      	b.n	80010a2 <__udivmoddi4+0x9a>
 8001120:	428b      	cmp	r3, r1
 8001122:	d908      	bls.n	8001136 <__udivmoddi4+0x12e>
 8001124:	2e00      	cmp	r6, #0
 8001126:	f000 80b1 	beq.w	800128c <__udivmoddi4+0x284>
 800112a:	2100      	movs	r1, #0
 800112c:	e9c6 0500 	strd	r0, r5, [r6]
 8001130:	4608      	mov	r0, r1
 8001132:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001136:	fab3 f183 	clz	r1, r3
 800113a:	2900      	cmp	r1, #0
 800113c:	d14b      	bne.n	80011d6 <__udivmoddi4+0x1ce>
 800113e:	42ab      	cmp	r3, r5
 8001140:	d302      	bcc.n	8001148 <__udivmoddi4+0x140>
 8001142:	4282      	cmp	r2, r0
 8001144:	f200 80b9 	bhi.w	80012ba <__udivmoddi4+0x2b2>
 8001148:	1a84      	subs	r4, r0, r2
 800114a:	eb65 0303 	sbc.w	r3, r5, r3
 800114e:	2001      	movs	r0, #1
 8001150:	469e      	mov	lr, r3
 8001152:	2e00      	cmp	r6, #0
 8001154:	d0aa      	beq.n	80010ac <__udivmoddi4+0xa4>
 8001156:	e9c6 4e00 	strd	r4, lr, [r6]
 800115a:	e7a7      	b.n	80010ac <__udivmoddi4+0xa4>
 800115c:	409f      	lsls	r7, r3
 800115e:	f1c3 0220 	rsb	r2, r3, #32
 8001162:	40d1      	lsrs	r1, r2
 8001164:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8001168:	fbb1 f0fe 	udiv	r0, r1, lr
 800116c:	fa1f f887 	uxth.w	r8, r7
 8001170:	fb0e 1110 	mls	r1, lr, r0, r1
 8001174:	fa24 f202 	lsr.w	r2, r4, r2
 8001178:	409d      	lsls	r5, r3
 800117a:	fb00 fc08 	mul.w	ip, r0, r8
 800117e:	432a      	orrs	r2, r5
 8001180:	0c15      	lsrs	r5, r2, #16
 8001182:	ea45 4501 	orr.w	r5, r5, r1, lsl #16
 8001186:	45ac      	cmp	ip, r5
 8001188:	fa04 f403 	lsl.w	r4, r4, r3
 800118c:	d909      	bls.n	80011a2 <__udivmoddi4+0x19a>
 800118e:	197d      	adds	r5, r7, r5
 8001190:	f100 31ff 	add.w	r1, r0, #4294967295
 8001194:	f080 808f 	bcs.w	80012b6 <__udivmoddi4+0x2ae>
 8001198:	45ac      	cmp	ip, r5
 800119a:	f240 808c 	bls.w	80012b6 <__udivmoddi4+0x2ae>
 800119e:	3802      	subs	r0, #2
 80011a0:	443d      	add	r5, r7
 80011a2:	eba5 050c 	sub.w	r5, r5, ip
 80011a6:	fbb5 f1fe 	udiv	r1, r5, lr
 80011aa:	fb0e 5c11 	mls	ip, lr, r1, r5
 80011ae:	fb01 f908 	mul.w	r9, r1, r8
 80011b2:	b295      	uxth	r5, r2
 80011b4:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 80011b8:	45a9      	cmp	r9, r5
 80011ba:	d907      	bls.n	80011cc <__udivmoddi4+0x1c4>
 80011bc:	197d      	adds	r5, r7, r5
 80011be:	f101 32ff 	add.w	r2, r1, #4294967295
 80011c2:	d274      	bcs.n	80012ae <__udivmoddi4+0x2a6>
 80011c4:	45a9      	cmp	r9, r5
 80011c6:	d972      	bls.n	80012ae <__udivmoddi4+0x2a6>
 80011c8:	3902      	subs	r1, #2
 80011ca:	443d      	add	r5, r7
 80011cc:	eba5 0509 	sub.w	r5, r5, r9
 80011d0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80011d4:	e778      	b.n	80010c8 <__udivmoddi4+0xc0>
 80011d6:	f1c1 0720 	rsb	r7, r1, #32
 80011da:	408b      	lsls	r3, r1
 80011dc:	fa22 fc07 	lsr.w	ip, r2, r7
 80011e0:	ea4c 0c03 	orr.w	ip, ip, r3
 80011e4:	fa25 f407 	lsr.w	r4, r5, r7
 80011e8:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80011ec:	fbb4 f9fe 	udiv	r9, r4, lr
 80011f0:	fa1f f88c 	uxth.w	r8, ip
 80011f4:	fb0e 4419 	mls	r4, lr, r9, r4
 80011f8:	fa20 f307 	lsr.w	r3, r0, r7
 80011fc:	fb09 fa08 	mul.w	sl, r9, r8
 8001200:	408d      	lsls	r5, r1
 8001202:	431d      	orrs	r5, r3
 8001204:	0c2b      	lsrs	r3, r5, #16
 8001206:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800120a:	45a2      	cmp	sl, r4
 800120c:	fa02 f201 	lsl.w	r2, r2, r1
 8001210:	fa00 f301 	lsl.w	r3, r0, r1
 8001214:	d909      	bls.n	800122a <__udivmoddi4+0x222>
 8001216:	eb1c 0404 	adds.w	r4, ip, r4
 800121a:	f109 30ff 	add.w	r0, r9, #4294967295
 800121e:	d248      	bcs.n	80012b2 <__udivmoddi4+0x2aa>
 8001220:	45a2      	cmp	sl, r4
 8001222:	d946      	bls.n	80012b2 <__udivmoddi4+0x2aa>
 8001224:	f1a9 0902 	sub.w	r9, r9, #2
 8001228:	4464      	add	r4, ip
 800122a:	eba4 040a 	sub.w	r4, r4, sl
 800122e:	fbb4 f0fe 	udiv	r0, r4, lr
 8001232:	fb0e 4410 	mls	r4, lr, r0, r4
 8001236:	fb00 fa08 	mul.w	sl, r0, r8
 800123a:	b2ad      	uxth	r5, r5
 800123c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8001240:	45a2      	cmp	sl, r4
 8001242:	d908      	bls.n	8001256 <__udivmoddi4+0x24e>
 8001244:	eb1c 0404 	adds.w	r4, ip, r4
 8001248:	f100 35ff 	add.w	r5, r0, #4294967295
 800124c:	d22d      	bcs.n	80012aa <__udivmoddi4+0x2a2>
 800124e:	45a2      	cmp	sl, r4
 8001250:	d92b      	bls.n	80012aa <__udivmoddi4+0x2a2>
 8001252:	3802      	subs	r0, #2
 8001254:	4464      	add	r4, ip
 8001256:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800125a:	fba0 8902 	umull	r8, r9, r0, r2
 800125e:	eba4 040a 	sub.w	r4, r4, sl
 8001262:	454c      	cmp	r4, r9
 8001264:	46c6      	mov	lr, r8
 8001266:	464d      	mov	r5, r9
 8001268:	d319      	bcc.n	800129e <__udivmoddi4+0x296>
 800126a:	d016      	beq.n	800129a <__udivmoddi4+0x292>
 800126c:	b15e      	cbz	r6, 8001286 <__udivmoddi4+0x27e>
 800126e:	ebb3 020e 	subs.w	r2, r3, lr
 8001272:	eb64 0405 	sbc.w	r4, r4, r5
 8001276:	fa04 f707 	lsl.w	r7, r4, r7
 800127a:	fa22 f301 	lsr.w	r3, r2, r1
 800127e:	431f      	orrs	r7, r3
 8001280:	40cc      	lsrs	r4, r1
 8001282:	e9c6 7400 	strd	r7, r4, [r6]
 8001286:	2100      	movs	r1, #0
 8001288:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800128c:	4631      	mov	r1, r6
 800128e:	4630      	mov	r0, r6
 8001290:	e70c      	b.n	80010ac <__udivmoddi4+0xa4>
 8001292:	468c      	mov	ip, r1
 8001294:	e6eb      	b.n	800106e <__udivmoddi4+0x66>
 8001296:	4610      	mov	r0, r2
 8001298:	e6ff      	b.n	800109a <__udivmoddi4+0x92>
 800129a:	4543      	cmp	r3, r8
 800129c:	d2e6      	bcs.n	800126c <__udivmoddi4+0x264>
 800129e:	ebb8 0e02 	subs.w	lr, r8, r2
 80012a2:	eb69 050c 	sbc.w	r5, r9, ip
 80012a6:	3801      	subs	r0, #1
 80012a8:	e7e0      	b.n	800126c <__udivmoddi4+0x264>
 80012aa:	4628      	mov	r0, r5
 80012ac:	e7d3      	b.n	8001256 <__udivmoddi4+0x24e>
 80012ae:	4611      	mov	r1, r2
 80012b0:	e78c      	b.n	80011cc <__udivmoddi4+0x1c4>
 80012b2:	4681      	mov	r9, r0
 80012b4:	e7b9      	b.n	800122a <__udivmoddi4+0x222>
 80012b6:	4608      	mov	r0, r1
 80012b8:	e773      	b.n	80011a2 <__udivmoddi4+0x19a>
 80012ba:	4608      	mov	r0, r1
 80012bc:	e749      	b.n	8001152 <__udivmoddi4+0x14a>
 80012be:	f1ac 0c02 	sub.w	ip, ip, #2
 80012c2:	443d      	add	r5, r7
 80012c4:	e713      	b.n	80010ee <__udivmoddi4+0xe6>
 80012c6:	3802      	subs	r0, #2
 80012c8:	443c      	add	r4, r7
 80012ca:	e724      	b.n	8001116 <__udivmoddi4+0x10e>

080012cc <__aeabi_idiv0>:
 80012cc:	4770      	bx	lr
 80012ce:	bf00      	nop

080012d0 <_Z16SBUS_RecieveBitsv>:
uint8_t SBUS_CorruptedPackage = false;
uint8_t SBUSNewPackage = false;


void SBUS_RecieveBits()
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b082      	sub	sp, #8
 80012d4:	af00      	add	r7, sp, #0
  //collect bits:

  SBUS_timerCount = TIM11->CNT + SBUS_StartTimeOffset;       //get current clock count register value + time offset
 80012d6:	4b1d      	ldr	r3, [pc, #116]	; (800134c <_Z16SBUS_RecieveBitsv+0x7c>)
 80012d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012da:	b29a      	uxth	r2, r3
 80012dc:	4b1c      	ldr	r3, [pc, #112]	; (8001350 <_Z16SBUS_RecieveBitsv+0x80>)
 80012de:	801a      	strh	r2, [r3, #0]
  SBUS_RxBitString[0] = true;
 80012e0:	4b1c      	ldr	r3, [pc, #112]	; (8001354 <_Z16SBUS_RecieveBitsv+0x84>)
 80012e2:	2201      	movs	r2, #1
 80012e4:	701a      	strb	r2, [r3, #0]
  //HAL_GPIO_TogglePin(ONBOARD_WRITE_4_GPIO_Port, ONBOARD_WRITE_4_Pin);     //debug pin
  for (size_t i = 1; i < SBUS_NumberOfBits; i++)
 80012e6:	2301      	movs	r3, #1
 80012e8:	607b      	str	r3, [r7, #4]
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80012f0:	d225      	bcs.n	800133e <_Z16SBUS_RecieveBitsv+0x6e>
  {
    HAL_GPIO_TogglePin(ONBOARD_WRITE_4_GPIO_Port, ONBOARD_WRITE_4_Pin);     //debug pin
 80012f2:	2140      	movs	r1, #64	; 0x40
 80012f4:	4818      	ldr	r0, [pc, #96]	; (8001358 <_Z16SBUS_RecieveBitsv+0x88>)
 80012f6:	f001 ff77 	bl	80031e8 <HAL_GPIO_TogglePin>
    SBUS_RxBitString[i] = ((ONBOARD_READ_IT_3_GPIO_Port->IDR & ONBOARD_READ_IT_3_Pin) != 0 ? true : false);     //if the pin is HIGH then the value is 1 else 0
 80012fa:	4b17      	ldr	r3, [pc, #92]	; (8001358 <_Z16SBUS_RecieveBitsv+0x88>)
 80012fc:	691b      	ldr	r3, [r3, #16]
 80012fe:	b2db      	uxtb	r3, r3
 8001300:	f003 0301 	and.w	r3, r3, #1
 8001304:	b2d9      	uxtb	r1, r3
 8001306:	4a13      	ldr	r2, [pc, #76]	; (8001354 <_Z16SBUS_RecieveBitsv+0x84>)
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	4413      	add	r3, r2
 800130c:	460a      	mov	r2, r1
 800130e:	701a      	strb	r2, [r3, #0]

    while ((TIM11->CNT - SBUS_timerCount) < 10)
 8001310:	4b0e      	ldr	r3, [pc, #56]	; (800134c <_Z16SBUS_RecieveBitsv+0x7c>)
 8001312:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001314:	4a0e      	ldr	r2, [pc, #56]	; (8001350 <_Z16SBUS_RecieveBitsv+0x80>)
 8001316:	8812      	ldrh	r2, [r2, #0]
 8001318:	1a9b      	subs	r3, r3, r2
 800131a:	2b09      	cmp	r3, #9
 800131c:	bf94      	ite	ls
 800131e:	2301      	movls	r3, #1
 8001320:	2300      	movhi	r3, #0
 8001322:	b2db      	uxtb	r3, r3
 8001324:	2b00      	cmp	r3, #0
 8001326:	d000      	beq.n	800132a <_Z16SBUS_RecieveBitsv+0x5a>
 8001328:	e7f2      	b.n	8001310 <_Z16SBUS_RecieveBitsv+0x40>
    {
    }
    SBUS_timerCount += 10;
 800132a:	4b09      	ldr	r3, [pc, #36]	; (8001350 <_Z16SBUS_RecieveBitsv+0x80>)
 800132c:	881b      	ldrh	r3, [r3, #0]
 800132e:	330a      	adds	r3, #10
 8001330:	b29a      	uxth	r2, r3
 8001332:	4b07      	ldr	r3, [pc, #28]	; (8001350 <_Z16SBUS_RecieveBitsv+0x80>)
 8001334:	801a      	strh	r2, [r3, #0]
  for (size_t i = 1; i < SBUS_NumberOfBits; i++)
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	3301      	adds	r3, #1
 800133a:	607b      	str	r3, [r7, #4]
 800133c:	e7d5      	b.n	80012ea <_Z16SBUS_RecieveBitsv+0x1a>
  }
  SBUSNewPackage = true;
 800133e:	4b07      	ldr	r3, [pc, #28]	; (800135c <_Z16SBUS_RecieveBitsv+0x8c>)
 8001340:	2201      	movs	r2, #1
 8001342:	701a      	strb	r2, [r3, #0]
}
 8001344:	bf00      	nop
 8001346:	3708      	adds	r7, #8
 8001348:	46bd      	mov	sp, r7
 800134a:	bd80      	pop	{r7, pc}
 800134c:	40014800 	.word	0x40014800
 8001350:	20000208 	.word	0x20000208
 8001354:	2000020c 	.word	0x2000020c
 8001358:	40020800 	.word	0x40020800
 800135c:	20000359 	.word	0x20000359

08001360 <_Z19SBUS_PostProcessingv>:

void SBUS_PostProcessing()
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b086      	sub	sp, #24
 8001364:	af00      	add	r7, sp, #0
    //check validity:

  SBUS_CorruptedPackage = false;                      //reset corrupted package flag
 8001366:	4b75      	ldr	r3, [pc, #468]	; (800153c <_Z19SBUS_PostProcessingv+0x1dc>)
 8001368:	2200      	movs	r2, #0
 800136a:	701a      	strb	r2, [r3, #0]
  for (size_t i = 0; i < SBUS_NumberOfBytes; i++)      //repeat for each byte
 800136c:	2300      	movs	r3, #0
 800136e:	617b      	str	r3, [r7, #20]
 8001370:	697b      	ldr	r3, [r7, #20]
 8001372:	2b18      	cmp	r3, #24
 8001374:	d85b      	bhi.n	800142e <_Z19SBUS_PostProcessingv+0xce>
  {
    if ((SBUS_RxBitString[0 + (i * SBUS_BitsPerByte)] == true) & (SBUS_RxBitString[10 + (i * SBUS_BitsPerByte)] == false) & (SBUS_RxBitString[11 + (i * SBUS_BitsPerByte)] == false))       //check start bit, 2 stop bit
 8001376:	697a      	ldr	r2, [r7, #20]
 8001378:	4613      	mov	r3, r2
 800137a:	005b      	lsls	r3, r3, #1
 800137c:	4413      	add	r3, r2
 800137e:	009b      	lsls	r3, r3, #2
 8001380:	461a      	mov	r2, r3
 8001382:	4b6f      	ldr	r3, [pc, #444]	; (8001540 <_Z19SBUS_PostProcessingv+0x1e0>)
 8001384:	5c9b      	ldrb	r3, [r3, r2]
 8001386:	2b01      	cmp	r3, #1
 8001388:	bf0c      	ite	eq
 800138a:	2301      	moveq	r3, #1
 800138c:	2300      	movne	r3, #0
 800138e:	b2d9      	uxtb	r1, r3
 8001390:	697a      	ldr	r2, [r7, #20]
 8001392:	4613      	mov	r3, r2
 8001394:	005b      	lsls	r3, r3, #1
 8001396:	4413      	add	r3, r2
 8001398:	009b      	lsls	r3, r3, #2
 800139a:	330a      	adds	r3, #10
 800139c:	4a68      	ldr	r2, [pc, #416]	; (8001540 <_Z19SBUS_PostProcessingv+0x1e0>)
 800139e:	5cd3      	ldrb	r3, [r2, r3]
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	bf0c      	ite	eq
 80013a4:	2301      	moveq	r3, #1
 80013a6:	2300      	movne	r3, #0
 80013a8:	b2db      	uxtb	r3, r3
 80013aa:	400b      	ands	r3, r1
 80013ac:	b2db      	uxtb	r3, r3
 80013ae:	4619      	mov	r1, r3
 80013b0:	697a      	ldr	r2, [r7, #20]
 80013b2:	4613      	mov	r3, r2
 80013b4:	005b      	lsls	r3, r3, #1
 80013b6:	4413      	add	r3, r2
 80013b8:	009b      	lsls	r3, r3, #2
 80013ba:	330b      	adds	r3, #11
 80013bc:	4a60      	ldr	r2, [pc, #384]	; (8001540 <_Z19SBUS_PostProcessingv+0x1e0>)
 80013be:	5cd3      	ldrb	r3, [r2, r3]
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	bf0c      	ite	eq
 80013c4:	2301      	moveq	r3, #1
 80013c6:	2300      	movne	r3, #0
 80013c8:	b2db      	uxtb	r3, r3
 80013ca:	400b      	ands	r3, r1
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d027      	beq.n	8001420 <_Z19SBUS_PostProcessingv+0xc0>
    {
      uint8_t parityCheck = false;
 80013d0:	2300      	movs	r3, #0
 80013d2:	74fb      	strb	r3, [r7, #19]
      for (size_t x = 0; x < 8; x++)                                              //generate parity from 8 bits
 80013d4:	2300      	movs	r3, #0
 80013d6:	60fb      	str	r3, [r7, #12]
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	2b07      	cmp	r3, #7
 80013dc:	d811      	bhi.n	8001402 <_Z19SBUS_PostProcessingv+0xa2>
      {
        parityCheck ^= SBUS_RxBitString[1 + x + (i * SBUS_BitsPerByte)];
 80013de:	697a      	ldr	r2, [r7, #20]
 80013e0:	4613      	mov	r3, r2
 80013e2:	005b      	lsls	r3, r3, #1
 80013e4:	4413      	add	r3, r2
 80013e6:	009b      	lsls	r3, r3, #2
 80013e8:	461a      	mov	r2, r3
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	4413      	add	r3, r2
 80013ee:	3301      	adds	r3, #1
 80013f0:	4a53      	ldr	r2, [pc, #332]	; (8001540 <_Z19SBUS_PostProcessingv+0x1e0>)
 80013f2:	5cd2      	ldrb	r2, [r2, r3]
 80013f4:	7cfb      	ldrb	r3, [r7, #19]
 80013f6:	4053      	eors	r3, r2
 80013f8:	74fb      	strb	r3, [r7, #19]
      for (size_t x = 0; x < 8; x++)                                              //generate parity from 8 bits
 80013fa:	68fb      	ldr	r3, [r7, #12]
 80013fc:	3301      	adds	r3, #1
 80013fe:	60fb      	str	r3, [r7, #12]
 8001400:	e7ea      	b.n	80013d8 <_Z19SBUS_PostProcessingv+0x78>
      }
      if (parityCheck == SBUS_RxBitString[9 + (i * SBUS_BitsPerByte)])            //if parity fails set corrupted flag
 8001402:	697a      	ldr	r2, [r7, #20]
 8001404:	4613      	mov	r3, r2
 8001406:	005b      	lsls	r3, r3, #1
 8001408:	4413      	add	r3, r2
 800140a:	009b      	lsls	r3, r3, #2
 800140c:	3309      	adds	r3, #9
 800140e:	4a4c      	ldr	r2, [pc, #304]	; (8001540 <_Z19SBUS_PostProcessingv+0x1e0>)
 8001410:	5cd3      	ldrb	r3, [r2, r3]
 8001412:	7cfa      	ldrb	r2, [r7, #19]
 8001414:	429a      	cmp	r2, r3
 8001416:	d106      	bne.n	8001426 <_Z19SBUS_PostProcessingv+0xc6>
      {
        SBUS_CorruptedPackage = true;
 8001418:	4b48      	ldr	r3, [pc, #288]	; (800153c <_Z19SBUS_PostProcessingv+0x1dc>)
 800141a:	2201      	movs	r2, #1
 800141c:	701a      	strb	r2, [r3, #0]
 800141e:	e002      	b.n	8001426 <_Z19SBUS_PostProcessingv+0xc6>
      }
    }
    else                                                                            //if start or stop bits fail set corrupted flag
    {
      SBUS_CorruptedPackage = true;
 8001420:	4b46      	ldr	r3, [pc, #280]	; (800153c <_Z19SBUS_PostProcessingv+0x1dc>)
 8001422:	2201      	movs	r2, #1
 8001424:	701a      	strb	r2, [r3, #0]
  for (size_t i = 0; i < SBUS_NumberOfBytes; i++)      //repeat for each byte
 8001426:	697b      	ldr	r3, [r7, #20]
 8001428:	3301      	adds	r3, #1
 800142a:	617b      	str	r3, [r7, #20]
 800142c:	e7a0      	b.n	8001370 <_Z19SBUS_PostProcessingv+0x10>
    }
  }
  
  //assemble channels:

  if (SBUS_CorruptedPackage == false)
 800142e:	4b43      	ldr	r3, [pc, #268]	; (800153c <_Z19SBUS_PostProcessingv+0x1dc>)
 8001430:	781b      	ldrb	r3, [r3, #0]
 8001432:	2b00      	cmp	r3, #0
 8001434:	d17a      	bne.n	800152c <_Z19SBUS_PostProcessingv+0x1cc>
  {
    uint8_t byteNumber = 0;         //0 to 21
 8001436:	2300      	movs	r3, #0
 8001438:	72fb      	strb	r3, [r7, #11]
    uint8_t bitNumber = 0;          //0(LSB) to 7/(MSB)
 800143a:	2300      	movs	r3, #0
 800143c:	72bb      	strb	r3, [r7, #10]
    for (size_t i = 0; i < SBUS_NumberOfChannels; i++)
 800143e:	2300      	movs	r3, #0
 8001440:	607b      	str	r3, [r7, #4]
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	2b07      	cmp	r3, #7
 8001446:	d871      	bhi.n	800152c <_Z19SBUS_PostProcessingv+0x1cc>
    {
      uint8_t bitInChannel = 0;   //0(LSB) to 10(MSB)
 8001448:	2300      	movs	r3, #0
 800144a:	70fb      	strb	r3, [r7, #3]
      SBUS_TempChannels[i] = 0;
 800144c:	4a3d      	ldr	r2, [pc, #244]	; (8001544 <_Z19SBUS_PostProcessingv+0x1e4>)
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	2100      	movs	r1, #0
 8001452:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
      
      while (bitInChannel <= 10)
 8001456:	78fb      	ldrb	r3, [r7, #3]
 8001458:	2b0a      	cmp	r3, #10
 800145a:	d843      	bhi.n	80014e4 <_Z19SBUS_PostProcessingv+0x184>
      {
        if (bitNumber <= 7)
 800145c:	7abb      	ldrb	r3, [r7, #10]
 800145e:	2b07      	cmp	r3, #7
 8001460:	d81a      	bhi.n	8001498 <_Z19SBUS_PostProcessingv+0x138>
        {
          //transfer bit
          SBUS_TempChannels[i] |= SBUS_RxBitString[13 + (bitNumber) + (byteNumber * SBUS_BitsPerByte)] << bitInChannel;
 8001462:	4a38      	ldr	r2, [pc, #224]	; (8001544 <_Z19SBUS_PostProcessingv+0x1e4>)
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	f932 1013 	ldrsh.w	r1, [r2, r3, lsl #1]
 800146a:	7abb      	ldrb	r3, [r7, #10]
 800146c:	f103 000d 	add.w	r0, r3, #13
 8001470:	7afa      	ldrb	r2, [r7, #11]
 8001472:	4613      	mov	r3, r2
 8001474:	005b      	lsls	r3, r3, #1
 8001476:	4413      	add	r3, r2
 8001478:	009b      	lsls	r3, r3, #2
 800147a:	4403      	add	r3, r0
 800147c:	4a30      	ldr	r2, [pc, #192]	; (8001540 <_Z19SBUS_PostProcessingv+0x1e0>)
 800147e:	5cd3      	ldrb	r3, [r2, r3]
 8001480:	461a      	mov	r2, r3
 8001482:	78fb      	ldrb	r3, [r7, #3]
 8001484:	fa02 f303 	lsl.w	r3, r2, r3
 8001488:	b21b      	sxth	r3, r3
 800148a:	430b      	orrs	r3, r1
 800148c:	b219      	sxth	r1, r3
 800148e:	4a2d      	ldr	r2, [pc, #180]	; (8001544 <_Z19SBUS_PostProcessingv+0x1e4>)
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8001496:	e01e      	b.n	80014d6 <_Z19SBUS_PostProcessingv+0x176>
        }
        else
        {
          byteNumber ++;
 8001498:	7afb      	ldrb	r3, [r7, #11]
 800149a:	3301      	adds	r3, #1
 800149c:	72fb      	strb	r3, [r7, #11]
          bitNumber = 0;
 800149e:	2300      	movs	r3, #0
 80014a0:	72bb      	strb	r3, [r7, #10]
          //transfer bit
          SBUS_TempChannels[i] |= SBUS_RxBitString[13 + (bitNumber) + (byteNumber * SBUS_BitsPerByte)] << bitInChannel;
 80014a2:	4a28      	ldr	r2, [pc, #160]	; (8001544 <_Z19SBUS_PostProcessingv+0x1e4>)
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	f932 1013 	ldrsh.w	r1, [r2, r3, lsl #1]
 80014aa:	7abb      	ldrb	r3, [r7, #10]
 80014ac:	f103 000d 	add.w	r0, r3, #13
 80014b0:	7afa      	ldrb	r2, [r7, #11]
 80014b2:	4613      	mov	r3, r2
 80014b4:	005b      	lsls	r3, r3, #1
 80014b6:	4413      	add	r3, r2
 80014b8:	009b      	lsls	r3, r3, #2
 80014ba:	4403      	add	r3, r0
 80014bc:	4a20      	ldr	r2, [pc, #128]	; (8001540 <_Z19SBUS_PostProcessingv+0x1e0>)
 80014be:	5cd3      	ldrb	r3, [r2, r3]
 80014c0:	461a      	mov	r2, r3
 80014c2:	78fb      	ldrb	r3, [r7, #3]
 80014c4:	fa02 f303 	lsl.w	r3, r2, r3
 80014c8:	b21b      	sxth	r3, r3
 80014ca:	430b      	orrs	r3, r1
 80014cc:	b219      	sxth	r1, r3
 80014ce:	4a1d      	ldr	r2, [pc, #116]	; (8001544 <_Z19SBUS_PostProcessingv+0x1e4>)
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        }
        bitNumber ++;
 80014d6:	7abb      	ldrb	r3, [r7, #10]
 80014d8:	3301      	adds	r3, #1
 80014da:	72bb      	strb	r3, [r7, #10]
        bitInChannel ++;
 80014dc:	78fb      	ldrb	r3, [r7, #3]
 80014de:	3301      	adds	r3, #1
 80014e0:	70fb      	strb	r3, [r7, #3]
      while (bitInChannel <= 10)
 80014e2:	e7b8      	b.n	8001456 <_Z19SBUS_PostProcessingv+0xf6>
      }
      
      SBUS_TempChannels[i] = ((float)(SBUS_TempChannels[i] - 1054) * ((float)-1000 / (float)821));    //map from 233, 1875 to -1000, 1000
 80014e4:	4a17      	ldr	r2, [pc, #92]	; (8001544 <_Z19SBUS_PostProcessingv+0x1e4>)
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80014ec:	f2a3 431e 	subw	r3, r3, #1054	; 0x41e
 80014f0:	4618      	mov	r0, r3
 80014f2:	f7ff fb11 	bl	8000b18 <__aeabi_i2f>
 80014f6:	4603      	mov	r3, r0
 80014f8:	4913      	ldr	r1, [pc, #76]	; (8001548 <_Z19SBUS_PostProcessingv+0x1e8>)
 80014fa:	4618      	mov	r0, r3
 80014fc:	f7ff fb60 	bl	8000bc0 <__aeabi_fmul>
 8001500:	4603      	mov	r3, r0
 8001502:	4618      	mov	r0, r3
 8001504:	f7ff fd22 	bl	8000f4c <__aeabi_f2iz>
 8001508:	4603      	mov	r3, r0
 800150a:	b219      	sxth	r1, r3
 800150c:	4a0d      	ldr	r2, [pc, #52]	; (8001544 <_Z19SBUS_PostProcessingv+0x1e4>)
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
      SBUS_Channels[i] = SBUS_TempChannels[i];
 8001514:	4a0b      	ldr	r2, [pc, #44]	; (8001544 <_Z19SBUS_PostProcessingv+0x1e4>)
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	f932 1013 	ldrsh.w	r1, [r2, r3, lsl #1]
 800151c:	4a0b      	ldr	r2, [pc, #44]	; (800154c <_Z19SBUS_PostProcessingv+0x1ec>)
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for (size_t i = 0; i < SBUS_NumberOfChannels; i++)
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	3301      	adds	r3, #1
 8001528:	607b      	str	r3, [r7, #4]
 800152a:	e78a      	b.n	8001442 <_Z19SBUS_PostProcessingv+0xe2>
    }
  }
  SBUSNewPackage = false;
 800152c:	4b08      	ldr	r3, [pc, #32]	; (8001550 <_Z19SBUS_PostProcessingv+0x1f0>)
 800152e:	2200      	movs	r2, #0
 8001530:	701a      	strb	r2, [r3, #0]
 8001532:	bf00      	nop
 8001534:	3718      	adds	r7, #24
 8001536:	46bd      	mov	sp, r7
 8001538:	bd80      	pop	{r7, pc}
 800153a:	bf00      	nop
 800153c:	20000358 	.word	0x20000358
 8001540:	2000020c 	.word	0x2000020c
 8001544:	20000338 	.word	0x20000338
 8001548:	bf9be84d 	.word	0xbf9be84d
 800154c:	20000348 	.word	0x20000348
 8001550:	20000359 	.word	0x20000359

08001554 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001558:	f000 ffd6 	bl	8002508 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800155c:	f000 f824 	bl	80015a8 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001560:	f000 f968 	bl	8001834 <_ZL12MX_GPIO_Initv>
  MX_USB_DEVICE_Init();
 8001564:	f007 fdcc 	bl	8009100 <MX_USB_DEVICE_Init>
  MX_ADC1_Init();
 8001568:	f000 f87a 	bl	8001660 <_ZL12MX_ADC1_Initv>
  MX_I2C1_Init();
 800156c:	f000 f8b6 	bl	80016dc <_ZL12MX_I2C1_Initv>
  MX_TIM11_Init();
 8001570:	f000 f8e8 	bl	8001744 <_ZL13MX_TIM11_Initv>
  MX_TIM13_Init();
 8001574:	f000 f90e 	bl	8001794 <_ZL13MX_TIM13_Initv>
  MX_TIM14_Init();
 8001578:	f000 f934 	bl	80017e4 <_ZL13MX_TIM14_Initv>

  MPU6050_init();
 800157c:	f000 fa0c 	bl	8001998 <_ZL12MPU6050_initv>


  /* Initialize interrupts */
  MX_NVIC_Init();
 8001580:	f000 f862 	bl	8001648 <_ZL12MX_NVIC_Initv>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim14);
 8001584:	4805      	ldr	r0, [pc, #20]	; (800159c <main+0x48>)
 8001586:	f004 fc6f 	bl	8005e68 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim13);
 800158a:	4805      	ldr	r0, [pc, #20]	; (80015a0 <main+0x4c>)
 800158c:	f004 fc6c 	bl	8005e68 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start(&htim11);
 8001590:	4804      	ldr	r0, [pc, #16]	; (80015a4 <main+0x50>)
 8001592:	f004 fc03 	bl	8005d9c <HAL_TIM_Base_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    loop();
 8001596:	f000 fc11 	bl	8001dbc <_Z4loopv>
 800159a:	e7fc      	b.n	8001596 <main+0x42>
 800159c:	20000488 	.word	0x20000488
 80015a0:	20000440 	.word	0x20000440
 80015a4:	200003f8 	.word	0x200003f8

080015a8 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b092      	sub	sp, #72	; 0x48
 80015ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80015ae:	f107 0318 	add.w	r3, r7, #24
 80015b2:	2230      	movs	r2, #48	; 0x30
 80015b4:	2100      	movs	r1, #0
 80015b6:	4618      	mov	r0, r3
 80015b8:	f008 fbf0 	bl	8009d9c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80015bc:	1d3b      	adds	r3, r7, #4
 80015be:	2200      	movs	r2, #0
 80015c0:	601a      	str	r2, [r3, #0]
 80015c2:	605a      	str	r2, [r3, #4]
 80015c4:	609a      	str	r2, [r3, #8]
 80015c6:	60da      	str	r2, [r3, #12]
 80015c8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80015ca:	2301      	movs	r3, #1
 80015cc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80015ce:	2301      	movs	r3, #1
 80015d0:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80015d2:	2302      	movs	r3, #2
 80015d4:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80015d6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80015da:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLM = 16;
 80015dc:	2310      	movs	r3, #16
 80015de:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLN = 192;
 80015e0:	23c0      	movs	r3, #192	; 0xc0
 80015e2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80015e4:	2302      	movs	r3, #2
 80015e6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80015e8:	2304      	movs	r3, #4
 80015ea:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80015ec:	f107 0318 	add.w	r3, r7, #24
 80015f0:	4618      	mov	r0, r3
 80015f2:	f003 ff15 	bl	8005420 <HAL_RCC_OscConfig>
 80015f6:	4603      	mov	r3, r0
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	bf14      	ite	ne
 80015fc:	2301      	movne	r3, #1
 80015fe:	2300      	moveq	r3, #0
 8001600:	b2db      	uxtb	r3, r3
 8001602:	2b00      	cmp	r3, #0
 8001604:	d001      	beq.n	800160a <_Z18SystemClock_Configv+0x62>
  {
    Error_Handler();
 8001606:	f000 fb97 	bl	8001d38 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800160a:	230f      	movs	r3, #15
 800160c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 800160e:	2301      	movs	r3, #1
 8001610:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001612:	2300      	movs	r3, #0
 8001614:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001616:	2300      	movs	r3, #0
 8001618:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800161a:	2300      	movs	r3, #0
 800161c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800161e:	1d3b      	adds	r3, r7, #4
 8001620:	2100      	movs	r1, #0
 8001622:	4618      	mov	r0, r3
 8001624:	f004 f94c 	bl	80058c0 <HAL_RCC_ClockConfig>
 8001628:	4603      	mov	r3, r0
 800162a:	2b00      	cmp	r3, #0
 800162c:	bf14      	ite	ne
 800162e:	2301      	movne	r3, #1
 8001630:	2300      	moveq	r3, #0
 8001632:	b2db      	uxtb	r3, r3
 8001634:	2b00      	cmp	r3, #0
 8001636:	d001      	beq.n	800163c <_Z18SystemClock_Configv+0x94>
  {
    Error_Handler();
 8001638:	f000 fb7e 	bl	8001d38 <Error_Handler>
  }
  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 800163c:	f004 fa2c 	bl	8005a98 <HAL_RCC_EnableCSS>
}
 8001640:	bf00      	nop
 8001642:	3748      	adds	r7, #72	; 0x48
 8001644:	46bd      	mov	sp, r7
 8001646:	bd80      	pop	{r7, pc}

08001648 <_ZL12MX_NVIC_Initv>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	af00      	add	r7, sp, #0
  /* EXTI0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 800164c:	2200      	movs	r2, #0
 800164e:	2100      	movs	r1, #0
 8001650:	2006      	movs	r0, #6
 8001652:	f001 fbdc 	bl	8002e0e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001656:	2006      	movs	r0, #6
 8001658:	f001 fbf5 	bl	8002e46 <HAL_NVIC_EnableIRQ>
}
 800165c:	bf00      	nop
 800165e:	bd80      	pop	{r7, pc}

08001660 <_ZL12MX_ADC1_Initv>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001664:	4b1a      	ldr	r3, [pc, #104]	; (80016d0 <_ZL12MX_ADC1_Initv+0x70>)
 8001666:	4a1b      	ldr	r2, [pc, #108]	; (80016d4 <_ZL12MX_ADC1_Initv+0x74>)
 8001668:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800166a:	4b19      	ldr	r3, [pc, #100]	; (80016d0 <_ZL12MX_ADC1_Initv+0x70>)
 800166c:	2200      	movs	r2, #0
 800166e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001670:	4b17      	ldr	r3, [pc, #92]	; (80016d0 <_ZL12MX_ADC1_Initv+0x70>)
 8001672:	2200      	movs	r2, #0
 8001674:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8001676:	4b16      	ldr	r3, [pc, #88]	; (80016d0 <_ZL12MX_ADC1_Initv+0x70>)
 8001678:	2201      	movs	r2, #1
 800167a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800167c:	4b14      	ldr	r3, [pc, #80]	; (80016d0 <_ZL12MX_ADC1_Initv+0x70>)
 800167e:	2201      	movs	r2, #1
 8001680:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001682:	4b13      	ldr	r3, [pc, #76]	; (80016d0 <_ZL12MX_ADC1_Initv+0x70>)
 8001684:	2200      	movs	r2, #0
 8001686:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800168a:	4b11      	ldr	r3, [pc, #68]	; (80016d0 <_ZL12MX_ADC1_Initv+0x70>)
 800168c:	2200      	movs	r2, #0
 800168e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001690:	4b0f      	ldr	r3, [pc, #60]	; (80016d0 <_ZL12MX_ADC1_Initv+0x70>)
 8001692:	4a11      	ldr	r2, [pc, #68]	; (80016d8 <_ZL12MX_ADC1_Initv+0x78>)
 8001694:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001696:	4b0e      	ldr	r3, [pc, #56]	; (80016d0 <_ZL12MX_ADC1_Initv+0x70>)
 8001698:	2200      	movs	r2, #0
 800169a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800169c:	4b0c      	ldr	r3, [pc, #48]	; (80016d0 <_ZL12MX_ADC1_Initv+0x70>)
 800169e:	2201      	movs	r2, #1
 80016a0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80016a2:	4b0b      	ldr	r3, [pc, #44]	; (80016d0 <_ZL12MX_ADC1_Initv+0x70>)
 80016a4:	2200      	movs	r2, #0
 80016a6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80016aa:	4b09      	ldr	r3, [pc, #36]	; (80016d0 <_ZL12MX_ADC1_Initv+0x70>)
 80016ac:	2201      	movs	r2, #1
 80016ae:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80016b0:	4807      	ldr	r0, [pc, #28]	; (80016d0 <_ZL12MX_ADC1_Initv+0x70>)
 80016b2:	f000 ffbb 	bl	800262c <HAL_ADC_Init>
 80016b6:	4603      	mov	r3, r0
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	bf14      	ite	ne
 80016bc:	2301      	movne	r3, #1
 80016be:	2300      	moveq	r3, #0
 80016c0:	b2db      	uxtb	r3, r3
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d001      	beq.n	80016ca <_ZL12MX_ADC1_Initv+0x6a>
  {
    Error_Handler();
 80016c6:	f000 fb37 	bl	8001d38 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80016ca:	bf00      	nop
 80016cc:	bd80      	pop	{r7, pc}
 80016ce:	bf00      	nop
 80016d0:	2000035c 	.word	0x2000035c
 80016d4:	40012000 	.word	0x40012000
 80016d8:	0f000001 	.word	0x0f000001

080016dc <_ZL12MX_I2C1_Initv>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80016e0:	4b15      	ldr	r3, [pc, #84]	; (8001738 <_ZL12MX_I2C1_Initv+0x5c>)
 80016e2:	4a16      	ldr	r2, [pc, #88]	; (800173c <_ZL12MX_I2C1_Initv+0x60>)
 80016e4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80016e6:	4b14      	ldr	r3, [pc, #80]	; (8001738 <_ZL12MX_I2C1_Initv+0x5c>)
 80016e8:	4a15      	ldr	r2, [pc, #84]	; (8001740 <_ZL12MX_I2C1_Initv+0x64>)
 80016ea:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80016ec:	4b12      	ldr	r3, [pc, #72]	; (8001738 <_ZL12MX_I2C1_Initv+0x5c>)
 80016ee:	2200      	movs	r2, #0
 80016f0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80016f2:	4b11      	ldr	r3, [pc, #68]	; (8001738 <_ZL12MX_I2C1_Initv+0x5c>)
 80016f4:	2200      	movs	r2, #0
 80016f6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80016f8:	4b0f      	ldr	r3, [pc, #60]	; (8001738 <_ZL12MX_I2C1_Initv+0x5c>)
 80016fa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80016fe:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001700:	4b0d      	ldr	r3, [pc, #52]	; (8001738 <_ZL12MX_I2C1_Initv+0x5c>)
 8001702:	2200      	movs	r2, #0
 8001704:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001706:	4b0c      	ldr	r3, [pc, #48]	; (8001738 <_ZL12MX_I2C1_Initv+0x5c>)
 8001708:	2200      	movs	r2, #0
 800170a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800170c:	4b0a      	ldr	r3, [pc, #40]	; (8001738 <_ZL12MX_I2C1_Initv+0x5c>)
 800170e:	2200      	movs	r2, #0
 8001710:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001712:	4b09      	ldr	r3, [pc, #36]	; (8001738 <_ZL12MX_I2C1_Initv+0x5c>)
 8001714:	2200      	movs	r2, #0
 8001716:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001718:	4807      	ldr	r0, [pc, #28]	; (8001738 <_ZL12MX_I2C1_Initv+0x5c>)
 800171a:	f001 fd97 	bl	800324c <HAL_I2C_Init>
 800171e:	4603      	mov	r3, r0
 8001720:	2b00      	cmp	r3, #0
 8001722:	bf14      	ite	ne
 8001724:	2301      	movne	r3, #1
 8001726:	2300      	moveq	r3, #0
 8001728:	b2db      	uxtb	r3, r3
 800172a:	2b00      	cmp	r3, #0
 800172c:	d001      	beq.n	8001732 <_ZL12MX_I2C1_Initv+0x56>
  {
    Error_Handler();
 800172e:	f000 fb03 	bl	8001d38 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001732:	bf00      	nop
 8001734:	bd80      	pop	{r7, pc}
 8001736:	bf00      	nop
 8001738:	200003a4 	.word	0x200003a4
 800173c:	40005400 	.word	0x40005400
 8001740:	00061a80 	.word	0x00061a80

08001744 <_ZL13MX_TIM11_Initv>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8001748:	4b10      	ldr	r3, [pc, #64]	; (800178c <_ZL13MX_TIM11_Initv+0x48>)
 800174a:	4a11      	ldr	r2, [pc, #68]	; (8001790 <_ZL13MX_TIM11_Initv+0x4c>)
 800174c:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 16 - 1;
 800174e:	4b0f      	ldr	r3, [pc, #60]	; (800178c <_ZL13MX_TIM11_Initv+0x48>)
 8001750:	220f      	movs	r2, #15
 8001752:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001754:	4b0d      	ldr	r3, [pc, #52]	; (800178c <_ZL13MX_TIM11_Initv+0x48>)
 8001756:	2200      	movs	r2, #0
 8001758:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 65535;
 800175a:	4b0c      	ldr	r3, [pc, #48]	; (800178c <_ZL13MX_TIM11_Initv+0x48>)
 800175c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001760:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001762:	4b0a      	ldr	r3, [pc, #40]	; (800178c <_ZL13MX_TIM11_Initv+0x48>)
 8001764:	2200      	movs	r2, #0
 8001766:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001768:	4b08      	ldr	r3, [pc, #32]	; (800178c <_ZL13MX_TIM11_Initv+0x48>)
 800176a:	2200      	movs	r2, #0
 800176c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 800176e:	4807      	ldr	r0, [pc, #28]	; (800178c <_ZL13MX_TIM11_Initv+0x48>)
 8001770:	f004 fac4 	bl	8005cfc <HAL_TIM_Base_Init>
 8001774:	4603      	mov	r3, r0
 8001776:	2b00      	cmp	r3, #0
 8001778:	bf14      	ite	ne
 800177a:	2301      	movne	r3, #1
 800177c:	2300      	moveq	r3, #0
 800177e:	b2db      	uxtb	r3, r3
 8001780:	2b00      	cmp	r3, #0
 8001782:	d001      	beq.n	8001788 <_ZL13MX_TIM11_Initv+0x44>
  {
    Error_Handler();
 8001784:	f000 fad8 	bl	8001d38 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 8001788:	bf00      	nop
 800178a:	bd80      	pop	{r7, pc}
 800178c:	200003f8 	.word	0x200003f8
 8001790:	40014800 	.word	0x40014800

08001794 <_ZL13MX_TIM13_Initv>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	af00      	add	r7, sp, #0
  /* USER CODE END TIM13_Init 0 */

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8001798:	4b10      	ldr	r3, [pc, #64]	; (80017dc <_ZL13MX_TIM13_Initv+0x48>)
 800179a:	4a11      	ldr	r2, [pc, #68]	; (80017e0 <_ZL13MX_TIM13_Initv+0x4c>)
 800179c:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 16 - 1;
 800179e:	4b0f      	ldr	r3, [pc, #60]	; (80017dc <_ZL13MX_TIM13_Initv+0x48>)
 80017a0:	220f      	movs	r2, #15
 80017a2:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017a4:	4b0d      	ldr	r3, [pc, #52]	; (80017dc <_ZL13MX_TIM13_Initv+0x48>)
 80017a6:	2200      	movs	r2, #0
 80017a8:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 65535;
 80017aa:	4b0c      	ldr	r3, [pc, #48]	; (80017dc <_ZL13MX_TIM13_Initv+0x48>)
 80017ac:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80017b0:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017b2:	4b0a      	ldr	r3, [pc, #40]	; (80017dc <_ZL13MX_TIM13_Initv+0x48>)
 80017b4:	2200      	movs	r2, #0
 80017b6:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017b8:	4b08      	ldr	r3, [pc, #32]	; (80017dc <_ZL13MX_TIM13_Initv+0x48>)
 80017ba:	2200      	movs	r2, #0
 80017bc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 80017be:	4807      	ldr	r0, [pc, #28]	; (80017dc <_ZL13MX_TIM13_Initv+0x48>)
 80017c0:	f004 fa9c 	bl	8005cfc <HAL_TIM_Base_Init>
 80017c4:	4603      	mov	r3, r0
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	bf14      	ite	ne
 80017ca:	2301      	movne	r3, #1
 80017cc:	2300      	moveq	r3, #0
 80017ce:	b2db      	uxtb	r3, r3
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d001      	beq.n	80017d8 <_ZL13MX_TIM13_Initv+0x44>
  {
    Error_Handler();
 80017d4:	f000 fab0 	bl	8001d38 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 80017d8:	bf00      	nop
 80017da:	bd80      	pop	{r7, pc}
 80017dc:	20000440 	.word	0x20000440
 80017e0:	40001c00 	.word	0x40001c00

080017e4 <_ZL13MX_TIM14_Initv>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 80017e8:	4b10      	ldr	r3, [pc, #64]	; (800182c <_ZL13MX_TIM14_Initv+0x48>)
 80017ea:	4a11      	ldr	r2, [pc, #68]	; (8001830 <_ZL13MX_TIM14_Initv+0x4c>)
 80017ec:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 16 - 1;
 80017ee:	4b0f      	ldr	r3, [pc, #60]	; (800182c <_ZL13MX_TIM14_Initv+0x48>)
 80017f0:	220f      	movs	r2, #15
 80017f2:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017f4:	4b0d      	ldr	r3, [pc, #52]	; (800182c <_ZL13MX_TIM14_Initv+0x48>)
 80017f6:	2200      	movs	r2, #0
 80017f8:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 65535;
 80017fa:	4b0c      	ldr	r3, [pc, #48]	; (800182c <_ZL13MX_TIM14_Initv+0x48>)
 80017fc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001800:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001802:	4b0a      	ldr	r3, [pc, #40]	; (800182c <_ZL13MX_TIM14_Initv+0x48>)
 8001804:	2200      	movs	r2, #0
 8001806:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001808:	4b08      	ldr	r3, [pc, #32]	; (800182c <_ZL13MX_TIM14_Initv+0x48>)
 800180a:	2200      	movs	r2, #0
 800180c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 800180e:	4807      	ldr	r0, [pc, #28]	; (800182c <_ZL13MX_TIM14_Initv+0x48>)
 8001810:	f004 fa74 	bl	8005cfc <HAL_TIM_Base_Init>
 8001814:	4603      	mov	r3, r0
 8001816:	2b00      	cmp	r3, #0
 8001818:	bf14      	ite	ne
 800181a:	2301      	movne	r3, #1
 800181c:	2300      	moveq	r3, #0
 800181e:	b2db      	uxtb	r3, r3
 8001820:	2b00      	cmp	r3, #0
 8001822:	d001      	beq.n	8001828 <_ZL13MX_TIM14_Initv+0x44>
  {
    Error_Handler();
 8001824:	f000 fa88 	bl	8001d38 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 8001828:	bf00      	nop
 800182a:	bd80      	pop	{r7, pc}
 800182c:	20000488 	.word	0x20000488
 8001830:	40002000 	.word	0x40002000

08001834 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b08a      	sub	sp, #40	; 0x28
 8001838:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800183a:	f107 0314 	add.w	r3, r7, #20
 800183e:	2200      	movs	r2, #0
 8001840:	601a      	str	r2, [r3, #0]
 8001842:	605a      	str	r2, [r3, #4]
 8001844:	609a      	str	r2, [r3, #8]
 8001846:	60da      	str	r2, [r3, #12]
 8001848:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800184a:	2300      	movs	r3, #0
 800184c:	613b      	str	r3, [r7, #16]
 800184e:	4b4e      	ldr	r3, [pc, #312]	; (8001988 <_ZL12MX_GPIO_Initv+0x154>)
 8001850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001852:	4a4d      	ldr	r2, [pc, #308]	; (8001988 <_ZL12MX_GPIO_Initv+0x154>)
 8001854:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001858:	6313      	str	r3, [r2, #48]	; 0x30
 800185a:	4b4b      	ldr	r3, [pc, #300]	; (8001988 <_ZL12MX_GPIO_Initv+0x154>)
 800185c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800185e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001862:	613b      	str	r3, [r7, #16]
 8001864:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001866:	2300      	movs	r3, #0
 8001868:	60fb      	str	r3, [r7, #12]
 800186a:	4b47      	ldr	r3, [pc, #284]	; (8001988 <_ZL12MX_GPIO_Initv+0x154>)
 800186c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800186e:	4a46      	ldr	r2, [pc, #280]	; (8001988 <_ZL12MX_GPIO_Initv+0x154>)
 8001870:	f043 0304 	orr.w	r3, r3, #4
 8001874:	6313      	str	r3, [r2, #48]	; 0x30
 8001876:	4b44      	ldr	r3, [pc, #272]	; (8001988 <_ZL12MX_GPIO_Initv+0x154>)
 8001878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800187a:	f003 0304 	and.w	r3, r3, #4
 800187e:	60fb      	str	r3, [r7, #12]
 8001880:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001882:	2300      	movs	r3, #0
 8001884:	60bb      	str	r3, [r7, #8]
 8001886:	4b40      	ldr	r3, [pc, #256]	; (8001988 <_ZL12MX_GPIO_Initv+0x154>)
 8001888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800188a:	4a3f      	ldr	r2, [pc, #252]	; (8001988 <_ZL12MX_GPIO_Initv+0x154>)
 800188c:	f043 0301 	orr.w	r3, r3, #1
 8001890:	6313      	str	r3, [r2, #48]	; 0x30
 8001892:	4b3d      	ldr	r3, [pc, #244]	; (8001988 <_ZL12MX_GPIO_Initv+0x154>)
 8001894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001896:	f003 0301 	and.w	r3, r3, #1
 800189a:	60bb      	str	r3, [r7, #8]
 800189c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800189e:	2300      	movs	r3, #0
 80018a0:	607b      	str	r3, [r7, #4]
 80018a2:	4b39      	ldr	r3, [pc, #228]	; (8001988 <_ZL12MX_GPIO_Initv+0x154>)
 80018a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018a6:	4a38      	ldr	r2, [pc, #224]	; (8001988 <_ZL12MX_GPIO_Initv+0x154>)
 80018a8:	f043 0302 	orr.w	r3, r3, #2
 80018ac:	6313      	str	r3, [r2, #48]	; 0x30
 80018ae:	4b36      	ldr	r3, [pc, #216]	; (8001988 <_ZL12MX_GPIO_Initv+0x154>)
 80018b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018b2:	f003 0302 	and.w	r3, r3, #2
 80018b6:	607b      	str	r3, [r7, #4]
 80018b8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ONBOARD_LED_1_Pin|ONBOARD_LED_2_Pin|ONBOARD_LED_3_Pin|ONBOARD_LED_4_Pin
 80018ba:	2200      	movs	r2, #0
 80018bc:	f44f 71f8 	mov.w	r1, #496	; 0x1f0
 80018c0:	4832      	ldr	r0, [pc, #200]	; (800198c <_ZL12MX_GPIO_Initv+0x158>)
 80018c2:	f001 fc79 	bl	80031b8 <HAL_GPIO_WritePin>
                          |ONBOARD_WRITE_3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, ONBOARD_WRITE_4_Pin|ONBOARD_WRITE_2_Pin, GPIO_PIN_RESET);
 80018c6:	2200      	movs	r2, #0
 80018c8:	f44f 6188 	mov.w	r1, #1088	; 0x440
 80018cc:	4830      	ldr	r0, [pc, #192]	; (8001990 <_ZL12MX_GPIO_Initv+0x15c>)
 80018ce:	f001 fc73 	bl	80031b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ONBOARD_WRITE_1_GPIO_Port, ONBOARD_WRITE_1_Pin, GPIO_PIN_RESET);
 80018d2:	2200      	movs	r2, #0
 80018d4:	2140      	movs	r1, #64	; 0x40
 80018d6:	482f      	ldr	r0, [pc, #188]	; (8001994 <_ZL12MX_GPIO_Initv+0x160>)
 80018d8:	f001 fc6e 	bl	80031b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : ONBOARD_READ_IT_3_Pin */
  GPIO_InitStruct.Pin = ONBOARD_READ_IT_3_Pin;
 80018dc:	2301      	movs	r3, #1
 80018de:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80018e0:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80018e4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80018e6:	2302      	movs	r3, #2
 80018e8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ONBOARD_READ_IT_3_GPIO_Port, &GPIO_InitStruct);
 80018ea:	f107 0314 	add.w	r3, r7, #20
 80018ee:	4619      	mov	r1, r3
 80018f0:	4827      	ldr	r0, [pc, #156]	; (8001990 <_ZL12MX_GPIO_Initv+0x15c>)
 80018f2:	f001 fac3 	bl	8002e7c <HAL_GPIO_Init>

  /*Configure GPIO pins : ONBOARD_BUTTON_1_Pin ONBOARD_BUTTON_2_Pin ONBOARD_BUTTON_3_Pin ONBOARD_BUTTON_4_Pin */
  GPIO_InitStruct.Pin = ONBOARD_BUTTON_1_Pin|ONBOARD_BUTTON_2_Pin|ONBOARD_BUTTON_3_Pin|ONBOARD_BUTTON_4_Pin;
 80018f6:	230f      	movs	r3, #15
 80018f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018fa:	2300      	movs	r3, #0
 80018fc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018fe:	2300      	movs	r3, #0
 8001900:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001902:	f107 0314 	add.w	r3, r7, #20
 8001906:	4619      	mov	r1, r3
 8001908:	4820      	ldr	r0, [pc, #128]	; (800198c <_ZL12MX_GPIO_Initv+0x158>)
 800190a:	f001 fab7 	bl	8002e7c <HAL_GPIO_Init>

  /*Configure GPIO pins : ONBOARD_LED_1_Pin ONBOARD_LED_2_Pin ONBOARD_LED_3_Pin ONBOARD_LED_4_Pin
                           ONBOARD_WRITE_3_Pin */
  GPIO_InitStruct.Pin = ONBOARD_LED_1_Pin|ONBOARD_LED_2_Pin|ONBOARD_LED_3_Pin|ONBOARD_LED_4_Pin
 800190e:	f44f 73f8 	mov.w	r3, #496	; 0x1f0
 8001912:	617b      	str	r3, [r7, #20]
                          |ONBOARD_WRITE_3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001914:	2301      	movs	r3, #1
 8001916:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001918:	2300      	movs	r3, #0
 800191a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800191c:	2300      	movs	r3, #0
 800191e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001920:	f107 0314 	add.w	r3, r7, #20
 8001924:	4619      	mov	r1, r3
 8001926:	4819      	ldr	r0, [pc, #100]	; (800198c <_ZL12MX_GPIO_Initv+0x158>)
 8001928:	f001 faa8 	bl	8002e7c <HAL_GPIO_Init>

  /*Configure GPIO pins : ONBOARD_WRITE_4_Pin ONBOARD_WRITE_2_Pin */
  GPIO_InitStruct.Pin = ONBOARD_WRITE_4_Pin|ONBOARD_WRITE_2_Pin;
 800192c:	f44f 6388 	mov.w	r3, #1088	; 0x440
 8001930:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001932:	2301      	movs	r3, #1
 8001934:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001936:	2300      	movs	r3, #0
 8001938:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800193a:	2300      	movs	r3, #0
 800193c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800193e:	f107 0314 	add.w	r3, r7, #20
 8001942:	4619      	mov	r1, r3
 8001944:	4812      	ldr	r0, [pc, #72]	; (8001990 <_ZL12MX_GPIO_Initv+0x15c>)
 8001946:	f001 fa99 	bl	8002e7c <HAL_GPIO_Init>

  /*Configure GPIO pin : ONBOARD_WRITE_1_Pin */
  GPIO_InitStruct.Pin = ONBOARD_WRITE_1_Pin;
 800194a:	2340      	movs	r3, #64	; 0x40
 800194c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800194e:	2301      	movs	r3, #1
 8001950:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001952:	2300      	movs	r3, #0
 8001954:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001956:	2300      	movs	r3, #0
 8001958:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(ONBOARD_WRITE_1_GPIO_Port, &GPIO_InitStruct);
 800195a:	f107 0314 	add.w	r3, r7, #20
 800195e:	4619      	mov	r1, r3
 8001960:	480c      	ldr	r0, [pc, #48]	; (8001994 <_ZL12MX_GPIO_Initv+0x160>)
 8001962:	f001 fa8b 	bl	8002e7c <HAL_GPIO_Init>

  /*Configure GPIO pin : ONBOARD_READ_4_Pin */
  GPIO_InitStruct.Pin = ONBOARD_READ_4_Pin;
 8001966:	2380      	movs	r3, #128	; 0x80
 8001968:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800196a:	2300      	movs	r3, #0
 800196c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800196e:	2300      	movs	r3, #0
 8001970:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ONBOARD_READ_4_GPIO_Port, &GPIO_InitStruct);
 8001972:	f107 0314 	add.w	r3, r7, #20
 8001976:	4619      	mov	r1, r3
 8001978:	4806      	ldr	r0, [pc, #24]	; (8001994 <_ZL12MX_GPIO_Initv+0x160>)
 800197a:	f001 fa7f 	bl	8002e7c <HAL_GPIO_Init>

}
 800197e:	bf00      	nop
 8001980:	3728      	adds	r7, #40	; 0x28
 8001982:	46bd      	mov	sp, r7
 8001984:	bd80      	pop	{r7, pc}
 8001986:	bf00      	nop
 8001988:	40023800 	.word	0x40023800
 800198c:	40020000 	.word	0x40020000
 8001990:	40020800 	.word	0x40020800
 8001994:	40020400 	.word	0x40020400

08001998 <_ZL12MPU6050_initv>:

/* USER CODE BEGIN 4 */
void MPU6050_init()
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b082      	sub	sp, #8
 800199c:	af02      	add	r7, sp, #8
  MPU6050_TX_buf[0] = 0x6B;
 800199e:	4b09      	ldr	r3, [pc, #36]	; (80019c4 <_ZL12MPU6050_initv+0x2c>)
 80019a0:	226b      	movs	r2, #107	; 0x6b
 80019a2:	701a      	strb	r2, [r3, #0]
  MPU6050_TX_buf[1] = 0x00;
 80019a4:	4b07      	ldr	r3, [pc, #28]	; (80019c4 <_ZL12MPU6050_initv+0x2c>)
 80019a6:	2200      	movs	r2, #0
 80019a8:	705a      	strb	r2, [r3, #1]
  if (HAL_I2C_Master_Transmit(&hi2c1, MPU6050_Adresse, MPU6050_TX_buf, 2, 10000000) != HAL_OK)
 80019aa:	4b07      	ldr	r3, [pc, #28]	; (80019c8 <_ZL12MPU6050_initv+0x30>)
 80019ac:	9300      	str	r3, [sp, #0]
 80019ae:	2302      	movs	r3, #2
 80019b0:	4a04      	ldr	r2, [pc, #16]	; (80019c4 <_ZL12MPU6050_initv+0x2c>)
 80019b2:	21d0      	movs	r1, #208	; 0xd0
 80019b4:	4805      	ldr	r0, [pc, #20]	; (80019cc <_ZL12MPU6050_initv+0x34>)
 80019b6:	f001 fd8d 	bl	80034d4 <HAL_I2C_Master_Transmit>
 80019ba:	4603      	mov	r3, r0
 80019bc:	2b00      	cmp	r3, #0
  {
  }
}
 80019be:	bf00      	nop
 80019c0:	46bd      	mov	sp, r7
 80019c2:	bd80      	pop	{r7, pc}
 80019c4:	200004d8 	.word	0x200004d8
 80019c8:	00989680 	.word	0x00989680
 80019cc:	200003a4 	.word	0x200003a4

080019d0 <MPU6050_readValues>:

void MPU6050_readValues()
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b082      	sub	sp, #8
 80019d4:	af02      	add	r7, sp, #8
  while (slowPPM1_powered == true)   //assumes that the PPM is running   if it is not running this might crash the programm
 80019d6:	4b63      	ldr	r3, [pc, #396]	; (8001b64 <MPU6050_readValues+0x194>)
 80019d8:	781b      	ldrb	r3, [r3, #0]
 80019da:	2b01      	cmp	r3, #1
 80019dc:	d100      	bne.n	80019e0 <MPU6050_readValues+0x10>
 80019de:	e7fa      	b.n	80019d6 <MPU6050_readValues+0x6>
  {
  }
  __HAL_TIM_DISABLE(&htim13);
 80019e0:	4b61      	ldr	r3, [pc, #388]	; (8001b68 <MPU6050_readValues+0x198>)
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	6a1a      	ldr	r2, [r3, #32]
 80019e6:	f241 1311 	movw	r3, #4369	; 0x1111
 80019ea:	4013      	ands	r3, r2
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	bf0c      	ite	eq
 80019f0:	2301      	moveq	r3, #1
 80019f2:	2300      	movne	r3, #0
 80019f4:	b2db      	uxtb	r3, r3
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d014      	beq.n	8001a24 <MPU6050_readValues+0x54>
 80019fa:	4b5b      	ldr	r3, [pc, #364]	; (8001b68 <MPU6050_readValues+0x198>)
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	6a1a      	ldr	r2, [r3, #32]
 8001a00:	f240 4344 	movw	r3, #1092	; 0x444
 8001a04:	4013      	ands	r3, r2
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	bf0c      	ite	eq
 8001a0a:	2301      	moveq	r3, #1
 8001a0c:	2300      	movne	r3, #0
 8001a0e:	b2db      	uxtb	r3, r3
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d007      	beq.n	8001a24 <MPU6050_readValues+0x54>
 8001a14:	4b54      	ldr	r3, [pc, #336]	; (8001b68 <MPU6050_readValues+0x198>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	681a      	ldr	r2, [r3, #0]
 8001a1a:	4b53      	ldr	r3, [pc, #332]	; (8001b68 <MPU6050_readValues+0x198>)
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f022 0201 	bic.w	r2, r2, #1
 8001a22:	601a      	str	r2, [r3, #0]
  while (fastPPM_powered == true)   //assumes that the PPM is running   if it is not running this might crash the programm
 8001a24:	4b51      	ldr	r3, [pc, #324]	; (8001b6c <MPU6050_readValues+0x19c>)
 8001a26:	781b      	ldrb	r3, [r3, #0]
 8001a28:	2b01      	cmp	r3, #1
 8001a2a:	d100      	bne.n	8001a2e <MPU6050_readValues+0x5e>
 8001a2c:	e7fa      	b.n	8001a24 <MPU6050_readValues+0x54>
  {
  }
  __HAL_TIM_DISABLE(&htim14);
 8001a2e:	4b50      	ldr	r3, [pc, #320]	; (8001b70 <MPU6050_readValues+0x1a0>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	6a1a      	ldr	r2, [r3, #32]
 8001a34:	f241 1311 	movw	r3, #4369	; 0x1111
 8001a38:	4013      	ands	r3, r2
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	bf0c      	ite	eq
 8001a3e:	2301      	moveq	r3, #1
 8001a40:	2300      	movne	r3, #0
 8001a42:	b2db      	uxtb	r3, r3
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d014      	beq.n	8001a72 <MPU6050_readValues+0xa2>
 8001a48:	4b49      	ldr	r3, [pc, #292]	; (8001b70 <MPU6050_readValues+0x1a0>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	6a1a      	ldr	r2, [r3, #32]
 8001a4e:	f240 4344 	movw	r3, #1092	; 0x444
 8001a52:	4013      	ands	r3, r2
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	bf0c      	ite	eq
 8001a58:	2301      	moveq	r3, #1
 8001a5a:	2300      	movne	r3, #0
 8001a5c:	b2db      	uxtb	r3, r3
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d007      	beq.n	8001a72 <MPU6050_readValues+0xa2>
 8001a62:	4b43      	ldr	r3, [pc, #268]	; (8001b70 <MPU6050_readValues+0x1a0>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	681a      	ldr	r2, [r3, #0]
 8001a68:	4b41      	ldr	r3, [pc, #260]	; (8001b70 <MPU6050_readValues+0x1a0>)
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	f022 0201 	bic.w	r2, r2, #1
 8001a70:	601a      	str	r2, [r3, #0]

  MPU6050_TX_buf[0] = 0x3B;
 8001a72:	4b40      	ldr	r3, [pc, #256]	; (8001b74 <MPU6050_readValues+0x1a4>)
 8001a74:	223b      	movs	r2, #59	; 0x3b
 8001a76:	701a      	strb	r2, [r3, #0]
  if (HAL_I2C_Master_Transmit(&hi2c1, MPU6050_Adresse, MPU6050_TX_buf, 1, 100000) != HAL_OK)
 8001a78:	4b3f      	ldr	r3, [pc, #252]	; (8001b78 <MPU6050_readValues+0x1a8>)
 8001a7a:	9300      	str	r3, [sp, #0]
 8001a7c:	2301      	movs	r3, #1
 8001a7e:	4a3d      	ldr	r2, [pc, #244]	; (8001b74 <MPU6050_readValues+0x1a4>)
 8001a80:	21d0      	movs	r1, #208	; 0xd0
 8001a82:	483e      	ldr	r0, [pc, #248]	; (8001b7c <MPU6050_readValues+0x1ac>)
 8001a84:	f001 fd26 	bl	80034d4 <HAL_I2C_Master_Transmit>
 8001a88:	4603      	mov	r3, r0
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	bf14      	ite	ne
 8001a8e:	2301      	movne	r3, #1
 8001a90:	2300      	moveq	r3, #0
 8001a92:	b2db      	uxtb	r3, r3
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d151      	bne.n	8001b3c <MPU6050_readValues+0x16c>
  {
  }
  else
  {
    if (HAL_I2C_Master_Receive(&hi2c1, MPU6050_Adresse, MPU6050_RX_buf, 14, 100000))
 8001a98:	4b37      	ldr	r3, [pc, #220]	; (8001b78 <MPU6050_readValues+0x1a8>)
 8001a9a:	9300      	str	r3, [sp, #0]
 8001a9c:	230e      	movs	r3, #14
 8001a9e:	4a38      	ldr	r2, [pc, #224]	; (8001b80 <MPU6050_readValues+0x1b0>)
 8001aa0:	21d0      	movs	r1, #208	; 0xd0
 8001aa2:	4836      	ldr	r0, [pc, #216]	; (8001b7c <MPU6050_readValues+0x1ac>)
 8001aa4:	f001 fe14 	bl	80036d0 <HAL_I2C_Master_Receive>
 8001aa8:	4603      	mov	r3, r0
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	bf14      	ite	ne
 8001aae:	2301      	movne	r3, #1
 8001ab0:	2300      	moveq	r3, #0
 8001ab2:	b2db      	uxtb	r3, r3
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d141      	bne.n	8001b3c <MPU6050_readValues+0x16c>
    {
    }
    else
    {
      MPU_Values[0] = ((int16_t)MPU6050_RX_buf[ 0] << 8) | MPU6050_RX_buf[ 1];
 8001ab8:	4b31      	ldr	r3, [pc, #196]	; (8001b80 <MPU6050_readValues+0x1b0>)
 8001aba:	781b      	ldrb	r3, [r3, #0]
 8001abc:	021b      	lsls	r3, r3, #8
 8001abe:	b21a      	sxth	r2, r3
 8001ac0:	4b2f      	ldr	r3, [pc, #188]	; (8001b80 <MPU6050_readValues+0x1b0>)
 8001ac2:	785b      	ldrb	r3, [r3, #1]
 8001ac4:	b21b      	sxth	r3, r3
 8001ac6:	4313      	orrs	r3, r2
 8001ac8:	b21a      	sxth	r2, r3
 8001aca:	4b2e      	ldr	r3, [pc, #184]	; (8001b84 <MPU6050_readValues+0x1b4>)
 8001acc:	801a      	strh	r2, [r3, #0]
      MPU_Values[1] = ((int16_t)MPU6050_RX_buf[ 2] << 8) | MPU6050_RX_buf[ 3];
 8001ace:	4b2c      	ldr	r3, [pc, #176]	; (8001b80 <MPU6050_readValues+0x1b0>)
 8001ad0:	789b      	ldrb	r3, [r3, #2]
 8001ad2:	021b      	lsls	r3, r3, #8
 8001ad4:	b21a      	sxth	r2, r3
 8001ad6:	4b2a      	ldr	r3, [pc, #168]	; (8001b80 <MPU6050_readValues+0x1b0>)
 8001ad8:	78db      	ldrb	r3, [r3, #3]
 8001ada:	b21b      	sxth	r3, r3
 8001adc:	4313      	orrs	r3, r2
 8001ade:	b21a      	sxth	r2, r3
 8001ae0:	4b28      	ldr	r3, [pc, #160]	; (8001b84 <MPU6050_readValues+0x1b4>)
 8001ae2:	805a      	strh	r2, [r3, #2]
      MPU_Values[2] = ((int16_t)MPU6050_RX_buf[ 4] << 8) | MPU6050_RX_buf[ 5];
 8001ae4:	4b26      	ldr	r3, [pc, #152]	; (8001b80 <MPU6050_readValues+0x1b0>)
 8001ae6:	791b      	ldrb	r3, [r3, #4]
 8001ae8:	021b      	lsls	r3, r3, #8
 8001aea:	b21a      	sxth	r2, r3
 8001aec:	4b24      	ldr	r3, [pc, #144]	; (8001b80 <MPU6050_readValues+0x1b0>)
 8001aee:	795b      	ldrb	r3, [r3, #5]
 8001af0:	b21b      	sxth	r3, r3
 8001af2:	4313      	orrs	r3, r2
 8001af4:	b21a      	sxth	r2, r3
 8001af6:	4b23      	ldr	r3, [pc, #140]	; (8001b84 <MPU6050_readValues+0x1b4>)
 8001af8:	809a      	strh	r2, [r3, #4]
      MPU_Values[3] = ((int16_t)MPU6050_RX_buf[ 8] << 8) | MPU6050_RX_buf[ 9];
 8001afa:	4b21      	ldr	r3, [pc, #132]	; (8001b80 <MPU6050_readValues+0x1b0>)
 8001afc:	7a1b      	ldrb	r3, [r3, #8]
 8001afe:	021b      	lsls	r3, r3, #8
 8001b00:	b21a      	sxth	r2, r3
 8001b02:	4b1f      	ldr	r3, [pc, #124]	; (8001b80 <MPU6050_readValues+0x1b0>)
 8001b04:	7a5b      	ldrb	r3, [r3, #9]
 8001b06:	b21b      	sxth	r3, r3
 8001b08:	4313      	orrs	r3, r2
 8001b0a:	b21a      	sxth	r2, r3
 8001b0c:	4b1d      	ldr	r3, [pc, #116]	; (8001b84 <MPU6050_readValues+0x1b4>)
 8001b0e:	80da      	strh	r2, [r3, #6]
      MPU_Values[4] = ((int16_t)MPU6050_RX_buf[10] << 8) | MPU6050_RX_buf[11];
 8001b10:	4b1b      	ldr	r3, [pc, #108]	; (8001b80 <MPU6050_readValues+0x1b0>)
 8001b12:	7a9b      	ldrb	r3, [r3, #10]
 8001b14:	021b      	lsls	r3, r3, #8
 8001b16:	b21a      	sxth	r2, r3
 8001b18:	4b19      	ldr	r3, [pc, #100]	; (8001b80 <MPU6050_readValues+0x1b0>)
 8001b1a:	7adb      	ldrb	r3, [r3, #11]
 8001b1c:	b21b      	sxth	r3, r3
 8001b1e:	4313      	orrs	r3, r2
 8001b20:	b21a      	sxth	r2, r3
 8001b22:	4b18      	ldr	r3, [pc, #96]	; (8001b84 <MPU6050_readValues+0x1b4>)
 8001b24:	811a      	strh	r2, [r3, #8]
      MPU_Values[5] = ((int16_t)MPU6050_RX_buf[12] << 8) | MPU6050_RX_buf[13];
 8001b26:	4b16      	ldr	r3, [pc, #88]	; (8001b80 <MPU6050_readValues+0x1b0>)
 8001b28:	7b1b      	ldrb	r3, [r3, #12]
 8001b2a:	021b      	lsls	r3, r3, #8
 8001b2c:	b21a      	sxth	r2, r3
 8001b2e:	4b14      	ldr	r3, [pc, #80]	; (8001b80 <MPU6050_readValues+0x1b0>)
 8001b30:	7b5b      	ldrb	r3, [r3, #13]
 8001b32:	b21b      	sxth	r3, r3
 8001b34:	4313      	orrs	r3, r2
 8001b36:	b21a      	sxth	r2, r3
 8001b38:	4b12      	ldr	r3, [pc, #72]	; (8001b84 <MPU6050_readValues+0x1b4>)
 8001b3a:	815a      	strh	r2, [r3, #10]
    }
  }
  __HAL_TIM_ENABLE(&htim13);
 8001b3c:	4b0a      	ldr	r3, [pc, #40]	; (8001b68 <MPU6050_readValues+0x198>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	681a      	ldr	r2, [r3, #0]
 8001b42:	4b09      	ldr	r3, [pc, #36]	; (8001b68 <MPU6050_readValues+0x198>)
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f042 0201 	orr.w	r2, r2, #1
 8001b4a:	601a      	str	r2, [r3, #0]
  __HAL_TIM_ENABLE(&htim14);
 8001b4c:	4b08      	ldr	r3, [pc, #32]	; (8001b70 <MPU6050_readValues+0x1a0>)
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	681a      	ldr	r2, [r3, #0]
 8001b52:	4b07      	ldr	r3, [pc, #28]	; (8001b70 <MPU6050_readValues+0x1a0>)
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f042 0201 	orr.w	r2, r2, #1
 8001b5a:	601a      	str	r2, [r3, #0]

}
 8001b5c:	bf00      	nop
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	bd80      	pop	{r7, pc}
 8001b62:	bf00      	nop
 8001b64:	200004d6 	.word	0x200004d6
 8001b68:	20000440 	.word	0x20000440
 8001b6c:	200004d2 	.word	0x200004d2
 8001b70:	20000488 	.word	0x20000488
 8001b74:	200004d8 	.word	0x200004d8
 8001b78:	000186a0 	.word	0x000186a0
 8001b7c:	200003a4 	.word	0x200003a4
 8001b80:	200004dc 	.word	0x200004dc
 8001b84:	200004ec 	.word	0x200004ec

08001b88 <HAL_TIM_PeriodElapsedCallback>:
 * @brief Interrupt that is called when any Timer overflows
 * @param htim timer handle
 * @retval none
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b082      	sub	sp, #8
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
  if (htim == &htim14) //timer 14 used for fast PPM generation
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	4a25      	ldr	r2, [pc, #148]	; (8001c28 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8001b94:	4293      	cmp	r3, r2
 8001b96:	d11e      	bne.n	8001bd6 <HAL_TIM_PeriodElapsedCallback+0x4e>
  {
    if (fastPPM_powered == true)
 8001b98:	4b24      	ldr	r3, [pc, #144]	; (8001c2c <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8001b9a:	781b      	ldrb	r3, [r3, #0]
 8001b9c:	2b01      	cmp	r3, #1
 8001b9e:	d10d      	bne.n	8001bbc <HAL_TIM_PeriodElapsedCallback+0x34>
    {
      TIM14->ARR = (uint32_t)(fastPPM_OFFTime - 1);
 8001ba0:	4b23      	ldr	r3, [pc, #140]	; (8001c30 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8001ba2:	881b      	ldrh	r3, [r3, #0]
 8001ba4:	1e5a      	subs	r2, r3, #1
 8001ba6:	4b23      	ldr	r3, [pc, #140]	; (8001c34 <HAL_TIM_PeriodElapsedCallback+0xac>)
 8001ba8:	62da      	str	r2, [r3, #44]	; 0x2c
      HAL_GPIO_WritePin(ONBOARD_WRITE_1_GPIO_Port, ONBOARD_WRITE_1_Pin, GPIO_PIN_RESET);
 8001baa:	2200      	movs	r2, #0
 8001bac:	2140      	movs	r1, #64	; 0x40
 8001bae:	4822      	ldr	r0, [pc, #136]	; (8001c38 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8001bb0:	f001 fb02 	bl	80031b8 <HAL_GPIO_WritePin>
      fastPPM_powered = false;
 8001bb4:	4b1d      	ldr	r3, [pc, #116]	; (8001c2c <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	701a      	strb	r2, [r3, #0]
 8001bba:	e00c      	b.n	8001bd6 <HAL_TIM_PeriodElapsedCallback+0x4e>
    }
    else
    {
      TIM14->ARR = (uint32_t)(fastPPM_ONTime - 1);
 8001bbc:	4b1f      	ldr	r3, [pc, #124]	; (8001c3c <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8001bbe:	881b      	ldrh	r3, [r3, #0]
 8001bc0:	1e5a      	subs	r2, r3, #1
 8001bc2:	4b1c      	ldr	r3, [pc, #112]	; (8001c34 <HAL_TIM_PeriodElapsedCallback+0xac>)
 8001bc4:	62da      	str	r2, [r3, #44]	; 0x2c
      HAL_GPIO_WritePin(ONBOARD_WRITE_1_GPIO_Port, ONBOARD_WRITE_1_Pin, GPIO_PIN_SET);
 8001bc6:	2201      	movs	r2, #1
 8001bc8:	2140      	movs	r1, #64	; 0x40
 8001bca:	481b      	ldr	r0, [pc, #108]	; (8001c38 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8001bcc:	f001 faf4 	bl	80031b8 <HAL_GPIO_WritePin>
      fastPPM_powered = true;
 8001bd0:	4b16      	ldr	r3, [pc, #88]	; (8001c2c <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8001bd2:	2201      	movs	r2, #1
 8001bd4:	701a      	strb	r2, [r3, #0]
    }
  }
  
  if (htim == &htim13) //timer 13 used for fast PPM generation
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	4a19      	ldr	r2, [pc, #100]	; (8001c40 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8001bda:	4293      	cmp	r3, r2
 8001bdc:	d120      	bne.n	8001c20 <HAL_TIM_PeriodElapsedCallback+0x98>
  {
    if (slowPPM1_powered == true)
 8001bde:	4b19      	ldr	r3, [pc, #100]	; (8001c44 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8001be0:	781b      	ldrb	r3, [r3, #0]
 8001be2:	2b01      	cmp	r3, #1
 8001be4:	d10e      	bne.n	8001c04 <HAL_TIM_PeriodElapsedCallback+0x7c>
    {
      TIM13->ARR = (uint32_t)(slowPPM1_OFFTime - 1);
 8001be6:	4b18      	ldr	r3, [pc, #96]	; (8001c48 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8001be8:	881b      	ldrh	r3, [r3, #0]
 8001bea:	1e5a      	subs	r2, r3, #1
 8001bec:	4b17      	ldr	r3, [pc, #92]	; (8001c4c <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8001bee:	62da      	str	r2, [r3, #44]	; 0x2c
      HAL_GPIO_WritePin(ONBOARD_WRITE_2_GPIO_Port, ONBOARD_WRITE_2_Pin, GPIO_PIN_RESET);
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001bf6:	4816      	ldr	r0, [pc, #88]	; (8001c50 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8001bf8:	f001 fade 	bl	80031b8 <HAL_GPIO_WritePin>
      slowPPM1_powered = false;
 8001bfc:	4b11      	ldr	r3, [pc, #68]	; (8001c44 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8001bfe:	2200      	movs	r2, #0
 8001c00:	701a      	strb	r2, [r3, #0]
      TIM13->ARR = (uint32_t)(slowPPM1_ONTime - 1);
      HAL_GPIO_WritePin(ONBOARD_WRITE_2_GPIO_Port, ONBOARD_WRITE_2_Pin, GPIO_PIN_SET);
      slowPPM1_powered = true;
    }
  }
}
 8001c02:	e00d      	b.n	8001c20 <HAL_TIM_PeriodElapsedCallback+0x98>
      TIM13->ARR = (uint32_t)(slowPPM1_ONTime - 1);
 8001c04:	4b13      	ldr	r3, [pc, #76]	; (8001c54 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8001c06:	881b      	ldrh	r3, [r3, #0]
 8001c08:	1e5a      	subs	r2, r3, #1
 8001c0a:	4b10      	ldr	r3, [pc, #64]	; (8001c4c <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8001c0c:	62da      	str	r2, [r3, #44]	; 0x2c
      HAL_GPIO_WritePin(ONBOARD_WRITE_2_GPIO_Port, ONBOARD_WRITE_2_Pin, GPIO_PIN_SET);
 8001c0e:	2201      	movs	r2, #1
 8001c10:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001c14:	480e      	ldr	r0, [pc, #56]	; (8001c50 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8001c16:	f001 facf 	bl	80031b8 <HAL_GPIO_WritePin>
      slowPPM1_powered = true;
 8001c1a:	4b0a      	ldr	r3, [pc, #40]	; (8001c44 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8001c1c:	2201      	movs	r2, #1
 8001c1e:	701a      	strb	r2, [r3, #0]
}
 8001c20:	bf00      	nop
 8001c22:	3708      	adds	r7, #8
 8001c24:	46bd      	mov	sp, r7
 8001c26:	bd80      	pop	{r7, pc}
 8001c28:	20000488 	.word	0x20000488
 8001c2c:	200004d2 	.word	0x200004d2
 8001c30:	200004d0 	.word	0x200004d0
 8001c34:	40002000 	.word	0x40002000
 8001c38:	40020400 	.word	0x40020400
 8001c3c:	20000000 	.word	0x20000000
 8001c40:	20000440 	.word	0x20000440
 8001c44:	200004d6 	.word	0x200004d6
 8001c48:	200004d4 	.word	0x200004d4
 8001c4c:	40001c00 	.word	0x40001c00
 8001c50:	40020800 	.word	0x40020800
 8001c54:	20000002 	.word	0x20000002

08001c58 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b084      	sub	sp, #16
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	4603      	mov	r3, r0
 8001c60:	80fb      	strh	r3, [r7, #6]
  HAL_GPIO_TogglePin(ONBOARD_LED_4_GPIO_Port, ONBOARD_LED_4_Pin);     //debug pin
 8001c62:	2180      	movs	r1, #128	; 0x80
 8001c64:	480b      	ldr	r0, [pc, #44]	; (8001c94 <HAL_GPIO_EXTI_Callback+0x3c>)
 8001c66:	f001 fabf 	bl	80031e8 <HAL_GPIO_TogglePin>
  if (GPIO_Pin == ONBOARD_READ_IT_3_Pin)
 8001c6a:	88fb      	ldrh	r3, [r7, #6]
 8001c6c:	2b01      	cmp	r3, #1
 8001c6e:	d10d      	bne.n	8001c8c <HAL_GPIO_EXTI_Callback+0x34>
  {
    uint32_t time = HAL_GetTick();
 8001c70:	f000 fcae 	bl	80025d0 <HAL_GetTick>
 8001c74:	60f8      	str	r0, [r7, #12]
    if (PinInterruptLastTime - time > 5)
 8001c76:	4b08      	ldr	r3, [pc, #32]	; (8001c98 <HAL_GPIO_EXTI_Callback+0x40>)
 8001c78:	681a      	ldr	r2, [r3, #0]
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	1ad3      	subs	r3, r2, r3
 8001c7e:	2b05      	cmp	r3, #5
 8001c80:	d904      	bls.n	8001c8c <HAL_GPIO_EXTI_Callback+0x34>
    {
      PinInterruptLastTime = time;
 8001c82:	4a05      	ldr	r2, [pc, #20]	; (8001c98 <HAL_GPIO_EXTI_Callback+0x40>)
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	6013      	str	r3, [r2, #0]
      SBUS_RecieveBits();
 8001c88:	f7ff fb22 	bl	80012d0 <_Z16SBUS_RecieveBitsv>
    }
  }
}
 8001c8c:	bf00      	nop
 8001c8e:	3710      	adds	r7, #16
 8001c90:	46bd      	mov	sp, r7
 8001c92:	bd80      	pop	{r7, pc}
 8001c94:	40020000 	.word	0x40020000
 8001c98:	200004f8 	.word	0x200004f8

08001c9c <ADC_Select_Channel_11>:

void ADC_Select_Channel_11()
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b084      	sub	sp, #16
 8001ca0:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8001ca2:	463b      	mov	r3, r7
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	601a      	str	r2, [r3, #0]
 8001ca8:	605a      	str	r2, [r3, #4]
 8001caa:	609a      	str	r2, [r3, #8]
 8001cac:	60da      	str	r2, [r3, #12]
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8001cae:	230b      	movs	r3, #11
 8001cb0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001cb2:	2301      	movs	r3, #1
 8001cb4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 8001cb6:	2301      	movs	r3, #1
 8001cb8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001cba:	463b      	mov	r3, r7
 8001cbc:	4619      	mov	r1, r3
 8001cbe:	480a      	ldr	r0, [pc, #40]	; (8001ce8 <ADC_Select_Channel_11+0x4c>)
 8001cc0:	f000 fda8 	bl	8002814 <HAL_ADC_ConfigChannel>
 8001cc4:	4603      	mov	r3, r0
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	bf14      	ite	ne
 8001cca:	2301      	movne	r3, #1
 8001ccc:	2300      	moveq	r3, #0
 8001cce:	b2db      	uxtb	r3, r3
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d001      	beq.n	8001cd8 <ADC_Select_Channel_11+0x3c>
  {
    Error_Handler();
 8001cd4:	f000 f830 	bl	8001d38 <Error_Handler>
  }
  HAL_ADC_Start(&hadc1);
 8001cd8:	4803      	ldr	r0, [pc, #12]	; (8001ce8 <ADC_Select_Channel_11+0x4c>)
 8001cda:	f000 fceb 	bl	80026b4 <HAL_ADC_Start>
}
 8001cde:	bf00      	nop
 8001ce0:	3710      	adds	r7, #16
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	bd80      	pop	{r7, pc}
 8001ce6:	bf00      	nop
 8001ce8:	2000035c 	.word	0x2000035c

08001cec <ADC_Select_Channel_12>:
void ADC_Select_Channel_12()
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b084      	sub	sp, #16
 8001cf0:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8001cf2:	463b      	mov	r3, r7
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	601a      	str	r2, [r3, #0]
 8001cf8:	605a      	str	r2, [r3, #4]
 8001cfa:	609a      	str	r2, [r3, #8]
 8001cfc:	60da      	str	r2, [r3, #12]
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8001cfe:	230c      	movs	r3, #12
 8001d00:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001d02:	2301      	movs	r3, #1
 8001d04:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001d06:	463b      	mov	r3, r7
 8001d08:	4619      	mov	r1, r3
 8001d0a:	480a      	ldr	r0, [pc, #40]	; (8001d34 <ADC_Select_Channel_12+0x48>)
 8001d0c:	f000 fd82 	bl	8002814 <HAL_ADC_ConfigChannel>
 8001d10:	4603      	mov	r3, r0
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	bf14      	ite	ne
 8001d16:	2301      	movne	r3, #1
 8001d18:	2300      	moveq	r3, #0
 8001d1a:	b2db      	uxtb	r3, r3
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d001      	beq.n	8001d24 <ADC_Select_Channel_12+0x38>
  {
    Error_Handler();
 8001d20:	f000 f80a 	bl	8001d38 <Error_Handler>
  }
  HAL_ADC_Start(&hadc1);
 8001d24:	4803      	ldr	r0, [pc, #12]	; (8001d34 <ADC_Select_Channel_12+0x48>)
 8001d26:	f000 fcc5 	bl	80026b4 <HAL_ADC_Start>
}
 8001d2a:	bf00      	nop
 8001d2c:	3710      	adds	r7, #16
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	bd80      	pop	{r7, pc}
 8001d32:	bf00      	nop
 8001d34:	2000035c 	.word	0x2000035c

08001d38 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d38:	b480      	push	{r7}
 8001d3a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001d3c:	b672      	cpsid	i
}
 8001d3e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001d40:	e7fe      	b.n	8001d40 <Error_Handler+0x8>
	...

08001d44 <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 8001d44:	b480      	push	{r7}
 8001d46:	b083      	sub	sp, #12
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
 8001d4c:	6039      	str	r1, [r7, #0]
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	2b01      	cmp	r3, #1
 8001d52:	d114      	bne.n	8001d7e <_Z41__static_initialization_and_destruction_0ii+0x3a>
 8001d54:	683b      	ldr	r3, [r7, #0]
 8001d56:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001d5a:	4293      	cmp	r3, r2
 8001d5c:	d10f      	bne.n	8001d7e <_Z41__static_initialization_and_destruction_0ii+0x3a>
uint16_t fastPPM_OFFTime = fastPPM_Pulselength - fastPPM_ONTime;//OFF time in microseconds
 8001d5e:	4b0a      	ldr	r3, [pc, #40]	; (8001d88 <_Z41__static_initialization_and_destruction_0ii+0x44>)
 8001d60:	881b      	ldrh	r3, [r3, #0]
 8001d62:	f5c3 631c 	rsb	r3, r3, #2496	; 0x9c0
 8001d66:	3304      	adds	r3, #4
 8001d68:	b29a      	uxth	r2, r3
 8001d6a:	4b08      	ldr	r3, [pc, #32]	; (8001d8c <_Z41__static_initialization_and_destruction_0ii+0x48>)
 8001d6c:	801a      	strh	r2, [r3, #0]
uint16_t slowPPM1_OFFTime = fastPPM_Pulselength - fastPPM_ONTime;//OFF time in microseconds
 8001d6e:	4b06      	ldr	r3, [pc, #24]	; (8001d88 <_Z41__static_initialization_and_destruction_0ii+0x44>)
 8001d70:	881b      	ldrh	r3, [r3, #0]
 8001d72:	f5c3 631c 	rsb	r3, r3, #2496	; 0x9c0
 8001d76:	3304      	adds	r3, #4
 8001d78:	b29a      	uxth	r2, r3
 8001d7a:	4b05      	ldr	r3, [pc, #20]	; (8001d90 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 8001d7c:	801a      	strh	r2, [r3, #0]
}
 8001d7e:	bf00      	nop
 8001d80:	370c      	adds	r7, #12
 8001d82:	46bd      	mov	sp, r7
 8001d84:	bc80      	pop	{r7}
 8001d86:	4770      	bx	lr
 8001d88:	20000000 	.word	0x20000000
 8001d8c:	200004d0 	.word	0x200004d0
 8001d90:	200004d4 	.word	0x200004d4

08001d94 <_GLOBAL__sub_I_hadc1>:
 8001d94:	b580      	push	{r7, lr}
 8001d96:	af00      	add	r7, sp, #0
 8001d98:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001d9c:	2001      	movs	r0, #1
 8001d9e:	f7ff ffd1 	bl	8001d44 <_Z41__static_initialization_and_destruction_0ii>
 8001da2:	bd80      	pop	{r7, pc}

08001da4 <_ZSt4atanf>:
  using ::atan;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  atan(float __x)
  { return __builtin_atanf(__x); }
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b082      	sub	sp, #8
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
 8001dac:	6878      	ldr	r0, [r7, #4]
 8001dae:	f007 feab 	bl	8009b08 <atanf>
 8001db2:	4603      	mov	r3, r0
 8001db4:	4618      	mov	r0, r3
 8001db6:	3708      	adds	r7, #8
 8001db8:	46bd      	mov	sp, r7
 8001dba:	bd80      	pop	{r7, pc}

08001dbc <_Z4loopv>:

uint32_t timestamp = 0;
uint16_t adcValuesArray[2];

void loop()
{
 8001dbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001dc0:	b0e4      	sub	sp, #400	; 0x190
 8001dc2:	af0c      	add	r7, sp, #48	; 0x30
  if ((HAL_GetTick() - timestamp) >= 50)
 8001dc4:	f000 fc04 	bl	80025d0 <HAL_GetTick>
 8001dc8:	4602      	mov	r2, r0
 8001dca:	4ba1      	ldr	r3, [pc, #644]	; (8002050 <_Z4loopv+0x294>)
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	1ad3      	subs	r3, r2, r3
 8001dd0:	2b31      	cmp	r3, #49	; 0x31
 8001dd2:	bf8c      	ite	hi
 8001dd4:	2301      	movhi	r3, #1
 8001dd6:	2300      	movls	r3, #0
 8001dd8:	b2db      	uxtb	r3, r3
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	f000 80c7 	beq.w	8001f6e <_Z4loopv+0x1b2>
  {
    timestamp += 50;
 8001de0:	4b9b      	ldr	r3, [pc, #620]	; (8002050 <_Z4loopv+0x294>)
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	3332      	adds	r3, #50	; 0x32
 8001de6:	4a9a      	ldr	r2, [pc, #616]	; (8002050 <_Z4loopv+0x294>)
 8001de8:	6013      	str	r3, [r2, #0]

    MPU6050_readValues();
 8001dea:	f7ff fdf1 	bl	80019d0 <MPU6050_readValues>

     for (size_t i = 0; i < 1; i++)
 8001dee:	2300      	movs	r3, #0
 8001df0:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8001df4:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	f040 80b8 	bne.w	8001f6e <_Z4loopv+0x1b2>
	     for (size_t i = 0; i < x; i++)
	     {
	     	msgTransmit[i] = msg[i];
	     }
	     CDC_Transmit_FS((unsigned char*)msgTransmit, sizeof(msgTransmit));
     }
 8001dfe:	466b      	mov	r3, sp
 8001e00:	4698      	mov	r8, r3
	     sprintf((char*)msg,"%hd %hd %hd %hd %hd %hd %hd %hd %hd %hd %hd %hd %hd %hd\r\n", MPU_Values[0], MPU_Values[1], MPU_Values[2], MPU_Values[3], MPU_Values[4], MPU_Values[5], SBUS_Channels[0], SBUS_Channels[1], SBUS_Channels[2], SBUS_Channels[3], SBUS_Channels[4], SBUS_Channels[5], SBUS_Channels[6], SBUS_Channels[7]);
 8001e02:	4b94      	ldr	r3, [pc, #592]	; (8002054 <_Z4loopv+0x298>)
 8001e04:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e08:	469c      	mov	ip, r3
 8001e0a:	4b92      	ldr	r3, [pc, #584]	; (8002054 <_Z4loopv+0x298>)
 8001e0c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001e10:	469e      	mov	lr, r3
 8001e12:	4b90      	ldr	r3, [pc, #576]	; (8002054 <_Z4loopv+0x298>)
 8001e14:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001e18:	4619      	mov	r1, r3
 8001e1a:	4b8e      	ldr	r3, [pc, #568]	; (8002054 <_Z4loopv+0x298>)
 8001e1c:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001e20:	461c      	mov	r4, r3
 8001e22:	4b8c      	ldr	r3, [pc, #560]	; (8002054 <_Z4loopv+0x298>)
 8001e24:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001e28:	461d      	mov	r5, r3
 8001e2a:	4b8a      	ldr	r3, [pc, #552]	; (8002054 <_Z4loopv+0x298>)
 8001e2c:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001e30:	461e      	mov	r6, r3
 8001e32:	4b89      	ldr	r3, [pc, #548]	; (8002058 <_Z4loopv+0x29c>)
 8001e34:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e38:	617b      	str	r3, [r7, #20]
 8001e3a:	4b87      	ldr	r3, [pc, #540]	; (8002058 <_Z4loopv+0x29c>)
 8001e3c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001e40:	613b      	str	r3, [r7, #16]
 8001e42:	4b85      	ldr	r3, [pc, #532]	; (8002058 <_Z4loopv+0x29c>)
 8001e44:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001e48:	60fb      	str	r3, [r7, #12]
 8001e4a:	4b83      	ldr	r3, [pc, #524]	; (8002058 <_Z4loopv+0x29c>)
 8001e4c:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001e50:	60bb      	str	r3, [r7, #8]
 8001e52:	4b81      	ldr	r3, [pc, #516]	; (8002058 <_Z4loopv+0x29c>)
 8001e54:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001e58:	607b      	str	r3, [r7, #4]
 8001e5a:	4b7f      	ldr	r3, [pc, #508]	; (8002058 <_Z4loopv+0x29c>)
 8001e5c:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001e60:	603b      	str	r3, [r7, #0]
 8001e62:	4b7d      	ldr	r3, [pc, #500]	; (8002058 <_Z4loopv+0x29c>)
 8001e64:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8001e68:	461a      	mov	r2, r3
 8001e6a:	4b7b      	ldr	r3, [pc, #492]	; (8002058 <_Z4loopv+0x29c>)
 8001e6c:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8001e70:	f107 001c 	add.w	r0, r7, #28
 8001e74:	930b      	str	r3, [sp, #44]	; 0x2c
 8001e76:	920a      	str	r2, [sp, #40]	; 0x28
 8001e78:	683a      	ldr	r2, [r7, #0]
 8001e7a:	9209      	str	r2, [sp, #36]	; 0x24
 8001e7c:	687a      	ldr	r2, [r7, #4]
 8001e7e:	9208      	str	r2, [sp, #32]
 8001e80:	68ba      	ldr	r2, [r7, #8]
 8001e82:	9207      	str	r2, [sp, #28]
 8001e84:	68fa      	ldr	r2, [r7, #12]
 8001e86:	9206      	str	r2, [sp, #24]
 8001e88:	693a      	ldr	r2, [r7, #16]
 8001e8a:	9205      	str	r2, [sp, #20]
 8001e8c:	697b      	ldr	r3, [r7, #20]
 8001e8e:	9304      	str	r3, [sp, #16]
 8001e90:	9603      	str	r6, [sp, #12]
 8001e92:	9502      	str	r5, [sp, #8]
 8001e94:	9401      	str	r4, [sp, #4]
 8001e96:	9100      	str	r1, [sp, #0]
 8001e98:	4673      	mov	r3, lr
 8001e9a:	4662      	mov	r2, ip
 8001e9c:	496f      	ldr	r1, [pc, #444]	; (800205c <_Z4loopv+0x2a0>)
 8001e9e:	f008 f83b 	bl	8009f18 <siprintf>
	     uint8_t x = 0;
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
	     while (msg[x] != NULL)
 8001ea8:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8001eac:	f107 021c 	add.w	r2, r7, #28
 8001eb0:	5cd3      	ldrb	r3, [r2, r3]
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d005      	beq.n	8001ec2 <_Z4loopv+0x106>
	     	x++;
 8001eb6:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8001eba:	3301      	adds	r3, #1
 8001ebc:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
	     while (msg[x] != NULL)
 8001ec0:	e7f2      	b.n	8001ea8 <_Z4loopv+0xec>
	     unsigned char msgTransmit[x];
 8001ec2:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8001ec6:	1e5c      	subs	r4, r3, #1
 8001ec8:	f8c7 4150 	str.w	r4, [r7, #336]	; 0x150
 8001ecc:	4623      	mov	r3, r4
 8001ece:	3301      	adds	r3, #1
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	f04f 0100 	mov.w	r1, #0
 8001ed6:	f04f 0200 	mov.w	r2, #0
 8001eda:	f04f 0300 	mov.w	r3, #0
 8001ede:	00cb      	lsls	r3, r1, #3
 8001ee0:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8001ee4:	00c2      	lsls	r2, r0, #3
 8001ee6:	4623      	mov	r3, r4
 8001ee8:	3301      	adds	r3, #1
 8001eea:	4618      	mov	r0, r3
 8001eec:	f04f 0100 	mov.w	r1, #0
 8001ef0:	f04f 0200 	mov.w	r2, #0
 8001ef4:	f04f 0300 	mov.w	r3, #0
 8001ef8:	00cb      	lsls	r3, r1, #3
 8001efa:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8001efe:	00c2      	lsls	r2, r0, #3
 8001f00:	4623      	mov	r3, r4
 8001f02:	3301      	adds	r3, #1
 8001f04:	3307      	adds	r3, #7
 8001f06:	08db      	lsrs	r3, r3, #3
 8001f08:	00db      	lsls	r3, r3, #3
 8001f0a:	ebad 0d03 	sub.w	sp, sp, r3
 8001f0e:	ab0c      	add	r3, sp, #48	; 0x30
 8001f10:	3300      	adds	r3, #0
 8001f12:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
	     for (size_t i = 0; i < x; i++)
 8001f16:	2300      	movs	r3, #0
 8001f18:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
 8001f1c:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8001f20:	f8d7 215c 	ldr.w	r2, [r7, #348]	; 0x15c
 8001f24:	429a      	cmp	r2, r3
 8001f26:	d212      	bcs.n	8001f4e <_Z4loopv+0x192>
	     	msgTransmit[i] = msg[i];
 8001f28:	f107 021c 	add.w	r2, r7, #28
 8001f2c:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8001f30:	4413      	add	r3, r2
 8001f32:	7819      	ldrb	r1, [r3, #0]
 8001f34:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8001f38:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8001f3c:	4413      	add	r3, r2
 8001f3e:	460a      	mov	r2, r1
 8001f40:	701a      	strb	r2, [r3, #0]
	     for (size_t i = 0; i < x; i++)
 8001f42:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8001f46:	3301      	adds	r3, #1
 8001f48:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
 8001f4c:	e7e6      	b.n	8001f1c <_Z4loopv+0x160>
	     CDC_Transmit_FS((unsigned char*)msgTransmit, sizeof(msgTransmit));
 8001f4e:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8001f52:	b2a3      	uxth	r3, r4
 8001f54:	3301      	adds	r3, #1
 8001f56:	b29b      	uxth	r3, r3
 8001f58:	4619      	mov	r1, r3
 8001f5a:	4610      	mov	r0, r2
 8001f5c:	f007 f9a2 	bl	80092a4 <CDC_Transmit_FS>
 8001f60:	46c5      	mov	sp, r8
     for (size_t i = 0; i < 1; i++)
 8001f62:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8001f66:	3301      	adds	r3, #1
 8001f68:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8001f6c:	e742      	b.n	8001df4 <_Z4loopv+0x38>
	  //  CDC_Transmit_FS((unsigned char*)msgTransmit, sizeof(msgTransmit));
    //}
    

  }
  ADC_Select_Channel_11();
 8001f6e:	f7ff fe95 	bl	8001c9c <ADC_Select_Channel_11>
	adcValuesArray[0] = (uint16_t)ADC1->DR;
 8001f72:	4b3b      	ldr	r3, [pc, #236]	; (8002060 <_Z4loopv+0x2a4>)
 8001f74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f76:	b29a      	uxth	r2, r3
 8001f78:	4b3a      	ldr	r3, [pc, #232]	; (8002064 <_Z4loopv+0x2a8>)
 8001f7a:	801a      	strh	r2, [r3, #0]
	ADC_Select_Channel_12();
 8001f7c:	f7ff feb6 	bl	8001cec <ADC_Select_Channel_12>
	adcValuesArray[1] = (uint16_t)ADC1->DR;
 8001f80:	4b37      	ldr	r3, [pc, #220]	; (8002060 <_Z4loopv+0x2a4>)
 8001f82:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f84:	b29a      	uxth	r2, r3
 8001f86:	4b37      	ldr	r3, [pc, #220]	; (8002064 <_Z4loopv+0x2a8>)
 8001f88:	805a      	strh	r2, [r3, #2]

  uint16_t angle = motorAngle(adcValuesArray[1] - 1250, adcValuesArray[0] - 1250);
 8001f8a:	4b36      	ldr	r3, [pc, #216]	; (8002064 <_Z4loopv+0x2a8>)
 8001f8c:	885b      	ldrh	r3, [r3, #2]
 8001f8e:	f2a3 43e2 	subw	r3, r3, #1250	; 0x4e2
 8001f92:	4a34      	ldr	r2, [pc, #208]	; (8002064 <_Z4loopv+0x2a8>)
 8001f94:	8812      	ldrh	r2, [r2, #0]
 8001f96:	f2a2 42e2 	subw	r2, r2, #1250	; 0x4e2
 8001f9a:	4611      	mov	r1, r2
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	f000 f873 	bl	8002088 <_Z10motorAnglell>
 8001fa2:	4603      	mov	r3, r0
 8001fa4:	f8a7 314a 	strh.w	r3, [r7, #330]	; 0x14a

  slowPPM1_ONTime = (uint16_t)((((float)angle * (float)slowPPM1_MinTime) / (float)360) + (float)slowPPM1_MinTime);
 8001fa8:	f8b7 314a 	ldrh.w	r3, [r7, #330]	; 0x14a
 8001fac:	4618      	mov	r0, r3
 8001fae:	f7fe fdaf 	bl	8000b10 <__aeabi_ui2f>
 8001fb2:	4603      	mov	r3, r0
 8001fb4:	492c      	ldr	r1, [pc, #176]	; (8002068 <_Z4loopv+0x2ac>)
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	f7fe fe02 	bl	8000bc0 <__aeabi_fmul>
 8001fbc:	4603      	mov	r3, r0
 8001fbe:	492b      	ldr	r1, [pc, #172]	; (800206c <_Z4loopv+0x2b0>)
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	f7fe feb1 	bl	8000d28 <__aeabi_fdiv>
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	4927      	ldr	r1, [pc, #156]	; (8002068 <_Z4loopv+0x2ac>)
 8001fca:	4618      	mov	r0, r3
 8001fcc:	f7fe fcf0 	bl	80009b0 <__addsf3>
 8001fd0:	4603      	mov	r3, r0
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	f7fe ffe0 	bl	8000f98 <__aeabi_f2uiz>
 8001fd8:	4603      	mov	r3, r0
 8001fda:	b29a      	uxth	r2, r3
 8001fdc:	4b24      	ldr	r3, [pc, #144]	; (8002070 <_Z4loopv+0x2b4>)
 8001fde:	801a      	strh	r2, [r3, #0]
  slowPPM1_OFFTime = slowPPM1_Pulselength - fastPPM_ONTime;//OFF time in microseconds
 8001fe0:	4b24      	ldr	r3, [pc, #144]	; (8002074 <_Z4loopv+0x2b8>)
 8001fe2:	881b      	ldrh	r3, [r3, #0]
 8001fe4:	f5c3 439c 	rsb	r3, r3, #19968	; 0x4e00
 8001fe8:	3320      	adds	r3, #32
 8001fea:	b29a      	uxth	r2, r3
 8001fec:	4b22      	ldr	r3, [pc, #136]	; (8002078 <_Z4loopv+0x2bc>)
 8001fee:	801a      	strh	r2, [r3, #0]

  fastPPM_ONTime = (uint16_t)((((float)angle * (float)fastPPM_MinTime) / (float)360) + (float)fastPPM_MinTime);
 8001ff0:	f8b7 314a 	ldrh.w	r3, [r7, #330]	; 0x14a
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	f7fe fd8b 	bl	8000b10 <__aeabi_ui2f>
 8001ffa:	4603      	mov	r3, r0
 8001ffc:	491a      	ldr	r1, [pc, #104]	; (8002068 <_Z4loopv+0x2ac>)
 8001ffe:	4618      	mov	r0, r3
 8002000:	f7fe fdde 	bl	8000bc0 <__aeabi_fmul>
 8002004:	4603      	mov	r3, r0
 8002006:	4919      	ldr	r1, [pc, #100]	; (800206c <_Z4loopv+0x2b0>)
 8002008:	4618      	mov	r0, r3
 800200a:	f7fe fe8d 	bl	8000d28 <__aeabi_fdiv>
 800200e:	4603      	mov	r3, r0
 8002010:	4915      	ldr	r1, [pc, #84]	; (8002068 <_Z4loopv+0x2ac>)
 8002012:	4618      	mov	r0, r3
 8002014:	f7fe fccc 	bl	80009b0 <__addsf3>
 8002018:	4603      	mov	r3, r0
 800201a:	4618      	mov	r0, r3
 800201c:	f7fe ffbc 	bl	8000f98 <__aeabi_f2uiz>
 8002020:	4603      	mov	r3, r0
 8002022:	b29a      	uxth	r2, r3
 8002024:	4b13      	ldr	r3, [pc, #76]	; (8002074 <_Z4loopv+0x2b8>)
 8002026:	801a      	strh	r2, [r3, #0]
  fastPPM_OFFTime = fastPPM_Pulselength - fastPPM_ONTime;//OFF time in microseconds
 8002028:	4b12      	ldr	r3, [pc, #72]	; (8002074 <_Z4loopv+0x2b8>)
 800202a:	881b      	ldrh	r3, [r3, #0]
 800202c:	f5c3 631c 	rsb	r3, r3, #2496	; 0x9c0
 8002030:	3304      	adds	r3, #4
 8002032:	b29a      	uxth	r2, r3
 8002034:	4b11      	ldr	r3, [pc, #68]	; (800207c <_Z4loopv+0x2c0>)
 8002036:	801a      	strh	r2, [r3, #0]

  if (SBUSNewPackage == true)
 8002038:	4b11      	ldr	r3, [pc, #68]	; (8002080 <_Z4loopv+0x2c4>)
 800203a:	781b      	ldrb	r3, [r3, #0]
 800203c:	2b01      	cmp	r3, #1
 800203e:	d101      	bne.n	8002044 <_Z4loopv+0x288>
  {
    SBUS_PostProcessing();
 8002040:	f7ff f98e 	bl	8001360 <_Z19SBUS_PostProcessingv>
  }
}
 8002044:	bf00      	nop
 8002046:	f507 77b0 	add.w	r7, r7, #352	; 0x160
 800204a:	46bd      	mov	sp, r7
 800204c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002050:	200004fc 	.word	0x200004fc
 8002054:	200004ec 	.word	0x200004ec
 8002058:	20000348 	.word	0x20000348
 800205c:	0800a638 	.word	0x0800a638
 8002060:	40012000 	.word	0x40012000
 8002064:	20000500 	.word	0x20000500
 8002068:	447a0000 	.word	0x447a0000
 800206c:	43b40000 	.word	0x43b40000
 8002070:	20000002 	.word	0x20000002
 8002074:	20000000 	.word	0x20000000
 8002078:	200004d4 	.word	0x200004d4
 800207c:	200004d0 	.word	0x200004d0
 8002080:	20000359 	.word	0x20000359
 8002084:	00000000 	.word	0x00000000

08002088 <_Z10motorAnglell>:


uint16_t motorAngle(int32_t hall_1, int32_t hall_2)
{
 8002088:	b5f0      	push	{r4, r5, r6, r7, lr}
 800208a:	b085      	sub	sp, #20
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
 8002090:	6039      	str	r1, [r7, #0]
  uint16_t angle = 0;
 8002092:	2300      	movs	r3, #0
 8002094:	81fb      	strh	r3, [r7, #14]
  uint16_t offset = 0;
 8002096:	2300      	movs	r3, #0
 8002098:	81bb      	strh	r3, [r7, #12]
  
  if ((hall_1 == 0) | (hall_2 == 0))
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	2b00      	cmp	r3, #0
 800209e:	bf0c      	ite	eq
 80020a0:	2301      	moveq	r3, #1
 80020a2:	2300      	movne	r3, #0
 80020a4:	b2da      	uxtb	r2, r3
 80020a6:	683b      	ldr	r3, [r7, #0]
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	bf0c      	ite	eq
 80020ac:	2301      	moveq	r3, #1
 80020ae:	2300      	movne	r3, #0
 80020b0:	b2db      	uxtb	r3, r3
 80020b2:	4313      	orrs	r3, r2
 80020b4:	b2db      	uxtb	r3, r3
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d015      	beq.n	80020e6 <_Z10motorAnglell+0x5e>
    {
      if (hall_1 == 0)
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d108      	bne.n	80020d2 <_Z10motorAnglell+0x4a>
      {
        if (hall_2 > 0)
 80020c0:	683b      	ldr	r3, [r7, #0]
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	dd02      	ble.n	80020cc <_Z10motorAnglell+0x44>
        {
          angle = 0;
 80020c6:	2300      	movs	r3, #0
 80020c8:	81fb      	strh	r3, [r7, #14]
 80020ca:	e04d      	b.n	8002168 <_Z10motorAnglell+0xe0>
        }
        else
        {
          angle = 180;
 80020cc:	23b4      	movs	r3, #180	; 0xb4
 80020ce:	81fb      	strh	r3, [r7, #14]
 80020d0:	e04a      	b.n	8002168 <_Z10motorAnglell+0xe0>
        }
      }
      else
      {
        if (hall_1 > 0)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	dd02      	ble.n	80020de <_Z10motorAnglell+0x56>
        {
          angle = 90;
 80020d8:	235a      	movs	r3, #90	; 0x5a
 80020da:	81fb      	strh	r3, [r7, #14]
 80020dc:	e044      	b.n	8002168 <_Z10motorAnglell+0xe0>
        }
        else
        {
          angle = 270;
 80020de:	f44f 7387 	mov.w	r3, #270	; 0x10e
 80020e2:	81fb      	strh	r3, [r7, #14]
 80020e4:	e040      	b.n	8002168 <_Z10motorAnglell+0xe0>
        }
      }
    }
    else
    {
      if (hall_2 < 0)
 80020e6:	683b      	ldr	r3, [r7, #0]
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	da02      	bge.n	80020f2 <_Z10motorAnglell+0x6a>
      {
        offset = 180;
 80020ec:	23b4      	movs	r3, #180	; 0xb4
 80020ee:	81bb      	strh	r3, [r7, #12]
 80020f0:	e008      	b.n	8002104 <_Z10motorAnglell+0x7c>
      }
      else
      {
        if (hall_1 > 0)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	dd02      	ble.n	80020fe <_Z10motorAnglell+0x76>
        {
          offset = 0;
 80020f8:	2300      	movs	r3, #0
 80020fa:	81bb      	strh	r3, [r7, #12]
 80020fc:	e002      	b.n	8002104 <_Z10motorAnglell+0x7c>
        }
        else
        {
          offset = 360;
 80020fe:	f44f 73b4 	mov.w	r3, #360	; 0x168
 8002102:	81bb      	strh	r3, [r7, #12]
        }
      }  
      angle = offset + ((atan((float)hall_1 / (float)hall_2) * 180) / M_PI);
 8002104:	89bb      	ldrh	r3, [r7, #12]
 8002106:	4618      	mov	r0, r3
 8002108:	f7fe f9b0 	bl	800046c <__aeabi_i2d>
 800210c:	4604      	mov	r4, r0
 800210e:	460d      	mov	r5, r1
 8002110:	6878      	ldr	r0, [r7, #4]
 8002112:	f7fe fd01 	bl	8000b18 <__aeabi_i2f>
 8002116:	4606      	mov	r6, r0
 8002118:	6838      	ldr	r0, [r7, #0]
 800211a:	f7fe fcfd 	bl	8000b18 <__aeabi_i2f>
 800211e:	4603      	mov	r3, r0
 8002120:	4619      	mov	r1, r3
 8002122:	4630      	mov	r0, r6
 8002124:	f7fe fe00 	bl	8000d28 <__aeabi_fdiv>
 8002128:	4603      	mov	r3, r0
 800212a:	4618      	mov	r0, r3
 800212c:	f7ff fe3a 	bl	8001da4 <_ZSt4atanf>
 8002130:	4603      	mov	r3, r0
 8002132:	4913      	ldr	r1, [pc, #76]	; (8002180 <_Z10motorAnglell+0xf8>)
 8002134:	4618      	mov	r0, r3
 8002136:	f7fe fd43 	bl	8000bc0 <__aeabi_fmul>
 800213a:	4603      	mov	r3, r0
 800213c:	4618      	mov	r0, r3
 800213e:	f7fe f9a7 	bl	8000490 <__aeabi_f2d>
 8002142:	a30d      	add	r3, pc, #52	; (adr r3, 8002178 <_Z10motorAnglell+0xf0>)
 8002144:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002148:	f7fe fb24 	bl	8000794 <__aeabi_ddiv>
 800214c:	4602      	mov	r2, r0
 800214e:	460b      	mov	r3, r1
 8002150:	4620      	mov	r0, r4
 8002152:	4629      	mov	r1, r5
 8002154:	f7fe f83e 	bl	80001d4 <__adddf3>
 8002158:	4602      	mov	r2, r0
 800215a:	460b      	mov	r3, r1
 800215c:	4610      	mov	r0, r2
 800215e:	4619      	mov	r1, r3
 8002160:	f7fe fc00 	bl	8000964 <__aeabi_d2uiz>
 8002164:	4603      	mov	r3, r0
 8002166:	81fb      	strh	r3, [r7, #14]
    }  
    return angle;
 8002168:	89fb      	ldrh	r3, [r7, #14]
 800216a:	4618      	mov	r0, r3
 800216c:	3714      	adds	r7, #20
 800216e:	46bd      	mov	sp, r7
 8002170:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002172:	bf00      	nop
 8002174:	f3af 8000 	nop.w
 8002178:	54442d18 	.word	0x54442d18
 800217c:	400921fb 	.word	0x400921fb
 8002180:	43340000 	.word	0x43340000

08002184 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002184:	b480      	push	{r7}
 8002186:	b083      	sub	sp, #12
 8002188:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800218a:	2300      	movs	r3, #0
 800218c:	607b      	str	r3, [r7, #4]
 800218e:	4b0f      	ldr	r3, [pc, #60]	; (80021cc <HAL_MspInit+0x48>)
 8002190:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002192:	4a0e      	ldr	r2, [pc, #56]	; (80021cc <HAL_MspInit+0x48>)
 8002194:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002198:	6453      	str	r3, [r2, #68]	; 0x44
 800219a:	4b0c      	ldr	r3, [pc, #48]	; (80021cc <HAL_MspInit+0x48>)
 800219c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800219e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80021a2:	607b      	str	r3, [r7, #4]
 80021a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80021a6:	2300      	movs	r3, #0
 80021a8:	603b      	str	r3, [r7, #0]
 80021aa:	4b08      	ldr	r3, [pc, #32]	; (80021cc <HAL_MspInit+0x48>)
 80021ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ae:	4a07      	ldr	r2, [pc, #28]	; (80021cc <HAL_MspInit+0x48>)
 80021b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021b4:	6413      	str	r3, [r2, #64]	; 0x40
 80021b6:	4b05      	ldr	r3, [pc, #20]	; (80021cc <HAL_MspInit+0x48>)
 80021b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021be:	603b      	str	r3, [r7, #0]
 80021c0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80021c2:	bf00      	nop
 80021c4:	370c      	adds	r7, #12
 80021c6:	46bd      	mov	sp, r7
 80021c8:	bc80      	pop	{r7}
 80021ca:	4770      	bx	lr
 80021cc:	40023800 	.word	0x40023800

080021d0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	b08a      	sub	sp, #40	; 0x28
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021d8:	f107 0314 	add.w	r3, r7, #20
 80021dc:	2200      	movs	r2, #0
 80021de:	601a      	str	r2, [r3, #0]
 80021e0:	605a      	str	r2, [r3, #4]
 80021e2:	609a      	str	r2, [r3, #8]
 80021e4:	60da      	str	r2, [r3, #12]
 80021e6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	4a17      	ldr	r2, [pc, #92]	; (800224c <HAL_ADC_MspInit+0x7c>)
 80021ee:	4293      	cmp	r3, r2
 80021f0:	d127      	bne.n	8002242 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80021f2:	2300      	movs	r3, #0
 80021f4:	613b      	str	r3, [r7, #16]
 80021f6:	4b16      	ldr	r3, [pc, #88]	; (8002250 <HAL_ADC_MspInit+0x80>)
 80021f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021fa:	4a15      	ldr	r2, [pc, #84]	; (8002250 <HAL_ADC_MspInit+0x80>)
 80021fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002200:	6453      	str	r3, [r2, #68]	; 0x44
 8002202:	4b13      	ldr	r3, [pc, #76]	; (8002250 <HAL_ADC_MspInit+0x80>)
 8002204:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002206:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800220a:	613b      	str	r3, [r7, #16]
 800220c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800220e:	2300      	movs	r3, #0
 8002210:	60fb      	str	r3, [r7, #12]
 8002212:	4b0f      	ldr	r3, [pc, #60]	; (8002250 <HAL_ADC_MspInit+0x80>)
 8002214:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002216:	4a0e      	ldr	r2, [pc, #56]	; (8002250 <HAL_ADC_MspInit+0x80>)
 8002218:	f043 0304 	orr.w	r3, r3, #4
 800221c:	6313      	str	r3, [r2, #48]	; 0x30
 800221e:	4b0c      	ldr	r3, [pc, #48]	; (8002250 <HAL_ADC_MspInit+0x80>)
 8002220:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002222:	f003 0304 	and.w	r3, r3, #4
 8002226:	60fb      	str	r3, [r7, #12]
 8002228:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC1     ------> ADC1_IN11
    PC2     ------> ADC1_IN12
    */
    GPIO_InitStruct.Pin = ONBOARD_ADC_2_Pin|ONBOARD_ADC_1_Pin;
 800222a:	2306      	movs	r3, #6
 800222c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800222e:	2303      	movs	r3, #3
 8002230:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002232:	2300      	movs	r3, #0
 8002234:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002236:	f107 0314 	add.w	r3, r7, #20
 800223a:	4619      	mov	r1, r3
 800223c:	4805      	ldr	r0, [pc, #20]	; (8002254 <HAL_ADC_MspInit+0x84>)
 800223e:	f000 fe1d 	bl	8002e7c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002242:	bf00      	nop
 8002244:	3728      	adds	r7, #40	; 0x28
 8002246:	46bd      	mov	sp, r7
 8002248:	bd80      	pop	{r7, pc}
 800224a:	bf00      	nop
 800224c:	40012000 	.word	0x40012000
 8002250:	40023800 	.word	0x40023800
 8002254:	40020800 	.word	0x40020800

08002258 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	b08a      	sub	sp, #40	; 0x28
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002260:	f107 0314 	add.w	r3, r7, #20
 8002264:	2200      	movs	r2, #0
 8002266:	601a      	str	r2, [r3, #0]
 8002268:	605a      	str	r2, [r3, #4]
 800226a:	609a      	str	r2, [r3, #8]
 800226c:	60da      	str	r2, [r3, #12]
 800226e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	4a19      	ldr	r2, [pc, #100]	; (80022dc <HAL_I2C_MspInit+0x84>)
 8002276:	4293      	cmp	r3, r2
 8002278:	d12c      	bne.n	80022d4 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800227a:	2300      	movs	r3, #0
 800227c:	613b      	str	r3, [r7, #16]
 800227e:	4b18      	ldr	r3, [pc, #96]	; (80022e0 <HAL_I2C_MspInit+0x88>)
 8002280:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002282:	4a17      	ldr	r2, [pc, #92]	; (80022e0 <HAL_I2C_MspInit+0x88>)
 8002284:	f043 0302 	orr.w	r3, r3, #2
 8002288:	6313      	str	r3, [r2, #48]	; 0x30
 800228a:	4b15      	ldr	r3, [pc, #84]	; (80022e0 <HAL_I2C_MspInit+0x88>)
 800228c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800228e:	f003 0302 	and.w	r3, r3, #2
 8002292:	613b      	str	r3, [r7, #16]
 8002294:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002296:	f44f 7340 	mov.w	r3, #768	; 0x300
 800229a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800229c:	2312      	movs	r3, #18
 800229e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022a0:	2300      	movs	r3, #0
 80022a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022a4:	2303      	movs	r3, #3
 80022a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80022a8:	2304      	movs	r3, #4
 80022aa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022ac:	f107 0314 	add.w	r3, r7, #20
 80022b0:	4619      	mov	r1, r3
 80022b2:	480c      	ldr	r0, [pc, #48]	; (80022e4 <HAL_I2C_MspInit+0x8c>)
 80022b4:	f000 fde2 	bl	8002e7c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80022b8:	2300      	movs	r3, #0
 80022ba:	60fb      	str	r3, [r7, #12]
 80022bc:	4b08      	ldr	r3, [pc, #32]	; (80022e0 <HAL_I2C_MspInit+0x88>)
 80022be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022c0:	4a07      	ldr	r2, [pc, #28]	; (80022e0 <HAL_I2C_MspInit+0x88>)
 80022c2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80022c6:	6413      	str	r3, [r2, #64]	; 0x40
 80022c8:	4b05      	ldr	r3, [pc, #20]	; (80022e0 <HAL_I2C_MspInit+0x88>)
 80022ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022cc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80022d0:	60fb      	str	r3, [r7, #12]
 80022d2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80022d4:	bf00      	nop
 80022d6:	3728      	adds	r7, #40	; 0x28
 80022d8:	46bd      	mov	sp, r7
 80022da:	bd80      	pop	{r7, pc}
 80022dc:	40005400 	.word	0x40005400
 80022e0:	40023800 	.word	0x40023800
 80022e4:	40020400 	.word	0x40020400

080022e8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b086      	sub	sp, #24
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM11)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	4a26      	ldr	r2, [pc, #152]	; (8002390 <HAL_TIM_Base_MspInit+0xa8>)
 80022f6:	4293      	cmp	r3, r2
 80022f8:	d10e      	bne.n	8002318 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM11_MspInit 0 */

  /* USER CODE END TIM11_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM11_CLK_ENABLE();
 80022fa:	2300      	movs	r3, #0
 80022fc:	617b      	str	r3, [r7, #20]
 80022fe:	4b25      	ldr	r3, [pc, #148]	; (8002394 <HAL_TIM_Base_MspInit+0xac>)
 8002300:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002302:	4a24      	ldr	r2, [pc, #144]	; (8002394 <HAL_TIM_Base_MspInit+0xac>)
 8002304:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002308:	6453      	str	r3, [r2, #68]	; 0x44
 800230a:	4b22      	ldr	r3, [pc, #136]	; (8002394 <HAL_TIM_Base_MspInit+0xac>)
 800230c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800230e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002312:	617b      	str	r3, [r7, #20]
 8002314:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 8002316:	e036      	b.n	8002386 <HAL_TIM_Base_MspInit+0x9e>
  else if(htim_base->Instance==TIM13)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	4a1e      	ldr	r2, [pc, #120]	; (8002398 <HAL_TIM_Base_MspInit+0xb0>)
 800231e:	4293      	cmp	r3, r2
 8002320:	d116      	bne.n	8002350 <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM13_CLK_ENABLE();
 8002322:	2300      	movs	r3, #0
 8002324:	613b      	str	r3, [r7, #16]
 8002326:	4b1b      	ldr	r3, [pc, #108]	; (8002394 <HAL_TIM_Base_MspInit+0xac>)
 8002328:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800232a:	4a1a      	ldr	r2, [pc, #104]	; (8002394 <HAL_TIM_Base_MspInit+0xac>)
 800232c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002330:	6413      	str	r3, [r2, #64]	; 0x40
 8002332:	4b18      	ldr	r3, [pc, #96]	; (8002394 <HAL_TIM_Base_MspInit+0xac>)
 8002334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002336:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800233a:	613b      	str	r3, [r7, #16]
 800233c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 2, 0);
 800233e:	2200      	movs	r2, #0
 8002340:	2102      	movs	r1, #2
 8002342:	202c      	movs	r0, #44	; 0x2c
 8002344:	f000 fd63 	bl	8002e0e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8002348:	202c      	movs	r0, #44	; 0x2c
 800234a:	f000 fd7c 	bl	8002e46 <HAL_NVIC_EnableIRQ>
}
 800234e:	e01a      	b.n	8002386 <HAL_TIM_Base_MspInit+0x9e>
  else if(htim_base->Instance==TIM14)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	4a11      	ldr	r2, [pc, #68]	; (800239c <HAL_TIM_Base_MspInit+0xb4>)
 8002356:	4293      	cmp	r3, r2
 8002358:	d115      	bne.n	8002386 <HAL_TIM_Base_MspInit+0x9e>
    __HAL_RCC_TIM14_CLK_ENABLE();
 800235a:	2300      	movs	r3, #0
 800235c:	60fb      	str	r3, [r7, #12]
 800235e:	4b0d      	ldr	r3, [pc, #52]	; (8002394 <HAL_TIM_Base_MspInit+0xac>)
 8002360:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002362:	4a0c      	ldr	r2, [pc, #48]	; (8002394 <HAL_TIM_Base_MspInit+0xac>)
 8002364:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002368:	6413      	str	r3, [r2, #64]	; 0x40
 800236a:	4b0a      	ldr	r3, [pc, #40]	; (8002394 <HAL_TIM_Base_MspInit+0xac>)
 800236c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800236e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002372:	60fb      	str	r3, [r7, #12]
 8002374:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 1, 0);
 8002376:	2200      	movs	r2, #0
 8002378:	2101      	movs	r1, #1
 800237a:	202d      	movs	r0, #45	; 0x2d
 800237c:	f000 fd47 	bl	8002e0e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8002380:	202d      	movs	r0, #45	; 0x2d
 8002382:	f000 fd60 	bl	8002e46 <HAL_NVIC_EnableIRQ>
}
 8002386:	bf00      	nop
 8002388:	3718      	adds	r7, #24
 800238a:	46bd      	mov	sp, r7
 800238c:	bd80      	pop	{r7, pc}
 800238e:	bf00      	nop
 8002390:	40014800 	.word	0x40014800
 8002394:	40023800 	.word	0x40023800
 8002398:	40001c00 	.word	0x40001c00
 800239c:	40002000 	.word	0x40002000

080023a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 80023a4:	f003 fc90 	bl	8005cc8 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80023a8:	e7fe      	b.n	80023a8 <NMI_Handler+0x8>

080023aa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80023aa:	b480      	push	{r7}
 80023ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80023ae:	e7fe      	b.n	80023ae <HardFault_Handler+0x4>

080023b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80023b0:	b480      	push	{r7}
 80023b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80023b4:	e7fe      	b.n	80023b4 <MemManage_Handler+0x4>

080023b6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80023b6:	b480      	push	{r7}
 80023b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80023ba:	e7fe      	b.n	80023ba <BusFault_Handler+0x4>

080023bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80023bc:	b480      	push	{r7}
 80023be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80023c0:	e7fe      	b.n	80023c0 <UsageFault_Handler+0x4>

080023c2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80023c2:	b480      	push	{r7}
 80023c4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80023c6:	bf00      	nop
 80023c8:	46bd      	mov	sp, r7
 80023ca:	bc80      	pop	{r7}
 80023cc:	4770      	bx	lr

080023ce <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80023ce:	b480      	push	{r7}
 80023d0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80023d2:	bf00      	nop
 80023d4:	46bd      	mov	sp, r7
 80023d6:	bc80      	pop	{r7}
 80023d8:	4770      	bx	lr

080023da <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80023da:	b480      	push	{r7}
 80023dc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80023de:	bf00      	nop
 80023e0:	46bd      	mov	sp, r7
 80023e2:	bc80      	pop	{r7}
 80023e4:	4770      	bx	lr

080023e6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80023e6:	b580      	push	{r7, lr}
 80023e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80023ea:	f000 f8df 	bl	80025ac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80023ee:	bf00      	nop
 80023f0:	bd80      	pop	{r7, pc}

080023f2 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80023f2:	b580      	push	{r7, lr}
 80023f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ONBOARD_READ_IT_3_Pin);
 80023f6:	2001      	movs	r0, #1
 80023f8:	f000 ff10 	bl	800321c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80023fc:	bf00      	nop
 80023fe:	bd80      	pop	{r7, pc}

08002400 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim13);
 8002404:	4802      	ldr	r0, [pc, #8]	; (8002410 <TIM8_UP_TIM13_IRQHandler+0x10>)
 8002406:	f003 fd9d 	bl	8005f44 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 800240a:	bf00      	nop
 800240c:	bd80      	pop	{r7, pc}
 800240e:	bf00      	nop
 8002410:	20000440 	.word	0x20000440

08002414 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8002418:	4802      	ldr	r0, [pc, #8]	; (8002424 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 800241a:	f003 fd93 	bl	8005f44 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 800241e:	bf00      	nop
 8002420:	bd80      	pop	{r7, pc}
 8002422:	bf00      	nop
 8002424:	20000488 	.word	0x20000488

08002428 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800242c:	4802      	ldr	r0, [pc, #8]	; (8002438 <OTG_FS_IRQHandler+0x10>)
 800242e:	f001 ffe0 	bl	80043f2 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8002432:	bf00      	nop
 8002434:	bd80      	pop	{r7, pc}
 8002436:	bf00      	nop
 8002438:	200019dc 	.word	0x200019dc

0800243c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	b086      	sub	sp, #24
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002444:	4a14      	ldr	r2, [pc, #80]	; (8002498 <_sbrk+0x5c>)
 8002446:	4b15      	ldr	r3, [pc, #84]	; (800249c <_sbrk+0x60>)
 8002448:	1ad3      	subs	r3, r2, r3
 800244a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800244c:	697b      	ldr	r3, [r7, #20]
 800244e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002450:	4b13      	ldr	r3, [pc, #76]	; (80024a0 <_sbrk+0x64>)
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	2b00      	cmp	r3, #0
 8002456:	d102      	bne.n	800245e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002458:	4b11      	ldr	r3, [pc, #68]	; (80024a0 <_sbrk+0x64>)
 800245a:	4a12      	ldr	r2, [pc, #72]	; (80024a4 <_sbrk+0x68>)
 800245c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800245e:	4b10      	ldr	r3, [pc, #64]	; (80024a0 <_sbrk+0x64>)
 8002460:	681a      	ldr	r2, [r3, #0]
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	4413      	add	r3, r2
 8002466:	693a      	ldr	r2, [r7, #16]
 8002468:	429a      	cmp	r2, r3
 800246a:	d207      	bcs.n	800247c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800246c:	f007 fc5c 	bl	8009d28 <__errno>
 8002470:	4603      	mov	r3, r0
 8002472:	220c      	movs	r2, #12
 8002474:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002476:	f04f 33ff 	mov.w	r3, #4294967295
 800247a:	e009      	b.n	8002490 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800247c:	4b08      	ldr	r3, [pc, #32]	; (80024a0 <_sbrk+0x64>)
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002482:	4b07      	ldr	r3, [pc, #28]	; (80024a0 <_sbrk+0x64>)
 8002484:	681a      	ldr	r2, [r3, #0]
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	4413      	add	r3, r2
 800248a:	4a05      	ldr	r2, [pc, #20]	; (80024a0 <_sbrk+0x64>)
 800248c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800248e:	68fb      	ldr	r3, [r7, #12]
}
 8002490:	4618      	mov	r0, r3
 8002492:	3718      	adds	r7, #24
 8002494:	46bd      	mov	sp, r7
 8002496:	bd80      	pop	{r7, pc}
 8002498:	20020000 	.word	0x20020000
 800249c:	00000400 	.word	0x00000400
 80024a0:	20000504 	.word	0x20000504
 80024a4:	20001df0 	.word	0x20001df0

080024a8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80024a8:	b480      	push	{r7}
 80024aa:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80024ac:	bf00      	nop
 80024ae:	46bd      	mov	sp, r7
 80024b0:	bc80      	pop	{r7}
 80024b2:	4770      	bx	lr

080024b4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80024b4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80024ec <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80024b8:	480d      	ldr	r0, [pc, #52]	; (80024f0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80024ba:	490e      	ldr	r1, [pc, #56]	; (80024f4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80024bc:	4a0e      	ldr	r2, [pc, #56]	; (80024f8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80024be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80024c0:	e002      	b.n	80024c8 <LoopCopyDataInit>

080024c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80024c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80024c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80024c6:	3304      	adds	r3, #4

080024c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80024c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80024ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80024cc:	d3f9      	bcc.n	80024c2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80024ce:	4a0b      	ldr	r2, [pc, #44]	; (80024fc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80024d0:	4c0b      	ldr	r4, [pc, #44]	; (8002500 <LoopFillZerobss+0x26>)
  movs r3, #0
 80024d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80024d4:	e001      	b.n	80024da <LoopFillZerobss>

080024d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80024d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80024d8:	3204      	adds	r2, #4

080024da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80024da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80024dc:	d3fb      	bcc.n	80024d6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80024de:	f7ff ffe3 	bl	80024a8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80024e2:	f007 fc27 	bl	8009d34 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80024e6:	f7ff f835 	bl	8001554 <main>
  bx  lr    
 80024ea:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80024ec:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80024f0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80024f4:	200001ec 	.word	0x200001ec
  ldr r2, =_sidata
 80024f8:	0800a73c 	.word	0x0800a73c
  ldr r2, =_sbss
 80024fc:	200001ec 	.word	0x200001ec
  ldr r4, =_ebss
 8002500:	20001dec 	.word	0x20001dec

08002504 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002504:	e7fe      	b.n	8002504 <ADC_IRQHandler>
	...

08002508 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
   __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800250c:	4b0e      	ldr	r3, [pc, #56]	; (8002548 <HAL_Init+0x40>)
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	4a0d      	ldr	r2, [pc, #52]	; (8002548 <HAL_Init+0x40>)
 8002512:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002516:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
   __HAL_FLASH_DATA_CACHE_ENABLE();
 8002518:	4b0b      	ldr	r3, [pc, #44]	; (8002548 <HAL_Init+0x40>)
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	4a0a      	ldr	r2, [pc, #40]	; (8002548 <HAL_Init+0x40>)
 800251e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002522:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002524:	4b08      	ldr	r3, [pc, #32]	; (8002548 <HAL_Init+0x40>)
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	4a07      	ldr	r2, [pc, #28]	; (8002548 <HAL_Init+0x40>)
 800252a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800252e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002530:	2003      	movs	r0, #3
 8002532:	f000 fc61 	bl	8002df8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002536:	200f      	movs	r0, #15
 8002538:	f000 f808 	bl	800254c <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 800253c:	f7ff fe22 	bl	8002184 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8002540:	2300      	movs	r3, #0
}
 8002542:	4618      	mov	r0, r3
 8002544:	bd80      	pop	{r7, pc}
 8002546:	bf00      	nop
 8002548:	40023c00 	.word	0x40023c00

0800254c <HAL_InitTick>:
  *       implementation  in user file.
  * @param  TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800254c:	b580      	push	{r7, lr}
 800254e:	b082      	sub	sp, #8
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002554:	4b12      	ldr	r3, [pc, #72]	; (80025a0 <HAL_InitTick+0x54>)
 8002556:	681a      	ldr	r2, [r3, #0]
 8002558:	4b12      	ldr	r3, [pc, #72]	; (80025a4 <HAL_InitTick+0x58>)
 800255a:	781b      	ldrb	r3, [r3, #0]
 800255c:	4619      	mov	r1, r3
 800255e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002562:	fbb3 f3f1 	udiv	r3, r3, r1
 8002566:	fbb2 f3f3 	udiv	r3, r2, r3
 800256a:	4618      	mov	r0, r3
 800256c:	f000 fc79 	bl	8002e62 <HAL_SYSTICK_Config>
 8002570:	4603      	mov	r3, r0
 8002572:	2b00      	cmp	r3, #0
 8002574:	d001      	beq.n	800257a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002576:	2301      	movs	r3, #1
 8002578:	e00e      	b.n	8002598 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	2b0f      	cmp	r3, #15
 800257e:	d80a      	bhi.n	8002596 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002580:	2200      	movs	r2, #0
 8002582:	6879      	ldr	r1, [r7, #4]
 8002584:	f04f 30ff 	mov.w	r0, #4294967295
 8002588:	f000 fc41 	bl	8002e0e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800258c:	4a06      	ldr	r2, [pc, #24]	; (80025a8 <HAL_InitTick+0x5c>)
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002592:	2300      	movs	r3, #0
 8002594:	e000      	b.n	8002598 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002596:	2301      	movs	r3, #1
}
 8002598:	4618      	mov	r0, r3
 800259a:	3708      	adds	r7, #8
 800259c:	46bd      	mov	sp, r7
 800259e:	bd80      	pop	{r7, pc}
 80025a0:	20000004 	.word	0x20000004
 80025a4:	2000000c 	.word	0x2000000c
 80025a8:	20000008 	.word	0x20000008

080025ac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80025ac:	b480      	push	{r7}
 80025ae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80025b0:	4b05      	ldr	r3, [pc, #20]	; (80025c8 <HAL_IncTick+0x1c>)
 80025b2:	781b      	ldrb	r3, [r3, #0]
 80025b4:	461a      	mov	r2, r3
 80025b6:	4b05      	ldr	r3, [pc, #20]	; (80025cc <HAL_IncTick+0x20>)
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	4413      	add	r3, r2
 80025bc:	4a03      	ldr	r2, [pc, #12]	; (80025cc <HAL_IncTick+0x20>)
 80025be:	6013      	str	r3, [r2, #0]
}
 80025c0:	bf00      	nop
 80025c2:	46bd      	mov	sp, r7
 80025c4:	bc80      	pop	{r7}
 80025c6:	4770      	bx	lr
 80025c8:	2000000c 	.word	0x2000000c
 80025cc:	20000514 	.word	0x20000514

080025d0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80025d0:	b480      	push	{r7}
 80025d2:	af00      	add	r7, sp, #0
  return uwTick;
 80025d4:	4b02      	ldr	r3, [pc, #8]	; (80025e0 <HAL_GetTick+0x10>)
 80025d6:	681b      	ldr	r3, [r3, #0]
}
 80025d8:	4618      	mov	r0, r3
 80025da:	46bd      	mov	sp, r7
 80025dc:	bc80      	pop	{r7}
 80025de:	4770      	bx	lr
 80025e0:	20000514 	.word	0x20000514

080025e4 <HAL_Delay>:
  *       implementations in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b084      	sub	sp, #16
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80025ec:	f7ff fff0 	bl	80025d0 <HAL_GetTick>
 80025f0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025fc:	d005      	beq.n	800260a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80025fe:	4b0a      	ldr	r3, [pc, #40]	; (8002628 <HAL_Delay+0x44>)
 8002600:	781b      	ldrb	r3, [r3, #0]
 8002602:	461a      	mov	r2, r3
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	4413      	add	r3, r2
 8002608:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800260a:	bf00      	nop
 800260c:	f7ff ffe0 	bl	80025d0 <HAL_GetTick>
 8002610:	4602      	mov	r2, r0
 8002612:	68bb      	ldr	r3, [r7, #8]
 8002614:	1ad3      	subs	r3, r2, r3
 8002616:	68fa      	ldr	r2, [r7, #12]
 8002618:	429a      	cmp	r2, r3
 800261a:	d8f7      	bhi.n	800260c <HAL_Delay+0x28>
  {
  }
}
 800261c:	bf00      	nop
 800261e:	bf00      	nop
 8002620:	3710      	adds	r7, #16
 8002622:	46bd      	mov	sp, r7
 8002624:	bd80      	pop	{r7, pc}
 8002626:	bf00      	nop
 8002628:	2000000c 	.word	0x2000000c

0800262c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	b084      	sub	sp, #16
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002634:	2300      	movs	r3, #0
 8002636:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	2b00      	cmp	r3, #0
 800263c:	d101      	bne.n	8002642 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800263e:	2301      	movs	r3, #1
 8002640:	e033      	b.n	80026aa <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002646:	2b00      	cmp	r3, #0
 8002648:	d109      	bne.n	800265e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800264a:	6878      	ldr	r0, [r7, #4]
 800264c:	f7ff fdc0 	bl	80021d0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	2200      	movs	r2, #0
 8002654:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	2200      	movs	r2, #0
 800265a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002662:	f003 0310 	and.w	r3, r3, #16
 8002666:	2b00      	cmp	r3, #0
 8002668:	d118      	bne.n	800269c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800266e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002672:	f023 0302 	bic.w	r3, r3, #2
 8002676:	f043 0202 	orr.w	r2, r3, #2
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800267e:	6878      	ldr	r0, [r7, #4]
 8002680:	f000 f9e8 	bl	8002a54 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	2200      	movs	r2, #0
 8002688:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800268e:	f023 0303 	bic.w	r3, r3, #3
 8002692:	f043 0201 	orr.w	r2, r3, #1
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	641a      	str	r2, [r3, #64]	; 0x40
 800269a:	e001      	b.n	80026a0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800269c:	2301      	movs	r3, #1
 800269e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	2200      	movs	r2, #0
 80026a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80026a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80026aa:	4618      	mov	r0, r3
 80026ac:	3710      	adds	r7, #16
 80026ae:	46bd      	mov	sp, r7
 80026b0:	bd80      	pop	{r7, pc}
	...

080026b4 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80026b4:	b480      	push	{r7}
 80026b6:	b085      	sub	sp, #20
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80026bc:	2300      	movs	r3, #0
 80026be:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80026c6:	2b01      	cmp	r3, #1
 80026c8:	d101      	bne.n	80026ce <HAL_ADC_Start+0x1a>
 80026ca:	2302      	movs	r3, #2
 80026cc:	e095      	b.n	80027fa <HAL_ADC_Start+0x146>
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	2201      	movs	r2, #1
 80026d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	689b      	ldr	r3, [r3, #8]
 80026dc:	f003 0301 	and.w	r3, r3, #1
 80026e0:	2b01      	cmp	r3, #1
 80026e2:	d018      	beq.n	8002716 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	689a      	ldr	r2, [r3, #8]
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f042 0201 	orr.w	r2, r2, #1
 80026f2:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80026f4:	4b43      	ldr	r3, [pc, #268]	; (8002804 <HAL_ADC_Start+0x150>)
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	4a43      	ldr	r2, [pc, #268]	; (8002808 <HAL_ADC_Start+0x154>)
 80026fa:	fba2 2303 	umull	r2, r3, r2, r3
 80026fe:	0c9a      	lsrs	r2, r3, #18
 8002700:	4613      	mov	r3, r2
 8002702:	005b      	lsls	r3, r3, #1
 8002704:	4413      	add	r3, r2
 8002706:	60fb      	str	r3, [r7, #12]
    while(counter != 0U)
 8002708:	e002      	b.n	8002710 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	3b01      	subs	r3, #1
 800270e:	60fb      	str	r3, [r7, #12]
    while(counter != 0U)
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	2b00      	cmp	r3, #0
 8002714:	d1f9      	bne.n	800270a <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	689b      	ldr	r3, [r3, #8]
 800271c:	f003 0301 	and.w	r3, r3, #1
 8002720:	2b01      	cmp	r3, #1
 8002722:	d15d      	bne.n	80027e0 <HAL_ADC_Start+0x12c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002728:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800272c:	f023 0301 	bic.w	r3, r3, #1
 8002730:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	685b      	ldr	r3, [r3, #4]
 800273e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002742:	2b00      	cmp	r3, #0
 8002744:	d007      	beq.n	8002756 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800274a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800274e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800275a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800275e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002762:	d106      	bne.n	8002772 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002768:	f023 0206 	bic.w	r2, r3, #6
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	645a      	str	r2, [r3, #68]	; 0x44
 8002770:	e002      	b.n	8002778 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	2200      	movs	r2, #0
 8002776:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	2200      	movs	r2, #0
 800277c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002788:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 800278a:	4b20      	ldr	r3, [pc, #128]	; (800280c <HAL_ADC_Start+0x158>)
 800278c:	685b      	ldr	r3, [r3, #4]
 800278e:	f003 031f 	and.w	r3, r3, #31
 8002792:	2b00      	cmp	r3, #0
 8002794:	d10f      	bne.n	80027b6 <HAL_ADC_Start+0x102>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	689b      	ldr	r3, [r3, #8]
 800279c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d129      	bne.n	80027f8 <HAL_ADC_Start+0x144>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	689a      	ldr	r2, [r3, #8]
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80027b2:	609a      	str	r2, [r3, #8]
 80027b4:	e020      	b.n	80027f8 <HAL_ADC_Start+0x144>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	4a15      	ldr	r2, [pc, #84]	; (8002810 <HAL_ADC_Start+0x15c>)
 80027bc:	4293      	cmp	r3, r2
 80027be:	d11b      	bne.n	80027f8 <HAL_ADC_Start+0x144>
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	689b      	ldr	r3, [r3, #8]
 80027c6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d114      	bne.n	80027f8 <HAL_ADC_Start+0x144>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	689a      	ldr	r2, [r3, #8]
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80027dc:	609a      	str	r2, [r3, #8]
 80027de:	e00b      	b.n	80027f8 <HAL_ADC_Start+0x144>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027e4:	f043 0210 	orr.w	r2, r3, #16
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027f0:	f043 0201 	orr.w	r2, r3, #1
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80027f8:	2300      	movs	r3, #0
}
 80027fa:	4618      	mov	r0, r3
 80027fc:	3714      	adds	r7, #20
 80027fe:	46bd      	mov	sp, r7
 8002800:	bc80      	pop	{r7}
 8002802:	4770      	bx	lr
 8002804:	20000004 	.word	0x20000004
 8002808:	431bde83 	.word	0x431bde83
 800280c:	40012300 	.word	0x40012300
 8002810:	40012000 	.word	0x40012000

08002814 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002814:	b480      	push	{r7}
 8002816:	b085      	sub	sp, #20
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]
 800281c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800281e:	2300      	movs	r3, #0
 8002820:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002828:	2b01      	cmp	r3, #1
 800282a:	d101      	bne.n	8002830 <HAL_ADC_ConfigChannel+0x1c>
 800282c:	2302      	movs	r3, #2
 800282e:	e103      	b.n	8002a38 <HAL_ADC_ConfigChannel+0x224>
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	2201      	movs	r2, #1
 8002834:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002838:	683b      	ldr	r3, [r7, #0]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	2b09      	cmp	r3, #9
 800283e:	d925      	bls.n	800288c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	68d9      	ldr	r1, [r3, #12]
 8002846:	683b      	ldr	r3, [r7, #0]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	b29b      	uxth	r3, r3
 800284c:	461a      	mov	r2, r3
 800284e:	4613      	mov	r3, r2
 8002850:	005b      	lsls	r3, r3, #1
 8002852:	4413      	add	r3, r2
 8002854:	3b1e      	subs	r3, #30
 8002856:	2207      	movs	r2, #7
 8002858:	fa02 f303 	lsl.w	r3, r2, r3
 800285c:	43da      	mvns	r2, r3
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	400a      	ands	r2, r1
 8002864:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	68d9      	ldr	r1, [r3, #12]
 800286c:	683b      	ldr	r3, [r7, #0]
 800286e:	689a      	ldr	r2, [r3, #8]
 8002870:	683b      	ldr	r3, [r7, #0]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	b29b      	uxth	r3, r3
 8002876:	4618      	mov	r0, r3
 8002878:	4603      	mov	r3, r0
 800287a:	005b      	lsls	r3, r3, #1
 800287c:	4403      	add	r3, r0
 800287e:	3b1e      	subs	r3, #30
 8002880:	409a      	lsls	r2, r3
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	430a      	orrs	r2, r1
 8002888:	60da      	str	r2, [r3, #12]
 800288a:	e022      	b.n	80028d2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	6919      	ldr	r1, [r3, #16]
 8002892:	683b      	ldr	r3, [r7, #0]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	b29b      	uxth	r3, r3
 8002898:	461a      	mov	r2, r3
 800289a:	4613      	mov	r3, r2
 800289c:	005b      	lsls	r3, r3, #1
 800289e:	4413      	add	r3, r2
 80028a0:	2207      	movs	r2, #7
 80028a2:	fa02 f303 	lsl.w	r3, r2, r3
 80028a6:	43da      	mvns	r2, r3
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	400a      	ands	r2, r1
 80028ae:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	6919      	ldr	r1, [r3, #16]
 80028b6:	683b      	ldr	r3, [r7, #0]
 80028b8:	689a      	ldr	r2, [r3, #8]
 80028ba:	683b      	ldr	r3, [r7, #0]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	b29b      	uxth	r3, r3
 80028c0:	4618      	mov	r0, r3
 80028c2:	4603      	mov	r3, r0
 80028c4:	005b      	lsls	r3, r3, #1
 80028c6:	4403      	add	r3, r0
 80028c8:	409a      	lsls	r2, r3
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	430a      	orrs	r2, r1
 80028d0:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80028d2:	683b      	ldr	r3, [r7, #0]
 80028d4:	685b      	ldr	r3, [r3, #4]
 80028d6:	2b06      	cmp	r3, #6
 80028d8:	d824      	bhi.n	8002924 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80028e0:	683b      	ldr	r3, [r7, #0]
 80028e2:	685a      	ldr	r2, [r3, #4]
 80028e4:	4613      	mov	r3, r2
 80028e6:	009b      	lsls	r3, r3, #2
 80028e8:	4413      	add	r3, r2
 80028ea:	3b05      	subs	r3, #5
 80028ec:	221f      	movs	r2, #31
 80028ee:	fa02 f303 	lsl.w	r3, r2, r3
 80028f2:	43da      	mvns	r2, r3
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	400a      	ands	r2, r1
 80028fa:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002902:	683b      	ldr	r3, [r7, #0]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	b29b      	uxth	r3, r3
 8002908:	4618      	mov	r0, r3
 800290a:	683b      	ldr	r3, [r7, #0]
 800290c:	685a      	ldr	r2, [r3, #4]
 800290e:	4613      	mov	r3, r2
 8002910:	009b      	lsls	r3, r3, #2
 8002912:	4413      	add	r3, r2
 8002914:	3b05      	subs	r3, #5
 8002916:	fa00 f203 	lsl.w	r2, r0, r3
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	430a      	orrs	r2, r1
 8002920:	635a      	str	r2, [r3, #52]	; 0x34
 8002922:	e04c      	b.n	80029be <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002924:	683b      	ldr	r3, [r7, #0]
 8002926:	685b      	ldr	r3, [r3, #4]
 8002928:	2b0c      	cmp	r3, #12
 800292a:	d824      	bhi.n	8002976 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002932:	683b      	ldr	r3, [r7, #0]
 8002934:	685a      	ldr	r2, [r3, #4]
 8002936:	4613      	mov	r3, r2
 8002938:	009b      	lsls	r3, r3, #2
 800293a:	4413      	add	r3, r2
 800293c:	3b23      	subs	r3, #35	; 0x23
 800293e:	221f      	movs	r2, #31
 8002940:	fa02 f303 	lsl.w	r3, r2, r3
 8002944:	43da      	mvns	r2, r3
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	400a      	ands	r2, r1
 800294c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002954:	683b      	ldr	r3, [r7, #0]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	b29b      	uxth	r3, r3
 800295a:	4618      	mov	r0, r3
 800295c:	683b      	ldr	r3, [r7, #0]
 800295e:	685a      	ldr	r2, [r3, #4]
 8002960:	4613      	mov	r3, r2
 8002962:	009b      	lsls	r3, r3, #2
 8002964:	4413      	add	r3, r2
 8002966:	3b23      	subs	r3, #35	; 0x23
 8002968:	fa00 f203 	lsl.w	r2, r0, r3
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	430a      	orrs	r2, r1
 8002972:	631a      	str	r2, [r3, #48]	; 0x30
 8002974:	e023      	b.n	80029be <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800297c:	683b      	ldr	r3, [r7, #0]
 800297e:	685a      	ldr	r2, [r3, #4]
 8002980:	4613      	mov	r3, r2
 8002982:	009b      	lsls	r3, r3, #2
 8002984:	4413      	add	r3, r2
 8002986:	3b41      	subs	r3, #65	; 0x41
 8002988:	221f      	movs	r2, #31
 800298a:	fa02 f303 	lsl.w	r3, r2, r3
 800298e:	43da      	mvns	r2, r3
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	400a      	ands	r2, r1
 8002996:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800299e:	683b      	ldr	r3, [r7, #0]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	b29b      	uxth	r3, r3
 80029a4:	4618      	mov	r0, r3
 80029a6:	683b      	ldr	r3, [r7, #0]
 80029a8:	685a      	ldr	r2, [r3, #4]
 80029aa:	4613      	mov	r3, r2
 80029ac:	009b      	lsls	r3, r3, #2
 80029ae:	4413      	add	r3, r2
 80029b0:	3b41      	subs	r3, #65	; 0x41
 80029b2:	fa00 f203 	lsl.w	r2, r0, r3
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	430a      	orrs	r2, r1
 80029bc:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	4a20      	ldr	r2, [pc, #128]	; (8002a44 <HAL_ADC_ConfigChannel+0x230>)
 80029c4:	4293      	cmp	r3, r2
 80029c6:	d109      	bne.n	80029dc <HAL_ADC_ConfigChannel+0x1c8>
 80029c8:	683b      	ldr	r3, [r7, #0]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	2b12      	cmp	r3, #18
 80029ce:	d105      	bne.n	80029dc <HAL_ADC_ConfigChannel+0x1c8>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 80029d0:	4b1d      	ldr	r3, [pc, #116]	; (8002a48 <HAL_ADC_ConfigChannel+0x234>)
 80029d2:	685b      	ldr	r3, [r3, #4]
 80029d4:	4a1c      	ldr	r2, [pc, #112]	; (8002a48 <HAL_ADC_ConfigChannel+0x234>)
 80029d6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80029da:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	4a18      	ldr	r2, [pc, #96]	; (8002a44 <HAL_ADC_ConfigChannel+0x230>)
 80029e2:	4293      	cmp	r3, r2
 80029e4:	d123      	bne.n	8002a2e <HAL_ADC_ConfigChannel+0x21a>
 80029e6:	683b      	ldr	r3, [r7, #0]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	2b10      	cmp	r3, #16
 80029ec:	d003      	beq.n	80029f6 <HAL_ADC_ConfigChannel+0x1e2>
 80029ee:	683b      	ldr	r3, [r7, #0]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	2b11      	cmp	r3, #17
 80029f4:	d11b      	bne.n	8002a2e <HAL_ADC_ConfigChannel+0x21a>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 80029f6:	4b14      	ldr	r3, [pc, #80]	; (8002a48 <HAL_ADC_ConfigChannel+0x234>)
 80029f8:	685b      	ldr	r3, [r3, #4]
 80029fa:	4a13      	ldr	r2, [pc, #76]	; (8002a48 <HAL_ADC_ConfigChannel+0x234>)
 80029fc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002a00:	6053      	str	r3, [r2, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002a02:	683b      	ldr	r3, [r7, #0]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	2b10      	cmp	r3, #16
 8002a08:	d111      	bne.n	8002a2e <HAL_ADC_ConfigChannel+0x21a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002a0a:	4b10      	ldr	r3, [pc, #64]	; (8002a4c <HAL_ADC_ConfigChannel+0x238>)
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	4a10      	ldr	r2, [pc, #64]	; (8002a50 <HAL_ADC_ConfigChannel+0x23c>)
 8002a10:	fba2 2303 	umull	r2, r3, r2, r3
 8002a14:	0c9a      	lsrs	r2, r3, #18
 8002a16:	4613      	mov	r3, r2
 8002a18:	009b      	lsls	r3, r3, #2
 8002a1a:	4413      	add	r3, r2
 8002a1c:	005b      	lsls	r3, r3, #1
 8002a1e:	60fb      	str	r3, [r7, #12]
      while(counter != 0U)
 8002a20:	e002      	b.n	8002a28 <HAL_ADC_ConfigChannel+0x214>
      {
        counter--;
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	3b01      	subs	r3, #1
 8002a26:	60fb      	str	r3, [r7, #12]
      while(counter != 0U)
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d1f9      	bne.n	8002a22 <HAL_ADC_ConfigChannel+0x20e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	2200      	movs	r2, #0
 8002a32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002a36:	2300      	movs	r3, #0
}
 8002a38:	4618      	mov	r0, r3
 8002a3a:	3714      	adds	r7, #20
 8002a3c:	46bd      	mov	sp, r7
 8002a3e:	bc80      	pop	{r7}
 8002a40:	4770      	bx	lr
 8002a42:	bf00      	nop
 8002a44:	40012000 	.word	0x40012000
 8002a48:	40012300 	.word	0x40012300
 8002a4c:	20000004 	.word	0x20000004
 8002a50:	431bde83 	.word	0x431bde83

08002a54 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002a54:	b480      	push	{r7}
 8002a56:	b085      	sub	sp, #20
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8002a5c:	4b7e      	ldr	r3, [pc, #504]	; (8002c58 <ADC_Init+0x204>)
 8002a5e:	685b      	ldr	r3, [r3, #4]
 8002a60:	4a7d      	ldr	r2, [pc, #500]	; (8002c58 <ADC_Init+0x204>)
 8002a62:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8002a66:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8002a68:	4b7b      	ldr	r3, [pc, #492]	; (8002c58 <ADC_Init+0x204>)
 8002a6a:	685a      	ldr	r2, [r3, #4]
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	685b      	ldr	r3, [r3, #4]
 8002a70:	4979      	ldr	r1, [pc, #484]	; (8002c58 <ADC_Init+0x204>)
 8002a72:	4313      	orrs	r3, r2
 8002a74:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	685a      	ldr	r2, [r3, #4]
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002a84:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	6859      	ldr	r1, [r3, #4]
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	691b      	ldr	r3, [r3, #16]
 8002a90:	021a      	lsls	r2, r3, #8
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	430a      	orrs	r2, r1
 8002a98:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	685a      	ldr	r2, [r3, #4]
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002aa8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	6859      	ldr	r1, [r3, #4]
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	689a      	ldr	r2, [r3, #8]
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	430a      	orrs	r2, r1
 8002aba:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	689a      	ldr	r2, [r3, #8]
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002aca:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	6899      	ldr	r1, [r3, #8]
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	68da      	ldr	r2, [r3, #12]
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	430a      	orrs	r2, r1
 8002adc:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ae2:	4a5e      	ldr	r2, [pc, #376]	; (8002c5c <ADC_Init+0x208>)
 8002ae4:	4293      	cmp	r3, r2
 8002ae6:	d022      	beq.n	8002b2e <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	689a      	ldr	r2, [r3, #8]
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002af6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	6899      	ldr	r1, [r3, #8]
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	430a      	orrs	r2, r1
 8002b08:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	689a      	ldr	r2, [r3, #8]
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002b18:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	6899      	ldr	r1, [r3, #8]
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	430a      	orrs	r2, r1
 8002b2a:	609a      	str	r2, [r3, #8]
 8002b2c:	e00f      	b.n	8002b4e <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	689a      	ldr	r2, [r3, #8]
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002b3c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	689a      	ldr	r2, [r3, #8]
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002b4c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	689a      	ldr	r2, [r3, #8]
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f022 0202 	bic.w	r2, r2, #2
 8002b5c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	6899      	ldr	r1, [r3, #8]
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	7e1b      	ldrb	r3, [r3, #24]
 8002b68:	005a      	lsls	r2, r3, #1
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	430a      	orrs	r2, r1
 8002b70:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d027      	beq.n	8002bcc <ADC_Init+0x178>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	685a      	ldr	r2, [r3, #4]
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002b8a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	685a      	ldr	r2, [r3, #4]
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002b9a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ba0:	3b01      	subs	r3, #1
 8002ba2:	f44f 4260 	mov.w	r2, #57344	; 0xe000
 8002ba6:	60fa      	str	r2, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ba8:	68fa      	ldr	r2, [r7, #12]
 8002baa:	fa92 f2a2 	rbit	r2, r2
 8002bae:	60ba      	str	r2, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002bb0:	68ba      	ldr	r2, [r7, #8]
 8002bb2:	fab2 f282 	clz	r2, r2
 8002bb6:	b2d2      	uxtb	r2, r2
 8002bb8:	fa03 f102 	lsl.w	r1, r3, r2
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	685a      	ldr	r2, [r3, #4]
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	430a      	orrs	r2, r1
 8002bc8:	605a      	str	r2, [r3, #4]
 8002bca:	e007      	b.n	8002bdc <ADC_Init+0x188>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	685a      	ldr	r2, [r3, #4]
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002bda:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002bea:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	69db      	ldr	r3, [r3, #28]
 8002bf6:	3b01      	subs	r3, #1
 8002bf8:	051a      	lsls	r2, r3, #20
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	430a      	orrs	r2, r1
 8002c00:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	689a      	ldr	r2, [r3, #8]
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002c10:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	6899      	ldr	r1, [r3, #8]
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002c1e:	025a      	lsls	r2, r3, #9
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	430a      	orrs	r2, r1
 8002c26:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	689a      	ldr	r2, [r3, #8]
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002c36:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	6899      	ldr	r1, [r3, #8]
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	695b      	ldr	r3, [r3, #20]
 8002c42:	029a      	lsls	r2, r3, #10
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	430a      	orrs	r2, r1
 8002c4a:	609a      	str	r2, [r3, #8]
}
 8002c4c:	bf00      	nop
 8002c4e:	3714      	adds	r7, #20
 8002c50:	46bd      	mov	sp, r7
 8002c52:	bc80      	pop	{r7}
 8002c54:	4770      	bx	lr
 8002c56:	bf00      	nop
 8002c58:	40012300 	.word	0x40012300
 8002c5c:	0f000001 	.word	0x0f000001

08002c60 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c60:	b480      	push	{r7}
 8002c62:	b085      	sub	sp, #20
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	f003 0307 	and.w	r3, r3, #7
 8002c6e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002c70:	4b0c      	ldr	r3, [pc, #48]	; (8002ca4 <__NVIC_SetPriorityGrouping+0x44>)
 8002c72:	68db      	ldr	r3, [r3, #12]
 8002c74:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002c76:	68ba      	ldr	r2, [r7, #8]
 8002c78:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002c7c:	4013      	ands	r3, r2
 8002c7e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002c84:	68bb      	ldr	r3, [r7, #8]
 8002c86:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002c88:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002c8c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c90:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002c92:	4a04      	ldr	r2, [pc, #16]	; (8002ca4 <__NVIC_SetPriorityGrouping+0x44>)
 8002c94:	68bb      	ldr	r3, [r7, #8]
 8002c96:	60d3      	str	r3, [r2, #12]
}
 8002c98:	bf00      	nop
 8002c9a:	3714      	adds	r7, #20
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	bc80      	pop	{r7}
 8002ca0:	4770      	bx	lr
 8002ca2:	bf00      	nop
 8002ca4:	e000ed00 	.word	0xe000ed00

08002ca8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002ca8:	b480      	push	{r7}
 8002caa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002cac:	4b04      	ldr	r3, [pc, #16]	; (8002cc0 <__NVIC_GetPriorityGrouping+0x18>)
 8002cae:	68db      	ldr	r3, [r3, #12]
 8002cb0:	0a1b      	lsrs	r3, r3, #8
 8002cb2:	f003 0307 	and.w	r3, r3, #7
}
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	bc80      	pop	{r7}
 8002cbc:	4770      	bx	lr
 8002cbe:	bf00      	nop
 8002cc0:	e000ed00 	.word	0xe000ed00

08002cc4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002cc4:	b480      	push	{r7}
 8002cc6:	b083      	sub	sp, #12
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	4603      	mov	r3, r0
 8002ccc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002cce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	db0b      	blt.n	8002cee <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002cd6:	79fb      	ldrb	r3, [r7, #7]
 8002cd8:	f003 021f 	and.w	r2, r3, #31
 8002cdc:	4906      	ldr	r1, [pc, #24]	; (8002cf8 <__NVIC_EnableIRQ+0x34>)
 8002cde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ce2:	095b      	lsrs	r3, r3, #5
 8002ce4:	2001      	movs	r0, #1
 8002ce6:	fa00 f202 	lsl.w	r2, r0, r2
 8002cea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002cee:	bf00      	nop
 8002cf0:	370c      	adds	r7, #12
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	bc80      	pop	{r7}
 8002cf6:	4770      	bx	lr
 8002cf8:	e000e100 	.word	0xe000e100

08002cfc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002cfc:	b480      	push	{r7}
 8002cfe:	b083      	sub	sp, #12
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	4603      	mov	r3, r0
 8002d04:	6039      	str	r1, [r7, #0]
 8002d06:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	db0a      	blt.n	8002d26 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d10:	683b      	ldr	r3, [r7, #0]
 8002d12:	b2da      	uxtb	r2, r3
 8002d14:	490c      	ldr	r1, [pc, #48]	; (8002d48 <__NVIC_SetPriority+0x4c>)
 8002d16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d1a:	0112      	lsls	r2, r2, #4
 8002d1c:	b2d2      	uxtb	r2, r2
 8002d1e:	440b      	add	r3, r1
 8002d20:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002d24:	e00a      	b.n	8002d3c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d26:	683b      	ldr	r3, [r7, #0]
 8002d28:	b2da      	uxtb	r2, r3
 8002d2a:	4908      	ldr	r1, [pc, #32]	; (8002d4c <__NVIC_SetPriority+0x50>)
 8002d2c:	79fb      	ldrb	r3, [r7, #7]
 8002d2e:	f003 030f 	and.w	r3, r3, #15
 8002d32:	3b04      	subs	r3, #4
 8002d34:	0112      	lsls	r2, r2, #4
 8002d36:	b2d2      	uxtb	r2, r2
 8002d38:	440b      	add	r3, r1
 8002d3a:	761a      	strb	r2, [r3, #24]
}
 8002d3c:	bf00      	nop
 8002d3e:	370c      	adds	r7, #12
 8002d40:	46bd      	mov	sp, r7
 8002d42:	bc80      	pop	{r7}
 8002d44:	4770      	bx	lr
 8002d46:	bf00      	nop
 8002d48:	e000e100 	.word	0xe000e100
 8002d4c:	e000ed00 	.word	0xe000ed00

08002d50 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002d50:	b480      	push	{r7}
 8002d52:	b089      	sub	sp, #36	; 0x24
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	60f8      	str	r0, [r7, #12]
 8002d58:	60b9      	str	r1, [r7, #8]
 8002d5a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	f003 0307 	and.w	r3, r3, #7
 8002d62:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002d64:	69fb      	ldr	r3, [r7, #28]
 8002d66:	f1c3 0307 	rsb	r3, r3, #7
 8002d6a:	2b04      	cmp	r3, #4
 8002d6c:	bf28      	it	cs
 8002d6e:	2304      	movcs	r3, #4
 8002d70:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002d72:	69fb      	ldr	r3, [r7, #28]
 8002d74:	3304      	adds	r3, #4
 8002d76:	2b06      	cmp	r3, #6
 8002d78:	d902      	bls.n	8002d80 <NVIC_EncodePriority+0x30>
 8002d7a:	69fb      	ldr	r3, [r7, #28]
 8002d7c:	3b03      	subs	r3, #3
 8002d7e:	e000      	b.n	8002d82 <NVIC_EncodePriority+0x32>
 8002d80:	2300      	movs	r3, #0
 8002d82:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d84:	f04f 32ff 	mov.w	r2, #4294967295
 8002d88:	69bb      	ldr	r3, [r7, #24]
 8002d8a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d8e:	43da      	mvns	r2, r3
 8002d90:	68bb      	ldr	r3, [r7, #8]
 8002d92:	401a      	ands	r2, r3
 8002d94:	697b      	ldr	r3, [r7, #20]
 8002d96:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002d98:	f04f 31ff 	mov.w	r1, #4294967295
 8002d9c:	697b      	ldr	r3, [r7, #20]
 8002d9e:	fa01 f303 	lsl.w	r3, r1, r3
 8002da2:	43d9      	mvns	r1, r3
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002da8:	4313      	orrs	r3, r2
         );
}
 8002daa:	4618      	mov	r0, r3
 8002dac:	3724      	adds	r7, #36	; 0x24
 8002dae:	46bd      	mov	sp, r7
 8002db0:	bc80      	pop	{r7}
 8002db2:	4770      	bx	lr

08002db4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002db4:	b580      	push	{r7, lr}
 8002db6:	b082      	sub	sp, #8
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	3b01      	subs	r3, #1
 8002dc0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002dc4:	d301      	bcc.n	8002dca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002dc6:	2301      	movs	r3, #1
 8002dc8:	e00f      	b.n	8002dea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002dca:	4a0a      	ldr	r2, [pc, #40]	; (8002df4 <SysTick_Config+0x40>)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	3b01      	subs	r3, #1
 8002dd0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002dd2:	210f      	movs	r1, #15
 8002dd4:	f04f 30ff 	mov.w	r0, #4294967295
 8002dd8:	f7ff ff90 	bl	8002cfc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002ddc:	4b05      	ldr	r3, [pc, #20]	; (8002df4 <SysTick_Config+0x40>)
 8002dde:	2200      	movs	r2, #0
 8002de0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002de2:	4b04      	ldr	r3, [pc, #16]	; (8002df4 <SysTick_Config+0x40>)
 8002de4:	2207      	movs	r2, #7
 8002de6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002de8:	2300      	movs	r3, #0
}
 8002dea:	4618      	mov	r0, r3
 8002dec:	3708      	adds	r7, #8
 8002dee:	46bd      	mov	sp, r7
 8002df0:	bd80      	pop	{r7, pc}
 8002df2:	bf00      	nop
 8002df4:	e000e010 	.word	0xe000e010

08002df8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	b082      	sub	sp, #8
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002e00:	6878      	ldr	r0, [r7, #4]
 8002e02:	f7ff ff2d 	bl	8002c60 <__NVIC_SetPriorityGrouping>
}
 8002e06:	bf00      	nop
 8002e08:	3708      	adds	r7, #8
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	bd80      	pop	{r7, pc}

08002e0e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002e0e:	b580      	push	{r7, lr}
 8002e10:	b086      	sub	sp, #24
 8002e12:	af00      	add	r7, sp, #0
 8002e14:	4603      	mov	r3, r0
 8002e16:	60b9      	str	r1, [r7, #8]
 8002e18:	607a      	str	r2, [r7, #4]
 8002e1a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002e1c:	2300      	movs	r3, #0
 8002e1e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002e20:	f7ff ff42 	bl	8002ca8 <__NVIC_GetPriorityGrouping>
 8002e24:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002e26:	687a      	ldr	r2, [r7, #4]
 8002e28:	68b9      	ldr	r1, [r7, #8]
 8002e2a:	6978      	ldr	r0, [r7, #20]
 8002e2c:	f7ff ff90 	bl	8002d50 <NVIC_EncodePriority>
 8002e30:	4602      	mov	r2, r0
 8002e32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002e36:	4611      	mov	r1, r2
 8002e38:	4618      	mov	r0, r3
 8002e3a:	f7ff ff5f 	bl	8002cfc <__NVIC_SetPriority>
}
 8002e3e:	bf00      	nop
 8002e40:	3718      	adds	r7, #24
 8002e42:	46bd      	mov	sp, r7
 8002e44:	bd80      	pop	{r7, pc}

08002e46 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f2xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e46:	b580      	push	{r7, lr}
 8002e48:	b082      	sub	sp, #8
 8002e4a:	af00      	add	r7, sp, #0
 8002e4c:	4603      	mov	r3, r0
 8002e4e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002e50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e54:	4618      	mov	r0, r3
 8002e56:	f7ff ff35 	bl	8002cc4 <__NVIC_EnableIRQ>
}
 8002e5a:	bf00      	nop
 8002e5c:	3708      	adds	r7, #8
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	bd80      	pop	{r7, pc}

08002e62 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002e62:	b580      	push	{r7, lr}
 8002e64:	b082      	sub	sp, #8
 8002e66:	af00      	add	r7, sp, #0
 8002e68:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002e6a:	6878      	ldr	r0, [r7, #4]
 8002e6c:	f7ff ffa2 	bl	8002db4 <SysTick_Config>
 8002e70:	4603      	mov	r3, r0
}
 8002e72:	4618      	mov	r0, r3
 8002e74:	3708      	adds	r7, #8
 8002e76:	46bd      	mov	sp, r7
 8002e78:	bd80      	pop	{r7, pc}
	...

08002e7c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002e7c:	b480      	push	{r7}
 8002e7e:	b087      	sub	sp, #28
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]
 8002e84:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002e86:	2300      	movs	r3, #0
 8002e88:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002e8a:	e16f      	b.n	800316c <HAL_GPIO_Init+0x2f0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002e8c:	683b      	ldr	r3, [r7, #0]
 8002e8e:	681a      	ldr	r2, [r3, #0]
 8002e90:	2101      	movs	r1, #1
 8002e92:	697b      	ldr	r3, [r7, #20]
 8002e94:	fa01 f303 	lsl.w	r3, r1, r3
 8002e98:	4013      	ands	r3, r2
 8002e9a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	f000 8161 	beq.w	8003166 <HAL_GPIO_Init+0x2ea>
    {
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002ea4:	683b      	ldr	r3, [r7, #0]
 8002ea6:	685b      	ldr	r3, [r3, #4]
 8002ea8:	f003 0303 	and.w	r3, r3, #3
 8002eac:	2b01      	cmp	r3, #1
 8002eae:	d005      	beq.n	8002ebc <HAL_GPIO_Init+0x40>
 8002eb0:	683b      	ldr	r3, [r7, #0]
 8002eb2:	685b      	ldr	r3, [r3, #4]
 8002eb4:	f003 0303 	and.w	r3, r3, #3
 8002eb8:	2b02      	cmp	r3, #2
 8002eba:	d130      	bne.n	8002f1e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	689b      	ldr	r3, [r3, #8]
 8002ec0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002ec2:	697b      	ldr	r3, [r7, #20]
 8002ec4:	005b      	lsls	r3, r3, #1
 8002ec6:	2203      	movs	r2, #3
 8002ec8:	fa02 f303 	lsl.w	r3, r2, r3
 8002ecc:	43db      	mvns	r3, r3
 8002ece:	693a      	ldr	r2, [r7, #16]
 8002ed0:	4013      	ands	r3, r2
 8002ed2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002ed4:	683b      	ldr	r3, [r7, #0]
 8002ed6:	68da      	ldr	r2, [r3, #12]
 8002ed8:	697b      	ldr	r3, [r7, #20]
 8002eda:	005b      	lsls	r3, r3, #1
 8002edc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ee0:	693a      	ldr	r2, [r7, #16]
 8002ee2:	4313      	orrs	r3, r2
 8002ee4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	693a      	ldr	r2, [r7, #16]
 8002eea:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	685b      	ldr	r3, [r3, #4]
 8002ef0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002ef2:	2201      	movs	r2, #1
 8002ef4:	697b      	ldr	r3, [r7, #20]
 8002ef6:	fa02 f303 	lsl.w	r3, r2, r3
 8002efa:	43db      	mvns	r3, r3
 8002efc:	693a      	ldr	r2, [r7, #16]
 8002efe:	4013      	ands	r3, r2
 8002f00:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002f02:	683b      	ldr	r3, [r7, #0]
 8002f04:	685b      	ldr	r3, [r3, #4]
 8002f06:	091b      	lsrs	r3, r3, #4
 8002f08:	f003 0201 	and.w	r2, r3, #1
 8002f0c:	697b      	ldr	r3, [r7, #20]
 8002f0e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f12:	693a      	ldr	r2, [r7, #16]
 8002f14:	4313      	orrs	r3, r2
 8002f16:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	693a      	ldr	r2, [r7, #16]
 8002f1c:	605a      	str	r2, [r3, #4]
      }
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002f1e:	683b      	ldr	r3, [r7, #0]
 8002f20:	685b      	ldr	r3, [r3, #4]
 8002f22:	f003 0303 	and.w	r3, r3, #3
 8002f26:	2b03      	cmp	r3, #3
 8002f28:	d017      	beq.n	8002f5a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	68db      	ldr	r3, [r3, #12]
 8002f2e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002f30:	697b      	ldr	r3, [r7, #20]
 8002f32:	005b      	lsls	r3, r3, #1
 8002f34:	2203      	movs	r2, #3
 8002f36:	fa02 f303 	lsl.w	r3, r2, r3
 8002f3a:	43db      	mvns	r3, r3
 8002f3c:	693a      	ldr	r2, [r7, #16]
 8002f3e:	4013      	ands	r3, r2
 8002f40:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002f42:	683b      	ldr	r3, [r7, #0]
 8002f44:	689a      	ldr	r2, [r3, #8]
 8002f46:	697b      	ldr	r3, [r7, #20]
 8002f48:	005b      	lsls	r3, r3, #1
 8002f4a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f4e:	693a      	ldr	r2, [r7, #16]
 8002f50:	4313      	orrs	r3, r2
 8002f52:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	693a      	ldr	r2, [r7, #16]
 8002f58:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002f5a:	683b      	ldr	r3, [r7, #0]
 8002f5c:	685b      	ldr	r3, [r3, #4]
 8002f5e:	f003 0303 	and.w	r3, r3, #3
 8002f62:	2b02      	cmp	r3, #2
 8002f64:	d123      	bne.n	8002fae <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002f66:	697b      	ldr	r3, [r7, #20]
 8002f68:	08da      	lsrs	r2, r3, #3
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	3208      	adds	r2, #8
 8002f6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002f72:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002f74:	697b      	ldr	r3, [r7, #20]
 8002f76:	f003 0307 	and.w	r3, r3, #7
 8002f7a:	009b      	lsls	r3, r3, #2
 8002f7c:	220f      	movs	r2, #15
 8002f7e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f82:	43db      	mvns	r3, r3
 8002f84:	693a      	ldr	r2, [r7, #16]
 8002f86:	4013      	ands	r3, r2
 8002f88:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002f8a:	683b      	ldr	r3, [r7, #0]
 8002f8c:	691a      	ldr	r2, [r3, #16]
 8002f8e:	697b      	ldr	r3, [r7, #20]
 8002f90:	f003 0307 	and.w	r3, r3, #7
 8002f94:	009b      	lsls	r3, r3, #2
 8002f96:	fa02 f303 	lsl.w	r3, r2, r3
 8002f9a:	693a      	ldr	r2, [r7, #16]
 8002f9c:	4313      	orrs	r3, r2
 8002f9e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002fa0:	697b      	ldr	r3, [r7, #20]
 8002fa2:	08da      	lsrs	r2, r3, #3
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	3208      	adds	r2, #8
 8002fa8:	6939      	ldr	r1, [r7, #16]
 8002faa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002fb4:	697b      	ldr	r3, [r7, #20]
 8002fb6:	005b      	lsls	r3, r3, #1
 8002fb8:	2203      	movs	r2, #3
 8002fba:	fa02 f303 	lsl.w	r3, r2, r3
 8002fbe:	43db      	mvns	r3, r3
 8002fc0:	693a      	ldr	r2, [r7, #16]
 8002fc2:	4013      	ands	r3, r2
 8002fc4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002fc6:	683b      	ldr	r3, [r7, #0]
 8002fc8:	685b      	ldr	r3, [r3, #4]
 8002fca:	f003 0203 	and.w	r2, r3, #3
 8002fce:	697b      	ldr	r3, [r7, #20]
 8002fd0:	005b      	lsls	r3, r3, #1
 8002fd2:	fa02 f303 	lsl.w	r3, r2, r3
 8002fd6:	693a      	ldr	r2, [r7, #16]
 8002fd8:	4313      	orrs	r3, r2
 8002fda:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	693a      	ldr	r2, [r7, #16]
 8002fe0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002fe2:	683b      	ldr	r3, [r7, #0]
 8002fe4:	685b      	ldr	r3, [r3, #4]
 8002fe6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	f000 80bb 	beq.w	8003166 <HAL_GPIO_Init+0x2ea>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ff0:	2300      	movs	r3, #0
 8002ff2:	60bb      	str	r3, [r7, #8]
 8002ff4:	4b64      	ldr	r3, [pc, #400]	; (8003188 <HAL_GPIO_Init+0x30c>)
 8002ff6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ff8:	4a63      	ldr	r2, [pc, #396]	; (8003188 <HAL_GPIO_Init+0x30c>)
 8002ffa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002ffe:	6453      	str	r3, [r2, #68]	; 0x44
 8003000:	4b61      	ldr	r3, [pc, #388]	; (8003188 <HAL_GPIO_Init+0x30c>)
 8003002:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003004:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003008:	60bb      	str	r3, [r7, #8]
 800300a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800300c:	4a5f      	ldr	r2, [pc, #380]	; (800318c <HAL_GPIO_Init+0x310>)
 800300e:	697b      	ldr	r3, [r7, #20]
 8003010:	089b      	lsrs	r3, r3, #2
 8003012:	3302      	adds	r3, #2
 8003014:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003018:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800301a:	697b      	ldr	r3, [r7, #20]
 800301c:	f003 0303 	and.w	r3, r3, #3
 8003020:	009b      	lsls	r3, r3, #2
 8003022:	220f      	movs	r2, #15
 8003024:	fa02 f303 	lsl.w	r3, r2, r3
 8003028:	43db      	mvns	r3, r3
 800302a:	693a      	ldr	r2, [r7, #16]
 800302c:	4013      	ands	r3, r2
 800302e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	4a57      	ldr	r2, [pc, #348]	; (8003190 <HAL_GPIO_Init+0x314>)
 8003034:	4293      	cmp	r3, r2
 8003036:	d031      	beq.n	800309c <HAL_GPIO_Init+0x220>
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	4a56      	ldr	r2, [pc, #344]	; (8003194 <HAL_GPIO_Init+0x318>)
 800303c:	4293      	cmp	r3, r2
 800303e:	d02b      	beq.n	8003098 <HAL_GPIO_Init+0x21c>
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	4a55      	ldr	r2, [pc, #340]	; (8003198 <HAL_GPIO_Init+0x31c>)
 8003044:	4293      	cmp	r3, r2
 8003046:	d025      	beq.n	8003094 <HAL_GPIO_Init+0x218>
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	4a54      	ldr	r2, [pc, #336]	; (800319c <HAL_GPIO_Init+0x320>)
 800304c:	4293      	cmp	r3, r2
 800304e:	d01f      	beq.n	8003090 <HAL_GPIO_Init+0x214>
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	4a53      	ldr	r2, [pc, #332]	; (80031a0 <HAL_GPIO_Init+0x324>)
 8003054:	4293      	cmp	r3, r2
 8003056:	d019      	beq.n	800308c <HAL_GPIO_Init+0x210>
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	4a52      	ldr	r2, [pc, #328]	; (80031a4 <HAL_GPIO_Init+0x328>)
 800305c:	4293      	cmp	r3, r2
 800305e:	d013      	beq.n	8003088 <HAL_GPIO_Init+0x20c>
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	4a51      	ldr	r2, [pc, #324]	; (80031a8 <HAL_GPIO_Init+0x32c>)
 8003064:	4293      	cmp	r3, r2
 8003066:	d00d      	beq.n	8003084 <HAL_GPIO_Init+0x208>
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	4a50      	ldr	r2, [pc, #320]	; (80031ac <HAL_GPIO_Init+0x330>)
 800306c:	4293      	cmp	r3, r2
 800306e:	d007      	beq.n	8003080 <HAL_GPIO_Init+0x204>
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	4a4f      	ldr	r2, [pc, #316]	; (80031b0 <HAL_GPIO_Init+0x334>)
 8003074:	4293      	cmp	r3, r2
 8003076:	d101      	bne.n	800307c <HAL_GPIO_Init+0x200>
 8003078:	2308      	movs	r3, #8
 800307a:	e010      	b.n	800309e <HAL_GPIO_Init+0x222>
 800307c:	2309      	movs	r3, #9
 800307e:	e00e      	b.n	800309e <HAL_GPIO_Init+0x222>
 8003080:	2307      	movs	r3, #7
 8003082:	e00c      	b.n	800309e <HAL_GPIO_Init+0x222>
 8003084:	2306      	movs	r3, #6
 8003086:	e00a      	b.n	800309e <HAL_GPIO_Init+0x222>
 8003088:	2305      	movs	r3, #5
 800308a:	e008      	b.n	800309e <HAL_GPIO_Init+0x222>
 800308c:	2304      	movs	r3, #4
 800308e:	e006      	b.n	800309e <HAL_GPIO_Init+0x222>
 8003090:	2303      	movs	r3, #3
 8003092:	e004      	b.n	800309e <HAL_GPIO_Init+0x222>
 8003094:	2302      	movs	r3, #2
 8003096:	e002      	b.n	800309e <HAL_GPIO_Init+0x222>
 8003098:	2301      	movs	r3, #1
 800309a:	e000      	b.n	800309e <HAL_GPIO_Init+0x222>
 800309c:	2300      	movs	r3, #0
 800309e:	697a      	ldr	r2, [r7, #20]
 80030a0:	f002 0203 	and.w	r2, r2, #3
 80030a4:	0092      	lsls	r2, r2, #2
 80030a6:	4093      	lsls	r3, r2
 80030a8:	461a      	mov	r2, r3
 80030aa:	693b      	ldr	r3, [r7, #16]
 80030ac:	4313      	orrs	r3, r2
 80030ae:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80030b0:	4936      	ldr	r1, [pc, #216]	; (800318c <HAL_GPIO_Init+0x310>)
 80030b2:	697b      	ldr	r3, [r7, #20]
 80030b4:	089b      	lsrs	r3, r3, #2
 80030b6:	3302      	adds	r3, #2
 80030b8:	693a      	ldr	r2, [r7, #16]
 80030ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80030be:	4b3d      	ldr	r3, [pc, #244]	; (80031b4 <HAL_GPIO_Init+0x338>)
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	43db      	mvns	r3, r3
 80030c8:	693a      	ldr	r2, [r7, #16]
 80030ca:	4013      	ands	r3, r2
 80030cc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80030ce:	683b      	ldr	r3, [r7, #0]
 80030d0:	685b      	ldr	r3, [r3, #4]
 80030d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d003      	beq.n	80030e2 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80030da:	693a      	ldr	r2, [r7, #16]
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	4313      	orrs	r3, r2
 80030e0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80030e2:	4a34      	ldr	r2, [pc, #208]	; (80031b4 <HAL_GPIO_Init+0x338>)
 80030e4:	693b      	ldr	r3, [r7, #16]
 80030e6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80030e8:	4b32      	ldr	r3, [pc, #200]	; (80031b4 <HAL_GPIO_Init+0x338>)
 80030ea:	685b      	ldr	r3, [r3, #4]
 80030ec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	43db      	mvns	r3, r3
 80030f2:	693a      	ldr	r2, [r7, #16]
 80030f4:	4013      	ands	r3, r2
 80030f6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80030f8:	683b      	ldr	r3, [r7, #0]
 80030fa:	685b      	ldr	r3, [r3, #4]
 80030fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003100:	2b00      	cmp	r3, #0
 8003102:	d003      	beq.n	800310c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8003104:	693a      	ldr	r2, [r7, #16]
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	4313      	orrs	r3, r2
 800310a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800310c:	4a29      	ldr	r2, [pc, #164]	; (80031b4 <HAL_GPIO_Init+0x338>)
 800310e:	693b      	ldr	r3, [r7, #16]
 8003110:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003112:	4b28      	ldr	r3, [pc, #160]	; (80031b4 <HAL_GPIO_Init+0x338>)
 8003114:	689b      	ldr	r3, [r3, #8]
 8003116:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	43db      	mvns	r3, r3
 800311c:	693a      	ldr	r2, [r7, #16]
 800311e:	4013      	ands	r3, r2
 8003120:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003122:	683b      	ldr	r3, [r7, #0]
 8003124:	685b      	ldr	r3, [r3, #4]
 8003126:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800312a:	2b00      	cmp	r3, #0
 800312c:	d003      	beq.n	8003136 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800312e:	693a      	ldr	r2, [r7, #16]
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	4313      	orrs	r3, r2
 8003134:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8003136:	4a1f      	ldr	r2, [pc, #124]	; (80031b4 <HAL_GPIO_Init+0x338>)
 8003138:	693b      	ldr	r3, [r7, #16]
 800313a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800313c:	4b1d      	ldr	r3, [pc, #116]	; (80031b4 <HAL_GPIO_Init+0x338>)
 800313e:	68db      	ldr	r3, [r3, #12]
 8003140:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	43db      	mvns	r3, r3
 8003146:	693a      	ldr	r2, [r7, #16]
 8003148:	4013      	ands	r3, r2
 800314a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800314c:	683b      	ldr	r3, [r7, #0]
 800314e:	685b      	ldr	r3, [r3, #4]
 8003150:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003154:	2b00      	cmp	r3, #0
 8003156:	d003      	beq.n	8003160 <HAL_GPIO_Init+0x2e4>
        {
          temp |= iocurrent;
 8003158:	693a      	ldr	r2, [r7, #16]
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	4313      	orrs	r3, r2
 800315e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8003160:	4a14      	ldr	r2, [pc, #80]	; (80031b4 <HAL_GPIO_Init+0x338>)
 8003162:	693b      	ldr	r3, [r7, #16]
 8003164:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8003166:	697b      	ldr	r3, [r7, #20]
 8003168:	3301      	adds	r3, #1
 800316a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800316c:	683b      	ldr	r3, [r7, #0]
 800316e:	681a      	ldr	r2, [r3, #0]
 8003170:	697b      	ldr	r3, [r7, #20]
 8003172:	fa22 f303 	lsr.w	r3, r2, r3
 8003176:	2b00      	cmp	r3, #0
 8003178:	f47f ae88 	bne.w	8002e8c <HAL_GPIO_Init+0x10>
  }
}
 800317c:	bf00      	nop
 800317e:	bf00      	nop
 8003180:	371c      	adds	r7, #28
 8003182:	46bd      	mov	sp, r7
 8003184:	bc80      	pop	{r7}
 8003186:	4770      	bx	lr
 8003188:	40023800 	.word	0x40023800
 800318c:	40013800 	.word	0x40013800
 8003190:	40020000 	.word	0x40020000
 8003194:	40020400 	.word	0x40020400
 8003198:	40020800 	.word	0x40020800
 800319c:	40020c00 	.word	0x40020c00
 80031a0:	40021000 	.word	0x40021000
 80031a4:	40021400 	.word	0x40021400
 80031a8:	40021800 	.word	0x40021800
 80031ac:	40021c00 	.word	0x40021c00
 80031b0:	40022000 	.word	0x40022000
 80031b4:	40013c00 	.word	0x40013c00

080031b8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80031b8:	b480      	push	{r7}
 80031ba:	b083      	sub	sp, #12
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]
 80031c0:	460b      	mov	r3, r1
 80031c2:	807b      	strh	r3, [r7, #2]
 80031c4:	4613      	mov	r3, r2
 80031c6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80031c8:	787b      	ldrb	r3, [r7, #1]
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d003      	beq.n	80031d6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80031ce:	887a      	ldrh	r2, [r7, #2]
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80031d4:	e003      	b.n	80031de <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80031d6:	887b      	ldrh	r3, [r7, #2]
 80031d8:	041a      	lsls	r2, r3, #16
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	619a      	str	r2, [r3, #24]
}
 80031de:	bf00      	nop
 80031e0:	370c      	adds	r7, #12
 80031e2:	46bd      	mov	sp, r7
 80031e4:	bc80      	pop	{r7}
 80031e6:	4770      	bx	lr

080031e8 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..I) to select the GPIO peripheral. 
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80031e8:	b480      	push	{r7}
 80031ea:	b085      	sub	sp, #20
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	6078      	str	r0, [r7, #4]
 80031f0:	460b      	mov	r3, r1
 80031f2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	695b      	ldr	r3, [r3, #20]
 80031f8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80031fa:	887a      	ldrh	r2, [r7, #2]
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	4013      	ands	r3, r2
 8003200:	041a      	lsls	r2, r3, #16
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	43d9      	mvns	r1, r3
 8003206:	887b      	ldrh	r3, [r7, #2]
 8003208:	400b      	ands	r3, r1
 800320a:	431a      	orrs	r2, r3
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	619a      	str	r2, [r3, #24]
}
 8003210:	bf00      	nop
 8003212:	3714      	adds	r7, #20
 8003214:	46bd      	mov	sp, r7
 8003216:	bc80      	pop	{r7}
 8003218:	4770      	bx	lr
	...

0800321c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800321c:	b580      	push	{r7, lr}
 800321e:	b082      	sub	sp, #8
 8003220:	af00      	add	r7, sp, #0
 8003222:	4603      	mov	r3, r0
 8003224:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003226:	4b08      	ldr	r3, [pc, #32]	; (8003248 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003228:	695a      	ldr	r2, [r3, #20]
 800322a:	88fb      	ldrh	r3, [r7, #6]
 800322c:	4013      	ands	r3, r2
 800322e:	2b00      	cmp	r3, #0
 8003230:	d006      	beq.n	8003240 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003232:	4a05      	ldr	r2, [pc, #20]	; (8003248 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003234:	88fb      	ldrh	r3, [r7, #6]
 8003236:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003238:	88fb      	ldrh	r3, [r7, #6]
 800323a:	4618      	mov	r0, r3
 800323c:	f7fe fd0c 	bl	8001c58 <HAL_GPIO_EXTI_Callback>
  }
}
 8003240:	bf00      	nop
 8003242:	3708      	adds	r7, #8
 8003244:	46bd      	mov	sp, r7
 8003246:	bd80      	pop	{r7, pc}
 8003248:	40013c00 	.word	0x40013c00

0800324c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800324c:	b580      	push	{r7, lr}
 800324e:	b084      	sub	sp, #16
 8003250:	af00      	add	r7, sp, #0
 8003252:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	2b00      	cmp	r3, #0
 8003258:	d101      	bne.n	800325e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800325a:	2301      	movs	r3, #1
 800325c:	e12b      	b.n	80034b6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003264:	b2db      	uxtb	r3, r3
 8003266:	2b00      	cmp	r3, #0
 8003268:	d106      	bne.n	8003278 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	2200      	movs	r2, #0
 800326e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003272:	6878      	ldr	r0, [r7, #4]
 8003274:	f7fe fff0 	bl	8002258 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	2224      	movs	r2, #36	; 0x24
 800327c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	681a      	ldr	r2, [r3, #0]
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f022 0201 	bic.w	r2, r2, #1
 800328e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	681a      	ldr	r2, [r3, #0]
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800329e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	681a      	ldr	r2, [r3, #0]
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80032ae:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80032b0:	f002 fce8 	bl	8005c84 <HAL_RCC_GetPCLK1Freq>
 80032b4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	685b      	ldr	r3, [r3, #4]
 80032ba:	4a81      	ldr	r2, [pc, #516]	; (80034c0 <HAL_I2C_Init+0x274>)
 80032bc:	4293      	cmp	r3, r2
 80032be:	d807      	bhi.n	80032d0 <HAL_I2C_Init+0x84>
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	4a80      	ldr	r2, [pc, #512]	; (80034c4 <HAL_I2C_Init+0x278>)
 80032c4:	4293      	cmp	r3, r2
 80032c6:	bf94      	ite	ls
 80032c8:	2301      	movls	r3, #1
 80032ca:	2300      	movhi	r3, #0
 80032cc:	b2db      	uxtb	r3, r3
 80032ce:	e006      	b.n	80032de <HAL_I2C_Init+0x92>
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	4a7d      	ldr	r2, [pc, #500]	; (80034c8 <HAL_I2C_Init+0x27c>)
 80032d4:	4293      	cmp	r3, r2
 80032d6:	bf94      	ite	ls
 80032d8:	2301      	movls	r3, #1
 80032da:	2300      	movhi	r3, #0
 80032dc:	b2db      	uxtb	r3, r3
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d001      	beq.n	80032e6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80032e2:	2301      	movs	r3, #1
 80032e4:	e0e7      	b.n	80034b6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	4a78      	ldr	r2, [pc, #480]	; (80034cc <HAL_I2C_Init+0x280>)
 80032ea:	fba2 2303 	umull	r2, r3, r2, r3
 80032ee:	0c9b      	lsrs	r3, r3, #18
 80032f0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	685b      	ldr	r3, [r3, #4]
 80032f8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	68ba      	ldr	r2, [r7, #8]
 8003302:	430a      	orrs	r2, r1
 8003304:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	6a1b      	ldr	r3, [r3, #32]
 800330c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	685b      	ldr	r3, [r3, #4]
 8003314:	4a6a      	ldr	r2, [pc, #424]	; (80034c0 <HAL_I2C_Init+0x274>)
 8003316:	4293      	cmp	r3, r2
 8003318:	d802      	bhi.n	8003320 <HAL_I2C_Init+0xd4>
 800331a:	68bb      	ldr	r3, [r7, #8]
 800331c:	3301      	adds	r3, #1
 800331e:	e009      	b.n	8003334 <HAL_I2C_Init+0xe8>
 8003320:	68bb      	ldr	r3, [r7, #8]
 8003322:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003326:	fb02 f303 	mul.w	r3, r2, r3
 800332a:	4a69      	ldr	r2, [pc, #420]	; (80034d0 <HAL_I2C_Init+0x284>)
 800332c:	fba2 2303 	umull	r2, r3, r2, r3
 8003330:	099b      	lsrs	r3, r3, #6
 8003332:	3301      	adds	r3, #1
 8003334:	687a      	ldr	r2, [r7, #4]
 8003336:	6812      	ldr	r2, [r2, #0]
 8003338:	430b      	orrs	r3, r1
 800333a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	69db      	ldr	r3, [r3, #28]
 8003342:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003346:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	685b      	ldr	r3, [r3, #4]
 800334e:	495c      	ldr	r1, [pc, #368]	; (80034c0 <HAL_I2C_Init+0x274>)
 8003350:	428b      	cmp	r3, r1
 8003352:	d819      	bhi.n	8003388 <HAL_I2C_Init+0x13c>
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	1e59      	subs	r1, r3, #1
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	685b      	ldr	r3, [r3, #4]
 800335c:	005b      	lsls	r3, r3, #1
 800335e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003362:	1c59      	adds	r1, r3, #1
 8003364:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003368:	400b      	ands	r3, r1
 800336a:	2b00      	cmp	r3, #0
 800336c:	d00a      	beq.n	8003384 <HAL_I2C_Init+0x138>
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	1e59      	subs	r1, r3, #1
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	685b      	ldr	r3, [r3, #4]
 8003376:	005b      	lsls	r3, r3, #1
 8003378:	fbb1 f3f3 	udiv	r3, r1, r3
 800337c:	3301      	adds	r3, #1
 800337e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003382:	e051      	b.n	8003428 <HAL_I2C_Init+0x1dc>
 8003384:	2304      	movs	r3, #4
 8003386:	e04f      	b.n	8003428 <HAL_I2C_Init+0x1dc>
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	689b      	ldr	r3, [r3, #8]
 800338c:	2b00      	cmp	r3, #0
 800338e:	d111      	bne.n	80033b4 <HAL_I2C_Init+0x168>
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	1e58      	subs	r0, r3, #1
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	6859      	ldr	r1, [r3, #4]
 8003398:	460b      	mov	r3, r1
 800339a:	005b      	lsls	r3, r3, #1
 800339c:	440b      	add	r3, r1
 800339e:	fbb0 f3f3 	udiv	r3, r0, r3
 80033a2:	3301      	adds	r3, #1
 80033a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	bf0c      	ite	eq
 80033ac:	2301      	moveq	r3, #1
 80033ae:	2300      	movne	r3, #0
 80033b0:	b2db      	uxtb	r3, r3
 80033b2:	e012      	b.n	80033da <HAL_I2C_Init+0x18e>
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	1e58      	subs	r0, r3, #1
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	6859      	ldr	r1, [r3, #4]
 80033bc:	460b      	mov	r3, r1
 80033be:	009b      	lsls	r3, r3, #2
 80033c0:	440b      	add	r3, r1
 80033c2:	0099      	lsls	r1, r3, #2
 80033c4:	440b      	add	r3, r1
 80033c6:	fbb0 f3f3 	udiv	r3, r0, r3
 80033ca:	3301      	adds	r3, #1
 80033cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	bf0c      	ite	eq
 80033d4:	2301      	moveq	r3, #1
 80033d6:	2300      	movne	r3, #0
 80033d8:	b2db      	uxtb	r3, r3
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d001      	beq.n	80033e2 <HAL_I2C_Init+0x196>
 80033de:	2301      	movs	r3, #1
 80033e0:	e022      	b.n	8003428 <HAL_I2C_Init+0x1dc>
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	689b      	ldr	r3, [r3, #8]
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d10e      	bne.n	8003408 <HAL_I2C_Init+0x1bc>
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	1e58      	subs	r0, r3, #1
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	6859      	ldr	r1, [r3, #4]
 80033f2:	460b      	mov	r3, r1
 80033f4:	005b      	lsls	r3, r3, #1
 80033f6:	440b      	add	r3, r1
 80033f8:	fbb0 f3f3 	udiv	r3, r0, r3
 80033fc:	3301      	adds	r3, #1
 80033fe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003402:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003406:	e00f      	b.n	8003428 <HAL_I2C_Init+0x1dc>
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	1e58      	subs	r0, r3, #1
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	6859      	ldr	r1, [r3, #4]
 8003410:	460b      	mov	r3, r1
 8003412:	009b      	lsls	r3, r3, #2
 8003414:	440b      	add	r3, r1
 8003416:	0099      	lsls	r1, r3, #2
 8003418:	440b      	add	r3, r1
 800341a:	fbb0 f3f3 	udiv	r3, r0, r3
 800341e:	3301      	adds	r3, #1
 8003420:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003424:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003428:	6879      	ldr	r1, [r7, #4]
 800342a:	6809      	ldr	r1, [r1, #0]
 800342c:	4313      	orrs	r3, r2
 800342e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	69da      	ldr	r2, [r3, #28]
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	6a1b      	ldr	r3, [r3, #32]
 8003442:	431a      	orrs	r2, r3
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	430a      	orrs	r2, r1
 800344a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	689b      	ldr	r3, [r3, #8]
 8003452:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003456:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800345a:	687a      	ldr	r2, [r7, #4]
 800345c:	6911      	ldr	r1, [r2, #16]
 800345e:	687a      	ldr	r2, [r7, #4]
 8003460:	68d2      	ldr	r2, [r2, #12]
 8003462:	4311      	orrs	r1, r2
 8003464:	687a      	ldr	r2, [r7, #4]
 8003466:	6812      	ldr	r2, [r2, #0]
 8003468:	430b      	orrs	r3, r1
 800346a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	68db      	ldr	r3, [r3, #12]
 8003472:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	695a      	ldr	r2, [r3, #20]
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	699b      	ldr	r3, [r3, #24]
 800347e:	431a      	orrs	r2, r3
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	430a      	orrs	r2, r1
 8003486:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	681a      	ldr	r2, [r3, #0]
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f042 0201 	orr.w	r2, r2, #1
 8003496:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	2200      	movs	r2, #0
 800349c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	2220      	movs	r2, #32
 80034a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	2200      	movs	r2, #0
 80034aa:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	2200      	movs	r2, #0
 80034b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80034b4:	2300      	movs	r3, #0
}
 80034b6:	4618      	mov	r0, r3
 80034b8:	3710      	adds	r7, #16
 80034ba:	46bd      	mov	sp, r7
 80034bc:	bd80      	pop	{r7, pc}
 80034be:	bf00      	nop
 80034c0:	000186a0 	.word	0x000186a0
 80034c4:	001e847f 	.word	0x001e847f
 80034c8:	003d08ff 	.word	0x003d08ff
 80034cc:	431bde83 	.word	0x431bde83
 80034d0:	10624dd3 	.word	0x10624dd3

080034d4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80034d4:	b580      	push	{r7, lr}
 80034d6:	b088      	sub	sp, #32
 80034d8:	af02      	add	r7, sp, #8
 80034da:	60f8      	str	r0, [r7, #12]
 80034dc:	607a      	str	r2, [r7, #4]
 80034de:	461a      	mov	r2, r3
 80034e0:	460b      	mov	r3, r1
 80034e2:	817b      	strh	r3, [r7, #10]
 80034e4:	4613      	mov	r3, r2
 80034e6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80034e8:	f7ff f872 	bl	80025d0 <HAL_GetTick>
 80034ec:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034f4:	b2db      	uxtb	r3, r3
 80034f6:	2b20      	cmp	r3, #32
 80034f8:	f040 80e0 	bne.w	80036bc <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80034fc:	697b      	ldr	r3, [r7, #20]
 80034fe:	9300      	str	r3, [sp, #0]
 8003500:	2319      	movs	r3, #25
 8003502:	2201      	movs	r2, #1
 8003504:	4970      	ldr	r1, [pc, #448]	; (80036c8 <HAL_I2C_Master_Transmit+0x1f4>)
 8003506:	68f8      	ldr	r0, [r7, #12]
 8003508:	f000 fc58 	bl	8003dbc <I2C_WaitOnFlagUntilTimeout>
 800350c:	4603      	mov	r3, r0
 800350e:	2b00      	cmp	r3, #0
 8003510:	d001      	beq.n	8003516 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003512:	2302      	movs	r3, #2
 8003514:	e0d3      	b.n	80036be <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800351c:	2b01      	cmp	r3, #1
 800351e:	d101      	bne.n	8003524 <HAL_I2C_Master_Transmit+0x50>
 8003520:	2302      	movs	r3, #2
 8003522:	e0cc      	b.n	80036be <HAL_I2C_Master_Transmit+0x1ea>
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	2201      	movs	r2, #1
 8003528:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f003 0301 	and.w	r3, r3, #1
 8003536:	2b01      	cmp	r3, #1
 8003538:	d007      	beq.n	800354a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	681a      	ldr	r2, [r3, #0]
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f042 0201 	orr.w	r2, r2, #1
 8003548:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	681a      	ldr	r2, [r3, #0]
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003558:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	2221      	movs	r2, #33	; 0x21
 800355e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	2210      	movs	r2, #16
 8003566:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	2200      	movs	r2, #0
 800356e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	687a      	ldr	r2, [r7, #4]
 8003574:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	893a      	ldrh	r2, [r7, #8]
 800357a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003580:	b29a      	uxth	r2, r3
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	4a50      	ldr	r2, [pc, #320]	; (80036cc <HAL_I2C_Master_Transmit+0x1f8>)
 800358a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800358c:	8979      	ldrh	r1, [r7, #10]
 800358e:	697b      	ldr	r3, [r7, #20]
 8003590:	6a3a      	ldr	r2, [r7, #32]
 8003592:	68f8      	ldr	r0, [r7, #12]
 8003594:	f000 fac2 	bl	8003b1c <I2C_MasterRequestWrite>
 8003598:	4603      	mov	r3, r0
 800359a:	2b00      	cmp	r3, #0
 800359c:	d001      	beq.n	80035a2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800359e:	2301      	movs	r3, #1
 80035a0:	e08d      	b.n	80036be <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80035a2:	2300      	movs	r3, #0
 80035a4:	613b      	str	r3, [r7, #16]
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	695b      	ldr	r3, [r3, #20]
 80035ac:	613b      	str	r3, [r7, #16]
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	699b      	ldr	r3, [r3, #24]
 80035b4:	613b      	str	r3, [r7, #16]
 80035b6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80035b8:	e066      	b.n	8003688 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80035ba:	697a      	ldr	r2, [r7, #20]
 80035bc:	6a39      	ldr	r1, [r7, #32]
 80035be:	68f8      	ldr	r0, [r7, #12]
 80035c0:	f000 fcd2 	bl	8003f68 <I2C_WaitOnTXEFlagUntilTimeout>
 80035c4:	4603      	mov	r3, r0
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d00d      	beq.n	80035e6 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035ce:	2b04      	cmp	r3, #4
 80035d0:	d107      	bne.n	80035e2 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	681a      	ldr	r2, [r3, #0]
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80035e0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80035e2:	2301      	movs	r3, #1
 80035e4:	e06b      	b.n	80036be <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035ea:	781a      	ldrb	r2, [r3, #0]
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035f6:	1c5a      	adds	r2, r3, #1
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003600:	b29b      	uxth	r3, r3
 8003602:	3b01      	subs	r3, #1
 8003604:	b29a      	uxth	r2, r3
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800360e:	3b01      	subs	r3, #1
 8003610:	b29a      	uxth	r2, r3
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	695b      	ldr	r3, [r3, #20]
 800361c:	f003 0304 	and.w	r3, r3, #4
 8003620:	2b04      	cmp	r3, #4
 8003622:	d11b      	bne.n	800365c <HAL_I2C_Master_Transmit+0x188>
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003628:	2b00      	cmp	r3, #0
 800362a:	d017      	beq.n	800365c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003630:	781a      	ldrb	r2, [r3, #0]
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800363c:	1c5a      	adds	r2, r3, #1
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003646:	b29b      	uxth	r3, r3
 8003648:	3b01      	subs	r3, #1
 800364a:	b29a      	uxth	r2, r3
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003654:	3b01      	subs	r3, #1
 8003656:	b29a      	uxth	r2, r3
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800365c:	697a      	ldr	r2, [r7, #20]
 800365e:	6a39      	ldr	r1, [r7, #32]
 8003660:	68f8      	ldr	r0, [r7, #12]
 8003662:	f000 fcc2 	bl	8003fea <I2C_WaitOnBTFFlagUntilTimeout>
 8003666:	4603      	mov	r3, r0
 8003668:	2b00      	cmp	r3, #0
 800366a:	d00d      	beq.n	8003688 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003670:	2b04      	cmp	r3, #4
 8003672:	d107      	bne.n	8003684 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	681a      	ldr	r2, [r3, #0]
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003682:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003684:	2301      	movs	r3, #1
 8003686:	e01a      	b.n	80036be <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800368c:	2b00      	cmp	r3, #0
 800368e:	d194      	bne.n	80035ba <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	681a      	ldr	r2, [r3, #0]
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800369e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	2220      	movs	r2, #32
 80036a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	2200      	movs	r2, #0
 80036ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	2200      	movs	r2, #0
 80036b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80036b8:	2300      	movs	r3, #0
 80036ba:	e000      	b.n	80036be <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80036bc:	2302      	movs	r3, #2
  }
}
 80036be:	4618      	mov	r0, r3
 80036c0:	3718      	adds	r7, #24
 80036c2:	46bd      	mov	sp, r7
 80036c4:	bd80      	pop	{r7, pc}
 80036c6:	bf00      	nop
 80036c8:	00100002 	.word	0x00100002
 80036cc:	ffff0000 	.word	0xffff0000

080036d0 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80036d0:	b580      	push	{r7, lr}
 80036d2:	b08c      	sub	sp, #48	; 0x30
 80036d4:	af02      	add	r7, sp, #8
 80036d6:	60f8      	str	r0, [r7, #12]
 80036d8:	607a      	str	r2, [r7, #4]
 80036da:	461a      	mov	r2, r3
 80036dc:	460b      	mov	r3, r1
 80036de:	817b      	strh	r3, [r7, #10]
 80036e0:	4613      	mov	r3, r2
 80036e2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80036e4:	f7fe ff74 	bl	80025d0 <HAL_GetTick>
 80036e8:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036f0:	b2db      	uxtb	r3, r3
 80036f2:	2b20      	cmp	r3, #32
 80036f4:	f040 820b 	bne.w	8003b0e <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80036f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036fa:	9300      	str	r3, [sp, #0]
 80036fc:	2319      	movs	r3, #25
 80036fe:	2201      	movs	r2, #1
 8003700:	497c      	ldr	r1, [pc, #496]	; (80038f4 <HAL_I2C_Master_Receive+0x224>)
 8003702:	68f8      	ldr	r0, [r7, #12]
 8003704:	f000 fb5a 	bl	8003dbc <I2C_WaitOnFlagUntilTimeout>
 8003708:	4603      	mov	r3, r0
 800370a:	2b00      	cmp	r3, #0
 800370c:	d001      	beq.n	8003712 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 800370e:	2302      	movs	r3, #2
 8003710:	e1fe      	b.n	8003b10 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003718:	2b01      	cmp	r3, #1
 800371a:	d101      	bne.n	8003720 <HAL_I2C_Master_Receive+0x50>
 800371c:	2302      	movs	r3, #2
 800371e:	e1f7      	b.n	8003b10 <HAL_I2C_Master_Receive+0x440>
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	2201      	movs	r2, #1
 8003724:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f003 0301 	and.w	r3, r3, #1
 8003732:	2b01      	cmp	r3, #1
 8003734:	d007      	beq.n	8003746 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	681a      	ldr	r2, [r3, #0]
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f042 0201 	orr.w	r2, r2, #1
 8003744:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	681a      	ldr	r2, [r3, #0]
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003754:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	2222      	movs	r2, #34	; 0x22
 800375a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	2210      	movs	r2, #16
 8003762:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	2200      	movs	r2, #0
 800376a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	687a      	ldr	r2, [r7, #4]
 8003770:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	893a      	ldrh	r2, [r7, #8]
 8003776:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800377c:	b29a      	uxth	r2, r3
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	4a5c      	ldr	r2, [pc, #368]	; (80038f8 <HAL_I2C_Master_Receive+0x228>)
 8003786:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003788:	8979      	ldrh	r1, [r7, #10]
 800378a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800378c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800378e:	68f8      	ldr	r0, [r7, #12]
 8003790:	f000 fa46 	bl	8003c20 <I2C_MasterRequestRead>
 8003794:	4603      	mov	r3, r0
 8003796:	2b00      	cmp	r3, #0
 8003798:	d001      	beq.n	800379e <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 800379a:	2301      	movs	r3, #1
 800379c:	e1b8      	b.n	8003b10 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d113      	bne.n	80037ce <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80037a6:	2300      	movs	r3, #0
 80037a8:	623b      	str	r3, [r7, #32]
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	695b      	ldr	r3, [r3, #20]
 80037b0:	623b      	str	r3, [r7, #32]
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	699b      	ldr	r3, [r3, #24]
 80037b8:	623b      	str	r3, [r7, #32]
 80037ba:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	681a      	ldr	r2, [r3, #0]
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80037ca:	601a      	str	r2, [r3, #0]
 80037cc:	e18c      	b.n	8003ae8 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037d2:	2b01      	cmp	r3, #1
 80037d4:	d11b      	bne.n	800380e <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	681a      	ldr	r2, [r3, #0]
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80037e4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80037e6:	2300      	movs	r3, #0
 80037e8:	61fb      	str	r3, [r7, #28]
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	695b      	ldr	r3, [r3, #20]
 80037f0:	61fb      	str	r3, [r7, #28]
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	699b      	ldr	r3, [r3, #24]
 80037f8:	61fb      	str	r3, [r7, #28]
 80037fa:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	681a      	ldr	r2, [r3, #0]
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800380a:	601a      	str	r2, [r3, #0]
 800380c:	e16c      	b.n	8003ae8 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003812:	2b02      	cmp	r3, #2
 8003814:	d11b      	bne.n	800384e <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	681a      	ldr	r2, [r3, #0]
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003824:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	681a      	ldr	r2, [r3, #0]
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003834:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003836:	2300      	movs	r3, #0
 8003838:	61bb      	str	r3, [r7, #24]
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	695b      	ldr	r3, [r3, #20]
 8003840:	61bb      	str	r3, [r7, #24]
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	699b      	ldr	r3, [r3, #24]
 8003848:	61bb      	str	r3, [r7, #24]
 800384a:	69bb      	ldr	r3, [r7, #24]
 800384c:	e14c      	b.n	8003ae8 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	681a      	ldr	r2, [r3, #0]
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800385c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800385e:	2300      	movs	r3, #0
 8003860:	617b      	str	r3, [r7, #20]
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	695b      	ldr	r3, [r3, #20]
 8003868:	617b      	str	r3, [r7, #20]
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	699b      	ldr	r3, [r3, #24]
 8003870:	617b      	str	r3, [r7, #20]
 8003872:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003874:	e138      	b.n	8003ae8 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800387a:	2b03      	cmp	r3, #3
 800387c:	f200 80f1 	bhi.w	8003a62 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003884:	2b01      	cmp	r3, #1
 8003886:	d123      	bne.n	80038d0 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003888:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800388a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800388c:	68f8      	ldr	r0, [r7, #12]
 800388e:	f000 fbed 	bl	800406c <I2C_WaitOnRXNEFlagUntilTimeout>
 8003892:	4603      	mov	r3, r0
 8003894:	2b00      	cmp	r3, #0
 8003896:	d001      	beq.n	800389c <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8003898:	2301      	movs	r3, #1
 800389a:	e139      	b.n	8003b10 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	691a      	ldr	r2, [r3, #16]
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038a6:	b2d2      	uxtb	r2, r2
 80038a8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038ae:	1c5a      	adds	r2, r3, #1
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038b8:	3b01      	subs	r3, #1
 80038ba:	b29a      	uxth	r2, r3
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038c4:	b29b      	uxth	r3, r3
 80038c6:	3b01      	subs	r3, #1
 80038c8:	b29a      	uxth	r2, r3
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	855a      	strh	r2, [r3, #42]	; 0x2a
 80038ce:	e10b      	b.n	8003ae8 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038d4:	2b02      	cmp	r3, #2
 80038d6:	d14e      	bne.n	8003976 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80038d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038da:	9300      	str	r3, [sp, #0]
 80038dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038de:	2200      	movs	r2, #0
 80038e0:	4906      	ldr	r1, [pc, #24]	; (80038fc <HAL_I2C_Master_Receive+0x22c>)
 80038e2:	68f8      	ldr	r0, [r7, #12]
 80038e4:	f000 fa6a 	bl	8003dbc <I2C_WaitOnFlagUntilTimeout>
 80038e8:	4603      	mov	r3, r0
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d008      	beq.n	8003900 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 80038ee:	2301      	movs	r3, #1
 80038f0:	e10e      	b.n	8003b10 <HAL_I2C_Master_Receive+0x440>
 80038f2:	bf00      	nop
 80038f4:	00100002 	.word	0x00100002
 80038f8:	ffff0000 	.word	0xffff0000
 80038fc:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	681a      	ldr	r2, [r3, #0]
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800390e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	691a      	ldr	r2, [r3, #16]
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800391a:	b2d2      	uxtb	r2, r2
 800391c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003922:	1c5a      	adds	r2, r3, #1
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800392c:	3b01      	subs	r3, #1
 800392e:	b29a      	uxth	r2, r3
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003938:	b29b      	uxth	r3, r3
 800393a:	3b01      	subs	r3, #1
 800393c:	b29a      	uxth	r2, r3
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	691a      	ldr	r2, [r3, #16]
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800394c:	b2d2      	uxtb	r2, r2
 800394e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003954:	1c5a      	adds	r2, r3, #1
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800395e:	3b01      	subs	r3, #1
 8003960:	b29a      	uxth	r2, r3
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800396a:	b29b      	uxth	r3, r3
 800396c:	3b01      	subs	r3, #1
 800396e:	b29a      	uxth	r2, r3
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003974:	e0b8      	b.n	8003ae8 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003978:	9300      	str	r3, [sp, #0]
 800397a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800397c:	2200      	movs	r2, #0
 800397e:	4966      	ldr	r1, [pc, #408]	; (8003b18 <HAL_I2C_Master_Receive+0x448>)
 8003980:	68f8      	ldr	r0, [r7, #12]
 8003982:	f000 fa1b 	bl	8003dbc <I2C_WaitOnFlagUntilTimeout>
 8003986:	4603      	mov	r3, r0
 8003988:	2b00      	cmp	r3, #0
 800398a:	d001      	beq.n	8003990 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 800398c:	2301      	movs	r3, #1
 800398e:	e0bf      	b.n	8003b10 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	681a      	ldr	r2, [r3, #0]
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800399e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	691a      	ldr	r2, [r3, #16]
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039aa:	b2d2      	uxtb	r2, r2
 80039ac:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039b2:	1c5a      	adds	r2, r3, #1
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039bc:	3b01      	subs	r3, #1
 80039be:	b29a      	uxth	r2, r3
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039c8:	b29b      	uxth	r3, r3
 80039ca:	3b01      	subs	r3, #1
 80039cc:	b29a      	uxth	r2, r3
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80039d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039d4:	9300      	str	r3, [sp, #0]
 80039d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039d8:	2200      	movs	r2, #0
 80039da:	494f      	ldr	r1, [pc, #316]	; (8003b18 <HAL_I2C_Master_Receive+0x448>)
 80039dc:	68f8      	ldr	r0, [r7, #12]
 80039de:	f000 f9ed 	bl	8003dbc <I2C_WaitOnFlagUntilTimeout>
 80039e2:	4603      	mov	r3, r0
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d001      	beq.n	80039ec <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 80039e8:	2301      	movs	r3, #1
 80039ea:	e091      	b.n	8003b10 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	681a      	ldr	r2, [r3, #0]
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80039fa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	691a      	ldr	r2, [r3, #16]
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a06:	b2d2      	uxtb	r2, r2
 8003a08:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a0e:	1c5a      	adds	r2, r3, #1
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a18:	3b01      	subs	r3, #1
 8003a1a:	b29a      	uxth	r2, r3
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a24:	b29b      	uxth	r3, r3
 8003a26:	3b01      	subs	r3, #1
 8003a28:	b29a      	uxth	r2, r3
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	691a      	ldr	r2, [r3, #16]
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a38:	b2d2      	uxtb	r2, r2
 8003a3a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a40:	1c5a      	adds	r2, r3, #1
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a4a:	3b01      	subs	r3, #1
 8003a4c:	b29a      	uxth	r2, r3
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a56:	b29b      	uxth	r3, r3
 8003a58:	3b01      	subs	r3, #1
 8003a5a:	b29a      	uxth	r2, r3
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003a60:	e042      	b.n	8003ae8 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003a62:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a64:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003a66:	68f8      	ldr	r0, [r7, #12]
 8003a68:	f000 fb00 	bl	800406c <I2C_WaitOnRXNEFlagUntilTimeout>
 8003a6c:	4603      	mov	r3, r0
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d001      	beq.n	8003a76 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8003a72:	2301      	movs	r3, #1
 8003a74:	e04c      	b.n	8003b10 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	691a      	ldr	r2, [r3, #16]
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a80:	b2d2      	uxtb	r2, r2
 8003a82:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a88:	1c5a      	adds	r2, r3, #1
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a92:	3b01      	subs	r3, #1
 8003a94:	b29a      	uxth	r2, r3
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a9e:	b29b      	uxth	r3, r3
 8003aa0:	3b01      	subs	r3, #1
 8003aa2:	b29a      	uxth	r2, r3
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	695b      	ldr	r3, [r3, #20]
 8003aae:	f003 0304 	and.w	r3, r3, #4
 8003ab2:	2b04      	cmp	r3, #4
 8003ab4:	d118      	bne.n	8003ae8 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	691a      	ldr	r2, [r3, #16]
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ac0:	b2d2      	uxtb	r2, r2
 8003ac2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ac8:	1c5a      	adds	r2, r3, #1
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ad2:	3b01      	subs	r3, #1
 8003ad4:	b29a      	uxth	r2, r3
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ade:	b29b      	uxth	r3, r3
 8003ae0:	3b01      	subs	r3, #1
 8003ae2:	b29a      	uxth	r2, r3
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	f47f aec2 	bne.w	8003876 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	2220      	movs	r2, #32
 8003af6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	2200      	movs	r2, #0
 8003afe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	2200      	movs	r2, #0
 8003b06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003b0a:	2300      	movs	r3, #0
 8003b0c:	e000      	b.n	8003b10 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8003b0e:	2302      	movs	r3, #2
  }
}
 8003b10:	4618      	mov	r0, r3
 8003b12:	3728      	adds	r7, #40	; 0x28
 8003b14:	46bd      	mov	sp, r7
 8003b16:	bd80      	pop	{r7, pc}
 8003b18:	00010004 	.word	0x00010004

08003b1c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003b1c:	b580      	push	{r7, lr}
 8003b1e:	b088      	sub	sp, #32
 8003b20:	af02      	add	r7, sp, #8
 8003b22:	60f8      	str	r0, [r7, #12]
 8003b24:	607a      	str	r2, [r7, #4]
 8003b26:	603b      	str	r3, [r7, #0]
 8003b28:	460b      	mov	r3, r1
 8003b2a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b30:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003b32:	697b      	ldr	r3, [r7, #20]
 8003b34:	2b08      	cmp	r3, #8
 8003b36:	d006      	beq.n	8003b46 <I2C_MasterRequestWrite+0x2a>
 8003b38:	697b      	ldr	r3, [r7, #20]
 8003b3a:	2b01      	cmp	r3, #1
 8003b3c:	d003      	beq.n	8003b46 <I2C_MasterRequestWrite+0x2a>
 8003b3e:	697b      	ldr	r3, [r7, #20]
 8003b40:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003b44:	d108      	bne.n	8003b58 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	681a      	ldr	r2, [r3, #0]
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003b54:	601a      	str	r2, [r3, #0]
 8003b56:	e00b      	b.n	8003b70 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b5c:	2b12      	cmp	r3, #18
 8003b5e:	d107      	bne.n	8003b70 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	681a      	ldr	r2, [r3, #0]
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003b6e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003b70:	683b      	ldr	r3, [r7, #0]
 8003b72:	9300      	str	r3, [sp, #0]
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	2200      	movs	r2, #0
 8003b78:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003b7c:	68f8      	ldr	r0, [r7, #12]
 8003b7e:	f000 f91d 	bl	8003dbc <I2C_WaitOnFlagUntilTimeout>
 8003b82:	4603      	mov	r3, r0
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d00d      	beq.n	8003ba4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b92:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003b96:	d103      	bne.n	8003ba0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003b9e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003ba0:	2303      	movs	r3, #3
 8003ba2:	e035      	b.n	8003c10 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	691b      	ldr	r3, [r3, #16]
 8003ba8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003bac:	d108      	bne.n	8003bc0 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003bae:	897b      	ldrh	r3, [r7, #10]
 8003bb0:	b2db      	uxtb	r3, r3
 8003bb2:	461a      	mov	r2, r3
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003bbc:	611a      	str	r2, [r3, #16]
 8003bbe:	e01b      	b.n	8003bf8 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003bc0:	897b      	ldrh	r3, [r7, #10]
 8003bc2:	11db      	asrs	r3, r3, #7
 8003bc4:	b2db      	uxtb	r3, r3
 8003bc6:	f003 0306 	and.w	r3, r3, #6
 8003bca:	b2db      	uxtb	r3, r3
 8003bcc:	f063 030f 	orn	r3, r3, #15
 8003bd0:	b2da      	uxtb	r2, r3
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003bd8:	683b      	ldr	r3, [r7, #0]
 8003bda:	687a      	ldr	r2, [r7, #4]
 8003bdc:	490e      	ldr	r1, [pc, #56]	; (8003c18 <I2C_MasterRequestWrite+0xfc>)
 8003bde:	68f8      	ldr	r0, [r7, #12]
 8003be0:	f000 f943 	bl	8003e6a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003be4:	4603      	mov	r3, r0
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d001      	beq.n	8003bee <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003bea:	2301      	movs	r3, #1
 8003bec:	e010      	b.n	8003c10 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003bee:	897b      	ldrh	r3, [r7, #10]
 8003bf0:	b2da      	uxtb	r2, r3
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003bf8:	683b      	ldr	r3, [r7, #0]
 8003bfa:	687a      	ldr	r2, [r7, #4]
 8003bfc:	4907      	ldr	r1, [pc, #28]	; (8003c1c <I2C_MasterRequestWrite+0x100>)
 8003bfe:	68f8      	ldr	r0, [r7, #12]
 8003c00:	f000 f933 	bl	8003e6a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003c04:	4603      	mov	r3, r0
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d001      	beq.n	8003c0e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003c0a:	2301      	movs	r3, #1
 8003c0c:	e000      	b.n	8003c10 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003c0e:	2300      	movs	r3, #0
}
 8003c10:	4618      	mov	r0, r3
 8003c12:	3718      	adds	r7, #24
 8003c14:	46bd      	mov	sp, r7
 8003c16:	bd80      	pop	{r7, pc}
 8003c18:	00010008 	.word	0x00010008
 8003c1c:	00010002 	.word	0x00010002

08003c20 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003c20:	b580      	push	{r7, lr}
 8003c22:	b088      	sub	sp, #32
 8003c24:	af02      	add	r7, sp, #8
 8003c26:	60f8      	str	r0, [r7, #12]
 8003c28:	607a      	str	r2, [r7, #4]
 8003c2a:	603b      	str	r3, [r7, #0]
 8003c2c:	460b      	mov	r3, r1
 8003c2e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c34:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	681a      	ldr	r2, [r3, #0]
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003c44:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003c46:	697b      	ldr	r3, [r7, #20]
 8003c48:	2b08      	cmp	r3, #8
 8003c4a:	d006      	beq.n	8003c5a <I2C_MasterRequestRead+0x3a>
 8003c4c:	697b      	ldr	r3, [r7, #20]
 8003c4e:	2b01      	cmp	r3, #1
 8003c50:	d003      	beq.n	8003c5a <I2C_MasterRequestRead+0x3a>
 8003c52:	697b      	ldr	r3, [r7, #20]
 8003c54:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003c58:	d108      	bne.n	8003c6c <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	681a      	ldr	r2, [r3, #0]
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003c68:	601a      	str	r2, [r3, #0]
 8003c6a:	e00b      	b.n	8003c84 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c70:	2b11      	cmp	r3, #17
 8003c72:	d107      	bne.n	8003c84 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	681a      	ldr	r2, [r3, #0]
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003c82:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003c84:	683b      	ldr	r3, [r7, #0]
 8003c86:	9300      	str	r3, [sp, #0]
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	2200      	movs	r2, #0
 8003c8c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003c90:	68f8      	ldr	r0, [r7, #12]
 8003c92:	f000 f893 	bl	8003dbc <I2C_WaitOnFlagUntilTimeout>
 8003c96:	4603      	mov	r3, r0
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d00d      	beq.n	8003cb8 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ca6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003caa:	d103      	bne.n	8003cb4 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003cb2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003cb4:	2303      	movs	r3, #3
 8003cb6:	e079      	b.n	8003dac <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	691b      	ldr	r3, [r3, #16]
 8003cbc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003cc0:	d108      	bne.n	8003cd4 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003cc2:	897b      	ldrh	r3, [r7, #10]
 8003cc4:	b2db      	uxtb	r3, r3
 8003cc6:	f043 0301 	orr.w	r3, r3, #1
 8003cca:	b2da      	uxtb	r2, r3
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	611a      	str	r2, [r3, #16]
 8003cd2:	e05f      	b.n	8003d94 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003cd4:	897b      	ldrh	r3, [r7, #10]
 8003cd6:	11db      	asrs	r3, r3, #7
 8003cd8:	b2db      	uxtb	r3, r3
 8003cda:	f003 0306 	and.w	r3, r3, #6
 8003cde:	b2db      	uxtb	r3, r3
 8003ce0:	f063 030f 	orn	r3, r3, #15
 8003ce4:	b2da      	uxtb	r2, r3
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003cec:	683b      	ldr	r3, [r7, #0]
 8003cee:	687a      	ldr	r2, [r7, #4]
 8003cf0:	4930      	ldr	r1, [pc, #192]	; (8003db4 <I2C_MasterRequestRead+0x194>)
 8003cf2:	68f8      	ldr	r0, [r7, #12]
 8003cf4:	f000 f8b9 	bl	8003e6a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003cf8:	4603      	mov	r3, r0
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d001      	beq.n	8003d02 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8003cfe:	2301      	movs	r3, #1
 8003d00:	e054      	b.n	8003dac <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003d02:	897b      	ldrh	r3, [r7, #10]
 8003d04:	b2da      	uxtb	r2, r3
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003d0c:	683b      	ldr	r3, [r7, #0]
 8003d0e:	687a      	ldr	r2, [r7, #4]
 8003d10:	4929      	ldr	r1, [pc, #164]	; (8003db8 <I2C_MasterRequestRead+0x198>)
 8003d12:	68f8      	ldr	r0, [r7, #12]
 8003d14:	f000 f8a9 	bl	8003e6a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003d18:	4603      	mov	r3, r0
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d001      	beq.n	8003d22 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8003d1e:	2301      	movs	r3, #1
 8003d20:	e044      	b.n	8003dac <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d22:	2300      	movs	r3, #0
 8003d24:	613b      	str	r3, [r7, #16]
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	695b      	ldr	r3, [r3, #20]
 8003d2c:	613b      	str	r3, [r7, #16]
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	699b      	ldr	r3, [r3, #24]
 8003d34:	613b      	str	r3, [r7, #16]
 8003d36:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	681a      	ldr	r2, [r3, #0]
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003d46:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003d48:	683b      	ldr	r3, [r7, #0]
 8003d4a:	9300      	str	r3, [sp, #0]
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	2200      	movs	r2, #0
 8003d50:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003d54:	68f8      	ldr	r0, [r7, #12]
 8003d56:	f000 f831 	bl	8003dbc <I2C_WaitOnFlagUntilTimeout>
 8003d5a:	4603      	mov	r3, r0
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d00d      	beq.n	8003d7c <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d6a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d6e:	d103      	bne.n	8003d78 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003d76:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8003d78:	2303      	movs	r3, #3
 8003d7a:	e017      	b.n	8003dac <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8003d7c:	897b      	ldrh	r3, [r7, #10]
 8003d7e:	11db      	asrs	r3, r3, #7
 8003d80:	b2db      	uxtb	r3, r3
 8003d82:	f003 0306 	and.w	r3, r3, #6
 8003d86:	b2db      	uxtb	r3, r3
 8003d88:	f063 030e 	orn	r3, r3, #14
 8003d8c:	b2da      	uxtb	r2, r3
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003d94:	683b      	ldr	r3, [r7, #0]
 8003d96:	687a      	ldr	r2, [r7, #4]
 8003d98:	4907      	ldr	r1, [pc, #28]	; (8003db8 <I2C_MasterRequestRead+0x198>)
 8003d9a:	68f8      	ldr	r0, [r7, #12]
 8003d9c:	f000 f865 	bl	8003e6a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003da0:	4603      	mov	r3, r0
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d001      	beq.n	8003daa <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8003da6:	2301      	movs	r3, #1
 8003da8:	e000      	b.n	8003dac <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8003daa:	2300      	movs	r3, #0
}
 8003dac:	4618      	mov	r0, r3
 8003dae:	3718      	adds	r7, #24
 8003db0:	46bd      	mov	sp, r7
 8003db2:	bd80      	pop	{r7, pc}
 8003db4:	00010008 	.word	0x00010008
 8003db8:	00010002 	.word	0x00010002

08003dbc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003dbc:	b580      	push	{r7, lr}
 8003dbe:	b084      	sub	sp, #16
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	60f8      	str	r0, [r7, #12]
 8003dc4:	60b9      	str	r1, [r7, #8]
 8003dc6:	603b      	str	r3, [r7, #0]
 8003dc8:	4613      	mov	r3, r2
 8003dca:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003dcc:	e025      	b.n	8003e1a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003dce:	683b      	ldr	r3, [r7, #0]
 8003dd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003dd4:	d021      	beq.n	8003e1a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003dd6:	f7fe fbfb 	bl	80025d0 <HAL_GetTick>
 8003dda:	4602      	mov	r2, r0
 8003ddc:	69bb      	ldr	r3, [r7, #24]
 8003dde:	1ad3      	subs	r3, r2, r3
 8003de0:	683a      	ldr	r2, [r7, #0]
 8003de2:	429a      	cmp	r2, r3
 8003de4:	d302      	bcc.n	8003dec <I2C_WaitOnFlagUntilTimeout+0x30>
 8003de6:	683b      	ldr	r3, [r7, #0]
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d116      	bne.n	8003e1a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	2200      	movs	r2, #0
 8003df0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	2220      	movs	r2, #32
 8003df6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	2200      	movs	r2, #0
 8003dfe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e06:	f043 0220 	orr.w	r2, r3, #32
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	2200      	movs	r2, #0
 8003e12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003e16:	2301      	movs	r3, #1
 8003e18:	e023      	b.n	8003e62 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003e1a:	68bb      	ldr	r3, [r7, #8]
 8003e1c:	0c1b      	lsrs	r3, r3, #16
 8003e1e:	b2db      	uxtb	r3, r3
 8003e20:	2b01      	cmp	r3, #1
 8003e22:	d10d      	bne.n	8003e40 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	695b      	ldr	r3, [r3, #20]
 8003e2a:	43da      	mvns	r2, r3
 8003e2c:	68bb      	ldr	r3, [r7, #8]
 8003e2e:	4013      	ands	r3, r2
 8003e30:	b29b      	uxth	r3, r3
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	bf0c      	ite	eq
 8003e36:	2301      	moveq	r3, #1
 8003e38:	2300      	movne	r3, #0
 8003e3a:	b2db      	uxtb	r3, r3
 8003e3c:	461a      	mov	r2, r3
 8003e3e:	e00c      	b.n	8003e5a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	699b      	ldr	r3, [r3, #24]
 8003e46:	43da      	mvns	r2, r3
 8003e48:	68bb      	ldr	r3, [r7, #8]
 8003e4a:	4013      	ands	r3, r2
 8003e4c:	b29b      	uxth	r3, r3
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	bf0c      	ite	eq
 8003e52:	2301      	moveq	r3, #1
 8003e54:	2300      	movne	r3, #0
 8003e56:	b2db      	uxtb	r3, r3
 8003e58:	461a      	mov	r2, r3
 8003e5a:	79fb      	ldrb	r3, [r7, #7]
 8003e5c:	429a      	cmp	r2, r3
 8003e5e:	d0b6      	beq.n	8003dce <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003e60:	2300      	movs	r3, #0
}
 8003e62:	4618      	mov	r0, r3
 8003e64:	3710      	adds	r7, #16
 8003e66:	46bd      	mov	sp, r7
 8003e68:	bd80      	pop	{r7, pc}

08003e6a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003e6a:	b580      	push	{r7, lr}
 8003e6c:	b084      	sub	sp, #16
 8003e6e:	af00      	add	r7, sp, #0
 8003e70:	60f8      	str	r0, [r7, #12]
 8003e72:	60b9      	str	r1, [r7, #8]
 8003e74:	607a      	str	r2, [r7, #4]
 8003e76:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003e78:	e051      	b.n	8003f1e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	695b      	ldr	r3, [r3, #20]
 8003e80:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e84:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e88:	d123      	bne.n	8003ed2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	681a      	ldr	r2, [r3, #0]
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e98:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003ea2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	2200      	movs	r2, #0
 8003ea8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	2220      	movs	r2, #32
 8003eae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	2200      	movs	r2, #0
 8003eb6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ebe:	f043 0204 	orr.w	r2, r3, #4
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	2200      	movs	r2, #0
 8003eca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003ece:	2301      	movs	r3, #1
 8003ed0:	e046      	b.n	8003f60 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ed8:	d021      	beq.n	8003f1e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003eda:	f7fe fb79 	bl	80025d0 <HAL_GetTick>
 8003ede:	4602      	mov	r2, r0
 8003ee0:	683b      	ldr	r3, [r7, #0]
 8003ee2:	1ad3      	subs	r3, r2, r3
 8003ee4:	687a      	ldr	r2, [r7, #4]
 8003ee6:	429a      	cmp	r2, r3
 8003ee8:	d302      	bcc.n	8003ef0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d116      	bne.n	8003f1e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	2200      	movs	r2, #0
 8003ef4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	2220      	movs	r2, #32
 8003efa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	2200      	movs	r2, #0
 8003f02:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f0a:	f043 0220 	orr.w	r2, r3, #32
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	2200      	movs	r2, #0
 8003f16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003f1a:	2301      	movs	r3, #1
 8003f1c:	e020      	b.n	8003f60 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003f1e:	68bb      	ldr	r3, [r7, #8]
 8003f20:	0c1b      	lsrs	r3, r3, #16
 8003f22:	b2db      	uxtb	r3, r3
 8003f24:	2b01      	cmp	r3, #1
 8003f26:	d10c      	bne.n	8003f42 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	695b      	ldr	r3, [r3, #20]
 8003f2e:	43da      	mvns	r2, r3
 8003f30:	68bb      	ldr	r3, [r7, #8]
 8003f32:	4013      	ands	r3, r2
 8003f34:	b29b      	uxth	r3, r3
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	bf14      	ite	ne
 8003f3a:	2301      	movne	r3, #1
 8003f3c:	2300      	moveq	r3, #0
 8003f3e:	b2db      	uxtb	r3, r3
 8003f40:	e00b      	b.n	8003f5a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	699b      	ldr	r3, [r3, #24]
 8003f48:	43da      	mvns	r2, r3
 8003f4a:	68bb      	ldr	r3, [r7, #8]
 8003f4c:	4013      	ands	r3, r2
 8003f4e:	b29b      	uxth	r3, r3
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	bf14      	ite	ne
 8003f54:	2301      	movne	r3, #1
 8003f56:	2300      	moveq	r3, #0
 8003f58:	b2db      	uxtb	r3, r3
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d18d      	bne.n	8003e7a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003f5e:	2300      	movs	r3, #0
}
 8003f60:	4618      	mov	r0, r3
 8003f62:	3710      	adds	r7, #16
 8003f64:	46bd      	mov	sp, r7
 8003f66:	bd80      	pop	{r7, pc}

08003f68 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003f68:	b580      	push	{r7, lr}
 8003f6a:	b084      	sub	sp, #16
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	60f8      	str	r0, [r7, #12]
 8003f70:	60b9      	str	r1, [r7, #8]
 8003f72:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003f74:	e02d      	b.n	8003fd2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003f76:	68f8      	ldr	r0, [r7, #12]
 8003f78:	f000 f8ce 	bl	8004118 <I2C_IsAcknowledgeFailed>
 8003f7c:	4603      	mov	r3, r0
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d001      	beq.n	8003f86 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003f82:	2301      	movs	r3, #1
 8003f84:	e02d      	b.n	8003fe2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f86:	68bb      	ldr	r3, [r7, #8]
 8003f88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f8c:	d021      	beq.n	8003fd2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f8e:	f7fe fb1f 	bl	80025d0 <HAL_GetTick>
 8003f92:	4602      	mov	r2, r0
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	1ad3      	subs	r3, r2, r3
 8003f98:	68ba      	ldr	r2, [r7, #8]
 8003f9a:	429a      	cmp	r2, r3
 8003f9c:	d302      	bcc.n	8003fa4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003f9e:	68bb      	ldr	r3, [r7, #8]
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d116      	bne.n	8003fd2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	2200      	movs	r2, #0
 8003fa8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	2220      	movs	r2, #32
 8003fae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	2200      	movs	r2, #0
 8003fb6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fbe:	f043 0220 	orr.w	r2, r3, #32
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	2200      	movs	r2, #0
 8003fca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003fce:	2301      	movs	r3, #1
 8003fd0:	e007      	b.n	8003fe2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	695b      	ldr	r3, [r3, #20]
 8003fd8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fdc:	2b80      	cmp	r3, #128	; 0x80
 8003fde:	d1ca      	bne.n	8003f76 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003fe0:	2300      	movs	r3, #0
}
 8003fe2:	4618      	mov	r0, r3
 8003fe4:	3710      	adds	r7, #16
 8003fe6:	46bd      	mov	sp, r7
 8003fe8:	bd80      	pop	{r7, pc}

08003fea <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003fea:	b580      	push	{r7, lr}
 8003fec:	b084      	sub	sp, #16
 8003fee:	af00      	add	r7, sp, #0
 8003ff0:	60f8      	str	r0, [r7, #12]
 8003ff2:	60b9      	str	r1, [r7, #8]
 8003ff4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003ff6:	e02d      	b.n	8004054 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003ff8:	68f8      	ldr	r0, [r7, #12]
 8003ffa:	f000 f88d 	bl	8004118 <I2C_IsAcknowledgeFailed>
 8003ffe:	4603      	mov	r3, r0
 8004000:	2b00      	cmp	r3, #0
 8004002:	d001      	beq.n	8004008 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004004:	2301      	movs	r3, #1
 8004006:	e02d      	b.n	8004064 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004008:	68bb      	ldr	r3, [r7, #8]
 800400a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800400e:	d021      	beq.n	8004054 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004010:	f7fe fade 	bl	80025d0 <HAL_GetTick>
 8004014:	4602      	mov	r2, r0
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	1ad3      	subs	r3, r2, r3
 800401a:	68ba      	ldr	r2, [r7, #8]
 800401c:	429a      	cmp	r2, r3
 800401e:	d302      	bcc.n	8004026 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004020:	68bb      	ldr	r3, [r7, #8]
 8004022:	2b00      	cmp	r3, #0
 8004024:	d116      	bne.n	8004054 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	2200      	movs	r2, #0
 800402a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	2220      	movs	r2, #32
 8004030:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	2200      	movs	r2, #0
 8004038:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004040:	f043 0220 	orr.w	r2, r3, #32
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	2200      	movs	r2, #0
 800404c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004050:	2301      	movs	r3, #1
 8004052:	e007      	b.n	8004064 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	695b      	ldr	r3, [r3, #20]
 800405a:	f003 0304 	and.w	r3, r3, #4
 800405e:	2b04      	cmp	r3, #4
 8004060:	d1ca      	bne.n	8003ff8 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004062:	2300      	movs	r3, #0
}
 8004064:	4618      	mov	r0, r3
 8004066:	3710      	adds	r7, #16
 8004068:	46bd      	mov	sp, r7
 800406a:	bd80      	pop	{r7, pc}

0800406c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800406c:	b580      	push	{r7, lr}
 800406e:	b084      	sub	sp, #16
 8004070:	af00      	add	r7, sp, #0
 8004072:	60f8      	str	r0, [r7, #12]
 8004074:	60b9      	str	r1, [r7, #8]
 8004076:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004078:	e042      	b.n	8004100 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	695b      	ldr	r3, [r3, #20]
 8004080:	f003 0310 	and.w	r3, r3, #16
 8004084:	2b10      	cmp	r3, #16
 8004086:	d119      	bne.n	80040bc <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f06f 0210 	mvn.w	r2, #16
 8004090:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	2200      	movs	r2, #0
 8004096:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	2220      	movs	r2, #32
 800409c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	2200      	movs	r2, #0
 80040a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	2200      	movs	r2, #0
 80040b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80040b8:	2301      	movs	r3, #1
 80040ba:	e029      	b.n	8004110 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80040bc:	f7fe fa88 	bl	80025d0 <HAL_GetTick>
 80040c0:	4602      	mov	r2, r0
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	1ad3      	subs	r3, r2, r3
 80040c6:	68ba      	ldr	r2, [r7, #8]
 80040c8:	429a      	cmp	r2, r3
 80040ca:	d302      	bcc.n	80040d2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80040cc:	68bb      	ldr	r3, [r7, #8]
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d116      	bne.n	8004100 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	2200      	movs	r2, #0
 80040d6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	2220      	movs	r2, #32
 80040dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	2200      	movs	r2, #0
 80040e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040ec:	f043 0220 	orr.w	r2, r3, #32
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	2200      	movs	r2, #0
 80040f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80040fc:	2301      	movs	r3, #1
 80040fe:	e007      	b.n	8004110 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	695b      	ldr	r3, [r3, #20]
 8004106:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800410a:	2b40      	cmp	r3, #64	; 0x40
 800410c:	d1b5      	bne.n	800407a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800410e:	2300      	movs	r3, #0
}
 8004110:	4618      	mov	r0, r3
 8004112:	3710      	adds	r7, #16
 8004114:	46bd      	mov	sp, r7
 8004116:	bd80      	pop	{r7, pc}

08004118 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004118:	b480      	push	{r7}
 800411a:	b083      	sub	sp, #12
 800411c:	af00      	add	r7, sp, #0
 800411e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	695b      	ldr	r3, [r3, #20]
 8004126:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800412a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800412e:	d11b      	bne.n	8004168 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004138:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	2200      	movs	r2, #0
 800413e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	2220      	movs	r2, #32
 8004144:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	2200      	movs	r2, #0
 800414c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004154:	f043 0204 	orr.w	r2, r3, #4
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	2200      	movs	r2, #0
 8004160:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004164:	2301      	movs	r3, #1
 8004166:	e000      	b.n	800416a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004168:	2300      	movs	r3, #0
}
 800416a:	4618      	mov	r0, r3
 800416c:	370c      	adds	r7, #12
 800416e:	46bd      	mov	sp, r7
 8004170:	bc80      	pop	{r7}
 8004172:	4770      	bx	lr

08004174 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004174:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004176:	b08f      	sub	sp, #60	; 0x3c
 8004178:	af0a      	add	r7, sp, #40	; 0x28
 800417a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	2b00      	cmp	r3, #0
 8004180:	d101      	bne.n	8004186 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004182:	2301      	movs	r3, #1
 8004184:	e10f      	b.n	80043a6 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8004192:	b2db      	uxtb	r3, r3
 8004194:	2b00      	cmp	r3, #0
 8004196:	d106      	bne.n	80041a6 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	2200      	movs	r2, #0
 800419c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80041a0:	6878      	ldr	r0, [r7, #4]
 80041a2:	f005 f9b3 	bl	800950c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	2203      	movs	r2, #3
 80041aa:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80041ae:	68bb      	ldr	r3, [r7, #8]
 80041b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d102      	bne.n	80041c0 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	2200      	movs	r2, #0
 80041be:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	4618      	mov	r0, r3
 80041c6:	f002 f9a3 	bl	8006510 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	603b      	str	r3, [r7, #0]
 80041d0:	687e      	ldr	r6, [r7, #4]
 80041d2:	466d      	mov	r5, sp
 80041d4:	f106 0410 	add.w	r4, r6, #16
 80041d8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80041da:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80041dc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80041de:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80041e0:	e894 0003 	ldmia.w	r4, {r0, r1}
 80041e4:	e885 0003 	stmia.w	r5, {r0, r1}
 80041e8:	1d33      	adds	r3, r6, #4
 80041ea:	cb0e      	ldmia	r3, {r1, r2, r3}
 80041ec:	6838      	ldr	r0, [r7, #0]
 80041ee:	f002 f885 	bl	80062fc <USB_CoreInit>
 80041f2:	4603      	mov	r3, r0
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d005      	beq.n	8004204 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	2202      	movs	r2, #2
 80041fc:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8004200:	2301      	movs	r3, #1
 8004202:	e0d0      	b.n	80043a6 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	2100      	movs	r1, #0
 800420a:	4618      	mov	r0, r3
 800420c:	f002 f990 	bl	8006530 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004210:	2300      	movs	r3, #0
 8004212:	73fb      	strb	r3, [r7, #15]
 8004214:	e04a      	b.n	80042ac <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004216:	7bfa      	ldrb	r2, [r7, #15]
 8004218:	6879      	ldr	r1, [r7, #4]
 800421a:	4613      	mov	r3, r2
 800421c:	00db      	lsls	r3, r3, #3
 800421e:	1a9b      	subs	r3, r3, r2
 8004220:	009b      	lsls	r3, r3, #2
 8004222:	440b      	add	r3, r1
 8004224:	333d      	adds	r3, #61	; 0x3d
 8004226:	2201      	movs	r2, #1
 8004228:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800422a:	7bfa      	ldrb	r2, [r7, #15]
 800422c:	6879      	ldr	r1, [r7, #4]
 800422e:	4613      	mov	r3, r2
 8004230:	00db      	lsls	r3, r3, #3
 8004232:	1a9b      	subs	r3, r3, r2
 8004234:	009b      	lsls	r3, r3, #2
 8004236:	440b      	add	r3, r1
 8004238:	333c      	adds	r3, #60	; 0x3c
 800423a:	7bfa      	ldrb	r2, [r7, #15]
 800423c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800423e:	7bfa      	ldrb	r2, [r7, #15]
 8004240:	7bfb      	ldrb	r3, [r7, #15]
 8004242:	b298      	uxth	r0, r3
 8004244:	6879      	ldr	r1, [r7, #4]
 8004246:	4613      	mov	r3, r2
 8004248:	00db      	lsls	r3, r3, #3
 800424a:	1a9b      	subs	r3, r3, r2
 800424c:	009b      	lsls	r3, r3, #2
 800424e:	440b      	add	r3, r1
 8004250:	3342      	adds	r3, #66	; 0x42
 8004252:	4602      	mov	r2, r0
 8004254:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004256:	7bfa      	ldrb	r2, [r7, #15]
 8004258:	6879      	ldr	r1, [r7, #4]
 800425a:	4613      	mov	r3, r2
 800425c:	00db      	lsls	r3, r3, #3
 800425e:	1a9b      	subs	r3, r3, r2
 8004260:	009b      	lsls	r3, r3, #2
 8004262:	440b      	add	r3, r1
 8004264:	333f      	adds	r3, #63	; 0x3f
 8004266:	2200      	movs	r2, #0
 8004268:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800426a:	7bfa      	ldrb	r2, [r7, #15]
 800426c:	6879      	ldr	r1, [r7, #4]
 800426e:	4613      	mov	r3, r2
 8004270:	00db      	lsls	r3, r3, #3
 8004272:	1a9b      	subs	r3, r3, r2
 8004274:	009b      	lsls	r3, r3, #2
 8004276:	440b      	add	r3, r1
 8004278:	3344      	adds	r3, #68	; 0x44
 800427a:	2200      	movs	r2, #0
 800427c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800427e:	7bfa      	ldrb	r2, [r7, #15]
 8004280:	6879      	ldr	r1, [r7, #4]
 8004282:	4613      	mov	r3, r2
 8004284:	00db      	lsls	r3, r3, #3
 8004286:	1a9b      	subs	r3, r3, r2
 8004288:	009b      	lsls	r3, r3, #2
 800428a:	440b      	add	r3, r1
 800428c:	3348      	adds	r3, #72	; 0x48
 800428e:	2200      	movs	r2, #0
 8004290:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004292:	7bfa      	ldrb	r2, [r7, #15]
 8004294:	6879      	ldr	r1, [r7, #4]
 8004296:	4613      	mov	r3, r2
 8004298:	00db      	lsls	r3, r3, #3
 800429a:	1a9b      	subs	r3, r3, r2
 800429c:	009b      	lsls	r3, r3, #2
 800429e:	440b      	add	r3, r1
 80042a0:	3350      	adds	r3, #80	; 0x50
 80042a2:	2200      	movs	r2, #0
 80042a4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80042a6:	7bfb      	ldrb	r3, [r7, #15]
 80042a8:	3301      	adds	r3, #1
 80042aa:	73fb      	strb	r3, [r7, #15]
 80042ac:	7bfa      	ldrb	r2, [r7, #15]
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	685b      	ldr	r3, [r3, #4]
 80042b2:	429a      	cmp	r2, r3
 80042b4:	d3af      	bcc.n	8004216 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80042b6:	2300      	movs	r3, #0
 80042b8:	73fb      	strb	r3, [r7, #15]
 80042ba:	e044      	b.n	8004346 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80042bc:	7bfa      	ldrb	r2, [r7, #15]
 80042be:	6879      	ldr	r1, [r7, #4]
 80042c0:	4613      	mov	r3, r2
 80042c2:	00db      	lsls	r3, r3, #3
 80042c4:	1a9b      	subs	r3, r3, r2
 80042c6:	009b      	lsls	r3, r3, #2
 80042c8:	440b      	add	r3, r1
 80042ca:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 80042ce:	2200      	movs	r2, #0
 80042d0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80042d2:	7bfa      	ldrb	r2, [r7, #15]
 80042d4:	6879      	ldr	r1, [r7, #4]
 80042d6:	4613      	mov	r3, r2
 80042d8:	00db      	lsls	r3, r3, #3
 80042da:	1a9b      	subs	r3, r3, r2
 80042dc:	009b      	lsls	r3, r3, #2
 80042de:	440b      	add	r3, r1
 80042e0:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80042e4:	7bfa      	ldrb	r2, [r7, #15]
 80042e6:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80042e8:	7bfa      	ldrb	r2, [r7, #15]
 80042ea:	6879      	ldr	r1, [r7, #4]
 80042ec:	4613      	mov	r3, r2
 80042ee:	00db      	lsls	r3, r3, #3
 80042f0:	1a9b      	subs	r3, r3, r2
 80042f2:	009b      	lsls	r3, r3, #2
 80042f4:	440b      	add	r3, r1
 80042f6:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80042fa:	2200      	movs	r2, #0
 80042fc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80042fe:	7bfa      	ldrb	r2, [r7, #15]
 8004300:	6879      	ldr	r1, [r7, #4]
 8004302:	4613      	mov	r3, r2
 8004304:	00db      	lsls	r3, r3, #3
 8004306:	1a9b      	subs	r3, r3, r2
 8004308:	009b      	lsls	r3, r3, #2
 800430a:	440b      	add	r3, r1
 800430c:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8004310:	2200      	movs	r2, #0
 8004312:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004314:	7bfa      	ldrb	r2, [r7, #15]
 8004316:	6879      	ldr	r1, [r7, #4]
 8004318:	4613      	mov	r3, r2
 800431a:	00db      	lsls	r3, r3, #3
 800431c:	1a9b      	subs	r3, r3, r2
 800431e:	009b      	lsls	r3, r3, #2
 8004320:	440b      	add	r3, r1
 8004322:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004326:	2200      	movs	r2, #0
 8004328:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800432a:	7bfa      	ldrb	r2, [r7, #15]
 800432c:	6879      	ldr	r1, [r7, #4]
 800432e:	4613      	mov	r3, r2
 8004330:	00db      	lsls	r3, r3, #3
 8004332:	1a9b      	subs	r3, r3, r2
 8004334:	009b      	lsls	r3, r3, #2
 8004336:	440b      	add	r3, r1
 8004338:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800433c:	2200      	movs	r2, #0
 800433e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004340:	7bfb      	ldrb	r3, [r7, #15]
 8004342:	3301      	adds	r3, #1
 8004344:	73fb      	strb	r3, [r7, #15]
 8004346:	7bfa      	ldrb	r2, [r7, #15]
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	685b      	ldr	r3, [r3, #4]
 800434c:	429a      	cmp	r2, r3
 800434e:	d3b5      	bcc.n	80042bc <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	603b      	str	r3, [r7, #0]
 8004356:	687e      	ldr	r6, [r7, #4]
 8004358:	466d      	mov	r5, sp
 800435a:	f106 0410 	add.w	r4, r6, #16
 800435e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004360:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004362:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004364:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004366:	e894 0003 	ldmia.w	r4, {r0, r1}
 800436a:	e885 0003 	stmia.w	r5, {r0, r1}
 800436e:	1d33      	adds	r3, r6, #4
 8004370:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004372:	6838      	ldr	r0, [r7, #0]
 8004374:	f002 f928 	bl	80065c8 <USB_DevInit>
 8004378:	4603      	mov	r3, r0
 800437a:	2b00      	cmp	r3, #0
 800437c:	d005      	beq.n	800438a <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	2202      	movs	r2, #2
 8004382:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8004386:	2301      	movs	r3, #1
 8004388:	e00d      	b.n	80043a6 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	2200      	movs	r2, #0
 800438e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	2201      	movs	r2, #1
 8004396:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  (void)USB_DevDisconnect(hpcd->Instance);
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	4618      	mov	r0, r3
 80043a0:	f003 f999 	bl	80076d6 <USB_DevDisconnect>

  return HAL_OK;
 80043a4:	2300      	movs	r3, #0
}
 80043a6:	4618      	mov	r0, r3
 80043a8:	3714      	adds	r7, #20
 80043aa:	46bd      	mov	sp, r7
 80043ac:	bdf0      	pop	{r4, r5, r6, r7, pc}

080043ae <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80043ae:	b580      	push	{r7, lr}
 80043b0:	b082      	sub	sp, #8
 80043b2:	af00      	add	r7, sp, #0
 80043b4:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80043bc:	2b01      	cmp	r3, #1
 80043be:	d101      	bne.n	80043c4 <HAL_PCD_Start+0x16>
 80043c0:	2302      	movs	r3, #2
 80043c2:	e012      	b.n	80043ea <HAL_PCD_Start+0x3c>
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	2201      	movs	r2, #1
 80043c8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  __HAL_PCD_ENABLE(hpcd);
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	4618      	mov	r0, r3
 80043d2:	f002 f88d 	bl	80064f0 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	4618      	mov	r0, r3
 80043dc:	f003 f95b 	bl	8007696 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	2200      	movs	r2, #0
 80043e4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80043e8:	2300      	movs	r3, #0
}
 80043ea:	4618      	mov	r0, r3
 80043ec:	3708      	adds	r7, #8
 80043ee:	46bd      	mov	sp, r7
 80043f0:	bd80      	pop	{r7, pc}

080043f2 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80043f2:	b590      	push	{r4, r7, lr}
 80043f4:	b08d      	sub	sp, #52	; 0x34
 80043f6:	af00      	add	r7, sp, #0
 80043f8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004400:	6a3b      	ldr	r3, [r7, #32]
 8004402:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t temp;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	4618      	mov	r0, r3
 800440a:	f003 fa12 	bl	8007832 <USB_GetMode>
 800440e:	4603      	mov	r3, r0
 8004410:	2b00      	cmp	r3, #0
 8004412:	f040 838f 	bne.w	8004b34 <HAL_PCD_IRQHandler+0x742>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	4618      	mov	r0, r3
 800441c:	f003 f97b 	bl	8007716 <USB_ReadInterrupts>
 8004420:	4603      	mov	r3, r0
 8004422:	2b00      	cmp	r3, #0
 8004424:	f000 8385 	beq.w	8004b32 <HAL_PCD_IRQHandler+0x740>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	4618      	mov	r0, r3
 800442e:	f003 f972 	bl	8007716 <USB_ReadInterrupts>
 8004432:	4603      	mov	r3, r0
 8004434:	f003 0302 	and.w	r3, r3, #2
 8004438:	2b02      	cmp	r3, #2
 800443a:	d107      	bne.n	800444c <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	695a      	ldr	r2, [r3, #20]
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f002 0202 	and.w	r2, r2, #2
 800444a:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	4618      	mov	r0, r3
 8004452:	f003 f960 	bl	8007716 <USB_ReadInterrupts>
 8004456:	4603      	mov	r3, r0
 8004458:	f003 0310 	and.w	r3, r3, #16
 800445c:	2b10      	cmp	r3, #16
 800445e:	d161      	bne.n	8004524 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	699a      	ldr	r2, [r3, #24]
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	f022 0210 	bic.w	r2, r2, #16
 800446e:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8004470:	6a3b      	ldr	r3, [r7, #32]
 8004472:	6a1b      	ldr	r3, [r3, #32]
 8004474:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8004476:	69bb      	ldr	r3, [r7, #24]
 8004478:	f003 020f 	and.w	r2, r3, #15
 800447c:	4613      	mov	r3, r2
 800447e:	00db      	lsls	r3, r3, #3
 8004480:	1a9b      	subs	r3, r3, r2
 8004482:	009b      	lsls	r3, r3, #2
 8004484:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004488:	687a      	ldr	r2, [r7, #4]
 800448a:	4413      	add	r3, r2
 800448c:	3304      	adds	r3, #4
 800448e:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8004490:	69bb      	ldr	r3, [r7, #24]
 8004492:	0c5b      	lsrs	r3, r3, #17
 8004494:	f003 030f 	and.w	r3, r3, #15
 8004498:	2b02      	cmp	r3, #2
 800449a:	d124      	bne.n	80044e6 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 800449c:	69ba      	ldr	r2, [r7, #24]
 800449e:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80044a2:	4013      	ands	r3, r2
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d035      	beq.n	8004514 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80044a8:	697b      	ldr	r3, [r7, #20]
 80044aa:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 80044ac:	69bb      	ldr	r3, [r7, #24]
 80044ae:	091b      	lsrs	r3, r3, #4
 80044b0:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80044b2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80044b6:	b29b      	uxth	r3, r3
 80044b8:	461a      	mov	r2, r3
 80044ba:	6a38      	ldr	r0, [r7, #32]
 80044bc:	f002 ff9d 	bl	80073fa <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80044c0:	697b      	ldr	r3, [r7, #20]
 80044c2:	68da      	ldr	r2, [r3, #12]
 80044c4:	69bb      	ldr	r3, [r7, #24]
 80044c6:	091b      	lsrs	r3, r3, #4
 80044c8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80044cc:	441a      	add	r2, r3
 80044ce:	697b      	ldr	r3, [r7, #20]
 80044d0:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80044d2:	697b      	ldr	r3, [r7, #20]
 80044d4:	699a      	ldr	r2, [r3, #24]
 80044d6:	69bb      	ldr	r3, [r7, #24]
 80044d8:	091b      	lsrs	r3, r3, #4
 80044da:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80044de:	441a      	add	r2, r3
 80044e0:	697b      	ldr	r3, [r7, #20]
 80044e2:	619a      	str	r2, [r3, #24]
 80044e4:	e016      	b.n	8004514 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 80044e6:	69bb      	ldr	r3, [r7, #24]
 80044e8:	0c5b      	lsrs	r3, r3, #17
 80044ea:	f003 030f 	and.w	r3, r3, #15
 80044ee:	2b06      	cmp	r3, #6
 80044f0:	d110      	bne.n	8004514 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80044f8:	2208      	movs	r2, #8
 80044fa:	4619      	mov	r1, r3
 80044fc:	6a38      	ldr	r0, [r7, #32]
 80044fe:	f002 ff7c 	bl	80073fa <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004502:	697b      	ldr	r3, [r7, #20]
 8004504:	699a      	ldr	r2, [r3, #24]
 8004506:	69bb      	ldr	r3, [r7, #24]
 8004508:	091b      	lsrs	r3, r3, #4
 800450a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800450e:	441a      	add	r2, r3
 8004510:	697b      	ldr	r3, [r7, #20]
 8004512:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	699a      	ldr	r2, [r3, #24]
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	f042 0210 	orr.w	r2, r2, #16
 8004522:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	4618      	mov	r0, r3
 800452a:	f003 f8f4 	bl	8007716 <USB_ReadInterrupts>
 800452e:	4603      	mov	r3, r0
 8004530:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004534:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004538:	d16e      	bne.n	8004618 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 800453a:	2300      	movs	r3, #0
 800453c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	4618      	mov	r0, r3
 8004544:	f003 f8f9 	bl	800773a <USB_ReadDevAllOutEpInterrupt>
 8004548:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800454a:	e062      	b.n	8004612 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 800454c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800454e:	f003 0301 	and.w	r3, r3, #1
 8004552:	2b00      	cmp	r3, #0
 8004554:	d057      	beq.n	8004606 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800455c:	b2d2      	uxtb	r2, r2
 800455e:	4611      	mov	r1, r2
 8004560:	4618      	mov	r0, r3
 8004562:	f003 f91c 	bl	800779e <USB_ReadDevOutEPInterrupt>
 8004566:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8004568:	693b      	ldr	r3, [r7, #16]
 800456a:	f003 0301 	and.w	r3, r3, #1
 800456e:	2b00      	cmp	r3, #0
 8004570:	d00c      	beq.n	800458c <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8004572:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004574:	015a      	lsls	r2, r3, #5
 8004576:	69fb      	ldr	r3, [r7, #28]
 8004578:	4413      	add	r3, r2
 800457a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800457e:	461a      	mov	r2, r3
 8004580:	2301      	movs	r3, #1
 8004582:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8004584:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004586:	6878      	ldr	r0, [r7, #4]
 8004588:	f000 fda2 	bl	80050d0 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800458c:	693b      	ldr	r3, [r7, #16]
 800458e:	f003 0308 	and.w	r3, r3, #8
 8004592:	2b00      	cmp	r3, #0
 8004594:	d00c      	beq.n	80045b0 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8004596:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004598:	015a      	lsls	r2, r3, #5
 800459a:	69fb      	ldr	r3, [r7, #28]
 800459c:	4413      	add	r3, r2
 800459e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045a2:	461a      	mov	r2, r3
 80045a4:	2308      	movs	r3, #8
 80045a6:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80045a8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80045aa:	6878      	ldr	r0, [r7, #4]
 80045ac:	f000 fe9c 	bl	80052e8 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80045b0:	693b      	ldr	r3, [r7, #16]
 80045b2:	f003 0310 	and.w	r3, r3, #16
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d008      	beq.n	80045cc <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80045ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045bc:	015a      	lsls	r2, r3, #5
 80045be:	69fb      	ldr	r3, [r7, #28]
 80045c0:	4413      	add	r3, r2
 80045c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045c6:	461a      	mov	r2, r3
 80045c8:	2310      	movs	r3, #16
 80045ca:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80045cc:	693b      	ldr	r3, [r7, #16]
 80045ce:	f003 0320 	and.w	r3, r3, #32
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d008      	beq.n	80045e8 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80045d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045d8:	015a      	lsls	r2, r3, #5
 80045da:	69fb      	ldr	r3, [r7, #28]
 80045dc:	4413      	add	r3, r2
 80045de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045e2:	461a      	mov	r2, r3
 80045e4:	2320      	movs	r3, #32
 80045e6:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80045e8:	693b      	ldr	r3, [r7, #16]
 80045ea:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d009      	beq.n	8004606 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80045f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045f4:	015a      	lsls	r2, r3, #5
 80045f6:	69fb      	ldr	r3, [r7, #28]
 80045f8:	4413      	add	r3, r2
 80045fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045fe:	461a      	mov	r2, r3
 8004600:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004604:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8004606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004608:	3301      	adds	r3, #1
 800460a:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800460c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800460e:	085b      	lsrs	r3, r3, #1
 8004610:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8004612:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004614:	2b00      	cmp	r3, #0
 8004616:	d199      	bne.n	800454c <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	4618      	mov	r0, r3
 800461e:	f003 f87a 	bl	8007716 <USB_ReadInterrupts>
 8004622:	4603      	mov	r3, r0
 8004624:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004628:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800462c:	f040 80c0 	bne.w	80047b0 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	4618      	mov	r0, r3
 8004636:	f003 f899 	bl	800776c <USB_ReadDevAllInEpInterrupt>
 800463a:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800463c:	2300      	movs	r3, #0
 800463e:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8004640:	e0b2      	b.n	80047a8 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8004642:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004644:	f003 0301 	and.w	r3, r3, #1
 8004648:	2b00      	cmp	r3, #0
 800464a:	f000 80a7 	beq.w	800479c <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004654:	b2d2      	uxtb	r2, r2
 8004656:	4611      	mov	r1, r2
 8004658:	4618      	mov	r0, r3
 800465a:	f003 f8bd 	bl	80077d8 <USB_ReadDevInEPInterrupt>
 800465e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8004660:	693b      	ldr	r3, [r7, #16]
 8004662:	f003 0301 	and.w	r3, r3, #1
 8004666:	2b00      	cmp	r3, #0
 8004668:	d057      	beq.n	800471a <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800466a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800466c:	f003 030f 	and.w	r3, r3, #15
 8004670:	2201      	movs	r2, #1
 8004672:	fa02 f303 	lsl.w	r3, r2, r3
 8004676:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004678:	69fb      	ldr	r3, [r7, #28]
 800467a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800467e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	43db      	mvns	r3, r3
 8004684:	69f9      	ldr	r1, [r7, #28]
 8004686:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800468a:	4013      	ands	r3, r2
 800468c:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800468e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004690:	015a      	lsls	r2, r3, #5
 8004692:	69fb      	ldr	r3, [r7, #28]
 8004694:	4413      	add	r3, r2
 8004696:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800469a:	461a      	mov	r2, r3
 800469c:	2301      	movs	r3, #1
 800469e:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	691b      	ldr	r3, [r3, #16]
 80046a4:	2b01      	cmp	r3, #1
 80046a6:	d132      	bne.n	800470e <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80046a8:	6879      	ldr	r1, [r7, #4]
 80046aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80046ac:	4613      	mov	r3, r2
 80046ae:	00db      	lsls	r3, r3, #3
 80046b0:	1a9b      	subs	r3, r3, r2
 80046b2:	009b      	lsls	r3, r3, #2
 80046b4:	440b      	add	r3, r1
 80046b6:	3348      	adds	r3, #72	; 0x48
 80046b8:	6819      	ldr	r1, [r3, #0]
 80046ba:	6878      	ldr	r0, [r7, #4]
 80046bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80046be:	4613      	mov	r3, r2
 80046c0:	00db      	lsls	r3, r3, #3
 80046c2:	1a9b      	subs	r3, r3, r2
 80046c4:	009b      	lsls	r3, r3, #2
 80046c6:	4403      	add	r3, r0
 80046c8:	3344      	adds	r3, #68	; 0x44
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	4419      	add	r1, r3
 80046ce:	6878      	ldr	r0, [r7, #4]
 80046d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80046d2:	4613      	mov	r3, r2
 80046d4:	00db      	lsls	r3, r3, #3
 80046d6:	1a9b      	subs	r3, r3, r2
 80046d8:	009b      	lsls	r3, r3, #2
 80046da:	4403      	add	r3, r0
 80046dc:	3348      	adds	r3, #72	; 0x48
 80046de:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80046e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d113      	bne.n	800470e <HAL_PCD_IRQHandler+0x31c>
 80046e6:	6879      	ldr	r1, [r7, #4]
 80046e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80046ea:	4613      	mov	r3, r2
 80046ec:	00db      	lsls	r3, r3, #3
 80046ee:	1a9b      	subs	r3, r3, r2
 80046f0:	009b      	lsls	r3, r3, #2
 80046f2:	440b      	add	r3, r1
 80046f4:	3350      	adds	r3, #80	; 0x50
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d108      	bne.n	800470e <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	6818      	ldr	r0, [r3, #0]
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004706:	461a      	mov	r2, r3
 8004708:	2101      	movs	r1, #1
 800470a:	f003 f8c1 	bl	8007890 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800470e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004710:	b2db      	uxtb	r3, r3
 8004712:	4619      	mov	r1, r3
 8004714:	6878      	ldr	r0, [r7, #4]
 8004716:	f004 ff7a 	bl	800960e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800471a:	693b      	ldr	r3, [r7, #16]
 800471c:	f003 0308 	and.w	r3, r3, #8
 8004720:	2b00      	cmp	r3, #0
 8004722:	d008      	beq.n	8004736 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8004724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004726:	015a      	lsls	r2, r3, #5
 8004728:	69fb      	ldr	r3, [r7, #28]
 800472a:	4413      	add	r3, r2
 800472c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004730:	461a      	mov	r2, r3
 8004732:	2308      	movs	r3, #8
 8004734:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8004736:	693b      	ldr	r3, [r7, #16]
 8004738:	f003 0310 	and.w	r3, r3, #16
 800473c:	2b00      	cmp	r3, #0
 800473e:	d008      	beq.n	8004752 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8004740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004742:	015a      	lsls	r2, r3, #5
 8004744:	69fb      	ldr	r3, [r7, #28]
 8004746:	4413      	add	r3, r2
 8004748:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800474c:	461a      	mov	r2, r3
 800474e:	2310      	movs	r3, #16
 8004750:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8004752:	693b      	ldr	r3, [r7, #16]
 8004754:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004758:	2b00      	cmp	r3, #0
 800475a:	d008      	beq.n	800476e <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800475c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800475e:	015a      	lsls	r2, r3, #5
 8004760:	69fb      	ldr	r3, [r7, #28]
 8004762:	4413      	add	r3, r2
 8004764:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004768:	461a      	mov	r2, r3
 800476a:	2340      	movs	r3, #64	; 0x40
 800476c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800476e:	693b      	ldr	r3, [r7, #16]
 8004770:	f003 0302 	and.w	r3, r3, #2
 8004774:	2b00      	cmp	r3, #0
 8004776:	d008      	beq.n	800478a <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8004778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800477a:	015a      	lsls	r2, r3, #5
 800477c:	69fb      	ldr	r3, [r7, #28]
 800477e:	4413      	add	r3, r2
 8004780:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004784:	461a      	mov	r2, r3
 8004786:	2302      	movs	r3, #2
 8004788:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800478a:	693b      	ldr	r3, [r7, #16]
 800478c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004790:	2b00      	cmp	r3, #0
 8004792:	d003      	beq.n	800479c <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8004794:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004796:	6878      	ldr	r0, [r7, #4]
 8004798:	f000 fc0c 	bl	8004fb4 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800479c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800479e:	3301      	adds	r3, #1
 80047a0:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80047a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047a4:	085b      	lsrs	r3, r3, #1
 80047a6:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80047a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	f47f af49 	bne.w	8004642 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	4618      	mov	r0, r3
 80047b6:	f002 ffae 	bl	8007716 <USB_ReadInterrupts>
 80047ba:	4603      	mov	r3, r0
 80047bc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80047c0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80047c4:	d114      	bne.n	80047f0 <HAL_PCD_IRQHandler+0x3fe>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80047c6:	69fb      	ldr	r3, [r7, #28]
 80047c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80047cc:	685b      	ldr	r3, [r3, #4]
 80047ce:	69fa      	ldr	r2, [r7, #28]
 80047d0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80047d4:	f023 0301 	bic.w	r3, r3, #1
 80047d8:	6053      	str	r3, [r2, #4]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResumeCallback(hpcd);
#else
      HAL_PCD_ResumeCallback(hpcd);
 80047da:	6878      	ldr	r0, [r7, #4]
 80047dc:	f004 ff8e 	bl	80096fc <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	695a      	ldr	r2, [r3, #20]
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80047ee:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	4618      	mov	r0, r3
 80047f6:	f002 ff8e 	bl	8007716 <USB_ReadInterrupts>
 80047fa:	4603      	mov	r3, r0
 80047fc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004800:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004804:	d112      	bne.n	800482c <HAL_PCD_IRQHandler+0x43a>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8004806:	69fb      	ldr	r3, [r7, #28]
 8004808:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800480c:	689b      	ldr	r3, [r3, #8]
 800480e:	f003 0301 	and.w	r3, r3, #1
 8004812:	2b01      	cmp	r3, #1
 8004814:	d102      	bne.n	800481c <HAL_PCD_IRQHandler+0x42a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8004816:	6878      	ldr	r0, [r7, #4]
 8004818:	f004 ff4a 	bl	80096b0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	695a      	ldr	r2, [r3, #20]
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800482a:	615a      	str	r2, [r3, #20]
    }
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	4618      	mov	r0, r3
 8004832:	f002 ff70 	bl	8007716 <USB_ReadInterrupts>
 8004836:	4603      	mov	r3, r0
 8004838:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800483c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004840:	f040 80c7 	bne.w	80049d2 <HAL_PCD_IRQHandler+0x5e0>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004844:	69fb      	ldr	r3, [r7, #28]
 8004846:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800484a:	685b      	ldr	r3, [r3, #4]
 800484c:	69fa      	ldr	r2, [r7, #28]
 800484e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004852:	f023 0301 	bic.w	r3, r3, #1
 8004856:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	2110      	movs	r1, #16
 800485e:	4618      	mov	r0, r3
 8004860:	f002 f816 	bl	8006890 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004864:	2300      	movs	r3, #0
 8004866:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004868:	e056      	b.n	8004918 <HAL_PCD_IRQHandler+0x526>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800486a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800486c:	015a      	lsls	r2, r3, #5
 800486e:	69fb      	ldr	r3, [r7, #28]
 8004870:	4413      	add	r3, r2
 8004872:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004876:	461a      	mov	r2, r3
 8004878:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800487c:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800487e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004880:	015a      	lsls	r2, r3, #5
 8004882:	69fb      	ldr	r3, [r7, #28]
 8004884:	4413      	add	r3, r2
 8004886:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800488e:	0151      	lsls	r1, r2, #5
 8004890:	69fa      	ldr	r2, [r7, #28]
 8004892:	440a      	add	r2, r1
 8004894:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004898:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800489c:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800489e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048a0:	015a      	lsls	r2, r3, #5
 80048a2:	69fb      	ldr	r3, [r7, #28]
 80048a4:	4413      	add	r3, r2
 80048a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80048ae:	0151      	lsls	r1, r2, #5
 80048b0:	69fa      	ldr	r2, [r7, #28]
 80048b2:	440a      	add	r2, r1
 80048b4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80048b8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80048bc:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80048be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048c0:	015a      	lsls	r2, r3, #5
 80048c2:	69fb      	ldr	r3, [r7, #28]
 80048c4:	4413      	add	r3, r2
 80048c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048ca:	461a      	mov	r2, r3
 80048cc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80048d0:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80048d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048d4:	015a      	lsls	r2, r3, #5
 80048d6:	69fb      	ldr	r3, [r7, #28]
 80048d8:	4413      	add	r3, r2
 80048da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80048e2:	0151      	lsls	r1, r2, #5
 80048e4:	69fa      	ldr	r2, [r7, #28]
 80048e6:	440a      	add	r2, r1
 80048e8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80048ec:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80048f0:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80048f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048f4:	015a      	lsls	r2, r3, #5
 80048f6:	69fb      	ldr	r3, [r7, #28]
 80048f8:	4413      	add	r3, r2
 80048fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004902:	0151      	lsls	r1, r2, #5
 8004904:	69fa      	ldr	r2, [r7, #28]
 8004906:	440a      	add	r2, r1
 8004908:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800490c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004910:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004912:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004914:	3301      	adds	r3, #1
 8004916:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	685b      	ldr	r3, [r3, #4]
 800491c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800491e:	429a      	cmp	r2, r3
 8004920:	d3a3      	bcc.n	800486a <HAL_PCD_IRQHandler+0x478>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8004922:	69fb      	ldr	r3, [r7, #28]
 8004924:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004928:	69db      	ldr	r3, [r3, #28]
 800492a:	69fa      	ldr	r2, [r7, #28]
 800492c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004930:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8004934:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800493a:	2b00      	cmp	r3, #0
 800493c:	d016      	beq.n	800496c <HAL_PCD_IRQHandler+0x57a>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800493e:	69fb      	ldr	r3, [r7, #28]
 8004940:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004944:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004948:	69fa      	ldr	r2, [r7, #28]
 800494a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800494e:	f043 030b 	orr.w	r3, r3, #11
 8004952:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8004956:	69fb      	ldr	r3, [r7, #28]
 8004958:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800495c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800495e:	69fa      	ldr	r2, [r7, #28]
 8004960:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004964:	f043 030b 	orr.w	r3, r3, #11
 8004968:	6453      	str	r3, [r2, #68]	; 0x44
 800496a:	e015      	b.n	8004998 <HAL_PCD_IRQHandler+0x5a6>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800496c:	69fb      	ldr	r3, [r7, #28]
 800496e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004972:	695b      	ldr	r3, [r3, #20]
 8004974:	69fa      	ldr	r2, [r7, #28]
 8004976:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800497a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800497e:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8004982:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8004984:	69fb      	ldr	r3, [r7, #28]
 8004986:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800498a:	691b      	ldr	r3, [r3, #16]
 800498c:	69fa      	ldr	r2, [r7, #28]
 800498e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004992:	f043 030b 	orr.w	r3, r3, #11
 8004996:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8004998:	69fb      	ldr	r3, [r7, #28]
 800499a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	69fa      	ldr	r2, [r7, #28]
 80049a2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80049a6:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80049aa:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	6818      	ldr	r0, [r3, #0]
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	691b      	ldr	r3, [r3, #16]
 80049b4:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80049bc:	461a      	mov	r2, r3
 80049be:	f002 ff67 	bl	8007890 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	695a      	ldr	r2, [r3, #20]
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80049d0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	4618      	mov	r0, r3
 80049d8:	f002 fe9d 	bl	8007716 <USB_ReadInterrupts>
 80049dc:	4603      	mov	r3, r0
 80049de:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80049e2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80049e6:	d124      	bne.n	8004a32 <HAL_PCD_IRQHandler+0x640>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	4618      	mov	r0, r3
 80049ee:	f002 ff2d 	bl	800784c <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	4618      	mov	r0, r3
 80049f8:	f001 ffa6 	bl	8006948 <USB_GetDevSpeed>
 80049fc:	4603      	mov	r3, r0
 80049fe:	461a      	mov	r2, r3
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681c      	ldr	r4, [r3, #0]
 8004a08:	f001 f932 	bl	8005c70 <HAL_RCC_GetHCLKFreq>
 8004a0c:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004a12:	b2db      	uxtb	r3, r3
 8004a14:	461a      	mov	r2, r3
 8004a16:	4620      	mov	r0, r4
 8004a18:	f001 fcc8 	bl	80063ac <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8004a1c:	6878      	ldr	r0, [r7, #4]
 8004a1e:	f004 fe1e 	bl	800965e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	695a      	ldr	r2, [r3, #20]
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8004a30:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	4618      	mov	r0, r3
 8004a38:	f002 fe6d 	bl	8007716 <USB_ReadInterrupts>
 8004a3c:	4603      	mov	r3, r0
 8004a3e:	f003 0308 	and.w	r3, r3, #8
 8004a42:	2b08      	cmp	r3, #8
 8004a44:	d10a      	bne.n	8004a5c <HAL_PCD_IRQHandler+0x66a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8004a46:	6878      	ldr	r0, [r7, #4]
 8004a48:	f004 fdfb 	bl	8009642 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	695a      	ldr	r2, [r3, #20]
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	f002 0208 	and.w	r2, r2, #8
 8004a5a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	4618      	mov	r0, r3
 8004a62:	f002 fe58 	bl	8007716 <USB_ReadInterrupts>
 8004a66:	4603      	mov	r3, r0
 8004a68:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004a6c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004a70:	d10f      	bne.n	8004a92 <HAL_PCD_IRQHandler+0x6a0>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8004a72:	2300      	movs	r3, #0
 8004a74:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8004a76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a78:	b2db      	uxtb	r3, r3
 8004a7a:	4619      	mov	r1, r3
 8004a7c:	6878      	ldr	r0, [r7, #4]
 8004a7e:	f004 fe5d 	bl	800973c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	695a      	ldr	r2, [r3, #20]
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8004a90:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	4618      	mov	r0, r3
 8004a98:	f002 fe3d 	bl	8007716 <USB_ReadInterrupts>
 8004a9c:	4603      	mov	r3, r0
 8004a9e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004aa2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004aa6:	d10f      	bne.n	8004ac8 <HAL_PCD_IRQHandler+0x6d6>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8004aa8:	2300      	movs	r3, #0
 8004aaa:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8004aac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aae:	b2db      	uxtb	r3, r3
 8004ab0:	4619      	mov	r1, r3
 8004ab2:	6878      	ldr	r0, [r7, #4]
 8004ab4:	f004 fe30 	bl	8009718 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	695a      	ldr	r2, [r3, #20]
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8004ac6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	4618      	mov	r0, r3
 8004ace:	f002 fe22 	bl	8007716 <USB_ReadInterrupts>
 8004ad2:	4603      	mov	r3, r0
 8004ad4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004ad8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004adc:	d10a      	bne.n	8004af4 <HAL_PCD_IRQHandler+0x702>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8004ade:	6878      	ldr	r0, [r7, #4]
 8004ae0:	f004 fe3e 	bl	8009760 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	695a      	ldr	r2, [r3, #20]
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8004af2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	4618      	mov	r0, r3
 8004afa:	f002 fe0c 	bl	8007716 <USB_ReadInterrupts>
 8004afe:	4603      	mov	r3, r0
 8004b00:	f003 0304 	and.w	r3, r3, #4
 8004b04:	2b04      	cmp	r3, #4
 8004b06:	d115      	bne.n	8004b34 <HAL_PCD_IRQHandler+0x742>
    {
      temp = hpcd->Instance->GOTGINT;
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	685b      	ldr	r3, [r3, #4]
 8004b0e:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8004b10:	69bb      	ldr	r3, [r7, #24]
 8004b12:	f003 0304 	and.w	r3, r3, #4
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d002      	beq.n	8004b20 <HAL_PCD_IRQHandler+0x72e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8004b1a:	6878      	ldr	r0, [r7, #4]
 8004b1c:	f004 fe2e 	bl	800977c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	6859      	ldr	r1, [r3, #4]
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	69ba      	ldr	r2, [r7, #24]
 8004b2c:	430a      	orrs	r2, r1
 8004b2e:	605a      	str	r2, [r3, #4]
 8004b30:	e000      	b.n	8004b34 <HAL_PCD_IRQHandler+0x742>
      return;
 8004b32:	bf00      	nop
    }
  }
}
 8004b34:	3734      	adds	r7, #52	; 0x34
 8004b36:	46bd      	mov	sp, r7
 8004b38:	bd90      	pop	{r4, r7, pc}

08004b3a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8004b3a:	b580      	push	{r7, lr}
 8004b3c:	b082      	sub	sp, #8
 8004b3e:	af00      	add	r7, sp, #0
 8004b40:	6078      	str	r0, [r7, #4]
 8004b42:	460b      	mov	r3, r1
 8004b44:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004b4c:	2b01      	cmp	r3, #1
 8004b4e:	d101      	bne.n	8004b54 <HAL_PCD_SetAddress+0x1a>
 8004b50:	2302      	movs	r3, #2
 8004b52:	e013      	b.n	8004b7c <HAL_PCD_SetAddress+0x42>
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	2201      	movs	r2, #1
 8004b58:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	78fa      	ldrb	r2, [r7, #3]
 8004b60:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	78fa      	ldrb	r2, [r7, #3]
 8004b6a:	4611      	mov	r1, r2
 8004b6c:	4618      	mov	r0, r3
 8004b6e:	f002 fd6d 	bl	800764c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	2200      	movs	r2, #0
 8004b76:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8004b7a:	2300      	movs	r3, #0
}
 8004b7c:	4618      	mov	r0, r3
 8004b7e:	3708      	adds	r7, #8
 8004b80:	46bd      	mov	sp, r7
 8004b82:	bd80      	pop	{r7, pc}

08004b84 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8004b84:	b580      	push	{r7, lr}
 8004b86:	b084      	sub	sp, #16
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	6078      	str	r0, [r7, #4]
 8004b8c:	4608      	mov	r0, r1
 8004b8e:	4611      	mov	r1, r2
 8004b90:	461a      	mov	r2, r3
 8004b92:	4603      	mov	r3, r0
 8004b94:	70fb      	strb	r3, [r7, #3]
 8004b96:	460b      	mov	r3, r1
 8004b98:	803b      	strh	r3, [r7, #0]
 8004b9a:	4613      	mov	r3, r2
 8004b9c:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8004b9e:	2300      	movs	r3, #0
 8004ba0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004ba2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	da0f      	bge.n	8004bca <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004baa:	78fb      	ldrb	r3, [r7, #3]
 8004bac:	f003 020f 	and.w	r2, r3, #15
 8004bb0:	4613      	mov	r3, r2
 8004bb2:	00db      	lsls	r3, r3, #3
 8004bb4:	1a9b      	subs	r3, r3, r2
 8004bb6:	009b      	lsls	r3, r3, #2
 8004bb8:	3338      	adds	r3, #56	; 0x38
 8004bba:	687a      	ldr	r2, [r7, #4]
 8004bbc:	4413      	add	r3, r2
 8004bbe:	3304      	adds	r3, #4
 8004bc0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	2201      	movs	r2, #1
 8004bc6:	705a      	strb	r2, [r3, #1]
 8004bc8:	e00f      	b.n	8004bea <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004bca:	78fb      	ldrb	r3, [r7, #3]
 8004bcc:	f003 020f 	and.w	r2, r3, #15
 8004bd0:	4613      	mov	r3, r2
 8004bd2:	00db      	lsls	r3, r3, #3
 8004bd4:	1a9b      	subs	r3, r3, r2
 8004bd6:	009b      	lsls	r3, r3, #2
 8004bd8:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004bdc:	687a      	ldr	r2, [r7, #4]
 8004bde:	4413      	add	r3, r2
 8004be0:	3304      	adds	r3, #4
 8004be2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	2200      	movs	r2, #0
 8004be8:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8004bea:	78fb      	ldrb	r3, [r7, #3]
 8004bec:	f003 030f 	and.w	r3, r3, #15
 8004bf0:	b2da      	uxtb	r2, r3
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8004bf6:	883a      	ldrh	r2, [r7, #0]
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	78ba      	ldrb	r2, [r7, #2]
 8004c00:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	785b      	ldrb	r3, [r3, #1]
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d004      	beq.n	8004c14 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	781b      	ldrb	r3, [r3, #0]
 8004c0e:	b29a      	uxth	r2, r3
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8004c14:	78bb      	ldrb	r3, [r7, #2]
 8004c16:	2b02      	cmp	r3, #2
 8004c18:	d102      	bne.n	8004c20 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	2200      	movs	r2, #0
 8004c1e:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004c26:	2b01      	cmp	r3, #1
 8004c28:	d101      	bne.n	8004c2e <HAL_PCD_EP_Open+0xaa>
 8004c2a:	2302      	movs	r3, #2
 8004c2c:	e00e      	b.n	8004c4c <HAL_PCD_EP_Open+0xc8>
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	2201      	movs	r2, #1
 8004c32:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	68f9      	ldr	r1, [r7, #12]
 8004c3c:	4618      	mov	r0, r3
 8004c3e:	f001 fea7 	bl	8006990 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	2200      	movs	r2, #0
 8004c46:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8004c4a:	7afb      	ldrb	r3, [r7, #11]
}
 8004c4c:	4618      	mov	r0, r3
 8004c4e:	3710      	adds	r7, #16
 8004c50:	46bd      	mov	sp, r7
 8004c52:	bd80      	pop	{r7, pc}

08004c54 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004c54:	b580      	push	{r7, lr}
 8004c56:	b084      	sub	sp, #16
 8004c58:	af00      	add	r7, sp, #0
 8004c5a:	6078      	str	r0, [r7, #4]
 8004c5c:	460b      	mov	r3, r1
 8004c5e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004c60:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	da0f      	bge.n	8004c88 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004c68:	78fb      	ldrb	r3, [r7, #3]
 8004c6a:	f003 020f 	and.w	r2, r3, #15
 8004c6e:	4613      	mov	r3, r2
 8004c70:	00db      	lsls	r3, r3, #3
 8004c72:	1a9b      	subs	r3, r3, r2
 8004c74:	009b      	lsls	r3, r3, #2
 8004c76:	3338      	adds	r3, #56	; 0x38
 8004c78:	687a      	ldr	r2, [r7, #4]
 8004c7a:	4413      	add	r3, r2
 8004c7c:	3304      	adds	r3, #4
 8004c7e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	2201      	movs	r2, #1
 8004c84:	705a      	strb	r2, [r3, #1]
 8004c86:	e00f      	b.n	8004ca8 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004c88:	78fb      	ldrb	r3, [r7, #3]
 8004c8a:	f003 020f 	and.w	r2, r3, #15
 8004c8e:	4613      	mov	r3, r2
 8004c90:	00db      	lsls	r3, r3, #3
 8004c92:	1a9b      	subs	r3, r3, r2
 8004c94:	009b      	lsls	r3, r3, #2
 8004c96:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004c9a:	687a      	ldr	r2, [r7, #4]
 8004c9c:	4413      	add	r3, r2
 8004c9e:	3304      	adds	r3, #4
 8004ca0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	2200      	movs	r2, #0
 8004ca6:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8004ca8:	78fb      	ldrb	r3, [r7, #3]
 8004caa:	f003 030f 	and.w	r3, r3, #15
 8004cae:	b2da      	uxtb	r2, r3
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004cba:	2b01      	cmp	r3, #1
 8004cbc:	d101      	bne.n	8004cc2 <HAL_PCD_EP_Close+0x6e>
 8004cbe:	2302      	movs	r3, #2
 8004cc0:	e00e      	b.n	8004ce0 <HAL_PCD_EP_Close+0x8c>
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	2201      	movs	r2, #1
 8004cc6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	68f9      	ldr	r1, [r7, #12]
 8004cd0:	4618      	mov	r0, r3
 8004cd2:	f001 fee3 	bl	8006a9c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	2200      	movs	r2, #0
 8004cda:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8004cde:	2300      	movs	r3, #0
}
 8004ce0:	4618      	mov	r0, r3
 8004ce2:	3710      	adds	r7, #16
 8004ce4:	46bd      	mov	sp, r7
 8004ce6:	bd80      	pop	{r7, pc}

08004ce8 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004ce8:	b580      	push	{r7, lr}
 8004cea:	b086      	sub	sp, #24
 8004cec:	af00      	add	r7, sp, #0
 8004cee:	60f8      	str	r0, [r7, #12]
 8004cf0:	607a      	str	r2, [r7, #4]
 8004cf2:	603b      	str	r3, [r7, #0]
 8004cf4:	460b      	mov	r3, r1
 8004cf6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004cf8:	7afb      	ldrb	r3, [r7, #11]
 8004cfa:	f003 020f 	and.w	r2, r3, #15
 8004cfe:	4613      	mov	r3, r2
 8004d00:	00db      	lsls	r3, r3, #3
 8004d02:	1a9b      	subs	r3, r3, r2
 8004d04:	009b      	lsls	r3, r3, #2
 8004d06:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004d0a:	68fa      	ldr	r2, [r7, #12]
 8004d0c:	4413      	add	r3, r2
 8004d0e:	3304      	adds	r3, #4
 8004d10:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004d12:	697b      	ldr	r3, [r7, #20]
 8004d14:	687a      	ldr	r2, [r7, #4]
 8004d16:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8004d18:	697b      	ldr	r3, [r7, #20]
 8004d1a:	683a      	ldr	r2, [r7, #0]
 8004d1c:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8004d1e:	697b      	ldr	r3, [r7, #20]
 8004d20:	2200      	movs	r2, #0
 8004d22:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8004d24:	697b      	ldr	r3, [r7, #20]
 8004d26:	2200      	movs	r2, #0
 8004d28:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004d2a:	7afb      	ldrb	r3, [r7, #11]
 8004d2c:	f003 030f 	and.w	r3, r3, #15
 8004d30:	b2da      	uxtb	r2, r3
 8004d32:	697b      	ldr	r3, [r7, #20]
 8004d34:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	691b      	ldr	r3, [r3, #16]
 8004d3a:	2b01      	cmp	r3, #1
 8004d3c:	d102      	bne.n	8004d44 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004d3e:	687a      	ldr	r2, [r7, #4]
 8004d40:	697b      	ldr	r3, [r7, #20]
 8004d42:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004d44:	7afb      	ldrb	r3, [r7, #11]
 8004d46:	f003 030f 	and.w	r3, r3, #15
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d109      	bne.n	8004d62 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	6818      	ldr	r0, [r3, #0]
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	691b      	ldr	r3, [r3, #16]
 8004d56:	b2db      	uxtb	r3, r3
 8004d58:	461a      	mov	r2, r3
 8004d5a:	6979      	ldr	r1, [r7, #20]
 8004d5c:	f002 f9be 	bl	80070dc <USB_EP0StartXfer>
 8004d60:	e008      	b.n	8004d74 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	6818      	ldr	r0, [r3, #0]
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	691b      	ldr	r3, [r3, #16]
 8004d6a:	b2db      	uxtb	r3, r3
 8004d6c:	461a      	mov	r2, r3
 8004d6e:	6979      	ldr	r1, [r7, #20]
 8004d70:	f001 ff70 	bl	8006c54 <USB_EPStartXfer>
  }

  return HAL_OK;
 8004d74:	2300      	movs	r3, #0
}
 8004d76:	4618      	mov	r0, r3
 8004d78:	3718      	adds	r7, #24
 8004d7a:	46bd      	mov	sp, r7
 8004d7c:	bd80      	pop	{r7, pc}

08004d7e <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004d7e:	b480      	push	{r7}
 8004d80:	b083      	sub	sp, #12
 8004d82:	af00      	add	r7, sp, #0
 8004d84:	6078      	str	r0, [r7, #4]
 8004d86:	460b      	mov	r3, r1
 8004d88:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8004d8a:	78fb      	ldrb	r3, [r7, #3]
 8004d8c:	f003 020f 	and.w	r2, r3, #15
 8004d90:	6879      	ldr	r1, [r7, #4]
 8004d92:	4613      	mov	r3, r2
 8004d94:	00db      	lsls	r3, r3, #3
 8004d96:	1a9b      	subs	r3, r3, r2
 8004d98:	009b      	lsls	r3, r3, #2
 8004d9a:	440b      	add	r3, r1
 8004d9c:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8004da0:	681b      	ldr	r3, [r3, #0]
}
 8004da2:	4618      	mov	r0, r3
 8004da4:	370c      	adds	r7, #12
 8004da6:	46bd      	mov	sp, r7
 8004da8:	bc80      	pop	{r7}
 8004daa:	4770      	bx	lr

08004dac <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004dac:	b580      	push	{r7, lr}
 8004dae:	b086      	sub	sp, #24
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	60f8      	str	r0, [r7, #12]
 8004db4:	607a      	str	r2, [r7, #4]
 8004db6:	603b      	str	r3, [r7, #0]
 8004db8:	460b      	mov	r3, r1
 8004dba:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004dbc:	7afb      	ldrb	r3, [r7, #11]
 8004dbe:	f003 020f 	and.w	r2, r3, #15
 8004dc2:	4613      	mov	r3, r2
 8004dc4:	00db      	lsls	r3, r3, #3
 8004dc6:	1a9b      	subs	r3, r3, r2
 8004dc8:	009b      	lsls	r3, r3, #2
 8004dca:	3338      	adds	r3, #56	; 0x38
 8004dcc:	68fa      	ldr	r2, [r7, #12]
 8004dce:	4413      	add	r3, r2
 8004dd0:	3304      	adds	r3, #4
 8004dd2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004dd4:	697b      	ldr	r3, [r7, #20]
 8004dd6:	687a      	ldr	r2, [r7, #4]
 8004dd8:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8004dda:	697b      	ldr	r3, [r7, #20]
 8004ddc:	683a      	ldr	r2, [r7, #0]
 8004dde:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8004de0:	697b      	ldr	r3, [r7, #20]
 8004de2:	2200      	movs	r2, #0
 8004de4:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8004de6:	697b      	ldr	r3, [r7, #20]
 8004de8:	2201      	movs	r2, #1
 8004dea:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004dec:	7afb      	ldrb	r3, [r7, #11]
 8004dee:	f003 030f 	and.w	r3, r3, #15
 8004df2:	b2da      	uxtb	r2, r3
 8004df4:	697b      	ldr	r3, [r7, #20]
 8004df6:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	691b      	ldr	r3, [r3, #16]
 8004dfc:	2b01      	cmp	r3, #1
 8004dfe:	d102      	bne.n	8004e06 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004e00:	687a      	ldr	r2, [r7, #4]
 8004e02:	697b      	ldr	r3, [r7, #20]
 8004e04:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004e06:	7afb      	ldrb	r3, [r7, #11]
 8004e08:	f003 030f 	and.w	r3, r3, #15
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d109      	bne.n	8004e24 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	6818      	ldr	r0, [r3, #0]
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	691b      	ldr	r3, [r3, #16]
 8004e18:	b2db      	uxtb	r3, r3
 8004e1a:	461a      	mov	r2, r3
 8004e1c:	6979      	ldr	r1, [r7, #20]
 8004e1e:	f002 f95d 	bl	80070dc <USB_EP0StartXfer>
 8004e22:	e008      	b.n	8004e36 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	6818      	ldr	r0, [r3, #0]
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	691b      	ldr	r3, [r3, #16]
 8004e2c:	b2db      	uxtb	r3, r3
 8004e2e:	461a      	mov	r2, r3
 8004e30:	6979      	ldr	r1, [r7, #20]
 8004e32:	f001 ff0f 	bl	8006c54 <USB_EPStartXfer>
  }

  return HAL_OK;
 8004e36:	2300      	movs	r3, #0
}
 8004e38:	4618      	mov	r0, r3
 8004e3a:	3718      	adds	r7, #24
 8004e3c:	46bd      	mov	sp, r7
 8004e3e:	bd80      	pop	{r7, pc}

08004e40 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004e40:	b580      	push	{r7, lr}
 8004e42:	b084      	sub	sp, #16
 8004e44:	af00      	add	r7, sp, #0
 8004e46:	6078      	str	r0, [r7, #4]
 8004e48:	460b      	mov	r3, r1
 8004e4a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004e4c:	78fb      	ldrb	r3, [r7, #3]
 8004e4e:	f003 020f 	and.w	r2, r3, #15
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	685b      	ldr	r3, [r3, #4]
 8004e56:	429a      	cmp	r2, r3
 8004e58:	d901      	bls.n	8004e5e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8004e5a:	2301      	movs	r3, #1
 8004e5c:	e050      	b.n	8004f00 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004e5e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	da0f      	bge.n	8004e86 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004e66:	78fb      	ldrb	r3, [r7, #3]
 8004e68:	f003 020f 	and.w	r2, r3, #15
 8004e6c:	4613      	mov	r3, r2
 8004e6e:	00db      	lsls	r3, r3, #3
 8004e70:	1a9b      	subs	r3, r3, r2
 8004e72:	009b      	lsls	r3, r3, #2
 8004e74:	3338      	adds	r3, #56	; 0x38
 8004e76:	687a      	ldr	r2, [r7, #4]
 8004e78:	4413      	add	r3, r2
 8004e7a:	3304      	adds	r3, #4
 8004e7c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	2201      	movs	r2, #1
 8004e82:	705a      	strb	r2, [r3, #1]
 8004e84:	e00d      	b.n	8004ea2 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004e86:	78fa      	ldrb	r2, [r7, #3]
 8004e88:	4613      	mov	r3, r2
 8004e8a:	00db      	lsls	r3, r3, #3
 8004e8c:	1a9b      	subs	r3, r3, r2
 8004e8e:	009b      	lsls	r3, r3, #2
 8004e90:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004e94:	687a      	ldr	r2, [r7, #4]
 8004e96:	4413      	add	r3, r2
 8004e98:	3304      	adds	r3, #4
 8004e9a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	2200      	movs	r2, #0
 8004ea0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	2201      	movs	r2, #1
 8004ea6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004ea8:	78fb      	ldrb	r3, [r7, #3]
 8004eaa:	f003 030f 	and.w	r3, r3, #15
 8004eae:	b2da      	uxtb	r2, r3
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004eba:	2b01      	cmp	r3, #1
 8004ebc:	d101      	bne.n	8004ec2 <HAL_PCD_EP_SetStall+0x82>
 8004ebe:	2302      	movs	r3, #2
 8004ec0:	e01e      	b.n	8004f00 <HAL_PCD_EP_SetStall+0xc0>
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	2201      	movs	r2, #1
 8004ec6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	68f9      	ldr	r1, [r7, #12]
 8004ed0:	4618      	mov	r0, r3
 8004ed2:	f002 fae9 	bl	80074a8 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004ed6:	78fb      	ldrb	r3, [r7, #3]
 8004ed8:	f003 030f 	and.w	r3, r3, #15
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d10a      	bne.n	8004ef6 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	6818      	ldr	r0, [r3, #0]
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	691b      	ldr	r3, [r3, #16]
 8004ee8:	b2d9      	uxtb	r1, r3
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004ef0:	461a      	mov	r2, r3
 8004ef2:	f002 fccd 	bl	8007890 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	2200      	movs	r2, #0
 8004efa:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8004efe:	2300      	movs	r3, #0
}
 8004f00:	4618      	mov	r0, r3
 8004f02:	3710      	adds	r7, #16
 8004f04:	46bd      	mov	sp, r7
 8004f06:	bd80      	pop	{r7, pc}

08004f08 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004f08:	b580      	push	{r7, lr}
 8004f0a:	b084      	sub	sp, #16
 8004f0c:	af00      	add	r7, sp, #0
 8004f0e:	6078      	str	r0, [r7, #4]
 8004f10:	460b      	mov	r3, r1
 8004f12:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004f14:	78fb      	ldrb	r3, [r7, #3]
 8004f16:	f003 020f 	and.w	r2, r3, #15
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	685b      	ldr	r3, [r3, #4]
 8004f1e:	429a      	cmp	r2, r3
 8004f20:	d901      	bls.n	8004f26 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8004f22:	2301      	movs	r3, #1
 8004f24:	e042      	b.n	8004fac <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004f26:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	da0f      	bge.n	8004f4e <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004f2e:	78fb      	ldrb	r3, [r7, #3]
 8004f30:	f003 020f 	and.w	r2, r3, #15
 8004f34:	4613      	mov	r3, r2
 8004f36:	00db      	lsls	r3, r3, #3
 8004f38:	1a9b      	subs	r3, r3, r2
 8004f3a:	009b      	lsls	r3, r3, #2
 8004f3c:	3338      	adds	r3, #56	; 0x38
 8004f3e:	687a      	ldr	r2, [r7, #4]
 8004f40:	4413      	add	r3, r2
 8004f42:	3304      	adds	r3, #4
 8004f44:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	2201      	movs	r2, #1
 8004f4a:	705a      	strb	r2, [r3, #1]
 8004f4c:	e00f      	b.n	8004f6e <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004f4e:	78fb      	ldrb	r3, [r7, #3]
 8004f50:	f003 020f 	and.w	r2, r3, #15
 8004f54:	4613      	mov	r3, r2
 8004f56:	00db      	lsls	r3, r3, #3
 8004f58:	1a9b      	subs	r3, r3, r2
 8004f5a:	009b      	lsls	r3, r3, #2
 8004f5c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004f60:	687a      	ldr	r2, [r7, #4]
 8004f62:	4413      	add	r3, r2
 8004f64:	3304      	adds	r3, #4
 8004f66:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	2200      	movs	r2, #0
 8004f6c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	2200      	movs	r2, #0
 8004f72:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004f74:	78fb      	ldrb	r3, [r7, #3]
 8004f76:	f003 030f 	and.w	r3, r3, #15
 8004f7a:	b2da      	uxtb	r2, r3
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004f86:	2b01      	cmp	r3, #1
 8004f88:	d101      	bne.n	8004f8e <HAL_PCD_EP_ClrStall+0x86>
 8004f8a:	2302      	movs	r3, #2
 8004f8c:	e00e      	b.n	8004fac <HAL_PCD_EP_ClrStall+0xa4>
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	2201      	movs	r2, #1
 8004f92:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	68f9      	ldr	r1, [r7, #12]
 8004f9c:	4618      	mov	r0, r3
 8004f9e:	f002 faf0 	bl	8007582 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	2200      	movs	r2, #0
 8004fa6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8004faa:	2300      	movs	r3, #0
}
 8004fac:	4618      	mov	r0, r3
 8004fae:	3710      	adds	r7, #16
 8004fb0:	46bd      	mov	sp, r7
 8004fb2:	bd80      	pop	{r7, pc}

08004fb4 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004fb4:	b580      	push	{r7, lr}
 8004fb6:	b08a      	sub	sp, #40	; 0x28
 8004fb8:	af02      	add	r7, sp, #8
 8004fba:	6078      	str	r0, [r7, #4]
 8004fbc:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004fc4:	697b      	ldr	r3, [r7, #20]
 8004fc6:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8004fc8:	683a      	ldr	r2, [r7, #0]
 8004fca:	4613      	mov	r3, r2
 8004fcc:	00db      	lsls	r3, r3, #3
 8004fce:	1a9b      	subs	r3, r3, r2
 8004fd0:	009b      	lsls	r3, r3, #2
 8004fd2:	3338      	adds	r3, #56	; 0x38
 8004fd4:	687a      	ldr	r2, [r7, #4]
 8004fd6:	4413      	add	r3, r2
 8004fd8:	3304      	adds	r3, #4
 8004fda:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	699a      	ldr	r2, [r3, #24]
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	695b      	ldr	r3, [r3, #20]
 8004fe4:	429a      	cmp	r2, r3
 8004fe6:	d901      	bls.n	8004fec <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8004fe8:	2301      	movs	r3, #1
 8004fea:	e06c      	b.n	80050c6 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	695a      	ldr	r2, [r3, #20]
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	699b      	ldr	r3, [r3, #24]
 8004ff4:	1ad3      	subs	r3, r2, r3
 8004ff6:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	689b      	ldr	r3, [r3, #8]
 8004ffc:	69fa      	ldr	r2, [r7, #28]
 8004ffe:	429a      	cmp	r2, r3
 8005000:	d902      	bls.n	8005008 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	689b      	ldr	r3, [r3, #8]
 8005006:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8005008:	69fb      	ldr	r3, [r7, #28]
 800500a:	3303      	adds	r3, #3
 800500c:	089b      	lsrs	r3, r3, #2
 800500e:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005010:	e02b      	b.n	800506a <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	695a      	ldr	r2, [r3, #20]
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	699b      	ldr	r3, [r3, #24]
 800501a:	1ad3      	subs	r3, r2, r3
 800501c:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	689b      	ldr	r3, [r3, #8]
 8005022:	69fa      	ldr	r2, [r7, #28]
 8005024:	429a      	cmp	r2, r3
 8005026:	d902      	bls.n	800502e <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	689b      	ldr	r3, [r3, #8]
 800502c:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800502e:	69fb      	ldr	r3, [r7, #28]
 8005030:	3303      	adds	r3, #3
 8005032:	089b      	lsrs	r3, r3, #2
 8005034:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	68d9      	ldr	r1, [r3, #12]
 800503a:	683b      	ldr	r3, [r7, #0]
 800503c:	b2da      	uxtb	r2, r3
 800503e:	69fb      	ldr	r3, [r7, #28]
 8005040:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8005046:	b2db      	uxtb	r3, r3
 8005048:	9300      	str	r3, [sp, #0]
 800504a:	4603      	mov	r3, r0
 800504c:	6978      	ldr	r0, [r7, #20]
 800504e:	f002 f997 	bl	8007380 <USB_WritePacket>

    ep->xfer_buff  += len;
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	68da      	ldr	r2, [r3, #12]
 8005056:	69fb      	ldr	r3, [r7, #28]
 8005058:	441a      	add	r2, r3
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	699a      	ldr	r2, [r3, #24]
 8005062:	69fb      	ldr	r3, [r7, #28]
 8005064:	441a      	add	r2, r3
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800506a:	683b      	ldr	r3, [r7, #0]
 800506c:	015a      	lsls	r2, r3, #5
 800506e:	693b      	ldr	r3, [r7, #16]
 8005070:	4413      	add	r3, r2
 8005072:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005076:	699b      	ldr	r3, [r3, #24]
 8005078:	b29b      	uxth	r3, r3
 800507a:	69ba      	ldr	r2, [r7, #24]
 800507c:	429a      	cmp	r2, r3
 800507e:	d809      	bhi.n	8005094 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	699a      	ldr	r2, [r3, #24]
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005088:	429a      	cmp	r2, r3
 800508a:	d203      	bcs.n	8005094 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	695b      	ldr	r3, [r3, #20]
 8005090:	2b00      	cmp	r3, #0
 8005092:	d1be      	bne.n	8005012 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	695a      	ldr	r2, [r3, #20]
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	699b      	ldr	r3, [r3, #24]
 800509c:	429a      	cmp	r2, r3
 800509e:	d811      	bhi.n	80050c4 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80050a0:	683b      	ldr	r3, [r7, #0]
 80050a2:	f003 030f 	and.w	r3, r3, #15
 80050a6:	2201      	movs	r2, #1
 80050a8:	fa02 f303 	lsl.w	r3, r2, r3
 80050ac:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80050ae:	693b      	ldr	r3, [r7, #16]
 80050b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050b4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80050b6:	68bb      	ldr	r3, [r7, #8]
 80050b8:	43db      	mvns	r3, r3
 80050ba:	6939      	ldr	r1, [r7, #16]
 80050bc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80050c0:	4013      	ands	r3, r2
 80050c2:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80050c4:	2300      	movs	r3, #0
}
 80050c6:	4618      	mov	r0, r3
 80050c8:	3720      	adds	r7, #32
 80050ca:	46bd      	mov	sp, r7
 80050cc:	bd80      	pop	{r7, pc}
	...

080050d0 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80050d0:	b580      	push	{r7, lr}
 80050d2:	b086      	sub	sp, #24
 80050d4:	af00      	add	r7, sp, #0
 80050d6:	6078      	str	r0, [r7, #4]
 80050d8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80050e0:	697b      	ldr	r3, [r7, #20]
 80050e2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80050e4:	697b      	ldr	r3, [r7, #20]
 80050e6:	333c      	adds	r3, #60	; 0x3c
 80050e8:	3304      	adds	r3, #4
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80050ee:	683b      	ldr	r3, [r7, #0]
 80050f0:	015a      	lsls	r2, r3, #5
 80050f2:	693b      	ldr	r3, [r7, #16]
 80050f4:	4413      	add	r3, r2
 80050f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050fa:	689b      	ldr	r3, [r3, #8]
 80050fc:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	691b      	ldr	r3, [r3, #16]
 8005102:	2b01      	cmp	r3, #1
 8005104:	f040 80a0 	bne.w	8005248 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8005108:	68bb      	ldr	r3, [r7, #8]
 800510a:	f003 0308 	and.w	r3, r3, #8
 800510e:	2b00      	cmp	r3, #0
 8005110:	d015      	beq.n	800513e <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	4a72      	ldr	r2, [pc, #456]	; (80052e0 <PCD_EP_OutXfrComplete_int+0x210>)
 8005116:	4293      	cmp	r3, r2
 8005118:	f240 80dd 	bls.w	80052d6 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800511c:	68bb      	ldr	r3, [r7, #8]
 800511e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005122:	2b00      	cmp	r3, #0
 8005124:	f000 80d7 	beq.w	80052d6 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005128:	683b      	ldr	r3, [r7, #0]
 800512a:	015a      	lsls	r2, r3, #5
 800512c:	693b      	ldr	r3, [r7, #16]
 800512e:	4413      	add	r3, r2
 8005130:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005134:	461a      	mov	r2, r3
 8005136:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800513a:	6093      	str	r3, [r2, #8]
 800513c:	e0cb      	b.n	80052d6 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800513e:	68bb      	ldr	r3, [r7, #8]
 8005140:	f003 0320 	and.w	r3, r3, #32
 8005144:	2b00      	cmp	r3, #0
 8005146:	d009      	beq.n	800515c <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005148:	683b      	ldr	r3, [r7, #0]
 800514a:	015a      	lsls	r2, r3, #5
 800514c:	693b      	ldr	r3, [r7, #16]
 800514e:	4413      	add	r3, r2
 8005150:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005154:	461a      	mov	r2, r3
 8005156:	2320      	movs	r3, #32
 8005158:	6093      	str	r3, [r2, #8]
 800515a:	e0bc      	b.n	80052d6 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800515c:	68bb      	ldr	r3, [r7, #8]
 800515e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005162:	2b00      	cmp	r3, #0
 8005164:	f040 80b7 	bne.w	80052d6 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	4a5d      	ldr	r2, [pc, #372]	; (80052e0 <PCD_EP_OutXfrComplete_int+0x210>)
 800516c:	4293      	cmp	r3, r2
 800516e:	d90f      	bls.n	8005190 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005170:	68bb      	ldr	r3, [r7, #8]
 8005172:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005176:	2b00      	cmp	r3, #0
 8005178:	d00a      	beq.n	8005190 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800517a:	683b      	ldr	r3, [r7, #0]
 800517c:	015a      	lsls	r2, r3, #5
 800517e:	693b      	ldr	r3, [r7, #16]
 8005180:	4413      	add	r3, r2
 8005182:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005186:	461a      	mov	r2, r3
 8005188:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800518c:	6093      	str	r3, [r2, #8]
 800518e:	e0a2      	b.n	80052d6 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8005190:	6879      	ldr	r1, [r7, #4]
 8005192:	683a      	ldr	r2, [r7, #0]
 8005194:	4613      	mov	r3, r2
 8005196:	00db      	lsls	r3, r3, #3
 8005198:	1a9b      	subs	r3, r3, r2
 800519a:	009b      	lsls	r3, r3, #2
 800519c:	440b      	add	r3, r1
 800519e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80051a2:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80051a4:	683b      	ldr	r3, [r7, #0]
 80051a6:	0159      	lsls	r1, r3, #5
 80051a8:	693b      	ldr	r3, [r7, #16]
 80051aa:	440b      	add	r3, r1
 80051ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051b0:	691b      	ldr	r3, [r3, #16]
 80051b2:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 80051b6:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 80051b8:	6878      	ldr	r0, [r7, #4]
 80051ba:	683a      	ldr	r2, [r7, #0]
 80051bc:	4613      	mov	r3, r2
 80051be:	00db      	lsls	r3, r3, #3
 80051c0:	1a9b      	subs	r3, r3, r2
 80051c2:	009b      	lsls	r3, r3, #2
 80051c4:	4403      	add	r3, r0
 80051c6:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80051ca:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 80051cc:	6879      	ldr	r1, [r7, #4]
 80051ce:	683a      	ldr	r2, [r7, #0]
 80051d0:	4613      	mov	r3, r2
 80051d2:	00db      	lsls	r3, r3, #3
 80051d4:	1a9b      	subs	r3, r3, r2
 80051d6:	009b      	lsls	r3, r3, #2
 80051d8:	440b      	add	r3, r1
 80051da:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80051de:	6819      	ldr	r1, [r3, #0]
 80051e0:	6878      	ldr	r0, [r7, #4]
 80051e2:	683a      	ldr	r2, [r7, #0]
 80051e4:	4613      	mov	r3, r2
 80051e6:	00db      	lsls	r3, r3, #3
 80051e8:	1a9b      	subs	r3, r3, r2
 80051ea:	009b      	lsls	r3, r3, #2
 80051ec:	4403      	add	r3, r0
 80051ee:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	4419      	add	r1, r3
 80051f6:	6878      	ldr	r0, [r7, #4]
 80051f8:	683a      	ldr	r2, [r7, #0]
 80051fa:	4613      	mov	r3, r2
 80051fc:	00db      	lsls	r3, r3, #3
 80051fe:	1a9b      	subs	r3, r3, r2
 8005200:	009b      	lsls	r3, r3, #2
 8005202:	4403      	add	r3, r0
 8005204:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8005208:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800520a:	683b      	ldr	r3, [r7, #0]
 800520c:	2b00      	cmp	r3, #0
 800520e:	d114      	bne.n	800523a <PCD_EP_OutXfrComplete_int+0x16a>
 8005210:	6879      	ldr	r1, [r7, #4]
 8005212:	683a      	ldr	r2, [r7, #0]
 8005214:	4613      	mov	r3, r2
 8005216:	00db      	lsls	r3, r3, #3
 8005218:	1a9b      	subs	r3, r3, r2
 800521a:	009b      	lsls	r3, r3, #2
 800521c:	440b      	add	r3, r1
 800521e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	2b00      	cmp	r3, #0
 8005226:	d108      	bne.n	800523a <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	6818      	ldr	r0, [r3, #0]
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8005232:	461a      	mov	r2, r3
 8005234:	2101      	movs	r1, #1
 8005236:	f002 fb2b 	bl	8007890 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800523a:	683b      	ldr	r3, [r7, #0]
 800523c:	b2db      	uxtb	r3, r3
 800523e:	4619      	mov	r1, r3
 8005240:	6878      	ldr	r0, [r7, #4]
 8005242:	f004 f9c9 	bl	80095d8 <HAL_PCD_DataOutStageCallback>
 8005246:	e046      	b.n	80052d6 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	4a26      	ldr	r2, [pc, #152]	; (80052e4 <PCD_EP_OutXfrComplete_int+0x214>)
 800524c:	4293      	cmp	r3, r2
 800524e:	d124      	bne.n	800529a <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8005250:	68bb      	ldr	r3, [r7, #8]
 8005252:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005256:	2b00      	cmp	r3, #0
 8005258:	d00a      	beq.n	8005270 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800525a:	683b      	ldr	r3, [r7, #0]
 800525c:	015a      	lsls	r2, r3, #5
 800525e:	693b      	ldr	r3, [r7, #16]
 8005260:	4413      	add	r3, r2
 8005262:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005266:	461a      	mov	r2, r3
 8005268:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800526c:	6093      	str	r3, [r2, #8]
 800526e:	e032      	b.n	80052d6 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8005270:	68bb      	ldr	r3, [r7, #8]
 8005272:	f003 0320 	and.w	r3, r3, #32
 8005276:	2b00      	cmp	r3, #0
 8005278:	d008      	beq.n	800528c <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800527a:	683b      	ldr	r3, [r7, #0]
 800527c:	015a      	lsls	r2, r3, #5
 800527e:	693b      	ldr	r3, [r7, #16]
 8005280:	4413      	add	r3, r2
 8005282:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005286:	461a      	mov	r2, r3
 8005288:	2320      	movs	r3, #32
 800528a:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800528c:	683b      	ldr	r3, [r7, #0]
 800528e:	b2db      	uxtb	r3, r3
 8005290:	4619      	mov	r1, r3
 8005292:	6878      	ldr	r0, [r7, #4]
 8005294:	f004 f9a0 	bl	80095d8 <HAL_PCD_DataOutStageCallback>
 8005298:	e01d      	b.n	80052d6 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800529a:	683b      	ldr	r3, [r7, #0]
 800529c:	2b00      	cmp	r3, #0
 800529e:	d114      	bne.n	80052ca <PCD_EP_OutXfrComplete_int+0x1fa>
 80052a0:	6879      	ldr	r1, [r7, #4]
 80052a2:	683a      	ldr	r2, [r7, #0]
 80052a4:	4613      	mov	r3, r2
 80052a6:	00db      	lsls	r3, r3, #3
 80052a8:	1a9b      	subs	r3, r3, r2
 80052aa:	009b      	lsls	r3, r3, #2
 80052ac:	440b      	add	r3, r1
 80052ae:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d108      	bne.n	80052ca <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	6818      	ldr	r0, [r3, #0]
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80052c2:	461a      	mov	r2, r3
 80052c4:	2100      	movs	r1, #0
 80052c6:	f002 fae3 	bl	8007890 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80052ca:	683b      	ldr	r3, [r7, #0]
 80052cc:	b2db      	uxtb	r3, r3
 80052ce:	4619      	mov	r1, r3
 80052d0:	6878      	ldr	r0, [r7, #4]
 80052d2:	f004 f981 	bl	80095d8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80052d6:	2300      	movs	r3, #0
}
 80052d8:	4618      	mov	r0, r3
 80052da:	3718      	adds	r7, #24
 80052dc:	46bd      	mov	sp, r7
 80052de:	bd80      	pop	{r7, pc}
 80052e0:	4f54300a 	.word	0x4f54300a
 80052e4:	4f54310a 	.word	0x4f54310a

080052e8 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80052e8:	b580      	push	{r7, lr}
 80052ea:	b086      	sub	sp, #24
 80052ec:	af00      	add	r7, sp, #0
 80052ee:	6078      	str	r0, [r7, #4]
 80052f0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80052f8:	697b      	ldr	r3, [r7, #20]
 80052fa:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80052fc:	697b      	ldr	r3, [r7, #20]
 80052fe:	333c      	adds	r3, #60	; 0x3c
 8005300:	3304      	adds	r3, #4
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8005306:	683b      	ldr	r3, [r7, #0]
 8005308:	015a      	lsls	r2, r3, #5
 800530a:	693b      	ldr	r3, [r7, #16]
 800530c:	4413      	add	r3, r2
 800530e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005312:	689b      	ldr	r3, [r3, #8]
 8005314:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	4a15      	ldr	r2, [pc, #84]	; (8005370 <PCD_EP_OutSetupPacket_int+0x88>)
 800531a:	4293      	cmp	r3, r2
 800531c:	d90e      	bls.n	800533c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800531e:	68bb      	ldr	r3, [r7, #8]
 8005320:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005324:	2b00      	cmp	r3, #0
 8005326:	d009      	beq.n	800533c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005328:	683b      	ldr	r3, [r7, #0]
 800532a:	015a      	lsls	r2, r3, #5
 800532c:	693b      	ldr	r3, [r7, #16]
 800532e:	4413      	add	r3, r2
 8005330:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005334:	461a      	mov	r2, r3
 8005336:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800533a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800533c:	6878      	ldr	r0, [r7, #4]
 800533e:	f004 f939 	bl	80095b4 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	4a0a      	ldr	r2, [pc, #40]	; (8005370 <PCD_EP_OutSetupPacket_int+0x88>)
 8005346:	4293      	cmp	r3, r2
 8005348:	d90c      	bls.n	8005364 <PCD_EP_OutSetupPacket_int+0x7c>
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	691b      	ldr	r3, [r3, #16]
 800534e:	2b01      	cmp	r3, #1
 8005350:	d108      	bne.n	8005364 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	6818      	ldr	r0, [r3, #0]
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800535c:	461a      	mov	r2, r3
 800535e:	2101      	movs	r1, #1
 8005360:	f002 fa96 	bl	8007890 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8005364:	2300      	movs	r3, #0
}
 8005366:	4618      	mov	r0, r3
 8005368:	3718      	adds	r7, #24
 800536a:	46bd      	mov	sp, r7
 800536c:	bd80      	pop	{r7, pc}
 800536e:	bf00      	nop
 8005370:	4f54300a 	.word	0x4f54300a

08005374 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8005374:	b480      	push	{r7}
 8005376:	b085      	sub	sp, #20
 8005378:	af00      	add	r7, sp, #0
 800537a:	6078      	str	r0, [r7, #4]
 800537c:	460b      	mov	r3, r1
 800537e:	70fb      	strb	r3, [r7, #3]
 8005380:	4613      	mov	r3, r2
 8005382:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800538a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800538c:	78fb      	ldrb	r3, [r7, #3]
 800538e:	2b00      	cmp	r3, #0
 8005390:	d107      	bne.n	80053a2 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8005392:	883b      	ldrh	r3, [r7, #0]
 8005394:	0419      	lsls	r1, r3, #16
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	68ba      	ldr	r2, [r7, #8]
 800539c:	430a      	orrs	r2, r1
 800539e:	629a      	str	r2, [r3, #40]	; 0x28
 80053a0:	e028      	b.n	80053f4 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053a8:	0c1b      	lsrs	r3, r3, #16
 80053aa:	68ba      	ldr	r2, [r7, #8]
 80053ac:	4413      	add	r3, r2
 80053ae:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80053b0:	2300      	movs	r3, #0
 80053b2:	73fb      	strb	r3, [r7, #15]
 80053b4:	e00d      	b.n	80053d2 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681a      	ldr	r2, [r3, #0]
 80053ba:	7bfb      	ldrb	r3, [r7, #15]
 80053bc:	3340      	adds	r3, #64	; 0x40
 80053be:	009b      	lsls	r3, r3, #2
 80053c0:	4413      	add	r3, r2
 80053c2:	685b      	ldr	r3, [r3, #4]
 80053c4:	0c1b      	lsrs	r3, r3, #16
 80053c6:	68ba      	ldr	r2, [r7, #8]
 80053c8:	4413      	add	r3, r2
 80053ca:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80053cc:	7bfb      	ldrb	r3, [r7, #15]
 80053ce:	3301      	adds	r3, #1
 80053d0:	73fb      	strb	r3, [r7, #15]
 80053d2:	7bfa      	ldrb	r2, [r7, #15]
 80053d4:	78fb      	ldrb	r3, [r7, #3]
 80053d6:	3b01      	subs	r3, #1
 80053d8:	429a      	cmp	r2, r3
 80053da:	d3ec      	bcc.n	80053b6 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80053dc:	883b      	ldrh	r3, [r7, #0]
 80053de:	0418      	lsls	r0, r3, #16
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	6819      	ldr	r1, [r3, #0]
 80053e4:	78fb      	ldrb	r3, [r7, #3]
 80053e6:	3b01      	subs	r3, #1
 80053e8:	68ba      	ldr	r2, [r7, #8]
 80053ea:	4302      	orrs	r2, r0
 80053ec:	3340      	adds	r3, #64	; 0x40
 80053ee:	009b      	lsls	r3, r3, #2
 80053f0:	440b      	add	r3, r1
 80053f2:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80053f4:	2300      	movs	r3, #0
}
 80053f6:	4618      	mov	r0, r3
 80053f8:	3714      	adds	r7, #20
 80053fa:	46bd      	mov	sp, r7
 80053fc:	bc80      	pop	{r7}
 80053fe:	4770      	bx	lr

08005400 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8005400:	b480      	push	{r7}
 8005402:	b083      	sub	sp, #12
 8005404:	af00      	add	r7, sp, #0
 8005406:	6078      	str	r0, [r7, #4]
 8005408:	460b      	mov	r3, r1
 800540a:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	887a      	ldrh	r2, [r7, #2]
 8005412:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8005414:	2300      	movs	r3, #0
}
 8005416:	4618      	mov	r0, r3
 8005418:	370c      	adds	r7, #12
 800541a:	46bd      	mov	sp, r7
 800541c:	bc80      	pop	{r7}
 800541e:	4770      	bx	lr

08005420 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005420:	b580      	push	{r7, lr}
 8005422:	b08a      	sub	sp, #40	; 0x28
 8005424:	af00      	add	r7, sp, #0
 8005426:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	2b00      	cmp	r3, #0
 800542c:	d101      	bne.n	8005432 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800542e:	2301      	movs	r3, #1
 8005430:	e237      	b.n	80058a2 <HAL_RCC_OscConfig+0x482>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	f003 0301 	and.w	r3, r3, #1
 800543a:	2b00      	cmp	r3, #0
 800543c:	d050      	beq.n	80054e0 <HAL_RCC_OscConfig+0xc0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800543e:	4ba3      	ldr	r3, [pc, #652]	; (80056cc <HAL_RCC_OscConfig+0x2ac>)
 8005440:	689b      	ldr	r3, [r3, #8]
 8005442:	f003 030c 	and.w	r3, r3, #12
 8005446:	2b04      	cmp	r3, #4
 8005448:	d00c      	beq.n	8005464 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800544a:	4ba0      	ldr	r3, [pc, #640]	; (80056cc <HAL_RCC_OscConfig+0x2ac>)
 800544c:	689b      	ldr	r3, [r3, #8]
 800544e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005452:	2b08      	cmp	r3, #8
 8005454:	d112      	bne.n	800547c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005456:	4b9d      	ldr	r3, [pc, #628]	; (80056cc <HAL_RCC_OscConfig+0x2ac>)
 8005458:	685b      	ldr	r3, [r3, #4]
 800545a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800545e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005462:	d10b      	bne.n	800547c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005464:	4b99      	ldr	r3, [pc, #612]	; (80056cc <HAL_RCC_OscConfig+0x2ac>)
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800546c:	2b00      	cmp	r3, #0
 800546e:	d036      	beq.n	80054de <HAL_RCC_OscConfig+0xbe>
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	685b      	ldr	r3, [r3, #4]
 8005474:	2b00      	cmp	r3, #0
 8005476:	d132      	bne.n	80054de <HAL_RCC_OscConfig+0xbe>
      {
        return HAL_ERROR;
 8005478:	2301      	movs	r3, #1
 800547a:	e212      	b.n	80058a2 <HAL_RCC_OscConfig+0x482>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	685a      	ldr	r2, [r3, #4]
 8005480:	4b93      	ldr	r3, [pc, #588]	; (80056d0 <HAL_RCC_OscConfig+0x2b0>)
 8005482:	b2d2      	uxtb	r2, r2
 8005484:	701a      	strb	r2, [r3, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	685b      	ldr	r3, [r3, #4]
 800548a:	2b00      	cmp	r3, #0
 800548c:	d013      	beq.n	80054b6 <HAL_RCC_OscConfig+0x96>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800548e:	f7fd f89f 	bl	80025d0 <HAL_GetTick>
 8005492:	6238      	str	r0, [r7, #32]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005494:	e008      	b.n	80054a8 <HAL_RCC_OscConfig+0x88>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005496:	f7fd f89b 	bl	80025d0 <HAL_GetTick>
 800549a:	4602      	mov	r2, r0
 800549c:	6a3b      	ldr	r3, [r7, #32]
 800549e:	1ad3      	subs	r3, r2, r3
 80054a0:	2b64      	cmp	r3, #100	; 0x64
 80054a2:	d901      	bls.n	80054a8 <HAL_RCC_OscConfig+0x88>
          {
            return HAL_TIMEOUT;
 80054a4:	2303      	movs	r3, #3
 80054a6:	e1fc      	b.n	80058a2 <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80054a8:	4b88      	ldr	r3, [pc, #544]	; (80056cc <HAL_RCC_OscConfig+0x2ac>)
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d0f0      	beq.n	8005496 <HAL_RCC_OscConfig+0x76>
 80054b4:	e014      	b.n	80054e0 <HAL_RCC_OscConfig+0xc0>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80054b6:	f7fd f88b 	bl	80025d0 <HAL_GetTick>
 80054ba:	6238      	str	r0, [r7, #32]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80054bc:	e008      	b.n	80054d0 <HAL_RCC_OscConfig+0xb0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80054be:	f7fd f887 	bl	80025d0 <HAL_GetTick>
 80054c2:	4602      	mov	r2, r0
 80054c4:	6a3b      	ldr	r3, [r7, #32]
 80054c6:	1ad3      	subs	r3, r2, r3
 80054c8:	2b64      	cmp	r3, #100	; 0x64
 80054ca:	d901      	bls.n	80054d0 <HAL_RCC_OscConfig+0xb0>
          {
            return HAL_TIMEOUT;
 80054cc:	2303      	movs	r3, #3
 80054ce:	e1e8      	b.n	80058a2 <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80054d0:	4b7e      	ldr	r3, [pc, #504]	; (80056cc <HAL_RCC_OscConfig+0x2ac>)
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d1f0      	bne.n	80054be <HAL_RCC_OscConfig+0x9e>
 80054dc:	e000      	b.n	80054e0 <HAL_RCC_OscConfig+0xc0>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80054de:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	f003 0302 	and.w	r3, r3, #2
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d077      	beq.n	80055dc <HAL_RCC_OscConfig+0x1bc>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80054ec:	4b77      	ldr	r3, [pc, #476]	; (80056cc <HAL_RCC_OscConfig+0x2ac>)
 80054ee:	689b      	ldr	r3, [r3, #8]
 80054f0:	f003 030c 	and.w	r3, r3, #12
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d00b      	beq.n	8005510 <HAL_RCC_OscConfig+0xf0>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80054f8:	4b74      	ldr	r3, [pc, #464]	; (80056cc <HAL_RCC_OscConfig+0x2ac>)
 80054fa:	689b      	ldr	r3, [r3, #8]
 80054fc:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005500:	2b08      	cmp	r3, #8
 8005502:	d126      	bne.n	8005552 <HAL_RCC_OscConfig+0x132>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005504:	4b71      	ldr	r3, [pc, #452]	; (80056cc <HAL_RCC_OscConfig+0x2ac>)
 8005506:	685b      	ldr	r3, [r3, #4]
 8005508:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800550c:	2b00      	cmp	r3, #0
 800550e:	d120      	bne.n	8005552 <HAL_RCC_OscConfig+0x132>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005510:	4b6e      	ldr	r3, [pc, #440]	; (80056cc <HAL_RCC_OscConfig+0x2ac>)
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	f003 0302 	and.w	r3, r3, #2
 8005518:	2b00      	cmp	r3, #0
 800551a:	d005      	beq.n	8005528 <HAL_RCC_OscConfig+0x108>
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	68db      	ldr	r3, [r3, #12]
 8005520:	2b01      	cmp	r3, #1
 8005522:	d001      	beq.n	8005528 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005524:	2301      	movs	r3, #1
 8005526:	e1bc      	b.n	80058a2 <HAL_RCC_OscConfig+0x482>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005528:	4b68      	ldr	r3, [pc, #416]	; (80056cc <HAL_RCC_OscConfig+0x2ac>)
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	691b      	ldr	r3, [r3, #16]
 8005534:	21f8      	movs	r1, #248	; 0xf8
 8005536:	61b9      	str	r1, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005538:	69b9      	ldr	r1, [r7, #24]
 800553a:	fa91 f1a1 	rbit	r1, r1
 800553e:	6179      	str	r1, [r7, #20]
  return result;
 8005540:	6979      	ldr	r1, [r7, #20]
 8005542:	fab1 f181 	clz	r1, r1
 8005546:	b2c9      	uxtb	r1, r1
 8005548:	408b      	lsls	r3, r1
 800554a:	4960      	ldr	r1, [pc, #384]	; (80056cc <HAL_RCC_OscConfig+0x2ac>)
 800554c:	4313      	orrs	r3, r2
 800554e:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005550:	e044      	b.n	80055dc <HAL_RCC_OscConfig+0x1bc>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	68db      	ldr	r3, [r3, #12]
 8005556:	2b00      	cmp	r3, #0
 8005558:	d02a      	beq.n	80055b0 <HAL_RCC_OscConfig+0x190>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800555a:	4b5e      	ldr	r3, [pc, #376]	; (80056d4 <HAL_RCC_OscConfig+0x2b4>)
 800555c:	2201      	movs	r2, #1
 800555e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005560:	f7fd f836 	bl	80025d0 <HAL_GetTick>
 8005564:	6238      	str	r0, [r7, #32]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005566:	e008      	b.n	800557a <HAL_RCC_OscConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005568:	f7fd f832 	bl	80025d0 <HAL_GetTick>
 800556c:	4602      	mov	r2, r0
 800556e:	6a3b      	ldr	r3, [r7, #32]
 8005570:	1ad3      	subs	r3, r2, r3
 8005572:	2b02      	cmp	r3, #2
 8005574:	d901      	bls.n	800557a <HAL_RCC_OscConfig+0x15a>
          {
            return HAL_TIMEOUT;
 8005576:	2303      	movs	r3, #3
 8005578:	e193      	b.n	80058a2 <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800557a:	4b54      	ldr	r3, [pc, #336]	; (80056cc <HAL_RCC_OscConfig+0x2ac>)
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	f003 0302 	and.w	r3, r3, #2
 8005582:	2b00      	cmp	r3, #0
 8005584:	d0f0      	beq.n	8005568 <HAL_RCC_OscConfig+0x148>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005586:	4b51      	ldr	r3, [pc, #324]	; (80056cc <HAL_RCC_OscConfig+0x2ac>)
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	691b      	ldr	r3, [r3, #16]
 8005592:	21f8      	movs	r1, #248	; 0xf8
 8005594:	6139      	str	r1, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005596:	6939      	ldr	r1, [r7, #16]
 8005598:	fa91 f1a1 	rbit	r1, r1
 800559c:	60f9      	str	r1, [r7, #12]
  return result;
 800559e:	68f9      	ldr	r1, [r7, #12]
 80055a0:	fab1 f181 	clz	r1, r1
 80055a4:	b2c9      	uxtb	r1, r1
 80055a6:	408b      	lsls	r3, r1
 80055a8:	4948      	ldr	r1, [pc, #288]	; (80056cc <HAL_RCC_OscConfig+0x2ac>)
 80055aa:	4313      	orrs	r3, r2
 80055ac:	600b      	str	r3, [r1, #0]
 80055ae:	e015      	b.n	80055dc <HAL_RCC_OscConfig+0x1bc>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80055b0:	4b48      	ldr	r3, [pc, #288]	; (80056d4 <HAL_RCC_OscConfig+0x2b4>)
 80055b2:	2200      	movs	r2, #0
 80055b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80055b6:	f7fd f80b 	bl	80025d0 <HAL_GetTick>
 80055ba:	6238      	str	r0, [r7, #32]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80055bc:	e008      	b.n	80055d0 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80055be:	f7fd f807 	bl	80025d0 <HAL_GetTick>
 80055c2:	4602      	mov	r2, r0
 80055c4:	6a3b      	ldr	r3, [r7, #32]
 80055c6:	1ad3      	subs	r3, r2, r3
 80055c8:	2b02      	cmp	r3, #2
 80055ca:	d901      	bls.n	80055d0 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 80055cc:	2303      	movs	r3, #3
 80055ce:	e168      	b.n	80058a2 <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80055d0:	4b3e      	ldr	r3, [pc, #248]	; (80056cc <HAL_RCC_OscConfig+0x2ac>)
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	f003 0302 	and.w	r3, r3, #2
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d1f0      	bne.n	80055be <HAL_RCC_OscConfig+0x19e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	f003 0308 	and.w	r3, r3, #8
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d030      	beq.n	800564a <HAL_RCC_OscConfig+0x22a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	695b      	ldr	r3, [r3, #20]
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d016      	beq.n	800561e <HAL_RCC_OscConfig+0x1fe>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80055f0:	4b39      	ldr	r3, [pc, #228]	; (80056d8 <HAL_RCC_OscConfig+0x2b8>)
 80055f2:	2201      	movs	r2, #1
 80055f4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80055f6:	f7fc ffeb 	bl	80025d0 <HAL_GetTick>
 80055fa:	6238      	str	r0, [r7, #32]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80055fc:	e008      	b.n	8005610 <HAL_RCC_OscConfig+0x1f0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80055fe:	f7fc ffe7 	bl	80025d0 <HAL_GetTick>
 8005602:	4602      	mov	r2, r0
 8005604:	6a3b      	ldr	r3, [r7, #32]
 8005606:	1ad3      	subs	r3, r2, r3
 8005608:	2b02      	cmp	r3, #2
 800560a:	d901      	bls.n	8005610 <HAL_RCC_OscConfig+0x1f0>
        {
          return HAL_TIMEOUT;
 800560c:	2303      	movs	r3, #3
 800560e:	e148      	b.n	80058a2 <HAL_RCC_OscConfig+0x482>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005610:	4b2e      	ldr	r3, [pc, #184]	; (80056cc <HAL_RCC_OscConfig+0x2ac>)
 8005612:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005614:	f003 0302 	and.w	r3, r3, #2
 8005618:	2b00      	cmp	r3, #0
 800561a:	d0f0      	beq.n	80055fe <HAL_RCC_OscConfig+0x1de>
 800561c:	e015      	b.n	800564a <HAL_RCC_OscConfig+0x22a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800561e:	4b2e      	ldr	r3, [pc, #184]	; (80056d8 <HAL_RCC_OscConfig+0x2b8>)
 8005620:	2200      	movs	r2, #0
 8005622:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005624:	f7fc ffd4 	bl	80025d0 <HAL_GetTick>
 8005628:	6238      	str	r0, [r7, #32]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800562a:	e008      	b.n	800563e <HAL_RCC_OscConfig+0x21e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800562c:	f7fc ffd0 	bl	80025d0 <HAL_GetTick>
 8005630:	4602      	mov	r2, r0
 8005632:	6a3b      	ldr	r3, [r7, #32]
 8005634:	1ad3      	subs	r3, r2, r3
 8005636:	2b02      	cmp	r3, #2
 8005638:	d901      	bls.n	800563e <HAL_RCC_OscConfig+0x21e>
        {
          return HAL_TIMEOUT;
 800563a:	2303      	movs	r3, #3
 800563c:	e131      	b.n	80058a2 <HAL_RCC_OscConfig+0x482>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800563e:	4b23      	ldr	r3, [pc, #140]	; (80056cc <HAL_RCC_OscConfig+0x2ac>)
 8005640:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005642:	f003 0302 	and.w	r3, r3, #2
 8005646:	2b00      	cmp	r3, #0
 8005648:	d1f0      	bne.n	800562c <HAL_RCC_OscConfig+0x20c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	f003 0304 	and.w	r3, r3, #4
 8005652:	2b00      	cmp	r3, #0
 8005654:	f000 8088 	beq.w	8005768 <HAL_RCC_OscConfig+0x348>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005658:	2300      	movs	r3, #0
 800565a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800565e:	4b1b      	ldr	r3, [pc, #108]	; (80056cc <HAL_RCC_OscConfig+0x2ac>)
 8005660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005662:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005666:	2b00      	cmp	r3, #0
 8005668:	d110      	bne.n	800568c <HAL_RCC_OscConfig+0x26c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800566a:	2300      	movs	r3, #0
 800566c:	60bb      	str	r3, [r7, #8]
 800566e:	4b17      	ldr	r3, [pc, #92]	; (80056cc <HAL_RCC_OscConfig+0x2ac>)
 8005670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005672:	4a16      	ldr	r2, [pc, #88]	; (80056cc <HAL_RCC_OscConfig+0x2ac>)
 8005674:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005678:	6413      	str	r3, [r2, #64]	; 0x40
 800567a:	4b14      	ldr	r3, [pc, #80]	; (80056cc <HAL_RCC_OscConfig+0x2ac>)
 800567c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800567e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005682:	60bb      	str	r3, [r7, #8]
 8005684:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005686:	2301      	movs	r3, #1
 8005688:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800568c:	4b13      	ldr	r3, [pc, #76]	; (80056dc <HAL_RCC_OscConfig+0x2bc>)
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	4a12      	ldr	r2, [pc, #72]	; (80056dc <HAL_RCC_OscConfig+0x2bc>)
 8005692:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005696:	6013      	str	r3, [r2, #0]

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005698:	4b10      	ldr	r3, [pc, #64]	; (80056dc <HAL_RCC_OscConfig+0x2bc>)
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d123      	bne.n	80056ec <HAL_RCC_OscConfig+0x2cc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80056a4:	4b0d      	ldr	r3, [pc, #52]	; (80056dc <HAL_RCC_OscConfig+0x2bc>)
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	4a0c      	ldr	r2, [pc, #48]	; (80056dc <HAL_RCC_OscConfig+0x2bc>)
 80056aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80056ae:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80056b0:	f7fc ff8e 	bl	80025d0 <HAL_GetTick>
 80056b4:	6238      	str	r0, [r7, #32]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80056b6:	e013      	b.n	80056e0 <HAL_RCC_OscConfig+0x2c0>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80056b8:	f7fc ff8a 	bl	80025d0 <HAL_GetTick>
 80056bc:	4602      	mov	r2, r0
 80056be:	6a3b      	ldr	r3, [r7, #32]
 80056c0:	1ad3      	subs	r3, r2, r3
 80056c2:	2b02      	cmp	r3, #2
 80056c4:	d90c      	bls.n	80056e0 <HAL_RCC_OscConfig+0x2c0>
        {
          return HAL_TIMEOUT;
 80056c6:	2303      	movs	r3, #3
 80056c8:	e0eb      	b.n	80058a2 <HAL_RCC_OscConfig+0x482>
 80056ca:	bf00      	nop
 80056cc:	40023800 	.word	0x40023800
 80056d0:	40023802 	.word	0x40023802
 80056d4:	42470000 	.word	0x42470000
 80056d8:	42470e80 	.word	0x42470e80
 80056dc:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80056e0:	4b72      	ldr	r3, [pc, #456]	; (80058ac <HAL_RCC_OscConfig+0x48c>)
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d0e5      	beq.n	80056b8 <HAL_RCC_OscConfig+0x298>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	689a      	ldr	r2, [r3, #8]
 80056f0:	4b6f      	ldr	r3, [pc, #444]	; (80058b0 <HAL_RCC_OscConfig+0x490>)
 80056f2:	b2d2      	uxtb	r2, r2
 80056f4:	701a      	strb	r2, [r3, #0]
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	689b      	ldr	r3, [r3, #8]
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d015      	beq.n	800572a <HAL_RCC_OscConfig+0x30a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80056fe:	f7fc ff67 	bl	80025d0 <HAL_GetTick>
 8005702:	6238      	str	r0, [r7, #32]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005704:	e00a      	b.n	800571c <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005706:	f7fc ff63 	bl	80025d0 <HAL_GetTick>
 800570a:	4602      	mov	r2, r0
 800570c:	6a3b      	ldr	r3, [r7, #32]
 800570e:	1ad3      	subs	r3, r2, r3
 8005710:	f241 3288 	movw	r2, #5000	; 0x1388
 8005714:	4293      	cmp	r3, r2
 8005716:	d901      	bls.n	800571c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8005718:	2303      	movs	r3, #3
 800571a:	e0c2      	b.n	80058a2 <HAL_RCC_OscConfig+0x482>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800571c:	4b65      	ldr	r3, [pc, #404]	; (80058b4 <HAL_RCC_OscConfig+0x494>)
 800571e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005720:	f003 0302 	and.w	r3, r3, #2
 8005724:	2b00      	cmp	r3, #0
 8005726:	d0ee      	beq.n	8005706 <HAL_RCC_OscConfig+0x2e6>
 8005728:	e014      	b.n	8005754 <HAL_RCC_OscConfig+0x334>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800572a:	f7fc ff51 	bl	80025d0 <HAL_GetTick>
 800572e:	6238      	str	r0, [r7, #32]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005730:	e00a      	b.n	8005748 <HAL_RCC_OscConfig+0x328>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005732:	f7fc ff4d 	bl	80025d0 <HAL_GetTick>
 8005736:	4602      	mov	r2, r0
 8005738:	6a3b      	ldr	r3, [r7, #32]
 800573a:	1ad3      	subs	r3, r2, r3
 800573c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005740:	4293      	cmp	r3, r2
 8005742:	d901      	bls.n	8005748 <HAL_RCC_OscConfig+0x328>
        {
          return HAL_TIMEOUT;
 8005744:	2303      	movs	r3, #3
 8005746:	e0ac      	b.n	80058a2 <HAL_RCC_OscConfig+0x482>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005748:	4b5a      	ldr	r3, [pc, #360]	; (80058b4 <HAL_RCC_OscConfig+0x494>)
 800574a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800574c:	f003 0302 	and.w	r3, r3, #2
 8005750:	2b00      	cmp	r3, #0
 8005752:	d1ee      	bne.n	8005732 <HAL_RCC_OscConfig+0x312>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005754:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005758:	2b01      	cmp	r3, #1
 800575a:	d105      	bne.n	8005768 <HAL_RCC_OscConfig+0x348>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800575c:	4b55      	ldr	r3, [pc, #340]	; (80058b4 <HAL_RCC_OscConfig+0x494>)
 800575e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005760:	4a54      	ldr	r2, [pc, #336]	; (80058b4 <HAL_RCC_OscConfig+0x494>)
 8005762:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005766:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	699b      	ldr	r3, [r3, #24]
 800576c:	2b00      	cmp	r3, #0
 800576e:	f000 8097 	beq.w	80058a0 <HAL_RCC_OscConfig+0x480>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005772:	4b50      	ldr	r3, [pc, #320]	; (80058b4 <HAL_RCC_OscConfig+0x494>)
 8005774:	689b      	ldr	r3, [r3, #8]
 8005776:	f003 030c 	and.w	r3, r3, #12
 800577a:	2b08      	cmp	r3, #8
 800577c:	d061      	beq.n	8005842 <HAL_RCC_OscConfig+0x422>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	699b      	ldr	r3, [r3, #24]
 8005782:	2b02      	cmp	r3, #2
 8005784:	d146      	bne.n	8005814 <HAL_RCC_OscConfig+0x3f4>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005786:	4b4c      	ldr	r3, [pc, #304]	; (80058b8 <HAL_RCC_OscConfig+0x498>)
 8005788:	2200      	movs	r2, #0
 800578a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800578c:	f7fc ff20 	bl	80025d0 <HAL_GetTick>
 8005790:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005792:	e008      	b.n	80057a6 <HAL_RCC_OscConfig+0x386>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005794:	f7fc ff1c 	bl	80025d0 <HAL_GetTick>
 8005798:	4602      	mov	r2, r0
 800579a:	6a3b      	ldr	r3, [r7, #32]
 800579c:	1ad3      	subs	r3, r2, r3
 800579e:	2b64      	cmp	r3, #100	; 0x64
 80057a0:	d901      	bls.n	80057a6 <HAL_RCC_OscConfig+0x386>
          {
            return HAL_TIMEOUT;
 80057a2:	2303      	movs	r3, #3
 80057a4:	e07d      	b.n	80058a2 <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80057a6:	4b43      	ldr	r3, [pc, #268]	; (80058b4 <HAL_RCC_OscConfig+0x494>)
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d1f0      	bne.n	8005794 <HAL_RCC_OscConfig+0x374>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80057b2:	4b40      	ldr	r3, [pc, #256]	; (80058b4 <HAL_RCC_OscConfig+0x494>)
 80057b4:	685a      	ldr	r2, [r3, #4]
 80057b6:	4b41      	ldr	r3, [pc, #260]	; (80058bc <HAL_RCC_OscConfig+0x49c>)
 80057b8:	4013      	ands	r3, r2
 80057ba:	687a      	ldr	r2, [r7, #4]
 80057bc:	69d1      	ldr	r1, [r2, #28]
 80057be:	687a      	ldr	r2, [r7, #4]
 80057c0:	6a12      	ldr	r2, [r2, #32]
 80057c2:	4311      	orrs	r1, r2
 80057c4:	687a      	ldr	r2, [r7, #4]
 80057c6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80057c8:	0192      	lsls	r2, r2, #6
 80057ca:	4311      	orrs	r1, r2
 80057cc:	687a      	ldr	r2, [r7, #4]
 80057ce:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80057d0:	0612      	lsls	r2, r2, #24
 80057d2:	4311      	orrs	r1, r2
 80057d4:	687a      	ldr	r2, [r7, #4]
 80057d6:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80057d8:	0852      	lsrs	r2, r2, #1
 80057da:	3a01      	subs	r2, #1
 80057dc:	0412      	lsls	r2, r2, #16
 80057de:	430a      	orrs	r2, r1
 80057e0:	4934      	ldr	r1, [pc, #208]	; (80058b4 <HAL_RCC_OscConfig+0x494>)
 80057e2:	4313      	orrs	r3, r2
 80057e4:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80057e6:	4b34      	ldr	r3, [pc, #208]	; (80058b8 <HAL_RCC_OscConfig+0x498>)
 80057e8:	2201      	movs	r2, #1
 80057ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80057ec:	f7fc fef0 	bl	80025d0 <HAL_GetTick>
 80057f0:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80057f2:	e008      	b.n	8005806 <HAL_RCC_OscConfig+0x3e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80057f4:	f7fc feec 	bl	80025d0 <HAL_GetTick>
 80057f8:	4602      	mov	r2, r0
 80057fa:	6a3b      	ldr	r3, [r7, #32]
 80057fc:	1ad3      	subs	r3, r2, r3
 80057fe:	2b64      	cmp	r3, #100	; 0x64
 8005800:	d901      	bls.n	8005806 <HAL_RCC_OscConfig+0x3e6>
          {
            return HAL_TIMEOUT;
 8005802:	2303      	movs	r3, #3
 8005804:	e04d      	b.n	80058a2 <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005806:	4b2b      	ldr	r3, [pc, #172]	; (80058b4 <HAL_RCC_OscConfig+0x494>)
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800580e:	2b00      	cmp	r3, #0
 8005810:	d0f0      	beq.n	80057f4 <HAL_RCC_OscConfig+0x3d4>
 8005812:	e045      	b.n	80058a0 <HAL_RCC_OscConfig+0x480>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005814:	4b28      	ldr	r3, [pc, #160]	; (80058b8 <HAL_RCC_OscConfig+0x498>)
 8005816:	2200      	movs	r2, #0
 8005818:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800581a:	f7fc fed9 	bl	80025d0 <HAL_GetTick>
 800581e:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005820:	e008      	b.n	8005834 <HAL_RCC_OscConfig+0x414>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005822:	f7fc fed5 	bl	80025d0 <HAL_GetTick>
 8005826:	4602      	mov	r2, r0
 8005828:	6a3b      	ldr	r3, [r7, #32]
 800582a:	1ad3      	subs	r3, r2, r3
 800582c:	2b64      	cmp	r3, #100	; 0x64
 800582e:	d901      	bls.n	8005834 <HAL_RCC_OscConfig+0x414>
          {
            return HAL_TIMEOUT;
 8005830:	2303      	movs	r3, #3
 8005832:	e036      	b.n	80058a2 <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005834:	4b1f      	ldr	r3, [pc, #124]	; (80058b4 <HAL_RCC_OscConfig+0x494>)
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800583c:	2b00      	cmp	r3, #0
 800583e:	d1f0      	bne.n	8005822 <HAL_RCC_OscConfig+0x402>
 8005840:	e02e      	b.n	80058a0 <HAL_RCC_OscConfig+0x480>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	699b      	ldr	r3, [r3, #24]
 8005846:	2b01      	cmp	r3, #1
 8005848:	d101      	bne.n	800584e <HAL_RCC_OscConfig+0x42e>
      {
        return HAL_ERROR;
 800584a:	2301      	movs	r3, #1
 800584c:	e029      	b.n	80058a2 <HAL_RCC_OscConfig+0x482>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        uint32_t pllcfgr = RCC->PLLCFGR;
 800584e:	4b19      	ldr	r3, [pc, #100]	; (80058b4 <HAL_RCC_OscConfig+0x494>)
 8005850:	685b      	ldr	r3, [r3, #4]
 8005852:	61fb      	str	r3, [r7, #28]
      
        if((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005854:	69fb      	ldr	r3, [r7, #28]
 8005856:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	69db      	ldr	r3, [r3, #28]
 800585e:	429a      	cmp	r2, r3
 8005860:	d11c      	bne.n	800589c <HAL_RCC_OscConfig+0x47c>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005862:	69fb      	ldr	r3, [r7, #28]
 8005864:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800586c:	429a      	cmp	r2, r3
 800586e:	d115      	bne.n	800589c <HAL_RCC_OscConfig+0x47c>
           ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8005870:	69fb      	ldr	r3, [r7, #28]
 8005872:	099b      	lsrs	r3, r3, #6
 8005874:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800587c:	429a      	cmp	r2, r3
 800587e:	d10d      	bne.n	800589c <HAL_RCC_OscConfig+0x47c>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005880:	69fb      	ldr	r3, [r7, #28]
 8005882:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 800588a:	429a      	cmp	r2, r3
 800588c:	d106      	bne.n	800589c <HAL_RCC_OscConfig+0x47c>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800588e:	69fb      	ldr	r3, [r7, #28]
 8005890:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005898:	429a      	cmp	r2, r3
 800589a:	d001      	beq.n	80058a0 <HAL_RCC_OscConfig+0x480>
        {
          return HAL_ERROR;
 800589c:	2301      	movs	r3, #1
 800589e:	e000      	b.n	80058a2 <HAL_RCC_OscConfig+0x482>
        }
      }
    }
  }
  return HAL_OK;
 80058a0:	2300      	movs	r3, #0
}
 80058a2:	4618      	mov	r0, r3
 80058a4:	3728      	adds	r7, #40	; 0x28
 80058a6:	46bd      	mov	sp, r7
 80058a8:	bd80      	pop	{r7, pc}
 80058aa:	bf00      	nop
 80058ac:	40007000 	.word	0x40007000
 80058b0:	40023870 	.word	0x40023870
 80058b4:	40023800 	.word	0x40023800
 80058b8:	42470060 	.word	0x42470060
 80058bc:	f0bc8000 	.word	0xf0bc8000

080058c0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80058c0:	b580      	push	{r7, lr}
 80058c2:	b086      	sub	sp, #24
 80058c4:	af00      	add	r7, sp, #0
 80058c6:	6078      	str	r0, [r7, #4]
 80058c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d101      	bne.n	80058d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80058d0:	2301      	movs	r3, #1
 80058d2:	e0d2      	b.n	8005a7a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80058d4:	4b6b      	ldr	r3, [pc, #428]	; (8005a84 <HAL_RCC_ClockConfig+0x1c4>)
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	f003 030f 	and.w	r3, r3, #15
 80058dc:	683a      	ldr	r2, [r7, #0]
 80058de:	429a      	cmp	r2, r3
 80058e0:	d90c      	bls.n	80058fc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80058e2:	4b68      	ldr	r3, [pc, #416]	; (8005a84 <HAL_RCC_ClockConfig+0x1c4>)
 80058e4:	683a      	ldr	r2, [r7, #0]
 80058e6:	b2d2      	uxtb	r2, r2
 80058e8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80058ea:	4b66      	ldr	r3, [pc, #408]	; (8005a84 <HAL_RCC_ClockConfig+0x1c4>)
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	f003 030f 	and.w	r3, r3, #15
 80058f2:	683a      	ldr	r2, [r7, #0]
 80058f4:	429a      	cmp	r2, r3
 80058f6:	d001      	beq.n	80058fc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80058f8:	2301      	movs	r3, #1
 80058fa:	e0be      	b.n	8005a7a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	f003 0302 	and.w	r3, r3, #2
 8005904:	2b00      	cmp	r3, #0
 8005906:	d020      	beq.n	800594a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	f003 0304 	and.w	r3, r3, #4
 8005910:	2b00      	cmp	r3, #0
 8005912:	d005      	beq.n	8005920 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005914:	4b5c      	ldr	r3, [pc, #368]	; (8005a88 <HAL_RCC_ClockConfig+0x1c8>)
 8005916:	689b      	ldr	r3, [r3, #8]
 8005918:	4a5b      	ldr	r2, [pc, #364]	; (8005a88 <HAL_RCC_ClockConfig+0x1c8>)
 800591a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800591e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	f003 0308 	and.w	r3, r3, #8
 8005928:	2b00      	cmp	r3, #0
 800592a:	d005      	beq.n	8005938 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3U));
 800592c:	4b56      	ldr	r3, [pc, #344]	; (8005a88 <HAL_RCC_ClockConfig+0x1c8>)
 800592e:	689b      	ldr	r3, [r3, #8]
 8005930:	4a55      	ldr	r2, [pc, #340]	; (8005a88 <HAL_RCC_ClockConfig+0x1c8>)
 8005932:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005936:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005938:	4b53      	ldr	r3, [pc, #332]	; (8005a88 <HAL_RCC_ClockConfig+0x1c8>)
 800593a:	689b      	ldr	r3, [r3, #8]
 800593c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	689b      	ldr	r3, [r3, #8]
 8005944:	4950      	ldr	r1, [pc, #320]	; (8005a88 <HAL_RCC_ClockConfig+0x1c8>)
 8005946:	4313      	orrs	r3, r2
 8005948:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	f003 0301 	and.w	r3, r3, #1
 8005952:	2b00      	cmp	r3, #0
 8005954:	d040      	beq.n	80059d8 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	685b      	ldr	r3, [r3, #4]
 800595a:	2b01      	cmp	r3, #1
 800595c:	d107      	bne.n	800596e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800595e:	4b4a      	ldr	r3, [pc, #296]	; (8005a88 <HAL_RCC_ClockConfig+0x1c8>)
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005966:	2b00      	cmp	r3, #0
 8005968:	d115      	bne.n	8005996 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800596a:	2301      	movs	r3, #1
 800596c:	e085      	b.n	8005a7a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	685b      	ldr	r3, [r3, #4]
 8005972:	2b02      	cmp	r3, #2
 8005974:	d107      	bne.n	8005986 <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005976:	4b44      	ldr	r3, [pc, #272]	; (8005a88 <HAL_RCC_ClockConfig+0x1c8>)
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800597e:	2b00      	cmp	r3, #0
 8005980:	d109      	bne.n	8005996 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8005982:	2301      	movs	r3, #1
 8005984:	e079      	b.n	8005a7a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005986:	4b40      	ldr	r3, [pc, #256]	; (8005a88 <HAL_RCC_ClockConfig+0x1c8>)
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	f003 0302 	and.w	r3, r3, #2
 800598e:	2b00      	cmp	r3, #0
 8005990:	d101      	bne.n	8005996 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8005992:	2301      	movs	r3, #1
 8005994:	e071      	b.n	8005a7a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005996:	4b3c      	ldr	r3, [pc, #240]	; (8005a88 <HAL_RCC_ClockConfig+0x1c8>)
 8005998:	689b      	ldr	r3, [r3, #8]
 800599a:	f023 0203 	bic.w	r2, r3, #3
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	685b      	ldr	r3, [r3, #4]
 80059a2:	4939      	ldr	r1, [pc, #228]	; (8005a88 <HAL_RCC_ClockConfig+0x1c8>)
 80059a4:	4313      	orrs	r3, r2
 80059a6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80059a8:	f7fc fe12 	bl	80025d0 <HAL_GetTick>
 80059ac:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80059ae:	e00a      	b.n	80059c6 <HAL_RCC_ClockConfig+0x106>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80059b0:	f7fc fe0e 	bl	80025d0 <HAL_GetTick>
 80059b4:	4602      	mov	r2, r0
 80059b6:	697b      	ldr	r3, [r7, #20]
 80059b8:	1ad3      	subs	r3, r2, r3
 80059ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80059be:	4293      	cmp	r3, r2
 80059c0:	d901      	bls.n	80059c6 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80059c2:	2303      	movs	r3, #3
 80059c4:	e059      	b.n	8005a7a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80059c6:	4b30      	ldr	r3, [pc, #192]	; (8005a88 <HAL_RCC_ClockConfig+0x1c8>)
 80059c8:	689b      	ldr	r3, [r3, #8]
 80059ca:	f003 020c 	and.w	r2, r3, #12
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	685b      	ldr	r3, [r3, #4]
 80059d2:	009b      	lsls	r3, r3, #2
 80059d4:	429a      	cmp	r2, r3
 80059d6:	d1eb      	bne.n	80059b0 <HAL_RCC_ClockConfig+0xf0>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80059d8:	4b2a      	ldr	r3, [pc, #168]	; (8005a84 <HAL_RCC_ClockConfig+0x1c4>)
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	f003 030f 	and.w	r3, r3, #15
 80059e0:	683a      	ldr	r2, [r7, #0]
 80059e2:	429a      	cmp	r2, r3
 80059e4:	d20c      	bcs.n	8005a00 <HAL_RCC_ClockConfig+0x140>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80059e6:	4b27      	ldr	r3, [pc, #156]	; (8005a84 <HAL_RCC_ClockConfig+0x1c4>)
 80059e8:	683a      	ldr	r2, [r7, #0]
 80059ea:	b2d2      	uxtb	r2, r2
 80059ec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80059ee:	4b25      	ldr	r3, [pc, #148]	; (8005a84 <HAL_RCC_ClockConfig+0x1c4>)
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	f003 030f 	and.w	r3, r3, #15
 80059f6:	683a      	ldr	r2, [r7, #0]
 80059f8:	429a      	cmp	r2, r3
 80059fa:	d001      	beq.n	8005a00 <HAL_RCC_ClockConfig+0x140>
    {
      return HAL_ERROR;
 80059fc:	2301      	movs	r3, #1
 80059fe:	e03c      	b.n	8005a7a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	f003 0304 	and.w	r3, r3, #4
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d008      	beq.n	8005a1e <HAL_RCC_ClockConfig+0x15e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005a0c:	4b1e      	ldr	r3, [pc, #120]	; (8005a88 <HAL_RCC_ClockConfig+0x1c8>)
 8005a0e:	689b      	ldr	r3, [r3, #8]
 8005a10:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	68db      	ldr	r3, [r3, #12]
 8005a18:	491b      	ldr	r1, [pc, #108]	; (8005a88 <HAL_RCC_ClockConfig+0x1c8>)
 8005a1a:	4313      	orrs	r3, r2
 8005a1c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	f003 0308 	and.w	r3, r3, #8
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d009      	beq.n	8005a3e <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005a2a:	4b17      	ldr	r3, [pc, #92]	; (8005a88 <HAL_RCC_ClockConfig+0x1c8>)
 8005a2c:	689b      	ldr	r3, [r3, #8]
 8005a2e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	691b      	ldr	r3, [r3, #16]
 8005a36:	00db      	lsls	r3, r3, #3
 8005a38:	4913      	ldr	r1, [pc, #76]	; (8005a88 <HAL_RCC_ClockConfig+0x1c8>)
 8005a3a:	4313      	orrs	r3, r2
 8005a3c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 8005a3e:	f000 f837 	bl	8005ab0 <HAL_RCC_GetSysClockFreq>
 8005a42:	4601      	mov	r1, r0
 8005a44:	4b10      	ldr	r3, [pc, #64]	; (8005a88 <HAL_RCC_ClockConfig+0x1c8>)
 8005a46:	689b      	ldr	r3, [r3, #8]
 8005a48:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005a4c:	22f0      	movs	r2, #240	; 0xf0
 8005a4e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a50:	693a      	ldr	r2, [r7, #16]
 8005a52:	fa92 f2a2 	rbit	r2, r2
 8005a56:	60fa      	str	r2, [r7, #12]
  return result;
 8005a58:	68fa      	ldr	r2, [r7, #12]
 8005a5a:	fab2 f282 	clz	r2, r2
 8005a5e:	b2d2      	uxtb	r2, r2
 8005a60:	40d3      	lsrs	r3, r2
 8005a62:	4a0a      	ldr	r2, [pc, #40]	; (8005a8c <HAL_RCC_ClockConfig+0x1cc>)
 8005a64:	5cd3      	ldrb	r3, [r2, r3]
 8005a66:	fa21 f303 	lsr.w	r3, r1, r3
 8005a6a:	4a09      	ldr	r2, [pc, #36]	; (8005a90 <HAL_RCC_ClockConfig+0x1d0>)
 8005a6c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005a6e:	4b09      	ldr	r3, [pc, #36]	; (8005a94 <HAL_RCC_ClockConfig+0x1d4>)
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	4618      	mov	r0, r3
 8005a74:	f7fc fd6a 	bl	800254c <HAL_InitTick>

  return HAL_OK;
 8005a78:	2300      	movs	r3, #0
}
 8005a7a:	4618      	mov	r0, r3
 8005a7c:	3718      	adds	r7, #24
 8005a7e:	46bd      	mov	sp, r7
 8005a80:	bd80      	pop	{r7, pc}
 8005a82:	bf00      	nop
 8005a84:	40023c00 	.word	0x40023c00
 8005a88:	40023800 	.word	0x40023800
 8005a8c:	0800a6bc 	.word	0x0800a6bc
 8005a90:	20000004 	.word	0x20000004
 8005a94:	20000008 	.word	0x20000008

08005a98 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M3 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8005a98:	b480      	push	{r7}
 8005a9a:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 8005a9c:	4b03      	ldr	r3, [pc, #12]	; (8005aac <HAL_RCC_EnableCSS+0x14>)
 8005a9e:	2201      	movs	r2, #1
 8005aa0:	601a      	str	r2, [r3, #0]
}
 8005aa2:	bf00      	nop
 8005aa4:	46bd      	mov	sp, r7
 8005aa6:	bc80      	pop	{r7}
 8005aa8:	4770      	bx	lr
 8005aaa:	bf00      	nop
 8005aac:	4247004c 	.word	0x4247004c

08005ab0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005ab0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8005ab4:	b084      	sub	sp, #16
 8005ab6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005ab8:	2300      	movs	r3, #0
 8005aba:	607b      	str	r3, [r7, #4]
 8005abc:	2300      	movs	r3, #0
 8005abe:	60fb      	str	r3, [r7, #12]
 8005ac0:	2300      	movs	r3, #0
 8005ac2:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8005ac4:	2300      	movs	r3, #0
 8005ac6:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005ac8:	4b67      	ldr	r3, [pc, #412]	; (8005c68 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005aca:	689b      	ldr	r3, [r3, #8]
 8005acc:	f003 030c 	and.w	r3, r3, #12
 8005ad0:	2b08      	cmp	r3, #8
 8005ad2:	d00d      	beq.n	8005af0 <HAL_RCC_GetSysClockFreq+0x40>
 8005ad4:	2b08      	cmp	r3, #8
 8005ad6:	f200 80bd 	bhi.w	8005c54 <HAL_RCC_GetSysClockFreq+0x1a4>
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d002      	beq.n	8005ae4 <HAL_RCC_GetSysClockFreq+0x34>
 8005ade:	2b04      	cmp	r3, #4
 8005ae0:	d003      	beq.n	8005aea <HAL_RCC_GetSysClockFreq+0x3a>
 8005ae2:	e0b7      	b.n	8005c54 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005ae4:	4b61      	ldr	r3, [pc, #388]	; (8005c6c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8005ae6:	60bb      	str	r3, [r7, #8]
       break;
 8005ae8:	e0b7      	b.n	8005c5a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005aea:	4b60      	ldr	r3, [pc, #384]	; (8005c6c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8005aec:	60bb      	str	r3, [r7, #8]
      break;
 8005aee:	e0b4      	b.n	8005c5a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005af0:	4b5d      	ldr	r3, [pc, #372]	; (8005c68 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005af2:	685b      	ldr	r3, [r3, #4]
 8005af4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005af8:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005afa:	4b5b      	ldr	r3, [pc, #364]	; (8005c68 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005afc:	685b      	ldr	r3, [r3, #4]
 8005afe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d04d      	beq.n	8005ba2 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005b06:	4b58      	ldr	r3, [pc, #352]	; (8005c68 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005b08:	685b      	ldr	r3, [r3, #4]
 8005b0a:	099b      	lsrs	r3, r3, #6
 8005b0c:	461a      	mov	r2, r3
 8005b0e:	f04f 0300 	mov.w	r3, #0
 8005b12:	f240 10ff 	movw	r0, #511	; 0x1ff
 8005b16:	f04f 0100 	mov.w	r1, #0
 8005b1a:	ea02 0800 	and.w	r8, r2, r0
 8005b1e:	ea03 0901 	and.w	r9, r3, r1
 8005b22:	4640      	mov	r0, r8
 8005b24:	4649      	mov	r1, r9
 8005b26:	f04f 0200 	mov.w	r2, #0
 8005b2a:	f04f 0300 	mov.w	r3, #0
 8005b2e:	014b      	lsls	r3, r1, #5
 8005b30:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005b34:	0142      	lsls	r2, r0, #5
 8005b36:	4610      	mov	r0, r2
 8005b38:	4619      	mov	r1, r3
 8005b3a:	ebb0 0008 	subs.w	r0, r0, r8
 8005b3e:	eb61 0109 	sbc.w	r1, r1, r9
 8005b42:	f04f 0200 	mov.w	r2, #0
 8005b46:	f04f 0300 	mov.w	r3, #0
 8005b4a:	018b      	lsls	r3, r1, #6
 8005b4c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005b50:	0182      	lsls	r2, r0, #6
 8005b52:	1a12      	subs	r2, r2, r0
 8005b54:	eb63 0301 	sbc.w	r3, r3, r1
 8005b58:	f04f 0000 	mov.w	r0, #0
 8005b5c:	f04f 0100 	mov.w	r1, #0
 8005b60:	00d9      	lsls	r1, r3, #3
 8005b62:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005b66:	00d0      	lsls	r0, r2, #3
 8005b68:	4602      	mov	r2, r0
 8005b6a:	460b      	mov	r3, r1
 8005b6c:	eb12 0208 	adds.w	r2, r2, r8
 8005b70:	eb43 0309 	adc.w	r3, r3, r9
 8005b74:	f04f 0000 	mov.w	r0, #0
 8005b78:	f04f 0100 	mov.w	r1, #0
 8005b7c:	0299      	lsls	r1, r3, #10
 8005b7e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8005b82:	0290      	lsls	r0, r2, #10
 8005b84:	4602      	mov	r2, r0
 8005b86:	460b      	mov	r3, r1
 8005b88:	4610      	mov	r0, r2
 8005b8a:	4619      	mov	r1, r3
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	461a      	mov	r2, r3
 8005b90:	f04f 0300 	mov.w	r3, #0
 8005b94:	f7fb fa20 	bl	8000fd8 <__aeabi_uldivmod>
 8005b98:	4602      	mov	r2, r0
 8005b9a:	460b      	mov	r3, r1
 8005b9c:	4613      	mov	r3, r2
 8005b9e:	60fb      	str	r3, [r7, #12]
 8005ba0:	e04a      	b.n	8005c38 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005ba2:	4b31      	ldr	r3, [pc, #196]	; (8005c68 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005ba4:	685b      	ldr	r3, [r3, #4]
 8005ba6:	099b      	lsrs	r3, r3, #6
 8005ba8:	461a      	mov	r2, r3
 8005baa:	f04f 0300 	mov.w	r3, #0
 8005bae:	f240 10ff 	movw	r0, #511	; 0x1ff
 8005bb2:	f04f 0100 	mov.w	r1, #0
 8005bb6:	ea02 0400 	and.w	r4, r2, r0
 8005bba:	ea03 0501 	and.w	r5, r3, r1
 8005bbe:	4620      	mov	r0, r4
 8005bc0:	4629      	mov	r1, r5
 8005bc2:	f04f 0200 	mov.w	r2, #0
 8005bc6:	f04f 0300 	mov.w	r3, #0
 8005bca:	014b      	lsls	r3, r1, #5
 8005bcc:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005bd0:	0142      	lsls	r2, r0, #5
 8005bd2:	4610      	mov	r0, r2
 8005bd4:	4619      	mov	r1, r3
 8005bd6:	1b00      	subs	r0, r0, r4
 8005bd8:	eb61 0105 	sbc.w	r1, r1, r5
 8005bdc:	f04f 0200 	mov.w	r2, #0
 8005be0:	f04f 0300 	mov.w	r3, #0
 8005be4:	018b      	lsls	r3, r1, #6
 8005be6:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005bea:	0182      	lsls	r2, r0, #6
 8005bec:	1a12      	subs	r2, r2, r0
 8005bee:	eb63 0301 	sbc.w	r3, r3, r1
 8005bf2:	f04f 0000 	mov.w	r0, #0
 8005bf6:	f04f 0100 	mov.w	r1, #0
 8005bfa:	00d9      	lsls	r1, r3, #3
 8005bfc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005c00:	00d0      	lsls	r0, r2, #3
 8005c02:	4602      	mov	r2, r0
 8005c04:	460b      	mov	r3, r1
 8005c06:	1912      	adds	r2, r2, r4
 8005c08:	eb45 0303 	adc.w	r3, r5, r3
 8005c0c:	f04f 0000 	mov.w	r0, #0
 8005c10:	f04f 0100 	mov.w	r1, #0
 8005c14:	0299      	lsls	r1, r3, #10
 8005c16:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8005c1a:	0290      	lsls	r0, r2, #10
 8005c1c:	4602      	mov	r2, r0
 8005c1e:	460b      	mov	r3, r1
 8005c20:	4610      	mov	r0, r2
 8005c22:	4619      	mov	r1, r3
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	461a      	mov	r2, r3
 8005c28:	f04f 0300 	mov.w	r3, #0
 8005c2c:	f7fb f9d4 	bl	8000fd8 <__aeabi_uldivmod>
 8005c30:	4602      	mov	r2, r0
 8005c32:	460b      	mov	r3, r1
 8005c34:	4613      	mov	r3, r2
 8005c36:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005c38:	4b0b      	ldr	r3, [pc, #44]	; (8005c68 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005c3a:	685b      	ldr	r3, [r3, #4]
 8005c3c:	0c1b      	lsrs	r3, r3, #16
 8005c3e:	f003 0303 	and.w	r3, r3, #3
 8005c42:	3301      	adds	r3, #1
 8005c44:	005b      	lsls	r3, r3, #1
 8005c46:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8005c48:	68fa      	ldr	r2, [r7, #12]
 8005c4a:	683b      	ldr	r3, [r7, #0]
 8005c4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c50:	60bb      	str	r3, [r7, #8]
      break;
 8005c52:	e002      	b.n	8005c5a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005c54:	4b05      	ldr	r3, [pc, #20]	; (8005c6c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8005c56:	60bb      	str	r3, [r7, #8]
      break;
 8005c58:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005c5a:	68bb      	ldr	r3, [r7, #8]
}
 8005c5c:	4618      	mov	r0, r3
 8005c5e:	3710      	adds	r7, #16
 8005c60:	46bd      	mov	sp, r7
 8005c62:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8005c66:	bf00      	nop
 8005c68:	40023800 	.word	0x40023800
 8005c6c:	00f42400 	.word	0x00f42400

08005c70 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005c70:	b480      	push	{r7}
 8005c72:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005c74:	4b02      	ldr	r3, [pc, #8]	; (8005c80 <HAL_RCC_GetHCLKFreq+0x10>)
 8005c76:	681b      	ldr	r3, [r3, #0]
}
 8005c78:	4618      	mov	r0, r3
 8005c7a:	46bd      	mov	sp, r7
 8005c7c:	bc80      	pop	{r7}
 8005c7e:	4770      	bx	lr
 8005c80:	20000004 	.word	0x20000004

08005c84 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005c84:	b580      	push	{r7, lr}
 8005c86:	b082      	sub	sp, #8
 8005c88:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> POSITION_VAL(RCC_CFGR_PPRE1)]);
 8005c8a:	f7ff fff1 	bl	8005c70 <HAL_RCC_GetHCLKFreq>
 8005c8e:	4601      	mov	r1, r0
 8005c90:	4b0b      	ldr	r3, [pc, #44]	; (8005cc0 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8005c92:	689b      	ldr	r3, [r3, #8]
 8005c94:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8005c98:	f44f 52e0 	mov.w	r2, #7168	; 0x1c00
 8005c9c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005c9e:	687a      	ldr	r2, [r7, #4]
 8005ca0:	fa92 f2a2 	rbit	r2, r2
 8005ca4:	603a      	str	r2, [r7, #0]
  return result;
 8005ca6:	683a      	ldr	r2, [r7, #0]
 8005ca8:	fab2 f282 	clz	r2, r2
 8005cac:	b2d2      	uxtb	r2, r2
 8005cae:	40d3      	lsrs	r3, r2
 8005cb0:	4a04      	ldr	r2, [pc, #16]	; (8005cc4 <HAL_RCC_GetPCLK1Freq+0x40>)
 8005cb2:	5cd3      	ldrb	r3, [r2, r3]
 8005cb4:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005cb8:	4618      	mov	r0, r3
 8005cba:	3708      	adds	r7, #8
 8005cbc:	46bd      	mov	sp, r7
 8005cbe:	bd80      	pop	{r7, pc}
 8005cc0:	40023800 	.word	0x40023800
 8005cc4:	0800a6cc 	.word	0x0800a6cc

08005cc8 <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 8005cc8:	b580      	push	{r7, lr}
 8005cca:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 8005ccc:	4b06      	ldr	r3, [pc, #24]	; (8005ce8 <HAL_RCC_NMI_IRQHandler+0x20>)
 8005cce:	68db      	ldr	r3, [r3, #12]
 8005cd0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005cd4:	2b80      	cmp	r3, #128	; 0x80
 8005cd6:	d104      	bne.n	8005ce2 <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 8005cd8:	f000 f80a 	bl	8005cf0 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 8005cdc:	4b03      	ldr	r3, [pc, #12]	; (8005cec <HAL_RCC_NMI_IRQHandler+0x24>)
 8005cde:	2280      	movs	r2, #128	; 0x80
 8005ce0:	701a      	strb	r2, [r3, #0]
  }
}
 8005ce2:	bf00      	nop
 8005ce4:	bd80      	pop	{r7, pc}
 8005ce6:	bf00      	nop
 8005ce8:	40023800 	.word	0x40023800
 8005cec:	4002380e 	.word	0x4002380e

08005cf0 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval None
  */
__weak void HAL_RCC_CSSCallback(void)
{
 8005cf0:	b480      	push	{r7}
 8005cf2:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback could be implemented in the user file
   */
}
 8005cf4:	bf00      	nop
 8005cf6:	46bd      	mov	sp, r7
 8005cf8:	bc80      	pop	{r7}
 8005cfa:	4770      	bx	lr

08005cfc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005cfc:	b580      	push	{r7, lr}
 8005cfe:	b082      	sub	sp, #8
 8005d00:	af00      	add	r7, sp, #0
 8005d02:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d101      	bne.n	8005d0e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005d0a:	2301      	movs	r3, #1
 8005d0c:	e041      	b.n	8005d92 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d14:	b2db      	uxtb	r3, r3
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d106      	bne.n	8005d28 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	2200      	movs	r2, #0
 8005d1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005d22:	6878      	ldr	r0, [r7, #4]
 8005d24:	f7fc fae0 	bl	80022e8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	2202      	movs	r2, #2
 8005d2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681a      	ldr	r2, [r3, #0]
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	3304      	adds	r3, #4
 8005d38:	4619      	mov	r1, r3
 8005d3a:	4610      	mov	r0, r2
 8005d3c:	f000 fa2e 	bl	800619c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	2201      	movs	r2, #1
 8005d44:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	2201      	movs	r2, #1
 8005d4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	2201      	movs	r2, #1
 8005d54:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	2201      	movs	r2, #1
 8005d5c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	2201      	movs	r2, #1
 8005d64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	2201      	movs	r2, #1
 8005d6c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	2201      	movs	r2, #1
 8005d74:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	2201      	movs	r2, #1
 8005d7c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	2201      	movs	r2, #1
 8005d84:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	2201      	movs	r2, #1
 8005d8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005d90:	2300      	movs	r3, #0
}
 8005d92:	4618      	mov	r0, r3
 8005d94:	3708      	adds	r7, #8
 8005d96:	46bd      	mov	sp, r7
 8005d98:	bd80      	pop	{r7, pc}
	...

08005d9c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005d9c:	b480      	push	{r7}
 8005d9e:	b085      	sub	sp, #20
 8005da0:	af00      	add	r7, sp, #0
 8005da2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005daa:	b2db      	uxtb	r3, r3
 8005dac:	2b01      	cmp	r3, #1
 8005dae:	d001      	beq.n	8005db4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005db0:	2301      	movs	r3, #1
 8005db2:	e046      	b.n	8005e42 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	2202      	movs	r2, #2
 8005db8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	4a22      	ldr	r2, [pc, #136]	; (8005e4c <HAL_TIM_Base_Start+0xb0>)
 8005dc2:	4293      	cmp	r3, r2
 8005dc4:	d022      	beq.n	8005e0c <HAL_TIM_Base_Start+0x70>
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005dce:	d01d      	beq.n	8005e0c <HAL_TIM_Base_Start+0x70>
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	4a1e      	ldr	r2, [pc, #120]	; (8005e50 <HAL_TIM_Base_Start+0xb4>)
 8005dd6:	4293      	cmp	r3, r2
 8005dd8:	d018      	beq.n	8005e0c <HAL_TIM_Base_Start+0x70>
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	4a1d      	ldr	r2, [pc, #116]	; (8005e54 <HAL_TIM_Base_Start+0xb8>)
 8005de0:	4293      	cmp	r3, r2
 8005de2:	d013      	beq.n	8005e0c <HAL_TIM_Base_Start+0x70>
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	4a1b      	ldr	r2, [pc, #108]	; (8005e58 <HAL_TIM_Base_Start+0xbc>)
 8005dea:	4293      	cmp	r3, r2
 8005dec:	d00e      	beq.n	8005e0c <HAL_TIM_Base_Start+0x70>
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	4a1a      	ldr	r2, [pc, #104]	; (8005e5c <HAL_TIM_Base_Start+0xc0>)
 8005df4:	4293      	cmp	r3, r2
 8005df6:	d009      	beq.n	8005e0c <HAL_TIM_Base_Start+0x70>
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	4a18      	ldr	r2, [pc, #96]	; (8005e60 <HAL_TIM_Base_Start+0xc4>)
 8005dfe:	4293      	cmp	r3, r2
 8005e00:	d004      	beq.n	8005e0c <HAL_TIM_Base_Start+0x70>
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	4a17      	ldr	r2, [pc, #92]	; (8005e64 <HAL_TIM_Base_Start+0xc8>)
 8005e08:	4293      	cmp	r3, r2
 8005e0a:	d111      	bne.n	8005e30 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	689b      	ldr	r3, [r3, #8]
 8005e12:	f003 0307 	and.w	r3, r3, #7
 8005e16:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	2b06      	cmp	r3, #6
 8005e1c:	d010      	beq.n	8005e40 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	681a      	ldr	r2, [r3, #0]
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	f042 0201 	orr.w	r2, r2, #1
 8005e2c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e2e:	e007      	b.n	8005e40 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	681a      	ldr	r2, [r3, #0]
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	f042 0201 	orr.w	r2, r2, #1
 8005e3e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005e40:	2300      	movs	r3, #0
}
 8005e42:	4618      	mov	r0, r3
 8005e44:	3714      	adds	r7, #20
 8005e46:	46bd      	mov	sp, r7
 8005e48:	bc80      	pop	{r7}
 8005e4a:	4770      	bx	lr
 8005e4c:	40010000 	.word	0x40010000
 8005e50:	40000400 	.word	0x40000400
 8005e54:	40000800 	.word	0x40000800
 8005e58:	40000c00 	.word	0x40000c00
 8005e5c:	40010400 	.word	0x40010400
 8005e60:	40014000 	.word	0x40014000
 8005e64:	40001800 	.word	0x40001800

08005e68 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005e68:	b480      	push	{r7}
 8005e6a:	b085      	sub	sp, #20
 8005e6c:	af00      	add	r7, sp, #0
 8005e6e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e76:	b2db      	uxtb	r3, r3
 8005e78:	2b01      	cmp	r3, #1
 8005e7a:	d001      	beq.n	8005e80 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005e7c:	2301      	movs	r3, #1
 8005e7e:	e04e      	b.n	8005f1e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	2202      	movs	r2, #2
 8005e84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	68da      	ldr	r2, [r3, #12]
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	f042 0201 	orr.w	r2, r2, #1
 8005e96:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	4a22      	ldr	r2, [pc, #136]	; (8005f28 <HAL_TIM_Base_Start_IT+0xc0>)
 8005e9e:	4293      	cmp	r3, r2
 8005ea0:	d022      	beq.n	8005ee8 <HAL_TIM_Base_Start_IT+0x80>
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005eaa:	d01d      	beq.n	8005ee8 <HAL_TIM_Base_Start_IT+0x80>
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	4a1e      	ldr	r2, [pc, #120]	; (8005f2c <HAL_TIM_Base_Start_IT+0xc4>)
 8005eb2:	4293      	cmp	r3, r2
 8005eb4:	d018      	beq.n	8005ee8 <HAL_TIM_Base_Start_IT+0x80>
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	4a1d      	ldr	r2, [pc, #116]	; (8005f30 <HAL_TIM_Base_Start_IT+0xc8>)
 8005ebc:	4293      	cmp	r3, r2
 8005ebe:	d013      	beq.n	8005ee8 <HAL_TIM_Base_Start_IT+0x80>
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	4a1b      	ldr	r2, [pc, #108]	; (8005f34 <HAL_TIM_Base_Start_IT+0xcc>)
 8005ec6:	4293      	cmp	r3, r2
 8005ec8:	d00e      	beq.n	8005ee8 <HAL_TIM_Base_Start_IT+0x80>
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	4a1a      	ldr	r2, [pc, #104]	; (8005f38 <HAL_TIM_Base_Start_IT+0xd0>)
 8005ed0:	4293      	cmp	r3, r2
 8005ed2:	d009      	beq.n	8005ee8 <HAL_TIM_Base_Start_IT+0x80>
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	4a18      	ldr	r2, [pc, #96]	; (8005f3c <HAL_TIM_Base_Start_IT+0xd4>)
 8005eda:	4293      	cmp	r3, r2
 8005edc:	d004      	beq.n	8005ee8 <HAL_TIM_Base_Start_IT+0x80>
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	4a17      	ldr	r2, [pc, #92]	; (8005f40 <HAL_TIM_Base_Start_IT+0xd8>)
 8005ee4:	4293      	cmp	r3, r2
 8005ee6:	d111      	bne.n	8005f0c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	689b      	ldr	r3, [r3, #8]
 8005eee:	f003 0307 	and.w	r3, r3, #7
 8005ef2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	2b06      	cmp	r3, #6
 8005ef8:	d010      	beq.n	8005f1c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	681a      	ldr	r2, [r3, #0]
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	f042 0201 	orr.w	r2, r2, #1
 8005f08:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f0a:	e007      	b.n	8005f1c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	681a      	ldr	r2, [r3, #0]
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	f042 0201 	orr.w	r2, r2, #1
 8005f1a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005f1c:	2300      	movs	r3, #0
}
 8005f1e:	4618      	mov	r0, r3
 8005f20:	3714      	adds	r7, #20
 8005f22:	46bd      	mov	sp, r7
 8005f24:	bc80      	pop	{r7}
 8005f26:	4770      	bx	lr
 8005f28:	40010000 	.word	0x40010000
 8005f2c:	40000400 	.word	0x40000400
 8005f30:	40000800 	.word	0x40000800
 8005f34:	40000c00 	.word	0x40000c00
 8005f38:	40010400 	.word	0x40010400
 8005f3c:	40014000 	.word	0x40014000
 8005f40:	40001800 	.word	0x40001800

08005f44 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005f44:	b580      	push	{r7, lr}
 8005f46:	b082      	sub	sp, #8
 8005f48:	af00      	add	r7, sp, #0
 8005f4a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	691b      	ldr	r3, [r3, #16]
 8005f52:	f003 0302 	and.w	r3, r3, #2
 8005f56:	2b02      	cmp	r3, #2
 8005f58:	d122      	bne.n	8005fa0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	68db      	ldr	r3, [r3, #12]
 8005f60:	f003 0302 	and.w	r3, r3, #2
 8005f64:	2b02      	cmp	r3, #2
 8005f66:	d11b      	bne.n	8005fa0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	f06f 0202 	mvn.w	r2, #2
 8005f70:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	2201      	movs	r2, #1
 8005f76:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	699b      	ldr	r3, [r3, #24]
 8005f7e:	f003 0303 	and.w	r3, r3, #3
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d003      	beq.n	8005f8e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005f86:	6878      	ldr	r0, [r7, #4]
 8005f88:	f000 f8ed 	bl	8006166 <HAL_TIM_IC_CaptureCallback>
 8005f8c:	e005      	b.n	8005f9a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f8e:	6878      	ldr	r0, [r7, #4]
 8005f90:	f000 f8e0 	bl	8006154 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f94:	6878      	ldr	r0, [r7, #4]
 8005f96:	f000 f8ef 	bl	8006178 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	2200      	movs	r2, #0
 8005f9e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	691b      	ldr	r3, [r3, #16]
 8005fa6:	f003 0304 	and.w	r3, r3, #4
 8005faa:	2b04      	cmp	r3, #4
 8005fac:	d122      	bne.n	8005ff4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	68db      	ldr	r3, [r3, #12]
 8005fb4:	f003 0304 	and.w	r3, r3, #4
 8005fb8:	2b04      	cmp	r3, #4
 8005fba:	d11b      	bne.n	8005ff4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	f06f 0204 	mvn.w	r2, #4
 8005fc4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	2202      	movs	r2, #2
 8005fca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	699b      	ldr	r3, [r3, #24]
 8005fd2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d003      	beq.n	8005fe2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005fda:	6878      	ldr	r0, [r7, #4]
 8005fdc:	f000 f8c3 	bl	8006166 <HAL_TIM_IC_CaptureCallback>
 8005fe0:	e005      	b.n	8005fee <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005fe2:	6878      	ldr	r0, [r7, #4]
 8005fe4:	f000 f8b6 	bl	8006154 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005fe8:	6878      	ldr	r0, [r7, #4]
 8005fea:	f000 f8c5 	bl	8006178 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	2200      	movs	r2, #0
 8005ff2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	691b      	ldr	r3, [r3, #16]
 8005ffa:	f003 0308 	and.w	r3, r3, #8
 8005ffe:	2b08      	cmp	r3, #8
 8006000:	d122      	bne.n	8006048 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	68db      	ldr	r3, [r3, #12]
 8006008:	f003 0308 	and.w	r3, r3, #8
 800600c:	2b08      	cmp	r3, #8
 800600e:	d11b      	bne.n	8006048 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	f06f 0208 	mvn.w	r2, #8
 8006018:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	2204      	movs	r2, #4
 800601e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	69db      	ldr	r3, [r3, #28]
 8006026:	f003 0303 	and.w	r3, r3, #3
 800602a:	2b00      	cmp	r3, #0
 800602c:	d003      	beq.n	8006036 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800602e:	6878      	ldr	r0, [r7, #4]
 8006030:	f000 f899 	bl	8006166 <HAL_TIM_IC_CaptureCallback>
 8006034:	e005      	b.n	8006042 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006036:	6878      	ldr	r0, [r7, #4]
 8006038:	f000 f88c 	bl	8006154 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800603c:	6878      	ldr	r0, [r7, #4]
 800603e:	f000 f89b 	bl	8006178 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	2200      	movs	r2, #0
 8006046:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	691b      	ldr	r3, [r3, #16]
 800604e:	f003 0310 	and.w	r3, r3, #16
 8006052:	2b10      	cmp	r3, #16
 8006054:	d122      	bne.n	800609c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	68db      	ldr	r3, [r3, #12]
 800605c:	f003 0310 	and.w	r3, r3, #16
 8006060:	2b10      	cmp	r3, #16
 8006062:	d11b      	bne.n	800609c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	f06f 0210 	mvn.w	r2, #16
 800606c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	2208      	movs	r2, #8
 8006072:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	69db      	ldr	r3, [r3, #28]
 800607a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800607e:	2b00      	cmp	r3, #0
 8006080:	d003      	beq.n	800608a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006082:	6878      	ldr	r0, [r7, #4]
 8006084:	f000 f86f 	bl	8006166 <HAL_TIM_IC_CaptureCallback>
 8006088:	e005      	b.n	8006096 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800608a:	6878      	ldr	r0, [r7, #4]
 800608c:	f000 f862 	bl	8006154 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006090:	6878      	ldr	r0, [r7, #4]
 8006092:	f000 f871 	bl	8006178 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	2200      	movs	r2, #0
 800609a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	691b      	ldr	r3, [r3, #16]
 80060a2:	f003 0301 	and.w	r3, r3, #1
 80060a6:	2b01      	cmp	r3, #1
 80060a8:	d10e      	bne.n	80060c8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	68db      	ldr	r3, [r3, #12]
 80060b0:	f003 0301 	and.w	r3, r3, #1
 80060b4:	2b01      	cmp	r3, #1
 80060b6:	d107      	bne.n	80060c8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	f06f 0201 	mvn.w	r2, #1
 80060c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80060c2:	6878      	ldr	r0, [r7, #4]
 80060c4:	f7fb fd60 	bl	8001b88 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	691b      	ldr	r3, [r3, #16]
 80060ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80060d2:	2b80      	cmp	r3, #128	; 0x80
 80060d4:	d10e      	bne.n	80060f4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	68db      	ldr	r3, [r3, #12]
 80060dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80060e0:	2b80      	cmp	r3, #128	; 0x80
 80060e2:	d107      	bne.n	80060f4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80060ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80060ee:	6878      	ldr	r0, [r7, #4]
 80060f0:	f000 f8fb 	bl	80062ea <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	691b      	ldr	r3, [r3, #16]
 80060fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060fe:	2b40      	cmp	r3, #64	; 0x40
 8006100:	d10e      	bne.n	8006120 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	68db      	ldr	r3, [r3, #12]
 8006108:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800610c:	2b40      	cmp	r3, #64	; 0x40
 800610e:	d107      	bne.n	8006120 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006118:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800611a:	6878      	ldr	r0, [r7, #4]
 800611c:	f000 f835 	bl	800618a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	691b      	ldr	r3, [r3, #16]
 8006126:	f003 0320 	and.w	r3, r3, #32
 800612a:	2b20      	cmp	r3, #32
 800612c:	d10e      	bne.n	800614c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	68db      	ldr	r3, [r3, #12]
 8006134:	f003 0320 	and.w	r3, r3, #32
 8006138:	2b20      	cmp	r3, #32
 800613a:	d107      	bne.n	800614c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	f06f 0220 	mvn.w	r2, #32
 8006144:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006146:	6878      	ldr	r0, [r7, #4]
 8006148:	f000 f8c6 	bl	80062d8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800614c:	bf00      	nop
 800614e:	3708      	adds	r7, #8
 8006150:	46bd      	mov	sp, r7
 8006152:	bd80      	pop	{r7, pc}

08006154 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006154:	b480      	push	{r7}
 8006156:	b083      	sub	sp, #12
 8006158:	af00      	add	r7, sp, #0
 800615a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800615c:	bf00      	nop
 800615e:	370c      	adds	r7, #12
 8006160:	46bd      	mov	sp, r7
 8006162:	bc80      	pop	{r7}
 8006164:	4770      	bx	lr

08006166 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006166:	b480      	push	{r7}
 8006168:	b083      	sub	sp, #12
 800616a:	af00      	add	r7, sp, #0
 800616c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800616e:	bf00      	nop
 8006170:	370c      	adds	r7, #12
 8006172:	46bd      	mov	sp, r7
 8006174:	bc80      	pop	{r7}
 8006176:	4770      	bx	lr

08006178 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006178:	b480      	push	{r7}
 800617a:	b083      	sub	sp, #12
 800617c:	af00      	add	r7, sp, #0
 800617e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006180:	bf00      	nop
 8006182:	370c      	adds	r7, #12
 8006184:	46bd      	mov	sp, r7
 8006186:	bc80      	pop	{r7}
 8006188:	4770      	bx	lr

0800618a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800618a:	b480      	push	{r7}
 800618c:	b083      	sub	sp, #12
 800618e:	af00      	add	r7, sp, #0
 8006190:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006192:	bf00      	nop
 8006194:	370c      	adds	r7, #12
 8006196:	46bd      	mov	sp, r7
 8006198:	bc80      	pop	{r7}
 800619a:	4770      	bx	lr

0800619c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800619c:	b480      	push	{r7}
 800619e:	b085      	sub	sp, #20
 80061a0:	af00      	add	r7, sp, #0
 80061a2:	6078      	str	r0, [r7, #4]
 80061a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	4a3f      	ldr	r2, [pc, #252]	; (80062ac <TIM_Base_SetConfig+0x110>)
 80061b0:	4293      	cmp	r3, r2
 80061b2:	d013      	beq.n	80061dc <TIM_Base_SetConfig+0x40>
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80061ba:	d00f      	beq.n	80061dc <TIM_Base_SetConfig+0x40>
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	4a3c      	ldr	r2, [pc, #240]	; (80062b0 <TIM_Base_SetConfig+0x114>)
 80061c0:	4293      	cmp	r3, r2
 80061c2:	d00b      	beq.n	80061dc <TIM_Base_SetConfig+0x40>
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	4a3b      	ldr	r2, [pc, #236]	; (80062b4 <TIM_Base_SetConfig+0x118>)
 80061c8:	4293      	cmp	r3, r2
 80061ca:	d007      	beq.n	80061dc <TIM_Base_SetConfig+0x40>
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	4a3a      	ldr	r2, [pc, #232]	; (80062b8 <TIM_Base_SetConfig+0x11c>)
 80061d0:	4293      	cmp	r3, r2
 80061d2:	d003      	beq.n	80061dc <TIM_Base_SetConfig+0x40>
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	4a39      	ldr	r2, [pc, #228]	; (80062bc <TIM_Base_SetConfig+0x120>)
 80061d8:	4293      	cmp	r3, r2
 80061da:	d108      	bne.n	80061ee <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061e2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80061e4:	683b      	ldr	r3, [r7, #0]
 80061e6:	685b      	ldr	r3, [r3, #4]
 80061e8:	68fa      	ldr	r2, [r7, #12]
 80061ea:	4313      	orrs	r3, r2
 80061ec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	4a2e      	ldr	r2, [pc, #184]	; (80062ac <TIM_Base_SetConfig+0x110>)
 80061f2:	4293      	cmp	r3, r2
 80061f4:	d02b      	beq.n	800624e <TIM_Base_SetConfig+0xb2>
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80061fc:	d027      	beq.n	800624e <TIM_Base_SetConfig+0xb2>
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	4a2b      	ldr	r2, [pc, #172]	; (80062b0 <TIM_Base_SetConfig+0x114>)
 8006202:	4293      	cmp	r3, r2
 8006204:	d023      	beq.n	800624e <TIM_Base_SetConfig+0xb2>
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	4a2a      	ldr	r2, [pc, #168]	; (80062b4 <TIM_Base_SetConfig+0x118>)
 800620a:	4293      	cmp	r3, r2
 800620c:	d01f      	beq.n	800624e <TIM_Base_SetConfig+0xb2>
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	4a29      	ldr	r2, [pc, #164]	; (80062b8 <TIM_Base_SetConfig+0x11c>)
 8006212:	4293      	cmp	r3, r2
 8006214:	d01b      	beq.n	800624e <TIM_Base_SetConfig+0xb2>
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	4a28      	ldr	r2, [pc, #160]	; (80062bc <TIM_Base_SetConfig+0x120>)
 800621a:	4293      	cmp	r3, r2
 800621c:	d017      	beq.n	800624e <TIM_Base_SetConfig+0xb2>
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	4a27      	ldr	r2, [pc, #156]	; (80062c0 <TIM_Base_SetConfig+0x124>)
 8006222:	4293      	cmp	r3, r2
 8006224:	d013      	beq.n	800624e <TIM_Base_SetConfig+0xb2>
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	4a26      	ldr	r2, [pc, #152]	; (80062c4 <TIM_Base_SetConfig+0x128>)
 800622a:	4293      	cmp	r3, r2
 800622c:	d00f      	beq.n	800624e <TIM_Base_SetConfig+0xb2>
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	4a25      	ldr	r2, [pc, #148]	; (80062c8 <TIM_Base_SetConfig+0x12c>)
 8006232:	4293      	cmp	r3, r2
 8006234:	d00b      	beq.n	800624e <TIM_Base_SetConfig+0xb2>
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	4a24      	ldr	r2, [pc, #144]	; (80062cc <TIM_Base_SetConfig+0x130>)
 800623a:	4293      	cmp	r3, r2
 800623c:	d007      	beq.n	800624e <TIM_Base_SetConfig+0xb2>
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	4a23      	ldr	r2, [pc, #140]	; (80062d0 <TIM_Base_SetConfig+0x134>)
 8006242:	4293      	cmp	r3, r2
 8006244:	d003      	beq.n	800624e <TIM_Base_SetConfig+0xb2>
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	4a22      	ldr	r2, [pc, #136]	; (80062d4 <TIM_Base_SetConfig+0x138>)
 800624a:	4293      	cmp	r3, r2
 800624c:	d108      	bne.n	8006260 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006254:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006256:	683b      	ldr	r3, [r7, #0]
 8006258:	68db      	ldr	r3, [r3, #12]
 800625a:	68fa      	ldr	r2, [r7, #12]
 800625c:	4313      	orrs	r3, r2
 800625e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006266:	683b      	ldr	r3, [r7, #0]
 8006268:	695b      	ldr	r3, [r3, #20]
 800626a:	4313      	orrs	r3, r2
 800626c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	68fa      	ldr	r2, [r7, #12]
 8006272:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006274:	683b      	ldr	r3, [r7, #0]
 8006276:	689a      	ldr	r2, [r3, #8]
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800627c:	683b      	ldr	r3, [r7, #0]
 800627e:	681a      	ldr	r2, [r3, #0]
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	4a09      	ldr	r2, [pc, #36]	; (80062ac <TIM_Base_SetConfig+0x110>)
 8006288:	4293      	cmp	r3, r2
 800628a:	d003      	beq.n	8006294 <TIM_Base_SetConfig+0xf8>
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	4a0b      	ldr	r2, [pc, #44]	; (80062bc <TIM_Base_SetConfig+0x120>)
 8006290:	4293      	cmp	r3, r2
 8006292:	d103      	bne.n	800629c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006294:	683b      	ldr	r3, [r7, #0]
 8006296:	691a      	ldr	r2, [r3, #16]
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	2201      	movs	r2, #1
 80062a0:	615a      	str	r2, [r3, #20]
}
 80062a2:	bf00      	nop
 80062a4:	3714      	adds	r7, #20
 80062a6:	46bd      	mov	sp, r7
 80062a8:	bc80      	pop	{r7}
 80062aa:	4770      	bx	lr
 80062ac:	40010000 	.word	0x40010000
 80062b0:	40000400 	.word	0x40000400
 80062b4:	40000800 	.word	0x40000800
 80062b8:	40000c00 	.word	0x40000c00
 80062bc:	40010400 	.word	0x40010400
 80062c0:	40014000 	.word	0x40014000
 80062c4:	40014400 	.word	0x40014400
 80062c8:	40014800 	.word	0x40014800
 80062cc:	40001800 	.word	0x40001800
 80062d0:	40001c00 	.word	0x40001c00
 80062d4:	40002000 	.word	0x40002000

080062d8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80062d8:	b480      	push	{r7}
 80062da:	b083      	sub	sp, #12
 80062dc:	af00      	add	r7, sp, #0
 80062de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80062e0:	bf00      	nop
 80062e2:	370c      	adds	r7, #12
 80062e4:	46bd      	mov	sp, r7
 80062e6:	bc80      	pop	{r7}
 80062e8:	4770      	bx	lr

080062ea <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80062ea:	b480      	push	{r7}
 80062ec:	b083      	sub	sp, #12
 80062ee:	af00      	add	r7, sp, #0
 80062f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80062f2:	bf00      	nop
 80062f4:	370c      	adds	r7, #12
 80062f6:	46bd      	mov	sp, r7
 80062f8:	bc80      	pop	{r7}
 80062fa:	4770      	bx	lr

080062fc <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80062fc:	b084      	sub	sp, #16
 80062fe:	b580      	push	{r7, lr}
 8006300:	b084      	sub	sp, #16
 8006302:	af00      	add	r7, sp, #0
 8006304:	6078      	str	r0, [r7, #4]
 8006306:	f107 001c 	add.w	r0, r7, #28
 800630a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800630e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006310:	2b01      	cmp	r3, #1
 8006312:	d122      	bne.n	800635a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006318:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	68db      	ldr	r3, [r3, #12]
 8006324:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8006328:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800632c:	687a      	ldr	r2, [r7, #4]
 800632e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	68db      	ldr	r3, [r3, #12]
 8006334:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800633c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800633e:	2b01      	cmp	r3, #1
 8006340:	d105      	bne.n	800634e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	68db      	ldr	r3, [r3, #12]
 8006346:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800634e:	6878      	ldr	r0, [r7, #4]
 8006350:	f001 fafa 	bl	8007948 <USB_CoreReset>
 8006354:	4603      	mov	r3, r0
 8006356:	73fb      	strb	r3, [r7, #15]
 8006358:	e010      	b.n	800637c <USB_CoreInit+0x80>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	68db      	ldr	r3, [r3, #12]
 800635e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006366:	6878      	ldr	r0, [r7, #4]
 8006368:	f001 faee 	bl	8007948 <USB_CoreReset>
 800636c:	4603      	mov	r3, r0
 800636e:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006374:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 800637c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800637e:	2b01      	cmp	r3, #1
 8006380:	d10b      	bne.n	800639a <USB_CoreInit+0x9e>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	689b      	ldr	r3, [r3, #8]
 8006386:	f043 0206 	orr.w	r2, r3, #6
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	689b      	ldr	r3, [r3, #8]
 8006392:	f043 0220 	orr.w	r2, r3, #32
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800639a:	7bfb      	ldrb	r3, [r7, #15]
}
 800639c:	4618      	mov	r0, r3
 800639e:	3710      	adds	r7, #16
 80063a0:	46bd      	mov	sp, r7
 80063a2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80063a6:	b004      	add	sp, #16
 80063a8:	4770      	bx	lr
	...

080063ac <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80063ac:	b480      	push	{r7}
 80063ae:	b087      	sub	sp, #28
 80063b0:	af00      	add	r7, sp, #0
 80063b2:	60f8      	str	r0, [r7, #12]
 80063b4:	60b9      	str	r1, [r7, #8]
 80063b6:	4613      	mov	r3, r2
 80063b8:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80063ba:	79fb      	ldrb	r3, [r7, #7]
 80063bc:	2b02      	cmp	r3, #2
 80063be:	d165      	bne.n	800648c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80063c0:	68bb      	ldr	r3, [r7, #8]
 80063c2:	4a41      	ldr	r2, [pc, #260]	; (80064c8 <USB_SetTurnaroundTime+0x11c>)
 80063c4:	4293      	cmp	r3, r2
 80063c6:	d906      	bls.n	80063d6 <USB_SetTurnaroundTime+0x2a>
 80063c8:	68bb      	ldr	r3, [r7, #8]
 80063ca:	4a40      	ldr	r2, [pc, #256]	; (80064cc <USB_SetTurnaroundTime+0x120>)
 80063cc:	4293      	cmp	r3, r2
 80063ce:	d202      	bcs.n	80063d6 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80063d0:	230f      	movs	r3, #15
 80063d2:	617b      	str	r3, [r7, #20]
 80063d4:	e062      	b.n	800649c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80063d6:	68bb      	ldr	r3, [r7, #8]
 80063d8:	4a3c      	ldr	r2, [pc, #240]	; (80064cc <USB_SetTurnaroundTime+0x120>)
 80063da:	4293      	cmp	r3, r2
 80063dc:	d306      	bcc.n	80063ec <USB_SetTurnaroundTime+0x40>
 80063de:	68bb      	ldr	r3, [r7, #8]
 80063e0:	4a3b      	ldr	r2, [pc, #236]	; (80064d0 <USB_SetTurnaroundTime+0x124>)
 80063e2:	4293      	cmp	r3, r2
 80063e4:	d202      	bcs.n	80063ec <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80063e6:	230e      	movs	r3, #14
 80063e8:	617b      	str	r3, [r7, #20]
 80063ea:	e057      	b.n	800649c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80063ec:	68bb      	ldr	r3, [r7, #8]
 80063ee:	4a38      	ldr	r2, [pc, #224]	; (80064d0 <USB_SetTurnaroundTime+0x124>)
 80063f0:	4293      	cmp	r3, r2
 80063f2:	d306      	bcc.n	8006402 <USB_SetTurnaroundTime+0x56>
 80063f4:	68bb      	ldr	r3, [r7, #8]
 80063f6:	4a37      	ldr	r2, [pc, #220]	; (80064d4 <USB_SetTurnaroundTime+0x128>)
 80063f8:	4293      	cmp	r3, r2
 80063fa:	d202      	bcs.n	8006402 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80063fc:	230d      	movs	r3, #13
 80063fe:	617b      	str	r3, [r7, #20]
 8006400:	e04c      	b.n	800649c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8006402:	68bb      	ldr	r3, [r7, #8]
 8006404:	4a33      	ldr	r2, [pc, #204]	; (80064d4 <USB_SetTurnaroundTime+0x128>)
 8006406:	4293      	cmp	r3, r2
 8006408:	d306      	bcc.n	8006418 <USB_SetTurnaroundTime+0x6c>
 800640a:	68bb      	ldr	r3, [r7, #8]
 800640c:	4a32      	ldr	r2, [pc, #200]	; (80064d8 <USB_SetTurnaroundTime+0x12c>)
 800640e:	4293      	cmp	r3, r2
 8006410:	d802      	bhi.n	8006418 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8006412:	230c      	movs	r3, #12
 8006414:	617b      	str	r3, [r7, #20]
 8006416:	e041      	b.n	800649c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8006418:	68bb      	ldr	r3, [r7, #8]
 800641a:	4a2f      	ldr	r2, [pc, #188]	; (80064d8 <USB_SetTurnaroundTime+0x12c>)
 800641c:	4293      	cmp	r3, r2
 800641e:	d906      	bls.n	800642e <USB_SetTurnaroundTime+0x82>
 8006420:	68bb      	ldr	r3, [r7, #8]
 8006422:	4a2e      	ldr	r2, [pc, #184]	; (80064dc <USB_SetTurnaroundTime+0x130>)
 8006424:	4293      	cmp	r3, r2
 8006426:	d802      	bhi.n	800642e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8006428:	230b      	movs	r3, #11
 800642a:	617b      	str	r3, [r7, #20]
 800642c:	e036      	b.n	800649c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800642e:	68bb      	ldr	r3, [r7, #8]
 8006430:	4a2a      	ldr	r2, [pc, #168]	; (80064dc <USB_SetTurnaroundTime+0x130>)
 8006432:	4293      	cmp	r3, r2
 8006434:	d906      	bls.n	8006444 <USB_SetTurnaroundTime+0x98>
 8006436:	68bb      	ldr	r3, [r7, #8]
 8006438:	4a29      	ldr	r2, [pc, #164]	; (80064e0 <USB_SetTurnaroundTime+0x134>)
 800643a:	4293      	cmp	r3, r2
 800643c:	d802      	bhi.n	8006444 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800643e:	230a      	movs	r3, #10
 8006440:	617b      	str	r3, [r7, #20]
 8006442:	e02b      	b.n	800649c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8006444:	68bb      	ldr	r3, [r7, #8]
 8006446:	4a26      	ldr	r2, [pc, #152]	; (80064e0 <USB_SetTurnaroundTime+0x134>)
 8006448:	4293      	cmp	r3, r2
 800644a:	d906      	bls.n	800645a <USB_SetTurnaroundTime+0xae>
 800644c:	68bb      	ldr	r3, [r7, #8]
 800644e:	4a25      	ldr	r2, [pc, #148]	; (80064e4 <USB_SetTurnaroundTime+0x138>)
 8006450:	4293      	cmp	r3, r2
 8006452:	d202      	bcs.n	800645a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8006454:	2309      	movs	r3, #9
 8006456:	617b      	str	r3, [r7, #20]
 8006458:	e020      	b.n	800649c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800645a:	68bb      	ldr	r3, [r7, #8]
 800645c:	4a21      	ldr	r2, [pc, #132]	; (80064e4 <USB_SetTurnaroundTime+0x138>)
 800645e:	4293      	cmp	r3, r2
 8006460:	d306      	bcc.n	8006470 <USB_SetTurnaroundTime+0xc4>
 8006462:	68bb      	ldr	r3, [r7, #8]
 8006464:	4a20      	ldr	r2, [pc, #128]	; (80064e8 <USB_SetTurnaroundTime+0x13c>)
 8006466:	4293      	cmp	r3, r2
 8006468:	d802      	bhi.n	8006470 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800646a:	2308      	movs	r3, #8
 800646c:	617b      	str	r3, [r7, #20]
 800646e:	e015      	b.n	800649c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8006470:	68bb      	ldr	r3, [r7, #8]
 8006472:	4a1d      	ldr	r2, [pc, #116]	; (80064e8 <USB_SetTurnaroundTime+0x13c>)
 8006474:	4293      	cmp	r3, r2
 8006476:	d906      	bls.n	8006486 <USB_SetTurnaroundTime+0xda>
 8006478:	68bb      	ldr	r3, [r7, #8]
 800647a:	4a1c      	ldr	r2, [pc, #112]	; (80064ec <USB_SetTurnaroundTime+0x140>)
 800647c:	4293      	cmp	r3, r2
 800647e:	d202      	bcs.n	8006486 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8006480:	2307      	movs	r3, #7
 8006482:	617b      	str	r3, [r7, #20]
 8006484:	e00a      	b.n	800649c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8006486:	2306      	movs	r3, #6
 8006488:	617b      	str	r3, [r7, #20]
 800648a:	e007      	b.n	800649c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800648c:	79fb      	ldrb	r3, [r7, #7]
 800648e:	2b00      	cmp	r3, #0
 8006490:	d102      	bne.n	8006498 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8006492:	2309      	movs	r3, #9
 8006494:	617b      	str	r3, [r7, #20]
 8006496:	e001      	b.n	800649c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8006498:	2309      	movs	r3, #9
 800649a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	68db      	ldr	r3, [r3, #12]
 80064a0:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	68da      	ldr	r2, [r3, #12]
 80064ac:	697b      	ldr	r3, [r7, #20]
 80064ae:	029b      	lsls	r3, r3, #10
 80064b0:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80064b4:	431a      	orrs	r2, r3
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80064ba:	2300      	movs	r3, #0
}
 80064bc:	4618      	mov	r0, r3
 80064be:	371c      	adds	r7, #28
 80064c0:	46bd      	mov	sp, r7
 80064c2:	bc80      	pop	{r7}
 80064c4:	4770      	bx	lr
 80064c6:	bf00      	nop
 80064c8:	00d8acbf 	.word	0x00d8acbf
 80064cc:	00e4e1c0 	.word	0x00e4e1c0
 80064d0:	00f42400 	.word	0x00f42400
 80064d4:	01067380 	.word	0x01067380
 80064d8:	011a499f 	.word	0x011a499f
 80064dc:	01312cff 	.word	0x01312cff
 80064e0:	014ca43f 	.word	0x014ca43f
 80064e4:	016e3600 	.word	0x016e3600
 80064e8:	01a6ab1f 	.word	0x01a6ab1f
 80064ec:	01e84800 	.word	0x01e84800

080064f0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80064f0:	b480      	push	{r7}
 80064f2:	b083      	sub	sp, #12
 80064f4:	af00      	add	r7, sp, #0
 80064f6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	689b      	ldr	r3, [r3, #8]
 80064fc:	f043 0201 	orr.w	r2, r3, #1
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006504:	2300      	movs	r3, #0
}
 8006506:	4618      	mov	r0, r3
 8006508:	370c      	adds	r7, #12
 800650a:	46bd      	mov	sp, r7
 800650c:	bc80      	pop	{r7}
 800650e:	4770      	bx	lr

08006510 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006510:	b480      	push	{r7}
 8006512:	b083      	sub	sp, #12
 8006514:	af00      	add	r7, sp, #0
 8006516:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	689b      	ldr	r3, [r3, #8]
 800651c:	f023 0201 	bic.w	r2, r3, #1
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006524:	2300      	movs	r3, #0
}
 8006526:	4618      	mov	r0, r3
 8006528:	370c      	adds	r7, #12
 800652a:	46bd      	mov	sp, r7
 800652c:	bc80      	pop	{r7}
 800652e:	4770      	bx	lr

08006530 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006530:	b580      	push	{r7, lr}
 8006532:	b084      	sub	sp, #16
 8006534:	af00      	add	r7, sp, #0
 8006536:	6078      	str	r0, [r7, #4]
 8006538:	460b      	mov	r3, r1
 800653a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800653c:	2300      	movs	r3, #0
 800653e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	68db      	ldr	r3, [r3, #12]
 8006544:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800654c:	78fb      	ldrb	r3, [r7, #3]
 800654e:	2b01      	cmp	r3, #1
 8006550:	d115      	bne.n	800657e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	68db      	ldr	r3, [r3, #12]
 8006556:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800655e:	2001      	movs	r0, #1
 8006560:	f7fc f840 	bl	80025e4 <HAL_Delay>
      ms++;
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	3301      	adds	r3, #1
 8006568:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800656a:	6878      	ldr	r0, [r7, #4]
 800656c:	f001 f961 	bl	8007832 <USB_GetMode>
 8006570:	4603      	mov	r3, r0
 8006572:	2b01      	cmp	r3, #1
 8006574:	d01e      	beq.n	80065b4 <USB_SetCurrentMode+0x84>
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	2b31      	cmp	r3, #49	; 0x31
 800657a:	d9f0      	bls.n	800655e <USB_SetCurrentMode+0x2e>
 800657c:	e01a      	b.n	80065b4 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800657e:	78fb      	ldrb	r3, [r7, #3]
 8006580:	2b00      	cmp	r3, #0
 8006582:	d115      	bne.n	80065b0 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	68db      	ldr	r3, [r3, #12]
 8006588:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006590:	2001      	movs	r0, #1
 8006592:	f7fc f827 	bl	80025e4 <HAL_Delay>
      ms++;
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	3301      	adds	r3, #1
 800659a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800659c:	6878      	ldr	r0, [r7, #4]
 800659e:	f001 f948 	bl	8007832 <USB_GetMode>
 80065a2:	4603      	mov	r3, r0
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d005      	beq.n	80065b4 <USB_SetCurrentMode+0x84>
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	2b31      	cmp	r3, #49	; 0x31
 80065ac:	d9f0      	bls.n	8006590 <USB_SetCurrentMode+0x60>
 80065ae:	e001      	b.n	80065b4 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80065b0:	2301      	movs	r3, #1
 80065b2:	e005      	b.n	80065c0 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	2b32      	cmp	r3, #50	; 0x32
 80065b8:	d101      	bne.n	80065be <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80065ba:	2301      	movs	r3, #1
 80065bc:	e000      	b.n	80065c0 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80065be:	2300      	movs	r3, #0
}
 80065c0:	4618      	mov	r0, r3
 80065c2:	3710      	adds	r7, #16
 80065c4:	46bd      	mov	sp, r7
 80065c6:	bd80      	pop	{r7, pc}

080065c8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80065c8:	b084      	sub	sp, #16
 80065ca:	b580      	push	{r7, lr}
 80065cc:	b086      	sub	sp, #24
 80065ce:	af00      	add	r7, sp, #0
 80065d0:	6078      	str	r0, [r7, #4]
 80065d2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80065d6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80065da:	2300      	movs	r3, #0
 80065dc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80065e2:	2300      	movs	r3, #0
 80065e4:	613b      	str	r3, [r7, #16]
 80065e6:	e009      	b.n	80065fc <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80065e8:	687a      	ldr	r2, [r7, #4]
 80065ea:	693b      	ldr	r3, [r7, #16]
 80065ec:	3340      	adds	r3, #64	; 0x40
 80065ee:	009b      	lsls	r3, r3, #2
 80065f0:	4413      	add	r3, r2
 80065f2:	2200      	movs	r2, #0
 80065f4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80065f6:	693b      	ldr	r3, [r7, #16]
 80065f8:	3301      	adds	r3, #1
 80065fa:	613b      	str	r3, [r7, #16]
 80065fc:	693b      	ldr	r3, [r7, #16]
 80065fe:	2b0e      	cmp	r3, #14
 8006600:	d9f2      	bls.n	80065e8 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006602:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006604:	2b00      	cmp	r3, #0
 8006606:	d11c      	bne.n	8006642 <USB_DevInit+0x7a>
  {
    /*
     * disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800660e:	685b      	ldr	r3, [r3, #4]
 8006610:	68fa      	ldr	r2, [r7, #12]
 8006612:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006616:	f043 0302 	orr.w	r3, r3, #2
 800661a:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006620:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800662c:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006638:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	639a      	str	r2, [r3, #56]	; 0x38
 8006640:	e00b      	b.n	800665a <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006646:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006652:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006660:	461a      	mov	r2, r3
 8006662:	2300      	movs	r3, #0
 8006664:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800666c:	4619      	mov	r1, r3
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006674:	461a      	mov	r2, r3
 8006676:	680b      	ldr	r3, [r1, #0]
 8006678:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800667a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800667c:	2b01      	cmp	r3, #1
 800667e:	d10c      	bne.n	800669a <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006680:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006682:	2b00      	cmp	r3, #0
 8006684:	d104      	bne.n	8006690 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8006686:	2100      	movs	r1, #0
 8006688:	6878      	ldr	r0, [r7, #4]
 800668a:	f000 f945 	bl	8006918 <USB_SetDevSpeed>
 800668e:	e008      	b.n	80066a2 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006690:	2101      	movs	r1, #1
 8006692:	6878      	ldr	r0, [r7, #4]
 8006694:	f000 f940 	bl	8006918 <USB_SetDevSpeed>
 8006698:	e003      	b.n	80066a2 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800669a:	2103      	movs	r1, #3
 800669c:	6878      	ldr	r0, [r7, #4]
 800669e:	f000 f93b 	bl	8006918 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80066a2:	2110      	movs	r1, #16
 80066a4:	6878      	ldr	r0, [r7, #4]
 80066a6:	f000 f8f3 	bl	8006890 <USB_FlushTxFifo>
 80066aa:	4603      	mov	r3, r0
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d001      	beq.n	80066b4 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 80066b0:	2301      	movs	r3, #1
 80066b2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80066b4:	6878      	ldr	r0, [r7, #4]
 80066b6:	f000 f90f 	bl	80068d8 <USB_FlushRxFifo>
 80066ba:	4603      	mov	r3, r0
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d001      	beq.n	80066c4 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 80066c0:	2301      	movs	r3, #1
 80066c2:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80066ca:	461a      	mov	r2, r3
 80066cc:	2300      	movs	r3, #0
 80066ce:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80066d6:	461a      	mov	r2, r3
 80066d8:	2300      	movs	r3, #0
 80066da:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80066e2:	461a      	mov	r2, r3
 80066e4:	2300      	movs	r3, #0
 80066e6:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80066e8:	2300      	movs	r3, #0
 80066ea:	613b      	str	r3, [r7, #16]
 80066ec:	e043      	b.n	8006776 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80066ee:	693b      	ldr	r3, [r7, #16]
 80066f0:	015a      	lsls	r2, r3, #5
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	4413      	add	r3, r2
 80066f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006700:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006704:	d118      	bne.n	8006738 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8006706:	693b      	ldr	r3, [r7, #16]
 8006708:	2b00      	cmp	r3, #0
 800670a:	d10a      	bne.n	8006722 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800670c:	693b      	ldr	r3, [r7, #16]
 800670e:	015a      	lsls	r2, r3, #5
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	4413      	add	r3, r2
 8006714:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006718:	461a      	mov	r2, r3
 800671a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800671e:	6013      	str	r3, [r2, #0]
 8006720:	e013      	b.n	800674a <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006722:	693b      	ldr	r3, [r7, #16]
 8006724:	015a      	lsls	r2, r3, #5
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	4413      	add	r3, r2
 800672a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800672e:	461a      	mov	r2, r3
 8006730:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006734:	6013      	str	r3, [r2, #0]
 8006736:	e008      	b.n	800674a <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006738:	693b      	ldr	r3, [r7, #16]
 800673a:	015a      	lsls	r2, r3, #5
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	4413      	add	r3, r2
 8006740:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006744:	461a      	mov	r2, r3
 8006746:	2300      	movs	r3, #0
 8006748:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800674a:	693b      	ldr	r3, [r7, #16]
 800674c:	015a      	lsls	r2, r3, #5
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	4413      	add	r3, r2
 8006752:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006756:	461a      	mov	r2, r3
 8006758:	2300      	movs	r3, #0
 800675a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800675c:	693b      	ldr	r3, [r7, #16]
 800675e:	015a      	lsls	r2, r3, #5
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	4413      	add	r3, r2
 8006764:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006768:	461a      	mov	r2, r3
 800676a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800676e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006770:	693b      	ldr	r3, [r7, #16]
 8006772:	3301      	adds	r3, #1
 8006774:	613b      	str	r3, [r7, #16]
 8006776:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006778:	693a      	ldr	r2, [r7, #16]
 800677a:	429a      	cmp	r2, r3
 800677c:	d3b7      	bcc.n	80066ee <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800677e:	2300      	movs	r3, #0
 8006780:	613b      	str	r3, [r7, #16]
 8006782:	e043      	b.n	800680c <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006784:	693b      	ldr	r3, [r7, #16]
 8006786:	015a      	lsls	r2, r3, #5
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	4413      	add	r3, r2
 800678c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006796:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800679a:	d118      	bne.n	80067ce <USB_DevInit+0x206>
    {
      if (i == 0U)
 800679c:	693b      	ldr	r3, [r7, #16]
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d10a      	bne.n	80067b8 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80067a2:	693b      	ldr	r3, [r7, #16]
 80067a4:	015a      	lsls	r2, r3, #5
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	4413      	add	r3, r2
 80067aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067ae:	461a      	mov	r2, r3
 80067b0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80067b4:	6013      	str	r3, [r2, #0]
 80067b6:	e013      	b.n	80067e0 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80067b8:	693b      	ldr	r3, [r7, #16]
 80067ba:	015a      	lsls	r2, r3, #5
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	4413      	add	r3, r2
 80067c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067c4:	461a      	mov	r2, r3
 80067c6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80067ca:	6013      	str	r3, [r2, #0]
 80067cc:	e008      	b.n	80067e0 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80067ce:	693b      	ldr	r3, [r7, #16]
 80067d0:	015a      	lsls	r2, r3, #5
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	4413      	add	r3, r2
 80067d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067da:	461a      	mov	r2, r3
 80067dc:	2300      	movs	r3, #0
 80067de:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80067e0:	693b      	ldr	r3, [r7, #16]
 80067e2:	015a      	lsls	r2, r3, #5
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	4413      	add	r3, r2
 80067e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067ec:	461a      	mov	r2, r3
 80067ee:	2300      	movs	r3, #0
 80067f0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80067f2:	693b      	ldr	r3, [r7, #16]
 80067f4:	015a      	lsls	r2, r3, #5
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	4413      	add	r3, r2
 80067fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067fe:	461a      	mov	r2, r3
 8006800:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006804:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006806:	693b      	ldr	r3, [r7, #16]
 8006808:	3301      	adds	r3, #1
 800680a:	613b      	str	r3, [r7, #16]
 800680c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800680e:	693a      	ldr	r2, [r7, #16]
 8006810:	429a      	cmp	r2, r3
 8006812:	d3b7      	bcc.n	8006784 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800681a:	691b      	ldr	r3, [r3, #16]
 800681c:	68fa      	ldr	r2, [r7, #12]
 800681e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006822:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006826:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	2200      	movs	r2, #0
 800682c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8006834:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006836:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006838:	2b00      	cmp	r3, #0
 800683a:	d105      	bne.n	8006848 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	699b      	ldr	r3, [r3, #24]
 8006840:	f043 0210 	orr.w	r2, r3, #16
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	699a      	ldr	r2, [r3, #24]
 800684c:	4b0f      	ldr	r3, [pc, #60]	; (800688c <USB_DevInit+0x2c4>)
 800684e:	4313      	orrs	r3, r2
 8006850:	687a      	ldr	r2, [r7, #4]
 8006852:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006854:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006856:	2b00      	cmp	r3, #0
 8006858:	d005      	beq.n	8006866 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	699b      	ldr	r3, [r3, #24]
 800685e:	f043 0208 	orr.w	r2, r3, #8
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006866:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006868:	2b01      	cmp	r3, #1
 800686a:	d107      	bne.n	800687c <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	699b      	ldr	r3, [r3, #24]
 8006870:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006874:	f043 0304 	orr.w	r3, r3, #4
 8006878:	687a      	ldr	r2, [r7, #4]
 800687a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800687c:	7dfb      	ldrb	r3, [r7, #23]
}
 800687e:	4618      	mov	r0, r3
 8006880:	3718      	adds	r7, #24
 8006882:	46bd      	mov	sp, r7
 8006884:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006888:	b004      	add	sp, #16
 800688a:	4770      	bx	lr
 800688c:	803c3800 	.word	0x803c3800

08006890 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006890:	b480      	push	{r7}
 8006892:	b085      	sub	sp, #20
 8006894:	af00      	add	r7, sp, #0
 8006896:	6078      	str	r0, [r7, #4]
 8006898:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800689a:	2300      	movs	r3, #0
 800689c:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800689e:	683b      	ldr	r3, [r7, #0]
 80068a0:	019b      	lsls	r3, r3, #6
 80068a2:	f043 0220 	orr.w	r2, r3, #32
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	3301      	adds	r3, #1
 80068ae:	60fb      	str	r3, [r7, #12]
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	4a08      	ldr	r2, [pc, #32]	; (80068d4 <USB_FlushTxFifo+0x44>)
 80068b4:	4293      	cmp	r3, r2
 80068b6:	d901      	bls.n	80068bc <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 80068b8:	2303      	movs	r3, #3
 80068ba:	e006      	b.n	80068ca <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	691b      	ldr	r3, [r3, #16]
 80068c0:	f003 0320 	and.w	r3, r3, #32
 80068c4:	2b20      	cmp	r3, #32
 80068c6:	d0f0      	beq.n	80068aa <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80068c8:	2300      	movs	r3, #0
}
 80068ca:	4618      	mov	r0, r3
 80068cc:	3714      	adds	r7, #20
 80068ce:	46bd      	mov	sp, r7
 80068d0:	bc80      	pop	{r7}
 80068d2:	4770      	bx	lr
 80068d4:	00030d40 	.word	0x00030d40

080068d8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80068d8:	b480      	push	{r7}
 80068da:	b085      	sub	sp, #20
 80068dc:	af00      	add	r7, sp, #0
 80068de:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 80068e0:	2300      	movs	r3, #0
 80068e2:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	2210      	movs	r2, #16
 80068e8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	3301      	adds	r3, #1
 80068ee:	60fb      	str	r3, [r7, #12]
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	4a08      	ldr	r2, [pc, #32]	; (8006914 <USB_FlushRxFifo+0x3c>)
 80068f4:	4293      	cmp	r3, r2
 80068f6:	d901      	bls.n	80068fc <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 80068f8:	2303      	movs	r3, #3
 80068fa:	e006      	b.n	800690a <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	691b      	ldr	r3, [r3, #16]
 8006900:	f003 0310 	and.w	r3, r3, #16
 8006904:	2b10      	cmp	r3, #16
 8006906:	d0f0      	beq.n	80068ea <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8006908:	2300      	movs	r3, #0
}
 800690a:	4618      	mov	r0, r3
 800690c:	3714      	adds	r7, #20
 800690e:	46bd      	mov	sp, r7
 8006910:	bc80      	pop	{r7}
 8006912:	4770      	bx	lr
 8006914:	00030d40 	.word	0x00030d40

08006918 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006918:	b480      	push	{r7}
 800691a:	b085      	sub	sp, #20
 800691c:	af00      	add	r7, sp, #0
 800691e:	6078      	str	r0, [r7, #4]
 8006920:	460b      	mov	r3, r1
 8006922:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800692e:	681a      	ldr	r2, [r3, #0]
 8006930:	78fb      	ldrb	r3, [r7, #3]
 8006932:	68f9      	ldr	r1, [r7, #12]
 8006934:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006938:	4313      	orrs	r3, r2
 800693a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800693c:	2300      	movs	r3, #0
}
 800693e:	4618      	mov	r0, r3
 8006940:	3714      	adds	r7, #20
 8006942:	46bd      	mov	sp, r7
 8006944:	bc80      	pop	{r7}
 8006946:	4770      	bx	lr

08006948 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8006948:	b480      	push	{r7}
 800694a:	b087      	sub	sp, #28
 800694c:	af00      	add	r7, sp, #0
 800694e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8006954:	693b      	ldr	r3, [r7, #16]
 8006956:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800695a:	689b      	ldr	r3, [r3, #8]
 800695c:	f003 0306 	and.w	r3, r3, #6
 8006960:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	2b00      	cmp	r3, #0
 8006966:	d102      	bne.n	800696e <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8006968:	2300      	movs	r3, #0
 800696a:	75fb      	strb	r3, [r7, #23]
 800696c:	e00a      	b.n	8006984 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	2b02      	cmp	r3, #2
 8006972:	d002      	beq.n	800697a <USB_GetDevSpeed+0x32>
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	2b06      	cmp	r3, #6
 8006978:	d102      	bne.n	8006980 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800697a:	2302      	movs	r3, #2
 800697c:	75fb      	strb	r3, [r7, #23]
 800697e:	e001      	b.n	8006984 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8006980:	230f      	movs	r3, #15
 8006982:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8006984:	7dfb      	ldrb	r3, [r7, #23]
}
 8006986:	4618      	mov	r0, r3
 8006988:	371c      	adds	r7, #28
 800698a:	46bd      	mov	sp, r7
 800698c:	bc80      	pop	{r7}
 800698e:	4770      	bx	lr

08006990 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006990:	b480      	push	{r7}
 8006992:	b085      	sub	sp, #20
 8006994:	af00      	add	r7, sp, #0
 8006996:	6078      	str	r0, [r7, #4]
 8006998:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800699e:	683b      	ldr	r3, [r7, #0]
 80069a0:	781b      	ldrb	r3, [r3, #0]
 80069a2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80069a4:	683b      	ldr	r3, [r7, #0]
 80069a6:	785b      	ldrb	r3, [r3, #1]
 80069a8:	2b01      	cmp	r3, #1
 80069aa:	d13a      	bne.n	8006a22 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80069b2:	69da      	ldr	r2, [r3, #28]
 80069b4:	683b      	ldr	r3, [r7, #0]
 80069b6:	781b      	ldrb	r3, [r3, #0]
 80069b8:	f003 030f 	and.w	r3, r3, #15
 80069bc:	2101      	movs	r1, #1
 80069be:	fa01 f303 	lsl.w	r3, r1, r3
 80069c2:	b29b      	uxth	r3, r3
 80069c4:	68f9      	ldr	r1, [r7, #12]
 80069c6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80069ca:	4313      	orrs	r3, r2
 80069cc:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80069ce:	68bb      	ldr	r3, [r7, #8]
 80069d0:	015a      	lsls	r2, r3, #5
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	4413      	add	r3, r2
 80069d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d155      	bne.n	8006a90 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80069e4:	68bb      	ldr	r3, [r7, #8]
 80069e6:	015a      	lsls	r2, r3, #5
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	4413      	add	r3, r2
 80069ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80069f0:	681a      	ldr	r2, [r3, #0]
 80069f2:	683b      	ldr	r3, [r7, #0]
 80069f4:	689b      	ldr	r3, [r3, #8]
 80069f6:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80069fa:	683b      	ldr	r3, [r7, #0]
 80069fc:	78db      	ldrb	r3, [r3, #3]
 80069fe:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006a00:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006a02:	68bb      	ldr	r3, [r7, #8]
 8006a04:	059b      	lsls	r3, r3, #22
 8006a06:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006a08:	4313      	orrs	r3, r2
 8006a0a:	68ba      	ldr	r2, [r7, #8]
 8006a0c:	0151      	lsls	r1, r2, #5
 8006a0e:	68fa      	ldr	r2, [r7, #12]
 8006a10:	440a      	add	r2, r1
 8006a12:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006a16:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006a1a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006a1e:	6013      	str	r3, [r2, #0]
 8006a20:	e036      	b.n	8006a90 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a28:	69da      	ldr	r2, [r3, #28]
 8006a2a:	683b      	ldr	r3, [r7, #0]
 8006a2c:	781b      	ldrb	r3, [r3, #0]
 8006a2e:	f003 030f 	and.w	r3, r3, #15
 8006a32:	2101      	movs	r1, #1
 8006a34:	fa01 f303 	lsl.w	r3, r1, r3
 8006a38:	041b      	lsls	r3, r3, #16
 8006a3a:	68f9      	ldr	r1, [r7, #12]
 8006a3c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006a40:	4313      	orrs	r3, r2
 8006a42:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8006a44:	68bb      	ldr	r3, [r7, #8]
 8006a46:	015a      	lsls	r2, r3, #5
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	4413      	add	r3, r2
 8006a4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d11a      	bne.n	8006a90 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006a5a:	68bb      	ldr	r3, [r7, #8]
 8006a5c:	015a      	lsls	r2, r3, #5
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	4413      	add	r3, r2
 8006a62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a66:	681a      	ldr	r2, [r3, #0]
 8006a68:	683b      	ldr	r3, [r7, #0]
 8006a6a:	689b      	ldr	r3, [r3, #8]
 8006a6c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8006a70:	683b      	ldr	r3, [r7, #0]
 8006a72:	78db      	ldrb	r3, [r3, #3]
 8006a74:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006a76:	430b      	orrs	r3, r1
 8006a78:	4313      	orrs	r3, r2
 8006a7a:	68ba      	ldr	r2, [r7, #8]
 8006a7c:	0151      	lsls	r1, r2, #5
 8006a7e:	68fa      	ldr	r2, [r7, #12]
 8006a80:	440a      	add	r2, r1
 8006a82:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006a86:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006a8a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006a8e:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8006a90:	2300      	movs	r3, #0
}
 8006a92:	4618      	mov	r0, r3
 8006a94:	3714      	adds	r7, #20
 8006a96:	46bd      	mov	sp, r7
 8006a98:	bc80      	pop	{r7}
 8006a9a:	4770      	bx	lr

08006a9c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006a9c:	b480      	push	{r7}
 8006a9e:	b085      	sub	sp, #20
 8006aa0:	af00      	add	r7, sp, #0
 8006aa2:	6078      	str	r0, [r7, #4]
 8006aa4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006aaa:	683b      	ldr	r3, [r7, #0]
 8006aac:	781b      	ldrb	r3, [r3, #0]
 8006aae:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8006ab0:	683b      	ldr	r3, [r7, #0]
 8006ab2:	785b      	ldrb	r3, [r3, #1]
 8006ab4:	2b01      	cmp	r3, #1
 8006ab6:	d161      	bne.n	8006b7c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006ab8:	68bb      	ldr	r3, [r7, #8]
 8006aba:	015a      	lsls	r2, r3, #5
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	4413      	add	r3, r2
 8006ac0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006aca:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006ace:	d11f      	bne.n	8006b10 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8006ad0:	68bb      	ldr	r3, [r7, #8]
 8006ad2:	015a      	lsls	r2, r3, #5
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	4413      	add	r3, r2
 8006ad8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	68ba      	ldr	r2, [r7, #8]
 8006ae0:	0151      	lsls	r1, r2, #5
 8006ae2:	68fa      	ldr	r2, [r7, #12]
 8006ae4:	440a      	add	r2, r1
 8006ae6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006aea:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006aee:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8006af0:	68bb      	ldr	r3, [r7, #8]
 8006af2:	015a      	lsls	r2, r3, #5
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	4413      	add	r3, r2
 8006af8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	68ba      	ldr	r2, [r7, #8]
 8006b00:	0151      	lsls	r1, r2, #5
 8006b02:	68fa      	ldr	r2, [r7, #12]
 8006b04:	440a      	add	r2, r1
 8006b06:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006b0a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006b0e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b16:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006b18:	683b      	ldr	r3, [r7, #0]
 8006b1a:	781b      	ldrb	r3, [r3, #0]
 8006b1c:	f003 030f 	and.w	r3, r3, #15
 8006b20:	2101      	movs	r1, #1
 8006b22:	fa01 f303 	lsl.w	r3, r1, r3
 8006b26:	b29b      	uxth	r3, r3
 8006b28:	43db      	mvns	r3, r3
 8006b2a:	68f9      	ldr	r1, [r7, #12]
 8006b2c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006b30:	4013      	ands	r3, r2
 8006b32:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b3a:	69da      	ldr	r2, [r3, #28]
 8006b3c:	683b      	ldr	r3, [r7, #0]
 8006b3e:	781b      	ldrb	r3, [r3, #0]
 8006b40:	f003 030f 	and.w	r3, r3, #15
 8006b44:	2101      	movs	r1, #1
 8006b46:	fa01 f303 	lsl.w	r3, r1, r3
 8006b4a:	b29b      	uxth	r3, r3
 8006b4c:	43db      	mvns	r3, r3
 8006b4e:	68f9      	ldr	r1, [r7, #12]
 8006b50:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006b54:	4013      	ands	r3, r2
 8006b56:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8006b58:	68bb      	ldr	r3, [r7, #8]
 8006b5a:	015a      	lsls	r2, r3, #5
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	4413      	add	r3, r2
 8006b60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b64:	681a      	ldr	r2, [r3, #0]
 8006b66:	68bb      	ldr	r3, [r7, #8]
 8006b68:	0159      	lsls	r1, r3, #5
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	440b      	add	r3, r1
 8006b6e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b72:	4619      	mov	r1, r3
 8006b74:	4b35      	ldr	r3, [pc, #212]	; (8006c4c <USB_DeactivateEndpoint+0x1b0>)
 8006b76:	4013      	ands	r3, r2
 8006b78:	600b      	str	r3, [r1, #0]
 8006b7a:	e060      	b.n	8006c3e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006b7c:	68bb      	ldr	r3, [r7, #8]
 8006b7e:	015a      	lsls	r2, r3, #5
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	4413      	add	r3, r2
 8006b84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006b8e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006b92:	d11f      	bne.n	8006bd4 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8006b94:	68bb      	ldr	r3, [r7, #8]
 8006b96:	015a      	lsls	r2, r3, #5
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	4413      	add	r3, r2
 8006b9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	68ba      	ldr	r2, [r7, #8]
 8006ba4:	0151      	lsls	r1, r2, #5
 8006ba6:	68fa      	ldr	r2, [r7, #12]
 8006ba8:	440a      	add	r2, r1
 8006baa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006bae:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006bb2:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8006bb4:	68bb      	ldr	r3, [r7, #8]
 8006bb6:	015a      	lsls	r2, r3, #5
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	4413      	add	r3, r2
 8006bbc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	68ba      	ldr	r2, [r7, #8]
 8006bc4:	0151      	lsls	r1, r2, #5
 8006bc6:	68fa      	ldr	r2, [r7, #12]
 8006bc8:	440a      	add	r2, r1
 8006bca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006bce:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006bd2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006bda:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006bdc:	683b      	ldr	r3, [r7, #0]
 8006bde:	781b      	ldrb	r3, [r3, #0]
 8006be0:	f003 030f 	and.w	r3, r3, #15
 8006be4:	2101      	movs	r1, #1
 8006be6:	fa01 f303 	lsl.w	r3, r1, r3
 8006bea:	041b      	lsls	r3, r3, #16
 8006bec:	43db      	mvns	r3, r3
 8006bee:	68f9      	ldr	r1, [r7, #12]
 8006bf0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006bf4:	4013      	ands	r3, r2
 8006bf6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006bfe:	69da      	ldr	r2, [r3, #28]
 8006c00:	683b      	ldr	r3, [r7, #0]
 8006c02:	781b      	ldrb	r3, [r3, #0]
 8006c04:	f003 030f 	and.w	r3, r3, #15
 8006c08:	2101      	movs	r1, #1
 8006c0a:	fa01 f303 	lsl.w	r3, r1, r3
 8006c0e:	041b      	lsls	r3, r3, #16
 8006c10:	43db      	mvns	r3, r3
 8006c12:	68f9      	ldr	r1, [r7, #12]
 8006c14:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006c18:	4013      	ands	r3, r2
 8006c1a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8006c1c:	68bb      	ldr	r3, [r7, #8]
 8006c1e:	015a      	lsls	r2, r3, #5
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	4413      	add	r3, r2
 8006c24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c28:	681a      	ldr	r2, [r3, #0]
 8006c2a:	68bb      	ldr	r3, [r7, #8]
 8006c2c:	0159      	lsls	r1, r3, #5
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	440b      	add	r3, r1
 8006c32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c36:	4619      	mov	r1, r3
 8006c38:	4b05      	ldr	r3, [pc, #20]	; (8006c50 <USB_DeactivateEndpoint+0x1b4>)
 8006c3a:	4013      	ands	r3, r2
 8006c3c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8006c3e:	2300      	movs	r3, #0
}
 8006c40:	4618      	mov	r0, r3
 8006c42:	3714      	adds	r7, #20
 8006c44:	46bd      	mov	sp, r7
 8006c46:	bc80      	pop	{r7}
 8006c48:	4770      	bx	lr
 8006c4a:	bf00      	nop
 8006c4c:	ec337800 	.word	0xec337800
 8006c50:	eff37800 	.word	0xeff37800

08006c54 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006c54:	b580      	push	{r7, lr}
 8006c56:	b08a      	sub	sp, #40	; 0x28
 8006c58:	af02      	add	r7, sp, #8
 8006c5a:	60f8      	str	r0, [r7, #12]
 8006c5c:	60b9      	str	r1, [r7, #8]
 8006c5e:	4613      	mov	r3, r2
 8006c60:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8006c66:	68bb      	ldr	r3, [r7, #8]
 8006c68:	781b      	ldrb	r3, [r3, #0]
 8006c6a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006c6c:	68bb      	ldr	r3, [r7, #8]
 8006c6e:	785b      	ldrb	r3, [r3, #1]
 8006c70:	2b01      	cmp	r3, #1
 8006c72:	f040 815c 	bne.w	8006f2e <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8006c76:	68bb      	ldr	r3, [r7, #8]
 8006c78:	695b      	ldr	r3, [r3, #20]
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d132      	bne.n	8006ce4 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006c7e:	69bb      	ldr	r3, [r7, #24]
 8006c80:	015a      	lsls	r2, r3, #5
 8006c82:	69fb      	ldr	r3, [r7, #28]
 8006c84:	4413      	add	r3, r2
 8006c86:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c8a:	691b      	ldr	r3, [r3, #16]
 8006c8c:	69ba      	ldr	r2, [r7, #24]
 8006c8e:	0151      	lsls	r1, r2, #5
 8006c90:	69fa      	ldr	r2, [r7, #28]
 8006c92:	440a      	add	r2, r1
 8006c94:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006c98:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006c9c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006ca0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006ca2:	69bb      	ldr	r3, [r7, #24]
 8006ca4:	015a      	lsls	r2, r3, #5
 8006ca6:	69fb      	ldr	r3, [r7, #28]
 8006ca8:	4413      	add	r3, r2
 8006caa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006cae:	691b      	ldr	r3, [r3, #16]
 8006cb0:	69ba      	ldr	r2, [r7, #24]
 8006cb2:	0151      	lsls	r1, r2, #5
 8006cb4:	69fa      	ldr	r2, [r7, #28]
 8006cb6:	440a      	add	r2, r1
 8006cb8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006cbc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006cc0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006cc2:	69bb      	ldr	r3, [r7, #24]
 8006cc4:	015a      	lsls	r2, r3, #5
 8006cc6:	69fb      	ldr	r3, [r7, #28]
 8006cc8:	4413      	add	r3, r2
 8006cca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006cce:	691b      	ldr	r3, [r3, #16]
 8006cd0:	69ba      	ldr	r2, [r7, #24]
 8006cd2:	0151      	lsls	r1, r2, #5
 8006cd4:	69fa      	ldr	r2, [r7, #28]
 8006cd6:	440a      	add	r2, r1
 8006cd8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006cdc:	0cdb      	lsrs	r3, r3, #19
 8006cde:	04db      	lsls	r3, r3, #19
 8006ce0:	6113      	str	r3, [r2, #16]
 8006ce2:	e074      	b.n	8006dce <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006ce4:	69bb      	ldr	r3, [r7, #24]
 8006ce6:	015a      	lsls	r2, r3, #5
 8006ce8:	69fb      	ldr	r3, [r7, #28]
 8006cea:	4413      	add	r3, r2
 8006cec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006cf0:	691b      	ldr	r3, [r3, #16]
 8006cf2:	69ba      	ldr	r2, [r7, #24]
 8006cf4:	0151      	lsls	r1, r2, #5
 8006cf6:	69fa      	ldr	r2, [r7, #28]
 8006cf8:	440a      	add	r2, r1
 8006cfa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006cfe:	0cdb      	lsrs	r3, r3, #19
 8006d00:	04db      	lsls	r3, r3, #19
 8006d02:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006d04:	69bb      	ldr	r3, [r7, #24]
 8006d06:	015a      	lsls	r2, r3, #5
 8006d08:	69fb      	ldr	r3, [r7, #28]
 8006d0a:	4413      	add	r3, r2
 8006d0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d10:	691b      	ldr	r3, [r3, #16]
 8006d12:	69ba      	ldr	r2, [r7, #24]
 8006d14:	0151      	lsls	r1, r2, #5
 8006d16:	69fa      	ldr	r2, [r7, #28]
 8006d18:	440a      	add	r2, r1
 8006d1a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006d1e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006d22:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006d26:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8006d28:	69bb      	ldr	r3, [r7, #24]
 8006d2a:	015a      	lsls	r2, r3, #5
 8006d2c:	69fb      	ldr	r3, [r7, #28]
 8006d2e:	4413      	add	r3, r2
 8006d30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d34:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8006d36:	68bb      	ldr	r3, [r7, #8]
 8006d38:	6959      	ldr	r1, [r3, #20]
 8006d3a:	68bb      	ldr	r3, [r7, #8]
 8006d3c:	689b      	ldr	r3, [r3, #8]
 8006d3e:	440b      	add	r3, r1
 8006d40:	1e59      	subs	r1, r3, #1
 8006d42:	68bb      	ldr	r3, [r7, #8]
 8006d44:	689b      	ldr	r3, [r3, #8]
 8006d46:	fbb1 f3f3 	udiv	r3, r1, r3
 8006d4a:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8006d4c:	4b9d      	ldr	r3, [pc, #628]	; (8006fc4 <USB_EPStartXfer+0x370>)
 8006d4e:	400b      	ands	r3, r1
 8006d50:	69b9      	ldr	r1, [r7, #24]
 8006d52:	0148      	lsls	r0, r1, #5
 8006d54:	69f9      	ldr	r1, [r7, #28]
 8006d56:	4401      	add	r1, r0
 8006d58:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006d5c:	4313      	orrs	r3, r2
 8006d5e:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006d60:	69bb      	ldr	r3, [r7, #24]
 8006d62:	015a      	lsls	r2, r3, #5
 8006d64:	69fb      	ldr	r3, [r7, #28]
 8006d66:	4413      	add	r3, r2
 8006d68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d6c:	691a      	ldr	r2, [r3, #16]
 8006d6e:	68bb      	ldr	r3, [r7, #8]
 8006d70:	695b      	ldr	r3, [r3, #20]
 8006d72:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006d76:	69b9      	ldr	r1, [r7, #24]
 8006d78:	0148      	lsls	r0, r1, #5
 8006d7a:	69f9      	ldr	r1, [r7, #28]
 8006d7c:	4401      	add	r1, r0
 8006d7e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006d82:	4313      	orrs	r3, r2
 8006d84:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8006d86:	68bb      	ldr	r3, [r7, #8]
 8006d88:	78db      	ldrb	r3, [r3, #3]
 8006d8a:	2b01      	cmp	r3, #1
 8006d8c:	d11f      	bne.n	8006dce <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8006d8e:	69bb      	ldr	r3, [r7, #24]
 8006d90:	015a      	lsls	r2, r3, #5
 8006d92:	69fb      	ldr	r3, [r7, #28]
 8006d94:	4413      	add	r3, r2
 8006d96:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d9a:	691b      	ldr	r3, [r3, #16]
 8006d9c:	69ba      	ldr	r2, [r7, #24]
 8006d9e:	0151      	lsls	r1, r2, #5
 8006da0:	69fa      	ldr	r2, [r7, #28]
 8006da2:	440a      	add	r2, r1
 8006da4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006da8:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8006dac:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8006dae:	69bb      	ldr	r3, [r7, #24]
 8006db0:	015a      	lsls	r2, r3, #5
 8006db2:	69fb      	ldr	r3, [r7, #28]
 8006db4:	4413      	add	r3, r2
 8006db6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006dba:	691b      	ldr	r3, [r3, #16]
 8006dbc:	69ba      	ldr	r2, [r7, #24]
 8006dbe:	0151      	lsls	r1, r2, #5
 8006dc0:	69fa      	ldr	r2, [r7, #28]
 8006dc2:	440a      	add	r2, r1
 8006dc4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006dc8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006dcc:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8006dce:	79fb      	ldrb	r3, [r7, #7]
 8006dd0:	2b01      	cmp	r3, #1
 8006dd2:	d14b      	bne.n	8006e6c <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006dd4:	68bb      	ldr	r3, [r7, #8]
 8006dd6:	691b      	ldr	r3, [r3, #16]
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d009      	beq.n	8006df0 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006ddc:	69bb      	ldr	r3, [r7, #24]
 8006dde:	015a      	lsls	r2, r3, #5
 8006de0:	69fb      	ldr	r3, [r7, #28]
 8006de2:	4413      	add	r3, r2
 8006de4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006de8:	461a      	mov	r2, r3
 8006dea:	68bb      	ldr	r3, [r7, #8]
 8006dec:	691b      	ldr	r3, [r3, #16]
 8006dee:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8006df0:	68bb      	ldr	r3, [r7, #8]
 8006df2:	78db      	ldrb	r3, [r3, #3]
 8006df4:	2b01      	cmp	r3, #1
 8006df6:	d128      	bne.n	8006e4a <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006df8:	69fb      	ldr	r3, [r7, #28]
 8006dfa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006dfe:	689b      	ldr	r3, [r3, #8]
 8006e00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d110      	bne.n	8006e2a <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006e08:	69bb      	ldr	r3, [r7, #24]
 8006e0a:	015a      	lsls	r2, r3, #5
 8006e0c:	69fb      	ldr	r3, [r7, #28]
 8006e0e:	4413      	add	r3, r2
 8006e10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	69ba      	ldr	r2, [r7, #24]
 8006e18:	0151      	lsls	r1, r2, #5
 8006e1a:	69fa      	ldr	r2, [r7, #28]
 8006e1c:	440a      	add	r2, r1
 8006e1e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006e22:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006e26:	6013      	str	r3, [r2, #0]
 8006e28:	e00f      	b.n	8006e4a <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006e2a:	69bb      	ldr	r3, [r7, #24]
 8006e2c:	015a      	lsls	r2, r3, #5
 8006e2e:	69fb      	ldr	r3, [r7, #28]
 8006e30:	4413      	add	r3, r2
 8006e32:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	69ba      	ldr	r2, [r7, #24]
 8006e3a:	0151      	lsls	r1, r2, #5
 8006e3c:	69fa      	ldr	r2, [r7, #28]
 8006e3e:	440a      	add	r2, r1
 8006e40:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006e44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006e48:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006e4a:	69bb      	ldr	r3, [r7, #24]
 8006e4c:	015a      	lsls	r2, r3, #5
 8006e4e:	69fb      	ldr	r3, [r7, #28]
 8006e50:	4413      	add	r3, r2
 8006e52:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	69ba      	ldr	r2, [r7, #24]
 8006e5a:	0151      	lsls	r1, r2, #5
 8006e5c:	69fa      	ldr	r2, [r7, #28]
 8006e5e:	440a      	add	r2, r1
 8006e60:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006e64:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006e68:	6013      	str	r3, [r2, #0]
 8006e6a:	e12f      	b.n	80070cc <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006e6c:	69bb      	ldr	r3, [r7, #24]
 8006e6e:	015a      	lsls	r2, r3, #5
 8006e70:	69fb      	ldr	r3, [r7, #28]
 8006e72:	4413      	add	r3, r2
 8006e74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	69ba      	ldr	r2, [r7, #24]
 8006e7c:	0151      	lsls	r1, r2, #5
 8006e7e:	69fa      	ldr	r2, [r7, #28]
 8006e80:	440a      	add	r2, r1
 8006e82:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006e86:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006e8a:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006e8c:	68bb      	ldr	r3, [r7, #8]
 8006e8e:	78db      	ldrb	r3, [r3, #3]
 8006e90:	2b01      	cmp	r3, #1
 8006e92:	d015      	beq.n	8006ec0 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8006e94:	68bb      	ldr	r3, [r7, #8]
 8006e96:	695b      	ldr	r3, [r3, #20]
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	f000 8117 	beq.w	80070cc <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8006e9e:	69fb      	ldr	r3, [r7, #28]
 8006ea0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ea4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006ea6:	68bb      	ldr	r3, [r7, #8]
 8006ea8:	781b      	ldrb	r3, [r3, #0]
 8006eaa:	f003 030f 	and.w	r3, r3, #15
 8006eae:	2101      	movs	r1, #1
 8006eb0:	fa01 f303 	lsl.w	r3, r1, r3
 8006eb4:	69f9      	ldr	r1, [r7, #28]
 8006eb6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006eba:	4313      	orrs	r3, r2
 8006ebc:	634b      	str	r3, [r1, #52]	; 0x34
 8006ebe:	e105      	b.n	80070cc <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006ec0:	69fb      	ldr	r3, [r7, #28]
 8006ec2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ec6:	689b      	ldr	r3, [r3, #8]
 8006ec8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d110      	bne.n	8006ef2 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006ed0:	69bb      	ldr	r3, [r7, #24]
 8006ed2:	015a      	lsls	r2, r3, #5
 8006ed4:	69fb      	ldr	r3, [r7, #28]
 8006ed6:	4413      	add	r3, r2
 8006ed8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	69ba      	ldr	r2, [r7, #24]
 8006ee0:	0151      	lsls	r1, r2, #5
 8006ee2:	69fa      	ldr	r2, [r7, #28]
 8006ee4:	440a      	add	r2, r1
 8006ee6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006eea:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006eee:	6013      	str	r3, [r2, #0]
 8006ef0:	e00f      	b.n	8006f12 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006ef2:	69bb      	ldr	r3, [r7, #24]
 8006ef4:	015a      	lsls	r2, r3, #5
 8006ef6:	69fb      	ldr	r3, [r7, #28]
 8006ef8:	4413      	add	r3, r2
 8006efa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	69ba      	ldr	r2, [r7, #24]
 8006f02:	0151      	lsls	r1, r2, #5
 8006f04:	69fa      	ldr	r2, [r7, #28]
 8006f06:	440a      	add	r2, r1
 8006f08:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006f0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006f10:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8006f12:	68bb      	ldr	r3, [r7, #8]
 8006f14:	68d9      	ldr	r1, [r3, #12]
 8006f16:	68bb      	ldr	r3, [r7, #8]
 8006f18:	781a      	ldrb	r2, [r3, #0]
 8006f1a:	68bb      	ldr	r3, [r7, #8]
 8006f1c:	695b      	ldr	r3, [r3, #20]
 8006f1e:	b298      	uxth	r0, r3
 8006f20:	79fb      	ldrb	r3, [r7, #7]
 8006f22:	9300      	str	r3, [sp, #0]
 8006f24:	4603      	mov	r3, r0
 8006f26:	68f8      	ldr	r0, [r7, #12]
 8006f28:	f000 fa2a 	bl	8007380 <USB_WritePacket>
 8006f2c:	e0ce      	b.n	80070cc <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006f2e:	69bb      	ldr	r3, [r7, #24]
 8006f30:	015a      	lsls	r2, r3, #5
 8006f32:	69fb      	ldr	r3, [r7, #28]
 8006f34:	4413      	add	r3, r2
 8006f36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f3a:	691b      	ldr	r3, [r3, #16]
 8006f3c:	69ba      	ldr	r2, [r7, #24]
 8006f3e:	0151      	lsls	r1, r2, #5
 8006f40:	69fa      	ldr	r2, [r7, #28]
 8006f42:	440a      	add	r2, r1
 8006f44:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006f48:	0cdb      	lsrs	r3, r3, #19
 8006f4a:	04db      	lsls	r3, r3, #19
 8006f4c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006f4e:	69bb      	ldr	r3, [r7, #24]
 8006f50:	015a      	lsls	r2, r3, #5
 8006f52:	69fb      	ldr	r3, [r7, #28]
 8006f54:	4413      	add	r3, r2
 8006f56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f5a:	691b      	ldr	r3, [r3, #16]
 8006f5c:	69ba      	ldr	r2, [r7, #24]
 8006f5e:	0151      	lsls	r1, r2, #5
 8006f60:	69fa      	ldr	r2, [r7, #28]
 8006f62:	440a      	add	r2, r1
 8006f64:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006f68:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006f6c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006f70:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8006f72:	68bb      	ldr	r3, [r7, #8]
 8006f74:	695b      	ldr	r3, [r3, #20]
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d126      	bne.n	8006fc8 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8006f7a:	69bb      	ldr	r3, [r7, #24]
 8006f7c:	015a      	lsls	r2, r3, #5
 8006f7e:	69fb      	ldr	r3, [r7, #28]
 8006f80:	4413      	add	r3, r2
 8006f82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f86:	691a      	ldr	r2, [r3, #16]
 8006f88:	68bb      	ldr	r3, [r7, #8]
 8006f8a:	689b      	ldr	r3, [r3, #8]
 8006f8c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006f90:	69b9      	ldr	r1, [r7, #24]
 8006f92:	0148      	lsls	r0, r1, #5
 8006f94:	69f9      	ldr	r1, [r7, #28]
 8006f96:	4401      	add	r1, r0
 8006f98:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006f9c:	4313      	orrs	r3, r2
 8006f9e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006fa0:	69bb      	ldr	r3, [r7, #24]
 8006fa2:	015a      	lsls	r2, r3, #5
 8006fa4:	69fb      	ldr	r3, [r7, #28]
 8006fa6:	4413      	add	r3, r2
 8006fa8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006fac:	691b      	ldr	r3, [r3, #16]
 8006fae:	69ba      	ldr	r2, [r7, #24]
 8006fb0:	0151      	lsls	r1, r2, #5
 8006fb2:	69fa      	ldr	r2, [r7, #28]
 8006fb4:	440a      	add	r2, r1
 8006fb6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006fba:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006fbe:	6113      	str	r3, [r2, #16]
 8006fc0:	e036      	b.n	8007030 <USB_EPStartXfer+0x3dc>
 8006fc2:	bf00      	nop
 8006fc4:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8006fc8:	68bb      	ldr	r3, [r7, #8]
 8006fca:	695a      	ldr	r2, [r3, #20]
 8006fcc:	68bb      	ldr	r3, [r7, #8]
 8006fce:	689b      	ldr	r3, [r3, #8]
 8006fd0:	4413      	add	r3, r2
 8006fd2:	1e5a      	subs	r2, r3, #1
 8006fd4:	68bb      	ldr	r3, [r7, #8]
 8006fd6:	689b      	ldr	r3, [r3, #8]
 8006fd8:	fbb2 f3f3 	udiv	r3, r2, r3
 8006fdc:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8006fde:	69bb      	ldr	r3, [r7, #24]
 8006fe0:	015a      	lsls	r2, r3, #5
 8006fe2:	69fb      	ldr	r3, [r7, #28]
 8006fe4:	4413      	add	r3, r2
 8006fe6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006fea:	691a      	ldr	r2, [r3, #16]
 8006fec:	8afb      	ldrh	r3, [r7, #22]
 8006fee:	04d9      	lsls	r1, r3, #19
 8006ff0:	4b39      	ldr	r3, [pc, #228]	; (80070d8 <USB_EPStartXfer+0x484>)
 8006ff2:	400b      	ands	r3, r1
 8006ff4:	69b9      	ldr	r1, [r7, #24]
 8006ff6:	0148      	lsls	r0, r1, #5
 8006ff8:	69f9      	ldr	r1, [r7, #28]
 8006ffa:	4401      	add	r1, r0
 8006ffc:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007000:	4313      	orrs	r3, r2
 8007002:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8007004:	69bb      	ldr	r3, [r7, #24]
 8007006:	015a      	lsls	r2, r3, #5
 8007008:	69fb      	ldr	r3, [r7, #28]
 800700a:	4413      	add	r3, r2
 800700c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007010:	691a      	ldr	r2, [r3, #16]
 8007012:	68bb      	ldr	r3, [r7, #8]
 8007014:	689b      	ldr	r3, [r3, #8]
 8007016:	8af9      	ldrh	r1, [r7, #22]
 8007018:	fb01 f303 	mul.w	r3, r1, r3
 800701c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007020:	69b9      	ldr	r1, [r7, #24]
 8007022:	0148      	lsls	r0, r1, #5
 8007024:	69f9      	ldr	r1, [r7, #28]
 8007026:	4401      	add	r1, r0
 8007028:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800702c:	4313      	orrs	r3, r2
 800702e:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8007030:	79fb      	ldrb	r3, [r7, #7]
 8007032:	2b01      	cmp	r3, #1
 8007034:	d10d      	bne.n	8007052 <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8007036:	68bb      	ldr	r3, [r7, #8]
 8007038:	68db      	ldr	r3, [r3, #12]
 800703a:	2b00      	cmp	r3, #0
 800703c:	d009      	beq.n	8007052 <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800703e:	68bb      	ldr	r3, [r7, #8]
 8007040:	68d9      	ldr	r1, [r3, #12]
 8007042:	69bb      	ldr	r3, [r7, #24]
 8007044:	015a      	lsls	r2, r3, #5
 8007046:	69fb      	ldr	r3, [r7, #28]
 8007048:	4413      	add	r3, r2
 800704a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800704e:	460a      	mov	r2, r1
 8007050:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8007052:	68bb      	ldr	r3, [r7, #8]
 8007054:	78db      	ldrb	r3, [r3, #3]
 8007056:	2b01      	cmp	r3, #1
 8007058:	d128      	bne.n	80070ac <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800705a:	69fb      	ldr	r3, [r7, #28]
 800705c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007060:	689b      	ldr	r3, [r3, #8]
 8007062:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007066:	2b00      	cmp	r3, #0
 8007068:	d110      	bne.n	800708c <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800706a:	69bb      	ldr	r3, [r7, #24]
 800706c:	015a      	lsls	r2, r3, #5
 800706e:	69fb      	ldr	r3, [r7, #28]
 8007070:	4413      	add	r3, r2
 8007072:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	69ba      	ldr	r2, [r7, #24]
 800707a:	0151      	lsls	r1, r2, #5
 800707c:	69fa      	ldr	r2, [r7, #28]
 800707e:	440a      	add	r2, r1
 8007080:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007084:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007088:	6013      	str	r3, [r2, #0]
 800708a:	e00f      	b.n	80070ac <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800708c:	69bb      	ldr	r3, [r7, #24]
 800708e:	015a      	lsls	r2, r3, #5
 8007090:	69fb      	ldr	r3, [r7, #28]
 8007092:	4413      	add	r3, r2
 8007094:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	69ba      	ldr	r2, [r7, #24]
 800709c:	0151      	lsls	r1, r2, #5
 800709e:	69fa      	ldr	r2, [r7, #28]
 80070a0:	440a      	add	r2, r1
 80070a2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80070a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80070aa:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80070ac:	69bb      	ldr	r3, [r7, #24]
 80070ae:	015a      	lsls	r2, r3, #5
 80070b0:	69fb      	ldr	r3, [r7, #28]
 80070b2:	4413      	add	r3, r2
 80070b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	69ba      	ldr	r2, [r7, #24]
 80070bc:	0151      	lsls	r1, r2, #5
 80070be:	69fa      	ldr	r2, [r7, #28]
 80070c0:	440a      	add	r2, r1
 80070c2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80070c6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80070ca:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80070cc:	2300      	movs	r3, #0
}
 80070ce:	4618      	mov	r0, r3
 80070d0:	3720      	adds	r7, #32
 80070d2:	46bd      	mov	sp, r7
 80070d4:	bd80      	pop	{r7, pc}
 80070d6:	bf00      	nop
 80070d8:	1ff80000 	.word	0x1ff80000

080070dc <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80070dc:	b480      	push	{r7}
 80070de:	b087      	sub	sp, #28
 80070e0:	af00      	add	r7, sp, #0
 80070e2:	60f8      	str	r0, [r7, #12]
 80070e4:	60b9      	str	r1, [r7, #8]
 80070e6:	4613      	mov	r3, r2
 80070e8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80070ee:	68bb      	ldr	r3, [r7, #8]
 80070f0:	781b      	ldrb	r3, [r3, #0]
 80070f2:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80070f4:	68bb      	ldr	r3, [r7, #8]
 80070f6:	785b      	ldrb	r3, [r3, #1]
 80070f8:	2b01      	cmp	r3, #1
 80070fa:	f040 80cd 	bne.w	8007298 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80070fe:	68bb      	ldr	r3, [r7, #8]
 8007100:	695b      	ldr	r3, [r3, #20]
 8007102:	2b00      	cmp	r3, #0
 8007104:	d132      	bne.n	800716c <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007106:	693b      	ldr	r3, [r7, #16]
 8007108:	015a      	lsls	r2, r3, #5
 800710a:	697b      	ldr	r3, [r7, #20]
 800710c:	4413      	add	r3, r2
 800710e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007112:	691b      	ldr	r3, [r3, #16]
 8007114:	693a      	ldr	r2, [r7, #16]
 8007116:	0151      	lsls	r1, r2, #5
 8007118:	697a      	ldr	r2, [r7, #20]
 800711a:	440a      	add	r2, r1
 800711c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007120:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007124:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007128:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800712a:	693b      	ldr	r3, [r7, #16]
 800712c:	015a      	lsls	r2, r3, #5
 800712e:	697b      	ldr	r3, [r7, #20]
 8007130:	4413      	add	r3, r2
 8007132:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007136:	691b      	ldr	r3, [r3, #16]
 8007138:	693a      	ldr	r2, [r7, #16]
 800713a:	0151      	lsls	r1, r2, #5
 800713c:	697a      	ldr	r2, [r7, #20]
 800713e:	440a      	add	r2, r1
 8007140:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007144:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007148:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800714a:	693b      	ldr	r3, [r7, #16]
 800714c:	015a      	lsls	r2, r3, #5
 800714e:	697b      	ldr	r3, [r7, #20]
 8007150:	4413      	add	r3, r2
 8007152:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007156:	691b      	ldr	r3, [r3, #16]
 8007158:	693a      	ldr	r2, [r7, #16]
 800715a:	0151      	lsls	r1, r2, #5
 800715c:	697a      	ldr	r2, [r7, #20]
 800715e:	440a      	add	r2, r1
 8007160:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007164:	0cdb      	lsrs	r3, r3, #19
 8007166:	04db      	lsls	r3, r3, #19
 8007168:	6113      	str	r3, [r2, #16]
 800716a:	e04e      	b.n	800720a <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800716c:	693b      	ldr	r3, [r7, #16]
 800716e:	015a      	lsls	r2, r3, #5
 8007170:	697b      	ldr	r3, [r7, #20]
 8007172:	4413      	add	r3, r2
 8007174:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007178:	691b      	ldr	r3, [r3, #16]
 800717a:	693a      	ldr	r2, [r7, #16]
 800717c:	0151      	lsls	r1, r2, #5
 800717e:	697a      	ldr	r2, [r7, #20]
 8007180:	440a      	add	r2, r1
 8007182:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007186:	0cdb      	lsrs	r3, r3, #19
 8007188:	04db      	lsls	r3, r3, #19
 800718a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800718c:	693b      	ldr	r3, [r7, #16]
 800718e:	015a      	lsls	r2, r3, #5
 8007190:	697b      	ldr	r3, [r7, #20]
 8007192:	4413      	add	r3, r2
 8007194:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007198:	691b      	ldr	r3, [r3, #16]
 800719a:	693a      	ldr	r2, [r7, #16]
 800719c:	0151      	lsls	r1, r2, #5
 800719e:	697a      	ldr	r2, [r7, #20]
 80071a0:	440a      	add	r2, r1
 80071a2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80071a6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80071aa:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80071ae:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 80071b0:	68bb      	ldr	r3, [r7, #8]
 80071b2:	695a      	ldr	r2, [r3, #20]
 80071b4:	68bb      	ldr	r3, [r7, #8]
 80071b6:	689b      	ldr	r3, [r3, #8]
 80071b8:	429a      	cmp	r2, r3
 80071ba:	d903      	bls.n	80071c4 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 80071bc:	68bb      	ldr	r3, [r7, #8]
 80071be:	689a      	ldr	r2, [r3, #8]
 80071c0:	68bb      	ldr	r3, [r7, #8]
 80071c2:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80071c4:	693b      	ldr	r3, [r7, #16]
 80071c6:	015a      	lsls	r2, r3, #5
 80071c8:	697b      	ldr	r3, [r7, #20]
 80071ca:	4413      	add	r3, r2
 80071cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80071d0:	691b      	ldr	r3, [r3, #16]
 80071d2:	693a      	ldr	r2, [r7, #16]
 80071d4:	0151      	lsls	r1, r2, #5
 80071d6:	697a      	ldr	r2, [r7, #20]
 80071d8:	440a      	add	r2, r1
 80071da:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80071de:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80071e2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80071e4:	693b      	ldr	r3, [r7, #16]
 80071e6:	015a      	lsls	r2, r3, #5
 80071e8:	697b      	ldr	r3, [r7, #20]
 80071ea:	4413      	add	r3, r2
 80071ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80071f0:	691a      	ldr	r2, [r3, #16]
 80071f2:	68bb      	ldr	r3, [r7, #8]
 80071f4:	695b      	ldr	r3, [r3, #20]
 80071f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80071fa:	6939      	ldr	r1, [r7, #16]
 80071fc:	0148      	lsls	r0, r1, #5
 80071fe:	6979      	ldr	r1, [r7, #20]
 8007200:	4401      	add	r1, r0
 8007202:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8007206:	4313      	orrs	r3, r2
 8007208:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800720a:	79fb      	ldrb	r3, [r7, #7]
 800720c:	2b01      	cmp	r3, #1
 800720e:	d11e      	bne.n	800724e <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8007210:	68bb      	ldr	r3, [r7, #8]
 8007212:	691b      	ldr	r3, [r3, #16]
 8007214:	2b00      	cmp	r3, #0
 8007216:	d009      	beq.n	800722c <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8007218:	693b      	ldr	r3, [r7, #16]
 800721a:	015a      	lsls	r2, r3, #5
 800721c:	697b      	ldr	r3, [r7, #20]
 800721e:	4413      	add	r3, r2
 8007220:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007224:	461a      	mov	r2, r3
 8007226:	68bb      	ldr	r3, [r7, #8]
 8007228:	691b      	ldr	r3, [r3, #16]
 800722a:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800722c:	693b      	ldr	r3, [r7, #16]
 800722e:	015a      	lsls	r2, r3, #5
 8007230:	697b      	ldr	r3, [r7, #20]
 8007232:	4413      	add	r3, r2
 8007234:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	693a      	ldr	r2, [r7, #16]
 800723c:	0151      	lsls	r1, r2, #5
 800723e:	697a      	ldr	r2, [r7, #20]
 8007240:	440a      	add	r2, r1
 8007242:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007246:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800724a:	6013      	str	r3, [r2, #0]
 800724c:	e092      	b.n	8007374 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800724e:	693b      	ldr	r3, [r7, #16]
 8007250:	015a      	lsls	r2, r3, #5
 8007252:	697b      	ldr	r3, [r7, #20]
 8007254:	4413      	add	r3, r2
 8007256:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	693a      	ldr	r2, [r7, #16]
 800725e:	0151      	lsls	r1, r2, #5
 8007260:	697a      	ldr	r2, [r7, #20]
 8007262:	440a      	add	r2, r1
 8007264:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007268:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800726c:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800726e:	68bb      	ldr	r3, [r7, #8]
 8007270:	695b      	ldr	r3, [r3, #20]
 8007272:	2b00      	cmp	r3, #0
 8007274:	d07e      	beq.n	8007374 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8007276:	697b      	ldr	r3, [r7, #20]
 8007278:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800727c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800727e:	68bb      	ldr	r3, [r7, #8]
 8007280:	781b      	ldrb	r3, [r3, #0]
 8007282:	f003 030f 	and.w	r3, r3, #15
 8007286:	2101      	movs	r1, #1
 8007288:	fa01 f303 	lsl.w	r3, r1, r3
 800728c:	6979      	ldr	r1, [r7, #20]
 800728e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007292:	4313      	orrs	r3, r2
 8007294:	634b      	str	r3, [r1, #52]	; 0x34
 8007296:	e06d      	b.n	8007374 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8007298:	693b      	ldr	r3, [r7, #16]
 800729a:	015a      	lsls	r2, r3, #5
 800729c:	697b      	ldr	r3, [r7, #20]
 800729e:	4413      	add	r3, r2
 80072a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80072a4:	691b      	ldr	r3, [r3, #16]
 80072a6:	693a      	ldr	r2, [r7, #16]
 80072a8:	0151      	lsls	r1, r2, #5
 80072aa:	697a      	ldr	r2, [r7, #20]
 80072ac:	440a      	add	r2, r1
 80072ae:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80072b2:	0cdb      	lsrs	r3, r3, #19
 80072b4:	04db      	lsls	r3, r3, #19
 80072b6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80072b8:	693b      	ldr	r3, [r7, #16]
 80072ba:	015a      	lsls	r2, r3, #5
 80072bc:	697b      	ldr	r3, [r7, #20]
 80072be:	4413      	add	r3, r2
 80072c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80072c4:	691b      	ldr	r3, [r3, #16]
 80072c6:	693a      	ldr	r2, [r7, #16]
 80072c8:	0151      	lsls	r1, r2, #5
 80072ca:	697a      	ldr	r2, [r7, #20]
 80072cc:	440a      	add	r2, r1
 80072ce:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80072d2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80072d6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80072da:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 80072dc:	68bb      	ldr	r3, [r7, #8]
 80072de:	695b      	ldr	r3, [r3, #20]
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d003      	beq.n	80072ec <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 80072e4:	68bb      	ldr	r3, [r7, #8]
 80072e6:	689a      	ldr	r2, [r3, #8]
 80072e8:	68bb      	ldr	r3, [r7, #8]
 80072ea:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80072ec:	693b      	ldr	r3, [r7, #16]
 80072ee:	015a      	lsls	r2, r3, #5
 80072f0:	697b      	ldr	r3, [r7, #20]
 80072f2:	4413      	add	r3, r2
 80072f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80072f8:	691b      	ldr	r3, [r3, #16]
 80072fa:	693a      	ldr	r2, [r7, #16]
 80072fc:	0151      	lsls	r1, r2, #5
 80072fe:	697a      	ldr	r2, [r7, #20]
 8007300:	440a      	add	r2, r1
 8007302:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007306:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800730a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 800730c:	693b      	ldr	r3, [r7, #16]
 800730e:	015a      	lsls	r2, r3, #5
 8007310:	697b      	ldr	r3, [r7, #20]
 8007312:	4413      	add	r3, r2
 8007314:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007318:	691a      	ldr	r2, [r3, #16]
 800731a:	68bb      	ldr	r3, [r7, #8]
 800731c:	689b      	ldr	r3, [r3, #8]
 800731e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007322:	6939      	ldr	r1, [r7, #16]
 8007324:	0148      	lsls	r0, r1, #5
 8007326:	6979      	ldr	r1, [r7, #20]
 8007328:	4401      	add	r1, r0
 800732a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800732e:	4313      	orrs	r3, r2
 8007330:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8007332:	79fb      	ldrb	r3, [r7, #7]
 8007334:	2b01      	cmp	r3, #1
 8007336:	d10d      	bne.n	8007354 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8007338:	68bb      	ldr	r3, [r7, #8]
 800733a:	68db      	ldr	r3, [r3, #12]
 800733c:	2b00      	cmp	r3, #0
 800733e:	d009      	beq.n	8007354 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8007340:	68bb      	ldr	r3, [r7, #8]
 8007342:	68d9      	ldr	r1, [r3, #12]
 8007344:	693b      	ldr	r3, [r7, #16]
 8007346:	015a      	lsls	r2, r3, #5
 8007348:	697b      	ldr	r3, [r7, #20]
 800734a:	4413      	add	r3, r2
 800734c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007350:	460a      	mov	r2, r1
 8007352:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8007354:	693b      	ldr	r3, [r7, #16]
 8007356:	015a      	lsls	r2, r3, #5
 8007358:	697b      	ldr	r3, [r7, #20]
 800735a:	4413      	add	r3, r2
 800735c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	693a      	ldr	r2, [r7, #16]
 8007364:	0151      	lsls	r1, r2, #5
 8007366:	697a      	ldr	r2, [r7, #20]
 8007368:	440a      	add	r2, r1
 800736a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800736e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007372:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007374:	2300      	movs	r3, #0
}
 8007376:	4618      	mov	r0, r3
 8007378:	371c      	adds	r7, #28
 800737a:	46bd      	mov	sp, r7
 800737c:	bc80      	pop	{r7}
 800737e:	4770      	bx	lr

08007380 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8007380:	b480      	push	{r7}
 8007382:	b089      	sub	sp, #36	; 0x24
 8007384:	af00      	add	r7, sp, #0
 8007386:	60f8      	str	r0, [r7, #12]
 8007388:	60b9      	str	r1, [r7, #8]
 800738a:	4611      	mov	r1, r2
 800738c:	461a      	mov	r2, r3
 800738e:	460b      	mov	r3, r1
 8007390:	71fb      	strb	r3, [r7, #7]
 8007392:	4613      	mov	r3, r2
 8007394:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800739a:	68bb      	ldr	r3, [r7, #8]
 800739c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800739e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d123      	bne.n	80073ee <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80073a6:	88bb      	ldrh	r3, [r7, #4]
 80073a8:	3303      	adds	r3, #3
 80073aa:	089b      	lsrs	r3, r3, #2
 80073ac:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80073ae:	2300      	movs	r3, #0
 80073b0:	61bb      	str	r3, [r7, #24]
 80073b2:	e018      	b.n	80073e6 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80073b4:	79fb      	ldrb	r3, [r7, #7]
 80073b6:	031a      	lsls	r2, r3, #12
 80073b8:	697b      	ldr	r3, [r7, #20]
 80073ba:	4413      	add	r3, r2
 80073bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80073c0:	461a      	mov	r2, r3
 80073c2:	69fb      	ldr	r3, [r7, #28]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	6013      	str	r3, [r2, #0]
      pSrc++;
 80073c8:	69fb      	ldr	r3, [r7, #28]
 80073ca:	3301      	adds	r3, #1
 80073cc:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80073ce:	69fb      	ldr	r3, [r7, #28]
 80073d0:	3301      	adds	r3, #1
 80073d2:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80073d4:	69fb      	ldr	r3, [r7, #28]
 80073d6:	3301      	adds	r3, #1
 80073d8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80073da:	69fb      	ldr	r3, [r7, #28]
 80073dc:	3301      	adds	r3, #1
 80073de:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80073e0:	69bb      	ldr	r3, [r7, #24]
 80073e2:	3301      	adds	r3, #1
 80073e4:	61bb      	str	r3, [r7, #24]
 80073e6:	69ba      	ldr	r2, [r7, #24]
 80073e8:	693b      	ldr	r3, [r7, #16]
 80073ea:	429a      	cmp	r2, r3
 80073ec:	d3e2      	bcc.n	80073b4 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80073ee:	2300      	movs	r3, #0
}
 80073f0:	4618      	mov	r0, r3
 80073f2:	3724      	adds	r7, #36	; 0x24
 80073f4:	46bd      	mov	sp, r7
 80073f6:	bc80      	pop	{r7}
 80073f8:	4770      	bx	lr

080073fa <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80073fa:	b480      	push	{r7}
 80073fc:	b08b      	sub	sp, #44	; 0x2c
 80073fe:	af00      	add	r7, sp, #0
 8007400:	60f8      	str	r0, [r7, #12]
 8007402:	60b9      	str	r1, [r7, #8]
 8007404:	4613      	mov	r3, r2
 8007406:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800740c:	68bb      	ldr	r3, [r7, #8]
 800740e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8007410:	88fb      	ldrh	r3, [r7, #6]
 8007412:	089b      	lsrs	r3, r3, #2
 8007414:	b29b      	uxth	r3, r3
 8007416:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8007418:	88fb      	ldrh	r3, [r7, #6]
 800741a:	f003 0303 	and.w	r3, r3, #3
 800741e:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8007420:	2300      	movs	r3, #0
 8007422:	623b      	str	r3, [r7, #32]
 8007424:	e014      	b.n	8007450 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8007426:	69bb      	ldr	r3, [r7, #24]
 8007428:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800742c:	681a      	ldr	r2, [r3, #0]
 800742e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007430:	601a      	str	r2, [r3, #0]
    pDest++;
 8007432:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007434:	3301      	adds	r3, #1
 8007436:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800743a:	3301      	adds	r3, #1
 800743c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800743e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007440:	3301      	adds	r3, #1
 8007442:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007446:	3301      	adds	r3, #1
 8007448:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800744a:	6a3b      	ldr	r3, [r7, #32]
 800744c:	3301      	adds	r3, #1
 800744e:	623b      	str	r3, [r7, #32]
 8007450:	6a3a      	ldr	r2, [r7, #32]
 8007452:	697b      	ldr	r3, [r7, #20]
 8007454:	429a      	cmp	r2, r3
 8007456:	d3e6      	bcc.n	8007426 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8007458:	8bfb      	ldrh	r3, [r7, #30]
 800745a:	2b00      	cmp	r3, #0
 800745c:	d01e      	beq.n	800749c <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800745e:	2300      	movs	r3, #0
 8007460:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8007462:	69bb      	ldr	r3, [r7, #24]
 8007464:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007468:	461a      	mov	r2, r3
 800746a:	f107 0310 	add.w	r3, r7, #16
 800746e:	6812      	ldr	r2, [r2, #0]
 8007470:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8007472:	693a      	ldr	r2, [r7, #16]
 8007474:	6a3b      	ldr	r3, [r7, #32]
 8007476:	b2db      	uxtb	r3, r3
 8007478:	00db      	lsls	r3, r3, #3
 800747a:	fa22 f303 	lsr.w	r3, r2, r3
 800747e:	b2da      	uxtb	r2, r3
 8007480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007482:	701a      	strb	r2, [r3, #0]
      i++;
 8007484:	6a3b      	ldr	r3, [r7, #32]
 8007486:	3301      	adds	r3, #1
 8007488:	623b      	str	r3, [r7, #32]
      pDest++;
 800748a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800748c:	3301      	adds	r3, #1
 800748e:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8007490:	8bfb      	ldrh	r3, [r7, #30]
 8007492:	3b01      	subs	r3, #1
 8007494:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8007496:	8bfb      	ldrh	r3, [r7, #30]
 8007498:	2b00      	cmp	r3, #0
 800749a:	d1ea      	bne.n	8007472 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800749c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800749e:	4618      	mov	r0, r3
 80074a0:	372c      	adds	r7, #44	; 0x2c
 80074a2:	46bd      	mov	sp, r7
 80074a4:	bc80      	pop	{r7}
 80074a6:	4770      	bx	lr

080074a8 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80074a8:	b480      	push	{r7}
 80074aa:	b085      	sub	sp, #20
 80074ac:	af00      	add	r7, sp, #0
 80074ae:	6078      	str	r0, [r7, #4]
 80074b0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80074b6:	683b      	ldr	r3, [r7, #0]
 80074b8:	781b      	ldrb	r3, [r3, #0]
 80074ba:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80074bc:	683b      	ldr	r3, [r7, #0]
 80074be:	785b      	ldrb	r3, [r3, #1]
 80074c0:	2b01      	cmp	r3, #1
 80074c2:	d12c      	bne.n	800751e <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80074c4:	68bb      	ldr	r3, [r7, #8]
 80074c6:	015a      	lsls	r2, r3, #5
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	4413      	add	r3, r2
 80074cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	db12      	blt.n	80074fc <USB_EPSetStall+0x54>
 80074d6:	68bb      	ldr	r3, [r7, #8]
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d00f      	beq.n	80074fc <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80074dc:	68bb      	ldr	r3, [r7, #8]
 80074de:	015a      	lsls	r2, r3, #5
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	4413      	add	r3, r2
 80074e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	68ba      	ldr	r2, [r7, #8]
 80074ec:	0151      	lsls	r1, r2, #5
 80074ee:	68fa      	ldr	r2, [r7, #12]
 80074f0:	440a      	add	r2, r1
 80074f2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80074f6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80074fa:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80074fc:	68bb      	ldr	r3, [r7, #8]
 80074fe:	015a      	lsls	r2, r3, #5
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	4413      	add	r3, r2
 8007504:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	68ba      	ldr	r2, [r7, #8]
 800750c:	0151      	lsls	r1, r2, #5
 800750e:	68fa      	ldr	r2, [r7, #12]
 8007510:	440a      	add	r2, r1
 8007512:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007516:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800751a:	6013      	str	r3, [r2, #0]
 800751c:	e02b      	b.n	8007576 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800751e:	68bb      	ldr	r3, [r7, #8]
 8007520:	015a      	lsls	r2, r3, #5
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	4413      	add	r3, r2
 8007526:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	2b00      	cmp	r3, #0
 800752e:	db12      	blt.n	8007556 <USB_EPSetStall+0xae>
 8007530:	68bb      	ldr	r3, [r7, #8]
 8007532:	2b00      	cmp	r3, #0
 8007534:	d00f      	beq.n	8007556 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8007536:	68bb      	ldr	r3, [r7, #8]
 8007538:	015a      	lsls	r2, r3, #5
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	4413      	add	r3, r2
 800753e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	68ba      	ldr	r2, [r7, #8]
 8007546:	0151      	lsls	r1, r2, #5
 8007548:	68fa      	ldr	r2, [r7, #12]
 800754a:	440a      	add	r2, r1
 800754c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007550:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007554:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8007556:	68bb      	ldr	r3, [r7, #8]
 8007558:	015a      	lsls	r2, r3, #5
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	4413      	add	r3, r2
 800755e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	68ba      	ldr	r2, [r7, #8]
 8007566:	0151      	lsls	r1, r2, #5
 8007568:	68fa      	ldr	r2, [r7, #12]
 800756a:	440a      	add	r2, r1
 800756c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007570:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007574:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007576:	2300      	movs	r3, #0
}
 8007578:	4618      	mov	r0, r3
 800757a:	3714      	adds	r7, #20
 800757c:	46bd      	mov	sp, r7
 800757e:	bc80      	pop	{r7}
 8007580:	4770      	bx	lr

08007582 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007582:	b480      	push	{r7}
 8007584:	b085      	sub	sp, #20
 8007586:	af00      	add	r7, sp, #0
 8007588:	6078      	str	r0, [r7, #4]
 800758a:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007590:	683b      	ldr	r3, [r7, #0]
 8007592:	781b      	ldrb	r3, [r3, #0]
 8007594:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007596:	683b      	ldr	r3, [r7, #0]
 8007598:	785b      	ldrb	r3, [r3, #1]
 800759a:	2b01      	cmp	r3, #1
 800759c:	d128      	bne.n	80075f0 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800759e:	68bb      	ldr	r3, [r7, #8]
 80075a0:	015a      	lsls	r2, r3, #5
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	4413      	add	r3, r2
 80075a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	68ba      	ldr	r2, [r7, #8]
 80075ae:	0151      	lsls	r1, r2, #5
 80075b0:	68fa      	ldr	r2, [r7, #12]
 80075b2:	440a      	add	r2, r1
 80075b4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80075b8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80075bc:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80075be:	683b      	ldr	r3, [r7, #0]
 80075c0:	78db      	ldrb	r3, [r3, #3]
 80075c2:	2b03      	cmp	r3, #3
 80075c4:	d003      	beq.n	80075ce <USB_EPClearStall+0x4c>
 80075c6:	683b      	ldr	r3, [r7, #0]
 80075c8:	78db      	ldrb	r3, [r3, #3]
 80075ca:	2b02      	cmp	r3, #2
 80075cc:	d138      	bne.n	8007640 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80075ce:	68bb      	ldr	r3, [r7, #8]
 80075d0:	015a      	lsls	r2, r3, #5
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	4413      	add	r3, r2
 80075d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	68ba      	ldr	r2, [r7, #8]
 80075de:	0151      	lsls	r1, r2, #5
 80075e0:	68fa      	ldr	r2, [r7, #12]
 80075e2:	440a      	add	r2, r1
 80075e4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80075e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80075ec:	6013      	str	r3, [r2, #0]
 80075ee:	e027      	b.n	8007640 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80075f0:	68bb      	ldr	r3, [r7, #8]
 80075f2:	015a      	lsls	r2, r3, #5
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	4413      	add	r3, r2
 80075f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	68ba      	ldr	r2, [r7, #8]
 8007600:	0151      	lsls	r1, r2, #5
 8007602:	68fa      	ldr	r2, [r7, #12]
 8007604:	440a      	add	r2, r1
 8007606:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800760a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800760e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007610:	683b      	ldr	r3, [r7, #0]
 8007612:	78db      	ldrb	r3, [r3, #3]
 8007614:	2b03      	cmp	r3, #3
 8007616:	d003      	beq.n	8007620 <USB_EPClearStall+0x9e>
 8007618:	683b      	ldr	r3, [r7, #0]
 800761a:	78db      	ldrb	r3, [r3, #3]
 800761c:	2b02      	cmp	r3, #2
 800761e:	d10f      	bne.n	8007640 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007620:	68bb      	ldr	r3, [r7, #8]
 8007622:	015a      	lsls	r2, r3, #5
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	4413      	add	r3, r2
 8007628:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	68ba      	ldr	r2, [r7, #8]
 8007630:	0151      	lsls	r1, r2, #5
 8007632:	68fa      	ldr	r2, [r7, #12]
 8007634:	440a      	add	r2, r1
 8007636:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800763a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800763e:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8007640:	2300      	movs	r3, #0
}
 8007642:	4618      	mov	r0, r3
 8007644:	3714      	adds	r7, #20
 8007646:	46bd      	mov	sp, r7
 8007648:	bc80      	pop	{r7}
 800764a:	4770      	bx	lr

0800764c <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800764c:	b480      	push	{r7}
 800764e:	b085      	sub	sp, #20
 8007650:	af00      	add	r7, sp, #0
 8007652:	6078      	str	r0, [r7, #4]
 8007654:	460b      	mov	r3, r1
 8007656:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	68fa      	ldr	r2, [r7, #12]
 8007666:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800766a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800766e:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007676:	681a      	ldr	r2, [r3, #0]
 8007678:	78fb      	ldrb	r3, [r7, #3]
 800767a:	011b      	lsls	r3, r3, #4
 800767c:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8007680:	68f9      	ldr	r1, [r7, #12]
 8007682:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007686:	4313      	orrs	r3, r2
 8007688:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800768a:	2300      	movs	r3, #0
}
 800768c:	4618      	mov	r0, r3
 800768e:	3714      	adds	r7, #20
 8007690:	46bd      	mov	sp, r7
 8007692:	bc80      	pop	{r7}
 8007694:	4770      	bx	lr

08007696 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007696:	b480      	push	{r7}
 8007698:	b085      	sub	sp, #20
 800769a:	af00      	add	r7, sp, #0
 800769c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	68fa      	ldr	r2, [r7, #12]
 80076ac:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80076b0:	f023 0303 	bic.w	r3, r3, #3
 80076b4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80076bc:	685b      	ldr	r3, [r3, #4]
 80076be:	68fa      	ldr	r2, [r7, #12]
 80076c0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80076c4:	f023 0302 	bic.w	r3, r3, #2
 80076c8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80076ca:	2300      	movs	r3, #0
}
 80076cc:	4618      	mov	r0, r3
 80076ce:	3714      	adds	r7, #20
 80076d0:	46bd      	mov	sp, r7
 80076d2:	bc80      	pop	{r7}
 80076d4:	4770      	bx	lr

080076d6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80076d6:	b480      	push	{r7}
 80076d8:	b085      	sub	sp, #20
 80076da:	af00      	add	r7, sp, #0
 80076dc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	68fa      	ldr	r2, [r7, #12]
 80076ec:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80076f0:	f023 0303 	bic.w	r3, r3, #3
 80076f4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80076fc:	685b      	ldr	r3, [r3, #4]
 80076fe:	68fa      	ldr	r2, [r7, #12]
 8007700:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007704:	f043 0302 	orr.w	r3, r3, #2
 8007708:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800770a:	2300      	movs	r3, #0
}
 800770c:	4618      	mov	r0, r3
 800770e:	3714      	adds	r7, #20
 8007710:	46bd      	mov	sp, r7
 8007712:	bc80      	pop	{r7}
 8007714:	4770      	bx	lr

08007716 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8007716:	b480      	push	{r7}
 8007718:	b085      	sub	sp, #20
 800771a:	af00      	add	r7, sp, #0
 800771c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	695b      	ldr	r3, [r3, #20]
 8007722:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	699b      	ldr	r3, [r3, #24]
 8007728:	68fa      	ldr	r2, [r7, #12]
 800772a:	4013      	ands	r3, r2
 800772c:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800772e:	68fb      	ldr	r3, [r7, #12]
}
 8007730:	4618      	mov	r0, r3
 8007732:	3714      	adds	r7, #20
 8007734:	46bd      	mov	sp, r7
 8007736:	bc80      	pop	{r7}
 8007738:	4770      	bx	lr

0800773a <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800773a:	b480      	push	{r7}
 800773c:	b085      	sub	sp, #20
 800773e:	af00      	add	r7, sp, #0
 8007740:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800774c:	699b      	ldr	r3, [r3, #24]
 800774e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007756:	69db      	ldr	r3, [r3, #28]
 8007758:	68ba      	ldr	r2, [r7, #8]
 800775a:	4013      	ands	r3, r2
 800775c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800775e:	68bb      	ldr	r3, [r7, #8]
 8007760:	0c1b      	lsrs	r3, r3, #16
}
 8007762:	4618      	mov	r0, r3
 8007764:	3714      	adds	r7, #20
 8007766:	46bd      	mov	sp, r7
 8007768:	bc80      	pop	{r7}
 800776a:	4770      	bx	lr

0800776c <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800776c:	b480      	push	{r7}
 800776e:	b085      	sub	sp, #20
 8007770:	af00      	add	r7, sp, #0
 8007772:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800777e:	699b      	ldr	r3, [r3, #24]
 8007780:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007788:	69db      	ldr	r3, [r3, #28]
 800778a:	68ba      	ldr	r2, [r7, #8]
 800778c:	4013      	ands	r3, r2
 800778e:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8007790:	68bb      	ldr	r3, [r7, #8]
 8007792:	b29b      	uxth	r3, r3
}
 8007794:	4618      	mov	r0, r3
 8007796:	3714      	adds	r7, #20
 8007798:	46bd      	mov	sp, r7
 800779a:	bc80      	pop	{r7}
 800779c:	4770      	bx	lr

0800779e <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800779e:	b480      	push	{r7}
 80077a0:	b085      	sub	sp, #20
 80077a2:	af00      	add	r7, sp, #0
 80077a4:	6078      	str	r0, [r7, #4]
 80077a6:	460b      	mov	r3, r1
 80077a8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80077ae:	78fb      	ldrb	r3, [r7, #3]
 80077b0:	015a      	lsls	r2, r3, #5
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	4413      	add	r3, r2
 80077b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80077ba:	689b      	ldr	r3, [r3, #8]
 80077bc:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80077c4:	695b      	ldr	r3, [r3, #20]
 80077c6:	68ba      	ldr	r2, [r7, #8]
 80077c8:	4013      	ands	r3, r2
 80077ca:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80077cc:	68bb      	ldr	r3, [r7, #8]
}
 80077ce:	4618      	mov	r0, r3
 80077d0:	3714      	adds	r7, #20
 80077d2:	46bd      	mov	sp, r7
 80077d4:	bc80      	pop	{r7}
 80077d6:	4770      	bx	lr

080077d8 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80077d8:	b480      	push	{r7}
 80077da:	b087      	sub	sp, #28
 80077dc:	af00      	add	r7, sp, #0
 80077de:	6078      	str	r0, [r7, #4]
 80077e0:	460b      	mov	r3, r1
 80077e2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80077e8:	697b      	ldr	r3, [r7, #20]
 80077ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80077ee:	691b      	ldr	r3, [r3, #16]
 80077f0:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80077f2:	697b      	ldr	r3, [r7, #20]
 80077f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80077f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80077fa:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80077fc:	78fb      	ldrb	r3, [r7, #3]
 80077fe:	f003 030f 	and.w	r3, r3, #15
 8007802:	68fa      	ldr	r2, [r7, #12]
 8007804:	fa22 f303 	lsr.w	r3, r2, r3
 8007808:	01db      	lsls	r3, r3, #7
 800780a:	b2db      	uxtb	r3, r3
 800780c:	693a      	ldr	r2, [r7, #16]
 800780e:	4313      	orrs	r3, r2
 8007810:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8007812:	78fb      	ldrb	r3, [r7, #3]
 8007814:	015a      	lsls	r2, r3, #5
 8007816:	697b      	ldr	r3, [r7, #20]
 8007818:	4413      	add	r3, r2
 800781a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800781e:	689b      	ldr	r3, [r3, #8]
 8007820:	693a      	ldr	r2, [r7, #16]
 8007822:	4013      	ands	r3, r2
 8007824:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007826:	68bb      	ldr	r3, [r7, #8]
}
 8007828:	4618      	mov	r0, r3
 800782a:	371c      	adds	r7, #28
 800782c:	46bd      	mov	sp, r7
 800782e:	bc80      	pop	{r7}
 8007830:	4770      	bx	lr

08007832 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8007832:	b480      	push	{r7}
 8007834:	b083      	sub	sp, #12
 8007836:	af00      	add	r7, sp, #0
 8007838:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	695b      	ldr	r3, [r3, #20]
 800783e:	f003 0301 	and.w	r3, r3, #1
}
 8007842:	4618      	mov	r0, r3
 8007844:	370c      	adds	r7, #12
 8007846:	46bd      	mov	sp, r7
 8007848:	bc80      	pop	{r7}
 800784a:	4770      	bx	lr

0800784c <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800784c:	b480      	push	{r7}
 800784e:	b085      	sub	sp, #20
 8007850:	af00      	add	r7, sp, #0
 8007852:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	68fa      	ldr	r2, [r7, #12]
 8007862:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007866:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800786a:	f023 0307 	bic.w	r3, r3, #7
 800786e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007876:	685b      	ldr	r3, [r3, #4]
 8007878:	68fa      	ldr	r2, [r7, #12]
 800787a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800787e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007882:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007884:	2300      	movs	r3, #0
}
 8007886:	4618      	mov	r0, r3
 8007888:	3714      	adds	r7, #20
 800788a:	46bd      	mov	sp, r7
 800788c:	bc80      	pop	{r7}
 800788e:	4770      	bx	lr

08007890 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8007890:	b480      	push	{r7}
 8007892:	b087      	sub	sp, #28
 8007894:	af00      	add	r7, sp, #0
 8007896:	60f8      	str	r0, [r7, #12]
 8007898:	460b      	mov	r3, r1
 800789a:	607a      	str	r2, [r7, #4]
 800789c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	333c      	adds	r3, #60	; 0x3c
 80078a6:	3304      	adds	r3, #4
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80078ac:	693b      	ldr	r3, [r7, #16]
 80078ae:	4a25      	ldr	r2, [pc, #148]	; (8007944 <USB_EP0_OutStart+0xb4>)
 80078b0:	4293      	cmp	r3, r2
 80078b2:	d90a      	bls.n	80078ca <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80078b4:	697b      	ldr	r3, [r7, #20]
 80078b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80078c0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80078c4:	d101      	bne.n	80078ca <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80078c6:	2300      	movs	r3, #0
 80078c8:	e037      	b.n	800793a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80078ca:	697b      	ldr	r3, [r7, #20]
 80078cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80078d0:	461a      	mov	r2, r3
 80078d2:	2300      	movs	r3, #0
 80078d4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80078d6:	697b      	ldr	r3, [r7, #20]
 80078d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80078dc:	691b      	ldr	r3, [r3, #16]
 80078de:	697a      	ldr	r2, [r7, #20]
 80078e0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80078e4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80078e8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80078ea:	697b      	ldr	r3, [r7, #20]
 80078ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80078f0:	691b      	ldr	r3, [r3, #16]
 80078f2:	697a      	ldr	r2, [r7, #20]
 80078f4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80078f8:	f043 0318 	orr.w	r3, r3, #24
 80078fc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80078fe:	697b      	ldr	r3, [r7, #20]
 8007900:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007904:	691b      	ldr	r3, [r3, #16]
 8007906:	697a      	ldr	r2, [r7, #20]
 8007908:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800790c:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8007910:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8007912:	7afb      	ldrb	r3, [r7, #11]
 8007914:	2b01      	cmp	r3, #1
 8007916:	d10f      	bne.n	8007938 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8007918:	697b      	ldr	r3, [r7, #20]
 800791a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800791e:	461a      	mov	r2, r3
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8007924:	697b      	ldr	r3, [r7, #20]
 8007926:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	697a      	ldr	r2, [r7, #20]
 800792e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007932:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8007936:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007938:	2300      	movs	r3, #0
}
 800793a:	4618      	mov	r0, r3
 800793c:	371c      	adds	r7, #28
 800793e:	46bd      	mov	sp, r7
 8007940:	bc80      	pop	{r7}
 8007942:	4770      	bx	lr
 8007944:	4f54300a 	.word	0x4f54300a

08007948 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007948:	b480      	push	{r7}
 800794a:	b085      	sub	sp, #20
 800794c:	af00      	add	r7, sp, #0
 800794e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8007950:	2300      	movs	r3, #0
 8007952:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	3301      	adds	r3, #1
 8007958:	60fb      	str	r3, [r7, #12]
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	4a12      	ldr	r2, [pc, #72]	; (80079a8 <USB_CoreReset+0x60>)
 800795e:	4293      	cmp	r3, r2
 8007960:	d901      	bls.n	8007966 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007962:	2303      	movs	r3, #3
 8007964:	e01b      	b.n	800799e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	691b      	ldr	r3, [r3, #16]
 800796a:	2b00      	cmp	r3, #0
 800796c:	daf2      	bge.n	8007954 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800796e:	2300      	movs	r3, #0
 8007970:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	691b      	ldr	r3, [r3, #16]
 8007976:	f043 0201 	orr.w	r2, r3, #1
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	3301      	adds	r3, #1
 8007982:	60fb      	str	r3, [r7, #12]
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	4a08      	ldr	r2, [pc, #32]	; (80079a8 <USB_CoreReset+0x60>)
 8007988:	4293      	cmp	r3, r2
 800798a:	d901      	bls.n	8007990 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800798c:	2303      	movs	r3, #3
 800798e:	e006      	b.n	800799e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	691b      	ldr	r3, [r3, #16]
 8007994:	f003 0301 	and.w	r3, r3, #1
 8007998:	2b01      	cmp	r3, #1
 800799a:	d0f0      	beq.n	800797e <USB_CoreReset+0x36>

  return HAL_OK;
 800799c:	2300      	movs	r3, #0
}
 800799e:	4618      	mov	r0, r3
 80079a0:	3714      	adds	r7, #20
 80079a2:	46bd      	mov	sp, r7
 80079a4:	bc80      	pop	{r7}
 80079a6:	4770      	bx	lr
 80079a8:	00030d40 	.word	0x00030d40

080079ac <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80079ac:	b580      	push	{r7, lr}
 80079ae:	b084      	sub	sp, #16
 80079b0:	af00      	add	r7, sp, #0
 80079b2:	6078      	str	r0, [r7, #4]
 80079b4:	460b      	mov	r3, r1
 80079b6:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 80079b8:	2300      	movs	r3, #0
 80079ba:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	7c1b      	ldrb	r3, [r3, #16]
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d115      	bne.n	80079f0 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80079c4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80079c8:	2202      	movs	r2, #2
 80079ca:	2181      	movs	r1, #129	; 0x81
 80079cc:	6878      	ldr	r0, [r7, #4]
 80079ce:	f001 ff48 	bl	8009862 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	2201      	movs	r2, #1
 80079d6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80079d8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80079dc:	2202      	movs	r2, #2
 80079de:	2101      	movs	r1, #1
 80079e0:	6878      	ldr	r0, [r7, #4]
 80079e2:	f001 ff3e 	bl	8009862 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	2201      	movs	r2, #1
 80079ea:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 80079ee:	e012      	b.n	8007a16 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80079f0:	2340      	movs	r3, #64	; 0x40
 80079f2:	2202      	movs	r2, #2
 80079f4:	2181      	movs	r1, #129	; 0x81
 80079f6:	6878      	ldr	r0, [r7, #4]
 80079f8:	f001 ff33 	bl	8009862 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	2201      	movs	r2, #1
 8007a00:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007a02:	2340      	movs	r3, #64	; 0x40
 8007a04:	2202      	movs	r2, #2
 8007a06:	2101      	movs	r1, #1
 8007a08:	6878      	ldr	r0, [r7, #4]
 8007a0a:	f001 ff2a 	bl	8009862 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	2201      	movs	r2, #1
 8007a12:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8007a16:	2308      	movs	r3, #8
 8007a18:	2203      	movs	r2, #3
 8007a1a:	2182      	movs	r1, #130	; 0x82
 8007a1c:	6878      	ldr	r0, [r7, #4]
 8007a1e:	f001 ff20 	bl	8009862 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	2201      	movs	r2, #1
 8007a26:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8007a28:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8007a2c:	f002 f9a6 	bl	8009d7c <malloc>
 8007a30:	4603      	mov	r3, r0
 8007a32:	461a      	mov	r2, r3
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d102      	bne.n	8007a4a <USBD_CDC_Init+0x9e>
  {
    ret = 1U;
 8007a44:	2301      	movs	r3, #1
 8007a46:	73fb      	strb	r3, [r7, #15]
 8007a48:	e026      	b.n	8007a98 <USBD_CDC_Init+0xec>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007a50:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8007a5c:	68bb      	ldr	r3, [r7, #8]
 8007a5e:	2200      	movs	r2, #0
 8007a60:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8007a64:	68bb      	ldr	r3, [r7, #8]
 8007a66:	2200      	movs	r2, #0
 8007a68:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	7c1b      	ldrb	r3, [r3, #16]
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d109      	bne.n	8007a88 <USBD_CDC_Init+0xdc>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007a74:	68bb      	ldr	r3, [r7, #8]
 8007a76:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007a7a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007a7e:	2101      	movs	r1, #1
 8007a80:	6878      	ldr	r0, [r7, #4]
 8007a82:	f001 ffde 	bl	8009a42 <USBD_LL_PrepareReceive>
 8007a86:	e007      	b.n	8007a98 <USBD_CDC_Init+0xec>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007a88:	68bb      	ldr	r3, [r7, #8]
 8007a8a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007a8e:	2340      	movs	r3, #64	; 0x40
 8007a90:	2101      	movs	r1, #1
 8007a92:	6878      	ldr	r0, [r7, #4]
 8007a94:	f001 ffd5 	bl	8009a42 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8007a98:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a9a:	4618      	mov	r0, r3
 8007a9c:	3710      	adds	r7, #16
 8007a9e:	46bd      	mov	sp, r7
 8007aa0:	bd80      	pop	{r7, pc}

08007aa2 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007aa2:	b580      	push	{r7, lr}
 8007aa4:	b084      	sub	sp, #16
 8007aa6:	af00      	add	r7, sp, #0
 8007aa8:	6078      	str	r0, [r7, #4]
 8007aaa:	460b      	mov	r3, r1
 8007aac:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8007aae:	2300      	movs	r3, #0
 8007ab0:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8007ab2:	2181      	movs	r1, #129	; 0x81
 8007ab4:	6878      	ldr	r0, [r7, #4]
 8007ab6:	f001 fefa 	bl	80098ae <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	2200      	movs	r2, #0
 8007abe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8007ac0:	2101      	movs	r1, #1
 8007ac2:	6878      	ldr	r0, [r7, #4]
 8007ac4:	f001 fef3 	bl	80098ae <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	2200      	movs	r2, #0
 8007acc:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8007ad0:	2182      	movs	r1, #130	; 0x82
 8007ad2:	6878      	ldr	r0, [r7, #4]
 8007ad4:	f001 feeb 	bl	80098ae <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	2200      	movs	r2, #0
 8007adc:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d00e      	beq.n	8007b06 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007aee:	685b      	ldr	r3, [r3, #4]
 8007af0:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007af8:	4618      	mov	r0, r3
 8007afa:	f002 f947 	bl	8009d8c <free>
    pdev->pClassData = NULL;
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	2200      	movs	r2, #0
 8007b02:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 8007b06:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b08:	4618      	mov	r0, r3
 8007b0a:	3710      	adds	r7, #16
 8007b0c:	46bd      	mov	sp, r7
 8007b0e:	bd80      	pop	{r7, pc}

08007b10 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8007b10:	b580      	push	{r7, lr}
 8007b12:	b086      	sub	sp, #24
 8007b14:	af00      	add	r7, sp, #0
 8007b16:	6078      	str	r0, [r7, #4]
 8007b18:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b20:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8007b22:	2300      	movs	r3, #0
 8007b24:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8007b26:	2300      	movs	r3, #0
 8007b28:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8007b2a:	2300      	movs	r3, #0
 8007b2c:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007b2e:	683b      	ldr	r3, [r7, #0]
 8007b30:	781b      	ldrb	r3, [r3, #0]
 8007b32:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d039      	beq.n	8007bae <USBD_CDC_Setup+0x9e>
 8007b3a:	2b20      	cmp	r3, #32
 8007b3c:	d17f      	bne.n	8007c3e <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8007b3e:	683b      	ldr	r3, [r7, #0]
 8007b40:	88db      	ldrh	r3, [r3, #6]
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d029      	beq.n	8007b9a <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8007b46:	683b      	ldr	r3, [r7, #0]
 8007b48:	781b      	ldrb	r3, [r3, #0]
 8007b4a:	b25b      	sxtb	r3, r3
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	da11      	bge.n	8007b74 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007b56:	689b      	ldr	r3, [r3, #8]
 8007b58:	683a      	ldr	r2, [r7, #0]
 8007b5a:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8007b5c:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007b5e:	683a      	ldr	r2, [r7, #0]
 8007b60:	88d2      	ldrh	r2, [r2, #6]
 8007b62:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8007b64:	6939      	ldr	r1, [r7, #16]
 8007b66:	683b      	ldr	r3, [r7, #0]
 8007b68:	88db      	ldrh	r3, [r3, #6]
 8007b6a:	461a      	mov	r2, r3
 8007b6c:	6878      	ldr	r0, [r7, #4]
 8007b6e:	f001 fa42 	bl	8008ff6 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8007b72:	e06b      	b.n	8007c4c <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 8007b74:	683b      	ldr	r3, [r7, #0]
 8007b76:	785a      	ldrb	r2, [r3, #1]
 8007b78:	693b      	ldr	r3, [r7, #16]
 8007b7a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8007b7e:	683b      	ldr	r3, [r7, #0]
 8007b80:	88db      	ldrh	r3, [r3, #6]
 8007b82:	b2da      	uxtb	r2, r3
 8007b84:	693b      	ldr	r3, [r7, #16]
 8007b86:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8007b8a:	6939      	ldr	r1, [r7, #16]
 8007b8c:	683b      	ldr	r3, [r7, #0]
 8007b8e:	88db      	ldrh	r3, [r3, #6]
 8007b90:	461a      	mov	r2, r3
 8007b92:	6878      	ldr	r0, [r7, #4]
 8007b94:	f001 fa5d 	bl	8009052 <USBD_CtlPrepareRx>
      break;
 8007b98:	e058      	b.n	8007c4c <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007ba0:	689b      	ldr	r3, [r3, #8]
 8007ba2:	683a      	ldr	r2, [r7, #0]
 8007ba4:	7850      	ldrb	r0, [r2, #1]
 8007ba6:	2200      	movs	r2, #0
 8007ba8:	6839      	ldr	r1, [r7, #0]
 8007baa:	4798      	blx	r3
      break;
 8007bac:	e04e      	b.n	8007c4c <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007bae:	683b      	ldr	r3, [r7, #0]
 8007bb0:	785b      	ldrb	r3, [r3, #1]
 8007bb2:	2b0b      	cmp	r3, #11
 8007bb4:	d02e      	beq.n	8007c14 <USBD_CDC_Setup+0x104>
 8007bb6:	2b0b      	cmp	r3, #11
 8007bb8:	dc38      	bgt.n	8007c2c <USBD_CDC_Setup+0x11c>
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d002      	beq.n	8007bc4 <USBD_CDC_Setup+0xb4>
 8007bbe:	2b0a      	cmp	r3, #10
 8007bc0:	d014      	beq.n	8007bec <USBD_CDC_Setup+0xdc>
 8007bc2:	e033      	b.n	8007c2c <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007bca:	2b03      	cmp	r3, #3
 8007bcc:	d107      	bne.n	8007bde <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8007bce:	f107 030c 	add.w	r3, r7, #12
 8007bd2:	2202      	movs	r2, #2
 8007bd4:	4619      	mov	r1, r3
 8007bd6:	6878      	ldr	r0, [r7, #4]
 8007bd8:	f001 fa0d 	bl	8008ff6 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007bdc:	e02e      	b.n	8007c3c <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8007bde:	6839      	ldr	r1, [r7, #0]
 8007be0:	6878      	ldr	r0, [r7, #4]
 8007be2:	f001 f99e 	bl	8008f22 <USBD_CtlError>
            ret = USBD_FAIL;
 8007be6:	2302      	movs	r3, #2
 8007be8:	75fb      	strb	r3, [r7, #23]
          break;
 8007bea:	e027      	b.n	8007c3c <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007bf2:	2b03      	cmp	r3, #3
 8007bf4:	d107      	bne.n	8007c06 <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8007bf6:	f107 030f 	add.w	r3, r7, #15
 8007bfa:	2201      	movs	r2, #1
 8007bfc:	4619      	mov	r1, r3
 8007bfe:	6878      	ldr	r0, [r7, #4]
 8007c00:	f001 f9f9 	bl	8008ff6 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007c04:	e01a      	b.n	8007c3c <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8007c06:	6839      	ldr	r1, [r7, #0]
 8007c08:	6878      	ldr	r0, [r7, #4]
 8007c0a:	f001 f98a 	bl	8008f22 <USBD_CtlError>
            ret = USBD_FAIL;
 8007c0e:	2302      	movs	r3, #2
 8007c10:	75fb      	strb	r3, [r7, #23]
          break;
 8007c12:	e013      	b.n	8007c3c <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007c1a:	2b03      	cmp	r3, #3
 8007c1c:	d00d      	beq.n	8007c3a <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 8007c1e:	6839      	ldr	r1, [r7, #0]
 8007c20:	6878      	ldr	r0, [r7, #4]
 8007c22:	f001 f97e 	bl	8008f22 <USBD_CtlError>
            ret = USBD_FAIL;
 8007c26:	2302      	movs	r3, #2
 8007c28:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8007c2a:	e006      	b.n	8007c3a <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 8007c2c:	6839      	ldr	r1, [r7, #0]
 8007c2e:	6878      	ldr	r0, [r7, #4]
 8007c30:	f001 f977 	bl	8008f22 <USBD_CtlError>
          ret = USBD_FAIL;
 8007c34:	2302      	movs	r3, #2
 8007c36:	75fb      	strb	r3, [r7, #23]
          break;
 8007c38:	e000      	b.n	8007c3c <USBD_CDC_Setup+0x12c>
          break;
 8007c3a:	bf00      	nop
      }
      break;
 8007c3c:	e006      	b.n	8007c4c <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8007c3e:	6839      	ldr	r1, [r7, #0]
 8007c40:	6878      	ldr	r0, [r7, #4]
 8007c42:	f001 f96e 	bl	8008f22 <USBD_CtlError>
      ret = USBD_FAIL;
 8007c46:	2302      	movs	r3, #2
 8007c48:	75fb      	strb	r3, [r7, #23]
      break;
 8007c4a:	bf00      	nop
  }

  return ret;
 8007c4c:	7dfb      	ldrb	r3, [r7, #23]
}
 8007c4e:	4618      	mov	r0, r3
 8007c50:	3718      	adds	r7, #24
 8007c52:	46bd      	mov	sp, r7
 8007c54:	bd80      	pop	{r7, pc}

08007c56 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007c56:	b580      	push	{r7, lr}
 8007c58:	b084      	sub	sp, #16
 8007c5a:	af00      	add	r7, sp, #0
 8007c5c:	6078      	str	r0, [r7, #4]
 8007c5e:	460b      	mov	r3, r1
 8007c60:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c68:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007c70:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	d03a      	beq.n	8007cf2 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8007c7c:	78fa      	ldrb	r2, [r7, #3]
 8007c7e:	6879      	ldr	r1, [r7, #4]
 8007c80:	4613      	mov	r3, r2
 8007c82:	009b      	lsls	r3, r3, #2
 8007c84:	4413      	add	r3, r2
 8007c86:	009b      	lsls	r3, r3, #2
 8007c88:	440b      	add	r3, r1
 8007c8a:	331c      	adds	r3, #28
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d029      	beq.n	8007ce6 <USBD_CDC_DataIn+0x90>
 8007c92:	78fa      	ldrb	r2, [r7, #3]
 8007c94:	6879      	ldr	r1, [r7, #4]
 8007c96:	4613      	mov	r3, r2
 8007c98:	009b      	lsls	r3, r3, #2
 8007c9a:	4413      	add	r3, r2
 8007c9c:	009b      	lsls	r3, r3, #2
 8007c9e:	440b      	add	r3, r1
 8007ca0:	331c      	adds	r3, #28
 8007ca2:	681a      	ldr	r2, [r3, #0]
 8007ca4:	78f9      	ldrb	r1, [r7, #3]
 8007ca6:	68b8      	ldr	r0, [r7, #8]
 8007ca8:	460b      	mov	r3, r1
 8007caa:	00db      	lsls	r3, r3, #3
 8007cac:	1a5b      	subs	r3, r3, r1
 8007cae:	009b      	lsls	r3, r3, #2
 8007cb0:	4403      	add	r3, r0
 8007cb2:	3344      	adds	r3, #68	; 0x44
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	fbb2 f1f3 	udiv	r1, r2, r3
 8007cba:	fb03 f301 	mul.w	r3, r3, r1
 8007cbe:	1ad3      	subs	r3, r2, r3
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d110      	bne.n	8007ce6 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8007cc4:	78fa      	ldrb	r2, [r7, #3]
 8007cc6:	6879      	ldr	r1, [r7, #4]
 8007cc8:	4613      	mov	r3, r2
 8007cca:	009b      	lsls	r3, r3, #2
 8007ccc:	4413      	add	r3, r2
 8007cce:	009b      	lsls	r3, r3, #2
 8007cd0:	440b      	add	r3, r1
 8007cd2:	331c      	adds	r3, #28
 8007cd4:	2200      	movs	r2, #0
 8007cd6:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8007cd8:	78f9      	ldrb	r1, [r7, #3]
 8007cda:	2300      	movs	r3, #0
 8007cdc:	2200      	movs	r2, #0
 8007cde:	6878      	ldr	r0, [r7, #4]
 8007ce0:	f001 fe8c 	bl	80099fc <USBD_LL_Transmit>
 8007ce4:	e003      	b.n	8007cee <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	2200      	movs	r2, #0
 8007cea:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8007cee:	2300      	movs	r3, #0
 8007cf0:	e000      	b.n	8007cf4 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8007cf2:	2302      	movs	r3, #2
  }
}
 8007cf4:	4618      	mov	r0, r3
 8007cf6:	3710      	adds	r7, #16
 8007cf8:	46bd      	mov	sp, r7
 8007cfa:	bd80      	pop	{r7, pc}

08007cfc <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007cfc:	b580      	push	{r7, lr}
 8007cfe:	b084      	sub	sp, #16
 8007d00:	af00      	add	r7, sp, #0
 8007d02:	6078      	str	r0, [r7, #4]
 8007d04:	460b      	mov	r3, r1
 8007d06:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d0e:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8007d10:	78fb      	ldrb	r3, [r7, #3]
 8007d12:	4619      	mov	r1, r3
 8007d14:	6878      	ldr	r0, [r7, #4]
 8007d16:	f001 feb7 	bl	8009a88 <USBD_LL_GetRxDataSize>
 8007d1a:	4602      	mov	r2, r0
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	d00d      	beq.n	8007d48 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007d32:	68db      	ldr	r3, [r3, #12]
 8007d34:	68fa      	ldr	r2, [r7, #12]
 8007d36:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8007d3a:	68fa      	ldr	r2, [r7, #12]
 8007d3c:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8007d40:	4611      	mov	r1, r2
 8007d42:	4798      	blx	r3

    return USBD_OK;
 8007d44:	2300      	movs	r3, #0
 8007d46:	e000      	b.n	8007d4a <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8007d48:	2302      	movs	r3, #2
  }
}
 8007d4a:	4618      	mov	r0, r3
 8007d4c:	3710      	adds	r7, #16
 8007d4e:	46bd      	mov	sp, r7
 8007d50:	bd80      	pop	{r7, pc}

08007d52 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8007d52:	b580      	push	{r7, lr}
 8007d54:	b084      	sub	sp, #16
 8007d56:	af00      	add	r7, sp, #0
 8007d58:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d60:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d015      	beq.n	8007d98 <USBD_CDC_EP0_RxReady+0x46>
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8007d72:	2bff      	cmp	r3, #255	; 0xff
 8007d74:	d010      	beq.n	8007d98 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007d7c:	689b      	ldr	r3, [r3, #8]
 8007d7e:	68fa      	ldr	r2, [r7, #12]
 8007d80:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8007d84:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8007d86:	68fa      	ldr	r2, [r7, #12]
 8007d88:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007d8c:	b292      	uxth	r2, r2
 8007d8e:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	22ff      	movs	r2, #255	; 0xff
 8007d94:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 8007d98:	2300      	movs	r3, #0
}
 8007d9a:	4618      	mov	r0, r3
 8007d9c:	3710      	adds	r7, #16
 8007d9e:	46bd      	mov	sp, r7
 8007da0:	bd80      	pop	{r7, pc}
	...

08007da4 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8007da4:	b480      	push	{r7}
 8007da6:	b083      	sub	sp, #12
 8007da8:	af00      	add	r7, sp, #0
 8007daa:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	2243      	movs	r2, #67	; 0x43
 8007db0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8007db2:	4b03      	ldr	r3, [pc, #12]	; (8007dc0 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8007db4:	4618      	mov	r0, r3
 8007db6:	370c      	adds	r7, #12
 8007db8:	46bd      	mov	sp, r7
 8007dba:	bc80      	pop	{r7}
 8007dbc:	4770      	bx	lr
 8007dbe:	bf00      	nop
 8007dc0:	20000098 	.word	0x20000098

08007dc4 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8007dc4:	b480      	push	{r7}
 8007dc6:	b083      	sub	sp, #12
 8007dc8:	af00      	add	r7, sp, #0
 8007dca:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	2243      	movs	r2, #67	; 0x43
 8007dd0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8007dd2:	4b03      	ldr	r3, [pc, #12]	; (8007de0 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8007dd4:	4618      	mov	r0, r3
 8007dd6:	370c      	adds	r7, #12
 8007dd8:	46bd      	mov	sp, r7
 8007dda:	bc80      	pop	{r7}
 8007ddc:	4770      	bx	lr
 8007dde:	bf00      	nop
 8007de0:	20000054 	.word	0x20000054

08007de4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007de4:	b480      	push	{r7}
 8007de6:	b083      	sub	sp, #12
 8007de8:	af00      	add	r7, sp, #0
 8007dea:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	2243      	movs	r2, #67	; 0x43
 8007df0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8007df2:	4b03      	ldr	r3, [pc, #12]	; (8007e00 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8007df4:	4618      	mov	r0, r3
 8007df6:	370c      	adds	r7, #12
 8007df8:	46bd      	mov	sp, r7
 8007dfa:	bc80      	pop	{r7}
 8007dfc:	4770      	bx	lr
 8007dfe:	bf00      	nop
 8007e00:	200000dc 	.word	0x200000dc

08007e04 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8007e04:	b480      	push	{r7}
 8007e06:	b083      	sub	sp, #12
 8007e08:	af00      	add	r7, sp, #0
 8007e0a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	220a      	movs	r2, #10
 8007e10:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8007e12:	4b03      	ldr	r3, [pc, #12]	; (8007e20 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8007e14:	4618      	mov	r0, r3
 8007e16:	370c      	adds	r7, #12
 8007e18:	46bd      	mov	sp, r7
 8007e1a:	bc80      	pop	{r7}
 8007e1c:	4770      	bx	lr
 8007e1e:	bf00      	nop
 8007e20:	20000010 	.word	0x20000010

08007e24 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8007e24:	b480      	push	{r7}
 8007e26:	b085      	sub	sp, #20
 8007e28:	af00      	add	r7, sp, #0
 8007e2a:	6078      	str	r0, [r7, #4]
 8007e2c:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8007e2e:	2302      	movs	r3, #2
 8007e30:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8007e32:	683b      	ldr	r3, [r7, #0]
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	d005      	beq.n	8007e44 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	683a      	ldr	r2, [r7, #0]
 8007e3c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 8007e40:	2300      	movs	r3, #0
 8007e42:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8007e44:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e46:	4618      	mov	r0, r3
 8007e48:	3714      	adds	r7, #20
 8007e4a:	46bd      	mov	sp, r7
 8007e4c:	bc80      	pop	{r7}
 8007e4e:	4770      	bx	lr

08007e50 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8007e50:	b480      	push	{r7}
 8007e52:	b087      	sub	sp, #28
 8007e54:	af00      	add	r7, sp, #0
 8007e56:	60f8      	str	r0, [r7, #12]
 8007e58:	60b9      	str	r1, [r7, #8]
 8007e5a:	4613      	mov	r3, r2
 8007e5c:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e64:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8007e66:	697b      	ldr	r3, [r7, #20]
 8007e68:	68ba      	ldr	r2, [r7, #8]
 8007e6a:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8007e6e:	88fa      	ldrh	r2, [r7, #6]
 8007e70:	697b      	ldr	r3, [r7, #20]
 8007e72:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 8007e76:	2300      	movs	r3, #0
}
 8007e78:	4618      	mov	r0, r3
 8007e7a:	371c      	adds	r7, #28
 8007e7c:	46bd      	mov	sp, r7
 8007e7e:	bc80      	pop	{r7}
 8007e80:	4770      	bx	lr

08007e82 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8007e82:	b480      	push	{r7}
 8007e84:	b085      	sub	sp, #20
 8007e86:	af00      	add	r7, sp, #0
 8007e88:	6078      	str	r0, [r7, #4]
 8007e8a:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e92:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	683a      	ldr	r2, [r7, #0]
 8007e98:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8007e9c:	2300      	movs	r3, #0
}
 8007e9e:	4618      	mov	r0, r3
 8007ea0:	3714      	adds	r7, #20
 8007ea2:	46bd      	mov	sp, r7
 8007ea4:	bc80      	pop	{r7}
 8007ea6:	4770      	bx	lr

08007ea8 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8007ea8:	b580      	push	{r7, lr}
 8007eaa:	b084      	sub	sp, #16
 8007eac:	af00      	add	r7, sp, #0
 8007eae:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007eb6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	d01c      	beq.n	8007efc <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d115      	bne.n	8007ef8 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	2201      	movs	r2, #1
 8007ed0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8007eea:	b29b      	uxth	r3, r3
 8007eec:	2181      	movs	r1, #129	; 0x81
 8007eee:	6878      	ldr	r0, [r7, #4]
 8007ef0:	f001 fd84 	bl	80099fc <USBD_LL_Transmit>

      return USBD_OK;
 8007ef4:	2300      	movs	r3, #0
 8007ef6:	e002      	b.n	8007efe <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 8007ef8:	2301      	movs	r3, #1
 8007efa:	e000      	b.n	8007efe <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 8007efc:	2302      	movs	r3, #2
  }
}
 8007efe:	4618      	mov	r0, r3
 8007f00:	3710      	adds	r7, #16
 8007f02:	46bd      	mov	sp, r7
 8007f04:	bd80      	pop	{r7, pc}

08007f06 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8007f06:	b580      	push	{r7, lr}
 8007f08:	b084      	sub	sp, #16
 8007f0a:	af00      	add	r7, sp, #0
 8007f0c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f14:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d017      	beq.n	8007f50 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	7c1b      	ldrb	r3, [r3, #16]
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d109      	bne.n	8007f3c <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007f2e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007f32:	2101      	movs	r1, #1
 8007f34:	6878      	ldr	r0, [r7, #4]
 8007f36:	f001 fd84 	bl	8009a42 <USBD_LL_PrepareReceive>
 8007f3a:	e007      	b.n	8007f4c <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007f42:	2340      	movs	r3, #64	; 0x40
 8007f44:	2101      	movs	r1, #1
 8007f46:	6878      	ldr	r0, [r7, #4]
 8007f48:	f001 fd7b 	bl	8009a42 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8007f4c:	2300      	movs	r3, #0
 8007f4e:	e000      	b.n	8007f52 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8007f50:	2302      	movs	r3, #2
  }
}
 8007f52:	4618      	mov	r0, r3
 8007f54:	3710      	adds	r7, #16
 8007f56:	46bd      	mov	sp, r7
 8007f58:	bd80      	pop	{r7, pc}

08007f5a <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007f5a:	b580      	push	{r7, lr}
 8007f5c:	b084      	sub	sp, #16
 8007f5e:	af00      	add	r7, sp, #0
 8007f60:	60f8      	str	r0, [r7, #12]
 8007f62:	60b9      	str	r1, [r7, #8]
 8007f64:	4613      	mov	r3, r2
 8007f66:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d101      	bne.n	8007f72 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8007f6e:	2302      	movs	r3, #2
 8007f70:	e01a      	b.n	8007fa8 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d003      	beq.n	8007f84 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	2200      	movs	r2, #0
 8007f80:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007f84:	68bb      	ldr	r3, [r7, #8]
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d003      	beq.n	8007f92 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	68ba      	ldr	r2, [r7, #8]
 8007f8e:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	2201      	movs	r2, #1
 8007f96:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	79fa      	ldrb	r2, [r7, #7]
 8007f9e:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8007fa0:	68f8      	ldr	r0, [r7, #12]
 8007fa2:	f001 fbf9 	bl	8009798 <USBD_LL_Init>

  return USBD_OK;
 8007fa6:	2300      	movs	r3, #0
}
 8007fa8:	4618      	mov	r0, r3
 8007faa:	3710      	adds	r7, #16
 8007fac:	46bd      	mov	sp, r7
 8007fae:	bd80      	pop	{r7, pc}

08007fb0 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007fb0:	b480      	push	{r7}
 8007fb2:	b085      	sub	sp, #20
 8007fb4:	af00      	add	r7, sp, #0
 8007fb6:	6078      	str	r0, [r7, #4]
 8007fb8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8007fba:	2300      	movs	r3, #0
 8007fbc:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8007fbe:	683b      	ldr	r3, [r7, #0]
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d006      	beq.n	8007fd2 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	683a      	ldr	r2, [r7, #0]
 8007fc8:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8007fcc:	2300      	movs	r3, #0
 8007fce:	73fb      	strb	r3, [r7, #15]
 8007fd0:	e001      	b.n	8007fd6 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8007fd2:	2302      	movs	r3, #2
 8007fd4:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007fd6:	7bfb      	ldrb	r3, [r7, #15]
}
 8007fd8:	4618      	mov	r0, r3
 8007fda:	3714      	adds	r7, #20
 8007fdc:	46bd      	mov	sp, r7
 8007fde:	bc80      	pop	{r7}
 8007fe0:	4770      	bx	lr

08007fe2 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007fe2:	b580      	push	{r7, lr}
 8007fe4:	b082      	sub	sp, #8
 8007fe6:	af00      	add	r7, sp, #0
 8007fe8:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8007fea:	6878      	ldr	r0, [r7, #4]
 8007fec:	f001 fc1e 	bl	800982c <USBD_LL_Start>

  return USBD_OK;
 8007ff0:	2300      	movs	r3, #0
}
 8007ff2:	4618      	mov	r0, r3
 8007ff4:	3708      	adds	r7, #8
 8007ff6:	46bd      	mov	sp, r7
 8007ff8:	bd80      	pop	{r7, pc}

08007ffa <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8007ffa:	b480      	push	{r7}
 8007ffc:	b083      	sub	sp, #12
 8007ffe:	af00      	add	r7, sp, #0
 8008000:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008002:	2300      	movs	r3, #0
}
 8008004:	4618      	mov	r0, r3
 8008006:	370c      	adds	r7, #12
 8008008:	46bd      	mov	sp, r7
 800800a:	bc80      	pop	{r7}
 800800c:	4770      	bx	lr

0800800e <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800800e:	b580      	push	{r7, lr}
 8008010:	b084      	sub	sp, #16
 8008012:	af00      	add	r7, sp, #0
 8008014:	6078      	str	r0, [r7, #4]
 8008016:	460b      	mov	r3, r1
 8008018:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800801a:	2302      	movs	r3, #2
 800801c:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008024:	2b00      	cmp	r3, #0
 8008026:	d00c      	beq.n	8008042 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	78fa      	ldrb	r2, [r7, #3]
 8008032:	4611      	mov	r1, r2
 8008034:	6878      	ldr	r0, [r7, #4]
 8008036:	4798      	blx	r3
 8008038:	4603      	mov	r3, r0
 800803a:	2b00      	cmp	r3, #0
 800803c:	d101      	bne.n	8008042 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800803e:	2300      	movs	r3, #0
 8008040:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8008042:	7bfb      	ldrb	r3, [r7, #15]
}
 8008044:	4618      	mov	r0, r3
 8008046:	3710      	adds	r7, #16
 8008048:	46bd      	mov	sp, r7
 800804a:	bd80      	pop	{r7, pc}

0800804c <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800804c:	b580      	push	{r7, lr}
 800804e:	b082      	sub	sp, #8
 8008050:	af00      	add	r7, sp, #0
 8008052:	6078      	str	r0, [r7, #4]
 8008054:	460b      	mov	r3, r1
 8008056:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800805e:	685b      	ldr	r3, [r3, #4]
 8008060:	78fa      	ldrb	r2, [r7, #3]
 8008062:	4611      	mov	r1, r2
 8008064:	6878      	ldr	r0, [r7, #4]
 8008066:	4798      	blx	r3

  return USBD_OK;
 8008068:	2300      	movs	r3, #0
}
 800806a:	4618      	mov	r0, r3
 800806c:	3708      	adds	r7, #8
 800806e:	46bd      	mov	sp, r7
 8008070:	bd80      	pop	{r7, pc}

08008072 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8008072:	b580      	push	{r7, lr}
 8008074:	b082      	sub	sp, #8
 8008076:	af00      	add	r7, sp, #0
 8008078:	6078      	str	r0, [r7, #4]
 800807a:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8008082:	6839      	ldr	r1, [r7, #0]
 8008084:	4618      	mov	r0, r3
 8008086:	f000 ff10 	bl	8008eaa <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	2201      	movs	r2, #1
 800808e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8008098:	461a      	mov	r2, r3
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80080a6:	f003 031f 	and.w	r3, r3, #31
 80080aa:	2b02      	cmp	r3, #2
 80080ac:	d016      	beq.n	80080dc <USBD_LL_SetupStage+0x6a>
 80080ae:	2b02      	cmp	r3, #2
 80080b0:	d81c      	bhi.n	80080ec <USBD_LL_SetupStage+0x7a>
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d002      	beq.n	80080bc <USBD_LL_SetupStage+0x4a>
 80080b6:	2b01      	cmp	r3, #1
 80080b8:	d008      	beq.n	80080cc <USBD_LL_SetupStage+0x5a>
 80080ba:	e017      	b.n	80080ec <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80080c2:	4619      	mov	r1, r3
 80080c4:	6878      	ldr	r0, [r7, #4]
 80080c6:	f000 fa03 	bl	80084d0 <USBD_StdDevReq>
      break;
 80080ca:	e01a      	b.n	8008102 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80080d2:	4619      	mov	r1, r3
 80080d4:	6878      	ldr	r0, [r7, #4]
 80080d6:	f000 fa65 	bl	80085a4 <USBD_StdItfReq>
      break;
 80080da:	e012      	b.n	8008102 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80080e2:	4619      	mov	r1, r3
 80080e4:	6878      	ldr	r0, [r7, #4]
 80080e6:	f000 faa5 	bl	8008634 <USBD_StdEPReq>
      break;
 80080ea:	e00a      	b.n	8008102 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80080f2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80080f6:	b2db      	uxtb	r3, r3
 80080f8:	4619      	mov	r1, r3
 80080fa:	6878      	ldr	r0, [r7, #4]
 80080fc:	f001 fbf6 	bl	80098ec <USBD_LL_StallEP>
      break;
 8008100:	bf00      	nop
  }

  return USBD_OK;
 8008102:	2300      	movs	r3, #0
}
 8008104:	4618      	mov	r0, r3
 8008106:	3708      	adds	r7, #8
 8008108:	46bd      	mov	sp, r7
 800810a:	bd80      	pop	{r7, pc}

0800810c <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800810c:	b580      	push	{r7, lr}
 800810e:	b086      	sub	sp, #24
 8008110:	af00      	add	r7, sp, #0
 8008112:	60f8      	str	r0, [r7, #12]
 8008114:	460b      	mov	r3, r1
 8008116:	607a      	str	r2, [r7, #4]
 8008118:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800811a:	7afb      	ldrb	r3, [r7, #11]
 800811c:	2b00      	cmp	r3, #0
 800811e:	d14b      	bne.n	80081b8 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8008126:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800812e:	2b03      	cmp	r3, #3
 8008130:	d134      	bne.n	800819c <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8008132:	697b      	ldr	r3, [r7, #20]
 8008134:	68da      	ldr	r2, [r3, #12]
 8008136:	697b      	ldr	r3, [r7, #20]
 8008138:	691b      	ldr	r3, [r3, #16]
 800813a:	429a      	cmp	r2, r3
 800813c:	d919      	bls.n	8008172 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 800813e:	697b      	ldr	r3, [r7, #20]
 8008140:	68da      	ldr	r2, [r3, #12]
 8008142:	697b      	ldr	r3, [r7, #20]
 8008144:	691b      	ldr	r3, [r3, #16]
 8008146:	1ad2      	subs	r2, r2, r3
 8008148:	697b      	ldr	r3, [r7, #20]
 800814a:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800814c:	697b      	ldr	r3, [r7, #20]
 800814e:	68da      	ldr	r2, [r3, #12]
 8008150:	697b      	ldr	r3, [r7, #20]
 8008152:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8008154:	429a      	cmp	r2, r3
 8008156:	d203      	bcs.n	8008160 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008158:	697b      	ldr	r3, [r7, #20]
 800815a:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 800815c:	b29b      	uxth	r3, r3
 800815e:	e002      	b.n	8008166 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008160:	697b      	ldr	r3, [r7, #20]
 8008162:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8008164:	b29b      	uxth	r3, r3
 8008166:	461a      	mov	r2, r3
 8008168:	6879      	ldr	r1, [r7, #4]
 800816a:	68f8      	ldr	r0, [r7, #12]
 800816c:	f000 ff8f 	bl	800908e <USBD_CtlContinueRx>
 8008170:	e038      	b.n	80081e4 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008178:	691b      	ldr	r3, [r3, #16]
 800817a:	2b00      	cmp	r3, #0
 800817c:	d00a      	beq.n	8008194 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8008184:	2b03      	cmp	r3, #3
 8008186:	d105      	bne.n	8008194 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800818e:	691b      	ldr	r3, [r3, #16]
 8008190:	68f8      	ldr	r0, [r7, #12]
 8008192:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8008194:	68f8      	ldr	r0, [r7, #12]
 8008196:	f000 ff8c 	bl	80090b2 <USBD_CtlSendStatus>
 800819a:	e023      	b.n	80081e4 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80081a2:	2b05      	cmp	r3, #5
 80081a4:	d11e      	bne.n	80081e4 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	2200      	movs	r2, #0
 80081aa:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 80081ae:	2100      	movs	r1, #0
 80081b0:	68f8      	ldr	r0, [r7, #12]
 80081b2:	f001 fb9b 	bl	80098ec <USBD_LL_StallEP>
 80081b6:	e015      	b.n	80081e4 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80081be:	699b      	ldr	r3, [r3, #24]
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	d00d      	beq.n	80081e0 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 80081ca:	2b03      	cmp	r3, #3
 80081cc:	d108      	bne.n	80081e0 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80081d4:	699b      	ldr	r3, [r3, #24]
 80081d6:	7afa      	ldrb	r2, [r7, #11]
 80081d8:	4611      	mov	r1, r2
 80081da:	68f8      	ldr	r0, [r7, #12]
 80081dc:	4798      	blx	r3
 80081de:	e001      	b.n	80081e4 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80081e0:	2302      	movs	r3, #2
 80081e2:	e000      	b.n	80081e6 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 80081e4:	2300      	movs	r3, #0
}
 80081e6:	4618      	mov	r0, r3
 80081e8:	3718      	adds	r7, #24
 80081ea:	46bd      	mov	sp, r7
 80081ec:	bd80      	pop	{r7, pc}

080081ee <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80081ee:	b580      	push	{r7, lr}
 80081f0:	b086      	sub	sp, #24
 80081f2:	af00      	add	r7, sp, #0
 80081f4:	60f8      	str	r0, [r7, #12]
 80081f6:	460b      	mov	r3, r1
 80081f8:	607a      	str	r2, [r7, #4]
 80081fa:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80081fc:	7afb      	ldrb	r3, [r7, #11]
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d17f      	bne.n	8008302 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	3314      	adds	r3, #20
 8008206:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800820e:	2b02      	cmp	r3, #2
 8008210:	d15c      	bne.n	80082cc <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8008212:	697b      	ldr	r3, [r7, #20]
 8008214:	68da      	ldr	r2, [r3, #12]
 8008216:	697b      	ldr	r3, [r7, #20]
 8008218:	691b      	ldr	r3, [r3, #16]
 800821a:	429a      	cmp	r2, r3
 800821c:	d915      	bls.n	800824a <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 800821e:	697b      	ldr	r3, [r7, #20]
 8008220:	68da      	ldr	r2, [r3, #12]
 8008222:	697b      	ldr	r3, [r7, #20]
 8008224:	691b      	ldr	r3, [r3, #16]
 8008226:	1ad2      	subs	r2, r2, r3
 8008228:	697b      	ldr	r3, [r7, #20]
 800822a:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 800822c:	697b      	ldr	r3, [r7, #20]
 800822e:	68db      	ldr	r3, [r3, #12]
 8008230:	b29b      	uxth	r3, r3
 8008232:	461a      	mov	r2, r3
 8008234:	6879      	ldr	r1, [r7, #4]
 8008236:	68f8      	ldr	r0, [r7, #12]
 8008238:	f000 fef9 	bl	800902e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800823c:	2300      	movs	r3, #0
 800823e:	2200      	movs	r2, #0
 8008240:	2100      	movs	r1, #0
 8008242:	68f8      	ldr	r0, [r7, #12]
 8008244:	f001 fbfd 	bl	8009a42 <USBD_LL_PrepareReceive>
 8008248:	e04e      	b.n	80082e8 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800824a:	697b      	ldr	r3, [r7, #20]
 800824c:	689b      	ldr	r3, [r3, #8]
 800824e:	697a      	ldr	r2, [r7, #20]
 8008250:	6912      	ldr	r2, [r2, #16]
 8008252:	fbb3 f1f2 	udiv	r1, r3, r2
 8008256:	fb02 f201 	mul.w	r2, r2, r1
 800825a:	1a9b      	subs	r3, r3, r2
 800825c:	2b00      	cmp	r3, #0
 800825e:	d11c      	bne.n	800829a <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8008260:	697b      	ldr	r3, [r7, #20]
 8008262:	689a      	ldr	r2, [r3, #8]
 8008264:	697b      	ldr	r3, [r7, #20]
 8008266:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8008268:	429a      	cmp	r2, r3
 800826a:	d316      	bcc.n	800829a <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 800826c:	697b      	ldr	r3, [r7, #20]
 800826e:	689a      	ldr	r2, [r3, #8]
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8008276:	429a      	cmp	r2, r3
 8008278:	d20f      	bcs.n	800829a <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800827a:	2200      	movs	r2, #0
 800827c:	2100      	movs	r1, #0
 800827e:	68f8      	ldr	r0, [r7, #12]
 8008280:	f000 fed5 	bl	800902e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	2200      	movs	r2, #0
 8008288:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800828c:	2300      	movs	r3, #0
 800828e:	2200      	movs	r2, #0
 8008290:	2100      	movs	r1, #0
 8008292:	68f8      	ldr	r0, [r7, #12]
 8008294:	f001 fbd5 	bl	8009a42 <USBD_LL_PrepareReceive>
 8008298:	e026      	b.n	80082e8 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80082a0:	68db      	ldr	r3, [r3, #12]
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	d00a      	beq.n	80082bc <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80082ac:	2b03      	cmp	r3, #3
 80082ae:	d105      	bne.n	80082bc <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80082b6:	68db      	ldr	r3, [r3, #12]
 80082b8:	68f8      	ldr	r0, [r7, #12]
 80082ba:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 80082bc:	2180      	movs	r1, #128	; 0x80
 80082be:	68f8      	ldr	r0, [r7, #12]
 80082c0:	f001 fb14 	bl	80098ec <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 80082c4:	68f8      	ldr	r0, [r7, #12]
 80082c6:	f000 ff07 	bl	80090d8 <USBD_CtlReceiveStatus>
 80082ca:	e00d      	b.n	80082e8 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80082cc:	68fb      	ldr	r3, [r7, #12]
 80082ce:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80082d2:	2b04      	cmp	r3, #4
 80082d4:	d004      	beq.n	80082e0 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d103      	bne.n	80082e8 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 80082e0:	2180      	movs	r1, #128	; 0x80
 80082e2:	68f8      	ldr	r0, [r7, #12]
 80082e4:	f001 fb02 	bl	80098ec <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80082ee:	2b01      	cmp	r3, #1
 80082f0:	d11d      	bne.n	800832e <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 80082f2:	68f8      	ldr	r0, [r7, #12]
 80082f4:	f7ff fe81 	bl	8007ffa <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	2200      	movs	r2, #0
 80082fc:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8008300:	e015      	b.n	800832e <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008308:	695b      	ldr	r3, [r3, #20]
 800830a:	2b00      	cmp	r3, #0
 800830c:	d00d      	beq.n	800832a <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800830e:	68fb      	ldr	r3, [r7, #12]
 8008310:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8008314:	2b03      	cmp	r3, #3
 8008316:	d108      	bne.n	800832a <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800831e:	695b      	ldr	r3, [r3, #20]
 8008320:	7afa      	ldrb	r2, [r7, #11]
 8008322:	4611      	mov	r1, r2
 8008324:	68f8      	ldr	r0, [r7, #12]
 8008326:	4798      	blx	r3
 8008328:	e001      	b.n	800832e <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800832a:	2302      	movs	r3, #2
 800832c:	e000      	b.n	8008330 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800832e:	2300      	movs	r3, #0
}
 8008330:	4618      	mov	r0, r3
 8008332:	3718      	adds	r7, #24
 8008334:	46bd      	mov	sp, r7
 8008336:	bd80      	pop	{r7, pc}

08008338 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8008338:	b580      	push	{r7, lr}
 800833a:	b082      	sub	sp, #8
 800833c:	af00      	add	r7, sp, #0
 800833e:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008340:	2340      	movs	r3, #64	; 0x40
 8008342:	2200      	movs	r2, #0
 8008344:	2100      	movs	r1, #0
 8008346:	6878      	ldr	r0, [r7, #4]
 8008348:	f001 fa8b 	bl	8009862 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	2201      	movs	r2, #1
 8008350:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	2240      	movs	r2, #64	; 0x40
 8008358:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800835c:	2340      	movs	r3, #64	; 0x40
 800835e:	2200      	movs	r2, #0
 8008360:	2180      	movs	r1, #128	; 0x80
 8008362:	6878      	ldr	r0, [r7, #4]
 8008364:	f001 fa7d 	bl	8009862 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	2201      	movs	r2, #1
 800836c:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	2240      	movs	r2, #64	; 0x40
 8008372:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	2201      	movs	r2, #1
 8008378:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	2200      	movs	r2, #0
 8008380:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	2200      	movs	r2, #0
 8008388:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	2200      	movs	r2, #0
 800838e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008398:	2b00      	cmp	r3, #0
 800839a:	d009      	beq.n	80083b0 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80083a2:	685b      	ldr	r3, [r3, #4]
 80083a4:	687a      	ldr	r2, [r7, #4]
 80083a6:	6852      	ldr	r2, [r2, #4]
 80083a8:	b2d2      	uxtb	r2, r2
 80083aa:	4611      	mov	r1, r2
 80083ac:	6878      	ldr	r0, [r7, #4]
 80083ae:	4798      	blx	r3
  }

  return USBD_OK;
 80083b0:	2300      	movs	r3, #0
}
 80083b2:	4618      	mov	r0, r3
 80083b4:	3708      	adds	r7, #8
 80083b6:	46bd      	mov	sp, r7
 80083b8:	bd80      	pop	{r7, pc}

080083ba <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80083ba:	b480      	push	{r7}
 80083bc:	b083      	sub	sp, #12
 80083be:	af00      	add	r7, sp, #0
 80083c0:	6078      	str	r0, [r7, #4]
 80083c2:	460b      	mov	r3, r1
 80083c4:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	78fa      	ldrb	r2, [r7, #3]
 80083ca:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80083cc:	2300      	movs	r3, #0
}
 80083ce:	4618      	mov	r0, r3
 80083d0:	370c      	adds	r7, #12
 80083d2:	46bd      	mov	sp, r7
 80083d4:	bc80      	pop	{r7}
 80083d6:	4770      	bx	lr

080083d8 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80083d8:	b480      	push	{r7}
 80083da:	b083      	sub	sp, #12
 80083dc:	af00      	add	r7, sp, #0
 80083de:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	2204      	movs	r2, #4
 80083f0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80083f4:	2300      	movs	r3, #0
}
 80083f6:	4618      	mov	r0, r3
 80083f8:	370c      	adds	r7, #12
 80083fa:	46bd      	mov	sp, r7
 80083fc:	bc80      	pop	{r7}
 80083fe:	4770      	bx	lr

08008400 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8008400:	b480      	push	{r7}
 8008402:	b083      	sub	sp, #12
 8008404:	af00      	add	r7, sp, #0
 8008406:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800840e:	2b04      	cmp	r3, #4
 8008410:	d105      	bne.n	800841e <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800841e:	2300      	movs	r3, #0
}
 8008420:	4618      	mov	r0, r3
 8008422:	370c      	adds	r7, #12
 8008424:	46bd      	mov	sp, r7
 8008426:	bc80      	pop	{r7}
 8008428:	4770      	bx	lr

0800842a <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800842a:	b580      	push	{r7, lr}
 800842c:	b082      	sub	sp, #8
 800842e:	af00      	add	r7, sp, #0
 8008430:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008438:	2b03      	cmp	r3, #3
 800843a:	d10b      	bne.n	8008454 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008442:	69db      	ldr	r3, [r3, #28]
 8008444:	2b00      	cmp	r3, #0
 8008446:	d005      	beq.n	8008454 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800844e:	69db      	ldr	r3, [r3, #28]
 8008450:	6878      	ldr	r0, [r7, #4]
 8008452:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008454:	2300      	movs	r3, #0
}
 8008456:	4618      	mov	r0, r3
 8008458:	3708      	adds	r7, #8
 800845a:	46bd      	mov	sp, r7
 800845c:	bd80      	pop	{r7, pc}

0800845e <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800845e:	b480      	push	{r7}
 8008460:	b083      	sub	sp, #12
 8008462:	af00      	add	r7, sp, #0
 8008464:	6078      	str	r0, [r7, #4]
 8008466:	460b      	mov	r3, r1
 8008468:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800846a:	2300      	movs	r3, #0
}
 800846c:	4618      	mov	r0, r3
 800846e:	370c      	adds	r7, #12
 8008470:	46bd      	mov	sp, r7
 8008472:	bc80      	pop	{r7}
 8008474:	4770      	bx	lr

08008476 <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8008476:	b480      	push	{r7}
 8008478:	b083      	sub	sp, #12
 800847a:	af00      	add	r7, sp, #0
 800847c:	6078      	str	r0, [r7, #4]
 800847e:	460b      	mov	r3, r1
 8008480:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8008482:	2300      	movs	r3, #0
}
 8008484:	4618      	mov	r0, r3
 8008486:	370c      	adds	r7, #12
 8008488:	46bd      	mov	sp, r7
 800848a:	bc80      	pop	{r7}
 800848c:	4770      	bx	lr

0800848e <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800848e:	b480      	push	{r7}
 8008490:	b083      	sub	sp, #12
 8008492:	af00      	add	r7, sp, #0
 8008494:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008496:	2300      	movs	r3, #0
}
 8008498:	4618      	mov	r0, r3
 800849a:	370c      	adds	r7, #12
 800849c:	46bd      	mov	sp, r7
 800849e:	bc80      	pop	{r7}
 80084a0:	4770      	bx	lr

080084a2 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80084a2:	b580      	push	{r7, lr}
 80084a4:	b082      	sub	sp, #8
 80084a6:	af00      	add	r7, sp, #0
 80084a8:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	2201      	movs	r2, #1
 80084ae:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80084b8:	685b      	ldr	r3, [r3, #4]
 80084ba:	687a      	ldr	r2, [r7, #4]
 80084bc:	6852      	ldr	r2, [r2, #4]
 80084be:	b2d2      	uxtb	r2, r2
 80084c0:	4611      	mov	r1, r2
 80084c2:	6878      	ldr	r0, [r7, #4]
 80084c4:	4798      	blx	r3

  return USBD_OK;
 80084c6:	2300      	movs	r3, #0
}
 80084c8:	4618      	mov	r0, r3
 80084ca:	3708      	adds	r7, #8
 80084cc:	46bd      	mov	sp, r7
 80084ce:	bd80      	pop	{r7, pc}

080084d0 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 80084d0:	b580      	push	{r7, lr}
 80084d2:	b084      	sub	sp, #16
 80084d4:	af00      	add	r7, sp, #0
 80084d6:	6078      	str	r0, [r7, #4]
 80084d8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80084da:	2300      	movs	r3, #0
 80084dc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80084de:	683b      	ldr	r3, [r7, #0]
 80084e0:	781b      	ldrb	r3, [r3, #0]
 80084e2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80084e6:	2b40      	cmp	r3, #64	; 0x40
 80084e8:	d005      	beq.n	80084f6 <USBD_StdDevReq+0x26>
 80084ea:	2b40      	cmp	r3, #64	; 0x40
 80084ec:	d84f      	bhi.n	800858e <USBD_StdDevReq+0xbe>
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	d009      	beq.n	8008506 <USBD_StdDevReq+0x36>
 80084f2:	2b20      	cmp	r3, #32
 80084f4:	d14b      	bne.n	800858e <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80084fc:	689b      	ldr	r3, [r3, #8]
 80084fe:	6839      	ldr	r1, [r7, #0]
 8008500:	6878      	ldr	r0, [r7, #4]
 8008502:	4798      	blx	r3
      break;
 8008504:	e048      	b.n	8008598 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008506:	683b      	ldr	r3, [r7, #0]
 8008508:	785b      	ldrb	r3, [r3, #1]
 800850a:	2b09      	cmp	r3, #9
 800850c:	d839      	bhi.n	8008582 <USBD_StdDevReq+0xb2>
 800850e:	a201      	add	r2, pc, #4	; (adr r2, 8008514 <USBD_StdDevReq+0x44>)
 8008510:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008514:	08008565 	.word	0x08008565
 8008518:	08008579 	.word	0x08008579
 800851c:	08008583 	.word	0x08008583
 8008520:	0800856f 	.word	0x0800856f
 8008524:	08008583 	.word	0x08008583
 8008528:	08008547 	.word	0x08008547
 800852c:	0800853d 	.word	0x0800853d
 8008530:	08008583 	.word	0x08008583
 8008534:	0800855b 	.word	0x0800855b
 8008538:	08008551 	.word	0x08008551
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800853c:	6839      	ldr	r1, [r7, #0]
 800853e:	6878      	ldr	r0, [r7, #4]
 8008540:	f000 f9dc 	bl	80088fc <USBD_GetDescriptor>
          break;
 8008544:	e022      	b.n	800858c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8008546:	6839      	ldr	r1, [r7, #0]
 8008548:	6878      	ldr	r0, [r7, #4]
 800854a:	f000 fb3f 	bl	8008bcc <USBD_SetAddress>
          break;
 800854e:	e01d      	b.n	800858c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8008550:	6839      	ldr	r1, [r7, #0]
 8008552:	6878      	ldr	r0, [r7, #4]
 8008554:	f000 fb7e 	bl	8008c54 <USBD_SetConfig>
          break;
 8008558:	e018      	b.n	800858c <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800855a:	6839      	ldr	r1, [r7, #0]
 800855c:	6878      	ldr	r0, [r7, #4]
 800855e:	f000 fc07 	bl	8008d70 <USBD_GetConfig>
          break;
 8008562:	e013      	b.n	800858c <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8008564:	6839      	ldr	r1, [r7, #0]
 8008566:	6878      	ldr	r0, [r7, #4]
 8008568:	f000 fc37 	bl	8008dda <USBD_GetStatus>
          break;
 800856c:	e00e      	b.n	800858c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800856e:	6839      	ldr	r1, [r7, #0]
 8008570:	6878      	ldr	r0, [r7, #4]
 8008572:	f000 fc65 	bl	8008e40 <USBD_SetFeature>
          break;
 8008576:	e009      	b.n	800858c <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8008578:	6839      	ldr	r1, [r7, #0]
 800857a:	6878      	ldr	r0, [r7, #4]
 800857c:	f000 fc74 	bl	8008e68 <USBD_ClrFeature>
          break;
 8008580:	e004      	b.n	800858c <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8008582:	6839      	ldr	r1, [r7, #0]
 8008584:	6878      	ldr	r0, [r7, #4]
 8008586:	f000 fccc 	bl	8008f22 <USBD_CtlError>
          break;
 800858a:	bf00      	nop
      }
      break;
 800858c:	e004      	b.n	8008598 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 800858e:	6839      	ldr	r1, [r7, #0]
 8008590:	6878      	ldr	r0, [r7, #4]
 8008592:	f000 fcc6 	bl	8008f22 <USBD_CtlError>
      break;
 8008596:	bf00      	nop
  }

  return ret;
 8008598:	7bfb      	ldrb	r3, [r7, #15]
}
 800859a:	4618      	mov	r0, r3
 800859c:	3710      	adds	r7, #16
 800859e:	46bd      	mov	sp, r7
 80085a0:	bd80      	pop	{r7, pc}
 80085a2:	bf00      	nop

080085a4 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 80085a4:	b580      	push	{r7, lr}
 80085a6:	b084      	sub	sp, #16
 80085a8:	af00      	add	r7, sp, #0
 80085aa:	6078      	str	r0, [r7, #4]
 80085ac:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80085ae:	2300      	movs	r3, #0
 80085b0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80085b2:	683b      	ldr	r3, [r7, #0]
 80085b4:	781b      	ldrb	r3, [r3, #0]
 80085b6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80085ba:	2b40      	cmp	r3, #64	; 0x40
 80085bc:	d005      	beq.n	80085ca <USBD_StdItfReq+0x26>
 80085be:	2b40      	cmp	r3, #64	; 0x40
 80085c0:	d82e      	bhi.n	8008620 <USBD_StdItfReq+0x7c>
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d001      	beq.n	80085ca <USBD_StdItfReq+0x26>
 80085c6:	2b20      	cmp	r3, #32
 80085c8:	d12a      	bne.n	8008620 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80085d0:	3b01      	subs	r3, #1
 80085d2:	2b02      	cmp	r3, #2
 80085d4:	d81d      	bhi.n	8008612 <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80085d6:	683b      	ldr	r3, [r7, #0]
 80085d8:	889b      	ldrh	r3, [r3, #4]
 80085da:	b2db      	uxtb	r3, r3
 80085dc:	2b01      	cmp	r3, #1
 80085de:	d813      	bhi.n	8008608 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80085e6:	689b      	ldr	r3, [r3, #8]
 80085e8:	6839      	ldr	r1, [r7, #0]
 80085ea:	6878      	ldr	r0, [r7, #4]
 80085ec:	4798      	blx	r3
 80085ee:	4603      	mov	r3, r0
 80085f0:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80085f2:	683b      	ldr	r3, [r7, #0]
 80085f4:	88db      	ldrh	r3, [r3, #6]
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	d110      	bne.n	800861c <USBD_StdItfReq+0x78>
 80085fa:	7bfb      	ldrb	r3, [r7, #15]
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	d10d      	bne.n	800861c <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8008600:	6878      	ldr	r0, [r7, #4]
 8008602:	f000 fd56 	bl	80090b2 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8008606:	e009      	b.n	800861c <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8008608:	6839      	ldr	r1, [r7, #0]
 800860a:	6878      	ldr	r0, [r7, #4]
 800860c:	f000 fc89 	bl	8008f22 <USBD_CtlError>
          break;
 8008610:	e004      	b.n	800861c <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 8008612:	6839      	ldr	r1, [r7, #0]
 8008614:	6878      	ldr	r0, [r7, #4]
 8008616:	f000 fc84 	bl	8008f22 <USBD_CtlError>
          break;
 800861a:	e000      	b.n	800861e <USBD_StdItfReq+0x7a>
          break;
 800861c:	bf00      	nop
      }
      break;
 800861e:	e004      	b.n	800862a <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8008620:	6839      	ldr	r1, [r7, #0]
 8008622:	6878      	ldr	r0, [r7, #4]
 8008624:	f000 fc7d 	bl	8008f22 <USBD_CtlError>
      break;
 8008628:	bf00      	nop
  }

  return USBD_OK;
 800862a:	2300      	movs	r3, #0
}
 800862c:	4618      	mov	r0, r3
 800862e:	3710      	adds	r7, #16
 8008630:	46bd      	mov	sp, r7
 8008632:	bd80      	pop	{r7, pc}

08008634 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8008634:	b580      	push	{r7, lr}
 8008636:	b084      	sub	sp, #16
 8008638:	af00      	add	r7, sp, #0
 800863a:	6078      	str	r0, [r7, #4]
 800863c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800863e:	2300      	movs	r3, #0
 8008640:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8008642:	683b      	ldr	r3, [r7, #0]
 8008644:	889b      	ldrh	r3, [r3, #4]
 8008646:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008648:	683b      	ldr	r3, [r7, #0]
 800864a:	781b      	ldrb	r3, [r3, #0]
 800864c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008650:	2b40      	cmp	r3, #64	; 0x40
 8008652:	d007      	beq.n	8008664 <USBD_StdEPReq+0x30>
 8008654:	2b40      	cmp	r3, #64	; 0x40
 8008656:	f200 8146 	bhi.w	80088e6 <USBD_StdEPReq+0x2b2>
 800865a:	2b00      	cmp	r3, #0
 800865c:	d00a      	beq.n	8008674 <USBD_StdEPReq+0x40>
 800865e:	2b20      	cmp	r3, #32
 8008660:	f040 8141 	bne.w	80088e6 <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800866a:	689b      	ldr	r3, [r3, #8]
 800866c:	6839      	ldr	r1, [r7, #0]
 800866e:	6878      	ldr	r0, [r7, #4]
 8008670:	4798      	blx	r3
      break;
 8008672:	e13d      	b.n	80088f0 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8008674:	683b      	ldr	r3, [r7, #0]
 8008676:	781b      	ldrb	r3, [r3, #0]
 8008678:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800867c:	2b20      	cmp	r3, #32
 800867e:	d10a      	bne.n	8008696 <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008686:	689b      	ldr	r3, [r3, #8]
 8008688:	6839      	ldr	r1, [r7, #0]
 800868a:	6878      	ldr	r0, [r7, #4]
 800868c:	4798      	blx	r3
 800868e:	4603      	mov	r3, r0
 8008690:	73fb      	strb	r3, [r7, #15]

        return ret;
 8008692:	7bfb      	ldrb	r3, [r7, #15]
 8008694:	e12d      	b.n	80088f2 <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 8008696:	683b      	ldr	r3, [r7, #0]
 8008698:	785b      	ldrb	r3, [r3, #1]
 800869a:	2b03      	cmp	r3, #3
 800869c:	d007      	beq.n	80086ae <USBD_StdEPReq+0x7a>
 800869e:	2b03      	cmp	r3, #3
 80086a0:	f300 811b 	bgt.w	80088da <USBD_StdEPReq+0x2a6>
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	d072      	beq.n	800878e <USBD_StdEPReq+0x15a>
 80086a8:	2b01      	cmp	r3, #1
 80086aa:	d03a      	beq.n	8008722 <USBD_StdEPReq+0xee>
 80086ac:	e115      	b.n	80088da <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80086b4:	2b02      	cmp	r3, #2
 80086b6:	d002      	beq.n	80086be <USBD_StdEPReq+0x8a>
 80086b8:	2b03      	cmp	r3, #3
 80086ba:	d015      	beq.n	80086e8 <USBD_StdEPReq+0xb4>
 80086bc:	e02b      	b.n	8008716 <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80086be:	7bbb      	ldrb	r3, [r7, #14]
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	d00c      	beq.n	80086de <USBD_StdEPReq+0xaa>
 80086c4:	7bbb      	ldrb	r3, [r7, #14]
 80086c6:	2b80      	cmp	r3, #128	; 0x80
 80086c8:	d009      	beq.n	80086de <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80086ca:	7bbb      	ldrb	r3, [r7, #14]
 80086cc:	4619      	mov	r1, r3
 80086ce:	6878      	ldr	r0, [r7, #4]
 80086d0:	f001 f90c 	bl	80098ec <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80086d4:	2180      	movs	r1, #128	; 0x80
 80086d6:	6878      	ldr	r0, [r7, #4]
 80086d8:	f001 f908 	bl	80098ec <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80086dc:	e020      	b.n	8008720 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 80086de:	6839      	ldr	r1, [r7, #0]
 80086e0:	6878      	ldr	r0, [r7, #4]
 80086e2:	f000 fc1e 	bl	8008f22 <USBD_CtlError>
              break;
 80086e6:	e01b      	b.n	8008720 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80086e8:	683b      	ldr	r3, [r7, #0]
 80086ea:	885b      	ldrh	r3, [r3, #2]
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	d10e      	bne.n	800870e <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 80086f0:	7bbb      	ldrb	r3, [r7, #14]
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d00b      	beq.n	800870e <USBD_StdEPReq+0xda>
 80086f6:	7bbb      	ldrb	r3, [r7, #14]
 80086f8:	2b80      	cmp	r3, #128	; 0x80
 80086fa:	d008      	beq.n	800870e <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80086fc:	683b      	ldr	r3, [r7, #0]
 80086fe:	88db      	ldrh	r3, [r3, #6]
 8008700:	2b00      	cmp	r3, #0
 8008702:	d104      	bne.n	800870e <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8008704:	7bbb      	ldrb	r3, [r7, #14]
 8008706:	4619      	mov	r1, r3
 8008708:	6878      	ldr	r0, [r7, #4]
 800870a:	f001 f8ef 	bl	80098ec <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800870e:	6878      	ldr	r0, [r7, #4]
 8008710:	f000 fccf 	bl	80090b2 <USBD_CtlSendStatus>

              break;
 8008714:	e004      	b.n	8008720 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 8008716:	6839      	ldr	r1, [r7, #0]
 8008718:	6878      	ldr	r0, [r7, #4]
 800871a:	f000 fc02 	bl	8008f22 <USBD_CtlError>
              break;
 800871e:	bf00      	nop
          }
          break;
 8008720:	e0e0      	b.n	80088e4 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008728:	2b02      	cmp	r3, #2
 800872a:	d002      	beq.n	8008732 <USBD_StdEPReq+0xfe>
 800872c:	2b03      	cmp	r3, #3
 800872e:	d015      	beq.n	800875c <USBD_StdEPReq+0x128>
 8008730:	e026      	b.n	8008780 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008732:	7bbb      	ldrb	r3, [r7, #14]
 8008734:	2b00      	cmp	r3, #0
 8008736:	d00c      	beq.n	8008752 <USBD_StdEPReq+0x11e>
 8008738:	7bbb      	ldrb	r3, [r7, #14]
 800873a:	2b80      	cmp	r3, #128	; 0x80
 800873c:	d009      	beq.n	8008752 <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800873e:	7bbb      	ldrb	r3, [r7, #14]
 8008740:	4619      	mov	r1, r3
 8008742:	6878      	ldr	r0, [r7, #4]
 8008744:	f001 f8d2 	bl	80098ec <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8008748:	2180      	movs	r1, #128	; 0x80
 800874a:	6878      	ldr	r0, [r7, #4]
 800874c:	f001 f8ce 	bl	80098ec <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008750:	e01c      	b.n	800878c <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 8008752:	6839      	ldr	r1, [r7, #0]
 8008754:	6878      	ldr	r0, [r7, #4]
 8008756:	f000 fbe4 	bl	8008f22 <USBD_CtlError>
              break;
 800875a:	e017      	b.n	800878c <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800875c:	683b      	ldr	r3, [r7, #0]
 800875e:	885b      	ldrh	r3, [r3, #2]
 8008760:	2b00      	cmp	r3, #0
 8008762:	d112      	bne.n	800878a <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8008764:	7bbb      	ldrb	r3, [r7, #14]
 8008766:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800876a:	2b00      	cmp	r3, #0
 800876c:	d004      	beq.n	8008778 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800876e:	7bbb      	ldrb	r3, [r7, #14]
 8008770:	4619      	mov	r1, r3
 8008772:	6878      	ldr	r0, [r7, #4]
 8008774:	f001 f8d9 	bl	800992a <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8008778:	6878      	ldr	r0, [r7, #4]
 800877a:	f000 fc9a 	bl	80090b2 <USBD_CtlSendStatus>
              }
              break;
 800877e:	e004      	b.n	800878a <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8008780:	6839      	ldr	r1, [r7, #0]
 8008782:	6878      	ldr	r0, [r7, #4]
 8008784:	f000 fbcd 	bl	8008f22 <USBD_CtlError>
              break;
 8008788:	e000      	b.n	800878c <USBD_StdEPReq+0x158>
              break;
 800878a:	bf00      	nop
          }
          break;
 800878c:	e0aa      	b.n	80088e4 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008794:	2b02      	cmp	r3, #2
 8008796:	d002      	beq.n	800879e <USBD_StdEPReq+0x16a>
 8008798:	2b03      	cmp	r3, #3
 800879a:	d032      	beq.n	8008802 <USBD_StdEPReq+0x1ce>
 800879c:	e097      	b.n	80088ce <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800879e:	7bbb      	ldrb	r3, [r7, #14]
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	d007      	beq.n	80087b4 <USBD_StdEPReq+0x180>
 80087a4:	7bbb      	ldrb	r3, [r7, #14]
 80087a6:	2b80      	cmp	r3, #128	; 0x80
 80087a8:	d004      	beq.n	80087b4 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 80087aa:	6839      	ldr	r1, [r7, #0]
 80087ac:	6878      	ldr	r0, [r7, #4]
 80087ae:	f000 fbb8 	bl	8008f22 <USBD_CtlError>
                break;
 80087b2:	e091      	b.n	80088d8 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80087b4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	da0b      	bge.n	80087d4 <USBD_StdEPReq+0x1a0>
 80087bc:	7bbb      	ldrb	r3, [r7, #14]
 80087be:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80087c2:	4613      	mov	r3, r2
 80087c4:	009b      	lsls	r3, r3, #2
 80087c6:	4413      	add	r3, r2
 80087c8:	009b      	lsls	r3, r3, #2
 80087ca:	3310      	adds	r3, #16
 80087cc:	687a      	ldr	r2, [r7, #4]
 80087ce:	4413      	add	r3, r2
 80087d0:	3304      	adds	r3, #4
 80087d2:	e00b      	b.n	80087ec <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80087d4:	7bbb      	ldrb	r3, [r7, #14]
 80087d6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80087da:	4613      	mov	r3, r2
 80087dc:	009b      	lsls	r3, r3, #2
 80087de:	4413      	add	r3, r2
 80087e0:	009b      	lsls	r3, r3, #2
 80087e2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80087e6:	687a      	ldr	r2, [r7, #4]
 80087e8:	4413      	add	r3, r2
 80087ea:	3304      	adds	r3, #4
 80087ec:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80087ee:	68bb      	ldr	r3, [r7, #8]
 80087f0:	2200      	movs	r2, #0
 80087f2:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80087f4:	68bb      	ldr	r3, [r7, #8]
 80087f6:	2202      	movs	r2, #2
 80087f8:	4619      	mov	r1, r3
 80087fa:	6878      	ldr	r0, [r7, #4]
 80087fc:	f000 fbfb 	bl	8008ff6 <USBD_CtlSendData>
              break;
 8008800:	e06a      	b.n	80088d8 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8008802:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008806:	2b00      	cmp	r3, #0
 8008808:	da11      	bge.n	800882e <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800880a:	7bbb      	ldrb	r3, [r7, #14]
 800880c:	f003 020f 	and.w	r2, r3, #15
 8008810:	6879      	ldr	r1, [r7, #4]
 8008812:	4613      	mov	r3, r2
 8008814:	009b      	lsls	r3, r3, #2
 8008816:	4413      	add	r3, r2
 8008818:	009b      	lsls	r3, r3, #2
 800881a:	440b      	add	r3, r1
 800881c:	3318      	adds	r3, #24
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	2b00      	cmp	r3, #0
 8008822:	d117      	bne.n	8008854 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8008824:	6839      	ldr	r1, [r7, #0]
 8008826:	6878      	ldr	r0, [r7, #4]
 8008828:	f000 fb7b 	bl	8008f22 <USBD_CtlError>
                  break;
 800882c:	e054      	b.n	80088d8 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800882e:	7bbb      	ldrb	r3, [r7, #14]
 8008830:	f003 020f 	and.w	r2, r3, #15
 8008834:	6879      	ldr	r1, [r7, #4]
 8008836:	4613      	mov	r3, r2
 8008838:	009b      	lsls	r3, r3, #2
 800883a:	4413      	add	r3, r2
 800883c:	009b      	lsls	r3, r3, #2
 800883e:	440b      	add	r3, r1
 8008840:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	2b00      	cmp	r3, #0
 8008848:	d104      	bne.n	8008854 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800884a:	6839      	ldr	r1, [r7, #0]
 800884c:	6878      	ldr	r0, [r7, #4]
 800884e:	f000 fb68 	bl	8008f22 <USBD_CtlError>
                  break;
 8008852:	e041      	b.n	80088d8 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008854:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008858:	2b00      	cmp	r3, #0
 800885a:	da0b      	bge.n	8008874 <USBD_StdEPReq+0x240>
 800885c:	7bbb      	ldrb	r3, [r7, #14]
 800885e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008862:	4613      	mov	r3, r2
 8008864:	009b      	lsls	r3, r3, #2
 8008866:	4413      	add	r3, r2
 8008868:	009b      	lsls	r3, r3, #2
 800886a:	3310      	adds	r3, #16
 800886c:	687a      	ldr	r2, [r7, #4]
 800886e:	4413      	add	r3, r2
 8008870:	3304      	adds	r3, #4
 8008872:	e00b      	b.n	800888c <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008874:	7bbb      	ldrb	r3, [r7, #14]
 8008876:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800887a:	4613      	mov	r3, r2
 800887c:	009b      	lsls	r3, r3, #2
 800887e:	4413      	add	r3, r2
 8008880:	009b      	lsls	r3, r3, #2
 8008882:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008886:	687a      	ldr	r2, [r7, #4]
 8008888:	4413      	add	r3, r2
 800888a:	3304      	adds	r3, #4
 800888c:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800888e:	7bbb      	ldrb	r3, [r7, #14]
 8008890:	2b00      	cmp	r3, #0
 8008892:	d002      	beq.n	800889a <USBD_StdEPReq+0x266>
 8008894:	7bbb      	ldrb	r3, [r7, #14]
 8008896:	2b80      	cmp	r3, #128	; 0x80
 8008898:	d103      	bne.n	80088a2 <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 800889a:	68bb      	ldr	r3, [r7, #8]
 800889c:	2200      	movs	r2, #0
 800889e:	601a      	str	r2, [r3, #0]
 80088a0:	e00e      	b.n	80088c0 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 80088a2:	7bbb      	ldrb	r3, [r7, #14]
 80088a4:	4619      	mov	r1, r3
 80088a6:	6878      	ldr	r0, [r7, #4]
 80088a8:	f001 f85e 	bl	8009968 <USBD_LL_IsStallEP>
 80088ac:	4603      	mov	r3, r0
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	d003      	beq.n	80088ba <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 80088b2:	68bb      	ldr	r3, [r7, #8]
 80088b4:	2201      	movs	r2, #1
 80088b6:	601a      	str	r2, [r3, #0]
 80088b8:	e002      	b.n	80088c0 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 80088ba:	68bb      	ldr	r3, [r7, #8]
 80088bc:	2200      	movs	r2, #0
 80088be:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80088c0:	68bb      	ldr	r3, [r7, #8]
 80088c2:	2202      	movs	r2, #2
 80088c4:	4619      	mov	r1, r3
 80088c6:	6878      	ldr	r0, [r7, #4]
 80088c8:	f000 fb95 	bl	8008ff6 <USBD_CtlSendData>
              break;
 80088cc:	e004      	b.n	80088d8 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 80088ce:	6839      	ldr	r1, [r7, #0]
 80088d0:	6878      	ldr	r0, [r7, #4]
 80088d2:	f000 fb26 	bl	8008f22 <USBD_CtlError>
              break;
 80088d6:	bf00      	nop
          }
          break;
 80088d8:	e004      	b.n	80088e4 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 80088da:	6839      	ldr	r1, [r7, #0]
 80088dc:	6878      	ldr	r0, [r7, #4]
 80088de:	f000 fb20 	bl	8008f22 <USBD_CtlError>
          break;
 80088e2:	bf00      	nop
      }
      break;
 80088e4:	e004      	b.n	80088f0 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 80088e6:	6839      	ldr	r1, [r7, #0]
 80088e8:	6878      	ldr	r0, [r7, #4]
 80088ea:	f000 fb1a 	bl	8008f22 <USBD_CtlError>
      break;
 80088ee:	bf00      	nop
  }

  return ret;
 80088f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80088f2:	4618      	mov	r0, r3
 80088f4:	3710      	adds	r7, #16
 80088f6:	46bd      	mov	sp, r7
 80088f8:	bd80      	pop	{r7, pc}
	...

080088fc <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80088fc:	b580      	push	{r7, lr}
 80088fe:	b084      	sub	sp, #16
 8008900:	af00      	add	r7, sp, #0
 8008902:	6078      	str	r0, [r7, #4]
 8008904:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008906:	2300      	movs	r3, #0
 8008908:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800890a:	2300      	movs	r3, #0
 800890c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800890e:	2300      	movs	r3, #0
 8008910:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8008912:	683b      	ldr	r3, [r7, #0]
 8008914:	885b      	ldrh	r3, [r3, #2]
 8008916:	0a1b      	lsrs	r3, r3, #8
 8008918:	b29b      	uxth	r3, r3
 800891a:	3b01      	subs	r3, #1
 800891c:	2b06      	cmp	r3, #6
 800891e:	f200 8128 	bhi.w	8008b72 <USBD_GetDescriptor+0x276>
 8008922:	a201      	add	r2, pc, #4	; (adr r2, 8008928 <USBD_GetDescriptor+0x2c>)
 8008924:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008928:	08008945 	.word	0x08008945
 800892c:	0800895d 	.word	0x0800895d
 8008930:	0800899d 	.word	0x0800899d
 8008934:	08008b73 	.word	0x08008b73
 8008938:	08008b73 	.word	0x08008b73
 800893c:	08008b13 	.word	0x08008b13
 8008940:	08008b3f 	.word	0x08008b3f
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	687a      	ldr	r2, [r7, #4]
 800894e:	7c12      	ldrb	r2, [r2, #16]
 8008950:	f107 0108 	add.w	r1, r7, #8
 8008954:	4610      	mov	r0, r2
 8008956:	4798      	blx	r3
 8008958:	60f8      	str	r0, [r7, #12]
      break;
 800895a:	e112      	b.n	8008b82 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	7c1b      	ldrb	r3, [r3, #16]
 8008960:	2b00      	cmp	r3, #0
 8008962:	d10d      	bne.n	8008980 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800896a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800896c:	f107 0208 	add.w	r2, r7, #8
 8008970:	4610      	mov	r0, r2
 8008972:	4798      	blx	r3
 8008974:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008976:	68fb      	ldr	r3, [r7, #12]
 8008978:	3301      	adds	r3, #1
 800897a:	2202      	movs	r2, #2
 800897c:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800897e:	e100      	b.n	8008b82 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008986:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008988:	f107 0208 	add.w	r2, r7, #8
 800898c:	4610      	mov	r0, r2
 800898e:	4798      	blx	r3
 8008990:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008992:	68fb      	ldr	r3, [r7, #12]
 8008994:	3301      	adds	r3, #1
 8008996:	2202      	movs	r2, #2
 8008998:	701a      	strb	r2, [r3, #0]
      break;
 800899a:	e0f2      	b.n	8008b82 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800899c:	683b      	ldr	r3, [r7, #0]
 800899e:	885b      	ldrh	r3, [r3, #2]
 80089a0:	b2db      	uxtb	r3, r3
 80089a2:	2b05      	cmp	r3, #5
 80089a4:	f200 80ac 	bhi.w	8008b00 <USBD_GetDescriptor+0x204>
 80089a8:	a201      	add	r2, pc, #4	; (adr r2, 80089b0 <USBD_GetDescriptor+0xb4>)
 80089aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089ae:	bf00      	nop
 80089b0:	080089c9 	.word	0x080089c9
 80089b4:	080089fd 	.word	0x080089fd
 80089b8:	08008a31 	.word	0x08008a31
 80089bc:	08008a65 	.word	0x08008a65
 80089c0:	08008a99 	.word	0x08008a99
 80089c4:	08008acd 	.word	0x08008acd
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80089ce:	685b      	ldr	r3, [r3, #4]
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	d00b      	beq.n	80089ec <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80089da:	685b      	ldr	r3, [r3, #4]
 80089dc:	687a      	ldr	r2, [r7, #4]
 80089de:	7c12      	ldrb	r2, [r2, #16]
 80089e0:	f107 0108 	add.w	r1, r7, #8
 80089e4:	4610      	mov	r0, r2
 80089e6:	4798      	blx	r3
 80089e8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80089ea:	e091      	b.n	8008b10 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80089ec:	6839      	ldr	r1, [r7, #0]
 80089ee:	6878      	ldr	r0, [r7, #4]
 80089f0:	f000 fa97 	bl	8008f22 <USBD_CtlError>
            err++;
 80089f4:	7afb      	ldrb	r3, [r7, #11]
 80089f6:	3301      	adds	r3, #1
 80089f8:	72fb      	strb	r3, [r7, #11]
          break;
 80089fa:	e089      	b.n	8008b10 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008a02:	689b      	ldr	r3, [r3, #8]
 8008a04:	2b00      	cmp	r3, #0
 8008a06:	d00b      	beq.n	8008a20 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008a0e:	689b      	ldr	r3, [r3, #8]
 8008a10:	687a      	ldr	r2, [r7, #4]
 8008a12:	7c12      	ldrb	r2, [r2, #16]
 8008a14:	f107 0108 	add.w	r1, r7, #8
 8008a18:	4610      	mov	r0, r2
 8008a1a:	4798      	blx	r3
 8008a1c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008a1e:	e077      	b.n	8008b10 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008a20:	6839      	ldr	r1, [r7, #0]
 8008a22:	6878      	ldr	r0, [r7, #4]
 8008a24:	f000 fa7d 	bl	8008f22 <USBD_CtlError>
            err++;
 8008a28:	7afb      	ldrb	r3, [r7, #11]
 8008a2a:	3301      	adds	r3, #1
 8008a2c:	72fb      	strb	r3, [r7, #11]
          break;
 8008a2e:	e06f      	b.n	8008b10 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008a36:	68db      	ldr	r3, [r3, #12]
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	d00b      	beq.n	8008a54 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008a42:	68db      	ldr	r3, [r3, #12]
 8008a44:	687a      	ldr	r2, [r7, #4]
 8008a46:	7c12      	ldrb	r2, [r2, #16]
 8008a48:	f107 0108 	add.w	r1, r7, #8
 8008a4c:	4610      	mov	r0, r2
 8008a4e:	4798      	blx	r3
 8008a50:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008a52:	e05d      	b.n	8008b10 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008a54:	6839      	ldr	r1, [r7, #0]
 8008a56:	6878      	ldr	r0, [r7, #4]
 8008a58:	f000 fa63 	bl	8008f22 <USBD_CtlError>
            err++;
 8008a5c:	7afb      	ldrb	r3, [r7, #11]
 8008a5e:	3301      	adds	r3, #1
 8008a60:	72fb      	strb	r3, [r7, #11]
          break;
 8008a62:	e055      	b.n	8008b10 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008a6a:	691b      	ldr	r3, [r3, #16]
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	d00b      	beq.n	8008a88 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008a76:	691b      	ldr	r3, [r3, #16]
 8008a78:	687a      	ldr	r2, [r7, #4]
 8008a7a:	7c12      	ldrb	r2, [r2, #16]
 8008a7c:	f107 0108 	add.w	r1, r7, #8
 8008a80:	4610      	mov	r0, r2
 8008a82:	4798      	blx	r3
 8008a84:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008a86:	e043      	b.n	8008b10 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008a88:	6839      	ldr	r1, [r7, #0]
 8008a8a:	6878      	ldr	r0, [r7, #4]
 8008a8c:	f000 fa49 	bl	8008f22 <USBD_CtlError>
            err++;
 8008a90:	7afb      	ldrb	r3, [r7, #11]
 8008a92:	3301      	adds	r3, #1
 8008a94:	72fb      	strb	r3, [r7, #11]
          break;
 8008a96:	e03b      	b.n	8008b10 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008a9e:	695b      	ldr	r3, [r3, #20]
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	d00b      	beq.n	8008abc <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008aaa:	695b      	ldr	r3, [r3, #20]
 8008aac:	687a      	ldr	r2, [r7, #4]
 8008aae:	7c12      	ldrb	r2, [r2, #16]
 8008ab0:	f107 0108 	add.w	r1, r7, #8
 8008ab4:	4610      	mov	r0, r2
 8008ab6:	4798      	blx	r3
 8008ab8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008aba:	e029      	b.n	8008b10 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008abc:	6839      	ldr	r1, [r7, #0]
 8008abe:	6878      	ldr	r0, [r7, #4]
 8008ac0:	f000 fa2f 	bl	8008f22 <USBD_CtlError>
            err++;
 8008ac4:	7afb      	ldrb	r3, [r7, #11]
 8008ac6:	3301      	adds	r3, #1
 8008ac8:	72fb      	strb	r3, [r7, #11]
          break;
 8008aca:	e021      	b.n	8008b10 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008ad2:	699b      	ldr	r3, [r3, #24]
 8008ad4:	2b00      	cmp	r3, #0
 8008ad6:	d00b      	beq.n	8008af0 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008ade:	699b      	ldr	r3, [r3, #24]
 8008ae0:	687a      	ldr	r2, [r7, #4]
 8008ae2:	7c12      	ldrb	r2, [r2, #16]
 8008ae4:	f107 0108 	add.w	r1, r7, #8
 8008ae8:	4610      	mov	r0, r2
 8008aea:	4798      	blx	r3
 8008aec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008aee:	e00f      	b.n	8008b10 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008af0:	6839      	ldr	r1, [r7, #0]
 8008af2:	6878      	ldr	r0, [r7, #4]
 8008af4:	f000 fa15 	bl	8008f22 <USBD_CtlError>
            err++;
 8008af8:	7afb      	ldrb	r3, [r7, #11]
 8008afa:	3301      	adds	r3, #1
 8008afc:	72fb      	strb	r3, [r7, #11]
          break;
 8008afe:	e007      	b.n	8008b10 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8008b00:	6839      	ldr	r1, [r7, #0]
 8008b02:	6878      	ldr	r0, [r7, #4]
 8008b04:	f000 fa0d 	bl	8008f22 <USBD_CtlError>
          err++;
 8008b08:	7afb      	ldrb	r3, [r7, #11]
 8008b0a:	3301      	adds	r3, #1
 8008b0c:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8008b0e:	e038      	b.n	8008b82 <USBD_GetDescriptor+0x286>
 8008b10:	e037      	b.n	8008b82 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	7c1b      	ldrb	r3, [r3, #16]
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	d109      	bne.n	8008b2e <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008b20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008b22:	f107 0208 	add.w	r2, r7, #8
 8008b26:	4610      	mov	r0, r2
 8008b28:	4798      	blx	r3
 8008b2a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008b2c:	e029      	b.n	8008b82 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008b2e:	6839      	ldr	r1, [r7, #0]
 8008b30:	6878      	ldr	r0, [r7, #4]
 8008b32:	f000 f9f6 	bl	8008f22 <USBD_CtlError>
        err++;
 8008b36:	7afb      	ldrb	r3, [r7, #11]
 8008b38:	3301      	adds	r3, #1
 8008b3a:	72fb      	strb	r3, [r7, #11]
      break;
 8008b3c:	e021      	b.n	8008b82 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	7c1b      	ldrb	r3, [r3, #16]
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	d10d      	bne.n	8008b62 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b4e:	f107 0208 	add.w	r2, r7, #8
 8008b52:	4610      	mov	r0, r2
 8008b54:	4798      	blx	r3
 8008b56:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	3301      	adds	r3, #1
 8008b5c:	2207      	movs	r2, #7
 8008b5e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008b60:	e00f      	b.n	8008b82 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008b62:	6839      	ldr	r1, [r7, #0]
 8008b64:	6878      	ldr	r0, [r7, #4]
 8008b66:	f000 f9dc 	bl	8008f22 <USBD_CtlError>
        err++;
 8008b6a:	7afb      	ldrb	r3, [r7, #11]
 8008b6c:	3301      	adds	r3, #1
 8008b6e:	72fb      	strb	r3, [r7, #11]
      break;
 8008b70:	e007      	b.n	8008b82 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8008b72:	6839      	ldr	r1, [r7, #0]
 8008b74:	6878      	ldr	r0, [r7, #4]
 8008b76:	f000 f9d4 	bl	8008f22 <USBD_CtlError>
      err++;
 8008b7a:	7afb      	ldrb	r3, [r7, #11]
 8008b7c:	3301      	adds	r3, #1
 8008b7e:	72fb      	strb	r3, [r7, #11]
      break;
 8008b80:	bf00      	nop
  }

  if (err != 0U)
 8008b82:	7afb      	ldrb	r3, [r7, #11]
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	d11c      	bne.n	8008bc2 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8008b88:	893b      	ldrh	r3, [r7, #8]
 8008b8a:	2b00      	cmp	r3, #0
 8008b8c:	d011      	beq.n	8008bb2 <USBD_GetDescriptor+0x2b6>
 8008b8e:	683b      	ldr	r3, [r7, #0]
 8008b90:	88db      	ldrh	r3, [r3, #6]
 8008b92:	2b00      	cmp	r3, #0
 8008b94:	d00d      	beq.n	8008bb2 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8008b96:	683b      	ldr	r3, [r7, #0]
 8008b98:	88da      	ldrh	r2, [r3, #6]
 8008b9a:	893b      	ldrh	r3, [r7, #8]
 8008b9c:	4293      	cmp	r3, r2
 8008b9e:	bf28      	it	cs
 8008ba0:	4613      	movcs	r3, r2
 8008ba2:	b29b      	uxth	r3, r3
 8008ba4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8008ba6:	893b      	ldrh	r3, [r7, #8]
 8008ba8:	461a      	mov	r2, r3
 8008baa:	68f9      	ldr	r1, [r7, #12]
 8008bac:	6878      	ldr	r0, [r7, #4]
 8008bae:	f000 fa22 	bl	8008ff6 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8008bb2:	683b      	ldr	r3, [r7, #0]
 8008bb4:	88db      	ldrh	r3, [r3, #6]
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	d104      	bne.n	8008bc4 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8008bba:	6878      	ldr	r0, [r7, #4]
 8008bbc:	f000 fa79 	bl	80090b2 <USBD_CtlSendStatus>
 8008bc0:	e000      	b.n	8008bc4 <USBD_GetDescriptor+0x2c8>
    return;
 8008bc2:	bf00      	nop
    }
  }
}
 8008bc4:	3710      	adds	r7, #16
 8008bc6:	46bd      	mov	sp, r7
 8008bc8:	bd80      	pop	{r7, pc}
 8008bca:	bf00      	nop

08008bcc <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008bcc:	b580      	push	{r7, lr}
 8008bce:	b084      	sub	sp, #16
 8008bd0:	af00      	add	r7, sp, #0
 8008bd2:	6078      	str	r0, [r7, #4]
 8008bd4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008bd6:	683b      	ldr	r3, [r7, #0]
 8008bd8:	889b      	ldrh	r3, [r3, #4]
 8008bda:	2b00      	cmp	r3, #0
 8008bdc:	d130      	bne.n	8008c40 <USBD_SetAddress+0x74>
 8008bde:	683b      	ldr	r3, [r7, #0]
 8008be0:	88db      	ldrh	r3, [r3, #6]
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	d12c      	bne.n	8008c40 <USBD_SetAddress+0x74>
 8008be6:	683b      	ldr	r3, [r7, #0]
 8008be8:	885b      	ldrh	r3, [r3, #2]
 8008bea:	2b7f      	cmp	r3, #127	; 0x7f
 8008bec:	d828      	bhi.n	8008c40 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008bee:	683b      	ldr	r3, [r7, #0]
 8008bf0:	885b      	ldrh	r3, [r3, #2]
 8008bf2:	b2db      	uxtb	r3, r3
 8008bf4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008bf8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008c00:	2b03      	cmp	r3, #3
 8008c02:	d104      	bne.n	8008c0e <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8008c04:	6839      	ldr	r1, [r7, #0]
 8008c06:	6878      	ldr	r0, [r7, #4]
 8008c08:	f000 f98b 	bl	8008f22 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008c0c:	e01d      	b.n	8008c4a <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	7bfa      	ldrb	r2, [r7, #15]
 8008c12:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008c16:	7bfb      	ldrb	r3, [r7, #15]
 8008c18:	4619      	mov	r1, r3
 8008c1a:	6878      	ldr	r0, [r7, #4]
 8008c1c:	f000 fecf 	bl	80099be <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8008c20:	6878      	ldr	r0, [r7, #4]
 8008c22:	f000 fa46 	bl	80090b2 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008c26:	7bfb      	ldrb	r3, [r7, #15]
 8008c28:	2b00      	cmp	r3, #0
 8008c2a:	d004      	beq.n	8008c36 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	2202      	movs	r2, #2
 8008c30:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008c34:	e009      	b.n	8008c4a <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	2201      	movs	r2, #1
 8008c3a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008c3e:	e004      	b.n	8008c4a <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008c40:	6839      	ldr	r1, [r7, #0]
 8008c42:	6878      	ldr	r0, [r7, #4]
 8008c44:	f000 f96d 	bl	8008f22 <USBD_CtlError>
  }
}
 8008c48:	bf00      	nop
 8008c4a:	bf00      	nop
 8008c4c:	3710      	adds	r7, #16
 8008c4e:	46bd      	mov	sp, r7
 8008c50:	bd80      	pop	{r7, pc}
	...

08008c54 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008c54:	b580      	push	{r7, lr}
 8008c56:	b082      	sub	sp, #8
 8008c58:	af00      	add	r7, sp, #0
 8008c5a:	6078      	str	r0, [r7, #4]
 8008c5c:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008c5e:	683b      	ldr	r3, [r7, #0]
 8008c60:	885b      	ldrh	r3, [r3, #2]
 8008c62:	b2da      	uxtb	r2, r3
 8008c64:	4b41      	ldr	r3, [pc, #260]	; (8008d6c <USBD_SetConfig+0x118>)
 8008c66:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008c68:	4b40      	ldr	r3, [pc, #256]	; (8008d6c <USBD_SetConfig+0x118>)
 8008c6a:	781b      	ldrb	r3, [r3, #0]
 8008c6c:	2b01      	cmp	r3, #1
 8008c6e:	d904      	bls.n	8008c7a <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8008c70:	6839      	ldr	r1, [r7, #0]
 8008c72:	6878      	ldr	r0, [r7, #4]
 8008c74:	f000 f955 	bl	8008f22 <USBD_CtlError>
 8008c78:	e075      	b.n	8008d66 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008c80:	2b02      	cmp	r3, #2
 8008c82:	d002      	beq.n	8008c8a <USBD_SetConfig+0x36>
 8008c84:	2b03      	cmp	r3, #3
 8008c86:	d023      	beq.n	8008cd0 <USBD_SetConfig+0x7c>
 8008c88:	e062      	b.n	8008d50 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8008c8a:	4b38      	ldr	r3, [pc, #224]	; (8008d6c <USBD_SetConfig+0x118>)
 8008c8c:	781b      	ldrb	r3, [r3, #0]
 8008c8e:	2b00      	cmp	r3, #0
 8008c90:	d01a      	beq.n	8008cc8 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8008c92:	4b36      	ldr	r3, [pc, #216]	; (8008d6c <USBD_SetConfig+0x118>)
 8008c94:	781b      	ldrb	r3, [r3, #0]
 8008c96:	461a      	mov	r2, r3
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	2203      	movs	r2, #3
 8008ca0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8008ca4:	4b31      	ldr	r3, [pc, #196]	; (8008d6c <USBD_SetConfig+0x118>)
 8008ca6:	781b      	ldrb	r3, [r3, #0]
 8008ca8:	4619      	mov	r1, r3
 8008caa:	6878      	ldr	r0, [r7, #4]
 8008cac:	f7ff f9af 	bl	800800e <USBD_SetClassConfig>
 8008cb0:	4603      	mov	r3, r0
 8008cb2:	2b02      	cmp	r3, #2
 8008cb4:	d104      	bne.n	8008cc0 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8008cb6:	6839      	ldr	r1, [r7, #0]
 8008cb8:	6878      	ldr	r0, [r7, #4]
 8008cba:	f000 f932 	bl	8008f22 <USBD_CtlError>
            return;
 8008cbe:	e052      	b.n	8008d66 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8008cc0:	6878      	ldr	r0, [r7, #4]
 8008cc2:	f000 f9f6 	bl	80090b2 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8008cc6:	e04e      	b.n	8008d66 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8008cc8:	6878      	ldr	r0, [r7, #4]
 8008cca:	f000 f9f2 	bl	80090b2 <USBD_CtlSendStatus>
        break;
 8008cce:	e04a      	b.n	8008d66 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8008cd0:	4b26      	ldr	r3, [pc, #152]	; (8008d6c <USBD_SetConfig+0x118>)
 8008cd2:	781b      	ldrb	r3, [r3, #0]
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	d112      	bne.n	8008cfe <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	2202      	movs	r2, #2
 8008cdc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8008ce0:	4b22      	ldr	r3, [pc, #136]	; (8008d6c <USBD_SetConfig+0x118>)
 8008ce2:	781b      	ldrb	r3, [r3, #0]
 8008ce4:	461a      	mov	r2, r3
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8008cea:	4b20      	ldr	r3, [pc, #128]	; (8008d6c <USBD_SetConfig+0x118>)
 8008cec:	781b      	ldrb	r3, [r3, #0]
 8008cee:	4619      	mov	r1, r3
 8008cf0:	6878      	ldr	r0, [r7, #4]
 8008cf2:	f7ff f9ab 	bl	800804c <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8008cf6:	6878      	ldr	r0, [r7, #4]
 8008cf8:	f000 f9db 	bl	80090b2 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8008cfc:	e033      	b.n	8008d66 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8008cfe:	4b1b      	ldr	r3, [pc, #108]	; (8008d6c <USBD_SetConfig+0x118>)
 8008d00:	781b      	ldrb	r3, [r3, #0]
 8008d02:	461a      	mov	r2, r3
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	685b      	ldr	r3, [r3, #4]
 8008d08:	429a      	cmp	r2, r3
 8008d0a:	d01d      	beq.n	8008d48 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	685b      	ldr	r3, [r3, #4]
 8008d10:	b2db      	uxtb	r3, r3
 8008d12:	4619      	mov	r1, r3
 8008d14:	6878      	ldr	r0, [r7, #4]
 8008d16:	f7ff f999 	bl	800804c <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8008d1a:	4b14      	ldr	r3, [pc, #80]	; (8008d6c <USBD_SetConfig+0x118>)
 8008d1c:	781b      	ldrb	r3, [r3, #0]
 8008d1e:	461a      	mov	r2, r3
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8008d24:	4b11      	ldr	r3, [pc, #68]	; (8008d6c <USBD_SetConfig+0x118>)
 8008d26:	781b      	ldrb	r3, [r3, #0]
 8008d28:	4619      	mov	r1, r3
 8008d2a:	6878      	ldr	r0, [r7, #4]
 8008d2c:	f7ff f96f 	bl	800800e <USBD_SetClassConfig>
 8008d30:	4603      	mov	r3, r0
 8008d32:	2b02      	cmp	r3, #2
 8008d34:	d104      	bne.n	8008d40 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8008d36:	6839      	ldr	r1, [r7, #0]
 8008d38:	6878      	ldr	r0, [r7, #4]
 8008d3a:	f000 f8f2 	bl	8008f22 <USBD_CtlError>
            return;
 8008d3e:	e012      	b.n	8008d66 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8008d40:	6878      	ldr	r0, [r7, #4]
 8008d42:	f000 f9b6 	bl	80090b2 <USBD_CtlSendStatus>
        break;
 8008d46:	e00e      	b.n	8008d66 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8008d48:	6878      	ldr	r0, [r7, #4]
 8008d4a:	f000 f9b2 	bl	80090b2 <USBD_CtlSendStatus>
        break;
 8008d4e:	e00a      	b.n	8008d66 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8008d50:	6839      	ldr	r1, [r7, #0]
 8008d52:	6878      	ldr	r0, [r7, #4]
 8008d54:	f000 f8e5 	bl	8008f22 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8008d58:	4b04      	ldr	r3, [pc, #16]	; (8008d6c <USBD_SetConfig+0x118>)
 8008d5a:	781b      	ldrb	r3, [r3, #0]
 8008d5c:	4619      	mov	r1, r3
 8008d5e:	6878      	ldr	r0, [r7, #4]
 8008d60:	f7ff f974 	bl	800804c <USBD_ClrClassConfig>
        break;
 8008d64:	bf00      	nop
    }
  }
}
 8008d66:	3708      	adds	r7, #8
 8008d68:	46bd      	mov	sp, r7
 8008d6a:	bd80      	pop	{r7, pc}
 8008d6c:	20000508 	.word	0x20000508

08008d70 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008d70:	b580      	push	{r7, lr}
 8008d72:	b082      	sub	sp, #8
 8008d74:	af00      	add	r7, sp, #0
 8008d76:	6078      	str	r0, [r7, #4]
 8008d78:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008d7a:	683b      	ldr	r3, [r7, #0]
 8008d7c:	88db      	ldrh	r3, [r3, #6]
 8008d7e:	2b01      	cmp	r3, #1
 8008d80:	d004      	beq.n	8008d8c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8008d82:	6839      	ldr	r1, [r7, #0]
 8008d84:	6878      	ldr	r0, [r7, #4]
 8008d86:	f000 f8cc 	bl	8008f22 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8008d8a:	e022      	b.n	8008dd2 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008d92:	2b02      	cmp	r3, #2
 8008d94:	dc02      	bgt.n	8008d9c <USBD_GetConfig+0x2c>
 8008d96:	2b00      	cmp	r3, #0
 8008d98:	dc03      	bgt.n	8008da2 <USBD_GetConfig+0x32>
 8008d9a:	e015      	b.n	8008dc8 <USBD_GetConfig+0x58>
 8008d9c:	2b03      	cmp	r3, #3
 8008d9e:	d00b      	beq.n	8008db8 <USBD_GetConfig+0x48>
 8008da0:	e012      	b.n	8008dc8 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	2200      	movs	r2, #0
 8008da6:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	3308      	adds	r3, #8
 8008dac:	2201      	movs	r2, #1
 8008dae:	4619      	mov	r1, r3
 8008db0:	6878      	ldr	r0, [r7, #4]
 8008db2:	f000 f920 	bl	8008ff6 <USBD_CtlSendData>
        break;
 8008db6:	e00c      	b.n	8008dd2 <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	3304      	adds	r3, #4
 8008dbc:	2201      	movs	r2, #1
 8008dbe:	4619      	mov	r1, r3
 8008dc0:	6878      	ldr	r0, [r7, #4]
 8008dc2:	f000 f918 	bl	8008ff6 <USBD_CtlSendData>
        break;
 8008dc6:	e004      	b.n	8008dd2 <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 8008dc8:	6839      	ldr	r1, [r7, #0]
 8008dca:	6878      	ldr	r0, [r7, #4]
 8008dcc:	f000 f8a9 	bl	8008f22 <USBD_CtlError>
        break;
 8008dd0:	bf00      	nop
}
 8008dd2:	bf00      	nop
 8008dd4:	3708      	adds	r7, #8
 8008dd6:	46bd      	mov	sp, r7
 8008dd8:	bd80      	pop	{r7, pc}

08008dda <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008dda:	b580      	push	{r7, lr}
 8008ddc:	b082      	sub	sp, #8
 8008dde:	af00      	add	r7, sp, #0
 8008de0:	6078      	str	r0, [r7, #4]
 8008de2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008dea:	3b01      	subs	r3, #1
 8008dec:	2b02      	cmp	r3, #2
 8008dee:	d81e      	bhi.n	8008e2e <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008df0:	683b      	ldr	r3, [r7, #0]
 8008df2:	88db      	ldrh	r3, [r3, #6]
 8008df4:	2b02      	cmp	r3, #2
 8008df6:	d004      	beq.n	8008e02 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8008df8:	6839      	ldr	r1, [r7, #0]
 8008dfa:	6878      	ldr	r0, [r7, #4]
 8008dfc:	f000 f891 	bl	8008f22 <USBD_CtlError>
        break;
 8008e00:	e01a      	b.n	8008e38 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	2201      	movs	r2, #1
 8008e06:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	d005      	beq.n	8008e1e <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	68db      	ldr	r3, [r3, #12]
 8008e16:	f043 0202 	orr.w	r2, r3, #2
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	330c      	adds	r3, #12
 8008e22:	2202      	movs	r2, #2
 8008e24:	4619      	mov	r1, r3
 8008e26:	6878      	ldr	r0, [r7, #4]
 8008e28:	f000 f8e5 	bl	8008ff6 <USBD_CtlSendData>
      break;
 8008e2c:	e004      	b.n	8008e38 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8008e2e:	6839      	ldr	r1, [r7, #0]
 8008e30:	6878      	ldr	r0, [r7, #4]
 8008e32:	f000 f876 	bl	8008f22 <USBD_CtlError>
      break;
 8008e36:	bf00      	nop
  }
}
 8008e38:	bf00      	nop
 8008e3a:	3708      	adds	r7, #8
 8008e3c:	46bd      	mov	sp, r7
 8008e3e:	bd80      	pop	{r7, pc}

08008e40 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008e40:	b580      	push	{r7, lr}
 8008e42:	b082      	sub	sp, #8
 8008e44:	af00      	add	r7, sp, #0
 8008e46:	6078      	str	r0, [r7, #4]
 8008e48:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008e4a:	683b      	ldr	r3, [r7, #0]
 8008e4c:	885b      	ldrh	r3, [r3, #2]
 8008e4e:	2b01      	cmp	r3, #1
 8008e50:	d106      	bne.n	8008e60 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	2201      	movs	r2, #1
 8008e56:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 8008e5a:	6878      	ldr	r0, [r7, #4]
 8008e5c:	f000 f929 	bl	80090b2 <USBD_CtlSendStatus>
  }
}
 8008e60:	bf00      	nop
 8008e62:	3708      	adds	r7, #8
 8008e64:	46bd      	mov	sp, r7
 8008e66:	bd80      	pop	{r7, pc}

08008e68 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008e68:	b580      	push	{r7, lr}
 8008e6a:	b082      	sub	sp, #8
 8008e6c:	af00      	add	r7, sp, #0
 8008e6e:	6078      	str	r0, [r7, #4]
 8008e70:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008e78:	3b01      	subs	r3, #1
 8008e7a:	2b02      	cmp	r3, #2
 8008e7c:	d80b      	bhi.n	8008e96 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008e7e:	683b      	ldr	r3, [r7, #0]
 8008e80:	885b      	ldrh	r3, [r3, #2]
 8008e82:	2b01      	cmp	r3, #1
 8008e84:	d10c      	bne.n	8008ea0 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	2200      	movs	r2, #0
 8008e8a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8008e8e:	6878      	ldr	r0, [r7, #4]
 8008e90:	f000 f90f 	bl	80090b2 <USBD_CtlSendStatus>
      }
      break;
 8008e94:	e004      	b.n	8008ea0 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8008e96:	6839      	ldr	r1, [r7, #0]
 8008e98:	6878      	ldr	r0, [r7, #4]
 8008e9a:	f000 f842 	bl	8008f22 <USBD_CtlError>
      break;
 8008e9e:	e000      	b.n	8008ea2 <USBD_ClrFeature+0x3a>
      break;
 8008ea0:	bf00      	nop
  }
}
 8008ea2:	bf00      	nop
 8008ea4:	3708      	adds	r7, #8
 8008ea6:	46bd      	mov	sp, r7
 8008ea8:	bd80      	pop	{r7, pc}

08008eaa <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008eaa:	b480      	push	{r7}
 8008eac:	b083      	sub	sp, #12
 8008eae:	af00      	add	r7, sp, #0
 8008eb0:	6078      	str	r0, [r7, #4]
 8008eb2:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8008eb4:	683b      	ldr	r3, [r7, #0]
 8008eb6:	781a      	ldrb	r2, [r3, #0]
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8008ebc:	683b      	ldr	r3, [r7, #0]
 8008ebe:	785a      	ldrb	r2, [r3, #1]
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8008ec4:	683b      	ldr	r3, [r7, #0]
 8008ec6:	3302      	adds	r3, #2
 8008ec8:	781b      	ldrb	r3, [r3, #0]
 8008eca:	b29a      	uxth	r2, r3
 8008ecc:	683b      	ldr	r3, [r7, #0]
 8008ece:	3303      	adds	r3, #3
 8008ed0:	781b      	ldrb	r3, [r3, #0]
 8008ed2:	b29b      	uxth	r3, r3
 8008ed4:	021b      	lsls	r3, r3, #8
 8008ed6:	b29b      	uxth	r3, r3
 8008ed8:	4413      	add	r3, r2
 8008eda:	b29a      	uxth	r2, r3
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8008ee0:	683b      	ldr	r3, [r7, #0]
 8008ee2:	3304      	adds	r3, #4
 8008ee4:	781b      	ldrb	r3, [r3, #0]
 8008ee6:	b29a      	uxth	r2, r3
 8008ee8:	683b      	ldr	r3, [r7, #0]
 8008eea:	3305      	adds	r3, #5
 8008eec:	781b      	ldrb	r3, [r3, #0]
 8008eee:	b29b      	uxth	r3, r3
 8008ef0:	021b      	lsls	r3, r3, #8
 8008ef2:	b29b      	uxth	r3, r3
 8008ef4:	4413      	add	r3, r2
 8008ef6:	b29a      	uxth	r2, r3
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8008efc:	683b      	ldr	r3, [r7, #0]
 8008efe:	3306      	adds	r3, #6
 8008f00:	781b      	ldrb	r3, [r3, #0]
 8008f02:	b29a      	uxth	r2, r3
 8008f04:	683b      	ldr	r3, [r7, #0]
 8008f06:	3307      	adds	r3, #7
 8008f08:	781b      	ldrb	r3, [r3, #0]
 8008f0a:	b29b      	uxth	r3, r3
 8008f0c:	021b      	lsls	r3, r3, #8
 8008f0e:	b29b      	uxth	r3, r3
 8008f10:	4413      	add	r3, r2
 8008f12:	b29a      	uxth	r2, r3
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	80da      	strh	r2, [r3, #6]

}
 8008f18:	bf00      	nop
 8008f1a:	370c      	adds	r7, #12
 8008f1c:	46bd      	mov	sp, r7
 8008f1e:	bc80      	pop	{r7}
 8008f20:	4770      	bx	lr

08008f22 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8008f22:	b580      	push	{r7, lr}
 8008f24:	b082      	sub	sp, #8
 8008f26:	af00      	add	r7, sp, #0
 8008f28:	6078      	str	r0, [r7, #4]
 8008f2a:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8008f2c:	2180      	movs	r1, #128	; 0x80
 8008f2e:	6878      	ldr	r0, [r7, #4]
 8008f30:	f000 fcdc 	bl	80098ec <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8008f34:	2100      	movs	r1, #0
 8008f36:	6878      	ldr	r0, [r7, #4]
 8008f38:	f000 fcd8 	bl	80098ec <USBD_LL_StallEP>
}
 8008f3c:	bf00      	nop
 8008f3e:	3708      	adds	r7, #8
 8008f40:	46bd      	mov	sp, r7
 8008f42:	bd80      	pop	{r7, pc}

08008f44 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008f44:	b580      	push	{r7, lr}
 8008f46:	b086      	sub	sp, #24
 8008f48:	af00      	add	r7, sp, #0
 8008f4a:	60f8      	str	r0, [r7, #12]
 8008f4c:	60b9      	str	r1, [r7, #8]
 8008f4e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008f50:	2300      	movs	r3, #0
 8008f52:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8008f54:	68fb      	ldr	r3, [r7, #12]
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	d032      	beq.n	8008fc0 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8008f5a:	68f8      	ldr	r0, [r7, #12]
 8008f5c:	f000 f834 	bl	8008fc8 <USBD_GetLen>
 8008f60:	4603      	mov	r3, r0
 8008f62:	3301      	adds	r3, #1
 8008f64:	b29b      	uxth	r3, r3
 8008f66:	005b      	lsls	r3, r3, #1
 8008f68:	b29a      	uxth	r2, r3
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8008f6e:	7dfb      	ldrb	r3, [r7, #23]
 8008f70:	1c5a      	adds	r2, r3, #1
 8008f72:	75fa      	strb	r2, [r7, #23]
 8008f74:	461a      	mov	r2, r3
 8008f76:	68bb      	ldr	r3, [r7, #8]
 8008f78:	4413      	add	r3, r2
 8008f7a:	687a      	ldr	r2, [r7, #4]
 8008f7c:	7812      	ldrb	r2, [r2, #0]
 8008f7e:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8008f80:	7dfb      	ldrb	r3, [r7, #23]
 8008f82:	1c5a      	adds	r2, r3, #1
 8008f84:	75fa      	strb	r2, [r7, #23]
 8008f86:	461a      	mov	r2, r3
 8008f88:	68bb      	ldr	r3, [r7, #8]
 8008f8a:	4413      	add	r3, r2
 8008f8c:	2203      	movs	r2, #3
 8008f8e:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8008f90:	e012      	b.n	8008fb8 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8008f92:	68fb      	ldr	r3, [r7, #12]
 8008f94:	1c5a      	adds	r2, r3, #1
 8008f96:	60fa      	str	r2, [r7, #12]
 8008f98:	7dfa      	ldrb	r2, [r7, #23]
 8008f9a:	1c51      	adds	r1, r2, #1
 8008f9c:	75f9      	strb	r1, [r7, #23]
 8008f9e:	4611      	mov	r1, r2
 8008fa0:	68ba      	ldr	r2, [r7, #8]
 8008fa2:	440a      	add	r2, r1
 8008fa4:	781b      	ldrb	r3, [r3, #0]
 8008fa6:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8008fa8:	7dfb      	ldrb	r3, [r7, #23]
 8008faa:	1c5a      	adds	r2, r3, #1
 8008fac:	75fa      	strb	r2, [r7, #23]
 8008fae:	461a      	mov	r2, r3
 8008fb0:	68bb      	ldr	r3, [r7, #8]
 8008fb2:	4413      	add	r3, r2
 8008fb4:	2200      	movs	r2, #0
 8008fb6:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8008fb8:	68fb      	ldr	r3, [r7, #12]
 8008fba:	781b      	ldrb	r3, [r3, #0]
 8008fbc:	2b00      	cmp	r3, #0
 8008fbe:	d1e8      	bne.n	8008f92 <USBD_GetString+0x4e>
    }
  }
}
 8008fc0:	bf00      	nop
 8008fc2:	3718      	adds	r7, #24
 8008fc4:	46bd      	mov	sp, r7
 8008fc6:	bd80      	pop	{r7, pc}

08008fc8 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008fc8:	b480      	push	{r7}
 8008fca:	b085      	sub	sp, #20
 8008fcc:	af00      	add	r7, sp, #0
 8008fce:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008fd0:	2300      	movs	r3, #0
 8008fd2:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8008fd4:	e005      	b.n	8008fe2 <USBD_GetLen+0x1a>
  {
    len++;
 8008fd6:	7bfb      	ldrb	r3, [r7, #15]
 8008fd8:	3301      	adds	r3, #1
 8008fda:	73fb      	strb	r3, [r7, #15]
    buf++;
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	3301      	adds	r3, #1
 8008fe0:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	781b      	ldrb	r3, [r3, #0]
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	d1f5      	bne.n	8008fd6 <USBD_GetLen+0xe>
  }

  return len;
 8008fea:	7bfb      	ldrb	r3, [r7, #15]
}
 8008fec:	4618      	mov	r0, r3
 8008fee:	3714      	adds	r7, #20
 8008ff0:	46bd      	mov	sp, r7
 8008ff2:	bc80      	pop	{r7}
 8008ff4:	4770      	bx	lr

08008ff6 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8008ff6:	b580      	push	{r7, lr}
 8008ff8:	b084      	sub	sp, #16
 8008ffa:	af00      	add	r7, sp, #0
 8008ffc:	60f8      	str	r0, [r7, #12]
 8008ffe:	60b9      	str	r1, [r7, #8]
 8009000:	4613      	mov	r3, r2
 8009002:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8009004:	68fb      	ldr	r3, [r7, #12]
 8009006:	2202      	movs	r2, #2
 8009008:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800900c:	88fa      	ldrh	r2, [r7, #6]
 800900e:	68fb      	ldr	r3, [r7, #12]
 8009010:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8009012:	88fa      	ldrh	r2, [r7, #6]
 8009014:	68fb      	ldr	r3, [r7, #12]
 8009016:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009018:	88fb      	ldrh	r3, [r7, #6]
 800901a:	68ba      	ldr	r2, [r7, #8]
 800901c:	2100      	movs	r1, #0
 800901e:	68f8      	ldr	r0, [r7, #12]
 8009020:	f000 fcec 	bl	80099fc <USBD_LL_Transmit>

  return USBD_OK;
 8009024:	2300      	movs	r3, #0
}
 8009026:	4618      	mov	r0, r3
 8009028:	3710      	adds	r7, #16
 800902a:	46bd      	mov	sp, r7
 800902c:	bd80      	pop	{r7, pc}

0800902e <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800902e:	b580      	push	{r7, lr}
 8009030:	b084      	sub	sp, #16
 8009032:	af00      	add	r7, sp, #0
 8009034:	60f8      	str	r0, [r7, #12]
 8009036:	60b9      	str	r1, [r7, #8]
 8009038:	4613      	mov	r3, r2
 800903a:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800903c:	88fb      	ldrh	r3, [r7, #6]
 800903e:	68ba      	ldr	r2, [r7, #8]
 8009040:	2100      	movs	r1, #0
 8009042:	68f8      	ldr	r0, [r7, #12]
 8009044:	f000 fcda 	bl	80099fc <USBD_LL_Transmit>

  return USBD_OK;
 8009048:	2300      	movs	r3, #0
}
 800904a:	4618      	mov	r0, r3
 800904c:	3710      	adds	r7, #16
 800904e:	46bd      	mov	sp, r7
 8009050:	bd80      	pop	{r7, pc}

08009052 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8009052:	b580      	push	{r7, lr}
 8009054:	b084      	sub	sp, #16
 8009056:	af00      	add	r7, sp, #0
 8009058:	60f8      	str	r0, [r7, #12]
 800905a:	60b9      	str	r1, [r7, #8]
 800905c:	4613      	mov	r3, r2
 800905e:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8009060:	68fb      	ldr	r3, [r7, #12]
 8009062:	2203      	movs	r2, #3
 8009064:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8009068:	88fa      	ldrh	r2, [r7, #6]
 800906a:	68fb      	ldr	r3, [r7, #12]
 800906c:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 8009070:	88fa      	ldrh	r2, [r7, #6]
 8009072:	68fb      	ldr	r3, [r7, #12]
 8009074:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009078:	88fb      	ldrh	r3, [r7, #6]
 800907a:	68ba      	ldr	r2, [r7, #8]
 800907c:	2100      	movs	r1, #0
 800907e:	68f8      	ldr	r0, [r7, #12]
 8009080:	f000 fcdf 	bl	8009a42 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009084:	2300      	movs	r3, #0
}
 8009086:	4618      	mov	r0, r3
 8009088:	3710      	adds	r7, #16
 800908a:	46bd      	mov	sp, r7
 800908c:	bd80      	pop	{r7, pc}

0800908e <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800908e:	b580      	push	{r7, lr}
 8009090:	b084      	sub	sp, #16
 8009092:	af00      	add	r7, sp, #0
 8009094:	60f8      	str	r0, [r7, #12]
 8009096:	60b9      	str	r1, [r7, #8]
 8009098:	4613      	mov	r3, r2
 800909a:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800909c:	88fb      	ldrh	r3, [r7, #6]
 800909e:	68ba      	ldr	r2, [r7, #8]
 80090a0:	2100      	movs	r1, #0
 80090a2:	68f8      	ldr	r0, [r7, #12]
 80090a4:	f000 fccd 	bl	8009a42 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80090a8:	2300      	movs	r3, #0
}
 80090aa:	4618      	mov	r0, r3
 80090ac:	3710      	adds	r7, #16
 80090ae:	46bd      	mov	sp, r7
 80090b0:	bd80      	pop	{r7, pc}

080090b2 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80090b2:	b580      	push	{r7, lr}
 80090b4:	b082      	sub	sp, #8
 80090b6:	af00      	add	r7, sp, #0
 80090b8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	2204      	movs	r2, #4
 80090be:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80090c2:	2300      	movs	r3, #0
 80090c4:	2200      	movs	r2, #0
 80090c6:	2100      	movs	r1, #0
 80090c8:	6878      	ldr	r0, [r7, #4]
 80090ca:	f000 fc97 	bl	80099fc <USBD_LL_Transmit>

  return USBD_OK;
 80090ce:	2300      	movs	r3, #0
}
 80090d0:	4618      	mov	r0, r3
 80090d2:	3708      	adds	r7, #8
 80090d4:	46bd      	mov	sp, r7
 80090d6:	bd80      	pop	{r7, pc}

080090d8 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80090d8:	b580      	push	{r7, lr}
 80090da:	b082      	sub	sp, #8
 80090dc:	af00      	add	r7, sp, #0
 80090de:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	2205      	movs	r2, #5
 80090e4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80090e8:	2300      	movs	r3, #0
 80090ea:	2200      	movs	r2, #0
 80090ec:	2100      	movs	r1, #0
 80090ee:	6878      	ldr	r0, [r7, #4]
 80090f0:	f000 fca7 	bl	8009a42 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80090f4:	2300      	movs	r3, #0
}
 80090f6:	4618      	mov	r0, r3
 80090f8:	3708      	adds	r7, #8
 80090fa:	46bd      	mov	sp, r7
 80090fc:	bd80      	pop	{r7, pc}
	...

08009100 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8009100:	b580      	push	{r7, lr}
 8009102:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8009104:	2200      	movs	r2, #0
 8009106:	4912      	ldr	r1, [pc, #72]	; (8009150 <MX_USB_DEVICE_Init+0x50>)
 8009108:	4812      	ldr	r0, [pc, #72]	; (8009154 <MX_USB_DEVICE_Init+0x54>)
 800910a:	f7fe ff26 	bl	8007f5a <USBD_Init>
 800910e:	4603      	mov	r3, r0
 8009110:	2b00      	cmp	r3, #0
 8009112:	d001      	beq.n	8009118 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8009114:	f7f8 fe10 	bl	8001d38 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8009118:	490f      	ldr	r1, [pc, #60]	; (8009158 <MX_USB_DEVICE_Init+0x58>)
 800911a:	480e      	ldr	r0, [pc, #56]	; (8009154 <MX_USB_DEVICE_Init+0x54>)
 800911c:	f7fe ff48 	bl	8007fb0 <USBD_RegisterClass>
 8009120:	4603      	mov	r3, r0
 8009122:	2b00      	cmp	r3, #0
 8009124:	d001      	beq.n	800912a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8009126:	f7f8 fe07 	bl	8001d38 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800912a:	490c      	ldr	r1, [pc, #48]	; (800915c <MX_USB_DEVICE_Init+0x5c>)
 800912c:	4809      	ldr	r0, [pc, #36]	; (8009154 <MX_USB_DEVICE_Init+0x54>)
 800912e:	f7fe fe79 	bl	8007e24 <USBD_CDC_RegisterInterface>
 8009132:	4603      	mov	r3, r0
 8009134:	2b00      	cmp	r3, #0
 8009136:	d001      	beq.n	800913c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8009138:	f7f8 fdfe 	bl	8001d38 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800913c:	4805      	ldr	r0, [pc, #20]	; (8009154 <MX_USB_DEVICE_Init+0x54>)
 800913e:	f7fe ff50 	bl	8007fe2 <USBD_Start>
 8009142:	4603      	mov	r3, r0
 8009144:	2b00      	cmp	r3, #0
 8009146:	d001      	beq.n	800914c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8009148:	f7f8 fdf6 	bl	8001d38 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800914c:	bf00      	nop
 800914e:	bd80      	pop	{r7, pc}
 8009150:	20000138 	.word	0x20000138
 8009154:	20000518 	.word	0x20000518
 8009158:	2000001c 	.word	0x2000001c
 800915c:	20000120 	.word	0x20000120

08009160 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8009160:	b580      	push	{r7, lr}
 8009162:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8009164:	2200      	movs	r2, #0
 8009166:	4905      	ldr	r1, [pc, #20]	; (800917c <CDC_Init_FS+0x1c>)
 8009168:	4805      	ldr	r0, [pc, #20]	; (8009180 <CDC_Init_FS+0x20>)
 800916a:	f7fe fe71 	bl	8007e50 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800916e:	4905      	ldr	r1, [pc, #20]	; (8009184 <CDC_Init_FS+0x24>)
 8009170:	4803      	ldr	r0, [pc, #12]	; (8009180 <CDC_Init_FS+0x20>)
 8009172:	f7fe fe86 	bl	8007e82 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8009176:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8009178:	4618      	mov	r0, r3
 800917a:	bd80      	pop	{r7, pc}
 800917c:	20000fdc 	.word	0x20000fdc
 8009180:	20000518 	.word	0x20000518
 8009184:	200007dc 	.word	0x200007dc

08009188 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8009188:	b480      	push	{r7}
 800918a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800918c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800918e:	4618      	mov	r0, r3
 8009190:	46bd      	mov	sp, r7
 8009192:	bc80      	pop	{r7}
 8009194:	4770      	bx	lr
	...

08009198 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8009198:	b480      	push	{r7}
 800919a:	b083      	sub	sp, #12
 800919c:	af00      	add	r7, sp, #0
 800919e:	4603      	mov	r3, r0
 80091a0:	6039      	str	r1, [r7, #0]
 80091a2:	71fb      	strb	r3, [r7, #7]
 80091a4:	4613      	mov	r3, r2
 80091a6:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80091a8:	79fb      	ldrb	r3, [r7, #7]
 80091aa:	2b23      	cmp	r3, #35	; 0x23
 80091ac:	d85c      	bhi.n	8009268 <CDC_Control_FS+0xd0>
 80091ae:	a201      	add	r2, pc, #4	; (adr r2, 80091b4 <CDC_Control_FS+0x1c>)
 80091b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091b4:	08009269 	.word	0x08009269
 80091b8:	08009269 	.word	0x08009269
 80091bc:	08009269 	.word	0x08009269
 80091c0:	08009269 	.word	0x08009269
 80091c4:	08009269 	.word	0x08009269
 80091c8:	08009269 	.word	0x08009269
 80091cc:	08009269 	.word	0x08009269
 80091d0:	08009269 	.word	0x08009269
 80091d4:	08009269 	.word	0x08009269
 80091d8:	08009269 	.word	0x08009269
 80091dc:	08009269 	.word	0x08009269
 80091e0:	08009269 	.word	0x08009269
 80091e4:	08009269 	.word	0x08009269
 80091e8:	08009269 	.word	0x08009269
 80091ec:	08009269 	.word	0x08009269
 80091f0:	08009269 	.word	0x08009269
 80091f4:	08009269 	.word	0x08009269
 80091f8:	08009269 	.word	0x08009269
 80091fc:	08009269 	.word	0x08009269
 8009200:	08009269 	.word	0x08009269
 8009204:	08009269 	.word	0x08009269
 8009208:	08009269 	.word	0x08009269
 800920c:	08009269 	.word	0x08009269
 8009210:	08009269 	.word	0x08009269
 8009214:	08009269 	.word	0x08009269
 8009218:	08009269 	.word	0x08009269
 800921c:	08009269 	.word	0x08009269
 8009220:	08009269 	.word	0x08009269
 8009224:	08009269 	.word	0x08009269
 8009228:	08009269 	.word	0x08009269
 800922c:	08009269 	.word	0x08009269
 8009230:	08009269 	.word	0x08009269
 8009234:	08009245 	.word	0x08009245
 8009238:	08009257 	.word	0x08009257
 800923c:	08009269 	.word	0x08009269
 8009240:	08009269 	.word	0x08009269
  /*******************************************************************************/
  static uint8_t lineCoding[7] // 115200bps, 1stop, no parity, 8bit
    = { 0x00, 0xC2, 0x01, 0x00, 0x00, 0x00, 0x08 };

    case CDC_SET_LINE_CODING:
      memcpy(lineCoding, pbuf, sizeof(lineCoding));
 8009244:	4b0c      	ldr	r3, [pc, #48]	; (8009278 <CDC_Control_FS+0xe0>)
 8009246:	683a      	ldr	r2, [r7, #0]
 8009248:	6810      	ldr	r0, [r2, #0]
 800924a:	6018      	str	r0, [r3, #0]
 800924c:	8891      	ldrh	r1, [r2, #4]
 800924e:	7992      	ldrb	r2, [r2, #6]
 8009250:	8099      	strh	r1, [r3, #4]
 8009252:	719a      	strb	r2, [r3, #6]
    break;
 8009254:	e009      	b.n	800926a <CDC_Control_FS+0xd2>

    case CDC_GET_LINE_CODING:
      memcpy(pbuf, lineCoding, sizeof(lineCoding));
 8009256:	683b      	ldr	r3, [r7, #0]
 8009258:	4a07      	ldr	r2, [pc, #28]	; (8009278 <CDC_Control_FS+0xe0>)
 800925a:	6810      	ldr	r0, [r2, #0]
 800925c:	6018      	str	r0, [r3, #0]
 800925e:	8891      	ldrh	r1, [r2, #4]
 8009260:	7992      	ldrb	r2, [r2, #6]
 8009262:	8099      	strh	r1, [r3, #4]
 8009264:	719a      	strb	r2, [r3, #6]
    break;
 8009266:	e000      	b.n	800926a <CDC_Control_FS+0xd2>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8009268:	bf00      	nop
  }

  return (USBD_OK);
 800926a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800926c:	4618      	mov	r0, r3
 800926e:	370c      	adds	r7, #12
 8009270:	46bd      	mov	sp, r7
 8009272:	bc80      	pop	{r7}
 8009274:	4770      	bx	lr
 8009276:	bf00      	nop
 8009278:	20000130 	.word	0x20000130

0800927c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800927c:	b580      	push	{r7, lr}
 800927e:	b082      	sub	sp, #8
 8009280:	af00      	add	r7, sp, #0
 8009282:	6078      	str	r0, [r7, #4]
 8009284:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8009286:	6879      	ldr	r1, [r7, #4]
 8009288:	4805      	ldr	r0, [pc, #20]	; (80092a0 <CDC_Receive_FS+0x24>)
 800928a:	f7fe fdfa 	bl	8007e82 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800928e:	4804      	ldr	r0, [pc, #16]	; (80092a0 <CDC_Receive_FS+0x24>)
 8009290:	f7fe fe39 	bl	8007f06 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8009294:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8009296:	4618      	mov	r0, r3
 8009298:	3708      	adds	r7, #8
 800929a:	46bd      	mov	sp, r7
 800929c:	bd80      	pop	{r7, pc}
 800929e:	bf00      	nop
 80092a0:	20000518 	.word	0x20000518

080092a4 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80092a4:	b580      	push	{r7, lr}
 80092a6:	b084      	sub	sp, #16
 80092a8:	af00      	add	r7, sp, #0
 80092aa:	6078      	str	r0, [r7, #4]
 80092ac:	460b      	mov	r3, r1
 80092ae:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80092b0:	2300      	movs	r3, #0
 80092b2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80092b4:	4b0d      	ldr	r3, [pc, #52]	; (80092ec <CDC_Transmit_FS+0x48>)
 80092b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80092ba:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80092bc:	68bb      	ldr	r3, [r7, #8]
 80092be:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	d001      	beq.n	80092ca <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 80092c6:	2301      	movs	r3, #1
 80092c8:	e00b      	b.n	80092e2 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80092ca:	887b      	ldrh	r3, [r7, #2]
 80092cc:	461a      	mov	r2, r3
 80092ce:	6879      	ldr	r1, [r7, #4]
 80092d0:	4806      	ldr	r0, [pc, #24]	; (80092ec <CDC_Transmit_FS+0x48>)
 80092d2:	f7fe fdbd 	bl	8007e50 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80092d6:	4805      	ldr	r0, [pc, #20]	; (80092ec <CDC_Transmit_FS+0x48>)
 80092d8:	f7fe fde6 	bl	8007ea8 <USBD_CDC_TransmitPacket>
 80092dc:	4603      	mov	r3, r0
 80092de:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 80092e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80092e2:	4618      	mov	r0, r3
 80092e4:	3710      	adds	r7, #16
 80092e6:	46bd      	mov	sp, r7
 80092e8:	bd80      	pop	{r7, pc}
 80092ea:	bf00      	nop
 80092ec:	20000518 	.word	0x20000518

080092f0 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80092f0:	b480      	push	{r7}
 80092f2:	b083      	sub	sp, #12
 80092f4:	af00      	add	r7, sp, #0
 80092f6:	4603      	mov	r3, r0
 80092f8:	6039      	str	r1, [r7, #0]
 80092fa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80092fc:	683b      	ldr	r3, [r7, #0]
 80092fe:	2212      	movs	r2, #18
 8009300:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8009302:	4b03      	ldr	r3, [pc, #12]	; (8009310 <USBD_FS_DeviceDescriptor+0x20>)
}
 8009304:	4618      	mov	r0, r3
 8009306:	370c      	adds	r7, #12
 8009308:	46bd      	mov	sp, r7
 800930a:	bc80      	pop	{r7}
 800930c:	4770      	bx	lr
 800930e:	bf00      	nop
 8009310:	20000154 	.word	0x20000154

08009314 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009314:	b480      	push	{r7}
 8009316:	b083      	sub	sp, #12
 8009318:	af00      	add	r7, sp, #0
 800931a:	4603      	mov	r3, r0
 800931c:	6039      	str	r1, [r7, #0]
 800931e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8009320:	683b      	ldr	r3, [r7, #0]
 8009322:	2204      	movs	r2, #4
 8009324:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8009326:	4b03      	ldr	r3, [pc, #12]	; (8009334 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8009328:	4618      	mov	r0, r3
 800932a:	370c      	adds	r7, #12
 800932c:	46bd      	mov	sp, r7
 800932e:	bc80      	pop	{r7}
 8009330:	4770      	bx	lr
 8009332:	bf00      	nop
 8009334:	20000168 	.word	0x20000168

08009338 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009338:	b580      	push	{r7, lr}
 800933a:	b082      	sub	sp, #8
 800933c:	af00      	add	r7, sp, #0
 800933e:	4603      	mov	r3, r0
 8009340:	6039      	str	r1, [r7, #0]
 8009342:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009344:	79fb      	ldrb	r3, [r7, #7]
 8009346:	2b00      	cmp	r3, #0
 8009348:	d105      	bne.n	8009356 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800934a:	683a      	ldr	r2, [r7, #0]
 800934c:	4907      	ldr	r1, [pc, #28]	; (800936c <USBD_FS_ProductStrDescriptor+0x34>)
 800934e:	4808      	ldr	r0, [pc, #32]	; (8009370 <USBD_FS_ProductStrDescriptor+0x38>)
 8009350:	f7ff fdf8 	bl	8008f44 <USBD_GetString>
 8009354:	e004      	b.n	8009360 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009356:	683a      	ldr	r2, [r7, #0]
 8009358:	4904      	ldr	r1, [pc, #16]	; (800936c <USBD_FS_ProductStrDescriptor+0x34>)
 800935a:	4805      	ldr	r0, [pc, #20]	; (8009370 <USBD_FS_ProductStrDescriptor+0x38>)
 800935c:	f7ff fdf2 	bl	8008f44 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009360:	4b02      	ldr	r3, [pc, #8]	; (800936c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8009362:	4618      	mov	r0, r3
 8009364:	3708      	adds	r7, #8
 8009366:	46bd      	mov	sp, r7
 8009368:	bd80      	pop	{r7, pc}
 800936a:	bf00      	nop
 800936c:	200017dc 	.word	0x200017dc
 8009370:	0800a674 	.word	0x0800a674

08009374 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009374:	b580      	push	{r7, lr}
 8009376:	b082      	sub	sp, #8
 8009378:	af00      	add	r7, sp, #0
 800937a:	4603      	mov	r3, r0
 800937c:	6039      	str	r1, [r7, #0]
 800937e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8009380:	683a      	ldr	r2, [r7, #0]
 8009382:	4904      	ldr	r1, [pc, #16]	; (8009394 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8009384:	4804      	ldr	r0, [pc, #16]	; (8009398 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8009386:	f7ff fddd 	bl	8008f44 <USBD_GetString>
  return USBD_StrDesc;
 800938a:	4b02      	ldr	r3, [pc, #8]	; (8009394 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800938c:	4618      	mov	r0, r3
 800938e:	3708      	adds	r7, #8
 8009390:	46bd      	mov	sp, r7
 8009392:	bd80      	pop	{r7, pc}
 8009394:	200017dc 	.word	0x200017dc
 8009398:	0800a68c 	.word	0x0800a68c

0800939c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800939c:	b580      	push	{r7, lr}
 800939e:	b082      	sub	sp, #8
 80093a0:	af00      	add	r7, sp, #0
 80093a2:	4603      	mov	r3, r0
 80093a4:	6039      	str	r1, [r7, #0]
 80093a6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80093a8:	683b      	ldr	r3, [r7, #0]
 80093aa:	221a      	movs	r2, #26
 80093ac:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80093ae:	f000 f843 	bl	8009438 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80093b2:	4b02      	ldr	r3, [pc, #8]	; (80093bc <USBD_FS_SerialStrDescriptor+0x20>)
}
 80093b4:	4618      	mov	r0, r3
 80093b6:	3708      	adds	r7, #8
 80093b8:	46bd      	mov	sp, r7
 80093ba:	bd80      	pop	{r7, pc}
 80093bc:	2000016c 	.word	0x2000016c

080093c0 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80093c0:	b580      	push	{r7, lr}
 80093c2:	b082      	sub	sp, #8
 80093c4:	af00      	add	r7, sp, #0
 80093c6:	4603      	mov	r3, r0
 80093c8:	6039      	str	r1, [r7, #0]
 80093ca:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80093cc:	79fb      	ldrb	r3, [r7, #7]
 80093ce:	2b00      	cmp	r3, #0
 80093d0:	d105      	bne.n	80093de <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80093d2:	683a      	ldr	r2, [r7, #0]
 80093d4:	4907      	ldr	r1, [pc, #28]	; (80093f4 <USBD_FS_ConfigStrDescriptor+0x34>)
 80093d6:	4808      	ldr	r0, [pc, #32]	; (80093f8 <USBD_FS_ConfigStrDescriptor+0x38>)
 80093d8:	f7ff fdb4 	bl	8008f44 <USBD_GetString>
 80093dc:	e004      	b.n	80093e8 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80093de:	683a      	ldr	r2, [r7, #0]
 80093e0:	4904      	ldr	r1, [pc, #16]	; (80093f4 <USBD_FS_ConfigStrDescriptor+0x34>)
 80093e2:	4805      	ldr	r0, [pc, #20]	; (80093f8 <USBD_FS_ConfigStrDescriptor+0x38>)
 80093e4:	f7ff fdae 	bl	8008f44 <USBD_GetString>
  }
  return USBD_StrDesc;
 80093e8:	4b02      	ldr	r3, [pc, #8]	; (80093f4 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80093ea:	4618      	mov	r0, r3
 80093ec:	3708      	adds	r7, #8
 80093ee:	46bd      	mov	sp, r7
 80093f0:	bd80      	pop	{r7, pc}
 80093f2:	bf00      	nop
 80093f4:	200017dc 	.word	0x200017dc
 80093f8:	0800a6a0 	.word	0x0800a6a0

080093fc <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80093fc:	b580      	push	{r7, lr}
 80093fe:	b082      	sub	sp, #8
 8009400:	af00      	add	r7, sp, #0
 8009402:	4603      	mov	r3, r0
 8009404:	6039      	str	r1, [r7, #0]
 8009406:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009408:	79fb      	ldrb	r3, [r7, #7]
 800940a:	2b00      	cmp	r3, #0
 800940c:	d105      	bne.n	800941a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800940e:	683a      	ldr	r2, [r7, #0]
 8009410:	4907      	ldr	r1, [pc, #28]	; (8009430 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009412:	4808      	ldr	r0, [pc, #32]	; (8009434 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009414:	f7ff fd96 	bl	8008f44 <USBD_GetString>
 8009418:	e004      	b.n	8009424 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800941a:	683a      	ldr	r2, [r7, #0]
 800941c:	4904      	ldr	r1, [pc, #16]	; (8009430 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800941e:	4805      	ldr	r0, [pc, #20]	; (8009434 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009420:	f7ff fd90 	bl	8008f44 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009424:	4b02      	ldr	r3, [pc, #8]	; (8009430 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8009426:	4618      	mov	r0, r3
 8009428:	3708      	adds	r7, #8
 800942a:	46bd      	mov	sp, r7
 800942c:	bd80      	pop	{r7, pc}
 800942e:	bf00      	nop
 8009430:	200017dc 	.word	0x200017dc
 8009434:	0800a6ac 	.word	0x0800a6ac

08009438 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8009438:	b580      	push	{r7, lr}
 800943a:	b084      	sub	sp, #16
 800943c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800943e:	4b0f      	ldr	r3, [pc, #60]	; (800947c <Get_SerialNum+0x44>)
 8009440:	681b      	ldr	r3, [r3, #0]
 8009442:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009444:	4b0e      	ldr	r3, [pc, #56]	; (8009480 <Get_SerialNum+0x48>)
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800944a:	4b0e      	ldr	r3, [pc, #56]	; (8009484 <Get_SerialNum+0x4c>)
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8009450:	68fa      	ldr	r2, [r7, #12]
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	4413      	add	r3, r2
 8009456:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8009458:	68fb      	ldr	r3, [r7, #12]
 800945a:	2b00      	cmp	r3, #0
 800945c:	d009      	beq.n	8009472 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800945e:	2208      	movs	r2, #8
 8009460:	4909      	ldr	r1, [pc, #36]	; (8009488 <Get_SerialNum+0x50>)
 8009462:	68f8      	ldr	r0, [r7, #12]
 8009464:	f000 f814 	bl	8009490 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8009468:	2204      	movs	r2, #4
 800946a:	4908      	ldr	r1, [pc, #32]	; (800948c <Get_SerialNum+0x54>)
 800946c:	68b8      	ldr	r0, [r7, #8]
 800946e:	f000 f80f 	bl	8009490 <IntToUnicode>
  }
}
 8009472:	bf00      	nop
 8009474:	3710      	adds	r7, #16
 8009476:	46bd      	mov	sp, r7
 8009478:	bd80      	pop	{r7, pc}
 800947a:	bf00      	nop
 800947c:	1fff7a10 	.word	0x1fff7a10
 8009480:	1fff7a14 	.word	0x1fff7a14
 8009484:	1fff7a18 	.word	0x1fff7a18
 8009488:	2000016e 	.word	0x2000016e
 800948c:	2000017e 	.word	0x2000017e

08009490 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8009490:	b480      	push	{r7}
 8009492:	b087      	sub	sp, #28
 8009494:	af00      	add	r7, sp, #0
 8009496:	60f8      	str	r0, [r7, #12]
 8009498:	60b9      	str	r1, [r7, #8]
 800949a:	4613      	mov	r3, r2
 800949c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800949e:	2300      	movs	r3, #0
 80094a0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80094a2:	2300      	movs	r3, #0
 80094a4:	75fb      	strb	r3, [r7, #23]
 80094a6:	e027      	b.n	80094f8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80094a8:	68fb      	ldr	r3, [r7, #12]
 80094aa:	0f1b      	lsrs	r3, r3, #28
 80094ac:	2b09      	cmp	r3, #9
 80094ae:	d80b      	bhi.n	80094c8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80094b0:	68fb      	ldr	r3, [r7, #12]
 80094b2:	0f1b      	lsrs	r3, r3, #28
 80094b4:	b2da      	uxtb	r2, r3
 80094b6:	7dfb      	ldrb	r3, [r7, #23]
 80094b8:	005b      	lsls	r3, r3, #1
 80094ba:	4619      	mov	r1, r3
 80094bc:	68bb      	ldr	r3, [r7, #8]
 80094be:	440b      	add	r3, r1
 80094c0:	3230      	adds	r2, #48	; 0x30
 80094c2:	b2d2      	uxtb	r2, r2
 80094c4:	701a      	strb	r2, [r3, #0]
 80094c6:	e00a      	b.n	80094de <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80094c8:	68fb      	ldr	r3, [r7, #12]
 80094ca:	0f1b      	lsrs	r3, r3, #28
 80094cc:	b2da      	uxtb	r2, r3
 80094ce:	7dfb      	ldrb	r3, [r7, #23]
 80094d0:	005b      	lsls	r3, r3, #1
 80094d2:	4619      	mov	r1, r3
 80094d4:	68bb      	ldr	r3, [r7, #8]
 80094d6:	440b      	add	r3, r1
 80094d8:	3237      	adds	r2, #55	; 0x37
 80094da:	b2d2      	uxtb	r2, r2
 80094dc:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80094de:	68fb      	ldr	r3, [r7, #12]
 80094e0:	011b      	lsls	r3, r3, #4
 80094e2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80094e4:	7dfb      	ldrb	r3, [r7, #23]
 80094e6:	005b      	lsls	r3, r3, #1
 80094e8:	3301      	adds	r3, #1
 80094ea:	68ba      	ldr	r2, [r7, #8]
 80094ec:	4413      	add	r3, r2
 80094ee:	2200      	movs	r2, #0
 80094f0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80094f2:	7dfb      	ldrb	r3, [r7, #23]
 80094f4:	3301      	adds	r3, #1
 80094f6:	75fb      	strb	r3, [r7, #23]
 80094f8:	7dfa      	ldrb	r2, [r7, #23]
 80094fa:	79fb      	ldrb	r3, [r7, #7]
 80094fc:	429a      	cmp	r2, r3
 80094fe:	d3d3      	bcc.n	80094a8 <IntToUnicode+0x18>
  }
}
 8009500:	bf00      	nop
 8009502:	bf00      	nop
 8009504:	371c      	adds	r7, #28
 8009506:	46bd      	mov	sp, r7
 8009508:	bc80      	pop	{r7}
 800950a:	4770      	bx	lr

0800950c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800950c:	b580      	push	{r7, lr}
 800950e:	b08a      	sub	sp, #40	; 0x28
 8009510:	af00      	add	r7, sp, #0
 8009512:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009514:	f107 0314 	add.w	r3, r7, #20
 8009518:	2200      	movs	r2, #0
 800951a:	601a      	str	r2, [r3, #0]
 800951c:	605a      	str	r2, [r3, #4]
 800951e:	609a      	str	r2, [r3, #8]
 8009520:	60da      	str	r2, [r3, #12]
 8009522:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	681b      	ldr	r3, [r3, #0]
 8009528:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800952c:	d13a      	bne.n	80095a4 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800952e:	2300      	movs	r3, #0
 8009530:	613b      	str	r3, [r7, #16]
 8009532:	4b1e      	ldr	r3, [pc, #120]	; (80095ac <HAL_PCD_MspInit+0xa0>)
 8009534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009536:	4a1d      	ldr	r2, [pc, #116]	; (80095ac <HAL_PCD_MspInit+0xa0>)
 8009538:	f043 0301 	orr.w	r3, r3, #1
 800953c:	6313      	str	r3, [r2, #48]	; 0x30
 800953e:	4b1b      	ldr	r3, [pc, #108]	; (80095ac <HAL_PCD_MspInit+0xa0>)
 8009540:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009542:	f003 0301 	and.w	r3, r3, #1
 8009546:	613b      	str	r3, [r7, #16]
 8009548:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800954a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800954e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009550:	2302      	movs	r3, #2
 8009552:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009554:	2300      	movs	r3, #0
 8009556:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009558:	2303      	movs	r3, #3
 800955a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800955c:	230a      	movs	r3, #10
 800955e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009560:	f107 0314 	add.w	r3, r7, #20
 8009564:	4619      	mov	r1, r3
 8009566:	4812      	ldr	r0, [pc, #72]	; (80095b0 <HAL_PCD_MspInit+0xa4>)
 8009568:	f7f9 fc88 	bl	8002e7c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800956c:	4b0f      	ldr	r3, [pc, #60]	; (80095ac <HAL_PCD_MspInit+0xa0>)
 800956e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009570:	4a0e      	ldr	r2, [pc, #56]	; (80095ac <HAL_PCD_MspInit+0xa0>)
 8009572:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009576:	6353      	str	r3, [r2, #52]	; 0x34
 8009578:	2300      	movs	r3, #0
 800957a:	60fb      	str	r3, [r7, #12]
 800957c:	4b0b      	ldr	r3, [pc, #44]	; (80095ac <HAL_PCD_MspInit+0xa0>)
 800957e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009580:	4a0a      	ldr	r2, [pc, #40]	; (80095ac <HAL_PCD_MspInit+0xa0>)
 8009582:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009586:	6453      	str	r3, [r2, #68]	; 0x44
 8009588:	4b08      	ldr	r3, [pc, #32]	; (80095ac <HAL_PCD_MspInit+0xa0>)
 800958a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800958c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009590:	60fb      	str	r3, [r7, #12]
 8009592:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8009594:	2200      	movs	r2, #0
 8009596:	2100      	movs	r1, #0
 8009598:	2043      	movs	r0, #67	; 0x43
 800959a:	f7f9 fc38 	bl	8002e0e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800959e:	2043      	movs	r0, #67	; 0x43
 80095a0:	f7f9 fc51 	bl	8002e46 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80095a4:	bf00      	nop
 80095a6:	3728      	adds	r7, #40	; 0x28
 80095a8:	46bd      	mov	sp, r7
 80095aa:	bd80      	pop	{r7, pc}
 80095ac:	40023800 	.word	0x40023800
 80095b0:	40020000 	.word	0x40020000

080095b4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80095b4:	b580      	push	{r7, lr}
 80095b6:	b082      	sub	sp, #8
 80095b8:	af00      	add	r7, sp, #0
 80095ba:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	f8d3 23fc 	ldr.w	r2, [r3, #1020]	; 0x3fc
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80095c8:	4619      	mov	r1, r3
 80095ca:	4610      	mov	r0, r2
 80095cc:	f7fe fd51 	bl	8008072 <USBD_LL_SetupStage>
}
 80095d0:	bf00      	nop
 80095d2:	3708      	adds	r7, #8
 80095d4:	46bd      	mov	sp, r7
 80095d6:	bd80      	pop	{r7, pc}

080095d8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80095d8:	b580      	push	{r7, lr}
 80095da:	b082      	sub	sp, #8
 80095dc:	af00      	add	r7, sp, #0
 80095de:	6078      	str	r0, [r7, #4]
 80095e0:	460b      	mov	r3, r1
 80095e2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	f8d3 03fc 	ldr.w	r0, [r3, #1020]	; 0x3fc
 80095ea:	78fa      	ldrb	r2, [r7, #3]
 80095ec:	6879      	ldr	r1, [r7, #4]
 80095ee:	4613      	mov	r3, r2
 80095f0:	00db      	lsls	r3, r3, #3
 80095f2:	1a9b      	subs	r3, r3, r2
 80095f4:	009b      	lsls	r3, r3, #2
 80095f6:	440b      	add	r3, r1
 80095f8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80095fc:	681a      	ldr	r2, [r3, #0]
 80095fe:	78fb      	ldrb	r3, [r7, #3]
 8009600:	4619      	mov	r1, r3
 8009602:	f7fe fd83 	bl	800810c <USBD_LL_DataOutStage>
}
 8009606:	bf00      	nop
 8009608:	3708      	adds	r7, #8
 800960a:	46bd      	mov	sp, r7
 800960c:	bd80      	pop	{r7, pc}

0800960e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800960e:	b580      	push	{r7, lr}
 8009610:	b082      	sub	sp, #8
 8009612:	af00      	add	r7, sp, #0
 8009614:	6078      	str	r0, [r7, #4]
 8009616:	460b      	mov	r3, r1
 8009618:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	f8d3 03fc 	ldr.w	r0, [r3, #1020]	; 0x3fc
 8009620:	78fa      	ldrb	r2, [r7, #3]
 8009622:	6879      	ldr	r1, [r7, #4]
 8009624:	4613      	mov	r3, r2
 8009626:	00db      	lsls	r3, r3, #3
 8009628:	1a9b      	subs	r3, r3, r2
 800962a:	009b      	lsls	r3, r3, #2
 800962c:	440b      	add	r3, r1
 800962e:	3348      	adds	r3, #72	; 0x48
 8009630:	681a      	ldr	r2, [r3, #0]
 8009632:	78fb      	ldrb	r3, [r7, #3]
 8009634:	4619      	mov	r1, r3
 8009636:	f7fe fdda 	bl	80081ee <USBD_LL_DataInStage>
}
 800963a:	bf00      	nop
 800963c:	3708      	adds	r7, #8
 800963e:	46bd      	mov	sp, r7
 8009640:	bd80      	pop	{r7, pc}

08009642 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009642:	b580      	push	{r7, lr}
 8009644:	b082      	sub	sp, #8
 8009646:	af00      	add	r7, sp, #0
 8009648:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 8009650:	4618      	mov	r0, r3
 8009652:	f7fe feea 	bl	800842a <USBD_LL_SOF>
}
 8009656:	bf00      	nop
 8009658:	3708      	adds	r7, #8
 800965a:	46bd      	mov	sp, r7
 800965c:	bd80      	pop	{r7, pc}

0800965e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800965e:	b580      	push	{r7, lr}
 8009660:	b084      	sub	sp, #16
 8009662:	af00      	add	r7, sp, #0
 8009664:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8009666:	2301      	movs	r3, #1
 8009668:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	68db      	ldr	r3, [r3, #12]
 800966e:	2b00      	cmp	r3, #0
 8009670:	d102      	bne.n	8009678 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8009672:	2300      	movs	r3, #0
 8009674:	73fb      	strb	r3, [r7, #15]
 8009676:	e008      	b.n	800968a <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	68db      	ldr	r3, [r3, #12]
 800967c:	2b02      	cmp	r3, #2
 800967e:	d102      	bne.n	8009686 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8009680:	2301      	movs	r3, #1
 8009682:	73fb      	strb	r3, [r7, #15]
 8009684:	e001      	b.n	800968a <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8009686:	f7f8 fb57 	bl	8001d38 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 8009690:	7bfa      	ldrb	r2, [r7, #15]
 8009692:	4611      	mov	r1, r2
 8009694:	4618      	mov	r0, r3
 8009696:	f7fe fe90 	bl	80083ba <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 80096a0:	4618      	mov	r0, r3
 80096a2:	f7fe fe49 	bl	8008338 <USBD_LL_Reset>
}
 80096a6:	bf00      	nop
 80096a8:	3710      	adds	r7, #16
 80096aa:	46bd      	mov	sp, r7
 80096ac:	bd80      	pop	{r7, pc}
	...

080096b0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80096b0:	b580      	push	{r7, lr}
 80096b2:	b082      	sub	sp, #8
 80096b4:	af00      	add	r7, sp, #0
 80096b6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 80096be:	4618      	mov	r0, r3
 80096c0:	f7fe fe8a 	bl	80083d8 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80096cc:	681b      	ldr	r3, [r3, #0]
 80096ce:	687a      	ldr	r2, [r7, #4]
 80096d0:	6812      	ldr	r2, [r2, #0]
 80096d2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80096d6:	f043 0301 	orr.w	r3, r3, #1
 80096da:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	6a1b      	ldr	r3, [r3, #32]
 80096e0:	2b00      	cmp	r3, #0
 80096e2:	d005      	beq.n	80096f0 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80096e4:	4b04      	ldr	r3, [pc, #16]	; (80096f8 <HAL_PCD_SuspendCallback+0x48>)
 80096e6:	691b      	ldr	r3, [r3, #16]
 80096e8:	4a03      	ldr	r2, [pc, #12]	; (80096f8 <HAL_PCD_SuspendCallback+0x48>)
 80096ea:	f043 0306 	orr.w	r3, r3, #6
 80096ee:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80096f0:	bf00      	nop
 80096f2:	3708      	adds	r7, #8
 80096f4:	46bd      	mov	sp, r7
 80096f6:	bd80      	pop	{r7, pc}
 80096f8:	e000ed00 	.word	0xe000ed00

080096fc <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80096fc:	b580      	push	{r7, lr}
 80096fe:	b082      	sub	sp, #8
 8009700:	af00      	add	r7, sp, #0
 8009702:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 800970a:	4618      	mov	r0, r3
 800970c:	f7fe fe78 	bl	8008400 <USBD_LL_Resume>
}
 8009710:	bf00      	nop
 8009712:	3708      	adds	r7, #8
 8009714:	46bd      	mov	sp, r7
 8009716:	bd80      	pop	{r7, pc}

08009718 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009718:	b580      	push	{r7, lr}
 800971a:	b082      	sub	sp, #8
 800971c:	af00      	add	r7, sp, #0
 800971e:	6078      	str	r0, [r7, #4]
 8009720:	460b      	mov	r3, r1
 8009722:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 800972a:	78fa      	ldrb	r2, [r7, #3]
 800972c:	4611      	mov	r1, r2
 800972e:	4618      	mov	r0, r3
 8009730:	f7fe fea1 	bl	8008476 <USBD_LL_IsoOUTIncomplete>
}
 8009734:	bf00      	nop
 8009736:	3708      	adds	r7, #8
 8009738:	46bd      	mov	sp, r7
 800973a:	bd80      	pop	{r7, pc}

0800973c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800973c:	b580      	push	{r7, lr}
 800973e:	b082      	sub	sp, #8
 8009740:	af00      	add	r7, sp, #0
 8009742:	6078      	str	r0, [r7, #4]
 8009744:	460b      	mov	r3, r1
 8009746:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 800974e:	78fa      	ldrb	r2, [r7, #3]
 8009750:	4611      	mov	r1, r2
 8009752:	4618      	mov	r0, r3
 8009754:	f7fe fe83 	bl	800845e <USBD_LL_IsoINIncomplete>
}
 8009758:	bf00      	nop
 800975a:	3708      	adds	r7, #8
 800975c:	46bd      	mov	sp, r7
 800975e:	bd80      	pop	{r7, pc}

08009760 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009760:	b580      	push	{r7, lr}
 8009762:	b082      	sub	sp, #8
 8009764:	af00      	add	r7, sp, #0
 8009766:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 800976e:	4618      	mov	r0, r3
 8009770:	f7fe fe8d 	bl	800848e <USBD_LL_DevConnected>
}
 8009774:	bf00      	nop
 8009776:	3708      	adds	r7, #8
 8009778:	46bd      	mov	sp, r7
 800977a:	bd80      	pop	{r7, pc}

0800977c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800977c:	b580      	push	{r7, lr}
 800977e:	b082      	sub	sp, #8
 8009780:	af00      	add	r7, sp, #0
 8009782:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 800978a:	4618      	mov	r0, r3
 800978c:	f7fe fe89 	bl	80084a2 <USBD_LL_DevDisconnected>
}
 8009790:	bf00      	nop
 8009792:	3708      	adds	r7, #8
 8009794:	46bd      	mov	sp, r7
 8009796:	bd80      	pop	{r7, pc}

08009798 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009798:	b580      	push	{r7, lr}
 800979a:	b082      	sub	sp, #8
 800979c:	af00      	add	r7, sp, #0
 800979e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	781b      	ldrb	r3, [r3, #0]
 80097a4:	2b00      	cmp	r3, #0
 80097a6:	d139      	bne.n	800981c <USBD_LL_Init+0x84>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80097a8:	4a1f      	ldr	r2, [pc, #124]	; (8009828 <USBD_LL_Init+0x90>)
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	f8c2 33fc 	str.w	r3, [r2, #1020]	; 0x3fc
  pdev->pData = &hpcd_USB_OTG_FS;
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	4a1d      	ldr	r2, [pc, #116]	; (8009828 <USBD_LL_Init+0x90>)
 80097b4:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80097b8:	4b1b      	ldr	r3, [pc, #108]	; (8009828 <USBD_LL_Init+0x90>)
 80097ba:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80097be:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80097c0:	4b19      	ldr	r3, [pc, #100]	; (8009828 <USBD_LL_Init+0x90>)
 80097c2:	2204      	movs	r2, #4
 80097c4:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80097c6:	4b18      	ldr	r3, [pc, #96]	; (8009828 <USBD_LL_Init+0x90>)
 80097c8:	2202      	movs	r2, #2
 80097ca:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80097cc:	4b16      	ldr	r3, [pc, #88]	; (8009828 <USBD_LL_Init+0x90>)
 80097ce:	2200      	movs	r2, #0
 80097d0:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80097d2:	4b15      	ldr	r3, [pc, #84]	; (8009828 <USBD_LL_Init+0x90>)
 80097d4:	2202      	movs	r2, #2
 80097d6:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80097d8:	4b13      	ldr	r3, [pc, #76]	; (8009828 <USBD_LL_Init+0x90>)
 80097da:	2200      	movs	r2, #0
 80097dc:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80097de:	4b12      	ldr	r3, [pc, #72]	; (8009828 <USBD_LL_Init+0x90>)
 80097e0:	2200      	movs	r2, #0
 80097e2:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80097e4:	4b10      	ldr	r3, [pc, #64]	; (8009828 <USBD_LL_Init+0x90>)
 80097e6:	2200      	movs	r2, #0
 80097e8:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80097ea:	4b0f      	ldr	r3, [pc, #60]	; (8009828 <USBD_LL_Init+0x90>)
 80097ec:	2200      	movs	r2, #0
 80097ee:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80097f0:	480d      	ldr	r0, [pc, #52]	; (8009828 <USBD_LL_Init+0x90>)
 80097f2:	f7fa fcbf 	bl	8004174 <HAL_PCD_Init>
 80097f6:	4603      	mov	r3, r0
 80097f8:	2b00      	cmp	r3, #0
 80097fa:	d001      	beq.n	8009800 <USBD_LL_Init+0x68>
  {
    Error_Handler( );
 80097fc:	f7f8 fa9c 	bl	8001d38 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8009800:	2180      	movs	r1, #128	; 0x80
 8009802:	4809      	ldr	r0, [pc, #36]	; (8009828 <USBD_LL_Init+0x90>)
 8009804:	f7fb fdfc 	bl	8005400 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8009808:	2240      	movs	r2, #64	; 0x40
 800980a:	2100      	movs	r1, #0
 800980c:	4806      	ldr	r0, [pc, #24]	; (8009828 <USBD_LL_Init+0x90>)
 800980e:	f7fb fdb1 	bl	8005374 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8009812:	2280      	movs	r2, #128	; 0x80
 8009814:	2101      	movs	r1, #1
 8009816:	4804      	ldr	r0, [pc, #16]	; (8009828 <USBD_LL_Init+0x90>)
 8009818:	f7fb fdac 	bl	8005374 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800981c:	2300      	movs	r3, #0
}
 800981e:	4618      	mov	r0, r3
 8009820:	3708      	adds	r7, #8
 8009822:	46bd      	mov	sp, r7
 8009824:	bd80      	pop	{r7, pc}
 8009826:	bf00      	nop
 8009828:	200019dc 	.word	0x200019dc

0800982c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800982c:	b580      	push	{r7, lr}
 800982e:	b084      	sub	sp, #16
 8009830:	af00      	add	r7, sp, #0
 8009832:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009834:	2300      	movs	r3, #0
 8009836:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009838:	2300      	movs	r3, #0
 800983a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009842:	4618      	mov	r0, r3
 8009844:	f7fa fdb3 	bl	80043ae <HAL_PCD_Start>
 8009848:	4603      	mov	r3, r0
 800984a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800984c:	7bfb      	ldrb	r3, [r7, #15]
 800984e:	4618      	mov	r0, r3
 8009850:	f000 f92e 	bl	8009ab0 <USBD_Get_USB_Status>
 8009854:	4603      	mov	r3, r0
 8009856:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009858:	7bbb      	ldrb	r3, [r7, #14]
}
 800985a:	4618      	mov	r0, r3
 800985c:	3710      	adds	r7, #16
 800985e:	46bd      	mov	sp, r7
 8009860:	bd80      	pop	{r7, pc}

08009862 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8009862:	b580      	push	{r7, lr}
 8009864:	b084      	sub	sp, #16
 8009866:	af00      	add	r7, sp, #0
 8009868:	6078      	str	r0, [r7, #4]
 800986a:	4608      	mov	r0, r1
 800986c:	4611      	mov	r1, r2
 800986e:	461a      	mov	r2, r3
 8009870:	4603      	mov	r3, r0
 8009872:	70fb      	strb	r3, [r7, #3]
 8009874:	460b      	mov	r3, r1
 8009876:	70bb      	strb	r3, [r7, #2]
 8009878:	4613      	mov	r3, r2
 800987a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800987c:	2300      	movs	r3, #0
 800987e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009880:	2300      	movs	r3, #0
 8009882:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800988a:	78bb      	ldrb	r3, [r7, #2]
 800988c:	883a      	ldrh	r2, [r7, #0]
 800988e:	78f9      	ldrb	r1, [r7, #3]
 8009890:	f7fb f978 	bl	8004b84 <HAL_PCD_EP_Open>
 8009894:	4603      	mov	r3, r0
 8009896:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009898:	7bfb      	ldrb	r3, [r7, #15]
 800989a:	4618      	mov	r0, r3
 800989c:	f000 f908 	bl	8009ab0 <USBD_Get_USB_Status>
 80098a0:	4603      	mov	r3, r0
 80098a2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80098a4:	7bbb      	ldrb	r3, [r7, #14]
}
 80098a6:	4618      	mov	r0, r3
 80098a8:	3710      	adds	r7, #16
 80098aa:	46bd      	mov	sp, r7
 80098ac:	bd80      	pop	{r7, pc}

080098ae <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80098ae:	b580      	push	{r7, lr}
 80098b0:	b084      	sub	sp, #16
 80098b2:	af00      	add	r7, sp, #0
 80098b4:	6078      	str	r0, [r7, #4]
 80098b6:	460b      	mov	r3, r1
 80098b8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80098ba:	2300      	movs	r3, #0
 80098bc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80098be:	2300      	movs	r3, #0
 80098c0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80098c8:	78fa      	ldrb	r2, [r7, #3]
 80098ca:	4611      	mov	r1, r2
 80098cc:	4618      	mov	r0, r3
 80098ce:	f7fb f9c1 	bl	8004c54 <HAL_PCD_EP_Close>
 80098d2:	4603      	mov	r3, r0
 80098d4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80098d6:	7bfb      	ldrb	r3, [r7, #15]
 80098d8:	4618      	mov	r0, r3
 80098da:	f000 f8e9 	bl	8009ab0 <USBD_Get_USB_Status>
 80098de:	4603      	mov	r3, r0
 80098e0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80098e2:	7bbb      	ldrb	r3, [r7, #14]
}
 80098e4:	4618      	mov	r0, r3
 80098e6:	3710      	adds	r7, #16
 80098e8:	46bd      	mov	sp, r7
 80098ea:	bd80      	pop	{r7, pc}

080098ec <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80098ec:	b580      	push	{r7, lr}
 80098ee:	b084      	sub	sp, #16
 80098f0:	af00      	add	r7, sp, #0
 80098f2:	6078      	str	r0, [r7, #4]
 80098f4:	460b      	mov	r3, r1
 80098f6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80098f8:	2300      	movs	r3, #0
 80098fa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80098fc:	2300      	movs	r3, #0
 80098fe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009906:	78fa      	ldrb	r2, [r7, #3]
 8009908:	4611      	mov	r1, r2
 800990a:	4618      	mov	r0, r3
 800990c:	f7fb fa98 	bl	8004e40 <HAL_PCD_EP_SetStall>
 8009910:	4603      	mov	r3, r0
 8009912:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009914:	7bfb      	ldrb	r3, [r7, #15]
 8009916:	4618      	mov	r0, r3
 8009918:	f000 f8ca 	bl	8009ab0 <USBD_Get_USB_Status>
 800991c:	4603      	mov	r3, r0
 800991e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009920:	7bbb      	ldrb	r3, [r7, #14]
}
 8009922:	4618      	mov	r0, r3
 8009924:	3710      	adds	r7, #16
 8009926:	46bd      	mov	sp, r7
 8009928:	bd80      	pop	{r7, pc}

0800992a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800992a:	b580      	push	{r7, lr}
 800992c:	b084      	sub	sp, #16
 800992e:	af00      	add	r7, sp, #0
 8009930:	6078      	str	r0, [r7, #4]
 8009932:	460b      	mov	r3, r1
 8009934:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009936:	2300      	movs	r3, #0
 8009938:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800993a:	2300      	movs	r3, #0
 800993c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009944:	78fa      	ldrb	r2, [r7, #3]
 8009946:	4611      	mov	r1, r2
 8009948:	4618      	mov	r0, r3
 800994a:	f7fb fadd 	bl	8004f08 <HAL_PCD_EP_ClrStall>
 800994e:	4603      	mov	r3, r0
 8009950:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009952:	7bfb      	ldrb	r3, [r7, #15]
 8009954:	4618      	mov	r0, r3
 8009956:	f000 f8ab 	bl	8009ab0 <USBD_Get_USB_Status>
 800995a:	4603      	mov	r3, r0
 800995c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800995e:	7bbb      	ldrb	r3, [r7, #14]
}
 8009960:	4618      	mov	r0, r3
 8009962:	3710      	adds	r7, #16
 8009964:	46bd      	mov	sp, r7
 8009966:	bd80      	pop	{r7, pc}

08009968 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009968:	b480      	push	{r7}
 800996a:	b085      	sub	sp, #20
 800996c:	af00      	add	r7, sp, #0
 800996e:	6078      	str	r0, [r7, #4]
 8009970:	460b      	mov	r3, r1
 8009972:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800997a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800997c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009980:	2b00      	cmp	r3, #0
 8009982:	da0b      	bge.n	800999c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009984:	78fb      	ldrb	r3, [r7, #3]
 8009986:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800998a:	68f9      	ldr	r1, [r7, #12]
 800998c:	4613      	mov	r3, r2
 800998e:	00db      	lsls	r3, r3, #3
 8009990:	1a9b      	subs	r3, r3, r2
 8009992:	009b      	lsls	r3, r3, #2
 8009994:	440b      	add	r3, r1
 8009996:	333e      	adds	r3, #62	; 0x3e
 8009998:	781b      	ldrb	r3, [r3, #0]
 800999a:	e00b      	b.n	80099b4 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800999c:	78fb      	ldrb	r3, [r7, #3]
 800999e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80099a2:	68f9      	ldr	r1, [r7, #12]
 80099a4:	4613      	mov	r3, r2
 80099a6:	00db      	lsls	r3, r3, #3
 80099a8:	1a9b      	subs	r3, r3, r2
 80099aa:	009b      	lsls	r3, r3, #2
 80099ac:	440b      	add	r3, r1
 80099ae:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80099b2:	781b      	ldrb	r3, [r3, #0]
  }
}
 80099b4:	4618      	mov	r0, r3
 80099b6:	3714      	adds	r7, #20
 80099b8:	46bd      	mov	sp, r7
 80099ba:	bc80      	pop	{r7}
 80099bc:	4770      	bx	lr

080099be <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80099be:	b580      	push	{r7, lr}
 80099c0:	b084      	sub	sp, #16
 80099c2:	af00      	add	r7, sp, #0
 80099c4:	6078      	str	r0, [r7, #4]
 80099c6:	460b      	mov	r3, r1
 80099c8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80099ca:	2300      	movs	r3, #0
 80099cc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80099ce:	2300      	movs	r3, #0
 80099d0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80099d8:	78fa      	ldrb	r2, [r7, #3]
 80099da:	4611      	mov	r1, r2
 80099dc:	4618      	mov	r0, r3
 80099de:	f7fb f8ac 	bl	8004b3a <HAL_PCD_SetAddress>
 80099e2:	4603      	mov	r3, r0
 80099e4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80099e6:	7bfb      	ldrb	r3, [r7, #15]
 80099e8:	4618      	mov	r0, r3
 80099ea:	f000 f861 	bl	8009ab0 <USBD_Get_USB_Status>
 80099ee:	4603      	mov	r3, r0
 80099f0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80099f2:	7bbb      	ldrb	r3, [r7, #14]
}
 80099f4:	4618      	mov	r0, r3
 80099f6:	3710      	adds	r7, #16
 80099f8:	46bd      	mov	sp, r7
 80099fa:	bd80      	pop	{r7, pc}

080099fc <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80099fc:	b580      	push	{r7, lr}
 80099fe:	b086      	sub	sp, #24
 8009a00:	af00      	add	r7, sp, #0
 8009a02:	60f8      	str	r0, [r7, #12]
 8009a04:	607a      	str	r2, [r7, #4]
 8009a06:	461a      	mov	r2, r3
 8009a08:	460b      	mov	r3, r1
 8009a0a:	72fb      	strb	r3, [r7, #11]
 8009a0c:	4613      	mov	r3, r2
 8009a0e:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009a10:	2300      	movs	r3, #0
 8009a12:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009a14:	2300      	movs	r3, #0
 8009a16:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8009a18:	68fb      	ldr	r3, [r7, #12]
 8009a1a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009a1e:	893b      	ldrh	r3, [r7, #8]
 8009a20:	7af9      	ldrb	r1, [r7, #11]
 8009a22:	687a      	ldr	r2, [r7, #4]
 8009a24:	f7fb f9c2 	bl	8004dac <HAL_PCD_EP_Transmit>
 8009a28:	4603      	mov	r3, r0
 8009a2a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009a2c:	7dfb      	ldrb	r3, [r7, #23]
 8009a2e:	4618      	mov	r0, r3
 8009a30:	f000 f83e 	bl	8009ab0 <USBD_Get_USB_Status>
 8009a34:	4603      	mov	r3, r0
 8009a36:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009a38:	7dbb      	ldrb	r3, [r7, #22]
}
 8009a3a:	4618      	mov	r0, r3
 8009a3c:	3718      	adds	r7, #24
 8009a3e:	46bd      	mov	sp, r7
 8009a40:	bd80      	pop	{r7, pc}

08009a42 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8009a42:	b580      	push	{r7, lr}
 8009a44:	b086      	sub	sp, #24
 8009a46:	af00      	add	r7, sp, #0
 8009a48:	60f8      	str	r0, [r7, #12]
 8009a4a:	607a      	str	r2, [r7, #4]
 8009a4c:	461a      	mov	r2, r3
 8009a4e:	460b      	mov	r3, r1
 8009a50:	72fb      	strb	r3, [r7, #11]
 8009a52:	4613      	mov	r3, r2
 8009a54:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009a56:	2300      	movs	r3, #0
 8009a58:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009a5a:	2300      	movs	r3, #0
 8009a5c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009a5e:	68fb      	ldr	r3, [r7, #12]
 8009a60:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009a64:	893b      	ldrh	r3, [r7, #8]
 8009a66:	7af9      	ldrb	r1, [r7, #11]
 8009a68:	687a      	ldr	r2, [r7, #4]
 8009a6a:	f7fb f93d 	bl	8004ce8 <HAL_PCD_EP_Receive>
 8009a6e:	4603      	mov	r3, r0
 8009a70:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009a72:	7dfb      	ldrb	r3, [r7, #23]
 8009a74:	4618      	mov	r0, r3
 8009a76:	f000 f81b 	bl	8009ab0 <USBD_Get_USB_Status>
 8009a7a:	4603      	mov	r3, r0
 8009a7c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009a7e:	7dbb      	ldrb	r3, [r7, #22]
}
 8009a80:	4618      	mov	r0, r3
 8009a82:	3718      	adds	r7, #24
 8009a84:	46bd      	mov	sp, r7
 8009a86:	bd80      	pop	{r7, pc}

08009a88 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009a88:	b580      	push	{r7, lr}
 8009a8a:	b082      	sub	sp, #8
 8009a8c:	af00      	add	r7, sp, #0
 8009a8e:	6078      	str	r0, [r7, #4]
 8009a90:	460b      	mov	r3, r1
 8009a92:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009a9a:	78fa      	ldrb	r2, [r7, #3]
 8009a9c:	4611      	mov	r1, r2
 8009a9e:	4618      	mov	r0, r3
 8009aa0:	f7fb f96d 	bl	8004d7e <HAL_PCD_EP_GetRxCount>
 8009aa4:	4603      	mov	r3, r0
}
 8009aa6:	4618      	mov	r0, r3
 8009aa8:	3708      	adds	r7, #8
 8009aaa:	46bd      	mov	sp, r7
 8009aac:	bd80      	pop	{r7, pc}
	...

08009ab0 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009ab0:	b480      	push	{r7}
 8009ab2:	b085      	sub	sp, #20
 8009ab4:	af00      	add	r7, sp, #0
 8009ab6:	4603      	mov	r3, r0
 8009ab8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009aba:	2300      	movs	r3, #0
 8009abc:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009abe:	79fb      	ldrb	r3, [r7, #7]
 8009ac0:	2b03      	cmp	r3, #3
 8009ac2:	d817      	bhi.n	8009af4 <USBD_Get_USB_Status+0x44>
 8009ac4:	a201      	add	r2, pc, #4	; (adr r2, 8009acc <USBD_Get_USB_Status+0x1c>)
 8009ac6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009aca:	bf00      	nop
 8009acc:	08009add 	.word	0x08009add
 8009ad0:	08009ae3 	.word	0x08009ae3
 8009ad4:	08009ae9 	.word	0x08009ae9
 8009ad8:	08009aef 	.word	0x08009aef
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009adc:	2300      	movs	r3, #0
 8009ade:	73fb      	strb	r3, [r7, #15]
    break;
 8009ae0:	e00b      	b.n	8009afa <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009ae2:	2302      	movs	r3, #2
 8009ae4:	73fb      	strb	r3, [r7, #15]
    break;
 8009ae6:	e008      	b.n	8009afa <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009ae8:	2301      	movs	r3, #1
 8009aea:	73fb      	strb	r3, [r7, #15]
    break;
 8009aec:	e005      	b.n	8009afa <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009aee:	2302      	movs	r3, #2
 8009af0:	73fb      	strb	r3, [r7, #15]
    break;
 8009af2:	e002      	b.n	8009afa <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009af4:	2302      	movs	r3, #2
 8009af6:	73fb      	strb	r3, [r7, #15]
    break;
 8009af8:	bf00      	nop
  }
  return usb_status;
 8009afa:	7bfb      	ldrb	r3, [r7, #15]
}
 8009afc:	4618      	mov	r0, r3
 8009afe:	3714      	adds	r7, #20
 8009b00:	46bd      	mov	sp, r7
 8009b02:	bc80      	pop	{r7}
 8009b04:	4770      	bx	lr
 8009b06:	bf00      	nop

08009b08 <atanf>:
 8009b08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009b0c:	f020 4500 	bic.w	r5, r0, #2147483648	; 0x80000000
 8009b10:	f1b5 4fa1 	cmp.w	r5, #1350565888	; 0x50800000
 8009b14:	4604      	mov	r4, r0
 8009b16:	4680      	mov	r8, r0
 8009b18:	db0e      	blt.n	8009b38 <atanf+0x30>
 8009b1a:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 8009b1e:	dd04      	ble.n	8009b2a <atanf+0x22>
 8009b20:	4601      	mov	r1, r0
 8009b22:	f7f6 ff45 	bl	80009b0 <__addsf3>
 8009b26:	4604      	mov	r4, r0
 8009b28:	e003      	b.n	8009b32 <atanf+0x2a>
 8009b2a:	2800      	cmp	r0, #0
 8009b2c:	f300 80ce 	bgt.w	8009ccc <atanf+0x1c4>
 8009b30:	4c67      	ldr	r4, [pc, #412]	; (8009cd0 <atanf+0x1c8>)
 8009b32:	4620      	mov	r0, r4
 8009b34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009b38:	4b66      	ldr	r3, [pc, #408]	; (8009cd4 <atanf+0x1cc>)
 8009b3a:	429d      	cmp	r5, r3
 8009b3c:	dc0e      	bgt.n	8009b5c <atanf+0x54>
 8009b3e:	f1b5 5f44 	cmp.w	r5, #822083584	; 0x31000000
 8009b42:	da08      	bge.n	8009b56 <atanf+0x4e>
 8009b44:	4964      	ldr	r1, [pc, #400]	; (8009cd8 <atanf+0x1d0>)
 8009b46:	f7f6 ff33 	bl	80009b0 <__addsf3>
 8009b4a:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8009b4e:	f7f7 f9f3 	bl	8000f38 <__aeabi_fcmpgt>
 8009b52:	2800      	cmp	r0, #0
 8009b54:	d1ed      	bne.n	8009b32 <atanf+0x2a>
 8009b56:	f04f 36ff 	mov.w	r6, #4294967295
 8009b5a:	e01c      	b.n	8009b96 <atanf+0x8e>
 8009b5c:	f000 f8e0 	bl	8009d20 <fabsf>
 8009b60:	4b5e      	ldr	r3, [pc, #376]	; (8009cdc <atanf+0x1d4>)
 8009b62:	4604      	mov	r4, r0
 8009b64:	429d      	cmp	r5, r3
 8009b66:	dc7c      	bgt.n	8009c62 <atanf+0x15a>
 8009b68:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 8009b6c:	429d      	cmp	r5, r3
 8009b6e:	dc67      	bgt.n	8009c40 <atanf+0x138>
 8009b70:	4601      	mov	r1, r0
 8009b72:	f7f6 ff1d 	bl	80009b0 <__addsf3>
 8009b76:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8009b7a:	f7f6 ff17 	bl	80009ac <__aeabi_fsub>
 8009b7e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8009b82:	4605      	mov	r5, r0
 8009b84:	4620      	mov	r0, r4
 8009b86:	f7f6 ff13 	bl	80009b0 <__addsf3>
 8009b8a:	4601      	mov	r1, r0
 8009b8c:	4628      	mov	r0, r5
 8009b8e:	f7f7 f8cb 	bl	8000d28 <__aeabi_fdiv>
 8009b92:	2600      	movs	r6, #0
 8009b94:	4604      	mov	r4, r0
 8009b96:	4621      	mov	r1, r4
 8009b98:	4620      	mov	r0, r4
 8009b9a:	f7f7 f811 	bl	8000bc0 <__aeabi_fmul>
 8009b9e:	4601      	mov	r1, r0
 8009ba0:	4607      	mov	r7, r0
 8009ba2:	f7f7 f80d 	bl	8000bc0 <__aeabi_fmul>
 8009ba6:	4605      	mov	r5, r0
 8009ba8:	494d      	ldr	r1, [pc, #308]	; (8009ce0 <atanf+0x1d8>)
 8009baa:	f7f7 f809 	bl	8000bc0 <__aeabi_fmul>
 8009bae:	494d      	ldr	r1, [pc, #308]	; (8009ce4 <atanf+0x1dc>)
 8009bb0:	f7f6 fefe 	bl	80009b0 <__addsf3>
 8009bb4:	4629      	mov	r1, r5
 8009bb6:	f7f7 f803 	bl	8000bc0 <__aeabi_fmul>
 8009bba:	494b      	ldr	r1, [pc, #300]	; (8009ce8 <atanf+0x1e0>)
 8009bbc:	f7f6 fef8 	bl	80009b0 <__addsf3>
 8009bc0:	4629      	mov	r1, r5
 8009bc2:	f7f6 fffd 	bl	8000bc0 <__aeabi_fmul>
 8009bc6:	4949      	ldr	r1, [pc, #292]	; (8009cec <atanf+0x1e4>)
 8009bc8:	f7f6 fef2 	bl	80009b0 <__addsf3>
 8009bcc:	4629      	mov	r1, r5
 8009bce:	f7f6 fff7 	bl	8000bc0 <__aeabi_fmul>
 8009bd2:	4947      	ldr	r1, [pc, #284]	; (8009cf0 <atanf+0x1e8>)
 8009bd4:	f7f6 feec 	bl	80009b0 <__addsf3>
 8009bd8:	4629      	mov	r1, r5
 8009bda:	f7f6 fff1 	bl	8000bc0 <__aeabi_fmul>
 8009bde:	4945      	ldr	r1, [pc, #276]	; (8009cf4 <atanf+0x1ec>)
 8009be0:	f7f6 fee6 	bl	80009b0 <__addsf3>
 8009be4:	4639      	mov	r1, r7
 8009be6:	f7f6 ffeb 	bl	8000bc0 <__aeabi_fmul>
 8009bea:	4943      	ldr	r1, [pc, #268]	; (8009cf8 <atanf+0x1f0>)
 8009bec:	4607      	mov	r7, r0
 8009bee:	4628      	mov	r0, r5
 8009bf0:	f7f6 ffe6 	bl	8000bc0 <__aeabi_fmul>
 8009bf4:	4941      	ldr	r1, [pc, #260]	; (8009cfc <atanf+0x1f4>)
 8009bf6:	f7f6 fed9 	bl	80009ac <__aeabi_fsub>
 8009bfa:	4629      	mov	r1, r5
 8009bfc:	f7f6 ffe0 	bl	8000bc0 <__aeabi_fmul>
 8009c00:	493f      	ldr	r1, [pc, #252]	; (8009d00 <atanf+0x1f8>)
 8009c02:	f7f6 fed3 	bl	80009ac <__aeabi_fsub>
 8009c06:	4629      	mov	r1, r5
 8009c08:	f7f6 ffda 	bl	8000bc0 <__aeabi_fmul>
 8009c0c:	493d      	ldr	r1, [pc, #244]	; (8009d04 <atanf+0x1fc>)
 8009c0e:	f7f6 fecd 	bl	80009ac <__aeabi_fsub>
 8009c12:	4629      	mov	r1, r5
 8009c14:	f7f6 ffd4 	bl	8000bc0 <__aeabi_fmul>
 8009c18:	493b      	ldr	r1, [pc, #236]	; (8009d08 <atanf+0x200>)
 8009c1a:	f7f6 fec7 	bl	80009ac <__aeabi_fsub>
 8009c1e:	4629      	mov	r1, r5
 8009c20:	f7f6 ffce 	bl	8000bc0 <__aeabi_fmul>
 8009c24:	4601      	mov	r1, r0
 8009c26:	4638      	mov	r0, r7
 8009c28:	f7f6 fec2 	bl	80009b0 <__addsf3>
 8009c2c:	4621      	mov	r1, r4
 8009c2e:	f7f6 ffc7 	bl	8000bc0 <__aeabi_fmul>
 8009c32:	1c73      	adds	r3, r6, #1
 8009c34:	4601      	mov	r1, r0
 8009c36:	d133      	bne.n	8009ca0 <atanf+0x198>
 8009c38:	4620      	mov	r0, r4
 8009c3a:	f7f6 feb7 	bl	80009ac <__aeabi_fsub>
 8009c3e:	e772      	b.n	8009b26 <atanf+0x1e>
 8009c40:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8009c44:	f7f6 feb2 	bl	80009ac <__aeabi_fsub>
 8009c48:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8009c4c:	4605      	mov	r5, r0
 8009c4e:	4620      	mov	r0, r4
 8009c50:	f7f6 feae 	bl	80009b0 <__addsf3>
 8009c54:	4601      	mov	r1, r0
 8009c56:	4628      	mov	r0, r5
 8009c58:	f7f7 f866 	bl	8000d28 <__aeabi_fdiv>
 8009c5c:	2601      	movs	r6, #1
 8009c5e:	4604      	mov	r4, r0
 8009c60:	e799      	b.n	8009b96 <atanf+0x8e>
 8009c62:	4b2a      	ldr	r3, [pc, #168]	; (8009d0c <atanf+0x204>)
 8009c64:	429d      	cmp	r5, r3
 8009c66:	dc14      	bgt.n	8009c92 <atanf+0x18a>
 8009c68:	f04f 517f 	mov.w	r1, #1069547520	; 0x3fc00000
 8009c6c:	f7f6 fe9e 	bl	80009ac <__aeabi_fsub>
 8009c70:	f04f 517f 	mov.w	r1, #1069547520	; 0x3fc00000
 8009c74:	4605      	mov	r5, r0
 8009c76:	4620      	mov	r0, r4
 8009c78:	f7f6 ffa2 	bl	8000bc0 <__aeabi_fmul>
 8009c7c:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8009c80:	f7f6 fe96 	bl	80009b0 <__addsf3>
 8009c84:	4601      	mov	r1, r0
 8009c86:	4628      	mov	r0, r5
 8009c88:	f7f7 f84e 	bl	8000d28 <__aeabi_fdiv>
 8009c8c:	2602      	movs	r6, #2
 8009c8e:	4604      	mov	r4, r0
 8009c90:	e781      	b.n	8009b96 <atanf+0x8e>
 8009c92:	4601      	mov	r1, r0
 8009c94:	481e      	ldr	r0, [pc, #120]	; (8009d10 <atanf+0x208>)
 8009c96:	f7f7 f847 	bl	8000d28 <__aeabi_fdiv>
 8009c9a:	2603      	movs	r6, #3
 8009c9c:	4604      	mov	r4, r0
 8009c9e:	e77a      	b.n	8009b96 <atanf+0x8e>
 8009ca0:	4b1c      	ldr	r3, [pc, #112]	; (8009d14 <atanf+0x20c>)
 8009ca2:	f853 1026 	ldr.w	r1, [r3, r6, lsl #2]
 8009ca6:	f7f6 fe81 	bl	80009ac <__aeabi_fsub>
 8009caa:	4621      	mov	r1, r4
 8009cac:	f7f6 fe7e 	bl	80009ac <__aeabi_fsub>
 8009cb0:	4b19      	ldr	r3, [pc, #100]	; (8009d18 <atanf+0x210>)
 8009cb2:	4601      	mov	r1, r0
 8009cb4:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8009cb8:	f7f6 fe78 	bl	80009ac <__aeabi_fsub>
 8009cbc:	f1b8 0f00 	cmp.w	r8, #0
 8009cc0:	4604      	mov	r4, r0
 8009cc2:	f6bf af36 	bge.w	8009b32 <atanf+0x2a>
 8009cc6:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 8009cca:	e72c      	b.n	8009b26 <atanf+0x1e>
 8009ccc:	4c13      	ldr	r4, [pc, #76]	; (8009d1c <atanf+0x214>)
 8009cce:	e730      	b.n	8009b32 <atanf+0x2a>
 8009cd0:	bfc90fdb 	.word	0xbfc90fdb
 8009cd4:	3edfffff 	.word	0x3edfffff
 8009cd8:	7149f2ca 	.word	0x7149f2ca
 8009cdc:	3f97ffff 	.word	0x3f97ffff
 8009ce0:	3c8569d7 	.word	0x3c8569d7
 8009ce4:	3d4bda59 	.word	0x3d4bda59
 8009ce8:	3d886b35 	.word	0x3d886b35
 8009cec:	3dba2e6e 	.word	0x3dba2e6e
 8009cf0:	3e124925 	.word	0x3e124925
 8009cf4:	3eaaaaab 	.word	0x3eaaaaab
 8009cf8:	bd15a221 	.word	0xbd15a221
 8009cfc:	3d6ef16b 	.word	0x3d6ef16b
 8009d00:	3d9d8795 	.word	0x3d9d8795
 8009d04:	3de38e38 	.word	0x3de38e38
 8009d08:	3e4ccccd 	.word	0x3e4ccccd
 8009d0c:	401bffff 	.word	0x401bffff
 8009d10:	bf800000 	.word	0xbf800000
 8009d14:	0800a6e4 	.word	0x0800a6e4
 8009d18:	0800a6d4 	.word	0x0800a6d4
 8009d1c:	3fc90fdb 	.word	0x3fc90fdb

08009d20 <fabsf>:
 8009d20:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8009d24:	4770      	bx	lr
	...

08009d28 <__errno>:
 8009d28:	4b01      	ldr	r3, [pc, #4]	; (8009d30 <__errno+0x8>)
 8009d2a:	6818      	ldr	r0, [r3, #0]
 8009d2c:	4770      	bx	lr
 8009d2e:	bf00      	nop
 8009d30:	20000188 	.word	0x20000188

08009d34 <__libc_init_array>:
 8009d34:	b570      	push	{r4, r5, r6, lr}
 8009d36:	2600      	movs	r6, #0
 8009d38:	4d0c      	ldr	r5, [pc, #48]	; (8009d6c <__libc_init_array+0x38>)
 8009d3a:	4c0d      	ldr	r4, [pc, #52]	; (8009d70 <__libc_init_array+0x3c>)
 8009d3c:	1b64      	subs	r4, r4, r5
 8009d3e:	10a4      	asrs	r4, r4, #2
 8009d40:	42a6      	cmp	r6, r4
 8009d42:	d109      	bne.n	8009d58 <__libc_init_array+0x24>
 8009d44:	f000 fc6c 	bl	800a620 <_init>
 8009d48:	2600      	movs	r6, #0
 8009d4a:	4d0a      	ldr	r5, [pc, #40]	; (8009d74 <__libc_init_array+0x40>)
 8009d4c:	4c0a      	ldr	r4, [pc, #40]	; (8009d78 <__libc_init_array+0x44>)
 8009d4e:	1b64      	subs	r4, r4, r5
 8009d50:	10a4      	asrs	r4, r4, #2
 8009d52:	42a6      	cmp	r6, r4
 8009d54:	d105      	bne.n	8009d62 <__libc_init_array+0x2e>
 8009d56:	bd70      	pop	{r4, r5, r6, pc}
 8009d58:	f855 3b04 	ldr.w	r3, [r5], #4
 8009d5c:	4798      	blx	r3
 8009d5e:	3601      	adds	r6, #1
 8009d60:	e7ee      	b.n	8009d40 <__libc_init_array+0xc>
 8009d62:	f855 3b04 	ldr.w	r3, [r5], #4
 8009d66:	4798      	blx	r3
 8009d68:	3601      	adds	r6, #1
 8009d6a:	e7f2      	b.n	8009d52 <__libc_init_array+0x1e>
 8009d6c:	0800a730 	.word	0x0800a730
 8009d70:	0800a730 	.word	0x0800a730
 8009d74:	0800a730 	.word	0x0800a730
 8009d78:	0800a738 	.word	0x0800a738

08009d7c <malloc>:
 8009d7c:	4b02      	ldr	r3, [pc, #8]	; (8009d88 <malloc+0xc>)
 8009d7e:	4601      	mov	r1, r0
 8009d80:	6818      	ldr	r0, [r3, #0]
 8009d82:	f000 b85f 	b.w	8009e44 <_malloc_r>
 8009d86:	bf00      	nop
 8009d88:	20000188 	.word	0x20000188

08009d8c <free>:
 8009d8c:	4b02      	ldr	r3, [pc, #8]	; (8009d98 <free+0xc>)
 8009d8e:	4601      	mov	r1, r0
 8009d90:	6818      	ldr	r0, [r3, #0]
 8009d92:	f000 b80b 	b.w	8009dac <_free_r>
 8009d96:	bf00      	nop
 8009d98:	20000188 	.word	0x20000188

08009d9c <memset>:
 8009d9c:	4603      	mov	r3, r0
 8009d9e:	4402      	add	r2, r0
 8009da0:	4293      	cmp	r3, r2
 8009da2:	d100      	bne.n	8009da6 <memset+0xa>
 8009da4:	4770      	bx	lr
 8009da6:	f803 1b01 	strb.w	r1, [r3], #1
 8009daa:	e7f9      	b.n	8009da0 <memset+0x4>

08009dac <_free_r>:
 8009dac:	b538      	push	{r3, r4, r5, lr}
 8009dae:	4605      	mov	r5, r0
 8009db0:	2900      	cmp	r1, #0
 8009db2:	d043      	beq.n	8009e3c <_free_r+0x90>
 8009db4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009db8:	1f0c      	subs	r4, r1, #4
 8009dba:	2b00      	cmp	r3, #0
 8009dbc:	bfb8      	it	lt
 8009dbe:	18e4      	addlt	r4, r4, r3
 8009dc0:	f000 f8ca 	bl	8009f58 <__malloc_lock>
 8009dc4:	4a1e      	ldr	r2, [pc, #120]	; (8009e40 <_free_r+0x94>)
 8009dc6:	6813      	ldr	r3, [r2, #0]
 8009dc8:	4610      	mov	r0, r2
 8009dca:	b933      	cbnz	r3, 8009dda <_free_r+0x2e>
 8009dcc:	6063      	str	r3, [r4, #4]
 8009dce:	6014      	str	r4, [r2, #0]
 8009dd0:	4628      	mov	r0, r5
 8009dd2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009dd6:	f000 b8c5 	b.w	8009f64 <__malloc_unlock>
 8009dda:	42a3      	cmp	r3, r4
 8009ddc:	d90a      	bls.n	8009df4 <_free_r+0x48>
 8009dde:	6821      	ldr	r1, [r4, #0]
 8009de0:	1862      	adds	r2, r4, r1
 8009de2:	4293      	cmp	r3, r2
 8009de4:	bf01      	itttt	eq
 8009de6:	681a      	ldreq	r2, [r3, #0]
 8009de8:	685b      	ldreq	r3, [r3, #4]
 8009dea:	1852      	addeq	r2, r2, r1
 8009dec:	6022      	streq	r2, [r4, #0]
 8009dee:	6063      	str	r3, [r4, #4]
 8009df0:	6004      	str	r4, [r0, #0]
 8009df2:	e7ed      	b.n	8009dd0 <_free_r+0x24>
 8009df4:	461a      	mov	r2, r3
 8009df6:	685b      	ldr	r3, [r3, #4]
 8009df8:	b10b      	cbz	r3, 8009dfe <_free_r+0x52>
 8009dfa:	42a3      	cmp	r3, r4
 8009dfc:	d9fa      	bls.n	8009df4 <_free_r+0x48>
 8009dfe:	6811      	ldr	r1, [r2, #0]
 8009e00:	1850      	adds	r0, r2, r1
 8009e02:	42a0      	cmp	r0, r4
 8009e04:	d10b      	bne.n	8009e1e <_free_r+0x72>
 8009e06:	6820      	ldr	r0, [r4, #0]
 8009e08:	4401      	add	r1, r0
 8009e0a:	1850      	adds	r0, r2, r1
 8009e0c:	4283      	cmp	r3, r0
 8009e0e:	6011      	str	r1, [r2, #0]
 8009e10:	d1de      	bne.n	8009dd0 <_free_r+0x24>
 8009e12:	6818      	ldr	r0, [r3, #0]
 8009e14:	685b      	ldr	r3, [r3, #4]
 8009e16:	4401      	add	r1, r0
 8009e18:	6011      	str	r1, [r2, #0]
 8009e1a:	6053      	str	r3, [r2, #4]
 8009e1c:	e7d8      	b.n	8009dd0 <_free_r+0x24>
 8009e1e:	d902      	bls.n	8009e26 <_free_r+0x7a>
 8009e20:	230c      	movs	r3, #12
 8009e22:	602b      	str	r3, [r5, #0]
 8009e24:	e7d4      	b.n	8009dd0 <_free_r+0x24>
 8009e26:	6820      	ldr	r0, [r4, #0]
 8009e28:	1821      	adds	r1, r4, r0
 8009e2a:	428b      	cmp	r3, r1
 8009e2c:	bf01      	itttt	eq
 8009e2e:	6819      	ldreq	r1, [r3, #0]
 8009e30:	685b      	ldreq	r3, [r3, #4]
 8009e32:	1809      	addeq	r1, r1, r0
 8009e34:	6021      	streq	r1, [r4, #0]
 8009e36:	6063      	str	r3, [r4, #4]
 8009e38:	6054      	str	r4, [r2, #4]
 8009e3a:	e7c9      	b.n	8009dd0 <_free_r+0x24>
 8009e3c:	bd38      	pop	{r3, r4, r5, pc}
 8009e3e:	bf00      	nop
 8009e40:	2000050c 	.word	0x2000050c

08009e44 <_malloc_r>:
 8009e44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e46:	1ccd      	adds	r5, r1, #3
 8009e48:	f025 0503 	bic.w	r5, r5, #3
 8009e4c:	3508      	adds	r5, #8
 8009e4e:	2d0c      	cmp	r5, #12
 8009e50:	bf38      	it	cc
 8009e52:	250c      	movcc	r5, #12
 8009e54:	2d00      	cmp	r5, #0
 8009e56:	4606      	mov	r6, r0
 8009e58:	db01      	blt.n	8009e5e <_malloc_r+0x1a>
 8009e5a:	42a9      	cmp	r1, r5
 8009e5c:	d903      	bls.n	8009e66 <_malloc_r+0x22>
 8009e5e:	230c      	movs	r3, #12
 8009e60:	6033      	str	r3, [r6, #0]
 8009e62:	2000      	movs	r0, #0
 8009e64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009e66:	f000 f877 	bl	8009f58 <__malloc_lock>
 8009e6a:	4921      	ldr	r1, [pc, #132]	; (8009ef0 <_malloc_r+0xac>)
 8009e6c:	680a      	ldr	r2, [r1, #0]
 8009e6e:	4614      	mov	r4, r2
 8009e70:	b99c      	cbnz	r4, 8009e9a <_malloc_r+0x56>
 8009e72:	4f20      	ldr	r7, [pc, #128]	; (8009ef4 <_malloc_r+0xb0>)
 8009e74:	683b      	ldr	r3, [r7, #0]
 8009e76:	b923      	cbnz	r3, 8009e82 <_malloc_r+0x3e>
 8009e78:	4621      	mov	r1, r4
 8009e7a:	4630      	mov	r0, r6
 8009e7c:	f000 f83c 	bl	8009ef8 <_sbrk_r>
 8009e80:	6038      	str	r0, [r7, #0]
 8009e82:	4629      	mov	r1, r5
 8009e84:	4630      	mov	r0, r6
 8009e86:	f000 f837 	bl	8009ef8 <_sbrk_r>
 8009e8a:	1c43      	adds	r3, r0, #1
 8009e8c:	d123      	bne.n	8009ed6 <_malloc_r+0x92>
 8009e8e:	230c      	movs	r3, #12
 8009e90:	4630      	mov	r0, r6
 8009e92:	6033      	str	r3, [r6, #0]
 8009e94:	f000 f866 	bl	8009f64 <__malloc_unlock>
 8009e98:	e7e3      	b.n	8009e62 <_malloc_r+0x1e>
 8009e9a:	6823      	ldr	r3, [r4, #0]
 8009e9c:	1b5b      	subs	r3, r3, r5
 8009e9e:	d417      	bmi.n	8009ed0 <_malloc_r+0x8c>
 8009ea0:	2b0b      	cmp	r3, #11
 8009ea2:	d903      	bls.n	8009eac <_malloc_r+0x68>
 8009ea4:	6023      	str	r3, [r4, #0]
 8009ea6:	441c      	add	r4, r3
 8009ea8:	6025      	str	r5, [r4, #0]
 8009eaa:	e004      	b.n	8009eb6 <_malloc_r+0x72>
 8009eac:	6863      	ldr	r3, [r4, #4]
 8009eae:	42a2      	cmp	r2, r4
 8009eb0:	bf0c      	ite	eq
 8009eb2:	600b      	streq	r3, [r1, #0]
 8009eb4:	6053      	strne	r3, [r2, #4]
 8009eb6:	4630      	mov	r0, r6
 8009eb8:	f000 f854 	bl	8009f64 <__malloc_unlock>
 8009ebc:	f104 000b 	add.w	r0, r4, #11
 8009ec0:	1d23      	adds	r3, r4, #4
 8009ec2:	f020 0007 	bic.w	r0, r0, #7
 8009ec6:	1ac2      	subs	r2, r0, r3
 8009ec8:	d0cc      	beq.n	8009e64 <_malloc_r+0x20>
 8009eca:	1a1b      	subs	r3, r3, r0
 8009ecc:	50a3      	str	r3, [r4, r2]
 8009ece:	e7c9      	b.n	8009e64 <_malloc_r+0x20>
 8009ed0:	4622      	mov	r2, r4
 8009ed2:	6864      	ldr	r4, [r4, #4]
 8009ed4:	e7cc      	b.n	8009e70 <_malloc_r+0x2c>
 8009ed6:	1cc4      	adds	r4, r0, #3
 8009ed8:	f024 0403 	bic.w	r4, r4, #3
 8009edc:	42a0      	cmp	r0, r4
 8009ede:	d0e3      	beq.n	8009ea8 <_malloc_r+0x64>
 8009ee0:	1a21      	subs	r1, r4, r0
 8009ee2:	4630      	mov	r0, r6
 8009ee4:	f000 f808 	bl	8009ef8 <_sbrk_r>
 8009ee8:	3001      	adds	r0, #1
 8009eea:	d1dd      	bne.n	8009ea8 <_malloc_r+0x64>
 8009eec:	e7cf      	b.n	8009e8e <_malloc_r+0x4a>
 8009eee:	bf00      	nop
 8009ef0:	2000050c 	.word	0x2000050c
 8009ef4:	20000510 	.word	0x20000510

08009ef8 <_sbrk_r>:
 8009ef8:	b538      	push	{r3, r4, r5, lr}
 8009efa:	2300      	movs	r3, #0
 8009efc:	4d05      	ldr	r5, [pc, #20]	; (8009f14 <_sbrk_r+0x1c>)
 8009efe:	4604      	mov	r4, r0
 8009f00:	4608      	mov	r0, r1
 8009f02:	602b      	str	r3, [r5, #0]
 8009f04:	f7f8 fa9a 	bl	800243c <_sbrk>
 8009f08:	1c43      	adds	r3, r0, #1
 8009f0a:	d102      	bne.n	8009f12 <_sbrk_r+0x1a>
 8009f0c:	682b      	ldr	r3, [r5, #0]
 8009f0e:	b103      	cbz	r3, 8009f12 <_sbrk_r+0x1a>
 8009f10:	6023      	str	r3, [r4, #0]
 8009f12:	bd38      	pop	{r3, r4, r5, pc}
 8009f14:	20001ddc 	.word	0x20001ddc

08009f18 <siprintf>:
 8009f18:	b40e      	push	{r1, r2, r3}
 8009f1a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009f1e:	b500      	push	{lr}
 8009f20:	b09c      	sub	sp, #112	; 0x70
 8009f22:	ab1d      	add	r3, sp, #116	; 0x74
 8009f24:	9002      	str	r0, [sp, #8]
 8009f26:	9006      	str	r0, [sp, #24]
 8009f28:	9107      	str	r1, [sp, #28]
 8009f2a:	9104      	str	r1, [sp, #16]
 8009f2c:	4808      	ldr	r0, [pc, #32]	; (8009f50 <siprintf+0x38>)
 8009f2e:	4909      	ldr	r1, [pc, #36]	; (8009f54 <siprintf+0x3c>)
 8009f30:	f853 2b04 	ldr.w	r2, [r3], #4
 8009f34:	9105      	str	r1, [sp, #20]
 8009f36:	6800      	ldr	r0, [r0, #0]
 8009f38:	a902      	add	r1, sp, #8
 8009f3a:	9301      	str	r3, [sp, #4]
 8009f3c:	f000 f874 	bl	800a028 <_svfiprintf_r>
 8009f40:	2200      	movs	r2, #0
 8009f42:	9b02      	ldr	r3, [sp, #8]
 8009f44:	701a      	strb	r2, [r3, #0]
 8009f46:	b01c      	add	sp, #112	; 0x70
 8009f48:	f85d eb04 	ldr.w	lr, [sp], #4
 8009f4c:	b003      	add	sp, #12
 8009f4e:	4770      	bx	lr
 8009f50:	20000188 	.word	0x20000188
 8009f54:	ffff0208 	.word	0xffff0208

08009f58 <__malloc_lock>:
 8009f58:	4801      	ldr	r0, [pc, #4]	; (8009f60 <__malloc_lock+0x8>)
 8009f5a:	f000 bafb 	b.w	800a554 <__retarget_lock_acquire_recursive>
 8009f5e:	bf00      	nop
 8009f60:	20001de4 	.word	0x20001de4

08009f64 <__malloc_unlock>:
 8009f64:	4801      	ldr	r0, [pc, #4]	; (8009f6c <__malloc_unlock+0x8>)
 8009f66:	f000 baf6 	b.w	800a556 <__retarget_lock_release_recursive>
 8009f6a:	bf00      	nop
 8009f6c:	20001de4 	.word	0x20001de4

08009f70 <__ssputs_r>:
 8009f70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009f74:	688e      	ldr	r6, [r1, #8]
 8009f76:	4682      	mov	sl, r0
 8009f78:	429e      	cmp	r6, r3
 8009f7a:	460c      	mov	r4, r1
 8009f7c:	4690      	mov	r8, r2
 8009f7e:	461f      	mov	r7, r3
 8009f80:	d838      	bhi.n	8009ff4 <__ssputs_r+0x84>
 8009f82:	898a      	ldrh	r2, [r1, #12]
 8009f84:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009f88:	d032      	beq.n	8009ff0 <__ssputs_r+0x80>
 8009f8a:	6825      	ldr	r5, [r4, #0]
 8009f8c:	6909      	ldr	r1, [r1, #16]
 8009f8e:	3301      	adds	r3, #1
 8009f90:	eba5 0901 	sub.w	r9, r5, r1
 8009f94:	6965      	ldr	r5, [r4, #20]
 8009f96:	444b      	add	r3, r9
 8009f98:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009f9c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009fa0:	106d      	asrs	r5, r5, #1
 8009fa2:	429d      	cmp	r5, r3
 8009fa4:	bf38      	it	cc
 8009fa6:	461d      	movcc	r5, r3
 8009fa8:	0553      	lsls	r3, r2, #21
 8009faa:	d531      	bpl.n	800a010 <__ssputs_r+0xa0>
 8009fac:	4629      	mov	r1, r5
 8009fae:	f7ff ff49 	bl	8009e44 <_malloc_r>
 8009fb2:	4606      	mov	r6, r0
 8009fb4:	b950      	cbnz	r0, 8009fcc <__ssputs_r+0x5c>
 8009fb6:	230c      	movs	r3, #12
 8009fb8:	f04f 30ff 	mov.w	r0, #4294967295
 8009fbc:	f8ca 3000 	str.w	r3, [sl]
 8009fc0:	89a3      	ldrh	r3, [r4, #12]
 8009fc2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009fc6:	81a3      	strh	r3, [r4, #12]
 8009fc8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009fcc:	464a      	mov	r2, r9
 8009fce:	6921      	ldr	r1, [r4, #16]
 8009fd0:	f000 fad0 	bl	800a574 <memcpy>
 8009fd4:	89a3      	ldrh	r3, [r4, #12]
 8009fd6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009fda:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009fde:	81a3      	strh	r3, [r4, #12]
 8009fe0:	6126      	str	r6, [r4, #16]
 8009fe2:	444e      	add	r6, r9
 8009fe4:	6026      	str	r6, [r4, #0]
 8009fe6:	463e      	mov	r6, r7
 8009fe8:	6165      	str	r5, [r4, #20]
 8009fea:	eba5 0509 	sub.w	r5, r5, r9
 8009fee:	60a5      	str	r5, [r4, #8]
 8009ff0:	42be      	cmp	r6, r7
 8009ff2:	d900      	bls.n	8009ff6 <__ssputs_r+0x86>
 8009ff4:	463e      	mov	r6, r7
 8009ff6:	4632      	mov	r2, r6
 8009ff8:	4641      	mov	r1, r8
 8009ffa:	6820      	ldr	r0, [r4, #0]
 8009ffc:	f000 fac8 	bl	800a590 <memmove>
 800a000:	68a3      	ldr	r3, [r4, #8]
 800a002:	6822      	ldr	r2, [r4, #0]
 800a004:	1b9b      	subs	r3, r3, r6
 800a006:	4432      	add	r2, r6
 800a008:	2000      	movs	r0, #0
 800a00a:	60a3      	str	r3, [r4, #8]
 800a00c:	6022      	str	r2, [r4, #0]
 800a00e:	e7db      	b.n	8009fc8 <__ssputs_r+0x58>
 800a010:	462a      	mov	r2, r5
 800a012:	f000 fad7 	bl	800a5c4 <_realloc_r>
 800a016:	4606      	mov	r6, r0
 800a018:	2800      	cmp	r0, #0
 800a01a:	d1e1      	bne.n	8009fe0 <__ssputs_r+0x70>
 800a01c:	4650      	mov	r0, sl
 800a01e:	6921      	ldr	r1, [r4, #16]
 800a020:	f7ff fec4 	bl	8009dac <_free_r>
 800a024:	e7c7      	b.n	8009fb6 <__ssputs_r+0x46>
	...

0800a028 <_svfiprintf_r>:
 800a028:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a02c:	4698      	mov	r8, r3
 800a02e:	898b      	ldrh	r3, [r1, #12]
 800a030:	4607      	mov	r7, r0
 800a032:	061b      	lsls	r3, r3, #24
 800a034:	460d      	mov	r5, r1
 800a036:	4614      	mov	r4, r2
 800a038:	b09d      	sub	sp, #116	; 0x74
 800a03a:	d50e      	bpl.n	800a05a <_svfiprintf_r+0x32>
 800a03c:	690b      	ldr	r3, [r1, #16]
 800a03e:	b963      	cbnz	r3, 800a05a <_svfiprintf_r+0x32>
 800a040:	2140      	movs	r1, #64	; 0x40
 800a042:	f7ff feff 	bl	8009e44 <_malloc_r>
 800a046:	6028      	str	r0, [r5, #0]
 800a048:	6128      	str	r0, [r5, #16]
 800a04a:	b920      	cbnz	r0, 800a056 <_svfiprintf_r+0x2e>
 800a04c:	230c      	movs	r3, #12
 800a04e:	603b      	str	r3, [r7, #0]
 800a050:	f04f 30ff 	mov.w	r0, #4294967295
 800a054:	e0d1      	b.n	800a1fa <_svfiprintf_r+0x1d2>
 800a056:	2340      	movs	r3, #64	; 0x40
 800a058:	616b      	str	r3, [r5, #20]
 800a05a:	2300      	movs	r3, #0
 800a05c:	9309      	str	r3, [sp, #36]	; 0x24
 800a05e:	2320      	movs	r3, #32
 800a060:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a064:	2330      	movs	r3, #48	; 0x30
 800a066:	f04f 0901 	mov.w	r9, #1
 800a06a:	f8cd 800c 	str.w	r8, [sp, #12]
 800a06e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800a214 <_svfiprintf_r+0x1ec>
 800a072:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a076:	4623      	mov	r3, r4
 800a078:	469a      	mov	sl, r3
 800a07a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a07e:	b10a      	cbz	r2, 800a084 <_svfiprintf_r+0x5c>
 800a080:	2a25      	cmp	r2, #37	; 0x25
 800a082:	d1f9      	bne.n	800a078 <_svfiprintf_r+0x50>
 800a084:	ebba 0b04 	subs.w	fp, sl, r4
 800a088:	d00b      	beq.n	800a0a2 <_svfiprintf_r+0x7a>
 800a08a:	465b      	mov	r3, fp
 800a08c:	4622      	mov	r2, r4
 800a08e:	4629      	mov	r1, r5
 800a090:	4638      	mov	r0, r7
 800a092:	f7ff ff6d 	bl	8009f70 <__ssputs_r>
 800a096:	3001      	adds	r0, #1
 800a098:	f000 80aa 	beq.w	800a1f0 <_svfiprintf_r+0x1c8>
 800a09c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a09e:	445a      	add	r2, fp
 800a0a0:	9209      	str	r2, [sp, #36]	; 0x24
 800a0a2:	f89a 3000 	ldrb.w	r3, [sl]
 800a0a6:	2b00      	cmp	r3, #0
 800a0a8:	f000 80a2 	beq.w	800a1f0 <_svfiprintf_r+0x1c8>
 800a0ac:	2300      	movs	r3, #0
 800a0ae:	f04f 32ff 	mov.w	r2, #4294967295
 800a0b2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a0b6:	f10a 0a01 	add.w	sl, sl, #1
 800a0ba:	9304      	str	r3, [sp, #16]
 800a0bc:	9307      	str	r3, [sp, #28]
 800a0be:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a0c2:	931a      	str	r3, [sp, #104]	; 0x68
 800a0c4:	4654      	mov	r4, sl
 800a0c6:	2205      	movs	r2, #5
 800a0c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a0cc:	4851      	ldr	r0, [pc, #324]	; (800a214 <_svfiprintf_r+0x1ec>)
 800a0ce:	f000 fa43 	bl	800a558 <memchr>
 800a0d2:	9a04      	ldr	r2, [sp, #16]
 800a0d4:	b9d8      	cbnz	r0, 800a10e <_svfiprintf_r+0xe6>
 800a0d6:	06d0      	lsls	r0, r2, #27
 800a0d8:	bf44      	itt	mi
 800a0da:	2320      	movmi	r3, #32
 800a0dc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a0e0:	0711      	lsls	r1, r2, #28
 800a0e2:	bf44      	itt	mi
 800a0e4:	232b      	movmi	r3, #43	; 0x2b
 800a0e6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a0ea:	f89a 3000 	ldrb.w	r3, [sl]
 800a0ee:	2b2a      	cmp	r3, #42	; 0x2a
 800a0f0:	d015      	beq.n	800a11e <_svfiprintf_r+0xf6>
 800a0f2:	4654      	mov	r4, sl
 800a0f4:	2000      	movs	r0, #0
 800a0f6:	f04f 0c0a 	mov.w	ip, #10
 800a0fa:	9a07      	ldr	r2, [sp, #28]
 800a0fc:	4621      	mov	r1, r4
 800a0fe:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a102:	3b30      	subs	r3, #48	; 0x30
 800a104:	2b09      	cmp	r3, #9
 800a106:	d94e      	bls.n	800a1a6 <_svfiprintf_r+0x17e>
 800a108:	b1b0      	cbz	r0, 800a138 <_svfiprintf_r+0x110>
 800a10a:	9207      	str	r2, [sp, #28]
 800a10c:	e014      	b.n	800a138 <_svfiprintf_r+0x110>
 800a10e:	eba0 0308 	sub.w	r3, r0, r8
 800a112:	fa09 f303 	lsl.w	r3, r9, r3
 800a116:	4313      	orrs	r3, r2
 800a118:	46a2      	mov	sl, r4
 800a11a:	9304      	str	r3, [sp, #16]
 800a11c:	e7d2      	b.n	800a0c4 <_svfiprintf_r+0x9c>
 800a11e:	9b03      	ldr	r3, [sp, #12]
 800a120:	1d19      	adds	r1, r3, #4
 800a122:	681b      	ldr	r3, [r3, #0]
 800a124:	9103      	str	r1, [sp, #12]
 800a126:	2b00      	cmp	r3, #0
 800a128:	bfbb      	ittet	lt
 800a12a:	425b      	neglt	r3, r3
 800a12c:	f042 0202 	orrlt.w	r2, r2, #2
 800a130:	9307      	strge	r3, [sp, #28]
 800a132:	9307      	strlt	r3, [sp, #28]
 800a134:	bfb8      	it	lt
 800a136:	9204      	strlt	r2, [sp, #16]
 800a138:	7823      	ldrb	r3, [r4, #0]
 800a13a:	2b2e      	cmp	r3, #46	; 0x2e
 800a13c:	d10c      	bne.n	800a158 <_svfiprintf_r+0x130>
 800a13e:	7863      	ldrb	r3, [r4, #1]
 800a140:	2b2a      	cmp	r3, #42	; 0x2a
 800a142:	d135      	bne.n	800a1b0 <_svfiprintf_r+0x188>
 800a144:	9b03      	ldr	r3, [sp, #12]
 800a146:	3402      	adds	r4, #2
 800a148:	1d1a      	adds	r2, r3, #4
 800a14a:	681b      	ldr	r3, [r3, #0]
 800a14c:	9203      	str	r2, [sp, #12]
 800a14e:	2b00      	cmp	r3, #0
 800a150:	bfb8      	it	lt
 800a152:	f04f 33ff 	movlt.w	r3, #4294967295
 800a156:	9305      	str	r3, [sp, #20]
 800a158:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800a224 <_svfiprintf_r+0x1fc>
 800a15c:	2203      	movs	r2, #3
 800a15e:	4650      	mov	r0, sl
 800a160:	7821      	ldrb	r1, [r4, #0]
 800a162:	f000 f9f9 	bl	800a558 <memchr>
 800a166:	b140      	cbz	r0, 800a17a <_svfiprintf_r+0x152>
 800a168:	2340      	movs	r3, #64	; 0x40
 800a16a:	eba0 000a 	sub.w	r0, r0, sl
 800a16e:	fa03 f000 	lsl.w	r0, r3, r0
 800a172:	9b04      	ldr	r3, [sp, #16]
 800a174:	3401      	adds	r4, #1
 800a176:	4303      	orrs	r3, r0
 800a178:	9304      	str	r3, [sp, #16]
 800a17a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a17e:	2206      	movs	r2, #6
 800a180:	4825      	ldr	r0, [pc, #148]	; (800a218 <_svfiprintf_r+0x1f0>)
 800a182:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a186:	f000 f9e7 	bl	800a558 <memchr>
 800a18a:	2800      	cmp	r0, #0
 800a18c:	d038      	beq.n	800a200 <_svfiprintf_r+0x1d8>
 800a18e:	4b23      	ldr	r3, [pc, #140]	; (800a21c <_svfiprintf_r+0x1f4>)
 800a190:	bb1b      	cbnz	r3, 800a1da <_svfiprintf_r+0x1b2>
 800a192:	9b03      	ldr	r3, [sp, #12]
 800a194:	3307      	adds	r3, #7
 800a196:	f023 0307 	bic.w	r3, r3, #7
 800a19a:	3308      	adds	r3, #8
 800a19c:	9303      	str	r3, [sp, #12]
 800a19e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a1a0:	4433      	add	r3, r6
 800a1a2:	9309      	str	r3, [sp, #36]	; 0x24
 800a1a4:	e767      	b.n	800a076 <_svfiprintf_r+0x4e>
 800a1a6:	460c      	mov	r4, r1
 800a1a8:	2001      	movs	r0, #1
 800a1aa:	fb0c 3202 	mla	r2, ip, r2, r3
 800a1ae:	e7a5      	b.n	800a0fc <_svfiprintf_r+0xd4>
 800a1b0:	2300      	movs	r3, #0
 800a1b2:	f04f 0c0a 	mov.w	ip, #10
 800a1b6:	4619      	mov	r1, r3
 800a1b8:	3401      	adds	r4, #1
 800a1ba:	9305      	str	r3, [sp, #20]
 800a1bc:	4620      	mov	r0, r4
 800a1be:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a1c2:	3a30      	subs	r2, #48	; 0x30
 800a1c4:	2a09      	cmp	r2, #9
 800a1c6:	d903      	bls.n	800a1d0 <_svfiprintf_r+0x1a8>
 800a1c8:	2b00      	cmp	r3, #0
 800a1ca:	d0c5      	beq.n	800a158 <_svfiprintf_r+0x130>
 800a1cc:	9105      	str	r1, [sp, #20]
 800a1ce:	e7c3      	b.n	800a158 <_svfiprintf_r+0x130>
 800a1d0:	4604      	mov	r4, r0
 800a1d2:	2301      	movs	r3, #1
 800a1d4:	fb0c 2101 	mla	r1, ip, r1, r2
 800a1d8:	e7f0      	b.n	800a1bc <_svfiprintf_r+0x194>
 800a1da:	ab03      	add	r3, sp, #12
 800a1dc:	9300      	str	r3, [sp, #0]
 800a1de:	462a      	mov	r2, r5
 800a1e0:	4638      	mov	r0, r7
 800a1e2:	4b0f      	ldr	r3, [pc, #60]	; (800a220 <_svfiprintf_r+0x1f8>)
 800a1e4:	a904      	add	r1, sp, #16
 800a1e6:	f3af 8000 	nop.w
 800a1ea:	1c42      	adds	r2, r0, #1
 800a1ec:	4606      	mov	r6, r0
 800a1ee:	d1d6      	bne.n	800a19e <_svfiprintf_r+0x176>
 800a1f0:	89ab      	ldrh	r3, [r5, #12]
 800a1f2:	065b      	lsls	r3, r3, #25
 800a1f4:	f53f af2c 	bmi.w	800a050 <_svfiprintf_r+0x28>
 800a1f8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a1fa:	b01d      	add	sp, #116	; 0x74
 800a1fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a200:	ab03      	add	r3, sp, #12
 800a202:	9300      	str	r3, [sp, #0]
 800a204:	462a      	mov	r2, r5
 800a206:	4638      	mov	r0, r7
 800a208:	4b05      	ldr	r3, [pc, #20]	; (800a220 <_svfiprintf_r+0x1f8>)
 800a20a:	a904      	add	r1, sp, #16
 800a20c:	f000 f87c 	bl	800a308 <_printf_i>
 800a210:	e7eb      	b.n	800a1ea <_svfiprintf_r+0x1c2>
 800a212:	bf00      	nop
 800a214:	0800a6f4 	.word	0x0800a6f4
 800a218:	0800a6fe 	.word	0x0800a6fe
 800a21c:	00000000 	.word	0x00000000
 800a220:	08009f71 	.word	0x08009f71
 800a224:	0800a6fa 	.word	0x0800a6fa

0800a228 <_printf_common>:
 800a228:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a22c:	4616      	mov	r6, r2
 800a22e:	4699      	mov	r9, r3
 800a230:	688a      	ldr	r2, [r1, #8]
 800a232:	690b      	ldr	r3, [r1, #16]
 800a234:	4607      	mov	r7, r0
 800a236:	4293      	cmp	r3, r2
 800a238:	bfb8      	it	lt
 800a23a:	4613      	movlt	r3, r2
 800a23c:	6033      	str	r3, [r6, #0]
 800a23e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a242:	460c      	mov	r4, r1
 800a244:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a248:	b10a      	cbz	r2, 800a24e <_printf_common+0x26>
 800a24a:	3301      	adds	r3, #1
 800a24c:	6033      	str	r3, [r6, #0]
 800a24e:	6823      	ldr	r3, [r4, #0]
 800a250:	0699      	lsls	r1, r3, #26
 800a252:	bf42      	ittt	mi
 800a254:	6833      	ldrmi	r3, [r6, #0]
 800a256:	3302      	addmi	r3, #2
 800a258:	6033      	strmi	r3, [r6, #0]
 800a25a:	6825      	ldr	r5, [r4, #0]
 800a25c:	f015 0506 	ands.w	r5, r5, #6
 800a260:	d106      	bne.n	800a270 <_printf_common+0x48>
 800a262:	f104 0a19 	add.w	sl, r4, #25
 800a266:	68e3      	ldr	r3, [r4, #12]
 800a268:	6832      	ldr	r2, [r6, #0]
 800a26a:	1a9b      	subs	r3, r3, r2
 800a26c:	42ab      	cmp	r3, r5
 800a26e:	dc28      	bgt.n	800a2c2 <_printf_common+0x9a>
 800a270:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a274:	1e13      	subs	r3, r2, #0
 800a276:	6822      	ldr	r2, [r4, #0]
 800a278:	bf18      	it	ne
 800a27a:	2301      	movne	r3, #1
 800a27c:	0692      	lsls	r2, r2, #26
 800a27e:	d42d      	bmi.n	800a2dc <_printf_common+0xb4>
 800a280:	4649      	mov	r1, r9
 800a282:	4638      	mov	r0, r7
 800a284:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a288:	47c0      	blx	r8
 800a28a:	3001      	adds	r0, #1
 800a28c:	d020      	beq.n	800a2d0 <_printf_common+0xa8>
 800a28e:	6823      	ldr	r3, [r4, #0]
 800a290:	68e5      	ldr	r5, [r4, #12]
 800a292:	f003 0306 	and.w	r3, r3, #6
 800a296:	2b04      	cmp	r3, #4
 800a298:	bf18      	it	ne
 800a29a:	2500      	movne	r5, #0
 800a29c:	6832      	ldr	r2, [r6, #0]
 800a29e:	f04f 0600 	mov.w	r6, #0
 800a2a2:	68a3      	ldr	r3, [r4, #8]
 800a2a4:	bf08      	it	eq
 800a2a6:	1aad      	subeq	r5, r5, r2
 800a2a8:	6922      	ldr	r2, [r4, #16]
 800a2aa:	bf08      	it	eq
 800a2ac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a2b0:	4293      	cmp	r3, r2
 800a2b2:	bfc4      	itt	gt
 800a2b4:	1a9b      	subgt	r3, r3, r2
 800a2b6:	18ed      	addgt	r5, r5, r3
 800a2b8:	341a      	adds	r4, #26
 800a2ba:	42b5      	cmp	r5, r6
 800a2bc:	d11a      	bne.n	800a2f4 <_printf_common+0xcc>
 800a2be:	2000      	movs	r0, #0
 800a2c0:	e008      	b.n	800a2d4 <_printf_common+0xac>
 800a2c2:	2301      	movs	r3, #1
 800a2c4:	4652      	mov	r2, sl
 800a2c6:	4649      	mov	r1, r9
 800a2c8:	4638      	mov	r0, r7
 800a2ca:	47c0      	blx	r8
 800a2cc:	3001      	adds	r0, #1
 800a2ce:	d103      	bne.n	800a2d8 <_printf_common+0xb0>
 800a2d0:	f04f 30ff 	mov.w	r0, #4294967295
 800a2d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a2d8:	3501      	adds	r5, #1
 800a2da:	e7c4      	b.n	800a266 <_printf_common+0x3e>
 800a2dc:	2030      	movs	r0, #48	; 0x30
 800a2de:	18e1      	adds	r1, r4, r3
 800a2e0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a2e4:	1c5a      	adds	r2, r3, #1
 800a2e6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a2ea:	4422      	add	r2, r4
 800a2ec:	3302      	adds	r3, #2
 800a2ee:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a2f2:	e7c5      	b.n	800a280 <_printf_common+0x58>
 800a2f4:	2301      	movs	r3, #1
 800a2f6:	4622      	mov	r2, r4
 800a2f8:	4649      	mov	r1, r9
 800a2fa:	4638      	mov	r0, r7
 800a2fc:	47c0      	blx	r8
 800a2fe:	3001      	adds	r0, #1
 800a300:	d0e6      	beq.n	800a2d0 <_printf_common+0xa8>
 800a302:	3601      	adds	r6, #1
 800a304:	e7d9      	b.n	800a2ba <_printf_common+0x92>
	...

0800a308 <_printf_i>:
 800a308:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a30c:	460c      	mov	r4, r1
 800a30e:	7e27      	ldrb	r7, [r4, #24]
 800a310:	4691      	mov	r9, r2
 800a312:	2f78      	cmp	r7, #120	; 0x78
 800a314:	4680      	mov	r8, r0
 800a316:	469a      	mov	sl, r3
 800a318:	990c      	ldr	r1, [sp, #48]	; 0x30
 800a31a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a31e:	d807      	bhi.n	800a330 <_printf_i+0x28>
 800a320:	2f62      	cmp	r7, #98	; 0x62
 800a322:	d80a      	bhi.n	800a33a <_printf_i+0x32>
 800a324:	2f00      	cmp	r7, #0
 800a326:	f000 80d9 	beq.w	800a4dc <_printf_i+0x1d4>
 800a32a:	2f58      	cmp	r7, #88	; 0x58
 800a32c:	f000 80a4 	beq.w	800a478 <_printf_i+0x170>
 800a330:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800a334:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a338:	e03a      	b.n	800a3b0 <_printf_i+0xa8>
 800a33a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a33e:	2b15      	cmp	r3, #21
 800a340:	d8f6      	bhi.n	800a330 <_printf_i+0x28>
 800a342:	a001      	add	r0, pc, #4	; (adr r0, 800a348 <_printf_i+0x40>)
 800a344:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800a348:	0800a3a1 	.word	0x0800a3a1
 800a34c:	0800a3b5 	.word	0x0800a3b5
 800a350:	0800a331 	.word	0x0800a331
 800a354:	0800a331 	.word	0x0800a331
 800a358:	0800a331 	.word	0x0800a331
 800a35c:	0800a331 	.word	0x0800a331
 800a360:	0800a3b5 	.word	0x0800a3b5
 800a364:	0800a331 	.word	0x0800a331
 800a368:	0800a331 	.word	0x0800a331
 800a36c:	0800a331 	.word	0x0800a331
 800a370:	0800a331 	.word	0x0800a331
 800a374:	0800a4c3 	.word	0x0800a4c3
 800a378:	0800a3e5 	.word	0x0800a3e5
 800a37c:	0800a4a5 	.word	0x0800a4a5
 800a380:	0800a331 	.word	0x0800a331
 800a384:	0800a331 	.word	0x0800a331
 800a388:	0800a4e5 	.word	0x0800a4e5
 800a38c:	0800a331 	.word	0x0800a331
 800a390:	0800a3e5 	.word	0x0800a3e5
 800a394:	0800a331 	.word	0x0800a331
 800a398:	0800a331 	.word	0x0800a331
 800a39c:	0800a4ad 	.word	0x0800a4ad
 800a3a0:	680b      	ldr	r3, [r1, #0]
 800a3a2:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800a3a6:	1d1a      	adds	r2, r3, #4
 800a3a8:	681b      	ldr	r3, [r3, #0]
 800a3aa:	600a      	str	r2, [r1, #0]
 800a3ac:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a3b0:	2301      	movs	r3, #1
 800a3b2:	e0a4      	b.n	800a4fe <_printf_i+0x1f6>
 800a3b4:	6825      	ldr	r5, [r4, #0]
 800a3b6:	6808      	ldr	r0, [r1, #0]
 800a3b8:	062e      	lsls	r6, r5, #24
 800a3ba:	f100 0304 	add.w	r3, r0, #4
 800a3be:	d50a      	bpl.n	800a3d6 <_printf_i+0xce>
 800a3c0:	6805      	ldr	r5, [r0, #0]
 800a3c2:	600b      	str	r3, [r1, #0]
 800a3c4:	2d00      	cmp	r5, #0
 800a3c6:	da03      	bge.n	800a3d0 <_printf_i+0xc8>
 800a3c8:	232d      	movs	r3, #45	; 0x2d
 800a3ca:	426d      	negs	r5, r5
 800a3cc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a3d0:	230a      	movs	r3, #10
 800a3d2:	485e      	ldr	r0, [pc, #376]	; (800a54c <_printf_i+0x244>)
 800a3d4:	e019      	b.n	800a40a <_printf_i+0x102>
 800a3d6:	f015 0f40 	tst.w	r5, #64	; 0x40
 800a3da:	6805      	ldr	r5, [r0, #0]
 800a3dc:	600b      	str	r3, [r1, #0]
 800a3de:	bf18      	it	ne
 800a3e0:	b22d      	sxthne	r5, r5
 800a3e2:	e7ef      	b.n	800a3c4 <_printf_i+0xbc>
 800a3e4:	680b      	ldr	r3, [r1, #0]
 800a3e6:	6825      	ldr	r5, [r4, #0]
 800a3e8:	1d18      	adds	r0, r3, #4
 800a3ea:	6008      	str	r0, [r1, #0]
 800a3ec:	0628      	lsls	r0, r5, #24
 800a3ee:	d501      	bpl.n	800a3f4 <_printf_i+0xec>
 800a3f0:	681d      	ldr	r5, [r3, #0]
 800a3f2:	e002      	b.n	800a3fa <_printf_i+0xf2>
 800a3f4:	0669      	lsls	r1, r5, #25
 800a3f6:	d5fb      	bpl.n	800a3f0 <_printf_i+0xe8>
 800a3f8:	881d      	ldrh	r5, [r3, #0]
 800a3fa:	2f6f      	cmp	r7, #111	; 0x6f
 800a3fc:	bf0c      	ite	eq
 800a3fe:	2308      	moveq	r3, #8
 800a400:	230a      	movne	r3, #10
 800a402:	4852      	ldr	r0, [pc, #328]	; (800a54c <_printf_i+0x244>)
 800a404:	2100      	movs	r1, #0
 800a406:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a40a:	6866      	ldr	r6, [r4, #4]
 800a40c:	2e00      	cmp	r6, #0
 800a40e:	bfa8      	it	ge
 800a410:	6821      	ldrge	r1, [r4, #0]
 800a412:	60a6      	str	r6, [r4, #8]
 800a414:	bfa4      	itt	ge
 800a416:	f021 0104 	bicge.w	r1, r1, #4
 800a41a:	6021      	strge	r1, [r4, #0]
 800a41c:	b90d      	cbnz	r5, 800a422 <_printf_i+0x11a>
 800a41e:	2e00      	cmp	r6, #0
 800a420:	d04d      	beq.n	800a4be <_printf_i+0x1b6>
 800a422:	4616      	mov	r6, r2
 800a424:	fbb5 f1f3 	udiv	r1, r5, r3
 800a428:	fb03 5711 	mls	r7, r3, r1, r5
 800a42c:	5dc7      	ldrb	r7, [r0, r7]
 800a42e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a432:	462f      	mov	r7, r5
 800a434:	42bb      	cmp	r3, r7
 800a436:	460d      	mov	r5, r1
 800a438:	d9f4      	bls.n	800a424 <_printf_i+0x11c>
 800a43a:	2b08      	cmp	r3, #8
 800a43c:	d10b      	bne.n	800a456 <_printf_i+0x14e>
 800a43e:	6823      	ldr	r3, [r4, #0]
 800a440:	07df      	lsls	r7, r3, #31
 800a442:	d508      	bpl.n	800a456 <_printf_i+0x14e>
 800a444:	6923      	ldr	r3, [r4, #16]
 800a446:	6861      	ldr	r1, [r4, #4]
 800a448:	4299      	cmp	r1, r3
 800a44a:	bfde      	ittt	le
 800a44c:	2330      	movle	r3, #48	; 0x30
 800a44e:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a452:	f106 36ff 	addle.w	r6, r6, #4294967295
 800a456:	1b92      	subs	r2, r2, r6
 800a458:	6122      	str	r2, [r4, #16]
 800a45a:	464b      	mov	r3, r9
 800a45c:	4621      	mov	r1, r4
 800a45e:	4640      	mov	r0, r8
 800a460:	f8cd a000 	str.w	sl, [sp]
 800a464:	aa03      	add	r2, sp, #12
 800a466:	f7ff fedf 	bl	800a228 <_printf_common>
 800a46a:	3001      	adds	r0, #1
 800a46c:	d14c      	bne.n	800a508 <_printf_i+0x200>
 800a46e:	f04f 30ff 	mov.w	r0, #4294967295
 800a472:	b004      	add	sp, #16
 800a474:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a478:	4834      	ldr	r0, [pc, #208]	; (800a54c <_printf_i+0x244>)
 800a47a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800a47e:	680e      	ldr	r6, [r1, #0]
 800a480:	6823      	ldr	r3, [r4, #0]
 800a482:	f856 5b04 	ldr.w	r5, [r6], #4
 800a486:	061f      	lsls	r7, r3, #24
 800a488:	600e      	str	r6, [r1, #0]
 800a48a:	d514      	bpl.n	800a4b6 <_printf_i+0x1ae>
 800a48c:	07d9      	lsls	r1, r3, #31
 800a48e:	bf44      	itt	mi
 800a490:	f043 0320 	orrmi.w	r3, r3, #32
 800a494:	6023      	strmi	r3, [r4, #0]
 800a496:	b91d      	cbnz	r5, 800a4a0 <_printf_i+0x198>
 800a498:	6823      	ldr	r3, [r4, #0]
 800a49a:	f023 0320 	bic.w	r3, r3, #32
 800a49e:	6023      	str	r3, [r4, #0]
 800a4a0:	2310      	movs	r3, #16
 800a4a2:	e7af      	b.n	800a404 <_printf_i+0xfc>
 800a4a4:	6823      	ldr	r3, [r4, #0]
 800a4a6:	f043 0320 	orr.w	r3, r3, #32
 800a4aa:	6023      	str	r3, [r4, #0]
 800a4ac:	2378      	movs	r3, #120	; 0x78
 800a4ae:	4828      	ldr	r0, [pc, #160]	; (800a550 <_printf_i+0x248>)
 800a4b0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a4b4:	e7e3      	b.n	800a47e <_printf_i+0x176>
 800a4b6:	065e      	lsls	r6, r3, #25
 800a4b8:	bf48      	it	mi
 800a4ba:	b2ad      	uxthmi	r5, r5
 800a4bc:	e7e6      	b.n	800a48c <_printf_i+0x184>
 800a4be:	4616      	mov	r6, r2
 800a4c0:	e7bb      	b.n	800a43a <_printf_i+0x132>
 800a4c2:	680b      	ldr	r3, [r1, #0]
 800a4c4:	6826      	ldr	r6, [r4, #0]
 800a4c6:	1d1d      	adds	r5, r3, #4
 800a4c8:	6960      	ldr	r0, [r4, #20]
 800a4ca:	600d      	str	r5, [r1, #0]
 800a4cc:	0635      	lsls	r5, r6, #24
 800a4ce:	681b      	ldr	r3, [r3, #0]
 800a4d0:	d501      	bpl.n	800a4d6 <_printf_i+0x1ce>
 800a4d2:	6018      	str	r0, [r3, #0]
 800a4d4:	e002      	b.n	800a4dc <_printf_i+0x1d4>
 800a4d6:	0671      	lsls	r1, r6, #25
 800a4d8:	d5fb      	bpl.n	800a4d2 <_printf_i+0x1ca>
 800a4da:	8018      	strh	r0, [r3, #0]
 800a4dc:	2300      	movs	r3, #0
 800a4de:	4616      	mov	r6, r2
 800a4e0:	6123      	str	r3, [r4, #16]
 800a4e2:	e7ba      	b.n	800a45a <_printf_i+0x152>
 800a4e4:	680b      	ldr	r3, [r1, #0]
 800a4e6:	1d1a      	adds	r2, r3, #4
 800a4e8:	600a      	str	r2, [r1, #0]
 800a4ea:	681e      	ldr	r6, [r3, #0]
 800a4ec:	2100      	movs	r1, #0
 800a4ee:	4630      	mov	r0, r6
 800a4f0:	6862      	ldr	r2, [r4, #4]
 800a4f2:	f000 f831 	bl	800a558 <memchr>
 800a4f6:	b108      	cbz	r0, 800a4fc <_printf_i+0x1f4>
 800a4f8:	1b80      	subs	r0, r0, r6
 800a4fa:	6060      	str	r0, [r4, #4]
 800a4fc:	6863      	ldr	r3, [r4, #4]
 800a4fe:	6123      	str	r3, [r4, #16]
 800a500:	2300      	movs	r3, #0
 800a502:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a506:	e7a8      	b.n	800a45a <_printf_i+0x152>
 800a508:	4632      	mov	r2, r6
 800a50a:	4649      	mov	r1, r9
 800a50c:	4640      	mov	r0, r8
 800a50e:	6923      	ldr	r3, [r4, #16]
 800a510:	47d0      	blx	sl
 800a512:	3001      	adds	r0, #1
 800a514:	d0ab      	beq.n	800a46e <_printf_i+0x166>
 800a516:	6823      	ldr	r3, [r4, #0]
 800a518:	079b      	lsls	r3, r3, #30
 800a51a:	d413      	bmi.n	800a544 <_printf_i+0x23c>
 800a51c:	68e0      	ldr	r0, [r4, #12]
 800a51e:	9b03      	ldr	r3, [sp, #12]
 800a520:	4298      	cmp	r0, r3
 800a522:	bfb8      	it	lt
 800a524:	4618      	movlt	r0, r3
 800a526:	e7a4      	b.n	800a472 <_printf_i+0x16a>
 800a528:	2301      	movs	r3, #1
 800a52a:	4632      	mov	r2, r6
 800a52c:	4649      	mov	r1, r9
 800a52e:	4640      	mov	r0, r8
 800a530:	47d0      	blx	sl
 800a532:	3001      	adds	r0, #1
 800a534:	d09b      	beq.n	800a46e <_printf_i+0x166>
 800a536:	3501      	adds	r5, #1
 800a538:	68e3      	ldr	r3, [r4, #12]
 800a53a:	9903      	ldr	r1, [sp, #12]
 800a53c:	1a5b      	subs	r3, r3, r1
 800a53e:	42ab      	cmp	r3, r5
 800a540:	dcf2      	bgt.n	800a528 <_printf_i+0x220>
 800a542:	e7eb      	b.n	800a51c <_printf_i+0x214>
 800a544:	2500      	movs	r5, #0
 800a546:	f104 0619 	add.w	r6, r4, #25
 800a54a:	e7f5      	b.n	800a538 <_printf_i+0x230>
 800a54c:	0800a705 	.word	0x0800a705
 800a550:	0800a716 	.word	0x0800a716

0800a554 <__retarget_lock_acquire_recursive>:
 800a554:	4770      	bx	lr

0800a556 <__retarget_lock_release_recursive>:
 800a556:	4770      	bx	lr

0800a558 <memchr>:
 800a558:	4603      	mov	r3, r0
 800a55a:	b510      	push	{r4, lr}
 800a55c:	b2c9      	uxtb	r1, r1
 800a55e:	4402      	add	r2, r0
 800a560:	4293      	cmp	r3, r2
 800a562:	4618      	mov	r0, r3
 800a564:	d101      	bne.n	800a56a <memchr+0x12>
 800a566:	2000      	movs	r0, #0
 800a568:	e003      	b.n	800a572 <memchr+0x1a>
 800a56a:	7804      	ldrb	r4, [r0, #0]
 800a56c:	3301      	adds	r3, #1
 800a56e:	428c      	cmp	r4, r1
 800a570:	d1f6      	bne.n	800a560 <memchr+0x8>
 800a572:	bd10      	pop	{r4, pc}

0800a574 <memcpy>:
 800a574:	440a      	add	r2, r1
 800a576:	4291      	cmp	r1, r2
 800a578:	f100 33ff 	add.w	r3, r0, #4294967295
 800a57c:	d100      	bne.n	800a580 <memcpy+0xc>
 800a57e:	4770      	bx	lr
 800a580:	b510      	push	{r4, lr}
 800a582:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a586:	4291      	cmp	r1, r2
 800a588:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a58c:	d1f9      	bne.n	800a582 <memcpy+0xe>
 800a58e:	bd10      	pop	{r4, pc}

0800a590 <memmove>:
 800a590:	4288      	cmp	r0, r1
 800a592:	b510      	push	{r4, lr}
 800a594:	eb01 0402 	add.w	r4, r1, r2
 800a598:	d902      	bls.n	800a5a0 <memmove+0x10>
 800a59a:	4284      	cmp	r4, r0
 800a59c:	4623      	mov	r3, r4
 800a59e:	d807      	bhi.n	800a5b0 <memmove+0x20>
 800a5a0:	1e43      	subs	r3, r0, #1
 800a5a2:	42a1      	cmp	r1, r4
 800a5a4:	d008      	beq.n	800a5b8 <memmove+0x28>
 800a5a6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a5aa:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a5ae:	e7f8      	b.n	800a5a2 <memmove+0x12>
 800a5b0:	4601      	mov	r1, r0
 800a5b2:	4402      	add	r2, r0
 800a5b4:	428a      	cmp	r2, r1
 800a5b6:	d100      	bne.n	800a5ba <memmove+0x2a>
 800a5b8:	bd10      	pop	{r4, pc}
 800a5ba:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a5be:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a5c2:	e7f7      	b.n	800a5b4 <memmove+0x24>

0800a5c4 <_realloc_r>:
 800a5c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a5c6:	4607      	mov	r7, r0
 800a5c8:	4614      	mov	r4, r2
 800a5ca:	460e      	mov	r6, r1
 800a5cc:	b921      	cbnz	r1, 800a5d8 <_realloc_r+0x14>
 800a5ce:	4611      	mov	r1, r2
 800a5d0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800a5d4:	f7ff bc36 	b.w	8009e44 <_malloc_r>
 800a5d8:	b922      	cbnz	r2, 800a5e4 <_realloc_r+0x20>
 800a5da:	f7ff fbe7 	bl	8009dac <_free_r>
 800a5de:	4625      	mov	r5, r4
 800a5e0:	4628      	mov	r0, r5
 800a5e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a5e4:	f000 f814 	bl	800a610 <_malloc_usable_size_r>
 800a5e8:	42a0      	cmp	r0, r4
 800a5ea:	d20f      	bcs.n	800a60c <_realloc_r+0x48>
 800a5ec:	4621      	mov	r1, r4
 800a5ee:	4638      	mov	r0, r7
 800a5f0:	f7ff fc28 	bl	8009e44 <_malloc_r>
 800a5f4:	4605      	mov	r5, r0
 800a5f6:	2800      	cmp	r0, #0
 800a5f8:	d0f2      	beq.n	800a5e0 <_realloc_r+0x1c>
 800a5fa:	4631      	mov	r1, r6
 800a5fc:	4622      	mov	r2, r4
 800a5fe:	f7ff ffb9 	bl	800a574 <memcpy>
 800a602:	4631      	mov	r1, r6
 800a604:	4638      	mov	r0, r7
 800a606:	f7ff fbd1 	bl	8009dac <_free_r>
 800a60a:	e7e9      	b.n	800a5e0 <_realloc_r+0x1c>
 800a60c:	4635      	mov	r5, r6
 800a60e:	e7e7      	b.n	800a5e0 <_realloc_r+0x1c>

0800a610 <_malloc_usable_size_r>:
 800a610:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a614:	1f18      	subs	r0, r3, #4
 800a616:	2b00      	cmp	r3, #0
 800a618:	bfbc      	itt	lt
 800a61a:	580b      	ldrlt	r3, [r1, r0]
 800a61c:	18c0      	addlt	r0, r0, r3
 800a61e:	4770      	bx	lr

0800a620 <_init>:
 800a620:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a622:	bf00      	nop
 800a624:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a626:	bc08      	pop	{r3}
 800a628:	469e      	mov	lr, r3
 800a62a:	4770      	bx	lr

0800a62c <_fini>:
 800a62c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a62e:	bf00      	nop
 800a630:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a632:	bc08      	pop	{r3}
 800a634:	469e      	mov	lr, r3
 800a636:	4770      	bx	lr
