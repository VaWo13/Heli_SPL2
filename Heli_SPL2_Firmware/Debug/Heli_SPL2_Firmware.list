
Heli_SPL2_Firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000184  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011050  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000ef4  080111d8  080111d8  000211d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080120cc  080120cc  00030378  2**0
                  CONTENTS
  4 .ARM          00000008  080120cc  080120cc  000220cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080120d4  080120d4  00030378  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   0000000c  080120d4  080120d4  000220d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080120e0  080120e0  000220e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000378  20000000  080120e4  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001e08  20000378  0801245c  00030378  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002180  0801245c  00032180  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00030378  2**0
                  CONTENTS, READONLY
 12 .debug_info   00040935  00000000  00000000  000303a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005709  00000000  00000000  00070cd6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001fb8  00000000  00000000  000763e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001de8  00000000  00000000  00078398  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028b4e  00000000  00000000  0007a180  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000234e3  00000000  00000000  000a2cce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cd542  00000000  00000000  000c61b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001936f3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009dd8  00000000  00000000  00193748  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000378 	.word	0x20000378
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080111c0 	.word	0x080111c0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000037c 	.word	0x2000037c
 80001c4:	080111c0 	.word	0x080111c0

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmpun>:
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x10>
 8000a8e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a92:	d10a      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000a94:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	d102      	bne.n	8000aa4 <__aeabi_dcmpun+0x20>
 8000a9e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aa2:	d102      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	f04f 0001 	mov.w	r0, #1
 8000aae:	4770      	bx	lr

08000ab0 <__aeabi_d2iz>:
 8000ab0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ab4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ab8:	d215      	bcs.n	8000ae6 <__aeabi_d2iz+0x36>
 8000aba:	d511      	bpl.n	8000ae0 <__aeabi_d2iz+0x30>
 8000abc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ac0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ac4:	d912      	bls.n	8000aec <__aeabi_d2iz+0x3c>
 8000ac6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aca:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ace:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ad2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ad6:	fa23 f002 	lsr.w	r0, r3, r2
 8000ada:	bf18      	it	ne
 8000adc:	4240      	negne	r0, r0
 8000ade:	4770      	bx	lr
 8000ae0:	f04f 0000 	mov.w	r0, #0
 8000ae4:	4770      	bx	lr
 8000ae6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aea:	d105      	bne.n	8000af8 <__aeabi_d2iz+0x48>
 8000aec:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000af0:	bf08      	it	eq
 8000af2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000af6:	4770      	bx	lr
 8000af8:	f04f 0000 	mov.w	r0, #0
 8000afc:	4770      	bx	lr
 8000afe:	bf00      	nop

08000b00 <__aeabi_d2uiz>:
 8000b00:	004a      	lsls	r2, r1, #1
 8000b02:	d211      	bcs.n	8000b28 <__aeabi_d2uiz+0x28>
 8000b04:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b08:	d211      	bcs.n	8000b2e <__aeabi_d2uiz+0x2e>
 8000b0a:	d50d      	bpl.n	8000b28 <__aeabi_d2uiz+0x28>
 8000b0c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b10:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b14:	d40e      	bmi.n	8000b34 <__aeabi_d2uiz+0x34>
 8000b16:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b1a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b1e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b22:	fa23 f002 	lsr.w	r0, r3, r2
 8000b26:	4770      	bx	lr
 8000b28:	f04f 0000 	mov.w	r0, #0
 8000b2c:	4770      	bx	lr
 8000b2e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b32:	d102      	bne.n	8000b3a <__aeabi_d2uiz+0x3a>
 8000b34:	f04f 30ff 	mov.w	r0, #4294967295
 8000b38:	4770      	bx	lr
 8000b3a:	f04f 0000 	mov.w	r0, #0
 8000b3e:	4770      	bx	lr

08000b40 <__aeabi_d2f>:
 8000b40:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b44:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b48:	bf24      	itt	cs
 8000b4a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b4e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b52:	d90d      	bls.n	8000b70 <__aeabi_d2f+0x30>
 8000b54:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b58:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b5c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b60:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b64:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b68:	bf08      	it	eq
 8000b6a:	f020 0001 	biceq.w	r0, r0, #1
 8000b6e:	4770      	bx	lr
 8000b70:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b74:	d121      	bne.n	8000bba <__aeabi_d2f+0x7a>
 8000b76:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b7a:	bfbc      	itt	lt
 8000b7c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b80:	4770      	bxlt	lr
 8000b82:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b86:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b8a:	f1c2 0218 	rsb	r2, r2, #24
 8000b8e:	f1c2 0c20 	rsb	ip, r2, #32
 8000b92:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b96:	fa20 f002 	lsr.w	r0, r0, r2
 8000b9a:	bf18      	it	ne
 8000b9c:	f040 0001 	orrne.w	r0, r0, #1
 8000ba0:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba4:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ba8:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bac:	ea40 000c 	orr.w	r0, r0, ip
 8000bb0:	fa23 f302 	lsr.w	r3, r3, r2
 8000bb4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bb8:	e7cc      	b.n	8000b54 <__aeabi_d2f+0x14>
 8000bba:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bbe:	d107      	bne.n	8000bd0 <__aeabi_d2f+0x90>
 8000bc0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bc4:	bf1e      	ittt	ne
 8000bc6:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000bca:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000bce:	4770      	bxne	lr
 8000bd0:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000bd4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bd8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bdc:	4770      	bx	lr
 8000bde:	bf00      	nop

08000be0 <__aeabi_frsub>:
 8000be0:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000be4:	e002      	b.n	8000bec <__addsf3>
 8000be6:	bf00      	nop

08000be8 <__aeabi_fsub>:
 8000be8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000bec <__addsf3>:
 8000bec:	0042      	lsls	r2, r0, #1
 8000bee:	bf1f      	itttt	ne
 8000bf0:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000bf4:	ea92 0f03 	teqne	r2, r3
 8000bf8:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000bfc:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c00:	d06a      	beq.n	8000cd8 <__addsf3+0xec>
 8000c02:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000c06:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000c0a:	bfc1      	itttt	gt
 8000c0c:	18d2      	addgt	r2, r2, r3
 8000c0e:	4041      	eorgt	r1, r0
 8000c10:	4048      	eorgt	r0, r1
 8000c12:	4041      	eorgt	r1, r0
 8000c14:	bfb8      	it	lt
 8000c16:	425b      	neglt	r3, r3
 8000c18:	2b19      	cmp	r3, #25
 8000c1a:	bf88      	it	hi
 8000c1c:	4770      	bxhi	lr
 8000c1e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000c22:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c26:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000c2a:	bf18      	it	ne
 8000c2c:	4240      	negne	r0, r0
 8000c2e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000c32:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000c36:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000c3a:	bf18      	it	ne
 8000c3c:	4249      	negne	r1, r1
 8000c3e:	ea92 0f03 	teq	r2, r3
 8000c42:	d03f      	beq.n	8000cc4 <__addsf3+0xd8>
 8000c44:	f1a2 0201 	sub.w	r2, r2, #1
 8000c48:	fa41 fc03 	asr.w	ip, r1, r3
 8000c4c:	eb10 000c 	adds.w	r0, r0, ip
 8000c50:	f1c3 0320 	rsb	r3, r3, #32
 8000c54:	fa01 f103 	lsl.w	r1, r1, r3
 8000c58:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c5c:	d502      	bpl.n	8000c64 <__addsf3+0x78>
 8000c5e:	4249      	negs	r1, r1
 8000c60:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c64:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000c68:	d313      	bcc.n	8000c92 <__addsf3+0xa6>
 8000c6a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000c6e:	d306      	bcc.n	8000c7e <__addsf3+0x92>
 8000c70:	0840      	lsrs	r0, r0, #1
 8000c72:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c76:	f102 0201 	add.w	r2, r2, #1
 8000c7a:	2afe      	cmp	r2, #254	; 0xfe
 8000c7c:	d251      	bcs.n	8000d22 <__addsf3+0x136>
 8000c7e:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c82:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c86:	bf08      	it	eq
 8000c88:	f020 0001 	biceq.w	r0, r0, #1
 8000c8c:	ea40 0003 	orr.w	r0, r0, r3
 8000c90:	4770      	bx	lr
 8000c92:	0049      	lsls	r1, r1, #1
 8000c94:	eb40 0000 	adc.w	r0, r0, r0
 8000c98:	3a01      	subs	r2, #1
 8000c9a:	bf28      	it	cs
 8000c9c:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000ca0:	d2ed      	bcs.n	8000c7e <__addsf3+0x92>
 8000ca2:	fab0 fc80 	clz	ip, r0
 8000ca6:	f1ac 0c08 	sub.w	ip, ip, #8
 8000caa:	ebb2 020c 	subs.w	r2, r2, ip
 8000cae:	fa00 f00c 	lsl.w	r0, r0, ip
 8000cb2:	bfaa      	itet	ge
 8000cb4:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000cb8:	4252      	neglt	r2, r2
 8000cba:	4318      	orrge	r0, r3
 8000cbc:	bfbc      	itt	lt
 8000cbe:	40d0      	lsrlt	r0, r2
 8000cc0:	4318      	orrlt	r0, r3
 8000cc2:	4770      	bx	lr
 8000cc4:	f092 0f00 	teq	r2, #0
 8000cc8:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000ccc:	bf06      	itte	eq
 8000cce:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000cd2:	3201      	addeq	r2, #1
 8000cd4:	3b01      	subne	r3, #1
 8000cd6:	e7b5      	b.n	8000c44 <__addsf3+0x58>
 8000cd8:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000cdc:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000ce0:	bf18      	it	ne
 8000ce2:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ce6:	d021      	beq.n	8000d2c <__addsf3+0x140>
 8000ce8:	ea92 0f03 	teq	r2, r3
 8000cec:	d004      	beq.n	8000cf8 <__addsf3+0x10c>
 8000cee:	f092 0f00 	teq	r2, #0
 8000cf2:	bf08      	it	eq
 8000cf4:	4608      	moveq	r0, r1
 8000cf6:	4770      	bx	lr
 8000cf8:	ea90 0f01 	teq	r0, r1
 8000cfc:	bf1c      	itt	ne
 8000cfe:	2000      	movne	r0, #0
 8000d00:	4770      	bxne	lr
 8000d02:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000d06:	d104      	bne.n	8000d12 <__addsf3+0x126>
 8000d08:	0040      	lsls	r0, r0, #1
 8000d0a:	bf28      	it	cs
 8000d0c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000d10:	4770      	bx	lr
 8000d12:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000d16:	bf3c      	itt	cc
 8000d18:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000d1c:	4770      	bxcc	lr
 8000d1e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000d22:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000d26:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d2a:	4770      	bx	lr
 8000d2c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000d30:	bf16      	itet	ne
 8000d32:	4608      	movne	r0, r1
 8000d34:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000d38:	4601      	movne	r1, r0
 8000d3a:	0242      	lsls	r2, r0, #9
 8000d3c:	bf06      	itte	eq
 8000d3e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000d42:	ea90 0f01 	teqeq	r0, r1
 8000d46:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000d4a:	4770      	bx	lr

08000d4c <__aeabi_ui2f>:
 8000d4c:	f04f 0300 	mov.w	r3, #0
 8000d50:	e004      	b.n	8000d5c <__aeabi_i2f+0x8>
 8000d52:	bf00      	nop

08000d54 <__aeabi_i2f>:
 8000d54:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000d58:	bf48      	it	mi
 8000d5a:	4240      	negmi	r0, r0
 8000d5c:	ea5f 0c00 	movs.w	ip, r0
 8000d60:	bf08      	it	eq
 8000d62:	4770      	bxeq	lr
 8000d64:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000d68:	4601      	mov	r1, r0
 8000d6a:	f04f 0000 	mov.w	r0, #0
 8000d6e:	e01c      	b.n	8000daa <__aeabi_l2f+0x2a>

08000d70 <__aeabi_ul2f>:
 8000d70:	ea50 0201 	orrs.w	r2, r0, r1
 8000d74:	bf08      	it	eq
 8000d76:	4770      	bxeq	lr
 8000d78:	f04f 0300 	mov.w	r3, #0
 8000d7c:	e00a      	b.n	8000d94 <__aeabi_l2f+0x14>
 8000d7e:	bf00      	nop

08000d80 <__aeabi_l2f>:
 8000d80:	ea50 0201 	orrs.w	r2, r0, r1
 8000d84:	bf08      	it	eq
 8000d86:	4770      	bxeq	lr
 8000d88:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d8c:	d502      	bpl.n	8000d94 <__aeabi_l2f+0x14>
 8000d8e:	4240      	negs	r0, r0
 8000d90:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d94:	ea5f 0c01 	movs.w	ip, r1
 8000d98:	bf02      	ittt	eq
 8000d9a:	4684      	moveq	ip, r0
 8000d9c:	4601      	moveq	r1, r0
 8000d9e:	2000      	moveq	r0, #0
 8000da0:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000da4:	bf08      	it	eq
 8000da6:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000daa:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000dae:	fabc f28c 	clz	r2, ip
 8000db2:	3a08      	subs	r2, #8
 8000db4:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000db8:	db10      	blt.n	8000ddc <__aeabi_l2f+0x5c>
 8000dba:	fa01 fc02 	lsl.w	ip, r1, r2
 8000dbe:	4463      	add	r3, ip
 8000dc0:	fa00 fc02 	lsl.w	ip, r0, r2
 8000dc4:	f1c2 0220 	rsb	r2, r2, #32
 8000dc8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000dcc:	fa20 f202 	lsr.w	r2, r0, r2
 8000dd0:	eb43 0002 	adc.w	r0, r3, r2
 8000dd4:	bf08      	it	eq
 8000dd6:	f020 0001 	biceq.w	r0, r0, #1
 8000dda:	4770      	bx	lr
 8000ddc:	f102 0220 	add.w	r2, r2, #32
 8000de0:	fa01 fc02 	lsl.w	ip, r1, r2
 8000de4:	f1c2 0220 	rsb	r2, r2, #32
 8000de8:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000dec:	fa21 f202 	lsr.w	r2, r1, r2
 8000df0:	eb43 0002 	adc.w	r0, r3, r2
 8000df4:	bf08      	it	eq
 8000df6:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000dfa:	4770      	bx	lr

08000dfc <__aeabi_fmul>:
 8000dfc:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e00:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e04:	bf1e      	ittt	ne
 8000e06:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e0a:	ea92 0f0c 	teqne	r2, ip
 8000e0e:	ea93 0f0c 	teqne	r3, ip
 8000e12:	d06f      	beq.n	8000ef4 <__aeabi_fmul+0xf8>
 8000e14:	441a      	add	r2, r3
 8000e16:	ea80 0c01 	eor.w	ip, r0, r1
 8000e1a:	0240      	lsls	r0, r0, #9
 8000e1c:	bf18      	it	ne
 8000e1e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000e22:	d01e      	beq.n	8000e62 <__aeabi_fmul+0x66>
 8000e24:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000e28:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000e2c:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000e30:	fba0 3101 	umull	r3, r1, r0, r1
 8000e34:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e38:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000e3c:	bf3e      	ittt	cc
 8000e3e:	0049      	lslcc	r1, r1, #1
 8000e40:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000e44:	005b      	lslcc	r3, r3, #1
 8000e46:	ea40 0001 	orr.w	r0, r0, r1
 8000e4a:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000e4e:	2afd      	cmp	r2, #253	; 0xfd
 8000e50:	d81d      	bhi.n	8000e8e <__aeabi_fmul+0x92>
 8000e52:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000e56:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e5a:	bf08      	it	eq
 8000e5c:	f020 0001 	biceq.w	r0, r0, #1
 8000e60:	4770      	bx	lr
 8000e62:	f090 0f00 	teq	r0, #0
 8000e66:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000e6a:	bf08      	it	eq
 8000e6c:	0249      	lsleq	r1, r1, #9
 8000e6e:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000e72:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000e76:	3a7f      	subs	r2, #127	; 0x7f
 8000e78:	bfc2      	ittt	gt
 8000e7a:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e7e:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e82:	4770      	bxgt	lr
 8000e84:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e88:	f04f 0300 	mov.w	r3, #0
 8000e8c:	3a01      	subs	r2, #1
 8000e8e:	dc5d      	bgt.n	8000f4c <__aeabi_fmul+0x150>
 8000e90:	f112 0f19 	cmn.w	r2, #25
 8000e94:	bfdc      	itt	le
 8000e96:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e9a:	4770      	bxle	lr
 8000e9c:	f1c2 0200 	rsb	r2, r2, #0
 8000ea0:	0041      	lsls	r1, r0, #1
 8000ea2:	fa21 f102 	lsr.w	r1, r1, r2
 8000ea6:	f1c2 0220 	rsb	r2, r2, #32
 8000eaa:	fa00 fc02 	lsl.w	ip, r0, r2
 8000eae:	ea5f 0031 	movs.w	r0, r1, rrx
 8000eb2:	f140 0000 	adc.w	r0, r0, #0
 8000eb6:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000eba:	bf08      	it	eq
 8000ebc:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ec0:	4770      	bx	lr
 8000ec2:	f092 0f00 	teq	r2, #0
 8000ec6:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000eca:	bf02      	ittt	eq
 8000ecc:	0040      	lsleq	r0, r0, #1
 8000ece:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000ed2:	3a01      	subeq	r2, #1
 8000ed4:	d0f9      	beq.n	8000eca <__aeabi_fmul+0xce>
 8000ed6:	ea40 000c 	orr.w	r0, r0, ip
 8000eda:	f093 0f00 	teq	r3, #0
 8000ede:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ee2:	bf02      	ittt	eq
 8000ee4:	0049      	lsleq	r1, r1, #1
 8000ee6:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000eea:	3b01      	subeq	r3, #1
 8000eec:	d0f9      	beq.n	8000ee2 <__aeabi_fmul+0xe6>
 8000eee:	ea41 010c 	orr.w	r1, r1, ip
 8000ef2:	e78f      	b.n	8000e14 <__aeabi_fmul+0x18>
 8000ef4:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000ef8:	ea92 0f0c 	teq	r2, ip
 8000efc:	bf18      	it	ne
 8000efe:	ea93 0f0c 	teqne	r3, ip
 8000f02:	d00a      	beq.n	8000f1a <__aeabi_fmul+0x11e>
 8000f04:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f08:	bf18      	it	ne
 8000f0a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f0e:	d1d8      	bne.n	8000ec2 <__aeabi_fmul+0xc6>
 8000f10:	ea80 0001 	eor.w	r0, r0, r1
 8000f14:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000f18:	4770      	bx	lr
 8000f1a:	f090 0f00 	teq	r0, #0
 8000f1e:	bf17      	itett	ne
 8000f20:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000f24:	4608      	moveq	r0, r1
 8000f26:	f091 0f00 	teqne	r1, #0
 8000f2a:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000f2e:	d014      	beq.n	8000f5a <__aeabi_fmul+0x15e>
 8000f30:	ea92 0f0c 	teq	r2, ip
 8000f34:	d101      	bne.n	8000f3a <__aeabi_fmul+0x13e>
 8000f36:	0242      	lsls	r2, r0, #9
 8000f38:	d10f      	bne.n	8000f5a <__aeabi_fmul+0x15e>
 8000f3a:	ea93 0f0c 	teq	r3, ip
 8000f3e:	d103      	bne.n	8000f48 <__aeabi_fmul+0x14c>
 8000f40:	024b      	lsls	r3, r1, #9
 8000f42:	bf18      	it	ne
 8000f44:	4608      	movne	r0, r1
 8000f46:	d108      	bne.n	8000f5a <__aeabi_fmul+0x15e>
 8000f48:	ea80 0001 	eor.w	r0, r0, r1
 8000f4c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000f50:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000f54:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f58:	4770      	bx	lr
 8000f5a:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000f5e:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000f62:	4770      	bx	lr

08000f64 <__aeabi_fdiv>:
 8000f64:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000f68:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000f6c:	bf1e      	ittt	ne
 8000f6e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000f72:	ea92 0f0c 	teqne	r2, ip
 8000f76:	ea93 0f0c 	teqne	r3, ip
 8000f7a:	d069      	beq.n	8001050 <__aeabi_fdiv+0xec>
 8000f7c:	eba2 0203 	sub.w	r2, r2, r3
 8000f80:	ea80 0c01 	eor.w	ip, r0, r1
 8000f84:	0249      	lsls	r1, r1, #9
 8000f86:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f8a:	d037      	beq.n	8000ffc <__aeabi_fdiv+0x98>
 8000f8c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f90:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f94:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f98:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f9c:	428b      	cmp	r3, r1
 8000f9e:	bf38      	it	cc
 8000fa0:	005b      	lslcc	r3, r3, #1
 8000fa2:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000fa6:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000faa:	428b      	cmp	r3, r1
 8000fac:	bf24      	itt	cs
 8000fae:	1a5b      	subcs	r3, r3, r1
 8000fb0:	ea40 000c 	orrcs.w	r0, r0, ip
 8000fb4:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000fb8:	bf24      	itt	cs
 8000fba:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000fbe:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000fc2:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000fc6:	bf24      	itt	cs
 8000fc8:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000fcc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000fd0:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000fd4:	bf24      	itt	cs
 8000fd6:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000fda:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000fde:	011b      	lsls	r3, r3, #4
 8000fe0:	bf18      	it	ne
 8000fe2:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000fe6:	d1e0      	bne.n	8000faa <__aeabi_fdiv+0x46>
 8000fe8:	2afd      	cmp	r2, #253	; 0xfd
 8000fea:	f63f af50 	bhi.w	8000e8e <__aeabi_fmul+0x92>
 8000fee:	428b      	cmp	r3, r1
 8000ff0:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000ff4:	bf08      	it	eq
 8000ff6:	f020 0001 	biceq.w	r0, r0, #1
 8000ffa:	4770      	bx	lr
 8000ffc:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8001000:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8001004:	327f      	adds	r2, #127	; 0x7f
 8001006:	bfc2      	ittt	gt
 8001008:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 800100c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8001010:	4770      	bxgt	lr
 8001012:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8001016:	f04f 0300 	mov.w	r3, #0
 800101a:	3a01      	subs	r2, #1
 800101c:	e737      	b.n	8000e8e <__aeabi_fmul+0x92>
 800101e:	f092 0f00 	teq	r2, #0
 8001022:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8001026:	bf02      	ittt	eq
 8001028:	0040      	lsleq	r0, r0, #1
 800102a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800102e:	3a01      	subeq	r2, #1
 8001030:	d0f9      	beq.n	8001026 <__aeabi_fdiv+0xc2>
 8001032:	ea40 000c 	orr.w	r0, r0, ip
 8001036:	f093 0f00 	teq	r3, #0
 800103a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800103e:	bf02      	ittt	eq
 8001040:	0049      	lsleq	r1, r1, #1
 8001042:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8001046:	3b01      	subeq	r3, #1
 8001048:	d0f9      	beq.n	800103e <__aeabi_fdiv+0xda>
 800104a:	ea41 010c 	orr.w	r1, r1, ip
 800104e:	e795      	b.n	8000f7c <__aeabi_fdiv+0x18>
 8001050:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8001054:	ea92 0f0c 	teq	r2, ip
 8001058:	d108      	bne.n	800106c <__aeabi_fdiv+0x108>
 800105a:	0242      	lsls	r2, r0, #9
 800105c:	f47f af7d 	bne.w	8000f5a <__aeabi_fmul+0x15e>
 8001060:	ea93 0f0c 	teq	r3, ip
 8001064:	f47f af70 	bne.w	8000f48 <__aeabi_fmul+0x14c>
 8001068:	4608      	mov	r0, r1
 800106a:	e776      	b.n	8000f5a <__aeabi_fmul+0x15e>
 800106c:	ea93 0f0c 	teq	r3, ip
 8001070:	d104      	bne.n	800107c <__aeabi_fdiv+0x118>
 8001072:	024b      	lsls	r3, r1, #9
 8001074:	f43f af4c 	beq.w	8000f10 <__aeabi_fmul+0x114>
 8001078:	4608      	mov	r0, r1
 800107a:	e76e      	b.n	8000f5a <__aeabi_fmul+0x15e>
 800107c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8001080:	bf18      	it	ne
 8001082:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8001086:	d1ca      	bne.n	800101e <__aeabi_fdiv+0xba>
 8001088:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 800108c:	f47f af5c 	bne.w	8000f48 <__aeabi_fmul+0x14c>
 8001090:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8001094:	f47f af3c 	bne.w	8000f10 <__aeabi_fmul+0x114>
 8001098:	e75f      	b.n	8000f5a <__aeabi_fmul+0x15e>
 800109a:	bf00      	nop

0800109c <__gesf2>:
 800109c:	f04f 3cff 	mov.w	ip, #4294967295
 80010a0:	e006      	b.n	80010b0 <__cmpsf2+0x4>
 80010a2:	bf00      	nop

080010a4 <__lesf2>:
 80010a4:	f04f 0c01 	mov.w	ip, #1
 80010a8:	e002      	b.n	80010b0 <__cmpsf2+0x4>
 80010aa:	bf00      	nop

080010ac <__cmpsf2>:
 80010ac:	f04f 0c01 	mov.w	ip, #1
 80010b0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80010b4:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80010b8:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80010bc:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80010c0:	bf18      	it	ne
 80010c2:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80010c6:	d011      	beq.n	80010ec <__cmpsf2+0x40>
 80010c8:	b001      	add	sp, #4
 80010ca:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 80010ce:	bf18      	it	ne
 80010d0:	ea90 0f01 	teqne	r0, r1
 80010d4:	bf58      	it	pl
 80010d6:	ebb2 0003 	subspl.w	r0, r2, r3
 80010da:	bf88      	it	hi
 80010dc:	17c8      	asrhi	r0, r1, #31
 80010de:	bf38      	it	cc
 80010e0:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 80010e4:	bf18      	it	ne
 80010e6:	f040 0001 	orrne.w	r0, r0, #1
 80010ea:	4770      	bx	lr
 80010ec:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80010f0:	d102      	bne.n	80010f8 <__cmpsf2+0x4c>
 80010f2:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 80010f6:	d105      	bne.n	8001104 <__cmpsf2+0x58>
 80010f8:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 80010fc:	d1e4      	bne.n	80010c8 <__cmpsf2+0x1c>
 80010fe:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8001102:	d0e1      	beq.n	80010c8 <__cmpsf2+0x1c>
 8001104:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001108:	4770      	bx	lr
 800110a:	bf00      	nop

0800110c <__aeabi_cfrcmple>:
 800110c:	4684      	mov	ip, r0
 800110e:	4608      	mov	r0, r1
 8001110:	4661      	mov	r1, ip
 8001112:	e7ff      	b.n	8001114 <__aeabi_cfcmpeq>

08001114 <__aeabi_cfcmpeq>:
 8001114:	b50f      	push	{r0, r1, r2, r3, lr}
 8001116:	f7ff ffc9 	bl	80010ac <__cmpsf2>
 800111a:	2800      	cmp	r0, #0
 800111c:	bf48      	it	mi
 800111e:	f110 0f00 	cmnmi.w	r0, #0
 8001122:	bd0f      	pop	{r0, r1, r2, r3, pc}

08001124 <__aeabi_fcmpeq>:
 8001124:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001128:	f7ff fff4 	bl	8001114 <__aeabi_cfcmpeq>
 800112c:	bf0c      	ite	eq
 800112e:	2001      	moveq	r0, #1
 8001130:	2000      	movne	r0, #0
 8001132:	f85d fb08 	ldr.w	pc, [sp], #8
 8001136:	bf00      	nop

08001138 <__aeabi_fcmplt>:
 8001138:	f84d ed08 	str.w	lr, [sp, #-8]!
 800113c:	f7ff ffea 	bl	8001114 <__aeabi_cfcmpeq>
 8001140:	bf34      	ite	cc
 8001142:	2001      	movcc	r0, #1
 8001144:	2000      	movcs	r0, #0
 8001146:	f85d fb08 	ldr.w	pc, [sp], #8
 800114a:	bf00      	nop

0800114c <__aeabi_fcmple>:
 800114c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001150:	f7ff ffe0 	bl	8001114 <__aeabi_cfcmpeq>
 8001154:	bf94      	ite	ls
 8001156:	2001      	movls	r0, #1
 8001158:	2000      	movhi	r0, #0
 800115a:	f85d fb08 	ldr.w	pc, [sp], #8
 800115e:	bf00      	nop

08001160 <__aeabi_fcmpge>:
 8001160:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001164:	f7ff ffd2 	bl	800110c <__aeabi_cfrcmple>
 8001168:	bf94      	ite	ls
 800116a:	2001      	movls	r0, #1
 800116c:	2000      	movhi	r0, #0
 800116e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001172:	bf00      	nop

08001174 <__aeabi_fcmpgt>:
 8001174:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001178:	f7ff ffc8 	bl	800110c <__aeabi_cfrcmple>
 800117c:	bf34      	ite	cc
 800117e:	2001      	movcc	r0, #1
 8001180:	2000      	movcs	r0, #0
 8001182:	f85d fb08 	ldr.w	pc, [sp], #8
 8001186:	bf00      	nop

08001188 <__aeabi_fcmpun>:
 8001188:	ea4f 0240 	mov.w	r2, r0, lsl #1
 800118c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001190:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001194:	d102      	bne.n	800119c <__aeabi_fcmpun+0x14>
 8001196:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800119a:	d108      	bne.n	80011ae <__aeabi_fcmpun+0x26>
 800119c:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 80011a0:	d102      	bne.n	80011a8 <__aeabi_fcmpun+0x20>
 80011a2:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 80011a6:	d102      	bne.n	80011ae <__aeabi_fcmpun+0x26>
 80011a8:	f04f 0000 	mov.w	r0, #0
 80011ac:	4770      	bx	lr
 80011ae:	f04f 0001 	mov.w	r0, #1
 80011b2:	4770      	bx	lr

080011b4 <__aeabi_f2iz>:
 80011b4:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80011b8:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80011bc:	d30f      	bcc.n	80011de <__aeabi_f2iz+0x2a>
 80011be:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80011c2:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80011c6:	d90d      	bls.n	80011e4 <__aeabi_f2iz+0x30>
 80011c8:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80011cc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80011d0:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80011d4:	fa23 f002 	lsr.w	r0, r3, r2
 80011d8:	bf18      	it	ne
 80011da:	4240      	negne	r0, r0
 80011dc:	4770      	bx	lr
 80011de:	f04f 0000 	mov.w	r0, #0
 80011e2:	4770      	bx	lr
 80011e4:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80011e8:	d101      	bne.n	80011ee <__aeabi_f2iz+0x3a>
 80011ea:	0242      	lsls	r2, r0, #9
 80011ec:	d105      	bne.n	80011fa <__aeabi_f2iz+0x46>
 80011ee:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 80011f2:	bf08      	it	eq
 80011f4:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80011f8:	4770      	bx	lr
 80011fa:	f04f 0000 	mov.w	r0, #0
 80011fe:	4770      	bx	lr

08001200 <__aeabi_f2uiz>:
 8001200:	0042      	lsls	r2, r0, #1
 8001202:	d20e      	bcs.n	8001222 <__aeabi_f2uiz+0x22>
 8001204:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001208:	d30b      	bcc.n	8001222 <__aeabi_f2uiz+0x22>
 800120a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800120e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001212:	d409      	bmi.n	8001228 <__aeabi_f2uiz+0x28>
 8001214:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001218:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800121c:	fa23 f002 	lsr.w	r0, r3, r2
 8001220:	4770      	bx	lr
 8001222:	f04f 0000 	mov.w	r0, #0
 8001226:	4770      	bx	lr
 8001228:	f112 0f61 	cmn.w	r2, #97	; 0x61
 800122c:	d101      	bne.n	8001232 <__aeabi_f2uiz+0x32>
 800122e:	0242      	lsls	r2, r0, #9
 8001230:	d102      	bne.n	8001238 <__aeabi_f2uiz+0x38>
 8001232:	f04f 30ff 	mov.w	r0, #4294967295
 8001236:	4770      	bx	lr
 8001238:	f04f 0000 	mov.w	r0, #0
 800123c:	4770      	bx	lr
 800123e:	bf00      	nop

08001240 <__aeabi_uldivmod>:
 8001240:	b953      	cbnz	r3, 8001258 <__aeabi_uldivmod+0x18>
 8001242:	b94a      	cbnz	r2, 8001258 <__aeabi_uldivmod+0x18>
 8001244:	2900      	cmp	r1, #0
 8001246:	bf08      	it	eq
 8001248:	2800      	cmpeq	r0, #0
 800124a:	bf1c      	itt	ne
 800124c:	f04f 31ff 	movne.w	r1, #4294967295
 8001250:	f04f 30ff 	movne.w	r0, #4294967295
 8001254:	f000 b96e 	b.w	8001534 <__aeabi_idiv0>
 8001258:	f1ad 0c08 	sub.w	ip, sp, #8
 800125c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8001260:	f000 f806 	bl	8001270 <__udivmoddi4>
 8001264:	f8dd e004 	ldr.w	lr, [sp, #4]
 8001268:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800126c:	b004      	add	sp, #16
 800126e:	4770      	bx	lr

08001270 <__udivmoddi4>:
 8001270:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001274:	9e08      	ldr	r6, [sp, #32]
 8001276:	460d      	mov	r5, r1
 8001278:	4604      	mov	r4, r0
 800127a:	468e      	mov	lr, r1
 800127c:	2b00      	cmp	r3, #0
 800127e:	f040 8083 	bne.w	8001388 <__udivmoddi4+0x118>
 8001282:	428a      	cmp	r2, r1
 8001284:	4617      	mov	r7, r2
 8001286:	d947      	bls.n	8001318 <__udivmoddi4+0xa8>
 8001288:	fab2 f382 	clz	r3, r2
 800128c:	b14b      	cbz	r3, 80012a2 <__udivmoddi4+0x32>
 800128e:	f1c3 0120 	rsb	r1, r3, #32
 8001292:	fa05 fe03 	lsl.w	lr, r5, r3
 8001296:	fa20 f101 	lsr.w	r1, r0, r1
 800129a:	409f      	lsls	r7, r3
 800129c:	ea41 0e0e 	orr.w	lr, r1, lr
 80012a0:	409c      	lsls	r4, r3
 80012a2:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80012a6:	fbbe fcf8 	udiv	ip, lr, r8
 80012aa:	fa1f f987 	uxth.w	r9, r7
 80012ae:	fb08 e21c 	mls	r2, r8, ip, lr
 80012b2:	fb0c f009 	mul.w	r0, ip, r9
 80012b6:	0c21      	lsrs	r1, r4, #16
 80012b8:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
 80012bc:	4290      	cmp	r0, r2
 80012be:	d90a      	bls.n	80012d6 <__udivmoddi4+0x66>
 80012c0:	18ba      	adds	r2, r7, r2
 80012c2:	f10c 31ff 	add.w	r1, ip, #4294967295
 80012c6:	f080 8118 	bcs.w	80014fa <__udivmoddi4+0x28a>
 80012ca:	4290      	cmp	r0, r2
 80012cc:	f240 8115 	bls.w	80014fa <__udivmoddi4+0x28a>
 80012d0:	f1ac 0c02 	sub.w	ip, ip, #2
 80012d4:	443a      	add	r2, r7
 80012d6:	1a12      	subs	r2, r2, r0
 80012d8:	fbb2 f0f8 	udiv	r0, r2, r8
 80012dc:	fb08 2210 	mls	r2, r8, r0, r2
 80012e0:	fb00 f109 	mul.w	r1, r0, r9
 80012e4:	b2a4      	uxth	r4, r4
 80012e6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80012ea:	42a1      	cmp	r1, r4
 80012ec:	d909      	bls.n	8001302 <__udivmoddi4+0x92>
 80012ee:	193c      	adds	r4, r7, r4
 80012f0:	f100 32ff 	add.w	r2, r0, #4294967295
 80012f4:	f080 8103 	bcs.w	80014fe <__udivmoddi4+0x28e>
 80012f8:	42a1      	cmp	r1, r4
 80012fa:	f240 8100 	bls.w	80014fe <__udivmoddi4+0x28e>
 80012fe:	3802      	subs	r0, #2
 8001300:	443c      	add	r4, r7
 8001302:	1a64      	subs	r4, r4, r1
 8001304:	2100      	movs	r1, #0
 8001306:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800130a:	b11e      	cbz	r6, 8001314 <__udivmoddi4+0xa4>
 800130c:	2200      	movs	r2, #0
 800130e:	40dc      	lsrs	r4, r3
 8001310:	e9c6 4200 	strd	r4, r2, [r6]
 8001314:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001318:	b902      	cbnz	r2, 800131c <__udivmoddi4+0xac>
 800131a:	deff      	udf	#255	; 0xff
 800131c:	fab2 f382 	clz	r3, r2
 8001320:	2b00      	cmp	r3, #0
 8001322:	d14f      	bne.n	80013c4 <__udivmoddi4+0x154>
 8001324:	1a8d      	subs	r5, r1, r2
 8001326:	2101      	movs	r1, #1
 8001328:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800132c:	fa1f f882 	uxth.w	r8, r2
 8001330:	fbb5 fcfe 	udiv	ip, r5, lr
 8001334:	fb0e 551c 	mls	r5, lr, ip, r5
 8001338:	fb08 f00c 	mul.w	r0, r8, ip
 800133c:	0c22      	lsrs	r2, r4, #16
 800133e:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
 8001342:	42a8      	cmp	r0, r5
 8001344:	d907      	bls.n	8001356 <__udivmoddi4+0xe6>
 8001346:	197d      	adds	r5, r7, r5
 8001348:	f10c 32ff 	add.w	r2, ip, #4294967295
 800134c:	d202      	bcs.n	8001354 <__udivmoddi4+0xe4>
 800134e:	42a8      	cmp	r0, r5
 8001350:	f200 80e9 	bhi.w	8001526 <__udivmoddi4+0x2b6>
 8001354:	4694      	mov	ip, r2
 8001356:	1a2d      	subs	r5, r5, r0
 8001358:	fbb5 f0fe 	udiv	r0, r5, lr
 800135c:	fb0e 5510 	mls	r5, lr, r0, r5
 8001360:	fb08 f800 	mul.w	r8, r8, r0
 8001364:	b2a4      	uxth	r4, r4
 8001366:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800136a:	45a0      	cmp	r8, r4
 800136c:	d907      	bls.n	800137e <__udivmoddi4+0x10e>
 800136e:	193c      	adds	r4, r7, r4
 8001370:	f100 32ff 	add.w	r2, r0, #4294967295
 8001374:	d202      	bcs.n	800137c <__udivmoddi4+0x10c>
 8001376:	45a0      	cmp	r8, r4
 8001378:	f200 80d9 	bhi.w	800152e <__udivmoddi4+0x2be>
 800137c:	4610      	mov	r0, r2
 800137e:	eba4 0408 	sub.w	r4, r4, r8
 8001382:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8001386:	e7c0      	b.n	800130a <__udivmoddi4+0x9a>
 8001388:	428b      	cmp	r3, r1
 800138a:	d908      	bls.n	800139e <__udivmoddi4+0x12e>
 800138c:	2e00      	cmp	r6, #0
 800138e:	f000 80b1 	beq.w	80014f4 <__udivmoddi4+0x284>
 8001392:	2100      	movs	r1, #0
 8001394:	e9c6 0500 	strd	r0, r5, [r6]
 8001398:	4608      	mov	r0, r1
 800139a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800139e:	fab3 f183 	clz	r1, r3
 80013a2:	2900      	cmp	r1, #0
 80013a4:	d14b      	bne.n	800143e <__udivmoddi4+0x1ce>
 80013a6:	42ab      	cmp	r3, r5
 80013a8:	d302      	bcc.n	80013b0 <__udivmoddi4+0x140>
 80013aa:	4282      	cmp	r2, r0
 80013ac:	f200 80b9 	bhi.w	8001522 <__udivmoddi4+0x2b2>
 80013b0:	1a84      	subs	r4, r0, r2
 80013b2:	eb65 0303 	sbc.w	r3, r5, r3
 80013b6:	2001      	movs	r0, #1
 80013b8:	469e      	mov	lr, r3
 80013ba:	2e00      	cmp	r6, #0
 80013bc:	d0aa      	beq.n	8001314 <__udivmoddi4+0xa4>
 80013be:	e9c6 4e00 	strd	r4, lr, [r6]
 80013c2:	e7a7      	b.n	8001314 <__udivmoddi4+0xa4>
 80013c4:	409f      	lsls	r7, r3
 80013c6:	f1c3 0220 	rsb	r2, r3, #32
 80013ca:	40d1      	lsrs	r1, r2
 80013cc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80013d0:	fbb1 f0fe 	udiv	r0, r1, lr
 80013d4:	fa1f f887 	uxth.w	r8, r7
 80013d8:	fb0e 1110 	mls	r1, lr, r0, r1
 80013dc:	fa24 f202 	lsr.w	r2, r4, r2
 80013e0:	409d      	lsls	r5, r3
 80013e2:	fb00 fc08 	mul.w	ip, r0, r8
 80013e6:	432a      	orrs	r2, r5
 80013e8:	0c15      	lsrs	r5, r2, #16
 80013ea:	ea45 4501 	orr.w	r5, r5, r1, lsl #16
 80013ee:	45ac      	cmp	ip, r5
 80013f0:	fa04 f403 	lsl.w	r4, r4, r3
 80013f4:	d909      	bls.n	800140a <__udivmoddi4+0x19a>
 80013f6:	197d      	adds	r5, r7, r5
 80013f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80013fc:	f080 808f 	bcs.w	800151e <__udivmoddi4+0x2ae>
 8001400:	45ac      	cmp	ip, r5
 8001402:	f240 808c 	bls.w	800151e <__udivmoddi4+0x2ae>
 8001406:	3802      	subs	r0, #2
 8001408:	443d      	add	r5, r7
 800140a:	eba5 050c 	sub.w	r5, r5, ip
 800140e:	fbb5 f1fe 	udiv	r1, r5, lr
 8001412:	fb0e 5c11 	mls	ip, lr, r1, r5
 8001416:	fb01 f908 	mul.w	r9, r1, r8
 800141a:	b295      	uxth	r5, r2
 800141c:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8001420:	45a9      	cmp	r9, r5
 8001422:	d907      	bls.n	8001434 <__udivmoddi4+0x1c4>
 8001424:	197d      	adds	r5, r7, r5
 8001426:	f101 32ff 	add.w	r2, r1, #4294967295
 800142a:	d274      	bcs.n	8001516 <__udivmoddi4+0x2a6>
 800142c:	45a9      	cmp	r9, r5
 800142e:	d972      	bls.n	8001516 <__udivmoddi4+0x2a6>
 8001430:	3902      	subs	r1, #2
 8001432:	443d      	add	r5, r7
 8001434:	eba5 0509 	sub.w	r5, r5, r9
 8001438:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800143c:	e778      	b.n	8001330 <__udivmoddi4+0xc0>
 800143e:	f1c1 0720 	rsb	r7, r1, #32
 8001442:	408b      	lsls	r3, r1
 8001444:	fa22 fc07 	lsr.w	ip, r2, r7
 8001448:	ea4c 0c03 	orr.w	ip, ip, r3
 800144c:	fa25 f407 	lsr.w	r4, r5, r7
 8001450:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8001454:	fbb4 f9fe 	udiv	r9, r4, lr
 8001458:	fa1f f88c 	uxth.w	r8, ip
 800145c:	fb0e 4419 	mls	r4, lr, r9, r4
 8001460:	fa20 f307 	lsr.w	r3, r0, r7
 8001464:	fb09 fa08 	mul.w	sl, r9, r8
 8001468:	408d      	lsls	r5, r1
 800146a:	431d      	orrs	r5, r3
 800146c:	0c2b      	lsrs	r3, r5, #16
 800146e:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8001472:	45a2      	cmp	sl, r4
 8001474:	fa02 f201 	lsl.w	r2, r2, r1
 8001478:	fa00 f301 	lsl.w	r3, r0, r1
 800147c:	d909      	bls.n	8001492 <__udivmoddi4+0x222>
 800147e:	eb1c 0404 	adds.w	r4, ip, r4
 8001482:	f109 30ff 	add.w	r0, r9, #4294967295
 8001486:	d248      	bcs.n	800151a <__udivmoddi4+0x2aa>
 8001488:	45a2      	cmp	sl, r4
 800148a:	d946      	bls.n	800151a <__udivmoddi4+0x2aa>
 800148c:	f1a9 0902 	sub.w	r9, r9, #2
 8001490:	4464      	add	r4, ip
 8001492:	eba4 040a 	sub.w	r4, r4, sl
 8001496:	fbb4 f0fe 	udiv	r0, r4, lr
 800149a:	fb0e 4410 	mls	r4, lr, r0, r4
 800149e:	fb00 fa08 	mul.w	sl, r0, r8
 80014a2:	b2ad      	uxth	r5, r5
 80014a4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80014a8:	45a2      	cmp	sl, r4
 80014aa:	d908      	bls.n	80014be <__udivmoddi4+0x24e>
 80014ac:	eb1c 0404 	adds.w	r4, ip, r4
 80014b0:	f100 35ff 	add.w	r5, r0, #4294967295
 80014b4:	d22d      	bcs.n	8001512 <__udivmoddi4+0x2a2>
 80014b6:	45a2      	cmp	sl, r4
 80014b8:	d92b      	bls.n	8001512 <__udivmoddi4+0x2a2>
 80014ba:	3802      	subs	r0, #2
 80014bc:	4464      	add	r4, ip
 80014be:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80014c2:	fba0 8902 	umull	r8, r9, r0, r2
 80014c6:	eba4 040a 	sub.w	r4, r4, sl
 80014ca:	454c      	cmp	r4, r9
 80014cc:	46c6      	mov	lr, r8
 80014ce:	464d      	mov	r5, r9
 80014d0:	d319      	bcc.n	8001506 <__udivmoddi4+0x296>
 80014d2:	d016      	beq.n	8001502 <__udivmoddi4+0x292>
 80014d4:	b15e      	cbz	r6, 80014ee <__udivmoddi4+0x27e>
 80014d6:	ebb3 020e 	subs.w	r2, r3, lr
 80014da:	eb64 0405 	sbc.w	r4, r4, r5
 80014de:	fa04 f707 	lsl.w	r7, r4, r7
 80014e2:	fa22 f301 	lsr.w	r3, r2, r1
 80014e6:	431f      	orrs	r7, r3
 80014e8:	40cc      	lsrs	r4, r1
 80014ea:	e9c6 7400 	strd	r7, r4, [r6]
 80014ee:	2100      	movs	r1, #0
 80014f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80014f4:	4631      	mov	r1, r6
 80014f6:	4630      	mov	r0, r6
 80014f8:	e70c      	b.n	8001314 <__udivmoddi4+0xa4>
 80014fa:	468c      	mov	ip, r1
 80014fc:	e6eb      	b.n	80012d6 <__udivmoddi4+0x66>
 80014fe:	4610      	mov	r0, r2
 8001500:	e6ff      	b.n	8001302 <__udivmoddi4+0x92>
 8001502:	4543      	cmp	r3, r8
 8001504:	d2e6      	bcs.n	80014d4 <__udivmoddi4+0x264>
 8001506:	ebb8 0e02 	subs.w	lr, r8, r2
 800150a:	eb69 050c 	sbc.w	r5, r9, ip
 800150e:	3801      	subs	r0, #1
 8001510:	e7e0      	b.n	80014d4 <__udivmoddi4+0x264>
 8001512:	4628      	mov	r0, r5
 8001514:	e7d3      	b.n	80014be <__udivmoddi4+0x24e>
 8001516:	4611      	mov	r1, r2
 8001518:	e78c      	b.n	8001434 <__udivmoddi4+0x1c4>
 800151a:	4681      	mov	r9, r0
 800151c:	e7b9      	b.n	8001492 <__udivmoddi4+0x222>
 800151e:	4608      	mov	r0, r1
 8001520:	e773      	b.n	800140a <__udivmoddi4+0x19a>
 8001522:	4608      	mov	r0, r1
 8001524:	e749      	b.n	80013ba <__udivmoddi4+0x14a>
 8001526:	f1ac 0c02 	sub.w	ip, ip, #2
 800152a:	443d      	add	r5, r7
 800152c:	e713      	b.n	8001356 <__udivmoddi4+0xe6>
 800152e:	3802      	subs	r0, #2
 8001530:	443c      	add	r4, r7
 8001532:	e724      	b.n	800137e <__udivmoddi4+0x10e>

08001534 <__aeabi_idiv0>:
 8001534:	4770      	bx	lr
 8001536:	bf00      	nop

08001538 <_Z8readBitshhhhPh>:
 * @param bitStart First bit position to read (0-7)
 * @param length Number of bits to read (not more than 8)
 * @param data Container for right-aligned value (i.e. '101' read from any bitStart position will equal 0x05)
 * @return Status of read operation (true = success)
 */
int8_t readBits(uint8_t devAddr, uint8_t regAddr, uint8_t bitStart, uint8_t length, uint8_t *data) {
 8001538:	b590      	push	{r4, r7, lr}
 800153a:	b089      	sub	sp, #36	; 0x24
 800153c:	af04      	add	r7, sp, #16
 800153e:	4604      	mov	r4, r0
 8001540:	4608      	mov	r0, r1
 8001542:	4611      	mov	r1, r2
 8001544:	461a      	mov	r2, r3
 8001546:	4623      	mov	r3, r4
 8001548:	71fb      	strb	r3, [r7, #7]
 800154a:	4603      	mov	r3, r0
 800154c:	71bb      	strb	r3, [r7, #6]
 800154e:	460b      	mov	r3, r1
 8001550:	717b      	strb	r3, [r7, #5]
 8001552:	4613      	mov	r3, r2
 8001554:	713b      	strb	r3, [r7, #4]
  // 01101001 read byte
  // 76543210 bit numbers
  //    xxx   args: bitStart=4, length=3
  //    010   masked
  //   -> 010 shifted
  sendBuf[0] = regAddr;
 8001556:	4a25      	ldr	r2, [pc, #148]	; (80015ec <_Z8readBitshhhhPh+0xb4>)
 8001558:	79bb      	ldrb	r3, [r7, #6]
 800155a:	7013      	strb	r3, [r2, #0]
  uint8_t buffer;
  while(HAL_I2C_Mem_Read(&hi2c1,devAddr,regAddr,I2C_MEMADD_SIZE_8BIT,&buffer,1,I2CDLY) != HAL_OK){
 800155c:	79fb      	ldrb	r3, [r7, #7]
 800155e:	b299      	uxth	r1, r3
 8001560:	79bb      	ldrb	r3, [r7, #6]
 8001562:	b29a      	uxth	r2, r3
 8001564:	2301      	movs	r3, #1
 8001566:	9302      	str	r3, [sp, #8]
 8001568:	2301      	movs	r3, #1
 800156a:	9301      	str	r3, [sp, #4]
 800156c:	f107 030c 	add.w	r3, r7, #12
 8001570:	9300      	str	r3, [sp, #0]
 8001572:	2301      	movs	r3, #1
 8001574:	481e      	ldr	r0, [pc, #120]	; (80015f0 <_Z8readBitshhhhPh+0xb8>)
 8001576:	f004 fd9f 	bl	80060b8 <HAL_I2C_Mem_Read>
 800157a:	4603      	mov	r3, r0
 800157c:	2b00      	cmp	r3, #0
 800157e:	bf14      	ite	ne
 8001580:	2301      	movne	r3, #1
 8001582:	2300      	moveq	r3, #0
 8001584:	b2db      	uxtb	r3, r3
 8001586:	2b00      	cmp	r3, #0
 8001588:	d002      	beq.n	8001590 <_Z8readBitshhhhPh+0x58>
  	  MX_I2C1_Init();
 800158a:	f001 ff95 	bl	80034b8 <MX_I2C1_Init>
  while(HAL_I2C_Mem_Read(&hi2c1,devAddr,regAddr,I2C_MEMADD_SIZE_8BIT,&buffer,1,I2CDLY) != HAL_OK){
 800158e:	e7e5      	b.n	800155c <_Z8readBitshhhhPh+0x24>
    }
  uint8_t response = BCM2835_I2C_REASON_OK;
 8001590:	2301      	movs	r3, #1
 8001592:	73fb      	strb	r3, [r7, #15]
  uint8_t b = buffer;
 8001594:	7b3b      	ldrb	r3, [r7, #12]
 8001596:	73bb      	strb	r3, [r7, #14]
  if (response == BCM2835_I2C_REASON_OK) {
 8001598:	7bfb      	ldrb	r3, [r7, #15]
 800159a:	2b01      	cmp	r3, #1
 800159c:	d11a      	bne.n	80015d4 <_Z8readBitshhhhPh+0x9c>
    uint8_t mask = ((1 << length) - 1) << (bitStart - length + 1);
 800159e:	793b      	ldrb	r3, [r7, #4]
 80015a0:	2201      	movs	r2, #1
 80015a2:	fa02 f303 	lsl.w	r3, r2, r3
 80015a6:	1e5a      	subs	r2, r3, #1
 80015a8:	7979      	ldrb	r1, [r7, #5]
 80015aa:	793b      	ldrb	r3, [r7, #4]
 80015ac:	1acb      	subs	r3, r1, r3
 80015ae:	3301      	adds	r3, #1
 80015b0:	fa02 f303 	lsl.w	r3, r2, r3
 80015b4:	737b      	strb	r3, [r7, #13]
    b &= mask;
 80015b6:	7bba      	ldrb	r2, [r7, #14]
 80015b8:	7b7b      	ldrb	r3, [r7, #13]
 80015ba:	4013      	ands	r3, r2
 80015bc:	73bb      	strb	r3, [r7, #14]
    b >>= (bitStart - length + 1);
 80015be:	7bba      	ldrb	r2, [r7, #14]
 80015c0:	7979      	ldrb	r1, [r7, #5]
 80015c2:	793b      	ldrb	r3, [r7, #4]
 80015c4:	1acb      	subs	r3, r1, r3
 80015c6:	3301      	adds	r3, #1
 80015c8:	fa42 f303 	asr.w	r3, r2, r3
 80015cc:	73bb      	strb	r3, [r7, #14]
    *data = b;
 80015ce:	6a3b      	ldr	r3, [r7, #32]
 80015d0:	7bba      	ldrb	r2, [r7, #14]
 80015d2:	701a      	strb	r2, [r3, #0]
  }
  return response == BCM2835_I2C_REASON_OK;
 80015d4:	7bfb      	ldrb	r3, [r7, #15]
 80015d6:	2b01      	cmp	r3, #1
 80015d8:	bf0c      	ite	eq
 80015da:	2301      	moveq	r3, #1
 80015dc:	2300      	movne	r3, #0
 80015de:	b2db      	uxtb	r3, r3
 80015e0:	b25b      	sxtb	r3, r3
}
 80015e2:	4618      	mov	r0, r3
 80015e4:	3714      	adds	r7, #20
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bd90      	pop	{r4, r7, pc}
 80015ea:	bf00      	nop
 80015ec:	20000394 	.word	0x20000394
 80015f0:	20000604 	.word	0x20000604

080015f4 <_Z8readBytehhPh>:
 * @param devAddr I2C slave device address
 * @param regAddr Register regAddr to read from
 * @param data Container for byte value read from device
 * @return Status of read operation (true = success)
 */
int8_t readByte(uint8_t devAddr, uint8_t regAddr, uint8_t *data) {
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b088      	sub	sp, #32
 80015f8:	af04      	add	r7, sp, #16
 80015fa:	4603      	mov	r3, r0
 80015fc:	603a      	str	r2, [r7, #0]
 80015fe:	71fb      	strb	r3, [r7, #7]
 8001600:	460b      	mov	r3, r1
 8001602:	71bb      	strb	r3, [r7, #6]
  sendBuf[0] = regAddr;
 8001604:	4a16      	ldr	r2, [pc, #88]	; (8001660 <_Z8readBytehhPh+0x6c>)
 8001606:	79bb      	ldrb	r3, [r7, #6]
 8001608:	7013      	strb	r3, [r2, #0]
  uint8_t buffer;
  while(HAL_I2C_Mem_Read(&hi2c1,devAddr,regAddr,I2C_MEMADD_SIZE_8BIT,&buffer,1,I2CDLY) != HAL_OK){
 800160a:	79fb      	ldrb	r3, [r7, #7]
 800160c:	b299      	uxth	r1, r3
 800160e:	79bb      	ldrb	r3, [r7, #6]
 8001610:	b29a      	uxth	r2, r3
 8001612:	2301      	movs	r3, #1
 8001614:	9302      	str	r3, [sp, #8]
 8001616:	2301      	movs	r3, #1
 8001618:	9301      	str	r3, [sp, #4]
 800161a:	f107 030e 	add.w	r3, r7, #14
 800161e:	9300      	str	r3, [sp, #0]
 8001620:	2301      	movs	r3, #1
 8001622:	4810      	ldr	r0, [pc, #64]	; (8001664 <_Z8readBytehhPh+0x70>)
 8001624:	f004 fd48 	bl	80060b8 <HAL_I2C_Mem_Read>
 8001628:	4603      	mov	r3, r0
 800162a:	2b00      	cmp	r3, #0
 800162c:	bf14      	ite	ne
 800162e:	2301      	movne	r3, #1
 8001630:	2300      	moveq	r3, #0
 8001632:	b2db      	uxtb	r3, r3
 8001634:	2b00      	cmp	r3, #0
 8001636:	d002      	beq.n	800163e <_Z8readBytehhPh+0x4a>
    MX_I2C1_Init();
 8001638:	f001 ff3e 	bl	80034b8 <MX_I2C1_Init>
  while(HAL_I2C_Mem_Read(&hi2c1,devAddr,regAddr,I2C_MEMADD_SIZE_8BIT,&buffer,1,I2CDLY) != HAL_OK){
 800163c:	e7e5      	b.n	800160a <_Z8readBytehhPh+0x16>
  }
  uint8_t response = BCM2835_I2C_REASON_OK;
 800163e:	2301      	movs	r3, #1
 8001640:	73fb      	strb	r3, [r7, #15]
  data[0] = buffer;
 8001642:	7bba      	ldrb	r2, [r7, #14]
 8001644:	683b      	ldr	r3, [r7, #0]
 8001646:	701a      	strb	r2, [r3, #0]
  return response == BCM2835_I2C_REASON_OK;
 8001648:	7bfb      	ldrb	r3, [r7, #15]
 800164a:	2b01      	cmp	r3, #1
 800164c:	bf0c      	ite	eq
 800164e:	2301      	moveq	r3, #1
 8001650:	2300      	movne	r3, #0
 8001652:	b2db      	uxtb	r3, r3
 8001654:	b25b      	sxtb	r3, r3
}
 8001656:	4618      	mov	r0, r3
 8001658:	3710      	adds	r7, #16
 800165a:	46bd      	mov	sp, r7
 800165c:	bd80      	pop	{r7, pc}
 800165e:	bf00      	nop
 8001660:	20000394 	.word	0x20000394
 8001664:	20000604 	.word	0x20000604

08001668 <_Z9readByteshhhPh>:
 * @param regAddr First register regAddr to read from
 * @param length Number of bytes to read
 * @param data Buffer to store read data in
 * @return I2C_TransferReturn_TypeDef http://downloads.energymicro.com/documentation/doxygen/group__I2C.html
 */
int8_t readBytes(uint8_t devAddr, uint8_t regAddr, uint8_t length, uint8_t *data) {
 8001668:	b5b0      	push	{r4, r5, r7, lr}
 800166a:	b08a      	sub	sp, #40	; 0x28
 800166c:	af04      	add	r7, sp, #16
 800166e:	603b      	str	r3, [r7, #0]
 8001670:	4603      	mov	r3, r0
 8001672:	71fb      	strb	r3, [r7, #7]
 8001674:	460b      	mov	r3, r1
 8001676:	71bb      	strb	r3, [r7, #6]
 8001678:	4613      	mov	r3, r2
 800167a:	717b      	strb	r3, [r7, #5]
  uint8_t response = BCM2835_I2C_REASON_OK;
  int i ;
  for (i = 0; i < length ; i++) {
    data[i] = (uint8_t) buffer[i];
  }
  return response == BCM2835_I2C_REASON_OK;
 800167c:	466b      	mov	r3, sp
 800167e:	461d      	mov	r5, r3
  sendBuf[0] = regAddr;
 8001680:	4a32      	ldr	r2, [pc, #200]	; (800174c <_Z9readByteshhhPh+0xe4>)
 8001682:	79bb      	ldrb	r3, [r7, #6]
 8001684:	7013      	strb	r3, [r2, #0]
  uint8_t buffer[length];
 8001686:	797b      	ldrb	r3, [r7, #5]
 8001688:	1e5c      	subs	r4, r3, #1
 800168a:	613c      	str	r4, [r7, #16]
 800168c:	4623      	mov	r3, r4
 800168e:	3301      	adds	r3, #1
 8001690:	4618      	mov	r0, r3
 8001692:	f04f 0100 	mov.w	r1, #0
 8001696:	f04f 0200 	mov.w	r2, #0
 800169a:	f04f 0300 	mov.w	r3, #0
 800169e:	00cb      	lsls	r3, r1, #3
 80016a0:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80016a4:	00c2      	lsls	r2, r0, #3
 80016a6:	4623      	mov	r3, r4
 80016a8:	3301      	adds	r3, #1
 80016aa:	4618      	mov	r0, r3
 80016ac:	f04f 0100 	mov.w	r1, #0
 80016b0:	f04f 0200 	mov.w	r2, #0
 80016b4:	f04f 0300 	mov.w	r3, #0
 80016b8:	00cb      	lsls	r3, r1, #3
 80016ba:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80016be:	00c2      	lsls	r2, r0, #3
 80016c0:	4623      	mov	r3, r4
 80016c2:	3301      	adds	r3, #1
 80016c4:	3307      	adds	r3, #7
 80016c6:	08db      	lsrs	r3, r3, #3
 80016c8:	00db      	lsls	r3, r3, #3
 80016ca:	ebad 0d03 	sub.w	sp, sp, r3
 80016ce:	ab04      	add	r3, sp, #16
 80016d0:	3300      	adds	r3, #0
 80016d2:	60fb      	str	r3, [r7, #12]
  while(HAL_I2C_Mem_Read(&hi2c1,devAddr,regAddr,I2C_MEMADD_SIZE_8BIT,buffer,length,I2CDLY) != HAL_OK){
 80016d4:	79fb      	ldrb	r3, [r7, #7]
 80016d6:	b299      	uxth	r1, r3
 80016d8:	79bb      	ldrb	r3, [r7, #6]
 80016da:	b298      	uxth	r0, r3
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	797a      	ldrb	r2, [r7, #5]
 80016e0:	b292      	uxth	r2, r2
 80016e2:	2401      	movs	r4, #1
 80016e4:	9402      	str	r4, [sp, #8]
 80016e6:	9201      	str	r2, [sp, #4]
 80016e8:	9300      	str	r3, [sp, #0]
 80016ea:	2301      	movs	r3, #1
 80016ec:	4602      	mov	r2, r0
 80016ee:	4818      	ldr	r0, [pc, #96]	; (8001750 <_Z9readByteshhhPh+0xe8>)
 80016f0:	f004 fce2 	bl	80060b8 <HAL_I2C_Mem_Read>
 80016f4:	4603      	mov	r3, r0
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	bf14      	ite	ne
 80016fa:	2301      	movne	r3, #1
 80016fc:	2300      	moveq	r3, #0
 80016fe:	b2db      	uxtb	r3, r3
 8001700:	2b00      	cmp	r3, #0
 8001702:	d002      	beq.n	800170a <_Z9readByteshhhPh+0xa2>
    MX_I2C1_Init();
 8001704:	f001 fed8 	bl	80034b8 <MX_I2C1_Init>
  while(HAL_I2C_Mem_Read(&hi2c1,devAddr,regAddr,I2C_MEMADD_SIZE_8BIT,buffer,length,I2CDLY) != HAL_OK){
 8001708:	e7e4      	b.n	80016d4 <_Z9readByteshhhPh+0x6c>
  uint8_t response = BCM2835_I2C_REASON_OK;
 800170a:	2301      	movs	r3, #1
 800170c:	72fb      	strb	r3, [r7, #11]
  for (i = 0; i < length ; i++) {
 800170e:	2300      	movs	r3, #0
 8001710:	617b      	str	r3, [r7, #20]
 8001712:	797b      	ldrb	r3, [r7, #5]
 8001714:	697a      	ldr	r2, [r7, #20]
 8001716:	429a      	cmp	r2, r3
 8001718:	da0b      	bge.n	8001732 <_Z9readByteshhhPh+0xca>
    data[i] = (uint8_t) buffer[i];
 800171a:	697b      	ldr	r3, [r7, #20]
 800171c:	683a      	ldr	r2, [r7, #0]
 800171e:	4413      	add	r3, r2
 8001720:	68f9      	ldr	r1, [r7, #12]
 8001722:	697a      	ldr	r2, [r7, #20]
 8001724:	440a      	add	r2, r1
 8001726:	7812      	ldrb	r2, [r2, #0]
 8001728:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < length ; i++) {
 800172a:	697b      	ldr	r3, [r7, #20]
 800172c:	3301      	adds	r3, #1
 800172e:	617b      	str	r3, [r7, #20]
 8001730:	e7ef      	b.n	8001712 <_Z9readByteshhhPh+0xaa>
  return response == BCM2835_I2C_REASON_OK;
 8001732:	7afb      	ldrb	r3, [r7, #11]
 8001734:	2b01      	cmp	r3, #1
 8001736:	bf0c      	ite	eq
 8001738:	2301      	moveq	r3, #1
 800173a:	2300      	movne	r3, #0
 800173c:	b2db      	uxtb	r3, r3
 800173e:	b25b      	sxtb	r3, r3
 8001740:	46ad      	mov	sp, r5
}
 8001742:	4618      	mov	r0, r3
 8001744:	3718      	adds	r7, #24
 8001746:	46bd      	mov	sp, r7
 8001748:	bdb0      	pop	{r4, r5, r7, pc}
 800174a:	bf00      	nop
 800174c:	20000394 	.word	0x20000394
 8001750:	20000604 	.word	0x20000604

08001754 <_Z8writeBithhhh>:
 * @param regAddr Register regAddr to write to
 * @param bitNum Bit position to write (0-7)
 * @param value New bit value to write
 * @return Status of operation (true = success)
 */
bool writeBit(uint8_t devAddr, uint8_t regAddr, uint8_t bitNum, uint8_t data) {
 8001754:	b590      	push	{r4, r7, lr}
 8001756:	b089      	sub	sp, #36	; 0x24
 8001758:	af04      	add	r7, sp, #16
 800175a:	4604      	mov	r4, r0
 800175c:	4608      	mov	r0, r1
 800175e:	4611      	mov	r1, r2
 8001760:	461a      	mov	r2, r3
 8001762:	4623      	mov	r3, r4
 8001764:	71fb      	strb	r3, [r7, #7]
 8001766:	4603      	mov	r3, r0
 8001768:	71bb      	strb	r3, [r7, #6]
 800176a:	460b      	mov	r3, r1
 800176c:	717b      	strb	r3, [r7, #5]
 800176e:	4613      	mov	r3, r2
 8001770:	713b      	strb	r3, [r7, #4]

  //first reading registery value
  sendBuf[0] = regAddr;
 8001772:	4a34      	ldr	r2, [pc, #208]	; (8001844 <_Z8writeBithhhh+0xf0>)
 8001774:	79bb      	ldrb	r3, [r7, #6]
 8001776:	7013      	strb	r3, [r2, #0]
  uint8_t buffer;
  while(HAL_I2C_Mem_Read(&hi2c1,devAddr,regAddr,I2C_MEMADD_SIZE_8BIT,&buffer,1,I2CDLY) != HAL_OK){
 8001778:	79fb      	ldrb	r3, [r7, #7]
 800177a:	b299      	uxth	r1, r3
 800177c:	79bb      	ldrb	r3, [r7, #6]
 800177e:	b29a      	uxth	r2, r3
 8001780:	2301      	movs	r3, #1
 8001782:	9302      	str	r3, [sp, #8]
 8001784:	2301      	movs	r3, #1
 8001786:	9301      	str	r3, [sp, #4]
 8001788:	f107 030e 	add.w	r3, r7, #14
 800178c:	9300      	str	r3, [sp, #0]
 800178e:	2301      	movs	r3, #1
 8001790:	482d      	ldr	r0, [pc, #180]	; (8001848 <_Z8writeBithhhh+0xf4>)
 8001792:	f004 fc91 	bl	80060b8 <HAL_I2C_Mem_Read>
 8001796:	4603      	mov	r3, r0
 8001798:	2b00      	cmp	r3, #0
 800179a:	bf14      	ite	ne
 800179c:	2301      	movne	r3, #1
 800179e:	2300      	moveq	r3, #0
 80017a0:	b2db      	uxtb	r3, r3
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d002      	beq.n	80017ac <_Z8writeBithhhh+0x58>
    MX_I2C1_Init();
 80017a6:	f001 fe87 	bl	80034b8 <MX_I2C1_Init>
  while(HAL_I2C_Mem_Read(&hi2c1,devAddr,regAddr,I2C_MEMADD_SIZE_8BIT,&buffer,1,I2CDLY) != HAL_OK){
 80017aa:	e7e5      	b.n	8001778 <_Z8writeBithhhh+0x24>
  }
  uint8_t response = BCM2835_I2C_REASON_OK;
 80017ac:	2301      	movs	r3, #1
 80017ae:	73fb      	strb	r3, [r7, #15]
  if ( response == BCM2835_I2C_REASON_OK ) {
 80017b0:	7bfb      	ldrb	r3, [r7, #15]
 80017b2:	2b01      	cmp	r3, #1
 80017b4:	d13b      	bne.n	800182e <_Z8writeBithhhh+0xda>
    uint8_t b = buffer ;
 80017b6:	7bbb      	ldrb	r3, [r7, #14]
 80017b8:	737b      	strb	r3, [r7, #13]
    b = (data != 0) ? (b | (1 << bitNum)) : (b & ~(1 << bitNum));
 80017ba:	793b      	ldrb	r3, [r7, #4]
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d00a      	beq.n	80017d6 <_Z8writeBithhhh+0x82>
 80017c0:	797b      	ldrb	r3, [r7, #5]
 80017c2:	2201      	movs	r2, #1
 80017c4:	fa02 f303 	lsl.w	r3, r2, r3
 80017c8:	b25a      	sxtb	r2, r3
 80017ca:	7b7b      	ldrb	r3, [r7, #13]
 80017cc:	b25b      	sxtb	r3, r3
 80017ce:	4313      	orrs	r3, r2
 80017d0:	b25b      	sxtb	r3, r3
 80017d2:	b2db      	uxtb	r3, r3
 80017d4:	e00b      	b.n	80017ee <_Z8writeBithhhh+0x9a>
 80017d6:	797b      	ldrb	r3, [r7, #5]
 80017d8:	2201      	movs	r2, #1
 80017da:	fa02 f303 	lsl.w	r3, r2, r3
 80017de:	b25b      	sxtb	r3, r3
 80017e0:	43db      	mvns	r3, r3
 80017e2:	b25a      	sxtb	r2, r3
 80017e4:	7b7b      	ldrb	r3, [r7, #13]
 80017e6:	b25b      	sxtb	r3, r3
 80017e8:	4013      	ands	r3, r2
 80017ea:	b25b      	sxtb	r3, r3
 80017ec:	b2db      	uxtb	r3, r3
 80017ee:	737b      	strb	r3, [r7, #13]
    sendBuf[1] = b ;
 80017f0:	7b7a      	ldrb	r2, [r7, #13]
 80017f2:	4b14      	ldr	r3, [pc, #80]	; (8001844 <_Z8writeBithhhh+0xf0>)
 80017f4:	705a      	strb	r2, [r3, #1]
    while(HAL_I2C_Mem_Write(&hi2c1,devAddr,regAddr, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&b, 1,I2CDLY) != HAL_OK){
 80017f6:	79fb      	ldrb	r3, [r7, #7]
 80017f8:	b299      	uxth	r1, r3
 80017fa:	79bb      	ldrb	r3, [r7, #6]
 80017fc:	b29a      	uxth	r2, r3
 80017fe:	2301      	movs	r3, #1
 8001800:	9302      	str	r3, [sp, #8]
 8001802:	2301      	movs	r3, #1
 8001804:	9301      	str	r3, [sp, #4]
 8001806:	f107 030d 	add.w	r3, r7, #13
 800180a:	9300      	str	r3, [sp, #0]
 800180c:	2301      	movs	r3, #1
 800180e:	480e      	ldr	r0, [pc, #56]	; (8001848 <_Z8writeBithhhh+0xf4>)
 8001810:	f004 fb58 	bl	8005ec4 <HAL_I2C_Mem_Write>
 8001814:	4603      	mov	r3, r0
 8001816:	2b00      	cmp	r3, #0
 8001818:	bf14      	ite	ne
 800181a:	2301      	movne	r3, #1
 800181c:	2300      	moveq	r3, #0
 800181e:	b2db      	uxtb	r3, r3
 8001820:	2b00      	cmp	r3, #0
 8001822:	d002      	beq.n	800182a <_Z8writeBithhhh+0xd6>
    	MX_I2C1_Init();
 8001824:	f001 fe48 	bl	80034b8 <MX_I2C1_Init>
    while(HAL_I2C_Mem_Write(&hi2c1,devAddr,regAddr, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&b, 1,I2CDLY) != HAL_OK){
 8001828:	e7e5      	b.n	80017f6 <_Z8writeBithhhh+0xa2>
    }
    response = BCM2835_I2C_REASON_OK;
 800182a:	2301      	movs	r3, #1
 800182c:	73fb      	strb	r3, [r7, #15]
  }
  return response == BCM2835_I2C_REASON_OK;
 800182e:	7bfb      	ldrb	r3, [r7, #15]
 8001830:	2b01      	cmp	r3, #1
 8001832:	bf0c      	ite	eq
 8001834:	2301      	moveq	r3, #1
 8001836:	2300      	movne	r3, #0
 8001838:	b2db      	uxtb	r3, r3
}
 800183a:	4618      	mov	r0, r3
 800183c:	3714      	adds	r7, #20
 800183e:	46bd      	mov	sp, r7
 8001840:	bd90      	pop	{r4, r7, pc}
 8001842:	bf00      	nop
 8001844:	20000394 	.word	0x20000394
 8001848:	20000604 	.word	0x20000604

0800184c <_Z9writeBitshhhhh>:
 * @param bitStart First bit position to write (0-7)
 * @param length Number of bits to write (not more than 8)
 * @param data Right-aligned value to write
 * @return Status of operation (true = success)
 */
bool writeBits(uint8_t devAddr, uint8_t regAddr, uint8_t bitStart, uint8_t length, uint8_t data) {
 800184c:	b590      	push	{r4, r7, lr}
 800184e:	b089      	sub	sp, #36	; 0x24
 8001850:	af04      	add	r7, sp, #16
 8001852:	4604      	mov	r4, r0
 8001854:	4608      	mov	r0, r1
 8001856:	4611      	mov	r1, r2
 8001858:	461a      	mov	r2, r3
 800185a:	4623      	mov	r3, r4
 800185c:	71fb      	strb	r3, [r7, #7]
 800185e:	4603      	mov	r3, r0
 8001860:	71bb      	strb	r3, [r7, #6]
 8001862:	460b      	mov	r3, r1
 8001864:	717b      	strb	r3, [r7, #5]
 8001866:	4613      	mov	r3, r2
 8001868:	713b      	strb	r3, [r7, #4]
  // 10101111 original value (sample)
  // 10100011 original & ~mask
  // 10101011 masked | value

  //first reading registery value
  sendBuf[0] = regAddr;
 800186a:	4a3c      	ldr	r2, [pc, #240]	; (800195c <_Z9writeBitshhhhh+0x110>)
 800186c:	79bb      	ldrb	r3, [r7, #6]
 800186e:	7013      	strb	r3, [r2, #0]
  uint8_t buffer;
  while(HAL_I2C_Mem_Read(&hi2c1,devAddr,regAddr,I2C_MEMADD_SIZE_8BIT,&buffer,1,I2CDLY) != HAL_OK){
 8001870:	79fb      	ldrb	r3, [r7, #7]
 8001872:	b299      	uxth	r1, r3
 8001874:	79bb      	ldrb	r3, [r7, #6]
 8001876:	b29a      	uxth	r2, r3
 8001878:	2301      	movs	r3, #1
 800187a:	9302      	str	r3, [sp, #8]
 800187c:	2301      	movs	r3, #1
 800187e:	9301      	str	r3, [sp, #4]
 8001880:	f107 030d 	add.w	r3, r7, #13
 8001884:	9300      	str	r3, [sp, #0]
 8001886:	2301      	movs	r3, #1
 8001888:	4835      	ldr	r0, [pc, #212]	; (8001960 <_Z9writeBitshhhhh+0x114>)
 800188a:	f004 fc15 	bl	80060b8 <HAL_I2C_Mem_Read>
 800188e:	4603      	mov	r3, r0
 8001890:	2b00      	cmp	r3, #0
 8001892:	bf14      	ite	ne
 8001894:	2301      	movne	r3, #1
 8001896:	2300      	moveq	r3, #0
 8001898:	b2db      	uxtb	r3, r3
 800189a:	2b00      	cmp	r3, #0
 800189c:	d002      	beq.n	80018a4 <_Z9writeBitshhhhh+0x58>
    MX_I2C1_Init();
 800189e:	f001 fe0b 	bl	80034b8 <MX_I2C1_Init>
  while(HAL_I2C_Mem_Read(&hi2c1,devAddr,regAddr,I2C_MEMADD_SIZE_8BIT,&buffer,1,I2CDLY) != HAL_OK){
 80018a2:	e7e5      	b.n	8001870 <_Z9writeBitshhhhh+0x24>
  }
  uint8_t response = BCM2835_I2C_REASON_OK;
 80018a4:	2301      	movs	r3, #1
 80018a6:	73fb      	strb	r3, [r7, #15]
  if ( response == BCM2835_I2C_REASON_OK ) {
 80018a8:	7bfb      	ldrb	r3, [r7, #15]
 80018aa:	2b01      	cmp	r3, #1
 80018ac:	d14c      	bne.n	8001948 <_Z9writeBitshhhhh+0xfc>
    uint8_t b = buffer;
 80018ae:	7b7b      	ldrb	r3, [r7, #13]
 80018b0:	733b      	strb	r3, [r7, #12]
    uint8_t mask = ((1 << length) - 1) << (bitStart - length + 1);
 80018b2:	793b      	ldrb	r3, [r7, #4]
 80018b4:	2201      	movs	r2, #1
 80018b6:	fa02 f303 	lsl.w	r3, r2, r3
 80018ba:	1e5a      	subs	r2, r3, #1
 80018bc:	7979      	ldrb	r1, [r7, #5]
 80018be:	793b      	ldrb	r3, [r7, #4]
 80018c0:	1acb      	subs	r3, r1, r3
 80018c2:	3301      	adds	r3, #1
 80018c4:	fa02 f303 	lsl.w	r3, r2, r3
 80018c8:	73bb      	strb	r3, [r7, #14]
    data <<= (bitStart - length + 1); // shift data into correct position
 80018ca:	f897 2020 	ldrb.w	r2, [r7, #32]
 80018ce:	7979      	ldrb	r1, [r7, #5]
 80018d0:	793b      	ldrb	r3, [r7, #4]
 80018d2:	1acb      	subs	r3, r1, r3
 80018d4:	3301      	adds	r3, #1
 80018d6:	fa02 f303 	lsl.w	r3, r2, r3
 80018da:	f887 3020 	strb.w	r3, [r7, #32]
    data &= mask; // zero all non-important bits in data
 80018de:	f897 2020 	ldrb.w	r2, [r7, #32]
 80018e2:	7bbb      	ldrb	r3, [r7, #14]
 80018e4:	4013      	ands	r3, r2
 80018e6:	f887 3020 	strb.w	r3, [r7, #32]
    b &= ~(mask); // zero all important bits in existing byte
 80018ea:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80018ee:	43db      	mvns	r3, r3
 80018f0:	b25a      	sxtb	r2, r3
 80018f2:	7b3b      	ldrb	r3, [r7, #12]
 80018f4:	b25b      	sxtb	r3, r3
 80018f6:	4013      	ands	r3, r2
 80018f8:	b25b      	sxtb	r3, r3
 80018fa:	b2db      	uxtb	r3, r3
 80018fc:	733b      	strb	r3, [r7, #12]
    b |= data; // combine data with existing byte
 80018fe:	7b3a      	ldrb	r2, [r7, #12]
 8001900:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001904:	4313      	orrs	r3, r2
 8001906:	b2db      	uxtb	r3, r3
 8001908:	733b      	strb	r3, [r7, #12]
    sendBuf[1] = b ;
 800190a:	7b3a      	ldrb	r2, [r7, #12]
 800190c:	4b13      	ldr	r3, [pc, #76]	; (800195c <_Z9writeBitshhhhh+0x110>)
 800190e:	705a      	strb	r2, [r3, #1]
    while(HAL_I2C_Mem_Write(&hi2c1,devAddr,regAddr, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&b, 1,I2CDLY) != HAL_OK){
 8001910:	79fb      	ldrb	r3, [r7, #7]
 8001912:	b299      	uxth	r1, r3
 8001914:	79bb      	ldrb	r3, [r7, #6]
 8001916:	b29a      	uxth	r2, r3
 8001918:	2301      	movs	r3, #1
 800191a:	9302      	str	r3, [sp, #8]
 800191c:	2301      	movs	r3, #1
 800191e:	9301      	str	r3, [sp, #4]
 8001920:	f107 030c 	add.w	r3, r7, #12
 8001924:	9300      	str	r3, [sp, #0]
 8001926:	2301      	movs	r3, #1
 8001928:	480d      	ldr	r0, [pc, #52]	; (8001960 <_Z9writeBitshhhhh+0x114>)
 800192a:	f004 facb 	bl	8005ec4 <HAL_I2C_Mem_Write>
 800192e:	4603      	mov	r3, r0
 8001930:	2b00      	cmp	r3, #0
 8001932:	bf14      	ite	ne
 8001934:	2301      	movne	r3, #1
 8001936:	2300      	moveq	r3, #0
 8001938:	b2db      	uxtb	r3, r3
 800193a:	2b00      	cmp	r3, #0
 800193c:	d002      	beq.n	8001944 <_Z9writeBitshhhhh+0xf8>
       MX_I2C1_Init();
 800193e:	f001 fdbb 	bl	80034b8 <MX_I2C1_Init>
    while(HAL_I2C_Mem_Write(&hi2c1,devAddr,regAddr, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&b, 1,I2CDLY) != HAL_OK){
 8001942:	e7e5      	b.n	8001910 <_Z9writeBitshhhhh+0xc4>
    }
    response = BCM2835_I2C_REASON_OK;
 8001944:	2301      	movs	r3, #1
 8001946:	73fb      	strb	r3, [r7, #15]
    }
  return response == BCM2835_I2C_REASON_OK;
 8001948:	7bfb      	ldrb	r3, [r7, #15]
 800194a:	2b01      	cmp	r3, #1
 800194c:	bf0c      	ite	eq
 800194e:	2301      	moveq	r3, #1
 8001950:	2300      	movne	r3, #0
 8001952:	b2db      	uxtb	r3, r3
}
 8001954:	4618      	mov	r0, r3
 8001956:	3714      	adds	r7, #20
 8001958:	46bd      	mov	sp, r7
 800195a:	bd90      	pop	{r4, r7, pc}
 800195c:	20000394 	.word	0x20000394
 8001960:	20000604 	.word	0x20000604

08001964 <_Z9writeBytehhh>:
 * @param devAddr I2C slave device address
 * @param regAddr Register address to write to
 * @param data New byte value to write
 * @return Status of operation (true = success)
 */
bool writeByte(uint8_t devAddr, uint8_t regAddr, uint8_t data) {
 8001964:	b580      	push	{r7, lr}
 8001966:	b088      	sub	sp, #32
 8001968:	af04      	add	r7, sp, #16
 800196a:	4603      	mov	r3, r0
 800196c:	71fb      	strb	r3, [r7, #7]
 800196e:	460b      	mov	r3, r1
 8001970:	71bb      	strb	r3, [r7, #6]
 8001972:	4613      	mov	r3, r2
 8001974:	717b      	strb	r3, [r7, #5]

  sendBuf[0] = regAddr;
 8001976:	4a15      	ldr	r2, [pc, #84]	; (80019cc <_Z9writeBytehhh+0x68>)
 8001978:	79bb      	ldrb	r3, [r7, #6]
 800197a:	7013      	strb	r3, [r2, #0]
  sendBuf[1] = data;
 800197c:	797a      	ldrb	r2, [r7, #5]
 800197e:	4b13      	ldr	r3, [pc, #76]	; (80019cc <_Z9writeBytehhh+0x68>)
 8001980:	705a      	strb	r2, [r3, #1]
  while(HAL_I2C_Mem_Write(&hi2c1,devAddr,regAddr, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&data, 1,I2CDLY) != HAL_OK){
 8001982:	79fb      	ldrb	r3, [r7, #7]
 8001984:	b299      	uxth	r1, r3
 8001986:	79bb      	ldrb	r3, [r7, #6]
 8001988:	b29a      	uxth	r2, r3
 800198a:	2301      	movs	r3, #1
 800198c:	9302      	str	r3, [sp, #8]
 800198e:	2301      	movs	r3, #1
 8001990:	9301      	str	r3, [sp, #4]
 8001992:	1d7b      	adds	r3, r7, #5
 8001994:	9300      	str	r3, [sp, #0]
 8001996:	2301      	movs	r3, #1
 8001998:	480d      	ldr	r0, [pc, #52]	; (80019d0 <_Z9writeBytehhh+0x6c>)
 800199a:	f004 fa93 	bl	8005ec4 <HAL_I2C_Mem_Write>
 800199e:	4603      	mov	r3, r0
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	bf14      	ite	ne
 80019a4:	2301      	movne	r3, #1
 80019a6:	2300      	moveq	r3, #0
 80019a8:	b2db      	uxtb	r3, r3
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d002      	beq.n	80019b4 <_Z9writeBytehhh+0x50>
     MX_I2C1_Init();
 80019ae:	f001 fd83 	bl	80034b8 <MX_I2C1_Init>
  while(HAL_I2C_Mem_Write(&hi2c1,devAddr,regAddr, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&data, 1,I2CDLY) != HAL_OK){
 80019b2:	e7e6      	b.n	8001982 <_Z9writeBytehhh+0x1e>
  }
  uint8_t response = BCM2835_I2C_REASON_OK;
 80019b4:	2301      	movs	r3, #1
 80019b6:	73fb      	strb	r3, [r7, #15]
  return response == BCM2835_I2C_REASON_OK ;
 80019b8:	7bfb      	ldrb	r3, [r7, #15]
 80019ba:	2b01      	cmp	r3, #1
 80019bc:	bf0c      	ite	eq
 80019be:	2301      	moveq	r3, #1
 80019c0:	2300      	movne	r3, #0
 80019c2:	b2db      	uxtb	r3, r3
}
 80019c4:	4618      	mov	r0, r3
 80019c6:	3710      	adds	r7, #16
 80019c8:	46bd      	mov	sp, r7
 80019ca:	bd80      	pop	{r7, pc}
 80019cc:	20000394 	.word	0x20000394
 80019d0:	20000604 	.word	0x20000604

080019d4 <_Z9writeWordhht>:
    data[i] = (buffer[i*2] << 8) | buffer[i*2+1] ;
  }
  return  response == BCM2835_I2C_REASON_OK ;
}

bool writeWord(uint8_t devAddr, uint8_t regAddr, uint16_t data){
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b088      	sub	sp, #32
 80019d8:	af04      	add	r7, sp, #16
 80019da:	4603      	mov	r3, r0
 80019dc:	71fb      	strb	r3, [r7, #7]
 80019de:	460b      	mov	r3, r1
 80019e0:	71bb      	strb	r3, [r7, #6]
 80019e2:	4613      	mov	r3, r2
 80019e4:	80bb      	strh	r3, [r7, #4]

  sendBuf[0] = (uint8_t) (data >> 8); //MSByte
 80019e6:	88bb      	ldrh	r3, [r7, #4]
 80019e8:	121b      	asrs	r3, r3, #8
 80019ea:	b2da      	uxtb	r2, r3
 80019ec:	4b15      	ldr	r3, [pc, #84]	; (8001a44 <_Z9writeWordhht+0x70>)
 80019ee:	701a      	strb	r2, [r3, #0]
  sendBuf[1] = (uint8_t) (data >> 0); //LSByte
 80019f0:	88bb      	ldrh	r3, [r7, #4]
 80019f2:	b2da      	uxtb	r2, r3
 80019f4:	4b13      	ldr	r3, [pc, #76]	; (8001a44 <_Z9writeWordhht+0x70>)
 80019f6:	705a      	strb	r2, [r3, #1]
  while(HAL_I2C_Mem_Write(&hi2c1,devAddr,regAddr, I2C_MEMADD_SIZE_8BIT, (uint8_t*)sendBuf, 2,I2CDLY) != HAL_OK){
 80019f8:	79fb      	ldrb	r3, [r7, #7]
 80019fa:	b299      	uxth	r1, r3
 80019fc:	79bb      	ldrb	r3, [r7, #6]
 80019fe:	b29a      	uxth	r2, r3
 8001a00:	2301      	movs	r3, #1
 8001a02:	9302      	str	r3, [sp, #8]
 8001a04:	2302      	movs	r3, #2
 8001a06:	9301      	str	r3, [sp, #4]
 8001a08:	4b0e      	ldr	r3, [pc, #56]	; (8001a44 <_Z9writeWordhht+0x70>)
 8001a0a:	9300      	str	r3, [sp, #0]
 8001a0c:	2301      	movs	r3, #1
 8001a0e:	480e      	ldr	r0, [pc, #56]	; (8001a48 <_Z9writeWordhht+0x74>)
 8001a10:	f004 fa58 	bl	8005ec4 <HAL_I2C_Mem_Write>
 8001a14:	4603      	mov	r3, r0
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	bf14      	ite	ne
 8001a1a:	2301      	movne	r3, #1
 8001a1c:	2300      	moveq	r3, #0
 8001a1e:	b2db      	uxtb	r3, r3
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d002      	beq.n	8001a2a <_Z9writeWordhht+0x56>
     MX_I2C1_Init();
 8001a24:	f001 fd48 	bl	80034b8 <MX_I2C1_Init>
  while(HAL_I2C_Mem_Write(&hi2c1,devAddr,regAddr, I2C_MEMADD_SIZE_8BIT, (uint8_t*)sendBuf, 2,I2CDLY) != HAL_OK){
 8001a28:	e7e6      	b.n	80019f8 <_Z9writeWordhht+0x24>
  }
  uint8_t response = BCM2835_I2C_REASON_OK;
 8001a2a:	2301      	movs	r3, #1
 8001a2c:	73fb      	strb	r3, [r7, #15]
  return response == BCM2835_I2C_REASON_OK ;
 8001a2e:	7bfb      	ldrb	r3, [r7, #15]
 8001a30:	2b01      	cmp	r3, #1
 8001a32:	bf0c      	ite	eq
 8001a34:	2301      	moveq	r3, #1
 8001a36:	2300      	movne	r3, #0
 8001a38:	b2db      	uxtb	r3, r3
}
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	3710      	adds	r7, #16
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bd80      	pop	{r7, pc}
 8001a42:	bf00      	nop
 8001a44:	20000394 	.word	0x20000394
 8001a48:	20000604 	.word	0x20000604

08001a4c <_Z10writeByteshhhPh>:

bool writeBytes(uint8_t devAddr, uint8_t regAddr, uint8_t length, uint8_t *data){
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b088      	sub	sp, #32
 8001a50:	af04      	add	r7, sp, #16
 8001a52:	603b      	str	r3, [r7, #0]
 8001a54:	4603      	mov	r3, r0
 8001a56:	71fb      	strb	r3, [r7, #7]
 8001a58:	460b      	mov	r3, r1
 8001a5a:	71bb      	strb	r3, [r7, #6]
 8001a5c:	4613      	mov	r3, r2
 8001a5e:	717b      	strb	r3, [r7, #5]
  uint8_t i;
  for (i = 0; i < length; i++) {
 8001a60:	2300      	movs	r3, #0
 8001a62:	73fb      	strb	r3, [r7, #15]
 8001a64:	7bfa      	ldrb	r2, [r7, #15]
 8001a66:	797b      	ldrb	r3, [r7, #5]
 8001a68:	429a      	cmp	r2, r3
 8001a6a:	d20a      	bcs.n	8001a82 <_Z10writeByteshhhPh+0x36>
    sendBuf[i] = data[i] ;
 8001a6c:	7bfb      	ldrb	r3, [r7, #15]
 8001a6e:	683a      	ldr	r2, [r7, #0]
 8001a70:	441a      	add	r2, r3
 8001a72:	7bfb      	ldrb	r3, [r7, #15]
 8001a74:	7811      	ldrb	r1, [r2, #0]
 8001a76:	4a16      	ldr	r2, [pc, #88]	; (8001ad0 <_Z10writeByteshhhPh+0x84>)
 8001a78:	54d1      	strb	r1, [r2, r3]
  for (i = 0; i < length; i++) {
 8001a7a:	7bfb      	ldrb	r3, [r7, #15]
 8001a7c:	3301      	adds	r3, #1
 8001a7e:	73fb      	strb	r3, [r7, #15]
 8001a80:	e7f0      	b.n	8001a64 <_Z10writeByteshhhPh+0x18>
  }
  while(HAL_I2C_Mem_Write(&hi2c1,devAddr,regAddr, I2C_MEMADD_SIZE_8BIT, (uint8_t*)sendBuf, length,I2CDLY) != HAL_OK){
 8001a82:	79fb      	ldrb	r3, [r7, #7]
 8001a84:	b299      	uxth	r1, r3
 8001a86:	79bb      	ldrb	r3, [r7, #6]
 8001a88:	b29a      	uxth	r2, r3
 8001a8a:	797b      	ldrb	r3, [r7, #5]
 8001a8c:	b29b      	uxth	r3, r3
 8001a8e:	2001      	movs	r0, #1
 8001a90:	9002      	str	r0, [sp, #8]
 8001a92:	9301      	str	r3, [sp, #4]
 8001a94:	4b0e      	ldr	r3, [pc, #56]	; (8001ad0 <_Z10writeByteshhhPh+0x84>)
 8001a96:	9300      	str	r3, [sp, #0]
 8001a98:	2301      	movs	r3, #1
 8001a9a:	480e      	ldr	r0, [pc, #56]	; (8001ad4 <_Z10writeByteshhhPh+0x88>)
 8001a9c:	f004 fa12 	bl	8005ec4 <HAL_I2C_Mem_Write>
 8001aa0:	4603      	mov	r3, r0
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	bf14      	ite	ne
 8001aa6:	2301      	movne	r3, #1
 8001aa8:	2300      	moveq	r3, #0
 8001aaa:	b2db      	uxtb	r3, r3
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d002      	beq.n	8001ab6 <_Z10writeByteshhhPh+0x6a>
     MX_I2C1_Init();
 8001ab0:	f001 fd02 	bl	80034b8 <MX_I2C1_Init>
  while(HAL_I2C_Mem_Write(&hi2c1,devAddr,regAddr, I2C_MEMADD_SIZE_8BIT, (uint8_t*)sendBuf, length,I2CDLY) != HAL_OK){
 8001ab4:	e7e5      	b.n	8001a82 <_Z10writeByteshhhPh+0x36>
  }
  uint8_t response = BCM2835_I2C_REASON_OK;
 8001ab6:	2301      	movs	r3, #1
 8001ab8:	73bb      	strb	r3, [r7, #14]
  return response == BCM2835_I2C_REASON_OK ;
 8001aba:	7bbb      	ldrb	r3, [r7, #14]
 8001abc:	2b01      	cmp	r3, #1
 8001abe:	bf0c      	ite	eq
 8001ac0:	2301      	moveq	r3, #1
 8001ac2:	2300      	movne	r3, #0
 8001ac4:	b2db      	uxtb	r3, r3
}
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	3710      	adds	r7, #16
 8001aca:	46bd      	mov	sp, r7
 8001acc:	bd80      	pop	{r7, pc}
 8001ace:	bf00      	nop
 8001ad0:	20000394 	.word	0x20000394
 8001ad4:	20000604 	.word	0x20000604

08001ad8 <_Z17MPU6050_resetFIFOv>:
  //   Quaternions[2] = (((uint32_t)MPU6050_RX_buf[8] << 24) |  ((uint32_t)MPU6050_RX_buf[9] << 16) |  ((uint32_t)MPU6050_RX_buf[10] << 8) | MPU6050_RX_buf[11]);
  //   Quaternions[3] = (((uint32_t)MPU6050_RX_buf[12] << 24) | ((uint32_t)MPU6050_RX_buf[13] << 16) | ((uint32_t)MPU6050_RX_buf[14] << 8) | MPU6050_RX_buf[15]);
}

void MPU6050_resetFIFO()
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	af00      	add	r7, sp, #0
    writeBit(MPU6050_Adresse, MPU6050_RA_USER_CTRL, MPU6050_USERCTRL_FIFO_RESET_BIT, true); //reset FIFO
 8001adc:	2301      	movs	r3, #1
 8001ade:	2202      	movs	r2, #2
 8001ae0:	216a      	movs	r1, #106	; 0x6a
 8001ae2:	20d0      	movs	r0, #208	; 0xd0
 8001ae4:	f7ff fe36 	bl	8001754 <_Z8writeBithhhh>
}
 8001ae8:	bf00      	nop
 8001aea:	bd80      	pop	{r7, pc}

08001aec <_Z27MPU6050_readQuaternionBytesv>:

void MPU6050_readQuaternionBytes()
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	af00      	add	r7, sp, #0
    readBytes(MPU6050_Adresse, MPU6050_RA_FIFO_COUNTH, 2, MPU6050_RX_buf);  //get FIFO count
 8001af0:	4b17      	ldr	r3, [pc, #92]	; (8001b50 <_Z27MPU6050_readQuaternionBytesv+0x64>)
 8001af2:	2202      	movs	r2, #2
 8001af4:	2172      	movs	r1, #114	; 0x72
 8001af6:	20d0      	movs	r0, #208	; 0xd0
 8001af8:	f7ff fdb6 	bl	8001668 <_Z9readByteshhhPh>
    FIFOCounter = (((uint16_t)MPU6050_RX_buf[0]) << 8) | MPU6050_RX_buf[1];
 8001afc:	4b14      	ldr	r3, [pc, #80]	; (8001b50 <_Z27MPU6050_readQuaternionBytesv+0x64>)
 8001afe:	781b      	ldrb	r3, [r3, #0]
 8001b00:	021b      	lsls	r3, r3, #8
 8001b02:	b21a      	sxth	r2, r3
 8001b04:	4b12      	ldr	r3, [pc, #72]	; (8001b50 <_Z27MPU6050_readQuaternionBytesv+0x64>)
 8001b06:	785b      	ldrb	r3, [r3, #1]
 8001b08:	b21b      	sxth	r3, r3
 8001b0a:	4313      	orrs	r3, r2
 8001b0c:	b21b      	sxth	r3, r3
 8001b0e:	b29a      	uxth	r2, r3
 8001b10:	4b10      	ldr	r3, [pc, #64]	; (8001b54 <_Z27MPU6050_readQuaternionBytesv+0x68>)
 8001b12:	801a      	strh	r2, [r3, #0]
    while (FIFOCounter < 42)
 8001b14:	4b0f      	ldr	r3, [pc, #60]	; (8001b54 <_Z27MPU6050_readQuaternionBytesv+0x68>)
 8001b16:	881b      	ldrh	r3, [r3, #0]
 8001b18:	2b29      	cmp	r3, #41	; 0x29
 8001b1a:	d817      	bhi.n	8001b4c <_Z27MPU6050_readQuaternionBytesv+0x60>
    {
      HAL_GPIO_TogglePin(ONBOARD_WRITE_2_GPIO_Port, ONBOARD_WRITE_2_Pin);   //debug Pin
 8001b1c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001b20:	480d      	ldr	r0, [pc, #52]	; (8001b58 <_Z27MPU6050_readQuaternionBytesv+0x6c>)
 8001b22:	f004 f859 	bl	8005bd8 <HAL_GPIO_TogglePin>
      readBytes(MPU6050_Adresse, MPU6050_RA_FIFO_COUNTH, 2, MPU6050_RX_buf);  //get FIFO count
 8001b26:	4b0a      	ldr	r3, [pc, #40]	; (8001b50 <_Z27MPU6050_readQuaternionBytesv+0x64>)
 8001b28:	2202      	movs	r2, #2
 8001b2a:	2172      	movs	r1, #114	; 0x72
 8001b2c:	20d0      	movs	r0, #208	; 0xd0
 8001b2e:	f7ff fd9b 	bl	8001668 <_Z9readByteshhhPh>
      FIFOCounter = (((uint16_t)MPU6050_RX_buf[0]) << 8) | MPU6050_RX_buf[1];
 8001b32:	4b07      	ldr	r3, [pc, #28]	; (8001b50 <_Z27MPU6050_readQuaternionBytesv+0x64>)
 8001b34:	781b      	ldrb	r3, [r3, #0]
 8001b36:	021b      	lsls	r3, r3, #8
 8001b38:	b21a      	sxth	r2, r3
 8001b3a:	4b05      	ldr	r3, [pc, #20]	; (8001b50 <_Z27MPU6050_readQuaternionBytesv+0x64>)
 8001b3c:	785b      	ldrb	r3, [r3, #1]
 8001b3e:	b21b      	sxth	r3, r3
 8001b40:	4313      	orrs	r3, r2
 8001b42:	b21b      	sxth	r3, r3
 8001b44:	b29a      	uxth	r2, r3
 8001b46:	4b03      	ldr	r3, [pc, #12]	; (8001b54 <_Z27MPU6050_readQuaternionBytesv+0x68>)
 8001b48:	801a      	strh	r2, [r3, #0]
    while (FIFOCounter < 42)
 8001b4a:	e7e3      	b.n	8001b14 <_Z27MPU6050_readQuaternionBytesv+0x28>
    }
}
 8001b4c:	bf00      	nop
 8001b4e:	bd80      	pop	{r7, pc}
 8001b50:	20000494 	.word	0x20000494
 8001b54:	200004a4 	.word	0x200004a4
 8001b58:	40020800 	.word	0x40020800

08001b5c <_Z28MPU6050_ConvertToQuaternionsv>:

void MPU6050_ConvertToQuaternions()
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	af00      	add	r7, sp, #0
    if ((FIFOCounter == 42) | (FIFOCounter == 84))
 8001b60:	4b42      	ldr	r3, [pc, #264]	; (8001c6c <_Z28MPU6050_ConvertToQuaternionsv+0x110>)
 8001b62:	881b      	ldrh	r3, [r3, #0]
 8001b64:	2b2a      	cmp	r3, #42	; 0x2a
 8001b66:	bf0c      	ite	eq
 8001b68:	2301      	moveq	r3, #1
 8001b6a:	2300      	movne	r3, #0
 8001b6c:	b2da      	uxtb	r2, r3
 8001b6e:	4b3f      	ldr	r3, [pc, #252]	; (8001c6c <_Z28MPU6050_ConvertToQuaternionsv+0x110>)
 8001b70:	881b      	ldrh	r3, [r3, #0]
 8001b72:	2b54      	cmp	r3, #84	; 0x54
 8001b74:	bf0c      	ite	eq
 8001b76:	2301      	moveq	r3, #1
 8001b78:	2300      	movne	r3, #0
 8001b7a:	b2db      	uxtb	r3, r3
 8001b7c:	4313      	orrs	r3, r2
 8001b7e:	b2db      	uxtb	r3, r3
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d071      	beq.n	8001c68 <_Z28MPU6050_ConvertToQuaternionsv+0x10c>
    {
      readBytes(MPU6050_Adresse, MPU6050_RA_FIFO_R_W, 16, MPU6050_RX_buf);      //get FIFO data
 8001b84:	4b3a      	ldr	r3, [pc, #232]	; (8001c70 <_Z28MPU6050_ConvertToQuaternionsv+0x114>)
 8001b86:	2210      	movs	r2, #16
 8001b88:	2174      	movs	r1, #116	; 0x74
 8001b8a:	20d0      	movs	r0, #208	; 0xd0
 8001b8c:	f7ff fd6c 	bl	8001668 <_Z9readByteshhhPh>
      MPUoutputQuaternion[0] = (float)(((int32_t)MPU6050_RX_buf[0] << 24) |  ((int32_t)MPU6050_RX_buf[1] << 16) |  ((int32_t)MPU6050_RX_buf[2] << 8) |  MPU6050_RX_buf[3 ]) / 1073741824;
 8001b90:	4b37      	ldr	r3, [pc, #220]	; (8001c70 <_Z28MPU6050_ConvertToQuaternionsv+0x114>)
 8001b92:	781b      	ldrb	r3, [r3, #0]
 8001b94:	061a      	lsls	r2, r3, #24
 8001b96:	4b36      	ldr	r3, [pc, #216]	; (8001c70 <_Z28MPU6050_ConvertToQuaternionsv+0x114>)
 8001b98:	785b      	ldrb	r3, [r3, #1]
 8001b9a:	041b      	lsls	r3, r3, #16
 8001b9c:	431a      	orrs	r2, r3
 8001b9e:	4b34      	ldr	r3, [pc, #208]	; (8001c70 <_Z28MPU6050_ConvertToQuaternionsv+0x114>)
 8001ba0:	789b      	ldrb	r3, [r3, #2]
 8001ba2:	021b      	lsls	r3, r3, #8
 8001ba4:	4313      	orrs	r3, r2
 8001ba6:	4a32      	ldr	r2, [pc, #200]	; (8001c70 <_Z28MPU6050_ConvertToQuaternionsv+0x114>)
 8001ba8:	78d2      	ldrb	r2, [r2, #3]
 8001baa:	4313      	orrs	r3, r2
 8001bac:	4618      	mov	r0, r3
 8001bae:	f7ff f8d1 	bl	8000d54 <__aeabi_i2f>
 8001bb2:	4603      	mov	r3, r0
 8001bb4:	f04f 419d 	mov.w	r1, #1317011456	; 0x4e800000
 8001bb8:	4618      	mov	r0, r3
 8001bba:	f7ff f9d3 	bl	8000f64 <__aeabi_fdiv>
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	461a      	mov	r2, r3
 8001bc2:	4b2c      	ldr	r3, [pc, #176]	; (8001c74 <_Z28MPU6050_ConvertToQuaternionsv+0x118>)
 8001bc4:	601a      	str	r2, [r3, #0]
      MPUoutputQuaternion[1] = (float)(((int32_t)MPU6050_RX_buf[4] << 24) |  ((int32_t)MPU6050_RX_buf[5] << 16) |  ((int32_t)MPU6050_RX_buf[6] << 8) |  MPU6050_RX_buf[7 ]) / 1073741824;
 8001bc6:	4b2a      	ldr	r3, [pc, #168]	; (8001c70 <_Z28MPU6050_ConvertToQuaternionsv+0x114>)
 8001bc8:	791b      	ldrb	r3, [r3, #4]
 8001bca:	061a      	lsls	r2, r3, #24
 8001bcc:	4b28      	ldr	r3, [pc, #160]	; (8001c70 <_Z28MPU6050_ConvertToQuaternionsv+0x114>)
 8001bce:	795b      	ldrb	r3, [r3, #5]
 8001bd0:	041b      	lsls	r3, r3, #16
 8001bd2:	431a      	orrs	r2, r3
 8001bd4:	4b26      	ldr	r3, [pc, #152]	; (8001c70 <_Z28MPU6050_ConvertToQuaternionsv+0x114>)
 8001bd6:	799b      	ldrb	r3, [r3, #6]
 8001bd8:	021b      	lsls	r3, r3, #8
 8001bda:	4313      	orrs	r3, r2
 8001bdc:	4a24      	ldr	r2, [pc, #144]	; (8001c70 <_Z28MPU6050_ConvertToQuaternionsv+0x114>)
 8001bde:	79d2      	ldrb	r2, [r2, #7]
 8001be0:	4313      	orrs	r3, r2
 8001be2:	4618      	mov	r0, r3
 8001be4:	f7ff f8b6 	bl	8000d54 <__aeabi_i2f>
 8001be8:	4603      	mov	r3, r0
 8001bea:	f04f 419d 	mov.w	r1, #1317011456	; 0x4e800000
 8001bee:	4618      	mov	r0, r3
 8001bf0:	f7ff f9b8 	bl	8000f64 <__aeabi_fdiv>
 8001bf4:	4603      	mov	r3, r0
 8001bf6:	461a      	mov	r2, r3
 8001bf8:	4b1e      	ldr	r3, [pc, #120]	; (8001c74 <_Z28MPU6050_ConvertToQuaternionsv+0x118>)
 8001bfa:	605a      	str	r2, [r3, #4]
      MPUoutputQuaternion[2] = (float)(((int32_t)MPU6050_RX_buf[8] << 24) |  ((int32_t)MPU6050_RX_buf[9] << 16) |  ((int32_t)MPU6050_RX_buf[10] << 8) | MPU6050_RX_buf[11]) / 1073741824;
 8001bfc:	4b1c      	ldr	r3, [pc, #112]	; (8001c70 <_Z28MPU6050_ConvertToQuaternionsv+0x114>)
 8001bfe:	7a1b      	ldrb	r3, [r3, #8]
 8001c00:	061a      	lsls	r2, r3, #24
 8001c02:	4b1b      	ldr	r3, [pc, #108]	; (8001c70 <_Z28MPU6050_ConvertToQuaternionsv+0x114>)
 8001c04:	7a5b      	ldrb	r3, [r3, #9]
 8001c06:	041b      	lsls	r3, r3, #16
 8001c08:	431a      	orrs	r2, r3
 8001c0a:	4b19      	ldr	r3, [pc, #100]	; (8001c70 <_Z28MPU6050_ConvertToQuaternionsv+0x114>)
 8001c0c:	7a9b      	ldrb	r3, [r3, #10]
 8001c0e:	021b      	lsls	r3, r3, #8
 8001c10:	4313      	orrs	r3, r2
 8001c12:	4a17      	ldr	r2, [pc, #92]	; (8001c70 <_Z28MPU6050_ConvertToQuaternionsv+0x114>)
 8001c14:	7ad2      	ldrb	r2, [r2, #11]
 8001c16:	4313      	orrs	r3, r2
 8001c18:	4618      	mov	r0, r3
 8001c1a:	f7ff f89b 	bl	8000d54 <__aeabi_i2f>
 8001c1e:	4603      	mov	r3, r0
 8001c20:	f04f 419d 	mov.w	r1, #1317011456	; 0x4e800000
 8001c24:	4618      	mov	r0, r3
 8001c26:	f7ff f99d 	bl	8000f64 <__aeabi_fdiv>
 8001c2a:	4603      	mov	r3, r0
 8001c2c:	461a      	mov	r2, r3
 8001c2e:	4b11      	ldr	r3, [pc, #68]	; (8001c74 <_Z28MPU6050_ConvertToQuaternionsv+0x118>)
 8001c30:	609a      	str	r2, [r3, #8]
      MPUoutputQuaternion[3] = (float)(((int32_t)MPU6050_RX_buf[12] << 24) | ((int32_t)MPU6050_RX_buf[13] << 16) | ((int32_t)MPU6050_RX_buf[14] << 8) | MPU6050_RX_buf[15]) / 1073741824;
 8001c32:	4b0f      	ldr	r3, [pc, #60]	; (8001c70 <_Z28MPU6050_ConvertToQuaternionsv+0x114>)
 8001c34:	7b1b      	ldrb	r3, [r3, #12]
 8001c36:	061a      	lsls	r2, r3, #24
 8001c38:	4b0d      	ldr	r3, [pc, #52]	; (8001c70 <_Z28MPU6050_ConvertToQuaternionsv+0x114>)
 8001c3a:	7b5b      	ldrb	r3, [r3, #13]
 8001c3c:	041b      	lsls	r3, r3, #16
 8001c3e:	431a      	orrs	r2, r3
 8001c40:	4b0b      	ldr	r3, [pc, #44]	; (8001c70 <_Z28MPU6050_ConvertToQuaternionsv+0x114>)
 8001c42:	7b9b      	ldrb	r3, [r3, #14]
 8001c44:	021b      	lsls	r3, r3, #8
 8001c46:	4313      	orrs	r3, r2
 8001c48:	4a09      	ldr	r2, [pc, #36]	; (8001c70 <_Z28MPU6050_ConvertToQuaternionsv+0x114>)
 8001c4a:	7bd2      	ldrb	r2, [r2, #15]
 8001c4c:	4313      	orrs	r3, r2
 8001c4e:	4618      	mov	r0, r3
 8001c50:	f7ff f880 	bl	8000d54 <__aeabi_i2f>
 8001c54:	4603      	mov	r3, r0
 8001c56:	f04f 419d 	mov.w	r1, #1317011456	; 0x4e800000
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	f7ff f982 	bl	8000f64 <__aeabi_fdiv>
 8001c60:	4603      	mov	r3, r0
 8001c62:	461a      	mov	r2, r3
 8001c64:	4b03      	ldr	r3, [pc, #12]	; (8001c74 <_Z28MPU6050_ConvertToQuaternionsv+0x118>)
 8001c66:	60da      	str	r2, [r3, #12]
    }
}
 8001c68:	bf00      	nop
 8001c6a:	bd80      	pop	{r7, pc}
 8001c6c:	200004a4 	.word	0x200004a4
 8001c70:	20000494 	.word	0x20000494
 8001c74:	200004a8 	.word	0x200004a8

08001c78 <_ZN7MPU6050C1Ev>:


/** Default constructor, uses default I2C address.
 * @see MPU6050_DEFAULT_ADDRESS
 */
MPU6050::MPU6050() {
 8001c78:	b480      	push	{r7}
 8001c7a:	b083      	sub	sp, #12
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
    devAddr = MPU6050_DEFAULT_ADDRESS;
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	22d0      	movs	r2, #208	; 0xd0
 8001c84:	719a      	strb	r2, [r3, #6]
}
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	4618      	mov	r0, r3
 8001c8a:	370c      	adds	r7, #12
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	bc80      	pop	{r7}
 8001c90:	4770      	bx	lr

08001c92 <_ZN7MPU605010initializeEv>:
 * after start-up). This function also sets both the accelerometer and the gyroscope
 * to their most sensitive settings, namely +/- 2g and +/- 250 degrees/sec, and sets
 * the clock source to use the X Gyro for reference, which is slightly better than
 * the default internal clock source.
 */
void MPU6050::initialize() {
 8001c92:	b580      	push	{r7, lr}
 8001c94:	b082      	sub	sp, #8
 8001c96:	af00      	add	r7, sp, #0
 8001c98:	6078      	str	r0, [r7, #4]
    setClockSource(MPU6050_CLOCK_PLL_XGYRO);
 8001c9a:	2101      	movs	r1, #1
 8001c9c:	6878      	ldr	r0, [r7, #4]
 8001c9e:	f000 f951 	bl	8001f44 <_ZN7MPU605014setClockSourceEh>
    setFullScaleGyroRange(MPU6050_GYRO_FS_250);
 8001ca2:	2100      	movs	r1, #0
 8001ca4:	6878      	ldr	r0, [r7, #4]
 8001ca6:	f000 f843 	bl	8001d30 <_ZN7MPU605021setFullScaleGyroRangeEh>
    setFullScaleAccelRange(MPU6050_ACCEL_FS_2);
 8001caa:	2100      	movs	r1, #0
 8001cac:	6878      	ldr	r0, [r7, #4]
 8001cae:	f000 f852 	bl	8001d56 <_ZN7MPU605022setFullScaleAccelRangeEh>
    setSleepEnabled(false); // thanks to Jack Elston for pointing this one out!
 8001cb2:	2100      	movs	r1, #0
 8001cb4:	6878      	ldr	r0, [r7, #4]
 8001cb6:	f000 f934 	bl	8001f22 <_ZN7MPU605015setSleepEnabledEb>
}
 8001cba:	bf00      	nop
 8001cbc:	3708      	adds	r7, #8
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	bd80      	pop	{r7, pc}

08001cc2 <_ZN7MPU60507setRateEh>:
/** Set gyroscope sample rate divider.
 * @param rate New sample rate divider
 * @see getRate()
 * @see MPU6050_RA_SMPLRT_DIV
 */
void MPU6050::setRate(uint8_t rate) {
 8001cc2:	b580      	push	{r7, lr}
 8001cc4:	b082      	sub	sp, #8
 8001cc6:	af00      	add	r7, sp, #0
 8001cc8:	6078      	str	r0, [r7, #4]
 8001cca:	460b      	mov	r3, r1
 8001ccc:	70fb      	strb	r3, [r7, #3]
    writeByte(devAddr, MPU6050_RA_SMPLRT_DIV, rate);
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	799b      	ldrb	r3, [r3, #6]
 8001cd2:	78fa      	ldrb	r2, [r7, #3]
 8001cd4:	2119      	movs	r1, #25
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	f7ff fe44 	bl	8001964 <_Z9writeBytehhh>
}
 8001cdc:	bf00      	nop
 8001cde:	3708      	adds	r7, #8
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	bd80      	pop	{r7, pc}

08001ce4 <_ZN7MPU605020setExternalFrameSyncEh>:
/** Set external FSYNC configuration.
 * @see getExternalFrameSync()
 * @see MPU6050_RA_CONFIG
 * @param sync New FSYNC configuration value
 */
void MPU6050::setExternalFrameSync(uint8_t sync) {
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b084      	sub	sp, #16
 8001ce8:	af02      	add	r7, sp, #8
 8001cea:	6078      	str	r0, [r7, #4]
 8001cec:	460b      	mov	r3, r1
 8001cee:	70fb      	strb	r3, [r7, #3]
    writeBits(devAddr, MPU6050_RA_CONFIG, MPU6050_CFG_EXT_SYNC_SET_BIT, MPU6050_CFG_EXT_SYNC_SET_LENGTH, sync);
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	7998      	ldrb	r0, [r3, #6]
 8001cf4:	78fb      	ldrb	r3, [r7, #3]
 8001cf6:	9300      	str	r3, [sp, #0]
 8001cf8:	2303      	movs	r3, #3
 8001cfa:	2205      	movs	r2, #5
 8001cfc:	211a      	movs	r1, #26
 8001cfe:	f7ff fda5 	bl	800184c <_Z9writeBitshhhhh>
}
 8001d02:	bf00      	nop
 8001d04:	3708      	adds	r7, #8
 8001d06:	46bd      	mov	sp, r7
 8001d08:	bd80      	pop	{r7, pc}

08001d0a <_ZN7MPU605011setDLPFModeEh>:
 * @see MPU6050_DLPF_BW_256
 * @see MPU6050_RA_CONFIG
 * @see MPU6050_CFG_DLPF_CFG_BIT
 * @see MPU6050_CFG_DLPF_CFG_LENGTH
 */
void MPU6050::setDLPFMode(uint8_t mode) {
 8001d0a:	b580      	push	{r7, lr}
 8001d0c:	b084      	sub	sp, #16
 8001d0e:	af02      	add	r7, sp, #8
 8001d10:	6078      	str	r0, [r7, #4]
 8001d12:	460b      	mov	r3, r1
 8001d14:	70fb      	strb	r3, [r7, #3]
    writeBits(devAddr, MPU6050_RA_CONFIG, MPU6050_CFG_DLPF_CFG_BIT, MPU6050_CFG_DLPF_CFG_LENGTH, mode);
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	7998      	ldrb	r0, [r3, #6]
 8001d1a:	78fb      	ldrb	r3, [r7, #3]
 8001d1c:	9300      	str	r3, [sp, #0]
 8001d1e:	2303      	movs	r3, #3
 8001d20:	2202      	movs	r2, #2
 8001d22:	211a      	movs	r1, #26
 8001d24:	f7ff fd92 	bl	800184c <_Z9writeBitshhhhh>
}
 8001d28:	bf00      	nop
 8001d2a:	3708      	adds	r7, #8
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	bd80      	pop	{r7, pc}

08001d30 <_ZN7MPU605021setFullScaleGyroRangeEh>:
 * @see MPU6050_GYRO_FS_250
 * @see MPU6050_RA_GYRO_CONFIG
 * @see MPU6050_GCONFIG_FS_SEL_BIT
 * @see MPU6050_GCONFIG_FS_SEL_LENGTH
 */
void MPU6050::setFullScaleGyroRange(uint8_t range) {
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b084      	sub	sp, #16
 8001d34:	af02      	add	r7, sp, #8
 8001d36:	6078      	str	r0, [r7, #4]
 8001d38:	460b      	mov	r3, r1
 8001d3a:	70fb      	strb	r3, [r7, #3]
    writeBits(devAddr, MPU6050_RA_GYRO_CONFIG, MPU6050_GCONFIG_FS_SEL_BIT, MPU6050_GCONFIG_FS_SEL_LENGTH, range);
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	7998      	ldrb	r0, [r3, #6]
 8001d40:	78fb      	ldrb	r3, [r7, #3]
 8001d42:	9300      	str	r3, [sp, #0]
 8001d44:	2302      	movs	r3, #2
 8001d46:	2204      	movs	r2, #4
 8001d48:	211b      	movs	r1, #27
 8001d4a:	f7ff fd7f 	bl	800184c <_Z9writeBitshhhhh>
}
 8001d4e:	bf00      	nop
 8001d50:	3708      	adds	r7, #8
 8001d52:	46bd      	mov	sp, r7
 8001d54:	bd80      	pop	{r7, pc}

08001d56 <_ZN7MPU605022setFullScaleAccelRangeEh>:
}
/** Set full-scale accelerometer range.
 * @param range New full-scale accelerometer range setting
 * @see getFullScaleAccelRange()
 */
void MPU6050::setFullScaleAccelRange(uint8_t range) {
 8001d56:	b580      	push	{r7, lr}
 8001d58:	b084      	sub	sp, #16
 8001d5a:	af02      	add	r7, sp, #8
 8001d5c:	6078      	str	r0, [r7, #4]
 8001d5e:	460b      	mov	r3, r1
 8001d60:	70fb      	strb	r3, [r7, #3]
    writeBits(devAddr, MPU6050_RA_ACCEL_CONFIG, MPU6050_ACONFIG_AFS_SEL_BIT, MPU6050_ACONFIG_AFS_SEL_LENGTH, range);
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	7998      	ldrb	r0, [r3, #6]
 8001d66:	78fb      	ldrb	r3, [r7, #3]
 8001d68:	9300      	str	r3, [sp, #0]
 8001d6a:	2302      	movs	r3, #2
 8001d6c:	2204      	movs	r2, #4
 8001d6e:	211c      	movs	r1, #28
 8001d70:	f7ff fd6c 	bl	800184c <_Z9writeBitshhhhh>
}
 8001d74:	bf00      	nop
 8001d76:	3708      	adds	r7, #8
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	bd80      	pop	{r7, pc}

08001d7c <_ZN7MPU605027setMotionDetectionThresholdEh>:
/** Set motion detection event acceleration threshold.
 * @param threshold New motion detection acceleration threshold value (LSB = 2mg)
 * @see getMotionDetectionThreshold()
 * @see MPU6050_RA_MOT_THR
 */
void MPU6050::setMotionDetectionThreshold(uint8_t threshold) {
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b082      	sub	sp, #8
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
 8001d84:	460b      	mov	r3, r1
 8001d86:	70fb      	strb	r3, [r7, #3]
    writeByte(devAddr, MPU6050_RA_MOT_THR, threshold);
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	799b      	ldrb	r3, [r3, #6]
 8001d8c:	78fa      	ldrb	r2, [r7, #3]
 8001d8e:	211f      	movs	r1, #31
 8001d90:	4618      	mov	r0, r3
 8001d92:	f7ff fde7 	bl	8001964 <_Z9writeBytehhh>
}
 8001d96:	bf00      	nop
 8001d98:	3708      	adds	r7, #8
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	bd80      	pop	{r7, pc}

08001d9e <_ZN7MPU605026setMotionDetectionDurationEh>:
/** Set motion detection event duration threshold.
 * @param duration New motion detection duration threshold value (LSB = 1ms)
 * @see getMotionDetectionDuration()
 * @see MPU6050_RA_MOT_DUR
 */
void MPU6050::setMotionDetectionDuration(uint8_t duration) {
 8001d9e:	b580      	push	{r7, lr}
 8001da0:	b082      	sub	sp, #8
 8001da2:	af00      	add	r7, sp, #0
 8001da4:	6078      	str	r0, [r7, #4]
 8001da6:	460b      	mov	r3, r1
 8001da8:	70fb      	strb	r3, [r7, #3]
    writeByte(devAddr, MPU6050_RA_MOT_DUR, duration);
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	799b      	ldrb	r3, [r3, #6]
 8001dae:	78fa      	ldrb	r2, [r7, #3]
 8001db0:	2120      	movs	r1, #32
 8001db2:	4618      	mov	r0, r3
 8001db4:	f7ff fdd6 	bl	8001964 <_Z9writeBytehhh>
}
 8001db8:	bf00      	nop
 8001dba:	3708      	adds	r7, #8
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	bd80      	pop	{r7, pc}

08001dc0 <_ZN7MPU605031setZeroMotionDetectionThresholdEh>:
/** Set zero motion detection event acceleration threshold.
 * @param threshold New zero motion detection acceleration threshold value (LSB = 2mg)
 * @see getZeroMotionDetectionThreshold()
 * @see MPU6050_RA_ZRMOT_THR
 */
void MPU6050::setZeroMotionDetectionThreshold(uint8_t threshold) {
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b082      	sub	sp, #8
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
 8001dc8:	460b      	mov	r3, r1
 8001dca:	70fb      	strb	r3, [r7, #3]
    writeByte(devAddr, MPU6050_RA_ZRMOT_THR, threshold);
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	799b      	ldrb	r3, [r3, #6]
 8001dd0:	78fa      	ldrb	r2, [r7, #3]
 8001dd2:	2121      	movs	r1, #33	; 0x21
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	f7ff fdc5 	bl	8001964 <_Z9writeBytehhh>
}
 8001dda:	bf00      	nop
 8001ddc:	3708      	adds	r7, #8
 8001dde:	46bd      	mov	sp, r7
 8001de0:	bd80      	pop	{r7, pc}

08001de2 <_ZN7MPU605030setZeroMotionDetectionDurationEh>:
/** Set zero motion detection event duration threshold.
 * @param duration New zero motion detection duration threshold value (LSB = 1ms)
 * @see getZeroMotionDetectionDuration()
 * @see MPU6050_RA_ZRMOT_DUR
 */
void MPU6050::setZeroMotionDetectionDuration(uint8_t duration) {
 8001de2:	b580      	push	{r7, lr}
 8001de4:	b082      	sub	sp, #8
 8001de6:	af00      	add	r7, sp, #0
 8001de8:	6078      	str	r0, [r7, #4]
 8001dea:	460b      	mov	r3, r1
 8001dec:	70fb      	strb	r3, [r7, #3]
    writeByte(devAddr, MPU6050_RA_ZRMOT_DUR, duration);
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	799b      	ldrb	r3, [r3, #6]
 8001df2:	78fa      	ldrb	r2, [r7, #3]
 8001df4:	2122      	movs	r1, #34	; 0x22
 8001df6:	4618      	mov	r0, r3
 8001df8:	f7ff fdb4 	bl	8001964 <_Z9writeBytehhh>
}
 8001dfc:	bf00      	nop
 8001dfe:	3708      	adds	r7, #8
 8001e00:	46bd      	mov	sp, r7
 8001e02:	bd80      	pop	{r7, pc}

08001e04 <_ZN7MPU605015setSlaveAddressEhh>:
 * @param num Slave number (0-3)
 * @param address New address for specified slave
 * @see getSlaveAddress()
 * @see MPU6050_RA_I2C_SLV0_ADDR
 */
void MPU6050::setSlaveAddress(uint8_t num, uint8_t address) {
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b082      	sub	sp, #8
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
 8001e0c:	460b      	mov	r3, r1
 8001e0e:	70fb      	strb	r3, [r7, #3]
 8001e10:	4613      	mov	r3, r2
 8001e12:	70bb      	strb	r3, [r7, #2]
    if (num > 3) return;
 8001e14:	78fb      	ldrb	r3, [r7, #3]
 8001e16:	2b03      	cmp	r3, #3
 8001e18:	d80d      	bhi.n	8001e36 <_ZN7MPU605015setSlaveAddressEhh+0x32>
    writeByte(devAddr, MPU6050_RA_I2C_SLV0_ADDR + num*3, address);
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	7998      	ldrb	r0, [r3, #6]
 8001e1e:	78fb      	ldrb	r3, [r7, #3]
 8001e20:	461a      	mov	r2, r3
 8001e22:	0052      	lsls	r2, r2, #1
 8001e24:	4413      	add	r3, r2
 8001e26:	b2db      	uxtb	r3, r3
 8001e28:	3325      	adds	r3, #37	; 0x25
 8001e2a:	b2db      	uxtb	r3, r3
 8001e2c:	78ba      	ldrb	r2, [r7, #2]
 8001e2e:	4619      	mov	r1, r3
 8001e30:	f7ff fd98 	bl	8001964 <_Z9writeBytehhh>
 8001e34:	e000      	b.n	8001e38 <_ZN7MPU605015setSlaveAddressEhh+0x34>
    if (num > 3) return;
 8001e36:	bf00      	nop
}
 8001e38:	3708      	adds	r7, #8
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	bd80      	pop	{r7, pc}

08001e3e <_ZN7MPU605013setIntEnabledEh>:
 * @param enabled New interrupt enabled status
 * @see getIntFreefallEnabled()
 * @see MPU6050_RA_INT_ENABLE
 * @see MPU6050_INTERRUPT_FF_BIT
 **/
void MPU6050::setIntEnabled(uint8_t enabled) {
 8001e3e:	b580      	push	{r7, lr}
 8001e40:	b082      	sub	sp, #8
 8001e42:	af00      	add	r7, sp, #0
 8001e44:	6078      	str	r0, [r7, #4]
 8001e46:	460b      	mov	r3, r1
 8001e48:	70fb      	strb	r3, [r7, #3]
    writeByte(devAddr, MPU6050_RA_INT_ENABLE, enabled);
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	799b      	ldrb	r3, [r3, #6]
 8001e4e:	78fa      	ldrb	r2, [r7, #3]
 8001e50:	2138      	movs	r1, #56	; 0x38
 8001e52:	4618      	mov	r0, r3
 8001e54:	f7ff fd86 	bl	8001964 <_Z9writeBytehhh>
}
 8001e58:	bf00      	nop
 8001e5a:	3708      	adds	r7, #8
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	bd80      	pop	{r7, pc}

08001e60 <_ZN7MPU605012getIntStatusEv>:
 * for getting multiple INT statuses, since each single bit read clears
 * all of them because it has to read the whole byte.
 * @return Current interrupt status
 * @see MPU6050_RA_INT_STATUS
 */
uint8_t MPU6050::getIntStatus() {
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b082      	sub	sp, #8
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
    readByte(devAddr, MPU6050_RA_INT_STATUS, buffer);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	7998      	ldrb	r0, [r3, #6]
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	3307      	adds	r3, #7
 8001e70:	461a      	mov	r2, r3
 8001e72:	213a      	movs	r1, #58	; 0x3a
 8001e74:	f7ff fbbe 	bl	80015f4 <_Z8readBytehhPh>
    return buffer[0];
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	79db      	ldrb	r3, [r3, #7]
}
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	3708      	adds	r7, #8
 8001e80:	46bd      	mov	sp, r7
 8001e82:	bd80      	pop	{r7, pc}

08001e84 <_ZN7MPU605014setFIFOEnabledEb>:
 * @param enabled New FIFO enabled status
 * @see getFIFOEnabled()
 * @see MPU6050_RA_USER_CTRL
 * @see MPU6050_USERCTRL_FIFO_EN_BIT
 */
void MPU6050::setFIFOEnabled(bool enabled) {
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b082      	sub	sp, #8
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
 8001e8c:	460b      	mov	r3, r1
 8001e8e:	70fb      	strb	r3, [r7, #3]
    writeBit(devAddr, MPU6050_RA_USER_CTRL, MPU6050_USERCTRL_FIFO_EN_BIT, enabled);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	7998      	ldrb	r0, [r3, #6]
 8001e94:	78fb      	ldrb	r3, [r7, #3]
 8001e96:	2206      	movs	r2, #6
 8001e98:	216a      	movs	r1, #106	; 0x6a
 8001e9a:	f7ff fc5b 	bl	8001754 <_Z8writeBithhhh>
}
 8001e9e:	bf00      	nop
 8001ea0:	3708      	adds	r7, #8
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	bd80      	pop	{r7, pc}

08001ea6 <_ZN7MPU605023setI2CMasterModeEnabledEb>:
 * @param enabled New I2C Master Mode enabled status
 * @see getI2CMasterModeEnabled()
 * @see MPU6050_RA_USER_CTRL
 * @see MPU6050_USERCTRL_I2C_MST_EN_BIT
 */
void MPU6050::setI2CMasterModeEnabled(bool enabled) {
 8001ea6:	b580      	push	{r7, lr}
 8001ea8:	b082      	sub	sp, #8
 8001eaa:	af00      	add	r7, sp, #0
 8001eac:	6078      	str	r0, [r7, #4]
 8001eae:	460b      	mov	r3, r1
 8001eb0:	70fb      	strb	r3, [r7, #3]
    writeBit(devAddr, MPU6050_RA_USER_CTRL, MPU6050_USERCTRL_I2C_MST_EN_BIT, enabled);
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	7998      	ldrb	r0, [r3, #6]
 8001eb6:	78fb      	ldrb	r3, [r7, #3]
 8001eb8:	2205      	movs	r2, #5
 8001eba:	216a      	movs	r1, #106	; 0x6a
 8001ebc:	f7ff fc4a 	bl	8001754 <_Z8writeBithhhh>
}
 8001ec0:	bf00      	nop
 8001ec2:	3708      	adds	r7, #8
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	bd80      	pop	{r7, pc}

08001ec8 <_ZN7MPU60509resetFIFOEv>:
 * This bit resets the FIFO buffer when set to 1 while FIFO_EN equals 0. This
 * bit automatically clears to 0 after the reset has been triggered.
 * @see MPU6050_RA_USER_CTRL
 * @see MPU6050_USERCTRL_FIFO_RESET_BIT
 */
void MPU6050::resetFIFO() {
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b082      	sub	sp, #8
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
    writeBit(devAddr, MPU6050_RA_USER_CTRL, MPU6050_USERCTRL_FIFO_RESET_BIT, true);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	7998      	ldrb	r0, [r3, #6]
 8001ed4:	2301      	movs	r3, #1
 8001ed6:	2202      	movs	r2, #2
 8001ed8:	216a      	movs	r1, #106	; 0x6a
 8001eda:	f7ff fc3b 	bl	8001754 <_Z8writeBithhhh>
}
 8001ede:	bf00      	nop
 8001ee0:	3708      	adds	r7, #8
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	bd80      	pop	{r7, pc}

08001ee6 <_ZN7MPU605014resetI2CMasterEv>:
 * This bit resets the I2C Master when set to 1 while I2C_MST_EN equals 0.
 * This bit automatically clears to 0 after the reset has been triggered.
 * @see MPU6050_RA_USER_CTRL
 * @see MPU6050_USERCTRL_I2C_MST_RESET_BIT
 */
void MPU6050::resetI2CMaster() {
 8001ee6:	b580      	push	{r7, lr}
 8001ee8:	b082      	sub	sp, #8
 8001eea:	af00      	add	r7, sp, #0
 8001eec:	6078      	str	r0, [r7, #4]
    writeBit(devAddr, MPU6050_RA_USER_CTRL, MPU6050_USERCTRL_I2C_MST_RESET_BIT, true);
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	7998      	ldrb	r0, [r3, #6]
 8001ef2:	2301      	movs	r3, #1
 8001ef4:	2201      	movs	r2, #1
 8001ef6:	216a      	movs	r1, #106	; 0x6a
 8001ef8:	f7ff fc2c 	bl	8001754 <_Z8writeBithhhh>
}
 8001efc:	bf00      	nop
 8001efe:	3708      	adds	r7, #8
 8001f00:	46bd      	mov	sp, r7
 8001f02:	bd80      	pop	{r7, pc}

08001f04 <_ZN7MPU60505resetEv>:
/** Trigger a full device reset.
 * A small delay of ~50ms may be desirable after triggering a reset.
 * @see MPU6050_RA_PWR_MGMT_1
 * @see MPU6050_PWR1_DEVICE_RESET_BIT
 */
void MPU6050::reset() {
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b082      	sub	sp, #8
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
    writeBit(devAddr, MPU6050_RA_PWR_MGMT_1, MPU6050_PWR1_DEVICE_RESET_BIT, true);
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	7998      	ldrb	r0, [r3, #6]
 8001f10:	2301      	movs	r3, #1
 8001f12:	2207      	movs	r2, #7
 8001f14:	216b      	movs	r1, #107	; 0x6b
 8001f16:	f7ff fc1d 	bl	8001754 <_Z8writeBithhhh>
}
 8001f1a:	bf00      	nop
 8001f1c:	3708      	adds	r7, #8
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	bd80      	pop	{r7, pc}

08001f22 <_ZN7MPU605015setSleepEnabledEb>:
 * @param enabled New sleep mode enabled status
 * @see getSleepEnabled()
 * @see MPU6050_RA_PWR_MGMT_1
 * @see MPU6050_PWR1_SLEEP_BIT
 */
void MPU6050::setSleepEnabled(bool enabled) {
 8001f22:	b580      	push	{r7, lr}
 8001f24:	b082      	sub	sp, #8
 8001f26:	af00      	add	r7, sp, #0
 8001f28:	6078      	str	r0, [r7, #4]
 8001f2a:	460b      	mov	r3, r1
 8001f2c:	70fb      	strb	r3, [r7, #3]
    writeBit(devAddr, MPU6050_RA_PWR_MGMT_1, MPU6050_PWR1_SLEEP_BIT, enabled);
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	7998      	ldrb	r0, [r3, #6]
 8001f32:	78fb      	ldrb	r3, [r7, #3]
 8001f34:	2206      	movs	r2, #6
 8001f36:	216b      	movs	r1, #107	; 0x6b
 8001f38:	f7ff fc0c 	bl	8001754 <_Z8writeBithhhh>
}
 8001f3c:	bf00      	nop
 8001f3e:	3708      	adds	r7, #8
 8001f40:	46bd      	mov	sp, r7
 8001f42:	bd80      	pop	{r7, pc}

08001f44 <_ZN7MPU605014setClockSourceEh>:
 * @see getClockSource()
 * @see MPU6050_RA_PWR_MGMT_1
 * @see MPU6050_PWR1_CLKSEL_BIT
 * @see MPU6050_PWR1_CLKSEL_LENGTH
 */
void MPU6050::setClockSource(uint8_t source) {
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b084      	sub	sp, #16
 8001f48:	af02      	add	r7, sp, #8
 8001f4a:	6078      	str	r0, [r7, #4]
 8001f4c:	460b      	mov	r3, r1
 8001f4e:	70fb      	strb	r3, [r7, #3]
    writeBits(devAddr, MPU6050_RA_PWR_MGMT_1, MPU6050_PWR1_CLKSEL_BIT, MPU6050_PWR1_CLKSEL_LENGTH, source);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	7998      	ldrb	r0, [r3, #6]
 8001f54:	78fb      	ldrb	r3, [r7, #3]
 8001f56:	9300      	str	r3, [sp, #0]
 8001f58:	2303      	movs	r3, #3
 8001f5a:	2202      	movs	r2, #2
 8001f5c:	216b      	movs	r1, #107	; 0x6b
 8001f5e:	f7ff fc75 	bl	800184c <_Z9writeBitshhhhh>
}
 8001f62:	bf00      	nop
 8001f64:	3708      	adds	r7, #8
 8001f66:	46bd      	mov	sp, r7
 8001f68:	bd80      	pop	{r7, pc}

08001f6a <_ZN7MPU605012getFIFOCountEv>:
 * number is in turn the number of bytes that can be read from the FIFO buffer
 * and it is directly proportional to the number of samples available given the
 * set of sensor data bound to be stored in the FIFO (register 35 and 36).
 * @return Current FIFO buffer size
 */
uint16_t MPU6050::getFIFOCount() {
 8001f6a:	b580      	push	{r7, lr}
 8001f6c:	b082      	sub	sp, #8
 8001f6e:	af00      	add	r7, sp, #0
 8001f70:	6078      	str	r0, [r7, #4]
    readBytes(devAddr, MPU6050_RA_FIFO_COUNTH, 2, buffer);
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	7998      	ldrb	r0, [r3, #6]
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	3307      	adds	r3, #7
 8001f7a:	2202      	movs	r2, #2
 8001f7c:	2172      	movs	r1, #114	; 0x72
 8001f7e:	f7ff fb73 	bl	8001668 <_Z9readByteshhhPh>
    return (((uint16_t)buffer[0]) << 8) | buffer[1];
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	79db      	ldrb	r3, [r3, #7]
 8001f86:	021b      	lsls	r3, r3, #8
 8001f88:	b21a      	sxth	r2, r3
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	7a1b      	ldrb	r3, [r3, #8]
 8001f8e:	b21b      	sxth	r3, r3
 8001f90:	4313      	orrs	r3, r2
 8001f92:	b21b      	sxth	r3, r3
 8001f94:	b29b      	uxth	r3, r3
}
 8001f96:	4618      	mov	r0, r3
 8001f98:	3708      	adds	r7, #8
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	bd80      	pop	{r7, pc}

08001f9e <_ZN7MPU605012getFIFOBytesEPhh>:
 */
uint8_t MPU6050::getFIFOByte() {
    readByte(devAddr, MPU6050_RA_FIFO_R_W, buffer);
    return buffer[0];
}
void MPU6050::getFIFOBytes(uint8_t *data, uint8_t length) {
 8001f9e:	b580      	push	{r7, lr}
 8001fa0:	b084      	sub	sp, #16
 8001fa2:	af00      	add	r7, sp, #0
 8001fa4:	60f8      	str	r0, [r7, #12]
 8001fa6:	60b9      	str	r1, [r7, #8]
 8001fa8:	4613      	mov	r3, r2
 8001faa:	71fb      	strb	r3, [r7, #7]
    if(length > 0){
 8001fac:	79fb      	ldrb	r3, [r7, #7]
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d007      	beq.n	8001fc2 <_ZN7MPU605012getFIFOBytesEPhh+0x24>
        readBytes(devAddr, MPU6050_RA_FIFO_R_W, length, data);
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	7998      	ldrb	r0, [r3, #6]
 8001fb6:	79fa      	ldrb	r2, [r7, #7]
 8001fb8:	68bb      	ldr	r3, [r7, #8]
 8001fba:	2174      	movs	r1, #116	; 0x74
 8001fbc:	f7ff fb54 	bl	8001668 <_Z9readByteshhhPh>
    } else {
    	*data = 0;
    }
}
 8001fc0:	e002      	b.n	8001fc8 <_ZN7MPU605012getFIFOBytesEPhh+0x2a>
    	*data = 0;
 8001fc2:	68bb      	ldr	r3, [r7, #8]
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	701a      	strb	r2, [r3, #0]
}
 8001fc8:	bf00      	nop
 8001fca:	3710      	adds	r7, #16
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	bd80      	pop	{r7, pc}

08001fd0 <_ZN7MPU605015setOTPBankValidEb>:

uint8_t MPU6050::getOTPBankValid() {
    readBit(devAddr, MPU6050_RA_XG_OFFS_TC, MPU6050_TC_OTP_BNK_VLD_BIT, buffer);
    return buffer[0];
}
void MPU6050::setOTPBankValid(bool enabled) {
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b082      	sub	sp, #8
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
 8001fd8:	460b      	mov	r3, r1
 8001fda:	70fb      	strb	r3, [r7, #3]
    writeBit(devAddr, MPU6050_RA_XG_OFFS_TC, MPU6050_TC_OTP_BNK_VLD_BIT, enabled);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	7998      	ldrb	r0, [r3, #6]
 8001fe0:	78fb      	ldrb	r3, [r7, #3]
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	2100      	movs	r1, #0
 8001fe6:	f7ff fbb5 	bl	8001754 <_Z8writeBithhhh>
}
 8001fea:	bf00      	nop
 8001fec:	3708      	adds	r7, #8
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	bd80      	pop	{r7, pc}

08001ff2 <_ZN7MPU605016getXGyroOffsetTCEv>:
int8_t MPU6050::getXGyroOffsetTC() {
 8001ff2:	b580      	push	{r7, lr}
 8001ff4:	b084      	sub	sp, #16
 8001ff6:	af02      	add	r7, sp, #8
 8001ff8:	6078      	str	r0, [r7, #4]
    readBits(devAddr, MPU6050_RA_XG_OFFS_TC, MPU6050_TC_OFFSET_BIT, MPU6050_TC_OFFSET_LENGTH, buffer);
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	7998      	ldrb	r0, [r3, #6]
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	3307      	adds	r3, #7
 8002002:	9300      	str	r3, [sp, #0]
 8002004:	2306      	movs	r3, #6
 8002006:	2206      	movs	r2, #6
 8002008:	2100      	movs	r1, #0
 800200a:	f7ff fa95 	bl	8001538 <_Z8readBitshhhhPh>
    return buffer[0];
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	79db      	ldrb	r3, [r3, #7]
 8002012:	b25b      	sxtb	r3, r3
}
 8002014:	4618      	mov	r0, r3
 8002016:	3708      	adds	r7, #8
 8002018:	46bd      	mov	sp, r7
 800201a:	bd80      	pop	{r7, pc}

0800201c <_ZN7MPU605016setXGyroOffsetTCEa>:
void MPU6050::setXGyroOffsetTC(int8_t offset) {
 800201c:	b580      	push	{r7, lr}
 800201e:	b084      	sub	sp, #16
 8002020:	af02      	add	r7, sp, #8
 8002022:	6078      	str	r0, [r7, #4]
 8002024:	460b      	mov	r3, r1
 8002026:	70fb      	strb	r3, [r7, #3]
    writeBits(devAddr, MPU6050_RA_XG_OFFS_TC, MPU6050_TC_OFFSET_BIT, MPU6050_TC_OFFSET_LENGTH, offset);
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	7998      	ldrb	r0, [r3, #6]
 800202c:	78fb      	ldrb	r3, [r7, #3]
 800202e:	9300      	str	r3, [sp, #0]
 8002030:	2306      	movs	r3, #6
 8002032:	2206      	movs	r2, #6
 8002034:	2100      	movs	r1, #0
 8002036:	f7ff fc09 	bl	800184c <_Z9writeBitshhhhh>
}
 800203a:	bf00      	nop
 800203c:	3708      	adds	r7, #8
 800203e:	46bd      	mov	sp, r7
 8002040:	bd80      	pop	{r7, pc}

08002042 <_ZN7MPU605016getYGyroOffsetTCEv>:

// YG_OFFS_TC register

int8_t MPU6050::getYGyroOffsetTC() {
 8002042:	b580      	push	{r7, lr}
 8002044:	b084      	sub	sp, #16
 8002046:	af02      	add	r7, sp, #8
 8002048:	6078      	str	r0, [r7, #4]
    readBits(devAddr, MPU6050_RA_YG_OFFS_TC, MPU6050_TC_OFFSET_BIT, MPU6050_TC_OFFSET_LENGTH, buffer);
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	7998      	ldrb	r0, [r3, #6]
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	3307      	adds	r3, #7
 8002052:	9300      	str	r3, [sp, #0]
 8002054:	2306      	movs	r3, #6
 8002056:	2206      	movs	r2, #6
 8002058:	2101      	movs	r1, #1
 800205a:	f7ff fa6d 	bl	8001538 <_Z8readBitshhhhPh>
    return buffer[0];
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	79db      	ldrb	r3, [r3, #7]
 8002062:	b25b      	sxtb	r3, r3
}
 8002064:	4618      	mov	r0, r3
 8002066:	3708      	adds	r7, #8
 8002068:	46bd      	mov	sp, r7
 800206a:	bd80      	pop	{r7, pc}

0800206c <_ZN7MPU605016setYGyroOffsetTCEa>:
void MPU6050::setYGyroOffsetTC(int8_t offset) {
 800206c:	b580      	push	{r7, lr}
 800206e:	b084      	sub	sp, #16
 8002070:	af02      	add	r7, sp, #8
 8002072:	6078      	str	r0, [r7, #4]
 8002074:	460b      	mov	r3, r1
 8002076:	70fb      	strb	r3, [r7, #3]
    writeBits(devAddr, MPU6050_RA_YG_OFFS_TC, MPU6050_TC_OFFSET_BIT, MPU6050_TC_OFFSET_LENGTH, offset);
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	7998      	ldrb	r0, [r3, #6]
 800207c:	78fb      	ldrb	r3, [r7, #3]
 800207e:	9300      	str	r3, [sp, #0]
 8002080:	2306      	movs	r3, #6
 8002082:	2206      	movs	r2, #6
 8002084:	2101      	movs	r1, #1
 8002086:	f7ff fbe1 	bl	800184c <_Z9writeBitshhhhh>
}
 800208a:	bf00      	nop
 800208c:	3708      	adds	r7, #8
 800208e:	46bd      	mov	sp, r7
 8002090:	bd80      	pop	{r7, pc}

08002092 <_ZN7MPU605016getZGyroOffsetTCEv>:

// ZG_OFFS_TC register

int8_t MPU6050::getZGyroOffsetTC() {
 8002092:	b580      	push	{r7, lr}
 8002094:	b084      	sub	sp, #16
 8002096:	af02      	add	r7, sp, #8
 8002098:	6078      	str	r0, [r7, #4]
    readBits(devAddr, MPU6050_RA_ZG_OFFS_TC, MPU6050_TC_OFFSET_BIT, MPU6050_TC_OFFSET_LENGTH, buffer);
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	7998      	ldrb	r0, [r3, #6]
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	3307      	adds	r3, #7
 80020a2:	9300      	str	r3, [sp, #0]
 80020a4:	2306      	movs	r3, #6
 80020a6:	2206      	movs	r2, #6
 80020a8:	2102      	movs	r1, #2
 80020aa:	f7ff fa45 	bl	8001538 <_Z8readBitshhhhPh>
    return buffer[0];
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	79db      	ldrb	r3, [r3, #7]
 80020b2:	b25b      	sxtb	r3, r3
}
 80020b4:	4618      	mov	r0, r3
 80020b6:	3708      	adds	r7, #8
 80020b8:	46bd      	mov	sp, r7
 80020ba:	bd80      	pop	{r7, pc}

080020bc <_ZN7MPU605016setZGyroOffsetTCEa>:
void MPU6050::setZGyroOffsetTC(int8_t offset) {
 80020bc:	b580      	push	{r7, lr}
 80020be:	b084      	sub	sp, #16
 80020c0:	af02      	add	r7, sp, #8
 80020c2:	6078      	str	r0, [r7, #4]
 80020c4:	460b      	mov	r3, r1
 80020c6:	70fb      	strb	r3, [r7, #3]
    writeBits(devAddr, MPU6050_RA_ZG_OFFS_TC, MPU6050_TC_OFFSET_BIT, MPU6050_TC_OFFSET_LENGTH, offset);
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	7998      	ldrb	r0, [r3, #6]
 80020cc:	78fb      	ldrb	r3, [r7, #3]
 80020ce:	9300      	str	r3, [sp, #0]
 80020d0:	2306      	movs	r3, #6
 80020d2:	2206      	movs	r2, #6
 80020d4:	2102      	movs	r1, #2
 80020d6:	f7ff fbb9 	bl	800184c <_Z9writeBitshhhhh>
}
 80020da:	bf00      	nop
 80020dc:	3708      	adds	r7, #8
 80020de:	46bd      	mov	sp, r7
 80020e0:	bd80      	pop	{r7, pc}

080020e2 <_ZN7MPU605015setXAccelOffsetEs>:

int16_t MPU6050::getXAccelOffset() {
    readBytes(devAddr, MPU6050_RA_XA_OFFS_H, 2, buffer);
    return (((int16_t)buffer[0]) << 8) | buffer[1];
}
void MPU6050::setXAccelOffset(int16_t offset) {
 80020e2:	b580      	push	{r7, lr}
 80020e4:	b082      	sub	sp, #8
 80020e6:	af00      	add	r7, sp, #0
 80020e8:	6078      	str	r0, [r7, #4]
 80020ea:	460b      	mov	r3, r1
 80020ec:	807b      	strh	r3, [r7, #2]
    writeWord(devAddr, MPU6050_RA_XA_OFFS_H, offset);
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	799b      	ldrb	r3, [r3, #6]
 80020f2:	887a      	ldrh	r2, [r7, #2]
 80020f4:	2106      	movs	r1, #6
 80020f6:	4618      	mov	r0, r3
 80020f8:	f7ff fc6c 	bl	80019d4 <_Z9writeWordhht>
}
 80020fc:	bf00      	nop
 80020fe:	3708      	adds	r7, #8
 8002100:	46bd      	mov	sp, r7
 8002102:	bd80      	pop	{r7, pc}

08002104 <_ZN7MPU605015setYAccelOffsetEs>:

int16_t MPU6050::getYAccelOffset() {
    readBytes(devAddr, MPU6050_RA_YA_OFFS_H, 2, buffer);
    return (((int16_t)buffer[0]) << 8) | buffer[1];
}
void MPU6050::setYAccelOffset(int16_t offset) {
 8002104:	b580      	push	{r7, lr}
 8002106:	b082      	sub	sp, #8
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
 800210c:	460b      	mov	r3, r1
 800210e:	807b      	strh	r3, [r7, #2]
    writeWord(devAddr, MPU6050_RA_YA_OFFS_H, offset);
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	799b      	ldrb	r3, [r3, #6]
 8002114:	887a      	ldrh	r2, [r7, #2]
 8002116:	2108      	movs	r1, #8
 8002118:	4618      	mov	r0, r3
 800211a:	f7ff fc5b 	bl	80019d4 <_Z9writeWordhht>
}
 800211e:	bf00      	nop
 8002120:	3708      	adds	r7, #8
 8002122:	46bd      	mov	sp, r7
 8002124:	bd80      	pop	{r7, pc}

08002126 <_ZN7MPU605015setZAccelOffsetEs>:

int16_t MPU6050::getZAccelOffset() {
    readBytes(devAddr, MPU6050_RA_ZA_OFFS_H, 2, buffer);
    return (((int16_t)buffer[0]) << 8) | buffer[1];
}
void MPU6050::setZAccelOffset(int16_t offset) {
 8002126:	b580      	push	{r7, lr}
 8002128:	b082      	sub	sp, #8
 800212a:	af00      	add	r7, sp, #0
 800212c:	6078      	str	r0, [r7, #4]
 800212e:	460b      	mov	r3, r1
 8002130:	807b      	strh	r3, [r7, #2]
    writeWord(devAddr, MPU6050_RA_ZA_OFFS_H, offset);
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	799b      	ldrb	r3, [r3, #6]
 8002136:	887a      	ldrh	r2, [r7, #2]
 8002138:	210a      	movs	r1, #10
 800213a:	4618      	mov	r0, r3
 800213c:	f7ff fc4a 	bl	80019d4 <_Z9writeWordhht>
}
 8002140:	bf00      	nop
 8002142:	3708      	adds	r7, #8
 8002144:	46bd      	mov	sp, r7
 8002146:	bd80      	pop	{r7, pc}

08002148 <_ZN7MPU605014setXGyroOffsetEs>:

int16_t MPU6050::getXGyroOffset() {
    readBytes(devAddr, MPU6050_RA_XG_OFFS_USRH, 2, buffer);
    return (((int16_t)buffer[0]) << 8) | buffer[1];
}
void MPU6050::setXGyroOffset(int16_t offset) {
 8002148:	b580      	push	{r7, lr}
 800214a:	b082      	sub	sp, #8
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
 8002150:	460b      	mov	r3, r1
 8002152:	807b      	strh	r3, [r7, #2]
    writeWord(devAddr, MPU6050_RA_XG_OFFS_USRH, offset);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	799b      	ldrb	r3, [r3, #6]
 8002158:	887a      	ldrh	r2, [r7, #2]
 800215a:	2113      	movs	r1, #19
 800215c:	4618      	mov	r0, r3
 800215e:	f7ff fc39 	bl	80019d4 <_Z9writeWordhht>
}
 8002162:	bf00      	nop
 8002164:	3708      	adds	r7, #8
 8002166:	46bd      	mov	sp, r7
 8002168:	bd80      	pop	{r7, pc}

0800216a <_ZN7MPU605014setYGyroOffsetEs>:

int16_t MPU6050::getYGyroOffset() {
    readBytes(devAddr, MPU6050_RA_YG_OFFS_USRH, 2, buffer);
    return (((int16_t)buffer[0]) << 8) | buffer[1];
}
void MPU6050::setYGyroOffset(int16_t offset) {
 800216a:	b580      	push	{r7, lr}
 800216c:	b082      	sub	sp, #8
 800216e:	af00      	add	r7, sp, #0
 8002170:	6078      	str	r0, [r7, #4]
 8002172:	460b      	mov	r3, r1
 8002174:	807b      	strh	r3, [r7, #2]
    writeWord(devAddr, MPU6050_RA_YG_OFFS_USRH, offset);
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	799b      	ldrb	r3, [r3, #6]
 800217a:	887a      	ldrh	r2, [r7, #2]
 800217c:	2115      	movs	r1, #21
 800217e:	4618      	mov	r0, r3
 8002180:	f7ff fc28 	bl	80019d4 <_Z9writeWordhht>
}
 8002184:	bf00      	nop
 8002186:	3708      	adds	r7, #8
 8002188:	46bd      	mov	sp, r7
 800218a:	bd80      	pop	{r7, pc}

0800218c <_ZN7MPU605014setZGyroOffsetEs>:

int16_t MPU6050::getZGyroOffset() {
    readBytes(devAddr, MPU6050_RA_ZG_OFFS_USRH, 2, buffer);
    return (((int16_t)buffer[0]) << 8) | buffer[1];
}
void MPU6050::setZGyroOffset(int16_t offset) {
 800218c:	b580      	push	{r7, lr}
 800218e:	b082      	sub	sp, #8
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
 8002194:	460b      	mov	r3, r1
 8002196:	807b      	strh	r3, [r7, #2]
    writeWord(devAddr, MPU6050_RA_ZG_OFFS_USRH, offset);
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	799b      	ldrb	r3, [r3, #6]
 800219c:	887a      	ldrh	r2, [r7, #2]
 800219e:	2117      	movs	r1, #23
 80021a0:	4618      	mov	r0, r3
 80021a2:	f7ff fc17 	bl	80019d4 <_Z9writeWordhht>
}
 80021a6:	bf00      	nop
 80021a8:	3708      	adds	r7, #8
 80021aa:	46bd      	mov	sp, r7
 80021ac:	bd80      	pop	{r7, pc}

080021ae <_ZN7MPU605013setDMPEnabledEb>:

bool MPU6050::getDMPEnabled() {
    readBit(devAddr, MPU6050_RA_USER_CTRL, MPU6050_USERCTRL_DMP_EN_BIT, buffer);
    return buffer[0];
}
void MPU6050::setDMPEnabled(bool enabled) {
 80021ae:	b580      	push	{r7, lr}
 80021b0:	b082      	sub	sp, #8
 80021b2:	af00      	add	r7, sp, #0
 80021b4:	6078      	str	r0, [r7, #4]
 80021b6:	460b      	mov	r3, r1
 80021b8:	70fb      	strb	r3, [r7, #3]
    writeBit(devAddr, MPU6050_RA_USER_CTRL, MPU6050_USERCTRL_DMP_EN_BIT, enabled);
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	7998      	ldrb	r0, [r3, #6]
 80021be:	78fb      	ldrb	r3, [r7, #3]
 80021c0:	2207      	movs	r2, #7
 80021c2:	216a      	movs	r1, #106	; 0x6a
 80021c4:	f7ff fac6 	bl	8001754 <_Z8writeBithhhh>
}
 80021c8:	bf00      	nop
 80021ca:	3708      	adds	r7, #8
 80021cc:	46bd      	mov	sp, r7
 80021ce:	bd80      	pop	{r7, pc}

080021d0 <_ZN7MPU60508resetDMPEv>:
void MPU6050::resetDMP() {
 80021d0:	b580      	push	{r7, lr}
 80021d2:	b082      	sub	sp, #8
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
    writeBit(devAddr, MPU6050_RA_USER_CTRL, MPU6050_USERCTRL_DMP_RESET_BIT, true);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	7998      	ldrb	r0, [r3, #6]
 80021dc:	2301      	movs	r3, #1
 80021de:	2203      	movs	r2, #3
 80021e0:	216a      	movs	r1, #106	; 0x6a
 80021e2:	f7ff fab7 	bl	8001754 <_Z8writeBithhhh>
}
 80021e6:	bf00      	nop
 80021e8:	3708      	adds	r7, #8
 80021ea:	46bd      	mov	sp, r7
 80021ec:	bd80      	pop	{r7, pc}

080021ee <_ZN7MPU605013setMemoryBankEhbb>:

// BANK_SEL register

void MPU6050::setMemoryBank(uint8_t bank, bool prefetchEnabled, bool userBank) {
 80021ee:	b580      	push	{r7, lr}
 80021f0:	b082      	sub	sp, #8
 80021f2:	af00      	add	r7, sp, #0
 80021f4:	6078      	str	r0, [r7, #4]
 80021f6:	4608      	mov	r0, r1
 80021f8:	4611      	mov	r1, r2
 80021fa:	461a      	mov	r2, r3
 80021fc:	4603      	mov	r3, r0
 80021fe:	70fb      	strb	r3, [r7, #3]
 8002200:	460b      	mov	r3, r1
 8002202:	70bb      	strb	r3, [r7, #2]
 8002204:	4613      	mov	r3, r2
 8002206:	707b      	strb	r3, [r7, #1]
    bank &= 0x1F;
 8002208:	78fb      	ldrb	r3, [r7, #3]
 800220a:	f003 031f 	and.w	r3, r3, #31
 800220e:	70fb      	strb	r3, [r7, #3]
    if (userBank) bank |= 0x20;
 8002210:	787b      	ldrb	r3, [r7, #1]
 8002212:	2b00      	cmp	r3, #0
 8002214:	d003      	beq.n	800221e <_ZN7MPU605013setMemoryBankEhbb+0x30>
 8002216:	78fb      	ldrb	r3, [r7, #3]
 8002218:	f043 0320 	orr.w	r3, r3, #32
 800221c:	70fb      	strb	r3, [r7, #3]
    if (prefetchEnabled) bank |= 0x40;
 800221e:	78bb      	ldrb	r3, [r7, #2]
 8002220:	2b00      	cmp	r3, #0
 8002222:	d003      	beq.n	800222c <_ZN7MPU605013setMemoryBankEhbb+0x3e>
 8002224:	78fb      	ldrb	r3, [r7, #3]
 8002226:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800222a:	70fb      	strb	r3, [r7, #3]
    writeByte(devAddr, MPU6050_RA_BANK_SEL, bank);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	799b      	ldrb	r3, [r3, #6]
 8002230:	78fa      	ldrb	r2, [r7, #3]
 8002232:	216d      	movs	r1, #109	; 0x6d
 8002234:	4618      	mov	r0, r3
 8002236:	f7ff fb95 	bl	8001964 <_Z9writeBytehhh>
}
 800223a:	bf00      	nop
 800223c:	3708      	adds	r7, #8
 800223e:	46bd      	mov	sp, r7
 8002240:	bd80      	pop	{r7, pc}

08002242 <_ZN7MPU605021setMemoryStartAddressEh>:

// MEM_START_ADDR register

void MPU6050::setMemoryStartAddress(uint8_t address) {
 8002242:	b580      	push	{r7, lr}
 8002244:	b082      	sub	sp, #8
 8002246:	af00      	add	r7, sp, #0
 8002248:	6078      	str	r0, [r7, #4]
 800224a:	460b      	mov	r3, r1
 800224c:	70fb      	strb	r3, [r7, #3]
    writeByte(devAddr, MPU6050_RA_MEM_START_ADDR, address);
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	799b      	ldrb	r3, [r3, #6]
 8002252:	78fa      	ldrb	r2, [r7, #3]
 8002254:	216e      	movs	r1, #110	; 0x6e
 8002256:	4618      	mov	r0, r3
 8002258:	f7ff fb84 	bl	8001964 <_Z9writeBytehhh>
}
 800225c:	bf00      	nop
 800225e:	3708      	adds	r7, #8
 8002260:	46bd      	mov	sp, r7
 8002262:	bd80      	pop	{r7, pc}

08002264 <_ZN7MPU605015readMemoryBlockEPhthh>:
    return buffer[0];
}
void MPU6050::writeMemoryByte(uint8_t data) {
    writeByte(devAddr, MPU6050_RA_MEM_R_W, data);
}
void MPU6050::readMemoryBlock(uint8_t *data, uint16_t dataSize, uint8_t bank, uint8_t address) {
 8002264:	b580      	push	{r7, lr}
 8002266:	b086      	sub	sp, #24
 8002268:	af00      	add	r7, sp, #0
 800226a:	60f8      	str	r0, [r7, #12]
 800226c:	60b9      	str	r1, [r7, #8]
 800226e:	4611      	mov	r1, r2
 8002270:	461a      	mov	r2, r3
 8002272:	460b      	mov	r3, r1
 8002274:	80fb      	strh	r3, [r7, #6]
 8002276:	4613      	mov	r3, r2
 8002278:	717b      	strb	r3, [r7, #5]
    setMemoryBank(bank);
 800227a:	7979      	ldrb	r1, [r7, #5]
 800227c:	2300      	movs	r3, #0
 800227e:	2200      	movs	r2, #0
 8002280:	68f8      	ldr	r0, [r7, #12]
 8002282:	f7ff ffb4 	bl	80021ee <_ZN7MPU605013setMemoryBankEhbb>
    setMemoryStartAddress(address);
 8002286:	f897 3020 	ldrb.w	r3, [r7, #32]
 800228a:	4619      	mov	r1, r3
 800228c:	68f8      	ldr	r0, [r7, #12]
 800228e:	f7ff ffd8 	bl	8002242 <_ZN7MPU605021setMemoryStartAddressEh>
    uint8_t chunkSize;
    for (uint16_t i = 0; i < dataSize;) {
 8002292:	2300      	movs	r3, #0
 8002294:	82bb      	strh	r3, [r7, #20]
 8002296:	8aba      	ldrh	r2, [r7, #20]
 8002298:	88fb      	ldrh	r3, [r7, #6]
 800229a:	429a      	cmp	r2, r3
 800229c:	d244      	bcs.n	8002328 <_ZN7MPU605015readMemoryBlockEPhthh+0xc4>
        // determine correct chunk size according to bank position and data size
        chunkSize = MPU6050_DMP_MEMORY_CHUNK_SIZE;
 800229e:	2310      	movs	r3, #16
 80022a0:	75fb      	strb	r3, [r7, #23]

        // make sure we don't go past the data size
        if (i + chunkSize > dataSize) chunkSize = dataSize - i;
 80022a2:	8aba      	ldrh	r2, [r7, #20]
 80022a4:	7dfb      	ldrb	r3, [r7, #23]
 80022a6:	441a      	add	r2, r3
 80022a8:	88fb      	ldrh	r3, [r7, #6]
 80022aa:	429a      	cmp	r2, r3
 80022ac:	dd05      	ble.n	80022ba <_ZN7MPU605015readMemoryBlockEPhthh+0x56>
 80022ae:	88fb      	ldrh	r3, [r7, #6]
 80022b0:	b2da      	uxtb	r2, r3
 80022b2:	8abb      	ldrh	r3, [r7, #20]
 80022b4:	b2db      	uxtb	r3, r3
 80022b6:	1ad3      	subs	r3, r2, r3
 80022b8:	75fb      	strb	r3, [r7, #23]

        // make sure this chunk doesn't go past the bank boundary (256 bytes)
        if (chunkSize > 256 - address) chunkSize = 256 - address;
 80022ba:	7dfa      	ldrb	r2, [r7, #23]
 80022bc:	f897 3020 	ldrb.w	r3, [r7, #32]
 80022c0:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 80022c4:	429a      	cmp	r2, r3
 80022c6:	dd03      	ble.n	80022d0 <_ZN7MPU605015readMemoryBlockEPhthh+0x6c>
 80022c8:	f897 3020 	ldrb.w	r3, [r7, #32]
 80022cc:	425b      	negs	r3, r3
 80022ce:	75fb      	strb	r3, [r7, #23]

        // read the chunk of data as specified
        readBytes(devAddr, MPU6050_RA_MEM_R_W, chunkSize, data + i);
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	7998      	ldrb	r0, [r3, #6]
 80022d4:	8abb      	ldrh	r3, [r7, #20]
 80022d6:	68ba      	ldr	r2, [r7, #8]
 80022d8:	4413      	add	r3, r2
 80022da:	7dfa      	ldrb	r2, [r7, #23]
 80022dc:	216f      	movs	r1, #111	; 0x6f
 80022de:	f7ff f9c3 	bl	8001668 <_Z9readByteshhhPh>
        
        // increase byte index by [chunkSize]
        i += chunkSize;
 80022e2:	7dfb      	ldrb	r3, [r7, #23]
 80022e4:	b29a      	uxth	r2, r3
 80022e6:	8abb      	ldrh	r3, [r7, #20]
 80022e8:	4413      	add	r3, r2
 80022ea:	82bb      	strh	r3, [r7, #20]

        // uint8_t automatically wraps to 0 at 256
        address += chunkSize;
 80022ec:	f897 2020 	ldrb.w	r2, [r7, #32]
 80022f0:	7dfb      	ldrb	r3, [r7, #23]
 80022f2:	4413      	add	r3, r2
 80022f4:	f887 3020 	strb.w	r3, [r7, #32]

        // if we aren't done, update bank (if necessary) and address
        if (i < dataSize) {
 80022f8:	8aba      	ldrh	r2, [r7, #20]
 80022fa:	88fb      	ldrh	r3, [r7, #6]
 80022fc:	429a      	cmp	r2, r3
 80022fe:	d2ca      	bcs.n	8002296 <_ZN7MPU605015readMemoryBlockEPhthh+0x32>
            if (address == 0) bank++;
 8002300:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002304:	2b00      	cmp	r3, #0
 8002306:	d102      	bne.n	800230e <_ZN7MPU605015readMemoryBlockEPhthh+0xaa>
 8002308:	797b      	ldrb	r3, [r7, #5]
 800230a:	3301      	adds	r3, #1
 800230c:	717b      	strb	r3, [r7, #5]
            setMemoryBank(bank);
 800230e:	7979      	ldrb	r1, [r7, #5]
 8002310:	2300      	movs	r3, #0
 8002312:	2200      	movs	r2, #0
 8002314:	68f8      	ldr	r0, [r7, #12]
 8002316:	f7ff ff6a 	bl	80021ee <_ZN7MPU605013setMemoryBankEhbb>
            setMemoryStartAddress(address);
 800231a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800231e:	4619      	mov	r1, r3
 8002320:	68f8      	ldr	r0, [r7, #12]
 8002322:	f7ff ff8e 	bl	8002242 <_ZN7MPU605021setMemoryStartAddressEh>
    for (uint16_t i = 0; i < dataSize;) {
 8002326:	e7b6      	b.n	8002296 <_ZN7MPU605015readMemoryBlockEPhthh+0x32>
        }
    }
}
 8002328:	bf00      	nop
 800232a:	3718      	adds	r7, #24
 800232c:	46bd      	mov	sp, r7
 800232e:	bd80      	pop	{r7, pc}

08002330 <_ZN7MPU605016writeMemoryBlockEPKhthhbb>:
bool MPU6050::writeMemoryBlock(const uint8_t *data, uint16_t dataSize, uint8_t bank, uint8_t address, bool verify, bool useProgMem) {
 8002330:	b580      	push	{r7, lr}
 8002332:	b088      	sub	sp, #32
 8002334:	af00      	add	r7, sp, #0
 8002336:	60f8      	str	r0, [r7, #12]
 8002338:	60b9      	str	r1, [r7, #8]
 800233a:	4611      	mov	r1, r2
 800233c:	461a      	mov	r2, r3
 800233e:	460b      	mov	r3, r1
 8002340:	80fb      	strh	r3, [r7, #6]
 8002342:	4613      	mov	r3, r2
 8002344:	717b      	strb	r3, [r7, #5]
    setMemoryBank(bank);
 8002346:	7979      	ldrb	r1, [r7, #5]
 8002348:	2300      	movs	r3, #0
 800234a:	2200      	movs	r2, #0
 800234c:	68f8      	ldr	r0, [r7, #12]
 800234e:	f7ff ff4e 	bl	80021ee <_ZN7MPU605013setMemoryBankEhbb>
    setMemoryStartAddress(address);
 8002352:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8002356:	4619      	mov	r1, r3
 8002358:	68f8      	ldr	r0, [r7, #12]
 800235a:	f7ff ff72 	bl	8002242 <_ZN7MPU605021setMemoryStartAddressEh>
    uint8_t chunkSize;
    uint8_t *verifyBuffer=0;
 800235e:	2300      	movs	r3, #0
 8002360:	61bb      	str	r3, [r7, #24]
    uint8_t *progBuffer=0;
 8002362:	2300      	movs	r3, #0
 8002364:	617b      	str	r3, [r7, #20]
    uint16_t i;
    uint8_t j;
    if (verify) verifyBuffer = (uint8_t *)malloc(MPU6050_DMP_MEMORY_CHUNK_SIZE);
 8002366:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800236a:	2b00      	cmp	r3, #0
 800236c:	d004      	beq.n	8002378 <_ZN7MPU605016writeMemoryBlockEPKhthhbb+0x48>
 800236e:	2010      	movs	r0, #16
 8002370:	f00c f866 	bl	800e440 <malloc>
 8002374:	4603      	mov	r3, r0
 8002376:	61bb      	str	r3, [r7, #24]
    if (useProgMem) progBuffer = (uint8_t *)malloc(MPU6050_DMP_MEMORY_CHUNK_SIZE);
 8002378:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800237c:	2b00      	cmp	r3, #0
 800237e:	d004      	beq.n	800238a <_ZN7MPU605016writeMemoryBlockEPKhthhbb+0x5a>
 8002380:	2010      	movs	r0, #16
 8002382:	f00c f85d 	bl	800e440 <malloc>
 8002386:	4603      	mov	r3, r0
 8002388:	617b      	str	r3, [r7, #20]
    for (i = 0; i < dataSize;) {
 800238a:	2300      	movs	r3, #0
 800238c:	827b      	strh	r3, [r7, #18]
 800238e:	8a7a      	ldrh	r2, [r7, #18]
 8002390:	88fb      	ldrh	r3, [r7, #6]
 8002392:	429a      	cmp	r2, r3
 8002394:	f080 808e 	bcs.w	80024b4 <_ZN7MPU605016writeMemoryBlockEPKhthhbb+0x184>
        // determine correct chunk size according to bank position and data size
        chunkSize = MPU6050_DMP_MEMORY_CHUNK_SIZE;
 8002398:	2310      	movs	r3, #16
 800239a:	77fb      	strb	r3, [r7, #31]

        // make sure we don't go past the data size
        if (i + chunkSize > dataSize) chunkSize = dataSize - i;
 800239c:	8a7a      	ldrh	r2, [r7, #18]
 800239e:	7ffb      	ldrb	r3, [r7, #31]
 80023a0:	441a      	add	r2, r3
 80023a2:	88fb      	ldrh	r3, [r7, #6]
 80023a4:	429a      	cmp	r2, r3
 80023a6:	dd05      	ble.n	80023b4 <_ZN7MPU605016writeMemoryBlockEPKhthhbb+0x84>
 80023a8:	88fb      	ldrh	r3, [r7, #6]
 80023aa:	b2da      	uxtb	r2, r3
 80023ac:	8a7b      	ldrh	r3, [r7, #18]
 80023ae:	b2db      	uxtb	r3, r3
 80023b0:	1ad3      	subs	r3, r2, r3
 80023b2:	77fb      	strb	r3, [r7, #31]

        // make sure this chunk doesn't go past the bank boundary (256 bytes)
        if (chunkSize > 256 - address) chunkSize = 256 - address;
 80023b4:	7ffa      	ldrb	r2, [r7, #31]
 80023b6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80023ba:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 80023be:	429a      	cmp	r2, r3
 80023c0:	dd03      	ble.n	80023ca <_ZN7MPU605016writeMemoryBlockEPKhthhbb+0x9a>
 80023c2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80023c6:	425b      	negs	r3, r3
 80023c8:	77fb      	strb	r3, [r7, #31]
        
        if (useProgMem) {
 80023ca:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d013      	beq.n	80023fa <_ZN7MPU605016writeMemoryBlockEPKhthhbb+0xca>
            // write the chunk of data as specified
            for (j = 0; j < chunkSize; j++) progBuffer[j] = pgm_read_byte(data + i + j);
 80023d2:	2300      	movs	r3, #0
 80023d4:	747b      	strb	r3, [r7, #17]
 80023d6:	7c7a      	ldrb	r2, [r7, #17]
 80023d8:	7ffb      	ldrb	r3, [r7, #31]
 80023da:	429a      	cmp	r2, r3
 80023dc:	d211      	bcs.n	8002402 <_ZN7MPU605016writeMemoryBlockEPKhthhbb+0xd2>
 80023de:	8a7a      	ldrh	r2, [r7, #18]
 80023e0:	7c7b      	ldrb	r3, [r7, #17]
 80023e2:	4413      	add	r3, r2
 80023e4:	68ba      	ldr	r2, [r7, #8]
 80023e6:	441a      	add	r2, r3
 80023e8:	7c7b      	ldrb	r3, [r7, #17]
 80023ea:	6979      	ldr	r1, [r7, #20]
 80023ec:	440b      	add	r3, r1
 80023ee:	7812      	ldrb	r2, [r2, #0]
 80023f0:	701a      	strb	r2, [r3, #0]
 80023f2:	7c7b      	ldrb	r3, [r7, #17]
 80023f4:	3301      	adds	r3, #1
 80023f6:	747b      	strb	r3, [r7, #17]
 80023f8:	e7ed      	b.n	80023d6 <_ZN7MPU605016writeMemoryBlockEPKhthhbb+0xa6>
        } else {
            // write the chunk of data as specified
            progBuffer = (uint8_t *)data + i;
 80023fa:	8a7b      	ldrh	r3, [r7, #18]
 80023fc:	68ba      	ldr	r2, [r7, #8]
 80023fe:	4413      	add	r3, r2
 8002400:	617b      	str	r3, [r7, #20]
        }

        writeBytes(devAddr, MPU6050_RA_MEM_R_W, chunkSize, progBuffer);
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	7998      	ldrb	r0, [r3, #6]
 8002406:	7ffa      	ldrb	r2, [r7, #31]
 8002408:	697b      	ldr	r3, [r7, #20]
 800240a:	216f      	movs	r1, #111	; 0x6f
 800240c:	f7ff fb1e 	bl	8001a4c <_Z10writeByteshhhPh>

        // verify data if needed
        if (verify && verifyBuffer) {
 8002410:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8002414:	2b00      	cmp	r3, #0
 8002416:	d02a      	beq.n	800246e <_ZN7MPU605016writeMemoryBlockEPKhthhbb+0x13e>
 8002418:	69bb      	ldr	r3, [r7, #24]
 800241a:	2b00      	cmp	r3, #0
 800241c:	d027      	beq.n	800246e <_ZN7MPU605016writeMemoryBlockEPKhthhbb+0x13e>
            setMemoryBank(bank);
 800241e:	7979      	ldrb	r1, [r7, #5]
 8002420:	2300      	movs	r3, #0
 8002422:	2200      	movs	r2, #0
 8002424:	68f8      	ldr	r0, [r7, #12]
 8002426:	f7ff fee2 	bl	80021ee <_ZN7MPU605013setMemoryBankEhbb>
            setMemoryStartAddress(address);
 800242a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800242e:	4619      	mov	r1, r3
 8002430:	68f8      	ldr	r0, [r7, #12]
 8002432:	f7ff ff06 	bl	8002242 <_ZN7MPU605021setMemoryStartAddressEh>
            readBytes(devAddr, MPU6050_RA_MEM_R_W, chunkSize, verifyBuffer);
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	7998      	ldrb	r0, [r3, #6]
 800243a:	7ffa      	ldrb	r2, [r7, #31]
 800243c:	69bb      	ldr	r3, [r7, #24]
 800243e:	216f      	movs	r1, #111	; 0x6f
 8002440:	f7ff f912 	bl	8001668 <_Z9readByteshhhPh>
            if (memcmp(progBuffer, verifyBuffer, chunkSize) != 0) {
 8002444:	7ffb      	ldrb	r3, [r7, #31]
 8002446:	461a      	mov	r2, r3
 8002448:	69b9      	ldr	r1, [r7, #24]
 800244a:	6978      	ldr	r0, [r7, #20]
 800244c:	f00c f808 	bl	800e460 <memcmp>
 8002450:	4603      	mov	r3, r0
 8002452:	2b00      	cmp	r3, #0
 8002454:	d00b      	beq.n	800246e <_ZN7MPU605016writeMemoryBlockEPKhthhbb+0x13e>
                    Serial.print(" 0x");
                    if (verifyBuffer[i + j] < 16) Serial.print("0");
                    Serial.print(verifyBuffer[i + j], HEX);
                }
                Serial.print("\n");*/
                free(verifyBuffer);
 8002456:	69b8      	ldr	r0, [r7, #24]
 8002458:	f00b fffa 	bl	800e450 <free>
                if (useProgMem) free(progBuffer);
 800245c:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8002460:	2b00      	cmp	r3, #0
 8002462:	d002      	beq.n	800246a <_ZN7MPU605016writeMemoryBlockEPKhthhbb+0x13a>
 8002464:	6978      	ldr	r0, [r7, #20]
 8002466:	f00b fff3 	bl	800e450 <free>
                return false; // uh oh.
 800246a:	2300      	movs	r3, #0
 800246c:	e031      	b.n	80024d2 <_ZN7MPU605016writeMemoryBlockEPKhthhbb+0x1a2>
            }
        }

        // increase byte index by [chunkSize]
        i += chunkSize;
 800246e:	7ffb      	ldrb	r3, [r7, #31]
 8002470:	b29a      	uxth	r2, r3
 8002472:	8a7b      	ldrh	r3, [r7, #18]
 8002474:	4413      	add	r3, r2
 8002476:	827b      	strh	r3, [r7, #18]

        // uint8_t automatically wraps to 0 at 256
        address += chunkSize;
 8002478:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800247c:	7ffb      	ldrb	r3, [r7, #31]
 800247e:	4413      	add	r3, r2
 8002480:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28

        // if we aren't done, update bank (if necessary) and address
        if (i < dataSize) {
 8002484:	8a7a      	ldrh	r2, [r7, #18]
 8002486:	88fb      	ldrh	r3, [r7, #6]
 8002488:	429a      	cmp	r2, r3
 800248a:	d280      	bcs.n	800238e <_ZN7MPU605016writeMemoryBlockEPKhthhbb+0x5e>
            if (address == 0) bank++;
 800248c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8002490:	2b00      	cmp	r3, #0
 8002492:	d102      	bne.n	800249a <_ZN7MPU605016writeMemoryBlockEPKhthhbb+0x16a>
 8002494:	797b      	ldrb	r3, [r7, #5]
 8002496:	3301      	adds	r3, #1
 8002498:	717b      	strb	r3, [r7, #5]
            setMemoryBank(bank);
 800249a:	7979      	ldrb	r1, [r7, #5]
 800249c:	2300      	movs	r3, #0
 800249e:	2200      	movs	r2, #0
 80024a0:	68f8      	ldr	r0, [r7, #12]
 80024a2:	f7ff fea4 	bl	80021ee <_ZN7MPU605013setMemoryBankEhbb>
            setMemoryStartAddress(address);
 80024a6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80024aa:	4619      	mov	r1, r3
 80024ac:	68f8      	ldr	r0, [r7, #12]
 80024ae:	f7ff fec8 	bl	8002242 <_ZN7MPU605021setMemoryStartAddressEh>
    for (i = 0; i < dataSize;) {
 80024b2:	e76c      	b.n	800238e <_ZN7MPU605016writeMemoryBlockEPKhthhbb+0x5e>
        }
    }
    if (verify) free(verifyBuffer);
 80024b4:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d002      	beq.n	80024c2 <_ZN7MPU605016writeMemoryBlockEPKhthhbb+0x192>
 80024bc:	69b8      	ldr	r0, [r7, #24]
 80024be:	f00b ffc7 	bl	800e450 <free>
    if (useProgMem) free(progBuffer);
 80024c2:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d002      	beq.n	80024d0 <_ZN7MPU605016writeMemoryBlockEPKhthhbb+0x1a0>
 80024ca:	6978      	ldr	r0, [r7, #20]
 80024cc:	f00b ffc0 	bl	800e450 <free>
    return true;
 80024d0:	2301      	movs	r3, #1
}
 80024d2:	4618      	mov	r0, r3
 80024d4:	3720      	adds	r7, #32
 80024d6:	46bd      	mov	sp, r7
 80024d8:	bd80      	pop	{r7, pc}

080024da <_ZN7MPU605020writeProgMemoryBlockEPKhthhb>:
bool MPU6050::writeProgMemoryBlock(const uint8_t *data, uint16_t dataSize, uint8_t bank, uint8_t address, bool verify) {
 80024da:	b580      	push	{r7, lr}
 80024dc:	b088      	sub	sp, #32
 80024de:	af04      	add	r7, sp, #16
 80024e0:	60f8      	str	r0, [r7, #12]
 80024e2:	60b9      	str	r1, [r7, #8]
 80024e4:	4611      	mov	r1, r2
 80024e6:	461a      	mov	r2, r3
 80024e8:	460b      	mov	r3, r1
 80024ea:	80fb      	strh	r3, [r7, #6]
 80024ec:	4613      	mov	r3, r2
 80024ee:	717b      	strb	r3, [r7, #5]
    return writeMemoryBlock(data, dataSize, bank, address, verify, true);
 80024f0:	7979      	ldrb	r1, [r7, #5]
 80024f2:	88fa      	ldrh	r2, [r7, #6]
 80024f4:	2301      	movs	r3, #1
 80024f6:	9302      	str	r3, [sp, #8]
 80024f8:	7f3b      	ldrb	r3, [r7, #28]
 80024fa:	9301      	str	r3, [sp, #4]
 80024fc:	7e3b      	ldrb	r3, [r7, #24]
 80024fe:	9300      	str	r3, [sp, #0]
 8002500:	460b      	mov	r3, r1
 8002502:	68b9      	ldr	r1, [r7, #8]
 8002504:	68f8      	ldr	r0, [r7, #12]
 8002506:	f7ff ff13 	bl	8002330 <_ZN7MPU605016writeMemoryBlockEPKhthhbb>
 800250a:	4603      	mov	r3, r0
}
 800250c:	4618      	mov	r0, r3
 800250e:	3710      	adds	r7, #16
 8002510:	46bd      	mov	sp, r7
 8002512:	bd80      	pop	{r7, pc}

08002514 <_ZN7MPU605024writeDMPConfigurationSetEPKhtb>:
bool MPU6050::writeDMPConfigurationSet(const uint8_t *data, uint16_t dataSize, bool useProgMem) {
 8002514:	b580      	push	{r7, lr}
 8002516:	b08c      	sub	sp, #48	; 0x30
 8002518:	af04      	add	r7, sp, #16
 800251a:	60f8      	str	r0, [r7, #12]
 800251c:	60b9      	str	r1, [r7, #8]
 800251e:	4611      	mov	r1, r2
 8002520:	461a      	mov	r2, r3
 8002522:	460b      	mov	r3, r1
 8002524:	80fb      	strh	r3, [r7, #6]
 8002526:	4613      	mov	r3, r2
 8002528:	717b      	strb	r3, [r7, #5]
    uint8_t *progBuffer = 0;
 800252a:	2300      	movs	r3, #0
 800252c:	61fb      	str	r3, [r7, #28]
	uint8_t success, special;
    uint16_t i, j;
    if (useProgMem) {
 800252e:	797b      	ldrb	r3, [r7, #5]
 8002530:	2b00      	cmp	r3, #0
 8002532:	d004      	beq.n	800253e <_ZN7MPU605024writeDMPConfigurationSetEPKhtb+0x2a>
        progBuffer = (uint8_t *)malloc(8); // assume 8-byte blocks, realloc later if necessary
 8002534:	2008      	movs	r0, #8
 8002536:	f00b ff83 	bl	800e440 <malloc>
 800253a:	4603      	mov	r3, r0
 800253c:	61fb      	str	r3, [r7, #28]
    }

    // config set data is a long string of blocks with the following structure:
    // [bank] [offset] [length] [byte[0], byte[1], ..., byte[length]]
    uint8_t bank, offset, length;
    for (i = 0; i < dataSize;) {
 800253e:	2300      	movs	r3, #0
 8002540:	833b      	strh	r3, [r7, #24]
 8002542:	8b3a      	ldrh	r2, [r7, #24]
 8002544:	88fb      	ldrh	r3, [r7, #6]
 8002546:	429a      	cmp	r2, r3
 8002548:	f080 80a1 	bcs.w	800268e <_ZN7MPU605024writeDMPConfigurationSetEPKhtb+0x17a>
        if (useProgMem) {
 800254c:	797b      	ldrb	r3, [r7, #5]
 800254e:	2b00      	cmp	r3, #0
 8002550:	d018      	beq.n	8002584 <_ZN7MPU605024writeDMPConfigurationSetEPKhtb+0x70>
            bank = pgm_read_byte(data + i++);
 8002552:	8b3b      	ldrh	r3, [r7, #24]
 8002554:	1c5a      	adds	r2, r3, #1
 8002556:	833a      	strh	r2, [r7, #24]
 8002558:	461a      	mov	r2, r3
 800255a:	68bb      	ldr	r3, [r7, #8]
 800255c:	4413      	add	r3, r2
 800255e:	781b      	ldrb	r3, [r3, #0]
 8002560:	757b      	strb	r3, [r7, #21]
            offset = pgm_read_byte(data + i++);
 8002562:	8b3b      	ldrh	r3, [r7, #24]
 8002564:	1c5a      	adds	r2, r3, #1
 8002566:	833a      	strh	r2, [r7, #24]
 8002568:	461a      	mov	r2, r3
 800256a:	68bb      	ldr	r3, [r7, #8]
 800256c:	4413      	add	r3, r2
 800256e:	781b      	ldrb	r3, [r3, #0]
 8002570:	753b      	strb	r3, [r7, #20]
            length = pgm_read_byte(data + i++);
 8002572:	8b3b      	ldrh	r3, [r7, #24]
 8002574:	1c5a      	adds	r2, r3, #1
 8002576:	833a      	strh	r2, [r7, #24]
 8002578:	461a      	mov	r2, r3
 800257a:	68bb      	ldr	r3, [r7, #8]
 800257c:	4413      	add	r3, r2
 800257e:	781b      	ldrb	r3, [r3, #0]
 8002580:	74fb      	strb	r3, [r7, #19]
 8002582:	e017      	b.n	80025b4 <_ZN7MPU605024writeDMPConfigurationSetEPKhtb+0xa0>
        } else {
            bank = data[i++];
 8002584:	8b3b      	ldrh	r3, [r7, #24]
 8002586:	1c5a      	adds	r2, r3, #1
 8002588:	833a      	strh	r2, [r7, #24]
 800258a:	461a      	mov	r2, r3
 800258c:	68bb      	ldr	r3, [r7, #8]
 800258e:	4413      	add	r3, r2
 8002590:	781b      	ldrb	r3, [r3, #0]
 8002592:	757b      	strb	r3, [r7, #21]
            offset = data[i++];
 8002594:	8b3b      	ldrh	r3, [r7, #24]
 8002596:	1c5a      	adds	r2, r3, #1
 8002598:	833a      	strh	r2, [r7, #24]
 800259a:	461a      	mov	r2, r3
 800259c:	68bb      	ldr	r3, [r7, #8]
 800259e:	4413      	add	r3, r2
 80025a0:	781b      	ldrb	r3, [r3, #0]
 80025a2:	753b      	strb	r3, [r7, #20]
            length = data[i++];
 80025a4:	8b3b      	ldrh	r3, [r7, #24]
 80025a6:	1c5a      	adds	r2, r3, #1
 80025a8:	833a      	strh	r2, [r7, #24]
 80025aa:	461a      	mov	r2, r3
 80025ac:	68bb      	ldr	r3, [r7, #8]
 80025ae:	4413      	add	r3, r2
 80025b0:	781b      	ldrb	r3, [r3, #0]
 80025b2:	74fb      	strb	r3, [r7, #19]
        }

        // write data or perform special action
        if (length > 0) {
 80025b4:	7cfb      	ldrb	r3, [r7, #19]
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d03a      	beq.n	8002630 <_ZN7MPU605024writeDMPConfigurationSetEPKhtb+0x11c>
            Serial.print(bank);
            Serial.print(", offset ");
            Serial.print(offset);
            Serial.print(", length=");
            Serial.println(length);*/
            if (useProgMem) {
 80025ba:	797b      	ldrb	r3, [r7, #5]
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d01d      	beq.n	80025fc <_ZN7MPU605024writeDMPConfigurationSetEPKhtb+0xe8>
                if (sizeof(progBuffer) < length) progBuffer = (uint8_t *)realloc(progBuffer, length);
 80025c0:	7cfb      	ldrb	r3, [r7, #19]
 80025c2:	2b04      	cmp	r3, #4
 80025c4:	d905      	bls.n	80025d2 <_ZN7MPU605024writeDMPConfigurationSetEPKhtb+0xbe>
 80025c6:	7cfb      	ldrb	r3, [r7, #19]
 80025c8:	4619      	mov	r1, r3
 80025ca:	69f8      	ldr	r0, [r7, #28]
 80025cc:	f00c fc64 	bl	800ee98 <realloc>
 80025d0:	61f8      	str	r0, [r7, #28]
                for (j = 0; j < length; j++) progBuffer[j] = pgm_read_byte(data + i + j);
 80025d2:	2300      	movs	r3, #0
 80025d4:	82fb      	strh	r3, [r7, #22]
 80025d6:	7cfb      	ldrb	r3, [r7, #19]
 80025d8:	b29b      	uxth	r3, r3
 80025da:	8afa      	ldrh	r2, [r7, #22]
 80025dc:	429a      	cmp	r2, r3
 80025de:	d211      	bcs.n	8002604 <_ZN7MPU605024writeDMPConfigurationSetEPKhtb+0xf0>
 80025e0:	8b3a      	ldrh	r2, [r7, #24]
 80025e2:	8afb      	ldrh	r3, [r7, #22]
 80025e4:	4413      	add	r3, r2
 80025e6:	68ba      	ldr	r2, [r7, #8]
 80025e8:	441a      	add	r2, r3
 80025ea:	8afb      	ldrh	r3, [r7, #22]
 80025ec:	69f9      	ldr	r1, [r7, #28]
 80025ee:	440b      	add	r3, r1
 80025f0:	7812      	ldrb	r2, [r2, #0]
 80025f2:	701a      	strb	r2, [r3, #0]
 80025f4:	8afb      	ldrh	r3, [r7, #22]
 80025f6:	3301      	adds	r3, #1
 80025f8:	82fb      	strh	r3, [r7, #22]
 80025fa:	e7ec      	b.n	80025d6 <_ZN7MPU605024writeDMPConfigurationSetEPKhtb+0xc2>
            } else {
                progBuffer = (uint8_t *)data + i;
 80025fc:	8b3b      	ldrh	r3, [r7, #24]
 80025fe:	68ba      	ldr	r2, [r7, #8]
 8002600:	4413      	add	r3, r2
 8002602:	61fb      	str	r3, [r7, #28]
            }
            success = writeMemoryBlock(progBuffer, length, bank, offset, true);
 8002604:	7cfb      	ldrb	r3, [r7, #19]
 8002606:	b29a      	uxth	r2, r3
 8002608:	7d79      	ldrb	r1, [r7, #21]
 800260a:	2300      	movs	r3, #0
 800260c:	9302      	str	r3, [sp, #8]
 800260e:	2301      	movs	r3, #1
 8002610:	9301      	str	r3, [sp, #4]
 8002612:	7d3b      	ldrb	r3, [r7, #20]
 8002614:	9300      	str	r3, [sp, #0]
 8002616:	460b      	mov	r3, r1
 8002618:	69f9      	ldr	r1, [r7, #28]
 800261a:	68f8      	ldr	r0, [r7, #12]
 800261c:	f7ff fe88 	bl	8002330 <_ZN7MPU605016writeMemoryBlockEPKhthhbb>
 8002620:	4603      	mov	r3, r0
 8002622:	76fb      	strb	r3, [r7, #27]
            i += length;
 8002624:	7cfb      	ldrb	r3, [r7, #19]
 8002626:	b29a      	uxth	r2, r3
 8002628:	8b3b      	ldrh	r3, [r7, #24]
 800262a:	4413      	add	r3, r2
 800262c:	833b      	strh	r3, [r7, #24]
 800262e:	e022      	b.n	8002676 <_ZN7MPU605024writeDMPConfigurationSetEPKhtb+0x162>
            // special instruction
            // NOTE: this kind of behavior (what and when to do certain things)
            // is totally undocumented. This code is in here based on observed
            // behavior only, and exactly why (or even whether) it has to be here
            // is anybody's guess for now.
            if (useProgMem) {
 8002630:	797b      	ldrb	r3, [r7, #5]
 8002632:	2b00      	cmp	r3, #0
 8002634:	d008      	beq.n	8002648 <_ZN7MPU605024writeDMPConfigurationSetEPKhtb+0x134>
                special = pgm_read_byte(data + i++);
 8002636:	8b3b      	ldrh	r3, [r7, #24]
 8002638:	1c5a      	adds	r2, r3, #1
 800263a:	833a      	strh	r2, [r7, #24]
 800263c:	461a      	mov	r2, r3
 800263e:	68bb      	ldr	r3, [r7, #8]
 8002640:	4413      	add	r3, r2
 8002642:	781b      	ldrb	r3, [r3, #0]
 8002644:	76bb      	strb	r3, [r7, #26]
 8002646:	e007      	b.n	8002658 <_ZN7MPU605024writeDMPConfigurationSetEPKhtb+0x144>
            } else {
                special = data[i++];
 8002648:	8b3b      	ldrh	r3, [r7, #24]
 800264a:	1c5a      	adds	r2, r3, #1
 800264c:	833a      	strh	r2, [r7, #24]
 800264e:	461a      	mov	r2, r3
 8002650:	68bb      	ldr	r3, [r7, #8]
 8002652:	4413      	add	r3, r2
 8002654:	781b      	ldrb	r3, [r3, #0]
 8002656:	76bb      	strb	r3, [r7, #26]
            }
            /*Serial.print("Special command code ");
            Serial.print(special, HEX);
            Serial.println(" found...");*/
            if (special == 0x01) {
 8002658:	7ebb      	ldrb	r3, [r7, #26]
 800265a:	2b01      	cmp	r3, #1
 800265c:	d109      	bne.n	8002672 <_ZN7MPU605024writeDMPConfigurationSetEPKhtb+0x15e>
                // enable DMP-related interrupts
                
                //setIntZeroMotionEnabled(true);
                //setIntFIFOBufferOverflowEnabled(true);
                //setIntDMPEnabled(true);
                writeByte(devAddr, MPU6050_RA_INT_ENABLE, 0x32);  // single operation
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	799b      	ldrb	r3, [r3, #6]
 8002662:	2232      	movs	r2, #50	; 0x32
 8002664:	2138      	movs	r1, #56	; 0x38
 8002666:	4618      	mov	r0, r3
 8002668:	f7ff f97c 	bl	8001964 <_Z9writeBytehhh>

                success = true;
 800266c:	2301      	movs	r3, #1
 800266e:	76fb      	strb	r3, [r7, #27]
 8002670:	e001      	b.n	8002676 <_ZN7MPU605024writeDMPConfigurationSetEPKhtb+0x162>
            } else {
                // unknown special command
                success = false;
 8002672:	2300      	movs	r3, #0
 8002674:	76fb      	strb	r3, [r7, #27]
            }
        }
        
        if (!success) {
 8002676:	7efb      	ldrb	r3, [r7, #27]
 8002678:	2b00      	cmp	r3, #0
 800267a:	f47f af62 	bne.w	8002542 <_ZN7MPU605024writeDMPConfigurationSetEPKhtb+0x2e>
            if (useProgMem) free(progBuffer);
 800267e:	797b      	ldrb	r3, [r7, #5]
 8002680:	2b00      	cmp	r3, #0
 8002682:	d002      	beq.n	800268a <_ZN7MPU605024writeDMPConfigurationSetEPKhtb+0x176>
 8002684:	69f8      	ldr	r0, [r7, #28]
 8002686:	f00b fee3 	bl	800e450 <free>
            return false; // uh oh
 800268a:	2300      	movs	r3, #0
 800268c:	e006      	b.n	800269c <_ZN7MPU605024writeDMPConfigurationSetEPKhtb+0x188>
        }
    }
    if (useProgMem) free(progBuffer);
 800268e:	797b      	ldrb	r3, [r7, #5]
 8002690:	2b00      	cmp	r3, #0
 8002692:	d002      	beq.n	800269a <_ZN7MPU605024writeDMPConfigurationSetEPKhtb+0x186>
 8002694:	69f8      	ldr	r0, [r7, #28]
 8002696:	f00b fedb 	bl	800e450 <free>
    return true;
 800269a:	2301      	movs	r3, #1
}
 800269c:	4618      	mov	r0, r3
 800269e:	3720      	adds	r7, #32
 80026a0:	46bd      	mov	sp, r7
 80026a2:	bd80      	pop	{r7, pc}

080026a4 <_ZN7MPU605028writeProgDMPConfigurationSetEPKht>:
bool MPU6050::writeProgDMPConfigurationSet(const uint8_t *data, uint16_t dataSize) {
 80026a4:	b580      	push	{r7, lr}
 80026a6:	b084      	sub	sp, #16
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	60f8      	str	r0, [r7, #12]
 80026ac:	60b9      	str	r1, [r7, #8]
 80026ae:	4613      	mov	r3, r2
 80026b0:	80fb      	strh	r3, [r7, #6]
    return writeDMPConfigurationSet(data, dataSize, true);
 80026b2:	88fa      	ldrh	r2, [r7, #6]
 80026b4:	2301      	movs	r3, #1
 80026b6:	68b9      	ldr	r1, [r7, #8]
 80026b8:	68f8      	ldr	r0, [r7, #12]
 80026ba:	f7ff ff2b 	bl	8002514 <_ZN7MPU605024writeDMPConfigurationSetEPKhtb>
 80026be:	4603      	mov	r3, r0
}
 80026c0:	4618      	mov	r0, r3
 80026c2:	3710      	adds	r7, #16
 80026c4:	46bd      	mov	sp, r7
 80026c6:	bd80      	pop	{r7, pc}

080026c8 <_ZN7MPU605013setDMPConfig1Eh>:

uint8_t MPU6050::getDMPConfig1() {
    readByte(devAddr, MPU6050_RA_DMP_CFG_1, buffer);
    return buffer[0];
}
void MPU6050::setDMPConfig1(uint8_t config) {
 80026c8:	b580      	push	{r7, lr}
 80026ca:	b082      	sub	sp, #8
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
 80026d0:	460b      	mov	r3, r1
 80026d2:	70fb      	strb	r3, [r7, #3]
    writeByte(devAddr, MPU6050_RA_DMP_CFG_1, config);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	799b      	ldrb	r3, [r3, #6]
 80026d8:	78fa      	ldrb	r2, [r7, #3]
 80026da:	2170      	movs	r1, #112	; 0x70
 80026dc:	4618      	mov	r0, r3
 80026de:	f7ff f941 	bl	8001964 <_Z9writeBytehhh>
}
 80026e2:	bf00      	nop
 80026e4:	3708      	adds	r7, #8
 80026e6:	46bd      	mov	sp, r7
 80026e8:	bd80      	pop	{r7, pc}

080026ea <_ZN7MPU605013setDMPConfig2Eh>:

uint8_t MPU6050::getDMPConfig2() {
    readByte(devAddr, MPU6050_RA_DMP_CFG_2, buffer);
    return buffer[0];
}
void MPU6050::setDMPConfig2(uint8_t config) {
 80026ea:	b580      	push	{r7, lr}
 80026ec:	b082      	sub	sp, #8
 80026ee:	af00      	add	r7, sp, #0
 80026f0:	6078      	str	r0, [r7, #4]
 80026f2:	460b      	mov	r3, r1
 80026f4:	70fb      	strb	r3, [r7, #3]
    writeByte(devAddr, MPU6050_RA_DMP_CFG_2, config);
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	799b      	ldrb	r3, [r3, #6]
 80026fa:	78fa      	ldrb	r2, [r7, #3]
 80026fc:	2171      	movs	r1, #113	; 0x71
 80026fe:	4618      	mov	r0, r3
 8002700:	f7ff f930 	bl	8001964 <_Z9writeBytehhh>
}
 8002704:	bf00      	nop
 8002706:	3708      	adds	r7, #8
 8002708:	46bd      	mov	sp, r7
 800270a:	bd80      	pop	{r7, pc}

0800270c <_ZN7MPU605013dmpInitializeEv>:


// 6_AXIS_MOTIONAPPS20
uint8_t MPU6050::dmpInitialize() {
 800270c:	b590      	push	{r4, r7, lr}
 800270e:	b0af      	sub	sp, #188	; 0xbc
 8002710:	af04      	add	r7, sp, #16
 8002712:	6078      	str	r0, [r7, #4]
    // reset device
    //DEBUG_PRINTLN(F("\n\nResetting MPU6050..."));
    reset();
 8002714:	6878      	ldr	r0, [r7, #4]
 8002716:	f7ff fbf5 	bl	8001f04 <_ZN7MPU60505resetEv>
    HAL_Delay(30); // wait after reset
 800271a:	201e      	movs	r0, #30
 800271c:	f002 f942 	bl	80049a4 <HAL_Delay>
    Serial.println(F("Enabling wake cycle..."));
    setWakeCycleEnabled(true);*/

    // disable sleep mode
    //DEBUG_PRINTLN(F("Disabling sleep mode..."));
    setSleepEnabled(false);
 8002720:	2100      	movs	r1, #0
 8002722:	6878      	ldr	r0, [r7, #4]
 8002724:	f7ff fbfd 	bl	8001f22 <_ZN7MPU605015setSleepEnabledEb>

    // get MPU hardware revision
    //DEBUG_PRINTLN(F("Selecting user bank 16..."));
    setMemoryBank(0x10, true, true);
 8002728:	2301      	movs	r3, #1
 800272a:	2201      	movs	r2, #1
 800272c:	2110      	movs	r1, #16
 800272e:	6878      	ldr	r0, [r7, #4]
 8002730:	f7ff fd5d 	bl	80021ee <_ZN7MPU605013setMemoryBankEhbb>
    //DEBUG_PRINTLN(F("Selecting memory byte 6..."));
    setMemoryStartAddress(0x06);
 8002734:	2106      	movs	r1, #6
 8002736:	6878      	ldr	r0, [r7, #4]
 8002738:	f7ff fd83 	bl	8002242 <_ZN7MPU605021setMemoryStartAddressEh>
    //DEBUG_PRINTLN(F("Checking hardware revision..."));
    //DEBUG_PRINT(F("Revision @ user[16][6] = "));
    //DEBUG_PRINTLNF(readMemoryByte(), HEX);
    //DEBUG_PRINTLN(F("Resetting memory bank selection to 0..."));
    setMemoryBank(0, false, false);
 800273c:	2300      	movs	r3, #0
 800273e:	2200      	movs	r2, #0
 8002740:	2100      	movs	r1, #0
 8002742:	6878      	ldr	r0, [r7, #4]
 8002744:	f7ff fd53 	bl	80021ee <_ZN7MPU605013setMemoryBankEhbb>
    //DEBUG_PRINT(F("OTP bank is "));
    //DEBUG_PRINTLN(getOTPBankValid() ? F("valid!") : F("invalid!"));

    // get X/Y/Z gyro offsets
    //DEBUG_PRINTLN(F("Reading gyro offset TC values..."));
    int8_t xgOffsetTC = getXGyroOffsetTC();
 8002748:	6878      	ldr	r0, [r7, #4]
 800274a:	f7ff fc52 	bl	8001ff2 <_ZN7MPU605016getXGyroOffsetTCEv>
 800274e:	4603      	mov	r3, r0
 8002750:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
    int8_t ygOffsetTC = getYGyroOffsetTC();
 8002754:	6878      	ldr	r0, [r7, #4]
 8002756:	f7ff fc74 	bl	8002042 <_ZN7MPU605016getYGyroOffsetTCEv>
 800275a:	4603      	mov	r3, r0
 800275c:	f887 30a2 	strb.w	r3, [r7, #162]	; 0xa2
    int8_t zgOffsetTC = getZGyroOffsetTC();
 8002760:	6878      	ldr	r0, [r7, #4]
 8002762:	f7ff fc96 	bl	8002092 <_ZN7MPU605016getZGyroOffsetTCEv>
 8002766:	4603      	mov	r3, r0
 8002768:	f887 30a1 	strb.w	r3, [r7, #161]	; 0xa1
    //DEBUG_PRINT(F("Z gyro offset = "));
    //DEBUG_PRINTLN(zgOffsetTC);

    // setup weird slave stuff (?)
    //DEBUG_PRINTLN(F("Setting slave 0 address to 0x7F..."));
    setSlaveAddress(0, 0x7F);
 800276c:	227f      	movs	r2, #127	; 0x7f
 800276e:	2100      	movs	r1, #0
 8002770:	6878      	ldr	r0, [r7, #4]
 8002772:	f7ff fb47 	bl	8001e04 <_ZN7MPU605015setSlaveAddressEhh>
    //DEBUG_PRINTLN(F("Disabling I2C Master mode..."));
    setI2CMasterModeEnabled(false);
 8002776:	2100      	movs	r1, #0
 8002778:	6878      	ldr	r0, [r7, #4]
 800277a:	f7ff fb94 	bl	8001ea6 <_ZN7MPU605023setI2CMasterModeEnabledEb>
    //DEBUG_PRINTLN(F("Setting slave 0 address to 0x68 (self)..."));
    setSlaveAddress(0, 0x68);
 800277e:	2268      	movs	r2, #104	; 0x68
 8002780:	2100      	movs	r1, #0
 8002782:	6878      	ldr	r0, [r7, #4]
 8002784:	f7ff fb3e 	bl	8001e04 <_ZN7MPU605015setSlaveAddressEhh>
    //DEBUG_PRINTLN(F("Resetting I2C Master control..."));
    resetI2CMaster();
 8002788:	6878      	ldr	r0, [r7, #4]
 800278a:	f7ff fbac 	bl	8001ee6 <_ZN7MPU605014resetI2CMasterEv>
    HAL_Delay(20);
 800278e:	2014      	movs	r0, #20
 8002790:	f002 f908 	bl	80049a4 <HAL_Delay>

    // load DMP code into memory banks
    //DEBUG_PRINT(F("Writing DMP code to MPU memory banks ("));
    //DEBUG_PRINT(MPU6050_DMP_CODE_SIZE);
    //DEBUG_PRINTLN(F(" bytes)"));
    if (writeProgMemoryBlock(dmpMemory, MPU6050_DMP_CODE_SIZE)) {
 8002794:	2301      	movs	r3, #1
 8002796:	9301      	str	r3, [sp, #4]
 8002798:	2300      	movs	r3, #0
 800279a:	9300      	str	r3, [sp, #0]
 800279c:	2300      	movs	r3, #0
 800279e:	f240 7289 	movw	r2, #1929	; 0x789
 80027a2:	49ce      	ldr	r1, [pc, #824]	; (8002adc <_ZN7MPU605013dmpInitializeEv+0x3d0>)
 80027a4:	6878      	ldr	r0, [r7, #4]
 80027a6:	f7ff fe98 	bl	80024da <_ZN7MPU605020writeProgMemoryBlockEPKhthhb>
 80027aa:	4603      	mov	r3, r0
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	f000 8238 	beq.w	8002c22 <_ZN7MPU605013dmpInitializeEv+0x516>

        // write DMP configuration
        //DEBUG_PRINT(F("Writing DMP configuration to MPU memory banks ("));
        //DEBUG_PRINT(MPU6050_DMP_CONFIG_SIZE);
        //DEBUG_PRINTLN(F(" bytes in config def)"));
        if (writeProgDMPConfigurationSet(dmpConfig, MPU6050_DMP_CONFIG_SIZE)) {
 80027b2:	22c0      	movs	r2, #192	; 0xc0
 80027b4:	49ca      	ldr	r1, [pc, #808]	; (8002ae0 <_ZN7MPU605013dmpInitializeEv+0x3d4>)
 80027b6:	6878      	ldr	r0, [r7, #4]
 80027b8:	f7ff ff74 	bl	80026a4 <_ZN7MPU605028writeProgDMPConfigurationSetEPKht>
 80027bc:	4603      	mov	r3, r0
 80027be:	2b00      	cmp	r3, #0
 80027c0:	f000 822d 	beq.w	8002c1e <_ZN7MPU605013dmpInitializeEv+0x512>
            //DEBUG_PRINTLN(F("Success! DMP configuration written and verified."));

            //DEBUG_PRINTLN(F("Setting clock source to Z Gyro..."));
            setClockSource(MPU6050_CLOCK_PLL_ZGYRO);
 80027c4:	2103      	movs	r1, #3
 80027c6:	6878      	ldr	r0, [r7, #4]
 80027c8:	f7ff fbbc 	bl	8001f44 <_ZN7MPU605014setClockSourceEh>

            //DEBUG_PRINTLN(F("Setting DMP and FIFO_OFLOW interrupts enabled..."));
            setIntEnabled(0x12);
 80027cc:	2112      	movs	r1, #18
 80027ce:	6878      	ldr	r0, [r7, #4]
 80027d0:	f7ff fb35 	bl	8001e3e <_ZN7MPU605013setIntEnabledEh>

            //DEBUG_PRINTLN(F("Setting sample rate to 200Hz..."));
            setRate(4); // 1khz / (1 + 4) = 200 Hz
 80027d4:	2104      	movs	r1, #4
 80027d6:	6878      	ldr	r0, [r7, #4]
 80027d8:	f7ff fa73 	bl	8001cc2 <_ZN7MPU60507setRateEh>

            //DEBUG_PRINTLN(F("Setting external frame sync to TEMP_OUT_L[0]..."));
            setExternalFrameSync(MPU6050_EXT_SYNC_TEMP_OUT_L);
 80027dc:	2101      	movs	r1, #1
 80027de:	6878      	ldr	r0, [r7, #4]
 80027e0:	f7ff fa80 	bl	8001ce4 <_ZN7MPU605020setExternalFrameSyncEh>

            //DEBUG_PRINTLN(F("Setting DLPF bandwidth to 42Hz..."));
            setDLPFMode(MPU6050_DLPF_BW_42);
 80027e4:	2103      	movs	r1, #3
 80027e6:	6878      	ldr	r0, [r7, #4]
 80027e8:	f7ff fa8f 	bl	8001d0a <_ZN7MPU605011setDLPFModeEh>

            //DEBUG_PRINTLN(F("Setting gyro sensitivity to +/- 2000 deg/sec..."));
            setFullScaleGyroRange(MPU6050_GYRO_FS_2000);
 80027ec:	2103      	movs	r1, #3
 80027ee:	6878      	ldr	r0, [r7, #4]
 80027f0:	f7ff fa9e 	bl	8001d30 <_ZN7MPU605021setFullScaleGyroRangeEh>

            //DEBUG_PRINTLN(F("Setting DMP programm start address"));
            //write start address MSB into register
            setDMPConfig1(0x03);
 80027f4:	2103      	movs	r1, #3
 80027f6:	6878      	ldr	r0, [r7, #4]
 80027f8:	f7ff ff66 	bl	80026c8 <_ZN7MPU605013setDMPConfig1Eh>
            //write start address LSB into register
            setDMPConfig2(0x00);
 80027fc:	2100      	movs	r1, #0
 80027fe:	6878      	ldr	r0, [r7, #4]
 8002800:	f7ff ff73 	bl	80026ea <_ZN7MPU605013setDMPConfig2Eh>

            //DEBUG_PRINTLN(F("Clearing OTP Bank flag..."));
            setOTPBankValid(false);
 8002804:	2100      	movs	r1, #0
 8002806:	6878      	ldr	r0, [r7, #4]
 8002808:	f7ff fbe2 	bl	8001fd0 <_ZN7MPU605015setOTPBankValidEb>

            //DEBUG_PRINTLN(F("Setting X/Y/Z gyro offset TCs to previous values..."));
            setXGyroOffsetTC(xgOffsetTC);
 800280c:	f997 30a3 	ldrsb.w	r3, [r7, #163]	; 0xa3
 8002810:	4619      	mov	r1, r3
 8002812:	6878      	ldr	r0, [r7, #4]
 8002814:	f7ff fc02 	bl	800201c <_ZN7MPU605016setXGyroOffsetTCEa>
            setYGyroOffsetTC(ygOffsetTC);
 8002818:	f997 30a2 	ldrsb.w	r3, [r7, #162]	; 0xa2
 800281c:	4619      	mov	r1, r3
 800281e:	6878      	ldr	r0, [r7, #4]
 8002820:	f7ff fc24 	bl	800206c <_ZN7MPU605016setYGyroOffsetTCEa>
            setZGyroOffsetTC(zgOffsetTC);
 8002824:	f997 30a1 	ldrsb.w	r3, [r7, #161]	; 0xa1
 8002828:	4619      	mov	r1, r3
 800282a:	6878      	ldr	r0, [r7, #4]
 800282c:	f7ff fc46 	bl	80020bc <_ZN7MPU605016setZGyroOffsetTCEa>
            //setYGyroOffset(0);
            //setZGyroOffset(0);

            //DEBUG_PRINTLN(F("Writing final memory update 1/7 (function unknown)..."));
            uint8_t dmpUpdate[16], j;
            uint16_t pos = 0;
 8002830:	2300      	movs	r3, #0
 8002832:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
            for (j = 0; j < 4 || j < dmpUpdate[2] + 3; j++, pos++) dmpUpdate[j] = pgm_read_byte(&dmpUpdates[pos]);
 8002836:	2300      	movs	r3, #0
 8002838:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
 800283c:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8002840:	2b03      	cmp	r3, #3
 8002842:	d906      	bls.n	8002852 <_ZN7MPU605013dmpInitializeEv+0x146>
 8002844:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 8002848:	1c9a      	adds	r2, r3, #2
 800284a:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 800284e:	429a      	cmp	r2, r3
 8002850:	db15      	blt.n	800287e <_ZN7MPU605013dmpInitializeEv+0x172>
 8002852:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 8002856:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 800285a:	49a2      	ldr	r1, [pc, #648]	; (8002ae4 <_ZN7MPU605013dmpInitializeEv+0x3d8>)
 800285c:	5c8a      	ldrb	r2, [r1, r2]
 800285e:	f107 01a8 	add.w	r1, r7, #168	; 0xa8
 8002862:	440b      	add	r3, r1
 8002864:	f803 2c1c 	strb.w	r2, [r3, #-28]
 8002868:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 800286c:	3301      	adds	r3, #1
 800286e:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
 8002872:	f8b7 30a4 	ldrh.w	r3, [r7, #164]	; 0xa4
 8002876:	3301      	adds	r3, #1
 8002878:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
 800287c:	e7de      	b.n	800283c <_ZN7MPU605013dmpInitializeEv+0x130>
            writeMemoryBlock(dmpUpdate + 3, dmpUpdate[2], dmpUpdate[0], dmpUpdate[1]);
 800287e:	f107 018c 	add.w	r1, r7, #140	; 0x8c
 8002882:	3103      	adds	r1, #3
 8002884:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 8002888:	b29a      	uxth	r2, r3
 800288a:	f897 008c 	ldrb.w	r0, [r7, #140]	; 0x8c
 800288e:	f897 308d 	ldrb.w	r3, [r7, #141]	; 0x8d
 8002892:	2400      	movs	r4, #0
 8002894:	9402      	str	r4, [sp, #8]
 8002896:	2401      	movs	r4, #1
 8002898:	9401      	str	r4, [sp, #4]
 800289a:	9300      	str	r3, [sp, #0]
 800289c:	4603      	mov	r3, r0
 800289e:	6878      	ldr	r0, [r7, #4]
 80028a0:	f7ff fd46 	bl	8002330 <_ZN7MPU605016writeMemoryBlockEPKhthhbb>

            //DEBUG_PRINTLN(F("Writing final memory update 2/7 (function unknown)..."));
            for (j = 0; j < 4 || j < dmpUpdate[2] + 3; j++, pos++) dmpUpdate[j] = pgm_read_byte(&dmpUpdates[pos]);
 80028a4:	2300      	movs	r3, #0
 80028a6:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
 80028aa:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 80028ae:	2b03      	cmp	r3, #3
 80028b0:	d906      	bls.n	80028c0 <_ZN7MPU605013dmpInitializeEv+0x1b4>
 80028b2:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 80028b6:	1c9a      	adds	r2, r3, #2
 80028b8:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 80028bc:	429a      	cmp	r2, r3
 80028be:	db15      	blt.n	80028ec <_ZN7MPU605013dmpInitializeEv+0x1e0>
 80028c0:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 80028c4:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 80028c8:	4986      	ldr	r1, [pc, #536]	; (8002ae4 <_ZN7MPU605013dmpInitializeEv+0x3d8>)
 80028ca:	5c8a      	ldrb	r2, [r1, r2]
 80028cc:	f107 01a8 	add.w	r1, r7, #168	; 0xa8
 80028d0:	440b      	add	r3, r1
 80028d2:	f803 2c1c 	strb.w	r2, [r3, #-28]
 80028d6:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 80028da:	3301      	adds	r3, #1
 80028dc:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
 80028e0:	f8b7 30a4 	ldrh.w	r3, [r7, #164]	; 0xa4
 80028e4:	3301      	adds	r3, #1
 80028e6:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
 80028ea:	e7de      	b.n	80028aa <_ZN7MPU605013dmpInitializeEv+0x19e>
            writeMemoryBlock(dmpUpdate + 3, dmpUpdate[2], dmpUpdate[0], dmpUpdate[1]);
 80028ec:	f107 018c 	add.w	r1, r7, #140	; 0x8c
 80028f0:	3103      	adds	r1, #3
 80028f2:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 80028f6:	b29a      	uxth	r2, r3
 80028f8:	f897 008c 	ldrb.w	r0, [r7, #140]	; 0x8c
 80028fc:	f897 308d 	ldrb.w	r3, [r7, #141]	; 0x8d
 8002900:	2400      	movs	r4, #0
 8002902:	9402      	str	r4, [sp, #8]
 8002904:	2401      	movs	r4, #1
 8002906:	9401      	str	r4, [sp, #4]
 8002908:	9300      	str	r3, [sp, #0]
 800290a:	4603      	mov	r3, r0
 800290c:	6878      	ldr	r0, [r7, #4]
 800290e:	f7ff fd0f 	bl	8002330 <_ZN7MPU605016writeMemoryBlockEPKhthhbb>

            //DEBUG_PRINTLN(F("Resetting FIFO..."));
            resetFIFO();
 8002912:	6878      	ldr	r0, [r7, #4]
 8002914:	f7ff fad8 	bl	8001ec8 <_ZN7MPU60509resetFIFOEv>

            //DEBUG_PRINTLN(F("Reading FIFO count..."));
            uint16_t fifoCount = getFIFOCount();
 8002918:	6878      	ldr	r0, [r7, #4]
 800291a:	f7ff fb26 	bl	8001f6a <_ZN7MPU605012getFIFOCountEv>
 800291e:	4603      	mov	r3, r0
 8002920:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
            uint8_t fifoBuffer[128];

            //DEBUG_PRINT(F("Current FIFO count="));
            //DEBUG_PRINTLN(fifoCount);
            getFIFOBytes(fifoBuffer, fifoCount);
 8002924:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8002928:	b2da      	uxtb	r2, r3
 800292a:	f107 030c 	add.w	r3, r7, #12
 800292e:	4619      	mov	r1, r3
 8002930:	6878      	ldr	r0, [r7, #4]
 8002932:	f7ff fb34 	bl	8001f9e <_ZN7MPU605012getFIFOBytesEPhh>

            //DEBUG_PRINTLN(F("Setting motion detection threshold to 2..."));
            setMotionDetectionThreshold(2);
 8002936:	2102      	movs	r1, #2
 8002938:	6878      	ldr	r0, [r7, #4]
 800293a:	f7ff fa1f 	bl	8001d7c <_ZN7MPU605027setMotionDetectionThresholdEh>

            //DEBUG_PRINTLN(F("Setting zero-motion detection threshold to 156..."));
            setZeroMotionDetectionThreshold(156);
 800293e:	219c      	movs	r1, #156	; 0x9c
 8002940:	6878      	ldr	r0, [r7, #4]
 8002942:	f7ff fa3d 	bl	8001dc0 <_ZN7MPU605031setZeroMotionDetectionThresholdEh>

            //DEBUG_PRINTLN(F("Setting motion detection duration to 80..."));
            setMotionDetectionDuration(80);
 8002946:	2150      	movs	r1, #80	; 0x50
 8002948:	6878      	ldr	r0, [r7, #4]
 800294a:	f7ff fa28 	bl	8001d9e <_ZN7MPU605026setMotionDetectionDurationEh>

            //DEBUG_PRINTLN(F("Setting zero-motion detection duration to 0..."));
            setZeroMotionDetectionDuration(0);
 800294e:	2100      	movs	r1, #0
 8002950:	6878      	ldr	r0, [r7, #4]
 8002952:	f7ff fa46 	bl	8001de2 <_ZN7MPU605030setZeroMotionDetectionDurationEh>

            //DEBUG_PRINTLN(F("Resetting FIFO..."));
            resetFIFO();
 8002956:	6878      	ldr	r0, [r7, #4]
 8002958:	f7ff fab6 	bl	8001ec8 <_ZN7MPU60509resetFIFOEv>

            //DEBUG_PRINTLN(F("Enabling FIFO..."));
            setFIFOEnabled(true);
 800295c:	2101      	movs	r1, #1
 800295e:	6878      	ldr	r0, [r7, #4]
 8002960:	f7ff fa90 	bl	8001e84 <_ZN7MPU605014setFIFOEnabledEb>

            //DEBUG_PRINTLN(F("Enabling DMP..."));
            setDMPEnabled(true);
 8002964:	2101      	movs	r1, #1
 8002966:	6878      	ldr	r0, [r7, #4]
 8002968:	f7ff fc21 	bl	80021ae <_ZN7MPU605013setDMPEnabledEb>

            //DEBUG_PRINTLN(F("Resetting DMP..."));
            resetDMP();
 800296c:	6878      	ldr	r0, [r7, #4]
 800296e:	f7ff fc2f 	bl	80021d0 <_ZN7MPU60508resetDMPEv>

            //DEBUG_PRINTLN(F("Writing final memory update 3/7 (function unknown)..."));
            for (j = 0; j < 4 || j < dmpUpdate[2] + 3; j++, pos++) dmpUpdate[j] = pgm_read_byte(&dmpUpdates[pos]);
 8002972:	2300      	movs	r3, #0
 8002974:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
 8002978:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 800297c:	2b03      	cmp	r3, #3
 800297e:	d906      	bls.n	800298e <_ZN7MPU605013dmpInitializeEv+0x282>
 8002980:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 8002984:	1c9a      	adds	r2, r3, #2
 8002986:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 800298a:	429a      	cmp	r2, r3
 800298c:	db15      	blt.n	80029ba <_ZN7MPU605013dmpInitializeEv+0x2ae>
 800298e:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 8002992:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8002996:	4953      	ldr	r1, [pc, #332]	; (8002ae4 <_ZN7MPU605013dmpInitializeEv+0x3d8>)
 8002998:	5c8a      	ldrb	r2, [r1, r2]
 800299a:	f107 01a8 	add.w	r1, r7, #168	; 0xa8
 800299e:	440b      	add	r3, r1
 80029a0:	f803 2c1c 	strb.w	r2, [r3, #-28]
 80029a4:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 80029a8:	3301      	adds	r3, #1
 80029aa:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
 80029ae:	f8b7 30a4 	ldrh.w	r3, [r7, #164]	; 0xa4
 80029b2:	3301      	adds	r3, #1
 80029b4:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
 80029b8:	e7de      	b.n	8002978 <_ZN7MPU605013dmpInitializeEv+0x26c>
            writeMemoryBlock(dmpUpdate + 3, dmpUpdate[2], dmpUpdate[0], dmpUpdate[1]);
 80029ba:	f107 018c 	add.w	r1, r7, #140	; 0x8c
 80029be:	3103      	adds	r1, #3
 80029c0:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 80029c4:	b29a      	uxth	r2, r3
 80029c6:	f897 008c 	ldrb.w	r0, [r7, #140]	; 0x8c
 80029ca:	f897 308d 	ldrb.w	r3, [r7, #141]	; 0x8d
 80029ce:	2400      	movs	r4, #0
 80029d0:	9402      	str	r4, [sp, #8]
 80029d2:	2401      	movs	r4, #1
 80029d4:	9401      	str	r4, [sp, #4]
 80029d6:	9300      	str	r3, [sp, #0]
 80029d8:	4603      	mov	r3, r0
 80029da:	6878      	ldr	r0, [r7, #4]
 80029dc:	f7ff fca8 	bl	8002330 <_ZN7MPU605016writeMemoryBlockEPKhthhbb>

            //DEBUG_PRINTLN(F("Writing final memory update 4/7 (function unknown)..."));
            for (j = 0; j < 4 || j < dmpUpdate[2] + 3; j++, pos++) dmpUpdate[j] = pgm_read_byte(&dmpUpdates[pos]);
 80029e0:	2300      	movs	r3, #0
 80029e2:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
 80029e6:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 80029ea:	2b03      	cmp	r3, #3
 80029ec:	d906      	bls.n	80029fc <_ZN7MPU605013dmpInitializeEv+0x2f0>
 80029ee:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 80029f2:	1c9a      	adds	r2, r3, #2
 80029f4:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 80029f8:	429a      	cmp	r2, r3
 80029fa:	db15      	blt.n	8002a28 <_ZN7MPU605013dmpInitializeEv+0x31c>
 80029fc:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 8002a00:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8002a04:	4937      	ldr	r1, [pc, #220]	; (8002ae4 <_ZN7MPU605013dmpInitializeEv+0x3d8>)
 8002a06:	5c8a      	ldrb	r2, [r1, r2]
 8002a08:	f107 01a8 	add.w	r1, r7, #168	; 0xa8
 8002a0c:	440b      	add	r3, r1
 8002a0e:	f803 2c1c 	strb.w	r2, [r3, #-28]
 8002a12:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8002a16:	3301      	adds	r3, #1
 8002a18:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
 8002a1c:	f8b7 30a4 	ldrh.w	r3, [r7, #164]	; 0xa4
 8002a20:	3301      	adds	r3, #1
 8002a22:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
 8002a26:	e7de      	b.n	80029e6 <_ZN7MPU605013dmpInitializeEv+0x2da>
            writeMemoryBlock(dmpUpdate + 3, dmpUpdate[2], dmpUpdate[0], dmpUpdate[1]);
 8002a28:	f107 018c 	add.w	r1, r7, #140	; 0x8c
 8002a2c:	3103      	adds	r1, #3
 8002a2e:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 8002a32:	b29a      	uxth	r2, r3
 8002a34:	f897 008c 	ldrb.w	r0, [r7, #140]	; 0x8c
 8002a38:	f897 308d 	ldrb.w	r3, [r7, #141]	; 0x8d
 8002a3c:	2400      	movs	r4, #0
 8002a3e:	9402      	str	r4, [sp, #8]
 8002a40:	2401      	movs	r4, #1
 8002a42:	9401      	str	r4, [sp, #4]
 8002a44:	9300      	str	r3, [sp, #0]
 8002a46:	4603      	mov	r3, r0
 8002a48:	6878      	ldr	r0, [r7, #4]
 8002a4a:	f7ff fc71 	bl	8002330 <_ZN7MPU605016writeMemoryBlockEPKhthhbb>

            //DEBUG_PRINTLN(F("Writing final memory update 5/7 (function unknown)..."));
            for (j = 0; j < 4 || j < dmpUpdate[2] + 3; j++, pos++) dmpUpdate[j] = pgm_read_byte(&dmpUpdates[pos]);
 8002a4e:	2300      	movs	r3, #0
 8002a50:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
 8002a54:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8002a58:	2b03      	cmp	r3, #3
 8002a5a:	d906      	bls.n	8002a6a <_ZN7MPU605013dmpInitializeEv+0x35e>
 8002a5c:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 8002a60:	1c9a      	adds	r2, r3, #2
 8002a62:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8002a66:	429a      	cmp	r2, r3
 8002a68:	db15      	blt.n	8002a96 <_ZN7MPU605013dmpInitializeEv+0x38a>
 8002a6a:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 8002a6e:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8002a72:	491c      	ldr	r1, [pc, #112]	; (8002ae4 <_ZN7MPU605013dmpInitializeEv+0x3d8>)
 8002a74:	5c8a      	ldrb	r2, [r1, r2]
 8002a76:	f107 01a8 	add.w	r1, r7, #168	; 0xa8
 8002a7a:	440b      	add	r3, r1
 8002a7c:	f803 2c1c 	strb.w	r2, [r3, #-28]
 8002a80:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8002a84:	3301      	adds	r3, #1
 8002a86:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
 8002a8a:	f8b7 30a4 	ldrh.w	r3, [r7, #164]	; 0xa4
 8002a8e:	3301      	adds	r3, #1
 8002a90:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
 8002a94:	e7de      	b.n	8002a54 <_ZN7MPU605013dmpInitializeEv+0x348>
            writeMemoryBlock(dmpUpdate + 3, dmpUpdate[2], dmpUpdate[0], dmpUpdate[1]);
 8002a96:	f107 018c 	add.w	r1, r7, #140	; 0x8c
 8002a9a:	3103      	adds	r1, #3
 8002a9c:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 8002aa0:	b29a      	uxth	r2, r3
 8002aa2:	f897 008c 	ldrb.w	r0, [r7, #140]	; 0x8c
 8002aa6:	f897 308d 	ldrb.w	r3, [r7, #141]	; 0x8d
 8002aaa:	2400      	movs	r4, #0
 8002aac:	9402      	str	r4, [sp, #8]
 8002aae:	2401      	movs	r4, #1
 8002ab0:	9401      	str	r4, [sp, #4]
 8002ab2:	9300      	str	r3, [sp, #0]
 8002ab4:	4603      	mov	r3, r0
 8002ab6:	6878      	ldr	r0, [r7, #4]
 8002ab8:	f7ff fc3a 	bl	8002330 <_ZN7MPU605016writeMemoryBlockEPKhthhbb>

            //DEBUG_PRINTLN(F("Waiting for FIFO count > 2..."));
            while ((fifoCount = getFIFOCount()) < 3);
 8002abc:	6878      	ldr	r0, [r7, #4]
 8002abe:	f7ff fa54 	bl	8001f6a <_ZN7MPU605012getFIFOCountEv>
 8002ac2:	4603      	mov	r3, r0
 8002ac4:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
 8002ac8:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8002acc:	2b02      	cmp	r3, #2
 8002ace:	bf94      	ite	ls
 8002ad0:	2301      	movls	r3, #1
 8002ad2:	2300      	movhi	r3, #0
 8002ad4:	b2db      	uxtb	r3, r3
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d006      	beq.n	8002ae8 <_ZN7MPU605013dmpInitializeEv+0x3dc>
 8002ada:	e7ef      	b.n	8002abc <_ZN7MPU605013dmpInitializeEv+0x3b0>
 8002adc:	08011254 	.word	0x08011254
 8002ae0:	080119e0 	.word	0x080119e0
 8002ae4:	08011aa0 	.word	0x08011aa0

            //DEBUG_PRINT(F("Current FIFO count="));
            //DEBUG_PRINTLN(fifoCount);
            //DEBUG_PRINTLN(F("Reading FIFO data..."));
            getFIFOBytes(fifoBuffer, fifoCount);
 8002ae8:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8002aec:	b2da      	uxtb	r2, r3
 8002aee:	f107 030c 	add.w	r3, r7, #12
 8002af2:	4619      	mov	r1, r3
 8002af4:	6878      	ldr	r0, [r7, #4]
 8002af6:	f7ff fa52 	bl	8001f9e <_ZN7MPU605012getFIFOBytesEPhh>

            //DEBUG_PRINT(F("Current interrupt status="));
            //DEBUG_PRINTLNF(getIntStatus(), HEX);

            //DEBUG_PRINTLN(F("Reading final memory update 6/7 (function unknown)..."));
            for (j = 0; j < 4 || j < dmpUpdate[2] + 3; j++, pos++) dmpUpdate[j] = pgm_read_byte(&dmpUpdates[pos]);
 8002afa:	2300      	movs	r3, #0
 8002afc:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
 8002b00:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8002b04:	2b03      	cmp	r3, #3
 8002b06:	d906      	bls.n	8002b16 <_ZN7MPU605013dmpInitializeEv+0x40a>
 8002b08:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 8002b0c:	1c9a      	adds	r2, r3, #2
 8002b0e:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8002b12:	429a      	cmp	r2, r3
 8002b14:	db15      	blt.n	8002b42 <_ZN7MPU605013dmpInitializeEv+0x436>
 8002b16:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 8002b1a:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8002b1e:	4943      	ldr	r1, [pc, #268]	; (8002c2c <_ZN7MPU605013dmpInitializeEv+0x520>)
 8002b20:	5c8a      	ldrb	r2, [r1, r2]
 8002b22:	f107 01a8 	add.w	r1, r7, #168	; 0xa8
 8002b26:	440b      	add	r3, r1
 8002b28:	f803 2c1c 	strb.w	r2, [r3, #-28]
 8002b2c:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8002b30:	3301      	adds	r3, #1
 8002b32:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
 8002b36:	f8b7 30a4 	ldrh.w	r3, [r7, #164]	; 0xa4
 8002b3a:	3301      	adds	r3, #1
 8002b3c:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
 8002b40:	e7de      	b.n	8002b00 <_ZN7MPU605013dmpInitializeEv+0x3f4>
            readMemoryBlock(dmpUpdate + 3, dmpUpdate[2], dmpUpdate[0], dmpUpdate[1]);
 8002b42:	f107 018c 	add.w	r1, r7, #140	; 0x8c
 8002b46:	3103      	adds	r1, #3
 8002b48:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 8002b4c:	b29a      	uxth	r2, r3
 8002b4e:	f897 008c 	ldrb.w	r0, [r7, #140]	; 0x8c
 8002b52:	f897 308d 	ldrb.w	r3, [r7, #141]	; 0x8d
 8002b56:	9300      	str	r3, [sp, #0]
 8002b58:	4603      	mov	r3, r0
 8002b5a:	6878      	ldr	r0, [r7, #4]
 8002b5c:	f7ff fb82 	bl	8002264 <_ZN7MPU605015readMemoryBlockEPhthh>

            //DEBUG_PRINTLN(F("Waiting for FIFO count > 2..."));
            while ((fifoCount = getFIFOCount()) < 3);
 8002b60:	6878      	ldr	r0, [r7, #4]
 8002b62:	f7ff fa02 	bl	8001f6a <_ZN7MPU605012getFIFOCountEv>
 8002b66:	4603      	mov	r3, r0
 8002b68:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
 8002b6c:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8002b70:	2b02      	cmp	r3, #2
 8002b72:	bf94      	ite	ls
 8002b74:	2301      	movls	r3, #1
 8002b76:	2300      	movhi	r3, #0
 8002b78:	b2db      	uxtb	r3, r3
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d000      	beq.n	8002b80 <_ZN7MPU605013dmpInitializeEv+0x474>
 8002b7e:	e7ef      	b.n	8002b60 <_ZN7MPU605013dmpInitializeEv+0x454>

            //DEBUG_PRINT(F("Current FIFO count="));
            //DEBUG_PRINTLN(fifoCount);

            //DEBUG_PRINTLN(F("Reading FIFO data..."));
            getFIFOBytes(fifoBuffer, fifoCount);
 8002b80:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8002b84:	b2da      	uxtb	r2, r3
 8002b86:	f107 030c 	add.w	r3, r7, #12
 8002b8a:	4619      	mov	r1, r3
 8002b8c:	6878      	ldr	r0, [r7, #4]
 8002b8e:	f7ff fa06 	bl	8001f9e <_ZN7MPU605012getFIFOBytesEPhh>

            //DEBUG_PRINT(F("Current interrupt status="));
            //DEBUG_PRINTLNF(getIntStatus(), HEX);

            //DEBUG_PRINTLN(F("Writing final memory update 7/7 (function unknown)..."));
            for (j = 0; j < 4 || j < dmpUpdate[2] + 3; j++, pos++) dmpUpdate[j] = pgm_read_byte(&dmpUpdates[pos]);
 8002b92:	2300      	movs	r3, #0
 8002b94:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
 8002b98:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8002b9c:	2b03      	cmp	r3, #3
 8002b9e:	d906      	bls.n	8002bae <_ZN7MPU605013dmpInitializeEv+0x4a2>
 8002ba0:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 8002ba4:	1c9a      	adds	r2, r3, #2
 8002ba6:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8002baa:	429a      	cmp	r2, r3
 8002bac:	db15      	blt.n	8002bda <_ZN7MPU605013dmpInitializeEv+0x4ce>
 8002bae:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 8002bb2:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8002bb6:	491d      	ldr	r1, [pc, #116]	; (8002c2c <_ZN7MPU605013dmpInitializeEv+0x520>)
 8002bb8:	5c8a      	ldrb	r2, [r1, r2]
 8002bba:	f107 01a8 	add.w	r1, r7, #168	; 0xa8
 8002bbe:	440b      	add	r3, r1
 8002bc0:	f803 2c1c 	strb.w	r2, [r3, #-28]
 8002bc4:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8002bc8:	3301      	adds	r3, #1
 8002bca:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
 8002bce:	f8b7 30a4 	ldrh.w	r3, [r7, #164]	; 0xa4
 8002bd2:	3301      	adds	r3, #1
 8002bd4:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
 8002bd8:	e7de      	b.n	8002b98 <_ZN7MPU605013dmpInitializeEv+0x48c>
            writeMemoryBlock(dmpUpdate + 3, dmpUpdate[2], dmpUpdate[0], dmpUpdate[1]);
 8002bda:	f107 018c 	add.w	r1, r7, #140	; 0x8c
 8002bde:	3103      	adds	r1, #3
 8002be0:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 8002be4:	b29a      	uxth	r2, r3
 8002be6:	f897 008c 	ldrb.w	r0, [r7, #140]	; 0x8c
 8002bea:	f897 308d 	ldrb.w	r3, [r7, #141]	; 0x8d
 8002bee:	2400      	movs	r4, #0
 8002bf0:	9402      	str	r4, [sp, #8]
 8002bf2:	2401      	movs	r4, #1
 8002bf4:	9401      	str	r4, [sp, #4]
 8002bf6:	9300      	str	r3, [sp, #0]
 8002bf8:	4603      	mov	r3, r0
 8002bfa:	6878      	ldr	r0, [r7, #4]
 8002bfc:	f7ff fb98 	bl	8002330 <_ZN7MPU605016writeMemoryBlockEPKhthhbb>

            //DEBUG_PRINTLN(F("DMP is good to go! Finally."));

            //DEBUG_PRINTLN(F("Disabling DMP (you turn it on later)..."));
            setDMPEnabled(false);
 8002c00:	2100      	movs	r1, #0
 8002c02:	6878      	ldr	r0, [r7, #4]
 8002c04:	f7ff fad3 	bl	80021ae <_ZN7MPU605013setDMPEnabledEb>

            //DEBUG_PRINTLN(F("Setting up internal 42-byte (default) DMP packet buffer..."));
            dmpPacketSize = 42;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	222a      	movs	r2, #42	; 0x2a
 8002c0c:	809a      	strh	r2, [r3, #4]
            /*if ((dmpPacketBuffer = (uint8_t *)malloc(42)) == 0) {
                return 3; // TODO: proper error code for no memory
            }*/

            //DEBUG_PRINTLN(F("Resetting FIFO and clearing INT status one last time..."));
            resetFIFO();
 8002c0e:	6878      	ldr	r0, [r7, #4]
 8002c10:	f7ff f95a 	bl	8001ec8 <_ZN7MPU60509resetFIFOEv>
            getIntStatus();
 8002c14:	6878      	ldr	r0, [r7, #4]
 8002c16:	f7ff f923 	bl	8001e60 <_ZN7MPU605012getIntStatusEv>
        }
    } else {
        //DEBUG_PRINTLN(F("ERROR! DMP code verification failed."));
        return 1; // main binary block loading failed
    }
    return 0; // success
 8002c1a:	2300      	movs	r3, #0
 8002c1c:	e002      	b.n	8002c24 <_ZN7MPU605013dmpInitializeEv+0x518>
            return 2; // configuration block loading failed
 8002c1e:	2302      	movs	r3, #2
 8002c20:	e000      	b.n	8002c24 <_ZN7MPU605013dmpInitializeEv+0x518>
        return 1; // main binary block loading failed
 8002c22:	2301      	movs	r3, #1
}
 8002c24:	4618      	mov	r0, r3
 8002c26:	37ac      	adds	r7, #172	; 0xac
 8002c28:	46bd      	mov	sp, r7
 8002c2a:	bd90      	pop	{r4, r7, pc}
 8002c2c:	08011aa0 	.word	0x08011aa0

08002c30 <_Z15getWXQuaternionv>:




void getWXQuaternion()
{
 8002c30:	b580      	push	{r7, lr}
 8002c32:	b082      	sub	sp, #8
 8002c34:	af00      	add	r7, sp, #0
  float *p = QuaternionSLERP(QuaternionProduct(&FrameOriginQuaternion[0] , QuaternionSLERP(&OriginQuaternion[0], &MPUoutputQuaternion[0])), &LoopWQuaternion[0]);
 8002c36:	4911      	ldr	r1, [pc, #68]	; (8002c7c <_Z15getWXQuaternionv+0x4c>)
 8002c38:	4811      	ldr	r0, [pc, #68]	; (8002c80 <_Z15getWXQuaternionv+0x50>)
 8002c3a:	f000 f957 	bl	8002eec <_Z15QuaternionSLERPPfS_>
 8002c3e:	4603      	mov	r3, r0
 8002c40:	4619      	mov	r1, r3
 8002c42:	4810      	ldr	r0, [pc, #64]	; (8002c84 <_Z15getWXQuaternionv+0x54>)
 8002c44:	f000 f824 	bl	8002c90 <_Z17QuaternionProductPfS_>
 8002c48:	4603      	mov	r3, r0
 8002c4a:	490f      	ldr	r1, [pc, #60]	; (8002c88 <_Z15getWXQuaternionv+0x58>)
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	f000 f94d 	bl	8002eec <_Z15QuaternionSLERPPfS_>
 8002c52:	6078      	str	r0, [r7, #4]
  LoopWXQuaternion[0] = *p;
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	4a0c      	ldr	r2, [pc, #48]	; (8002c8c <_Z15getWXQuaternionv+0x5c>)
 8002c5a:	6013      	str	r3, [r2, #0]
  LoopWXQuaternion[1] = *(p + 1);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	685b      	ldr	r3, [r3, #4]
 8002c60:	4a0a      	ldr	r2, [pc, #40]	; (8002c8c <_Z15getWXQuaternionv+0x5c>)
 8002c62:	6053      	str	r3, [r2, #4]
  LoopWXQuaternion[2] = *(p + 2);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	689b      	ldr	r3, [r3, #8]
 8002c68:	4a08      	ldr	r2, [pc, #32]	; (8002c8c <_Z15getWXQuaternionv+0x5c>)
 8002c6a:	6093      	str	r3, [r2, #8]
  LoopWXQuaternion[3] = *(p + 3);
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	68db      	ldr	r3, [r3, #12]
 8002c70:	4a06      	ldr	r2, [pc, #24]	; (8002c8c <_Z15getWXQuaternionv+0x5c>)
 8002c72:	60d3      	str	r3, [r2, #12]
}
 8002c74:	bf00      	nop
 8002c76:	3708      	adds	r7, #8
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	bd80      	pop	{r7, pc}
 8002c7c:	200004a8 	.word	0x200004a8
 8002c80:	200004b8 	.word	0x200004b8
 8002c84:	20000000 	.word	0x20000000
 8002c88:	20000010 	.word	0x20000010
 8002c8c:	200004c8 	.word	0x200004c8

08002c90 <_Z17QuaternionProductPfS_>:
 * @param q1 first Quaternion
 * @param q2 second Quaternion
 * @return float product-Quaternion
 */
float *QuaternionProduct(float *q1, float *q2)
{
 8002c90:	b590      	push	{r4, r7, lr}
 8002c92:	b083      	sub	sp, #12
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]
 8002c98:	6039      	str	r1, [r7, #0]
  static float q3[4];
  q3[0] = (q1[0] * q2[0]) - (q1[1] * q2[1]) - (q1[2] * q2[2]) - (q1[3] * q2[3]);
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681a      	ldr	r2, [r3, #0]
 8002c9e:	683b      	ldr	r3, [r7, #0]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	4619      	mov	r1, r3
 8002ca4:	4610      	mov	r0, r2
 8002ca6:	f7fe f8a9 	bl	8000dfc <__aeabi_fmul>
 8002caa:	4603      	mov	r3, r0
 8002cac:	461c      	mov	r4, r3
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	3304      	adds	r3, #4
 8002cb2:	681a      	ldr	r2, [r3, #0]
 8002cb4:	683b      	ldr	r3, [r7, #0]
 8002cb6:	3304      	adds	r3, #4
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	4619      	mov	r1, r3
 8002cbc:	4610      	mov	r0, r2
 8002cbe:	f7fe f89d 	bl	8000dfc <__aeabi_fmul>
 8002cc2:	4603      	mov	r3, r0
 8002cc4:	4619      	mov	r1, r3
 8002cc6:	4620      	mov	r0, r4
 8002cc8:	f7fd ff8e 	bl	8000be8 <__aeabi_fsub>
 8002ccc:	4603      	mov	r3, r0
 8002cce:	461c      	mov	r4, r3
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	3308      	adds	r3, #8
 8002cd4:	681a      	ldr	r2, [r3, #0]
 8002cd6:	683b      	ldr	r3, [r7, #0]
 8002cd8:	3308      	adds	r3, #8
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	4619      	mov	r1, r3
 8002cde:	4610      	mov	r0, r2
 8002ce0:	f7fe f88c 	bl	8000dfc <__aeabi_fmul>
 8002ce4:	4603      	mov	r3, r0
 8002ce6:	4619      	mov	r1, r3
 8002ce8:	4620      	mov	r0, r4
 8002cea:	f7fd ff7d 	bl	8000be8 <__aeabi_fsub>
 8002cee:	4603      	mov	r3, r0
 8002cf0:	461c      	mov	r4, r3
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	330c      	adds	r3, #12
 8002cf6:	681a      	ldr	r2, [r3, #0]
 8002cf8:	683b      	ldr	r3, [r7, #0]
 8002cfa:	330c      	adds	r3, #12
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	4619      	mov	r1, r3
 8002d00:	4610      	mov	r0, r2
 8002d02:	f7fe f87b 	bl	8000dfc <__aeabi_fmul>
 8002d06:	4603      	mov	r3, r0
 8002d08:	4619      	mov	r1, r3
 8002d0a:	4620      	mov	r0, r4
 8002d0c:	f7fd ff6c 	bl	8000be8 <__aeabi_fsub>
 8002d10:	4603      	mov	r3, r0
 8002d12:	461a      	mov	r2, r3
 8002d14:	4b61      	ldr	r3, [pc, #388]	; (8002e9c <_Z17QuaternionProductPfS_+0x20c>)
 8002d16:	601a      	str	r2, [r3, #0]
  q3[1] = (q1[0] * q2[1]) + (q1[1] * q2[0]) + (q1[2] * q2[3]) - (q1[3] * q2[2]);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681a      	ldr	r2, [r3, #0]
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	3304      	adds	r3, #4
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	4619      	mov	r1, r3
 8002d24:	4610      	mov	r0, r2
 8002d26:	f7fe f869 	bl	8000dfc <__aeabi_fmul>
 8002d2a:	4603      	mov	r3, r0
 8002d2c:	461c      	mov	r4, r3
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	3304      	adds	r3, #4
 8002d32:	681a      	ldr	r2, [r3, #0]
 8002d34:	683b      	ldr	r3, [r7, #0]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	4619      	mov	r1, r3
 8002d3a:	4610      	mov	r0, r2
 8002d3c:	f7fe f85e 	bl	8000dfc <__aeabi_fmul>
 8002d40:	4603      	mov	r3, r0
 8002d42:	4619      	mov	r1, r3
 8002d44:	4620      	mov	r0, r4
 8002d46:	f7fd ff51 	bl	8000bec <__addsf3>
 8002d4a:	4603      	mov	r3, r0
 8002d4c:	461c      	mov	r4, r3
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	3308      	adds	r3, #8
 8002d52:	681a      	ldr	r2, [r3, #0]
 8002d54:	683b      	ldr	r3, [r7, #0]
 8002d56:	330c      	adds	r3, #12
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	4619      	mov	r1, r3
 8002d5c:	4610      	mov	r0, r2
 8002d5e:	f7fe f84d 	bl	8000dfc <__aeabi_fmul>
 8002d62:	4603      	mov	r3, r0
 8002d64:	4619      	mov	r1, r3
 8002d66:	4620      	mov	r0, r4
 8002d68:	f7fd ff40 	bl	8000bec <__addsf3>
 8002d6c:	4603      	mov	r3, r0
 8002d6e:	461c      	mov	r4, r3
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	330c      	adds	r3, #12
 8002d74:	681a      	ldr	r2, [r3, #0]
 8002d76:	683b      	ldr	r3, [r7, #0]
 8002d78:	3308      	adds	r3, #8
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	4619      	mov	r1, r3
 8002d7e:	4610      	mov	r0, r2
 8002d80:	f7fe f83c 	bl	8000dfc <__aeabi_fmul>
 8002d84:	4603      	mov	r3, r0
 8002d86:	4619      	mov	r1, r3
 8002d88:	4620      	mov	r0, r4
 8002d8a:	f7fd ff2d 	bl	8000be8 <__aeabi_fsub>
 8002d8e:	4603      	mov	r3, r0
 8002d90:	461a      	mov	r2, r3
 8002d92:	4b42      	ldr	r3, [pc, #264]	; (8002e9c <_Z17QuaternionProductPfS_+0x20c>)
 8002d94:	605a      	str	r2, [r3, #4]
  q3[2] = (q1[0] * q2[2]) - (q1[1] * q2[3]) + (q1[2] * q2[0]) + (q1[3] * q2[1]);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681a      	ldr	r2, [r3, #0]
 8002d9a:	683b      	ldr	r3, [r7, #0]
 8002d9c:	3308      	adds	r3, #8
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	4619      	mov	r1, r3
 8002da2:	4610      	mov	r0, r2
 8002da4:	f7fe f82a 	bl	8000dfc <__aeabi_fmul>
 8002da8:	4603      	mov	r3, r0
 8002daa:	461c      	mov	r4, r3
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	3304      	adds	r3, #4
 8002db0:	681a      	ldr	r2, [r3, #0]
 8002db2:	683b      	ldr	r3, [r7, #0]
 8002db4:	330c      	adds	r3, #12
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	4619      	mov	r1, r3
 8002dba:	4610      	mov	r0, r2
 8002dbc:	f7fe f81e 	bl	8000dfc <__aeabi_fmul>
 8002dc0:	4603      	mov	r3, r0
 8002dc2:	4619      	mov	r1, r3
 8002dc4:	4620      	mov	r0, r4
 8002dc6:	f7fd ff0f 	bl	8000be8 <__aeabi_fsub>
 8002dca:	4603      	mov	r3, r0
 8002dcc:	461c      	mov	r4, r3
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	3308      	adds	r3, #8
 8002dd2:	681a      	ldr	r2, [r3, #0]
 8002dd4:	683b      	ldr	r3, [r7, #0]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	4619      	mov	r1, r3
 8002dda:	4610      	mov	r0, r2
 8002ddc:	f7fe f80e 	bl	8000dfc <__aeabi_fmul>
 8002de0:	4603      	mov	r3, r0
 8002de2:	4619      	mov	r1, r3
 8002de4:	4620      	mov	r0, r4
 8002de6:	f7fd ff01 	bl	8000bec <__addsf3>
 8002dea:	4603      	mov	r3, r0
 8002dec:	461c      	mov	r4, r3
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	330c      	adds	r3, #12
 8002df2:	681a      	ldr	r2, [r3, #0]
 8002df4:	683b      	ldr	r3, [r7, #0]
 8002df6:	3304      	adds	r3, #4
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	4619      	mov	r1, r3
 8002dfc:	4610      	mov	r0, r2
 8002dfe:	f7fd fffd 	bl	8000dfc <__aeabi_fmul>
 8002e02:	4603      	mov	r3, r0
 8002e04:	4619      	mov	r1, r3
 8002e06:	4620      	mov	r0, r4
 8002e08:	f7fd fef0 	bl	8000bec <__addsf3>
 8002e0c:	4603      	mov	r3, r0
 8002e0e:	461a      	mov	r2, r3
 8002e10:	4b22      	ldr	r3, [pc, #136]	; (8002e9c <_Z17QuaternionProductPfS_+0x20c>)
 8002e12:	609a      	str	r2, [r3, #8]
  q3[3] = (q1[0] * q2[3]) + (q1[1] * q2[2]) - (q1[2] * q2[1]) + (q1[3] * q2[0]);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681a      	ldr	r2, [r3, #0]
 8002e18:	683b      	ldr	r3, [r7, #0]
 8002e1a:	330c      	adds	r3, #12
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	4619      	mov	r1, r3
 8002e20:	4610      	mov	r0, r2
 8002e22:	f7fd ffeb 	bl	8000dfc <__aeabi_fmul>
 8002e26:	4603      	mov	r3, r0
 8002e28:	461c      	mov	r4, r3
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	3304      	adds	r3, #4
 8002e2e:	681a      	ldr	r2, [r3, #0]
 8002e30:	683b      	ldr	r3, [r7, #0]
 8002e32:	3308      	adds	r3, #8
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	4619      	mov	r1, r3
 8002e38:	4610      	mov	r0, r2
 8002e3a:	f7fd ffdf 	bl	8000dfc <__aeabi_fmul>
 8002e3e:	4603      	mov	r3, r0
 8002e40:	4619      	mov	r1, r3
 8002e42:	4620      	mov	r0, r4
 8002e44:	f7fd fed2 	bl	8000bec <__addsf3>
 8002e48:	4603      	mov	r3, r0
 8002e4a:	461c      	mov	r4, r3
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	3308      	adds	r3, #8
 8002e50:	681a      	ldr	r2, [r3, #0]
 8002e52:	683b      	ldr	r3, [r7, #0]
 8002e54:	3304      	adds	r3, #4
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	4619      	mov	r1, r3
 8002e5a:	4610      	mov	r0, r2
 8002e5c:	f7fd ffce 	bl	8000dfc <__aeabi_fmul>
 8002e60:	4603      	mov	r3, r0
 8002e62:	4619      	mov	r1, r3
 8002e64:	4620      	mov	r0, r4
 8002e66:	f7fd febf 	bl	8000be8 <__aeabi_fsub>
 8002e6a:	4603      	mov	r3, r0
 8002e6c:	461c      	mov	r4, r3
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	330c      	adds	r3, #12
 8002e72:	681a      	ldr	r2, [r3, #0]
 8002e74:	683b      	ldr	r3, [r7, #0]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	4619      	mov	r1, r3
 8002e7a:	4610      	mov	r0, r2
 8002e7c:	f7fd ffbe 	bl	8000dfc <__aeabi_fmul>
 8002e80:	4603      	mov	r3, r0
 8002e82:	4619      	mov	r1, r3
 8002e84:	4620      	mov	r0, r4
 8002e86:	f7fd feb1 	bl	8000bec <__addsf3>
 8002e8a:	4603      	mov	r3, r0
 8002e8c:	461a      	mov	r2, r3
 8002e8e:	4b03      	ldr	r3, [pc, #12]	; (8002e9c <_Z17QuaternionProductPfS_+0x20c>)
 8002e90:	60da      	str	r2, [r3, #12]
  return q3;
 8002e92:	4b02      	ldr	r3, [pc, #8]	; (8002e9c <_Z17QuaternionProductPfS_+0x20c>)
}
 8002e94:	4618      	mov	r0, r3
 8002e96:	370c      	adds	r7, #12
 8002e98:	46bd      	mov	sp, r7
 8002e9a:	bd90      	pop	{r4, r7, pc}
 8002e9c:	200004d8 	.word	0x200004d8

08002ea0 <_Z17QuaternionInversePf>:
 * 
 * @param q1 quaternion to be inversed
 * @return float inverse Quaternion
 */
float *QuaternionInverse(float *q1)
{
 8002ea0:	b480      	push	{r7}
 8002ea2:	b083      	sub	sp, #12
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	6078      	str	r0, [r7, #4]
  static float qi[4];
  qi[0] = q1[0];
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	4a0e      	ldr	r2, [pc, #56]	; (8002ee8 <_Z17QuaternionInversePf+0x48>)
 8002eae:	6013      	str	r3, [r2, #0]
  qi[1] = q1[1] * -1;
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	3304      	adds	r3, #4
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8002eba:	4a0b      	ldr	r2, [pc, #44]	; (8002ee8 <_Z17QuaternionInversePf+0x48>)
 8002ebc:	6053      	str	r3, [r2, #4]
  qi[2] = q1[2] * -1;
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	3308      	adds	r3, #8
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8002ec8:	4a07      	ldr	r2, [pc, #28]	; (8002ee8 <_Z17QuaternionInversePf+0x48>)
 8002eca:	6093      	str	r3, [r2, #8]
  qi[3] = q1[3] * -1;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	330c      	adds	r3, #12
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8002ed6:	4a04      	ldr	r2, [pc, #16]	; (8002ee8 <_Z17QuaternionInversePf+0x48>)
 8002ed8:	60d3      	str	r3, [r2, #12]
  return qi;
 8002eda:	4b03      	ldr	r3, [pc, #12]	; (8002ee8 <_Z17QuaternionInversePf+0x48>)
}
 8002edc:	4618      	mov	r0, r3
 8002ede:	370c      	adds	r7, #12
 8002ee0:	46bd      	mov	sp, r7
 8002ee2:	bc80      	pop	{r7}
 8002ee4:	4770      	bx	lr
 8002ee6:	bf00      	nop
 8002ee8:	200004e8 	.word	0x200004e8

08002eec <_Z15QuaternionSLERPPfS_>:
 * @param q1 start quaternion
 * @param q2 end quaternion
 * @return float interpolation quaternion
 */
float * QuaternionSLERP(float *q1, float *q2)
{
 8002eec:	b580      	push	{r7, lr}
 8002eee:	b082      	sub	sp, #8
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	6078      	str	r0, [r7, #4]
 8002ef4:	6039      	str	r1, [r7, #0]
  return QuaternionProduct(&q2[0], QuaternionInverse(&q1[0]));
 8002ef6:	6878      	ldr	r0, [r7, #4]
 8002ef8:	f7ff ffd2 	bl	8002ea0 <_Z17QuaternionInversePf>
 8002efc:	4603      	mov	r3, r0
 8002efe:	4619      	mov	r1, r3
 8002f00:	6838      	ldr	r0, [r7, #0]
 8002f02:	f7ff fec5 	bl	8002c90 <_Z17QuaternionProductPfS_>
 8002f06:	4603      	mov	r3, r0
}
 8002f08:	4618      	mov	r0, r3
 8002f0a:	3708      	adds	r7, #8
 8002f0c:	46bd      	mov	sp, r7
 8002f0e:	bd80      	pop	{r7, pc}

08002f10 <_Z19MPU6050_Calibrationv>:

void MPU6050_Calibration()
{
 8002f10:	b480      	push	{r7}
 8002f12:	af00      	add	r7, sp, #0
  OriginQuaternion[0] = MPUoutputQuaternion[0];
 8002f14:	4b09      	ldr	r3, [pc, #36]	; (8002f3c <_Z19MPU6050_Calibrationv+0x2c>)
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	4a09      	ldr	r2, [pc, #36]	; (8002f40 <_Z19MPU6050_Calibrationv+0x30>)
 8002f1a:	6013      	str	r3, [r2, #0]
  OriginQuaternion[1] = MPUoutputQuaternion[1];
 8002f1c:	4b07      	ldr	r3, [pc, #28]	; (8002f3c <_Z19MPU6050_Calibrationv+0x2c>)
 8002f1e:	685b      	ldr	r3, [r3, #4]
 8002f20:	4a07      	ldr	r2, [pc, #28]	; (8002f40 <_Z19MPU6050_Calibrationv+0x30>)
 8002f22:	6053      	str	r3, [r2, #4]
  OriginQuaternion[2] = MPUoutputQuaternion[2];
 8002f24:	4b05      	ldr	r3, [pc, #20]	; (8002f3c <_Z19MPU6050_Calibrationv+0x2c>)
 8002f26:	689b      	ldr	r3, [r3, #8]
 8002f28:	4a05      	ldr	r2, [pc, #20]	; (8002f40 <_Z19MPU6050_Calibrationv+0x30>)
 8002f2a:	6093      	str	r3, [r2, #8]
  OriginQuaternion[3] = MPUoutputQuaternion[3];
 8002f2c:	4b03      	ldr	r3, [pc, #12]	; (8002f3c <_Z19MPU6050_Calibrationv+0x2c>)
 8002f2e:	68db      	ldr	r3, [r3, #12]
 8002f30:	4a03      	ldr	r2, [pc, #12]	; (8002f40 <_Z19MPU6050_Calibrationv+0x30>)
 8002f32:	60d3      	str	r3, [r2, #12]
}
 8002f34:	bf00      	nop
 8002f36:	46bd      	mov	sp, r7
 8002f38:	bc80      	pop	{r7}
 8002f3a:	4770      	bx	lr
 8002f3c:	200004a8 	.word	0x200004a8
 8002f40:	200004b8 	.word	0x200004b8

08002f44 <_Z16SBUS_RecieveBitsv>:
uint8_t SBUSNewPackage = false;



void SBUS_RecieveBits()
{
 8002f44:	b580      	push	{r7, lr}
 8002f46:	b082      	sub	sp, #8
 8002f48:	af00      	add	r7, sp, #0
  //collect bits:

  TIM4->CCR1 = (uint16_t)(fastPPM_MinTime + 500 + ((float)SBUS_Channels[2] / 2));
 8002f4a:	4b2c      	ldr	r3, [pc, #176]	; (8002ffc <_Z16SBUS_RecieveBitsv+0xb8>)
 8002f4c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002f50:	4618      	mov	r0, r3
 8002f52:	f7fd feff 	bl	8000d54 <__aeabi_i2f>
 8002f56:	4603      	mov	r3, r0
 8002f58:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	f7fe f801 	bl	8000f64 <__aeabi_fdiv>
 8002f62:	4603      	mov	r3, r0
 8002f64:	4926      	ldr	r1, [pc, #152]	; (8003000 <_Z16SBUS_RecieveBitsv+0xbc>)
 8002f66:	4618      	mov	r0, r3
 8002f68:	f7fd fe40 	bl	8000bec <__addsf3>
 8002f6c:	4603      	mov	r3, r0
 8002f6e:	4618      	mov	r0, r3
 8002f70:	f7fe f946 	bl	8001200 <__aeabi_f2uiz>
 8002f74:	4603      	mov	r3, r0
 8002f76:	b29a      	uxth	r2, r3
 8002f78:	4b22      	ldr	r3, [pc, #136]	; (8003004 <_Z16SBUS_RecieveBitsv+0xc0>)
 8002f7a:	635a      	str	r2, [r3, #52]	; 0x34
  SBUS_timerCount = TIM11->CNT + SBUS_StartTimeOffset;       //get current clock count register value + time offset
 8002f7c:	4b22      	ldr	r3, [pc, #136]	; (8003008 <_Z16SBUS_RecieveBitsv+0xc4>)
 8002f7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f80:	b29b      	uxth	r3, r3
 8002f82:	3b05      	subs	r3, #5
 8002f84:	b29a      	uxth	r2, r3
 8002f86:	4b21      	ldr	r3, [pc, #132]	; (800300c <_Z16SBUS_RecieveBitsv+0xc8>)
 8002f88:	801a      	strh	r2, [r3, #0]
  SBUS_RxBitString[0] = true;
 8002f8a:	4b21      	ldr	r3, [pc, #132]	; (8003010 <_Z16SBUS_RecieveBitsv+0xcc>)
 8002f8c:	2201      	movs	r2, #1
 8002f8e:	701a      	strb	r2, [r3, #0]
  //HAL_GPIO_TogglePin(ONBOARD_WRITE_3_GPIO_Port, ONBOARD_WRITE_3_Pin);   //debug Pin
  for (size_t i = 1; i < SBUS_NumberOfBits; i++)
 8002f90:	2301      	movs	r3, #1
 8002f92:	607b      	str	r3, [r7, #4]
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	2b8f      	cmp	r3, #143	; 0x8f
 8002f98:	d829      	bhi.n	8002fee <_Z16SBUS_RecieveBitsv+0xaa>
  {
    ONBOARD_WRITE_3_GPIO_Port->BSRR = (uint32_t)ONBOARD_WRITE_3_Pin << 16U;
 8002f9a:	4b1e      	ldr	r3, [pc, #120]	; (8003014 <_Z16SBUS_RecieveBitsv+0xd0>)
 8002f9c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002fa0:	619a      	str	r2, [r3, #24]
    SBUS_RxBitString[i] = ((ONBOARD_READ_IT_3_GPIO_Port->IDR & ONBOARD_READ_IT_3_Pin) != 0 ? true : false);     //if the pin is HIGH then the value is 1 else 0
 8002fa2:	4b1d      	ldr	r3, [pc, #116]	; (8003018 <_Z16SBUS_RecieveBitsv+0xd4>)
 8002fa4:	691b      	ldr	r3, [r3, #16]
 8002fa6:	b2db      	uxtb	r3, r3
 8002fa8:	f003 0301 	and.w	r3, r3, #1
 8002fac:	b2d9      	uxtb	r1, r3
 8002fae:	4a18      	ldr	r2, [pc, #96]	; (8003010 <_Z16SBUS_RecieveBitsv+0xcc>)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	4413      	add	r3, r2
 8002fb4:	460a      	mov	r2, r1
 8002fb6:	701a      	strb	r2, [r3, #0]
    ONBOARD_WRITE_3_GPIO_Port->BSRR = ONBOARD_WRITE_3_Pin;
 8002fb8:	4b16      	ldr	r3, [pc, #88]	; (8003014 <_Z16SBUS_RecieveBitsv+0xd0>)
 8002fba:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002fbe:	619a      	str	r2, [r3, #24]
    while ((TIM11->CNT - SBUS_timerCount) < 10)
 8002fc0:	4b11      	ldr	r3, [pc, #68]	; (8003008 <_Z16SBUS_RecieveBitsv+0xc4>)
 8002fc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fc4:	4a11      	ldr	r2, [pc, #68]	; (800300c <_Z16SBUS_RecieveBitsv+0xc8>)
 8002fc6:	8812      	ldrh	r2, [r2, #0]
 8002fc8:	1a9b      	subs	r3, r3, r2
 8002fca:	2b09      	cmp	r3, #9
 8002fcc:	bf94      	ite	ls
 8002fce:	2301      	movls	r3, #1
 8002fd0:	2300      	movhi	r3, #0
 8002fd2:	b2db      	uxtb	r3, r3
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d000      	beq.n	8002fda <_Z16SBUS_RecieveBitsv+0x96>
 8002fd8:	e7f2      	b.n	8002fc0 <_Z16SBUS_RecieveBitsv+0x7c>
    {
    }
    SBUS_timerCount += 10;
 8002fda:	4b0c      	ldr	r3, [pc, #48]	; (800300c <_Z16SBUS_RecieveBitsv+0xc8>)
 8002fdc:	881b      	ldrh	r3, [r3, #0]
 8002fde:	330a      	adds	r3, #10
 8002fe0:	b29a      	uxth	r2, r3
 8002fe2:	4b0a      	ldr	r3, [pc, #40]	; (800300c <_Z16SBUS_RecieveBitsv+0xc8>)
 8002fe4:	801a      	strh	r2, [r3, #0]
  for (size_t i = 1; i < SBUS_NumberOfBits; i++)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	3301      	adds	r3, #1
 8002fea:	607b      	str	r3, [r7, #4]
 8002fec:	e7d2      	b.n	8002f94 <_Z16SBUS_RecieveBitsv+0x50>
  }
  SBUSNewPackage = true;
 8002fee:	4b0b      	ldr	r3, [pc, #44]	; (800301c <_Z16SBUS_RecieveBitsv+0xd8>)
 8002ff0:	2201      	movs	r2, #1
 8002ff2:	701a      	strb	r2, [r3, #0]
}
 8002ff4:	bf00      	nop
 8002ff6:	3708      	adds	r7, #8
 8002ff8:	46bd      	mov	sp, r7
 8002ffa:	bd80      	pop	{r7, pc}
 8002ffc:	200005a8 	.word	0x200005a8
 8003000:	44bb8000 	.word	0x44bb8000
 8003004:	40000800 	.word	0x40000800
 8003008:	40014800 	.word	0x40014800
 800300c:	200004f8 	.word	0x200004f8
 8003010:	200004fc 	.word	0x200004fc
 8003014:	40020000 	.word	0x40020000
 8003018:	40020800 	.word	0x40020800
 800301c:	200005b9 	.word	0x200005b9

08003020 <_Z19SBUS_PostProcessingv>:

void SBUS_PostProcessing()
{
 8003020:	b580      	push	{r7, lr}
 8003022:	b088      	sub	sp, #32
 8003024:	af00      	add	r7, sp, #0
    //check validity:

  SBUS_CorruptedPackage = false;                      //reset corrupted package flag
 8003026:	4b88      	ldr	r3, [pc, #544]	; (8003248 <_Z19SBUS_PostProcessingv+0x228>)
 8003028:	2200      	movs	r2, #0
 800302a:	701a      	strb	r2, [r3, #0]
  for (size_t i = 0; i < SBUS_NumberOfBytes; i++)      //repeat for each byte
 800302c:	2300      	movs	r3, #0
 800302e:	61fb      	str	r3, [r7, #28]
 8003030:	69fb      	ldr	r3, [r7, #28]
 8003032:	2b0b      	cmp	r3, #11
 8003034:	d85b      	bhi.n	80030ee <_Z19SBUS_PostProcessingv+0xce>
  {
    if ((SBUS_RxBitString[0 + (i * SBUS_BitsPerByte)] == true) & (SBUS_RxBitString[10 + (i * SBUS_BitsPerByte)] == false) & (SBUS_RxBitString[11 + (i * SBUS_BitsPerByte)] == false))       //check start bit, 2 stop bit
 8003036:	69fa      	ldr	r2, [r7, #28]
 8003038:	4613      	mov	r3, r2
 800303a:	005b      	lsls	r3, r3, #1
 800303c:	4413      	add	r3, r2
 800303e:	009b      	lsls	r3, r3, #2
 8003040:	461a      	mov	r2, r3
 8003042:	4b82      	ldr	r3, [pc, #520]	; (800324c <_Z19SBUS_PostProcessingv+0x22c>)
 8003044:	5c9b      	ldrb	r3, [r3, r2]
 8003046:	2b01      	cmp	r3, #1
 8003048:	bf0c      	ite	eq
 800304a:	2301      	moveq	r3, #1
 800304c:	2300      	movne	r3, #0
 800304e:	b2d9      	uxtb	r1, r3
 8003050:	69fa      	ldr	r2, [r7, #28]
 8003052:	4613      	mov	r3, r2
 8003054:	005b      	lsls	r3, r3, #1
 8003056:	4413      	add	r3, r2
 8003058:	009b      	lsls	r3, r3, #2
 800305a:	330a      	adds	r3, #10
 800305c:	4a7b      	ldr	r2, [pc, #492]	; (800324c <_Z19SBUS_PostProcessingv+0x22c>)
 800305e:	5cd3      	ldrb	r3, [r2, r3]
 8003060:	2b00      	cmp	r3, #0
 8003062:	bf0c      	ite	eq
 8003064:	2301      	moveq	r3, #1
 8003066:	2300      	movne	r3, #0
 8003068:	b2db      	uxtb	r3, r3
 800306a:	400b      	ands	r3, r1
 800306c:	b2db      	uxtb	r3, r3
 800306e:	4619      	mov	r1, r3
 8003070:	69fa      	ldr	r2, [r7, #28]
 8003072:	4613      	mov	r3, r2
 8003074:	005b      	lsls	r3, r3, #1
 8003076:	4413      	add	r3, r2
 8003078:	009b      	lsls	r3, r3, #2
 800307a:	330b      	adds	r3, #11
 800307c:	4a73      	ldr	r2, [pc, #460]	; (800324c <_Z19SBUS_PostProcessingv+0x22c>)
 800307e:	5cd3      	ldrb	r3, [r2, r3]
 8003080:	2b00      	cmp	r3, #0
 8003082:	bf0c      	ite	eq
 8003084:	2301      	moveq	r3, #1
 8003086:	2300      	movne	r3, #0
 8003088:	b2db      	uxtb	r3, r3
 800308a:	400b      	ands	r3, r1
 800308c:	2b00      	cmp	r3, #0
 800308e:	d027      	beq.n	80030e0 <_Z19SBUS_PostProcessingv+0xc0>
    {
      uint8_t parityCheck = false;
 8003090:	2300      	movs	r3, #0
 8003092:	76fb      	strb	r3, [r7, #27]
      for (size_t x = 0; x < 8; x++)                                              //generate parity from 8 bits
 8003094:	2300      	movs	r3, #0
 8003096:	617b      	str	r3, [r7, #20]
 8003098:	697b      	ldr	r3, [r7, #20]
 800309a:	2b07      	cmp	r3, #7
 800309c:	d811      	bhi.n	80030c2 <_Z19SBUS_PostProcessingv+0xa2>
      {
        parityCheck ^= SBUS_RxBitString[1 + x + (i * SBUS_BitsPerByte)];
 800309e:	69fa      	ldr	r2, [r7, #28]
 80030a0:	4613      	mov	r3, r2
 80030a2:	005b      	lsls	r3, r3, #1
 80030a4:	4413      	add	r3, r2
 80030a6:	009b      	lsls	r3, r3, #2
 80030a8:	461a      	mov	r2, r3
 80030aa:	697b      	ldr	r3, [r7, #20]
 80030ac:	4413      	add	r3, r2
 80030ae:	3301      	adds	r3, #1
 80030b0:	4a66      	ldr	r2, [pc, #408]	; (800324c <_Z19SBUS_PostProcessingv+0x22c>)
 80030b2:	5cd2      	ldrb	r2, [r2, r3]
 80030b4:	7efb      	ldrb	r3, [r7, #27]
 80030b6:	4053      	eors	r3, r2
 80030b8:	76fb      	strb	r3, [r7, #27]
      for (size_t x = 0; x < 8; x++)                                              //generate parity from 8 bits
 80030ba:	697b      	ldr	r3, [r7, #20]
 80030bc:	3301      	adds	r3, #1
 80030be:	617b      	str	r3, [r7, #20]
 80030c0:	e7ea      	b.n	8003098 <_Z19SBUS_PostProcessingv+0x78>
      }
      if (parityCheck == SBUS_RxBitString[9 + (i * SBUS_BitsPerByte)])            //if parity fails set corrupted flag
 80030c2:	69fa      	ldr	r2, [r7, #28]
 80030c4:	4613      	mov	r3, r2
 80030c6:	005b      	lsls	r3, r3, #1
 80030c8:	4413      	add	r3, r2
 80030ca:	009b      	lsls	r3, r3, #2
 80030cc:	3309      	adds	r3, #9
 80030ce:	4a5f      	ldr	r2, [pc, #380]	; (800324c <_Z19SBUS_PostProcessingv+0x22c>)
 80030d0:	5cd3      	ldrb	r3, [r2, r3]
 80030d2:	7efa      	ldrb	r2, [r7, #27]
 80030d4:	429a      	cmp	r2, r3
 80030d6:	d106      	bne.n	80030e6 <_Z19SBUS_PostProcessingv+0xc6>
      {
        SBUS_CorruptedPackage = true;
 80030d8:	4b5b      	ldr	r3, [pc, #364]	; (8003248 <_Z19SBUS_PostProcessingv+0x228>)
 80030da:	2201      	movs	r2, #1
 80030dc:	701a      	strb	r2, [r3, #0]
 80030de:	e002      	b.n	80030e6 <_Z19SBUS_PostProcessingv+0xc6>
      }
    }
    else                                                                            //if start or stop bits fail set corrupted flag
    {
      SBUS_CorruptedPackage = true;
 80030e0:	4b59      	ldr	r3, [pc, #356]	; (8003248 <_Z19SBUS_PostProcessingv+0x228>)
 80030e2:	2201      	movs	r2, #1
 80030e4:	701a      	strb	r2, [r3, #0]
  for (size_t i = 0; i < SBUS_NumberOfBytes; i++)      //repeat for each byte
 80030e6:	69fb      	ldr	r3, [r7, #28]
 80030e8:	3301      	adds	r3, #1
 80030ea:	61fb      	str	r3, [r7, #28]
 80030ec:	e7a0      	b.n	8003030 <_Z19SBUS_PostProcessingv+0x10>
    }
  }
  SBUS_Bytes[0] = 0;
 80030ee:	4b58      	ldr	r3, [pc, #352]	; (8003250 <_Z19SBUS_PostProcessingv+0x230>)
 80030f0:	2200      	movs	r2, #0
 80030f2:	701a      	strb	r2, [r3, #0]
  for (size_t i = 0; i < 8; i++)
 80030f4:	2300      	movs	r3, #0
 80030f6:	613b      	str	r3, [r7, #16]
 80030f8:	693b      	ldr	r3, [r7, #16]
 80030fa:	2b07      	cmp	r3, #7
 80030fc:	d816      	bhi.n	800312c <_Z19SBUS_PostProcessingv+0x10c>
  {
    SBUS_Bytes[0] |= SBUS_RxBitString[1 + i] << (7 - i);
 80030fe:	4b54      	ldr	r3, [pc, #336]	; (8003250 <_Z19SBUS_PostProcessingv+0x230>)
 8003100:	781b      	ldrb	r3, [r3, #0]
 8003102:	b25a      	sxtb	r2, r3
 8003104:	693b      	ldr	r3, [r7, #16]
 8003106:	3301      	adds	r3, #1
 8003108:	4950      	ldr	r1, [pc, #320]	; (800324c <_Z19SBUS_PostProcessingv+0x22c>)
 800310a:	5ccb      	ldrb	r3, [r1, r3]
 800310c:	4619      	mov	r1, r3
 800310e:	693b      	ldr	r3, [r7, #16]
 8003110:	f1c3 0307 	rsb	r3, r3, #7
 8003114:	fa01 f303 	lsl.w	r3, r1, r3
 8003118:	b25b      	sxtb	r3, r3
 800311a:	4313      	orrs	r3, r2
 800311c:	b25b      	sxtb	r3, r3
 800311e:	b2da      	uxtb	r2, r3
 8003120:	4b4b      	ldr	r3, [pc, #300]	; (8003250 <_Z19SBUS_PostProcessingv+0x230>)
 8003122:	701a      	strb	r2, [r3, #0]
  for (size_t i = 0; i < 8; i++)
 8003124:	693b      	ldr	r3, [r7, #16]
 8003126:	3301      	adds	r3, #1
 8003128:	613b      	str	r3, [r7, #16]
 800312a:	e7e5      	b.n	80030f8 <_Z19SBUS_PostProcessingv+0xd8>
  }
  if (SBUS_Bytes[0] != 0x0FU)
 800312c:	4b48      	ldr	r3, [pc, #288]	; (8003250 <_Z19SBUS_PostProcessingv+0x230>)
 800312e:	781b      	ldrb	r3, [r3, #0]
 8003130:	2b0f      	cmp	r3, #15
 8003132:	d002      	beq.n	800313a <_Z19SBUS_PostProcessingv+0x11a>
  {
    SBUS_CorruptedPackage = true;
 8003134:	4b44      	ldr	r3, [pc, #272]	; (8003248 <_Z19SBUS_PostProcessingv+0x228>)
 8003136:	2201      	movs	r2, #1
 8003138:	701a      	strb	r2, [r3, #0]
  
  

  //assemble channels:

  if (SBUS_CorruptedPackage == false)
 800313a:	4b43      	ldr	r3, [pc, #268]	; (8003248 <_Z19SBUS_PostProcessingv+0x228>)
 800313c:	781b      	ldrb	r3, [r3, #0]
 800313e:	2b00      	cmp	r3, #0
 8003140:	d17a      	bne.n	8003238 <_Z19SBUS_PostProcessingv+0x218>
  {
    uint8_t byteNumber = 0;         //0 to 21
 8003142:	2300      	movs	r3, #0
 8003144:	73fb      	strb	r3, [r7, #15]
    uint8_t bitNumber = 0;          //0(LSB) to 7/(MSB)
 8003146:	2300      	movs	r3, #0
 8003148:	73bb      	strb	r3, [r7, #14]
    for (size_t i = 0; i < SBUS_NumberOfChannels; i++)
 800314a:	2300      	movs	r3, #0
 800314c:	60bb      	str	r3, [r7, #8]
 800314e:	68bb      	ldr	r3, [r7, #8]
 8003150:	2b07      	cmp	r3, #7
 8003152:	d871      	bhi.n	8003238 <_Z19SBUS_PostProcessingv+0x218>
    {
      uint8_t bitInChannel = 0;   //0(LSB) to 10(MSB)
 8003154:	2300      	movs	r3, #0
 8003156:	71fb      	strb	r3, [r7, #7]
      SBUS_TempChannels[i] = 0;
 8003158:	4a3e      	ldr	r2, [pc, #248]	; (8003254 <_Z19SBUS_PostProcessingv+0x234>)
 800315a:	68bb      	ldr	r3, [r7, #8]
 800315c:	2100      	movs	r1, #0
 800315e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
      
      while (bitInChannel <= 10)
 8003162:	79fb      	ldrb	r3, [r7, #7]
 8003164:	2b0a      	cmp	r3, #10
 8003166:	d843      	bhi.n	80031f0 <_Z19SBUS_PostProcessingv+0x1d0>
      {
        if (bitNumber <= 7)
 8003168:	7bbb      	ldrb	r3, [r7, #14]
 800316a:	2b07      	cmp	r3, #7
 800316c:	d81a      	bhi.n	80031a4 <_Z19SBUS_PostProcessingv+0x184>
        {
          //transfer bit
          SBUS_TempChannels[i] |= SBUS_RxBitString[13 + (bitNumber) + (byteNumber * SBUS_BitsPerByte)] << bitInChannel;
 800316e:	4a39      	ldr	r2, [pc, #228]	; (8003254 <_Z19SBUS_PostProcessingv+0x234>)
 8003170:	68bb      	ldr	r3, [r7, #8]
 8003172:	f932 1013 	ldrsh.w	r1, [r2, r3, lsl #1]
 8003176:	7bbb      	ldrb	r3, [r7, #14]
 8003178:	f103 000d 	add.w	r0, r3, #13
 800317c:	7bfa      	ldrb	r2, [r7, #15]
 800317e:	4613      	mov	r3, r2
 8003180:	005b      	lsls	r3, r3, #1
 8003182:	4413      	add	r3, r2
 8003184:	009b      	lsls	r3, r3, #2
 8003186:	4403      	add	r3, r0
 8003188:	4a30      	ldr	r2, [pc, #192]	; (800324c <_Z19SBUS_PostProcessingv+0x22c>)
 800318a:	5cd3      	ldrb	r3, [r2, r3]
 800318c:	461a      	mov	r2, r3
 800318e:	79fb      	ldrb	r3, [r7, #7]
 8003190:	fa02 f303 	lsl.w	r3, r2, r3
 8003194:	b21b      	sxth	r3, r3
 8003196:	430b      	orrs	r3, r1
 8003198:	b219      	sxth	r1, r3
 800319a:	4a2e      	ldr	r2, [pc, #184]	; (8003254 <_Z19SBUS_PostProcessingv+0x234>)
 800319c:	68bb      	ldr	r3, [r7, #8]
 800319e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 80031a2:	e01e      	b.n	80031e2 <_Z19SBUS_PostProcessingv+0x1c2>
        }
        else
        {
          byteNumber ++;
 80031a4:	7bfb      	ldrb	r3, [r7, #15]
 80031a6:	3301      	adds	r3, #1
 80031a8:	73fb      	strb	r3, [r7, #15]
          bitNumber = 0;
 80031aa:	2300      	movs	r3, #0
 80031ac:	73bb      	strb	r3, [r7, #14]
          //transfer bit
          SBUS_TempChannels[i] |= SBUS_RxBitString[13 + (bitNumber) + (byteNumber * SBUS_BitsPerByte)] << bitInChannel;
 80031ae:	4a29      	ldr	r2, [pc, #164]	; (8003254 <_Z19SBUS_PostProcessingv+0x234>)
 80031b0:	68bb      	ldr	r3, [r7, #8]
 80031b2:	f932 1013 	ldrsh.w	r1, [r2, r3, lsl #1]
 80031b6:	7bbb      	ldrb	r3, [r7, #14]
 80031b8:	f103 000d 	add.w	r0, r3, #13
 80031bc:	7bfa      	ldrb	r2, [r7, #15]
 80031be:	4613      	mov	r3, r2
 80031c0:	005b      	lsls	r3, r3, #1
 80031c2:	4413      	add	r3, r2
 80031c4:	009b      	lsls	r3, r3, #2
 80031c6:	4403      	add	r3, r0
 80031c8:	4a20      	ldr	r2, [pc, #128]	; (800324c <_Z19SBUS_PostProcessingv+0x22c>)
 80031ca:	5cd3      	ldrb	r3, [r2, r3]
 80031cc:	461a      	mov	r2, r3
 80031ce:	79fb      	ldrb	r3, [r7, #7]
 80031d0:	fa02 f303 	lsl.w	r3, r2, r3
 80031d4:	b21b      	sxth	r3, r3
 80031d6:	430b      	orrs	r3, r1
 80031d8:	b219      	sxth	r1, r3
 80031da:	4a1e      	ldr	r2, [pc, #120]	; (8003254 <_Z19SBUS_PostProcessingv+0x234>)
 80031dc:	68bb      	ldr	r3, [r7, #8]
 80031de:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        }
        bitNumber ++;
 80031e2:	7bbb      	ldrb	r3, [r7, #14]
 80031e4:	3301      	adds	r3, #1
 80031e6:	73bb      	strb	r3, [r7, #14]
        bitInChannel ++;
 80031e8:	79fb      	ldrb	r3, [r7, #7]
 80031ea:	3301      	adds	r3, #1
 80031ec:	71fb      	strb	r3, [r7, #7]
      while (bitInChannel <= 10)
 80031ee:	e7b8      	b.n	8003162 <_Z19SBUS_PostProcessingv+0x142>
      }
      
      SBUS_TempChannels[i] = ((float)(SBUS_TempChannels[i] - 1054) * ((float)-1000 / (float)821));    //map from 233, 1875 to -1000, 1000
 80031f0:	4a18      	ldr	r2, [pc, #96]	; (8003254 <_Z19SBUS_PostProcessingv+0x234>)
 80031f2:	68bb      	ldr	r3, [r7, #8]
 80031f4:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80031f8:	f2a3 431e 	subw	r3, r3, #1054	; 0x41e
 80031fc:	4618      	mov	r0, r3
 80031fe:	f7fd fda9 	bl	8000d54 <__aeabi_i2f>
 8003202:	4603      	mov	r3, r0
 8003204:	4914      	ldr	r1, [pc, #80]	; (8003258 <_Z19SBUS_PostProcessingv+0x238>)
 8003206:	4618      	mov	r0, r3
 8003208:	f7fd fdf8 	bl	8000dfc <__aeabi_fmul>
 800320c:	4603      	mov	r3, r0
 800320e:	4618      	mov	r0, r3
 8003210:	f7fd ffd0 	bl	80011b4 <__aeabi_f2iz>
 8003214:	4603      	mov	r3, r0
 8003216:	b219      	sxth	r1, r3
 8003218:	4a0e      	ldr	r2, [pc, #56]	; (8003254 <_Z19SBUS_PostProcessingv+0x234>)
 800321a:	68bb      	ldr	r3, [r7, #8]
 800321c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
      SBUS_Channels[i] = SBUS_TempChannels[i];
 8003220:	4a0c      	ldr	r2, [pc, #48]	; (8003254 <_Z19SBUS_PostProcessingv+0x234>)
 8003222:	68bb      	ldr	r3, [r7, #8]
 8003224:	f932 1013 	ldrsh.w	r1, [r2, r3, lsl #1]
 8003228:	4a0c      	ldr	r2, [pc, #48]	; (800325c <_Z19SBUS_PostProcessingv+0x23c>)
 800322a:	68bb      	ldr	r3, [r7, #8]
 800322c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for (size_t i = 0; i < SBUS_NumberOfChannels; i++)
 8003230:	68bb      	ldr	r3, [r7, #8]
 8003232:	3301      	adds	r3, #1
 8003234:	60bb      	str	r3, [r7, #8]
 8003236:	e78a      	b.n	800314e <_Z19SBUS_PostProcessingv+0x12e>
    }
  }
  SBUSNewPackage = false;
 8003238:	4b09      	ldr	r3, [pc, #36]	; (8003260 <_Z19SBUS_PostProcessingv+0x240>)
 800323a:	2200      	movs	r2, #0
 800323c:	701a      	strb	r2, [r3, #0]
 800323e:	bf00      	nop
 8003240:	3720      	adds	r7, #32
 8003242:	46bd      	mov	sp, r7
 8003244:	bd80      	pop	{r7, pc}
 8003246:	bf00      	nop
 8003248:	200005b8 	.word	0x200005b8
 800324c:	200004fc 	.word	0x200004fc
 8003250:	2000058c 	.word	0x2000058c
 8003254:	20000598 	.word	0x20000598
 8003258:	bf9be84d 	.word	0xbf9be84d
 800325c:	200005a8 	.word	0x200005a8
 8003260:	200005b9 	.word	0x200005b9

08003264 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003264:	b580      	push	{r7, lr}
 8003266:	b086      	sub	sp, #24
 8003268:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800326a:	f001 fb2d 	bl	80048c8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800326e:	f000 f889 	bl	8003384 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003272:	f000 fac5 	bl	8003800 <_ZL12MX_GPIO_Initv>
  MX_USB_DEVICE_Init();
 8003276:	f009 f885 	bl	800c384 <MX_USB_DEVICE_Init>
  MX_ADC1_Init();
 800327a:	f000 f8df 	bl	800343c <_ZL12MX_ADC1_Initv>
  MX_I2C1_Init();
 800327e:	f000 f91b 	bl	80034b8 <MX_I2C1_Init>
  MX_TIM3_Init();
 8003282:	f000 f94d 	bl	8003520 <_ZL12MX_TIM3_Initv>
  MX_TIM4_Init();
 8003286:	f000 f9b3 	bl	80035f0 <_ZL12MX_TIM4_Initv>
  MX_TIM11_Init();
 800328a:	f000 fa19 	bl	80036c0 <_ZL13MX_TIM11_Initv>
  MX_TIM13_Init();
 800328e:	f000 fa3f 	bl	8003710 <_ZL13MX_TIM13_Initv>
  MX_TIM14_Init();
 8003292:	f000 fa65 	bl	8003760 <_ZL13MX_TIM14_Initv>
  MX_DMA_Init();
 8003296:	f000 fa8b 	bl	80037b0 <_ZL11MX_DMA_Initv>

  


  /* Initialize interrupts */
  MX_NVIC_Init();
 800329a:	f000 f8c3 	bl	8003424 <_ZL12MX_NVIC_Initv>
  /* USER CODE BEGIN 2 */


  HAL_NVIC_DisableIRQ(EXTI0_IRQn);
 800329e:	2006      	movs	r0, #6
 80032a0:	f001 ffe3 	bl	800526a <HAL_NVIC_DisableIRQ>

  HAL_Delay(50);
 80032a4:	2032      	movs	r0, #50	; 0x32
 80032a6:	f001 fb7d 	bl	80049a4 <HAL_Delay>
  MPU6050 mpu;
 80032aa:	463b      	mov	r3, r7
 80032ac:	4618      	mov	r0, r3
 80032ae:	f7fe fce3 	bl	8001c78 <_ZN7MPU6050C1Ev>
  HAL_Delay(50);
 80032b2:	2032      	movs	r0, #50	; 0x32
 80032b4:	f001 fb76 	bl	80049a4 <HAL_Delay>
  mpu.initialize();
 80032b8:	463b      	mov	r3, r7
 80032ba:	4618      	mov	r0, r3
 80032bc:	f7fe fce9 	bl	8001c92 <_ZN7MPU605010initializeEv>
  HAL_Delay(50);
 80032c0:	2032      	movs	r0, #50	; 0x32
 80032c2:	f001 fb6f 	bl	80049a4 <HAL_Delay>
  mpu.dmpInitialize();
 80032c6:	463b      	mov	r3, r7
 80032c8:	4618      	mov	r0, r3
 80032ca:	f7ff fa1f 	bl	800270c <_ZN7MPU605013dmpInitializeEv>
  HAL_Delay(50);
 80032ce:	2032      	movs	r0, #50	; 0x32
 80032d0:	f001 fb68 	bl	80049a4 <HAL_Delay>
  mpu.setDMPEnabled(true);
 80032d4:	463b      	mov	r3, r7
 80032d6:	2101      	movs	r1, #1
 80032d8:	4618      	mov	r0, r3
 80032da:	f7fe ff68 	bl	80021ae <_ZN7MPU605013setDMPEnabledEb>
  HAL_Delay(50);
 80032de:	2032      	movs	r0, #50	; 0x32
 80032e0:	f001 fb60 	bl	80049a4 <HAL_Delay>

  mpu.setXGyroOffset(-169);
 80032e4:	463b      	mov	r3, r7
 80032e6:	f06f 01a8 	mvn.w	r1, #168	; 0xa8
 80032ea:	4618      	mov	r0, r3
 80032ec:	f7fe ff2c 	bl	8002148 <_ZN7MPU605014setXGyroOffsetEs>
  mpu.setYGyroOffset(165);
 80032f0:	463b      	mov	r3, r7
 80032f2:	21a5      	movs	r1, #165	; 0xa5
 80032f4:	4618      	mov	r0, r3
 80032f6:	f7fe ff38 	bl	800216a <_ZN7MPU605014setYGyroOffsetEs>
  mpu.setZGyroOffset(110);
 80032fa:	463b      	mov	r3, r7
 80032fc:	216e      	movs	r1, #110	; 0x6e
 80032fe:	4618      	mov	r0, r3
 8003300:	f7fe ff44 	bl	800218c <_ZN7MPU605014setZGyroOffsetEs>
  mpu.setXAccelOffset(4599);
 8003304:	463b      	mov	r3, r7
 8003306:	f241 11f7 	movw	r1, #4599	; 0x11f7
 800330a:	4618      	mov	r0, r3
 800330c:	f7fe fee9 	bl	80020e2 <_ZN7MPU605015setXAccelOffsetEs>
  mpu.setYAccelOffset(-951);
 8003310:	463b      	mov	r3, r7
 8003312:	4918      	ldr	r1, [pc, #96]	; (8003374 <main+0x110>)
 8003314:	4618      	mov	r0, r3
 8003316:	f7fe fef5 	bl	8002104 <_ZN7MPU605015setYAccelOffsetEs>
  mpu.setZAccelOffset(1930);
 800331a:	463b      	mov	r3, r7
 800331c:	f240 718a 	movw	r1, #1930	; 0x78a
 8003320:	4618      	mov	r0, r3
 8003322:	f7fe ff00 	bl	8002126 <_ZN7MPU605015setZAccelOffsetEs>

  HAL_TIM_Base_Start_IT(&htim3);
 8003326:	4814      	ldr	r0, [pc, #80]	; (8003378 <main+0x114>)
 8003328:	f005 fac0 	bl	80088ac <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim4);
 800332c:	4813      	ldr	r0, [pc, #76]	; (800337c <main+0x118>)
 800332e:	f005 fabd 	bl	80088ac <HAL_TIM_Base_Start_IT>
  //HAL_TIM_Base_Start_IT(&htim14);
  //HAL_TIM_Base_Start_IT(&htim13);
  HAL_TIM_Base_Start(&htim11);
 8003332:	4813      	ldr	r0, [pc, #76]	; (8003380 <main+0x11c>)
 8003334:	f005 fa54 	bl	80087e0 <HAL_TIM_Base_Start>

  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8003338:	2100      	movs	r1, #0
 800333a:	480f      	ldr	r0, [pc, #60]	; (8003378 <main+0x114>)
 800333c:	f005 fb74 	bl	8008a28 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8003340:	2100      	movs	r1, #0
 8003342:	480e      	ldr	r0, [pc, #56]	; (800337c <main+0x118>)
 8003344:	f005 fb70 	bl	8008a28 <HAL_TIM_PWM_Start>

  HAL_Delay(5000);
 8003348:	f241 3088 	movw	r0, #5000	; 0x1388
 800334c:	f001 fb2a 	bl	80049a4 <HAL_Delay>
  MPU6050_resetFIFO();
 8003350:	f7fe fbc2 	bl	8001ad8 <_Z17MPU6050_resetFIFOv>
  HAL_Delay(2);
 8003354:	2002      	movs	r0, #2
 8003356:	f001 fb25 	bl	80049a4 <HAL_Delay>
  MPU6050_readQuaternionBytes();
 800335a:	f7fe fbc7 	bl	8001aec <_Z27MPU6050_readQuaternionBytesv>
  MPU6050_ConvertToQuaternions();
 800335e:	f7fe fbfd 	bl	8001b5c <_Z28MPU6050_ConvertToQuaternionsv>


  MPU6050_Calibration();
 8003362:	f7ff fdd5 	bl	8002f10 <_Z19MPU6050_Calibrationv>

  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8003366:	2006      	movs	r0, #6
 8003368:	f001 ff71 	bl	800524e <HAL_NVIC_EnableIRQ>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    loop();
 800336c:	f000 fba8 	bl	8003ac0 <_Z4loopv>
 8003370:	e7fc      	b.n	800336c <main+0x108>
 8003372:	bf00      	nop
 8003374:	fffffc49 	.word	0xfffffc49
 8003378:	20000718 	.word	0x20000718
 800337c:	20000760 	.word	0x20000760
 8003380:	200007a8 	.word	0x200007a8

08003384 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003384:	b580      	push	{r7, lr}
 8003386:	b092      	sub	sp, #72	; 0x48
 8003388:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800338a:	f107 0318 	add.w	r3, r7, #24
 800338e:	2230      	movs	r2, #48	; 0x30
 8003390:	2100      	movs	r1, #0
 8003392:	4618      	mov	r0, r3
 8003394:	f00b f872 	bl	800e47c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003398:	1d3b      	adds	r3, r7, #4
 800339a:	2200      	movs	r2, #0
 800339c:	601a      	str	r2, [r3, #0]
 800339e:	605a      	str	r2, [r3, #4]
 80033a0:	609a      	str	r2, [r3, #8]
 80033a2:	60da      	str	r2, [r3, #12]
 80033a4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80033a6:	2301      	movs	r3, #1
 80033a8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80033aa:	2301      	movs	r3, #1
 80033ac:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80033ae:	2302      	movs	r3, #2
 80033b0:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80033b2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80033b6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLM = 16;
 80033b8:	2310      	movs	r3, #16
 80033ba:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLN = 192;
 80033bc:	23c0      	movs	r3, #192	; 0xc0
 80033be:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80033c0:	2302      	movs	r3, #2
 80033c2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80033c4:	2304      	movs	r3, #4
 80033c6:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80033c8:	f107 0318 	add.w	r3, r7, #24
 80033cc:	4618      	mov	r0, r3
 80033ce:	f004 fd49 	bl	8007e64 <HAL_RCC_OscConfig>
 80033d2:	4603      	mov	r3, r0
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	bf14      	ite	ne
 80033d8:	2301      	movne	r3, #1
 80033da:	2300      	moveq	r3, #0
 80033dc:	b2db      	uxtb	r3, r3
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d001      	beq.n	80033e6 <_Z18SystemClock_Configv+0x62>
  {
    Error_Handler();
 80033e2:	f000 fb1f 	bl	8003a24 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80033e6:	230f      	movs	r3, #15
 80033e8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 80033ea:	2301      	movs	r3, #1
 80033ec:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80033ee:	2300      	movs	r3, #0
 80033f0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80033f2:	2300      	movs	r3, #0
 80033f4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80033f6:	2300      	movs	r3, #0
 80033f8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80033fa:	1d3b      	adds	r3, r7, #4
 80033fc:	2100      	movs	r1, #0
 80033fe:	4618      	mov	r0, r3
 8003400:	f004 ff80 	bl	8008304 <HAL_RCC_ClockConfig>
 8003404:	4603      	mov	r3, r0
 8003406:	2b00      	cmp	r3, #0
 8003408:	bf14      	ite	ne
 800340a:	2301      	movne	r3, #1
 800340c:	2300      	moveq	r3, #0
 800340e:	b2db      	uxtb	r3, r3
 8003410:	2b00      	cmp	r3, #0
 8003412:	d001      	beq.n	8003418 <_Z18SystemClock_Configv+0x94>
  {
    Error_Handler();
 8003414:	f000 fb06 	bl	8003a24 <Error_Handler>
  }
  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 8003418:	f005 f860 	bl	80084dc <HAL_RCC_EnableCSS>
}
 800341c:	bf00      	nop
 800341e:	3748      	adds	r7, #72	; 0x48
 8003420:	46bd      	mov	sp, r7
 8003422:	bd80      	pop	{r7, pc}

08003424 <_ZL12MX_NVIC_Initv>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8003424:	b580      	push	{r7, lr}
 8003426:	af00      	add	r7, sp, #0
  /* EXTI0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8003428:	2200      	movs	r2, #0
 800342a:	2100      	movs	r1, #0
 800342c:	2006      	movs	r0, #6
 800342e:	f001 fef2 	bl	8005216 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8003432:	2006      	movs	r0, #6
 8003434:	f001 ff0b 	bl	800524e <HAL_NVIC_EnableIRQ>
}
 8003438:	bf00      	nop
 800343a:	bd80      	pop	{r7, pc}

0800343c <_ZL12MX_ADC1_Initv>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800343c:	b580      	push	{r7, lr}
 800343e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8003440:	4b1a      	ldr	r3, [pc, #104]	; (80034ac <_ZL12MX_ADC1_Initv+0x70>)
 8003442:	4a1b      	ldr	r2, [pc, #108]	; (80034b0 <_ZL12MX_ADC1_Initv+0x74>)
 8003444:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8003446:	4b19      	ldr	r3, [pc, #100]	; (80034ac <_ZL12MX_ADC1_Initv+0x70>)
 8003448:	2200      	movs	r2, #0
 800344a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800344c:	4b17      	ldr	r3, [pc, #92]	; (80034ac <_ZL12MX_ADC1_Initv+0x70>)
 800344e:	2200      	movs	r2, #0
 8003450:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8003452:	4b16      	ldr	r3, [pc, #88]	; (80034ac <_ZL12MX_ADC1_Initv+0x70>)
 8003454:	2201      	movs	r2, #1
 8003456:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8003458:	4b14      	ldr	r3, [pc, #80]	; (80034ac <_ZL12MX_ADC1_Initv+0x70>)
 800345a:	2201      	movs	r2, #1
 800345c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800345e:	4b13      	ldr	r3, [pc, #76]	; (80034ac <_ZL12MX_ADC1_Initv+0x70>)
 8003460:	2200      	movs	r2, #0
 8003462:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8003466:	4b11      	ldr	r3, [pc, #68]	; (80034ac <_ZL12MX_ADC1_Initv+0x70>)
 8003468:	2200      	movs	r2, #0
 800346a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800346c:	4b0f      	ldr	r3, [pc, #60]	; (80034ac <_ZL12MX_ADC1_Initv+0x70>)
 800346e:	4a11      	ldr	r2, [pc, #68]	; (80034b4 <_ZL12MX_ADC1_Initv+0x78>)
 8003470:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003472:	4b0e      	ldr	r3, [pc, #56]	; (80034ac <_ZL12MX_ADC1_Initv+0x70>)
 8003474:	2200      	movs	r2, #0
 8003476:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8003478:	4b0c      	ldr	r3, [pc, #48]	; (80034ac <_ZL12MX_ADC1_Initv+0x70>)
 800347a:	2201      	movs	r2, #1
 800347c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800347e:	4b0b      	ldr	r3, [pc, #44]	; (80034ac <_ZL12MX_ADC1_Initv+0x70>)
 8003480:	2200      	movs	r2, #0
 8003482:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8003486:	4b09      	ldr	r3, [pc, #36]	; (80034ac <_ZL12MX_ADC1_Initv+0x70>)
 8003488:	2201      	movs	r2, #1
 800348a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800348c:	4807      	ldr	r0, [pc, #28]	; (80034ac <_ZL12MX_ADC1_Initv+0x70>)
 800348e:	f001 faad 	bl	80049ec <HAL_ADC_Init>
 8003492:	4603      	mov	r3, r0
 8003494:	2b00      	cmp	r3, #0
 8003496:	bf14      	ite	ne
 8003498:	2301      	movne	r3, #1
 800349a:	2300      	moveq	r3, #0
 800349c:	b2db      	uxtb	r3, r3
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d001      	beq.n	80034a6 <_ZL12MX_ADC1_Initv+0x6a>
  {
    Error_Handler();
 80034a2:	f000 fabf 	bl	8003a24 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80034a6:	bf00      	nop
 80034a8:	bd80      	pop	{r7, pc}
 80034aa:	bf00      	nop
 80034ac:	200005bc 	.word	0x200005bc
 80034b0:	40012000 	.word	0x40012000
 80034b4:	0f000001 	.word	0x0f000001

080034b8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
void MX_I2C1_Init(void)
{
 80034b8:	b580      	push	{r7, lr}
 80034ba:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80034bc:	4b15      	ldr	r3, [pc, #84]	; (8003514 <MX_I2C1_Init+0x5c>)
 80034be:	4a16      	ldr	r2, [pc, #88]	; (8003518 <MX_I2C1_Init+0x60>)
 80034c0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80034c2:	4b14      	ldr	r3, [pc, #80]	; (8003514 <MX_I2C1_Init+0x5c>)
 80034c4:	4a15      	ldr	r2, [pc, #84]	; (800351c <MX_I2C1_Init+0x64>)
 80034c6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80034c8:	4b12      	ldr	r3, [pc, #72]	; (8003514 <MX_I2C1_Init+0x5c>)
 80034ca:	2200      	movs	r2, #0
 80034cc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80034ce:	4b11      	ldr	r3, [pc, #68]	; (8003514 <MX_I2C1_Init+0x5c>)
 80034d0:	2200      	movs	r2, #0
 80034d2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80034d4:	4b0f      	ldr	r3, [pc, #60]	; (8003514 <MX_I2C1_Init+0x5c>)
 80034d6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80034da:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80034dc:	4b0d      	ldr	r3, [pc, #52]	; (8003514 <MX_I2C1_Init+0x5c>)
 80034de:	2200      	movs	r2, #0
 80034e0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80034e2:	4b0c      	ldr	r3, [pc, #48]	; (8003514 <MX_I2C1_Init+0x5c>)
 80034e4:	2200      	movs	r2, #0
 80034e6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80034e8:	4b0a      	ldr	r3, [pc, #40]	; (8003514 <MX_I2C1_Init+0x5c>)
 80034ea:	2200      	movs	r2, #0
 80034ec:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80034ee:	4b09      	ldr	r3, [pc, #36]	; (8003514 <MX_I2C1_Init+0x5c>)
 80034f0:	2200      	movs	r2, #0
 80034f2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80034f4:	4807      	ldr	r0, [pc, #28]	; (8003514 <MX_I2C1_Init+0x5c>)
 80034f6:	f002 fba1 	bl	8005c3c <HAL_I2C_Init>
 80034fa:	4603      	mov	r3, r0
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	bf14      	ite	ne
 8003500:	2301      	movne	r3, #1
 8003502:	2300      	moveq	r3, #0
 8003504:	b2db      	uxtb	r3, r3
 8003506:	2b00      	cmp	r3, #0
 8003508:	d001      	beq.n	800350e <MX_I2C1_Init+0x56>
  {
    Error_Handler();
 800350a:	f000 fa8b 	bl	8003a24 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800350e:	bf00      	nop
 8003510:	bd80      	pop	{r7, pc}
 8003512:	bf00      	nop
 8003514:	20000604 	.word	0x20000604
 8003518:	40005400 	.word	0x40005400
 800351c:	00061a80 	.word	0x00061a80

08003520 <_ZL12MX_TIM3_Initv>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8003520:	b580      	push	{r7, lr}
 8003522:	b08a      	sub	sp, #40	; 0x28
 8003524:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003526:	f107 0320 	add.w	r3, r7, #32
 800352a:	2200      	movs	r2, #0
 800352c:	601a      	str	r2, [r3, #0]
 800352e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003530:	1d3b      	adds	r3, r7, #4
 8003532:	2200      	movs	r2, #0
 8003534:	601a      	str	r2, [r3, #0]
 8003536:	605a      	str	r2, [r3, #4]
 8003538:	609a      	str	r2, [r3, #8]
 800353a:	60da      	str	r2, [r3, #12]
 800353c:	611a      	str	r2, [r3, #16]
 800353e:	615a      	str	r2, [r3, #20]
 8003540:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003542:	4b29      	ldr	r3, [pc, #164]	; (80035e8 <_ZL12MX_TIM3_Initv+0xc8>)
 8003544:	4a29      	ldr	r2, [pc, #164]	; (80035ec <_ZL12MX_TIM3_Initv+0xcc>)
 8003546:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 16-1;
 8003548:	4b27      	ldr	r3, [pc, #156]	; (80035e8 <_ZL12MX_TIM3_Initv+0xc8>)
 800354a:	220f      	movs	r2, #15
 800354c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800354e:	4b26      	ldr	r3, [pc, #152]	; (80035e8 <_ZL12MX_TIM3_Initv+0xc8>)
 8003550:	2200      	movs	r2, #0
 8003552:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 20000;
 8003554:	4b24      	ldr	r3, [pc, #144]	; (80035e8 <_ZL12MX_TIM3_Initv+0xc8>)
 8003556:	f644 6220 	movw	r2, #20000	; 0x4e20
 800355a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800355c:	4b22      	ldr	r3, [pc, #136]	; (80035e8 <_ZL12MX_TIM3_Initv+0xc8>)
 800355e:	2200      	movs	r2, #0
 8003560:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003562:	4b21      	ldr	r3, [pc, #132]	; (80035e8 <_ZL12MX_TIM3_Initv+0xc8>)
 8003564:	2200      	movs	r2, #0
 8003566:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8003568:	481f      	ldr	r0, [pc, #124]	; (80035e8 <_ZL12MX_TIM3_Initv+0xc8>)
 800356a:	f005 fa0d 	bl	8008988 <HAL_TIM_PWM_Init>
 800356e:	4603      	mov	r3, r0
 8003570:	2b00      	cmp	r3, #0
 8003572:	bf14      	ite	ne
 8003574:	2301      	movne	r3, #1
 8003576:	2300      	moveq	r3, #0
 8003578:	b2db      	uxtb	r3, r3
 800357a:	2b00      	cmp	r3, #0
 800357c:	d001      	beq.n	8003582 <_ZL12MX_TIM3_Initv+0x62>
  {
    Error_Handler();
 800357e:	f000 fa51 	bl	8003a24 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003582:	2300      	movs	r3, #0
 8003584:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003586:	2300      	movs	r3, #0
 8003588:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800358a:	f107 0320 	add.w	r3, r7, #32
 800358e:	4619      	mov	r1, r3
 8003590:	4815      	ldr	r0, [pc, #84]	; (80035e8 <_ZL12MX_TIM3_Initv+0xc8>)
 8003592:	f005 ff69 	bl	8009468 <HAL_TIMEx_MasterConfigSynchronization>
 8003596:	4603      	mov	r3, r0
 8003598:	2b00      	cmp	r3, #0
 800359a:	bf14      	ite	ne
 800359c:	2301      	movne	r3, #1
 800359e:	2300      	moveq	r3, #0
 80035a0:	b2db      	uxtb	r3, r3
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d001      	beq.n	80035aa <_ZL12MX_TIM3_Initv+0x8a>
  {
    Error_Handler();
 80035a6:	f000 fa3d 	bl	8003a24 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80035aa:	2360      	movs	r3, #96	; 0x60
 80035ac:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80035ae:	2300      	movs	r3, #0
 80035b0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80035b2:	2300      	movs	r3, #0
 80035b4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80035b6:	2300      	movs	r3, #0
 80035b8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80035ba:	1d3b      	adds	r3, r7, #4
 80035bc:	2200      	movs	r2, #0
 80035be:	4619      	mov	r1, r3
 80035c0:	4809      	ldr	r0, [pc, #36]	; (80035e8 <_ZL12MX_TIM3_Initv+0xc8>)
 80035c2:	f005 fc01 	bl	8008dc8 <HAL_TIM_PWM_ConfigChannel>
 80035c6:	4603      	mov	r3, r0
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	bf14      	ite	ne
 80035cc:	2301      	movne	r3, #1
 80035ce:	2300      	moveq	r3, #0
 80035d0:	b2db      	uxtb	r3, r3
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d001      	beq.n	80035da <_ZL12MX_TIM3_Initv+0xba>
  {
    Error_Handler();
 80035d6:	f000 fa25 	bl	8003a24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80035da:	4803      	ldr	r0, [pc, #12]	; (80035e8 <_ZL12MX_TIM3_Initv+0xc8>)
 80035dc:	f000 ffc0 	bl	8004560 <HAL_TIM_MspPostInit>

}
 80035e0:	bf00      	nop
 80035e2:	3728      	adds	r7, #40	; 0x28
 80035e4:	46bd      	mov	sp, r7
 80035e6:	bd80      	pop	{r7, pc}
 80035e8:	20000718 	.word	0x20000718
 80035ec:	40000400 	.word	0x40000400

080035f0 <_ZL12MX_TIM4_Initv>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80035f0:	b580      	push	{r7, lr}
 80035f2:	b08a      	sub	sp, #40	; 0x28
 80035f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80035f6:	f107 0320 	add.w	r3, r7, #32
 80035fa:	2200      	movs	r2, #0
 80035fc:	601a      	str	r2, [r3, #0]
 80035fe:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003600:	1d3b      	adds	r3, r7, #4
 8003602:	2200      	movs	r2, #0
 8003604:	601a      	str	r2, [r3, #0]
 8003606:	605a      	str	r2, [r3, #4]
 8003608:	609a      	str	r2, [r3, #8]
 800360a:	60da      	str	r2, [r3, #12]
 800360c:	611a      	str	r2, [r3, #16]
 800360e:	615a      	str	r2, [r3, #20]
 8003610:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8003612:	4b29      	ldr	r3, [pc, #164]	; (80036b8 <_ZL12MX_TIM4_Initv+0xc8>)
 8003614:	4a29      	ldr	r2, [pc, #164]	; (80036bc <_ZL12MX_TIM4_Initv+0xcc>)
 8003616:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 16-1;
 8003618:	4b27      	ldr	r3, [pc, #156]	; (80036b8 <_ZL12MX_TIM4_Initv+0xc8>)
 800361a:	220f      	movs	r2, #15
 800361c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800361e:	4b26      	ldr	r3, [pc, #152]	; (80036b8 <_ZL12MX_TIM4_Initv+0xc8>)
 8003620:	2200      	movs	r2, #0
 8003622:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 2500;
 8003624:	4b24      	ldr	r3, [pc, #144]	; (80036b8 <_ZL12MX_TIM4_Initv+0xc8>)
 8003626:	f640 12c4 	movw	r2, #2500	; 0x9c4
 800362a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800362c:	4b22      	ldr	r3, [pc, #136]	; (80036b8 <_ZL12MX_TIM4_Initv+0xc8>)
 800362e:	2200      	movs	r2, #0
 8003630:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003632:	4b21      	ldr	r3, [pc, #132]	; (80036b8 <_ZL12MX_TIM4_Initv+0xc8>)
 8003634:	2200      	movs	r2, #0
 8003636:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8003638:	481f      	ldr	r0, [pc, #124]	; (80036b8 <_ZL12MX_TIM4_Initv+0xc8>)
 800363a:	f005 f9a5 	bl	8008988 <HAL_TIM_PWM_Init>
 800363e:	4603      	mov	r3, r0
 8003640:	2b00      	cmp	r3, #0
 8003642:	bf14      	ite	ne
 8003644:	2301      	movne	r3, #1
 8003646:	2300      	moveq	r3, #0
 8003648:	b2db      	uxtb	r3, r3
 800364a:	2b00      	cmp	r3, #0
 800364c:	d001      	beq.n	8003652 <_ZL12MX_TIM4_Initv+0x62>
  {
    Error_Handler();
 800364e:	f000 f9e9 	bl	8003a24 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003652:	2300      	movs	r3, #0
 8003654:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003656:	2300      	movs	r3, #0
 8003658:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800365a:	f107 0320 	add.w	r3, r7, #32
 800365e:	4619      	mov	r1, r3
 8003660:	4815      	ldr	r0, [pc, #84]	; (80036b8 <_ZL12MX_TIM4_Initv+0xc8>)
 8003662:	f005 ff01 	bl	8009468 <HAL_TIMEx_MasterConfigSynchronization>
 8003666:	4603      	mov	r3, r0
 8003668:	2b00      	cmp	r3, #0
 800366a:	bf14      	ite	ne
 800366c:	2301      	movne	r3, #1
 800366e:	2300      	moveq	r3, #0
 8003670:	b2db      	uxtb	r3, r3
 8003672:	2b00      	cmp	r3, #0
 8003674:	d001      	beq.n	800367a <_ZL12MX_TIM4_Initv+0x8a>
  {
    Error_Handler();
 8003676:	f000 f9d5 	bl	8003a24 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800367a:	2360      	movs	r3, #96	; 0x60
 800367c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800367e:	2300      	movs	r3, #0
 8003680:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003682:	2300      	movs	r3, #0
 8003684:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003686:	2300      	movs	r3, #0
 8003688:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800368a:	1d3b      	adds	r3, r7, #4
 800368c:	2200      	movs	r2, #0
 800368e:	4619      	mov	r1, r3
 8003690:	4809      	ldr	r0, [pc, #36]	; (80036b8 <_ZL12MX_TIM4_Initv+0xc8>)
 8003692:	f005 fb99 	bl	8008dc8 <HAL_TIM_PWM_ConfigChannel>
 8003696:	4603      	mov	r3, r0
 8003698:	2b00      	cmp	r3, #0
 800369a:	bf14      	ite	ne
 800369c:	2301      	movne	r3, #1
 800369e:	2300      	moveq	r3, #0
 80036a0:	b2db      	uxtb	r3, r3
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d001      	beq.n	80036aa <_ZL12MX_TIM4_Initv+0xba>
  {
    Error_Handler();
 80036a6:	f000 f9bd 	bl	8003a24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80036aa:	4803      	ldr	r0, [pc, #12]	; (80036b8 <_ZL12MX_TIM4_Initv+0xc8>)
 80036ac:	f000 ff58 	bl	8004560 <HAL_TIM_MspPostInit>

}
 80036b0:	bf00      	nop
 80036b2:	3728      	adds	r7, #40	; 0x28
 80036b4:	46bd      	mov	sp, r7
 80036b6:	bd80      	pop	{r7, pc}
 80036b8:	20000760 	.word	0x20000760
 80036bc:	40000800 	.word	0x40000800

080036c0 <_ZL13MX_TIM11_Initv>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 80036c0:	b580      	push	{r7, lr}
 80036c2:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 80036c4:	4b10      	ldr	r3, [pc, #64]	; (8003708 <_ZL13MX_TIM11_Initv+0x48>)
 80036c6:	4a11      	ldr	r2, [pc, #68]	; (800370c <_ZL13MX_TIM11_Initv+0x4c>)
 80036c8:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 16 - 1;
 80036ca:	4b0f      	ldr	r3, [pc, #60]	; (8003708 <_ZL13MX_TIM11_Initv+0x48>)
 80036cc:	220f      	movs	r2, #15
 80036ce:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 80036d0:	4b0d      	ldr	r3, [pc, #52]	; (8003708 <_ZL13MX_TIM11_Initv+0x48>)
 80036d2:	2200      	movs	r2, #0
 80036d4:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 65535;
 80036d6:	4b0c      	ldr	r3, [pc, #48]	; (8003708 <_ZL13MX_TIM11_Initv+0x48>)
 80036d8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80036dc:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80036de:	4b0a      	ldr	r3, [pc, #40]	; (8003708 <_ZL13MX_TIM11_Initv+0x48>)
 80036e0:	2200      	movs	r2, #0
 80036e2:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80036e4:	4b08      	ldr	r3, [pc, #32]	; (8003708 <_ZL13MX_TIM11_Initv+0x48>)
 80036e6:	2200      	movs	r2, #0
 80036e8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 80036ea:	4807      	ldr	r0, [pc, #28]	; (8003708 <_ZL13MX_TIM11_Initv+0x48>)
 80036ec:	f005 f828 	bl	8008740 <HAL_TIM_Base_Init>
 80036f0:	4603      	mov	r3, r0
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	bf14      	ite	ne
 80036f6:	2301      	movne	r3, #1
 80036f8:	2300      	moveq	r3, #0
 80036fa:	b2db      	uxtb	r3, r3
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d001      	beq.n	8003704 <_ZL13MX_TIM11_Initv+0x44>
  {
    Error_Handler();
 8003700:	f000 f990 	bl	8003a24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 8003704:	bf00      	nop
 8003706:	bd80      	pop	{r7, pc}
 8003708:	200007a8 	.word	0x200007a8
 800370c:	40014800 	.word	0x40014800

08003710 <_ZL13MX_TIM13_Initv>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 8003710:	b580      	push	{r7, lr}
 8003712:	af00      	add	r7, sp, #0
  /* USER CODE END TIM13_Init 0 */

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8003714:	4b10      	ldr	r3, [pc, #64]	; (8003758 <_ZL13MX_TIM13_Initv+0x48>)
 8003716:	4a11      	ldr	r2, [pc, #68]	; (800375c <_ZL13MX_TIM13_Initv+0x4c>)
 8003718:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 16 - 1;
 800371a:	4b0f      	ldr	r3, [pc, #60]	; (8003758 <_ZL13MX_TIM13_Initv+0x48>)
 800371c:	220f      	movs	r2, #15
 800371e:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003720:	4b0d      	ldr	r3, [pc, #52]	; (8003758 <_ZL13MX_TIM13_Initv+0x48>)
 8003722:	2200      	movs	r2, #0
 8003724:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 65535;
 8003726:	4b0c      	ldr	r3, [pc, #48]	; (8003758 <_ZL13MX_TIM13_Initv+0x48>)
 8003728:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800372c:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800372e:	4b0a      	ldr	r3, [pc, #40]	; (8003758 <_ZL13MX_TIM13_Initv+0x48>)
 8003730:	2200      	movs	r2, #0
 8003732:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003734:	4b08      	ldr	r3, [pc, #32]	; (8003758 <_ZL13MX_TIM13_Initv+0x48>)
 8003736:	2200      	movs	r2, #0
 8003738:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 800373a:	4807      	ldr	r0, [pc, #28]	; (8003758 <_ZL13MX_TIM13_Initv+0x48>)
 800373c:	f005 f800 	bl	8008740 <HAL_TIM_Base_Init>
 8003740:	4603      	mov	r3, r0
 8003742:	2b00      	cmp	r3, #0
 8003744:	bf14      	ite	ne
 8003746:	2301      	movne	r3, #1
 8003748:	2300      	moveq	r3, #0
 800374a:	b2db      	uxtb	r3, r3
 800374c:	2b00      	cmp	r3, #0
 800374e:	d001      	beq.n	8003754 <_ZL13MX_TIM13_Initv+0x44>
  {
    Error_Handler();
 8003750:	f000 f968 	bl	8003a24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 8003754:	bf00      	nop
 8003756:	bd80      	pop	{r7, pc}
 8003758:	200007f0 	.word	0x200007f0
 800375c:	40001c00 	.word	0x40001c00

08003760 <_ZL13MX_TIM14_Initv>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 8003760:	b580      	push	{r7, lr}
 8003762:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8003764:	4b10      	ldr	r3, [pc, #64]	; (80037a8 <_ZL13MX_TIM14_Initv+0x48>)
 8003766:	4a11      	ldr	r2, [pc, #68]	; (80037ac <_ZL13MX_TIM14_Initv+0x4c>)
 8003768:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 16 - 1;
 800376a:	4b0f      	ldr	r3, [pc, #60]	; (80037a8 <_ZL13MX_TIM14_Initv+0x48>)
 800376c:	220f      	movs	r2, #15
 800376e:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003770:	4b0d      	ldr	r3, [pc, #52]	; (80037a8 <_ZL13MX_TIM14_Initv+0x48>)
 8003772:	2200      	movs	r2, #0
 8003774:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 65535;
 8003776:	4b0c      	ldr	r3, [pc, #48]	; (80037a8 <_ZL13MX_TIM14_Initv+0x48>)
 8003778:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800377c:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800377e:	4b0a      	ldr	r3, [pc, #40]	; (80037a8 <_ZL13MX_TIM14_Initv+0x48>)
 8003780:	2200      	movs	r2, #0
 8003782:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003784:	4b08      	ldr	r3, [pc, #32]	; (80037a8 <_ZL13MX_TIM14_Initv+0x48>)
 8003786:	2200      	movs	r2, #0
 8003788:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 800378a:	4807      	ldr	r0, [pc, #28]	; (80037a8 <_ZL13MX_TIM14_Initv+0x48>)
 800378c:	f004 ffd8 	bl	8008740 <HAL_TIM_Base_Init>
 8003790:	4603      	mov	r3, r0
 8003792:	2b00      	cmp	r3, #0
 8003794:	bf14      	ite	ne
 8003796:	2301      	movne	r3, #1
 8003798:	2300      	moveq	r3, #0
 800379a:	b2db      	uxtb	r3, r3
 800379c:	2b00      	cmp	r3, #0
 800379e:	d001      	beq.n	80037a4 <_ZL13MX_TIM14_Initv+0x44>
  {
    Error_Handler();
 80037a0:	f000 f940 	bl	8003a24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 80037a4:	bf00      	nop
 80037a6:	bd80      	pop	{r7, pc}
 80037a8:	20000838 	.word	0x20000838
 80037ac:	40002000 	.word	0x40002000

080037b0 <_ZL11MX_DMA_Initv>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80037b0:	b580      	push	{r7, lr}
 80037b2:	b082      	sub	sp, #8
 80037b4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80037b6:	2300      	movs	r3, #0
 80037b8:	607b      	str	r3, [r7, #4]
 80037ba:	4b10      	ldr	r3, [pc, #64]	; (80037fc <_ZL11MX_DMA_Initv+0x4c>)
 80037bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037be:	4a0f      	ldr	r2, [pc, #60]	; (80037fc <_ZL11MX_DMA_Initv+0x4c>)
 80037c0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80037c4:	6313      	str	r3, [r2, #48]	; 0x30
 80037c6:	4b0d      	ldr	r3, [pc, #52]	; (80037fc <_ZL11MX_DMA_Initv+0x4c>)
 80037c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037ca:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80037ce:	607b      	str	r3, [r7, #4]
 80037d0:	687b      	ldr	r3, [r7, #4]
  
  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80037d2:	2200      	movs	r2, #0
 80037d4:	2100      	movs	r1, #0
 80037d6:	200b      	movs	r0, #11
 80037d8:	f001 fd1d 	bl	8005216 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80037dc:	200b      	movs	r0, #11
 80037de:	f001 fd36 	bl	800524e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 80037e2:	2200      	movs	r2, #0
 80037e4:	2100      	movs	r1, #0
 80037e6:	2011      	movs	r0, #17
 80037e8:	f001 fd15 	bl	8005216 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 80037ec:	2011      	movs	r0, #17
 80037ee:	f001 fd2e 	bl	800524e <HAL_NVIC_EnableIRQ>

}
 80037f2:	bf00      	nop
 80037f4:	3708      	adds	r7, #8
 80037f6:	46bd      	mov	sp, r7
 80037f8:	bd80      	pop	{r7, pc}
 80037fa:	bf00      	nop
 80037fc:	40023800 	.word	0x40023800

08003800 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003800:	b580      	push	{r7, lr}
 8003802:	b08a      	sub	sp, #40	; 0x28
 8003804:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003806:	f107 0314 	add.w	r3, r7, #20
 800380a:	2200      	movs	r2, #0
 800380c:	601a      	str	r2, [r3, #0]
 800380e:	605a      	str	r2, [r3, #4]
 8003810:	609a      	str	r2, [r3, #8]
 8003812:	60da      	str	r2, [r3, #12]
 8003814:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003816:	2300      	movs	r3, #0
 8003818:	613b      	str	r3, [r7, #16]
 800381a:	4b44      	ldr	r3, [pc, #272]	; (800392c <_ZL12MX_GPIO_Initv+0x12c>)
 800381c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800381e:	4a43      	ldr	r2, [pc, #268]	; (800392c <_ZL12MX_GPIO_Initv+0x12c>)
 8003820:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003824:	6313      	str	r3, [r2, #48]	; 0x30
 8003826:	4b41      	ldr	r3, [pc, #260]	; (800392c <_ZL12MX_GPIO_Initv+0x12c>)
 8003828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800382a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800382e:	613b      	str	r3, [r7, #16]
 8003830:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003832:	2300      	movs	r3, #0
 8003834:	60fb      	str	r3, [r7, #12]
 8003836:	4b3d      	ldr	r3, [pc, #244]	; (800392c <_ZL12MX_GPIO_Initv+0x12c>)
 8003838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800383a:	4a3c      	ldr	r2, [pc, #240]	; (800392c <_ZL12MX_GPIO_Initv+0x12c>)
 800383c:	f043 0304 	orr.w	r3, r3, #4
 8003840:	6313      	str	r3, [r2, #48]	; 0x30
 8003842:	4b3a      	ldr	r3, [pc, #232]	; (800392c <_ZL12MX_GPIO_Initv+0x12c>)
 8003844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003846:	f003 0304 	and.w	r3, r3, #4
 800384a:	60fb      	str	r3, [r7, #12]
 800384c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800384e:	2300      	movs	r3, #0
 8003850:	60bb      	str	r3, [r7, #8]
 8003852:	4b36      	ldr	r3, [pc, #216]	; (800392c <_ZL12MX_GPIO_Initv+0x12c>)
 8003854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003856:	4a35      	ldr	r2, [pc, #212]	; (800392c <_ZL12MX_GPIO_Initv+0x12c>)
 8003858:	f043 0301 	orr.w	r3, r3, #1
 800385c:	6313      	str	r3, [r2, #48]	; 0x30
 800385e:	4b33      	ldr	r3, [pc, #204]	; (800392c <_ZL12MX_GPIO_Initv+0x12c>)
 8003860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003862:	f003 0301 	and.w	r3, r3, #1
 8003866:	60bb      	str	r3, [r7, #8]
 8003868:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800386a:	2300      	movs	r3, #0
 800386c:	607b      	str	r3, [r7, #4]
 800386e:	4b2f      	ldr	r3, [pc, #188]	; (800392c <_ZL12MX_GPIO_Initv+0x12c>)
 8003870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003872:	4a2e      	ldr	r2, [pc, #184]	; (800392c <_ZL12MX_GPIO_Initv+0x12c>)
 8003874:	f043 0302 	orr.w	r3, r3, #2
 8003878:	6313      	str	r3, [r2, #48]	; 0x30
 800387a:	4b2c      	ldr	r3, [pc, #176]	; (800392c <_ZL12MX_GPIO_Initv+0x12c>)
 800387c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800387e:	f003 0302 	and.w	r3, r3, #2
 8003882:	607b      	str	r3, [r7, #4]
 8003884:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ONBOARD_LED_1_Pin|ONBOARD_LED_2_Pin|ONBOARD_LED_3_Pin|ONBOARD_LED_4_Pin
 8003886:	2200      	movs	r2, #0
 8003888:	f44f 71f8 	mov.w	r1, #496	; 0x1f0
 800388c:	4828      	ldr	r0, [pc, #160]	; (8003930 <_ZL12MX_GPIO_Initv+0x130>)
 800388e:	f002 f98b 	bl	8005ba8 <HAL_GPIO_WritePin>
                          |ONBOARD_WRITE_3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ONBOARD_WRITE_2_GPIO_Port, ONBOARD_WRITE_2_Pin, GPIO_PIN_RESET);
 8003892:	2200      	movs	r2, #0
 8003894:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003898:	4826      	ldr	r0, [pc, #152]	; (8003934 <_ZL12MX_GPIO_Initv+0x134>)
 800389a:	f002 f985 	bl	8005ba8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : ONBOARD_READ_IT_3_Pin */
  GPIO_InitStruct.Pin = ONBOARD_READ_IT_3_Pin;
 800389e:	2301      	movs	r3, #1
 80038a0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80038a2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80038a6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80038a8:	2302      	movs	r3, #2
 80038aa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ONBOARD_READ_IT_3_GPIO_Port, &GPIO_InitStruct);
 80038ac:	f107 0314 	add.w	r3, r7, #20
 80038b0:	4619      	mov	r1, r3
 80038b2:	4820      	ldr	r0, [pc, #128]	; (8003934 <_ZL12MX_GPIO_Initv+0x134>)
 80038b4:	f001 ffda 	bl	800586c <HAL_GPIO_Init>

  /*Configure GPIO pins : ONBOARD_BUTTON_1_Pin ONBOARD_BUTTON_2_Pin ONBOARD_BUTTON_3_Pin ONBOARD_BUTTON_4_Pin */
  GPIO_InitStruct.Pin = ONBOARD_BUTTON_1_Pin|ONBOARD_BUTTON_2_Pin|ONBOARD_BUTTON_3_Pin|ONBOARD_BUTTON_4_Pin;
 80038b8:	230f      	movs	r3, #15
 80038ba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80038bc:	2300      	movs	r3, #0
 80038be:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038c0:	2300      	movs	r3, #0
 80038c2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80038c4:	f107 0314 	add.w	r3, r7, #20
 80038c8:	4619      	mov	r1, r3
 80038ca:	4819      	ldr	r0, [pc, #100]	; (8003930 <_ZL12MX_GPIO_Initv+0x130>)
 80038cc:	f001 ffce 	bl	800586c <HAL_GPIO_Init>

  /*Configure GPIO pins : ONBOARD_LED_1_Pin ONBOARD_LED_2_Pin ONBOARD_LED_3_Pin ONBOARD_LED_4_Pin
                           ONBOARD_WRITE_3_Pin */
  GPIO_InitStruct.Pin = ONBOARD_LED_1_Pin|ONBOARD_LED_2_Pin|ONBOARD_LED_3_Pin|ONBOARD_LED_4_Pin
 80038d0:	f44f 73f8 	mov.w	r3, #496	; 0x1f0
 80038d4:	617b      	str	r3, [r7, #20]
                          |ONBOARD_WRITE_3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80038d6:	2301      	movs	r3, #1
 80038d8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038da:	2300      	movs	r3, #0
 80038dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80038de:	2300      	movs	r3, #0
 80038e0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80038e2:	f107 0314 	add.w	r3, r7, #20
 80038e6:	4619      	mov	r1, r3
 80038e8:	4811      	ldr	r0, [pc, #68]	; (8003930 <_ZL12MX_GPIO_Initv+0x130>)
 80038ea:	f001 ffbf 	bl	800586c <HAL_GPIO_Init>

  /*Configure GPIO pin : ONBOARD_WRITE_2_Pin */
  GPIO_InitStruct.Pin = ONBOARD_WRITE_2_Pin;
 80038ee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80038f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80038f4:	2301      	movs	r3, #1
 80038f6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038f8:	2300      	movs	r3, #0
 80038fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80038fc:	2300      	movs	r3, #0
 80038fe:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(ONBOARD_WRITE_2_GPIO_Port, &GPIO_InitStruct);
 8003900:	f107 0314 	add.w	r3, r7, #20
 8003904:	4619      	mov	r1, r3
 8003906:	480b      	ldr	r0, [pc, #44]	; (8003934 <_ZL12MX_GPIO_Initv+0x134>)
 8003908:	f001 ffb0 	bl	800586c <HAL_GPIO_Init>

  /*Configure GPIO pin : ONBOARD_READ_4_Pin */
  GPIO_InitStruct.Pin = ONBOARD_READ_4_Pin;
 800390c:	2380      	movs	r3, #128	; 0x80
 800390e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003910:	2300      	movs	r3, #0
 8003912:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003914:	2300      	movs	r3, #0
 8003916:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ONBOARD_READ_4_GPIO_Port, &GPIO_InitStruct);
 8003918:	f107 0314 	add.w	r3, r7, #20
 800391c:	4619      	mov	r1, r3
 800391e:	4806      	ldr	r0, [pc, #24]	; (8003938 <_ZL12MX_GPIO_Initv+0x138>)
 8003920:	f001 ffa4 	bl	800586c <HAL_GPIO_Init>

}
 8003924:	bf00      	nop
 8003926:	3728      	adds	r7, #40	; 0x28
 8003928:	46bd      	mov	sp, r7
 800392a:	bd80      	pop	{r7, pc}
 800392c:	40023800 	.word	0x40023800
 8003930:	40020000 	.word	0x40020000
 8003934:	40020800 	.word	0x40020800
 8003938:	40020400 	.word	0x40020400

0800393c <HAL_TIM_PeriodElapsedCallback>:
 * @brief Interrupt that is called when any Timer overflows
 * @param htim timer handle
 * @retval none
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800393c:	b480      	push	{r7}
 800393e:	b083      	sub	sp, #12
 8003940:	af00      	add	r7, sp, #0
 8003942:	6078      	str	r0, [r7, #4]
  // }
  // else
  // {
  //   SBUS_RecieveDone = false;
  // }
}
 8003944:	bf00      	nop
 8003946:	370c      	adds	r7, #12
 8003948:	46bd      	mov	sp, r7
 800394a:	bc80      	pop	{r7}
 800394c:	4770      	bx	lr
	...

08003950 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{ 
 8003950:	b580      	push	{r7, lr}
 8003952:	b084      	sub	sp, #16
 8003954:	af00      	add	r7, sp, #0
 8003956:	4603      	mov	r3, r0
 8003958:	80fb      	strh	r3, [r7, #6]
  if (GPIO_Pin == ONBOARD_READ_IT_3_Pin)
 800395a:	88fb      	ldrh	r3, [r7, #6]
 800395c:	2b01      	cmp	r3, #1
 800395e:	d10d      	bne.n	800397c <HAL_GPIO_EXTI_Callback+0x2c>
  {
    uint32_t time = HAL_GetTick();
 8003960:	f001 f816 	bl	8004990 <HAL_GetTick>
 8003964:	60f8      	str	r0, [r7, #12]
    if (time - PinInterruptLastTime > 3)
 8003966:	4b07      	ldr	r3, [pc, #28]	; (8003984 <HAL_GPIO_EXTI_Callback+0x34>)
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	68fa      	ldr	r2, [r7, #12]
 800396c:	1ad3      	subs	r3, r2, r3
 800396e:	2b03      	cmp	r3, #3
 8003970:	d904      	bls.n	800397c <HAL_GPIO_EXTI_Callback+0x2c>
    {
      PinInterruptLastTime = time;
 8003972:	4a04      	ldr	r2, [pc, #16]	; (8003984 <HAL_GPIO_EXTI_Callback+0x34>)
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	6013      	str	r3, [r2, #0]
      SBUS_RecieveBits();
 8003978:	f7ff fae4 	bl	8002f44 <_Z16SBUS_RecieveBitsv>
    }
  }
}
 800397c:	bf00      	nop
 800397e:	3710      	adds	r7, #16
 8003980:	46bd      	mov	sp, r7
 8003982:	bd80      	pop	{r7, pc}
 8003984:	20000880 	.word	0x20000880

08003988 <ADC_Select_Channel_11>:

void ADC_Select_Channel_11()
{
 8003988:	b580      	push	{r7, lr}
 800398a:	b084      	sub	sp, #16
 800398c:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 800398e:	463b      	mov	r3, r7
 8003990:	2200      	movs	r2, #0
 8003992:	601a      	str	r2, [r3, #0]
 8003994:	605a      	str	r2, [r3, #4]
 8003996:	609a      	str	r2, [r3, #8]
 8003998:	60da      	str	r2, [r3, #12]
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 800399a:	230b      	movs	r3, #11
 800399c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800399e:	2301      	movs	r3, #1
 80039a0:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 80039a2:	2301      	movs	r3, #1
 80039a4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80039a6:	463b      	mov	r3, r7
 80039a8:	4619      	mov	r1, r3
 80039aa:	480a      	ldr	r0, [pc, #40]	; (80039d4 <ADC_Select_Channel_11+0x4c>)
 80039ac:	f001 f912 	bl	8004bd4 <HAL_ADC_ConfigChannel>
 80039b0:	4603      	mov	r3, r0
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	bf14      	ite	ne
 80039b6:	2301      	movne	r3, #1
 80039b8:	2300      	moveq	r3, #0
 80039ba:	b2db      	uxtb	r3, r3
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d001      	beq.n	80039c4 <ADC_Select_Channel_11+0x3c>
  {
    Error_Handler();
 80039c0:	f000 f830 	bl	8003a24 <Error_Handler>
  }
  HAL_ADC_Start(&hadc1);
 80039c4:	4803      	ldr	r0, [pc, #12]	; (80039d4 <ADC_Select_Channel_11+0x4c>)
 80039c6:	f001 f855 	bl	8004a74 <HAL_ADC_Start>
}
 80039ca:	bf00      	nop
 80039cc:	3710      	adds	r7, #16
 80039ce:	46bd      	mov	sp, r7
 80039d0:	bd80      	pop	{r7, pc}
 80039d2:	bf00      	nop
 80039d4:	200005bc 	.word	0x200005bc

080039d8 <ADC_Select_Channel_12>:
void ADC_Select_Channel_12()
{
 80039d8:	b580      	push	{r7, lr}
 80039da:	b084      	sub	sp, #16
 80039dc:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 80039de:	463b      	mov	r3, r7
 80039e0:	2200      	movs	r2, #0
 80039e2:	601a      	str	r2, [r3, #0]
 80039e4:	605a      	str	r2, [r3, #4]
 80039e6:	609a      	str	r2, [r3, #8]
 80039e8:	60da      	str	r2, [r3, #12]
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 80039ea:	230c      	movs	r3, #12
 80039ec:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80039ee:	2301      	movs	r3, #1
 80039f0:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80039f2:	463b      	mov	r3, r7
 80039f4:	4619      	mov	r1, r3
 80039f6:	480a      	ldr	r0, [pc, #40]	; (8003a20 <ADC_Select_Channel_12+0x48>)
 80039f8:	f001 f8ec 	bl	8004bd4 <HAL_ADC_ConfigChannel>
 80039fc:	4603      	mov	r3, r0
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	bf14      	ite	ne
 8003a02:	2301      	movne	r3, #1
 8003a04:	2300      	moveq	r3, #0
 8003a06:	b2db      	uxtb	r3, r3
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d001      	beq.n	8003a10 <ADC_Select_Channel_12+0x38>
  {
    Error_Handler();
 8003a0c:	f000 f80a 	bl	8003a24 <Error_Handler>
  }
  HAL_ADC_Start(&hadc1);
 8003a10:	4803      	ldr	r0, [pc, #12]	; (8003a20 <ADC_Select_Channel_12+0x48>)
 8003a12:	f001 f82f 	bl	8004a74 <HAL_ADC_Start>
}
 8003a16:	bf00      	nop
 8003a18:	3710      	adds	r7, #16
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	bd80      	pop	{r7, pc}
 8003a1e:	bf00      	nop
 8003a20:	200005bc 	.word	0x200005bc

08003a24 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003a24:	b480      	push	{r7}
 8003a26:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003a28:	b672      	cpsid	i
}
 8003a2a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003a2c:	e7fe      	b.n	8003a2c <Error_Handler+0x8>
	...

08003a30 <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 8003a30:	b480      	push	{r7}
 8003a32:	b083      	sub	sp, #12
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	6078      	str	r0, [r7, #4]
 8003a38:	6039      	str	r1, [r7, #0]
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	2b01      	cmp	r3, #1
 8003a3e:	d114      	bne.n	8003a6a <_Z41__static_initialization_and_destruction_0ii+0x3a>
 8003a40:	683b      	ldr	r3, [r7, #0]
 8003a42:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003a46:	4293      	cmp	r3, r2
 8003a48:	d10f      	bne.n	8003a6a <_Z41__static_initialization_and_destruction_0ii+0x3a>
uint16_t fastPPM_OFFTime = fastPPM_Pulselength - fastPPM_ONTime;//OFF time in microseconds
 8003a4a:	4b0a      	ldr	r3, [pc, #40]	; (8003a74 <_Z41__static_initialization_and_destruction_0ii+0x44>)
 8003a4c:	881b      	ldrh	r3, [r3, #0]
 8003a4e:	f5c3 631c 	rsb	r3, r3, #2496	; 0x9c0
 8003a52:	3304      	adds	r3, #4
 8003a54:	b29a      	uxth	r2, r3
 8003a56:	4b08      	ldr	r3, [pc, #32]	; (8003a78 <_Z41__static_initialization_and_destruction_0ii+0x48>)
 8003a58:	801a      	strh	r2, [r3, #0]
uint16_t slowPPM1_OFFTime = fastPPM_Pulselength - fastPPM_ONTime;//OFF time in microseconds
 8003a5a:	4b06      	ldr	r3, [pc, #24]	; (8003a74 <_Z41__static_initialization_and_destruction_0ii+0x44>)
 8003a5c:	881b      	ldrh	r3, [r3, #0]
 8003a5e:	f5c3 631c 	rsb	r3, r3, #2496	; 0x9c0
 8003a62:	3304      	adds	r3, #4
 8003a64:	b29a      	uxth	r2, r3
 8003a66:	4b05      	ldr	r3, [pc, #20]	; (8003a7c <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 8003a68:	801a      	strh	r2, [r3, #0]
}
 8003a6a:	bf00      	nop
 8003a6c:	370c      	adds	r7, #12
 8003a6e:	46bd      	mov	sp, r7
 8003a70:	bc80      	pop	{r7}
 8003a72:	4770      	bx	lr
 8003a74:	20000020 	.word	0x20000020
 8003a78:	20000884 	.word	0x20000884
 8003a7c:	20000886 	.word	0x20000886

08003a80 <_GLOBAL__sub_I_hadc1>:
 8003a80:	b580      	push	{r7, lr}
 8003a82:	af00      	add	r7, sp, #0
 8003a84:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003a88:	2001      	movs	r0, #1
 8003a8a:	f7ff ffd1 	bl	8003a30 <_Z41__static_initialization_and_destruction_0ii>
 8003a8e:	bd80      	pop	{r7, pc}

08003a90 <_ZSt4acosf>:
  using ::acos;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  acos(float __x)
  { return __builtin_acosf(__x); }
 8003a90:	b580      	push	{r7, lr}
 8003a92:	b082      	sub	sp, #8
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	6078      	str	r0, [r7, #4]
 8003a98:	6878      	ldr	r0, [r7, #4]
 8003a9a:	f009 fb0f 	bl	800d0bc <acosf>
 8003a9e:	4603      	mov	r3, r0
 8003aa0:	4618      	mov	r0, r3
 8003aa2:	3708      	adds	r7, #8
 8003aa4:	46bd      	mov	sp, r7
 8003aa6:	bd80      	pop	{r7, pc}

08003aa8 <_ZSt4atanf>:
  using ::atan;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  atan(float __x)
  { return __builtin_atanf(__x); }
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	b082      	sub	sp, #8
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	6078      	str	r0, [r7, #4]
 8003ab0:	6878      	ldr	r0, [r7, #4]
 8003ab2:	f009 f9f3 	bl	800ce9c <atanf>
 8003ab6:	4603      	mov	r3, r0
 8003ab8:	4618      	mov	r0, r3
 8003aba:	3708      	adds	r7, #8
 8003abc:	46bd      	mov	sp, r7
 8003abe:	bd80      	pop	{r7, pc}

08003ac0 <_Z4loopv>:
uint16_t Debug_diff = 0;
//Debug_CNT = TIM4->CNT;
//Debug_diff = TIM4->CNT - Debug_CNT;

void loop()
{
 8003ac0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003ac4:	b0f3      	sub	sp, #460	; 0x1cc
 8003ac6:	af14      	add	r7, sp, #80	; 0x50
  if (TIM4->CNT < 1000)
 8003ac8:	4b6f      	ldr	r3, [pc, #444]	; (8003c88 <_Z4loopv+0x1c8>)
 8003aca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003acc:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003ad0:	4293      	cmp	r3, r2
 8003ad2:	bf94      	ite	ls
 8003ad4:	2301      	movls	r3, #1
 8003ad6:	2300      	movhi	r3, #0
 8003ad8:	b2db      	uxtb	r3, r3
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	f000 82d2 	beq.w	8004084 <_Z4loopv+0x5c4>
  {



    switch (Step)
 8003ae0:	4b6a      	ldr	r3, [pc, #424]	; (8003c8c <_Z4loopv+0x1cc>)
 8003ae2:	781b      	ldrb	r3, [r3, #0]
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d002      	beq.n	8003aee <_Z4loopv+0x2e>
 8003ae8:	2b04      	cmp	r3, #4
 8003aea:	d004      	beq.n	8003af6 <_Z4loopv+0x36>
      break;
    case 4:
      HAL_NVIC_DisableIRQ(EXTI0_IRQn);
      break;
    default:
      break;
 8003aec:	e007      	b.n	8003afe <_Z4loopv+0x3e>
      HAL_NVIC_DisableIRQ(EXTI0_IRQn);
 8003aee:	2006      	movs	r0, #6
 8003af0:	f001 fbbb 	bl	800526a <HAL_NVIC_DisableIRQ>
      break;
 8003af4:	e003      	b.n	8003afe <_Z4loopv+0x3e>
      HAL_NVIC_DisableIRQ(EXTI0_IRQn);
 8003af6:	2006      	movs	r0, #6
 8003af8:	f001 fbb7 	bl	800526a <HAL_NVIC_DisableIRQ>
      break;
 8003afc:	bf00      	nop
    }
    //get motor angle and update PPM_OnTime
    ADC_Select_Channel_11();
 8003afe:	f7ff ff43 	bl	8003988 <ADC_Select_Channel_11>
	  adcValuesArray[0] = (uint16_t)ADC1->DR;
 8003b02:	4b63      	ldr	r3, [pc, #396]	; (8003c90 <_Z4loopv+0x1d0>)
 8003b04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b06:	b29a      	uxth	r2, r3
 8003b08:	4b62      	ldr	r3, [pc, #392]	; (8003c94 <_Z4loopv+0x1d4>)
 8003b0a:	801a      	strh	r2, [r3, #0]
	  ADC_Select_Channel_12();
 8003b0c:	f7ff ff64 	bl	80039d8 <ADC_Select_Channel_12>
	  adcValuesArray[1] = (uint16_t)ADC1->DR;
 8003b10:	4b5f      	ldr	r3, [pc, #380]	; (8003c90 <_Z4loopv+0x1d0>)
 8003b12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b14:	b29a      	uxth	r2, r3
 8003b16:	4b5f      	ldr	r3, [pc, #380]	; (8003c94 <_Z4loopv+0x1d4>)
 8003b18:	805a      	strh	r2, [r3, #2]
    angle = motorAngle(adcValuesArray[1] - 1250, adcValuesArray[0] - 1250);
 8003b1a:	4b5e      	ldr	r3, [pc, #376]	; (8003c94 <_Z4loopv+0x1d4>)
 8003b1c:	885b      	ldrh	r3, [r3, #2]
 8003b1e:	f2a3 43e2 	subw	r3, r3, #1250	; 0x4e2
 8003b22:	4a5c      	ldr	r2, [pc, #368]	; (8003c94 <_Z4loopv+0x1d4>)
 8003b24:	8812      	ldrh	r2, [r2, #0]
 8003b26:	f2a2 42e2 	subw	r2, r2, #1250	; 0x4e2
 8003b2a:	4611      	mov	r1, r2
 8003b2c:	4618      	mov	r0, r3
 8003b2e:	f000 facb 	bl	80040c8 <_Z10motorAnglell>
 8003b32:	4603      	mov	r3, r0
 8003b34:	461a      	mov	r2, r3
 8003b36:	4b58      	ldr	r3, [pc, #352]	; (8003c98 <_Z4loopv+0x1d8>)
 8003b38:	801a      	strh	r2, [r3, #0]
    TIM4->CCR1 = (uint16_t)(fastPPM_MinTime + 500 + ((float)SBUS_Channels[2] / 2) + ((float)sin((angle + 45) * (M_PI / 180)) * ((float)SBUS_Channels[0] / 10)) + ((float)cos((angle + 45) * (M_PI / 180)) * ((float)SBUS_Channels[1] / 10)));
 8003b3a:	4b58      	ldr	r3, [pc, #352]	; (8003c9c <_Z4loopv+0x1dc>)
 8003b3c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8003b40:	4618      	mov	r0, r3
 8003b42:	f7fd f907 	bl	8000d54 <__aeabi_i2f>
 8003b46:	4603      	mov	r3, r0
 8003b48:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8003b4c:	4618      	mov	r0, r3
 8003b4e:	f7fd fa09 	bl	8000f64 <__aeabi_fdiv>
 8003b52:	4603      	mov	r3, r0
 8003b54:	4952      	ldr	r1, [pc, #328]	; (8003ca0 <_Z4loopv+0x1e0>)
 8003b56:	4618      	mov	r0, r3
 8003b58:	f7fd f848 	bl	8000bec <__addsf3>
 8003b5c:	4603      	mov	r3, r0
 8003b5e:	461d      	mov	r5, r3
 8003b60:	4b4d      	ldr	r3, [pc, #308]	; (8003c98 <_Z4loopv+0x1d8>)
 8003b62:	881b      	ldrh	r3, [r3, #0]
 8003b64:	332d      	adds	r3, #45	; 0x2d
 8003b66:	4618      	mov	r0, r3
 8003b68:	f7fc fc88 	bl	800047c <__aeabi_i2d>
 8003b6c:	a344      	add	r3, pc, #272	; (adr r3, 8003c80 <_Z4loopv+0x1c0>)
 8003b6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b72:	f7fc fced 	bl	8000550 <__aeabi_dmul>
 8003b76:	4602      	mov	r2, r0
 8003b78:	460b      	mov	r3, r1
 8003b7a:	4610      	mov	r0, r2
 8003b7c:	4619      	mov	r1, r3
 8003b7e:	f009 f947 	bl	800ce10 <sin>
 8003b82:	4602      	mov	r2, r0
 8003b84:	460b      	mov	r3, r1
 8003b86:	4610      	mov	r0, r2
 8003b88:	4619      	mov	r1, r3
 8003b8a:	f7fc ffd9 	bl	8000b40 <__aeabi_d2f>
 8003b8e:	4604      	mov	r4, r0
 8003b90:	4b42      	ldr	r3, [pc, #264]	; (8003c9c <_Z4loopv+0x1dc>)
 8003b92:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003b96:	4618      	mov	r0, r3
 8003b98:	f7fd f8dc 	bl	8000d54 <__aeabi_i2f>
 8003b9c:	4603      	mov	r3, r0
 8003b9e:	4941      	ldr	r1, [pc, #260]	; (8003ca4 <_Z4loopv+0x1e4>)
 8003ba0:	4618      	mov	r0, r3
 8003ba2:	f7fd f9df 	bl	8000f64 <__aeabi_fdiv>
 8003ba6:	4603      	mov	r3, r0
 8003ba8:	4619      	mov	r1, r3
 8003baa:	4620      	mov	r0, r4
 8003bac:	f7fd f926 	bl	8000dfc <__aeabi_fmul>
 8003bb0:	4603      	mov	r3, r0
 8003bb2:	4619      	mov	r1, r3
 8003bb4:	4628      	mov	r0, r5
 8003bb6:	f7fd f819 	bl	8000bec <__addsf3>
 8003bba:	4603      	mov	r3, r0
 8003bbc:	461d      	mov	r5, r3
 8003bbe:	4b36      	ldr	r3, [pc, #216]	; (8003c98 <_Z4loopv+0x1d8>)
 8003bc0:	881b      	ldrh	r3, [r3, #0]
 8003bc2:	332d      	adds	r3, #45	; 0x2d
 8003bc4:	4618      	mov	r0, r3
 8003bc6:	f7fc fc59 	bl	800047c <__aeabi_i2d>
 8003bca:	a32d      	add	r3, pc, #180	; (adr r3, 8003c80 <_Z4loopv+0x1c0>)
 8003bcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bd0:	f7fc fcbe 	bl	8000550 <__aeabi_dmul>
 8003bd4:	4602      	mov	r2, r0
 8003bd6:	460b      	mov	r3, r1
 8003bd8:	4610      	mov	r0, r2
 8003bda:	4619      	mov	r1, r3
 8003bdc:	f009 f8d6 	bl	800cd8c <cos>
 8003be0:	4602      	mov	r2, r0
 8003be2:	460b      	mov	r3, r1
 8003be4:	4610      	mov	r0, r2
 8003be6:	4619      	mov	r1, r3
 8003be8:	f7fc ffaa 	bl	8000b40 <__aeabi_d2f>
 8003bec:	4604      	mov	r4, r0
 8003bee:	4b2b      	ldr	r3, [pc, #172]	; (8003c9c <_Z4loopv+0x1dc>)
 8003bf0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8003bf4:	4618      	mov	r0, r3
 8003bf6:	f7fd f8ad 	bl	8000d54 <__aeabi_i2f>
 8003bfa:	4603      	mov	r3, r0
 8003bfc:	4929      	ldr	r1, [pc, #164]	; (8003ca4 <_Z4loopv+0x1e4>)
 8003bfe:	4618      	mov	r0, r3
 8003c00:	f7fd f9b0 	bl	8000f64 <__aeabi_fdiv>
 8003c04:	4603      	mov	r3, r0
 8003c06:	4619      	mov	r1, r3
 8003c08:	4620      	mov	r0, r4
 8003c0a:	f7fd f8f7 	bl	8000dfc <__aeabi_fmul>
 8003c0e:	4603      	mov	r3, r0
 8003c10:	4619      	mov	r1, r3
 8003c12:	4628      	mov	r0, r5
 8003c14:	f7fc ffea 	bl	8000bec <__addsf3>
 8003c18:	4603      	mov	r3, r0
 8003c1a:	4618      	mov	r0, r3
 8003c1c:	f7fd faf0 	bl	8001200 <__aeabi_f2uiz>
 8003c20:	4603      	mov	r3, r0
 8003c22:	b29a      	uxth	r2, r3
 8003c24:	4b18      	ldr	r3, [pc, #96]	; (8003c88 <_Z4loopv+0x1c8>)
 8003c26:	635a      	str	r2, [r3, #52]	; 0x34
    
    
    
    

    switch (Step)
 8003c28:	4b18      	ldr	r3, [pc, #96]	; (8003c8c <_Z4loopv+0x1cc>)
 8003c2a:	781b      	ldrb	r3, [r3, #0]
 8003c2c:	2b09      	cmp	r3, #9
 8003c2e:	f200 8213 	bhi.w	8004058 <_Z4loopv+0x598>
 8003c32:	a201      	add	r2, pc, #4	; (adr r2, 8003c38 <_Z4loopv+0x178>)
 8003c34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c38:	08003c61 	.word	0x08003c61
 8003c3c:	08003c6d 	.word	0x08003c6d
 8003c40:	08003cad 	.word	0x08003cad
 8003c44:	0800401f 	.word	0x0800401f
 8003c48:	08004041 	.word	0x08004041
 8003c4c:	08004059 	.word	0x08004059
 8003c50:	08004059 	.word	0x08004059
 8003c54:	08004059 	.word	0x08004059
 8003c58:	08004059 	.word	0x08004059
 8003c5c:	08004051 	.word	0x08004051
    {
    case 0:   //get quaternions
      MPU6050_resetFIFO();
 8003c60:	f7fd ff3a 	bl	8001ad8 <_Z17MPU6050_resetFIFOv>
      HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8003c64:	2006      	movs	r0, #6
 8003c66:	f001 faf2 	bl	800524e <HAL_NVIC_EnableIRQ>
      break;
 8003c6a:	e1fa      	b.n	8004062 <_Z4loopv+0x5a2>
    case 1:
      if (SBUSNewPackage == true) SBUS_PostProcessing();
 8003c6c:	4b0e      	ldr	r3, [pc, #56]	; (8003ca8 <_Z4loopv+0x1e8>)
 8003c6e:	781b      	ldrb	r3, [r3, #0]
 8003c70:	2b01      	cmp	r3, #1
 8003c72:	f040 81f3 	bne.w	800405c <_Z4loopv+0x59c>
 8003c76:	f7ff f9d3 	bl	8003020 <_Z19SBUS_PostProcessingv>
      break;
 8003c7a:	e1ef      	b.n	800405c <_Z4loopv+0x59c>
 8003c7c:	f3af 8000 	nop.w
 8003c80:	a2529d39 	.word	0xa2529d39
 8003c84:	3f91df46 	.word	0x3f91df46
 8003c88:	40000800 	.word	0x40000800
 8003c8c:	20000892 	.word	0x20000892
 8003c90:	40012000 	.word	0x40012000
 8003c94:	2000088c 	.word	0x2000088c
 8003c98:	20000890 	.word	0x20000890
 8003c9c:	200005a8 	.word	0x200005a8
 8003ca0:	44bb8000 	.word	0x44bb8000
 8003ca4:	41200000 	.word	0x41200000
 8003ca8:	200005b9 	.word	0x200005b9
    case 2:
      for (size_t i = 0; i < 1; i++)
 8003cac:	2300      	movs	r3, #0
 8003cae:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 8003cb2:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	f040 81d2 	bne.w	8004060 <_Z4loopv+0x5a0>
	      for (size_t i = 0; i < x; i++)
	      {
	      	msgTransmit[i] = msg[i];
	      }
	      CDC_Transmit_FS((unsigned char*)msgTransmit, sizeof(msgTransmit));
      }
 8003cbc:	466b      	mov	r3, sp
 8003cbe:	603b      	str	r3, [r7, #0]
        , (MPUoutputQuaternion[0] * 1000)                                                                                    \
 8003cc0:	4ba5      	ldr	r3, [pc, #660]	; (8003f58 <_Z4loopv+0x498>)
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	49a5      	ldr	r1, [pc, #660]	; (8003f5c <_Z4loopv+0x49c>)
 8003cc6:	4618      	mov	r0, r3
 8003cc8:	f7fd f898 	bl	8000dfc <__aeabi_fmul>
 8003ccc:	4603      	mov	r3, r0
	      sprintf((char*)msg," %f %f %f %f %f %f %f %f %hd %hd %hd %hd %hd %hu \r\n"                                    \
 8003cce:	4618      	mov	r0, r3
 8003cd0:	f7fc fbe6 	bl	80004a0 <__aeabi_f2d>
 8003cd4:	e9c7 010c 	strd	r0, r1, [r7, #48]	; 0x30
        , (MPUoutputQuaternion[1] * 1000)                                                                                    \
 8003cd8:	4b9f      	ldr	r3, [pc, #636]	; (8003f58 <_Z4loopv+0x498>)
 8003cda:	685b      	ldr	r3, [r3, #4]
 8003cdc:	499f      	ldr	r1, [pc, #636]	; (8003f5c <_Z4loopv+0x49c>)
 8003cde:	4618      	mov	r0, r3
 8003ce0:	f7fd f88c 	bl	8000dfc <__aeabi_fmul>
 8003ce4:	4603      	mov	r3, r0
	      sprintf((char*)msg," %f %f %f %f %f %f %f %f %hd %hd %hd %hd %hd %hu \r\n"                                    \
 8003ce6:	4618      	mov	r0, r3
 8003ce8:	f7fc fbda 	bl	80004a0 <__aeabi_f2d>
 8003cec:	e9c7 010a 	strd	r0, r1, [r7, #40]	; 0x28
        , (MPUoutputQuaternion[2] * 1000)                                                                                    \
 8003cf0:	4b99      	ldr	r3, [pc, #612]	; (8003f58 <_Z4loopv+0x498>)
 8003cf2:	689b      	ldr	r3, [r3, #8]
 8003cf4:	4999      	ldr	r1, [pc, #612]	; (8003f5c <_Z4loopv+0x49c>)
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	f7fd f880 	bl	8000dfc <__aeabi_fmul>
 8003cfc:	4603      	mov	r3, r0
	      sprintf((char*)msg," %f %f %f %f %f %f %f %f %hd %hd %hd %hd %hd %hu \r\n"                                    \
 8003cfe:	4618      	mov	r0, r3
 8003d00:	f7fc fbce 	bl	80004a0 <__aeabi_f2d>
 8003d04:	e9c7 0108 	strd	r0, r1, [r7, #32]
        , (MPUoutputQuaternion[3] * 1000)                                                                                    \
 8003d08:	4b93      	ldr	r3, [pc, #588]	; (8003f58 <_Z4loopv+0x498>)
 8003d0a:	68db      	ldr	r3, [r3, #12]
 8003d0c:	4993      	ldr	r1, [pc, #588]	; (8003f5c <_Z4loopv+0x49c>)
 8003d0e:	4618      	mov	r0, r3
 8003d10:	f7fd f874 	bl	8000dfc <__aeabi_fmul>
 8003d14:	4603      	mov	r3, r0
	      sprintf((char*)msg," %f %f %f %f %f %f %f %f %hd %hd %hd %hd %hd %hu \r\n"                                    \
 8003d16:	4618      	mov	r0, r3
 8003d18:	f7fc fbc2 	bl	80004a0 <__aeabi_f2d>
 8003d1c:	e9c7 0106 	strd	r0, r1, [r7, #24]
        , (LoopWXQuaternion[0] * 1000)                                                                                         \
 8003d20:	4b8f      	ldr	r3, [pc, #572]	; (8003f60 <_Z4loopv+0x4a0>)
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	498d      	ldr	r1, [pc, #564]	; (8003f5c <_Z4loopv+0x49c>)
 8003d26:	4618      	mov	r0, r3
 8003d28:	f7fd f868 	bl	8000dfc <__aeabi_fmul>
 8003d2c:	4603      	mov	r3, r0
	      sprintf((char*)msg," %f %f %f %f %f %f %f %f %hd %hd %hd %hd %hd %hu \r\n"                                    \
 8003d2e:	4618      	mov	r0, r3
 8003d30:	f7fc fbb6 	bl	80004a0 <__aeabi_f2d>
 8003d34:	e9c7 0104 	strd	r0, r1, [r7, #16]
        , (LoopWXQuaternion[1] * 1000)                                                                                         \
 8003d38:	4b89      	ldr	r3, [pc, #548]	; (8003f60 <_Z4loopv+0x4a0>)
 8003d3a:	685b      	ldr	r3, [r3, #4]
 8003d3c:	4987      	ldr	r1, [pc, #540]	; (8003f5c <_Z4loopv+0x49c>)
 8003d3e:	4618      	mov	r0, r3
 8003d40:	f7fd f85c 	bl	8000dfc <__aeabi_fmul>
 8003d44:	4603      	mov	r3, r0
	      sprintf((char*)msg," %f %f %f %f %f %f %f %f %hd %hd %hd %hd %hd %hu \r\n"                                    \
 8003d46:	4618      	mov	r0, r3
 8003d48:	f7fc fbaa 	bl	80004a0 <__aeabi_f2d>
 8003d4c:	e9c7 0102 	strd	r0, r1, [r7, #8]
        , (LoopWXQuaternion[2] * 1000)                                                                                         \
 8003d50:	4b83      	ldr	r3, [pc, #524]	; (8003f60 <_Z4loopv+0x4a0>)
 8003d52:	689b      	ldr	r3, [r3, #8]
 8003d54:	4981      	ldr	r1, [pc, #516]	; (8003f5c <_Z4loopv+0x49c>)
 8003d56:	4618      	mov	r0, r3
 8003d58:	f7fd f850 	bl	8000dfc <__aeabi_fmul>
 8003d5c:	4603      	mov	r3, r0
	      sprintf((char*)msg," %f %f %f %f %f %f %f %f %hd %hd %hd %hd %hd %hu \r\n"                                    \
 8003d5e:	4618      	mov	r0, r3
 8003d60:	f7fc fb9e 	bl	80004a0 <__aeabi_f2d>
 8003d64:	4682      	mov	sl, r0
 8003d66:	468b      	mov	fp, r1
        , (LoopWXQuaternion[3] * 1000)                                                                                         \
 8003d68:	4b7d      	ldr	r3, [pc, #500]	; (8003f60 <_Z4loopv+0x4a0>)
 8003d6a:	68db      	ldr	r3, [r3, #12]
 8003d6c:	497b      	ldr	r1, [pc, #492]	; (8003f5c <_Z4loopv+0x49c>)
 8003d6e:	4618      	mov	r0, r3
 8003d70:	f7fd f844 	bl	8000dfc <__aeabi_fmul>
 8003d74:	4603      	mov	r3, r0
	      sprintf((char*)msg," %f %f %f %f %f %f %f %f %hd %hd %hd %hd %hd %hu \r\n"                                    \
 8003d76:	4618      	mov	r0, r3
 8003d78:	f7fc fb92 	bl	80004a0 <__aeabi_f2d>
 8003d7c:	4680      	mov	r8, r0
 8003d7e:	4689      	mov	r9, r1
        , 2 * (int16_t)(((float)atan((float)MPUoutputQuaternion[3] / (float)MPUoutputQuaternion[2]) * 180) / M_PI)    \
 8003d80:	4b75      	ldr	r3, [pc, #468]	; (8003f58 <_Z4loopv+0x498>)
 8003d82:	68da      	ldr	r2, [r3, #12]
 8003d84:	4b74      	ldr	r3, [pc, #464]	; (8003f58 <_Z4loopv+0x498>)
 8003d86:	689b      	ldr	r3, [r3, #8]
 8003d88:	4619      	mov	r1, r3
 8003d8a:	4610      	mov	r0, r2
 8003d8c:	f7fd f8ea 	bl	8000f64 <__aeabi_fdiv>
 8003d90:	4603      	mov	r3, r0
 8003d92:	4618      	mov	r0, r3
 8003d94:	f7ff fe88 	bl	8003aa8 <_ZSt4atanf>
 8003d98:	4603      	mov	r3, r0
 8003d9a:	4972      	ldr	r1, [pc, #456]	; (8003f64 <_Z4loopv+0x4a4>)
 8003d9c:	4618      	mov	r0, r3
 8003d9e:	f7fd f82d 	bl	8000dfc <__aeabi_fmul>
 8003da2:	4603      	mov	r3, r0
 8003da4:	4618      	mov	r0, r3
 8003da6:	f7fc fb7b 	bl	80004a0 <__aeabi_f2d>
 8003daa:	a369      	add	r3, pc, #420	; (adr r3, 8003f50 <_Z4loopv+0x490>)
 8003dac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003db0:	f7fc fcf8 	bl	80007a4 <__aeabi_ddiv>
 8003db4:	4602      	mov	r2, r0
 8003db6:	460b      	mov	r3, r1
 8003db8:	4610      	mov	r0, r2
 8003dba:	4619      	mov	r1, r3
 8003dbc:	f7fc fe78 	bl	8000ab0 <__aeabi_d2iz>
 8003dc0:	4603      	mov	r3, r0
 8003dc2:	b21b      	sxth	r3, r3
	      sprintf((char*)msg," %f %f %f %f %f %f %f %f %hd %hd %hd %hd %hd %hu \r\n"                                    \
 8003dc4:	005b      	lsls	r3, r3, #1
 8003dc6:	607b      	str	r3, [r7, #4]
        , 2 * (int16_t)(((float)atan((float)MPUoutputQuaternion[3] / (float)MPUoutputQuaternion[1]) * 180) / M_PI)    \
 8003dc8:	4b63      	ldr	r3, [pc, #396]	; (8003f58 <_Z4loopv+0x498>)
 8003dca:	68da      	ldr	r2, [r3, #12]
 8003dcc:	4b62      	ldr	r3, [pc, #392]	; (8003f58 <_Z4loopv+0x498>)
 8003dce:	685b      	ldr	r3, [r3, #4]
 8003dd0:	4619      	mov	r1, r3
 8003dd2:	4610      	mov	r0, r2
 8003dd4:	f7fd f8c6 	bl	8000f64 <__aeabi_fdiv>
 8003dd8:	4603      	mov	r3, r0
 8003dda:	4618      	mov	r0, r3
 8003ddc:	f7ff fe64 	bl	8003aa8 <_ZSt4atanf>
 8003de0:	4603      	mov	r3, r0
 8003de2:	4960      	ldr	r1, [pc, #384]	; (8003f64 <_Z4loopv+0x4a4>)
 8003de4:	4618      	mov	r0, r3
 8003de6:	f7fd f809 	bl	8000dfc <__aeabi_fmul>
 8003dea:	4603      	mov	r3, r0
 8003dec:	4618      	mov	r0, r3
 8003dee:	f7fc fb57 	bl	80004a0 <__aeabi_f2d>
 8003df2:	a357      	add	r3, pc, #348	; (adr r3, 8003f50 <_Z4loopv+0x490>)
 8003df4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003df8:	f7fc fcd4 	bl	80007a4 <__aeabi_ddiv>
 8003dfc:	4602      	mov	r2, r0
 8003dfe:	460b      	mov	r3, r1
 8003e00:	4610      	mov	r0, r2
 8003e02:	4619      	mov	r1, r3
 8003e04:	f7fc fe54 	bl	8000ab0 <__aeabi_d2iz>
 8003e08:	4603      	mov	r3, r0
 8003e0a:	b21b      	sxth	r3, r3
	      sprintf((char*)msg," %f %f %f %f %f %f %f %f %hd %hd %hd %hd %hd %hu \r\n"                                    \
 8003e0c:	005e      	lsls	r6, r3, #1
        , 2 * (int16_t)(((float)atan((float)MPUoutputQuaternion[1] / (float)MPUoutputQuaternion[2]) * 180) / M_PI)    \
 8003e0e:	4b52      	ldr	r3, [pc, #328]	; (8003f58 <_Z4loopv+0x498>)
 8003e10:	685a      	ldr	r2, [r3, #4]
 8003e12:	4b51      	ldr	r3, [pc, #324]	; (8003f58 <_Z4loopv+0x498>)
 8003e14:	689b      	ldr	r3, [r3, #8]
 8003e16:	4619      	mov	r1, r3
 8003e18:	4610      	mov	r0, r2
 8003e1a:	f7fd f8a3 	bl	8000f64 <__aeabi_fdiv>
 8003e1e:	4603      	mov	r3, r0
 8003e20:	4618      	mov	r0, r3
 8003e22:	f7ff fe41 	bl	8003aa8 <_ZSt4atanf>
 8003e26:	4603      	mov	r3, r0
 8003e28:	494e      	ldr	r1, [pc, #312]	; (8003f64 <_Z4loopv+0x4a4>)
 8003e2a:	4618      	mov	r0, r3
 8003e2c:	f7fc ffe6 	bl	8000dfc <__aeabi_fmul>
 8003e30:	4603      	mov	r3, r0
 8003e32:	4618      	mov	r0, r3
 8003e34:	f7fc fb34 	bl	80004a0 <__aeabi_f2d>
 8003e38:	a345      	add	r3, pc, #276	; (adr r3, 8003f50 <_Z4loopv+0x490>)
 8003e3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e3e:	f7fc fcb1 	bl	80007a4 <__aeabi_ddiv>
 8003e42:	4602      	mov	r2, r0
 8003e44:	460b      	mov	r3, r1
 8003e46:	4610      	mov	r0, r2
 8003e48:	4619      	mov	r1, r3
 8003e4a:	f7fc fe31 	bl	8000ab0 <__aeabi_d2iz>
 8003e4e:	4603      	mov	r3, r0
 8003e50:	b21b      	sxth	r3, r3
	      sprintf((char*)msg," %f %f %f %f %f %f %f %f %hd %hd %hd %hd %hd %hu \r\n"                                    \
 8003e52:	005d      	lsls	r5, r3, #1
        , 2 * (int16_t)(((float)atan((float)MPUoutputQuaternion[0] / (float)MPUoutputQuaternion[1]) * 180) / M_PI)    \
 8003e54:	4b40      	ldr	r3, [pc, #256]	; (8003f58 <_Z4loopv+0x498>)
 8003e56:	681a      	ldr	r2, [r3, #0]
 8003e58:	4b3f      	ldr	r3, [pc, #252]	; (8003f58 <_Z4loopv+0x498>)
 8003e5a:	685b      	ldr	r3, [r3, #4]
 8003e5c:	4619      	mov	r1, r3
 8003e5e:	4610      	mov	r0, r2
 8003e60:	f7fd f880 	bl	8000f64 <__aeabi_fdiv>
 8003e64:	4603      	mov	r3, r0
 8003e66:	4618      	mov	r0, r3
 8003e68:	f7ff fe1e 	bl	8003aa8 <_ZSt4atanf>
 8003e6c:	4603      	mov	r3, r0
 8003e6e:	493d      	ldr	r1, [pc, #244]	; (8003f64 <_Z4loopv+0x4a4>)
 8003e70:	4618      	mov	r0, r3
 8003e72:	f7fc ffc3 	bl	8000dfc <__aeabi_fmul>
 8003e76:	4603      	mov	r3, r0
 8003e78:	4618      	mov	r0, r3
 8003e7a:	f7fc fb11 	bl	80004a0 <__aeabi_f2d>
 8003e7e:	a334      	add	r3, pc, #208	; (adr r3, 8003f50 <_Z4loopv+0x490>)
 8003e80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e84:	f7fc fc8e 	bl	80007a4 <__aeabi_ddiv>
 8003e88:	4602      	mov	r2, r0
 8003e8a:	460b      	mov	r3, r1
 8003e8c:	4610      	mov	r0, r2
 8003e8e:	4619      	mov	r1, r3
 8003e90:	f7fc fe0e 	bl	8000ab0 <__aeabi_d2iz>
 8003e94:	4603      	mov	r3, r0
 8003e96:	b21b      	sxth	r3, r3
	      sprintf((char*)msg," %f %f %f %f %f %f %f %f %hd %hd %hd %hd %hd %hu \r\n"                                    \
 8003e98:	005c      	lsls	r4, r3, #1
        , 2 * (int16_t)(((float)acos((float)MPUoutputQuaternion[0] / (float)1073741824) * 180) / M_PI)                \
 8003e9a:	4b2f      	ldr	r3, [pc, #188]	; (8003f58 <_Z4loopv+0x498>)
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f04f 419d 	mov.w	r1, #1317011456	; 0x4e800000
 8003ea2:	4618      	mov	r0, r3
 8003ea4:	f7fd f85e 	bl	8000f64 <__aeabi_fdiv>
 8003ea8:	4603      	mov	r3, r0
 8003eaa:	4618      	mov	r0, r3
 8003eac:	f7ff fdf0 	bl	8003a90 <_ZSt4acosf>
 8003eb0:	4603      	mov	r3, r0
 8003eb2:	492c      	ldr	r1, [pc, #176]	; (8003f64 <_Z4loopv+0x4a4>)
 8003eb4:	4618      	mov	r0, r3
 8003eb6:	f7fc ffa1 	bl	8000dfc <__aeabi_fmul>
 8003eba:	4603      	mov	r3, r0
 8003ebc:	4618      	mov	r0, r3
 8003ebe:	f7fc faef 	bl	80004a0 <__aeabi_f2d>
 8003ec2:	a323      	add	r3, pc, #140	; (adr r3, 8003f50 <_Z4loopv+0x490>)
 8003ec4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ec8:	f7fc fc6c 	bl	80007a4 <__aeabi_ddiv>
 8003ecc:	4602      	mov	r2, r0
 8003ece:	460b      	mov	r3, r1
 8003ed0:	4610      	mov	r0, r2
 8003ed2:	4619      	mov	r1, r3
 8003ed4:	f7fc fdec 	bl	8000ab0 <__aeabi_d2iz>
 8003ed8:	4603      	mov	r3, r0
 8003eda:	b21b      	sxth	r3, r3
	      sprintf((char*)msg," %f %f %f %f %f %f %f %f %hd %hd %hd %hd %hd %hu \r\n"                                    \
 8003edc:	005a      	lsls	r2, r3, #1
 8003ede:	4b22      	ldr	r3, [pc, #136]	; (8003f68 <_Z4loopv+0x4a8>)
 8003ee0:	881b      	ldrh	r3, [r3, #0]
 8003ee2:	f107 0038 	add.w	r0, r7, #56	; 0x38
 8003ee6:	9313      	str	r3, [sp, #76]	; 0x4c
 8003ee8:	9212      	str	r2, [sp, #72]	; 0x48
 8003eea:	9411      	str	r4, [sp, #68]	; 0x44
 8003eec:	9510      	str	r5, [sp, #64]	; 0x40
 8003eee:	960f      	str	r6, [sp, #60]	; 0x3c
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	930e      	str	r3, [sp, #56]	; 0x38
 8003ef4:	e9cd 890c 	strd	r8, r9, [sp, #48]	; 0x30
 8003ef8:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 8003efc:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8003f00:	e9cd 3408 	strd	r3, r4, [sp, #32]
 8003f04:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8003f08:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8003f0c:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8003f10:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8003f14:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8003f18:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8003f1c:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 8003f20:	e9cd 3400 	strd	r3, r4, [sp]
 8003f24:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8003f28:	4910      	ldr	r1, [pc, #64]	; (8003f6c <_Z4loopv+0x4ac>)
 8003f2a:	f00a ffcd 	bl	800eec8 <siprintf>
	      uint8_t x = 0;
 8003f2e:	2300      	movs	r3, #0
 8003f30:	f887 3173 	strb.w	r3, [r7, #371]	; 0x173
	      while (msg[x] != NULL)
 8003f34:	f897 3173 	ldrb.w	r3, [r7, #371]	; 0x173
 8003f38:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8003f3c:	5cd3      	ldrb	r3, [r2, r3]
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d016      	beq.n	8003f70 <_Z4loopv+0x4b0>
	      	x++;
 8003f42:	f897 3173 	ldrb.w	r3, [r7, #371]	; 0x173
 8003f46:	3301      	adds	r3, #1
 8003f48:	f887 3173 	strb.w	r3, [r7, #371]	; 0x173
	      while (msg[x] != NULL)
 8003f4c:	e7f2      	b.n	8003f34 <_Z4loopv+0x474>
 8003f4e:	bf00      	nop
 8003f50:	54442d18 	.word	0x54442d18
 8003f54:	400921fb 	.word	0x400921fb
 8003f58:	200004a8 	.word	0x200004a8
 8003f5c:	447a0000 	.word	0x447a0000
 8003f60:	200004c8 	.word	0x200004c8
 8003f64:	43340000 	.word	0x43340000
 8003f68:	20000896 	.word	0x20000896
 8003f6c:	080111d8 	.word	0x080111d8
	      unsigned char msgTransmit[x];
 8003f70:	f897 3173 	ldrb.w	r3, [r7, #371]	; 0x173
 8003f74:	1e5c      	subs	r4, r3, #1
 8003f76:	f8c7 4168 	str.w	r4, [r7, #360]	; 0x168
 8003f7a:	4623      	mov	r3, r4
 8003f7c:	3301      	adds	r3, #1
 8003f7e:	4618      	mov	r0, r3
 8003f80:	f04f 0100 	mov.w	r1, #0
 8003f84:	f04f 0200 	mov.w	r2, #0
 8003f88:	f04f 0300 	mov.w	r3, #0
 8003f8c:	00cb      	lsls	r3, r1, #3
 8003f8e:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8003f92:	00c2      	lsls	r2, r0, #3
 8003f94:	4623      	mov	r3, r4
 8003f96:	3301      	adds	r3, #1
 8003f98:	4618      	mov	r0, r3
 8003f9a:	f04f 0100 	mov.w	r1, #0
 8003f9e:	f04f 0200 	mov.w	r2, #0
 8003fa2:	f04f 0300 	mov.w	r3, #0
 8003fa6:	00cb      	lsls	r3, r1, #3
 8003fa8:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8003fac:	00c2      	lsls	r2, r0, #3
 8003fae:	4623      	mov	r3, r4
 8003fb0:	3301      	adds	r3, #1
 8003fb2:	3307      	adds	r3, #7
 8003fb4:	08db      	lsrs	r3, r3, #3
 8003fb6:	00db      	lsls	r3, r3, #3
 8003fb8:	ebad 0d03 	sub.w	sp, sp, r3
 8003fbc:	ab14      	add	r3, sp, #80	; 0x50
 8003fbe:	3300      	adds	r3, #0
 8003fc0:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
	      for (size_t i = 0; i < x; i++)
 8003fc4:	2300      	movs	r3, #0
 8003fc6:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
 8003fca:	f897 3173 	ldrb.w	r3, [r7, #371]	; 0x173
 8003fce:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8003fd2:	429a      	cmp	r2, r3
 8003fd4:	d212      	bcs.n	8003ffc <_Z4loopv+0x53c>
	      	msgTransmit[i] = msg[i];
 8003fd6:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8003fda:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8003fde:	4413      	add	r3, r2
 8003fe0:	7819      	ldrb	r1, [r3, #0]
 8003fe2:	f8d7 2164 	ldr.w	r2, [r7, #356]	; 0x164
 8003fe6:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8003fea:	4413      	add	r3, r2
 8003fec:	460a      	mov	r2, r1
 8003fee:	701a      	strb	r2, [r3, #0]
	      for (size_t i = 0; i < x; i++)
 8003ff0:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8003ff4:	3301      	adds	r3, #1
 8003ff6:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
 8003ffa:	e7e6      	b.n	8003fca <_Z4loopv+0x50a>
	      CDC_Transmit_FS((unsigned char*)msgTransmit, sizeof(msgTransmit));
 8003ffc:	f8d7 2164 	ldr.w	r2, [r7, #356]	; 0x164
 8004000:	b2a3      	uxth	r3, r4
 8004002:	3301      	adds	r3, #1
 8004004:	b29b      	uxth	r3, r3
 8004006:	4619      	mov	r1, r3
 8004008:	4610      	mov	r0, r2
 800400a:	f008 fa8d 	bl	800c528 <CDC_Transmit_FS>
 800400e:	f8d7 d000 	ldr.w	sp, [r7]
      for (size_t i = 0; i < 1; i++)
 8004012:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8004016:	3301      	adds	r3, #1
 8004018:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 800401c:	e649      	b.n	8003cb2 <_Z4loopv+0x1f2>
      //  }
      //  CDC_Transmit_FS((unsigned char*)msgTransmit, sizeof(msgTransmit));
      //}
      break;
    case 3:
      Debug_CNT = TIM4->CNT;
 800401e:	4b25      	ldr	r3, [pc, #148]	; (80040b4 <_Z4loopv+0x5f4>)
 8004020:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004022:	b29a      	uxth	r2, r3
 8004024:	4b24      	ldr	r3, [pc, #144]	; (80040b8 <_Z4loopv+0x5f8>)
 8004026:	801a      	strh	r2, [r3, #0]
      getWXQuaternion();
 8004028:	f7fe fe02 	bl	8002c30 <_Z15getWXQuaternionv>
      Debug_diff = TIM4->CNT - Debug_CNT;
 800402c:	4b21      	ldr	r3, [pc, #132]	; (80040b4 <_Z4loopv+0x5f4>)
 800402e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004030:	b29a      	uxth	r2, r3
 8004032:	4b21      	ldr	r3, [pc, #132]	; (80040b8 <_Z4loopv+0x5f8>)
 8004034:	881b      	ldrh	r3, [r3, #0]
 8004036:	1ad3      	subs	r3, r2, r3
 8004038:	b29a      	uxth	r2, r3
 800403a:	4b20      	ldr	r3, [pc, #128]	; (80040bc <_Z4loopv+0x5fc>)
 800403c:	801a      	strh	r2, [r3, #0]
      break;
 800403e:	e010      	b.n	8004062 <_Z4loopv+0x5a2>
    case 4:
      MPU6050_readQuaternionBytes();
 8004040:	f7fd fd54 	bl	8001aec <_Z27MPU6050_readQuaternionBytesv>
      MPU6050_ConvertToQuaternions();
 8004044:	f7fd fd8a 	bl	8001b5c <_Z28MPU6050_ConvertToQuaternionsv>
      HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8004048:	2006      	movs	r0, #6
 800404a:	f001 f900 	bl	800524e <HAL_NVIC_EnableIRQ>
      break;
 800404e:	e008      	b.n	8004062 <_Z4loopv+0x5a2>
    case 9:
      Step = 255;
 8004050:	4b1b      	ldr	r3, [pc, #108]	; (80040c0 <_Z4loopv+0x600>)
 8004052:	22ff      	movs	r2, #255	; 0xff
 8004054:	701a      	strb	r2, [r3, #0]
      break;
 8004056:	e004      	b.n	8004062 <_Z4loopv+0x5a2>
    default:
      break;
 8004058:	bf00      	nop
 800405a:	e002      	b.n	8004062 <_Z4loopv+0x5a2>
      break;
 800405c:	bf00      	nop
 800405e:	e000      	b.n	8004062 <_Z4loopv+0x5a2>
      break;
 8004060:	bf00      	nop
    }
    Step ++;
 8004062:	4b17      	ldr	r3, [pc, #92]	; (80040c0 <_Z4loopv+0x600>)
 8004064:	781b      	ldrb	r3, [r3, #0]
 8004066:	3301      	adds	r3, #1
 8004068:	b2da      	uxtb	r2, r3
 800406a:	4b15      	ldr	r3, [pc, #84]	; (80040c0 <_Z4loopv+0x600>)
 800406c:	701a      	strb	r2, [r3, #0]
    while (TIM4->CNT <= 1000)
 800406e:	4b11      	ldr	r3, [pc, #68]	; (80040b4 <_Z4loopv+0x5f4>)
 8004070:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004072:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004076:	bf94      	ite	ls
 8004078:	2301      	movls	r3, #1
 800407a:	2300      	movhi	r3, #0
 800407c:	b2db      	uxtb	r3, r3
 800407e:	2b00      	cmp	r3, #0
 8004080:	d000      	beq.n	8004084 <_Z4loopv+0x5c4>
 8004082:	e7f4      	b.n	800406e <_Z4loopv+0x5ae>
    {
    }
  }
  
  if ((HAL_GetTick() - timestamp) >= 50)
 8004084:	f000 fc84 	bl	8004990 <HAL_GetTick>
 8004088:	4602      	mov	r2, r0
 800408a:	4b0e      	ldr	r3, [pc, #56]	; (80040c4 <_Z4loopv+0x604>)
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	1ad3      	subs	r3, r2, r3
 8004090:	2b31      	cmp	r3, #49	; 0x31
 8004092:	bf8c      	ite	hi
 8004094:	2301      	movhi	r3, #1
 8004096:	2300      	movls	r3, #0
 8004098:	b2db      	uxtb	r3, r3
 800409a:	2b00      	cmp	r3, #0
 800409c:	d004      	beq.n	80040a8 <_Z4loopv+0x5e8>
  {
    timestamp += 50;
 800409e:	4b09      	ldr	r3, [pc, #36]	; (80040c4 <_Z4loopv+0x604>)
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	3332      	adds	r3, #50	; 0x32
 80040a4:	4a07      	ldr	r2, [pc, #28]	; (80040c4 <_Z4loopv+0x604>)
 80040a6:	6013      	str	r3, [r2, #0]
  //// fastPPM_ONTime = (uint16_t)((((float)angle * (float)fastPPM_MinTime) / (float)360) + (float)fastPPM_MinTime);
  //fastPPM_ONTime = (uint16_t)(fastPPM_MinTime + ((float)SBUS_Channels[2] / 2));
  //fastPPM_OFFTime = fastPPM_Pulselength - fastPPM_ONTime;//OFF time in microseconds
  //TIM4->CCR1 = (uint16_t)(fastPPM_MinTime + 500 + ((float)SBUS_Channels[2] / 2) + ((float)sin((angle + 0) * (M_PI / 180)) * ((float)SBUS_Channels[0] / -10)) + ((float)cos((angle + 0) * (M_PI / 180)) * ((float)SBUS_Channels[1] / -10)));
  }
}
 80040a8:	bf00      	nop
 80040aa:	f507 77be 	add.w	r7, r7, #380	; 0x17c
 80040ae:	46bd      	mov	sp, r7
 80040b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80040b4:	40000800 	.word	0x40000800
 80040b8:	20000894 	.word	0x20000894
 80040bc:	20000896 	.word	0x20000896
 80040c0:	20000892 	.word	0x20000892
 80040c4:	20000888 	.word	0x20000888

080040c8 <_Z10motorAnglell>:


uint16_t motorAngle(int32_t hall_1, int32_t hall_2)
{
 80040c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80040ca:	b085      	sub	sp, #20
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	6078      	str	r0, [r7, #4]
 80040d0:	6039      	str	r1, [r7, #0]
  uint16_t angle = 0;
 80040d2:	2300      	movs	r3, #0
 80040d4:	81fb      	strh	r3, [r7, #14]
  uint16_t offset = 0;
 80040d6:	2300      	movs	r3, #0
 80040d8:	81bb      	strh	r3, [r7, #12]
  
  if ((hall_1 == 0) | (hall_2 == 0))
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	2b00      	cmp	r3, #0
 80040de:	bf0c      	ite	eq
 80040e0:	2301      	moveq	r3, #1
 80040e2:	2300      	movne	r3, #0
 80040e4:	b2da      	uxtb	r2, r3
 80040e6:	683b      	ldr	r3, [r7, #0]
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	bf0c      	ite	eq
 80040ec:	2301      	moveq	r3, #1
 80040ee:	2300      	movne	r3, #0
 80040f0:	b2db      	uxtb	r3, r3
 80040f2:	4313      	orrs	r3, r2
 80040f4:	b2db      	uxtb	r3, r3
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d015      	beq.n	8004126 <_Z10motorAnglell+0x5e>
    {
      if (hall_1 == 0)
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d108      	bne.n	8004112 <_Z10motorAnglell+0x4a>
      {
        if (hall_2 > 0)
 8004100:	683b      	ldr	r3, [r7, #0]
 8004102:	2b00      	cmp	r3, #0
 8004104:	dd02      	ble.n	800410c <_Z10motorAnglell+0x44>
        {
          angle = 0;
 8004106:	2300      	movs	r3, #0
 8004108:	81fb      	strh	r3, [r7, #14]
 800410a:	e04d      	b.n	80041a8 <_Z10motorAnglell+0xe0>
        }
        else
        {
          angle = 180;
 800410c:	23b4      	movs	r3, #180	; 0xb4
 800410e:	81fb      	strh	r3, [r7, #14]
 8004110:	e04a      	b.n	80041a8 <_Z10motorAnglell+0xe0>
        }
      }
      else
      {
        if (hall_1 > 0)
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	2b00      	cmp	r3, #0
 8004116:	dd02      	ble.n	800411e <_Z10motorAnglell+0x56>
        {
          angle = 90;
 8004118:	235a      	movs	r3, #90	; 0x5a
 800411a:	81fb      	strh	r3, [r7, #14]
 800411c:	e044      	b.n	80041a8 <_Z10motorAnglell+0xe0>
        }
        else
        {
          angle = 270;
 800411e:	f44f 7387 	mov.w	r3, #270	; 0x10e
 8004122:	81fb      	strh	r3, [r7, #14]
 8004124:	e040      	b.n	80041a8 <_Z10motorAnglell+0xe0>
        }
      }
    }
    else
    {
      if (hall_2 < 0)
 8004126:	683b      	ldr	r3, [r7, #0]
 8004128:	2b00      	cmp	r3, #0
 800412a:	da02      	bge.n	8004132 <_Z10motorAnglell+0x6a>
      {
        offset = 180;
 800412c:	23b4      	movs	r3, #180	; 0xb4
 800412e:	81bb      	strh	r3, [r7, #12]
 8004130:	e008      	b.n	8004144 <_Z10motorAnglell+0x7c>
      }
      else
      {
        if (hall_1 > 0)
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	2b00      	cmp	r3, #0
 8004136:	dd02      	ble.n	800413e <_Z10motorAnglell+0x76>
        {
          offset = 0;
 8004138:	2300      	movs	r3, #0
 800413a:	81bb      	strh	r3, [r7, #12]
 800413c:	e002      	b.n	8004144 <_Z10motorAnglell+0x7c>
        }
        else
        {
          offset = 360;
 800413e:	f44f 73b4 	mov.w	r3, #360	; 0x168
 8004142:	81bb      	strh	r3, [r7, #12]
        }
      }  
      angle = offset + ((atan((float)hall_1 / (float)hall_2) * 180) / M_PI);
 8004144:	89bb      	ldrh	r3, [r7, #12]
 8004146:	4618      	mov	r0, r3
 8004148:	f7fc f998 	bl	800047c <__aeabi_i2d>
 800414c:	4604      	mov	r4, r0
 800414e:	460d      	mov	r5, r1
 8004150:	6878      	ldr	r0, [r7, #4]
 8004152:	f7fc fdff 	bl	8000d54 <__aeabi_i2f>
 8004156:	4606      	mov	r6, r0
 8004158:	6838      	ldr	r0, [r7, #0]
 800415a:	f7fc fdfb 	bl	8000d54 <__aeabi_i2f>
 800415e:	4603      	mov	r3, r0
 8004160:	4619      	mov	r1, r3
 8004162:	4630      	mov	r0, r6
 8004164:	f7fc fefe 	bl	8000f64 <__aeabi_fdiv>
 8004168:	4603      	mov	r3, r0
 800416a:	4618      	mov	r0, r3
 800416c:	f7ff fc9c 	bl	8003aa8 <_ZSt4atanf>
 8004170:	4603      	mov	r3, r0
 8004172:	4913      	ldr	r1, [pc, #76]	; (80041c0 <_Z10motorAnglell+0xf8>)
 8004174:	4618      	mov	r0, r3
 8004176:	f7fc fe41 	bl	8000dfc <__aeabi_fmul>
 800417a:	4603      	mov	r3, r0
 800417c:	4618      	mov	r0, r3
 800417e:	f7fc f98f 	bl	80004a0 <__aeabi_f2d>
 8004182:	a30d      	add	r3, pc, #52	; (adr r3, 80041b8 <_Z10motorAnglell+0xf0>)
 8004184:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004188:	f7fc fb0c 	bl	80007a4 <__aeabi_ddiv>
 800418c:	4602      	mov	r2, r0
 800418e:	460b      	mov	r3, r1
 8004190:	4620      	mov	r0, r4
 8004192:	4629      	mov	r1, r5
 8004194:	f7fc f826 	bl	80001e4 <__adddf3>
 8004198:	4602      	mov	r2, r0
 800419a:	460b      	mov	r3, r1
 800419c:	4610      	mov	r0, r2
 800419e:	4619      	mov	r1, r3
 80041a0:	f7fc fcae 	bl	8000b00 <__aeabi_d2uiz>
 80041a4:	4603      	mov	r3, r0
 80041a6:	81fb      	strh	r3, [r7, #14]
    }  
    return angle;
 80041a8:	89fb      	ldrh	r3, [r7, #14]
 80041aa:	4618      	mov	r0, r3
 80041ac:	3714      	adds	r7, #20
 80041ae:	46bd      	mov	sp, r7
 80041b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80041b2:	bf00      	nop
 80041b4:	f3af 8000 	nop.w
 80041b8:	54442d18 	.word	0x54442d18
 80041bc:	400921fb 	.word	0x400921fb
 80041c0:	43340000 	.word	0x43340000

080041c4 <_Z41__static_initialization_and_destruction_0ii>:
 80041c4:	b480      	push	{r7}
 80041c6:	b083      	sub	sp, #12
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	6078      	str	r0, [r7, #4]
 80041cc:	6039      	str	r1, [r7, #0]
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	2b01      	cmp	r3, #1
 80041d2:	d109      	bne.n	80041e8 <_Z41__static_initialization_and_destruction_0ii+0x24>
 80041d4:	683b      	ldr	r3, [r7, #0]
 80041d6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80041da:	4293      	cmp	r3, r2
 80041dc:	d104      	bne.n	80041e8 <_Z41__static_initialization_and_destruction_0ii+0x24>
uint16_t Debug_CNT = TIM4->CNT;
 80041de:	4b05      	ldr	r3, [pc, #20]	; (80041f4 <_Z41__static_initialization_and_destruction_0ii+0x30>)
 80041e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041e2:	b29a      	uxth	r2, r3
 80041e4:	4b04      	ldr	r3, [pc, #16]	; (80041f8 <_Z41__static_initialization_and_destruction_0ii+0x34>)
 80041e6:	801a      	strh	r2, [r3, #0]
 80041e8:	bf00      	nop
 80041ea:	370c      	adds	r7, #12
 80041ec:	46bd      	mov	sp, r7
 80041ee:	bc80      	pop	{r7}
 80041f0:	4770      	bx	lr
 80041f2:	bf00      	nop
 80041f4:	40000800 	.word	0x40000800
 80041f8:	20000894 	.word	0x20000894

080041fc <_GLOBAL__sub_I_timestamp>:
 80041fc:	b580      	push	{r7, lr}
 80041fe:	af00      	add	r7, sp, #0
 8004200:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8004204:	2001      	movs	r0, #1
 8004206:	f7ff ffdd 	bl	80041c4 <_Z41__static_initialization_and_destruction_0ii>
 800420a:	bd80      	pop	{r7, pc}

0800420c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800420c:	b480      	push	{r7}
 800420e:	b083      	sub	sp, #12
 8004210:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004212:	2300      	movs	r3, #0
 8004214:	607b      	str	r3, [r7, #4]
 8004216:	4b0f      	ldr	r3, [pc, #60]	; (8004254 <HAL_MspInit+0x48>)
 8004218:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800421a:	4a0e      	ldr	r2, [pc, #56]	; (8004254 <HAL_MspInit+0x48>)
 800421c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004220:	6453      	str	r3, [r2, #68]	; 0x44
 8004222:	4b0c      	ldr	r3, [pc, #48]	; (8004254 <HAL_MspInit+0x48>)
 8004224:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004226:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800422a:	607b      	str	r3, [r7, #4]
 800422c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800422e:	2300      	movs	r3, #0
 8004230:	603b      	str	r3, [r7, #0]
 8004232:	4b08      	ldr	r3, [pc, #32]	; (8004254 <HAL_MspInit+0x48>)
 8004234:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004236:	4a07      	ldr	r2, [pc, #28]	; (8004254 <HAL_MspInit+0x48>)
 8004238:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800423c:	6413      	str	r3, [r2, #64]	; 0x40
 800423e:	4b05      	ldr	r3, [pc, #20]	; (8004254 <HAL_MspInit+0x48>)
 8004240:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004242:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004246:	603b      	str	r3, [r7, #0]
 8004248:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800424a:	bf00      	nop
 800424c:	370c      	adds	r7, #12
 800424e:	46bd      	mov	sp, r7
 8004250:	bc80      	pop	{r7}
 8004252:	4770      	bx	lr
 8004254:	40023800 	.word	0x40023800

08004258 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8004258:	b580      	push	{r7, lr}
 800425a:	b08a      	sub	sp, #40	; 0x28
 800425c:	af00      	add	r7, sp, #0
 800425e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004260:	f107 0314 	add.w	r3, r7, #20
 8004264:	2200      	movs	r2, #0
 8004266:	601a      	str	r2, [r3, #0]
 8004268:	605a      	str	r2, [r3, #4]
 800426a:	609a      	str	r2, [r3, #8]
 800426c:	60da      	str	r2, [r3, #12]
 800426e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	4a17      	ldr	r2, [pc, #92]	; (80042d4 <HAL_ADC_MspInit+0x7c>)
 8004276:	4293      	cmp	r3, r2
 8004278:	d127      	bne.n	80042ca <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800427a:	2300      	movs	r3, #0
 800427c:	613b      	str	r3, [r7, #16]
 800427e:	4b16      	ldr	r3, [pc, #88]	; (80042d8 <HAL_ADC_MspInit+0x80>)
 8004280:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004282:	4a15      	ldr	r2, [pc, #84]	; (80042d8 <HAL_ADC_MspInit+0x80>)
 8004284:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004288:	6453      	str	r3, [r2, #68]	; 0x44
 800428a:	4b13      	ldr	r3, [pc, #76]	; (80042d8 <HAL_ADC_MspInit+0x80>)
 800428c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800428e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004292:	613b      	str	r3, [r7, #16]
 8004294:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004296:	2300      	movs	r3, #0
 8004298:	60fb      	str	r3, [r7, #12]
 800429a:	4b0f      	ldr	r3, [pc, #60]	; (80042d8 <HAL_ADC_MspInit+0x80>)
 800429c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800429e:	4a0e      	ldr	r2, [pc, #56]	; (80042d8 <HAL_ADC_MspInit+0x80>)
 80042a0:	f043 0304 	orr.w	r3, r3, #4
 80042a4:	6313      	str	r3, [r2, #48]	; 0x30
 80042a6:	4b0c      	ldr	r3, [pc, #48]	; (80042d8 <HAL_ADC_MspInit+0x80>)
 80042a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042aa:	f003 0304 	and.w	r3, r3, #4
 80042ae:	60fb      	str	r3, [r7, #12]
 80042b0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC1     ------> ADC1_IN11
    PC2     ------> ADC1_IN12
    */
    GPIO_InitStruct.Pin = ONBOARD_ADC_2_Pin|ONBOARD_ADC_1_Pin;
 80042b2:	2306      	movs	r3, #6
 80042b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80042b6:	2303      	movs	r3, #3
 80042b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042ba:	2300      	movs	r3, #0
 80042bc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80042be:	f107 0314 	add.w	r3, r7, #20
 80042c2:	4619      	mov	r1, r3
 80042c4:	4805      	ldr	r0, [pc, #20]	; (80042dc <HAL_ADC_MspInit+0x84>)
 80042c6:	f001 fad1 	bl	800586c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80042ca:	bf00      	nop
 80042cc:	3728      	adds	r7, #40	; 0x28
 80042ce:	46bd      	mov	sp, r7
 80042d0:	bd80      	pop	{r7, pc}
 80042d2:	bf00      	nop
 80042d4:	40012000 	.word	0x40012000
 80042d8:	40023800 	.word	0x40023800
 80042dc:	40020800 	.word	0x40020800

080042e0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80042e0:	b580      	push	{r7, lr}
 80042e2:	b08a      	sub	sp, #40	; 0x28
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80042e8:	f107 0314 	add.w	r3, r7, #20
 80042ec:	2200      	movs	r2, #0
 80042ee:	601a      	str	r2, [r3, #0]
 80042f0:	605a      	str	r2, [r3, #4]
 80042f2:	609a      	str	r2, [r3, #8]
 80042f4:	60da      	str	r2, [r3, #12]
 80042f6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	4a48      	ldr	r2, [pc, #288]	; (8004420 <HAL_I2C_MspInit+0x140>)
 80042fe:	4293      	cmp	r3, r2
 8004300:	f040 8089 	bne.w	8004416 <HAL_I2C_MspInit+0x136>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004304:	2300      	movs	r3, #0
 8004306:	613b      	str	r3, [r7, #16]
 8004308:	4b46      	ldr	r3, [pc, #280]	; (8004424 <HAL_I2C_MspInit+0x144>)
 800430a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800430c:	4a45      	ldr	r2, [pc, #276]	; (8004424 <HAL_I2C_MspInit+0x144>)
 800430e:	f043 0302 	orr.w	r3, r3, #2
 8004312:	6313      	str	r3, [r2, #48]	; 0x30
 8004314:	4b43      	ldr	r3, [pc, #268]	; (8004424 <HAL_I2C_MspInit+0x144>)
 8004316:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004318:	f003 0302 	and.w	r3, r3, #2
 800431c:	613b      	str	r3, [r7, #16]
 800431e:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8004320:	f44f 7340 	mov.w	r3, #768	; 0x300
 8004324:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004326:	2312      	movs	r3, #18
 8004328:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800432a:	2300      	movs	r3, #0
 800432c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800432e:	2303      	movs	r3, #3
 8004330:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8004332:	2304      	movs	r3, #4
 8004334:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004336:	f107 0314 	add.w	r3, r7, #20
 800433a:	4619      	mov	r1, r3
 800433c:	483a      	ldr	r0, [pc, #232]	; (8004428 <HAL_I2C_MspInit+0x148>)
 800433e:	f001 fa95 	bl	800586c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004342:	2300      	movs	r3, #0
 8004344:	60fb      	str	r3, [r7, #12]
 8004346:	4b37      	ldr	r3, [pc, #220]	; (8004424 <HAL_I2C_MspInit+0x144>)
 8004348:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800434a:	4a36      	ldr	r2, [pc, #216]	; (8004424 <HAL_I2C_MspInit+0x144>)
 800434c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004350:	6413      	str	r3, [r2, #64]	; 0x40
 8004352:	4b34      	ldr	r3, [pc, #208]	; (8004424 <HAL_I2C_MspInit+0x144>)
 8004354:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004356:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800435a:	60fb      	str	r3, [r7, #12]
 800435c:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream6;
 800435e:	4b33      	ldr	r3, [pc, #204]	; (800442c <HAL_I2C_MspInit+0x14c>)
 8004360:	4a33      	ldr	r2, [pc, #204]	; (8004430 <HAL_I2C_MspInit+0x150>)
 8004362:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_1;
 8004364:	4b31      	ldr	r3, [pc, #196]	; (800442c <HAL_I2C_MspInit+0x14c>)
 8004366:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800436a:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800436c:	4b2f      	ldr	r3, [pc, #188]	; (800442c <HAL_I2C_MspInit+0x14c>)
 800436e:	2240      	movs	r2, #64	; 0x40
 8004370:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004372:	4b2e      	ldr	r3, [pc, #184]	; (800442c <HAL_I2C_MspInit+0x14c>)
 8004374:	2200      	movs	r2, #0
 8004376:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004378:	4b2c      	ldr	r3, [pc, #176]	; (800442c <HAL_I2C_MspInit+0x14c>)
 800437a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800437e:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004380:	4b2a      	ldr	r3, [pc, #168]	; (800442c <HAL_I2C_MspInit+0x14c>)
 8004382:	2200      	movs	r2, #0
 8004384:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004386:	4b29      	ldr	r3, [pc, #164]	; (800442c <HAL_I2C_MspInit+0x14c>)
 8004388:	2200      	movs	r2, #0
 800438a:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 800438c:	4b27      	ldr	r3, [pc, #156]	; (800442c <HAL_I2C_MspInit+0x14c>)
 800438e:	2200      	movs	r2, #0
 8004390:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8004392:	4b26      	ldr	r3, [pc, #152]	; (800442c <HAL_I2C_MspInit+0x14c>)
 8004394:	2200      	movs	r2, #0
 8004396:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004398:	4b24      	ldr	r3, [pc, #144]	; (800442c <HAL_I2C_MspInit+0x14c>)
 800439a:	2200      	movs	r2, #0
 800439c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 800439e:	4823      	ldr	r0, [pc, #140]	; (800442c <HAL_I2C_MspInit+0x14c>)
 80043a0:	f000 ff7e 	bl	80052a0 <HAL_DMA_Init>
 80043a4:	4603      	mov	r3, r0
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d001      	beq.n	80043ae <HAL_I2C_MspInit+0xce>
    {
      Error_Handler();
 80043aa:	f7ff fb3b 	bl	8003a24 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	4a1e      	ldr	r2, [pc, #120]	; (800442c <HAL_I2C_MspInit+0x14c>)
 80043b2:	635a      	str	r2, [r3, #52]	; 0x34
 80043b4:	4a1d      	ldr	r2, [pc, #116]	; (800442c <HAL_I2C_MspInit+0x14c>)
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 80043ba:	4b1e      	ldr	r3, [pc, #120]	; (8004434 <HAL_I2C_MspInit+0x154>)
 80043bc:	4a1e      	ldr	r2, [pc, #120]	; (8004438 <HAL_I2C_MspInit+0x158>)
 80043be:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 80043c0:	4b1c      	ldr	r3, [pc, #112]	; (8004434 <HAL_I2C_MspInit+0x154>)
 80043c2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80043c6:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80043c8:	4b1a      	ldr	r3, [pc, #104]	; (8004434 <HAL_I2C_MspInit+0x154>)
 80043ca:	2200      	movs	r2, #0
 80043cc:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80043ce:	4b19      	ldr	r3, [pc, #100]	; (8004434 <HAL_I2C_MspInit+0x154>)
 80043d0:	2200      	movs	r2, #0
 80043d2:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80043d4:	4b17      	ldr	r3, [pc, #92]	; (8004434 <HAL_I2C_MspInit+0x154>)
 80043d6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80043da:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80043dc:	4b15      	ldr	r3, [pc, #84]	; (8004434 <HAL_I2C_MspInit+0x154>)
 80043de:	2200      	movs	r2, #0
 80043e0:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80043e2:	4b14      	ldr	r3, [pc, #80]	; (8004434 <HAL_I2C_MspInit+0x154>)
 80043e4:	2200      	movs	r2, #0
 80043e6:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 80043e8:	4b12      	ldr	r3, [pc, #72]	; (8004434 <HAL_I2C_MspInit+0x154>)
 80043ea:	2200      	movs	r2, #0
 80043ec:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80043ee:	4b11      	ldr	r3, [pc, #68]	; (8004434 <HAL_I2C_MspInit+0x154>)
 80043f0:	2200      	movs	r2, #0
 80043f2:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80043f4:	4b0f      	ldr	r3, [pc, #60]	; (8004434 <HAL_I2C_MspInit+0x154>)
 80043f6:	2200      	movs	r2, #0
 80043f8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 80043fa:	480e      	ldr	r0, [pc, #56]	; (8004434 <HAL_I2C_MspInit+0x154>)
 80043fc:	f000 ff50 	bl	80052a0 <HAL_DMA_Init>
 8004400:	4603      	mov	r3, r0
 8004402:	2b00      	cmp	r3, #0
 8004404:	d001      	beq.n	800440a <HAL_I2C_MspInit+0x12a>
    {
      Error_Handler();
 8004406:	f7ff fb0d 	bl	8003a24 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	4a09      	ldr	r2, [pc, #36]	; (8004434 <HAL_I2C_MspInit+0x154>)
 800440e:	639a      	str	r2, [r3, #56]	; 0x38
 8004410:	4a08      	ldr	r2, [pc, #32]	; (8004434 <HAL_I2C_MspInit+0x154>)
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8004416:	bf00      	nop
 8004418:	3728      	adds	r7, #40	; 0x28
 800441a:	46bd      	mov	sp, r7
 800441c:	bd80      	pop	{r7, pc}
 800441e:	bf00      	nop
 8004420:	40005400 	.word	0x40005400
 8004424:	40023800 	.word	0x40023800
 8004428:	40020400 	.word	0x40020400
 800442c:	20000658 	.word	0x20000658
 8004430:	400260a0 	.word	0x400260a0
 8004434:	200006b8 	.word	0x200006b8
 8004438:	40026010 	.word	0x40026010

0800443c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800443c:	b480      	push	{r7}
 800443e:	b085      	sub	sp, #20
 8004440:	af00      	add	r7, sp, #0
 8004442:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	4a14      	ldr	r2, [pc, #80]	; (800449c <HAL_TIM_PWM_MspInit+0x60>)
 800444a:	4293      	cmp	r3, r2
 800444c:	d10e      	bne.n	800446c <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800444e:	2300      	movs	r3, #0
 8004450:	60fb      	str	r3, [r7, #12]
 8004452:	4b13      	ldr	r3, [pc, #76]	; (80044a0 <HAL_TIM_PWM_MspInit+0x64>)
 8004454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004456:	4a12      	ldr	r2, [pc, #72]	; (80044a0 <HAL_TIM_PWM_MspInit+0x64>)
 8004458:	f043 0302 	orr.w	r3, r3, #2
 800445c:	6413      	str	r3, [r2, #64]	; 0x40
 800445e:	4b10      	ldr	r3, [pc, #64]	; (80044a0 <HAL_TIM_PWM_MspInit+0x64>)
 8004460:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004462:	f003 0302 	and.w	r3, r3, #2
 8004466:	60fb      	str	r3, [r7, #12]
 8004468:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800446a:	e012      	b.n	8004492 <HAL_TIM_PWM_MspInit+0x56>
  else if(htim_pwm->Instance==TIM4)
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	4a0c      	ldr	r2, [pc, #48]	; (80044a4 <HAL_TIM_PWM_MspInit+0x68>)
 8004472:	4293      	cmp	r3, r2
 8004474:	d10d      	bne.n	8004492 <HAL_TIM_PWM_MspInit+0x56>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8004476:	2300      	movs	r3, #0
 8004478:	60bb      	str	r3, [r7, #8]
 800447a:	4b09      	ldr	r3, [pc, #36]	; (80044a0 <HAL_TIM_PWM_MspInit+0x64>)
 800447c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800447e:	4a08      	ldr	r2, [pc, #32]	; (80044a0 <HAL_TIM_PWM_MspInit+0x64>)
 8004480:	f043 0304 	orr.w	r3, r3, #4
 8004484:	6413      	str	r3, [r2, #64]	; 0x40
 8004486:	4b06      	ldr	r3, [pc, #24]	; (80044a0 <HAL_TIM_PWM_MspInit+0x64>)
 8004488:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800448a:	f003 0304 	and.w	r3, r3, #4
 800448e:	60bb      	str	r3, [r7, #8]
 8004490:	68bb      	ldr	r3, [r7, #8]
}
 8004492:	bf00      	nop
 8004494:	3714      	adds	r7, #20
 8004496:	46bd      	mov	sp, r7
 8004498:	bc80      	pop	{r7}
 800449a:	4770      	bx	lr
 800449c:	40000400 	.word	0x40000400
 80044a0:	40023800 	.word	0x40023800
 80044a4:	40000800 	.word	0x40000800

080044a8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80044a8:	b580      	push	{r7, lr}
 80044aa:	b086      	sub	sp, #24
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM11)
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	4a26      	ldr	r2, [pc, #152]	; (8004550 <HAL_TIM_Base_MspInit+0xa8>)
 80044b6:	4293      	cmp	r3, r2
 80044b8:	d10e      	bne.n	80044d8 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM11_MspInit 0 */

  /* USER CODE END TIM11_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM11_CLK_ENABLE();
 80044ba:	2300      	movs	r3, #0
 80044bc:	617b      	str	r3, [r7, #20]
 80044be:	4b25      	ldr	r3, [pc, #148]	; (8004554 <HAL_TIM_Base_MspInit+0xac>)
 80044c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044c2:	4a24      	ldr	r2, [pc, #144]	; (8004554 <HAL_TIM_Base_MspInit+0xac>)
 80044c4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80044c8:	6453      	str	r3, [r2, #68]	; 0x44
 80044ca:	4b22      	ldr	r3, [pc, #136]	; (8004554 <HAL_TIM_Base_MspInit+0xac>)
 80044cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044ce:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80044d2:	617b      	str	r3, [r7, #20]
 80044d4:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 80044d6:	e036      	b.n	8004546 <HAL_TIM_Base_MspInit+0x9e>
  else if(htim_base->Instance==TIM13)
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	4a1e      	ldr	r2, [pc, #120]	; (8004558 <HAL_TIM_Base_MspInit+0xb0>)
 80044de:	4293      	cmp	r3, r2
 80044e0:	d116      	bne.n	8004510 <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM13_CLK_ENABLE();
 80044e2:	2300      	movs	r3, #0
 80044e4:	613b      	str	r3, [r7, #16]
 80044e6:	4b1b      	ldr	r3, [pc, #108]	; (8004554 <HAL_TIM_Base_MspInit+0xac>)
 80044e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044ea:	4a1a      	ldr	r2, [pc, #104]	; (8004554 <HAL_TIM_Base_MspInit+0xac>)
 80044ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80044f0:	6413      	str	r3, [r2, #64]	; 0x40
 80044f2:	4b18      	ldr	r3, [pc, #96]	; (8004554 <HAL_TIM_Base_MspInit+0xac>)
 80044f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044fa:	613b      	str	r3, [r7, #16]
 80044fc:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 1, 0);
 80044fe:	2200      	movs	r2, #0
 8004500:	2101      	movs	r1, #1
 8004502:	202c      	movs	r0, #44	; 0x2c
 8004504:	f000 fe87 	bl	8005216 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8004508:	202c      	movs	r0, #44	; 0x2c
 800450a:	f000 fea0 	bl	800524e <HAL_NVIC_EnableIRQ>
}
 800450e:	e01a      	b.n	8004546 <HAL_TIM_Base_MspInit+0x9e>
  else if(htim_base->Instance==TIM14)
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	4a11      	ldr	r2, [pc, #68]	; (800455c <HAL_TIM_Base_MspInit+0xb4>)
 8004516:	4293      	cmp	r3, r2
 8004518:	d115      	bne.n	8004546 <HAL_TIM_Base_MspInit+0x9e>
    __HAL_RCC_TIM14_CLK_ENABLE();
 800451a:	2300      	movs	r3, #0
 800451c:	60fb      	str	r3, [r7, #12]
 800451e:	4b0d      	ldr	r3, [pc, #52]	; (8004554 <HAL_TIM_Base_MspInit+0xac>)
 8004520:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004522:	4a0c      	ldr	r2, [pc, #48]	; (8004554 <HAL_TIM_Base_MspInit+0xac>)
 8004524:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004528:	6413      	str	r3, [r2, #64]	; 0x40
 800452a:	4b0a      	ldr	r3, [pc, #40]	; (8004554 <HAL_TIM_Base_MspInit+0xac>)
 800452c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800452e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004532:	60fb      	str	r3, [r7, #12]
 8004534:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 0, 0);
 8004536:	2200      	movs	r2, #0
 8004538:	2100      	movs	r1, #0
 800453a:	202d      	movs	r0, #45	; 0x2d
 800453c:	f000 fe6b 	bl	8005216 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8004540:	202d      	movs	r0, #45	; 0x2d
 8004542:	f000 fe84 	bl	800524e <HAL_NVIC_EnableIRQ>
}
 8004546:	bf00      	nop
 8004548:	3718      	adds	r7, #24
 800454a:	46bd      	mov	sp, r7
 800454c:	bd80      	pop	{r7, pc}
 800454e:	bf00      	nop
 8004550:	40014800 	.word	0x40014800
 8004554:	40023800 	.word	0x40023800
 8004558:	40001c00 	.word	0x40001c00
 800455c:	40002000 	.word	0x40002000

08004560 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004560:	b580      	push	{r7, lr}
 8004562:	b08a      	sub	sp, #40	; 0x28
 8004564:	af00      	add	r7, sp, #0
 8004566:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004568:	f107 0314 	add.w	r3, r7, #20
 800456c:	2200      	movs	r2, #0
 800456e:	601a      	str	r2, [r3, #0]
 8004570:	605a      	str	r2, [r3, #4]
 8004572:	609a      	str	r2, [r3, #8]
 8004574:	60da      	str	r2, [r3, #12]
 8004576:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	4a24      	ldr	r2, [pc, #144]	; (8004610 <HAL_TIM_MspPostInit+0xb0>)
 800457e:	4293      	cmp	r3, r2
 8004580:	d11e      	bne.n	80045c0 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004582:	2300      	movs	r3, #0
 8004584:	613b      	str	r3, [r7, #16]
 8004586:	4b23      	ldr	r3, [pc, #140]	; (8004614 <HAL_TIM_MspPostInit+0xb4>)
 8004588:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800458a:	4a22      	ldr	r2, [pc, #136]	; (8004614 <HAL_TIM_MspPostInit+0xb4>)
 800458c:	f043 0304 	orr.w	r3, r3, #4
 8004590:	6313      	str	r3, [r2, #48]	; 0x30
 8004592:	4b20      	ldr	r3, [pc, #128]	; (8004614 <HAL_TIM_MspPostInit+0xb4>)
 8004594:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004596:	f003 0304 	and.w	r3, r3, #4
 800459a:	613b      	str	r3, [r7, #16]
 800459c:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PC6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = ONBOARD_WRITE_4_Pin;
 800459e:	2340      	movs	r3, #64	; 0x40
 80045a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80045a2:	2302      	movs	r3, #2
 80045a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045a6:	2300      	movs	r3, #0
 80045a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80045aa:	2300      	movs	r3, #0
 80045ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80045ae:	2302      	movs	r3, #2
 80045b0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ONBOARD_WRITE_4_GPIO_Port, &GPIO_InitStruct);
 80045b2:	f107 0314 	add.w	r3, r7, #20
 80045b6:	4619      	mov	r1, r3
 80045b8:	4817      	ldr	r0, [pc, #92]	; (8004618 <HAL_TIM_MspPostInit+0xb8>)
 80045ba:	f001 f957 	bl	800586c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80045be:	e022      	b.n	8004606 <HAL_TIM_MspPostInit+0xa6>
  else if(htim->Instance==TIM4)
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	4a15      	ldr	r2, [pc, #84]	; (800461c <HAL_TIM_MspPostInit+0xbc>)
 80045c6:	4293      	cmp	r3, r2
 80045c8:	d11d      	bne.n	8004606 <HAL_TIM_MspPostInit+0xa6>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80045ca:	2300      	movs	r3, #0
 80045cc:	60fb      	str	r3, [r7, #12]
 80045ce:	4b11      	ldr	r3, [pc, #68]	; (8004614 <HAL_TIM_MspPostInit+0xb4>)
 80045d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045d2:	4a10      	ldr	r2, [pc, #64]	; (8004614 <HAL_TIM_MspPostInit+0xb4>)
 80045d4:	f043 0302 	orr.w	r3, r3, #2
 80045d8:	6313      	str	r3, [r2, #48]	; 0x30
 80045da:	4b0e      	ldr	r3, [pc, #56]	; (8004614 <HAL_TIM_MspPostInit+0xb4>)
 80045dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045de:	f003 0302 	and.w	r3, r3, #2
 80045e2:	60fb      	str	r3, [r7, #12]
 80045e4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ONBOARD_WRITE_1_Pin;
 80045e6:	2340      	movs	r3, #64	; 0x40
 80045e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80045ea:	2302      	movs	r3, #2
 80045ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045ee:	2300      	movs	r3, #0
 80045f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80045f2:	2300      	movs	r3, #0
 80045f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80045f6:	2302      	movs	r3, #2
 80045f8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ONBOARD_WRITE_1_GPIO_Port, &GPIO_InitStruct);
 80045fa:	f107 0314 	add.w	r3, r7, #20
 80045fe:	4619      	mov	r1, r3
 8004600:	4807      	ldr	r0, [pc, #28]	; (8004620 <HAL_TIM_MspPostInit+0xc0>)
 8004602:	f001 f933 	bl	800586c <HAL_GPIO_Init>
}
 8004606:	bf00      	nop
 8004608:	3728      	adds	r7, #40	; 0x28
 800460a:	46bd      	mov	sp, r7
 800460c:	bd80      	pop	{r7, pc}
 800460e:	bf00      	nop
 8004610:	40000400 	.word	0x40000400
 8004614:	40023800 	.word	0x40023800
 8004618:	40020800 	.word	0x40020800
 800461c:	40000800 	.word	0x40000800
 8004620:	40020400 	.word	0x40020400

08004624 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004624:	b580      	push	{r7, lr}
 8004626:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 8004628:	f004 f870 	bl	800870c <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800462c:	e7fe      	b.n	800462c <NMI_Handler+0x8>

0800462e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800462e:	b480      	push	{r7}
 8004630:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004632:	e7fe      	b.n	8004632 <HardFault_Handler+0x4>

08004634 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004634:	b480      	push	{r7}
 8004636:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004638:	e7fe      	b.n	8004638 <MemManage_Handler+0x4>

0800463a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800463a:	b480      	push	{r7}
 800463c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800463e:	e7fe      	b.n	800463e <BusFault_Handler+0x4>

08004640 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004640:	b480      	push	{r7}
 8004642:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004644:	e7fe      	b.n	8004644 <UsageFault_Handler+0x4>

08004646 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004646:	b480      	push	{r7}
 8004648:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800464a:	bf00      	nop
 800464c:	46bd      	mov	sp, r7
 800464e:	bc80      	pop	{r7}
 8004650:	4770      	bx	lr

08004652 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004652:	b480      	push	{r7}
 8004654:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004656:	bf00      	nop
 8004658:	46bd      	mov	sp, r7
 800465a:	bc80      	pop	{r7}
 800465c:	4770      	bx	lr

0800465e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800465e:	b480      	push	{r7}
 8004660:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004662:	bf00      	nop
 8004664:	46bd      	mov	sp, r7
 8004666:	bc80      	pop	{r7}
 8004668:	4770      	bx	lr

0800466a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800466a:	b580      	push	{r7, lr}
 800466c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800466e:	f000 f97d 	bl	800496c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004672:	bf00      	nop
 8004674:	bd80      	pop	{r7, pc}

08004676 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8004676:	b580      	push	{r7, lr}
 8004678:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ONBOARD_READ_IT_3_Pin);
 800467a:	2001      	movs	r0, #1
 800467c:	f001 fac6 	bl	8005c0c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8004680:	bf00      	nop
 8004682:	bd80      	pop	{r7, pc}

08004684 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8004684:	b580      	push	{r7, lr}
 8004686:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8004688:	4802      	ldr	r0, [pc, #8]	; (8004694 <DMA1_Stream0_IRQHandler+0x10>)
 800468a:	f000 feb7 	bl	80053fc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800468e:	bf00      	nop
 8004690:	bd80      	pop	{r7, pc}
 8004692:	bf00      	nop
 8004694:	200006b8 	.word	0x200006b8

08004698 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8004698:	b580      	push	{r7, lr}
 800469a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 800469c:	4802      	ldr	r0, [pc, #8]	; (80046a8 <DMA1_Stream6_IRQHandler+0x10>)
 800469e:	f000 fead 	bl	80053fc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 80046a2:	bf00      	nop
 80046a4:	bd80      	pop	{r7, pc}
 80046a6:	bf00      	nop
 80046a8:	20000658 	.word	0x20000658

080046ac <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 80046ac:	b580      	push	{r7, lr}
 80046ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim13);
 80046b0:	4802      	ldr	r0, [pc, #8]	; (80046bc <TIM8_UP_TIM13_IRQHandler+0x10>)
 80046b2:	f004 fa81 	bl	8008bb8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 80046b6:	bf00      	nop
 80046b8:	bd80      	pop	{r7, pc}
 80046ba:	bf00      	nop
 80046bc:	200007f0 	.word	0x200007f0

080046c0 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 80046c0:	b580      	push	{r7, lr}
 80046c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 80046c4:	4802      	ldr	r0, [pc, #8]	; (80046d0 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 80046c6:	f004 fa77 	bl	8008bb8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 80046ca:	bf00      	nop
 80046cc:	bd80      	pop	{r7, pc}
 80046ce:	bf00      	nop
 80046d0:	20000838 	.word	0x20000838

080046d4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80046d4:	b580      	push	{r7, lr}
 80046d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80046d8:	4802      	ldr	r0, [pc, #8]	; (80046e4 <OTG_FS_IRQHandler+0x10>)
 80046da:	f002 fbac 	bl	8006e36 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80046de:	bf00      	nop
 80046e0:	bd80      	pop	{r7, pc}
 80046e2:	bf00      	nop
 80046e4:	20001d70 	.word	0x20001d70

080046e8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80046e8:	b480      	push	{r7}
 80046ea:	af00      	add	r7, sp, #0
	return 1;
 80046ec:	2301      	movs	r3, #1
}
 80046ee:	4618      	mov	r0, r3
 80046f0:	46bd      	mov	sp, r7
 80046f2:	bc80      	pop	{r7}
 80046f4:	4770      	bx	lr

080046f6 <_kill>:

int _kill(int pid, int sig)
{
 80046f6:	b580      	push	{r7, lr}
 80046f8:	b082      	sub	sp, #8
 80046fa:	af00      	add	r7, sp, #0
 80046fc:	6078      	str	r0, [r7, #4]
 80046fe:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8004700:	f009 fe74 	bl	800e3ec <__errno>
 8004704:	4603      	mov	r3, r0
 8004706:	2216      	movs	r2, #22
 8004708:	601a      	str	r2, [r3, #0]
	return -1;
 800470a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800470e:	4618      	mov	r0, r3
 8004710:	3708      	adds	r7, #8
 8004712:	46bd      	mov	sp, r7
 8004714:	bd80      	pop	{r7, pc}

08004716 <_exit>:

void _exit (int status)
{
 8004716:	b580      	push	{r7, lr}
 8004718:	b082      	sub	sp, #8
 800471a:	af00      	add	r7, sp, #0
 800471c:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800471e:	f04f 31ff 	mov.w	r1, #4294967295
 8004722:	6878      	ldr	r0, [r7, #4]
 8004724:	f7ff ffe7 	bl	80046f6 <_kill>
	while (1) {}		/* Make sure we hang here */
 8004728:	e7fe      	b.n	8004728 <_exit+0x12>

0800472a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800472a:	b580      	push	{r7, lr}
 800472c:	b086      	sub	sp, #24
 800472e:	af00      	add	r7, sp, #0
 8004730:	60f8      	str	r0, [r7, #12]
 8004732:	60b9      	str	r1, [r7, #8]
 8004734:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004736:	2300      	movs	r3, #0
 8004738:	617b      	str	r3, [r7, #20]
 800473a:	e00a      	b.n	8004752 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800473c:	f3af 8000 	nop.w
 8004740:	4601      	mov	r1, r0
 8004742:	68bb      	ldr	r3, [r7, #8]
 8004744:	1c5a      	adds	r2, r3, #1
 8004746:	60ba      	str	r2, [r7, #8]
 8004748:	b2ca      	uxtb	r2, r1
 800474a:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800474c:	697b      	ldr	r3, [r7, #20]
 800474e:	3301      	adds	r3, #1
 8004750:	617b      	str	r3, [r7, #20]
 8004752:	697a      	ldr	r2, [r7, #20]
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	429a      	cmp	r2, r3
 8004758:	dbf0      	blt.n	800473c <_read+0x12>
	}

return len;
 800475a:	687b      	ldr	r3, [r7, #4]
}
 800475c:	4618      	mov	r0, r3
 800475e:	3718      	adds	r7, #24
 8004760:	46bd      	mov	sp, r7
 8004762:	bd80      	pop	{r7, pc}

08004764 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004764:	b580      	push	{r7, lr}
 8004766:	b086      	sub	sp, #24
 8004768:	af00      	add	r7, sp, #0
 800476a:	60f8      	str	r0, [r7, #12]
 800476c:	60b9      	str	r1, [r7, #8]
 800476e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004770:	2300      	movs	r3, #0
 8004772:	617b      	str	r3, [r7, #20]
 8004774:	e009      	b.n	800478a <_write+0x26>
	{
		__io_putchar(*ptr++);
 8004776:	68bb      	ldr	r3, [r7, #8]
 8004778:	1c5a      	adds	r2, r3, #1
 800477a:	60ba      	str	r2, [r7, #8]
 800477c:	781b      	ldrb	r3, [r3, #0]
 800477e:	4618      	mov	r0, r3
 8004780:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004784:	697b      	ldr	r3, [r7, #20]
 8004786:	3301      	adds	r3, #1
 8004788:	617b      	str	r3, [r7, #20]
 800478a:	697a      	ldr	r2, [r7, #20]
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	429a      	cmp	r2, r3
 8004790:	dbf1      	blt.n	8004776 <_write+0x12>
	}
	return len;
 8004792:	687b      	ldr	r3, [r7, #4]
}
 8004794:	4618      	mov	r0, r3
 8004796:	3718      	adds	r7, #24
 8004798:	46bd      	mov	sp, r7
 800479a:	bd80      	pop	{r7, pc}

0800479c <_close>:

int _close(int file)
{
 800479c:	b480      	push	{r7}
 800479e:	b083      	sub	sp, #12
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	6078      	str	r0, [r7, #4]
	return -1;
 80047a4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80047a8:	4618      	mov	r0, r3
 80047aa:	370c      	adds	r7, #12
 80047ac:	46bd      	mov	sp, r7
 80047ae:	bc80      	pop	{r7}
 80047b0:	4770      	bx	lr

080047b2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80047b2:	b480      	push	{r7}
 80047b4:	b083      	sub	sp, #12
 80047b6:	af00      	add	r7, sp, #0
 80047b8:	6078      	str	r0, [r7, #4]
 80047ba:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80047bc:	683b      	ldr	r3, [r7, #0]
 80047be:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80047c2:	605a      	str	r2, [r3, #4]
	return 0;
 80047c4:	2300      	movs	r3, #0
}
 80047c6:	4618      	mov	r0, r3
 80047c8:	370c      	adds	r7, #12
 80047ca:	46bd      	mov	sp, r7
 80047cc:	bc80      	pop	{r7}
 80047ce:	4770      	bx	lr

080047d0 <_isatty>:

int _isatty(int file)
{
 80047d0:	b480      	push	{r7}
 80047d2:	b083      	sub	sp, #12
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	6078      	str	r0, [r7, #4]
	return 1;
 80047d8:	2301      	movs	r3, #1
}
 80047da:	4618      	mov	r0, r3
 80047dc:	370c      	adds	r7, #12
 80047de:	46bd      	mov	sp, r7
 80047e0:	bc80      	pop	{r7}
 80047e2:	4770      	bx	lr

080047e4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80047e4:	b480      	push	{r7}
 80047e6:	b085      	sub	sp, #20
 80047e8:	af00      	add	r7, sp, #0
 80047ea:	60f8      	str	r0, [r7, #12]
 80047ec:	60b9      	str	r1, [r7, #8]
 80047ee:	607a      	str	r2, [r7, #4]
	return 0;
 80047f0:	2300      	movs	r3, #0
}
 80047f2:	4618      	mov	r0, r3
 80047f4:	3714      	adds	r7, #20
 80047f6:	46bd      	mov	sp, r7
 80047f8:	bc80      	pop	{r7}
 80047fa:	4770      	bx	lr

080047fc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80047fc:	b580      	push	{r7, lr}
 80047fe:	b086      	sub	sp, #24
 8004800:	af00      	add	r7, sp, #0
 8004802:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004804:	4a14      	ldr	r2, [pc, #80]	; (8004858 <_sbrk+0x5c>)
 8004806:	4b15      	ldr	r3, [pc, #84]	; (800485c <_sbrk+0x60>)
 8004808:	1ad3      	subs	r3, r2, r3
 800480a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800480c:	697b      	ldr	r3, [r7, #20]
 800480e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004810:	4b13      	ldr	r3, [pc, #76]	; (8004860 <_sbrk+0x64>)
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	2b00      	cmp	r3, #0
 8004816:	d102      	bne.n	800481e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004818:	4b11      	ldr	r3, [pc, #68]	; (8004860 <_sbrk+0x64>)
 800481a:	4a12      	ldr	r2, [pc, #72]	; (8004864 <_sbrk+0x68>)
 800481c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800481e:	4b10      	ldr	r3, [pc, #64]	; (8004860 <_sbrk+0x64>)
 8004820:	681a      	ldr	r2, [r3, #0]
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	4413      	add	r3, r2
 8004826:	693a      	ldr	r2, [r7, #16]
 8004828:	429a      	cmp	r2, r3
 800482a:	d207      	bcs.n	800483c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800482c:	f009 fdde 	bl	800e3ec <__errno>
 8004830:	4603      	mov	r3, r0
 8004832:	220c      	movs	r2, #12
 8004834:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004836:	f04f 33ff 	mov.w	r3, #4294967295
 800483a:	e009      	b.n	8004850 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800483c:	4b08      	ldr	r3, [pc, #32]	; (8004860 <_sbrk+0x64>)
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004842:	4b07      	ldr	r3, [pc, #28]	; (8004860 <_sbrk+0x64>)
 8004844:	681a      	ldr	r2, [r3, #0]
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	4413      	add	r3, r2
 800484a:	4a05      	ldr	r2, [pc, #20]	; (8004860 <_sbrk+0x64>)
 800484c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800484e:	68fb      	ldr	r3, [r7, #12]
}
 8004850:	4618      	mov	r0, r3
 8004852:	3718      	adds	r7, #24
 8004854:	46bd      	mov	sp, r7
 8004856:	bd80      	pop	{r7, pc}
 8004858:	20020000 	.word	0x20020000
 800485c:	00000400 	.word	0x00000400
 8004860:	20000898 	.word	0x20000898
 8004864:	20002180 	.word	0x20002180

08004868 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004868:	b480      	push	{r7}
 800486a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800486c:	bf00      	nop
 800486e:	46bd      	mov	sp, r7
 8004870:	bc80      	pop	{r7}
 8004872:	4770      	bx	lr

08004874 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8004874:	f8df d034 	ldr.w	sp, [pc, #52]	; 80048ac <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004878:	480d      	ldr	r0, [pc, #52]	; (80048b0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800487a:	490e      	ldr	r1, [pc, #56]	; (80048b4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800487c:	4a0e      	ldr	r2, [pc, #56]	; (80048b8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800487e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004880:	e002      	b.n	8004888 <LoopCopyDataInit>

08004882 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004882:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004884:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004886:	3304      	adds	r3, #4

08004888 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004888:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800488a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800488c:	d3f9      	bcc.n	8004882 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800488e:	4a0b      	ldr	r2, [pc, #44]	; (80048bc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8004890:	4c0b      	ldr	r4, [pc, #44]	; (80048c0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8004892:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004894:	e001      	b.n	800489a <LoopFillZerobss>

08004896 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004896:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004898:	3204      	adds	r2, #4

0800489a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800489a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800489c:	d3fb      	bcc.n	8004896 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800489e:	f7ff ffe3 	bl	8004868 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80048a2:	f009 fda9 	bl	800e3f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80048a6:	f7fe fcdd 	bl	8003264 <main>
  bx  lr    
 80048aa:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80048ac:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80048b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80048b4:	20000378 	.word	0x20000378
  ldr r2, =_sidata
 80048b8:	080120e4 	.word	0x080120e4
  ldr r2, =_sbss
 80048bc:	20000378 	.word	0x20000378
  ldr r4, =_ebss
 80048c0:	20002180 	.word	0x20002180

080048c4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80048c4:	e7fe      	b.n	80048c4 <ADC_IRQHandler>
	...

080048c8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80048c8:	b580      	push	{r7, lr}
 80048ca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
   __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80048cc:	4b0e      	ldr	r3, [pc, #56]	; (8004908 <HAL_Init+0x40>)
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	4a0d      	ldr	r2, [pc, #52]	; (8004908 <HAL_Init+0x40>)
 80048d2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80048d6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
   __HAL_FLASH_DATA_CACHE_ENABLE();
 80048d8:	4b0b      	ldr	r3, [pc, #44]	; (8004908 <HAL_Init+0x40>)
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	4a0a      	ldr	r2, [pc, #40]	; (8004908 <HAL_Init+0x40>)
 80048de:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80048e2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80048e4:	4b08      	ldr	r3, [pc, #32]	; (8004908 <HAL_Init+0x40>)
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	4a07      	ldr	r2, [pc, #28]	; (8004908 <HAL_Init+0x40>)
 80048ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80048ee:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80048f0:	2003      	movs	r0, #3
 80048f2:	f000 fc85 	bl	8005200 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80048f6:	200f      	movs	r0, #15
 80048f8:	f000 f808 	bl	800490c <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 80048fc:	f7ff fc86 	bl	800420c <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8004900:	2300      	movs	r3, #0
}
 8004902:	4618      	mov	r0, r3
 8004904:	bd80      	pop	{r7, pc}
 8004906:	bf00      	nop
 8004908:	40023c00 	.word	0x40023c00

0800490c <HAL_InitTick>:
  *       implementation  in user file.
  * @param  TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800490c:	b580      	push	{r7, lr}
 800490e:	b082      	sub	sp, #8
 8004910:	af00      	add	r7, sp, #0
 8004912:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004914:	4b12      	ldr	r3, [pc, #72]	; (8004960 <HAL_InitTick+0x54>)
 8004916:	681a      	ldr	r2, [r3, #0]
 8004918:	4b12      	ldr	r3, [pc, #72]	; (8004964 <HAL_InitTick+0x58>)
 800491a:	781b      	ldrb	r3, [r3, #0]
 800491c:	4619      	mov	r1, r3
 800491e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004922:	fbb3 f3f1 	udiv	r3, r3, r1
 8004926:	fbb2 f3f3 	udiv	r3, r2, r3
 800492a:	4618      	mov	r0, r3
 800492c:	f000 fcab 	bl	8005286 <HAL_SYSTICK_Config>
 8004930:	4603      	mov	r3, r0
 8004932:	2b00      	cmp	r3, #0
 8004934:	d001      	beq.n	800493a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004936:	2301      	movs	r3, #1
 8004938:	e00e      	b.n	8004958 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	2b0f      	cmp	r3, #15
 800493e:	d80a      	bhi.n	8004956 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004940:	2200      	movs	r2, #0
 8004942:	6879      	ldr	r1, [r7, #4]
 8004944:	f04f 30ff 	mov.w	r0, #4294967295
 8004948:	f000 fc65 	bl	8005216 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800494c:	4a06      	ldr	r2, [pc, #24]	; (8004968 <HAL_InitTick+0x5c>)
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004952:	2300      	movs	r3, #0
 8004954:	e000      	b.n	8004958 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004956:	2301      	movs	r3, #1
}
 8004958:	4618      	mov	r0, r3
 800495a:	3708      	adds	r7, #8
 800495c:	46bd      	mov	sp, r7
 800495e:	bd80      	pop	{r7, pc}
 8004960:	20000024 	.word	0x20000024
 8004964:	2000002c 	.word	0x2000002c
 8004968:	20000028 	.word	0x20000028

0800496c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800496c:	b480      	push	{r7}
 800496e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004970:	4b05      	ldr	r3, [pc, #20]	; (8004988 <HAL_IncTick+0x1c>)
 8004972:	781b      	ldrb	r3, [r3, #0]
 8004974:	461a      	mov	r2, r3
 8004976:	4b05      	ldr	r3, [pc, #20]	; (800498c <HAL_IncTick+0x20>)
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	4413      	add	r3, r2
 800497c:	4a03      	ldr	r2, [pc, #12]	; (800498c <HAL_IncTick+0x20>)
 800497e:	6013      	str	r3, [r2, #0]
}
 8004980:	bf00      	nop
 8004982:	46bd      	mov	sp, r7
 8004984:	bc80      	pop	{r7}
 8004986:	4770      	bx	lr
 8004988:	2000002c 	.word	0x2000002c
 800498c:	200008a8 	.word	0x200008a8

08004990 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004990:	b480      	push	{r7}
 8004992:	af00      	add	r7, sp, #0
  return uwTick;
 8004994:	4b02      	ldr	r3, [pc, #8]	; (80049a0 <HAL_GetTick+0x10>)
 8004996:	681b      	ldr	r3, [r3, #0]
}
 8004998:	4618      	mov	r0, r3
 800499a:	46bd      	mov	sp, r7
 800499c:	bc80      	pop	{r7}
 800499e:	4770      	bx	lr
 80049a0:	200008a8 	.word	0x200008a8

080049a4 <HAL_Delay>:
  *       implementations in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 80049a4:	b580      	push	{r7, lr}
 80049a6:	b084      	sub	sp, #16
 80049a8:	af00      	add	r7, sp, #0
 80049aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80049ac:	f7ff fff0 	bl	8004990 <HAL_GetTick>
 80049b0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049bc:	d005      	beq.n	80049ca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80049be:	4b0a      	ldr	r3, [pc, #40]	; (80049e8 <HAL_Delay+0x44>)
 80049c0:	781b      	ldrb	r3, [r3, #0]
 80049c2:	461a      	mov	r2, r3
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	4413      	add	r3, r2
 80049c8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80049ca:	bf00      	nop
 80049cc:	f7ff ffe0 	bl	8004990 <HAL_GetTick>
 80049d0:	4602      	mov	r2, r0
 80049d2:	68bb      	ldr	r3, [r7, #8]
 80049d4:	1ad3      	subs	r3, r2, r3
 80049d6:	68fa      	ldr	r2, [r7, #12]
 80049d8:	429a      	cmp	r2, r3
 80049da:	d8f7      	bhi.n	80049cc <HAL_Delay+0x28>
  {
  }
}
 80049dc:	bf00      	nop
 80049de:	bf00      	nop
 80049e0:	3710      	adds	r7, #16
 80049e2:	46bd      	mov	sp, r7
 80049e4:	bd80      	pop	{r7, pc}
 80049e6:	bf00      	nop
 80049e8:	2000002c 	.word	0x2000002c

080049ec <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80049ec:	b580      	push	{r7, lr}
 80049ee:	b084      	sub	sp, #16
 80049f0:	af00      	add	r7, sp, #0
 80049f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80049f4:	2300      	movs	r3, #0
 80049f6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d101      	bne.n	8004a02 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80049fe:	2301      	movs	r3, #1
 8004a00:	e033      	b.n	8004a6a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d109      	bne.n	8004a1e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004a0a:	6878      	ldr	r0, [r7, #4]
 8004a0c:	f7ff fc24 	bl	8004258 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	2200      	movs	r2, #0
 8004a14:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	2200      	movs	r2, #0
 8004a1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a22:	f003 0310 	and.w	r3, r3, #16
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d118      	bne.n	8004a5c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a2e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8004a32:	f023 0302 	bic.w	r3, r3, #2
 8004a36:	f043 0202 	orr.w	r2, r3, #2
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8004a3e:	6878      	ldr	r0, [r7, #4]
 8004a40:	f000 f9e8 	bl	8004e14 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	2200      	movs	r2, #0
 8004a48:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a4e:	f023 0303 	bic.w	r3, r3, #3
 8004a52:	f043 0201 	orr.w	r2, r3, #1
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	641a      	str	r2, [r3, #64]	; 0x40
 8004a5a:	e001      	b.n	8004a60 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8004a5c:	2301      	movs	r3, #1
 8004a5e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	2200      	movs	r2, #0
 8004a64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8004a68:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a6a:	4618      	mov	r0, r3
 8004a6c:	3710      	adds	r7, #16
 8004a6e:	46bd      	mov	sp, r7
 8004a70:	bd80      	pop	{r7, pc}
	...

08004a74 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8004a74:	b480      	push	{r7}
 8004a76:	b085      	sub	sp, #20
 8004a78:	af00      	add	r7, sp, #0
 8004a7a:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8004a7c:	2300      	movs	r3, #0
 8004a7e:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a86:	2b01      	cmp	r3, #1
 8004a88:	d101      	bne.n	8004a8e <HAL_ADC_Start+0x1a>
 8004a8a:	2302      	movs	r3, #2
 8004a8c:	e095      	b.n	8004bba <HAL_ADC_Start+0x146>
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	2201      	movs	r2, #1
 8004a92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	689b      	ldr	r3, [r3, #8]
 8004a9c:	f003 0301 	and.w	r3, r3, #1
 8004aa0:	2b01      	cmp	r3, #1
 8004aa2:	d018      	beq.n	8004ad6 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	689a      	ldr	r2, [r3, #8]
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	f042 0201 	orr.w	r2, r2, #1
 8004ab2:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8004ab4:	4b43      	ldr	r3, [pc, #268]	; (8004bc4 <HAL_ADC_Start+0x150>)
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	4a43      	ldr	r2, [pc, #268]	; (8004bc8 <HAL_ADC_Start+0x154>)
 8004aba:	fba2 2303 	umull	r2, r3, r2, r3
 8004abe:	0c9a      	lsrs	r2, r3, #18
 8004ac0:	4613      	mov	r3, r2
 8004ac2:	005b      	lsls	r3, r3, #1
 8004ac4:	4413      	add	r3, r2
 8004ac6:	60fb      	str	r3, [r7, #12]
    while(counter != 0U)
 8004ac8:	e002      	b.n	8004ad0 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	3b01      	subs	r3, #1
 8004ace:	60fb      	str	r3, [r7, #12]
    while(counter != 0U)
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d1f9      	bne.n	8004aca <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	689b      	ldr	r3, [r3, #8]
 8004adc:	f003 0301 	and.w	r3, r3, #1
 8004ae0:	2b01      	cmp	r3, #1
 8004ae2:	d15d      	bne.n	8004ba0 <HAL_ADC_Start+0x12c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ae8:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8004aec:	f023 0301 	bic.w	r3, r3, #1
 8004af0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	685b      	ldr	r3, [r3, #4]
 8004afe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d007      	beq.n	8004b16 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b0a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004b0e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b1a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004b1e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b22:	d106      	bne.n	8004b32 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b28:	f023 0206 	bic.w	r2, r3, #6
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	645a      	str	r2, [r3, #68]	; 0x44
 8004b30:	e002      	b.n	8004b38 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	2200      	movs	r2, #0
 8004b36:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	2200      	movs	r2, #0
 8004b3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8004b48:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8004b4a:	4b20      	ldr	r3, [pc, #128]	; (8004bcc <HAL_ADC_Start+0x158>)
 8004b4c:	685b      	ldr	r3, [r3, #4]
 8004b4e:	f003 031f 	and.w	r3, r3, #31
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d10f      	bne.n	8004b76 <HAL_ADC_Start+0x102>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	689b      	ldr	r3, [r3, #8]
 8004b5c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d129      	bne.n	8004bb8 <HAL_ADC_Start+0x144>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	689a      	ldr	r2, [r3, #8]
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8004b72:	609a      	str	r2, [r3, #8]
 8004b74:	e020      	b.n	8004bb8 <HAL_ADC_Start+0x144>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	4a15      	ldr	r2, [pc, #84]	; (8004bd0 <HAL_ADC_Start+0x15c>)
 8004b7c:	4293      	cmp	r3, r2
 8004b7e:	d11b      	bne.n	8004bb8 <HAL_ADC_Start+0x144>
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	689b      	ldr	r3, [r3, #8]
 8004b86:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d114      	bne.n	8004bb8 <HAL_ADC_Start+0x144>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	689a      	ldr	r2, [r3, #8]
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8004b9c:	609a      	str	r2, [r3, #8]
 8004b9e:	e00b      	b.n	8004bb8 <HAL_ADC_Start+0x144>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ba4:	f043 0210 	orr.w	r2, r3, #16
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bb0:	f043 0201 	orr.w	r2, r3, #1
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8004bb8:	2300      	movs	r3, #0
}
 8004bba:	4618      	mov	r0, r3
 8004bbc:	3714      	adds	r7, #20
 8004bbe:	46bd      	mov	sp, r7
 8004bc0:	bc80      	pop	{r7}
 8004bc2:	4770      	bx	lr
 8004bc4:	20000024 	.word	0x20000024
 8004bc8:	431bde83 	.word	0x431bde83
 8004bcc:	40012300 	.word	0x40012300
 8004bd0:	40012000 	.word	0x40012000

08004bd4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8004bd4:	b480      	push	{r7}
 8004bd6:	b085      	sub	sp, #20
 8004bd8:	af00      	add	r7, sp, #0
 8004bda:	6078      	str	r0, [r7, #4]
 8004bdc:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8004bde:	2300      	movs	r3, #0
 8004be0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004be8:	2b01      	cmp	r3, #1
 8004bea:	d101      	bne.n	8004bf0 <HAL_ADC_ConfigChannel+0x1c>
 8004bec:	2302      	movs	r3, #2
 8004bee:	e103      	b.n	8004df8 <HAL_ADC_ConfigChannel+0x224>
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	2201      	movs	r2, #1
 8004bf4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8004bf8:	683b      	ldr	r3, [r7, #0]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	2b09      	cmp	r3, #9
 8004bfe:	d925      	bls.n	8004c4c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	68d9      	ldr	r1, [r3, #12]
 8004c06:	683b      	ldr	r3, [r7, #0]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	b29b      	uxth	r3, r3
 8004c0c:	461a      	mov	r2, r3
 8004c0e:	4613      	mov	r3, r2
 8004c10:	005b      	lsls	r3, r3, #1
 8004c12:	4413      	add	r3, r2
 8004c14:	3b1e      	subs	r3, #30
 8004c16:	2207      	movs	r2, #7
 8004c18:	fa02 f303 	lsl.w	r3, r2, r3
 8004c1c:	43da      	mvns	r2, r3
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	400a      	ands	r2, r1
 8004c24:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	68d9      	ldr	r1, [r3, #12]
 8004c2c:	683b      	ldr	r3, [r7, #0]
 8004c2e:	689a      	ldr	r2, [r3, #8]
 8004c30:	683b      	ldr	r3, [r7, #0]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	b29b      	uxth	r3, r3
 8004c36:	4618      	mov	r0, r3
 8004c38:	4603      	mov	r3, r0
 8004c3a:	005b      	lsls	r3, r3, #1
 8004c3c:	4403      	add	r3, r0
 8004c3e:	3b1e      	subs	r3, #30
 8004c40:	409a      	lsls	r2, r3
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	430a      	orrs	r2, r1
 8004c48:	60da      	str	r2, [r3, #12]
 8004c4a:	e022      	b.n	8004c92 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	6919      	ldr	r1, [r3, #16]
 8004c52:	683b      	ldr	r3, [r7, #0]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	b29b      	uxth	r3, r3
 8004c58:	461a      	mov	r2, r3
 8004c5a:	4613      	mov	r3, r2
 8004c5c:	005b      	lsls	r3, r3, #1
 8004c5e:	4413      	add	r3, r2
 8004c60:	2207      	movs	r2, #7
 8004c62:	fa02 f303 	lsl.w	r3, r2, r3
 8004c66:	43da      	mvns	r2, r3
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	400a      	ands	r2, r1
 8004c6e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	6919      	ldr	r1, [r3, #16]
 8004c76:	683b      	ldr	r3, [r7, #0]
 8004c78:	689a      	ldr	r2, [r3, #8]
 8004c7a:	683b      	ldr	r3, [r7, #0]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	b29b      	uxth	r3, r3
 8004c80:	4618      	mov	r0, r3
 8004c82:	4603      	mov	r3, r0
 8004c84:	005b      	lsls	r3, r3, #1
 8004c86:	4403      	add	r3, r0
 8004c88:	409a      	lsls	r2, r3
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	430a      	orrs	r2, r1
 8004c90:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8004c92:	683b      	ldr	r3, [r7, #0]
 8004c94:	685b      	ldr	r3, [r3, #4]
 8004c96:	2b06      	cmp	r3, #6
 8004c98:	d824      	bhi.n	8004ce4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004ca0:	683b      	ldr	r3, [r7, #0]
 8004ca2:	685a      	ldr	r2, [r3, #4]
 8004ca4:	4613      	mov	r3, r2
 8004ca6:	009b      	lsls	r3, r3, #2
 8004ca8:	4413      	add	r3, r2
 8004caa:	3b05      	subs	r3, #5
 8004cac:	221f      	movs	r2, #31
 8004cae:	fa02 f303 	lsl.w	r3, r2, r3
 8004cb2:	43da      	mvns	r2, r3
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	400a      	ands	r2, r1
 8004cba:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004cc2:	683b      	ldr	r3, [r7, #0]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	b29b      	uxth	r3, r3
 8004cc8:	4618      	mov	r0, r3
 8004cca:	683b      	ldr	r3, [r7, #0]
 8004ccc:	685a      	ldr	r2, [r3, #4]
 8004cce:	4613      	mov	r3, r2
 8004cd0:	009b      	lsls	r3, r3, #2
 8004cd2:	4413      	add	r3, r2
 8004cd4:	3b05      	subs	r3, #5
 8004cd6:	fa00 f203 	lsl.w	r2, r0, r3
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	430a      	orrs	r2, r1
 8004ce0:	635a      	str	r2, [r3, #52]	; 0x34
 8004ce2:	e04c      	b.n	8004d7e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8004ce4:	683b      	ldr	r3, [r7, #0]
 8004ce6:	685b      	ldr	r3, [r3, #4]
 8004ce8:	2b0c      	cmp	r3, #12
 8004cea:	d824      	bhi.n	8004d36 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004cf2:	683b      	ldr	r3, [r7, #0]
 8004cf4:	685a      	ldr	r2, [r3, #4]
 8004cf6:	4613      	mov	r3, r2
 8004cf8:	009b      	lsls	r3, r3, #2
 8004cfa:	4413      	add	r3, r2
 8004cfc:	3b23      	subs	r3, #35	; 0x23
 8004cfe:	221f      	movs	r2, #31
 8004d00:	fa02 f303 	lsl.w	r3, r2, r3
 8004d04:	43da      	mvns	r2, r3
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	400a      	ands	r2, r1
 8004d0c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004d14:	683b      	ldr	r3, [r7, #0]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	b29b      	uxth	r3, r3
 8004d1a:	4618      	mov	r0, r3
 8004d1c:	683b      	ldr	r3, [r7, #0]
 8004d1e:	685a      	ldr	r2, [r3, #4]
 8004d20:	4613      	mov	r3, r2
 8004d22:	009b      	lsls	r3, r3, #2
 8004d24:	4413      	add	r3, r2
 8004d26:	3b23      	subs	r3, #35	; 0x23
 8004d28:	fa00 f203 	lsl.w	r2, r0, r3
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	430a      	orrs	r2, r1
 8004d32:	631a      	str	r2, [r3, #48]	; 0x30
 8004d34:	e023      	b.n	8004d7e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004d3c:	683b      	ldr	r3, [r7, #0]
 8004d3e:	685a      	ldr	r2, [r3, #4]
 8004d40:	4613      	mov	r3, r2
 8004d42:	009b      	lsls	r3, r3, #2
 8004d44:	4413      	add	r3, r2
 8004d46:	3b41      	subs	r3, #65	; 0x41
 8004d48:	221f      	movs	r2, #31
 8004d4a:	fa02 f303 	lsl.w	r3, r2, r3
 8004d4e:	43da      	mvns	r2, r3
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	400a      	ands	r2, r1
 8004d56:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004d5e:	683b      	ldr	r3, [r7, #0]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	b29b      	uxth	r3, r3
 8004d64:	4618      	mov	r0, r3
 8004d66:	683b      	ldr	r3, [r7, #0]
 8004d68:	685a      	ldr	r2, [r3, #4]
 8004d6a:	4613      	mov	r3, r2
 8004d6c:	009b      	lsls	r3, r3, #2
 8004d6e:	4413      	add	r3, r2
 8004d70:	3b41      	subs	r3, #65	; 0x41
 8004d72:	fa00 f203 	lsl.w	r2, r0, r3
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	430a      	orrs	r2, r1
 8004d7c:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	4a20      	ldr	r2, [pc, #128]	; (8004e04 <HAL_ADC_ConfigChannel+0x230>)
 8004d84:	4293      	cmp	r3, r2
 8004d86:	d109      	bne.n	8004d9c <HAL_ADC_ConfigChannel+0x1c8>
 8004d88:	683b      	ldr	r3, [r7, #0]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	2b12      	cmp	r3, #18
 8004d8e:	d105      	bne.n	8004d9c <HAL_ADC_ConfigChannel+0x1c8>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8004d90:	4b1d      	ldr	r3, [pc, #116]	; (8004e08 <HAL_ADC_ConfigChannel+0x234>)
 8004d92:	685b      	ldr	r3, [r3, #4]
 8004d94:	4a1c      	ldr	r2, [pc, #112]	; (8004e08 <HAL_ADC_ConfigChannel+0x234>)
 8004d96:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004d9a:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	4a18      	ldr	r2, [pc, #96]	; (8004e04 <HAL_ADC_ConfigChannel+0x230>)
 8004da2:	4293      	cmp	r3, r2
 8004da4:	d123      	bne.n	8004dee <HAL_ADC_ConfigChannel+0x21a>
 8004da6:	683b      	ldr	r3, [r7, #0]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	2b10      	cmp	r3, #16
 8004dac:	d003      	beq.n	8004db6 <HAL_ADC_ConfigChannel+0x1e2>
 8004dae:	683b      	ldr	r3, [r7, #0]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	2b11      	cmp	r3, #17
 8004db4:	d11b      	bne.n	8004dee <HAL_ADC_ConfigChannel+0x21a>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8004db6:	4b14      	ldr	r3, [pc, #80]	; (8004e08 <HAL_ADC_ConfigChannel+0x234>)
 8004db8:	685b      	ldr	r3, [r3, #4]
 8004dba:	4a13      	ldr	r2, [pc, #76]	; (8004e08 <HAL_ADC_ConfigChannel+0x234>)
 8004dbc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004dc0:	6053      	str	r3, [r2, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004dc2:	683b      	ldr	r3, [r7, #0]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	2b10      	cmp	r3, #16
 8004dc8:	d111      	bne.n	8004dee <HAL_ADC_ConfigChannel+0x21a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8004dca:	4b10      	ldr	r3, [pc, #64]	; (8004e0c <HAL_ADC_ConfigChannel+0x238>)
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	4a10      	ldr	r2, [pc, #64]	; (8004e10 <HAL_ADC_ConfigChannel+0x23c>)
 8004dd0:	fba2 2303 	umull	r2, r3, r2, r3
 8004dd4:	0c9a      	lsrs	r2, r3, #18
 8004dd6:	4613      	mov	r3, r2
 8004dd8:	009b      	lsls	r3, r3, #2
 8004dda:	4413      	add	r3, r2
 8004ddc:	005b      	lsls	r3, r3, #1
 8004dde:	60fb      	str	r3, [r7, #12]
      while(counter != 0U)
 8004de0:	e002      	b.n	8004de8 <HAL_ADC_ConfigChannel+0x214>
      {
        counter--;
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	3b01      	subs	r3, #1
 8004de6:	60fb      	str	r3, [r7, #12]
      while(counter != 0U)
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d1f9      	bne.n	8004de2 <HAL_ADC_ConfigChannel+0x20e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	2200      	movs	r2, #0
 8004df2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8004df6:	2300      	movs	r3, #0
}
 8004df8:	4618      	mov	r0, r3
 8004dfa:	3714      	adds	r7, #20
 8004dfc:	46bd      	mov	sp, r7
 8004dfe:	bc80      	pop	{r7}
 8004e00:	4770      	bx	lr
 8004e02:	bf00      	nop
 8004e04:	40012000 	.word	0x40012000
 8004e08:	40012300 	.word	0x40012300
 8004e0c:	20000024 	.word	0x20000024
 8004e10:	431bde83 	.word	0x431bde83

08004e14 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004e14:	b480      	push	{r7}
 8004e16:	b085      	sub	sp, #20
 8004e18:	af00      	add	r7, sp, #0
 8004e1a:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8004e1c:	4b7e      	ldr	r3, [pc, #504]	; (8005018 <ADC_Init+0x204>)
 8004e1e:	685b      	ldr	r3, [r3, #4]
 8004e20:	4a7d      	ldr	r2, [pc, #500]	; (8005018 <ADC_Init+0x204>)
 8004e22:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8004e26:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8004e28:	4b7b      	ldr	r3, [pc, #492]	; (8005018 <ADC_Init+0x204>)
 8004e2a:	685a      	ldr	r2, [r3, #4]
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	685b      	ldr	r3, [r3, #4]
 8004e30:	4979      	ldr	r1, [pc, #484]	; (8005018 <ADC_Init+0x204>)
 8004e32:	4313      	orrs	r3, r2
 8004e34:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	685a      	ldr	r2, [r3, #4]
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004e44:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	6859      	ldr	r1, [r3, #4]
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	691b      	ldr	r3, [r3, #16]
 8004e50:	021a      	lsls	r2, r3, #8
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	430a      	orrs	r2, r1
 8004e58:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	685a      	ldr	r2, [r3, #4]
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8004e68:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	6859      	ldr	r1, [r3, #4]
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	689a      	ldr	r2, [r3, #8]
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	430a      	orrs	r2, r1
 8004e7a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	689a      	ldr	r2, [r3, #8]
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004e8a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	6899      	ldr	r1, [r3, #8]
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	68da      	ldr	r2, [r3, #12]
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	430a      	orrs	r2, r1
 8004e9c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ea2:	4a5e      	ldr	r2, [pc, #376]	; (800501c <ADC_Init+0x208>)
 8004ea4:	4293      	cmp	r3, r2
 8004ea6:	d022      	beq.n	8004eee <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	689a      	ldr	r2, [r3, #8]
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004eb6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	6899      	ldr	r1, [r3, #8]
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	430a      	orrs	r2, r1
 8004ec8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	689a      	ldr	r2, [r3, #8]
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004ed8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	6899      	ldr	r1, [r3, #8]
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	430a      	orrs	r2, r1
 8004eea:	609a      	str	r2, [r3, #8]
 8004eec:	e00f      	b.n	8004f0e <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	689a      	ldr	r2, [r3, #8]
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004efc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	689a      	ldr	r2, [r3, #8]
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004f0c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	689a      	ldr	r2, [r3, #8]
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	f022 0202 	bic.w	r2, r2, #2
 8004f1c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	6899      	ldr	r1, [r3, #8]
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	7e1b      	ldrb	r3, [r3, #24]
 8004f28:	005a      	lsls	r2, r3, #1
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	430a      	orrs	r2, r1
 8004f30:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d027      	beq.n	8004f8c <ADC_Init+0x178>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	685a      	ldr	r2, [r3, #4]
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004f4a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	685a      	ldr	r2, [r3, #4]
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8004f5a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f60:	3b01      	subs	r3, #1
 8004f62:	f44f 4260 	mov.w	r2, #57344	; 0xe000
 8004f66:	60fa      	str	r2, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f68:	68fa      	ldr	r2, [r7, #12]
 8004f6a:	fa92 f2a2 	rbit	r2, r2
 8004f6e:	60ba      	str	r2, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8004f70:	68ba      	ldr	r2, [r7, #8]
 8004f72:	fab2 f282 	clz	r2, r2
 8004f76:	b2d2      	uxtb	r2, r2
 8004f78:	fa03 f102 	lsl.w	r1, r3, r2
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	685a      	ldr	r2, [r3, #4]
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	430a      	orrs	r2, r1
 8004f88:	605a      	str	r2, [r3, #4]
 8004f8a:	e007      	b.n	8004f9c <ADC_Init+0x188>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	685a      	ldr	r2, [r3, #4]
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004f9a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8004faa:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	69db      	ldr	r3, [r3, #28]
 8004fb6:	3b01      	subs	r3, #1
 8004fb8:	051a      	lsls	r2, r3, #20
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	430a      	orrs	r2, r1
 8004fc0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	689a      	ldr	r2, [r3, #8]
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004fd0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	6899      	ldr	r1, [r3, #8]
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004fde:	025a      	lsls	r2, r3, #9
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	430a      	orrs	r2, r1
 8004fe6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	689a      	ldr	r2, [r3, #8]
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004ff6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	6899      	ldr	r1, [r3, #8]
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	695b      	ldr	r3, [r3, #20]
 8005002:	029a      	lsls	r2, r3, #10
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	430a      	orrs	r2, r1
 800500a:	609a      	str	r2, [r3, #8]
}
 800500c:	bf00      	nop
 800500e:	3714      	adds	r7, #20
 8005010:	46bd      	mov	sp, r7
 8005012:	bc80      	pop	{r7}
 8005014:	4770      	bx	lr
 8005016:	bf00      	nop
 8005018:	40012300 	.word	0x40012300
 800501c:	0f000001 	.word	0x0f000001

08005020 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005020:	b480      	push	{r7}
 8005022:	b085      	sub	sp, #20
 8005024:	af00      	add	r7, sp, #0
 8005026:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	f003 0307 	and.w	r3, r3, #7
 800502e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005030:	4b0c      	ldr	r3, [pc, #48]	; (8005064 <__NVIC_SetPriorityGrouping+0x44>)
 8005032:	68db      	ldr	r3, [r3, #12]
 8005034:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005036:	68ba      	ldr	r2, [r7, #8]
 8005038:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800503c:	4013      	ands	r3, r2
 800503e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005044:	68bb      	ldr	r3, [r7, #8]
 8005046:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005048:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800504c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005050:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005052:	4a04      	ldr	r2, [pc, #16]	; (8005064 <__NVIC_SetPriorityGrouping+0x44>)
 8005054:	68bb      	ldr	r3, [r7, #8]
 8005056:	60d3      	str	r3, [r2, #12]
}
 8005058:	bf00      	nop
 800505a:	3714      	adds	r7, #20
 800505c:	46bd      	mov	sp, r7
 800505e:	bc80      	pop	{r7}
 8005060:	4770      	bx	lr
 8005062:	bf00      	nop
 8005064:	e000ed00 	.word	0xe000ed00

08005068 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005068:	b480      	push	{r7}
 800506a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800506c:	4b04      	ldr	r3, [pc, #16]	; (8005080 <__NVIC_GetPriorityGrouping+0x18>)
 800506e:	68db      	ldr	r3, [r3, #12]
 8005070:	0a1b      	lsrs	r3, r3, #8
 8005072:	f003 0307 	and.w	r3, r3, #7
}
 8005076:	4618      	mov	r0, r3
 8005078:	46bd      	mov	sp, r7
 800507a:	bc80      	pop	{r7}
 800507c:	4770      	bx	lr
 800507e:	bf00      	nop
 8005080:	e000ed00 	.word	0xe000ed00

08005084 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005084:	b480      	push	{r7}
 8005086:	b083      	sub	sp, #12
 8005088:	af00      	add	r7, sp, #0
 800508a:	4603      	mov	r3, r0
 800508c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800508e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005092:	2b00      	cmp	r3, #0
 8005094:	db0b      	blt.n	80050ae <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005096:	79fb      	ldrb	r3, [r7, #7]
 8005098:	f003 021f 	and.w	r2, r3, #31
 800509c:	4906      	ldr	r1, [pc, #24]	; (80050b8 <__NVIC_EnableIRQ+0x34>)
 800509e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80050a2:	095b      	lsrs	r3, r3, #5
 80050a4:	2001      	movs	r0, #1
 80050a6:	fa00 f202 	lsl.w	r2, r0, r2
 80050aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80050ae:	bf00      	nop
 80050b0:	370c      	adds	r7, #12
 80050b2:	46bd      	mov	sp, r7
 80050b4:	bc80      	pop	{r7}
 80050b6:	4770      	bx	lr
 80050b8:	e000e100 	.word	0xe000e100

080050bc <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80050bc:	b480      	push	{r7}
 80050be:	b083      	sub	sp, #12
 80050c0:	af00      	add	r7, sp, #0
 80050c2:	4603      	mov	r3, r0
 80050c4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80050c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	db12      	blt.n	80050f4 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80050ce:	79fb      	ldrb	r3, [r7, #7]
 80050d0:	f003 021f 	and.w	r2, r3, #31
 80050d4:	490a      	ldr	r1, [pc, #40]	; (8005100 <__NVIC_DisableIRQ+0x44>)
 80050d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80050da:	095b      	lsrs	r3, r3, #5
 80050dc:	2001      	movs	r0, #1
 80050de:	fa00 f202 	lsl.w	r2, r0, r2
 80050e2:	3320      	adds	r3, #32
 80050e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 80050e8:	f3bf 8f4f 	dsb	sy
}
 80050ec:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80050ee:	f3bf 8f6f 	isb	sy
}
 80050f2:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80050f4:	bf00      	nop
 80050f6:	370c      	adds	r7, #12
 80050f8:	46bd      	mov	sp, r7
 80050fa:	bc80      	pop	{r7}
 80050fc:	4770      	bx	lr
 80050fe:	bf00      	nop
 8005100:	e000e100 	.word	0xe000e100

08005104 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005104:	b480      	push	{r7}
 8005106:	b083      	sub	sp, #12
 8005108:	af00      	add	r7, sp, #0
 800510a:	4603      	mov	r3, r0
 800510c:	6039      	str	r1, [r7, #0]
 800510e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005110:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005114:	2b00      	cmp	r3, #0
 8005116:	db0a      	blt.n	800512e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005118:	683b      	ldr	r3, [r7, #0]
 800511a:	b2da      	uxtb	r2, r3
 800511c:	490c      	ldr	r1, [pc, #48]	; (8005150 <__NVIC_SetPriority+0x4c>)
 800511e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005122:	0112      	lsls	r2, r2, #4
 8005124:	b2d2      	uxtb	r2, r2
 8005126:	440b      	add	r3, r1
 8005128:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800512c:	e00a      	b.n	8005144 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800512e:	683b      	ldr	r3, [r7, #0]
 8005130:	b2da      	uxtb	r2, r3
 8005132:	4908      	ldr	r1, [pc, #32]	; (8005154 <__NVIC_SetPriority+0x50>)
 8005134:	79fb      	ldrb	r3, [r7, #7]
 8005136:	f003 030f 	and.w	r3, r3, #15
 800513a:	3b04      	subs	r3, #4
 800513c:	0112      	lsls	r2, r2, #4
 800513e:	b2d2      	uxtb	r2, r2
 8005140:	440b      	add	r3, r1
 8005142:	761a      	strb	r2, [r3, #24]
}
 8005144:	bf00      	nop
 8005146:	370c      	adds	r7, #12
 8005148:	46bd      	mov	sp, r7
 800514a:	bc80      	pop	{r7}
 800514c:	4770      	bx	lr
 800514e:	bf00      	nop
 8005150:	e000e100 	.word	0xe000e100
 8005154:	e000ed00 	.word	0xe000ed00

08005158 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005158:	b480      	push	{r7}
 800515a:	b089      	sub	sp, #36	; 0x24
 800515c:	af00      	add	r7, sp, #0
 800515e:	60f8      	str	r0, [r7, #12]
 8005160:	60b9      	str	r1, [r7, #8]
 8005162:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	f003 0307 	and.w	r3, r3, #7
 800516a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800516c:	69fb      	ldr	r3, [r7, #28]
 800516e:	f1c3 0307 	rsb	r3, r3, #7
 8005172:	2b04      	cmp	r3, #4
 8005174:	bf28      	it	cs
 8005176:	2304      	movcs	r3, #4
 8005178:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800517a:	69fb      	ldr	r3, [r7, #28]
 800517c:	3304      	adds	r3, #4
 800517e:	2b06      	cmp	r3, #6
 8005180:	d902      	bls.n	8005188 <NVIC_EncodePriority+0x30>
 8005182:	69fb      	ldr	r3, [r7, #28]
 8005184:	3b03      	subs	r3, #3
 8005186:	e000      	b.n	800518a <NVIC_EncodePriority+0x32>
 8005188:	2300      	movs	r3, #0
 800518a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800518c:	f04f 32ff 	mov.w	r2, #4294967295
 8005190:	69bb      	ldr	r3, [r7, #24]
 8005192:	fa02 f303 	lsl.w	r3, r2, r3
 8005196:	43da      	mvns	r2, r3
 8005198:	68bb      	ldr	r3, [r7, #8]
 800519a:	401a      	ands	r2, r3
 800519c:	697b      	ldr	r3, [r7, #20]
 800519e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80051a0:	f04f 31ff 	mov.w	r1, #4294967295
 80051a4:	697b      	ldr	r3, [r7, #20]
 80051a6:	fa01 f303 	lsl.w	r3, r1, r3
 80051aa:	43d9      	mvns	r1, r3
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80051b0:	4313      	orrs	r3, r2
         );
}
 80051b2:	4618      	mov	r0, r3
 80051b4:	3724      	adds	r7, #36	; 0x24
 80051b6:	46bd      	mov	sp, r7
 80051b8:	bc80      	pop	{r7}
 80051ba:	4770      	bx	lr

080051bc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80051bc:	b580      	push	{r7, lr}
 80051be:	b082      	sub	sp, #8
 80051c0:	af00      	add	r7, sp, #0
 80051c2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	3b01      	subs	r3, #1
 80051c8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80051cc:	d301      	bcc.n	80051d2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80051ce:	2301      	movs	r3, #1
 80051d0:	e00f      	b.n	80051f2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80051d2:	4a0a      	ldr	r2, [pc, #40]	; (80051fc <SysTick_Config+0x40>)
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	3b01      	subs	r3, #1
 80051d8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80051da:	210f      	movs	r1, #15
 80051dc:	f04f 30ff 	mov.w	r0, #4294967295
 80051e0:	f7ff ff90 	bl	8005104 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80051e4:	4b05      	ldr	r3, [pc, #20]	; (80051fc <SysTick_Config+0x40>)
 80051e6:	2200      	movs	r2, #0
 80051e8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80051ea:	4b04      	ldr	r3, [pc, #16]	; (80051fc <SysTick_Config+0x40>)
 80051ec:	2207      	movs	r2, #7
 80051ee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80051f0:	2300      	movs	r3, #0
}
 80051f2:	4618      	mov	r0, r3
 80051f4:	3708      	adds	r7, #8
 80051f6:	46bd      	mov	sp, r7
 80051f8:	bd80      	pop	{r7, pc}
 80051fa:	bf00      	nop
 80051fc:	e000e010 	.word	0xe000e010

08005200 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005200:	b580      	push	{r7, lr}
 8005202:	b082      	sub	sp, #8
 8005204:	af00      	add	r7, sp, #0
 8005206:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005208:	6878      	ldr	r0, [r7, #4]
 800520a:	f7ff ff09 	bl	8005020 <__NVIC_SetPriorityGrouping>
}
 800520e:	bf00      	nop
 8005210:	3708      	adds	r7, #8
 8005212:	46bd      	mov	sp, r7
 8005214:	bd80      	pop	{r7, pc}

08005216 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005216:	b580      	push	{r7, lr}
 8005218:	b086      	sub	sp, #24
 800521a:	af00      	add	r7, sp, #0
 800521c:	4603      	mov	r3, r0
 800521e:	60b9      	str	r1, [r7, #8]
 8005220:	607a      	str	r2, [r7, #4]
 8005222:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005224:	2300      	movs	r3, #0
 8005226:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005228:	f7ff ff1e 	bl	8005068 <__NVIC_GetPriorityGrouping>
 800522c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800522e:	687a      	ldr	r2, [r7, #4]
 8005230:	68b9      	ldr	r1, [r7, #8]
 8005232:	6978      	ldr	r0, [r7, #20]
 8005234:	f7ff ff90 	bl	8005158 <NVIC_EncodePriority>
 8005238:	4602      	mov	r2, r0
 800523a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800523e:	4611      	mov	r1, r2
 8005240:	4618      	mov	r0, r3
 8005242:	f7ff ff5f 	bl	8005104 <__NVIC_SetPriority>
}
 8005246:	bf00      	nop
 8005248:	3718      	adds	r7, #24
 800524a:	46bd      	mov	sp, r7
 800524c:	bd80      	pop	{r7, pc}

0800524e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f2xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800524e:	b580      	push	{r7, lr}
 8005250:	b082      	sub	sp, #8
 8005252:	af00      	add	r7, sp, #0
 8005254:	4603      	mov	r3, r0
 8005256:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005258:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800525c:	4618      	mov	r0, r3
 800525e:	f7ff ff11 	bl	8005084 <__NVIC_EnableIRQ>
}
 8005262:	bf00      	nop
 8005264:	3708      	adds	r7, #8
 8005266:	46bd      	mov	sp, r7
 8005268:	bd80      	pop	{r7, pc}

0800526a <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f2xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800526a:	b580      	push	{r7, lr}
 800526c:	b082      	sub	sp, #8
 800526e:	af00      	add	r7, sp, #0
 8005270:	4603      	mov	r3, r0
 8005272:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8005274:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005278:	4618      	mov	r0, r3
 800527a:	f7ff ff1f 	bl	80050bc <__NVIC_DisableIRQ>
}
 800527e:	bf00      	nop
 8005280:	3708      	adds	r7, #8
 8005282:	46bd      	mov	sp, r7
 8005284:	bd80      	pop	{r7, pc}

08005286 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005286:	b580      	push	{r7, lr}
 8005288:	b082      	sub	sp, #8
 800528a:	af00      	add	r7, sp, #0
 800528c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800528e:	6878      	ldr	r0, [r7, #4]
 8005290:	f7ff ff94 	bl	80051bc <SysTick_Config>
 8005294:	4603      	mov	r3, r0
}
 8005296:	4618      	mov	r0, r3
 8005298:	3708      	adds	r7, #8
 800529a:	46bd      	mov	sp, r7
 800529c:	bd80      	pop	{r7, pc}
	...

080052a0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80052a0:	b580      	push	{r7, lr}
 80052a2:	b086      	sub	sp, #24
 80052a4:	af00      	add	r7, sp, #0
 80052a6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80052a8:	2300      	movs	r3, #0
 80052aa:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80052ac:	f7ff fb70 	bl	8004990 <HAL_GetTick>
 80052b0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d101      	bne.n	80052bc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80052b8:	2301      	movs	r3, #1
 80052ba:	e099      	b.n	80053f0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	2202      	movs	r2, #2
 80052c0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	2200      	movs	r2, #0
 80052c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	681a      	ldr	r2, [r3, #0]
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	f022 0201 	bic.w	r2, r2, #1
 80052da:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80052dc:	e00f      	b.n	80052fe <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80052de:	f7ff fb57 	bl	8004990 <HAL_GetTick>
 80052e2:	4602      	mov	r2, r0
 80052e4:	693b      	ldr	r3, [r7, #16]
 80052e6:	1ad3      	subs	r3, r2, r3
 80052e8:	2b05      	cmp	r3, #5
 80052ea:	d908      	bls.n	80052fe <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	2220      	movs	r2, #32
 80052f0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	2203      	movs	r2, #3
 80052f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80052fa:	2303      	movs	r3, #3
 80052fc:	e078      	b.n	80053f0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	f003 0301 	and.w	r3, r3, #1
 8005308:	2b00      	cmp	r3, #0
 800530a:	d1e8      	bne.n	80052de <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005314:	697a      	ldr	r2, [r7, #20]
 8005316:	4b38      	ldr	r3, [pc, #224]	; (80053f8 <HAL_DMA_Init+0x158>)
 8005318:	4013      	ands	r3, r2
 800531a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	685a      	ldr	r2, [r3, #4]
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	689b      	ldr	r3, [r3, #8]
 8005324:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800532a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	691b      	ldr	r3, [r3, #16]
 8005330:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005336:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	699b      	ldr	r3, [r3, #24]
 800533c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005342:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	6a1b      	ldr	r3, [r3, #32]
 8005348:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800534a:	697a      	ldr	r2, [r7, #20]
 800534c:	4313      	orrs	r3, r2
 800534e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005354:	2b04      	cmp	r3, #4
 8005356:	d107      	bne.n	8005368 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005360:	4313      	orrs	r3, r2
 8005362:	697a      	ldr	r2, [r7, #20]
 8005364:	4313      	orrs	r3, r2
 8005366:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	697a      	ldr	r2, [r7, #20]
 800536e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	695b      	ldr	r3, [r3, #20]
 8005376:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005378:	697b      	ldr	r3, [r7, #20]
 800537a:	f023 0307 	bic.w	r3, r3, #7
 800537e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005384:	697a      	ldr	r2, [r7, #20]
 8005386:	4313      	orrs	r3, r2
 8005388:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800538e:	2b04      	cmp	r3, #4
 8005390:	d117      	bne.n	80053c2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005396:	697a      	ldr	r2, [r7, #20]
 8005398:	4313      	orrs	r3, r2
 800539a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d00e      	beq.n	80053c2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80053a4:	6878      	ldr	r0, [r7, #4]
 80053a6:	f000 f9e7 	bl	8005778 <DMA_CheckFifoParam>
 80053aa:	4603      	mov	r3, r0
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d008      	beq.n	80053c2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	2240      	movs	r2, #64	; 0x40
 80053b4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	2201      	movs	r2, #1
 80053ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80053be:	2301      	movs	r3, #1
 80053c0:	e016      	b.n	80053f0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	697a      	ldr	r2, [r7, #20]
 80053c8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80053ca:	6878      	ldr	r0, [r7, #4]
 80053cc:	f000 f9a0 	bl	8005710 <DMA_CalcBaseAndBitshift>
 80053d0:	4603      	mov	r3, r0
 80053d2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80053d8:	223f      	movs	r2, #63	; 0x3f
 80053da:	409a      	lsls	r2, r3
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	2200      	movs	r2, #0
 80053e4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	2201      	movs	r2, #1
 80053ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80053ee:	2300      	movs	r3, #0
}
 80053f0:	4618      	mov	r0, r3
 80053f2:	3718      	adds	r7, #24
 80053f4:	46bd      	mov	sp, r7
 80053f6:	bd80      	pop	{r7, pc}
 80053f8:	f010803f 	.word	0xf010803f

080053fc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80053fc:	b580      	push	{r7, lr}
 80053fe:	b086      	sub	sp, #24
 8005400:	af00      	add	r7, sp, #0
 8005402:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8005404:	2300      	movs	r3, #0
 8005406:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005408:	4b92      	ldr	r3, [pc, #584]	; (8005654 <HAL_DMA_IRQHandler+0x258>)
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	4a92      	ldr	r2, [pc, #584]	; (8005658 <HAL_DMA_IRQHandler+0x25c>)
 800540e:	fba2 2303 	umull	r2, r3, r2, r3
 8005412:	0a9b      	lsrs	r3, r3, #10
 8005414:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800541a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800541c:	693b      	ldr	r3, [r7, #16]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005426:	2208      	movs	r2, #8
 8005428:	409a      	lsls	r2, r3
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	4013      	ands	r3, r2
 800542e:	2b00      	cmp	r3, #0
 8005430:	d01a      	beq.n	8005468 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	f003 0304 	and.w	r3, r3, #4
 800543c:	2b00      	cmp	r3, #0
 800543e:	d013      	beq.n	8005468 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	681a      	ldr	r2, [r3, #0]
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	f022 0204 	bic.w	r2, r2, #4
 800544e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005454:	2208      	movs	r2, #8
 8005456:	409a      	lsls	r2, r3
 8005458:	693b      	ldr	r3, [r7, #16]
 800545a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005460:	f043 0201 	orr.w	r2, r3, #1
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800546c:	2201      	movs	r2, #1
 800546e:	409a      	lsls	r2, r3
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	4013      	ands	r3, r2
 8005474:	2b00      	cmp	r3, #0
 8005476:	d012      	beq.n	800549e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	695b      	ldr	r3, [r3, #20]
 800547e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005482:	2b00      	cmp	r3, #0
 8005484:	d00b      	beq.n	800549e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800548a:	2201      	movs	r2, #1
 800548c:	409a      	lsls	r2, r3
 800548e:	693b      	ldr	r3, [r7, #16]
 8005490:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005496:	f043 0202 	orr.w	r2, r3, #2
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80054a2:	2204      	movs	r2, #4
 80054a4:	409a      	lsls	r2, r3
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	4013      	ands	r3, r2
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d012      	beq.n	80054d4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	f003 0302 	and.w	r3, r3, #2
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d00b      	beq.n	80054d4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80054c0:	2204      	movs	r2, #4
 80054c2:	409a      	lsls	r2, r3
 80054c4:	693b      	ldr	r3, [r7, #16]
 80054c6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054cc:	f043 0204 	orr.w	r2, r3, #4
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80054d8:	2210      	movs	r2, #16
 80054da:	409a      	lsls	r2, r3
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	4013      	ands	r3, r2
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d043      	beq.n	800556c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	f003 0308 	and.w	r3, r3, #8
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d03c      	beq.n	800556c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80054f6:	2210      	movs	r2, #16
 80054f8:	409a      	lsls	r2, r3
 80054fa:	693b      	ldr	r3, [r7, #16]
 80054fc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005508:	2b00      	cmp	r3, #0
 800550a:	d018      	beq.n	800553e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005516:	2b00      	cmp	r3, #0
 8005518:	d108      	bne.n	800552c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800551e:	2b00      	cmp	r3, #0
 8005520:	d024      	beq.n	800556c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005526:	6878      	ldr	r0, [r7, #4]
 8005528:	4798      	blx	r3
 800552a:	e01f      	b.n	800556c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005530:	2b00      	cmp	r3, #0
 8005532:	d01b      	beq.n	800556c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005538:	6878      	ldr	r0, [r7, #4]
 800553a:	4798      	blx	r3
 800553c:	e016      	b.n	800556c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005548:	2b00      	cmp	r3, #0
 800554a:	d107      	bne.n	800555c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	681a      	ldr	r2, [r3, #0]
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	f022 0208 	bic.w	r2, r2, #8
 800555a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005560:	2b00      	cmp	r3, #0
 8005562:	d003      	beq.n	800556c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005568:	6878      	ldr	r0, [r7, #4]
 800556a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005570:	2220      	movs	r2, #32
 8005572:	409a      	lsls	r2, r3
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	4013      	ands	r3, r2
 8005578:	2b00      	cmp	r3, #0
 800557a:	f000 808e 	beq.w	800569a <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	f003 0310 	and.w	r3, r3, #16
 8005588:	2b00      	cmp	r3, #0
 800558a:	f000 8086 	beq.w	800569a <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005592:	2220      	movs	r2, #32
 8005594:	409a      	lsls	r2, r3
 8005596:	693b      	ldr	r3, [r7, #16]
 8005598:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80055a0:	b2db      	uxtb	r3, r3
 80055a2:	2b05      	cmp	r3, #5
 80055a4:	d136      	bne.n	8005614 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	681a      	ldr	r2, [r3, #0]
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	f022 0216 	bic.w	r2, r2, #22
 80055b4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	695a      	ldr	r2, [r3, #20]
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80055c4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d103      	bne.n	80055d6 <HAL_DMA_IRQHandler+0x1da>
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d007      	beq.n	80055e6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	681a      	ldr	r2, [r3, #0]
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	f022 0208 	bic.w	r2, r2, #8
 80055e4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80055ea:	223f      	movs	r2, #63	; 0x3f
 80055ec:	409a      	lsls	r2, r3
 80055ee:	693b      	ldr	r3, [r7, #16]
 80055f0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	2201      	movs	r2, #1
 80055f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	2200      	movs	r2, #0
 80055fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005606:	2b00      	cmp	r3, #0
 8005608:	d07d      	beq.n	8005706 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800560e:	6878      	ldr	r0, [r7, #4]
 8005610:	4798      	blx	r3
        }
        return;
 8005612:	e078      	b.n	8005706 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800561e:	2b00      	cmp	r3, #0
 8005620:	d01c      	beq.n	800565c <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800562c:	2b00      	cmp	r3, #0
 800562e:	d108      	bne.n	8005642 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005634:	2b00      	cmp	r3, #0
 8005636:	d030      	beq.n	800569a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800563c:	6878      	ldr	r0, [r7, #4]
 800563e:	4798      	blx	r3
 8005640:	e02b      	b.n	800569a <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005646:	2b00      	cmp	r3, #0
 8005648:	d027      	beq.n	800569a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800564e:	6878      	ldr	r0, [r7, #4]
 8005650:	4798      	blx	r3
 8005652:	e022      	b.n	800569a <HAL_DMA_IRQHandler+0x29e>
 8005654:	20000024 	.word	0x20000024
 8005658:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005666:	2b00      	cmp	r3, #0
 8005668:	d10f      	bne.n	800568a <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	681a      	ldr	r2, [r3, #0]
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	f022 0210 	bic.w	r2, r2, #16
 8005678:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	2201      	movs	r2, #1
 800567e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	2200      	movs	r2, #0
 8005686:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800568e:	2b00      	cmp	r3, #0
 8005690:	d003      	beq.n	800569a <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005696:	6878      	ldr	r0, [r7, #4]
 8005698:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d032      	beq.n	8005708 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056a6:	f003 0301 	and.w	r3, r3, #1
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d022      	beq.n	80056f4 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	2205      	movs	r2, #5
 80056b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	681a      	ldr	r2, [r3, #0]
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	f022 0201 	bic.w	r2, r2, #1
 80056c4:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80056c6:	68bb      	ldr	r3, [r7, #8]
 80056c8:	3301      	adds	r3, #1
 80056ca:	60bb      	str	r3, [r7, #8]
 80056cc:	697a      	ldr	r2, [r7, #20]
 80056ce:	429a      	cmp	r2, r3
 80056d0:	d307      	bcc.n	80056e2 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	f003 0301 	and.w	r3, r3, #1
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d1f2      	bne.n	80056c6 <HAL_DMA_IRQHandler+0x2ca>
 80056e0:	e000      	b.n	80056e4 <HAL_DMA_IRQHandler+0x2e8>
          break;
 80056e2:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	2201      	movs	r2, #1
 80056e8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	2200      	movs	r2, #0
 80056f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d005      	beq.n	8005708 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005700:	6878      	ldr	r0, [r7, #4]
 8005702:	4798      	blx	r3
 8005704:	e000      	b.n	8005708 <HAL_DMA_IRQHandler+0x30c>
        return;
 8005706:	bf00      	nop
    }
  }
}
 8005708:	3718      	adds	r7, #24
 800570a:	46bd      	mov	sp, r7
 800570c:	bd80      	pop	{r7, pc}
 800570e:	bf00      	nop

08005710 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005710:	b480      	push	{r7}
 8005712:	b085      	sub	sp, #20
 8005714:	af00      	add	r7, sp, #0
 8005716:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	b2db      	uxtb	r3, r3
 800571e:	3b10      	subs	r3, #16
 8005720:	4a13      	ldr	r2, [pc, #76]	; (8005770 <DMA_CalcBaseAndBitshift+0x60>)
 8005722:	fba2 2303 	umull	r2, r3, r2, r3
 8005726:	091b      	lsrs	r3, r3, #4
 8005728:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800572a:	4a12      	ldr	r2, [pc, #72]	; (8005774 <DMA_CalcBaseAndBitshift+0x64>)
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	4413      	add	r3, r2
 8005730:	781b      	ldrb	r3, [r3, #0]
 8005732:	461a      	mov	r2, r3
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	2b03      	cmp	r3, #3
 800573c:	d909      	bls.n	8005752 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8005746:	f023 0303 	bic.w	r3, r3, #3
 800574a:	1d1a      	adds	r2, r3, #4
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	659a      	str	r2, [r3, #88]	; 0x58
 8005750:	e007      	b.n	8005762 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800575a:	f023 0303 	bic.w	r3, r3, #3
 800575e:	687a      	ldr	r2, [r7, #4]
 8005760:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8005766:	4618      	mov	r0, r3
 8005768:	3714      	adds	r7, #20
 800576a:	46bd      	mov	sp, r7
 800576c:	bc80      	pop	{r7}
 800576e:	4770      	bx	lr
 8005770:	aaaaaaab 	.word	0xaaaaaaab
 8005774:	08011ae8 	.word	0x08011ae8

08005778 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005778:	b480      	push	{r7}
 800577a:	b085      	sub	sp, #20
 800577c:	af00      	add	r7, sp, #0
 800577e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005780:	2300      	movs	r3, #0
 8005782:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005788:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	699b      	ldr	r3, [r3, #24]
 800578e:	2b00      	cmp	r3, #0
 8005790:	d11f      	bne.n	80057d2 <DMA_CheckFifoParam+0x5a>
 8005792:	68bb      	ldr	r3, [r7, #8]
 8005794:	2b03      	cmp	r3, #3
 8005796:	d856      	bhi.n	8005846 <DMA_CheckFifoParam+0xce>
 8005798:	a201      	add	r2, pc, #4	; (adr r2, 80057a0 <DMA_CheckFifoParam+0x28>)
 800579a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800579e:	bf00      	nop
 80057a0:	080057b1 	.word	0x080057b1
 80057a4:	080057c3 	.word	0x080057c3
 80057a8:	080057b1 	.word	0x080057b1
 80057ac:	08005847 	.word	0x08005847
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057b4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d046      	beq.n	800584a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80057bc:	2301      	movs	r3, #1
 80057be:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80057c0:	e043      	b.n	800584a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057c6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80057ca:	d140      	bne.n	800584e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80057cc:	2301      	movs	r3, #1
 80057ce:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80057d0:	e03d      	b.n	800584e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	699b      	ldr	r3, [r3, #24]
 80057d6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80057da:	d121      	bne.n	8005820 <DMA_CheckFifoParam+0xa8>
 80057dc:	68bb      	ldr	r3, [r7, #8]
 80057de:	2b03      	cmp	r3, #3
 80057e0:	d837      	bhi.n	8005852 <DMA_CheckFifoParam+0xda>
 80057e2:	a201      	add	r2, pc, #4	; (adr r2, 80057e8 <DMA_CheckFifoParam+0x70>)
 80057e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057e8:	080057f9 	.word	0x080057f9
 80057ec:	080057ff 	.word	0x080057ff
 80057f0:	080057f9 	.word	0x080057f9
 80057f4:	08005811 	.word	0x08005811
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80057f8:	2301      	movs	r3, #1
 80057fa:	73fb      	strb	r3, [r7, #15]
      break;
 80057fc:	e030      	b.n	8005860 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005802:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005806:	2b00      	cmp	r3, #0
 8005808:	d025      	beq.n	8005856 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800580a:	2301      	movs	r3, #1
 800580c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800580e:	e022      	b.n	8005856 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005814:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005818:	d11f      	bne.n	800585a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800581a:	2301      	movs	r3, #1
 800581c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800581e:	e01c      	b.n	800585a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8005820:	68bb      	ldr	r3, [r7, #8]
 8005822:	2b02      	cmp	r3, #2
 8005824:	d903      	bls.n	800582e <DMA_CheckFifoParam+0xb6>
 8005826:	68bb      	ldr	r3, [r7, #8]
 8005828:	2b03      	cmp	r3, #3
 800582a:	d003      	beq.n	8005834 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800582c:	e018      	b.n	8005860 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800582e:	2301      	movs	r3, #1
 8005830:	73fb      	strb	r3, [r7, #15]
      break;
 8005832:	e015      	b.n	8005860 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005838:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800583c:	2b00      	cmp	r3, #0
 800583e:	d00e      	beq.n	800585e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8005840:	2301      	movs	r3, #1
 8005842:	73fb      	strb	r3, [r7, #15]
      break;
 8005844:	e00b      	b.n	800585e <DMA_CheckFifoParam+0xe6>
      break;
 8005846:	bf00      	nop
 8005848:	e00a      	b.n	8005860 <DMA_CheckFifoParam+0xe8>
      break;
 800584a:	bf00      	nop
 800584c:	e008      	b.n	8005860 <DMA_CheckFifoParam+0xe8>
      break;
 800584e:	bf00      	nop
 8005850:	e006      	b.n	8005860 <DMA_CheckFifoParam+0xe8>
      break;
 8005852:	bf00      	nop
 8005854:	e004      	b.n	8005860 <DMA_CheckFifoParam+0xe8>
      break;
 8005856:	bf00      	nop
 8005858:	e002      	b.n	8005860 <DMA_CheckFifoParam+0xe8>
      break;   
 800585a:	bf00      	nop
 800585c:	e000      	b.n	8005860 <DMA_CheckFifoParam+0xe8>
      break;
 800585e:	bf00      	nop
    }
  } 
  
  return status; 
 8005860:	7bfb      	ldrb	r3, [r7, #15]
}
 8005862:	4618      	mov	r0, r3
 8005864:	3714      	adds	r7, #20
 8005866:	46bd      	mov	sp, r7
 8005868:	bc80      	pop	{r7}
 800586a:	4770      	bx	lr

0800586c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800586c:	b480      	push	{r7}
 800586e:	b087      	sub	sp, #28
 8005870:	af00      	add	r7, sp, #0
 8005872:	6078      	str	r0, [r7, #4]
 8005874:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8005876:	2300      	movs	r3, #0
 8005878:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800587a:	e16f      	b.n	8005b5c <HAL_GPIO_Init+0x2f0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800587c:	683b      	ldr	r3, [r7, #0]
 800587e:	681a      	ldr	r2, [r3, #0]
 8005880:	2101      	movs	r1, #1
 8005882:	697b      	ldr	r3, [r7, #20]
 8005884:	fa01 f303 	lsl.w	r3, r1, r3
 8005888:	4013      	ands	r3, r2
 800588a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	2b00      	cmp	r3, #0
 8005890:	f000 8161 	beq.w	8005b56 <HAL_GPIO_Init+0x2ea>
    {
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005894:	683b      	ldr	r3, [r7, #0]
 8005896:	685b      	ldr	r3, [r3, #4]
 8005898:	f003 0303 	and.w	r3, r3, #3
 800589c:	2b01      	cmp	r3, #1
 800589e:	d005      	beq.n	80058ac <HAL_GPIO_Init+0x40>
 80058a0:	683b      	ldr	r3, [r7, #0]
 80058a2:	685b      	ldr	r3, [r3, #4]
 80058a4:	f003 0303 	and.w	r3, r3, #3
 80058a8:	2b02      	cmp	r3, #2
 80058aa:	d130      	bne.n	800590e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	689b      	ldr	r3, [r3, #8]
 80058b0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80058b2:	697b      	ldr	r3, [r7, #20]
 80058b4:	005b      	lsls	r3, r3, #1
 80058b6:	2203      	movs	r2, #3
 80058b8:	fa02 f303 	lsl.w	r3, r2, r3
 80058bc:	43db      	mvns	r3, r3
 80058be:	693a      	ldr	r2, [r7, #16]
 80058c0:	4013      	ands	r3, r2
 80058c2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80058c4:	683b      	ldr	r3, [r7, #0]
 80058c6:	68da      	ldr	r2, [r3, #12]
 80058c8:	697b      	ldr	r3, [r7, #20]
 80058ca:	005b      	lsls	r3, r3, #1
 80058cc:	fa02 f303 	lsl.w	r3, r2, r3
 80058d0:	693a      	ldr	r2, [r7, #16]
 80058d2:	4313      	orrs	r3, r2
 80058d4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	693a      	ldr	r2, [r7, #16]
 80058da:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	685b      	ldr	r3, [r3, #4]
 80058e0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80058e2:	2201      	movs	r2, #1
 80058e4:	697b      	ldr	r3, [r7, #20]
 80058e6:	fa02 f303 	lsl.w	r3, r2, r3
 80058ea:	43db      	mvns	r3, r3
 80058ec:	693a      	ldr	r2, [r7, #16]
 80058ee:	4013      	ands	r3, r2
 80058f0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80058f2:	683b      	ldr	r3, [r7, #0]
 80058f4:	685b      	ldr	r3, [r3, #4]
 80058f6:	091b      	lsrs	r3, r3, #4
 80058f8:	f003 0201 	and.w	r2, r3, #1
 80058fc:	697b      	ldr	r3, [r7, #20]
 80058fe:	fa02 f303 	lsl.w	r3, r2, r3
 8005902:	693a      	ldr	r2, [r7, #16]
 8005904:	4313      	orrs	r3, r2
 8005906:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	693a      	ldr	r2, [r7, #16]
 800590c:	605a      	str	r2, [r3, #4]
      }
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800590e:	683b      	ldr	r3, [r7, #0]
 8005910:	685b      	ldr	r3, [r3, #4]
 8005912:	f003 0303 	and.w	r3, r3, #3
 8005916:	2b03      	cmp	r3, #3
 8005918:	d017      	beq.n	800594a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	68db      	ldr	r3, [r3, #12]
 800591e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8005920:	697b      	ldr	r3, [r7, #20]
 8005922:	005b      	lsls	r3, r3, #1
 8005924:	2203      	movs	r2, #3
 8005926:	fa02 f303 	lsl.w	r3, r2, r3
 800592a:	43db      	mvns	r3, r3
 800592c:	693a      	ldr	r2, [r7, #16]
 800592e:	4013      	ands	r3, r2
 8005930:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8005932:	683b      	ldr	r3, [r7, #0]
 8005934:	689a      	ldr	r2, [r3, #8]
 8005936:	697b      	ldr	r3, [r7, #20]
 8005938:	005b      	lsls	r3, r3, #1
 800593a:	fa02 f303 	lsl.w	r3, r2, r3
 800593e:	693a      	ldr	r2, [r7, #16]
 8005940:	4313      	orrs	r3, r2
 8005942:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	693a      	ldr	r2, [r7, #16]
 8005948:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800594a:	683b      	ldr	r3, [r7, #0]
 800594c:	685b      	ldr	r3, [r3, #4]
 800594e:	f003 0303 	and.w	r3, r3, #3
 8005952:	2b02      	cmp	r3, #2
 8005954:	d123      	bne.n	800599e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8005956:	697b      	ldr	r3, [r7, #20]
 8005958:	08da      	lsrs	r2, r3, #3
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	3208      	adds	r2, #8
 800595e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005962:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8005964:	697b      	ldr	r3, [r7, #20]
 8005966:	f003 0307 	and.w	r3, r3, #7
 800596a:	009b      	lsls	r3, r3, #2
 800596c:	220f      	movs	r2, #15
 800596e:	fa02 f303 	lsl.w	r3, r2, r3
 8005972:	43db      	mvns	r3, r3
 8005974:	693a      	ldr	r2, [r7, #16]
 8005976:	4013      	ands	r3, r2
 8005978:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800597a:	683b      	ldr	r3, [r7, #0]
 800597c:	691a      	ldr	r2, [r3, #16]
 800597e:	697b      	ldr	r3, [r7, #20]
 8005980:	f003 0307 	and.w	r3, r3, #7
 8005984:	009b      	lsls	r3, r3, #2
 8005986:	fa02 f303 	lsl.w	r3, r2, r3
 800598a:	693a      	ldr	r2, [r7, #16]
 800598c:	4313      	orrs	r3, r2
 800598e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8005990:	697b      	ldr	r3, [r7, #20]
 8005992:	08da      	lsrs	r2, r3, #3
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	3208      	adds	r2, #8
 8005998:	6939      	ldr	r1, [r7, #16]
 800599a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80059a4:	697b      	ldr	r3, [r7, #20]
 80059a6:	005b      	lsls	r3, r3, #1
 80059a8:	2203      	movs	r2, #3
 80059aa:	fa02 f303 	lsl.w	r3, r2, r3
 80059ae:	43db      	mvns	r3, r3
 80059b0:	693a      	ldr	r2, [r7, #16]
 80059b2:	4013      	ands	r3, r2
 80059b4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80059b6:	683b      	ldr	r3, [r7, #0]
 80059b8:	685b      	ldr	r3, [r3, #4]
 80059ba:	f003 0203 	and.w	r2, r3, #3
 80059be:	697b      	ldr	r3, [r7, #20]
 80059c0:	005b      	lsls	r3, r3, #1
 80059c2:	fa02 f303 	lsl.w	r3, r2, r3
 80059c6:	693a      	ldr	r2, [r7, #16]
 80059c8:	4313      	orrs	r3, r2
 80059ca:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	693a      	ldr	r2, [r7, #16]
 80059d0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80059d2:	683b      	ldr	r3, [r7, #0]
 80059d4:	685b      	ldr	r3, [r3, #4]
 80059d6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80059da:	2b00      	cmp	r3, #0
 80059dc:	f000 80bb 	beq.w	8005b56 <HAL_GPIO_Init+0x2ea>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80059e0:	2300      	movs	r3, #0
 80059e2:	60bb      	str	r3, [r7, #8]
 80059e4:	4b64      	ldr	r3, [pc, #400]	; (8005b78 <HAL_GPIO_Init+0x30c>)
 80059e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059e8:	4a63      	ldr	r2, [pc, #396]	; (8005b78 <HAL_GPIO_Init+0x30c>)
 80059ea:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80059ee:	6453      	str	r3, [r2, #68]	; 0x44
 80059f0:	4b61      	ldr	r3, [pc, #388]	; (8005b78 <HAL_GPIO_Init+0x30c>)
 80059f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059f4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80059f8:	60bb      	str	r3, [r7, #8]
 80059fa:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80059fc:	4a5f      	ldr	r2, [pc, #380]	; (8005b7c <HAL_GPIO_Init+0x310>)
 80059fe:	697b      	ldr	r3, [r7, #20]
 8005a00:	089b      	lsrs	r3, r3, #2
 8005a02:	3302      	adds	r3, #2
 8005a04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005a08:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8005a0a:	697b      	ldr	r3, [r7, #20]
 8005a0c:	f003 0303 	and.w	r3, r3, #3
 8005a10:	009b      	lsls	r3, r3, #2
 8005a12:	220f      	movs	r2, #15
 8005a14:	fa02 f303 	lsl.w	r3, r2, r3
 8005a18:	43db      	mvns	r3, r3
 8005a1a:	693a      	ldr	r2, [r7, #16]
 8005a1c:	4013      	ands	r3, r2
 8005a1e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	4a57      	ldr	r2, [pc, #348]	; (8005b80 <HAL_GPIO_Init+0x314>)
 8005a24:	4293      	cmp	r3, r2
 8005a26:	d031      	beq.n	8005a8c <HAL_GPIO_Init+0x220>
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	4a56      	ldr	r2, [pc, #344]	; (8005b84 <HAL_GPIO_Init+0x318>)
 8005a2c:	4293      	cmp	r3, r2
 8005a2e:	d02b      	beq.n	8005a88 <HAL_GPIO_Init+0x21c>
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	4a55      	ldr	r2, [pc, #340]	; (8005b88 <HAL_GPIO_Init+0x31c>)
 8005a34:	4293      	cmp	r3, r2
 8005a36:	d025      	beq.n	8005a84 <HAL_GPIO_Init+0x218>
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	4a54      	ldr	r2, [pc, #336]	; (8005b8c <HAL_GPIO_Init+0x320>)
 8005a3c:	4293      	cmp	r3, r2
 8005a3e:	d01f      	beq.n	8005a80 <HAL_GPIO_Init+0x214>
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	4a53      	ldr	r2, [pc, #332]	; (8005b90 <HAL_GPIO_Init+0x324>)
 8005a44:	4293      	cmp	r3, r2
 8005a46:	d019      	beq.n	8005a7c <HAL_GPIO_Init+0x210>
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	4a52      	ldr	r2, [pc, #328]	; (8005b94 <HAL_GPIO_Init+0x328>)
 8005a4c:	4293      	cmp	r3, r2
 8005a4e:	d013      	beq.n	8005a78 <HAL_GPIO_Init+0x20c>
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	4a51      	ldr	r2, [pc, #324]	; (8005b98 <HAL_GPIO_Init+0x32c>)
 8005a54:	4293      	cmp	r3, r2
 8005a56:	d00d      	beq.n	8005a74 <HAL_GPIO_Init+0x208>
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	4a50      	ldr	r2, [pc, #320]	; (8005b9c <HAL_GPIO_Init+0x330>)
 8005a5c:	4293      	cmp	r3, r2
 8005a5e:	d007      	beq.n	8005a70 <HAL_GPIO_Init+0x204>
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	4a4f      	ldr	r2, [pc, #316]	; (8005ba0 <HAL_GPIO_Init+0x334>)
 8005a64:	4293      	cmp	r3, r2
 8005a66:	d101      	bne.n	8005a6c <HAL_GPIO_Init+0x200>
 8005a68:	2308      	movs	r3, #8
 8005a6a:	e010      	b.n	8005a8e <HAL_GPIO_Init+0x222>
 8005a6c:	2309      	movs	r3, #9
 8005a6e:	e00e      	b.n	8005a8e <HAL_GPIO_Init+0x222>
 8005a70:	2307      	movs	r3, #7
 8005a72:	e00c      	b.n	8005a8e <HAL_GPIO_Init+0x222>
 8005a74:	2306      	movs	r3, #6
 8005a76:	e00a      	b.n	8005a8e <HAL_GPIO_Init+0x222>
 8005a78:	2305      	movs	r3, #5
 8005a7a:	e008      	b.n	8005a8e <HAL_GPIO_Init+0x222>
 8005a7c:	2304      	movs	r3, #4
 8005a7e:	e006      	b.n	8005a8e <HAL_GPIO_Init+0x222>
 8005a80:	2303      	movs	r3, #3
 8005a82:	e004      	b.n	8005a8e <HAL_GPIO_Init+0x222>
 8005a84:	2302      	movs	r3, #2
 8005a86:	e002      	b.n	8005a8e <HAL_GPIO_Init+0x222>
 8005a88:	2301      	movs	r3, #1
 8005a8a:	e000      	b.n	8005a8e <HAL_GPIO_Init+0x222>
 8005a8c:	2300      	movs	r3, #0
 8005a8e:	697a      	ldr	r2, [r7, #20]
 8005a90:	f002 0203 	and.w	r2, r2, #3
 8005a94:	0092      	lsls	r2, r2, #2
 8005a96:	4093      	lsls	r3, r2
 8005a98:	461a      	mov	r2, r3
 8005a9a:	693b      	ldr	r3, [r7, #16]
 8005a9c:	4313      	orrs	r3, r2
 8005a9e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8005aa0:	4936      	ldr	r1, [pc, #216]	; (8005b7c <HAL_GPIO_Init+0x310>)
 8005aa2:	697b      	ldr	r3, [r7, #20]
 8005aa4:	089b      	lsrs	r3, r3, #2
 8005aa6:	3302      	adds	r3, #2
 8005aa8:	693a      	ldr	r2, [r7, #16]
 8005aaa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005aae:	4b3d      	ldr	r3, [pc, #244]	; (8005ba4 <HAL_GPIO_Init+0x338>)
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	43db      	mvns	r3, r3
 8005ab8:	693a      	ldr	r2, [r7, #16]
 8005aba:	4013      	ands	r3, r2
 8005abc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8005abe:	683b      	ldr	r3, [r7, #0]
 8005ac0:	685b      	ldr	r3, [r3, #4]
 8005ac2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d003      	beq.n	8005ad2 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8005aca:	693a      	ldr	r2, [r7, #16]
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	4313      	orrs	r3, r2
 8005ad0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8005ad2:	4a34      	ldr	r2, [pc, #208]	; (8005ba4 <HAL_GPIO_Init+0x338>)
 8005ad4:	693b      	ldr	r3, [r7, #16]
 8005ad6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8005ad8:	4b32      	ldr	r3, [pc, #200]	; (8005ba4 <HAL_GPIO_Init+0x338>)
 8005ada:	685b      	ldr	r3, [r3, #4]
 8005adc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	43db      	mvns	r3, r3
 8005ae2:	693a      	ldr	r2, [r7, #16]
 8005ae4:	4013      	ands	r3, r2
 8005ae6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8005ae8:	683b      	ldr	r3, [r7, #0]
 8005aea:	685b      	ldr	r3, [r3, #4]
 8005aec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d003      	beq.n	8005afc <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8005af4:	693a      	ldr	r2, [r7, #16]
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	4313      	orrs	r3, r2
 8005afa:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8005afc:	4a29      	ldr	r2, [pc, #164]	; (8005ba4 <HAL_GPIO_Init+0x338>)
 8005afe:	693b      	ldr	r3, [r7, #16]
 8005b00:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005b02:	4b28      	ldr	r3, [pc, #160]	; (8005ba4 <HAL_GPIO_Init+0x338>)
 8005b04:	689b      	ldr	r3, [r3, #8]
 8005b06:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	43db      	mvns	r3, r3
 8005b0c:	693a      	ldr	r2, [r7, #16]
 8005b0e:	4013      	ands	r3, r2
 8005b10:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8005b12:	683b      	ldr	r3, [r7, #0]
 8005b14:	685b      	ldr	r3, [r3, #4]
 8005b16:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d003      	beq.n	8005b26 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8005b1e:	693a      	ldr	r2, [r7, #16]
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	4313      	orrs	r3, r2
 8005b24:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8005b26:	4a1f      	ldr	r2, [pc, #124]	; (8005ba4 <HAL_GPIO_Init+0x338>)
 8005b28:	693b      	ldr	r3, [r7, #16]
 8005b2a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005b2c:	4b1d      	ldr	r3, [pc, #116]	; (8005ba4 <HAL_GPIO_Init+0x338>)
 8005b2e:	68db      	ldr	r3, [r3, #12]
 8005b30:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	43db      	mvns	r3, r3
 8005b36:	693a      	ldr	r2, [r7, #16]
 8005b38:	4013      	ands	r3, r2
 8005b3a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8005b3c:	683b      	ldr	r3, [r7, #0]
 8005b3e:	685b      	ldr	r3, [r3, #4]
 8005b40:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d003      	beq.n	8005b50 <HAL_GPIO_Init+0x2e4>
        {
          temp |= iocurrent;
 8005b48:	693a      	ldr	r2, [r7, #16]
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	4313      	orrs	r3, r2
 8005b4e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8005b50:	4a14      	ldr	r2, [pc, #80]	; (8005ba4 <HAL_GPIO_Init+0x338>)
 8005b52:	693b      	ldr	r3, [r7, #16]
 8005b54:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8005b56:	697b      	ldr	r3, [r7, #20]
 8005b58:	3301      	adds	r3, #1
 8005b5a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005b5c:	683b      	ldr	r3, [r7, #0]
 8005b5e:	681a      	ldr	r2, [r3, #0]
 8005b60:	697b      	ldr	r3, [r7, #20]
 8005b62:	fa22 f303 	lsr.w	r3, r2, r3
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	f47f ae88 	bne.w	800587c <HAL_GPIO_Init+0x10>
  }
}
 8005b6c:	bf00      	nop
 8005b6e:	bf00      	nop
 8005b70:	371c      	adds	r7, #28
 8005b72:	46bd      	mov	sp, r7
 8005b74:	bc80      	pop	{r7}
 8005b76:	4770      	bx	lr
 8005b78:	40023800 	.word	0x40023800
 8005b7c:	40013800 	.word	0x40013800
 8005b80:	40020000 	.word	0x40020000
 8005b84:	40020400 	.word	0x40020400
 8005b88:	40020800 	.word	0x40020800
 8005b8c:	40020c00 	.word	0x40020c00
 8005b90:	40021000 	.word	0x40021000
 8005b94:	40021400 	.word	0x40021400
 8005b98:	40021800 	.word	0x40021800
 8005b9c:	40021c00 	.word	0x40021c00
 8005ba0:	40022000 	.word	0x40022000
 8005ba4:	40013c00 	.word	0x40013c00

08005ba8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005ba8:	b480      	push	{r7}
 8005baa:	b083      	sub	sp, #12
 8005bac:	af00      	add	r7, sp, #0
 8005bae:	6078      	str	r0, [r7, #4]
 8005bb0:	460b      	mov	r3, r1
 8005bb2:	807b      	strh	r3, [r7, #2]
 8005bb4:	4613      	mov	r3, r2
 8005bb6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005bb8:	787b      	ldrb	r3, [r7, #1]
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d003      	beq.n	8005bc6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005bbe:	887a      	ldrh	r2, [r7, #2]
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005bc4:	e003      	b.n	8005bce <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005bc6:	887b      	ldrh	r3, [r7, #2]
 8005bc8:	041a      	lsls	r2, r3, #16
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	619a      	str	r2, [r3, #24]
}
 8005bce:	bf00      	nop
 8005bd0:	370c      	adds	r7, #12
 8005bd2:	46bd      	mov	sp, r7
 8005bd4:	bc80      	pop	{r7}
 8005bd6:	4770      	bx	lr

08005bd8 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..I) to select the GPIO peripheral. 
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005bd8:	b480      	push	{r7}
 8005bda:	b085      	sub	sp, #20
 8005bdc:	af00      	add	r7, sp, #0
 8005bde:	6078      	str	r0, [r7, #4]
 8005be0:	460b      	mov	r3, r1
 8005be2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	695b      	ldr	r3, [r3, #20]
 8005be8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005bea:	887a      	ldrh	r2, [r7, #2]
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	4013      	ands	r3, r2
 8005bf0:	041a      	lsls	r2, r3, #16
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	43d9      	mvns	r1, r3
 8005bf6:	887b      	ldrh	r3, [r7, #2]
 8005bf8:	400b      	ands	r3, r1
 8005bfa:	431a      	orrs	r2, r3
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	619a      	str	r2, [r3, #24]
}
 8005c00:	bf00      	nop
 8005c02:	3714      	adds	r7, #20
 8005c04:	46bd      	mov	sp, r7
 8005c06:	bc80      	pop	{r7}
 8005c08:	4770      	bx	lr
	...

08005c0c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005c0c:	b580      	push	{r7, lr}
 8005c0e:	b082      	sub	sp, #8
 8005c10:	af00      	add	r7, sp, #0
 8005c12:	4603      	mov	r3, r0
 8005c14:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8005c16:	4b08      	ldr	r3, [pc, #32]	; (8005c38 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005c18:	695a      	ldr	r2, [r3, #20]
 8005c1a:	88fb      	ldrh	r3, [r7, #6]
 8005c1c:	4013      	ands	r3, r2
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d006      	beq.n	8005c30 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005c22:	4a05      	ldr	r2, [pc, #20]	; (8005c38 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005c24:	88fb      	ldrh	r3, [r7, #6]
 8005c26:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005c28:	88fb      	ldrh	r3, [r7, #6]
 8005c2a:	4618      	mov	r0, r3
 8005c2c:	f7fd fe90 	bl	8003950 <HAL_GPIO_EXTI_Callback>
  }
}
 8005c30:	bf00      	nop
 8005c32:	3708      	adds	r7, #8
 8005c34:	46bd      	mov	sp, r7
 8005c36:	bd80      	pop	{r7, pc}
 8005c38:	40013c00 	.word	0x40013c00

08005c3c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005c3c:	b580      	push	{r7, lr}
 8005c3e:	b084      	sub	sp, #16
 8005c40:	af00      	add	r7, sp, #0
 8005c42:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d101      	bne.n	8005c4e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005c4a:	2301      	movs	r3, #1
 8005c4c:	e12b      	b.n	8005ea6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c54:	b2db      	uxtb	r3, r3
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d106      	bne.n	8005c68 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	2200      	movs	r2, #0
 8005c5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005c62:	6878      	ldr	r0, [r7, #4]
 8005c64:	f7fe fb3c 	bl	80042e0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	2224      	movs	r2, #36	; 0x24
 8005c6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	681a      	ldr	r2, [r3, #0]
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	f022 0201 	bic.w	r2, r2, #1
 8005c7e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	681a      	ldr	r2, [r3, #0]
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005c8e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	681a      	ldr	r2, [r3, #0]
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005c9e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005ca0:	f002 fd12 	bl	80086c8 <HAL_RCC_GetPCLK1Freq>
 8005ca4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	685b      	ldr	r3, [r3, #4]
 8005caa:	4a81      	ldr	r2, [pc, #516]	; (8005eb0 <HAL_I2C_Init+0x274>)
 8005cac:	4293      	cmp	r3, r2
 8005cae:	d807      	bhi.n	8005cc0 <HAL_I2C_Init+0x84>
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	4a80      	ldr	r2, [pc, #512]	; (8005eb4 <HAL_I2C_Init+0x278>)
 8005cb4:	4293      	cmp	r3, r2
 8005cb6:	bf94      	ite	ls
 8005cb8:	2301      	movls	r3, #1
 8005cba:	2300      	movhi	r3, #0
 8005cbc:	b2db      	uxtb	r3, r3
 8005cbe:	e006      	b.n	8005cce <HAL_I2C_Init+0x92>
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	4a7d      	ldr	r2, [pc, #500]	; (8005eb8 <HAL_I2C_Init+0x27c>)
 8005cc4:	4293      	cmp	r3, r2
 8005cc6:	bf94      	ite	ls
 8005cc8:	2301      	movls	r3, #1
 8005cca:	2300      	movhi	r3, #0
 8005ccc:	b2db      	uxtb	r3, r3
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d001      	beq.n	8005cd6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005cd2:	2301      	movs	r3, #1
 8005cd4:	e0e7      	b.n	8005ea6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	4a78      	ldr	r2, [pc, #480]	; (8005ebc <HAL_I2C_Init+0x280>)
 8005cda:	fba2 2303 	umull	r2, r3, r2, r3
 8005cde:	0c9b      	lsrs	r3, r3, #18
 8005ce0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	685b      	ldr	r3, [r3, #4]
 8005ce8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	68ba      	ldr	r2, [r7, #8]
 8005cf2:	430a      	orrs	r2, r1
 8005cf4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	6a1b      	ldr	r3, [r3, #32]
 8005cfc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	685b      	ldr	r3, [r3, #4]
 8005d04:	4a6a      	ldr	r2, [pc, #424]	; (8005eb0 <HAL_I2C_Init+0x274>)
 8005d06:	4293      	cmp	r3, r2
 8005d08:	d802      	bhi.n	8005d10 <HAL_I2C_Init+0xd4>
 8005d0a:	68bb      	ldr	r3, [r7, #8]
 8005d0c:	3301      	adds	r3, #1
 8005d0e:	e009      	b.n	8005d24 <HAL_I2C_Init+0xe8>
 8005d10:	68bb      	ldr	r3, [r7, #8]
 8005d12:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8005d16:	fb02 f303 	mul.w	r3, r2, r3
 8005d1a:	4a69      	ldr	r2, [pc, #420]	; (8005ec0 <HAL_I2C_Init+0x284>)
 8005d1c:	fba2 2303 	umull	r2, r3, r2, r3
 8005d20:	099b      	lsrs	r3, r3, #6
 8005d22:	3301      	adds	r3, #1
 8005d24:	687a      	ldr	r2, [r7, #4]
 8005d26:	6812      	ldr	r2, [r2, #0]
 8005d28:	430b      	orrs	r3, r1
 8005d2a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	69db      	ldr	r3, [r3, #28]
 8005d32:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8005d36:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	685b      	ldr	r3, [r3, #4]
 8005d3e:	495c      	ldr	r1, [pc, #368]	; (8005eb0 <HAL_I2C_Init+0x274>)
 8005d40:	428b      	cmp	r3, r1
 8005d42:	d819      	bhi.n	8005d78 <HAL_I2C_Init+0x13c>
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	1e59      	subs	r1, r3, #1
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	685b      	ldr	r3, [r3, #4]
 8005d4c:	005b      	lsls	r3, r3, #1
 8005d4e:	fbb1 f3f3 	udiv	r3, r1, r3
 8005d52:	1c59      	adds	r1, r3, #1
 8005d54:	f640 73fc 	movw	r3, #4092	; 0xffc
 8005d58:	400b      	ands	r3, r1
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d00a      	beq.n	8005d74 <HAL_I2C_Init+0x138>
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	1e59      	subs	r1, r3, #1
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	685b      	ldr	r3, [r3, #4]
 8005d66:	005b      	lsls	r3, r3, #1
 8005d68:	fbb1 f3f3 	udiv	r3, r1, r3
 8005d6c:	3301      	adds	r3, #1
 8005d6e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005d72:	e051      	b.n	8005e18 <HAL_I2C_Init+0x1dc>
 8005d74:	2304      	movs	r3, #4
 8005d76:	e04f      	b.n	8005e18 <HAL_I2C_Init+0x1dc>
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	689b      	ldr	r3, [r3, #8]
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d111      	bne.n	8005da4 <HAL_I2C_Init+0x168>
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	1e58      	subs	r0, r3, #1
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	6859      	ldr	r1, [r3, #4]
 8005d88:	460b      	mov	r3, r1
 8005d8a:	005b      	lsls	r3, r3, #1
 8005d8c:	440b      	add	r3, r1
 8005d8e:	fbb0 f3f3 	udiv	r3, r0, r3
 8005d92:	3301      	adds	r3, #1
 8005d94:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	bf0c      	ite	eq
 8005d9c:	2301      	moveq	r3, #1
 8005d9e:	2300      	movne	r3, #0
 8005da0:	b2db      	uxtb	r3, r3
 8005da2:	e012      	b.n	8005dca <HAL_I2C_Init+0x18e>
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	1e58      	subs	r0, r3, #1
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	6859      	ldr	r1, [r3, #4]
 8005dac:	460b      	mov	r3, r1
 8005dae:	009b      	lsls	r3, r3, #2
 8005db0:	440b      	add	r3, r1
 8005db2:	0099      	lsls	r1, r3, #2
 8005db4:	440b      	add	r3, r1
 8005db6:	fbb0 f3f3 	udiv	r3, r0, r3
 8005dba:	3301      	adds	r3, #1
 8005dbc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	bf0c      	ite	eq
 8005dc4:	2301      	moveq	r3, #1
 8005dc6:	2300      	movne	r3, #0
 8005dc8:	b2db      	uxtb	r3, r3
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d001      	beq.n	8005dd2 <HAL_I2C_Init+0x196>
 8005dce:	2301      	movs	r3, #1
 8005dd0:	e022      	b.n	8005e18 <HAL_I2C_Init+0x1dc>
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	689b      	ldr	r3, [r3, #8]
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d10e      	bne.n	8005df8 <HAL_I2C_Init+0x1bc>
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	1e58      	subs	r0, r3, #1
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	6859      	ldr	r1, [r3, #4]
 8005de2:	460b      	mov	r3, r1
 8005de4:	005b      	lsls	r3, r3, #1
 8005de6:	440b      	add	r3, r1
 8005de8:	fbb0 f3f3 	udiv	r3, r0, r3
 8005dec:	3301      	adds	r3, #1
 8005dee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005df2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005df6:	e00f      	b.n	8005e18 <HAL_I2C_Init+0x1dc>
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	1e58      	subs	r0, r3, #1
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	6859      	ldr	r1, [r3, #4]
 8005e00:	460b      	mov	r3, r1
 8005e02:	009b      	lsls	r3, r3, #2
 8005e04:	440b      	add	r3, r1
 8005e06:	0099      	lsls	r1, r3, #2
 8005e08:	440b      	add	r3, r1
 8005e0a:	fbb0 f3f3 	udiv	r3, r0, r3
 8005e0e:	3301      	adds	r3, #1
 8005e10:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005e14:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005e18:	6879      	ldr	r1, [r7, #4]
 8005e1a:	6809      	ldr	r1, [r1, #0]
 8005e1c:	4313      	orrs	r3, r2
 8005e1e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	69da      	ldr	r2, [r3, #28]
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	6a1b      	ldr	r3, [r3, #32]
 8005e32:	431a      	orrs	r2, r3
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	430a      	orrs	r2, r1
 8005e3a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	689b      	ldr	r3, [r3, #8]
 8005e42:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8005e46:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005e4a:	687a      	ldr	r2, [r7, #4]
 8005e4c:	6911      	ldr	r1, [r2, #16]
 8005e4e:	687a      	ldr	r2, [r7, #4]
 8005e50:	68d2      	ldr	r2, [r2, #12]
 8005e52:	4311      	orrs	r1, r2
 8005e54:	687a      	ldr	r2, [r7, #4]
 8005e56:	6812      	ldr	r2, [r2, #0]
 8005e58:	430b      	orrs	r3, r1
 8005e5a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	68db      	ldr	r3, [r3, #12]
 8005e62:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	695a      	ldr	r2, [r3, #20]
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	699b      	ldr	r3, [r3, #24]
 8005e6e:	431a      	orrs	r2, r3
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	430a      	orrs	r2, r1
 8005e76:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	681a      	ldr	r2, [r3, #0]
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	f042 0201 	orr.w	r2, r2, #1
 8005e86:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	2200      	movs	r2, #0
 8005e8c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	2220      	movs	r2, #32
 8005e92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	2200      	movs	r2, #0
 8005e9a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	2200      	movs	r2, #0
 8005ea0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005ea4:	2300      	movs	r3, #0
}
 8005ea6:	4618      	mov	r0, r3
 8005ea8:	3710      	adds	r7, #16
 8005eaa:	46bd      	mov	sp, r7
 8005eac:	bd80      	pop	{r7, pc}
 8005eae:	bf00      	nop
 8005eb0:	000186a0 	.word	0x000186a0
 8005eb4:	001e847f 	.word	0x001e847f
 8005eb8:	003d08ff 	.word	0x003d08ff
 8005ebc:	431bde83 	.word	0x431bde83
 8005ec0:	10624dd3 	.word	0x10624dd3

08005ec4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005ec4:	b580      	push	{r7, lr}
 8005ec6:	b088      	sub	sp, #32
 8005ec8:	af02      	add	r7, sp, #8
 8005eca:	60f8      	str	r0, [r7, #12]
 8005ecc:	4608      	mov	r0, r1
 8005ece:	4611      	mov	r1, r2
 8005ed0:	461a      	mov	r2, r3
 8005ed2:	4603      	mov	r3, r0
 8005ed4:	817b      	strh	r3, [r7, #10]
 8005ed6:	460b      	mov	r3, r1
 8005ed8:	813b      	strh	r3, [r7, #8]
 8005eda:	4613      	mov	r3, r2
 8005edc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005ede:	f7fe fd57 	bl	8004990 <HAL_GetTick>
 8005ee2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005eea:	b2db      	uxtb	r3, r3
 8005eec:	2b20      	cmp	r3, #32
 8005eee:	f040 80d9 	bne.w	80060a4 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005ef2:	697b      	ldr	r3, [r7, #20]
 8005ef4:	9300      	str	r3, [sp, #0]
 8005ef6:	2319      	movs	r3, #25
 8005ef8:	2201      	movs	r2, #1
 8005efa:	496d      	ldr	r1, [pc, #436]	; (80060b0 <HAL_I2C_Mem_Write+0x1ec>)
 8005efc:	68f8      	ldr	r0, [r7, #12]
 8005efe:	f000 fc7f 	bl	8006800 <I2C_WaitOnFlagUntilTimeout>
 8005f02:	4603      	mov	r3, r0
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d001      	beq.n	8005f0c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8005f08:	2302      	movs	r3, #2
 8005f0a:	e0cc      	b.n	80060a6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005f12:	2b01      	cmp	r3, #1
 8005f14:	d101      	bne.n	8005f1a <HAL_I2C_Mem_Write+0x56>
 8005f16:	2302      	movs	r3, #2
 8005f18:	e0c5      	b.n	80060a6 <HAL_I2C_Mem_Write+0x1e2>
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	2201      	movs	r2, #1
 8005f1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	f003 0301 	and.w	r3, r3, #1
 8005f2c:	2b01      	cmp	r3, #1
 8005f2e:	d007      	beq.n	8005f40 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	681a      	ldr	r2, [r3, #0]
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	f042 0201 	orr.w	r2, r2, #1
 8005f3e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	681a      	ldr	r2, [r3, #0]
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005f4e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	2221      	movs	r2, #33	; 0x21
 8005f54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	2240      	movs	r2, #64	; 0x40
 8005f5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	2200      	movs	r2, #0
 8005f64:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	6a3a      	ldr	r2, [r7, #32]
 8005f6a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005f70:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f76:	b29a      	uxth	r2, r3
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	4a4d      	ldr	r2, [pc, #308]	; (80060b4 <HAL_I2C_Mem_Write+0x1f0>)
 8005f80:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005f82:	88f8      	ldrh	r0, [r7, #6]
 8005f84:	893a      	ldrh	r2, [r7, #8]
 8005f86:	8979      	ldrh	r1, [r7, #10]
 8005f88:	697b      	ldr	r3, [r7, #20]
 8005f8a:	9301      	str	r3, [sp, #4]
 8005f8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f8e:	9300      	str	r3, [sp, #0]
 8005f90:	4603      	mov	r3, r0
 8005f92:	68f8      	ldr	r0, [r7, #12]
 8005f94:	f000 fab6 	bl	8006504 <I2C_RequestMemoryWrite>
 8005f98:	4603      	mov	r3, r0
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d052      	beq.n	8006044 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8005f9e:	2301      	movs	r3, #1
 8005fa0:	e081      	b.n	80060a6 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005fa2:	697a      	ldr	r2, [r7, #20]
 8005fa4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005fa6:	68f8      	ldr	r0, [r7, #12]
 8005fa8:	f000 fd00 	bl	80069ac <I2C_WaitOnTXEFlagUntilTimeout>
 8005fac:	4603      	mov	r3, r0
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d00d      	beq.n	8005fce <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fb6:	2b04      	cmp	r3, #4
 8005fb8:	d107      	bne.n	8005fca <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	681a      	ldr	r2, [r3, #0]
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005fc8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005fca:	2301      	movs	r3, #1
 8005fcc:	e06b      	b.n	80060a6 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fd2:	781a      	ldrb	r2, [r3, #0]
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fde:	1c5a      	adds	r2, r3, #1
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005fe8:	3b01      	subs	r3, #1
 8005fea:	b29a      	uxth	r2, r3
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ff4:	b29b      	uxth	r3, r3
 8005ff6:	3b01      	subs	r3, #1
 8005ff8:	b29a      	uxth	r2, r3
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	695b      	ldr	r3, [r3, #20]
 8006004:	f003 0304 	and.w	r3, r3, #4
 8006008:	2b04      	cmp	r3, #4
 800600a:	d11b      	bne.n	8006044 <HAL_I2C_Mem_Write+0x180>
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006010:	2b00      	cmp	r3, #0
 8006012:	d017      	beq.n	8006044 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006018:	781a      	ldrb	r2, [r3, #0]
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006024:	1c5a      	adds	r2, r3, #1
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800602e:	3b01      	subs	r3, #1
 8006030:	b29a      	uxth	r2, r3
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800603a:	b29b      	uxth	r3, r3
 800603c:	3b01      	subs	r3, #1
 800603e:	b29a      	uxth	r2, r3
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006048:	2b00      	cmp	r3, #0
 800604a:	d1aa      	bne.n	8005fa2 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800604c:	697a      	ldr	r2, [r7, #20]
 800604e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006050:	68f8      	ldr	r0, [r7, #12]
 8006052:	f000 fcec 	bl	8006a2e <I2C_WaitOnBTFFlagUntilTimeout>
 8006056:	4603      	mov	r3, r0
 8006058:	2b00      	cmp	r3, #0
 800605a:	d00d      	beq.n	8006078 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006060:	2b04      	cmp	r3, #4
 8006062:	d107      	bne.n	8006074 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	681a      	ldr	r2, [r3, #0]
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006072:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006074:	2301      	movs	r3, #1
 8006076:	e016      	b.n	80060a6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	681a      	ldr	r2, [r3, #0]
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006086:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	2220      	movs	r2, #32
 800608c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	2200      	movs	r2, #0
 8006094:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	2200      	movs	r2, #0
 800609c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80060a0:	2300      	movs	r3, #0
 80060a2:	e000      	b.n	80060a6 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80060a4:	2302      	movs	r3, #2
  }
}
 80060a6:	4618      	mov	r0, r3
 80060a8:	3718      	adds	r7, #24
 80060aa:	46bd      	mov	sp, r7
 80060ac:	bd80      	pop	{r7, pc}
 80060ae:	bf00      	nop
 80060b0:	00100002 	.word	0x00100002
 80060b4:	ffff0000 	.word	0xffff0000

080060b8 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80060b8:	b580      	push	{r7, lr}
 80060ba:	b08c      	sub	sp, #48	; 0x30
 80060bc:	af02      	add	r7, sp, #8
 80060be:	60f8      	str	r0, [r7, #12]
 80060c0:	4608      	mov	r0, r1
 80060c2:	4611      	mov	r1, r2
 80060c4:	461a      	mov	r2, r3
 80060c6:	4603      	mov	r3, r0
 80060c8:	817b      	strh	r3, [r7, #10]
 80060ca:	460b      	mov	r3, r1
 80060cc:	813b      	strh	r3, [r7, #8]
 80060ce:	4613      	mov	r3, r2
 80060d0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80060d2:	f7fe fc5d 	bl	8004990 <HAL_GetTick>
 80060d6:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80060de:	b2db      	uxtb	r3, r3
 80060e0:	2b20      	cmp	r3, #32
 80060e2:	f040 8208 	bne.w	80064f6 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80060e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060e8:	9300      	str	r3, [sp, #0]
 80060ea:	2319      	movs	r3, #25
 80060ec:	2201      	movs	r2, #1
 80060ee:	497b      	ldr	r1, [pc, #492]	; (80062dc <HAL_I2C_Mem_Read+0x224>)
 80060f0:	68f8      	ldr	r0, [r7, #12]
 80060f2:	f000 fb85 	bl	8006800 <I2C_WaitOnFlagUntilTimeout>
 80060f6:	4603      	mov	r3, r0
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d001      	beq.n	8006100 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80060fc:	2302      	movs	r3, #2
 80060fe:	e1fb      	b.n	80064f8 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006106:	2b01      	cmp	r3, #1
 8006108:	d101      	bne.n	800610e <HAL_I2C_Mem_Read+0x56>
 800610a:	2302      	movs	r3, #2
 800610c:	e1f4      	b.n	80064f8 <HAL_I2C_Mem_Read+0x440>
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	2201      	movs	r2, #1
 8006112:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	f003 0301 	and.w	r3, r3, #1
 8006120:	2b01      	cmp	r3, #1
 8006122:	d007      	beq.n	8006134 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	681a      	ldr	r2, [r3, #0]
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	f042 0201 	orr.w	r2, r2, #1
 8006132:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	681a      	ldr	r2, [r3, #0]
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006142:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	2222      	movs	r2, #34	; 0x22
 8006148:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	2240      	movs	r2, #64	; 0x40
 8006150:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	2200      	movs	r2, #0
 8006158:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800615e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8006164:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800616a:	b29a      	uxth	r2, r3
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	4a5b      	ldr	r2, [pc, #364]	; (80062e0 <HAL_I2C_Mem_Read+0x228>)
 8006174:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006176:	88f8      	ldrh	r0, [r7, #6]
 8006178:	893a      	ldrh	r2, [r7, #8]
 800617a:	8979      	ldrh	r1, [r7, #10]
 800617c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800617e:	9301      	str	r3, [sp, #4]
 8006180:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006182:	9300      	str	r3, [sp, #0]
 8006184:	4603      	mov	r3, r0
 8006186:	68f8      	ldr	r0, [r7, #12]
 8006188:	f000 fa52 	bl	8006630 <I2C_RequestMemoryRead>
 800618c:	4603      	mov	r3, r0
 800618e:	2b00      	cmp	r3, #0
 8006190:	d001      	beq.n	8006196 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8006192:	2301      	movs	r3, #1
 8006194:	e1b0      	b.n	80064f8 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800619a:	2b00      	cmp	r3, #0
 800619c:	d113      	bne.n	80061c6 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800619e:	2300      	movs	r3, #0
 80061a0:	623b      	str	r3, [r7, #32]
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	695b      	ldr	r3, [r3, #20]
 80061a8:	623b      	str	r3, [r7, #32]
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	699b      	ldr	r3, [r3, #24]
 80061b0:	623b      	str	r3, [r7, #32]
 80061b2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	681a      	ldr	r2, [r3, #0]
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80061c2:	601a      	str	r2, [r3, #0]
 80061c4:	e184      	b.n	80064d0 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80061ca:	2b01      	cmp	r3, #1
 80061cc:	d11b      	bne.n	8006206 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	681a      	ldr	r2, [r3, #0]
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80061dc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80061de:	2300      	movs	r3, #0
 80061e0:	61fb      	str	r3, [r7, #28]
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	695b      	ldr	r3, [r3, #20]
 80061e8:	61fb      	str	r3, [r7, #28]
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	699b      	ldr	r3, [r3, #24]
 80061f0:	61fb      	str	r3, [r7, #28]
 80061f2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	681a      	ldr	r2, [r3, #0]
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006202:	601a      	str	r2, [r3, #0]
 8006204:	e164      	b.n	80064d0 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800620a:	2b02      	cmp	r3, #2
 800620c:	d11b      	bne.n	8006246 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	681a      	ldr	r2, [r3, #0]
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800621c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	681a      	ldr	r2, [r3, #0]
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800622c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800622e:	2300      	movs	r3, #0
 8006230:	61bb      	str	r3, [r7, #24]
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	695b      	ldr	r3, [r3, #20]
 8006238:	61bb      	str	r3, [r7, #24]
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	699b      	ldr	r3, [r3, #24]
 8006240:	61bb      	str	r3, [r7, #24]
 8006242:	69bb      	ldr	r3, [r7, #24]
 8006244:	e144      	b.n	80064d0 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006246:	2300      	movs	r3, #0
 8006248:	617b      	str	r3, [r7, #20]
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	695b      	ldr	r3, [r3, #20]
 8006250:	617b      	str	r3, [r7, #20]
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	699b      	ldr	r3, [r3, #24]
 8006258:	617b      	str	r3, [r7, #20]
 800625a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800625c:	e138      	b.n	80064d0 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006262:	2b03      	cmp	r3, #3
 8006264:	f200 80f1 	bhi.w	800644a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800626c:	2b01      	cmp	r3, #1
 800626e:	d123      	bne.n	80062b8 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006270:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006272:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006274:	68f8      	ldr	r0, [r7, #12]
 8006276:	f000 fc1b 	bl	8006ab0 <I2C_WaitOnRXNEFlagUntilTimeout>
 800627a:	4603      	mov	r3, r0
 800627c:	2b00      	cmp	r3, #0
 800627e:	d001      	beq.n	8006284 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8006280:	2301      	movs	r3, #1
 8006282:	e139      	b.n	80064f8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	691a      	ldr	r2, [r3, #16]
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800628e:	b2d2      	uxtb	r2, r2
 8006290:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006296:	1c5a      	adds	r2, r3, #1
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80062a0:	3b01      	subs	r3, #1
 80062a2:	b29a      	uxth	r2, r3
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80062ac:	b29b      	uxth	r3, r3
 80062ae:	3b01      	subs	r3, #1
 80062b0:	b29a      	uxth	r2, r3
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	855a      	strh	r2, [r3, #42]	; 0x2a
 80062b6:	e10b      	b.n	80064d0 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80062bc:	2b02      	cmp	r3, #2
 80062be:	d14e      	bne.n	800635e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80062c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062c2:	9300      	str	r3, [sp, #0]
 80062c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062c6:	2200      	movs	r2, #0
 80062c8:	4906      	ldr	r1, [pc, #24]	; (80062e4 <HAL_I2C_Mem_Read+0x22c>)
 80062ca:	68f8      	ldr	r0, [r7, #12]
 80062cc:	f000 fa98 	bl	8006800 <I2C_WaitOnFlagUntilTimeout>
 80062d0:	4603      	mov	r3, r0
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d008      	beq.n	80062e8 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80062d6:	2301      	movs	r3, #1
 80062d8:	e10e      	b.n	80064f8 <HAL_I2C_Mem_Read+0x440>
 80062da:	bf00      	nop
 80062dc:	00100002 	.word	0x00100002
 80062e0:	ffff0000 	.word	0xffff0000
 80062e4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	681a      	ldr	r2, [r3, #0]
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80062f6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	691a      	ldr	r2, [r3, #16]
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006302:	b2d2      	uxtb	r2, r2
 8006304:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800630a:	1c5a      	adds	r2, r3, #1
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006314:	3b01      	subs	r3, #1
 8006316:	b29a      	uxth	r2, r3
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006320:	b29b      	uxth	r3, r3
 8006322:	3b01      	subs	r3, #1
 8006324:	b29a      	uxth	r2, r3
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	691a      	ldr	r2, [r3, #16]
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006334:	b2d2      	uxtb	r2, r2
 8006336:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800633c:	1c5a      	adds	r2, r3, #1
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006346:	3b01      	subs	r3, #1
 8006348:	b29a      	uxth	r2, r3
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006352:	b29b      	uxth	r3, r3
 8006354:	3b01      	subs	r3, #1
 8006356:	b29a      	uxth	r2, r3
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800635c:	e0b8      	b.n	80064d0 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800635e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006360:	9300      	str	r3, [sp, #0]
 8006362:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006364:	2200      	movs	r2, #0
 8006366:	4966      	ldr	r1, [pc, #408]	; (8006500 <HAL_I2C_Mem_Read+0x448>)
 8006368:	68f8      	ldr	r0, [r7, #12]
 800636a:	f000 fa49 	bl	8006800 <I2C_WaitOnFlagUntilTimeout>
 800636e:	4603      	mov	r3, r0
 8006370:	2b00      	cmp	r3, #0
 8006372:	d001      	beq.n	8006378 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8006374:	2301      	movs	r3, #1
 8006376:	e0bf      	b.n	80064f8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	681a      	ldr	r2, [r3, #0]
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006386:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	691a      	ldr	r2, [r3, #16]
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006392:	b2d2      	uxtb	r2, r2
 8006394:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800639a:	1c5a      	adds	r2, r3, #1
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80063a4:	3b01      	subs	r3, #1
 80063a6:	b29a      	uxth	r2, r3
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80063b0:	b29b      	uxth	r3, r3
 80063b2:	3b01      	subs	r3, #1
 80063b4:	b29a      	uxth	r2, r3
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80063ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063bc:	9300      	str	r3, [sp, #0]
 80063be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063c0:	2200      	movs	r2, #0
 80063c2:	494f      	ldr	r1, [pc, #316]	; (8006500 <HAL_I2C_Mem_Read+0x448>)
 80063c4:	68f8      	ldr	r0, [r7, #12]
 80063c6:	f000 fa1b 	bl	8006800 <I2C_WaitOnFlagUntilTimeout>
 80063ca:	4603      	mov	r3, r0
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d001      	beq.n	80063d4 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80063d0:	2301      	movs	r3, #1
 80063d2:	e091      	b.n	80064f8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	681a      	ldr	r2, [r3, #0]
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80063e2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	691a      	ldr	r2, [r3, #16]
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063ee:	b2d2      	uxtb	r2, r2
 80063f0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063f6:	1c5a      	adds	r2, r3, #1
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006400:	3b01      	subs	r3, #1
 8006402:	b29a      	uxth	r2, r3
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800640c:	b29b      	uxth	r3, r3
 800640e:	3b01      	subs	r3, #1
 8006410:	b29a      	uxth	r2, r3
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	691a      	ldr	r2, [r3, #16]
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006420:	b2d2      	uxtb	r2, r2
 8006422:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006428:	1c5a      	adds	r2, r3, #1
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006432:	3b01      	subs	r3, #1
 8006434:	b29a      	uxth	r2, r3
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800643e:	b29b      	uxth	r3, r3
 8006440:	3b01      	subs	r3, #1
 8006442:	b29a      	uxth	r2, r3
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006448:	e042      	b.n	80064d0 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800644a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800644c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800644e:	68f8      	ldr	r0, [r7, #12]
 8006450:	f000 fb2e 	bl	8006ab0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006454:	4603      	mov	r3, r0
 8006456:	2b00      	cmp	r3, #0
 8006458:	d001      	beq.n	800645e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800645a:	2301      	movs	r3, #1
 800645c:	e04c      	b.n	80064f8 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	691a      	ldr	r2, [r3, #16]
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006468:	b2d2      	uxtb	r2, r2
 800646a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006470:	1c5a      	adds	r2, r3, #1
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800647a:	3b01      	subs	r3, #1
 800647c:	b29a      	uxth	r2, r3
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006486:	b29b      	uxth	r3, r3
 8006488:	3b01      	subs	r3, #1
 800648a:	b29a      	uxth	r2, r3
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	695b      	ldr	r3, [r3, #20]
 8006496:	f003 0304 	and.w	r3, r3, #4
 800649a:	2b04      	cmp	r3, #4
 800649c:	d118      	bne.n	80064d0 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	691a      	ldr	r2, [r3, #16]
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064a8:	b2d2      	uxtb	r2, r2
 80064aa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064b0:	1c5a      	adds	r2, r3, #1
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80064ba:	3b01      	subs	r3, #1
 80064bc:	b29a      	uxth	r2, r3
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80064c6:	b29b      	uxth	r3, r3
 80064c8:	3b01      	subs	r3, #1
 80064ca:	b29a      	uxth	r2, r3
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	f47f aec2 	bne.w	800625e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	2220      	movs	r2, #32
 80064de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	2200      	movs	r2, #0
 80064e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	2200      	movs	r2, #0
 80064ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80064f2:	2300      	movs	r3, #0
 80064f4:	e000      	b.n	80064f8 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 80064f6:	2302      	movs	r3, #2
  }
}
 80064f8:	4618      	mov	r0, r3
 80064fa:	3728      	adds	r7, #40	; 0x28
 80064fc:	46bd      	mov	sp, r7
 80064fe:	bd80      	pop	{r7, pc}
 8006500:	00010004 	.word	0x00010004

08006504 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006504:	b580      	push	{r7, lr}
 8006506:	b088      	sub	sp, #32
 8006508:	af02      	add	r7, sp, #8
 800650a:	60f8      	str	r0, [r7, #12]
 800650c:	4608      	mov	r0, r1
 800650e:	4611      	mov	r1, r2
 8006510:	461a      	mov	r2, r3
 8006512:	4603      	mov	r3, r0
 8006514:	817b      	strh	r3, [r7, #10]
 8006516:	460b      	mov	r3, r1
 8006518:	813b      	strh	r3, [r7, #8]
 800651a:	4613      	mov	r3, r2
 800651c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	681a      	ldr	r2, [r3, #0]
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800652c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800652e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006530:	9300      	str	r3, [sp, #0]
 8006532:	6a3b      	ldr	r3, [r7, #32]
 8006534:	2200      	movs	r2, #0
 8006536:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800653a:	68f8      	ldr	r0, [r7, #12]
 800653c:	f000 f960 	bl	8006800 <I2C_WaitOnFlagUntilTimeout>
 8006540:	4603      	mov	r3, r0
 8006542:	2b00      	cmp	r3, #0
 8006544:	d00d      	beq.n	8006562 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006550:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006554:	d103      	bne.n	800655e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	f44f 7200 	mov.w	r2, #512	; 0x200
 800655c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800655e:	2303      	movs	r3, #3
 8006560:	e05f      	b.n	8006622 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006562:	897b      	ldrh	r3, [r7, #10]
 8006564:	b2db      	uxtb	r3, r3
 8006566:	461a      	mov	r2, r3
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006570:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006572:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006574:	6a3a      	ldr	r2, [r7, #32]
 8006576:	492d      	ldr	r1, [pc, #180]	; (800662c <I2C_RequestMemoryWrite+0x128>)
 8006578:	68f8      	ldr	r0, [r7, #12]
 800657a:	f000 f998 	bl	80068ae <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800657e:	4603      	mov	r3, r0
 8006580:	2b00      	cmp	r3, #0
 8006582:	d001      	beq.n	8006588 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8006584:	2301      	movs	r3, #1
 8006586:	e04c      	b.n	8006622 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006588:	2300      	movs	r3, #0
 800658a:	617b      	str	r3, [r7, #20]
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	695b      	ldr	r3, [r3, #20]
 8006592:	617b      	str	r3, [r7, #20]
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	699b      	ldr	r3, [r3, #24]
 800659a:	617b      	str	r3, [r7, #20]
 800659c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800659e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80065a0:	6a39      	ldr	r1, [r7, #32]
 80065a2:	68f8      	ldr	r0, [r7, #12]
 80065a4:	f000 fa02 	bl	80069ac <I2C_WaitOnTXEFlagUntilTimeout>
 80065a8:	4603      	mov	r3, r0
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d00d      	beq.n	80065ca <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065b2:	2b04      	cmp	r3, #4
 80065b4:	d107      	bne.n	80065c6 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	681a      	ldr	r2, [r3, #0]
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80065c4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80065c6:	2301      	movs	r3, #1
 80065c8:	e02b      	b.n	8006622 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80065ca:	88fb      	ldrh	r3, [r7, #6]
 80065cc:	2b01      	cmp	r3, #1
 80065ce:	d105      	bne.n	80065dc <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80065d0:	893b      	ldrh	r3, [r7, #8]
 80065d2:	b2da      	uxtb	r2, r3
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	611a      	str	r2, [r3, #16]
 80065da:	e021      	b.n	8006620 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80065dc:	893b      	ldrh	r3, [r7, #8]
 80065de:	0a1b      	lsrs	r3, r3, #8
 80065e0:	b29b      	uxth	r3, r3
 80065e2:	b2da      	uxtb	r2, r3
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80065ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80065ec:	6a39      	ldr	r1, [r7, #32]
 80065ee:	68f8      	ldr	r0, [r7, #12]
 80065f0:	f000 f9dc 	bl	80069ac <I2C_WaitOnTXEFlagUntilTimeout>
 80065f4:	4603      	mov	r3, r0
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d00d      	beq.n	8006616 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065fe:	2b04      	cmp	r3, #4
 8006600:	d107      	bne.n	8006612 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	681a      	ldr	r2, [r3, #0]
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006610:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006612:	2301      	movs	r3, #1
 8006614:	e005      	b.n	8006622 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006616:	893b      	ldrh	r3, [r7, #8]
 8006618:	b2da      	uxtb	r2, r3
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8006620:	2300      	movs	r3, #0
}
 8006622:	4618      	mov	r0, r3
 8006624:	3718      	adds	r7, #24
 8006626:	46bd      	mov	sp, r7
 8006628:	bd80      	pop	{r7, pc}
 800662a:	bf00      	nop
 800662c:	00010002 	.word	0x00010002

08006630 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006630:	b580      	push	{r7, lr}
 8006632:	b088      	sub	sp, #32
 8006634:	af02      	add	r7, sp, #8
 8006636:	60f8      	str	r0, [r7, #12]
 8006638:	4608      	mov	r0, r1
 800663a:	4611      	mov	r1, r2
 800663c:	461a      	mov	r2, r3
 800663e:	4603      	mov	r3, r0
 8006640:	817b      	strh	r3, [r7, #10]
 8006642:	460b      	mov	r3, r1
 8006644:	813b      	strh	r3, [r7, #8]
 8006646:	4613      	mov	r3, r2
 8006648:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	681a      	ldr	r2, [r3, #0]
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006658:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	681a      	ldr	r2, [r3, #0]
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006668:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800666a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800666c:	9300      	str	r3, [sp, #0]
 800666e:	6a3b      	ldr	r3, [r7, #32]
 8006670:	2200      	movs	r2, #0
 8006672:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006676:	68f8      	ldr	r0, [r7, #12]
 8006678:	f000 f8c2 	bl	8006800 <I2C_WaitOnFlagUntilTimeout>
 800667c:	4603      	mov	r3, r0
 800667e:	2b00      	cmp	r3, #0
 8006680:	d00d      	beq.n	800669e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800668c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006690:	d103      	bne.n	800669a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006698:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800669a:	2303      	movs	r3, #3
 800669c:	e0aa      	b.n	80067f4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800669e:	897b      	ldrh	r3, [r7, #10]
 80066a0:	b2db      	uxtb	r3, r3
 80066a2:	461a      	mov	r2, r3
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80066ac:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80066ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066b0:	6a3a      	ldr	r2, [r7, #32]
 80066b2:	4952      	ldr	r1, [pc, #328]	; (80067fc <I2C_RequestMemoryRead+0x1cc>)
 80066b4:	68f8      	ldr	r0, [r7, #12]
 80066b6:	f000 f8fa 	bl	80068ae <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80066ba:	4603      	mov	r3, r0
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d001      	beq.n	80066c4 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80066c0:	2301      	movs	r3, #1
 80066c2:	e097      	b.n	80067f4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80066c4:	2300      	movs	r3, #0
 80066c6:	617b      	str	r3, [r7, #20]
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	695b      	ldr	r3, [r3, #20]
 80066ce:	617b      	str	r3, [r7, #20]
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	699b      	ldr	r3, [r3, #24]
 80066d6:	617b      	str	r3, [r7, #20]
 80066d8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80066da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80066dc:	6a39      	ldr	r1, [r7, #32]
 80066de:	68f8      	ldr	r0, [r7, #12]
 80066e0:	f000 f964 	bl	80069ac <I2C_WaitOnTXEFlagUntilTimeout>
 80066e4:	4603      	mov	r3, r0
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d00d      	beq.n	8006706 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066ee:	2b04      	cmp	r3, #4
 80066f0:	d107      	bne.n	8006702 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	681a      	ldr	r2, [r3, #0]
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006700:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006702:	2301      	movs	r3, #1
 8006704:	e076      	b.n	80067f4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006706:	88fb      	ldrh	r3, [r7, #6]
 8006708:	2b01      	cmp	r3, #1
 800670a:	d105      	bne.n	8006718 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800670c:	893b      	ldrh	r3, [r7, #8]
 800670e:	b2da      	uxtb	r2, r3
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	611a      	str	r2, [r3, #16]
 8006716:	e021      	b.n	800675c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006718:	893b      	ldrh	r3, [r7, #8]
 800671a:	0a1b      	lsrs	r3, r3, #8
 800671c:	b29b      	uxth	r3, r3
 800671e:	b2da      	uxtb	r2, r3
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006726:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006728:	6a39      	ldr	r1, [r7, #32]
 800672a:	68f8      	ldr	r0, [r7, #12]
 800672c:	f000 f93e 	bl	80069ac <I2C_WaitOnTXEFlagUntilTimeout>
 8006730:	4603      	mov	r3, r0
 8006732:	2b00      	cmp	r3, #0
 8006734:	d00d      	beq.n	8006752 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800673a:	2b04      	cmp	r3, #4
 800673c:	d107      	bne.n	800674e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	681a      	ldr	r2, [r3, #0]
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800674c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800674e:	2301      	movs	r3, #1
 8006750:	e050      	b.n	80067f4 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006752:	893b      	ldrh	r3, [r7, #8]
 8006754:	b2da      	uxtb	r2, r3
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800675c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800675e:	6a39      	ldr	r1, [r7, #32]
 8006760:	68f8      	ldr	r0, [r7, #12]
 8006762:	f000 f923 	bl	80069ac <I2C_WaitOnTXEFlagUntilTimeout>
 8006766:	4603      	mov	r3, r0
 8006768:	2b00      	cmp	r3, #0
 800676a:	d00d      	beq.n	8006788 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006770:	2b04      	cmp	r3, #4
 8006772:	d107      	bne.n	8006784 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	681a      	ldr	r2, [r3, #0]
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006782:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006784:	2301      	movs	r3, #1
 8006786:	e035      	b.n	80067f4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	681a      	ldr	r2, [r3, #0]
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006796:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800679a:	9300      	str	r3, [sp, #0]
 800679c:	6a3b      	ldr	r3, [r7, #32]
 800679e:	2200      	movs	r2, #0
 80067a0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80067a4:	68f8      	ldr	r0, [r7, #12]
 80067a6:	f000 f82b 	bl	8006800 <I2C_WaitOnFlagUntilTimeout>
 80067aa:	4603      	mov	r3, r0
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d00d      	beq.n	80067cc <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80067ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80067be:	d103      	bne.n	80067c8 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80067c6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80067c8:	2303      	movs	r3, #3
 80067ca:	e013      	b.n	80067f4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80067cc:	897b      	ldrh	r3, [r7, #10]
 80067ce:	b2db      	uxtb	r3, r3
 80067d0:	f043 0301 	orr.w	r3, r3, #1
 80067d4:	b2da      	uxtb	r2, r3
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80067dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067de:	6a3a      	ldr	r2, [r7, #32]
 80067e0:	4906      	ldr	r1, [pc, #24]	; (80067fc <I2C_RequestMemoryRead+0x1cc>)
 80067e2:	68f8      	ldr	r0, [r7, #12]
 80067e4:	f000 f863 	bl	80068ae <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80067e8:	4603      	mov	r3, r0
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d001      	beq.n	80067f2 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80067ee:	2301      	movs	r3, #1
 80067f0:	e000      	b.n	80067f4 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80067f2:	2300      	movs	r3, #0
}
 80067f4:	4618      	mov	r0, r3
 80067f6:	3718      	adds	r7, #24
 80067f8:	46bd      	mov	sp, r7
 80067fa:	bd80      	pop	{r7, pc}
 80067fc:	00010002 	.word	0x00010002

08006800 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8006800:	b580      	push	{r7, lr}
 8006802:	b084      	sub	sp, #16
 8006804:	af00      	add	r7, sp, #0
 8006806:	60f8      	str	r0, [r7, #12]
 8006808:	60b9      	str	r1, [r7, #8]
 800680a:	603b      	str	r3, [r7, #0]
 800680c:	4613      	mov	r3, r2
 800680e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006810:	e025      	b.n	800685e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006812:	683b      	ldr	r3, [r7, #0]
 8006814:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006818:	d021      	beq.n	800685e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800681a:	f7fe f8b9 	bl	8004990 <HAL_GetTick>
 800681e:	4602      	mov	r2, r0
 8006820:	69bb      	ldr	r3, [r7, #24]
 8006822:	1ad3      	subs	r3, r2, r3
 8006824:	683a      	ldr	r2, [r7, #0]
 8006826:	429a      	cmp	r2, r3
 8006828:	d302      	bcc.n	8006830 <I2C_WaitOnFlagUntilTimeout+0x30>
 800682a:	683b      	ldr	r3, [r7, #0]
 800682c:	2b00      	cmp	r3, #0
 800682e:	d116      	bne.n	800685e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	2200      	movs	r2, #0
 8006834:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	2220      	movs	r2, #32
 800683a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	2200      	movs	r2, #0
 8006842:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800684a:	f043 0220 	orr.w	r2, r3, #32
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	2200      	movs	r2, #0
 8006856:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800685a:	2301      	movs	r3, #1
 800685c:	e023      	b.n	80068a6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800685e:	68bb      	ldr	r3, [r7, #8]
 8006860:	0c1b      	lsrs	r3, r3, #16
 8006862:	b2db      	uxtb	r3, r3
 8006864:	2b01      	cmp	r3, #1
 8006866:	d10d      	bne.n	8006884 <I2C_WaitOnFlagUntilTimeout+0x84>
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	695b      	ldr	r3, [r3, #20]
 800686e:	43da      	mvns	r2, r3
 8006870:	68bb      	ldr	r3, [r7, #8]
 8006872:	4013      	ands	r3, r2
 8006874:	b29b      	uxth	r3, r3
 8006876:	2b00      	cmp	r3, #0
 8006878:	bf0c      	ite	eq
 800687a:	2301      	moveq	r3, #1
 800687c:	2300      	movne	r3, #0
 800687e:	b2db      	uxtb	r3, r3
 8006880:	461a      	mov	r2, r3
 8006882:	e00c      	b.n	800689e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	699b      	ldr	r3, [r3, #24]
 800688a:	43da      	mvns	r2, r3
 800688c:	68bb      	ldr	r3, [r7, #8]
 800688e:	4013      	ands	r3, r2
 8006890:	b29b      	uxth	r3, r3
 8006892:	2b00      	cmp	r3, #0
 8006894:	bf0c      	ite	eq
 8006896:	2301      	moveq	r3, #1
 8006898:	2300      	movne	r3, #0
 800689a:	b2db      	uxtb	r3, r3
 800689c:	461a      	mov	r2, r3
 800689e:	79fb      	ldrb	r3, [r7, #7]
 80068a0:	429a      	cmp	r2, r3
 80068a2:	d0b6      	beq.n	8006812 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80068a4:	2300      	movs	r3, #0
}
 80068a6:	4618      	mov	r0, r3
 80068a8:	3710      	adds	r7, #16
 80068aa:	46bd      	mov	sp, r7
 80068ac:	bd80      	pop	{r7, pc}

080068ae <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80068ae:	b580      	push	{r7, lr}
 80068b0:	b084      	sub	sp, #16
 80068b2:	af00      	add	r7, sp, #0
 80068b4:	60f8      	str	r0, [r7, #12]
 80068b6:	60b9      	str	r1, [r7, #8]
 80068b8:	607a      	str	r2, [r7, #4]
 80068ba:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80068bc:	e051      	b.n	8006962 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	695b      	ldr	r3, [r3, #20]
 80068c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80068c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80068cc:	d123      	bne.n	8006916 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	681a      	ldr	r2, [r3, #0]
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80068dc:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80068e6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	2200      	movs	r2, #0
 80068ec:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	2220      	movs	r2, #32
 80068f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	2200      	movs	r2, #0
 80068fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006902:	f043 0204 	orr.w	r2, r3, #4
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	2200      	movs	r2, #0
 800690e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006912:	2301      	movs	r3, #1
 8006914:	e046      	b.n	80069a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	f1b3 3fff 	cmp.w	r3, #4294967295
 800691c:	d021      	beq.n	8006962 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800691e:	f7fe f837 	bl	8004990 <HAL_GetTick>
 8006922:	4602      	mov	r2, r0
 8006924:	683b      	ldr	r3, [r7, #0]
 8006926:	1ad3      	subs	r3, r2, r3
 8006928:	687a      	ldr	r2, [r7, #4]
 800692a:	429a      	cmp	r2, r3
 800692c:	d302      	bcc.n	8006934 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	2b00      	cmp	r3, #0
 8006932:	d116      	bne.n	8006962 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	2200      	movs	r2, #0
 8006938:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	2220      	movs	r2, #32
 800693e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	2200      	movs	r2, #0
 8006946:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800694e:	f043 0220 	orr.w	r2, r3, #32
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	2200      	movs	r2, #0
 800695a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800695e:	2301      	movs	r3, #1
 8006960:	e020      	b.n	80069a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006962:	68bb      	ldr	r3, [r7, #8]
 8006964:	0c1b      	lsrs	r3, r3, #16
 8006966:	b2db      	uxtb	r3, r3
 8006968:	2b01      	cmp	r3, #1
 800696a:	d10c      	bne.n	8006986 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	695b      	ldr	r3, [r3, #20]
 8006972:	43da      	mvns	r2, r3
 8006974:	68bb      	ldr	r3, [r7, #8]
 8006976:	4013      	ands	r3, r2
 8006978:	b29b      	uxth	r3, r3
 800697a:	2b00      	cmp	r3, #0
 800697c:	bf14      	ite	ne
 800697e:	2301      	movne	r3, #1
 8006980:	2300      	moveq	r3, #0
 8006982:	b2db      	uxtb	r3, r3
 8006984:	e00b      	b.n	800699e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	699b      	ldr	r3, [r3, #24]
 800698c:	43da      	mvns	r2, r3
 800698e:	68bb      	ldr	r3, [r7, #8]
 8006990:	4013      	ands	r3, r2
 8006992:	b29b      	uxth	r3, r3
 8006994:	2b00      	cmp	r3, #0
 8006996:	bf14      	ite	ne
 8006998:	2301      	movne	r3, #1
 800699a:	2300      	moveq	r3, #0
 800699c:	b2db      	uxtb	r3, r3
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d18d      	bne.n	80068be <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80069a2:	2300      	movs	r3, #0
}
 80069a4:	4618      	mov	r0, r3
 80069a6:	3710      	adds	r7, #16
 80069a8:	46bd      	mov	sp, r7
 80069aa:	bd80      	pop	{r7, pc}

080069ac <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80069ac:	b580      	push	{r7, lr}
 80069ae:	b084      	sub	sp, #16
 80069b0:	af00      	add	r7, sp, #0
 80069b2:	60f8      	str	r0, [r7, #12]
 80069b4:	60b9      	str	r1, [r7, #8]
 80069b6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80069b8:	e02d      	b.n	8006a16 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80069ba:	68f8      	ldr	r0, [r7, #12]
 80069bc:	f000 f8ce 	bl	8006b5c <I2C_IsAcknowledgeFailed>
 80069c0:	4603      	mov	r3, r0
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d001      	beq.n	80069ca <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80069c6:	2301      	movs	r3, #1
 80069c8:	e02d      	b.n	8006a26 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80069ca:	68bb      	ldr	r3, [r7, #8]
 80069cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069d0:	d021      	beq.n	8006a16 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80069d2:	f7fd ffdd 	bl	8004990 <HAL_GetTick>
 80069d6:	4602      	mov	r2, r0
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	1ad3      	subs	r3, r2, r3
 80069dc:	68ba      	ldr	r2, [r7, #8]
 80069de:	429a      	cmp	r2, r3
 80069e0:	d302      	bcc.n	80069e8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80069e2:	68bb      	ldr	r3, [r7, #8]
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d116      	bne.n	8006a16 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	2200      	movs	r2, #0
 80069ec:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	2220      	movs	r2, #32
 80069f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	2200      	movs	r2, #0
 80069fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a02:	f043 0220 	orr.w	r2, r3, #32
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	2200      	movs	r2, #0
 8006a0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006a12:	2301      	movs	r3, #1
 8006a14:	e007      	b.n	8006a26 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	695b      	ldr	r3, [r3, #20]
 8006a1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a20:	2b80      	cmp	r3, #128	; 0x80
 8006a22:	d1ca      	bne.n	80069ba <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006a24:	2300      	movs	r3, #0
}
 8006a26:	4618      	mov	r0, r3
 8006a28:	3710      	adds	r7, #16
 8006a2a:	46bd      	mov	sp, r7
 8006a2c:	bd80      	pop	{r7, pc}

08006a2e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006a2e:	b580      	push	{r7, lr}
 8006a30:	b084      	sub	sp, #16
 8006a32:	af00      	add	r7, sp, #0
 8006a34:	60f8      	str	r0, [r7, #12]
 8006a36:	60b9      	str	r1, [r7, #8]
 8006a38:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006a3a:	e02d      	b.n	8006a98 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006a3c:	68f8      	ldr	r0, [r7, #12]
 8006a3e:	f000 f88d 	bl	8006b5c <I2C_IsAcknowledgeFailed>
 8006a42:	4603      	mov	r3, r0
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d001      	beq.n	8006a4c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006a48:	2301      	movs	r3, #1
 8006a4a:	e02d      	b.n	8006aa8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006a4c:	68bb      	ldr	r3, [r7, #8]
 8006a4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a52:	d021      	beq.n	8006a98 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006a54:	f7fd ff9c 	bl	8004990 <HAL_GetTick>
 8006a58:	4602      	mov	r2, r0
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	1ad3      	subs	r3, r2, r3
 8006a5e:	68ba      	ldr	r2, [r7, #8]
 8006a60:	429a      	cmp	r2, r3
 8006a62:	d302      	bcc.n	8006a6a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8006a64:	68bb      	ldr	r3, [r7, #8]
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d116      	bne.n	8006a98 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	2200      	movs	r2, #0
 8006a6e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	2220      	movs	r2, #32
 8006a74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	2200      	movs	r2, #0
 8006a7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a84:	f043 0220 	orr.w	r2, r3, #32
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	2200      	movs	r2, #0
 8006a90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006a94:	2301      	movs	r3, #1
 8006a96:	e007      	b.n	8006aa8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	695b      	ldr	r3, [r3, #20]
 8006a9e:	f003 0304 	and.w	r3, r3, #4
 8006aa2:	2b04      	cmp	r3, #4
 8006aa4:	d1ca      	bne.n	8006a3c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006aa6:	2300      	movs	r3, #0
}
 8006aa8:	4618      	mov	r0, r3
 8006aaa:	3710      	adds	r7, #16
 8006aac:	46bd      	mov	sp, r7
 8006aae:	bd80      	pop	{r7, pc}

08006ab0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006ab0:	b580      	push	{r7, lr}
 8006ab2:	b084      	sub	sp, #16
 8006ab4:	af00      	add	r7, sp, #0
 8006ab6:	60f8      	str	r0, [r7, #12]
 8006ab8:	60b9      	str	r1, [r7, #8]
 8006aba:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006abc:	e042      	b.n	8006b44 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	695b      	ldr	r3, [r3, #20]
 8006ac4:	f003 0310 	and.w	r3, r3, #16
 8006ac8:	2b10      	cmp	r3, #16
 8006aca:	d119      	bne.n	8006b00 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	f06f 0210 	mvn.w	r2, #16
 8006ad4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	2200      	movs	r2, #0
 8006ada:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	2220      	movs	r2, #32
 8006ae0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	2200      	movs	r2, #0
 8006ae8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	2200      	movs	r2, #0
 8006af8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006afc:	2301      	movs	r3, #1
 8006afe:	e029      	b.n	8006b54 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006b00:	f7fd ff46 	bl	8004990 <HAL_GetTick>
 8006b04:	4602      	mov	r2, r0
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	1ad3      	subs	r3, r2, r3
 8006b0a:	68ba      	ldr	r2, [r7, #8]
 8006b0c:	429a      	cmp	r2, r3
 8006b0e:	d302      	bcc.n	8006b16 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8006b10:	68bb      	ldr	r3, [r7, #8]
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d116      	bne.n	8006b44 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	2200      	movs	r2, #0
 8006b1a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	2220      	movs	r2, #32
 8006b20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	2200      	movs	r2, #0
 8006b28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b30:	f043 0220 	orr.w	r2, r3, #32
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	2200      	movs	r2, #0
 8006b3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006b40:	2301      	movs	r3, #1
 8006b42:	e007      	b.n	8006b54 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	695b      	ldr	r3, [r3, #20]
 8006b4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b4e:	2b40      	cmp	r3, #64	; 0x40
 8006b50:	d1b5      	bne.n	8006abe <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8006b52:	2300      	movs	r3, #0
}
 8006b54:	4618      	mov	r0, r3
 8006b56:	3710      	adds	r7, #16
 8006b58:	46bd      	mov	sp, r7
 8006b5a:	bd80      	pop	{r7, pc}

08006b5c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8006b5c:	b480      	push	{r7}
 8006b5e:	b083      	sub	sp, #12
 8006b60:	af00      	add	r7, sp, #0
 8006b62:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	695b      	ldr	r3, [r3, #20]
 8006b6a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006b6e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006b72:	d11b      	bne.n	8006bac <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006b7c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	2200      	movs	r2, #0
 8006b82:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	2220      	movs	r2, #32
 8006b88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	2200      	movs	r2, #0
 8006b90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b98:	f043 0204 	orr.w	r2, r3, #4
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	2200      	movs	r2, #0
 8006ba4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8006ba8:	2301      	movs	r3, #1
 8006baa:	e000      	b.n	8006bae <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8006bac:	2300      	movs	r3, #0
}
 8006bae:	4618      	mov	r0, r3
 8006bb0:	370c      	adds	r7, #12
 8006bb2:	46bd      	mov	sp, r7
 8006bb4:	bc80      	pop	{r7}
 8006bb6:	4770      	bx	lr

08006bb8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8006bb8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006bba:	b08f      	sub	sp, #60	; 0x3c
 8006bbc:	af0a      	add	r7, sp, #40	; 0x28
 8006bbe:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d101      	bne.n	8006bca <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8006bc6:	2301      	movs	r3, #1
 8006bc8:	e10f      	b.n	8006dea <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8006bd6:	b2db      	uxtb	r3, r3
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d106      	bne.n	8006bea <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	2200      	movs	r2, #0
 8006be0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8006be4:	6878      	ldr	r0, [r7, #4]
 8006be6:	f005 fdd3 	bl	800c790 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	2203      	movs	r2, #3
 8006bee:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8006bf2:	68bb      	ldr	r3, [r7, #8]
 8006bf4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006bf6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d102      	bne.n	8006c04 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	2200      	movs	r2, #0
 8006c02:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	4618      	mov	r0, r3
 8006c0a:	f002 fdc3 	bl	8009794 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	603b      	str	r3, [r7, #0]
 8006c14:	687e      	ldr	r6, [r7, #4]
 8006c16:	466d      	mov	r5, sp
 8006c18:	f106 0410 	add.w	r4, r6, #16
 8006c1c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006c1e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006c20:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006c22:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006c24:	e894 0003 	ldmia.w	r4, {r0, r1}
 8006c28:	e885 0003 	stmia.w	r5, {r0, r1}
 8006c2c:	1d33      	adds	r3, r6, #4
 8006c2e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006c30:	6838      	ldr	r0, [r7, #0]
 8006c32:	f002 fca5 	bl	8009580 <USB_CoreInit>
 8006c36:	4603      	mov	r3, r0
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d005      	beq.n	8006c48 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	2202      	movs	r2, #2
 8006c40:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8006c44:	2301      	movs	r3, #1
 8006c46:	e0d0      	b.n	8006dea <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	2100      	movs	r1, #0
 8006c4e:	4618      	mov	r0, r3
 8006c50:	f002 fdb0 	bl	80097b4 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006c54:	2300      	movs	r3, #0
 8006c56:	73fb      	strb	r3, [r7, #15]
 8006c58:	e04a      	b.n	8006cf0 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8006c5a:	7bfa      	ldrb	r2, [r7, #15]
 8006c5c:	6879      	ldr	r1, [r7, #4]
 8006c5e:	4613      	mov	r3, r2
 8006c60:	00db      	lsls	r3, r3, #3
 8006c62:	1a9b      	subs	r3, r3, r2
 8006c64:	009b      	lsls	r3, r3, #2
 8006c66:	440b      	add	r3, r1
 8006c68:	333d      	adds	r3, #61	; 0x3d
 8006c6a:	2201      	movs	r2, #1
 8006c6c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8006c6e:	7bfa      	ldrb	r2, [r7, #15]
 8006c70:	6879      	ldr	r1, [r7, #4]
 8006c72:	4613      	mov	r3, r2
 8006c74:	00db      	lsls	r3, r3, #3
 8006c76:	1a9b      	subs	r3, r3, r2
 8006c78:	009b      	lsls	r3, r3, #2
 8006c7a:	440b      	add	r3, r1
 8006c7c:	333c      	adds	r3, #60	; 0x3c
 8006c7e:	7bfa      	ldrb	r2, [r7, #15]
 8006c80:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8006c82:	7bfa      	ldrb	r2, [r7, #15]
 8006c84:	7bfb      	ldrb	r3, [r7, #15]
 8006c86:	b298      	uxth	r0, r3
 8006c88:	6879      	ldr	r1, [r7, #4]
 8006c8a:	4613      	mov	r3, r2
 8006c8c:	00db      	lsls	r3, r3, #3
 8006c8e:	1a9b      	subs	r3, r3, r2
 8006c90:	009b      	lsls	r3, r3, #2
 8006c92:	440b      	add	r3, r1
 8006c94:	3342      	adds	r3, #66	; 0x42
 8006c96:	4602      	mov	r2, r0
 8006c98:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8006c9a:	7bfa      	ldrb	r2, [r7, #15]
 8006c9c:	6879      	ldr	r1, [r7, #4]
 8006c9e:	4613      	mov	r3, r2
 8006ca0:	00db      	lsls	r3, r3, #3
 8006ca2:	1a9b      	subs	r3, r3, r2
 8006ca4:	009b      	lsls	r3, r3, #2
 8006ca6:	440b      	add	r3, r1
 8006ca8:	333f      	adds	r3, #63	; 0x3f
 8006caa:	2200      	movs	r2, #0
 8006cac:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8006cae:	7bfa      	ldrb	r2, [r7, #15]
 8006cb0:	6879      	ldr	r1, [r7, #4]
 8006cb2:	4613      	mov	r3, r2
 8006cb4:	00db      	lsls	r3, r3, #3
 8006cb6:	1a9b      	subs	r3, r3, r2
 8006cb8:	009b      	lsls	r3, r3, #2
 8006cba:	440b      	add	r3, r1
 8006cbc:	3344      	adds	r3, #68	; 0x44
 8006cbe:	2200      	movs	r2, #0
 8006cc0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8006cc2:	7bfa      	ldrb	r2, [r7, #15]
 8006cc4:	6879      	ldr	r1, [r7, #4]
 8006cc6:	4613      	mov	r3, r2
 8006cc8:	00db      	lsls	r3, r3, #3
 8006cca:	1a9b      	subs	r3, r3, r2
 8006ccc:	009b      	lsls	r3, r3, #2
 8006cce:	440b      	add	r3, r1
 8006cd0:	3348      	adds	r3, #72	; 0x48
 8006cd2:	2200      	movs	r2, #0
 8006cd4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8006cd6:	7bfa      	ldrb	r2, [r7, #15]
 8006cd8:	6879      	ldr	r1, [r7, #4]
 8006cda:	4613      	mov	r3, r2
 8006cdc:	00db      	lsls	r3, r3, #3
 8006cde:	1a9b      	subs	r3, r3, r2
 8006ce0:	009b      	lsls	r3, r3, #2
 8006ce2:	440b      	add	r3, r1
 8006ce4:	3350      	adds	r3, #80	; 0x50
 8006ce6:	2200      	movs	r2, #0
 8006ce8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006cea:	7bfb      	ldrb	r3, [r7, #15]
 8006cec:	3301      	adds	r3, #1
 8006cee:	73fb      	strb	r3, [r7, #15]
 8006cf0:	7bfa      	ldrb	r2, [r7, #15]
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	685b      	ldr	r3, [r3, #4]
 8006cf6:	429a      	cmp	r2, r3
 8006cf8:	d3af      	bcc.n	8006c5a <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006cfa:	2300      	movs	r3, #0
 8006cfc:	73fb      	strb	r3, [r7, #15]
 8006cfe:	e044      	b.n	8006d8a <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8006d00:	7bfa      	ldrb	r2, [r7, #15]
 8006d02:	6879      	ldr	r1, [r7, #4]
 8006d04:	4613      	mov	r3, r2
 8006d06:	00db      	lsls	r3, r3, #3
 8006d08:	1a9b      	subs	r3, r3, r2
 8006d0a:	009b      	lsls	r3, r3, #2
 8006d0c:	440b      	add	r3, r1
 8006d0e:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8006d12:	2200      	movs	r2, #0
 8006d14:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8006d16:	7bfa      	ldrb	r2, [r7, #15]
 8006d18:	6879      	ldr	r1, [r7, #4]
 8006d1a:	4613      	mov	r3, r2
 8006d1c:	00db      	lsls	r3, r3, #3
 8006d1e:	1a9b      	subs	r3, r3, r2
 8006d20:	009b      	lsls	r3, r3, #2
 8006d22:	440b      	add	r3, r1
 8006d24:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8006d28:	7bfa      	ldrb	r2, [r7, #15]
 8006d2a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8006d2c:	7bfa      	ldrb	r2, [r7, #15]
 8006d2e:	6879      	ldr	r1, [r7, #4]
 8006d30:	4613      	mov	r3, r2
 8006d32:	00db      	lsls	r3, r3, #3
 8006d34:	1a9b      	subs	r3, r3, r2
 8006d36:	009b      	lsls	r3, r3, #2
 8006d38:	440b      	add	r3, r1
 8006d3a:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8006d3e:	2200      	movs	r2, #0
 8006d40:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8006d42:	7bfa      	ldrb	r2, [r7, #15]
 8006d44:	6879      	ldr	r1, [r7, #4]
 8006d46:	4613      	mov	r3, r2
 8006d48:	00db      	lsls	r3, r3, #3
 8006d4a:	1a9b      	subs	r3, r3, r2
 8006d4c:	009b      	lsls	r3, r3, #2
 8006d4e:	440b      	add	r3, r1
 8006d50:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8006d54:	2200      	movs	r2, #0
 8006d56:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8006d58:	7bfa      	ldrb	r2, [r7, #15]
 8006d5a:	6879      	ldr	r1, [r7, #4]
 8006d5c:	4613      	mov	r3, r2
 8006d5e:	00db      	lsls	r3, r3, #3
 8006d60:	1a9b      	subs	r3, r3, r2
 8006d62:	009b      	lsls	r3, r3, #2
 8006d64:	440b      	add	r3, r1
 8006d66:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8006d6a:	2200      	movs	r2, #0
 8006d6c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8006d6e:	7bfa      	ldrb	r2, [r7, #15]
 8006d70:	6879      	ldr	r1, [r7, #4]
 8006d72:	4613      	mov	r3, r2
 8006d74:	00db      	lsls	r3, r3, #3
 8006d76:	1a9b      	subs	r3, r3, r2
 8006d78:	009b      	lsls	r3, r3, #2
 8006d7a:	440b      	add	r3, r1
 8006d7c:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8006d80:	2200      	movs	r2, #0
 8006d82:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006d84:	7bfb      	ldrb	r3, [r7, #15]
 8006d86:	3301      	adds	r3, #1
 8006d88:	73fb      	strb	r3, [r7, #15]
 8006d8a:	7bfa      	ldrb	r2, [r7, #15]
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	685b      	ldr	r3, [r3, #4]
 8006d90:	429a      	cmp	r2, r3
 8006d92:	d3b5      	bcc.n	8006d00 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	603b      	str	r3, [r7, #0]
 8006d9a:	687e      	ldr	r6, [r7, #4]
 8006d9c:	466d      	mov	r5, sp
 8006d9e:	f106 0410 	add.w	r4, r6, #16
 8006da2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006da4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006da6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006da8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006daa:	e894 0003 	ldmia.w	r4, {r0, r1}
 8006dae:	e885 0003 	stmia.w	r5, {r0, r1}
 8006db2:	1d33      	adds	r3, r6, #4
 8006db4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006db6:	6838      	ldr	r0, [r7, #0]
 8006db8:	f002 fd48 	bl	800984c <USB_DevInit>
 8006dbc:	4603      	mov	r3, r0
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d005      	beq.n	8006dce <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	2202      	movs	r2, #2
 8006dc6:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8006dca:	2301      	movs	r3, #1
 8006dcc:	e00d      	b.n	8006dea <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	2200      	movs	r2, #0
 8006dd2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	2201      	movs	r2, #1
 8006dda:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  (void)USB_DevDisconnect(hpcd->Instance);
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	4618      	mov	r0, r3
 8006de4:	f003 fdb9 	bl	800a95a <USB_DevDisconnect>

  return HAL_OK;
 8006de8:	2300      	movs	r3, #0
}
 8006dea:	4618      	mov	r0, r3
 8006dec:	3714      	adds	r7, #20
 8006dee:	46bd      	mov	sp, r7
 8006df0:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006df2 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8006df2:	b580      	push	{r7, lr}
 8006df4:	b082      	sub	sp, #8
 8006df6:	af00      	add	r7, sp, #0
 8006df8:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8006e00:	2b01      	cmp	r3, #1
 8006e02:	d101      	bne.n	8006e08 <HAL_PCD_Start+0x16>
 8006e04:	2302      	movs	r3, #2
 8006e06:	e012      	b.n	8006e2e <HAL_PCD_Start+0x3c>
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	2201      	movs	r2, #1
 8006e0c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  __HAL_PCD_ENABLE(hpcd);
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	4618      	mov	r0, r3
 8006e16:	f002 fcad 	bl	8009774 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	4618      	mov	r0, r3
 8006e20:	f003 fd7b 	bl	800a91a <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	2200      	movs	r2, #0
 8006e28:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8006e2c:	2300      	movs	r3, #0
}
 8006e2e:	4618      	mov	r0, r3
 8006e30:	3708      	adds	r7, #8
 8006e32:	46bd      	mov	sp, r7
 8006e34:	bd80      	pop	{r7, pc}

08006e36 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8006e36:	b590      	push	{r4, r7, lr}
 8006e38:	b08d      	sub	sp, #52	; 0x34
 8006e3a:	af00      	add	r7, sp, #0
 8006e3c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e44:	6a3b      	ldr	r3, [r7, #32]
 8006e46:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t temp;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	4618      	mov	r0, r3
 8006e4e:	f003 fe32 	bl	800aab6 <USB_GetMode>
 8006e52:	4603      	mov	r3, r0
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	f040 838f 	bne.w	8007578 <HAL_PCD_IRQHandler+0x742>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	4618      	mov	r0, r3
 8006e60:	f003 fd9b 	bl	800a99a <USB_ReadInterrupts>
 8006e64:	4603      	mov	r3, r0
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	f000 8385 	beq.w	8007576 <HAL_PCD_IRQHandler+0x740>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	4618      	mov	r0, r3
 8006e72:	f003 fd92 	bl	800a99a <USB_ReadInterrupts>
 8006e76:	4603      	mov	r3, r0
 8006e78:	f003 0302 	and.w	r3, r3, #2
 8006e7c:	2b02      	cmp	r3, #2
 8006e7e:	d107      	bne.n	8006e90 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	695a      	ldr	r2, [r3, #20]
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	f002 0202 	and.w	r2, r2, #2
 8006e8e:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	4618      	mov	r0, r3
 8006e96:	f003 fd80 	bl	800a99a <USB_ReadInterrupts>
 8006e9a:	4603      	mov	r3, r0
 8006e9c:	f003 0310 	and.w	r3, r3, #16
 8006ea0:	2b10      	cmp	r3, #16
 8006ea2:	d161      	bne.n	8006f68 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	699a      	ldr	r2, [r3, #24]
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	f022 0210 	bic.w	r2, r2, #16
 8006eb2:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8006eb4:	6a3b      	ldr	r3, [r7, #32]
 8006eb6:	6a1b      	ldr	r3, [r3, #32]
 8006eb8:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8006eba:	69bb      	ldr	r3, [r7, #24]
 8006ebc:	f003 020f 	and.w	r2, r3, #15
 8006ec0:	4613      	mov	r3, r2
 8006ec2:	00db      	lsls	r3, r3, #3
 8006ec4:	1a9b      	subs	r3, r3, r2
 8006ec6:	009b      	lsls	r3, r3, #2
 8006ec8:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8006ecc:	687a      	ldr	r2, [r7, #4]
 8006ece:	4413      	add	r3, r2
 8006ed0:	3304      	adds	r3, #4
 8006ed2:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8006ed4:	69bb      	ldr	r3, [r7, #24]
 8006ed6:	0c5b      	lsrs	r3, r3, #17
 8006ed8:	f003 030f 	and.w	r3, r3, #15
 8006edc:	2b02      	cmp	r3, #2
 8006ede:	d124      	bne.n	8006f2a <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8006ee0:	69ba      	ldr	r2, [r7, #24]
 8006ee2:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8006ee6:	4013      	ands	r3, r2
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d035      	beq.n	8006f58 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8006eec:	697b      	ldr	r3, [r7, #20]
 8006eee:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8006ef0:	69bb      	ldr	r3, [r7, #24]
 8006ef2:	091b      	lsrs	r3, r3, #4
 8006ef4:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8006ef6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006efa:	b29b      	uxth	r3, r3
 8006efc:	461a      	mov	r2, r3
 8006efe:	6a38      	ldr	r0, [r7, #32]
 8006f00:	f003 fbbd 	bl	800a67e <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006f04:	697b      	ldr	r3, [r7, #20]
 8006f06:	68da      	ldr	r2, [r3, #12]
 8006f08:	69bb      	ldr	r3, [r7, #24]
 8006f0a:	091b      	lsrs	r3, r3, #4
 8006f0c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006f10:	441a      	add	r2, r3
 8006f12:	697b      	ldr	r3, [r7, #20]
 8006f14:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006f16:	697b      	ldr	r3, [r7, #20]
 8006f18:	699a      	ldr	r2, [r3, #24]
 8006f1a:	69bb      	ldr	r3, [r7, #24]
 8006f1c:	091b      	lsrs	r3, r3, #4
 8006f1e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006f22:	441a      	add	r2, r3
 8006f24:	697b      	ldr	r3, [r7, #20]
 8006f26:	619a      	str	r2, [r3, #24]
 8006f28:	e016      	b.n	8006f58 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8006f2a:	69bb      	ldr	r3, [r7, #24]
 8006f2c:	0c5b      	lsrs	r3, r3, #17
 8006f2e:	f003 030f 	and.w	r3, r3, #15
 8006f32:	2b06      	cmp	r3, #6
 8006f34:	d110      	bne.n	8006f58 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8006f3c:	2208      	movs	r2, #8
 8006f3e:	4619      	mov	r1, r3
 8006f40:	6a38      	ldr	r0, [r7, #32]
 8006f42:	f003 fb9c 	bl	800a67e <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006f46:	697b      	ldr	r3, [r7, #20]
 8006f48:	699a      	ldr	r2, [r3, #24]
 8006f4a:	69bb      	ldr	r3, [r7, #24]
 8006f4c:	091b      	lsrs	r3, r3, #4
 8006f4e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006f52:	441a      	add	r2, r3
 8006f54:	697b      	ldr	r3, [r7, #20]
 8006f56:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	699a      	ldr	r2, [r3, #24]
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	f042 0210 	orr.w	r2, r2, #16
 8006f66:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	4618      	mov	r0, r3
 8006f6e:	f003 fd14 	bl	800a99a <USB_ReadInterrupts>
 8006f72:	4603      	mov	r3, r0
 8006f74:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006f78:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006f7c:	d16e      	bne.n	800705c <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8006f7e:	2300      	movs	r3, #0
 8006f80:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	4618      	mov	r0, r3
 8006f88:	f003 fd19 	bl	800a9be <USB_ReadDevAllOutEpInterrupt>
 8006f8c:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8006f8e:	e062      	b.n	8007056 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8006f90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f92:	f003 0301 	and.w	r3, r3, #1
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d057      	beq.n	800704a <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006fa0:	b2d2      	uxtb	r2, r2
 8006fa2:	4611      	mov	r1, r2
 8006fa4:	4618      	mov	r0, r3
 8006fa6:	f003 fd3c 	bl	800aa22 <USB_ReadDevOutEPInterrupt>
 8006faa:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8006fac:	693b      	ldr	r3, [r7, #16]
 8006fae:	f003 0301 	and.w	r3, r3, #1
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d00c      	beq.n	8006fd0 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8006fb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fb8:	015a      	lsls	r2, r3, #5
 8006fba:	69fb      	ldr	r3, [r7, #28]
 8006fbc:	4413      	add	r3, r2
 8006fbe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006fc2:	461a      	mov	r2, r3
 8006fc4:	2301      	movs	r3, #1
 8006fc6:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8006fc8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006fca:	6878      	ldr	r0, [r7, #4]
 8006fcc:	f000 fda2 	bl	8007b14 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8006fd0:	693b      	ldr	r3, [r7, #16]
 8006fd2:	f003 0308 	and.w	r3, r3, #8
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d00c      	beq.n	8006ff4 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8006fda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fdc:	015a      	lsls	r2, r3, #5
 8006fde:	69fb      	ldr	r3, [r7, #28]
 8006fe0:	4413      	add	r3, r2
 8006fe2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006fe6:	461a      	mov	r2, r3
 8006fe8:	2308      	movs	r3, #8
 8006fea:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8006fec:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006fee:	6878      	ldr	r0, [r7, #4]
 8006ff0:	f000 fe9c 	bl	8007d2c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8006ff4:	693b      	ldr	r3, [r7, #16]
 8006ff6:	f003 0310 	and.w	r3, r3, #16
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d008      	beq.n	8007010 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8006ffe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007000:	015a      	lsls	r2, r3, #5
 8007002:	69fb      	ldr	r3, [r7, #28]
 8007004:	4413      	add	r3, r2
 8007006:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800700a:	461a      	mov	r2, r3
 800700c:	2310      	movs	r3, #16
 800700e:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8007010:	693b      	ldr	r3, [r7, #16]
 8007012:	f003 0320 	and.w	r3, r3, #32
 8007016:	2b00      	cmp	r3, #0
 8007018:	d008      	beq.n	800702c <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800701a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800701c:	015a      	lsls	r2, r3, #5
 800701e:	69fb      	ldr	r3, [r7, #28]
 8007020:	4413      	add	r3, r2
 8007022:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007026:	461a      	mov	r2, r3
 8007028:	2320      	movs	r3, #32
 800702a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800702c:	693b      	ldr	r3, [r7, #16]
 800702e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007032:	2b00      	cmp	r3, #0
 8007034:	d009      	beq.n	800704a <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8007036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007038:	015a      	lsls	r2, r3, #5
 800703a:	69fb      	ldr	r3, [r7, #28]
 800703c:	4413      	add	r3, r2
 800703e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007042:	461a      	mov	r2, r3
 8007044:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007048:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800704a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800704c:	3301      	adds	r3, #1
 800704e:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8007050:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007052:	085b      	lsrs	r3, r3, #1
 8007054:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8007056:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007058:	2b00      	cmp	r3, #0
 800705a:	d199      	bne.n	8006f90 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	4618      	mov	r0, r3
 8007062:	f003 fc9a 	bl	800a99a <USB_ReadInterrupts>
 8007066:	4603      	mov	r3, r0
 8007068:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800706c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007070:	f040 80c0 	bne.w	80071f4 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	4618      	mov	r0, r3
 800707a:	f003 fcb9 	bl	800a9f0 <USB_ReadDevAllInEpInterrupt>
 800707e:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8007080:	2300      	movs	r3, #0
 8007082:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8007084:	e0b2      	b.n	80071ec <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8007086:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007088:	f003 0301 	and.w	r3, r3, #1
 800708c:	2b00      	cmp	r3, #0
 800708e:	f000 80a7 	beq.w	80071e0 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007098:	b2d2      	uxtb	r2, r2
 800709a:	4611      	mov	r1, r2
 800709c:	4618      	mov	r0, r3
 800709e:	f003 fcdd 	bl	800aa5c <USB_ReadDevInEPInterrupt>
 80070a2:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80070a4:	693b      	ldr	r3, [r7, #16]
 80070a6:	f003 0301 	and.w	r3, r3, #1
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d057      	beq.n	800715e <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80070ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070b0:	f003 030f 	and.w	r3, r3, #15
 80070b4:	2201      	movs	r2, #1
 80070b6:	fa02 f303 	lsl.w	r3, r2, r3
 80070ba:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80070bc:	69fb      	ldr	r3, [r7, #28]
 80070be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80070c2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	43db      	mvns	r3, r3
 80070c8:	69f9      	ldr	r1, [r7, #28]
 80070ca:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80070ce:	4013      	ands	r3, r2
 80070d0:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80070d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070d4:	015a      	lsls	r2, r3, #5
 80070d6:	69fb      	ldr	r3, [r7, #28]
 80070d8:	4413      	add	r3, r2
 80070da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80070de:	461a      	mov	r2, r3
 80070e0:	2301      	movs	r3, #1
 80070e2:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	691b      	ldr	r3, [r3, #16]
 80070e8:	2b01      	cmp	r3, #1
 80070ea:	d132      	bne.n	8007152 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80070ec:	6879      	ldr	r1, [r7, #4]
 80070ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80070f0:	4613      	mov	r3, r2
 80070f2:	00db      	lsls	r3, r3, #3
 80070f4:	1a9b      	subs	r3, r3, r2
 80070f6:	009b      	lsls	r3, r3, #2
 80070f8:	440b      	add	r3, r1
 80070fa:	3348      	adds	r3, #72	; 0x48
 80070fc:	6819      	ldr	r1, [r3, #0]
 80070fe:	6878      	ldr	r0, [r7, #4]
 8007100:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007102:	4613      	mov	r3, r2
 8007104:	00db      	lsls	r3, r3, #3
 8007106:	1a9b      	subs	r3, r3, r2
 8007108:	009b      	lsls	r3, r3, #2
 800710a:	4403      	add	r3, r0
 800710c:	3344      	adds	r3, #68	; 0x44
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	4419      	add	r1, r3
 8007112:	6878      	ldr	r0, [r7, #4]
 8007114:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007116:	4613      	mov	r3, r2
 8007118:	00db      	lsls	r3, r3, #3
 800711a:	1a9b      	subs	r3, r3, r2
 800711c:	009b      	lsls	r3, r3, #2
 800711e:	4403      	add	r3, r0
 8007120:	3348      	adds	r3, #72	; 0x48
 8007122:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8007124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007126:	2b00      	cmp	r3, #0
 8007128:	d113      	bne.n	8007152 <HAL_PCD_IRQHandler+0x31c>
 800712a:	6879      	ldr	r1, [r7, #4]
 800712c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800712e:	4613      	mov	r3, r2
 8007130:	00db      	lsls	r3, r3, #3
 8007132:	1a9b      	subs	r3, r3, r2
 8007134:	009b      	lsls	r3, r3, #2
 8007136:	440b      	add	r3, r1
 8007138:	3350      	adds	r3, #80	; 0x50
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	2b00      	cmp	r3, #0
 800713e:	d108      	bne.n	8007152 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	6818      	ldr	r0, [r3, #0]
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800714a:	461a      	mov	r2, r3
 800714c:	2101      	movs	r1, #1
 800714e:	f003 fce1 	bl	800ab14 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8007152:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007154:	b2db      	uxtb	r3, r3
 8007156:	4619      	mov	r1, r3
 8007158:	6878      	ldr	r0, [r7, #4]
 800715a:	f005 fb9a 	bl	800c892 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800715e:	693b      	ldr	r3, [r7, #16]
 8007160:	f003 0308 	and.w	r3, r3, #8
 8007164:	2b00      	cmp	r3, #0
 8007166:	d008      	beq.n	800717a <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8007168:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800716a:	015a      	lsls	r2, r3, #5
 800716c:	69fb      	ldr	r3, [r7, #28]
 800716e:	4413      	add	r3, r2
 8007170:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007174:	461a      	mov	r2, r3
 8007176:	2308      	movs	r3, #8
 8007178:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800717a:	693b      	ldr	r3, [r7, #16]
 800717c:	f003 0310 	and.w	r3, r3, #16
 8007180:	2b00      	cmp	r3, #0
 8007182:	d008      	beq.n	8007196 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8007184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007186:	015a      	lsls	r2, r3, #5
 8007188:	69fb      	ldr	r3, [r7, #28]
 800718a:	4413      	add	r3, r2
 800718c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007190:	461a      	mov	r2, r3
 8007192:	2310      	movs	r3, #16
 8007194:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8007196:	693b      	ldr	r3, [r7, #16]
 8007198:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800719c:	2b00      	cmp	r3, #0
 800719e:	d008      	beq.n	80071b2 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80071a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071a2:	015a      	lsls	r2, r3, #5
 80071a4:	69fb      	ldr	r3, [r7, #28]
 80071a6:	4413      	add	r3, r2
 80071a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80071ac:	461a      	mov	r2, r3
 80071ae:	2340      	movs	r3, #64	; 0x40
 80071b0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80071b2:	693b      	ldr	r3, [r7, #16]
 80071b4:	f003 0302 	and.w	r3, r3, #2
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d008      	beq.n	80071ce <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80071bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071be:	015a      	lsls	r2, r3, #5
 80071c0:	69fb      	ldr	r3, [r7, #28]
 80071c2:	4413      	add	r3, r2
 80071c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80071c8:	461a      	mov	r2, r3
 80071ca:	2302      	movs	r3, #2
 80071cc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80071ce:	693b      	ldr	r3, [r7, #16]
 80071d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d003      	beq.n	80071e0 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80071d8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80071da:	6878      	ldr	r0, [r7, #4]
 80071dc:	f000 fc0c 	bl	80079f8 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80071e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071e2:	3301      	adds	r3, #1
 80071e4:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80071e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071e8:	085b      	lsrs	r3, r3, #1
 80071ea:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80071ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	f47f af49 	bne.w	8007086 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	4618      	mov	r0, r3
 80071fa:	f003 fbce 	bl	800a99a <USB_ReadInterrupts>
 80071fe:	4603      	mov	r3, r0
 8007200:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007204:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007208:	d114      	bne.n	8007234 <HAL_PCD_IRQHandler+0x3fe>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800720a:	69fb      	ldr	r3, [r7, #28]
 800720c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007210:	685b      	ldr	r3, [r3, #4]
 8007212:	69fa      	ldr	r2, [r7, #28]
 8007214:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007218:	f023 0301 	bic.w	r3, r3, #1
 800721c:	6053      	str	r3, [r2, #4]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResumeCallback(hpcd);
#else
      HAL_PCD_ResumeCallback(hpcd);
 800721e:	6878      	ldr	r0, [r7, #4]
 8007220:	f005 fbae 	bl	800c980 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	695a      	ldr	r2, [r3, #20]
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8007232:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	4618      	mov	r0, r3
 800723a:	f003 fbae 	bl	800a99a <USB_ReadInterrupts>
 800723e:	4603      	mov	r3, r0
 8007240:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007244:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007248:	d112      	bne.n	8007270 <HAL_PCD_IRQHandler+0x43a>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800724a:	69fb      	ldr	r3, [r7, #28]
 800724c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007250:	689b      	ldr	r3, [r3, #8]
 8007252:	f003 0301 	and.w	r3, r3, #1
 8007256:	2b01      	cmp	r3, #1
 8007258:	d102      	bne.n	8007260 <HAL_PCD_IRQHandler+0x42a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800725a:	6878      	ldr	r0, [r7, #4]
 800725c:	f005 fb6a 	bl	800c934 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	695a      	ldr	r2, [r3, #20]
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800726e:	615a      	str	r2, [r3, #20]
    }
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	4618      	mov	r0, r3
 8007276:	f003 fb90 	bl	800a99a <USB_ReadInterrupts>
 800727a:	4603      	mov	r3, r0
 800727c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007280:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007284:	f040 80c7 	bne.w	8007416 <HAL_PCD_IRQHandler+0x5e0>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8007288:	69fb      	ldr	r3, [r7, #28]
 800728a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800728e:	685b      	ldr	r3, [r3, #4]
 8007290:	69fa      	ldr	r2, [r7, #28]
 8007292:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007296:	f023 0301 	bic.w	r3, r3, #1
 800729a:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	2110      	movs	r1, #16
 80072a2:	4618      	mov	r0, r3
 80072a4:	f002 fc36 	bl	8009b14 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80072a8:	2300      	movs	r3, #0
 80072aa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80072ac:	e056      	b.n	800735c <HAL_PCD_IRQHandler+0x526>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80072ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072b0:	015a      	lsls	r2, r3, #5
 80072b2:	69fb      	ldr	r3, [r7, #28]
 80072b4:	4413      	add	r3, r2
 80072b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80072ba:	461a      	mov	r2, r3
 80072bc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80072c0:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80072c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072c4:	015a      	lsls	r2, r3, #5
 80072c6:	69fb      	ldr	r3, [r7, #28]
 80072c8:	4413      	add	r3, r2
 80072ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80072d2:	0151      	lsls	r1, r2, #5
 80072d4:	69fa      	ldr	r2, [r7, #28]
 80072d6:	440a      	add	r2, r1
 80072d8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80072dc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80072e0:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80072e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072e4:	015a      	lsls	r2, r3, #5
 80072e6:	69fb      	ldr	r3, [r7, #28]
 80072e8:	4413      	add	r3, r2
 80072ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80072f2:	0151      	lsls	r1, r2, #5
 80072f4:	69fa      	ldr	r2, [r7, #28]
 80072f6:	440a      	add	r2, r1
 80072f8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80072fc:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007300:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8007302:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007304:	015a      	lsls	r2, r3, #5
 8007306:	69fb      	ldr	r3, [r7, #28]
 8007308:	4413      	add	r3, r2
 800730a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800730e:	461a      	mov	r2, r3
 8007310:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007314:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8007316:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007318:	015a      	lsls	r2, r3, #5
 800731a:	69fb      	ldr	r3, [r7, #28]
 800731c:	4413      	add	r3, r2
 800731e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007326:	0151      	lsls	r1, r2, #5
 8007328:	69fa      	ldr	r2, [r7, #28]
 800732a:	440a      	add	r2, r1
 800732c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007330:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007334:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8007336:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007338:	015a      	lsls	r2, r3, #5
 800733a:	69fb      	ldr	r3, [r7, #28]
 800733c:	4413      	add	r3, r2
 800733e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007346:	0151      	lsls	r1, r2, #5
 8007348:	69fa      	ldr	r2, [r7, #28]
 800734a:	440a      	add	r2, r1
 800734c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007350:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007354:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007356:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007358:	3301      	adds	r3, #1
 800735a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	685b      	ldr	r3, [r3, #4]
 8007360:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007362:	429a      	cmp	r2, r3
 8007364:	d3a3      	bcc.n	80072ae <HAL_PCD_IRQHandler+0x478>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8007366:	69fb      	ldr	r3, [r7, #28]
 8007368:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800736c:	69db      	ldr	r3, [r3, #28]
 800736e:	69fa      	ldr	r2, [r7, #28]
 8007370:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007374:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8007378:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800737e:	2b00      	cmp	r3, #0
 8007380:	d016      	beq.n	80073b0 <HAL_PCD_IRQHandler+0x57a>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8007382:	69fb      	ldr	r3, [r7, #28]
 8007384:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007388:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800738c:	69fa      	ldr	r2, [r7, #28]
 800738e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007392:	f043 030b 	orr.w	r3, r3, #11
 8007396:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800739a:	69fb      	ldr	r3, [r7, #28]
 800739c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80073a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80073a2:	69fa      	ldr	r2, [r7, #28]
 80073a4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80073a8:	f043 030b 	orr.w	r3, r3, #11
 80073ac:	6453      	str	r3, [r2, #68]	; 0x44
 80073ae:	e015      	b.n	80073dc <HAL_PCD_IRQHandler+0x5a6>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80073b0:	69fb      	ldr	r3, [r7, #28]
 80073b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80073b6:	695b      	ldr	r3, [r3, #20]
 80073b8:	69fa      	ldr	r2, [r7, #28]
 80073ba:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80073be:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80073c2:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80073c6:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80073c8:	69fb      	ldr	r3, [r7, #28]
 80073ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80073ce:	691b      	ldr	r3, [r3, #16]
 80073d0:	69fa      	ldr	r2, [r7, #28]
 80073d2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80073d6:	f043 030b 	orr.w	r3, r3, #11
 80073da:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80073dc:	69fb      	ldr	r3, [r7, #28]
 80073de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	69fa      	ldr	r2, [r7, #28]
 80073e6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80073ea:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80073ee:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	6818      	ldr	r0, [r3, #0]
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	691b      	ldr	r3, [r3, #16]
 80073f8:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8007400:	461a      	mov	r2, r3
 8007402:	f003 fb87 	bl	800ab14 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	695a      	ldr	r2, [r3, #20]
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8007414:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	4618      	mov	r0, r3
 800741c:	f003 fabd 	bl	800a99a <USB_ReadInterrupts>
 8007420:	4603      	mov	r3, r0
 8007422:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007426:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800742a:	d124      	bne.n	8007476 <HAL_PCD_IRQHandler+0x640>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	4618      	mov	r0, r3
 8007432:	f003 fb4d 	bl	800aad0 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	4618      	mov	r0, r3
 800743c:	f002 fbc6 	bl	8009bcc <USB_GetDevSpeed>
 8007440:	4603      	mov	r3, r0
 8007442:	461a      	mov	r2, r3
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	681c      	ldr	r4, [r3, #0]
 800744c:	f001 f932 	bl	80086b4 <HAL_RCC_GetHCLKFreq>
 8007450:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8007456:	b2db      	uxtb	r3, r3
 8007458:	461a      	mov	r2, r3
 800745a:	4620      	mov	r0, r4
 800745c:	f002 f8e8 	bl	8009630 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8007460:	6878      	ldr	r0, [r7, #4]
 8007462:	f005 fa3e 	bl	800c8e2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	695a      	ldr	r2, [r3, #20]
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8007474:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	4618      	mov	r0, r3
 800747c:	f003 fa8d 	bl	800a99a <USB_ReadInterrupts>
 8007480:	4603      	mov	r3, r0
 8007482:	f003 0308 	and.w	r3, r3, #8
 8007486:	2b08      	cmp	r3, #8
 8007488:	d10a      	bne.n	80074a0 <HAL_PCD_IRQHandler+0x66a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800748a:	6878      	ldr	r0, [r7, #4]
 800748c:	f005 fa1b 	bl	800c8c6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	695a      	ldr	r2, [r3, #20]
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	f002 0208 	and.w	r2, r2, #8
 800749e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	4618      	mov	r0, r3
 80074a6:	f003 fa78 	bl	800a99a <USB_ReadInterrupts>
 80074aa:	4603      	mov	r3, r0
 80074ac:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80074b0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80074b4:	d10f      	bne.n	80074d6 <HAL_PCD_IRQHandler+0x6a0>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80074b6:	2300      	movs	r3, #0
 80074b8:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80074ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074bc:	b2db      	uxtb	r3, r3
 80074be:	4619      	mov	r1, r3
 80074c0:	6878      	ldr	r0, [r7, #4]
 80074c2:	f005 fa7d 	bl	800c9c0 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	695a      	ldr	r2, [r3, #20]
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80074d4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	4618      	mov	r0, r3
 80074dc:	f003 fa5d 	bl	800a99a <USB_ReadInterrupts>
 80074e0:	4603      	mov	r3, r0
 80074e2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80074e6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80074ea:	d10f      	bne.n	800750c <HAL_PCD_IRQHandler+0x6d6>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80074ec:	2300      	movs	r3, #0
 80074ee:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80074f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074f2:	b2db      	uxtb	r3, r3
 80074f4:	4619      	mov	r1, r3
 80074f6:	6878      	ldr	r0, [r7, #4]
 80074f8:	f005 fa50 	bl	800c99c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	695a      	ldr	r2, [r3, #20]
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800750a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	4618      	mov	r0, r3
 8007512:	f003 fa42 	bl	800a99a <USB_ReadInterrupts>
 8007516:	4603      	mov	r3, r0
 8007518:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800751c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007520:	d10a      	bne.n	8007538 <HAL_PCD_IRQHandler+0x702>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8007522:	6878      	ldr	r0, [r7, #4]
 8007524:	f005 fa5e 	bl	800c9e4 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	695a      	ldr	r2, [r3, #20]
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8007536:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	4618      	mov	r0, r3
 800753e:	f003 fa2c 	bl	800a99a <USB_ReadInterrupts>
 8007542:	4603      	mov	r3, r0
 8007544:	f003 0304 	and.w	r3, r3, #4
 8007548:	2b04      	cmp	r3, #4
 800754a:	d115      	bne.n	8007578 <HAL_PCD_IRQHandler+0x742>
    {
      temp = hpcd->Instance->GOTGINT;
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	685b      	ldr	r3, [r3, #4]
 8007552:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8007554:	69bb      	ldr	r3, [r7, #24]
 8007556:	f003 0304 	and.w	r3, r3, #4
 800755a:	2b00      	cmp	r3, #0
 800755c:	d002      	beq.n	8007564 <HAL_PCD_IRQHandler+0x72e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800755e:	6878      	ldr	r0, [r7, #4]
 8007560:	f005 fa4e 	bl	800ca00 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	6859      	ldr	r1, [r3, #4]
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	69ba      	ldr	r2, [r7, #24]
 8007570:	430a      	orrs	r2, r1
 8007572:	605a      	str	r2, [r3, #4]
 8007574:	e000      	b.n	8007578 <HAL_PCD_IRQHandler+0x742>
      return;
 8007576:	bf00      	nop
    }
  }
}
 8007578:	3734      	adds	r7, #52	; 0x34
 800757a:	46bd      	mov	sp, r7
 800757c:	bd90      	pop	{r4, r7, pc}

0800757e <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800757e:	b580      	push	{r7, lr}
 8007580:	b082      	sub	sp, #8
 8007582:	af00      	add	r7, sp, #0
 8007584:	6078      	str	r0, [r7, #4]
 8007586:	460b      	mov	r3, r1
 8007588:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8007590:	2b01      	cmp	r3, #1
 8007592:	d101      	bne.n	8007598 <HAL_PCD_SetAddress+0x1a>
 8007594:	2302      	movs	r3, #2
 8007596:	e013      	b.n	80075c0 <HAL_PCD_SetAddress+0x42>
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	2201      	movs	r2, #1
 800759c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	78fa      	ldrb	r2, [r7, #3]
 80075a4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	78fa      	ldrb	r2, [r7, #3]
 80075ae:	4611      	mov	r1, r2
 80075b0:	4618      	mov	r0, r3
 80075b2:	f003 f98d 	bl	800a8d0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	2200      	movs	r2, #0
 80075ba:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80075be:	2300      	movs	r3, #0
}
 80075c0:	4618      	mov	r0, r3
 80075c2:	3708      	adds	r7, #8
 80075c4:	46bd      	mov	sp, r7
 80075c6:	bd80      	pop	{r7, pc}

080075c8 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80075c8:	b580      	push	{r7, lr}
 80075ca:	b084      	sub	sp, #16
 80075cc:	af00      	add	r7, sp, #0
 80075ce:	6078      	str	r0, [r7, #4]
 80075d0:	4608      	mov	r0, r1
 80075d2:	4611      	mov	r1, r2
 80075d4:	461a      	mov	r2, r3
 80075d6:	4603      	mov	r3, r0
 80075d8:	70fb      	strb	r3, [r7, #3]
 80075da:	460b      	mov	r3, r1
 80075dc:	803b      	strh	r3, [r7, #0]
 80075de:	4613      	mov	r3, r2
 80075e0:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80075e2:	2300      	movs	r3, #0
 80075e4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80075e6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	da0f      	bge.n	800760e <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80075ee:	78fb      	ldrb	r3, [r7, #3]
 80075f0:	f003 020f 	and.w	r2, r3, #15
 80075f4:	4613      	mov	r3, r2
 80075f6:	00db      	lsls	r3, r3, #3
 80075f8:	1a9b      	subs	r3, r3, r2
 80075fa:	009b      	lsls	r3, r3, #2
 80075fc:	3338      	adds	r3, #56	; 0x38
 80075fe:	687a      	ldr	r2, [r7, #4]
 8007600:	4413      	add	r3, r2
 8007602:	3304      	adds	r3, #4
 8007604:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	2201      	movs	r2, #1
 800760a:	705a      	strb	r2, [r3, #1]
 800760c:	e00f      	b.n	800762e <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800760e:	78fb      	ldrb	r3, [r7, #3]
 8007610:	f003 020f 	and.w	r2, r3, #15
 8007614:	4613      	mov	r3, r2
 8007616:	00db      	lsls	r3, r3, #3
 8007618:	1a9b      	subs	r3, r3, r2
 800761a:	009b      	lsls	r3, r3, #2
 800761c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8007620:	687a      	ldr	r2, [r7, #4]
 8007622:	4413      	add	r3, r2
 8007624:	3304      	adds	r3, #4
 8007626:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	2200      	movs	r2, #0
 800762c:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800762e:	78fb      	ldrb	r3, [r7, #3]
 8007630:	f003 030f 	and.w	r3, r3, #15
 8007634:	b2da      	uxtb	r2, r3
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800763a:	883a      	ldrh	r2, [r7, #0]
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	78ba      	ldrb	r2, [r7, #2]
 8007644:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	785b      	ldrb	r3, [r3, #1]
 800764a:	2b00      	cmp	r3, #0
 800764c:	d004      	beq.n	8007658 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	781b      	ldrb	r3, [r3, #0]
 8007652:	b29a      	uxth	r2, r3
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8007658:	78bb      	ldrb	r3, [r7, #2]
 800765a:	2b02      	cmp	r3, #2
 800765c:	d102      	bne.n	8007664 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	2200      	movs	r2, #0
 8007662:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800766a:	2b01      	cmp	r3, #1
 800766c:	d101      	bne.n	8007672 <HAL_PCD_EP_Open+0xaa>
 800766e:	2302      	movs	r3, #2
 8007670:	e00e      	b.n	8007690 <HAL_PCD_EP_Open+0xc8>
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	2201      	movs	r2, #1
 8007676:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	68f9      	ldr	r1, [r7, #12]
 8007680:	4618      	mov	r0, r3
 8007682:	f002 fac7 	bl	8009c14 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	2200      	movs	r2, #0
 800768a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 800768e:	7afb      	ldrb	r3, [r7, #11]
}
 8007690:	4618      	mov	r0, r3
 8007692:	3710      	adds	r7, #16
 8007694:	46bd      	mov	sp, r7
 8007696:	bd80      	pop	{r7, pc}

08007698 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007698:	b580      	push	{r7, lr}
 800769a:	b084      	sub	sp, #16
 800769c:	af00      	add	r7, sp, #0
 800769e:	6078      	str	r0, [r7, #4]
 80076a0:	460b      	mov	r3, r1
 80076a2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80076a4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	da0f      	bge.n	80076cc <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80076ac:	78fb      	ldrb	r3, [r7, #3]
 80076ae:	f003 020f 	and.w	r2, r3, #15
 80076b2:	4613      	mov	r3, r2
 80076b4:	00db      	lsls	r3, r3, #3
 80076b6:	1a9b      	subs	r3, r3, r2
 80076b8:	009b      	lsls	r3, r3, #2
 80076ba:	3338      	adds	r3, #56	; 0x38
 80076bc:	687a      	ldr	r2, [r7, #4]
 80076be:	4413      	add	r3, r2
 80076c0:	3304      	adds	r3, #4
 80076c2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	2201      	movs	r2, #1
 80076c8:	705a      	strb	r2, [r3, #1]
 80076ca:	e00f      	b.n	80076ec <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80076cc:	78fb      	ldrb	r3, [r7, #3]
 80076ce:	f003 020f 	and.w	r2, r3, #15
 80076d2:	4613      	mov	r3, r2
 80076d4:	00db      	lsls	r3, r3, #3
 80076d6:	1a9b      	subs	r3, r3, r2
 80076d8:	009b      	lsls	r3, r3, #2
 80076da:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80076de:	687a      	ldr	r2, [r7, #4]
 80076e0:	4413      	add	r3, r2
 80076e2:	3304      	adds	r3, #4
 80076e4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	2200      	movs	r2, #0
 80076ea:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80076ec:	78fb      	ldrb	r3, [r7, #3]
 80076ee:	f003 030f 	and.w	r3, r3, #15
 80076f2:	b2da      	uxtb	r2, r3
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80076fe:	2b01      	cmp	r3, #1
 8007700:	d101      	bne.n	8007706 <HAL_PCD_EP_Close+0x6e>
 8007702:	2302      	movs	r3, #2
 8007704:	e00e      	b.n	8007724 <HAL_PCD_EP_Close+0x8c>
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	2201      	movs	r2, #1
 800770a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	68f9      	ldr	r1, [r7, #12]
 8007714:	4618      	mov	r0, r3
 8007716:	f002 fb03 	bl	8009d20 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	2200      	movs	r2, #0
 800771e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8007722:	2300      	movs	r3, #0
}
 8007724:	4618      	mov	r0, r3
 8007726:	3710      	adds	r7, #16
 8007728:	46bd      	mov	sp, r7
 800772a:	bd80      	pop	{r7, pc}

0800772c <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800772c:	b580      	push	{r7, lr}
 800772e:	b086      	sub	sp, #24
 8007730:	af00      	add	r7, sp, #0
 8007732:	60f8      	str	r0, [r7, #12]
 8007734:	607a      	str	r2, [r7, #4]
 8007736:	603b      	str	r3, [r7, #0]
 8007738:	460b      	mov	r3, r1
 800773a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800773c:	7afb      	ldrb	r3, [r7, #11]
 800773e:	f003 020f 	and.w	r2, r3, #15
 8007742:	4613      	mov	r3, r2
 8007744:	00db      	lsls	r3, r3, #3
 8007746:	1a9b      	subs	r3, r3, r2
 8007748:	009b      	lsls	r3, r3, #2
 800774a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800774e:	68fa      	ldr	r2, [r7, #12]
 8007750:	4413      	add	r3, r2
 8007752:	3304      	adds	r3, #4
 8007754:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8007756:	697b      	ldr	r3, [r7, #20]
 8007758:	687a      	ldr	r2, [r7, #4]
 800775a:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800775c:	697b      	ldr	r3, [r7, #20]
 800775e:	683a      	ldr	r2, [r7, #0]
 8007760:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8007762:	697b      	ldr	r3, [r7, #20]
 8007764:	2200      	movs	r2, #0
 8007766:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8007768:	697b      	ldr	r3, [r7, #20]
 800776a:	2200      	movs	r2, #0
 800776c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800776e:	7afb      	ldrb	r3, [r7, #11]
 8007770:	f003 030f 	and.w	r3, r3, #15
 8007774:	b2da      	uxtb	r2, r3
 8007776:	697b      	ldr	r3, [r7, #20]
 8007778:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	691b      	ldr	r3, [r3, #16]
 800777e:	2b01      	cmp	r3, #1
 8007780:	d102      	bne.n	8007788 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8007782:	687a      	ldr	r2, [r7, #4]
 8007784:	697b      	ldr	r3, [r7, #20]
 8007786:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8007788:	7afb      	ldrb	r3, [r7, #11]
 800778a:	f003 030f 	and.w	r3, r3, #15
 800778e:	2b00      	cmp	r3, #0
 8007790:	d109      	bne.n	80077a6 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	6818      	ldr	r0, [r3, #0]
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	691b      	ldr	r3, [r3, #16]
 800779a:	b2db      	uxtb	r3, r3
 800779c:	461a      	mov	r2, r3
 800779e:	6979      	ldr	r1, [r7, #20]
 80077a0:	f002 fdde 	bl	800a360 <USB_EP0StartXfer>
 80077a4:	e008      	b.n	80077b8 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	6818      	ldr	r0, [r3, #0]
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	691b      	ldr	r3, [r3, #16]
 80077ae:	b2db      	uxtb	r3, r3
 80077b0:	461a      	mov	r2, r3
 80077b2:	6979      	ldr	r1, [r7, #20]
 80077b4:	f002 fb90 	bl	8009ed8 <USB_EPStartXfer>
  }

  return HAL_OK;
 80077b8:	2300      	movs	r3, #0
}
 80077ba:	4618      	mov	r0, r3
 80077bc:	3718      	adds	r7, #24
 80077be:	46bd      	mov	sp, r7
 80077c0:	bd80      	pop	{r7, pc}

080077c2 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80077c2:	b480      	push	{r7}
 80077c4:	b083      	sub	sp, #12
 80077c6:	af00      	add	r7, sp, #0
 80077c8:	6078      	str	r0, [r7, #4]
 80077ca:	460b      	mov	r3, r1
 80077cc:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80077ce:	78fb      	ldrb	r3, [r7, #3]
 80077d0:	f003 020f 	and.w	r2, r3, #15
 80077d4:	6879      	ldr	r1, [r7, #4]
 80077d6:	4613      	mov	r3, r2
 80077d8:	00db      	lsls	r3, r3, #3
 80077da:	1a9b      	subs	r3, r3, r2
 80077dc:	009b      	lsls	r3, r3, #2
 80077de:	440b      	add	r3, r1
 80077e0:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80077e4:	681b      	ldr	r3, [r3, #0]
}
 80077e6:	4618      	mov	r0, r3
 80077e8:	370c      	adds	r7, #12
 80077ea:	46bd      	mov	sp, r7
 80077ec:	bc80      	pop	{r7}
 80077ee:	4770      	bx	lr

080077f0 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80077f0:	b580      	push	{r7, lr}
 80077f2:	b086      	sub	sp, #24
 80077f4:	af00      	add	r7, sp, #0
 80077f6:	60f8      	str	r0, [r7, #12]
 80077f8:	607a      	str	r2, [r7, #4]
 80077fa:	603b      	str	r3, [r7, #0]
 80077fc:	460b      	mov	r3, r1
 80077fe:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007800:	7afb      	ldrb	r3, [r7, #11]
 8007802:	f003 020f 	and.w	r2, r3, #15
 8007806:	4613      	mov	r3, r2
 8007808:	00db      	lsls	r3, r3, #3
 800780a:	1a9b      	subs	r3, r3, r2
 800780c:	009b      	lsls	r3, r3, #2
 800780e:	3338      	adds	r3, #56	; 0x38
 8007810:	68fa      	ldr	r2, [r7, #12]
 8007812:	4413      	add	r3, r2
 8007814:	3304      	adds	r3, #4
 8007816:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8007818:	697b      	ldr	r3, [r7, #20]
 800781a:	687a      	ldr	r2, [r7, #4]
 800781c:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800781e:	697b      	ldr	r3, [r7, #20]
 8007820:	683a      	ldr	r2, [r7, #0]
 8007822:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8007824:	697b      	ldr	r3, [r7, #20]
 8007826:	2200      	movs	r2, #0
 8007828:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 800782a:	697b      	ldr	r3, [r7, #20]
 800782c:	2201      	movs	r2, #1
 800782e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007830:	7afb      	ldrb	r3, [r7, #11]
 8007832:	f003 030f 	and.w	r3, r3, #15
 8007836:	b2da      	uxtb	r2, r3
 8007838:	697b      	ldr	r3, [r7, #20]
 800783a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	691b      	ldr	r3, [r3, #16]
 8007840:	2b01      	cmp	r3, #1
 8007842:	d102      	bne.n	800784a <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8007844:	687a      	ldr	r2, [r7, #4]
 8007846:	697b      	ldr	r3, [r7, #20]
 8007848:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800784a:	7afb      	ldrb	r3, [r7, #11]
 800784c:	f003 030f 	and.w	r3, r3, #15
 8007850:	2b00      	cmp	r3, #0
 8007852:	d109      	bne.n	8007868 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	6818      	ldr	r0, [r3, #0]
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	691b      	ldr	r3, [r3, #16]
 800785c:	b2db      	uxtb	r3, r3
 800785e:	461a      	mov	r2, r3
 8007860:	6979      	ldr	r1, [r7, #20]
 8007862:	f002 fd7d 	bl	800a360 <USB_EP0StartXfer>
 8007866:	e008      	b.n	800787a <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	6818      	ldr	r0, [r3, #0]
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	691b      	ldr	r3, [r3, #16]
 8007870:	b2db      	uxtb	r3, r3
 8007872:	461a      	mov	r2, r3
 8007874:	6979      	ldr	r1, [r7, #20]
 8007876:	f002 fb2f 	bl	8009ed8 <USB_EPStartXfer>
  }

  return HAL_OK;
 800787a:	2300      	movs	r3, #0
}
 800787c:	4618      	mov	r0, r3
 800787e:	3718      	adds	r7, #24
 8007880:	46bd      	mov	sp, r7
 8007882:	bd80      	pop	{r7, pc}

08007884 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007884:	b580      	push	{r7, lr}
 8007886:	b084      	sub	sp, #16
 8007888:	af00      	add	r7, sp, #0
 800788a:	6078      	str	r0, [r7, #4]
 800788c:	460b      	mov	r3, r1
 800788e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8007890:	78fb      	ldrb	r3, [r7, #3]
 8007892:	f003 020f 	and.w	r2, r3, #15
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	685b      	ldr	r3, [r3, #4]
 800789a:	429a      	cmp	r2, r3
 800789c:	d901      	bls.n	80078a2 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800789e:	2301      	movs	r3, #1
 80078a0:	e050      	b.n	8007944 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80078a2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	da0f      	bge.n	80078ca <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80078aa:	78fb      	ldrb	r3, [r7, #3]
 80078ac:	f003 020f 	and.w	r2, r3, #15
 80078b0:	4613      	mov	r3, r2
 80078b2:	00db      	lsls	r3, r3, #3
 80078b4:	1a9b      	subs	r3, r3, r2
 80078b6:	009b      	lsls	r3, r3, #2
 80078b8:	3338      	adds	r3, #56	; 0x38
 80078ba:	687a      	ldr	r2, [r7, #4]
 80078bc:	4413      	add	r3, r2
 80078be:	3304      	adds	r3, #4
 80078c0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	2201      	movs	r2, #1
 80078c6:	705a      	strb	r2, [r3, #1]
 80078c8:	e00d      	b.n	80078e6 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80078ca:	78fa      	ldrb	r2, [r7, #3]
 80078cc:	4613      	mov	r3, r2
 80078ce:	00db      	lsls	r3, r3, #3
 80078d0:	1a9b      	subs	r3, r3, r2
 80078d2:	009b      	lsls	r3, r3, #2
 80078d4:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80078d8:	687a      	ldr	r2, [r7, #4]
 80078da:	4413      	add	r3, r2
 80078dc:	3304      	adds	r3, #4
 80078de:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	2200      	movs	r2, #0
 80078e4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	2201      	movs	r2, #1
 80078ea:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80078ec:	78fb      	ldrb	r3, [r7, #3]
 80078ee:	f003 030f 	and.w	r3, r3, #15
 80078f2:	b2da      	uxtb	r2, r3
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80078fe:	2b01      	cmp	r3, #1
 8007900:	d101      	bne.n	8007906 <HAL_PCD_EP_SetStall+0x82>
 8007902:	2302      	movs	r3, #2
 8007904:	e01e      	b.n	8007944 <HAL_PCD_EP_SetStall+0xc0>
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	2201      	movs	r2, #1
 800790a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	68f9      	ldr	r1, [r7, #12]
 8007914:	4618      	mov	r0, r3
 8007916:	f002 ff09 	bl	800a72c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800791a:	78fb      	ldrb	r3, [r7, #3]
 800791c:	f003 030f 	and.w	r3, r3, #15
 8007920:	2b00      	cmp	r3, #0
 8007922:	d10a      	bne.n	800793a <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	6818      	ldr	r0, [r3, #0]
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	691b      	ldr	r3, [r3, #16]
 800792c:	b2d9      	uxtb	r1, r3
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8007934:	461a      	mov	r2, r3
 8007936:	f003 f8ed 	bl	800ab14 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	2200      	movs	r2, #0
 800793e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8007942:	2300      	movs	r3, #0
}
 8007944:	4618      	mov	r0, r3
 8007946:	3710      	adds	r7, #16
 8007948:	46bd      	mov	sp, r7
 800794a:	bd80      	pop	{r7, pc}

0800794c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800794c:	b580      	push	{r7, lr}
 800794e:	b084      	sub	sp, #16
 8007950:	af00      	add	r7, sp, #0
 8007952:	6078      	str	r0, [r7, #4]
 8007954:	460b      	mov	r3, r1
 8007956:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8007958:	78fb      	ldrb	r3, [r7, #3]
 800795a:	f003 020f 	and.w	r2, r3, #15
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	685b      	ldr	r3, [r3, #4]
 8007962:	429a      	cmp	r2, r3
 8007964:	d901      	bls.n	800796a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8007966:	2301      	movs	r3, #1
 8007968:	e042      	b.n	80079f0 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800796a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800796e:	2b00      	cmp	r3, #0
 8007970:	da0f      	bge.n	8007992 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007972:	78fb      	ldrb	r3, [r7, #3]
 8007974:	f003 020f 	and.w	r2, r3, #15
 8007978:	4613      	mov	r3, r2
 800797a:	00db      	lsls	r3, r3, #3
 800797c:	1a9b      	subs	r3, r3, r2
 800797e:	009b      	lsls	r3, r3, #2
 8007980:	3338      	adds	r3, #56	; 0x38
 8007982:	687a      	ldr	r2, [r7, #4]
 8007984:	4413      	add	r3, r2
 8007986:	3304      	adds	r3, #4
 8007988:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	2201      	movs	r2, #1
 800798e:	705a      	strb	r2, [r3, #1]
 8007990:	e00f      	b.n	80079b2 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007992:	78fb      	ldrb	r3, [r7, #3]
 8007994:	f003 020f 	and.w	r2, r3, #15
 8007998:	4613      	mov	r3, r2
 800799a:	00db      	lsls	r3, r3, #3
 800799c:	1a9b      	subs	r3, r3, r2
 800799e:	009b      	lsls	r3, r3, #2
 80079a0:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80079a4:	687a      	ldr	r2, [r7, #4]
 80079a6:	4413      	add	r3, r2
 80079a8:	3304      	adds	r3, #4
 80079aa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	2200      	movs	r2, #0
 80079b0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	2200      	movs	r2, #0
 80079b6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80079b8:	78fb      	ldrb	r3, [r7, #3]
 80079ba:	f003 030f 	and.w	r3, r3, #15
 80079be:	b2da      	uxtb	r2, r3
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80079ca:	2b01      	cmp	r3, #1
 80079cc:	d101      	bne.n	80079d2 <HAL_PCD_EP_ClrStall+0x86>
 80079ce:	2302      	movs	r3, #2
 80079d0:	e00e      	b.n	80079f0 <HAL_PCD_EP_ClrStall+0xa4>
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	2201      	movs	r2, #1
 80079d6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	68f9      	ldr	r1, [r7, #12]
 80079e0:	4618      	mov	r0, r3
 80079e2:	f002 ff10 	bl	800a806 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	2200      	movs	r2, #0
 80079ea:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80079ee:	2300      	movs	r3, #0
}
 80079f0:	4618      	mov	r0, r3
 80079f2:	3710      	adds	r7, #16
 80079f4:	46bd      	mov	sp, r7
 80079f6:	bd80      	pop	{r7, pc}

080079f8 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80079f8:	b580      	push	{r7, lr}
 80079fa:	b08a      	sub	sp, #40	; 0x28
 80079fc:	af02      	add	r7, sp, #8
 80079fe:	6078      	str	r0, [r7, #4]
 8007a00:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a08:	697b      	ldr	r3, [r7, #20]
 8007a0a:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8007a0c:	683a      	ldr	r2, [r7, #0]
 8007a0e:	4613      	mov	r3, r2
 8007a10:	00db      	lsls	r3, r3, #3
 8007a12:	1a9b      	subs	r3, r3, r2
 8007a14:	009b      	lsls	r3, r3, #2
 8007a16:	3338      	adds	r3, #56	; 0x38
 8007a18:	687a      	ldr	r2, [r7, #4]
 8007a1a:	4413      	add	r3, r2
 8007a1c:	3304      	adds	r3, #4
 8007a1e:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	699a      	ldr	r2, [r3, #24]
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	695b      	ldr	r3, [r3, #20]
 8007a28:	429a      	cmp	r2, r3
 8007a2a:	d901      	bls.n	8007a30 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8007a2c:	2301      	movs	r3, #1
 8007a2e:	e06c      	b.n	8007b0a <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	695a      	ldr	r2, [r3, #20]
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	699b      	ldr	r3, [r3, #24]
 8007a38:	1ad3      	subs	r3, r2, r3
 8007a3a:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	689b      	ldr	r3, [r3, #8]
 8007a40:	69fa      	ldr	r2, [r7, #28]
 8007a42:	429a      	cmp	r2, r3
 8007a44:	d902      	bls.n	8007a4c <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	689b      	ldr	r3, [r3, #8]
 8007a4a:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8007a4c:	69fb      	ldr	r3, [r7, #28]
 8007a4e:	3303      	adds	r3, #3
 8007a50:	089b      	lsrs	r3, r3, #2
 8007a52:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8007a54:	e02b      	b.n	8007aae <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	695a      	ldr	r2, [r3, #20]
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	699b      	ldr	r3, [r3, #24]
 8007a5e:	1ad3      	subs	r3, r2, r3
 8007a60:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	689b      	ldr	r3, [r3, #8]
 8007a66:	69fa      	ldr	r2, [r7, #28]
 8007a68:	429a      	cmp	r2, r3
 8007a6a:	d902      	bls.n	8007a72 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	689b      	ldr	r3, [r3, #8]
 8007a70:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8007a72:	69fb      	ldr	r3, [r7, #28]
 8007a74:	3303      	adds	r3, #3
 8007a76:	089b      	lsrs	r3, r3, #2
 8007a78:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	68d9      	ldr	r1, [r3, #12]
 8007a7e:	683b      	ldr	r3, [r7, #0]
 8007a80:	b2da      	uxtb	r2, r3
 8007a82:	69fb      	ldr	r3, [r7, #28]
 8007a84:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8007a8a:	b2db      	uxtb	r3, r3
 8007a8c:	9300      	str	r3, [sp, #0]
 8007a8e:	4603      	mov	r3, r0
 8007a90:	6978      	ldr	r0, [r7, #20]
 8007a92:	f002 fdb7 	bl	800a604 <USB_WritePacket>

    ep->xfer_buff  += len;
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	68da      	ldr	r2, [r3, #12]
 8007a9a:	69fb      	ldr	r3, [r7, #28]
 8007a9c:	441a      	add	r2, r3
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	699a      	ldr	r2, [r3, #24]
 8007aa6:	69fb      	ldr	r3, [r7, #28]
 8007aa8:	441a      	add	r2, r3
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8007aae:	683b      	ldr	r3, [r7, #0]
 8007ab0:	015a      	lsls	r2, r3, #5
 8007ab2:	693b      	ldr	r3, [r7, #16]
 8007ab4:	4413      	add	r3, r2
 8007ab6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007aba:	699b      	ldr	r3, [r3, #24]
 8007abc:	b29b      	uxth	r3, r3
 8007abe:	69ba      	ldr	r2, [r7, #24]
 8007ac0:	429a      	cmp	r2, r3
 8007ac2:	d809      	bhi.n	8007ad8 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	699a      	ldr	r2, [r3, #24]
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8007acc:	429a      	cmp	r2, r3
 8007ace:	d203      	bcs.n	8007ad8 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	695b      	ldr	r3, [r3, #20]
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d1be      	bne.n	8007a56 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	695a      	ldr	r2, [r3, #20]
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	699b      	ldr	r3, [r3, #24]
 8007ae0:	429a      	cmp	r2, r3
 8007ae2:	d811      	bhi.n	8007b08 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8007ae4:	683b      	ldr	r3, [r7, #0]
 8007ae6:	f003 030f 	and.w	r3, r3, #15
 8007aea:	2201      	movs	r2, #1
 8007aec:	fa02 f303 	lsl.w	r3, r2, r3
 8007af0:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8007af2:	693b      	ldr	r3, [r7, #16]
 8007af4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007af8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007afa:	68bb      	ldr	r3, [r7, #8]
 8007afc:	43db      	mvns	r3, r3
 8007afe:	6939      	ldr	r1, [r7, #16]
 8007b00:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007b04:	4013      	ands	r3, r2
 8007b06:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8007b08:	2300      	movs	r3, #0
}
 8007b0a:	4618      	mov	r0, r3
 8007b0c:	3720      	adds	r7, #32
 8007b0e:	46bd      	mov	sp, r7
 8007b10:	bd80      	pop	{r7, pc}
	...

08007b14 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8007b14:	b580      	push	{r7, lr}
 8007b16:	b086      	sub	sp, #24
 8007b18:	af00      	add	r7, sp, #0
 8007b1a:	6078      	str	r0, [r7, #4]
 8007b1c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b24:	697b      	ldr	r3, [r7, #20]
 8007b26:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8007b28:	697b      	ldr	r3, [r7, #20]
 8007b2a:	333c      	adds	r3, #60	; 0x3c
 8007b2c:	3304      	adds	r3, #4
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8007b32:	683b      	ldr	r3, [r7, #0]
 8007b34:	015a      	lsls	r2, r3, #5
 8007b36:	693b      	ldr	r3, [r7, #16]
 8007b38:	4413      	add	r3, r2
 8007b3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b3e:	689b      	ldr	r3, [r3, #8]
 8007b40:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	691b      	ldr	r3, [r3, #16]
 8007b46:	2b01      	cmp	r3, #1
 8007b48:	f040 80a0 	bne.w	8007c8c <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8007b4c:	68bb      	ldr	r3, [r7, #8]
 8007b4e:	f003 0308 	and.w	r3, r3, #8
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d015      	beq.n	8007b82 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	4a72      	ldr	r2, [pc, #456]	; (8007d24 <PCD_EP_OutXfrComplete_int+0x210>)
 8007b5a:	4293      	cmp	r3, r2
 8007b5c:	f240 80dd 	bls.w	8007d1a <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8007b60:	68bb      	ldr	r3, [r7, #8]
 8007b62:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	f000 80d7 	beq.w	8007d1a <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007b6c:	683b      	ldr	r3, [r7, #0]
 8007b6e:	015a      	lsls	r2, r3, #5
 8007b70:	693b      	ldr	r3, [r7, #16]
 8007b72:	4413      	add	r3, r2
 8007b74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b78:	461a      	mov	r2, r3
 8007b7a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007b7e:	6093      	str	r3, [r2, #8]
 8007b80:	e0cb      	b.n	8007d1a <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8007b82:	68bb      	ldr	r3, [r7, #8]
 8007b84:	f003 0320 	and.w	r3, r3, #32
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d009      	beq.n	8007ba0 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8007b8c:	683b      	ldr	r3, [r7, #0]
 8007b8e:	015a      	lsls	r2, r3, #5
 8007b90:	693b      	ldr	r3, [r7, #16]
 8007b92:	4413      	add	r3, r2
 8007b94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b98:	461a      	mov	r2, r3
 8007b9a:	2320      	movs	r3, #32
 8007b9c:	6093      	str	r3, [r2, #8]
 8007b9e:	e0bc      	b.n	8007d1a <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8007ba0:	68bb      	ldr	r3, [r7, #8]
 8007ba2:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	f040 80b7 	bne.w	8007d1a <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	4a5d      	ldr	r2, [pc, #372]	; (8007d24 <PCD_EP_OutXfrComplete_int+0x210>)
 8007bb0:	4293      	cmp	r3, r2
 8007bb2:	d90f      	bls.n	8007bd4 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8007bb4:	68bb      	ldr	r3, [r7, #8]
 8007bb6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d00a      	beq.n	8007bd4 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007bbe:	683b      	ldr	r3, [r7, #0]
 8007bc0:	015a      	lsls	r2, r3, #5
 8007bc2:	693b      	ldr	r3, [r7, #16]
 8007bc4:	4413      	add	r3, r2
 8007bc6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007bca:	461a      	mov	r2, r3
 8007bcc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007bd0:	6093      	str	r3, [r2, #8]
 8007bd2:	e0a2      	b.n	8007d1a <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8007bd4:	6879      	ldr	r1, [r7, #4]
 8007bd6:	683a      	ldr	r2, [r7, #0]
 8007bd8:	4613      	mov	r3, r2
 8007bda:	00db      	lsls	r3, r3, #3
 8007bdc:	1a9b      	subs	r3, r3, r2
 8007bde:	009b      	lsls	r3, r3, #2
 8007be0:	440b      	add	r3, r1
 8007be2:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8007be6:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8007be8:	683b      	ldr	r3, [r7, #0]
 8007bea:	0159      	lsls	r1, r3, #5
 8007bec:	693b      	ldr	r3, [r7, #16]
 8007bee:	440b      	add	r3, r1
 8007bf0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007bf4:	691b      	ldr	r3, [r3, #16]
 8007bf6:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8007bfa:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8007bfc:	6878      	ldr	r0, [r7, #4]
 8007bfe:	683a      	ldr	r2, [r7, #0]
 8007c00:	4613      	mov	r3, r2
 8007c02:	00db      	lsls	r3, r3, #3
 8007c04:	1a9b      	subs	r3, r3, r2
 8007c06:	009b      	lsls	r3, r3, #2
 8007c08:	4403      	add	r3, r0
 8007c0a:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8007c0e:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8007c10:	6879      	ldr	r1, [r7, #4]
 8007c12:	683a      	ldr	r2, [r7, #0]
 8007c14:	4613      	mov	r3, r2
 8007c16:	00db      	lsls	r3, r3, #3
 8007c18:	1a9b      	subs	r3, r3, r2
 8007c1a:	009b      	lsls	r3, r3, #2
 8007c1c:	440b      	add	r3, r1
 8007c1e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8007c22:	6819      	ldr	r1, [r3, #0]
 8007c24:	6878      	ldr	r0, [r7, #4]
 8007c26:	683a      	ldr	r2, [r7, #0]
 8007c28:	4613      	mov	r3, r2
 8007c2a:	00db      	lsls	r3, r3, #3
 8007c2c:	1a9b      	subs	r3, r3, r2
 8007c2e:	009b      	lsls	r3, r3, #2
 8007c30:	4403      	add	r3, r0
 8007c32:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	4419      	add	r1, r3
 8007c3a:	6878      	ldr	r0, [r7, #4]
 8007c3c:	683a      	ldr	r2, [r7, #0]
 8007c3e:	4613      	mov	r3, r2
 8007c40:	00db      	lsls	r3, r3, #3
 8007c42:	1a9b      	subs	r3, r3, r2
 8007c44:	009b      	lsls	r3, r3, #2
 8007c46:	4403      	add	r3, r0
 8007c48:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8007c4c:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8007c4e:	683b      	ldr	r3, [r7, #0]
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d114      	bne.n	8007c7e <PCD_EP_OutXfrComplete_int+0x16a>
 8007c54:	6879      	ldr	r1, [r7, #4]
 8007c56:	683a      	ldr	r2, [r7, #0]
 8007c58:	4613      	mov	r3, r2
 8007c5a:	00db      	lsls	r3, r3, #3
 8007c5c:	1a9b      	subs	r3, r3, r2
 8007c5e:	009b      	lsls	r3, r3, #2
 8007c60:	440b      	add	r3, r1
 8007c62:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	d108      	bne.n	8007c7e <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	6818      	ldr	r0, [r3, #0]
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8007c76:	461a      	mov	r2, r3
 8007c78:	2101      	movs	r1, #1
 8007c7a:	f002 ff4b 	bl	800ab14 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8007c7e:	683b      	ldr	r3, [r7, #0]
 8007c80:	b2db      	uxtb	r3, r3
 8007c82:	4619      	mov	r1, r3
 8007c84:	6878      	ldr	r0, [r7, #4]
 8007c86:	f004 fde9 	bl	800c85c <HAL_PCD_DataOutStageCallback>
 8007c8a:	e046      	b.n	8007d1a <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	4a26      	ldr	r2, [pc, #152]	; (8007d28 <PCD_EP_OutXfrComplete_int+0x214>)
 8007c90:	4293      	cmp	r3, r2
 8007c92:	d124      	bne.n	8007cde <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8007c94:	68bb      	ldr	r3, [r7, #8]
 8007c96:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d00a      	beq.n	8007cb4 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007c9e:	683b      	ldr	r3, [r7, #0]
 8007ca0:	015a      	lsls	r2, r3, #5
 8007ca2:	693b      	ldr	r3, [r7, #16]
 8007ca4:	4413      	add	r3, r2
 8007ca6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007caa:	461a      	mov	r2, r3
 8007cac:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007cb0:	6093      	str	r3, [r2, #8]
 8007cb2:	e032      	b.n	8007d1a <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8007cb4:	68bb      	ldr	r3, [r7, #8]
 8007cb6:	f003 0320 	and.w	r3, r3, #32
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d008      	beq.n	8007cd0 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8007cbe:	683b      	ldr	r3, [r7, #0]
 8007cc0:	015a      	lsls	r2, r3, #5
 8007cc2:	693b      	ldr	r3, [r7, #16]
 8007cc4:	4413      	add	r3, r2
 8007cc6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007cca:	461a      	mov	r2, r3
 8007ccc:	2320      	movs	r3, #32
 8007cce:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8007cd0:	683b      	ldr	r3, [r7, #0]
 8007cd2:	b2db      	uxtb	r3, r3
 8007cd4:	4619      	mov	r1, r3
 8007cd6:	6878      	ldr	r0, [r7, #4]
 8007cd8:	f004 fdc0 	bl	800c85c <HAL_PCD_DataOutStageCallback>
 8007cdc:	e01d      	b.n	8007d1a <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8007cde:	683b      	ldr	r3, [r7, #0]
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d114      	bne.n	8007d0e <PCD_EP_OutXfrComplete_int+0x1fa>
 8007ce4:	6879      	ldr	r1, [r7, #4]
 8007ce6:	683a      	ldr	r2, [r7, #0]
 8007ce8:	4613      	mov	r3, r2
 8007cea:	00db      	lsls	r3, r3, #3
 8007cec:	1a9b      	subs	r3, r3, r2
 8007cee:	009b      	lsls	r3, r3, #2
 8007cf0:	440b      	add	r3, r1
 8007cf2:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d108      	bne.n	8007d0e <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	6818      	ldr	r0, [r3, #0]
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8007d06:	461a      	mov	r2, r3
 8007d08:	2100      	movs	r1, #0
 8007d0a:	f002 ff03 	bl	800ab14 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8007d0e:	683b      	ldr	r3, [r7, #0]
 8007d10:	b2db      	uxtb	r3, r3
 8007d12:	4619      	mov	r1, r3
 8007d14:	6878      	ldr	r0, [r7, #4]
 8007d16:	f004 fda1 	bl	800c85c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8007d1a:	2300      	movs	r3, #0
}
 8007d1c:	4618      	mov	r0, r3
 8007d1e:	3718      	adds	r7, #24
 8007d20:	46bd      	mov	sp, r7
 8007d22:	bd80      	pop	{r7, pc}
 8007d24:	4f54300a 	.word	0x4f54300a
 8007d28:	4f54310a 	.word	0x4f54310a

08007d2c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8007d2c:	b580      	push	{r7, lr}
 8007d2e:	b086      	sub	sp, #24
 8007d30:	af00      	add	r7, sp, #0
 8007d32:	6078      	str	r0, [r7, #4]
 8007d34:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d3c:	697b      	ldr	r3, [r7, #20]
 8007d3e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8007d40:	697b      	ldr	r3, [r7, #20]
 8007d42:	333c      	adds	r3, #60	; 0x3c
 8007d44:	3304      	adds	r3, #4
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8007d4a:	683b      	ldr	r3, [r7, #0]
 8007d4c:	015a      	lsls	r2, r3, #5
 8007d4e:	693b      	ldr	r3, [r7, #16]
 8007d50:	4413      	add	r3, r2
 8007d52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d56:	689b      	ldr	r3, [r3, #8]
 8007d58:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	4a15      	ldr	r2, [pc, #84]	; (8007db4 <PCD_EP_OutSetupPacket_int+0x88>)
 8007d5e:	4293      	cmp	r3, r2
 8007d60:	d90e      	bls.n	8007d80 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8007d62:	68bb      	ldr	r3, [r7, #8]
 8007d64:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d009      	beq.n	8007d80 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007d6c:	683b      	ldr	r3, [r7, #0]
 8007d6e:	015a      	lsls	r2, r3, #5
 8007d70:	693b      	ldr	r3, [r7, #16]
 8007d72:	4413      	add	r3, r2
 8007d74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d78:	461a      	mov	r2, r3
 8007d7a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007d7e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8007d80:	6878      	ldr	r0, [r7, #4]
 8007d82:	f004 fd59 	bl	800c838 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	4a0a      	ldr	r2, [pc, #40]	; (8007db4 <PCD_EP_OutSetupPacket_int+0x88>)
 8007d8a:	4293      	cmp	r3, r2
 8007d8c:	d90c      	bls.n	8007da8 <PCD_EP_OutSetupPacket_int+0x7c>
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	691b      	ldr	r3, [r3, #16]
 8007d92:	2b01      	cmp	r3, #1
 8007d94:	d108      	bne.n	8007da8 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	6818      	ldr	r0, [r3, #0]
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8007da0:	461a      	mov	r2, r3
 8007da2:	2101      	movs	r1, #1
 8007da4:	f002 feb6 	bl	800ab14 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8007da8:	2300      	movs	r3, #0
}
 8007daa:	4618      	mov	r0, r3
 8007dac:	3718      	adds	r7, #24
 8007dae:	46bd      	mov	sp, r7
 8007db0:	bd80      	pop	{r7, pc}
 8007db2:	bf00      	nop
 8007db4:	4f54300a 	.word	0x4f54300a

08007db8 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8007db8:	b480      	push	{r7}
 8007dba:	b085      	sub	sp, #20
 8007dbc:	af00      	add	r7, sp, #0
 8007dbe:	6078      	str	r0, [r7, #4]
 8007dc0:	460b      	mov	r3, r1
 8007dc2:	70fb      	strb	r3, [r7, #3]
 8007dc4:	4613      	mov	r3, r2
 8007dc6:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dce:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8007dd0:	78fb      	ldrb	r3, [r7, #3]
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d107      	bne.n	8007de6 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8007dd6:	883b      	ldrh	r3, [r7, #0]
 8007dd8:	0419      	lsls	r1, r3, #16
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	68ba      	ldr	r2, [r7, #8]
 8007de0:	430a      	orrs	r2, r1
 8007de2:	629a      	str	r2, [r3, #40]	; 0x28
 8007de4:	e028      	b.n	8007e38 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007dec:	0c1b      	lsrs	r3, r3, #16
 8007dee:	68ba      	ldr	r2, [r7, #8]
 8007df0:	4413      	add	r3, r2
 8007df2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8007df4:	2300      	movs	r3, #0
 8007df6:	73fb      	strb	r3, [r7, #15]
 8007df8:	e00d      	b.n	8007e16 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	681a      	ldr	r2, [r3, #0]
 8007dfe:	7bfb      	ldrb	r3, [r7, #15]
 8007e00:	3340      	adds	r3, #64	; 0x40
 8007e02:	009b      	lsls	r3, r3, #2
 8007e04:	4413      	add	r3, r2
 8007e06:	685b      	ldr	r3, [r3, #4]
 8007e08:	0c1b      	lsrs	r3, r3, #16
 8007e0a:	68ba      	ldr	r2, [r7, #8]
 8007e0c:	4413      	add	r3, r2
 8007e0e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8007e10:	7bfb      	ldrb	r3, [r7, #15]
 8007e12:	3301      	adds	r3, #1
 8007e14:	73fb      	strb	r3, [r7, #15]
 8007e16:	7bfa      	ldrb	r2, [r7, #15]
 8007e18:	78fb      	ldrb	r3, [r7, #3]
 8007e1a:	3b01      	subs	r3, #1
 8007e1c:	429a      	cmp	r2, r3
 8007e1e:	d3ec      	bcc.n	8007dfa <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8007e20:	883b      	ldrh	r3, [r7, #0]
 8007e22:	0418      	lsls	r0, r3, #16
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	6819      	ldr	r1, [r3, #0]
 8007e28:	78fb      	ldrb	r3, [r7, #3]
 8007e2a:	3b01      	subs	r3, #1
 8007e2c:	68ba      	ldr	r2, [r7, #8]
 8007e2e:	4302      	orrs	r2, r0
 8007e30:	3340      	adds	r3, #64	; 0x40
 8007e32:	009b      	lsls	r3, r3, #2
 8007e34:	440b      	add	r3, r1
 8007e36:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8007e38:	2300      	movs	r3, #0
}
 8007e3a:	4618      	mov	r0, r3
 8007e3c:	3714      	adds	r7, #20
 8007e3e:	46bd      	mov	sp, r7
 8007e40:	bc80      	pop	{r7}
 8007e42:	4770      	bx	lr

08007e44 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8007e44:	b480      	push	{r7}
 8007e46:	b083      	sub	sp, #12
 8007e48:	af00      	add	r7, sp, #0
 8007e4a:	6078      	str	r0, [r7, #4]
 8007e4c:	460b      	mov	r3, r1
 8007e4e:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	887a      	ldrh	r2, [r7, #2]
 8007e56:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8007e58:	2300      	movs	r3, #0
}
 8007e5a:	4618      	mov	r0, r3
 8007e5c:	370c      	adds	r7, #12
 8007e5e:	46bd      	mov	sp, r7
 8007e60:	bc80      	pop	{r7}
 8007e62:	4770      	bx	lr

08007e64 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007e64:	b580      	push	{r7, lr}
 8007e66:	b08a      	sub	sp, #40	; 0x28
 8007e68:	af00      	add	r7, sp, #0
 8007e6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d101      	bne.n	8007e76 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007e72:	2301      	movs	r3, #1
 8007e74:	e237      	b.n	80082e6 <HAL_RCC_OscConfig+0x482>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	f003 0301 	and.w	r3, r3, #1
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d050      	beq.n	8007f24 <HAL_RCC_OscConfig+0xc0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007e82:	4ba3      	ldr	r3, [pc, #652]	; (8008110 <HAL_RCC_OscConfig+0x2ac>)
 8007e84:	689b      	ldr	r3, [r3, #8]
 8007e86:	f003 030c 	and.w	r3, r3, #12
 8007e8a:	2b04      	cmp	r3, #4
 8007e8c:	d00c      	beq.n	8007ea8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007e8e:	4ba0      	ldr	r3, [pc, #640]	; (8008110 <HAL_RCC_OscConfig+0x2ac>)
 8007e90:	689b      	ldr	r3, [r3, #8]
 8007e92:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007e96:	2b08      	cmp	r3, #8
 8007e98:	d112      	bne.n	8007ec0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007e9a:	4b9d      	ldr	r3, [pc, #628]	; (8008110 <HAL_RCC_OscConfig+0x2ac>)
 8007e9c:	685b      	ldr	r3, [r3, #4]
 8007e9e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007ea2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007ea6:	d10b      	bne.n	8007ec0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007ea8:	4b99      	ldr	r3, [pc, #612]	; (8008110 <HAL_RCC_OscConfig+0x2ac>)
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d036      	beq.n	8007f22 <HAL_RCC_OscConfig+0xbe>
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	685b      	ldr	r3, [r3, #4]
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	d132      	bne.n	8007f22 <HAL_RCC_OscConfig+0xbe>
      {
        return HAL_ERROR;
 8007ebc:	2301      	movs	r3, #1
 8007ebe:	e212      	b.n	80082e6 <HAL_RCC_OscConfig+0x482>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	685a      	ldr	r2, [r3, #4]
 8007ec4:	4b93      	ldr	r3, [pc, #588]	; (8008114 <HAL_RCC_OscConfig+0x2b0>)
 8007ec6:	b2d2      	uxtb	r2, r2
 8007ec8:	701a      	strb	r2, [r3, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	685b      	ldr	r3, [r3, #4]
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d013      	beq.n	8007efa <HAL_RCC_OscConfig+0x96>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007ed2:	f7fc fd5d 	bl	8004990 <HAL_GetTick>
 8007ed6:	6238      	str	r0, [r7, #32]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007ed8:	e008      	b.n	8007eec <HAL_RCC_OscConfig+0x88>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007eda:	f7fc fd59 	bl	8004990 <HAL_GetTick>
 8007ede:	4602      	mov	r2, r0
 8007ee0:	6a3b      	ldr	r3, [r7, #32]
 8007ee2:	1ad3      	subs	r3, r2, r3
 8007ee4:	2b64      	cmp	r3, #100	; 0x64
 8007ee6:	d901      	bls.n	8007eec <HAL_RCC_OscConfig+0x88>
          {
            return HAL_TIMEOUT;
 8007ee8:	2303      	movs	r3, #3
 8007eea:	e1fc      	b.n	80082e6 <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007eec:	4b88      	ldr	r3, [pc, #544]	; (8008110 <HAL_RCC_OscConfig+0x2ac>)
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	d0f0      	beq.n	8007eda <HAL_RCC_OscConfig+0x76>
 8007ef8:	e014      	b.n	8007f24 <HAL_RCC_OscConfig+0xc0>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007efa:	f7fc fd49 	bl	8004990 <HAL_GetTick>
 8007efe:	6238      	str	r0, [r7, #32]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007f00:	e008      	b.n	8007f14 <HAL_RCC_OscConfig+0xb0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007f02:	f7fc fd45 	bl	8004990 <HAL_GetTick>
 8007f06:	4602      	mov	r2, r0
 8007f08:	6a3b      	ldr	r3, [r7, #32]
 8007f0a:	1ad3      	subs	r3, r2, r3
 8007f0c:	2b64      	cmp	r3, #100	; 0x64
 8007f0e:	d901      	bls.n	8007f14 <HAL_RCC_OscConfig+0xb0>
          {
            return HAL_TIMEOUT;
 8007f10:	2303      	movs	r3, #3
 8007f12:	e1e8      	b.n	80082e6 <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007f14:	4b7e      	ldr	r3, [pc, #504]	; (8008110 <HAL_RCC_OscConfig+0x2ac>)
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d1f0      	bne.n	8007f02 <HAL_RCC_OscConfig+0x9e>
 8007f20:	e000      	b.n	8007f24 <HAL_RCC_OscConfig+0xc0>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007f22:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	f003 0302 	and.w	r3, r3, #2
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	d077      	beq.n	8008020 <HAL_RCC_OscConfig+0x1bc>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007f30:	4b77      	ldr	r3, [pc, #476]	; (8008110 <HAL_RCC_OscConfig+0x2ac>)
 8007f32:	689b      	ldr	r3, [r3, #8]
 8007f34:	f003 030c 	and.w	r3, r3, #12
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	d00b      	beq.n	8007f54 <HAL_RCC_OscConfig+0xf0>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007f3c:	4b74      	ldr	r3, [pc, #464]	; (8008110 <HAL_RCC_OscConfig+0x2ac>)
 8007f3e:	689b      	ldr	r3, [r3, #8]
 8007f40:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007f44:	2b08      	cmp	r3, #8
 8007f46:	d126      	bne.n	8007f96 <HAL_RCC_OscConfig+0x132>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007f48:	4b71      	ldr	r3, [pc, #452]	; (8008110 <HAL_RCC_OscConfig+0x2ac>)
 8007f4a:	685b      	ldr	r3, [r3, #4]
 8007f4c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	d120      	bne.n	8007f96 <HAL_RCC_OscConfig+0x132>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007f54:	4b6e      	ldr	r3, [pc, #440]	; (8008110 <HAL_RCC_OscConfig+0x2ac>)
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	f003 0302 	and.w	r3, r3, #2
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d005      	beq.n	8007f6c <HAL_RCC_OscConfig+0x108>
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	68db      	ldr	r3, [r3, #12]
 8007f64:	2b01      	cmp	r3, #1
 8007f66:	d001      	beq.n	8007f6c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007f68:	2301      	movs	r3, #1
 8007f6a:	e1bc      	b.n	80082e6 <HAL_RCC_OscConfig+0x482>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007f6c:	4b68      	ldr	r3, [pc, #416]	; (8008110 <HAL_RCC_OscConfig+0x2ac>)
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	691b      	ldr	r3, [r3, #16]
 8007f78:	21f8      	movs	r1, #248	; 0xf8
 8007f7a:	61b9      	str	r1, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007f7c:	69b9      	ldr	r1, [r7, #24]
 8007f7e:	fa91 f1a1 	rbit	r1, r1
 8007f82:	6179      	str	r1, [r7, #20]
  return result;
 8007f84:	6979      	ldr	r1, [r7, #20]
 8007f86:	fab1 f181 	clz	r1, r1
 8007f8a:	b2c9      	uxtb	r1, r1
 8007f8c:	408b      	lsls	r3, r1
 8007f8e:	4960      	ldr	r1, [pc, #384]	; (8008110 <HAL_RCC_OscConfig+0x2ac>)
 8007f90:	4313      	orrs	r3, r2
 8007f92:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007f94:	e044      	b.n	8008020 <HAL_RCC_OscConfig+0x1bc>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	68db      	ldr	r3, [r3, #12]
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d02a      	beq.n	8007ff4 <HAL_RCC_OscConfig+0x190>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007f9e:	4b5e      	ldr	r3, [pc, #376]	; (8008118 <HAL_RCC_OscConfig+0x2b4>)
 8007fa0:	2201      	movs	r2, #1
 8007fa2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007fa4:	f7fc fcf4 	bl	8004990 <HAL_GetTick>
 8007fa8:	6238      	str	r0, [r7, #32]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007faa:	e008      	b.n	8007fbe <HAL_RCC_OscConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007fac:	f7fc fcf0 	bl	8004990 <HAL_GetTick>
 8007fb0:	4602      	mov	r2, r0
 8007fb2:	6a3b      	ldr	r3, [r7, #32]
 8007fb4:	1ad3      	subs	r3, r2, r3
 8007fb6:	2b02      	cmp	r3, #2
 8007fb8:	d901      	bls.n	8007fbe <HAL_RCC_OscConfig+0x15a>
          {
            return HAL_TIMEOUT;
 8007fba:	2303      	movs	r3, #3
 8007fbc:	e193      	b.n	80082e6 <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007fbe:	4b54      	ldr	r3, [pc, #336]	; (8008110 <HAL_RCC_OscConfig+0x2ac>)
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	f003 0302 	and.w	r3, r3, #2
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d0f0      	beq.n	8007fac <HAL_RCC_OscConfig+0x148>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007fca:	4b51      	ldr	r3, [pc, #324]	; (8008110 <HAL_RCC_OscConfig+0x2ac>)
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	691b      	ldr	r3, [r3, #16]
 8007fd6:	21f8      	movs	r1, #248	; 0xf8
 8007fd8:	6139      	str	r1, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007fda:	6939      	ldr	r1, [r7, #16]
 8007fdc:	fa91 f1a1 	rbit	r1, r1
 8007fe0:	60f9      	str	r1, [r7, #12]
  return result;
 8007fe2:	68f9      	ldr	r1, [r7, #12]
 8007fe4:	fab1 f181 	clz	r1, r1
 8007fe8:	b2c9      	uxtb	r1, r1
 8007fea:	408b      	lsls	r3, r1
 8007fec:	4948      	ldr	r1, [pc, #288]	; (8008110 <HAL_RCC_OscConfig+0x2ac>)
 8007fee:	4313      	orrs	r3, r2
 8007ff0:	600b      	str	r3, [r1, #0]
 8007ff2:	e015      	b.n	8008020 <HAL_RCC_OscConfig+0x1bc>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007ff4:	4b48      	ldr	r3, [pc, #288]	; (8008118 <HAL_RCC_OscConfig+0x2b4>)
 8007ff6:	2200      	movs	r2, #0
 8007ff8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007ffa:	f7fc fcc9 	bl	8004990 <HAL_GetTick>
 8007ffe:	6238      	str	r0, [r7, #32]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008000:	e008      	b.n	8008014 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008002:	f7fc fcc5 	bl	8004990 <HAL_GetTick>
 8008006:	4602      	mov	r2, r0
 8008008:	6a3b      	ldr	r3, [r7, #32]
 800800a:	1ad3      	subs	r3, r2, r3
 800800c:	2b02      	cmp	r3, #2
 800800e:	d901      	bls.n	8008014 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8008010:	2303      	movs	r3, #3
 8008012:	e168      	b.n	80082e6 <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008014:	4b3e      	ldr	r3, [pc, #248]	; (8008110 <HAL_RCC_OscConfig+0x2ac>)
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	f003 0302 	and.w	r3, r3, #2
 800801c:	2b00      	cmp	r3, #0
 800801e:	d1f0      	bne.n	8008002 <HAL_RCC_OscConfig+0x19e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	f003 0308 	and.w	r3, r3, #8
 8008028:	2b00      	cmp	r3, #0
 800802a:	d030      	beq.n	800808e <HAL_RCC_OscConfig+0x22a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	695b      	ldr	r3, [r3, #20]
 8008030:	2b00      	cmp	r3, #0
 8008032:	d016      	beq.n	8008062 <HAL_RCC_OscConfig+0x1fe>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008034:	4b39      	ldr	r3, [pc, #228]	; (800811c <HAL_RCC_OscConfig+0x2b8>)
 8008036:	2201      	movs	r2, #1
 8008038:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800803a:	f7fc fca9 	bl	8004990 <HAL_GetTick>
 800803e:	6238      	str	r0, [r7, #32]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008040:	e008      	b.n	8008054 <HAL_RCC_OscConfig+0x1f0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008042:	f7fc fca5 	bl	8004990 <HAL_GetTick>
 8008046:	4602      	mov	r2, r0
 8008048:	6a3b      	ldr	r3, [r7, #32]
 800804a:	1ad3      	subs	r3, r2, r3
 800804c:	2b02      	cmp	r3, #2
 800804e:	d901      	bls.n	8008054 <HAL_RCC_OscConfig+0x1f0>
        {
          return HAL_TIMEOUT;
 8008050:	2303      	movs	r3, #3
 8008052:	e148      	b.n	80082e6 <HAL_RCC_OscConfig+0x482>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008054:	4b2e      	ldr	r3, [pc, #184]	; (8008110 <HAL_RCC_OscConfig+0x2ac>)
 8008056:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008058:	f003 0302 	and.w	r3, r3, #2
 800805c:	2b00      	cmp	r3, #0
 800805e:	d0f0      	beq.n	8008042 <HAL_RCC_OscConfig+0x1de>
 8008060:	e015      	b.n	800808e <HAL_RCC_OscConfig+0x22a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008062:	4b2e      	ldr	r3, [pc, #184]	; (800811c <HAL_RCC_OscConfig+0x2b8>)
 8008064:	2200      	movs	r2, #0
 8008066:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008068:	f7fc fc92 	bl	8004990 <HAL_GetTick>
 800806c:	6238      	str	r0, [r7, #32]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800806e:	e008      	b.n	8008082 <HAL_RCC_OscConfig+0x21e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008070:	f7fc fc8e 	bl	8004990 <HAL_GetTick>
 8008074:	4602      	mov	r2, r0
 8008076:	6a3b      	ldr	r3, [r7, #32]
 8008078:	1ad3      	subs	r3, r2, r3
 800807a:	2b02      	cmp	r3, #2
 800807c:	d901      	bls.n	8008082 <HAL_RCC_OscConfig+0x21e>
        {
          return HAL_TIMEOUT;
 800807e:	2303      	movs	r3, #3
 8008080:	e131      	b.n	80082e6 <HAL_RCC_OscConfig+0x482>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008082:	4b23      	ldr	r3, [pc, #140]	; (8008110 <HAL_RCC_OscConfig+0x2ac>)
 8008084:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008086:	f003 0302 	and.w	r3, r3, #2
 800808a:	2b00      	cmp	r3, #0
 800808c:	d1f0      	bne.n	8008070 <HAL_RCC_OscConfig+0x20c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	f003 0304 	and.w	r3, r3, #4
 8008096:	2b00      	cmp	r3, #0
 8008098:	f000 8088 	beq.w	80081ac <HAL_RCC_OscConfig+0x348>
  {
    FlagStatus       pwrclkchanged = RESET;
 800809c:	2300      	movs	r3, #0
 800809e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80080a2:	4b1b      	ldr	r3, [pc, #108]	; (8008110 <HAL_RCC_OscConfig+0x2ac>)
 80080a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d110      	bne.n	80080d0 <HAL_RCC_OscConfig+0x26c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80080ae:	2300      	movs	r3, #0
 80080b0:	60bb      	str	r3, [r7, #8]
 80080b2:	4b17      	ldr	r3, [pc, #92]	; (8008110 <HAL_RCC_OscConfig+0x2ac>)
 80080b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080b6:	4a16      	ldr	r2, [pc, #88]	; (8008110 <HAL_RCC_OscConfig+0x2ac>)
 80080b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80080bc:	6413      	str	r3, [r2, #64]	; 0x40
 80080be:	4b14      	ldr	r3, [pc, #80]	; (8008110 <HAL_RCC_OscConfig+0x2ac>)
 80080c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80080c6:	60bb      	str	r3, [r7, #8]
 80080c8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80080ca:	2301      	movs	r3, #1
 80080cc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80080d0:	4b13      	ldr	r3, [pc, #76]	; (8008120 <HAL_RCC_OscConfig+0x2bc>)
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	4a12      	ldr	r2, [pc, #72]	; (8008120 <HAL_RCC_OscConfig+0x2bc>)
 80080d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80080da:	6013      	str	r3, [r2, #0]

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80080dc:	4b10      	ldr	r3, [pc, #64]	; (8008120 <HAL_RCC_OscConfig+0x2bc>)
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d123      	bne.n	8008130 <HAL_RCC_OscConfig+0x2cc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80080e8:	4b0d      	ldr	r3, [pc, #52]	; (8008120 <HAL_RCC_OscConfig+0x2bc>)
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	4a0c      	ldr	r2, [pc, #48]	; (8008120 <HAL_RCC_OscConfig+0x2bc>)
 80080ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80080f2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80080f4:	f7fc fc4c 	bl	8004990 <HAL_GetTick>
 80080f8:	6238      	str	r0, [r7, #32]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80080fa:	e013      	b.n	8008124 <HAL_RCC_OscConfig+0x2c0>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80080fc:	f7fc fc48 	bl	8004990 <HAL_GetTick>
 8008100:	4602      	mov	r2, r0
 8008102:	6a3b      	ldr	r3, [r7, #32]
 8008104:	1ad3      	subs	r3, r2, r3
 8008106:	2b02      	cmp	r3, #2
 8008108:	d90c      	bls.n	8008124 <HAL_RCC_OscConfig+0x2c0>
        {
          return HAL_TIMEOUT;
 800810a:	2303      	movs	r3, #3
 800810c:	e0eb      	b.n	80082e6 <HAL_RCC_OscConfig+0x482>
 800810e:	bf00      	nop
 8008110:	40023800 	.word	0x40023800
 8008114:	40023802 	.word	0x40023802
 8008118:	42470000 	.word	0x42470000
 800811c:	42470e80 	.word	0x42470e80
 8008120:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008124:	4b72      	ldr	r3, [pc, #456]	; (80082f0 <HAL_RCC_OscConfig+0x48c>)
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800812c:	2b00      	cmp	r3, #0
 800812e:	d0e5      	beq.n	80080fc <HAL_RCC_OscConfig+0x298>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	689a      	ldr	r2, [r3, #8]
 8008134:	4b6f      	ldr	r3, [pc, #444]	; (80082f4 <HAL_RCC_OscConfig+0x490>)
 8008136:	b2d2      	uxtb	r2, r2
 8008138:	701a      	strb	r2, [r3, #0]
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	689b      	ldr	r3, [r3, #8]
 800813e:	2b00      	cmp	r3, #0
 8008140:	d015      	beq.n	800816e <HAL_RCC_OscConfig+0x30a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008142:	f7fc fc25 	bl	8004990 <HAL_GetTick>
 8008146:	6238      	str	r0, [r7, #32]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008148:	e00a      	b.n	8008160 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800814a:	f7fc fc21 	bl	8004990 <HAL_GetTick>
 800814e:	4602      	mov	r2, r0
 8008150:	6a3b      	ldr	r3, [r7, #32]
 8008152:	1ad3      	subs	r3, r2, r3
 8008154:	f241 3288 	movw	r2, #5000	; 0x1388
 8008158:	4293      	cmp	r3, r2
 800815a:	d901      	bls.n	8008160 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 800815c:	2303      	movs	r3, #3
 800815e:	e0c2      	b.n	80082e6 <HAL_RCC_OscConfig+0x482>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008160:	4b65      	ldr	r3, [pc, #404]	; (80082f8 <HAL_RCC_OscConfig+0x494>)
 8008162:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008164:	f003 0302 	and.w	r3, r3, #2
 8008168:	2b00      	cmp	r3, #0
 800816a:	d0ee      	beq.n	800814a <HAL_RCC_OscConfig+0x2e6>
 800816c:	e014      	b.n	8008198 <HAL_RCC_OscConfig+0x334>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800816e:	f7fc fc0f 	bl	8004990 <HAL_GetTick>
 8008172:	6238      	str	r0, [r7, #32]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008174:	e00a      	b.n	800818c <HAL_RCC_OscConfig+0x328>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008176:	f7fc fc0b 	bl	8004990 <HAL_GetTick>
 800817a:	4602      	mov	r2, r0
 800817c:	6a3b      	ldr	r3, [r7, #32]
 800817e:	1ad3      	subs	r3, r2, r3
 8008180:	f241 3288 	movw	r2, #5000	; 0x1388
 8008184:	4293      	cmp	r3, r2
 8008186:	d901      	bls.n	800818c <HAL_RCC_OscConfig+0x328>
        {
          return HAL_TIMEOUT;
 8008188:	2303      	movs	r3, #3
 800818a:	e0ac      	b.n	80082e6 <HAL_RCC_OscConfig+0x482>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800818c:	4b5a      	ldr	r3, [pc, #360]	; (80082f8 <HAL_RCC_OscConfig+0x494>)
 800818e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008190:	f003 0302 	and.w	r3, r3, #2
 8008194:	2b00      	cmp	r3, #0
 8008196:	d1ee      	bne.n	8008176 <HAL_RCC_OscConfig+0x312>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008198:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800819c:	2b01      	cmp	r3, #1
 800819e:	d105      	bne.n	80081ac <HAL_RCC_OscConfig+0x348>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80081a0:	4b55      	ldr	r3, [pc, #340]	; (80082f8 <HAL_RCC_OscConfig+0x494>)
 80081a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081a4:	4a54      	ldr	r2, [pc, #336]	; (80082f8 <HAL_RCC_OscConfig+0x494>)
 80081a6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80081aa:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	699b      	ldr	r3, [r3, #24]
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	f000 8097 	beq.w	80082e4 <HAL_RCC_OscConfig+0x480>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80081b6:	4b50      	ldr	r3, [pc, #320]	; (80082f8 <HAL_RCC_OscConfig+0x494>)
 80081b8:	689b      	ldr	r3, [r3, #8]
 80081ba:	f003 030c 	and.w	r3, r3, #12
 80081be:	2b08      	cmp	r3, #8
 80081c0:	d061      	beq.n	8008286 <HAL_RCC_OscConfig+0x422>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	699b      	ldr	r3, [r3, #24]
 80081c6:	2b02      	cmp	r3, #2
 80081c8:	d146      	bne.n	8008258 <HAL_RCC_OscConfig+0x3f4>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80081ca:	4b4c      	ldr	r3, [pc, #304]	; (80082fc <HAL_RCC_OscConfig+0x498>)
 80081cc:	2200      	movs	r2, #0
 80081ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80081d0:	f7fc fbde 	bl	8004990 <HAL_GetTick>
 80081d4:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80081d6:	e008      	b.n	80081ea <HAL_RCC_OscConfig+0x386>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80081d8:	f7fc fbda 	bl	8004990 <HAL_GetTick>
 80081dc:	4602      	mov	r2, r0
 80081de:	6a3b      	ldr	r3, [r7, #32]
 80081e0:	1ad3      	subs	r3, r2, r3
 80081e2:	2b64      	cmp	r3, #100	; 0x64
 80081e4:	d901      	bls.n	80081ea <HAL_RCC_OscConfig+0x386>
          {
            return HAL_TIMEOUT;
 80081e6:	2303      	movs	r3, #3
 80081e8:	e07d      	b.n	80082e6 <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80081ea:	4b43      	ldr	r3, [pc, #268]	; (80082f8 <HAL_RCC_OscConfig+0x494>)
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d1f0      	bne.n	80081d8 <HAL_RCC_OscConfig+0x374>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80081f6:	4b40      	ldr	r3, [pc, #256]	; (80082f8 <HAL_RCC_OscConfig+0x494>)
 80081f8:	685a      	ldr	r2, [r3, #4]
 80081fa:	4b41      	ldr	r3, [pc, #260]	; (8008300 <HAL_RCC_OscConfig+0x49c>)
 80081fc:	4013      	ands	r3, r2
 80081fe:	687a      	ldr	r2, [r7, #4]
 8008200:	69d1      	ldr	r1, [r2, #28]
 8008202:	687a      	ldr	r2, [r7, #4]
 8008204:	6a12      	ldr	r2, [r2, #32]
 8008206:	4311      	orrs	r1, r2
 8008208:	687a      	ldr	r2, [r7, #4]
 800820a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800820c:	0192      	lsls	r2, r2, #6
 800820e:	4311      	orrs	r1, r2
 8008210:	687a      	ldr	r2, [r7, #4]
 8008212:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8008214:	0612      	lsls	r2, r2, #24
 8008216:	4311      	orrs	r1, r2
 8008218:	687a      	ldr	r2, [r7, #4]
 800821a:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800821c:	0852      	lsrs	r2, r2, #1
 800821e:	3a01      	subs	r2, #1
 8008220:	0412      	lsls	r2, r2, #16
 8008222:	430a      	orrs	r2, r1
 8008224:	4934      	ldr	r1, [pc, #208]	; (80082f8 <HAL_RCC_OscConfig+0x494>)
 8008226:	4313      	orrs	r3, r2
 8008228:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800822a:	4b34      	ldr	r3, [pc, #208]	; (80082fc <HAL_RCC_OscConfig+0x498>)
 800822c:	2201      	movs	r2, #1
 800822e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008230:	f7fc fbae 	bl	8004990 <HAL_GetTick>
 8008234:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008236:	e008      	b.n	800824a <HAL_RCC_OscConfig+0x3e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008238:	f7fc fbaa 	bl	8004990 <HAL_GetTick>
 800823c:	4602      	mov	r2, r0
 800823e:	6a3b      	ldr	r3, [r7, #32]
 8008240:	1ad3      	subs	r3, r2, r3
 8008242:	2b64      	cmp	r3, #100	; 0x64
 8008244:	d901      	bls.n	800824a <HAL_RCC_OscConfig+0x3e6>
          {
            return HAL_TIMEOUT;
 8008246:	2303      	movs	r3, #3
 8008248:	e04d      	b.n	80082e6 <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800824a:	4b2b      	ldr	r3, [pc, #172]	; (80082f8 <HAL_RCC_OscConfig+0x494>)
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008252:	2b00      	cmp	r3, #0
 8008254:	d0f0      	beq.n	8008238 <HAL_RCC_OscConfig+0x3d4>
 8008256:	e045      	b.n	80082e4 <HAL_RCC_OscConfig+0x480>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008258:	4b28      	ldr	r3, [pc, #160]	; (80082fc <HAL_RCC_OscConfig+0x498>)
 800825a:	2200      	movs	r2, #0
 800825c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800825e:	f7fc fb97 	bl	8004990 <HAL_GetTick>
 8008262:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008264:	e008      	b.n	8008278 <HAL_RCC_OscConfig+0x414>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008266:	f7fc fb93 	bl	8004990 <HAL_GetTick>
 800826a:	4602      	mov	r2, r0
 800826c:	6a3b      	ldr	r3, [r7, #32]
 800826e:	1ad3      	subs	r3, r2, r3
 8008270:	2b64      	cmp	r3, #100	; 0x64
 8008272:	d901      	bls.n	8008278 <HAL_RCC_OscConfig+0x414>
          {
            return HAL_TIMEOUT;
 8008274:	2303      	movs	r3, #3
 8008276:	e036      	b.n	80082e6 <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008278:	4b1f      	ldr	r3, [pc, #124]	; (80082f8 <HAL_RCC_OscConfig+0x494>)
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008280:	2b00      	cmp	r3, #0
 8008282:	d1f0      	bne.n	8008266 <HAL_RCC_OscConfig+0x402>
 8008284:	e02e      	b.n	80082e4 <HAL_RCC_OscConfig+0x480>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	699b      	ldr	r3, [r3, #24]
 800828a:	2b01      	cmp	r3, #1
 800828c:	d101      	bne.n	8008292 <HAL_RCC_OscConfig+0x42e>
      {
        return HAL_ERROR;
 800828e:	2301      	movs	r3, #1
 8008290:	e029      	b.n	80082e6 <HAL_RCC_OscConfig+0x482>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        uint32_t pllcfgr = RCC->PLLCFGR;
 8008292:	4b19      	ldr	r3, [pc, #100]	; (80082f8 <HAL_RCC_OscConfig+0x494>)
 8008294:	685b      	ldr	r3, [r3, #4]
 8008296:	61fb      	str	r3, [r7, #28]
      
        if((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008298:	69fb      	ldr	r3, [r7, #28]
 800829a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	69db      	ldr	r3, [r3, #28]
 80082a2:	429a      	cmp	r2, r3
 80082a4:	d11c      	bne.n	80082e0 <HAL_RCC_OscConfig+0x47c>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80082a6:	69fb      	ldr	r3, [r7, #28]
 80082a8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80082b0:	429a      	cmp	r2, r3
 80082b2:	d115      	bne.n	80082e0 <HAL_RCC_OscConfig+0x47c>
           ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80082b4:	69fb      	ldr	r3, [r7, #28]
 80082b6:	099b      	lsrs	r3, r3, #6
 80082b8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80082c0:	429a      	cmp	r2, r3
 80082c2:	d10d      	bne.n	80082e0 <HAL_RCC_OscConfig+0x47c>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80082c4:	69fb      	ldr	r3, [r7, #28]
 80082c6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80082ce:	429a      	cmp	r2, r3
 80082d0:	d106      	bne.n	80082e0 <HAL_RCC_OscConfig+0x47c>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80082d2:	69fb      	ldr	r3, [r7, #28]
 80082d4:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80082dc:	429a      	cmp	r2, r3
 80082de:	d001      	beq.n	80082e4 <HAL_RCC_OscConfig+0x480>
        {
          return HAL_ERROR;
 80082e0:	2301      	movs	r3, #1
 80082e2:	e000      	b.n	80082e6 <HAL_RCC_OscConfig+0x482>
        }
      }
    }
  }
  return HAL_OK;
 80082e4:	2300      	movs	r3, #0
}
 80082e6:	4618      	mov	r0, r3
 80082e8:	3728      	adds	r7, #40	; 0x28
 80082ea:	46bd      	mov	sp, r7
 80082ec:	bd80      	pop	{r7, pc}
 80082ee:	bf00      	nop
 80082f0:	40007000 	.word	0x40007000
 80082f4:	40023870 	.word	0x40023870
 80082f8:	40023800 	.word	0x40023800
 80082fc:	42470060 	.word	0x42470060
 8008300:	f0bc8000 	.word	0xf0bc8000

08008304 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008304:	b580      	push	{r7, lr}
 8008306:	b086      	sub	sp, #24
 8008308:	af00      	add	r7, sp, #0
 800830a:	6078      	str	r0, [r7, #4]
 800830c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	2b00      	cmp	r3, #0
 8008312:	d101      	bne.n	8008318 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008314:	2301      	movs	r3, #1
 8008316:	e0d2      	b.n	80084be <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008318:	4b6b      	ldr	r3, [pc, #428]	; (80084c8 <HAL_RCC_ClockConfig+0x1c4>)
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	f003 030f 	and.w	r3, r3, #15
 8008320:	683a      	ldr	r2, [r7, #0]
 8008322:	429a      	cmp	r2, r3
 8008324:	d90c      	bls.n	8008340 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008326:	4b68      	ldr	r3, [pc, #416]	; (80084c8 <HAL_RCC_ClockConfig+0x1c4>)
 8008328:	683a      	ldr	r2, [r7, #0]
 800832a:	b2d2      	uxtb	r2, r2
 800832c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800832e:	4b66      	ldr	r3, [pc, #408]	; (80084c8 <HAL_RCC_ClockConfig+0x1c4>)
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	f003 030f 	and.w	r3, r3, #15
 8008336:	683a      	ldr	r2, [r7, #0]
 8008338:	429a      	cmp	r2, r3
 800833a:	d001      	beq.n	8008340 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800833c:	2301      	movs	r3, #1
 800833e:	e0be      	b.n	80084be <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	f003 0302 	and.w	r3, r3, #2
 8008348:	2b00      	cmp	r3, #0
 800834a:	d020      	beq.n	800838e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	f003 0304 	and.w	r3, r3, #4
 8008354:	2b00      	cmp	r3, #0
 8008356:	d005      	beq.n	8008364 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008358:	4b5c      	ldr	r3, [pc, #368]	; (80084cc <HAL_RCC_ClockConfig+0x1c8>)
 800835a:	689b      	ldr	r3, [r3, #8]
 800835c:	4a5b      	ldr	r2, [pc, #364]	; (80084cc <HAL_RCC_ClockConfig+0x1c8>)
 800835e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8008362:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	f003 0308 	and.w	r3, r3, #8
 800836c:	2b00      	cmp	r3, #0
 800836e:	d005      	beq.n	800837c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3U));
 8008370:	4b56      	ldr	r3, [pc, #344]	; (80084cc <HAL_RCC_ClockConfig+0x1c8>)
 8008372:	689b      	ldr	r3, [r3, #8]
 8008374:	4a55      	ldr	r2, [pc, #340]	; (80084cc <HAL_RCC_ClockConfig+0x1c8>)
 8008376:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800837a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800837c:	4b53      	ldr	r3, [pc, #332]	; (80084cc <HAL_RCC_ClockConfig+0x1c8>)
 800837e:	689b      	ldr	r3, [r3, #8]
 8008380:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	689b      	ldr	r3, [r3, #8]
 8008388:	4950      	ldr	r1, [pc, #320]	; (80084cc <HAL_RCC_ClockConfig+0x1c8>)
 800838a:	4313      	orrs	r3, r2
 800838c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	f003 0301 	and.w	r3, r3, #1
 8008396:	2b00      	cmp	r3, #0
 8008398:	d040      	beq.n	800841c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	685b      	ldr	r3, [r3, #4]
 800839e:	2b01      	cmp	r3, #1
 80083a0:	d107      	bne.n	80083b2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80083a2:	4b4a      	ldr	r3, [pc, #296]	; (80084cc <HAL_RCC_ClockConfig+0x1c8>)
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d115      	bne.n	80083da <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80083ae:	2301      	movs	r3, #1
 80083b0:	e085      	b.n	80084be <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	685b      	ldr	r3, [r3, #4]
 80083b6:	2b02      	cmp	r3, #2
 80083b8:	d107      	bne.n	80083ca <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80083ba:	4b44      	ldr	r3, [pc, #272]	; (80084cc <HAL_RCC_ClockConfig+0x1c8>)
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d109      	bne.n	80083da <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80083c6:	2301      	movs	r3, #1
 80083c8:	e079      	b.n	80084be <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80083ca:	4b40      	ldr	r3, [pc, #256]	; (80084cc <HAL_RCC_ClockConfig+0x1c8>)
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	f003 0302 	and.w	r3, r3, #2
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	d101      	bne.n	80083da <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80083d6:	2301      	movs	r3, #1
 80083d8:	e071      	b.n	80084be <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80083da:	4b3c      	ldr	r3, [pc, #240]	; (80084cc <HAL_RCC_ClockConfig+0x1c8>)
 80083dc:	689b      	ldr	r3, [r3, #8]
 80083de:	f023 0203 	bic.w	r2, r3, #3
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	685b      	ldr	r3, [r3, #4]
 80083e6:	4939      	ldr	r1, [pc, #228]	; (80084cc <HAL_RCC_ClockConfig+0x1c8>)
 80083e8:	4313      	orrs	r3, r2
 80083ea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80083ec:	f7fc fad0 	bl	8004990 <HAL_GetTick>
 80083f0:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80083f2:	e00a      	b.n	800840a <HAL_RCC_ClockConfig+0x106>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80083f4:	f7fc facc 	bl	8004990 <HAL_GetTick>
 80083f8:	4602      	mov	r2, r0
 80083fa:	697b      	ldr	r3, [r7, #20]
 80083fc:	1ad3      	subs	r3, r2, r3
 80083fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8008402:	4293      	cmp	r3, r2
 8008404:	d901      	bls.n	800840a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8008406:	2303      	movs	r3, #3
 8008408:	e059      	b.n	80084be <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800840a:	4b30      	ldr	r3, [pc, #192]	; (80084cc <HAL_RCC_ClockConfig+0x1c8>)
 800840c:	689b      	ldr	r3, [r3, #8]
 800840e:	f003 020c 	and.w	r2, r3, #12
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	685b      	ldr	r3, [r3, #4]
 8008416:	009b      	lsls	r3, r3, #2
 8008418:	429a      	cmp	r2, r3
 800841a:	d1eb      	bne.n	80083f4 <HAL_RCC_ClockConfig+0xf0>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800841c:	4b2a      	ldr	r3, [pc, #168]	; (80084c8 <HAL_RCC_ClockConfig+0x1c4>)
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	f003 030f 	and.w	r3, r3, #15
 8008424:	683a      	ldr	r2, [r7, #0]
 8008426:	429a      	cmp	r2, r3
 8008428:	d20c      	bcs.n	8008444 <HAL_RCC_ClockConfig+0x140>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800842a:	4b27      	ldr	r3, [pc, #156]	; (80084c8 <HAL_RCC_ClockConfig+0x1c4>)
 800842c:	683a      	ldr	r2, [r7, #0]
 800842e:	b2d2      	uxtb	r2, r2
 8008430:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008432:	4b25      	ldr	r3, [pc, #148]	; (80084c8 <HAL_RCC_ClockConfig+0x1c4>)
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	f003 030f 	and.w	r3, r3, #15
 800843a:	683a      	ldr	r2, [r7, #0]
 800843c:	429a      	cmp	r2, r3
 800843e:	d001      	beq.n	8008444 <HAL_RCC_ClockConfig+0x140>
    {
      return HAL_ERROR;
 8008440:	2301      	movs	r3, #1
 8008442:	e03c      	b.n	80084be <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	f003 0304 	and.w	r3, r3, #4
 800844c:	2b00      	cmp	r3, #0
 800844e:	d008      	beq.n	8008462 <HAL_RCC_ClockConfig+0x15e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008450:	4b1e      	ldr	r3, [pc, #120]	; (80084cc <HAL_RCC_ClockConfig+0x1c8>)
 8008452:	689b      	ldr	r3, [r3, #8]
 8008454:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	68db      	ldr	r3, [r3, #12]
 800845c:	491b      	ldr	r1, [pc, #108]	; (80084cc <HAL_RCC_ClockConfig+0x1c8>)
 800845e:	4313      	orrs	r3, r2
 8008460:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	f003 0308 	and.w	r3, r3, #8
 800846a:	2b00      	cmp	r3, #0
 800846c:	d009      	beq.n	8008482 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800846e:	4b17      	ldr	r3, [pc, #92]	; (80084cc <HAL_RCC_ClockConfig+0x1c8>)
 8008470:	689b      	ldr	r3, [r3, #8]
 8008472:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	691b      	ldr	r3, [r3, #16]
 800847a:	00db      	lsls	r3, r3, #3
 800847c:	4913      	ldr	r1, [pc, #76]	; (80084cc <HAL_RCC_ClockConfig+0x1c8>)
 800847e:	4313      	orrs	r3, r2
 8008480:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 8008482:	f000 f837 	bl	80084f4 <HAL_RCC_GetSysClockFreq>
 8008486:	4601      	mov	r1, r0
 8008488:	4b10      	ldr	r3, [pc, #64]	; (80084cc <HAL_RCC_ClockConfig+0x1c8>)
 800848a:	689b      	ldr	r3, [r3, #8]
 800848c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008490:	22f0      	movs	r2, #240	; 0xf0
 8008492:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008494:	693a      	ldr	r2, [r7, #16]
 8008496:	fa92 f2a2 	rbit	r2, r2
 800849a:	60fa      	str	r2, [r7, #12]
  return result;
 800849c:	68fa      	ldr	r2, [r7, #12]
 800849e:	fab2 f282 	clz	r2, r2
 80084a2:	b2d2      	uxtb	r2, r2
 80084a4:	40d3      	lsrs	r3, r2
 80084a6:	4a0a      	ldr	r2, [pc, #40]	; (80084d0 <HAL_RCC_ClockConfig+0x1cc>)
 80084a8:	5cd3      	ldrb	r3, [r2, r3]
 80084aa:	fa21 f303 	lsr.w	r3, r1, r3
 80084ae:	4a09      	ldr	r2, [pc, #36]	; (80084d4 <HAL_RCC_ClockConfig+0x1d0>)
 80084b0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80084b2:	4b09      	ldr	r3, [pc, #36]	; (80084d8 <HAL_RCC_ClockConfig+0x1d4>)
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	4618      	mov	r0, r3
 80084b8:	f7fc fa28 	bl	800490c <HAL_InitTick>

  return HAL_OK;
 80084bc:	2300      	movs	r3, #0
}
 80084be:	4618      	mov	r0, r3
 80084c0:	3718      	adds	r7, #24
 80084c2:	46bd      	mov	sp, r7
 80084c4:	bd80      	pop	{r7, pc}
 80084c6:	bf00      	nop
 80084c8:	40023c00 	.word	0x40023c00
 80084cc:	40023800 	.word	0x40023800
 80084d0:	08011ad0 	.word	0x08011ad0
 80084d4:	20000024 	.word	0x20000024
 80084d8:	20000028 	.word	0x20000028

080084dc <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M3 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 80084dc:	b480      	push	{r7}
 80084de:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 80084e0:	4b03      	ldr	r3, [pc, #12]	; (80084f0 <HAL_RCC_EnableCSS+0x14>)
 80084e2:	2201      	movs	r2, #1
 80084e4:	601a      	str	r2, [r3, #0]
}
 80084e6:	bf00      	nop
 80084e8:	46bd      	mov	sp, r7
 80084ea:	bc80      	pop	{r7}
 80084ec:	4770      	bx	lr
 80084ee:	bf00      	nop
 80084f0:	4247004c 	.word	0x4247004c

080084f4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80084f4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80084f8:	b084      	sub	sp, #16
 80084fa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80084fc:	2300      	movs	r3, #0
 80084fe:	607b      	str	r3, [r7, #4]
 8008500:	2300      	movs	r3, #0
 8008502:	60fb      	str	r3, [r7, #12]
 8008504:	2300      	movs	r3, #0
 8008506:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8008508:	2300      	movs	r3, #0
 800850a:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800850c:	4b67      	ldr	r3, [pc, #412]	; (80086ac <HAL_RCC_GetSysClockFreq+0x1b8>)
 800850e:	689b      	ldr	r3, [r3, #8]
 8008510:	f003 030c 	and.w	r3, r3, #12
 8008514:	2b08      	cmp	r3, #8
 8008516:	d00d      	beq.n	8008534 <HAL_RCC_GetSysClockFreq+0x40>
 8008518:	2b08      	cmp	r3, #8
 800851a:	f200 80bd 	bhi.w	8008698 <HAL_RCC_GetSysClockFreq+0x1a4>
 800851e:	2b00      	cmp	r3, #0
 8008520:	d002      	beq.n	8008528 <HAL_RCC_GetSysClockFreq+0x34>
 8008522:	2b04      	cmp	r3, #4
 8008524:	d003      	beq.n	800852e <HAL_RCC_GetSysClockFreq+0x3a>
 8008526:	e0b7      	b.n	8008698 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008528:	4b61      	ldr	r3, [pc, #388]	; (80086b0 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800852a:	60bb      	str	r3, [r7, #8]
       break;
 800852c:	e0b7      	b.n	800869e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800852e:	4b60      	ldr	r3, [pc, #384]	; (80086b0 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8008530:	60bb      	str	r3, [r7, #8]
      break;
 8008532:	e0b4      	b.n	800869e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008534:	4b5d      	ldr	r3, [pc, #372]	; (80086ac <HAL_RCC_GetSysClockFreq+0x1b8>)
 8008536:	685b      	ldr	r3, [r3, #4]
 8008538:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800853c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800853e:	4b5b      	ldr	r3, [pc, #364]	; (80086ac <HAL_RCC_GetSysClockFreq+0x1b8>)
 8008540:	685b      	ldr	r3, [r3, #4]
 8008542:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008546:	2b00      	cmp	r3, #0
 8008548:	d04d      	beq.n	80085e6 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800854a:	4b58      	ldr	r3, [pc, #352]	; (80086ac <HAL_RCC_GetSysClockFreq+0x1b8>)
 800854c:	685b      	ldr	r3, [r3, #4]
 800854e:	099b      	lsrs	r3, r3, #6
 8008550:	461a      	mov	r2, r3
 8008552:	f04f 0300 	mov.w	r3, #0
 8008556:	f240 10ff 	movw	r0, #511	; 0x1ff
 800855a:	f04f 0100 	mov.w	r1, #0
 800855e:	ea02 0800 	and.w	r8, r2, r0
 8008562:	ea03 0901 	and.w	r9, r3, r1
 8008566:	4640      	mov	r0, r8
 8008568:	4649      	mov	r1, r9
 800856a:	f04f 0200 	mov.w	r2, #0
 800856e:	f04f 0300 	mov.w	r3, #0
 8008572:	014b      	lsls	r3, r1, #5
 8008574:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8008578:	0142      	lsls	r2, r0, #5
 800857a:	4610      	mov	r0, r2
 800857c:	4619      	mov	r1, r3
 800857e:	ebb0 0008 	subs.w	r0, r0, r8
 8008582:	eb61 0109 	sbc.w	r1, r1, r9
 8008586:	f04f 0200 	mov.w	r2, #0
 800858a:	f04f 0300 	mov.w	r3, #0
 800858e:	018b      	lsls	r3, r1, #6
 8008590:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8008594:	0182      	lsls	r2, r0, #6
 8008596:	1a12      	subs	r2, r2, r0
 8008598:	eb63 0301 	sbc.w	r3, r3, r1
 800859c:	f04f 0000 	mov.w	r0, #0
 80085a0:	f04f 0100 	mov.w	r1, #0
 80085a4:	00d9      	lsls	r1, r3, #3
 80085a6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80085aa:	00d0      	lsls	r0, r2, #3
 80085ac:	4602      	mov	r2, r0
 80085ae:	460b      	mov	r3, r1
 80085b0:	eb12 0208 	adds.w	r2, r2, r8
 80085b4:	eb43 0309 	adc.w	r3, r3, r9
 80085b8:	f04f 0000 	mov.w	r0, #0
 80085bc:	f04f 0100 	mov.w	r1, #0
 80085c0:	0299      	lsls	r1, r3, #10
 80085c2:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80085c6:	0290      	lsls	r0, r2, #10
 80085c8:	4602      	mov	r2, r0
 80085ca:	460b      	mov	r3, r1
 80085cc:	4610      	mov	r0, r2
 80085ce:	4619      	mov	r1, r3
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	461a      	mov	r2, r3
 80085d4:	f04f 0300 	mov.w	r3, #0
 80085d8:	f7f8 fe32 	bl	8001240 <__aeabi_uldivmod>
 80085dc:	4602      	mov	r2, r0
 80085de:	460b      	mov	r3, r1
 80085e0:	4613      	mov	r3, r2
 80085e2:	60fb      	str	r3, [r7, #12]
 80085e4:	e04a      	b.n	800867c <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80085e6:	4b31      	ldr	r3, [pc, #196]	; (80086ac <HAL_RCC_GetSysClockFreq+0x1b8>)
 80085e8:	685b      	ldr	r3, [r3, #4]
 80085ea:	099b      	lsrs	r3, r3, #6
 80085ec:	461a      	mov	r2, r3
 80085ee:	f04f 0300 	mov.w	r3, #0
 80085f2:	f240 10ff 	movw	r0, #511	; 0x1ff
 80085f6:	f04f 0100 	mov.w	r1, #0
 80085fa:	ea02 0400 	and.w	r4, r2, r0
 80085fe:	ea03 0501 	and.w	r5, r3, r1
 8008602:	4620      	mov	r0, r4
 8008604:	4629      	mov	r1, r5
 8008606:	f04f 0200 	mov.w	r2, #0
 800860a:	f04f 0300 	mov.w	r3, #0
 800860e:	014b      	lsls	r3, r1, #5
 8008610:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8008614:	0142      	lsls	r2, r0, #5
 8008616:	4610      	mov	r0, r2
 8008618:	4619      	mov	r1, r3
 800861a:	1b00      	subs	r0, r0, r4
 800861c:	eb61 0105 	sbc.w	r1, r1, r5
 8008620:	f04f 0200 	mov.w	r2, #0
 8008624:	f04f 0300 	mov.w	r3, #0
 8008628:	018b      	lsls	r3, r1, #6
 800862a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800862e:	0182      	lsls	r2, r0, #6
 8008630:	1a12      	subs	r2, r2, r0
 8008632:	eb63 0301 	sbc.w	r3, r3, r1
 8008636:	f04f 0000 	mov.w	r0, #0
 800863a:	f04f 0100 	mov.w	r1, #0
 800863e:	00d9      	lsls	r1, r3, #3
 8008640:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008644:	00d0      	lsls	r0, r2, #3
 8008646:	4602      	mov	r2, r0
 8008648:	460b      	mov	r3, r1
 800864a:	1912      	adds	r2, r2, r4
 800864c:	eb45 0303 	adc.w	r3, r5, r3
 8008650:	f04f 0000 	mov.w	r0, #0
 8008654:	f04f 0100 	mov.w	r1, #0
 8008658:	0299      	lsls	r1, r3, #10
 800865a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800865e:	0290      	lsls	r0, r2, #10
 8008660:	4602      	mov	r2, r0
 8008662:	460b      	mov	r3, r1
 8008664:	4610      	mov	r0, r2
 8008666:	4619      	mov	r1, r3
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	461a      	mov	r2, r3
 800866c:	f04f 0300 	mov.w	r3, #0
 8008670:	f7f8 fde6 	bl	8001240 <__aeabi_uldivmod>
 8008674:	4602      	mov	r2, r0
 8008676:	460b      	mov	r3, r1
 8008678:	4613      	mov	r3, r2
 800867a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800867c:	4b0b      	ldr	r3, [pc, #44]	; (80086ac <HAL_RCC_GetSysClockFreq+0x1b8>)
 800867e:	685b      	ldr	r3, [r3, #4]
 8008680:	0c1b      	lsrs	r3, r3, #16
 8008682:	f003 0303 	and.w	r3, r3, #3
 8008686:	3301      	adds	r3, #1
 8008688:	005b      	lsls	r3, r3, #1
 800868a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800868c:	68fa      	ldr	r2, [r7, #12]
 800868e:	683b      	ldr	r3, [r7, #0]
 8008690:	fbb2 f3f3 	udiv	r3, r2, r3
 8008694:	60bb      	str	r3, [r7, #8]
      break;
 8008696:	e002      	b.n	800869e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008698:	4b05      	ldr	r3, [pc, #20]	; (80086b0 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800869a:	60bb      	str	r3, [r7, #8]
      break;
 800869c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800869e:	68bb      	ldr	r3, [r7, #8]
}
 80086a0:	4618      	mov	r0, r3
 80086a2:	3710      	adds	r7, #16
 80086a4:	46bd      	mov	sp, r7
 80086a6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80086aa:	bf00      	nop
 80086ac:	40023800 	.word	0x40023800
 80086b0:	00f42400 	.word	0x00f42400

080086b4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80086b4:	b480      	push	{r7}
 80086b6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80086b8:	4b02      	ldr	r3, [pc, #8]	; (80086c4 <HAL_RCC_GetHCLKFreq+0x10>)
 80086ba:	681b      	ldr	r3, [r3, #0]
}
 80086bc:	4618      	mov	r0, r3
 80086be:	46bd      	mov	sp, r7
 80086c0:	bc80      	pop	{r7}
 80086c2:	4770      	bx	lr
 80086c4:	20000024 	.word	0x20000024

080086c8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80086c8:	b580      	push	{r7, lr}
 80086ca:	b082      	sub	sp, #8
 80086cc:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> POSITION_VAL(RCC_CFGR_PPRE1)]);
 80086ce:	f7ff fff1 	bl	80086b4 <HAL_RCC_GetHCLKFreq>
 80086d2:	4601      	mov	r1, r0
 80086d4:	4b0b      	ldr	r3, [pc, #44]	; (8008704 <HAL_RCC_GetPCLK1Freq+0x3c>)
 80086d6:	689b      	ldr	r3, [r3, #8]
 80086d8:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 80086dc:	f44f 52e0 	mov.w	r2, #7168	; 0x1c00
 80086e0:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80086e2:	687a      	ldr	r2, [r7, #4]
 80086e4:	fa92 f2a2 	rbit	r2, r2
 80086e8:	603a      	str	r2, [r7, #0]
  return result;
 80086ea:	683a      	ldr	r2, [r7, #0]
 80086ec:	fab2 f282 	clz	r2, r2
 80086f0:	b2d2      	uxtb	r2, r2
 80086f2:	40d3      	lsrs	r3, r2
 80086f4:	4a04      	ldr	r2, [pc, #16]	; (8008708 <HAL_RCC_GetPCLK1Freq+0x40>)
 80086f6:	5cd3      	ldrb	r3, [r2, r3]
 80086f8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80086fc:	4618      	mov	r0, r3
 80086fe:	3708      	adds	r7, #8
 8008700:	46bd      	mov	sp, r7
 8008702:	bd80      	pop	{r7, pc}
 8008704:	40023800 	.word	0x40023800
 8008708:	08011ae0 	.word	0x08011ae0

0800870c <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 800870c:	b580      	push	{r7, lr}
 800870e:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 8008710:	4b06      	ldr	r3, [pc, #24]	; (800872c <HAL_RCC_NMI_IRQHandler+0x20>)
 8008712:	68db      	ldr	r3, [r3, #12]
 8008714:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008718:	2b80      	cmp	r3, #128	; 0x80
 800871a:	d104      	bne.n	8008726 <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 800871c:	f000 f80a 	bl	8008734 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 8008720:	4b03      	ldr	r3, [pc, #12]	; (8008730 <HAL_RCC_NMI_IRQHandler+0x24>)
 8008722:	2280      	movs	r2, #128	; 0x80
 8008724:	701a      	strb	r2, [r3, #0]
  }
}
 8008726:	bf00      	nop
 8008728:	bd80      	pop	{r7, pc}
 800872a:	bf00      	nop
 800872c:	40023800 	.word	0x40023800
 8008730:	4002380e 	.word	0x4002380e

08008734 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval None
  */
__weak void HAL_RCC_CSSCallback(void)
{
 8008734:	b480      	push	{r7}
 8008736:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback could be implemented in the user file
   */
}
 8008738:	bf00      	nop
 800873a:	46bd      	mov	sp, r7
 800873c:	bc80      	pop	{r7}
 800873e:	4770      	bx	lr

08008740 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008740:	b580      	push	{r7, lr}
 8008742:	b082      	sub	sp, #8
 8008744:	af00      	add	r7, sp, #0
 8008746:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	2b00      	cmp	r3, #0
 800874c:	d101      	bne.n	8008752 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800874e:	2301      	movs	r3, #1
 8008750:	e041      	b.n	80087d6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008758:	b2db      	uxtb	r3, r3
 800875a:	2b00      	cmp	r3, #0
 800875c:	d106      	bne.n	800876c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	2200      	movs	r2, #0
 8008762:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008766:	6878      	ldr	r0, [r7, #4]
 8008768:	f7fb fe9e 	bl	80044a8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	2202      	movs	r2, #2
 8008770:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	681a      	ldr	r2, [r3, #0]
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	3304      	adds	r3, #4
 800877c:	4619      	mov	r1, r3
 800877e:	4610      	mov	r0, r2
 8008780:	f000 fc04 	bl	8008f8c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	2201      	movs	r2, #1
 8008788:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	2201      	movs	r2, #1
 8008790:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	2201      	movs	r2, #1
 8008798:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	2201      	movs	r2, #1
 80087a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	2201      	movs	r2, #1
 80087a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	2201      	movs	r2, #1
 80087b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	2201      	movs	r2, #1
 80087b8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	2201      	movs	r2, #1
 80087c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	2201      	movs	r2, #1
 80087c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	2201      	movs	r2, #1
 80087d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80087d4:	2300      	movs	r3, #0
}
 80087d6:	4618      	mov	r0, r3
 80087d8:	3708      	adds	r7, #8
 80087da:	46bd      	mov	sp, r7
 80087dc:	bd80      	pop	{r7, pc}
	...

080087e0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80087e0:	b480      	push	{r7}
 80087e2:	b085      	sub	sp, #20
 80087e4:	af00      	add	r7, sp, #0
 80087e6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80087ee:	b2db      	uxtb	r3, r3
 80087f0:	2b01      	cmp	r3, #1
 80087f2:	d001      	beq.n	80087f8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80087f4:	2301      	movs	r3, #1
 80087f6:	e046      	b.n	8008886 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	2202      	movs	r2, #2
 80087fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	4a22      	ldr	r2, [pc, #136]	; (8008890 <HAL_TIM_Base_Start+0xb0>)
 8008806:	4293      	cmp	r3, r2
 8008808:	d022      	beq.n	8008850 <HAL_TIM_Base_Start+0x70>
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008812:	d01d      	beq.n	8008850 <HAL_TIM_Base_Start+0x70>
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	4a1e      	ldr	r2, [pc, #120]	; (8008894 <HAL_TIM_Base_Start+0xb4>)
 800881a:	4293      	cmp	r3, r2
 800881c:	d018      	beq.n	8008850 <HAL_TIM_Base_Start+0x70>
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	4a1d      	ldr	r2, [pc, #116]	; (8008898 <HAL_TIM_Base_Start+0xb8>)
 8008824:	4293      	cmp	r3, r2
 8008826:	d013      	beq.n	8008850 <HAL_TIM_Base_Start+0x70>
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	4a1b      	ldr	r2, [pc, #108]	; (800889c <HAL_TIM_Base_Start+0xbc>)
 800882e:	4293      	cmp	r3, r2
 8008830:	d00e      	beq.n	8008850 <HAL_TIM_Base_Start+0x70>
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	4a1a      	ldr	r2, [pc, #104]	; (80088a0 <HAL_TIM_Base_Start+0xc0>)
 8008838:	4293      	cmp	r3, r2
 800883a:	d009      	beq.n	8008850 <HAL_TIM_Base_Start+0x70>
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	4a18      	ldr	r2, [pc, #96]	; (80088a4 <HAL_TIM_Base_Start+0xc4>)
 8008842:	4293      	cmp	r3, r2
 8008844:	d004      	beq.n	8008850 <HAL_TIM_Base_Start+0x70>
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	4a17      	ldr	r2, [pc, #92]	; (80088a8 <HAL_TIM_Base_Start+0xc8>)
 800884c:	4293      	cmp	r3, r2
 800884e:	d111      	bne.n	8008874 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	689b      	ldr	r3, [r3, #8]
 8008856:	f003 0307 	and.w	r3, r3, #7
 800885a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800885c:	68fb      	ldr	r3, [r7, #12]
 800885e:	2b06      	cmp	r3, #6
 8008860:	d010      	beq.n	8008884 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	681a      	ldr	r2, [r3, #0]
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	f042 0201 	orr.w	r2, r2, #1
 8008870:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008872:	e007      	b.n	8008884 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	681a      	ldr	r2, [r3, #0]
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	f042 0201 	orr.w	r2, r2, #1
 8008882:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008884:	2300      	movs	r3, #0
}
 8008886:	4618      	mov	r0, r3
 8008888:	3714      	adds	r7, #20
 800888a:	46bd      	mov	sp, r7
 800888c:	bc80      	pop	{r7}
 800888e:	4770      	bx	lr
 8008890:	40010000 	.word	0x40010000
 8008894:	40000400 	.word	0x40000400
 8008898:	40000800 	.word	0x40000800
 800889c:	40000c00 	.word	0x40000c00
 80088a0:	40010400 	.word	0x40010400
 80088a4:	40014000 	.word	0x40014000
 80088a8:	40001800 	.word	0x40001800

080088ac <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80088ac:	b480      	push	{r7}
 80088ae:	b085      	sub	sp, #20
 80088b0:	af00      	add	r7, sp, #0
 80088b2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80088ba:	b2db      	uxtb	r3, r3
 80088bc:	2b01      	cmp	r3, #1
 80088be:	d001      	beq.n	80088c4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80088c0:	2301      	movs	r3, #1
 80088c2:	e04e      	b.n	8008962 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	2202      	movs	r2, #2
 80088c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	68da      	ldr	r2, [r3, #12]
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	f042 0201 	orr.w	r2, r2, #1
 80088da:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	4a22      	ldr	r2, [pc, #136]	; (800896c <HAL_TIM_Base_Start_IT+0xc0>)
 80088e2:	4293      	cmp	r3, r2
 80088e4:	d022      	beq.n	800892c <HAL_TIM_Base_Start_IT+0x80>
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80088ee:	d01d      	beq.n	800892c <HAL_TIM_Base_Start_IT+0x80>
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	4a1e      	ldr	r2, [pc, #120]	; (8008970 <HAL_TIM_Base_Start_IT+0xc4>)
 80088f6:	4293      	cmp	r3, r2
 80088f8:	d018      	beq.n	800892c <HAL_TIM_Base_Start_IT+0x80>
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	4a1d      	ldr	r2, [pc, #116]	; (8008974 <HAL_TIM_Base_Start_IT+0xc8>)
 8008900:	4293      	cmp	r3, r2
 8008902:	d013      	beq.n	800892c <HAL_TIM_Base_Start_IT+0x80>
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	4a1b      	ldr	r2, [pc, #108]	; (8008978 <HAL_TIM_Base_Start_IT+0xcc>)
 800890a:	4293      	cmp	r3, r2
 800890c:	d00e      	beq.n	800892c <HAL_TIM_Base_Start_IT+0x80>
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	4a1a      	ldr	r2, [pc, #104]	; (800897c <HAL_TIM_Base_Start_IT+0xd0>)
 8008914:	4293      	cmp	r3, r2
 8008916:	d009      	beq.n	800892c <HAL_TIM_Base_Start_IT+0x80>
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	4a18      	ldr	r2, [pc, #96]	; (8008980 <HAL_TIM_Base_Start_IT+0xd4>)
 800891e:	4293      	cmp	r3, r2
 8008920:	d004      	beq.n	800892c <HAL_TIM_Base_Start_IT+0x80>
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	4a17      	ldr	r2, [pc, #92]	; (8008984 <HAL_TIM_Base_Start_IT+0xd8>)
 8008928:	4293      	cmp	r3, r2
 800892a:	d111      	bne.n	8008950 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	689b      	ldr	r3, [r3, #8]
 8008932:	f003 0307 	and.w	r3, r3, #7
 8008936:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	2b06      	cmp	r3, #6
 800893c:	d010      	beq.n	8008960 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	681a      	ldr	r2, [r3, #0]
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	f042 0201 	orr.w	r2, r2, #1
 800894c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800894e:	e007      	b.n	8008960 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	681a      	ldr	r2, [r3, #0]
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	f042 0201 	orr.w	r2, r2, #1
 800895e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008960:	2300      	movs	r3, #0
}
 8008962:	4618      	mov	r0, r3
 8008964:	3714      	adds	r7, #20
 8008966:	46bd      	mov	sp, r7
 8008968:	bc80      	pop	{r7}
 800896a:	4770      	bx	lr
 800896c:	40010000 	.word	0x40010000
 8008970:	40000400 	.word	0x40000400
 8008974:	40000800 	.word	0x40000800
 8008978:	40000c00 	.word	0x40000c00
 800897c:	40010400 	.word	0x40010400
 8008980:	40014000 	.word	0x40014000
 8008984:	40001800 	.word	0x40001800

08008988 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008988:	b580      	push	{r7, lr}
 800898a:	b082      	sub	sp, #8
 800898c:	af00      	add	r7, sp, #0
 800898e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	2b00      	cmp	r3, #0
 8008994:	d101      	bne.n	800899a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008996:	2301      	movs	r3, #1
 8008998:	e041      	b.n	8008a1e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80089a0:	b2db      	uxtb	r3, r3
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	d106      	bne.n	80089b4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	2200      	movs	r2, #0
 80089aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80089ae:	6878      	ldr	r0, [r7, #4]
 80089b0:	f7fb fd44 	bl	800443c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	2202      	movs	r2, #2
 80089b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	681a      	ldr	r2, [r3, #0]
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	3304      	adds	r3, #4
 80089c4:	4619      	mov	r1, r3
 80089c6:	4610      	mov	r0, r2
 80089c8:	f000 fae0 	bl	8008f8c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	2201      	movs	r2, #1
 80089d0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	2201      	movs	r2, #1
 80089d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	2201      	movs	r2, #1
 80089e0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	2201      	movs	r2, #1
 80089e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	2201      	movs	r2, #1
 80089f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	2201      	movs	r2, #1
 80089f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	2201      	movs	r2, #1
 8008a00:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	2201      	movs	r2, #1
 8008a08:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	2201      	movs	r2, #1
 8008a10:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	2201      	movs	r2, #1
 8008a18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008a1c:	2300      	movs	r3, #0
}
 8008a1e:	4618      	mov	r0, r3
 8008a20:	3708      	adds	r7, #8
 8008a22:	46bd      	mov	sp, r7
 8008a24:	bd80      	pop	{r7, pc}
	...

08008a28 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008a28:	b580      	push	{r7, lr}
 8008a2a:	b084      	sub	sp, #16
 8008a2c:	af00      	add	r7, sp, #0
 8008a2e:	6078      	str	r0, [r7, #4]
 8008a30:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8008a32:	683b      	ldr	r3, [r7, #0]
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	d109      	bne.n	8008a4c <HAL_TIM_PWM_Start+0x24>
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008a3e:	b2db      	uxtb	r3, r3
 8008a40:	2b01      	cmp	r3, #1
 8008a42:	bf14      	ite	ne
 8008a44:	2301      	movne	r3, #1
 8008a46:	2300      	moveq	r3, #0
 8008a48:	b2db      	uxtb	r3, r3
 8008a4a:	e022      	b.n	8008a92 <HAL_TIM_PWM_Start+0x6a>
 8008a4c:	683b      	ldr	r3, [r7, #0]
 8008a4e:	2b04      	cmp	r3, #4
 8008a50:	d109      	bne.n	8008a66 <HAL_TIM_PWM_Start+0x3e>
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8008a58:	b2db      	uxtb	r3, r3
 8008a5a:	2b01      	cmp	r3, #1
 8008a5c:	bf14      	ite	ne
 8008a5e:	2301      	movne	r3, #1
 8008a60:	2300      	moveq	r3, #0
 8008a62:	b2db      	uxtb	r3, r3
 8008a64:	e015      	b.n	8008a92 <HAL_TIM_PWM_Start+0x6a>
 8008a66:	683b      	ldr	r3, [r7, #0]
 8008a68:	2b08      	cmp	r3, #8
 8008a6a:	d109      	bne.n	8008a80 <HAL_TIM_PWM_Start+0x58>
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008a72:	b2db      	uxtb	r3, r3
 8008a74:	2b01      	cmp	r3, #1
 8008a76:	bf14      	ite	ne
 8008a78:	2301      	movne	r3, #1
 8008a7a:	2300      	moveq	r3, #0
 8008a7c:	b2db      	uxtb	r3, r3
 8008a7e:	e008      	b.n	8008a92 <HAL_TIM_PWM_Start+0x6a>
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008a86:	b2db      	uxtb	r3, r3
 8008a88:	2b01      	cmp	r3, #1
 8008a8a:	bf14      	ite	ne
 8008a8c:	2301      	movne	r3, #1
 8008a8e:	2300      	moveq	r3, #0
 8008a90:	b2db      	uxtb	r3, r3
 8008a92:	2b00      	cmp	r3, #0
 8008a94:	d001      	beq.n	8008a9a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8008a96:	2301      	movs	r3, #1
 8008a98:	e07c      	b.n	8008b94 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008a9a:	683b      	ldr	r3, [r7, #0]
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	d104      	bne.n	8008aaa <HAL_TIM_PWM_Start+0x82>
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	2202      	movs	r2, #2
 8008aa4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008aa8:	e013      	b.n	8008ad2 <HAL_TIM_PWM_Start+0xaa>
 8008aaa:	683b      	ldr	r3, [r7, #0]
 8008aac:	2b04      	cmp	r3, #4
 8008aae:	d104      	bne.n	8008aba <HAL_TIM_PWM_Start+0x92>
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	2202      	movs	r2, #2
 8008ab4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008ab8:	e00b      	b.n	8008ad2 <HAL_TIM_PWM_Start+0xaa>
 8008aba:	683b      	ldr	r3, [r7, #0]
 8008abc:	2b08      	cmp	r3, #8
 8008abe:	d104      	bne.n	8008aca <HAL_TIM_PWM_Start+0xa2>
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	2202      	movs	r2, #2
 8008ac4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008ac8:	e003      	b.n	8008ad2 <HAL_TIM_PWM_Start+0xaa>
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	2202      	movs	r2, #2
 8008ace:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	2201      	movs	r2, #1
 8008ad8:	6839      	ldr	r1, [r7, #0]
 8008ada:	4618      	mov	r0, r3
 8008adc:	f000 fca0 	bl	8009420 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	4a2d      	ldr	r2, [pc, #180]	; (8008b9c <HAL_TIM_PWM_Start+0x174>)
 8008ae6:	4293      	cmp	r3, r2
 8008ae8:	d004      	beq.n	8008af4 <HAL_TIM_PWM_Start+0xcc>
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	4a2c      	ldr	r2, [pc, #176]	; (8008ba0 <HAL_TIM_PWM_Start+0x178>)
 8008af0:	4293      	cmp	r3, r2
 8008af2:	d101      	bne.n	8008af8 <HAL_TIM_PWM_Start+0xd0>
 8008af4:	2301      	movs	r3, #1
 8008af6:	e000      	b.n	8008afa <HAL_TIM_PWM_Start+0xd2>
 8008af8:	2300      	movs	r3, #0
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	d007      	beq.n	8008b0e <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008b0c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	4a22      	ldr	r2, [pc, #136]	; (8008b9c <HAL_TIM_PWM_Start+0x174>)
 8008b14:	4293      	cmp	r3, r2
 8008b16:	d022      	beq.n	8008b5e <HAL_TIM_PWM_Start+0x136>
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008b20:	d01d      	beq.n	8008b5e <HAL_TIM_PWM_Start+0x136>
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	4a1f      	ldr	r2, [pc, #124]	; (8008ba4 <HAL_TIM_PWM_Start+0x17c>)
 8008b28:	4293      	cmp	r3, r2
 8008b2a:	d018      	beq.n	8008b5e <HAL_TIM_PWM_Start+0x136>
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	4a1d      	ldr	r2, [pc, #116]	; (8008ba8 <HAL_TIM_PWM_Start+0x180>)
 8008b32:	4293      	cmp	r3, r2
 8008b34:	d013      	beq.n	8008b5e <HAL_TIM_PWM_Start+0x136>
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	4a1c      	ldr	r2, [pc, #112]	; (8008bac <HAL_TIM_PWM_Start+0x184>)
 8008b3c:	4293      	cmp	r3, r2
 8008b3e:	d00e      	beq.n	8008b5e <HAL_TIM_PWM_Start+0x136>
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	4a16      	ldr	r2, [pc, #88]	; (8008ba0 <HAL_TIM_PWM_Start+0x178>)
 8008b46:	4293      	cmp	r3, r2
 8008b48:	d009      	beq.n	8008b5e <HAL_TIM_PWM_Start+0x136>
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	4a18      	ldr	r2, [pc, #96]	; (8008bb0 <HAL_TIM_PWM_Start+0x188>)
 8008b50:	4293      	cmp	r3, r2
 8008b52:	d004      	beq.n	8008b5e <HAL_TIM_PWM_Start+0x136>
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	4a16      	ldr	r2, [pc, #88]	; (8008bb4 <HAL_TIM_PWM_Start+0x18c>)
 8008b5a:	4293      	cmp	r3, r2
 8008b5c:	d111      	bne.n	8008b82 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	689b      	ldr	r3, [r3, #8]
 8008b64:	f003 0307 	and.w	r3, r3, #7
 8008b68:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008b6a:	68fb      	ldr	r3, [r7, #12]
 8008b6c:	2b06      	cmp	r3, #6
 8008b6e:	d010      	beq.n	8008b92 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	681a      	ldr	r2, [r3, #0]
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	f042 0201 	orr.w	r2, r2, #1
 8008b7e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008b80:	e007      	b.n	8008b92 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	681a      	ldr	r2, [r3, #0]
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	f042 0201 	orr.w	r2, r2, #1
 8008b90:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008b92:	2300      	movs	r3, #0
}
 8008b94:	4618      	mov	r0, r3
 8008b96:	3710      	adds	r7, #16
 8008b98:	46bd      	mov	sp, r7
 8008b9a:	bd80      	pop	{r7, pc}
 8008b9c:	40010000 	.word	0x40010000
 8008ba0:	40010400 	.word	0x40010400
 8008ba4:	40000400 	.word	0x40000400
 8008ba8:	40000800 	.word	0x40000800
 8008bac:	40000c00 	.word	0x40000c00
 8008bb0:	40014000 	.word	0x40014000
 8008bb4:	40001800 	.word	0x40001800

08008bb8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008bb8:	b580      	push	{r7, lr}
 8008bba:	b082      	sub	sp, #8
 8008bbc:	af00      	add	r7, sp, #0
 8008bbe:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	691b      	ldr	r3, [r3, #16]
 8008bc6:	f003 0302 	and.w	r3, r3, #2
 8008bca:	2b02      	cmp	r3, #2
 8008bcc:	d122      	bne.n	8008c14 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	68db      	ldr	r3, [r3, #12]
 8008bd4:	f003 0302 	and.w	r3, r3, #2
 8008bd8:	2b02      	cmp	r3, #2
 8008bda:	d11b      	bne.n	8008c14 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	f06f 0202 	mvn.w	r2, #2
 8008be4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	2201      	movs	r2, #1
 8008bea:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	699b      	ldr	r3, [r3, #24]
 8008bf2:	f003 0303 	and.w	r3, r3, #3
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	d003      	beq.n	8008c02 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008bfa:	6878      	ldr	r0, [r7, #4]
 8008bfc:	f000 f9ab 	bl	8008f56 <HAL_TIM_IC_CaptureCallback>
 8008c00:	e005      	b.n	8008c0e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008c02:	6878      	ldr	r0, [r7, #4]
 8008c04:	f000 f99e 	bl	8008f44 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008c08:	6878      	ldr	r0, [r7, #4]
 8008c0a:	f000 f9ad 	bl	8008f68 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	2200      	movs	r2, #0
 8008c12:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	691b      	ldr	r3, [r3, #16]
 8008c1a:	f003 0304 	and.w	r3, r3, #4
 8008c1e:	2b04      	cmp	r3, #4
 8008c20:	d122      	bne.n	8008c68 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	68db      	ldr	r3, [r3, #12]
 8008c28:	f003 0304 	and.w	r3, r3, #4
 8008c2c:	2b04      	cmp	r3, #4
 8008c2e:	d11b      	bne.n	8008c68 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	f06f 0204 	mvn.w	r2, #4
 8008c38:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	2202      	movs	r2, #2
 8008c3e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	699b      	ldr	r3, [r3, #24]
 8008c46:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	d003      	beq.n	8008c56 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008c4e:	6878      	ldr	r0, [r7, #4]
 8008c50:	f000 f981 	bl	8008f56 <HAL_TIM_IC_CaptureCallback>
 8008c54:	e005      	b.n	8008c62 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008c56:	6878      	ldr	r0, [r7, #4]
 8008c58:	f000 f974 	bl	8008f44 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008c5c:	6878      	ldr	r0, [r7, #4]
 8008c5e:	f000 f983 	bl	8008f68 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	2200      	movs	r2, #0
 8008c66:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	691b      	ldr	r3, [r3, #16]
 8008c6e:	f003 0308 	and.w	r3, r3, #8
 8008c72:	2b08      	cmp	r3, #8
 8008c74:	d122      	bne.n	8008cbc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	68db      	ldr	r3, [r3, #12]
 8008c7c:	f003 0308 	and.w	r3, r3, #8
 8008c80:	2b08      	cmp	r3, #8
 8008c82:	d11b      	bne.n	8008cbc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	f06f 0208 	mvn.w	r2, #8
 8008c8c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	2204      	movs	r2, #4
 8008c92:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	69db      	ldr	r3, [r3, #28]
 8008c9a:	f003 0303 	and.w	r3, r3, #3
 8008c9e:	2b00      	cmp	r3, #0
 8008ca0:	d003      	beq.n	8008caa <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008ca2:	6878      	ldr	r0, [r7, #4]
 8008ca4:	f000 f957 	bl	8008f56 <HAL_TIM_IC_CaptureCallback>
 8008ca8:	e005      	b.n	8008cb6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008caa:	6878      	ldr	r0, [r7, #4]
 8008cac:	f000 f94a 	bl	8008f44 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008cb0:	6878      	ldr	r0, [r7, #4]
 8008cb2:	f000 f959 	bl	8008f68 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	2200      	movs	r2, #0
 8008cba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	691b      	ldr	r3, [r3, #16]
 8008cc2:	f003 0310 	and.w	r3, r3, #16
 8008cc6:	2b10      	cmp	r3, #16
 8008cc8:	d122      	bne.n	8008d10 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	68db      	ldr	r3, [r3, #12]
 8008cd0:	f003 0310 	and.w	r3, r3, #16
 8008cd4:	2b10      	cmp	r3, #16
 8008cd6:	d11b      	bne.n	8008d10 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	f06f 0210 	mvn.w	r2, #16
 8008ce0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	2208      	movs	r2, #8
 8008ce6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	69db      	ldr	r3, [r3, #28]
 8008cee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	d003      	beq.n	8008cfe <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008cf6:	6878      	ldr	r0, [r7, #4]
 8008cf8:	f000 f92d 	bl	8008f56 <HAL_TIM_IC_CaptureCallback>
 8008cfc:	e005      	b.n	8008d0a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008cfe:	6878      	ldr	r0, [r7, #4]
 8008d00:	f000 f920 	bl	8008f44 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008d04:	6878      	ldr	r0, [r7, #4]
 8008d06:	f000 f92f 	bl	8008f68 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	2200      	movs	r2, #0
 8008d0e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	691b      	ldr	r3, [r3, #16]
 8008d16:	f003 0301 	and.w	r3, r3, #1
 8008d1a:	2b01      	cmp	r3, #1
 8008d1c:	d10e      	bne.n	8008d3c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	68db      	ldr	r3, [r3, #12]
 8008d24:	f003 0301 	and.w	r3, r3, #1
 8008d28:	2b01      	cmp	r3, #1
 8008d2a:	d107      	bne.n	8008d3c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	f06f 0201 	mvn.w	r2, #1
 8008d34:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008d36:	6878      	ldr	r0, [r7, #4]
 8008d38:	f7fa fe00 	bl	800393c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	691b      	ldr	r3, [r3, #16]
 8008d42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008d46:	2b80      	cmp	r3, #128	; 0x80
 8008d48:	d10e      	bne.n	8008d68 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	68db      	ldr	r3, [r3, #12]
 8008d50:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008d54:	2b80      	cmp	r3, #128	; 0x80
 8008d56:	d107      	bne.n	8008d68 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008d60:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008d62:	6878      	ldr	r0, [r7, #4]
 8008d64:	f000 fc03 	bl	800956e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	691b      	ldr	r3, [r3, #16]
 8008d6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008d72:	2b40      	cmp	r3, #64	; 0x40
 8008d74:	d10e      	bne.n	8008d94 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	68db      	ldr	r3, [r3, #12]
 8008d7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008d80:	2b40      	cmp	r3, #64	; 0x40
 8008d82:	d107      	bne.n	8008d94 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008d8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008d8e:	6878      	ldr	r0, [r7, #4]
 8008d90:	f000 f8f3 	bl	8008f7a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	691b      	ldr	r3, [r3, #16]
 8008d9a:	f003 0320 	and.w	r3, r3, #32
 8008d9e:	2b20      	cmp	r3, #32
 8008da0:	d10e      	bne.n	8008dc0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	68db      	ldr	r3, [r3, #12]
 8008da8:	f003 0320 	and.w	r3, r3, #32
 8008dac:	2b20      	cmp	r3, #32
 8008dae:	d107      	bne.n	8008dc0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	f06f 0220 	mvn.w	r2, #32
 8008db8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008dba:	6878      	ldr	r0, [r7, #4]
 8008dbc:	f000 fbce 	bl	800955c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008dc0:	bf00      	nop
 8008dc2:	3708      	adds	r7, #8
 8008dc4:	46bd      	mov	sp, r7
 8008dc6:	bd80      	pop	{r7, pc}

08008dc8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008dc8:	b580      	push	{r7, lr}
 8008dca:	b084      	sub	sp, #16
 8008dcc:	af00      	add	r7, sp, #0
 8008dce:	60f8      	str	r0, [r7, #12]
 8008dd0:	60b9      	str	r1, [r7, #8]
 8008dd2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008dda:	2b01      	cmp	r3, #1
 8008ddc:	d101      	bne.n	8008de2 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8008dde:	2302      	movs	r3, #2
 8008de0:	e0ac      	b.n	8008f3c <HAL_TIM_PWM_ConfigChannel+0x174>
 8008de2:	68fb      	ldr	r3, [r7, #12]
 8008de4:	2201      	movs	r2, #1
 8008de6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	2b0c      	cmp	r3, #12
 8008dee:	f200 809f 	bhi.w	8008f30 <HAL_TIM_PWM_ConfigChannel+0x168>
 8008df2:	a201      	add	r2, pc, #4	; (adr r2, 8008df8 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8008df4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008df8:	08008e2d 	.word	0x08008e2d
 8008dfc:	08008f31 	.word	0x08008f31
 8008e00:	08008f31 	.word	0x08008f31
 8008e04:	08008f31 	.word	0x08008f31
 8008e08:	08008e6d 	.word	0x08008e6d
 8008e0c:	08008f31 	.word	0x08008f31
 8008e10:	08008f31 	.word	0x08008f31
 8008e14:	08008f31 	.word	0x08008f31
 8008e18:	08008eaf 	.word	0x08008eaf
 8008e1c:	08008f31 	.word	0x08008f31
 8008e20:	08008f31 	.word	0x08008f31
 8008e24:	08008f31 	.word	0x08008f31
 8008e28:	08008eef 	.word	0x08008eef
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008e2c:	68fb      	ldr	r3, [r7, #12]
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	68b9      	ldr	r1, [r7, #8]
 8008e32:	4618      	mov	r0, r3
 8008e34:	f000 f948 	bl	80090c8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008e38:	68fb      	ldr	r3, [r7, #12]
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	699a      	ldr	r2, [r3, #24]
 8008e3e:	68fb      	ldr	r3, [r7, #12]
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	f042 0208 	orr.w	r2, r2, #8
 8008e46:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008e48:	68fb      	ldr	r3, [r7, #12]
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	699a      	ldr	r2, [r3, #24]
 8008e4e:	68fb      	ldr	r3, [r7, #12]
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	f022 0204 	bic.w	r2, r2, #4
 8008e56:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008e58:	68fb      	ldr	r3, [r7, #12]
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	6999      	ldr	r1, [r3, #24]
 8008e5e:	68bb      	ldr	r3, [r7, #8]
 8008e60:	691a      	ldr	r2, [r3, #16]
 8008e62:	68fb      	ldr	r3, [r7, #12]
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	430a      	orrs	r2, r1
 8008e68:	619a      	str	r2, [r3, #24]
      break;
 8008e6a:	e062      	b.n	8008f32 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008e6c:	68fb      	ldr	r3, [r7, #12]
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	68b9      	ldr	r1, [r7, #8]
 8008e72:	4618      	mov	r0, r3
 8008e74:	f000 f998 	bl	80091a8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008e78:	68fb      	ldr	r3, [r7, #12]
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	699a      	ldr	r2, [r3, #24]
 8008e7e:	68fb      	ldr	r3, [r7, #12]
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008e86:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008e88:	68fb      	ldr	r3, [r7, #12]
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	699a      	ldr	r2, [r3, #24]
 8008e8e:	68fb      	ldr	r3, [r7, #12]
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008e96:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008e98:	68fb      	ldr	r3, [r7, #12]
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	6999      	ldr	r1, [r3, #24]
 8008e9e:	68bb      	ldr	r3, [r7, #8]
 8008ea0:	691b      	ldr	r3, [r3, #16]
 8008ea2:	021a      	lsls	r2, r3, #8
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	430a      	orrs	r2, r1
 8008eaa:	619a      	str	r2, [r3, #24]
      break;
 8008eac:	e041      	b.n	8008f32 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008eae:	68fb      	ldr	r3, [r7, #12]
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	68b9      	ldr	r1, [r7, #8]
 8008eb4:	4618      	mov	r0, r3
 8008eb6:	f000 f9eb 	bl	8009290 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008eba:	68fb      	ldr	r3, [r7, #12]
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	69da      	ldr	r2, [r3, #28]
 8008ec0:	68fb      	ldr	r3, [r7, #12]
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	f042 0208 	orr.w	r2, r2, #8
 8008ec8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008eca:	68fb      	ldr	r3, [r7, #12]
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	69da      	ldr	r2, [r3, #28]
 8008ed0:	68fb      	ldr	r3, [r7, #12]
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	f022 0204 	bic.w	r2, r2, #4
 8008ed8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008eda:	68fb      	ldr	r3, [r7, #12]
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	69d9      	ldr	r1, [r3, #28]
 8008ee0:	68bb      	ldr	r3, [r7, #8]
 8008ee2:	691a      	ldr	r2, [r3, #16]
 8008ee4:	68fb      	ldr	r3, [r7, #12]
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	430a      	orrs	r2, r1
 8008eea:	61da      	str	r2, [r3, #28]
      break;
 8008eec:	e021      	b.n	8008f32 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008eee:	68fb      	ldr	r3, [r7, #12]
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	68b9      	ldr	r1, [r7, #8]
 8008ef4:	4618      	mov	r0, r3
 8008ef6:	f000 fa3f 	bl	8009378 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008efa:	68fb      	ldr	r3, [r7, #12]
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	69da      	ldr	r2, [r3, #28]
 8008f00:	68fb      	ldr	r3, [r7, #12]
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008f08:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008f0a:	68fb      	ldr	r3, [r7, #12]
 8008f0c:	681b      	ldr	r3, [r3, #0]
 8008f0e:	69da      	ldr	r2, [r3, #28]
 8008f10:	68fb      	ldr	r3, [r7, #12]
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008f18:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008f1a:	68fb      	ldr	r3, [r7, #12]
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	69d9      	ldr	r1, [r3, #28]
 8008f20:	68bb      	ldr	r3, [r7, #8]
 8008f22:	691b      	ldr	r3, [r3, #16]
 8008f24:	021a      	lsls	r2, r3, #8
 8008f26:	68fb      	ldr	r3, [r7, #12]
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	430a      	orrs	r2, r1
 8008f2c:	61da      	str	r2, [r3, #28]
      break;
 8008f2e:	e000      	b.n	8008f32 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8008f30:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008f32:	68fb      	ldr	r3, [r7, #12]
 8008f34:	2200      	movs	r2, #0
 8008f36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008f3a:	2300      	movs	r3, #0
}
 8008f3c:	4618      	mov	r0, r3
 8008f3e:	3710      	adds	r7, #16
 8008f40:	46bd      	mov	sp, r7
 8008f42:	bd80      	pop	{r7, pc}

08008f44 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008f44:	b480      	push	{r7}
 8008f46:	b083      	sub	sp, #12
 8008f48:	af00      	add	r7, sp, #0
 8008f4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008f4c:	bf00      	nop
 8008f4e:	370c      	adds	r7, #12
 8008f50:	46bd      	mov	sp, r7
 8008f52:	bc80      	pop	{r7}
 8008f54:	4770      	bx	lr

08008f56 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008f56:	b480      	push	{r7}
 8008f58:	b083      	sub	sp, #12
 8008f5a:	af00      	add	r7, sp, #0
 8008f5c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008f5e:	bf00      	nop
 8008f60:	370c      	adds	r7, #12
 8008f62:	46bd      	mov	sp, r7
 8008f64:	bc80      	pop	{r7}
 8008f66:	4770      	bx	lr

08008f68 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008f68:	b480      	push	{r7}
 8008f6a:	b083      	sub	sp, #12
 8008f6c:	af00      	add	r7, sp, #0
 8008f6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008f70:	bf00      	nop
 8008f72:	370c      	adds	r7, #12
 8008f74:	46bd      	mov	sp, r7
 8008f76:	bc80      	pop	{r7}
 8008f78:	4770      	bx	lr

08008f7a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008f7a:	b480      	push	{r7}
 8008f7c:	b083      	sub	sp, #12
 8008f7e:	af00      	add	r7, sp, #0
 8008f80:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008f82:	bf00      	nop
 8008f84:	370c      	adds	r7, #12
 8008f86:	46bd      	mov	sp, r7
 8008f88:	bc80      	pop	{r7}
 8008f8a:	4770      	bx	lr

08008f8c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008f8c:	b480      	push	{r7}
 8008f8e:	b085      	sub	sp, #20
 8008f90:	af00      	add	r7, sp, #0
 8008f92:	6078      	str	r0, [r7, #4]
 8008f94:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	4a3f      	ldr	r2, [pc, #252]	; (800909c <TIM_Base_SetConfig+0x110>)
 8008fa0:	4293      	cmp	r3, r2
 8008fa2:	d013      	beq.n	8008fcc <TIM_Base_SetConfig+0x40>
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008faa:	d00f      	beq.n	8008fcc <TIM_Base_SetConfig+0x40>
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	4a3c      	ldr	r2, [pc, #240]	; (80090a0 <TIM_Base_SetConfig+0x114>)
 8008fb0:	4293      	cmp	r3, r2
 8008fb2:	d00b      	beq.n	8008fcc <TIM_Base_SetConfig+0x40>
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	4a3b      	ldr	r2, [pc, #236]	; (80090a4 <TIM_Base_SetConfig+0x118>)
 8008fb8:	4293      	cmp	r3, r2
 8008fba:	d007      	beq.n	8008fcc <TIM_Base_SetConfig+0x40>
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	4a3a      	ldr	r2, [pc, #232]	; (80090a8 <TIM_Base_SetConfig+0x11c>)
 8008fc0:	4293      	cmp	r3, r2
 8008fc2:	d003      	beq.n	8008fcc <TIM_Base_SetConfig+0x40>
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	4a39      	ldr	r2, [pc, #228]	; (80090ac <TIM_Base_SetConfig+0x120>)
 8008fc8:	4293      	cmp	r3, r2
 8008fca:	d108      	bne.n	8008fde <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008fcc:	68fb      	ldr	r3, [r7, #12]
 8008fce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008fd2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008fd4:	683b      	ldr	r3, [r7, #0]
 8008fd6:	685b      	ldr	r3, [r3, #4]
 8008fd8:	68fa      	ldr	r2, [r7, #12]
 8008fda:	4313      	orrs	r3, r2
 8008fdc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	4a2e      	ldr	r2, [pc, #184]	; (800909c <TIM_Base_SetConfig+0x110>)
 8008fe2:	4293      	cmp	r3, r2
 8008fe4:	d02b      	beq.n	800903e <TIM_Base_SetConfig+0xb2>
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008fec:	d027      	beq.n	800903e <TIM_Base_SetConfig+0xb2>
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	4a2b      	ldr	r2, [pc, #172]	; (80090a0 <TIM_Base_SetConfig+0x114>)
 8008ff2:	4293      	cmp	r3, r2
 8008ff4:	d023      	beq.n	800903e <TIM_Base_SetConfig+0xb2>
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	4a2a      	ldr	r2, [pc, #168]	; (80090a4 <TIM_Base_SetConfig+0x118>)
 8008ffa:	4293      	cmp	r3, r2
 8008ffc:	d01f      	beq.n	800903e <TIM_Base_SetConfig+0xb2>
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	4a29      	ldr	r2, [pc, #164]	; (80090a8 <TIM_Base_SetConfig+0x11c>)
 8009002:	4293      	cmp	r3, r2
 8009004:	d01b      	beq.n	800903e <TIM_Base_SetConfig+0xb2>
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	4a28      	ldr	r2, [pc, #160]	; (80090ac <TIM_Base_SetConfig+0x120>)
 800900a:	4293      	cmp	r3, r2
 800900c:	d017      	beq.n	800903e <TIM_Base_SetConfig+0xb2>
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	4a27      	ldr	r2, [pc, #156]	; (80090b0 <TIM_Base_SetConfig+0x124>)
 8009012:	4293      	cmp	r3, r2
 8009014:	d013      	beq.n	800903e <TIM_Base_SetConfig+0xb2>
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	4a26      	ldr	r2, [pc, #152]	; (80090b4 <TIM_Base_SetConfig+0x128>)
 800901a:	4293      	cmp	r3, r2
 800901c:	d00f      	beq.n	800903e <TIM_Base_SetConfig+0xb2>
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	4a25      	ldr	r2, [pc, #148]	; (80090b8 <TIM_Base_SetConfig+0x12c>)
 8009022:	4293      	cmp	r3, r2
 8009024:	d00b      	beq.n	800903e <TIM_Base_SetConfig+0xb2>
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	4a24      	ldr	r2, [pc, #144]	; (80090bc <TIM_Base_SetConfig+0x130>)
 800902a:	4293      	cmp	r3, r2
 800902c:	d007      	beq.n	800903e <TIM_Base_SetConfig+0xb2>
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	4a23      	ldr	r2, [pc, #140]	; (80090c0 <TIM_Base_SetConfig+0x134>)
 8009032:	4293      	cmp	r3, r2
 8009034:	d003      	beq.n	800903e <TIM_Base_SetConfig+0xb2>
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	4a22      	ldr	r2, [pc, #136]	; (80090c4 <TIM_Base_SetConfig+0x138>)
 800903a:	4293      	cmp	r3, r2
 800903c:	d108      	bne.n	8009050 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800903e:	68fb      	ldr	r3, [r7, #12]
 8009040:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009044:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009046:	683b      	ldr	r3, [r7, #0]
 8009048:	68db      	ldr	r3, [r3, #12]
 800904a:	68fa      	ldr	r2, [r7, #12]
 800904c:	4313      	orrs	r3, r2
 800904e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009050:	68fb      	ldr	r3, [r7, #12]
 8009052:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009056:	683b      	ldr	r3, [r7, #0]
 8009058:	695b      	ldr	r3, [r3, #20]
 800905a:	4313      	orrs	r3, r2
 800905c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	68fa      	ldr	r2, [r7, #12]
 8009062:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009064:	683b      	ldr	r3, [r7, #0]
 8009066:	689a      	ldr	r2, [r3, #8]
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800906c:	683b      	ldr	r3, [r7, #0]
 800906e:	681a      	ldr	r2, [r3, #0]
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	4a09      	ldr	r2, [pc, #36]	; (800909c <TIM_Base_SetConfig+0x110>)
 8009078:	4293      	cmp	r3, r2
 800907a:	d003      	beq.n	8009084 <TIM_Base_SetConfig+0xf8>
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	4a0b      	ldr	r2, [pc, #44]	; (80090ac <TIM_Base_SetConfig+0x120>)
 8009080:	4293      	cmp	r3, r2
 8009082:	d103      	bne.n	800908c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009084:	683b      	ldr	r3, [r7, #0]
 8009086:	691a      	ldr	r2, [r3, #16]
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	2201      	movs	r2, #1
 8009090:	615a      	str	r2, [r3, #20]
}
 8009092:	bf00      	nop
 8009094:	3714      	adds	r7, #20
 8009096:	46bd      	mov	sp, r7
 8009098:	bc80      	pop	{r7}
 800909a:	4770      	bx	lr
 800909c:	40010000 	.word	0x40010000
 80090a0:	40000400 	.word	0x40000400
 80090a4:	40000800 	.word	0x40000800
 80090a8:	40000c00 	.word	0x40000c00
 80090ac:	40010400 	.word	0x40010400
 80090b0:	40014000 	.word	0x40014000
 80090b4:	40014400 	.word	0x40014400
 80090b8:	40014800 	.word	0x40014800
 80090bc:	40001800 	.word	0x40001800
 80090c0:	40001c00 	.word	0x40001c00
 80090c4:	40002000 	.word	0x40002000

080090c8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80090c8:	b480      	push	{r7}
 80090ca:	b087      	sub	sp, #28
 80090cc:	af00      	add	r7, sp, #0
 80090ce:	6078      	str	r0, [r7, #4]
 80090d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	6a1b      	ldr	r3, [r3, #32]
 80090d6:	f023 0201 	bic.w	r2, r3, #1
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	6a1b      	ldr	r3, [r3, #32]
 80090e2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	685b      	ldr	r3, [r3, #4]
 80090e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	699b      	ldr	r3, [r3, #24]
 80090ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80090f0:	68fb      	ldr	r3, [r7, #12]
 80090f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80090f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80090f8:	68fb      	ldr	r3, [r7, #12]
 80090fa:	f023 0303 	bic.w	r3, r3, #3
 80090fe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009100:	683b      	ldr	r3, [r7, #0]
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	68fa      	ldr	r2, [r7, #12]
 8009106:	4313      	orrs	r3, r2
 8009108:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800910a:	697b      	ldr	r3, [r7, #20]
 800910c:	f023 0302 	bic.w	r3, r3, #2
 8009110:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009112:	683b      	ldr	r3, [r7, #0]
 8009114:	689b      	ldr	r3, [r3, #8]
 8009116:	697a      	ldr	r2, [r7, #20]
 8009118:	4313      	orrs	r3, r2
 800911a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	4a20      	ldr	r2, [pc, #128]	; (80091a0 <TIM_OC1_SetConfig+0xd8>)
 8009120:	4293      	cmp	r3, r2
 8009122:	d003      	beq.n	800912c <TIM_OC1_SetConfig+0x64>
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	4a1f      	ldr	r2, [pc, #124]	; (80091a4 <TIM_OC1_SetConfig+0xdc>)
 8009128:	4293      	cmp	r3, r2
 800912a:	d10c      	bne.n	8009146 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800912c:	697b      	ldr	r3, [r7, #20]
 800912e:	f023 0308 	bic.w	r3, r3, #8
 8009132:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009134:	683b      	ldr	r3, [r7, #0]
 8009136:	68db      	ldr	r3, [r3, #12]
 8009138:	697a      	ldr	r2, [r7, #20]
 800913a:	4313      	orrs	r3, r2
 800913c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800913e:	697b      	ldr	r3, [r7, #20]
 8009140:	f023 0304 	bic.w	r3, r3, #4
 8009144:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	4a15      	ldr	r2, [pc, #84]	; (80091a0 <TIM_OC1_SetConfig+0xd8>)
 800914a:	4293      	cmp	r3, r2
 800914c:	d003      	beq.n	8009156 <TIM_OC1_SetConfig+0x8e>
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	4a14      	ldr	r2, [pc, #80]	; (80091a4 <TIM_OC1_SetConfig+0xdc>)
 8009152:	4293      	cmp	r3, r2
 8009154:	d111      	bne.n	800917a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8009156:	693b      	ldr	r3, [r7, #16]
 8009158:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800915c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800915e:	693b      	ldr	r3, [r7, #16]
 8009160:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009164:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8009166:	683b      	ldr	r3, [r7, #0]
 8009168:	695b      	ldr	r3, [r3, #20]
 800916a:	693a      	ldr	r2, [r7, #16]
 800916c:	4313      	orrs	r3, r2
 800916e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009170:	683b      	ldr	r3, [r7, #0]
 8009172:	699b      	ldr	r3, [r3, #24]
 8009174:	693a      	ldr	r2, [r7, #16]
 8009176:	4313      	orrs	r3, r2
 8009178:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	693a      	ldr	r2, [r7, #16]
 800917e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	68fa      	ldr	r2, [r7, #12]
 8009184:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009186:	683b      	ldr	r3, [r7, #0]
 8009188:	685a      	ldr	r2, [r3, #4]
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	697a      	ldr	r2, [r7, #20]
 8009192:	621a      	str	r2, [r3, #32]
}
 8009194:	bf00      	nop
 8009196:	371c      	adds	r7, #28
 8009198:	46bd      	mov	sp, r7
 800919a:	bc80      	pop	{r7}
 800919c:	4770      	bx	lr
 800919e:	bf00      	nop
 80091a0:	40010000 	.word	0x40010000
 80091a4:	40010400 	.word	0x40010400

080091a8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80091a8:	b480      	push	{r7}
 80091aa:	b087      	sub	sp, #28
 80091ac:	af00      	add	r7, sp, #0
 80091ae:	6078      	str	r0, [r7, #4]
 80091b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	6a1b      	ldr	r3, [r3, #32]
 80091b6:	f023 0210 	bic.w	r2, r3, #16
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	6a1b      	ldr	r3, [r3, #32]
 80091c2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	685b      	ldr	r3, [r3, #4]
 80091c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	699b      	ldr	r3, [r3, #24]
 80091ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80091d0:	68fb      	ldr	r3, [r7, #12]
 80091d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80091d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80091d8:	68fb      	ldr	r3, [r7, #12]
 80091da:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80091de:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80091e0:	683b      	ldr	r3, [r7, #0]
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	021b      	lsls	r3, r3, #8
 80091e6:	68fa      	ldr	r2, [r7, #12]
 80091e8:	4313      	orrs	r3, r2
 80091ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80091ec:	697b      	ldr	r3, [r7, #20]
 80091ee:	f023 0320 	bic.w	r3, r3, #32
 80091f2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80091f4:	683b      	ldr	r3, [r7, #0]
 80091f6:	689b      	ldr	r3, [r3, #8]
 80091f8:	011b      	lsls	r3, r3, #4
 80091fa:	697a      	ldr	r2, [r7, #20]
 80091fc:	4313      	orrs	r3, r2
 80091fe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	4a21      	ldr	r2, [pc, #132]	; (8009288 <TIM_OC2_SetConfig+0xe0>)
 8009204:	4293      	cmp	r3, r2
 8009206:	d003      	beq.n	8009210 <TIM_OC2_SetConfig+0x68>
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	4a20      	ldr	r2, [pc, #128]	; (800928c <TIM_OC2_SetConfig+0xe4>)
 800920c:	4293      	cmp	r3, r2
 800920e:	d10d      	bne.n	800922c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009210:	697b      	ldr	r3, [r7, #20]
 8009212:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009216:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009218:	683b      	ldr	r3, [r7, #0]
 800921a:	68db      	ldr	r3, [r3, #12]
 800921c:	011b      	lsls	r3, r3, #4
 800921e:	697a      	ldr	r2, [r7, #20]
 8009220:	4313      	orrs	r3, r2
 8009222:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009224:	697b      	ldr	r3, [r7, #20]
 8009226:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800922a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	4a16      	ldr	r2, [pc, #88]	; (8009288 <TIM_OC2_SetConfig+0xe0>)
 8009230:	4293      	cmp	r3, r2
 8009232:	d003      	beq.n	800923c <TIM_OC2_SetConfig+0x94>
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	4a15      	ldr	r2, [pc, #84]	; (800928c <TIM_OC2_SetConfig+0xe4>)
 8009238:	4293      	cmp	r3, r2
 800923a:	d113      	bne.n	8009264 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800923c:	693b      	ldr	r3, [r7, #16]
 800923e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009242:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009244:	693b      	ldr	r3, [r7, #16]
 8009246:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800924a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800924c:	683b      	ldr	r3, [r7, #0]
 800924e:	695b      	ldr	r3, [r3, #20]
 8009250:	009b      	lsls	r3, r3, #2
 8009252:	693a      	ldr	r2, [r7, #16]
 8009254:	4313      	orrs	r3, r2
 8009256:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009258:	683b      	ldr	r3, [r7, #0]
 800925a:	699b      	ldr	r3, [r3, #24]
 800925c:	009b      	lsls	r3, r3, #2
 800925e:	693a      	ldr	r2, [r7, #16]
 8009260:	4313      	orrs	r3, r2
 8009262:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	693a      	ldr	r2, [r7, #16]
 8009268:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	68fa      	ldr	r2, [r7, #12]
 800926e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009270:	683b      	ldr	r3, [r7, #0]
 8009272:	685a      	ldr	r2, [r3, #4]
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	697a      	ldr	r2, [r7, #20]
 800927c:	621a      	str	r2, [r3, #32]
}
 800927e:	bf00      	nop
 8009280:	371c      	adds	r7, #28
 8009282:	46bd      	mov	sp, r7
 8009284:	bc80      	pop	{r7}
 8009286:	4770      	bx	lr
 8009288:	40010000 	.word	0x40010000
 800928c:	40010400 	.word	0x40010400

08009290 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009290:	b480      	push	{r7}
 8009292:	b087      	sub	sp, #28
 8009294:	af00      	add	r7, sp, #0
 8009296:	6078      	str	r0, [r7, #4]
 8009298:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	6a1b      	ldr	r3, [r3, #32]
 800929e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	6a1b      	ldr	r3, [r3, #32]
 80092aa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	685b      	ldr	r3, [r3, #4]
 80092b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	69db      	ldr	r3, [r3, #28]
 80092b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80092b8:	68fb      	ldr	r3, [r7, #12]
 80092ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80092be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80092c0:	68fb      	ldr	r3, [r7, #12]
 80092c2:	f023 0303 	bic.w	r3, r3, #3
 80092c6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80092c8:	683b      	ldr	r3, [r7, #0]
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	68fa      	ldr	r2, [r7, #12]
 80092ce:	4313      	orrs	r3, r2
 80092d0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80092d2:	697b      	ldr	r3, [r7, #20]
 80092d4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80092d8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80092da:	683b      	ldr	r3, [r7, #0]
 80092dc:	689b      	ldr	r3, [r3, #8]
 80092de:	021b      	lsls	r3, r3, #8
 80092e0:	697a      	ldr	r2, [r7, #20]
 80092e2:	4313      	orrs	r3, r2
 80092e4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	4a21      	ldr	r2, [pc, #132]	; (8009370 <TIM_OC3_SetConfig+0xe0>)
 80092ea:	4293      	cmp	r3, r2
 80092ec:	d003      	beq.n	80092f6 <TIM_OC3_SetConfig+0x66>
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	4a20      	ldr	r2, [pc, #128]	; (8009374 <TIM_OC3_SetConfig+0xe4>)
 80092f2:	4293      	cmp	r3, r2
 80092f4:	d10d      	bne.n	8009312 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80092f6:	697b      	ldr	r3, [r7, #20]
 80092f8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80092fc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80092fe:	683b      	ldr	r3, [r7, #0]
 8009300:	68db      	ldr	r3, [r3, #12]
 8009302:	021b      	lsls	r3, r3, #8
 8009304:	697a      	ldr	r2, [r7, #20]
 8009306:	4313      	orrs	r3, r2
 8009308:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800930a:	697b      	ldr	r3, [r7, #20]
 800930c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009310:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	4a16      	ldr	r2, [pc, #88]	; (8009370 <TIM_OC3_SetConfig+0xe0>)
 8009316:	4293      	cmp	r3, r2
 8009318:	d003      	beq.n	8009322 <TIM_OC3_SetConfig+0x92>
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	4a15      	ldr	r2, [pc, #84]	; (8009374 <TIM_OC3_SetConfig+0xe4>)
 800931e:	4293      	cmp	r3, r2
 8009320:	d113      	bne.n	800934a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8009322:	693b      	ldr	r3, [r7, #16]
 8009324:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009328:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800932a:	693b      	ldr	r3, [r7, #16]
 800932c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009330:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8009332:	683b      	ldr	r3, [r7, #0]
 8009334:	695b      	ldr	r3, [r3, #20]
 8009336:	011b      	lsls	r3, r3, #4
 8009338:	693a      	ldr	r2, [r7, #16]
 800933a:	4313      	orrs	r3, r2
 800933c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800933e:	683b      	ldr	r3, [r7, #0]
 8009340:	699b      	ldr	r3, [r3, #24]
 8009342:	011b      	lsls	r3, r3, #4
 8009344:	693a      	ldr	r2, [r7, #16]
 8009346:	4313      	orrs	r3, r2
 8009348:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	693a      	ldr	r2, [r7, #16]
 800934e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	68fa      	ldr	r2, [r7, #12]
 8009354:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009356:	683b      	ldr	r3, [r7, #0]
 8009358:	685a      	ldr	r2, [r3, #4]
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	697a      	ldr	r2, [r7, #20]
 8009362:	621a      	str	r2, [r3, #32]
}
 8009364:	bf00      	nop
 8009366:	371c      	adds	r7, #28
 8009368:	46bd      	mov	sp, r7
 800936a:	bc80      	pop	{r7}
 800936c:	4770      	bx	lr
 800936e:	bf00      	nop
 8009370:	40010000 	.word	0x40010000
 8009374:	40010400 	.word	0x40010400

08009378 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009378:	b480      	push	{r7}
 800937a:	b087      	sub	sp, #28
 800937c:	af00      	add	r7, sp, #0
 800937e:	6078      	str	r0, [r7, #4]
 8009380:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	6a1b      	ldr	r3, [r3, #32]
 8009386:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	6a1b      	ldr	r3, [r3, #32]
 8009392:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	685b      	ldr	r3, [r3, #4]
 8009398:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	69db      	ldr	r3, [r3, #28]
 800939e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80093a0:	68fb      	ldr	r3, [r7, #12]
 80093a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80093a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80093a8:	68fb      	ldr	r3, [r7, #12]
 80093aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80093ae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80093b0:	683b      	ldr	r3, [r7, #0]
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	021b      	lsls	r3, r3, #8
 80093b6:	68fa      	ldr	r2, [r7, #12]
 80093b8:	4313      	orrs	r3, r2
 80093ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80093bc:	693b      	ldr	r3, [r7, #16]
 80093be:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80093c2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80093c4:	683b      	ldr	r3, [r7, #0]
 80093c6:	689b      	ldr	r3, [r3, #8]
 80093c8:	031b      	lsls	r3, r3, #12
 80093ca:	693a      	ldr	r2, [r7, #16]
 80093cc:	4313      	orrs	r3, r2
 80093ce:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	4a11      	ldr	r2, [pc, #68]	; (8009418 <TIM_OC4_SetConfig+0xa0>)
 80093d4:	4293      	cmp	r3, r2
 80093d6:	d003      	beq.n	80093e0 <TIM_OC4_SetConfig+0x68>
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	4a10      	ldr	r2, [pc, #64]	; (800941c <TIM_OC4_SetConfig+0xa4>)
 80093dc:	4293      	cmp	r3, r2
 80093de:	d109      	bne.n	80093f4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80093e0:	697b      	ldr	r3, [r7, #20]
 80093e2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80093e6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80093e8:	683b      	ldr	r3, [r7, #0]
 80093ea:	695b      	ldr	r3, [r3, #20]
 80093ec:	019b      	lsls	r3, r3, #6
 80093ee:	697a      	ldr	r2, [r7, #20]
 80093f0:	4313      	orrs	r3, r2
 80093f2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	697a      	ldr	r2, [r7, #20]
 80093f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	68fa      	ldr	r2, [r7, #12]
 80093fe:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009400:	683b      	ldr	r3, [r7, #0]
 8009402:	685a      	ldr	r2, [r3, #4]
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	693a      	ldr	r2, [r7, #16]
 800940c:	621a      	str	r2, [r3, #32]
}
 800940e:	bf00      	nop
 8009410:	371c      	adds	r7, #28
 8009412:	46bd      	mov	sp, r7
 8009414:	bc80      	pop	{r7}
 8009416:	4770      	bx	lr
 8009418:	40010000 	.word	0x40010000
 800941c:	40010400 	.word	0x40010400

08009420 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009420:	b480      	push	{r7}
 8009422:	b087      	sub	sp, #28
 8009424:	af00      	add	r7, sp, #0
 8009426:	60f8      	str	r0, [r7, #12]
 8009428:	60b9      	str	r1, [r7, #8]
 800942a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800942c:	68bb      	ldr	r3, [r7, #8]
 800942e:	f003 031f 	and.w	r3, r3, #31
 8009432:	2201      	movs	r2, #1
 8009434:	fa02 f303 	lsl.w	r3, r2, r3
 8009438:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800943a:	68fb      	ldr	r3, [r7, #12]
 800943c:	6a1a      	ldr	r2, [r3, #32]
 800943e:	697b      	ldr	r3, [r7, #20]
 8009440:	43db      	mvns	r3, r3
 8009442:	401a      	ands	r2, r3
 8009444:	68fb      	ldr	r3, [r7, #12]
 8009446:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009448:	68fb      	ldr	r3, [r7, #12]
 800944a:	6a1a      	ldr	r2, [r3, #32]
 800944c:	68bb      	ldr	r3, [r7, #8]
 800944e:	f003 031f 	and.w	r3, r3, #31
 8009452:	6879      	ldr	r1, [r7, #4]
 8009454:	fa01 f303 	lsl.w	r3, r1, r3
 8009458:	431a      	orrs	r2, r3
 800945a:	68fb      	ldr	r3, [r7, #12]
 800945c:	621a      	str	r2, [r3, #32]
}
 800945e:	bf00      	nop
 8009460:	371c      	adds	r7, #28
 8009462:	46bd      	mov	sp, r7
 8009464:	bc80      	pop	{r7}
 8009466:	4770      	bx	lr

08009468 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009468:	b480      	push	{r7}
 800946a:	b085      	sub	sp, #20
 800946c:	af00      	add	r7, sp, #0
 800946e:	6078      	str	r0, [r7, #4]
 8009470:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009478:	2b01      	cmp	r3, #1
 800947a:	d101      	bne.n	8009480 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800947c:	2302      	movs	r3, #2
 800947e:	e05a      	b.n	8009536 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	2201      	movs	r2, #1
 8009484:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	2202      	movs	r2, #2
 800948c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	685b      	ldr	r3, [r3, #4]
 8009496:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	689b      	ldr	r3, [r3, #8]
 800949e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80094a0:	68fb      	ldr	r3, [r7, #12]
 80094a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80094a6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80094a8:	683b      	ldr	r3, [r7, #0]
 80094aa:	681b      	ldr	r3, [r3, #0]
 80094ac:	68fa      	ldr	r2, [r7, #12]
 80094ae:	4313      	orrs	r3, r2
 80094b0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	681b      	ldr	r3, [r3, #0]
 80094b6:	68fa      	ldr	r2, [r7, #12]
 80094b8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	4a20      	ldr	r2, [pc, #128]	; (8009540 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80094c0:	4293      	cmp	r3, r2
 80094c2:	d022      	beq.n	800950a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80094cc:	d01d      	beq.n	800950a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	4a1c      	ldr	r2, [pc, #112]	; (8009544 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80094d4:	4293      	cmp	r3, r2
 80094d6:	d018      	beq.n	800950a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	4a1a      	ldr	r2, [pc, #104]	; (8009548 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80094de:	4293      	cmp	r3, r2
 80094e0:	d013      	beq.n	800950a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	681b      	ldr	r3, [r3, #0]
 80094e6:	4a19      	ldr	r2, [pc, #100]	; (800954c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80094e8:	4293      	cmp	r3, r2
 80094ea:	d00e      	beq.n	800950a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	4a17      	ldr	r2, [pc, #92]	; (8009550 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80094f2:	4293      	cmp	r3, r2
 80094f4:	d009      	beq.n	800950a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	4a16      	ldr	r2, [pc, #88]	; (8009554 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80094fc:	4293      	cmp	r3, r2
 80094fe:	d004      	beq.n	800950a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	4a14      	ldr	r2, [pc, #80]	; (8009558 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8009506:	4293      	cmp	r3, r2
 8009508:	d10c      	bne.n	8009524 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800950a:	68bb      	ldr	r3, [r7, #8]
 800950c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009510:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009512:	683b      	ldr	r3, [r7, #0]
 8009514:	685b      	ldr	r3, [r3, #4]
 8009516:	68ba      	ldr	r2, [r7, #8]
 8009518:	4313      	orrs	r3, r2
 800951a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	68ba      	ldr	r2, [r7, #8]
 8009522:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	2201      	movs	r2, #1
 8009528:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	2200      	movs	r2, #0
 8009530:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009534:	2300      	movs	r3, #0
}
 8009536:	4618      	mov	r0, r3
 8009538:	3714      	adds	r7, #20
 800953a:	46bd      	mov	sp, r7
 800953c:	bc80      	pop	{r7}
 800953e:	4770      	bx	lr
 8009540:	40010000 	.word	0x40010000
 8009544:	40000400 	.word	0x40000400
 8009548:	40000800 	.word	0x40000800
 800954c:	40000c00 	.word	0x40000c00
 8009550:	40010400 	.word	0x40010400
 8009554:	40014000 	.word	0x40014000
 8009558:	40001800 	.word	0x40001800

0800955c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800955c:	b480      	push	{r7}
 800955e:	b083      	sub	sp, #12
 8009560:	af00      	add	r7, sp, #0
 8009562:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009564:	bf00      	nop
 8009566:	370c      	adds	r7, #12
 8009568:	46bd      	mov	sp, r7
 800956a:	bc80      	pop	{r7}
 800956c:	4770      	bx	lr

0800956e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800956e:	b480      	push	{r7}
 8009570:	b083      	sub	sp, #12
 8009572:	af00      	add	r7, sp, #0
 8009574:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009576:	bf00      	nop
 8009578:	370c      	adds	r7, #12
 800957a:	46bd      	mov	sp, r7
 800957c:	bc80      	pop	{r7}
 800957e:	4770      	bx	lr

08009580 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009580:	b084      	sub	sp, #16
 8009582:	b580      	push	{r7, lr}
 8009584:	b084      	sub	sp, #16
 8009586:	af00      	add	r7, sp, #0
 8009588:	6078      	str	r0, [r7, #4]
 800958a:	f107 001c 	add.w	r0, r7, #28
 800958e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8009592:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009594:	2b01      	cmp	r3, #1
 8009596:	d122      	bne.n	80095de <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800959c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	68db      	ldr	r3, [r3, #12]
 80095a8:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80095ac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80095b0:	687a      	ldr	r2, [r7, #4]
 80095b2:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	68db      	ldr	r3, [r3, #12]
 80095b8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80095c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80095c2:	2b01      	cmp	r3, #1
 80095c4:	d105      	bne.n	80095d2 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	68db      	ldr	r3, [r3, #12]
 80095ca:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80095d2:	6878      	ldr	r0, [r7, #4]
 80095d4:	f001 fafa 	bl	800abcc <USB_CoreReset>
 80095d8:	4603      	mov	r3, r0
 80095da:	73fb      	strb	r3, [r7, #15]
 80095dc:	e010      	b.n	8009600 <USB_CoreInit+0x80>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	68db      	ldr	r3, [r3, #12]
 80095e2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80095ea:	6878      	ldr	r0, [r7, #4]
 80095ec:	f001 faee 	bl	800abcc <USB_CoreReset>
 80095f0:	4603      	mov	r3, r0
 80095f2:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80095f8:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8009600:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009602:	2b01      	cmp	r3, #1
 8009604:	d10b      	bne.n	800961e <USB_CoreInit+0x9e>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	689b      	ldr	r3, [r3, #8]
 800960a:	f043 0206 	orr.w	r2, r3, #6
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	689b      	ldr	r3, [r3, #8]
 8009616:	f043 0220 	orr.w	r2, r3, #32
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800961e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009620:	4618      	mov	r0, r3
 8009622:	3710      	adds	r7, #16
 8009624:	46bd      	mov	sp, r7
 8009626:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800962a:	b004      	add	sp, #16
 800962c:	4770      	bx	lr
	...

08009630 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8009630:	b480      	push	{r7}
 8009632:	b087      	sub	sp, #28
 8009634:	af00      	add	r7, sp, #0
 8009636:	60f8      	str	r0, [r7, #12]
 8009638:	60b9      	str	r1, [r7, #8]
 800963a:	4613      	mov	r3, r2
 800963c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800963e:	79fb      	ldrb	r3, [r7, #7]
 8009640:	2b02      	cmp	r3, #2
 8009642:	d165      	bne.n	8009710 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8009644:	68bb      	ldr	r3, [r7, #8]
 8009646:	4a41      	ldr	r2, [pc, #260]	; (800974c <USB_SetTurnaroundTime+0x11c>)
 8009648:	4293      	cmp	r3, r2
 800964a:	d906      	bls.n	800965a <USB_SetTurnaroundTime+0x2a>
 800964c:	68bb      	ldr	r3, [r7, #8]
 800964e:	4a40      	ldr	r2, [pc, #256]	; (8009750 <USB_SetTurnaroundTime+0x120>)
 8009650:	4293      	cmp	r3, r2
 8009652:	d202      	bcs.n	800965a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8009654:	230f      	movs	r3, #15
 8009656:	617b      	str	r3, [r7, #20]
 8009658:	e062      	b.n	8009720 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800965a:	68bb      	ldr	r3, [r7, #8]
 800965c:	4a3c      	ldr	r2, [pc, #240]	; (8009750 <USB_SetTurnaroundTime+0x120>)
 800965e:	4293      	cmp	r3, r2
 8009660:	d306      	bcc.n	8009670 <USB_SetTurnaroundTime+0x40>
 8009662:	68bb      	ldr	r3, [r7, #8]
 8009664:	4a3b      	ldr	r2, [pc, #236]	; (8009754 <USB_SetTurnaroundTime+0x124>)
 8009666:	4293      	cmp	r3, r2
 8009668:	d202      	bcs.n	8009670 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800966a:	230e      	movs	r3, #14
 800966c:	617b      	str	r3, [r7, #20]
 800966e:	e057      	b.n	8009720 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8009670:	68bb      	ldr	r3, [r7, #8]
 8009672:	4a38      	ldr	r2, [pc, #224]	; (8009754 <USB_SetTurnaroundTime+0x124>)
 8009674:	4293      	cmp	r3, r2
 8009676:	d306      	bcc.n	8009686 <USB_SetTurnaroundTime+0x56>
 8009678:	68bb      	ldr	r3, [r7, #8]
 800967a:	4a37      	ldr	r2, [pc, #220]	; (8009758 <USB_SetTurnaroundTime+0x128>)
 800967c:	4293      	cmp	r3, r2
 800967e:	d202      	bcs.n	8009686 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8009680:	230d      	movs	r3, #13
 8009682:	617b      	str	r3, [r7, #20]
 8009684:	e04c      	b.n	8009720 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8009686:	68bb      	ldr	r3, [r7, #8]
 8009688:	4a33      	ldr	r2, [pc, #204]	; (8009758 <USB_SetTurnaroundTime+0x128>)
 800968a:	4293      	cmp	r3, r2
 800968c:	d306      	bcc.n	800969c <USB_SetTurnaroundTime+0x6c>
 800968e:	68bb      	ldr	r3, [r7, #8]
 8009690:	4a32      	ldr	r2, [pc, #200]	; (800975c <USB_SetTurnaroundTime+0x12c>)
 8009692:	4293      	cmp	r3, r2
 8009694:	d802      	bhi.n	800969c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8009696:	230c      	movs	r3, #12
 8009698:	617b      	str	r3, [r7, #20]
 800969a:	e041      	b.n	8009720 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800969c:	68bb      	ldr	r3, [r7, #8]
 800969e:	4a2f      	ldr	r2, [pc, #188]	; (800975c <USB_SetTurnaroundTime+0x12c>)
 80096a0:	4293      	cmp	r3, r2
 80096a2:	d906      	bls.n	80096b2 <USB_SetTurnaroundTime+0x82>
 80096a4:	68bb      	ldr	r3, [r7, #8]
 80096a6:	4a2e      	ldr	r2, [pc, #184]	; (8009760 <USB_SetTurnaroundTime+0x130>)
 80096a8:	4293      	cmp	r3, r2
 80096aa:	d802      	bhi.n	80096b2 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80096ac:	230b      	movs	r3, #11
 80096ae:	617b      	str	r3, [r7, #20]
 80096b0:	e036      	b.n	8009720 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80096b2:	68bb      	ldr	r3, [r7, #8]
 80096b4:	4a2a      	ldr	r2, [pc, #168]	; (8009760 <USB_SetTurnaroundTime+0x130>)
 80096b6:	4293      	cmp	r3, r2
 80096b8:	d906      	bls.n	80096c8 <USB_SetTurnaroundTime+0x98>
 80096ba:	68bb      	ldr	r3, [r7, #8]
 80096bc:	4a29      	ldr	r2, [pc, #164]	; (8009764 <USB_SetTurnaroundTime+0x134>)
 80096be:	4293      	cmp	r3, r2
 80096c0:	d802      	bhi.n	80096c8 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80096c2:	230a      	movs	r3, #10
 80096c4:	617b      	str	r3, [r7, #20]
 80096c6:	e02b      	b.n	8009720 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80096c8:	68bb      	ldr	r3, [r7, #8]
 80096ca:	4a26      	ldr	r2, [pc, #152]	; (8009764 <USB_SetTurnaroundTime+0x134>)
 80096cc:	4293      	cmp	r3, r2
 80096ce:	d906      	bls.n	80096de <USB_SetTurnaroundTime+0xae>
 80096d0:	68bb      	ldr	r3, [r7, #8]
 80096d2:	4a25      	ldr	r2, [pc, #148]	; (8009768 <USB_SetTurnaroundTime+0x138>)
 80096d4:	4293      	cmp	r3, r2
 80096d6:	d202      	bcs.n	80096de <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80096d8:	2309      	movs	r3, #9
 80096da:	617b      	str	r3, [r7, #20]
 80096dc:	e020      	b.n	8009720 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80096de:	68bb      	ldr	r3, [r7, #8]
 80096e0:	4a21      	ldr	r2, [pc, #132]	; (8009768 <USB_SetTurnaroundTime+0x138>)
 80096e2:	4293      	cmp	r3, r2
 80096e4:	d306      	bcc.n	80096f4 <USB_SetTurnaroundTime+0xc4>
 80096e6:	68bb      	ldr	r3, [r7, #8]
 80096e8:	4a20      	ldr	r2, [pc, #128]	; (800976c <USB_SetTurnaroundTime+0x13c>)
 80096ea:	4293      	cmp	r3, r2
 80096ec:	d802      	bhi.n	80096f4 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80096ee:	2308      	movs	r3, #8
 80096f0:	617b      	str	r3, [r7, #20]
 80096f2:	e015      	b.n	8009720 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80096f4:	68bb      	ldr	r3, [r7, #8]
 80096f6:	4a1d      	ldr	r2, [pc, #116]	; (800976c <USB_SetTurnaroundTime+0x13c>)
 80096f8:	4293      	cmp	r3, r2
 80096fa:	d906      	bls.n	800970a <USB_SetTurnaroundTime+0xda>
 80096fc:	68bb      	ldr	r3, [r7, #8]
 80096fe:	4a1c      	ldr	r2, [pc, #112]	; (8009770 <USB_SetTurnaroundTime+0x140>)
 8009700:	4293      	cmp	r3, r2
 8009702:	d202      	bcs.n	800970a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8009704:	2307      	movs	r3, #7
 8009706:	617b      	str	r3, [r7, #20]
 8009708:	e00a      	b.n	8009720 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800970a:	2306      	movs	r3, #6
 800970c:	617b      	str	r3, [r7, #20]
 800970e:	e007      	b.n	8009720 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8009710:	79fb      	ldrb	r3, [r7, #7]
 8009712:	2b00      	cmp	r3, #0
 8009714:	d102      	bne.n	800971c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8009716:	2309      	movs	r3, #9
 8009718:	617b      	str	r3, [r7, #20]
 800971a:	e001      	b.n	8009720 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800971c:	2309      	movs	r3, #9
 800971e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8009720:	68fb      	ldr	r3, [r7, #12]
 8009722:	68db      	ldr	r3, [r3, #12]
 8009724:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8009728:	68fb      	ldr	r3, [r7, #12]
 800972a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800972c:	68fb      	ldr	r3, [r7, #12]
 800972e:	68da      	ldr	r2, [r3, #12]
 8009730:	697b      	ldr	r3, [r7, #20]
 8009732:	029b      	lsls	r3, r3, #10
 8009734:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8009738:	431a      	orrs	r2, r3
 800973a:	68fb      	ldr	r3, [r7, #12]
 800973c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800973e:	2300      	movs	r3, #0
}
 8009740:	4618      	mov	r0, r3
 8009742:	371c      	adds	r7, #28
 8009744:	46bd      	mov	sp, r7
 8009746:	bc80      	pop	{r7}
 8009748:	4770      	bx	lr
 800974a:	bf00      	nop
 800974c:	00d8acbf 	.word	0x00d8acbf
 8009750:	00e4e1c0 	.word	0x00e4e1c0
 8009754:	00f42400 	.word	0x00f42400
 8009758:	01067380 	.word	0x01067380
 800975c:	011a499f 	.word	0x011a499f
 8009760:	01312cff 	.word	0x01312cff
 8009764:	014ca43f 	.word	0x014ca43f
 8009768:	016e3600 	.word	0x016e3600
 800976c:	01a6ab1f 	.word	0x01a6ab1f
 8009770:	01e84800 	.word	0x01e84800

08009774 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009774:	b480      	push	{r7}
 8009776:	b083      	sub	sp, #12
 8009778:	af00      	add	r7, sp, #0
 800977a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	689b      	ldr	r3, [r3, #8]
 8009780:	f043 0201 	orr.w	r2, r3, #1
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009788:	2300      	movs	r3, #0
}
 800978a:	4618      	mov	r0, r3
 800978c:	370c      	adds	r7, #12
 800978e:	46bd      	mov	sp, r7
 8009790:	bc80      	pop	{r7}
 8009792:	4770      	bx	lr

08009794 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009794:	b480      	push	{r7}
 8009796:	b083      	sub	sp, #12
 8009798:	af00      	add	r7, sp, #0
 800979a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	689b      	ldr	r3, [r3, #8]
 80097a0:	f023 0201 	bic.w	r2, r3, #1
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80097a8:	2300      	movs	r3, #0
}
 80097aa:	4618      	mov	r0, r3
 80097ac:	370c      	adds	r7, #12
 80097ae:	46bd      	mov	sp, r7
 80097b0:	bc80      	pop	{r7}
 80097b2:	4770      	bx	lr

080097b4 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80097b4:	b580      	push	{r7, lr}
 80097b6:	b084      	sub	sp, #16
 80097b8:	af00      	add	r7, sp, #0
 80097ba:	6078      	str	r0, [r7, #4]
 80097bc:	460b      	mov	r3, r1
 80097be:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80097c0:	2300      	movs	r3, #0
 80097c2:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	68db      	ldr	r3, [r3, #12]
 80097c8:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80097d0:	78fb      	ldrb	r3, [r7, #3]
 80097d2:	2b01      	cmp	r3, #1
 80097d4:	d115      	bne.n	8009802 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	68db      	ldr	r3, [r3, #12]
 80097da:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80097e2:	2001      	movs	r0, #1
 80097e4:	f7fb f8de 	bl	80049a4 <HAL_Delay>
      ms++;
 80097e8:	68fb      	ldr	r3, [r7, #12]
 80097ea:	3301      	adds	r3, #1
 80097ec:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80097ee:	6878      	ldr	r0, [r7, #4]
 80097f0:	f001 f961 	bl	800aab6 <USB_GetMode>
 80097f4:	4603      	mov	r3, r0
 80097f6:	2b01      	cmp	r3, #1
 80097f8:	d01e      	beq.n	8009838 <USB_SetCurrentMode+0x84>
 80097fa:	68fb      	ldr	r3, [r7, #12]
 80097fc:	2b31      	cmp	r3, #49	; 0x31
 80097fe:	d9f0      	bls.n	80097e2 <USB_SetCurrentMode+0x2e>
 8009800:	e01a      	b.n	8009838 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8009802:	78fb      	ldrb	r3, [r7, #3]
 8009804:	2b00      	cmp	r3, #0
 8009806:	d115      	bne.n	8009834 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	68db      	ldr	r3, [r3, #12]
 800980c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8009814:	2001      	movs	r0, #1
 8009816:	f7fb f8c5 	bl	80049a4 <HAL_Delay>
      ms++;
 800981a:	68fb      	ldr	r3, [r7, #12]
 800981c:	3301      	adds	r3, #1
 800981e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8009820:	6878      	ldr	r0, [r7, #4]
 8009822:	f001 f948 	bl	800aab6 <USB_GetMode>
 8009826:	4603      	mov	r3, r0
 8009828:	2b00      	cmp	r3, #0
 800982a:	d005      	beq.n	8009838 <USB_SetCurrentMode+0x84>
 800982c:	68fb      	ldr	r3, [r7, #12]
 800982e:	2b31      	cmp	r3, #49	; 0x31
 8009830:	d9f0      	bls.n	8009814 <USB_SetCurrentMode+0x60>
 8009832:	e001      	b.n	8009838 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8009834:	2301      	movs	r3, #1
 8009836:	e005      	b.n	8009844 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8009838:	68fb      	ldr	r3, [r7, #12]
 800983a:	2b32      	cmp	r3, #50	; 0x32
 800983c:	d101      	bne.n	8009842 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800983e:	2301      	movs	r3, #1
 8009840:	e000      	b.n	8009844 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8009842:	2300      	movs	r3, #0
}
 8009844:	4618      	mov	r0, r3
 8009846:	3710      	adds	r7, #16
 8009848:	46bd      	mov	sp, r7
 800984a:	bd80      	pop	{r7, pc}

0800984c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800984c:	b084      	sub	sp, #16
 800984e:	b580      	push	{r7, lr}
 8009850:	b086      	sub	sp, #24
 8009852:	af00      	add	r7, sp, #0
 8009854:	6078      	str	r0, [r7, #4]
 8009856:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800985a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800985e:	2300      	movs	r3, #0
 8009860:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8009866:	2300      	movs	r3, #0
 8009868:	613b      	str	r3, [r7, #16]
 800986a:	e009      	b.n	8009880 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800986c:	687a      	ldr	r2, [r7, #4]
 800986e:	693b      	ldr	r3, [r7, #16]
 8009870:	3340      	adds	r3, #64	; 0x40
 8009872:	009b      	lsls	r3, r3, #2
 8009874:	4413      	add	r3, r2
 8009876:	2200      	movs	r2, #0
 8009878:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800987a:	693b      	ldr	r3, [r7, #16]
 800987c:	3301      	adds	r3, #1
 800987e:	613b      	str	r3, [r7, #16]
 8009880:	693b      	ldr	r3, [r7, #16]
 8009882:	2b0e      	cmp	r3, #14
 8009884:	d9f2      	bls.n	800986c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8009886:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009888:	2b00      	cmp	r3, #0
 800988a:	d11c      	bne.n	80098c6 <USB_DevInit+0x7a>
  {
    /*
     * disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800988c:	68fb      	ldr	r3, [r7, #12]
 800988e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009892:	685b      	ldr	r3, [r3, #4]
 8009894:	68fa      	ldr	r2, [r7, #12]
 8009896:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800989a:	f043 0302 	orr.w	r3, r3, #2
 800989e:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80098a4:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80098b0:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80098bc:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	639a      	str	r2, [r3, #56]	; 0x38
 80098c4:	e00b      	b.n	80098de <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80098ca:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80098d6:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80098de:	68fb      	ldr	r3, [r7, #12]
 80098e0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80098e4:	461a      	mov	r2, r3
 80098e6:	2300      	movs	r3, #0
 80098e8:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80098ea:	68fb      	ldr	r3, [r7, #12]
 80098ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80098f0:	4619      	mov	r1, r3
 80098f2:	68fb      	ldr	r3, [r7, #12]
 80098f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80098f8:	461a      	mov	r2, r3
 80098fa:	680b      	ldr	r3, [r1, #0]
 80098fc:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80098fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009900:	2b01      	cmp	r3, #1
 8009902:	d10c      	bne.n	800991e <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8009904:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009906:	2b00      	cmp	r3, #0
 8009908:	d104      	bne.n	8009914 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800990a:	2100      	movs	r1, #0
 800990c:	6878      	ldr	r0, [r7, #4]
 800990e:	f000 f945 	bl	8009b9c <USB_SetDevSpeed>
 8009912:	e008      	b.n	8009926 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8009914:	2101      	movs	r1, #1
 8009916:	6878      	ldr	r0, [r7, #4]
 8009918:	f000 f940 	bl	8009b9c <USB_SetDevSpeed>
 800991c:	e003      	b.n	8009926 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800991e:	2103      	movs	r1, #3
 8009920:	6878      	ldr	r0, [r7, #4]
 8009922:	f000 f93b 	bl	8009b9c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8009926:	2110      	movs	r1, #16
 8009928:	6878      	ldr	r0, [r7, #4]
 800992a:	f000 f8f3 	bl	8009b14 <USB_FlushTxFifo>
 800992e:	4603      	mov	r3, r0
 8009930:	2b00      	cmp	r3, #0
 8009932:	d001      	beq.n	8009938 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8009934:	2301      	movs	r3, #1
 8009936:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8009938:	6878      	ldr	r0, [r7, #4]
 800993a:	f000 f90f 	bl	8009b5c <USB_FlushRxFifo>
 800993e:	4603      	mov	r3, r0
 8009940:	2b00      	cmp	r3, #0
 8009942:	d001      	beq.n	8009948 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8009944:	2301      	movs	r3, #1
 8009946:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8009948:	68fb      	ldr	r3, [r7, #12]
 800994a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800994e:	461a      	mov	r2, r3
 8009950:	2300      	movs	r3, #0
 8009952:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8009954:	68fb      	ldr	r3, [r7, #12]
 8009956:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800995a:	461a      	mov	r2, r3
 800995c:	2300      	movs	r3, #0
 800995e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8009960:	68fb      	ldr	r3, [r7, #12]
 8009962:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009966:	461a      	mov	r2, r3
 8009968:	2300      	movs	r3, #0
 800996a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800996c:	2300      	movs	r3, #0
 800996e:	613b      	str	r3, [r7, #16]
 8009970:	e043      	b.n	80099fa <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009972:	693b      	ldr	r3, [r7, #16]
 8009974:	015a      	lsls	r2, r3, #5
 8009976:	68fb      	ldr	r3, [r7, #12]
 8009978:	4413      	add	r3, r2
 800997a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800997e:	681b      	ldr	r3, [r3, #0]
 8009980:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009984:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009988:	d118      	bne.n	80099bc <USB_DevInit+0x170>
    {
      if (i == 0U)
 800998a:	693b      	ldr	r3, [r7, #16]
 800998c:	2b00      	cmp	r3, #0
 800998e:	d10a      	bne.n	80099a6 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8009990:	693b      	ldr	r3, [r7, #16]
 8009992:	015a      	lsls	r2, r3, #5
 8009994:	68fb      	ldr	r3, [r7, #12]
 8009996:	4413      	add	r3, r2
 8009998:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800999c:	461a      	mov	r2, r3
 800999e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80099a2:	6013      	str	r3, [r2, #0]
 80099a4:	e013      	b.n	80099ce <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80099a6:	693b      	ldr	r3, [r7, #16]
 80099a8:	015a      	lsls	r2, r3, #5
 80099aa:	68fb      	ldr	r3, [r7, #12]
 80099ac:	4413      	add	r3, r2
 80099ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80099b2:	461a      	mov	r2, r3
 80099b4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80099b8:	6013      	str	r3, [r2, #0]
 80099ba:	e008      	b.n	80099ce <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80099bc:	693b      	ldr	r3, [r7, #16]
 80099be:	015a      	lsls	r2, r3, #5
 80099c0:	68fb      	ldr	r3, [r7, #12]
 80099c2:	4413      	add	r3, r2
 80099c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80099c8:	461a      	mov	r2, r3
 80099ca:	2300      	movs	r3, #0
 80099cc:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80099ce:	693b      	ldr	r3, [r7, #16]
 80099d0:	015a      	lsls	r2, r3, #5
 80099d2:	68fb      	ldr	r3, [r7, #12]
 80099d4:	4413      	add	r3, r2
 80099d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80099da:	461a      	mov	r2, r3
 80099dc:	2300      	movs	r3, #0
 80099de:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80099e0:	693b      	ldr	r3, [r7, #16]
 80099e2:	015a      	lsls	r2, r3, #5
 80099e4:	68fb      	ldr	r3, [r7, #12]
 80099e6:	4413      	add	r3, r2
 80099e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80099ec:	461a      	mov	r2, r3
 80099ee:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80099f2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80099f4:	693b      	ldr	r3, [r7, #16]
 80099f6:	3301      	adds	r3, #1
 80099f8:	613b      	str	r3, [r7, #16]
 80099fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099fc:	693a      	ldr	r2, [r7, #16]
 80099fe:	429a      	cmp	r2, r3
 8009a00:	d3b7      	bcc.n	8009972 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009a02:	2300      	movs	r3, #0
 8009a04:	613b      	str	r3, [r7, #16]
 8009a06:	e043      	b.n	8009a90 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009a08:	693b      	ldr	r3, [r7, #16]
 8009a0a:	015a      	lsls	r2, r3, #5
 8009a0c:	68fb      	ldr	r3, [r7, #12]
 8009a0e:	4413      	add	r3, r2
 8009a10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009a14:	681b      	ldr	r3, [r3, #0]
 8009a16:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009a1a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009a1e:	d118      	bne.n	8009a52 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8009a20:	693b      	ldr	r3, [r7, #16]
 8009a22:	2b00      	cmp	r3, #0
 8009a24:	d10a      	bne.n	8009a3c <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8009a26:	693b      	ldr	r3, [r7, #16]
 8009a28:	015a      	lsls	r2, r3, #5
 8009a2a:	68fb      	ldr	r3, [r7, #12]
 8009a2c:	4413      	add	r3, r2
 8009a2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009a32:	461a      	mov	r2, r3
 8009a34:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009a38:	6013      	str	r3, [r2, #0]
 8009a3a:	e013      	b.n	8009a64 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8009a3c:	693b      	ldr	r3, [r7, #16]
 8009a3e:	015a      	lsls	r2, r3, #5
 8009a40:	68fb      	ldr	r3, [r7, #12]
 8009a42:	4413      	add	r3, r2
 8009a44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009a48:	461a      	mov	r2, r3
 8009a4a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8009a4e:	6013      	str	r3, [r2, #0]
 8009a50:	e008      	b.n	8009a64 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8009a52:	693b      	ldr	r3, [r7, #16]
 8009a54:	015a      	lsls	r2, r3, #5
 8009a56:	68fb      	ldr	r3, [r7, #12]
 8009a58:	4413      	add	r3, r2
 8009a5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009a5e:	461a      	mov	r2, r3
 8009a60:	2300      	movs	r3, #0
 8009a62:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8009a64:	693b      	ldr	r3, [r7, #16]
 8009a66:	015a      	lsls	r2, r3, #5
 8009a68:	68fb      	ldr	r3, [r7, #12]
 8009a6a:	4413      	add	r3, r2
 8009a6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009a70:	461a      	mov	r2, r3
 8009a72:	2300      	movs	r3, #0
 8009a74:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8009a76:	693b      	ldr	r3, [r7, #16]
 8009a78:	015a      	lsls	r2, r3, #5
 8009a7a:	68fb      	ldr	r3, [r7, #12]
 8009a7c:	4413      	add	r3, r2
 8009a7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009a82:	461a      	mov	r2, r3
 8009a84:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8009a88:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009a8a:	693b      	ldr	r3, [r7, #16]
 8009a8c:	3301      	adds	r3, #1
 8009a8e:	613b      	str	r3, [r7, #16]
 8009a90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a92:	693a      	ldr	r2, [r7, #16]
 8009a94:	429a      	cmp	r2, r3
 8009a96:	d3b7      	bcc.n	8009a08 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8009a98:	68fb      	ldr	r3, [r7, #12]
 8009a9a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009a9e:	691b      	ldr	r3, [r3, #16]
 8009aa0:	68fa      	ldr	r2, [r7, #12]
 8009aa2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009aa6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009aaa:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	2200      	movs	r2, #0
 8009ab0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8009ab8:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8009aba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009abc:	2b00      	cmp	r3, #0
 8009abe:	d105      	bne.n	8009acc <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	699b      	ldr	r3, [r3, #24]
 8009ac4:	f043 0210 	orr.w	r2, r3, #16
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	699a      	ldr	r2, [r3, #24]
 8009ad0:	4b0f      	ldr	r3, [pc, #60]	; (8009b10 <USB_DevInit+0x2c4>)
 8009ad2:	4313      	orrs	r3, r2
 8009ad4:	687a      	ldr	r2, [r7, #4]
 8009ad6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8009ad8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009ada:	2b00      	cmp	r3, #0
 8009adc:	d005      	beq.n	8009aea <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	699b      	ldr	r3, [r3, #24]
 8009ae2:	f043 0208 	orr.w	r2, r3, #8
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8009aea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009aec:	2b01      	cmp	r3, #1
 8009aee:	d107      	bne.n	8009b00 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	699b      	ldr	r3, [r3, #24]
 8009af4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009af8:	f043 0304 	orr.w	r3, r3, #4
 8009afc:	687a      	ldr	r2, [r7, #4]
 8009afe:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8009b00:	7dfb      	ldrb	r3, [r7, #23]
}
 8009b02:	4618      	mov	r0, r3
 8009b04:	3718      	adds	r7, #24
 8009b06:	46bd      	mov	sp, r7
 8009b08:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009b0c:	b004      	add	sp, #16
 8009b0e:	4770      	bx	lr
 8009b10:	803c3800 	.word	0x803c3800

08009b14 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8009b14:	b480      	push	{r7}
 8009b16:	b085      	sub	sp, #20
 8009b18:	af00      	add	r7, sp, #0
 8009b1a:	6078      	str	r0, [r7, #4]
 8009b1c:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8009b1e:	2300      	movs	r3, #0
 8009b20:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8009b22:	683b      	ldr	r3, [r7, #0]
 8009b24:	019b      	lsls	r3, r3, #6
 8009b26:	f043 0220 	orr.w	r2, r3, #32
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8009b2e:	68fb      	ldr	r3, [r7, #12]
 8009b30:	3301      	adds	r3, #1
 8009b32:	60fb      	str	r3, [r7, #12]
 8009b34:	68fb      	ldr	r3, [r7, #12]
 8009b36:	4a08      	ldr	r2, [pc, #32]	; (8009b58 <USB_FlushTxFifo+0x44>)
 8009b38:	4293      	cmp	r3, r2
 8009b3a:	d901      	bls.n	8009b40 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8009b3c:	2303      	movs	r3, #3
 8009b3e:	e006      	b.n	8009b4e <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	691b      	ldr	r3, [r3, #16]
 8009b44:	f003 0320 	and.w	r3, r3, #32
 8009b48:	2b20      	cmp	r3, #32
 8009b4a:	d0f0      	beq.n	8009b2e <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8009b4c:	2300      	movs	r3, #0
}
 8009b4e:	4618      	mov	r0, r3
 8009b50:	3714      	adds	r7, #20
 8009b52:	46bd      	mov	sp, r7
 8009b54:	bc80      	pop	{r7}
 8009b56:	4770      	bx	lr
 8009b58:	00030d40 	.word	0x00030d40

08009b5c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8009b5c:	b480      	push	{r7}
 8009b5e:	b085      	sub	sp, #20
 8009b60:	af00      	add	r7, sp, #0
 8009b62:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8009b64:	2300      	movs	r3, #0
 8009b66:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	2210      	movs	r2, #16
 8009b6c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8009b6e:	68fb      	ldr	r3, [r7, #12]
 8009b70:	3301      	adds	r3, #1
 8009b72:	60fb      	str	r3, [r7, #12]
 8009b74:	68fb      	ldr	r3, [r7, #12]
 8009b76:	4a08      	ldr	r2, [pc, #32]	; (8009b98 <USB_FlushRxFifo+0x3c>)
 8009b78:	4293      	cmp	r3, r2
 8009b7a:	d901      	bls.n	8009b80 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8009b7c:	2303      	movs	r3, #3
 8009b7e:	e006      	b.n	8009b8e <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	691b      	ldr	r3, [r3, #16]
 8009b84:	f003 0310 	and.w	r3, r3, #16
 8009b88:	2b10      	cmp	r3, #16
 8009b8a:	d0f0      	beq.n	8009b6e <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8009b8c:	2300      	movs	r3, #0
}
 8009b8e:	4618      	mov	r0, r3
 8009b90:	3714      	adds	r7, #20
 8009b92:	46bd      	mov	sp, r7
 8009b94:	bc80      	pop	{r7}
 8009b96:	4770      	bx	lr
 8009b98:	00030d40 	.word	0x00030d40

08009b9c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8009b9c:	b480      	push	{r7}
 8009b9e:	b085      	sub	sp, #20
 8009ba0:	af00      	add	r7, sp, #0
 8009ba2:	6078      	str	r0, [r7, #4]
 8009ba4:	460b      	mov	r3, r1
 8009ba6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8009bac:	68fb      	ldr	r3, [r7, #12]
 8009bae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009bb2:	681a      	ldr	r2, [r3, #0]
 8009bb4:	78fb      	ldrb	r3, [r7, #3]
 8009bb6:	68f9      	ldr	r1, [r7, #12]
 8009bb8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009bbc:	4313      	orrs	r3, r2
 8009bbe:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8009bc0:	2300      	movs	r3, #0
}
 8009bc2:	4618      	mov	r0, r3
 8009bc4:	3714      	adds	r7, #20
 8009bc6:	46bd      	mov	sp, r7
 8009bc8:	bc80      	pop	{r7}
 8009bca:	4770      	bx	lr

08009bcc <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8009bcc:	b480      	push	{r7}
 8009bce:	b087      	sub	sp, #28
 8009bd0:	af00      	add	r7, sp, #0
 8009bd2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8009bd8:	693b      	ldr	r3, [r7, #16]
 8009bda:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009bde:	689b      	ldr	r3, [r3, #8]
 8009be0:	f003 0306 	and.w	r3, r3, #6
 8009be4:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8009be6:	68fb      	ldr	r3, [r7, #12]
 8009be8:	2b00      	cmp	r3, #0
 8009bea:	d102      	bne.n	8009bf2 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8009bec:	2300      	movs	r3, #0
 8009bee:	75fb      	strb	r3, [r7, #23]
 8009bf0:	e00a      	b.n	8009c08 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8009bf2:	68fb      	ldr	r3, [r7, #12]
 8009bf4:	2b02      	cmp	r3, #2
 8009bf6:	d002      	beq.n	8009bfe <USB_GetDevSpeed+0x32>
 8009bf8:	68fb      	ldr	r3, [r7, #12]
 8009bfa:	2b06      	cmp	r3, #6
 8009bfc:	d102      	bne.n	8009c04 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8009bfe:	2302      	movs	r3, #2
 8009c00:	75fb      	strb	r3, [r7, #23]
 8009c02:	e001      	b.n	8009c08 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8009c04:	230f      	movs	r3, #15
 8009c06:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8009c08:	7dfb      	ldrb	r3, [r7, #23]
}
 8009c0a:	4618      	mov	r0, r3
 8009c0c:	371c      	adds	r7, #28
 8009c0e:	46bd      	mov	sp, r7
 8009c10:	bc80      	pop	{r7}
 8009c12:	4770      	bx	lr

08009c14 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009c14:	b480      	push	{r7}
 8009c16:	b085      	sub	sp, #20
 8009c18:	af00      	add	r7, sp, #0
 8009c1a:	6078      	str	r0, [r7, #4]
 8009c1c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009c22:	683b      	ldr	r3, [r7, #0]
 8009c24:	781b      	ldrb	r3, [r3, #0]
 8009c26:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009c28:	683b      	ldr	r3, [r7, #0]
 8009c2a:	785b      	ldrb	r3, [r3, #1]
 8009c2c:	2b01      	cmp	r3, #1
 8009c2e:	d13a      	bne.n	8009ca6 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8009c30:	68fb      	ldr	r3, [r7, #12]
 8009c32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009c36:	69da      	ldr	r2, [r3, #28]
 8009c38:	683b      	ldr	r3, [r7, #0]
 8009c3a:	781b      	ldrb	r3, [r3, #0]
 8009c3c:	f003 030f 	and.w	r3, r3, #15
 8009c40:	2101      	movs	r1, #1
 8009c42:	fa01 f303 	lsl.w	r3, r1, r3
 8009c46:	b29b      	uxth	r3, r3
 8009c48:	68f9      	ldr	r1, [r7, #12]
 8009c4a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009c4e:	4313      	orrs	r3, r2
 8009c50:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8009c52:	68bb      	ldr	r3, [r7, #8]
 8009c54:	015a      	lsls	r2, r3, #5
 8009c56:	68fb      	ldr	r3, [r7, #12]
 8009c58:	4413      	add	r3, r2
 8009c5a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009c5e:	681b      	ldr	r3, [r3, #0]
 8009c60:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009c64:	2b00      	cmp	r3, #0
 8009c66:	d155      	bne.n	8009d14 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009c68:	68bb      	ldr	r3, [r7, #8]
 8009c6a:	015a      	lsls	r2, r3, #5
 8009c6c:	68fb      	ldr	r3, [r7, #12]
 8009c6e:	4413      	add	r3, r2
 8009c70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009c74:	681a      	ldr	r2, [r3, #0]
 8009c76:	683b      	ldr	r3, [r7, #0]
 8009c78:	689b      	ldr	r3, [r3, #8]
 8009c7a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8009c7e:	683b      	ldr	r3, [r7, #0]
 8009c80:	78db      	ldrb	r3, [r3, #3]
 8009c82:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009c84:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8009c86:	68bb      	ldr	r3, [r7, #8]
 8009c88:	059b      	lsls	r3, r3, #22
 8009c8a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009c8c:	4313      	orrs	r3, r2
 8009c8e:	68ba      	ldr	r2, [r7, #8]
 8009c90:	0151      	lsls	r1, r2, #5
 8009c92:	68fa      	ldr	r2, [r7, #12]
 8009c94:	440a      	add	r2, r1
 8009c96:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009c9a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009c9e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009ca2:	6013      	str	r3, [r2, #0]
 8009ca4:	e036      	b.n	8009d14 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8009ca6:	68fb      	ldr	r3, [r7, #12]
 8009ca8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009cac:	69da      	ldr	r2, [r3, #28]
 8009cae:	683b      	ldr	r3, [r7, #0]
 8009cb0:	781b      	ldrb	r3, [r3, #0]
 8009cb2:	f003 030f 	and.w	r3, r3, #15
 8009cb6:	2101      	movs	r1, #1
 8009cb8:	fa01 f303 	lsl.w	r3, r1, r3
 8009cbc:	041b      	lsls	r3, r3, #16
 8009cbe:	68f9      	ldr	r1, [r7, #12]
 8009cc0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009cc4:	4313      	orrs	r3, r2
 8009cc6:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8009cc8:	68bb      	ldr	r3, [r7, #8]
 8009cca:	015a      	lsls	r2, r3, #5
 8009ccc:	68fb      	ldr	r3, [r7, #12]
 8009cce:	4413      	add	r3, r2
 8009cd0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009cd4:	681b      	ldr	r3, [r3, #0]
 8009cd6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009cda:	2b00      	cmp	r3, #0
 8009cdc:	d11a      	bne.n	8009d14 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8009cde:	68bb      	ldr	r3, [r7, #8]
 8009ce0:	015a      	lsls	r2, r3, #5
 8009ce2:	68fb      	ldr	r3, [r7, #12]
 8009ce4:	4413      	add	r3, r2
 8009ce6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009cea:	681a      	ldr	r2, [r3, #0]
 8009cec:	683b      	ldr	r3, [r7, #0]
 8009cee:	689b      	ldr	r3, [r3, #8]
 8009cf0:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8009cf4:	683b      	ldr	r3, [r7, #0]
 8009cf6:	78db      	ldrb	r3, [r3, #3]
 8009cf8:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8009cfa:	430b      	orrs	r3, r1
 8009cfc:	4313      	orrs	r3, r2
 8009cfe:	68ba      	ldr	r2, [r7, #8]
 8009d00:	0151      	lsls	r1, r2, #5
 8009d02:	68fa      	ldr	r2, [r7, #12]
 8009d04:	440a      	add	r2, r1
 8009d06:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009d0a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009d0e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009d12:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8009d14:	2300      	movs	r3, #0
}
 8009d16:	4618      	mov	r0, r3
 8009d18:	3714      	adds	r7, #20
 8009d1a:	46bd      	mov	sp, r7
 8009d1c:	bc80      	pop	{r7}
 8009d1e:	4770      	bx	lr

08009d20 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009d20:	b480      	push	{r7}
 8009d22:	b085      	sub	sp, #20
 8009d24:	af00      	add	r7, sp, #0
 8009d26:	6078      	str	r0, [r7, #4]
 8009d28:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009d2e:	683b      	ldr	r3, [r7, #0]
 8009d30:	781b      	ldrb	r3, [r3, #0]
 8009d32:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8009d34:	683b      	ldr	r3, [r7, #0]
 8009d36:	785b      	ldrb	r3, [r3, #1]
 8009d38:	2b01      	cmp	r3, #1
 8009d3a:	d161      	bne.n	8009e00 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009d3c:	68bb      	ldr	r3, [r7, #8]
 8009d3e:	015a      	lsls	r2, r3, #5
 8009d40:	68fb      	ldr	r3, [r7, #12]
 8009d42:	4413      	add	r3, r2
 8009d44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009d48:	681b      	ldr	r3, [r3, #0]
 8009d4a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009d4e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009d52:	d11f      	bne.n	8009d94 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8009d54:	68bb      	ldr	r3, [r7, #8]
 8009d56:	015a      	lsls	r2, r3, #5
 8009d58:	68fb      	ldr	r3, [r7, #12]
 8009d5a:	4413      	add	r3, r2
 8009d5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009d60:	681b      	ldr	r3, [r3, #0]
 8009d62:	68ba      	ldr	r2, [r7, #8]
 8009d64:	0151      	lsls	r1, r2, #5
 8009d66:	68fa      	ldr	r2, [r7, #12]
 8009d68:	440a      	add	r2, r1
 8009d6a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009d6e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8009d72:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8009d74:	68bb      	ldr	r3, [r7, #8]
 8009d76:	015a      	lsls	r2, r3, #5
 8009d78:	68fb      	ldr	r3, [r7, #12]
 8009d7a:	4413      	add	r3, r2
 8009d7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009d80:	681b      	ldr	r3, [r3, #0]
 8009d82:	68ba      	ldr	r2, [r7, #8]
 8009d84:	0151      	lsls	r1, r2, #5
 8009d86:	68fa      	ldr	r2, [r7, #12]
 8009d88:	440a      	add	r2, r1
 8009d8a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009d8e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009d92:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8009d94:	68fb      	ldr	r3, [r7, #12]
 8009d96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009d9a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009d9c:	683b      	ldr	r3, [r7, #0]
 8009d9e:	781b      	ldrb	r3, [r3, #0]
 8009da0:	f003 030f 	and.w	r3, r3, #15
 8009da4:	2101      	movs	r1, #1
 8009da6:	fa01 f303 	lsl.w	r3, r1, r3
 8009daa:	b29b      	uxth	r3, r3
 8009dac:	43db      	mvns	r3, r3
 8009dae:	68f9      	ldr	r1, [r7, #12]
 8009db0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009db4:	4013      	ands	r3, r2
 8009db6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8009db8:	68fb      	ldr	r3, [r7, #12]
 8009dba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009dbe:	69da      	ldr	r2, [r3, #28]
 8009dc0:	683b      	ldr	r3, [r7, #0]
 8009dc2:	781b      	ldrb	r3, [r3, #0]
 8009dc4:	f003 030f 	and.w	r3, r3, #15
 8009dc8:	2101      	movs	r1, #1
 8009dca:	fa01 f303 	lsl.w	r3, r1, r3
 8009dce:	b29b      	uxth	r3, r3
 8009dd0:	43db      	mvns	r3, r3
 8009dd2:	68f9      	ldr	r1, [r7, #12]
 8009dd4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009dd8:	4013      	ands	r3, r2
 8009dda:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8009ddc:	68bb      	ldr	r3, [r7, #8]
 8009dde:	015a      	lsls	r2, r3, #5
 8009de0:	68fb      	ldr	r3, [r7, #12]
 8009de2:	4413      	add	r3, r2
 8009de4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009de8:	681a      	ldr	r2, [r3, #0]
 8009dea:	68bb      	ldr	r3, [r7, #8]
 8009dec:	0159      	lsls	r1, r3, #5
 8009dee:	68fb      	ldr	r3, [r7, #12]
 8009df0:	440b      	add	r3, r1
 8009df2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009df6:	4619      	mov	r1, r3
 8009df8:	4b35      	ldr	r3, [pc, #212]	; (8009ed0 <USB_DeactivateEndpoint+0x1b0>)
 8009dfa:	4013      	ands	r3, r2
 8009dfc:	600b      	str	r3, [r1, #0]
 8009dfe:	e060      	b.n	8009ec2 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009e00:	68bb      	ldr	r3, [r7, #8]
 8009e02:	015a      	lsls	r2, r3, #5
 8009e04:	68fb      	ldr	r3, [r7, #12]
 8009e06:	4413      	add	r3, r2
 8009e08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009e0c:	681b      	ldr	r3, [r3, #0]
 8009e0e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009e12:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009e16:	d11f      	bne.n	8009e58 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8009e18:	68bb      	ldr	r3, [r7, #8]
 8009e1a:	015a      	lsls	r2, r3, #5
 8009e1c:	68fb      	ldr	r3, [r7, #12]
 8009e1e:	4413      	add	r3, r2
 8009e20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009e24:	681b      	ldr	r3, [r3, #0]
 8009e26:	68ba      	ldr	r2, [r7, #8]
 8009e28:	0151      	lsls	r1, r2, #5
 8009e2a:	68fa      	ldr	r2, [r7, #12]
 8009e2c:	440a      	add	r2, r1
 8009e2e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009e32:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8009e36:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8009e38:	68bb      	ldr	r3, [r7, #8]
 8009e3a:	015a      	lsls	r2, r3, #5
 8009e3c:	68fb      	ldr	r3, [r7, #12]
 8009e3e:	4413      	add	r3, r2
 8009e40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009e44:	681b      	ldr	r3, [r3, #0]
 8009e46:	68ba      	ldr	r2, [r7, #8]
 8009e48:	0151      	lsls	r1, r2, #5
 8009e4a:	68fa      	ldr	r2, [r7, #12]
 8009e4c:	440a      	add	r2, r1
 8009e4e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009e52:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009e56:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8009e58:	68fb      	ldr	r3, [r7, #12]
 8009e5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009e5e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009e60:	683b      	ldr	r3, [r7, #0]
 8009e62:	781b      	ldrb	r3, [r3, #0]
 8009e64:	f003 030f 	and.w	r3, r3, #15
 8009e68:	2101      	movs	r1, #1
 8009e6a:	fa01 f303 	lsl.w	r3, r1, r3
 8009e6e:	041b      	lsls	r3, r3, #16
 8009e70:	43db      	mvns	r3, r3
 8009e72:	68f9      	ldr	r1, [r7, #12]
 8009e74:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009e78:	4013      	ands	r3, r2
 8009e7a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8009e7c:	68fb      	ldr	r3, [r7, #12]
 8009e7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009e82:	69da      	ldr	r2, [r3, #28]
 8009e84:	683b      	ldr	r3, [r7, #0]
 8009e86:	781b      	ldrb	r3, [r3, #0]
 8009e88:	f003 030f 	and.w	r3, r3, #15
 8009e8c:	2101      	movs	r1, #1
 8009e8e:	fa01 f303 	lsl.w	r3, r1, r3
 8009e92:	041b      	lsls	r3, r3, #16
 8009e94:	43db      	mvns	r3, r3
 8009e96:	68f9      	ldr	r1, [r7, #12]
 8009e98:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009e9c:	4013      	ands	r3, r2
 8009e9e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8009ea0:	68bb      	ldr	r3, [r7, #8]
 8009ea2:	015a      	lsls	r2, r3, #5
 8009ea4:	68fb      	ldr	r3, [r7, #12]
 8009ea6:	4413      	add	r3, r2
 8009ea8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009eac:	681a      	ldr	r2, [r3, #0]
 8009eae:	68bb      	ldr	r3, [r7, #8]
 8009eb0:	0159      	lsls	r1, r3, #5
 8009eb2:	68fb      	ldr	r3, [r7, #12]
 8009eb4:	440b      	add	r3, r1
 8009eb6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009eba:	4619      	mov	r1, r3
 8009ebc:	4b05      	ldr	r3, [pc, #20]	; (8009ed4 <USB_DeactivateEndpoint+0x1b4>)
 8009ebe:	4013      	ands	r3, r2
 8009ec0:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8009ec2:	2300      	movs	r3, #0
}
 8009ec4:	4618      	mov	r0, r3
 8009ec6:	3714      	adds	r7, #20
 8009ec8:	46bd      	mov	sp, r7
 8009eca:	bc80      	pop	{r7}
 8009ecc:	4770      	bx	lr
 8009ece:	bf00      	nop
 8009ed0:	ec337800 	.word	0xec337800
 8009ed4:	eff37800 	.word	0xeff37800

08009ed8 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8009ed8:	b580      	push	{r7, lr}
 8009eda:	b08a      	sub	sp, #40	; 0x28
 8009edc:	af02      	add	r7, sp, #8
 8009ede:	60f8      	str	r0, [r7, #12]
 8009ee0:	60b9      	str	r1, [r7, #8]
 8009ee2:	4613      	mov	r3, r2
 8009ee4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009ee6:	68fb      	ldr	r3, [r7, #12]
 8009ee8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8009eea:	68bb      	ldr	r3, [r7, #8]
 8009eec:	781b      	ldrb	r3, [r3, #0]
 8009eee:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8009ef0:	68bb      	ldr	r3, [r7, #8]
 8009ef2:	785b      	ldrb	r3, [r3, #1]
 8009ef4:	2b01      	cmp	r3, #1
 8009ef6:	f040 815c 	bne.w	800a1b2 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8009efa:	68bb      	ldr	r3, [r7, #8]
 8009efc:	695b      	ldr	r3, [r3, #20]
 8009efe:	2b00      	cmp	r3, #0
 8009f00:	d132      	bne.n	8009f68 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009f02:	69bb      	ldr	r3, [r7, #24]
 8009f04:	015a      	lsls	r2, r3, #5
 8009f06:	69fb      	ldr	r3, [r7, #28]
 8009f08:	4413      	add	r3, r2
 8009f0a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009f0e:	691b      	ldr	r3, [r3, #16]
 8009f10:	69ba      	ldr	r2, [r7, #24]
 8009f12:	0151      	lsls	r1, r2, #5
 8009f14:	69fa      	ldr	r2, [r7, #28]
 8009f16:	440a      	add	r2, r1
 8009f18:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009f1c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009f20:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009f24:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8009f26:	69bb      	ldr	r3, [r7, #24]
 8009f28:	015a      	lsls	r2, r3, #5
 8009f2a:	69fb      	ldr	r3, [r7, #28]
 8009f2c:	4413      	add	r3, r2
 8009f2e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009f32:	691b      	ldr	r3, [r3, #16]
 8009f34:	69ba      	ldr	r2, [r7, #24]
 8009f36:	0151      	lsls	r1, r2, #5
 8009f38:	69fa      	ldr	r2, [r7, #28]
 8009f3a:	440a      	add	r2, r1
 8009f3c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009f40:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009f44:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009f46:	69bb      	ldr	r3, [r7, #24]
 8009f48:	015a      	lsls	r2, r3, #5
 8009f4a:	69fb      	ldr	r3, [r7, #28]
 8009f4c:	4413      	add	r3, r2
 8009f4e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009f52:	691b      	ldr	r3, [r3, #16]
 8009f54:	69ba      	ldr	r2, [r7, #24]
 8009f56:	0151      	lsls	r1, r2, #5
 8009f58:	69fa      	ldr	r2, [r7, #28]
 8009f5a:	440a      	add	r2, r1
 8009f5c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009f60:	0cdb      	lsrs	r3, r3, #19
 8009f62:	04db      	lsls	r3, r3, #19
 8009f64:	6113      	str	r3, [r2, #16]
 8009f66:	e074      	b.n	800a052 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009f68:	69bb      	ldr	r3, [r7, #24]
 8009f6a:	015a      	lsls	r2, r3, #5
 8009f6c:	69fb      	ldr	r3, [r7, #28]
 8009f6e:	4413      	add	r3, r2
 8009f70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009f74:	691b      	ldr	r3, [r3, #16]
 8009f76:	69ba      	ldr	r2, [r7, #24]
 8009f78:	0151      	lsls	r1, r2, #5
 8009f7a:	69fa      	ldr	r2, [r7, #28]
 8009f7c:	440a      	add	r2, r1
 8009f7e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009f82:	0cdb      	lsrs	r3, r3, #19
 8009f84:	04db      	lsls	r3, r3, #19
 8009f86:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009f88:	69bb      	ldr	r3, [r7, #24]
 8009f8a:	015a      	lsls	r2, r3, #5
 8009f8c:	69fb      	ldr	r3, [r7, #28]
 8009f8e:	4413      	add	r3, r2
 8009f90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009f94:	691b      	ldr	r3, [r3, #16]
 8009f96:	69ba      	ldr	r2, [r7, #24]
 8009f98:	0151      	lsls	r1, r2, #5
 8009f9a:	69fa      	ldr	r2, [r7, #28]
 8009f9c:	440a      	add	r2, r1
 8009f9e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009fa2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009fa6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009faa:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8009fac:	69bb      	ldr	r3, [r7, #24]
 8009fae:	015a      	lsls	r2, r3, #5
 8009fb0:	69fb      	ldr	r3, [r7, #28]
 8009fb2:	4413      	add	r3, r2
 8009fb4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009fb8:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8009fba:	68bb      	ldr	r3, [r7, #8]
 8009fbc:	6959      	ldr	r1, [r3, #20]
 8009fbe:	68bb      	ldr	r3, [r7, #8]
 8009fc0:	689b      	ldr	r3, [r3, #8]
 8009fc2:	440b      	add	r3, r1
 8009fc4:	1e59      	subs	r1, r3, #1
 8009fc6:	68bb      	ldr	r3, [r7, #8]
 8009fc8:	689b      	ldr	r3, [r3, #8]
 8009fca:	fbb1 f3f3 	udiv	r3, r1, r3
 8009fce:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8009fd0:	4b9d      	ldr	r3, [pc, #628]	; (800a248 <USB_EPStartXfer+0x370>)
 8009fd2:	400b      	ands	r3, r1
 8009fd4:	69b9      	ldr	r1, [r7, #24]
 8009fd6:	0148      	lsls	r0, r1, #5
 8009fd8:	69f9      	ldr	r1, [r7, #28]
 8009fda:	4401      	add	r1, r0
 8009fdc:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8009fe0:	4313      	orrs	r3, r2
 8009fe2:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8009fe4:	69bb      	ldr	r3, [r7, #24]
 8009fe6:	015a      	lsls	r2, r3, #5
 8009fe8:	69fb      	ldr	r3, [r7, #28]
 8009fea:	4413      	add	r3, r2
 8009fec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009ff0:	691a      	ldr	r2, [r3, #16]
 8009ff2:	68bb      	ldr	r3, [r7, #8]
 8009ff4:	695b      	ldr	r3, [r3, #20]
 8009ff6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009ffa:	69b9      	ldr	r1, [r7, #24]
 8009ffc:	0148      	lsls	r0, r1, #5
 8009ffe:	69f9      	ldr	r1, [r7, #28]
 800a000:	4401      	add	r1, r0
 800a002:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800a006:	4313      	orrs	r3, r2
 800a008:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800a00a:	68bb      	ldr	r3, [r7, #8]
 800a00c:	78db      	ldrb	r3, [r3, #3]
 800a00e:	2b01      	cmp	r3, #1
 800a010:	d11f      	bne.n	800a052 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800a012:	69bb      	ldr	r3, [r7, #24]
 800a014:	015a      	lsls	r2, r3, #5
 800a016:	69fb      	ldr	r3, [r7, #28]
 800a018:	4413      	add	r3, r2
 800a01a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a01e:	691b      	ldr	r3, [r3, #16]
 800a020:	69ba      	ldr	r2, [r7, #24]
 800a022:	0151      	lsls	r1, r2, #5
 800a024:	69fa      	ldr	r2, [r7, #28]
 800a026:	440a      	add	r2, r1
 800a028:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a02c:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800a030:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800a032:	69bb      	ldr	r3, [r7, #24]
 800a034:	015a      	lsls	r2, r3, #5
 800a036:	69fb      	ldr	r3, [r7, #28]
 800a038:	4413      	add	r3, r2
 800a03a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a03e:	691b      	ldr	r3, [r3, #16]
 800a040:	69ba      	ldr	r2, [r7, #24]
 800a042:	0151      	lsls	r1, r2, #5
 800a044:	69fa      	ldr	r2, [r7, #28]
 800a046:	440a      	add	r2, r1
 800a048:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a04c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800a050:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800a052:	79fb      	ldrb	r3, [r7, #7]
 800a054:	2b01      	cmp	r3, #1
 800a056:	d14b      	bne.n	800a0f0 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800a058:	68bb      	ldr	r3, [r7, #8]
 800a05a:	691b      	ldr	r3, [r3, #16]
 800a05c:	2b00      	cmp	r3, #0
 800a05e:	d009      	beq.n	800a074 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800a060:	69bb      	ldr	r3, [r7, #24]
 800a062:	015a      	lsls	r2, r3, #5
 800a064:	69fb      	ldr	r3, [r7, #28]
 800a066:	4413      	add	r3, r2
 800a068:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a06c:	461a      	mov	r2, r3
 800a06e:	68bb      	ldr	r3, [r7, #8]
 800a070:	691b      	ldr	r3, [r3, #16]
 800a072:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800a074:	68bb      	ldr	r3, [r7, #8]
 800a076:	78db      	ldrb	r3, [r3, #3]
 800a078:	2b01      	cmp	r3, #1
 800a07a:	d128      	bne.n	800a0ce <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800a07c:	69fb      	ldr	r3, [r7, #28]
 800a07e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a082:	689b      	ldr	r3, [r3, #8]
 800a084:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a088:	2b00      	cmp	r3, #0
 800a08a:	d110      	bne.n	800a0ae <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800a08c:	69bb      	ldr	r3, [r7, #24]
 800a08e:	015a      	lsls	r2, r3, #5
 800a090:	69fb      	ldr	r3, [r7, #28]
 800a092:	4413      	add	r3, r2
 800a094:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a098:	681b      	ldr	r3, [r3, #0]
 800a09a:	69ba      	ldr	r2, [r7, #24]
 800a09c:	0151      	lsls	r1, r2, #5
 800a09e:	69fa      	ldr	r2, [r7, #28]
 800a0a0:	440a      	add	r2, r1
 800a0a2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a0a6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800a0aa:	6013      	str	r3, [r2, #0]
 800a0ac:	e00f      	b.n	800a0ce <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800a0ae:	69bb      	ldr	r3, [r7, #24]
 800a0b0:	015a      	lsls	r2, r3, #5
 800a0b2:	69fb      	ldr	r3, [r7, #28]
 800a0b4:	4413      	add	r3, r2
 800a0b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a0ba:	681b      	ldr	r3, [r3, #0]
 800a0bc:	69ba      	ldr	r2, [r7, #24]
 800a0be:	0151      	lsls	r1, r2, #5
 800a0c0:	69fa      	ldr	r2, [r7, #28]
 800a0c2:	440a      	add	r2, r1
 800a0c4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a0c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a0cc:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800a0ce:	69bb      	ldr	r3, [r7, #24]
 800a0d0:	015a      	lsls	r2, r3, #5
 800a0d2:	69fb      	ldr	r3, [r7, #28]
 800a0d4:	4413      	add	r3, r2
 800a0d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a0da:	681b      	ldr	r3, [r3, #0]
 800a0dc:	69ba      	ldr	r2, [r7, #24]
 800a0de:	0151      	lsls	r1, r2, #5
 800a0e0:	69fa      	ldr	r2, [r7, #28]
 800a0e2:	440a      	add	r2, r1
 800a0e4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a0e8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a0ec:	6013      	str	r3, [r2, #0]
 800a0ee:	e12f      	b.n	800a350 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800a0f0:	69bb      	ldr	r3, [r7, #24]
 800a0f2:	015a      	lsls	r2, r3, #5
 800a0f4:	69fb      	ldr	r3, [r7, #28]
 800a0f6:	4413      	add	r3, r2
 800a0f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a0fc:	681b      	ldr	r3, [r3, #0]
 800a0fe:	69ba      	ldr	r2, [r7, #24]
 800a100:	0151      	lsls	r1, r2, #5
 800a102:	69fa      	ldr	r2, [r7, #28]
 800a104:	440a      	add	r2, r1
 800a106:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a10a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a10e:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800a110:	68bb      	ldr	r3, [r7, #8]
 800a112:	78db      	ldrb	r3, [r3, #3]
 800a114:	2b01      	cmp	r3, #1
 800a116:	d015      	beq.n	800a144 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800a118:	68bb      	ldr	r3, [r7, #8]
 800a11a:	695b      	ldr	r3, [r3, #20]
 800a11c:	2b00      	cmp	r3, #0
 800a11e:	f000 8117 	beq.w	800a350 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800a122:	69fb      	ldr	r3, [r7, #28]
 800a124:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a128:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a12a:	68bb      	ldr	r3, [r7, #8]
 800a12c:	781b      	ldrb	r3, [r3, #0]
 800a12e:	f003 030f 	and.w	r3, r3, #15
 800a132:	2101      	movs	r1, #1
 800a134:	fa01 f303 	lsl.w	r3, r1, r3
 800a138:	69f9      	ldr	r1, [r7, #28]
 800a13a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a13e:	4313      	orrs	r3, r2
 800a140:	634b      	str	r3, [r1, #52]	; 0x34
 800a142:	e105      	b.n	800a350 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800a144:	69fb      	ldr	r3, [r7, #28]
 800a146:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a14a:	689b      	ldr	r3, [r3, #8]
 800a14c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a150:	2b00      	cmp	r3, #0
 800a152:	d110      	bne.n	800a176 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800a154:	69bb      	ldr	r3, [r7, #24]
 800a156:	015a      	lsls	r2, r3, #5
 800a158:	69fb      	ldr	r3, [r7, #28]
 800a15a:	4413      	add	r3, r2
 800a15c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a160:	681b      	ldr	r3, [r3, #0]
 800a162:	69ba      	ldr	r2, [r7, #24]
 800a164:	0151      	lsls	r1, r2, #5
 800a166:	69fa      	ldr	r2, [r7, #28]
 800a168:	440a      	add	r2, r1
 800a16a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a16e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800a172:	6013      	str	r3, [r2, #0]
 800a174:	e00f      	b.n	800a196 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800a176:	69bb      	ldr	r3, [r7, #24]
 800a178:	015a      	lsls	r2, r3, #5
 800a17a:	69fb      	ldr	r3, [r7, #28]
 800a17c:	4413      	add	r3, r2
 800a17e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a182:	681b      	ldr	r3, [r3, #0]
 800a184:	69ba      	ldr	r2, [r7, #24]
 800a186:	0151      	lsls	r1, r2, #5
 800a188:	69fa      	ldr	r2, [r7, #28]
 800a18a:	440a      	add	r2, r1
 800a18c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a190:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a194:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800a196:	68bb      	ldr	r3, [r7, #8]
 800a198:	68d9      	ldr	r1, [r3, #12]
 800a19a:	68bb      	ldr	r3, [r7, #8]
 800a19c:	781a      	ldrb	r2, [r3, #0]
 800a19e:	68bb      	ldr	r3, [r7, #8]
 800a1a0:	695b      	ldr	r3, [r3, #20]
 800a1a2:	b298      	uxth	r0, r3
 800a1a4:	79fb      	ldrb	r3, [r7, #7]
 800a1a6:	9300      	str	r3, [sp, #0]
 800a1a8:	4603      	mov	r3, r0
 800a1aa:	68f8      	ldr	r0, [r7, #12]
 800a1ac:	f000 fa2a 	bl	800a604 <USB_WritePacket>
 800a1b0:	e0ce      	b.n	800a350 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800a1b2:	69bb      	ldr	r3, [r7, #24]
 800a1b4:	015a      	lsls	r2, r3, #5
 800a1b6:	69fb      	ldr	r3, [r7, #28]
 800a1b8:	4413      	add	r3, r2
 800a1ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a1be:	691b      	ldr	r3, [r3, #16]
 800a1c0:	69ba      	ldr	r2, [r7, #24]
 800a1c2:	0151      	lsls	r1, r2, #5
 800a1c4:	69fa      	ldr	r2, [r7, #28]
 800a1c6:	440a      	add	r2, r1
 800a1c8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a1cc:	0cdb      	lsrs	r3, r3, #19
 800a1ce:	04db      	lsls	r3, r3, #19
 800a1d0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800a1d2:	69bb      	ldr	r3, [r7, #24]
 800a1d4:	015a      	lsls	r2, r3, #5
 800a1d6:	69fb      	ldr	r3, [r7, #28]
 800a1d8:	4413      	add	r3, r2
 800a1da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a1de:	691b      	ldr	r3, [r3, #16]
 800a1e0:	69ba      	ldr	r2, [r7, #24]
 800a1e2:	0151      	lsls	r1, r2, #5
 800a1e4:	69fa      	ldr	r2, [r7, #28]
 800a1e6:	440a      	add	r2, r1
 800a1e8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a1ec:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800a1f0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800a1f4:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800a1f6:	68bb      	ldr	r3, [r7, #8]
 800a1f8:	695b      	ldr	r3, [r3, #20]
 800a1fa:	2b00      	cmp	r3, #0
 800a1fc:	d126      	bne.n	800a24c <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800a1fe:	69bb      	ldr	r3, [r7, #24]
 800a200:	015a      	lsls	r2, r3, #5
 800a202:	69fb      	ldr	r3, [r7, #28]
 800a204:	4413      	add	r3, r2
 800a206:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a20a:	691a      	ldr	r2, [r3, #16]
 800a20c:	68bb      	ldr	r3, [r7, #8]
 800a20e:	689b      	ldr	r3, [r3, #8]
 800a210:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a214:	69b9      	ldr	r1, [r7, #24]
 800a216:	0148      	lsls	r0, r1, #5
 800a218:	69f9      	ldr	r1, [r7, #28]
 800a21a:	4401      	add	r1, r0
 800a21c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800a220:	4313      	orrs	r3, r2
 800a222:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a224:	69bb      	ldr	r3, [r7, #24]
 800a226:	015a      	lsls	r2, r3, #5
 800a228:	69fb      	ldr	r3, [r7, #28]
 800a22a:	4413      	add	r3, r2
 800a22c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a230:	691b      	ldr	r3, [r3, #16]
 800a232:	69ba      	ldr	r2, [r7, #24]
 800a234:	0151      	lsls	r1, r2, #5
 800a236:	69fa      	ldr	r2, [r7, #28]
 800a238:	440a      	add	r2, r1
 800a23a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a23e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a242:	6113      	str	r3, [r2, #16]
 800a244:	e036      	b.n	800a2b4 <USB_EPStartXfer+0x3dc>
 800a246:	bf00      	nop
 800a248:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800a24c:	68bb      	ldr	r3, [r7, #8]
 800a24e:	695a      	ldr	r2, [r3, #20]
 800a250:	68bb      	ldr	r3, [r7, #8]
 800a252:	689b      	ldr	r3, [r3, #8]
 800a254:	4413      	add	r3, r2
 800a256:	1e5a      	subs	r2, r3, #1
 800a258:	68bb      	ldr	r3, [r7, #8]
 800a25a:	689b      	ldr	r3, [r3, #8]
 800a25c:	fbb2 f3f3 	udiv	r3, r2, r3
 800a260:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800a262:	69bb      	ldr	r3, [r7, #24]
 800a264:	015a      	lsls	r2, r3, #5
 800a266:	69fb      	ldr	r3, [r7, #28]
 800a268:	4413      	add	r3, r2
 800a26a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a26e:	691a      	ldr	r2, [r3, #16]
 800a270:	8afb      	ldrh	r3, [r7, #22]
 800a272:	04d9      	lsls	r1, r3, #19
 800a274:	4b39      	ldr	r3, [pc, #228]	; (800a35c <USB_EPStartXfer+0x484>)
 800a276:	400b      	ands	r3, r1
 800a278:	69b9      	ldr	r1, [r7, #24]
 800a27a:	0148      	lsls	r0, r1, #5
 800a27c:	69f9      	ldr	r1, [r7, #28]
 800a27e:	4401      	add	r1, r0
 800a280:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800a284:	4313      	orrs	r3, r2
 800a286:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800a288:	69bb      	ldr	r3, [r7, #24]
 800a28a:	015a      	lsls	r2, r3, #5
 800a28c:	69fb      	ldr	r3, [r7, #28]
 800a28e:	4413      	add	r3, r2
 800a290:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a294:	691a      	ldr	r2, [r3, #16]
 800a296:	68bb      	ldr	r3, [r7, #8]
 800a298:	689b      	ldr	r3, [r3, #8]
 800a29a:	8af9      	ldrh	r1, [r7, #22]
 800a29c:	fb01 f303 	mul.w	r3, r1, r3
 800a2a0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a2a4:	69b9      	ldr	r1, [r7, #24]
 800a2a6:	0148      	lsls	r0, r1, #5
 800a2a8:	69f9      	ldr	r1, [r7, #28]
 800a2aa:	4401      	add	r1, r0
 800a2ac:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800a2b0:	4313      	orrs	r3, r2
 800a2b2:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800a2b4:	79fb      	ldrb	r3, [r7, #7]
 800a2b6:	2b01      	cmp	r3, #1
 800a2b8:	d10d      	bne.n	800a2d6 <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800a2ba:	68bb      	ldr	r3, [r7, #8]
 800a2bc:	68db      	ldr	r3, [r3, #12]
 800a2be:	2b00      	cmp	r3, #0
 800a2c0:	d009      	beq.n	800a2d6 <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800a2c2:	68bb      	ldr	r3, [r7, #8]
 800a2c4:	68d9      	ldr	r1, [r3, #12]
 800a2c6:	69bb      	ldr	r3, [r7, #24]
 800a2c8:	015a      	lsls	r2, r3, #5
 800a2ca:	69fb      	ldr	r3, [r7, #28]
 800a2cc:	4413      	add	r3, r2
 800a2ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a2d2:	460a      	mov	r2, r1
 800a2d4:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800a2d6:	68bb      	ldr	r3, [r7, #8]
 800a2d8:	78db      	ldrb	r3, [r3, #3]
 800a2da:	2b01      	cmp	r3, #1
 800a2dc:	d128      	bne.n	800a330 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800a2de:	69fb      	ldr	r3, [r7, #28]
 800a2e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a2e4:	689b      	ldr	r3, [r3, #8]
 800a2e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a2ea:	2b00      	cmp	r3, #0
 800a2ec:	d110      	bne.n	800a310 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800a2ee:	69bb      	ldr	r3, [r7, #24]
 800a2f0:	015a      	lsls	r2, r3, #5
 800a2f2:	69fb      	ldr	r3, [r7, #28]
 800a2f4:	4413      	add	r3, r2
 800a2f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a2fa:	681b      	ldr	r3, [r3, #0]
 800a2fc:	69ba      	ldr	r2, [r7, #24]
 800a2fe:	0151      	lsls	r1, r2, #5
 800a300:	69fa      	ldr	r2, [r7, #28]
 800a302:	440a      	add	r2, r1
 800a304:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a308:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800a30c:	6013      	str	r3, [r2, #0]
 800a30e:	e00f      	b.n	800a330 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800a310:	69bb      	ldr	r3, [r7, #24]
 800a312:	015a      	lsls	r2, r3, #5
 800a314:	69fb      	ldr	r3, [r7, #28]
 800a316:	4413      	add	r3, r2
 800a318:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a31c:	681b      	ldr	r3, [r3, #0]
 800a31e:	69ba      	ldr	r2, [r7, #24]
 800a320:	0151      	lsls	r1, r2, #5
 800a322:	69fa      	ldr	r2, [r7, #28]
 800a324:	440a      	add	r2, r1
 800a326:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a32a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a32e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800a330:	69bb      	ldr	r3, [r7, #24]
 800a332:	015a      	lsls	r2, r3, #5
 800a334:	69fb      	ldr	r3, [r7, #28]
 800a336:	4413      	add	r3, r2
 800a338:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a33c:	681b      	ldr	r3, [r3, #0]
 800a33e:	69ba      	ldr	r2, [r7, #24]
 800a340:	0151      	lsls	r1, r2, #5
 800a342:	69fa      	ldr	r2, [r7, #28]
 800a344:	440a      	add	r2, r1
 800a346:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a34a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a34e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a350:	2300      	movs	r3, #0
}
 800a352:	4618      	mov	r0, r3
 800a354:	3720      	adds	r7, #32
 800a356:	46bd      	mov	sp, r7
 800a358:	bd80      	pop	{r7, pc}
 800a35a:	bf00      	nop
 800a35c:	1ff80000 	.word	0x1ff80000

0800a360 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800a360:	b480      	push	{r7}
 800a362:	b087      	sub	sp, #28
 800a364:	af00      	add	r7, sp, #0
 800a366:	60f8      	str	r0, [r7, #12]
 800a368:	60b9      	str	r1, [r7, #8]
 800a36a:	4613      	mov	r3, r2
 800a36c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a36e:	68fb      	ldr	r3, [r7, #12]
 800a370:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800a372:	68bb      	ldr	r3, [r7, #8]
 800a374:	781b      	ldrb	r3, [r3, #0]
 800a376:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800a378:	68bb      	ldr	r3, [r7, #8]
 800a37a:	785b      	ldrb	r3, [r3, #1]
 800a37c:	2b01      	cmp	r3, #1
 800a37e:	f040 80cd 	bne.w	800a51c <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800a382:	68bb      	ldr	r3, [r7, #8]
 800a384:	695b      	ldr	r3, [r3, #20]
 800a386:	2b00      	cmp	r3, #0
 800a388:	d132      	bne.n	800a3f0 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a38a:	693b      	ldr	r3, [r7, #16]
 800a38c:	015a      	lsls	r2, r3, #5
 800a38e:	697b      	ldr	r3, [r7, #20]
 800a390:	4413      	add	r3, r2
 800a392:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a396:	691b      	ldr	r3, [r3, #16]
 800a398:	693a      	ldr	r2, [r7, #16]
 800a39a:	0151      	lsls	r1, r2, #5
 800a39c:	697a      	ldr	r2, [r7, #20]
 800a39e:	440a      	add	r2, r1
 800a3a0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a3a4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800a3a8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800a3ac:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800a3ae:	693b      	ldr	r3, [r7, #16]
 800a3b0:	015a      	lsls	r2, r3, #5
 800a3b2:	697b      	ldr	r3, [r7, #20]
 800a3b4:	4413      	add	r3, r2
 800a3b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a3ba:	691b      	ldr	r3, [r3, #16]
 800a3bc:	693a      	ldr	r2, [r7, #16]
 800a3be:	0151      	lsls	r1, r2, #5
 800a3c0:	697a      	ldr	r2, [r7, #20]
 800a3c2:	440a      	add	r2, r1
 800a3c4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a3c8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a3cc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a3ce:	693b      	ldr	r3, [r7, #16]
 800a3d0:	015a      	lsls	r2, r3, #5
 800a3d2:	697b      	ldr	r3, [r7, #20]
 800a3d4:	4413      	add	r3, r2
 800a3d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a3da:	691b      	ldr	r3, [r3, #16]
 800a3dc:	693a      	ldr	r2, [r7, #16]
 800a3de:	0151      	lsls	r1, r2, #5
 800a3e0:	697a      	ldr	r2, [r7, #20]
 800a3e2:	440a      	add	r2, r1
 800a3e4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a3e8:	0cdb      	lsrs	r3, r3, #19
 800a3ea:	04db      	lsls	r3, r3, #19
 800a3ec:	6113      	str	r3, [r2, #16]
 800a3ee:	e04e      	b.n	800a48e <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a3f0:	693b      	ldr	r3, [r7, #16]
 800a3f2:	015a      	lsls	r2, r3, #5
 800a3f4:	697b      	ldr	r3, [r7, #20]
 800a3f6:	4413      	add	r3, r2
 800a3f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a3fc:	691b      	ldr	r3, [r3, #16]
 800a3fe:	693a      	ldr	r2, [r7, #16]
 800a400:	0151      	lsls	r1, r2, #5
 800a402:	697a      	ldr	r2, [r7, #20]
 800a404:	440a      	add	r2, r1
 800a406:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a40a:	0cdb      	lsrs	r3, r3, #19
 800a40c:	04db      	lsls	r3, r3, #19
 800a40e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a410:	693b      	ldr	r3, [r7, #16]
 800a412:	015a      	lsls	r2, r3, #5
 800a414:	697b      	ldr	r3, [r7, #20]
 800a416:	4413      	add	r3, r2
 800a418:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a41c:	691b      	ldr	r3, [r3, #16]
 800a41e:	693a      	ldr	r2, [r7, #16]
 800a420:	0151      	lsls	r1, r2, #5
 800a422:	697a      	ldr	r2, [r7, #20]
 800a424:	440a      	add	r2, r1
 800a426:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a42a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800a42e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800a432:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800a434:	68bb      	ldr	r3, [r7, #8]
 800a436:	695a      	ldr	r2, [r3, #20]
 800a438:	68bb      	ldr	r3, [r7, #8]
 800a43a:	689b      	ldr	r3, [r3, #8]
 800a43c:	429a      	cmp	r2, r3
 800a43e:	d903      	bls.n	800a448 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800a440:	68bb      	ldr	r3, [r7, #8]
 800a442:	689a      	ldr	r2, [r3, #8]
 800a444:	68bb      	ldr	r3, [r7, #8]
 800a446:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800a448:	693b      	ldr	r3, [r7, #16]
 800a44a:	015a      	lsls	r2, r3, #5
 800a44c:	697b      	ldr	r3, [r7, #20]
 800a44e:	4413      	add	r3, r2
 800a450:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a454:	691b      	ldr	r3, [r3, #16]
 800a456:	693a      	ldr	r2, [r7, #16]
 800a458:	0151      	lsls	r1, r2, #5
 800a45a:	697a      	ldr	r2, [r7, #20]
 800a45c:	440a      	add	r2, r1
 800a45e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a462:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a466:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800a468:	693b      	ldr	r3, [r7, #16]
 800a46a:	015a      	lsls	r2, r3, #5
 800a46c:	697b      	ldr	r3, [r7, #20]
 800a46e:	4413      	add	r3, r2
 800a470:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a474:	691a      	ldr	r2, [r3, #16]
 800a476:	68bb      	ldr	r3, [r7, #8]
 800a478:	695b      	ldr	r3, [r3, #20]
 800a47a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a47e:	6939      	ldr	r1, [r7, #16]
 800a480:	0148      	lsls	r0, r1, #5
 800a482:	6979      	ldr	r1, [r7, #20]
 800a484:	4401      	add	r1, r0
 800a486:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800a48a:	4313      	orrs	r3, r2
 800a48c:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800a48e:	79fb      	ldrb	r3, [r7, #7]
 800a490:	2b01      	cmp	r3, #1
 800a492:	d11e      	bne.n	800a4d2 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800a494:	68bb      	ldr	r3, [r7, #8]
 800a496:	691b      	ldr	r3, [r3, #16]
 800a498:	2b00      	cmp	r3, #0
 800a49a:	d009      	beq.n	800a4b0 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800a49c:	693b      	ldr	r3, [r7, #16]
 800a49e:	015a      	lsls	r2, r3, #5
 800a4a0:	697b      	ldr	r3, [r7, #20]
 800a4a2:	4413      	add	r3, r2
 800a4a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a4a8:	461a      	mov	r2, r3
 800a4aa:	68bb      	ldr	r3, [r7, #8]
 800a4ac:	691b      	ldr	r3, [r3, #16]
 800a4ae:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800a4b0:	693b      	ldr	r3, [r7, #16]
 800a4b2:	015a      	lsls	r2, r3, #5
 800a4b4:	697b      	ldr	r3, [r7, #20]
 800a4b6:	4413      	add	r3, r2
 800a4b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a4bc:	681b      	ldr	r3, [r3, #0]
 800a4be:	693a      	ldr	r2, [r7, #16]
 800a4c0:	0151      	lsls	r1, r2, #5
 800a4c2:	697a      	ldr	r2, [r7, #20]
 800a4c4:	440a      	add	r2, r1
 800a4c6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a4ca:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a4ce:	6013      	str	r3, [r2, #0]
 800a4d0:	e092      	b.n	800a5f8 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800a4d2:	693b      	ldr	r3, [r7, #16]
 800a4d4:	015a      	lsls	r2, r3, #5
 800a4d6:	697b      	ldr	r3, [r7, #20]
 800a4d8:	4413      	add	r3, r2
 800a4da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a4de:	681b      	ldr	r3, [r3, #0]
 800a4e0:	693a      	ldr	r2, [r7, #16]
 800a4e2:	0151      	lsls	r1, r2, #5
 800a4e4:	697a      	ldr	r2, [r7, #20]
 800a4e6:	440a      	add	r2, r1
 800a4e8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a4ec:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a4f0:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800a4f2:	68bb      	ldr	r3, [r7, #8]
 800a4f4:	695b      	ldr	r3, [r3, #20]
 800a4f6:	2b00      	cmp	r3, #0
 800a4f8:	d07e      	beq.n	800a5f8 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800a4fa:	697b      	ldr	r3, [r7, #20]
 800a4fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a500:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a502:	68bb      	ldr	r3, [r7, #8]
 800a504:	781b      	ldrb	r3, [r3, #0]
 800a506:	f003 030f 	and.w	r3, r3, #15
 800a50a:	2101      	movs	r1, #1
 800a50c:	fa01 f303 	lsl.w	r3, r1, r3
 800a510:	6979      	ldr	r1, [r7, #20]
 800a512:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a516:	4313      	orrs	r3, r2
 800a518:	634b      	str	r3, [r1, #52]	; 0x34
 800a51a:	e06d      	b.n	800a5f8 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800a51c:	693b      	ldr	r3, [r7, #16]
 800a51e:	015a      	lsls	r2, r3, #5
 800a520:	697b      	ldr	r3, [r7, #20]
 800a522:	4413      	add	r3, r2
 800a524:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a528:	691b      	ldr	r3, [r3, #16]
 800a52a:	693a      	ldr	r2, [r7, #16]
 800a52c:	0151      	lsls	r1, r2, #5
 800a52e:	697a      	ldr	r2, [r7, #20]
 800a530:	440a      	add	r2, r1
 800a532:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a536:	0cdb      	lsrs	r3, r3, #19
 800a538:	04db      	lsls	r3, r3, #19
 800a53a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800a53c:	693b      	ldr	r3, [r7, #16]
 800a53e:	015a      	lsls	r2, r3, #5
 800a540:	697b      	ldr	r3, [r7, #20]
 800a542:	4413      	add	r3, r2
 800a544:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a548:	691b      	ldr	r3, [r3, #16]
 800a54a:	693a      	ldr	r2, [r7, #16]
 800a54c:	0151      	lsls	r1, r2, #5
 800a54e:	697a      	ldr	r2, [r7, #20]
 800a550:	440a      	add	r2, r1
 800a552:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a556:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800a55a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800a55e:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800a560:	68bb      	ldr	r3, [r7, #8]
 800a562:	695b      	ldr	r3, [r3, #20]
 800a564:	2b00      	cmp	r3, #0
 800a566:	d003      	beq.n	800a570 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 800a568:	68bb      	ldr	r3, [r7, #8]
 800a56a:	689a      	ldr	r2, [r3, #8]
 800a56c:	68bb      	ldr	r3, [r7, #8]
 800a56e:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a570:	693b      	ldr	r3, [r7, #16]
 800a572:	015a      	lsls	r2, r3, #5
 800a574:	697b      	ldr	r3, [r7, #20]
 800a576:	4413      	add	r3, r2
 800a578:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a57c:	691b      	ldr	r3, [r3, #16]
 800a57e:	693a      	ldr	r2, [r7, #16]
 800a580:	0151      	lsls	r1, r2, #5
 800a582:	697a      	ldr	r2, [r7, #20]
 800a584:	440a      	add	r2, r1
 800a586:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a58a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a58e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 800a590:	693b      	ldr	r3, [r7, #16]
 800a592:	015a      	lsls	r2, r3, #5
 800a594:	697b      	ldr	r3, [r7, #20]
 800a596:	4413      	add	r3, r2
 800a598:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a59c:	691a      	ldr	r2, [r3, #16]
 800a59e:	68bb      	ldr	r3, [r7, #8]
 800a5a0:	689b      	ldr	r3, [r3, #8]
 800a5a2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a5a6:	6939      	ldr	r1, [r7, #16]
 800a5a8:	0148      	lsls	r0, r1, #5
 800a5aa:	6979      	ldr	r1, [r7, #20]
 800a5ac:	4401      	add	r1, r0
 800a5ae:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800a5b2:	4313      	orrs	r3, r2
 800a5b4:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800a5b6:	79fb      	ldrb	r3, [r7, #7]
 800a5b8:	2b01      	cmp	r3, #1
 800a5ba:	d10d      	bne.n	800a5d8 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800a5bc:	68bb      	ldr	r3, [r7, #8]
 800a5be:	68db      	ldr	r3, [r3, #12]
 800a5c0:	2b00      	cmp	r3, #0
 800a5c2:	d009      	beq.n	800a5d8 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800a5c4:	68bb      	ldr	r3, [r7, #8]
 800a5c6:	68d9      	ldr	r1, [r3, #12]
 800a5c8:	693b      	ldr	r3, [r7, #16]
 800a5ca:	015a      	lsls	r2, r3, #5
 800a5cc:	697b      	ldr	r3, [r7, #20]
 800a5ce:	4413      	add	r3, r2
 800a5d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a5d4:	460a      	mov	r2, r1
 800a5d6:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800a5d8:	693b      	ldr	r3, [r7, #16]
 800a5da:	015a      	lsls	r2, r3, #5
 800a5dc:	697b      	ldr	r3, [r7, #20]
 800a5de:	4413      	add	r3, r2
 800a5e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a5e4:	681b      	ldr	r3, [r3, #0]
 800a5e6:	693a      	ldr	r2, [r7, #16]
 800a5e8:	0151      	lsls	r1, r2, #5
 800a5ea:	697a      	ldr	r2, [r7, #20]
 800a5ec:	440a      	add	r2, r1
 800a5ee:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a5f2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a5f6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a5f8:	2300      	movs	r3, #0
}
 800a5fa:	4618      	mov	r0, r3
 800a5fc:	371c      	adds	r7, #28
 800a5fe:	46bd      	mov	sp, r7
 800a600:	bc80      	pop	{r7}
 800a602:	4770      	bx	lr

0800a604 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800a604:	b480      	push	{r7}
 800a606:	b089      	sub	sp, #36	; 0x24
 800a608:	af00      	add	r7, sp, #0
 800a60a:	60f8      	str	r0, [r7, #12]
 800a60c:	60b9      	str	r1, [r7, #8]
 800a60e:	4611      	mov	r1, r2
 800a610:	461a      	mov	r2, r3
 800a612:	460b      	mov	r3, r1
 800a614:	71fb      	strb	r3, [r7, #7]
 800a616:	4613      	mov	r3, r2
 800a618:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a61a:	68fb      	ldr	r3, [r7, #12]
 800a61c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800a61e:	68bb      	ldr	r3, [r7, #8]
 800a620:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800a622:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800a626:	2b00      	cmp	r3, #0
 800a628:	d123      	bne.n	800a672 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800a62a:	88bb      	ldrh	r3, [r7, #4]
 800a62c:	3303      	adds	r3, #3
 800a62e:	089b      	lsrs	r3, r3, #2
 800a630:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800a632:	2300      	movs	r3, #0
 800a634:	61bb      	str	r3, [r7, #24]
 800a636:	e018      	b.n	800a66a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800a638:	79fb      	ldrb	r3, [r7, #7]
 800a63a:	031a      	lsls	r2, r3, #12
 800a63c:	697b      	ldr	r3, [r7, #20]
 800a63e:	4413      	add	r3, r2
 800a640:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a644:	461a      	mov	r2, r3
 800a646:	69fb      	ldr	r3, [r7, #28]
 800a648:	681b      	ldr	r3, [r3, #0]
 800a64a:	6013      	str	r3, [r2, #0]
      pSrc++;
 800a64c:	69fb      	ldr	r3, [r7, #28]
 800a64e:	3301      	adds	r3, #1
 800a650:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a652:	69fb      	ldr	r3, [r7, #28]
 800a654:	3301      	adds	r3, #1
 800a656:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a658:	69fb      	ldr	r3, [r7, #28]
 800a65a:	3301      	adds	r3, #1
 800a65c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a65e:	69fb      	ldr	r3, [r7, #28]
 800a660:	3301      	adds	r3, #1
 800a662:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800a664:	69bb      	ldr	r3, [r7, #24]
 800a666:	3301      	adds	r3, #1
 800a668:	61bb      	str	r3, [r7, #24]
 800a66a:	69ba      	ldr	r2, [r7, #24]
 800a66c:	693b      	ldr	r3, [r7, #16]
 800a66e:	429a      	cmp	r2, r3
 800a670:	d3e2      	bcc.n	800a638 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800a672:	2300      	movs	r3, #0
}
 800a674:	4618      	mov	r0, r3
 800a676:	3724      	adds	r7, #36	; 0x24
 800a678:	46bd      	mov	sp, r7
 800a67a:	bc80      	pop	{r7}
 800a67c:	4770      	bx	lr

0800a67e <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800a67e:	b480      	push	{r7}
 800a680:	b08b      	sub	sp, #44	; 0x2c
 800a682:	af00      	add	r7, sp, #0
 800a684:	60f8      	str	r0, [r7, #12]
 800a686:	60b9      	str	r1, [r7, #8]
 800a688:	4613      	mov	r3, r2
 800a68a:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a68c:	68fb      	ldr	r3, [r7, #12]
 800a68e:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800a690:	68bb      	ldr	r3, [r7, #8]
 800a692:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800a694:	88fb      	ldrh	r3, [r7, #6]
 800a696:	089b      	lsrs	r3, r3, #2
 800a698:	b29b      	uxth	r3, r3
 800a69a:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800a69c:	88fb      	ldrh	r3, [r7, #6]
 800a69e:	f003 0303 	and.w	r3, r3, #3
 800a6a2:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800a6a4:	2300      	movs	r3, #0
 800a6a6:	623b      	str	r3, [r7, #32]
 800a6a8:	e014      	b.n	800a6d4 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800a6aa:	69bb      	ldr	r3, [r7, #24]
 800a6ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a6b0:	681a      	ldr	r2, [r3, #0]
 800a6b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6b4:	601a      	str	r2, [r3, #0]
    pDest++;
 800a6b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6b8:	3301      	adds	r3, #1
 800a6ba:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800a6bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6be:	3301      	adds	r3, #1
 800a6c0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800a6c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6c4:	3301      	adds	r3, #1
 800a6c6:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800a6c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6ca:	3301      	adds	r3, #1
 800a6cc:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800a6ce:	6a3b      	ldr	r3, [r7, #32]
 800a6d0:	3301      	adds	r3, #1
 800a6d2:	623b      	str	r3, [r7, #32]
 800a6d4:	6a3a      	ldr	r2, [r7, #32]
 800a6d6:	697b      	ldr	r3, [r7, #20]
 800a6d8:	429a      	cmp	r2, r3
 800a6da:	d3e6      	bcc.n	800a6aa <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800a6dc:	8bfb      	ldrh	r3, [r7, #30]
 800a6de:	2b00      	cmp	r3, #0
 800a6e0:	d01e      	beq.n	800a720 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800a6e2:	2300      	movs	r3, #0
 800a6e4:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800a6e6:	69bb      	ldr	r3, [r7, #24]
 800a6e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a6ec:	461a      	mov	r2, r3
 800a6ee:	f107 0310 	add.w	r3, r7, #16
 800a6f2:	6812      	ldr	r2, [r2, #0]
 800a6f4:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800a6f6:	693a      	ldr	r2, [r7, #16]
 800a6f8:	6a3b      	ldr	r3, [r7, #32]
 800a6fa:	b2db      	uxtb	r3, r3
 800a6fc:	00db      	lsls	r3, r3, #3
 800a6fe:	fa22 f303 	lsr.w	r3, r2, r3
 800a702:	b2da      	uxtb	r2, r3
 800a704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a706:	701a      	strb	r2, [r3, #0]
      i++;
 800a708:	6a3b      	ldr	r3, [r7, #32]
 800a70a:	3301      	adds	r3, #1
 800a70c:	623b      	str	r3, [r7, #32]
      pDest++;
 800a70e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a710:	3301      	adds	r3, #1
 800a712:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800a714:	8bfb      	ldrh	r3, [r7, #30]
 800a716:	3b01      	subs	r3, #1
 800a718:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800a71a:	8bfb      	ldrh	r3, [r7, #30]
 800a71c:	2b00      	cmp	r3, #0
 800a71e:	d1ea      	bne.n	800a6f6 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800a720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a722:	4618      	mov	r0, r3
 800a724:	372c      	adds	r7, #44	; 0x2c
 800a726:	46bd      	mov	sp, r7
 800a728:	bc80      	pop	{r7}
 800a72a:	4770      	bx	lr

0800a72c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a72c:	b480      	push	{r7}
 800a72e:	b085      	sub	sp, #20
 800a730:	af00      	add	r7, sp, #0
 800a732:	6078      	str	r0, [r7, #4]
 800a734:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a73a:	683b      	ldr	r3, [r7, #0]
 800a73c:	781b      	ldrb	r3, [r3, #0]
 800a73e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800a740:	683b      	ldr	r3, [r7, #0]
 800a742:	785b      	ldrb	r3, [r3, #1]
 800a744:	2b01      	cmp	r3, #1
 800a746:	d12c      	bne.n	800a7a2 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800a748:	68bb      	ldr	r3, [r7, #8]
 800a74a:	015a      	lsls	r2, r3, #5
 800a74c:	68fb      	ldr	r3, [r7, #12]
 800a74e:	4413      	add	r3, r2
 800a750:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a754:	681b      	ldr	r3, [r3, #0]
 800a756:	2b00      	cmp	r3, #0
 800a758:	db12      	blt.n	800a780 <USB_EPSetStall+0x54>
 800a75a:	68bb      	ldr	r3, [r7, #8]
 800a75c:	2b00      	cmp	r3, #0
 800a75e:	d00f      	beq.n	800a780 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800a760:	68bb      	ldr	r3, [r7, #8]
 800a762:	015a      	lsls	r2, r3, #5
 800a764:	68fb      	ldr	r3, [r7, #12]
 800a766:	4413      	add	r3, r2
 800a768:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a76c:	681b      	ldr	r3, [r3, #0]
 800a76e:	68ba      	ldr	r2, [r7, #8]
 800a770:	0151      	lsls	r1, r2, #5
 800a772:	68fa      	ldr	r2, [r7, #12]
 800a774:	440a      	add	r2, r1
 800a776:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a77a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800a77e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800a780:	68bb      	ldr	r3, [r7, #8]
 800a782:	015a      	lsls	r2, r3, #5
 800a784:	68fb      	ldr	r3, [r7, #12]
 800a786:	4413      	add	r3, r2
 800a788:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a78c:	681b      	ldr	r3, [r3, #0]
 800a78e:	68ba      	ldr	r2, [r7, #8]
 800a790:	0151      	lsls	r1, r2, #5
 800a792:	68fa      	ldr	r2, [r7, #12]
 800a794:	440a      	add	r2, r1
 800a796:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a79a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800a79e:	6013      	str	r3, [r2, #0]
 800a7a0:	e02b      	b.n	800a7fa <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800a7a2:	68bb      	ldr	r3, [r7, #8]
 800a7a4:	015a      	lsls	r2, r3, #5
 800a7a6:	68fb      	ldr	r3, [r7, #12]
 800a7a8:	4413      	add	r3, r2
 800a7aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a7ae:	681b      	ldr	r3, [r3, #0]
 800a7b0:	2b00      	cmp	r3, #0
 800a7b2:	db12      	blt.n	800a7da <USB_EPSetStall+0xae>
 800a7b4:	68bb      	ldr	r3, [r7, #8]
 800a7b6:	2b00      	cmp	r3, #0
 800a7b8:	d00f      	beq.n	800a7da <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800a7ba:	68bb      	ldr	r3, [r7, #8]
 800a7bc:	015a      	lsls	r2, r3, #5
 800a7be:	68fb      	ldr	r3, [r7, #12]
 800a7c0:	4413      	add	r3, r2
 800a7c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a7c6:	681b      	ldr	r3, [r3, #0]
 800a7c8:	68ba      	ldr	r2, [r7, #8]
 800a7ca:	0151      	lsls	r1, r2, #5
 800a7cc:	68fa      	ldr	r2, [r7, #12]
 800a7ce:	440a      	add	r2, r1
 800a7d0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a7d4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800a7d8:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800a7da:	68bb      	ldr	r3, [r7, #8]
 800a7dc:	015a      	lsls	r2, r3, #5
 800a7de:	68fb      	ldr	r3, [r7, #12]
 800a7e0:	4413      	add	r3, r2
 800a7e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a7e6:	681b      	ldr	r3, [r3, #0]
 800a7e8:	68ba      	ldr	r2, [r7, #8]
 800a7ea:	0151      	lsls	r1, r2, #5
 800a7ec:	68fa      	ldr	r2, [r7, #12]
 800a7ee:	440a      	add	r2, r1
 800a7f0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a7f4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800a7f8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a7fa:	2300      	movs	r3, #0
}
 800a7fc:	4618      	mov	r0, r3
 800a7fe:	3714      	adds	r7, #20
 800a800:	46bd      	mov	sp, r7
 800a802:	bc80      	pop	{r7}
 800a804:	4770      	bx	lr

0800a806 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a806:	b480      	push	{r7}
 800a808:	b085      	sub	sp, #20
 800a80a:	af00      	add	r7, sp, #0
 800a80c:	6078      	str	r0, [r7, #4]
 800a80e:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a814:	683b      	ldr	r3, [r7, #0]
 800a816:	781b      	ldrb	r3, [r3, #0]
 800a818:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800a81a:	683b      	ldr	r3, [r7, #0]
 800a81c:	785b      	ldrb	r3, [r3, #1]
 800a81e:	2b01      	cmp	r3, #1
 800a820:	d128      	bne.n	800a874 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800a822:	68bb      	ldr	r3, [r7, #8]
 800a824:	015a      	lsls	r2, r3, #5
 800a826:	68fb      	ldr	r3, [r7, #12]
 800a828:	4413      	add	r3, r2
 800a82a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a82e:	681b      	ldr	r3, [r3, #0]
 800a830:	68ba      	ldr	r2, [r7, #8]
 800a832:	0151      	lsls	r1, r2, #5
 800a834:	68fa      	ldr	r2, [r7, #12]
 800a836:	440a      	add	r2, r1
 800a838:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a83c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800a840:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800a842:	683b      	ldr	r3, [r7, #0]
 800a844:	78db      	ldrb	r3, [r3, #3]
 800a846:	2b03      	cmp	r3, #3
 800a848:	d003      	beq.n	800a852 <USB_EPClearStall+0x4c>
 800a84a:	683b      	ldr	r3, [r7, #0]
 800a84c:	78db      	ldrb	r3, [r3, #3]
 800a84e:	2b02      	cmp	r3, #2
 800a850:	d138      	bne.n	800a8c4 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800a852:	68bb      	ldr	r3, [r7, #8]
 800a854:	015a      	lsls	r2, r3, #5
 800a856:	68fb      	ldr	r3, [r7, #12]
 800a858:	4413      	add	r3, r2
 800a85a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a85e:	681b      	ldr	r3, [r3, #0]
 800a860:	68ba      	ldr	r2, [r7, #8]
 800a862:	0151      	lsls	r1, r2, #5
 800a864:	68fa      	ldr	r2, [r7, #12]
 800a866:	440a      	add	r2, r1
 800a868:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a86c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a870:	6013      	str	r3, [r2, #0]
 800a872:	e027      	b.n	800a8c4 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800a874:	68bb      	ldr	r3, [r7, #8]
 800a876:	015a      	lsls	r2, r3, #5
 800a878:	68fb      	ldr	r3, [r7, #12]
 800a87a:	4413      	add	r3, r2
 800a87c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a880:	681b      	ldr	r3, [r3, #0]
 800a882:	68ba      	ldr	r2, [r7, #8]
 800a884:	0151      	lsls	r1, r2, #5
 800a886:	68fa      	ldr	r2, [r7, #12]
 800a888:	440a      	add	r2, r1
 800a88a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a88e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800a892:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800a894:	683b      	ldr	r3, [r7, #0]
 800a896:	78db      	ldrb	r3, [r3, #3]
 800a898:	2b03      	cmp	r3, #3
 800a89a:	d003      	beq.n	800a8a4 <USB_EPClearStall+0x9e>
 800a89c:	683b      	ldr	r3, [r7, #0]
 800a89e:	78db      	ldrb	r3, [r3, #3]
 800a8a0:	2b02      	cmp	r3, #2
 800a8a2:	d10f      	bne.n	800a8c4 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800a8a4:	68bb      	ldr	r3, [r7, #8]
 800a8a6:	015a      	lsls	r2, r3, #5
 800a8a8:	68fb      	ldr	r3, [r7, #12]
 800a8aa:	4413      	add	r3, r2
 800a8ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a8b0:	681b      	ldr	r3, [r3, #0]
 800a8b2:	68ba      	ldr	r2, [r7, #8]
 800a8b4:	0151      	lsls	r1, r2, #5
 800a8b6:	68fa      	ldr	r2, [r7, #12]
 800a8b8:	440a      	add	r2, r1
 800a8ba:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a8be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a8c2:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800a8c4:	2300      	movs	r3, #0
}
 800a8c6:	4618      	mov	r0, r3
 800a8c8:	3714      	adds	r7, #20
 800a8ca:	46bd      	mov	sp, r7
 800a8cc:	bc80      	pop	{r7}
 800a8ce:	4770      	bx	lr

0800a8d0 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800a8d0:	b480      	push	{r7}
 800a8d2:	b085      	sub	sp, #20
 800a8d4:	af00      	add	r7, sp, #0
 800a8d6:	6078      	str	r0, [r7, #4]
 800a8d8:	460b      	mov	r3, r1
 800a8da:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800a8e0:	68fb      	ldr	r3, [r7, #12]
 800a8e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a8e6:	681b      	ldr	r3, [r3, #0]
 800a8e8:	68fa      	ldr	r2, [r7, #12]
 800a8ea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a8ee:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800a8f2:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800a8f4:	68fb      	ldr	r3, [r7, #12]
 800a8f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a8fa:	681a      	ldr	r2, [r3, #0]
 800a8fc:	78fb      	ldrb	r3, [r7, #3]
 800a8fe:	011b      	lsls	r3, r3, #4
 800a900:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800a904:	68f9      	ldr	r1, [r7, #12]
 800a906:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a90a:	4313      	orrs	r3, r2
 800a90c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800a90e:	2300      	movs	r3, #0
}
 800a910:	4618      	mov	r0, r3
 800a912:	3714      	adds	r7, #20
 800a914:	46bd      	mov	sp, r7
 800a916:	bc80      	pop	{r7}
 800a918:	4770      	bx	lr

0800a91a <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800a91a:	b480      	push	{r7}
 800a91c:	b085      	sub	sp, #20
 800a91e:	af00      	add	r7, sp, #0
 800a920:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800a926:	68fb      	ldr	r3, [r7, #12]
 800a928:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a92c:	681b      	ldr	r3, [r3, #0]
 800a92e:	68fa      	ldr	r2, [r7, #12]
 800a930:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800a934:	f023 0303 	bic.w	r3, r3, #3
 800a938:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800a93a:	68fb      	ldr	r3, [r7, #12]
 800a93c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a940:	685b      	ldr	r3, [r3, #4]
 800a942:	68fa      	ldr	r2, [r7, #12]
 800a944:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a948:	f023 0302 	bic.w	r3, r3, #2
 800a94c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a94e:	2300      	movs	r3, #0
}
 800a950:	4618      	mov	r0, r3
 800a952:	3714      	adds	r7, #20
 800a954:	46bd      	mov	sp, r7
 800a956:	bc80      	pop	{r7}
 800a958:	4770      	bx	lr

0800a95a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800a95a:	b480      	push	{r7}
 800a95c:	b085      	sub	sp, #20
 800a95e:	af00      	add	r7, sp, #0
 800a960:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800a966:	68fb      	ldr	r3, [r7, #12]
 800a968:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a96c:	681b      	ldr	r3, [r3, #0]
 800a96e:	68fa      	ldr	r2, [r7, #12]
 800a970:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800a974:	f023 0303 	bic.w	r3, r3, #3
 800a978:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800a97a:	68fb      	ldr	r3, [r7, #12]
 800a97c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a980:	685b      	ldr	r3, [r3, #4]
 800a982:	68fa      	ldr	r2, [r7, #12]
 800a984:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a988:	f043 0302 	orr.w	r3, r3, #2
 800a98c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a98e:	2300      	movs	r3, #0
}
 800a990:	4618      	mov	r0, r3
 800a992:	3714      	adds	r7, #20
 800a994:	46bd      	mov	sp, r7
 800a996:	bc80      	pop	{r7}
 800a998:	4770      	bx	lr

0800a99a <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800a99a:	b480      	push	{r7}
 800a99c:	b085      	sub	sp, #20
 800a99e:	af00      	add	r7, sp, #0
 800a9a0:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	695b      	ldr	r3, [r3, #20]
 800a9a6:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	699b      	ldr	r3, [r3, #24]
 800a9ac:	68fa      	ldr	r2, [r7, #12]
 800a9ae:	4013      	ands	r3, r2
 800a9b0:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800a9b2:	68fb      	ldr	r3, [r7, #12]
}
 800a9b4:	4618      	mov	r0, r3
 800a9b6:	3714      	adds	r7, #20
 800a9b8:	46bd      	mov	sp, r7
 800a9ba:	bc80      	pop	{r7}
 800a9bc:	4770      	bx	lr

0800a9be <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800a9be:	b480      	push	{r7}
 800a9c0:	b085      	sub	sp, #20
 800a9c2:	af00      	add	r7, sp, #0
 800a9c4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800a9ca:	68fb      	ldr	r3, [r7, #12]
 800a9cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a9d0:	699b      	ldr	r3, [r3, #24]
 800a9d2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800a9d4:	68fb      	ldr	r3, [r7, #12]
 800a9d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a9da:	69db      	ldr	r3, [r3, #28]
 800a9dc:	68ba      	ldr	r2, [r7, #8]
 800a9de:	4013      	ands	r3, r2
 800a9e0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800a9e2:	68bb      	ldr	r3, [r7, #8]
 800a9e4:	0c1b      	lsrs	r3, r3, #16
}
 800a9e6:	4618      	mov	r0, r3
 800a9e8:	3714      	adds	r7, #20
 800a9ea:	46bd      	mov	sp, r7
 800a9ec:	bc80      	pop	{r7}
 800a9ee:	4770      	bx	lr

0800a9f0 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800a9f0:	b480      	push	{r7}
 800a9f2:	b085      	sub	sp, #20
 800a9f4:	af00      	add	r7, sp, #0
 800a9f6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800a9fc:	68fb      	ldr	r3, [r7, #12]
 800a9fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aa02:	699b      	ldr	r3, [r3, #24]
 800aa04:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800aa06:	68fb      	ldr	r3, [r7, #12]
 800aa08:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aa0c:	69db      	ldr	r3, [r3, #28]
 800aa0e:	68ba      	ldr	r2, [r7, #8]
 800aa10:	4013      	ands	r3, r2
 800aa12:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800aa14:	68bb      	ldr	r3, [r7, #8]
 800aa16:	b29b      	uxth	r3, r3
}
 800aa18:	4618      	mov	r0, r3
 800aa1a:	3714      	adds	r7, #20
 800aa1c:	46bd      	mov	sp, r7
 800aa1e:	bc80      	pop	{r7}
 800aa20:	4770      	bx	lr

0800aa22 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800aa22:	b480      	push	{r7}
 800aa24:	b085      	sub	sp, #20
 800aa26:	af00      	add	r7, sp, #0
 800aa28:	6078      	str	r0, [r7, #4]
 800aa2a:	460b      	mov	r3, r1
 800aa2c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800aa32:	78fb      	ldrb	r3, [r7, #3]
 800aa34:	015a      	lsls	r2, r3, #5
 800aa36:	68fb      	ldr	r3, [r7, #12]
 800aa38:	4413      	add	r3, r2
 800aa3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aa3e:	689b      	ldr	r3, [r3, #8]
 800aa40:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800aa42:	68fb      	ldr	r3, [r7, #12]
 800aa44:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aa48:	695b      	ldr	r3, [r3, #20]
 800aa4a:	68ba      	ldr	r2, [r7, #8]
 800aa4c:	4013      	ands	r3, r2
 800aa4e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800aa50:	68bb      	ldr	r3, [r7, #8]
}
 800aa52:	4618      	mov	r0, r3
 800aa54:	3714      	adds	r7, #20
 800aa56:	46bd      	mov	sp, r7
 800aa58:	bc80      	pop	{r7}
 800aa5a:	4770      	bx	lr

0800aa5c <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800aa5c:	b480      	push	{r7}
 800aa5e:	b087      	sub	sp, #28
 800aa60:	af00      	add	r7, sp, #0
 800aa62:	6078      	str	r0, [r7, #4]
 800aa64:	460b      	mov	r3, r1
 800aa66:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800aa6c:	697b      	ldr	r3, [r7, #20]
 800aa6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aa72:	691b      	ldr	r3, [r3, #16]
 800aa74:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800aa76:	697b      	ldr	r3, [r7, #20]
 800aa78:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aa7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aa7e:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800aa80:	78fb      	ldrb	r3, [r7, #3]
 800aa82:	f003 030f 	and.w	r3, r3, #15
 800aa86:	68fa      	ldr	r2, [r7, #12]
 800aa88:	fa22 f303 	lsr.w	r3, r2, r3
 800aa8c:	01db      	lsls	r3, r3, #7
 800aa8e:	b2db      	uxtb	r3, r3
 800aa90:	693a      	ldr	r2, [r7, #16]
 800aa92:	4313      	orrs	r3, r2
 800aa94:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800aa96:	78fb      	ldrb	r3, [r7, #3]
 800aa98:	015a      	lsls	r2, r3, #5
 800aa9a:	697b      	ldr	r3, [r7, #20]
 800aa9c:	4413      	add	r3, r2
 800aa9e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aaa2:	689b      	ldr	r3, [r3, #8]
 800aaa4:	693a      	ldr	r2, [r7, #16]
 800aaa6:	4013      	ands	r3, r2
 800aaa8:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800aaaa:	68bb      	ldr	r3, [r7, #8]
}
 800aaac:	4618      	mov	r0, r3
 800aaae:	371c      	adds	r7, #28
 800aab0:	46bd      	mov	sp, r7
 800aab2:	bc80      	pop	{r7}
 800aab4:	4770      	bx	lr

0800aab6 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800aab6:	b480      	push	{r7}
 800aab8:	b083      	sub	sp, #12
 800aaba:	af00      	add	r7, sp, #0
 800aabc:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	695b      	ldr	r3, [r3, #20]
 800aac2:	f003 0301 	and.w	r3, r3, #1
}
 800aac6:	4618      	mov	r0, r3
 800aac8:	370c      	adds	r7, #12
 800aaca:	46bd      	mov	sp, r7
 800aacc:	bc80      	pop	{r7}
 800aace:	4770      	bx	lr

0800aad0 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800aad0:	b480      	push	{r7}
 800aad2:	b085      	sub	sp, #20
 800aad4:	af00      	add	r7, sp, #0
 800aad6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800aadc:	68fb      	ldr	r3, [r7, #12]
 800aade:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aae2:	681b      	ldr	r3, [r3, #0]
 800aae4:	68fa      	ldr	r2, [r7, #12]
 800aae6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800aaea:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800aaee:	f023 0307 	bic.w	r3, r3, #7
 800aaf2:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800aaf4:	68fb      	ldr	r3, [r7, #12]
 800aaf6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aafa:	685b      	ldr	r3, [r3, #4]
 800aafc:	68fa      	ldr	r2, [r7, #12]
 800aafe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ab02:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ab06:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800ab08:	2300      	movs	r3, #0
}
 800ab0a:	4618      	mov	r0, r3
 800ab0c:	3714      	adds	r7, #20
 800ab0e:	46bd      	mov	sp, r7
 800ab10:	bc80      	pop	{r7}
 800ab12:	4770      	bx	lr

0800ab14 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800ab14:	b480      	push	{r7}
 800ab16:	b087      	sub	sp, #28
 800ab18:	af00      	add	r7, sp, #0
 800ab1a:	60f8      	str	r0, [r7, #12]
 800ab1c:	460b      	mov	r3, r1
 800ab1e:	607a      	str	r2, [r7, #4]
 800ab20:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ab22:	68fb      	ldr	r3, [r7, #12]
 800ab24:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800ab26:	68fb      	ldr	r3, [r7, #12]
 800ab28:	333c      	adds	r3, #60	; 0x3c
 800ab2a:	3304      	adds	r3, #4
 800ab2c:	681b      	ldr	r3, [r3, #0]
 800ab2e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800ab30:	693b      	ldr	r3, [r7, #16]
 800ab32:	4a25      	ldr	r2, [pc, #148]	; (800abc8 <USB_EP0_OutStart+0xb4>)
 800ab34:	4293      	cmp	r3, r2
 800ab36:	d90a      	bls.n	800ab4e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800ab38:	697b      	ldr	r3, [r7, #20]
 800ab3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ab3e:	681b      	ldr	r3, [r3, #0]
 800ab40:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ab44:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ab48:	d101      	bne.n	800ab4e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800ab4a:	2300      	movs	r3, #0
 800ab4c:	e037      	b.n	800abbe <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800ab4e:	697b      	ldr	r3, [r7, #20]
 800ab50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ab54:	461a      	mov	r2, r3
 800ab56:	2300      	movs	r3, #0
 800ab58:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800ab5a:	697b      	ldr	r3, [r7, #20]
 800ab5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ab60:	691b      	ldr	r3, [r3, #16]
 800ab62:	697a      	ldr	r2, [r7, #20]
 800ab64:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ab68:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800ab6c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800ab6e:	697b      	ldr	r3, [r7, #20]
 800ab70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ab74:	691b      	ldr	r3, [r3, #16]
 800ab76:	697a      	ldr	r2, [r7, #20]
 800ab78:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ab7c:	f043 0318 	orr.w	r3, r3, #24
 800ab80:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800ab82:	697b      	ldr	r3, [r7, #20]
 800ab84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ab88:	691b      	ldr	r3, [r3, #16]
 800ab8a:	697a      	ldr	r2, [r7, #20]
 800ab8c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ab90:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800ab94:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800ab96:	7afb      	ldrb	r3, [r7, #11]
 800ab98:	2b01      	cmp	r3, #1
 800ab9a:	d10f      	bne.n	800abbc <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800ab9c:	697b      	ldr	r3, [r7, #20]
 800ab9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aba2:	461a      	mov	r2, r3
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800aba8:	697b      	ldr	r3, [r7, #20]
 800abaa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800abae:	681b      	ldr	r3, [r3, #0]
 800abb0:	697a      	ldr	r2, [r7, #20]
 800abb2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800abb6:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800abba:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800abbc:	2300      	movs	r3, #0
}
 800abbe:	4618      	mov	r0, r3
 800abc0:	371c      	adds	r7, #28
 800abc2:	46bd      	mov	sp, r7
 800abc4:	bc80      	pop	{r7}
 800abc6:	4770      	bx	lr
 800abc8:	4f54300a 	.word	0x4f54300a

0800abcc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800abcc:	b480      	push	{r7}
 800abce:	b085      	sub	sp, #20
 800abd0:	af00      	add	r7, sp, #0
 800abd2:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800abd4:	2300      	movs	r3, #0
 800abd6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800abd8:	68fb      	ldr	r3, [r7, #12]
 800abda:	3301      	adds	r3, #1
 800abdc:	60fb      	str	r3, [r7, #12]
 800abde:	68fb      	ldr	r3, [r7, #12]
 800abe0:	4a12      	ldr	r2, [pc, #72]	; (800ac2c <USB_CoreReset+0x60>)
 800abe2:	4293      	cmp	r3, r2
 800abe4:	d901      	bls.n	800abea <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800abe6:	2303      	movs	r3, #3
 800abe8:	e01b      	b.n	800ac22 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	691b      	ldr	r3, [r3, #16]
 800abee:	2b00      	cmp	r3, #0
 800abf0:	daf2      	bge.n	800abd8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800abf2:	2300      	movs	r3, #0
 800abf4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	691b      	ldr	r3, [r3, #16]
 800abfa:	f043 0201 	orr.w	r2, r3, #1
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800ac02:	68fb      	ldr	r3, [r7, #12]
 800ac04:	3301      	adds	r3, #1
 800ac06:	60fb      	str	r3, [r7, #12]
 800ac08:	68fb      	ldr	r3, [r7, #12]
 800ac0a:	4a08      	ldr	r2, [pc, #32]	; (800ac2c <USB_CoreReset+0x60>)
 800ac0c:	4293      	cmp	r3, r2
 800ac0e:	d901      	bls.n	800ac14 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800ac10:	2303      	movs	r3, #3
 800ac12:	e006      	b.n	800ac22 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	691b      	ldr	r3, [r3, #16]
 800ac18:	f003 0301 	and.w	r3, r3, #1
 800ac1c:	2b01      	cmp	r3, #1
 800ac1e:	d0f0      	beq.n	800ac02 <USB_CoreReset+0x36>

  return HAL_OK;
 800ac20:	2300      	movs	r3, #0
}
 800ac22:	4618      	mov	r0, r3
 800ac24:	3714      	adds	r7, #20
 800ac26:	46bd      	mov	sp, r7
 800ac28:	bc80      	pop	{r7}
 800ac2a:	4770      	bx	lr
 800ac2c:	00030d40 	.word	0x00030d40

0800ac30 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ac30:	b580      	push	{r7, lr}
 800ac32:	b084      	sub	sp, #16
 800ac34:	af00      	add	r7, sp, #0
 800ac36:	6078      	str	r0, [r7, #4]
 800ac38:	460b      	mov	r3, r1
 800ac3a:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800ac3c:	2300      	movs	r3, #0
 800ac3e:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	7c1b      	ldrb	r3, [r3, #16]
 800ac44:	2b00      	cmp	r3, #0
 800ac46:	d115      	bne.n	800ac74 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800ac48:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ac4c:	2202      	movs	r2, #2
 800ac4e:	2181      	movs	r1, #129	; 0x81
 800ac50:	6878      	ldr	r0, [r7, #4]
 800ac52:	f001 ff48 	bl	800cae6 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	2201      	movs	r2, #1
 800ac5a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800ac5c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ac60:	2202      	movs	r2, #2
 800ac62:	2101      	movs	r1, #1
 800ac64:	6878      	ldr	r0, [r7, #4]
 800ac66:	f001 ff3e 	bl	800cae6 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	2201      	movs	r2, #1
 800ac6e:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 800ac72:	e012      	b.n	800ac9a <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800ac74:	2340      	movs	r3, #64	; 0x40
 800ac76:	2202      	movs	r2, #2
 800ac78:	2181      	movs	r1, #129	; 0x81
 800ac7a:	6878      	ldr	r0, [r7, #4]
 800ac7c:	f001 ff33 	bl	800cae6 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	2201      	movs	r2, #1
 800ac84:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800ac86:	2340      	movs	r3, #64	; 0x40
 800ac88:	2202      	movs	r2, #2
 800ac8a:	2101      	movs	r1, #1
 800ac8c:	6878      	ldr	r0, [r7, #4]
 800ac8e:	f001 ff2a 	bl	800cae6 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	2201      	movs	r2, #1
 800ac96:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800ac9a:	2308      	movs	r3, #8
 800ac9c:	2203      	movs	r2, #3
 800ac9e:	2182      	movs	r1, #130	; 0x82
 800aca0:	6878      	ldr	r0, [r7, #4]
 800aca2:	f001 ff20 	bl	800cae6 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	2201      	movs	r2, #1
 800acaa:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800acac:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800acb0:	f003 fbc6 	bl	800e440 <malloc>
 800acb4:	4603      	mov	r3, r0
 800acb6:	461a      	mov	r2, r3
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800acc4:	2b00      	cmp	r3, #0
 800acc6:	d102      	bne.n	800acce <USBD_CDC_Init+0x9e>
  {
    ret = 1U;
 800acc8:	2301      	movs	r3, #1
 800acca:	73fb      	strb	r3, [r7, #15]
 800accc:	e026      	b.n	800ad1c <USBD_CDC_Init+0xec>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800acd4:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800acdc:	681b      	ldr	r3, [r3, #0]
 800acde:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 800ace0:	68bb      	ldr	r3, [r7, #8]
 800ace2:	2200      	movs	r2, #0
 800ace4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 800ace8:	68bb      	ldr	r3, [r7, #8]
 800acea:	2200      	movs	r2, #0
 800acec:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	7c1b      	ldrb	r3, [r3, #16]
 800acf4:	2b00      	cmp	r3, #0
 800acf6:	d109      	bne.n	800ad0c <USBD_CDC_Init+0xdc>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800acf8:	68bb      	ldr	r3, [r7, #8]
 800acfa:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800acfe:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ad02:	2101      	movs	r1, #1
 800ad04:	6878      	ldr	r0, [r7, #4]
 800ad06:	f001 ffde 	bl	800ccc6 <USBD_LL_PrepareReceive>
 800ad0a:	e007      	b.n	800ad1c <USBD_CDC_Init+0xec>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800ad0c:	68bb      	ldr	r3, [r7, #8]
 800ad0e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800ad12:	2340      	movs	r3, #64	; 0x40
 800ad14:	2101      	movs	r1, #1
 800ad16:	6878      	ldr	r0, [r7, #4]
 800ad18:	f001 ffd5 	bl	800ccc6 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 800ad1c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ad1e:	4618      	mov	r0, r3
 800ad20:	3710      	adds	r7, #16
 800ad22:	46bd      	mov	sp, r7
 800ad24:	bd80      	pop	{r7, pc}

0800ad26 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ad26:	b580      	push	{r7, lr}
 800ad28:	b084      	sub	sp, #16
 800ad2a:	af00      	add	r7, sp, #0
 800ad2c:	6078      	str	r0, [r7, #4]
 800ad2e:	460b      	mov	r3, r1
 800ad30:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800ad32:	2300      	movs	r3, #0
 800ad34:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800ad36:	2181      	movs	r1, #129	; 0x81
 800ad38:	6878      	ldr	r0, [r7, #4]
 800ad3a:	f001 fefa 	bl	800cb32 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	2200      	movs	r2, #0
 800ad42:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800ad44:	2101      	movs	r1, #1
 800ad46:	6878      	ldr	r0, [r7, #4]
 800ad48:	f001 fef3 	bl	800cb32 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	2200      	movs	r2, #0
 800ad50:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800ad54:	2182      	movs	r1, #130	; 0x82
 800ad56:	6878      	ldr	r0, [r7, #4]
 800ad58:	f001 feeb 	bl	800cb32 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	2200      	movs	r2, #0
 800ad60:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ad68:	2b00      	cmp	r3, #0
 800ad6a:	d00e      	beq.n	800ad8a <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ad72:	685b      	ldr	r3, [r3, #4]
 800ad74:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ad7c:	4618      	mov	r0, r3
 800ad7e:	f003 fb67 	bl	800e450 <free>
    pdev->pClassData = NULL;
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	2200      	movs	r2, #0
 800ad86:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 800ad8a:	7bfb      	ldrb	r3, [r7, #15]
}
 800ad8c:	4618      	mov	r0, r3
 800ad8e:	3710      	adds	r7, #16
 800ad90:	46bd      	mov	sp, r7
 800ad92:	bd80      	pop	{r7, pc}

0800ad94 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800ad94:	b580      	push	{r7, lr}
 800ad96:	b086      	sub	sp, #24
 800ad98:	af00      	add	r7, sp, #0
 800ad9a:	6078      	str	r0, [r7, #4]
 800ad9c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ada4:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800ada6:	2300      	movs	r3, #0
 800ada8:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 800adaa:	2300      	movs	r3, #0
 800adac:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 800adae:	2300      	movs	r3, #0
 800adb0:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800adb2:	683b      	ldr	r3, [r7, #0]
 800adb4:	781b      	ldrb	r3, [r3, #0]
 800adb6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800adba:	2b00      	cmp	r3, #0
 800adbc:	d039      	beq.n	800ae32 <USBD_CDC_Setup+0x9e>
 800adbe:	2b20      	cmp	r3, #32
 800adc0:	d17f      	bne.n	800aec2 <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 800adc2:	683b      	ldr	r3, [r7, #0]
 800adc4:	88db      	ldrh	r3, [r3, #6]
 800adc6:	2b00      	cmp	r3, #0
 800adc8:	d029      	beq.n	800ae1e <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 800adca:	683b      	ldr	r3, [r7, #0]
 800adcc:	781b      	ldrb	r3, [r3, #0]
 800adce:	b25b      	sxtb	r3, r3
 800add0:	2b00      	cmp	r3, #0
 800add2:	da11      	bge.n	800adf8 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800adda:	689b      	ldr	r3, [r3, #8]
 800addc:	683a      	ldr	r2, [r7, #0]
 800adde:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 800ade0:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800ade2:	683a      	ldr	r2, [r7, #0]
 800ade4:	88d2      	ldrh	r2, [r2, #6]
 800ade6:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800ade8:	6939      	ldr	r1, [r7, #16]
 800adea:	683b      	ldr	r3, [r7, #0]
 800adec:	88db      	ldrh	r3, [r3, #6]
 800adee:	461a      	mov	r2, r3
 800adf0:	6878      	ldr	r0, [r7, #4]
 800adf2:	f001 fa42 	bl	800c27a <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 800adf6:	e06b      	b.n	800aed0 <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 800adf8:	683b      	ldr	r3, [r7, #0]
 800adfa:	785a      	ldrb	r2, [r3, #1]
 800adfc:	693b      	ldr	r3, [r7, #16]
 800adfe:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800ae02:	683b      	ldr	r3, [r7, #0]
 800ae04:	88db      	ldrh	r3, [r3, #6]
 800ae06:	b2da      	uxtb	r2, r3
 800ae08:	693b      	ldr	r3, [r7, #16]
 800ae0a:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800ae0e:	6939      	ldr	r1, [r7, #16]
 800ae10:	683b      	ldr	r3, [r7, #0]
 800ae12:	88db      	ldrh	r3, [r3, #6]
 800ae14:	461a      	mov	r2, r3
 800ae16:	6878      	ldr	r0, [r7, #4]
 800ae18:	f001 fa5d 	bl	800c2d6 <USBD_CtlPrepareRx>
      break;
 800ae1c:	e058      	b.n	800aed0 <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ae24:	689b      	ldr	r3, [r3, #8]
 800ae26:	683a      	ldr	r2, [r7, #0]
 800ae28:	7850      	ldrb	r0, [r2, #1]
 800ae2a:	2200      	movs	r2, #0
 800ae2c:	6839      	ldr	r1, [r7, #0]
 800ae2e:	4798      	blx	r3
      break;
 800ae30:	e04e      	b.n	800aed0 <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800ae32:	683b      	ldr	r3, [r7, #0]
 800ae34:	785b      	ldrb	r3, [r3, #1]
 800ae36:	2b0b      	cmp	r3, #11
 800ae38:	d02e      	beq.n	800ae98 <USBD_CDC_Setup+0x104>
 800ae3a:	2b0b      	cmp	r3, #11
 800ae3c:	dc38      	bgt.n	800aeb0 <USBD_CDC_Setup+0x11c>
 800ae3e:	2b00      	cmp	r3, #0
 800ae40:	d002      	beq.n	800ae48 <USBD_CDC_Setup+0xb4>
 800ae42:	2b0a      	cmp	r3, #10
 800ae44:	d014      	beq.n	800ae70 <USBD_CDC_Setup+0xdc>
 800ae46:	e033      	b.n	800aeb0 <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ae4e:	2b03      	cmp	r3, #3
 800ae50:	d107      	bne.n	800ae62 <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 800ae52:	f107 030c 	add.w	r3, r7, #12
 800ae56:	2202      	movs	r2, #2
 800ae58:	4619      	mov	r1, r3
 800ae5a:	6878      	ldr	r0, [r7, #4]
 800ae5c:	f001 fa0d 	bl	800c27a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800ae60:	e02e      	b.n	800aec0 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 800ae62:	6839      	ldr	r1, [r7, #0]
 800ae64:	6878      	ldr	r0, [r7, #4]
 800ae66:	f001 f99e 	bl	800c1a6 <USBD_CtlError>
            ret = USBD_FAIL;
 800ae6a:	2302      	movs	r3, #2
 800ae6c:	75fb      	strb	r3, [r7, #23]
          break;
 800ae6e:	e027      	b.n	800aec0 <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ae76:	2b03      	cmp	r3, #3
 800ae78:	d107      	bne.n	800ae8a <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 800ae7a:	f107 030f 	add.w	r3, r7, #15
 800ae7e:	2201      	movs	r2, #1
 800ae80:	4619      	mov	r1, r3
 800ae82:	6878      	ldr	r0, [r7, #4]
 800ae84:	f001 f9f9 	bl	800c27a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800ae88:	e01a      	b.n	800aec0 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 800ae8a:	6839      	ldr	r1, [r7, #0]
 800ae8c:	6878      	ldr	r0, [r7, #4]
 800ae8e:	f001 f98a 	bl	800c1a6 <USBD_CtlError>
            ret = USBD_FAIL;
 800ae92:	2302      	movs	r3, #2
 800ae94:	75fb      	strb	r3, [r7, #23]
          break;
 800ae96:	e013      	b.n	800aec0 <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ae9e:	2b03      	cmp	r3, #3
 800aea0:	d00d      	beq.n	800aebe <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 800aea2:	6839      	ldr	r1, [r7, #0]
 800aea4:	6878      	ldr	r0, [r7, #4]
 800aea6:	f001 f97e 	bl	800c1a6 <USBD_CtlError>
            ret = USBD_FAIL;
 800aeaa:	2302      	movs	r3, #2
 800aeac:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800aeae:	e006      	b.n	800aebe <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 800aeb0:	6839      	ldr	r1, [r7, #0]
 800aeb2:	6878      	ldr	r0, [r7, #4]
 800aeb4:	f001 f977 	bl	800c1a6 <USBD_CtlError>
          ret = USBD_FAIL;
 800aeb8:	2302      	movs	r3, #2
 800aeba:	75fb      	strb	r3, [r7, #23]
          break;
 800aebc:	e000      	b.n	800aec0 <USBD_CDC_Setup+0x12c>
          break;
 800aebe:	bf00      	nop
      }
      break;
 800aec0:	e006      	b.n	800aed0 <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800aec2:	6839      	ldr	r1, [r7, #0]
 800aec4:	6878      	ldr	r0, [r7, #4]
 800aec6:	f001 f96e 	bl	800c1a6 <USBD_CtlError>
      ret = USBD_FAIL;
 800aeca:	2302      	movs	r3, #2
 800aecc:	75fb      	strb	r3, [r7, #23]
      break;
 800aece:	bf00      	nop
  }

  return ret;
 800aed0:	7dfb      	ldrb	r3, [r7, #23]
}
 800aed2:	4618      	mov	r0, r3
 800aed4:	3718      	adds	r7, #24
 800aed6:	46bd      	mov	sp, r7
 800aed8:	bd80      	pop	{r7, pc}

0800aeda <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800aeda:	b580      	push	{r7, lr}
 800aedc:	b084      	sub	sp, #16
 800aede:	af00      	add	r7, sp, #0
 800aee0:	6078      	str	r0, [r7, #4]
 800aee2:	460b      	mov	r3, r1
 800aee4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aeec:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800aef4:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aefc:	2b00      	cmp	r3, #0
 800aefe:	d03a      	beq.n	800af76 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800af00:	78fa      	ldrb	r2, [r7, #3]
 800af02:	6879      	ldr	r1, [r7, #4]
 800af04:	4613      	mov	r3, r2
 800af06:	009b      	lsls	r3, r3, #2
 800af08:	4413      	add	r3, r2
 800af0a:	009b      	lsls	r3, r3, #2
 800af0c:	440b      	add	r3, r1
 800af0e:	331c      	adds	r3, #28
 800af10:	681b      	ldr	r3, [r3, #0]
 800af12:	2b00      	cmp	r3, #0
 800af14:	d029      	beq.n	800af6a <USBD_CDC_DataIn+0x90>
 800af16:	78fa      	ldrb	r2, [r7, #3]
 800af18:	6879      	ldr	r1, [r7, #4]
 800af1a:	4613      	mov	r3, r2
 800af1c:	009b      	lsls	r3, r3, #2
 800af1e:	4413      	add	r3, r2
 800af20:	009b      	lsls	r3, r3, #2
 800af22:	440b      	add	r3, r1
 800af24:	331c      	adds	r3, #28
 800af26:	681a      	ldr	r2, [r3, #0]
 800af28:	78f9      	ldrb	r1, [r7, #3]
 800af2a:	68b8      	ldr	r0, [r7, #8]
 800af2c:	460b      	mov	r3, r1
 800af2e:	00db      	lsls	r3, r3, #3
 800af30:	1a5b      	subs	r3, r3, r1
 800af32:	009b      	lsls	r3, r3, #2
 800af34:	4403      	add	r3, r0
 800af36:	3344      	adds	r3, #68	; 0x44
 800af38:	681b      	ldr	r3, [r3, #0]
 800af3a:	fbb2 f1f3 	udiv	r1, r2, r3
 800af3e:	fb03 f301 	mul.w	r3, r3, r1
 800af42:	1ad3      	subs	r3, r2, r3
 800af44:	2b00      	cmp	r3, #0
 800af46:	d110      	bne.n	800af6a <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 800af48:	78fa      	ldrb	r2, [r7, #3]
 800af4a:	6879      	ldr	r1, [r7, #4]
 800af4c:	4613      	mov	r3, r2
 800af4e:	009b      	lsls	r3, r3, #2
 800af50:	4413      	add	r3, r2
 800af52:	009b      	lsls	r3, r3, #2
 800af54:	440b      	add	r3, r1
 800af56:	331c      	adds	r3, #28
 800af58:	2200      	movs	r2, #0
 800af5a:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800af5c:	78f9      	ldrb	r1, [r7, #3]
 800af5e:	2300      	movs	r3, #0
 800af60:	2200      	movs	r2, #0
 800af62:	6878      	ldr	r0, [r7, #4]
 800af64:	f001 fe8c 	bl	800cc80 <USBD_LL_Transmit>
 800af68:	e003      	b.n	800af72 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 800af6a:	68fb      	ldr	r3, [r7, #12]
 800af6c:	2200      	movs	r2, #0
 800af6e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 800af72:	2300      	movs	r3, #0
 800af74:	e000      	b.n	800af78 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 800af76:	2302      	movs	r3, #2
  }
}
 800af78:	4618      	mov	r0, r3
 800af7a:	3710      	adds	r7, #16
 800af7c:	46bd      	mov	sp, r7
 800af7e:	bd80      	pop	{r7, pc}

0800af80 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800af80:	b580      	push	{r7, lr}
 800af82:	b084      	sub	sp, #16
 800af84:	af00      	add	r7, sp, #0
 800af86:	6078      	str	r0, [r7, #4]
 800af88:	460b      	mov	r3, r1
 800af8a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800af92:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800af94:	78fb      	ldrb	r3, [r7, #3]
 800af96:	4619      	mov	r1, r3
 800af98:	6878      	ldr	r0, [r7, #4]
 800af9a:	f001 feb7 	bl	800cd0c <USBD_LL_GetRxDataSize>
 800af9e:	4602      	mov	r2, r0
 800afa0:	68fb      	ldr	r3, [r7, #12]
 800afa2:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800afac:	2b00      	cmp	r3, #0
 800afae:	d00d      	beq.n	800afcc <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800afb6:	68db      	ldr	r3, [r3, #12]
 800afb8:	68fa      	ldr	r2, [r7, #12]
 800afba:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800afbe:	68fa      	ldr	r2, [r7, #12]
 800afc0:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800afc4:	4611      	mov	r1, r2
 800afc6:	4798      	blx	r3

    return USBD_OK;
 800afc8:	2300      	movs	r3, #0
 800afca:	e000      	b.n	800afce <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 800afcc:	2302      	movs	r3, #2
  }
}
 800afce:	4618      	mov	r0, r3
 800afd0:	3710      	adds	r7, #16
 800afd2:	46bd      	mov	sp, r7
 800afd4:	bd80      	pop	{r7, pc}

0800afd6 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800afd6:	b580      	push	{r7, lr}
 800afd8:	b084      	sub	sp, #16
 800afda:	af00      	add	r7, sp, #0
 800afdc:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800afe4:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800afec:	2b00      	cmp	r3, #0
 800afee:	d015      	beq.n	800b01c <USBD_CDC_EP0_RxReady+0x46>
 800aff0:	68fb      	ldr	r3, [r7, #12]
 800aff2:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800aff6:	2bff      	cmp	r3, #255	; 0xff
 800aff8:	d010      	beq.n	800b01c <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b000:	689b      	ldr	r3, [r3, #8]
 800b002:	68fa      	ldr	r2, [r7, #12]
 800b004:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 800b008:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800b00a:	68fa      	ldr	r2, [r7, #12]
 800b00c:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800b010:	b292      	uxth	r2, r2
 800b012:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800b014:	68fb      	ldr	r3, [r7, #12]
 800b016:	22ff      	movs	r2, #255	; 0xff
 800b018:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 800b01c:	2300      	movs	r3, #0
}
 800b01e:	4618      	mov	r0, r3
 800b020:	3710      	adds	r7, #16
 800b022:	46bd      	mov	sp, r7
 800b024:	bd80      	pop	{r7, pc}
	...

0800b028 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800b028:	b480      	push	{r7}
 800b02a:	b083      	sub	sp, #12
 800b02c:	af00      	add	r7, sp, #0
 800b02e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	2243      	movs	r2, #67	; 0x43
 800b034:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 800b036:	4b03      	ldr	r3, [pc, #12]	; (800b044 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800b038:	4618      	mov	r0, r3
 800b03a:	370c      	adds	r7, #12
 800b03c:	46bd      	mov	sp, r7
 800b03e:	bc80      	pop	{r7}
 800b040:	4770      	bx	lr
 800b042:	bf00      	nop
 800b044:	200000b8 	.word	0x200000b8

0800b048 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800b048:	b480      	push	{r7}
 800b04a:	b083      	sub	sp, #12
 800b04c:	af00      	add	r7, sp, #0
 800b04e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	2243      	movs	r2, #67	; 0x43
 800b054:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 800b056:	4b03      	ldr	r3, [pc, #12]	; (800b064 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800b058:	4618      	mov	r0, r3
 800b05a:	370c      	adds	r7, #12
 800b05c:	46bd      	mov	sp, r7
 800b05e:	bc80      	pop	{r7}
 800b060:	4770      	bx	lr
 800b062:	bf00      	nop
 800b064:	20000074 	.word	0x20000074

0800b068 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800b068:	b480      	push	{r7}
 800b06a:	b083      	sub	sp, #12
 800b06c:	af00      	add	r7, sp, #0
 800b06e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	2243      	movs	r2, #67	; 0x43
 800b074:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 800b076:	4b03      	ldr	r3, [pc, #12]	; (800b084 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800b078:	4618      	mov	r0, r3
 800b07a:	370c      	adds	r7, #12
 800b07c:	46bd      	mov	sp, r7
 800b07e:	bc80      	pop	{r7}
 800b080:	4770      	bx	lr
 800b082:	bf00      	nop
 800b084:	200000fc 	.word	0x200000fc

0800b088 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800b088:	b480      	push	{r7}
 800b08a:	b083      	sub	sp, #12
 800b08c:	af00      	add	r7, sp, #0
 800b08e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	220a      	movs	r2, #10
 800b094:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800b096:	4b03      	ldr	r3, [pc, #12]	; (800b0a4 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800b098:	4618      	mov	r0, r3
 800b09a:	370c      	adds	r7, #12
 800b09c:	46bd      	mov	sp, r7
 800b09e:	bc80      	pop	{r7}
 800b0a0:	4770      	bx	lr
 800b0a2:	bf00      	nop
 800b0a4:	20000030 	.word	0x20000030

0800b0a8 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 800b0a8:	b480      	push	{r7}
 800b0aa:	b085      	sub	sp, #20
 800b0ac:	af00      	add	r7, sp, #0
 800b0ae:	6078      	str	r0, [r7, #4]
 800b0b0:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800b0b2:	2302      	movs	r3, #2
 800b0b4:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 800b0b6:	683b      	ldr	r3, [r7, #0]
 800b0b8:	2b00      	cmp	r3, #0
 800b0ba:	d005      	beq.n	800b0c8 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	683a      	ldr	r2, [r7, #0]
 800b0c0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 800b0c4:	2300      	movs	r3, #0
 800b0c6:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800b0c8:	7bfb      	ldrb	r3, [r7, #15]
}
 800b0ca:	4618      	mov	r0, r3
 800b0cc:	3714      	adds	r7, #20
 800b0ce:	46bd      	mov	sp, r7
 800b0d0:	bc80      	pop	{r7}
 800b0d2:	4770      	bx	lr

0800b0d4 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 800b0d4:	b480      	push	{r7}
 800b0d6:	b087      	sub	sp, #28
 800b0d8:	af00      	add	r7, sp, #0
 800b0da:	60f8      	str	r0, [r7, #12]
 800b0dc:	60b9      	str	r1, [r7, #8]
 800b0de:	4613      	mov	r3, r2
 800b0e0:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800b0e2:	68fb      	ldr	r3, [r7, #12]
 800b0e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b0e8:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800b0ea:	697b      	ldr	r3, [r7, #20]
 800b0ec:	68ba      	ldr	r2, [r7, #8]
 800b0ee:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800b0f2:	88fa      	ldrh	r2, [r7, #6]
 800b0f4:	697b      	ldr	r3, [r7, #20]
 800b0f6:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 800b0fa:	2300      	movs	r3, #0
}
 800b0fc:	4618      	mov	r0, r3
 800b0fe:	371c      	adds	r7, #28
 800b100:	46bd      	mov	sp, r7
 800b102:	bc80      	pop	{r7}
 800b104:	4770      	bx	lr

0800b106 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 800b106:	b480      	push	{r7}
 800b108:	b085      	sub	sp, #20
 800b10a:	af00      	add	r7, sp, #0
 800b10c:	6078      	str	r0, [r7, #4]
 800b10e:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b116:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800b118:	68fb      	ldr	r3, [r7, #12]
 800b11a:	683a      	ldr	r2, [r7, #0]
 800b11c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 800b120:	2300      	movs	r3, #0
}
 800b122:	4618      	mov	r0, r3
 800b124:	3714      	adds	r7, #20
 800b126:	46bd      	mov	sp, r7
 800b128:	bc80      	pop	{r7}
 800b12a:	4770      	bx	lr

0800b12c <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800b12c:	b580      	push	{r7, lr}
 800b12e:	b084      	sub	sp, #16
 800b130:	af00      	add	r7, sp, #0
 800b132:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b13a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b142:	2b00      	cmp	r3, #0
 800b144:	d01c      	beq.n	800b180 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 800b146:	68fb      	ldr	r3, [r7, #12]
 800b148:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800b14c:	2b00      	cmp	r3, #0
 800b14e:	d115      	bne.n	800b17c <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 800b150:	68fb      	ldr	r3, [r7, #12]
 800b152:	2201      	movs	r2, #1
 800b154:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800b158:	68fb      	ldr	r3, [r7, #12]
 800b15a:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800b162:	68fb      	ldr	r3, [r7, #12]
 800b164:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 800b168:	68fb      	ldr	r3, [r7, #12]
 800b16a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800b16e:	b29b      	uxth	r3, r3
 800b170:	2181      	movs	r1, #129	; 0x81
 800b172:	6878      	ldr	r0, [r7, #4]
 800b174:	f001 fd84 	bl	800cc80 <USBD_LL_Transmit>

      return USBD_OK;
 800b178:	2300      	movs	r3, #0
 800b17a:	e002      	b.n	800b182 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 800b17c:	2301      	movs	r3, #1
 800b17e:	e000      	b.n	800b182 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 800b180:	2302      	movs	r3, #2
  }
}
 800b182:	4618      	mov	r0, r3
 800b184:	3710      	adds	r7, #16
 800b186:	46bd      	mov	sp, r7
 800b188:	bd80      	pop	{r7, pc}

0800b18a <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800b18a:	b580      	push	{r7, lr}
 800b18c:	b084      	sub	sp, #16
 800b18e:	af00      	add	r7, sp, #0
 800b190:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b198:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b1a0:	2b00      	cmp	r3, #0
 800b1a2:	d017      	beq.n	800b1d4 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	7c1b      	ldrb	r3, [r3, #16]
 800b1a8:	2b00      	cmp	r3, #0
 800b1aa:	d109      	bne.n	800b1c0 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800b1ac:	68fb      	ldr	r3, [r7, #12]
 800b1ae:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b1b2:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b1b6:	2101      	movs	r1, #1
 800b1b8:	6878      	ldr	r0, [r7, #4]
 800b1ba:	f001 fd84 	bl	800ccc6 <USBD_LL_PrepareReceive>
 800b1be:	e007      	b.n	800b1d0 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800b1c0:	68fb      	ldr	r3, [r7, #12]
 800b1c2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b1c6:	2340      	movs	r3, #64	; 0x40
 800b1c8:	2101      	movs	r1, #1
 800b1ca:	6878      	ldr	r0, [r7, #4]
 800b1cc:	f001 fd7b 	bl	800ccc6 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 800b1d0:	2300      	movs	r3, #0
 800b1d2:	e000      	b.n	800b1d6 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 800b1d4:	2302      	movs	r3, #2
  }
}
 800b1d6:	4618      	mov	r0, r3
 800b1d8:	3710      	adds	r7, #16
 800b1da:	46bd      	mov	sp, r7
 800b1dc:	bd80      	pop	{r7, pc}

0800b1de <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800b1de:	b580      	push	{r7, lr}
 800b1e0:	b084      	sub	sp, #16
 800b1e2:	af00      	add	r7, sp, #0
 800b1e4:	60f8      	str	r0, [r7, #12]
 800b1e6:	60b9      	str	r1, [r7, #8]
 800b1e8:	4613      	mov	r3, r2
 800b1ea:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800b1ec:	68fb      	ldr	r3, [r7, #12]
 800b1ee:	2b00      	cmp	r3, #0
 800b1f0:	d101      	bne.n	800b1f6 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800b1f2:	2302      	movs	r3, #2
 800b1f4:	e01a      	b.n	800b22c <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 800b1f6:	68fb      	ldr	r3, [r7, #12]
 800b1f8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b1fc:	2b00      	cmp	r3, #0
 800b1fe:	d003      	beq.n	800b208 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800b200:	68fb      	ldr	r3, [r7, #12]
 800b202:	2200      	movs	r2, #0
 800b204:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800b208:	68bb      	ldr	r3, [r7, #8]
 800b20a:	2b00      	cmp	r3, #0
 800b20c:	d003      	beq.n	800b216 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 800b20e:	68fb      	ldr	r3, [r7, #12]
 800b210:	68ba      	ldr	r2, [r7, #8]
 800b212:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b216:	68fb      	ldr	r3, [r7, #12]
 800b218:	2201      	movs	r2, #1
 800b21a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800b21e:	68fb      	ldr	r3, [r7, #12]
 800b220:	79fa      	ldrb	r2, [r7, #7]
 800b222:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800b224:	68f8      	ldr	r0, [r7, #12]
 800b226:	f001 fbf9 	bl	800ca1c <USBD_LL_Init>

  return USBD_OK;
 800b22a:	2300      	movs	r3, #0
}
 800b22c:	4618      	mov	r0, r3
 800b22e:	3710      	adds	r7, #16
 800b230:	46bd      	mov	sp, r7
 800b232:	bd80      	pop	{r7, pc}

0800b234 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800b234:	b480      	push	{r7}
 800b236:	b085      	sub	sp, #20
 800b238:	af00      	add	r7, sp, #0
 800b23a:	6078      	str	r0, [r7, #4]
 800b23c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 800b23e:	2300      	movs	r3, #0
 800b240:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 800b242:	683b      	ldr	r3, [r7, #0]
 800b244:	2b00      	cmp	r3, #0
 800b246:	d006      	beq.n	800b256 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	683a      	ldr	r2, [r7, #0]
 800b24c:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 800b250:	2300      	movs	r3, #0
 800b252:	73fb      	strb	r3, [r7, #15]
 800b254:	e001      	b.n	800b25a <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800b256:	2302      	movs	r3, #2
 800b258:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800b25a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b25c:	4618      	mov	r0, r3
 800b25e:	3714      	adds	r7, #20
 800b260:	46bd      	mov	sp, r7
 800b262:	bc80      	pop	{r7}
 800b264:	4770      	bx	lr

0800b266 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 800b266:	b580      	push	{r7, lr}
 800b268:	b082      	sub	sp, #8
 800b26a:	af00      	add	r7, sp, #0
 800b26c:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800b26e:	6878      	ldr	r0, [r7, #4]
 800b270:	f001 fc1e 	bl	800cab0 <USBD_LL_Start>

  return USBD_OK;
 800b274:	2300      	movs	r3, #0
}
 800b276:	4618      	mov	r0, r3
 800b278:	3708      	adds	r7, #8
 800b27a:	46bd      	mov	sp, r7
 800b27c:	bd80      	pop	{r7, pc}

0800b27e <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800b27e:	b480      	push	{r7}
 800b280:	b083      	sub	sp, #12
 800b282:	af00      	add	r7, sp, #0
 800b284:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800b286:	2300      	movs	r3, #0
}
 800b288:	4618      	mov	r0, r3
 800b28a:	370c      	adds	r7, #12
 800b28c:	46bd      	mov	sp, r7
 800b28e:	bc80      	pop	{r7}
 800b290:	4770      	bx	lr

0800b292 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800b292:	b580      	push	{r7, lr}
 800b294:	b084      	sub	sp, #16
 800b296:	af00      	add	r7, sp, #0
 800b298:	6078      	str	r0, [r7, #4]
 800b29a:	460b      	mov	r3, r1
 800b29c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800b29e:	2302      	movs	r3, #2
 800b2a0:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b2a8:	2b00      	cmp	r3, #0
 800b2aa:	d00c      	beq.n	800b2c6 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b2b2:	681b      	ldr	r3, [r3, #0]
 800b2b4:	78fa      	ldrb	r2, [r7, #3]
 800b2b6:	4611      	mov	r1, r2
 800b2b8:	6878      	ldr	r0, [r7, #4]
 800b2ba:	4798      	blx	r3
 800b2bc:	4603      	mov	r3, r0
 800b2be:	2b00      	cmp	r3, #0
 800b2c0:	d101      	bne.n	800b2c6 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800b2c2:	2300      	movs	r3, #0
 800b2c4:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800b2c6:	7bfb      	ldrb	r3, [r7, #15]
}
 800b2c8:	4618      	mov	r0, r3
 800b2ca:	3710      	adds	r7, #16
 800b2cc:	46bd      	mov	sp, r7
 800b2ce:	bd80      	pop	{r7, pc}

0800b2d0 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800b2d0:	b580      	push	{r7, lr}
 800b2d2:	b082      	sub	sp, #8
 800b2d4:	af00      	add	r7, sp, #0
 800b2d6:	6078      	str	r0, [r7, #4]
 800b2d8:	460b      	mov	r3, r1
 800b2da:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b2e2:	685b      	ldr	r3, [r3, #4]
 800b2e4:	78fa      	ldrb	r2, [r7, #3]
 800b2e6:	4611      	mov	r1, r2
 800b2e8:	6878      	ldr	r0, [r7, #4]
 800b2ea:	4798      	blx	r3

  return USBD_OK;
 800b2ec:	2300      	movs	r3, #0
}
 800b2ee:	4618      	mov	r0, r3
 800b2f0:	3708      	adds	r7, #8
 800b2f2:	46bd      	mov	sp, r7
 800b2f4:	bd80      	pop	{r7, pc}

0800b2f6 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800b2f6:	b580      	push	{r7, lr}
 800b2f8:	b082      	sub	sp, #8
 800b2fa:	af00      	add	r7, sp, #0
 800b2fc:	6078      	str	r0, [r7, #4]
 800b2fe:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800b306:	6839      	ldr	r1, [r7, #0]
 800b308:	4618      	mov	r0, r3
 800b30a:	f000 ff10 	bl	800c12e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	2201      	movs	r2, #1
 800b312:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800b31c:	461a      	mov	r2, r3
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800b32a:	f003 031f 	and.w	r3, r3, #31
 800b32e:	2b02      	cmp	r3, #2
 800b330:	d016      	beq.n	800b360 <USBD_LL_SetupStage+0x6a>
 800b332:	2b02      	cmp	r3, #2
 800b334:	d81c      	bhi.n	800b370 <USBD_LL_SetupStage+0x7a>
 800b336:	2b00      	cmp	r3, #0
 800b338:	d002      	beq.n	800b340 <USBD_LL_SetupStage+0x4a>
 800b33a:	2b01      	cmp	r3, #1
 800b33c:	d008      	beq.n	800b350 <USBD_LL_SetupStage+0x5a>
 800b33e:	e017      	b.n	800b370 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800b346:	4619      	mov	r1, r3
 800b348:	6878      	ldr	r0, [r7, #4]
 800b34a:	f000 fa03 	bl	800b754 <USBD_StdDevReq>
      break;
 800b34e:	e01a      	b.n	800b386 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800b356:	4619      	mov	r1, r3
 800b358:	6878      	ldr	r0, [r7, #4]
 800b35a:	f000 fa65 	bl	800b828 <USBD_StdItfReq>
      break;
 800b35e:	e012      	b.n	800b386 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800b366:	4619      	mov	r1, r3
 800b368:	6878      	ldr	r0, [r7, #4]
 800b36a:	f000 faa5 	bl	800b8b8 <USBD_StdEPReq>
      break;
 800b36e:	e00a      	b.n	800b386 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800b376:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800b37a:	b2db      	uxtb	r3, r3
 800b37c:	4619      	mov	r1, r3
 800b37e:	6878      	ldr	r0, [r7, #4]
 800b380:	f001 fbf6 	bl	800cb70 <USBD_LL_StallEP>
      break;
 800b384:	bf00      	nop
  }

  return USBD_OK;
 800b386:	2300      	movs	r3, #0
}
 800b388:	4618      	mov	r0, r3
 800b38a:	3708      	adds	r7, #8
 800b38c:	46bd      	mov	sp, r7
 800b38e:	bd80      	pop	{r7, pc}

0800b390 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800b390:	b580      	push	{r7, lr}
 800b392:	b086      	sub	sp, #24
 800b394:	af00      	add	r7, sp, #0
 800b396:	60f8      	str	r0, [r7, #12]
 800b398:	460b      	mov	r3, r1
 800b39a:	607a      	str	r2, [r7, #4]
 800b39c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800b39e:	7afb      	ldrb	r3, [r7, #11]
 800b3a0:	2b00      	cmp	r3, #0
 800b3a2:	d14b      	bne.n	800b43c <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 800b3a4:	68fb      	ldr	r3, [r7, #12]
 800b3a6:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800b3aa:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800b3ac:	68fb      	ldr	r3, [r7, #12]
 800b3ae:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800b3b2:	2b03      	cmp	r3, #3
 800b3b4:	d134      	bne.n	800b420 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 800b3b6:	697b      	ldr	r3, [r7, #20]
 800b3b8:	68da      	ldr	r2, [r3, #12]
 800b3ba:	697b      	ldr	r3, [r7, #20]
 800b3bc:	691b      	ldr	r3, [r3, #16]
 800b3be:	429a      	cmp	r2, r3
 800b3c0:	d919      	bls.n	800b3f6 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 800b3c2:	697b      	ldr	r3, [r7, #20]
 800b3c4:	68da      	ldr	r2, [r3, #12]
 800b3c6:	697b      	ldr	r3, [r7, #20]
 800b3c8:	691b      	ldr	r3, [r3, #16]
 800b3ca:	1ad2      	subs	r2, r2, r3
 800b3cc:	697b      	ldr	r3, [r7, #20]
 800b3ce:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800b3d0:	697b      	ldr	r3, [r7, #20]
 800b3d2:	68da      	ldr	r2, [r3, #12]
 800b3d4:	697b      	ldr	r3, [r7, #20]
 800b3d6:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800b3d8:	429a      	cmp	r2, r3
 800b3da:	d203      	bcs.n	800b3e4 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800b3dc:	697b      	ldr	r3, [r7, #20]
 800b3de:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 800b3e0:	b29b      	uxth	r3, r3
 800b3e2:	e002      	b.n	800b3ea <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800b3e4:	697b      	ldr	r3, [r7, #20]
 800b3e6:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800b3e8:	b29b      	uxth	r3, r3
 800b3ea:	461a      	mov	r2, r3
 800b3ec:	6879      	ldr	r1, [r7, #4]
 800b3ee:	68f8      	ldr	r0, [r7, #12]
 800b3f0:	f000 ff8f 	bl	800c312 <USBD_CtlContinueRx>
 800b3f4:	e038      	b.n	800b468 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800b3f6:	68fb      	ldr	r3, [r7, #12]
 800b3f8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b3fc:	691b      	ldr	r3, [r3, #16]
 800b3fe:	2b00      	cmp	r3, #0
 800b400:	d00a      	beq.n	800b418 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800b402:	68fb      	ldr	r3, [r7, #12]
 800b404:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800b408:	2b03      	cmp	r3, #3
 800b40a:	d105      	bne.n	800b418 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800b40c:	68fb      	ldr	r3, [r7, #12]
 800b40e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b412:	691b      	ldr	r3, [r3, #16]
 800b414:	68f8      	ldr	r0, [r7, #12]
 800b416:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800b418:	68f8      	ldr	r0, [r7, #12]
 800b41a:	f000 ff8c 	bl	800c336 <USBD_CtlSendStatus>
 800b41e:	e023      	b.n	800b468 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800b420:	68fb      	ldr	r3, [r7, #12]
 800b422:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800b426:	2b05      	cmp	r3, #5
 800b428:	d11e      	bne.n	800b468 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800b42a:	68fb      	ldr	r3, [r7, #12]
 800b42c:	2200      	movs	r2, #0
 800b42e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 800b432:	2100      	movs	r1, #0
 800b434:	68f8      	ldr	r0, [r7, #12]
 800b436:	f001 fb9b 	bl	800cb70 <USBD_LL_StallEP>
 800b43a:	e015      	b.n	800b468 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800b43c:	68fb      	ldr	r3, [r7, #12]
 800b43e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b442:	699b      	ldr	r3, [r3, #24]
 800b444:	2b00      	cmp	r3, #0
 800b446:	d00d      	beq.n	800b464 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800b448:	68fb      	ldr	r3, [r7, #12]
 800b44a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800b44e:	2b03      	cmp	r3, #3
 800b450:	d108      	bne.n	800b464 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800b452:	68fb      	ldr	r3, [r7, #12]
 800b454:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b458:	699b      	ldr	r3, [r3, #24]
 800b45a:	7afa      	ldrb	r2, [r7, #11]
 800b45c:	4611      	mov	r1, r2
 800b45e:	68f8      	ldr	r0, [r7, #12]
 800b460:	4798      	blx	r3
 800b462:	e001      	b.n	800b468 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800b464:	2302      	movs	r3, #2
 800b466:	e000      	b.n	800b46a <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 800b468:	2300      	movs	r3, #0
}
 800b46a:	4618      	mov	r0, r3
 800b46c:	3718      	adds	r7, #24
 800b46e:	46bd      	mov	sp, r7
 800b470:	bd80      	pop	{r7, pc}

0800b472 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800b472:	b580      	push	{r7, lr}
 800b474:	b086      	sub	sp, #24
 800b476:	af00      	add	r7, sp, #0
 800b478:	60f8      	str	r0, [r7, #12]
 800b47a:	460b      	mov	r3, r1
 800b47c:	607a      	str	r2, [r7, #4]
 800b47e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800b480:	7afb      	ldrb	r3, [r7, #11]
 800b482:	2b00      	cmp	r3, #0
 800b484:	d17f      	bne.n	800b586 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 800b486:	68fb      	ldr	r3, [r7, #12]
 800b488:	3314      	adds	r3, #20
 800b48a:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800b48c:	68fb      	ldr	r3, [r7, #12]
 800b48e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800b492:	2b02      	cmp	r3, #2
 800b494:	d15c      	bne.n	800b550 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 800b496:	697b      	ldr	r3, [r7, #20]
 800b498:	68da      	ldr	r2, [r3, #12]
 800b49a:	697b      	ldr	r3, [r7, #20]
 800b49c:	691b      	ldr	r3, [r3, #16]
 800b49e:	429a      	cmp	r2, r3
 800b4a0:	d915      	bls.n	800b4ce <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 800b4a2:	697b      	ldr	r3, [r7, #20]
 800b4a4:	68da      	ldr	r2, [r3, #12]
 800b4a6:	697b      	ldr	r3, [r7, #20]
 800b4a8:	691b      	ldr	r3, [r3, #16]
 800b4aa:	1ad2      	subs	r2, r2, r3
 800b4ac:	697b      	ldr	r3, [r7, #20]
 800b4ae:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 800b4b0:	697b      	ldr	r3, [r7, #20]
 800b4b2:	68db      	ldr	r3, [r3, #12]
 800b4b4:	b29b      	uxth	r3, r3
 800b4b6:	461a      	mov	r2, r3
 800b4b8:	6879      	ldr	r1, [r7, #4]
 800b4ba:	68f8      	ldr	r0, [r7, #12]
 800b4bc:	f000 fef9 	bl	800c2b2 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b4c0:	2300      	movs	r3, #0
 800b4c2:	2200      	movs	r2, #0
 800b4c4:	2100      	movs	r1, #0
 800b4c6:	68f8      	ldr	r0, [r7, #12]
 800b4c8:	f001 fbfd 	bl	800ccc6 <USBD_LL_PrepareReceive>
 800b4cc:	e04e      	b.n	800b56c <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800b4ce:	697b      	ldr	r3, [r7, #20]
 800b4d0:	689b      	ldr	r3, [r3, #8]
 800b4d2:	697a      	ldr	r2, [r7, #20]
 800b4d4:	6912      	ldr	r2, [r2, #16]
 800b4d6:	fbb3 f1f2 	udiv	r1, r3, r2
 800b4da:	fb02 f201 	mul.w	r2, r2, r1
 800b4de:	1a9b      	subs	r3, r3, r2
 800b4e0:	2b00      	cmp	r3, #0
 800b4e2:	d11c      	bne.n	800b51e <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 800b4e4:	697b      	ldr	r3, [r7, #20]
 800b4e6:	689a      	ldr	r2, [r3, #8]
 800b4e8:	697b      	ldr	r3, [r7, #20]
 800b4ea:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800b4ec:	429a      	cmp	r2, r3
 800b4ee:	d316      	bcc.n	800b51e <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 800b4f0:	697b      	ldr	r3, [r7, #20]
 800b4f2:	689a      	ldr	r2, [r3, #8]
 800b4f4:	68fb      	ldr	r3, [r7, #12]
 800b4f6:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800b4fa:	429a      	cmp	r2, r3
 800b4fc:	d20f      	bcs.n	800b51e <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800b4fe:	2200      	movs	r2, #0
 800b500:	2100      	movs	r1, #0
 800b502:	68f8      	ldr	r0, [r7, #12]
 800b504:	f000 fed5 	bl	800c2b2 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800b508:	68fb      	ldr	r3, [r7, #12]
 800b50a:	2200      	movs	r2, #0
 800b50c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b510:	2300      	movs	r3, #0
 800b512:	2200      	movs	r2, #0
 800b514:	2100      	movs	r1, #0
 800b516:	68f8      	ldr	r0, [r7, #12]
 800b518:	f001 fbd5 	bl	800ccc6 <USBD_LL_PrepareReceive>
 800b51c:	e026      	b.n	800b56c <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800b51e:	68fb      	ldr	r3, [r7, #12]
 800b520:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b524:	68db      	ldr	r3, [r3, #12]
 800b526:	2b00      	cmp	r3, #0
 800b528:	d00a      	beq.n	800b540 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800b52a:	68fb      	ldr	r3, [r7, #12]
 800b52c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800b530:	2b03      	cmp	r3, #3
 800b532:	d105      	bne.n	800b540 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800b534:	68fb      	ldr	r3, [r7, #12]
 800b536:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b53a:	68db      	ldr	r3, [r3, #12]
 800b53c:	68f8      	ldr	r0, [r7, #12]
 800b53e:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800b540:	2180      	movs	r1, #128	; 0x80
 800b542:	68f8      	ldr	r0, [r7, #12]
 800b544:	f001 fb14 	bl	800cb70 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800b548:	68f8      	ldr	r0, [r7, #12]
 800b54a:	f000 ff07 	bl	800c35c <USBD_CtlReceiveStatus>
 800b54e:	e00d      	b.n	800b56c <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800b550:	68fb      	ldr	r3, [r7, #12]
 800b552:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800b556:	2b04      	cmp	r3, #4
 800b558:	d004      	beq.n	800b564 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800b55a:	68fb      	ldr	r3, [r7, #12]
 800b55c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800b560:	2b00      	cmp	r3, #0
 800b562:	d103      	bne.n	800b56c <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800b564:	2180      	movs	r1, #128	; 0x80
 800b566:	68f8      	ldr	r0, [r7, #12]
 800b568:	f001 fb02 	bl	800cb70 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800b56c:	68fb      	ldr	r3, [r7, #12]
 800b56e:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800b572:	2b01      	cmp	r3, #1
 800b574:	d11d      	bne.n	800b5b2 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 800b576:	68f8      	ldr	r0, [r7, #12]
 800b578:	f7ff fe81 	bl	800b27e <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800b57c:	68fb      	ldr	r3, [r7, #12]
 800b57e:	2200      	movs	r2, #0
 800b580:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800b584:	e015      	b.n	800b5b2 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800b586:	68fb      	ldr	r3, [r7, #12]
 800b588:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b58c:	695b      	ldr	r3, [r3, #20]
 800b58e:	2b00      	cmp	r3, #0
 800b590:	d00d      	beq.n	800b5ae <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800b592:	68fb      	ldr	r3, [r7, #12]
 800b594:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800b598:	2b03      	cmp	r3, #3
 800b59a:	d108      	bne.n	800b5ae <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800b59c:	68fb      	ldr	r3, [r7, #12]
 800b59e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b5a2:	695b      	ldr	r3, [r3, #20]
 800b5a4:	7afa      	ldrb	r2, [r7, #11]
 800b5a6:	4611      	mov	r1, r2
 800b5a8:	68f8      	ldr	r0, [r7, #12]
 800b5aa:	4798      	blx	r3
 800b5ac:	e001      	b.n	800b5b2 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800b5ae:	2302      	movs	r3, #2
 800b5b0:	e000      	b.n	800b5b4 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800b5b2:	2300      	movs	r3, #0
}
 800b5b4:	4618      	mov	r0, r3
 800b5b6:	3718      	adds	r7, #24
 800b5b8:	46bd      	mov	sp, r7
 800b5ba:	bd80      	pop	{r7, pc}

0800b5bc <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800b5bc:	b580      	push	{r7, lr}
 800b5be:	b082      	sub	sp, #8
 800b5c0:	af00      	add	r7, sp, #0
 800b5c2:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b5c4:	2340      	movs	r3, #64	; 0x40
 800b5c6:	2200      	movs	r2, #0
 800b5c8:	2100      	movs	r1, #0
 800b5ca:	6878      	ldr	r0, [r7, #4]
 800b5cc:	f001 fa8b 	bl	800cae6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	2201      	movs	r2, #1
 800b5d4:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	2240      	movs	r2, #64	; 0x40
 800b5dc:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b5e0:	2340      	movs	r3, #64	; 0x40
 800b5e2:	2200      	movs	r2, #0
 800b5e4:	2180      	movs	r1, #128	; 0x80
 800b5e6:	6878      	ldr	r0, [r7, #4]
 800b5e8:	f001 fa7d 	bl	800cae6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	2201      	movs	r2, #1
 800b5f0:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	2240      	movs	r2, #64	; 0x40
 800b5f6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	2201      	movs	r2, #1
 800b5fc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	2200      	movs	r2, #0
 800b604:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	2200      	movs	r2, #0
 800b60c:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800b60e:	687b      	ldr	r3, [r7, #4]
 800b610:	2200      	movs	r2, #0
 800b612:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b61c:	2b00      	cmp	r3, #0
 800b61e:	d009      	beq.n	800b634 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b626:	685b      	ldr	r3, [r3, #4]
 800b628:	687a      	ldr	r2, [r7, #4]
 800b62a:	6852      	ldr	r2, [r2, #4]
 800b62c:	b2d2      	uxtb	r2, r2
 800b62e:	4611      	mov	r1, r2
 800b630:	6878      	ldr	r0, [r7, #4]
 800b632:	4798      	blx	r3
  }

  return USBD_OK;
 800b634:	2300      	movs	r3, #0
}
 800b636:	4618      	mov	r0, r3
 800b638:	3708      	adds	r7, #8
 800b63a:	46bd      	mov	sp, r7
 800b63c:	bd80      	pop	{r7, pc}

0800b63e <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800b63e:	b480      	push	{r7}
 800b640:	b083      	sub	sp, #12
 800b642:	af00      	add	r7, sp, #0
 800b644:	6078      	str	r0, [r7, #4]
 800b646:	460b      	mov	r3, r1
 800b648:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	78fa      	ldrb	r2, [r7, #3]
 800b64e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800b650:	2300      	movs	r3, #0
}
 800b652:	4618      	mov	r0, r3
 800b654:	370c      	adds	r7, #12
 800b656:	46bd      	mov	sp, r7
 800b658:	bc80      	pop	{r7}
 800b65a:	4770      	bx	lr

0800b65c <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800b65c:	b480      	push	{r7}
 800b65e:	b083      	sub	sp, #12
 800b660:	af00      	add	r7, sp, #0
 800b662:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800b670:	687b      	ldr	r3, [r7, #4]
 800b672:	2204      	movs	r2, #4
 800b674:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800b678:	2300      	movs	r3, #0
}
 800b67a:	4618      	mov	r0, r3
 800b67c:	370c      	adds	r7, #12
 800b67e:	46bd      	mov	sp, r7
 800b680:	bc80      	pop	{r7}
 800b682:	4770      	bx	lr

0800b684 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800b684:	b480      	push	{r7}
 800b686:	b083      	sub	sp, #12
 800b688:	af00      	add	r7, sp, #0
 800b68a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b692:	2b04      	cmp	r3, #4
 800b694:	d105      	bne.n	800b6a2 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800b696:	687b      	ldr	r3, [r7, #4]
 800b698:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800b6a2:	2300      	movs	r3, #0
}
 800b6a4:	4618      	mov	r0, r3
 800b6a6:	370c      	adds	r7, #12
 800b6a8:	46bd      	mov	sp, r7
 800b6aa:	bc80      	pop	{r7}
 800b6ac:	4770      	bx	lr

0800b6ae <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800b6ae:	b580      	push	{r7, lr}
 800b6b0:	b082      	sub	sp, #8
 800b6b2:	af00      	add	r7, sp, #0
 800b6b4:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b6bc:	2b03      	cmp	r3, #3
 800b6be:	d10b      	bne.n	800b6d8 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b6c6:	69db      	ldr	r3, [r3, #28]
 800b6c8:	2b00      	cmp	r3, #0
 800b6ca:	d005      	beq.n	800b6d8 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b6d2:	69db      	ldr	r3, [r3, #28]
 800b6d4:	6878      	ldr	r0, [r7, #4]
 800b6d6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800b6d8:	2300      	movs	r3, #0
}
 800b6da:	4618      	mov	r0, r3
 800b6dc:	3708      	adds	r7, #8
 800b6de:	46bd      	mov	sp, r7
 800b6e0:	bd80      	pop	{r7, pc}

0800b6e2 <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800b6e2:	b480      	push	{r7}
 800b6e4:	b083      	sub	sp, #12
 800b6e6:	af00      	add	r7, sp, #0
 800b6e8:	6078      	str	r0, [r7, #4]
 800b6ea:	460b      	mov	r3, r1
 800b6ec:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800b6ee:	2300      	movs	r3, #0
}
 800b6f0:	4618      	mov	r0, r3
 800b6f2:	370c      	adds	r7, #12
 800b6f4:	46bd      	mov	sp, r7
 800b6f6:	bc80      	pop	{r7}
 800b6f8:	4770      	bx	lr

0800b6fa <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800b6fa:	b480      	push	{r7}
 800b6fc:	b083      	sub	sp, #12
 800b6fe:	af00      	add	r7, sp, #0
 800b700:	6078      	str	r0, [r7, #4]
 800b702:	460b      	mov	r3, r1
 800b704:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800b706:	2300      	movs	r3, #0
}
 800b708:	4618      	mov	r0, r3
 800b70a:	370c      	adds	r7, #12
 800b70c:	46bd      	mov	sp, r7
 800b70e:	bc80      	pop	{r7}
 800b710:	4770      	bx	lr

0800b712 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800b712:	b480      	push	{r7}
 800b714:	b083      	sub	sp, #12
 800b716:	af00      	add	r7, sp, #0
 800b718:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800b71a:	2300      	movs	r3, #0
}
 800b71c:	4618      	mov	r0, r3
 800b71e:	370c      	adds	r7, #12
 800b720:	46bd      	mov	sp, r7
 800b722:	bc80      	pop	{r7}
 800b724:	4770      	bx	lr

0800b726 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800b726:	b580      	push	{r7, lr}
 800b728:	b082      	sub	sp, #8
 800b72a:	af00      	add	r7, sp, #0
 800b72c:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b72e:	687b      	ldr	r3, [r7, #4]
 800b730:	2201      	movs	r2, #1
 800b732:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800b736:	687b      	ldr	r3, [r7, #4]
 800b738:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b73c:	685b      	ldr	r3, [r3, #4]
 800b73e:	687a      	ldr	r2, [r7, #4]
 800b740:	6852      	ldr	r2, [r2, #4]
 800b742:	b2d2      	uxtb	r2, r2
 800b744:	4611      	mov	r1, r2
 800b746:	6878      	ldr	r0, [r7, #4]
 800b748:	4798      	blx	r3

  return USBD_OK;
 800b74a:	2300      	movs	r3, #0
}
 800b74c:	4618      	mov	r0, r3
 800b74e:	3708      	adds	r7, #8
 800b750:	46bd      	mov	sp, r7
 800b752:	bd80      	pop	{r7, pc}

0800b754 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 800b754:	b580      	push	{r7, lr}
 800b756:	b084      	sub	sp, #16
 800b758:	af00      	add	r7, sp, #0
 800b75a:	6078      	str	r0, [r7, #4]
 800b75c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b75e:	2300      	movs	r3, #0
 800b760:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b762:	683b      	ldr	r3, [r7, #0]
 800b764:	781b      	ldrb	r3, [r3, #0]
 800b766:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b76a:	2b40      	cmp	r3, #64	; 0x40
 800b76c:	d005      	beq.n	800b77a <USBD_StdDevReq+0x26>
 800b76e:	2b40      	cmp	r3, #64	; 0x40
 800b770:	d84f      	bhi.n	800b812 <USBD_StdDevReq+0xbe>
 800b772:	2b00      	cmp	r3, #0
 800b774:	d009      	beq.n	800b78a <USBD_StdDevReq+0x36>
 800b776:	2b20      	cmp	r3, #32
 800b778:	d14b      	bne.n	800b812 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800b77a:	687b      	ldr	r3, [r7, #4]
 800b77c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b780:	689b      	ldr	r3, [r3, #8]
 800b782:	6839      	ldr	r1, [r7, #0]
 800b784:	6878      	ldr	r0, [r7, #4]
 800b786:	4798      	blx	r3
      break;
 800b788:	e048      	b.n	800b81c <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b78a:	683b      	ldr	r3, [r7, #0]
 800b78c:	785b      	ldrb	r3, [r3, #1]
 800b78e:	2b09      	cmp	r3, #9
 800b790:	d839      	bhi.n	800b806 <USBD_StdDevReq+0xb2>
 800b792:	a201      	add	r2, pc, #4	; (adr r2, 800b798 <USBD_StdDevReq+0x44>)
 800b794:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b798:	0800b7e9 	.word	0x0800b7e9
 800b79c:	0800b7fd 	.word	0x0800b7fd
 800b7a0:	0800b807 	.word	0x0800b807
 800b7a4:	0800b7f3 	.word	0x0800b7f3
 800b7a8:	0800b807 	.word	0x0800b807
 800b7ac:	0800b7cb 	.word	0x0800b7cb
 800b7b0:	0800b7c1 	.word	0x0800b7c1
 800b7b4:	0800b807 	.word	0x0800b807
 800b7b8:	0800b7df 	.word	0x0800b7df
 800b7bc:	0800b7d5 	.word	0x0800b7d5
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800b7c0:	6839      	ldr	r1, [r7, #0]
 800b7c2:	6878      	ldr	r0, [r7, #4]
 800b7c4:	f000 f9dc 	bl	800bb80 <USBD_GetDescriptor>
          break;
 800b7c8:	e022      	b.n	800b810 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800b7ca:	6839      	ldr	r1, [r7, #0]
 800b7cc:	6878      	ldr	r0, [r7, #4]
 800b7ce:	f000 fb3f 	bl	800be50 <USBD_SetAddress>
          break;
 800b7d2:	e01d      	b.n	800b810 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 800b7d4:	6839      	ldr	r1, [r7, #0]
 800b7d6:	6878      	ldr	r0, [r7, #4]
 800b7d8:	f000 fb7e 	bl	800bed8 <USBD_SetConfig>
          break;
 800b7dc:	e018      	b.n	800b810 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800b7de:	6839      	ldr	r1, [r7, #0]
 800b7e0:	6878      	ldr	r0, [r7, #4]
 800b7e2:	f000 fc07 	bl	800bff4 <USBD_GetConfig>
          break;
 800b7e6:	e013      	b.n	800b810 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800b7e8:	6839      	ldr	r1, [r7, #0]
 800b7ea:	6878      	ldr	r0, [r7, #4]
 800b7ec:	f000 fc37 	bl	800c05e <USBD_GetStatus>
          break;
 800b7f0:	e00e      	b.n	800b810 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800b7f2:	6839      	ldr	r1, [r7, #0]
 800b7f4:	6878      	ldr	r0, [r7, #4]
 800b7f6:	f000 fc65 	bl	800c0c4 <USBD_SetFeature>
          break;
 800b7fa:	e009      	b.n	800b810 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800b7fc:	6839      	ldr	r1, [r7, #0]
 800b7fe:	6878      	ldr	r0, [r7, #4]
 800b800:	f000 fc74 	bl	800c0ec <USBD_ClrFeature>
          break;
 800b804:	e004      	b.n	800b810 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 800b806:	6839      	ldr	r1, [r7, #0]
 800b808:	6878      	ldr	r0, [r7, #4]
 800b80a:	f000 fccc 	bl	800c1a6 <USBD_CtlError>
          break;
 800b80e:	bf00      	nop
      }
      break;
 800b810:	e004      	b.n	800b81c <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 800b812:	6839      	ldr	r1, [r7, #0]
 800b814:	6878      	ldr	r0, [r7, #4]
 800b816:	f000 fcc6 	bl	800c1a6 <USBD_CtlError>
      break;
 800b81a:	bf00      	nop
  }

  return ret;
 800b81c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b81e:	4618      	mov	r0, r3
 800b820:	3710      	adds	r7, #16
 800b822:	46bd      	mov	sp, r7
 800b824:	bd80      	pop	{r7, pc}
 800b826:	bf00      	nop

0800b828 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 800b828:	b580      	push	{r7, lr}
 800b82a:	b084      	sub	sp, #16
 800b82c:	af00      	add	r7, sp, #0
 800b82e:	6078      	str	r0, [r7, #4]
 800b830:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b832:	2300      	movs	r3, #0
 800b834:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b836:	683b      	ldr	r3, [r7, #0]
 800b838:	781b      	ldrb	r3, [r3, #0]
 800b83a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b83e:	2b40      	cmp	r3, #64	; 0x40
 800b840:	d005      	beq.n	800b84e <USBD_StdItfReq+0x26>
 800b842:	2b40      	cmp	r3, #64	; 0x40
 800b844:	d82e      	bhi.n	800b8a4 <USBD_StdItfReq+0x7c>
 800b846:	2b00      	cmp	r3, #0
 800b848:	d001      	beq.n	800b84e <USBD_StdItfReq+0x26>
 800b84a:	2b20      	cmp	r3, #32
 800b84c:	d12a      	bne.n	800b8a4 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b854:	3b01      	subs	r3, #1
 800b856:	2b02      	cmp	r3, #2
 800b858:	d81d      	bhi.n	800b896 <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800b85a:	683b      	ldr	r3, [r7, #0]
 800b85c:	889b      	ldrh	r3, [r3, #4]
 800b85e:	b2db      	uxtb	r3, r3
 800b860:	2b01      	cmp	r3, #1
 800b862:	d813      	bhi.n	800b88c <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b86a:	689b      	ldr	r3, [r3, #8]
 800b86c:	6839      	ldr	r1, [r7, #0]
 800b86e:	6878      	ldr	r0, [r7, #4]
 800b870:	4798      	blx	r3
 800b872:	4603      	mov	r3, r0
 800b874:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800b876:	683b      	ldr	r3, [r7, #0]
 800b878:	88db      	ldrh	r3, [r3, #6]
 800b87a:	2b00      	cmp	r3, #0
 800b87c:	d110      	bne.n	800b8a0 <USBD_StdItfReq+0x78>
 800b87e:	7bfb      	ldrb	r3, [r7, #15]
 800b880:	2b00      	cmp	r3, #0
 800b882:	d10d      	bne.n	800b8a0 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 800b884:	6878      	ldr	r0, [r7, #4]
 800b886:	f000 fd56 	bl	800c336 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800b88a:	e009      	b.n	800b8a0 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 800b88c:	6839      	ldr	r1, [r7, #0]
 800b88e:	6878      	ldr	r0, [r7, #4]
 800b890:	f000 fc89 	bl	800c1a6 <USBD_CtlError>
          break;
 800b894:	e004      	b.n	800b8a0 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 800b896:	6839      	ldr	r1, [r7, #0]
 800b898:	6878      	ldr	r0, [r7, #4]
 800b89a:	f000 fc84 	bl	800c1a6 <USBD_CtlError>
          break;
 800b89e:	e000      	b.n	800b8a2 <USBD_StdItfReq+0x7a>
          break;
 800b8a0:	bf00      	nop
      }
      break;
 800b8a2:	e004      	b.n	800b8ae <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 800b8a4:	6839      	ldr	r1, [r7, #0]
 800b8a6:	6878      	ldr	r0, [r7, #4]
 800b8a8:	f000 fc7d 	bl	800c1a6 <USBD_CtlError>
      break;
 800b8ac:	bf00      	nop
  }

  return USBD_OK;
 800b8ae:	2300      	movs	r3, #0
}
 800b8b0:	4618      	mov	r0, r3
 800b8b2:	3710      	adds	r7, #16
 800b8b4:	46bd      	mov	sp, r7
 800b8b6:	bd80      	pop	{r7, pc}

0800b8b8 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 800b8b8:	b580      	push	{r7, lr}
 800b8ba:	b084      	sub	sp, #16
 800b8bc:	af00      	add	r7, sp, #0
 800b8be:	6078      	str	r0, [r7, #4]
 800b8c0:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800b8c2:	2300      	movs	r3, #0
 800b8c4:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 800b8c6:	683b      	ldr	r3, [r7, #0]
 800b8c8:	889b      	ldrh	r3, [r3, #4]
 800b8ca:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b8cc:	683b      	ldr	r3, [r7, #0]
 800b8ce:	781b      	ldrb	r3, [r3, #0]
 800b8d0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b8d4:	2b40      	cmp	r3, #64	; 0x40
 800b8d6:	d007      	beq.n	800b8e8 <USBD_StdEPReq+0x30>
 800b8d8:	2b40      	cmp	r3, #64	; 0x40
 800b8da:	f200 8146 	bhi.w	800bb6a <USBD_StdEPReq+0x2b2>
 800b8de:	2b00      	cmp	r3, #0
 800b8e0:	d00a      	beq.n	800b8f8 <USBD_StdEPReq+0x40>
 800b8e2:	2b20      	cmp	r3, #32
 800b8e4:	f040 8141 	bne.w	800bb6a <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b8ee:	689b      	ldr	r3, [r3, #8]
 800b8f0:	6839      	ldr	r1, [r7, #0]
 800b8f2:	6878      	ldr	r0, [r7, #4]
 800b8f4:	4798      	blx	r3
      break;
 800b8f6:	e13d      	b.n	800bb74 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 800b8f8:	683b      	ldr	r3, [r7, #0]
 800b8fa:	781b      	ldrb	r3, [r3, #0]
 800b8fc:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b900:	2b20      	cmp	r3, #32
 800b902:	d10a      	bne.n	800b91a <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b90a:	689b      	ldr	r3, [r3, #8]
 800b90c:	6839      	ldr	r1, [r7, #0]
 800b90e:	6878      	ldr	r0, [r7, #4]
 800b910:	4798      	blx	r3
 800b912:	4603      	mov	r3, r0
 800b914:	73fb      	strb	r3, [r7, #15]

        return ret;
 800b916:	7bfb      	ldrb	r3, [r7, #15]
 800b918:	e12d      	b.n	800bb76 <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 800b91a:	683b      	ldr	r3, [r7, #0]
 800b91c:	785b      	ldrb	r3, [r3, #1]
 800b91e:	2b03      	cmp	r3, #3
 800b920:	d007      	beq.n	800b932 <USBD_StdEPReq+0x7a>
 800b922:	2b03      	cmp	r3, #3
 800b924:	f300 811b 	bgt.w	800bb5e <USBD_StdEPReq+0x2a6>
 800b928:	2b00      	cmp	r3, #0
 800b92a:	d072      	beq.n	800ba12 <USBD_StdEPReq+0x15a>
 800b92c:	2b01      	cmp	r3, #1
 800b92e:	d03a      	beq.n	800b9a6 <USBD_StdEPReq+0xee>
 800b930:	e115      	b.n	800bb5e <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800b932:	687b      	ldr	r3, [r7, #4]
 800b934:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b938:	2b02      	cmp	r3, #2
 800b93a:	d002      	beq.n	800b942 <USBD_StdEPReq+0x8a>
 800b93c:	2b03      	cmp	r3, #3
 800b93e:	d015      	beq.n	800b96c <USBD_StdEPReq+0xb4>
 800b940:	e02b      	b.n	800b99a <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b942:	7bbb      	ldrb	r3, [r7, #14]
 800b944:	2b00      	cmp	r3, #0
 800b946:	d00c      	beq.n	800b962 <USBD_StdEPReq+0xaa>
 800b948:	7bbb      	ldrb	r3, [r7, #14]
 800b94a:	2b80      	cmp	r3, #128	; 0x80
 800b94c:	d009      	beq.n	800b962 <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800b94e:	7bbb      	ldrb	r3, [r7, #14]
 800b950:	4619      	mov	r1, r3
 800b952:	6878      	ldr	r0, [r7, #4]
 800b954:	f001 f90c 	bl	800cb70 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800b958:	2180      	movs	r1, #128	; 0x80
 800b95a:	6878      	ldr	r0, [r7, #4]
 800b95c:	f001 f908 	bl	800cb70 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b960:	e020      	b.n	800b9a4 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 800b962:	6839      	ldr	r1, [r7, #0]
 800b964:	6878      	ldr	r0, [r7, #4]
 800b966:	f000 fc1e 	bl	800c1a6 <USBD_CtlError>
              break;
 800b96a:	e01b      	b.n	800b9a4 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b96c:	683b      	ldr	r3, [r7, #0]
 800b96e:	885b      	ldrh	r3, [r3, #2]
 800b970:	2b00      	cmp	r3, #0
 800b972:	d10e      	bne.n	800b992 <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 800b974:	7bbb      	ldrb	r3, [r7, #14]
 800b976:	2b00      	cmp	r3, #0
 800b978:	d00b      	beq.n	800b992 <USBD_StdEPReq+0xda>
 800b97a:	7bbb      	ldrb	r3, [r7, #14]
 800b97c:	2b80      	cmp	r3, #128	; 0x80
 800b97e:	d008      	beq.n	800b992 <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800b980:	683b      	ldr	r3, [r7, #0]
 800b982:	88db      	ldrh	r3, [r3, #6]
 800b984:	2b00      	cmp	r3, #0
 800b986:	d104      	bne.n	800b992 <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 800b988:	7bbb      	ldrb	r3, [r7, #14]
 800b98a:	4619      	mov	r1, r3
 800b98c:	6878      	ldr	r0, [r7, #4]
 800b98e:	f001 f8ef 	bl	800cb70 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800b992:	6878      	ldr	r0, [r7, #4]
 800b994:	f000 fccf 	bl	800c336 <USBD_CtlSendStatus>

              break;
 800b998:	e004      	b.n	800b9a4 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 800b99a:	6839      	ldr	r1, [r7, #0]
 800b99c:	6878      	ldr	r0, [r7, #4]
 800b99e:	f000 fc02 	bl	800c1a6 <USBD_CtlError>
              break;
 800b9a2:	bf00      	nop
          }
          break;
 800b9a4:	e0e0      	b.n	800bb68 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800b9a6:	687b      	ldr	r3, [r7, #4]
 800b9a8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b9ac:	2b02      	cmp	r3, #2
 800b9ae:	d002      	beq.n	800b9b6 <USBD_StdEPReq+0xfe>
 800b9b0:	2b03      	cmp	r3, #3
 800b9b2:	d015      	beq.n	800b9e0 <USBD_StdEPReq+0x128>
 800b9b4:	e026      	b.n	800ba04 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b9b6:	7bbb      	ldrb	r3, [r7, #14]
 800b9b8:	2b00      	cmp	r3, #0
 800b9ba:	d00c      	beq.n	800b9d6 <USBD_StdEPReq+0x11e>
 800b9bc:	7bbb      	ldrb	r3, [r7, #14]
 800b9be:	2b80      	cmp	r3, #128	; 0x80
 800b9c0:	d009      	beq.n	800b9d6 <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800b9c2:	7bbb      	ldrb	r3, [r7, #14]
 800b9c4:	4619      	mov	r1, r3
 800b9c6:	6878      	ldr	r0, [r7, #4]
 800b9c8:	f001 f8d2 	bl	800cb70 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800b9cc:	2180      	movs	r1, #128	; 0x80
 800b9ce:	6878      	ldr	r0, [r7, #4]
 800b9d0:	f001 f8ce 	bl	800cb70 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b9d4:	e01c      	b.n	800ba10 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 800b9d6:	6839      	ldr	r1, [r7, #0]
 800b9d8:	6878      	ldr	r0, [r7, #4]
 800b9da:	f000 fbe4 	bl	800c1a6 <USBD_CtlError>
              break;
 800b9de:	e017      	b.n	800ba10 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b9e0:	683b      	ldr	r3, [r7, #0]
 800b9e2:	885b      	ldrh	r3, [r3, #2]
 800b9e4:	2b00      	cmp	r3, #0
 800b9e6:	d112      	bne.n	800ba0e <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800b9e8:	7bbb      	ldrb	r3, [r7, #14]
 800b9ea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b9ee:	2b00      	cmp	r3, #0
 800b9f0:	d004      	beq.n	800b9fc <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800b9f2:	7bbb      	ldrb	r3, [r7, #14]
 800b9f4:	4619      	mov	r1, r3
 800b9f6:	6878      	ldr	r0, [r7, #4]
 800b9f8:	f001 f8d9 	bl	800cbae <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 800b9fc:	6878      	ldr	r0, [r7, #4]
 800b9fe:	f000 fc9a 	bl	800c336 <USBD_CtlSendStatus>
              }
              break;
 800ba02:	e004      	b.n	800ba0e <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 800ba04:	6839      	ldr	r1, [r7, #0]
 800ba06:	6878      	ldr	r0, [r7, #4]
 800ba08:	f000 fbcd 	bl	800c1a6 <USBD_CtlError>
              break;
 800ba0c:	e000      	b.n	800ba10 <USBD_StdEPReq+0x158>
              break;
 800ba0e:	bf00      	nop
          }
          break;
 800ba10:	e0aa      	b.n	800bb68 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800ba12:	687b      	ldr	r3, [r7, #4]
 800ba14:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ba18:	2b02      	cmp	r3, #2
 800ba1a:	d002      	beq.n	800ba22 <USBD_StdEPReq+0x16a>
 800ba1c:	2b03      	cmp	r3, #3
 800ba1e:	d032      	beq.n	800ba86 <USBD_StdEPReq+0x1ce>
 800ba20:	e097      	b.n	800bb52 <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ba22:	7bbb      	ldrb	r3, [r7, #14]
 800ba24:	2b00      	cmp	r3, #0
 800ba26:	d007      	beq.n	800ba38 <USBD_StdEPReq+0x180>
 800ba28:	7bbb      	ldrb	r3, [r7, #14]
 800ba2a:	2b80      	cmp	r3, #128	; 0x80
 800ba2c:	d004      	beq.n	800ba38 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 800ba2e:	6839      	ldr	r1, [r7, #0]
 800ba30:	6878      	ldr	r0, [r7, #4]
 800ba32:	f000 fbb8 	bl	800c1a6 <USBD_CtlError>
                break;
 800ba36:	e091      	b.n	800bb5c <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ba38:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ba3c:	2b00      	cmp	r3, #0
 800ba3e:	da0b      	bge.n	800ba58 <USBD_StdEPReq+0x1a0>
 800ba40:	7bbb      	ldrb	r3, [r7, #14]
 800ba42:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ba46:	4613      	mov	r3, r2
 800ba48:	009b      	lsls	r3, r3, #2
 800ba4a:	4413      	add	r3, r2
 800ba4c:	009b      	lsls	r3, r3, #2
 800ba4e:	3310      	adds	r3, #16
 800ba50:	687a      	ldr	r2, [r7, #4]
 800ba52:	4413      	add	r3, r2
 800ba54:	3304      	adds	r3, #4
 800ba56:	e00b      	b.n	800ba70 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800ba58:	7bbb      	ldrb	r3, [r7, #14]
 800ba5a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ba5e:	4613      	mov	r3, r2
 800ba60:	009b      	lsls	r3, r3, #2
 800ba62:	4413      	add	r3, r2
 800ba64:	009b      	lsls	r3, r3, #2
 800ba66:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800ba6a:	687a      	ldr	r2, [r7, #4]
 800ba6c:	4413      	add	r3, r2
 800ba6e:	3304      	adds	r3, #4
 800ba70:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800ba72:	68bb      	ldr	r3, [r7, #8]
 800ba74:	2200      	movs	r2, #0
 800ba76:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800ba78:	68bb      	ldr	r3, [r7, #8]
 800ba7a:	2202      	movs	r2, #2
 800ba7c:	4619      	mov	r1, r3
 800ba7e:	6878      	ldr	r0, [r7, #4]
 800ba80:	f000 fbfb 	bl	800c27a <USBD_CtlSendData>
              break;
 800ba84:	e06a      	b.n	800bb5c <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800ba86:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ba8a:	2b00      	cmp	r3, #0
 800ba8c:	da11      	bge.n	800bab2 <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800ba8e:	7bbb      	ldrb	r3, [r7, #14]
 800ba90:	f003 020f 	and.w	r2, r3, #15
 800ba94:	6879      	ldr	r1, [r7, #4]
 800ba96:	4613      	mov	r3, r2
 800ba98:	009b      	lsls	r3, r3, #2
 800ba9a:	4413      	add	r3, r2
 800ba9c:	009b      	lsls	r3, r3, #2
 800ba9e:	440b      	add	r3, r1
 800baa0:	3318      	adds	r3, #24
 800baa2:	681b      	ldr	r3, [r3, #0]
 800baa4:	2b00      	cmp	r3, #0
 800baa6:	d117      	bne.n	800bad8 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800baa8:	6839      	ldr	r1, [r7, #0]
 800baaa:	6878      	ldr	r0, [r7, #4]
 800baac:	f000 fb7b 	bl	800c1a6 <USBD_CtlError>
                  break;
 800bab0:	e054      	b.n	800bb5c <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800bab2:	7bbb      	ldrb	r3, [r7, #14]
 800bab4:	f003 020f 	and.w	r2, r3, #15
 800bab8:	6879      	ldr	r1, [r7, #4]
 800baba:	4613      	mov	r3, r2
 800babc:	009b      	lsls	r3, r3, #2
 800babe:	4413      	add	r3, r2
 800bac0:	009b      	lsls	r3, r3, #2
 800bac2:	440b      	add	r3, r1
 800bac4:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 800bac8:	681b      	ldr	r3, [r3, #0]
 800baca:	2b00      	cmp	r3, #0
 800bacc:	d104      	bne.n	800bad8 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800bace:	6839      	ldr	r1, [r7, #0]
 800bad0:	6878      	ldr	r0, [r7, #4]
 800bad2:	f000 fb68 	bl	800c1a6 <USBD_CtlError>
                  break;
 800bad6:	e041      	b.n	800bb5c <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800bad8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800badc:	2b00      	cmp	r3, #0
 800bade:	da0b      	bge.n	800baf8 <USBD_StdEPReq+0x240>
 800bae0:	7bbb      	ldrb	r3, [r7, #14]
 800bae2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800bae6:	4613      	mov	r3, r2
 800bae8:	009b      	lsls	r3, r3, #2
 800baea:	4413      	add	r3, r2
 800baec:	009b      	lsls	r3, r3, #2
 800baee:	3310      	adds	r3, #16
 800baf0:	687a      	ldr	r2, [r7, #4]
 800baf2:	4413      	add	r3, r2
 800baf4:	3304      	adds	r3, #4
 800baf6:	e00b      	b.n	800bb10 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800baf8:	7bbb      	ldrb	r3, [r7, #14]
 800bafa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800bafe:	4613      	mov	r3, r2
 800bb00:	009b      	lsls	r3, r3, #2
 800bb02:	4413      	add	r3, r2
 800bb04:	009b      	lsls	r3, r3, #2
 800bb06:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800bb0a:	687a      	ldr	r2, [r7, #4]
 800bb0c:	4413      	add	r3, r2
 800bb0e:	3304      	adds	r3, #4
 800bb10:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800bb12:	7bbb      	ldrb	r3, [r7, #14]
 800bb14:	2b00      	cmp	r3, #0
 800bb16:	d002      	beq.n	800bb1e <USBD_StdEPReq+0x266>
 800bb18:	7bbb      	ldrb	r3, [r7, #14]
 800bb1a:	2b80      	cmp	r3, #128	; 0x80
 800bb1c:	d103      	bne.n	800bb26 <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 800bb1e:	68bb      	ldr	r3, [r7, #8]
 800bb20:	2200      	movs	r2, #0
 800bb22:	601a      	str	r2, [r3, #0]
 800bb24:	e00e      	b.n	800bb44 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800bb26:	7bbb      	ldrb	r3, [r7, #14]
 800bb28:	4619      	mov	r1, r3
 800bb2a:	6878      	ldr	r0, [r7, #4]
 800bb2c:	f001 f85e 	bl	800cbec <USBD_LL_IsStallEP>
 800bb30:	4603      	mov	r3, r0
 800bb32:	2b00      	cmp	r3, #0
 800bb34:	d003      	beq.n	800bb3e <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 800bb36:	68bb      	ldr	r3, [r7, #8]
 800bb38:	2201      	movs	r2, #1
 800bb3a:	601a      	str	r2, [r3, #0]
 800bb3c:	e002      	b.n	800bb44 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 800bb3e:	68bb      	ldr	r3, [r7, #8]
 800bb40:	2200      	movs	r2, #0
 800bb42:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800bb44:	68bb      	ldr	r3, [r7, #8]
 800bb46:	2202      	movs	r2, #2
 800bb48:	4619      	mov	r1, r3
 800bb4a:	6878      	ldr	r0, [r7, #4]
 800bb4c:	f000 fb95 	bl	800c27a <USBD_CtlSendData>
              break;
 800bb50:	e004      	b.n	800bb5c <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 800bb52:	6839      	ldr	r1, [r7, #0]
 800bb54:	6878      	ldr	r0, [r7, #4]
 800bb56:	f000 fb26 	bl	800c1a6 <USBD_CtlError>
              break;
 800bb5a:	bf00      	nop
          }
          break;
 800bb5c:	e004      	b.n	800bb68 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 800bb5e:	6839      	ldr	r1, [r7, #0]
 800bb60:	6878      	ldr	r0, [r7, #4]
 800bb62:	f000 fb20 	bl	800c1a6 <USBD_CtlError>
          break;
 800bb66:	bf00      	nop
      }
      break;
 800bb68:	e004      	b.n	800bb74 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 800bb6a:	6839      	ldr	r1, [r7, #0]
 800bb6c:	6878      	ldr	r0, [r7, #4]
 800bb6e:	f000 fb1a 	bl	800c1a6 <USBD_CtlError>
      break;
 800bb72:	bf00      	nop
  }

  return ret;
 800bb74:	7bfb      	ldrb	r3, [r7, #15]
}
 800bb76:	4618      	mov	r0, r3
 800bb78:	3710      	adds	r7, #16
 800bb7a:	46bd      	mov	sp, r7
 800bb7c:	bd80      	pop	{r7, pc}
	...

0800bb80 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800bb80:	b580      	push	{r7, lr}
 800bb82:	b084      	sub	sp, #16
 800bb84:	af00      	add	r7, sp, #0
 800bb86:	6078      	str	r0, [r7, #4]
 800bb88:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800bb8a:	2300      	movs	r3, #0
 800bb8c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800bb8e:	2300      	movs	r3, #0
 800bb90:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800bb92:	2300      	movs	r3, #0
 800bb94:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800bb96:	683b      	ldr	r3, [r7, #0]
 800bb98:	885b      	ldrh	r3, [r3, #2]
 800bb9a:	0a1b      	lsrs	r3, r3, #8
 800bb9c:	b29b      	uxth	r3, r3
 800bb9e:	3b01      	subs	r3, #1
 800bba0:	2b06      	cmp	r3, #6
 800bba2:	f200 8128 	bhi.w	800bdf6 <USBD_GetDescriptor+0x276>
 800bba6:	a201      	add	r2, pc, #4	; (adr r2, 800bbac <USBD_GetDescriptor+0x2c>)
 800bba8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bbac:	0800bbc9 	.word	0x0800bbc9
 800bbb0:	0800bbe1 	.word	0x0800bbe1
 800bbb4:	0800bc21 	.word	0x0800bc21
 800bbb8:	0800bdf7 	.word	0x0800bdf7
 800bbbc:	0800bdf7 	.word	0x0800bdf7
 800bbc0:	0800bd97 	.word	0x0800bd97
 800bbc4:	0800bdc3 	.word	0x0800bdc3
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800bbce:	681b      	ldr	r3, [r3, #0]
 800bbd0:	687a      	ldr	r2, [r7, #4]
 800bbd2:	7c12      	ldrb	r2, [r2, #16]
 800bbd4:	f107 0108 	add.w	r1, r7, #8
 800bbd8:	4610      	mov	r0, r2
 800bbda:	4798      	blx	r3
 800bbdc:	60f8      	str	r0, [r7, #12]
      break;
 800bbde:	e112      	b.n	800be06 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	7c1b      	ldrb	r3, [r3, #16]
 800bbe4:	2b00      	cmp	r3, #0
 800bbe6:	d10d      	bne.n	800bc04 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800bbe8:	687b      	ldr	r3, [r7, #4]
 800bbea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bbee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bbf0:	f107 0208 	add.w	r2, r7, #8
 800bbf4:	4610      	mov	r0, r2
 800bbf6:	4798      	blx	r3
 800bbf8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800bbfa:	68fb      	ldr	r3, [r7, #12]
 800bbfc:	3301      	adds	r3, #1
 800bbfe:	2202      	movs	r2, #2
 800bc00:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800bc02:	e100      	b.n	800be06 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800bc04:	687b      	ldr	r3, [r7, #4]
 800bc06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bc0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc0c:	f107 0208 	add.w	r2, r7, #8
 800bc10:	4610      	mov	r0, r2
 800bc12:	4798      	blx	r3
 800bc14:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800bc16:	68fb      	ldr	r3, [r7, #12]
 800bc18:	3301      	adds	r3, #1
 800bc1a:	2202      	movs	r2, #2
 800bc1c:	701a      	strb	r2, [r3, #0]
      break;
 800bc1e:	e0f2      	b.n	800be06 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800bc20:	683b      	ldr	r3, [r7, #0]
 800bc22:	885b      	ldrh	r3, [r3, #2]
 800bc24:	b2db      	uxtb	r3, r3
 800bc26:	2b05      	cmp	r3, #5
 800bc28:	f200 80ac 	bhi.w	800bd84 <USBD_GetDescriptor+0x204>
 800bc2c:	a201      	add	r2, pc, #4	; (adr r2, 800bc34 <USBD_GetDescriptor+0xb4>)
 800bc2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc32:	bf00      	nop
 800bc34:	0800bc4d 	.word	0x0800bc4d
 800bc38:	0800bc81 	.word	0x0800bc81
 800bc3c:	0800bcb5 	.word	0x0800bcb5
 800bc40:	0800bce9 	.word	0x0800bce9
 800bc44:	0800bd1d 	.word	0x0800bd1d
 800bc48:	0800bd51 	.word	0x0800bd51
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800bc52:	685b      	ldr	r3, [r3, #4]
 800bc54:	2b00      	cmp	r3, #0
 800bc56:	d00b      	beq.n	800bc70 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800bc58:	687b      	ldr	r3, [r7, #4]
 800bc5a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800bc5e:	685b      	ldr	r3, [r3, #4]
 800bc60:	687a      	ldr	r2, [r7, #4]
 800bc62:	7c12      	ldrb	r2, [r2, #16]
 800bc64:	f107 0108 	add.w	r1, r7, #8
 800bc68:	4610      	mov	r0, r2
 800bc6a:	4798      	blx	r3
 800bc6c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bc6e:	e091      	b.n	800bd94 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800bc70:	6839      	ldr	r1, [r7, #0]
 800bc72:	6878      	ldr	r0, [r7, #4]
 800bc74:	f000 fa97 	bl	800c1a6 <USBD_CtlError>
            err++;
 800bc78:	7afb      	ldrb	r3, [r7, #11]
 800bc7a:	3301      	adds	r3, #1
 800bc7c:	72fb      	strb	r3, [r7, #11]
          break;
 800bc7e:	e089      	b.n	800bd94 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800bc86:	689b      	ldr	r3, [r3, #8]
 800bc88:	2b00      	cmp	r3, #0
 800bc8a:	d00b      	beq.n	800bca4 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800bc8c:	687b      	ldr	r3, [r7, #4]
 800bc8e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800bc92:	689b      	ldr	r3, [r3, #8]
 800bc94:	687a      	ldr	r2, [r7, #4]
 800bc96:	7c12      	ldrb	r2, [r2, #16]
 800bc98:	f107 0108 	add.w	r1, r7, #8
 800bc9c:	4610      	mov	r0, r2
 800bc9e:	4798      	blx	r3
 800bca0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bca2:	e077      	b.n	800bd94 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800bca4:	6839      	ldr	r1, [r7, #0]
 800bca6:	6878      	ldr	r0, [r7, #4]
 800bca8:	f000 fa7d 	bl	800c1a6 <USBD_CtlError>
            err++;
 800bcac:	7afb      	ldrb	r3, [r7, #11]
 800bcae:	3301      	adds	r3, #1
 800bcb0:	72fb      	strb	r3, [r7, #11]
          break;
 800bcb2:	e06f      	b.n	800bd94 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800bcb4:	687b      	ldr	r3, [r7, #4]
 800bcb6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800bcba:	68db      	ldr	r3, [r3, #12]
 800bcbc:	2b00      	cmp	r3, #0
 800bcbe:	d00b      	beq.n	800bcd8 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800bcc0:	687b      	ldr	r3, [r7, #4]
 800bcc2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800bcc6:	68db      	ldr	r3, [r3, #12]
 800bcc8:	687a      	ldr	r2, [r7, #4]
 800bcca:	7c12      	ldrb	r2, [r2, #16]
 800bccc:	f107 0108 	add.w	r1, r7, #8
 800bcd0:	4610      	mov	r0, r2
 800bcd2:	4798      	blx	r3
 800bcd4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bcd6:	e05d      	b.n	800bd94 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800bcd8:	6839      	ldr	r1, [r7, #0]
 800bcda:	6878      	ldr	r0, [r7, #4]
 800bcdc:	f000 fa63 	bl	800c1a6 <USBD_CtlError>
            err++;
 800bce0:	7afb      	ldrb	r3, [r7, #11]
 800bce2:	3301      	adds	r3, #1
 800bce4:	72fb      	strb	r3, [r7, #11]
          break;
 800bce6:	e055      	b.n	800bd94 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800bcee:	691b      	ldr	r3, [r3, #16]
 800bcf0:	2b00      	cmp	r3, #0
 800bcf2:	d00b      	beq.n	800bd0c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800bcf4:	687b      	ldr	r3, [r7, #4]
 800bcf6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800bcfa:	691b      	ldr	r3, [r3, #16]
 800bcfc:	687a      	ldr	r2, [r7, #4]
 800bcfe:	7c12      	ldrb	r2, [r2, #16]
 800bd00:	f107 0108 	add.w	r1, r7, #8
 800bd04:	4610      	mov	r0, r2
 800bd06:	4798      	blx	r3
 800bd08:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bd0a:	e043      	b.n	800bd94 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800bd0c:	6839      	ldr	r1, [r7, #0]
 800bd0e:	6878      	ldr	r0, [r7, #4]
 800bd10:	f000 fa49 	bl	800c1a6 <USBD_CtlError>
            err++;
 800bd14:	7afb      	ldrb	r3, [r7, #11]
 800bd16:	3301      	adds	r3, #1
 800bd18:	72fb      	strb	r3, [r7, #11]
          break;
 800bd1a:	e03b      	b.n	800bd94 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800bd1c:	687b      	ldr	r3, [r7, #4]
 800bd1e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800bd22:	695b      	ldr	r3, [r3, #20]
 800bd24:	2b00      	cmp	r3, #0
 800bd26:	d00b      	beq.n	800bd40 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800bd28:	687b      	ldr	r3, [r7, #4]
 800bd2a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800bd2e:	695b      	ldr	r3, [r3, #20]
 800bd30:	687a      	ldr	r2, [r7, #4]
 800bd32:	7c12      	ldrb	r2, [r2, #16]
 800bd34:	f107 0108 	add.w	r1, r7, #8
 800bd38:	4610      	mov	r0, r2
 800bd3a:	4798      	blx	r3
 800bd3c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bd3e:	e029      	b.n	800bd94 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800bd40:	6839      	ldr	r1, [r7, #0]
 800bd42:	6878      	ldr	r0, [r7, #4]
 800bd44:	f000 fa2f 	bl	800c1a6 <USBD_CtlError>
            err++;
 800bd48:	7afb      	ldrb	r3, [r7, #11]
 800bd4a:	3301      	adds	r3, #1
 800bd4c:	72fb      	strb	r3, [r7, #11]
          break;
 800bd4e:	e021      	b.n	800bd94 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800bd50:	687b      	ldr	r3, [r7, #4]
 800bd52:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800bd56:	699b      	ldr	r3, [r3, #24]
 800bd58:	2b00      	cmp	r3, #0
 800bd5a:	d00b      	beq.n	800bd74 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800bd5c:	687b      	ldr	r3, [r7, #4]
 800bd5e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800bd62:	699b      	ldr	r3, [r3, #24]
 800bd64:	687a      	ldr	r2, [r7, #4]
 800bd66:	7c12      	ldrb	r2, [r2, #16]
 800bd68:	f107 0108 	add.w	r1, r7, #8
 800bd6c:	4610      	mov	r0, r2
 800bd6e:	4798      	blx	r3
 800bd70:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bd72:	e00f      	b.n	800bd94 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800bd74:	6839      	ldr	r1, [r7, #0]
 800bd76:	6878      	ldr	r0, [r7, #4]
 800bd78:	f000 fa15 	bl	800c1a6 <USBD_CtlError>
            err++;
 800bd7c:	7afb      	ldrb	r3, [r7, #11]
 800bd7e:	3301      	adds	r3, #1
 800bd80:	72fb      	strb	r3, [r7, #11]
          break;
 800bd82:	e007      	b.n	800bd94 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 800bd84:	6839      	ldr	r1, [r7, #0]
 800bd86:	6878      	ldr	r0, [r7, #4]
 800bd88:	f000 fa0d 	bl	800c1a6 <USBD_CtlError>
          err++;
 800bd8c:	7afb      	ldrb	r3, [r7, #11]
 800bd8e:	3301      	adds	r3, #1
 800bd90:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 800bd92:	e038      	b.n	800be06 <USBD_GetDescriptor+0x286>
 800bd94:	e037      	b.n	800be06 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bd96:	687b      	ldr	r3, [r7, #4]
 800bd98:	7c1b      	ldrb	r3, [r3, #16]
 800bd9a:	2b00      	cmp	r3, #0
 800bd9c:	d109      	bne.n	800bdb2 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800bd9e:	687b      	ldr	r3, [r7, #4]
 800bda0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bda4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bda6:	f107 0208 	add.w	r2, r7, #8
 800bdaa:	4610      	mov	r0, r2
 800bdac:	4798      	blx	r3
 800bdae:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800bdb0:	e029      	b.n	800be06 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800bdb2:	6839      	ldr	r1, [r7, #0]
 800bdb4:	6878      	ldr	r0, [r7, #4]
 800bdb6:	f000 f9f6 	bl	800c1a6 <USBD_CtlError>
        err++;
 800bdba:	7afb      	ldrb	r3, [r7, #11]
 800bdbc:	3301      	adds	r3, #1
 800bdbe:	72fb      	strb	r3, [r7, #11]
      break;
 800bdc0:	e021      	b.n	800be06 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bdc2:	687b      	ldr	r3, [r7, #4]
 800bdc4:	7c1b      	ldrb	r3, [r3, #16]
 800bdc6:	2b00      	cmp	r3, #0
 800bdc8:	d10d      	bne.n	800bde6 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800bdca:	687b      	ldr	r3, [r7, #4]
 800bdcc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bdd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bdd2:	f107 0208 	add.w	r2, r7, #8
 800bdd6:	4610      	mov	r0, r2
 800bdd8:	4798      	blx	r3
 800bdda:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800bddc:	68fb      	ldr	r3, [r7, #12]
 800bdde:	3301      	adds	r3, #1
 800bde0:	2207      	movs	r2, #7
 800bde2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800bde4:	e00f      	b.n	800be06 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800bde6:	6839      	ldr	r1, [r7, #0]
 800bde8:	6878      	ldr	r0, [r7, #4]
 800bdea:	f000 f9dc 	bl	800c1a6 <USBD_CtlError>
        err++;
 800bdee:	7afb      	ldrb	r3, [r7, #11]
 800bdf0:	3301      	adds	r3, #1
 800bdf2:	72fb      	strb	r3, [r7, #11]
      break;
 800bdf4:	e007      	b.n	800be06 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800bdf6:	6839      	ldr	r1, [r7, #0]
 800bdf8:	6878      	ldr	r0, [r7, #4]
 800bdfa:	f000 f9d4 	bl	800c1a6 <USBD_CtlError>
      err++;
 800bdfe:	7afb      	ldrb	r3, [r7, #11]
 800be00:	3301      	adds	r3, #1
 800be02:	72fb      	strb	r3, [r7, #11]
      break;
 800be04:	bf00      	nop
  }

  if (err != 0U)
 800be06:	7afb      	ldrb	r3, [r7, #11]
 800be08:	2b00      	cmp	r3, #0
 800be0a:	d11c      	bne.n	800be46 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 800be0c:	893b      	ldrh	r3, [r7, #8]
 800be0e:	2b00      	cmp	r3, #0
 800be10:	d011      	beq.n	800be36 <USBD_GetDescriptor+0x2b6>
 800be12:	683b      	ldr	r3, [r7, #0]
 800be14:	88db      	ldrh	r3, [r3, #6]
 800be16:	2b00      	cmp	r3, #0
 800be18:	d00d      	beq.n	800be36 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 800be1a:	683b      	ldr	r3, [r7, #0]
 800be1c:	88da      	ldrh	r2, [r3, #6]
 800be1e:	893b      	ldrh	r3, [r7, #8]
 800be20:	4293      	cmp	r3, r2
 800be22:	bf28      	it	cs
 800be24:	4613      	movcs	r3, r2
 800be26:	b29b      	uxth	r3, r3
 800be28:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800be2a:	893b      	ldrh	r3, [r7, #8]
 800be2c:	461a      	mov	r2, r3
 800be2e:	68f9      	ldr	r1, [r7, #12]
 800be30:	6878      	ldr	r0, [r7, #4]
 800be32:	f000 fa22 	bl	800c27a <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800be36:	683b      	ldr	r3, [r7, #0]
 800be38:	88db      	ldrh	r3, [r3, #6]
 800be3a:	2b00      	cmp	r3, #0
 800be3c:	d104      	bne.n	800be48 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 800be3e:	6878      	ldr	r0, [r7, #4]
 800be40:	f000 fa79 	bl	800c336 <USBD_CtlSendStatus>
 800be44:	e000      	b.n	800be48 <USBD_GetDescriptor+0x2c8>
    return;
 800be46:	bf00      	nop
    }
  }
}
 800be48:	3710      	adds	r7, #16
 800be4a:	46bd      	mov	sp, r7
 800be4c:	bd80      	pop	{r7, pc}
 800be4e:	bf00      	nop

0800be50 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800be50:	b580      	push	{r7, lr}
 800be52:	b084      	sub	sp, #16
 800be54:	af00      	add	r7, sp, #0
 800be56:	6078      	str	r0, [r7, #4]
 800be58:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800be5a:	683b      	ldr	r3, [r7, #0]
 800be5c:	889b      	ldrh	r3, [r3, #4]
 800be5e:	2b00      	cmp	r3, #0
 800be60:	d130      	bne.n	800bec4 <USBD_SetAddress+0x74>
 800be62:	683b      	ldr	r3, [r7, #0]
 800be64:	88db      	ldrh	r3, [r3, #6]
 800be66:	2b00      	cmp	r3, #0
 800be68:	d12c      	bne.n	800bec4 <USBD_SetAddress+0x74>
 800be6a:	683b      	ldr	r3, [r7, #0]
 800be6c:	885b      	ldrh	r3, [r3, #2]
 800be6e:	2b7f      	cmp	r3, #127	; 0x7f
 800be70:	d828      	bhi.n	800bec4 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800be72:	683b      	ldr	r3, [r7, #0]
 800be74:	885b      	ldrh	r3, [r3, #2]
 800be76:	b2db      	uxtb	r3, r3
 800be78:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800be7c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800be7e:	687b      	ldr	r3, [r7, #4]
 800be80:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800be84:	2b03      	cmp	r3, #3
 800be86:	d104      	bne.n	800be92 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800be88:	6839      	ldr	r1, [r7, #0]
 800be8a:	6878      	ldr	r0, [r7, #4]
 800be8c:	f000 f98b 	bl	800c1a6 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800be90:	e01d      	b.n	800bece <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800be92:	687b      	ldr	r3, [r7, #4]
 800be94:	7bfa      	ldrb	r2, [r7, #15]
 800be96:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800be9a:	7bfb      	ldrb	r3, [r7, #15]
 800be9c:	4619      	mov	r1, r3
 800be9e:	6878      	ldr	r0, [r7, #4]
 800bea0:	f000 fecf 	bl	800cc42 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800bea4:	6878      	ldr	r0, [r7, #4]
 800bea6:	f000 fa46 	bl	800c336 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800beaa:	7bfb      	ldrb	r3, [r7, #15]
 800beac:	2b00      	cmp	r3, #0
 800beae:	d004      	beq.n	800beba <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800beb0:	687b      	ldr	r3, [r7, #4]
 800beb2:	2202      	movs	r2, #2
 800beb4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800beb8:	e009      	b.n	800bece <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	2201      	movs	r2, #1
 800bebe:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bec2:	e004      	b.n	800bece <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800bec4:	6839      	ldr	r1, [r7, #0]
 800bec6:	6878      	ldr	r0, [r7, #4]
 800bec8:	f000 f96d 	bl	800c1a6 <USBD_CtlError>
  }
}
 800becc:	bf00      	nop
 800bece:	bf00      	nop
 800bed0:	3710      	adds	r7, #16
 800bed2:	46bd      	mov	sp, r7
 800bed4:	bd80      	pop	{r7, pc}
	...

0800bed8 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bed8:	b580      	push	{r7, lr}
 800beda:	b082      	sub	sp, #8
 800bedc:	af00      	add	r7, sp, #0
 800bede:	6078      	str	r0, [r7, #4]
 800bee0:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800bee2:	683b      	ldr	r3, [r7, #0]
 800bee4:	885b      	ldrh	r3, [r3, #2]
 800bee6:	b2da      	uxtb	r2, r3
 800bee8:	4b41      	ldr	r3, [pc, #260]	; (800bff0 <USBD_SetConfig+0x118>)
 800beea:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800beec:	4b40      	ldr	r3, [pc, #256]	; (800bff0 <USBD_SetConfig+0x118>)
 800beee:	781b      	ldrb	r3, [r3, #0]
 800bef0:	2b01      	cmp	r3, #1
 800bef2:	d904      	bls.n	800befe <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 800bef4:	6839      	ldr	r1, [r7, #0]
 800bef6:	6878      	ldr	r0, [r7, #4]
 800bef8:	f000 f955 	bl	800c1a6 <USBD_CtlError>
 800befc:	e075      	b.n	800bfea <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800befe:	687b      	ldr	r3, [r7, #4]
 800bf00:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bf04:	2b02      	cmp	r3, #2
 800bf06:	d002      	beq.n	800bf0e <USBD_SetConfig+0x36>
 800bf08:	2b03      	cmp	r3, #3
 800bf0a:	d023      	beq.n	800bf54 <USBD_SetConfig+0x7c>
 800bf0c:	e062      	b.n	800bfd4 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800bf0e:	4b38      	ldr	r3, [pc, #224]	; (800bff0 <USBD_SetConfig+0x118>)
 800bf10:	781b      	ldrb	r3, [r3, #0]
 800bf12:	2b00      	cmp	r3, #0
 800bf14:	d01a      	beq.n	800bf4c <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 800bf16:	4b36      	ldr	r3, [pc, #216]	; (800bff0 <USBD_SetConfig+0x118>)
 800bf18:	781b      	ldrb	r3, [r3, #0]
 800bf1a:	461a      	mov	r2, r3
 800bf1c:	687b      	ldr	r3, [r7, #4]
 800bf1e:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800bf20:	687b      	ldr	r3, [r7, #4]
 800bf22:	2203      	movs	r2, #3
 800bf24:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800bf28:	4b31      	ldr	r3, [pc, #196]	; (800bff0 <USBD_SetConfig+0x118>)
 800bf2a:	781b      	ldrb	r3, [r3, #0]
 800bf2c:	4619      	mov	r1, r3
 800bf2e:	6878      	ldr	r0, [r7, #4]
 800bf30:	f7ff f9af 	bl	800b292 <USBD_SetClassConfig>
 800bf34:	4603      	mov	r3, r0
 800bf36:	2b02      	cmp	r3, #2
 800bf38:	d104      	bne.n	800bf44 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800bf3a:	6839      	ldr	r1, [r7, #0]
 800bf3c:	6878      	ldr	r0, [r7, #4]
 800bf3e:	f000 f932 	bl	800c1a6 <USBD_CtlError>
            return;
 800bf42:	e052      	b.n	800bfea <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 800bf44:	6878      	ldr	r0, [r7, #4]
 800bf46:	f000 f9f6 	bl	800c336 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800bf4a:	e04e      	b.n	800bfea <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800bf4c:	6878      	ldr	r0, [r7, #4]
 800bf4e:	f000 f9f2 	bl	800c336 <USBD_CtlSendStatus>
        break;
 800bf52:	e04a      	b.n	800bfea <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 800bf54:	4b26      	ldr	r3, [pc, #152]	; (800bff0 <USBD_SetConfig+0x118>)
 800bf56:	781b      	ldrb	r3, [r3, #0]
 800bf58:	2b00      	cmp	r3, #0
 800bf5a:	d112      	bne.n	800bf82 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800bf5c:	687b      	ldr	r3, [r7, #4]
 800bf5e:	2202      	movs	r2, #2
 800bf60:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 800bf64:	4b22      	ldr	r3, [pc, #136]	; (800bff0 <USBD_SetConfig+0x118>)
 800bf66:	781b      	ldrb	r3, [r3, #0]
 800bf68:	461a      	mov	r2, r3
 800bf6a:	687b      	ldr	r3, [r7, #4]
 800bf6c:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800bf6e:	4b20      	ldr	r3, [pc, #128]	; (800bff0 <USBD_SetConfig+0x118>)
 800bf70:	781b      	ldrb	r3, [r3, #0]
 800bf72:	4619      	mov	r1, r3
 800bf74:	6878      	ldr	r0, [r7, #4]
 800bf76:	f7ff f9ab 	bl	800b2d0 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800bf7a:	6878      	ldr	r0, [r7, #4]
 800bf7c:	f000 f9db 	bl	800c336 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800bf80:	e033      	b.n	800bfea <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 800bf82:	4b1b      	ldr	r3, [pc, #108]	; (800bff0 <USBD_SetConfig+0x118>)
 800bf84:	781b      	ldrb	r3, [r3, #0]
 800bf86:	461a      	mov	r2, r3
 800bf88:	687b      	ldr	r3, [r7, #4]
 800bf8a:	685b      	ldr	r3, [r3, #4]
 800bf8c:	429a      	cmp	r2, r3
 800bf8e:	d01d      	beq.n	800bfcc <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800bf90:	687b      	ldr	r3, [r7, #4]
 800bf92:	685b      	ldr	r3, [r3, #4]
 800bf94:	b2db      	uxtb	r3, r3
 800bf96:	4619      	mov	r1, r3
 800bf98:	6878      	ldr	r0, [r7, #4]
 800bf9a:	f7ff f999 	bl	800b2d0 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800bf9e:	4b14      	ldr	r3, [pc, #80]	; (800bff0 <USBD_SetConfig+0x118>)
 800bfa0:	781b      	ldrb	r3, [r3, #0]
 800bfa2:	461a      	mov	r2, r3
 800bfa4:	687b      	ldr	r3, [r7, #4]
 800bfa6:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800bfa8:	4b11      	ldr	r3, [pc, #68]	; (800bff0 <USBD_SetConfig+0x118>)
 800bfaa:	781b      	ldrb	r3, [r3, #0]
 800bfac:	4619      	mov	r1, r3
 800bfae:	6878      	ldr	r0, [r7, #4]
 800bfb0:	f7ff f96f 	bl	800b292 <USBD_SetClassConfig>
 800bfb4:	4603      	mov	r3, r0
 800bfb6:	2b02      	cmp	r3, #2
 800bfb8:	d104      	bne.n	800bfc4 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 800bfba:	6839      	ldr	r1, [r7, #0]
 800bfbc:	6878      	ldr	r0, [r7, #4]
 800bfbe:	f000 f8f2 	bl	800c1a6 <USBD_CtlError>
            return;
 800bfc2:	e012      	b.n	800bfea <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800bfc4:	6878      	ldr	r0, [r7, #4]
 800bfc6:	f000 f9b6 	bl	800c336 <USBD_CtlSendStatus>
        break;
 800bfca:	e00e      	b.n	800bfea <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800bfcc:	6878      	ldr	r0, [r7, #4]
 800bfce:	f000 f9b2 	bl	800c336 <USBD_CtlSendStatus>
        break;
 800bfd2:	e00a      	b.n	800bfea <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 800bfd4:	6839      	ldr	r1, [r7, #0]
 800bfd6:	6878      	ldr	r0, [r7, #4]
 800bfd8:	f000 f8e5 	bl	800c1a6 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 800bfdc:	4b04      	ldr	r3, [pc, #16]	; (800bff0 <USBD_SetConfig+0x118>)
 800bfde:	781b      	ldrb	r3, [r3, #0]
 800bfe0:	4619      	mov	r1, r3
 800bfe2:	6878      	ldr	r0, [r7, #4]
 800bfe4:	f7ff f974 	bl	800b2d0 <USBD_ClrClassConfig>
        break;
 800bfe8:	bf00      	nop
    }
  }
}
 800bfea:	3708      	adds	r7, #8
 800bfec:	46bd      	mov	sp, r7
 800bfee:	bd80      	pop	{r7, pc}
 800bff0:	2000089c 	.word	0x2000089c

0800bff4 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bff4:	b580      	push	{r7, lr}
 800bff6:	b082      	sub	sp, #8
 800bff8:	af00      	add	r7, sp, #0
 800bffa:	6078      	str	r0, [r7, #4]
 800bffc:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800bffe:	683b      	ldr	r3, [r7, #0]
 800c000:	88db      	ldrh	r3, [r3, #6]
 800c002:	2b01      	cmp	r3, #1
 800c004:	d004      	beq.n	800c010 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800c006:	6839      	ldr	r1, [r7, #0]
 800c008:	6878      	ldr	r0, [r7, #4]
 800c00a:	f000 f8cc 	bl	800c1a6 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800c00e:	e022      	b.n	800c056 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 800c010:	687b      	ldr	r3, [r7, #4]
 800c012:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c016:	2b02      	cmp	r3, #2
 800c018:	dc02      	bgt.n	800c020 <USBD_GetConfig+0x2c>
 800c01a:	2b00      	cmp	r3, #0
 800c01c:	dc03      	bgt.n	800c026 <USBD_GetConfig+0x32>
 800c01e:	e015      	b.n	800c04c <USBD_GetConfig+0x58>
 800c020:	2b03      	cmp	r3, #3
 800c022:	d00b      	beq.n	800c03c <USBD_GetConfig+0x48>
 800c024:	e012      	b.n	800c04c <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	2200      	movs	r2, #0
 800c02a:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800c02c:	687b      	ldr	r3, [r7, #4]
 800c02e:	3308      	adds	r3, #8
 800c030:	2201      	movs	r2, #1
 800c032:	4619      	mov	r1, r3
 800c034:	6878      	ldr	r0, [r7, #4]
 800c036:	f000 f920 	bl	800c27a <USBD_CtlSendData>
        break;
 800c03a:	e00c      	b.n	800c056 <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800c03c:	687b      	ldr	r3, [r7, #4]
 800c03e:	3304      	adds	r3, #4
 800c040:	2201      	movs	r2, #1
 800c042:	4619      	mov	r1, r3
 800c044:	6878      	ldr	r0, [r7, #4]
 800c046:	f000 f918 	bl	800c27a <USBD_CtlSendData>
        break;
 800c04a:	e004      	b.n	800c056 <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 800c04c:	6839      	ldr	r1, [r7, #0]
 800c04e:	6878      	ldr	r0, [r7, #4]
 800c050:	f000 f8a9 	bl	800c1a6 <USBD_CtlError>
        break;
 800c054:	bf00      	nop
}
 800c056:	bf00      	nop
 800c058:	3708      	adds	r7, #8
 800c05a:	46bd      	mov	sp, r7
 800c05c:	bd80      	pop	{r7, pc}

0800c05e <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c05e:	b580      	push	{r7, lr}
 800c060:	b082      	sub	sp, #8
 800c062:	af00      	add	r7, sp, #0
 800c064:	6078      	str	r0, [r7, #4]
 800c066:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c068:	687b      	ldr	r3, [r7, #4]
 800c06a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c06e:	3b01      	subs	r3, #1
 800c070:	2b02      	cmp	r3, #2
 800c072:	d81e      	bhi.n	800c0b2 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800c074:	683b      	ldr	r3, [r7, #0]
 800c076:	88db      	ldrh	r3, [r3, #6]
 800c078:	2b02      	cmp	r3, #2
 800c07a:	d004      	beq.n	800c086 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 800c07c:	6839      	ldr	r1, [r7, #0]
 800c07e:	6878      	ldr	r0, [r7, #4]
 800c080:	f000 f891 	bl	800c1a6 <USBD_CtlError>
        break;
 800c084:	e01a      	b.n	800c0bc <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800c086:	687b      	ldr	r3, [r7, #4]
 800c088:	2201      	movs	r2, #1
 800c08a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800c08c:	687b      	ldr	r3, [r7, #4]
 800c08e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800c092:	2b00      	cmp	r3, #0
 800c094:	d005      	beq.n	800c0a2 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800c096:	687b      	ldr	r3, [r7, #4]
 800c098:	68db      	ldr	r3, [r3, #12]
 800c09a:	f043 0202 	orr.w	r2, r3, #2
 800c09e:	687b      	ldr	r3, [r7, #4]
 800c0a0:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800c0a2:	687b      	ldr	r3, [r7, #4]
 800c0a4:	330c      	adds	r3, #12
 800c0a6:	2202      	movs	r2, #2
 800c0a8:	4619      	mov	r1, r3
 800c0aa:	6878      	ldr	r0, [r7, #4]
 800c0ac:	f000 f8e5 	bl	800c27a <USBD_CtlSendData>
      break;
 800c0b0:	e004      	b.n	800c0bc <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 800c0b2:	6839      	ldr	r1, [r7, #0]
 800c0b4:	6878      	ldr	r0, [r7, #4]
 800c0b6:	f000 f876 	bl	800c1a6 <USBD_CtlError>
      break;
 800c0ba:	bf00      	nop
  }
}
 800c0bc:	bf00      	nop
 800c0be:	3708      	adds	r7, #8
 800c0c0:	46bd      	mov	sp, r7
 800c0c2:	bd80      	pop	{r7, pc}

0800c0c4 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800c0c4:	b580      	push	{r7, lr}
 800c0c6:	b082      	sub	sp, #8
 800c0c8:	af00      	add	r7, sp, #0
 800c0ca:	6078      	str	r0, [r7, #4]
 800c0cc:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c0ce:	683b      	ldr	r3, [r7, #0]
 800c0d0:	885b      	ldrh	r3, [r3, #2]
 800c0d2:	2b01      	cmp	r3, #1
 800c0d4:	d106      	bne.n	800c0e4 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800c0d6:	687b      	ldr	r3, [r7, #4]
 800c0d8:	2201      	movs	r2, #1
 800c0da:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 800c0de:	6878      	ldr	r0, [r7, #4]
 800c0e0:	f000 f929 	bl	800c336 <USBD_CtlSendStatus>
  }
}
 800c0e4:	bf00      	nop
 800c0e6:	3708      	adds	r7, #8
 800c0e8:	46bd      	mov	sp, r7
 800c0ea:	bd80      	pop	{r7, pc}

0800c0ec <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800c0ec:	b580      	push	{r7, lr}
 800c0ee:	b082      	sub	sp, #8
 800c0f0:	af00      	add	r7, sp, #0
 800c0f2:	6078      	str	r0, [r7, #4]
 800c0f4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c0f6:	687b      	ldr	r3, [r7, #4]
 800c0f8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c0fc:	3b01      	subs	r3, #1
 800c0fe:	2b02      	cmp	r3, #2
 800c100:	d80b      	bhi.n	800c11a <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c102:	683b      	ldr	r3, [r7, #0]
 800c104:	885b      	ldrh	r3, [r3, #2]
 800c106:	2b01      	cmp	r3, #1
 800c108:	d10c      	bne.n	800c124 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800c10a:	687b      	ldr	r3, [r7, #4]
 800c10c:	2200      	movs	r2, #0
 800c10e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 800c112:	6878      	ldr	r0, [r7, #4]
 800c114:	f000 f90f 	bl	800c336 <USBD_CtlSendStatus>
      }
      break;
 800c118:	e004      	b.n	800c124 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800c11a:	6839      	ldr	r1, [r7, #0]
 800c11c:	6878      	ldr	r0, [r7, #4]
 800c11e:	f000 f842 	bl	800c1a6 <USBD_CtlError>
      break;
 800c122:	e000      	b.n	800c126 <USBD_ClrFeature+0x3a>
      break;
 800c124:	bf00      	nop
  }
}
 800c126:	bf00      	nop
 800c128:	3708      	adds	r7, #8
 800c12a:	46bd      	mov	sp, r7
 800c12c:	bd80      	pop	{r7, pc}

0800c12e <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800c12e:	b480      	push	{r7}
 800c130:	b083      	sub	sp, #12
 800c132:	af00      	add	r7, sp, #0
 800c134:	6078      	str	r0, [r7, #4]
 800c136:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800c138:	683b      	ldr	r3, [r7, #0]
 800c13a:	781a      	ldrb	r2, [r3, #0]
 800c13c:	687b      	ldr	r3, [r7, #4]
 800c13e:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800c140:	683b      	ldr	r3, [r7, #0]
 800c142:	785a      	ldrb	r2, [r3, #1]
 800c144:	687b      	ldr	r3, [r7, #4]
 800c146:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800c148:	683b      	ldr	r3, [r7, #0]
 800c14a:	3302      	adds	r3, #2
 800c14c:	781b      	ldrb	r3, [r3, #0]
 800c14e:	b29a      	uxth	r2, r3
 800c150:	683b      	ldr	r3, [r7, #0]
 800c152:	3303      	adds	r3, #3
 800c154:	781b      	ldrb	r3, [r3, #0]
 800c156:	b29b      	uxth	r3, r3
 800c158:	021b      	lsls	r3, r3, #8
 800c15a:	b29b      	uxth	r3, r3
 800c15c:	4413      	add	r3, r2
 800c15e:	b29a      	uxth	r2, r3
 800c160:	687b      	ldr	r3, [r7, #4]
 800c162:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800c164:	683b      	ldr	r3, [r7, #0]
 800c166:	3304      	adds	r3, #4
 800c168:	781b      	ldrb	r3, [r3, #0]
 800c16a:	b29a      	uxth	r2, r3
 800c16c:	683b      	ldr	r3, [r7, #0]
 800c16e:	3305      	adds	r3, #5
 800c170:	781b      	ldrb	r3, [r3, #0]
 800c172:	b29b      	uxth	r3, r3
 800c174:	021b      	lsls	r3, r3, #8
 800c176:	b29b      	uxth	r3, r3
 800c178:	4413      	add	r3, r2
 800c17a:	b29a      	uxth	r2, r3
 800c17c:	687b      	ldr	r3, [r7, #4]
 800c17e:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800c180:	683b      	ldr	r3, [r7, #0]
 800c182:	3306      	adds	r3, #6
 800c184:	781b      	ldrb	r3, [r3, #0]
 800c186:	b29a      	uxth	r2, r3
 800c188:	683b      	ldr	r3, [r7, #0]
 800c18a:	3307      	adds	r3, #7
 800c18c:	781b      	ldrb	r3, [r3, #0]
 800c18e:	b29b      	uxth	r3, r3
 800c190:	021b      	lsls	r3, r3, #8
 800c192:	b29b      	uxth	r3, r3
 800c194:	4413      	add	r3, r2
 800c196:	b29a      	uxth	r2, r3
 800c198:	687b      	ldr	r3, [r7, #4]
 800c19a:	80da      	strh	r2, [r3, #6]

}
 800c19c:	bf00      	nop
 800c19e:	370c      	adds	r7, #12
 800c1a0:	46bd      	mov	sp, r7
 800c1a2:	bc80      	pop	{r7}
 800c1a4:	4770      	bx	lr

0800c1a6 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800c1a6:	b580      	push	{r7, lr}
 800c1a8:	b082      	sub	sp, #8
 800c1aa:	af00      	add	r7, sp, #0
 800c1ac:	6078      	str	r0, [r7, #4]
 800c1ae:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800c1b0:	2180      	movs	r1, #128	; 0x80
 800c1b2:	6878      	ldr	r0, [r7, #4]
 800c1b4:	f000 fcdc 	bl	800cb70 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800c1b8:	2100      	movs	r1, #0
 800c1ba:	6878      	ldr	r0, [r7, #4]
 800c1bc:	f000 fcd8 	bl	800cb70 <USBD_LL_StallEP>
}
 800c1c0:	bf00      	nop
 800c1c2:	3708      	adds	r7, #8
 800c1c4:	46bd      	mov	sp, r7
 800c1c6:	bd80      	pop	{r7, pc}

0800c1c8 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800c1c8:	b580      	push	{r7, lr}
 800c1ca:	b086      	sub	sp, #24
 800c1cc:	af00      	add	r7, sp, #0
 800c1ce:	60f8      	str	r0, [r7, #12]
 800c1d0:	60b9      	str	r1, [r7, #8]
 800c1d2:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800c1d4:	2300      	movs	r3, #0
 800c1d6:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800c1d8:	68fb      	ldr	r3, [r7, #12]
 800c1da:	2b00      	cmp	r3, #0
 800c1dc:	d032      	beq.n	800c244 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800c1de:	68f8      	ldr	r0, [r7, #12]
 800c1e0:	f000 f834 	bl	800c24c <USBD_GetLen>
 800c1e4:	4603      	mov	r3, r0
 800c1e6:	3301      	adds	r3, #1
 800c1e8:	b29b      	uxth	r3, r3
 800c1ea:	005b      	lsls	r3, r3, #1
 800c1ec:	b29a      	uxth	r2, r3
 800c1ee:	687b      	ldr	r3, [r7, #4]
 800c1f0:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800c1f2:	7dfb      	ldrb	r3, [r7, #23]
 800c1f4:	1c5a      	adds	r2, r3, #1
 800c1f6:	75fa      	strb	r2, [r7, #23]
 800c1f8:	461a      	mov	r2, r3
 800c1fa:	68bb      	ldr	r3, [r7, #8]
 800c1fc:	4413      	add	r3, r2
 800c1fe:	687a      	ldr	r2, [r7, #4]
 800c200:	7812      	ldrb	r2, [r2, #0]
 800c202:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800c204:	7dfb      	ldrb	r3, [r7, #23]
 800c206:	1c5a      	adds	r2, r3, #1
 800c208:	75fa      	strb	r2, [r7, #23]
 800c20a:	461a      	mov	r2, r3
 800c20c:	68bb      	ldr	r3, [r7, #8]
 800c20e:	4413      	add	r3, r2
 800c210:	2203      	movs	r2, #3
 800c212:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800c214:	e012      	b.n	800c23c <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800c216:	68fb      	ldr	r3, [r7, #12]
 800c218:	1c5a      	adds	r2, r3, #1
 800c21a:	60fa      	str	r2, [r7, #12]
 800c21c:	7dfa      	ldrb	r2, [r7, #23]
 800c21e:	1c51      	adds	r1, r2, #1
 800c220:	75f9      	strb	r1, [r7, #23]
 800c222:	4611      	mov	r1, r2
 800c224:	68ba      	ldr	r2, [r7, #8]
 800c226:	440a      	add	r2, r1
 800c228:	781b      	ldrb	r3, [r3, #0]
 800c22a:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800c22c:	7dfb      	ldrb	r3, [r7, #23]
 800c22e:	1c5a      	adds	r2, r3, #1
 800c230:	75fa      	strb	r2, [r7, #23]
 800c232:	461a      	mov	r2, r3
 800c234:	68bb      	ldr	r3, [r7, #8]
 800c236:	4413      	add	r3, r2
 800c238:	2200      	movs	r2, #0
 800c23a:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800c23c:	68fb      	ldr	r3, [r7, #12]
 800c23e:	781b      	ldrb	r3, [r3, #0]
 800c240:	2b00      	cmp	r3, #0
 800c242:	d1e8      	bne.n	800c216 <USBD_GetString+0x4e>
    }
  }
}
 800c244:	bf00      	nop
 800c246:	3718      	adds	r7, #24
 800c248:	46bd      	mov	sp, r7
 800c24a:	bd80      	pop	{r7, pc}

0800c24c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800c24c:	b480      	push	{r7}
 800c24e:	b085      	sub	sp, #20
 800c250:	af00      	add	r7, sp, #0
 800c252:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800c254:	2300      	movs	r3, #0
 800c256:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 800c258:	e005      	b.n	800c266 <USBD_GetLen+0x1a>
  {
    len++;
 800c25a:	7bfb      	ldrb	r3, [r7, #15]
 800c25c:	3301      	adds	r3, #1
 800c25e:	73fb      	strb	r3, [r7, #15]
    buf++;
 800c260:	687b      	ldr	r3, [r7, #4]
 800c262:	3301      	adds	r3, #1
 800c264:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800c266:	687b      	ldr	r3, [r7, #4]
 800c268:	781b      	ldrb	r3, [r3, #0]
 800c26a:	2b00      	cmp	r3, #0
 800c26c:	d1f5      	bne.n	800c25a <USBD_GetLen+0xe>
  }

  return len;
 800c26e:	7bfb      	ldrb	r3, [r7, #15]
}
 800c270:	4618      	mov	r0, r3
 800c272:	3714      	adds	r7, #20
 800c274:	46bd      	mov	sp, r7
 800c276:	bc80      	pop	{r7}
 800c278:	4770      	bx	lr

0800c27a <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800c27a:	b580      	push	{r7, lr}
 800c27c:	b084      	sub	sp, #16
 800c27e:	af00      	add	r7, sp, #0
 800c280:	60f8      	str	r0, [r7, #12]
 800c282:	60b9      	str	r1, [r7, #8]
 800c284:	4613      	mov	r3, r2
 800c286:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800c288:	68fb      	ldr	r3, [r7, #12]
 800c28a:	2202      	movs	r2, #2
 800c28c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800c290:	88fa      	ldrh	r2, [r7, #6]
 800c292:	68fb      	ldr	r3, [r7, #12]
 800c294:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800c296:	88fa      	ldrh	r2, [r7, #6]
 800c298:	68fb      	ldr	r3, [r7, #12]
 800c29a:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c29c:	88fb      	ldrh	r3, [r7, #6]
 800c29e:	68ba      	ldr	r2, [r7, #8]
 800c2a0:	2100      	movs	r1, #0
 800c2a2:	68f8      	ldr	r0, [r7, #12]
 800c2a4:	f000 fcec 	bl	800cc80 <USBD_LL_Transmit>

  return USBD_OK;
 800c2a8:	2300      	movs	r3, #0
}
 800c2aa:	4618      	mov	r0, r3
 800c2ac:	3710      	adds	r7, #16
 800c2ae:	46bd      	mov	sp, r7
 800c2b0:	bd80      	pop	{r7, pc}

0800c2b2 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800c2b2:	b580      	push	{r7, lr}
 800c2b4:	b084      	sub	sp, #16
 800c2b6:	af00      	add	r7, sp, #0
 800c2b8:	60f8      	str	r0, [r7, #12]
 800c2ba:	60b9      	str	r1, [r7, #8]
 800c2bc:	4613      	mov	r3, r2
 800c2be:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c2c0:	88fb      	ldrh	r3, [r7, #6]
 800c2c2:	68ba      	ldr	r2, [r7, #8]
 800c2c4:	2100      	movs	r1, #0
 800c2c6:	68f8      	ldr	r0, [r7, #12]
 800c2c8:	f000 fcda 	bl	800cc80 <USBD_LL_Transmit>

  return USBD_OK;
 800c2cc:	2300      	movs	r3, #0
}
 800c2ce:	4618      	mov	r0, r3
 800c2d0:	3710      	adds	r7, #16
 800c2d2:	46bd      	mov	sp, r7
 800c2d4:	bd80      	pop	{r7, pc}

0800c2d6 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800c2d6:	b580      	push	{r7, lr}
 800c2d8:	b084      	sub	sp, #16
 800c2da:	af00      	add	r7, sp, #0
 800c2dc:	60f8      	str	r0, [r7, #12]
 800c2de:	60b9      	str	r1, [r7, #8]
 800c2e0:	4613      	mov	r3, r2
 800c2e2:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800c2e4:	68fb      	ldr	r3, [r7, #12]
 800c2e6:	2203      	movs	r2, #3
 800c2e8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800c2ec:	88fa      	ldrh	r2, [r7, #6]
 800c2ee:	68fb      	ldr	r3, [r7, #12]
 800c2f0:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 800c2f4:	88fa      	ldrh	r2, [r7, #6]
 800c2f6:	68fb      	ldr	r3, [r7, #12]
 800c2f8:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c2fc:	88fb      	ldrh	r3, [r7, #6]
 800c2fe:	68ba      	ldr	r2, [r7, #8]
 800c300:	2100      	movs	r1, #0
 800c302:	68f8      	ldr	r0, [r7, #12]
 800c304:	f000 fcdf 	bl	800ccc6 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c308:	2300      	movs	r3, #0
}
 800c30a:	4618      	mov	r0, r3
 800c30c:	3710      	adds	r7, #16
 800c30e:	46bd      	mov	sp, r7
 800c310:	bd80      	pop	{r7, pc}

0800c312 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800c312:	b580      	push	{r7, lr}
 800c314:	b084      	sub	sp, #16
 800c316:	af00      	add	r7, sp, #0
 800c318:	60f8      	str	r0, [r7, #12]
 800c31a:	60b9      	str	r1, [r7, #8]
 800c31c:	4613      	mov	r3, r2
 800c31e:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c320:	88fb      	ldrh	r3, [r7, #6]
 800c322:	68ba      	ldr	r2, [r7, #8]
 800c324:	2100      	movs	r1, #0
 800c326:	68f8      	ldr	r0, [r7, #12]
 800c328:	f000 fccd 	bl	800ccc6 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c32c:	2300      	movs	r3, #0
}
 800c32e:	4618      	mov	r0, r3
 800c330:	3710      	adds	r7, #16
 800c332:	46bd      	mov	sp, r7
 800c334:	bd80      	pop	{r7, pc}

0800c336 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800c336:	b580      	push	{r7, lr}
 800c338:	b082      	sub	sp, #8
 800c33a:	af00      	add	r7, sp, #0
 800c33c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800c33e:	687b      	ldr	r3, [r7, #4]
 800c340:	2204      	movs	r2, #4
 800c342:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800c346:	2300      	movs	r3, #0
 800c348:	2200      	movs	r2, #0
 800c34a:	2100      	movs	r1, #0
 800c34c:	6878      	ldr	r0, [r7, #4]
 800c34e:	f000 fc97 	bl	800cc80 <USBD_LL_Transmit>

  return USBD_OK;
 800c352:	2300      	movs	r3, #0
}
 800c354:	4618      	mov	r0, r3
 800c356:	3708      	adds	r7, #8
 800c358:	46bd      	mov	sp, r7
 800c35a:	bd80      	pop	{r7, pc}

0800c35c <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800c35c:	b580      	push	{r7, lr}
 800c35e:	b082      	sub	sp, #8
 800c360:	af00      	add	r7, sp, #0
 800c362:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800c364:	687b      	ldr	r3, [r7, #4]
 800c366:	2205      	movs	r2, #5
 800c368:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c36c:	2300      	movs	r3, #0
 800c36e:	2200      	movs	r2, #0
 800c370:	2100      	movs	r1, #0
 800c372:	6878      	ldr	r0, [r7, #4]
 800c374:	f000 fca7 	bl	800ccc6 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c378:	2300      	movs	r3, #0
}
 800c37a:	4618      	mov	r0, r3
 800c37c:	3708      	adds	r7, #8
 800c37e:	46bd      	mov	sp, r7
 800c380:	bd80      	pop	{r7, pc}
	...

0800c384 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800c384:	b580      	push	{r7, lr}
 800c386:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800c388:	2200      	movs	r2, #0
 800c38a:	4912      	ldr	r1, [pc, #72]	; (800c3d4 <MX_USB_DEVICE_Init+0x50>)
 800c38c:	4812      	ldr	r0, [pc, #72]	; (800c3d8 <MX_USB_DEVICE_Init+0x54>)
 800c38e:	f7fe ff26 	bl	800b1de <USBD_Init>
 800c392:	4603      	mov	r3, r0
 800c394:	2b00      	cmp	r3, #0
 800c396:	d001      	beq.n	800c39c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800c398:	f7f7 fb44 	bl	8003a24 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800c39c:	490f      	ldr	r1, [pc, #60]	; (800c3dc <MX_USB_DEVICE_Init+0x58>)
 800c39e:	480e      	ldr	r0, [pc, #56]	; (800c3d8 <MX_USB_DEVICE_Init+0x54>)
 800c3a0:	f7fe ff48 	bl	800b234 <USBD_RegisterClass>
 800c3a4:	4603      	mov	r3, r0
 800c3a6:	2b00      	cmp	r3, #0
 800c3a8:	d001      	beq.n	800c3ae <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800c3aa:	f7f7 fb3b 	bl	8003a24 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800c3ae:	490c      	ldr	r1, [pc, #48]	; (800c3e0 <MX_USB_DEVICE_Init+0x5c>)
 800c3b0:	4809      	ldr	r0, [pc, #36]	; (800c3d8 <MX_USB_DEVICE_Init+0x54>)
 800c3b2:	f7fe fe79 	bl	800b0a8 <USBD_CDC_RegisterInterface>
 800c3b6:	4603      	mov	r3, r0
 800c3b8:	2b00      	cmp	r3, #0
 800c3ba:	d001      	beq.n	800c3c0 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800c3bc:	f7f7 fb32 	bl	8003a24 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800c3c0:	4805      	ldr	r0, [pc, #20]	; (800c3d8 <MX_USB_DEVICE_Init+0x54>)
 800c3c2:	f7fe ff50 	bl	800b266 <USBD_Start>
 800c3c6:	4603      	mov	r3, r0
 800c3c8:	2b00      	cmp	r3, #0
 800c3ca:	d001      	beq.n	800c3d0 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800c3cc:	f7f7 fb2a 	bl	8003a24 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800c3d0:	bf00      	nop
 800c3d2:	bd80      	pop	{r7, pc}
 800c3d4:	20000158 	.word	0x20000158
 800c3d8:	200008ac 	.word	0x200008ac
 800c3dc:	2000003c 	.word	0x2000003c
 800c3e0:	20000140 	.word	0x20000140

0800c3e4 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800c3e4:	b580      	push	{r7, lr}
 800c3e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800c3e8:	2200      	movs	r2, #0
 800c3ea:	4905      	ldr	r1, [pc, #20]	; (800c400 <CDC_Init_FS+0x1c>)
 800c3ec:	4805      	ldr	r0, [pc, #20]	; (800c404 <CDC_Init_FS+0x20>)
 800c3ee:	f7fe fe71 	bl	800b0d4 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800c3f2:	4905      	ldr	r1, [pc, #20]	; (800c408 <CDC_Init_FS+0x24>)
 800c3f4:	4803      	ldr	r0, [pc, #12]	; (800c404 <CDC_Init_FS+0x20>)
 800c3f6:	f7fe fe86 	bl	800b106 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800c3fa:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800c3fc:	4618      	mov	r0, r3
 800c3fe:	bd80      	pop	{r7, pc}
 800c400:	20001370 	.word	0x20001370
 800c404:	200008ac 	.word	0x200008ac
 800c408:	20000b70 	.word	0x20000b70

0800c40c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800c40c:	b480      	push	{r7}
 800c40e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800c410:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800c412:	4618      	mov	r0, r3
 800c414:	46bd      	mov	sp, r7
 800c416:	bc80      	pop	{r7}
 800c418:	4770      	bx	lr
	...

0800c41c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800c41c:	b480      	push	{r7}
 800c41e:	b083      	sub	sp, #12
 800c420:	af00      	add	r7, sp, #0
 800c422:	4603      	mov	r3, r0
 800c424:	6039      	str	r1, [r7, #0]
 800c426:	71fb      	strb	r3, [r7, #7]
 800c428:	4613      	mov	r3, r2
 800c42a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800c42c:	79fb      	ldrb	r3, [r7, #7]
 800c42e:	2b23      	cmp	r3, #35	; 0x23
 800c430:	d85c      	bhi.n	800c4ec <CDC_Control_FS+0xd0>
 800c432:	a201      	add	r2, pc, #4	; (adr r2, 800c438 <CDC_Control_FS+0x1c>)
 800c434:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c438:	0800c4ed 	.word	0x0800c4ed
 800c43c:	0800c4ed 	.word	0x0800c4ed
 800c440:	0800c4ed 	.word	0x0800c4ed
 800c444:	0800c4ed 	.word	0x0800c4ed
 800c448:	0800c4ed 	.word	0x0800c4ed
 800c44c:	0800c4ed 	.word	0x0800c4ed
 800c450:	0800c4ed 	.word	0x0800c4ed
 800c454:	0800c4ed 	.word	0x0800c4ed
 800c458:	0800c4ed 	.word	0x0800c4ed
 800c45c:	0800c4ed 	.word	0x0800c4ed
 800c460:	0800c4ed 	.word	0x0800c4ed
 800c464:	0800c4ed 	.word	0x0800c4ed
 800c468:	0800c4ed 	.word	0x0800c4ed
 800c46c:	0800c4ed 	.word	0x0800c4ed
 800c470:	0800c4ed 	.word	0x0800c4ed
 800c474:	0800c4ed 	.word	0x0800c4ed
 800c478:	0800c4ed 	.word	0x0800c4ed
 800c47c:	0800c4ed 	.word	0x0800c4ed
 800c480:	0800c4ed 	.word	0x0800c4ed
 800c484:	0800c4ed 	.word	0x0800c4ed
 800c488:	0800c4ed 	.word	0x0800c4ed
 800c48c:	0800c4ed 	.word	0x0800c4ed
 800c490:	0800c4ed 	.word	0x0800c4ed
 800c494:	0800c4ed 	.word	0x0800c4ed
 800c498:	0800c4ed 	.word	0x0800c4ed
 800c49c:	0800c4ed 	.word	0x0800c4ed
 800c4a0:	0800c4ed 	.word	0x0800c4ed
 800c4a4:	0800c4ed 	.word	0x0800c4ed
 800c4a8:	0800c4ed 	.word	0x0800c4ed
 800c4ac:	0800c4ed 	.word	0x0800c4ed
 800c4b0:	0800c4ed 	.word	0x0800c4ed
 800c4b4:	0800c4ed 	.word	0x0800c4ed
 800c4b8:	0800c4c9 	.word	0x0800c4c9
 800c4bc:	0800c4db 	.word	0x0800c4db
 800c4c0:	0800c4ed 	.word	0x0800c4ed
 800c4c4:	0800c4ed 	.word	0x0800c4ed
    static uint8_t lineCoding[7] // 115200bps, 1stop, no parity, 8bit

    = { 0x00, 0xC2, 0x01, 0x00, 0x00, 0x00, 0x08 };

    case CDC_SET_LINE_CODING:
      memcpy(lineCoding, pbuf, sizeof(lineCoding));
 800c4c8:	4b0c      	ldr	r3, [pc, #48]	; (800c4fc <CDC_Control_FS+0xe0>)
 800c4ca:	683a      	ldr	r2, [r7, #0]
 800c4cc:	6810      	ldr	r0, [r2, #0]
 800c4ce:	6018      	str	r0, [r3, #0]
 800c4d0:	8891      	ldrh	r1, [r2, #4]
 800c4d2:	7992      	ldrb	r2, [r2, #6]
 800c4d4:	8099      	strh	r1, [r3, #4]
 800c4d6:	719a      	strb	r2, [r3, #6]
    break;
 800c4d8:	e009      	b.n	800c4ee <CDC_Control_FS+0xd2>

    case CDC_GET_LINE_CODING:
      memcpy(pbuf, lineCoding, sizeof(lineCoding));
 800c4da:	683b      	ldr	r3, [r7, #0]
 800c4dc:	4a07      	ldr	r2, [pc, #28]	; (800c4fc <CDC_Control_FS+0xe0>)
 800c4de:	6810      	ldr	r0, [r2, #0]
 800c4e0:	6018      	str	r0, [r3, #0]
 800c4e2:	8891      	ldrh	r1, [r2, #4]
 800c4e4:	7992      	ldrb	r2, [r2, #6]
 800c4e6:	8099      	strh	r1, [r3, #4]
 800c4e8:	719a      	strb	r2, [r3, #6]
    break;
 800c4ea:	e000      	b.n	800c4ee <CDC_Control_FS+0xd2>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800c4ec:	bf00      	nop
  }

  return (USBD_OK);
 800c4ee:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800c4f0:	4618      	mov	r0, r3
 800c4f2:	370c      	adds	r7, #12
 800c4f4:	46bd      	mov	sp, r7
 800c4f6:	bc80      	pop	{r7}
 800c4f8:	4770      	bx	lr
 800c4fa:	bf00      	nop
 800c4fc:	20000150 	.word	0x20000150

0800c500 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800c500:	b580      	push	{r7, lr}
 800c502:	b082      	sub	sp, #8
 800c504:	af00      	add	r7, sp, #0
 800c506:	6078      	str	r0, [r7, #4]
 800c508:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800c50a:	6879      	ldr	r1, [r7, #4]
 800c50c:	4805      	ldr	r0, [pc, #20]	; (800c524 <CDC_Receive_FS+0x24>)
 800c50e:	f7fe fdfa 	bl	800b106 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800c512:	4804      	ldr	r0, [pc, #16]	; (800c524 <CDC_Receive_FS+0x24>)
 800c514:	f7fe fe39 	bl	800b18a <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800c518:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800c51a:	4618      	mov	r0, r3
 800c51c:	3708      	adds	r7, #8
 800c51e:	46bd      	mov	sp, r7
 800c520:	bd80      	pop	{r7, pc}
 800c522:	bf00      	nop
 800c524:	200008ac 	.word	0x200008ac

0800c528 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800c528:	b580      	push	{r7, lr}
 800c52a:	b084      	sub	sp, #16
 800c52c:	af00      	add	r7, sp, #0
 800c52e:	6078      	str	r0, [r7, #4]
 800c530:	460b      	mov	r3, r1
 800c532:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800c534:	2300      	movs	r3, #0
 800c536:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800c538:	4b0d      	ldr	r3, [pc, #52]	; (800c570 <CDC_Transmit_FS+0x48>)
 800c53a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c53e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800c540:	68bb      	ldr	r3, [r7, #8]
 800c542:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800c546:	2b00      	cmp	r3, #0
 800c548:	d001      	beq.n	800c54e <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800c54a:	2301      	movs	r3, #1
 800c54c:	e00b      	b.n	800c566 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800c54e:	887b      	ldrh	r3, [r7, #2]
 800c550:	461a      	mov	r2, r3
 800c552:	6879      	ldr	r1, [r7, #4]
 800c554:	4806      	ldr	r0, [pc, #24]	; (800c570 <CDC_Transmit_FS+0x48>)
 800c556:	f7fe fdbd 	bl	800b0d4 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800c55a:	4805      	ldr	r0, [pc, #20]	; (800c570 <CDC_Transmit_FS+0x48>)
 800c55c:	f7fe fde6 	bl	800b12c <USBD_CDC_TransmitPacket>
 800c560:	4603      	mov	r3, r0
 800c562:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800c564:	7bfb      	ldrb	r3, [r7, #15]
}
 800c566:	4618      	mov	r0, r3
 800c568:	3710      	adds	r7, #16
 800c56a:	46bd      	mov	sp, r7
 800c56c:	bd80      	pop	{r7, pc}
 800c56e:	bf00      	nop
 800c570:	200008ac 	.word	0x200008ac

0800c574 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c574:	b480      	push	{r7}
 800c576:	b083      	sub	sp, #12
 800c578:	af00      	add	r7, sp, #0
 800c57a:	4603      	mov	r3, r0
 800c57c:	6039      	str	r1, [r7, #0]
 800c57e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800c580:	683b      	ldr	r3, [r7, #0]
 800c582:	2212      	movs	r2, #18
 800c584:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800c586:	4b03      	ldr	r3, [pc, #12]	; (800c594 <USBD_FS_DeviceDescriptor+0x20>)
}
 800c588:	4618      	mov	r0, r3
 800c58a:	370c      	adds	r7, #12
 800c58c:	46bd      	mov	sp, r7
 800c58e:	bc80      	pop	{r7}
 800c590:	4770      	bx	lr
 800c592:	bf00      	nop
 800c594:	20000174 	.word	0x20000174

0800c598 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c598:	b480      	push	{r7}
 800c59a:	b083      	sub	sp, #12
 800c59c:	af00      	add	r7, sp, #0
 800c59e:	4603      	mov	r3, r0
 800c5a0:	6039      	str	r1, [r7, #0]
 800c5a2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800c5a4:	683b      	ldr	r3, [r7, #0]
 800c5a6:	2204      	movs	r2, #4
 800c5a8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800c5aa:	4b03      	ldr	r3, [pc, #12]	; (800c5b8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800c5ac:	4618      	mov	r0, r3
 800c5ae:	370c      	adds	r7, #12
 800c5b0:	46bd      	mov	sp, r7
 800c5b2:	bc80      	pop	{r7}
 800c5b4:	4770      	bx	lr
 800c5b6:	bf00      	nop
 800c5b8:	20000188 	.word	0x20000188

0800c5bc <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c5bc:	b580      	push	{r7, lr}
 800c5be:	b082      	sub	sp, #8
 800c5c0:	af00      	add	r7, sp, #0
 800c5c2:	4603      	mov	r3, r0
 800c5c4:	6039      	str	r1, [r7, #0]
 800c5c6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800c5c8:	79fb      	ldrb	r3, [r7, #7]
 800c5ca:	2b00      	cmp	r3, #0
 800c5cc:	d105      	bne.n	800c5da <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800c5ce:	683a      	ldr	r2, [r7, #0]
 800c5d0:	4907      	ldr	r1, [pc, #28]	; (800c5f0 <USBD_FS_ProductStrDescriptor+0x34>)
 800c5d2:	4808      	ldr	r0, [pc, #32]	; (800c5f4 <USBD_FS_ProductStrDescriptor+0x38>)
 800c5d4:	f7ff fdf8 	bl	800c1c8 <USBD_GetString>
 800c5d8:	e004      	b.n	800c5e4 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800c5da:	683a      	ldr	r2, [r7, #0]
 800c5dc:	4904      	ldr	r1, [pc, #16]	; (800c5f0 <USBD_FS_ProductStrDescriptor+0x34>)
 800c5de:	4805      	ldr	r0, [pc, #20]	; (800c5f4 <USBD_FS_ProductStrDescriptor+0x38>)
 800c5e0:	f7ff fdf2 	bl	800c1c8 <USBD_GetString>
  }
  return USBD_StrDesc;
 800c5e4:	4b02      	ldr	r3, [pc, #8]	; (800c5f0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800c5e6:	4618      	mov	r0, r3
 800c5e8:	3708      	adds	r7, #8
 800c5ea:	46bd      	mov	sp, r7
 800c5ec:	bd80      	pop	{r7, pc}
 800c5ee:	bf00      	nop
 800c5f0:	20001b70 	.word	0x20001b70
 800c5f4:	0801120c 	.word	0x0801120c

0800c5f8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c5f8:	b580      	push	{r7, lr}
 800c5fa:	b082      	sub	sp, #8
 800c5fc:	af00      	add	r7, sp, #0
 800c5fe:	4603      	mov	r3, r0
 800c600:	6039      	str	r1, [r7, #0]
 800c602:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800c604:	683a      	ldr	r2, [r7, #0]
 800c606:	4904      	ldr	r1, [pc, #16]	; (800c618 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800c608:	4804      	ldr	r0, [pc, #16]	; (800c61c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800c60a:	f7ff fddd 	bl	800c1c8 <USBD_GetString>
  return USBD_StrDesc;
 800c60e:	4b02      	ldr	r3, [pc, #8]	; (800c618 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800c610:	4618      	mov	r0, r3
 800c612:	3708      	adds	r7, #8
 800c614:	46bd      	mov	sp, r7
 800c616:	bd80      	pop	{r7, pc}
 800c618:	20001b70 	.word	0x20001b70
 800c61c:	08011224 	.word	0x08011224

0800c620 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c620:	b580      	push	{r7, lr}
 800c622:	b082      	sub	sp, #8
 800c624:	af00      	add	r7, sp, #0
 800c626:	4603      	mov	r3, r0
 800c628:	6039      	str	r1, [r7, #0]
 800c62a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800c62c:	683b      	ldr	r3, [r7, #0]
 800c62e:	221a      	movs	r2, #26
 800c630:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800c632:	f000 f843 	bl	800c6bc <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800c636:	4b02      	ldr	r3, [pc, #8]	; (800c640 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800c638:	4618      	mov	r0, r3
 800c63a:	3708      	adds	r7, #8
 800c63c:	46bd      	mov	sp, r7
 800c63e:	bd80      	pop	{r7, pc}
 800c640:	2000018c 	.word	0x2000018c

0800c644 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c644:	b580      	push	{r7, lr}
 800c646:	b082      	sub	sp, #8
 800c648:	af00      	add	r7, sp, #0
 800c64a:	4603      	mov	r3, r0
 800c64c:	6039      	str	r1, [r7, #0]
 800c64e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800c650:	79fb      	ldrb	r3, [r7, #7]
 800c652:	2b00      	cmp	r3, #0
 800c654:	d105      	bne.n	800c662 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800c656:	683a      	ldr	r2, [r7, #0]
 800c658:	4907      	ldr	r1, [pc, #28]	; (800c678 <USBD_FS_ConfigStrDescriptor+0x34>)
 800c65a:	4808      	ldr	r0, [pc, #32]	; (800c67c <USBD_FS_ConfigStrDescriptor+0x38>)
 800c65c:	f7ff fdb4 	bl	800c1c8 <USBD_GetString>
 800c660:	e004      	b.n	800c66c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800c662:	683a      	ldr	r2, [r7, #0]
 800c664:	4904      	ldr	r1, [pc, #16]	; (800c678 <USBD_FS_ConfigStrDescriptor+0x34>)
 800c666:	4805      	ldr	r0, [pc, #20]	; (800c67c <USBD_FS_ConfigStrDescriptor+0x38>)
 800c668:	f7ff fdae 	bl	800c1c8 <USBD_GetString>
  }
  return USBD_StrDesc;
 800c66c:	4b02      	ldr	r3, [pc, #8]	; (800c678 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800c66e:	4618      	mov	r0, r3
 800c670:	3708      	adds	r7, #8
 800c672:	46bd      	mov	sp, r7
 800c674:	bd80      	pop	{r7, pc}
 800c676:	bf00      	nop
 800c678:	20001b70 	.word	0x20001b70
 800c67c:	08011238 	.word	0x08011238

0800c680 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c680:	b580      	push	{r7, lr}
 800c682:	b082      	sub	sp, #8
 800c684:	af00      	add	r7, sp, #0
 800c686:	4603      	mov	r3, r0
 800c688:	6039      	str	r1, [r7, #0]
 800c68a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800c68c:	79fb      	ldrb	r3, [r7, #7]
 800c68e:	2b00      	cmp	r3, #0
 800c690:	d105      	bne.n	800c69e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800c692:	683a      	ldr	r2, [r7, #0]
 800c694:	4907      	ldr	r1, [pc, #28]	; (800c6b4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800c696:	4808      	ldr	r0, [pc, #32]	; (800c6b8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800c698:	f7ff fd96 	bl	800c1c8 <USBD_GetString>
 800c69c:	e004      	b.n	800c6a8 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800c69e:	683a      	ldr	r2, [r7, #0]
 800c6a0:	4904      	ldr	r1, [pc, #16]	; (800c6b4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800c6a2:	4805      	ldr	r0, [pc, #20]	; (800c6b8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800c6a4:	f7ff fd90 	bl	800c1c8 <USBD_GetString>
  }
  return USBD_StrDesc;
 800c6a8:	4b02      	ldr	r3, [pc, #8]	; (800c6b4 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800c6aa:	4618      	mov	r0, r3
 800c6ac:	3708      	adds	r7, #8
 800c6ae:	46bd      	mov	sp, r7
 800c6b0:	bd80      	pop	{r7, pc}
 800c6b2:	bf00      	nop
 800c6b4:	20001b70 	.word	0x20001b70
 800c6b8:	08011244 	.word	0x08011244

0800c6bc <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800c6bc:	b580      	push	{r7, lr}
 800c6be:	b084      	sub	sp, #16
 800c6c0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800c6c2:	4b0f      	ldr	r3, [pc, #60]	; (800c700 <Get_SerialNum+0x44>)
 800c6c4:	681b      	ldr	r3, [r3, #0]
 800c6c6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800c6c8:	4b0e      	ldr	r3, [pc, #56]	; (800c704 <Get_SerialNum+0x48>)
 800c6ca:	681b      	ldr	r3, [r3, #0]
 800c6cc:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800c6ce:	4b0e      	ldr	r3, [pc, #56]	; (800c708 <Get_SerialNum+0x4c>)
 800c6d0:	681b      	ldr	r3, [r3, #0]
 800c6d2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800c6d4:	68fa      	ldr	r2, [r7, #12]
 800c6d6:	687b      	ldr	r3, [r7, #4]
 800c6d8:	4413      	add	r3, r2
 800c6da:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800c6dc:	68fb      	ldr	r3, [r7, #12]
 800c6de:	2b00      	cmp	r3, #0
 800c6e0:	d009      	beq.n	800c6f6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800c6e2:	2208      	movs	r2, #8
 800c6e4:	4909      	ldr	r1, [pc, #36]	; (800c70c <Get_SerialNum+0x50>)
 800c6e6:	68f8      	ldr	r0, [r7, #12]
 800c6e8:	f000 f814 	bl	800c714 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800c6ec:	2204      	movs	r2, #4
 800c6ee:	4908      	ldr	r1, [pc, #32]	; (800c710 <Get_SerialNum+0x54>)
 800c6f0:	68b8      	ldr	r0, [r7, #8]
 800c6f2:	f000 f80f 	bl	800c714 <IntToUnicode>
  }
}
 800c6f6:	bf00      	nop
 800c6f8:	3710      	adds	r7, #16
 800c6fa:	46bd      	mov	sp, r7
 800c6fc:	bd80      	pop	{r7, pc}
 800c6fe:	bf00      	nop
 800c700:	1fff7a10 	.word	0x1fff7a10
 800c704:	1fff7a14 	.word	0x1fff7a14
 800c708:	1fff7a18 	.word	0x1fff7a18
 800c70c:	2000018e 	.word	0x2000018e
 800c710:	2000019e 	.word	0x2000019e

0800c714 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800c714:	b480      	push	{r7}
 800c716:	b087      	sub	sp, #28
 800c718:	af00      	add	r7, sp, #0
 800c71a:	60f8      	str	r0, [r7, #12]
 800c71c:	60b9      	str	r1, [r7, #8]
 800c71e:	4613      	mov	r3, r2
 800c720:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800c722:	2300      	movs	r3, #0
 800c724:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800c726:	2300      	movs	r3, #0
 800c728:	75fb      	strb	r3, [r7, #23]
 800c72a:	e027      	b.n	800c77c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800c72c:	68fb      	ldr	r3, [r7, #12]
 800c72e:	0f1b      	lsrs	r3, r3, #28
 800c730:	2b09      	cmp	r3, #9
 800c732:	d80b      	bhi.n	800c74c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800c734:	68fb      	ldr	r3, [r7, #12]
 800c736:	0f1b      	lsrs	r3, r3, #28
 800c738:	b2da      	uxtb	r2, r3
 800c73a:	7dfb      	ldrb	r3, [r7, #23]
 800c73c:	005b      	lsls	r3, r3, #1
 800c73e:	4619      	mov	r1, r3
 800c740:	68bb      	ldr	r3, [r7, #8]
 800c742:	440b      	add	r3, r1
 800c744:	3230      	adds	r2, #48	; 0x30
 800c746:	b2d2      	uxtb	r2, r2
 800c748:	701a      	strb	r2, [r3, #0]
 800c74a:	e00a      	b.n	800c762 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800c74c:	68fb      	ldr	r3, [r7, #12]
 800c74e:	0f1b      	lsrs	r3, r3, #28
 800c750:	b2da      	uxtb	r2, r3
 800c752:	7dfb      	ldrb	r3, [r7, #23]
 800c754:	005b      	lsls	r3, r3, #1
 800c756:	4619      	mov	r1, r3
 800c758:	68bb      	ldr	r3, [r7, #8]
 800c75a:	440b      	add	r3, r1
 800c75c:	3237      	adds	r2, #55	; 0x37
 800c75e:	b2d2      	uxtb	r2, r2
 800c760:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800c762:	68fb      	ldr	r3, [r7, #12]
 800c764:	011b      	lsls	r3, r3, #4
 800c766:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800c768:	7dfb      	ldrb	r3, [r7, #23]
 800c76a:	005b      	lsls	r3, r3, #1
 800c76c:	3301      	adds	r3, #1
 800c76e:	68ba      	ldr	r2, [r7, #8]
 800c770:	4413      	add	r3, r2
 800c772:	2200      	movs	r2, #0
 800c774:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800c776:	7dfb      	ldrb	r3, [r7, #23]
 800c778:	3301      	adds	r3, #1
 800c77a:	75fb      	strb	r3, [r7, #23]
 800c77c:	7dfa      	ldrb	r2, [r7, #23]
 800c77e:	79fb      	ldrb	r3, [r7, #7]
 800c780:	429a      	cmp	r2, r3
 800c782:	d3d3      	bcc.n	800c72c <IntToUnicode+0x18>
  }
}
 800c784:	bf00      	nop
 800c786:	bf00      	nop
 800c788:	371c      	adds	r7, #28
 800c78a:	46bd      	mov	sp, r7
 800c78c:	bc80      	pop	{r7}
 800c78e:	4770      	bx	lr

0800c790 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800c790:	b580      	push	{r7, lr}
 800c792:	b08a      	sub	sp, #40	; 0x28
 800c794:	af00      	add	r7, sp, #0
 800c796:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c798:	f107 0314 	add.w	r3, r7, #20
 800c79c:	2200      	movs	r2, #0
 800c79e:	601a      	str	r2, [r3, #0]
 800c7a0:	605a      	str	r2, [r3, #4]
 800c7a2:	609a      	str	r2, [r3, #8]
 800c7a4:	60da      	str	r2, [r3, #12]
 800c7a6:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800c7a8:	687b      	ldr	r3, [r7, #4]
 800c7aa:	681b      	ldr	r3, [r3, #0]
 800c7ac:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800c7b0:	d13a      	bne.n	800c828 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800c7b2:	2300      	movs	r3, #0
 800c7b4:	613b      	str	r3, [r7, #16]
 800c7b6:	4b1e      	ldr	r3, [pc, #120]	; (800c830 <HAL_PCD_MspInit+0xa0>)
 800c7b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c7ba:	4a1d      	ldr	r2, [pc, #116]	; (800c830 <HAL_PCD_MspInit+0xa0>)
 800c7bc:	f043 0301 	orr.w	r3, r3, #1
 800c7c0:	6313      	str	r3, [r2, #48]	; 0x30
 800c7c2:	4b1b      	ldr	r3, [pc, #108]	; (800c830 <HAL_PCD_MspInit+0xa0>)
 800c7c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c7c6:	f003 0301 	and.w	r3, r3, #1
 800c7ca:	613b      	str	r3, [r7, #16]
 800c7cc:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800c7ce:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800c7d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c7d4:	2302      	movs	r3, #2
 800c7d6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c7d8:	2300      	movs	r3, #0
 800c7da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c7dc:	2303      	movs	r3, #3
 800c7de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800c7e0:	230a      	movs	r3, #10
 800c7e2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c7e4:	f107 0314 	add.w	r3, r7, #20
 800c7e8:	4619      	mov	r1, r3
 800c7ea:	4812      	ldr	r0, [pc, #72]	; (800c834 <HAL_PCD_MspInit+0xa4>)
 800c7ec:	f7f9 f83e 	bl	800586c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800c7f0:	4b0f      	ldr	r3, [pc, #60]	; (800c830 <HAL_PCD_MspInit+0xa0>)
 800c7f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c7f4:	4a0e      	ldr	r2, [pc, #56]	; (800c830 <HAL_PCD_MspInit+0xa0>)
 800c7f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c7fa:	6353      	str	r3, [r2, #52]	; 0x34
 800c7fc:	2300      	movs	r3, #0
 800c7fe:	60fb      	str	r3, [r7, #12]
 800c800:	4b0b      	ldr	r3, [pc, #44]	; (800c830 <HAL_PCD_MspInit+0xa0>)
 800c802:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c804:	4a0a      	ldr	r2, [pc, #40]	; (800c830 <HAL_PCD_MspInit+0xa0>)
 800c806:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800c80a:	6453      	str	r3, [r2, #68]	; 0x44
 800c80c:	4b08      	ldr	r3, [pc, #32]	; (800c830 <HAL_PCD_MspInit+0xa0>)
 800c80e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c810:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c814:	60fb      	str	r3, [r7, #12]
 800c816:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800c818:	2200      	movs	r2, #0
 800c81a:	2100      	movs	r1, #0
 800c81c:	2043      	movs	r0, #67	; 0x43
 800c81e:	f7f8 fcfa 	bl	8005216 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800c822:	2043      	movs	r0, #67	; 0x43
 800c824:	f7f8 fd13 	bl	800524e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800c828:	bf00      	nop
 800c82a:	3728      	adds	r7, #40	; 0x28
 800c82c:	46bd      	mov	sp, r7
 800c82e:	bd80      	pop	{r7, pc}
 800c830:	40023800 	.word	0x40023800
 800c834:	40020000 	.word	0x40020000

0800c838 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c838:	b580      	push	{r7, lr}
 800c83a:	b082      	sub	sp, #8
 800c83c:	af00      	add	r7, sp, #0
 800c83e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800c840:	687b      	ldr	r3, [r7, #4]
 800c842:	f8d3 23fc 	ldr.w	r2, [r3, #1020]	; 0x3fc
 800c846:	687b      	ldr	r3, [r7, #4]
 800c848:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800c84c:	4619      	mov	r1, r3
 800c84e:	4610      	mov	r0, r2
 800c850:	f7fe fd51 	bl	800b2f6 <USBD_LL_SetupStage>
}
 800c854:	bf00      	nop
 800c856:	3708      	adds	r7, #8
 800c858:	46bd      	mov	sp, r7
 800c85a:	bd80      	pop	{r7, pc}

0800c85c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c85c:	b580      	push	{r7, lr}
 800c85e:	b082      	sub	sp, #8
 800c860:	af00      	add	r7, sp, #0
 800c862:	6078      	str	r0, [r7, #4]
 800c864:	460b      	mov	r3, r1
 800c866:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800c868:	687b      	ldr	r3, [r7, #4]
 800c86a:	f8d3 03fc 	ldr.w	r0, [r3, #1020]	; 0x3fc
 800c86e:	78fa      	ldrb	r2, [r7, #3]
 800c870:	6879      	ldr	r1, [r7, #4]
 800c872:	4613      	mov	r3, r2
 800c874:	00db      	lsls	r3, r3, #3
 800c876:	1a9b      	subs	r3, r3, r2
 800c878:	009b      	lsls	r3, r3, #2
 800c87a:	440b      	add	r3, r1
 800c87c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800c880:	681a      	ldr	r2, [r3, #0]
 800c882:	78fb      	ldrb	r3, [r7, #3]
 800c884:	4619      	mov	r1, r3
 800c886:	f7fe fd83 	bl	800b390 <USBD_LL_DataOutStage>
}
 800c88a:	bf00      	nop
 800c88c:	3708      	adds	r7, #8
 800c88e:	46bd      	mov	sp, r7
 800c890:	bd80      	pop	{r7, pc}

0800c892 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c892:	b580      	push	{r7, lr}
 800c894:	b082      	sub	sp, #8
 800c896:	af00      	add	r7, sp, #0
 800c898:	6078      	str	r0, [r7, #4]
 800c89a:	460b      	mov	r3, r1
 800c89c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800c89e:	687b      	ldr	r3, [r7, #4]
 800c8a0:	f8d3 03fc 	ldr.w	r0, [r3, #1020]	; 0x3fc
 800c8a4:	78fa      	ldrb	r2, [r7, #3]
 800c8a6:	6879      	ldr	r1, [r7, #4]
 800c8a8:	4613      	mov	r3, r2
 800c8aa:	00db      	lsls	r3, r3, #3
 800c8ac:	1a9b      	subs	r3, r3, r2
 800c8ae:	009b      	lsls	r3, r3, #2
 800c8b0:	440b      	add	r3, r1
 800c8b2:	3348      	adds	r3, #72	; 0x48
 800c8b4:	681a      	ldr	r2, [r3, #0]
 800c8b6:	78fb      	ldrb	r3, [r7, #3]
 800c8b8:	4619      	mov	r1, r3
 800c8ba:	f7fe fdda 	bl	800b472 <USBD_LL_DataInStage>
}
 800c8be:	bf00      	nop
 800c8c0:	3708      	adds	r7, #8
 800c8c2:	46bd      	mov	sp, r7
 800c8c4:	bd80      	pop	{r7, pc}

0800c8c6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c8c6:	b580      	push	{r7, lr}
 800c8c8:	b082      	sub	sp, #8
 800c8ca:	af00      	add	r7, sp, #0
 800c8cc:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800c8ce:	687b      	ldr	r3, [r7, #4]
 800c8d0:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 800c8d4:	4618      	mov	r0, r3
 800c8d6:	f7fe feea 	bl	800b6ae <USBD_LL_SOF>
}
 800c8da:	bf00      	nop
 800c8dc:	3708      	adds	r7, #8
 800c8de:	46bd      	mov	sp, r7
 800c8e0:	bd80      	pop	{r7, pc}

0800c8e2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c8e2:	b580      	push	{r7, lr}
 800c8e4:	b084      	sub	sp, #16
 800c8e6:	af00      	add	r7, sp, #0
 800c8e8:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800c8ea:	2301      	movs	r3, #1
 800c8ec:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800c8ee:	687b      	ldr	r3, [r7, #4]
 800c8f0:	68db      	ldr	r3, [r3, #12]
 800c8f2:	2b00      	cmp	r3, #0
 800c8f4:	d102      	bne.n	800c8fc <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800c8f6:	2300      	movs	r3, #0
 800c8f8:	73fb      	strb	r3, [r7, #15]
 800c8fa:	e008      	b.n	800c90e <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800c8fc:	687b      	ldr	r3, [r7, #4]
 800c8fe:	68db      	ldr	r3, [r3, #12]
 800c900:	2b02      	cmp	r3, #2
 800c902:	d102      	bne.n	800c90a <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800c904:	2301      	movs	r3, #1
 800c906:	73fb      	strb	r3, [r7, #15]
 800c908:	e001      	b.n	800c90e <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800c90a:	f7f7 f88b 	bl	8003a24 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800c90e:	687b      	ldr	r3, [r7, #4]
 800c910:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 800c914:	7bfa      	ldrb	r2, [r7, #15]
 800c916:	4611      	mov	r1, r2
 800c918:	4618      	mov	r0, r3
 800c91a:	f7fe fe90 	bl	800b63e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800c91e:	687b      	ldr	r3, [r7, #4]
 800c920:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 800c924:	4618      	mov	r0, r3
 800c926:	f7fe fe49 	bl	800b5bc <USBD_LL_Reset>
}
 800c92a:	bf00      	nop
 800c92c:	3710      	adds	r7, #16
 800c92e:	46bd      	mov	sp, r7
 800c930:	bd80      	pop	{r7, pc}
	...

0800c934 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c934:	b580      	push	{r7, lr}
 800c936:	b082      	sub	sp, #8
 800c938:	af00      	add	r7, sp, #0
 800c93a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800c93c:	687b      	ldr	r3, [r7, #4]
 800c93e:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 800c942:	4618      	mov	r0, r3
 800c944:	f7fe fe8a 	bl	800b65c <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800c948:	687b      	ldr	r3, [r7, #4]
 800c94a:	681b      	ldr	r3, [r3, #0]
 800c94c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800c950:	681b      	ldr	r3, [r3, #0]
 800c952:	687a      	ldr	r2, [r7, #4]
 800c954:	6812      	ldr	r2, [r2, #0]
 800c956:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800c95a:	f043 0301 	orr.w	r3, r3, #1
 800c95e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800c960:	687b      	ldr	r3, [r7, #4]
 800c962:	6a1b      	ldr	r3, [r3, #32]
 800c964:	2b00      	cmp	r3, #0
 800c966:	d005      	beq.n	800c974 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c968:	4b04      	ldr	r3, [pc, #16]	; (800c97c <HAL_PCD_SuspendCallback+0x48>)
 800c96a:	691b      	ldr	r3, [r3, #16]
 800c96c:	4a03      	ldr	r2, [pc, #12]	; (800c97c <HAL_PCD_SuspendCallback+0x48>)
 800c96e:	f043 0306 	orr.w	r3, r3, #6
 800c972:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800c974:	bf00      	nop
 800c976:	3708      	adds	r7, #8
 800c978:	46bd      	mov	sp, r7
 800c97a:	bd80      	pop	{r7, pc}
 800c97c:	e000ed00 	.word	0xe000ed00

0800c980 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c980:	b580      	push	{r7, lr}
 800c982:	b082      	sub	sp, #8
 800c984:	af00      	add	r7, sp, #0
 800c986:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800c988:	687b      	ldr	r3, [r7, #4]
 800c98a:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 800c98e:	4618      	mov	r0, r3
 800c990:	f7fe fe78 	bl	800b684 <USBD_LL_Resume>
}
 800c994:	bf00      	nop
 800c996:	3708      	adds	r7, #8
 800c998:	46bd      	mov	sp, r7
 800c99a:	bd80      	pop	{r7, pc}

0800c99c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c99c:	b580      	push	{r7, lr}
 800c99e:	b082      	sub	sp, #8
 800c9a0:	af00      	add	r7, sp, #0
 800c9a2:	6078      	str	r0, [r7, #4]
 800c9a4:	460b      	mov	r3, r1
 800c9a6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800c9a8:	687b      	ldr	r3, [r7, #4]
 800c9aa:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 800c9ae:	78fa      	ldrb	r2, [r7, #3]
 800c9b0:	4611      	mov	r1, r2
 800c9b2:	4618      	mov	r0, r3
 800c9b4:	f7fe fea1 	bl	800b6fa <USBD_LL_IsoOUTIncomplete>
}
 800c9b8:	bf00      	nop
 800c9ba:	3708      	adds	r7, #8
 800c9bc:	46bd      	mov	sp, r7
 800c9be:	bd80      	pop	{r7, pc}

0800c9c0 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c9c0:	b580      	push	{r7, lr}
 800c9c2:	b082      	sub	sp, #8
 800c9c4:	af00      	add	r7, sp, #0
 800c9c6:	6078      	str	r0, [r7, #4]
 800c9c8:	460b      	mov	r3, r1
 800c9ca:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800c9cc:	687b      	ldr	r3, [r7, #4]
 800c9ce:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 800c9d2:	78fa      	ldrb	r2, [r7, #3]
 800c9d4:	4611      	mov	r1, r2
 800c9d6:	4618      	mov	r0, r3
 800c9d8:	f7fe fe83 	bl	800b6e2 <USBD_LL_IsoINIncomplete>
}
 800c9dc:	bf00      	nop
 800c9de:	3708      	adds	r7, #8
 800c9e0:	46bd      	mov	sp, r7
 800c9e2:	bd80      	pop	{r7, pc}

0800c9e4 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c9e4:	b580      	push	{r7, lr}
 800c9e6:	b082      	sub	sp, #8
 800c9e8:	af00      	add	r7, sp, #0
 800c9ea:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800c9ec:	687b      	ldr	r3, [r7, #4]
 800c9ee:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 800c9f2:	4618      	mov	r0, r3
 800c9f4:	f7fe fe8d 	bl	800b712 <USBD_LL_DevConnected>
}
 800c9f8:	bf00      	nop
 800c9fa:	3708      	adds	r7, #8
 800c9fc:	46bd      	mov	sp, r7
 800c9fe:	bd80      	pop	{r7, pc}

0800ca00 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ca00:	b580      	push	{r7, lr}
 800ca02:	b082      	sub	sp, #8
 800ca04:	af00      	add	r7, sp, #0
 800ca06:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800ca08:	687b      	ldr	r3, [r7, #4]
 800ca0a:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 800ca0e:	4618      	mov	r0, r3
 800ca10:	f7fe fe89 	bl	800b726 <USBD_LL_DevDisconnected>
}
 800ca14:	bf00      	nop
 800ca16:	3708      	adds	r7, #8
 800ca18:	46bd      	mov	sp, r7
 800ca1a:	bd80      	pop	{r7, pc}

0800ca1c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800ca1c:	b580      	push	{r7, lr}
 800ca1e:	b082      	sub	sp, #8
 800ca20:	af00      	add	r7, sp, #0
 800ca22:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800ca24:	687b      	ldr	r3, [r7, #4]
 800ca26:	781b      	ldrb	r3, [r3, #0]
 800ca28:	2b00      	cmp	r3, #0
 800ca2a:	d139      	bne.n	800caa0 <USBD_LL_Init+0x84>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800ca2c:	4a1f      	ldr	r2, [pc, #124]	; (800caac <USBD_LL_Init+0x90>)
 800ca2e:	687b      	ldr	r3, [r7, #4]
 800ca30:	f8c2 33fc 	str.w	r3, [r2, #1020]	; 0x3fc
  pdev->pData = &hpcd_USB_OTG_FS;
 800ca34:	687b      	ldr	r3, [r7, #4]
 800ca36:	4a1d      	ldr	r2, [pc, #116]	; (800caac <USBD_LL_Init+0x90>)
 800ca38:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800ca3c:	4b1b      	ldr	r3, [pc, #108]	; (800caac <USBD_LL_Init+0x90>)
 800ca3e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800ca42:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800ca44:	4b19      	ldr	r3, [pc, #100]	; (800caac <USBD_LL_Init+0x90>)
 800ca46:	2204      	movs	r2, #4
 800ca48:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800ca4a:	4b18      	ldr	r3, [pc, #96]	; (800caac <USBD_LL_Init+0x90>)
 800ca4c:	2202      	movs	r2, #2
 800ca4e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800ca50:	4b16      	ldr	r3, [pc, #88]	; (800caac <USBD_LL_Init+0x90>)
 800ca52:	2200      	movs	r2, #0
 800ca54:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800ca56:	4b15      	ldr	r3, [pc, #84]	; (800caac <USBD_LL_Init+0x90>)
 800ca58:	2202      	movs	r2, #2
 800ca5a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800ca5c:	4b13      	ldr	r3, [pc, #76]	; (800caac <USBD_LL_Init+0x90>)
 800ca5e:	2200      	movs	r2, #0
 800ca60:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800ca62:	4b12      	ldr	r3, [pc, #72]	; (800caac <USBD_LL_Init+0x90>)
 800ca64:	2200      	movs	r2, #0
 800ca66:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800ca68:	4b10      	ldr	r3, [pc, #64]	; (800caac <USBD_LL_Init+0x90>)
 800ca6a:	2200      	movs	r2, #0
 800ca6c:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800ca6e:	4b0f      	ldr	r3, [pc, #60]	; (800caac <USBD_LL_Init+0x90>)
 800ca70:	2200      	movs	r2, #0
 800ca72:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800ca74:	480d      	ldr	r0, [pc, #52]	; (800caac <USBD_LL_Init+0x90>)
 800ca76:	f7fa f89f 	bl	8006bb8 <HAL_PCD_Init>
 800ca7a:	4603      	mov	r3, r0
 800ca7c:	2b00      	cmp	r3, #0
 800ca7e:	d001      	beq.n	800ca84 <USBD_LL_Init+0x68>
  {
    Error_Handler( );
 800ca80:	f7f6 ffd0 	bl	8003a24 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800ca84:	2180      	movs	r1, #128	; 0x80
 800ca86:	4809      	ldr	r0, [pc, #36]	; (800caac <USBD_LL_Init+0x90>)
 800ca88:	f7fb f9dc 	bl	8007e44 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800ca8c:	2240      	movs	r2, #64	; 0x40
 800ca8e:	2100      	movs	r1, #0
 800ca90:	4806      	ldr	r0, [pc, #24]	; (800caac <USBD_LL_Init+0x90>)
 800ca92:	f7fb f991 	bl	8007db8 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800ca96:	2280      	movs	r2, #128	; 0x80
 800ca98:	2101      	movs	r1, #1
 800ca9a:	4804      	ldr	r0, [pc, #16]	; (800caac <USBD_LL_Init+0x90>)
 800ca9c:	f7fb f98c 	bl	8007db8 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800caa0:	2300      	movs	r3, #0
}
 800caa2:	4618      	mov	r0, r3
 800caa4:	3708      	adds	r7, #8
 800caa6:	46bd      	mov	sp, r7
 800caa8:	bd80      	pop	{r7, pc}
 800caaa:	bf00      	nop
 800caac:	20001d70 	.word	0x20001d70

0800cab0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800cab0:	b580      	push	{r7, lr}
 800cab2:	b084      	sub	sp, #16
 800cab4:	af00      	add	r7, sp, #0
 800cab6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cab8:	2300      	movs	r3, #0
 800caba:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cabc:	2300      	movs	r3, #0
 800cabe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800cac0:	687b      	ldr	r3, [r7, #4]
 800cac2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800cac6:	4618      	mov	r0, r3
 800cac8:	f7fa f993 	bl	8006df2 <HAL_PCD_Start>
 800cacc:	4603      	mov	r3, r0
 800cace:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cad0:	7bfb      	ldrb	r3, [r7, #15]
 800cad2:	4618      	mov	r0, r3
 800cad4:	f000 f92e 	bl	800cd34 <USBD_Get_USB_Status>
 800cad8:	4603      	mov	r3, r0
 800cada:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cadc:	7bbb      	ldrb	r3, [r7, #14]
}
 800cade:	4618      	mov	r0, r3
 800cae0:	3710      	adds	r7, #16
 800cae2:	46bd      	mov	sp, r7
 800cae4:	bd80      	pop	{r7, pc}

0800cae6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800cae6:	b580      	push	{r7, lr}
 800cae8:	b084      	sub	sp, #16
 800caea:	af00      	add	r7, sp, #0
 800caec:	6078      	str	r0, [r7, #4]
 800caee:	4608      	mov	r0, r1
 800caf0:	4611      	mov	r1, r2
 800caf2:	461a      	mov	r2, r3
 800caf4:	4603      	mov	r3, r0
 800caf6:	70fb      	strb	r3, [r7, #3]
 800caf8:	460b      	mov	r3, r1
 800cafa:	70bb      	strb	r3, [r7, #2]
 800cafc:	4613      	mov	r3, r2
 800cafe:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cb00:	2300      	movs	r3, #0
 800cb02:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cb04:	2300      	movs	r3, #0
 800cb06:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800cb08:	687b      	ldr	r3, [r7, #4]
 800cb0a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800cb0e:	78bb      	ldrb	r3, [r7, #2]
 800cb10:	883a      	ldrh	r2, [r7, #0]
 800cb12:	78f9      	ldrb	r1, [r7, #3]
 800cb14:	f7fa fd58 	bl	80075c8 <HAL_PCD_EP_Open>
 800cb18:	4603      	mov	r3, r0
 800cb1a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cb1c:	7bfb      	ldrb	r3, [r7, #15]
 800cb1e:	4618      	mov	r0, r3
 800cb20:	f000 f908 	bl	800cd34 <USBD_Get_USB_Status>
 800cb24:	4603      	mov	r3, r0
 800cb26:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cb28:	7bbb      	ldrb	r3, [r7, #14]
}
 800cb2a:	4618      	mov	r0, r3
 800cb2c:	3710      	adds	r7, #16
 800cb2e:	46bd      	mov	sp, r7
 800cb30:	bd80      	pop	{r7, pc}

0800cb32 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cb32:	b580      	push	{r7, lr}
 800cb34:	b084      	sub	sp, #16
 800cb36:	af00      	add	r7, sp, #0
 800cb38:	6078      	str	r0, [r7, #4]
 800cb3a:	460b      	mov	r3, r1
 800cb3c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cb3e:	2300      	movs	r3, #0
 800cb40:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cb42:	2300      	movs	r3, #0
 800cb44:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800cb46:	687b      	ldr	r3, [r7, #4]
 800cb48:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800cb4c:	78fa      	ldrb	r2, [r7, #3]
 800cb4e:	4611      	mov	r1, r2
 800cb50:	4618      	mov	r0, r3
 800cb52:	f7fa fda1 	bl	8007698 <HAL_PCD_EP_Close>
 800cb56:	4603      	mov	r3, r0
 800cb58:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cb5a:	7bfb      	ldrb	r3, [r7, #15]
 800cb5c:	4618      	mov	r0, r3
 800cb5e:	f000 f8e9 	bl	800cd34 <USBD_Get_USB_Status>
 800cb62:	4603      	mov	r3, r0
 800cb64:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cb66:	7bbb      	ldrb	r3, [r7, #14]
}
 800cb68:	4618      	mov	r0, r3
 800cb6a:	3710      	adds	r7, #16
 800cb6c:	46bd      	mov	sp, r7
 800cb6e:	bd80      	pop	{r7, pc}

0800cb70 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cb70:	b580      	push	{r7, lr}
 800cb72:	b084      	sub	sp, #16
 800cb74:	af00      	add	r7, sp, #0
 800cb76:	6078      	str	r0, [r7, #4]
 800cb78:	460b      	mov	r3, r1
 800cb7a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cb7c:	2300      	movs	r3, #0
 800cb7e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cb80:	2300      	movs	r3, #0
 800cb82:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800cb84:	687b      	ldr	r3, [r7, #4]
 800cb86:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800cb8a:	78fa      	ldrb	r2, [r7, #3]
 800cb8c:	4611      	mov	r1, r2
 800cb8e:	4618      	mov	r0, r3
 800cb90:	f7fa fe78 	bl	8007884 <HAL_PCD_EP_SetStall>
 800cb94:	4603      	mov	r3, r0
 800cb96:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cb98:	7bfb      	ldrb	r3, [r7, #15]
 800cb9a:	4618      	mov	r0, r3
 800cb9c:	f000 f8ca 	bl	800cd34 <USBD_Get_USB_Status>
 800cba0:	4603      	mov	r3, r0
 800cba2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cba4:	7bbb      	ldrb	r3, [r7, #14]
}
 800cba6:	4618      	mov	r0, r3
 800cba8:	3710      	adds	r7, #16
 800cbaa:	46bd      	mov	sp, r7
 800cbac:	bd80      	pop	{r7, pc}

0800cbae <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cbae:	b580      	push	{r7, lr}
 800cbb0:	b084      	sub	sp, #16
 800cbb2:	af00      	add	r7, sp, #0
 800cbb4:	6078      	str	r0, [r7, #4]
 800cbb6:	460b      	mov	r3, r1
 800cbb8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cbba:	2300      	movs	r3, #0
 800cbbc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cbbe:	2300      	movs	r3, #0
 800cbc0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800cbc2:	687b      	ldr	r3, [r7, #4]
 800cbc4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800cbc8:	78fa      	ldrb	r2, [r7, #3]
 800cbca:	4611      	mov	r1, r2
 800cbcc:	4618      	mov	r0, r3
 800cbce:	f7fa febd 	bl	800794c <HAL_PCD_EP_ClrStall>
 800cbd2:	4603      	mov	r3, r0
 800cbd4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cbd6:	7bfb      	ldrb	r3, [r7, #15]
 800cbd8:	4618      	mov	r0, r3
 800cbda:	f000 f8ab 	bl	800cd34 <USBD_Get_USB_Status>
 800cbde:	4603      	mov	r3, r0
 800cbe0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cbe2:	7bbb      	ldrb	r3, [r7, #14]
}
 800cbe4:	4618      	mov	r0, r3
 800cbe6:	3710      	adds	r7, #16
 800cbe8:	46bd      	mov	sp, r7
 800cbea:	bd80      	pop	{r7, pc}

0800cbec <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cbec:	b480      	push	{r7}
 800cbee:	b085      	sub	sp, #20
 800cbf0:	af00      	add	r7, sp, #0
 800cbf2:	6078      	str	r0, [r7, #4]
 800cbf4:	460b      	mov	r3, r1
 800cbf6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800cbf8:	687b      	ldr	r3, [r7, #4]
 800cbfa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800cbfe:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800cc00:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800cc04:	2b00      	cmp	r3, #0
 800cc06:	da0b      	bge.n	800cc20 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800cc08:	78fb      	ldrb	r3, [r7, #3]
 800cc0a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800cc0e:	68f9      	ldr	r1, [r7, #12]
 800cc10:	4613      	mov	r3, r2
 800cc12:	00db      	lsls	r3, r3, #3
 800cc14:	1a9b      	subs	r3, r3, r2
 800cc16:	009b      	lsls	r3, r3, #2
 800cc18:	440b      	add	r3, r1
 800cc1a:	333e      	adds	r3, #62	; 0x3e
 800cc1c:	781b      	ldrb	r3, [r3, #0]
 800cc1e:	e00b      	b.n	800cc38 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800cc20:	78fb      	ldrb	r3, [r7, #3]
 800cc22:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800cc26:	68f9      	ldr	r1, [r7, #12]
 800cc28:	4613      	mov	r3, r2
 800cc2a:	00db      	lsls	r3, r3, #3
 800cc2c:	1a9b      	subs	r3, r3, r2
 800cc2e:	009b      	lsls	r3, r3, #2
 800cc30:	440b      	add	r3, r1
 800cc32:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800cc36:	781b      	ldrb	r3, [r3, #0]
  }
}
 800cc38:	4618      	mov	r0, r3
 800cc3a:	3714      	adds	r7, #20
 800cc3c:	46bd      	mov	sp, r7
 800cc3e:	bc80      	pop	{r7}
 800cc40:	4770      	bx	lr

0800cc42 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800cc42:	b580      	push	{r7, lr}
 800cc44:	b084      	sub	sp, #16
 800cc46:	af00      	add	r7, sp, #0
 800cc48:	6078      	str	r0, [r7, #4]
 800cc4a:	460b      	mov	r3, r1
 800cc4c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cc4e:	2300      	movs	r3, #0
 800cc50:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cc52:	2300      	movs	r3, #0
 800cc54:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800cc56:	687b      	ldr	r3, [r7, #4]
 800cc58:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800cc5c:	78fa      	ldrb	r2, [r7, #3]
 800cc5e:	4611      	mov	r1, r2
 800cc60:	4618      	mov	r0, r3
 800cc62:	f7fa fc8c 	bl	800757e <HAL_PCD_SetAddress>
 800cc66:	4603      	mov	r3, r0
 800cc68:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cc6a:	7bfb      	ldrb	r3, [r7, #15]
 800cc6c:	4618      	mov	r0, r3
 800cc6e:	f000 f861 	bl	800cd34 <USBD_Get_USB_Status>
 800cc72:	4603      	mov	r3, r0
 800cc74:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cc76:	7bbb      	ldrb	r3, [r7, #14]
}
 800cc78:	4618      	mov	r0, r3
 800cc7a:	3710      	adds	r7, #16
 800cc7c:	46bd      	mov	sp, r7
 800cc7e:	bd80      	pop	{r7, pc}

0800cc80 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800cc80:	b580      	push	{r7, lr}
 800cc82:	b086      	sub	sp, #24
 800cc84:	af00      	add	r7, sp, #0
 800cc86:	60f8      	str	r0, [r7, #12]
 800cc88:	607a      	str	r2, [r7, #4]
 800cc8a:	461a      	mov	r2, r3
 800cc8c:	460b      	mov	r3, r1
 800cc8e:	72fb      	strb	r3, [r7, #11]
 800cc90:	4613      	mov	r3, r2
 800cc92:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cc94:	2300      	movs	r3, #0
 800cc96:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cc98:	2300      	movs	r3, #0
 800cc9a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800cc9c:	68fb      	ldr	r3, [r7, #12]
 800cc9e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800cca2:	893b      	ldrh	r3, [r7, #8]
 800cca4:	7af9      	ldrb	r1, [r7, #11]
 800cca6:	687a      	ldr	r2, [r7, #4]
 800cca8:	f7fa fda2 	bl	80077f0 <HAL_PCD_EP_Transmit>
 800ccac:	4603      	mov	r3, r0
 800ccae:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ccb0:	7dfb      	ldrb	r3, [r7, #23]
 800ccb2:	4618      	mov	r0, r3
 800ccb4:	f000 f83e 	bl	800cd34 <USBD_Get_USB_Status>
 800ccb8:	4603      	mov	r3, r0
 800ccba:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800ccbc:	7dbb      	ldrb	r3, [r7, #22]
}
 800ccbe:	4618      	mov	r0, r3
 800ccc0:	3718      	adds	r7, #24
 800ccc2:	46bd      	mov	sp, r7
 800ccc4:	bd80      	pop	{r7, pc}

0800ccc6 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800ccc6:	b580      	push	{r7, lr}
 800ccc8:	b086      	sub	sp, #24
 800ccca:	af00      	add	r7, sp, #0
 800cccc:	60f8      	str	r0, [r7, #12]
 800ccce:	607a      	str	r2, [r7, #4]
 800ccd0:	461a      	mov	r2, r3
 800ccd2:	460b      	mov	r3, r1
 800ccd4:	72fb      	strb	r3, [r7, #11]
 800ccd6:	4613      	mov	r3, r2
 800ccd8:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ccda:	2300      	movs	r3, #0
 800ccdc:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ccde:	2300      	movs	r3, #0
 800cce0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800cce2:	68fb      	ldr	r3, [r7, #12]
 800cce4:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800cce8:	893b      	ldrh	r3, [r7, #8]
 800ccea:	7af9      	ldrb	r1, [r7, #11]
 800ccec:	687a      	ldr	r2, [r7, #4]
 800ccee:	f7fa fd1d 	bl	800772c <HAL_PCD_EP_Receive>
 800ccf2:	4603      	mov	r3, r0
 800ccf4:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ccf6:	7dfb      	ldrb	r3, [r7, #23]
 800ccf8:	4618      	mov	r0, r3
 800ccfa:	f000 f81b 	bl	800cd34 <USBD_Get_USB_Status>
 800ccfe:	4603      	mov	r3, r0
 800cd00:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800cd02:	7dbb      	ldrb	r3, [r7, #22]
}
 800cd04:	4618      	mov	r0, r3
 800cd06:	3718      	adds	r7, #24
 800cd08:	46bd      	mov	sp, r7
 800cd0a:	bd80      	pop	{r7, pc}

0800cd0c <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cd0c:	b580      	push	{r7, lr}
 800cd0e:	b082      	sub	sp, #8
 800cd10:	af00      	add	r7, sp, #0
 800cd12:	6078      	str	r0, [r7, #4]
 800cd14:	460b      	mov	r3, r1
 800cd16:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800cd18:	687b      	ldr	r3, [r7, #4]
 800cd1a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800cd1e:	78fa      	ldrb	r2, [r7, #3]
 800cd20:	4611      	mov	r1, r2
 800cd22:	4618      	mov	r0, r3
 800cd24:	f7fa fd4d 	bl	80077c2 <HAL_PCD_EP_GetRxCount>
 800cd28:	4603      	mov	r3, r0
}
 800cd2a:	4618      	mov	r0, r3
 800cd2c:	3708      	adds	r7, #8
 800cd2e:	46bd      	mov	sp, r7
 800cd30:	bd80      	pop	{r7, pc}
	...

0800cd34 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800cd34:	b480      	push	{r7}
 800cd36:	b085      	sub	sp, #20
 800cd38:	af00      	add	r7, sp, #0
 800cd3a:	4603      	mov	r3, r0
 800cd3c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cd3e:	2300      	movs	r3, #0
 800cd40:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800cd42:	79fb      	ldrb	r3, [r7, #7]
 800cd44:	2b03      	cmp	r3, #3
 800cd46:	d817      	bhi.n	800cd78 <USBD_Get_USB_Status+0x44>
 800cd48:	a201      	add	r2, pc, #4	; (adr r2, 800cd50 <USBD_Get_USB_Status+0x1c>)
 800cd4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cd4e:	bf00      	nop
 800cd50:	0800cd61 	.word	0x0800cd61
 800cd54:	0800cd67 	.word	0x0800cd67
 800cd58:	0800cd6d 	.word	0x0800cd6d
 800cd5c:	0800cd73 	.word	0x0800cd73
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800cd60:	2300      	movs	r3, #0
 800cd62:	73fb      	strb	r3, [r7, #15]
    break;
 800cd64:	e00b      	b.n	800cd7e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800cd66:	2302      	movs	r3, #2
 800cd68:	73fb      	strb	r3, [r7, #15]
    break;
 800cd6a:	e008      	b.n	800cd7e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800cd6c:	2301      	movs	r3, #1
 800cd6e:	73fb      	strb	r3, [r7, #15]
    break;
 800cd70:	e005      	b.n	800cd7e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800cd72:	2302      	movs	r3, #2
 800cd74:	73fb      	strb	r3, [r7, #15]
    break;
 800cd76:	e002      	b.n	800cd7e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800cd78:	2302      	movs	r3, #2
 800cd7a:	73fb      	strb	r3, [r7, #15]
    break;
 800cd7c:	bf00      	nop
  }
  return usb_status;
 800cd7e:	7bfb      	ldrb	r3, [r7, #15]
}
 800cd80:	4618      	mov	r0, r3
 800cd82:	3714      	adds	r7, #20
 800cd84:	46bd      	mov	sp, r7
 800cd86:	bc80      	pop	{r7}
 800cd88:	4770      	bx	lr
 800cd8a:	bf00      	nop

0800cd8c <cos>:
 800cd8c:	b530      	push	{r4, r5, lr}
 800cd8e:	4a1e      	ldr	r2, [pc, #120]	; (800ce08 <cos+0x7c>)
 800cd90:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800cd94:	4293      	cmp	r3, r2
 800cd96:	b087      	sub	sp, #28
 800cd98:	dc04      	bgt.n	800cda4 <cos+0x18>
 800cd9a:	2200      	movs	r2, #0
 800cd9c:	2300      	movs	r3, #0
 800cd9e:	f000 fd57 	bl	800d850 <__kernel_cos>
 800cda2:	e006      	b.n	800cdb2 <cos+0x26>
 800cda4:	4a19      	ldr	r2, [pc, #100]	; (800ce0c <cos+0x80>)
 800cda6:	4293      	cmp	r3, r2
 800cda8:	dd05      	ble.n	800cdb6 <cos+0x2a>
 800cdaa:	4602      	mov	r2, r0
 800cdac:	460b      	mov	r3, r1
 800cdae:	f7f3 fa17 	bl	80001e0 <__aeabi_dsub>
 800cdb2:	b007      	add	sp, #28
 800cdb4:	bd30      	pop	{r4, r5, pc}
 800cdb6:	aa02      	add	r2, sp, #8
 800cdb8:	f000 f9a6 	bl	800d108 <__ieee754_rem_pio2>
 800cdbc:	f000 0003 	and.w	r0, r0, #3
 800cdc0:	2801      	cmp	r0, #1
 800cdc2:	d007      	beq.n	800cdd4 <cos+0x48>
 800cdc4:	2802      	cmp	r0, #2
 800cdc6:	d00f      	beq.n	800cde8 <cos+0x5c>
 800cdc8:	b9a8      	cbnz	r0, 800cdf6 <cos+0x6a>
 800cdca:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800cdce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cdd2:	e7e4      	b.n	800cd9e <cos+0x12>
 800cdd4:	9000      	str	r0, [sp, #0]
 800cdd6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800cdda:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cdde:	f001 f93f 	bl	800e060 <__kernel_sin>
 800cde2:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 800cde6:	e7e4      	b.n	800cdb2 <cos+0x26>
 800cde8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800cdec:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cdf0:	f000 fd2e 	bl	800d850 <__kernel_cos>
 800cdf4:	e7f5      	b.n	800cde2 <cos+0x56>
 800cdf6:	2301      	movs	r3, #1
 800cdf8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cdfc:	9300      	str	r3, [sp, #0]
 800cdfe:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ce02:	f001 f92d 	bl	800e060 <__kernel_sin>
 800ce06:	e7d4      	b.n	800cdb2 <cos+0x26>
 800ce08:	3fe921fb 	.word	0x3fe921fb
 800ce0c:	7fefffff 	.word	0x7fefffff

0800ce10 <sin>:
 800ce10:	b530      	push	{r4, r5, lr}
 800ce12:	4a20      	ldr	r2, [pc, #128]	; (800ce94 <sin+0x84>)
 800ce14:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800ce18:	4293      	cmp	r3, r2
 800ce1a:	b087      	sub	sp, #28
 800ce1c:	dc06      	bgt.n	800ce2c <sin+0x1c>
 800ce1e:	2300      	movs	r3, #0
 800ce20:	2200      	movs	r2, #0
 800ce22:	9300      	str	r3, [sp, #0]
 800ce24:	2300      	movs	r3, #0
 800ce26:	f001 f91b 	bl	800e060 <__kernel_sin>
 800ce2a:	e006      	b.n	800ce3a <sin+0x2a>
 800ce2c:	4a1a      	ldr	r2, [pc, #104]	; (800ce98 <sin+0x88>)
 800ce2e:	4293      	cmp	r3, r2
 800ce30:	dd05      	ble.n	800ce3e <sin+0x2e>
 800ce32:	4602      	mov	r2, r0
 800ce34:	460b      	mov	r3, r1
 800ce36:	f7f3 f9d3 	bl	80001e0 <__aeabi_dsub>
 800ce3a:	b007      	add	sp, #28
 800ce3c:	bd30      	pop	{r4, r5, pc}
 800ce3e:	aa02      	add	r2, sp, #8
 800ce40:	f000 f962 	bl	800d108 <__ieee754_rem_pio2>
 800ce44:	f000 0003 	and.w	r0, r0, #3
 800ce48:	2801      	cmp	r0, #1
 800ce4a:	d009      	beq.n	800ce60 <sin+0x50>
 800ce4c:	2802      	cmp	r0, #2
 800ce4e:	d00e      	beq.n	800ce6e <sin+0x5e>
 800ce50:	b9c0      	cbnz	r0, 800ce84 <sin+0x74>
 800ce52:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ce56:	2301      	movs	r3, #1
 800ce58:	9300      	str	r3, [sp, #0]
 800ce5a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ce5e:	e7e2      	b.n	800ce26 <sin+0x16>
 800ce60:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ce64:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ce68:	f000 fcf2 	bl	800d850 <__kernel_cos>
 800ce6c:	e7e5      	b.n	800ce3a <sin+0x2a>
 800ce6e:	2301      	movs	r3, #1
 800ce70:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ce74:	9300      	str	r3, [sp, #0]
 800ce76:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ce7a:	f001 f8f1 	bl	800e060 <__kernel_sin>
 800ce7e:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 800ce82:	e7da      	b.n	800ce3a <sin+0x2a>
 800ce84:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ce88:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ce8c:	f000 fce0 	bl	800d850 <__kernel_cos>
 800ce90:	e7f5      	b.n	800ce7e <sin+0x6e>
 800ce92:	bf00      	nop
 800ce94:	3fe921fb 	.word	0x3fe921fb
 800ce98:	7fefffff 	.word	0x7fefffff

0800ce9c <atanf>:
 800ce9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cea0:	f020 4500 	bic.w	r5, r0, #2147483648	; 0x80000000
 800cea4:	f1b5 4fa1 	cmp.w	r5, #1350565888	; 0x50800000
 800cea8:	4604      	mov	r4, r0
 800ceaa:	4680      	mov	r8, r0
 800ceac:	db0e      	blt.n	800cecc <atanf+0x30>
 800ceae:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 800ceb2:	dd04      	ble.n	800cebe <atanf+0x22>
 800ceb4:	4601      	mov	r1, r0
 800ceb6:	f7f3 fe99 	bl	8000bec <__addsf3>
 800ceba:	4604      	mov	r4, r0
 800cebc:	e003      	b.n	800cec6 <atanf+0x2a>
 800cebe:	2800      	cmp	r0, #0
 800cec0:	f300 80ce 	bgt.w	800d060 <atanf+0x1c4>
 800cec4:	4c67      	ldr	r4, [pc, #412]	; (800d064 <atanf+0x1c8>)
 800cec6:	4620      	mov	r0, r4
 800cec8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cecc:	4b66      	ldr	r3, [pc, #408]	; (800d068 <atanf+0x1cc>)
 800cece:	429d      	cmp	r5, r3
 800ced0:	dc0e      	bgt.n	800cef0 <atanf+0x54>
 800ced2:	f1b5 5f44 	cmp.w	r5, #822083584	; 0x31000000
 800ced6:	da08      	bge.n	800ceea <atanf+0x4e>
 800ced8:	4964      	ldr	r1, [pc, #400]	; (800d06c <atanf+0x1d0>)
 800ceda:	f7f3 fe87 	bl	8000bec <__addsf3>
 800cede:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800cee2:	f7f4 f947 	bl	8001174 <__aeabi_fcmpgt>
 800cee6:	2800      	cmp	r0, #0
 800cee8:	d1ed      	bne.n	800cec6 <atanf+0x2a>
 800ceea:	f04f 36ff 	mov.w	r6, #4294967295
 800ceee:	e01c      	b.n	800cf2a <atanf+0x8e>
 800cef0:	f000 f8e0 	bl	800d0b4 <fabsf>
 800cef4:	4b5e      	ldr	r3, [pc, #376]	; (800d070 <atanf+0x1d4>)
 800cef6:	4604      	mov	r4, r0
 800cef8:	429d      	cmp	r5, r3
 800cefa:	dc7c      	bgt.n	800cff6 <atanf+0x15a>
 800cefc:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 800cf00:	429d      	cmp	r5, r3
 800cf02:	dc67      	bgt.n	800cfd4 <atanf+0x138>
 800cf04:	4601      	mov	r1, r0
 800cf06:	f7f3 fe71 	bl	8000bec <__addsf3>
 800cf0a:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800cf0e:	f7f3 fe6b 	bl	8000be8 <__aeabi_fsub>
 800cf12:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800cf16:	4605      	mov	r5, r0
 800cf18:	4620      	mov	r0, r4
 800cf1a:	f7f3 fe67 	bl	8000bec <__addsf3>
 800cf1e:	4601      	mov	r1, r0
 800cf20:	4628      	mov	r0, r5
 800cf22:	f7f4 f81f 	bl	8000f64 <__aeabi_fdiv>
 800cf26:	2600      	movs	r6, #0
 800cf28:	4604      	mov	r4, r0
 800cf2a:	4621      	mov	r1, r4
 800cf2c:	4620      	mov	r0, r4
 800cf2e:	f7f3 ff65 	bl	8000dfc <__aeabi_fmul>
 800cf32:	4601      	mov	r1, r0
 800cf34:	4607      	mov	r7, r0
 800cf36:	f7f3 ff61 	bl	8000dfc <__aeabi_fmul>
 800cf3a:	4605      	mov	r5, r0
 800cf3c:	494d      	ldr	r1, [pc, #308]	; (800d074 <atanf+0x1d8>)
 800cf3e:	f7f3 ff5d 	bl	8000dfc <__aeabi_fmul>
 800cf42:	494d      	ldr	r1, [pc, #308]	; (800d078 <atanf+0x1dc>)
 800cf44:	f7f3 fe52 	bl	8000bec <__addsf3>
 800cf48:	4629      	mov	r1, r5
 800cf4a:	f7f3 ff57 	bl	8000dfc <__aeabi_fmul>
 800cf4e:	494b      	ldr	r1, [pc, #300]	; (800d07c <atanf+0x1e0>)
 800cf50:	f7f3 fe4c 	bl	8000bec <__addsf3>
 800cf54:	4629      	mov	r1, r5
 800cf56:	f7f3 ff51 	bl	8000dfc <__aeabi_fmul>
 800cf5a:	4949      	ldr	r1, [pc, #292]	; (800d080 <atanf+0x1e4>)
 800cf5c:	f7f3 fe46 	bl	8000bec <__addsf3>
 800cf60:	4629      	mov	r1, r5
 800cf62:	f7f3 ff4b 	bl	8000dfc <__aeabi_fmul>
 800cf66:	4947      	ldr	r1, [pc, #284]	; (800d084 <atanf+0x1e8>)
 800cf68:	f7f3 fe40 	bl	8000bec <__addsf3>
 800cf6c:	4629      	mov	r1, r5
 800cf6e:	f7f3 ff45 	bl	8000dfc <__aeabi_fmul>
 800cf72:	4945      	ldr	r1, [pc, #276]	; (800d088 <atanf+0x1ec>)
 800cf74:	f7f3 fe3a 	bl	8000bec <__addsf3>
 800cf78:	4639      	mov	r1, r7
 800cf7a:	f7f3 ff3f 	bl	8000dfc <__aeabi_fmul>
 800cf7e:	4943      	ldr	r1, [pc, #268]	; (800d08c <atanf+0x1f0>)
 800cf80:	4607      	mov	r7, r0
 800cf82:	4628      	mov	r0, r5
 800cf84:	f7f3 ff3a 	bl	8000dfc <__aeabi_fmul>
 800cf88:	4941      	ldr	r1, [pc, #260]	; (800d090 <atanf+0x1f4>)
 800cf8a:	f7f3 fe2d 	bl	8000be8 <__aeabi_fsub>
 800cf8e:	4629      	mov	r1, r5
 800cf90:	f7f3 ff34 	bl	8000dfc <__aeabi_fmul>
 800cf94:	493f      	ldr	r1, [pc, #252]	; (800d094 <atanf+0x1f8>)
 800cf96:	f7f3 fe27 	bl	8000be8 <__aeabi_fsub>
 800cf9a:	4629      	mov	r1, r5
 800cf9c:	f7f3 ff2e 	bl	8000dfc <__aeabi_fmul>
 800cfa0:	493d      	ldr	r1, [pc, #244]	; (800d098 <atanf+0x1fc>)
 800cfa2:	f7f3 fe21 	bl	8000be8 <__aeabi_fsub>
 800cfa6:	4629      	mov	r1, r5
 800cfa8:	f7f3 ff28 	bl	8000dfc <__aeabi_fmul>
 800cfac:	493b      	ldr	r1, [pc, #236]	; (800d09c <atanf+0x200>)
 800cfae:	f7f3 fe1b 	bl	8000be8 <__aeabi_fsub>
 800cfb2:	4629      	mov	r1, r5
 800cfb4:	f7f3 ff22 	bl	8000dfc <__aeabi_fmul>
 800cfb8:	4601      	mov	r1, r0
 800cfba:	4638      	mov	r0, r7
 800cfbc:	f7f3 fe16 	bl	8000bec <__addsf3>
 800cfc0:	4621      	mov	r1, r4
 800cfc2:	f7f3 ff1b 	bl	8000dfc <__aeabi_fmul>
 800cfc6:	1c73      	adds	r3, r6, #1
 800cfc8:	4601      	mov	r1, r0
 800cfca:	d133      	bne.n	800d034 <atanf+0x198>
 800cfcc:	4620      	mov	r0, r4
 800cfce:	f7f3 fe0b 	bl	8000be8 <__aeabi_fsub>
 800cfd2:	e772      	b.n	800ceba <atanf+0x1e>
 800cfd4:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800cfd8:	f7f3 fe06 	bl	8000be8 <__aeabi_fsub>
 800cfdc:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800cfe0:	4605      	mov	r5, r0
 800cfe2:	4620      	mov	r0, r4
 800cfe4:	f7f3 fe02 	bl	8000bec <__addsf3>
 800cfe8:	4601      	mov	r1, r0
 800cfea:	4628      	mov	r0, r5
 800cfec:	f7f3 ffba 	bl	8000f64 <__aeabi_fdiv>
 800cff0:	2601      	movs	r6, #1
 800cff2:	4604      	mov	r4, r0
 800cff4:	e799      	b.n	800cf2a <atanf+0x8e>
 800cff6:	4b2a      	ldr	r3, [pc, #168]	; (800d0a0 <atanf+0x204>)
 800cff8:	429d      	cmp	r5, r3
 800cffa:	dc14      	bgt.n	800d026 <atanf+0x18a>
 800cffc:	f04f 517f 	mov.w	r1, #1069547520	; 0x3fc00000
 800d000:	f7f3 fdf2 	bl	8000be8 <__aeabi_fsub>
 800d004:	f04f 517f 	mov.w	r1, #1069547520	; 0x3fc00000
 800d008:	4605      	mov	r5, r0
 800d00a:	4620      	mov	r0, r4
 800d00c:	f7f3 fef6 	bl	8000dfc <__aeabi_fmul>
 800d010:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800d014:	f7f3 fdea 	bl	8000bec <__addsf3>
 800d018:	4601      	mov	r1, r0
 800d01a:	4628      	mov	r0, r5
 800d01c:	f7f3 ffa2 	bl	8000f64 <__aeabi_fdiv>
 800d020:	2602      	movs	r6, #2
 800d022:	4604      	mov	r4, r0
 800d024:	e781      	b.n	800cf2a <atanf+0x8e>
 800d026:	4601      	mov	r1, r0
 800d028:	481e      	ldr	r0, [pc, #120]	; (800d0a4 <atanf+0x208>)
 800d02a:	f7f3 ff9b 	bl	8000f64 <__aeabi_fdiv>
 800d02e:	2603      	movs	r6, #3
 800d030:	4604      	mov	r4, r0
 800d032:	e77a      	b.n	800cf2a <atanf+0x8e>
 800d034:	4b1c      	ldr	r3, [pc, #112]	; (800d0a8 <atanf+0x20c>)
 800d036:	f853 1026 	ldr.w	r1, [r3, r6, lsl #2]
 800d03a:	f7f3 fdd5 	bl	8000be8 <__aeabi_fsub>
 800d03e:	4621      	mov	r1, r4
 800d040:	f7f3 fdd2 	bl	8000be8 <__aeabi_fsub>
 800d044:	4b19      	ldr	r3, [pc, #100]	; (800d0ac <atanf+0x210>)
 800d046:	4601      	mov	r1, r0
 800d048:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800d04c:	f7f3 fdcc 	bl	8000be8 <__aeabi_fsub>
 800d050:	f1b8 0f00 	cmp.w	r8, #0
 800d054:	4604      	mov	r4, r0
 800d056:	f6bf af36 	bge.w	800cec6 <atanf+0x2a>
 800d05a:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800d05e:	e72c      	b.n	800ceba <atanf+0x1e>
 800d060:	4c13      	ldr	r4, [pc, #76]	; (800d0b0 <atanf+0x214>)
 800d062:	e730      	b.n	800cec6 <atanf+0x2a>
 800d064:	bfc90fdb 	.word	0xbfc90fdb
 800d068:	3edfffff 	.word	0x3edfffff
 800d06c:	7149f2ca 	.word	0x7149f2ca
 800d070:	3f97ffff 	.word	0x3f97ffff
 800d074:	3c8569d7 	.word	0x3c8569d7
 800d078:	3d4bda59 	.word	0x3d4bda59
 800d07c:	3d886b35 	.word	0x3d886b35
 800d080:	3dba2e6e 	.word	0x3dba2e6e
 800d084:	3e124925 	.word	0x3e124925
 800d088:	3eaaaaab 	.word	0x3eaaaaab
 800d08c:	bd15a221 	.word	0xbd15a221
 800d090:	3d6ef16b 	.word	0x3d6ef16b
 800d094:	3d9d8795 	.word	0x3d9d8795
 800d098:	3de38e38 	.word	0x3de38e38
 800d09c:	3e4ccccd 	.word	0x3e4ccccd
 800d0a0:	401bffff 	.word	0x401bffff
 800d0a4:	bf800000 	.word	0xbf800000
 800d0a8:	08011b00 	.word	0x08011b00
 800d0ac:	08011af0 	.word	0x08011af0
 800d0b0:	3fc90fdb 	.word	0x3fc90fdb

0800d0b4 <fabsf>:
 800d0b4:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800d0b8:	4770      	bx	lr
	...

0800d0bc <acosf>:
 800d0bc:	b538      	push	{r3, r4, r5, lr}
 800d0be:	4604      	mov	r4, r0
 800d0c0:	f000 fa12 	bl	800d4e8 <__ieee754_acosf>
 800d0c4:	4b0e      	ldr	r3, [pc, #56]	; (800d100 <acosf+0x44>)
 800d0c6:	4605      	mov	r5, r0
 800d0c8:	f993 3000 	ldrsb.w	r3, [r3]
 800d0cc:	3301      	adds	r3, #1
 800d0ce:	d015      	beq.n	800d0fc <acosf+0x40>
 800d0d0:	4621      	mov	r1, r4
 800d0d2:	4620      	mov	r0, r4
 800d0d4:	f7f4 f858 	bl	8001188 <__aeabi_fcmpun>
 800d0d8:	b980      	cbnz	r0, 800d0fc <acosf+0x40>
 800d0da:	4620      	mov	r0, r4
 800d0dc:	f7ff ffea 	bl	800d0b4 <fabsf>
 800d0e0:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800d0e4:	f7f4 f846 	bl	8001174 <__aeabi_fcmpgt>
 800d0e8:	b140      	cbz	r0, 800d0fc <acosf+0x40>
 800d0ea:	f001 f97f 	bl	800e3ec <__errno>
 800d0ee:	2321      	movs	r3, #33	; 0x21
 800d0f0:	6003      	str	r3, [r0, #0]
 800d0f2:	4804      	ldr	r0, [pc, #16]	; (800d104 <acosf+0x48>)
 800d0f4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d0f8:	f001 b974 	b.w	800e3e4 <nanf>
 800d0fc:	4628      	mov	r0, r5
 800d0fe:	bd38      	pop	{r3, r4, r5, pc}
 800d100:	200001a6 	.word	0x200001a6
 800d104:	08011f60 	.word	0x08011f60

0800d108 <__ieee754_rem_pio2>:
 800d108:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d10c:	4614      	mov	r4, r2
 800d10e:	4ac4      	ldr	r2, [pc, #784]	; (800d420 <__ieee754_rem_pio2+0x318>)
 800d110:	f021 4a00 	bic.w	sl, r1, #2147483648	; 0x80000000
 800d114:	b08d      	sub	sp, #52	; 0x34
 800d116:	4592      	cmp	sl, r2
 800d118:	9104      	str	r1, [sp, #16]
 800d11a:	dc07      	bgt.n	800d12c <__ieee754_rem_pio2+0x24>
 800d11c:	2200      	movs	r2, #0
 800d11e:	2300      	movs	r3, #0
 800d120:	e9c4 0100 	strd	r0, r1, [r4]
 800d124:	e9c4 2302 	strd	r2, r3, [r4, #8]
 800d128:	2500      	movs	r5, #0
 800d12a:	e024      	b.n	800d176 <__ieee754_rem_pio2+0x6e>
 800d12c:	4abd      	ldr	r2, [pc, #756]	; (800d424 <__ieee754_rem_pio2+0x31c>)
 800d12e:	4592      	cmp	sl, r2
 800d130:	dc72      	bgt.n	800d218 <__ieee754_rem_pio2+0x110>
 800d132:	9b04      	ldr	r3, [sp, #16]
 800d134:	4dbc      	ldr	r5, [pc, #752]	; (800d428 <__ieee754_rem_pio2+0x320>)
 800d136:	2b00      	cmp	r3, #0
 800d138:	a3ab      	add	r3, pc, #684	; (adr r3, 800d3e8 <__ieee754_rem_pio2+0x2e0>)
 800d13a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d13e:	dd36      	ble.n	800d1ae <__ieee754_rem_pio2+0xa6>
 800d140:	f7f3 f84e 	bl	80001e0 <__aeabi_dsub>
 800d144:	45aa      	cmp	sl, r5
 800d146:	4606      	mov	r6, r0
 800d148:	460f      	mov	r7, r1
 800d14a:	d018      	beq.n	800d17e <__ieee754_rem_pio2+0x76>
 800d14c:	a3a8      	add	r3, pc, #672	; (adr r3, 800d3f0 <__ieee754_rem_pio2+0x2e8>)
 800d14e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d152:	f7f3 f845 	bl	80001e0 <__aeabi_dsub>
 800d156:	4602      	mov	r2, r0
 800d158:	460b      	mov	r3, r1
 800d15a:	4630      	mov	r0, r6
 800d15c:	e9c4 2300 	strd	r2, r3, [r4]
 800d160:	4639      	mov	r1, r7
 800d162:	f7f3 f83d 	bl	80001e0 <__aeabi_dsub>
 800d166:	a3a2      	add	r3, pc, #648	; (adr r3, 800d3f0 <__ieee754_rem_pio2+0x2e8>)
 800d168:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d16c:	f7f3 f838 	bl	80001e0 <__aeabi_dsub>
 800d170:	2501      	movs	r5, #1
 800d172:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800d176:	4628      	mov	r0, r5
 800d178:	b00d      	add	sp, #52	; 0x34
 800d17a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d17e:	a39e      	add	r3, pc, #632	; (adr r3, 800d3f8 <__ieee754_rem_pio2+0x2f0>)
 800d180:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d184:	f7f3 f82c 	bl	80001e0 <__aeabi_dsub>
 800d188:	a39d      	add	r3, pc, #628	; (adr r3, 800d400 <__ieee754_rem_pio2+0x2f8>)
 800d18a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d18e:	4606      	mov	r6, r0
 800d190:	460f      	mov	r7, r1
 800d192:	f7f3 f825 	bl	80001e0 <__aeabi_dsub>
 800d196:	4602      	mov	r2, r0
 800d198:	460b      	mov	r3, r1
 800d19a:	4630      	mov	r0, r6
 800d19c:	e9c4 2300 	strd	r2, r3, [r4]
 800d1a0:	4639      	mov	r1, r7
 800d1a2:	f7f3 f81d 	bl	80001e0 <__aeabi_dsub>
 800d1a6:	a396      	add	r3, pc, #600	; (adr r3, 800d400 <__ieee754_rem_pio2+0x2f8>)
 800d1a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d1ac:	e7de      	b.n	800d16c <__ieee754_rem_pio2+0x64>
 800d1ae:	f7f3 f819 	bl	80001e4 <__adddf3>
 800d1b2:	45aa      	cmp	sl, r5
 800d1b4:	4606      	mov	r6, r0
 800d1b6:	460f      	mov	r7, r1
 800d1b8:	d016      	beq.n	800d1e8 <__ieee754_rem_pio2+0xe0>
 800d1ba:	a38d      	add	r3, pc, #564	; (adr r3, 800d3f0 <__ieee754_rem_pio2+0x2e8>)
 800d1bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d1c0:	f7f3 f810 	bl	80001e4 <__adddf3>
 800d1c4:	4602      	mov	r2, r0
 800d1c6:	460b      	mov	r3, r1
 800d1c8:	4630      	mov	r0, r6
 800d1ca:	e9c4 2300 	strd	r2, r3, [r4]
 800d1ce:	4639      	mov	r1, r7
 800d1d0:	f7f3 f806 	bl	80001e0 <__aeabi_dsub>
 800d1d4:	a386      	add	r3, pc, #536	; (adr r3, 800d3f0 <__ieee754_rem_pio2+0x2e8>)
 800d1d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d1da:	f7f3 f803 	bl	80001e4 <__adddf3>
 800d1de:	f04f 35ff 	mov.w	r5, #4294967295
 800d1e2:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800d1e6:	e7c6      	b.n	800d176 <__ieee754_rem_pio2+0x6e>
 800d1e8:	a383      	add	r3, pc, #524	; (adr r3, 800d3f8 <__ieee754_rem_pio2+0x2f0>)
 800d1ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d1ee:	f7f2 fff9 	bl	80001e4 <__adddf3>
 800d1f2:	a383      	add	r3, pc, #524	; (adr r3, 800d400 <__ieee754_rem_pio2+0x2f8>)
 800d1f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d1f8:	4606      	mov	r6, r0
 800d1fa:	460f      	mov	r7, r1
 800d1fc:	f7f2 fff2 	bl	80001e4 <__adddf3>
 800d200:	4602      	mov	r2, r0
 800d202:	460b      	mov	r3, r1
 800d204:	4630      	mov	r0, r6
 800d206:	e9c4 2300 	strd	r2, r3, [r4]
 800d20a:	4639      	mov	r1, r7
 800d20c:	f7f2 ffe8 	bl	80001e0 <__aeabi_dsub>
 800d210:	a37b      	add	r3, pc, #492	; (adr r3, 800d400 <__ieee754_rem_pio2+0x2f8>)
 800d212:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d216:	e7e0      	b.n	800d1da <__ieee754_rem_pio2+0xd2>
 800d218:	4a84      	ldr	r2, [pc, #528]	; (800d42c <__ieee754_rem_pio2+0x324>)
 800d21a:	4592      	cmp	sl, r2
 800d21c:	f300 80d5 	bgt.w	800d3ca <__ieee754_rem_pio2+0x2c2>
 800d220:	f000 ffd4 	bl	800e1cc <fabs>
 800d224:	a378      	add	r3, pc, #480	; (adr r3, 800d408 <__ieee754_rem_pio2+0x300>)
 800d226:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d22a:	4606      	mov	r6, r0
 800d22c:	460f      	mov	r7, r1
 800d22e:	f7f3 f98f 	bl	8000550 <__aeabi_dmul>
 800d232:	2200      	movs	r2, #0
 800d234:	4b7e      	ldr	r3, [pc, #504]	; (800d430 <__ieee754_rem_pio2+0x328>)
 800d236:	f7f2 ffd5 	bl	80001e4 <__adddf3>
 800d23a:	f7f3 fc39 	bl	8000ab0 <__aeabi_d2iz>
 800d23e:	4605      	mov	r5, r0
 800d240:	f7f3 f91c 	bl	800047c <__aeabi_i2d>
 800d244:	4602      	mov	r2, r0
 800d246:	460b      	mov	r3, r1
 800d248:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800d24c:	a366      	add	r3, pc, #408	; (adr r3, 800d3e8 <__ieee754_rem_pio2+0x2e0>)
 800d24e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d252:	f7f3 f97d 	bl	8000550 <__aeabi_dmul>
 800d256:	4602      	mov	r2, r0
 800d258:	460b      	mov	r3, r1
 800d25a:	4630      	mov	r0, r6
 800d25c:	4639      	mov	r1, r7
 800d25e:	f7f2 ffbf 	bl	80001e0 <__aeabi_dsub>
 800d262:	a363      	add	r3, pc, #396	; (adr r3, 800d3f0 <__ieee754_rem_pio2+0x2e8>)
 800d264:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d268:	4680      	mov	r8, r0
 800d26a:	4689      	mov	r9, r1
 800d26c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d270:	f7f3 f96e 	bl	8000550 <__aeabi_dmul>
 800d274:	2d1f      	cmp	r5, #31
 800d276:	4606      	mov	r6, r0
 800d278:	460f      	mov	r7, r1
 800d27a:	dc0e      	bgt.n	800d29a <__ieee754_rem_pio2+0x192>
 800d27c:	4b6d      	ldr	r3, [pc, #436]	; (800d434 <__ieee754_rem_pio2+0x32c>)
 800d27e:	1e6a      	subs	r2, r5, #1
 800d280:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d284:	4553      	cmp	r3, sl
 800d286:	d008      	beq.n	800d29a <__ieee754_rem_pio2+0x192>
 800d288:	4632      	mov	r2, r6
 800d28a:	463b      	mov	r3, r7
 800d28c:	4640      	mov	r0, r8
 800d28e:	4649      	mov	r1, r9
 800d290:	f7f2 ffa6 	bl	80001e0 <__aeabi_dsub>
 800d294:	e9c4 0100 	strd	r0, r1, [r4]
 800d298:	e013      	b.n	800d2c2 <__ieee754_rem_pio2+0x1ba>
 800d29a:	463b      	mov	r3, r7
 800d29c:	4632      	mov	r2, r6
 800d29e:	4640      	mov	r0, r8
 800d2a0:	4649      	mov	r1, r9
 800d2a2:	f7f2 ff9d 	bl	80001e0 <__aeabi_dsub>
 800d2a6:	ea4f 532a 	mov.w	r3, sl, asr #20
 800d2aa:	9305      	str	r3, [sp, #20]
 800d2ac:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800d2b0:	ebc3 5a1a 	rsb	sl, r3, sl, lsr #20
 800d2b4:	f1ba 0f10 	cmp.w	sl, #16
 800d2b8:	dc1f      	bgt.n	800d2fa <__ieee754_rem_pio2+0x1f2>
 800d2ba:	4602      	mov	r2, r0
 800d2bc:	460b      	mov	r3, r1
 800d2be:	e9c4 2300 	strd	r2, r3, [r4]
 800d2c2:	e9d4 2a00 	ldrd	r2, sl, [r4]
 800d2c6:	4640      	mov	r0, r8
 800d2c8:	4653      	mov	r3, sl
 800d2ca:	4649      	mov	r1, r9
 800d2cc:	f7f2 ff88 	bl	80001e0 <__aeabi_dsub>
 800d2d0:	4632      	mov	r2, r6
 800d2d2:	463b      	mov	r3, r7
 800d2d4:	f7f2 ff84 	bl	80001e0 <__aeabi_dsub>
 800d2d8:	460b      	mov	r3, r1
 800d2da:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800d2de:	9904      	ldr	r1, [sp, #16]
 800d2e0:	4602      	mov	r2, r0
 800d2e2:	2900      	cmp	r1, #0
 800d2e4:	f6bf af47 	bge.w	800d176 <__ieee754_rem_pio2+0x6e>
 800d2e8:	f10a 4100 	add.w	r1, sl, #2147483648	; 0x80000000
 800d2ec:	e9c4 1201 	strd	r1, r2, [r4, #4]
 800d2f0:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800d2f4:	60e3      	str	r3, [r4, #12]
 800d2f6:	426d      	negs	r5, r5
 800d2f8:	e73d      	b.n	800d176 <__ieee754_rem_pio2+0x6e>
 800d2fa:	a33f      	add	r3, pc, #252	; (adr r3, 800d3f8 <__ieee754_rem_pio2+0x2f0>)
 800d2fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d300:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d304:	f7f3 f924 	bl	8000550 <__aeabi_dmul>
 800d308:	4606      	mov	r6, r0
 800d30a:	460f      	mov	r7, r1
 800d30c:	4602      	mov	r2, r0
 800d30e:	460b      	mov	r3, r1
 800d310:	4640      	mov	r0, r8
 800d312:	4649      	mov	r1, r9
 800d314:	f7f2 ff64 	bl	80001e0 <__aeabi_dsub>
 800d318:	4602      	mov	r2, r0
 800d31a:	460b      	mov	r3, r1
 800d31c:	4682      	mov	sl, r0
 800d31e:	468b      	mov	fp, r1
 800d320:	4640      	mov	r0, r8
 800d322:	4649      	mov	r1, r9
 800d324:	f7f2 ff5c 	bl	80001e0 <__aeabi_dsub>
 800d328:	4632      	mov	r2, r6
 800d32a:	463b      	mov	r3, r7
 800d32c:	f7f2 ff58 	bl	80001e0 <__aeabi_dsub>
 800d330:	a333      	add	r3, pc, #204	; (adr r3, 800d400 <__ieee754_rem_pio2+0x2f8>)
 800d332:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d336:	4606      	mov	r6, r0
 800d338:	460f      	mov	r7, r1
 800d33a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d33e:	f7f3 f907 	bl	8000550 <__aeabi_dmul>
 800d342:	4632      	mov	r2, r6
 800d344:	463b      	mov	r3, r7
 800d346:	f7f2 ff4b 	bl	80001e0 <__aeabi_dsub>
 800d34a:	4602      	mov	r2, r0
 800d34c:	460b      	mov	r3, r1
 800d34e:	4606      	mov	r6, r0
 800d350:	460f      	mov	r7, r1
 800d352:	4650      	mov	r0, sl
 800d354:	4659      	mov	r1, fp
 800d356:	f7f2 ff43 	bl	80001e0 <__aeabi_dsub>
 800d35a:	9a05      	ldr	r2, [sp, #20]
 800d35c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800d360:	1ad3      	subs	r3, r2, r3
 800d362:	2b31      	cmp	r3, #49	; 0x31
 800d364:	dc06      	bgt.n	800d374 <__ieee754_rem_pio2+0x26c>
 800d366:	4602      	mov	r2, r0
 800d368:	460b      	mov	r3, r1
 800d36a:	46d0      	mov	r8, sl
 800d36c:	46d9      	mov	r9, fp
 800d36e:	e9c4 2300 	strd	r2, r3, [r4]
 800d372:	e7a6      	b.n	800d2c2 <__ieee754_rem_pio2+0x1ba>
 800d374:	a326      	add	r3, pc, #152	; (adr r3, 800d410 <__ieee754_rem_pio2+0x308>)
 800d376:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d37a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d37e:	f7f3 f8e7 	bl	8000550 <__aeabi_dmul>
 800d382:	4606      	mov	r6, r0
 800d384:	460f      	mov	r7, r1
 800d386:	4602      	mov	r2, r0
 800d388:	460b      	mov	r3, r1
 800d38a:	4650      	mov	r0, sl
 800d38c:	4659      	mov	r1, fp
 800d38e:	f7f2 ff27 	bl	80001e0 <__aeabi_dsub>
 800d392:	4602      	mov	r2, r0
 800d394:	460b      	mov	r3, r1
 800d396:	4680      	mov	r8, r0
 800d398:	4689      	mov	r9, r1
 800d39a:	4650      	mov	r0, sl
 800d39c:	4659      	mov	r1, fp
 800d39e:	f7f2 ff1f 	bl	80001e0 <__aeabi_dsub>
 800d3a2:	4632      	mov	r2, r6
 800d3a4:	463b      	mov	r3, r7
 800d3a6:	f7f2 ff1b 	bl	80001e0 <__aeabi_dsub>
 800d3aa:	a31b      	add	r3, pc, #108	; (adr r3, 800d418 <__ieee754_rem_pio2+0x310>)
 800d3ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d3b0:	4606      	mov	r6, r0
 800d3b2:	460f      	mov	r7, r1
 800d3b4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d3b8:	f7f3 f8ca 	bl	8000550 <__aeabi_dmul>
 800d3bc:	4632      	mov	r2, r6
 800d3be:	463b      	mov	r3, r7
 800d3c0:	f7f2 ff0e 	bl	80001e0 <__aeabi_dsub>
 800d3c4:	4606      	mov	r6, r0
 800d3c6:	460f      	mov	r7, r1
 800d3c8:	e75e      	b.n	800d288 <__ieee754_rem_pio2+0x180>
 800d3ca:	4a1b      	ldr	r2, [pc, #108]	; (800d438 <__ieee754_rem_pio2+0x330>)
 800d3cc:	4592      	cmp	sl, r2
 800d3ce:	dd35      	ble.n	800d43c <__ieee754_rem_pio2+0x334>
 800d3d0:	4602      	mov	r2, r0
 800d3d2:	460b      	mov	r3, r1
 800d3d4:	f7f2 ff04 	bl	80001e0 <__aeabi_dsub>
 800d3d8:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800d3dc:	e9c4 0100 	strd	r0, r1, [r4]
 800d3e0:	e6a2      	b.n	800d128 <__ieee754_rem_pio2+0x20>
 800d3e2:	bf00      	nop
 800d3e4:	f3af 8000 	nop.w
 800d3e8:	54400000 	.word	0x54400000
 800d3ec:	3ff921fb 	.word	0x3ff921fb
 800d3f0:	1a626331 	.word	0x1a626331
 800d3f4:	3dd0b461 	.word	0x3dd0b461
 800d3f8:	1a600000 	.word	0x1a600000
 800d3fc:	3dd0b461 	.word	0x3dd0b461
 800d400:	2e037073 	.word	0x2e037073
 800d404:	3ba3198a 	.word	0x3ba3198a
 800d408:	6dc9c883 	.word	0x6dc9c883
 800d40c:	3fe45f30 	.word	0x3fe45f30
 800d410:	2e000000 	.word	0x2e000000
 800d414:	3ba3198a 	.word	0x3ba3198a
 800d418:	252049c1 	.word	0x252049c1
 800d41c:	397b839a 	.word	0x397b839a
 800d420:	3fe921fb 	.word	0x3fe921fb
 800d424:	4002d97b 	.word	0x4002d97b
 800d428:	3ff921fb 	.word	0x3ff921fb
 800d42c:	413921fb 	.word	0x413921fb
 800d430:	3fe00000 	.word	0x3fe00000
 800d434:	08011b10 	.word	0x08011b10
 800d438:	7fefffff 	.word	0x7fefffff
 800d43c:	ea4f 552a 	mov.w	r5, sl, asr #20
 800d440:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 800d444:	ebaa 5105 	sub.w	r1, sl, r5, lsl #20
 800d448:	460f      	mov	r7, r1
 800d44a:	4606      	mov	r6, r0
 800d44c:	f7f3 fb30 	bl	8000ab0 <__aeabi_d2iz>
 800d450:	f7f3 f814 	bl	800047c <__aeabi_i2d>
 800d454:	4602      	mov	r2, r0
 800d456:	460b      	mov	r3, r1
 800d458:	4630      	mov	r0, r6
 800d45a:	4639      	mov	r1, r7
 800d45c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800d460:	f7f2 febe 	bl	80001e0 <__aeabi_dsub>
 800d464:	2200      	movs	r2, #0
 800d466:	4b1e      	ldr	r3, [pc, #120]	; (800d4e0 <__ieee754_rem_pio2+0x3d8>)
 800d468:	f7f3 f872 	bl	8000550 <__aeabi_dmul>
 800d46c:	460f      	mov	r7, r1
 800d46e:	4606      	mov	r6, r0
 800d470:	f7f3 fb1e 	bl	8000ab0 <__aeabi_d2iz>
 800d474:	f7f3 f802 	bl	800047c <__aeabi_i2d>
 800d478:	4602      	mov	r2, r0
 800d47a:	460b      	mov	r3, r1
 800d47c:	4630      	mov	r0, r6
 800d47e:	4639      	mov	r1, r7
 800d480:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800d484:	f7f2 feac 	bl	80001e0 <__aeabi_dsub>
 800d488:	2200      	movs	r2, #0
 800d48a:	4b15      	ldr	r3, [pc, #84]	; (800d4e0 <__ieee754_rem_pio2+0x3d8>)
 800d48c:	f7f3 f860 	bl	8000550 <__aeabi_dmul>
 800d490:	f04f 0803 	mov.w	r8, #3
 800d494:	2600      	movs	r6, #0
 800d496:	2700      	movs	r7, #0
 800d498:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800d49c:	f10d 0928 	add.w	r9, sp, #40	; 0x28
 800d4a0:	4632      	mov	r2, r6
 800d4a2:	e879 0102 	ldrd	r0, r1, [r9], #-8
 800d4a6:	463b      	mov	r3, r7
 800d4a8:	46c2      	mov	sl, r8
 800d4aa:	f108 38ff 	add.w	r8, r8, #4294967295
 800d4ae:	f7f3 fab7 	bl	8000a20 <__aeabi_dcmpeq>
 800d4b2:	2800      	cmp	r0, #0
 800d4b4:	d1f4      	bne.n	800d4a0 <__ieee754_rem_pio2+0x398>
 800d4b6:	4b0b      	ldr	r3, [pc, #44]	; (800d4e4 <__ieee754_rem_pio2+0x3dc>)
 800d4b8:	462a      	mov	r2, r5
 800d4ba:	9301      	str	r3, [sp, #4]
 800d4bc:	2302      	movs	r3, #2
 800d4be:	4621      	mov	r1, r4
 800d4c0:	9300      	str	r3, [sp, #0]
 800d4c2:	a806      	add	r0, sp, #24
 800d4c4:	4653      	mov	r3, sl
 800d4c6:	f000 fa81 	bl	800d9cc <__kernel_rem_pio2>
 800d4ca:	9b04      	ldr	r3, [sp, #16]
 800d4cc:	4605      	mov	r5, r0
 800d4ce:	2b00      	cmp	r3, #0
 800d4d0:	f6bf ae51 	bge.w	800d176 <__ieee754_rem_pio2+0x6e>
 800d4d4:	6863      	ldr	r3, [r4, #4]
 800d4d6:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800d4da:	6063      	str	r3, [r4, #4]
 800d4dc:	68e3      	ldr	r3, [r4, #12]
 800d4de:	e707      	b.n	800d2f0 <__ieee754_rem_pio2+0x1e8>
 800d4e0:	41700000 	.word	0x41700000
 800d4e4:	08011b90 	.word	0x08011b90

0800d4e8 <__ieee754_acosf>:
 800d4e8:	f020 4200 	bic.w	r2, r0, #2147483648	; 0x80000000
 800d4ec:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 800d4f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d4f2:	4605      	mov	r5, r0
 800d4f4:	d104      	bne.n	800d500 <__ieee754_acosf+0x18>
 800d4f6:	2800      	cmp	r0, #0
 800d4f8:	f300 8135 	bgt.w	800d766 <__ieee754_acosf+0x27e>
 800d4fc:	489c      	ldr	r0, [pc, #624]	; (800d770 <__ieee754_acosf+0x288>)
 800d4fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d500:	dd06      	ble.n	800d510 <__ieee754_acosf+0x28>
 800d502:	4601      	mov	r1, r0
 800d504:	f7f3 fb70 	bl	8000be8 <__aeabi_fsub>
 800d508:	4601      	mov	r1, r0
 800d50a:	f7f3 fd2b 	bl	8000f64 <__aeabi_fdiv>
 800d50e:	e7f6      	b.n	800d4fe <__ieee754_acosf+0x16>
 800d510:	f1b2 5f7c 	cmp.w	r2, #1056964608	; 0x3f000000
 800d514:	da57      	bge.n	800d5c6 <__ieee754_acosf+0xde>
 800d516:	f1b2 5f0c 	cmp.w	r2, #587202560	; 0x23000000
 800d51a:	f340 8126 	ble.w	800d76a <__ieee754_acosf+0x282>
 800d51e:	4601      	mov	r1, r0
 800d520:	f7f3 fc6c 	bl	8000dfc <__aeabi_fmul>
 800d524:	4604      	mov	r4, r0
 800d526:	4993      	ldr	r1, [pc, #588]	; (800d774 <__ieee754_acosf+0x28c>)
 800d528:	f7f3 fc68 	bl	8000dfc <__aeabi_fmul>
 800d52c:	4992      	ldr	r1, [pc, #584]	; (800d778 <__ieee754_acosf+0x290>)
 800d52e:	f7f3 fb5d 	bl	8000bec <__addsf3>
 800d532:	4621      	mov	r1, r4
 800d534:	f7f3 fc62 	bl	8000dfc <__aeabi_fmul>
 800d538:	4990      	ldr	r1, [pc, #576]	; (800d77c <__ieee754_acosf+0x294>)
 800d53a:	f7f3 fb55 	bl	8000be8 <__aeabi_fsub>
 800d53e:	4621      	mov	r1, r4
 800d540:	f7f3 fc5c 	bl	8000dfc <__aeabi_fmul>
 800d544:	498e      	ldr	r1, [pc, #568]	; (800d780 <__ieee754_acosf+0x298>)
 800d546:	f7f3 fb51 	bl	8000bec <__addsf3>
 800d54a:	4621      	mov	r1, r4
 800d54c:	f7f3 fc56 	bl	8000dfc <__aeabi_fmul>
 800d550:	498c      	ldr	r1, [pc, #560]	; (800d784 <__ieee754_acosf+0x29c>)
 800d552:	f7f3 fb49 	bl	8000be8 <__aeabi_fsub>
 800d556:	4621      	mov	r1, r4
 800d558:	f7f3 fc50 	bl	8000dfc <__aeabi_fmul>
 800d55c:	498a      	ldr	r1, [pc, #552]	; (800d788 <__ieee754_acosf+0x2a0>)
 800d55e:	f7f3 fb45 	bl	8000bec <__addsf3>
 800d562:	4621      	mov	r1, r4
 800d564:	f7f3 fc4a 	bl	8000dfc <__aeabi_fmul>
 800d568:	4988      	ldr	r1, [pc, #544]	; (800d78c <__ieee754_acosf+0x2a4>)
 800d56a:	4606      	mov	r6, r0
 800d56c:	4620      	mov	r0, r4
 800d56e:	f7f3 fc45 	bl	8000dfc <__aeabi_fmul>
 800d572:	4987      	ldr	r1, [pc, #540]	; (800d790 <__ieee754_acosf+0x2a8>)
 800d574:	f7f3 fb38 	bl	8000be8 <__aeabi_fsub>
 800d578:	4621      	mov	r1, r4
 800d57a:	f7f3 fc3f 	bl	8000dfc <__aeabi_fmul>
 800d57e:	4985      	ldr	r1, [pc, #532]	; (800d794 <__ieee754_acosf+0x2ac>)
 800d580:	f7f3 fb34 	bl	8000bec <__addsf3>
 800d584:	4621      	mov	r1, r4
 800d586:	f7f3 fc39 	bl	8000dfc <__aeabi_fmul>
 800d58a:	4983      	ldr	r1, [pc, #524]	; (800d798 <__ieee754_acosf+0x2b0>)
 800d58c:	f7f3 fb2c 	bl	8000be8 <__aeabi_fsub>
 800d590:	4621      	mov	r1, r4
 800d592:	f7f3 fc33 	bl	8000dfc <__aeabi_fmul>
 800d596:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800d59a:	f7f3 fb27 	bl	8000bec <__addsf3>
 800d59e:	4601      	mov	r1, r0
 800d5a0:	4630      	mov	r0, r6
 800d5a2:	f7f3 fcdf 	bl	8000f64 <__aeabi_fdiv>
 800d5a6:	4629      	mov	r1, r5
 800d5a8:	f7f3 fc28 	bl	8000dfc <__aeabi_fmul>
 800d5ac:	4601      	mov	r1, r0
 800d5ae:	487b      	ldr	r0, [pc, #492]	; (800d79c <__ieee754_acosf+0x2b4>)
 800d5b0:	f7f3 fb1a 	bl	8000be8 <__aeabi_fsub>
 800d5b4:	4601      	mov	r1, r0
 800d5b6:	4628      	mov	r0, r5
 800d5b8:	f7f3 fb16 	bl	8000be8 <__aeabi_fsub>
 800d5bc:	4601      	mov	r1, r0
 800d5be:	4878      	ldr	r0, [pc, #480]	; (800d7a0 <__ieee754_acosf+0x2b8>)
 800d5c0:	f7f3 fb12 	bl	8000be8 <__aeabi_fsub>
 800d5c4:	e79b      	b.n	800d4fe <__ieee754_acosf+0x16>
 800d5c6:	2800      	cmp	r0, #0
 800d5c8:	da5b      	bge.n	800d682 <__ieee754_acosf+0x19a>
 800d5ca:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800d5ce:	f7f3 fb0d 	bl	8000bec <__addsf3>
 800d5d2:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800d5d6:	f7f3 fc11 	bl	8000dfc <__aeabi_fmul>
 800d5da:	4604      	mov	r4, r0
 800d5dc:	4965      	ldr	r1, [pc, #404]	; (800d774 <__ieee754_acosf+0x28c>)
 800d5de:	f7f3 fc0d 	bl	8000dfc <__aeabi_fmul>
 800d5e2:	4965      	ldr	r1, [pc, #404]	; (800d778 <__ieee754_acosf+0x290>)
 800d5e4:	f7f3 fb02 	bl	8000bec <__addsf3>
 800d5e8:	4621      	mov	r1, r4
 800d5ea:	f7f3 fc07 	bl	8000dfc <__aeabi_fmul>
 800d5ee:	4963      	ldr	r1, [pc, #396]	; (800d77c <__ieee754_acosf+0x294>)
 800d5f0:	f7f3 fafa 	bl	8000be8 <__aeabi_fsub>
 800d5f4:	4621      	mov	r1, r4
 800d5f6:	f7f3 fc01 	bl	8000dfc <__aeabi_fmul>
 800d5fa:	4961      	ldr	r1, [pc, #388]	; (800d780 <__ieee754_acosf+0x298>)
 800d5fc:	f7f3 faf6 	bl	8000bec <__addsf3>
 800d600:	4621      	mov	r1, r4
 800d602:	f7f3 fbfb 	bl	8000dfc <__aeabi_fmul>
 800d606:	495f      	ldr	r1, [pc, #380]	; (800d784 <__ieee754_acosf+0x29c>)
 800d608:	f7f3 faee 	bl	8000be8 <__aeabi_fsub>
 800d60c:	4621      	mov	r1, r4
 800d60e:	f7f3 fbf5 	bl	8000dfc <__aeabi_fmul>
 800d612:	495d      	ldr	r1, [pc, #372]	; (800d788 <__ieee754_acosf+0x2a0>)
 800d614:	f7f3 faea 	bl	8000bec <__addsf3>
 800d618:	4621      	mov	r1, r4
 800d61a:	f7f3 fbef 	bl	8000dfc <__aeabi_fmul>
 800d61e:	4606      	mov	r6, r0
 800d620:	4620      	mov	r0, r4
 800d622:	f000 f8c3 	bl	800d7ac <__ieee754_sqrtf>
 800d626:	4959      	ldr	r1, [pc, #356]	; (800d78c <__ieee754_acosf+0x2a4>)
 800d628:	4605      	mov	r5, r0
 800d62a:	4620      	mov	r0, r4
 800d62c:	f7f3 fbe6 	bl	8000dfc <__aeabi_fmul>
 800d630:	4957      	ldr	r1, [pc, #348]	; (800d790 <__ieee754_acosf+0x2a8>)
 800d632:	f7f3 fad9 	bl	8000be8 <__aeabi_fsub>
 800d636:	4621      	mov	r1, r4
 800d638:	f7f3 fbe0 	bl	8000dfc <__aeabi_fmul>
 800d63c:	4955      	ldr	r1, [pc, #340]	; (800d794 <__ieee754_acosf+0x2ac>)
 800d63e:	f7f3 fad5 	bl	8000bec <__addsf3>
 800d642:	4621      	mov	r1, r4
 800d644:	f7f3 fbda 	bl	8000dfc <__aeabi_fmul>
 800d648:	4953      	ldr	r1, [pc, #332]	; (800d798 <__ieee754_acosf+0x2b0>)
 800d64a:	f7f3 facd 	bl	8000be8 <__aeabi_fsub>
 800d64e:	4621      	mov	r1, r4
 800d650:	f7f3 fbd4 	bl	8000dfc <__aeabi_fmul>
 800d654:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800d658:	f7f3 fac8 	bl	8000bec <__addsf3>
 800d65c:	4601      	mov	r1, r0
 800d65e:	4630      	mov	r0, r6
 800d660:	f7f3 fc80 	bl	8000f64 <__aeabi_fdiv>
 800d664:	4629      	mov	r1, r5
 800d666:	f7f3 fbc9 	bl	8000dfc <__aeabi_fmul>
 800d66a:	494c      	ldr	r1, [pc, #304]	; (800d79c <__ieee754_acosf+0x2b4>)
 800d66c:	f7f3 fabc 	bl	8000be8 <__aeabi_fsub>
 800d670:	4629      	mov	r1, r5
 800d672:	f7f3 fabb 	bl	8000bec <__addsf3>
 800d676:	4601      	mov	r1, r0
 800d678:	f7f3 fab8 	bl	8000bec <__addsf3>
 800d67c:	4601      	mov	r1, r0
 800d67e:	4849      	ldr	r0, [pc, #292]	; (800d7a4 <__ieee754_acosf+0x2bc>)
 800d680:	e79e      	b.n	800d5c0 <__ieee754_acosf+0xd8>
 800d682:	4601      	mov	r1, r0
 800d684:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800d688:	f7f3 faae 	bl	8000be8 <__aeabi_fsub>
 800d68c:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800d690:	f7f3 fbb4 	bl	8000dfc <__aeabi_fmul>
 800d694:	4604      	mov	r4, r0
 800d696:	f000 f889 	bl	800d7ac <__ieee754_sqrtf>
 800d69a:	4936      	ldr	r1, [pc, #216]	; (800d774 <__ieee754_acosf+0x28c>)
 800d69c:	4606      	mov	r6, r0
 800d69e:	f420 657f 	bic.w	r5, r0, #4080	; 0xff0
 800d6a2:	4620      	mov	r0, r4
 800d6a4:	f7f3 fbaa 	bl	8000dfc <__aeabi_fmul>
 800d6a8:	4933      	ldr	r1, [pc, #204]	; (800d778 <__ieee754_acosf+0x290>)
 800d6aa:	f7f3 fa9f 	bl	8000bec <__addsf3>
 800d6ae:	4621      	mov	r1, r4
 800d6b0:	f7f3 fba4 	bl	8000dfc <__aeabi_fmul>
 800d6b4:	4931      	ldr	r1, [pc, #196]	; (800d77c <__ieee754_acosf+0x294>)
 800d6b6:	f7f3 fa97 	bl	8000be8 <__aeabi_fsub>
 800d6ba:	4621      	mov	r1, r4
 800d6bc:	f7f3 fb9e 	bl	8000dfc <__aeabi_fmul>
 800d6c0:	492f      	ldr	r1, [pc, #188]	; (800d780 <__ieee754_acosf+0x298>)
 800d6c2:	f7f3 fa93 	bl	8000bec <__addsf3>
 800d6c6:	4621      	mov	r1, r4
 800d6c8:	f7f3 fb98 	bl	8000dfc <__aeabi_fmul>
 800d6cc:	492d      	ldr	r1, [pc, #180]	; (800d784 <__ieee754_acosf+0x29c>)
 800d6ce:	f7f3 fa8b 	bl	8000be8 <__aeabi_fsub>
 800d6d2:	4621      	mov	r1, r4
 800d6d4:	f7f3 fb92 	bl	8000dfc <__aeabi_fmul>
 800d6d8:	492b      	ldr	r1, [pc, #172]	; (800d788 <__ieee754_acosf+0x2a0>)
 800d6da:	f7f3 fa87 	bl	8000bec <__addsf3>
 800d6de:	4621      	mov	r1, r4
 800d6e0:	f7f3 fb8c 	bl	8000dfc <__aeabi_fmul>
 800d6e4:	4929      	ldr	r1, [pc, #164]	; (800d78c <__ieee754_acosf+0x2a4>)
 800d6e6:	4607      	mov	r7, r0
 800d6e8:	4620      	mov	r0, r4
 800d6ea:	f7f3 fb87 	bl	8000dfc <__aeabi_fmul>
 800d6ee:	4928      	ldr	r1, [pc, #160]	; (800d790 <__ieee754_acosf+0x2a8>)
 800d6f0:	f7f3 fa7a 	bl	8000be8 <__aeabi_fsub>
 800d6f4:	4621      	mov	r1, r4
 800d6f6:	f7f3 fb81 	bl	8000dfc <__aeabi_fmul>
 800d6fa:	4926      	ldr	r1, [pc, #152]	; (800d794 <__ieee754_acosf+0x2ac>)
 800d6fc:	f7f3 fa76 	bl	8000bec <__addsf3>
 800d700:	4621      	mov	r1, r4
 800d702:	f7f3 fb7b 	bl	8000dfc <__aeabi_fmul>
 800d706:	4924      	ldr	r1, [pc, #144]	; (800d798 <__ieee754_acosf+0x2b0>)
 800d708:	f7f3 fa6e 	bl	8000be8 <__aeabi_fsub>
 800d70c:	4621      	mov	r1, r4
 800d70e:	f7f3 fb75 	bl	8000dfc <__aeabi_fmul>
 800d712:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800d716:	f7f3 fa69 	bl	8000bec <__addsf3>
 800d71a:	4601      	mov	r1, r0
 800d71c:	4638      	mov	r0, r7
 800d71e:	f7f3 fc21 	bl	8000f64 <__aeabi_fdiv>
 800d722:	4631      	mov	r1, r6
 800d724:	f7f3 fb6a 	bl	8000dfc <__aeabi_fmul>
 800d728:	f025 050f 	bic.w	r5, r5, #15
 800d72c:	4607      	mov	r7, r0
 800d72e:	4629      	mov	r1, r5
 800d730:	4628      	mov	r0, r5
 800d732:	f7f3 fb63 	bl	8000dfc <__aeabi_fmul>
 800d736:	4601      	mov	r1, r0
 800d738:	4620      	mov	r0, r4
 800d73a:	f7f3 fa55 	bl	8000be8 <__aeabi_fsub>
 800d73e:	4629      	mov	r1, r5
 800d740:	4604      	mov	r4, r0
 800d742:	4630      	mov	r0, r6
 800d744:	f7f3 fa52 	bl	8000bec <__addsf3>
 800d748:	4601      	mov	r1, r0
 800d74a:	4620      	mov	r0, r4
 800d74c:	f7f3 fc0a 	bl	8000f64 <__aeabi_fdiv>
 800d750:	4601      	mov	r1, r0
 800d752:	4638      	mov	r0, r7
 800d754:	f7f3 fa4a 	bl	8000bec <__addsf3>
 800d758:	4629      	mov	r1, r5
 800d75a:	f7f3 fa47 	bl	8000bec <__addsf3>
 800d75e:	4601      	mov	r1, r0
 800d760:	f7f3 fa44 	bl	8000bec <__addsf3>
 800d764:	e6cb      	b.n	800d4fe <__ieee754_acosf+0x16>
 800d766:	2000      	movs	r0, #0
 800d768:	e6c9      	b.n	800d4fe <__ieee754_acosf+0x16>
 800d76a:	480f      	ldr	r0, [pc, #60]	; (800d7a8 <__ieee754_acosf+0x2c0>)
 800d76c:	e6c7      	b.n	800d4fe <__ieee754_acosf+0x16>
 800d76e:	bf00      	nop
 800d770:	40490fdb 	.word	0x40490fdb
 800d774:	3811ef08 	.word	0x3811ef08
 800d778:	3a4f7f04 	.word	0x3a4f7f04
 800d77c:	3d241146 	.word	0x3d241146
 800d780:	3e4e0aa8 	.word	0x3e4e0aa8
 800d784:	3ea6b090 	.word	0x3ea6b090
 800d788:	3e2aaaab 	.word	0x3e2aaaab
 800d78c:	3d9dc62e 	.word	0x3d9dc62e
 800d790:	3f303361 	.word	0x3f303361
 800d794:	4001572d 	.word	0x4001572d
 800d798:	4019d139 	.word	0x4019d139
 800d79c:	33a22168 	.word	0x33a22168
 800d7a0:	3fc90fda 	.word	0x3fc90fda
 800d7a4:	40490fda 	.word	0x40490fda
 800d7a8:	3fc90fdb 	.word	0x3fc90fdb

0800d7ac <__ieee754_sqrtf>:
 800d7ac:	f020 4200 	bic.w	r2, r0, #2147483648	; 0x80000000
 800d7b0:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800d7b4:	b570      	push	{r4, r5, r6, lr}
 800d7b6:	4603      	mov	r3, r0
 800d7b8:	4604      	mov	r4, r0
 800d7ba:	d309      	bcc.n	800d7d0 <__ieee754_sqrtf+0x24>
 800d7bc:	4601      	mov	r1, r0
 800d7be:	f7f3 fb1d 	bl	8000dfc <__aeabi_fmul>
 800d7c2:	4601      	mov	r1, r0
 800d7c4:	4620      	mov	r0, r4
 800d7c6:	f7f3 fa11 	bl	8000bec <__addsf3>
 800d7ca:	4604      	mov	r4, r0
 800d7cc:	4620      	mov	r0, r4
 800d7ce:	bd70      	pop	{r4, r5, r6, pc}
 800d7d0:	2a00      	cmp	r2, #0
 800d7d2:	d0fb      	beq.n	800d7cc <__ieee754_sqrtf+0x20>
 800d7d4:	2800      	cmp	r0, #0
 800d7d6:	da06      	bge.n	800d7e6 <__ieee754_sqrtf+0x3a>
 800d7d8:	4601      	mov	r1, r0
 800d7da:	f7f3 fa05 	bl	8000be8 <__aeabi_fsub>
 800d7de:	4601      	mov	r1, r0
 800d7e0:	f7f3 fbc0 	bl	8000f64 <__aeabi_fdiv>
 800d7e4:	e7f1      	b.n	800d7ca <__ieee754_sqrtf+0x1e>
 800d7e6:	f010 42ff 	ands.w	r2, r0, #2139095040	; 0x7f800000
 800d7ea:	ea4f 51e0 	mov.w	r1, r0, asr #23
 800d7ee:	d029      	beq.n	800d844 <__ieee754_sqrtf+0x98>
 800d7f0:	f3c3 0216 	ubfx	r2, r3, #0, #23
 800d7f4:	07cb      	lsls	r3, r1, #31
 800d7f6:	f04f 0300 	mov.w	r3, #0
 800d7fa:	f1a1 007f 	sub.w	r0, r1, #127	; 0x7f
 800d7fe:	f04f 0419 	mov.w	r4, #25
 800d802:	461e      	mov	r6, r3
 800d804:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
 800d808:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800d80c:	bf58      	it	pl
 800d80e:	0052      	lslpl	r2, r2, #1
 800d810:	1040      	asrs	r0, r0, #1
 800d812:	0052      	lsls	r2, r2, #1
 800d814:	1875      	adds	r5, r6, r1
 800d816:	4295      	cmp	r5, r2
 800d818:	bfde      	ittt	le
 800d81a:	186e      	addle	r6, r5, r1
 800d81c:	1b52      	suble	r2, r2, r5
 800d81e:	185b      	addle	r3, r3, r1
 800d820:	3c01      	subs	r4, #1
 800d822:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800d826:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800d82a:	d1f3      	bne.n	800d814 <__ieee754_sqrtf+0x68>
 800d82c:	b112      	cbz	r2, 800d834 <__ieee754_sqrtf+0x88>
 800d82e:	3301      	adds	r3, #1
 800d830:	f023 0301 	bic.w	r3, r3, #1
 800d834:	105c      	asrs	r4, r3, #1
 800d836:	f104 547c 	add.w	r4, r4, #1056964608	; 0x3f000000
 800d83a:	eb04 54c0 	add.w	r4, r4, r0, lsl #23
 800d83e:	e7c5      	b.n	800d7cc <__ieee754_sqrtf+0x20>
 800d840:	005b      	lsls	r3, r3, #1
 800d842:	3201      	adds	r2, #1
 800d844:	0218      	lsls	r0, r3, #8
 800d846:	d5fb      	bpl.n	800d840 <__ieee754_sqrtf+0x94>
 800d848:	3a01      	subs	r2, #1
 800d84a:	1a89      	subs	r1, r1, r2
 800d84c:	e7d0      	b.n	800d7f0 <__ieee754_sqrtf+0x44>
	...

0800d850 <__kernel_cos>:
 800d850:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d854:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800d858:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 800d85c:	4680      	mov	r8, r0
 800d85e:	460f      	mov	r7, r1
 800d860:	e9cd 2300 	strd	r2, r3, [sp]
 800d864:	da04      	bge.n	800d870 <__kernel_cos+0x20>
 800d866:	f7f3 f923 	bl	8000ab0 <__aeabi_d2iz>
 800d86a:	2800      	cmp	r0, #0
 800d86c:	f000 8086 	beq.w	800d97c <__kernel_cos+0x12c>
 800d870:	4642      	mov	r2, r8
 800d872:	463b      	mov	r3, r7
 800d874:	4640      	mov	r0, r8
 800d876:	4639      	mov	r1, r7
 800d878:	f7f2 fe6a 	bl	8000550 <__aeabi_dmul>
 800d87c:	2200      	movs	r2, #0
 800d87e:	4b4e      	ldr	r3, [pc, #312]	; (800d9b8 <__kernel_cos+0x168>)
 800d880:	4604      	mov	r4, r0
 800d882:	460d      	mov	r5, r1
 800d884:	f7f2 fe64 	bl	8000550 <__aeabi_dmul>
 800d888:	a33f      	add	r3, pc, #252	; (adr r3, 800d988 <__kernel_cos+0x138>)
 800d88a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d88e:	4682      	mov	sl, r0
 800d890:	468b      	mov	fp, r1
 800d892:	4620      	mov	r0, r4
 800d894:	4629      	mov	r1, r5
 800d896:	f7f2 fe5b 	bl	8000550 <__aeabi_dmul>
 800d89a:	a33d      	add	r3, pc, #244	; (adr r3, 800d990 <__kernel_cos+0x140>)
 800d89c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d8a0:	f7f2 fca0 	bl	80001e4 <__adddf3>
 800d8a4:	4622      	mov	r2, r4
 800d8a6:	462b      	mov	r3, r5
 800d8a8:	f7f2 fe52 	bl	8000550 <__aeabi_dmul>
 800d8ac:	a33a      	add	r3, pc, #232	; (adr r3, 800d998 <__kernel_cos+0x148>)
 800d8ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d8b2:	f7f2 fc95 	bl	80001e0 <__aeabi_dsub>
 800d8b6:	4622      	mov	r2, r4
 800d8b8:	462b      	mov	r3, r5
 800d8ba:	f7f2 fe49 	bl	8000550 <__aeabi_dmul>
 800d8be:	a338      	add	r3, pc, #224	; (adr r3, 800d9a0 <__kernel_cos+0x150>)
 800d8c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d8c4:	f7f2 fc8e 	bl	80001e4 <__adddf3>
 800d8c8:	4622      	mov	r2, r4
 800d8ca:	462b      	mov	r3, r5
 800d8cc:	f7f2 fe40 	bl	8000550 <__aeabi_dmul>
 800d8d0:	a335      	add	r3, pc, #212	; (adr r3, 800d9a8 <__kernel_cos+0x158>)
 800d8d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d8d6:	f7f2 fc83 	bl	80001e0 <__aeabi_dsub>
 800d8da:	4622      	mov	r2, r4
 800d8dc:	462b      	mov	r3, r5
 800d8de:	f7f2 fe37 	bl	8000550 <__aeabi_dmul>
 800d8e2:	a333      	add	r3, pc, #204	; (adr r3, 800d9b0 <__kernel_cos+0x160>)
 800d8e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d8e8:	f7f2 fc7c 	bl	80001e4 <__adddf3>
 800d8ec:	4622      	mov	r2, r4
 800d8ee:	462b      	mov	r3, r5
 800d8f0:	f7f2 fe2e 	bl	8000550 <__aeabi_dmul>
 800d8f4:	4622      	mov	r2, r4
 800d8f6:	462b      	mov	r3, r5
 800d8f8:	f7f2 fe2a 	bl	8000550 <__aeabi_dmul>
 800d8fc:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d900:	4604      	mov	r4, r0
 800d902:	460d      	mov	r5, r1
 800d904:	4640      	mov	r0, r8
 800d906:	4639      	mov	r1, r7
 800d908:	f7f2 fe22 	bl	8000550 <__aeabi_dmul>
 800d90c:	460b      	mov	r3, r1
 800d90e:	4602      	mov	r2, r0
 800d910:	4629      	mov	r1, r5
 800d912:	4620      	mov	r0, r4
 800d914:	f7f2 fc64 	bl	80001e0 <__aeabi_dsub>
 800d918:	4b28      	ldr	r3, [pc, #160]	; (800d9bc <__kernel_cos+0x16c>)
 800d91a:	4680      	mov	r8, r0
 800d91c:	429e      	cmp	r6, r3
 800d91e:	4689      	mov	r9, r1
 800d920:	dc0e      	bgt.n	800d940 <__kernel_cos+0xf0>
 800d922:	4602      	mov	r2, r0
 800d924:	460b      	mov	r3, r1
 800d926:	4650      	mov	r0, sl
 800d928:	4659      	mov	r1, fp
 800d92a:	f7f2 fc59 	bl	80001e0 <__aeabi_dsub>
 800d92e:	4602      	mov	r2, r0
 800d930:	2000      	movs	r0, #0
 800d932:	460b      	mov	r3, r1
 800d934:	4922      	ldr	r1, [pc, #136]	; (800d9c0 <__kernel_cos+0x170>)
 800d936:	f7f2 fc53 	bl	80001e0 <__aeabi_dsub>
 800d93a:	b003      	add	sp, #12
 800d93c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d940:	2400      	movs	r4, #0
 800d942:	4b20      	ldr	r3, [pc, #128]	; (800d9c4 <__kernel_cos+0x174>)
 800d944:	4622      	mov	r2, r4
 800d946:	429e      	cmp	r6, r3
 800d948:	bfcc      	ite	gt
 800d94a:	4d1f      	ldrgt	r5, [pc, #124]	; (800d9c8 <__kernel_cos+0x178>)
 800d94c:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 800d950:	462b      	mov	r3, r5
 800d952:	2000      	movs	r0, #0
 800d954:	491a      	ldr	r1, [pc, #104]	; (800d9c0 <__kernel_cos+0x170>)
 800d956:	f7f2 fc43 	bl	80001e0 <__aeabi_dsub>
 800d95a:	4622      	mov	r2, r4
 800d95c:	4606      	mov	r6, r0
 800d95e:	460f      	mov	r7, r1
 800d960:	462b      	mov	r3, r5
 800d962:	4650      	mov	r0, sl
 800d964:	4659      	mov	r1, fp
 800d966:	f7f2 fc3b 	bl	80001e0 <__aeabi_dsub>
 800d96a:	4642      	mov	r2, r8
 800d96c:	464b      	mov	r3, r9
 800d96e:	f7f2 fc37 	bl	80001e0 <__aeabi_dsub>
 800d972:	4602      	mov	r2, r0
 800d974:	460b      	mov	r3, r1
 800d976:	4630      	mov	r0, r6
 800d978:	4639      	mov	r1, r7
 800d97a:	e7dc      	b.n	800d936 <__kernel_cos+0xe6>
 800d97c:	2000      	movs	r0, #0
 800d97e:	4910      	ldr	r1, [pc, #64]	; (800d9c0 <__kernel_cos+0x170>)
 800d980:	e7db      	b.n	800d93a <__kernel_cos+0xea>
 800d982:	bf00      	nop
 800d984:	f3af 8000 	nop.w
 800d988:	be8838d4 	.word	0xbe8838d4
 800d98c:	bda8fae9 	.word	0xbda8fae9
 800d990:	bdb4b1c4 	.word	0xbdb4b1c4
 800d994:	3e21ee9e 	.word	0x3e21ee9e
 800d998:	809c52ad 	.word	0x809c52ad
 800d99c:	3e927e4f 	.word	0x3e927e4f
 800d9a0:	19cb1590 	.word	0x19cb1590
 800d9a4:	3efa01a0 	.word	0x3efa01a0
 800d9a8:	16c15177 	.word	0x16c15177
 800d9ac:	3f56c16c 	.word	0x3f56c16c
 800d9b0:	5555554c 	.word	0x5555554c
 800d9b4:	3fa55555 	.word	0x3fa55555
 800d9b8:	3fe00000 	.word	0x3fe00000
 800d9bc:	3fd33332 	.word	0x3fd33332
 800d9c0:	3ff00000 	.word	0x3ff00000
 800d9c4:	3fe90000 	.word	0x3fe90000
 800d9c8:	3fd20000 	.word	0x3fd20000

0800d9cc <__kernel_rem_pio2>:
 800d9cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d9d0:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 800d9d4:	9308      	str	r3, [sp, #32]
 800d9d6:	9101      	str	r1, [sp, #4]
 800d9d8:	4bc0      	ldr	r3, [pc, #768]	; (800dcdc <__kernel_rem_pio2+0x310>)
 800d9da:	99a2      	ldr	r1, [sp, #648]	; 0x288
 800d9dc:	f112 0f14 	cmn.w	r2, #20
 800d9e0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800d9e4:	bfa8      	it	ge
 800d9e6:	1ed4      	subge	r4, r2, #3
 800d9e8:	9304      	str	r3, [sp, #16]
 800d9ea:	9b08      	ldr	r3, [sp, #32]
 800d9ec:	bfb8      	it	lt
 800d9ee:	2400      	movlt	r4, #0
 800d9f0:	f103 33ff 	add.w	r3, r3, #4294967295
 800d9f4:	9306      	str	r3, [sp, #24]
 800d9f6:	bfa4      	itt	ge
 800d9f8:	2318      	movge	r3, #24
 800d9fa:	fb94 f4f3 	sdivge	r4, r4, r3
 800d9fe:	f06f 0317 	mvn.w	r3, #23
 800da02:	fb04 3303 	mla	r3, r4, r3, r3
 800da06:	eb03 0a02 	add.w	sl, r3, r2
 800da0a:	9a06      	ldr	r2, [sp, #24]
 800da0c:	9b04      	ldr	r3, [sp, #16]
 800da0e:	1aa7      	subs	r7, r4, r2
 800da10:	eb03 0802 	add.w	r8, r3, r2
 800da14:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 800da16:	2500      	movs	r5, #0
 800da18:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800da1c:	2200      	movs	r2, #0
 800da1e:	2300      	movs	r3, #0
 800da20:	9009      	str	r0, [sp, #36]	; 0x24
 800da22:	ae20      	add	r6, sp, #128	; 0x80
 800da24:	4545      	cmp	r5, r8
 800da26:	dd19      	ble.n	800da5c <__kernel_rem_pio2+0x90>
 800da28:	9b08      	ldr	r3, [sp, #32]
 800da2a:	aa20      	add	r2, sp, #128	; 0x80
 800da2c:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800da30:	f8dd 8018 	ldr.w	r8, [sp, #24]
 800da34:	f1c3 0301 	rsb	r3, r3, #1
 800da38:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 800da3c:	9307      	str	r3, [sp, #28]
 800da3e:	9b07      	ldr	r3, [sp, #28]
 800da40:	9a04      	ldr	r2, [sp, #16]
 800da42:	4443      	add	r3, r8
 800da44:	429a      	cmp	r2, r3
 800da46:	db35      	blt.n	800dab4 <__kernel_rem_pio2+0xe8>
 800da48:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800da4a:	2200      	movs	r2, #0
 800da4c:	f1a3 0908 	sub.w	r9, r3, #8
 800da50:	2300      	movs	r3, #0
 800da52:	462f      	mov	r7, r5
 800da54:	2600      	movs	r6, #0
 800da56:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800da5a:	e01f      	b.n	800da9c <__kernel_rem_pio2+0xd0>
 800da5c:	42ef      	cmn	r7, r5
 800da5e:	d40b      	bmi.n	800da78 <__kernel_rem_pio2+0xac>
 800da60:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800da64:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800da68:	f7f2 fd08 	bl	800047c <__aeabi_i2d>
 800da6c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800da70:	e8e6 0102 	strd	r0, r1, [r6], #8
 800da74:	3501      	adds	r5, #1
 800da76:	e7d5      	b.n	800da24 <__kernel_rem_pio2+0x58>
 800da78:	4610      	mov	r0, r2
 800da7a:	4619      	mov	r1, r3
 800da7c:	e7f8      	b.n	800da70 <__kernel_rem_pio2+0xa4>
 800da7e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800da82:	e9f9 0102 	ldrd	r0, r1, [r9, #8]!
 800da86:	f7f2 fd63 	bl	8000550 <__aeabi_dmul>
 800da8a:	4602      	mov	r2, r0
 800da8c:	460b      	mov	r3, r1
 800da8e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800da92:	f7f2 fba7 	bl	80001e4 <__adddf3>
 800da96:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800da9a:	3601      	adds	r6, #1
 800da9c:	9b06      	ldr	r3, [sp, #24]
 800da9e:	3f08      	subs	r7, #8
 800daa0:	429e      	cmp	r6, r3
 800daa2:	ddec      	ble.n	800da7e <__kernel_rem_pio2+0xb2>
 800daa4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800daa8:	3508      	adds	r5, #8
 800daaa:	e8eb 2302 	strd	r2, r3, [fp], #8
 800daae:	f108 0801 	add.w	r8, r8, #1
 800dab2:	e7c4      	b.n	800da3e <__kernel_rem_pio2+0x72>
 800dab4:	9b04      	ldr	r3, [sp, #16]
 800dab6:	aa0c      	add	r2, sp, #48	; 0x30
 800dab8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800dabc:	930b      	str	r3, [sp, #44]	; 0x2c
 800dabe:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 800dac0:	9f04      	ldr	r7, [sp, #16]
 800dac2:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800dac6:	930a      	str	r3, [sp, #40]	; 0x28
 800dac8:	463e      	mov	r6, r7
 800daca:	ab98      	add	r3, sp, #608	; 0x260
 800dacc:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
 800dad0:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800dad4:	f8cd b008 	str.w	fp, [sp, #8]
 800dad8:	e953 4528 	ldrd	r4, r5, [r3, #-160]	; 0xa0
 800dadc:	2e00      	cmp	r6, #0
 800dade:	dc71      	bgt.n	800dbc4 <__kernel_rem_pio2+0x1f8>
 800dae0:	4652      	mov	r2, sl
 800dae2:	4620      	mov	r0, r4
 800dae4:	4629      	mov	r1, r5
 800dae6:	f000 fbf7 	bl	800e2d8 <scalbn>
 800daea:	2200      	movs	r2, #0
 800daec:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800daf0:	4604      	mov	r4, r0
 800daf2:	460d      	mov	r5, r1
 800daf4:	f7f2 fd2c 	bl	8000550 <__aeabi_dmul>
 800daf8:	f000 fb6e 	bl	800e1d8 <floor>
 800dafc:	2200      	movs	r2, #0
 800dafe:	4b78      	ldr	r3, [pc, #480]	; (800dce0 <__kernel_rem_pio2+0x314>)
 800db00:	f7f2 fd26 	bl	8000550 <__aeabi_dmul>
 800db04:	4602      	mov	r2, r0
 800db06:	460b      	mov	r3, r1
 800db08:	4620      	mov	r0, r4
 800db0a:	4629      	mov	r1, r5
 800db0c:	f7f2 fb68 	bl	80001e0 <__aeabi_dsub>
 800db10:	460d      	mov	r5, r1
 800db12:	4604      	mov	r4, r0
 800db14:	f7f2 ffcc 	bl	8000ab0 <__aeabi_d2iz>
 800db18:	9007      	str	r0, [sp, #28]
 800db1a:	f7f2 fcaf 	bl	800047c <__aeabi_i2d>
 800db1e:	4602      	mov	r2, r0
 800db20:	460b      	mov	r3, r1
 800db22:	4620      	mov	r0, r4
 800db24:	4629      	mov	r1, r5
 800db26:	f7f2 fb5b 	bl	80001e0 <__aeabi_dsub>
 800db2a:	f1ba 0f00 	cmp.w	sl, #0
 800db2e:	4680      	mov	r8, r0
 800db30:	4689      	mov	r9, r1
 800db32:	dd70      	ble.n	800dc16 <__kernel_rem_pio2+0x24a>
 800db34:	1e7a      	subs	r2, r7, #1
 800db36:	ab0c      	add	r3, sp, #48	; 0x30
 800db38:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800db3c:	9c07      	ldr	r4, [sp, #28]
 800db3e:	f1ca 0118 	rsb	r1, sl, #24
 800db42:	fa40 f301 	asr.w	r3, r0, r1
 800db46:	441c      	add	r4, r3
 800db48:	408b      	lsls	r3, r1
 800db4a:	1ac0      	subs	r0, r0, r3
 800db4c:	ab0c      	add	r3, sp, #48	; 0x30
 800db4e:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800db52:	f1ca 0317 	rsb	r3, sl, #23
 800db56:	9407      	str	r4, [sp, #28]
 800db58:	fa40 f303 	asr.w	r3, r0, r3
 800db5c:	9302      	str	r3, [sp, #8]
 800db5e:	9b02      	ldr	r3, [sp, #8]
 800db60:	2b00      	cmp	r3, #0
 800db62:	dd66      	ble.n	800dc32 <__kernel_rem_pio2+0x266>
 800db64:	2200      	movs	r2, #0
 800db66:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800db6a:	4614      	mov	r4, r2
 800db6c:	9b07      	ldr	r3, [sp, #28]
 800db6e:	3301      	adds	r3, #1
 800db70:	9307      	str	r3, [sp, #28]
 800db72:	4297      	cmp	r7, r2
 800db74:	f300 809f 	bgt.w	800dcb6 <__kernel_rem_pio2+0x2ea>
 800db78:	f1ba 0f00 	cmp.w	sl, #0
 800db7c:	dd07      	ble.n	800db8e <__kernel_rem_pio2+0x1c2>
 800db7e:	f1ba 0f01 	cmp.w	sl, #1
 800db82:	f000 80b9 	beq.w	800dcf8 <__kernel_rem_pio2+0x32c>
 800db86:	f1ba 0f02 	cmp.w	sl, #2
 800db8a:	f000 80bf 	beq.w	800dd0c <__kernel_rem_pio2+0x340>
 800db8e:	9b02      	ldr	r3, [sp, #8]
 800db90:	2b02      	cmp	r3, #2
 800db92:	d14e      	bne.n	800dc32 <__kernel_rem_pio2+0x266>
 800db94:	4642      	mov	r2, r8
 800db96:	464b      	mov	r3, r9
 800db98:	2000      	movs	r0, #0
 800db9a:	4952      	ldr	r1, [pc, #328]	; (800dce4 <__kernel_rem_pio2+0x318>)
 800db9c:	f7f2 fb20 	bl	80001e0 <__aeabi_dsub>
 800dba0:	4680      	mov	r8, r0
 800dba2:	4689      	mov	r9, r1
 800dba4:	2c00      	cmp	r4, #0
 800dba6:	d044      	beq.n	800dc32 <__kernel_rem_pio2+0x266>
 800dba8:	4652      	mov	r2, sl
 800dbaa:	2000      	movs	r0, #0
 800dbac:	494d      	ldr	r1, [pc, #308]	; (800dce4 <__kernel_rem_pio2+0x318>)
 800dbae:	f000 fb93 	bl	800e2d8 <scalbn>
 800dbb2:	4602      	mov	r2, r0
 800dbb4:	460b      	mov	r3, r1
 800dbb6:	4640      	mov	r0, r8
 800dbb8:	4649      	mov	r1, r9
 800dbba:	f7f2 fb11 	bl	80001e0 <__aeabi_dsub>
 800dbbe:	4680      	mov	r8, r0
 800dbc0:	4689      	mov	r9, r1
 800dbc2:	e036      	b.n	800dc32 <__kernel_rem_pio2+0x266>
 800dbc4:	2200      	movs	r2, #0
 800dbc6:	4b48      	ldr	r3, [pc, #288]	; (800dce8 <__kernel_rem_pio2+0x31c>)
 800dbc8:	4620      	mov	r0, r4
 800dbca:	4629      	mov	r1, r5
 800dbcc:	f7f2 fcc0 	bl	8000550 <__aeabi_dmul>
 800dbd0:	f7f2 ff6e 	bl	8000ab0 <__aeabi_d2iz>
 800dbd4:	f7f2 fc52 	bl	800047c <__aeabi_i2d>
 800dbd8:	2200      	movs	r2, #0
 800dbda:	4b44      	ldr	r3, [pc, #272]	; (800dcec <__kernel_rem_pio2+0x320>)
 800dbdc:	4680      	mov	r8, r0
 800dbde:	4689      	mov	r9, r1
 800dbe0:	f7f2 fcb6 	bl	8000550 <__aeabi_dmul>
 800dbe4:	4602      	mov	r2, r0
 800dbe6:	460b      	mov	r3, r1
 800dbe8:	4620      	mov	r0, r4
 800dbea:	4629      	mov	r1, r5
 800dbec:	f7f2 faf8 	bl	80001e0 <__aeabi_dsub>
 800dbf0:	f7f2 ff5e 	bl	8000ab0 <__aeabi_d2iz>
 800dbf4:	9b02      	ldr	r3, [sp, #8]
 800dbf6:	3e01      	subs	r6, #1
 800dbf8:	f843 0b04 	str.w	r0, [r3], #4
 800dbfc:	9302      	str	r3, [sp, #8]
 800dbfe:	ab70      	add	r3, sp, #448	; 0x1c0
 800dc00:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800dc04:	4640      	mov	r0, r8
 800dc06:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc0a:	4649      	mov	r1, r9
 800dc0c:	f7f2 faea 	bl	80001e4 <__adddf3>
 800dc10:	4604      	mov	r4, r0
 800dc12:	460d      	mov	r5, r1
 800dc14:	e762      	b.n	800dadc <__kernel_rem_pio2+0x110>
 800dc16:	d105      	bne.n	800dc24 <__kernel_rem_pio2+0x258>
 800dc18:	1e7b      	subs	r3, r7, #1
 800dc1a:	aa0c      	add	r2, sp, #48	; 0x30
 800dc1c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800dc20:	15c3      	asrs	r3, r0, #23
 800dc22:	e79b      	b.n	800db5c <__kernel_rem_pio2+0x190>
 800dc24:	2200      	movs	r2, #0
 800dc26:	4b32      	ldr	r3, [pc, #200]	; (800dcf0 <__kernel_rem_pio2+0x324>)
 800dc28:	f7f2 ff18 	bl	8000a5c <__aeabi_dcmpge>
 800dc2c:	2800      	cmp	r0, #0
 800dc2e:	d13f      	bne.n	800dcb0 <__kernel_rem_pio2+0x2e4>
 800dc30:	9002      	str	r0, [sp, #8]
 800dc32:	2200      	movs	r2, #0
 800dc34:	2300      	movs	r3, #0
 800dc36:	4640      	mov	r0, r8
 800dc38:	4649      	mov	r1, r9
 800dc3a:	f7f2 fef1 	bl	8000a20 <__aeabi_dcmpeq>
 800dc3e:	2800      	cmp	r0, #0
 800dc40:	f000 80b5 	beq.w	800ddae <__kernel_rem_pio2+0x3e2>
 800dc44:	1e7c      	subs	r4, r7, #1
 800dc46:	4623      	mov	r3, r4
 800dc48:	2200      	movs	r2, #0
 800dc4a:	9904      	ldr	r1, [sp, #16]
 800dc4c:	428b      	cmp	r3, r1
 800dc4e:	da64      	bge.n	800dd1a <__kernel_rem_pio2+0x34e>
 800dc50:	2a00      	cmp	r2, #0
 800dc52:	d078      	beq.n	800dd46 <__kernel_rem_pio2+0x37a>
 800dc54:	ab0c      	add	r3, sp, #48	; 0x30
 800dc56:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800dc5a:	f1aa 0a18 	sub.w	sl, sl, #24
 800dc5e:	2b00      	cmp	r3, #0
 800dc60:	f000 80a3 	beq.w	800ddaa <__kernel_rem_pio2+0x3de>
 800dc64:	4652      	mov	r2, sl
 800dc66:	2000      	movs	r0, #0
 800dc68:	491e      	ldr	r1, [pc, #120]	; (800dce4 <__kernel_rem_pio2+0x318>)
 800dc6a:	f000 fb35 	bl	800e2d8 <scalbn>
 800dc6e:	46a2      	mov	sl, r4
 800dc70:	4606      	mov	r6, r0
 800dc72:	460f      	mov	r7, r1
 800dc74:	f04f 0800 	mov.w	r8, #0
 800dc78:	00e3      	lsls	r3, r4, #3
 800dc7a:	9306      	str	r3, [sp, #24]
 800dc7c:	f8df 9068 	ldr.w	r9, [pc, #104]	; 800dce8 <__kernel_rem_pio2+0x31c>
 800dc80:	ab70      	add	r3, sp, #448	; 0x1c0
 800dc82:	eb03 0bc4 	add.w	fp, r3, r4, lsl #3
 800dc86:	f1ba 0f00 	cmp.w	sl, #0
 800dc8a:	f280 80c6 	bge.w	800de1a <__kernel_rem_pio2+0x44e>
 800dc8e:	4627      	mov	r7, r4
 800dc90:	f04f 0800 	mov.w	r8, #0
 800dc94:	2f00      	cmp	r7, #0
 800dc96:	f2c0 80f3 	blt.w	800de80 <__kernel_rem_pio2+0x4b4>
 800dc9a:	4b16      	ldr	r3, [pc, #88]	; (800dcf4 <__kernel_rem_pio2+0x328>)
 800dc9c:	f04f 0a00 	mov.w	sl, #0
 800dca0:	461d      	mov	r5, r3
 800dca2:	ab70      	add	r3, sp, #448	; 0x1c0
 800dca4:	f04f 0b00 	mov.w	fp, #0
 800dca8:	2600      	movs	r6, #0
 800dcaa:	eb03 09c7 	add.w	r9, r3, r7, lsl #3
 800dcae:	e0d9      	b.n	800de64 <__kernel_rem_pio2+0x498>
 800dcb0:	2302      	movs	r3, #2
 800dcb2:	9302      	str	r3, [sp, #8]
 800dcb4:	e756      	b.n	800db64 <__kernel_rem_pio2+0x198>
 800dcb6:	f8db 3000 	ldr.w	r3, [fp]
 800dcba:	b954      	cbnz	r4, 800dcd2 <__kernel_rem_pio2+0x306>
 800dcbc:	b123      	cbz	r3, 800dcc8 <__kernel_rem_pio2+0x2fc>
 800dcbe:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800dcc2:	f8cb 3000 	str.w	r3, [fp]
 800dcc6:	2301      	movs	r3, #1
 800dcc8:	461c      	mov	r4, r3
 800dcca:	3201      	adds	r2, #1
 800dccc:	f10b 0b04 	add.w	fp, fp, #4
 800dcd0:	e74f      	b.n	800db72 <__kernel_rem_pio2+0x1a6>
 800dcd2:	1acb      	subs	r3, r1, r3
 800dcd4:	f8cb 3000 	str.w	r3, [fp]
 800dcd8:	4623      	mov	r3, r4
 800dcda:	e7f5      	b.n	800dcc8 <__kernel_rem_pio2+0x2fc>
 800dcdc:	08011cd8 	.word	0x08011cd8
 800dce0:	40200000 	.word	0x40200000
 800dce4:	3ff00000 	.word	0x3ff00000
 800dce8:	3e700000 	.word	0x3e700000
 800dcec:	41700000 	.word	0x41700000
 800dcf0:	3fe00000 	.word	0x3fe00000
 800dcf4:	08011c98 	.word	0x08011c98
 800dcf8:	1e7a      	subs	r2, r7, #1
 800dcfa:	ab0c      	add	r3, sp, #48	; 0x30
 800dcfc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dd00:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800dd04:	a90c      	add	r1, sp, #48	; 0x30
 800dd06:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800dd0a:	e740      	b.n	800db8e <__kernel_rem_pio2+0x1c2>
 800dd0c:	1e7a      	subs	r2, r7, #1
 800dd0e:	ab0c      	add	r3, sp, #48	; 0x30
 800dd10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dd14:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800dd18:	e7f4      	b.n	800dd04 <__kernel_rem_pio2+0x338>
 800dd1a:	a90c      	add	r1, sp, #48	; 0x30
 800dd1c:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800dd20:	3b01      	subs	r3, #1
 800dd22:	430a      	orrs	r2, r1
 800dd24:	e791      	b.n	800dc4a <__kernel_rem_pio2+0x27e>
 800dd26:	3401      	adds	r4, #1
 800dd28:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800dd2c:	2a00      	cmp	r2, #0
 800dd2e:	d0fa      	beq.n	800dd26 <__kernel_rem_pio2+0x35a>
 800dd30:	9b08      	ldr	r3, [sp, #32]
 800dd32:	1c7e      	adds	r6, r7, #1
 800dd34:	18fd      	adds	r5, r7, r3
 800dd36:	ab20      	add	r3, sp, #128	; 0x80
 800dd38:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800dd3c:	443c      	add	r4, r7
 800dd3e:	42b4      	cmp	r4, r6
 800dd40:	da04      	bge.n	800dd4c <__kernel_rem_pio2+0x380>
 800dd42:	4627      	mov	r7, r4
 800dd44:	e6c0      	b.n	800dac8 <__kernel_rem_pio2+0xfc>
 800dd46:	2401      	movs	r4, #1
 800dd48:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800dd4a:	e7ed      	b.n	800dd28 <__kernel_rem_pio2+0x35c>
 800dd4c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dd4e:	462f      	mov	r7, r5
 800dd50:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800dd54:	f7f2 fb92 	bl	800047c <__aeabi_i2d>
 800dd58:	f04f 0b00 	mov.w	fp, #0
 800dd5c:	f04f 0800 	mov.w	r8, #0
 800dd60:	f04f 0900 	mov.w	r9, #0
 800dd64:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dd66:	e8e7 0102 	strd	r0, r1, [r7], #8
 800dd6a:	3b08      	subs	r3, #8
 800dd6c:	9302      	str	r3, [sp, #8]
 800dd6e:	9b06      	ldr	r3, [sp, #24]
 800dd70:	459b      	cmp	fp, r3
 800dd72:	dd07      	ble.n	800dd84 <__kernel_rem_pio2+0x3b8>
 800dd74:	ab70      	add	r3, sp, #448	; 0x1c0
 800dd76:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800dd7a:	463d      	mov	r5, r7
 800dd7c:	e9c3 8900 	strd	r8, r9, [r3]
 800dd80:	3601      	adds	r6, #1
 800dd82:	e7dc      	b.n	800dd3e <__kernel_rem_pio2+0x372>
 800dd84:	9902      	ldr	r1, [sp, #8]
 800dd86:	f10b 0b01 	add.w	fp, fp, #1
 800dd8a:	e9f1 2302 	ldrd	r2, r3, [r1, #8]!
 800dd8e:	9102      	str	r1, [sp, #8]
 800dd90:	e875 0102 	ldrd	r0, r1, [r5], #-8
 800dd94:	f7f2 fbdc 	bl	8000550 <__aeabi_dmul>
 800dd98:	4602      	mov	r2, r0
 800dd9a:	460b      	mov	r3, r1
 800dd9c:	4640      	mov	r0, r8
 800dd9e:	4649      	mov	r1, r9
 800dda0:	f7f2 fa20 	bl	80001e4 <__adddf3>
 800dda4:	4680      	mov	r8, r0
 800dda6:	4689      	mov	r9, r1
 800dda8:	e7e1      	b.n	800dd6e <__kernel_rem_pio2+0x3a2>
 800ddaa:	3c01      	subs	r4, #1
 800ddac:	e752      	b.n	800dc54 <__kernel_rem_pio2+0x288>
 800ddae:	f1ca 0200 	rsb	r2, sl, #0
 800ddb2:	4640      	mov	r0, r8
 800ddb4:	4649      	mov	r1, r9
 800ddb6:	f000 fa8f 	bl	800e2d8 <scalbn>
 800ddba:	2200      	movs	r2, #0
 800ddbc:	4ba5      	ldr	r3, [pc, #660]	; (800e054 <__kernel_rem_pio2+0x688>)
 800ddbe:	4604      	mov	r4, r0
 800ddc0:	460d      	mov	r5, r1
 800ddc2:	f7f2 fe4b 	bl	8000a5c <__aeabi_dcmpge>
 800ddc6:	b1f8      	cbz	r0, 800de08 <__kernel_rem_pio2+0x43c>
 800ddc8:	2200      	movs	r2, #0
 800ddca:	4ba3      	ldr	r3, [pc, #652]	; (800e058 <__kernel_rem_pio2+0x68c>)
 800ddcc:	4620      	mov	r0, r4
 800ddce:	4629      	mov	r1, r5
 800ddd0:	f7f2 fbbe 	bl	8000550 <__aeabi_dmul>
 800ddd4:	f7f2 fe6c 	bl	8000ab0 <__aeabi_d2iz>
 800ddd8:	4606      	mov	r6, r0
 800ddda:	f7f2 fb4f 	bl	800047c <__aeabi_i2d>
 800ddde:	2200      	movs	r2, #0
 800dde0:	4b9c      	ldr	r3, [pc, #624]	; (800e054 <__kernel_rem_pio2+0x688>)
 800dde2:	f7f2 fbb5 	bl	8000550 <__aeabi_dmul>
 800dde6:	460b      	mov	r3, r1
 800dde8:	4602      	mov	r2, r0
 800ddea:	4629      	mov	r1, r5
 800ddec:	4620      	mov	r0, r4
 800ddee:	f7f2 f9f7 	bl	80001e0 <__aeabi_dsub>
 800ddf2:	f7f2 fe5d 	bl	8000ab0 <__aeabi_d2iz>
 800ddf6:	1c7c      	adds	r4, r7, #1
 800ddf8:	ab0c      	add	r3, sp, #48	; 0x30
 800ddfa:	f843 0027 	str.w	r0, [r3, r7, lsl #2]
 800ddfe:	f10a 0a18 	add.w	sl, sl, #24
 800de02:	f843 6024 	str.w	r6, [r3, r4, lsl #2]
 800de06:	e72d      	b.n	800dc64 <__kernel_rem_pio2+0x298>
 800de08:	4620      	mov	r0, r4
 800de0a:	4629      	mov	r1, r5
 800de0c:	f7f2 fe50 	bl	8000ab0 <__aeabi_d2iz>
 800de10:	ab0c      	add	r3, sp, #48	; 0x30
 800de12:	463c      	mov	r4, r7
 800de14:	f843 0027 	str.w	r0, [r3, r7, lsl #2]
 800de18:	e724      	b.n	800dc64 <__kernel_rem_pio2+0x298>
 800de1a:	ab0c      	add	r3, sp, #48	; 0x30
 800de1c:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 800de20:	f7f2 fb2c 	bl	800047c <__aeabi_i2d>
 800de24:	4632      	mov	r2, r6
 800de26:	463b      	mov	r3, r7
 800de28:	f7f2 fb92 	bl	8000550 <__aeabi_dmul>
 800de2c:	4642      	mov	r2, r8
 800de2e:	e86b 0102 	strd	r0, r1, [fp], #-8
 800de32:	464b      	mov	r3, r9
 800de34:	4630      	mov	r0, r6
 800de36:	4639      	mov	r1, r7
 800de38:	f7f2 fb8a 	bl	8000550 <__aeabi_dmul>
 800de3c:	f10a 3aff 	add.w	sl, sl, #4294967295
 800de40:	4606      	mov	r6, r0
 800de42:	460f      	mov	r7, r1
 800de44:	e71f      	b.n	800dc86 <__kernel_rem_pio2+0x2ba>
 800de46:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 800de4a:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 800de4e:	f7f2 fb7f 	bl	8000550 <__aeabi_dmul>
 800de52:	4602      	mov	r2, r0
 800de54:	460b      	mov	r3, r1
 800de56:	4650      	mov	r0, sl
 800de58:	4659      	mov	r1, fp
 800de5a:	f7f2 f9c3 	bl	80001e4 <__adddf3>
 800de5e:	4682      	mov	sl, r0
 800de60:	468b      	mov	fp, r1
 800de62:	3601      	adds	r6, #1
 800de64:	9b04      	ldr	r3, [sp, #16]
 800de66:	429e      	cmp	r6, r3
 800de68:	dc01      	bgt.n	800de6e <__kernel_rem_pio2+0x4a2>
 800de6a:	45b0      	cmp	r8, r6
 800de6c:	daeb      	bge.n	800de46 <__kernel_rem_pio2+0x47a>
 800de6e:	ab48      	add	r3, sp, #288	; 0x120
 800de70:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800de74:	e9c3 ab00 	strd	sl, fp, [r3]
 800de78:	3f01      	subs	r7, #1
 800de7a:	f108 0801 	add.w	r8, r8, #1
 800de7e:	e709      	b.n	800dc94 <__kernel_rem_pio2+0x2c8>
 800de80:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 800de82:	2b02      	cmp	r3, #2
 800de84:	dc09      	bgt.n	800de9a <__kernel_rem_pio2+0x4ce>
 800de86:	2b00      	cmp	r3, #0
 800de88:	dc34      	bgt.n	800def4 <__kernel_rem_pio2+0x528>
 800de8a:	d05e      	beq.n	800df4a <__kernel_rem_pio2+0x57e>
 800de8c:	9b07      	ldr	r3, [sp, #28]
 800de8e:	f003 0007 	and.w	r0, r3, #7
 800de92:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 800de96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800de9a:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 800de9c:	2b03      	cmp	r3, #3
 800de9e:	d1f5      	bne.n	800de8c <__kernel_rem_pio2+0x4c0>
 800dea0:	9a06      	ldr	r2, [sp, #24]
 800dea2:	ab48      	add	r3, sp, #288	; 0x120
 800dea4:	441a      	add	r2, r3
 800dea6:	4615      	mov	r5, r2
 800dea8:	4692      	mov	sl, r2
 800deaa:	46a3      	mov	fp, r4
 800deac:	f1bb 0f00 	cmp.w	fp, #0
 800deb0:	dc7a      	bgt.n	800dfa8 <__kernel_rem_pio2+0x5dc>
 800deb2:	46aa      	mov	sl, r5
 800deb4:	46a3      	mov	fp, r4
 800deb6:	f1bb 0f01 	cmp.w	fp, #1
 800deba:	f300 8094 	bgt.w	800dfe6 <__kernel_rem_pio2+0x61a>
 800debe:	2700      	movs	r7, #0
 800dec0:	463e      	mov	r6, r7
 800dec2:	2c01      	cmp	r4, #1
 800dec4:	f300 80ae 	bgt.w	800e024 <__kernel_rem_pio2+0x658>
 800dec8:	e9dd 5048 	ldrd	r5, r0, [sp, #288]	; 0x120
 800decc:	e9dd 414a 	ldrd	r4, r1, [sp, #296]	; 0x128
 800ded0:	9b02      	ldr	r3, [sp, #8]
 800ded2:	2b00      	cmp	r3, #0
 800ded4:	f040 80b0 	bne.w	800e038 <__kernel_rem_pio2+0x66c>
 800ded8:	4603      	mov	r3, r0
 800deda:	462a      	mov	r2, r5
 800dedc:	9801      	ldr	r0, [sp, #4]
 800dede:	e9c0 2300 	strd	r2, r3, [r0]
 800dee2:	4622      	mov	r2, r4
 800dee4:	460b      	mov	r3, r1
 800dee6:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800deea:	463a      	mov	r2, r7
 800deec:	4633      	mov	r3, r6
 800deee:	e9c0 2304 	strd	r2, r3, [r0, #16]
 800def2:	e7cb      	b.n	800de8c <__kernel_rem_pio2+0x4c0>
 800def4:	2000      	movs	r0, #0
 800def6:	9a06      	ldr	r2, [sp, #24]
 800def8:	ab48      	add	r3, sp, #288	; 0x120
 800defa:	441a      	add	r2, r3
 800defc:	4615      	mov	r5, r2
 800defe:	46a0      	mov	r8, r4
 800df00:	4601      	mov	r1, r0
 800df02:	f1b8 0f00 	cmp.w	r8, #0
 800df06:	da3c      	bge.n	800df82 <__kernel_rem_pio2+0x5b6>
 800df08:	9b02      	ldr	r3, [sp, #8]
 800df0a:	2b00      	cmp	r3, #0
 800df0c:	d040      	beq.n	800df90 <__kernel_rem_pio2+0x5c4>
 800df0e:	f101 4500 	add.w	r5, r1, #2147483648	; 0x80000000
 800df12:	4602      	mov	r2, r0
 800df14:	462b      	mov	r3, r5
 800df16:	9d01      	ldr	r5, [sp, #4]
 800df18:	2601      	movs	r6, #1
 800df1a:	e9c5 2300 	strd	r2, r3, [r5]
 800df1e:	460b      	mov	r3, r1
 800df20:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 800df24:	f7f2 f95c 	bl	80001e0 <__aeabi_dsub>
 800df28:	4684      	mov	ip, r0
 800df2a:	460f      	mov	r7, r1
 800df2c:	ad48      	add	r5, sp, #288	; 0x120
 800df2e:	42b4      	cmp	r4, r6
 800df30:	f105 0508 	add.w	r5, r5, #8
 800df34:	da2e      	bge.n	800df94 <__kernel_rem_pio2+0x5c8>
 800df36:	9b02      	ldr	r3, [sp, #8]
 800df38:	b10b      	cbz	r3, 800df3e <__kernel_rem_pio2+0x572>
 800df3a:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
 800df3e:	4662      	mov	r2, ip
 800df40:	463b      	mov	r3, r7
 800df42:	9901      	ldr	r1, [sp, #4]
 800df44:	e9c1 2302 	strd	r2, r3, [r1, #8]
 800df48:	e7a0      	b.n	800de8c <__kernel_rem_pio2+0x4c0>
 800df4a:	9a06      	ldr	r2, [sp, #24]
 800df4c:	9ea2      	ldr	r6, [sp, #648]	; 0x288
 800df4e:	ab48      	add	r3, sp, #288	; 0x120
 800df50:	441a      	add	r2, r3
 800df52:	4615      	mov	r5, r2
 800df54:	4637      	mov	r7, r6
 800df56:	2c00      	cmp	r4, #0
 800df58:	da09      	bge.n	800df6e <__kernel_rem_pio2+0x5a2>
 800df5a:	9b02      	ldr	r3, [sp, #8]
 800df5c:	b10b      	cbz	r3, 800df62 <__kernel_rem_pio2+0x596>
 800df5e:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
 800df62:	4632      	mov	r2, r6
 800df64:	463b      	mov	r3, r7
 800df66:	9901      	ldr	r1, [sp, #4]
 800df68:	e9c1 2300 	strd	r2, r3, [r1]
 800df6c:	e78e      	b.n	800de8c <__kernel_rem_pio2+0x4c0>
 800df6e:	4630      	mov	r0, r6
 800df70:	e875 2302 	ldrd	r2, r3, [r5], #-8
 800df74:	4639      	mov	r1, r7
 800df76:	f7f2 f935 	bl	80001e4 <__adddf3>
 800df7a:	3c01      	subs	r4, #1
 800df7c:	4606      	mov	r6, r0
 800df7e:	460f      	mov	r7, r1
 800df80:	e7e9      	b.n	800df56 <__kernel_rem_pio2+0x58a>
 800df82:	e875 2302 	ldrd	r2, r3, [r5], #-8
 800df86:	f7f2 f92d 	bl	80001e4 <__adddf3>
 800df8a:	f108 38ff 	add.w	r8, r8, #4294967295
 800df8e:	e7b8      	b.n	800df02 <__kernel_rem_pio2+0x536>
 800df90:	460d      	mov	r5, r1
 800df92:	e7be      	b.n	800df12 <__kernel_rem_pio2+0x546>
 800df94:	4660      	mov	r0, ip
 800df96:	e9d5 2300 	ldrd	r2, r3, [r5]
 800df9a:	4639      	mov	r1, r7
 800df9c:	f7f2 f922 	bl	80001e4 <__adddf3>
 800dfa0:	3601      	adds	r6, #1
 800dfa2:	4684      	mov	ip, r0
 800dfa4:	460f      	mov	r7, r1
 800dfa6:	e7c2      	b.n	800df2e <__kernel_rem_pio2+0x562>
 800dfa8:	e9da 6700 	ldrd	r6, r7, [sl]
 800dfac:	e95a 8902 	ldrd	r8, r9, [sl, #-8]
 800dfb0:	4632      	mov	r2, r6
 800dfb2:	463b      	mov	r3, r7
 800dfb4:	4640      	mov	r0, r8
 800dfb6:	4649      	mov	r1, r9
 800dfb8:	f7f2 f914 	bl	80001e4 <__adddf3>
 800dfbc:	4602      	mov	r2, r0
 800dfbe:	460b      	mov	r3, r1
 800dfc0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800dfc4:	4640      	mov	r0, r8
 800dfc6:	4649      	mov	r1, r9
 800dfc8:	f7f2 f90a 	bl	80001e0 <__aeabi_dsub>
 800dfcc:	4632      	mov	r2, r6
 800dfce:	463b      	mov	r3, r7
 800dfd0:	f7f2 f908 	bl	80001e4 <__adddf3>
 800dfd4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800dfd8:	e86a 0102 	strd	r0, r1, [sl], #-8
 800dfdc:	f10b 3bff 	add.w	fp, fp, #4294967295
 800dfe0:	e9ca 2300 	strd	r2, r3, [sl]
 800dfe4:	e762      	b.n	800deac <__kernel_rem_pio2+0x4e0>
 800dfe6:	e9da 8900 	ldrd	r8, r9, [sl]
 800dfea:	e95a 6702 	ldrd	r6, r7, [sl, #-8]
 800dfee:	4642      	mov	r2, r8
 800dff0:	464b      	mov	r3, r9
 800dff2:	4630      	mov	r0, r6
 800dff4:	4639      	mov	r1, r7
 800dff6:	f7f2 f8f5 	bl	80001e4 <__adddf3>
 800dffa:	4602      	mov	r2, r0
 800dffc:	460b      	mov	r3, r1
 800dffe:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e002:	4630      	mov	r0, r6
 800e004:	4639      	mov	r1, r7
 800e006:	f7f2 f8eb 	bl	80001e0 <__aeabi_dsub>
 800e00a:	4642      	mov	r2, r8
 800e00c:	464b      	mov	r3, r9
 800e00e:	f7f2 f8e9 	bl	80001e4 <__adddf3>
 800e012:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e016:	e86a 0102 	strd	r0, r1, [sl], #-8
 800e01a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800e01e:	e9ca 2300 	strd	r2, r3, [sl]
 800e022:	e748      	b.n	800deb6 <__kernel_rem_pio2+0x4ea>
 800e024:	4638      	mov	r0, r7
 800e026:	e875 2302 	ldrd	r2, r3, [r5], #-8
 800e02a:	4631      	mov	r1, r6
 800e02c:	f7f2 f8da 	bl	80001e4 <__adddf3>
 800e030:	3c01      	subs	r4, #1
 800e032:	4607      	mov	r7, r0
 800e034:	460e      	mov	r6, r1
 800e036:	e744      	b.n	800dec2 <__kernel_rem_pio2+0x4f6>
 800e038:	9b01      	ldr	r3, [sp, #4]
 800e03a:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800e03e:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 800e042:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
 800e046:	e9c3 0401 	strd	r0, r4, [r3, #4]
 800e04a:	e9c3 1703 	strd	r1, r7, [r3, #12]
 800e04e:	601d      	str	r5, [r3, #0]
 800e050:	615e      	str	r6, [r3, #20]
 800e052:	e71b      	b.n	800de8c <__kernel_rem_pio2+0x4c0>
 800e054:	41700000 	.word	0x41700000
 800e058:	3e700000 	.word	0x3e700000
 800e05c:	00000000 	.word	0x00000000

0800e060 <__kernel_sin>:
 800e060:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e064:	b086      	sub	sp, #24
 800e066:	e9cd 2300 	strd	r2, r3, [sp]
 800e06a:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800e06e:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800e072:	4682      	mov	sl, r0
 800e074:	460c      	mov	r4, r1
 800e076:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 800e078:	da03      	bge.n	800e082 <__kernel_sin+0x22>
 800e07a:	f7f2 fd19 	bl	8000ab0 <__aeabi_d2iz>
 800e07e:	2800      	cmp	r0, #0
 800e080:	d050      	beq.n	800e124 <__kernel_sin+0xc4>
 800e082:	4652      	mov	r2, sl
 800e084:	4623      	mov	r3, r4
 800e086:	4650      	mov	r0, sl
 800e088:	4621      	mov	r1, r4
 800e08a:	f7f2 fa61 	bl	8000550 <__aeabi_dmul>
 800e08e:	4606      	mov	r6, r0
 800e090:	460f      	mov	r7, r1
 800e092:	4602      	mov	r2, r0
 800e094:	460b      	mov	r3, r1
 800e096:	4650      	mov	r0, sl
 800e098:	4621      	mov	r1, r4
 800e09a:	f7f2 fa59 	bl	8000550 <__aeabi_dmul>
 800e09e:	a33e      	add	r3, pc, #248	; (adr r3, 800e198 <__kernel_sin+0x138>)
 800e0a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e0a4:	4680      	mov	r8, r0
 800e0a6:	4689      	mov	r9, r1
 800e0a8:	4630      	mov	r0, r6
 800e0aa:	4639      	mov	r1, r7
 800e0ac:	f7f2 fa50 	bl	8000550 <__aeabi_dmul>
 800e0b0:	a33b      	add	r3, pc, #236	; (adr r3, 800e1a0 <__kernel_sin+0x140>)
 800e0b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e0b6:	f7f2 f893 	bl	80001e0 <__aeabi_dsub>
 800e0ba:	4632      	mov	r2, r6
 800e0bc:	463b      	mov	r3, r7
 800e0be:	f7f2 fa47 	bl	8000550 <__aeabi_dmul>
 800e0c2:	a339      	add	r3, pc, #228	; (adr r3, 800e1a8 <__kernel_sin+0x148>)
 800e0c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e0c8:	f7f2 f88c 	bl	80001e4 <__adddf3>
 800e0cc:	4632      	mov	r2, r6
 800e0ce:	463b      	mov	r3, r7
 800e0d0:	f7f2 fa3e 	bl	8000550 <__aeabi_dmul>
 800e0d4:	a336      	add	r3, pc, #216	; (adr r3, 800e1b0 <__kernel_sin+0x150>)
 800e0d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e0da:	f7f2 f881 	bl	80001e0 <__aeabi_dsub>
 800e0de:	4632      	mov	r2, r6
 800e0e0:	463b      	mov	r3, r7
 800e0e2:	f7f2 fa35 	bl	8000550 <__aeabi_dmul>
 800e0e6:	a334      	add	r3, pc, #208	; (adr r3, 800e1b8 <__kernel_sin+0x158>)
 800e0e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e0ec:	f7f2 f87a 	bl	80001e4 <__adddf3>
 800e0f0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e0f4:	b9dd      	cbnz	r5, 800e12e <__kernel_sin+0xce>
 800e0f6:	4602      	mov	r2, r0
 800e0f8:	460b      	mov	r3, r1
 800e0fa:	4630      	mov	r0, r6
 800e0fc:	4639      	mov	r1, r7
 800e0fe:	f7f2 fa27 	bl	8000550 <__aeabi_dmul>
 800e102:	a32f      	add	r3, pc, #188	; (adr r3, 800e1c0 <__kernel_sin+0x160>)
 800e104:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e108:	f7f2 f86a 	bl	80001e0 <__aeabi_dsub>
 800e10c:	4642      	mov	r2, r8
 800e10e:	464b      	mov	r3, r9
 800e110:	f7f2 fa1e 	bl	8000550 <__aeabi_dmul>
 800e114:	4602      	mov	r2, r0
 800e116:	460b      	mov	r3, r1
 800e118:	4650      	mov	r0, sl
 800e11a:	4621      	mov	r1, r4
 800e11c:	f7f2 f862 	bl	80001e4 <__adddf3>
 800e120:	4682      	mov	sl, r0
 800e122:	460c      	mov	r4, r1
 800e124:	4650      	mov	r0, sl
 800e126:	4621      	mov	r1, r4
 800e128:	b006      	add	sp, #24
 800e12a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e12e:	2200      	movs	r2, #0
 800e130:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e134:	4b24      	ldr	r3, [pc, #144]	; (800e1c8 <__kernel_sin+0x168>)
 800e136:	f7f2 fa0b 	bl	8000550 <__aeabi_dmul>
 800e13a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e13e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e142:	4640      	mov	r0, r8
 800e144:	4649      	mov	r1, r9
 800e146:	f7f2 fa03 	bl	8000550 <__aeabi_dmul>
 800e14a:	4602      	mov	r2, r0
 800e14c:	460b      	mov	r3, r1
 800e14e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e152:	f7f2 f845 	bl	80001e0 <__aeabi_dsub>
 800e156:	4632      	mov	r2, r6
 800e158:	463b      	mov	r3, r7
 800e15a:	f7f2 f9f9 	bl	8000550 <__aeabi_dmul>
 800e15e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e162:	f7f2 f83d 	bl	80001e0 <__aeabi_dsub>
 800e166:	a316      	add	r3, pc, #88	; (adr r3, 800e1c0 <__kernel_sin+0x160>)
 800e168:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e16c:	4606      	mov	r6, r0
 800e16e:	460f      	mov	r7, r1
 800e170:	4640      	mov	r0, r8
 800e172:	4649      	mov	r1, r9
 800e174:	f7f2 f9ec 	bl	8000550 <__aeabi_dmul>
 800e178:	4602      	mov	r2, r0
 800e17a:	460b      	mov	r3, r1
 800e17c:	4630      	mov	r0, r6
 800e17e:	4639      	mov	r1, r7
 800e180:	f7f2 f830 	bl	80001e4 <__adddf3>
 800e184:	4602      	mov	r2, r0
 800e186:	460b      	mov	r3, r1
 800e188:	4650      	mov	r0, sl
 800e18a:	4621      	mov	r1, r4
 800e18c:	f7f2 f828 	bl	80001e0 <__aeabi_dsub>
 800e190:	e7c6      	b.n	800e120 <__kernel_sin+0xc0>
 800e192:	bf00      	nop
 800e194:	f3af 8000 	nop.w
 800e198:	5acfd57c 	.word	0x5acfd57c
 800e19c:	3de5d93a 	.word	0x3de5d93a
 800e1a0:	8a2b9ceb 	.word	0x8a2b9ceb
 800e1a4:	3e5ae5e6 	.word	0x3e5ae5e6
 800e1a8:	57b1fe7d 	.word	0x57b1fe7d
 800e1ac:	3ec71de3 	.word	0x3ec71de3
 800e1b0:	19c161d5 	.word	0x19c161d5
 800e1b4:	3f2a01a0 	.word	0x3f2a01a0
 800e1b8:	1110f8a6 	.word	0x1110f8a6
 800e1bc:	3f811111 	.word	0x3f811111
 800e1c0:	55555549 	.word	0x55555549
 800e1c4:	3fc55555 	.word	0x3fc55555
 800e1c8:	3fe00000 	.word	0x3fe00000

0800e1cc <fabs>:
 800e1cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800e1d0:	4770      	bx	lr
 800e1d2:	0000      	movs	r0, r0
 800e1d4:	0000      	movs	r0, r0
	...

0800e1d8 <floor>:
 800e1d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e1dc:	f3c1 580a 	ubfx	r8, r1, #20, #11
 800e1e0:	f2a8 36ff 	subw	r6, r8, #1023	; 0x3ff
 800e1e4:	2e13      	cmp	r6, #19
 800e1e6:	4602      	mov	r2, r0
 800e1e8:	460b      	mov	r3, r1
 800e1ea:	4607      	mov	r7, r0
 800e1ec:	460c      	mov	r4, r1
 800e1ee:	4605      	mov	r5, r0
 800e1f0:	dc34      	bgt.n	800e25c <floor+0x84>
 800e1f2:	2e00      	cmp	r6, #0
 800e1f4:	da15      	bge.n	800e222 <floor+0x4a>
 800e1f6:	a334      	add	r3, pc, #208	; (adr r3, 800e2c8 <floor+0xf0>)
 800e1f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e1fc:	f7f1 fff2 	bl	80001e4 <__adddf3>
 800e200:	2200      	movs	r2, #0
 800e202:	2300      	movs	r3, #0
 800e204:	f7f2 fc34 	bl	8000a70 <__aeabi_dcmpgt>
 800e208:	b140      	cbz	r0, 800e21c <floor+0x44>
 800e20a:	2c00      	cmp	r4, #0
 800e20c:	da59      	bge.n	800e2c2 <floor+0xea>
 800e20e:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800e212:	ea57 0503 	orrs.w	r5, r7, r3
 800e216:	d001      	beq.n	800e21c <floor+0x44>
 800e218:	2500      	movs	r5, #0
 800e21a:	4c2d      	ldr	r4, [pc, #180]	; (800e2d0 <floor+0xf8>)
 800e21c:	4623      	mov	r3, r4
 800e21e:	462f      	mov	r7, r5
 800e220:	e025      	b.n	800e26e <floor+0x96>
 800e222:	4a2c      	ldr	r2, [pc, #176]	; (800e2d4 <floor+0xfc>)
 800e224:	fa42 f806 	asr.w	r8, r2, r6
 800e228:	ea01 0208 	and.w	r2, r1, r8
 800e22c:	4302      	orrs	r2, r0
 800e22e:	d01e      	beq.n	800e26e <floor+0x96>
 800e230:	a325      	add	r3, pc, #148	; (adr r3, 800e2c8 <floor+0xf0>)
 800e232:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e236:	f7f1 ffd5 	bl	80001e4 <__adddf3>
 800e23a:	2200      	movs	r2, #0
 800e23c:	2300      	movs	r3, #0
 800e23e:	f7f2 fc17 	bl	8000a70 <__aeabi_dcmpgt>
 800e242:	2800      	cmp	r0, #0
 800e244:	d0ea      	beq.n	800e21c <floor+0x44>
 800e246:	2c00      	cmp	r4, #0
 800e248:	bfbe      	ittt	lt
 800e24a:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800e24e:	fa43 f606 	asrlt.w	r6, r3, r6
 800e252:	19a4      	addlt	r4, r4, r6
 800e254:	2500      	movs	r5, #0
 800e256:	ea24 0408 	bic.w	r4, r4, r8
 800e25a:	e7df      	b.n	800e21c <floor+0x44>
 800e25c:	2e33      	cmp	r6, #51	; 0x33
 800e25e:	dd0a      	ble.n	800e276 <floor+0x9e>
 800e260:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800e264:	d103      	bne.n	800e26e <floor+0x96>
 800e266:	f7f1 ffbd 	bl	80001e4 <__adddf3>
 800e26a:	4607      	mov	r7, r0
 800e26c:	460b      	mov	r3, r1
 800e26e:	4638      	mov	r0, r7
 800e270:	4619      	mov	r1, r3
 800e272:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e276:	f04f 32ff 	mov.w	r2, #4294967295
 800e27a:	f2a8 4813 	subw	r8, r8, #1043	; 0x413
 800e27e:	fa22 f808 	lsr.w	r8, r2, r8
 800e282:	ea18 0f00 	tst.w	r8, r0
 800e286:	d0f2      	beq.n	800e26e <floor+0x96>
 800e288:	a30f      	add	r3, pc, #60	; (adr r3, 800e2c8 <floor+0xf0>)
 800e28a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e28e:	f7f1 ffa9 	bl	80001e4 <__adddf3>
 800e292:	2200      	movs	r2, #0
 800e294:	2300      	movs	r3, #0
 800e296:	f7f2 fbeb 	bl	8000a70 <__aeabi_dcmpgt>
 800e29a:	2800      	cmp	r0, #0
 800e29c:	d0be      	beq.n	800e21c <floor+0x44>
 800e29e:	2c00      	cmp	r4, #0
 800e2a0:	da02      	bge.n	800e2a8 <floor+0xd0>
 800e2a2:	2e14      	cmp	r6, #20
 800e2a4:	d103      	bne.n	800e2ae <floor+0xd6>
 800e2a6:	3401      	adds	r4, #1
 800e2a8:	ea25 0508 	bic.w	r5, r5, r8
 800e2ac:	e7b6      	b.n	800e21c <floor+0x44>
 800e2ae:	2301      	movs	r3, #1
 800e2b0:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800e2b4:	fa03 f606 	lsl.w	r6, r3, r6
 800e2b8:	4435      	add	r5, r6
 800e2ba:	42bd      	cmp	r5, r7
 800e2bc:	bf38      	it	cc
 800e2be:	18e4      	addcc	r4, r4, r3
 800e2c0:	e7f2      	b.n	800e2a8 <floor+0xd0>
 800e2c2:	2500      	movs	r5, #0
 800e2c4:	462c      	mov	r4, r5
 800e2c6:	e7a9      	b.n	800e21c <floor+0x44>
 800e2c8:	8800759c 	.word	0x8800759c
 800e2cc:	7e37e43c 	.word	0x7e37e43c
 800e2d0:	bff00000 	.word	0xbff00000
 800e2d4:	000fffff 	.word	0x000fffff

0800e2d8 <scalbn>:
 800e2d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e2da:	f3c1 560a 	ubfx	r6, r1, #20, #11
 800e2de:	4604      	mov	r4, r0
 800e2e0:	460d      	mov	r5, r1
 800e2e2:	4617      	mov	r7, r2
 800e2e4:	460b      	mov	r3, r1
 800e2e6:	b996      	cbnz	r6, 800e30e <scalbn+0x36>
 800e2e8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800e2ec:	4303      	orrs	r3, r0
 800e2ee:	d039      	beq.n	800e364 <scalbn+0x8c>
 800e2f0:	4b35      	ldr	r3, [pc, #212]	; (800e3c8 <scalbn+0xf0>)
 800e2f2:	2200      	movs	r2, #0
 800e2f4:	f7f2 f92c 	bl	8000550 <__aeabi_dmul>
 800e2f8:	4b34      	ldr	r3, [pc, #208]	; (800e3cc <scalbn+0xf4>)
 800e2fa:	4604      	mov	r4, r0
 800e2fc:	429f      	cmp	r7, r3
 800e2fe:	460d      	mov	r5, r1
 800e300:	da0f      	bge.n	800e322 <scalbn+0x4a>
 800e302:	a32d      	add	r3, pc, #180	; (adr r3, 800e3b8 <scalbn+0xe0>)
 800e304:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e308:	f7f2 f922 	bl	8000550 <__aeabi_dmul>
 800e30c:	e006      	b.n	800e31c <scalbn+0x44>
 800e30e:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800e312:	4296      	cmp	r6, r2
 800e314:	d10a      	bne.n	800e32c <scalbn+0x54>
 800e316:	4602      	mov	r2, r0
 800e318:	f7f1 ff64 	bl	80001e4 <__adddf3>
 800e31c:	4604      	mov	r4, r0
 800e31e:	460d      	mov	r5, r1
 800e320:	e020      	b.n	800e364 <scalbn+0x8c>
 800e322:	460b      	mov	r3, r1
 800e324:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800e328:	f1a1 0636 	sub.w	r6, r1, #54	; 0x36
 800e32c:	f240 72fe 	movw	r2, #2046	; 0x7fe
 800e330:	19b9      	adds	r1, r7, r6
 800e332:	4291      	cmp	r1, r2
 800e334:	dd0e      	ble.n	800e354 <scalbn+0x7c>
 800e336:	a322      	add	r3, pc, #136	; (adr r3, 800e3c0 <scalbn+0xe8>)
 800e338:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e33c:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 800e340:	f044 41fc 	orr.w	r1, r4, #2113929216	; 0x7e000000
 800e344:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
 800e348:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
 800e34c:	4820      	ldr	r0, [pc, #128]	; (800e3d0 <scalbn+0xf8>)
 800e34e:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
 800e352:	e7d9      	b.n	800e308 <scalbn+0x30>
 800e354:	2900      	cmp	r1, #0
 800e356:	dd08      	ble.n	800e36a <scalbn+0x92>
 800e358:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800e35c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800e360:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 800e364:	4620      	mov	r0, r4
 800e366:	4629      	mov	r1, r5
 800e368:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e36a:	f111 0f35 	cmn.w	r1, #53	; 0x35
 800e36e:	da16      	bge.n	800e39e <scalbn+0xc6>
 800e370:	f24c 3350 	movw	r3, #50000	; 0xc350
 800e374:	429f      	cmp	r7, r3
 800e376:	ea4f 73d5 	mov.w	r3, r5, lsr #31
 800e37a:	dd08      	ble.n	800e38e <scalbn+0xb6>
 800e37c:	4c15      	ldr	r4, [pc, #84]	; (800e3d4 <scalbn+0xfc>)
 800e37e:	4814      	ldr	r0, [pc, #80]	; (800e3d0 <scalbn+0xf8>)
 800e380:	f363 74df 	bfi	r4, r3, #31, #1
 800e384:	a30e      	add	r3, pc, #56	; (adr r3, 800e3c0 <scalbn+0xe8>)
 800e386:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e38a:	4621      	mov	r1, r4
 800e38c:	e7bc      	b.n	800e308 <scalbn+0x30>
 800e38e:	4c12      	ldr	r4, [pc, #72]	; (800e3d8 <scalbn+0x100>)
 800e390:	4812      	ldr	r0, [pc, #72]	; (800e3dc <scalbn+0x104>)
 800e392:	f363 74df 	bfi	r4, r3, #31, #1
 800e396:	a308      	add	r3, pc, #32	; (adr r3, 800e3b8 <scalbn+0xe0>)
 800e398:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e39c:	e7f5      	b.n	800e38a <scalbn+0xb2>
 800e39e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800e3a2:	3136      	adds	r1, #54	; 0x36
 800e3a4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800e3a8:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 800e3ac:	4620      	mov	r0, r4
 800e3ae:	4629      	mov	r1, r5
 800e3b0:	2200      	movs	r2, #0
 800e3b2:	4b0b      	ldr	r3, [pc, #44]	; (800e3e0 <scalbn+0x108>)
 800e3b4:	e7a8      	b.n	800e308 <scalbn+0x30>
 800e3b6:	bf00      	nop
 800e3b8:	c2f8f359 	.word	0xc2f8f359
 800e3bc:	01a56e1f 	.word	0x01a56e1f
 800e3c0:	8800759c 	.word	0x8800759c
 800e3c4:	7e37e43c 	.word	0x7e37e43c
 800e3c8:	43500000 	.word	0x43500000
 800e3cc:	ffff3cb0 	.word	0xffff3cb0
 800e3d0:	8800759c 	.word	0x8800759c
 800e3d4:	7e37e43c 	.word	0x7e37e43c
 800e3d8:	01a56e1f 	.word	0x01a56e1f
 800e3dc:	c2f8f359 	.word	0xc2f8f359
 800e3e0:	3c900000 	.word	0x3c900000

0800e3e4 <nanf>:
 800e3e4:	4800      	ldr	r0, [pc, #0]	; (800e3e8 <nanf+0x4>)
 800e3e6:	4770      	bx	lr
 800e3e8:	7fc00000 	.word	0x7fc00000

0800e3ec <__errno>:
 800e3ec:	4b01      	ldr	r3, [pc, #4]	; (800e3f4 <__errno+0x8>)
 800e3ee:	6818      	ldr	r0, [r3, #0]
 800e3f0:	4770      	bx	lr
 800e3f2:	bf00      	nop
 800e3f4:	200001a8 	.word	0x200001a8

0800e3f8 <__libc_init_array>:
 800e3f8:	b570      	push	{r4, r5, r6, lr}
 800e3fa:	2600      	movs	r6, #0
 800e3fc:	4d0c      	ldr	r5, [pc, #48]	; (800e430 <__libc_init_array+0x38>)
 800e3fe:	4c0d      	ldr	r4, [pc, #52]	; (800e434 <__libc_init_array+0x3c>)
 800e400:	1b64      	subs	r4, r4, r5
 800e402:	10a4      	asrs	r4, r4, #2
 800e404:	42a6      	cmp	r6, r4
 800e406:	d109      	bne.n	800e41c <__libc_init_array+0x24>
 800e408:	f002 feda 	bl	80111c0 <_init>
 800e40c:	2600      	movs	r6, #0
 800e40e:	4d0a      	ldr	r5, [pc, #40]	; (800e438 <__libc_init_array+0x40>)
 800e410:	4c0a      	ldr	r4, [pc, #40]	; (800e43c <__libc_init_array+0x44>)
 800e412:	1b64      	subs	r4, r4, r5
 800e414:	10a4      	asrs	r4, r4, #2
 800e416:	42a6      	cmp	r6, r4
 800e418:	d105      	bne.n	800e426 <__libc_init_array+0x2e>
 800e41a:	bd70      	pop	{r4, r5, r6, pc}
 800e41c:	f855 3b04 	ldr.w	r3, [r5], #4
 800e420:	4798      	blx	r3
 800e422:	3601      	adds	r6, #1
 800e424:	e7ee      	b.n	800e404 <__libc_init_array+0xc>
 800e426:	f855 3b04 	ldr.w	r3, [r5], #4
 800e42a:	4798      	blx	r3
 800e42c:	3601      	adds	r6, #1
 800e42e:	e7f2      	b.n	800e416 <__libc_init_array+0x1e>
 800e430:	080120d4 	.word	0x080120d4
 800e434:	080120d4 	.word	0x080120d4
 800e438:	080120d4 	.word	0x080120d4
 800e43c:	080120e0 	.word	0x080120e0

0800e440 <malloc>:
 800e440:	4b02      	ldr	r3, [pc, #8]	; (800e44c <malloc+0xc>)
 800e442:	4601      	mov	r1, r0
 800e444:	6818      	ldr	r0, [r3, #0]
 800e446:	f000 b86d 	b.w	800e524 <_malloc_r>
 800e44a:	bf00      	nop
 800e44c:	200001a8 	.word	0x200001a8

0800e450 <free>:
 800e450:	4b02      	ldr	r3, [pc, #8]	; (800e45c <free+0xc>)
 800e452:	4601      	mov	r1, r0
 800e454:	6818      	ldr	r0, [r3, #0]
 800e456:	f000 b819 	b.w	800e48c <_free_r>
 800e45a:	bf00      	nop
 800e45c:	200001a8 	.word	0x200001a8

0800e460 <memcmp>:
 800e460:	b530      	push	{r4, r5, lr}
 800e462:	2400      	movs	r4, #0
 800e464:	3901      	subs	r1, #1
 800e466:	42a2      	cmp	r2, r4
 800e468:	d101      	bne.n	800e46e <memcmp+0xe>
 800e46a:	2000      	movs	r0, #0
 800e46c:	e005      	b.n	800e47a <memcmp+0x1a>
 800e46e:	5d03      	ldrb	r3, [r0, r4]
 800e470:	3401      	adds	r4, #1
 800e472:	5d0d      	ldrb	r5, [r1, r4]
 800e474:	42ab      	cmp	r3, r5
 800e476:	d0f6      	beq.n	800e466 <memcmp+0x6>
 800e478:	1b58      	subs	r0, r3, r5
 800e47a:	bd30      	pop	{r4, r5, pc}

0800e47c <memset>:
 800e47c:	4603      	mov	r3, r0
 800e47e:	4402      	add	r2, r0
 800e480:	4293      	cmp	r3, r2
 800e482:	d100      	bne.n	800e486 <memset+0xa>
 800e484:	4770      	bx	lr
 800e486:	f803 1b01 	strb.w	r1, [r3], #1
 800e48a:	e7f9      	b.n	800e480 <memset+0x4>

0800e48c <_free_r>:
 800e48c:	b538      	push	{r3, r4, r5, lr}
 800e48e:	4605      	mov	r5, r0
 800e490:	2900      	cmp	r1, #0
 800e492:	d043      	beq.n	800e51c <_free_r+0x90>
 800e494:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e498:	1f0c      	subs	r4, r1, #4
 800e49a:	2b00      	cmp	r3, #0
 800e49c:	bfb8      	it	lt
 800e49e:	18e4      	addlt	r4, r4, r3
 800e4a0:	f001 fbd0 	bl	800fc44 <__malloc_lock>
 800e4a4:	4a1e      	ldr	r2, [pc, #120]	; (800e520 <_free_r+0x94>)
 800e4a6:	6813      	ldr	r3, [r2, #0]
 800e4a8:	4610      	mov	r0, r2
 800e4aa:	b933      	cbnz	r3, 800e4ba <_free_r+0x2e>
 800e4ac:	6063      	str	r3, [r4, #4]
 800e4ae:	6014      	str	r4, [r2, #0]
 800e4b0:	4628      	mov	r0, r5
 800e4b2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e4b6:	f001 bbcb 	b.w	800fc50 <__malloc_unlock>
 800e4ba:	42a3      	cmp	r3, r4
 800e4bc:	d90a      	bls.n	800e4d4 <_free_r+0x48>
 800e4be:	6821      	ldr	r1, [r4, #0]
 800e4c0:	1862      	adds	r2, r4, r1
 800e4c2:	4293      	cmp	r3, r2
 800e4c4:	bf01      	itttt	eq
 800e4c6:	681a      	ldreq	r2, [r3, #0]
 800e4c8:	685b      	ldreq	r3, [r3, #4]
 800e4ca:	1852      	addeq	r2, r2, r1
 800e4cc:	6022      	streq	r2, [r4, #0]
 800e4ce:	6063      	str	r3, [r4, #4]
 800e4d0:	6004      	str	r4, [r0, #0]
 800e4d2:	e7ed      	b.n	800e4b0 <_free_r+0x24>
 800e4d4:	461a      	mov	r2, r3
 800e4d6:	685b      	ldr	r3, [r3, #4]
 800e4d8:	b10b      	cbz	r3, 800e4de <_free_r+0x52>
 800e4da:	42a3      	cmp	r3, r4
 800e4dc:	d9fa      	bls.n	800e4d4 <_free_r+0x48>
 800e4de:	6811      	ldr	r1, [r2, #0]
 800e4e0:	1850      	adds	r0, r2, r1
 800e4e2:	42a0      	cmp	r0, r4
 800e4e4:	d10b      	bne.n	800e4fe <_free_r+0x72>
 800e4e6:	6820      	ldr	r0, [r4, #0]
 800e4e8:	4401      	add	r1, r0
 800e4ea:	1850      	adds	r0, r2, r1
 800e4ec:	4283      	cmp	r3, r0
 800e4ee:	6011      	str	r1, [r2, #0]
 800e4f0:	d1de      	bne.n	800e4b0 <_free_r+0x24>
 800e4f2:	6818      	ldr	r0, [r3, #0]
 800e4f4:	685b      	ldr	r3, [r3, #4]
 800e4f6:	4401      	add	r1, r0
 800e4f8:	6011      	str	r1, [r2, #0]
 800e4fa:	6053      	str	r3, [r2, #4]
 800e4fc:	e7d8      	b.n	800e4b0 <_free_r+0x24>
 800e4fe:	d902      	bls.n	800e506 <_free_r+0x7a>
 800e500:	230c      	movs	r3, #12
 800e502:	602b      	str	r3, [r5, #0]
 800e504:	e7d4      	b.n	800e4b0 <_free_r+0x24>
 800e506:	6820      	ldr	r0, [r4, #0]
 800e508:	1821      	adds	r1, r4, r0
 800e50a:	428b      	cmp	r3, r1
 800e50c:	bf01      	itttt	eq
 800e50e:	6819      	ldreq	r1, [r3, #0]
 800e510:	685b      	ldreq	r3, [r3, #4]
 800e512:	1809      	addeq	r1, r1, r0
 800e514:	6021      	streq	r1, [r4, #0]
 800e516:	6063      	str	r3, [r4, #4]
 800e518:	6054      	str	r4, [r2, #4]
 800e51a:	e7c9      	b.n	800e4b0 <_free_r+0x24>
 800e51c:	bd38      	pop	{r3, r4, r5, pc}
 800e51e:	bf00      	nop
 800e520:	200008a0 	.word	0x200008a0

0800e524 <_malloc_r>:
 800e524:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e526:	1ccd      	adds	r5, r1, #3
 800e528:	f025 0503 	bic.w	r5, r5, #3
 800e52c:	3508      	adds	r5, #8
 800e52e:	2d0c      	cmp	r5, #12
 800e530:	bf38      	it	cc
 800e532:	250c      	movcc	r5, #12
 800e534:	2d00      	cmp	r5, #0
 800e536:	4606      	mov	r6, r0
 800e538:	db01      	blt.n	800e53e <_malloc_r+0x1a>
 800e53a:	42a9      	cmp	r1, r5
 800e53c:	d903      	bls.n	800e546 <_malloc_r+0x22>
 800e53e:	230c      	movs	r3, #12
 800e540:	6033      	str	r3, [r6, #0]
 800e542:	2000      	movs	r0, #0
 800e544:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e546:	f001 fb7d 	bl	800fc44 <__malloc_lock>
 800e54a:	4921      	ldr	r1, [pc, #132]	; (800e5d0 <_malloc_r+0xac>)
 800e54c:	680a      	ldr	r2, [r1, #0]
 800e54e:	4614      	mov	r4, r2
 800e550:	b99c      	cbnz	r4, 800e57a <_malloc_r+0x56>
 800e552:	4f20      	ldr	r7, [pc, #128]	; (800e5d4 <_malloc_r+0xb0>)
 800e554:	683b      	ldr	r3, [r7, #0]
 800e556:	b923      	cbnz	r3, 800e562 <_malloc_r+0x3e>
 800e558:	4621      	mov	r1, r4
 800e55a:	4630      	mov	r0, r6
 800e55c:	f000 fca4 	bl	800eea8 <_sbrk_r>
 800e560:	6038      	str	r0, [r7, #0]
 800e562:	4629      	mov	r1, r5
 800e564:	4630      	mov	r0, r6
 800e566:	f000 fc9f 	bl	800eea8 <_sbrk_r>
 800e56a:	1c43      	adds	r3, r0, #1
 800e56c:	d123      	bne.n	800e5b6 <_malloc_r+0x92>
 800e56e:	230c      	movs	r3, #12
 800e570:	4630      	mov	r0, r6
 800e572:	6033      	str	r3, [r6, #0]
 800e574:	f001 fb6c 	bl	800fc50 <__malloc_unlock>
 800e578:	e7e3      	b.n	800e542 <_malloc_r+0x1e>
 800e57a:	6823      	ldr	r3, [r4, #0]
 800e57c:	1b5b      	subs	r3, r3, r5
 800e57e:	d417      	bmi.n	800e5b0 <_malloc_r+0x8c>
 800e580:	2b0b      	cmp	r3, #11
 800e582:	d903      	bls.n	800e58c <_malloc_r+0x68>
 800e584:	6023      	str	r3, [r4, #0]
 800e586:	441c      	add	r4, r3
 800e588:	6025      	str	r5, [r4, #0]
 800e58a:	e004      	b.n	800e596 <_malloc_r+0x72>
 800e58c:	6863      	ldr	r3, [r4, #4]
 800e58e:	42a2      	cmp	r2, r4
 800e590:	bf0c      	ite	eq
 800e592:	600b      	streq	r3, [r1, #0]
 800e594:	6053      	strne	r3, [r2, #4]
 800e596:	4630      	mov	r0, r6
 800e598:	f001 fb5a 	bl	800fc50 <__malloc_unlock>
 800e59c:	f104 000b 	add.w	r0, r4, #11
 800e5a0:	1d23      	adds	r3, r4, #4
 800e5a2:	f020 0007 	bic.w	r0, r0, #7
 800e5a6:	1ac2      	subs	r2, r0, r3
 800e5a8:	d0cc      	beq.n	800e544 <_malloc_r+0x20>
 800e5aa:	1a1b      	subs	r3, r3, r0
 800e5ac:	50a3      	str	r3, [r4, r2]
 800e5ae:	e7c9      	b.n	800e544 <_malloc_r+0x20>
 800e5b0:	4622      	mov	r2, r4
 800e5b2:	6864      	ldr	r4, [r4, #4]
 800e5b4:	e7cc      	b.n	800e550 <_malloc_r+0x2c>
 800e5b6:	1cc4      	adds	r4, r0, #3
 800e5b8:	f024 0403 	bic.w	r4, r4, #3
 800e5bc:	42a0      	cmp	r0, r4
 800e5be:	d0e3      	beq.n	800e588 <_malloc_r+0x64>
 800e5c0:	1a21      	subs	r1, r4, r0
 800e5c2:	4630      	mov	r0, r6
 800e5c4:	f000 fc70 	bl	800eea8 <_sbrk_r>
 800e5c8:	3001      	adds	r0, #1
 800e5ca:	d1dd      	bne.n	800e588 <_malloc_r+0x64>
 800e5cc:	e7cf      	b.n	800e56e <_malloc_r+0x4a>
 800e5ce:	bf00      	nop
 800e5d0:	200008a0 	.word	0x200008a0
 800e5d4:	200008a4 	.word	0x200008a4

0800e5d8 <__cvt>:
 800e5d8:	2b00      	cmp	r3, #0
 800e5da:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e5de:	461f      	mov	r7, r3
 800e5e0:	bfbb      	ittet	lt
 800e5e2:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 800e5e6:	461f      	movlt	r7, r3
 800e5e8:	2300      	movge	r3, #0
 800e5ea:	232d      	movlt	r3, #45	; 0x2d
 800e5ec:	b088      	sub	sp, #32
 800e5ee:	4614      	mov	r4, r2
 800e5f0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800e5f2:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800e5f4:	7013      	strb	r3, [r2, #0]
 800e5f6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800e5f8:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 800e5fc:	f023 0820 	bic.w	r8, r3, #32
 800e600:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800e604:	d005      	beq.n	800e612 <__cvt+0x3a>
 800e606:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800e60a:	d100      	bne.n	800e60e <__cvt+0x36>
 800e60c:	3501      	adds	r5, #1
 800e60e:	2302      	movs	r3, #2
 800e610:	e000      	b.n	800e614 <__cvt+0x3c>
 800e612:	2303      	movs	r3, #3
 800e614:	aa07      	add	r2, sp, #28
 800e616:	9204      	str	r2, [sp, #16]
 800e618:	aa06      	add	r2, sp, #24
 800e61a:	e9cd a202 	strd	sl, r2, [sp, #8]
 800e61e:	e9cd 3500 	strd	r3, r5, [sp]
 800e622:	4622      	mov	r2, r4
 800e624:	463b      	mov	r3, r7
 800e626:	f000 fcff 	bl	800f028 <_dtoa_r>
 800e62a:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800e62e:	4606      	mov	r6, r0
 800e630:	d102      	bne.n	800e638 <__cvt+0x60>
 800e632:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800e634:	07db      	lsls	r3, r3, #31
 800e636:	d522      	bpl.n	800e67e <__cvt+0xa6>
 800e638:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800e63c:	eb06 0905 	add.w	r9, r6, r5
 800e640:	d110      	bne.n	800e664 <__cvt+0x8c>
 800e642:	7833      	ldrb	r3, [r6, #0]
 800e644:	2b30      	cmp	r3, #48	; 0x30
 800e646:	d10a      	bne.n	800e65e <__cvt+0x86>
 800e648:	2200      	movs	r2, #0
 800e64a:	2300      	movs	r3, #0
 800e64c:	4620      	mov	r0, r4
 800e64e:	4639      	mov	r1, r7
 800e650:	f7f2 f9e6 	bl	8000a20 <__aeabi_dcmpeq>
 800e654:	b918      	cbnz	r0, 800e65e <__cvt+0x86>
 800e656:	f1c5 0501 	rsb	r5, r5, #1
 800e65a:	f8ca 5000 	str.w	r5, [sl]
 800e65e:	f8da 3000 	ldr.w	r3, [sl]
 800e662:	4499      	add	r9, r3
 800e664:	2200      	movs	r2, #0
 800e666:	2300      	movs	r3, #0
 800e668:	4620      	mov	r0, r4
 800e66a:	4639      	mov	r1, r7
 800e66c:	f7f2 f9d8 	bl	8000a20 <__aeabi_dcmpeq>
 800e670:	b108      	cbz	r0, 800e676 <__cvt+0x9e>
 800e672:	f8cd 901c 	str.w	r9, [sp, #28]
 800e676:	2230      	movs	r2, #48	; 0x30
 800e678:	9b07      	ldr	r3, [sp, #28]
 800e67a:	454b      	cmp	r3, r9
 800e67c:	d307      	bcc.n	800e68e <__cvt+0xb6>
 800e67e:	4630      	mov	r0, r6
 800e680:	9b07      	ldr	r3, [sp, #28]
 800e682:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800e684:	1b9b      	subs	r3, r3, r6
 800e686:	6013      	str	r3, [r2, #0]
 800e688:	b008      	add	sp, #32
 800e68a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e68e:	1c59      	adds	r1, r3, #1
 800e690:	9107      	str	r1, [sp, #28]
 800e692:	701a      	strb	r2, [r3, #0]
 800e694:	e7f0      	b.n	800e678 <__cvt+0xa0>

0800e696 <__exponent>:
 800e696:	4603      	mov	r3, r0
 800e698:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e69a:	2900      	cmp	r1, #0
 800e69c:	f803 2b02 	strb.w	r2, [r3], #2
 800e6a0:	bfb6      	itet	lt
 800e6a2:	222d      	movlt	r2, #45	; 0x2d
 800e6a4:	222b      	movge	r2, #43	; 0x2b
 800e6a6:	4249      	neglt	r1, r1
 800e6a8:	2909      	cmp	r1, #9
 800e6aa:	7042      	strb	r2, [r0, #1]
 800e6ac:	dd2b      	ble.n	800e706 <__exponent+0x70>
 800e6ae:	f10d 0407 	add.w	r4, sp, #7
 800e6b2:	46a4      	mov	ip, r4
 800e6b4:	270a      	movs	r7, #10
 800e6b6:	fb91 f6f7 	sdiv	r6, r1, r7
 800e6ba:	460a      	mov	r2, r1
 800e6bc:	46a6      	mov	lr, r4
 800e6be:	fb07 1516 	mls	r5, r7, r6, r1
 800e6c2:	2a63      	cmp	r2, #99	; 0x63
 800e6c4:	f105 0530 	add.w	r5, r5, #48	; 0x30
 800e6c8:	4631      	mov	r1, r6
 800e6ca:	f104 34ff 	add.w	r4, r4, #4294967295
 800e6ce:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800e6d2:	dcf0      	bgt.n	800e6b6 <__exponent+0x20>
 800e6d4:	3130      	adds	r1, #48	; 0x30
 800e6d6:	f1ae 0502 	sub.w	r5, lr, #2
 800e6da:	f804 1c01 	strb.w	r1, [r4, #-1]
 800e6de:	4629      	mov	r1, r5
 800e6e0:	1c44      	adds	r4, r0, #1
 800e6e2:	4561      	cmp	r1, ip
 800e6e4:	d30a      	bcc.n	800e6fc <__exponent+0x66>
 800e6e6:	f10d 0209 	add.w	r2, sp, #9
 800e6ea:	eba2 020e 	sub.w	r2, r2, lr
 800e6ee:	4565      	cmp	r5, ip
 800e6f0:	bf88      	it	hi
 800e6f2:	2200      	movhi	r2, #0
 800e6f4:	4413      	add	r3, r2
 800e6f6:	1a18      	subs	r0, r3, r0
 800e6f8:	b003      	add	sp, #12
 800e6fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e6fc:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e700:	f804 2f01 	strb.w	r2, [r4, #1]!
 800e704:	e7ed      	b.n	800e6e2 <__exponent+0x4c>
 800e706:	2330      	movs	r3, #48	; 0x30
 800e708:	3130      	adds	r1, #48	; 0x30
 800e70a:	7083      	strb	r3, [r0, #2]
 800e70c:	70c1      	strb	r1, [r0, #3]
 800e70e:	1d03      	adds	r3, r0, #4
 800e710:	e7f1      	b.n	800e6f6 <__exponent+0x60>
	...

0800e714 <_printf_float>:
 800e714:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e718:	b091      	sub	sp, #68	; 0x44
 800e71a:	460c      	mov	r4, r1
 800e71c:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 800e720:	4616      	mov	r6, r2
 800e722:	461f      	mov	r7, r3
 800e724:	4605      	mov	r5, r0
 800e726:	f001 fa6d 	bl	800fc04 <_localeconv_r>
 800e72a:	6803      	ldr	r3, [r0, #0]
 800e72c:	4618      	mov	r0, r3
 800e72e:	9309      	str	r3, [sp, #36]	; 0x24
 800e730:	f7f1 fd4a 	bl	80001c8 <strlen>
 800e734:	2300      	movs	r3, #0
 800e736:	930e      	str	r3, [sp, #56]	; 0x38
 800e738:	f8d8 3000 	ldr.w	r3, [r8]
 800e73c:	900a      	str	r0, [sp, #40]	; 0x28
 800e73e:	3307      	adds	r3, #7
 800e740:	f023 0307 	bic.w	r3, r3, #7
 800e744:	f103 0208 	add.w	r2, r3, #8
 800e748:	f894 9018 	ldrb.w	r9, [r4, #24]
 800e74c:	f8d4 b000 	ldr.w	fp, [r4]
 800e750:	f8c8 2000 	str.w	r2, [r8]
 800e754:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e758:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800e75c:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 800e760:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 800e764:	930b      	str	r3, [sp, #44]	; 0x2c
 800e766:	f04f 32ff 	mov.w	r2, #4294967295
 800e76a:	4640      	mov	r0, r8
 800e76c:	4b9c      	ldr	r3, [pc, #624]	; (800e9e0 <_printf_float+0x2cc>)
 800e76e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e770:	f7f2 f988 	bl	8000a84 <__aeabi_dcmpun>
 800e774:	bb70      	cbnz	r0, 800e7d4 <_printf_float+0xc0>
 800e776:	f04f 32ff 	mov.w	r2, #4294967295
 800e77a:	4640      	mov	r0, r8
 800e77c:	4b98      	ldr	r3, [pc, #608]	; (800e9e0 <_printf_float+0x2cc>)
 800e77e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e780:	f7f2 f962 	bl	8000a48 <__aeabi_dcmple>
 800e784:	bb30      	cbnz	r0, 800e7d4 <_printf_float+0xc0>
 800e786:	2200      	movs	r2, #0
 800e788:	2300      	movs	r3, #0
 800e78a:	4640      	mov	r0, r8
 800e78c:	4651      	mov	r1, sl
 800e78e:	f7f2 f951 	bl	8000a34 <__aeabi_dcmplt>
 800e792:	b110      	cbz	r0, 800e79a <_printf_float+0x86>
 800e794:	232d      	movs	r3, #45	; 0x2d
 800e796:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e79a:	4b92      	ldr	r3, [pc, #584]	; (800e9e4 <_printf_float+0x2d0>)
 800e79c:	4892      	ldr	r0, [pc, #584]	; (800e9e8 <_printf_float+0x2d4>)
 800e79e:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800e7a2:	bf94      	ite	ls
 800e7a4:	4698      	movls	r8, r3
 800e7a6:	4680      	movhi	r8, r0
 800e7a8:	2303      	movs	r3, #3
 800e7aa:	f04f 0a00 	mov.w	sl, #0
 800e7ae:	6123      	str	r3, [r4, #16]
 800e7b0:	f02b 0304 	bic.w	r3, fp, #4
 800e7b4:	6023      	str	r3, [r4, #0]
 800e7b6:	4633      	mov	r3, r6
 800e7b8:	4621      	mov	r1, r4
 800e7ba:	4628      	mov	r0, r5
 800e7bc:	9700      	str	r7, [sp, #0]
 800e7be:	aa0f      	add	r2, sp, #60	; 0x3c
 800e7c0:	f000 f9d4 	bl	800eb6c <_printf_common>
 800e7c4:	3001      	adds	r0, #1
 800e7c6:	f040 8090 	bne.w	800e8ea <_printf_float+0x1d6>
 800e7ca:	f04f 30ff 	mov.w	r0, #4294967295
 800e7ce:	b011      	add	sp, #68	; 0x44
 800e7d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e7d4:	4642      	mov	r2, r8
 800e7d6:	4653      	mov	r3, sl
 800e7d8:	4640      	mov	r0, r8
 800e7da:	4651      	mov	r1, sl
 800e7dc:	f7f2 f952 	bl	8000a84 <__aeabi_dcmpun>
 800e7e0:	b148      	cbz	r0, 800e7f6 <_printf_float+0xe2>
 800e7e2:	f1ba 0f00 	cmp.w	sl, #0
 800e7e6:	bfb8      	it	lt
 800e7e8:	232d      	movlt	r3, #45	; 0x2d
 800e7ea:	4880      	ldr	r0, [pc, #512]	; (800e9ec <_printf_float+0x2d8>)
 800e7ec:	bfb8      	it	lt
 800e7ee:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800e7f2:	4b7f      	ldr	r3, [pc, #508]	; (800e9f0 <_printf_float+0x2dc>)
 800e7f4:	e7d3      	b.n	800e79e <_printf_float+0x8a>
 800e7f6:	6863      	ldr	r3, [r4, #4]
 800e7f8:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800e7fc:	1c5a      	adds	r2, r3, #1
 800e7fe:	d142      	bne.n	800e886 <_printf_float+0x172>
 800e800:	2306      	movs	r3, #6
 800e802:	6063      	str	r3, [r4, #4]
 800e804:	2200      	movs	r2, #0
 800e806:	9206      	str	r2, [sp, #24]
 800e808:	aa0e      	add	r2, sp, #56	; 0x38
 800e80a:	e9cd 9204 	strd	r9, r2, [sp, #16]
 800e80e:	aa0d      	add	r2, sp, #52	; 0x34
 800e810:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 800e814:	9203      	str	r2, [sp, #12]
 800e816:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 800e81a:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800e81e:	6023      	str	r3, [r4, #0]
 800e820:	6863      	ldr	r3, [r4, #4]
 800e822:	4642      	mov	r2, r8
 800e824:	9300      	str	r3, [sp, #0]
 800e826:	4628      	mov	r0, r5
 800e828:	4653      	mov	r3, sl
 800e82a:	910b      	str	r1, [sp, #44]	; 0x2c
 800e82c:	f7ff fed4 	bl	800e5d8 <__cvt>
 800e830:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e832:	4680      	mov	r8, r0
 800e834:	2947      	cmp	r1, #71	; 0x47
 800e836:	990d      	ldr	r1, [sp, #52]	; 0x34
 800e838:	d108      	bne.n	800e84c <_printf_float+0x138>
 800e83a:	1cc8      	adds	r0, r1, #3
 800e83c:	db02      	blt.n	800e844 <_printf_float+0x130>
 800e83e:	6863      	ldr	r3, [r4, #4]
 800e840:	4299      	cmp	r1, r3
 800e842:	dd40      	ble.n	800e8c6 <_printf_float+0x1b2>
 800e844:	f1a9 0902 	sub.w	r9, r9, #2
 800e848:	fa5f f989 	uxtb.w	r9, r9
 800e84c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800e850:	d81f      	bhi.n	800e892 <_printf_float+0x17e>
 800e852:	464a      	mov	r2, r9
 800e854:	3901      	subs	r1, #1
 800e856:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800e85a:	910d      	str	r1, [sp, #52]	; 0x34
 800e85c:	f7ff ff1b 	bl	800e696 <__exponent>
 800e860:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e862:	4682      	mov	sl, r0
 800e864:	1813      	adds	r3, r2, r0
 800e866:	2a01      	cmp	r2, #1
 800e868:	6123      	str	r3, [r4, #16]
 800e86a:	dc02      	bgt.n	800e872 <_printf_float+0x15e>
 800e86c:	6822      	ldr	r2, [r4, #0]
 800e86e:	07d2      	lsls	r2, r2, #31
 800e870:	d501      	bpl.n	800e876 <_printf_float+0x162>
 800e872:	3301      	adds	r3, #1
 800e874:	6123      	str	r3, [r4, #16]
 800e876:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800e87a:	2b00      	cmp	r3, #0
 800e87c:	d09b      	beq.n	800e7b6 <_printf_float+0xa2>
 800e87e:	232d      	movs	r3, #45	; 0x2d
 800e880:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e884:	e797      	b.n	800e7b6 <_printf_float+0xa2>
 800e886:	2947      	cmp	r1, #71	; 0x47
 800e888:	d1bc      	bne.n	800e804 <_printf_float+0xf0>
 800e88a:	2b00      	cmp	r3, #0
 800e88c:	d1ba      	bne.n	800e804 <_printf_float+0xf0>
 800e88e:	2301      	movs	r3, #1
 800e890:	e7b7      	b.n	800e802 <_printf_float+0xee>
 800e892:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800e896:	d118      	bne.n	800e8ca <_printf_float+0x1b6>
 800e898:	2900      	cmp	r1, #0
 800e89a:	6863      	ldr	r3, [r4, #4]
 800e89c:	dd0b      	ble.n	800e8b6 <_printf_float+0x1a2>
 800e89e:	6121      	str	r1, [r4, #16]
 800e8a0:	b913      	cbnz	r3, 800e8a8 <_printf_float+0x194>
 800e8a2:	6822      	ldr	r2, [r4, #0]
 800e8a4:	07d0      	lsls	r0, r2, #31
 800e8a6:	d502      	bpl.n	800e8ae <_printf_float+0x19a>
 800e8a8:	3301      	adds	r3, #1
 800e8aa:	440b      	add	r3, r1
 800e8ac:	6123      	str	r3, [r4, #16]
 800e8ae:	f04f 0a00 	mov.w	sl, #0
 800e8b2:	65a1      	str	r1, [r4, #88]	; 0x58
 800e8b4:	e7df      	b.n	800e876 <_printf_float+0x162>
 800e8b6:	b913      	cbnz	r3, 800e8be <_printf_float+0x1aa>
 800e8b8:	6822      	ldr	r2, [r4, #0]
 800e8ba:	07d2      	lsls	r2, r2, #31
 800e8bc:	d501      	bpl.n	800e8c2 <_printf_float+0x1ae>
 800e8be:	3302      	adds	r3, #2
 800e8c0:	e7f4      	b.n	800e8ac <_printf_float+0x198>
 800e8c2:	2301      	movs	r3, #1
 800e8c4:	e7f2      	b.n	800e8ac <_printf_float+0x198>
 800e8c6:	f04f 0967 	mov.w	r9, #103	; 0x67
 800e8ca:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e8cc:	4299      	cmp	r1, r3
 800e8ce:	db05      	blt.n	800e8dc <_printf_float+0x1c8>
 800e8d0:	6823      	ldr	r3, [r4, #0]
 800e8d2:	6121      	str	r1, [r4, #16]
 800e8d4:	07d8      	lsls	r0, r3, #31
 800e8d6:	d5ea      	bpl.n	800e8ae <_printf_float+0x19a>
 800e8d8:	1c4b      	adds	r3, r1, #1
 800e8da:	e7e7      	b.n	800e8ac <_printf_float+0x198>
 800e8dc:	2900      	cmp	r1, #0
 800e8de:	bfcc      	ite	gt
 800e8e0:	2201      	movgt	r2, #1
 800e8e2:	f1c1 0202 	rsble	r2, r1, #2
 800e8e6:	4413      	add	r3, r2
 800e8e8:	e7e0      	b.n	800e8ac <_printf_float+0x198>
 800e8ea:	6823      	ldr	r3, [r4, #0]
 800e8ec:	055a      	lsls	r2, r3, #21
 800e8ee:	d407      	bmi.n	800e900 <_printf_float+0x1ec>
 800e8f0:	6923      	ldr	r3, [r4, #16]
 800e8f2:	4642      	mov	r2, r8
 800e8f4:	4631      	mov	r1, r6
 800e8f6:	4628      	mov	r0, r5
 800e8f8:	47b8      	blx	r7
 800e8fa:	3001      	adds	r0, #1
 800e8fc:	d12b      	bne.n	800e956 <_printf_float+0x242>
 800e8fe:	e764      	b.n	800e7ca <_printf_float+0xb6>
 800e900:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800e904:	f240 80dd 	bls.w	800eac2 <_printf_float+0x3ae>
 800e908:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800e90c:	2200      	movs	r2, #0
 800e90e:	2300      	movs	r3, #0
 800e910:	f7f2 f886 	bl	8000a20 <__aeabi_dcmpeq>
 800e914:	2800      	cmp	r0, #0
 800e916:	d033      	beq.n	800e980 <_printf_float+0x26c>
 800e918:	2301      	movs	r3, #1
 800e91a:	4631      	mov	r1, r6
 800e91c:	4628      	mov	r0, r5
 800e91e:	4a35      	ldr	r2, [pc, #212]	; (800e9f4 <_printf_float+0x2e0>)
 800e920:	47b8      	blx	r7
 800e922:	3001      	adds	r0, #1
 800e924:	f43f af51 	beq.w	800e7ca <_printf_float+0xb6>
 800e928:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800e92c:	429a      	cmp	r2, r3
 800e92e:	db02      	blt.n	800e936 <_printf_float+0x222>
 800e930:	6823      	ldr	r3, [r4, #0]
 800e932:	07d8      	lsls	r0, r3, #31
 800e934:	d50f      	bpl.n	800e956 <_printf_float+0x242>
 800e936:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800e93a:	4631      	mov	r1, r6
 800e93c:	4628      	mov	r0, r5
 800e93e:	47b8      	blx	r7
 800e940:	3001      	adds	r0, #1
 800e942:	f43f af42 	beq.w	800e7ca <_printf_float+0xb6>
 800e946:	f04f 0800 	mov.w	r8, #0
 800e94a:	f104 091a 	add.w	r9, r4, #26
 800e94e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e950:	3b01      	subs	r3, #1
 800e952:	4543      	cmp	r3, r8
 800e954:	dc09      	bgt.n	800e96a <_printf_float+0x256>
 800e956:	6823      	ldr	r3, [r4, #0]
 800e958:	079b      	lsls	r3, r3, #30
 800e95a:	f100 8102 	bmi.w	800eb62 <_printf_float+0x44e>
 800e95e:	68e0      	ldr	r0, [r4, #12]
 800e960:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e962:	4298      	cmp	r0, r3
 800e964:	bfb8      	it	lt
 800e966:	4618      	movlt	r0, r3
 800e968:	e731      	b.n	800e7ce <_printf_float+0xba>
 800e96a:	2301      	movs	r3, #1
 800e96c:	464a      	mov	r2, r9
 800e96e:	4631      	mov	r1, r6
 800e970:	4628      	mov	r0, r5
 800e972:	47b8      	blx	r7
 800e974:	3001      	adds	r0, #1
 800e976:	f43f af28 	beq.w	800e7ca <_printf_float+0xb6>
 800e97a:	f108 0801 	add.w	r8, r8, #1
 800e97e:	e7e6      	b.n	800e94e <_printf_float+0x23a>
 800e980:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e982:	2b00      	cmp	r3, #0
 800e984:	dc38      	bgt.n	800e9f8 <_printf_float+0x2e4>
 800e986:	2301      	movs	r3, #1
 800e988:	4631      	mov	r1, r6
 800e98a:	4628      	mov	r0, r5
 800e98c:	4a19      	ldr	r2, [pc, #100]	; (800e9f4 <_printf_float+0x2e0>)
 800e98e:	47b8      	blx	r7
 800e990:	3001      	adds	r0, #1
 800e992:	f43f af1a 	beq.w	800e7ca <_printf_float+0xb6>
 800e996:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800e99a:	4313      	orrs	r3, r2
 800e99c:	d102      	bne.n	800e9a4 <_printf_float+0x290>
 800e99e:	6823      	ldr	r3, [r4, #0]
 800e9a0:	07d9      	lsls	r1, r3, #31
 800e9a2:	d5d8      	bpl.n	800e956 <_printf_float+0x242>
 800e9a4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800e9a8:	4631      	mov	r1, r6
 800e9aa:	4628      	mov	r0, r5
 800e9ac:	47b8      	blx	r7
 800e9ae:	3001      	adds	r0, #1
 800e9b0:	f43f af0b 	beq.w	800e7ca <_printf_float+0xb6>
 800e9b4:	f04f 0900 	mov.w	r9, #0
 800e9b8:	f104 0a1a 	add.w	sl, r4, #26
 800e9bc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e9be:	425b      	negs	r3, r3
 800e9c0:	454b      	cmp	r3, r9
 800e9c2:	dc01      	bgt.n	800e9c8 <_printf_float+0x2b4>
 800e9c4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e9c6:	e794      	b.n	800e8f2 <_printf_float+0x1de>
 800e9c8:	2301      	movs	r3, #1
 800e9ca:	4652      	mov	r2, sl
 800e9cc:	4631      	mov	r1, r6
 800e9ce:	4628      	mov	r0, r5
 800e9d0:	47b8      	blx	r7
 800e9d2:	3001      	adds	r0, #1
 800e9d4:	f43f aef9 	beq.w	800e7ca <_printf_float+0xb6>
 800e9d8:	f109 0901 	add.w	r9, r9, #1
 800e9dc:	e7ee      	b.n	800e9bc <_printf_float+0x2a8>
 800e9de:	bf00      	nop
 800e9e0:	7fefffff 	.word	0x7fefffff
 800e9e4:	08011cec 	.word	0x08011cec
 800e9e8:	08011cf0 	.word	0x08011cf0
 800e9ec:	08011cf8 	.word	0x08011cf8
 800e9f0:	08011cf4 	.word	0x08011cf4
 800e9f4:	08011cfc 	.word	0x08011cfc
 800e9f8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e9fa:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800e9fc:	429a      	cmp	r2, r3
 800e9fe:	bfa8      	it	ge
 800ea00:	461a      	movge	r2, r3
 800ea02:	2a00      	cmp	r2, #0
 800ea04:	4691      	mov	r9, r2
 800ea06:	dc37      	bgt.n	800ea78 <_printf_float+0x364>
 800ea08:	f04f 0b00 	mov.w	fp, #0
 800ea0c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ea10:	f104 021a 	add.w	r2, r4, #26
 800ea14:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800ea18:	ebaa 0309 	sub.w	r3, sl, r9
 800ea1c:	455b      	cmp	r3, fp
 800ea1e:	dc33      	bgt.n	800ea88 <_printf_float+0x374>
 800ea20:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800ea24:	429a      	cmp	r2, r3
 800ea26:	db3b      	blt.n	800eaa0 <_printf_float+0x38c>
 800ea28:	6823      	ldr	r3, [r4, #0]
 800ea2a:	07da      	lsls	r2, r3, #31
 800ea2c:	d438      	bmi.n	800eaa0 <_printf_float+0x38c>
 800ea2e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ea30:	990d      	ldr	r1, [sp, #52]	; 0x34
 800ea32:	eba2 030a 	sub.w	r3, r2, sl
 800ea36:	eba2 0901 	sub.w	r9, r2, r1
 800ea3a:	4599      	cmp	r9, r3
 800ea3c:	bfa8      	it	ge
 800ea3e:	4699      	movge	r9, r3
 800ea40:	f1b9 0f00 	cmp.w	r9, #0
 800ea44:	dc34      	bgt.n	800eab0 <_printf_float+0x39c>
 800ea46:	f04f 0800 	mov.w	r8, #0
 800ea4a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ea4e:	f104 0a1a 	add.w	sl, r4, #26
 800ea52:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800ea56:	1a9b      	subs	r3, r3, r2
 800ea58:	eba3 0309 	sub.w	r3, r3, r9
 800ea5c:	4543      	cmp	r3, r8
 800ea5e:	f77f af7a 	ble.w	800e956 <_printf_float+0x242>
 800ea62:	2301      	movs	r3, #1
 800ea64:	4652      	mov	r2, sl
 800ea66:	4631      	mov	r1, r6
 800ea68:	4628      	mov	r0, r5
 800ea6a:	47b8      	blx	r7
 800ea6c:	3001      	adds	r0, #1
 800ea6e:	f43f aeac 	beq.w	800e7ca <_printf_float+0xb6>
 800ea72:	f108 0801 	add.w	r8, r8, #1
 800ea76:	e7ec      	b.n	800ea52 <_printf_float+0x33e>
 800ea78:	4613      	mov	r3, r2
 800ea7a:	4631      	mov	r1, r6
 800ea7c:	4642      	mov	r2, r8
 800ea7e:	4628      	mov	r0, r5
 800ea80:	47b8      	blx	r7
 800ea82:	3001      	adds	r0, #1
 800ea84:	d1c0      	bne.n	800ea08 <_printf_float+0x2f4>
 800ea86:	e6a0      	b.n	800e7ca <_printf_float+0xb6>
 800ea88:	2301      	movs	r3, #1
 800ea8a:	4631      	mov	r1, r6
 800ea8c:	4628      	mov	r0, r5
 800ea8e:	920b      	str	r2, [sp, #44]	; 0x2c
 800ea90:	47b8      	blx	r7
 800ea92:	3001      	adds	r0, #1
 800ea94:	f43f ae99 	beq.w	800e7ca <_printf_float+0xb6>
 800ea98:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800ea9a:	f10b 0b01 	add.w	fp, fp, #1
 800ea9e:	e7b9      	b.n	800ea14 <_printf_float+0x300>
 800eaa0:	4631      	mov	r1, r6
 800eaa2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800eaa6:	4628      	mov	r0, r5
 800eaa8:	47b8      	blx	r7
 800eaaa:	3001      	adds	r0, #1
 800eaac:	d1bf      	bne.n	800ea2e <_printf_float+0x31a>
 800eaae:	e68c      	b.n	800e7ca <_printf_float+0xb6>
 800eab0:	464b      	mov	r3, r9
 800eab2:	4631      	mov	r1, r6
 800eab4:	4628      	mov	r0, r5
 800eab6:	eb08 020a 	add.w	r2, r8, sl
 800eaba:	47b8      	blx	r7
 800eabc:	3001      	adds	r0, #1
 800eabe:	d1c2      	bne.n	800ea46 <_printf_float+0x332>
 800eac0:	e683      	b.n	800e7ca <_printf_float+0xb6>
 800eac2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800eac4:	2a01      	cmp	r2, #1
 800eac6:	dc01      	bgt.n	800eacc <_printf_float+0x3b8>
 800eac8:	07db      	lsls	r3, r3, #31
 800eaca:	d537      	bpl.n	800eb3c <_printf_float+0x428>
 800eacc:	2301      	movs	r3, #1
 800eace:	4642      	mov	r2, r8
 800ead0:	4631      	mov	r1, r6
 800ead2:	4628      	mov	r0, r5
 800ead4:	47b8      	blx	r7
 800ead6:	3001      	adds	r0, #1
 800ead8:	f43f ae77 	beq.w	800e7ca <_printf_float+0xb6>
 800eadc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800eae0:	4631      	mov	r1, r6
 800eae2:	4628      	mov	r0, r5
 800eae4:	47b8      	blx	r7
 800eae6:	3001      	adds	r0, #1
 800eae8:	f43f ae6f 	beq.w	800e7ca <_printf_float+0xb6>
 800eaec:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800eaf0:	2200      	movs	r2, #0
 800eaf2:	2300      	movs	r3, #0
 800eaf4:	f7f1 ff94 	bl	8000a20 <__aeabi_dcmpeq>
 800eaf8:	b9d8      	cbnz	r0, 800eb32 <_printf_float+0x41e>
 800eafa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800eafc:	f108 0201 	add.w	r2, r8, #1
 800eb00:	3b01      	subs	r3, #1
 800eb02:	4631      	mov	r1, r6
 800eb04:	4628      	mov	r0, r5
 800eb06:	47b8      	blx	r7
 800eb08:	3001      	adds	r0, #1
 800eb0a:	d10e      	bne.n	800eb2a <_printf_float+0x416>
 800eb0c:	e65d      	b.n	800e7ca <_printf_float+0xb6>
 800eb0e:	2301      	movs	r3, #1
 800eb10:	464a      	mov	r2, r9
 800eb12:	4631      	mov	r1, r6
 800eb14:	4628      	mov	r0, r5
 800eb16:	47b8      	blx	r7
 800eb18:	3001      	adds	r0, #1
 800eb1a:	f43f ae56 	beq.w	800e7ca <_printf_float+0xb6>
 800eb1e:	f108 0801 	add.w	r8, r8, #1
 800eb22:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800eb24:	3b01      	subs	r3, #1
 800eb26:	4543      	cmp	r3, r8
 800eb28:	dcf1      	bgt.n	800eb0e <_printf_float+0x3fa>
 800eb2a:	4653      	mov	r3, sl
 800eb2c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800eb30:	e6e0      	b.n	800e8f4 <_printf_float+0x1e0>
 800eb32:	f04f 0800 	mov.w	r8, #0
 800eb36:	f104 091a 	add.w	r9, r4, #26
 800eb3a:	e7f2      	b.n	800eb22 <_printf_float+0x40e>
 800eb3c:	2301      	movs	r3, #1
 800eb3e:	4642      	mov	r2, r8
 800eb40:	e7df      	b.n	800eb02 <_printf_float+0x3ee>
 800eb42:	2301      	movs	r3, #1
 800eb44:	464a      	mov	r2, r9
 800eb46:	4631      	mov	r1, r6
 800eb48:	4628      	mov	r0, r5
 800eb4a:	47b8      	blx	r7
 800eb4c:	3001      	adds	r0, #1
 800eb4e:	f43f ae3c 	beq.w	800e7ca <_printf_float+0xb6>
 800eb52:	f108 0801 	add.w	r8, r8, #1
 800eb56:	68e3      	ldr	r3, [r4, #12]
 800eb58:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800eb5a:	1a5b      	subs	r3, r3, r1
 800eb5c:	4543      	cmp	r3, r8
 800eb5e:	dcf0      	bgt.n	800eb42 <_printf_float+0x42e>
 800eb60:	e6fd      	b.n	800e95e <_printf_float+0x24a>
 800eb62:	f04f 0800 	mov.w	r8, #0
 800eb66:	f104 0919 	add.w	r9, r4, #25
 800eb6a:	e7f4      	b.n	800eb56 <_printf_float+0x442>

0800eb6c <_printf_common>:
 800eb6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800eb70:	4616      	mov	r6, r2
 800eb72:	4699      	mov	r9, r3
 800eb74:	688a      	ldr	r2, [r1, #8]
 800eb76:	690b      	ldr	r3, [r1, #16]
 800eb78:	4607      	mov	r7, r0
 800eb7a:	4293      	cmp	r3, r2
 800eb7c:	bfb8      	it	lt
 800eb7e:	4613      	movlt	r3, r2
 800eb80:	6033      	str	r3, [r6, #0]
 800eb82:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800eb86:	460c      	mov	r4, r1
 800eb88:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800eb8c:	b10a      	cbz	r2, 800eb92 <_printf_common+0x26>
 800eb8e:	3301      	adds	r3, #1
 800eb90:	6033      	str	r3, [r6, #0]
 800eb92:	6823      	ldr	r3, [r4, #0]
 800eb94:	0699      	lsls	r1, r3, #26
 800eb96:	bf42      	ittt	mi
 800eb98:	6833      	ldrmi	r3, [r6, #0]
 800eb9a:	3302      	addmi	r3, #2
 800eb9c:	6033      	strmi	r3, [r6, #0]
 800eb9e:	6825      	ldr	r5, [r4, #0]
 800eba0:	f015 0506 	ands.w	r5, r5, #6
 800eba4:	d106      	bne.n	800ebb4 <_printf_common+0x48>
 800eba6:	f104 0a19 	add.w	sl, r4, #25
 800ebaa:	68e3      	ldr	r3, [r4, #12]
 800ebac:	6832      	ldr	r2, [r6, #0]
 800ebae:	1a9b      	subs	r3, r3, r2
 800ebb0:	42ab      	cmp	r3, r5
 800ebb2:	dc28      	bgt.n	800ec06 <_printf_common+0x9a>
 800ebb4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800ebb8:	1e13      	subs	r3, r2, #0
 800ebba:	6822      	ldr	r2, [r4, #0]
 800ebbc:	bf18      	it	ne
 800ebbe:	2301      	movne	r3, #1
 800ebc0:	0692      	lsls	r2, r2, #26
 800ebc2:	d42d      	bmi.n	800ec20 <_printf_common+0xb4>
 800ebc4:	4649      	mov	r1, r9
 800ebc6:	4638      	mov	r0, r7
 800ebc8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ebcc:	47c0      	blx	r8
 800ebce:	3001      	adds	r0, #1
 800ebd0:	d020      	beq.n	800ec14 <_printf_common+0xa8>
 800ebd2:	6823      	ldr	r3, [r4, #0]
 800ebd4:	68e5      	ldr	r5, [r4, #12]
 800ebd6:	f003 0306 	and.w	r3, r3, #6
 800ebda:	2b04      	cmp	r3, #4
 800ebdc:	bf18      	it	ne
 800ebde:	2500      	movne	r5, #0
 800ebe0:	6832      	ldr	r2, [r6, #0]
 800ebe2:	f04f 0600 	mov.w	r6, #0
 800ebe6:	68a3      	ldr	r3, [r4, #8]
 800ebe8:	bf08      	it	eq
 800ebea:	1aad      	subeq	r5, r5, r2
 800ebec:	6922      	ldr	r2, [r4, #16]
 800ebee:	bf08      	it	eq
 800ebf0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ebf4:	4293      	cmp	r3, r2
 800ebf6:	bfc4      	itt	gt
 800ebf8:	1a9b      	subgt	r3, r3, r2
 800ebfa:	18ed      	addgt	r5, r5, r3
 800ebfc:	341a      	adds	r4, #26
 800ebfe:	42b5      	cmp	r5, r6
 800ec00:	d11a      	bne.n	800ec38 <_printf_common+0xcc>
 800ec02:	2000      	movs	r0, #0
 800ec04:	e008      	b.n	800ec18 <_printf_common+0xac>
 800ec06:	2301      	movs	r3, #1
 800ec08:	4652      	mov	r2, sl
 800ec0a:	4649      	mov	r1, r9
 800ec0c:	4638      	mov	r0, r7
 800ec0e:	47c0      	blx	r8
 800ec10:	3001      	adds	r0, #1
 800ec12:	d103      	bne.n	800ec1c <_printf_common+0xb0>
 800ec14:	f04f 30ff 	mov.w	r0, #4294967295
 800ec18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ec1c:	3501      	adds	r5, #1
 800ec1e:	e7c4      	b.n	800ebaa <_printf_common+0x3e>
 800ec20:	2030      	movs	r0, #48	; 0x30
 800ec22:	18e1      	adds	r1, r4, r3
 800ec24:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800ec28:	1c5a      	adds	r2, r3, #1
 800ec2a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800ec2e:	4422      	add	r2, r4
 800ec30:	3302      	adds	r3, #2
 800ec32:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800ec36:	e7c5      	b.n	800ebc4 <_printf_common+0x58>
 800ec38:	2301      	movs	r3, #1
 800ec3a:	4622      	mov	r2, r4
 800ec3c:	4649      	mov	r1, r9
 800ec3e:	4638      	mov	r0, r7
 800ec40:	47c0      	blx	r8
 800ec42:	3001      	adds	r0, #1
 800ec44:	d0e6      	beq.n	800ec14 <_printf_common+0xa8>
 800ec46:	3601      	adds	r6, #1
 800ec48:	e7d9      	b.n	800ebfe <_printf_common+0x92>
	...

0800ec4c <_printf_i>:
 800ec4c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ec50:	460c      	mov	r4, r1
 800ec52:	7e27      	ldrb	r7, [r4, #24]
 800ec54:	4691      	mov	r9, r2
 800ec56:	2f78      	cmp	r7, #120	; 0x78
 800ec58:	4680      	mov	r8, r0
 800ec5a:	469a      	mov	sl, r3
 800ec5c:	990c      	ldr	r1, [sp, #48]	; 0x30
 800ec5e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ec62:	d807      	bhi.n	800ec74 <_printf_i+0x28>
 800ec64:	2f62      	cmp	r7, #98	; 0x62
 800ec66:	d80a      	bhi.n	800ec7e <_printf_i+0x32>
 800ec68:	2f00      	cmp	r7, #0
 800ec6a:	f000 80d9 	beq.w	800ee20 <_printf_i+0x1d4>
 800ec6e:	2f58      	cmp	r7, #88	; 0x58
 800ec70:	f000 80a4 	beq.w	800edbc <_printf_i+0x170>
 800ec74:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800ec78:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800ec7c:	e03a      	b.n	800ecf4 <_printf_i+0xa8>
 800ec7e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800ec82:	2b15      	cmp	r3, #21
 800ec84:	d8f6      	bhi.n	800ec74 <_printf_i+0x28>
 800ec86:	a001      	add	r0, pc, #4	; (adr r0, 800ec8c <_printf_i+0x40>)
 800ec88:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800ec8c:	0800ece5 	.word	0x0800ece5
 800ec90:	0800ecf9 	.word	0x0800ecf9
 800ec94:	0800ec75 	.word	0x0800ec75
 800ec98:	0800ec75 	.word	0x0800ec75
 800ec9c:	0800ec75 	.word	0x0800ec75
 800eca0:	0800ec75 	.word	0x0800ec75
 800eca4:	0800ecf9 	.word	0x0800ecf9
 800eca8:	0800ec75 	.word	0x0800ec75
 800ecac:	0800ec75 	.word	0x0800ec75
 800ecb0:	0800ec75 	.word	0x0800ec75
 800ecb4:	0800ec75 	.word	0x0800ec75
 800ecb8:	0800ee07 	.word	0x0800ee07
 800ecbc:	0800ed29 	.word	0x0800ed29
 800ecc0:	0800ede9 	.word	0x0800ede9
 800ecc4:	0800ec75 	.word	0x0800ec75
 800ecc8:	0800ec75 	.word	0x0800ec75
 800eccc:	0800ee29 	.word	0x0800ee29
 800ecd0:	0800ec75 	.word	0x0800ec75
 800ecd4:	0800ed29 	.word	0x0800ed29
 800ecd8:	0800ec75 	.word	0x0800ec75
 800ecdc:	0800ec75 	.word	0x0800ec75
 800ece0:	0800edf1 	.word	0x0800edf1
 800ece4:	680b      	ldr	r3, [r1, #0]
 800ece6:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800ecea:	1d1a      	adds	r2, r3, #4
 800ecec:	681b      	ldr	r3, [r3, #0]
 800ecee:	600a      	str	r2, [r1, #0]
 800ecf0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ecf4:	2301      	movs	r3, #1
 800ecf6:	e0a4      	b.n	800ee42 <_printf_i+0x1f6>
 800ecf8:	6825      	ldr	r5, [r4, #0]
 800ecfa:	6808      	ldr	r0, [r1, #0]
 800ecfc:	062e      	lsls	r6, r5, #24
 800ecfe:	f100 0304 	add.w	r3, r0, #4
 800ed02:	d50a      	bpl.n	800ed1a <_printf_i+0xce>
 800ed04:	6805      	ldr	r5, [r0, #0]
 800ed06:	600b      	str	r3, [r1, #0]
 800ed08:	2d00      	cmp	r5, #0
 800ed0a:	da03      	bge.n	800ed14 <_printf_i+0xc8>
 800ed0c:	232d      	movs	r3, #45	; 0x2d
 800ed0e:	426d      	negs	r5, r5
 800ed10:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ed14:	230a      	movs	r3, #10
 800ed16:	485e      	ldr	r0, [pc, #376]	; (800ee90 <_printf_i+0x244>)
 800ed18:	e019      	b.n	800ed4e <_printf_i+0x102>
 800ed1a:	f015 0f40 	tst.w	r5, #64	; 0x40
 800ed1e:	6805      	ldr	r5, [r0, #0]
 800ed20:	600b      	str	r3, [r1, #0]
 800ed22:	bf18      	it	ne
 800ed24:	b22d      	sxthne	r5, r5
 800ed26:	e7ef      	b.n	800ed08 <_printf_i+0xbc>
 800ed28:	680b      	ldr	r3, [r1, #0]
 800ed2a:	6825      	ldr	r5, [r4, #0]
 800ed2c:	1d18      	adds	r0, r3, #4
 800ed2e:	6008      	str	r0, [r1, #0]
 800ed30:	0628      	lsls	r0, r5, #24
 800ed32:	d501      	bpl.n	800ed38 <_printf_i+0xec>
 800ed34:	681d      	ldr	r5, [r3, #0]
 800ed36:	e002      	b.n	800ed3e <_printf_i+0xf2>
 800ed38:	0669      	lsls	r1, r5, #25
 800ed3a:	d5fb      	bpl.n	800ed34 <_printf_i+0xe8>
 800ed3c:	881d      	ldrh	r5, [r3, #0]
 800ed3e:	2f6f      	cmp	r7, #111	; 0x6f
 800ed40:	bf0c      	ite	eq
 800ed42:	2308      	moveq	r3, #8
 800ed44:	230a      	movne	r3, #10
 800ed46:	4852      	ldr	r0, [pc, #328]	; (800ee90 <_printf_i+0x244>)
 800ed48:	2100      	movs	r1, #0
 800ed4a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ed4e:	6866      	ldr	r6, [r4, #4]
 800ed50:	2e00      	cmp	r6, #0
 800ed52:	bfa8      	it	ge
 800ed54:	6821      	ldrge	r1, [r4, #0]
 800ed56:	60a6      	str	r6, [r4, #8]
 800ed58:	bfa4      	itt	ge
 800ed5a:	f021 0104 	bicge.w	r1, r1, #4
 800ed5e:	6021      	strge	r1, [r4, #0]
 800ed60:	b90d      	cbnz	r5, 800ed66 <_printf_i+0x11a>
 800ed62:	2e00      	cmp	r6, #0
 800ed64:	d04d      	beq.n	800ee02 <_printf_i+0x1b6>
 800ed66:	4616      	mov	r6, r2
 800ed68:	fbb5 f1f3 	udiv	r1, r5, r3
 800ed6c:	fb03 5711 	mls	r7, r3, r1, r5
 800ed70:	5dc7      	ldrb	r7, [r0, r7]
 800ed72:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800ed76:	462f      	mov	r7, r5
 800ed78:	42bb      	cmp	r3, r7
 800ed7a:	460d      	mov	r5, r1
 800ed7c:	d9f4      	bls.n	800ed68 <_printf_i+0x11c>
 800ed7e:	2b08      	cmp	r3, #8
 800ed80:	d10b      	bne.n	800ed9a <_printf_i+0x14e>
 800ed82:	6823      	ldr	r3, [r4, #0]
 800ed84:	07df      	lsls	r7, r3, #31
 800ed86:	d508      	bpl.n	800ed9a <_printf_i+0x14e>
 800ed88:	6923      	ldr	r3, [r4, #16]
 800ed8a:	6861      	ldr	r1, [r4, #4]
 800ed8c:	4299      	cmp	r1, r3
 800ed8e:	bfde      	ittt	le
 800ed90:	2330      	movle	r3, #48	; 0x30
 800ed92:	f806 3c01 	strble.w	r3, [r6, #-1]
 800ed96:	f106 36ff 	addle.w	r6, r6, #4294967295
 800ed9a:	1b92      	subs	r2, r2, r6
 800ed9c:	6122      	str	r2, [r4, #16]
 800ed9e:	464b      	mov	r3, r9
 800eda0:	4621      	mov	r1, r4
 800eda2:	4640      	mov	r0, r8
 800eda4:	f8cd a000 	str.w	sl, [sp]
 800eda8:	aa03      	add	r2, sp, #12
 800edaa:	f7ff fedf 	bl	800eb6c <_printf_common>
 800edae:	3001      	adds	r0, #1
 800edb0:	d14c      	bne.n	800ee4c <_printf_i+0x200>
 800edb2:	f04f 30ff 	mov.w	r0, #4294967295
 800edb6:	b004      	add	sp, #16
 800edb8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800edbc:	4834      	ldr	r0, [pc, #208]	; (800ee90 <_printf_i+0x244>)
 800edbe:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800edc2:	680e      	ldr	r6, [r1, #0]
 800edc4:	6823      	ldr	r3, [r4, #0]
 800edc6:	f856 5b04 	ldr.w	r5, [r6], #4
 800edca:	061f      	lsls	r7, r3, #24
 800edcc:	600e      	str	r6, [r1, #0]
 800edce:	d514      	bpl.n	800edfa <_printf_i+0x1ae>
 800edd0:	07d9      	lsls	r1, r3, #31
 800edd2:	bf44      	itt	mi
 800edd4:	f043 0320 	orrmi.w	r3, r3, #32
 800edd8:	6023      	strmi	r3, [r4, #0]
 800edda:	b91d      	cbnz	r5, 800ede4 <_printf_i+0x198>
 800eddc:	6823      	ldr	r3, [r4, #0]
 800edde:	f023 0320 	bic.w	r3, r3, #32
 800ede2:	6023      	str	r3, [r4, #0]
 800ede4:	2310      	movs	r3, #16
 800ede6:	e7af      	b.n	800ed48 <_printf_i+0xfc>
 800ede8:	6823      	ldr	r3, [r4, #0]
 800edea:	f043 0320 	orr.w	r3, r3, #32
 800edee:	6023      	str	r3, [r4, #0]
 800edf0:	2378      	movs	r3, #120	; 0x78
 800edf2:	4828      	ldr	r0, [pc, #160]	; (800ee94 <_printf_i+0x248>)
 800edf4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800edf8:	e7e3      	b.n	800edc2 <_printf_i+0x176>
 800edfa:	065e      	lsls	r6, r3, #25
 800edfc:	bf48      	it	mi
 800edfe:	b2ad      	uxthmi	r5, r5
 800ee00:	e7e6      	b.n	800edd0 <_printf_i+0x184>
 800ee02:	4616      	mov	r6, r2
 800ee04:	e7bb      	b.n	800ed7e <_printf_i+0x132>
 800ee06:	680b      	ldr	r3, [r1, #0]
 800ee08:	6826      	ldr	r6, [r4, #0]
 800ee0a:	1d1d      	adds	r5, r3, #4
 800ee0c:	6960      	ldr	r0, [r4, #20]
 800ee0e:	600d      	str	r5, [r1, #0]
 800ee10:	0635      	lsls	r5, r6, #24
 800ee12:	681b      	ldr	r3, [r3, #0]
 800ee14:	d501      	bpl.n	800ee1a <_printf_i+0x1ce>
 800ee16:	6018      	str	r0, [r3, #0]
 800ee18:	e002      	b.n	800ee20 <_printf_i+0x1d4>
 800ee1a:	0671      	lsls	r1, r6, #25
 800ee1c:	d5fb      	bpl.n	800ee16 <_printf_i+0x1ca>
 800ee1e:	8018      	strh	r0, [r3, #0]
 800ee20:	2300      	movs	r3, #0
 800ee22:	4616      	mov	r6, r2
 800ee24:	6123      	str	r3, [r4, #16]
 800ee26:	e7ba      	b.n	800ed9e <_printf_i+0x152>
 800ee28:	680b      	ldr	r3, [r1, #0]
 800ee2a:	1d1a      	adds	r2, r3, #4
 800ee2c:	600a      	str	r2, [r1, #0]
 800ee2e:	681e      	ldr	r6, [r3, #0]
 800ee30:	2100      	movs	r1, #0
 800ee32:	4630      	mov	r0, r6
 800ee34:	6862      	ldr	r2, [r4, #4]
 800ee36:	f000 fee9 	bl	800fc0c <memchr>
 800ee3a:	b108      	cbz	r0, 800ee40 <_printf_i+0x1f4>
 800ee3c:	1b80      	subs	r0, r0, r6
 800ee3e:	6060      	str	r0, [r4, #4]
 800ee40:	6863      	ldr	r3, [r4, #4]
 800ee42:	6123      	str	r3, [r4, #16]
 800ee44:	2300      	movs	r3, #0
 800ee46:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ee4a:	e7a8      	b.n	800ed9e <_printf_i+0x152>
 800ee4c:	4632      	mov	r2, r6
 800ee4e:	4649      	mov	r1, r9
 800ee50:	4640      	mov	r0, r8
 800ee52:	6923      	ldr	r3, [r4, #16]
 800ee54:	47d0      	blx	sl
 800ee56:	3001      	adds	r0, #1
 800ee58:	d0ab      	beq.n	800edb2 <_printf_i+0x166>
 800ee5a:	6823      	ldr	r3, [r4, #0]
 800ee5c:	079b      	lsls	r3, r3, #30
 800ee5e:	d413      	bmi.n	800ee88 <_printf_i+0x23c>
 800ee60:	68e0      	ldr	r0, [r4, #12]
 800ee62:	9b03      	ldr	r3, [sp, #12]
 800ee64:	4298      	cmp	r0, r3
 800ee66:	bfb8      	it	lt
 800ee68:	4618      	movlt	r0, r3
 800ee6a:	e7a4      	b.n	800edb6 <_printf_i+0x16a>
 800ee6c:	2301      	movs	r3, #1
 800ee6e:	4632      	mov	r2, r6
 800ee70:	4649      	mov	r1, r9
 800ee72:	4640      	mov	r0, r8
 800ee74:	47d0      	blx	sl
 800ee76:	3001      	adds	r0, #1
 800ee78:	d09b      	beq.n	800edb2 <_printf_i+0x166>
 800ee7a:	3501      	adds	r5, #1
 800ee7c:	68e3      	ldr	r3, [r4, #12]
 800ee7e:	9903      	ldr	r1, [sp, #12]
 800ee80:	1a5b      	subs	r3, r3, r1
 800ee82:	42ab      	cmp	r3, r5
 800ee84:	dcf2      	bgt.n	800ee6c <_printf_i+0x220>
 800ee86:	e7eb      	b.n	800ee60 <_printf_i+0x214>
 800ee88:	2500      	movs	r5, #0
 800ee8a:	f104 0619 	add.w	r6, r4, #25
 800ee8e:	e7f5      	b.n	800ee7c <_printf_i+0x230>
 800ee90:	08011cfe 	.word	0x08011cfe
 800ee94:	08011d0f 	.word	0x08011d0f

0800ee98 <realloc>:
 800ee98:	4b02      	ldr	r3, [pc, #8]	; (800eea4 <realloc+0xc>)
 800ee9a:	460a      	mov	r2, r1
 800ee9c:	4601      	mov	r1, r0
 800ee9e:	6818      	ldr	r0, [r3, #0]
 800eea0:	f001 ba6c 	b.w	801037c <_realloc_r>
 800eea4:	200001a8 	.word	0x200001a8

0800eea8 <_sbrk_r>:
 800eea8:	b538      	push	{r3, r4, r5, lr}
 800eeaa:	2300      	movs	r3, #0
 800eeac:	4d05      	ldr	r5, [pc, #20]	; (800eec4 <_sbrk_r+0x1c>)
 800eeae:	4604      	mov	r4, r0
 800eeb0:	4608      	mov	r0, r1
 800eeb2:	602b      	str	r3, [r5, #0]
 800eeb4:	f7f5 fca2 	bl	80047fc <_sbrk>
 800eeb8:	1c43      	adds	r3, r0, #1
 800eeba:	d102      	bne.n	800eec2 <_sbrk_r+0x1a>
 800eebc:	682b      	ldr	r3, [r5, #0]
 800eebe:	b103      	cbz	r3, 800eec2 <_sbrk_r+0x1a>
 800eec0:	6023      	str	r3, [r4, #0]
 800eec2:	bd38      	pop	{r3, r4, r5, pc}
 800eec4:	20002170 	.word	0x20002170

0800eec8 <siprintf>:
 800eec8:	b40e      	push	{r1, r2, r3}
 800eeca:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800eece:	b500      	push	{lr}
 800eed0:	b09c      	sub	sp, #112	; 0x70
 800eed2:	ab1d      	add	r3, sp, #116	; 0x74
 800eed4:	9002      	str	r0, [sp, #8]
 800eed6:	9006      	str	r0, [sp, #24]
 800eed8:	9107      	str	r1, [sp, #28]
 800eeda:	9104      	str	r1, [sp, #16]
 800eedc:	4808      	ldr	r0, [pc, #32]	; (800ef00 <siprintf+0x38>)
 800eede:	4909      	ldr	r1, [pc, #36]	; (800ef04 <siprintf+0x3c>)
 800eee0:	f853 2b04 	ldr.w	r2, [r3], #4
 800eee4:	9105      	str	r1, [sp, #20]
 800eee6:	6800      	ldr	r0, [r0, #0]
 800eee8:	a902      	add	r1, sp, #8
 800eeea:	9301      	str	r3, [sp, #4]
 800eeec:	f001 fac8 	bl	8010480 <_svfiprintf_r>
 800eef0:	2200      	movs	r2, #0
 800eef2:	9b02      	ldr	r3, [sp, #8]
 800eef4:	701a      	strb	r2, [r3, #0]
 800eef6:	b01c      	add	sp, #112	; 0x70
 800eef8:	f85d eb04 	ldr.w	lr, [sp], #4
 800eefc:	b003      	add	sp, #12
 800eefe:	4770      	bx	lr
 800ef00:	200001a8 	.word	0x200001a8
 800ef04:	ffff0208 	.word	0xffff0208

0800ef08 <quorem>:
 800ef08:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ef0c:	6903      	ldr	r3, [r0, #16]
 800ef0e:	690c      	ldr	r4, [r1, #16]
 800ef10:	4607      	mov	r7, r0
 800ef12:	42a3      	cmp	r3, r4
 800ef14:	f2c0 8083 	blt.w	800f01e <quorem+0x116>
 800ef18:	3c01      	subs	r4, #1
 800ef1a:	f100 0514 	add.w	r5, r0, #20
 800ef1e:	f101 0814 	add.w	r8, r1, #20
 800ef22:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ef26:	9301      	str	r3, [sp, #4]
 800ef28:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800ef2c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ef30:	3301      	adds	r3, #1
 800ef32:	429a      	cmp	r2, r3
 800ef34:	fbb2 f6f3 	udiv	r6, r2, r3
 800ef38:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800ef3c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800ef40:	d332      	bcc.n	800efa8 <quorem+0xa0>
 800ef42:	f04f 0e00 	mov.w	lr, #0
 800ef46:	4640      	mov	r0, r8
 800ef48:	46ac      	mov	ip, r5
 800ef4a:	46f2      	mov	sl, lr
 800ef4c:	f850 2b04 	ldr.w	r2, [r0], #4
 800ef50:	b293      	uxth	r3, r2
 800ef52:	fb06 e303 	mla	r3, r6, r3, lr
 800ef56:	0c12      	lsrs	r2, r2, #16
 800ef58:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800ef5c:	fb06 e202 	mla	r2, r6, r2, lr
 800ef60:	b29b      	uxth	r3, r3
 800ef62:	ebaa 0303 	sub.w	r3, sl, r3
 800ef66:	f8dc a000 	ldr.w	sl, [ip]
 800ef6a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800ef6e:	fa1f fa8a 	uxth.w	sl, sl
 800ef72:	4453      	add	r3, sl
 800ef74:	fa1f fa82 	uxth.w	sl, r2
 800ef78:	f8dc 2000 	ldr.w	r2, [ip]
 800ef7c:	4581      	cmp	r9, r0
 800ef7e:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800ef82:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800ef86:	b29b      	uxth	r3, r3
 800ef88:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ef8c:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800ef90:	f84c 3b04 	str.w	r3, [ip], #4
 800ef94:	d2da      	bcs.n	800ef4c <quorem+0x44>
 800ef96:	f855 300b 	ldr.w	r3, [r5, fp]
 800ef9a:	b92b      	cbnz	r3, 800efa8 <quorem+0xa0>
 800ef9c:	9b01      	ldr	r3, [sp, #4]
 800ef9e:	3b04      	subs	r3, #4
 800efa0:	429d      	cmp	r5, r3
 800efa2:	461a      	mov	r2, r3
 800efa4:	d32f      	bcc.n	800f006 <quorem+0xfe>
 800efa6:	613c      	str	r4, [r7, #16]
 800efa8:	4638      	mov	r0, r7
 800efaa:	f001 f8d1 	bl	8010150 <__mcmp>
 800efae:	2800      	cmp	r0, #0
 800efb0:	db25      	blt.n	800effe <quorem+0xf6>
 800efb2:	4628      	mov	r0, r5
 800efb4:	f04f 0c00 	mov.w	ip, #0
 800efb8:	3601      	adds	r6, #1
 800efba:	f858 1b04 	ldr.w	r1, [r8], #4
 800efbe:	f8d0 e000 	ldr.w	lr, [r0]
 800efc2:	b28b      	uxth	r3, r1
 800efc4:	ebac 0303 	sub.w	r3, ip, r3
 800efc8:	fa1f f28e 	uxth.w	r2, lr
 800efcc:	4413      	add	r3, r2
 800efce:	0c0a      	lsrs	r2, r1, #16
 800efd0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800efd4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800efd8:	b29b      	uxth	r3, r3
 800efda:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800efde:	45c1      	cmp	r9, r8
 800efe0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800efe4:	f840 3b04 	str.w	r3, [r0], #4
 800efe8:	d2e7      	bcs.n	800efba <quorem+0xb2>
 800efea:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800efee:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800eff2:	b922      	cbnz	r2, 800effe <quorem+0xf6>
 800eff4:	3b04      	subs	r3, #4
 800eff6:	429d      	cmp	r5, r3
 800eff8:	461a      	mov	r2, r3
 800effa:	d30a      	bcc.n	800f012 <quorem+0x10a>
 800effc:	613c      	str	r4, [r7, #16]
 800effe:	4630      	mov	r0, r6
 800f000:	b003      	add	sp, #12
 800f002:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f006:	6812      	ldr	r2, [r2, #0]
 800f008:	3b04      	subs	r3, #4
 800f00a:	2a00      	cmp	r2, #0
 800f00c:	d1cb      	bne.n	800efa6 <quorem+0x9e>
 800f00e:	3c01      	subs	r4, #1
 800f010:	e7c6      	b.n	800efa0 <quorem+0x98>
 800f012:	6812      	ldr	r2, [r2, #0]
 800f014:	3b04      	subs	r3, #4
 800f016:	2a00      	cmp	r2, #0
 800f018:	d1f0      	bne.n	800effc <quorem+0xf4>
 800f01a:	3c01      	subs	r4, #1
 800f01c:	e7eb      	b.n	800eff6 <quorem+0xee>
 800f01e:	2000      	movs	r0, #0
 800f020:	e7ee      	b.n	800f000 <quorem+0xf8>
 800f022:	0000      	movs	r0, r0
 800f024:	0000      	movs	r0, r0
	...

0800f028 <_dtoa_r>:
 800f028:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f02c:	4616      	mov	r6, r2
 800f02e:	461f      	mov	r7, r3
 800f030:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800f032:	b099      	sub	sp, #100	; 0x64
 800f034:	4605      	mov	r5, r0
 800f036:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800f03a:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 800f03e:	b974      	cbnz	r4, 800f05e <_dtoa_r+0x36>
 800f040:	2010      	movs	r0, #16
 800f042:	f7ff f9fd 	bl	800e440 <malloc>
 800f046:	4602      	mov	r2, r0
 800f048:	6268      	str	r0, [r5, #36]	; 0x24
 800f04a:	b920      	cbnz	r0, 800f056 <_dtoa_r+0x2e>
 800f04c:	21ea      	movs	r1, #234	; 0xea
 800f04e:	4bae      	ldr	r3, [pc, #696]	; (800f308 <_dtoa_r+0x2e0>)
 800f050:	48ae      	ldr	r0, [pc, #696]	; (800f30c <_dtoa_r+0x2e4>)
 800f052:	f001 fb15 	bl	8010680 <__assert_func>
 800f056:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800f05a:	6004      	str	r4, [r0, #0]
 800f05c:	60c4      	str	r4, [r0, #12]
 800f05e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800f060:	6819      	ldr	r1, [r3, #0]
 800f062:	b151      	cbz	r1, 800f07a <_dtoa_r+0x52>
 800f064:	685a      	ldr	r2, [r3, #4]
 800f066:	2301      	movs	r3, #1
 800f068:	4093      	lsls	r3, r2
 800f06a:	604a      	str	r2, [r1, #4]
 800f06c:	608b      	str	r3, [r1, #8]
 800f06e:	4628      	mov	r0, r5
 800f070:	f000 fe34 	bl	800fcdc <_Bfree>
 800f074:	2200      	movs	r2, #0
 800f076:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800f078:	601a      	str	r2, [r3, #0]
 800f07a:	1e3b      	subs	r3, r7, #0
 800f07c:	bfaf      	iteee	ge
 800f07e:	2300      	movge	r3, #0
 800f080:	2201      	movlt	r2, #1
 800f082:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800f086:	9305      	strlt	r3, [sp, #20]
 800f088:	bfa8      	it	ge
 800f08a:	f8c8 3000 	strge.w	r3, [r8]
 800f08e:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800f092:	4b9f      	ldr	r3, [pc, #636]	; (800f310 <_dtoa_r+0x2e8>)
 800f094:	bfb8      	it	lt
 800f096:	f8c8 2000 	strlt.w	r2, [r8]
 800f09a:	ea33 0309 	bics.w	r3, r3, r9
 800f09e:	d119      	bne.n	800f0d4 <_dtoa_r+0xac>
 800f0a0:	f242 730f 	movw	r3, #9999	; 0x270f
 800f0a4:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800f0a6:	6013      	str	r3, [r2, #0]
 800f0a8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800f0ac:	4333      	orrs	r3, r6
 800f0ae:	f000 8580 	beq.w	800fbb2 <_dtoa_r+0xb8a>
 800f0b2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800f0b4:	b953      	cbnz	r3, 800f0cc <_dtoa_r+0xa4>
 800f0b6:	4b97      	ldr	r3, [pc, #604]	; (800f314 <_dtoa_r+0x2ec>)
 800f0b8:	e022      	b.n	800f100 <_dtoa_r+0xd8>
 800f0ba:	4b97      	ldr	r3, [pc, #604]	; (800f318 <_dtoa_r+0x2f0>)
 800f0bc:	9308      	str	r3, [sp, #32]
 800f0be:	3308      	adds	r3, #8
 800f0c0:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800f0c2:	6013      	str	r3, [r2, #0]
 800f0c4:	9808      	ldr	r0, [sp, #32]
 800f0c6:	b019      	add	sp, #100	; 0x64
 800f0c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f0cc:	4b91      	ldr	r3, [pc, #580]	; (800f314 <_dtoa_r+0x2ec>)
 800f0ce:	9308      	str	r3, [sp, #32]
 800f0d0:	3303      	adds	r3, #3
 800f0d2:	e7f5      	b.n	800f0c0 <_dtoa_r+0x98>
 800f0d4:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800f0d8:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 800f0dc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800f0e0:	2200      	movs	r2, #0
 800f0e2:	2300      	movs	r3, #0
 800f0e4:	f7f1 fc9c 	bl	8000a20 <__aeabi_dcmpeq>
 800f0e8:	4680      	mov	r8, r0
 800f0ea:	b158      	cbz	r0, 800f104 <_dtoa_r+0xdc>
 800f0ec:	2301      	movs	r3, #1
 800f0ee:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800f0f0:	6013      	str	r3, [r2, #0]
 800f0f2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800f0f4:	2b00      	cmp	r3, #0
 800f0f6:	f000 8559 	beq.w	800fbac <_dtoa_r+0xb84>
 800f0fa:	4888      	ldr	r0, [pc, #544]	; (800f31c <_dtoa_r+0x2f4>)
 800f0fc:	6018      	str	r0, [r3, #0]
 800f0fe:	1e43      	subs	r3, r0, #1
 800f100:	9308      	str	r3, [sp, #32]
 800f102:	e7df      	b.n	800f0c4 <_dtoa_r+0x9c>
 800f104:	ab16      	add	r3, sp, #88	; 0x58
 800f106:	9301      	str	r3, [sp, #4]
 800f108:	ab17      	add	r3, sp, #92	; 0x5c
 800f10a:	9300      	str	r3, [sp, #0]
 800f10c:	4628      	mov	r0, r5
 800f10e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800f112:	f001 f8c9 	bl	80102a8 <__d2b>
 800f116:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800f11a:	4682      	mov	sl, r0
 800f11c:	2c00      	cmp	r4, #0
 800f11e:	d07e      	beq.n	800f21e <_dtoa_r+0x1f6>
 800f120:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800f124:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f126:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800f12a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f12e:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 800f132:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800f136:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 800f13a:	2200      	movs	r2, #0
 800f13c:	4b78      	ldr	r3, [pc, #480]	; (800f320 <_dtoa_r+0x2f8>)
 800f13e:	f7f1 f84f 	bl	80001e0 <__aeabi_dsub>
 800f142:	a36b      	add	r3, pc, #428	; (adr r3, 800f2f0 <_dtoa_r+0x2c8>)
 800f144:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f148:	f7f1 fa02 	bl	8000550 <__aeabi_dmul>
 800f14c:	a36a      	add	r3, pc, #424	; (adr r3, 800f2f8 <_dtoa_r+0x2d0>)
 800f14e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f152:	f7f1 f847 	bl	80001e4 <__adddf3>
 800f156:	4606      	mov	r6, r0
 800f158:	4620      	mov	r0, r4
 800f15a:	460f      	mov	r7, r1
 800f15c:	f7f1 f98e 	bl	800047c <__aeabi_i2d>
 800f160:	a367      	add	r3, pc, #412	; (adr r3, 800f300 <_dtoa_r+0x2d8>)
 800f162:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f166:	f7f1 f9f3 	bl	8000550 <__aeabi_dmul>
 800f16a:	4602      	mov	r2, r0
 800f16c:	460b      	mov	r3, r1
 800f16e:	4630      	mov	r0, r6
 800f170:	4639      	mov	r1, r7
 800f172:	f7f1 f837 	bl	80001e4 <__adddf3>
 800f176:	4606      	mov	r6, r0
 800f178:	460f      	mov	r7, r1
 800f17a:	f7f1 fc99 	bl	8000ab0 <__aeabi_d2iz>
 800f17e:	2200      	movs	r2, #0
 800f180:	4681      	mov	r9, r0
 800f182:	2300      	movs	r3, #0
 800f184:	4630      	mov	r0, r6
 800f186:	4639      	mov	r1, r7
 800f188:	f7f1 fc54 	bl	8000a34 <__aeabi_dcmplt>
 800f18c:	b148      	cbz	r0, 800f1a2 <_dtoa_r+0x17a>
 800f18e:	4648      	mov	r0, r9
 800f190:	f7f1 f974 	bl	800047c <__aeabi_i2d>
 800f194:	4632      	mov	r2, r6
 800f196:	463b      	mov	r3, r7
 800f198:	f7f1 fc42 	bl	8000a20 <__aeabi_dcmpeq>
 800f19c:	b908      	cbnz	r0, 800f1a2 <_dtoa_r+0x17a>
 800f19e:	f109 39ff 	add.w	r9, r9, #4294967295
 800f1a2:	f1b9 0f16 	cmp.w	r9, #22
 800f1a6:	d857      	bhi.n	800f258 <_dtoa_r+0x230>
 800f1a8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800f1ac:	4b5d      	ldr	r3, [pc, #372]	; (800f324 <_dtoa_r+0x2fc>)
 800f1ae:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 800f1b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f1b6:	f7f1 fc3d 	bl	8000a34 <__aeabi_dcmplt>
 800f1ba:	2800      	cmp	r0, #0
 800f1bc:	d04e      	beq.n	800f25c <_dtoa_r+0x234>
 800f1be:	2300      	movs	r3, #0
 800f1c0:	f109 39ff 	add.w	r9, r9, #4294967295
 800f1c4:	930f      	str	r3, [sp, #60]	; 0x3c
 800f1c6:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800f1c8:	1b1c      	subs	r4, r3, r4
 800f1ca:	1e63      	subs	r3, r4, #1
 800f1cc:	9309      	str	r3, [sp, #36]	; 0x24
 800f1ce:	bf49      	itett	mi
 800f1d0:	f1c4 0301 	rsbmi	r3, r4, #1
 800f1d4:	2300      	movpl	r3, #0
 800f1d6:	9306      	strmi	r3, [sp, #24]
 800f1d8:	2300      	movmi	r3, #0
 800f1da:	bf54      	ite	pl
 800f1dc:	9306      	strpl	r3, [sp, #24]
 800f1de:	9309      	strmi	r3, [sp, #36]	; 0x24
 800f1e0:	f1b9 0f00 	cmp.w	r9, #0
 800f1e4:	db3c      	blt.n	800f260 <_dtoa_r+0x238>
 800f1e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f1e8:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800f1ec:	444b      	add	r3, r9
 800f1ee:	9309      	str	r3, [sp, #36]	; 0x24
 800f1f0:	2300      	movs	r3, #0
 800f1f2:	930a      	str	r3, [sp, #40]	; 0x28
 800f1f4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800f1f6:	2b09      	cmp	r3, #9
 800f1f8:	d86c      	bhi.n	800f2d4 <_dtoa_r+0x2ac>
 800f1fa:	2b05      	cmp	r3, #5
 800f1fc:	bfc4      	itt	gt
 800f1fe:	3b04      	subgt	r3, #4
 800f200:	9322      	strgt	r3, [sp, #136]	; 0x88
 800f202:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800f204:	bfc8      	it	gt
 800f206:	2400      	movgt	r4, #0
 800f208:	f1a3 0302 	sub.w	r3, r3, #2
 800f20c:	bfd8      	it	le
 800f20e:	2401      	movle	r4, #1
 800f210:	2b03      	cmp	r3, #3
 800f212:	f200 808b 	bhi.w	800f32c <_dtoa_r+0x304>
 800f216:	e8df f003 	tbb	[pc, r3]
 800f21a:	4f2d      	.short	0x4f2d
 800f21c:	5b4d      	.short	0x5b4d
 800f21e:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 800f222:	441c      	add	r4, r3
 800f224:	f204 4332 	addw	r3, r4, #1074	; 0x432
 800f228:	2b20      	cmp	r3, #32
 800f22a:	bfc3      	ittte	gt
 800f22c:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800f230:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 800f234:	fa09 f303 	lslgt.w	r3, r9, r3
 800f238:	f1c3 0320 	rsble	r3, r3, #32
 800f23c:	bfc6      	itte	gt
 800f23e:	fa26 f000 	lsrgt.w	r0, r6, r0
 800f242:	4318      	orrgt	r0, r3
 800f244:	fa06 f003 	lslle.w	r0, r6, r3
 800f248:	f7f1 f908 	bl	800045c <__aeabi_ui2d>
 800f24c:	2301      	movs	r3, #1
 800f24e:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 800f252:	3c01      	subs	r4, #1
 800f254:	9313      	str	r3, [sp, #76]	; 0x4c
 800f256:	e770      	b.n	800f13a <_dtoa_r+0x112>
 800f258:	2301      	movs	r3, #1
 800f25a:	e7b3      	b.n	800f1c4 <_dtoa_r+0x19c>
 800f25c:	900f      	str	r0, [sp, #60]	; 0x3c
 800f25e:	e7b2      	b.n	800f1c6 <_dtoa_r+0x19e>
 800f260:	9b06      	ldr	r3, [sp, #24]
 800f262:	eba3 0309 	sub.w	r3, r3, r9
 800f266:	9306      	str	r3, [sp, #24]
 800f268:	f1c9 0300 	rsb	r3, r9, #0
 800f26c:	930a      	str	r3, [sp, #40]	; 0x28
 800f26e:	2300      	movs	r3, #0
 800f270:	930e      	str	r3, [sp, #56]	; 0x38
 800f272:	e7bf      	b.n	800f1f4 <_dtoa_r+0x1cc>
 800f274:	2300      	movs	r3, #0
 800f276:	930b      	str	r3, [sp, #44]	; 0x2c
 800f278:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800f27a:	2b00      	cmp	r3, #0
 800f27c:	dc59      	bgt.n	800f332 <_dtoa_r+0x30a>
 800f27e:	f04f 0b01 	mov.w	fp, #1
 800f282:	465b      	mov	r3, fp
 800f284:	f8cd b008 	str.w	fp, [sp, #8]
 800f288:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 800f28c:	2200      	movs	r2, #0
 800f28e:	6a68      	ldr	r0, [r5, #36]	; 0x24
 800f290:	6042      	str	r2, [r0, #4]
 800f292:	2204      	movs	r2, #4
 800f294:	f102 0614 	add.w	r6, r2, #20
 800f298:	429e      	cmp	r6, r3
 800f29a:	6841      	ldr	r1, [r0, #4]
 800f29c:	d94f      	bls.n	800f33e <_dtoa_r+0x316>
 800f29e:	4628      	mov	r0, r5
 800f2a0:	f000 fcdc 	bl	800fc5c <_Balloc>
 800f2a4:	9008      	str	r0, [sp, #32]
 800f2a6:	2800      	cmp	r0, #0
 800f2a8:	d14d      	bne.n	800f346 <_dtoa_r+0x31e>
 800f2aa:	4602      	mov	r2, r0
 800f2ac:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800f2b0:	4b1d      	ldr	r3, [pc, #116]	; (800f328 <_dtoa_r+0x300>)
 800f2b2:	e6cd      	b.n	800f050 <_dtoa_r+0x28>
 800f2b4:	2301      	movs	r3, #1
 800f2b6:	e7de      	b.n	800f276 <_dtoa_r+0x24e>
 800f2b8:	2300      	movs	r3, #0
 800f2ba:	930b      	str	r3, [sp, #44]	; 0x2c
 800f2bc:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800f2be:	eb09 0b03 	add.w	fp, r9, r3
 800f2c2:	f10b 0301 	add.w	r3, fp, #1
 800f2c6:	2b01      	cmp	r3, #1
 800f2c8:	9302      	str	r3, [sp, #8]
 800f2ca:	bfb8      	it	lt
 800f2cc:	2301      	movlt	r3, #1
 800f2ce:	e7dd      	b.n	800f28c <_dtoa_r+0x264>
 800f2d0:	2301      	movs	r3, #1
 800f2d2:	e7f2      	b.n	800f2ba <_dtoa_r+0x292>
 800f2d4:	2401      	movs	r4, #1
 800f2d6:	2300      	movs	r3, #0
 800f2d8:	940b      	str	r4, [sp, #44]	; 0x2c
 800f2da:	9322      	str	r3, [sp, #136]	; 0x88
 800f2dc:	f04f 3bff 	mov.w	fp, #4294967295
 800f2e0:	2200      	movs	r2, #0
 800f2e2:	2312      	movs	r3, #18
 800f2e4:	f8cd b008 	str.w	fp, [sp, #8]
 800f2e8:	9223      	str	r2, [sp, #140]	; 0x8c
 800f2ea:	e7cf      	b.n	800f28c <_dtoa_r+0x264>
 800f2ec:	f3af 8000 	nop.w
 800f2f0:	636f4361 	.word	0x636f4361
 800f2f4:	3fd287a7 	.word	0x3fd287a7
 800f2f8:	8b60c8b3 	.word	0x8b60c8b3
 800f2fc:	3fc68a28 	.word	0x3fc68a28
 800f300:	509f79fb 	.word	0x509f79fb
 800f304:	3fd34413 	.word	0x3fd34413
 800f308:	08011d2d 	.word	0x08011d2d
 800f30c:	08011d44 	.word	0x08011d44
 800f310:	7ff00000 	.word	0x7ff00000
 800f314:	08011d29 	.word	0x08011d29
 800f318:	08011d20 	.word	0x08011d20
 800f31c:	08011cfd 	.word	0x08011cfd
 800f320:	3ff80000 	.word	0x3ff80000
 800f324:	08011e40 	.word	0x08011e40
 800f328:	08011da3 	.word	0x08011da3
 800f32c:	2301      	movs	r3, #1
 800f32e:	930b      	str	r3, [sp, #44]	; 0x2c
 800f330:	e7d4      	b.n	800f2dc <_dtoa_r+0x2b4>
 800f332:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 800f336:	465b      	mov	r3, fp
 800f338:	f8cd b008 	str.w	fp, [sp, #8]
 800f33c:	e7a6      	b.n	800f28c <_dtoa_r+0x264>
 800f33e:	3101      	adds	r1, #1
 800f340:	6041      	str	r1, [r0, #4]
 800f342:	0052      	lsls	r2, r2, #1
 800f344:	e7a6      	b.n	800f294 <_dtoa_r+0x26c>
 800f346:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800f348:	9a08      	ldr	r2, [sp, #32]
 800f34a:	601a      	str	r2, [r3, #0]
 800f34c:	9b02      	ldr	r3, [sp, #8]
 800f34e:	2b0e      	cmp	r3, #14
 800f350:	f200 80a8 	bhi.w	800f4a4 <_dtoa_r+0x47c>
 800f354:	2c00      	cmp	r4, #0
 800f356:	f000 80a5 	beq.w	800f4a4 <_dtoa_r+0x47c>
 800f35a:	f1b9 0f00 	cmp.w	r9, #0
 800f35e:	dd34      	ble.n	800f3ca <_dtoa_r+0x3a2>
 800f360:	4a9a      	ldr	r2, [pc, #616]	; (800f5cc <_dtoa_r+0x5a4>)
 800f362:	f009 030f 	and.w	r3, r9, #15
 800f366:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800f36a:	f419 7f80 	tst.w	r9, #256	; 0x100
 800f36e:	e9d3 3400 	ldrd	r3, r4, [r3]
 800f372:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800f376:	ea4f 1429 	mov.w	r4, r9, asr #4
 800f37a:	d016      	beq.n	800f3aa <_dtoa_r+0x382>
 800f37c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800f380:	4b93      	ldr	r3, [pc, #588]	; (800f5d0 <_dtoa_r+0x5a8>)
 800f382:	2703      	movs	r7, #3
 800f384:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800f388:	f7f1 fa0c 	bl	80007a4 <__aeabi_ddiv>
 800f38c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800f390:	f004 040f 	and.w	r4, r4, #15
 800f394:	4e8e      	ldr	r6, [pc, #568]	; (800f5d0 <_dtoa_r+0x5a8>)
 800f396:	b954      	cbnz	r4, 800f3ae <_dtoa_r+0x386>
 800f398:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800f39c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800f3a0:	f7f1 fa00 	bl	80007a4 <__aeabi_ddiv>
 800f3a4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800f3a8:	e029      	b.n	800f3fe <_dtoa_r+0x3d6>
 800f3aa:	2702      	movs	r7, #2
 800f3ac:	e7f2      	b.n	800f394 <_dtoa_r+0x36c>
 800f3ae:	07e1      	lsls	r1, r4, #31
 800f3b0:	d508      	bpl.n	800f3c4 <_dtoa_r+0x39c>
 800f3b2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800f3b6:	e9d6 2300 	ldrd	r2, r3, [r6]
 800f3ba:	f7f1 f8c9 	bl	8000550 <__aeabi_dmul>
 800f3be:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800f3c2:	3701      	adds	r7, #1
 800f3c4:	1064      	asrs	r4, r4, #1
 800f3c6:	3608      	adds	r6, #8
 800f3c8:	e7e5      	b.n	800f396 <_dtoa_r+0x36e>
 800f3ca:	f000 80a5 	beq.w	800f518 <_dtoa_r+0x4f0>
 800f3ce:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800f3d2:	f1c9 0400 	rsb	r4, r9, #0
 800f3d6:	4b7d      	ldr	r3, [pc, #500]	; (800f5cc <_dtoa_r+0x5a4>)
 800f3d8:	f004 020f 	and.w	r2, r4, #15
 800f3dc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f3e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f3e4:	f7f1 f8b4 	bl	8000550 <__aeabi_dmul>
 800f3e8:	2702      	movs	r7, #2
 800f3ea:	2300      	movs	r3, #0
 800f3ec:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800f3f0:	4e77      	ldr	r6, [pc, #476]	; (800f5d0 <_dtoa_r+0x5a8>)
 800f3f2:	1124      	asrs	r4, r4, #4
 800f3f4:	2c00      	cmp	r4, #0
 800f3f6:	f040 8084 	bne.w	800f502 <_dtoa_r+0x4da>
 800f3fa:	2b00      	cmp	r3, #0
 800f3fc:	d1d2      	bne.n	800f3a4 <_dtoa_r+0x37c>
 800f3fe:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f400:	2b00      	cmp	r3, #0
 800f402:	f000 808b 	beq.w	800f51c <_dtoa_r+0x4f4>
 800f406:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800f40a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800f40e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800f412:	2200      	movs	r2, #0
 800f414:	4b6f      	ldr	r3, [pc, #444]	; (800f5d4 <_dtoa_r+0x5ac>)
 800f416:	f7f1 fb0d 	bl	8000a34 <__aeabi_dcmplt>
 800f41a:	2800      	cmp	r0, #0
 800f41c:	d07e      	beq.n	800f51c <_dtoa_r+0x4f4>
 800f41e:	9b02      	ldr	r3, [sp, #8]
 800f420:	2b00      	cmp	r3, #0
 800f422:	d07b      	beq.n	800f51c <_dtoa_r+0x4f4>
 800f424:	f1bb 0f00 	cmp.w	fp, #0
 800f428:	dd38      	ble.n	800f49c <_dtoa_r+0x474>
 800f42a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800f42e:	2200      	movs	r2, #0
 800f430:	4b69      	ldr	r3, [pc, #420]	; (800f5d8 <_dtoa_r+0x5b0>)
 800f432:	f7f1 f88d 	bl	8000550 <__aeabi_dmul>
 800f436:	465c      	mov	r4, fp
 800f438:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800f43c:	f109 38ff 	add.w	r8, r9, #4294967295
 800f440:	3701      	adds	r7, #1
 800f442:	4638      	mov	r0, r7
 800f444:	f7f1 f81a 	bl	800047c <__aeabi_i2d>
 800f448:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f44c:	f7f1 f880 	bl	8000550 <__aeabi_dmul>
 800f450:	2200      	movs	r2, #0
 800f452:	4b62      	ldr	r3, [pc, #392]	; (800f5dc <_dtoa_r+0x5b4>)
 800f454:	f7f0 fec6 	bl	80001e4 <__adddf3>
 800f458:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800f45c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800f460:	9611      	str	r6, [sp, #68]	; 0x44
 800f462:	2c00      	cmp	r4, #0
 800f464:	d15d      	bne.n	800f522 <_dtoa_r+0x4fa>
 800f466:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800f46a:	2200      	movs	r2, #0
 800f46c:	4b5c      	ldr	r3, [pc, #368]	; (800f5e0 <_dtoa_r+0x5b8>)
 800f46e:	f7f0 feb7 	bl	80001e0 <__aeabi_dsub>
 800f472:	4602      	mov	r2, r0
 800f474:	460b      	mov	r3, r1
 800f476:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800f47a:	4633      	mov	r3, r6
 800f47c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800f47e:	f7f1 faf7 	bl	8000a70 <__aeabi_dcmpgt>
 800f482:	2800      	cmp	r0, #0
 800f484:	f040 829e 	bne.w	800f9c4 <_dtoa_r+0x99c>
 800f488:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800f48c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800f48e:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800f492:	f7f1 facf 	bl	8000a34 <__aeabi_dcmplt>
 800f496:	2800      	cmp	r0, #0
 800f498:	f040 8292 	bne.w	800f9c0 <_dtoa_r+0x998>
 800f49c:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 800f4a0:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800f4a4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800f4a6:	2b00      	cmp	r3, #0
 800f4a8:	f2c0 8153 	blt.w	800f752 <_dtoa_r+0x72a>
 800f4ac:	f1b9 0f0e 	cmp.w	r9, #14
 800f4b0:	f300 814f 	bgt.w	800f752 <_dtoa_r+0x72a>
 800f4b4:	4b45      	ldr	r3, [pc, #276]	; (800f5cc <_dtoa_r+0x5a4>)
 800f4b6:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 800f4ba:	e9d3 3400 	ldrd	r3, r4, [r3]
 800f4be:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800f4c2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800f4c4:	2b00      	cmp	r3, #0
 800f4c6:	f280 80db 	bge.w	800f680 <_dtoa_r+0x658>
 800f4ca:	9b02      	ldr	r3, [sp, #8]
 800f4cc:	2b00      	cmp	r3, #0
 800f4ce:	f300 80d7 	bgt.w	800f680 <_dtoa_r+0x658>
 800f4d2:	f040 8274 	bne.w	800f9be <_dtoa_r+0x996>
 800f4d6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800f4da:	2200      	movs	r2, #0
 800f4dc:	4b40      	ldr	r3, [pc, #256]	; (800f5e0 <_dtoa_r+0x5b8>)
 800f4de:	f7f1 f837 	bl	8000550 <__aeabi_dmul>
 800f4e2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f4e6:	f7f1 fab9 	bl	8000a5c <__aeabi_dcmpge>
 800f4ea:	9c02      	ldr	r4, [sp, #8]
 800f4ec:	4626      	mov	r6, r4
 800f4ee:	2800      	cmp	r0, #0
 800f4f0:	f040 824a 	bne.w	800f988 <_dtoa_r+0x960>
 800f4f4:	2331      	movs	r3, #49	; 0x31
 800f4f6:	9f08      	ldr	r7, [sp, #32]
 800f4f8:	f109 0901 	add.w	r9, r9, #1
 800f4fc:	f807 3b01 	strb.w	r3, [r7], #1
 800f500:	e246      	b.n	800f990 <_dtoa_r+0x968>
 800f502:	07e2      	lsls	r2, r4, #31
 800f504:	d505      	bpl.n	800f512 <_dtoa_r+0x4ea>
 800f506:	e9d6 2300 	ldrd	r2, r3, [r6]
 800f50a:	f7f1 f821 	bl	8000550 <__aeabi_dmul>
 800f50e:	2301      	movs	r3, #1
 800f510:	3701      	adds	r7, #1
 800f512:	1064      	asrs	r4, r4, #1
 800f514:	3608      	adds	r6, #8
 800f516:	e76d      	b.n	800f3f4 <_dtoa_r+0x3cc>
 800f518:	2702      	movs	r7, #2
 800f51a:	e770      	b.n	800f3fe <_dtoa_r+0x3d6>
 800f51c:	46c8      	mov	r8, r9
 800f51e:	9c02      	ldr	r4, [sp, #8]
 800f520:	e78f      	b.n	800f442 <_dtoa_r+0x41a>
 800f522:	9908      	ldr	r1, [sp, #32]
 800f524:	4b29      	ldr	r3, [pc, #164]	; (800f5cc <_dtoa_r+0x5a4>)
 800f526:	4421      	add	r1, r4
 800f528:	9112      	str	r1, [sp, #72]	; 0x48
 800f52a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800f52c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800f530:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800f534:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800f538:	2900      	cmp	r1, #0
 800f53a:	d055      	beq.n	800f5e8 <_dtoa_r+0x5c0>
 800f53c:	2000      	movs	r0, #0
 800f53e:	4929      	ldr	r1, [pc, #164]	; (800f5e4 <_dtoa_r+0x5bc>)
 800f540:	f7f1 f930 	bl	80007a4 <__aeabi_ddiv>
 800f544:	463b      	mov	r3, r7
 800f546:	4632      	mov	r2, r6
 800f548:	f7f0 fe4a 	bl	80001e0 <__aeabi_dsub>
 800f54c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800f550:	9f08      	ldr	r7, [sp, #32]
 800f552:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800f556:	f7f1 faab 	bl	8000ab0 <__aeabi_d2iz>
 800f55a:	4604      	mov	r4, r0
 800f55c:	f7f0 ff8e 	bl	800047c <__aeabi_i2d>
 800f560:	4602      	mov	r2, r0
 800f562:	460b      	mov	r3, r1
 800f564:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800f568:	f7f0 fe3a 	bl	80001e0 <__aeabi_dsub>
 800f56c:	4602      	mov	r2, r0
 800f56e:	460b      	mov	r3, r1
 800f570:	3430      	adds	r4, #48	; 0x30
 800f572:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800f576:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800f57a:	f807 4b01 	strb.w	r4, [r7], #1
 800f57e:	f7f1 fa59 	bl	8000a34 <__aeabi_dcmplt>
 800f582:	2800      	cmp	r0, #0
 800f584:	d174      	bne.n	800f670 <_dtoa_r+0x648>
 800f586:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f58a:	2000      	movs	r0, #0
 800f58c:	4911      	ldr	r1, [pc, #68]	; (800f5d4 <_dtoa_r+0x5ac>)
 800f58e:	f7f0 fe27 	bl	80001e0 <__aeabi_dsub>
 800f592:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800f596:	f7f1 fa4d 	bl	8000a34 <__aeabi_dcmplt>
 800f59a:	2800      	cmp	r0, #0
 800f59c:	f040 80b6 	bne.w	800f70c <_dtoa_r+0x6e4>
 800f5a0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800f5a2:	429f      	cmp	r7, r3
 800f5a4:	f43f af7a 	beq.w	800f49c <_dtoa_r+0x474>
 800f5a8:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800f5ac:	2200      	movs	r2, #0
 800f5ae:	4b0a      	ldr	r3, [pc, #40]	; (800f5d8 <_dtoa_r+0x5b0>)
 800f5b0:	f7f0 ffce 	bl	8000550 <__aeabi_dmul>
 800f5b4:	2200      	movs	r2, #0
 800f5b6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800f5ba:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800f5be:	4b06      	ldr	r3, [pc, #24]	; (800f5d8 <_dtoa_r+0x5b0>)
 800f5c0:	f7f0 ffc6 	bl	8000550 <__aeabi_dmul>
 800f5c4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800f5c8:	e7c3      	b.n	800f552 <_dtoa_r+0x52a>
 800f5ca:	bf00      	nop
 800f5cc:	08011e40 	.word	0x08011e40
 800f5d0:	08011e18 	.word	0x08011e18
 800f5d4:	3ff00000 	.word	0x3ff00000
 800f5d8:	40240000 	.word	0x40240000
 800f5dc:	401c0000 	.word	0x401c0000
 800f5e0:	40140000 	.word	0x40140000
 800f5e4:	3fe00000 	.word	0x3fe00000
 800f5e8:	4630      	mov	r0, r6
 800f5ea:	4639      	mov	r1, r7
 800f5ec:	f7f0 ffb0 	bl	8000550 <__aeabi_dmul>
 800f5f0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800f5f2:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800f5f6:	9c08      	ldr	r4, [sp, #32]
 800f5f8:	9314      	str	r3, [sp, #80]	; 0x50
 800f5fa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800f5fe:	f7f1 fa57 	bl	8000ab0 <__aeabi_d2iz>
 800f602:	9015      	str	r0, [sp, #84]	; 0x54
 800f604:	f7f0 ff3a 	bl	800047c <__aeabi_i2d>
 800f608:	4602      	mov	r2, r0
 800f60a:	460b      	mov	r3, r1
 800f60c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800f610:	f7f0 fde6 	bl	80001e0 <__aeabi_dsub>
 800f614:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f616:	4606      	mov	r6, r0
 800f618:	3330      	adds	r3, #48	; 0x30
 800f61a:	f804 3b01 	strb.w	r3, [r4], #1
 800f61e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800f620:	460f      	mov	r7, r1
 800f622:	429c      	cmp	r4, r3
 800f624:	f04f 0200 	mov.w	r2, #0
 800f628:	d124      	bne.n	800f674 <_dtoa_r+0x64c>
 800f62a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800f62e:	4bb3      	ldr	r3, [pc, #716]	; (800f8fc <_dtoa_r+0x8d4>)
 800f630:	f7f0 fdd8 	bl	80001e4 <__adddf3>
 800f634:	4602      	mov	r2, r0
 800f636:	460b      	mov	r3, r1
 800f638:	4630      	mov	r0, r6
 800f63a:	4639      	mov	r1, r7
 800f63c:	f7f1 fa18 	bl	8000a70 <__aeabi_dcmpgt>
 800f640:	2800      	cmp	r0, #0
 800f642:	d162      	bne.n	800f70a <_dtoa_r+0x6e2>
 800f644:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800f648:	2000      	movs	r0, #0
 800f64a:	49ac      	ldr	r1, [pc, #688]	; (800f8fc <_dtoa_r+0x8d4>)
 800f64c:	f7f0 fdc8 	bl	80001e0 <__aeabi_dsub>
 800f650:	4602      	mov	r2, r0
 800f652:	460b      	mov	r3, r1
 800f654:	4630      	mov	r0, r6
 800f656:	4639      	mov	r1, r7
 800f658:	f7f1 f9ec 	bl	8000a34 <__aeabi_dcmplt>
 800f65c:	2800      	cmp	r0, #0
 800f65e:	f43f af1d 	beq.w	800f49c <_dtoa_r+0x474>
 800f662:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800f664:	1e7b      	subs	r3, r7, #1
 800f666:	9314      	str	r3, [sp, #80]	; 0x50
 800f668:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 800f66c:	2b30      	cmp	r3, #48	; 0x30
 800f66e:	d0f8      	beq.n	800f662 <_dtoa_r+0x63a>
 800f670:	46c1      	mov	r9, r8
 800f672:	e03a      	b.n	800f6ea <_dtoa_r+0x6c2>
 800f674:	4ba2      	ldr	r3, [pc, #648]	; (800f900 <_dtoa_r+0x8d8>)
 800f676:	f7f0 ff6b 	bl	8000550 <__aeabi_dmul>
 800f67a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800f67e:	e7bc      	b.n	800f5fa <_dtoa_r+0x5d2>
 800f680:	9f08      	ldr	r7, [sp, #32]
 800f682:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800f686:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800f68a:	f7f1 f88b 	bl	80007a4 <__aeabi_ddiv>
 800f68e:	f7f1 fa0f 	bl	8000ab0 <__aeabi_d2iz>
 800f692:	4604      	mov	r4, r0
 800f694:	f7f0 fef2 	bl	800047c <__aeabi_i2d>
 800f698:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800f69c:	f7f0 ff58 	bl	8000550 <__aeabi_dmul>
 800f6a0:	f104 0630 	add.w	r6, r4, #48	; 0x30
 800f6a4:	460b      	mov	r3, r1
 800f6a6:	4602      	mov	r2, r0
 800f6a8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800f6ac:	f7f0 fd98 	bl	80001e0 <__aeabi_dsub>
 800f6b0:	f807 6b01 	strb.w	r6, [r7], #1
 800f6b4:	9e08      	ldr	r6, [sp, #32]
 800f6b6:	9b02      	ldr	r3, [sp, #8]
 800f6b8:	1bbe      	subs	r6, r7, r6
 800f6ba:	42b3      	cmp	r3, r6
 800f6bc:	d13a      	bne.n	800f734 <_dtoa_r+0x70c>
 800f6be:	4602      	mov	r2, r0
 800f6c0:	460b      	mov	r3, r1
 800f6c2:	f7f0 fd8f 	bl	80001e4 <__adddf3>
 800f6c6:	4602      	mov	r2, r0
 800f6c8:	460b      	mov	r3, r1
 800f6ca:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800f6ce:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800f6d2:	f7f1 f9cd 	bl	8000a70 <__aeabi_dcmpgt>
 800f6d6:	bb58      	cbnz	r0, 800f730 <_dtoa_r+0x708>
 800f6d8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800f6dc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f6e0:	f7f1 f99e 	bl	8000a20 <__aeabi_dcmpeq>
 800f6e4:	b108      	cbz	r0, 800f6ea <_dtoa_r+0x6c2>
 800f6e6:	07e1      	lsls	r1, r4, #31
 800f6e8:	d422      	bmi.n	800f730 <_dtoa_r+0x708>
 800f6ea:	4628      	mov	r0, r5
 800f6ec:	4651      	mov	r1, sl
 800f6ee:	f000 faf5 	bl	800fcdc <_Bfree>
 800f6f2:	2300      	movs	r3, #0
 800f6f4:	703b      	strb	r3, [r7, #0]
 800f6f6:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800f6f8:	f109 0001 	add.w	r0, r9, #1
 800f6fc:	6018      	str	r0, [r3, #0]
 800f6fe:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800f700:	2b00      	cmp	r3, #0
 800f702:	f43f acdf 	beq.w	800f0c4 <_dtoa_r+0x9c>
 800f706:	601f      	str	r7, [r3, #0]
 800f708:	e4dc      	b.n	800f0c4 <_dtoa_r+0x9c>
 800f70a:	4627      	mov	r7, r4
 800f70c:	463b      	mov	r3, r7
 800f70e:	461f      	mov	r7, r3
 800f710:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800f714:	2a39      	cmp	r2, #57	; 0x39
 800f716:	d107      	bne.n	800f728 <_dtoa_r+0x700>
 800f718:	9a08      	ldr	r2, [sp, #32]
 800f71a:	429a      	cmp	r2, r3
 800f71c:	d1f7      	bne.n	800f70e <_dtoa_r+0x6e6>
 800f71e:	2230      	movs	r2, #48	; 0x30
 800f720:	9908      	ldr	r1, [sp, #32]
 800f722:	f108 0801 	add.w	r8, r8, #1
 800f726:	700a      	strb	r2, [r1, #0]
 800f728:	781a      	ldrb	r2, [r3, #0]
 800f72a:	3201      	adds	r2, #1
 800f72c:	701a      	strb	r2, [r3, #0]
 800f72e:	e79f      	b.n	800f670 <_dtoa_r+0x648>
 800f730:	46c8      	mov	r8, r9
 800f732:	e7eb      	b.n	800f70c <_dtoa_r+0x6e4>
 800f734:	2200      	movs	r2, #0
 800f736:	4b72      	ldr	r3, [pc, #456]	; (800f900 <_dtoa_r+0x8d8>)
 800f738:	f7f0 ff0a 	bl	8000550 <__aeabi_dmul>
 800f73c:	4602      	mov	r2, r0
 800f73e:	460b      	mov	r3, r1
 800f740:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800f744:	2200      	movs	r2, #0
 800f746:	2300      	movs	r3, #0
 800f748:	f7f1 f96a 	bl	8000a20 <__aeabi_dcmpeq>
 800f74c:	2800      	cmp	r0, #0
 800f74e:	d098      	beq.n	800f682 <_dtoa_r+0x65a>
 800f750:	e7cb      	b.n	800f6ea <_dtoa_r+0x6c2>
 800f752:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800f754:	2a00      	cmp	r2, #0
 800f756:	f000 80cd 	beq.w	800f8f4 <_dtoa_r+0x8cc>
 800f75a:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800f75c:	2a01      	cmp	r2, #1
 800f75e:	f300 80af 	bgt.w	800f8c0 <_dtoa_r+0x898>
 800f762:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800f764:	2a00      	cmp	r2, #0
 800f766:	f000 80a7 	beq.w	800f8b8 <_dtoa_r+0x890>
 800f76a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800f76e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800f770:	9f06      	ldr	r7, [sp, #24]
 800f772:	9a06      	ldr	r2, [sp, #24]
 800f774:	2101      	movs	r1, #1
 800f776:	441a      	add	r2, r3
 800f778:	9206      	str	r2, [sp, #24]
 800f77a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f77c:	4628      	mov	r0, r5
 800f77e:	441a      	add	r2, r3
 800f780:	9209      	str	r2, [sp, #36]	; 0x24
 800f782:	f000 fb65 	bl	800fe50 <__i2b>
 800f786:	4606      	mov	r6, r0
 800f788:	2f00      	cmp	r7, #0
 800f78a:	dd0c      	ble.n	800f7a6 <_dtoa_r+0x77e>
 800f78c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f78e:	2b00      	cmp	r3, #0
 800f790:	dd09      	ble.n	800f7a6 <_dtoa_r+0x77e>
 800f792:	42bb      	cmp	r3, r7
 800f794:	bfa8      	it	ge
 800f796:	463b      	movge	r3, r7
 800f798:	9a06      	ldr	r2, [sp, #24]
 800f79a:	1aff      	subs	r7, r7, r3
 800f79c:	1ad2      	subs	r2, r2, r3
 800f79e:	9206      	str	r2, [sp, #24]
 800f7a0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f7a2:	1ad3      	subs	r3, r2, r3
 800f7a4:	9309      	str	r3, [sp, #36]	; 0x24
 800f7a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f7a8:	b1f3      	cbz	r3, 800f7e8 <_dtoa_r+0x7c0>
 800f7aa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f7ac:	2b00      	cmp	r3, #0
 800f7ae:	f000 80a9 	beq.w	800f904 <_dtoa_r+0x8dc>
 800f7b2:	2c00      	cmp	r4, #0
 800f7b4:	dd10      	ble.n	800f7d8 <_dtoa_r+0x7b0>
 800f7b6:	4631      	mov	r1, r6
 800f7b8:	4622      	mov	r2, r4
 800f7ba:	4628      	mov	r0, r5
 800f7bc:	f000 fc02 	bl	800ffc4 <__pow5mult>
 800f7c0:	4652      	mov	r2, sl
 800f7c2:	4601      	mov	r1, r0
 800f7c4:	4606      	mov	r6, r0
 800f7c6:	4628      	mov	r0, r5
 800f7c8:	f000 fb58 	bl	800fe7c <__multiply>
 800f7cc:	4680      	mov	r8, r0
 800f7ce:	4651      	mov	r1, sl
 800f7d0:	4628      	mov	r0, r5
 800f7d2:	f000 fa83 	bl	800fcdc <_Bfree>
 800f7d6:	46c2      	mov	sl, r8
 800f7d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f7da:	1b1a      	subs	r2, r3, r4
 800f7dc:	d004      	beq.n	800f7e8 <_dtoa_r+0x7c0>
 800f7de:	4651      	mov	r1, sl
 800f7e0:	4628      	mov	r0, r5
 800f7e2:	f000 fbef 	bl	800ffc4 <__pow5mult>
 800f7e6:	4682      	mov	sl, r0
 800f7e8:	2101      	movs	r1, #1
 800f7ea:	4628      	mov	r0, r5
 800f7ec:	f000 fb30 	bl	800fe50 <__i2b>
 800f7f0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f7f2:	4604      	mov	r4, r0
 800f7f4:	2b00      	cmp	r3, #0
 800f7f6:	f340 8087 	ble.w	800f908 <_dtoa_r+0x8e0>
 800f7fa:	461a      	mov	r2, r3
 800f7fc:	4601      	mov	r1, r0
 800f7fe:	4628      	mov	r0, r5
 800f800:	f000 fbe0 	bl	800ffc4 <__pow5mult>
 800f804:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800f806:	4604      	mov	r4, r0
 800f808:	2b01      	cmp	r3, #1
 800f80a:	f340 8080 	ble.w	800f90e <_dtoa_r+0x8e6>
 800f80e:	f04f 0800 	mov.w	r8, #0
 800f812:	6923      	ldr	r3, [r4, #16]
 800f814:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800f818:	6918      	ldr	r0, [r3, #16]
 800f81a:	f000 facb 	bl	800fdb4 <__hi0bits>
 800f81e:	f1c0 0020 	rsb	r0, r0, #32
 800f822:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f824:	4418      	add	r0, r3
 800f826:	f010 001f 	ands.w	r0, r0, #31
 800f82a:	f000 8092 	beq.w	800f952 <_dtoa_r+0x92a>
 800f82e:	f1c0 0320 	rsb	r3, r0, #32
 800f832:	2b04      	cmp	r3, #4
 800f834:	f340 808a 	ble.w	800f94c <_dtoa_r+0x924>
 800f838:	f1c0 001c 	rsb	r0, r0, #28
 800f83c:	9b06      	ldr	r3, [sp, #24]
 800f83e:	4407      	add	r7, r0
 800f840:	4403      	add	r3, r0
 800f842:	9306      	str	r3, [sp, #24]
 800f844:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f846:	4403      	add	r3, r0
 800f848:	9309      	str	r3, [sp, #36]	; 0x24
 800f84a:	9b06      	ldr	r3, [sp, #24]
 800f84c:	2b00      	cmp	r3, #0
 800f84e:	dd05      	ble.n	800f85c <_dtoa_r+0x834>
 800f850:	4651      	mov	r1, sl
 800f852:	461a      	mov	r2, r3
 800f854:	4628      	mov	r0, r5
 800f856:	f000 fc0f 	bl	8010078 <__lshift>
 800f85a:	4682      	mov	sl, r0
 800f85c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f85e:	2b00      	cmp	r3, #0
 800f860:	dd05      	ble.n	800f86e <_dtoa_r+0x846>
 800f862:	4621      	mov	r1, r4
 800f864:	461a      	mov	r2, r3
 800f866:	4628      	mov	r0, r5
 800f868:	f000 fc06 	bl	8010078 <__lshift>
 800f86c:	4604      	mov	r4, r0
 800f86e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f870:	2b00      	cmp	r3, #0
 800f872:	d070      	beq.n	800f956 <_dtoa_r+0x92e>
 800f874:	4621      	mov	r1, r4
 800f876:	4650      	mov	r0, sl
 800f878:	f000 fc6a 	bl	8010150 <__mcmp>
 800f87c:	2800      	cmp	r0, #0
 800f87e:	da6a      	bge.n	800f956 <_dtoa_r+0x92e>
 800f880:	2300      	movs	r3, #0
 800f882:	4651      	mov	r1, sl
 800f884:	220a      	movs	r2, #10
 800f886:	4628      	mov	r0, r5
 800f888:	f000 fa4a 	bl	800fd20 <__multadd>
 800f88c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f88e:	4682      	mov	sl, r0
 800f890:	f109 39ff 	add.w	r9, r9, #4294967295
 800f894:	2b00      	cmp	r3, #0
 800f896:	f000 8193 	beq.w	800fbc0 <_dtoa_r+0xb98>
 800f89a:	4631      	mov	r1, r6
 800f89c:	2300      	movs	r3, #0
 800f89e:	220a      	movs	r2, #10
 800f8a0:	4628      	mov	r0, r5
 800f8a2:	f000 fa3d 	bl	800fd20 <__multadd>
 800f8a6:	f1bb 0f00 	cmp.w	fp, #0
 800f8aa:	4606      	mov	r6, r0
 800f8ac:	f300 8093 	bgt.w	800f9d6 <_dtoa_r+0x9ae>
 800f8b0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800f8b2:	2b02      	cmp	r3, #2
 800f8b4:	dc57      	bgt.n	800f966 <_dtoa_r+0x93e>
 800f8b6:	e08e      	b.n	800f9d6 <_dtoa_r+0x9ae>
 800f8b8:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800f8ba:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800f8be:	e756      	b.n	800f76e <_dtoa_r+0x746>
 800f8c0:	9b02      	ldr	r3, [sp, #8]
 800f8c2:	1e5c      	subs	r4, r3, #1
 800f8c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f8c6:	42a3      	cmp	r3, r4
 800f8c8:	bfb7      	itett	lt
 800f8ca:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800f8cc:	1b1c      	subge	r4, r3, r4
 800f8ce:	1ae2      	sublt	r2, r4, r3
 800f8d0:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800f8d2:	bfbe      	ittt	lt
 800f8d4:	940a      	strlt	r4, [sp, #40]	; 0x28
 800f8d6:	189b      	addlt	r3, r3, r2
 800f8d8:	930e      	strlt	r3, [sp, #56]	; 0x38
 800f8da:	9b02      	ldr	r3, [sp, #8]
 800f8dc:	bfb8      	it	lt
 800f8de:	2400      	movlt	r4, #0
 800f8e0:	2b00      	cmp	r3, #0
 800f8e2:	bfbb      	ittet	lt
 800f8e4:	9b06      	ldrlt	r3, [sp, #24]
 800f8e6:	9a02      	ldrlt	r2, [sp, #8]
 800f8e8:	9f06      	ldrge	r7, [sp, #24]
 800f8ea:	1a9f      	sublt	r7, r3, r2
 800f8ec:	bfac      	ite	ge
 800f8ee:	9b02      	ldrge	r3, [sp, #8]
 800f8f0:	2300      	movlt	r3, #0
 800f8f2:	e73e      	b.n	800f772 <_dtoa_r+0x74a>
 800f8f4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800f8f6:	9f06      	ldr	r7, [sp, #24]
 800f8f8:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800f8fa:	e745      	b.n	800f788 <_dtoa_r+0x760>
 800f8fc:	3fe00000 	.word	0x3fe00000
 800f900:	40240000 	.word	0x40240000
 800f904:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f906:	e76a      	b.n	800f7de <_dtoa_r+0x7b6>
 800f908:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800f90a:	2b01      	cmp	r3, #1
 800f90c:	dc19      	bgt.n	800f942 <_dtoa_r+0x91a>
 800f90e:	9b04      	ldr	r3, [sp, #16]
 800f910:	b9bb      	cbnz	r3, 800f942 <_dtoa_r+0x91a>
 800f912:	9b05      	ldr	r3, [sp, #20]
 800f914:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f918:	b99b      	cbnz	r3, 800f942 <_dtoa_r+0x91a>
 800f91a:	9b05      	ldr	r3, [sp, #20]
 800f91c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800f920:	0d1b      	lsrs	r3, r3, #20
 800f922:	051b      	lsls	r3, r3, #20
 800f924:	b183      	cbz	r3, 800f948 <_dtoa_r+0x920>
 800f926:	f04f 0801 	mov.w	r8, #1
 800f92a:	9b06      	ldr	r3, [sp, #24]
 800f92c:	3301      	adds	r3, #1
 800f92e:	9306      	str	r3, [sp, #24]
 800f930:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f932:	3301      	adds	r3, #1
 800f934:	9309      	str	r3, [sp, #36]	; 0x24
 800f936:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f938:	2b00      	cmp	r3, #0
 800f93a:	f47f af6a 	bne.w	800f812 <_dtoa_r+0x7ea>
 800f93e:	2001      	movs	r0, #1
 800f940:	e76f      	b.n	800f822 <_dtoa_r+0x7fa>
 800f942:	f04f 0800 	mov.w	r8, #0
 800f946:	e7f6      	b.n	800f936 <_dtoa_r+0x90e>
 800f948:	4698      	mov	r8, r3
 800f94a:	e7f4      	b.n	800f936 <_dtoa_r+0x90e>
 800f94c:	f43f af7d 	beq.w	800f84a <_dtoa_r+0x822>
 800f950:	4618      	mov	r0, r3
 800f952:	301c      	adds	r0, #28
 800f954:	e772      	b.n	800f83c <_dtoa_r+0x814>
 800f956:	9b02      	ldr	r3, [sp, #8]
 800f958:	2b00      	cmp	r3, #0
 800f95a:	dc36      	bgt.n	800f9ca <_dtoa_r+0x9a2>
 800f95c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800f95e:	2b02      	cmp	r3, #2
 800f960:	dd33      	ble.n	800f9ca <_dtoa_r+0x9a2>
 800f962:	f8dd b008 	ldr.w	fp, [sp, #8]
 800f966:	f1bb 0f00 	cmp.w	fp, #0
 800f96a:	d10d      	bne.n	800f988 <_dtoa_r+0x960>
 800f96c:	4621      	mov	r1, r4
 800f96e:	465b      	mov	r3, fp
 800f970:	2205      	movs	r2, #5
 800f972:	4628      	mov	r0, r5
 800f974:	f000 f9d4 	bl	800fd20 <__multadd>
 800f978:	4601      	mov	r1, r0
 800f97a:	4604      	mov	r4, r0
 800f97c:	4650      	mov	r0, sl
 800f97e:	f000 fbe7 	bl	8010150 <__mcmp>
 800f982:	2800      	cmp	r0, #0
 800f984:	f73f adb6 	bgt.w	800f4f4 <_dtoa_r+0x4cc>
 800f988:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800f98a:	9f08      	ldr	r7, [sp, #32]
 800f98c:	ea6f 0903 	mvn.w	r9, r3
 800f990:	f04f 0800 	mov.w	r8, #0
 800f994:	4621      	mov	r1, r4
 800f996:	4628      	mov	r0, r5
 800f998:	f000 f9a0 	bl	800fcdc <_Bfree>
 800f99c:	2e00      	cmp	r6, #0
 800f99e:	f43f aea4 	beq.w	800f6ea <_dtoa_r+0x6c2>
 800f9a2:	f1b8 0f00 	cmp.w	r8, #0
 800f9a6:	d005      	beq.n	800f9b4 <_dtoa_r+0x98c>
 800f9a8:	45b0      	cmp	r8, r6
 800f9aa:	d003      	beq.n	800f9b4 <_dtoa_r+0x98c>
 800f9ac:	4641      	mov	r1, r8
 800f9ae:	4628      	mov	r0, r5
 800f9b0:	f000 f994 	bl	800fcdc <_Bfree>
 800f9b4:	4631      	mov	r1, r6
 800f9b6:	4628      	mov	r0, r5
 800f9b8:	f000 f990 	bl	800fcdc <_Bfree>
 800f9bc:	e695      	b.n	800f6ea <_dtoa_r+0x6c2>
 800f9be:	2400      	movs	r4, #0
 800f9c0:	4626      	mov	r6, r4
 800f9c2:	e7e1      	b.n	800f988 <_dtoa_r+0x960>
 800f9c4:	46c1      	mov	r9, r8
 800f9c6:	4626      	mov	r6, r4
 800f9c8:	e594      	b.n	800f4f4 <_dtoa_r+0x4cc>
 800f9ca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f9cc:	f8dd b008 	ldr.w	fp, [sp, #8]
 800f9d0:	2b00      	cmp	r3, #0
 800f9d2:	f000 80fc 	beq.w	800fbce <_dtoa_r+0xba6>
 800f9d6:	2f00      	cmp	r7, #0
 800f9d8:	dd05      	ble.n	800f9e6 <_dtoa_r+0x9be>
 800f9da:	4631      	mov	r1, r6
 800f9dc:	463a      	mov	r2, r7
 800f9de:	4628      	mov	r0, r5
 800f9e0:	f000 fb4a 	bl	8010078 <__lshift>
 800f9e4:	4606      	mov	r6, r0
 800f9e6:	f1b8 0f00 	cmp.w	r8, #0
 800f9ea:	d05c      	beq.n	800faa6 <_dtoa_r+0xa7e>
 800f9ec:	4628      	mov	r0, r5
 800f9ee:	6871      	ldr	r1, [r6, #4]
 800f9f0:	f000 f934 	bl	800fc5c <_Balloc>
 800f9f4:	4607      	mov	r7, r0
 800f9f6:	b928      	cbnz	r0, 800fa04 <_dtoa_r+0x9dc>
 800f9f8:	4602      	mov	r2, r0
 800f9fa:	f240 21ea 	movw	r1, #746	; 0x2ea
 800f9fe:	4b7e      	ldr	r3, [pc, #504]	; (800fbf8 <_dtoa_r+0xbd0>)
 800fa00:	f7ff bb26 	b.w	800f050 <_dtoa_r+0x28>
 800fa04:	6932      	ldr	r2, [r6, #16]
 800fa06:	f106 010c 	add.w	r1, r6, #12
 800fa0a:	3202      	adds	r2, #2
 800fa0c:	0092      	lsls	r2, r2, #2
 800fa0e:	300c      	adds	r0, #12
 800fa10:	f000 f90a 	bl	800fc28 <memcpy>
 800fa14:	2201      	movs	r2, #1
 800fa16:	4639      	mov	r1, r7
 800fa18:	4628      	mov	r0, r5
 800fa1a:	f000 fb2d 	bl	8010078 <__lshift>
 800fa1e:	46b0      	mov	r8, r6
 800fa20:	4606      	mov	r6, r0
 800fa22:	9b08      	ldr	r3, [sp, #32]
 800fa24:	3301      	adds	r3, #1
 800fa26:	9302      	str	r3, [sp, #8]
 800fa28:	9b08      	ldr	r3, [sp, #32]
 800fa2a:	445b      	add	r3, fp
 800fa2c:	930a      	str	r3, [sp, #40]	; 0x28
 800fa2e:	9b04      	ldr	r3, [sp, #16]
 800fa30:	f003 0301 	and.w	r3, r3, #1
 800fa34:	9309      	str	r3, [sp, #36]	; 0x24
 800fa36:	9b02      	ldr	r3, [sp, #8]
 800fa38:	4621      	mov	r1, r4
 800fa3a:	4650      	mov	r0, sl
 800fa3c:	f103 3bff 	add.w	fp, r3, #4294967295
 800fa40:	f7ff fa62 	bl	800ef08 <quorem>
 800fa44:	4603      	mov	r3, r0
 800fa46:	4641      	mov	r1, r8
 800fa48:	3330      	adds	r3, #48	; 0x30
 800fa4a:	9004      	str	r0, [sp, #16]
 800fa4c:	4650      	mov	r0, sl
 800fa4e:	930b      	str	r3, [sp, #44]	; 0x2c
 800fa50:	f000 fb7e 	bl	8010150 <__mcmp>
 800fa54:	4632      	mov	r2, r6
 800fa56:	9006      	str	r0, [sp, #24]
 800fa58:	4621      	mov	r1, r4
 800fa5a:	4628      	mov	r0, r5
 800fa5c:	f000 fb94 	bl	8010188 <__mdiff>
 800fa60:	68c2      	ldr	r2, [r0, #12]
 800fa62:	4607      	mov	r7, r0
 800fa64:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800fa66:	bb02      	cbnz	r2, 800faaa <_dtoa_r+0xa82>
 800fa68:	4601      	mov	r1, r0
 800fa6a:	4650      	mov	r0, sl
 800fa6c:	f000 fb70 	bl	8010150 <__mcmp>
 800fa70:	4602      	mov	r2, r0
 800fa72:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800fa74:	4639      	mov	r1, r7
 800fa76:	4628      	mov	r0, r5
 800fa78:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 800fa7c:	f000 f92e 	bl	800fcdc <_Bfree>
 800fa80:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800fa82:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800fa84:	9f02      	ldr	r7, [sp, #8]
 800fa86:	ea43 0102 	orr.w	r1, r3, r2
 800fa8a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fa8c:	430b      	orrs	r3, r1
 800fa8e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800fa90:	d10d      	bne.n	800faae <_dtoa_r+0xa86>
 800fa92:	2b39      	cmp	r3, #57	; 0x39
 800fa94:	d027      	beq.n	800fae6 <_dtoa_r+0xabe>
 800fa96:	9a06      	ldr	r2, [sp, #24]
 800fa98:	2a00      	cmp	r2, #0
 800fa9a:	dd01      	ble.n	800faa0 <_dtoa_r+0xa78>
 800fa9c:	9b04      	ldr	r3, [sp, #16]
 800fa9e:	3331      	adds	r3, #49	; 0x31
 800faa0:	f88b 3000 	strb.w	r3, [fp]
 800faa4:	e776      	b.n	800f994 <_dtoa_r+0x96c>
 800faa6:	4630      	mov	r0, r6
 800faa8:	e7b9      	b.n	800fa1e <_dtoa_r+0x9f6>
 800faaa:	2201      	movs	r2, #1
 800faac:	e7e2      	b.n	800fa74 <_dtoa_r+0xa4c>
 800faae:	9906      	ldr	r1, [sp, #24]
 800fab0:	2900      	cmp	r1, #0
 800fab2:	db04      	blt.n	800fabe <_dtoa_r+0xa96>
 800fab4:	9822      	ldr	r0, [sp, #136]	; 0x88
 800fab6:	4301      	orrs	r1, r0
 800fab8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800faba:	4301      	orrs	r1, r0
 800fabc:	d120      	bne.n	800fb00 <_dtoa_r+0xad8>
 800fabe:	2a00      	cmp	r2, #0
 800fac0:	ddee      	ble.n	800faa0 <_dtoa_r+0xa78>
 800fac2:	4651      	mov	r1, sl
 800fac4:	2201      	movs	r2, #1
 800fac6:	4628      	mov	r0, r5
 800fac8:	9302      	str	r3, [sp, #8]
 800faca:	f000 fad5 	bl	8010078 <__lshift>
 800face:	4621      	mov	r1, r4
 800fad0:	4682      	mov	sl, r0
 800fad2:	f000 fb3d 	bl	8010150 <__mcmp>
 800fad6:	2800      	cmp	r0, #0
 800fad8:	9b02      	ldr	r3, [sp, #8]
 800fada:	dc02      	bgt.n	800fae2 <_dtoa_r+0xaba>
 800fadc:	d1e0      	bne.n	800faa0 <_dtoa_r+0xa78>
 800fade:	07da      	lsls	r2, r3, #31
 800fae0:	d5de      	bpl.n	800faa0 <_dtoa_r+0xa78>
 800fae2:	2b39      	cmp	r3, #57	; 0x39
 800fae4:	d1da      	bne.n	800fa9c <_dtoa_r+0xa74>
 800fae6:	2339      	movs	r3, #57	; 0x39
 800fae8:	f88b 3000 	strb.w	r3, [fp]
 800faec:	463b      	mov	r3, r7
 800faee:	461f      	mov	r7, r3
 800faf0:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 800faf4:	3b01      	subs	r3, #1
 800faf6:	2a39      	cmp	r2, #57	; 0x39
 800faf8:	d050      	beq.n	800fb9c <_dtoa_r+0xb74>
 800fafa:	3201      	adds	r2, #1
 800fafc:	701a      	strb	r2, [r3, #0]
 800fafe:	e749      	b.n	800f994 <_dtoa_r+0x96c>
 800fb00:	2a00      	cmp	r2, #0
 800fb02:	dd03      	ble.n	800fb0c <_dtoa_r+0xae4>
 800fb04:	2b39      	cmp	r3, #57	; 0x39
 800fb06:	d0ee      	beq.n	800fae6 <_dtoa_r+0xabe>
 800fb08:	3301      	adds	r3, #1
 800fb0a:	e7c9      	b.n	800faa0 <_dtoa_r+0xa78>
 800fb0c:	9a02      	ldr	r2, [sp, #8]
 800fb0e:	990a      	ldr	r1, [sp, #40]	; 0x28
 800fb10:	f802 3c01 	strb.w	r3, [r2, #-1]
 800fb14:	428a      	cmp	r2, r1
 800fb16:	d02a      	beq.n	800fb6e <_dtoa_r+0xb46>
 800fb18:	4651      	mov	r1, sl
 800fb1a:	2300      	movs	r3, #0
 800fb1c:	220a      	movs	r2, #10
 800fb1e:	4628      	mov	r0, r5
 800fb20:	f000 f8fe 	bl	800fd20 <__multadd>
 800fb24:	45b0      	cmp	r8, r6
 800fb26:	4682      	mov	sl, r0
 800fb28:	f04f 0300 	mov.w	r3, #0
 800fb2c:	f04f 020a 	mov.w	r2, #10
 800fb30:	4641      	mov	r1, r8
 800fb32:	4628      	mov	r0, r5
 800fb34:	d107      	bne.n	800fb46 <_dtoa_r+0xb1e>
 800fb36:	f000 f8f3 	bl	800fd20 <__multadd>
 800fb3a:	4680      	mov	r8, r0
 800fb3c:	4606      	mov	r6, r0
 800fb3e:	9b02      	ldr	r3, [sp, #8]
 800fb40:	3301      	adds	r3, #1
 800fb42:	9302      	str	r3, [sp, #8]
 800fb44:	e777      	b.n	800fa36 <_dtoa_r+0xa0e>
 800fb46:	f000 f8eb 	bl	800fd20 <__multadd>
 800fb4a:	4631      	mov	r1, r6
 800fb4c:	4680      	mov	r8, r0
 800fb4e:	2300      	movs	r3, #0
 800fb50:	220a      	movs	r2, #10
 800fb52:	4628      	mov	r0, r5
 800fb54:	f000 f8e4 	bl	800fd20 <__multadd>
 800fb58:	4606      	mov	r6, r0
 800fb5a:	e7f0      	b.n	800fb3e <_dtoa_r+0xb16>
 800fb5c:	f1bb 0f00 	cmp.w	fp, #0
 800fb60:	bfcc      	ite	gt
 800fb62:	465f      	movgt	r7, fp
 800fb64:	2701      	movle	r7, #1
 800fb66:	f04f 0800 	mov.w	r8, #0
 800fb6a:	9a08      	ldr	r2, [sp, #32]
 800fb6c:	4417      	add	r7, r2
 800fb6e:	4651      	mov	r1, sl
 800fb70:	2201      	movs	r2, #1
 800fb72:	4628      	mov	r0, r5
 800fb74:	9302      	str	r3, [sp, #8]
 800fb76:	f000 fa7f 	bl	8010078 <__lshift>
 800fb7a:	4621      	mov	r1, r4
 800fb7c:	4682      	mov	sl, r0
 800fb7e:	f000 fae7 	bl	8010150 <__mcmp>
 800fb82:	2800      	cmp	r0, #0
 800fb84:	dcb2      	bgt.n	800faec <_dtoa_r+0xac4>
 800fb86:	d102      	bne.n	800fb8e <_dtoa_r+0xb66>
 800fb88:	9b02      	ldr	r3, [sp, #8]
 800fb8a:	07db      	lsls	r3, r3, #31
 800fb8c:	d4ae      	bmi.n	800faec <_dtoa_r+0xac4>
 800fb8e:	463b      	mov	r3, r7
 800fb90:	461f      	mov	r7, r3
 800fb92:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800fb96:	2a30      	cmp	r2, #48	; 0x30
 800fb98:	d0fa      	beq.n	800fb90 <_dtoa_r+0xb68>
 800fb9a:	e6fb      	b.n	800f994 <_dtoa_r+0x96c>
 800fb9c:	9a08      	ldr	r2, [sp, #32]
 800fb9e:	429a      	cmp	r2, r3
 800fba0:	d1a5      	bne.n	800faee <_dtoa_r+0xac6>
 800fba2:	2331      	movs	r3, #49	; 0x31
 800fba4:	f109 0901 	add.w	r9, r9, #1
 800fba8:	7013      	strb	r3, [r2, #0]
 800fbaa:	e6f3      	b.n	800f994 <_dtoa_r+0x96c>
 800fbac:	4b13      	ldr	r3, [pc, #76]	; (800fbfc <_dtoa_r+0xbd4>)
 800fbae:	f7ff baa7 	b.w	800f100 <_dtoa_r+0xd8>
 800fbb2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800fbb4:	2b00      	cmp	r3, #0
 800fbb6:	f47f aa80 	bne.w	800f0ba <_dtoa_r+0x92>
 800fbba:	4b11      	ldr	r3, [pc, #68]	; (800fc00 <_dtoa_r+0xbd8>)
 800fbbc:	f7ff baa0 	b.w	800f100 <_dtoa_r+0xd8>
 800fbc0:	f1bb 0f00 	cmp.w	fp, #0
 800fbc4:	dc03      	bgt.n	800fbce <_dtoa_r+0xba6>
 800fbc6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800fbc8:	2b02      	cmp	r3, #2
 800fbca:	f73f aecc 	bgt.w	800f966 <_dtoa_r+0x93e>
 800fbce:	9f08      	ldr	r7, [sp, #32]
 800fbd0:	4621      	mov	r1, r4
 800fbd2:	4650      	mov	r0, sl
 800fbd4:	f7ff f998 	bl	800ef08 <quorem>
 800fbd8:	9a08      	ldr	r2, [sp, #32]
 800fbda:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800fbde:	f807 3b01 	strb.w	r3, [r7], #1
 800fbe2:	1aba      	subs	r2, r7, r2
 800fbe4:	4593      	cmp	fp, r2
 800fbe6:	ddb9      	ble.n	800fb5c <_dtoa_r+0xb34>
 800fbe8:	4651      	mov	r1, sl
 800fbea:	2300      	movs	r3, #0
 800fbec:	220a      	movs	r2, #10
 800fbee:	4628      	mov	r0, r5
 800fbf0:	f000 f896 	bl	800fd20 <__multadd>
 800fbf4:	4682      	mov	sl, r0
 800fbf6:	e7eb      	b.n	800fbd0 <_dtoa_r+0xba8>
 800fbf8:	08011da3 	.word	0x08011da3
 800fbfc:	08011cfc 	.word	0x08011cfc
 800fc00:	08011d20 	.word	0x08011d20

0800fc04 <_localeconv_r>:
 800fc04:	4800      	ldr	r0, [pc, #0]	; (800fc08 <_localeconv_r+0x4>)
 800fc06:	4770      	bx	lr
 800fc08:	200002fc 	.word	0x200002fc

0800fc0c <memchr>:
 800fc0c:	4603      	mov	r3, r0
 800fc0e:	b510      	push	{r4, lr}
 800fc10:	b2c9      	uxtb	r1, r1
 800fc12:	4402      	add	r2, r0
 800fc14:	4293      	cmp	r3, r2
 800fc16:	4618      	mov	r0, r3
 800fc18:	d101      	bne.n	800fc1e <memchr+0x12>
 800fc1a:	2000      	movs	r0, #0
 800fc1c:	e003      	b.n	800fc26 <memchr+0x1a>
 800fc1e:	7804      	ldrb	r4, [r0, #0]
 800fc20:	3301      	adds	r3, #1
 800fc22:	428c      	cmp	r4, r1
 800fc24:	d1f6      	bne.n	800fc14 <memchr+0x8>
 800fc26:	bd10      	pop	{r4, pc}

0800fc28 <memcpy>:
 800fc28:	440a      	add	r2, r1
 800fc2a:	4291      	cmp	r1, r2
 800fc2c:	f100 33ff 	add.w	r3, r0, #4294967295
 800fc30:	d100      	bne.n	800fc34 <memcpy+0xc>
 800fc32:	4770      	bx	lr
 800fc34:	b510      	push	{r4, lr}
 800fc36:	f811 4b01 	ldrb.w	r4, [r1], #1
 800fc3a:	4291      	cmp	r1, r2
 800fc3c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800fc40:	d1f9      	bne.n	800fc36 <memcpy+0xe>
 800fc42:	bd10      	pop	{r4, pc}

0800fc44 <__malloc_lock>:
 800fc44:	4801      	ldr	r0, [pc, #4]	; (800fc4c <__malloc_lock+0x8>)
 800fc46:	f000 bd4c 	b.w	80106e2 <__retarget_lock_acquire_recursive>
 800fc4a:	bf00      	nop
 800fc4c:	20002178 	.word	0x20002178

0800fc50 <__malloc_unlock>:
 800fc50:	4801      	ldr	r0, [pc, #4]	; (800fc58 <__malloc_unlock+0x8>)
 800fc52:	f000 bd47 	b.w	80106e4 <__retarget_lock_release_recursive>
 800fc56:	bf00      	nop
 800fc58:	20002178 	.word	0x20002178

0800fc5c <_Balloc>:
 800fc5c:	b570      	push	{r4, r5, r6, lr}
 800fc5e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800fc60:	4604      	mov	r4, r0
 800fc62:	460d      	mov	r5, r1
 800fc64:	b976      	cbnz	r6, 800fc84 <_Balloc+0x28>
 800fc66:	2010      	movs	r0, #16
 800fc68:	f7fe fbea 	bl	800e440 <malloc>
 800fc6c:	4602      	mov	r2, r0
 800fc6e:	6260      	str	r0, [r4, #36]	; 0x24
 800fc70:	b920      	cbnz	r0, 800fc7c <_Balloc+0x20>
 800fc72:	2166      	movs	r1, #102	; 0x66
 800fc74:	4b17      	ldr	r3, [pc, #92]	; (800fcd4 <_Balloc+0x78>)
 800fc76:	4818      	ldr	r0, [pc, #96]	; (800fcd8 <_Balloc+0x7c>)
 800fc78:	f000 fd02 	bl	8010680 <__assert_func>
 800fc7c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800fc80:	6006      	str	r6, [r0, #0]
 800fc82:	60c6      	str	r6, [r0, #12]
 800fc84:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800fc86:	68f3      	ldr	r3, [r6, #12]
 800fc88:	b183      	cbz	r3, 800fcac <_Balloc+0x50>
 800fc8a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800fc8c:	68db      	ldr	r3, [r3, #12]
 800fc8e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800fc92:	b9b8      	cbnz	r0, 800fcc4 <_Balloc+0x68>
 800fc94:	2101      	movs	r1, #1
 800fc96:	fa01 f605 	lsl.w	r6, r1, r5
 800fc9a:	1d72      	adds	r2, r6, #5
 800fc9c:	4620      	mov	r0, r4
 800fc9e:	0092      	lsls	r2, r2, #2
 800fca0:	f000 fb5e 	bl	8010360 <_calloc_r>
 800fca4:	b160      	cbz	r0, 800fcc0 <_Balloc+0x64>
 800fca6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800fcaa:	e00e      	b.n	800fcca <_Balloc+0x6e>
 800fcac:	2221      	movs	r2, #33	; 0x21
 800fcae:	2104      	movs	r1, #4
 800fcb0:	4620      	mov	r0, r4
 800fcb2:	f000 fb55 	bl	8010360 <_calloc_r>
 800fcb6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800fcb8:	60f0      	str	r0, [r6, #12]
 800fcba:	68db      	ldr	r3, [r3, #12]
 800fcbc:	2b00      	cmp	r3, #0
 800fcbe:	d1e4      	bne.n	800fc8a <_Balloc+0x2e>
 800fcc0:	2000      	movs	r0, #0
 800fcc2:	bd70      	pop	{r4, r5, r6, pc}
 800fcc4:	6802      	ldr	r2, [r0, #0]
 800fcc6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800fcca:	2300      	movs	r3, #0
 800fccc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800fcd0:	e7f7      	b.n	800fcc2 <_Balloc+0x66>
 800fcd2:	bf00      	nop
 800fcd4:	08011d2d 	.word	0x08011d2d
 800fcd8:	08011db4 	.word	0x08011db4

0800fcdc <_Bfree>:
 800fcdc:	b570      	push	{r4, r5, r6, lr}
 800fcde:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800fce0:	4605      	mov	r5, r0
 800fce2:	460c      	mov	r4, r1
 800fce4:	b976      	cbnz	r6, 800fd04 <_Bfree+0x28>
 800fce6:	2010      	movs	r0, #16
 800fce8:	f7fe fbaa 	bl	800e440 <malloc>
 800fcec:	4602      	mov	r2, r0
 800fcee:	6268      	str	r0, [r5, #36]	; 0x24
 800fcf0:	b920      	cbnz	r0, 800fcfc <_Bfree+0x20>
 800fcf2:	218a      	movs	r1, #138	; 0x8a
 800fcf4:	4b08      	ldr	r3, [pc, #32]	; (800fd18 <_Bfree+0x3c>)
 800fcf6:	4809      	ldr	r0, [pc, #36]	; (800fd1c <_Bfree+0x40>)
 800fcf8:	f000 fcc2 	bl	8010680 <__assert_func>
 800fcfc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800fd00:	6006      	str	r6, [r0, #0]
 800fd02:	60c6      	str	r6, [r0, #12]
 800fd04:	b13c      	cbz	r4, 800fd16 <_Bfree+0x3a>
 800fd06:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800fd08:	6862      	ldr	r2, [r4, #4]
 800fd0a:	68db      	ldr	r3, [r3, #12]
 800fd0c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800fd10:	6021      	str	r1, [r4, #0]
 800fd12:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800fd16:	bd70      	pop	{r4, r5, r6, pc}
 800fd18:	08011d2d 	.word	0x08011d2d
 800fd1c:	08011db4 	.word	0x08011db4

0800fd20 <__multadd>:
 800fd20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fd24:	4698      	mov	r8, r3
 800fd26:	460c      	mov	r4, r1
 800fd28:	2300      	movs	r3, #0
 800fd2a:	690e      	ldr	r6, [r1, #16]
 800fd2c:	4607      	mov	r7, r0
 800fd2e:	f101 0014 	add.w	r0, r1, #20
 800fd32:	6805      	ldr	r5, [r0, #0]
 800fd34:	3301      	adds	r3, #1
 800fd36:	b2a9      	uxth	r1, r5
 800fd38:	fb02 8101 	mla	r1, r2, r1, r8
 800fd3c:	0c2d      	lsrs	r5, r5, #16
 800fd3e:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800fd42:	fb02 c505 	mla	r5, r2, r5, ip
 800fd46:	b289      	uxth	r1, r1
 800fd48:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800fd4c:	429e      	cmp	r6, r3
 800fd4e:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800fd52:	f840 1b04 	str.w	r1, [r0], #4
 800fd56:	dcec      	bgt.n	800fd32 <__multadd+0x12>
 800fd58:	f1b8 0f00 	cmp.w	r8, #0
 800fd5c:	d022      	beq.n	800fda4 <__multadd+0x84>
 800fd5e:	68a3      	ldr	r3, [r4, #8]
 800fd60:	42b3      	cmp	r3, r6
 800fd62:	dc19      	bgt.n	800fd98 <__multadd+0x78>
 800fd64:	6861      	ldr	r1, [r4, #4]
 800fd66:	4638      	mov	r0, r7
 800fd68:	3101      	adds	r1, #1
 800fd6a:	f7ff ff77 	bl	800fc5c <_Balloc>
 800fd6e:	4605      	mov	r5, r0
 800fd70:	b928      	cbnz	r0, 800fd7e <__multadd+0x5e>
 800fd72:	4602      	mov	r2, r0
 800fd74:	21b5      	movs	r1, #181	; 0xb5
 800fd76:	4b0d      	ldr	r3, [pc, #52]	; (800fdac <__multadd+0x8c>)
 800fd78:	480d      	ldr	r0, [pc, #52]	; (800fdb0 <__multadd+0x90>)
 800fd7a:	f000 fc81 	bl	8010680 <__assert_func>
 800fd7e:	6922      	ldr	r2, [r4, #16]
 800fd80:	f104 010c 	add.w	r1, r4, #12
 800fd84:	3202      	adds	r2, #2
 800fd86:	0092      	lsls	r2, r2, #2
 800fd88:	300c      	adds	r0, #12
 800fd8a:	f7ff ff4d 	bl	800fc28 <memcpy>
 800fd8e:	4621      	mov	r1, r4
 800fd90:	4638      	mov	r0, r7
 800fd92:	f7ff ffa3 	bl	800fcdc <_Bfree>
 800fd96:	462c      	mov	r4, r5
 800fd98:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800fd9c:	3601      	adds	r6, #1
 800fd9e:	f8c3 8014 	str.w	r8, [r3, #20]
 800fda2:	6126      	str	r6, [r4, #16]
 800fda4:	4620      	mov	r0, r4
 800fda6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fdaa:	bf00      	nop
 800fdac:	08011da3 	.word	0x08011da3
 800fdb0:	08011db4 	.word	0x08011db4

0800fdb4 <__hi0bits>:
 800fdb4:	0c02      	lsrs	r2, r0, #16
 800fdb6:	0412      	lsls	r2, r2, #16
 800fdb8:	4603      	mov	r3, r0
 800fdba:	b9ca      	cbnz	r2, 800fdf0 <__hi0bits+0x3c>
 800fdbc:	0403      	lsls	r3, r0, #16
 800fdbe:	2010      	movs	r0, #16
 800fdc0:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800fdc4:	bf04      	itt	eq
 800fdc6:	021b      	lsleq	r3, r3, #8
 800fdc8:	3008      	addeq	r0, #8
 800fdca:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800fdce:	bf04      	itt	eq
 800fdd0:	011b      	lsleq	r3, r3, #4
 800fdd2:	3004      	addeq	r0, #4
 800fdd4:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800fdd8:	bf04      	itt	eq
 800fdda:	009b      	lsleq	r3, r3, #2
 800fddc:	3002      	addeq	r0, #2
 800fdde:	2b00      	cmp	r3, #0
 800fde0:	db05      	blt.n	800fdee <__hi0bits+0x3a>
 800fde2:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800fde6:	f100 0001 	add.w	r0, r0, #1
 800fdea:	bf08      	it	eq
 800fdec:	2020      	moveq	r0, #32
 800fdee:	4770      	bx	lr
 800fdf0:	2000      	movs	r0, #0
 800fdf2:	e7e5      	b.n	800fdc0 <__hi0bits+0xc>

0800fdf4 <__lo0bits>:
 800fdf4:	6803      	ldr	r3, [r0, #0]
 800fdf6:	4602      	mov	r2, r0
 800fdf8:	f013 0007 	ands.w	r0, r3, #7
 800fdfc:	d00b      	beq.n	800fe16 <__lo0bits+0x22>
 800fdfe:	07d9      	lsls	r1, r3, #31
 800fe00:	d422      	bmi.n	800fe48 <__lo0bits+0x54>
 800fe02:	0798      	lsls	r0, r3, #30
 800fe04:	bf49      	itett	mi
 800fe06:	085b      	lsrmi	r3, r3, #1
 800fe08:	089b      	lsrpl	r3, r3, #2
 800fe0a:	2001      	movmi	r0, #1
 800fe0c:	6013      	strmi	r3, [r2, #0]
 800fe0e:	bf5c      	itt	pl
 800fe10:	2002      	movpl	r0, #2
 800fe12:	6013      	strpl	r3, [r2, #0]
 800fe14:	4770      	bx	lr
 800fe16:	b299      	uxth	r1, r3
 800fe18:	b909      	cbnz	r1, 800fe1e <__lo0bits+0x2a>
 800fe1a:	2010      	movs	r0, #16
 800fe1c:	0c1b      	lsrs	r3, r3, #16
 800fe1e:	f013 0fff 	tst.w	r3, #255	; 0xff
 800fe22:	bf04      	itt	eq
 800fe24:	0a1b      	lsreq	r3, r3, #8
 800fe26:	3008      	addeq	r0, #8
 800fe28:	0719      	lsls	r1, r3, #28
 800fe2a:	bf04      	itt	eq
 800fe2c:	091b      	lsreq	r3, r3, #4
 800fe2e:	3004      	addeq	r0, #4
 800fe30:	0799      	lsls	r1, r3, #30
 800fe32:	bf04      	itt	eq
 800fe34:	089b      	lsreq	r3, r3, #2
 800fe36:	3002      	addeq	r0, #2
 800fe38:	07d9      	lsls	r1, r3, #31
 800fe3a:	d403      	bmi.n	800fe44 <__lo0bits+0x50>
 800fe3c:	085b      	lsrs	r3, r3, #1
 800fe3e:	f100 0001 	add.w	r0, r0, #1
 800fe42:	d003      	beq.n	800fe4c <__lo0bits+0x58>
 800fe44:	6013      	str	r3, [r2, #0]
 800fe46:	4770      	bx	lr
 800fe48:	2000      	movs	r0, #0
 800fe4a:	4770      	bx	lr
 800fe4c:	2020      	movs	r0, #32
 800fe4e:	4770      	bx	lr

0800fe50 <__i2b>:
 800fe50:	b510      	push	{r4, lr}
 800fe52:	460c      	mov	r4, r1
 800fe54:	2101      	movs	r1, #1
 800fe56:	f7ff ff01 	bl	800fc5c <_Balloc>
 800fe5a:	4602      	mov	r2, r0
 800fe5c:	b928      	cbnz	r0, 800fe6a <__i2b+0x1a>
 800fe5e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800fe62:	4b04      	ldr	r3, [pc, #16]	; (800fe74 <__i2b+0x24>)
 800fe64:	4804      	ldr	r0, [pc, #16]	; (800fe78 <__i2b+0x28>)
 800fe66:	f000 fc0b 	bl	8010680 <__assert_func>
 800fe6a:	2301      	movs	r3, #1
 800fe6c:	6144      	str	r4, [r0, #20]
 800fe6e:	6103      	str	r3, [r0, #16]
 800fe70:	bd10      	pop	{r4, pc}
 800fe72:	bf00      	nop
 800fe74:	08011da3 	.word	0x08011da3
 800fe78:	08011db4 	.word	0x08011db4

0800fe7c <__multiply>:
 800fe7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fe80:	4614      	mov	r4, r2
 800fe82:	690a      	ldr	r2, [r1, #16]
 800fe84:	6923      	ldr	r3, [r4, #16]
 800fe86:	460d      	mov	r5, r1
 800fe88:	429a      	cmp	r2, r3
 800fe8a:	bfbe      	ittt	lt
 800fe8c:	460b      	movlt	r3, r1
 800fe8e:	4625      	movlt	r5, r4
 800fe90:	461c      	movlt	r4, r3
 800fe92:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800fe96:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800fe9a:	68ab      	ldr	r3, [r5, #8]
 800fe9c:	6869      	ldr	r1, [r5, #4]
 800fe9e:	eb0a 0709 	add.w	r7, sl, r9
 800fea2:	42bb      	cmp	r3, r7
 800fea4:	b085      	sub	sp, #20
 800fea6:	bfb8      	it	lt
 800fea8:	3101      	addlt	r1, #1
 800feaa:	f7ff fed7 	bl	800fc5c <_Balloc>
 800feae:	b930      	cbnz	r0, 800febe <__multiply+0x42>
 800feb0:	4602      	mov	r2, r0
 800feb2:	f240 115d 	movw	r1, #349	; 0x15d
 800feb6:	4b41      	ldr	r3, [pc, #260]	; (800ffbc <__multiply+0x140>)
 800feb8:	4841      	ldr	r0, [pc, #260]	; (800ffc0 <__multiply+0x144>)
 800feba:	f000 fbe1 	bl	8010680 <__assert_func>
 800febe:	f100 0614 	add.w	r6, r0, #20
 800fec2:	4633      	mov	r3, r6
 800fec4:	2200      	movs	r2, #0
 800fec6:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800feca:	4543      	cmp	r3, r8
 800fecc:	d31e      	bcc.n	800ff0c <__multiply+0x90>
 800fece:	f105 0c14 	add.w	ip, r5, #20
 800fed2:	f104 0314 	add.w	r3, r4, #20
 800fed6:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800feda:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800fede:	9202      	str	r2, [sp, #8]
 800fee0:	ebac 0205 	sub.w	r2, ip, r5
 800fee4:	3a15      	subs	r2, #21
 800fee6:	f022 0203 	bic.w	r2, r2, #3
 800feea:	3204      	adds	r2, #4
 800feec:	f105 0115 	add.w	r1, r5, #21
 800fef0:	458c      	cmp	ip, r1
 800fef2:	bf38      	it	cc
 800fef4:	2204      	movcc	r2, #4
 800fef6:	9201      	str	r2, [sp, #4]
 800fef8:	9a02      	ldr	r2, [sp, #8]
 800fefa:	9303      	str	r3, [sp, #12]
 800fefc:	429a      	cmp	r2, r3
 800fefe:	d808      	bhi.n	800ff12 <__multiply+0x96>
 800ff00:	2f00      	cmp	r7, #0
 800ff02:	dc55      	bgt.n	800ffb0 <__multiply+0x134>
 800ff04:	6107      	str	r7, [r0, #16]
 800ff06:	b005      	add	sp, #20
 800ff08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ff0c:	f843 2b04 	str.w	r2, [r3], #4
 800ff10:	e7db      	b.n	800feca <__multiply+0x4e>
 800ff12:	f8b3 a000 	ldrh.w	sl, [r3]
 800ff16:	f1ba 0f00 	cmp.w	sl, #0
 800ff1a:	d020      	beq.n	800ff5e <__multiply+0xe2>
 800ff1c:	46b1      	mov	r9, r6
 800ff1e:	2200      	movs	r2, #0
 800ff20:	f105 0e14 	add.w	lr, r5, #20
 800ff24:	f85e 4b04 	ldr.w	r4, [lr], #4
 800ff28:	f8d9 b000 	ldr.w	fp, [r9]
 800ff2c:	b2a1      	uxth	r1, r4
 800ff2e:	fa1f fb8b 	uxth.w	fp, fp
 800ff32:	fb0a b101 	mla	r1, sl, r1, fp
 800ff36:	4411      	add	r1, r2
 800ff38:	f8d9 2000 	ldr.w	r2, [r9]
 800ff3c:	0c24      	lsrs	r4, r4, #16
 800ff3e:	0c12      	lsrs	r2, r2, #16
 800ff40:	fb0a 2404 	mla	r4, sl, r4, r2
 800ff44:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800ff48:	b289      	uxth	r1, r1
 800ff4a:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800ff4e:	45f4      	cmp	ip, lr
 800ff50:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800ff54:	f849 1b04 	str.w	r1, [r9], #4
 800ff58:	d8e4      	bhi.n	800ff24 <__multiply+0xa8>
 800ff5a:	9901      	ldr	r1, [sp, #4]
 800ff5c:	5072      	str	r2, [r6, r1]
 800ff5e:	9a03      	ldr	r2, [sp, #12]
 800ff60:	3304      	adds	r3, #4
 800ff62:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800ff66:	f1b9 0f00 	cmp.w	r9, #0
 800ff6a:	d01f      	beq.n	800ffac <__multiply+0x130>
 800ff6c:	46b6      	mov	lr, r6
 800ff6e:	f04f 0a00 	mov.w	sl, #0
 800ff72:	6834      	ldr	r4, [r6, #0]
 800ff74:	f105 0114 	add.w	r1, r5, #20
 800ff78:	880a      	ldrh	r2, [r1, #0]
 800ff7a:	f8be b002 	ldrh.w	fp, [lr, #2]
 800ff7e:	b2a4      	uxth	r4, r4
 800ff80:	fb09 b202 	mla	r2, r9, r2, fp
 800ff84:	4492      	add	sl, r2
 800ff86:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800ff8a:	f84e 4b04 	str.w	r4, [lr], #4
 800ff8e:	f851 4b04 	ldr.w	r4, [r1], #4
 800ff92:	f8be 2000 	ldrh.w	r2, [lr]
 800ff96:	0c24      	lsrs	r4, r4, #16
 800ff98:	fb09 2404 	mla	r4, r9, r4, r2
 800ff9c:	458c      	cmp	ip, r1
 800ff9e:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800ffa2:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800ffa6:	d8e7      	bhi.n	800ff78 <__multiply+0xfc>
 800ffa8:	9a01      	ldr	r2, [sp, #4]
 800ffaa:	50b4      	str	r4, [r6, r2]
 800ffac:	3604      	adds	r6, #4
 800ffae:	e7a3      	b.n	800fef8 <__multiply+0x7c>
 800ffb0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800ffb4:	2b00      	cmp	r3, #0
 800ffb6:	d1a5      	bne.n	800ff04 <__multiply+0x88>
 800ffb8:	3f01      	subs	r7, #1
 800ffba:	e7a1      	b.n	800ff00 <__multiply+0x84>
 800ffbc:	08011da3 	.word	0x08011da3
 800ffc0:	08011db4 	.word	0x08011db4

0800ffc4 <__pow5mult>:
 800ffc4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ffc8:	4615      	mov	r5, r2
 800ffca:	f012 0203 	ands.w	r2, r2, #3
 800ffce:	4606      	mov	r6, r0
 800ffd0:	460f      	mov	r7, r1
 800ffd2:	d007      	beq.n	800ffe4 <__pow5mult+0x20>
 800ffd4:	4c25      	ldr	r4, [pc, #148]	; (801006c <__pow5mult+0xa8>)
 800ffd6:	3a01      	subs	r2, #1
 800ffd8:	2300      	movs	r3, #0
 800ffda:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800ffde:	f7ff fe9f 	bl	800fd20 <__multadd>
 800ffe2:	4607      	mov	r7, r0
 800ffe4:	10ad      	asrs	r5, r5, #2
 800ffe6:	d03d      	beq.n	8010064 <__pow5mult+0xa0>
 800ffe8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800ffea:	b97c      	cbnz	r4, 801000c <__pow5mult+0x48>
 800ffec:	2010      	movs	r0, #16
 800ffee:	f7fe fa27 	bl	800e440 <malloc>
 800fff2:	4602      	mov	r2, r0
 800fff4:	6270      	str	r0, [r6, #36]	; 0x24
 800fff6:	b928      	cbnz	r0, 8010004 <__pow5mult+0x40>
 800fff8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800fffc:	4b1c      	ldr	r3, [pc, #112]	; (8010070 <__pow5mult+0xac>)
 800fffe:	481d      	ldr	r0, [pc, #116]	; (8010074 <__pow5mult+0xb0>)
 8010000:	f000 fb3e 	bl	8010680 <__assert_func>
 8010004:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8010008:	6004      	str	r4, [r0, #0]
 801000a:	60c4      	str	r4, [r0, #12]
 801000c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8010010:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8010014:	b94c      	cbnz	r4, 801002a <__pow5mult+0x66>
 8010016:	f240 2171 	movw	r1, #625	; 0x271
 801001a:	4630      	mov	r0, r6
 801001c:	f7ff ff18 	bl	800fe50 <__i2b>
 8010020:	2300      	movs	r3, #0
 8010022:	4604      	mov	r4, r0
 8010024:	f8c8 0008 	str.w	r0, [r8, #8]
 8010028:	6003      	str	r3, [r0, #0]
 801002a:	f04f 0900 	mov.w	r9, #0
 801002e:	07eb      	lsls	r3, r5, #31
 8010030:	d50a      	bpl.n	8010048 <__pow5mult+0x84>
 8010032:	4639      	mov	r1, r7
 8010034:	4622      	mov	r2, r4
 8010036:	4630      	mov	r0, r6
 8010038:	f7ff ff20 	bl	800fe7c <__multiply>
 801003c:	4680      	mov	r8, r0
 801003e:	4639      	mov	r1, r7
 8010040:	4630      	mov	r0, r6
 8010042:	f7ff fe4b 	bl	800fcdc <_Bfree>
 8010046:	4647      	mov	r7, r8
 8010048:	106d      	asrs	r5, r5, #1
 801004a:	d00b      	beq.n	8010064 <__pow5mult+0xa0>
 801004c:	6820      	ldr	r0, [r4, #0]
 801004e:	b938      	cbnz	r0, 8010060 <__pow5mult+0x9c>
 8010050:	4622      	mov	r2, r4
 8010052:	4621      	mov	r1, r4
 8010054:	4630      	mov	r0, r6
 8010056:	f7ff ff11 	bl	800fe7c <__multiply>
 801005a:	6020      	str	r0, [r4, #0]
 801005c:	f8c0 9000 	str.w	r9, [r0]
 8010060:	4604      	mov	r4, r0
 8010062:	e7e4      	b.n	801002e <__pow5mult+0x6a>
 8010064:	4638      	mov	r0, r7
 8010066:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801006a:	bf00      	nop
 801006c:	08011f08 	.word	0x08011f08
 8010070:	08011d2d 	.word	0x08011d2d
 8010074:	08011db4 	.word	0x08011db4

08010078 <__lshift>:
 8010078:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801007c:	460c      	mov	r4, r1
 801007e:	4607      	mov	r7, r0
 8010080:	4691      	mov	r9, r2
 8010082:	6923      	ldr	r3, [r4, #16]
 8010084:	6849      	ldr	r1, [r1, #4]
 8010086:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801008a:	68a3      	ldr	r3, [r4, #8]
 801008c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8010090:	f108 0601 	add.w	r6, r8, #1
 8010094:	42b3      	cmp	r3, r6
 8010096:	db0b      	blt.n	80100b0 <__lshift+0x38>
 8010098:	4638      	mov	r0, r7
 801009a:	f7ff fddf 	bl	800fc5c <_Balloc>
 801009e:	4605      	mov	r5, r0
 80100a0:	b948      	cbnz	r0, 80100b6 <__lshift+0x3e>
 80100a2:	4602      	mov	r2, r0
 80100a4:	f240 11d9 	movw	r1, #473	; 0x1d9
 80100a8:	4b27      	ldr	r3, [pc, #156]	; (8010148 <__lshift+0xd0>)
 80100aa:	4828      	ldr	r0, [pc, #160]	; (801014c <__lshift+0xd4>)
 80100ac:	f000 fae8 	bl	8010680 <__assert_func>
 80100b0:	3101      	adds	r1, #1
 80100b2:	005b      	lsls	r3, r3, #1
 80100b4:	e7ee      	b.n	8010094 <__lshift+0x1c>
 80100b6:	2300      	movs	r3, #0
 80100b8:	f100 0114 	add.w	r1, r0, #20
 80100bc:	f100 0210 	add.w	r2, r0, #16
 80100c0:	4618      	mov	r0, r3
 80100c2:	4553      	cmp	r3, sl
 80100c4:	db33      	blt.n	801012e <__lshift+0xb6>
 80100c6:	6920      	ldr	r0, [r4, #16]
 80100c8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80100cc:	f104 0314 	add.w	r3, r4, #20
 80100d0:	f019 091f 	ands.w	r9, r9, #31
 80100d4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80100d8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80100dc:	d02b      	beq.n	8010136 <__lshift+0xbe>
 80100de:	468a      	mov	sl, r1
 80100e0:	2200      	movs	r2, #0
 80100e2:	f1c9 0e20 	rsb	lr, r9, #32
 80100e6:	6818      	ldr	r0, [r3, #0]
 80100e8:	fa00 f009 	lsl.w	r0, r0, r9
 80100ec:	4302      	orrs	r2, r0
 80100ee:	f84a 2b04 	str.w	r2, [sl], #4
 80100f2:	f853 2b04 	ldr.w	r2, [r3], #4
 80100f6:	459c      	cmp	ip, r3
 80100f8:	fa22 f20e 	lsr.w	r2, r2, lr
 80100fc:	d8f3      	bhi.n	80100e6 <__lshift+0x6e>
 80100fe:	ebac 0304 	sub.w	r3, ip, r4
 8010102:	3b15      	subs	r3, #21
 8010104:	f023 0303 	bic.w	r3, r3, #3
 8010108:	3304      	adds	r3, #4
 801010a:	f104 0015 	add.w	r0, r4, #21
 801010e:	4584      	cmp	ip, r0
 8010110:	bf38      	it	cc
 8010112:	2304      	movcc	r3, #4
 8010114:	50ca      	str	r2, [r1, r3]
 8010116:	b10a      	cbz	r2, 801011c <__lshift+0xa4>
 8010118:	f108 0602 	add.w	r6, r8, #2
 801011c:	3e01      	subs	r6, #1
 801011e:	4638      	mov	r0, r7
 8010120:	4621      	mov	r1, r4
 8010122:	612e      	str	r6, [r5, #16]
 8010124:	f7ff fdda 	bl	800fcdc <_Bfree>
 8010128:	4628      	mov	r0, r5
 801012a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801012e:	f842 0f04 	str.w	r0, [r2, #4]!
 8010132:	3301      	adds	r3, #1
 8010134:	e7c5      	b.n	80100c2 <__lshift+0x4a>
 8010136:	3904      	subs	r1, #4
 8010138:	f853 2b04 	ldr.w	r2, [r3], #4
 801013c:	459c      	cmp	ip, r3
 801013e:	f841 2f04 	str.w	r2, [r1, #4]!
 8010142:	d8f9      	bhi.n	8010138 <__lshift+0xc0>
 8010144:	e7ea      	b.n	801011c <__lshift+0xa4>
 8010146:	bf00      	nop
 8010148:	08011da3 	.word	0x08011da3
 801014c:	08011db4 	.word	0x08011db4

08010150 <__mcmp>:
 8010150:	4603      	mov	r3, r0
 8010152:	690a      	ldr	r2, [r1, #16]
 8010154:	6900      	ldr	r0, [r0, #16]
 8010156:	b530      	push	{r4, r5, lr}
 8010158:	1a80      	subs	r0, r0, r2
 801015a:	d10d      	bne.n	8010178 <__mcmp+0x28>
 801015c:	3314      	adds	r3, #20
 801015e:	3114      	adds	r1, #20
 8010160:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8010164:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8010168:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 801016c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8010170:	4295      	cmp	r5, r2
 8010172:	d002      	beq.n	801017a <__mcmp+0x2a>
 8010174:	d304      	bcc.n	8010180 <__mcmp+0x30>
 8010176:	2001      	movs	r0, #1
 8010178:	bd30      	pop	{r4, r5, pc}
 801017a:	42a3      	cmp	r3, r4
 801017c:	d3f4      	bcc.n	8010168 <__mcmp+0x18>
 801017e:	e7fb      	b.n	8010178 <__mcmp+0x28>
 8010180:	f04f 30ff 	mov.w	r0, #4294967295
 8010184:	e7f8      	b.n	8010178 <__mcmp+0x28>
	...

08010188 <__mdiff>:
 8010188:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801018c:	460c      	mov	r4, r1
 801018e:	4606      	mov	r6, r0
 8010190:	4611      	mov	r1, r2
 8010192:	4620      	mov	r0, r4
 8010194:	4692      	mov	sl, r2
 8010196:	f7ff ffdb 	bl	8010150 <__mcmp>
 801019a:	1e05      	subs	r5, r0, #0
 801019c:	d111      	bne.n	80101c2 <__mdiff+0x3a>
 801019e:	4629      	mov	r1, r5
 80101a0:	4630      	mov	r0, r6
 80101a2:	f7ff fd5b 	bl	800fc5c <_Balloc>
 80101a6:	4602      	mov	r2, r0
 80101a8:	b928      	cbnz	r0, 80101b6 <__mdiff+0x2e>
 80101aa:	f240 2132 	movw	r1, #562	; 0x232
 80101ae:	4b3c      	ldr	r3, [pc, #240]	; (80102a0 <__mdiff+0x118>)
 80101b0:	483c      	ldr	r0, [pc, #240]	; (80102a4 <__mdiff+0x11c>)
 80101b2:	f000 fa65 	bl	8010680 <__assert_func>
 80101b6:	2301      	movs	r3, #1
 80101b8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80101bc:	4610      	mov	r0, r2
 80101be:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80101c2:	bfa4      	itt	ge
 80101c4:	4653      	movge	r3, sl
 80101c6:	46a2      	movge	sl, r4
 80101c8:	4630      	mov	r0, r6
 80101ca:	f8da 1004 	ldr.w	r1, [sl, #4]
 80101ce:	bfa6      	itte	ge
 80101d0:	461c      	movge	r4, r3
 80101d2:	2500      	movge	r5, #0
 80101d4:	2501      	movlt	r5, #1
 80101d6:	f7ff fd41 	bl	800fc5c <_Balloc>
 80101da:	4602      	mov	r2, r0
 80101dc:	b918      	cbnz	r0, 80101e6 <__mdiff+0x5e>
 80101de:	f44f 7110 	mov.w	r1, #576	; 0x240
 80101e2:	4b2f      	ldr	r3, [pc, #188]	; (80102a0 <__mdiff+0x118>)
 80101e4:	e7e4      	b.n	80101b0 <__mdiff+0x28>
 80101e6:	f100 0814 	add.w	r8, r0, #20
 80101ea:	f8da 7010 	ldr.w	r7, [sl, #16]
 80101ee:	60c5      	str	r5, [r0, #12]
 80101f0:	f04f 0c00 	mov.w	ip, #0
 80101f4:	f10a 0514 	add.w	r5, sl, #20
 80101f8:	f10a 0010 	add.w	r0, sl, #16
 80101fc:	46c2      	mov	sl, r8
 80101fe:	6926      	ldr	r6, [r4, #16]
 8010200:	f104 0914 	add.w	r9, r4, #20
 8010204:	eb05 0e87 	add.w	lr, r5, r7, lsl #2
 8010208:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 801020c:	f850 bf04 	ldr.w	fp, [r0, #4]!
 8010210:	f859 3b04 	ldr.w	r3, [r9], #4
 8010214:	fa1f f18b 	uxth.w	r1, fp
 8010218:	4461      	add	r1, ip
 801021a:	fa1f fc83 	uxth.w	ip, r3
 801021e:	0c1b      	lsrs	r3, r3, #16
 8010220:	eba1 010c 	sub.w	r1, r1, ip
 8010224:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8010228:	eb03 4321 	add.w	r3, r3, r1, asr #16
 801022c:	b289      	uxth	r1, r1
 801022e:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8010232:	454e      	cmp	r6, r9
 8010234:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8010238:	f84a 3b04 	str.w	r3, [sl], #4
 801023c:	d8e6      	bhi.n	801020c <__mdiff+0x84>
 801023e:	1b33      	subs	r3, r6, r4
 8010240:	3b15      	subs	r3, #21
 8010242:	f023 0303 	bic.w	r3, r3, #3
 8010246:	3415      	adds	r4, #21
 8010248:	3304      	adds	r3, #4
 801024a:	42a6      	cmp	r6, r4
 801024c:	bf38      	it	cc
 801024e:	2304      	movcc	r3, #4
 8010250:	441d      	add	r5, r3
 8010252:	4443      	add	r3, r8
 8010254:	461e      	mov	r6, r3
 8010256:	462c      	mov	r4, r5
 8010258:	4574      	cmp	r4, lr
 801025a:	d30e      	bcc.n	801027a <__mdiff+0xf2>
 801025c:	f10e 0103 	add.w	r1, lr, #3
 8010260:	1b49      	subs	r1, r1, r5
 8010262:	f021 0103 	bic.w	r1, r1, #3
 8010266:	3d03      	subs	r5, #3
 8010268:	45ae      	cmp	lr, r5
 801026a:	bf38      	it	cc
 801026c:	2100      	movcc	r1, #0
 801026e:	4419      	add	r1, r3
 8010270:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8010274:	b18b      	cbz	r3, 801029a <__mdiff+0x112>
 8010276:	6117      	str	r7, [r2, #16]
 8010278:	e7a0      	b.n	80101bc <__mdiff+0x34>
 801027a:	f854 8b04 	ldr.w	r8, [r4], #4
 801027e:	fa1f f188 	uxth.w	r1, r8
 8010282:	4461      	add	r1, ip
 8010284:	1408      	asrs	r0, r1, #16
 8010286:	eb00 4018 	add.w	r0, r0, r8, lsr #16
 801028a:	b289      	uxth	r1, r1
 801028c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8010290:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8010294:	f846 1b04 	str.w	r1, [r6], #4
 8010298:	e7de      	b.n	8010258 <__mdiff+0xd0>
 801029a:	3f01      	subs	r7, #1
 801029c:	e7e8      	b.n	8010270 <__mdiff+0xe8>
 801029e:	bf00      	nop
 80102a0:	08011da3 	.word	0x08011da3
 80102a4:	08011db4 	.word	0x08011db4

080102a8 <__d2b>:
 80102a8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80102ac:	2101      	movs	r1, #1
 80102ae:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 80102b2:	4690      	mov	r8, r2
 80102b4:	461d      	mov	r5, r3
 80102b6:	f7ff fcd1 	bl	800fc5c <_Balloc>
 80102ba:	4604      	mov	r4, r0
 80102bc:	b930      	cbnz	r0, 80102cc <__d2b+0x24>
 80102be:	4602      	mov	r2, r0
 80102c0:	f240 310a 	movw	r1, #778	; 0x30a
 80102c4:	4b24      	ldr	r3, [pc, #144]	; (8010358 <__d2b+0xb0>)
 80102c6:	4825      	ldr	r0, [pc, #148]	; (801035c <__d2b+0xb4>)
 80102c8:	f000 f9da 	bl	8010680 <__assert_func>
 80102cc:	f3c5 0313 	ubfx	r3, r5, #0, #20
 80102d0:	f3c5 550a 	ubfx	r5, r5, #20, #11
 80102d4:	bb2d      	cbnz	r5, 8010322 <__d2b+0x7a>
 80102d6:	9301      	str	r3, [sp, #4]
 80102d8:	f1b8 0300 	subs.w	r3, r8, #0
 80102dc:	d026      	beq.n	801032c <__d2b+0x84>
 80102de:	4668      	mov	r0, sp
 80102e0:	9300      	str	r3, [sp, #0]
 80102e2:	f7ff fd87 	bl	800fdf4 <__lo0bits>
 80102e6:	9900      	ldr	r1, [sp, #0]
 80102e8:	b1f0      	cbz	r0, 8010328 <__d2b+0x80>
 80102ea:	9a01      	ldr	r2, [sp, #4]
 80102ec:	f1c0 0320 	rsb	r3, r0, #32
 80102f0:	fa02 f303 	lsl.w	r3, r2, r3
 80102f4:	430b      	orrs	r3, r1
 80102f6:	40c2      	lsrs	r2, r0
 80102f8:	6163      	str	r3, [r4, #20]
 80102fa:	9201      	str	r2, [sp, #4]
 80102fc:	9b01      	ldr	r3, [sp, #4]
 80102fe:	2b00      	cmp	r3, #0
 8010300:	bf14      	ite	ne
 8010302:	2102      	movne	r1, #2
 8010304:	2101      	moveq	r1, #1
 8010306:	61a3      	str	r3, [r4, #24]
 8010308:	6121      	str	r1, [r4, #16]
 801030a:	b1c5      	cbz	r5, 801033e <__d2b+0x96>
 801030c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8010310:	4405      	add	r5, r0
 8010312:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8010316:	603d      	str	r5, [r7, #0]
 8010318:	6030      	str	r0, [r6, #0]
 801031a:	4620      	mov	r0, r4
 801031c:	b002      	add	sp, #8
 801031e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010322:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8010326:	e7d6      	b.n	80102d6 <__d2b+0x2e>
 8010328:	6161      	str	r1, [r4, #20]
 801032a:	e7e7      	b.n	80102fc <__d2b+0x54>
 801032c:	a801      	add	r0, sp, #4
 801032e:	f7ff fd61 	bl	800fdf4 <__lo0bits>
 8010332:	2101      	movs	r1, #1
 8010334:	9b01      	ldr	r3, [sp, #4]
 8010336:	6121      	str	r1, [r4, #16]
 8010338:	6163      	str	r3, [r4, #20]
 801033a:	3020      	adds	r0, #32
 801033c:	e7e5      	b.n	801030a <__d2b+0x62>
 801033e:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 8010342:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8010346:	6038      	str	r0, [r7, #0]
 8010348:	6918      	ldr	r0, [r3, #16]
 801034a:	f7ff fd33 	bl	800fdb4 <__hi0bits>
 801034e:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 8010352:	6031      	str	r1, [r6, #0]
 8010354:	e7e1      	b.n	801031a <__d2b+0x72>
 8010356:	bf00      	nop
 8010358:	08011da3 	.word	0x08011da3
 801035c:	08011db4 	.word	0x08011db4

08010360 <_calloc_r>:
 8010360:	b538      	push	{r3, r4, r5, lr}
 8010362:	fb02 f501 	mul.w	r5, r2, r1
 8010366:	4629      	mov	r1, r5
 8010368:	f7fe f8dc 	bl	800e524 <_malloc_r>
 801036c:	4604      	mov	r4, r0
 801036e:	b118      	cbz	r0, 8010378 <_calloc_r+0x18>
 8010370:	462a      	mov	r2, r5
 8010372:	2100      	movs	r1, #0
 8010374:	f7fe f882 	bl	800e47c <memset>
 8010378:	4620      	mov	r0, r4
 801037a:	bd38      	pop	{r3, r4, r5, pc}

0801037c <_realloc_r>:
 801037c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801037e:	4607      	mov	r7, r0
 8010380:	4614      	mov	r4, r2
 8010382:	460e      	mov	r6, r1
 8010384:	b921      	cbnz	r1, 8010390 <_realloc_r+0x14>
 8010386:	4611      	mov	r1, r2
 8010388:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801038c:	f7fe b8ca 	b.w	800e524 <_malloc_r>
 8010390:	b922      	cbnz	r2, 801039c <_realloc_r+0x20>
 8010392:	f7fe f87b 	bl	800e48c <_free_r>
 8010396:	4625      	mov	r5, r4
 8010398:	4628      	mov	r0, r5
 801039a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801039c:	f000 f9cf 	bl	801073e <_malloc_usable_size_r>
 80103a0:	42a0      	cmp	r0, r4
 80103a2:	d20f      	bcs.n	80103c4 <_realloc_r+0x48>
 80103a4:	4621      	mov	r1, r4
 80103a6:	4638      	mov	r0, r7
 80103a8:	f7fe f8bc 	bl	800e524 <_malloc_r>
 80103ac:	4605      	mov	r5, r0
 80103ae:	2800      	cmp	r0, #0
 80103b0:	d0f2      	beq.n	8010398 <_realloc_r+0x1c>
 80103b2:	4631      	mov	r1, r6
 80103b4:	4622      	mov	r2, r4
 80103b6:	f7ff fc37 	bl	800fc28 <memcpy>
 80103ba:	4631      	mov	r1, r6
 80103bc:	4638      	mov	r0, r7
 80103be:	f7fe f865 	bl	800e48c <_free_r>
 80103c2:	e7e9      	b.n	8010398 <_realloc_r+0x1c>
 80103c4:	4635      	mov	r5, r6
 80103c6:	e7e7      	b.n	8010398 <_realloc_r+0x1c>

080103c8 <__ssputs_r>:
 80103c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80103cc:	688e      	ldr	r6, [r1, #8]
 80103ce:	4682      	mov	sl, r0
 80103d0:	429e      	cmp	r6, r3
 80103d2:	460c      	mov	r4, r1
 80103d4:	4690      	mov	r8, r2
 80103d6:	461f      	mov	r7, r3
 80103d8:	d838      	bhi.n	801044c <__ssputs_r+0x84>
 80103da:	898a      	ldrh	r2, [r1, #12]
 80103dc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80103e0:	d032      	beq.n	8010448 <__ssputs_r+0x80>
 80103e2:	6825      	ldr	r5, [r4, #0]
 80103e4:	6909      	ldr	r1, [r1, #16]
 80103e6:	3301      	adds	r3, #1
 80103e8:	eba5 0901 	sub.w	r9, r5, r1
 80103ec:	6965      	ldr	r5, [r4, #20]
 80103ee:	444b      	add	r3, r9
 80103f0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80103f4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80103f8:	106d      	asrs	r5, r5, #1
 80103fa:	429d      	cmp	r5, r3
 80103fc:	bf38      	it	cc
 80103fe:	461d      	movcc	r5, r3
 8010400:	0553      	lsls	r3, r2, #21
 8010402:	d531      	bpl.n	8010468 <__ssputs_r+0xa0>
 8010404:	4629      	mov	r1, r5
 8010406:	f7fe f88d 	bl	800e524 <_malloc_r>
 801040a:	4606      	mov	r6, r0
 801040c:	b950      	cbnz	r0, 8010424 <__ssputs_r+0x5c>
 801040e:	230c      	movs	r3, #12
 8010410:	f04f 30ff 	mov.w	r0, #4294967295
 8010414:	f8ca 3000 	str.w	r3, [sl]
 8010418:	89a3      	ldrh	r3, [r4, #12]
 801041a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801041e:	81a3      	strh	r3, [r4, #12]
 8010420:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010424:	464a      	mov	r2, r9
 8010426:	6921      	ldr	r1, [r4, #16]
 8010428:	f7ff fbfe 	bl	800fc28 <memcpy>
 801042c:	89a3      	ldrh	r3, [r4, #12]
 801042e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8010432:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010436:	81a3      	strh	r3, [r4, #12]
 8010438:	6126      	str	r6, [r4, #16]
 801043a:	444e      	add	r6, r9
 801043c:	6026      	str	r6, [r4, #0]
 801043e:	463e      	mov	r6, r7
 8010440:	6165      	str	r5, [r4, #20]
 8010442:	eba5 0509 	sub.w	r5, r5, r9
 8010446:	60a5      	str	r5, [r4, #8]
 8010448:	42be      	cmp	r6, r7
 801044a:	d900      	bls.n	801044e <__ssputs_r+0x86>
 801044c:	463e      	mov	r6, r7
 801044e:	4632      	mov	r2, r6
 8010450:	4641      	mov	r1, r8
 8010452:	6820      	ldr	r0, [r4, #0]
 8010454:	f000 f959 	bl	801070a <memmove>
 8010458:	68a3      	ldr	r3, [r4, #8]
 801045a:	6822      	ldr	r2, [r4, #0]
 801045c:	1b9b      	subs	r3, r3, r6
 801045e:	4432      	add	r2, r6
 8010460:	2000      	movs	r0, #0
 8010462:	60a3      	str	r3, [r4, #8]
 8010464:	6022      	str	r2, [r4, #0]
 8010466:	e7db      	b.n	8010420 <__ssputs_r+0x58>
 8010468:	462a      	mov	r2, r5
 801046a:	f7ff ff87 	bl	801037c <_realloc_r>
 801046e:	4606      	mov	r6, r0
 8010470:	2800      	cmp	r0, #0
 8010472:	d1e1      	bne.n	8010438 <__ssputs_r+0x70>
 8010474:	4650      	mov	r0, sl
 8010476:	6921      	ldr	r1, [r4, #16]
 8010478:	f7fe f808 	bl	800e48c <_free_r>
 801047c:	e7c7      	b.n	801040e <__ssputs_r+0x46>
	...

08010480 <_svfiprintf_r>:
 8010480:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010484:	4698      	mov	r8, r3
 8010486:	898b      	ldrh	r3, [r1, #12]
 8010488:	4607      	mov	r7, r0
 801048a:	061b      	lsls	r3, r3, #24
 801048c:	460d      	mov	r5, r1
 801048e:	4614      	mov	r4, r2
 8010490:	b09d      	sub	sp, #116	; 0x74
 8010492:	d50e      	bpl.n	80104b2 <_svfiprintf_r+0x32>
 8010494:	690b      	ldr	r3, [r1, #16]
 8010496:	b963      	cbnz	r3, 80104b2 <_svfiprintf_r+0x32>
 8010498:	2140      	movs	r1, #64	; 0x40
 801049a:	f7fe f843 	bl	800e524 <_malloc_r>
 801049e:	6028      	str	r0, [r5, #0]
 80104a0:	6128      	str	r0, [r5, #16]
 80104a2:	b920      	cbnz	r0, 80104ae <_svfiprintf_r+0x2e>
 80104a4:	230c      	movs	r3, #12
 80104a6:	603b      	str	r3, [r7, #0]
 80104a8:	f04f 30ff 	mov.w	r0, #4294967295
 80104ac:	e0d1      	b.n	8010652 <_svfiprintf_r+0x1d2>
 80104ae:	2340      	movs	r3, #64	; 0x40
 80104b0:	616b      	str	r3, [r5, #20]
 80104b2:	2300      	movs	r3, #0
 80104b4:	9309      	str	r3, [sp, #36]	; 0x24
 80104b6:	2320      	movs	r3, #32
 80104b8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80104bc:	2330      	movs	r3, #48	; 0x30
 80104be:	f04f 0901 	mov.w	r9, #1
 80104c2:	f8cd 800c 	str.w	r8, [sp, #12]
 80104c6:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 801066c <_svfiprintf_r+0x1ec>
 80104ca:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80104ce:	4623      	mov	r3, r4
 80104d0:	469a      	mov	sl, r3
 80104d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80104d6:	b10a      	cbz	r2, 80104dc <_svfiprintf_r+0x5c>
 80104d8:	2a25      	cmp	r2, #37	; 0x25
 80104da:	d1f9      	bne.n	80104d0 <_svfiprintf_r+0x50>
 80104dc:	ebba 0b04 	subs.w	fp, sl, r4
 80104e0:	d00b      	beq.n	80104fa <_svfiprintf_r+0x7a>
 80104e2:	465b      	mov	r3, fp
 80104e4:	4622      	mov	r2, r4
 80104e6:	4629      	mov	r1, r5
 80104e8:	4638      	mov	r0, r7
 80104ea:	f7ff ff6d 	bl	80103c8 <__ssputs_r>
 80104ee:	3001      	adds	r0, #1
 80104f0:	f000 80aa 	beq.w	8010648 <_svfiprintf_r+0x1c8>
 80104f4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80104f6:	445a      	add	r2, fp
 80104f8:	9209      	str	r2, [sp, #36]	; 0x24
 80104fa:	f89a 3000 	ldrb.w	r3, [sl]
 80104fe:	2b00      	cmp	r3, #0
 8010500:	f000 80a2 	beq.w	8010648 <_svfiprintf_r+0x1c8>
 8010504:	2300      	movs	r3, #0
 8010506:	f04f 32ff 	mov.w	r2, #4294967295
 801050a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801050e:	f10a 0a01 	add.w	sl, sl, #1
 8010512:	9304      	str	r3, [sp, #16]
 8010514:	9307      	str	r3, [sp, #28]
 8010516:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801051a:	931a      	str	r3, [sp, #104]	; 0x68
 801051c:	4654      	mov	r4, sl
 801051e:	2205      	movs	r2, #5
 8010520:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010524:	4851      	ldr	r0, [pc, #324]	; (801066c <_svfiprintf_r+0x1ec>)
 8010526:	f7ff fb71 	bl	800fc0c <memchr>
 801052a:	9a04      	ldr	r2, [sp, #16]
 801052c:	b9d8      	cbnz	r0, 8010566 <_svfiprintf_r+0xe6>
 801052e:	06d0      	lsls	r0, r2, #27
 8010530:	bf44      	itt	mi
 8010532:	2320      	movmi	r3, #32
 8010534:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010538:	0711      	lsls	r1, r2, #28
 801053a:	bf44      	itt	mi
 801053c:	232b      	movmi	r3, #43	; 0x2b
 801053e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010542:	f89a 3000 	ldrb.w	r3, [sl]
 8010546:	2b2a      	cmp	r3, #42	; 0x2a
 8010548:	d015      	beq.n	8010576 <_svfiprintf_r+0xf6>
 801054a:	4654      	mov	r4, sl
 801054c:	2000      	movs	r0, #0
 801054e:	f04f 0c0a 	mov.w	ip, #10
 8010552:	9a07      	ldr	r2, [sp, #28]
 8010554:	4621      	mov	r1, r4
 8010556:	f811 3b01 	ldrb.w	r3, [r1], #1
 801055a:	3b30      	subs	r3, #48	; 0x30
 801055c:	2b09      	cmp	r3, #9
 801055e:	d94e      	bls.n	80105fe <_svfiprintf_r+0x17e>
 8010560:	b1b0      	cbz	r0, 8010590 <_svfiprintf_r+0x110>
 8010562:	9207      	str	r2, [sp, #28]
 8010564:	e014      	b.n	8010590 <_svfiprintf_r+0x110>
 8010566:	eba0 0308 	sub.w	r3, r0, r8
 801056a:	fa09 f303 	lsl.w	r3, r9, r3
 801056e:	4313      	orrs	r3, r2
 8010570:	46a2      	mov	sl, r4
 8010572:	9304      	str	r3, [sp, #16]
 8010574:	e7d2      	b.n	801051c <_svfiprintf_r+0x9c>
 8010576:	9b03      	ldr	r3, [sp, #12]
 8010578:	1d19      	adds	r1, r3, #4
 801057a:	681b      	ldr	r3, [r3, #0]
 801057c:	9103      	str	r1, [sp, #12]
 801057e:	2b00      	cmp	r3, #0
 8010580:	bfbb      	ittet	lt
 8010582:	425b      	neglt	r3, r3
 8010584:	f042 0202 	orrlt.w	r2, r2, #2
 8010588:	9307      	strge	r3, [sp, #28]
 801058a:	9307      	strlt	r3, [sp, #28]
 801058c:	bfb8      	it	lt
 801058e:	9204      	strlt	r2, [sp, #16]
 8010590:	7823      	ldrb	r3, [r4, #0]
 8010592:	2b2e      	cmp	r3, #46	; 0x2e
 8010594:	d10c      	bne.n	80105b0 <_svfiprintf_r+0x130>
 8010596:	7863      	ldrb	r3, [r4, #1]
 8010598:	2b2a      	cmp	r3, #42	; 0x2a
 801059a:	d135      	bne.n	8010608 <_svfiprintf_r+0x188>
 801059c:	9b03      	ldr	r3, [sp, #12]
 801059e:	3402      	adds	r4, #2
 80105a0:	1d1a      	adds	r2, r3, #4
 80105a2:	681b      	ldr	r3, [r3, #0]
 80105a4:	9203      	str	r2, [sp, #12]
 80105a6:	2b00      	cmp	r3, #0
 80105a8:	bfb8      	it	lt
 80105aa:	f04f 33ff 	movlt.w	r3, #4294967295
 80105ae:	9305      	str	r3, [sp, #20]
 80105b0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 801067c <_svfiprintf_r+0x1fc>
 80105b4:	2203      	movs	r2, #3
 80105b6:	4650      	mov	r0, sl
 80105b8:	7821      	ldrb	r1, [r4, #0]
 80105ba:	f7ff fb27 	bl	800fc0c <memchr>
 80105be:	b140      	cbz	r0, 80105d2 <_svfiprintf_r+0x152>
 80105c0:	2340      	movs	r3, #64	; 0x40
 80105c2:	eba0 000a 	sub.w	r0, r0, sl
 80105c6:	fa03 f000 	lsl.w	r0, r3, r0
 80105ca:	9b04      	ldr	r3, [sp, #16]
 80105cc:	3401      	adds	r4, #1
 80105ce:	4303      	orrs	r3, r0
 80105d0:	9304      	str	r3, [sp, #16]
 80105d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80105d6:	2206      	movs	r2, #6
 80105d8:	4825      	ldr	r0, [pc, #148]	; (8010670 <_svfiprintf_r+0x1f0>)
 80105da:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80105de:	f7ff fb15 	bl	800fc0c <memchr>
 80105e2:	2800      	cmp	r0, #0
 80105e4:	d038      	beq.n	8010658 <_svfiprintf_r+0x1d8>
 80105e6:	4b23      	ldr	r3, [pc, #140]	; (8010674 <_svfiprintf_r+0x1f4>)
 80105e8:	bb1b      	cbnz	r3, 8010632 <_svfiprintf_r+0x1b2>
 80105ea:	9b03      	ldr	r3, [sp, #12]
 80105ec:	3307      	adds	r3, #7
 80105ee:	f023 0307 	bic.w	r3, r3, #7
 80105f2:	3308      	adds	r3, #8
 80105f4:	9303      	str	r3, [sp, #12]
 80105f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80105f8:	4433      	add	r3, r6
 80105fa:	9309      	str	r3, [sp, #36]	; 0x24
 80105fc:	e767      	b.n	80104ce <_svfiprintf_r+0x4e>
 80105fe:	460c      	mov	r4, r1
 8010600:	2001      	movs	r0, #1
 8010602:	fb0c 3202 	mla	r2, ip, r2, r3
 8010606:	e7a5      	b.n	8010554 <_svfiprintf_r+0xd4>
 8010608:	2300      	movs	r3, #0
 801060a:	f04f 0c0a 	mov.w	ip, #10
 801060e:	4619      	mov	r1, r3
 8010610:	3401      	adds	r4, #1
 8010612:	9305      	str	r3, [sp, #20]
 8010614:	4620      	mov	r0, r4
 8010616:	f810 2b01 	ldrb.w	r2, [r0], #1
 801061a:	3a30      	subs	r2, #48	; 0x30
 801061c:	2a09      	cmp	r2, #9
 801061e:	d903      	bls.n	8010628 <_svfiprintf_r+0x1a8>
 8010620:	2b00      	cmp	r3, #0
 8010622:	d0c5      	beq.n	80105b0 <_svfiprintf_r+0x130>
 8010624:	9105      	str	r1, [sp, #20]
 8010626:	e7c3      	b.n	80105b0 <_svfiprintf_r+0x130>
 8010628:	4604      	mov	r4, r0
 801062a:	2301      	movs	r3, #1
 801062c:	fb0c 2101 	mla	r1, ip, r1, r2
 8010630:	e7f0      	b.n	8010614 <_svfiprintf_r+0x194>
 8010632:	ab03      	add	r3, sp, #12
 8010634:	9300      	str	r3, [sp, #0]
 8010636:	462a      	mov	r2, r5
 8010638:	4638      	mov	r0, r7
 801063a:	4b0f      	ldr	r3, [pc, #60]	; (8010678 <_svfiprintf_r+0x1f8>)
 801063c:	a904      	add	r1, sp, #16
 801063e:	f7fe f869 	bl	800e714 <_printf_float>
 8010642:	1c42      	adds	r2, r0, #1
 8010644:	4606      	mov	r6, r0
 8010646:	d1d6      	bne.n	80105f6 <_svfiprintf_r+0x176>
 8010648:	89ab      	ldrh	r3, [r5, #12]
 801064a:	065b      	lsls	r3, r3, #25
 801064c:	f53f af2c 	bmi.w	80104a8 <_svfiprintf_r+0x28>
 8010650:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010652:	b01d      	add	sp, #116	; 0x74
 8010654:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010658:	ab03      	add	r3, sp, #12
 801065a:	9300      	str	r3, [sp, #0]
 801065c:	462a      	mov	r2, r5
 801065e:	4638      	mov	r0, r7
 8010660:	4b05      	ldr	r3, [pc, #20]	; (8010678 <_svfiprintf_r+0x1f8>)
 8010662:	a904      	add	r1, sp, #16
 8010664:	f7fe faf2 	bl	800ec4c <_printf_i>
 8010668:	e7eb      	b.n	8010642 <_svfiprintf_r+0x1c2>
 801066a:	bf00      	nop
 801066c:	08011f14 	.word	0x08011f14
 8010670:	08011f1e 	.word	0x08011f1e
 8010674:	0800e715 	.word	0x0800e715
 8010678:	080103c9 	.word	0x080103c9
 801067c:	08011f1a 	.word	0x08011f1a

08010680 <__assert_func>:
 8010680:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8010682:	4614      	mov	r4, r2
 8010684:	461a      	mov	r2, r3
 8010686:	4b09      	ldr	r3, [pc, #36]	; (80106ac <__assert_func+0x2c>)
 8010688:	4605      	mov	r5, r0
 801068a:	681b      	ldr	r3, [r3, #0]
 801068c:	68d8      	ldr	r0, [r3, #12]
 801068e:	b14c      	cbz	r4, 80106a4 <__assert_func+0x24>
 8010690:	4b07      	ldr	r3, [pc, #28]	; (80106b0 <__assert_func+0x30>)
 8010692:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8010696:	9100      	str	r1, [sp, #0]
 8010698:	462b      	mov	r3, r5
 801069a:	4906      	ldr	r1, [pc, #24]	; (80106b4 <__assert_func+0x34>)
 801069c:	f000 f80e 	bl	80106bc <fiprintf>
 80106a0:	f000 fa7a 	bl	8010b98 <abort>
 80106a4:	4b04      	ldr	r3, [pc, #16]	; (80106b8 <__assert_func+0x38>)
 80106a6:	461c      	mov	r4, r3
 80106a8:	e7f3      	b.n	8010692 <__assert_func+0x12>
 80106aa:	bf00      	nop
 80106ac:	200001a8 	.word	0x200001a8
 80106b0:	08011f25 	.word	0x08011f25
 80106b4:	08011f32 	.word	0x08011f32
 80106b8:	08011f60 	.word	0x08011f60

080106bc <fiprintf>:
 80106bc:	b40e      	push	{r1, r2, r3}
 80106be:	b503      	push	{r0, r1, lr}
 80106c0:	4601      	mov	r1, r0
 80106c2:	ab03      	add	r3, sp, #12
 80106c4:	4805      	ldr	r0, [pc, #20]	; (80106dc <fiprintf+0x20>)
 80106c6:	f853 2b04 	ldr.w	r2, [r3], #4
 80106ca:	6800      	ldr	r0, [r0, #0]
 80106cc:	9301      	str	r3, [sp, #4]
 80106ce:	f000 f865 	bl	801079c <_vfiprintf_r>
 80106d2:	b002      	add	sp, #8
 80106d4:	f85d eb04 	ldr.w	lr, [sp], #4
 80106d8:	b003      	add	sp, #12
 80106da:	4770      	bx	lr
 80106dc:	200001a8 	.word	0x200001a8

080106e0 <__retarget_lock_init_recursive>:
 80106e0:	4770      	bx	lr

080106e2 <__retarget_lock_acquire_recursive>:
 80106e2:	4770      	bx	lr

080106e4 <__retarget_lock_release_recursive>:
 80106e4:	4770      	bx	lr

080106e6 <__ascii_mbtowc>:
 80106e6:	b082      	sub	sp, #8
 80106e8:	b901      	cbnz	r1, 80106ec <__ascii_mbtowc+0x6>
 80106ea:	a901      	add	r1, sp, #4
 80106ec:	b142      	cbz	r2, 8010700 <__ascii_mbtowc+0x1a>
 80106ee:	b14b      	cbz	r3, 8010704 <__ascii_mbtowc+0x1e>
 80106f0:	7813      	ldrb	r3, [r2, #0]
 80106f2:	600b      	str	r3, [r1, #0]
 80106f4:	7812      	ldrb	r2, [r2, #0]
 80106f6:	1e10      	subs	r0, r2, #0
 80106f8:	bf18      	it	ne
 80106fa:	2001      	movne	r0, #1
 80106fc:	b002      	add	sp, #8
 80106fe:	4770      	bx	lr
 8010700:	4610      	mov	r0, r2
 8010702:	e7fb      	b.n	80106fc <__ascii_mbtowc+0x16>
 8010704:	f06f 0001 	mvn.w	r0, #1
 8010708:	e7f8      	b.n	80106fc <__ascii_mbtowc+0x16>

0801070a <memmove>:
 801070a:	4288      	cmp	r0, r1
 801070c:	b510      	push	{r4, lr}
 801070e:	eb01 0402 	add.w	r4, r1, r2
 8010712:	d902      	bls.n	801071a <memmove+0x10>
 8010714:	4284      	cmp	r4, r0
 8010716:	4623      	mov	r3, r4
 8010718:	d807      	bhi.n	801072a <memmove+0x20>
 801071a:	1e43      	subs	r3, r0, #1
 801071c:	42a1      	cmp	r1, r4
 801071e:	d008      	beq.n	8010732 <memmove+0x28>
 8010720:	f811 2b01 	ldrb.w	r2, [r1], #1
 8010724:	f803 2f01 	strb.w	r2, [r3, #1]!
 8010728:	e7f8      	b.n	801071c <memmove+0x12>
 801072a:	4601      	mov	r1, r0
 801072c:	4402      	add	r2, r0
 801072e:	428a      	cmp	r2, r1
 8010730:	d100      	bne.n	8010734 <memmove+0x2a>
 8010732:	bd10      	pop	{r4, pc}
 8010734:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8010738:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801073c:	e7f7      	b.n	801072e <memmove+0x24>

0801073e <_malloc_usable_size_r>:
 801073e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010742:	1f18      	subs	r0, r3, #4
 8010744:	2b00      	cmp	r3, #0
 8010746:	bfbc      	itt	lt
 8010748:	580b      	ldrlt	r3, [r1, r0]
 801074a:	18c0      	addlt	r0, r0, r3
 801074c:	4770      	bx	lr

0801074e <__sfputc_r>:
 801074e:	6893      	ldr	r3, [r2, #8]
 8010750:	b410      	push	{r4}
 8010752:	3b01      	subs	r3, #1
 8010754:	2b00      	cmp	r3, #0
 8010756:	6093      	str	r3, [r2, #8]
 8010758:	da07      	bge.n	801076a <__sfputc_r+0x1c>
 801075a:	6994      	ldr	r4, [r2, #24]
 801075c:	42a3      	cmp	r3, r4
 801075e:	db01      	blt.n	8010764 <__sfputc_r+0x16>
 8010760:	290a      	cmp	r1, #10
 8010762:	d102      	bne.n	801076a <__sfputc_r+0x1c>
 8010764:	bc10      	pop	{r4}
 8010766:	f000 b949 	b.w	80109fc <__swbuf_r>
 801076a:	6813      	ldr	r3, [r2, #0]
 801076c:	1c58      	adds	r0, r3, #1
 801076e:	6010      	str	r0, [r2, #0]
 8010770:	7019      	strb	r1, [r3, #0]
 8010772:	4608      	mov	r0, r1
 8010774:	bc10      	pop	{r4}
 8010776:	4770      	bx	lr

08010778 <__sfputs_r>:
 8010778:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801077a:	4606      	mov	r6, r0
 801077c:	460f      	mov	r7, r1
 801077e:	4614      	mov	r4, r2
 8010780:	18d5      	adds	r5, r2, r3
 8010782:	42ac      	cmp	r4, r5
 8010784:	d101      	bne.n	801078a <__sfputs_r+0x12>
 8010786:	2000      	movs	r0, #0
 8010788:	e007      	b.n	801079a <__sfputs_r+0x22>
 801078a:	463a      	mov	r2, r7
 801078c:	4630      	mov	r0, r6
 801078e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010792:	f7ff ffdc 	bl	801074e <__sfputc_r>
 8010796:	1c43      	adds	r3, r0, #1
 8010798:	d1f3      	bne.n	8010782 <__sfputs_r+0xa>
 801079a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801079c <_vfiprintf_r>:
 801079c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80107a0:	460d      	mov	r5, r1
 80107a2:	4614      	mov	r4, r2
 80107a4:	4698      	mov	r8, r3
 80107a6:	4606      	mov	r6, r0
 80107a8:	b09d      	sub	sp, #116	; 0x74
 80107aa:	b118      	cbz	r0, 80107b4 <_vfiprintf_r+0x18>
 80107ac:	6983      	ldr	r3, [r0, #24]
 80107ae:	b90b      	cbnz	r3, 80107b4 <_vfiprintf_r+0x18>
 80107b0:	f000 fb14 	bl	8010ddc <__sinit>
 80107b4:	4b89      	ldr	r3, [pc, #548]	; (80109dc <_vfiprintf_r+0x240>)
 80107b6:	429d      	cmp	r5, r3
 80107b8:	d11b      	bne.n	80107f2 <_vfiprintf_r+0x56>
 80107ba:	6875      	ldr	r5, [r6, #4]
 80107bc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80107be:	07d9      	lsls	r1, r3, #31
 80107c0:	d405      	bmi.n	80107ce <_vfiprintf_r+0x32>
 80107c2:	89ab      	ldrh	r3, [r5, #12]
 80107c4:	059a      	lsls	r2, r3, #22
 80107c6:	d402      	bmi.n	80107ce <_vfiprintf_r+0x32>
 80107c8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80107ca:	f7ff ff8a 	bl	80106e2 <__retarget_lock_acquire_recursive>
 80107ce:	89ab      	ldrh	r3, [r5, #12]
 80107d0:	071b      	lsls	r3, r3, #28
 80107d2:	d501      	bpl.n	80107d8 <_vfiprintf_r+0x3c>
 80107d4:	692b      	ldr	r3, [r5, #16]
 80107d6:	b9eb      	cbnz	r3, 8010814 <_vfiprintf_r+0x78>
 80107d8:	4629      	mov	r1, r5
 80107da:	4630      	mov	r0, r6
 80107dc:	f000 f96e 	bl	8010abc <__swsetup_r>
 80107e0:	b1c0      	cbz	r0, 8010814 <_vfiprintf_r+0x78>
 80107e2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80107e4:	07dc      	lsls	r4, r3, #31
 80107e6:	d50e      	bpl.n	8010806 <_vfiprintf_r+0x6a>
 80107e8:	f04f 30ff 	mov.w	r0, #4294967295
 80107ec:	b01d      	add	sp, #116	; 0x74
 80107ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80107f2:	4b7b      	ldr	r3, [pc, #492]	; (80109e0 <_vfiprintf_r+0x244>)
 80107f4:	429d      	cmp	r5, r3
 80107f6:	d101      	bne.n	80107fc <_vfiprintf_r+0x60>
 80107f8:	68b5      	ldr	r5, [r6, #8]
 80107fa:	e7df      	b.n	80107bc <_vfiprintf_r+0x20>
 80107fc:	4b79      	ldr	r3, [pc, #484]	; (80109e4 <_vfiprintf_r+0x248>)
 80107fe:	429d      	cmp	r5, r3
 8010800:	bf08      	it	eq
 8010802:	68f5      	ldreq	r5, [r6, #12]
 8010804:	e7da      	b.n	80107bc <_vfiprintf_r+0x20>
 8010806:	89ab      	ldrh	r3, [r5, #12]
 8010808:	0598      	lsls	r0, r3, #22
 801080a:	d4ed      	bmi.n	80107e8 <_vfiprintf_r+0x4c>
 801080c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801080e:	f7ff ff69 	bl	80106e4 <__retarget_lock_release_recursive>
 8010812:	e7e9      	b.n	80107e8 <_vfiprintf_r+0x4c>
 8010814:	2300      	movs	r3, #0
 8010816:	9309      	str	r3, [sp, #36]	; 0x24
 8010818:	2320      	movs	r3, #32
 801081a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801081e:	2330      	movs	r3, #48	; 0x30
 8010820:	f04f 0901 	mov.w	r9, #1
 8010824:	f8cd 800c 	str.w	r8, [sp, #12]
 8010828:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 80109e8 <_vfiprintf_r+0x24c>
 801082c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8010830:	4623      	mov	r3, r4
 8010832:	469a      	mov	sl, r3
 8010834:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010838:	b10a      	cbz	r2, 801083e <_vfiprintf_r+0xa2>
 801083a:	2a25      	cmp	r2, #37	; 0x25
 801083c:	d1f9      	bne.n	8010832 <_vfiprintf_r+0x96>
 801083e:	ebba 0b04 	subs.w	fp, sl, r4
 8010842:	d00b      	beq.n	801085c <_vfiprintf_r+0xc0>
 8010844:	465b      	mov	r3, fp
 8010846:	4622      	mov	r2, r4
 8010848:	4629      	mov	r1, r5
 801084a:	4630      	mov	r0, r6
 801084c:	f7ff ff94 	bl	8010778 <__sfputs_r>
 8010850:	3001      	adds	r0, #1
 8010852:	f000 80aa 	beq.w	80109aa <_vfiprintf_r+0x20e>
 8010856:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010858:	445a      	add	r2, fp
 801085a:	9209      	str	r2, [sp, #36]	; 0x24
 801085c:	f89a 3000 	ldrb.w	r3, [sl]
 8010860:	2b00      	cmp	r3, #0
 8010862:	f000 80a2 	beq.w	80109aa <_vfiprintf_r+0x20e>
 8010866:	2300      	movs	r3, #0
 8010868:	f04f 32ff 	mov.w	r2, #4294967295
 801086c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010870:	f10a 0a01 	add.w	sl, sl, #1
 8010874:	9304      	str	r3, [sp, #16]
 8010876:	9307      	str	r3, [sp, #28]
 8010878:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801087c:	931a      	str	r3, [sp, #104]	; 0x68
 801087e:	4654      	mov	r4, sl
 8010880:	2205      	movs	r2, #5
 8010882:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010886:	4858      	ldr	r0, [pc, #352]	; (80109e8 <_vfiprintf_r+0x24c>)
 8010888:	f7ff f9c0 	bl	800fc0c <memchr>
 801088c:	9a04      	ldr	r2, [sp, #16]
 801088e:	b9d8      	cbnz	r0, 80108c8 <_vfiprintf_r+0x12c>
 8010890:	06d1      	lsls	r1, r2, #27
 8010892:	bf44      	itt	mi
 8010894:	2320      	movmi	r3, #32
 8010896:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801089a:	0713      	lsls	r3, r2, #28
 801089c:	bf44      	itt	mi
 801089e:	232b      	movmi	r3, #43	; 0x2b
 80108a0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80108a4:	f89a 3000 	ldrb.w	r3, [sl]
 80108a8:	2b2a      	cmp	r3, #42	; 0x2a
 80108aa:	d015      	beq.n	80108d8 <_vfiprintf_r+0x13c>
 80108ac:	4654      	mov	r4, sl
 80108ae:	2000      	movs	r0, #0
 80108b0:	f04f 0c0a 	mov.w	ip, #10
 80108b4:	9a07      	ldr	r2, [sp, #28]
 80108b6:	4621      	mov	r1, r4
 80108b8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80108bc:	3b30      	subs	r3, #48	; 0x30
 80108be:	2b09      	cmp	r3, #9
 80108c0:	d94e      	bls.n	8010960 <_vfiprintf_r+0x1c4>
 80108c2:	b1b0      	cbz	r0, 80108f2 <_vfiprintf_r+0x156>
 80108c4:	9207      	str	r2, [sp, #28]
 80108c6:	e014      	b.n	80108f2 <_vfiprintf_r+0x156>
 80108c8:	eba0 0308 	sub.w	r3, r0, r8
 80108cc:	fa09 f303 	lsl.w	r3, r9, r3
 80108d0:	4313      	orrs	r3, r2
 80108d2:	46a2      	mov	sl, r4
 80108d4:	9304      	str	r3, [sp, #16]
 80108d6:	e7d2      	b.n	801087e <_vfiprintf_r+0xe2>
 80108d8:	9b03      	ldr	r3, [sp, #12]
 80108da:	1d19      	adds	r1, r3, #4
 80108dc:	681b      	ldr	r3, [r3, #0]
 80108de:	9103      	str	r1, [sp, #12]
 80108e0:	2b00      	cmp	r3, #0
 80108e2:	bfbb      	ittet	lt
 80108e4:	425b      	neglt	r3, r3
 80108e6:	f042 0202 	orrlt.w	r2, r2, #2
 80108ea:	9307      	strge	r3, [sp, #28]
 80108ec:	9307      	strlt	r3, [sp, #28]
 80108ee:	bfb8      	it	lt
 80108f0:	9204      	strlt	r2, [sp, #16]
 80108f2:	7823      	ldrb	r3, [r4, #0]
 80108f4:	2b2e      	cmp	r3, #46	; 0x2e
 80108f6:	d10c      	bne.n	8010912 <_vfiprintf_r+0x176>
 80108f8:	7863      	ldrb	r3, [r4, #1]
 80108fa:	2b2a      	cmp	r3, #42	; 0x2a
 80108fc:	d135      	bne.n	801096a <_vfiprintf_r+0x1ce>
 80108fe:	9b03      	ldr	r3, [sp, #12]
 8010900:	3402      	adds	r4, #2
 8010902:	1d1a      	adds	r2, r3, #4
 8010904:	681b      	ldr	r3, [r3, #0]
 8010906:	9203      	str	r2, [sp, #12]
 8010908:	2b00      	cmp	r3, #0
 801090a:	bfb8      	it	lt
 801090c:	f04f 33ff 	movlt.w	r3, #4294967295
 8010910:	9305      	str	r3, [sp, #20]
 8010912:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80109f8 <_vfiprintf_r+0x25c>
 8010916:	2203      	movs	r2, #3
 8010918:	4650      	mov	r0, sl
 801091a:	7821      	ldrb	r1, [r4, #0]
 801091c:	f7ff f976 	bl	800fc0c <memchr>
 8010920:	b140      	cbz	r0, 8010934 <_vfiprintf_r+0x198>
 8010922:	2340      	movs	r3, #64	; 0x40
 8010924:	eba0 000a 	sub.w	r0, r0, sl
 8010928:	fa03 f000 	lsl.w	r0, r3, r0
 801092c:	9b04      	ldr	r3, [sp, #16]
 801092e:	3401      	adds	r4, #1
 8010930:	4303      	orrs	r3, r0
 8010932:	9304      	str	r3, [sp, #16]
 8010934:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010938:	2206      	movs	r2, #6
 801093a:	482c      	ldr	r0, [pc, #176]	; (80109ec <_vfiprintf_r+0x250>)
 801093c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8010940:	f7ff f964 	bl	800fc0c <memchr>
 8010944:	2800      	cmp	r0, #0
 8010946:	d03f      	beq.n	80109c8 <_vfiprintf_r+0x22c>
 8010948:	4b29      	ldr	r3, [pc, #164]	; (80109f0 <_vfiprintf_r+0x254>)
 801094a:	bb1b      	cbnz	r3, 8010994 <_vfiprintf_r+0x1f8>
 801094c:	9b03      	ldr	r3, [sp, #12]
 801094e:	3307      	adds	r3, #7
 8010950:	f023 0307 	bic.w	r3, r3, #7
 8010954:	3308      	adds	r3, #8
 8010956:	9303      	str	r3, [sp, #12]
 8010958:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801095a:	443b      	add	r3, r7
 801095c:	9309      	str	r3, [sp, #36]	; 0x24
 801095e:	e767      	b.n	8010830 <_vfiprintf_r+0x94>
 8010960:	460c      	mov	r4, r1
 8010962:	2001      	movs	r0, #1
 8010964:	fb0c 3202 	mla	r2, ip, r2, r3
 8010968:	e7a5      	b.n	80108b6 <_vfiprintf_r+0x11a>
 801096a:	2300      	movs	r3, #0
 801096c:	f04f 0c0a 	mov.w	ip, #10
 8010970:	4619      	mov	r1, r3
 8010972:	3401      	adds	r4, #1
 8010974:	9305      	str	r3, [sp, #20]
 8010976:	4620      	mov	r0, r4
 8010978:	f810 2b01 	ldrb.w	r2, [r0], #1
 801097c:	3a30      	subs	r2, #48	; 0x30
 801097e:	2a09      	cmp	r2, #9
 8010980:	d903      	bls.n	801098a <_vfiprintf_r+0x1ee>
 8010982:	2b00      	cmp	r3, #0
 8010984:	d0c5      	beq.n	8010912 <_vfiprintf_r+0x176>
 8010986:	9105      	str	r1, [sp, #20]
 8010988:	e7c3      	b.n	8010912 <_vfiprintf_r+0x176>
 801098a:	4604      	mov	r4, r0
 801098c:	2301      	movs	r3, #1
 801098e:	fb0c 2101 	mla	r1, ip, r1, r2
 8010992:	e7f0      	b.n	8010976 <_vfiprintf_r+0x1da>
 8010994:	ab03      	add	r3, sp, #12
 8010996:	9300      	str	r3, [sp, #0]
 8010998:	462a      	mov	r2, r5
 801099a:	4630      	mov	r0, r6
 801099c:	4b15      	ldr	r3, [pc, #84]	; (80109f4 <_vfiprintf_r+0x258>)
 801099e:	a904      	add	r1, sp, #16
 80109a0:	f7fd feb8 	bl	800e714 <_printf_float>
 80109a4:	4607      	mov	r7, r0
 80109a6:	1c78      	adds	r0, r7, #1
 80109a8:	d1d6      	bne.n	8010958 <_vfiprintf_r+0x1bc>
 80109aa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80109ac:	07d9      	lsls	r1, r3, #31
 80109ae:	d405      	bmi.n	80109bc <_vfiprintf_r+0x220>
 80109b0:	89ab      	ldrh	r3, [r5, #12]
 80109b2:	059a      	lsls	r2, r3, #22
 80109b4:	d402      	bmi.n	80109bc <_vfiprintf_r+0x220>
 80109b6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80109b8:	f7ff fe94 	bl	80106e4 <__retarget_lock_release_recursive>
 80109bc:	89ab      	ldrh	r3, [r5, #12]
 80109be:	065b      	lsls	r3, r3, #25
 80109c0:	f53f af12 	bmi.w	80107e8 <_vfiprintf_r+0x4c>
 80109c4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80109c6:	e711      	b.n	80107ec <_vfiprintf_r+0x50>
 80109c8:	ab03      	add	r3, sp, #12
 80109ca:	9300      	str	r3, [sp, #0]
 80109cc:	462a      	mov	r2, r5
 80109ce:	4630      	mov	r0, r6
 80109d0:	4b08      	ldr	r3, [pc, #32]	; (80109f4 <_vfiprintf_r+0x258>)
 80109d2:	a904      	add	r1, sp, #16
 80109d4:	f7fe f93a 	bl	800ec4c <_printf_i>
 80109d8:	e7e4      	b.n	80109a4 <_vfiprintf_r+0x208>
 80109da:	bf00      	nop
 80109dc:	0801208c 	.word	0x0801208c
 80109e0:	080120ac 	.word	0x080120ac
 80109e4:	0801206c 	.word	0x0801206c
 80109e8:	08011f14 	.word	0x08011f14
 80109ec:	08011f1e 	.word	0x08011f1e
 80109f0:	0800e715 	.word	0x0800e715
 80109f4:	08010779 	.word	0x08010779
 80109f8:	08011f1a 	.word	0x08011f1a

080109fc <__swbuf_r>:
 80109fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80109fe:	460e      	mov	r6, r1
 8010a00:	4614      	mov	r4, r2
 8010a02:	4605      	mov	r5, r0
 8010a04:	b118      	cbz	r0, 8010a0e <__swbuf_r+0x12>
 8010a06:	6983      	ldr	r3, [r0, #24]
 8010a08:	b90b      	cbnz	r3, 8010a0e <__swbuf_r+0x12>
 8010a0a:	f000 f9e7 	bl	8010ddc <__sinit>
 8010a0e:	4b21      	ldr	r3, [pc, #132]	; (8010a94 <__swbuf_r+0x98>)
 8010a10:	429c      	cmp	r4, r3
 8010a12:	d12b      	bne.n	8010a6c <__swbuf_r+0x70>
 8010a14:	686c      	ldr	r4, [r5, #4]
 8010a16:	69a3      	ldr	r3, [r4, #24]
 8010a18:	60a3      	str	r3, [r4, #8]
 8010a1a:	89a3      	ldrh	r3, [r4, #12]
 8010a1c:	071a      	lsls	r2, r3, #28
 8010a1e:	d52f      	bpl.n	8010a80 <__swbuf_r+0x84>
 8010a20:	6923      	ldr	r3, [r4, #16]
 8010a22:	b36b      	cbz	r3, 8010a80 <__swbuf_r+0x84>
 8010a24:	6923      	ldr	r3, [r4, #16]
 8010a26:	6820      	ldr	r0, [r4, #0]
 8010a28:	b2f6      	uxtb	r6, r6
 8010a2a:	1ac0      	subs	r0, r0, r3
 8010a2c:	6963      	ldr	r3, [r4, #20]
 8010a2e:	4637      	mov	r7, r6
 8010a30:	4283      	cmp	r3, r0
 8010a32:	dc04      	bgt.n	8010a3e <__swbuf_r+0x42>
 8010a34:	4621      	mov	r1, r4
 8010a36:	4628      	mov	r0, r5
 8010a38:	f000 f93c 	bl	8010cb4 <_fflush_r>
 8010a3c:	bb30      	cbnz	r0, 8010a8c <__swbuf_r+0x90>
 8010a3e:	68a3      	ldr	r3, [r4, #8]
 8010a40:	3001      	adds	r0, #1
 8010a42:	3b01      	subs	r3, #1
 8010a44:	60a3      	str	r3, [r4, #8]
 8010a46:	6823      	ldr	r3, [r4, #0]
 8010a48:	1c5a      	adds	r2, r3, #1
 8010a4a:	6022      	str	r2, [r4, #0]
 8010a4c:	701e      	strb	r6, [r3, #0]
 8010a4e:	6963      	ldr	r3, [r4, #20]
 8010a50:	4283      	cmp	r3, r0
 8010a52:	d004      	beq.n	8010a5e <__swbuf_r+0x62>
 8010a54:	89a3      	ldrh	r3, [r4, #12]
 8010a56:	07db      	lsls	r3, r3, #31
 8010a58:	d506      	bpl.n	8010a68 <__swbuf_r+0x6c>
 8010a5a:	2e0a      	cmp	r6, #10
 8010a5c:	d104      	bne.n	8010a68 <__swbuf_r+0x6c>
 8010a5e:	4621      	mov	r1, r4
 8010a60:	4628      	mov	r0, r5
 8010a62:	f000 f927 	bl	8010cb4 <_fflush_r>
 8010a66:	b988      	cbnz	r0, 8010a8c <__swbuf_r+0x90>
 8010a68:	4638      	mov	r0, r7
 8010a6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010a6c:	4b0a      	ldr	r3, [pc, #40]	; (8010a98 <__swbuf_r+0x9c>)
 8010a6e:	429c      	cmp	r4, r3
 8010a70:	d101      	bne.n	8010a76 <__swbuf_r+0x7a>
 8010a72:	68ac      	ldr	r4, [r5, #8]
 8010a74:	e7cf      	b.n	8010a16 <__swbuf_r+0x1a>
 8010a76:	4b09      	ldr	r3, [pc, #36]	; (8010a9c <__swbuf_r+0xa0>)
 8010a78:	429c      	cmp	r4, r3
 8010a7a:	bf08      	it	eq
 8010a7c:	68ec      	ldreq	r4, [r5, #12]
 8010a7e:	e7ca      	b.n	8010a16 <__swbuf_r+0x1a>
 8010a80:	4621      	mov	r1, r4
 8010a82:	4628      	mov	r0, r5
 8010a84:	f000 f81a 	bl	8010abc <__swsetup_r>
 8010a88:	2800      	cmp	r0, #0
 8010a8a:	d0cb      	beq.n	8010a24 <__swbuf_r+0x28>
 8010a8c:	f04f 37ff 	mov.w	r7, #4294967295
 8010a90:	e7ea      	b.n	8010a68 <__swbuf_r+0x6c>
 8010a92:	bf00      	nop
 8010a94:	0801208c 	.word	0x0801208c
 8010a98:	080120ac 	.word	0x080120ac
 8010a9c:	0801206c 	.word	0x0801206c

08010aa0 <__ascii_wctomb>:
 8010aa0:	4603      	mov	r3, r0
 8010aa2:	4608      	mov	r0, r1
 8010aa4:	b141      	cbz	r1, 8010ab8 <__ascii_wctomb+0x18>
 8010aa6:	2aff      	cmp	r2, #255	; 0xff
 8010aa8:	d904      	bls.n	8010ab4 <__ascii_wctomb+0x14>
 8010aaa:	228a      	movs	r2, #138	; 0x8a
 8010aac:	f04f 30ff 	mov.w	r0, #4294967295
 8010ab0:	601a      	str	r2, [r3, #0]
 8010ab2:	4770      	bx	lr
 8010ab4:	2001      	movs	r0, #1
 8010ab6:	700a      	strb	r2, [r1, #0]
 8010ab8:	4770      	bx	lr
	...

08010abc <__swsetup_r>:
 8010abc:	4b32      	ldr	r3, [pc, #200]	; (8010b88 <__swsetup_r+0xcc>)
 8010abe:	b570      	push	{r4, r5, r6, lr}
 8010ac0:	681d      	ldr	r5, [r3, #0]
 8010ac2:	4606      	mov	r6, r0
 8010ac4:	460c      	mov	r4, r1
 8010ac6:	b125      	cbz	r5, 8010ad2 <__swsetup_r+0x16>
 8010ac8:	69ab      	ldr	r3, [r5, #24]
 8010aca:	b913      	cbnz	r3, 8010ad2 <__swsetup_r+0x16>
 8010acc:	4628      	mov	r0, r5
 8010ace:	f000 f985 	bl	8010ddc <__sinit>
 8010ad2:	4b2e      	ldr	r3, [pc, #184]	; (8010b8c <__swsetup_r+0xd0>)
 8010ad4:	429c      	cmp	r4, r3
 8010ad6:	d10f      	bne.n	8010af8 <__swsetup_r+0x3c>
 8010ad8:	686c      	ldr	r4, [r5, #4]
 8010ada:	89a3      	ldrh	r3, [r4, #12]
 8010adc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8010ae0:	0719      	lsls	r1, r3, #28
 8010ae2:	d42c      	bmi.n	8010b3e <__swsetup_r+0x82>
 8010ae4:	06dd      	lsls	r5, r3, #27
 8010ae6:	d411      	bmi.n	8010b0c <__swsetup_r+0x50>
 8010ae8:	2309      	movs	r3, #9
 8010aea:	6033      	str	r3, [r6, #0]
 8010aec:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8010af0:	f04f 30ff 	mov.w	r0, #4294967295
 8010af4:	81a3      	strh	r3, [r4, #12]
 8010af6:	e03e      	b.n	8010b76 <__swsetup_r+0xba>
 8010af8:	4b25      	ldr	r3, [pc, #148]	; (8010b90 <__swsetup_r+0xd4>)
 8010afa:	429c      	cmp	r4, r3
 8010afc:	d101      	bne.n	8010b02 <__swsetup_r+0x46>
 8010afe:	68ac      	ldr	r4, [r5, #8]
 8010b00:	e7eb      	b.n	8010ada <__swsetup_r+0x1e>
 8010b02:	4b24      	ldr	r3, [pc, #144]	; (8010b94 <__swsetup_r+0xd8>)
 8010b04:	429c      	cmp	r4, r3
 8010b06:	bf08      	it	eq
 8010b08:	68ec      	ldreq	r4, [r5, #12]
 8010b0a:	e7e6      	b.n	8010ada <__swsetup_r+0x1e>
 8010b0c:	0758      	lsls	r0, r3, #29
 8010b0e:	d512      	bpl.n	8010b36 <__swsetup_r+0x7a>
 8010b10:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010b12:	b141      	cbz	r1, 8010b26 <__swsetup_r+0x6a>
 8010b14:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010b18:	4299      	cmp	r1, r3
 8010b1a:	d002      	beq.n	8010b22 <__swsetup_r+0x66>
 8010b1c:	4630      	mov	r0, r6
 8010b1e:	f7fd fcb5 	bl	800e48c <_free_r>
 8010b22:	2300      	movs	r3, #0
 8010b24:	6363      	str	r3, [r4, #52]	; 0x34
 8010b26:	89a3      	ldrh	r3, [r4, #12]
 8010b28:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8010b2c:	81a3      	strh	r3, [r4, #12]
 8010b2e:	2300      	movs	r3, #0
 8010b30:	6063      	str	r3, [r4, #4]
 8010b32:	6923      	ldr	r3, [r4, #16]
 8010b34:	6023      	str	r3, [r4, #0]
 8010b36:	89a3      	ldrh	r3, [r4, #12]
 8010b38:	f043 0308 	orr.w	r3, r3, #8
 8010b3c:	81a3      	strh	r3, [r4, #12]
 8010b3e:	6923      	ldr	r3, [r4, #16]
 8010b40:	b94b      	cbnz	r3, 8010b56 <__swsetup_r+0x9a>
 8010b42:	89a3      	ldrh	r3, [r4, #12]
 8010b44:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8010b48:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010b4c:	d003      	beq.n	8010b56 <__swsetup_r+0x9a>
 8010b4e:	4621      	mov	r1, r4
 8010b50:	4630      	mov	r0, r6
 8010b52:	f000 fa05 	bl	8010f60 <__smakebuf_r>
 8010b56:	89a0      	ldrh	r0, [r4, #12]
 8010b58:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8010b5c:	f010 0301 	ands.w	r3, r0, #1
 8010b60:	d00a      	beq.n	8010b78 <__swsetup_r+0xbc>
 8010b62:	2300      	movs	r3, #0
 8010b64:	60a3      	str	r3, [r4, #8]
 8010b66:	6963      	ldr	r3, [r4, #20]
 8010b68:	425b      	negs	r3, r3
 8010b6a:	61a3      	str	r3, [r4, #24]
 8010b6c:	6923      	ldr	r3, [r4, #16]
 8010b6e:	b943      	cbnz	r3, 8010b82 <__swsetup_r+0xc6>
 8010b70:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8010b74:	d1ba      	bne.n	8010aec <__swsetup_r+0x30>
 8010b76:	bd70      	pop	{r4, r5, r6, pc}
 8010b78:	0781      	lsls	r1, r0, #30
 8010b7a:	bf58      	it	pl
 8010b7c:	6963      	ldrpl	r3, [r4, #20]
 8010b7e:	60a3      	str	r3, [r4, #8]
 8010b80:	e7f4      	b.n	8010b6c <__swsetup_r+0xb0>
 8010b82:	2000      	movs	r0, #0
 8010b84:	e7f7      	b.n	8010b76 <__swsetup_r+0xba>
 8010b86:	bf00      	nop
 8010b88:	200001a8 	.word	0x200001a8
 8010b8c:	0801208c 	.word	0x0801208c
 8010b90:	080120ac 	.word	0x080120ac
 8010b94:	0801206c 	.word	0x0801206c

08010b98 <abort>:
 8010b98:	2006      	movs	r0, #6
 8010b9a:	b508      	push	{r3, lr}
 8010b9c:	f000 fa48 	bl	8011030 <raise>
 8010ba0:	2001      	movs	r0, #1
 8010ba2:	f7f3 fdb8 	bl	8004716 <_exit>
	...

08010ba8 <__sflush_r>:
 8010ba8:	898a      	ldrh	r2, [r1, #12]
 8010baa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010bae:	4605      	mov	r5, r0
 8010bb0:	0710      	lsls	r0, r2, #28
 8010bb2:	460c      	mov	r4, r1
 8010bb4:	d458      	bmi.n	8010c68 <__sflush_r+0xc0>
 8010bb6:	684b      	ldr	r3, [r1, #4]
 8010bb8:	2b00      	cmp	r3, #0
 8010bba:	dc05      	bgt.n	8010bc8 <__sflush_r+0x20>
 8010bbc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8010bbe:	2b00      	cmp	r3, #0
 8010bc0:	dc02      	bgt.n	8010bc8 <__sflush_r+0x20>
 8010bc2:	2000      	movs	r0, #0
 8010bc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010bc8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8010bca:	2e00      	cmp	r6, #0
 8010bcc:	d0f9      	beq.n	8010bc2 <__sflush_r+0x1a>
 8010bce:	2300      	movs	r3, #0
 8010bd0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8010bd4:	682f      	ldr	r7, [r5, #0]
 8010bd6:	602b      	str	r3, [r5, #0]
 8010bd8:	d032      	beq.n	8010c40 <__sflush_r+0x98>
 8010bda:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8010bdc:	89a3      	ldrh	r3, [r4, #12]
 8010bde:	075a      	lsls	r2, r3, #29
 8010be0:	d505      	bpl.n	8010bee <__sflush_r+0x46>
 8010be2:	6863      	ldr	r3, [r4, #4]
 8010be4:	1ac0      	subs	r0, r0, r3
 8010be6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8010be8:	b10b      	cbz	r3, 8010bee <__sflush_r+0x46>
 8010bea:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8010bec:	1ac0      	subs	r0, r0, r3
 8010bee:	2300      	movs	r3, #0
 8010bf0:	4602      	mov	r2, r0
 8010bf2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8010bf4:	4628      	mov	r0, r5
 8010bf6:	6a21      	ldr	r1, [r4, #32]
 8010bf8:	47b0      	blx	r6
 8010bfa:	1c43      	adds	r3, r0, #1
 8010bfc:	89a3      	ldrh	r3, [r4, #12]
 8010bfe:	d106      	bne.n	8010c0e <__sflush_r+0x66>
 8010c00:	6829      	ldr	r1, [r5, #0]
 8010c02:	291d      	cmp	r1, #29
 8010c04:	d82c      	bhi.n	8010c60 <__sflush_r+0xb8>
 8010c06:	4a2a      	ldr	r2, [pc, #168]	; (8010cb0 <__sflush_r+0x108>)
 8010c08:	40ca      	lsrs	r2, r1
 8010c0a:	07d6      	lsls	r6, r2, #31
 8010c0c:	d528      	bpl.n	8010c60 <__sflush_r+0xb8>
 8010c0e:	2200      	movs	r2, #0
 8010c10:	6062      	str	r2, [r4, #4]
 8010c12:	6922      	ldr	r2, [r4, #16]
 8010c14:	04d9      	lsls	r1, r3, #19
 8010c16:	6022      	str	r2, [r4, #0]
 8010c18:	d504      	bpl.n	8010c24 <__sflush_r+0x7c>
 8010c1a:	1c42      	adds	r2, r0, #1
 8010c1c:	d101      	bne.n	8010c22 <__sflush_r+0x7a>
 8010c1e:	682b      	ldr	r3, [r5, #0]
 8010c20:	b903      	cbnz	r3, 8010c24 <__sflush_r+0x7c>
 8010c22:	6560      	str	r0, [r4, #84]	; 0x54
 8010c24:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010c26:	602f      	str	r7, [r5, #0]
 8010c28:	2900      	cmp	r1, #0
 8010c2a:	d0ca      	beq.n	8010bc2 <__sflush_r+0x1a>
 8010c2c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010c30:	4299      	cmp	r1, r3
 8010c32:	d002      	beq.n	8010c3a <__sflush_r+0x92>
 8010c34:	4628      	mov	r0, r5
 8010c36:	f7fd fc29 	bl	800e48c <_free_r>
 8010c3a:	2000      	movs	r0, #0
 8010c3c:	6360      	str	r0, [r4, #52]	; 0x34
 8010c3e:	e7c1      	b.n	8010bc4 <__sflush_r+0x1c>
 8010c40:	6a21      	ldr	r1, [r4, #32]
 8010c42:	2301      	movs	r3, #1
 8010c44:	4628      	mov	r0, r5
 8010c46:	47b0      	blx	r6
 8010c48:	1c41      	adds	r1, r0, #1
 8010c4a:	d1c7      	bne.n	8010bdc <__sflush_r+0x34>
 8010c4c:	682b      	ldr	r3, [r5, #0]
 8010c4e:	2b00      	cmp	r3, #0
 8010c50:	d0c4      	beq.n	8010bdc <__sflush_r+0x34>
 8010c52:	2b1d      	cmp	r3, #29
 8010c54:	d001      	beq.n	8010c5a <__sflush_r+0xb2>
 8010c56:	2b16      	cmp	r3, #22
 8010c58:	d101      	bne.n	8010c5e <__sflush_r+0xb6>
 8010c5a:	602f      	str	r7, [r5, #0]
 8010c5c:	e7b1      	b.n	8010bc2 <__sflush_r+0x1a>
 8010c5e:	89a3      	ldrh	r3, [r4, #12]
 8010c60:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010c64:	81a3      	strh	r3, [r4, #12]
 8010c66:	e7ad      	b.n	8010bc4 <__sflush_r+0x1c>
 8010c68:	690f      	ldr	r7, [r1, #16]
 8010c6a:	2f00      	cmp	r7, #0
 8010c6c:	d0a9      	beq.n	8010bc2 <__sflush_r+0x1a>
 8010c6e:	0793      	lsls	r3, r2, #30
 8010c70:	bf18      	it	ne
 8010c72:	2300      	movne	r3, #0
 8010c74:	680e      	ldr	r6, [r1, #0]
 8010c76:	bf08      	it	eq
 8010c78:	694b      	ldreq	r3, [r1, #20]
 8010c7a:	eba6 0807 	sub.w	r8, r6, r7
 8010c7e:	600f      	str	r7, [r1, #0]
 8010c80:	608b      	str	r3, [r1, #8]
 8010c82:	f1b8 0f00 	cmp.w	r8, #0
 8010c86:	dd9c      	ble.n	8010bc2 <__sflush_r+0x1a>
 8010c88:	4643      	mov	r3, r8
 8010c8a:	463a      	mov	r2, r7
 8010c8c:	4628      	mov	r0, r5
 8010c8e:	6a21      	ldr	r1, [r4, #32]
 8010c90:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8010c92:	47b0      	blx	r6
 8010c94:	2800      	cmp	r0, #0
 8010c96:	dc06      	bgt.n	8010ca6 <__sflush_r+0xfe>
 8010c98:	89a3      	ldrh	r3, [r4, #12]
 8010c9a:	f04f 30ff 	mov.w	r0, #4294967295
 8010c9e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010ca2:	81a3      	strh	r3, [r4, #12]
 8010ca4:	e78e      	b.n	8010bc4 <__sflush_r+0x1c>
 8010ca6:	4407      	add	r7, r0
 8010ca8:	eba8 0800 	sub.w	r8, r8, r0
 8010cac:	e7e9      	b.n	8010c82 <__sflush_r+0xda>
 8010cae:	bf00      	nop
 8010cb0:	20400001 	.word	0x20400001

08010cb4 <_fflush_r>:
 8010cb4:	b538      	push	{r3, r4, r5, lr}
 8010cb6:	690b      	ldr	r3, [r1, #16]
 8010cb8:	4605      	mov	r5, r0
 8010cba:	460c      	mov	r4, r1
 8010cbc:	b913      	cbnz	r3, 8010cc4 <_fflush_r+0x10>
 8010cbe:	2500      	movs	r5, #0
 8010cc0:	4628      	mov	r0, r5
 8010cc2:	bd38      	pop	{r3, r4, r5, pc}
 8010cc4:	b118      	cbz	r0, 8010cce <_fflush_r+0x1a>
 8010cc6:	6983      	ldr	r3, [r0, #24]
 8010cc8:	b90b      	cbnz	r3, 8010cce <_fflush_r+0x1a>
 8010cca:	f000 f887 	bl	8010ddc <__sinit>
 8010cce:	4b14      	ldr	r3, [pc, #80]	; (8010d20 <_fflush_r+0x6c>)
 8010cd0:	429c      	cmp	r4, r3
 8010cd2:	d11b      	bne.n	8010d0c <_fflush_r+0x58>
 8010cd4:	686c      	ldr	r4, [r5, #4]
 8010cd6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010cda:	2b00      	cmp	r3, #0
 8010cdc:	d0ef      	beq.n	8010cbe <_fflush_r+0xa>
 8010cde:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8010ce0:	07d0      	lsls	r0, r2, #31
 8010ce2:	d404      	bmi.n	8010cee <_fflush_r+0x3a>
 8010ce4:	0599      	lsls	r1, r3, #22
 8010ce6:	d402      	bmi.n	8010cee <_fflush_r+0x3a>
 8010ce8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010cea:	f7ff fcfa 	bl	80106e2 <__retarget_lock_acquire_recursive>
 8010cee:	4628      	mov	r0, r5
 8010cf0:	4621      	mov	r1, r4
 8010cf2:	f7ff ff59 	bl	8010ba8 <__sflush_r>
 8010cf6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8010cf8:	4605      	mov	r5, r0
 8010cfa:	07da      	lsls	r2, r3, #31
 8010cfc:	d4e0      	bmi.n	8010cc0 <_fflush_r+0xc>
 8010cfe:	89a3      	ldrh	r3, [r4, #12]
 8010d00:	059b      	lsls	r3, r3, #22
 8010d02:	d4dd      	bmi.n	8010cc0 <_fflush_r+0xc>
 8010d04:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010d06:	f7ff fced 	bl	80106e4 <__retarget_lock_release_recursive>
 8010d0a:	e7d9      	b.n	8010cc0 <_fflush_r+0xc>
 8010d0c:	4b05      	ldr	r3, [pc, #20]	; (8010d24 <_fflush_r+0x70>)
 8010d0e:	429c      	cmp	r4, r3
 8010d10:	d101      	bne.n	8010d16 <_fflush_r+0x62>
 8010d12:	68ac      	ldr	r4, [r5, #8]
 8010d14:	e7df      	b.n	8010cd6 <_fflush_r+0x22>
 8010d16:	4b04      	ldr	r3, [pc, #16]	; (8010d28 <_fflush_r+0x74>)
 8010d18:	429c      	cmp	r4, r3
 8010d1a:	bf08      	it	eq
 8010d1c:	68ec      	ldreq	r4, [r5, #12]
 8010d1e:	e7da      	b.n	8010cd6 <_fflush_r+0x22>
 8010d20:	0801208c 	.word	0x0801208c
 8010d24:	080120ac 	.word	0x080120ac
 8010d28:	0801206c 	.word	0x0801206c

08010d2c <std>:
 8010d2c:	2300      	movs	r3, #0
 8010d2e:	b510      	push	{r4, lr}
 8010d30:	4604      	mov	r4, r0
 8010d32:	e9c0 3300 	strd	r3, r3, [r0]
 8010d36:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8010d3a:	6083      	str	r3, [r0, #8]
 8010d3c:	8181      	strh	r1, [r0, #12]
 8010d3e:	6643      	str	r3, [r0, #100]	; 0x64
 8010d40:	81c2      	strh	r2, [r0, #14]
 8010d42:	6183      	str	r3, [r0, #24]
 8010d44:	4619      	mov	r1, r3
 8010d46:	2208      	movs	r2, #8
 8010d48:	305c      	adds	r0, #92	; 0x5c
 8010d4a:	f7fd fb97 	bl	800e47c <memset>
 8010d4e:	4b05      	ldr	r3, [pc, #20]	; (8010d64 <std+0x38>)
 8010d50:	6224      	str	r4, [r4, #32]
 8010d52:	6263      	str	r3, [r4, #36]	; 0x24
 8010d54:	4b04      	ldr	r3, [pc, #16]	; (8010d68 <std+0x3c>)
 8010d56:	62a3      	str	r3, [r4, #40]	; 0x28
 8010d58:	4b04      	ldr	r3, [pc, #16]	; (8010d6c <std+0x40>)
 8010d5a:	62e3      	str	r3, [r4, #44]	; 0x2c
 8010d5c:	4b04      	ldr	r3, [pc, #16]	; (8010d70 <std+0x44>)
 8010d5e:	6323      	str	r3, [r4, #48]	; 0x30
 8010d60:	bd10      	pop	{r4, pc}
 8010d62:	bf00      	nop
 8010d64:	08011069 	.word	0x08011069
 8010d68:	0801108b 	.word	0x0801108b
 8010d6c:	080110c3 	.word	0x080110c3
 8010d70:	080110e7 	.word	0x080110e7

08010d74 <_cleanup_r>:
 8010d74:	4901      	ldr	r1, [pc, #4]	; (8010d7c <_cleanup_r+0x8>)
 8010d76:	f000 b8af 	b.w	8010ed8 <_fwalk_reent>
 8010d7a:	bf00      	nop
 8010d7c:	08010cb5 	.word	0x08010cb5

08010d80 <__sfmoreglue>:
 8010d80:	b570      	push	{r4, r5, r6, lr}
 8010d82:	2568      	movs	r5, #104	; 0x68
 8010d84:	1e4a      	subs	r2, r1, #1
 8010d86:	4355      	muls	r5, r2
 8010d88:	460e      	mov	r6, r1
 8010d8a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8010d8e:	f7fd fbc9 	bl	800e524 <_malloc_r>
 8010d92:	4604      	mov	r4, r0
 8010d94:	b140      	cbz	r0, 8010da8 <__sfmoreglue+0x28>
 8010d96:	2100      	movs	r1, #0
 8010d98:	e9c0 1600 	strd	r1, r6, [r0]
 8010d9c:	300c      	adds	r0, #12
 8010d9e:	60a0      	str	r0, [r4, #8]
 8010da0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8010da4:	f7fd fb6a 	bl	800e47c <memset>
 8010da8:	4620      	mov	r0, r4
 8010daa:	bd70      	pop	{r4, r5, r6, pc}

08010dac <__sfp_lock_acquire>:
 8010dac:	4801      	ldr	r0, [pc, #4]	; (8010db4 <__sfp_lock_acquire+0x8>)
 8010dae:	f7ff bc98 	b.w	80106e2 <__retarget_lock_acquire_recursive>
 8010db2:	bf00      	nop
 8010db4:	2000217c 	.word	0x2000217c

08010db8 <__sfp_lock_release>:
 8010db8:	4801      	ldr	r0, [pc, #4]	; (8010dc0 <__sfp_lock_release+0x8>)
 8010dba:	f7ff bc93 	b.w	80106e4 <__retarget_lock_release_recursive>
 8010dbe:	bf00      	nop
 8010dc0:	2000217c 	.word	0x2000217c

08010dc4 <__sinit_lock_acquire>:
 8010dc4:	4801      	ldr	r0, [pc, #4]	; (8010dcc <__sinit_lock_acquire+0x8>)
 8010dc6:	f7ff bc8c 	b.w	80106e2 <__retarget_lock_acquire_recursive>
 8010dca:	bf00      	nop
 8010dcc:	20002177 	.word	0x20002177

08010dd0 <__sinit_lock_release>:
 8010dd0:	4801      	ldr	r0, [pc, #4]	; (8010dd8 <__sinit_lock_release+0x8>)
 8010dd2:	f7ff bc87 	b.w	80106e4 <__retarget_lock_release_recursive>
 8010dd6:	bf00      	nop
 8010dd8:	20002177 	.word	0x20002177

08010ddc <__sinit>:
 8010ddc:	b510      	push	{r4, lr}
 8010dde:	4604      	mov	r4, r0
 8010de0:	f7ff fff0 	bl	8010dc4 <__sinit_lock_acquire>
 8010de4:	69a3      	ldr	r3, [r4, #24]
 8010de6:	b11b      	cbz	r3, 8010df0 <__sinit+0x14>
 8010de8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010dec:	f7ff bff0 	b.w	8010dd0 <__sinit_lock_release>
 8010df0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8010df4:	6523      	str	r3, [r4, #80]	; 0x50
 8010df6:	4b13      	ldr	r3, [pc, #76]	; (8010e44 <__sinit+0x68>)
 8010df8:	4a13      	ldr	r2, [pc, #76]	; (8010e48 <__sinit+0x6c>)
 8010dfa:	681b      	ldr	r3, [r3, #0]
 8010dfc:	62a2      	str	r2, [r4, #40]	; 0x28
 8010dfe:	42a3      	cmp	r3, r4
 8010e00:	bf08      	it	eq
 8010e02:	2301      	moveq	r3, #1
 8010e04:	4620      	mov	r0, r4
 8010e06:	bf08      	it	eq
 8010e08:	61a3      	streq	r3, [r4, #24]
 8010e0a:	f000 f81f 	bl	8010e4c <__sfp>
 8010e0e:	6060      	str	r0, [r4, #4]
 8010e10:	4620      	mov	r0, r4
 8010e12:	f000 f81b 	bl	8010e4c <__sfp>
 8010e16:	60a0      	str	r0, [r4, #8]
 8010e18:	4620      	mov	r0, r4
 8010e1a:	f000 f817 	bl	8010e4c <__sfp>
 8010e1e:	2200      	movs	r2, #0
 8010e20:	2104      	movs	r1, #4
 8010e22:	60e0      	str	r0, [r4, #12]
 8010e24:	6860      	ldr	r0, [r4, #4]
 8010e26:	f7ff ff81 	bl	8010d2c <std>
 8010e2a:	2201      	movs	r2, #1
 8010e2c:	2109      	movs	r1, #9
 8010e2e:	68a0      	ldr	r0, [r4, #8]
 8010e30:	f7ff ff7c 	bl	8010d2c <std>
 8010e34:	2202      	movs	r2, #2
 8010e36:	2112      	movs	r1, #18
 8010e38:	68e0      	ldr	r0, [r4, #12]
 8010e3a:	f7ff ff77 	bl	8010d2c <std>
 8010e3e:	2301      	movs	r3, #1
 8010e40:	61a3      	str	r3, [r4, #24]
 8010e42:	e7d1      	b.n	8010de8 <__sinit+0xc>
 8010e44:	08011ce8 	.word	0x08011ce8
 8010e48:	08010d75 	.word	0x08010d75

08010e4c <__sfp>:
 8010e4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010e4e:	4607      	mov	r7, r0
 8010e50:	f7ff ffac 	bl	8010dac <__sfp_lock_acquire>
 8010e54:	4b1e      	ldr	r3, [pc, #120]	; (8010ed0 <__sfp+0x84>)
 8010e56:	681e      	ldr	r6, [r3, #0]
 8010e58:	69b3      	ldr	r3, [r6, #24]
 8010e5a:	b913      	cbnz	r3, 8010e62 <__sfp+0x16>
 8010e5c:	4630      	mov	r0, r6
 8010e5e:	f7ff ffbd 	bl	8010ddc <__sinit>
 8010e62:	3648      	adds	r6, #72	; 0x48
 8010e64:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8010e68:	3b01      	subs	r3, #1
 8010e6a:	d503      	bpl.n	8010e74 <__sfp+0x28>
 8010e6c:	6833      	ldr	r3, [r6, #0]
 8010e6e:	b30b      	cbz	r3, 8010eb4 <__sfp+0x68>
 8010e70:	6836      	ldr	r6, [r6, #0]
 8010e72:	e7f7      	b.n	8010e64 <__sfp+0x18>
 8010e74:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8010e78:	b9d5      	cbnz	r5, 8010eb0 <__sfp+0x64>
 8010e7a:	4b16      	ldr	r3, [pc, #88]	; (8010ed4 <__sfp+0x88>)
 8010e7c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8010e80:	60e3      	str	r3, [r4, #12]
 8010e82:	6665      	str	r5, [r4, #100]	; 0x64
 8010e84:	f7ff fc2c 	bl	80106e0 <__retarget_lock_init_recursive>
 8010e88:	f7ff ff96 	bl	8010db8 <__sfp_lock_release>
 8010e8c:	2208      	movs	r2, #8
 8010e8e:	4629      	mov	r1, r5
 8010e90:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8010e94:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8010e98:	6025      	str	r5, [r4, #0]
 8010e9a:	61a5      	str	r5, [r4, #24]
 8010e9c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8010ea0:	f7fd faec 	bl	800e47c <memset>
 8010ea4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8010ea8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8010eac:	4620      	mov	r0, r4
 8010eae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010eb0:	3468      	adds	r4, #104	; 0x68
 8010eb2:	e7d9      	b.n	8010e68 <__sfp+0x1c>
 8010eb4:	2104      	movs	r1, #4
 8010eb6:	4638      	mov	r0, r7
 8010eb8:	f7ff ff62 	bl	8010d80 <__sfmoreglue>
 8010ebc:	4604      	mov	r4, r0
 8010ebe:	6030      	str	r0, [r6, #0]
 8010ec0:	2800      	cmp	r0, #0
 8010ec2:	d1d5      	bne.n	8010e70 <__sfp+0x24>
 8010ec4:	f7ff ff78 	bl	8010db8 <__sfp_lock_release>
 8010ec8:	230c      	movs	r3, #12
 8010eca:	603b      	str	r3, [r7, #0]
 8010ecc:	e7ee      	b.n	8010eac <__sfp+0x60>
 8010ece:	bf00      	nop
 8010ed0:	08011ce8 	.word	0x08011ce8
 8010ed4:	ffff0001 	.word	0xffff0001

08010ed8 <_fwalk_reent>:
 8010ed8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010edc:	4606      	mov	r6, r0
 8010ede:	4688      	mov	r8, r1
 8010ee0:	2700      	movs	r7, #0
 8010ee2:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8010ee6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8010eea:	f1b9 0901 	subs.w	r9, r9, #1
 8010eee:	d505      	bpl.n	8010efc <_fwalk_reent+0x24>
 8010ef0:	6824      	ldr	r4, [r4, #0]
 8010ef2:	2c00      	cmp	r4, #0
 8010ef4:	d1f7      	bne.n	8010ee6 <_fwalk_reent+0xe>
 8010ef6:	4638      	mov	r0, r7
 8010ef8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010efc:	89ab      	ldrh	r3, [r5, #12]
 8010efe:	2b01      	cmp	r3, #1
 8010f00:	d907      	bls.n	8010f12 <_fwalk_reent+0x3a>
 8010f02:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8010f06:	3301      	adds	r3, #1
 8010f08:	d003      	beq.n	8010f12 <_fwalk_reent+0x3a>
 8010f0a:	4629      	mov	r1, r5
 8010f0c:	4630      	mov	r0, r6
 8010f0e:	47c0      	blx	r8
 8010f10:	4307      	orrs	r7, r0
 8010f12:	3568      	adds	r5, #104	; 0x68
 8010f14:	e7e9      	b.n	8010eea <_fwalk_reent+0x12>

08010f16 <__swhatbuf_r>:
 8010f16:	b570      	push	{r4, r5, r6, lr}
 8010f18:	460e      	mov	r6, r1
 8010f1a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010f1e:	4614      	mov	r4, r2
 8010f20:	2900      	cmp	r1, #0
 8010f22:	461d      	mov	r5, r3
 8010f24:	b096      	sub	sp, #88	; 0x58
 8010f26:	da07      	bge.n	8010f38 <__swhatbuf_r+0x22>
 8010f28:	2300      	movs	r3, #0
 8010f2a:	602b      	str	r3, [r5, #0]
 8010f2c:	89b3      	ldrh	r3, [r6, #12]
 8010f2e:	061a      	lsls	r2, r3, #24
 8010f30:	d410      	bmi.n	8010f54 <__swhatbuf_r+0x3e>
 8010f32:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010f36:	e00e      	b.n	8010f56 <__swhatbuf_r+0x40>
 8010f38:	466a      	mov	r2, sp
 8010f3a:	f000 f8fb 	bl	8011134 <_fstat_r>
 8010f3e:	2800      	cmp	r0, #0
 8010f40:	dbf2      	blt.n	8010f28 <__swhatbuf_r+0x12>
 8010f42:	9a01      	ldr	r2, [sp, #4]
 8010f44:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8010f48:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8010f4c:	425a      	negs	r2, r3
 8010f4e:	415a      	adcs	r2, r3
 8010f50:	602a      	str	r2, [r5, #0]
 8010f52:	e7ee      	b.n	8010f32 <__swhatbuf_r+0x1c>
 8010f54:	2340      	movs	r3, #64	; 0x40
 8010f56:	2000      	movs	r0, #0
 8010f58:	6023      	str	r3, [r4, #0]
 8010f5a:	b016      	add	sp, #88	; 0x58
 8010f5c:	bd70      	pop	{r4, r5, r6, pc}
	...

08010f60 <__smakebuf_r>:
 8010f60:	898b      	ldrh	r3, [r1, #12]
 8010f62:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8010f64:	079d      	lsls	r5, r3, #30
 8010f66:	4606      	mov	r6, r0
 8010f68:	460c      	mov	r4, r1
 8010f6a:	d507      	bpl.n	8010f7c <__smakebuf_r+0x1c>
 8010f6c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8010f70:	6023      	str	r3, [r4, #0]
 8010f72:	6123      	str	r3, [r4, #16]
 8010f74:	2301      	movs	r3, #1
 8010f76:	6163      	str	r3, [r4, #20]
 8010f78:	b002      	add	sp, #8
 8010f7a:	bd70      	pop	{r4, r5, r6, pc}
 8010f7c:	466a      	mov	r2, sp
 8010f7e:	ab01      	add	r3, sp, #4
 8010f80:	f7ff ffc9 	bl	8010f16 <__swhatbuf_r>
 8010f84:	9900      	ldr	r1, [sp, #0]
 8010f86:	4605      	mov	r5, r0
 8010f88:	4630      	mov	r0, r6
 8010f8a:	f7fd facb 	bl	800e524 <_malloc_r>
 8010f8e:	b948      	cbnz	r0, 8010fa4 <__smakebuf_r+0x44>
 8010f90:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010f94:	059a      	lsls	r2, r3, #22
 8010f96:	d4ef      	bmi.n	8010f78 <__smakebuf_r+0x18>
 8010f98:	f023 0303 	bic.w	r3, r3, #3
 8010f9c:	f043 0302 	orr.w	r3, r3, #2
 8010fa0:	81a3      	strh	r3, [r4, #12]
 8010fa2:	e7e3      	b.n	8010f6c <__smakebuf_r+0xc>
 8010fa4:	4b0d      	ldr	r3, [pc, #52]	; (8010fdc <__smakebuf_r+0x7c>)
 8010fa6:	62b3      	str	r3, [r6, #40]	; 0x28
 8010fa8:	89a3      	ldrh	r3, [r4, #12]
 8010faa:	6020      	str	r0, [r4, #0]
 8010fac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010fb0:	81a3      	strh	r3, [r4, #12]
 8010fb2:	9b00      	ldr	r3, [sp, #0]
 8010fb4:	6120      	str	r0, [r4, #16]
 8010fb6:	6163      	str	r3, [r4, #20]
 8010fb8:	9b01      	ldr	r3, [sp, #4]
 8010fba:	b15b      	cbz	r3, 8010fd4 <__smakebuf_r+0x74>
 8010fbc:	4630      	mov	r0, r6
 8010fbe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010fc2:	f000 f8c9 	bl	8011158 <_isatty_r>
 8010fc6:	b128      	cbz	r0, 8010fd4 <__smakebuf_r+0x74>
 8010fc8:	89a3      	ldrh	r3, [r4, #12]
 8010fca:	f023 0303 	bic.w	r3, r3, #3
 8010fce:	f043 0301 	orr.w	r3, r3, #1
 8010fd2:	81a3      	strh	r3, [r4, #12]
 8010fd4:	89a0      	ldrh	r0, [r4, #12]
 8010fd6:	4305      	orrs	r5, r0
 8010fd8:	81a5      	strh	r5, [r4, #12]
 8010fda:	e7cd      	b.n	8010f78 <__smakebuf_r+0x18>
 8010fdc:	08010d75 	.word	0x08010d75

08010fe0 <_raise_r>:
 8010fe0:	291f      	cmp	r1, #31
 8010fe2:	b538      	push	{r3, r4, r5, lr}
 8010fe4:	4604      	mov	r4, r0
 8010fe6:	460d      	mov	r5, r1
 8010fe8:	d904      	bls.n	8010ff4 <_raise_r+0x14>
 8010fea:	2316      	movs	r3, #22
 8010fec:	6003      	str	r3, [r0, #0]
 8010fee:	f04f 30ff 	mov.w	r0, #4294967295
 8010ff2:	bd38      	pop	{r3, r4, r5, pc}
 8010ff4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8010ff6:	b112      	cbz	r2, 8010ffe <_raise_r+0x1e>
 8010ff8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8010ffc:	b94b      	cbnz	r3, 8011012 <_raise_r+0x32>
 8010ffe:	4620      	mov	r0, r4
 8011000:	f000 f830 	bl	8011064 <_getpid_r>
 8011004:	462a      	mov	r2, r5
 8011006:	4601      	mov	r1, r0
 8011008:	4620      	mov	r0, r4
 801100a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801100e:	f000 b817 	b.w	8011040 <_kill_r>
 8011012:	2b01      	cmp	r3, #1
 8011014:	d00a      	beq.n	801102c <_raise_r+0x4c>
 8011016:	1c59      	adds	r1, r3, #1
 8011018:	d103      	bne.n	8011022 <_raise_r+0x42>
 801101a:	2316      	movs	r3, #22
 801101c:	6003      	str	r3, [r0, #0]
 801101e:	2001      	movs	r0, #1
 8011020:	e7e7      	b.n	8010ff2 <_raise_r+0x12>
 8011022:	2400      	movs	r4, #0
 8011024:	4628      	mov	r0, r5
 8011026:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801102a:	4798      	blx	r3
 801102c:	2000      	movs	r0, #0
 801102e:	e7e0      	b.n	8010ff2 <_raise_r+0x12>

08011030 <raise>:
 8011030:	4b02      	ldr	r3, [pc, #8]	; (801103c <raise+0xc>)
 8011032:	4601      	mov	r1, r0
 8011034:	6818      	ldr	r0, [r3, #0]
 8011036:	f7ff bfd3 	b.w	8010fe0 <_raise_r>
 801103a:	bf00      	nop
 801103c:	200001a8 	.word	0x200001a8

08011040 <_kill_r>:
 8011040:	b538      	push	{r3, r4, r5, lr}
 8011042:	2300      	movs	r3, #0
 8011044:	4d06      	ldr	r5, [pc, #24]	; (8011060 <_kill_r+0x20>)
 8011046:	4604      	mov	r4, r0
 8011048:	4608      	mov	r0, r1
 801104a:	4611      	mov	r1, r2
 801104c:	602b      	str	r3, [r5, #0]
 801104e:	f7f3 fb52 	bl	80046f6 <_kill>
 8011052:	1c43      	adds	r3, r0, #1
 8011054:	d102      	bne.n	801105c <_kill_r+0x1c>
 8011056:	682b      	ldr	r3, [r5, #0]
 8011058:	b103      	cbz	r3, 801105c <_kill_r+0x1c>
 801105a:	6023      	str	r3, [r4, #0]
 801105c:	bd38      	pop	{r3, r4, r5, pc}
 801105e:	bf00      	nop
 8011060:	20002170 	.word	0x20002170

08011064 <_getpid_r>:
 8011064:	f7f3 bb40 	b.w	80046e8 <_getpid>

08011068 <__sread>:
 8011068:	b510      	push	{r4, lr}
 801106a:	460c      	mov	r4, r1
 801106c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011070:	f000 f894 	bl	801119c <_read_r>
 8011074:	2800      	cmp	r0, #0
 8011076:	bfab      	itete	ge
 8011078:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801107a:	89a3      	ldrhlt	r3, [r4, #12]
 801107c:	181b      	addge	r3, r3, r0
 801107e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8011082:	bfac      	ite	ge
 8011084:	6563      	strge	r3, [r4, #84]	; 0x54
 8011086:	81a3      	strhlt	r3, [r4, #12]
 8011088:	bd10      	pop	{r4, pc}

0801108a <__swrite>:
 801108a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801108e:	461f      	mov	r7, r3
 8011090:	898b      	ldrh	r3, [r1, #12]
 8011092:	4605      	mov	r5, r0
 8011094:	05db      	lsls	r3, r3, #23
 8011096:	460c      	mov	r4, r1
 8011098:	4616      	mov	r6, r2
 801109a:	d505      	bpl.n	80110a8 <__swrite+0x1e>
 801109c:	2302      	movs	r3, #2
 801109e:	2200      	movs	r2, #0
 80110a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80110a4:	f000 f868 	bl	8011178 <_lseek_r>
 80110a8:	89a3      	ldrh	r3, [r4, #12]
 80110aa:	4632      	mov	r2, r6
 80110ac:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80110b0:	81a3      	strh	r3, [r4, #12]
 80110b2:	4628      	mov	r0, r5
 80110b4:	463b      	mov	r3, r7
 80110b6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80110ba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80110be:	f000 b817 	b.w	80110f0 <_write_r>

080110c2 <__sseek>:
 80110c2:	b510      	push	{r4, lr}
 80110c4:	460c      	mov	r4, r1
 80110c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80110ca:	f000 f855 	bl	8011178 <_lseek_r>
 80110ce:	1c43      	adds	r3, r0, #1
 80110d0:	89a3      	ldrh	r3, [r4, #12]
 80110d2:	bf15      	itete	ne
 80110d4:	6560      	strne	r0, [r4, #84]	; 0x54
 80110d6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80110da:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80110de:	81a3      	strheq	r3, [r4, #12]
 80110e0:	bf18      	it	ne
 80110e2:	81a3      	strhne	r3, [r4, #12]
 80110e4:	bd10      	pop	{r4, pc}

080110e6 <__sclose>:
 80110e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80110ea:	f000 b813 	b.w	8011114 <_close_r>
	...

080110f0 <_write_r>:
 80110f0:	b538      	push	{r3, r4, r5, lr}
 80110f2:	4604      	mov	r4, r0
 80110f4:	4608      	mov	r0, r1
 80110f6:	4611      	mov	r1, r2
 80110f8:	2200      	movs	r2, #0
 80110fa:	4d05      	ldr	r5, [pc, #20]	; (8011110 <_write_r+0x20>)
 80110fc:	602a      	str	r2, [r5, #0]
 80110fe:	461a      	mov	r2, r3
 8011100:	f7f3 fb30 	bl	8004764 <_write>
 8011104:	1c43      	adds	r3, r0, #1
 8011106:	d102      	bne.n	801110e <_write_r+0x1e>
 8011108:	682b      	ldr	r3, [r5, #0]
 801110a:	b103      	cbz	r3, 801110e <_write_r+0x1e>
 801110c:	6023      	str	r3, [r4, #0]
 801110e:	bd38      	pop	{r3, r4, r5, pc}
 8011110:	20002170 	.word	0x20002170

08011114 <_close_r>:
 8011114:	b538      	push	{r3, r4, r5, lr}
 8011116:	2300      	movs	r3, #0
 8011118:	4d05      	ldr	r5, [pc, #20]	; (8011130 <_close_r+0x1c>)
 801111a:	4604      	mov	r4, r0
 801111c:	4608      	mov	r0, r1
 801111e:	602b      	str	r3, [r5, #0]
 8011120:	f7f3 fb3c 	bl	800479c <_close>
 8011124:	1c43      	adds	r3, r0, #1
 8011126:	d102      	bne.n	801112e <_close_r+0x1a>
 8011128:	682b      	ldr	r3, [r5, #0]
 801112a:	b103      	cbz	r3, 801112e <_close_r+0x1a>
 801112c:	6023      	str	r3, [r4, #0]
 801112e:	bd38      	pop	{r3, r4, r5, pc}
 8011130:	20002170 	.word	0x20002170

08011134 <_fstat_r>:
 8011134:	b538      	push	{r3, r4, r5, lr}
 8011136:	2300      	movs	r3, #0
 8011138:	4d06      	ldr	r5, [pc, #24]	; (8011154 <_fstat_r+0x20>)
 801113a:	4604      	mov	r4, r0
 801113c:	4608      	mov	r0, r1
 801113e:	4611      	mov	r1, r2
 8011140:	602b      	str	r3, [r5, #0]
 8011142:	f7f3 fb36 	bl	80047b2 <_fstat>
 8011146:	1c43      	adds	r3, r0, #1
 8011148:	d102      	bne.n	8011150 <_fstat_r+0x1c>
 801114a:	682b      	ldr	r3, [r5, #0]
 801114c:	b103      	cbz	r3, 8011150 <_fstat_r+0x1c>
 801114e:	6023      	str	r3, [r4, #0]
 8011150:	bd38      	pop	{r3, r4, r5, pc}
 8011152:	bf00      	nop
 8011154:	20002170 	.word	0x20002170

08011158 <_isatty_r>:
 8011158:	b538      	push	{r3, r4, r5, lr}
 801115a:	2300      	movs	r3, #0
 801115c:	4d05      	ldr	r5, [pc, #20]	; (8011174 <_isatty_r+0x1c>)
 801115e:	4604      	mov	r4, r0
 8011160:	4608      	mov	r0, r1
 8011162:	602b      	str	r3, [r5, #0]
 8011164:	f7f3 fb34 	bl	80047d0 <_isatty>
 8011168:	1c43      	adds	r3, r0, #1
 801116a:	d102      	bne.n	8011172 <_isatty_r+0x1a>
 801116c:	682b      	ldr	r3, [r5, #0]
 801116e:	b103      	cbz	r3, 8011172 <_isatty_r+0x1a>
 8011170:	6023      	str	r3, [r4, #0]
 8011172:	bd38      	pop	{r3, r4, r5, pc}
 8011174:	20002170 	.word	0x20002170

08011178 <_lseek_r>:
 8011178:	b538      	push	{r3, r4, r5, lr}
 801117a:	4604      	mov	r4, r0
 801117c:	4608      	mov	r0, r1
 801117e:	4611      	mov	r1, r2
 8011180:	2200      	movs	r2, #0
 8011182:	4d05      	ldr	r5, [pc, #20]	; (8011198 <_lseek_r+0x20>)
 8011184:	602a      	str	r2, [r5, #0]
 8011186:	461a      	mov	r2, r3
 8011188:	f7f3 fb2c 	bl	80047e4 <_lseek>
 801118c:	1c43      	adds	r3, r0, #1
 801118e:	d102      	bne.n	8011196 <_lseek_r+0x1e>
 8011190:	682b      	ldr	r3, [r5, #0]
 8011192:	b103      	cbz	r3, 8011196 <_lseek_r+0x1e>
 8011194:	6023      	str	r3, [r4, #0]
 8011196:	bd38      	pop	{r3, r4, r5, pc}
 8011198:	20002170 	.word	0x20002170

0801119c <_read_r>:
 801119c:	b538      	push	{r3, r4, r5, lr}
 801119e:	4604      	mov	r4, r0
 80111a0:	4608      	mov	r0, r1
 80111a2:	4611      	mov	r1, r2
 80111a4:	2200      	movs	r2, #0
 80111a6:	4d05      	ldr	r5, [pc, #20]	; (80111bc <_read_r+0x20>)
 80111a8:	602a      	str	r2, [r5, #0]
 80111aa:	461a      	mov	r2, r3
 80111ac:	f7f3 fabd 	bl	800472a <_read>
 80111b0:	1c43      	adds	r3, r0, #1
 80111b2:	d102      	bne.n	80111ba <_read_r+0x1e>
 80111b4:	682b      	ldr	r3, [r5, #0]
 80111b6:	b103      	cbz	r3, 80111ba <_read_r+0x1e>
 80111b8:	6023      	str	r3, [r4, #0]
 80111ba:	bd38      	pop	{r3, r4, r5, pc}
 80111bc:	20002170 	.word	0x20002170

080111c0 <_init>:
 80111c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80111c2:	bf00      	nop
 80111c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80111c6:	bc08      	pop	{r3}
 80111c8:	469e      	mov	lr, r3
 80111ca:	4770      	bx	lr

080111cc <_fini>:
 80111cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80111ce:	bf00      	nop
 80111d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80111d2:	bc08      	pop	{r3}
 80111d4:	469e      	mov	lr, r3
 80111d6:	4770      	bx	lr
