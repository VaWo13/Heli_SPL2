
Heli_SPL2_Firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000184  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009b9c  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f8  08009d24  08009d24  00019d24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009e1c  08009e1c  000201ec  2**0
                  CONTENTS
  4 .ARM          00000008  08009e1c  08009e1c  00019e1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009e24  08009e24  000201ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08009e24  08009e24  00019e24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009e2c  08009e2c  00019e2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001ec  20000000  08009e30  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001be4  200001ec  0800a01c  000201ec  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001dd0  0800a01c  00021dd0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   00027477  00000000  00000000  00020215  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000453b  00000000  00000000  0004768c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000014c8  00000000  00000000  0004bbc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001348  00000000  00000000  0004d090  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025eeb  00000000  00000000  0004e3d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c358  00000000  00000000  000742c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c446d  00000000  00000000  0009061b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00154a88  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005e5c  00000000  00000000  00154adc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200001ec 	.word	0x200001ec
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08009d0c 	.word	0x08009d0c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	200001f0 	.word	0x200001f0
 80001c4:	08009d0c 	.word	0x08009d0c

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__aeabi_d2uiz>:
 8000964:	004a      	lsls	r2, r1, #1
 8000966:	d211      	bcs.n	800098c <__aeabi_d2uiz+0x28>
 8000968:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 800096c:	d211      	bcs.n	8000992 <__aeabi_d2uiz+0x2e>
 800096e:	d50d      	bpl.n	800098c <__aeabi_d2uiz+0x28>
 8000970:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000974:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000978:	d40e      	bmi.n	8000998 <__aeabi_d2uiz+0x34>
 800097a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800097e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000982:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000986:	fa23 f002 	lsr.w	r0, r3, r2
 800098a:	4770      	bx	lr
 800098c:	f04f 0000 	mov.w	r0, #0
 8000990:	4770      	bx	lr
 8000992:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000996:	d102      	bne.n	800099e <__aeabi_d2uiz+0x3a>
 8000998:	f04f 30ff 	mov.w	r0, #4294967295
 800099c:	4770      	bx	lr
 800099e:	f04f 0000 	mov.w	r0, #0
 80009a2:	4770      	bx	lr

080009a4 <__aeabi_frsub>:
 80009a4:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80009a8:	e002      	b.n	80009b0 <__addsf3>
 80009aa:	bf00      	nop

080009ac <__aeabi_fsub>:
 80009ac:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080009b0 <__addsf3>:
 80009b0:	0042      	lsls	r2, r0, #1
 80009b2:	bf1f      	itttt	ne
 80009b4:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80009b8:	ea92 0f03 	teqne	r2, r3
 80009bc:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80009c0:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80009c4:	d06a      	beq.n	8000a9c <__addsf3+0xec>
 80009c6:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80009ca:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80009ce:	bfc1      	itttt	gt
 80009d0:	18d2      	addgt	r2, r2, r3
 80009d2:	4041      	eorgt	r1, r0
 80009d4:	4048      	eorgt	r0, r1
 80009d6:	4041      	eorgt	r1, r0
 80009d8:	bfb8      	it	lt
 80009da:	425b      	neglt	r3, r3
 80009dc:	2b19      	cmp	r3, #25
 80009de:	bf88      	it	hi
 80009e0:	4770      	bxhi	lr
 80009e2:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80009e6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80009ea:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80009ee:	bf18      	it	ne
 80009f0:	4240      	negne	r0, r0
 80009f2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80009f6:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80009fa:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80009fe:	bf18      	it	ne
 8000a00:	4249      	negne	r1, r1
 8000a02:	ea92 0f03 	teq	r2, r3
 8000a06:	d03f      	beq.n	8000a88 <__addsf3+0xd8>
 8000a08:	f1a2 0201 	sub.w	r2, r2, #1
 8000a0c:	fa41 fc03 	asr.w	ip, r1, r3
 8000a10:	eb10 000c 	adds.w	r0, r0, ip
 8000a14:	f1c3 0320 	rsb	r3, r3, #32
 8000a18:	fa01 f103 	lsl.w	r1, r1, r3
 8000a1c:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000a20:	d502      	bpl.n	8000a28 <__addsf3+0x78>
 8000a22:	4249      	negs	r1, r1
 8000a24:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000a28:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000a2c:	d313      	bcc.n	8000a56 <__addsf3+0xa6>
 8000a2e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000a32:	d306      	bcc.n	8000a42 <__addsf3+0x92>
 8000a34:	0840      	lsrs	r0, r0, #1
 8000a36:	ea4f 0131 	mov.w	r1, r1, rrx
 8000a3a:	f102 0201 	add.w	r2, r2, #1
 8000a3e:	2afe      	cmp	r2, #254	; 0xfe
 8000a40:	d251      	bcs.n	8000ae6 <__addsf3+0x136>
 8000a42:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000a46:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000a4a:	bf08      	it	eq
 8000a4c:	f020 0001 	biceq.w	r0, r0, #1
 8000a50:	ea40 0003 	orr.w	r0, r0, r3
 8000a54:	4770      	bx	lr
 8000a56:	0049      	lsls	r1, r1, #1
 8000a58:	eb40 0000 	adc.w	r0, r0, r0
 8000a5c:	3a01      	subs	r2, #1
 8000a5e:	bf28      	it	cs
 8000a60:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000a64:	d2ed      	bcs.n	8000a42 <__addsf3+0x92>
 8000a66:	fab0 fc80 	clz	ip, r0
 8000a6a:	f1ac 0c08 	sub.w	ip, ip, #8
 8000a6e:	ebb2 020c 	subs.w	r2, r2, ip
 8000a72:	fa00 f00c 	lsl.w	r0, r0, ip
 8000a76:	bfaa      	itet	ge
 8000a78:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000a7c:	4252      	neglt	r2, r2
 8000a7e:	4318      	orrge	r0, r3
 8000a80:	bfbc      	itt	lt
 8000a82:	40d0      	lsrlt	r0, r2
 8000a84:	4318      	orrlt	r0, r3
 8000a86:	4770      	bx	lr
 8000a88:	f092 0f00 	teq	r2, #0
 8000a8c:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000a90:	bf06      	itte	eq
 8000a92:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000a96:	3201      	addeq	r2, #1
 8000a98:	3b01      	subne	r3, #1
 8000a9a:	e7b5      	b.n	8000a08 <__addsf3+0x58>
 8000a9c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000aa0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000aa4:	bf18      	it	ne
 8000aa6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000aaa:	d021      	beq.n	8000af0 <__addsf3+0x140>
 8000aac:	ea92 0f03 	teq	r2, r3
 8000ab0:	d004      	beq.n	8000abc <__addsf3+0x10c>
 8000ab2:	f092 0f00 	teq	r2, #0
 8000ab6:	bf08      	it	eq
 8000ab8:	4608      	moveq	r0, r1
 8000aba:	4770      	bx	lr
 8000abc:	ea90 0f01 	teq	r0, r1
 8000ac0:	bf1c      	itt	ne
 8000ac2:	2000      	movne	r0, #0
 8000ac4:	4770      	bxne	lr
 8000ac6:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000aca:	d104      	bne.n	8000ad6 <__addsf3+0x126>
 8000acc:	0040      	lsls	r0, r0, #1
 8000ace:	bf28      	it	cs
 8000ad0:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000ad4:	4770      	bx	lr
 8000ad6:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000ada:	bf3c      	itt	cc
 8000adc:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ae0:	4770      	bxcc	lr
 8000ae2:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ae6:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000aea:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000aee:	4770      	bx	lr
 8000af0:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000af4:	bf16      	itet	ne
 8000af6:	4608      	movne	r0, r1
 8000af8:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000afc:	4601      	movne	r1, r0
 8000afe:	0242      	lsls	r2, r0, #9
 8000b00:	bf06      	itte	eq
 8000b02:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000b06:	ea90 0f01 	teqeq	r0, r1
 8000b0a:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000b0e:	4770      	bx	lr

08000b10 <__aeabi_ui2f>:
 8000b10:	f04f 0300 	mov.w	r3, #0
 8000b14:	e004      	b.n	8000b20 <__aeabi_i2f+0x8>
 8000b16:	bf00      	nop

08000b18 <__aeabi_i2f>:
 8000b18:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000b1c:	bf48      	it	mi
 8000b1e:	4240      	negmi	r0, r0
 8000b20:	ea5f 0c00 	movs.w	ip, r0
 8000b24:	bf08      	it	eq
 8000b26:	4770      	bxeq	lr
 8000b28:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000b2c:	4601      	mov	r1, r0
 8000b2e:	f04f 0000 	mov.w	r0, #0
 8000b32:	e01c      	b.n	8000b6e <__aeabi_l2f+0x2a>

08000b34 <__aeabi_ul2f>:
 8000b34:	ea50 0201 	orrs.w	r2, r0, r1
 8000b38:	bf08      	it	eq
 8000b3a:	4770      	bxeq	lr
 8000b3c:	f04f 0300 	mov.w	r3, #0
 8000b40:	e00a      	b.n	8000b58 <__aeabi_l2f+0x14>
 8000b42:	bf00      	nop

08000b44 <__aeabi_l2f>:
 8000b44:	ea50 0201 	orrs.w	r2, r0, r1
 8000b48:	bf08      	it	eq
 8000b4a:	4770      	bxeq	lr
 8000b4c:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000b50:	d502      	bpl.n	8000b58 <__aeabi_l2f+0x14>
 8000b52:	4240      	negs	r0, r0
 8000b54:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b58:	ea5f 0c01 	movs.w	ip, r1
 8000b5c:	bf02      	ittt	eq
 8000b5e:	4684      	moveq	ip, r0
 8000b60:	4601      	moveq	r1, r0
 8000b62:	2000      	moveq	r0, #0
 8000b64:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000b68:	bf08      	it	eq
 8000b6a:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000b6e:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000b72:	fabc f28c 	clz	r2, ip
 8000b76:	3a08      	subs	r2, #8
 8000b78:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000b7c:	db10      	blt.n	8000ba0 <__aeabi_l2f+0x5c>
 8000b7e:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b82:	4463      	add	r3, ip
 8000b84:	fa00 fc02 	lsl.w	ip, r0, r2
 8000b88:	f1c2 0220 	rsb	r2, r2, #32
 8000b8c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000b90:	fa20 f202 	lsr.w	r2, r0, r2
 8000b94:	eb43 0002 	adc.w	r0, r3, r2
 8000b98:	bf08      	it	eq
 8000b9a:	f020 0001 	biceq.w	r0, r0, #1
 8000b9e:	4770      	bx	lr
 8000ba0:	f102 0220 	add.w	r2, r2, #32
 8000ba4:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ba8:	f1c2 0220 	rsb	r2, r2, #32
 8000bac:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000bb0:	fa21 f202 	lsr.w	r2, r1, r2
 8000bb4:	eb43 0002 	adc.w	r0, r3, r2
 8000bb8:	bf08      	it	eq
 8000bba:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000bbe:	4770      	bx	lr

08000bc0 <__aeabi_fmul>:
 8000bc0:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000bc4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000bc8:	bf1e      	ittt	ne
 8000bca:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000bce:	ea92 0f0c 	teqne	r2, ip
 8000bd2:	ea93 0f0c 	teqne	r3, ip
 8000bd6:	d06f      	beq.n	8000cb8 <__aeabi_fmul+0xf8>
 8000bd8:	441a      	add	r2, r3
 8000bda:	ea80 0c01 	eor.w	ip, r0, r1
 8000bde:	0240      	lsls	r0, r0, #9
 8000be0:	bf18      	it	ne
 8000be2:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000be6:	d01e      	beq.n	8000c26 <__aeabi_fmul+0x66>
 8000be8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000bec:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000bf0:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000bf4:	fba0 3101 	umull	r3, r1, r0, r1
 8000bf8:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000bfc:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000c00:	bf3e      	ittt	cc
 8000c02:	0049      	lslcc	r1, r1, #1
 8000c04:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000c08:	005b      	lslcc	r3, r3, #1
 8000c0a:	ea40 0001 	orr.w	r0, r0, r1
 8000c0e:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000c12:	2afd      	cmp	r2, #253	; 0xfd
 8000c14:	d81d      	bhi.n	8000c52 <__aeabi_fmul+0x92>
 8000c16:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000c1a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c1e:	bf08      	it	eq
 8000c20:	f020 0001 	biceq.w	r0, r0, #1
 8000c24:	4770      	bx	lr
 8000c26:	f090 0f00 	teq	r0, #0
 8000c2a:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000c2e:	bf08      	it	eq
 8000c30:	0249      	lsleq	r1, r1, #9
 8000c32:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000c36:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000c3a:	3a7f      	subs	r2, #127	; 0x7f
 8000c3c:	bfc2      	ittt	gt
 8000c3e:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000c42:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000c46:	4770      	bxgt	lr
 8000c48:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c4c:	f04f 0300 	mov.w	r3, #0
 8000c50:	3a01      	subs	r2, #1
 8000c52:	dc5d      	bgt.n	8000d10 <__aeabi_fmul+0x150>
 8000c54:	f112 0f19 	cmn.w	r2, #25
 8000c58:	bfdc      	itt	le
 8000c5a:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000c5e:	4770      	bxle	lr
 8000c60:	f1c2 0200 	rsb	r2, r2, #0
 8000c64:	0041      	lsls	r1, r0, #1
 8000c66:	fa21 f102 	lsr.w	r1, r1, r2
 8000c6a:	f1c2 0220 	rsb	r2, r2, #32
 8000c6e:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c72:	ea5f 0031 	movs.w	r0, r1, rrx
 8000c76:	f140 0000 	adc.w	r0, r0, #0
 8000c7a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000c7e:	bf08      	it	eq
 8000c80:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000c84:	4770      	bx	lr
 8000c86:	f092 0f00 	teq	r2, #0
 8000c8a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000c8e:	bf02      	ittt	eq
 8000c90:	0040      	lsleq	r0, r0, #1
 8000c92:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000c96:	3a01      	subeq	r2, #1
 8000c98:	d0f9      	beq.n	8000c8e <__aeabi_fmul+0xce>
 8000c9a:	ea40 000c 	orr.w	r0, r0, ip
 8000c9e:	f093 0f00 	teq	r3, #0
 8000ca2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ca6:	bf02      	ittt	eq
 8000ca8:	0049      	lsleq	r1, r1, #1
 8000caa:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000cae:	3b01      	subeq	r3, #1
 8000cb0:	d0f9      	beq.n	8000ca6 <__aeabi_fmul+0xe6>
 8000cb2:	ea41 010c 	orr.w	r1, r1, ip
 8000cb6:	e78f      	b.n	8000bd8 <__aeabi_fmul+0x18>
 8000cb8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000cbc:	ea92 0f0c 	teq	r2, ip
 8000cc0:	bf18      	it	ne
 8000cc2:	ea93 0f0c 	teqne	r3, ip
 8000cc6:	d00a      	beq.n	8000cde <__aeabi_fmul+0x11e>
 8000cc8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000ccc:	bf18      	it	ne
 8000cce:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000cd2:	d1d8      	bne.n	8000c86 <__aeabi_fmul+0xc6>
 8000cd4:	ea80 0001 	eor.w	r0, r0, r1
 8000cd8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000cdc:	4770      	bx	lr
 8000cde:	f090 0f00 	teq	r0, #0
 8000ce2:	bf17      	itett	ne
 8000ce4:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000ce8:	4608      	moveq	r0, r1
 8000cea:	f091 0f00 	teqne	r1, #0
 8000cee:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000cf2:	d014      	beq.n	8000d1e <__aeabi_fmul+0x15e>
 8000cf4:	ea92 0f0c 	teq	r2, ip
 8000cf8:	d101      	bne.n	8000cfe <__aeabi_fmul+0x13e>
 8000cfa:	0242      	lsls	r2, r0, #9
 8000cfc:	d10f      	bne.n	8000d1e <__aeabi_fmul+0x15e>
 8000cfe:	ea93 0f0c 	teq	r3, ip
 8000d02:	d103      	bne.n	8000d0c <__aeabi_fmul+0x14c>
 8000d04:	024b      	lsls	r3, r1, #9
 8000d06:	bf18      	it	ne
 8000d08:	4608      	movne	r0, r1
 8000d0a:	d108      	bne.n	8000d1e <__aeabi_fmul+0x15e>
 8000d0c:	ea80 0001 	eor.w	r0, r0, r1
 8000d10:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000d14:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000d18:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d1c:	4770      	bx	lr
 8000d1e:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000d22:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000d26:	4770      	bx	lr

08000d28 <__aeabi_fdiv>:
 8000d28:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d2c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d30:	bf1e      	ittt	ne
 8000d32:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d36:	ea92 0f0c 	teqne	r2, ip
 8000d3a:	ea93 0f0c 	teqne	r3, ip
 8000d3e:	d069      	beq.n	8000e14 <__aeabi_fdiv+0xec>
 8000d40:	eba2 0203 	sub.w	r2, r2, r3
 8000d44:	ea80 0c01 	eor.w	ip, r0, r1
 8000d48:	0249      	lsls	r1, r1, #9
 8000d4a:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000d4e:	d037      	beq.n	8000dc0 <__aeabi_fdiv+0x98>
 8000d50:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000d54:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000d58:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000d5c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d60:	428b      	cmp	r3, r1
 8000d62:	bf38      	it	cc
 8000d64:	005b      	lslcc	r3, r3, #1
 8000d66:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000d6a:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000d6e:	428b      	cmp	r3, r1
 8000d70:	bf24      	itt	cs
 8000d72:	1a5b      	subcs	r3, r3, r1
 8000d74:	ea40 000c 	orrcs.w	r0, r0, ip
 8000d78:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000d7c:	bf24      	itt	cs
 8000d7e:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000d82:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000d86:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000d8a:	bf24      	itt	cs
 8000d8c:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000d90:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000d94:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000d98:	bf24      	itt	cs
 8000d9a:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000d9e:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000da2:	011b      	lsls	r3, r3, #4
 8000da4:	bf18      	it	ne
 8000da6:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000daa:	d1e0      	bne.n	8000d6e <__aeabi_fdiv+0x46>
 8000dac:	2afd      	cmp	r2, #253	; 0xfd
 8000dae:	f63f af50 	bhi.w	8000c52 <__aeabi_fmul+0x92>
 8000db2:	428b      	cmp	r3, r1
 8000db4:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000db8:	bf08      	it	eq
 8000dba:	f020 0001 	biceq.w	r0, r0, #1
 8000dbe:	4770      	bx	lr
 8000dc0:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000dc4:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dc8:	327f      	adds	r2, #127	; 0x7f
 8000dca:	bfc2      	ittt	gt
 8000dcc:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000dd0:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dd4:	4770      	bxgt	lr
 8000dd6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000dda:	f04f 0300 	mov.w	r3, #0
 8000dde:	3a01      	subs	r2, #1
 8000de0:	e737      	b.n	8000c52 <__aeabi_fmul+0x92>
 8000de2:	f092 0f00 	teq	r2, #0
 8000de6:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000dea:	bf02      	ittt	eq
 8000dec:	0040      	lsleq	r0, r0, #1
 8000dee:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000df2:	3a01      	subeq	r2, #1
 8000df4:	d0f9      	beq.n	8000dea <__aeabi_fdiv+0xc2>
 8000df6:	ea40 000c 	orr.w	r0, r0, ip
 8000dfa:	f093 0f00 	teq	r3, #0
 8000dfe:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e02:	bf02      	ittt	eq
 8000e04:	0049      	lsleq	r1, r1, #1
 8000e06:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e0a:	3b01      	subeq	r3, #1
 8000e0c:	d0f9      	beq.n	8000e02 <__aeabi_fdiv+0xda>
 8000e0e:	ea41 010c 	orr.w	r1, r1, ip
 8000e12:	e795      	b.n	8000d40 <__aeabi_fdiv+0x18>
 8000e14:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e18:	ea92 0f0c 	teq	r2, ip
 8000e1c:	d108      	bne.n	8000e30 <__aeabi_fdiv+0x108>
 8000e1e:	0242      	lsls	r2, r0, #9
 8000e20:	f47f af7d 	bne.w	8000d1e <__aeabi_fmul+0x15e>
 8000e24:	ea93 0f0c 	teq	r3, ip
 8000e28:	f47f af70 	bne.w	8000d0c <__aeabi_fmul+0x14c>
 8000e2c:	4608      	mov	r0, r1
 8000e2e:	e776      	b.n	8000d1e <__aeabi_fmul+0x15e>
 8000e30:	ea93 0f0c 	teq	r3, ip
 8000e34:	d104      	bne.n	8000e40 <__aeabi_fdiv+0x118>
 8000e36:	024b      	lsls	r3, r1, #9
 8000e38:	f43f af4c 	beq.w	8000cd4 <__aeabi_fmul+0x114>
 8000e3c:	4608      	mov	r0, r1
 8000e3e:	e76e      	b.n	8000d1e <__aeabi_fmul+0x15e>
 8000e40:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e44:	bf18      	it	ne
 8000e46:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e4a:	d1ca      	bne.n	8000de2 <__aeabi_fdiv+0xba>
 8000e4c:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000e50:	f47f af5c 	bne.w	8000d0c <__aeabi_fmul+0x14c>
 8000e54:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000e58:	f47f af3c 	bne.w	8000cd4 <__aeabi_fmul+0x114>
 8000e5c:	e75f      	b.n	8000d1e <__aeabi_fmul+0x15e>
 8000e5e:	bf00      	nop

08000e60 <__gesf2>:
 8000e60:	f04f 3cff 	mov.w	ip, #4294967295
 8000e64:	e006      	b.n	8000e74 <__cmpsf2+0x4>
 8000e66:	bf00      	nop

08000e68 <__lesf2>:
 8000e68:	f04f 0c01 	mov.w	ip, #1
 8000e6c:	e002      	b.n	8000e74 <__cmpsf2+0x4>
 8000e6e:	bf00      	nop

08000e70 <__cmpsf2>:
 8000e70:	f04f 0c01 	mov.w	ip, #1
 8000e74:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000e78:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000e7c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000e80:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000e84:	bf18      	it	ne
 8000e86:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000e8a:	d011      	beq.n	8000eb0 <__cmpsf2+0x40>
 8000e8c:	b001      	add	sp, #4
 8000e8e:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000e92:	bf18      	it	ne
 8000e94:	ea90 0f01 	teqne	r0, r1
 8000e98:	bf58      	it	pl
 8000e9a:	ebb2 0003 	subspl.w	r0, r2, r3
 8000e9e:	bf88      	it	hi
 8000ea0:	17c8      	asrhi	r0, r1, #31
 8000ea2:	bf38      	it	cc
 8000ea4:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000ea8:	bf18      	it	ne
 8000eaa:	f040 0001 	orrne.w	r0, r0, #1
 8000eae:	4770      	bx	lr
 8000eb0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000eb4:	d102      	bne.n	8000ebc <__cmpsf2+0x4c>
 8000eb6:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000eba:	d105      	bne.n	8000ec8 <__cmpsf2+0x58>
 8000ebc:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000ec0:	d1e4      	bne.n	8000e8c <__cmpsf2+0x1c>
 8000ec2:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000ec6:	d0e1      	beq.n	8000e8c <__cmpsf2+0x1c>
 8000ec8:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ecc:	4770      	bx	lr
 8000ece:	bf00      	nop

08000ed0 <__aeabi_cfrcmple>:
 8000ed0:	4684      	mov	ip, r0
 8000ed2:	4608      	mov	r0, r1
 8000ed4:	4661      	mov	r1, ip
 8000ed6:	e7ff      	b.n	8000ed8 <__aeabi_cfcmpeq>

08000ed8 <__aeabi_cfcmpeq>:
 8000ed8:	b50f      	push	{r0, r1, r2, r3, lr}
 8000eda:	f7ff ffc9 	bl	8000e70 <__cmpsf2>
 8000ede:	2800      	cmp	r0, #0
 8000ee0:	bf48      	it	mi
 8000ee2:	f110 0f00 	cmnmi.w	r0, #0
 8000ee6:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000ee8 <__aeabi_fcmpeq>:
 8000ee8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000eec:	f7ff fff4 	bl	8000ed8 <__aeabi_cfcmpeq>
 8000ef0:	bf0c      	ite	eq
 8000ef2:	2001      	moveq	r0, #1
 8000ef4:	2000      	movne	r0, #0
 8000ef6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000efa:	bf00      	nop

08000efc <__aeabi_fcmplt>:
 8000efc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f00:	f7ff ffea 	bl	8000ed8 <__aeabi_cfcmpeq>
 8000f04:	bf34      	ite	cc
 8000f06:	2001      	movcc	r0, #1
 8000f08:	2000      	movcs	r0, #0
 8000f0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f0e:	bf00      	nop

08000f10 <__aeabi_fcmple>:
 8000f10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f14:	f7ff ffe0 	bl	8000ed8 <__aeabi_cfcmpeq>
 8000f18:	bf94      	ite	ls
 8000f1a:	2001      	movls	r0, #1
 8000f1c:	2000      	movhi	r0, #0
 8000f1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f22:	bf00      	nop

08000f24 <__aeabi_fcmpge>:
 8000f24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f28:	f7ff ffd2 	bl	8000ed0 <__aeabi_cfrcmple>
 8000f2c:	bf94      	ite	ls
 8000f2e:	2001      	movls	r0, #1
 8000f30:	2000      	movhi	r0, #0
 8000f32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f36:	bf00      	nop

08000f38 <__aeabi_fcmpgt>:
 8000f38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f3c:	f7ff ffc8 	bl	8000ed0 <__aeabi_cfrcmple>
 8000f40:	bf34      	ite	cc
 8000f42:	2001      	movcc	r0, #1
 8000f44:	2000      	movcs	r0, #0
 8000f46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f4a:	bf00      	nop

08000f4c <__aeabi_f2uiz>:
 8000f4c:	0042      	lsls	r2, r0, #1
 8000f4e:	d20e      	bcs.n	8000f6e <__aeabi_f2uiz+0x22>
 8000f50:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000f54:	d30b      	bcc.n	8000f6e <__aeabi_f2uiz+0x22>
 8000f56:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000f5a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000f5e:	d409      	bmi.n	8000f74 <__aeabi_f2uiz+0x28>
 8000f60:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000f64:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000f68:	fa23 f002 	lsr.w	r0, r3, r2
 8000f6c:	4770      	bx	lr
 8000f6e:	f04f 0000 	mov.w	r0, #0
 8000f72:	4770      	bx	lr
 8000f74:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000f78:	d101      	bne.n	8000f7e <__aeabi_f2uiz+0x32>
 8000f7a:	0242      	lsls	r2, r0, #9
 8000f7c:	d102      	bne.n	8000f84 <__aeabi_f2uiz+0x38>
 8000f7e:	f04f 30ff 	mov.w	r0, #4294967295
 8000f82:	4770      	bx	lr
 8000f84:	f04f 0000 	mov.w	r0, #0
 8000f88:	4770      	bx	lr
 8000f8a:	bf00      	nop

08000f8c <__aeabi_uldivmod>:
 8000f8c:	b953      	cbnz	r3, 8000fa4 <__aeabi_uldivmod+0x18>
 8000f8e:	b94a      	cbnz	r2, 8000fa4 <__aeabi_uldivmod+0x18>
 8000f90:	2900      	cmp	r1, #0
 8000f92:	bf08      	it	eq
 8000f94:	2800      	cmpeq	r0, #0
 8000f96:	bf1c      	itt	ne
 8000f98:	f04f 31ff 	movne.w	r1, #4294967295
 8000f9c:	f04f 30ff 	movne.w	r0, #4294967295
 8000fa0:	f000 b96e 	b.w	8001280 <__aeabi_idiv0>
 8000fa4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000fa8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000fac:	f000 f806 	bl	8000fbc <__udivmoddi4>
 8000fb0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000fb4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000fb8:	b004      	add	sp, #16
 8000fba:	4770      	bx	lr

08000fbc <__udivmoddi4>:
 8000fbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000fc0:	9e08      	ldr	r6, [sp, #32]
 8000fc2:	460d      	mov	r5, r1
 8000fc4:	4604      	mov	r4, r0
 8000fc6:	468e      	mov	lr, r1
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	f040 8083 	bne.w	80010d4 <__udivmoddi4+0x118>
 8000fce:	428a      	cmp	r2, r1
 8000fd0:	4617      	mov	r7, r2
 8000fd2:	d947      	bls.n	8001064 <__udivmoddi4+0xa8>
 8000fd4:	fab2 f382 	clz	r3, r2
 8000fd8:	b14b      	cbz	r3, 8000fee <__udivmoddi4+0x32>
 8000fda:	f1c3 0120 	rsb	r1, r3, #32
 8000fde:	fa05 fe03 	lsl.w	lr, r5, r3
 8000fe2:	fa20 f101 	lsr.w	r1, r0, r1
 8000fe6:	409f      	lsls	r7, r3
 8000fe8:	ea41 0e0e 	orr.w	lr, r1, lr
 8000fec:	409c      	lsls	r4, r3
 8000fee:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000ff2:	fbbe fcf8 	udiv	ip, lr, r8
 8000ff6:	fa1f f987 	uxth.w	r9, r7
 8000ffa:	fb08 e21c 	mls	r2, r8, ip, lr
 8000ffe:	fb0c f009 	mul.w	r0, ip, r9
 8001002:	0c21      	lsrs	r1, r4, #16
 8001004:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
 8001008:	4290      	cmp	r0, r2
 800100a:	d90a      	bls.n	8001022 <__udivmoddi4+0x66>
 800100c:	18ba      	adds	r2, r7, r2
 800100e:	f10c 31ff 	add.w	r1, ip, #4294967295
 8001012:	f080 8118 	bcs.w	8001246 <__udivmoddi4+0x28a>
 8001016:	4290      	cmp	r0, r2
 8001018:	f240 8115 	bls.w	8001246 <__udivmoddi4+0x28a>
 800101c:	f1ac 0c02 	sub.w	ip, ip, #2
 8001020:	443a      	add	r2, r7
 8001022:	1a12      	subs	r2, r2, r0
 8001024:	fbb2 f0f8 	udiv	r0, r2, r8
 8001028:	fb08 2210 	mls	r2, r8, r0, r2
 800102c:	fb00 f109 	mul.w	r1, r0, r9
 8001030:	b2a4      	uxth	r4, r4
 8001032:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8001036:	42a1      	cmp	r1, r4
 8001038:	d909      	bls.n	800104e <__udivmoddi4+0x92>
 800103a:	193c      	adds	r4, r7, r4
 800103c:	f100 32ff 	add.w	r2, r0, #4294967295
 8001040:	f080 8103 	bcs.w	800124a <__udivmoddi4+0x28e>
 8001044:	42a1      	cmp	r1, r4
 8001046:	f240 8100 	bls.w	800124a <__udivmoddi4+0x28e>
 800104a:	3802      	subs	r0, #2
 800104c:	443c      	add	r4, r7
 800104e:	1a64      	subs	r4, r4, r1
 8001050:	2100      	movs	r1, #0
 8001052:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8001056:	b11e      	cbz	r6, 8001060 <__udivmoddi4+0xa4>
 8001058:	2200      	movs	r2, #0
 800105a:	40dc      	lsrs	r4, r3
 800105c:	e9c6 4200 	strd	r4, r2, [r6]
 8001060:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001064:	b902      	cbnz	r2, 8001068 <__udivmoddi4+0xac>
 8001066:	deff      	udf	#255	; 0xff
 8001068:	fab2 f382 	clz	r3, r2
 800106c:	2b00      	cmp	r3, #0
 800106e:	d14f      	bne.n	8001110 <__udivmoddi4+0x154>
 8001070:	1a8d      	subs	r5, r1, r2
 8001072:	2101      	movs	r1, #1
 8001074:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8001078:	fa1f f882 	uxth.w	r8, r2
 800107c:	fbb5 fcfe 	udiv	ip, r5, lr
 8001080:	fb0e 551c 	mls	r5, lr, ip, r5
 8001084:	fb08 f00c 	mul.w	r0, r8, ip
 8001088:	0c22      	lsrs	r2, r4, #16
 800108a:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
 800108e:	42a8      	cmp	r0, r5
 8001090:	d907      	bls.n	80010a2 <__udivmoddi4+0xe6>
 8001092:	197d      	adds	r5, r7, r5
 8001094:	f10c 32ff 	add.w	r2, ip, #4294967295
 8001098:	d202      	bcs.n	80010a0 <__udivmoddi4+0xe4>
 800109a:	42a8      	cmp	r0, r5
 800109c:	f200 80e9 	bhi.w	8001272 <__udivmoddi4+0x2b6>
 80010a0:	4694      	mov	ip, r2
 80010a2:	1a2d      	subs	r5, r5, r0
 80010a4:	fbb5 f0fe 	udiv	r0, r5, lr
 80010a8:	fb0e 5510 	mls	r5, lr, r0, r5
 80010ac:	fb08 f800 	mul.w	r8, r8, r0
 80010b0:	b2a4      	uxth	r4, r4
 80010b2:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80010b6:	45a0      	cmp	r8, r4
 80010b8:	d907      	bls.n	80010ca <__udivmoddi4+0x10e>
 80010ba:	193c      	adds	r4, r7, r4
 80010bc:	f100 32ff 	add.w	r2, r0, #4294967295
 80010c0:	d202      	bcs.n	80010c8 <__udivmoddi4+0x10c>
 80010c2:	45a0      	cmp	r8, r4
 80010c4:	f200 80d9 	bhi.w	800127a <__udivmoddi4+0x2be>
 80010c8:	4610      	mov	r0, r2
 80010ca:	eba4 0408 	sub.w	r4, r4, r8
 80010ce:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80010d2:	e7c0      	b.n	8001056 <__udivmoddi4+0x9a>
 80010d4:	428b      	cmp	r3, r1
 80010d6:	d908      	bls.n	80010ea <__udivmoddi4+0x12e>
 80010d8:	2e00      	cmp	r6, #0
 80010da:	f000 80b1 	beq.w	8001240 <__udivmoddi4+0x284>
 80010de:	2100      	movs	r1, #0
 80010e0:	e9c6 0500 	strd	r0, r5, [r6]
 80010e4:	4608      	mov	r0, r1
 80010e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80010ea:	fab3 f183 	clz	r1, r3
 80010ee:	2900      	cmp	r1, #0
 80010f0:	d14b      	bne.n	800118a <__udivmoddi4+0x1ce>
 80010f2:	42ab      	cmp	r3, r5
 80010f4:	d302      	bcc.n	80010fc <__udivmoddi4+0x140>
 80010f6:	4282      	cmp	r2, r0
 80010f8:	f200 80b9 	bhi.w	800126e <__udivmoddi4+0x2b2>
 80010fc:	1a84      	subs	r4, r0, r2
 80010fe:	eb65 0303 	sbc.w	r3, r5, r3
 8001102:	2001      	movs	r0, #1
 8001104:	469e      	mov	lr, r3
 8001106:	2e00      	cmp	r6, #0
 8001108:	d0aa      	beq.n	8001060 <__udivmoddi4+0xa4>
 800110a:	e9c6 4e00 	strd	r4, lr, [r6]
 800110e:	e7a7      	b.n	8001060 <__udivmoddi4+0xa4>
 8001110:	409f      	lsls	r7, r3
 8001112:	f1c3 0220 	rsb	r2, r3, #32
 8001116:	40d1      	lsrs	r1, r2
 8001118:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800111c:	fbb1 f0fe 	udiv	r0, r1, lr
 8001120:	fa1f f887 	uxth.w	r8, r7
 8001124:	fb0e 1110 	mls	r1, lr, r0, r1
 8001128:	fa24 f202 	lsr.w	r2, r4, r2
 800112c:	409d      	lsls	r5, r3
 800112e:	fb00 fc08 	mul.w	ip, r0, r8
 8001132:	432a      	orrs	r2, r5
 8001134:	0c15      	lsrs	r5, r2, #16
 8001136:	ea45 4501 	orr.w	r5, r5, r1, lsl #16
 800113a:	45ac      	cmp	ip, r5
 800113c:	fa04 f403 	lsl.w	r4, r4, r3
 8001140:	d909      	bls.n	8001156 <__udivmoddi4+0x19a>
 8001142:	197d      	adds	r5, r7, r5
 8001144:	f100 31ff 	add.w	r1, r0, #4294967295
 8001148:	f080 808f 	bcs.w	800126a <__udivmoddi4+0x2ae>
 800114c:	45ac      	cmp	ip, r5
 800114e:	f240 808c 	bls.w	800126a <__udivmoddi4+0x2ae>
 8001152:	3802      	subs	r0, #2
 8001154:	443d      	add	r5, r7
 8001156:	eba5 050c 	sub.w	r5, r5, ip
 800115a:	fbb5 f1fe 	udiv	r1, r5, lr
 800115e:	fb0e 5c11 	mls	ip, lr, r1, r5
 8001162:	fb01 f908 	mul.w	r9, r1, r8
 8001166:	b295      	uxth	r5, r2
 8001168:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 800116c:	45a9      	cmp	r9, r5
 800116e:	d907      	bls.n	8001180 <__udivmoddi4+0x1c4>
 8001170:	197d      	adds	r5, r7, r5
 8001172:	f101 32ff 	add.w	r2, r1, #4294967295
 8001176:	d274      	bcs.n	8001262 <__udivmoddi4+0x2a6>
 8001178:	45a9      	cmp	r9, r5
 800117a:	d972      	bls.n	8001262 <__udivmoddi4+0x2a6>
 800117c:	3902      	subs	r1, #2
 800117e:	443d      	add	r5, r7
 8001180:	eba5 0509 	sub.w	r5, r5, r9
 8001184:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8001188:	e778      	b.n	800107c <__udivmoddi4+0xc0>
 800118a:	f1c1 0720 	rsb	r7, r1, #32
 800118e:	408b      	lsls	r3, r1
 8001190:	fa22 fc07 	lsr.w	ip, r2, r7
 8001194:	ea4c 0c03 	orr.w	ip, ip, r3
 8001198:	fa25 f407 	lsr.w	r4, r5, r7
 800119c:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80011a0:	fbb4 f9fe 	udiv	r9, r4, lr
 80011a4:	fa1f f88c 	uxth.w	r8, ip
 80011a8:	fb0e 4419 	mls	r4, lr, r9, r4
 80011ac:	fa20 f307 	lsr.w	r3, r0, r7
 80011b0:	fb09 fa08 	mul.w	sl, r9, r8
 80011b4:	408d      	lsls	r5, r1
 80011b6:	431d      	orrs	r5, r3
 80011b8:	0c2b      	lsrs	r3, r5, #16
 80011ba:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80011be:	45a2      	cmp	sl, r4
 80011c0:	fa02 f201 	lsl.w	r2, r2, r1
 80011c4:	fa00 f301 	lsl.w	r3, r0, r1
 80011c8:	d909      	bls.n	80011de <__udivmoddi4+0x222>
 80011ca:	eb1c 0404 	adds.w	r4, ip, r4
 80011ce:	f109 30ff 	add.w	r0, r9, #4294967295
 80011d2:	d248      	bcs.n	8001266 <__udivmoddi4+0x2aa>
 80011d4:	45a2      	cmp	sl, r4
 80011d6:	d946      	bls.n	8001266 <__udivmoddi4+0x2aa>
 80011d8:	f1a9 0902 	sub.w	r9, r9, #2
 80011dc:	4464      	add	r4, ip
 80011de:	eba4 040a 	sub.w	r4, r4, sl
 80011e2:	fbb4 f0fe 	udiv	r0, r4, lr
 80011e6:	fb0e 4410 	mls	r4, lr, r0, r4
 80011ea:	fb00 fa08 	mul.w	sl, r0, r8
 80011ee:	b2ad      	uxth	r5, r5
 80011f0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80011f4:	45a2      	cmp	sl, r4
 80011f6:	d908      	bls.n	800120a <__udivmoddi4+0x24e>
 80011f8:	eb1c 0404 	adds.w	r4, ip, r4
 80011fc:	f100 35ff 	add.w	r5, r0, #4294967295
 8001200:	d22d      	bcs.n	800125e <__udivmoddi4+0x2a2>
 8001202:	45a2      	cmp	sl, r4
 8001204:	d92b      	bls.n	800125e <__udivmoddi4+0x2a2>
 8001206:	3802      	subs	r0, #2
 8001208:	4464      	add	r4, ip
 800120a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800120e:	fba0 8902 	umull	r8, r9, r0, r2
 8001212:	eba4 040a 	sub.w	r4, r4, sl
 8001216:	454c      	cmp	r4, r9
 8001218:	46c6      	mov	lr, r8
 800121a:	464d      	mov	r5, r9
 800121c:	d319      	bcc.n	8001252 <__udivmoddi4+0x296>
 800121e:	d016      	beq.n	800124e <__udivmoddi4+0x292>
 8001220:	b15e      	cbz	r6, 800123a <__udivmoddi4+0x27e>
 8001222:	ebb3 020e 	subs.w	r2, r3, lr
 8001226:	eb64 0405 	sbc.w	r4, r4, r5
 800122a:	fa04 f707 	lsl.w	r7, r4, r7
 800122e:	fa22 f301 	lsr.w	r3, r2, r1
 8001232:	431f      	orrs	r7, r3
 8001234:	40cc      	lsrs	r4, r1
 8001236:	e9c6 7400 	strd	r7, r4, [r6]
 800123a:	2100      	movs	r1, #0
 800123c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001240:	4631      	mov	r1, r6
 8001242:	4630      	mov	r0, r6
 8001244:	e70c      	b.n	8001060 <__udivmoddi4+0xa4>
 8001246:	468c      	mov	ip, r1
 8001248:	e6eb      	b.n	8001022 <__udivmoddi4+0x66>
 800124a:	4610      	mov	r0, r2
 800124c:	e6ff      	b.n	800104e <__udivmoddi4+0x92>
 800124e:	4543      	cmp	r3, r8
 8001250:	d2e6      	bcs.n	8001220 <__udivmoddi4+0x264>
 8001252:	ebb8 0e02 	subs.w	lr, r8, r2
 8001256:	eb69 050c 	sbc.w	r5, r9, ip
 800125a:	3801      	subs	r0, #1
 800125c:	e7e0      	b.n	8001220 <__udivmoddi4+0x264>
 800125e:	4628      	mov	r0, r5
 8001260:	e7d3      	b.n	800120a <__udivmoddi4+0x24e>
 8001262:	4611      	mov	r1, r2
 8001264:	e78c      	b.n	8001180 <__udivmoddi4+0x1c4>
 8001266:	4681      	mov	r9, r0
 8001268:	e7b9      	b.n	80011de <__udivmoddi4+0x222>
 800126a:	4608      	mov	r0, r1
 800126c:	e773      	b.n	8001156 <__udivmoddi4+0x19a>
 800126e:	4608      	mov	r0, r1
 8001270:	e749      	b.n	8001106 <__udivmoddi4+0x14a>
 8001272:	f1ac 0c02 	sub.w	ip, ip, #2
 8001276:	443d      	add	r5, r7
 8001278:	e713      	b.n	80010a2 <__udivmoddi4+0xe6>
 800127a:	3802      	subs	r0, #2
 800127c:	443c      	add	r4, r7
 800127e:	e724      	b.n	80010ca <__udivmoddi4+0x10e>

08001280 <__aeabi_idiv0>:
 8001280:	4770      	bx	lr
 8001282:	bf00      	nop

08001284 <_Z9read_SBUSv>:
uint8_t SBUS_Bytes[SBUS_NuberOfBytes];
uint16_t SBUS_Channels[SBUS_NumberOfChannels];
uint8_t SBUS_CorruptedPackage = false;

void read_SBUS()
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b088      	sub	sp, #32
 8001288:	af00      	add	r7, sp, #0
    //collect bits:

    SBUS_timerCount = TIM11->CNT + SBUS_StartTimeOffset;       //get current clock count register value + time offset
 800128a:	4b81      	ldr	r3, [pc, #516]	; (8001490 <_Z9read_SBUSv+0x20c>)
 800128c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800128e:	b29a      	uxth	r2, r3
 8001290:	4b80      	ldr	r3, [pc, #512]	; (8001494 <_Z9read_SBUSv+0x210>)
 8001292:	801a      	strh	r2, [r3, #0]
    SBUS_RxBitString[0] = true;
 8001294:	4b80      	ldr	r3, [pc, #512]	; (8001498 <_Z9read_SBUSv+0x214>)
 8001296:	2201      	movs	r2, #1
 8001298:	701a      	strb	r2, [r3, #0]
    
    HAL_GPIO_TogglePin(ONBOARD_WRITE_4_GPIO_Port, ONBOARD_WRITE_4_Pin);     //debug pin
 800129a:	2140      	movs	r1, #64	; 0x40
 800129c:	487f      	ldr	r0, [pc, #508]	; (800149c <_Z9read_SBUSv+0x218>)
 800129e:	f001 fe63 	bl	8002f68 <HAL_GPIO_TogglePin>

    for (size_t i = 1; i < SBUS_NumberOfBits; i++)
 80012a2:	2301      	movs	r3, #1
 80012a4:	61fb      	str	r3, [r7, #28]
 80012a6:	69fb      	ldr	r3, [r7, #28]
 80012a8:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80012ac:	d225      	bcs.n	80012fa <_Z9read_SBUSv+0x76>
    {
        HAL_GPIO_TogglePin(ONBOARD_WRITE_4_GPIO_Port, ONBOARD_WRITE_4_Pin);     //debug pin
 80012ae:	2140      	movs	r1, #64	; 0x40
 80012b0:	487a      	ldr	r0, [pc, #488]	; (800149c <_Z9read_SBUSv+0x218>)
 80012b2:	f001 fe59 	bl	8002f68 <HAL_GPIO_TogglePin>
        SBUS_RxBitString[i] = ((ONBOARD_READ_IT_3_GPIO_Port->IDR & ONBOARD_READ_IT_3_Pin) != 0 ? true : false);     //if the pin is HIGH then the value is 1 else 0
 80012b6:	4b79      	ldr	r3, [pc, #484]	; (800149c <_Z9read_SBUSv+0x218>)
 80012b8:	691b      	ldr	r3, [r3, #16]
 80012ba:	b2db      	uxtb	r3, r3
 80012bc:	f003 0301 	and.w	r3, r3, #1
 80012c0:	b2d9      	uxtb	r1, r3
 80012c2:	4a75      	ldr	r2, [pc, #468]	; (8001498 <_Z9read_SBUSv+0x214>)
 80012c4:	69fb      	ldr	r3, [r7, #28]
 80012c6:	4413      	add	r3, r2
 80012c8:	460a      	mov	r2, r1
 80012ca:	701a      	strb	r2, [r3, #0]

        while ((TIM11->CNT - SBUS_timerCount) < 10)
 80012cc:	4b70      	ldr	r3, [pc, #448]	; (8001490 <_Z9read_SBUSv+0x20c>)
 80012ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012d0:	4a70      	ldr	r2, [pc, #448]	; (8001494 <_Z9read_SBUSv+0x210>)
 80012d2:	8812      	ldrh	r2, [r2, #0]
 80012d4:	1a9b      	subs	r3, r3, r2
 80012d6:	2b09      	cmp	r3, #9
 80012d8:	bf94      	ite	ls
 80012da:	2301      	movls	r3, #1
 80012dc:	2300      	movhi	r3, #0
 80012de:	b2db      	uxtb	r3, r3
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d000      	beq.n	80012e6 <_Z9read_SBUSv+0x62>
 80012e4:	e7f2      	b.n	80012cc <_Z9read_SBUSv+0x48>
        {
        }
        SBUS_timerCount += 10;
 80012e6:	4b6b      	ldr	r3, [pc, #428]	; (8001494 <_Z9read_SBUSv+0x210>)
 80012e8:	881b      	ldrh	r3, [r3, #0]
 80012ea:	330a      	adds	r3, #10
 80012ec:	b29a      	uxth	r2, r3
 80012ee:	4b69      	ldr	r3, [pc, #420]	; (8001494 <_Z9read_SBUSv+0x210>)
 80012f0:	801a      	strh	r2, [r3, #0]
    for (size_t i = 1; i < SBUS_NumberOfBits; i++)
 80012f2:	69fb      	ldr	r3, [r7, #28]
 80012f4:	3301      	adds	r3, #1
 80012f6:	61fb      	str	r3, [r7, #28]
 80012f8:	e7d5      	b.n	80012a6 <_Z9read_SBUSv+0x22>
    }

    //check validity:

    SBUS_CorruptedPackage = false;          //reset corrupted package flag
 80012fa:	4b69      	ldr	r3, [pc, #420]	; (80014a0 <_Z9read_SBUSv+0x21c>)
 80012fc:	2200      	movs	r2, #0
 80012fe:	701a      	strb	r2, [r3, #0]

    for (size_t i = 0; i < SBUS_NuberOfBytes; i++)      //repeat for each byte
 8001300:	2300      	movs	r3, #0
 8001302:	61bb      	str	r3, [r7, #24]
 8001304:	69bb      	ldr	r3, [r7, #24]
 8001306:	2b18      	cmp	r3, #24
 8001308:	d85b      	bhi.n	80013c2 <_Z9read_SBUSv+0x13e>
    {
        if ((SBUS_RxBitString[0 + (i * SBUS_BitsPerByte)] == true) & (SBUS_RxBitString[10 + (i * SBUS_BitsPerByte)] == false) & (SBUS_RxBitString[11 + (i * SBUS_BitsPerByte)] == false))       //check start bit, 2 stop bit
 800130a:	69ba      	ldr	r2, [r7, #24]
 800130c:	4613      	mov	r3, r2
 800130e:	005b      	lsls	r3, r3, #1
 8001310:	4413      	add	r3, r2
 8001312:	009b      	lsls	r3, r3, #2
 8001314:	461a      	mov	r2, r3
 8001316:	4b60      	ldr	r3, [pc, #384]	; (8001498 <_Z9read_SBUSv+0x214>)
 8001318:	5c9b      	ldrb	r3, [r3, r2]
 800131a:	2b01      	cmp	r3, #1
 800131c:	bf0c      	ite	eq
 800131e:	2301      	moveq	r3, #1
 8001320:	2300      	movne	r3, #0
 8001322:	b2d9      	uxtb	r1, r3
 8001324:	69ba      	ldr	r2, [r7, #24]
 8001326:	4613      	mov	r3, r2
 8001328:	005b      	lsls	r3, r3, #1
 800132a:	4413      	add	r3, r2
 800132c:	009b      	lsls	r3, r3, #2
 800132e:	330a      	adds	r3, #10
 8001330:	4a59      	ldr	r2, [pc, #356]	; (8001498 <_Z9read_SBUSv+0x214>)
 8001332:	5cd3      	ldrb	r3, [r2, r3]
 8001334:	2b00      	cmp	r3, #0
 8001336:	bf0c      	ite	eq
 8001338:	2301      	moveq	r3, #1
 800133a:	2300      	movne	r3, #0
 800133c:	b2db      	uxtb	r3, r3
 800133e:	400b      	ands	r3, r1
 8001340:	b2db      	uxtb	r3, r3
 8001342:	4619      	mov	r1, r3
 8001344:	69ba      	ldr	r2, [r7, #24]
 8001346:	4613      	mov	r3, r2
 8001348:	005b      	lsls	r3, r3, #1
 800134a:	4413      	add	r3, r2
 800134c:	009b      	lsls	r3, r3, #2
 800134e:	330b      	adds	r3, #11
 8001350:	4a51      	ldr	r2, [pc, #324]	; (8001498 <_Z9read_SBUSv+0x214>)
 8001352:	5cd3      	ldrb	r3, [r2, r3]
 8001354:	2b00      	cmp	r3, #0
 8001356:	bf0c      	ite	eq
 8001358:	2301      	moveq	r3, #1
 800135a:	2300      	movne	r3, #0
 800135c:	b2db      	uxtb	r3, r3
 800135e:	400b      	ands	r3, r1
 8001360:	2b00      	cmp	r3, #0
 8001362:	d027      	beq.n	80013b4 <_Z9read_SBUSv+0x130>
        {
            uint8_t parityCheck = false;
 8001364:	2300      	movs	r3, #0
 8001366:	75fb      	strb	r3, [r7, #23]
            for (size_t x = 0; x < 8; x++)          //generate parity from 8 bits
 8001368:	2300      	movs	r3, #0
 800136a:	613b      	str	r3, [r7, #16]
 800136c:	693b      	ldr	r3, [r7, #16]
 800136e:	2b07      	cmp	r3, #7
 8001370:	d811      	bhi.n	8001396 <_Z9read_SBUSv+0x112>
            {
                parityCheck ^= SBUS_RxBitString[1 + x + (i * SBUS_BitsPerByte)];
 8001372:	69ba      	ldr	r2, [r7, #24]
 8001374:	4613      	mov	r3, r2
 8001376:	005b      	lsls	r3, r3, #1
 8001378:	4413      	add	r3, r2
 800137a:	009b      	lsls	r3, r3, #2
 800137c:	461a      	mov	r2, r3
 800137e:	693b      	ldr	r3, [r7, #16]
 8001380:	4413      	add	r3, r2
 8001382:	3301      	adds	r3, #1
 8001384:	4a44      	ldr	r2, [pc, #272]	; (8001498 <_Z9read_SBUSv+0x214>)
 8001386:	5cd2      	ldrb	r2, [r2, r3]
 8001388:	7dfb      	ldrb	r3, [r7, #23]
 800138a:	4053      	eors	r3, r2
 800138c:	75fb      	strb	r3, [r7, #23]
            for (size_t x = 0; x < 8; x++)          //generate parity from 8 bits
 800138e:	693b      	ldr	r3, [r7, #16]
 8001390:	3301      	adds	r3, #1
 8001392:	613b      	str	r3, [r7, #16]
 8001394:	e7ea      	b.n	800136c <_Z9read_SBUSv+0xe8>
            }

            if (parityCheck != SBUS_RxBitString[9 + (i * SBUS_BitsPerByte)])            //if parity is ok then transfer the bits into the byte
 8001396:	69ba      	ldr	r2, [r7, #24]
 8001398:	4613      	mov	r3, r2
 800139a:	005b      	lsls	r3, r3, #1
 800139c:	4413      	add	r3, r2
 800139e:	009b      	lsls	r3, r3, #2
 80013a0:	3309      	adds	r3, #9
 80013a2:	4a3d      	ldr	r2, [pc, #244]	; (8001498 <_Z9read_SBUSv+0x214>)
 80013a4:	5cd3      	ldrb	r3, [r2, r3]
 80013a6:	7dfa      	ldrb	r2, [r7, #23]
 80013a8:	429a      	cmp	r2, r3
 80013aa:	d106      	bne.n	80013ba <_Z9read_SBUSv+0x136>
                // SBUS_Bytes[i] |= SBUS_RxBitString[1 + 6 + (i * SBUS_BitsPerByte)] << 1;
                // SBUS_Bytes[i] |= SBUS_RxBitString[1 + 7 + (i * SBUS_BitsPerByte)]     ;
            }
            else    //if parity fails set corrupted flag
            {
                SBUS_CorruptedPackage = true;
 80013ac:	4b3c      	ldr	r3, [pc, #240]	; (80014a0 <_Z9read_SBUSv+0x21c>)
 80013ae:	2201      	movs	r2, #1
 80013b0:	701a      	strb	r2, [r3, #0]
 80013b2:	e002      	b.n	80013ba <_Z9read_SBUSv+0x136>
            }
        }
        else    //if start or stop bits fail set corrupted flag
        {
            SBUS_CorruptedPackage = true;
 80013b4:	4b3a      	ldr	r3, [pc, #232]	; (80014a0 <_Z9read_SBUSv+0x21c>)
 80013b6:	2201      	movs	r2, #1
 80013b8:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < SBUS_NuberOfBytes; i++)      //repeat for each byte
 80013ba:	69bb      	ldr	r3, [r7, #24]
 80013bc:	3301      	adds	r3, #1
 80013be:	61bb      	str	r3, [r7, #24]
 80013c0:	e7a0      	b.n	8001304 <_Z9read_SBUSv+0x80>
        }
    }
    
    //assemble channels:

    if (SBUS_CorruptedPackage == false)
 80013c2:	4b37      	ldr	r3, [pc, #220]	; (80014a0 <_Z9read_SBUSv+0x21c>)
 80013c4:	781b      	ldrb	r3, [r3, #0]
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d15e      	bne.n	8001488 <_Z9read_SBUSv+0x204>
    {
        uint8_t byteNumber = 0;         //0 to 21
 80013ca:	2300      	movs	r3, #0
 80013cc:	73fb      	strb	r3, [r7, #15]
        uint8_t bitNumber = 0;          //0(LSB) to 7/(MSB)
 80013ce:	2300      	movs	r3, #0
 80013d0:	73bb      	strb	r3, [r7, #14]
        for (size_t i = 0; i < SBUS_NumberOfChannels; i++)
 80013d2:	2300      	movs	r3, #0
 80013d4:	60bb      	str	r3, [r7, #8]
 80013d6:	68bb      	ldr	r3, [r7, #8]
 80013d8:	2b0f      	cmp	r3, #15
 80013da:	d855      	bhi.n	8001488 <_Z9read_SBUSv+0x204>
        {
            uint8_t bitInChannel = 0;   //0(LSB) to 10(MSB)
 80013dc:	2300      	movs	r3, #0
 80013de:	71fb      	strb	r3, [r7, #7]
            SBUS_Channels[i] = 0;
 80013e0:	4a30      	ldr	r2, [pc, #192]	; (80014a4 <_Z9read_SBUSv+0x220>)
 80013e2:	68bb      	ldr	r3, [r7, #8]
 80013e4:	2100      	movs	r1, #0
 80013e6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
            
            while (bitInChannel <= 10)
 80013ea:	79fb      	ldrb	r3, [r7, #7]
 80013ec:	2b0a      	cmp	r3, #10
 80013ee:	d847      	bhi.n	8001480 <_Z9read_SBUSv+0x1fc>
            {
                if (bitNumber <= 7)
 80013f0:	7bbb      	ldrb	r3, [r7, #14]
 80013f2:	2b07      	cmp	r3, #7
 80013f4:	d81c      	bhi.n	8001430 <_Z9read_SBUSv+0x1ac>
                {
                    //transfer bit
                    SBUS_Channels[i] |= SBUS_RxBitString[13 + (bitNumber) + (byteNumber * SBUS_BitsPerByte)] << bitInChannel;
 80013f6:	4a2b      	ldr	r2, [pc, #172]	; (80014a4 <_Z9read_SBUSv+0x220>)
 80013f8:	68bb      	ldr	r3, [r7, #8]
 80013fa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80013fe:	b219      	sxth	r1, r3
 8001400:	7bbb      	ldrb	r3, [r7, #14]
 8001402:	f103 000d 	add.w	r0, r3, #13
 8001406:	7bfa      	ldrb	r2, [r7, #15]
 8001408:	4613      	mov	r3, r2
 800140a:	005b      	lsls	r3, r3, #1
 800140c:	4413      	add	r3, r2
 800140e:	009b      	lsls	r3, r3, #2
 8001410:	4403      	add	r3, r0
 8001412:	4a21      	ldr	r2, [pc, #132]	; (8001498 <_Z9read_SBUSv+0x214>)
 8001414:	5cd3      	ldrb	r3, [r2, r3]
 8001416:	461a      	mov	r2, r3
 8001418:	79fb      	ldrb	r3, [r7, #7]
 800141a:	fa02 f303 	lsl.w	r3, r2, r3
 800141e:	b21b      	sxth	r3, r3
 8001420:	430b      	orrs	r3, r1
 8001422:	b21b      	sxth	r3, r3
 8001424:	b299      	uxth	r1, r3
 8001426:	4a1f      	ldr	r2, [pc, #124]	; (80014a4 <_Z9read_SBUSv+0x220>)
 8001428:	68bb      	ldr	r3, [r7, #8]
 800142a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 800142e:	e020      	b.n	8001472 <_Z9read_SBUSv+0x1ee>
                }
                else
                {
                    byteNumber ++;
 8001430:	7bfb      	ldrb	r3, [r7, #15]
 8001432:	3301      	adds	r3, #1
 8001434:	73fb      	strb	r3, [r7, #15]
                    bitNumber = 0;
 8001436:	2300      	movs	r3, #0
 8001438:	73bb      	strb	r3, [r7, #14]
                    
                    //transfer bit
                    SBUS_Channels[i] |= SBUS_RxBitString[13 + (bitNumber) + (byteNumber * SBUS_BitsPerByte)] << bitInChannel;
 800143a:	4a1a      	ldr	r2, [pc, #104]	; (80014a4 <_Z9read_SBUSv+0x220>)
 800143c:	68bb      	ldr	r3, [r7, #8]
 800143e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001442:	b219      	sxth	r1, r3
 8001444:	7bbb      	ldrb	r3, [r7, #14]
 8001446:	f103 000d 	add.w	r0, r3, #13
 800144a:	7bfa      	ldrb	r2, [r7, #15]
 800144c:	4613      	mov	r3, r2
 800144e:	005b      	lsls	r3, r3, #1
 8001450:	4413      	add	r3, r2
 8001452:	009b      	lsls	r3, r3, #2
 8001454:	4403      	add	r3, r0
 8001456:	4a10      	ldr	r2, [pc, #64]	; (8001498 <_Z9read_SBUSv+0x214>)
 8001458:	5cd3      	ldrb	r3, [r2, r3]
 800145a:	461a      	mov	r2, r3
 800145c:	79fb      	ldrb	r3, [r7, #7]
 800145e:	fa02 f303 	lsl.w	r3, r2, r3
 8001462:	b21b      	sxth	r3, r3
 8001464:	430b      	orrs	r3, r1
 8001466:	b21b      	sxth	r3, r3
 8001468:	b299      	uxth	r1, r3
 800146a:	4a0e      	ldr	r2, [pc, #56]	; (80014a4 <_Z9read_SBUSv+0x220>)
 800146c:	68bb      	ldr	r3, [r7, #8]
 800146e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
                }
                bitNumber ++;
 8001472:	7bbb      	ldrb	r3, [r7, #14]
 8001474:	3301      	adds	r3, #1
 8001476:	73bb      	strb	r3, [r7, #14]
                bitInChannel ++;
 8001478:	79fb      	ldrb	r3, [r7, #7]
 800147a:	3301      	adds	r3, #1
 800147c:	71fb      	strb	r3, [r7, #7]
            while (bitInChannel <= 10)
 800147e:	e7b4      	b.n	80013ea <_Z9read_SBUSv+0x166>
        for (size_t i = 0; i < SBUS_NumberOfChannels; i++)
 8001480:	68bb      	ldr	r3, [r7, #8]
 8001482:	3301      	adds	r3, #1
 8001484:	60bb      	str	r3, [r7, #8]
 8001486:	e7a6      	b.n	80013d6 <_Z9read_SBUSv+0x152>
            }
        }
    }
 8001488:	bf00      	nop
 800148a:	3720      	adds	r7, #32
 800148c:	46bd      	mov	sp, r7
 800148e:	bd80      	pop	{r7, pc}
 8001490:	40014800 	.word	0x40014800
 8001494:	20000208 	.word	0x20000208
 8001498:	2000020c 	.word	0x2000020c
 800149c:	40020800 	.word	0x40020800
 80014a0:	20000358 	.word	0x20000358
 80014a4:	20000338 	.word	0x20000338

080014a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80014ac:	f000 feec 	bl	8002288 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80014b0:	f000 f824 	bl	80014fc <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80014b4:	f000 f968 	bl	8001788 <_ZL12MX_GPIO_Initv>
  MX_USB_DEVICE_Init();
 80014b8:	f007 f998 	bl	80087ec <MX_USB_DEVICE_Init>
  MX_ADC1_Init();
 80014bc:	f000 f87a 	bl	80015b4 <_ZL12MX_ADC1_Initv>
  MX_I2C1_Init();
 80014c0:	f000 f8b6 	bl	8001630 <_ZL12MX_I2C1_Initv>
  MX_TIM11_Init();
 80014c4:	f000 f8e8 	bl	8001698 <_ZL13MX_TIM11_Initv>
  MX_TIM13_Init();
 80014c8:	f000 f90e 	bl	80016e8 <_ZL13MX_TIM13_Initv>
  MX_TIM14_Init();
 80014cc:	f000 f934 	bl	8001738 <_ZL13MX_TIM14_Initv>

  MPU6050_init();
 80014d0:	f000 fa0c 	bl	80018ec <_ZL12MPU6050_initv>


  /* Initialize interrupts */
  MX_NVIC_Init();
 80014d4:	f000 f862 	bl	800159c <_ZL12MX_NVIC_Initv>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim14);
 80014d8:	4805      	ldr	r0, [pc, #20]	; (80014f0 <main+0x48>)
 80014da:	f004 f83b 	bl	8005554 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim13);
 80014de:	4805      	ldr	r0, [pc, #20]	; (80014f4 <main+0x4c>)
 80014e0:	f004 f838 	bl	8005554 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start(&htim11);
 80014e4:	4804      	ldr	r0, [pc, #16]	; (80014f8 <main+0x50>)
 80014e6:	f003 ffcf 	bl	8005488 <HAL_TIM_Base_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    loop();
 80014ea:	f000 fb37 	bl	8001b5c <_Z4loopv>
 80014ee:	e7fc      	b.n	80014ea <main+0x42>
 80014f0:	20000488 	.word	0x20000488
 80014f4:	20000440 	.word	0x20000440
 80014f8:	200003f8 	.word	0x200003f8

080014fc <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b092      	sub	sp, #72	; 0x48
 8001500:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001502:	f107 0318 	add.w	r3, r7, #24
 8001506:	2230      	movs	r2, #48	; 0x30
 8001508:	2100      	movs	r1, #0
 800150a:	4618      	mov	r0, r3
 800150c:	f007 ffbc 	bl	8009488 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001510:	1d3b      	adds	r3, r7, #4
 8001512:	2200      	movs	r2, #0
 8001514:	601a      	str	r2, [r3, #0]
 8001516:	605a      	str	r2, [r3, #4]
 8001518:	609a      	str	r2, [r3, #8]
 800151a:	60da      	str	r2, [r3, #12]
 800151c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800151e:	2301      	movs	r3, #1
 8001520:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001522:	2301      	movs	r3, #1
 8001524:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001526:	2302      	movs	r3, #2
 8001528:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800152a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800152e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001530:	2310      	movs	r3, #16
 8001532:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLN = 192;
 8001534:	23c0      	movs	r3, #192	; 0xc0
 8001536:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001538:	2302      	movs	r3, #2
 800153a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800153c:	2304      	movs	r3, #4
 800153e:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001540:	f107 0318 	add.w	r3, r7, #24
 8001544:	4618      	mov	r0, r3
 8001546:	f003 fae1 	bl	8004b0c <HAL_RCC_OscConfig>
 800154a:	4603      	mov	r3, r0
 800154c:	2b00      	cmp	r3, #0
 800154e:	bf14      	ite	ne
 8001550:	2301      	movne	r3, #1
 8001552:	2300      	moveq	r3, #0
 8001554:	b2db      	uxtb	r3, r3
 8001556:	2b00      	cmp	r3, #0
 8001558:	d001      	beq.n	800155e <_Z18SystemClock_Configv+0x62>
  {
    Error_Handler();
 800155a:	f000 fabd 	bl	8001ad8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800155e:	230f      	movs	r3, #15
 8001560:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8001562:	2301      	movs	r3, #1
 8001564:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001566:	2300      	movs	r3, #0
 8001568:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800156a:	2300      	movs	r3, #0
 800156c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800156e:	2300      	movs	r3, #0
 8001570:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001572:	1d3b      	adds	r3, r7, #4
 8001574:	2100      	movs	r1, #0
 8001576:	4618      	mov	r0, r3
 8001578:	f003 fd18 	bl	8004fac <HAL_RCC_ClockConfig>
 800157c:	4603      	mov	r3, r0
 800157e:	2b00      	cmp	r3, #0
 8001580:	bf14      	ite	ne
 8001582:	2301      	movne	r3, #1
 8001584:	2300      	moveq	r3, #0
 8001586:	b2db      	uxtb	r3, r3
 8001588:	2b00      	cmp	r3, #0
 800158a:	d001      	beq.n	8001590 <_Z18SystemClock_Configv+0x94>
  {
    Error_Handler();
 800158c:	f000 faa4 	bl	8001ad8 <Error_Handler>
  }
  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 8001590:	f003 fdf8 	bl	8005184 <HAL_RCC_EnableCSS>
}
 8001594:	bf00      	nop
 8001596:	3748      	adds	r7, #72	; 0x48
 8001598:	46bd      	mov	sp, r7
 800159a:	bd80      	pop	{r7, pc}

0800159c <_ZL12MX_NVIC_Initv>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	af00      	add	r7, sp, #0
  /* EXTI0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80015a0:	2200      	movs	r2, #0
 80015a2:	2100      	movs	r1, #0
 80015a4:	2006      	movs	r0, #6
 80015a6:	f001 faf2 	bl	8002b8e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80015aa:	2006      	movs	r0, #6
 80015ac:	f001 fb0b 	bl	8002bc6 <HAL_NVIC_EnableIRQ>
}
 80015b0:	bf00      	nop
 80015b2:	bd80      	pop	{r7, pc}

080015b4 <_ZL12MX_ADC1_Initv>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80015b8:	4b1a      	ldr	r3, [pc, #104]	; (8001624 <_ZL12MX_ADC1_Initv+0x70>)
 80015ba:	4a1b      	ldr	r2, [pc, #108]	; (8001628 <_ZL12MX_ADC1_Initv+0x74>)
 80015bc:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80015be:	4b19      	ldr	r3, [pc, #100]	; (8001624 <_ZL12MX_ADC1_Initv+0x70>)
 80015c0:	2200      	movs	r2, #0
 80015c2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80015c4:	4b17      	ldr	r3, [pc, #92]	; (8001624 <_ZL12MX_ADC1_Initv+0x70>)
 80015c6:	2200      	movs	r2, #0
 80015c8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80015ca:	4b16      	ldr	r3, [pc, #88]	; (8001624 <_ZL12MX_ADC1_Initv+0x70>)
 80015cc:	2201      	movs	r2, #1
 80015ce:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80015d0:	4b14      	ldr	r3, [pc, #80]	; (8001624 <_ZL12MX_ADC1_Initv+0x70>)
 80015d2:	2201      	movs	r2, #1
 80015d4:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80015d6:	4b13      	ldr	r3, [pc, #76]	; (8001624 <_ZL12MX_ADC1_Initv+0x70>)
 80015d8:	2200      	movs	r2, #0
 80015da:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80015de:	4b11      	ldr	r3, [pc, #68]	; (8001624 <_ZL12MX_ADC1_Initv+0x70>)
 80015e0:	2200      	movs	r2, #0
 80015e2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80015e4:	4b0f      	ldr	r3, [pc, #60]	; (8001624 <_ZL12MX_ADC1_Initv+0x70>)
 80015e6:	4a11      	ldr	r2, [pc, #68]	; (800162c <_ZL12MX_ADC1_Initv+0x78>)
 80015e8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80015ea:	4b0e      	ldr	r3, [pc, #56]	; (8001624 <_ZL12MX_ADC1_Initv+0x70>)
 80015ec:	2200      	movs	r2, #0
 80015ee:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80015f0:	4b0c      	ldr	r3, [pc, #48]	; (8001624 <_ZL12MX_ADC1_Initv+0x70>)
 80015f2:	2201      	movs	r2, #1
 80015f4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80015f6:	4b0b      	ldr	r3, [pc, #44]	; (8001624 <_ZL12MX_ADC1_Initv+0x70>)
 80015f8:	2200      	movs	r2, #0
 80015fa:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80015fe:	4b09      	ldr	r3, [pc, #36]	; (8001624 <_ZL12MX_ADC1_Initv+0x70>)
 8001600:	2201      	movs	r2, #1
 8001602:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001604:	4807      	ldr	r0, [pc, #28]	; (8001624 <_ZL12MX_ADC1_Initv+0x70>)
 8001606:	f000 fed1 	bl	80023ac <HAL_ADC_Init>
 800160a:	4603      	mov	r3, r0
 800160c:	2b00      	cmp	r3, #0
 800160e:	bf14      	ite	ne
 8001610:	2301      	movne	r3, #1
 8001612:	2300      	moveq	r3, #0
 8001614:	b2db      	uxtb	r3, r3
 8001616:	2b00      	cmp	r3, #0
 8001618:	d001      	beq.n	800161e <_ZL12MX_ADC1_Initv+0x6a>
  {
    Error_Handler();
 800161a:	f000 fa5d 	bl	8001ad8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800161e:	bf00      	nop
 8001620:	bd80      	pop	{r7, pc}
 8001622:	bf00      	nop
 8001624:	2000035c 	.word	0x2000035c
 8001628:	40012000 	.word	0x40012000
 800162c:	0f000001 	.word	0x0f000001

08001630 <_ZL12MX_I2C1_Initv>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001634:	4b15      	ldr	r3, [pc, #84]	; (800168c <_ZL12MX_I2C1_Initv+0x5c>)
 8001636:	4a16      	ldr	r2, [pc, #88]	; (8001690 <_ZL12MX_I2C1_Initv+0x60>)
 8001638:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800163a:	4b14      	ldr	r3, [pc, #80]	; (800168c <_ZL12MX_I2C1_Initv+0x5c>)
 800163c:	4a15      	ldr	r2, [pc, #84]	; (8001694 <_ZL12MX_I2C1_Initv+0x64>)
 800163e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001640:	4b12      	ldr	r3, [pc, #72]	; (800168c <_ZL12MX_I2C1_Initv+0x5c>)
 8001642:	2200      	movs	r2, #0
 8001644:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001646:	4b11      	ldr	r3, [pc, #68]	; (800168c <_ZL12MX_I2C1_Initv+0x5c>)
 8001648:	2200      	movs	r2, #0
 800164a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800164c:	4b0f      	ldr	r3, [pc, #60]	; (800168c <_ZL12MX_I2C1_Initv+0x5c>)
 800164e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001652:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001654:	4b0d      	ldr	r3, [pc, #52]	; (800168c <_ZL12MX_I2C1_Initv+0x5c>)
 8001656:	2200      	movs	r2, #0
 8001658:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800165a:	4b0c      	ldr	r3, [pc, #48]	; (800168c <_ZL12MX_I2C1_Initv+0x5c>)
 800165c:	2200      	movs	r2, #0
 800165e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001660:	4b0a      	ldr	r3, [pc, #40]	; (800168c <_ZL12MX_I2C1_Initv+0x5c>)
 8001662:	2200      	movs	r2, #0
 8001664:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001666:	4b09      	ldr	r3, [pc, #36]	; (800168c <_ZL12MX_I2C1_Initv+0x5c>)
 8001668:	2200      	movs	r2, #0
 800166a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800166c:	4807      	ldr	r0, [pc, #28]	; (800168c <_ZL12MX_I2C1_Initv+0x5c>)
 800166e:	f001 fcad 	bl	8002fcc <HAL_I2C_Init>
 8001672:	4603      	mov	r3, r0
 8001674:	2b00      	cmp	r3, #0
 8001676:	bf14      	ite	ne
 8001678:	2301      	movne	r3, #1
 800167a:	2300      	moveq	r3, #0
 800167c:	b2db      	uxtb	r3, r3
 800167e:	2b00      	cmp	r3, #0
 8001680:	d001      	beq.n	8001686 <_ZL12MX_I2C1_Initv+0x56>
  {
    Error_Handler();
 8001682:	f000 fa29 	bl	8001ad8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001686:	bf00      	nop
 8001688:	bd80      	pop	{r7, pc}
 800168a:	bf00      	nop
 800168c:	200003a4 	.word	0x200003a4
 8001690:	40005400 	.word	0x40005400
 8001694:	00061a80 	.word	0x00061a80

08001698 <_ZL13MX_TIM11_Initv>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 800169c:	4b10      	ldr	r3, [pc, #64]	; (80016e0 <_ZL13MX_TIM11_Initv+0x48>)
 800169e:	4a11      	ldr	r2, [pc, #68]	; (80016e4 <_ZL13MX_TIM11_Initv+0x4c>)
 80016a0:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 16 - 1;
 80016a2:	4b0f      	ldr	r3, [pc, #60]	; (80016e0 <_ZL13MX_TIM11_Initv+0x48>)
 80016a4:	220f      	movs	r2, #15
 80016a6:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016a8:	4b0d      	ldr	r3, [pc, #52]	; (80016e0 <_ZL13MX_TIM11_Initv+0x48>)
 80016aa:	2200      	movs	r2, #0
 80016ac:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 65535;
 80016ae:	4b0c      	ldr	r3, [pc, #48]	; (80016e0 <_ZL13MX_TIM11_Initv+0x48>)
 80016b0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80016b4:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016b6:	4b0a      	ldr	r3, [pc, #40]	; (80016e0 <_ZL13MX_TIM11_Initv+0x48>)
 80016b8:	2200      	movs	r2, #0
 80016ba:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016bc:	4b08      	ldr	r3, [pc, #32]	; (80016e0 <_ZL13MX_TIM11_Initv+0x48>)
 80016be:	2200      	movs	r2, #0
 80016c0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 80016c2:	4807      	ldr	r0, [pc, #28]	; (80016e0 <_ZL13MX_TIM11_Initv+0x48>)
 80016c4:	f003 fe90 	bl	80053e8 <HAL_TIM_Base_Init>
 80016c8:	4603      	mov	r3, r0
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	bf14      	ite	ne
 80016ce:	2301      	movne	r3, #1
 80016d0:	2300      	moveq	r3, #0
 80016d2:	b2db      	uxtb	r3, r3
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d001      	beq.n	80016dc <_ZL13MX_TIM11_Initv+0x44>
  {
    Error_Handler();
 80016d8:	f000 f9fe 	bl	8001ad8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 80016dc:	bf00      	nop
 80016de:	bd80      	pop	{r7, pc}
 80016e0:	200003f8 	.word	0x200003f8
 80016e4:	40014800 	.word	0x40014800

080016e8 <_ZL13MX_TIM13_Initv>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	af00      	add	r7, sp, #0
  /* USER CODE END TIM13_Init 0 */

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 80016ec:	4b10      	ldr	r3, [pc, #64]	; (8001730 <_ZL13MX_TIM13_Initv+0x48>)
 80016ee:	4a11      	ldr	r2, [pc, #68]	; (8001734 <_ZL13MX_TIM13_Initv+0x4c>)
 80016f0:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 16 - 1;
 80016f2:	4b0f      	ldr	r3, [pc, #60]	; (8001730 <_ZL13MX_TIM13_Initv+0x48>)
 80016f4:	220f      	movs	r2, #15
 80016f6:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016f8:	4b0d      	ldr	r3, [pc, #52]	; (8001730 <_ZL13MX_TIM13_Initv+0x48>)
 80016fa:	2200      	movs	r2, #0
 80016fc:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 65535;
 80016fe:	4b0c      	ldr	r3, [pc, #48]	; (8001730 <_ZL13MX_TIM13_Initv+0x48>)
 8001700:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001704:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001706:	4b0a      	ldr	r3, [pc, #40]	; (8001730 <_ZL13MX_TIM13_Initv+0x48>)
 8001708:	2200      	movs	r2, #0
 800170a:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800170c:	4b08      	ldr	r3, [pc, #32]	; (8001730 <_ZL13MX_TIM13_Initv+0x48>)
 800170e:	2200      	movs	r2, #0
 8001710:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8001712:	4807      	ldr	r0, [pc, #28]	; (8001730 <_ZL13MX_TIM13_Initv+0x48>)
 8001714:	f003 fe68 	bl	80053e8 <HAL_TIM_Base_Init>
 8001718:	4603      	mov	r3, r0
 800171a:	2b00      	cmp	r3, #0
 800171c:	bf14      	ite	ne
 800171e:	2301      	movne	r3, #1
 8001720:	2300      	moveq	r3, #0
 8001722:	b2db      	uxtb	r3, r3
 8001724:	2b00      	cmp	r3, #0
 8001726:	d001      	beq.n	800172c <_ZL13MX_TIM13_Initv+0x44>
  {
    Error_Handler();
 8001728:	f000 f9d6 	bl	8001ad8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 800172c:	bf00      	nop
 800172e:	bd80      	pop	{r7, pc}
 8001730:	20000440 	.word	0x20000440
 8001734:	40001c00 	.word	0x40001c00

08001738 <_ZL13MX_TIM14_Initv>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 800173c:	4b10      	ldr	r3, [pc, #64]	; (8001780 <_ZL13MX_TIM14_Initv+0x48>)
 800173e:	4a11      	ldr	r2, [pc, #68]	; (8001784 <_ZL13MX_TIM14_Initv+0x4c>)
 8001740:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 16 - 1;
 8001742:	4b0f      	ldr	r3, [pc, #60]	; (8001780 <_ZL13MX_TIM14_Initv+0x48>)
 8001744:	220f      	movs	r2, #15
 8001746:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001748:	4b0d      	ldr	r3, [pc, #52]	; (8001780 <_ZL13MX_TIM14_Initv+0x48>)
 800174a:	2200      	movs	r2, #0
 800174c:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 65535;
 800174e:	4b0c      	ldr	r3, [pc, #48]	; (8001780 <_ZL13MX_TIM14_Initv+0x48>)
 8001750:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001754:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001756:	4b0a      	ldr	r3, [pc, #40]	; (8001780 <_ZL13MX_TIM14_Initv+0x48>)
 8001758:	2200      	movs	r2, #0
 800175a:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800175c:	4b08      	ldr	r3, [pc, #32]	; (8001780 <_ZL13MX_TIM14_Initv+0x48>)
 800175e:	2200      	movs	r2, #0
 8001760:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8001762:	4807      	ldr	r0, [pc, #28]	; (8001780 <_ZL13MX_TIM14_Initv+0x48>)
 8001764:	f003 fe40 	bl	80053e8 <HAL_TIM_Base_Init>
 8001768:	4603      	mov	r3, r0
 800176a:	2b00      	cmp	r3, #0
 800176c:	bf14      	ite	ne
 800176e:	2301      	movne	r3, #1
 8001770:	2300      	moveq	r3, #0
 8001772:	b2db      	uxtb	r3, r3
 8001774:	2b00      	cmp	r3, #0
 8001776:	d001      	beq.n	800177c <_ZL13MX_TIM14_Initv+0x44>
  {
    Error_Handler();
 8001778:	f000 f9ae 	bl	8001ad8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 800177c:	bf00      	nop
 800177e:	bd80      	pop	{r7, pc}
 8001780:	20000488 	.word	0x20000488
 8001784:	40002000 	.word	0x40002000

08001788 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b08a      	sub	sp, #40	; 0x28
 800178c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800178e:	f107 0314 	add.w	r3, r7, #20
 8001792:	2200      	movs	r2, #0
 8001794:	601a      	str	r2, [r3, #0]
 8001796:	605a      	str	r2, [r3, #4]
 8001798:	609a      	str	r2, [r3, #8]
 800179a:	60da      	str	r2, [r3, #12]
 800179c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800179e:	2300      	movs	r3, #0
 80017a0:	613b      	str	r3, [r7, #16]
 80017a2:	4b4e      	ldr	r3, [pc, #312]	; (80018dc <_ZL12MX_GPIO_Initv+0x154>)
 80017a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017a6:	4a4d      	ldr	r2, [pc, #308]	; (80018dc <_ZL12MX_GPIO_Initv+0x154>)
 80017a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80017ac:	6313      	str	r3, [r2, #48]	; 0x30
 80017ae:	4b4b      	ldr	r3, [pc, #300]	; (80018dc <_ZL12MX_GPIO_Initv+0x154>)
 80017b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80017b6:	613b      	str	r3, [r7, #16]
 80017b8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80017ba:	2300      	movs	r3, #0
 80017bc:	60fb      	str	r3, [r7, #12]
 80017be:	4b47      	ldr	r3, [pc, #284]	; (80018dc <_ZL12MX_GPIO_Initv+0x154>)
 80017c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017c2:	4a46      	ldr	r2, [pc, #280]	; (80018dc <_ZL12MX_GPIO_Initv+0x154>)
 80017c4:	f043 0304 	orr.w	r3, r3, #4
 80017c8:	6313      	str	r3, [r2, #48]	; 0x30
 80017ca:	4b44      	ldr	r3, [pc, #272]	; (80018dc <_ZL12MX_GPIO_Initv+0x154>)
 80017cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ce:	f003 0304 	and.w	r3, r3, #4
 80017d2:	60fb      	str	r3, [r7, #12]
 80017d4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80017d6:	2300      	movs	r3, #0
 80017d8:	60bb      	str	r3, [r7, #8]
 80017da:	4b40      	ldr	r3, [pc, #256]	; (80018dc <_ZL12MX_GPIO_Initv+0x154>)
 80017dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017de:	4a3f      	ldr	r2, [pc, #252]	; (80018dc <_ZL12MX_GPIO_Initv+0x154>)
 80017e0:	f043 0301 	orr.w	r3, r3, #1
 80017e4:	6313      	str	r3, [r2, #48]	; 0x30
 80017e6:	4b3d      	ldr	r3, [pc, #244]	; (80018dc <_ZL12MX_GPIO_Initv+0x154>)
 80017e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ea:	f003 0301 	and.w	r3, r3, #1
 80017ee:	60bb      	str	r3, [r7, #8]
 80017f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80017f2:	2300      	movs	r3, #0
 80017f4:	607b      	str	r3, [r7, #4]
 80017f6:	4b39      	ldr	r3, [pc, #228]	; (80018dc <_ZL12MX_GPIO_Initv+0x154>)
 80017f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017fa:	4a38      	ldr	r2, [pc, #224]	; (80018dc <_ZL12MX_GPIO_Initv+0x154>)
 80017fc:	f043 0302 	orr.w	r3, r3, #2
 8001800:	6313      	str	r3, [r2, #48]	; 0x30
 8001802:	4b36      	ldr	r3, [pc, #216]	; (80018dc <_ZL12MX_GPIO_Initv+0x154>)
 8001804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001806:	f003 0302 	and.w	r3, r3, #2
 800180a:	607b      	str	r3, [r7, #4]
 800180c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ONBOARD_LED_1_Pin|ONBOARD_LED_2_Pin|ONBOARD_LED_3_Pin|ONBOARD_LED_4_Pin
 800180e:	2200      	movs	r2, #0
 8001810:	f44f 71f8 	mov.w	r1, #496	; 0x1f0
 8001814:	4832      	ldr	r0, [pc, #200]	; (80018e0 <_ZL12MX_GPIO_Initv+0x158>)
 8001816:	f001 fb8f 	bl	8002f38 <HAL_GPIO_WritePin>
                          |ONBOARD_WRITE_3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, ONBOARD_WRITE_4_Pin|ONBOARD_WRITE_2_Pin, GPIO_PIN_RESET);
 800181a:	2200      	movs	r2, #0
 800181c:	f44f 6188 	mov.w	r1, #1088	; 0x440
 8001820:	4830      	ldr	r0, [pc, #192]	; (80018e4 <_ZL12MX_GPIO_Initv+0x15c>)
 8001822:	f001 fb89 	bl	8002f38 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ONBOARD_WRITE_1_GPIO_Port, ONBOARD_WRITE_1_Pin, GPIO_PIN_RESET);
 8001826:	2200      	movs	r2, #0
 8001828:	2140      	movs	r1, #64	; 0x40
 800182a:	482f      	ldr	r0, [pc, #188]	; (80018e8 <_ZL12MX_GPIO_Initv+0x160>)
 800182c:	f001 fb84 	bl	8002f38 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : ONBOARD_READ_IT_3_Pin */
  GPIO_InitStruct.Pin = ONBOARD_READ_IT_3_Pin;
 8001830:	2301      	movs	r3, #1
 8001832:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001834:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001838:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800183a:	2302      	movs	r3, #2
 800183c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ONBOARD_READ_IT_3_GPIO_Port, &GPIO_InitStruct);
 800183e:	f107 0314 	add.w	r3, r7, #20
 8001842:	4619      	mov	r1, r3
 8001844:	4827      	ldr	r0, [pc, #156]	; (80018e4 <_ZL12MX_GPIO_Initv+0x15c>)
 8001846:	f001 f9d9 	bl	8002bfc <HAL_GPIO_Init>

  /*Configure GPIO pins : ONBOARD_BUTTON_1_Pin ONBOARD_BUTTON_2_Pin ONBOARD_BUTTON_3_Pin ONBOARD_BUTTON_4_Pin */
  GPIO_InitStruct.Pin = ONBOARD_BUTTON_1_Pin|ONBOARD_BUTTON_2_Pin|ONBOARD_BUTTON_3_Pin|ONBOARD_BUTTON_4_Pin;
 800184a:	230f      	movs	r3, #15
 800184c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800184e:	2300      	movs	r3, #0
 8001850:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001852:	2300      	movs	r3, #0
 8001854:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001856:	f107 0314 	add.w	r3, r7, #20
 800185a:	4619      	mov	r1, r3
 800185c:	4820      	ldr	r0, [pc, #128]	; (80018e0 <_ZL12MX_GPIO_Initv+0x158>)
 800185e:	f001 f9cd 	bl	8002bfc <HAL_GPIO_Init>

  /*Configure GPIO pins : ONBOARD_LED_1_Pin ONBOARD_LED_2_Pin ONBOARD_LED_3_Pin ONBOARD_LED_4_Pin
                           ONBOARD_WRITE_3_Pin */
  GPIO_InitStruct.Pin = ONBOARD_LED_1_Pin|ONBOARD_LED_2_Pin|ONBOARD_LED_3_Pin|ONBOARD_LED_4_Pin
 8001862:	f44f 73f8 	mov.w	r3, #496	; 0x1f0
 8001866:	617b      	str	r3, [r7, #20]
                          |ONBOARD_WRITE_3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001868:	2301      	movs	r3, #1
 800186a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800186c:	2300      	movs	r3, #0
 800186e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001870:	2300      	movs	r3, #0
 8001872:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001874:	f107 0314 	add.w	r3, r7, #20
 8001878:	4619      	mov	r1, r3
 800187a:	4819      	ldr	r0, [pc, #100]	; (80018e0 <_ZL12MX_GPIO_Initv+0x158>)
 800187c:	f001 f9be 	bl	8002bfc <HAL_GPIO_Init>

  /*Configure GPIO pins : ONBOARD_WRITE_4_Pin ONBOARD_WRITE_2_Pin */
  GPIO_InitStruct.Pin = ONBOARD_WRITE_4_Pin|ONBOARD_WRITE_2_Pin;
 8001880:	f44f 6388 	mov.w	r3, #1088	; 0x440
 8001884:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001886:	2301      	movs	r3, #1
 8001888:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800188a:	2300      	movs	r3, #0
 800188c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800188e:	2300      	movs	r3, #0
 8001890:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001892:	f107 0314 	add.w	r3, r7, #20
 8001896:	4619      	mov	r1, r3
 8001898:	4812      	ldr	r0, [pc, #72]	; (80018e4 <_ZL12MX_GPIO_Initv+0x15c>)
 800189a:	f001 f9af 	bl	8002bfc <HAL_GPIO_Init>

  /*Configure GPIO pin : ONBOARD_WRITE_1_Pin */
  GPIO_InitStruct.Pin = ONBOARD_WRITE_1_Pin;
 800189e:	2340      	movs	r3, #64	; 0x40
 80018a0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018a2:	2301      	movs	r3, #1
 80018a4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018a6:	2300      	movs	r3, #0
 80018a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018aa:	2300      	movs	r3, #0
 80018ac:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(ONBOARD_WRITE_1_GPIO_Port, &GPIO_InitStruct);
 80018ae:	f107 0314 	add.w	r3, r7, #20
 80018b2:	4619      	mov	r1, r3
 80018b4:	480c      	ldr	r0, [pc, #48]	; (80018e8 <_ZL12MX_GPIO_Initv+0x160>)
 80018b6:	f001 f9a1 	bl	8002bfc <HAL_GPIO_Init>

  /*Configure GPIO pin : ONBOARD_READ_4_Pin */
  GPIO_InitStruct.Pin = ONBOARD_READ_4_Pin;
 80018ba:	2380      	movs	r3, #128	; 0x80
 80018bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018be:	2300      	movs	r3, #0
 80018c0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018c2:	2300      	movs	r3, #0
 80018c4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ONBOARD_READ_4_GPIO_Port, &GPIO_InitStruct);
 80018c6:	f107 0314 	add.w	r3, r7, #20
 80018ca:	4619      	mov	r1, r3
 80018cc:	4806      	ldr	r0, [pc, #24]	; (80018e8 <_ZL12MX_GPIO_Initv+0x160>)
 80018ce:	f001 f995 	bl	8002bfc <HAL_GPIO_Init>

}
 80018d2:	bf00      	nop
 80018d4:	3728      	adds	r7, #40	; 0x28
 80018d6:	46bd      	mov	sp, r7
 80018d8:	bd80      	pop	{r7, pc}
 80018da:	bf00      	nop
 80018dc:	40023800 	.word	0x40023800
 80018e0:	40020000 	.word	0x40020000
 80018e4:	40020800 	.word	0x40020800
 80018e8:	40020400 	.word	0x40020400

080018ec <_ZL12MPU6050_initv>:

/* USER CODE BEGIN 4 */
void MPU6050_init()
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b082      	sub	sp, #8
 80018f0:	af02      	add	r7, sp, #8
  MPU6050_TX_buf[0] = 0x6B;
 80018f2:	4b09      	ldr	r3, [pc, #36]	; (8001918 <_ZL12MPU6050_initv+0x2c>)
 80018f4:	226b      	movs	r2, #107	; 0x6b
 80018f6:	701a      	strb	r2, [r3, #0]
  MPU6050_TX_buf[1] = 0x00;
 80018f8:	4b07      	ldr	r3, [pc, #28]	; (8001918 <_ZL12MPU6050_initv+0x2c>)
 80018fa:	2200      	movs	r2, #0
 80018fc:	705a      	strb	r2, [r3, #1]
  if (HAL_I2C_Master_Transmit(&hi2c1, MPU6050_Adresse, MPU6050_TX_buf, 2, 10000000) != HAL_OK)
 80018fe:	4b07      	ldr	r3, [pc, #28]	; (800191c <_ZL12MPU6050_initv+0x30>)
 8001900:	9300      	str	r3, [sp, #0]
 8001902:	2302      	movs	r3, #2
 8001904:	4a04      	ldr	r2, [pc, #16]	; (8001918 <_ZL12MPU6050_initv+0x2c>)
 8001906:	21d0      	movs	r1, #208	; 0xd0
 8001908:	4805      	ldr	r0, [pc, #20]	; (8001920 <_ZL12MPU6050_initv+0x34>)
 800190a:	f001 fca3 	bl	8003254 <HAL_I2C_Master_Transmit>
 800190e:	4603      	mov	r3, r0
 8001910:	2b00      	cmp	r3, #0
  {
  }
}
 8001912:	bf00      	nop
 8001914:	46bd      	mov	sp, r7
 8001916:	bd80      	pop	{r7, pc}
 8001918:	200004d8 	.word	0x200004d8
 800191c:	00989680 	.word	0x00989680
 8001920:	200003a4 	.word	0x200003a4

08001924 <HAL_TIM_PeriodElapsedCallback>:
 * @brief Interrupt that is called when any Timer overflows
 * @param htim timer handle
 * @retval none
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	b082      	sub	sp, #8
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
  if (htim == &htim14) //timer 14 used for fast PPM generation
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	4a25      	ldr	r2, [pc, #148]	; (80019c4 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8001930:	4293      	cmp	r3, r2
 8001932:	d11e      	bne.n	8001972 <HAL_TIM_PeriodElapsedCallback+0x4e>
  {
    if (fastPPM_powered == true)
 8001934:	4b24      	ldr	r3, [pc, #144]	; (80019c8 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8001936:	781b      	ldrb	r3, [r3, #0]
 8001938:	2b01      	cmp	r3, #1
 800193a:	d10d      	bne.n	8001958 <HAL_TIM_PeriodElapsedCallback+0x34>
    {
      TIM14->ARR = (uint32_t)(fastPPM_OFFTime - 1);
 800193c:	4b23      	ldr	r3, [pc, #140]	; (80019cc <HAL_TIM_PeriodElapsedCallback+0xa8>)
 800193e:	881b      	ldrh	r3, [r3, #0]
 8001940:	1e5a      	subs	r2, r3, #1
 8001942:	4b23      	ldr	r3, [pc, #140]	; (80019d0 <HAL_TIM_PeriodElapsedCallback+0xac>)
 8001944:	62da      	str	r2, [r3, #44]	; 0x2c
      HAL_GPIO_WritePin(ONBOARD_WRITE_1_GPIO_Port, ONBOARD_WRITE_1_Pin, GPIO_PIN_RESET);
 8001946:	2200      	movs	r2, #0
 8001948:	2140      	movs	r1, #64	; 0x40
 800194a:	4822      	ldr	r0, [pc, #136]	; (80019d4 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 800194c:	f001 faf4 	bl	8002f38 <HAL_GPIO_WritePin>
      fastPPM_powered = false;
 8001950:	4b1d      	ldr	r3, [pc, #116]	; (80019c8 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8001952:	2200      	movs	r2, #0
 8001954:	701a      	strb	r2, [r3, #0]
 8001956:	e00c      	b.n	8001972 <HAL_TIM_PeriodElapsedCallback+0x4e>
    }
    else
    {
      TIM14->ARR = (uint32_t)(fastPPM_ONTime - 1);
 8001958:	4b1f      	ldr	r3, [pc, #124]	; (80019d8 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 800195a:	881b      	ldrh	r3, [r3, #0]
 800195c:	1e5a      	subs	r2, r3, #1
 800195e:	4b1c      	ldr	r3, [pc, #112]	; (80019d0 <HAL_TIM_PeriodElapsedCallback+0xac>)
 8001960:	62da      	str	r2, [r3, #44]	; 0x2c
      HAL_GPIO_WritePin(ONBOARD_WRITE_1_GPIO_Port, ONBOARD_WRITE_1_Pin, GPIO_PIN_SET);
 8001962:	2201      	movs	r2, #1
 8001964:	2140      	movs	r1, #64	; 0x40
 8001966:	481b      	ldr	r0, [pc, #108]	; (80019d4 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8001968:	f001 fae6 	bl	8002f38 <HAL_GPIO_WritePin>
      fastPPM_powered = true;
 800196c:	4b16      	ldr	r3, [pc, #88]	; (80019c8 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 800196e:	2201      	movs	r2, #1
 8001970:	701a      	strb	r2, [r3, #0]
    }
  }
  
  if (htim == &htim13) //timer 13 used for fast PPM generation
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	4a19      	ldr	r2, [pc, #100]	; (80019dc <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8001976:	4293      	cmp	r3, r2
 8001978:	d120      	bne.n	80019bc <HAL_TIM_PeriodElapsedCallback+0x98>
  {
    if (slowPPM1_powered == true)
 800197a:	4b19      	ldr	r3, [pc, #100]	; (80019e0 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 800197c:	781b      	ldrb	r3, [r3, #0]
 800197e:	2b01      	cmp	r3, #1
 8001980:	d10e      	bne.n	80019a0 <HAL_TIM_PeriodElapsedCallback+0x7c>
    {
      TIM13->ARR = (uint32_t)(slowPPM1_OFFTime - 1);
 8001982:	4b18      	ldr	r3, [pc, #96]	; (80019e4 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8001984:	881b      	ldrh	r3, [r3, #0]
 8001986:	1e5a      	subs	r2, r3, #1
 8001988:	4b17      	ldr	r3, [pc, #92]	; (80019e8 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 800198a:	62da      	str	r2, [r3, #44]	; 0x2c
      HAL_GPIO_WritePin(ONBOARD_WRITE_2_GPIO_Port, ONBOARD_WRITE_2_Pin, GPIO_PIN_RESET);
 800198c:	2200      	movs	r2, #0
 800198e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001992:	4816      	ldr	r0, [pc, #88]	; (80019ec <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8001994:	f001 fad0 	bl	8002f38 <HAL_GPIO_WritePin>
      slowPPM1_powered = false;
 8001998:	4b11      	ldr	r3, [pc, #68]	; (80019e0 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 800199a:	2200      	movs	r2, #0
 800199c:	701a      	strb	r2, [r3, #0]
      TIM13->ARR = (uint32_t)(slowPPM1_ONTime - 1);
      HAL_GPIO_WritePin(ONBOARD_WRITE_2_GPIO_Port, ONBOARD_WRITE_2_Pin, GPIO_PIN_SET);
      slowPPM1_powered = true;
    }
  }
}
 800199e:	e00d      	b.n	80019bc <HAL_TIM_PeriodElapsedCallback+0x98>
      TIM13->ARR = (uint32_t)(slowPPM1_ONTime - 1);
 80019a0:	4b13      	ldr	r3, [pc, #76]	; (80019f0 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 80019a2:	881b      	ldrh	r3, [r3, #0]
 80019a4:	1e5a      	subs	r2, r3, #1
 80019a6:	4b10      	ldr	r3, [pc, #64]	; (80019e8 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 80019a8:	62da      	str	r2, [r3, #44]	; 0x2c
      HAL_GPIO_WritePin(ONBOARD_WRITE_2_GPIO_Port, ONBOARD_WRITE_2_Pin, GPIO_PIN_SET);
 80019aa:	2201      	movs	r2, #1
 80019ac:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80019b0:	480e      	ldr	r0, [pc, #56]	; (80019ec <HAL_TIM_PeriodElapsedCallback+0xc8>)
 80019b2:	f001 fac1 	bl	8002f38 <HAL_GPIO_WritePin>
      slowPPM1_powered = true;
 80019b6:	4b0a      	ldr	r3, [pc, #40]	; (80019e0 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 80019b8:	2201      	movs	r2, #1
 80019ba:	701a      	strb	r2, [r3, #0]
}
 80019bc:	bf00      	nop
 80019be:	3708      	adds	r7, #8
 80019c0:	46bd      	mov	sp, r7
 80019c2:	bd80      	pop	{r7, pc}
 80019c4:	20000488 	.word	0x20000488
 80019c8:	200004d2 	.word	0x200004d2
 80019cc:	200004d0 	.word	0x200004d0
 80019d0:	40002000 	.word	0x40002000
 80019d4:	40020400 	.word	0x40020400
 80019d8:	20000000 	.word	0x20000000
 80019dc:	20000440 	.word	0x20000440
 80019e0:	200004d6 	.word	0x200004d6
 80019e4:	200004d4 	.word	0x200004d4
 80019e8:	40001c00 	.word	0x40001c00
 80019ec:	40020800 	.word	0x40020800
 80019f0:	20000002 	.word	0x20000002

080019f4 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b084      	sub	sp, #16
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	4603      	mov	r3, r0
 80019fc:	80fb      	strh	r3, [r7, #6]
  HAL_GPIO_TogglePin(ONBOARD_LED_4_GPIO_Port, ONBOARD_LED_4_Pin);     //debug pin
 80019fe:	2180      	movs	r1, #128	; 0x80
 8001a00:	480c      	ldr	r0, [pc, #48]	; (8001a34 <HAL_GPIO_EXTI_Callback+0x40>)
 8001a02:	f001 fab1 	bl	8002f68 <HAL_GPIO_TogglePin>
  if (GPIO_Pin == ONBOARD_READ_IT_3_Pin)
 8001a06:	88fb      	ldrh	r3, [r7, #6]
 8001a08:	2b01      	cmp	r3, #1
 8001a0a:	d10e      	bne.n	8001a2a <HAL_GPIO_EXTI_Callback+0x36>
  {
    uint32_t time = HAL_GetTick();
 8001a0c:	f000 fca0 	bl	8002350 <HAL_GetTick>
 8001a10:	60f8      	str	r0, [r7, #12]
    if (PinInterruptLastTime - time > 5)
 8001a12:	4b09      	ldr	r3, [pc, #36]	; (8001a38 <HAL_GPIO_EXTI_Callback+0x44>)
 8001a14:	681a      	ldr	r2, [r3, #0]
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	1ad3      	subs	r3, r2, r3
 8001a1a:	2b05      	cmp	r3, #5
 8001a1c:	d906      	bls.n	8001a2c <HAL_GPIO_EXTI_Callback+0x38>
    {
      PinInterruptLastTime = time;
 8001a1e:	4a06      	ldr	r2, [pc, #24]	; (8001a38 <HAL_GPIO_EXTI_Callback+0x44>)
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	6013      	str	r3, [r2, #0]
      read_SBUS();
 8001a24:	f7ff fc2e 	bl	8001284 <_Z9read_SBUSv>
  }
  else
  {
    __NOP();
  }
}
 8001a28:	e000      	b.n	8001a2c <HAL_GPIO_EXTI_Callback+0x38>
    __NOP();
 8001a2a:	bf00      	nop
}
 8001a2c:	bf00      	nop
 8001a2e:	3710      	adds	r7, #16
 8001a30:	46bd      	mov	sp, r7
 8001a32:	bd80      	pop	{r7, pc}
 8001a34:	40020000 	.word	0x40020000
 8001a38:	200004dc 	.word	0x200004dc

08001a3c <ADC_Select_Channel_11>:

void ADC_Select_Channel_11()
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b084      	sub	sp, #16
 8001a40:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8001a42:	463b      	mov	r3, r7
 8001a44:	2200      	movs	r2, #0
 8001a46:	601a      	str	r2, [r3, #0]
 8001a48:	605a      	str	r2, [r3, #4]
 8001a4a:	609a      	str	r2, [r3, #8]
 8001a4c:	60da      	str	r2, [r3, #12]
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8001a4e:	230b      	movs	r3, #11
 8001a50:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001a52:	2301      	movs	r3, #1
 8001a54:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 8001a56:	2301      	movs	r3, #1
 8001a58:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001a5a:	463b      	mov	r3, r7
 8001a5c:	4619      	mov	r1, r3
 8001a5e:	480a      	ldr	r0, [pc, #40]	; (8001a88 <ADC_Select_Channel_11+0x4c>)
 8001a60:	f000 fd98 	bl	8002594 <HAL_ADC_ConfigChannel>
 8001a64:	4603      	mov	r3, r0
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	bf14      	ite	ne
 8001a6a:	2301      	movne	r3, #1
 8001a6c:	2300      	moveq	r3, #0
 8001a6e:	b2db      	uxtb	r3, r3
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d001      	beq.n	8001a78 <ADC_Select_Channel_11+0x3c>
  {
    Error_Handler();
 8001a74:	f000 f830 	bl	8001ad8 <Error_Handler>
  }
  HAL_ADC_Start(&hadc1);
 8001a78:	4803      	ldr	r0, [pc, #12]	; (8001a88 <ADC_Select_Channel_11+0x4c>)
 8001a7a:	f000 fcdb 	bl	8002434 <HAL_ADC_Start>
}
 8001a7e:	bf00      	nop
 8001a80:	3710      	adds	r7, #16
 8001a82:	46bd      	mov	sp, r7
 8001a84:	bd80      	pop	{r7, pc}
 8001a86:	bf00      	nop
 8001a88:	2000035c 	.word	0x2000035c

08001a8c <ADC_Select_Channel_12>:
void ADC_Select_Channel_12()
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b084      	sub	sp, #16
 8001a90:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8001a92:	463b      	mov	r3, r7
 8001a94:	2200      	movs	r2, #0
 8001a96:	601a      	str	r2, [r3, #0]
 8001a98:	605a      	str	r2, [r3, #4]
 8001a9a:	609a      	str	r2, [r3, #8]
 8001a9c:	60da      	str	r2, [r3, #12]
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8001a9e:	230c      	movs	r3, #12
 8001aa0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001aa2:	2301      	movs	r3, #1
 8001aa4:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001aa6:	463b      	mov	r3, r7
 8001aa8:	4619      	mov	r1, r3
 8001aaa:	480a      	ldr	r0, [pc, #40]	; (8001ad4 <ADC_Select_Channel_12+0x48>)
 8001aac:	f000 fd72 	bl	8002594 <HAL_ADC_ConfigChannel>
 8001ab0:	4603      	mov	r3, r0
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	bf14      	ite	ne
 8001ab6:	2301      	movne	r3, #1
 8001ab8:	2300      	moveq	r3, #0
 8001aba:	b2db      	uxtb	r3, r3
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d001      	beq.n	8001ac4 <ADC_Select_Channel_12+0x38>
  {
    Error_Handler();
 8001ac0:	f000 f80a 	bl	8001ad8 <Error_Handler>
  }
  HAL_ADC_Start(&hadc1);
 8001ac4:	4803      	ldr	r0, [pc, #12]	; (8001ad4 <ADC_Select_Channel_12+0x48>)
 8001ac6:	f000 fcb5 	bl	8002434 <HAL_ADC_Start>
}
 8001aca:	bf00      	nop
 8001acc:	3710      	adds	r7, #16
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	bd80      	pop	{r7, pc}
 8001ad2:	bf00      	nop
 8001ad4:	2000035c 	.word	0x2000035c

08001ad8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ad8:	b480      	push	{r7}
 8001ada:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001adc:	b672      	cpsid	i
}
 8001ade:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001ae0:	e7fe      	b.n	8001ae0 <Error_Handler+0x8>
	...

08001ae4 <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 8001ae4:	b480      	push	{r7}
 8001ae6:	b083      	sub	sp, #12
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
 8001aec:	6039      	str	r1, [r7, #0]
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	2b01      	cmp	r3, #1
 8001af2:	d114      	bne.n	8001b1e <_Z41__static_initialization_and_destruction_0ii+0x3a>
 8001af4:	683b      	ldr	r3, [r7, #0]
 8001af6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001afa:	4293      	cmp	r3, r2
 8001afc:	d10f      	bne.n	8001b1e <_Z41__static_initialization_and_destruction_0ii+0x3a>
uint16_t fastPPM_OFFTime = fastPPM_Pulselength - fastPPM_ONTime;//OFF time in microseconds
 8001afe:	4b0a      	ldr	r3, [pc, #40]	; (8001b28 <_Z41__static_initialization_and_destruction_0ii+0x44>)
 8001b00:	881b      	ldrh	r3, [r3, #0]
 8001b02:	f5c3 631c 	rsb	r3, r3, #2496	; 0x9c0
 8001b06:	3304      	adds	r3, #4
 8001b08:	b29a      	uxth	r2, r3
 8001b0a:	4b08      	ldr	r3, [pc, #32]	; (8001b2c <_Z41__static_initialization_and_destruction_0ii+0x48>)
 8001b0c:	801a      	strh	r2, [r3, #0]
uint16_t slowPPM1_OFFTime = fastPPM_Pulselength - fastPPM_ONTime;//OFF time in microseconds
 8001b0e:	4b06      	ldr	r3, [pc, #24]	; (8001b28 <_Z41__static_initialization_and_destruction_0ii+0x44>)
 8001b10:	881b      	ldrh	r3, [r3, #0]
 8001b12:	f5c3 631c 	rsb	r3, r3, #2496	; 0x9c0
 8001b16:	3304      	adds	r3, #4
 8001b18:	b29a      	uxth	r2, r3
 8001b1a:	4b05      	ldr	r3, [pc, #20]	; (8001b30 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 8001b1c:	801a      	strh	r2, [r3, #0]
}
 8001b1e:	bf00      	nop
 8001b20:	370c      	adds	r7, #12
 8001b22:	46bd      	mov	sp, r7
 8001b24:	bc80      	pop	{r7}
 8001b26:	4770      	bx	lr
 8001b28:	20000000 	.word	0x20000000
 8001b2c:	200004d0 	.word	0x200004d0
 8001b30:	200004d4 	.word	0x200004d4

08001b34 <_GLOBAL__sub_I_hadc1>:
 8001b34:	b580      	push	{r7, lr}
 8001b36:	af00      	add	r7, sp, #0
 8001b38:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001b3c:	2001      	movs	r0, #1
 8001b3e:	f7ff ffd1 	bl	8001ae4 <_Z41__static_initialization_and_destruction_0ii>
 8001b42:	bd80      	pop	{r7, pc}

08001b44 <_ZSt4atanf>:
  using ::atan;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  atan(float __x)
  { return __builtin_atanf(__x); }
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b082      	sub	sp, #8
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
 8001b4c:	6878      	ldr	r0, [r7, #4]
 8001b4e:	f007 fb51 	bl	80091f4 <atanf>
 8001b52:	4603      	mov	r3, r0
 8001b54:	4618      	mov	r0, r3
 8001b56:	3708      	adds	r7, #8
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	bd80      	pop	{r7, pc}

08001b5c <_Z4loopv>:

uint32_t timestamp = 0;
uint16_t adcValuesArray[2];

void loop()
{
 8001b5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001b60:	b0e8      	sub	sp, #416	; 0x1a0
 8001b62:	af0e      	add	r7, sp, #56	; 0x38
  
  if ((HAL_GetTick() - timestamp) >= 20)
 8001b64:	f000 fbf4 	bl	8002350 <HAL_GetTick>
 8001b68:	4602      	mov	r2, r0
 8001b6a:	4b9b      	ldr	r3, [pc, #620]	; (8001dd8 <_Z4loopv+0x27c>)
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	1ad3      	subs	r3, r2, r3
 8001b70:	2b13      	cmp	r3, #19
 8001b72:	bf8c      	ite	hi
 8001b74:	2301      	movhi	r3, #1
 8001b76:	2300      	movls	r3, #0
 8001b78:	b2db      	uxtb	r3, r3
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	f000 80c1 	beq.w	8001d02 <_Z4loopv+0x1a6>
  {
    timestamp += 20;
 8001b80:	4b95      	ldr	r3, [pc, #596]	; (8001dd8 <_Z4loopv+0x27c>)
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	3314      	adds	r3, #20
 8001b86:	4a94      	ldr	r2, [pc, #592]	; (8001dd8 <_Z4loopv+0x27c>)
 8001b88:	6013      	str	r3, [r2, #0]
	  //   	msgTransmit[i] = msg[i];
	  //   }
	  //   CDC_Transmit_FS((unsigned char*)msgTransmit, sizeof(msgTransmit));
    // }

    for (size_t i = 0; i < 1; i++)
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
 8001b90:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	f040 80b4 	bne.w	8001d02 <_Z4loopv+0x1a6>
	    for (size_t i = 0; i < x; i++)
	    {
	    	msgTransmit[i] = msg[i];
	    }
	    CDC_Transmit_FS((unsigned char*)msgTransmit, sizeof(msgTransmit));
    }
 8001b9a:	466b      	mov	r3, sp
 8001b9c:	4698      	mov	r8, r3
	    sprintf((char*)msg," %hu %hu %hu %hu %hu %hu %hu %hu %hu %hu %hu %hu %hu %hu %hu %hu\r\n", SBUS_Channels[0], SBUS_Channels[1], SBUS_Channels[2], SBUS_Channels[3], SBUS_Channels[4], SBUS_Channels[5], SBUS_Channels[6], SBUS_Channels[7], SBUS_Channels[8], SBUS_Channels[9], SBUS_Channels[10], SBUS_Channels[11], SBUS_Channels[12], SBUS_Channels[13], SBUS_Channels[14], SBUS_Channels[15]);
 8001b9e:	4b8f      	ldr	r3, [pc, #572]	; (8001ddc <_Z4loopv+0x280>)
 8001ba0:	881b      	ldrh	r3, [r3, #0]
 8001ba2:	469c      	mov	ip, r3
 8001ba4:	4b8d      	ldr	r3, [pc, #564]	; (8001ddc <_Z4loopv+0x280>)
 8001ba6:	885b      	ldrh	r3, [r3, #2]
 8001ba8:	469e      	mov	lr, r3
 8001baa:	4b8c      	ldr	r3, [pc, #560]	; (8001ddc <_Z4loopv+0x280>)
 8001bac:	889b      	ldrh	r3, [r3, #4]
 8001bae:	461d      	mov	r5, r3
 8001bb0:	4b8a      	ldr	r3, [pc, #552]	; (8001ddc <_Z4loopv+0x280>)
 8001bb2:	88db      	ldrh	r3, [r3, #6]
 8001bb4:	461e      	mov	r6, r3
 8001bb6:	4b89      	ldr	r3, [pc, #548]	; (8001ddc <_Z4loopv+0x280>)
 8001bb8:	891b      	ldrh	r3, [r3, #8]
 8001bba:	61fb      	str	r3, [r7, #28]
 8001bbc:	4b87      	ldr	r3, [pc, #540]	; (8001ddc <_Z4loopv+0x280>)
 8001bbe:	895b      	ldrh	r3, [r3, #10]
 8001bc0:	61bb      	str	r3, [r7, #24]
 8001bc2:	4b86      	ldr	r3, [pc, #536]	; (8001ddc <_Z4loopv+0x280>)
 8001bc4:	899b      	ldrh	r3, [r3, #12]
 8001bc6:	617b      	str	r3, [r7, #20]
 8001bc8:	4b84      	ldr	r3, [pc, #528]	; (8001ddc <_Z4loopv+0x280>)
 8001bca:	89db      	ldrh	r3, [r3, #14]
 8001bcc:	613b      	str	r3, [r7, #16]
 8001bce:	4b83      	ldr	r3, [pc, #524]	; (8001ddc <_Z4loopv+0x280>)
 8001bd0:	8a1b      	ldrh	r3, [r3, #16]
 8001bd2:	60fb      	str	r3, [r7, #12]
 8001bd4:	4b81      	ldr	r3, [pc, #516]	; (8001ddc <_Z4loopv+0x280>)
 8001bd6:	8a5b      	ldrh	r3, [r3, #18]
 8001bd8:	60bb      	str	r3, [r7, #8]
 8001bda:	4b80      	ldr	r3, [pc, #512]	; (8001ddc <_Z4loopv+0x280>)
 8001bdc:	8a9b      	ldrh	r3, [r3, #20]
 8001bde:	607b      	str	r3, [r7, #4]
 8001be0:	4b7e      	ldr	r3, [pc, #504]	; (8001ddc <_Z4loopv+0x280>)
 8001be2:	8adb      	ldrh	r3, [r3, #22]
 8001be4:	603b      	str	r3, [r7, #0]
 8001be6:	4b7d      	ldr	r3, [pc, #500]	; (8001ddc <_Z4loopv+0x280>)
 8001be8:	8b1b      	ldrh	r3, [r3, #24]
 8001bea:	461c      	mov	r4, r3
 8001bec:	4b7b      	ldr	r3, [pc, #492]	; (8001ddc <_Z4loopv+0x280>)
 8001bee:	8b5b      	ldrh	r3, [r3, #26]
 8001bf0:	4619      	mov	r1, r3
 8001bf2:	4b7a      	ldr	r3, [pc, #488]	; (8001ddc <_Z4loopv+0x280>)
 8001bf4:	8b9b      	ldrh	r3, [r3, #28]
 8001bf6:	461a      	mov	r2, r3
 8001bf8:	4b78      	ldr	r3, [pc, #480]	; (8001ddc <_Z4loopv+0x280>)
 8001bfa:	8bdb      	ldrh	r3, [r3, #30]
 8001bfc:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8001c00:	930d      	str	r3, [sp, #52]	; 0x34
 8001c02:	920c      	str	r2, [sp, #48]	; 0x30
 8001c04:	910b      	str	r1, [sp, #44]	; 0x2c
 8001c06:	940a      	str	r4, [sp, #40]	; 0x28
 8001c08:	683a      	ldr	r2, [r7, #0]
 8001c0a:	9209      	str	r2, [sp, #36]	; 0x24
 8001c0c:	687a      	ldr	r2, [r7, #4]
 8001c0e:	9208      	str	r2, [sp, #32]
 8001c10:	68ba      	ldr	r2, [r7, #8]
 8001c12:	9207      	str	r2, [sp, #28]
 8001c14:	68fa      	ldr	r2, [r7, #12]
 8001c16:	9206      	str	r2, [sp, #24]
 8001c18:	693a      	ldr	r2, [r7, #16]
 8001c1a:	9205      	str	r2, [sp, #20]
 8001c1c:	697a      	ldr	r2, [r7, #20]
 8001c1e:	9204      	str	r2, [sp, #16]
 8001c20:	69ba      	ldr	r2, [r7, #24]
 8001c22:	9203      	str	r2, [sp, #12]
 8001c24:	69fb      	ldr	r3, [r7, #28]
 8001c26:	9302      	str	r3, [sp, #8]
 8001c28:	9601      	str	r6, [sp, #4]
 8001c2a:	9500      	str	r5, [sp, #0]
 8001c2c:	4673      	mov	r3, lr
 8001c2e:	4662      	mov	r2, ip
 8001c30:	496b      	ldr	r1, [pc, #428]	; (8001de0 <_Z4loopv+0x284>)
 8001c32:	f007 fce7 	bl	8009604 <siprintf>
	    uint8_t x = 0;
 8001c36:	2300      	movs	r3, #0
 8001c38:	f887 3163 	strb.w	r3, [r7, #355]	; 0x163
	    while (msg[x] != NULL)
 8001c3c:	f897 3163 	ldrb.w	r3, [r7, #355]	; 0x163
 8001c40:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8001c44:	5cd3      	ldrb	r3, [r2, r3]
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d005      	beq.n	8001c56 <_Z4loopv+0xfa>
	    	x++;
 8001c4a:	f897 3163 	ldrb.w	r3, [r7, #355]	; 0x163
 8001c4e:	3301      	adds	r3, #1
 8001c50:	f887 3163 	strb.w	r3, [r7, #355]	; 0x163
	    while (msg[x] != NULL)
 8001c54:	e7f2      	b.n	8001c3c <_Z4loopv+0xe0>
	    unsigned char msgTransmit[x];
 8001c56:	f897 3163 	ldrb.w	r3, [r7, #355]	; 0x163
 8001c5a:	1e5c      	subs	r4, r3, #1
 8001c5c:	f8c7 4158 	str.w	r4, [r7, #344]	; 0x158
 8001c60:	4623      	mov	r3, r4
 8001c62:	3301      	adds	r3, #1
 8001c64:	4618      	mov	r0, r3
 8001c66:	f04f 0100 	mov.w	r1, #0
 8001c6a:	f04f 0200 	mov.w	r2, #0
 8001c6e:	f04f 0300 	mov.w	r3, #0
 8001c72:	00cb      	lsls	r3, r1, #3
 8001c74:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8001c78:	00c2      	lsls	r2, r0, #3
 8001c7a:	4623      	mov	r3, r4
 8001c7c:	3301      	adds	r3, #1
 8001c7e:	4618      	mov	r0, r3
 8001c80:	f04f 0100 	mov.w	r1, #0
 8001c84:	f04f 0200 	mov.w	r2, #0
 8001c88:	f04f 0300 	mov.w	r3, #0
 8001c8c:	00cb      	lsls	r3, r1, #3
 8001c8e:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8001c92:	00c2      	lsls	r2, r0, #3
 8001c94:	4623      	mov	r3, r4
 8001c96:	3301      	adds	r3, #1
 8001c98:	3307      	adds	r3, #7
 8001c9a:	08db      	lsrs	r3, r3, #3
 8001c9c:	00db      	lsls	r3, r3, #3
 8001c9e:	ebad 0d03 	sub.w	sp, sp, r3
 8001ca2:	ab0e      	add	r3, sp, #56	; 0x38
 8001ca4:	3300      	adds	r3, #0
 8001ca6:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
	    for (size_t i = 0; i < x; i++)
 8001caa:	2300      	movs	r3, #0
 8001cac:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
 8001cb0:	f897 3163 	ldrb.w	r3, [r7, #355]	; 0x163
 8001cb4:	f8d7 2164 	ldr.w	r2, [r7, #356]	; 0x164
 8001cb8:	429a      	cmp	r2, r3
 8001cba:	d212      	bcs.n	8001ce2 <_Z4loopv+0x186>
	    	msgTransmit[i] = msg[i];
 8001cbc:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8001cc0:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8001cc4:	4413      	add	r3, r2
 8001cc6:	7819      	ldrb	r1, [r3, #0]
 8001cc8:	f8d7 2154 	ldr.w	r2, [r7, #340]	; 0x154
 8001ccc:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8001cd0:	4413      	add	r3, r2
 8001cd2:	460a      	mov	r2, r1
 8001cd4:	701a      	strb	r2, [r3, #0]
	    for (size_t i = 0; i < x; i++)
 8001cd6:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8001cda:	3301      	adds	r3, #1
 8001cdc:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
 8001ce0:	e7e6      	b.n	8001cb0 <_Z4loopv+0x154>
	    CDC_Transmit_FS((unsigned char*)msgTransmit, sizeof(msgTransmit));
 8001ce2:	f8d7 2154 	ldr.w	r2, [r7, #340]	; 0x154
 8001ce6:	b2a3      	uxth	r3, r4
 8001ce8:	3301      	adds	r3, #1
 8001cea:	b29b      	uxth	r3, r3
 8001cec:	4619      	mov	r1, r3
 8001cee:	4610      	mov	r0, r2
 8001cf0:	f006 fe4e 	bl	8008990 <CDC_Transmit_FS>
 8001cf4:	46c5      	mov	sp, r8
    for (size_t i = 0; i < 1; i++)
 8001cf6:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8001cfa:	3301      	adds	r3, #1
 8001cfc:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
 8001d00:	e746      	b.n	8001b90 <_Z4loopv+0x34>
    

  }
  ADC_Select_Channel_11();
 8001d02:	f7ff fe9b 	bl	8001a3c <ADC_Select_Channel_11>
	adcValuesArray[0] = (uint16_t)ADC1->DR;
 8001d06:	4b37      	ldr	r3, [pc, #220]	; (8001de4 <_Z4loopv+0x288>)
 8001d08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d0a:	b29a      	uxth	r2, r3
 8001d0c:	4b36      	ldr	r3, [pc, #216]	; (8001de8 <_Z4loopv+0x28c>)
 8001d0e:	801a      	strh	r2, [r3, #0]
	ADC_Select_Channel_12();
 8001d10:	f7ff febc 	bl	8001a8c <ADC_Select_Channel_12>
	adcValuesArray[1] = (uint16_t)ADC1->DR;
 8001d14:	4b33      	ldr	r3, [pc, #204]	; (8001de4 <_Z4loopv+0x288>)
 8001d16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d18:	b29a      	uxth	r2, r3
 8001d1a:	4b33      	ldr	r3, [pc, #204]	; (8001de8 <_Z4loopv+0x28c>)
 8001d1c:	805a      	strh	r2, [r3, #2]

  uint16_t angle = motorAngle(adcValuesArray[1] - 1250, adcValuesArray[0] - 1250);
 8001d1e:	4b32      	ldr	r3, [pc, #200]	; (8001de8 <_Z4loopv+0x28c>)
 8001d20:	885b      	ldrh	r3, [r3, #2]
 8001d22:	f2a3 43e2 	subw	r3, r3, #1250	; 0x4e2
 8001d26:	4a30      	ldr	r2, [pc, #192]	; (8001de8 <_Z4loopv+0x28c>)
 8001d28:	8812      	ldrh	r2, [r2, #0]
 8001d2a:	f2a2 42e2 	subw	r2, r2, #1250	; 0x4e2
 8001d2e:	4611      	mov	r1, r2
 8001d30:	4618      	mov	r0, r3
 8001d32:	f000 f869 	bl	8001e08 <_Z10motorAnglell>
 8001d36:	4603      	mov	r3, r0
 8001d38:	f8a7 3152 	strh.w	r3, [r7, #338]	; 0x152

  slowPPM1_ONTime = (uint16_t)((((float)angle * (float)slowPPM1_MinTime) / (float)360) + (float)slowPPM1_MinTime);
 8001d3c:	f8b7 3152 	ldrh.w	r3, [r7, #338]	; 0x152
 8001d40:	4618      	mov	r0, r3
 8001d42:	f7fe fee5 	bl	8000b10 <__aeabi_ui2f>
 8001d46:	4603      	mov	r3, r0
 8001d48:	4928      	ldr	r1, [pc, #160]	; (8001dec <_Z4loopv+0x290>)
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	f7fe ff38 	bl	8000bc0 <__aeabi_fmul>
 8001d50:	4603      	mov	r3, r0
 8001d52:	4927      	ldr	r1, [pc, #156]	; (8001df0 <_Z4loopv+0x294>)
 8001d54:	4618      	mov	r0, r3
 8001d56:	f7fe ffe7 	bl	8000d28 <__aeabi_fdiv>
 8001d5a:	4603      	mov	r3, r0
 8001d5c:	4923      	ldr	r1, [pc, #140]	; (8001dec <_Z4loopv+0x290>)
 8001d5e:	4618      	mov	r0, r3
 8001d60:	f7fe fe26 	bl	80009b0 <__addsf3>
 8001d64:	4603      	mov	r3, r0
 8001d66:	4618      	mov	r0, r3
 8001d68:	f7ff f8f0 	bl	8000f4c <__aeabi_f2uiz>
 8001d6c:	4603      	mov	r3, r0
 8001d6e:	b29a      	uxth	r2, r3
 8001d70:	4b20      	ldr	r3, [pc, #128]	; (8001df4 <_Z4loopv+0x298>)
 8001d72:	801a      	strh	r2, [r3, #0]
  slowPPM1_OFFTime = slowPPM1_Pulselength - fastPPM_ONTime;//OFF time in microseconds
 8001d74:	4b20      	ldr	r3, [pc, #128]	; (8001df8 <_Z4loopv+0x29c>)
 8001d76:	881b      	ldrh	r3, [r3, #0]
 8001d78:	f5c3 439c 	rsb	r3, r3, #19968	; 0x4e00
 8001d7c:	3320      	adds	r3, #32
 8001d7e:	b29a      	uxth	r2, r3
 8001d80:	4b1e      	ldr	r3, [pc, #120]	; (8001dfc <_Z4loopv+0x2a0>)
 8001d82:	801a      	strh	r2, [r3, #0]

  fastPPM_ONTime = (uint16_t)((((float)angle * (float)fastPPM_MinTime) / (float)360) + (float)fastPPM_MinTime);
 8001d84:	f8b7 3152 	ldrh.w	r3, [r7, #338]	; 0x152
 8001d88:	4618      	mov	r0, r3
 8001d8a:	f7fe fec1 	bl	8000b10 <__aeabi_ui2f>
 8001d8e:	4603      	mov	r3, r0
 8001d90:	4916      	ldr	r1, [pc, #88]	; (8001dec <_Z4loopv+0x290>)
 8001d92:	4618      	mov	r0, r3
 8001d94:	f7fe ff14 	bl	8000bc0 <__aeabi_fmul>
 8001d98:	4603      	mov	r3, r0
 8001d9a:	4915      	ldr	r1, [pc, #84]	; (8001df0 <_Z4loopv+0x294>)
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	f7fe ffc3 	bl	8000d28 <__aeabi_fdiv>
 8001da2:	4603      	mov	r3, r0
 8001da4:	4911      	ldr	r1, [pc, #68]	; (8001dec <_Z4loopv+0x290>)
 8001da6:	4618      	mov	r0, r3
 8001da8:	f7fe fe02 	bl	80009b0 <__addsf3>
 8001dac:	4603      	mov	r3, r0
 8001dae:	4618      	mov	r0, r3
 8001db0:	f7ff f8cc 	bl	8000f4c <__aeabi_f2uiz>
 8001db4:	4603      	mov	r3, r0
 8001db6:	b29a      	uxth	r2, r3
 8001db8:	4b0f      	ldr	r3, [pc, #60]	; (8001df8 <_Z4loopv+0x29c>)
 8001dba:	801a      	strh	r2, [r3, #0]
  fastPPM_OFFTime = fastPPM_Pulselength - fastPPM_ONTime;//OFF time in microseconds
 8001dbc:	4b0e      	ldr	r3, [pc, #56]	; (8001df8 <_Z4loopv+0x29c>)
 8001dbe:	881b      	ldrh	r3, [r3, #0]
 8001dc0:	f5c3 631c 	rsb	r3, r3, #2496	; 0x9c0
 8001dc4:	3304      	adds	r3, #4
 8001dc6:	b29a      	uxth	r2, r3
 8001dc8:	4b0d      	ldr	r3, [pc, #52]	; (8001e00 <_Z4loopv+0x2a4>)
 8001dca:	801a      	strh	r2, [r3, #0]
}
 8001dcc:	bf00      	nop
 8001dce:	f507 77b4 	add.w	r7, r7, #360	; 0x168
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001dd8:	200004e0 	.word	0x200004e0
 8001ddc:	20000338 	.word	0x20000338
 8001de0:	08009d24 	.word	0x08009d24
 8001de4:	40012000 	.word	0x40012000
 8001de8:	200004e4 	.word	0x200004e4
 8001dec:	447a0000 	.word	0x447a0000
 8001df0:	43b40000 	.word	0x43b40000
 8001df4:	20000002 	.word	0x20000002
 8001df8:	20000000 	.word	0x20000000
 8001dfc:	200004d4 	.word	0x200004d4
 8001e00:	200004d0 	.word	0x200004d0
 8001e04:	00000000 	.word	0x00000000

08001e08 <_Z10motorAnglell>:


uint16_t motorAngle(int32_t hall_1, int32_t hall_2)
{
 8001e08:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001e0a:	b085      	sub	sp, #20
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
 8001e10:	6039      	str	r1, [r7, #0]
  uint16_t angle = 0;
 8001e12:	2300      	movs	r3, #0
 8001e14:	81fb      	strh	r3, [r7, #14]
  uint16_t offset = 0;
 8001e16:	2300      	movs	r3, #0
 8001e18:	81bb      	strh	r3, [r7, #12]
  
  if ((hall_1 == 0) | (hall_2 == 0))
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	bf0c      	ite	eq
 8001e20:	2301      	moveq	r3, #1
 8001e22:	2300      	movne	r3, #0
 8001e24:	b2da      	uxtb	r2, r3
 8001e26:	683b      	ldr	r3, [r7, #0]
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	bf0c      	ite	eq
 8001e2c:	2301      	moveq	r3, #1
 8001e2e:	2300      	movne	r3, #0
 8001e30:	b2db      	uxtb	r3, r3
 8001e32:	4313      	orrs	r3, r2
 8001e34:	b2db      	uxtb	r3, r3
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d015      	beq.n	8001e66 <_Z10motorAnglell+0x5e>
    {
      if (hall_1 == 0)
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d108      	bne.n	8001e52 <_Z10motorAnglell+0x4a>
      {
        if (hall_2 > 0)
 8001e40:	683b      	ldr	r3, [r7, #0]
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	dd02      	ble.n	8001e4c <_Z10motorAnglell+0x44>
        {
          angle = 0;
 8001e46:	2300      	movs	r3, #0
 8001e48:	81fb      	strh	r3, [r7, #14]
 8001e4a:	e04d      	b.n	8001ee8 <_Z10motorAnglell+0xe0>
        }
        else
        {
          angle = 180;
 8001e4c:	23b4      	movs	r3, #180	; 0xb4
 8001e4e:	81fb      	strh	r3, [r7, #14]
 8001e50:	e04a      	b.n	8001ee8 <_Z10motorAnglell+0xe0>
        }
      }
      else
      {
        if (hall_1 > 0)
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	dd02      	ble.n	8001e5e <_Z10motorAnglell+0x56>
        {
          angle = 90;
 8001e58:	235a      	movs	r3, #90	; 0x5a
 8001e5a:	81fb      	strh	r3, [r7, #14]
 8001e5c:	e044      	b.n	8001ee8 <_Z10motorAnglell+0xe0>
        }
        else
        {
          angle = 270;
 8001e5e:	f44f 7387 	mov.w	r3, #270	; 0x10e
 8001e62:	81fb      	strh	r3, [r7, #14]
 8001e64:	e040      	b.n	8001ee8 <_Z10motorAnglell+0xe0>
        }
      }
    }
    else
    {
      if (hall_2 < 0)
 8001e66:	683b      	ldr	r3, [r7, #0]
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	da02      	bge.n	8001e72 <_Z10motorAnglell+0x6a>
      {
        offset = 180;
 8001e6c:	23b4      	movs	r3, #180	; 0xb4
 8001e6e:	81bb      	strh	r3, [r7, #12]
 8001e70:	e008      	b.n	8001e84 <_Z10motorAnglell+0x7c>
      }
      else
      {
        if (hall_1 > 0)
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	dd02      	ble.n	8001e7e <_Z10motorAnglell+0x76>
        {
          offset = 0;
 8001e78:	2300      	movs	r3, #0
 8001e7a:	81bb      	strh	r3, [r7, #12]
 8001e7c:	e002      	b.n	8001e84 <_Z10motorAnglell+0x7c>
        }
        else
        {
          offset = 360;
 8001e7e:	f44f 73b4 	mov.w	r3, #360	; 0x168
 8001e82:	81bb      	strh	r3, [r7, #12]
        }
      }  
      angle = offset + ((atan((float)hall_1 / (float)hall_2) * 180) / M_PI);
 8001e84:	89bb      	ldrh	r3, [r7, #12]
 8001e86:	4618      	mov	r0, r3
 8001e88:	f7fe faf0 	bl	800046c <__aeabi_i2d>
 8001e8c:	4604      	mov	r4, r0
 8001e8e:	460d      	mov	r5, r1
 8001e90:	6878      	ldr	r0, [r7, #4]
 8001e92:	f7fe fe41 	bl	8000b18 <__aeabi_i2f>
 8001e96:	4606      	mov	r6, r0
 8001e98:	6838      	ldr	r0, [r7, #0]
 8001e9a:	f7fe fe3d 	bl	8000b18 <__aeabi_i2f>
 8001e9e:	4603      	mov	r3, r0
 8001ea0:	4619      	mov	r1, r3
 8001ea2:	4630      	mov	r0, r6
 8001ea4:	f7fe ff40 	bl	8000d28 <__aeabi_fdiv>
 8001ea8:	4603      	mov	r3, r0
 8001eaa:	4618      	mov	r0, r3
 8001eac:	f7ff fe4a 	bl	8001b44 <_ZSt4atanf>
 8001eb0:	4603      	mov	r3, r0
 8001eb2:	4913      	ldr	r1, [pc, #76]	; (8001f00 <_Z10motorAnglell+0xf8>)
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	f7fe fe83 	bl	8000bc0 <__aeabi_fmul>
 8001eba:	4603      	mov	r3, r0
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	f7fe fae7 	bl	8000490 <__aeabi_f2d>
 8001ec2:	a30d      	add	r3, pc, #52	; (adr r3, 8001ef8 <_Z10motorAnglell+0xf0>)
 8001ec4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ec8:	f7fe fc64 	bl	8000794 <__aeabi_ddiv>
 8001ecc:	4602      	mov	r2, r0
 8001ece:	460b      	mov	r3, r1
 8001ed0:	4620      	mov	r0, r4
 8001ed2:	4629      	mov	r1, r5
 8001ed4:	f7fe f97e 	bl	80001d4 <__adddf3>
 8001ed8:	4602      	mov	r2, r0
 8001eda:	460b      	mov	r3, r1
 8001edc:	4610      	mov	r0, r2
 8001ede:	4619      	mov	r1, r3
 8001ee0:	f7fe fd40 	bl	8000964 <__aeabi_d2uiz>
 8001ee4:	4603      	mov	r3, r0
 8001ee6:	81fb      	strh	r3, [r7, #14]
    }  
    return angle;
 8001ee8:	89fb      	ldrh	r3, [r7, #14]
}
 8001eea:	4618      	mov	r0, r3
 8001eec:	3714      	adds	r7, #20
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001ef2:	bf00      	nop
 8001ef4:	f3af 8000 	nop.w
 8001ef8:	54442d18 	.word	0x54442d18
 8001efc:	400921fb 	.word	0x400921fb
 8001f00:	43340000 	.word	0x43340000

08001f04 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f04:	b480      	push	{r7}
 8001f06:	b083      	sub	sp, #12
 8001f08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	607b      	str	r3, [r7, #4]
 8001f0e:	4b0f      	ldr	r3, [pc, #60]	; (8001f4c <HAL_MspInit+0x48>)
 8001f10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f12:	4a0e      	ldr	r2, [pc, #56]	; (8001f4c <HAL_MspInit+0x48>)
 8001f14:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f18:	6453      	str	r3, [r2, #68]	; 0x44
 8001f1a:	4b0c      	ldr	r3, [pc, #48]	; (8001f4c <HAL_MspInit+0x48>)
 8001f1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f1e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f22:	607b      	str	r3, [r7, #4]
 8001f24:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f26:	2300      	movs	r3, #0
 8001f28:	603b      	str	r3, [r7, #0]
 8001f2a:	4b08      	ldr	r3, [pc, #32]	; (8001f4c <HAL_MspInit+0x48>)
 8001f2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f2e:	4a07      	ldr	r2, [pc, #28]	; (8001f4c <HAL_MspInit+0x48>)
 8001f30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f34:	6413      	str	r3, [r2, #64]	; 0x40
 8001f36:	4b05      	ldr	r3, [pc, #20]	; (8001f4c <HAL_MspInit+0x48>)
 8001f38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f3e:	603b      	str	r3, [r7, #0]
 8001f40:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f42:	bf00      	nop
 8001f44:	370c      	adds	r7, #12
 8001f46:	46bd      	mov	sp, r7
 8001f48:	bc80      	pop	{r7}
 8001f4a:	4770      	bx	lr
 8001f4c:	40023800 	.word	0x40023800

08001f50 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b08a      	sub	sp, #40	; 0x28
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f58:	f107 0314 	add.w	r3, r7, #20
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	601a      	str	r2, [r3, #0]
 8001f60:	605a      	str	r2, [r3, #4]
 8001f62:	609a      	str	r2, [r3, #8]
 8001f64:	60da      	str	r2, [r3, #12]
 8001f66:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	4a17      	ldr	r2, [pc, #92]	; (8001fcc <HAL_ADC_MspInit+0x7c>)
 8001f6e:	4293      	cmp	r3, r2
 8001f70:	d127      	bne.n	8001fc2 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001f72:	2300      	movs	r3, #0
 8001f74:	613b      	str	r3, [r7, #16]
 8001f76:	4b16      	ldr	r3, [pc, #88]	; (8001fd0 <HAL_ADC_MspInit+0x80>)
 8001f78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f7a:	4a15      	ldr	r2, [pc, #84]	; (8001fd0 <HAL_ADC_MspInit+0x80>)
 8001f7c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f80:	6453      	str	r3, [r2, #68]	; 0x44
 8001f82:	4b13      	ldr	r3, [pc, #76]	; (8001fd0 <HAL_ADC_MspInit+0x80>)
 8001f84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f8a:	613b      	str	r3, [r7, #16]
 8001f8c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f8e:	2300      	movs	r3, #0
 8001f90:	60fb      	str	r3, [r7, #12]
 8001f92:	4b0f      	ldr	r3, [pc, #60]	; (8001fd0 <HAL_ADC_MspInit+0x80>)
 8001f94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f96:	4a0e      	ldr	r2, [pc, #56]	; (8001fd0 <HAL_ADC_MspInit+0x80>)
 8001f98:	f043 0304 	orr.w	r3, r3, #4
 8001f9c:	6313      	str	r3, [r2, #48]	; 0x30
 8001f9e:	4b0c      	ldr	r3, [pc, #48]	; (8001fd0 <HAL_ADC_MspInit+0x80>)
 8001fa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fa2:	f003 0304 	and.w	r3, r3, #4
 8001fa6:	60fb      	str	r3, [r7, #12]
 8001fa8:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC1     ------> ADC1_IN11
    PC2     ------> ADC1_IN12
    */
    GPIO_InitStruct.Pin = ONBOARD_ADC_2_Pin|ONBOARD_ADC_1_Pin;
 8001faa:	2306      	movs	r3, #6
 8001fac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001fae:	2303      	movs	r3, #3
 8001fb0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001fb6:	f107 0314 	add.w	r3, r7, #20
 8001fba:	4619      	mov	r1, r3
 8001fbc:	4805      	ldr	r0, [pc, #20]	; (8001fd4 <HAL_ADC_MspInit+0x84>)
 8001fbe:	f000 fe1d 	bl	8002bfc <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001fc2:	bf00      	nop
 8001fc4:	3728      	adds	r7, #40	; 0x28
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	bd80      	pop	{r7, pc}
 8001fca:	bf00      	nop
 8001fcc:	40012000 	.word	0x40012000
 8001fd0:	40023800 	.word	0x40023800
 8001fd4:	40020800 	.word	0x40020800

08001fd8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b08a      	sub	sp, #40	; 0x28
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fe0:	f107 0314 	add.w	r3, r7, #20
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	601a      	str	r2, [r3, #0]
 8001fe8:	605a      	str	r2, [r3, #4]
 8001fea:	609a      	str	r2, [r3, #8]
 8001fec:	60da      	str	r2, [r3, #12]
 8001fee:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	4a19      	ldr	r2, [pc, #100]	; (800205c <HAL_I2C_MspInit+0x84>)
 8001ff6:	4293      	cmp	r3, r2
 8001ff8:	d12c      	bne.n	8002054 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	613b      	str	r3, [r7, #16]
 8001ffe:	4b18      	ldr	r3, [pc, #96]	; (8002060 <HAL_I2C_MspInit+0x88>)
 8002000:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002002:	4a17      	ldr	r2, [pc, #92]	; (8002060 <HAL_I2C_MspInit+0x88>)
 8002004:	f043 0302 	orr.w	r3, r3, #2
 8002008:	6313      	str	r3, [r2, #48]	; 0x30
 800200a:	4b15      	ldr	r3, [pc, #84]	; (8002060 <HAL_I2C_MspInit+0x88>)
 800200c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800200e:	f003 0302 	and.w	r3, r3, #2
 8002012:	613b      	str	r3, [r7, #16]
 8002014:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002016:	f44f 7340 	mov.w	r3, #768	; 0x300
 800201a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800201c:	2312      	movs	r3, #18
 800201e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002020:	2300      	movs	r3, #0
 8002022:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002024:	2303      	movs	r3, #3
 8002026:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002028:	2304      	movs	r3, #4
 800202a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800202c:	f107 0314 	add.w	r3, r7, #20
 8002030:	4619      	mov	r1, r3
 8002032:	480c      	ldr	r0, [pc, #48]	; (8002064 <HAL_I2C_MspInit+0x8c>)
 8002034:	f000 fde2 	bl	8002bfc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002038:	2300      	movs	r3, #0
 800203a:	60fb      	str	r3, [r7, #12]
 800203c:	4b08      	ldr	r3, [pc, #32]	; (8002060 <HAL_I2C_MspInit+0x88>)
 800203e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002040:	4a07      	ldr	r2, [pc, #28]	; (8002060 <HAL_I2C_MspInit+0x88>)
 8002042:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002046:	6413      	str	r3, [r2, #64]	; 0x40
 8002048:	4b05      	ldr	r3, [pc, #20]	; (8002060 <HAL_I2C_MspInit+0x88>)
 800204a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800204c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002050:	60fb      	str	r3, [r7, #12]
 8002052:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002054:	bf00      	nop
 8002056:	3728      	adds	r7, #40	; 0x28
 8002058:	46bd      	mov	sp, r7
 800205a:	bd80      	pop	{r7, pc}
 800205c:	40005400 	.word	0x40005400
 8002060:	40023800 	.word	0x40023800
 8002064:	40020400 	.word	0x40020400

08002068 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	b086      	sub	sp, #24
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM11)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	4a26      	ldr	r2, [pc, #152]	; (8002110 <HAL_TIM_Base_MspInit+0xa8>)
 8002076:	4293      	cmp	r3, r2
 8002078:	d10e      	bne.n	8002098 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM11_MspInit 0 */

  /* USER CODE END TIM11_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM11_CLK_ENABLE();
 800207a:	2300      	movs	r3, #0
 800207c:	617b      	str	r3, [r7, #20]
 800207e:	4b25      	ldr	r3, [pc, #148]	; (8002114 <HAL_TIM_Base_MspInit+0xac>)
 8002080:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002082:	4a24      	ldr	r2, [pc, #144]	; (8002114 <HAL_TIM_Base_MspInit+0xac>)
 8002084:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002088:	6453      	str	r3, [r2, #68]	; 0x44
 800208a:	4b22      	ldr	r3, [pc, #136]	; (8002114 <HAL_TIM_Base_MspInit+0xac>)
 800208c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800208e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002092:	617b      	str	r3, [r7, #20]
 8002094:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 8002096:	e036      	b.n	8002106 <HAL_TIM_Base_MspInit+0x9e>
  else if(htim_base->Instance==TIM13)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	4a1e      	ldr	r2, [pc, #120]	; (8002118 <HAL_TIM_Base_MspInit+0xb0>)
 800209e:	4293      	cmp	r3, r2
 80020a0:	d116      	bne.n	80020d0 <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM13_CLK_ENABLE();
 80020a2:	2300      	movs	r3, #0
 80020a4:	613b      	str	r3, [r7, #16]
 80020a6:	4b1b      	ldr	r3, [pc, #108]	; (8002114 <HAL_TIM_Base_MspInit+0xac>)
 80020a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020aa:	4a1a      	ldr	r2, [pc, #104]	; (8002114 <HAL_TIM_Base_MspInit+0xac>)
 80020ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80020b0:	6413      	str	r3, [r2, #64]	; 0x40
 80020b2:	4b18      	ldr	r3, [pc, #96]	; (8002114 <HAL_TIM_Base_MspInit+0xac>)
 80020b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020ba:	613b      	str	r3, [r7, #16]
 80020bc:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 2, 0);
 80020be:	2200      	movs	r2, #0
 80020c0:	2102      	movs	r1, #2
 80020c2:	202c      	movs	r0, #44	; 0x2c
 80020c4:	f000 fd63 	bl	8002b8e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 80020c8:	202c      	movs	r0, #44	; 0x2c
 80020ca:	f000 fd7c 	bl	8002bc6 <HAL_NVIC_EnableIRQ>
}
 80020ce:	e01a      	b.n	8002106 <HAL_TIM_Base_MspInit+0x9e>
  else if(htim_base->Instance==TIM14)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	4a11      	ldr	r2, [pc, #68]	; (800211c <HAL_TIM_Base_MspInit+0xb4>)
 80020d6:	4293      	cmp	r3, r2
 80020d8:	d115      	bne.n	8002106 <HAL_TIM_Base_MspInit+0x9e>
    __HAL_RCC_TIM14_CLK_ENABLE();
 80020da:	2300      	movs	r3, #0
 80020dc:	60fb      	str	r3, [r7, #12]
 80020de:	4b0d      	ldr	r3, [pc, #52]	; (8002114 <HAL_TIM_Base_MspInit+0xac>)
 80020e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020e2:	4a0c      	ldr	r2, [pc, #48]	; (8002114 <HAL_TIM_Base_MspInit+0xac>)
 80020e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020e8:	6413      	str	r3, [r2, #64]	; 0x40
 80020ea:	4b0a      	ldr	r3, [pc, #40]	; (8002114 <HAL_TIM_Base_MspInit+0xac>)
 80020ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020f2:	60fb      	str	r3, [r7, #12]
 80020f4:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 1, 0);
 80020f6:	2200      	movs	r2, #0
 80020f8:	2101      	movs	r1, #1
 80020fa:	202d      	movs	r0, #45	; 0x2d
 80020fc:	f000 fd47 	bl	8002b8e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8002100:	202d      	movs	r0, #45	; 0x2d
 8002102:	f000 fd60 	bl	8002bc6 <HAL_NVIC_EnableIRQ>
}
 8002106:	bf00      	nop
 8002108:	3718      	adds	r7, #24
 800210a:	46bd      	mov	sp, r7
 800210c:	bd80      	pop	{r7, pc}
 800210e:	bf00      	nop
 8002110:	40014800 	.word	0x40014800
 8002114:	40023800 	.word	0x40023800
 8002118:	40001c00 	.word	0x40001c00
 800211c:	40002000 	.word	0x40002000

08002120 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 8002124:	f003 f946 	bl	80053b4 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002128:	e7fe      	b.n	8002128 <NMI_Handler+0x8>

0800212a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800212a:	b480      	push	{r7}
 800212c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800212e:	e7fe      	b.n	800212e <HardFault_Handler+0x4>

08002130 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002130:	b480      	push	{r7}
 8002132:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002134:	e7fe      	b.n	8002134 <MemManage_Handler+0x4>

08002136 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002136:	b480      	push	{r7}
 8002138:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800213a:	e7fe      	b.n	800213a <BusFault_Handler+0x4>

0800213c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800213c:	b480      	push	{r7}
 800213e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002140:	e7fe      	b.n	8002140 <UsageFault_Handler+0x4>

08002142 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002142:	b480      	push	{r7}
 8002144:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002146:	bf00      	nop
 8002148:	46bd      	mov	sp, r7
 800214a:	bc80      	pop	{r7}
 800214c:	4770      	bx	lr

0800214e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800214e:	b480      	push	{r7}
 8002150:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002152:	bf00      	nop
 8002154:	46bd      	mov	sp, r7
 8002156:	bc80      	pop	{r7}
 8002158:	4770      	bx	lr

0800215a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800215a:	b480      	push	{r7}
 800215c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800215e:	bf00      	nop
 8002160:	46bd      	mov	sp, r7
 8002162:	bc80      	pop	{r7}
 8002164:	4770      	bx	lr

08002166 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002166:	b580      	push	{r7, lr}
 8002168:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800216a:	f000 f8df 	bl	800232c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800216e:	bf00      	nop
 8002170:	bd80      	pop	{r7, pc}

08002172 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8002172:	b580      	push	{r7, lr}
 8002174:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ONBOARD_READ_IT_3_Pin);
 8002176:	2001      	movs	r0, #1
 8002178:	f000 ff10 	bl	8002f9c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800217c:	bf00      	nop
 800217e:	bd80      	pop	{r7, pc}

08002180 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim13);
 8002184:	4802      	ldr	r0, [pc, #8]	; (8002190 <TIM8_UP_TIM13_IRQHandler+0x10>)
 8002186:	f003 fa53 	bl	8005630 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 800218a:	bf00      	nop
 800218c:	bd80      	pop	{r7, pc}
 800218e:	bf00      	nop
 8002190:	20000440 	.word	0x20000440

08002194 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8002198:	4802      	ldr	r0, [pc, #8]	; (80021a4 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 800219a:	f003 fa49 	bl	8005630 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 800219e:	bf00      	nop
 80021a0:	bd80      	pop	{r7, pc}
 80021a2:	bf00      	nop
 80021a4:	20000488 	.word	0x20000488

080021a8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80021ac:	4802      	ldr	r0, [pc, #8]	; (80021b8 <OTG_FS_IRQHandler+0x10>)
 80021ae:	f001 fc96 	bl	8003ade <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80021b2:	bf00      	nop
 80021b4:	bd80      	pop	{r7, pc}
 80021b6:	bf00      	nop
 80021b8:	200019c0 	.word	0x200019c0

080021bc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	b086      	sub	sp, #24
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80021c4:	4a14      	ldr	r2, [pc, #80]	; (8002218 <_sbrk+0x5c>)
 80021c6:	4b15      	ldr	r3, [pc, #84]	; (800221c <_sbrk+0x60>)
 80021c8:	1ad3      	subs	r3, r2, r3
 80021ca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80021cc:	697b      	ldr	r3, [r7, #20]
 80021ce:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80021d0:	4b13      	ldr	r3, [pc, #76]	; (8002220 <_sbrk+0x64>)
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d102      	bne.n	80021de <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80021d8:	4b11      	ldr	r3, [pc, #68]	; (8002220 <_sbrk+0x64>)
 80021da:	4a12      	ldr	r2, [pc, #72]	; (8002224 <_sbrk+0x68>)
 80021dc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80021de:	4b10      	ldr	r3, [pc, #64]	; (8002220 <_sbrk+0x64>)
 80021e0:	681a      	ldr	r2, [r3, #0]
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	4413      	add	r3, r2
 80021e6:	693a      	ldr	r2, [r7, #16]
 80021e8:	429a      	cmp	r2, r3
 80021ea:	d207      	bcs.n	80021fc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80021ec:	f007 f912 	bl	8009414 <__errno>
 80021f0:	4603      	mov	r3, r0
 80021f2:	220c      	movs	r2, #12
 80021f4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80021f6:	f04f 33ff 	mov.w	r3, #4294967295
 80021fa:	e009      	b.n	8002210 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80021fc:	4b08      	ldr	r3, [pc, #32]	; (8002220 <_sbrk+0x64>)
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002202:	4b07      	ldr	r3, [pc, #28]	; (8002220 <_sbrk+0x64>)
 8002204:	681a      	ldr	r2, [r3, #0]
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	4413      	add	r3, r2
 800220a:	4a05      	ldr	r2, [pc, #20]	; (8002220 <_sbrk+0x64>)
 800220c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800220e:	68fb      	ldr	r3, [r7, #12]
}
 8002210:	4618      	mov	r0, r3
 8002212:	3718      	adds	r7, #24
 8002214:	46bd      	mov	sp, r7
 8002216:	bd80      	pop	{r7, pc}
 8002218:	20020000 	.word	0x20020000
 800221c:	00000400 	.word	0x00000400
 8002220:	200004e8 	.word	0x200004e8
 8002224:	20001dd0 	.word	0x20001dd0

08002228 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002228:	b480      	push	{r7}
 800222a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800222c:	bf00      	nop
 800222e:	46bd      	mov	sp, r7
 8002230:	bc80      	pop	{r7}
 8002232:	4770      	bx	lr

08002234 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002234:	f8df d034 	ldr.w	sp, [pc, #52]	; 800226c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002238:	480d      	ldr	r0, [pc, #52]	; (8002270 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800223a:	490e      	ldr	r1, [pc, #56]	; (8002274 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800223c:	4a0e      	ldr	r2, [pc, #56]	; (8002278 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800223e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002240:	e002      	b.n	8002248 <LoopCopyDataInit>

08002242 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002242:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002244:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002246:	3304      	adds	r3, #4

08002248 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002248:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800224a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800224c:	d3f9      	bcc.n	8002242 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800224e:	4a0b      	ldr	r2, [pc, #44]	; (800227c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002250:	4c0b      	ldr	r4, [pc, #44]	; (8002280 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002252:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002254:	e001      	b.n	800225a <LoopFillZerobss>

08002256 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002256:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002258:	3204      	adds	r2, #4

0800225a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800225a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800225c:	d3fb      	bcc.n	8002256 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800225e:	f7ff ffe3 	bl	8002228 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002262:	f007 f8dd 	bl	8009420 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002266:	f7ff f91f 	bl	80014a8 <main>
  bx  lr    
 800226a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800226c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002270:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002274:	200001ec 	.word	0x200001ec
  ldr r2, =_sidata
 8002278:	08009e30 	.word	0x08009e30
  ldr r2, =_sbss
 800227c:	200001ec 	.word	0x200001ec
  ldr r4, =_ebss
 8002280:	20001dd0 	.word	0x20001dd0

08002284 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002284:	e7fe      	b.n	8002284 <ADC_IRQHandler>
	...

08002288 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
   __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800228c:	4b0e      	ldr	r3, [pc, #56]	; (80022c8 <HAL_Init+0x40>)
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	4a0d      	ldr	r2, [pc, #52]	; (80022c8 <HAL_Init+0x40>)
 8002292:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002296:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
   __HAL_FLASH_DATA_CACHE_ENABLE();
 8002298:	4b0b      	ldr	r3, [pc, #44]	; (80022c8 <HAL_Init+0x40>)
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	4a0a      	ldr	r2, [pc, #40]	; (80022c8 <HAL_Init+0x40>)
 800229e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80022a2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80022a4:	4b08      	ldr	r3, [pc, #32]	; (80022c8 <HAL_Init+0x40>)
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	4a07      	ldr	r2, [pc, #28]	; (80022c8 <HAL_Init+0x40>)
 80022aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022ae:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80022b0:	2003      	movs	r0, #3
 80022b2:	f000 fc61 	bl	8002b78 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80022b6:	200f      	movs	r0, #15
 80022b8:	f000 f808 	bl	80022cc <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 80022bc:	f7ff fe22 	bl	8001f04 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 80022c0:	2300      	movs	r3, #0
}
 80022c2:	4618      	mov	r0, r3
 80022c4:	bd80      	pop	{r7, pc}
 80022c6:	bf00      	nop
 80022c8:	40023c00 	.word	0x40023c00

080022cc <HAL_InitTick>:
  *       implementation  in user file.
  * @param  TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	b082      	sub	sp, #8
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80022d4:	4b12      	ldr	r3, [pc, #72]	; (8002320 <HAL_InitTick+0x54>)
 80022d6:	681a      	ldr	r2, [r3, #0]
 80022d8:	4b12      	ldr	r3, [pc, #72]	; (8002324 <HAL_InitTick+0x58>)
 80022da:	781b      	ldrb	r3, [r3, #0]
 80022dc:	4619      	mov	r1, r3
 80022de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80022e2:	fbb3 f3f1 	udiv	r3, r3, r1
 80022e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80022ea:	4618      	mov	r0, r3
 80022ec:	f000 fc79 	bl	8002be2 <HAL_SYSTICK_Config>
 80022f0:	4603      	mov	r3, r0
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d001      	beq.n	80022fa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80022f6:	2301      	movs	r3, #1
 80022f8:	e00e      	b.n	8002318 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	2b0f      	cmp	r3, #15
 80022fe:	d80a      	bhi.n	8002316 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002300:	2200      	movs	r2, #0
 8002302:	6879      	ldr	r1, [r7, #4]
 8002304:	f04f 30ff 	mov.w	r0, #4294967295
 8002308:	f000 fc41 	bl	8002b8e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800230c:	4a06      	ldr	r2, [pc, #24]	; (8002328 <HAL_InitTick+0x5c>)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002312:	2300      	movs	r3, #0
 8002314:	e000      	b.n	8002318 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002316:	2301      	movs	r3, #1
}
 8002318:	4618      	mov	r0, r3
 800231a:	3708      	adds	r7, #8
 800231c:	46bd      	mov	sp, r7
 800231e:	bd80      	pop	{r7, pc}
 8002320:	20000004 	.word	0x20000004
 8002324:	2000000c 	.word	0x2000000c
 8002328:	20000008 	.word	0x20000008

0800232c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800232c:	b480      	push	{r7}
 800232e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002330:	4b05      	ldr	r3, [pc, #20]	; (8002348 <HAL_IncTick+0x1c>)
 8002332:	781b      	ldrb	r3, [r3, #0]
 8002334:	461a      	mov	r2, r3
 8002336:	4b05      	ldr	r3, [pc, #20]	; (800234c <HAL_IncTick+0x20>)
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	4413      	add	r3, r2
 800233c:	4a03      	ldr	r2, [pc, #12]	; (800234c <HAL_IncTick+0x20>)
 800233e:	6013      	str	r3, [r2, #0]
}
 8002340:	bf00      	nop
 8002342:	46bd      	mov	sp, r7
 8002344:	bc80      	pop	{r7}
 8002346:	4770      	bx	lr
 8002348:	2000000c 	.word	0x2000000c
 800234c:	200004f8 	.word	0x200004f8

08002350 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002350:	b480      	push	{r7}
 8002352:	af00      	add	r7, sp, #0
  return uwTick;
 8002354:	4b02      	ldr	r3, [pc, #8]	; (8002360 <HAL_GetTick+0x10>)
 8002356:	681b      	ldr	r3, [r3, #0]
}
 8002358:	4618      	mov	r0, r3
 800235a:	46bd      	mov	sp, r7
 800235c:	bc80      	pop	{r7}
 800235e:	4770      	bx	lr
 8002360:	200004f8 	.word	0x200004f8

08002364 <HAL_Delay>:
  *       implementations in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	b084      	sub	sp, #16
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800236c:	f7ff fff0 	bl	8002350 <HAL_GetTick>
 8002370:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	f1b3 3fff 	cmp.w	r3, #4294967295
 800237c:	d005      	beq.n	800238a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800237e:	4b0a      	ldr	r3, [pc, #40]	; (80023a8 <HAL_Delay+0x44>)
 8002380:	781b      	ldrb	r3, [r3, #0]
 8002382:	461a      	mov	r2, r3
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	4413      	add	r3, r2
 8002388:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800238a:	bf00      	nop
 800238c:	f7ff ffe0 	bl	8002350 <HAL_GetTick>
 8002390:	4602      	mov	r2, r0
 8002392:	68bb      	ldr	r3, [r7, #8]
 8002394:	1ad3      	subs	r3, r2, r3
 8002396:	68fa      	ldr	r2, [r7, #12]
 8002398:	429a      	cmp	r2, r3
 800239a:	d8f7      	bhi.n	800238c <HAL_Delay+0x28>
  {
  }
}
 800239c:	bf00      	nop
 800239e:	bf00      	nop
 80023a0:	3710      	adds	r7, #16
 80023a2:	46bd      	mov	sp, r7
 80023a4:	bd80      	pop	{r7, pc}
 80023a6:	bf00      	nop
 80023a8:	2000000c 	.word	0x2000000c

080023ac <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	b084      	sub	sp, #16
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80023b4:	2300      	movs	r3, #0
 80023b6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d101      	bne.n	80023c2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80023be:	2301      	movs	r3, #1
 80023c0:	e033      	b.n	800242a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d109      	bne.n	80023de <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80023ca:	6878      	ldr	r0, [r7, #4]
 80023cc:	f7ff fdc0 	bl	8001f50 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	2200      	movs	r2, #0
 80023d4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	2200      	movs	r2, #0
 80023da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023e2:	f003 0310 	and.w	r3, r3, #16
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d118      	bne.n	800241c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ee:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80023f2:	f023 0302 	bic.w	r3, r3, #2
 80023f6:	f043 0202 	orr.w	r2, r3, #2
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80023fe:	6878      	ldr	r0, [r7, #4]
 8002400:	f000 f9e8 	bl	80027d4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	2200      	movs	r2, #0
 8002408:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800240e:	f023 0303 	bic.w	r3, r3, #3
 8002412:	f043 0201 	orr.w	r2, r3, #1
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	641a      	str	r2, [r3, #64]	; 0x40
 800241a:	e001      	b.n	8002420 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800241c:	2301      	movs	r3, #1
 800241e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	2200      	movs	r2, #0
 8002424:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002428:	7bfb      	ldrb	r3, [r7, #15]
}
 800242a:	4618      	mov	r0, r3
 800242c:	3710      	adds	r7, #16
 800242e:	46bd      	mov	sp, r7
 8002430:	bd80      	pop	{r7, pc}
	...

08002434 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002434:	b480      	push	{r7}
 8002436:	b085      	sub	sp, #20
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 800243c:	2300      	movs	r3, #0
 800243e:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002446:	2b01      	cmp	r3, #1
 8002448:	d101      	bne.n	800244e <HAL_ADC_Start+0x1a>
 800244a:	2302      	movs	r3, #2
 800244c:	e095      	b.n	800257a <HAL_ADC_Start+0x146>
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	2201      	movs	r2, #1
 8002452:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	689b      	ldr	r3, [r3, #8]
 800245c:	f003 0301 	and.w	r3, r3, #1
 8002460:	2b01      	cmp	r3, #1
 8002462:	d018      	beq.n	8002496 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	689a      	ldr	r2, [r3, #8]
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f042 0201 	orr.w	r2, r2, #1
 8002472:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002474:	4b43      	ldr	r3, [pc, #268]	; (8002584 <HAL_ADC_Start+0x150>)
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	4a43      	ldr	r2, [pc, #268]	; (8002588 <HAL_ADC_Start+0x154>)
 800247a:	fba2 2303 	umull	r2, r3, r2, r3
 800247e:	0c9a      	lsrs	r2, r3, #18
 8002480:	4613      	mov	r3, r2
 8002482:	005b      	lsls	r3, r3, #1
 8002484:	4413      	add	r3, r2
 8002486:	60fb      	str	r3, [r7, #12]
    while(counter != 0U)
 8002488:	e002      	b.n	8002490 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	3b01      	subs	r3, #1
 800248e:	60fb      	str	r3, [r7, #12]
    while(counter != 0U)
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	2b00      	cmp	r3, #0
 8002494:	d1f9      	bne.n	800248a <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	689b      	ldr	r3, [r3, #8]
 800249c:	f003 0301 	and.w	r3, r3, #1
 80024a0:	2b01      	cmp	r3, #1
 80024a2:	d15d      	bne.n	8002560 <HAL_ADC_Start+0x12c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024a8:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80024ac:	f023 0301 	bic.w	r3, r3, #1
 80024b0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	685b      	ldr	r3, [r3, #4]
 80024be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d007      	beq.n	80024d6 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ca:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80024ce:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024da:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80024de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80024e2:	d106      	bne.n	80024f2 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024e8:	f023 0206 	bic.w	r2, r3, #6
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	645a      	str	r2, [r3, #68]	; 0x44
 80024f0:	e002      	b.n	80024f8 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	2200      	movs	r2, #0
 80024f6:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	2200      	movs	r2, #0
 80024fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002508:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 800250a:	4b20      	ldr	r3, [pc, #128]	; (800258c <HAL_ADC_Start+0x158>)
 800250c:	685b      	ldr	r3, [r3, #4]
 800250e:	f003 031f 	and.w	r3, r3, #31
 8002512:	2b00      	cmp	r3, #0
 8002514:	d10f      	bne.n	8002536 <HAL_ADC_Start+0x102>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	689b      	ldr	r3, [r3, #8]
 800251c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002520:	2b00      	cmp	r3, #0
 8002522:	d129      	bne.n	8002578 <HAL_ADC_Start+0x144>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	689a      	ldr	r2, [r3, #8]
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002532:	609a      	str	r2, [r3, #8]
 8002534:	e020      	b.n	8002578 <HAL_ADC_Start+0x144>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	4a15      	ldr	r2, [pc, #84]	; (8002590 <HAL_ADC_Start+0x15c>)
 800253c:	4293      	cmp	r3, r2
 800253e:	d11b      	bne.n	8002578 <HAL_ADC_Start+0x144>
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	689b      	ldr	r3, [r3, #8]
 8002546:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800254a:	2b00      	cmp	r3, #0
 800254c:	d114      	bne.n	8002578 <HAL_ADC_Start+0x144>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	689a      	ldr	r2, [r3, #8]
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800255c:	609a      	str	r2, [r3, #8]
 800255e:	e00b      	b.n	8002578 <HAL_ADC_Start+0x144>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002564:	f043 0210 	orr.w	r2, r3, #16
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002570:	f043 0201 	orr.w	r2, r3, #1
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8002578:	2300      	movs	r3, #0
}
 800257a:	4618      	mov	r0, r3
 800257c:	3714      	adds	r7, #20
 800257e:	46bd      	mov	sp, r7
 8002580:	bc80      	pop	{r7}
 8002582:	4770      	bx	lr
 8002584:	20000004 	.word	0x20000004
 8002588:	431bde83 	.word	0x431bde83
 800258c:	40012300 	.word	0x40012300
 8002590:	40012000 	.word	0x40012000

08002594 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002594:	b480      	push	{r7}
 8002596:	b085      	sub	sp, #20
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
 800259c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800259e:	2300      	movs	r3, #0
 80025a0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80025a8:	2b01      	cmp	r3, #1
 80025aa:	d101      	bne.n	80025b0 <HAL_ADC_ConfigChannel+0x1c>
 80025ac:	2302      	movs	r3, #2
 80025ae:	e103      	b.n	80027b8 <HAL_ADC_ConfigChannel+0x224>
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	2201      	movs	r2, #1
 80025b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	2b09      	cmp	r3, #9
 80025be:	d925      	bls.n	800260c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	68d9      	ldr	r1, [r3, #12]
 80025c6:	683b      	ldr	r3, [r7, #0]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	b29b      	uxth	r3, r3
 80025cc:	461a      	mov	r2, r3
 80025ce:	4613      	mov	r3, r2
 80025d0:	005b      	lsls	r3, r3, #1
 80025d2:	4413      	add	r3, r2
 80025d4:	3b1e      	subs	r3, #30
 80025d6:	2207      	movs	r2, #7
 80025d8:	fa02 f303 	lsl.w	r3, r2, r3
 80025dc:	43da      	mvns	r2, r3
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	400a      	ands	r2, r1
 80025e4:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	68d9      	ldr	r1, [r3, #12]
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	689a      	ldr	r2, [r3, #8]
 80025f0:	683b      	ldr	r3, [r7, #0]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	b29b      	uxth	r3, r3
 80025f6:	4618      	mov	r0, r3
 80025f8:	4603      	mov	r3, r0
 80025fa:	005b      	lsls	r3, r3, #1
 80025fc:	4403      	add	r3, r0
 80025fe:	3b1e      	subs	r3, #30
 8002600:	409a      	lsls	r2, r3
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	430a      	orrs	r2, r1
 8002608:	60da      	str	r2, [r3, #12]
 800260a:	e022      	b.n	8002652 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	6919      	ldr	r1, [r3, #16]
 8002612:	683b      	ldr	r3, [r7, #0]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	b29b      	uxth	r3, r3
 8002618:	461a      	mov	r2, r3
 800261a:	4613      	mov	r3, r2
 800261c:	005b      	lsls	r3, r3, #1
 800261e:	4413      	add	r3, r2
 8002620:	2207      	movs	r2, #7
 8002622:	fa02 f303 	lsl.w	r3, r2, r3
 8002626:	43da      	mvns	r2, r3
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	400a      	ands	r2, r1
 800262e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	6919      	ldr	r1, [r3, #16]
 8002636:	683b      	ldr	r3, [r7, #0]
 8002638:	689a      	ldr	r2, [r3, #8]
 800263a:	683b      	ldr	r3, [r7, #0]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	b29b      	uxth	r3, r3
 8002640:	4618      	mov	r0, r3
 8002642:	4603      	mov	r3, r0
 8002644:	005b      	lsls	r3, r3, #1
 8002646:	4403      	add	r3, r0
 8002648:	409a      	lsls	r2, r3
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	430a      	orrs	r2, r1
 8002650:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002652:	683b      	ldr	r3, [r7, #0]
 8002654:	685b      	ldr	r3, [r3, #4]
 8002656:	2b06      	cmp	r3, #6
 8002658:	d824      	bhi.n	80026a4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002660:	683b      	ldr	r3, [r7, #0]
 8002662:	685a      	ldr	r2, [r3, #4]
 8002664:	4613      	mov	r3, r2
 8002666:	009b      	lsls	r3, r3, #2
 8002668:	4413      	add	r3, r2
 800266a:	3b05      	subs	r3, #5
 800266c:	221f      	movs	r2, #31
 800266e:	fa02 f303 	lsl.w	r3, r2, r3
 8002672:	43da      	mvns	r2, r3
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	400a      	ands	r2, r1
 800267a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002682:	683b      	ldr	r3, [r7, #0]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	b29b      	uxth	r3, r3
 8002688:	4618      	mov	r0, r3
 800268a:	683b      	ldr	r3, [r7, #0]
 800268c:	685a      	ldr	r2, [r3, #4]
 800268e:	4613      	mov	r3, r2
 8002690:	009b      	lsls	r3, r3, #2
 8002692:	4413      	add	r3, r2
 8002694:	3b05      	subs	r3, #5
 8002696:	fa00 f203 	lsl.w	r2, r0, r3
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	430a      	orrs	r2, r1
 80026a0:	635a      	str	r2, [r3, #52]	; 0x34
 80026a2:	e04c      	b.n	800273e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80026a4:	683b      	ldr	r3, [r7, #0]
 80026a6:	685b      	ldr	r3, [r3, #4]
 80026a8:	2b0c      	cmp	r3, #12
 80026aa:	d824      	bhi.n	80026f6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80026b2:	683b      	ldr	r3, [r7, #0]
 80026b4:	685a      	ldr	r2, [r3, #4]
 80026b6:	4613      	mov	r3, r2
 80026b8:	009b      	lsls	r3, r3, #2
 80026ba:	4413      	add	r3, r2
 80026bc:	3b23      	subs	r3, #35	; 0x23
 80026be:	221f      	movs	r2, #31
 80026c0:	fa02 f303 	lsl.w	r3, r2, r3
 80026c4:	43da      	mvns	r2, r3
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	400a      	ands	r2, r1
 80026cc:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80026d4:	683b      	ldr	r3, [r7, #0]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	b29b      	uxth	r3, r3
 80026da:	4618      	mov	r0, r3
 80026dc:	683b      	ldr	r3, [r7, #0]
 80026de:	685a      	ldr	r2, [r3, #4]
 80026e0:	4613      	mov	r3, r2
 80026e2:	009b      	lsls	r3, r3, #2
 80026e4:	4413      	add	r3, r2
 80026e6:	3b23      	subs	r3, #35	; 0x23
 80026e8:	fa00 f203 	lsl.w	r2, r0, r3
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	430a      	orrs	r2, r1
 80026f2:	631a      	str	r2, [r3, #48]	; 0x30
 80026f4:	e023      	b.n	800273e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80026fc:	683b      	ldr	r3, [r7, #0]
 80026fe:	685a      	ldr	r2, [r3, #4]
 8002700:	4613      	mov	r3, r2
 8002702:	009b      	lsls	r3, r3, #2
 8002704:	4413      	add	r3, r2
 8002706:	3b41      	subs	r3, #65	; 0x41
 8002708:	221f      	movs	r2, #31
 800270a:	fa02 f303 	lsl.w	r3, r2, r3
 800270e:	43da      	mvns	r2, r3
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	400a      	ands	r2, r1
 8002716:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800271e:	683b      	ldr	r3, [r7, #0]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	b29b      	uxth	r3, r3
 8002724:	4618      	mov	r0, r3
 8002726:	683b      	ldr	r3, [r7, #0]
 8002728:	685a      	ldr	r2, [r3, #4]
 800272a:	4613      	mov	r3, r2
 800272c:	009b      	lsls	r3, r3, #2
 800272e:	4413      	add	r3, r2
 8002730:	3b41      	subs	r3, #65	; 0x41
 8002732:	fa00 f203 	lsl.w	r2, r0, r3
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	430a      	orrs	r2, r1
 800273c:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	4a20      	ldr	r2, [pc, #128]	; (80027c4 <HAL_ADC_ConfigChannel+0x230>)
 8002744:	4293      	cmp	r3, r2
 8002746:	d109      	bne.n	800275c <HAL_ADC_ConfigChannel+0x1c8>
 8002748:	683b      	ldr	r3, [r7, #0]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	2b12      	cmp	r3, #18
 800274e:	d105      	bne.n	800275c <HAL_ADC_ConfigChannel+0x1c8>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8002750:	4b1d      	ldr	r3, [pc, #116]	; (80027c8 <HAL_ADC_ConfigChannel+0x234>)
 8002752:	685b      	ldr	r3, [r3, #4]
 8002754:	4a1c      	ldr	r2, [pc, #112]	; (80027c8 <HAL_ADC_ConfigChannel+0x234>)
 8002756:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800275a:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	4a18      	ldr	r2, [pc, #96]	; (80027c4 <HAL_ADC_ConfigChannel+0x230>)
 8002762:	4293      	cmp	r3, r2
 8002764:	d123      	bne.n	80027ae <HAL_ADC_ConfigChannel+0x21a>
 8002766:	683b      	ldr	r3, [r7, #0]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	2b10      	cmp	r3, #16
 800276c:	d003      	beq.n	8002776 <HAL_ADC_ConfigChannel+0x1e2>
 800276e:	683b      	ldr	r3, [r7, #0]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	2b11      	cmp	r3, #17
 8002774:	d11b      	bne.n	80027ae <HAL_ADC_ConfigChannel+0x21a>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8002776:	4b14      	ldr	r3, [pc, #80]	; (80027c8 <HAL_ADC_ConfigChannel+0x234>)
 8002778:	685b      	ldr	r3, [r3, #4]
 800277a:	4a13      	ldr	r2, [pc, #76]	; (80027c8 <HAL_ADC_ConfigChannel+0x234>)
 800277c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002780:	6053      	str	r3, [r2, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002782:	683b      	ldr	r3, [r7, #0]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	2b10      	cmp	r3, #16
 8002788:	d111      	bne.n	80027ae <HAL_ADC_ConfigChannel+0x21a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800278a:	4b10      	ldr	r3, [pc, #64]	; (80027cc <HAL_ADC_ConfigChannel+0x238>)
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	4a10      	ldr	r2, [pc, #64]	; (80027d0 <HAL_ADC_ConfigChannel+0x23c>)
 8002790:	fba2 2303 	umull	r2, r3, r2, r3
 8002794:	0c9a      	lsrs	r2, r3, #18
 8002796:	4613      	mov	r3, r2
 8002798:	009b      	lsls	r3, r3, #2
 800279a:	4413      	add	r3, r2
 800279c:	005b      	lsls	r3, r3, #1
 800279e:	60fb      	str	r3, [r7, #12]
      while(counter != 0U)
 80027a0:	e002      	b.n	80027a8 <HAL_ADC_ConfigChannel+0x214>
      {
        counter--;
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	3b01      	subs	r3, #1
 80027a6:	60fb      	str	r3, [r7, #12]
      while(counter != 0U)
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d1f9      	bne.n	80027a2 <HAL_ADC_ConfigChannel+0x20e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	2200      	movs	r2, #0
 80027b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80027b6:	2300      	movs	r3, #0
}
 80027b8:	4618      	mov	r0, r3
 80027ba:	3714      	adds	r7, #20
 80027bc:	46bd      	mov	sp, r7
 80027be:	bc80      	pop	{r7}
 80027c0:	4770      	bx	lr
 80027c2:	bf00      	nop
 80027c4:	40012000 	.word	0x40012000
 80027c8:	40012300 	.word	0x40012300
 80027cc:	20000004 	.word	0x20000004
 80027d0:	431bde83 	.word	0x431bde83

080027d4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80027d4:	b480      	push	{r7}
 80027d6:	b085      	sub	sp, #20
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 80027dc:	4b7e      	ldr	r3, [pc, #504]	; (80029d8 <ADC_Init+0x204>)
 80027de:	685b      	ldr	r3, [r3, #4]
 80027e0:	4a7d      	ldr	r2, [pc, #500]	; (80029d8 <ADC_Init+0x204>)
 80027e2:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80027e6:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 80027e8:	4b7b      	ldr	r3, [pc, #492]	; (80029d8 <ADC_Init+0x204>)
 80027ea:	685a      	ldr	r2, [r3, #4]
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	685b      	ldr	r3, [r3, #4]
 80027f0:	4979      	ldr	r1, [pc, #484]	; (80029d8 <ADC_Init+0x204>)
 80027f2:	4313      	orrs	r3, r2
 80027f4:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	685a      	ldr	r2, [r3, #4]
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002804:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	6859      	ldr	r1, [r3, #4]
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	691b      	ldr	r3, [r3, #16]
 8002810:	021a      	lsls	r2, r3, #8
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	430a      	orrs	r2, r1
 8002818:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	685a      	ldr	r2, [r3, #4]
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002828:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	6859      	ldr	r1, [r3, #4]
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	689a      	ldr	r2, [r3, #8]
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	430a      	orrs	r2, r1
 800283a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	689a      	ldr	r2, [r3, #8]
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800284a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	6899      	ldr	r1, [r3, #8]
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	68da      	ldr	r2, [r3, #12]
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	430a      	orrs	r2, r1
 800285c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002862:	4a5e      	ldr	r2, [pc, #376]	; (80029dc <ADC_Init+0x208>)
 8002864:	4293      	cmp	r3, r2
 8002866:	d022      	beq.n	80028ae <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	689a      	ldr	r2, [r3, #8]
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002876:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	6899      	ldr	r1, [r3, #8]
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	430a      	orrs	r2, r1
 8002888:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	689a      	ldr	r2, [r3, #8]
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002898:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	6899      	ldr	r1, [r3, #8]
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	430a      	orrs	r2, r1
 80028aa:	609a      	str	r2, [r3, #8]
 80028ac:	e00f      	b.n	80028ce <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	689a      	ldr	r2, [r3, #8]
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80028bc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	689a      	ldr	r2, [r3, #8]
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80028cc:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	689a      	ldr	r2, [r3, #8]
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f022 0202 	bic.w	r2, r2, #2
 80028dc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	6899      	ldr	r1, [r3, #8]
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	7e1b      	ldrb	r3, [r3, #24]
 80028e8:	005a      	lsls	r2, r3, #1
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	430a      	orrs	r2, r1
 80028f0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d027      	beq.n	800294c <ADC_Init+0x178>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	685a      	ldr	r2, [r3, #4]
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800290a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	685a      	ldr	r2, [r3, #4]
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800291a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002920:	3b01      	subs	r3, #1
 8002922:	f44f 4260 	mov.w	r2, #57344	; 0xe000
 8002926:	60fa      	str	r2, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002928:	68fa      	ldr	r2, [r7, #12]
 800292a:	fa92 f2a2 	rbit	r2, r2
 800292e:	60ba      	str	r2, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002930:	68ba      	ldr	r2, [r7, #8]
 8002932:	fab2 f282 	clz	r2, r2
 8002936:	b2d2      	uxtb	r2, r2
 8002938:	fa03 f102 	lsl.w	r1, r3, r2
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	685a      	ldr	r2, [r3, #4]
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	430a      	orrs	r2, r1
 8002948:	605a      	str	r2, [r3, #4]
 800294a:	e007      	b.n	800295c <ADC_Init+0x188>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	685a      	ldr	r2, [r3, #4]
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800295a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800296a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	69db      	ldr	r3, [r3, #28]
 8002976:	3b01      	subs	r3, #1
 8002978:	051a      	lsls	r2, r3, #20
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	430a      	orrs	r2, r1
 8002980:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	689a      	ldr	r2, [r3, #8]
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002990:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	6899      	ldr	r1, [r3, #8]
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800299e:	025a      	lsls	r2, r3, #9
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	430a      	orrs	r2, r1
 80029a6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	689a      	ldr	r2, [r3, #8]
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80029b6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	6899      	ldr	r1, [r3, #8]
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	695b      	ldr	r3, [r3, #20]
 80029c2:	029a      	lsls	r2, r3, #10
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	430a      	orrs	r2, r1
 80029ca:	609a      	str	r2, [r3, #8]
}
 80029cc:	bf00      	nop
 80029ce:	3714      	adds	r7, #20
 80029d0:	46bd      	mov	sp, r7
 80029d2:	bc80      	pop	{r7}
 80029d4:	4770      	bx	lr
 80029d6:	bf00      	nop
 80029d8:	40012300 	.word	0x40012300
 80029dc:	0f000001 	.word	0x0f000001

080029e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80029e0:	b480      	push	{r7}
 80029e2:	b085      	sub	sp, #20
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	f003 0307 	and.w	r3, r3, #7
 80029ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80029f0:	4b0c      	ldr	r3, [pc, #48]	; (8002a24 <__NVIC_SetPriorityGrouping+0x44>)
 80029f2:	68db      	ldr	r3, [r3, #12]
 80029f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80029f6:	68ba      	ldr	r2, [r7, #8]
 80029f8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80029fc:	4013      	ands	r3, r2
 80029fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002a04:	68bb      	ldr	r3, [r7, #8]
 8002a06:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002a08:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002a0c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a10:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002a12:	4a04      	ldr	r2, [pc, #16]	; (8002a24 <__NVIC_SetPriorityGrouping+0x44>)
 8002a14:	68bb      	ldr	r3, [r7, #8]
 8002a16:	60d3      	str	r3, [r2, #12]
}
 8002a18:	bf00      	nop
 8002a1a:	3714      	adds	r7, #20
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	bc80      	pop	{r7}
 8002a20:	4770      	bx	lr
 8002a22:	bf00      	nop
 8002a24:	e000ed00 	.word	0xe000ed00

08002a28 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002a28:	b480      	push	{r7}
 8002a2a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002a2c:	4b04      	ldr	r3, [pc, #16]	; (8002a40 <__NVIC_GetPriorityGrouping+0x18>)
 8002a2e:	68db      	ldr	r3, [r3, #12]
 8002a30:	0a1b      	lsrs	r3, r3, #8
 8002a32:	f003 0307 	and.w	r3, r3, #7
}
 8002a36:	4618      	mov	r0, r3
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	bc80      	pop	{r7}
 8002a3c:	4770      	bx	lr
 8002a3e:	bf00      	nop
 8002a40:	e000ed00 	.word	0xe000ed00

08002a44 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a44:	b480      	push	{r7}
 8002a46:	b083      	sub	sp, #12
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	4603      	mov	r3, r0
 8002a4c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	db0b      	blt.n	8002a6e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002a56:	79fb      	ldrb	r3, [r7, #7]
 8002a58:	f003 021f 	and.w	r2, r3, #31
 8002a5c:	4906      	ldr	r1, [pc, #24]	; (8002a78 <__NVIC_EnableIRQ+0x34>)
 8002a5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a62:	095b      	lsrs	r3, r3, #5
 8002a64:	2001      	movs	r0, #1
 8002a66:	fa00 f202 	lsl.w	r2, r0, r2
 8002a6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002a6e:	bf00      	nop
 8002a70:	370c      	adds	r7, #12
 8002a72:	46bd      	mov	sp, r7
 8002a74:	bc80      	pop	{r7}
 8002a76:	4770      	bx	lr
 8002a78:	e000e100 	.word	0xe000e100

08002a7c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002a7c:	b480      	push	{r7}
 8002a7e:	b083      	sub	sp, #12
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	4603      	mov	r3, r0
 8002a84:	6039      	str	r1, [r7, #0]
 8002a86:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	db0a      	blt.n	8002aa6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a90:	683b      	ldr	r3, [r7, #0]
 8002a92:	b2da      	uxtb	r2, r3
 8002a94:	490c      	ldr	r1, [pc, #48]	; (8002ac8 <__NVIC_SetPriority+0x4c>)
 8002a96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a9a:	0112      	lsls	r2, r2, #4
 8002a9c:	b2d2      	uxtb	r2, r2
 8002a9e:	440b      	add	r3, r1
 8002aa0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002aa4:	e00a      	b.n	8002abc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002aa6:	683b      	ldr	r3, [r7, #0]
 8002aa8:	b2da      	uxtb	r2, r3
 8002aaa:	4908      	ldr	r1, [pc, #32]	; (8002acc <__NVIC_SetPriority+0x50>)
 8002aac:	79fb      	ldrb	r3, [r7, #7]
 8002aae:	f003 030f 	and.w	r3, r3, #15
 8002ab2:	3b04      	subs	r3, #4
 8002ab4:	0112      	lsls	r2, r2, #4
 8002ab6:	b2d2      	uxtb	r2, r2
 8002ab8:	440b      	add	r3, r1
 8002aba:	761a      	strb	r2, [r3, #24]
}
 8002abc:	bf00      	nop
 8002abe:	370c      	adds	r7, #12
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	bc80      	pop	{r7}
 8002ac4:	4770      	bx	lr
 8002ac6:	bf00      	nop
 8002ac8:	e000e100 	.word	0xe000e100
 8002acc:	e000ed00 	.word	0xe000ed00

08002ad0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ad0:	b480      	push	{r7}
 8002ad2:	b089      	sub	sp, #36	; 0x24
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	60f8      	str	r0, [r7, #12]
 8002ad8:	60b9      	str	r1, [r7, #8]
 8002ada:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	f003 0307 	and.w	r3, r3, #7
 8002ae2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002ae4:	69fb      	ldr	r3, [r7, #28]
 8002ae6:	f1c3 0307 	rsb	r3, r3, #7
 8002aea:	2b04      	cmp	r3, #4
 8002aec:	bf28      	it	cs
 8002aee:	2304      	movcs	r3, #4
 8002af0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002af2:	69fb      	ldr	r3, [r7, #28]
 8002af4:	3304      	adds	r3, #4
 8002af6:	2b06      	cmp	r3, #6
 8002af8:	d902      	bls.n	8002b00 <NVIC_EncodePriority+0x30>
 8002afa:	69fb      	ldr	r3, [r7, #28]
 8002afc:	3b03      	subs	r3, #3
 8002afe:	e000      	b.n	8002b02 <NVIC_EncodePriority+0x32>
 8002b00:	2300      	movs	r3, #0
 8002b02:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b04:	f04f 32ff 	mov.w	r2, #4294967295
 8002b08:	69bb      	ldr	r3, [r7, #24]
 8002b0a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b0e:	43da      	mvns	r2, r3
 8002b10:	68bb      	ldr	r3, [r7, #8]
 8002b12:	401a      	ands	r2, r3
 8002b14:	697b      	ldr	r3, [r7, #20]
 8002b16:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002b18:	f04f 31ff 	mov.w	r1, #4294967295
 8002b1c:	697b      	ldr	r3, [r7, #20]
 8002b1e:	fa01 f303 	lsl.w	r3, r1, r3
 8002b22:	43d9      	mvns	r1, r3
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b28:	4313      	orrs	r3, r2
         );
}
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	3724      	adds	r7, #36	; 0x24
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	bc80      	pop	{r7}
 8002b32:	4770      	bx	lr

08002b34 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	b082      	sub	sp, #8
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	3b01      	subs	r3, #1
 8002b40:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002b44:	d301      	bcc.n	8002b4a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002b46:	2301      	movs	r3, #1
 8002b48:	e00f      	b.n	8002b6a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002b4a:	4a0a      	ldr	r2, [pc, #40]	; (8002b74 <SysTick_Config+0x40>)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	3b01      	subs	r3, #1
 8002b50:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002b52:	210f      	movs	r1, #15
 8002b54:	f04f 30ff 	mov.w	r0, #4294967295
 8002b58:	f7ff ff90 	bl	8002a7c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002b5c:	4b05      	ldr	r3, [pc, #20]	; (8002b74 <SysTick_Config+0x40>)
 8002b5e:	2200      	movs	r2, #0
 8002b60:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002b62:	4b04      	ldr	r3, [pc, #16]	; (8002b74 <SysTick_Config+0x40>)
 8002b64:	2207      	movs	r2, #7
 8002b66:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002b68:	2300      	movs	r3, #0
}
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	3708      	adds	r7, #8
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	bd80      	pop	{r7, pc}
 8002b72:	bf00      	nop
 8002b74:	e000e010 	.word	0xe000e010

08002b78 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	b082      	sub	sp, #8
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002b80:	6878      	ldr	r0, [r7, #4]
 8002b82:	f7ff ff2d 	bl	80029e0 <__NVIC_SetPriorityGrouping>
}
 8002b86:	bf00      	nop
 8002b88:	3708      	adds	r7, #8
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	bd80      	pop	{r7, pc}

08002b8e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002b8e:	b580      	push	{r7, lr}
 8002b90:	b086      	sub	sp, #24
 8002b92:	af00      	add	r7, sp, #0
 8002b94:	4603      	mov	r3, r0
 8002b96:	60b9      	str	r1, [r7, #8]
 8002b98:	607a      	str	r2, [r7, #4]
 8002b9a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002b9c:	2300      	movs	r3, #0
 8002b9e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002ba0:	f7ff ff42 	bl	8002a28 <__NVIC_GetPriorityGrouping>
 8002ba4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002ba6:	687a      	ldr	r2, [r7, #4]
 8002ba8:	68b9      	ldr	r1, [r7, #8]
 8002baa:	6978      	ldr	r0, [r7, #20]
 8002bac:	f7ff ff90 	bl	8002ad0 <NVIC_EncodePriority>
 8002bb0:	4602      	mov	r2, r0
 8002bb2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002bb6:	4611      	mov	r1, r2
 8002bb8:	4618      	mov	r0, r3
 8002bba:	f7ff ff5f 	bl	8002a7c <__NVIC_SetPriority>
}
 8002bbe:	bf00      	nop
 8002bc0:	3718      	adds	r7, #24
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	bd80      	pop	{r7, pc}

08002bc6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f2xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002bc6:	b580      	push	{r7, lr}
 8002bc8:	b082      	sub	sp, #8
 8002bca:	af00      	add	r7, sp, #0
 8002bcc:	4603      	mov	r3, r0
 8002bce:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002bd0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bd4:	4618      	mov	r0, r3
 8002bd6:	f7ff ff35 	bl	8002a44 <__NVIC_EnableIRQ>
}
 8002bda:	bf00      	nop
 8002bdc:	3708      	adds	r7, #8
 8002bde:	46bd      	mov	sp, r7
 8002be0:	bd80      	pop	{r7, pc}

08002be2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002be2:	b580      	push	{r7, lr}
 8002be4:	b082      	sub	sp, #8
 8002be6:	af00      	add	r7, sp, #0
 8002be8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002bea:	6878      	ldr	r0, [r7, #4]
 8002bec:	f7ff ffa2 	bl	8002b34 <SysTick_Config>
 8002bf0:	4603      	mov	r3, r0
}
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	3708      	adds	r7, #8
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	bd80      	pop	{r7, pc}
	...

08002bfc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002bfc:	b480      	push	{r7}
 8002bfe:	b087      	sub	sp, #28
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	6078      	str	r0, [r7, #4]
 8002c04:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002c06:	2300      	movs	r3, #0
 8002c08:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002c0a:	e16f      	b.n	8002eec <HAL_GPIO_Init+0x2f0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002c0c:	683b      	ldr	r3, [r7, #0]
 8002c0e:	681a      	ldr	r2, [r3, #0]
 8002c10:	2101      	movs	r1, #1
 8002c12:	697b      	ldr	r3, [r7, #20]
 8002c14:	fa01 f303 	lsl.w	r3, r1, r3
 8002c18:	4013      	ands	r3, r2
 8002c1a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	f000 8161 	beq.w	8002ee6 <HAL_GPIO_Init+0x2ea>
    {
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002c24:	683b      	ldr	r3, [r7, #0]
 8002c26:	685b      	ldr	r3, [r3, #4]
 8002c28:	f003 0303 	and.w	r3, r3, #3
 8002c2c:	2b01      	cmp	r3, #1
 8002c2e:	d005      	beq.n	8002c3c <HAL_GPIO_Init+0x40>
 8002c30:	683b      	ldr	r3, [r7, #0]
 8002c32:	685b      	ldr	r3, [r3, #4]
 8002c34:	f003 0303 	and.w	r3, r3, #3
 8002c38:	2b02      	cmp	r3, #2
 8002c3a:	d130      	bne.n	8002c9e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	689b      	ldr	r3, [r3, #8]
 8002c40:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002c42:	697b      	ldr	r3, [r7, #20]
 8002c44:	005b      	lsls	r3, r3, #1
 8002c46:	2203      	movs	r2, #3
 8002c48:	fa02 f303 	lsl.w	r3, r2, r3
 8002c4c:	43db      	mvns	r3, r3
 8002c4e:	693a      	ldr	r2, [r7, #16]
 8002c50:	4013      	ands	r3, r2
 8002c52:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002c54:	683b      	ldr	r3, [r7, #0]
 8002c56:	68da      	ldr	r2, [r3, #12]
 8002c58:	697b      	ldr	r3, [r7, #20]
 8002c5a:	005b      	lsls	r3, r3, #1
 8002c5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c60:	693a      	ldr	r2, [r7, #16]
 8002c62:	4313      	orrs	r3, r2
 8002c64:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	693a      	ldr	r2, [r7, #16]
 8002c6a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	685b      	ldr	r3, [r3, #4]
 8002c70:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002c72:	2201      	movs	r2, #1
 8002c74:	697b      	ldr	r3, [r7, #20]
 8002c76:	fa02 f303 	lsl.w	r3, r2, r3
 8002c7a:	43db      	mvns	r3, r3
 8002c7c:	693a      	ldr	r2, [r7, #16]
 8002c7e:	4013      	ands	r3, r2
 8002c80:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002c82:	683b      	ldr	r3, [r7, #0]
 8002c84:	685b      	ldr	r3, [r3, #4]
 8002c86:	091b      	lsrs	r3, r3, #4
 8002c88:	f003 0201 	and.w	r2, r3, #1
 8002c8c:	697b      	ldr	r3, [r7, #20]
 8002c8e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c92:	693a      	ldr	r2, [r7, #16]
 8002c94:	4313      	orrs	r3, r2
 8002c96:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	693a      	ldr	r2, [r7, #16]
 8002c9c:	605a      	str	r2, [r3, #4]
      }
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002c9e:	683b      	ldr	r3, [r7, #0]
 8002ca0:	685b      	ldr	r3, [r3, #4]
 8002ca2:	f003 0303 	and.w	r3, r3, #3
 8002ca6:	2b03      	cmp	r3, #3
 8002ca8:	d017      	beq.n	8002cda <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	68db      	ldr	r3, [r3, #12]
 8002cae:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002cb0:	697b      	ldr	r3, [r7, #20]
 8002cb2:	005b      	lsls	r3, r3, #1
 8002cb4:	2203      	movs	r2, #3
 8002cb6:	fa02 f303 	lsl.w	r3, r2, r3
 8002cba:	43db      	mvns	r3, r3
 8002cbc:	693a      	ldr	r2, [r7, #16]
 8002cbe:	4013      	ands	r3, r2
 8002cc0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002cc2:	683b      	ldr	r3, [r7, #0]
 8002cc4:	689a      	ldr	r2, [r3, #8]
 8002cc6:	697b      	ldr	r3, [r7, #20]
 8002cc8:	005b      	lsls	r3, r3, #1
 8002cca:	fa02 f303 	lsl.w	r3, r2, r3
 8002cce:	693a      	ldr	r2, [r7, #16]
 8002cd0:	4313      	orrs	r3, r2
 8002cd2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	693a      	ldr	r2, [r7, #16]
 8002cd8:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002cda:	683b      	ldr	r3, [r7, #0]
 8002cdc:	685b      	ldr	r3, [r3, #4]
 8002cde:	f003 0303 	and.w	r3, r3, #3
 8002ce2:	2b02      	cmp	r3, #2
 8002ce4:	d123      	bne.n	8002d2e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002ce6:	697b      	ldr	r3, [r7, #20]
 8002ce8:	08da      	lsrs	r2, r3, #3
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	3208      	adds	r2, #8
 8002cee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002cf2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002cf4:	697b      	ldr	r3, [r7, #20]
 8002cf6:	f003 0307 	and.w	r3, r3, #7
 8002cfa:	009b      	lsls	r3, r3, #2
 8002cfc:	220f      	movs	r2, #15
 8002cfe:	fa02 f303 	lsl.w	r3, r2, r3
 8002d02:	43db      	mvns	r3, r3
 8002d04:	693a      	ldr	r2, [r7, #16]
 8002d06:	4013      	ands	r3, r2
 8002d08:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002d0a:	683b      	ldr	r3, [r7, #0]
 8002d0c:	691a      	ldr	r2, [r3, #16]
 8002d0e:	697b      	ldr	r3, [r7, #20]
 8002d10:	f003 0307 	and.w	r3, r3, #7
 8002d14:	009b      	lsls	r3, r3, #2
 8002d16:	fa02 f303 	lsl.w	r3, r2, r3
 8002d1a:	693a      	ldr	r2, [r7, #16]
 8002d1c:	4313      	orrs	r3, r2
 8002d1e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002d20:	697b      	ldr	r3, [r7, #20]
 8002d22:	08da      	lsrs	r2, r3, #3
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	3208      	adds	r2, #8
 8002d28:	6939      	ldr	r1, [r7, #16]
 8002d2a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002d34:	697b      	ldr	r3, [r7, #20]
 8002d36:	005b      	lsls	r3, r3, #1
 8002d38:	2203      	movs	r2, #3
 8002d3a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d3e:	43db      	mvns	r3, r3
 8002d40:	693a      	ldr	r2, [r7, #16]
 8002d42:	4013      	ands	r3, r2
 8002d44:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002d46:	683b      	ldr	r3, [r7, #0]
 8002d48:	685b      	ldr	r3, [r3, #4]
 8002d4a:	f003 0203 	and.w	r2, r3, #3
 8002d4e:	697b      	ldr	r3, [r7, #20]
 8002d50:	005b      	lsls	r3, r3, #1
 8002d52:	fa02 f303 	lsl.w	r3, r2, r3
 8002d56:	693a      	ldr	r2, [r7, #16]
 8002d58:	4313      	orrs	r3, r2
 8002d5a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	693a      	ldr	r2, [r7, #16]
 8002d60:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002d62:	683b      	ldr	r3, [r7, #0]
 8002d64:	685b      	ldr	r3, [r3, #4]
 8002d66:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	f000 80bb 	beq.w	8002ee6 <HAL_GPIO_Init+0x2ea>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d70:	2300      	movs	r3, #0
 8002d72:	60bb      	str	r3, [r7, #8]
 8002d74:	4b64      	ldr	r3, [pc, #400]	; (8002f08 <HAL_GPIO_Init+0x30c>)
 8002d76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d78:	4a63      	ldr	r2, [pc, #396]	; (8002f08 <HAL_GPIO_Init+0x30c>)
 8002d7a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002d7e:	6453      	str	r3, [r2, #68]	; 0x44
 8002d80:	4b61      	ldr	r3, [pc, #388]	; (8002f08 <HAL_GPIO_Init+0x30c>)
 8002d82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d84:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d88:	60bb      	str	r3, [r7, #8]
 8002d8a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002d8c:	4a5f      	ldr	r2, [pc, #380]	; (8002f0c <HAL_GPIO_Init+0x310>)
 8002d8e:	697b      	ldr	r3, [r7, #20]
 8002d90:	089b      	lsrs	r3, r3, #2
 8002d92:	3302      	adds	r3, #2
 8002d94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d98:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002d9a:	697b      	ldr	r3, [r7, #20]
 8002d9c:	f003 0303 	and.w	r3, r3, #3
 8002da0:	009b      	lsls	r3, r3, #2
 8002da2:	220f      	movs	r2, #15
 8002da4:	fa02 f303 	lsl.w	r3, r2, r3
 8002da8:	43db      	mvns	r3, r3
 8002daa:	693a      	ldr	r2, [r7, #16]
 8002dac:	4013      	ands	r3, r2
 8002dae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	4a57      	ldr	r2, [pc, #348]	; (8002f10 <HAL_GPIO_Init+0x314>)
 8002db4:	4293      	cmp	r3, r2
 8002db6:	d031      	beq.n	8002e1c <HAL_GPIO_Init+0x220>
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	4a56      	ldr	r2, [pc, #344]	; (8002f14 <HAL_GPIO_Init+0x318>)
 8002dbc:	4293      	cmp	r3, r2
 8002dbe:	d02b      	beq.n	8002e18 <HAL_GPIO_Init+0x21c>
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	4a55      	ldr	r2, [pc, #340]	; (8002f18 <HAL_GPIO_Init+0x31c>)
 8002dc4:	4293      	cmp	r3, r2
 8002dc6:	d025      	beq.n	8002e14 <HAL_GPIO_Init+0x218>
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	4a54      	ldr	r2, [pc, #336]	; (8002f1c <HAL_GPIO_Init+0x320>)
 8002dcc:	4293      	cmp	r3, r2
 8002dce:	d01f      	beq.n	8002e10 <HAL_GPIO_Init+0x214>
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	4a53      	ldr	r2, [pc, #332]	; (8002f20 <HAL_GPIO_Init+0x324>)
 8002dd4:	4293      	cmp	r3, r2
 8002dd6:	d019      	beq.n	8002e0c <HAL_GPIO_Init+0x210>
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	4a52      	ldr	r2, [pc, #328]	; (8002f24 <HAL_GPIO_Init+0x328>)
 8002ddc:	4293      	cmp	r3, r2
 8002dde:	d013      	beq.n	8002e08 <HAL_GPIO_Init+0x20c>
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	4a51      	ldr	r2, [pc, #324]	; (8002f28 <HAL_GPIO_Init+0x32c>)
 8002de4:	4293      	cmp	r3, r2
 8002de6:	d00d      	beq.n	8002e04 <HAL_GPIO_Init+0x208>
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	4a50      	ldr	r2, [pc, #320]	; (8002f2c <HAL_GPIO_Init+0x330>)
 8002dec:	4293      	cmp	r3, r2
 8002dee:	d007      	beq.n	8002e00 <HAL_GPIO_Init+0x204>
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	4a4f      	ldr	r2, [pc, #316]	; (8002f30 <HAL_GPIO_Init+0x334>)
 8002df4:	4293      	cmp	r3, r2
 8002df6:	d101      	bne.n	8002dfc <HAL_GPIO_Init+0x200>
 8002df8:	2308      	movs	r3, #8
 8002dfa:	e010      	b.n	8002e1e <HAL_GPIO_Init+0x222>
 8002dfc:	2309      	movs	r3, #9
 8002dfe:	e00e      	b.n	8002e1e <HAL_GPIO_Init+0x222>
 8002e00:	2307      	movs	r3, #7
 8002e02:	e00c      	b.n	8002e1e <HAL_GPIO_Init+0x222>
 8002e04:	2306      	movs	r3, #6
 8002e06:	e00a      	b.n	8002e1e <HAL_GPIO_Init+0x222>
 8002e08:	2305      	movs	r3, #5
 8002e0a:	e008      	b.n	8002e1e <HAL_GPIO_Init+0x222>
 8002e0c:	2304      	movs	r3, #4
 8002e0e:	e006      	b.n	8002e1e <HAL_GPIO_Init+0x222>
 8002e10:	2303      	movs	r3, #3
 8002e12:	e004      	b.n	8002e1e <HAL_GPIO_Init+0x222>
 8002e14:	2302      	movs	r3, #2
 8002e16:	e002      	b.n	8002e1e <HAL_GPIO_Init+0x222>
 8002e18:	2301      	movs	r3, #1
 8002e1a:	e000      	b.n	8002e1e <HAL_GPIO_Init+0x222>
 8002e1c:	2300      	movs	r3, #0
 8002e1e:	697a      	ldr	r2, [r7, #20]
 8002e20:	f002 0203 	and.w	r2, r2, #3
 8002e24:	0092      	lsls	r2, r2, #2
 8002e26:	4093      	lsls	r3, r2
 8002e28:	461a      	mov	r2, r3
 8002e2a:	693b      	ldr	r3, [r7, #16]
 8002e2c:	4313      	orrs	r3, r2
 8002e2e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002e30:	4936      	ldr	r1, [pc, #216]	; (8002f0c <HAL_GPIO_Init+0x310>)
 8002e32:	697b      	ldr	r3, [r7, #20]
 8002e34:	089b      	lsrs	r3, r3, #2
 8002e36:	3302      	adds	r3, #2
 8002e38:	693a      	ldr	r2, [r7, #16]
 8002e3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002e3e:	4b3d      	ldr	r3, [pc, #244]	; (8002f34 <HAL_GPIO_Init+0x338>)
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	43db      	mvns	r3, r3
 8002e48:	693a      	ldr	r2, [r7, #16]
 8002e4a:	4013      	ands	r3, r2
 8002e4c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002e4e:	683b      	ldr	r3, [r7, #0]
 8002e50:	685b      	ldr	r3, [r3, #4]
 8002e52:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d003      	beq.n	8002e62 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8002e5a:	693a      	ldr	r2, [r7, #16]
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	4313      	orrs	r3, r2
 8002e60:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002e62:	4a34      	ldr	r2, [pc, #208]	; (8002f34 <HAL_GPIO_Init+0x338>)
 8002e64:	693b      	ldr	r3, [r7, #16]
 8002e66:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002e68:	4b32      	ldr	r3, [pc, #200]	; (8002f34 <HAL_GPIO_Init+0x338>)
 8002e6a:	685b      	ldr	r3, [r3, #4]
 8002e6c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	43db      	mvns	r3, r3
 8002e72:	693a      	ldr	r2, [r7, #16]
 8002e74:	4013      	ands	r3, r2
 8002e76:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002e78:	683b      	ldr	r3, [r7, #0]
 8002e7a:	685b      	ldr	r3, [r3, #4]
 8002e7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d003      	beq.n	8002e8c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8002e84:	693a      	ldr	r2, [r7, #16]
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	4313      	orrs	r3, r2
 8002e8a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002e8c:	4a29      	ldr	r2, [pc, #164]	; (8002f34 <HAL_GPIO_Init+0x338>)
 8002e8e:	693b      	ldr	r3, [r7, #16]
 8002e90:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002e92:	4b28      	ldr	r3, [pc, #160]	; (8002f34 <HAL_GPIO_Init+0x338>)
 8002e94:	689b      	ldr	r3, [r3, #8]
 8002e96:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	43db      	mvns	r3, r3
 8002e9c:	693a      	ldr	r2, [r7, #16]
 8002e9e:	4013      	ands	r3, r2
 8002ea0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002ea2:	683b      	ldr	r3, [r7, #0]
 8002ea4:	685b      	ldr	r3, [r3, #4]
 8002ea6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d003      	beq.n	8002eb6 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8002eae:	693a      	ldr	r2, [r7, #16]
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	4313      	orrs	r3, r2
 8002eb4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002eb6:	4a1f      	ldr	r2, [pc, #124]	; (8002f34 <HAL_GPIO_Init+0x338>)
 8002eb8:	693b      	ldr	r3, [r7, #16]
 8002eba:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002ebc:	4b1d      	ldr	r3, [pc, #116]	; (8002f34 <HAL_GPIO_Init+0x338>)
 8002ebe:	68db      	ldr	r3, [r3, #12]
 8002ec0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	43db      	mvns	r3, r3
 8002ec6:	693a      	ldr	r2, [r7, #16]
 8002ec8:	4013      	ands	r3, r2
 8002eca:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002ecc:	683b      	ldr	r3, [r7, #0]
 8002ece:	685b      	ldr	r3, [r3, #4]
 8002ed0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d003      	beq.n	8002ee0 <HAL_GPIO_Init+0x2e4>
        {
          temp |= iocurrent;
 8002ed8:	693a      	ldr	r2, [r7, #16]
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	4313      	orrs	r3, r2
 8002ede:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002ee0:	4a14      	ldr	r2, [pc, #80]	; (8002f34 <HAL_GPIO_Init+0x338>)
 8002ee2:	693b      	ldr	r3, [r7, #16]
 8002ee4:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002ee6:	697b      	ldr	r3, [r7, #20]
 8002ee8:	3301      	adds	r3, #1
 8002eea:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002eec:	683b      	ldr	r3, [r7, #0]
 8002eee:	681a      	ldr	r2, [r3, #0]
 8002ef0:	697b      	ldr	r3, [r7, #20]
 8002ef2:	fa22 f303 	lsr.w	r3, r2, r3
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	f47f ae88 	bne.w	8002c0c <HAL_GPIO_Init+0x10>
  }
}
 8002efc:	bf00      	nop
 8002efe:	bf00      	nop
 8002f00:	371c      	adds	r7, #28
 8002f02:	46bd      	mov	sp, r7
 8002f04:	bc80      	pop	{r7}
 8002f06:	4770      	bx	lr
 8002f08:	40023800 	.word	0x40023800
 8002f0c:	40013800 	.word	0x40013800
 8002f10:	40020000 	.word	0x40020000
 8002f14:	40020400 	.word	0x40020400
 8002f18:	40020800 	.word	0x40020800
 8002f1c:	40020c00 	.word	0x40020c00
 8002f20:	40021000 	.word	0x40021000
 8002f24:	40021400 	.word	0x40021400
 8002f28:	40021800 	.word	0x40021800
 8002f2c:	40021c00 	.word	0x40021c00
 8002f30:	40022000 	.word	0x40022000
 8002f34:	40013c00 	.word	0x40013c00

08002f38 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002f38:	b480      	push	{r7}
 8002f3a:	b083      	sub	sp, #12
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
 8002f40:	460b      	mov	r3, r1
 8002f42:	807b      	strh	r3, [r7, #2]
 8002f44:	4613      	mov	r3, r2
 8002f46:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002f48:	787b      	ldrb	r3, [r7, #1]
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d003      	beq.n	8002f56 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002f4e:	887a      	ldrh	r2, [r7, #2]
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002f54:	e003      	b.n	8002f5e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002f56:	887b      	ldrh	r3, [r7, #2]
 8002f58:	041a      	lsls	r2, r3, #16
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	619a      	str	r2, [r3, #24]
}
 8002f5e:	bf00      	nop
 8002f60:	370c      	adds	r7, #12
 8002f62:	46bd      	mov	sp, r7
 8002f64:	bc80      	pop	{r7}
 8002f66:	4770      	bx	lr

08002f68 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..I) to select the GPIO peripheral. 
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002f68:	b480      	push	{r7}
 8002f6a:	b085      	sub	sp, #20
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
 8002f70:	460b      	mov	r3, r1
 8002f72:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	695b      	ldr	r3, [r3, #20]
 8002f78:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002f7a:	887a      	ldrh	r2, [r7, #2]
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	4013      	ands	r3, r2
 8002f80:	041a      	lsls	r2, r3, #16
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	43d9      	mvns	r1, r3
 8002f86:	887b      	ldrh	r3, [r7, #2]
 8002f88:	400b      	ands	r3, r1
 8002f8a:	431a      	orrs	r2, r3
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	619a      	str	r2, [r3, #24]
}
 8002f90:	bf00      	nop
 8002f92:	3714      	adds	r7, #20
 8002f94:	46bd      	mov	sp, r7
 8002f96:	bc80      	pop	{r7}
 8002f98:	4770      	bx	lr
	...

08002f9c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002f9c:	b580      	push	{r7, lr}
 8002f9e:	b082      	sub	sp, #8
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	4603      	mov	r3, r0
 8002fa4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002fa6:	4b08      	ldr	r3, [pc, #32]	; (8002fc8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002fa8:	695a      	ldr	r2, [r3, #20]
 8002faa:	88fb      	ldrh	r3, [r7, #6]
 8002fac:	4013      	ands	r3, r2
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d006      	beq.n	8002fc0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002fb2:	4a05      	ldr	r2, [pc, #20]	; (8002fc8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002fb4:	88fb      	ldrh	r3, [r7, #6]
 8002fb6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002fb8:	88fb      	ldrh	r3, [r7, #6]
 8002fba:	4618      	mov	r0, r3
 8002fbc:	f7fe fd1a 	bl	80019f4 <HAL_GPIO_EXTI_Callback>
  }
}
 8002fc0:	bf00      	nop
 8002fc2:	3708      	adds	r7, #8
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	bd80      	pop	{r7, pc}
 8002fc8:	40013c00 	.word	0x40013c00

08002fcc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002fcc:	b580      	push	{r7, lr}
 8002fce:	b084      	sub	sp, #16
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d101      	bne.n	8002fde <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002fda:	2301      	movs	r3, #1
 8002fdc:	e12b      	b.n	8003236 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002fe4:	b2db      	uxtb	r3, r3
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d106      	bne.n	8002ff8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	2200      	movs	r2, #0
 8002fee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002ff2:	6878      	ldr	r0, [r7, #4]
 8002ff4:	f7fe fff0 	bl	8001fd8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	2224      	movs	r2, #36	; 0x24
 8002ffc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	681a      	ldr	r2, [r3, #0]
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f022 0201 	bic.w	r2, r2, #1
 800300e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	681a      	ldr	r2, [r3, #0]
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800301e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	681a      	ldr	r2, [r3, #0]
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800302e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003030:	f002 f99e 	bl	8005370 <HAL_RCC_GetPCLK1Freq>
 8003034:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	685b      	ldr	r3, [r3, #4]
 800303a:	4a81      	ldr	r2, [pc, #516]	; (8003240 <HAL_I2C_Init+0x274>)
 800303c:	4293      	cmp	r3, r2
 800303e:	d807      	bhi.n	8003050 <HAL_I2C_Init+0x84>
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	4a80      	ldr	r2, [pc, #512]	; (8003244 <HAL_I2C_Init+0x278>)
 8003044:	4293      	cmp	r3, r2
 8003046:	bf94      	ite	ls
 8003048:	2301      	movls	r3, #1
 800304a:	2300      	movhi	r3, #0
 800304c:	b2db      	uxtb	r3, r3
 800304e:	e006      	b.n	800305e <HAL_I2C_Init+0x92>
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	4a7d      	ldr	r2, [pc, #500]	; (8003248 <HAL_I2C_Init+0x27c>)
 8003054:	4293      	cmp	r3, r2
 8003056:	bf94      	ite	ls
 8003058:	2301      	movls	r3, #1
 800305a:	2300      	movhi	r3, #0
 800305c:	b2db      	uxtb	r3, r3
 800305e:	2b00      	cmp	r3, #0
 8003060:	d001      	beq.n	8003066 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003062:	2301      	movs	r3, #1
 8003064:	e0e7      	b.n	8003236 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	4a78      	ldr	r2, [pc, #480]	; (800324c <HAL_I2C_Init+0x280>)
 800306a:	fba2 2303 	umull	r2, r3, r2, r3
 800306e:	0c9b      	lsrs	r3, r3, #18
 8003070:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	685b      	ldr	r3, [r3, #4]
 8003078:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	68ba      	ldr	r2, [r7, #8]
 8003082:	430a      	orrs	r2, r1
 8003084:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	6a1b      	ldr	r3, [r3, #32]
 800308c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	685b      	ldr	r3, [r3, #4]
 8003094:	4a6a      	ldr	r2, [pc, #424]	; (8003240 <HAL_I2C_Init+0x274>)
 8003096:	4293      	cmp	r3, r2
 8003098:	d802      	bhi.n	80030a0 <HAL_I2C_Init+0xd4>
 800309a:	68bb      	ldr	r3, [r7, #8]
 800309c:	3301      	adds	r3, #1
 800309e:	e009      	b.n	80030b4 <HAL_I2C_Init+0xe8>
 80030a0:	68bb      	ldr	r3, [r7, #8]
 80030a2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80030a6:	fb02 f303 	mul.w	r3, r2, r3
 80030aa:	4a69      	ldr	r2, [pc, #420]	; (8003250 <HAL_I2C_Init+0x284>)
 80030ac:	fba2 2303 	umull	r2, r3, r2, r3
 80030b0:	099b      	lsrs	r3, r3, #6
 80030b2:	3301      	adds	r3, #1
 80030b4:	687a      	ldr	r2, [r7, #4]
 80030b6:	6812      	ldr	r2, [r2, #0]
 80030b8:	430b      	orrs	r3, r1
 80030ba:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	69db      	ldr	r3, [r3, #28]
 80030c2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80030c6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	685b      	ldr	r3, [r3, #4]
 80030ce:	495c      	ldr	r1, [pc, #368]	; (8003240 <HAL_I2C_Init+0x274>)
 80030d0:	428b      	cmp	r3, r1
 80030d2:	d819      	bhi.n	8003108 <HAL_I2C_Init+0x13c>
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	1e59      	subs	r1, r3, #1
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	685b      	ldr	r3, [r3, #4]
 80030dc:	005b      	lsls	r3, r3, #1
 80030de:	fbb1 f3f3 	udiv	r3, r1, r3
 80030e2:	1c59      	adds	r1, r3, #1
 80030e4:	f640 73fc 	movw	r3, #4092	; 0xffc
 80030e8:	400b      	ands	r3, r1
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d00a      	beq.n	8003104 <HAL_I2C_Init+0x138>
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	1e59      	subs	r1, r3, #1
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	685b      	ldr	r3, [r3, #4]
 80030f6:	005b      	lsls	r3, r3, #1
 80030f8:	fbb1 f3f3 	udiv	r3, r1, r3
 80030fc:	3301      	adds	r3, #1
 80030fe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003102:	e051      	b.n	80031a8 <HAL_I2C_Init+0x1dc>
 8003104:	2304      	movs	r3, #4
 8003106:	e04f      	b.n	80031a8 <HAL_I2C_Init+0x1dc>
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	689b      	ldr	r3, [r3, #8]
 800310c:	2b00      	cmp	r3, #0
 800310e:	d111      	bne.n	8003134 <HAL_I2C_Init+0x168>
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	1e58      	subs	r0, r3, #1
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	6859      	ldr	r1, [r3, #4]
 8003118:	460b      	mov	r3, r1
 800311a:	005b      	lsls	r3, r3, #1
 800311c:	440b      	add	r3, r1
 800311e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003122:	3301      	adds	r3, #1
 8003124:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003128:	2b00      	cmp	r3, #0
 800312a:	bf0c      	ite	eq
 800312c:	2301      	moveq	r3, #1
 800312e:	2300      	movne	r3, #0
 8003130:	b2db      	uxtb	r3, r3
 8003132:	e012      	b.n	800315a <HAL_I2C_Init+0x18e>
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	1e58      	subs	r0, r3, #1
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	6859      	ldr	r1, [r3, #4]
 800313c:	460b      	mov	r3, r1
 800313e:	009b      	lsls	r3, r3, #2
 8003140:	440b      	add	r3, r1
 8003142:	0099      	lsls	r1, r3, #2
 8003144:	440b      	add	r3, r1
 8003146:	fbb0 f3f3 	udiv	r3, r0, r3
 800314a:	3301      	adds	r3, #1
 800314c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003150:	2b00      	cmp	r3, #0
 8003152:	bf0c      	ite	eq
 8003154:	2301      	moveq	r3, #1
 8003156:	2300      	movne	r3, #0
 8003158:	b2db      	uxtb	r3, r3
 800315a:	2b00      	cmp	r3, #0
 800315c:	d001      	beq.n	8003162 <HAL_I2C_Init+0x196>
 800315e:	2301      	movs	r3, #1
 8003160:	e022      	b.n	80031a8 <HAL_I2C_Init+0x1dc>
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	689b      	ldr	r3, [r3, #8]
 8003166:	2b00      	cmp	r3, #0
 8003168:	d10e      	bne.n	8003188 <HAL_I2C_Init+0x1bc>
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	1e58      	subs	r0, r3, #1
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	6859      	ldr	r1, [r3, #4]
 8003172:	460b      	mov	r3, r1
 8003174:	005b      	lsls	r3, r3, #1
 8003176:	440b      	add	r3, r1
 8003178:	fbb0 f3f3 	udiv	r3, r0, r3
 800317c:	3301      	adds	r3, #1
 800317e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003182:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003186:	e00f      	b.n	80031a8 <HAL_I2C_Init+0x1dc>
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	1e58      	subs	r0, r3, #1
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	6859      	ldr	r1, [r3, #4]
 8003190:	460b      	mov	r3, r1
 8003192:	009b      	lsls	r3, r3, #2
 8003194:	440b      	add	r3, r1
 8003196:	0099      	lsls	r1, r3, #2
 8003198:	440b      	add	r3, r1
 800319a:	fbb0 f3f3 	udiv	r3, r0, r3
 800319e:	3301      	adds	r3, #1
 80031a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80031a4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80031a8:	6879      	ldr	r1, [r7, #4]
 80031aa:	6809      	ldr	r1, [r1, #0]
 80031ac:	4313      	orrs	r3, r2
 80031ae:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	69da      	ldr	r2, [r3, #28]
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	6a1b      	ldr	r3, [r3, #32]
 80031c2:	431a      	orrs	r2, r3
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	430a      	orrs	r2, r1
 80031ca:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	689b      	ldr	r3, [r3, #8]
 80031d2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80031d6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80031da:	687a      	ldr	r2, [r7, #4]
 80031dc:	6911      	ldr	r1, [r2, #16]
 80031de:	687a      	ldr	r2, [r7, #4]
 80031e0:	68d2      	ldr	r2, [r2, #12]
 80031e2:	4311      	orrs	r1, r2
 80031e4:	687a      	ldr	r2, [r7, #4]
 80031e6:	6812      	ldr	r2, [r2, #0]
 80031e8:	430b      	orrs	r3, r1
 80031ea:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	68db      	ldr	r3, [r3, #12]
 80031f2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	695a      	ldr	r2, [r3, #20]
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	699b      	ldr	r3, [r3, #24]
 80031fe:	431a      	orrs	r2, r3
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	430a      	orrs	r2, r1
 8003206:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	681a      	ldr	r2, [r3, #0]
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f042 0201 	orr.w	r2, r2, #1
 8003216:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	2200      	movs	r2, #0
 800321c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	2220      	movs	r2, #32
 8003222:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	2200      	movs	r2, #0
 800322a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	2200      	movs	r2, #0
 8003230:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003234:	2300      	movs	r3, #0
}
 8003236:	4618      	mov	r0, r3
 8003238:	3710      	adds	r7, #16
 800323a:	46bd      	mov	sp, r7
 800323c:	bd80      	pop	{r7, pc}
 800323e:	bf00      	nop
 8003240:	000186a0 	.word	0x000186a0
 8003244:	001e847f 	.word	0x001e847f
 8003248:	003d08ff 	.word	0x003d08ff
 800324c:	431bde83 	.word	0x431bde83
 8003250:	10624dd3 	.word	0x10624dd3

08003254 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003254:	b580      	push	{r7, lr}
 8003256:	b088      	sub	sp, #32
 8003258:	af02      	add	r7, sp, #8
 800325a:	60f8      	str	r0, [r7, #12]
 800325c:	607a      	str	r2, [r7, #4]
 800325e:	461a      	mov	r2, r3
 8003260:	460b      	mov	r3, r1
 8003262:	817b      	strh	r3, [r7, #10]
 8003264:	4613      	mov	r3, r2
 8003266:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003268:	f7ff f872 	bl	8002350 <HAL_GetTick>
 800326c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003274:	b2db      	uxtb	r3, r3
 8003276:	2b20      	cmp	r3, #32
 8003278:	f040 80e0 	bne.w	800343c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800327c:	697b      	ldr	r3, [r7, #20]
 800327e:	9300      	str	r3, [sp, #0]
 8003280:	2319      	movs	r3, #25
 8003282:	2201      	movs	r2, #1
 8003284:	4970      	ldr	r1, [pc, #448]	; (8003448 <HAL_I2C_Master_Transmit+0x1f4>)
 8003286:	68f8      	ldr	r0, [r7, #12]
 8003288:	f000 f964 	bl	8003554 <I2C_WaitOnFlagUntilTimeout>
 800328c:	4603      	mov	r3, r0
 800328e:	2b00      	cmp	r3, #0
 8003290:	d001      	beq.n	8003296 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003292:	2302      	movs	r3, #2
 8003294:	e0d3      	b.n	800343e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800329c:	2b01      	cmp	r3, #1
 800329e:	d101      	bne.n	80032a4 <HAL_I2C_Master_Transmit+0x50>
 80032a0:	2302      	movs	r3, #2
 80032a2:	e0cc      	b.n	800343e <HAL_I2C_Master_Transmit+0x1ea>
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	2201      	movs	r2, #1
 80032a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f003 0301 	and.w	r3, r3, #1
 80032b6:	2b01      	cmp	r3, #1
 80032b8:	d007      	beq.n	80032ca <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	681a      	ldr	r2, [r3, #0]
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f042 0201 	orr.w	r2, r2, #1
 80032c8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	681a      	ldr	r2, [r3, #0]
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80032d8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	2221      	movs	r2, #33	; 0x21
 80032de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	2210      	movs	r2, #16
 80032e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	2200      	movs	r2, #0
 80032ee:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	687a      	ldr	r2, [r7, #4]
 80032f4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	893a      	ldrh	r2, [r7, #8]
 80032fa:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003300:	b29a      	uxth	r2, r3
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	4a50      	ldr	r2, [pc, #320]	; (800344c <HAL_I2C_Master_Transmit+0x1f8>)
 800330a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800330c:	8979      	ldrh	r1, [r7, #10]
 800330e:	697b      	ldr	r3, [r7, #20]
 8003310:	6a3a      	ldr	r2, [r7, #32]
 8003312:	68f8      	ldr	r0, [r7, #12]
 8003314:	f000 f89c 	bl	8003450 <I2C_MasterRequestWrite>
 8003318:	4603      	mov	r3, r0
 800331a:	2b00      	cmp	r3, #0
 800331c:	d001      	beq.n	8003322 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800331e:	2301      	movs	r3, #1
 8003320:	e08d      	b.n	800343e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003322:	2300      	movs	r3, #0
 8003324:	613b      	str	r3, [r7, #16]
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	695b      	ldr	r3, [r3, #20]
 800332c:	613b      	str	r3, [r7, #16]
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	699b      	ldr	r3, [r3, #24]
 8003334:	613b      	str	r3, [r7, #16]
 8003336:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003338:	e066      	b.n	8003408 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800333a:	697a      	ldr	r2, [r7, #20]
 800333c:	6a39      	ldr	r1, [r7, #32]
 800333e:	68f8      	ldr	r0, [r7, #12]
 8003340:	f000 f9de 	bl	8003700 <I2C_WaitOnTXEFlagUntilTimeout>
 8003344:	4603      	mov	r3, r0
 8003346:	2b00      	cmp	r3, #0
 8003348:	d00d      	beq.n	8003366 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800334e:	2b04      	cmp	r3, #4
 8003350:	d107      	bne.n	8003362 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	681a      	ldr	r2, [r3, #0]
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003360:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003362:	2301      	movs	r3, #1
 8003364:	e06b      	b.n	800343e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800336a:	781a      	ldrb	r2, [r3, #0]
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003376:	1c5a      	adds	r2, r3, #1
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003380:	b29b      	uxth	r3, r3
 8003382:	3b01      	subs	r3, #1
 8003384:	b29a      	uxth	r2, r3
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800338e:	3b01      	subs	r3, #1
 8003390:	b29a      	uxth	r2, r3
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	695b      	ldr	r3, [r3, #20]
 800339c:	f003 0304 	and.w	r3, r3, #4
 80033a0:	2b04      	cmp	r3, #4
 80033a2:	d11b      	bne.n	80033dc <HAL_I2C_Master_Transmit+0x188>
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d017      	beq.n	80033dc <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033b0:	781a      	ldrb	r2, [r3, #0]
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033bc:	1c5a      	adds	r2, r3, #1
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033c6:	b29b      	uxth	r3, r3
 80033c8:	3b01      	subs	r3, #1
 80033ca:	b29a      	uxth	r2, r3
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033d4:	3b01      	subs	r3, #1
 80033d6:	b29a      	uxth	r2, r3
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80033dc:	697a      	ldr	r2, [r7, #20]
 80033de:	6a39      	ldr	r1, [r7, #32]
 80033e0:	68f8      	ldr	r0, [r7, #12]
 80033e2:	f000 f9ce 	bl	8003782 <I2C_WaitOnBTFFlagUntilTimeout>
 80033e6:	4603      	mov	r3, r0
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d00d      	beq.n	8003408 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033f0:	2b04      	cmp	r3, #4
 80033f2:	d107      	bne.n	8003404 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	681a      	ldr	r2, [r3, #0]
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003402:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003404:	2301      	movs	r3, #1
 8003406:	e01a      	b.n	800343e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800340c:	2b00      	cmp	r3, #0
 800340e:	d194      	bne.n	800333a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	681a      	ldr	r2, [r3, #0]
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800341e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	2220      	movs	r2, #32
 8003424:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	2200      	movs	r2, #0
 800342c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	2200      	movs	r2, #0
 8003434:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003438:	2300      	movs	r3, #0
 800343a:	e000      	b.n	800343e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800343c:	2302      	movs	r3, #2
  }
}
 800343e:	4618      	mov	r0, r3
 8003440:	3718      	adds	r7, #24
 8003442:	46bd      	mov	sp, r7
 8003444:	bd80      	pop	{r7, pc}
 8003446:	bf00      	nop
 8003448:	00100002 	.word	0x00100002
 800344c:	ffff0000 	.word	0xffff0000

08003450 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003450:	b580      	push	{r7, lr}
 8003452:	b088      	sub	sp, #32
 8003454:	af02      	add	r7, sp, #8
 8003456:	60f8      	str	r0, [r7, #12]
 8003458:	607a      	str	r2, [r7, #4]
 800345a:	603b      	str	r3, [r7, #0]
 800345c:	460b      	mov	r3, r1
 800345e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003464:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003466:	697b      	ldr	r3, [r7, #20]
 8003468:	2b08      	cmp	r3, #8
 800346a:	d006      	beq.n	800347a <I2C_MasterRequestWrite+0x2a>
 800346c:	697b      	ldr	r3, [r7, #20]
 800346e:	2b01      	cmp	r3, #1
 8003470:	d003      	beq.n	800347a <I2C_MasterRequestWrite+0x2a>
 8003472:	697b      	ldr	r3, [r7, #20]
 8003474:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003478:	d108      	bne.n	800348c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	681a      	ldr	r2, [r3, #0]
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003488:	601a      	str	r2, [r3, #0]
 800348a:	e00b      	b.n	80034a4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003490:	2b12      	cmp	r3, #18
 8003492:	d107      	bne.n	80034a4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	681a      	ldr	r2, [r3, #0]
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80034a2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80034a4:	683b      	ldr	r3, [r7, #0]
 80034a6:	9300      	str	r3, [sp, #0]
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	2200      	movs	r2, #0
 80034ac:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80034b0:	68f8      	ldr	r0, [r7, #12]
 80034b2:	f000 f84f 	bl	8003554 <I2C_WaitOnFlagUntilTimeout>
 80034b6:	4603      	mov	r3, r0
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d00d      	beq.n	80034d8 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80034ca:	d103      	bne.n	80034d4 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	f44f 7200 	mov.w	r2, #512	; 0x200
 80034d2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80034d4:	2303      	movs	r3, #3
 80034d6:	e035      	b.n	8003544 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	691b      	ldr	r3, [r3, #16]
 80034dc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80034e0:	d108      	bne.n	80034f4 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80034e2:	897b      	ldrh	r3, [r7, #10]
 80034e4:	b2db      	uxtb	r3, r3
 80034e6:	461a      	mov	r2, r3
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80034f0:	611a      	str	r2, [r3, #16]
 80034f2:	e01b      	b.n	800352c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80034f4:	897b      	ldrh	r3, [r7, #10]
 80034f6:	11db      	asrs	r3, r3, #7
 80034f8:	b2db      	uxtb	r3, r3
 80034fa:	f003 0306 	and.w	r3, r3, #6
 80034fe:	b2db      	uxtb	r3, r3
 8003500:	f063 030f 	orn	r3, r3, #15
 8003504:	b2da      	uxtb	r2, r3
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800350c:	683b      	ldr	r3, [r7, #0]
 800350e:	687a      	ldr	r2, [r7, #4]
 8003510:	490e      	ldr	r1, [pc, #56]	; (800354c <I2C_MasterRequestWrite+0xfc>)
 8003512:	68f8      	ldr	r0, [r7, #12]
 8003514:	f000 f875 	bl	8003602 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003518:	4603      	mov	r3, r0
 800351a:	2b00      	cmp	r3, #0
 800351c:	d001      	beq.n	8003522 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800351e:	2301      	movs	r3, #1
 8003520:	e010      	b.n	8003544 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003522:	897b      	ldrh	r3, [r7, #10]
 8003524:	b2da      	uxtb	r2, r3
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800352c:	683b      	ldr	r3, [r7, #0]
 800352e:	687a      	ldr	r2, [r7, #4]
 8003530:	4907      	ldr	r1, [pc, #28]	; (8003550 <I2C_MasterRequestWrite+0x100>)
 8003532:	68f8      	ldr	r0, [r7, #12]
 8003534:	f000 f865 	bl	8003602 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003538:	4603      	mov	r3, r0
 800353a:	2b00      	cmp	r3, #0
 800353c:	d001      	beq.n	8003542 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800353e:	2301      	movs	r3, #1
 8003540:	e000      	b.n	8003544 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003542:	2300      	movs	r3, #0
}
 8003544:	4618      	mov	r0, r3
 8003546:	3718      	adds	r7, #24
 8003548:	46bd      	mov	sp, r7
 800354a:	bd80      	pop	{r7, pc}
 800354c:	00010008 	.word	0x00010008
 8003550:	00010002 	.word	0x00010002

08003554 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003554:	b580      	push	{r7, lr}
 8003556:	b084      	sub	sp, #16
 8003558:	af00      	add	r7, sp, #0
 800355a:	60f8      	str	r0, [r7, #12]
 800355c:	60b9      	str	r1, [r7, #8]
 800355e:	603b      	str	r3, [r7, #0]
 8003560:	4613      	mov	r3, r2
 8003562:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003564:	e025      	b.n	80035b2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003566:	683b      	ldr	r3, [r7, #0]
 8003568:	f1b3 3fff 	cmp.w	r3, #4294967295
 800356c:	d021      	beq.n	80035b2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800356e:	f7fe feef 	bl	8002350 <HAL_GetTick>
 8003572:	4602      	mov	r2, r0
 8003574:	69bb      	ldr	r3, [r7, #24]
 8003576:	1ad3      	subs	r3, r2, r3
 8003578:	683a      	ldr	r2, [r7, #0]
 800357a:	429a      	cmp	r2, r3
 800357c:	d302      	bcc.n	8003584 <I2C_WaitOnFlagUntilTimeout+0x30>
 800357e:	683b      	ldr	r3, [r7, #0]
 8003580:	2b00      	cmp	r3, #0
 8003582:	d116      	bne.n	80035b2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	2200      	movs	r2, #0
 8003588:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	2220      	movs	r2, #32
 800358e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	2200      	movs	r2, #0
 8003596:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800359e:	f043 0220 	orr.w	r2, r3, #32
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	2200      	movs	r2, #0
 80035aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80035ae:	2301      	movs	r3, #1
 80035b0:	e023      	b.n	80035fa <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80035b2:	68bb      	ldr	r3, [r7, #8]
 80035b4:	0c1b      	lsrs	r3, r3, #16
 80035b6:	b2db      	uxtb	r3, r3
 80035b8:	2b01      	cmp	r3, #1
 80035ba:	d10d      	bne.n	80035d8 <I2C_WaitOnFlagUntilTimeout+0x84>
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	695b      	ldr	r3, [r3, #20]
 80035c2:	43da      	mvns	r2, r3
 80035c4:	68bb      	ldr	r3, [r7, #8]
 80035c6:	4013      	ands	r3, r2
 80035c8:	b29b      	uxth	r3, r3
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	bf0c      	ite	eq
 80035ce:	2301      	moveq	r3, #1
 80035d0:	2300      	movne	r3, #0
 80035d2:	b2db      	uxtb	r3, r3
 80035d4:	461a      	mov	r2, r3
 80035d6:	e00c      	b.n	80035f2 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	699b      	ldr	r3, [r3, #24]
 80035de:	43da      	mvns	r2, r3
 80035e0:	68bb      	ldr	r3, [r7, #8]
 80035e2:	4013      	ands	r3, r2
 80035e4:	b29b      	uxth	r3, r3
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	bf0c      	ite	eq
 80035ea:	2301      	moveq	r3, #1
 80035ec:	2300      	movne	r3, #0
 80035ee:	b2db      	uxtb	r3, r3
 80035f0:	461a      	mov	r2, r3
 80035f2:	79fb      	ldrb	r3, [r7, #7]
 80035f4:	429a      	cmp	r2, r3
 80035f6:	d0b6      	beq.n	8003566 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80035f8:	2300      	movs	r3, #0
}
 80035fa:	4618      	mov	r0, r3
 80035fc:	3710      	adds	r7, #16
 80035fe:	46bd      	mov	sp, r7
 8003600:	bd80      	pop	{r7, pc}

08003602 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003602:	b580      	push	{r7, lr}
 8003604:	b084      	sub	sp, #16
 8003606:	af00      	add	r7, sp, #0
 8003608:	60f8      	str	r0, [r7, #12]
 800360a:	60b9      	str	r1, [r7, #8]
 800360c:	607a      	str	r2, [r7, #4]
 800360e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003610:	e051      	b.n	80036b6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	695b      	ldr	r3, [r3, #20]
 8003618:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800361c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003620:	d123      	bne.n	800366a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	681a      	ldr	r2, [r3, #0]
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003630:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800363a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	2200      	movs	r2, #0
 8003640:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	2220      	movs	r2, #32
 8003646:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	2200      	movs	r2, #0
 800364e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003656:	f043 0204 	orr.w	r2, r3, #4
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	2200      	movs	r2, #0
 8003662:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003666:	2301      	movs	r3, #1
 8003668:	e046      	b.n	80036f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003670:	d021      	beq.n	80036b6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003672:	f7fe fe6d 	bl	8002350 <HAL_GetTick>
 8003676:	4602      	mov	r2, r0
 8003678:	683b      	ldr	r3, [r7, #0]
 800367a:	1ad3      	subs	r3, r2, r3
 800367c:	687a      	ldr	r2, [r7, #4]
 800367e:	429a      	cmp	r2, r3
 8003680:	d302      	bcc.n	8003688 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	2b00      	cmp	r3, #0
 8003686:	d116      	bne.n	80036b6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	2200      	movs	r2, #0
 800368c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	2220      	movs	r2, #32
 8003692:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	2200      	movs	r2, #0
 800369a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036a2:	f043 0220 	orr.w	r2, r3, #32
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	2200      	movs	r2, #0
 80036ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80036b2:	2301      	movs	r3, #1
 80036b4:	e020      	b.n	80036f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80036b6:	68bb      	ldr	r3, [r7, #8]
 80036b8:	0c1b      	lsrs	r3, r3, #16
 80036ba:	b2db      	uxtb	r3, r3
 80036bc:	2b01      	cmp	r3, #1
 80036be:	d10c      	bne.n	80036da <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	695b      	ldr	r3, [r3, #20]
 80036c6:	43da      	mvns	r2, r3
 80036c8:	68bb      	ldr	r3, [r7, #8]
 80036ca:	4013      	ands	r3, r2
 80036cc:	b29b      	uxth	r3, r3
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	bf14      	ite	ne
 80036d2:	2301      	movne	r3, #1
 80036d4:	2300      	moveq	r3, #0
 80036d6:	b2db      	uxtb	r3, r3
 80036d8:	e00b      	b.n	80036f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	699b      	ldr	r3, [r3, #24]
 80036e0:	43da      	mvns	r2, r3
 80036e2:	68bb      	ldr	r3, [r7, #8]
 80036e4:	4013      	ands	r3, r2
 80036e6:	b29b      	uxth	r3, r3
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	bf14      	ite	ne
 80036ec:	2301      	movne	r3, #1
 80036ee:	2300      	moveq	r3, #0
 80036f0:	b2db      	uxtb	r3, r3
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d18d      	bne.n	8003612 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80036f6:	2300      	movs	r3, #0
}
 80036f8:	4618      	mov	r0, r3
 80036fa:	3710      	adds	r7, #16
 80036fc:	46bd      	mov	sp, r7
 80036fe:	bd80      	pop	{r7, pc}

08003700 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003700:	b580      	push	{r7, lr}
 8003702:	b084      	sub	sp, #16
 8003704:	af00      	add	r7, sp, #0
 8003706:	60f8      	str	r0, [r7, #12]
 8003708:	60b9      	str	r1, [r7, #8]
 800370a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800370c:	e02d      	b.n	800376a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800370e:	68f8      	ldr	r0, [r7, #12]
 8003710:	f000 f878 	bl	8003804 <I2C_IsAcknowledgeFailed>
 8003714:	4603      	mov	r3, r0
 8003716:	2b00      	cmp	r3, #0
 8003718:	d001      	beq.n	800371e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800371a:	2301      	movs	r3, #1
 800371c:	e02d      	b.n	800377a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800371e:	68bb      	ldr	r3, [r7, #8]
 8003720:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003724:	d021      	beq.n	800376a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003726:	f7fe fe13 	bl	8002350 <HAL_GetTick>
 800372a:	4602      	mov	r2, r0
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	1ad3      	subs	r3, r2, r3
 8003730:	68ba      	ldr	r2, [r7, #8]
 8003732:	429a      	cmp	r2, r3
 8003734:	d302      	bcc.n	800373c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003736:	68bb      	ldr	r3, [r7, #8]
 8003738:	2b00      	cmp	r3, #0
 800373a:	d116      	bne.n	800376a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	2200      	movs	r2, #0
 8003740:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	2220      	movs	r2, #32
 8003746:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	2200      	movs	r2, #0
 800374e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003756:	f043 0220 	orr.w	r2, r3, #32
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	2200      	movs	r2, #0
 8003762:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003766:	2301      	movs	r3, #1
 8003768:	e007      	b.n	800377a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	695b      	ldr	r3, [r3, #20]
 8003770:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003774:	2b80      	cmp	r3, #128	; 0x80
 8003776:	d1ca      	bne.n	800370e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003778:	2300      	movs	r3, #0
}
 800377a:	4618      	mov	r0, r3
 800377c:	3710      	adds	r7, #16
 800377e:	46bd      	mov	sp, r7
 8003780:	bd80      	pop	{r7, pc}

08003782 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003782:	b580      	push	{r7, lr}
 8003784:	b084      	sub	sp, #16
 8003786:	af00      	add	r7, sp, #0
 8003788:	60f8      	str	r0, [r7, #12]
 800378a:	60b9      	str	r1, [r7, #8]
 800378c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800378e:	e02d      	b.n	80037ec <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003790:	68f8      	ldr	r0, [r7, #12]
 8003792:	f000 f837 	bl	8003804 <I2C_IsAcknowledgeFailed>
 8003796:	4603      	mov	r3, r0
 8003798:	2b00      	cmp	r3, #0
 800379a:	d001      	beq.n	80037a0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800379c:	2301      	movs	r3, #1
 800379e:	e02d      	b.n	80037fc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80037a0:	68bb      	ldr	r3, [r7, #8]
 80037a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037a6:	d021      	beq.n	80037ec <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80037a8:	f7fe fdd2 	bl	8002350 <HAL_GetTick>
 80037ac:	4602      	mov	r2, r0
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	1ad3      	subs	r3, r2, r3
 80037b2:	68ba      	ldr	r2, [r7, #8]
 80037b4:	429a      	cmp	r2, r3
 80037b6:	d302      	bcc.n	80037be <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80037b8:	68bb      	ldr	r3, [r7, #8]
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d116      	bne.n	80037ec <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	2200      	movs	r2, #0
 80037c2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	2220      	movs	r2, #32
 80037c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	2200      	movs	r2, #0
 80037d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037d8:	f043 0220 	orr.w	r2, r3, #32
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	2200      	movs	r2, #0
 80037e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80037e8:	2301      	movs	r3, #1
 80037ea:	e007      	b.n	80037fc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	695b      	ldr	r3, [r3, #20]
 80037f2:	f003 0304 	and.w	r3, r3, #4
 80037f6:	2b04      	cmp	r3, #4
 80037f8:	d1ca      	bne.n	8003790 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80037fa:	2300      	movs	r3, #0
}
 80037fc:	4618      	mov	r0, r3
 80037fe:	3710      	adds	r7, #16
 8003800:	46bd      	mov	sp, r7
 8003802:	bd80      	pop	{r7, pc}

08003804 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003804:	b480      	push	{r7}
 8003806:	b083      	sub	sp, #12
 8003808:	af00      	add	r7, sp, #0
 800380a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	695b      	ldr	r3, [r3, #20]
 8003812:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003816:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800381a:	d11b      	bne.n	8003854 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003824:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	2200      	movs	r2, #0
 800382a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	2220      	movs	r2, #32
 8003830:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	2200      	movs	r2, #0
 8003838:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003840:	f043 0204 	orr.w	r2, r3, #4
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	2200      	movs	r2, #0
 800384c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003850:	2301      	movs	r3, #1
 8003852:	e000      	b.n	8003856 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003854:	2300      	movs	r3, #0
}
 8003856:	4618      	mov	r0, r3
 8003858:	370c      	adds	r7, #12
 800385a:	46bd      	mov	sp, r7
 800385c:	bc80      	pop	{r7}
 800385e:	4770      	bx	lr

08003860 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003860:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003862:	b08f      	sub	sp, #60	; 0x3c
 8003864:	af0a      	add	r7, sp, #40	; 0x28
 8003866:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	2b00      	cmp	r3, #0
 800386c:	d101      	bne.n	8003872 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800386e:	2301      	movs	r3, #1
 8003870:	e10f      	b.n	8003a92 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 800387e:	b2db      	uxtb	r3, r3
 8003880:	2b00      	cmp	r3, #0
 8003882:	d106      	bne.n	8003892 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2200      	movs	r2, #0
 8003888:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800388c:	6878      	ldr	r0, [r7, #4]
 800388e:	f005 f9b3 	bl	8008bf8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	2203      	movs	r2, #3
 8003896:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800389a:	68bb      	ldr	r3, [r7, #8]
 800389c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800389e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d102      	bne.n	80038ac <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	2200      	movs	r2, #0
 80038aa:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	4618      	mov	r0, r3
 80038b2:	f002 f9a3 	bl	8005bfc <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	603b      	str	r3, [r7, #0]
 80038bc:	687e      	ldr	r6, [r7, #4]
 80038be:	466d      	mov	r5, sp
 80038c0:	f106 0410 	add.w	r4, r6, #16
 80038c4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80038c6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80038c8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80038ca:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80038cc:	e894 0003 	ldmia.w	r4, {r0, r1}
 80038d0:	e885 0003 	stmia.w	r5, {r0, r1}
 80038d4:	1d33      	adds	r3, r6, #4
 80038d6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80038d8:	6838      	ldr	r0, [r7, #0]
 80038da:	f002 f885 	bl	80059e8 <USB_CoreInit>
 80038de:	4603      	mov	r3, r0
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d005      	beq.n	80038f0 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	2202      	movs	r2, #2
 80038e8:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80038ec:	2301      	movs	r3, #1
 80038ee:	e0d0      	b.n	8003a92 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	2100      	movs	r1, #0
 80038f6:	4618      	mov	r0, r3
 80038f8:	f002 f990 	bl	8005c1c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80038fc:	2300      	movs	r3, #0
 80038fe:	73fb      	strb	r3, [r7, #15]
 8003900:	e04a      	b.n	8003998 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003902:	7bfa      	ldrb	r2, [r7, #15]
 8003904:	6879      	ldr	r1, [r7, #4]
 8003906:	4613      	mov	r3, r2
 8003908:	00db      	lsls	r3, r3, #3
 800390a:	1a9b      	subs	r3, r3, r2
 800390c:	009b      	lsls	r3, r3, #2
 800390e:	440b      	add	r3, r1
 8003910:	333d      	adds	r3, #61	; 0x3d
 8003912:	2201      	movs	r2, #1
 8003914:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003916:	7bfa      	ldrb	r2, [r7, #15]
 8003918:	6879      	ldr	r1, [r7, #4]
 800391a:	4613      	mov	r3, r2
 800391c:	00db      	lsls	r3, r3, #3
 800391e:	1a9b      	subs	r3, r3, r2
 8003920:	009b      	lsls	r3, r3, #2
 8003922:	440b      	add	r3, r1
 8003924:	333c      	adds	r3, #60	; 0x3c
 8003926:	7bfa      	ldrb	r2, [r7, #15]
 8003928:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800392a:	7bfa      	ldrb	r2, [r7, #15]
 800392c:	7bfb      	ldrb	r3, [r7, #15]
 800392e:	b298      	uxth	r0, r3
 8003930:	6879      	ldr	r1, [r7, #4]
 8003932:	4613      	mov	r3, r2
 8003934:	00db      	lsls	r3, r3, #3
 8003936:	1a9b      	subs	r3, r3, r2
 8003938:	009b      	lsls	r3, r3, #2
 800393a:	440b      	add	r3, r1
 800393c:	3342      	adds	r3, #66	; 0x42
 800393e:	4602      	mov	r2, r0
 8003940:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003942:	7bfa      	ldrb	r2, [r7, #15]
 8003944:	6879      	ldr	r1, [r7, #4]
 8003946:	4613      	mov	r3, r2
 8003948:	00db      	lsls	r3, r3, #3
 800394a:	1a9b      	subs	r3, r3, r2
 800394c:	009b      	lsls	r3, r3, #2
 800394e:	440b      	add	r3, r1
 8003950:	333f      	adds	r3, #63	; 0x3f
 8003952:	2200      	movs	r2, #0
 8003954:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003956:	7bfa      	ldrb	r2, [r7, #15]
 8003958:	6879      	ldr	r1, [r7, #4]
 800395a:	4613      	mov	r3, r2
 800395c:	00db      	lsls	r3, r3, #3
 800395e:	1a9b      	subs	r3, r3, r2
 8003960:	009b      	lsls	r3, r3, #2
 8003962:	440b      	add	r3, r1
 8003964:	3344      	adds	r3, #68	; 0x44
 8003966:	2200      	movs	r2, #0
 8003968:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800396a:	7bfa      	ldrb	r2, [r7, #15]
 800396c:	6879      	ldr	r1, [r7, #4]
 800396e:	4613      	mov	r3, r2
 8003970:	00db      	lsls	r3, r3, #3
 8003972:	1a9b      	subs	r3, r3, r2
 8003974:	009b      	lsls	r3, r3, #2
 8003976:	440b      	add	r3, r1
 8003978:	3348      	adds	r3, #72	; 0x48
 800397a:	2200      	movs	r2, #0
 800397c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800397e:	7bfa      	ldrb	r2, [r7, #15]
 8003980:	6879      	ldr	r1, [r7, #4]
 8003982:	4613      	mov	r3, r2
 8003984:	00db      	lsls	r3, r3, #3
 8003986:	1a9b      	subs	r3, r3, r2
 8003988:	009b      	lsls	r3, r3, #2
 800398a:	440b      	add	r3, r1
 800398c:	3350      	adds	r3, #80	; 0x50
 800398e:	2200      	movs	r2, #0
 8003990:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003992:	7bfb      	ldrb	r3, [r7, #15]
 8003994:	3301      	adds	r3, #1
 8003996:	73fb      	strb	r3, [r7, #15]
 8003998:	7bfa      	ldrb	r2, [r7, #15]
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	685b      	ldr	r3, [r3, #4]
 800399e:	429a      	cmp	r2, r3
 80039a0:	d3af      	bcc.n	8003902 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80039a2:	2300      	movs	r3, #0
 80039a4:	73fb      	strb	r3, [r7, #15]
 80039a6:	e044      	b.n	8003a32 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80039a8:	7bfa      	ldrb	r2, [r7, #15]
 80039aa:	6879      	ldr	r1, [r7, #4]
 80039ac:	4613      	mov	r3, r2
 80039ae:	00db      	lsls	r3, r3, #3
 80039b0:	1a9b      	subs	r3, r3, r2
 80039b2:	009b      	lsls	r3, r3, #2
 80039b4:	440b      	add	r3, r1
 80039b6:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 80039ba:	2200      	movs	r2, #0
 80039bc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80039be:	7bfa      	ldrb	r2, [r7, #15]
 80039c0:	6879      	ldr	r1, [r7, #4]
 80039c2:	4613      	mov	r3, r2
 80039c4:	00db      	lsls	r3, r3, #3
 80039c6:	1a9b      	subs	r3, r3, r2
 80039c8:	009b      	lsls	r3, r3, #2
 80039ca:	440b      	add	r3, r1
 80039cc:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80039d0:	7bfa      	ldrb	r2, [r7, #15]
 80039d2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80039d4:	7bfa      	ldrb	r2, [r7, #15]
 80039d6:	6879      	ldr	r1, [r7, #4]
 80039d8:	4613      	mov	r3, r2
 80039da:	00db      	lsls	r3, r3, #3
 80039dc:	1a9b      	subs	r3, r3, r2
 80039de:	009b      	lsls	r3, r3, #2
 80039e0:	440b      	add	r3, r1
 80039e2:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80039e6:	2200      	movs	r2, #0
 80039e8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80039ea:	7bfa      	ldrb	r2, [r7, #15]
 80039ec:	6879      	ldr	r1, [r7, #4]
 80039ee:	4613      	mov	r3, r2
 80039f0:	00db      	lsls	r3, r3, #3
 80039f2:	1a9b      	subs	r3, r3, r2
 80039f4:	009b      	lsls	r3, r3, #2
 80039f6:	440b      	add	r3, r1
 80039f8:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80039fc:	2200      	movs	r2, #0
 80039fe:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003a00:	7bfa      	ldrb	r2, [r7, #15]
 8003a02:	6879      	ldr	r1, [r7, #4]
 8003a04:	4613      	mov	r3, r2
 8003a06:	00db      	lsls	r3, r3, #3
 8003a08:	1a9b      	subs	r3, r3, r2
 8003a0a:	009b      	lsls	r3, r3, #2
 8003a0c:	440b      	add	r3, r1
 8003a0e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003a12:	2200      	movs	r2, #0
 8003a14:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003a16:	7bfa      	ldrb	r2, [r7, #15]
 8003a18:	6879      	ldr	r1, [r7, #4]
 8003a1a:	4613      	mov	r3, r2
 8003a1c:	00db      	lsls	r3, r3, #3
 8003a1e:	1a9b      	subs	r3, r3, r2
 8003a20:	009b      	lsls	r3, r3, #2
 8003a22:	440b      	add	r3, r1
 8003a24:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003a28:	2200      	movs	r2, #0
 8003a2a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003a2c:	7bfb      	ldrb	r3, [r7, #15]
 8003a2e:	3301      	adds	r3, #1
 8003a30:	73fb      	strb	r3, [r7, #15]
 8003a32:	7bfa      	ldrb	r2, [r7, #15]
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	685b      	ldr	r3, [r3, #4]
 8003a38:	429a      	cmp	r2, r3
 8003a3a:	d3b5      	bcc.n	80039a8 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	603b      	str	r3, [r7, #0]
 8003a42:	687e      	ldr	r6, [r7, #4]
 8003a44:	466d      	mov	r5, sp
 8003a46:	f106 0410 	add.w	r4, r6, #16
 8003a4a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003a4c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003a4e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003a50:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003a52:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003a56:	e885 0003 	stmia.w	r5, {r0, r1}
 8003a5a:	1d33      	adds	r3, r6, #4
 8003a5c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003a5e:	6838      	ldr	r0, [r7, #0]
 8003a60:	f002 f928 	bl	8005cb4 <USB_DevInit>
 8003a64:	4603      	mov	r3, r0
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d005      	beq.n	8003a76 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	2202      	movs	r2, #2
 8003a6e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8003a72:	2301      	movs	r3, #1
 8003a74:	e00d      	b.n	8003a92 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	2200      	movs	r2, #0
 8003a7a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	2201      	movs	r2, #1
 8003a82:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  (void)USB_DevDisconnect(hpcd->Instance);
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	4618      	mov	r0, r3
 8003a8c:	f003 f999 	bl	8006dc2 <USB_DevDisconnect>

  return HAL_OK;
 8003a90:	2300      	movs	r3, #0
}
 8003a92:	4618      	mov	r0, r3
 8003a94:	3714      	adds	r7, #20
 8003a96:	46bd      	mov	sp, r7
 8003a98:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003a9a <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003a9a:	b580      	push	{r7, lr}
 8003a9c:	b082      	sub	sp, #8
 8003a9e:	af00      	add	r7, sp, #0
 8003aa0:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003aa8:	2b01      	cmp	r3, #1
 8003aaa:	d101      	bne.n	8003ab0 <HAL_PCD_Start+0x16>
 8003aac:	2302      	movs	r3, #2
 8003aae:	e012      	b.n	8003ad6 <HAL_PCD_Start+0x3c>
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	2201      	movs	r2, #1
 8003ab4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  __HAL_PCD_ENABLE(hpcd);
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	4618      	mov	r0, r3
 8003abe:	f002 f88d 	bl	8005bdc <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	4618      	mov	r0, r3
 8003ac8:	f003 f95b 	bl	8006d82 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	2200      	movs	r2, #0
 8003ad0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003ad4:	2300      	movs	r3, #0
}
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	3708      	adds	r7, #8
 8003ada:	46bd      	mov	sp, r7
 8003adc:	bd80      	pop	{r7, pc}

08003ade <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003ade:	b590      	push	{r4, r7, lr}
 8003ae0:	b08d      	sub	sp, #52	; 0x34
 8003ae2:	af00      	add	r7, sp, #0
 8003ae4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003aec:	6a3b      	ldr	r3, [r7, #32]
 8003aee:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t temp;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	4618      	mov	r0, r3
 8003af6:	f003 fa12 	bl	8006f1e <USB_GetMode>
 8003afa:	4603      	mov	r3, r0
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	f040 838f 	bne.w	8004220 <HAL_PCD_IRQHandler+0x742>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	4618      	mov	r0, r3
 8003b08:	f003 f97b 	bl	8006e02 <USB_ReadInterrupts>
 8003b0c:	4603      	mov	r3, r0
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	f000 8385 	beq.w	800421e <HAL_PCD_IRQHandler+0x740>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	4618      	mov	r0, r3
 8003b1a:	f003 f972 	bl	8006e02 <USB_ReadInterrupts>
 8003b1e:	4603      	mov	r3, r0
 8003b20:	f003 0302 	and.w	r3, r3, #2
 8003b24:	2b02      	cmp	r3, #2
 8003b26:	d107      	bne.n	8003b38 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	695a      	ldr	r2, [r3, #20]
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f002 0202 	and.w	r2, r2, #2
 8003b36:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	4618      	mov	r0, r3
 8003b3e:	f003 f960 	bl	8006e02 <USB_ReadInterrupts>
 8003b42:	4603      	mov	r3, r0
 8003b44:	f003 0310 	and.w	r3, r3, #16
 8003b48:	2b10      	cmp	r3, #16
 8003b4a:	d161      	bne.n	8003c10 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	699a      	ldr	r2, [r3, #24]
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f022 0210 	bic.w	r2, r2, #16
 8003b5a:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8003b5c:	6a3b      	ldr	r3, [r7, #32]
 8003b5e:	6a1b      	ldr	r3, [r3, #32]
 8003b60:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8003b62:	69bb      	ldr	r3, [r7, #24]
 8003b64:	f003 020f 	and.w	r2, r3, #15
 8003b68:	4613      	mov	r3, r2
 8003b6a:	00db      	lsls	r3, r3, #3
 8003b6c:	1a9b      	subs	r3, r3, r2
 8003b6e:	009b      	lsls	r3, r3, #2
 8003b70:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003b74:	687a      	ldr	r2, [r7, #4]
 8003b76:	4413      	add	r3, r2
 8003b78:	3304      	adds	r3, #4
 8003b7a:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8003b7c:	69bb      	ldr	r3, [r7, #24]
 8003b7e:	0c5b      	lsrs	r3, r3, #17
 8003b80:	f003 030f 	and.w	r3, r3, #15
 8003b84:	2b02      	cmp	r3, #2
 8003b86:	d124      	bne.n	8003bd2 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8003b88:	69ba      	ldr	r2, [r7, #24]
 8003b8a:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8003b8e:	4013      	ands	r3, r2
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d035      	beq.n	8003c00 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003b94:	697b      	ldr	r3, [r7, #20]
 8003b96:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8003b98:	69bb      	ldr	r3, [r7, #24]
 8003b9a:	091b      	lsrs	r3, r3, #4
 8003b9c:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003b9e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003ba2:	b29b      	uxth	r3, r3
 8003ba4:	461a      	mov	r2, r3
 8003ba6:	6a38      	ldr	r0, [r7, #32]
 8003ba8:	f002 ff9d 	bl	8006ae6 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003bac:	697b      	ldr	r3, [r7, #20]
 8003bae:	68da      	ldr	r2, [r3, #12]
 8003bb0:	69bb      	ldr	r3, [r7, #24]
 8003bb2:	091b      	lsrs	r3, r3, #4
 8003bb4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003bb8:	441a      	add	r2, r3
 8003bba:	697b      	ldr	r3, [r7, #20]
 8003bbc:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003bbe:	697b      	ldr	r3, [r7, #20]
 8003bc0:	699a      	ldr	r2, [r3, #24]
 8003bc2:	69bb      	ldr	r3, [r7, #24]
 8003bc4:	091b      	lsrs	r3, r3, #4
 8003bc6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003bca:	441a      	add	r2, r3
 8003bcc:	697b      	ldr	r3, [r7, #20]
 8003bce:	619a      	str	r2, [r3, #24]
 8003bd0:	e016      	b.n	8003c00 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8003bd2:	69bb      	ldr	r3, [r7, #24]
 8003bd4:	0c5b      	lsrs	r3, r3, #17
 8003bd6:	f003 030f 	and.w	r3, r3, #15
 8003bda:	2b06      	cmp	r3, #6
 8003bdc:	d110      	bne.n	8003c00 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003be4:	2208      	movs	r2, #8
 8003be6:	4619      	mov	r1, r3
 8003be8:	6a38      	ldr	r0, [r7, #32]
 8003bea:	f002 ff7c 	bl	8006ae6 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003bee:	697b      	ldr	r3, [r7, #20]
 8003bf0:	699a      	ldr	r2, [r3, #24]
 8003bf2:	69bb      	ldr	r3, [r7, #24]
 8003bf4:	091b      	lsrs	r3, r3, #4
 8003bf6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003bfa:	441a      	add	r2, r3
 8003bfc:	697b      	ldr	r3, [r7, #20]
 8003bfe:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	699a      	ldr	r2, [r3, #24]
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f042 0210 	orr.w	r2, r2, #16
 8003c0e:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	4618      	mov	r0, r3
 8003c16:	f003 f8f4 	bl	8006e02 <USB_ReadInterrupts>
 8003c1a:	4603      	mov	r3, r0
 8003c1c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003c20:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003c24:	d16e      	bne.n	8003d04 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8003c26:	2300      	movs	r3, #0
 8003c28:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	4618      	mov	r0, r3
 8003c30:	f003 f8f9 	bl	8006e26 <USB_ReadDevAllOutEpInterrupt>
 8003c34:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8003c36:	e062      	b.n	8003cfe <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8003c38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c3a:	f003 0301 	and.w	r3, r3, #1
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d057      	beq.n	8003cf2 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c48:	b2d2      	uxtb	r2, r2
 8003c4a:	4611      	mov	r1, r2
 8003c4c:	4618      	mov	r0, r3
 8003c4e:	f003 f91c 	bl	8006e8a <USB_ReadDevOutEPInterrupt>
 8003c52:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8003c54:	693b      	ldr	r3, [r7, #16]
 8003c56:	f003 0301 	and.w	r3, r3, #1
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d00c      	beq.n	8003c78 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8003c5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c60:	015a      	lsls	r2, r3, #5
 8003c62:	69fb      	ldr	r3, [r7, #28]
 8003c64:	4413      	add	r3, r2
 8003c66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c6a:	461a      	mov	r2, r3
 8003c6c:	2301      	movs	r3, #1
 8003c6e:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8003c70:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003c72:	6878      	ldr	r0, [r7, #4]
 8003c74:	f000 fda2 	bl	80047bc <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8003c78:	693b      	ldr	r3, [r7, #16]
 8003c7a:	f003 0308 	and.w	r3, r3, #8
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d00c      	beq.n	8003c9c <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8003c82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c84:	015a      	lsls	r2, r3, #5
 8003c86:	69fb      	ldr	r3, [r7, #28]
 8003c88:	4413      	add	r3, r2
 8003c8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c8e:	461a      	mov	r2, r3
 8003c90:	2308      	movs	r3, #8
 8003c92:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8003c94:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003c96:	6878      	ldr	r0, [r7, #4]
 8003c98:	f000 fe9c 	bl	80049d4 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8003c9c:	693b      	ldr	r3, [r7, #16]
 8003c9e:	f003 0310 	and.w	r3, r3, #16
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d008      	beq.n	8003cb8 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8003ca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ca8:	015a      	lsls	r2, r3, #5
 8003caa:	69fb      	ldr	r3, [r7, #28]
 8003cac:	4413      	add	r3, r2
 8003cae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003cb2:	461a      	mov	r2, r3
 8003cb4:	2310      	movs	r3, #16
 8003cb6:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003cb8:	693b      	ldr	r3, [r7, #16]
 8003cba:	f003 0320 	and.w	r3, r3, #32
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d008      	beq.n	8003cd4 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003cc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cc4:	015a      	lsls	r2, r3, #5
 8003cc6:	69fb      	ldr	r3, [r7, #28]
 8003cc8:	4413      	add	r3, r2
 8003cca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003cce:	461a      	mov	r2, r3
 8003cd0:	2320      	movs	r3, #32
 8003cd2:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8003cd4:	693b      	ldr	r3, [r7, #16]
 8003cd6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d009      	beq.n	8003cf2 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8003cde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ce0:	015a      	lsls	r2, r3, #5
 8003ce2:	69fb      	ldr	r3, [r7, #28]
 8003ce4:	4413      	add	r3, r2
 8003ce6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003cea:	461a      	mov	r2, r3
 8003cec:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003cf0:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8003cf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cf4:	3301      	adds	r3, #1
 8003cf6:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003cf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cfa:	085b      	lsrs	r3, r3, #1
 8003cfc:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003cfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d199      	bne.n	8003c38 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	4618      	mov	r0, r3
 8003d0a:	f003 f87a 	bl	8006e02 <USB_ReadInterrupts>
 8003d0e:	4603      	mov	r3, r0
 8003d10:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003d14:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003d18:	f040 80c0 	bne.w	8003e9c <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	4618      	mov	r0, r3
 8003d22:	f003 f899 	bl	8006e58 <USB_ReadDevAllInEpInterrupt>
 8003d26:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8003d28:	2300      	movs	r3, #0
 8003d2a:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8003d2c:	e0b2      	b.n	8003e94 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8003d2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d30:	f003 0301 	and.w	r3, r3, #1
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	f000 80a7 	beq.w	8003e88 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d40:	b2d2      	uxtb	r2, r2
 8003d42:	4611      	mov	r1, r2
 8003d44:	4618      	mov	r0, r3
 8003d46:	f003 f8bd 	bl	8006ec4 <USB_ReadDevInEPInterrupt>
 8003d4a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8003d4c:	693b      	ldr	r3, [r7, #16]
 8003d4e:	f003 0301 	and.w	r3, r3, #1
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d057      	beq.n	8003e06 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003d56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d58:	f003 030f 	and.w	r3, r3, #15
 8003d5c:	2201      	movs	r2, #1
 8003d5e:	fa02 f303 	lsl.w	r3, r2, r3
 8003d62:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003d64:	69fb      	ldr	r3, [r7, #28]
 8003d66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d6a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	43db      	mvns	r3, r3
 8003d70:	69f9      	ldr	r1, [r7, #28]
 8003d72:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003d76:	4013      	ands	r3, r2
 8003d78:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8003d7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d7c:	015a      	lsls	r2, r3, #5
 8003d7e:	69fb      	ldr	r3, [r7, #28]
 8003d80:	4413      	add	r3, r2
 8003d82:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d86:	461a      	mov	r2, r3
 8003d88:	2301      	movs	r3, #1
 8003d8a:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	691b      	ldr	r3, [r3, #16]
 8003d90:	2b01      	cmp	r3, #1
 8003d92:	d132      	bne.n	8003dfa <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8003d94:	6879      	ldr	r1, [r7, #4]
 8003d96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d98:	4613      	mov	r3, r2
 8003d9a:	00db      	lsls	r3, r3, #3
 8003d9c:	1a9b      	subs	r3, r3, r2
 8003d9e:	009b      	lsls	r3, r3, #2
 8003da0:	440b      	add	r3, r1
 8003da2:	3348      	adds	r3, #72	; 0x48
 8003da4:	6819      	ldr	r1, [r3, #0]
 8003da6:	6878      	ldr	r0, [r7, #4]
 8003da8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003daa:	4613      	mov	r3, r2
 8003dac:	00db      	lsls	r3, r3, #3
 8003dae:	1a9b      	subs	r3, r3, r2
 8003db0:	009b      	lsls	r3, r3, #2
 8003db2:	4403      	add	r3, r0
 8003db4:	3344      	adds	r3, #68	; 0x44
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	4419      	add	r1, r3
 8003dba:	6878      	ldr	r0, [r7, #4]
 8003dbc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003dbe:	4613      	mov	r3, r2
 8003dc0:	00db      	lsls	r3, r3, #3
 8003dc2:	1a9b      	subs	r3, r3, r2
 8003dc4:	009b      	lsls	r3, r3, #2
 8003dc6:	4403      	add	r3, r0
 8003dc8:	3348      	adds	r3, #72	; 0x48
 8003dca:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8003dcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d113      	bne.n	8003dfa <HAL_PCD_IRQHandler+0x31c>
 8003dd2:	6879      	ldr	r1, [r7, #4]
 8003dd4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003dd6:	4613      	mov	r3, r2
 8003dd8:	00db      	lsls	r3, r3, #3
 8003dda:	1a9b      	subs	r3, r3, r2
 8003ddc:	009b      	lsls	r3, r3, #2
 8003dde:	440b      	add	r3, r1
 8003de0:	3350      	adds	r3, #80	; 0x50
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d108      	bne.n	8003dfa <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	6818      	ldr	r0, [r3, #0]
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003df2:	461a      	mov	r2, r3
 8003df4:	2101      	movs	r1, #1
 8003df6:	f003 f8c1 	bl	8006f7c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003dfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dfc:	b2db      	uxtb	r3, r3
 8003dfe:	4619      	mov	r1, r3
 8003e00:	6878      	ldr	r0, [r7, #4]
 8003e02:	f004 ff7a 	bl	8008cfa <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003e06:	693b      	ldr	r3, [r7, #16]
 8003e08:	f003 0308 	and.w	r3, r3, #8
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d008      	beq.n	8003e22 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003e10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e12:	015a      	lsls	r2, r3, #5
 8003e14:	69fb      	ldr	r3, [r7, #28]
 8003e16:	4413      	add	r3, r2
 8003e18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e1c:	461a      	mov	r2, r3
 8003e1e:	2308      	movs	r3, #8
 8003e20:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003e22:	693b      	ldr	r3, [r7, #16]
 8003e24:	f003 0310 	and.w	r3, r3, #16
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d008      	beq.n	8003e3e <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8003e2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e2e:	015a      	lsls	r2, r3, #5
 8003e30:	69fb      	ldr	r3, [r7, #28]
 8003e32:	4413      	add	r3, r2
 8003e34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e38:	461a      	mov	r2, r3
 8003e3a:	2310      	movs	r3, #16
 8003e3c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8003e3e:	693b      	ldr	r3, [r7, #16]
 8003e40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d008      	beq.n	8003e5a <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003e48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e4a:	015a      	lsls	r2, r3, #5
 8003e4c:	69fb      	ldr	r3, [r7, #28]
 8003e4e:	4413      	add	r3, r2
 8003e50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e54:	461a      	mov	r2, r3
 8003e56:	2340      	movs	r3, #64	; 0x40
 8003e58:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8003e5a:	693b      	ldr	r3, [r7, #16]
 8003e5c:	f003 0302 	and.w	r3, r3, #2
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d008      	beq.n	8003e76 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003e64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e66:	015a      	lsls	r2, r3, #5
 8003e68:	69fb      	ldr	r3, [r7, #28]
 8003e6a:	4413      	add	r3, r2
 8003e6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e70:	461a      	mov	r2, r3
 8003e72:	2302      	movs	r3, #2
 8003e74:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003e76:	693b      	ldr	r3, [r7, #16]
 8003e78:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d003      	beq.n	8003e88 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8003e80:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003e82:	6878      	ldr	r0, [r7, #4]
 8003e84:	f000 fc0c 	bl	80046a0 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003e88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e8a:	3301      	adds	r3, #1
 8003e8c:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003e8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e90:	085b      	lsrs	r3, r3, #1
 8003e92:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003e94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	f47f af49 	bne.w	8003d2e <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	4618      	mov	r0, r3
 8003ea2:	f002 ffae 	bl	8006e02 <USB_ReadInterrupts>
 8003ea6:	4603      	mov	r3, r0
 8003ea8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003eac:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003eb0:	d114      	bne.n	8003edc <HAL_PCD_IRQHandler+0x3fe>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003eb2:	69fb      	ldr	r3, [r7, #28]
 8003eb4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003eb8:	685b      	ldr	r3, [r3, #4]
 8003eba:	69fa      	ldr	r2, [r7, #28]
 8003ebc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003ec0:	f023 0301 	bic.w	r3, r3, #1
 8003ec4:	6053      	str	r3, [r2, #4]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResumeCallback(hpcd);
#else
      HAL_PCD_ResumeCallback(hpcd);
 8003ec6:	6878      	ldr	r0, [r7, #4]
 8003ec8:	f004 ff8e 	bl	8008de8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	695a      	ldr	r2, [r3, #20]
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8003eda:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	4618      	mov	r0, r3
 8003ee2:	f002 ff8e 	bl	8006e02 <USB_ReadInterrupts>
 8003ee6:	4603      	mov	r3, r0
 8003ee8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003eec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003ef0:	d112      	bne.n	8003f18 <HAL_PCD_IRQHandler+0x43a>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003ef2:	69fb      	ldr	r3, [r7, #28]
 8003ef4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ef8:	689b      	ldr	r3, [r3, #8]
 8003efa:	f003 0301 	and.w	r3, r3, #1
 8003efe:	2b01      	cmp	r3, #1
 8003f00:	d102      	bne.n	8003f08 <HAL_PCD_IRQHandler+0x42a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003f02:	6878      	ldr	r0, [r7, #4]
 8003f04:	f004 ff4a 	bl	8008d9c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	695a      	ldr	r2, [r3, #20]
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8003f16:	615a      	str	r2, [r3, #20]
    }
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	4618      	mov	r0, r3
 8003f1e:	f002 ff70 	bl	8006e02 <USB_ReadInterrupts>
 8003f22:	4603      	mov	r3, r0
 8003f24:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003f28:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f2c:	f040 80c7 	bne.w	80040be <HAL_PCD_IRQHandler+0x5e0>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003f30:	69fb      	ldr	r3, [r7, #28]
 8003f32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f36:	685b      	ldr	r3, [r3, #4]
 8003f38:	69fa      	ldr	r2, [r7, #28]
 8003f3a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003f3e:	f023 0301 	bic.w	r3, r3, #1
 8003f42:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	2110      	movs	r1, #16
 8003f4a:	4618      	mov	r0, r3
 8003f4c:	f002 f816 	bl	8005f7c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003f50:	2300      	movs	r3, #0
 8003f52:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003f54:	e056      	b.n	8004004 <HAL_PCD_IRQHandler+0x526>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003f56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f58:	015a      	lsls	r2, r3, #5
 8003f5a:	69fb      	ldr	r3, [r7, #28]
 8003f5c:	4413      	add	r3, r2
 8003f5e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f62:	461a      	mov	r2, r3
 8003f64:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003f68:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003f6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f6c:	015a      	lsls	r2, r3, #5
 8003f6e:	69fb      	ldr	r3, [r7, #28]
 8003f70:	4413      	add	r3, r2
 8003f72:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003f7a:	0151      	lsls	r1, r2, #5
 8003f7c:	69fa      	ldr	r2, [r7, #28]
 8003f7e:	440a      	add	r2, r1
 8003f80:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003f84:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003f88:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8003f8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f8c:	015a      	lsls	r2, r3, #5
 8003f8e:	69fb      	ldr	r3, [r7, #28]
 8003f90:	4413      	add	r3, r2
 8003f92:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003f9a:	0151      	lsls	r1, r2, #5
 8003f9c:	69fa      	ldr	r2, [r7, #28]
 8003f9e:	440a      	add	r2, r1
 8003fa0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003fa4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003fa8:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003faa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fac:	015a      	lsls	r2, r3, #5
 8003fae:	69fb      	ldr	r3, [r7, #28]
 8003fb0:	4413      	add	r3, r2
 8003fb2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003fb6:	461a      	mov	r2, r3
 8003fb8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003fbc:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003fbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fc0:	015a      	lsls	r2, r3, #5
 8003fc2:	69fb      	ldr	r3, [r7, #28]
 8003fc4:	4413      	add	r3, r2
 8003fc6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003fce:	0151      	lsls	r1, r2, #5
 8003fd0:	69fa      	ldr	r2, [r7, #28]
 8003fd2:	440a      	add	r2, r1
 8003fd4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003fd8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003fdc:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003fde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fe0:	015a      	lsls	r2, r3, #5
 8003fe2:	69fb      	ldr	r3, [r7, #28]
 8003fe4:	4413      	add	r3, r2
 8003fe6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003fee:	0151      	lsls	r1, r2, #5
 8003ff0:	69fa      	ldr	r2, [r7, #28]
 8003ff2:	440a      	add	r2, r1
 8003ff4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003ff8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003ffc:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003ffe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004000:	3301      	adds	r3, #1
 8004002:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	685b      	ldr	r3, [r3, #4]
 8004008:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800400a:	429a      	cmp	r2, r3
 800400c:	d3a3      	bcc.n	8003f56 <HAL_PCD_IRQHandler+0x478>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800400e:	69fb      	ldr	r3, [r7, #28]
 8004010:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004014:	69db      	ldr	r3, [r3, #28]
 8004016:	69fa      	ldr	r2, [r7, #28]
 8004018:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800401c:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8004020:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004026:	2b00      	cmp	r3, #0
 8004028:	d016      	beq.n	8004058 <HAL_PCD_IRQHandler+0x57a>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800402a:	69fb      	ldr	r3, [r7, #28]
 800402c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004030:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004034:	69fa      	ldr	r2, [r7, #28]
 8004036:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800403a:	f043 030b 	orr.w	r3, r3, #11
 800403e:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8004042:	69fb      	ldr	r3, [r7, #28]
 8004044:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004048:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800404a:	69fa      	ldr	r2, [r7, #28]
 800404c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004050:	f043 030b 	orr.w	r3, r3, #11
 8004054:	6453      	str	r3, [r2, #68]	; 0x44
 8004056:	e015      	b.n	8004084 <HAL_PCD_IRQHandler+0x5a6>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8004058:	69fb      	ldr	r3, [r7, #28]
 800405a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800405e:	695b      	ldr	r3, [r3, #20]
 8004060:	69fa      	ldr	r2, [r7, #28]
 8004062:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004066:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800406a:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800406e:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8004070:	69fb      	ldr	r3, [r7, #28]
 8004072:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004076:	691b      	ldr	r3, [r3, #16]
 8004078:	69fa      	ldr	r2, [r7, #28]
 800407a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800407e:	f043 030b 	orr.w	r3, r3, #11
 8004082:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8004084:	69fb      	ldr	r3, [r7, #28]
 8004086:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	69fa      	ldr	r2, [r7, #28]
 800408e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004092:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8004096:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	6818      	ldr	r0, [r3, #0]
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	691b      	ldr	r3, [r3, #16]
 80040a0:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80040a8:	461a      	mov	r2, r3
 80040aa:	f002 ff67 	bl	8006f7c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	695a      	ldr	r2, [r3, #20]
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80040bc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	4618      	mov	r0, r3
 80040c4:	f002 fe9d 	bl	8006e02 <USB_ReadInterrupts>
 80040c8:	4603      	mov	r3, r0
 80040ca:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80040ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80040d2:	d124      	bne.n	800411e <HAL_PCD_IRQHandler+0x640>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	4618      	mov	r0, r3
 80040da:	f002 ff2d 	bl	8006f38 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	4618      	mov	r0, r3
 80040e4:	f001 ffa6 	bl	8006034 <USB_GetDevSpeed>
 80040e8:	4603      	mov	r3, r0
 80040ea:	461a      	mov	r2, r3
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681c      	ldr	r4, [r3, #0]
 80040f4:	f001 f932 	bl	800535c <HAL_RCC_GetHCLKFreq>
 80040f8:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80040fe:	b2db      	uxtb	r3, r3
 8004100:	461a      	mov	r2, r3
 8004102:	4620      	mov	r0, r4
 8004104:	f001 fcc8 	bl	8005a98 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8004108:	6878      	ldr	r0, [r7, #4]
 800410a:	f004 fe1e 	bl	8008d4a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	695a      	ldr	r2, [r3, #20]
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800411c:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	4618      	mov	r0, r3
 8004124:	f002 fe6d 	bl	8006e02 <USB_ReadInterrupts>
 8004128:	4603      	mov	r3, r0
 800412a:	f003 0308 	and.w	r3, r3, #8
 800412e:	2b08      	cmp	r3, #8
 8004130:	d10a      	bne.n	8004148 <HAL_PCD_IRQHandler+0x66a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8004132:	6878      	ldr	r0, [r7, #4]
 8004134:	f004 fdfb 	bl	8008d2e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	695a      	ldr	r2, [r3, #20]
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f002 0208 	and.w	r2, r2, #8
 8004146:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	4618      	mov	r0, r3
 800414e:	f002 fe58 	bl	8006e02 <USB_ReadInterrupts>
 8004152:	4603      	mov	r3, r0
 8004154:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004158:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800415c:	d10f      	bne.n	800417e <HAL_PCD_IRQHandler+0x6a0>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800415e:	2300      	movs	r3, #0
 8004160:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8004162:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004164:	b2db      	uxtb	r3, r3
 8004166:	4619      	mov	r1, r3
 8004168:	6878      	ldr	r0, [r7, #4]
 800416a:	f004 fe5d 	bl	8008e28 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	695a      	ldr	r2, [r3, #20]
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800417c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	4618      	mov	r0, r3
 8004184:	f002 fe3d 	bl	8006e02 <USB_ReadInterrupts>
 8004188:	4603      	mov	r3, r0
 800418a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800418e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004192:	d10f      	bne.n	80041b4 <HAL_PCD_IRQHandler+0x6d6>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8004194:	2300      	movs	r3, #0
 8004196:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8004198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800419a:	b2db      	uxtb	r3, r3
 800419c:	4619      	mov	r1, r3
 800419e:	6878      	ldr	r0, [r7, #4]
 80041a0:	f004 fe30 	bl	8008e04 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	695a      	ldr	r2, [r3, #20]
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80041b2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	4618      	mov	r0, r3
 80041ba:	f002 fe22 	bl	8006e02 <USB_ReadInterrupts>
 80041be:	4603      	mov	r3, r0
 80041c0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80041c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041c8:	d10a      	bne.n	80041e0 <HAL_PCD_IRQHandler+0x702>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80041ca:	6878      	ldr	r0, [r7, #4]
 80041cc:	f004 fe3e 	bl	8008e4c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	695a      	ldr	r2, [r3, #20]
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80041de:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	4618      	mov	r0, r3
 80041e6:	f002 fe0c 	bl	8006e02 <USB_ReadInterrupts>
 80041ea:	4603      	mov	r3, r0
 80041ec:	f003 0304 	and.w	r3, r3, #4
 80041f0:	2b04      	cmp	r3, #4
 80041f2:	d115      	bne.n	8004220 <HAL_PCD_IRQHandler+0x742>
    {
      temp = hpcd->Instance->GOTGINT;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	685b      	ldr	r3, [r3, #4]
 80041fa:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80041fc:	69bb      	ldr	r3, [r7, #24]
 80041fe:	f003 0304 	and.w	r3, r3, #4
 8004202:	2b00      	cmp	r3, #0
 8004204:	d002      	beq.n	800420c <HAL_PCD_IRQHandler+0x72e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8004206:	6878      	ldr	r0, [r7, #4]
 8004208:	f004 fe2e 	bl	8008e68 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	6859      	ldr	r1, [r3, #4]
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	69ba      	ldr	r2, [r7, #24]
 8004218:	430a      	orrs	r2, r1
 800421a:	605a      	str	r2, [r3, #4]
 800421c:	e000      	b.n	8004220 <HAL_PCD_IRQHandler+0x742>
      return;
 800421e:	bf00      	nop
    }
  }
}
 8004220:	3734      	adds	r7, #52	; 0x34
 8004222:	46bd      	mov	sp, r7
 8004224:	bd90      	pop	{r4, r7, pc}

08004226 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8004226:	b580      	push	{r7, lr}
 8004228:	b082      	sub	sp, #8
 800422a:	af00      	add	r7, sp, #0
 800422c:	6078      	str	r0, [r7, #4]
 800422e:	460b      	mov	r3, r1
 8004230:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004238:	2b01      	cmp	r3, #1
 800423a:	d101      	bne.n	8004240 <HAL_PCD_SetAddress+0x1a>
 800423c:	2302      	movs	r3, #2
 800423e:	e013      	b.n	8004268 <HAL_PCD_SetAddress+0x42>
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	2201      	movs	r2, #1
 8004244:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	78fa      	ldrb	r2, [r7, #3]
 800424c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	78fa      	ldrb	r2, [r7, #3]
 8004256:	4611      	mov	r1, r2
 8004258:	4618      	mov	r0, r3
 800425a:	f002 fd6d 	bl	8006d38 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	2200      	movs	r2, #0
 8004262:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8004266:	2300      	movs	r3, #0
}
 8004268:	4618      	mov	r0, r3
 800426a:	3708      	adds	r7, #8
 800426c:	46bd      	mov	sp, r7
 800426e:	bd80      	pop	{r7, pc}

08004270 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8004270:	b580      	push	{r7, lr}
 8004272:	b084      	sub	sp, #16
 8004274:	af00      	add	r7, sp, #0
 8004276:	6078      	str	r0, [r7, #4]
 8004278:	4608      	mov	r0, r1
 800427a:	4611      	mov	r1, r2
 800427c:	461a      	mov	r2, r3
 800427e:	4603      	mov	r3, r0
 8004280:	70fb      	strb	r3, [r7, #3]
 8004282:	460b      	mov	r3, r1
 8004284:	803b      	strh	r3, [r7, #0]
 8004286:	4613      	mov	r3, r2
 8004288:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800428a:	2300      	movs	r3, #0
 800428c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800428e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004292:	2b00      	cmp	r3, #0
 8004294:	da0f      	bge.n	80042b6 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004296:	78fb      	ldrb	r3, [r7, #3]
 8004298:	f003 020f 	and.w	r2, r3, #15
 800429c:	4613      	mov	r3, r2
 800429e:	00db      	lsls	r3, r3, #3
 80042a0:	1a9b      	subs	r3, r3, r2
 80042a2:	009b      	lsls	r3, r3, #2
 80042a4:	3338      	adds	r3, #56	; 0x38
 80042a6:	687a      	ldr	r2, [r7, #4]
 80042a8:	4413      	add	r3, r2
 80042aa:	3304      	adds	r3, #4
 80042ac:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	2201      	movs	r2, #1
 80042b2:	705a      	strb	r2, [r3, #1]
 80042b4:	e00f      	b.n	80042d6 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80042b6:	78fb      	ldrb	r3, [r7, #3]
 80042b8:	f003 020f 	and.w	r2, r3, #15
 80042bc:	4613      	mov	r3, r2
 80042be:	00db      	lsls	r3, r3, #3
 80042c0:	1a9b      	subs	r3, r3, r2
 80042c2:	009b      	lsls	r3, r3, #2
 80042c4:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80042c8:	687a      	ldr	r2, [r7, #4]
 80042ca:	4413      	add	r3, r2
 80042cc:	3304      	adds	r3, #4
 80042ce:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	2200      	movs	r2, #0
 80042d4:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80042d6:	78fb      	ldrb	r3, [r7, #3]
 80042d8:	f003 030f 	and.w	r3, r3, #15
 80042dc:	b2da      	uxtb	r2, r3
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80042e2:	883a      	ldrh	r2, [r7, #0]
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	78ba      	ldrb	r2, [r7, #2]
 80042ec:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	785b      	ldrb	r3, [r3, #1]
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d004      	beq.n	8004300 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	781b      	ldrb	r3, [r3, #0]
 80042fa:	b29a      	uxth	r2, r3
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8004300:	78bb      	ldrb	r3, [r7, #2]
 8004302:	2b02      	cmp	r3, #2
 8004304:	d102      	bne.n	800430c <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	2200      	movs	r2, #0
 800430a:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004312:	2b01      	cmp	r3, #1
 8004314:	d101      	bne.n	800431a <HAL_PCD_EP_Open+0xaa>
 8004316:	2302      	movs	r3, #2
 8004318:	e00e      	b.n	8004338 <HAL_PCD_EP_Open+0xc8>
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	2201      	movs	r2, #1
 800431e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	68f9      	ldr	r1, [r7, #12]
 8004328:	4618      	mov	r0, r3
 800432a:	f001 fea7 	bl	800607c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	2200      	movs	r2, #0
 8004332:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8004336:	7afb      	ldrb	r3, [r7, #11]
}
 8004338:	4618      	mov	r0, r3
 800433a:	3710      	adds	r7, #16
 800433c:	46bd      	mov	sp, r7
 800433e:	bd80      	pop	{r7, pc}

08004340 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004340:	b580      	push	{r7, lr}
 8004342:	b084      	sub	sp, #16
 8004344:	af00      	add	r7, sp, #0
 8004346:	6078      	str	r0, [r7, #4]
 8004348:	460b      	mov	r3, r1
 800434a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800434c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004350:	2b00      	cmp	r3, #0
 8004352:	da0f      	bge.n	8004374 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004354:	78fb      	ldrb	r3, [r7, #3]
 8004356:	f003 020f 	and.w	r2, r3, #15
 800435a:	4613      	mov	r3, r2
 800435c:	00db      	lsls	r3, r3, #3
 800435e:	1a9b      	subs	r3, r3, r2
 8004360:	009b      	lsls	r3, r3, #2
 8004362:	3338      	adds	r3, #56	; 0x38
 8004364:	687a      	ldr	r2, [r7, #4]
 8004366:	4413      	add	r3, r2
 8004368:	3304      	adds	r3, #4
 800436a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	2201      	movs	r2, #1
 8004370:	705a      	strb	r2, [r3, #1]
 8004372:	e00f      	b.n	8004394 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004374:	78fb      	ldrb	r3, [r7, #3]
 8004376:	f003 020f 	and.w	r2, r3, #15
 800437a:	4613      	mov	r3, r2
 800437c:	00db      	lsls	r3, r3, #3
 800437e:	1a9b      	subs	r3, r3, r2
 8004380:	009b      	lsls	r3, r3, #2
 8004382:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004386:	687a      	ldr	r2, [r7, #4]
 8004388:	4413      	add	r3, r2
 800438a:	3304      	adds	r3, #4
 800438c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	2200      	movs	r2, #0
 8004392:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8004394:	78fb      	ldrb	r3, [r7, #3]
 8004396:	f003 030f 	and.w	r3, r3, #15
 800439a:	b2da      	uxtb	r2, r3
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80043a6:	2b01      	cmp	r3, #1
 80043a8:	d101      	bne.n	80043ae <HAL_PCD_EP_Close+0x6e>
 80043aa:	2302      	movs	r3, #2
 80043ac:	e00e      	b.n	80043cc <HAL_PCD_EP_Close+0x8c>
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	2201      	movs	r2, #1
 80043b2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	68f9      	ldr	r1, [r7, #12]
 80043bc:	4618      	mov	r0, r3
 80043be:	f001 fee3 	bl	8006188 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	2200      	movs	r2, #0
 80043c6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 80043ca:	2300      	movs	r3, #0
}
 80043cc:	4618      	mov	r0, r3
 80043ce:	3710      	adds	r7, #16
 80043d0:	46bd      	mov	sp, r7
 80043d2:	bd80      	pop	{r7, pc}

080043d4 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80043d4:	b580      	push	{r7, lr}
 80043d6:	b086      	sub	sp, #24
 80043d8:	af00      	add	r7, sp, #0
 80043da:	60f8      	str	r0, [r7, #12]
 80043dc:	607a      	str	r2, [r7, #4]
 80043de:	603b      	str	r3, [r7, #0]
 80043e0:	460b      	mov	r3, r1
 80043e2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80043e4:	7afb      	ldrb	r3, [r7, #11]
 80043e6:	f003 020f 	and.w	r2, r3, #15
 80043ea:	4613      	mov	r3, r2
 80043ec:	00db      	lsls	r3, r3, #3
 80043ee:	1a9b      	subs	r3, r3, r2
 80043f0:	009b      	lsls	r3, r3, #2
 80043f2:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80043f6:	68fa      	ldr	r2, [r7, #12]
 80043f8:	4413      	add	r3, r2
 80043fa:	3304      	adds	r3, #4
 80043fc:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80043fe:	697b      	ldr	r3, [r7, #20]
 8004400:	687a      	ldr	r2, [r7, #4]
 8004402:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8004404:	697b      	ldr	r3, [r7, #20]
 8004406:	683a      	ldr	r2, [r7, #0]
 8004408:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800440a:	697b      	ldr	r3, [r7, #20]
 800440c:	2200      	movs	r2, #0
 800440e:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8004410:	697b      	ldr	r3, [r7, #20]
 8004412:	2200      	movs	r2, #0
 8004414:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004416:	7afb      	ldrb	r3, [r7, #11]
 8004418:	f003 030f 	and.w	r3, r3, #15
 800441c:	b2da      	uxtb	r2, r3
 800441e:	697b      	ldr	r3, [r7, #20]
 8004420:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	691b      	ldr	r3, [r3, #16]
 8004426:	2b01      	cmp	r3, #1
 8004428:	d102      	bne.n	8004430 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800442a:	687a      	ldr	r2, [r7, #4]
 800442c:	697b      	ldr	r3, [r7, #20]
 800442e:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004430:	7afb      	ldrb	r3, [r7, #11]
 8004432:	f003 030f 	and.w	r3, r3, #15
 8004436:	2b00      	cmp	r3, #0
 8004438:	d109      	bne.n	800444e <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	6818      	ldr	r0, [r3, #0]
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	691b      	ldr	r3, [r3, #16]
 8004442:	b2db      	uxtb	r3, r3
 8004444:	461a      	mov	r2, r3
 8004446:	6979      	ldr	r1, [r7, #20]
 8004448:	f002 f9be 	bl	80067c8 <USB_EP0StartXfer>
 800444c:	e008      	b.n	8004460 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	6818      	ldr	r0, [r3, #0]
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	691b      	ldr	r3, [r3, #16]
 8004456:	b2db      	uxtb	r3, r3
 8004458:	461a      	mov	r2, r3
 800445a:	6979      	ldr	r1, [r7, #20]
 800445c:	f001 ff70 	bl	8006340 <USB_EPStartXfer>
  }

  return HAL_OK;
 8004460:	2300      	movs	r3, #0
}
 8004462:	4618      	mov	r0, r3
 8004464:	3718      	adds	r7, #24
 8004466:	46bd      	mov	sp, r7
 8004468:	bd80      	pop	{r7, pc}

0800446a <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800446a:	b480      	push	{r7}
 800446c:	b083      	sub	sp, #12
 800446e:	af00      	add	r7, sp, #0
 8004470:	6078      	str	r0, [r7, #4]
 8004472:	460b      	mov	r3, r1
 8004474:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8004476:	78fb      	ldrb	r3, [r7, #3]
 8004478:	f003 020f 	and.w	r2, r3, #15
 800447c:	6879      	ldr	r1, [r7, #4]
 800447e:	4613      	mov	r3, r2
 8004480:	00db      	lsls	r3, r3, #3
 8004482:	1a9b      	subs	r3, r3, r2
 8004484:	009b      	lsls	r3, r3, #2
 8004486:	440b      	add	r3, r1
 8004488:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800448c:	681b      	ldr	r3, [r3, #0]
}
 800448e:	4618      	mov	r0, r3
 8004490:	370c      	adds	r7, #12
 8004492:	46bd      	mov	sp, r7
 8004494:	bc80      	pop	{r7}
 8004496:	4770      	bx	lr

08004498 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004498:	b580      	push	{r7, lr}
 800449a:	b086      	sub	sp, #24
 800449c:	af00      	add	r7, sp, #0
 800449e:	60f8      	str	r0, [r7, #12]
 80044a0:	607a      	str	r2, [r7, #4]
 80044a2:	603b      	str	r3, [r7, #0]
 80044a4:	460b      	mov	r3, r1
 80044a6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80044a8:	7afb      	ldrb	r3, [r7, #11]
 80044aa:	f003 020f 	and.w	r2, r3, #15
 80044ae:	4613      	mov	r3, r2
 80044b0:	00db      	lsls	r3, r3, #3
 80044b2:	1a9b      	subs	r3, r3, r2
 80044b4:	009b      	lsls	r3, r3, #2
 80044b6:	3338      	adds	r3, #56	; 0x38
 80044b8:	68fa      	ldr	r2, [r7, #12]
 80044ba:	4413      	add	r3, r2
 80044bc:	3304      	adds	r3, #4
 80044be:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80044c0:	697b      	ldr	r3, [r7, #20]
 80044c2:	687a      	ldr	r2, [r7, #4]
 80044c4:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80044c6:	697b      	ldr	r3, [r7, #20]
 80044c8:	683a      	ldr	r2, [r7, #0]
 80044ca:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80044cc:	697b      	ldr	r3, [r7, #20]
 80044ce:	2200      	movs	r2, #0
 80044d0:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 80044d2:	697b      	ldr	r3, [r7, #20]
 80044d4:	2201      	movs	r2, #1
 80044d6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80044d8:	7afb      	ldrb	r3, [r7, #11]
 80044da:	f003 030f 	and.w	r3, r3, #15
 80044de:	b2da      	uxtb	r2, r3
 80044e0:	697b      	ldr	r3, [r7, #20]
 80044e2:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	691b      	ldr	r3, [r3, #16]
 80044e8:	2b01      	cmp	r3, #1
 80044ea:	d102      	bne.n	80044f2 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80044ec:	687a      	ldr	r2, [r7, #4]
 80044ee:	697b      	ldr	r3, [r7, #20]
 80044f0:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80044f2:	7afb      	ldrb	r3, [r7, #11]
 80044f4:	f003 030f 	and.w	r3, r3, #15
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d109      	bne.n	8004510 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	6818      	ldr	r0, [r3, #0]
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	691b      	ldr	r3, [r3, #16]
 8004504:	b2db      	uxtb	r3, r3
 8004506:	461a      	mov	r2, r3
 8004508:	6979      	ldr	r1, [r7, #20]
 800450a:	f002 f95d 	bl	80067c8 <USB_EP0StartXfer>
 800450e:	e008      	b.n	8004522 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	6818      	ldr	r0, [r3, #0]
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	691b      	ldr	r3, [r3, #16]
 8004518:	b2db      	uxtb	r3, r3
 800451a:	461a      	mov	r2, r3
 800451c:	6979      	ldr	r1, [r7, #20]
 800451e:	f001 ff0f 	bl	8006340 <USB_EPStartXfer>
  }

  return HAL_OK;
 8004522:	2300      	movs	r3, #0
}
 8004524:	4618      	mov	r0, r3
 8004526:	3718      	adds	r7, #24
 8004528:	46bd      	mov	sp, r7
 800452a:	bd80      	pop	{r7, pc}

0800452c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800452c:	b580      	push	{r7, lr}
 800452e:	b084      	sub	sp, #16
 8004530:	af00      	add	r7, sp, #0
 8004532:	6078      	str	r0, [r7, #4]
 8004534:	460b      	mov	r3, r1
 8004536:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004538:	78fb      	ldrb	r3, [r7, #3]
 800453a:	f003 020f 	and.w	r2, r3, #15
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	685b      	ldr	r3, [r3, #4]
 8004542:	429a      	cmp	r2, r3
 8004544:	d901      	bls.n	800454a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8004546:	2301      	movs	r3, #1
 8004548:	e050      	b.n	80045ec <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800454a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800454e:	2b00      	cmp	r3, #0
 8004550:	da0f      	bge.n	8004572 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004552:	78fb      	ldrb	r3, [r7, #3]
 8004554:	f003 020f 	and.w	r2, r3, #15
 8004558:	4613      	mov	r3, r2
 800455a:	00db      	lsls	r3, r3, #3
 800455c:	1a9b      	subs	r3, r3, r2
 800455e:	009b      	lsls	r3, r3, #2
 8004560:	3338      	adds	r3, #56	; 0x38
 8004562:	687a      	ldr	r2, [r7, #4]
 8004564:	4413      	add	r3, r2
 8004566:	3304      	adds	r3, #4
 8004568:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	2201      	movs	r2, #1
 800456e:	705a      	strb	r2, [r3, #1]
 8004570:	e00d      	b.n	800458e <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004572:	78fa      	ldrb	r2, [r7, #3]
 8004574:	4613      	mov	r3, r2
 8004576:	00db      	lsls	r3, r3, #3
 8004578:	1a9b      	subs	r3, r3, r2
 800457a:	009b      	lsls	r3, r3, #2
 800457c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004580:	687a      	ldr	r2, [r7, #4]
 8004582:	4413      	add	r3, r2
 8004584:	3304      	adds	r3, #4
 8004586:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	2200      	movs	r2, #0
 800458c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	2201      	movs	r2, #1
 8004592:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004594:	78fb      	ldrb	r3, [r7, #3]
 8004596:	f003 030f 	and.w	r3, r3, #15
 800459a:	b2da      	uxtb	r2, r3
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80045a6:	2b01      	cmp	r3, #1
 80045a8:	d101      	bne.n	80045ae <HAL_PCD_EP_SetStall+0x82>
 80045aa:	2302      	movs	r3, #2
 80045ac:	e01e      	b.n	80045ec <HAL_PCD_EP_SetStall+0xc0>
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	2201      	movs	r2, #1
 80045b2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	68f9      	ldr	r1, [r7, #12]
 80045bc:	4618      	mov	r0, r3
 80045be:	f002 fae9 	bl	8006b94 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80045c2:	78fb      	ldrb	r3, [r7, #3]
 80045c4:	f003 030f 	and.w	r3, r3, #15
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d10a      	bne.n	80045e2 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	6818      	ldr	r0, [r3, #0]
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	691b      	ldr	r3, [r3, #16]
 80045d4:	b2d9      	uxtb	r1, r3
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80045dc:	461a      	mov	r2, r3
 80045de:	f002 fccd 	bl	8006f7c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	2200      	movs	r2, #0
 80045e6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80045ea:	2300      	movs	r3, #0
}
 80045ec:	4618      	mov	r0, r3
 80045ee:	3710      	adds	r7, #16
 80045f0:	46bd      	mov	sp, r7
 80045f2:	bd80      	pop	{r7, pc}

080045f4 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80045f4:	b580      	push	{r7, lr}
 80045f6:	b084      	sub	sp, #16
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	6078      	str	r0, [r7, #4]
 80045fc:	460b      	mov	r3, r1
 80045fe:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004600:	78fb      	ldrb	r3, [r7, #3]
 8004602:	f003 020f 	and.w	r2, r3, #15
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	685b      	ldr	r3, [r3, #4]
 800460a:	429a      	cmp	r2, r3
 800460c:	d901      	bls.n	8004612 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800460e:	2301      	movs	r3, #1
 8004610:	e042      	b.n	8004698 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004612:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004616:	2b00      	cmp	r3, #0
 8004618:	da0f      	bge.n	800463a <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800461a:	78fb      	ldrb	r3, [r7, #3]
 800461c:	f003 020f 	and.w	r2, r3, #15
 8004620:	4613      	mov	r3, r2
 8004622:	00db      	lsls	r3, r3, #3
 8004624:	1a9b      	subs	r3, r3, r2
 8004626:	009b      	lsls	r3, r3, #2
 8004628:	3338      	adds	r3, #56	; 0x38
 800462a:	687a      	ldr	r2, [r7, #4]
 800462c:	4413      	add	r3, r2
 800462e:	3304      	adds	r3, #4
 8004630:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	2201      	movs	r2, #1
 8004636:	705a      	strb	r2, [r3, #1]
 8004638:	e00f      	b.n	800465a <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800463a:	78fb      	ldrb	r3, [r7, #3]
 800463c:	f003 020f 	and.w	r2, r3, #15
 8004640:	4613      	mov	r3, r2
 8004642:	00db      	lsls	r3, r3, #3
 8004644:	1a9b      	subs	r3, r3, r2
 8004646:	009b      	lsls	r3, r3, #2
 8004648:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800464c:	687a      	ldr	r2, [r7, #4]
 800464e:	4413      	add	r3, r2
 8004650:	3304      	adds	r3, #4
 8004652:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	2200      	movs	r2, #0
 8004658:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	2200      	movs	r2, #0
 800465e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004660:	78fb      	ldrb	r3, [r7, #3]
 8004662:	f003 030f 	and.w	r3, r3, #15
 8004666:	b2da      	uxtb	r2, r3
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004672:	2b01      	cmp	r3, #1
 8004674:	d101      	bne.n	800467a <HAL_PCD_EP_ClrStall+0x86>
 8004676:	2302      	movs	r3, #2
 8004678:	e00e      	b.n	8004698 <HAL_PCD_EP_ClrStall+0xa4>
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	2201      	movs	r2, #1
 800467e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	68f9      	ldr	r1, [r7, #12]
 8004688:	4618      	mov	r0, r3
 800468a:	f002 faf0 	bl	8006c6e <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	2200      	movs	r2, #0
 8004692:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8004696:	2300      	movs	r3, #0
}
 8004698:	4618      	mov	r0, r3
 800469a:	3710      	adds	r7, #16
 800469c:	46bd      	mov	sp, r7
 800469e:	bd80      	pop	{r7, pc}

080046a0 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80046a0:	b580      	push	{r7, lr}
 80046a2:	b08a      	sub	sp, #40	; 0x28
 80046a4:	af02      	add	r7, sp, #8
 80046a6:	6078      	str	r0, [r7, #4]
 80046a8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80046b0:	697b      	ldr	r3, [r7, #20]
 80046b2:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80046b4:	683a      	ldr	r2, [r7, #0]
 80046b6:	4613      	mov	r3, r2
 80046b8:	00db      	lsls	r3, r3, #3
 80046ba:	1a9b      	subs	r3, r3, r2
 80046bc:	009b      	lsls	r3, r3, #2
 80046be:	3338      	adds	r3, #56	; 0x38
 80046c0:	687a      	ldr	r2, [r7, #4]
 80046c2:	4413      	add	r3, r2
 80046c4:	3304      	adds	r3, #4
 80046c6:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	699a      	ldr	r2, [r3, #24]
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	695b      	ldr	r3, [r3, #20]
 80046d0:	429a      	cmp	r2, r3
 80046d2:	d901      	bls.n	80046d8 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80046d4:	2301      	movs	r3, #1
 80046d6:	e06c      	b.n	80047b2 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	695a      	ldr	r2, [r3, #20]
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	699b      	ldr	r3, [r3, #24]
 80046e0:	1ad3      	subs	r3, r2, r3
 80046e2:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	689b      	ldr	r3, [r3, #8]
 80046e8:	69fa      	ldr	r2, [r7, #28]
 80046ea:	429a      	cmp	r2, r3
 80046ec:	d902      	bls.n	80046f4 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	689b      	ldr	r3, [r3, #8]
 80046f2:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80046f4:	69fb      	ldr	r3, [r7, #28]
 80046f6:	3303      	adds	r3, #3
 80046f8:	089b      	lsrs	r3, r3, #2
 80046fa:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80046fc:	e02b      	b.n	8004756 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	695a      	ldr	r2, [r3, #20]
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	699b      	ldr	r3, [r3, #24]
 8004706:	1ad3      	subs	r3, r2, r3
 8004708:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	689b      	ldr	r3, [r3, #8]
 800470e:	69fa      	ldr	r2, [r7, #28]
 8004710:	429a      	cmp	r2, r3
 8004712:	d902      	bls.n	800471a <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	689b      	ldr	r3, [r3, #8]
 8004718:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800471a:	69fb      	ldr	r3, [r7, #28]
 800471c:	3303      	adds	r3, #3
 800471e:	089b      	lsrs	r3, r3, #2
 8004720:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	68d9      	ldr	r1, [r3, #12]
 8004726:	683b      	ldr	r3, [r7, #0]
 8004728:	b2da      	uxtb	r2, r3
 800472a:	69fb      	ldr	r3, [r7, #28]
 800472c:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004732:	b2db      	uxtb	r3, r3
 8004734:	9300      	str	r3, [sp, #0]
 8004736:	4603      	mov	r3, r0
 8004738:	6978      	ldr	r0, [r7, #20]
 800473a:	f002 f997 	bl	8006a6c <USB_WritePacket>

    ep->xfer_buff  += len;
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	68da      	ldr	r2, [r3, #12]
 8004742:	69fb      	ldr	r3, [r7, #28]
 8004744:	441a      	add	r2, r3
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	699a      	ldr	r2, [r3, #24]
 800474e:	69fb      	ldr	r3, [r7, #28]
 8004750:	441a      	add	r2, r3
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004756:	683b      	ldr	r3, [r7, #0]
 8004758:	015a      	lsls	r2, r3, #5
 800475a:	693b      	ldr	r3, [r7, #16]
 800475c:	4413      	add	r3, r2
 800475e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004762:	699b      	ldr	r3, [r3, #24]
 8004764:	b29b      	uxth	r3, r3
 8004766:	69ba      	ldr	r2, [r7, #24]
 8004768:	429a      	cmp	r2, r3
 800476a:	d809      	bhi.n	8004780 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	699a      	ldr	r2, [r3, #24]
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004774:	429a      	cmp	r2, r3
 8004776:	d203      	bcs.n	8004780 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	695b      	ldr	r3, [r3, #20]
 800477c:	2b00      	cmp	r3, #0
 800477e:	d1be      	bne.n	80046fe <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	695a      	ldr	r2, [r3, #20]
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	699b      	ldr	r3, [r3, #24]
 8004788:	429a      	cmp	r2, r3
 800478a:	d811      	bhi.n	80047b0 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800478c:	683b      	ldr	r3, [r7, #0]
 800478e:	f003 030f 	and.w	r3, r3, #15
 8004792:	2201      	movs	r2, #1
 8004794:	fa02 f303 	lsl.w	r3, r2, r3
 8004798:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800479a:	693b      	ldr	r3, [r7, #16]
 800479c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80047a0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80047a2:	68bb      	ldr	r3, [r7, #8]
 80047a4:	43db      	mvns	r3, r3
 80047a6:	6939      	ldr	r1, [r7, #16]
 80047a8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80047ac:	4013      	ands	r3, r2
 80047ae:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80047b0:	2300      	movs	r3, #0
}
 80047b2:	4618      	mov	r0, r3
 80047b4:	3720      	adds	r7, #32
 80047b6:	46bd      	mov	sp, r7
 80047b8:	bd80      	pop	{r7, pc}
	...

080047bc <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80047bc:	b580      	push	{r7, lr}
 80047be:	b086      	sub	sp, #24
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	6078      	str	r0, [r7, #4]
 80047c4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80047cc:	697b      	ldr	r3, [r7, #20]
 80047ce:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80047d0:	697b      	ldr	r3, [r7, #20]
 80047d2:	333c      	adds	r3, #60	; 0x3c
 80047d4:	3304      	adds	r3, #4
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80047da:	683b      	ldr	r3, [r7, #0]
 80047dc:	015a      	lsls	r2, r3, #5
 80047de:	693b      	ldr	r3, [r7, #16]
 80047e0:	4413      	add	r3, r2
 80047e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047e6:	689b      	ldr	r3, [r3, #8]
 80047e8:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	691b      	ldr	r3, [r3, #16]
 80047ee:	2b01      	cmp	r3, #1
 80047f0:	f040 80a0 	bne.w	8004934 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80047f4:	68bb      	ldr	r3, [r7, #8]
 80047f6:	f003 0308 	and.w	r3, r3, #8
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d015      	beq.n	800482a <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	4a72      	ldr	r2, [pc, #456]	; (80049cc <PCD_EP_OutXfrComplete_int+0x210>)
 8004802:	4293      	cmp	r3, r2
 8004804:	f240 80dd 	bls.w	80049c2 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004808:	68bb      	ldr	r3, [r7, #8]
 800480a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800480e:	2b00      	cmp	r3, #0
 8004810:	f000 80d7 	beq.w	80049c2 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004814:	683b      	ldr	r3, [r7, #0]
 8004816:	015a      	lsls	r2, r3, #5
 8004818:	693b      	ldr	r3, [r7, #16]
 800481a:	4413      	add	r3, r2
 800481c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004820:	461a      	mov	r2, r3
 8004822:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004826:	6093      	str	r3, [r2, #8]
 8004828:	e0cb      	b.n	80049c2 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800482a:	68bb      	ldr	r3, [r7, #8]
 800482c:	f003 0320 	and.w	r3, r3, #32
 8004830:	2b00      	cmp	r3, #0
 8004832:	d009      	beq.n	8004848 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004834:	683b      	ldr	r3, [r7, #0]
 8004836:	015a      	lsls	r2, r3, #5
 8004838:	693b      	ldr	r3, [r7, #16]
 800483a:	4413      	add	r3, r2
 800483c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004840:	461a      	mov	r2, r3
 8004842:	2320      	movs	r3, #32
 8004844:	6093      	str	r3, [r2, #8]
 8004846:	e0bc      	b.n	80049c2 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8004848:	68bb      	ldr	r3, [r7, #8]
 800484a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800484e:	2b00      	cmp	r3, #0
 8004850:	f040 80b7 	bne.w	80049c2 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	4a5d      	ldr	r2, [pc, #372]	; (80049cc <PCD_EP_OutXfrComplete_int+0x210>)
 8004858:	4293      	cmp	r3, r2
 800485a:	d90f      	bls.n	800487c <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800485c:	68bb      	ldr	r3, [r7, #8]
 800485e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004862:	2b00      	cmp	r3, #0
 8004864:	d00a      	beq.n	800487c <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004866:	683b      	ldr	r3, [r7, #0]
 8004868:	015a      	lsls	r2, r3, #5
 800486a:	693b      	ldr	r3, [r7, #16]
 800486c:	4413      	add	r3, r2
 800486e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004872:	461a      	mov	r2, r3
 8004874:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004878:	6093      	str	r3, [r2, #8]
 800487a:	e0a2      	b.n	80049c2 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 800487c:	6879      	ldr	r1, [r7, #4]
 800487e:	683a      	ldr	r2, [r7, #0]
 8004880:	4613      	mov	r3, r2
 8004882:	00db      	lsls	r3, r3, #3
 8004884:	1a9b      	subs	r3, r3, r2
 8004886:	009b      	lsls	r3, r3, #2
 8004888:	440b      	add	r3, r1
 800488a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800488e:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8004890:	683b      	ldr	r3, [r7, #0]
 8004892:	0159      	lsls	r1, r3, #5
 8004894:	693b      	ldr	r3, [r7, #16]
 8004896:	440b      	add	r3, r1
 8004898:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800489c:	691b      	ldr	r3, [r3, #16]
 800489e:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 80048a2:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 80048a4:	6878      	ldr	r0, [r7, #4]
 80048a6:	683a      	ldr	r2, [r7, #0]
 80048a8:	4613      	mov	r3, r2
 80048aa:	00db      	lsls	r3, r3, #3
 80048ac:	1a9b      	subs	r3, r3, r2
 80048ae:	009b      	lsls	r3, r3, #2
 80048b0:	4403      	add	r3, r0
 80048b2:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80048b6:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 80048b8:	6879      	ldr	r1, [r7, #4]
 80048ba:	683a      	ldr	r2, [r7, #0]
 80048bc:	4613      	mov	r3, r2
 80048be:	00db      	lsls	r3, r3, #3
 80048c0:	1a9b      	subs	r3, r3, r2
 80048c2:	009b      	lsls	r3, r3, #2
 80048c4:	440b      	add	r3, r1
 80048c6:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80048ca:	6819      	ldr	r1, [r3, #0]
 80048cc:	6878      	ldr	r0, [r7, #4]
 80048ce:	683a      	ldr	r2, [r7, #0]
 80048d0:	4613      	mov	r3, r2
 80048d2:	00db      	lsls	r3, r3, #3
 80048d4:	1a9b      	subs	r3, r3, r2
 80048d6:	009b      	lsls	r3, r3, #2
 80048d8:	4403      	add	r3, r0
 80048da:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	4419      	add	r1, r3
 80048e2:	6878      	ldr	r0, [r7, #4]
 80048e4:	683a      	ldr	r2, [r7, #0]
 80048e6:	4613      	mov	r3, r2
 80048e8:	00db      	lsls	r3, r3, #3
 80048ea:	1a9b      	subs	r3, r3, r2
 80048ec:	009b      	lsls	r3, r3, #2
 80048ee:	4403      	add	r3, r0
 80048f0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80048f4:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80048f6:	683b      	ldr	r3, [r7, #0]
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d114      	bne.n	8004926 <PCD_EP_OutXfrComplete_int+0x16a>
 80048fc:	6879      	ldr	r1, [r7, #4]
 80048fe:	683a      	ldr	r2, [r7, #0]
 8004900:	4613      	mov	r3, r2
 8004902:	00db      	lsls	r3, r3, #3
 8004904:	1a9b      	subs	r3, r3, r2
 8004906:	009b      	lsls	r3, r3, #2
 8004908:	440b      	add	r3, r1
 800490a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	2b00      	cmp	r3, #0
 8004912:	d108      	bne.n	8004926 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	6818      	ldr	r0, [r3, #0]
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800491e:	461a      	mov	r2, r3
 8004920:	2101      	movs	r1, #1
 8004922:	f002 fb2b 	bl	8006f7c <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004926:	683b      	ldr	r3, [r7, #0]
 8004928:	b2db      	uxtb	r3, r3
 800492a:	4619      	mov	r1, r3
 800492c:	6878      	ldr	r0, [r7, #4]
 800492e:	f004 f9c9 	bl	8008cc4 <HAL_PCD_DataOutStageCallback>
 8004932:	e046      	b.n	80049c2 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	4a26      	ldr	r2, [pc, #152]	; (80049d0 <PCD_EP_OutXfrComplete_int+0x214>)
 8004938:	4293      	cmp	r3, r2
 800493a:	d124      	bne.n	8004986 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800493c:	68bb      	ldr	r3, [r7, #8]
 800493e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004942:	2b00      	cmp	r3, #0
 8004944:	d00a      	beq.n	800495c <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004946:	683b      	ldr	r3, [r7, #0]
 8004948:	015a      	lsls	r2, r3, #5
 800494a:	693b      	ldr	r3, [r7, #16]
 800494c:	4413      	add	r3, r2
 800494e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004952:	461a      	mov	r2, r3
 8004954:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004958:	6093      	str	r3, [r2, #8]
 800495a:	e032      	b.n	80049c2 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800495c:	68bb      	ldr	r3, [r7, #8]
 800495e:	f003 0320 	and.w	r3, r3, #32
 8004962:	2b00      	cmp	r3, #0
 8004964:	d008      	beq.n	8004978 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004966:	683b      	ldr	r3, [r7, #0]
 8004968:	015a      	lsls	r2, r3, #5
 800496a:	693b      	ldr	r3, [r7, #16]
 800496c:	4413      	add	r3, r2
 800496e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004972:	461a      	mov	r2, r3
 8004974:	2320      	movs	r3, #32
 8004976:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004978:	683b      	ldr	r3, [r7, #0]
 800497a:	b2db      	uxtb	r3, r3
 800497c:	4619      	mov	r1, r3
 800497e:	6878      	ldr	r0, [r7, #4]
 8004980:	f004 f9a0 	bl	8008cc4 <HAL_PCD_DataOutStageCallback>
 8004984:	e01d      	b.n	80049c2 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8004986:	683b      	ldr	r3, [r7, #0]
 8004988:	2b00      	cmp	r3, #0
 800498a:	d114      	bne.n	80049b6 <PCD_EP_OutXfrComplete_int+0x1fa>
 800498c:	6879      	ldr	r1, [r7, #4]
 800498e:	683a      	ldr	r2, [r7, #0]
 8004990:	4613      	mov	r3, r2
 8004992:	00db      	lsls	r3, r3, #3
 8004994:	1a9b      	subs	r3, r3, r2
 8004996:	009b      	lsls	r3, r3, #2
 8004998:	440b      	add	r3, r1
 800499a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d108      	bne.n	80049b6 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	6818      	ldr	r0, [r3, #0]
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80049ae:	461a      	mov	r2, r3
 80049b0:	2100      	movs	r1, #0
 80049b2:	f002 fae3 	bl	8006f7c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80049b6:	683b      	ldr	r3, [r7, #0]
 80049b8:	b2db      	uxtb	r3, r3
 80049ba:	4619      	mov	r1, r3
 80049bc:	6878      	ldr	r0, [r7, #4]
 80049be:	f004 f981 	bl	8008cc4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80049c2:	2300      	movs	r3, #0
}
 80049c4:	4618      	mov	r0, r3
 80049c6:	3718      	adds	r7, #24
 80049c8:	46bd      	mov	sp, r7
 80049ca:	bd80      	pop	{r7, pc}
 80049cc:	4f54300a 	.word	0x4f54300a
 80049d0:	4f54310a 	.word	0x4f54310a

080049d4 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80049d4:	b580      	push	{r7, lr}
 80049d6:	b086      	sub	sp, #24
 80049d8:	af00      	add	r7, sp, #0
 80049da:	6078      	str	r0, [r7, #4]
 80049dc:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80049e4:	697b      	ldr	r3, [r7, #20]
 80049e6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80049e8:	697b      	ldr	r3, [r7, #20]
 80049ea:	333c      	adds	r3, #60	; 0x3c
 80049ec:	3304      	adds	r3, #4
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80049f2:	683b      	ldr	r3, [r7, #0]
 80049f4:	015a      	lsls	r2, r3, #5
 80049f6:	693b      	ldr	r3, [r7, #16]
 80049f8:	4413      	add	r3, r2
 80049fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049fe:	689b      	ldr	r3, [r3, #8]
 8004a00:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	4a15      	ldr	r2, [pc, #84]	; (8004a5c <PCD_EP_OutSetupPacket_int+0x88>)
 8004a06:	4293      	cmp	r3, r2
 8004a08:	d90e      	bls.n	8004a28 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004a0a:	68bb      	ldr	r3, [r7, #8]
 8004a0c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d009      	beq.n	8004a28 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004a14:	683b      	ldr	r3, [r7, #0]
 8004a16:	015a      	lsls	r2, r3, #5
 8004a18:	693b      	ldr	r3, [r7, #16]
 8004a1a:	4413      	add	r3, r2
 8004a1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a20:	461a      	mov	r2, r3
 8004a22:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004a26:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8004a28:	6878      	ldr	r0, [r7, #4]
 8004a2a:	f004 f939 	bl	8008ca0 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	4a0a      	ldr	r2, [pc, #40]	; (8004a5c <PCD_EP_OutSetupPacket_int+0x88>)
 8004a32:	4293      	cmp	r3, r2
 8004a34:	d90c      	bls.n	8004a50 <PCD_EP_OutSetupPacket_int+0x7c>
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	691b      	ldr	r3, [r3, #16]
 8004a3a:	2b01      	cmp	r3, #1
 8004a3c:	d108      	bne.n	8004a50 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	6818      	ldr	r0, [r3, #0]
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004a48:	461a      	mov	r2, r3
 8004a4a:	2101      	movs	r1, #1
 8004a4c:	f002 fa96 	bl	8006f7c <USB_EP0_OutStart>
  }

  return HAL_OK;
 8004a50:	2300      	movs	r3, #0
}
 8004a52:	4618      	mov	r0, r3
 8004a54:	3718      	adds	r7, #24
 8004a56:	46bd      	mov	sp, r7
 8004a58:	bd80      	pop	{r7, pc}
 8004a5a:	bf00      	nop
 8004a5c:	4f54300a 	.word	0x4f54300a

08004a60 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8004a60:	b480      	push	{r7}
 8004a62:	b085      	sub	sp, #20
 8004a64:	af00      	add	r7, sp, #0
 8004a66:	6078      	str	r0, [r7, #4]
 8004a68:	460b      	mov	r3, r1
 8004a6a:	70fb      	strb	r3, [r7, #3]
 8004a6c:	4613      	mov	r3, r2
 8004a6e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a76:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8004a78:	78fb      	ldrb	r3, [r7, #3]
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d107      	bne.n	8004a8e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8004a7e:	883b      	ldrh	r3, [r7, #0]
 8004a80:	0419      	lsls	r1, r3, #16
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	68ba      	ldr	r2, [r7, #8]
 8004a88:	430a      	orrs	r2, r1
 8004a8a:	629a      	str	r2, [r3, #40]	; 0x28
 8004a8c:	e028      	b.n	8004ae0 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a94:	0c1b      	lsrs	r3, r3, #16
 8004a96:	68ba      	ldr	r2, [r7, #8]
 8004a98:	4413      	add	r3, r2
 8004a9a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004a9c:	2300      	movs	r3, #0
 8004a9e:	73fb      	strb	r3, [r7, #15]
 8004aa0:	e00d      	b.n	8004abe <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681a      	ldr	r2, [r3, #0]
 8004aa6:	7bfb      	ldrb	r3, [r7, #15]
 8004aa8:	3340      	adds	r3, #64	; 0x40
 8004aaa:	009b      	lsls	r3, r3, #2
 8004aac:	4413      	add	r3, r2
 8004aae:	685b      	ldr	r3, [r3, #4]
 8004ab0:	0c1b      	lsrs	r3, r3, #16
 8004ab2:	68ba      	ldr	r2, [r7, #8]
 8004ab4:	4413      	add	r3, r2
 8004ab6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004ab8:	7bfb      	ldrb	r3, [r7, #15]
 8004aba:	3301      	adds	r3, #1
 8004abc:	73fb      	strb	r3, [r7, #15]
 8004abe:	7bfa      	ldrb	r2, [r7, #15]
 8004ac0:	78fb      	ldrb	r3, [r7, #3]
 8004ac2:	3b01      	subs	r3, #1
 8004ac4:	429a      	cmp	r2, r3
 8004ac6:	d3ec      	bcc.n	8004aa2 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8004ac8:	883b      	ldrh	r3, [r7, #0]
 8004aca:	0418      	lsls	r0, r3, #16
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	6819      	ldr	r1, [r3, #0]
 8004ad0:	78fb      	ldrb	r3, [r7, #3]
 8004ad2:	3b01      	subs	r3, #1
 8004ad4:	68ba      	ldr	r2, [r7, #8]
 8004ad6:	4302      	orrs	r2, r0
 8004ad8:	3340      	adds	r3, #64	; 0x40
 8004ada:	009b      	lsls	r3, r3, #2
 8004adc:	440b      	add	r3, r1
 8004ade:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8004ae0:	2300      	movs	r3, #0
}
 8004ae2:	4618      	mov	r0, r3
 8004ae4:	3714      	adds	r7, #20
 8004ae6:	46bd      	mov	sp, r7
 8004ae8:	bc80      	pop	{r7}
 8004aea:	4770      	bx	lr

08004aec <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8004aec:	b480      	push	{r7}
 8004aee:	b083      	sub	sp, #12
 8004af0:	af00      	add	r7, sp, #0
 8004af2:	6078      	str	r0, [r7, #4]
 8004af4:	460b      	mov	r3, r1
 8004af6:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	887a      	ldrh	r2, [r7, #2]
 8004afe:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8004b00:	2300      	movs	r3, #0
}
 8004b02:	4618      	mov	r0, r3
 8004b04:	370c      	adds	r7, #12
 8004b06:	46bd      	mov	sp, r7
 8004b08:	bc80      	pop	{r7}
 8004b0a:	4770      	bx	lr

08004b0c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004b0c:	b580      	push	{r7, lr}
 8004b0e:	b08a      	sub	sp, #40	; 0x28
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d101      	bne.n	8004b1e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004b1a:	2301      	movs	r3, #1
 8004b1c:	e237      	b.n	8004f8e <HAL_RCC_OscConfig+0x482>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	f003 0301 	and.w	r3, r3, #1
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d050      	beq.n	8004bcc <HAL_RCC_OscConfig+0xc0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004b2a:	4ba3      	ldr	r3, [pc, #652]	; (8004db8 <HAL_RCC_OscConfig+0x2ac>)
 8004b2c:	689b      	ldr	r3, [r3, #8]
 8004b2e:	f003 030c 	and.w	r3, r3, #12
 8004b32:	2b04      	cmp	r3, #4
 8004b34:	d00c      	beq.n	8004b50 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004b36:	4ba0      	ldr	r3, [pc, #640]	; (8004db8 <HAL_RCC_OscConfig+0x2ac>)
 8004b38:	689b      	ldr	r3, [r3, #8]
 8004b3a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004b3e:	2b08      	cmp	r3, #8
 8004b40:	d112      	bne.n	8004b68 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004b42:	4b9d      	ldr	r3, [pc, #628]	; (8004db8 <HAL_RCC_OscConfig+0x2ac>)
 8004b44:	685b      	ldr	r3, [r3, #4]
 8004b46:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004b4a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004b4e:	d10b      	bne.n	8004b68 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b50:	4b99      	ldr	r3, [pc, #612]	; (8004db8 <HAL_RCC_OscConfig+0x2ac>)
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d036      	beq.n	8004bca <HAL_RCC_OscConfig+0xbe>
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	685b      	ldr	r3, [r3, #4]
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d132      	bne.n	8004bca <HAL_RCC_OscConfig+0xbe>
      {
        return HAL_ERROR;
 8004b64:	2301      	movs	r3, #1
 8004b66:	e212      	b.n	8004f8e <HAL_RCC_OscConfig+0x482>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	685a      	ldr	r2, [r3, #4]
 8004b6c:	4b93      	ldr	r3, [pc, #588]	; (8004dbc <HAL_RCC_OscConfig+0x2b0>)
 8004b6e:	b2d2      	uxtb	r2, r2
 8004b70:	701a      	strb	r2, [r3, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	685b      	ldr	r3, [r3, #4]
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d013      	beq.n	8004ba2 <HAL_RCC_OscConfig+0x96>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b7a:	f7fd fbe9 	bl	8002350 <HAL_GetTick>
 8004b7e:	6238      	str	r0, [r7, #32]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b80:	e008      	b.n	8004b94 <HAL_RCC_OscConfig+0x88>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004b82:	f7fd fbe5 	bl	8002350 <HAL_GetTick>
 8004b86:	4602      	mov	r2, r0
 8004b88:	6a3b      	ldr	r3, [r7, #32]
 8004b8a:	1ad3      	subs	r3, r2, r3
 8004b8c:	2b64      	cmp	r3, #100	; 0x64
 8004b8e:	d901      	bls.n	8004b94 <HAL_RCC_OscConfig+0x88>
          {
            return HAL_TIMEOUT;
 8004b90:	2303      	movs	r3, #3
 8004b92:	e1fc      	b.n	8004f8e <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b94:	4b88      	ldr	r3, [pc, #544]	; (8004db8 <HAL_RCC_OscConfig+0x2ac>)
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d0f0      	beq.n	8004b82 <HAL_RCC_OscConfig+0x76>
 8004ba0:	e014      	b.n	8004bcc <HAL_RCC_OscConfig+0xc0>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ba2:	f7fd fbd5 	bl	8002350 <HAL_GetTick>
 8004ba6:	6238      	str	r0, [r7, #32]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004ba8:	e008      	b.n	8004bbc <HAL_RCC_OscConfig+0xb0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004baa:	f7fd fbd1 	bl	8002350 <HAL_GetTick>
 8004bae:	4602      	mov	r2, r0
 8004bb0:	6a3b      	ldr	r3, [r7, #32]
 8004bb2:	1ad3      	subs	r3, r2, r3
 8004bb4:	2b64      	cmp	r3, #100	; 0x64
 8004bb6:	d901      	bls.n	8004bbc <HAL_RCC_OscConfig+0xb0>
          {
            return HAL_TIMEOUT;
 8004bb8:	2303      	movs	r3, #3
 8004bba:	e1e8      	b.n	8004f8e <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004bbc:	4b7e      	ldr	r3, [pc, #504]	; (8004db8 <HAL_RCC_OscConfig+0x2ac>)
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d1f0      	bne.n	8004baa <HAL_RCC_OscConfig+0x9e>
 8004bc8:	e000      	b.n	8004bcc <HAL_RCC_OscConfig+0xc0>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004bca:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	f003 0302 	and.w	r3, r3, #2
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d077      	beq.n	8004cc8 <HAL_RCC_OscConfig+0x1bc>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004bd8:	4b77      	ldr	r3, [pc, #476]	; (8004db8 <HAL_RCC_OscConfig+0x2ac>)
 8004bda:	689b      	ldr	r3, [r3, #8]
 8004bdc:	f003 030c 	and.w	r3, r3, #12
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d00b      	beq.n	8004bfc <HAL_RCC_OscConfig+0xf0>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004be4:	4b74      	ldr	r3, [pc, #464]	; (8004db8 <HAL_RCC_OscConfig+0x2ac>)
 8004be6:	689b      	ldr	r3, [r3, #8]
 8004be8:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004bec:	2b08      	cmp	r3, #8
 8004bee:	d126      	bne.n	8004c3e <HAL_RCC_OscConfig+0x132>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004bf0:	4b71      	ldr	r3, [pc, #452]	; (8004db8 <HAL_RCC_OscConfig+0x2ac>)
 8004bf2:	685b      	ldr	r3, [r3, #4]
 8004bf4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d120      	bne.n	8004c3e <HAL_RCC_OscConfig+0x132>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004bfc:	4b6e      	ldr	r3, [pc, #440]	; (8004db8 <HAL_RCC_OscConfig+0x2ac>)
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	f003 0302 	and.w	r3, r3, #2
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d005      	beq.n	8004c14 <HAL_RCC_OscConfig+0x108>
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	68db      	ldr	r3, [r3, #12]
 8004c0c:	2b01      	cmp	r3, #1
 8004c0e:	d001      	beq.n	8004c14 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004c10:	2301      	movs	r3, #1
 8004c12:	e1bc      	b.n	8004f8e <HAL_RCC_OscConfig+0x482>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c14:	4b68      	ldr	r3, [pc, #416]	; (8004db8 <HAL_RCC_OscConfig+0x2ac>)
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	691b      	ldr	r3, [r3, #16]
 8004c20:	21f8      	movs	r1, #248	; 0xf8
 8004c22:	61b9      	str	r1, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c24:	69b9      	ldr	r1, [r7, #24]
 8004c26:	fa91 f1a1 	rbit	r1, r1
 8004c2a:	6179      	str	r1, [r7, #20]
  return result;
 8004c2c:	6979      	ldr	r1, [r7, #20]
 8004c2e:	fab1 f181 	clz	r1, r1
 8004c32:	b2c9      	uxtb	r1, r1
 8004c34:	408b      	lsls	r3, r1
 8004c36:	4960      	ldr	r1, [pc, #384]	; (8004db8 <HAL_RCC_OscConfig+0x2ac>)
 8004c38:	4313      	orrs	r3, r2
 8004c3a:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004c3c:	e044      	b.n	8004cc8 <HAL_RCC_OscConfig+0x1bc>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	68db      	ldr	r3, [r3, #12]
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d02a      	beq.n	8004c9c <HAL_RCC_OscConfig+0x190>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004c46:	4b5e      	ldr	r3, [pc, #376]	; (8004dc0 <HAL_RCC_OscConfig+0x2b4>)
 8004c48:	2201      	movs	r2, #1
 8004c4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c4c:	f7fd fb80 	bl	8002350 <HAL_GetTick>
 8004c50:	6238      	str	r0, [r7, #32]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c52:	e008      	b.n	8004c66 <HAL_RCC_OscConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004c54:	f7fd fb7c 	bl	8002350 <HAL_GetTick>
 8004c58:	4602      	mov	r2, r0
 8004c5a:	6a3b      	ldr	r3, [r7, #32]
 8004c5c:	1ad3      	subs	r3, r2, r3
 8004c5e:	2b02      	cmp	r3, #2
 8004c60:	d901      	bls.n	8004c66 <HAL_RCC_OscConfig+0x15a>
          {
            return HAL_TIMEOUT;
 8004c62:	2303      	movs	r3, #3
 8004c64:	e193      	b.n	8004f8e <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c66:	4b54      	ldr	r3, [pc, #336]	; (8004db8 <HAL_RCC_OscConfig+0x2ac>)
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	f003 0302 	and.w	r3, r3, #2
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d0f0      	beq.n	8004c54 <HAL_RCC_OscConfig+0x148>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c72:	4b51      	ldr	r3, [pc, #324]	; (8004db8 <HAL_RCC_OscConfig+0x2ac>)
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	691b      	ldr	r3, [r3, #16]
 8004c7e:	21f8      	movs	r1, #248	; 0xf8
 8004c80:	6139      	str	r1, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c82:	6939      	ldr	r1, [r7, #16]
 8004c84:	fa91 f1a1 	rbit	r1, r1
 8004c88:	60f9      	str	r1, [r7, #12]
  return result;
 8004c8a:	68f9      	ldr	r1, [r7, #12]
 8004c8c:	fab1 f181 	clz	r1, r1
 8004c90:	b2c9      	uxtb	r1, r1
 8004c92:	408b      	lsls	r3, r1
 8004c94:	4948      	ldr	r1, [pc, #288]	; (8004db8 <HAL_RCC_OscConfig+0x2ac>)
 8004c96:	4313      	orrs	r3, r2
 8004c98:	600b      	str	r3, [r1, #0]
 8004c9a:	e015      	b.n	8004cc8 <HAL_RCC_OscConfig+0x1bc>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004c9c:	4b48      	ldr	r3, [pc, #288]	; (8004dc0 <HAL_RCC_OscConfig+0x2b4>)
 8004c9e:	2200      	movs	r2, #0
 8004ca0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ca2:	f7fd fb55 	bl	8002350 <HAL_GetTick>
 8004ca6:	6238      	str	r0, [r7, #32]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004ca8:	e008      	b.n	8004cbc <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004caa:	f7fd fb51 	bl	8002350 <HAL_GetTick>
 8004cae:	4602      	mov	r2, r0
 8004cb0:	6a3b      	ldr	r3, [r7, #32]
 8004cb2:	1ad3      	subs	r3, r2, r3
 8004cb4:	2b02      	cmp	r3, #2
 8004cb6:	d901      	bls.n	8004cbc <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8004cb8:	2303      	movs	r3, #3
 8004cba:	e168      	b.n	8004f8e <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004cbc:	4b3e      	ldr	r3, [pc, #248]	; (8004db8 <HAL_RCC_OscConfig+0x2ac>)
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	f003 0302 	and.w	r3, r3, #2
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d1f0      	bne.n	8004caa <HAL_RCC_OscConfig+0x19e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	f003 0308 	and.w	r3, r3, #8
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d030      	beq.n	8004d36 <HAL_RCC_OscConfig+0x22a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	695b      	ldr	r3, [r3, #20]
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d016      	beq.n	8004d0a <HAL_RCC_OscConfig+0x1fe>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004cdc:	4b39      	ldr	r3, [pc, #228]	; (8004dc4 <HAL_RCC_OscConfig+0x2b8>)
 8004cde:	2201      	movs	r2, #1
 8004ce0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004ce2:	f7fd fb35 	bl	8002350 <HAL_GetTick>
 8004ce6:	6238      	str	r0, [r7, #32]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004ce8:	e008      	b.n	8004cfc <HAL_RCC_OscConfig+0x1f0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004cea:	f7fd fb31 	bl	8002350 <HAL_GetTick>
 8004cee:	4602      	mov	r2, r0
 8004cf0:	6a3b      	ldr	r3, [r7, #32]
 8004cf2:	1ad3      	subs	r3, r2, r3
 8004cf4:	2b02      	cmp	r3, #2
 8004cf6:	d901      	bls.n	8004cfc <HAL_RCC_OscConfig+0x1f0>
        {
          return HAL_TIMEOUT;
 8004cf8:	2303      	movs	r3, #3
 8004cfa:	e148      	b.n	8004f8e <HAL_RCC_OscConfig+0x482>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004cfc:	4b2e      	ldr	r3, [pc, #184]	; (8004db8 <HAL_RCC_OscConfig+0x2ac>)
 8004cfe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004d00:	f003 0302 	and.w	r3, r3, #2
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d0f0      	beq.n	8004cea <HAL_RCC_OscConfig+0x1de>
 8004d08:	e015      	b.n	8004d36 <HAL_RCC_OscConfig+0x22a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004d0a:	4b2e      	ldr	r3, [pc, #184]	; (8004dc4 <HAL_RCC_OscConfig+0x2b8>)
 8004d0c:	2200      	movs	r2, #0
 8004d0e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004d10:	f7fd fb1e 	bl	8002350 <HAL_GetTick>
 8004d14:	6238      	str	r0, [r7, #32]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004d16:	e008      	b.n	8004d2a <HAL_RCC_OscConfig+0x21e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004d18:	f7fd fb1a 	bl	8002350 <HAL_GetTick>
 8004d1c:	4602      	mov	r2, r0
 8004d1e:	6a3b      	ldr	r3, [r7, #32]
 8004d20:	1ad3      	subs	r3, r2, r3
 8004d22:	2b02      	cmp	r3, #2
 8004d24:	d901      	bls.n	8004d2a <HAL_RCC_OscConfig+0x21e>
        {
          return HAL_TIMEOUT;
 8004d26:	2303      	movs	r3, #3
 8004d28:	e131      	b.n	8004f8e <HAL_RCC_OscConfig+0x482>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004d2a:	4b23      	ldr	r3, [pc, #140]	; (8004db8 <HAL_RCC_OscConfig+0x2ac>)
 8004d2c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004d2e:	f003 0302 	and.w	r3, r3, #2
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d1f0      	bne.n	8004d18 <HAL_RCC_OscConfig+0x20c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	f003 0304 	and.w	r3, r3, #4
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	f000 8088 	beq.w	8004e54 <HAL_RCC_OscConfig+0x348>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004d44:	2300      	movs	r3, #0
 8004d46:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004d4a:	4b1b      	ldr	r3, [pc, #108]	; (8004db8 <HAL_RCC_OscConfig+0x2ac>)
 8004d4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d110      	bne.n	8004d78 <HAL_RCC_OscConfig+0x26c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004d56:	2300      	movs	r3, #0
 8004d58:	60bb      	str	r3, [r7, #8]
 8004d5a:	4b17      	ldr	r3, [pc, #92]	; (8004db8 <HAL_RCC_OscConfig+0x2ac>)
 8004d5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d5e:	4a16      	ldr	r2, [pc, #88]	; (8004db8 <HAL_RCC_OscConfig+0x2ac>)
 8004d60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d64:	6413      	str	r3, [r2, #64]	; 0x40
 8004d66:	4b14      	ldr	r3, [pc, #80]	; (8004db8 <HAL_RCC_OscConfig+0x2ac>)
 8004d68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d6e:	60bb      	str	r3, [r7, #8]
 8004d70:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004d72:	2301      	movs	r3, #1
 8004d74:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004d78:	4b13      	ldr	r3, [pc, #76]	; (8004dc8 <HAL_RCC_OscConfig+0x2bc>)
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	4a12      	ldr	r2, [pc, #72]	; (8004dc8 <HAL_RCC_OscConfig+0x2bc>)
 8004d7e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d82:	6013      	str	r3, [r2, #0]

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d84:	4b10      	ldr	r3, [pc, #64]	; (8004dc8 <HAL_RCC_OscConfig+0x2bc>)
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d123      	bne.n	8004dd8 <HAL_RCC_OscConfig+0x2cc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004d90:	4b0d      	ldr	r3, [pc, #52]	; (8004dc8 <HAL_RCC_OscConfig+0x2bc>)
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	4a0c      	ldr	r2, [pc, #48]	; (8004dc8 <HAL_RCC_OscConfig+0x2bc>)
 8004d96:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d9a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004d9c:	f7fd fad8 	bl	8002350 <HAL_GetTick>
 8004da0:	6238      	str	r0, [r7, #32]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004da2:	e013      	b.n	8004dcc <HAL_RCC_OscConfig+0x2c0>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004da4:	f7fd fad4 	bl	8002350 <HAL_GetTick>
 8004da8:	4602      	mov	r2, r0
 8004daa:	6a3b      	ldr	r3, [r7, #32]
 8004dac:	1ad3      	subs	r3, r2, r3
 8004dae:	2b02      	cmp	r3, #2
 8004db0:	d90c      	bls.n	8004dcc <HAL_RCC_OscConfig+0x2c0>
        {
          return HAL_TIMEOUT;
 8004db2:	2303      	movs	r3, #3
 8004db4:	e0eb      	b.n	8004f8e <HAL_RCC_OscConfig+0x482>
 8004db6:	bf00      	nop
 8004db8:	40023800 	.word	0x40023800
 8004dbc:	40023802 	.word	0x40023802
 8004dc0:	42470000 	.word	0x42470000
 8004dc4:	42470e80 	.word	0x42470e80
 8004dc8:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004dcc:	4b72      	ldr	r3, [pc, #456]	; (8004f98 <HAL_RCC_OscConfig+0x48c>)
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d0e5      	beq.n	8004da4 <HAL_RCC_OscConfig+0x298>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	689a      	ldr	r2, [r3, #8]
 8004ddc:	4b6f      	ldr	r3, [pc, #444]	; (8004f9c <HAL_RCC_OscConfig+0x490>)
 8004dde:	b2d2      	uxtb	r2, r2
 8004de0:	701a      	strb	r2, [r3, #0]
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	689b      	ldr	r3, [r3, #8]
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d015      	beq.n	8004e16 <HAL_RCC_OscConfig+0x30a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004dea:	f7fd fab1 	bl	8002350 <HAL_GetTick>
 8004dee:	6238      	str	r0, [r7, #32]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004df0:	e00a      	b.n	8004e08 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004df2:	f7fd faad 	bl	8002350 <HAL_GetTick>
 8004df6:	4602      	mov	r2, r0
 8004df8:	6a3b      	ldr	r3, [r7, #32]
 8004dfa:	1ad3      	subs	r3, r2, r3
 8004dfc:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e00:	4293      	cmp	r3, r2
 8004e02:	d901      	bls.n	8004e08 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8004e04:	2303      	movs	r3, #3
 8004e06:	e0c2      	b.n	8004f8e <HAL_RCC_OscConfig+0x482>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e08:	4b65      	ldr	r3, [pc, #404]	; (8004fa0 <HAL_RCC_OscConfig+0x494>)
 8004e0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e0c:	f003 0302 	and.w	r3, r3, #2
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d0ee      	beq.n	8004df2 <HAL_RCC_OscConfig+0x2e6>
 8004e14:	e014      	b.n	8004e40 <HAL_RCC_OscConfig+0x334>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004e16:	f7fd fa9b 	bl	8002350 <HAL_GetTick>
 8004e1a:	6238      	str	r0, [r7, #32]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004e1c:	e00a      	b.n	8004e34 <HAL_RCC_OscConfig+0x328>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004e1e:	f7fd fa97 	bl	8002350 <HAL_GetTick>
 8004e22:	4602      	mov	r2, r0
 8004e24:	6a3b      	ldr	r3, [r7, #32]
 8004e26:	1ad3      	subs	r3, r2, r3
 8004e28:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e2c:	4293      	cmp	r3, r2
 8004e2e:	d901      	bls.n	8004e34 <HAL_RCC_OscConfig+0x328>
        {
          return HAL_TIMEOUT;
 8004e30:	2303      	movs	r3, #3
 8004e32:	e0ac      	b.n	8004f8e <HAL_RCC_OscConfig+0x482>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004e34:	4b5a      	ldr	r3, [pc, #360]	; (8004fa0 <HAL_RCC_OscConfig+0x494>)
 8004e36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e38:	f003 0302 	and.w	r3, r3, #2
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d1ee      	bne.n	8004e1e <HAL_RCC_OscConfig+0x312>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004e40:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004e44:	2b01      	cmp	r3, #1
 8004e46:	d105      	bne.n	8004e54 <HAL_RCC_OscConfig+0x348>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004e48:	4b55      	ldr	r3, [pc, #340]	; (8004fa0 <HAL_RCC_OscConfig+0x494>)
 8004e4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e4c:	4a54      	ldr	r2, [pc, #336]	; (8004fa0 <HAL_RCC_OscConfig+0x494>)
 8004e4e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004e52:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	699b      	ldr	r3, [r3, #24]
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	f000 8097 	beq.w	8004f8c <HAL_RCC_OscConfig+0x480>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004e5e:	4b50      	ldr	r3, [pc, #320]	; (8004fa0 <HAL_RCC_OscConfig+0x494>)
 8004e60:	689b      	ldr	r3, [r3, #8]
 8004e62:	f003 030c 	and.w	r3, r3, #12
 8004e66:	2b08      	cmp	r3, #8
 8004e68:	d061      	beq.n	8004f2e <HAL_RCC_OscConfig+0x422>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	699b      	ldr	r3, [r3, #24]
 8004e6e:	2b02      	cmp	r3, #2
 8004e70:	d146      	bne.n	8004f00 <HAL_RCC_OscConfig+0x3f4>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e72:	4b4c      	ldr	r3, [pc, #304]	; (8004fa4 <HAL_RCC_OscConfig+0x498>)
 8004e74:	2200      	movs	r2, #0
 8004e76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e78:	f7fd fa6a 	bl	8002350 <HAL_GetTick>
 8004e7c:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e7e:	e008      	b.n	8004e92 <HAL_RCC_OscConfig+0x386>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004e80:	f7fd fa66 	bl	8002350 <HAL_GetTick>
 8004e84:	4602      	mov	r2, r0
 8004e86:	6a3b      	ldr	r3, [r7, #32]
 8004e88:	1ad3      	subs	r3, r2, r3
 8004e8a:	2b64      	cmp	r3, #100	; 0x64
 8004e8c:	d901      	bls.n	8004e92 <HAL_RCC_OscConfig+0x386>
          {
            return HAL_TIMEOUT;
 8004e8e:	2303      	movs	r3, #3
 8004e90:	e07d      	b.n	8004f8e <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e92:	4b43      	ldr	r3, [pc, #268]	; (8004fa0 <HAL_RCC_OscConfig+0x494>)
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d1f0      	bne.n	8004e80 <HAL_RCC_OscConfig+0x374>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004e9e:	4b40      	ldr	r3, [pc, #256]	; (8004fa0 <HAL_RCC_OscConfig+0x494>)
 8004ea0:	685a      	ldr	r2, [r3, #4]
 8004ea2:	4b41      	ldr	r3, [pc, #260]	; (8004fa8 <HAL_RCC_OscConfig+0x49c>)
 8004ea4:	4013      	ands	r3, r2
 8004ea6:	687a      	ldr	r2, [r7, #4]
 8004ea8:	69d1      	ldr	r1, [r2, #28]
 8004eaa:	687a      	ldr	r2, [r7, #4]
 8004eac:	6a12      	ldr	r2, [r2, #32]
 8004eae:	4311      	orrs	r1, r2
 8004eb0:	687a      	ldr	r2, [r7, #4]
 8004eb2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004eb4:	0192      	lsls	r2, r2, #6
 8004eb6:	4311      	orrs	r1, r2
 8004eb8:	687a      	ldr	r2, [r7, #4]
 8004eba:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004ebc:	0612      	lsls	r2, r2, #24
 8004ebe:	4311      	orrs	r1, r2
 8004ec0:	687a      	ldr	r2, [r7, #4]
 8004ec2:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8004ec4:	0852      	lsrs	r2, r2, #1
 8004ec6:	3a01      	subs	r2, #1
 8004ec8:	0412      	lsls	r2, r2, #16
 8004eca:	430a      	orrs	r2, r1
 8004ecc:	4934      	ldr	r1, [pc, #208]	; (8004fa0 <HAL_RCC_OscConfig+0x494>)
 8004ece:	4313      	orrs	r3, r2
 8004ed0:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004ed2:	4b34      	ldr	r3, [pc, #208]	; (8004fa4 <HAL_RCC_OscConfig+0x498>)
 8004ed4:	2201      	movs	r2, #1
 8004ed6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ed8:	f7fd fa3a 	bl	8002350 <HAL_GetTick>
 8004edc:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004ede:	e008      	b.n	8004ef2 <HAL_RCC_OscConfig+0x3e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004ee0:	f7fd fa36 	bl	8002350 <HAL_GetTick>
 8004ee4:	4602      	mov	r2, r0
 8004ee6:	6a3b      	ldr	r3, [r7, #32]
 8004ee8:	1ad3      	subs	r3, r2, r3
 8004eea:	2b64      	cmp	r3, #100	; 0x64
 8004eec:	d901      	bls.n	8004ef2 <HAL_RCC_OscConfig+0x3e6>
          {
            return HAL_TIMEOUT;
 8004eee:	2303      	movs	r3, #3
 8004ef0:	e04d      	b.n	8004f8e <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004ef2:	4b2b      	ldr	r3, [pc, #172]	; (8004fa0 <HAL_RCC_OscConfig+0x494>)
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d0f0      	beq.n	8004ee0 <HAL_RCC_OscConfig+0x3d4>
 8004efe:	e045      	b.n	8004f8c <HAL_RCC_OscConfig+0x480>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f00:	4b28      	ldr	r3, [pc, #160]	; (8004fa4 <HAL_RCC_OscConfig+0x498>)
 8004f02:	2200      	movs	r2, #0
 8004f04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f06:	f7fd fa23 	bl	8002350 <HAL_GetTick>
 8004f0a:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f0c:	e008      	b.n	8004f20 <HAL_RCC_OscConfig+0x414>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004f0e:	f7fd fa1f 	bl	8002350 <HAL_GetTick>
 8004f12:	4602      	mov	r2, r0
 8004f14:	6a3b      	ldr	r3, [r7, #32]
 8004f16:	1ad3      	subs	r3, r2, r3
 8004f18:	2b64      	cmp	r3, #100	; 0x64
 8004f1a:	d901      	bls.n	8004f20 <HAL_RCC_OscConfig+0x414>
          {
            return HAL_TIMEOUT;
 8004f1c:	2303      	movs	r3, #3
 8004f1e:	e036      	b.n	8004f8e <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f20:	4b1f      	ldr	r3, [pc, #124]	; (8004fa0 <HAL_RCC_OscConfig+0x494>)
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d1f0      	bne.n	8004f0e <HAL_RCC_OscConfig+0x402>
 8004f2c:	e02e      	b.n	8004f8c <HAL_RCC_OscConfig+0x480>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	699b      	ldr	r3, [r3, #24]
 8004f32:	2b01      	cmp	r3, #1
 8004f34:	d101      	bne.n	8004f3a <HAL_RCC_OscConfig+0x42e>
      {
        return HAL_ERROR;
 8004f36:	2301      	movs	r3, #1
 8004f38:	e029      	b.n	8004f8e <HAL_RCC_OscConfig+0x482>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        uint32_t pllcfgr = RCC->PLLCFGR;
 8004f3a:	4b19      	ldr	r3, [pc, #100]	; (8004fa0 <HAL_RCC_OscConfig+0x494>)
 8004f3c:	685b      	ldr	r3, [r3, #4]
 8004f3e:	61fb      	str	r3, [r7, #28]
      
        if((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f40:	69fb      	ldr	r3, [r7, #28]
 8004f42:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	69db      	ldr	r3, [r3, #28]
 8004f4a:	429a      	cmp	r2, r3
 8004f4c:	d11c      	bne.n	8004f88 <HAL_RCC_OscConfig+0x47c>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004f4e:	69fb      	ldr	r3, [r7, #28]
 8004f50:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f58:	429a      	cmp	r2, r3
 8004f5a:	d115      	bne.n	8004f88 <HAL_RCC_OscConfig+0x47c>
           ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8004f5c:	69fb      	ldr	r3, [r7, #28]
 8004f5e:	099b      	lsrs	r3, r3, #6
 8004f60:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004f68:	429a      	cmp	r2, r3
 8004f6a:	d10d      	bne.n	8004f88 <HAL_RCC_OscConfig+0x47c>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004f6c:	69fb      	ldr	r3, [r7, #28]
 8004f6e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8004f76:	429a      	cmp	r2, r3
 8004f78:	d106      	bne.n	8004f88 <HAL_RCC_OscConfig+0x47c>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8004f7a:	69fb      	ldr	r3, [r7, #28]
 8004f7c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004f84:	429a      	cmp	r2, r3
 8004f86:	d001      	beq.n	8004f8c <HAL_RCC_OscConfig+0x480>
        {
          return HAL_ERROR;
 8004f88:	2301      	movs	r3, #1
 8004f8a:	e000      	b.n	8004f8e <HAL_RCC_OscConfig+0x482>
        }
      }
    }
  }
  return HAL_OK;
 8004f8c:	2300      	movs	r3, #0
}
 8004f8e:	4618      	mov	r0, r3
 8004f90:	3728      	adds	r7, #40	; 0x28
 8004f92:	46bd      	mov	sp, r7
 8004f94:	bd80      	pop	{r7, pc}
 8004f96:	bf00      	nop
 8004f98:	40007000 	.word	0x40007000
 8004f9c:	40023870 	.word	0x40023870
 8004fa0:	40023800 	.word	0x40023800
 8004fa4:	42470060 	.word	0x42470060
 8004fa8:	f0bc8000 	.word	0xf0bc8000

08004fac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004fac:	b580      	push	{r7, lr}
 8004fae:	b086      	sub	sp, #24
 8004fb0:	af00      	add	r7, sp, #0
 8004fb2:	6078      	str	r0, [r7, #4]
 8004fb4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d101      	bne.n	8004fc0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004fbc:	2301      	movs	r3, #1
 8004fbe:	e0d2      	b.n	8005166 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004fc0:	4b6b      	ldr	r3, [pc, #428]	; (8005170 <HAL_RCC_ClockConfig+0x1c4>)
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	f003 030f 	and.w	r3, r3, #15
 8004fc8:	683a      	ldr	r2, [r7, #0]
 8004fca:	429a      	cmp	r2, r3
 8004fcc:	d90c      	bls.n	8004fe8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004fce:	4b68      	ldr	r3, [pc, #416]	; (8005170 <HAL_RCC_ClockConfig+0x1c4>)
 8004fd0:	683a      	ldr	r2, [r7, #0]
 8004fd2:	b2d2      	uxtb	r2, r2
 8004fd4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004fd6:	4b66      	ldr	r3, [pc, #408]	; (8005170 <HAL_RCC_ClockConfig+0x1c4>)
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	f003 030f 	and.w	r3, r3, #15
 8004fde:	683a      	ldr	r2, [r7, #0]
 8004fe0:	429a      	cmp	r2, r3
 8004fe2:	d001      	beq.n	8004fe8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004fe4:	2301      	movs	r3, #1
 8004fe6:	e0be      	b.n	8005166 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	f003 0302 	and.w	r3, r3, #2
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d020      	beq.n	8005036 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	f003 0304 	and.w	r3, r3, #4
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d005      	beq.n	800500c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005000:	4b5c      	ldr	r3, [pc, #368]	; (8005174 <HAL_RCC_ClockConfig+0x1c8>)
 8005002:	689b      	ldr	r3, [r3, #8]
 8005004:	4a5b      	ldr	r2, [pc, #364]	; (8005174 <HAL_RCC_ClockConfig+0x1c8>)
 8005006:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800500a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	f003 0308 	and.w	r3, r3, #8
 8005014:	2b00      	cmp	r3, #0
 8005016:	d005      	beq.n	8005024 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3U));
 8005018:	4b56      	ldr	r3, [pc, #344]	; (8005174 <HAL_RCC_ClockConfig+0x1c8>)
 800501a:	689b      	ldr	r3, [r3, #8]
 800501c:	4a55      	ldr	r2, [pc, #340]	; (8005174 <HAL_RCC_ClockConfig+0x1c8>)
 800501e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005022:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005024:	4b53      	ldr	r3, [pc, #332]	; (8005174 <HAL_RCC_ClockConfig+0x1c8>)
 8005026:	689b      	ldr	r3, [r3, #8]
 8005028:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	689b      	ldr	r3, [r3, #8]
 8005030:	4950      	ldr	r1, [pc, #320]	; (8005174 <HAL_RCC_ClockConfig+0x1c8>)
 8005032:	4313      	orrs	r3, r2
 8005034:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	f003 0301 	and.w	r3, r3, #1
 800503e:	2b00      	cmp	r3, #0
 8005040:	d040      	beq.n	80050c4 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	685b      	ldr	r3, [r3, #4]
 8005046:	2b01      	cmp	r3, #1
 8005048:	d107      	bne.n	800505a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800504a:	4b4a      	ldr	r3, [pc, #296]	; (8005174 <HAL_RCC_ClockConfig+0x1c8>)
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005052:	2b00      	cmp	r3, #0
 8005054:	d115      	bne.n	8005082 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8005056:	2301      	movs	r3, #1
 8005058:	e085      	b.n	8005166 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	685b      	ldr	r3, [r3, #4]
 800505e:	2b02      	cmp	r3, #2
 8005060:	d107      	bne.n	8005072 <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005062:	4b44      	ldr	r3, [pc, #272]	; (8005174 <HAL_RCC_ClockConfig+0x1c8>)
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800506a:	2b00      	cmp	r3, #0
 800506c:	d109      	bne.n	8005082 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800506e:	2301      	movs	r3, #1
 8005070:	e079      	b.n	8005166 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005072:	4b40      	ldr	r3, [pc, #256]	; (8005174 <HAL_RCC_ClockConfig+0x1c8>)
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	f003 0302 	and.w	r3, r3, #2
 800507a:	2b00      	cmp	r3, #0
 800507c:	d101      	bne.n	8005082 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800507e:	2301      	movs	r3, #1
 8005080:	e071      	b.n	8005166 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005082:	4b3c      	ldr	r3, [pc, #240]	; (8005174 <HAL_RCC_ClockConfig+0x1c8>)
 8005084:	689b      	ldr	r3, [r3, #8]
 8005086:	f023 0203 	bic.w	r2, r3, #3
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	685b      	ldr	r3, [r3, #4]
 800508e:	4939      	ldr	r1, [pc, #228]	; (8005174 <HAL_RCC_ClockConfig+0x1c8>)
 8005090:	4313      	orrs	r3, r2
 8005092:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005094:	f7fd f95c 	bl	8002350 <HAL_GetTick>
 8005098:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800509a:	e00a      	b.n	80050b2 <HAL_RCC_ClockConfig+0x106>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800509c:	f7fd f958 	bl	8002350 <HAL_GetTick>
 80050a0:	4602      	mov	r2, r0
 80050a2:	697b      	ldr	r3, [r7, #20]
 80050a4:	1ad3      	subs	r3, r2, r3
 80050a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80050aa:	4293      	cmp	r3, r2
 80050ac:	d901      	bls.n	80050b2 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80050ae:	2303      	movs	r3, #3
 80050b0:	e059      	b.n	8005166 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80050b2:	4b30      	ldr	r3, [pc, #192]	; (8005174 <HAL_RCC_ClockConfig+0x1c8>)
 80050b4:	689b      	ldr	r3, [r3, #8]
 80050b6:	f003 020c 	and.w	r2, r3, #12
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	685b      	ldr	r3, [r3, #4]
 80050be:	009b      	lsls	r3, r3, #2
 80050c0:	429a      	cmp	r2, r3
 80050c2:	d1eb      	bne.n	800509c <HAL_RCC_ClockConfig+0xf0>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80050c4:	4b2a      	ldr	r3, [pc, #168]	; (8005170 <HAL_RCC_ClockConfig+0x1c4>)
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	f003 030f 	and.w	r3, r3, #15
 80050cc:	683a      	ldr	r2, [r7, #0]
 80050ce:	429a      	cmp	r2, r3
 80050d0:	d20c      	bcs.n	80050ec <HAL_RCC_ClockConfig+0x140>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80050d2:	4b27      	ldr	r3, [pc, #156]	; (8005170 <HAL_RCC_ClockConfig+0x1c4>)
 80050d4:	683a      	ldr	r2, [r7, #0]
 80050d6:	b2d2      	uxtb	r2, r2
 80050d8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80050da:	4b25      	ldr	r3, [pc, #148]	; (8005170 <HAL_RCC_ClockConfig+0x1c4>)
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	f003 030f 	and.w	r3, r3, #15
 80050e2:	683a      	ldr	r2, [r7, #0]
 80050e4:	429a      	cmp	r2, r3
 80050e6:	d001      	beq.n	80050ec <HAL_RCC_ClockConfig+0x140>
    {
      return HAL_ERROR;
 80050e8:	2301      	movs	r3, #1
 80050ea:	e03c      	b.n	8005166 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	f003 0304 	and.w	r3, r3, #4
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d008      	beq.n	800510a <HAL_RCC_ClockConfig+0x15e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80050f8:	4b1e      	ldr	r3, [pc, #120]	; (8005174 <HAL_RCC_ClockConfig+0x1c8>)
 80050fa:	689b      	ldr	r3, [r3, #8]
 80050fc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	68db      	ldr	r3, [r3, #12]
 8005104:	491b      	ldr	r1, [pc, #108]	; (8005174 <HAL_RCC_ClockConfig+0x1c8>)
 8005106:	4313      	orrs	r3, r2
 8005108:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	f003 0308 	and.w	r3, r3, #8
 8005112:	2b00      	cmp	r3, #0
 8005114:	d009      	beq.n	800512a <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005116:	4b17      	ldr	r3, [pc, #92]	; (8005174 <HAL_RCC_ClockConfig+0x1c8>)
 8005118:	689b      	ldr	r3, [r3, #8]
 800511a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	691b      	ldr	r3, [r3, #16]
 8005122:	00db      	lsls	r3, r3, #3
 8005124:	4913      	ldr	r1, [pc, #76]	; (8005174 <HAL_RCC_ClockConfig+0x1c8>)
 8005126:	4313      	orrs	r3, r2
 8005128:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 800512a:	f000 f837 	bl	800519c <HAL_RCC_GetSysClockFreq>
 800512e:	4601      	mov	r1, r0
 8005130:	4b10      	ldr	r3, [pc, #64]	; (8005174 <HAL_RCC_ClockConfig+0x1c8>)
 8005132:	689b      	ldr	r3, [r3, #8]
 8005134:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005138:	22f0      	movs	r2, #240	; 0xf0
 800513a:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800513c:	693a      	ldr	r2, [r7, #16]
 800513e:	fa92 f2a2 	rbit	r2, r2
 8005142:	60fa      	str	r2, [r7, #12]
  return result;
 8005144:	68fa      	ldr	r2, [r7, #12]
 8005146:	fab2 f282 	clz	r2, r2
 800514a:	b2d2      	uxtb	r2, r2
 800514c:	40d3      	lsrs	r3, r2
 800514e:	4a0a      	ldr	r2, [pc, #40]	; (8005178 <HAL_RCC_ClockConfig+0x1cc>)
 8005150:	5cd3      	ldrb	r3, [r2, r3]
 8005152:	fa21 f303 	lsr.w	r3, r1, r3
 8005156:	4a09      	ldr	r2, [pc, #36]	; (800517c <HAL_RCC_ClockConfig+0x1d0>)
 8005158:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800515a:	4b09      	ldr	r3, [pc, #36]	; (8005180 <HAL_RCC_ClockConfig+0x1d4>)
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	4618      	mov	r0, r3
 8005160:	f7fd f8b4 	bl	80022cc <HAL_InitTick>

  return HAL_OK;
 8005164:	2300      	movs	r3, #0
}
 8005166:	4618      	mov	r0, r3
 8005168:	3718      	adds	r7, #24
 800516a:	46bd      	mov	sp, r7
 800516c:	bd80      	pop	{r7, pc}
 800516e:	bf00      	nop
 8005170:	40023c00 	.word	0x40023c00
 8005174:	40023800 	.word	0x40023800
 8005178:	08009db0 	.word	0x08009db0
 800517c:	20000004 	.word	0x20000004
 8005180:	20000008 	.word	0x20000008

08005184 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M3 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8005184:	b480      	push	{r7}
 8005186:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 8005188:	4b03      	ldr	r3, [pc, #12]	; (8005198 <HAL_RCC_EnableCSS+0x14>)
 800518a:	2201      	movs	r2, #1
 800518c:	601a      	str	r2, [r3, #0]
}
 800518e:	bf00      	nop
 8005190:	46bd      	mov	sp, r7
 8005192:	bc80      	pop	{r7}
 8005194:	4770      	bx	lr
 8005196:	bf00      	nop
 8005198:	4247004c 	.word	0x4247004c

0800519c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800519c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80051a0:	b084      	sub	sp, #16
 80051a2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80051a4:	2300      	movs	r3, #0
 80051a6:	607b      	str	r3, [r7, #4]
 80051a8:	2300      	movs	r3, #0
 80051aa:	60fb      	str	r3, [r7, #12]
 80051ac:	2300      	movs	r3, #0
 80051ae:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80051b0:	2300      	movs	r3, #0
 80051b2:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80051b4:	4b67      	ldr	r3, [pc, #412]	; (8005354 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80051b6:	689b      	ldr	r3, [r3, #8]
 80051b8:	f003 030c 	and.w	r3, r3, #12
 80051bc:	2b08      	cmp	r3, #8
 80051be:	d00d      	beq.n	80051dc <HAL_RCC_GetSysClockFreq+0x40>
 80051c0:	2b08      	cmp	r3, #8
 80051c2:	f200 80bd 	bhi.w	8005340 <HAL_RCC_GetSysClockFreq+0x1a4>
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d002      	beq.n	80051d0 <HAL_RCC_GetSysClockFreq+0x34>
 80051ca:	2b04      	cmp	r3, #4
 80051cc:	d003      	beq.n	80051d6 <HAL_RCC_GetSysClockFreq+0x3a>
 80051ce:	e0b7      	b.n	8005340 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80051d0:	4b61      	ldr	r3, [pc, #388]	; (8005358 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80051d2:	60bb      	str	r3, [r7, #8]
       break;
 80051d4:	e0b7      	b.n	8005346 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80051d6:	4b60      	ldr	r3, [pc, #384]	; (8005358 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80051d8:	60bb      	str	r3, [r7, #8]
      break;
 80051da:	e0b4      	b.n	8005346 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80051dc:	4b5d      	ldr	r3, [pc, #372]	; (8005354 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80051de:	685b      	ldr	r3, [r3, #4]
 80051e0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80051e4:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80051e6:	4b5b      	ldr	r3, [pc, #364]	; (8005354 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80051e8:	685b      	ldr	r3, [r3, #4]
 80051ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d04d      	beq.n	800528e <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80051f2:	4b58      	ldr	r3, [pc, #352]	; (8005354 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80051f4:	685b      	ldr	r3, [r3, #4]
 80051f6:	099b      	lsrs	r3, r3, #6
 80051f8:	461a      	mov	r2, r3
 80051fa:	f04f 0300 	mov.w	r3, #0
 80051fe:	f240 10ff 	movw	r0, #511	; 0x1ff
 8005202:	f04f 0100 	mov.w	r1, #0
 8005206:	ea02 0800 	and.w	r8, r2, r0
 800520a:	ea03 0901 	and.w	r9, r3, r1
 800520e:	4640      	mov	r0, r8
 8005210:	4649      	mov	r1, r9
 8005212:	f04f 0200 	mov.w	r2, #0
 8005216:	f04f 0300 	mov.w	r3, #0
 800521a:	014b      	lsls	r3, r1, #5
 800521c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005220:	0142      	lsls	r2, r0, #5
 8005222:	4610      	mov	r0, r2
 8005224:	4619      	mov	r1, r3
 8005226:	ebb0 0008 	subs.w	r0, r0, r8
 800522a:	eb61 0109 	sbc.w	r1, r1, r9
 800522e:	f04f 0200 	mov.w	r2, #0
 8005232:	f04f 0300 	mov.w	r3, #0
 8005236:	018b      	lsls	r3, r1, #6
 8005238:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800523c:	0182      	lsls	r2, r0, #6
 800523e:	1a12      	subs	r2, r2, r0
 8005240:	eb63 0301 	sbc.w	r3, r3, r1
 8005244:	f04f 0000 	mov.w	r0, #0
 8005248:	f04f 0100 	mov.w	r1, #0
 800524c:	00d9      	lsls	r1, r3, #3
 800524e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005252:	00d0      	lsls	r0, r2, #3
 8005254:	4602      	mov	r2, r0
 8005256:	460b      	mov	r3, r1
 8005258:	eb12 0208 	adds.w	r2, r2, r8
 800525c:	eb43 0309 	adc.w	r3, r3, r9
 8005260:	f04f 0000 	mov.w	r0, #0
 8005264:	f04f 0100 	mov.w	r1, #0
 8005268:	0299      	lsls	r1, r3, #10
 800526a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800526e:	0290      	lsls	r0, r2, #10
 8005270:	4602      	mov	r2, r0
 8005272:	460b      	mov	r3, r1
 8005274:	4610      	mov	r0, r2
 8005276:	4619      	mov	r1, r3
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	461a      	mov	r2, r3
 800527c:	f04f 0300 	mov.w	r3, #0
 8005280:	f7fb fe84 	bl	8000f8c <__aeabi_uldivmod>
 8005284:	4602      	mov	r2, r0
 8005286:	460b      	mov	r3, r1
 8005288:	4613      	mov	r3, r2
 800528a:	60fb      	str	r3, [r7, #12]
 800528c:	e04a      	b.n	8005324 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800528e:	4b31      	ldr	r3, [pc, #196]	; (8005354 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005290:	685b      	ldr	r3, [r3, #4]
 8005292:	099b      	lsrs	r3, r3, #6
 8005294:	461a      	mov	r2, r3
 8005296:	f04f 0300 	mov.w	r3, #0
 800529a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800529e:	f04f 0100 	mov.w	r1, #0
 80052a2:	ea02 0400 	and.w	r4, r2, r0
 80052a6:	ea03 0501 	and.w	r5, r3, r1
 80052aa:	4620      	mov	r0, r4
 80052ac:	4629      	mov	r1, r5
 80052ae:	f04f 0200 	mov.w	r2, #0
 80052b2:	f04f 0300 	mov.w	r3, #0
 80052b6:	014b      	lsls	r3, r1, #5
 80052b8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80052bc:	0142      	lsls	r2, r0, #5
 80052be:	4610      	mov	r0, r2
 80052c0:	4619      	mov	r1, r3
 80052c2:	1b00      	subs	r0, r0, r4
 80052c4:	eb61 0105 	sbc.w	r1, r1, r5
 80052c8:	f04f 0200 	mov.w	r2, #0
 80052cc:	f04f 0300 	mov.w	r3, #0
 80052d0:	018b      	lsls	r3, r1, #6
 80052d2:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80052d6:	0182      	lsls	r2, r0, #6
 80052d8:	1a12      	subs	r2, r2, r0
 80052da:	eb63 0301 	sbc.w	r3, r3, r1
 80052de:	f04f 0000 	mov.w	r0, #0
 80052e2:	f04f 0100 	mov.w	r1, #0
 80052e6:	00d9      	lsls	r1, r3, #3
 80052e8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80052ec:	00d0      	lsls	r0, r2, #3
 80052ee:	4602      	mov	r2, r0
 80052f0:	460b      	mov	r3, r1
 80052f2:	1912      	adds	r2, r2, r4
 80052f4:	eb45 0303 	adc.w	r3, r5, r3
 80052f8:	f04f 0000 	mov.w	r0, #0
 80052fc:	f04f 0100 	mov.w	r1, #0
 8005300:	0299      	lsls	r1, r3, #10
 8005302:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8005306:	0290      	lsls	r0, r2, #10
 8005308:	4602      	mov	r2, r0
 800530a:	460b      	mov	r3, r1
 800530c:	4610      	mov	r0, r2
 800530e:	4619      	mov	r1, r3
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	461a      	mov	r2, r3
 8005314:	f04f 0300 	mov.w	r3, #0
 8005318:	f7fb fe38 	bl	8000f8c <__aeabi_uldivmod>
 800531c:	4602      	mov	r2, r0
 800531e:	460b      	mov	r3, r1
 8005320:	4613      	mov	r3, r2
 8005322:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005324:	4b0b      	ldr	r3, [pc, #44]	; (8005354 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005326:	685b      	ldr	r3, [r3, #4]
 8005328:	0c1b      	lsrs	r3, r3, #16
 800532a:	f003 0303 	and.w	r3, r3, #3
 800532e:	3301      	adds	r3, #1
 8005330:	005b      	lsls	r3, r3, #1
 8005332:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8005334:	68fa      	ldr	r2, [r7, #12]
 8005336:	683b      	ldr	r3, [r7, #0]
 8005338:	fbb2 f3f3 	udiv	r3, r2, r3
 800533c:	60bb      	str	r3, [r7, #8]
      break;
 800533e:	e002      	b.n	8005346 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005340:	4b05      	ldr	r3, [pc, #20]	; (8005358 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8005342:	60bb      	str	r3, [r7, #8]
      break;
 8005344:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005346:	68bb      	ldr	r3, [r7, #8]
}
 8005348:	4618      	mov	r0, r3
 800534a:	3710      	adds	r7, #16
 800534c:	46bd      	mov	sp, r7
 800534e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8005352:	bf00      	nop
 8005354:	40023800 	.word	0x40023800
 8005358:	00f42400 	.word	0x00f42400

0800535c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800535c:	b480      	push	{r7}
 800535e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005360:	4b02      	ldr	r3, [pc, #8]	; (800536c <HAL_RCC_GetHCLKFreq+0x10>)
 8005362:	681b      	ldr	r3, [r3, #0]
}
 8005364:	4618      	mov	r0, r3
 8005366:	46bd      	mov	sp, r7
 8005368:	bc80      	pop	{r7}
 800536a:	4770      	bx	lr
 800536c:	20000004 	.word	0x20000004

08005370 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005370:	b580      	push	{r7, lr}
 8005372:	b082      	sub	sp, #8
 8005374:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> POSITION_VAL(RCC_CFGR_PPRE1)]);
 8005376:	f7ff fff1 	bl	800535c <HAL_RCC_GetHCLKFreq>
 800537a:	4601      	mov	r1, r0
 800537c:	4b0b      	ldr	r3, [pc, #44]	; (80053ac <HAL_RCC_GetPCLK1Freq+0x3c>)
 800537e:	689b      	ldr	r3, [r3, #8]
 8005380:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8005384:	f44f 52e0 	mov.w	r2, #7168	; 0x1c00
 8005388:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800538a:	687a      	ldr	r2, [r7, #4]
 800538c:	fa92 f2a2 	rbit	r2, r2
 8005390:	603a      	str	r2, [r7, #0]
  return result;
 8005392:	683a      	ldr	r2, [r7, #0]
 8005394:	fab2 f282 	clz	r2, r2
 8005398:	b2d2      	uxtb	r2, r2
 800539a:	40d3      	lsrs	r3, r2
 800539c:	4a04      	ldr	r2, [pc, #16]	; (80053b0 <HAL_RCC_GetPCLK1Freq+0x40>)
 800539e:	5cd3      	ldrb	r3, [r2, r3]
 80053a0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80053a4:	4618      	mov	r0, r3
 80053a6:	3708      	adds	r7, #8
 80053a8:	46bd      	mov	sp, r7
 80053aa:	bd80      	pop	{r7, pc}
 80053ac:	40023800 	.word	0x40023800
 80053b0:	08009dc0 	.word	0x08009dc0

080053b4 <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 80053b4:	b580      	push	{r7, lr}
 80053b6:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 80053b8:	4b06      	ldr	r3, [pc, #24]	; (80053d4 <HAL_RCC_NMI_IRQHandler+0x20>)
 80053ba:	68db      	ldr	r3, [r3, #12]
 80053bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053c0:	2b80      	cmp	r3, #128	; 0x80
 80053c2:	d104      	bne.n	80053ce <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 80053c4:	f000 f80a 	bl	80053dc <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 80053c8:	4b03      	ldr	r3, [pc, #12]	; (80053d8 <HAL_RCC_NMI_IRQHandler+0x24>)
 80053ca:	2280      	movs	r2, #128	; 0x80
 80053cc:	701a      	strb	r2, [r3, #0]
  }
}
 80053ce:	bf00      	nop
 80053d0:	bd80      	pop	{r7, pc}
 80053d2:	bf00      	nop
 80053d4:	40023800 	.word	0x40023800
 80053d8:	4002380e 	.word	0x4002380e

080053dc <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval None
  */
__weak void HAL_RCC_CSSCallback(void)
{
 80053dc:	b480      	push	{r7}
 80053de:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback could be implemented in the user file
   */
}
 80053e0:	bf00      	nop
 80053e2:	46bd      	mov	sp, r7
 80053e4:	bc80      	pop	{r7}
 80053e6:	4770      	bx	lr

080053e8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80053e8:	b580      	push	{r7, lr}
 80053ea:	b082      	sub	sp, #8
 80053ec:	af00      	add	r7, sp, #0
 80053ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d101      	bne.n	80053fa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80053f6:	2301      	movs	r3, #1
 80053f8:	e041      	b.n	800547e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005400:	b2db      	uxtb	r3, r3
 8005402:	2b00      	cmp	r3, #0
 8005404:	d106      	bne.n	8005414 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	2200      	movs	r2, #0
 800540a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800540e:	6878      	ldr	r0, [r7, #4]
 8005410:	f7fc fe2a 	bl	8002068 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	2202      	movs	r2, #2
 8005418:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681a      	ldr	r2, [r3, #0]
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	3304      	adds	r3, #4
 8005424:	4619      	mov	r1, r3
 8005426:	4610      	mov	r0, r2
 8005428:	f000 fa2e 	bl	8005888 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	2201      	movs	r2, #1
 8005430:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	2201      	movs	r2, #1
 8005438:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	2201      	movs	r2, #1
 8005440:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	2201      	movs	r2, #1
 8005448:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	2201      	movs	r2, #1
 8005450:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	2201      	movs	r2, #1
 8005458:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	2201      	movs	r2, #1
 8005460:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	2201      	movs	r2, #1
 8005468:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	2201      	movs	r2, #1
 8005470:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	2201      	movs	r2, #1
 8005478:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800547c:	2300      	movs	r3, #0
}
 800547e:	4618      	mov	r0, r3
 8005480:	3708      	adds	r7, #8
 8005482:	46bd      	mov	sp, r7
 8005484:	bd80      	pop	{r7, pc}
	...

08005488 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005488:	b480      	push	{r7}
 800548a:	b085      	sub	sp, #20
 800548c:	af00      	add	r7, sp, #0
 800548e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005496:	b2db      	uxtb	r3, r3
 8005498:	2b01      	cmp	r3, #1
 800549a:	d001      	beq.n	80054a0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800549c:	2301      	movs	r3, #1
 800549e:	e046      	b.n	800552e <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	2202      	movs	r2, #2
 80054a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	4a22      	ldr	r2, [pc, #136]	; (8005538 <HAL_TIM_Base_Start+0xb0>)
 80054ae:	4293      	cmp	r3, r2
 80054b0:	d022      	beq.n	80054f8 <HAL_TIM_Base_Start+0x70>
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80054ba:	d01d      	beq.n	80054f8 <HAL_TIM_Base_Start+0x70>
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	4a1e      	ldr	r2, [pc, #120]	; (800553c <HAL_TIM_Base_Start+0xb4>)
 80054c2:	4293      	cmp	r3, r2
 80054c4:	d018      	beq.n	80054f8 <HAL_TIM_Base_Start+0x70>
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	4a1d      	ldr	r2, [pc, #116]	; (8005540 <HAL_TIM_Base_Start+0xb8>)
 80054cc:	4293      	cmp	r3, r2
 80054ce:	d013      	beq.n	80054f8 <HAL_TIM_Base_Start+0x70>
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	4a1b      	ldr	r2, [pc, #108]	; (8005544 <HAL_TIM_Base_Start+0xbc>)
 80054d6:	4293      	cmp	r3, r2
 80054d8:	d00e      	beq.n	80054f8 <HAL_TIM_Base_Start+0x70>
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	4a1a      	ldr	r2, [pc, #104]	; (8005548 <HAL_TIM_Base_Start+0xc0>)
 80054e0:	4293      	cmp	r3, r2
 80054e2:	d009      	beq.n	80054f8 <HAL_TIM_Base_Start+0x70>
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	4a18      	ldr	r2, [pc, #96]	; (800554c <HAL_TIM_Base_Start+0xc4>)
 80054ea:	4293      	cmp	r3, r2
 80054ec:	d004      	beq.n	80054f8 <HAL_TIM_Base_Start+0x70>
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	4a17      	ldr	r2, [pc, #92]	; (8005550 <HAL_TIM_Base_Start+0xc8>)
 80054f4:	4293      	cmp	r3, r2
 80054f6:	d111      	bne.n	800551c <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	689b      	ldr	r3, [r3, #8]
 80054fe:	f003 0307 	and.w	r3, r3, #7
 8005502:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	2b06      	cmp	r3, #6
 8005508:	d010      	beq.n	800552c <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	681a      	ldr	r2, [r3, #0]
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	f042 0201 	orr.w	r2, r2, #1
 8005518:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800551a:	e007      	b.n	800552c <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	681a      	ldr	r2, [r3, #0]
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	f042 0201 	orr.w	r2, r2, #1
 800552a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800552c:	2300      	movs	r3, #0
}
 800552e:	4618      	mov	r0, r3
 8005530:	3714      	adds	r7, #20
 8005532:	46bd      	mov	sp, r7
 8005534:	bc80      	pop	{r7}
 8005536:	4770      	bx	lr
 8005538:	40010000 	.word	0x40010000
 800553c:	40000400 	.word	0x40000400
 8005540:	40000800 	.word	0x40000800
 8005544:	40000c00 	.word	0x40000c00
 8005548:	40010400 	.word	0x40010400
 800554c:	40014000 	.word	0x40014000
 8005550:	40001800 	.word	0x40001800

08005554 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005554:	b480      	push	{r7}
 8005556:	b085      	sub	sp, #20
 8005558:	af00      	add	r7, sp, #0
 800555a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005562:	b2db      	uxtb	r3, r3
 8005564:	2b01      	cmp	r3, #1
 8005566:	d001      	beq.n	800556c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005568:	2301      	movs	r3, #1
 800556a:	e04e      	b.n	800560a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	2202      	movs	r2, #2
 8005570:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	68da      	ldr	r2, [r3, #12]
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	f042 0201 	orr.w	r2, r2, #1
 8005582:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	4a22      	ldr	r2, [pc, #136]	; (8005614 <HAL_TIM_Base_Start_IT+0xc0>)
 800558a:	4293      	cmp	r3, r2
 800558c:	d022      	beq.n	80055d4 <HAL_TIM_Base_Start_IT+0x80>
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005596:	d01d      	beq.n	80055d4 <HAL_TIM_Base_Start_IT+0x80>
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	4a1e      	ldr	r2, [pc, #120]	; (8005618 <HAL_TIM_Base_Start_IT+0xc4>)
 800559e:	4293      	cmp	r3, r2
 80055a0:	d018      	beq.n	80055d4 <HAL_TIM_Base_Start_IT+0x80>
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	4a1d      	ldr	r2, [pc, #116]	; (800561c <HAL_TIM_Base_Start_IT+0xc8>)
 80055a8:	4293      	cmp	r3, r2
 80055aa:	d013      	beq.n	80055d4 <HAL_TIM_Base_Start_IT+0x80>
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	4a1b      	ldr	r2, [pc, #108]	; (8005620 <HAL_TIM_Base_Start_IT+0xcc>)
 80055b2:	4293      	cmp	r3, r2
 80055b4:	d00e      	beq.n	80055d4 <HAL_TIM_Base_Start_IT+0x80>
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	4a1a      	ldr	r2, [pc, #104]	; (8005624 <HAL_TIM_Base_Start_IT+0xd0>)
 80055bc:	4293      	cmp	r3, r2
 80055be:	d009      	beq.n	80055d4 <HAL_TIM_Base_Start_IT+0x80>
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	4a18      	ldr	r2, [pc, #96]	; (8005628 <HAL_TIM_Base_Start_IT+0xd4>)
 80055c6:	4293      	cmp	r3, r2
 80055c8:	d004      	beq.n	80055d4 <HAL_TIM_Base_Start_IT+0x80>
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	4a17      	ldr	r2, [pc, #92]	; (800562c <HAL_TIM_Base_Start_IT+0xd8>)
 80055d0:	4293      	cmp	r3, r2
 80055d2:	d111      	bne.n	80055f8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	689b      	ldr	r3, [r3, #8]
 80055da:	f003 0307 	and.w	r3, r3, #7
 80055de:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	2b06      	cmp	r3, #6
 80055e4:	d010      	beq.n	8005608 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	681a      	ldr	r2, [r3, #0]
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	f042 0201 	orr.w	r2, r2, #1
 80055f4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80055f6:	e007      	b.n	8005608 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	681a      	ldr	r2, [r3, #0]
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	f042 0201 	orr.w	r2, r2, #1
 8005606:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005608:	2300      	movs	r3, #0
}
 800560a:	4618      	mov	r0, r3
 800560c:	3714      	adds	r7, #20
 800560e:	46bd      	mov	sp, r7
 8005610:	bc80      	pop	{r7}
 8005612:	4770      	bx	lr
 8005614:	40010000 	.word	0x40010000
 8005618:	40000400 	.word	0x40000400
 800561c:	40000800 	.word	0x40000800
 8005620:	40000c00 	.word	0x40000c00
 8005624:	40010400 	.word	0x40010400
 8005628:	40014000 	.word	0x40014000
 800562c:	40001800 	.word	0x40001800

08005630 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005630:	b580      	push	{r7, lr}
 8005632:	b082      	sub	sp, #8
 8005634:	af00      	add	r7, sp, #0
 8005636:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	691b      	ldr	r3, [r3, #16]
 800563e:	f003 0302 	and.w	r3, r3, #2
 8005642:	2b02      	cmp	r3, #2
 8005644:	d122      	bne.n	800568c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	68db      	ldr	r3, [r3, #12]
 800564c:	f003 0302 	and.w	r3, r3, #2
 8005650:	2b02      	cmp	r3, #2
 8005652:	d11b      	bne.n	800568c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	f06f 0202 	mvn.w	r2, #2
 800565c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	2201      	movs	r2, #1
 8005662:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	699b      	ldr	r3, [r3, #24]
 800566a:	f003 0303 	and.w	r3, r3, #3
 800566e:	2b00      	cmp	r3, #0
 8005670:	d003      	beq.n	800567a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005672:	6878      	ldr	r0, [r7, #4]
 8005674:	f000 f8ed 	bl	8005852 <HAL_TIM_IC_CaptureCallback>
 8005678:	e005      	b.n	8005686 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800567a:	6878      	ldr	r0, [r7, #4]
 800567c:	f000 f8e0 	bl	8005840 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005680:	6878      	ldr	r0, [r7, #4]
 8005682:	f000 f8ef 	bl	8005864 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	2200      	movs	r2, #0
 800568a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	691b      	ldr	r3, [r3, #16]
 8005692:	f003 0304 	and.w	r3, r3, #4
 8005696:	2b04      	cmp	r3, #4
 8005698:	d122      	bne.n	80056e0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	68db      	ldr	r3, [r3, #12]
 80056a0:	f003 0304 	and.w	r3, r3, #4
 80056a4:	2b04      	cmp	r3, #4
 80056a6:	d11b      	bne.n	80056e0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	f06f 0204 	mvn.w	r2, #4
 80056b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	2202      	movs	r2, #2
 80056b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	699b      	ldr	r3, [r3, #24]
 80056be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d003      	beq.n	80056ce <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80056c6:	6878      	ldr	r0, [r7, #4]
 80056c8:	f000 f8c3 	bl	8005852 <HAL_TIM_IC_CaptureCallback>
 80056cc:	e005      	b.n	80056da <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80056ce:	6878      	ldr	r0, [r7, #4]
 80056d0:	f000 f8b6 	bl	8005840 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80056d4:	6878      	ldr	r0, [r7, #4]
 80056d6:	f000 f8c5 	bl	8005864 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	2200      	movs	r2, #0
 80056de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	691b      	ldr	r3, [r3, #16]
 80056e6:	f003 0308 	and.w	r3, r3, #8
 80056ea:	2b08      	cmp	r3, #8
 80056ec:	d122      	bne.n	8005734 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	68db      	ldr	r3, [r3, #12]
 80056f4:	f003 0308 	and.w	r3, r3, #8
 80056f8:	2b08      	cmp	r3, #8
 80056fa:	d11b      	bne.n	8005734 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	f06f 0208 	mvn.w	r2, #8
 8005704:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	2204      	movs	r2, #4
 800570a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	69db      	ldr	r3, [r3, #28]
 8005712:	f003 0303 	and.w	r3, r3, #3
 8005716:	2b00      	cmp	r3, #0
 8005718:	d003      	beq.n	8005722 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800571a:	6878      	ldr	r0, [r7, #4]
 800571c:	f000 f899 	bl	8005852 <HAL_TIM_IC_CaptureCallback>
 8005720:	e005      	b.n	800572e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005722:	6878      	ldr	r0, [r7, #4]
 8005724:	f000 f88c 	bl	8005840 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005728:	6878      	ldr	r0, [r7, #4]
 800572a:	f000 f89b 	bl	8005864 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	2200      	movs	r2, #0
 8005732:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	691b      	ldr	r3, [r3, #16]
 800573a:	f003 0310 	and.w	r3, r3, #16
 800573e:	2b10      	cmp	r3, #16
 8005740:	d122      	bne.n	8005788 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	68db      	ldr	r3, [r3, #12]
 8005748:	f003 0310 	and.w	r3, r3, #16
 800574c:	2b10      	cmp	r3, #16
 800574e:	d11b      	bne.n	8005788 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	f06f 0210 	mvn.w	r2, #16
 8005758:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	2208      	movs	r2, #8
 800575e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	69db      	ldr	r3, [r3, #28]
 8005766:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800576a:	2b00      	cmp	r3, #0
 800576c:	d003      	beq.n	8005776 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800576e:	6878      	ldr	r0, [r7, #4]
 8005770:	f000 f86f 	bl	8005852 <HAL_TIM_IC_CaptureCallback>
 8005774:	e005      	b.n	8005782 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005776:	6878      	ldr	r0, [r7, #4]
 8005778:	f000 f862 	bl	8005840 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800577c:	6878      	ldr	r0, [r7, #4]
 800577e:	f000 f871 	bl	8005864 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	2200      	movs	r2, #0
 8005786:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	691b      	ldr	r3, [r3, #16]
 800578e:	f003 0301 	and.w	r3, r3, #1
 8005792:	2b01      	cmp	r3, #1
 8005794:	d10e      	bne.n	80057b4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	68db      	ldr	r3, [r3, #12]
 800579c:	f003 0301 	and.w	r3, r3, #1
 80057a0:	2b01      	cmp	r3, #1
 80057a2:	d107      	bne.n	80057b4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	f06f 0201 	mvn.w	r2, #1
 80057ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80057ae:	6878      	ldr	r0, [r7, #4]
 80057b0:	f7fc f8b8 	bl	8001924 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	691b      	ldr	r3, [r3, #16]
 80057ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057be:	2b80      	cmp	r3, #128	; 0x80
 80057c0:	d10e      	bne.n	80057e0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	68db      	ldr	r3, [r3, #12]
 80057c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057cc:	2b80      	cmp	r3, #128	; 0x80
 80057ce:	d107      	bne.n	80057e0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80057d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80057da:	6878      	ldr	r0, [r7, #4]
 80057dc:	f000 f8fb 	bl	80059d6 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	691b      	ldr	r3, [r3, #16]
 80057e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057ea:	2b40      	cmp	r3, #64	; 0x40
 80057ec:	d10e      	bne.n	800580c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	68db      	ldr	r3, [r3, #12]
 80057f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057f8:	2b40      	cmp	r3, #64	; 0x40
 80057fa:	d107      	bne.n	800580c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005804:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005806:	6878      	ldr	r0, [r7, #4]
 8005808:	f000 f835 	bl	8005876 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	691b      	ldr	r3, [r3, #16]
 8005812:	f003 0320 	and.w	r3, r3, #32
 8005816:	2b20      	cmp	r3, #32
 8005818:	d10e      	bne.n	8005838 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	68db      	ldr	r3, [r3, #12]
 8005820:	f003 0320 	and.w	r3, r3, #32
 8005824:	2b20      	cmp	r3, #32
 8005826:	d107      	bne.n	8005838 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	f06f 0220 	mvn.w	r2, #32
 8005830:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005832:	6878      	ldr	r0, [r7, #4]
 8005834:	f000 f8c6 	bl	80059c4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005838:	bf00      	nop
 800583a:	3708      	adds	r7, #8
 800583c:	46bd      	mov	sp, r7
 800583e:	bd80      	pop	{r7, pc}

08005840 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005840:	b480      	push	{r7}
 8005842:	b083      	sub	sp, #12
 8005844:	af00      	add	r7, sp, #0
 8005846:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005848:	bf00      	nop
 800584a:	370c      	adds	r7, #12
 800584c:	46bd      	mov	sp, r7
 800584e:	bc80      	pop	{r7}
 8005850:	4770      	bx	lr

08005852 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005852:	b480      	push	{r7}
 8005854:	b083      	sub	sp, #12
 8005856:	af00      	add	r7, sp, #0
 8005858:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800585a:	bf00      	nop
 800585c:	370c      	adds	r7, #12
 800585e:	46bd      	mov	sp, r7
 8005860:	bc80      	pop	{r7}
 8005862:	4770      	bx	lr

08005864 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005864:	b480      	push	{r7}
 8005866:	b083      	sub	sp, #12
 8005868:	af00      	add	r7, sp, #0
 800586a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800586c:	bf00      	nop
 800586e:	370c      	adds	r7, #12
 8005870:	46bd      	mov	sp, r7
 8005872:	bc80      	pop	{r7}
 8005874:	4770      	bx	lr

08005876 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005876:	b480      	push	{r7}
 8005878:	b083      	sub	sp, #12
 800587a:	af00      	add	r7, sp, #0
 800587c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800587e:	bf00      	nop
 8005880:	370c      	adds	r7, #12
 8005882:	46bd      	mov	sp, r7
 8005884:	bc80      	pop	{r7}
 8005886:	4770      	bx	lr

08005888 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005888:	b480      	push	{r7}
 800588a:	b085      	sub	sp, #20
 800588c:	af00      	add	r7, sp, #0
 800588e:	6078      	str	r0, [r7, #4]
 8005890:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	4a3f      	ldr	r2, [pc, #252]	; (8005998 <TIM_Base_SetConfig+0x110>)
 800589c:	4293      	cmp	r3, r2
 800589e:	d013      	beq.n	80058c8 <TIM_Base_SetConfig+0x40>
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80058a6:	d00f      	beq.n	80058c8 <TIM_Base_SetConfig+0x40>
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	4a3c      	ldr	r2, [pc, #240]	; (800599c <TIM_Base_SetConfig+0x114>)
 80058ac:	4293      	cmp	r3, r2
 80058ae:	d00b      	beq.n	80058c8 <TIM_Base_SetConfig+0x40>
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	4a3b      	ldr	r2, [pc, #236]	; (80059a0 <TIM_Base_SetConfig+0x118>)
 80058b4:	4293      	cmp	r3, r2
 80058b6:	d007      	beq.n	80058c8 <TIM_Base_SetConfig+0x40>
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	4a3a      	ldr	r2, [pc, #232]	; (80059a4 <TIM_Base_SetConfig+0x11c>)
 80058bc:	4293      	cmp	r3, r2
 80058be:	d003      	beq.n	80058c8 <TIM_Base_SetConfig+0x40>
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	4a39      	ldr	r2, [pc, #228]	; (80059a8 <TIM_Base_SetConfig+0x120>)
 80058c4:	4293      	cmp	r3, r2
 80058c6:	d108      	bne.n	80058da <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058ce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80058d0:	683b      	ldr	r3, [r7, #0]
 80058d2:	685b      	ldr	r3, [r3, #4]
 80058d4:	68fa      	ldr	r2, [r7, #12]
 80058d6:	4313      	orrs	r3, r2
 80058d8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	4a2e      	ldr	r2, [pc, #184]	; (8005998 <TIM_Base_SetConfig+0x110>)
 80058de:	4293      	cmp	r3, r2
 80058e0:	d02b      	beq.n	800593a <TIM_Base_SetConfig+0xb2>
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80058e8:	d027      	beq.n	800593a <TIM_Base_SetConfig+0xb2>
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	4a2b      	ldr	r2, [pc, #172]	; (800599c <TIM_Base_SetConfig+0x114>)
 80058ee:	4293      	cmp	r3, r2
 80058f0:	d023      	beq.n	800593a <TIM_Base_SetConfig+0xb2>
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	4a2a      	ldr	r2, [pc, #168]	; (80059a0 <TIM_Base_SetConfig+0x118>)
 80058f6:	4293      	cmp	r3, r2
 80058f8:	d01f      	beq.n	800593a <TIM_Base_SetConfig+0xb2>
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	4a29      	ldr	r2, [pc, #164]	; (80059a4 <TIM_Base_SetConfig+0x11c>)
 80058fe:	4293      	cmp	r3, r2
 8005900:	d01b      	beq.n	800593a <TIM_Base_SetConfig+0xb2>
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	4a28      	ldr	r2, [pc, #160]	; (80059a8 <TIM_Base_SetConfig+0x120>)
 8005906:	4293      	cmp	r3, r2
 8005908:	d017      	beq.n	800593a <TIM_Base_SetConfig+0xb2>
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	4a27      	ldr	r2, [pc, #156]	; (80059ac <TIM_Base_SetConfig+0x124>)
 800590e:	4293      	cmp	r3, r2
 8005910:	d013      	beq.n	800593a <TIM_Base_SetConfig+0xb2>
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	4a26      	ldr	r2, [pc, #152]	; (80059b0 <TIM_Base_SetConfig+0x128>)
 8005916:	4293      	cmp	r3, r2
 8005918:	d00f      	beq.n	800593a <TIM_Base_SetConfig+0xb2>
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	4a25      	ldr	r2, [pc, #148]	; (80059b4 <TIM_Base_SetConfig+0x12c>)
 800591e:	4293      	cmp	r3, r2
 8005920:	d00b      	beq.n	800593a <TIM_Base_SetConfig+0xb2>
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	4a24      	ldr	r2, [pc, #144]	; (80059b8 <TIM_Base_SetConfig+0x130>)
 8005926:	4293      	cmp	r3, r2
 8005928:	d007      	beq.n	800593a <TIM_Base_SetConfig+0xb2>
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	4a23      	ldr	r2, [pc, #140]	; (80059bc <TIM_Base_SetConfig+0x134>)
 800592e:	4293      	cmp	r3, r2
 8005930:	d003      	beq.n	800593a <TIM_Base_SetConfig+0xb2>
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	4a22      	ldr	r2, [pc, #136]	; (80059c0 <TIM_Base_SetConfig+0x138>)
 8005936:	4293      	cmp	r3, r2
 8005938:	d108      	bne.n	800594c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005940:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005942:	683b      	ldr	r3, [r7, #0]
 8005944:	68db      	ldr	r3, [r3, #12]
 8005946:	68fa      	ldr	r2, [r7, #12]
 8005948:	4313      	orrs	r3, r2
 800594a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005952:	683b      	ldr	r3, [r7, #0]
 8005954:	695b      	ldr	r3, [r3, #20]
 8005956:	4313      	orrs	r3, r2
 8005958:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	68fa      	ldr	r2, [r7, #12]
 800595e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005960:	683b      	ldr	r3, [r7, #0]
 8005962:	689a      	ldr	r2, [r3, #8]
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005968:	683b      	ldr	r3, [r7, #0]
 800596a:	681a      	ldr	r2, [r3, #0]
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	4a09      	ldr	r2, [pc, #36]	; (8005998 <TIM_Base_SetConfig+0x110>)
 8005974:	4293      	cmp	r3, r2
 8005976:	d003      	beq.n	8005980 <TIM_Base_SetConfig+0xf8>
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	4a0b      	ldr	r2, [pc, #44]	; (80059a8 <TIM_Base_SetConfig+0x120>)
 800597c:	4293      	cmp	r3, r2
 800597e:	d103      	bne.n	8005988 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005980:	683b      	ldr	r3, [r7, #0]
 8005982:	691a      	ldr	r2, [r3, #16]
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	2201      	movs	r2, #1
 800598c:	615a      	str	r2, [r3, #20]
}
 800598e:	bf00      	nop
 8005990:	3714      	adds	r7, #20
 8005992:	46bd      	mov	sp, r7
 8005994:	bc80      	pop	{r7}
 8005996:	4770      	bx	lr
 8005998:	40010000 	.word	0x40010000
 800599c:	40000400 	.word	0x40000400
 80059a0:	40000800 	.word	0x40000800
 80059a4:	40000c00 	.word	0x40000c00
 80059a8:	40010400 	.word	0x40010400
 80059ac:	40014000 	.word	0x40014000
 80059b0:	40014400 	.word	0x40014400
 80059b4:	40014800 	.word	0x40014800
 80059b8:	40001800 	.word	0x40001800
 80059bc:	40001c00 	.word	0x40001c00
 80059c0:	40002000 	.word	0x40002000

080059c4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80059c4:	b480      	push	{r7}
 80059c6:	b083      	sub	sp, #12
 80059c8:	af00      	add	r7, sp, #0
 80059ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80059cc:	bf00      	nop
 80059ce:	370c      	adds	r7, #12
 80059d0:	46bd      	mov	sp, r7
 80059d2:	bc80      	pop	{r7}
 80059d4:	4770      	bx	lr

080059d6 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80059d6:	b480      	push	{r7}
 80059d8:	b083      	sub	sp, #12
 80059da:	af00      	add	r7, sp, #0
 80059dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80059de:	bf00      	nop
 80059e0:	370c      	adds	r7, #12
 80059e2:	46bd      	mov	sp, r7
 80059e4:	bc80      	pop	{r7}
 80059e6:	4770      	bx	lr

080059e8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80059e8:	b084      	sub	sp, #16
 80059ea:	b580      	push	{r7, lr}
 80059ec:	b084      	sub	sp, #16
 80059ee:	af00      	add	r7, sp, #0
 80059f0:	6078      	str	r0, [r7, #4]
 80059f2:	f107 001c 	add.w	r0, r7, #28
 80059f6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80059fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059fc:	2b01      	cmp	r3, #1
 80059fe:	d122      	bne.n	8005a46 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a04:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	68db      	ldr	r3, [r3, #12]
 8005a10:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8005a14:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005a18:	687a      	ldr	r2, [r7, #4]
 8005a1a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	68db      	ldr	r3, [r3, #12]
 8005a20:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005a28:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005a2a:	2b01      	cmp	r3, #1
 8005a2c:	d105      	bne.n	8005a3a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	68db      	ldr	r3, [r3, #12]
 8005a32:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005a3a:	6878      	ldr	r0, [r7, #4]
 8005a3c:	f001 fafa 	bl	8007034 <USB_CoreReset>
 8005a40:	4603      	mov	r3, r0
 8005a42:	73fb      	strb	r3, [r7, #15]
 8005a44:	e010      	b.n	8005a68 <USB_CoreInit+0x80>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	68db      	ldr	r3, [r3, #12]
 8005a4a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005a52:	6878      	ldr	r0, [r7, #4]
 8005a54:	f001 faee 	bl	8007034 <USB_CoreReset>
 8005a58:	4603      	mov	r3, r0
 8005a5a:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a60:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8005a68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a6a:	2b01      	cmp	r3, #1
 8005a6c:	d10b      	bne.n	8005a86 <USB_CoreInit+0x9e>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	689b      	ldr	r3, [r3, #8]
 8005a72:	f043 0206 	orr.w	r2, r3, #6
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	689b      	ldr	r3, [r3, #8]
 8005a7e:	f043 0220 	orr.w	r2, r3, #32
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005a86:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a88:	4618      	mov	r0, r3
 8005a8a:	3710      	adds	r7, #16
 8005a8c:	46bd      	mov	sp, r7
 8005a8e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005a92:	b004      	add	sp, #16
 8005a94:	4770      	bx	lr
	...

08005a98 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8005a98:	b480      	push	{r7}
 8005a9a:	b087      	sub	sp, #28
 8005a9c:	af00      	add	r7, sp, #0
 8005a9e:	60f8      	str	r0, [r7, #12]
 8005aa0:	60b9      	str	r1, [r7, #8]
 8005aa2:	4613      	mov	r3, r2
 8005aa4:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8005aa6:	79fb      	ldrb	r3, [r7, #7]
 8005aa8:	2b02      	cmp	r3, #2
 8005aaa:	d165      	bne.n	8005b78 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8005aac:	68bb      	ldr	r3, [r7, #8]
 8005aae:	4a41      	ldr	r2, [pc, #260]	; (8005bb4 <USB_SetTurnaroundTime+0x11c>)
 8005ab0:	4293      	cmp	r3, r2
 8005ab2:	d906      	bls.n	8005ac2 <USB_SetTurnaroundTime+0x2a>
 8005ab4:	68bb      	ldr	r3, [r7, #8]
 8005ab6:	4a40      	ldr	r2, [pc, #256]	; (8005bb8 <USB_SetTurnaroundTime+0x120>)
 8005ab8:	4293      	cmp	r3, r2
 8005aba:	d202      	bcs.n	8005ac2 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8005abc:	230f      	movs	r3, #15
 8005abe:	617b      	str	r3, [r7, #20]
 8005ac0:	e062      	b.n	8005b88 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8005ac2:	68bb      	ldr	r3, [r7, #8]
 8005ac4:	4a3c      	ldr	r2, [pc, #240]	; (8005bb8 <USB_SetTurnaroundTime+0x120>)
 8005ac6:	4293      	cmp	r3, r2
 8005ac8:	d306      	bcc.n	8005ad8 <USB_SetTurnaroundTime+0x40>
 8005aca:	68bb      	ldr	r3, [r7, #8]
 8005acc:	4a3b      	ldr	r2, [pc, #236]	; (8005bbc <USB_SetTurnaroundTime+0x124>)
 8005ace:	4293      	cmp	r3, r2
 8005ad0:	d202      	bcs.n	8005ad8 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8005ad2:	230e      	movs	r3, #14
 8005ad4:	617b      	str	r3, [r7, #20]
 8005ad6:	e057      	b.n	8005b88 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8005ad8:	68bb      	ldr	r3, [r7, #8]
 8005ada:	4a38      	ldr	r2, [pc, #224]	; (8005bbc <USB_SetTurnaroundTime+0x124>)
 8005adc:	4293      	cmp	r3, r2
 8005ade:	d306      	bcc.n	8005aee <USB_SetTurnaroundTime+0x56>
 8005ae0:	68bb      	ldr	r3, [r7, #8]
 8005ae2:	4a37      	ldr	r2, [pc, #220]	; (8005bc0 <USB_SetTurnaroundTime+0x128>)
 8005ae4:	4293      	cmp	r3, r2
 8005ae6:	d202      	bcs.n	8005aee <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8005ae8:	230d      	movs	r3, #13
 8005aea:	617b      	str	r3, [r7, #20]
 8005aec:	e04c      	b.n	8005b88 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8005aee:	68bb      	ldr	r3, [r7, #8]
 8005af0:	4a33      	ldr	r2, [pc, #204]	; (8005bc0 <USB_SetTurnaroundTime+0x128>)
 8005af2:	4293      	cmp	r3, r2
 8005af4:	d306      	bcc.n	8005b04 <USB_SetTurnaroundTime+0x6c>
 8005af6:	68bb      	ldr	r3, [r7, #8]
 8005af8:	4a32      	ldr	r2, [pc, #200]	; (8005bc4 <USB_SetTurnaroundTime+0x12c>)
 8005afa:	4293      	cmp	r3, r2
 8005afc:	d802      	bhi.n	8005b04 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8005afe:	230c      	movs	r3, #12
 8005b00:	617b      	str	r3, [r7, #20]
 8005b02:	e041      	b.n	8005b88 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8005b04:	68bb      	ldr	r3, [r7, #8]
 8005b06:	4a2f      	ldr	r2, [pc, #188]	; (8005bc4 <USB_SetTurnaroundTime+0x12c>)
 8005b08:	4293      	cmp	r3, r2
 8005b0a:	d906      	bls.n	8005b1a <USB_SetTurnaroundTime+0x82>
 8005b0c:	68bb      	ldr	r3, [r7, #8]
 8005b0e:	4a2e      	ldr	r2, [pc, #184]	; (8005bc8 <USB_SetTurnaroundTime+0x130>)
 8005b10:	4293      	cmp	r3, r2
 8005b12:	d802      	bhi.n	8005b1a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8005b14:	230b      	movs	r3, #11
 8005b16:	617b      	str	r3, [r7, #20]
 8005b18:	e036      	b.n	8005b88 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8005b1a:	68bb      	ldr	r3, [r7, #8]
 8005b1c:	4a2a      	ldr	r2, [pc, #168]	; (8005bc8 <USB_SetTurnaroundTime+0x130>)
 8005b1e:	4293      	cmp	r3, r2
 8005b20:	d906      	bls.n	8005b30 <USB_SetTurnaroundTime+0x98>
 8005b22:	68bb      	ldr	r3, [r7, #8]
 8005b24:	4a29      	ldr	r2, [pc, #164]	; (8005bcc <USB_SetTurnaroundTime+0x134>)
 8005b26:	4293      	cmp	r3, r2
 8005b28:	d802      	bhi.n	8005b30 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8005b2a:	230a      	movs	r3, #10
 8005b2c:	617b      	str	r3, [r7, #20]
 8005b2e:	e02b      	b.n	8005b88 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8005b30:	68bb      	ldr	r3, [r7, #8]
 8005b32:	4a26      	ldr	r2, [pc, #152]	; (8005bcc <USB_SetTurnaroundTime+0x134>)
 8005b34:	4293      	cmp	r3, r2
 8005b36:	d906      	bls.n	8005b46 <USB_SetTurnaroundTime+0xae>
 8005b38:	68bb      	ldr	r3, [r7, #8]
 8005b3a:	4a25      	ldr	r2, [pc, #148]	; (8005bd0 <USB_SetTurnaroundTime+0x138>)
 8005b3c:	4293      	cmp	r3, r2
 8005b3e:	d202      	bcs.n	8005b46 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8005b40:	2309      	movs	r3, #9
 8005b42:	617b      	str	r3, [r7, #20]
 8005b44:	e020      	b.n	8005b88 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8005b46:	68bb      	ldr	r3, [r7, #8]
 8005b48:	4a21      	ldr	r2, [pc, #132]	; (8005bd0 <USB_SetTurnaroundTime+0x138>)
 8005b4a:	4293      	cmp	r3, r2
 8005b4c:	d306      	bcc.n	8005b5c <USB_SetTurnaroundTime+0xc4>
 8005b4e:	68bb      	ldr	r3, [r7, #8]
 8005b50:	4a20      	ldr	r2, [pc, #128]	; (8005bd4 <USB_SetTurnaroundTime+0x13c>)
 8005b52:	4293      	cmp	r3, r2
 8005b54:	d802      	bhi.n	8005b5c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8005b56:	2308      	movs	r3, #8
 8005b58:	617b      	str	r3, [r7, #20]
 8005b5a:	e015      	b.n	8005b88 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8005b5c:	68bb      	ldr	r3, [r7, #8]
 8005b5e:	4a1d      	ldr	r2, [pc, #116]	; (8005bd4 <USB_SetTurnaroundTime+0x13c>)
 8005b60:	4293      	cmp	r3, r2
 8005b62:	d906      	bls.n	8005b72 <USB_SetTurnaroundTime+0xda>
 8005b64:	68bb      	ldr	r3, [r7, #8]
 8005b66:	4a1c      	ldr	r2, [pc, #112]	; (8005bd8 <USB_SetTurnaroundTime+0x140>)
 8005b68:	4293      	cmp	r3, r2
 8005b6a:	d202      	bcs.n	8005b72 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8005b6c:	2307      	movs	r3, #7
 8005b6e:	617b      	str	r3, [r7, #20]
 8005b70:	e00a      	b.n	8005b88 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8005b72:	2306      	movs	r3, #6
 8005b74:	617b      	str	r3, [r7, #20]
 8005b76:	e007      	b.n	8005b88 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8005b78:	79fb      	ldrb	r3, [r7, #7]
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d102      	bne.n	8005b84 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8005b7e:	2309      	movs	r3, #9
 8005b80:	617b      	str	r3, [r7, #20]
 8005b82:	e001      	b.n	8005b88 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8005b84:	2309      	movs	r3, #9
 8005b86:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	68db      	ldr	r3, [r3, #12]
 8005b8c:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	68da      	ldr	r2, [r3, #12]
 8005b98:	697b      	ldr	r3, [r7, #20]
 8005b9a:	029b      	lsls	r3, r3, #10
 8005b9c:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8005ba0:	431a      	orrs	r2, r3
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005ba6:	2300      	movs	r3, #0
}
 8005ba8:	4618      	mov	r0, r3
 8005baa:	371c      	adds	r7, #28
 8005bac:	46bd      	mov	sp, r7
 8005bae:	bc80      	pop	{r7}
 8005bb0:	4770      	bx	lr
 8005bb2:	bf00      	nop
 8005bb4:	00d8acbf 	.word	0x00d8acbf
 8005bb8:	00e4e1c0 	.word	0x00e4e1c0
 8005bbc:	00f42400 	.word	0x00f42400
 8005bc0:	01067380 	.word	0x01067380
 8005bc4:	011a499f 	.word	0x011a499f
 8005bc8:	01312cff 	.word	0x01312cff
 8005bcc:	014ca43f 	.word	0x014ca43f
 8005bd0:	016e3600 	.word	0x016e3600
 8005bd4:	01a6ab1f 	.word	0x01a6ab1f
 8005bd8:	01e84800 	.word	0x01e84800

08005bdc <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005bdc:	b480      	push	{r7}
 8005bde:	b083      	sub	sp, #12
 8005be0:	af00      	add	r7, sp, #0
 8005be2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	689b      	ldr	r3, [r3, #8]
 8005be8:	f043 0201 	orr.w	r2, r3, #1
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005bf0:	2300      	movs	r3, #0
}
 8005bf2:	4618      	mov	r0, r3
 8005bf4:	370c      	adds	r7, #12
 8005bf6:	46bd      	mov	sp, r7
 8005bf8:	bc80      	pop	{r7}
 8005bfa:	4770      	bx	lr

08005bfc <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005bfc:	b480      	push	{r7}
 8005bfe:	b083      	sub	sp, #12
 8005c00:	af00      	add	r7, sp, #0
 8005c02:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	689b      	ldr	r3, [r3, #8]
 8005c08:	f023 0201 	bic.w	r2, r3, #1
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005c10:	2300      	movs	r3, #0
}
 8005c12:	4618      	mov	r0, r3
 8005c14:	370c      	adds	r7, #12
 8005c16:	46bd      	mov	sp, r7
 8005c18:	bc80      	pop	{r7}
 8005c1a:	4770      	bx	lr

08005c1c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005c1c:	b580      	push	{r7, lr}
 8005c1e:	b084      	sub	sp, #16
 8005c20:	af00      	add	r7, sp, #0
 8005c22:	6078      	str	r0, [r7, #4]
 8005c24:	460b      	mov	r3, r1
 8005c26:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005c28:	2300      	movs	r3, #0
 8005c2a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	68db      	ldr	r3, [r3, #12]
 8005c30:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005c38:	78fb      	ldrb	r3, [r7, #3]
 8005c3a:	2b01      	cmp	r3, #1
 8005c3c:	d115      	bne.n	8005c6a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	68db      	ldr	r3, [r3, #12]
 8005c42:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005c4a:	2001      	movs	r0, #1
 8005c4c:	f7fc fb8a 	bl	8002364 <HAL_Delay>
      ms++;
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	3301      	adds	r3, #1
 8005c54:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8005c56:	6878      	ldr	r0, [r7, #4]
 8005c58:	f001 f961 	bl	8006f1e <USB_GetMode>
 8005c5c:	4603      	mov	r3, r0
 8005c5e:	2b01      	cmp	r3, #1
 8005c60:	d01e      	beq.n	8005ca0 <USB_SetCurrentMode+0x84>
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	2b31      	cmp	r3, #49	; 0x31
 8005c66:	d9f0      	bls.n	8005c4a <USB_SetCurrentMode+0x2e>
 8005c68:	e01a      	b.n	8005ca0 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005c6a:	78fb      	ldrb	r3, [r7, #3]
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d115      	bne.n	8005c9c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	68db      	ldr	r3, [r3, #12]
 8005c74:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005c7c:	2001      	movs	r0, #1
 8005c7e:	f7fc fb71 	bl	8002364 <HAL_Delay>
      ms++;
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	3301      	adds	r3, #1
 8005c86:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8005c88:	6878      	ldr	r0, [r7, #4]
 8005c8a:	f001 f948 	bl	8006f1e <USB_GetMode>
 8005c8e:	4603      	mov	r3, r0
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d005      	beq.n	8005ca0 <USB_SetCurrentMode+0x84>
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	2b31      	cmp	r3, #49	; 0x31
 8005c98:	d9f0      	bls.n	8005c7c <USB_SetCurrentMode+0x60>
 8005c9a:	e001      	b.n	8005ca0 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005c9c:	2301      	movs	r3, #1
 8005c9e:	e005      	b.n	8005cac <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	2b32      	cmp	r3, #50	; 0x32
 8005ca4:	d101      	bne.n	8005caa <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005ca6:	2301      	movs	r3, #1
 8005ca8:	e000      	b.n	8005cac <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005caa:	2300      	movs	r3, #0
}
 8005cac:	4618      	mov	r0, r3
 8005cae:	3710      	adds	r7, #16
 8005cb0:	46bd      	mov	sp, r7
 8005cb2:	bd80      	pop	{r7, pc}

08005cb4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005cb4:	b084      	sub	sp, #16
 8005cb6:	b580      	push	{r7, lr}
 8005cb8:	b086      	sub	sp, #24
 8005cba:	af00      	add	r7, sp, #0
 8005cbc:	6078      	str	r0, [r7, #4]
 8005cbe:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005cc2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005cc6:	2300      	movs	r3, #0
 8005cc8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005cce:	2300      	movs	r3, #0
 8005cd0:	613b      	str	r3, [r7, #16]
 8005cd2:	e009      	b.n	8005ce8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005cd4:	687a      	ldr	r2, [r7, #4]
 8005cd6:	693b      	ldr	r3, [r7, #16]
 8005cd8:	3340      	adds	r3, #64	; 0x40
 8005cda:	009b      	lsls	r3, r3, #2
 8005cdc:	4413      	add	r3, r2
 8005cde:	2200      	movs	r2, #0
 8005ce0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005ce2:	693b      	ldr	r3, [r7, #16]
 8005ce4:	3301      	adds	r3, #1
 8005ce6:	613b      	str	r3, [r7, #16]
 8005ce8:	693b      	ldr	r3, [r7, #16]
 8005cea:	2b0e      	cmp	r3, #14
 8005cec:	d9f2      	bls.n	8005cd4 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005cee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d11c      	bne.n	8005d2e <USB_DevInit+0x7a>
  {
    /*
     * disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005cfa:	685b      	ldr	r3, [r3, #4]
 8005cfc:	68fa      	ldr	r2, [r7, #12]
 8005cfe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005d02:	f043 0302 	orr.w	r3, r3, #2
 8005d06:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d0c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d18:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d24:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	639a      	str	r2, [r3, #56]	; 0x38
 8005d2c:	e00b      	b.n	8005d46 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d32:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d3e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005d4c:	461a      	mov	r2, r3
 8005d4e:	2300      	movs	r3, #0
 8005d50:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d58:	4619      	mov	r1, r3
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d60:	461a      	mov	r2, r3
 8005d62:	680b      	ldr	r3, [r1, #0]
 8005d64:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005d66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d68:	2b01      	cmp	r3, #1
 8005d6a:	d10c      	bne.n	8005d86 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005d6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d104      	bne.n	8005d7c <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005d72:	2100      	movs	r1, #0
 8005d74:	6878      	ldr	r0, [r7, #4]
 8005d76:	f000 f945 	bl	8006004 <USB_SetDevSpeed>
 8005d7a:	e008      	b.n	8005d8e <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005d7c:	2101      	movs	r1, #1
 8005d7e:	6878      	ldr	r0, [r7, #4]
 8005d80:	f000 f940 	bl	8006004 <USB_SetDevSpeed>
 8005d84:	e003      	b.n	8005d8e <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005d86:	2103      	movs	r1, #3
 8005d88:	6878      	ldr	r0, [r7, #4]
 8005d8a:	f000 f93b 	bl	8006004 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005d8e:	2110      	movs	r1, #16
 8005d90:	6878      	ldr	r0, [r7, #4]
 8005d92:	f000 f8f3 	bl	8005f7c <USB_FlushTxFifo>
 8005d96:	4603      	mov	r3, r0
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d001      	beq.n	8005da0 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8005d9c:	2301      	movs	r3, #1
 8005d9e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005da0:	6878      	ldr	r0, [r7, #4]
 8005da2:	f000 f90f 	bl	8005fc4 <USB_FlushRxFifo>
 8005da6:	4603      	mov	r3, r0
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d001      	beq.n	8005db0 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8005dac:	2301      	movs	r3, #1
 8005dae:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005db6:	461a      	mov	r2, r3
 8005db8:	2300      	movs	r3, #0
 8005dba:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005dc2:	461a      	mov	r2, r3
 8005dc4:	2300      	movs	r3, #0
 8005dc6:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005dce:	461a      	mov	r2, r3
 8005dd0:	2300      	movs	r3, #0
 8005dd2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005dd4:	2300      	movs	r3, #0
 8005dd6:	613b      	str	r3, [r7, #16]
 8005dd8:	e043      	b.n	8005e62 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005dda:	693b      	ldr	r3, [r7, #16]
 8005ddc:	015a      	lsls	r2, r3, #5
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	4413      	add	r3, r2
 8005de2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005dec:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005df0:	d118      	bne.n	8005e24 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8005df2:	693b      	ldr	r3, [r7, #16]
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d10a      	bne.n	8005e0e <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005df8:	693b      	ldr	r3, [r7, #16]
 8005dfa:	015a      	lsls	r2, r3, #5
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	4413      	add	r3, r2
 8005e00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e04:	461a      	mov	r2, r3
 8005e06:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005e0a:	6013      	str	r3, [r2, #0]
 8005e0c:	e013      	b.n	8005e36 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005e0e:	693b      	ldr	r3, [r7, #16]
 8005e10:	015a      	lsls	r2, r3, #5
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	4413      	add	r3, r2
 8005e16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e1a:	461a      	mov	r2, r3
 8005e1c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005e20:	6013      	str	r3, [r2, #0]
 8005e22:	e008      	b.n	8005e36 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005e24:	693b      	ldr	r3, [r7, #16]
 8005e26:	015a      	lsls	r2, r3, #5
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	4413      	add	r3, r2
 8005e2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e30:	461a      	mov	r2, r3
 8005e32:	2300      	movs	r3, #0
 8005e34:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005e36:	693b      	ldr	r3, [r7, #16]
 8005e38:	015a      	lsls	r2, r3, #5
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	4413      	add	r3, r2
 8005e3e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e42:	461a      	mov	r2, r3
 8005e44:	2300      	movs	r3, #0
 8005e46:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005e48:	693b      	ldr	r3, [r7, #16]
 8005e4a:	015a      	lsls	r2, r3, #5
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	4413      	add	r3, r2
 8005e50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e54:	461a      	mov	r2, r3
 8005e56:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005e5a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005e5c:	693b      	ldr	r3, [r7, #16]
 8005e5e:	3301      	adds	r3, #1
 8005e60:	613b      	str	r3, [r7, #16]
 8005e62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e64:	693a      	ldr	r2, [r7, #16]
 8005e66:	429a      	cmp	r2, r3
 8005e68:	d3b7      	bcc.n	8005dda <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005e6a:	2300      	movs	r3, #0
 8005e6c:	613b      	str	r3, [r7, #16]
 8005e6e:	e043      	b.n	8005ef8 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005e70:	693b      	ldr	r3, [r7, #16]
 8005e72:	015a      	lsls	r2, r3, #5
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	4413      	add	r3, r2
 8005e78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005e82:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005e86:	d118      	bne.n	8005eba <USB_DevInit+0x206>
    {
      if (i == 0U)
 8005e88:	693b      	ldr	r3, [r7, #16]
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d10a      	bne.n	8005ea4 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005e8e:	693b      	ldr	r3, [r7, #16]
 8005e90:	015a      	lsls	r2, r3, #5
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	4413      	add	r3, r2
 8005e96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e9a:	461a      	mov	r2, r3
 8005e9c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005ea0:	6013      	str	r3, [r2, #0]
 8005ea2:	e013      	b.n	8005ecc <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005ea4:	693b      	ldr	r3, [r7, #16]
 8005ea6:	015a      	lsls	r2, r3, #5
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	4413      	add	r3, r2
 8005eac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005eb0:	461a      	mov	r2, r3
 8005eb2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005eb6:	6013      	str	r3, [r2, #0]
 8005eb8:	e008      	b.n	8005ecc <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005eba:	693b      	ldr	r3, [r7, #16]
 8005ebc:	015a      	lsls	r2, r3, #5
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	4413      	add	r3, r2
 8005ec2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ec6:	461a      	mov	r2, r3
 8005ec8:	2300      	movs	r3, #0
 8005eca:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005ecc:	693b      	ldr	r3, [r7, #16]
 8005ece:	015a      	lsls	r2, r3, #5
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	4413      	add	r3, r2
 8005ed4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ed8:	461a      	mov	r2, r3
 8005eda:	2300      	movs	r3, #0
 8005edc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005ede:	693b      	ldr	r3, [r7, #16]
 8005ee0:	015a      	lsls	r2, r3, #5
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	4413      	add	r3, r2
 8005ee6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005eea:	461a      	mov	r2, r3
 8005eec:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005ef0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005ef2:	693b      	ldr	r3, [r7, #16]
 8005ef4:	3301      	adds	r3, #1
 8005ef6:	613b      	str	r3, [r7, #16]
 8005ef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005efa:	693a      	ldr	r2, [r7, #16]
 8005efc:	429a      	cmp	r2, r3
 8005efe:	d3b7      	bcc.n	8005e70 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f06:	691b      	ldr	r3, [r3, #16]
 8005f08:	68fa      	ldr	r2, [r7, #12]
 8005f0a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005f0e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005f12:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	2200      	movs	r2, #0
 8005f18:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005f20:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005f22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d105      	bne.n	8005f34 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	699b      	ldr	r3, [r3, #24]
 8005f2c:	f043 0210 	orr.w	r2, r3, #16
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	699a      	ldr	r2, [r3, #24]
 8005f38:	4b0f      	ldr	r3, [pc, #60]	; (8005f78 <USB_DevInit+0x2c4>)
 8005f3a:	4313      	orrs	r3, r2
 8005f3c:	687a      	ldr	r2, [r7, #4]
 8005f3e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005f40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d005      	beq.n	8005f52 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	699b      	ldr	r3, [r3, #24]
 8005f4a:	f043 0208 	orr.w	r2, r3, #8
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005f52:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005f54:	2b01      	cmp	r3, #1
 8005f56:	d107      	bne.n	8005f68 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	699b      	ldr	r3, [r3, #24]
 8005f5c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005f60:	f043 0304 	orr.w	r3, r3, #4
 8005f64:	687a      	ldr	r2, [r7, #4]
 8005f66:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005f68:	7dfb      	ldrb	r3, [r7, #23]
}
 8005f6a:	4618      	mov	r0, r3
 8005f6c:	3718      	adds	r7, #24
 8005f6e:	46bd      	mov	sp, r7
 8005f70:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005f74:	b004      	add	sp, #16
 8005f76:	4770      	bx	lr
 8005f78:	803c3800 	.word	0x803c3800

08005f7c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005f7c:	b480      	push	{r7}
 8005f7e:	b085      	sub	sp, #20
 8005f80:	af00      	add	r7, sp, #0
 8005f82:	6078      	str	r0, [r7, #4]
 8005f84:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8005f86:	2300      	movs	r3, #0
 8005f88:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005f8a:	683b      	ldr	r3, [r7, #0]
 8005f8c:	019b      	lsls	r3, r3, #6
 8005f8e:	f043 0220 	orr.w	r2, r3, #32
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	3301      	adds	r3, #1
 8005f9a:	60fb      	str	r3, [r7, #12]
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	4a08      	ldr	r2, [pc, #32]	; (8005fc0 <USB_FlushTxFifo+0x44>)
 8005fa0:	4293      	cmp	r3, r2
 8005fa2:	d901      	bls.n	8005fa8 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8005fa4:	2303      	movs	r3, #3
 8005fa6:	e006      	b.n	8005fb6 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	691b      	ldr	r3, [r3, #16]
 8005fac:	f003 0320 	and.w	r3, r3, #32
 8005fb0:	2b20      	cmp	r3, #32
 8005fb2:	d0f0      	beq.n	8005f96 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8005fb4:	2300      	movs	r3, #0
}
 8005fb6:	4618      	mov	r0, r3
 8005fb8:	3714      	adds	r7, #20
 8005fba:	46bd      	mov	sp, r7
 8005fbc:	bc80      	pop	{r7}
 8005fbe:	4770      	bx	lr
 8005fc0:	00030d40 	.word	0x00030d40

08005fc4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005fc4:	b480      	push	{r7}
 8005fc6:	b085      	sub	sp, #20
 8005fc8:	af00      	add	r7, sp, #0
 8005fca:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8005fcc:	2300      	movs	r3, #0
 8005fce:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	2210      	movs	r2, #16
 8005fd4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	3301      	adds	r3, #1
 8005fda:	60fb      	str	r3, [r7, #12]
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	4a08      	ldr	r2, [pc, #32]	; (8006000 <USB_FlushRxFifo+0x3c>)
 8005fe0:	4293      	cmp	r3, r2
 8005fe2:	d901      	bls.n	8005fe8 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8005fe4:	2303      	movs	r3, #3
 8005fe6:	e006      	b.n	8005ff6 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	691b      	ldr	r3, [r3, #16]
 8005fec:	f003 0310 	and.w	r3, r3, #16
 8005ff0:	2b10      	cmp	r3, #16
 8005ff2:	d0f0      	beq.n	8005fd6 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8005ff4:	2300      	movs	r3, #0
}
 8005ff6:	4618      	mov	r0, r3
 8005ff8:	3714      	adds	r7, #20
 8005ffa:	46bd      	mov	sp, r7
 8005ffc:	bc80      	pop	{r7}
 8005ffe:	4770      	bx	lr
 8006000:	00030d40 	.word	0x00030d40

08006004 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006004:	b480      	push	{r7}
 8006006:	b085      	sub	sp, #20
 8006008:	af00      	add	r7, sp, #0
 800600a:	6078      	str	r0, [r7, #4]
 800600c:	460b      	mov	r3, r1
 800600e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800601a:	681a      	ldr	r2, [r3, #0]
 800601c:	78fb      	ldrb	r3, [r7, #3]
 800601e:	68f9      	ldr	r1, [r7, #12]
 8006020:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006024:	4313      	orrs	r3, r2
 8006026:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006028:	2300      	movs	r3, #0
}
 800602a:	4618      	mov	r0, r3
 800602c:	3714      	adds	r7, #20
 800602e:	46bd      	mov	sp, r7
 8006030:	bc80      	pop	{r7}
 8006032:	4770      	bx	lr

08006034 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8006034:	b480      	push	{r7}
 8006036:	b087      	sub	sp, #28
 8006038:	af00      	add	r7, sp, #0
 800603a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8006040:	693b      	ldr	r3, [r7, #16]
 8006042:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006046:	689b      	ldr	r3, [r3, #8]
 8006048:	f003 0306 	and.w	r3, r3, #6
 800604c:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	2b00      	cmp	r3, #0
 8006052:	d102      	bne.n	800605a <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8006054:	2300      	movs	r3, #0
 8006056:	75fb      	strb	r3, [r7, #23]
 8006058:	e00a      	b.n	8006070 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	2b02      	cmp	r3, #2
 800605e:	d002      	beq.n	8006066 <USB_GetDevSpeed+0x32>
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	2b06      	cmp	r3, #6
 8006064:	d102      	bne.n	800606c <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8006066:	2302      	movs	r3, #2
 8006068:	75fb      	strb	r3, [r7, #23]
 800606a:	e001      	b.n	8006070 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800606c:	230f      	movs	r3, #15
 800606e:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8006070:	7dfb      	ldrb	r3, [r7, #23]
}
 8006072:	4618      	mov	r0, r3
 8006074:	371c      	adds	r7, #28
 8006076:	46bd      	mov	sp, r7
 8006078:	bc80      	pop	{r7}
 800607a:	4770      	bx	lr

0800607c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800607c:	b480      	push	{r7}
 800607e:	b085      	sub	sp, #20
 8006080:	af00      	add	r7, sp, #0
 8006082:	6078      	str	r0, [r7, #4]
 8006084:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800608a:	683b      	ldr	r3, [r7, #0]
 800608c:	781b      	ldrb	r3, [r3, #0]
 800608e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006090:	683b      	ldr	r3, [r7, #0]
 8006092:	785b      	ldrb	r3, [r3, #1]
 8006094:	2b01      	cmp	r3, #1
 8006096:	d13a      	bne.n	800610e <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800609e:	69da      	ldr	r2, [r3, #28]
 80060a0:	683b      	ldr	r3, [r7, #0]
 80060a2:	781b      	ldrb	r3, [r3, #0]
 80060a4:	f003 030f 	and.w	r3, r3, #15
 80060a8:	2101      	movs	r1, #1
 80060aa:	fa01 f303 	lsl.w	r3, r1, r3
 80060ae:	b29b      	uxth	r3, r3
 80060b0:	68f9      	ldr	r1, [r7, #12]
 80060b2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80060b6:	4313      	orrs	r3, r2
 80060b8:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80060ba:	68bb      	ldr	r3, [r7, #8]
 80060bc:	015a      	lsls	r2, r3, #5
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	4413      	add	r3, r2
 80060c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d155      	bne.n	800617c <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80060d0:	68bb      	ldr	r3, [r7, #8]
 80060d2:	015a      	lsls	r2, r3, #5
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	4413      	add	r3, r2
 80060d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060dc:	681a      	ldr	r2, [r3, #0]
 80060de:	683b      	ldr	r3, [r7, #0]
 80060e0:	689b      	ldr	r3, [r3, #8]
 80060e2:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80060e6:	683b      	ldr	r3, [r7, #0]
 80060e8:	78db      	ldrb	r3, [r3, #3]
 80060ea:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80060ec:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80060ee:	68bb      	ldr	r3, [r7, #8]
 80060f0:	059b      	lsls	r3, r3, #22
 80060f2:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80060f4:	4313      	orrs	r3, r2
 80060f6:	68ba      	ldr	r2, [r7, #8]
 80060f8:	0151      	lsls	r1, r2, #5
 80060fa:	68fa      	ldr	r2, [r7, #12]
 80060fc:	440a      	add	r2, r1
 80060fe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006102:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006106:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800610a:	6013      	str	r3, [r2, #0]
 800610c:	e036      	b.n	800617c <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006114:	69da      	ldr	r2, [r3, #28]
 8006116:	683b      	ldr	r3, [r7, #0]
 8006118:	781b      	ldrb	r3, [r3, #0]
 800611a:	f003 030f 	and.w	r3, r3, #15
 800611e:	2101      	movs	r1, #1
 8006120:	fa01 f303 	lsl.w	r3, r1, r3
 8006124:	041b      	lsls	r3, r3, #16
 8006126:	68f9      	ldr	r1, [r7, #12]
 8006128:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800612c:	4313      	orrs	r3, r2
 800612e:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8006130:	68bb      	ldr	r3, [r7, #8]
 8006132:	015a      	lsls	r2, r3, #5
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	4413      	add	r3, r2
 8006138:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006142:	2b00      	cmp	r3, #0
 8006144:	d11a      	bne.n	800617c <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006146:	68bb      	ldr	r3, [r7, #8]
 8006148:	015a      	lsls	r2, r3, #5
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	4413      	add	r3, r2
 800614e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006152:	681a      	ldr	r2, [r3, #0]
 8006154:	683b      	ldr	r3, [r7, #0]
 8006156:	689b      	ldr	r3, [r3, #8]
 8006158:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800615c:	683b      	ldr	r3, [r7, #0]
 800615e:	78db      	ldrb	r3, [r3, #3]
 8006160:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006162:	430b      	orrs	r3, r1
 8006164:	4313      	orrs	r3, r2
 8006166:	68ba      	ldr	r2, [r7, #8]
 8006168:	0151      	lsls	r1, r2, #5
 800616a:	68fa      	ldr	r2, [r7, #12]
 800616c:	440a      	add	r2, r1
 800616e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006172:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006176:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800617a:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800617c:	2300      	movs	r3, #0
}
 800617e:	4618      	mov	r0, r3
 8006180:	3714      	adds	r7, #20
 8006182:	46bd      	mov	sp, r7
 8006184:	bc80      	pop	{r7}
 8006186:	4770      	bx	lr

08006188 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006188:	b480      	push	{r7}
 800618a:	b085      	sub	sp, #20
 800618c:	af00      	add	r7, sp, #0
 800618e:	6078      	str	r0, [r7, #4]
 8006190:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006196:	683b      	ldr	r3, [r7, #0]
 8006198:	781b      	ldrb	r3, [r3, #0]
 800619a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800619c:	683b      	ldr	r3, [r7, #0]
 800619e:	785b      	ldrb	r3, [r3, #1]
 80061a0:	2b01      	cmp	r3, #1
 80061a2:	d161      	bne.n	8006268 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80061a4:	68bb      	ldr	r3, [r7, #8]
 80061a6:	015a      	lsls	r2, r3, #5
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	4413      	add	r3, r2
 80061ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80061b6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80061ba:	d11f      	bne.n	80061fc <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80061bc:	68bb      	ldr	r3, [r7, #8]
 80061be:	015a      	lsls	r2, r3, #5
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	4413      	add	r3, r2
 80061c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	68ba      	ldr	r2, [r7, #8]
 80061cc:	0151      	lsls	r1, r2, #5
 80061ce:	68fa      	ldr	r2, [r7, #12]
 80061d0:	440a      	add	r2, r1
 80061d2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80061d6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80061da:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80061dc:	68bb      	ldr	r3, [r7, #8]
 80061de:	015a      	lsls	r2, r3, #5
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	4413      	add	r3, r2
 80061e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	68ba      	ldr	r2, [r7, #8]
 80061ec:	0151      	lsls	r1, r2, #5
 80061ee:	68fa      	ldr	r2, [r7, #12]
 80061f0:	440a      	add	r2, r1
 80061f2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80061f6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80061fa:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006202:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006204:	683b      	ldr	r3, [r7, #0]
 8006206:	781b      	ldrb	r3, [r3, #0]
 8006208:	f003 030f 	and.w	r3, r3, #15
 800620c:	2101      	movs	r1, #1
 800620e:	fa01 f303 	lsl.w	r3, r1, r3
 8006212:	b29b      	uxth	r3, r3
 8006214:	43db      	mvns	r3, r3
 8006216:	68f9      	ldr	r1, [r7, #12]
 8006218:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800621c:	4013      	ands	r3, r2
 800621e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006226:	69da      	ldr	r2, [r3, #28]
 8006228:	683b      	ldr	r3, [r7, #0]
 800622a:	781b      	ldrb	r3, [r3, #0]
 800622c:	f003 030f 	and.w	r3, r3, #15
 8006230:	2101      	movs	r1, #1
 8006232:	fa01 f303 	lsl.w	r3, r1, r3
 8006236:	b29b      	uxth	r3, r3
 8006238:	43db      	mvns	r3, r3
 800623a:	68f9      	ldr	r1, [r7, #12]
 800623c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006240:	4013      	ands	r3, r2
 8006242:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8006244:	68bb      	ldr	r3, [r7, #8]
 8006246:	015a      	lsls	r2, r3, #5
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	4413      	add	r3, r2
 800624c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006250:	681a      	ldr	r2, [r3, #0]
 8006252:	68bb      	ldr	r3, [r7, #8]
 8006254:	0159      	lsls	r1, r3, #5
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	440b      	add	r3, r1
 800625a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800625e:	4619      	mov	r1, r3
 8006260:	4b35      	ldr	r3, [pc, #212]	; (8006338 <USB_DeactivateEndpoint+0x1b0>)
 8006262:	4013      	ands	r3, r2
 8006264:	600b      	str	r3, [r1, #0]
 8006266:	e060      	b.n	800632a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006268:	68bb      	ldr	r3, [r7, #8]
 800626a:	015a      	lsls	r2, r3, #5
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	4413      	add	r3, r2
 8006270:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800627a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800627e:	d11f      	bne.n	80062c0 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8006280:	68bb      	ldr	r3, [r7, #8]
 8006282:	015a      	lsls	r2, r3, #5
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	4413      	add	r3, r2
 8006288:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	68ba      	ldr	r2, [r7, #8]
 8006290:	0151      	lsls	r1, r2, #5
 8006292:	68fa      	ldr	r2, [r7, #12]
 8006294:	440a      	add	r2, r1
 8006296:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800629a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800629e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80062a0:	68bb      	ldr	r3, [r7, #8]
 80062a2:	015a      	lsls	r2, r3, #5
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	4413      	add	r3, r2
 80062a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	68ba      	ldr	r2, [r7, #8]
 80062b0:	0151      	lsls	r1, r2, #5
 80062b2:	68fa      	ldr	r2, [r7, #12]
 80062b4:	440a      	add	r2, r1
 80062b6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80062ba:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80062be:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80062c6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80062c8:	683b      	ldr	r3, [r7, #0]
 80062ca:	781b      	ldrb	r3, [r3, #0]
 80062cc:	f003 030f 	and.w	r3, r3, #15
 80062d0:	2101      	movs	r1, #1
 80062d2:	fa01 f303 	lsl.w	r3, r1, r3
 80062d6:	041b      	lsls	r3, r3, #16
 80062d8:	43db      	mvns	r3, r3
 80062da:	68f9      	ldr	r1, [r7, #12]
 80062dc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80062e0:	4013      	ands	r3, r2
 80062e2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80062ea:	69da      	ldr	r2, [r3, #28]
 80062ec:	683b      	ldr	r3, [r7, #0]
 80062ee:	781b      	ldrb	r3, [r3, #0]
 80062f0:	f003 030f 	and.w	r3, r3, #15
 80062f4:	2101      	movs	r1, #1
 80062f6:	fa01 f303 	lsl.w	r3, r1, r3
 80062fa:	041b      	lsls	r3, r3, #16
 80062fc:	43db      	mvns	r3, r3
 80062fe:	68f9      	ldr	r1, [r7, #12]
 8006300:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006304:	4013      	ands	r3, r2
 8006306:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8006308:	68bb      	ldr	r3, [r7, #8]
 800630a:	015a      	lsls	r2, r3, #5
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	4413      	add	r3, r2
 8006310:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006314:	681a      	ldr	r2, [r3, #0]
 8006316:	68bb      	ldr	r3, [r7, #8]
 8006318:	0159      	lsls	r1, r3, #5
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	440b      	add	r3, r1
 800631e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006322:	4619      	mov	r1, r3
 8006324:	4b05      	ldr	r3, [pc, #20]	; (800633c <USB_DeactivateEndpoint+0x1b4>)
 8006326:	4013      	ands	r3, r2
 8006328:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800632a:	2300      	movs	r3, #0
}
 800632c:	4618      	mov	r0, r3
 800632e:	3714      	adds	r7, #20
 8006330:	46bd      	mov	sp, r7
 8006332:	bc80      	pop	{r7}
 8006334:	4770      	bx	lr
 8006336:	bf00      	nop
 8006338:	ec337800 	.word	0xec337800
 800633c:	eff37800 	.word	0xeff37800

08006340 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006340:	b580      	push	{r7, lr}
 8006342:	b08a      	sub	sp, #40	; 0x28
 8006344:	af02      	add	r7, sp, #8
 8006346:	60f8      	str	r0, [r7, #12]
 8006348:	60b9      	str	r1, [r7, #8]
 800634a:	4613      	mov	r3, r2
 800634c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8006352:	68bb      	ldr	r3, [r7, #8]
 8006354:	781b      	ldrb	r3, [r3, #0]
 8006356:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006358:	68bb      	ldr	r3, [r7, #8]
 800635a:	785b      	ldrb	r3, [r3, #1]
 800635c:	2b01      	cmp	r3, #1
 800635e:	f040 815c 	bne.w	800661a <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8006362:	68bb      	ldr	r3, [r7, #8]
 8006364:	695b      	ldr	r3, [r3, #20]
 8006366:	2b00      	cmp	r3, #0
 8006368:	d132      	bne.n	80063d0 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800636a:	69bb      	ldr	r3, [r7, #24]
 800636c:	015a      	lsls	r2, r3, #5
 800636e:	69fb      	ldr	r3, [r7, #28]
 8006370:	4413      	add	r3, r2
 8006372:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006376:	691b      	ldr	r3, [r3, #16]
 8006378:	69ba      	ldr	r2, [r7, #24]
 800637a:	0151      	lsls	r1, r2, #5
 800637c:	69fa      	ldr	r2, [r7, #28]
 800637e:	440a      	add	r2, r1
 8006380:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006384:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006388:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800638c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800638e:	69bb      	ldr	r3, [r7, #24]
 8006390:	015a      	lsls	r2, r3, #5
 8006392:	69fb      	ldr	r3, [r7, #28]
 8006394:	4413      	add	r3, r2
 8006396:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800639a:	691b      	ldr	r3, [r3, #16]
 800639c:	69ba      	ldr	r2, [r7, #24]
 800639e:	0151      	lsls	r1, r2, #5
 80063a0:	69fa      	ldr	r2, [r7, #28]
 80063a2:	440a      	add	r2, r1
 80063a4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80063a8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80063ac:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80063ae:	69bb      	ldr	r3, [r7, #24]
 80063b0:	015a      	lsls	r2, r3, #5
 80063b2:	69fb      	ldr	r3, [r7, #28]
 80063b4:	4413      	add	r3, r2
 80063b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063ba:	691b      	ldr	r3, [r3, #16]
 80063bc:	69ba      	ldr	r2, [r7, #24]
 80063be:	0151      	lsls	r1, r2, #5
 80063c0:	69fa      	ldr	r2, [r7, #28]
 80063c2:	440a      	add	r2, r1
 80063c4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80063c8:	0cdb      	lsrs	r3, r3, #19
 80063ca:	04db      	lsls	r3, r3, #19
 80063cc:	6113      	str	r3, [r2, #16]
 80063ce:	e074      	b.n	80064ba <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80063d0:	69bb      	ldr	r3, [r7, #24]
 80063d2:	015a      	lsls	r2, r3, #5
 80063d4:	69fb      	ldr	r3, [r7, #28]
 80063d6:	4413      	add	r3, r2
 80063d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063dc:	691b      	ldr	r3, [r3, #16]
 80063de:	69ba      	ldr	r2, [r7, #24]
 80063e0:	0151      	lsls	r1, r2, #5
 80063e2:	69fa      	ldr	r2, [r7, #28]
 80063e4:	440a      	add	r2, r1
 80063e6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80063ea:	0cdb      	lsrs	r3, r3, #19
 80063ec:	04db      	lsls	r3, r3, #19
 80063ee:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80063f0:	69bb      	ldr	r3, [r7, #24]
 80063f2:	015a      	lsls	r2, r3, #5
 80063f4:	69fb      	ldr	r3, [r7, #28]
 80063f6:	4413      	add	r3, r2
 80063f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063fc:	691b      	ldr	r3, [r3, #16]
 80063fe:	69ba      	ldr	r2, [r7, #24]
 8006400:	0151      	lsls	r1, r2, #5
 8006402:	69fa      	ldr	r2, [r7, #28]
 8006404:	440a      	add	r2, r1
 8006406:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800640a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800640e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006412:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8006414:	69bb      	ldr	r3, [r7, #24]
 8006416:	015a      	lsls	r2, r3, #5
 8006418:	69fb      	ldr	r3, [r7, #28]
 800641a:	4413      	add	r3, r2
 800641c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006420:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8006422:	68bb      	ldr	r3, [r7, #8]
 8006424:	6959      	ldr	r1, [r3, #20]
 8006426:	68bb      	ldr	r3, [r7, #8]
 8006428:	689b      	ldr	r3, [r3, #8]
 800642a:	440b      	add	r3, r1
 800642c:	1e59      	subs	r1, r3, #1
 800642e:	68bb      	ldr	r3, [r7, #8]
 8006430:	689b      	ldr	r3, [r3, #8]
 8006432:	fbb1 f3f3 	udiv	r3, r1, r3
 8006436:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8006438:	4b9d      	ldr	r3, [pc, #628]	; (80066b0 <USB_EPStartXfer+0x370>)
 800643a:	400b      	ands	r3, r1
 800643c:	69b9      	ldr	r1, [r7, #24]
 800643e:	0148      	lsls	r0, r1, #5
 8006440:	69f9      	ldr	r1, [r7, #28]
 8006442:	4401      	add	r1, r0
 8006444:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006448:	4313      	orrs	r3, r2
 800644a:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800644c:	69bb      	ldr	r3, [r7, #24]
 800644e:	015a      	lsls	r2, r3, #5
 8006450:	69fb      	ldr	r3, [r7, #28]
 8006452:	4413      	add	r3, r2
 8006454:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006458:	691a      	ldr	r2, [r3, #16]
 800645a:	68bb      	ldr	r3, [r7, #8]
 800645c:	695b      	ldr	r3, [r3, #20]
 800645e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006462:	69b9      	ldr	r1, [r7, #24]
 8006464:	0148      	lsls	r0, r1, #5
 8006466:	69f9      	ldr	r1, [r7, #28]
 8006468:	4401      	add	r1, r0
 800646a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800646e:	4313      	orrs	r3, r2
 8006470:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8006472:	68bb      	ldr	r3, [r7, #8]
 8006474:	78db      	ldrb	r3, [r3, #3]
 8006476:	2b01      	cmp	r3, #1
 8006478:	d11f      	bne.n	80064ba <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800647a:	69bb      	ldr	r3, [r7, #24]
 800647c:	015a      	lsls	r2, r3, #5
 800647e:	69fb      	ldr	r3, [r7, #28]
 8006480:	4413      	add	r3, r2
 8006482:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006486:	691b      	ldr	r3, [r3, #16]
 8006488:	69ba      	ldr	r2, [r7, #24]
 800648a:	0151      	lsls	r1, r2, #5
 800648c:	69fa      	ldr	r2, [r7, #28]
 800648e:	440a      	add	r2, r1
 8006490:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006494:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8006498:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800649a:	69bb      	ldr	r3, [r7, #24]
 800649c:	015a      	lsls	r2, r3, #5
 800649e:	69fb      	ldr	r3, [r7, #28]
 80064a0:	4413      	add	r3, r2
 80064a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064a6:	691b      	ldr	r3, [r3, #16]
 80064a8:	69ba      	ldr	r2, [r7, #24]
 80064aa:	0151      	lsls	r1, r2, #5
 80064ac:	69fa      	ldr	r2, [r7, #28]
 80064ae:	440a      	add	r2, r1
 80064b0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80064b4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80064b8:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80064ba:	79fb      	ldrb	r3, [r7, #7]
 80064bc:	2b01      	cmp	r3, #1
 80064be:	d14b      	bne.n	8006558 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80064c0:	68bb      	ldr	r3, [r7, #8]
 80064c2:	691b      	ldr	r3, [r3, #16]
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d009      	beq.n	80064dc <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80064c8:	69bb      	ldr	r3, [r7, #24]
 80064ca:	015a      	lsls	r2, r3, #5
 80064cc:	69fb      	ldr	r3, [r7, #28]
 80064ce:	4413      	add	r3, r2
 80064d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064d4:	461a      	mov	r2, r3
 80064d6:	68bb      	ldr	r3, [r7, #8]
 80064d8:	691b      	ldr	r3, [r3, #16]
 80064da:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80064dc:	68bb      	ldr	r3, [r7, #8]
 80064de:	78db      	ldrb	r3, [r3, #3]
 80064e0:	2b01      	cmp	r3, #1
 80064e2:	d128      	bne.n	8006536 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80064e4:	69fb      	ldr	r3, [r7, #28]
 80064e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80064ea:	689b      	ldr	r3, [r3, #8]
 80064ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d110      	bne.n	8006516 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80064f4:	69bb      	ldr	r3, [r7, #24]
 80064f6:	015a      	lsls	r2, r3, #5
 80064f8:	69fb      	ldr	r3, [r7, #28]
 80064fa:	4413      	add	r3, r2
 80064fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	69ba      	ldr	r2, [r7, #24]
 8006504:	0151      	lsls	r1, r2, #5
 8006506:	69fa      	ldr	r2, [r7, #28]
 8006508:	440a      	add	r2, r1
 800650a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800650e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006512:	6013      	str	r3, [r2, #0]
 8006514:	e00f      	b.n	8006536 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006516:	69bb      	ldr	r3, [r7, #24]
 8006518:	015a      	lsls	r2, r3, #5
 800651a:	69fb      	ldr	r3, [r7, #28]
 800651c:	4413      	add	r3, r2
 800651e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	69ba      	ldr	r2, [r7, #24]
 8006526:	0151      	lsls	r1, r2, #5
 8006528:	69fa      	ldr	r2, [r7, #28]
 800652a:	440a      	add	r2, r1
 800652c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006530:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006534:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006536:	69bb      	ldr	r3, [r7, #24]
 8006538:	015a      	lsls	r2, r3, #5
 800653a:	69fb      	ldr	r3, [r7, #28]
 800653c:	4413      	add	r3, r2
 800653e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	69ba      	ldr	r2, [r7, #24]
 8006546:	0151      	lsls	r1, r2, #5
 8006548:	69fa      	ldr	r2, [r7, #28]
 800654a:	440a      	add	r2, r1
 800654c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006550:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006554:	6013      	str	r3, [r2, #0]
 8006556:	e12f      	b.n	80067b8 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006558:	69bb      	ldr	r3, [r7, #24]
 800655a:	015a      	lsls	r2, r3, #5
 800655c:	69fb      	ldr	r3, [r7, #28]
 800655e:	4413      	add	r3, r2
 8006560:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	69ba      	ldr	r2, [r7, #24]
 8006568:	0151      	lsls	r1, r2, #5
 800656a:	69fa      	ldr	r2, [r7, #28]
 800656c:	440a      	add	r2, r1
 800656e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006572:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006576:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006578:	68bb      	ldr	r3, [r7, #8]
 800657a:	78db      	ldrb	r3, [r3, #3]
 800657c:	2b01      	cmp	r3, #1
 800657e:	d015      	beq.n	80065ac <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8006580:	68bb      	ldr	r3, [r7, #8]
 8006582:	695b      	ldr	r3, [r3, #20]
 8006584:	2b00      	cmp	r3, #0
 8006586:	f000 8117 	beq.w	80067b8 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800658a:	69fb      	ldr	r3, [r7, #28]
 800658c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006590:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006592:	68bb      	ldr	r3, [r7, #8]
 8006594:	781b      	ldrb	r3, [r3, #0]
 8006596:	f003 030f 	and.w	r3, r3, #15
 800659a:	2101      	movs	r1, #1
 800659c:	fa01 f303 	lsl.w	r3, r1, r3
 80065a0:	69f9      	ldr	r1, [r7, #28]
 80065a2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80065a6:	4313      	orrs	r3, r2
 80065a8:	634b      	str	r3, [r1, #52]	; 0x34
 80065aa:	e105      	b.n	80067b8 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80065ac:	69fb      	ldr	r3, [r7, #28]
 80065ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80065b2:	689b      	ldr	r3, [r3, #8]
 80065b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d110      	bne.n	80065de <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80065bc:	69bb      	ldr	r3, [r7, #24]
 80065be:	015a      	lsls	r2, r3, #5
 80065c0:	69fb      	ldr	r3, [r7, #28]
 80065c2:	4413      	add	r3, r2
 80065c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	69ba      	ldr	r2, [r7, #24]
 80065cc:	0151      	lsls	r1, r2, #5
 80065ce:	69fa      	ldr	r2, [r7, #28]
 80065d0:	440a      	add	r2, r1
 80065d2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80065d6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80065da:	6013      	str	r3, [r2, #0]
 80065dc:	e00f      	b.n	80065fe <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80065de:	69bb      	ldr	r3, [r7, #24]
 80065e0:	015a      	lsls	r2, r3, #5
 80065e2:	69fb      	ldr	r3, [r7, #28]
 80065e4:	4413      	add	r3, r2
 80065e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	69ba      	ldr	r2, [r7, #24]
 80065ee:	0151      	lsls	r1, r2, #5
 80065f0:	69fa      	ldr	r2, [r7, #28]
 80065f2:	440a      	add	r2, r1
 80065f4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80065f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80065fc:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80065fe:	68bb      	ldr	r3, [r7, #8]
 8006600:	68d9      	ldr	r1, [r3, #12]
 8006602:	68bb      	ldr	r3, [r7, #8]
 8006604:	781a      	ldrb	r2, [r3, #0]
 8006606:	68bb      	ldr	r3, [r7, #8]
 8006608:	695b      	ldr	r3, [r3, #20]
 800660a:	b298      	uxth	r0, r3
 800660c:	79fb      	ldrb	r3, [r7, #7]
 800660e:	9300      	str	r3, [sp, #0]
 8006610:	4603      	mov	r3, r0
 8006612:	68f8      	ldr	r0, [r7, #12]
 8006614:	f000 fa2a 	bl	8006a6c <USB_WritePacket>
 8006618:	e0ce      	b.n	80067b8 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800661a:	69bb      	ldr	r3, [r7, #24]
 800661c:	015a      	lsls	r2, r3, #5
 800661e:	69fb      	ldr	r3, [r7, #28]
 8006620:	4413      	add	r3, r2
 8006622:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006626:	691b      	ldr	r3, [r3, #16]
 8006628:	69ba      	ldr	r2, [r7, #24]
 800662a:	0151      	lsls	r1, r2, #5
 800662c:	69fa      	ldr	r2, [r7, #28]
 800662e:	440a      	add	r2, r1
 8006630:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006634:	0cdb      	lsrs	r3, r3, #19
 8006636:	04db      	lsls	r3, r3, #19
 8006638:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800663a:	69bb      	ldr	r3, [r7, #24]
 800663c:	015a      	lsls	r2, r3, #5
 800663e:	69fb      	ldr	r3, [r7, #28]
 8006640:	4413      	add	r3, r2
 8006642:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006646:	691b      	ldr	r3, [r3, #16]
 8006648:	69ba      	ldr	r2, [r7, #24]
 800664a:	0151      	lsls	r1, r2, #5
 800664c:	69fa      	ldr	r2, [r7, #28]
 800664e:	440a      	add	r2, r1
 8006650:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006654:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006658:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800665c:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800665e:	68bb      	ldr	r3, [r7, #8]
 8006660:	695b      	ldr	r3, [r3, #20]
 8006662:	2b00      	cmp	r3, #0
 8006664:	d126      	bne.n	80066b4 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8006666:	69bb      	ldr	r3, [r7, #24]
 8006668:	015a      	lsls	r2, r3, #5
 800666a:	69fb      	ldr	r3, [r7, #28]
 800666c:	4413      	add	r3, r2
 800666e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006672:	691a      	ldr	r2, [r3, #16]
 8006674:	68bb      	ldr	r3, [r7, #8]
 8006676:	689b      	ldr	r3, [r3, #8]
 8006678:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800667c:	69b9      	ldr	r1, [r7, #24]
 800667e:	0148      	lsls	r0, r1, #5
 8006680:	69f9      	ldr	r1, [r7, #28]
 8006682:	4401      	add	r1, r0
 8006684:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006688:	4313      	orrs	r3, r2
 800668a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800668c:	69bb      	ldr	r3, [r7, #24]
 800668e:	015a      	lsls	r2, r3, #5
 8006690:	69fb      	ldr	r3, [r7, #28]
 8006692:	4413      	add	r3, r2
 8006694:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006698:	691b      	ldr	r3, [r3, #16]
 800669a:	69ba      	ldr	r2, [r7, #24]
 800669c:	0151      	lsls	r1, r2, #5
 800669e:	69fa      	ldr	r2, [r7, #28]
 80066a0:	440a      	add	r2, r1
 80066a2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80066a6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80066aa:	6113      	str	r3, [r2, #16]
 80066ac:	e036      	b.n	800671c <USB_EPStartXfer+0x3dc>
 80066ae:	bf00      	nop
 80066b0:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80066b4:	68bb      	ldr	r3, [r7, #8]
 80066b6:	695a      	ldr	r2, [r3, #20]
 80066b8:	68bb      	ldr	r3, [r7, #8]
 80066ba:	689b      	ldr	r3, [r3, #8]
 80066bc:	4413      	add	r3, r2
 80066be:	1e5a      	subs	r2, r3, #1
 80066c0:	68bb      	ldr	r3, [r7, #8]
 80066c2:	689b      	ldr	r3, [r3, #8]
 80066c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80066c8:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80066ca:	69bb      	ldr	r3, [r7, #24]
 80066cc:	015a      	lsls	r2, r3, #5
 80066ce:	69fb      	ldr	r3, [r7, #28]
 80066d0:	4413      	add	r3, r2
 80066d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066d6:	691a      	ldr	r2, [r3, #16]
 80066d8:	8afb      	ldrh	r3, [r7, #22]
 80066da:	04d9      	lsls	r1, r3, #19
 80066dc:	4b39      	ldr	r3, [pc, #228]	; (80067c4 <USB_EPStartXfer+0x484>)
 80066de:	400b      	ands	r3, r1
 80066e0:	69b9      	ldr	r1, [r7, #24]
 80066e2:	0148      	lsls	r0, r1, #5
 80066e4:	69f9      	ldr	r1, [r7, #28]
 80066e6:	4401      	add	r1, r0
 80066e8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80066ec:	4313      	orrs	r3, r2
 80066ee:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 80066f0:	69bb      	ldr	r3, [r7, #24]
 80066f2:	015a      	lsls	r2, r3, #5
 80066f4:	69fb      	ldr	r3, [r7, #28]
 80066f6:	4413      	add	r3, r2
 80066f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066fc:	691a      	ldr	r2, [r3, #16]
 80066fe:	68bb      	ldr	r3, [r7, #8]
 8006700:	689b      	ldr	r3, [r3, #8]
 8006702:	8af9      	ldrh	r1, [r7, #22]
 8006704:	fb01 f303 	mul.w	r3, r1, r3
 8006708:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800670c:	69b9      	ldr	r1, [r7, #24]
 800670e:	0148      	lsls	r0, r1, #5
 8006710:	69f9      	ldr	r1, [r7, #28]
 8006712:	4401      	add	r1, r0
 8006714:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006718:	4313      	orrs	r3, r2
 800671a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800671c:	79fb      	ldrb	r3, [r7, #7]
 800671e:	2b01      	cmp	r3, #1
 8006720:	d10d      	bne.n	800673e <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8006722:	68bb      	ldr	r3, [r7, #8]
 8006724:	68db      	ldr	r3, [r3, #12]
 8006726:	2b00      	cmp	r3, #0
 8006728:	d009      	beq.n	800673e <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800672a:	68bb      	ldr	r3, [r7, #8]
 800672c:	68d9      	ldr	r1, [r3, #12]
 800672e:	69bb      	ldr	r3, [r7, #24]
 8006730:	015a      	lsls	r2, r3, #5
 8006732:	69fb      	ldr	r3, [r7, #28]
 8006734:	4413      	add	r3, r2
 8006736:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800673a:	460a      	mov	r2, r1
 800673c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800673e:	68bb      	ldr	r3, [r7, #8]
 8006740:	78db      	ldrb	r3, [r3, #3]
 8006742:	2b01      	cmp	r3, #1
 8006744:	d128      	bne.n	8006798 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006746:	69fb      	ldr	r3, [r7, #28]
 8006748:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800674c:	689b      	ldr	r3, [r3, #8]
 800674e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006752:	2b00      	cmp	r3, #0
 8006754:	d110      	bne.n	8006778 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8006756:	69bb      	ldr	r3, [r7, #24]
 8006758:	015a      	lsls	r2, r3, #5
 800675a:	69fb      	ldr	r3, [r7, #28]
 800675c:	4413      	add	r3, r2
 800675e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	69ba      	ldr	r2, [r7, #24]
 8006766:	0151      	lsls	r1, r2, #5
 8006768:	69fa      	ldr	r2, [r7, #28]
 800676a:	440a      	add	r2, r1
 800676c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006770:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006774:	6013      	str	r3, [r2, #0]
 8006776:	e00f      	b.n	8006798 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8006778:	69bb      	ldr	r3, [r7, #24]
 800677a:	015a      	lsls	r2, r3, #5
 800677c:	69fb      	ldr	r3, [r7, #28]
 800677e:	4413      	add	r3, r2
 8006780:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	69ba      	ldr	r2, [r7, #24]
 8006788:	0151      	lsls	r1, r2, #5
 800678a:	69fa      	ldr	r2, [r7, #28]
 800678c:	440a      	add	r2, r1
 800678e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006792:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006796:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006798:	69bb      	ldr	r3, [r7, #24]
 800679a:	015a      	lsls	r2, r3, #5
 800679c:	69fb      	ldr	r3, [r7, #28]
 800679e:	4413      	add	r3, r2
 80067a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	69ba      	ldr	r2, [r7, #24]
 80067a8:	0151      	lsls	r1, r2, #5
 80067aa:	69fa      	ldr	r2, [r7, #28]
 80067ac:	440a      	add	r2, r1
 80067ae:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80067b2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80067b6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80067b8:	2300      	movs	r3, #0
}
 80067ba:	4618      	mov	r0, r3
 80067bc:	3720      	adds	r7, #32
 80067be:	46bd      	mov	sp, r7
 80067c0:	bd80      	pop	{r7, pc}
 80067c2:	bf00      	nop
 80067c4:	1ff80000 	.word	0x1ff80000

080067c8 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80067c8:	b480      	push	{r7}
 80067ca:	b087      	sub	sp, #28
 80067cc:	af00      	add	r7, sp, #0
 80067ce:	60f8      	str	r0, [r7, #12]
 80067d0:	60b9      	str	r1, [r7, #8]
 80067d2:	4613      	mov	r3, r2
 80067d4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80067da:	68bb      	ldr	r3, [r7, #8]
 80067dc:	781b      	ldrb	r3, [r3, #0]
 80067de:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80067e0:	68bb      	ldr	r3, [r7, #8]
 80067e2:	785b      	ldrb	r3, [r3, #1]
 80067e4:	2b01      	cmp	r3, #1
 80067e6:	f040 80cd 	bne.w	8006984 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80067ea:	68bb      	ldr	r3, [r7, #8]
 80067ec:	695b      	ldr	r3, [r3, #20]
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d132      	bne.n	8006858 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80067f2:	693b      	ldr	r3, [r7, #16]
 80067f4:	015a      	lsls	r2, r3, #5
 80067f6:	697b      	ldr	r3, [r7, #20]
 80067f8:	4413      	add	r3, r2
 80067fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80067fe:	691b      	ldr	r3, [r3, #16]
 8006800:	693a      	ldr	r2, [r7, #16]
 8006802:	0151      	lsls	r1, r2, #5
 8006804:	697a      	ldr	r2, [r7, #20]
 8006806:	440a      	add	r2, r1
 8006808:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800680c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006810:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006814:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006816:	693b      	ldr	r3, [r7, #16]
 8006818:	015a      	lsls	r2, r3, #5
 800681a:	697b      	ldr	r3, [r7, #20]
 800681c:	4413      	add	r3, r2
 800681e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006822:	691b      	ldr	r3, [r3, #16]
 8006824:	693a      	ldr	r2, [r7, #16]
 8006826:	0151      	lsls	r1, r2, #5
 8006828:	697a      	ldr	r2, [r7, #20]
 800682a:	440a      	add	r2, r1
 800682c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006830:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006834:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006836:	693b      	ldr	r3, [r7, #16]
 8006838:	015a      	lsls	r2, r3, #5
 800683a:	697b      	ldr	r3, [r7, #20]
 800683c:	4413      	add	r3, r2
 800683e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006842:	691b      	ldr	r3, [r3, #16]
 8006844:	693a      	ldr	r2, [r7, #16]
 8006846:	0151      	lsls	r1, r2, #5
 8006848:	697a      	ldr	r2, [r7, #20]
 800684a:	440a      	add	r2, r1
 800684c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006850:	0cdb      	lsrs	r3, r3, #19
 8006852:	04db      	lsls	r3, r3, #19
 8006854:	6113      	str	r3, [r2, #16]
 8006856:	e04e      	b.n	80068f6 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006858:	693b      	ldr	r3, [r7, #16]
 800685a:	015a      	lsls	r2, r3, #5
 800685c:	697b      	ldr	r3, [r7, #20]
 800685e:	4413      	add	r3, r2
 8006860:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006864:	691b      	ldr	r3, [r3, #16]
 8006866:	693a      	ldr	r2, [r7, #16]
 8006868:	0151      	lsls	r1, r2, #5
 800686a:	697a      	ldr	r2, [r7, #20]
 800686c:	440a      	add	r2, r1
 800686e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006872:	0cdb      	lsrs	r3, r3, #19
 8006874:	04db      	lsls	r3, r3, #19
 8006876:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006878:	693b      	ldr	r3, [r7, #16]
 800687a:	015a      	lsls	r2, r3, #5
 800687c:	697b      	ldr	r3, [r7, #20]
 800687e:	4413      	add	r3, r2
 8006880:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006884:	691b      	ldr	r3, [r3, #16]
 8006886:	693a      	ldr	r2, [r7, #16]
 8006888:	0151      	lsls	r1, r2, #5
 800688a:	697a      	ldr	r2, [r7, #20]
 800688c:	440a      	add	r2, r1
 800688e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006892:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006896:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800689a:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800689c:	68bb      	ldr	r3, [r7, #8]
 800689e:	695a      	ldr	r2, [r3, #20]
 80068a0:	68bb      	ldr	r3, [r7, #8]
 80068a2:	689b      	ldr	r3, [r3, #8]
 80068a4:	429a      	cmp	r2, r3
 80068a6:	d903      	bls.n	80068b0 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 80068a8:	68bb      	ldr	r3, [r7, #8]
 80068aa:	689a      	ldr	r2, [r3, #8]
 80068ac:	68bb      	ldr	r3, [r7, #8]
 80068ae:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80068b0:	693b      	ldr	r3, [r7, #16]
 80068b2:	015a      	lsls	r2, r3, #5
 80068b4:	697b      	ldr	r3, [r7, #20]
 80068b6:	4413      	add	r3, r2
 80068b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80068bc:	691b      	ldr	r3, [r3, #16]
 80068be:	693a      	ldr	r2, [r7, #16]
 80068c0:	0151      	lsls	r1, r2, #5
 80068c2:	697a      	ldr	r2, [r7, #20]
 80068c4:	440a      	add	r2, r1
 80068c6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80068ca:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80068ce:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80068d0:	693b      	ldr	r3, [r7, #16]
 80068d2:	015a      	lsls	r2, r3, #5
 80068d4:	697b      	ldr	r3, [r7, #20]
 80068d6:	4413      	add	r3, r2
 80068d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80068dc:	691a      	ldr	r2, [r3, #16]
 80068de:	68bb      	ldr	r3, [r7, #8]
 80068e0:	695b      	ldr	r3, [r3, #20]
 80068e2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80068e6:	6939      	ldr	r1, [r7, #16]
 80068e8:	0148      	lsls	r0, r1, #5
 80068ea:	6979      	ldr	r1, [r7, #20]
 80068ec:	4401      	add	r1, r0
 80068ee:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80068f2:	4313      	orrs	r3, r2
 80068f4:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80068f6:	79fb      	ldrb	r3, [r7, #7]
 80068f8:	2b01      	cmp	r3, #1
 80068fa:	d11e      	bne.n	800693a <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80068fc:	68bb      	ldr	r3, [r7, #8]
 80068fe:	691b      	ldr	r3, [r3, #16]
 8006900:	2b00      	cmp	r3, #0
 8006902:	d009      	beq.n	8006918 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006904:	693b      	ldr	r3, [r7, #16]
 8006906:	015a      	lsls	r2, r3, #5
 8006908:	697b      	ldr	r3, [r7, #20]
 800690a:	4413      	add	r3, r2
 800690c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006910:	461a      	mov	r2, r3
 8006912:	68bb      	ldr	r3, [r7, #8]
 8006914:	691b      	ldr	r3, [r3, #16]
 8006916:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006918:	693b      	ldr	r3, [r7, #16]
 800691a:	015a      	lsls	r2, r3, #5
 800691c:	697b      	ldr	r3, [r7, #20]
 800691e:	4413      	add	r3, r2
 8006920:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	693a      	ldr	r2, [r7, #16]
 8006928:	0151      	lsls	r1, r2, #5
 800692a:	697a      	ldr	r2, [r7, #20]
 800692c:	440a      	add	r2, r1
 800692e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006932:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006936:	6013      	str	r3, [r2, #0]
 8006938:	e092      	b.n	8006a60 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800693a:	693b      	ldr	r3, [r7, #16]
 800693c:	015a      	lsls	r2, r3, #5
 800693e:	697b      	ldr	r3, [r7, #20]
 8006940:	4413      	add	r3, r2
 8006942:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	693a      	ldr	r2, [r7, #16]
 800694a:	0151      	lsls	r1, r2, #5
 800694c:	697a      	ldr	r2, [r7, #20]
 800694e:	440a      	add	r2, r1
 8006950:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006954:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006958:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800695a:	68bb      	ldr	r3, [r7, #8]
 800695c:	695b      	ldr	r3, [r3, #20]
 800695e:	2b00      	cmp	r3, #0
 8006960:	d07e      	beq.n	8006a60 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8006962:	697b      	ldr	r3, [r7, #20]
 8006964:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006968:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800696a:	68bb      	ldr	r3, [r7, #8]
 800696c:	781b      	ldrb	r3, [r3, #0]
 800696e:	f003 030f 	and.w	r3, r3, #15
 8006972:	2101      	movs	r1, #1
 8006974:	fa01 f303 	lsl.w	r3, r1, r3
 8006978:	6979      	ldr	r1, [r7, #20]
 800697a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800697e:	4313      	orrs	r3, r2
 8006980:	634b      	str	r3, [r1, #52]	; 0x34
 8006982:	e06d      	b.n	8006a60 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006984:	693b      	ldr	r3, [r7, #16]
 8006986:	015a      	lsls	r2, r3, #5
 8006988:	697b      	ldr	r3, [r7, #20]
 800698a:	4413      	add	r3, r2
 800698c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006990:	691b      	ldr	r3, [r3, #16]
 8006992:	693a      	ldr	r2, [r7, #16]
 8006994:	0151      	lsls	r1, r2, #5
 8006996:	697a      	ldr	r2, [r7, #20]
 8006998:	440a      	add	r2, r1
 800699a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800699e:	0cdb      	lsrs	r3, r3, #19
 80069a0:	04db      	lsls	r3, r3, #19
 80069a2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80069a4:	693b      	ldr	r3, [r7, #16]
 80069a6:	015a      	lsls	r2, r3, #5
 80069a8:	697b      	ldr	r3, [r7, #20]
 80069aa:	4413      	add	r3, r2
 80069ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069b0:	691b      	ldr	r3, [r3, #16]
 80069b2:	693a      	ldr	r2, [r7, #16]
 80069b4:	0151      	lsls	r1, r2, #5
 80069b6:	697a      	ldr	r2, [r7, #20]
 80069b8:	440a      	add	r2, r1
 80069ba:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80069be:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80069c2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80069c6:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 80069c8:	68bb      	ldr	r3, [r7, #8]
 80069ca:	695b      	ldr	r3, [r3, #20]
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d003      	beq.n	80069d8 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 80069d0:	68bb      	ldr	r3, [r7, #8]
 80069d2:	689a      	ldr	r2, [r3, #8]
 80069d4:	68bb      	ldr	r3, [r7, #8]
 80069d6:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80069d8:	693b      	ldr	r3, [r7, #16]
 80069da:	015a      	lsls	r2, r3, #5
 80069dc:	697b      	ldr	r3, [r7, #20]
 80069de:	4413      	add	r3, r2
 80069e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069e4:	691b      	ldr	r3, [r3, #16]
 80069e6:	693a      	ldr	r2, [r7, #16]
 80069e8:	0151      	lsls	r1, r2, #5
 80069ea:	697a      	ldr	r2, [r7, #20]
 80069ec:	440a      	add	r2, r1
 80069ee:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80069f2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80069f6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 80069f8:	693b      	ldr	r3, [r7, #16]
 80069fa:	015a      	lsls	r2, r3, #5
 80069fc:	697b      	ldr	r3, [r7, #20]
 80069fe:	4413      	add	r3, r2
 8006a00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a04:	691a      	ldr	r2, [r3, #16]
 8006a06:	68bb      	ldr	r3, [r7, #8]
 8006a08:	689b      	ldr	r3, [r3, #8]
 8006a0a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006a0e:	6939      	ldr	r1, [r7, #16]
 8006a10:	0148      	lsls	r0, r1, #5
 8006a12:	6979      	ldr	r1, [r7, #20]
 8006a14:	4401      	add	r1, r0
 8006a16:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006a1a:	4313      	orrs	r3, r2
 8006a1c:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8006a1e:	79fb      	ldrb	r3, [r7, #7]
 8006a20:	2b01      	cmp	r3, #1
 8006a22:	d10d      	bne.n	8006a40 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8006a24:	68bb      	ldr	r3, [r7, #8]
 8006a26:	68db      	ldr	r3, [r3, #12]
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d009      	beq.n	8006a40 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8006a2c:	68bb      	ldr	r3, [r7, #8]
 8006a2e:	68d9      	ldr	r1, [r3, #12]
 8006a30:	693b      	ldr	r3, [r7, #16]
 8006a32:	015a      	lsls	r2, r3, #5
 8006a34:	697b      	ldr	r3, [r7, #20]
 8006a36:	4413      	add	r3, r2
 8006a38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a3c:	460a      	mov	r2, r1
 8006a3e:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006a40:	693b      	ldr	r3, [r7, #16]
 8006a42:	015a      	lsls	r2, r3, #5
 8006a44:	697b      	ldr	r3, [r7, #20]
 8006a46:	4413      	add	r3, r2
 8006a48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	693a      	ldr	r2, [r7, #16]
 8006a50:	0151      	lsls	r1, r2, #5
 8006a52:	697a      	ldr	r2, [r7, #20]
 8006a54:	440a      	add	r2, r1
 8006a56:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006a5a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006a5e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006a60:	2300      	movs	r3, #0
}
 8006a62:	4618      	mov	r0, r3
 8006a64:	371c      	adds	r7, #28
 8006a66:	46bd      	mov	sp, r7
 8006a68:	bc80      	pop	{r7}
 8006a6a:	4770      	bx	lr

08006a6c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8006a6c:	b480      	push	{r7}
 8006a6e:	b089      	sub	sp, #36	; 0x24
 8006a70:	af00      	add	r7, sp, #0
 8006a72:	60f8      	str	r0, [r7, #12]
 8006a74:	60b9      	str	r1, [r7, #8]
 8006a76:	4611      	mov	r1, r2
 8006a78:	461a      	mov	r2, r3
 8006a7a:	460b      	mov	r3, r1
 8006a7c:	71fb      	strb	r3, [r7, #7]
 8006a7e:	4613      	mov	r3, r2
 8006a80:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8006a86:	68bb      	ldr	r3, [r7, #8]
 8006a88:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8006a8a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d123      	bne.n	8006ada <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8006a92:	88bb      	ldrh	r3, [r7, #4]
 8006a94:	3303      	adds	r3, #3
 8006a96:	089b      	lsrs	r3, r3, #2
 8006a98:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8006a9a:	2300      	movs	r3, #0
 8006a9c:	61bb      	str	r3, [r7, #24]
 8006a9e:	e018      	b.n	8006ad2 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006aa0:	79fb      	ldrb	r3, [r7, #7]
 8006aa2:	031a      	lsls	r2, r3, #12
 8006aa4:	697b      	ldr	r3, [r7, #20]
 8006aa6:	4413      	add	r3, r2
 8006aa8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006aac:	461a      	mov	r2, r3
 8006aae:	69fb      	ldr	r3, [r7, #28]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	6013      	str	r3, [r2, #0]
      pSrc++;
 8006ab4:	69fb      	ldr	r3, [r7, #28]
 8006ab6:	3301      	adds	r3, #1
 8006ab8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006aba:	69fb      	ldr	r3, [r7, #28]
 8006abc:	3301      	adds	r3, #1
 8006abe:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006ac0:	69fb      	ldr	r3, [r7, #28]
 8006ac2:	3301      	adds	r3, #1
 8006ac4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006ac6:	69fb      	ldr	r3, [r7, #28]
 8006ac8:	3301      	adds	r3, #1
 8006aca:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006acc:	69bb      	ldr	r3, [r7, #24]
 8006ace:	3301      	adds	r3, #1
 8006ad0:	61bb      	str	r3, [r7, #24]
 8006ad2:	69ba      	ldr	r2, [r7, #24]
 8006ad4:	693b      	ldr	r3, [r7, #16]
 8006ad6:	429a      	cmp	r2, r3
 8006ad8:	d3e2      	bcc.n	8006aa0 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8006ada:	2300      	movs	r3, #0
}
 8006adc:	4618      	mov	r0, r3
 8006ade:	3724      	adds	r7, #36	; 0x24
 8006ae0:	46bd      	mov	sp, r7
 8006ae2:	bc80      	pop	{r7}
 8006ae4:	4770      	bx	lr

08006ae6 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006ae6:	b480      	push	{r7}
 8006ae8:	b08b      	sub	sp, #44	; 0x2c
 8006aea:	af00      	add	r7, sp, #0
 8006aec:	60f8      	str	r0, [r7, #12]
 8006aee:	60b9      	str	r1, [r7, #8]
 8006af0:	4613      	mov	r3, r2
 8006af2:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8006af8:	68bb      	ldr	r3, [r7, #8]
 8006afa:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8006afc:	88fb      	ldrh	r3, [r7, #6]
 8006afe:	089b      	lsrs	r3, r3, #2
 8006b00:	b29b      	uxth	r3, r3
 8006b02:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8006b04:	88fb      	ldrh	r3, [r7, #6]
 8006b06:	f003 0303 	and.w	r3, r3, #3
 8006b0a:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8006b0c:	2300      	movs	r3, #0
 8006b0e:	623b      	str	r3, [r7, #32]
 8006b10:	e014      	b.n	8006b3c <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006b12:	69bb      	ldr	r3, [r7, #24]
 8006b14:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006b18:	681a      	ldr	r2, [r3, #0]
 8006b1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b1c:	601a      	str	r2, [r3, #0]
    pDest++;
 8006b1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b20:	3301      	adds	r3, #1
 8006b22:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006b24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b26:	3301      	adds	r3, #1
 8006b28:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006b2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b2c:	3301      	adds	r3, #1
 8006b2e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006b30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b32:	3301      	adds	r3, #1
 8006b34:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8006b36:	6a3b      	ldr	r3, [r7, #32]
 8006b38:	3301      	adds	r3, #1
 8006b3a:	623b      	str	r3, [r7, #32]
 8006b3c:	6a3a      	ldr	r2, [r7, #32]
 8006b3e:	697b      	ldr	r3, [r7, #20]
 8006b40:	429a      	cmp	r2, r3
 8006b42:	d3e6      	bcc.n	8006b12 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8006b44:	8bfb      	ldrh	r3, [r7, #30]
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d01e      	beq.n	8006b88 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8006b4a:	2300      	movs	r3, #0
 8006b4c:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8006b4e:	69bb      	ldr	r3, [r7, #24]
 8006b50:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006b54:	461a      	mov	r2, r3
 8006b56:	f107 0310 	add.w	r3, r7, #16
 8006b5a:	6812      	ldr	r2, [r2, #0]
 8006b5c:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8006b5e:	693a      	ldr	r2, [r7, #16]
 8006b60:	6a3b      	ldr	r3, [r7, #32]
 8006b62:	b2db      	uxtb	r3, r3
 8006b64:	00db      	lsls	r3, r3, #3
 8006b66:	fa22 f303 	lsr.w	r3, r2, r3
 8006b6a:	b2da      	uxtb	r2, r3
 8006b6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b6e:	701a      	strb	r2, [r3, #0]
      i++;
 8006b70:	6a3b      	ldr	r3, [r7, #32]
 8006b72:	3301      	adds	r3, #1
 8006b74:	623b      	str	r3, [r7, #32]
      pDest++;
 8006b76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b78:	3301      	adds	r3, #1
 8006b7a:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8006b7c:	8bfb      	ldrh	r3, [r7, #30]
 8006b7e:	3b01      	subs	r3, #1
 8006b80:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8006b82:	8bfb      	ldrh	r3, [r7, #30]
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d1ea      	bne.n	8006b5e <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8006b88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006b8a:	4618      	mov	r0, r3
 8006b8c:	372c      	adds	r7, #44	; 0x2c
 8006b8e:	46bd      	mov	sp, r7
 8006b90:	bc80      	pop	{r7}
 8006b92:	4770      	bx	lr

08006b94 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006b94:	b480      	push	{r7}
 8006b96:	b085      	sub	sp, #20
 8006b98:	af00      	add	r7, sp, #0
 8006b9a:	6078      	str	r0, [r7, #4]
 8006b9c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006ba2:	683b      	ldr	r3, [r7, #0]
 8006ba4:	781b      	ldrb	r3, [r3, #0]
 8006ba6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006ba8:	683b      	ldr	r3, [r7, #0]
 8006baa:	785b      	ldrb	r3, [r3, #1]
 8006bac:	2b01      	cmp	r3, #1
 8006bae:	d12c      	bne.n	8006c0a <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006bb0:	68bb      	ldr	r3, [r7, #8]
 8006bb2:	015a      	lsls	r2, r3, #5
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	4413      	add	r3, r2
 8006bb8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	db12      	blt.n	8006be8 <USB_EPSetStall+0x54>
 8006bc2:	68bb      	ldr	r3, [r7, #8]
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d00f      	beq.n	8006be8 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8006bc8:	68bb      	ldr	r3, [r7, #8]
 8006bca:	015a      	lsls	r2, r3, #5
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	4413      	add	r3, r2
 8006bd0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	68ba      	ldr	r2, [r7, #8]
 8006bd8:	0151      	lsls	r1, r2, #5
 8006bda:	68fa      	ldr	r2, [r7, #12]
 8006bdc:	440a      	add	r2, r1
 8006bde:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006be2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006be6:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8006be8:	68bb      	ldr	r3, [r7, #8]
 8006bea:	015a      	lsls	r2, r3, #5
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	4413      	add	r3, r2
 8006bf0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	68ba      	ldr	r2, [r7, #8]
 8006bf8:	0151      	lsls	r1, r2, #5
 8006bfa:	68fa      	ldr	r2, [r7, #12]
 8006bfc:	440a      	add	r2, r1
 8006bfe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006c02:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006c06:	6013      	str	r3, [r2, #0]
 8006c08:	e02b      	b.n	8006c62 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006c0a:	68bb      	ldr	r3, [r7, #8]
 8006c0c:	015a      	lsls	r2, r3, #5
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	4413      	add	r3, r2
 8006c12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	db12      	blt.n	8006c42 <USB_EPSetStall+0xae>
 8006c1c:	68bb      	ldr	r3, [r7, #8]
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d00f      	beq.n	8006c42 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8006c22:	68bb      	ldr	r3, [r7, #8]
 8006c24:	015a      	lsls	r2, r3, #5
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	4413      	add	r3, r2
 8006c2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	68ba      	ldr	r2, [r7, #8]
 8006c32:	0151      	lsls	r1, r2, #5
 8006c34:	68fa      	ldr	r2, [r7, #12]
 8006c36:	440a      	add	r2, r1
 8006c38:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006c3c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006c40:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8006c42:	68bb      	ldr	r3, [r7, #8]
 8006c44:	015a      	lsls	r2, r3, #5
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	4413      	add	r3, r2
 8006c4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	68ba      	ldr	r2, [r7, #8]
 8006c52:	0151      	lsls	r1, r2, #5
 8006c54:	68fa      	ldr	r2, [r7, #12]
 8006c56:	440a      	add	r2, r1
 8006c58:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006c5c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006c60:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006c62:	2300      	movs	r3, #0
}
 8006c64:	4618      	mov	r0, r3
 8006c66:	3714      	adds	r7, #20
 8006c68:	46bd      	mov	sp, r7
 8006c6a:	bc80      	pop	{r7}
 8006c6c:	4770      	bx	lr

08006c6e <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006c6e:	b480      	push	{r7}
 8006c70:	b085      	sub	sp, #20
 8006c72:	af00      	add	r7, sp, #0
 8006c74:	6078      	str	r0, [r7, #4]
 8006c76:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006c7c:	683b      	ldr	r3, [r7, #0]
 8006c7e:	781b      	ldrb	r3, [r3, #0]
 8006c80:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006c82:	683b      	ldr	r3, [r7, #0]
 8006c84:	785b      	ldrb	r3, [r3, #1]
 8006c86:	2b01      	cmp	r3, #1
 8006c88:	d128      	bne.n	8006cdc <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006c8a:	68bb      	ldr	r3, [r7, #8]
 8006c8c:	015a      	lsls	r2, r3, #5
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	4413      	add	r3, r2
 8006c92:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	68ba      	ldr	r2, [r7, #8]
 8006c9a:	0151      	lsls	r1, r2, #5
 8006c9c:	68fa      	ldr	r2, [r7, #12]
 8006c9e:	440a      	add	r2, r1
 8006ca0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006ca4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006ca8:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006caa:	683b      	ldr	r3, [r7, #0]
 8006cac:	78db      	ldrb	r3, [r3, #3]
 8006cae:	2b03      	cmp	r3, #3
 8006cb0:	d003      	beq.n	8006cba <USB_EPClearStall+0x4c>
 8006cb2:	683b      	ldr	r3, [r7, #0]
 8006cb4:	78db      	ldrb	r3, [r3, #3]
 8006cb6:	2b02      	cmp	r3, #2
 8006cb8:	d138      	bne.n	8006d2c <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006cba:	68bb      	ldr	r3, [r7, #8]
 8006cbc:	015a      	lsls	r2, r3, #5
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	4413      	add	r3, r2
 8006cc2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	68ba      	ldr	r2, [r7, #8]
 8006cca:	0151      	lsls	r1, r2, #5
 8006ccc:	68fa      	ldr	r2, [r7, #12]
 8006cce:	440a      	add	r2, r1
 8006cd0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006cd4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006cd8:	6013      	str	r3, [r2, #0]
 8006cda:	e027      	b.n	8006d2c <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8006cdc:	68bb      	ldr	r3, [r7, #8]
 8006cde:	015a      	lsls	r2, r3, #5
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	4413      	add	r3, r2
 8006ce4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	68ba      	ldr	r2, [r7, #8]
 8006cec:	0151      	lsls	r1, r2, #5
 8006cee:	68fa      	ldr	r2, [r7, #12]
 8006cf0:	440a      	add	r2, r1
 8006cf2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006cf6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006cfa:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006cfc:	683b      	ldr	r3, [r7, #0]
 8006cfe:	78db      	ldrb	r3, [r3, #3]
 8006d00:	2b03      	cmp	r3, #3
 8006d02:	d003      	beq.n	8006d0c <USB_EPClearStall+0x9e>
 8006d04:	683b      	ldr	r3, [r7, #0]
 8006d06:	78db      	ldrb	r3, [r3, #3]
 8006d08:	2b02      	cmp	r3, #2
 8006d0a:	d10f      	bne.n	8006d2c <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006d0c:	68bb      	ldr	r3, [r7, #8]
 8006d0e:	015a      	lsls	r2, r3, #5
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	4413      	add	r3, r2
 8006d14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	68ba      	ldr	r2, [r7, #8]
 8006d1c:	0151      	lsls	r1, r2, #5
 8006d1e:	68fa      	ldr	r2, [r7, #12]
 8006d20:	440a      	add	r2, r1
 8006d22:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006d26:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006d2a:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8006d2c:	2300      	movs	r3, #0
}
 8006d2e:	4618      	mov	r0, r3
 8006d30:	3714      	adds	r7, #20
 8006d32:	46bd      	mov	sp, r7
 8006d34:	bc80      	pop	{r7}
 8006d36:	4770      	bx	lr

08006d38 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8006d38:	b480      	push	{r7}
 8006d3a:	b085      	sub	sp, #20
 8006d3c:	af00      	add	r7, sp, #0
 8006d3e:	6078      	str	r0, [r7, #4]
 8006d40:	460b      	mov	r3, r1
 8006d42:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	68fa      	ldr	r2, [r7, #12]
 8006d52:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006d56:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8006d5a:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d62:	681a      	ldr	r2, [r3, #0]
 8006d64:	78fb      	ldrb	r3, [r7, #3]
 8006d66:	011b      	lsls	r3, r3, #4
 8006d68:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8006d6c:	68f9      	ldr	r1, [r7, #12]
 8006d6e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006d72:	4313      	orrs	r3, r2
 8006d74:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8006d76:	2300      	movs	r3, #0
}
 8006d78:	4618      	mov	r0, r3
 8006d7a:	3714      	adds	r7, #20
 8006d7c:	46bd      	mov	sp, r7
 8006d7e:	bc80      	pop	{r7}
 8006d80:	4770      	bx	lr

08006d82 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006d82:	b480      	push	{r7}
 8006d84:	b085      	sub	sp, #20
 8006d86:	af00      	add	r7, sp, #0
 8006d88:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	68fa      	ldr	r2, [r7, #12]
 8006d98:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006d9c:	f023 0303 	bic.w	r3, r3, #3
 8006da0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006da8:	685b      	ldr	r3, [r3, #4]
 8006daa:	68fa      	ldr	r2, [r7, #12]
 8006dac:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006db0:	f023 0302 	bic.w	r3, r3, #2
 8006db4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006db6:	2300      	movs	r3, #0
}
 8006db8:	4618      	mov	r0, r3
 8006dba:	3714      	adds	r7, #20
 8006dbc:	46bd      	mov	sp, r7
 8006dbe:	bc80      	pop	{r7}
 8006dc0:	4770      	bx	lr

08006dc2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006dc2:	b480      	push	{r7}
 8006dc4:	b085      	sub	sp, #20
 8006dc6:	af00      	add	r7, sp, #0
 8006dc8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	68fa      	ldr	r2, [r7, #12]
 8006dd8:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006ddc:	f023 0303 	bic.w	r3, r3, #3
 8006de0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006de8:	685b      	ldr	r3, [r3, #4]
 8006dea:	68fa      	ldr	r2, [r7, #12]
 8006dec:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006df0:	f043 0302 	orr.w	r3, r3, #2
 8006df4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006df6:	2300      	movs	r3, #0
}
 8006df8:	4618      	mov	r0, r3
 8006dfa:	3714      	adds	r7, #20
 8006dfc:	46bd      	mov	sp, r7
 8006dfe:	bc80      	pop	{r7}
 8006e00:	4770      	bx	lr

08006e02 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8006e02:	b480      	push	{r7}
 8006e04:	b085      	sub	sp, #20
 8006e06:	af00      	add	r7, sp, #0
 8006e08:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	695b      	ldr	r3, [r3, #20]
 8006e0e:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	699b      	ldr	r3, [r3, #24]
 8006e14:	68fa      	ldr	r2, [r7, #12]
 8006e16:	4013      	ands	r3, r2
 8006e18:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006e1a:	68fb      	ldr	r3, [r7, #12]
}
 8006e1c:	4618      	mov	r0, r3
 8006e1e:	3714      	adds	r7, #20
 8006e20:	46bd      	mov	sp, r7
 8006e22:	bc80      	pop	{r7}
 8006e24:	4770      	bx	lr

08006e26 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006e26:	b480      	push	{r7}
 8006e28:	b085      	sub	sp, #20
 8006e2a:	af00      	add	r7, sp, #0
 8006e2c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e38:	699b      	ldr	r3, [r3, #24]
 8006e3a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e42:	69db      	ldr	r3, [r3, #28]
 8006e44:	68ba      	ldr	r2, [r7, #8]
 8006e46:	4013      	ands	r3, r2
 8006e48:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8006e4a:	68bb      	ldr	r3, [r7, #8]
 8006e4c:	0c1b      	lsrs	r3, r3, #16
}
 8006e4e:	4618      	mov	r0, r3
 8006e50:	3714      	adds	r7, #20
 8006e52:	46bd      	mov	sp, r7
 8006e54:	bc80      	pop	{r7}
 8006e56:	4770      	bx	lr

08006e58 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006e58:	b480      	push	{r7}
 8006e5a:	b085      	sub	sp, #20
 8006e5c:	af00      	add	r7, sp, #0
 8006e5e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e6a:	699b      	ldr	r3, [r3, #24]
 8006e6c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e74:	69db      	ldr	r3, [r3, #28]
 8006e76:	68ba      	ldr	r2, [r7, #8]
 8006e78:	4013      	ands	r3, r2
 8006e7a:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8006e7c:	68bb      	ldr	r3, [r7, #8]
 8006e7e:	b29b      	uxth	r3, r3
}
 8006e80:	4618      	mov	r0, r3
 8006e82:	3714      	adds	r7, #20
 8006e84:	46bd      	mov	sp, r7
 8006e86:	bc80      	pop	{r7}
 8006e88:	4770      	bx	lr

08006e8a <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006e8a:	b480      	push	{r7}
 8006e8c:	b085      	sub	sp, #20
 8006e8e:	af00      	add	r7, sp, #0
 8006e90:	6078      	str	r0, [r7, #4]
 8006e92:	460b      	mov	r3, r1
 8006e94:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8006e9a:	78fb      	ldrb	r3, [r7, #3]
 8006e9c:	015a      	lsls	r2, r3, #5
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	4413      	add	r3, r2
 8006ea2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ea6:	689b      	ldr	r3, [r3, #8]
 8006ea8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006eb0:	695b      	ldr	r3, [r3, #20]
 8006eb2:	68ba      	ldr	r2, [r7, #8]
 8006eb4:	4013      	ands	r3, r2
 8006eb6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006eb8:	68bb      	ldr	r3, [r7, #8]
}
 8006eba:	4618      	mov	r0, r3
 8006ebc:	3714      	adds	r7, #20
 8006ebe:	46bd      	mov	sp, r7
 8006ec0:	bc80      	pop	{r7}
 8006ec2:	4770      	bx	lr

08006ec4 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006ec4:	b480      	push	{r7}
 8006ec6:	b087      	sub	sp, #28
 8006ec8:	af00      	add	r7, sp, #0
 8006eca:	6078      	str	r0, [r7, #4]
 8006ecc:	460b      	mov	r3, r1
 8006ece:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8006ed4:	697b      	ldr	r3, [r7, #20]
 8006ed6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006eda:	691b      	ldr	r3, [r3, #16]
 8006edc:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8006ede:	697b      	ldr	r3, [r7, #20]
 8006ee0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ee4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ee6:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8006ee8:	78fb      	ldrb	r3, [r7, #3]
 8006eea:	f003 030f 	and.w	r3, r3, #15
 8006eee:	68fa      	ldr	r2, [r7, #12]
 8006ef0:	fa22 f303 	lsr.w	r3, r2, r3
 8006ef4:	01db      	lsls	r3, r3, #7
 8006ef6:	b2db      	uxtb	r3, r3
 8006ef8:	693a      	ldr	r2, [r7, #16]
 8006efa:	4313      	orrs	r3, r2
 8006efc:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8006efe:	78fb      	ldrb	r3, [r7, #3]
 8006f00:	015a      	lsls	r2, r3, #5
 8006f02:	697b      	ldr	r3, [r7, #20]
 8006f04:	4413      	add	r3, r2
 8006f06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f0a:	689b      	ldr	r3, [r3, #8]
 8006f0c:	693a      	ldr	r2, [r7, #16]
 8006f0e:	4013      	ands	r3, r2
 8006f10:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006f12:	68bb      	ldr	r3, [r7, #8]
}
 8006f14:	4618      	mov	r0, r3
 8006f16:	371c      	adds	r7, #28
 8006f18:	46bd      	mov	sp, r7
 8006f1a:	bc80      	pop	{r7}
 8006f1c:	4770      	bx	lr

08006f1e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006f1e:	b480      	push	{r7}
 8006f20:	b083      	sub	sp, #12
 8006f22:	af00      	add	r7, sp, #0
 8006f24:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	695b      	ldr	r3, [r3, #20]
 8006f2a:	f003 0301 	and.w	r3, r3, #1
}
 8006f2e:	4618      	mov	r0, r3
 8006f30:	370c      	adds	r7, #12
 8006f32:	46bd      	mov	sp, r7
 8006f34:	bc80      	pop	{r7}
 8006f36:	4770      	bx	lr

08006f38 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8006f38:	b480      	push	{r7}
 8006f3a:	b085      	sub	sp, #20
 8006f3c:	af00      	add	r7, sp, #0
 8006f3e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	68fa      	ldr	r2, [r7, #12]
 8006f4e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006f52:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8006f56:	f023 0307 	bic.w	r3, r3, #7
 8006f5a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f62:	685b      	ldr	r3, [r3, #4]
 8006f64:	68fa      	ldr	r2, [r7, #12]
 8006f66:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006f6a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006f6e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006f70:	2300      	movs	r3, #0
}
 8006f72:	4618      	mov	r0, r3
 8006f74:	3714      	adds	r7, #20
 8006f76:	46bd      	mov	sp, r7
 8006f78:	bc80      	pop	{r7}
 8006f7a:	4770      	bx	lr

08006f7c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8006f7c:	b480      	push	{r7}
 8006f7e:	b087      	sub	sp, #28
 8006f80:	af00      	add	r7, sp, #0
 8006f82:	60f8      	str	r0, [r7, #12]
 8006f84:	460b      	mov	r3, r1
 8006f86:	607a      	str	r2, [r7, #4]
 8006f88:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	333c      	adds	r3, #60	; 0x3c
 8006f92:	3304      	adds	r3, #4
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8006f98:	693b      	ldr	r3, [r7, #16]
 8006f9a:	4a25      	ldr	r2, [pc, #148]	; (8007030 <USB_EP0_OutStart+0xb4>)
 8006f9c:	4293      	cmp	r3, r2
 8006f9e:	d90a      	bls.n	8006fb6 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006fa0:	697b      	ldr	r3, [r7, #20]
 8006fa2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006fac:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006fb0:	d101      	bne.n	8006fb6 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8006fb2:	2300      	movs	r3, #0
 8006fb4:	e037      	b.n	8007026 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8006fb6:	697b      	ldr	r3, [r7, #20]
 8006fb8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006fbc:	461a      	mov	r2, r3
 8006fbe:	2300      	movs	r3, #0
 8006fc0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006fc2:	697b      	ldr	r3, [r7, #20]
 8006fc4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006fc8:	691b      	ldr	r3, [r3, #16]
 8006fca:	697a      	ldr	r2, [r7, #20]
 8006fcc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006fd0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006fd4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8006fd6:	697b      	ldr	r3, [r7, #20]
 8006fd8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006fdc:	691b      	ldr	r3, [r3, #16]
 8006fde:	697a      	ldr	r2, [r7, #20]
 8006fe0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006fe4:	f043 0318 	orr.w	r3, r3, #24
 8006fe8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8006fea:	697b      	ldr	r3, [r7, #20]
 8006fec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ff0:	691b      	ldr	r3, [r3, #16]
 8006ff2:	697a      	ldr	r2, [r7, #20]
 8006ff4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006ff8:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8006ffc:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8006ffe:	7afb      	ldrb	r3, [r7, #11]
 8007000:	2b01      	cmp	r3, #1
 8007002:	d10f      	bne.n	8007024 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8007004:	697b      	ldr	r3, [r7, #20]
 8007006:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800700a:	461a      	mov	r2, r3
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8007010:	697b      	ldr	r3, [r7, #20]
 8007012:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	697a      	ldr	r2, [r7, #20]
 800701a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800701e:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8007022:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007024:	2300      	movs	r3, #0
}
 8007026:	4618      	mov	r0, r3
 8007028:	371c      	adds	r7, #28
 800702a:	46bd      	mov	sp, r7
 800702c:	bc80      	pop	{r7}
 800702e:	4770      	bx	lr
 8007030:	4f54300a 	.word	0x4f54300a

08007034 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007034:	b480      	push	{r7}
 8007036:	b085      	sub	sp, #20
 8007038:	af00      	add	r7, sp, #0
 800703a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800703c:	2300      	movs	r3, #0
 800703e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	3301      	adds	r3, #1
 8007044:	60fb      	str	r3, [r7, #12]
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	4a12      	ldr	r2, [pc, #72]	; (8007094 <USB_CoreReset+0x60>)
 800704a:	4293      	cmp	r3, r2
 800704c:	d901      	bls.n	8007052 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800704e:	2303      	movs	r3, #3
 8007050:	e01b      	b.n	800708a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	691b      	ldr	r3, [r3, #16]
 8007056:	2b00      	cmp	r3, #0
 8007058:	daf2      	bge.n	8007040 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800705a:	2300      	movs	r3, #0
 800705c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	691b      	ldr	r3, [r3, #16]
 8007062:	f043 0201 	orr.w	r2, r3, #1
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	3301      	adds	r3, #1
 800706e:	60fb      	str	r3, [r7, #12]
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	4a08      	ldr	r2, [pc, #32]	; (8007094 <USB_CoreReset+0x60>)
 8007074:	4293      	cmp	r3, r2
 8007076:	d901      	bls.n	800707c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007078:	2303      	movs	r3, #3
 800707a:	e006      	b.n	800708a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	691b      	ldr	r3, [r3, #16]
 8007080:	f003 0301 	and.w	r3, r3, #1
 8007084:	2b01      	cmp	r3, #1
 8007086:	d0f0      	beq.n	800706a <USB_CoreReset+0x36>

  return HAL_OK;
 8007088:	2300      	movs	r3, #0
}
 800708a:	4618      	mov	r0, r3
 800708c:	3714      	adds	r7, #20
 800708e:	46bd      	mov	sp, r7
 8007090:	bc80      	pop	{r7}
 8007092:	4770      	bx	lr
 8007094:	00030d40 	.word	0x00030d40

08007098 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007098:	b580      	push	{r7, lr}
 800709a:	b084      	sub	sp, #16
 800709c:	af00      	add	r7, sp, #0
 800709e:	6078      	str	r0, [r7, #4]
 80070a0:	460b      	mov	r3, r1
 80070a2:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 80070a4:	2300      	movs	r3, #0
 80070a6:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	7c1b      	ldrb	r3, [r3, #16]
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d115      	bne.n	80070dc <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80070b0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80070b4:	2202      	movs	r2, #2
 80070b6:	2181      	movs	r1, #129	; 0x81
 80070b8:	6878      	ldr	r0, [r7, #4]
 80070ba:	f001 ff48 	bl	8008f4e <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	2201      	movs	r2, #1
 80070c2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80070c4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80070c8:	2202      	movs	r2, #2
 80070ca:	2101      	movs	r1, #1
 80070cc:	6878      	ldr	r0, [r7, #4]
 80070ce:	f001 ff3e 	bl	8008f4e <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	2201      	movs	r2, #1
 80070d6:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 80070da:	e012      	b.n	8007102 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80070dc:	2340      	movs	r3, #64	; 0x40
 80070de:	2202      	movs	r2, #2
 80070e0:	2181      	movs	r1, #129	; 0x81
 80070e2:	6878      	ldr	r0, [r7, #4]
 80070e4:	f001 ff33 	bl	8008f4e <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	2201      	movs	r2, #1
 80070ec:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80070ee:	2340      	movs	r3, #64	; 0x40
 80070f0:	2202      	movs	r2, #2
 80070f2:	2101      	movs	r1, #1
 80070f4:	6878      	ldr	r0, [r7, #4]
 80070f6:	f001 ff2a 	bl	8008f4e <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	2201      	movs	r2, #1
 80070fe:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8007102:	2308      	movs	r3, #8
 8007104:	2203      	movs	r2, #3
 8007106:	2182      	movs	r1, #130	; 0x82
 8007108:	6878      	ldr	r0, [r7, #4]
 800710a:	f001 ff20 	bl	8008f4e <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	2201      	movs	r2, #1
 8007112:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8007114:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8007118:	f002 f9a6 	bl	8009468 <malloc>
 800711c:	4603      	mov	r3, r0
 800711e:	461a      	mov	r2, r3
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800712c:	2b00      	cmp	r3, #0
 800712e:	d102      	bne.n	8007136 <USBD_CDC_Init+0x9e>
  {
    ret = 1U;
 8007130:	2301      	movs	r3, #1
 8007132:	73fb      	strb	r3, [r7, #15]
 8007134:	e026      	b.n	8007184 <USBD_CDC_Init+0xec>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800713c:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8007148:	68bb      	ldr	r3, [r7, #8]
 800714a:	2200      	movs	r2, #0
 800714c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8007150:	68bb      	ldr	r3, [r7, #8]
 8007152:	2200      	movs	r2, #0
 8007154:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	7c1b      	ldrb	r3, [r3, #16]
 800715c:	2b00      	cmp	r3, #0
 800715e:	d109      	bne.n	8007174 <USBD_CDC_Init+0xdc>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007160:	68bb      	ldr	r3, [r7, #8]
 8007162:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007166:	f44f 7300 	mov.w	r3, #512	; 0x200
 800716a:	2101      	movs	r1, #1
 800716c:	6878      	ldr	r0, [r7, #4]
 800716e:	f001 ffde 	bl	800912e <USBD_LL_PrepareReceive>
 8007172:	e007      	b.n	8007184 <USBD_CDC_Init+0xec>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007174:	68bb      	ldr	r3, [r7, #8]
 8007176:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800717a:	2340      	movs	r3, #64	; 0x40
 800717c:	2101      	movs	r1, #1
 800717e:	6878      	ldr	r0, [r7, #4]
 8007180:	f001 ffd5 	bl	800912e <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8007184:	7bfb      	ldrb	r3, [r7, #15]
}
 8007186:	4618      	mov	r0, r3
 8007188:	3710      	adds	r7, #16
 800718a:	46bd      	mov	sp, r7
 800718c:	bd80      	pop	{r7, pc}

0800718e <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800718e:	b580      	push	{r7, lr}
 8007190:	b084      	sub	sp, #16
 8007192:	af00      	add	r7, sp, #0
 8007194:	6078      	str	r0, [r7, #4]
 8007196:	460b      	mov	r3, r1
 8007198:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800719a:	2300      	movs	r3, #0
 800719c:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800719e:	2181      	movs	r1, #129	; 0x81
 80071a0:	6878      	ldr	r0, [r7, #4]
 80071a2:	f001 fefa 	bl	8008f9a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	2200      	movs	r2, #0
 80071aa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80071ac:	2101      	movs	r1, #1
 80071ae:	6878      	ldr	r0, [r7, #4]
 80071b0:	f001 fef3 	bl	8008f9a <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	2200      	movs	r2, #0
 80071b8:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80071bc:	2182      	movs	r1, #130	; 0x82
 80071be:	6878      	ldr	r0, [r7, #4]
 80071c0:	f001 feeb 	bl	8008f9a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	2200      	movs	r2, #0
 80071c8:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d00e      	beq.n	80071f2 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80071da:	685b      	ldr	r3, [r3, #4]
 80071dc:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80071e4:	4618      	mov	r0, r3
 80071e6:	f002 f947 	bl	8009478 <free>
    pdev->pClassData = NULL;
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	2200      	movs	r2, #0
 80071ee:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 80071f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80071f4:	4618      	mov	r0, r3
 80071f6:	3710      	adds	r7, #16
 80071f8:	46bd      	mov	sp, r7
 80071fa:	bd80      	pop	{r7, pc}

080071fc <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80071fc:	b580      	push	{r7, lr}
 80071fe:	b086      	sub	sp, #24
 8007200:	af00      	add	r7, sp, #0
 8007202:	6078      	str	r0, [r7, #4]
 8007204:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800720c:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800720e:	2300      	movs	r3, #0
 8007210:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8007212:	2300      	movs	r3, #0
 8007214:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8007216:	2300      	movs	r3, #0
 8007218:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800721a:	683b      	ldr	r3, [r7, #0]
 800721c:	781b      	ldrb	r3, [r3, #0]
 800721e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007222:	2b00      	cmp	r3, #0
 8007224:	d039      	beq.n	800729a <USBD_CDC_Setup+0x9e>
 8007226:	2b20      	cmp	r3, #32
 8007228:	d17f      	bne.n	800732a <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 800722a:	683b      	ldr	r3, [r7, #0]
 800722c:	88db      	ldrh	r3, [r3, #6]
 800722e:	2b00      	cmp	r3, #0
 8007230:	d029      	beq.n	8007286 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8007232:	683b      	ldr	r3, [r7, #0]
 8007234:	781b      	ldrb	r3, [r3, #0]
 8007236:	b25b      	sxtb	r3, r3
 8007238:	2b00      	cmp	r3, #0
 800723a:	da11      	bge.n	8007260 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007242:	689b      	ldr	r3, [r3, #8]
 8007244:	683a      	ldr	r2, [r7, #0]
 8007246:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8007248:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800724a:	683a      	ldr	r2, [r7, #0]
 800724c:	88d2      	ldrh	r2, [r2, #6]
 800724e:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8007250:	6939      	ldr	r1, [r7, #16]
 8007252:	683b      	ldr	r3, [r7, #0]
 8007254:	88db      	ldrh	r3, [r3, #6]
 8007256:	461a      	mov	r2, r3
 8007258:	6878      	ldr	r0, [r7, #4]
 800725a:	f001 fa42 	bl	80086e2 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 800725e:	e06b      	b.n	8007338 <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 8007260:	683b      	ldr	r3, [r7, #0]
 8007262:	785a      	ldrb	r2, [r3, #1]
 8007264:	693b      	ldr	r3, [r7, #16]
 8007266:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800726a:	683b      	ldr	r3, [r7, #0]
 800726c:	88db      	ldrh	r3, [r3, #6]
 800726e:	b2da      	uxtb	r2, r3
 8007270:	693b      	ldr	r3, [r7, #16]
 8007272:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8007276:	6939      	ldr	r1, [r7, #16]
 8007278:	683b      	ldr	r3, [r7, #0]
 800727a:	88db      	ldrh	r3, [r3, #6]
 800727c:	461a      	mov	r2, r3
 800727e:	6878      	ldr	r0, [r7, #4]
 8007280:	f001 fa5d 	bl	800873e <USBD_CtlPrepareRx>
      break;
 8007284:	e058      	b.n	8007338 <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800728c:	689b      	ldr	r3, [r3, #8]
 800728e:	683a      	ldr	r2, [r7, #0]
 8007290:	7850      	ldrb	r0, [r2, #1]
 8007292:	2200      	movs	r2, #0
 8007294:	6839      	ldr	r1, [r7, #0]
 8007296:	4798      	blx	r3
      break;
 8007298:	e04e      	b.n	8007338 <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800729a:	683b      	ldr	r3, [r7, #0]
 800729c:	785b      	ldrb	r3, [r3, #1]
 800729e:	2b0b      	cmp	r3, #11
 80072a0:	d02e      	beq.n	8007300 <USBD_CDC_Setup+0x104>
 80072a2:	2b0b      	cmp	r3, #11
 80072a4:	dc38      	bgt.n	8007318 <USBD_CDC_Setup+0x11c>
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d002      	beq.n	80072b0 <USBD_CDC_Setup+0xb4>
 80072aa:	2b0a      	cmp	r3, #10
 80072ac:	d014      	beq.n	80072d8 <USBD_CDC_Setup+0xdc>
 80072ae:	e033      	b.n	8007318 <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80072b6:	2b03      	cmp	r3, #3
 80072b8:	d107      	bne.n	80072ca <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 80072ba:	f107 030c 	add.w	r3, r7, #12
 80072be:	2202      	movs	r2, #2
 80072c0:	4619      	mov	r1, r3
 80072c2:	6878      	ldr	r0, [r7, #4]
 80072c4:	f001 fa0d 	bl	80086e2 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80072c8:	e02e      	b.n	8007328 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 80072ca:	6839      	ldr	r1, [r7, #0]
 80072cc:	6878      	ldr	r0, [r7, #4]
 80072ce:	f001 f99e 	bl	800860e <USBD_CtlError>
            ret = USBD_FAIL;
 80072d2:	2302      	movs	r3, #2
 80072d4:	75fb      	strb	r3, [r7, #23]
          break;
 80072d6:	e027      	b.n	8007328 <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80072de:	2b03      	cmp	r3, #3
 80072e0:	d107      	bne.n	80072f2 <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 80072e2:	f107 030f 	add.w	r3, r7, #15
 80072e6:	2201      	movs	r2, #1
 80072e8:	4619      	mov	r1, r3
 80072ea:	6878      	ldr	r0, [r7, #4]
 80072ec:	f001 f9f9 	bl	80086e2 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80072f0:	e01a      	b.n	8007328 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 80072f2:	6839      	ldr	r1, [r7, #0]
 80072f4:	6878      	ldr	r0, [r7, #4]
 80072f6:	f001 f98a 	bl	800860e <USBD_CtlError>
            ret = USBD_FAIL;
 80072fa:	2302      	movs	r3, #2
 80072fc:	75fb      	strb	r3, [r7, #23]
          break;
 80072fe:	e013      	b.n	8007328 <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007306:	2b03      	cmp	r3, #3
 8007308:	d00d      	beq.n	8007326 <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 800730a:	6839      	ldr	r1, [r7, #0]
 800730c:	6878      	ldr	r0, [r7, #4]
 800730e:	f001 f97e 	bl	800860e <USBD_CtlError>
            ret = USBD_FAIL;
 8007312:	2302      	movs	r3, #2
 8007314:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8007316:	e006      	b.n	8007326 <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 8007318:	6839      	ldr	r1, [r7, #0]
 800731a:	6878      	ldr	r0, [r7, #4]
 800731c:	f001 f977 	bl	800860e <USBD_CtlError>
          ret = USBD_FAIL;
 8007320:	2302      	movs	r3, #2
 8007322:	75fb      	strb	r3, [r7, #23]
          break;
 8007324:	e000      	b.n	8007328 <USBD_CDC_Setup+0x12c>
          break;
 8007326:	bf00      	nop
      }
      break;
 8007328:	e006      	b.n	8007338 <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800732a:	6839      	ldr	r1, [r7, #0]
 800732c:	6878      	ldr	r0, [r7, #4]
 800732e:	f001 f96e 	bl	800860e <USBD_CtlError>
      ret = USBD_FAIL;
 8007332:	2302      	movs	r3, #2
 8007334:	75fb      	strb	r3, [r7, #23]
      break;
 8007336:	bf00      	nop
  }

  return ret;
 8007338:	7dfb      	ldrb	r3, [r7, #23]
}
 800733a:	4618      	mov	r0, r3
 800733c:	3718      	adds	r7, #24
 800733e:	46bd      	mov	sp, r7
 8007340:	bd80      	pop	{r7, pc}

08007342 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007342:	b580      	push	{r7, lr}
 8007344:	b084      	sub	sp, #16
 8007346:	af00      	add	r7, sp, #0
 8007348:	6078      	str	r0, [r7, #4]
 800734a:	460b      	mov	r3, r1
 800734c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007354:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800735c:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007364:	2b00      	cmp	r3, #0
 8007366:	d03a      	beq.n	80073de <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8007368:	78fa      	ldrb	r2, [r7, #3]
 800736a:	6879      	ldr	r1, [r7, #4]
 800736c:	4613      	mov	r3, r2
 800736e:	009b      	lsls	r3, r3, #2
 8007370:	4413      	add	r3, r2
 8007372:	009b      	lsls	r3, r3, #2
 8007374:	440b      	add	r3, r1
 8007376:	331c      	adds	r3, #28
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	2b00      	cmp	r3, #0
 800737c:	d029      	beq.n	80073d2 <USBD_CDC_DataIn+0x90>
 800737e:	78fa      	ldrb	r2, [r7, #3]
 8007380:	6879      	ldr	r1, [r7, #4]
 8007382:	4613      	mov	r3, r2
 8007384:	009b      	lsls	r3, r3, #2
 8007386:	4413      	add	r3, r2
 8007388:	009b      	lsls	r3, r3, #2
 800738a:	440b      	add	r3, r1
 800738c:	331c      	adds	r3, #28
 800738e:	681a      	ldr	r2, [r3, #0]
 8007390:	78f9      	ldrb	r1, [r7, #3]
 8007392:	68b8      	ldr	r0, [r7, #8]
 8007394:	460b      	mov	r3, r1
 8007396:	00db      	lsls	r3, r3, #3
 8007398:	1a5b      	subs	r3, r3, r1
 800739a:	009b      	lsls	r3, r3, #2
 800739c:	4403      	add	r3, r0
 800739e:	3344      	adds	r3, #68	; 0x44
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	fbb2 f1f3 	udiv	r1, r2, r3
 80073a6:	fb03 f301 	mul.w	r3, r3, r1
 80073aa:	1ad3      	subs	r3, r2, r3
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d110      	bne.n	80073d2 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 80073b0:	78fa      	ldrb	r2, [r7, #3]
 80073b2:	6879      	ldr	r1, [r7, #4]
 80073b4:	4613      	mov	r3, r2
 80073b6:	009b      	lsls	r3, r3, #2
 80073b8:	4413      	add	r3, r2
 80073ba:	009b      	lsls	r3, r3, #2
 80073bc:	440b      	add	r3, r1
 80073be:	331c      	adds	r3, #28
 80073c0:	2200      	movs	r2, #0
 80073c2:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80073c4:	78f9      	ldrb	r1, [r7, #3]
 80073c6:	2300      	movs	r3, #0
 80073c8:	2200      	movs	r2, #0
 80073ca:	6878      	ldr	r0, [r7, #4]
 80073cc:	f001 fe8c 	bl	80090e8 <USBD_LL_Transmit>
 80073d0:	e003      	b.n	80073da <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	2200      	movs	r2, #0
 80073d6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 80073da:	2300      	movs	r3, #0
 80073dc:	e000      	b.n	80073e0 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 80073de:	2302      	movs	r3, #2
  }
}
 80073e0:	4618      	mov	r0, r3
 80073e2:	3710      	adds	r7, #16
 80073e4:	46bd      	mov	sp, r7
 80073e6:	bd80      	pop	{r7, pc}

080073e8 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80073e8:	b580      	push	{r7, lr}
 80073ea:	b084      	sub	sp, #16
 80073ec:	af00      	add	r7, sp, #0
 80073ee:	6078      	str	r0, [r7, #4]
 80073f0:	460b      	mov	r3, r1
 80073f2:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80073fa:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80073fc:	78fb      	ldrb	r3, [r7, #3]
 80073fe:	4619      	mov	r1, r3
 8007400:	6878      	ldr	r0, [r7, #4]
 8007402:	f001 feb7 	bl	8009174 <USBD_LL_GetRxDataSize>
 8007406:	4602      	mov	r2, r0
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007414:	2b00      	cmp	r3, #0
 8007416:	d00d      	beq.n	8007434 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800741e:	68db      	ldr	r3, [r3, #12]
 8007420:	68fa      	ldr	r2, [r7, #12]
 8007422:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8007426:	68fa      	ldr	r2, [r7, #12]
 8007428:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800742c:	4611      	mov	r1, r2
 800742e:	4798      	blx	r3

    return USBD_OK;
 8007430:	2300      	movs	r3, #0
 8007432:	e000      	b.n	8007436 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8007434:	2302      	movs	r3, #2
  }
}
 8007436:	4618      	mov	r0, r3
 8007438:	3710      	adds	r7, #16
 800743a:	46bd      	mov	sp, r7
 800743c:	bd80      	pop	{r7, pc}

0800743e <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800743e:	b580      	push	{r7, lr}
 8007440:	b084      	sub	sp, #16
 8007442:	af00      	add	r7, sp, #0
 8007444:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800744c:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007454:	2b00      	cmp	r3, #0
 8007456:	d015      	beq.n	8007484 <USBD_CDC_EP0_RxReady+0x46>
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800745e:	2bff      	cmp	r3, #255	; 0xff
 8007460:	d010      	beq.n	8007484 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007468:	689b      	ldr	r3, [r3, #8]
 800746a:	68fa      	ldr	r2, [r7, #12]
 800746c:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8007470:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8007472:	68fa      	ldr	r2, [r7, #12]
 8007474:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007478:	b292      	uxth	r2, r2
 800747a:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	22ff      	movs	r2, #255	; 0xff
 8007480:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 8007484:	2300      	movs	r3, #0
}
 8007486:	4618      	mov	r0, r3
 8007488:	3710      	adds	r7, #16
 800748a:	46bd      	mov	sp, r7
 800748c:	bd80      	pop	{r7, pc}
	...

08007490 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8007490:	b480      	push	{r7}
 8007492:	b083      	sub	sp, #12
 8007494:	af00      	add	r7, sp, #0
 8007496:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	2243      	movs	r2, #67	; 0x43
 800749c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 800749e:	4b03      	ldr	r3, [pc, #12]	; (80074ac <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 80074a0:	4618      	mov	r0, r3
 80074a2:	370c      	adds	r7, #12
 80074a4:	46bd      	mov	sp, r7
 80074a6:	bc80      	pop	{r7}
 80074a8:	4770      	bx	lr
 80074aa:	bf00      	nop
 80074ac:	20000098 	.word	0x20000098

080074b0 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80074b0:	b480      	push	{r7}
 80074b2:	b083      	sub	sp, #12
 80074b4:	af00      	add	r7, sp, #0
 80074b6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	2243      	movs	r2, #67	; 0x43
 80074bc:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 80074be:	4b03      	ldr	r3, [pc, #12]	; (80074cc <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 80074c0:	4618      	mov	r0, r3
 80074c2:	370c      	adds	r7, #12
 80074c4:	46bd      	mov	sp, r7
 80074c6:	bc80      	pop	{r7}
 80074c8:	4770      	bx	lr
 80074ca:	bf00      	nop
 80074cc:	20000054 	.word	0x20000054

080074d0 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80074d0:	b480      	push	{r7}
 80074d2:	b083      	sub	sp, #12
 80074d4:	af00      	add	r7, sp, #0
 80074d6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	2243      	movs	r2, #67	; 0x43
 80074dc:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 80074de:	4b03      	ldr	r3, [pc, #12]	; (80074ec <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 80074e0:	4618      	mov	r0, r3
 80074e2:	370c      	adds	r7, #12
 80074e4:	46bd      	mov	sp, r7
 80074e6:	bc80      	pop	{r7}
 80074e8:	4770      	bx	lr
 80074ea:	bf00      	nop
 80074ec:	200000dc 	.word	0x200000dc

080074f0 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80074f0:	b480      	push	{r7}
 80074f2:	b083      	sub	sp, #12
 80074f4:	af00      	add	r7, sp, #0
 80074f6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	220a      	movs	r2, #10
 80074fc:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 80074fe:	4b03      	ldr	r3, [pc, #12]	; (800750c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8007500:	4618      	mov	r0, r3
 8007502:	370c      	adds	r7, #12
 8007504:	46bd      	mov	sp, r7
 8007506:	bc80      	pop	{r7}
 8007508:	4770      	bx	lr
 800750a:	bf00      	nop
 800750c:	20000010 	.word	0x20000010

08007510 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8007510:	b480      	push	{r7}
 8007512:	b085      	sub	sp, #20
 8007514:	af00      	add	r7, sp, #0
 8007516:	6078      	str	r0, [r7, #4]
 8007518:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800751a:	2302      	movs	r3, #2
 800751c:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 800751e:	683b      	ldr	r3, [r7, #0]
 8007520:	2b00      	cmp	r3, #0
 8007522:	d005      	beq.n	8007530 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	683a      	ldr	r2, [r7, #0]
 8007528:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 800752c:	2300      	movs	r3, #0
 800752e:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8007530:	7bfb      	ldrb	r3, [r7, #15]
}
 8007532:	4618      	mov	r0, r3
 8007534:	3714      	adds	r7, #20
 8007536:	46bd      	mov	sp, r7
 8007538:	bc80      	pop	{r7}
 800753a:	4770      	bx	lr

0800753c <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 800753c:	b480      	push	{r7}
 800753e:	b087      	sub	sp, #28
 8007540:	af00      	add	r7, sp, #0
 8007542:	60f8      	str	r0, [r7, #12]
 8007544:	60b9      	str	r1, [r7, #8]
 8007546:	4613      	mov	r3, r2
 8007548:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007550:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8007552:	697b      	ldr	r3, [r7, #20]
 8007554:	68ba      	ldr	r2, [r7, #8]
 8007556:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800755a:	88fa      	ldrh	r2, [r7, #6]
 800755c:	697b      	ldr	r3, [r7, #20]
 800755e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 8007562:	2300      	movs	r3, #0
}
 8007564:	4618      	mov	r0, r3
 8007566:	371c      	adds	r7, #28
 8007568:	46bd      	mov	sp, r7
 800756a:	bc80      	pop	{r7}
 800756c:	4770      	bx	lr

0800756e <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 800756e:	b480      	push	{r7}
 8007570:	b085      	sub	sp, #20
 8007572:	af00      	add	r7, sp, #0
 8007574:	6078      	str	r0, [r7, #4]
 8007576:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800757e:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	683a      	ldr	r2, [r7, #0]
 8007584:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8007588:	2300      	movs	r3, #0
}
 800758a:	4618      	mov	r0, r3
 800758c:	3714      	adds	r7, #20
 800758e:	46bd      	mov	sp, r7
 8007590:	bc80      	pop	{r7}
 8007592:	4770      	bx	lr

08007594 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8007594:	b580      	push	{r7, lr}
 8007596:	b084      	sub	sp, #16
 8007598:	af00      	add	r7, sp, #0
 800759a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80075a2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d01c      	beq.n	80075e8 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d115      	bne.n	80075e4 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	2201      	movs	r2, #1
 80075bc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 80075d6:	b29b      	uxth	r3, r3
 80075d8:	2181      	movs	r1, #129	; 0x81
 80075da:	6878      	ldr	r0, [r7, #4]
 80075dc:	f001 fd84 	bl	80090e8 <USBD_LL_Transmit>

      return USBD_OK;
 80075e0:	2300      	movs	r3, #0
 80075e2:	e002      	b.n	80075ea <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 80075e4:	2301      	movs	r3, #1
 80075e6:	e000      	b.n	80075ea <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 80075e8:	2302      	movs	r3, #2
  }
}
 80075ea:	4618      	mov	r0, r3
 80075ec:	3710      	adds	r7, #16
 80075ee:	46bd      	mov	sp, r7
 80075f0:	bd80      	pop	{r7, pc}

080075f2 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80075f2:	b580      	push	{r7, lr}
 80075f4:	b084      	sub	sp, #16
 80075f6:	af00      	add	r7, sp, #0
 80075f8:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007600:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007608:	2b00      	cmp	r3, #0
 800760a:	d017      	beq.n	800763c <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	7c1b      	ldrb	r3, [r3, #16]
 8007610:	2b00      	cmp	r3, #0
 8007612:	d109      	bne.n	8007628 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800761a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800761e:	2101      	movs	r1, #1
 8007620:	6878      	ldr	r0, [r7, #4]
 8007622:	f001 fd84 	bl	800912e <USBD_LL_PrepareReceive>
 8007626:	e007      	b.n	8007638 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800762e:	2340      	movs	r3, #64	; 0x40
 8007630:	2101      	movs	r1, #1
 8007632:	6878      	ldr	r0, [r7, #4]
 8007634:	f001 fd7b 	bl	800912e <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8007638:	2300      	movs	r3, #0
 800763a:	e000      	b.n	800763e <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 800763c:	2302      	movs	r3, #2
  }
}
 800763e:	4618      	mov	r0, r3
 8007640:	3710      	adds	r7, #16
 8007642:	46bd      	mov	sp, r7
 8007644:	bd80      	pop	{r7, pc}

08007646 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007646:	b580      	push	{r7, lr}
 8007648:	b084      	sub	sp, #16
 800764a:	af00      	add	r7, sp, #0
 800764c:	60f8      	str	r0, [r7, #12]
 800764e:	60b9      	str	r1, [r7, #8]
 8007650:	4613      	mov	r3, r2
 8007652:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	2b00      	cmp	r3, #0
 8007658:	d101      	bne.n	800765e <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800765a:	2302      	movs	r3, #2
 800765c:	e01a      	b.n	8007694 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007664:	2b00      	cmp	r3, #0
 8007666:	d003      	beq.n	8007670 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	2200      	movs	r2, #0
 800766c:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007670:	68bb      	ldr	r3, [r7, #8]
 8007672:	2b00      	cmp	r3, #0
 8007674:	d003      	beq.n	800767e <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	68ba      	ldr	r2, [r7, #8]
 800767a:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	2201      	movs	r2, #1
 8007682:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	79fa      	ldrb	r2, [r7, #7]
 800768a:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800768c:	68f8      	ldr	r0, [r7, #12]
 800768e:	f001 fbf9 	bl	8008e84 <USBD_LL_Init>

  return USBD_OK;
 8007692:	2300      	movs	r3, #0
}
 8007694:	4618      	mov	r0, r3
 8007696:	3710      	adds	r7, #16
 8007698:	46bd      	mov	sp, r7
 800769a:	bd80      	pop	{r7, pc}

0800769c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800769c:	b480      	push	{r7}
 800769e:	b085      	sub	sp, #20
 80076a0:	af00      	add	r7, sp, #0
 80076a2:	6078      	str	r0, [r7, #4]
 80076a4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 80076a6:	2300      	movs	r3, #0
 80076a8:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 80076aa:	683b      	ldr	r3, [r7, #0]
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d006      	beq.n	80076be <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	683a      	ldr	r2, [r7, #0]
 80076b4:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 80076b8:	2300      	movs	r3, #0
 80076ba:	73fb      	strb	r3, [r7, #15]
 80076bc:	e001      	b.n	80076c2 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 80076be:	2302      	movs	r3, #2
 80076c0:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80076c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80076c4:	4618      	mov	r0, r3
 80076c6:	3714      	adds	r7, #20
 80076c8:	46bd      	mov	sp, r7
 80076ca:	bc80      	pop	{r7}
 80076cc:	4770      	bx	lr

080076ce <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 80076ce:	b580      	push	{r7, lr}
 80076d0:	b082      	sub	sp, #8
 80076d2:	af00      	add	r7, sp, #0
 80076d4:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 80076d6:	6878      	ldr	r0, [r7, #4]
 80076d8:	f001 fc1e 	bl	8008f18 <USBD_LL_Start>

  return USBD_OK;
 80076dc:	2300      	movs	r3, #0
}
 80076de:	4618      	mov	r0, r3
 80076e0:	3708      	adds	r7, #8
 80076e2:	46bd      	mov	sp, r7
 80076e4:	bd80      	pop	{r7, pc}

080076e6 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80076e6:	b480      	push	{r7}
 80076e8:	b083      	sub	sp, #12
 80076ea:	af00      	add	r7, sp, #0
 80076ec:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80076ee:	2300      	movs	r3, #0
}
 80076f0:	4618      	mov	r0, r3
 80076f2:	370c      	adds	r7, #12
 80076f4:	46bd      	mov	sp, r7
 80076f6:	bc80      	pop	{r7}
 80076f8:	4770      	bx	lr

080076fa <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80076fa:	b580      	push	{r7, lr}
 80076fc:	b084      	sub	sp, #16
 80076fe:	af00      	add	r7, sp, #0
 8007700:	6078      	str	r0, [r7, #4]
 8007702:	460b      	mov	r3, r1
 8007704:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8007706:	2302      	movs	r3, #2
 8007708:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007710:	2b00      	cmp	r3, #0
 8007712:	d00c      	beq.n	800772e <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	78fa      	ldrb	r2, [r7, #3]
 800771e:	4611      	mov	r1, r2
 8007720:	6878      	ldr	r0, [r7, #4]
 8007722:	4798      	blx	r3
 8007724:	4603      	mov	r3, r0
 8007726:	2b00      	cmp	r3, #0
 8007728:	d101      	bne.n	800772e <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800772a:	2300      	movs	r3, #0
 800772c:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800772e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007730:	4618      	mov	r0, r3
 8007732:	3710      	adds	r7, #16
 8007734:	46bd      	mov	sp, r7
 8007736:	bd80      	pop	{r7, pc}

08007738 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8007738:	b580      	push	{r7, lr}
 800773a:	b082      	sub	sp, #8
 800773c:	af00      	add	r7, sp, #0
 800773e:	6078      	str	r0, [r7, #4]
 8007740:	460b      	mov	r3, r1
 8007742:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800774a:	685b      	ldr	r3, [r3, #4]
 800774c:	78fa      	ldrb	r2, [r7, #3]
 800774e:	4611      	mov	r1, r2
 8007750:	6878      	ldr	r0, [r7, #4]
 8007752:	4798      	blx	r3

  return USBD_OK;
 8007754:	2300      	movs	r3, #0
}
 8007756:	4618      	mov	r0, r3
 8007758:	3708      	adds	r7, #8
 800775a:	46bd      	mov	sp, r7
 800775c:	bd80      	pop	{r7, pc}

0800775e <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800775e:	b580      	push	{r7, lr}
 8007760:	b082      	sub	sp, #8
 8007762:	af00      	add	r7, sp, #0
 8007764:	6078      	str	r0, [r7, #4]
 8007766:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800776e:	6839      	ldr	r1, [r7, #0]
 8007770:	4618      	mov	r0, r3
 8007772:	f000 ff10 	bl	8008596 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	2201      	movs	r2, #1
 800777a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8007784:	461a      	mov	r2, r3
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8007792:	f003 031f 	and.w	r3, r3, #31
 8007796:	2b02      	cmp	r3, #2
 8007798:	d016      	beq.n	80077c8 <USBD_LL_SetupStage+0x6a>
 800779a:	2b02      	cmp	r3, #2
 800779c:	d81c      	bhi.n	80077d8 <USBD_LL_SetupStage+0x7a>
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d002      	beq.n	80077a8 <USBD_LL_SetupStage+0x4a>
 80077a2:	2b01      	cmp	r3, #1
 80077a4:	d008      	beq.n	80077b8 <USBD_LL_SetupStage+0x5a>
 80077a6:	e017      	b.n	80077d8 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80077ae:	4619      	mov	r1, r3
 80077b0:	6878      	ldr	r0, [r7, #4]
 80077b2:	f000 fa03 	bl	8007bbc <USBD_StdDevReq>
      break;
 80077b6:	e01a      	b.n	80077ee <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80077be:	4619      	mov	r1, r3
 80077c0:	6878      	ldr	r0, [r7, #4]
 80077c2:	f000 fa65 	bl	8007c90 <USBD_StdItfReq>
      break;
 80077c6:	e012      	b.n	80077ee <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80077ce:	4619      	mov	r1, r3
 80077d0:	6878      	ldr	r0, [r7, #4]
 80077d2:	f000 faa5 	bl	8007d20 <USBD_StdEPReq>
      break;
 80077d6:	e00a      	b.n	80077ee <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80077de:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80077e2:	b2db      	uxtb	r3, r3
 80077e4:	4619      	mov	r1, r3
 80077e6:	6878      	ldr	r0, [r7, #4]
 80077e8:	f001 fbf6 	bl	8008fd8 <USBD_LL_StallEP>
      break;
 80077ec:	bf00      	nop
  }

  return USBD_OK;
 80077ee:	2300      	movs	r3, #0
}
 80077f0:	4618      	mov	r0, r3
 80077f2:	3708      	adds	r7, #8
 80077f4:	46bd      	mov	sp, r7
 80077f6:	bd80      	pop	{r7, pc}

080077f8 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80077f8:	b580      	push	{r7, lr}
 80077fa:	b086      	sub	sp, #24
 80077fc:	af00      	add	r7, sp, #0
 80077fe:	60f8      	str	r0, [r7, #12]
 8007800:	460b      	mov	r3, r1
 8007802:	607a      	str	r2, [r7, #4]
 8007804:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8007806:	7afb      	ldrb	r3, [r7, #11]
 8007808:	2b00      	cmp	r3, #0
 800780a:	d14b      	bne.n	80078a4 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8007812:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800781a:	2b03      	cmp	r3, #3
 800781c:	d134      	bne.n	8007888 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 800781e:	697b      	ldr	r3, [r7, #20]
 8007820:	68da      	ldr	r2, [r3, #12]
 8007822:	697b      	ldr	r3, [r7, #20]
 8007824:	691b      	ldr	r3, [r3, #16]
 8007826:	429a      	cmp	r2, r3
 8007828:	d919      	bls.n	800785e <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 800782a:	697b      	ldr	r3, [r7, #20]
 800782c:	68da      	ldr	r2, [r3, #12]
 800782e:	697b      	ldr	r3, [r7, #20]
 8007830:	691b      	ldr	r3, [r3, #16]
 8007832:	1ad2      	subs	r2, r2, r3
 8007834:	697b      	ldr	r3, [r7, #20]
 8007836:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007838:	697b      	ldr	r3, [r7, #20]
 800783a:	68da      	ldr	r2, [r3, #12]
 800783c:	697b      	ldr	r3, [r7, #20]
 800783e:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8007840:	429a      	cmp	r2, r3
 8007842:	d203      	bcs.n	800784c <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007844:	697b      	ldr	r3, [r7, #20]
 8007846:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8007848:	b29b      	uxth	r3, r3
 800784a:	e002      	b.n	8007852 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800784c:	697b      	ldr	r3, [r7, #20]
 800784e:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8007850:	b29b      	uxth	r3, r3
 8007852:	461a      	mov	r2, r3
 8007854:	6879      	ldr	r1, [r7, #4]
 8007856:	68f8      	ldr	r0, [r7, #12]
 8007858:	f000 ff8f 	bl	800877a <USBD_CtlContinueRx>
 800785c:	e038      	b.n	80078d0 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007864:	691b      	ldr	r3, [r3, #16]
 8007866:	2b00      	cmp	r3, #0
 8007868:	d00a      	beq.n	8007880 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8007870:	2b03      	cmp	r3, #3
 8007872:	d105      	bne.n	8007880 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800787a:	691b      	ldr	r3, [r3, #16]
 800787c:	68f8      	ldr	r0, [r7, #12]
 800787e:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8007880:	68f8      	ldr	r0, [r7, #12]
 8007882:	f000 ff8c 	bl	800879e <USBD_CtlSendStatus>
 8007886:	e023      	b.n	80078d0 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800788e:	2b05      	cmp	r3, #5
 8007890:	d11e      	bne.n	80078d0 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	2200      	movs	r2, #0
 8007896:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 800789a:	2100      	movs	r1, #0
 800789c:	68f8      	ldr	r0, [r7, #12]
 800789e:	f001 fb9b 	bl	8008fd8 <USBD_LL_StallEP>
 80078a2:	e015      	b.n	80078d0 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80078aa:	699b      	ldr	r3, [r3, #24]
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d00d      	beq.n	80078cc <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 80078b6:	2b03      	cmp	r3, #3
 80078b8:	d108      	bne.n	80078cc <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80078c0:	699b      	ldr	r3, [r3, #24]
 80078c2:	7afa      	ldrb	r2, [r7, #11]
 80078c4:	4611      	mov	r1, r2
 80078c6:	68f8      	ldr	r0, [r7, #12]
 80078c8:	4798      	blx	r3
 80078ca:	e001      	b.n	80078d0 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80078cc:	2302      	movs	r3, #2
 80078ce:	e000      	b.n	80078d2 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 80078d0:	2300      	movs	r3, #0
}
 80078d2:	4618      	mov	r0, r3
 80078d4:	3718      	adds	r7, #24
 80078d6:	46bd      	mov	sp, r7
 80078d8:	bd80      	pop	{r7, pc}

080078da <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80078da:	b580      	push	{r7, lr}
 80078dc:	b086      	sub	sp, #24
 80078de:	af00      	add	r7, sp, #0
 80078e0:	60f8      	str	r0, [r7, #12]
 80078e2:	460b      	mov	r3, r1
 80078e4:	607a      	str	r2, [r7, #4]
 80078e6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80078e8:	7afb      	ldrb	r3, [r7, #11]
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d17f      	bne.n	80079ee <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	3314      	adds	r3, #20
 80078f2:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80078fa:	2b02      	cmp	r3, #2
 80078fc:	d15c      	bne.n	80079b8 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 80078fe:	697b      	ldr	r3, [r7, #20]
 8007900:	68da      	ldr	r2, [r3, #12]
 8007902:	697b      	ldr	r3, [r7, #20]
 8007904:	691b      	ldr	r3, [r3, #16]
 8007906:	429a      	cmp	r2, r3
 8007908:	d915      	bls.n	8007936 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 800790a:	697b      	ldr	r3, [r7, #20]
 800790c:	68da      	ldr	r2, [r3, #12]
 800790e:	697b      	ldr	r3, [r7, #20]
 8007910:	691b      	ldr	r3, [r3, #16]
 8007912:	1ad2      	subs	r2, r2, r3
 8007914:	697b      	ldr	r3, [r7, #20]
 8007916:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8007918:	697b      	ldr	r3, [r7, #20]
 800791a:	68db      	ldr	r3, [r3, #12]
 800791c:	b29b      	uxth	r3, r3
 800791e:	461a      	mov	r2, r3
 8007920:	6879      	ldr	r1, [r7, #4]
 8007922:	68f8      	ldr	r0, [r7, #12]
 8007924:	f000 fef9 	bl	800871a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007928:	2300      	movs	r3, #0
 800792a:	2200      	movs	r2, #0
 800792c:	2100      	movs	r1, #0
 800792e:	68f8      	ldr	r0, [r7, #12]
 8007930:	f001 fbfd 	bl	800912e <USBD_LL_PrepareReceive>
 8007934:	e04e      	b.n	80079d4 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8007936:	697b      	ldr	r3, [r7, #20]
 8007938:	689b      	ldr	r3, [r3, #8]
 800793a:	697a      	ldr	r2, [r7, #20]
 800793c:	6912      	ldr	r2, [r2, #16]
 800793e:	fbb3 f1f2 	udiv	r1, r3, r2
 8007942:	fb02 f201 	mul.w	r2, r2, r1
 8007946:	1a9b      	subs	r3, r3, r2
 8007948:	2b00      	cmp	r3, #0
 800794a:	d11c      	bne.n	8007986 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 800794c:	697b      	ldr	r3, [r7, #20]
 800794e:	689a      	ldr	r2, [r3, #8]
 8007950:	697b      	ldr	r3, [r7, #20]
 8007952:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8007954:	429a      	cmp	r2, r3
 8007956:	d316      	bcc.n	8007986 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8007958:	697b      	ldr	r3, [r7, #20]
 800795a:	689a      	ldr	r2, [r3, #8]
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007962:	429a      	cmp	r2, r3
 8007964:	d20f      	bcs.n	8007986 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007966:	2200      	movs	r2, #0
 8007968:	2100      	movs	r1, #0
 800796a:	68f8      	ldr	r0, [r7, #12]
 800796c:	f000 fed5 	bl	800871a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	2200      	movs	r2, #0
 8007974:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007978:	2300      	movs	r3, #0
 800797a:	2200      	movs	r2, #0
 800797c:	2100      	movs	r1, #0
 800797e:	68f8      	ldr	r0, [r7, #12]
 8007980:	f001 fbd5 	bl	800912e <USBD_LL_PrepareReceive>
 8007984:	e026      	b.n	80079d4 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800798c:	68db      	ldr	r3, [r3, #12]
 800798e:	2b00      	cmp	r3, #0
 8007990:	d00a      	beq.n	80079a8 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8007998:	2b03      	cmp	r3, #3
 800799a:	d105      	bne.n	80079a8 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80079a2:	68db      	ldr	r3, [r3, #12]
 80079a4:	68f8      	ldr	r0, [r7, #12]
 80079a6:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 80079a8:	2180      	movs	r1, #128	; 0x80
 80079aa:	68f8      	ldr	r0, [r7, #12]
 80079ac:	f001 fb14 	bl	8008fd8 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 80079b0:	68f8      	ldr	r0, [r7, #12]
 80079b2:	f000 ff07 	bl	80087c4 <USBD_CtlReceiveStatus>
 80079b6:	e00d      	b.n	80079d4 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80079be:	2b04      	cmp	r3, #4
 80079c0:	d004      	beq.n	80079cc <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d103      	bne.n	80079d4 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 80079cc:	2180      	movs	r1, #128	; 0x80
 80079ce:	68f8      	ldr	r0, [r7, #12]
 80079d0:	f001 fb02 	bl	8008fd8 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80079da:	2b01      	cmp	r3, #1
 80079dc:	d11d      	bne.n	8007a1a <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 80079de:	68f8      	ldr	r0, [r7, #12]
 80079e0:	f7ff fe81 	bl	80076e6 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	2200      	movs	r2, #0
 80079e8:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80079ec:	e015      	b.n	8007a1a <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80079f4:	695b      	ldr	r3, [r3, #20]
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d00d      	beq.n	8007a16 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8007a00:	2b03      	cmp	r3, #3
 8007a02:	d108      	bne.n	8007a16 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007a0a:	695b      	ldr	r3, [r3, #20]
 8007a0c:	7afa      	ldrb	r2, [r7, #11]
 8007a0e:	4611      	mov	r1, r2
 8007a10:	68f8      	ldr	r0, [r7, #12]
 8007a12:	4798      	blx	r3
 8007a14:	e001      	b.n	8007a1a <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8007a16:	2302      	movs	r3, #2
 8007a18:	e000      	b.n	8007a1c <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8007a1a:	2300      	movs	r3, #0
}
 8007a1c:	4618      	mov	r0, r3
 8007a1e:	3718      	adds	r7, #24
 8007a20:	46bd      	mov	sp, r7
 8007a22:	bd80      	pop	{r7, pc}

08007a24 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007a24:	b580      	push	{r7, lr}
 8007a26:	b082      	sub	sp, #8
 8007a28:	af00      	add	r7, sp, #0
 8007a2a:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007a2c:	2340      	movs	r3, #64	; 0x40
 8007a2e:	2200      	movs	r2, #0
 8007a30:	2100      	movs	r1, #0
 8007a32:	6878      	ldr	r0, [r7, #4]
 8007a34:	f001 fa8b 	bl	8008f4e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	2201      	movs	r2, #1
 8007a3c:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	2240      	movs	r2, #64	; 0x40
 8007a44:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007a48:	2340      	movs	r3, #64	; 0x40
 8007a4a:	2200      	movs	r2, #0
 8007a4c:	2180      	movs	r1, #128	; 0x80
 8007a4e:	6878      	ldr	r0, [r7, #4]
 8007a50:	f001 fa7d 	bl	8008f4e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	2201      	movs	r2, #1
 8007a58:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	2240      	movs	r2, #64	; 0x40
 8007a5e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	2201      	movs	r2, #1
 8007a64:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	2200      	movs	r2, #0
 8007a6c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	2200      	movs	r2, #0
 8007a74:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	2200      	movs	r2, #0
 8007a7a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d009      	beq.n	8007a9c <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007a8e:	685b      	ldr	r3, [r3, #4]
 8007a90:	687a      	ldr	r2, [r7, #4]
 8007a92:	6852      	ldr	r2, [r2, #4]
 8007a94:	b2d2      	uxtb	r2, r2
 8007a96:	4611      	mov	r1, r2
 8007a98:	6878      	ldr	r0, [r7, #4]
 8007a9a:	4798      	blx	r3
  }

  return USBD_OK;
 8007a9c:	2300      	movs	r3, #0
}
 8007a9e:	4618      	mov	r0, r3
 8007aa0:	3708      	adds	r7, #8
 8007aa2:	46bd      	mov	sp, r7
 8007aa4:	bd80      	pop	{r7, pc}

08007aa6 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007aa6:	b480      	push	{r7}
 8007aa8:	b083      	sub	sp, #12
 8007aaa:	af00      	add	r7, sp, #0
 8007aac:	6078      	str	r0, [r7, #4]
 8007aae:	460b      	mov	r3, r1
 8007ab0:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	78fa      	ldrb	r2, [r7, #3]
 8007ab6:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007ab8:	2300      	movs	r3, #0
}
 8007aba:	4618      	mov	r0, r3
 8007abc:	370c      	adds	r7, #12
 8007abe:	46bd      	mov	sp, r7
 8007ac0:	bc80      	pop	{r7}
 8007ac2:	4770      	bx	lr

08007ac4 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007ac4:	b480      	push	{r7}
 8007ac6:	b083      	sub	sp, #12
 8007ac8:	af00      	add	r7, sp, #0
 8007aca:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	2204      	movs	r2, #4
 8007adc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8007ae0:	2300      	movs	r3, #0
}
 8007ae2:	4618      	mov	r0, r3
 8007ae4:	370c      	adds	r7, #12
 8007ae6:	46bd      	mov	sp, r7
 8007ae8:	bc80      	pop	{r7}
 8007aea:	4770      	bx	lr

08007aec <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007aec:	b480      	push	{r7}
 8007aee:	b083      	sub	sp, #12
 8007af0:	af00      	add	r7, sp, #0
 8007af2:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007afa:	2b04      	cmp	r3, #4
 8007afc:	d105      	bne.n	8007b0a <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8007b0a:	2300      	movs	r3, #0
}
 8007b0c:	4618      	mov	r0, r3
 8007b0e:	370c      	adds	r7, #12
 8007b10:	46bd      	mov	sp, r7
 8007b12:	bc80      	pop	{r7}
 8007b14:	4770      	bx	lr

08007b16 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007b16:	b580      	push	{r7, lr}
 8007b18:	b082      	sub	sp, #8
 8007b1a:	af00      	add	r7, sp, #0
 8007b1c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007b24:	2b03      	cmp	r3, #3
 8007b26:	d10b      	bne.n	8007b40 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007b2e:	69db      	ldr	r3, [r3, #28]
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d005      	beq.n	8007b40 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007b3a:	69db      	ldr	r3, [r3, #28]
 8007b3c:	6878      	ldr	r0, [r7, #4]
 8007b3e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007b40:	2300      	movs	r3, #0
}
 8007b42:	4618      	mov	r0, r3
 8007b44:	3708      	adds	r7, #8
 8007b46:	46bd      	mov	sp, r7
 8007b48:	bd80      	pop	{r7, pc}

08007b4a <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8007b4a:	b480      	push	{r7}
 8007b4c:	b083      	sub	sp, #12
 8007b4e:	af00      	add	r7, sp, #0
 8007b50:	6078      	str	r0, [r7, #4]
 8007b52:	460b      	mov	r3, r1
 8007b54:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8007b56:	2300      	movs	r3, #0
}
 8007b58:	4618      	mov	r0, r3
 8007b5a:	370c      	adds	r7, #12
 8007b5c:	46bd      	mov	sp, r7
 8007b5e:	bc80      	pop	{r7}
 8007b60:	4770      	bx	lr

08007b62 <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8007b62:	b480      	push	{r7}
 8007b64:	b083      	sub	sp, #12
 8007b66:	af00      	add	r7, sp, #0
 8007b68:	6078      	str	r0, [r7, #4]
 8007b6a:	460b      	mov	r3, r1
 8007b6c:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8007b6e:	2300      	movs	r3, #0
}
 8007b70:	4618      	mov	r0, r3
 8007b72:	370c      	adds	r7, #12
 8007b74:	46bd      	mov	sp, r7
 8007b76:	bc80      	pop	{r7}
 8007b78:	4770      	bx	lr

08007b7a <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8007b7a:	b480      	push	{r7}
 8007b7c:	b083      	sub	sp, #12
 8007b7e:	af00      	add	r7, sp, #0
 8007b80:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007b82:	2300      	movs	r3, #0
}
 8007b84:	4618      	mov	r0, r3
 8007b86:	370c      	adds	r7, #12
 8007b88:	46bd      	mov	sp, r7
 8007b8a:	bc80      	pop	{r7}
 8007b8c:	4770      	bx	lr

08007b8e <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8007b8e:	b580      	push	{r7, lr}
 8007b90:	b082      	sub	sp, #8
 8007b92:	af00      	add	r7, sp, #0
 8007b94:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	2201      	movs	r2, #1
 8007b9a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007ba4:	685b      	ldr	r3, [r3, #4]
 8007ba6:	687a      	ldr	r2, [r7, #4]
 8007ba8:	6852      	ldr	r2, [r2, #4]
 8007baa:	b2d2      	uxtb	r2, r2
 8007bac:	4611      	mov	r1, r2
 8007bae:	6878      	ldr	r0, [r7, #4]
 8007bb0:	4798      	blx	r3

  return USBD_OK;
 8007bb2:	2300      	movs	r3, #0
}
 8007bb4:	4618      	mov	r0, r3
 8007bb6:	3708      	adds	r7, #8
 8007bb8:	46bd      	mov	sp, r7
 8007bba:	bd80      	pop	{r7, pc}

08007bbc <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8007bbc:	b580      	push	{r7, lr}
 8007bbe:	b084      	sub	sp, #16
 8007bc0:	af00      	add	r7, sp, #0
 8007bc2:	6078      	str	r0, [r7, #4]
 8007bc4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007bc6:	2300      	movs	r3, #0
 8007bc8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007bca:	683b      	ldr	r3, [r7, #0]
 8007bcc:	781b      	ldrb	r3, [r3, #0]
 8007bce:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007bd2:	2b40      	cmp	r3, #64	; 0x40
 8007bd4:	d005      	beq.n	8007be2 <USBD_StdDevReq+0x26>
 8007bd6:	2b40      	cmp	r3, #64	; 0x40
 8007bd8:	d84f      	bhi.n	8007c7a <USBD_StdDevReq+0xbe>
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d009      	beq.n	8007bf2 <USBD_StdDevReq+0x36>
 8007bde:	2b20      	cmp	r3, #32
 8007be0:	d14b      	bne.n	8007c7a <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007be8:	689b      	ldr	r3, [r3, #8]
 8007bea:	6839      	ldr	r1, [r7, #0]
 8007bec:	6878      	ldr	r0, [r7, #4]
 8007bee:	4798      	blx	r3
      break;
 8007bf0:	e048      	b.n	8007c84 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007bf2:	683b      	ldr	r3, [r7, #0]
 8007bf4:	785b      	ldrb	r3, [r3, #1]
 8007bf6:	2b09      	cmp	r3, #9
 8007bf8:	d839      	bhi.n	8007c6e <USBD_StdDevReq+0xb2>
 8007bfa:	a201      	add	r2, pc, #4	; (adr r2, 8007c00 <USBD_StdDevReq+0x44>)
 8007bfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c00:	08007c51 	.word	0x08007c51
 8007c04:	08007c65 	.word	0x08007c65
 8007c08:	08007c6f 	.word	0x08007c6f
 8007c0c:	08007c5b 	.word	0x08007c5b
 8007c10:	08007c6f 	.word	0x08007c6f
 8007c14:	08007c33 	.word	0x08007c33
 8007c18:	08007c29 	.word	0x08007c29
 8007c1c:	08007c6f 	.word	0x08007c6f
 8007c20:	08007c47 	.word	0x08007c47
 8007c24:	08007c3d 	.word	0x08007c3d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007c28:	6839      	ldr	r1, [r7, #0]
 8007c2a:	6878      	ldr	r0, [r7, #4]
 8007c2c:	f000 f9dc 	bl	8007fe8 <USBD_GetDescriptor>
          break;
 8007c30:	e022      	b.n	8007c78 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8007c32:	6839      	ldr	r1, [r7, #0]
 8007c34:	6878      	ldr	r0, [r7, #4]
 8007c36:	f000 fb3f 	bl	80082b8 <USBD_SetAddress>
          break;
 8007c3a:	e01d      	b.n	8007c78 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8007c3c:	6839      	ldr	r1, [r7, #0]
 8007c3e:	6878      	ldr	r0, [r7, #4]
 8007c40:	f000 fb7e 	bl	8008340 <USBD_SetConfig>
          break;
 8007c44:	e018      	b.n	8007c78 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8007c46:	6839      	ldr	r1, [r7, #0]
 8007c48:	6878      	ldr	r0, [r7, #4]
 8007c4a:	f000 fc07 	bl	800845c <USBD_GetConfig>
          break;
 8007c4e:	e013      	b.n	8007c78 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007c50:	6839      	ldr	r1, [r7, #0]
 8007c52:	6878      	ldr	r0, [r7, #4]
 8007c54:	f000 fc37 	bl	80084c6 <USBD_GetStatus>
          break;
 8007c58:	e00e      	b.n	8007c78 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8007c5a:	6839      	ldr	r1, [r7, #0]
 8007c5c:	6878      	ldr	r0, [r7, #4]
 8007c5e:	f000 fc65 	bl	800852c <USBD_SetFeature>
          break;
 8007c62:	e009      	b.n	8007c78 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007c64:	6839      	ldr	r1, [r7, #0]
 8007c66:	6878      	ldr	r0, [r7, #4]
 8007c68:	f000 fc74 	bl	8008554 <USBD_ClrFeature>
          break;
 8007c6c:	e004      	b.n	8007c78 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8007c6e:	6839      	ldr	r1, [r7, #0]
 8007c70:	6878      	ldr	r0, [r7, #4]
 8007c72:	f000 fccc 	bl	800860e <USBD_CtlError>
          break;
 8007c76:	bf00      	nop
      }
      break;
 8007c78:	e004      	b.n	8007c84 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8007c7a:	6839      	ldr	r1, [r7, #0]
 8007c7c:	6878      	ldr	r0, [r7, #4]
 8007c7e:	f000 fcc6 	bl	800860e <USBD_CtlError>
      break;
 8007c82:	bf00      	nop
  }

  return ret;
 8007c84:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c86:	4618      	mov	r0, r3
 8007c88:	3710      	adds	r7, #16
 8007c8a:	46bd      	mov	sp, r7
 8007c8c:	bd80      	pop	{r7, pc}
 8007c8e:	bf00      	nop

08007c90 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8007c90:	b580      	push	{r7, lr}
 8007c92:	b084      	sub	sp, #16
 8007c94:	af00      	add	r7, sp, #0
 8007c96:	6078      	str	r0, [r7, #4]
 8007c98:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007c9a:	2300      	movs	r3, #0
 8007c9c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007c9e:	683b      	ldr	r3, [r7, #0]
 8007ca0:	781b      	ldrb	r3, [r3, #0]
 8007ca2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007ca6:	2b40      	cmp	r3, #64	; 0x40
 8007ca8:	d005      	beq.n	8007cb6 <USBD_StdItfReq+0x26>
 8007caa:	2b40      	cmp	r3, #64	; 0x40
 8007cac:	d82e      	bhi.n	8007d0c <USBD_StdItfReq+0x7c>
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d001      	beq.n	8007cb6 <USBD_StdItfReq+0x26>
 8007cb2:	2b20      	cmp	r3, #32
 8007cb4:	d12a      	bne.n	8007d0c <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007cbc:	3b01      	subs	r3, #1
 8007cbe:	2b02      	cmp	r3, #2
 8007cc0:	d81d      	bhi.n	8007cfe <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007cc2:	683b      	ldr	r3, [r7, #0]
 8007cc4:	889b      	ldrh	r3, [r3, #4]
 8007cc6:	b2db      	uxtb	r3, r3
 8007cc8:	2b01      	cmp	r3, #1
 8007cca:	d813      	bhi.n	8007cf4 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007cd2:	689b      	ldr	r3, [r3, #8]
 8007cd4:	6839      	ldr	r1, [r7, #0]
 8007cd6:	6878      	ldr	r0, [r7, #4]
 8007cd8:	4798      	blx	r3
 8007cda:	4603      	mov	r3, r0
 8007cdc:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007cde:	683b      	ldr	r3, [r7, #0]
 8007ce0:	88db      	ldrh	r3, [r3, #6]
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d110      	bne.n	8007d08 <USBD_StdItfReq+0x78>
 8007ce6:	7bfb      	ldrb	r3, [r7, #15]
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d10d      	bne.n	8007d08 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8007cec:	6878      	ldr	r0, [r7, #4]
 8007cee:	f000 fd56 	bl	800879e <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8007cf2:	e009      	b.n	8007d08 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8007cf4:	6839      	ldr	r1, [r7, #0]
 8007cf6:	6878      	ldr	r0, [r7, #4]
 8007cf8:	f000 fc89 	bl	800860e <USBD_CtlError>
          break;
 8007cfc:	e004      	b.n	8007d08 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 8007cfe:	6839      	ldr	r1, [r7, #0]
 8007d00:	6878      	ldr	r0, [r7, #4]
 8007d02:	f000 fc84 	bl	800860e <USBD_CtlError>
          break;
 8007d06:	e000      	b.n	8007d0a <USBD_StdItfReq+0x7a>
          break;
 8007d08:	bf00      	nop
      }
      break;
 8007d0a:	e004      	b.n	8007d16 <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8007d0c:	6839      	ldr	r1, [r7, #0]
 8007d0e:	6878      	ldr	r0, [r7, #4]
 8007d10:	f000 fc7d 	bl	800860e <USBD_CtlError>
      break;
 8007d14:	bf00      	nop
  }

  return USBD_OK;
 8007d16:	2300      	movs	r3, #0
}
 8007d18:	4618      	mov	r0, r3
 8007d1a:	3710      	adds	r7, #16
 8007d1c:	46bd      	mov	sp, r7
 8007d1e:	bd80      	pop	{r7, pc}

08007d20 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8007d20:	b580      	push	{r7, lr}
 8007d22:	b084      	sub	sp, #16
 8007d24:	af00      	add	r7, sp, #0
 8007d26:	6078      	str	r0, [r7, #4]
 8007d28:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8007d2a:	2300      	movs	r3, #0
 8007d2c:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8007d2e:	683b      	ldr	r3, [r7, #0]
 8007d30:	889b      	ldrh	r3, [r3, #4]
 8007d32:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007d34:	683b      	ldr	r3, [r7, #0]
 8007d36:	781b      	ldrb	r3, [r3, #0]
 8007d38:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007d3c:	2b40      	cmp	r3, #64	; 0x40
 8007d3e:	d007      	beq.n	8007d50 <USBD_StdEPReq+0x30>
 8007d40:	2b40      	cmp	r3, #64	; 0x40
 8007d42:	f200 8146 	bhi.w	8007fd2 <USBD_StdEPReq+0x2b2>
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d00a      	beq.n	8007d60 <USBD_StdEPReq+0x40>
 8007d4a:	2b20      	cmp	r3, #32
 8007d4c:	f040 8141 	bne.w	8007fd2 <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007d56:	689b      	ldr	r3, [r3, #8]
 8007d58:	6839      	ldr	r1, [r7, #0]
 8007d5a:	6878      	ldr	r0, [r7, #4]
 8007d5c:	4798      	blx	r3
      break;
 8007d5e:	e13d      	b.n	8007fdc <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8007d60:	683b      	ldr	r3, [r7, #0]
 8007d62:	781b      	ldrb	r3, [r3, #0]
 8007d64:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007d68:	2b20      	cmp	r3, #32
 8007d6a:	d10a      	bne.n	8007d82 <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007d72:	689b      	ldr	r3, [r3, #8]
 8007d74:	6839      	ldr	r1, [r7, #0]
 8007d76:	6878      	ldr	r0, [r7, #4]
 8007d78:	4798      	blx	r3
 8007d7a:	4603      	mov	r3, r0
 8007d7c:	73fb      	strb	r3, [r7, #15]

        return ret;
 8007d7e:	7bfb      	ldrb	r3, [r7, #15]
 8007d80:	e12d      	b.n	8007fde <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 8007d82:	683b      	ldr	r3, [r7, #0]
 8007d84:	785b      	ldrb	r3, [r3, #1]
 8007d86:	2b03      	cmp	r3, #3
 8007d88:	d007      	beq.n	8007d9a <USBD_StdEPReq+0x7a>
 8007d8a:	2b03      	cmp	r3, #3
 8007d8c:	f300 811b 	bgt.w	8007fc6 <USBD_StdEPReq+0x2a6>
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	d072      	beq.n	8007e7a <USBD_StdEPReq+0x15a>
 8007d94:	2b01      	cmp	r3, #1
 8007d96:	d03a      	beq.n	8007e0e <USBD_StdEPReq+0xee>
 8007d98:	e115      	b.n	8007fc6 <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007da0:	2b02      	cmp	r3, #2
 8007da2:	d002      	beq.n	8007daa <USBD_StdEPReq+0x8a>
 8007da4:	2b03      	cmp	r3, #3
 8007da6:	d015      	beq.n	8007dd4 <USBD_StdEPReq+0xb4>
 8007da8:	e02b      	b.n	8007e02 <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007daa:	7bbb      	ldrb	r3, [r7, #14]
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d00c      	beq.n	8007dca <USBD_StdEPReq+0xaa>
 8007db0:	7bbb      	ldrb	r3, [r7, #14]
 8007db2:	2b80      	cmp	r3, #128	; 0x80
 8007db4:	d009      	beq.n	8007dca <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8007db6:	7bbb      	ldrb	r3, [r7, #14]
 8007db8:	4619      	mov	r1, r3
 8007dba:	6878      	ldr	r0, [r7, #4]
 8007dbc:	f001 f90c 	bl	8008fd8 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8007dc0:	2180      	movs	r1, #128	; 0x80
 8007dc2:	6878      	ldr	r0, [r7, #4]
 8007dc4:	f001 f908 	bl	8008fd8 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007dc8:	e020      	b.n	8007e0c <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 8007dca:	6839      	ldr	r1, [r7, #0]
 8007dcc:	6878      	ldr	r0, [r7, #4]
 8007dce:	f000 fc1e 	bl	800860e <USBD_CtlError>
              break;
 8007dd2:	e01b      	b.n	8007e0c <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007dd4:	683b      	ldr	r3, [r7, #0]
 8007dd6:	885b      	ldrh	r3, [r3, #2]
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	d10e      	bne.n	8007dfa <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8007ddc:	7bbb      	ldrb	r3, [r7, #14]
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d00b      	beq.n	8007dfa <USBD_StdEPReq+0xda>
 8007de2:	7bbb      	ldrb	r3, [r7, #14]
 8007de4:	2b80      	cmp	r3, #128	; 0x80
 8007de6:	d008      	beq.n	8007dfa <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007de8:	683b      	ldr	r3, [r7, #0]
 8007dea:	88db      	ldrh	r3, [r3, #6]
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d104      	bne.n	8007dfa <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8007df0:	7bbb      	ldrb	r3, [r7, #14]
 8007df2:	4619      	mov	r1, r3
 8007df4:	6878      	ldr	r0, [r7, #4]
 8007df6:	f001 f8ef 	bl	8008fd8 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8007dfa:	6878      	ldr	r0, [r7, #4]
 8007dfc:	f000 fccf 	bl	800879e <USBD_CtlSendStatus>

              break;
 8007e00:	e004      	b.n	8007e0c <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 8007e02:	6839      	ldr	r1, [r7, #0]
 8007e04:	6878      	ldr	r0, [r7, #4]
 8007e06:	f000 fc02 	bl	800860e <USBD_CtlError>
              break;
 8007e0a:	bf00      	nop
          }
          break;
 8007e0c:	e0e0      	b.n	8007fd0 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007e14:	2b02      	cmp	r3, #2
 8007e16:	d002      	beq.n	8007e1e <USBD_StdEPReq+0xfe>
 8007e18:	2b03      	cmp	r3, #3
 8007e1a:	d015      	beq.n	8007e48 <USBD_StdEPReq+0x128>
 8007e1c:	e026      	b.n	8007e6c <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007e1e:	7bbb      	ldrb	r3, [r7, #14]
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	d00c      	beq.n	8007e3e <USBD_StdEPReq+0x11e>
 8007e24:	7bbb      	ldrb	r3, [r7, #14]
 8007e26:	2b80      	cmp	r3, #128	; 0x80
 8007e28:	d009      	beq.n	8007e3e <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8007e2a:	7bbb      	ldrb	r3, [r7, #14]
 8007e2c:	4619      	mov	r1, r3
 8007e2e:	6878      	ldr	r0, [r7, #4]
 8007e30:	f001 f8d2 	bl	8008fd8 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8007e34:	2180      	movs	r1, #128	; 0x80
 8007e36:	6878      	ldr	r0, [r7, #4]
 8007e38:	f001 f8ce 	bl	8008fd8 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007e3c:	e01c      	b.n	8007e78 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 8007e3e:	6839      	ldr	r1, [r7, #0]
 8007e40:	6878      	ldr	r0, [r7, #4]
 8007e42:	f000 fbe4 	bl	800860e <USBD_CtlError>
              break;
 8007e46:	e017      	b.n	8007e78 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007e48:	683b      	ldr	r3, [r7, #0]
 8007e4a:	885b      	ldrh	r3, [r3, #2]
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	d112      	bne.n	8007e76 <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007e50:	7bbb      	ldrb	r3, [r7, #14]
 8007e52:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d004      	beq.n	8007e64 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8007e5a:	7bbb      	ldrb	r3, [r7, #14]
 8007e5c:	4619      	mov	r1, r3
 8007e5e:	6878      	ldr	r0, [r7, #4]
 8007e60:	f001 f8d9 	bl	8009016 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8007e64:	6878      	ldr	r0, [r7, #4]
 8007e66:	f000 fc9a 	bl	800879e <USBD_CtlSendStatus>
              }
              break;
 8007e6a:	e004      	b.n	8007e76 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8007e6c:	6839      	ldr	r1, [r7, #0]
 8007e6e:	6878      	ldr	r0, [r7, #4]
 8007e70:	f000 fbcd 	bl	800860e <USBD_CtlError>
              break;
 8007e74:	e000      	b.n	8007e78 <USBD_StdEPReq+0x158>
              break;
 8007e76:	bf00      	nop
          }
          break;
 8007e78:	e0aa      	b.n	8007fd0 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007e80:	2b02      	cmp	r3, #2
 8007e82:	d002      	beq.n	8007e8a <USBD_StdEPReq+0x16a>
 8007e84:	2b03      	cmp	r3, #3
 8007e86:	d032      	beq.n	8007eee <USBD_StdEPReq+0x1ce>
 8007e88:	e097      	b.n	8007fba <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007e8a:	7bbb      	ldrb	r3, [r7, #14]
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d007      	beq.n	8007ea0 <USBD_StdEPReq+0x180>
 8007e90:	7bbb      	ldrb	r3, [r7, #14]
 8007e92:	2b80      	cmp	r3, #128	; 0x80
 8007e94:	d004      	beq.n	8007ea0 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 8007e96:	6839      	ldr	r1, [r7, #0]
 8007e98:	6878      	ldr	r0, [r7, #4]
 8007e9a:	f000 fbb8 	bl	800860e <USBD_CtlError>
                break;
 8007e9e:	e091      	b.n	8007fc4 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007ea0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	da0b      	bge.n	8007ec0 <USBD_StdEPReq+0x1a0>
 8007ea8:	7bbb      	ldrb	r3, [r7, #14]
 8007eaa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007eae:	4613      	mov	r3, r2
 8007eb0:	009b      	lsls	r3, r3, #2
 8007eb2:	4413      	add	r3, r2
 8007eb4:	009b      	lsls	r3, r3, #2
 8007eb6:	3310      	adds	r3, #16
 8007eb8:	687a      	ldr	r2, [r7, #4]
 8007eba:	4413      	add	r3, r2
 8007ebc:	3304      	adds	r3, #4
 8007ebe:	e00b      	b.n	8007ed8 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007ec0:	7bbb      	ldrb	r3, [r7, #14]
 8007ec2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007ec6:	4613      	mov	r3, r2
 8007ec8:	009b      	lsls	r3, r3, #2
 8007eca:	4413      	add	r3, r2
 8007ecc:	009b      	lsls	r3, r3, #2
 8007ece:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007ed2:	687a      	ldr	r2, [r7, #4]
 8007ed4:	4413      	add	r3, r2
 8007ed6:	3304      	adds	r3, #4
 8007ed8:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8007eda:	68bb      	ldr	r3, [r7, #8]
 8007edc:	2200      	movs	r2, #0
 8007ede:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8007ee0:	68bb      	ldr	r3, [r7, #8]
 8007ee2:	2202      	movs	r2, #2
 8007ee4:	4619      	mov	r1, r3
 8007ee6:	6878      	ldr	r0, [r7, #4]
 8007ee8:	f000 fbfb 	bl	80086e2 <USBD_CtlSendData>
              break;
 8007eec:	e06a      	b.n	8007fc4 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8007eee:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	da11      	bge.n	8007f1a <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007ef6:	7bbb      	ldrb	r3, [r7, #14]
 8007ef8:	f003 020f 	and.w	r2, r3, #15
 8007efc:	6879      	ldr	r1, [r7, #4]
 8007efe:	4613      	mov	r3, r2
 8007f00:	009b      	lsls	r3, r3, #2
 8007f02:	4413      	add	r3, r2
 8007f04:	009b      	lsls	r3, r3, #2
 8007f06:	440b      	add	r3, r1
 8007f08:	3318      	adds	r3, #24
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d117      	bne.n	8007f40 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8007f10:	6839      	ldr	r1, [r7, #0]
 8007f12:	6878      	ldr	r0, [r7, #4]
 8007f14:	f000 fb7b 	bl	800860e <USBD_CtlError>
                  break;
 8007f18:	e054      	b.n	8007fc4 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007f1a:	7bbb      	ldrb	r3, [r7, #14]
 8007f1c:	f003 020f 	and.w	r2, r3, #15
 8007f20:	6879      	ldr	r1, [r7, #4]
 8007f22:	4613      	mov	r3, r2
 8007f24:	009b      	lsls	r3, r3, #2
 8007f26:	4413      	add	r3, r2
 8007f28:	009b      	lsls	r3, r3, #2
 8007f2a:	440b      	add	r3, r1
 8007f2c:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d104      	bne.n	8007f40 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8007f36:	6839      	ldr	r1, [r7, #0]
 8007f38:	6878      	ldr	r0, [r7, #4]
 8007f3a:	f000 fb68 	bl	800860e <USBD_CtlError>
                  break;
 8007f3e:	e041      	b.n	8007fc4 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007f40:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	da0b      	bge.n	8007f60 <USBD_StdEPReq+0x240>
 8007f48:	7bbb      	ldrb	r3, [r7, #14]
 8007f4a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007f4e:	4613      	mov	r3, r2
 8007f50:	009b      	lsls	r3, r3, #2
 8007f52:	4413      	add	r3, r2
 8007f54:	009b      	lsls	r3, r3, #2
 8007f56:	3310      	adds	r3, #16
 8007f58:	687a      	ldr	r2, [r7, #4]
 8007f5a:	4413      	add	r3, r2
 8007f5c:	3304      	adds	r3, #4
 8007f5e:	e00b      	b.n	8007f78 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007f60:	7bbb      	ldrb	r3, [r7, #14]
 8007f62:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007f66:	4613      	mov	r3, r2
 8007f68:	009b      	lsls	r3, r3, #2
 8007f6a:	4413      	add	r3, r2
 8007f6c:	009b      	lsls	r3, r3, #2
 8007f6e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007f72:	687a      	ldr	r2, [r7, #4]
 8007f74:	4413      	add	r3, r2
 8007f76:	3304      	adds	r3, #4
 8007f78:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007f7a:	7bbb      	ldrb	r3, [r7, #14]
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d002      	beq.n	8007f86 <USBD_StdEPReq+0x266>
 8007f80:	7bbb      	ldrb	r3, [r7, #14]
 8007f82:	2b80      	cmp	r3, #128	; 0x80
 8007f84:	d103      	bne.n	8007f8e <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 8007f86:	68bb      	ldr	r3, [r7, #8]
 8007f88:	2200      	movs	r2, #0
 8007f8a:	601a      	str	r2, [r3, #0]
 8007f8c:	e00e      	b.n	8007fac <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8007f8e:	7bbb      	ldrb	r3, [r7, #14]
 8007f90:	4619      	mov	r1, r3
 8007f92:	6878      	ldr	r0, [r7, #4]
 8007f94:	f001 f85e 	bl	8009054 <USBD_LL_IsStallEP>
 8007f98:	4603      	mov	r3, r0
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d003      	beq.n	8007fa6 <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 8007f9e:	68bb      	ldr	r3, [r7, #8]
 8007fa0:	2201      	movs	r2, #1
 8007fa2:	601a      	str	r2, [r3, #0]
 8007fa4:	e002      	b.n	8007fac <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 8007fa6:	68bb      	ldr	r3, [r7, #8]
 8007fa8:	2200      	movs	r2, #0
 8007faa:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8007fac:	68bb      	ldr	r3, [r7, #8]
 8007fae:	2202      	movs	r2, #2
 8007fb0:	4619      	mov	r1, r3
 8007fb2:	6878      	ldr	r0, [r7, #4]
 8007fb4:	f000 fb95 	bl	80086e2 <USBD_CtlSendData>
              break;
 8007fb8:	e004      	b.n	8007fc4 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 8007fba:	6839      	ldr	r1, [r7, #0]
 8007fbc:	6878      	ldr	r0, [r7, #4]
 8007fbe:	f000 fb26 	bl	800860e <USBD_CtlError>
              break;
 8007fc2:	bf00      	nop
          }
          break;
 8007fc4:	e004      	b.n	8007fd0 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 8007fc6:	6839      	ldr	r1, [r7, #0]
 8007fc8:	6878      	ldr	r0, [r7, #4]
 8007fca:	f000 fb20 	bl	800860e <USBD_CtlError>
          break;
 8007fce:	bf00      	nop
      }
      break;
 8007fd0:	e004      	b.n	8007fdc <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 8007fd2:	6839      	ldr	r1, [r7, #0]
 8007fd4:	6878      	ldr	r0, [r7, #4]
 8007fd6:	f000 fb1a 	bl	800860e <USBD_CtlError>
      break;
 8007fda:	bf00      	nop
  }

  return ret;
 8007fdc:	7bfb      	ldrb	r3, [r7, #15]
}
 8007fde:	4618      	mov	r0, r3
 8007fe0:	3710      	adds	r7, #16
 8007fe2:	46bd      	mov	sp, r7
 8007fe4:	bd80      	pop	{r7, pc}
	...

08007fe8 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8007fe8:	b580      	push	{r7, lr}
 8007fea:	b084      	sub	sp, #16
 8007fec:	af00      	add	r7, sp, #0
 8007fee:	6078      	str	r0, [r7, #4]
 8007ff0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007ff2:	2300      	movs	r3, #0
 8007ff4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007ff6:	2300      	movs	r3, #0
 8007ff8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8007ffa:	2300      	movs	r3, #0
 8007ffc:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8007ffe:	683b      	ldr	r3, [r7, #0]
 8008000:	885b      	ldrh	r3, [r3, #2]
 8008002:	0a1b      	lsrs	r3, r3, #8
 8008004:	b29b      	uxth	r3, r3
 8008006:	3b01      	subs	r3, #1
 8008008:	2b06      	cmp	r3, #6
 800800a:	f200 8128 	bhi.w	800825e <USBD_GetDescriptor+0x276>
 800800e:	a201      	add	r2, pc, #4	; (adr r2, 8008014 <USBD_GetDescriptor+0x2c>)
 8008010:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008014:	08008031 	.word	0x08008031
 8008018:	08008049 	.word	0x08008049
 800801c:	08008089 	.word	0x08008089
 8008020:	0800825f 	.word	0x0800825f
 8008024:	0800825f 	.word	0x0800825f
 8008028:	080081ff 	.word	0x080081ff
 800802c:	0800822b 	.word	0x0800822b
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	687a      	ldr	r2, [r7, #4]
 800803a:	7c12      	ldrb	r2, [r2, #16]
 800803c:	f107 0108 	add.w	r1, r7, #8
 8008040:	4610      	mov	r0, r2
 8008042:	4798      	blx	r3
 8008044:	60f8      	str	r0, [r7, #12]
      break;
 8008046:	e112      	b.n	800826e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	7c1b      	ldrb	r3, [r3, #16]
 800804c:	2b00      	cmp	r3, #0
 800804e:	d10d      	bne.n	800806c <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008056:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008058:	f107 0208 	add.w	r2, r7, #8
 800805c:	4610      	mov	r0, r2
 800805e:	4798      	blx	r3
 8008060:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	3301      	adds	r3, #1
 8008066:	2202      	movs	r2, #2
 8008068:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800806a:	e100      	b.n	800826e <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008072:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008074:	f107 0208 	add.w	r2, r7, #8
 8008078:	4610      	mov	r0, r2
 800807a:	4798      	blx	r3
 800807c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	3301      	adds	r3, #1
 8008082:	2202      	movs	r2, #2
 8008084:	701a      	strb	r2, [r3, #0]
      break;
 8008086:	e0f2      	b.n	800826e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008088:	683b      	ldr	r3, [r7, #0]
 800808a:	885b      	ldrh	r3, [r3, #2]
 800808c:	b2db      	uxtb	r3, r3
 800808e:	2b05      	cmp	r3, #5
 8008090:	f200 80ac 	bhi.w	80081ec <USBD_GetDescriptor+0x204>
 8008094:	a201      	add	r2, pc, #4	; (adr r2, 800809c <USBD_GetDescriptor+0xb4>)
 8008096:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800809a:	bf00      	nop
 800809c:	080080b5 	.word	0x080080b5
 80080a0:	080080e9 	.word	0x080080e9
 80080a4:	0800811d 	.word	0x0800811d
 80080a8:	08008151 	.word	0x08008151
 80080ac:	08008185 	.word	0x08008185
 80080b0:	080081b9 	.word	0x080081b9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80080ba:	685b      	ldr	r3, [r3, #4]
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d00b      	beq.n	80080d8 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80080c6:	685b      	ldr	r3, [r3, #4]
 80080c8:	687a      	ldr	r2, [r7, #4]
 80080ca:	7c12      	ldrb	r2, [r2, #16]
 80080cc:	f107 0108 	add.w	r1, r7, #8
 80080d0:	4610      	mov	r0, r2
 80080d2:	4798      	blx	r3
 80080d4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80080d6:	e091      	b.n	80081fc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80080d8:	6839      	ldr	r1, [r7, #0]
 80080da:	6878      	ldr	r0, [r7, #4]
 80080dc:	f000 fa97 	bl	800860e <USBD_CtlError>
            err++;
 80080e0:	7afb      	ldrb	r3, [r7, #11]
 80080e2:	3301      	adds	r3, #1
 80080e4:	72fb      	strb	r3, [r7, #11]
          break;
 80080e6:	e089      	b.n	80081fc <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80080ee:	689b      	ldr	r3, [r3, #8]
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	d00b      	beq.n	800810c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80080fa:	689b      	ldr	r3, [r3, #8]
 80080fc:	687a      	ldr	r2, [r7, #4]
 80080fe:	7c12      	ldrb	r2, [r2, #16]
 8008100:	f107 0108 	add.w	r1, r7, #8
 8008104:	4610      	mov	r0, r2
 8008106:	4798      	blx	r3
 8008108:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800810a:	e077      	b.n	80081fc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800810c:	6839      	ldr	r1, [r7, #0]
 800810e:	6878      	ldr	r0, [r7, #4]
 8008110:	f000 fa7d 	bl	800860e <USBD_CtlError>
            err++;
 8008114:	7afb      	ldrb	r3, [r7, #11]
 8008116:	3301      	adds	r3, #1
 8008118:	72fb      	strb	r3, [r7, #11]
          break;
 800811a:	e06f      	b.n	80081fc <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008122:	68db      	ldr	r3, [r3, #12]
 8008124:	2b00      	cmp	r3, #0
 8008126:	d00b      	beq.n	8008140 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800812e:	68db      	ldr	r3, [r3, #12]
 8008130:	687a      	ldr	r2, [r7, #4]
 8008132:	7c12      	ldrb	r2, [r2, #16]
 8008134:	f107 0108 	add.w	r1, r7, #8
 8008138:	4610      	mov	r0, r2
 800813a:	4798      	blx	r3
 800813c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800813e:	e05d      	b.n	80081fc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008140:	6839      	ldr	r1, [r7, #0]
 8008142:	6878      	ldr	r0, [r7, #4]
 8008144:	f000 fa63 	bl	800860e <USBD_CtlError>
            err++;
 8008148:	7afb      	ldrb	r3, [r7, #11]
 800814a:	3301      	adds	r3, #1
 800814c:	72fb      	strb	r3, [r7, #11]
          break;
 800814e:	e055      	b.n	80081fc <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008156:	691b      	ldr	r3, [r3, #16]
 8008158:	2b00      	cmp	r3, #0
 800815a:	d00b      	beq.n	8008174 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008162:	691b      	ldr	r3, [r3, #16]
 8008164:	687a      	ldr	r2, [r7, #4]
 8008166:	7c12      	ldrb	r2, [r2, #16]
 8008168:	f107 0108 	add.w	r1, r7, #8
 800816c:	4610      	mov	r0, r2
 800816e:	4798      	blx	r3
 8008170:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008172:	e043      	b.n	80081fc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008174:	6839      	ldr	r1, [r7, #0]
 8008176:	6878      	ldr	r0, [r7, #4]
 8008178:	f000 fa49 	bl	800860e <USBD_CtlError>
            err++;
 800817c:	7afb      	ldrb	r3, [r7, #11]
 800817e:	3301      	adds	r3, #1
 8008180:	72fb      	strb	r3, [r7, #11]
          break;
 8008182:	e03b      	b.n	80081fc <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800818a:	695b      	ldr	r3, [r3, #20]
 800818c:	2b00      	cmp	r3, #0
 800818e:	d00b      	beq.n	80081a8 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008196:	695b      	ldr	r3, [r3, #20]
 8008198:	687a      	ldr	r2, [r7, #4]
 800819a:	7c12      	ldrb	r2, [r2, #16]
 800819c:	f107 0108 	add.w	r1, r7, #8
 80081a0:	4610      	mov	r0, r2
 80081a2:	4798      	blx	r3
 80081a4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80081a6:	e029      	b.n	80081fc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80081a8:	6839      	ldr	r1, [r7, #0]
 80081aa:	6878      	ldr	r0, [r7, #4]
 80081ac:	f000 fa2f 	bl	800860e <USBD_CtlError>
            err++;
 80081b0:	7afb      	ldrb	r3, [r7, #11]
 80081b2:	3301      	adds	r3, #1
 80081b4:	72fb      	strb	r3, [r7, #11]
          break;
 80081b6:	e021      	b.n	80081fc <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80081be:	699b      	ldr	r3, [r3, #24]
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	d00b      	beq.n	80081dc <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80081ca:	699b      	ldr	r3, [r3, #24]
 80081cc:	687a      	ldr	r2, [r7, #4]
 80081ce:	7c12      	ldrb	r2, [r2, #16]
 80081d0:	f107 0108 	add.w	r1, r7, #8
 80081d4:	4610      	mov	r0, r2
 80081d6:	4798      	blx	r3
 80081d8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80081da:	e00f      	b.n	80081fc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80081dc:	6839      	ldr	r1, [r7, #0]
 80081de:	6878      	ldr	r0, [r7, #4]
 80081e0:	f000 fa15 	bl	800860e <USBD_CtlError>
            err++;
 80081e4:	7afb      	ldrb	r3, [r7, #11]
 80081e6:	3301      	adds	r3, #1
 80081e8:	72fb      	strb	r3, [r7, #11]
          break;
 80081ea:	e007      	b.n	80081fc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 80081ec:	6839      	ldr	r1, [r7, #0]
 80081ee:	6878      	ldr	r0, [r7, #4]
 80081f0:	f000 fa0d 	bl	800860e <USBD_CtlError>
          err++;
 80081f4:	7afb      	ldrb	r3, [r7, #11]
 80081f6:	3301      	adds	r3, #1
 80081f8:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 80081fa:	e038      	b.n	800826e <USBD_GetDescriptor+0x286>
 80081fc:	e037      	b.n	800826e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	7c1b      	ldrb	r3, [r3, #16]
 8008202:	2b00      	cmp	r3, #0
 8008204:	d109      	bne.n	800821a <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800820c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800820e:	f107 0208 	add.w	r2, r7, #8
 8008212:	4610      	mov	r0, r2
 8008214:	4798      	blx	r3
 8008216:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008218:	e029      	b.n	800826e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800821a:	6839      	ldr	r1, [r7, #0]
 800821c:	6878      	ldr	r0, [r7, #4]
 800821e:	f000 f9f6 	bl	800860e <USBD_CtlError>
        err++;
 8008222:	7afb      	ldrb	r3, [r7, #11]
 8008224:	3301      	adds	r3, #1
 8008226:	72fb      	strb	r3, [r7, #11]
      break;
 8008228:	e021      	b.n	800826e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	7c1b      	ldrb	r3, [r3, #16]
 800822e:	2b00      	cmp	r3, #0
 8008230:	d10d      	bne.n	800824e <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008238:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800823a:	f107 0208 	add.w	r2, r7, #8
 800823e:	4610      	mov	r0, r2
 8008240:	4798      	blx	r3
 8008242:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	3301      	adds	r3, #1
 8008248:	2207      	movs	r2, #7
 800824a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800824c:	e00f      	b.n	800826e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800824e:	6839      	ldr	r1, [r7, #0]
 8008250:	6878      	ldr	r0, [r7, #4]
 8008252:	f000 f9dc 	bl	800860e <USBD_CtlError>
        err++;
 8008256:	7afb      	ldrb	r3, [r7, #11]
 8008258:	3301      	adds	r3, #1
 800825a:	72fb      	strb	r3, [r7, #11]
      break;
 800825c:	e007      	b.n	800826e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800825e:	6839      	ldr	r1, [r7, #0]
 8008260:	6878      	ldr	r0, [r7, #4]
 8008262:	f000 f9d4 	bl	800860e <USBD_CtlError>
      err++;
 8008266:	7afb      	ldrb	r3, [r7, #11]
 8008268:	3301      	adds	r3, #1
 800826a:	72fb      	strb	r3, [r7, #11]
      break;
 800826c:	bf00      	nop
  }

  if (err != 0U)
 800826e:	7afb      	ldrb	r3, [r7, #11]
 8008270:	2b00      	cmp	r3, #0
 8008272:	d11c      	bne.n	80082ae <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8008274:	893b      	ldrh	r3, [r7, #8]
 8008276:	2b00      	cmp	r3, #0
 8008278:	d011      	beq.n	800829e <USBD_GetDescriptor+0x2b6>
 800827a:	683b      	ldr	r3, [r7, #0]
 800827c:	88db      	ldrh	r3, [r3, #6]
 800827e:	2b00      	cmp	r3, #0
 8008280:	d00d      	beq.n	800829e <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8008282:	683b      	ldr	r3, [r7, #0]
 8008284:	88da      	ldrh	r2, [r3, #6]
 8008286:	893b      	ldrh	r3, [r7, #8]
 8008288:	4293      	cmp	r3, r2
 800828a:	bf28      	it	cs
 800828c:	4613      	movcs	r3, r2
 800828e:	b29b      	uxth	r3, r3
 8008290:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8008292:	893b      	ldrh	r3, [r7, #8]
 8008294:	461a      	mov	r2, r3
 8008296:	68f9      	ldr	r1, [r7, #12]
 8008298:	6878      	ldr	r0, [r7, #4]
 800829a:	f000 fa22 	bl	80086e2 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800829e:	683b      	ldr	r3, [r7, #0]
 80082a0:	88db      	ldrh	r3, [r3, #6]
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	d104      	bne.n	80082b0 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 80082a6:	6878      	ldr	r0, [r7, #4]
 80082a8:	f000 fa79 	bl	800879e <USBD_CtlSendStatus>
 80082ac:	e000      	b.n	80082b0 <USBD_GetDescriptor+0x2c8>
    return;
 80082ae:	bf00      	nop
    }
  }
}
 80082b0:	3710      	adds	r7, #16
 80082b2:	46bd      	mov	sp, r7
 80082b4:	bd80      	pop	{r7, pc}
 80082b6:	bf00      	nop

080082b8 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80082b8:	b580      	push	{r7, lr}
 80082ba:	b084      	sub	sp, #16
 80082bc:	af00      	add	r7, sp, #0
 80082be:	6078      	str	r0, [r7, #4]
 80082c0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80082c2:	683b      	ldr	r3, [r7, #0]
 80082c4:	889b      	ldrh	r3, [r3, #4]
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	d130      	bne.n	800832c <USBD_SetAddress+0x74>
 80082ca:	683b      	ldr	r3, [r7, #0]
 80082cc:	88db      	ldrh	r3, [r3, #6]
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	d12c      	bne.n	800832c <USBD_SetAddress+0x74>
 80082d2:	683b      	ldr	r3, [r7, #0]
 80082d4:	885b      	ldrh	r3, [r3, #2]
 80082d6:	2b7f      	cmp	r3, #127	; 0x7f
 80082d8:	d828      	bhi.n	800832c <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80082da:	683b      	ldr	r3, [r7, #0]
 80082dc:	885b      	ldrh	r3, [r3, #2]
 80082de:	b2db      	uxtb	r3, r3
 80082e0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80082e4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80082ec:	2b03      	cmp	r3, #3
 80082ee:	d104      	bne.n	80082fa <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 80082f0:	6839      	ldr	r1, [r7, #0]
 80082f2:	6878      	ldr	r0, [r7, #4]
 80082f4:	f000 f98b 	bl	800860e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80082f8:	e01d      	b.n	8008336 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	7bfa      	ldrb	r2, [r7, #15]
 80082fe:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008302:	7bfb      	ldrb	r3, [r7, #15]
 8008304:	4619      	mov	r1, r3
 8008306:	6878      	ldr	r0, [r7, #4]
 8008308:	f000 fecf 	bl	80090aa <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800830c:	6878      	ldr	r0, [r7, #4]
 800830e:	f000 fa46 	bl	800879e <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008312:	7bfb      	ldrb	r3, [r7, #15]
 8008314:	2b00      	cmp	r3, #0
 8008316:	d004      	beq.n	8008322 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	2202      	movs	r2, #2
 800831c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008320:	e009      	b.n	8008336 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	2201      	movs	r2, #1
 8008326:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800832a:	e004      	b.n	8008336 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800832c:	6839      	ldr	r1, [r7, #0]
 800832e:	6878      	ldr	r0, [r7, #4]
 8008330:	f000 f96d 	bl	800860e <USBD_CtlError>
  }
}
 8008334:	bf00      	nop
 8008336:	bf00      	nop
 8008338:	3710      	adds	r7, #16
 800833a:	46bd      	mov	sp, r7
 800833c:	bd80      	pop	{r7, pc}
	...

08008340 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008340:	b580      	push	{r7, lr}
 8008342:	b082      	sub	sp, #8
 8008344:	af00      	add	r7, sp, #0
 8008346:	6078      	str	r0, [r7, #4]
 8008348:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800834a:	683b      	ldr	r3, [r7, #0]
 800834c:	885b      	ldrh	r3, [r3, #2]
 800834e:	b2da      	uxtb	r2, r3
 8008350:	4b41      	ldr	r3, [pc, #260]	; (8008458 <USBD_SetConfig+0x118>)
 8008352:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008354:	4b40      	ldr	r3, [pc, #256]	; (8008458 <USBD_SetConfig+0x118>)
 8008356:	781b      	ldrb	r3, [r3, #0]
 8008358:	2b01      	cmp	r3, #1
 800835a:	d904      	bls.n	8008366 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 800835c:	6839      	ldr	r1, [r7, #0]
 800835e:	6878      	ldr	r0, [r7, #4]
 8008360:	f000 f955 	bl	800860e <USBD_CtlError>
 8008364:	e075      	b.n	8008452 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800836c:	2b02      	cmp	r3, #2
 800836e:	d002      	beq.n	8008376 <USBD_SetConfig+0x36>
 8008370:	2b03      	cmp	r3, #3
 8008372:	d023      	beq.n	80083bc <USBD_SetConfig+0x7c>
 8008374:	e062      	b.n	800843c <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8008376:	4b38      	ldr	r3, [pc, #224]	; (8008458 <USBD_SetConfig+0x118>)
 8008378:	781b      	ldrb	r3, [r3, #0]
 800837a:	2b00      	cmp	r3, #0
 800837c:	d01a      	beq.n	80083b4 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 800837e:	4b36      	ldr	r3, [pc, #216]	; (8008458 <USBD_SetConfig+0x118>)
 8008380:	781b      	ldrb	r3, [r3, #0]
 8008382:	461a      	mov	r2, r3
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	2203      	movs	r2, #3
 800838c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8008390:	4b31      	ldr	r3, [pc, #196]	; (8008458 <USBD_SetConfig+0x118>)
 8008392:	781b      	ldrb	r3, [r3, #0]
 8008394:	4619      	mov	r1, r3
 8008396:	6878      	ldr	r0, [r7, #4]
 8008398:	f7ff f9af 	bl	80076fa <USBD_SetClassConfig>
 800839c:	4603      	mov	r3, r0
 800839e:	2b02      	cmp	r3, #2
 80083a0:	d104      	bne.n	80083ac <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 80083a2:	6839      	ldr	r1, [r7, #0]
 80083a4:	6878      	ldr	r0, [r7, #4]
 80083a6:	f000 f932 	bl	800860e <USBD_CtlError>
            return;
 80083aa:	e052      	b.n	8008452 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 80083ac:	6878      	ldr	r0, [r7, #4]
 80083ae:	f000 f9f6 	bl	800879e <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 80083b2:	e04e      	b.n	8008452 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80083b4:	6878      	ldr	r0, [r7, #4]
 80083b6:	f000 f9f2 	bl	800879e <USBD_CtlSendStatus>
        break;
 80083ba:	e04a      	b.n	8008452 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 80083bc:	4b26      	ldr	r3, [pc, #152]	; (8008458 <USBD_SetConfig+0x118>)
 80083be:	781b      	ldrb	r3, [r3, #0]
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	d112      	bne.n	80083ea <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	2202      	movs	r2, #2
 80083c8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 80083cc:	4b22      	ldr	r3, [pc, #136]	; (8008458 <USBD_SetConfig+0x118>)
 80083ce:	781b      	ldrb	r3, [r3, #0]
 80083d0:	461a      	mov	r2, r3
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 80083d6:	4b20      	ldr	r3, [pc, #128]	; (8008458 <USBD_SetConfig+0x118>)
 80083d8:	781b      	ldrb	r3, [r3, #0]
 80083da:	4619      	mov	r1, r3
 80083dc:	6878      	ldr	r0, [r7, #4]
 80083de:	f7ff f9ab 	bl	8007738 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 80083e2:	6878      	ldr	r0, [r7, #4]
 80083e4:	f000 f9db 	bl	800879e <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 80083e8:	e033      	b.n	8008452 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 80083ea:	4b1b      	ldr	r3, [pc, #108]	; (8008458 <USBD_SetConfig+0x118>)
 80083ec:	781b      	ldrb	r3, [r3, #0]
 80083ee:	461a      	mov	r2, r3
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	685b      	ldr	r3, [r3, #4]
 80083f4:	429a      	cmp	r2, r3
 80083f6:	d01d      	beq.n	8008434 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	685b      	ldr	r3, [r3, #4]
 80083fc:	b2db      	uxtb	r3, r3
 80083fe:	4619      	mov	r1, r3
 8008400:	6878      	ldr	r0, [r7, #4]
 8008402:	f7ff f999 	bl	8007738 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8008406:	4b14      	ldr	r3, [pc, #80]	; (8008458 <USBD_SetConfig+0x118>)
 8008408:	781b      	ldrb	r3, [r3, #0]
 800840a:	461a      	mov	r2, r3
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8008410:	4b11      	ldr	r3, [pc, #68]	; (8008458 <USBD_SetConfig+0x118>)
 8008412:	781b      	ldrb	r3, [r3, #0]
 8008414:	4619      	mov	r1, r3
 8008416:	6878      	ldr	r0, [r7, #4]
 8008418:	f7ff f96f 	bl	80076fa <USBD_SetClassConfig>
 800841c:	4603      	mov	r3, r0
 800841e:	2b02      	cmp	r3, #2
 8008420:	d104      	bne.n	800842c <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8008422:	6839      	ldr	r1, [r7, #0]
 8008424:	6878      	ldr	r0, [r7, #4]
 8008426:	f000 f8f2 	bl	800860e <USBD_CtlError>
            return;
 800842a:	e012      	b.n	8008452 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800842c:	6878      	ldr	r0, [r7, #4]
 800842e:	f000 f9b6 	bl	800879e <USBD_CtlSendStatus>
        break;
 8008432:	e00e      	b.n	8008452 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8008434:	6878      	ldr	r0, [r7, #4]
 8008436:	f000 f9b2 	bl	800879e <USBD_CtlSendStatus>
        break;
 800843a:	e00a      	b.n	8008452 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 800843c:	6839      	ldr	r1, [r7, #0]
 800843e:	6878      	ldr	r0, [r7, #4]
 8008440:	f000 f8e5 	bl	800860e <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8008444:	4b04      	ldr	r3, [pc, #16]	; (8008458 <USBD_SetConfig+0x118>)
 8008446:	781b      	ldrb	r3, [r3, #0]
 8008448:	4619      	mov	r1, r3
 800844a:	6878      	ldr	r0, [r7, #4]
 800844c:	f7ff f974 	bl	8007738 <USBD_ClrClassConfig>
        break;
 8008450:	bf00      	nop
    }
  }
}
 8008452:	3708      	adds	r7, #8
 8008454:	46bd      	mov	sp, r7
 8008456:	bd80      	pop	{r7, pc}
 8008458:	200004ec 	.word	0x200004ec

0800845c <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800845c:	b580      	push	{r7, lr}
 800845e:	b082      	sub	sp, #8
 8008460:	af00      	add	r7, sp, #0
 8008462:	6078      	str	r0, [r7, #4]
 8008464:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008466:	683b      	ldr	r3, [r7, #0]
 8008468:	88db      	ldrh	r3, [r3, #6]
 800846a:	2b01      	cmp	r3, #1
 800846c:	d004      	beq.n	8008478 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800846e:	6839      	ldr	r1, [r7, #0]
 8008470:	6878      	ldr	r0, [r7, #4]
 8008472:	f000 f8cc 	bl	800860e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8008476:	e022      	b.n	80084be <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800847e:	2b02      	cmp	r3, #2
 8008480:	dc02      	bgt.n	8008488 <USBD_GetConfig+0x2c>
 8008482:	2b00      	cmp	r3, #0
 8008484:	dc03      	bgt.n	800848e <USBD_GetConfig+0x32>
 8008486:	e015      	b.n	80084b4 <USBD_GetConfig+0x58>
 8008488:	2b03      	cmp	r3, #3
 800848a:	d00b      	beq.n	80084a4 <USBD_GetConfig+0x48>
 800848c:	e012      	b.n	80084b4 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	2200      	movs	r2, #0
 8008492:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	3308      	adds	r3, #8
 8008498:	2201      	movs	r2, #1
 800849a:	4619      	mov	r1, r3
 800849c:	6878      	ldr	r0, [r7, #4]
 800849e:	f000 f920 	bl	80086e2 <USBD_CtlSendData>
        break;
 80084a2:	e00c      	b.n	80084be <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	3304      	adds	r3, #4
 80084a8:	2201      	movs	r2, #1
 80084aa:	4619      	mov	r1, r3
 80084ac:	6878      	ldr	r0, [r7, #4]
 80084ae:	f000 f918 	bl	80086e2 <USBD_CtlSendData>
        break;
 80084b2:	e004      	b.n	80084be <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 80084b4:	6839      	ldr	r1, [r7, #0]
 80084b6:	6878      	ldr	r0, [r7, #4]
 80084b8:	f000 f8a9 	bl	800860e <USBD_CtlError>
        break;
 80084bc:	bf00      	nop
}
 80084be:	bf00      	nop
 80084c0:	3708      	adds	r7, #8
 80084c2:	46bd      	mov	sp, r7
 80084c4:	bd80      	pop	{r7, pc}

080084c6 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80084c6:	b580      	push	{r7, lr}
 80084c8:	b082      	sub	sp, #8
 80084ca:	af00      	add	r7, sp, #0
 80084cc:	6078      	str	r0, [r7, #4]
 80084ce:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80084d6:	3b01      	subs	r3, #1
 80084d8:	2b02      	cmp	r3, #2
 80084da:	d81e      	bhi.n	800851a <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80084dc:	683b      	ldr	r3, [r7, #0]
 80084de:	88db      	ldrh	r3, [r3, #6]
 80084e0:	2b02      	cmp	r3, #2
 80084e2:	d004      	beq.n	80084ee <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 80084e4:	6839      	ldr	r1, [r7, #0]
 80084e6:	6878      	ldr	r0, [r7, #4]
 80084e8:	f000 f891 	bl	800860e <USBD_CtlError>
        break;
 80084ec:	e01a      	b.n	8008524 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	2201      	movs	r2, #1
 80084f2:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d005      	beq.n	800850a <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	68db      	ldr	r3, [r3, #12]
 8008502:	f043 0202 	orr.w	r2, r3, #2
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	330c      	adds	r3, #12
 800850e:	2202      	movs	r2, #2
 8008510:	4619      	mov	r1, r3
 8008512:	6878      	ldr	r0, [r7, #4]
 8008514:	f000 f8e5 	bl	80086e2 <USBD_CtlSendData>
      break;
 8008518:	e004      	b.n	8008524 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 800851a:	6839      	ldr	r1, [r7, #0]
 800851c:	6878      	ldr	r0, [r7, #4]
 800851e:	f000 f876 	bl	800860e <USBD_CtlError>
      break;
 8008522:	bf00      	nop
  }
}
 8008524:	bf00      	nop
 8008526:	3708      	adds	r7, #8
 8008528:	46bd      	mov	sp, r7
 800852a:	bd80      	pop	{r7, pc}

0800852c <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800852c:	b580      	push	{r7, lr}
 800852e:	b082      	sub	sp, #8
 8008530:	af00      	add	r7, sp, #0
 8008532:	6078      	str	r0, [r7, #4]
 8008534:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008536:	683b      	ldr	r3, [r7, #0]
 8008538:	885b      	ldrh	r3, [r3, #2]
 800853a:	2b01      	cmp	r3, #1
 800853c:	d106      	bne.n	800854c <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	2201      	movs	r2, #1
 8008542:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 8008546:	6878      	ldr	r0, [r7, #4]
 8008548:	f000 f929 	bl	800879e <USBD_CtlSendStatus>
  }
}
 800854c:	bf00      	nop
 800854e:	3708      	adds	r7, #8
 8008550:	46bd      	mov	sp, r7
 8008552:	bd80      	pop	{r7, pc}

08008554 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008554:	b580      	push	{r7, lr}
 8008556:	b082      	sub	sp, #8
 8008558:	af00      	add	r7, sp, #0
 800855a:	6078      	str	r0, [r7, #4]
 800855c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008564:	3b01      	subs	r3, #1
 8008566:	2b02      	cmp	r3, #2
 8008568:	d80b      	bhi.n	8008582 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800856a:	683b      	ldr	r3, [r7, #0]
 800856c:	885b      	ldrh	r3, [r3, #2]
 800856e:	2b01      	cmp	r3, #1
 8008570:	d10c      	bne.n	800858c <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	2200      	movs	r2, #0
 8008576:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 800857a:	6878      	ldr	r0, [r7, #4]
 800857c:	f000 f90f 	bl	800879e <USBD_CtlSendStatus>
      }
      break;
 8008580:	e004      	b.n	800858c <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8008582:	6839      	ldr	r1, [r7, #0]
 8008584:	6878      	ldr	r0, [r7, #4]
 8008586:	f000 f842 	bl	800860e <USBD_CtlError>
      break;
 800858a:	e000      	b.n	800858e <USBD_ClrFeature+0x3a>
      break;
 800858c:	bf00      	nop
  }
}
 800858e:	bf00      	nop
 8008590:	3708      	adds	r7, #8
 8008592:	46bd      	mov	sp, r7
 8008594:	bd80      	pop	{r7, pc}

08008596 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008596:	b480      	push	{r7}
 8008598:	b083      	sub	sp, #12
 800859a:	af00      	add	r7, sp, #0
 800859c:	6078      	str	r0, [r7, #4]
 800859e:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 80085a0:	683b      	ldr	r3, [r7, #0]
 80085a2:	781a      	ldrb	r2, [r3, #0]
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 80085a8:	683b      	ldr	r3, [r7, #0]
 80085aa:	785a      	ldrb	r2, [r3, #1]
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 80085b0:	683b      	ldr	r3, [r7, #0]
 80085b2:	3302      	adds	r3, #2
 80085b4:	781b      	ldrb	r3, [r3, #0]
 80085b6:	b29a      	uxth	r2, r3
 80085b8:	683b      	ldr	r3, [r7, #0]
 80085ba:	3303      	adds	r3, #3
 80085bc:	781b      	ldrb	r3, [r3, #0]
 80085be:	b29b      	uxth	r3, r3
 80085c0:	021b      	lsls	r3, r3, #8
 80085c2:	b29b      	uxth	r3, r3
 80085c4:	4413      	add	r3, r2
 80085c6:	b29a      	uxth	r2, r3
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 80085cc:	683b      	ldr	r3, [r7, #0]
 80085ce:	3304      	adds	r3, #4
 80085d0:	781b      	ldrb	r3, [r3, #0]
 80085d2:	b29a      	uxth	r2, r3
 80085d4:	683b      	ldr	r3, [r7, #0]
 80085d6:	3305      	adds	r3, #5
 80085d8:	781b      	ldrb	r3, [r3, #0]
 80085da:	b29b      	uxth	r3, r3
 80085dc:	021b      	lsls	r3, r3, #8
 80085de:	b29b      	uxth	r3, r3
 80085e0:	4413      	add	r3, r2
 80085e2:	b29a      	uxth	r2, r3
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 80085e8:	683b      	ldr	r3, [r7, #0]
 80085ea:	3306      	adds	r3, #6
 80085ec:	781b      	ldrb	r3, [r3, #0]
 80085ee:	b29a      	uxth	r2, r3
 80085f0:	683b      	ldr	r3, [r7, #0]
 80085f2:	3307      	adds	r3, #7
 80085f4:	781b      	ldrb	r3, [r3, #0]
 80085f6:	b29b      	uxth	r3, r3
 80085f8:	021b      	lsls	r3, r3, #8
 80085fa:	b29b      	uxth	r3, r3
 80085fc:	4413      	add	r3, r2
 80085fe:	b29a      	uxth	r2, r3
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	80da      	strh	r2, [r3, #6]

}
 8008604:	bf00      	nop
 8008606:	370c      	adds	r7, #12
 8008608:	46bd      	mov	sp, r7
 800860a:	bc80      	pop	{r7}
 800860c:	4770      	bx	lr

0800860e <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800860e:	b580      	push	{r7, lr}
 8008610:	b082      	sub	sp, #8
 8008612:	af00      	add	r7, sp, #0
 8008614:	6078      	str	r0, [r7, #4]
 8008616:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8008618:	2180      	movs	r1, #128	; 0x80
 800861a:	6878      	ldr	r0, [r7, #4]
 800861c:	f000 fcdc 	bl	8008fd8 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8008620:	2100      	movs	r1, #0
 8008622:	6878      	ldr	r0, [r7, #4]
 8008624:	f000 fcd8 	bl	8008fd8 <USBD_LL_StallEP>
}
 8008628:	bf00      	nop
 800862a:	3708      	adds	r7, #8
 800862c:	46bd      	mov	sp, r7
 800862e:	bd80      	pop	{r7, pc}

08008630 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008630:	b580      	push	{r7, lr}
 8008632:	b086      	sub	sp, #24
 8008634:	af00      	add	r7, sp, #0
 8008636:	60f8      	str	r0, [r7, #12]
 8008638:	60b9      	str	r1, [r7, #8]
 800863a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800863c:	2300      	movs	r3, #0
 800863e:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	2b00      	cmp	r3, #0
 8008644:	d032      	beq.n	80086ac <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8008646:	68f8      	ldr	r0, [r7, #12]
 8008648:	f000 f834 	bl	80086b4 <USBD_GetLen>
 800864c:	4603      	mov	r3, r0
 800864e:	3301      	adds	r3, #1
 8008650:	b29b      	uxth	r3, r3
 8008652:	005b      	lsls	r3, r3, #1
 8008654:	b29a      	uxth	r2, r3
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800865a:	7dfb      	ldrb	r3, [r7, #23]
 800865c:	1c5a      	adds	r2, r3, #1
 800865e:	75fa      	strb	r2, [r7, #23]
 8008660:	461a      	mov	r2, r3
 8008662:	68bb      	ldr	r3, [r7, #8]
 8008664:	4413      	add	r3, r2
 8008666:	687a      	ldr	r2, [r7, #4]
 8008668:	7812      	ldrb	r2, [r2, #0]
 800866a:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800866c:	7dfb      	ldrb	r3, [r7, #23]
 800866e:	1c5a      	adds	r2, r3, #1
 8008670:	75fa      	strb	r2, [r7, #23]
 8008672:	461a      	mov	r2, r3
 8008674:	68bb      	ldr	r3, [r7, #8]
 8008676:	4413      	add	r3, r2
 8008678:	2203      	movs	r2, #3
 800867a:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800867c:	e012      	b.n	80086a4 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	1c5a      	adds	r2, r3, #1
 8008682:	60fa      	str	r2, [r7, #12]
 8008684:	7dfa      	ldrb	r2, [r7, #23]
 8008686:	1c51      	adds	r1, r2, #1
 8008688:	75f9      	strb	r1, [r7, #23]
 800868a:	4611      	mov	r1, r2
 800868c:	68ba      	ldr	r2, [r7, #8]
 800868e:	440a      	add	r2, r1
 8008690:	781b      	ldrb	r3, [r3, #0]
 8008692:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8008694:	7dfb      	ldrb	r3, [r7, #23]
 8008696:	1c5a      	adds	r2, r3, #1
 8008698:	75fa      	strb	r2, [r7, #23]
 800869a:	461a      	mov	r2, r3
 800869c:	68bb      	ldr	r3, [r7, #8]
 800869e:	4413      	add	r3, r2
 80086a0:	2200      	movs	r2, #0
 80086a2:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	781b      	ldrb	r3, [r3, #0]
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	d1e8      	bne.n	800867e <USBD_GetString+0x4e>
    }
  }
}
 80086ac:	bf00      	nop
 80086ae:	3718      	adds	r7, #24
 80086b0:	46bd      	mov	sp, r7
 80086b2:	bd80      	pop	{r7, pc}

080086b4 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80086b4:	b480      	push	{r7}
 80086b6:	b085      	sub	sp, #20
 80086b8:	af00      	add	r7, sp, #0
 80086ba:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80086bc:	2300      	movs	r3, #0
 80086be:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 80086c0:	e005      	b.n	80086ce <USBD_GetLen+0x1a>
  {
    len++;
 80086c2:	7bfb      	ldrb	r3, [r7, #15]
 80086c4:	3301      	adds	r3, #1
 80086c6:	73fb      	strb	r3, [r7, #15]
    buf++;
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	3301      	adds	r3, #1
 80086cc:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	781b      	ldrb	r3, [r3, #0]
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d1f5      	bne.n	80086c2 <USBD_GetLen+0xe>
  }

  return len;
 80086d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80086d8:	4618      	mov	r0, r3
 80086da:	3714      	adds	r7, #20
 80086dc:	46bd      	mov	sp, r7
 80086de:	bc80      	pop	{r7}
 80086e0:	4770      	bx	lr

080086e2 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 80086e2:	b580      	push	{r7, lr}
 80086e4:	b084      	sub	sp, #16
 80086e6:	af00      	add	r7, sp, #0
 80086e8:	60f8      	str	r0, [r7, #12]
 80086ea:	60b9      	str	r1, [r7, #8]
 80086ec:	4613      	mov	r3, r2
 80086ee:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	2202      	movs	r2, #2
 80086f4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80086f8:	88fa      	ldrh	r2, [r7, #6]
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 80086fe:	88fa      	ldrh	r2, [r7, #6]
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008704:	88fb      	ldrh	r3, [r7, #6]
 8008706:	68ba      	ldr	r2, [r7, #8]
 8008708:	2100      	movs	r1, #0
 800870a:	68f8      	ldr	r0, [r7, #12]
 800870c:	f000 fcec 	bl	80090e8 <USBD_LL_Transmit>

  return USBD_OK;
 8008710:	2300      	movs	r3, #0
}
 8008712:	4618      	mov	r0, r3
 8008714:	3710      	adds	r7, #16
 8008716:	46bd      	mov	sp, r7
 8008718:	bd80      	pop	{r7, pc}

0800871a <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800871a:	b580      	push	{r7, lr}
 800871c:	b084      	sub	sp, #16
 800871e:	af00      	add	r7, sp, #0
 8008720:	60f8      	str	r0, [r7, #12]
 8008722:	60b9      	str	r1, [r7, #8]
 8008724:	4613      	mov	r3, r2
 8008726:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008728:	88fb      	ldrh	r3, [r7, #6]
 800872a:	68ba      	ldr	r2, [r7, #8]
 800872c:	2100      	movs	r1, #0
 800872e:	68f8      	ldr	r0, [r7, #12]
 8008730:	f000 fcda 	bl	80090e8 <USBD_LL_Transmit>

  return USBD_OK;
 8008734:	2300      	movs	r3, #0
}
 8008736:	4618      	mov	r0, r3
 8008738:	3710      	adds	r7, #16
 800873a:	46bd      	mov	sp, r7
 800873c:	bd80      	pop	{r7, pc}

0800873e <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800873e:	b580      	push	{r7, lr}
 8008740:	b084      	sub	sp, #16
 8008742:	af00      	add	r7, sp, #0
 8008744:	60f8      	str	r0, [r7, #12]
 8008746:	60b9      	str	r1, [r7, #8]
 8008748:	4613      	mov	r3, r2
 800874a:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	2203      	movs	r2, #3
 8008750:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8008754:	88fa      	ldrh	r2, [r7, #6]
 8008756:	68fb      	ldr	r3, [r7, #12]
 8008758:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 800875c:	88fa      	ldrh	r2, [r7, #6]
 800875e:	68fb      	ldr	r3, [r7, #12]
 8008760:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008764:	88fb      	ldrh	r3, [r7, #6]
 8008766:	68ba      	ldr	r2, [r7, #8]
 8008768:	2100      	movs	r1, #0
 800876a:	68f8      	ldr	r0, [r7, #12]
 800876c:	f000 fcdf 	bl	800912e <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008770:	2300      	movs	r3, #0
}
 8008772:	4618      	mov	r0, r3
 8008774:	3710      	adds	r7, #16
 8008776:	46bd      	mov	sp, r7
 8008778:	bd80      	pop	{r7, pc}

0800877a <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800877a:	b580      	push	{r7, lr}
 800877c:	b084      	sub	sp, #16
 800877e:	af00      	add	r7, sp, #0
 8008780:	60f8      	str	r0, [r7, #12]
 8008782:	60b9      	str	r1, [r7, #8]
 8008784:	4613      	mov	r3, r2
 8008786:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008788:	88fb      	ldrh	r3, [r7, #6]
 800878a:	68ba      	ldr	r2, [r7, #8]
 800878c:	2100      	movs	r1, #0
 800878e:	68f8      	ldr	r0, [r7, #12]
 8008790:	f000 fccd 	bl	800912e <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008794:	2300      	movs	r3, #0
}
 8008796:	4618      	mov	r0, r3
 8008798:	3710      	adds	r7, #16
 800879a:	46bd      	mov	sp, r7
 800879c:	bd80      	pop	{r7, pc}

0800879e <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800879e:	b580      	push	{r7, lr}
 80087a0:	b082      	sub	sp, #8
 80087a2:	af00      	add	r7, sp, #0
 80087a4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	2204      	movs	r2, #4
 80087aa:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80087ae:	2300      	movs	r3, #0
 80087b0:	2200      	movs	r2, #0
 80087b2:	2100      	movs	r1, #0
 80087b4:	6878      	ldr	r0, [r7, #4]
 80087b6:	f000 fc97 	bl	80090e8 <USBD_LL_Transmit>

  return USBD_OK;
 80087ba:	2300      	movs	r3, #0
}
 80087bc:	4618      	mov	r0, r3
 80087be:	3708      	adds	r7, #8
 80087c0:	46bd      	mov	sp, r7
 80087c2:	bd80      	pop	{r7, pc}

080087c4 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80087c4:	b580      	push	{r7, lr}
 80087c6:	b082      	sub	sp, #8
 80087c8:	af00      	add	r7, sp, #0
 80087ca:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	2205      	movs	r2, #5
 80087d0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80087d4:	2300      	movs	r3, #0
 80087d6:	2200      	movs	r2, #0
 80087d8:	2100      	movs	r1, #0
 80087da:	6878      	ldr	r0, [r7, #4]
 80087dc:	f000 fca7 	bl	800912e <USBD_LL_PrepareReceive>

  return USBD_OK;
 80087e0:	2300      	movs	r3, #0
}
 80087e2:	4618      	mov	r0, r3
 80087e4:	3708      	adds	r7, #8
 80087e6:	46bd      	mov	sp, r7
 80087e8:	bd80      	pop	{r7, pc}
	...

080087ec <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80087ec:	b580      	push	{r7, lr}
 80087ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80087f0:	2200      	movs	r2, #0
 80087f2:	4912      	ldr	r1, [pc, #72]	; (800883c <MX_USB_DEVICE_Init+0x50>)
 80087f4:	4812      	ldr	r0, [pc, #72]	; (8008840 <MX_USB_DEVICE_Init+0x54>)
 80087f6:	f7fe ff26 	bl	8007646 <USBD_Init>
 80087fa:	4603      	mov	r3, r0
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	d001      	beq.n	8008804 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008800:	f7f9 f96a 	bl	8001ad8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8008804:	490f      	ldr	r1, [pc, #60]	; (8008844 <MX_USB_DEVICE_Init+0x58>)
 8008806:	480e      	ldr	r0, [pc, #56]	; (8008840 <MX_USB_DEVICE_Init+0x54>)
 8008808:	f7fe ff48 	bl	800769c <USBD_RegisterClass>
 800880c:	4603      	mov	r3, r0
 800880e:	2b00      	cmp	r3, #0
 8008810:	d001      	beq.n	8008816 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8008812:	f7f9 f961 	bl	8001ad8 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8008816:	490c      	ldr	r1, [pc, #48]	; (8008848 <MX_USB_DEVICE_Init+0x5c>)
 8008818:	4809      	ldr	r0, [pc, #36]	; (8008840 <MX_USB_DEVICE_Init+0x54>)
 800881a:	f7fe fe79 	bl	8007510 <USBD_CDC_RegisterInterface>
 800881e:	4603      	mov	r3, r0
 8008820:	2b00      	cmp	r3, #0
 8008822:	d001      	beq.n	8008828 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8008824:	f7f9 f958 	bl	8001ad8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8008828:	4805      	ldr	r0, [pc, #20]	; (8008840 <MX_USB_DEVICE_Init+0x54>)
 800882a:	f7fe ff50 	bl	80076ce <USBD_Start>
 800882e:	4603      	mov	r3, r0
 8008830:	2b00      	cmp	r3, #0
 8008832:	d001      	beq.n	8008838 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8008834:	f7f9 f950 	bl	8001ad8 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008838:	bf00      	nop
 800883a:	bd80      	pop	{r7, pc}
 800883c:	20000138 	.word	0x20000138
 8008840:	200004fc 	.word	0x200004fc
 8008844:	2000001c 	.word	0x2000001c
 8008848:	20000120 	.word	0x20000120

0800884c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800884c:	b580      	push	{r7, lr}
 800884e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8008850:	2200      	movs	r2, #0
 8008852:	4905      	ldr	r1, [pc, #20]	; (8008868 <CDC_Init_FS+0x1c>)
 8008854:	4805      	ldr	r0, [pc, #20]	; (800886c <CDC_Init_FS+0x20>)
 8008856:	f7fe fe71 	bl	800753c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800885a:	4905      	ldr	r1, [pc, #20]	; (8008870 <CDC_Init_FS+0x24>)
 800885c:	4803      	ldr	r0, [pc, #12]	; (800886c <CDC_Init_FS+0x20>)
 800885e:	f7fe fe86 	bl	800756e <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8008862:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8008864:	4618      	mov	r0, r3
 8008866:	bd80      	pop	{r7, pc}
 8008868:	20000fc0 	.word	0x20000fc0
 800886c:	200004fc 	.word	0x200004fc
 8008870:	200007c0 	.word	0x200007c0

08008874 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8008874:	b480      	push	{r7}
 8008876:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8008878:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800887a:	4618      	mov	r0, r3
 800887c:	46bd      	mov	sp, r7
 800887e:	bc80      	pop	{r7}
 8008880:	4770      	bx	lr
	...

08008884 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8008884:	b480      	push	{r7}
 8008886:	b083      	sub	sp, #12
 8008888:	af00      	add	r7, sp, #0
 800888a:	4603      	mov	r3, r0
 800888c:	6039      	str	r1, [r7, #0]
 800888e:	71fb      	strb	r3, [r7, #7]
 8008890:	4613      	mov	r3, r2
 8008892:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8008894:	79fb      	ldrb	r3, [r7, #7]
 8008896:	2b23      	cmp	r3, #35	; 0x23
 8008898:	d85c      	bhi.n	8008954 <CDC_Control_FS+0xd0>
 800889a:	a201      	add	r2, pc, #4	; (adr r2, 80088a0 <CDC_Control_FS+0x1c>)
 800889c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088a0:	08008955 	.word	0x08008955
 80088a4:	08008955 	.word	0x08008955
 80088a8:	08008955 	.word	0x08008955
 80088ac:	08008955 	.word	0x08008955
 80088b0:	08008955 	.word	0x08008955
 80088b4:	08008955 	.word	0x08008955
 80088b8:	08008955 	.word	0x08008955
 80088bc:	08008955 	.word	0x08008955
 80088c0:	08008955 	.word	0x08008955
 80088c4:	08008955 	.word	0x08008955
 80088c8:	08008955 	.word	0x08008955
 80088cc:	08008955 	.word	0x08008955
 80088d0:	08008955 	.word	0x08008955
 80088d4:	08008955 	.word	0x08008955
 80088d8:	08008955 	.word	0x08008955
 80088dc:	08008955 	.word	0x08008955
 80088e0:	08008955 	.word	0x08008955
 80088e4:	08008955 	.word	0x08008955
 80088e8:	08008955 	.word	0x08008955
 80088ec:	08008955 	.word	0x08008955
 80088f0:	08008955 	.word	0x08008955
 80088f4:	08008955 	.word	0x08008955
 80088f8:	08008955 	.word	0x08008955
 80088fc:	08008955 	.word	0x08008955
 8008900:	08008955 	.word	0x08008955
 8008904:	08008955 	.word	0x08008955
 8008908:	08008955 	.word	0x08008955
 800890c:	08008955 	.word	0x08008955
 8008910:	08008955 	.word	0x08008955
 8008914:	08008955 	.word	0x08008955
 8008918:	08008955 	.word	0x08008955
 800891c:	08008955 	.word	0x08008955
 8008920:	08008931 	.word	0x08008931
 8008924:	08008943 	.word	0x08008943
 8008928:	08008955 	.word	0x08008955
 800892c:	08008955 	.word	0x08008955
  /*******************************************************************************/
  static uint8_t lineCoding[7] // 115200bps, 1stop, no parity, 8bit
    = { 0x00, 0xC2, 0x01, 0x00, 0x00, 0x00, 0x08 };

    case CDC_SET_LINE_CODING:
      memcpy(lineCoding, pbuf, sizeof(lineCoding));
 8008930:	4b0c      	ldr	r3, [pc, #48]	; (8008964 <CDC_Control_FS+0xe0>)
 8008932:	683a      	ldr	r2, [r7, #0]
 8008934:	6810      	ldr	r0, [r2, #0]
 8008936:	6018      	str	r0, [r3, #0]
 8008938:	8891      	ldrh	r1, [r2, #4]
 800893a:	7992      	ldrb	r2, [r2, #6]
 800893c:	8099      	strh	r1, [r3, #4]
 800893e:	719a      	strb	r2, [r3, #6]
    break;
 8008940:	e009      	b.n	8008956 <CDC_Control_FS+0xd2>

    case CDC_GET_LINE_CODING:
      memcpy(pbuf, lineCoding, sizeof(lineCoding));
 8008942:	683b      	ldr	r3, [r7, #0]
 8008944:	4a07      	ldr	r2, [pc, #28]	; (8008964 <CDC_Control_FS+0xe0>)
 8008946:	6810      	ldr	r0, [r2, #0]
 8008948:	6018      	str	r0, [r3, #0]
 800894a:	8891      	ldrh	r1, [r2, #4]
 800894c:	7992      	ldrb	r2, [r2, #6]
 800894e:	8099      	strh	r1, [r3, #4]
 8008950:	719a      	strb	r2, [r3, #6]
    break;
 8008952:	e000      	b.n	8008956 <CDC_Control_FS+0xd2>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8008954:	bf00      	nop
  }

  return (USBD_OK);
 8008956:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8008958:	4618      	mov	r0, r3
 800895a:	370c      	adds	r7, #12
 800895c:	46bd      	mov	sp, r7
 800895e:	bc80      	pop	{r7}
 8008960:	4770      	bx	lr
 8008962:	bf00      	nop
 8008964:	20000130 	.word	0x20000130

08008968 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8008968:	b580      	push	{r7, lr}
 800896a:	b082      	sub	sp, #8
 800896c:	af00      	add	r7, sp, #0
 800896e:	6078      	str	r0, [r7, #4]
 8008970:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8008972:	6879      	ldr	r1, [r7, #4]
 8008974:	4805      	ldr	r0, [pc, #20]	; (800898c <CDC_Receive_FS+0x24>)
 8008976:	f7fe fdfa 	bl	800756e <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800897a:	4804      	ldr	r0, [pc, #16]	; (800898c <CDC_Receive_FS+0x24>)
 800897c:	f7fe fe39 	bl	80075f2 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8008980:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8008982:	4618      	mov	r0, r3
 8008984:	3708      	adds	r7, #8
 8008986:	46bd      	mov	sp, r7
 8008988:	bd80      	pop	{r7, pc}
 800898a:	bf00      	nop
 800898c:	200004fc 	.word	0x200004fc

08008990 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8008990:	b580      	push	{r7, lr}
 8008992:	b084      	sub	sp, #16
 8008994:	af00      	add	r7, sp, #0
 8008996:	6078      	str	r0, [r7, #4]
 8008998:	460b      	mov	r3, r1
 800899a:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800899c:	2300      	movs	r3, #0
 800899e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80089a0:	4b0d      	ldr	r3, [pc, #52]	; (80089d8 <CDC_Transmit_FS+0x48>)
 80089a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80089a6:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80089a8:	68bb      	ldr	r3, [r7, #8]
 80089aa:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	d001      	beq.n	80089b6 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 80089b2:	2301      	movs	r3, #1
 80089b4:	e00b      	b.n	80089ce <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80089b6:	887b      	ldrh	r3, [r7, #2]
 80089b8:	461a      	mov	r2, r3
 80089ba:	6879      	ldr	r1, [r7, #4]
 80089bc:	4806      	ldr	r0, [pc, #24]	; (80089d8 <CDC_Transmit_FS+0x48>)
 80089be:	f7fe fdbd 	bl	800753c <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80089c2:	4805      	ldr	r0, [pc, #20]	; (80089d8 <CDC_Transmit_FS+0x48>)
 80089c4:	f7fe fde6 	bl	8007594 <USBD_CDC_TransmitPacket>
 80089c8:	4603      	mov	r3, r0
 80089ca:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 80089cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80089ce:	4618      	mov	r0, r3
 80089d0:	3710      	adds	r7, #16
 80089d2:	46bd      	mov	sp, r7
 80089d4:	bd80      	pop	{r7, pc}
 80089d6:	bf00      	nop
 80089d8:	200004fc 	.word	0x200004fc

080089dc <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80089dc:	b480      	push	{r7}
 80089de:	b083      	sub	sp, #12
 80089e0:	af00      	add	r7, sp, #0
 80089e2:	4603      	mov	r3, r0
 80089e4:	6039      	str	r1, [r7, #0]
 80089e6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80089e8:	683b      	ldr	r3, [r7, #0]
 80089ea:	2212      	movs	r2, #18
 80089ec:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80089ee:	4b03      	ldr	r3, [pc, #12]	; (80089fc <USBD_FS_DeviceDescriptor+0x20>)
}
 80089f0:	4618      	mov	r0, r3
 80089f2:	370c      	adds	r7, #12
 80089f4:	46bd      	mov	sp, r7
 80089f6:	bc80      	pop	{r7}
 80089f8:	4770      	bx	lr
 80089fa:	bf00      	nop
 80089fc:	20000154 	.word	0x20000154

08008a00 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008a00:	b480      	push	{r7}
 8008a02:	b083      	sub	sp, #12
 8008a04:	af00      	add	r7, sp, #0
 8008a06:	4603      	mov	r3, r0
 8008a08:	6039      	str	r1, [r7, #0]
 8008a0a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008a0c:	683b      	ldr	r3, [r7, #0]
 8008a0e:	2204      	movs	r2, #4
 8008a10:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8008a12:	4b03      	ldr	r3, [pc, #12]	; (8008a20 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008a14:	4618      	mov	r0, r3
 8008a16:	370c      	adds	r7, #12
 8008a18:	46bd      	mov	sp, r7
 8008a1a:	bc80      	pop	{r7}
 8008a1c:	4770      	bx	lr
 8008a1e:	bf00      	nop
 8008a20:	20000168 	.word	0x20000168

08008a24 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008a24:	b580      	push	{r7, lr}
 8008a26:	b082      	sub	sp, #8
 8008a28:	af00      	add	r7, sp, #0
 8008a2a:	4603      	mov	r3, r0
 8008a2c:	6039      	str	r1, [r7, #0]
 8008a2e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008a30:	79fb      	ldrb	r3, [r7, #7]
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	d105      	bne.n	8008a42 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008a36:	683a      	ldr	r2, [r7, #0]
 8008a38:	4907      	ldr	r1, [pc, #28]	; (8008a58 <USBD_FS_ProductStrDescriptor+0x34>)
 8008a3a:	4808      	ldr	r0, [pc, #32]	; (8008a5c <USBD_FS_ProductStrDescriptor+0x38>)
 8008a3c:	f7ff fdf8 	bl	8008630 <USBD_GetString>
 8008a40:	e004      	b.n	8008a4c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008a42:	683a      	ldr	r2, [r7, #0]
 8008a44:	4904      	ldr	r1, [pc, #16]	; (8008a58 <USBD_FS_ProductStrDescriptor+0x34>)
 8008a46:	4805      	ldr	r0, [pc, #20]	; (8008a5c <USBD_FS_ProductStrDescriptor+0x38>)
 8008a48:	f7ff fdf2 	bl	8008630 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008a4c:	4b02      	ldr	r3, [pc, #8]	; (8008a58 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8008a4e:	4618      	mov	r0, r3
 8008a50:	3708      	adds	r7, #8
 8008a52:	46bd      	mov	sp, r7
 8008a54:	bd80      	pop	{r7, pc}
 8008a56:	bf00      	nop
 8008a58:	200017c0 	.word	0x200017c0
 8008a5c:	08009d68 	.word	0x08009d68

08008a60 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008a60:	b580      	push	{r7, lr}
 8008a62:	b082      	sub	sp, #8
 8008a64:	af00      	add	r7, sp, #0
 8008a66:	4603      	mov	r3, r0
 8008a68:	6039      	str	r1, [r7, #0]
 8008a6a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008a6c:	683a      	ldr	r2, [r7, #0]
 8008a6e:	4904      	ldr	r1, [pc, #16]	; (8008a80 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8008a70:	4804      	ldr	r0, [pc, #16]	; (8008a84 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8008a72:	f7ff fddd 	bl	8008630 <USBD_GetString>
  return USBD_StrDesc;
 8008a76:	4b02      	ldr	r3, [pc, #8]	; (8008a80 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8008a78:	4618      	mov	r0, r3
 8008a7a:	3708      	adds	r7, #8
 8008a7c:	46bd      	mov	sp, r7
 8008a7e:	bd80      	pop	{r7, pc}
 8008a80:	200017c0 	.word	0x200017c0
 8008a84:	08009d80 	.word	0x08009d80

08008a88 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008a88:	b580      	push	{r7, lr}
 8008a8a:	b082      	sub	sp, #8
 8008a8c:	af00      	add	r7, sp, #0
 8008a8e:	4603      	mov	r3, r0
 8008a90:	6039      	str	r1, [r7, #0]
 8008a92:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008a94:	683b      	ldr	r3, [r7, #0]
 8008a96:	221a      	movs	r2, #26
 8008a98:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8008a9a:	f000 f843 	bl	8008b24 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8008a9e:	4b02      	ldr	r3, [pc, #8]	; (8008aa8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008aa0:	4618      	mov	r0, r3
 8008aa2:	3708      	adds	r7, #8
 8008aa4:	46bd      	mov	sp, r7
 8008aa6:	bd80      	pop	{r7, pc}
 8008aa8:	2000016c 	.word	0x2000016c

08008aac <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008aac:	b580      	push	{r7, lr}
 8008aae:	b082      	sub	sp, #8
 8008ab0:	af00      	add	r7, sp, #0
 8008ab2:	4603      	mov	r3, r0
 8008ab4:	6039      	str	r1, [r7, #0]
 8008ab6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008ab8:	79fb      	ldrb	r3, [r7, #7]
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	d105      	bne.n	8008aca <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008abe:	683a      	ldr	r2, [r7, #0]
 8008ac0:	4907      	ldr	r1, [pc, #28]	; (8008ae0 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008ac2:	4808      	ldr	r0, [pc, #32]	; (8008ae4 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008ac4:	f7ff fdb4 	bl	8008630 <USBD_GetString>
 8008ac8:	e004      	b.n	8008ad4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008aca:	683a      	ldr	r2, [r7, #0]
 8008acc:	4904      	ldr	r1, [pc, #16]	; (8008ae0 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008ace:	4805      	ldr	r0, [pc, #20]	; (8008ae4 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008ad0:	f7ff fdae 	bl	8008630 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008ad4:	4b02      	ldr	r3, [pc, #8]	; (8008ae0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8008ad6:	4618      	mov	r0, r3
 8008ad8:	3708      	adds	r7, #8
 8008ada:	46bd      	mov	sp, r7
 8008adc:	bd80      	pop	{r7, pc}
 8008ade:	bf00      	nop
 8008ae0:	200017c0 	.word	0x200017c0
 8008ae4:	08009d94 	.word	0x08009d94

08008ae8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008ae8:	b580      	push	{r7, lr}
 8008aea:	b082      	sub	sp, #8
 8008aec:	af00      	add	r7, sp, #0
 8008aee:	4603      	mov	r3, r0
 8008af0:	6039      	str	r1, [r7, #0]
 8008af2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008af4:	79fb      	ldrb	r3, [r7, #7]
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d105      	bne.n	8008b06 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008afa:	683a      	ldr	r2, [r7, #0]
 8008afc:	4907      	ldr	r1, [pc, #28]	; (8008b1c <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008afe:	4808      	ldr	r0, [pc, #32]	; (8008b20 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008b00:	f7ff fd96 	bl	8008630 <USBD_GetString>
 8008b04:	e004      	b.n	8008b10 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008b06:	683a      	ldr	r2, [r7, #0]
 8008b08:	4904      	ldr	r1, [pc, #16]	; (8008b1c <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008b0a:	4805      	ldr	r0, [pc, #20]	; (8008b20 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008b0c:	f7ff fd90 	bl	8008630 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008b10:	4b02      	ldr	r3, [pc, #8]	; (8008b1c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8008b12:	4618      	mov	r0, r3
 8008b14:	3708      	adds	r7, #8
 8008b16:	46bd      	mov	sp, r7
 8008b18:	bd80      	pop	{r7, pc}
 8008b1a:	bf00      	nop
 8008b1c:	200017c0 	.word	0x200017c0
 8008b20:	08009da0 	.word	0x08009da0

08008b24 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008b24:	b580      	push	{r7, lr}
 8008b26:	b084      	sub	sp, #16
 8008b28:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8008b2a:	4b0f      	ldr	r3, [pc, #60]	; (8008b68 <Get_SerialNum+0x44>)
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008b30:	4b0e      	ldr	r3, [pc, #56]	; (8008b6c <Get_SerialNum+0x48>)
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8008b36:	4b0e      	ldr	r3, [pc, #56]	; (8008b70 <Get_SerialNum+0x4c>)
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008b3c:	68fa      	ldr	r2, [r7, #12]
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	4413      	add	r3, r2
 8008b42:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008b44:	68fb      	ldr	r3, [r7, #12]
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	d009      	beq.n	8008b5e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8008b4a:	2208      	movs	r2, #8
 8008b4c:	4909      	ldr	r1, [pc, #36]	; (8008b74 <Get_SerialNum+0x50>)
 8008b4e:	68f8      	ldr	r0, [r7, #12]
 8008b50:	f000 f814 	bl	8008b7c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008b54:	2204      	movs	r2, #4
 8008b56:	4908      	ldr	r1, [pc, #32]	; (8008b78 <Get_SerialNum+0x54>)
 8008b58:	68b8      	ldr	r0, [r7, #8]
 8008b5a:	f000 f80f 	bl	8008b7c <IntToUnicode>
  }
}
 8008b5e:	bf00      	nop
 8008b60:	3710      	adds	r7, #16
 8008b62:	46bd      	mov	sp, r7
 8008b64:	bd80      	pop	{r7, pc}
 8008b66:	bf00      	nop
 8008b68:	1fff7a10 	.word	0x1fff7a10
 8008b6c:	1fff7a14 	.word	0x1fff7a14
 8008b70:	1fff7a18 	.word	0x1fff7a18
 8008b74:	2000016e 	.word	0x2000016e
 8008b78:	2000017e 	.word	0x2000017e

08008b7c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008b7c:	b480      	push	{r7}
 8008b7e:	b087      	sub	sp, #28
 8008b80:	af00      	add	r7, sp, #0
 8008b82:	60f8      	str	r0, [r7, #12]
 8008b84:	60b9      	str	r1, [r7, #8]
 8008b86:	4613      	mov	r3, r2
 8008b88:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8008b8a:	2300      	movs	r3, #0
 8008b8c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8008b8e:	2300      	movs	r3, #0
 8008b90:	75fb      	strb	r3, [r7, #23]
 8008b92:	e027      	b.n	8008be4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008b94:	68fb      	ldr	r3, [r7, #12]
 8008b96:	0f1b      	lsrs	r3, r3, #28
 8008b98:	2b09      	cmp	r3, #9
 8008b9a:	d80b      	bhi.n	8008bb4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008b9c:	68fb      	ldr	r3, [r7, #12]
 8008b9e:	0f1b      	lsrs	r3, r3, #28
 8008ba0:	b2da      	uxtb	r2, r3
 8008ba2:	7dfb      	ldrb	r3, [r7, #23]
 8008ba4:	005b      	lsls	r3, r3, #1
 8008ba6:	4619      	mov	r1, r3
 8008ba8:	68bb      	ldr	r3, [r7, #8]
 8008baa:	440b      	add	r3, r1
 8008bac:	3230      	adds	r2, #48	; 0x30
 8008bae:	b2d2      	uxtb	r2, r2
 8008bb0:	701a      	strb	r2, [r3, #0]
 8008bb2:	e00a      	b.n	8008bca <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008bb4:	68fb      	ldr	r3, [r7, #12]
 8008bb6:	0f1b      	lsrs	r3, r3, #28
 8008bb8:	b2da      	uxtb	r2, r3
 8008bba:	7dfb      	ldrb	r3, [r7, #23]
 8008bbc:	005b      	lsls	r3, r3, #1
 8008bbe:	4619      	mov	r1, r3
 8008bc0:	68bb      	ldr	r3, [r7, #8]
 8008bc2:	440b      	add	r3, r1
 8008bc4:	3237      	adds	r2, #55	; 0x37
 8008bc6:	b2d2      	uxtb	r2, r2
 8008bc8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8008bca:	68fb      	ldr	r3, [r7, #12]
 8008bcc:	011b      	lsls	r3, r3, #4
 8008bce:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008bd0:	7dfb      	ldrb	r3, [r7, #23]
 8008bd2:	005b      	lsls	r3, r3, #1
 8008bd4:	3301      	adds	r3, #1
 8008bd6:	68ba      	ldr	r2, [r7, #8]
 8008bd8:	4413      	add	r3, r2
 8008bda:	2200      	movs	r2, #0
 8008bdc:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8008bde:	7dfb      	ldrb	r3, [r7, #23]
 8008be0:	3301      	adds	r3, #1
 8008be2:	75fb      	strb	r3, [r7, #23]
 8008be4:	7dfa      	ldrb	r2, [r7, #23]
 8008be6:	79fb      	ldrb	r3, [r7, #7]
 8008be8:	429a      	cmp	r2, r3
 8008bea:	d3d3      	bcc.n	8008b94 <IntToUnicode+0x18>
  }
}
 8008bec:	bf00      	nop
 8008bee:	bf00      	nop
 8008bf0:	371c      	adds	r7, #28
 8008bf2:	46bd      	mov	sp, r7
 8008bf4:	bc80      	pop	{r7}
 8008bf6:	4770      	bx	lr

08008bf8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008bf8:	b580      	push	{r7, lr}
 8008bfa:	b08a      	sub	sp, #40	; 0x28
 8008bfc:	af00      	add	r7, sp, #0
 8008bfe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008c00:	f107 0314 	add.w	r3, r7, #20
 8008c04:	2200      	movs	r2, #0
 8008c06:	601a      	str	r2, [r3, #0]
 8008c08:	605a      	str	r2, [r3, #4]
 8008c0a:	609a      	str	r2, [r3, #8]
 8008c0c:	60da      	str	r2, [r3, #12]
 8008c0e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008c18:	d13a      	bne.n	8008c90 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008c1a:	2300      	movs	r3, #0
 8008c1c:	613b      	str	r3, [r7, #16]
 8008c1e:	4b1e      	ldr	r3, [pc, #120]	; (8008c98 <HAL_PCD_MspInit+0xa0>)
 8008c20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c22:	4a1d      	ldr	r2, [pc, #116]	; (8008c98 <HAL_PCD_MspInit+0xa0>)
 8008c24:	f043 0301 	orr.w	r3, r3, #1
 8008c28:	6313      	str	r3, [r2, #48]	; 0x30
 8008c2a:	4b1b      	ldr	r3, [pc, #108]	; (8008c98 <HAL_PCD_MspInit+0xa0>)
 8008c2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c2e:	f003 0301 	and.w	r3, r3, #1
 8008c32:	613b      	str	r3, [r7, #16]
 8008c34:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8008c36:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8008c3a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008c3c:	2302      	movs	r3, #2
 8008c3e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008c40:	2300      	movs	r3, #0
 8008c42:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008c44:	2303      	movs	r3, #3
 8008c46:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8008c48:	230a      	movs	r3, #10
 8008c4a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008c4c:	f107 0314 	add.w	r3, r7, #20
 8008c50:	4619      	mov	r1, r3
 8008c52:	4812      	ldr	r0, [pc, #72]	; (8008c9c <HAL_PCD_MspInit+0xa4>)
 8008c54:	f7f9 ffd2 	bl	8002bfc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8008c58:	4b0f      	ldr	r3, [pc, #60]	; (8008c98 <HAL_PCD_MspInit+0xa0>)
 8008c5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c5c:	4a0e      	ldr	r2, [pc, #56]	; (8008c98 <HAL_PCD_MspInit+0xa0>)
 8008c5e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008c62:	6353      	str	r3, [r2, #52]	; 0x34
 8008c64:	2300      	movs	r3, #0
 8008c66:	60fb      	str	r3, [r7, #12]
 8008c68:	4b0b      	ldr	r3, [pc, #44]	; (8008c98 <HAL_PCD_MspInit+0xa0>)
 8008c6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008c6c:	4a0a      	ldr	r2, [pc, #40]	; (8008c98 <HAL_PCD_MspInit+0xa0>)
 8008c6e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008c72:	6453      	str	r3, [r2, #68]	; 0x44
 8008c74:	4b08      	ldr	r3, [pc, #32]	; (8008c98 <HAL_PCD_MspInit+0xa0>)
 8008c76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008c78:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008c7c:	60fb      	str	r3, [r7, #12]
 8008c7e:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8008c80:	2200      	movs	r2, #0
 8008c82:	2100      	movs	r1, #0
 8008c84:	2043      	movs	r0, #67	; 0x43
 8008c86:	f7f9 ff82 	bl	8002b8e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8008c8a:	2043      	movs	r0, #67	; 0x43
 8008c8c:	f7f9 ff9b 	bl	8002bc6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8008c90:	bf00      	nop
 8008c92:	3728      	adds	r7, #40	; 0x28
 8008c94:	46bd      	mov	sp, r7
 8008c96:	bd80      	pop	{r7, pc}
 8008c98:	40023800 	.word	0x40023800
 8008c9c:	40020000 	.word	0x40020000

08008ca0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008ca0:	b580      	push	{r7, lr}
 8008ca2:	b082      	sub	sp, #8
 8008ca4:	af00      	add	r7, sp, #0
 8008ca6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	f8d3 23fc 	ldr.w	r2, [r3, #1020]	; 0x3fc
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8008cb4:	4619      	mov	r1, r3
 8008cb6:	4610      	mov	r0, r2
 8008cb8:	f7fe fd51 	bl	800775e <USBD_LL_SetupStage>
}
 8008cbc:	bf00      	nop
 8008cbe:	3708      	adds	r7, #8
 8008cc0:	46bd      	mov	sp, r7
 8008cc2:	bd80      	pop	{r7, pc}

08008cc4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008cc4:	b580      	push	{r7, lr}
 8008cc6:	b082      	sub	sp, #8
 8008cc8:	af00      	add	r7, sp, #0
 8008cca:	6078      	str	r0, [r7, #4]
 8008ccc:	460b      	mov	r3, r1
 8008cce:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	f8d3 03fc 	ldr.w	r0, [r3, #1020]	; 0x3fc
 8008cd6:	78fa      	ldrb	r2, [r7, #3]
 8008cd8:	6879      	ldr	r1, [r7, #4]
 8008cda:	4613      	mov	r3, r2
 8008cdc:	00db      	lsls	r3, r3, #3
 8008cde:	1a9b      	subs	r3, r3, r2
 8008ce0:	009b      	lsls	r3, r3, #2
 8008ce2:	440b      	add	r3, r1
 8008ce4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8008ce8:	681a      	ldr	r2, [r3, #0]
 8008cea:	78fb      	ldrb	r3, [r7, #3]
 8008cec:	4619      	mov	r1, r3
 8008cee:	f7fe fd83 	bl	80077f8 <USBD_LL_DataOutStage>
}
 8008cf2:	bf00      	nop
 8008cf4:	3708      	adds	r7, #8
 8008cf6:	46bd      	mov	sp, r7
 8008cf8:	bd80      	pop	{r7, pc}

08008cfa <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008cfa:	b580      	push	{r7, lr}
 8008cfc:	b082      	sub	sp, #8
 8008cfe:	af00      	add	r7, sp, #0
 8008d00:	6078      	str	r0, [r7, #4]
 8008d02:	460b      	mov	r3, r1
 8008d04:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	f8d3 03fc 	ldr.w	r0, [r3, #1020]	; 0x3fc
 8008d0c:	78fa      	ldrb	r2, [r7, #3]
 8008d0e:	6879      	ldr	r1, [r7, #4]
 8008d10:	4613      	mov	r3, r2
 8008d12:	00db      	lsls	r3, r3, #3
 8008d14:	1a9b      	subs	r3, r3, r2
 8008d16:	009b      	lsls	r3, r3, #2
 8008d18:	440b      	add	r3, r1
 8008d1a:	3348      	adds	r3, #72	; 0x48
 8008d1c:	681a      	ldr	r2, [r3, #0]
 8008d1e:	78fb      	ldrb	r3, [r7, #3]
 8008d20:	4619      	mov	r1, r3
 8008d22:	f7fe fdda 	bl	80078da <USBD_LL_DataInStage>
}
 8008d26:	bf00      	nop
 8008d28:	3708      	adds	r7, #8
 8008d2a:	46bd      	mov	sp, r7
 8008d2c:	bd80      	pop	{r7, pc}

08008d2e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008d2e:	b580      	push	{r7, lr}
 8008d30:	b082      	sub	sp, #8
 8008d32:	af00      	add	r7, sp, #0
 8008d34:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 8008d3c:	4618      	mov	r0, r3
 8008d3e:	f7fe feea 	bl	8007b16 <USBD_LL_SOF>
}
 8008d42:	bf00      	nop
 8008d44:	3708      	adds	r7, #8
 8008d46:	46bd      	mov	sp, r7
 8008d48:	bd80      	pop	{r7, pc}

08008d4a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008d4a:	b580      	push	{r7, lr}
 8008d4c:	b084      	sub	sp, #16
 8008d4e:	af00      	add	r7, sp, #0
 8008d50:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8008d52:	2301      	movs	r3, #1
 8008d54:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	68db      	ldr	r3, [r3, #12]
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	d102      	bne.n	8008d64 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8008d5e:	2300      	movs	r3, #0
 8008d60:	73fb      	strb	r3, [r7, #15]
 8008d62:	e008      	b.n	8008d76 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	68db      	ldr	r3, [r3, #12]
 8008d68:	2b02      	cmp	r3, #2
 8008d6a:	d102      	bne.n	8008d72 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8008d6c:	2301      	movs	r3, #1
 8008d6e:	73fb      	strb	r3, [r7, #15]
 8008d70:	e001      	b.n	8008d76 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8008d72:	f7f8 feb1 	bl	8001ad8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 8008d7c:	7bfa      	ldrb	r2, [r7, #15]
 8008d7e:	4611      	mov	r1, r2
 8008d80:	4618      	mov	r0, r3
 8008d82:	f7fe fe90 	bl	8007aa6 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 8008d8c:	4618      	mov	r0, r3
 8008d8e:	f7fe fe49 	bl	8007a24 <USBD_LL_Reset>
}
 8008d92:	bf00      	nop
 8008d94:	3710      	adds	r7, #16
 8008d96:	46bd      	mov	sp, r7
 8008d98:	bd80      	pop	{r7, pc}
	...

08008d9c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008d9c:	b580      	push	{r7, lr}
 8008d9e:	b082      	sub	sp, #8
 8008da0:	af00      	add	r7, sp, #0
 8008da2:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 8008daa:	4618      	mov	r0, r3
 8008dac:	f7fe fe8a 	bl	8007ac4 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	687a      	ldr	r2, [r7, #4]
 8008dbc:	6812      	ldr	r2, [r2, #0]
 8008dbe:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008dc2:	f043 0301 	orr.w	r3, r3, #1
 8008dc6:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	6a1b      	ldr	r3, [r3, #32]
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	d005      	beq.n	8008ddc <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008dd0:	4b04      	ldr	r3, [pc, #16]	; (8008de4 <HAL_PCD_SuspendCallback+0x48>)
 8008dd2:	691b      	ldr	r3, [r3, #16]
 8008dd4:	4a03      	ldr	r2, [pc, #12]	; (8008de4 <HAL_PCD_SuspendCallback+0x48>)
 8008dd6:	f043 0306 	orr.w	r3, r3, #6
 8008dda:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008ddc:	bf00      	nop
 8008dde:	3708      	adds	r7, #8
 8008de0:	46bd      	mov	sp, r7
 8008de2:	bd80      	pop	{r7, pc}
 8008de4:	e000ed00 	.word	0xe000ed00

08008de8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008de8:	b580      	push	{r7, lr}
 8008dea:	b082      	sub	sp, #8
 8008dec:	af00      	add	r7, sp, #0
 8008dee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 8008df6:	4618      	mov	r0, r3
 8008df8:	f7fe fe78 	bl	8007aec <USBD_LL_Resume>
}
 8008dfc:	bf00      	nop
 8008dfe:	3708      	adds	r7, #8
 8008e00:	46bd      	mov	sp, r7
 8008e02:	bd80      	pop	{r7, pc}

08008e04 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008e04:	b580      	push	{r7, lr}
 8008e06:	b082      	sub	sp, #8
 8008e08:	af00      	add	r7, sp, #0
 8008e0a:	6078      	str	r0, [r7, #4]
 8008e0c:	460b      	mov	r3, r1
 8008e0e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 8008e16:	78fa      	ldrb	r2, [r7, #3]
 8008e18:	4611      	mov	r1, r2
 8008e1a:	4618      	mov	r0, r3
 8008e1c:	f7fe fea1 	bl	8007b62 <USBD_LL_IsoOUTIncomplete>
}
 8008e20:	bf00      	nop
 8008e22:	3708      	adds	r7, #8
 8008e24:	46bd      	mov	sp, r7
 8008e26:	bd80      	pop	{r7, pc}

08008e28 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008e28:	b580      	push	{r7, lr}
 8008e2a:	b082      	sub	sp, #8
 8008e2c:	af00      	add	r7, sp, #0
 8008e2e:	6078      	str	r0, [r7, #4]
 8008e30:	460b      	mov	r3, r1
 8008e32:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 8008e3a:	78fa      	ldrb	r2, [r7, #3]
 8008e3c:	4611      	mov	r1, r2
 8008e3e:	4618      	mov	r0, r3
 8008e40:	f7fe fe83 	bl	8007b4a <USBD_LL_IsoINIncomplete>
}
 8008e44:	bf00      	nop
 8008e46:	3708      	adds	r7, #8
 8008e48:	46bd      	mov	sp, r7
 8008e4a:	bd80      	pop	{r7, pc}

08008e4c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008e4c:	b580      	push	{r7, lr}
 8008e4e:	b082      	sub	sp, #8
 8008e50:	af00      	add	r7, sp, #0
 8008e52:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 8008e5a:	4618      	mov	r0, r3
 8008e5c:	f7fe fe8d 	bl	8007b7a <USBD_LL_DevConnected>
}
 8008e60:	bf00      	nop
 8008e62:	3708      	adds	r7, #8
 8008e64:	46bd      	mov	sp, r7
 8008e66:	bd80      	pop	{r7, pc}

08008e68 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008e68:	b580      	push	{r7, lr}
 8008e6a:	b082      	sub	sp, #8
 8008e6c:	af00      	add	r7, sp, #0
 8008e6e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 8008e76:	4618      	mov	r0, r3
 8008e78:	f7fe fe89 	bl	8007b8e <USBD_LL_DevDisconnected>
}
 8008e7c:	bf00      	nop
 8008e7e:	3708      	adds	r7, #8
 8008e80:	46bd      	mov	sp, r7
 8008e82:	bd80      	pop	{r7, pc}

08008e84 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008e84:	b580      	push	{r7, lr}
 8008e86:	b082      	sub	sp, #8
 8008e88:	af00      	add	r7, sp, #0
 8008e8a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	781b      	ldrb	r3, [r3, #0]
 8008e90:	2b00      	cmp	r3, #0
 8008e92:	d139      	bne.n	8008f08 <USBD_LL_Init+0x84>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8008e94:	4a1f      	ldr	r2, [pc, #124]	; (8008f14 <USBD_LL_Init+0x90>)
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	f8c2 33fc 	str.w	r3, [r2, #1020]	; 0x3fc
  pdev->pData = &hpcd_USB_OTG_FS;
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	4a1d      	ldr	r2, [pc, #116]	; (8008f14 <USBD_LL_Init+0x90>)
 8008ea0:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008ea4:	4b1b      	ldr	r3, [pc, #108]	; (8008f14 <USBD_LL_Init+0x90>)
 8008ea6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8008eaa:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8008eac:	4b19      	ldr	r3, [pc, #100]	; (8008f14 <USBD_LL_Init+0x90>)
 8008eae:	2204      	movs	r2, #4
 8008eb0:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8008eb2:	4b18      	ldr	r3, [pc, #96]	; (8008f14 <USBD_LL_Init+0x90>)
 8008eb4:	2202      	movs	r2, #2
 8008eb6:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008eb8:	4b16      	ldr	r3, [pc, #88]	; (8008f14 <USBD_LL_Init+0x90>)
 8008eba:	2200      	movs	r2, #0
 8008ebc:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8008ebe:	4b15      	ldr	r3, [pc, #84]	; (8008f14 <USBD_LL_Init+0x90>)
 8008ec0:	2202      	movs	r2, #2
 8008ec2:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8008ec4:	4b13      	ldr	r3, [pc, #76]	; (8008f14 <USBD_LL_Init+0x90>)
 8008ec6:	2200      	movs	r2, #0
 8008ec8:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8008eca:	4b12      	ldr	r3, [pc, #72]	; (8008f14 <USBD_LL_Init+0x90>)
 8008ecc:	2200      	movs	r2, #0
 8008ece:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8008ed0:	4b10      	ldr	r3, [pc, #64]	; (8008f14 <USBD_LL_Init+0x90>)
 8008ed2:	2200      	movs	r2, #0
 8008ed4:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8008ed6:	4b0f      	ldr	r3, [pc, #60]	; (8008f14 <USBD_LL_Init+0x90>)
 8008ed8:	2200      	movs	r2, #0
 8008eda:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8008edc:	480d      	ldr	r0, [pc, #52]	; (8008f14 <USBD_LL_Init+0x90>)
 8008ede:	f7fa fcbf 	bl	8003860 <HAL_PCD_Init>
 8008ee2:	4603      	mov	r3, r0
 8008ee4:	2b00      	cmp	r3, #0
 8008ee6:	d001      	beq.n	8008eec <USBD_LL_Init+0x68>
  {
    Error_Handler( );
 8008ee8:	f7f8 fdf6 	bl	8001ad8 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8008eec:	2180      	movs	r1, #128	; 0x80
 8008eee:	4809      	ldr	r0, [pc, #36]	; (8008f14 <USBD_LL_Init+0x90>)
 8008ef0:	f7fb fdfc 	bl	8004aec <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8008ef4:	2240      	movs	r2, #64	; 0x40
 8008ef6:	2100      	movs	r1, #0
 8008ef8:	4806      	ldr	r0, [pc, #24]	; (8008f14 <USBD_LL_Init+0x90>)
 8008efa:	f7fb fdb1 	bl	8004a60 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8008efe:	2280      	movs	r2, #128	; 0x80
 8008f00:	2101      	movs	r1, #1
 8008f02:	4804      	ldr	r0, [pc, #16]	; (8008f14 <USBD_LL_Init+0x90>)
 8008f04:	f7fb fdac 	bl	8004a60 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8008f08:	2300      	movs	r3, #0
}
 8008f0a:	4618      	mov	r0, r3
 8008f0c:	3708      	adds	r7, #8
 8008f0e:	46bd      	mov	sp, r7
 8008f10:	bd80      	pop	{r7, pc}
 8008f12:	bf00      	nop
 8008f14:	200019c0 	.word	0x200019c0

08008f18 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008f18:	b580      	push	{r7, lr}
 8008f1a:	b084      	sub	sp, #16
 8008f1c:	af00      	add	r7, sp, #0
 8008f1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008f20:	2300      	movs	r3, #0
 8008f22:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008f24:	2300      	movs	r3, #0
 8008f26:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008f2e:	4618      	mov	r0, r3
 8008f30:	f7fa fdb3 	bl	8003a9a <HAL_PCD_Start>
 8008f34:	4603      	mov	r3, r0
 8008f36:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008f38:	7bfb      	ldrb	r3, [r7, #15]
 8008f3a:	4618      	mov	r0, r3
 8008f3c:	f000 f92e 	bl	800919c <USBD_Get_USB_Status>
 8008f40:	4603      	mov	r3, r0
 8008f42:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008f44:	7bbb      	ldrb	r3, [r7, #14]
}
 8008f46:	4618      	mov	r0, r3
 8008f48:	3710      	adds	r7, #16
 8008f4a:	46bd      	mov	sp, r7
 8008f4c:	bd80      	pop	{r7, pc}

08008f4e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8008f4e:	b580      	push	{r7, lr}
 8008f50:	b084      	sub	sp, #16
 8008f52:	af00      	add	r7, sp, #0
 8008f54:	6078      	str	r0, [r7, #4]
 8008f56:	4608      	mov	r0, r1
 8008f58:	4611      	mov	r1, r2
 8008f5a:	461a      	mov	r2, r3
 8008f5c:	4603      	mov	r3, r0
 8008f5e:	70fb      	strb	r3, [r7, #3]
 8008f60:	460b      	mov	r3, r1
 8008f62:	70bb      	strb	r3, [r7, #2]
 8008f64:	4613      	mov	r3, r2
 8008f66:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008f68:	2300      	movs	r3, #0
 8008f6a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008f6c:	2300      	movs	r3, #0
 8008f6e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008f76:	78bb      	ldrb	r3, [r7, #2]
 8008f78:	883a      	ldrh	r2, [r7, #0]
 8008f7a:	78f9      	ldrb	r1, [r7, #3]
 8008f7c:	f7fb f978 	bl	8004270 <HAL_PCD_EP_Open>
 8008f80:	4603      	mov	r3, r0
 8008f82:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008f84:	7bfb      	ldrb	r3, [r7, #15]
 8008f86:	4618      	mov	r0, r3
 8008f88:	f000 f908 	bl	800919c <USBD_Get_USB_Status>
 8008f8c:	4603      	mov	r3, r0
 8008f8e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008f90:	7bbb      	ldrb	r3, [r7, #14]
}
 8008f92:	4618      	mov	r0, r3
 8008f94:	3710      	adds	r7, #16
 8008f96:	46bd      	mov	sp, r7
 8008f98:	bd80      	pop	{r7, pc}

08008f9a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008f9a:	b580      	push	{r7, lr}
 8008f9c:	b084      	sub	sp, #16
 8008f9e:	af00      	add	r7, sp, #0
 8008fa0:	6078      	str	r0, [r7, #4]
 8008fa2:	460b      	mov	r3, r1
 8008fa4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008fa6:	2300      	movs	r3, #0
 8008fa8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008faa:	2300      	movs	r3, #0
 8008fac:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008fb4:	78fa      	ldrb	r2, [r7, #3]
 8008fb6:	4611      	mov	r1, r2
 8008fb8:	4618      	mov	r0, r3
 8008fba:	f7fb f9c1 	bl	8004340 <HAL_PCD_EP_Close>
 8008fbe:	4603      	mov	r3, r0
 8008fc0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008fc2:	7bfb      	ldrb	r3, [r7, #15]
 8008fc4:	4618      	mov	r0, r3
 8008fc6:	f000 f8e9 	bl	800919c <USBD_Get_USB_Status>
 8008fca:	4603      	mov	r3, r0
 8008fcc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008fce:	7bbb      	ldrb	r3, [r7, #14]
}
 8008fd0:	4618      	mov	r0, r3
 8008fd2:	3710      	adds	r7, #16
 8008fd4:	46bd      	mov	sp, r7
 8008fd6:	bd80      	pop	{r7, pc}

08008fd8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008fd8:	b580      	push	{r7, lr}
 8008fda:	b084      	sub	sp, #16
 8008fdc:	af00      	add	r7, sp, #0
 8008fde:	6078      	str	r0, [r7, #4]
 8008fe0:	460b      	mov	r3, r1
 8008fe2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008fe4:	2300      	movs	r3, #0
 8008fe6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008fe8:	2300      	movs	r3, #0
 8008fea:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008ff2:	78fa      	ldrb	r2, [r7, #3]
 8008ff4:	4611      	mov	r1, r2
 8008ff6:	4618      	mov	r0, r3
 8008ff8:	f7fb fa98 	bl	800452c <HAL_PCD_EP_SetStall>
 8008ffc:	4603      	mov	r3, r0
 8008ffe:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009000:	7bfb      	ldrb	r3, [r7, #15]
 8009002:	4618      	mov	r0, r3
 8009004:	f000 f8ca 	bl	800919c <USBD_Get_USB_Status>
 8009008:	4603      	mov	r3, r0
 800900a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800900c:	7bbb      	ldrb	r3, [r7, #14]
}
 800900e:	4618      	mov	r0, r3
 8009010:	3710      	adds	r7, #16
 8009012:	46bd      	mov	sp, r7
 8009014:	bd80      	pop	{r7, pc}

08009016 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009016:	b580      	push	{r7, lr}
 8009018:	b084      	sub	sp, #16
 800901a:	af00      	add	r7, sp, #0
 800901c:	6078      	str	r0, [r7, #4]
 800901e:	460b      	mov	r3, r1
 8009020:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009022:	2300      	movs	r3, #0
 8009024:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009026:	2300      	movs	r3, #0
 8009028:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009030:	78fa      	ldrb	r2, [r7, #3]
 8009032:	4611      	mov	r1, r2
 8009034:	4618      	mov	r0, r3
 8009036:	f7fb fadd 	bl	80045f4 <HAL_PCD_EP_ClrStall>
 800903a:	4603      	mov	r3, r0
 800903c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800903e:	7bfb      	ldrb	r3, [r7, #15]
 8009040:	4618      	mov	r0, r3
 8009042:	f000 f8ab 	bl	800919c <USBD_Get_USB_Status>
 8009046:	4603      	mov	r3, r0
 8009048:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800904a:	7bbb      	ldrb	r3, [r7, #14]
}
 800904c:	4618      	mov	r0, r3
 800904e:	3710      	adds	r7, #16
 8009050:	46bd      	mov	sp, r7
 8009052:	bd80      	pop	{r7, pc}

08009054 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009054:	b480      	push	{r7}
 8009056:	b085      	sub	sp, #20
 8009058:	af00      	add	r7, sp, #0
 800905a:	6078      	str	r0, [r7, #4]
 800905c:	460b      	mov	r3, r1
 800905e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009066:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8009068:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800906c:	2b00      	cmp	r3, #0
 800906e:	da0b      	bge.n	8009088 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009070:	78fb      	ldrb	r3, [r7, #3]
 8009072:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009076:	68f9      	ldr	r1, [r7, #12]
 8009078:	4613      	mov	r3, r2
 800907a:	00db      	lsls	r3, r3, #3
 800907c:	1a9b      	subs	r3, r3, r2
 800907e:	009b      	lsls	r3, r3, #2
 8009080:	440b      	add	r3, r1
 8009082:	333e      	adds	r3, #62	; 0x3e
 8009084:	781b      	ldrb	r3, [r3, #0]
 8009086:	e00b      	b.n	80090a0 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8009088:	78fb      	ldrb	r3, [r7, #3]
 800908a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800908e:	68f9      	ldr	r1, [r7, #12]
 8009090:	4613      	mov	r3, r2
 8009092:	00db      	lsls	r3, r3, #3
 8009094:	1a9b      	subs	r3, r3, r2
 8009096:	009b      	lsls	r3, r3, #2
 8009098:	440b      	add	r3, r1
 800909a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800909e:	781b      	ldrb	r3, [r3, #0]
  }
}
 80090a0:	4618      	mov	r0, r3
 80090a2:	3714      	adds	r7, #20
 80090a4:	46bd      	mov	sp, r7
 80090a6:	bc80      	pop	{r7}
 80090a8:	4770      	bx	lr

080090aa <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80090aa:	b580      	push	{r7, lr}
 80090ac:	b084      	sub	sp, #16
 80090ae:	af00      	add	r7, sp, #0
 80090b0:	6078      	str	r0, [r7, #4]
 80090b2:	460b      	mov	r3, r1
 80090b4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80090b6:	2300      	movs	r3, #0
 80090b8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80090ba:	2300      	movs	r3, #0
 80090bc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80090c4:	78fa      	ldrb	r2, [r7, #3]
 80090c6:	4611      	mov	r1, r2
 80090c8:	4618      	mov	r0, r3
 80090ca:	f7fb f8ac 	bl	8004226 <HAL_PCD_SetAddress>
 80090ce:	4603      	mov	r3, r0
 80090d0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80090d2:	7bfb      	ldrb	r3, [r7, #15]
 80090d4:	4618      	mov	r0, r3
 80090d6:	f000 f861 	bl	800919c <USBD_Get_USB_Status>
 80090da:	4603      	mov	r3, r0
 80090dc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80090de:	7bbb      	ldrb	r3, [r7, #14]
}
 80090e0:	4618      	mov	r0, r3
 80090e2:	3710      	adds	r7, #16
 80090e4:	46bd      	mov	sp, r7
 80090e6:	bd80      	pop	{r7, pc}

080090e8 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80090e8:	b580      	push	{r7, lr}
 80090ea:	b086      	sub	sp, #24
 80090ec:	af00      	add	r7, sp, #0
 80090ee:	60f8      	str	r0, [r7, #12]
 80090f0:	607a      	str	r2, [r7, #4]
 80090f2:	461a      	mov	r2, r3
 80090f4:	460b      	mov	r3, r1
 80090f6:	72fb      	strb	r3, [r7, #11]
 80090f8:	4613      	mov	r3, r2
 80090fa:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80090fc:	2300      	movs	r3, #0
 80090fe:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009100:	2300      	movs	r3, #0
 8009102:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8009104:	68fb      	ldr	r3, [r7, #12]
 8009106:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800910a:	893b      	ldrh	r3, [r7, #8]
 800910c:	7af9      	ldrb	r1, [r7, #11]
 800910e:	687a      	ldr	r2, [r7, #4]
 8009110:	f7fb f9c2 	bl	8004498 <HAL_PCD_EP_Transmit>
 8009114:	4603      	mov	r3, r0
 8009116:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009118:	7dfb      	ldrb	r3, [r7, #23]
 800911a:	4618      	mov	r0, r3
 800911c:	f000 f83e 	bl	800919c <USBD_Get_USB_Status>
 8009120:	4603      	mov	r3, r0
 8009122:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009124:	7dbb      	ldrb	r3, [r7, #22]
}
 8009126:	4618      	mov	r0, r3
 8009128:	3718      	adds	r7, #24
 800912a:	46bd      	mov	sp, r7
 800912c:	bd80      	pop	{r7, pc}

0800912e <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800912e:	b580      	push	{r7, lr}
 8009130:	b086      	sub	sp, #24
 8009132:	af00      	add	r7, sp, #0
 8009134:	60f8      	str	r0, [r7, #12]
 8009136:	607a      	str	r2, [r7, #4]
 8009138:	461a      	mov	r2, r3
 800913a:	460b      	mov	r3, r1
 800913c:	72fb      	strb	r3, [r7, #11]
 800913e:	4613      	mov	r3, r2
 8009140:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009142:	2300      	movs	r3, #0
 8009144:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009146:	2300      	movs	r3, #0
 8009148:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800914a:	68fb      	ldr	r3, [r7, #12]
 800914c:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009150:	893b      	ldrh	r3, [r7, #8]
 8009152:	7af9      	ldrb	r1, [r7, #11]
 8009154:	687a      	ldr	r2, [r7, #4]
 8009156:	f7fb f93d 	bl	80043d4 <HAL_PCD_EP_Receive>
 800915a:	4603      	mov	r3, r0
 800915c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800915e:	7dfb      	ldrb	r3, [r7, #23]
 8009160:	4618      	mov	r0, r3
 8009162:	f000 f81b 	bl	800919c <USBD_Get_USB_Status>
 8009166:	4603      	mov	r3, r0
 8009168:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800916a:	7dbb      	ldrb	r3, [r7, #22]
}
 800916c:	4618      	mov	r0, r3
 800916e:	3718      	adds	r7, #24
 8009170:	46bd      	mov	sp, r7
 8009172:	bd80      	pop	{r7, pc}

08009174 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009174:	b580      	push	{r7, lr}
 8009176:	b082      	sub	sp, #8
 8009178:	af00      	add	r7, sp, #0
 800917a:	6078      	str	r0, [r7, #4]
 800917c:	460b      	mov	r3, r1
 800917e:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009186:	78fa      	ldrb	r2, [r7, #3]
 8009188:	4611      	mov	r1, r2
 800918a:	4618      	mov	r0, r3
 800918c:	f7fb f96d 	bl	800446a <HAL_PCD_EP_GetRxCount>
 8009190:	4603      	mov	r3, r0
}
 8009192:	4618      	mov	r0, r3
 8009194:	3708      	adds	r7, #8
 8009196:	46bd      	mov	sp, r7
 8009198:	bd80      	pop	{r7, pc}
	...

0800919c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800919c:	b480      	push	{r7}
 800919e:	b085      	sub	sp, #20
 80091a0:	af00      	add	r7, sp, #0
 80091a2:	4603      	mov	r3, r0
 80091a4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80091a6:	2300      	movs	r3, #0
 80091a8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80091aa:	79fb      	ldrb	r3, [r7, #7]
 80091ac:	2b03      	cmp	r3, #3
 80091ae:	d817      	bhi.n	80091e0 <USBD_Get_USB_Status+0x44>
 80091b0:	a201      	add	r2, pc, #4	; (adr r2, 80091b8 <USBD_Get_USB_Status+0x1c>)
 80091b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091b6:	bf00      	nop
 80091b8:	080091c9 	.word	0x080091c9
 80091bc:	080091cf 	.word	0x080091cf
 80091c0:	080091d5 	.word	0x080091d5
 80091c4:	080091db 	.word	0x080091db
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80091c8:	2300      	movs	r3, #0
 80091ca:	73fb      	strb	r3, [r7, #15]
    break;
 80091cc:	e00b      	b.n	80091e6 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80091ce:	2302      	movs	r3, #2
 80091d0:	73fb      	strb	r3, [r7, #15]
    break;
 80091d2:	e008      	b.n	80091e6 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80091d4:	2301      	movs	r3, #1
 80091d6:	73fb      	strb	r3, [r7, #15]
    break;
 80091d8:	e005      	b.n	80091e6 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80091da:	2302      	movs	r3, #2
 80091dc:	73fb      	strb	r3, [r7, #15]
    break;
 80091de:	e002      	b.n	80091e6 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80091e0:	2302      	movs	r3, #2
 80091e2:	73fb      	strb	r3, [r7, #15]
    break;
 80091e4:	bf00      	nop
  }
  return usb_status;
 80091e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80091e8:	4618      	mov	r0, r3
 80091ea:	3714      	adds	r7, #20
 80091ec:	46bd      	mov	sp, r7
 80091ee:	bc80      	pop	{r7}
 80091f0:	4770      	bx	lr
 80091f2:	bf00      	nop

080091f4 <atanf>:
 80091f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80091f8:	f020 4500 	bic.w	r5, r0, #2147483648	; 0x80000000
 80091fc:	f1b5 4fa1 	cmp.w	r5, #1350565888	; 0x50800000
 8009200:	4604      	mov	r4, r0
 8009202:	4680      	mov	r8, r0
 8009204:	db0e      	blt.n	8009224 <atanf+0x30>
 8009206:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 800920a:	dd04      	ble.n	8009216 <atanf+0x22>
 800920c:	4601      	mov	r1, r0
 800920e:	f7f7 fbcf 	bl	80009b0 <__addsf3>
 8009212:	4604      	mov	r4, r0
 8009214:	e003      	b.n	800921e <atanf+0x2a>
 8009216:	2800      	cmp	r0, #0
 8009218:	f300 80ce 	bgt.w	80093b8 <atanf+0x1c4>
 800921c:	4c67      	ldr	r4, [pc, #412]	; (80093bc <atanf+0x1c8>)
 800921e:	4620      	mov	r0, r4
 8009220:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009224:	4b66      	ldr	r3, [pc, #408]	; (80093c0 <atanf+0x1cc>)
 8009226:	429d      	cmp	r5, r3
 8009228:	dc0e      	bgt.n	8009248 <atanf+0x54>
 800922a:	f1b5 5f44 	cmp.w	r5, #822083584	; 0x31000000
 800922e:	da08      	bge.n	8009242 <atanf+0x4e>
 8009230:	4964      	ldr	r1, [pc, #400]	; (80093c4 <atanf+0x1d0>)
 8009232:	f7f7 fbbd 	bl	80009b0 <__addsf3>
 8009236:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800923a:	f7f7 fe7d 	bl	8000f38 <__aeabi_fcmpgt>
 800923e:	2800      	cmp	r0, #0
 8009240:	d1ed      	bne.n	800921e <atanf+0x2a>
 8009242:	f04f 36ff 	mov.w	r6, #4294967295
 8009246:	e01c      	b.n	8009282 <atanf+0x8e>
 8009248:	f000 f8e0 	bl	800940c <fabsf>
 800924c:	4b5e      	ldr	r3, [pc, #376]	; (80093c8 <atanf+0x1d4>)
 800924e:	4604      	mov	r4, r0
 8009250:	429d      	cmp	r5, r3
 8009252:	dc7c      	bgt.n	800934e <atanf+0x15a>
 8009254:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 8009258:	429d      	cmp	r5, r3
 800925a:	dc67      	bgt.n	800932c <atanf+0x138>
 800925c:	4601      	mov	r1, r0
 800925e:	f7f7 fba7 	bl	80009b0 <__addsf3>
 8009262:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8009266:	f7f7 fba1 	bl	80009ac <__aeabi_fsub>
 800926a:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800926e:	4605      	mov	r5, r0
 8009270:	4620      	mov	r0, r4
 8009272:	f7f7 fb9d 	bl	80009b0 <__addsf3>
 8009276:	4601      	mov	r1, r0
 8009278:	4628      	mov	r0, r5
 800927a:	f7f7 fd55 	bl	8000d28 <__aeabi_fdiv>
 800927e:	2600      	movs	r6, #0
 8009280:	4604      	mov	r4, r0
 8009282:	4621      	mov	r1, r4
 8009284:	4620      	mov	r0, r4
 8009286:	f7f7 fc9b 	bl	8000bc0 <__aeabi_fmul>
 800928a:	4601      	mov	r1, r0
 800928c:	4607      	mov	r7, r0
 800928e:	f7f7 fc97 	bl	8000bc0 <__aeabi_fmul>
 8009292:	4605      	mov	r5, r0
 8009294:	494d      	ldr	r1, [pc, #308]	; (80093cc <atanf+0x1d8>)
 8009296:	f7f7 fc93 	bl	8000bc0 <__aeabi_fmul>
 800929a:	494d      	ldr	r1, [pc, #308]	; (80093d0 <atanf+0x1dc>)
 800929c:	f7f7 fb88 	bl	80009b0 <__addsf3>
 80092a0:	4629      	mov	r1, r5
 80092a2:	f7f7 fc8d 	bl	8000bc0 <__aeabi_fmul>
 80092a6:	494b      	ldr	r1, [pc, #300]	; (80093d4 <atanf+0x1e0>)
 80092a8:	f7f7 fb82 	bl	80009b0 <__addsf3>
 80092ac:	4629      	mov	r1, r5
 80092ae:	f7f7 fc87 	bl	8000bc0 <__aeabi_fmul>
 80092b2:	4949      	ldr	r1, [pc, #292]	; (80093d8 <atanf+0x1e4>)
 80092b4:	f7f7 fb7c 	bl	80009b0 <__addsf3>
 80092b8:	4629      	mov	r1, r5
 80092ba:	f7f7 fc81 	bl	8000bc0 <__aeabi_fmul>
 80092be:	4947      	ldr	r1, [pc, #284]	; (80093dc <atanf+0x1e8>)
 80092c0:	f7f7 fb76 	bl	80009b0 <__addsf3>
 80092c4:	4629      	mov	r1, r5
 80092c6:	f7f7 fc7b 	bl	8000bc0 <__aeabi_fmul>
 80092ca:	4945      	ldr	r1, [pc, #276]	; (80093e0 <atanf+0x1ec>)
 80092cc:	f7f7 fb70 	bl	80009b0 <__addsf3>
 80092d0:	4639      	mov	r1, r7
 80092d2:	f7f7 fc75 	bl	8000bc0 <__aeabi_fmul>
 80092d6:	4943      	ldr	r1, [pc, #268]	; (80093e4 <atanf+0x1f0>)
 80092d8:	4607      	mov	r7, r0
 80092da:	4628      	mov	r0, r5
 80092dc:	f7f7 fc70 	bl	8000bc0 <__aeabi_fmul>
 80092e0:	4941      	ldr	r1, [pc, #260]	; (80093e8 <atanf+0x1f4>)
 80092e2:	f7f7 fb63 	bl	80009ac <__aeabi_fsub>
 80092e6:	4629      	mov	r1, r5
 80092e8:	f7f7 fc6a 	bl	8000bc0 <__aeabi_fmul>
 80092ec:	493f      	ldr	r1, [pc, #252]	; (80093ec <atanf+0x1f8>)
 80092ee:	f7f7 fb5d 	bl	80009ac <__aeabi_fsub>
 80092f2:	4629      	mov	r1, r5
 80092f4:	f7f7 fc64 	bl	8000bc0 <__aeabi_fmul>
 80092f8:	493d      	ldr	r1, [pc, #244]	; (80093f0 <atanf+0x1fc>)
 80092fa:	f7f7 fb57 	bl	80009ac <__aeabi_fsub>
 80092fe:	4629      	mov	r1, r5
 8009300:	f7f7 fc5e 	bl	8000bc0 <__aeabi_fmul>
 8009304:	493b      	ldr	r1, [pc, #236]	; (80093f4 <atanf+0x200>)
 8009306:	f7f7 fb51 	bl	80009ac <__aeabi_fsub>
 800930a:	4629      	mov	r1, r5
 800930c:	f7f7 fc58 	bl	8000bc0 <__aeabi_fmul>
 8009310:	4601      	mov	r1, r0
 8009312:	4638      	mov	r0, r7
 8009314:	f7f7 fb4c 	bl	80009b0 <__addsf3>
 8009318:	4621      	mov	r1, r4
 800931a:	f7f7 fc51 	bl	8000bc0 <__aeabi_fmul>
 800931e:	1c73      	adds	r3, r6, #1
 8009320:	4601      	mov	r1, r0
 8009322:	d133      	bne.n	800938c <atanf+0x198>
 8009324:	4620      	mov	r0, r4
 8009326:	f7f7 fb41 	bl	80009ac <__aeabi_fsub>
 800932a:	e772      	b.n	8009212 <atanf+0x1e>
 800932c:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8009330:	f7f7 fb3c 	bl	80009ac <__aeabi_fsub>
 8009334:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8009338:	4605      	mov	r5, r0
 800933a:	4620      	mov	r0, r4
 800933c:	f7f7 fb38 	bl	80009b0 <__addsf3>
 8009340:	4601      	mov	r1, r0
 8009342:	4628      	mov	r0, r5
 8009344:	f7f7 fcf0 	bl	8000d28 <__aeabi_fdiv>
 8009348:	2601      	movs	r6, #1
 800934a:	4604      	mov	r4, r0
 800934c:	e799      	b.n	8009282 <atanf+0x8e>
 800934e:	4b2a      	ldr	r3, [pc, #168]	; (80093f8 <atanf+0x204>)
 8009350:	429d      	cmp	r5, r3
 8009352:	dc14      	bgt.n	800937e <atanf+0x18a>
 8009354:	f04f 517f 	mov.w	r1, #1069547520	; 0x3fc00000
 8009358:	f7f7 fb28 	bl	80009ac <__aeabi_fsub>
 800935c:	f04f 517f 	mov.w	r1, #1069547520	; 0x3fc00000
 8009360:	4605      	mov	r5, r0
 8009362:	4620      	mov	r0, r4
 8009364:	f7f7 fc2c 	bl	8000bc0 <__aeabi_fmul>
 8009368:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800936c:	f7f7 fb20 	bl	80009b0 <__addsf3>
 8009370:	4601      	mov	r1, r0
 8009372:	4628      	mov	r0, r5
 8009374:	f7f7 fcd8 	bl	8000d28 <__aeabi_fdiv>
 8009378:	2602      	movs	r6, #2
 800937a:	4604      	mov	r4, r0
 800937c:	e781      	b.n	8009282 <atanf+0x8e>
 800937e:	4601      	mov	r1, r0
 8009380:	481e      	ldr	r0, [pc, #120]	; (80093fc <atanf+0x208>)
 8009382:	f7f7 fcd1 	bl	8000d28 <__aeabi_fdiv>
 8009386:	2603      	movs	r6, #3
 8009388:	4604      	mov	r4, r0
 800938a:	e77a      	b.n	8009282 <atanf+0x8e>
 800938c:	4b1c      	ldr	r3, [pc, #112]	; (8009400 <atanf+0x20c>)
 800938e:	f853 1026 	ldr.w	r1, [r3, r6, lsl #2]
 8009392:	f7f7 fb0b 	bl	80009ac <__aeabi_fsub>
 8009396:	4621      	mov	r1, r4
 8009398:	f7f7 fb08 	bl	80009ac <__aeabi_fsub>
 800939c:	4b19      	ldr	r3, [pc, #100]	; (8009404 <atanf+0x210>)
 800939e:	4601      	mov	r1, r0
 80093a0:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80093a4:	f7f7 fb02 	bl	80009ac <__aeabi_fsub>
 80093a8:	f1b8 0f00 	cmp.w	r8, #0
 80093ac:	4604      	mov	r4, r0
 80093ae:	f6bf af36 	bge.w	800921e <atanf+0x2a>
 80093b2:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 80093b6:	e72c      	b.n	8009212 <atanf+0x1e>
 80093b8:	4c13      	ldr	r4, [pc, #76]	; (8009408 <atanf+0x214>)
 80093ba:	e730      	b.n	800921e <atanf+0x2a>
 80093bc:	bfc90fdb 	.word	0xbfc90fdb
 80093c0:	3edfffff 	.word	0x3edfffff
 80093c4:	7149f2ca 	.word	0x7149f2ca
 80093c8:	3f97ffff 	.word	0x3f97ffff
 80093cc:	3c8569d7 	.word	0x3c8569d7
 80093d0:	3d4bda59 	.word	0x3d4bda59
 80093d4:	3d886b35 	.word	0x3d886b35
 80093d8:	3dba2e6e 	.word	0x3dba2e6e
 80093dc:	3e124925 	.word	0x3e124925
 80093e0:	3eaaaaab 	.word	0x3eaaaaab
 80093e4:	bd15a221 	.word	0xbd15a221
 80093e8:	3d6ef16b 	.word	0x3d6ef16b
 80093ec:	3d9d8795 	.word	0x3d9d8795
 80093f0:	3de38e38 	.word	0x3de38e38
 80093f4:	3e4ccccd 	.word	0x3e4ccccd
 80093f8:	401bffff 	.word	0x401bffff
 80093fc:	bf800000 	.word	0xbf800000
 8009400:	08009dd8 	.word	0x08009dd8
 8009404:	08009dc8 	.word	0x08009dc8
 8009408:	3fc90fdb 	.word	0x3fc90fdb

0800940c <fabsf>:
 800940c:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8009410:	4770      	bx	lr
	...

08009414 <__errno>:
 8009414:	4b01      	ldr	r3, [pc, #4]	; (800941c <__errno+0x8>)
 8009416:	6818      	ldr	r0, [r3, #0]
 8009418:	4770      	bx	lr
 800941a:	bf00      	nop
 800941c:	20000188 	.word	0x20000188

08009420 <__libc_init_array>:
 8009420:	b570      	push	{r4, r5, r6, lr}
 8009422:	2600      	movs	r6, #0
 8009424:	4d0c      	ldr	r5, [pc, #48]	; (8009458 <__libc_init_array+0x38>)
 8009426:	4c0d      	ldr	r4, [pc, #52]	; (800945c <__libc_init_array+0x3c>)
 8009428:	1b64      	subs	r4, r4, r5
 800942a:	10a4      	asrs	r4, r4, #2
 800942c:	42a6      	cmp	r6, r4
 800942e:	d109      	bne.n	8009444 <__libc_init_array+0x24>
 8009430:	f000 fc6c 	bl	8009d0c <_init>
 8009434:	2600      	movs	r6, #0
 8009436:	4d0a      	ldr	r5, [pc, #40]	; (8009460 <__libc_init_array+0x40>)
 8009438:	4c0a      	ldr	r4, [pc, #40]	; (8009464 <__libc_init_array+0x44>)
 800943a:	1b64      	subs	r4, r4, r5
 800943c:	10a4      	asrs	r4, r4, #2
 800943e:	42a6      	cmp	r6, r4
 8009440:	d105      	bne.n	800944e <__libc_init_array+0x2e>
 8009442:	bd70      	pop	{r4, r5, r6, pc}
 8009444:	f855 3b04 	ldr.w	r3, [r5], #4
 8009448:	4798      	blx	r3
 800944a:	3601      	adds	r6, #1
 800944c:	e7ee      	b.n	800942c <__libc_init_array+0xc>
 800944e:	f855 3b04 	ldr.w	r3, [r5], #4
 8009452:	4798      	blx	r3
 8009454:	3601      	adds	r6, #1
 8009456:	e7f2      	b.n	800943e <__libc_init_array+0x1e>
 8009458:	08009e24 	.word	0x08009e24
 800945c:	08009e24 	.word	0x08009e24
 8009460:	08009e24 	.word	0x08009e24
 8009464:	08009e2c 	.word	0x08009e2c

08009468 <malloc>:
 8009468:	4b02      	ldr	r3, [pc, #8]	; (8009474 <malloc+0xc>)
 800946a:	4601      	mov	r1, r0
 800946c:	6818      	ldr	r0, [r3, #0]
 800946e:	f000 b85f 	b.w	8009530 <_malloc_r>
 8009472:	bf00      	nop
 8009474:	20000188 	.word	0x20000188

08009478 <free>:
 8009478:	4b02      	ldr	r3, [pc, #8]	; (8009484 <free+0xc>)
 800947a:	4601      	mov	r1, r0
 800947c:	6818      	ldr	r0, [r3, #0]
 800947e:	f000 b80b 	b.w	8009498 <_free_r>
 8009482:	bf00      	nop
 8009484:	20000188 	.word	0x20000188

08009488 <memset>:
 8009488:	4603      	mov	r3, r0
 800948a:	4402      	add	r2, r0
 800948c:	4293      	cmp	r3, r2
 800948e:	d100      	bne.n	8009492 <memset+0xa>
 8009490:	4770      	bx	lr
 8009492:	f803 1b01 	strb.w	r1, [r3], #1
 8009496:	e7f9      	b.n	800948c <memset+0x4>

08009498 <_free_r>:
 8009498:	b538      	push	{r3, r4, r5, lr}
 800949a:	4605      	mov	r5, r0
 800949c:	2900      	cmp	r1, #0
 800949e:	d043      	beq.n	8009528 <_free_r+0x90>
 80094a0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80094a4:	1f0c      	subs	r4, r1, #4
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	bfb8      	it	lt
 80094aa:	18e4      	addlt	r4, r4, r3
 80094ac:	f000 f8ca 	bl	8009644 <__malloc_lock>
 80094b0:	4a1e      	ldr	r2, [pc, #120]	; (800952c <_free_r+0x94>)
 80094b2:	6813      	ldr	r3, [r2, #0]
 80094b4:	4610      	mov	r0, r2
 80094b6:	b933      	cbnz	r3, 80094c6 <_free_r+0x2e>
 80094b8:	6063      	str	r3, [r4, #4]
 80094ba:	6014      	str	r4, [r2, #0]
 80094bc:	4628      	mov	r0, r5
 80094be:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80094c2:	f000 b8c5 	b.w	8009650 <__malloc_unlock>
 80094c6:	42a3      	cmp	r3, r4
 80094c8:	d90a      	bls.n	80094e0 <_free_r+0x48>
 80094ca:	6821      	ldr	r1, [r4, #0]
 80094cc:	1862      	adds	r2, r4, r1
 80094ce:	4293      	cmp	r3, r2
 80094d0:	bf01      	itttt	eq
 80094d2:	681a      	ldreq	r2, [r3, #0]
 80094d4:	685b      	ldreq	r3, [r3, #4]
 80094d6:	1852      	addeq	r2, r2, r1
 80094d8:	6022      	streq	r2, [r4, #0]
 80094da:	6063      	str	r3, [r4, #4]
 80094dc:	6004      	str	r4, [r0, #0]
 80094de:	e7ed      	b.n	80094bc <_free_r+0x24>
 80094e0:	461a      	mov	r2, r3
 80094e2:	685b      	ldr	r3, [r3, #4]
 80094e4:	b10b      	cbz	r3, 80094ea <_free_r+0x52>
 80094e6:	42a3      	cmp	r3, r4
 80094e8:	d9fa      	bls.n	80094e0 <_free_r+0x48>
 80094ea:	6811      	ldr	r1, [r2, #0]
 80094ec:	1850      	adds	r0, r2, r1
 80094ee:	42a0      	cmp	r0, r4
 80094f0:	d10b      	bne.n	800950a <_free_r+0x72>
 80094f2:	6820      	ldr	r0, [r4, #0]
 80094f4:	4401      	add	r1, r0
 80094f6:	1850      	adds	r0, r2, r1
 80094f8:	4283      	cmp	r3, r0
 80094fa:	6011      	str	r1, [r2, #0]
 80094fc:	d1de      	bne.n	80094bc <_free_r+0x24>
 80094fe:	6818      	ldr	r0, [r3, #0]
 8009500:	685b      	ldr	r3, [r3, #4]
 8009502:	4401      	add	r1, r0
 8009504:	6011      	str	r1, [r2, #0]
 8009506:	6053      	str	r3, [r2, #4]
 8009508:	e7d8      	b.n	80094bc <_free_r+0x24>
 800950a:	d902      	bls.n	8009512 <_free_r+0x7a>
 800950c:	230c      	movs	r3, #12
 800950e:	602b      	str	r3, [r5, #0]
 8009510:	e7d4      	b.n	80094bc <_free_r+0x24>
 8009512:	6820      	ldr	r0, [r4, #0]
 8009514:	1821      	adds	r1, r4, r0
 8009516:	428b      	cmp	r3, r1
 8009518:	bf01      	itttt	eq
 800951a:	6819      	ldreq	r1, [r3, #0]
 800951c:	685b      	ldreq	r3, [r3, #4]
 800951e:	1809      	addeq	r1, r1, r0
 8009520:	6021      	streq	r1, [r4, #0]
 8009522:	6063      	str	r3, [r4, #4]
 8009524:	6054      	str	r4, [r2, #4]
 8009526:	e7c9      	b.n	80094bc <_free_r+0x24>
 8009528:	bd38      	pop	{r3, r4, r5, pc}
 800952a:	bf00      	nop
 800952c:	200004f0 	.word	0x200004f0

08009530 <_malloc_r>:
 8009530:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009532:	1ccd      	adds	r5, r1, #3
 8009534:	f025 0503 	bic.w	r5, r5, #3
 8009538:	3508      	adds	r5, #8
 800953a:	2d0c      	cmp	r5, #12
 800953c:	bf38      	it	cc
 800953e:	250c      	movcc	r5, #12
 8009540:	2d00      	cmp	r5, #0
 8009542:	4606      	mov	r6, r0
 8009544:	db01      	blt.n	800954a <_malloc_r+0x1a>
 8009546:	42a9      	cmp	r1, r5
 8009548:	d903      	bls.n	8009552 <_malloc_r+0x22>
 800954a:	230c      	movs	r3, #12
 800954c:	6033      	str	r3, [r6, #0]
 800954e:	2000      	movs	r0, #0
 8009550:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009552:	f000 f877 	bl	8009644 <__malloc_lock>
 8009556:	4921      	ldr	r1, [pc, #132]	; (80095dc <_malloc_r+0xac>)
 8009558:	680a      	ldr	r2, [r1, #0]
 800955a:	4614      	mov	r4, r2
 800955c:	b99c      	cbnz	r4, 8009586 <_malloc_r+0x56>
 800955e:	4f20      	ldr	r7, [pc, #128]	; (80095e0 <_malloc_r+0xb0>)
 8009560:	683b      	ldr	r3, [r7, #0]
 8009562:	b923      	cbnz	r3, 800956e <_malloc_r+0x3e>
 8009564:	4621      	mov	r1, r4
 8009566:	4630      	mov	r0, r6
 8009568:	f000 f83c 	bl	80095e4 <_sbrk_r>
 800956c:	6038      	str	r0, [r7, #0]
 800956e:	4629      	mov	r1, r5
 8009570:	4630      	mov	r0, r6
 8009572:	f000 f837 	bl	80095e4 <_sbrk_r>
 8009576:	1c43      	adds	r3, r0, #1
 8009578:	d123      	bne.n	80095c2 <_malloc_r+0x92>
 800957a:	230c      	movs	r3, #12
 800957c:	4630      	mov	r0, r6
 800957e:	6033      	str	r3, [r6, #0]
 8009580:	f000 f866 	bl	8009650 <__malloc_unlock>
 8009584:	e7e3      	b.n	800954e <_malloc_r+0x1e>
 8009586:	6823      	ldr	r3, [r4, #0]
 8009588:	1b5b      	subs	r3, r3, r5
 800958a:	d417      	bmi.n	80095bc <_malloc_r+0x8c>
 800958c:	2b0b      	cmp	r3, #11
 800958e:	d903      	bls.n	8009598 <_malloc_r+0x68>
 8009590:	6023      	str	r3, [r4, #0]
 8009592:	441c      	add	r4, r3
 8009594:	6025      	str	r5, [r4, #0]
 8009596:	e004      	b.n	80095a2 <_malloc_r+0x72>
 8009598:	6863      	ldr	r3, [r4, #4]
 800959a:	42a2      	cmp	r2, r4
 800959c:	bf0c      	ite	eq
 800959e:	600b      	streq	r3, [r1, #0]
 80095a0:	6053      	strne	r3, [r2, #4]
 80095a2:	4630      	mov	r0, r6
 80095a4:	f000 f854 	bl	8009650 <__malloc_unlock>
 80095a8:	f104 000b 	add.w	r0, r4, #11
 80095ac:	1d23      	adds	r3, r4, #4
 80095ae:	f020 0007 	bic.w	r0, r0, #7
 80095b2:	1ac2      	subs	r2, r0, r3
 80095b4:	d0cc      	beq.n	8009550 <_malloc_r+0x20>
 80095b6:	1a1b      	subs	r3, r3, r0
 80095b8:	50a3      	str	r3, [r4, r2]
 80095ba:	e7c9      	b.n	8009550 <_malloc_r+0x20>
 80095bc:	4622      	mov	r2, r4
 80095be:	6864      	ldr	r4, [r4, #4]
 80095c0:	e7cc      	b.n	800955c <_malloc_r+0x2c>
 80095c2:	1cc4      	adds	r4, r0, #3
 80095c4:	f024 0403 	bic.w	r4, r4, #3
 80095c8:	42a0      	cmp	r0, r4
 80095ca:	d0e3      	beq.n	8009594 <_malloc_r+0x64>
 80095cc:	1a21      	subs	r1, r4, r0
 80095ce:	4630      	mov	r0, r6
 80095d0:	f000 f808 	bl	80095e4 <_sbrk_r>
 80095d4:	3001      	adds	r0, #1
 80095d6:	d1dd      	bne.n	8009594 <_malloc_r+0x64>
 80095d8:	e7cf      	b.n	800957a <_malloc_r+0x4a>
 80095da:	bf00      	nop
 80095dc:	200004f0 	.word	0x200004f0
 80095e0:	200004f4 	.word	0x200004f4

080095e4 <_sbrk_r>:
 80095e4:	b538      	push	{r3, r4, r5, lr}
 80095e6:	2300      	movs	r3, #0
 80095e8:	4d05      	ldr	r5, [pc, #20]	; (8009600 <_sbrk_r+0x1c>)
 80095ea:	4604      	mov	r4, r0
 80095ec:	4608      	mov	r0, r1
 80095ee:	602b      	str	r3, [r5, #0]
 80095f0:	f7f8 fde4 	bl	80021bc <_sbrk>
 80095f4:	1c43      	adds	r3, r0, #1
 80095f6:	d102      	bne.n	80095fe <_sbrk_r+0x1a>
 80095f8:	682b      	ldr	r3, [r5, #0]
 80095fa:	b103      	cbz	r3, 80095fe <_sbrk_r+0x1a>
 80095fc:	6023      	str	r3, [r4, #0]
 80095fe:	bd38      	pop	{r3, r4, r5, pc}
 8009600:	20001dc0 	.word	0x20001dc0

08009604 <siprintf>:
 8009604:	b40e      	push	{r1, r2, r3}
 8009606:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800960a:	b500      	push	{lr}
 800960c:	b09c      	sub	sp, #112	; 0x70
 800960e:	ab1d      	add	r3, sp, #116	; 0x74
 8009610:	9002      	str	r0, [sp, #8]
 8009612:	9006      	str	r0, [sp, #24]
 8009614:	9107      	str	r1, [sp, #28]
 8009616:	9104      	str	r1, [sp, #16]
 8009618:	4808      	ldr	r0, [pc, #32]	; (800963c <siprintf+0x38>)
 800961a:	4909      	ldr	r1, [pc, #36]	; (8009640 <siprintf+0x3c>)
 800961c:	f853 2b04 	ldr.w	r2, [r3], #4
 8009620:	9105      	str	r1, [sp, #20]
 8009622:	6800      	ldr	r0, [r0, #0]
 8009624:	a902      	add	r1, sp, #8
 8009626:	9301      	str	r3, [sp, #4]
 8009628:	f000 f874 	bl	8009714 <_svfiprintf_r>
 800962c:	2200      	movs	r2, #0
 800962e:	9b02      	ldr	r3, [sp, #8]
 8009630:	701a      	strb	r2, [r3, #0]
 8009632:	b01c      	add	sp, #112	; 0x70
 8009634:	f85d eb04 	ldr.w	lr, [sp], #4
 8009638:	b003      	add	sp, #12
 800963a:	4770      	bx	lr
 800963c:	20000188 	.word	0x20000188
 8009640:	ffff0208 	.word	0xffff0208

08009644 <__malloc_lock>:
 8009644:	4801      	ldr	r0, [pc, #4]	; (800964c <__malloc_lock+0x8>)
 8009646:	f000 bafb 	b.w	8009c40 <__retarget_lock_acquire_recursive>
 800964a:	bf00      	nop
 800964c:	20001dc8 	.word	0x20001dc8

08009650 <__malloc_unlock>:
 8009650:	4801      	ldr	r0, [pc, #4]	; (8009658 <__malloc_unlock+0x8>)
 8009652:	f000 baf6 	b.w	8009c42 <__retarget_lock_release_recursive>
 8009656:	bf00      	nop
 8009658:	20001dc8 	.word	0x20001dc8

0800965c <__ssputs_r>:
 800965c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009660:	688e      	ldr	r6, [r1, #8]
 8009662:	4682      	mov	sl, r0
 8009664:	429e      	cmp	r6, r3
 8009666:	460c      	mov	r4, r1
 8009668:	4690      	mov	r8, r2
 800966a:	461f      	mov	r7, r3
 800966c:	d838      	bhi.n	80096e0 <__ssputs_r+0x84>
 800966e:	898a      	ldrh	r2, [r1, #12]
 8009670:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009674:	d032      	beq.n	80096dc <__ssputs_r+0x80>
 8009676:	6825      	ldr	r5, [r4, #0]
 8009678:	6909      	ldr	r1, [r1, #16]
 800967a:	3301      	adds	r3, #1
 800967c:	eba5 0901 	sub.w	r9, r5, r1
 8009680:	6965      	ldr	r5, [r4, #20]
 8009682:	444b      	add	r3, r9
 8009684:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009688:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800968c:	106d      	asrs	r5, r5, #1
 800968e:	429d      	cmp	r5, r3
 8009690:	bf38      	it	cc
 8009692:	461d      	movcc	r5, r3
 8009694:	0553      	lsls	r3, r2, #21
 8009696:	d531      	bpl.n	80096fc <__ssputs_r+0xa0>
 8009698:	4629      	mov	r1, r5
 800969a:	f7ff ff49 	bl	8009530 <_malloc_r>
 800969e:	4606      	mov	r6, r0
 80096a0:	b950      	cbnz	r0, 80096b8 <__ssputs_r+0x5c>
 80096a2:	230c      	movs	r3, #12
 80096a4:	f04f 30ff 	mov.w	r0, #4294967295
 80096a8:	f8ca 3000 	str.w	r3, [sl]
 80096ac:	89a3      	ldrh	r3, [r4, #12]
 80096ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80096b2:	81a3      	strh	r3, [r4, #12]
 80096b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80096b8:	464a      	mov	r2, r9
 80096ba:	6921      	ldr	r1, [r4, #16]
 80096bc:	f000 fad0 	bl	8009c60 <memcpy>
 80096c0:	89a3      	ldrh	r3, [r4, #12]
 80096c2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80096c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80096ca:	81a3      	strh	r3, [r4, #12]
 80096cc:	6126      	str	r6, [r4, #16]
 80096ce:	444e      	add	r6, r9
 80096d0:	6026      	str	r6, [r4, #0]
 80096d2:	463e      	mov	r6, r7
 80096d4:	6165      	str	r5, [r4, #20]
 80096d6:	eba5 0509 	sub.w	r5, r5, r9
 80096da:	60a5      	str	r5, [r4, #8]
 80096dc:	42be      	cmp	r6, r7
 80096de:	d900      	bls.n	80096e2 <__ssputs_r+0x86>
 80096e0:	463e      	mov	r6, r7
 80096e2:	4632      	mov	r2, r6
 80096e4:	4641      	mov	r1, r8
 80096e6:	6820      	ldr	r0, [r4, #0]
 80096e8:	f000 fac8 	bl	8009c7c <memmove>
 80096ec:	68a3      	ldr	r3, [r4, #8]
 80096ee:	6822      	ldr	r2, [r4, #0]
 80096f0:	1b9b      	subs	r3, r3, r6
 80096f2:	4432      	add	r2, r6
 80096f4:	2000      	movs	r0, #0
 80096f6:	60a3      	str	r3, [r4, #8]
 80096f8:	6022      	str	r2, [r4, #0]
 80096fa:	e7db      	b.n	80096b4 <__ssputs_r+0x58>
 80096fc:	462a      	mov	r2, r5
 80096fe:	f000 fad7 	bl	8009cb0 <_realloc_r>
 8009702:	4606      	mov	r6, r0
 8009704:	2800      	cmp	r0, #0
 8009706:	d1e1      	bne.n	80096cc <__ssputs_r+0x70>
 8009708:	4650      	mov	r0, sl
 800970a:	6921      	ldr	r1, [r4, #16]
 800970c:	f7ff fec4 	bl	8009498 <_free_r>
 8009710:	e7c7      	b.n	80096a2 <__ssputs_r+0x46>
	...

08009714 <_svfiprintf_r>:
 8009714:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009718:	4698      	mov	r8, r3
 800971a:	898b      	ldrh	r3, [r1, #12]
 800971c:	4607      	mov	r7, r0
 800971e:	061b      	lsls	r3, r3, #24
 8009720:	460d      	mov	r5, r1
 8009722:	4614      	mov	r4, r2
 8009724:	b09d      	sub	sp, #116	; 0x74
 8009726:	d50e      	bpl.n	8009746 <_svfiprintf_r+0x32>
 8009728:	690b      	ldr	r3, [r1, #16]
 800972a:	b963      	cbnz	r3, 8009746 <_svfiprintf_r+0x32>
 800972c:	2140      	movs	r1, #64	; 0x40
 800972e:	f7ff feff 	bl	8009530 <_malloc_r>
 8009732:	6028      	str	r0, [r5, #0]
 8009734:	6128      	str	r0, [r5, #16]
 8009736:	b920      	cbnz	r0, 8009742 <_svfiprintf_r+0x2e>
 8009738:	230c      	movs	r3, #12
 800973a:	603b      	str	r3, [r7, #0]
 800973c:	f04f 30ff 	mov.w	r0, #4294967295
 8009740:	e0d1      	b.n	80098e6 <_svfiprintf_r+0x1d2>
 8009742:	2340      	movs	r3, #64	; 0x40
 8009744:	616b      	str	r3, [r5, #20]
 8009746:	2300      	movs	r3, #0
 8009748:	9309      	str	r3, [sp, #36]	; 0x24
 800974a:	2320      	movs	r3, #32
 800974c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009750:	2330      	movs	r3, #48	; 0x30
 8009752:	f04f 0901 	mov.w	r9, #1
 8009756:	f8cd 800c 	str.w	r8, [sp, #12]
 800975a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8009900 <_svfiprintf_r+0x1ec>
 800975e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009762:	4623      	mov	r3, r4
 8009764:	469a      	mov	sl, r3
 8009766:	f813 2b01 	ldrb.w	r2, [r3], #1
 800976a:	b10a      	cbz	r2, 8009770 <_svfiprintf_r+0x5c>
 800976c:	2a25      	cmp	r2, #37	; 0x25
 800976e:	d1f9      	bne.n	8009764 <_svfiprintf_r+0x50>
 8009770:	ebba 0b04 	subs.w	fp, sl, r4
 8009774:	d00b      	beq.n	800978e <_svfiprintf_r+0x7a>
 8009776:	465b      	mov	r3, fp
 8009778:	4622      	mov	r2, r4
 800977a:	4629      	mov	r1, r5
 800977c:	4638      	mov	r0, r7
 800977e:	f7ff ff6d 	bl	800965c <__ssputs_r>
 8009782:	3001      	adds	r0, #1
 8009784:	f000 80aa 	beq.w	80098dc <_svfiprintf_r+0x1c8>
 8009788:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800978a:	445a      	add	r2, fp
 800978c:	9209      	str	r2, [sp, #36]	; 0x24
 800978e:	f89a 3000 	ldrb.w	r3, [sl]
 8009792:	2b00      	cmp	r3, #0
 8009794:	f000 80a2 	beq.w	80098dc <_svfiprintf_r+0x1c8>
 8009798:	2300      	movs	r3, #0
 800979a:	f04f 32ff 	mov.w	r2, #4294967295
 800979e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80097a2:	f10a 0a01 	add.w	sl, sl, #1
 80097a6:	9304      	str	r3, [sp, #16]
 80097a8:	9307      	str	r3, [sp, #28]
 80097aa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80097ae:	931a      	str	r3, [sp, #104]	; 0x68
 80097b0:	4654      	mov	r4, sl
 80097b2:	2205      	movs	r2, #5
 80097b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80097b8:	4851      	ldr	r0, [pc, #324]	; (8009900 <_svfiprintf_r+0x1ec>)
 80097ba:	f000 fa43 	bl	8009c44 <memchr>
 80097be:	9a04      	ldr	r2, [sp, #16]
 80097c0:	b9d8      	cbnz	r0, 80097fa <_svfiprintf_r+0xe6>
 80097c2:	06d0      	lsls	r0, r2, #27
 80097c4:	bf44      	itt	mi
 80097c6:	2320      	movmi	r3, #32
 80097c8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80097cc:	0711      	lsls	r1, r2, #28
 80097ce:	bf44      	itt	mi
 80097d0:	232b      	movmi	r3, #43	; 0x2b
 80097d2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80097d6:	f89a 3000 	ldrb.w	r3, [sl]
 80097da:	2b2a      	cmp	r3, #42	; 0x2a
 80097dc:	d015      	beq.n	800980a <_svfiprintf_r+0xf6>
 80097de:	4654      	mov	r4, sl
 80097e0:	2000      	movs	r0, #0
 80097e2:	f04f 0c0a 	mov.w	ip, #10
 80097e6:	9a07      	ldr	r2, [sp, #28]
 80097e8:	4621      	mov	r1, r4
 80097ea:	f811 3b01 	ldrb.w	r3, [r1], #1
 80097ee:	3b30      	subs	r3, #48	; 0x30
 80097f0:	2b09      	cmp	r3, #9
 80097f2:	d94e      	bls.n	8009892 <_svfiprintf_r+0x17e>
 80097f4:	b1b0      	cbz	r0, 8009824 <_svfiprintf_r+0x110>
 80097f6:	9207      	str	r2, [sp, #28]
 80097f8:	e014      	b.n	8009824 <_svfiprintf_r+0x110>
 80097fa:	eba0 0308 	sub.w	r3, r0, r8
 80097fe:	fa09 f303 	lsl.w	r3, r9, r3
 8009802:	4313      	orrs	r3, r2
 8009804:	46a2      	mov	sl, r4
 8009806:	9304      	str	r3, [sp, #16]
 8009808:	e7d2      	b.n	80097b0 <_svfiprintf_r+0x9c>
 800980a:	9b03      	ldr	r3, [sp, #12]
 800980c:	1d19      	adds	r1, r3, #4
 800980e:	681b      	ldr	r3, [r3, #0]
 8009810:	9103      	str	r1, [sp, #12]
 8009812:	2b00      	cmp	r3, #0
 8009814:	bfbb      	ittet	lt
 8009816:	425b      	neglt	r3, r3
 8009818:	f042 0202 	orrlt.w	r2, r2, #2
 800981c:	9307      	strge	r3, [sp, #28]
 800981e:	9307      	strlt	r3, [sp, #28]
 8009820:	bfb8      	it	lt
 8009822:	9204      	strlt	r2, [sp, #16]
 8009824:	7823      	ldrb	r3, [r4, #0]
 8009826:	2b2e      	cmp	r3, #46	; 0x2e
 8009828:	d10c      	bne.n	8009844 <_svfiprintf_r+0x130>
 800982a:	7863      	ldrb	r3, [r4, #1]
 800982c:	2b2a      	cmp	r3, #42	; 0x2a
 800982e:	d135      	bne.n	800989c <_svfiprintf_r+0x188>
 8009830:	9b03      	ldr	r3, [sp, #12]
 8009832:	3402      	adds	r4, #2
 8009834:	1d1a      	adds	r2, r3, #4
 8009836:	681b      	ldr	r3, [r3, #0]
 8009838:	9203      	str	r2, [sp, #12]
 800983a:	2b00      	cmp	r3, #0
 800983c:	bfb8      	it	lt
 800983e:	f04f 33ff 	movlt.w	r3, #4294967295
 8009842:	9305      	str	r3, [sp, #20]
 8009844:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8009910 <_svfiprintf_r+0x1fc>
 8009848:	2203      	movs	r2, #3
 800984a:	4650      	mov	r0, sl
 800984c:	7821      	ldrb	r1, [r4, #0]
 800984e:	f000 f9f9 	bl	8009c44 <memchr>
 8009852:	b140      	cbz	r0, 8009866 <_svfiprintf_r+0x152>
 8009854:	2340      	movs	r3, #64	; 0x40
 8009856:	eba0 000a 	sub.w	r0, r0, sl
 800985a:	fa03 f000 	lsl.w	r0, r3, r0
 800985e:	9b04      	ldr	r3, [sp, #16]
 8009860:	3401      	adds	r4, #1
 8009862:	4303      	orrs	r3, r0
 8009864:	9304      	str	r3, [sp, #16]
 8009866:	f814 1b01 	ldrb.w	r1, [r4], #1
 800986a:	2206      	movs	r2, #6
 800986c:	4825      	ldr	r0, [pc, #148]	; (8009904 <_svfiprintf_r+0x1f0>)
 800986e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009872:	f000 f9e7 	bl	8009c44 <memchr>
 8009876:	2800      	cmp	r0, #0
 8009878:	d038      	beq.n	80098ec <_svfiprintf_r+0x1d8>
 800987a:	4b23      	ldr	r3, [pc, #140]	; (8009908 <_svfiprintf_r+0x1f4>)
 800987c:	bb1b      	cbnz	r3, 80098c6 <_svfiprintf_r+0x1b2>
 800987e:	9b03      	ldr	r3, [sp, #12]
 8009880:	3307      	adds	r3, #7
 8009882:	f023 0307 	bic.w	r3, r3, #7
 8009886:	3308      	adds	r3, #8
 8009888:	9303      	str	r3, [sp, #12]
 800988a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800988c:	4433      	add	r3, r6
 800988e:	9309      	str	r3, [sp, #36]	; 0x24
 8009890:	e767      	b.n	8009762 <_svfiprintf_r+0x4e>
 8009892:	460c      	mov	r4, r1
 8009894:	2001      	movs	r0, #1
 8009896:	fb0c 3202 	mla	r2, ip, r2, r3
 800989a:	e7a5      	b.n	80097e8 <_svfiprintf_r+0xd4>
 800989c:	2300      	movs	r3, #0
 800989e:	f04f 0c0a 	mov.w	ip, #10
 80098a2:	4619      	mov	r1, r3
 80098a4:	3401      	adds	r4, #1
 80098a6:	9305      	str	r3, [sp, #20]
 80098a8:	4620      	mov	r0, r4
 80098aa:	f810 2b01 	ldrb.w	r2, [r0], #1
 80098ae:	3a30      	subs	r2, #48	; 0x30
 80098b0:	2a09      	cmp	r2, #9
 80098b2:	d903      	bls.n	80098bc <_svfiprintf_r+0x1a8>
 80098b4:	2b00      	cmp	r3, #0
 80098b6:	d0c5      	beq.n	8009844 <_svfiprintf_r+0x130>
 80098b8:	9105      	str	r1, [sp, #20]
 80098ba:	e7c3      	b.n	8009844 <_svfiprintf_r+0x130>
 80098bc:	4604      	mov	r4, r0
 80098be:	2301      	movs	r3, #1
 80098c0:	fb0c 2101 	mla	r1, ip, r1, r2
 80098c4:	e7f0      	b.n	80098a8 <_svfiprintf_r+0x194>
 80098c6:	ab03      	add	r3, sp, #12
 80098c8:	9300      	str	r3, [sp, #0]
 80098ca:	462a      	mov	r2, r5
 80098cc:	4638      	mov	r0, r7
 80098ce:	4b0f      	ldr	r3, [pc, #60]	; (800990c <_svfiprintf_r+0x1f8>)
 80098d0:	a904      	add	r1, sp, #16
 80098d2:	f3af 8000 	nop.w
 80098d6:	1c42      	adds	r2, r0, #1
 80098d8:	4606      	mov	r6, r0
 80098da:	d1d6      	bne.n	800988a <_svfiprintf_r+0x176>
 80098dc:	89ab      	ldrh	r3, [r5, #12]
 80098de:	065b      	lsls	r3, r3, #25
 80098e0:	f53f af2c 	bmi.w	800973c <_svfiprintf_r+0x28>
 80098e4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80098e6:	b01d      	add	sp, #116	; 0x74
 80098e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80098ec:	ab03      	add	r3, sp, #12
 80098ee:	9300      	str	r3, [sp, #0]
 80098f0:	462a      	mov	r2, r5
 80098f2:	4638      	mov	r0, r7
 80098f4:	4b05      	ldr	r3, [pc, #20]	; (800990c <_svfiprintf_r+0x1f8>)
 80098f6:	a904      	add	r1, sp, #16
 80098f8:	f000 f87c 	bl	80099f4 <_printf_i>
 80098fc:	e7eb      	b.n	80098d6 <_svfiprintf_r+0x1c2>
 80098fe:	bf00      	nop
 8009900:	08009de8 	.word	0x08009de8
 8009904:	08009df2 	.word	0x08009df2
 8009908:	00000000 	.word	0x00000000
 800990c:	0800965d 	.word	0x0800965d
 8009910:	08009dee 	.word	0x08009dee

08009914 <_printf_common>:
 8009914:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009918:	4616      	mov	r6, r2
 800991a:	4699      	mov	r9, r3
 800991c:	688a      	ldr	r2, [r1, #8]
 800991e:	690b      	ldr	r3, [r1, #16]
 8009920:	4607      	mov	r7, r0
 8009922:	4293      	cmp	r3, r2
 8009924:	bfb8      	it	lt
 8009926:	4613      	movlt	r3, r2
 8009928:	6033      	str	r3, [r6, #0]
 800992a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800992e:	460c      	mov	r4, r1
 8009930:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009934:	b10a      	cbz	r2, 800993a <_printf_common+0x26>
 8009936:	3301      	adds	r3, #1
 8009938:	6033      	str	r3, [r6, #0]
 800993a:	6823      	ldr	r3, [r4, #0]
 800993c:	0699      	lsls	r1, r3, #26
 800993e:	bf42      	ittt	mi
 8009940:	6833      	ldrmi	r3, [r6, #0]
 8009942:	3302      	addmi	r3, #2
 8009944:	6033      	strmi	r3, [r6, #0]
 8009946:	6825      	ldr	r5, [r4, #0]
 8009948:	f015 0506 	ands.w	r5, r5, #6
 800994c:	d106      	bne.n	800995c <_printf_common+0x48>
 800994e:	f104 0a19 	add.w	sl, r4, #25
 8009952:	68e3      	ldr	r3, [r4, #12]
 8009954:	6832      	ldr	r2, [r6, #0]
 8009956:	1a9b      	subs	r3, r3, r2
 8009958:	42ab      	cmp	r3, r5
 800995a:	dc28      	bgt.n	80099ae <_printf_common+0x9a>
 800995c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009960:	1e13      	subs	r3, r2, #0
 8009962:	6822      	ldr	r2, [r4, #0]
 8009964:	bf18      	it	ne
 8009966:	2301      	movne	r3, #1
 8009968:	0692      	lsls	r2, r2, #26
 800996a:	d42d      	bmi.n	80099c8 <_printf_common+0xb4>
 800996c:	4649      	mov	r1, r9
 800996e:	4638      	mov	r0, r7
 8009970:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009974:	47c0      	blx	r8
 8009976:	3001      	adds	r0, #1
 8009978:	d020      	beq.n	80099bc <_printf_common+0xa8>
 800997a:	6823      	ldr	r3, [r4, #0]
 800997c:	68e5      	ldr	r5, [r4, #12]
 800997e:	f003 0306 	and.w	r3, r3, #6
 8009982:	2b04      	cmp	r3, #4
 8009984:	bf18      	it	ne
 8009986:	2500      	movne	r5, #0
 8009988:	6832      	ldr	r2, [r6, #0]
 800998a:	f04f 0600 	mov.w	r6, #0
 800998e:	68a3      	ldr	r3, [r4, #8]
 8009990:	bf08      	it	eq
 8009992:	1aad      	subeq	r5, r5, r2
 8009994:	6922      	ldr	r2, [r4, #16]
 8009996:	bf08      	it	eq
 8009998:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800999c:	4293      	cmp	r3, r2
 800999e:	bfc4      	itt	gt
 80099a0:	1a9b      	subgt	r3, r3, r2
 80099a2:	18ed      	addgt	r5, r5, r3
 80099a4:	341a      	adds	r4, #26
 80099a6:	42b5      	cmp	r5, r6
 80099a8:	d11a      	bne.n	80099e0 <_printf_common+0xcc>
 80099aa:	2000      	movs	r0, #0
 80099ac:	e008      	b.n	80099c0 <_printf_common+0xac>
 80099ae:	2301      	movs	r3, #1
 80099b0:	4652      	mov	r2, sl
 80099b2:	4649      	mov	r1, r9
 80099b4:	4638      	mov	r0, r7
 80099b6:	47c0      	blx	r8
 80099b8:	3001      	adds	r0, #1
 80099ba:	d103      	bne.n	80099c4 <_printf_common+0xb0>
 80099bc:	f04f 30ff 	mov.w	r0, #4294967295
 80099c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80099c4:	3501      	adds	r5, #1
 80099c6:	e7c4      	b.n	8009952 <_printf_common+0x3e>
 80099c8:	2030      	movs	r0, #48	; 0x30
 80099ca:	18e1      	adds	r1, r4, r3
 80099cc:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80099d0:	1c5a      	adds	r2, r3, #1
 80099d2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80099d6:	4422      	add	r2, r4
 80099d8:	3302      	adds	r3, #2
 80099da:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80099de:	e7c5      	b.n	800996c <_printf_common+0x58>
 80099e0:	2301      	movs	r3, #1
 80099e2:	4622      	mov	r2, r4
 80099e4:	4649      	mov	r1, r9
 80099e6:	4638      	mov	r0, r7
 80099e8:	47c0      	blx	r8
 80099ea:	3001      	adds	r0, #1
 80099ec:	d0e6      	beq.n	80099bc <_printf_common+0xa8>
 80099ee:	3601      	adds	r6, #1
 80099f0:	e7d9      	b.n	80099a6 <_printf_common+0x92>
	...

080099f4 <_printf_i>:
 80099f4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80099f8:	460c      	mov	r4, r1
 80099fa:	7e27      	ldrb	r7, [r4, #24]
 80099fc:	4691      	mov	r9, r2
 80099fe:	2f78      	cmp	r7, #120	; 0x78
 8009a00:	4680      	mov	r8, r0
 8009a02:	469a      	mov	sl, r3
 8009a04:	990c      	ldr	r1, [sp, #48]	; 0x30
 8009a06:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009a0a:	d807      	bhi.n	8009a1c <_printf_i+0x28>
 8009a0c:	2f62      	cmp	r7, #98	; 0x62
 8009a0e:	d80a      	bhi.n	8009a26 <_printf_i+0x32>
 8009a10:	2f00      	cmp	r7, #0
 8009a12:	f000 80d9 	beq.w	8009bc8 <_printf_i+0x1d4>
 8009a16:	2f58      	cmp	r7, #88	; 0x58
 8009a18:	f000 80a4 	beq.w	8009b64 <_printf_i+0x170>
 8009a1c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8009a20:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009a24:	e03a      	b.n	8009a9c <_printf_i+0xa8>
 8009a26:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009a2a:	2b15      	cmp	r3, #21
 8009a2c:	d8f6      	bhi.n	8009a1c <_printf_i+0x28>
 8009a2e:	a001      	add	r0, pc, #4	; (adr r0, 8009a34 <_printf_i+0x40>)
 8009a30:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8009a34:	08009a8d 	.word	0x08009a8d
 8009a38:	08009aa1 	.word	0x08009aa1
 8009a3c:	08009a1d 	.word	0x08009a1d
 8009a40:	08009a1d 	.word	0x08009a1d
 8009a44:	08009a1d 	.word	0x08009a1d
 8009a48:	08009a1d 	.word	0x08009a1d
 8009a4c:	08009aa1 	.word	0x08009aa1
 8009a50:	08009a1d 	.word	0x08009a1d
 8009a54:	08009a1d 	.word	0x08009a1d
 8009a58:	08009a1d 	.word	0x08009a1d
 8009a5c:	08009a1d 	.word	0x08009a1d
 8009a60:	08009baf 	.word	0x08009baf
 8009a64:	08009ad1 	.word	0x08009ad1
 8009a68:	08009b91 	.word	0x08009b91
 8009a6c:	08009a1d 	.word	0x08009a1d
 8009a70:	08009a1d 	.word	0x08009a1d
 8009a74:	08009bd1 	.word	0x08009bd1
 8009a78:	08009a1d 	.word	0x08009a1d
 8009a7c:	08009ad1 	.word	0x08009ad1
 8009a80:	08009a1d 	.word	0x08009a1d
 8009a84:	08009a1d 	.word	0x08009a1d
 8009a88:	08009b99 	.word	0x08009b99
 8009a8c:	680b      	ldr	r3, [r1, #0]
 8009a8e:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8009a92:	1d1a      	adds	r2, r3, #4
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	600a      	str	r2, [r1, #0]
 8009a98:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009a9c:	2301      	movs	r3, #1
 8009a9e:	e0a4      	b.n	8009bea <_printf_i+0x1f6>
 8009aa0:	6825      	ldr	r5, [r4, #0]
 8009aa2:	6808      	ldr	r0, [r1, #0]
 8009aa4:	062e      	lsls	r6, r5, #24
 8009aa6:	f100 0304 	add.w	r3, r0, #4
 8009aaa:	d50a      	bpl.n	8009ac2 <_printf_i+0xce>
 8009aac:	6805      	ldr	r5, [r0, #0]
 8009aae:	600b      	str	r3, [r1, #0]
 8009ab0:	2d00      	cmp	r5, #0
 8009ab2:	da03      	bge.n	8009abc <_printf_i+0xc8>
 8009ab4:	232d      	movs	r3, #45	; 0x2d
 8009ab6:	426d      	negs	r5, r5
 8009ab8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009abc:	230a      	movs	r3, #10
 8009abe:	485e      	ldr	r0, [pc, #376]	; (8009c38 <_printf_i+0x244>)
 8009ac0:	e019      	b.n	8009af6 <_printf_i+0x102>
 8009ac2:	f015 0f40 	tst.w	r5, #64	; 0x40
 8009ac6:	6805      	ldr	r5, [r0, #0]
 8009ac8:	600b      	str	r3, [r1, #0]
 8009aca:	bf18      	it	ne
 8009acc:	b22d      	sxthne	r5, r5
 8009ace:	e7ef      	b.n	8009ab0 <_printf_i+0xbc>
 8009ad0:	680b      	ldr	r3, [r1, #0]
 8009ad2:	6825      	ldr	r5, [r4, #0]
 8009ad4:	1d18      	adds	r0, r3, #4
 8009ad6:	6008      	str	r0, [r1, #0]
 8009ad8:	0628      	lsls	r0, r5, #24
 8009ada:	d501      	bpl.n	8009ae0 <_printf_i+0xec>
 8009adc:	681d      	ldr	r5, [r3, #0]
 8009ade:	e002      	b.n	8009ae6 <_printf_i+0xf2>
 8009ae0:	0669      	lsls	r1, r5, #25
 8009ae2:	d5fb      	bpl.n	8009adc <_printf_i+0xe8>
 8009ae4:	881d      	ldrh	r5, [r3, #0]
 8009ae6:	2f6f      	cmp	r7, #111	; 0x6f
 8009ae8:	bf0c      	ite	eq
 8009aea:	2308      	moveq	r3, #8
 8009aec:	230a      	movne	r3, #10
 8009aee:	4852      	ldr	r0, [pc, #328]	; (8009c38 <_printf_i+0x244>)
 8009af0:	2100      	movs	r1, #0
 8009af2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009af6:	6866      	ldr	r6, [r4, #4]
 8009af8:	2e00      	cmp	r6, #0
 8009afa:	bfa8      	it	ge
 8009afc:	6821      	ldrge	r1, [r4, #0]
 8009afe:	60a6      	str	r6, [r4, #8]
 8009b00:	bfa4      	itt	ge
 8009b02:	f021 0104 	bicge.w	r1, r1, #4
 8009b06:	6021      	strge	r1, [r4, #0]
 8009b08:	b90d      	cbnz	r5, 8009b0e <_printf_i+0x11a>
 8009b0a:	2e00      	cmp	r6, #0
 8009b0c:	d04d      	beq.n	8009baa <_printf_i+0x1b6>
 8009b0e:	4616      	mov	r6, r2
 8009b10:	fbb5 f1f3 	udiv	r1, r5, r3
 8009b14:	fb03 5711 	mls	r7, r3, r1, r5
 8009b18:	5dc7      	ldrb	r7, [r0, r7]
 8009b1a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009b1e:	462f      	mov	r7, r5
 8009b20:	42bb      	cmp	r3, r7
 8009b22:	460d      	mov	r5, r1
 8009b24:	d9f4      	bls.n	8009b10 <_printf_i+0x11c>
 8009b26:	2b08      	cmp	r3, #8
 8009b28:	d10b      	bne.n	8009b42 <_printf_i+0x14e>
 8009b2a:	6823      	ldr	r3, [r4, #0]
 8009b2c:	07df      	lsls	r7, r3, #31
 8009b2e:	d508      	bpl.n	8009b42 <_printf_i+0x14e>
 8009b30:	6923      	ldr	r3, [r4, #16]
 8009b32:	6861      	ldr	r1, [r4, #4]
 8009b34:	4299      	cmp	r1, r3
 8009b36:	bfde      	ittt	le
 8009b38:	2330      	movle	r3, #48	; 0x30
 8009b3a:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009b3e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009b42:	1b92      	subs	r2, r2, r6
 8009b44:	6122      	str	r2, [r4, #16]
 8009b46:	464b      	mov	r3, r9
 8009b48:	4621      	mov	r1, r4
 8009b4a:	4640      	mov	r0, r8
 8009b4c:	f8cd a000 	str.w	sl, [sp]
 8009b50:	aa03      	add	r2, sp, #12
 8009b52:	f7ff fedf 	bl	8009914 <_printf_common>
 8009b56:	3001      	adds	r0, #1
 8009b58:	d14c      	bne.n	8009bf4 <_printf_i+0x200>
 8009b5a:	f04f 30ff 	mov.w	r0, #4294967295
 8009b5e:	b004      	add	sp, #16
 8009b60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009b64:	4834      	ldr	r0, [pc, #208]	; (8009c38 <_printf_i+0x244>)
 8009b66:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8009b6a:	680e      	ldr	r6, [r1, #0]
 8009b6c:	6823      	ldr	r3, [r4, #0]
 8009b6e:	f856 5b04 	ldr.w	r5, [r6], #4
 8009b72:	061f      	lsls	r7, r3, #24
 8009b74:	600e      	str	r6, [r1, #0]
 8009b76:	d514      	bpl.n	8009ba2 <_printf_i+0x1ae>
 8009b78:	07d9      	lsls	r1, r3, #31
 8009b7a:	bf44      	itt	mi
 8009b7c:	f043 0320 	orrmi.w	r3, r3, #32
 8009b80:	6023      	strmi	r3, [r4, #0]
 8009b82:	b91d      	cbnz	r5, 8009b8c <_printf_i+0x198>
 8009b84:	6823      	ldr	r3, [r4, #0]
 8009b86:	f023 0320 	bic.w	r3, r3, #32
 8009b8a:	6023      	str	r3, [r4, #0]
 8009b8c:	2310      	movs	r3, #16
 8009b8e:	e7af      	b.n	8009af0 <_printf_i+0xfc>
 8009b90:	6823      	ldr	r3, [r4, #0]
 8009b92:	f043 0320 	orr.w	r3, r3, #32
 8009b96:	6023      	str	r3, [r4, #0]
 8009b98:	2378      	movs	r3, #120	; 0x78
 8009b9a:	4828      	ldr	r0, [pc, #160]	; (8009c3c <_printf_i+0x248>)
 8009b9c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009ba0:	e7e3      	b.n	8009b6a <_printf_i+0x176>
 8009ba2:	065e      	lsls	r6, r3, #25
 8009ba4:	bf48      	it	mi
 8009ba6:	b2ad      	uxthmi	r5, r5
 8009ba8:	e7e6      	b.n	8009b78 <_printf_i+0x184>
 8009baa:	4616      	mov	r6, r2
 8009bac:	e7bb      	b.n	8009b26 <_printf_i+0x132>
 8009bae:	680b      	ldr	r3, [r1, #0]
 8009bb0:	6826      	ldr	r6, [r4, #0]
 8009bb2:	1d1d      	adds	r5, r3, #4
 8009bb4:	6960      	ldr	r0, [r4, #20]
 8009bb6:	600d      	str	r5, [r1, #0]
 8009bb8:	0635      	lsls	r5, r6, #24
 8009bba:	681b      	ldr	r3, [r3, #0]
 8009bbc:	d501      	bpl.n	8009bc2 <_printf_i+0x1ce>
 8009bbe:	6018      	str	r0, [r3, #0]
 8009bc0:	e002      	b.n	8009bc8 <_printf_i+0x1d4>
 8009bc2:	0671      	lsls	r1, r6, #25
 8009bc4:	d5fb      	bpl.n	8009bbe <_printf_i+0x1ca>
 8009bc6:	8018      	strh	r0, [r3, #0]
 8009bc8:	2300      	movs	r3, #0
 8009bca:	4616      	mov	r6, r2
 8009bcc:	6123      	str	r3, [r4, #16]
 8009bce:	e7ba      	b.n	8009b46 <_printf_i+0x152>
 8009bd0:	680b      	ldr	r3, [r1, #0]
 8009bd2:	1d1a      	adds	r2, r3, #4
 8009bd4:	600a      	str	r2, [r1, #0]
 8009bd6:	681e      	ldr	r6, [r3, #0]
 8009bd8:	2100      	movs	r1, #0
 8009bda:	4630      	mov	r0, r6
 8009bdc:	6862      	ldr	r2, [r4, #4]
 8009bde:	f000 f831 	bl	8009c44 <memchr>
 8009be2:	b108      	cbz	r0, 8009be8 <_printf_i+0x1f4>
 8009be4:	1b80      	subs	r0, r0, r6
 8009be6:	6060      	str	r0, [r4, #4]
 8009be8:	6863      	ldr	r3, [r4, #4]
 8009bea:	6123      	str	r3, [r4, #16]
 8009bec:	2300      	movs	r3, #0
 8009bee:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009bf2:	e7a8      	b.n	8009b46 <_printf_i+0x152>
 8009bf4:	4632      	mov	r2, r6
 8009bf6:	4649      	mov	r1, r9
 8009bf8:	4640      	mov	r0, r8
 8009bfa:	6923      	ldr	r3, [r4, #16]
 8009bfc:	47d0      	blx	sl
 8009bfe:	3001      	adds	r0, #1
 8009c00:	d0ab      	beq.n	8009b5a <_printf_i+0x166>
 8009c02:	6823      	ldr	r3, [r4, #0]
 8009c04:	079b      	lsls	r3, r3, #30
 8009c06:	d413      	bmi.n	8009c30 <_printf_i+0x23c>
 8009c08:	68e0      	ldr	r0, [r4, #12]
 8009c0a:	9b03      	ldr	r3, [sp, #12]
 8009c0c:	4298      	cmp	r0, r3
 8009c0e:	bfb8      	it	lt
 8009c10:	4618      	movlt	r0, r3
 8009c12:	e7a4      	b.n	8009b5e <_printf_i+0x16a>
 8009c14:	2301      	movs	r3, #1
 8009c16:	4632      	mov	r2, r6
 8009c18:	4649      	mov	r1, r9
 8009c1a:	4640      	mov	r0, r8
 8009c1c:	47d0      	blx	sl
 8009c1e:	3001      	adds	r0, #1
 8009c20:	d09b      	beq.n	8009b5a <_printf_i+0x166>
 8009c22:	3501      	adds	r5, #1
 8009c24:	68e3      	ldr	r3, [r4, #12]
 8009c26:	9903      	ldr	r1, [sp, #12]
 8009c28:	1a5b      	subs	r3, r3, r1
 8009c2a:	42ab      	cmp	r3, r5
 8009c2c:	dcf2      	bgt.n	8009c14 <_printf_i+0x220>
 8009c2e:	e7eb      	b.n	8009c08 <_printf_i+0x214>
 8009c30:	2500      	movs	r5, #0
 8009c32:	f104 0619 	add.w	r6, r4, #25
 8009c36:	e7f5      	b.n	8009c24 <_printf_i+0x230>
 8009c38:	08009df9 	.word	0x08009df9
 8009c3c:	08009e0a 	.word	0x08009e0a

08009c40 <__retarget_lock_acquire_recursive>:
 8009c40:	4770      	bx	lr

08009c42 <__retarget_lock_release_recursive>:
 8009c42:	4770      	bx	lr

08009c44 <memchr>:
 8009c44:	4603      	mov	r3, r0
 8009c46:	b510      	push	{r4, lr}
 8009c48:	b2c9      	uxtb	r1, r1
 8009c4a:	4402      	add	r2, r0
 8009c4c:	4293      	cmp	r3, r2
 8009c4e:	4618      	mov	r0, r3
 8009c50:	d101      	bne.n	8009c56 <memchr+0x12>
 8009c52:	2000      	movs	r0, #0
 8009c54:	e003      	b.n	8009c5e <memchr+0x1a>
 8009c56:	7804      	ldrb	r4, [r0, #0]
 8009c58:	3301      	adds	r3, #1
 8009c5a:	428c      	cmp	r4, r1
 8009c5c:	d1f6      	bne.n	8009c4c <memchr+0x8>
 8009c5e:	bd10      	pop	{r4, pc}

08009c60 <memcpy>:
 8009c60:	440a      	add	r2, r1
 8009c62:	4291      	cmp	r1, r2
 8009c64:	f100 33ff 	add.w	r3, r0, #4294967295
 8009c68:	d100      	bne.n	8009c6c <memcpy+0xc>
 8009c6a:	4770      	bx	lr
 8009c6c:	b510      	push	{r4, lr}
 8009c6e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009c72:	4291      	cmp	r1, r2
 8009c74:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009c78:	d1f9      	bne.n	8009c6e <memcpy+0xe>
 8009c7a:	bd10      	pop	{r4, pc}

08009c7c <memmove>:
 8009c7c:	4288      	cmp	r0, r1
 8009c7e:	b510      	push	{r4, lr}
 8009c80:	eb01 0402 	add.w	r4, r1, r2
 8009c84:	d902      	bls.n	8009c8c <memmove+0x10>
 8009c86:	4284      	cmp	r4, r0
 8009c88:	4623      	mov	r3, r4
 8009c8a:	d807      	bhi.n	8009c9c <memmove+0x20>
 8009c8c:	1e43      	subs	r3, r0, #1
 8009c8e:	42a1      	cmp	r1, r4
 8009c90:	d008      	beq.n	8009ca4 <memmove+0x28>
 8009c92:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009c96:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009c9a:	e7f8      	b.n	8009c8e <memmove+0x12>
 8009c9c:	4601      	mov	r1, r0
 8009c9e:	4402      	add	r2, r0
 8009ca0:	428a      	cmp	r2, r1
 8009ca2:	d100      	bne.n	8009ca6 <memmove+0x2a>
 8009ca4:	bd10      	pop	{r4, pc}
 8009ca6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009caa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009cae:	e7f7      	b.n	8009ca0 <memmove+0x24>

08009cb0 <_realloc_r>:
 8009cb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009cb2:	4607      	mov	r7, r0
 8009cb4:	4614      	mov	r4, r2
 8009cb6:	460e      	mov	r6, r1
 8009cb8:	b921      	cbnz	r1, 8009cc4 <_realloc_r+0x14>
 8009cba:	4611      	mov	r1, r2
 8009cbc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8009cc0:	f7ff bc36 	b.w	8009530 <_malloc_r>
 8009cc4:	b922      	cbnz	r2, 8009cd0 <_realloc_r+0x20>
 8009cc6:	f7ff fbe7 	bl	8009498 <_free_r>
 8009cca:	4625      	mov	r5, r4
 8009ccc:	4628      	mov	r0, r5
 8009cce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009cd0:	f000 f814 	bl	8009cfc <_malloc_usable_size_r>
 8009cd4:	42a0      	cmp	r0, r4
 8009cd6:	d20f      	bcs.n	8009cf8 <_realloc_r+0x48>
 8009cd8:	4621      	mov	r1, r4
 8009cda:	4638      	mov	r0, r7
 8009cdc:	f7ff fc28 	bl	8009530 <_malloc_r>
 8009ce0:	4605      	mov	r5, r0
 8009ce2:	2800      	cmp	r0, #0
 8009ce4:	d0f2      	beq.n	8009ccc <_realloc_r+0x1c>
 8009ce6:	4631      	mov	r1, r6
 8009ce8:	4622      	mov	r2, r4
 8009cea:	f7ff ffb9 	bl	8009c60 <memcpy>
 8009cee:	4631      	mov	r1, r6
 8009cf0:	4638      	mov	r0, r7
 8009cf2:	f7ff fbd1 	bl	8009498 <_free_r>
 8009cf6:	e7e9      	b.n	8009ccc <_realloc_r+0x1c>
 8009cf8:	4635      	mov	r5, r6
 8009cfa:	e7e7      	b.n	8009ccc <_realloc_r+0x1c>

08009cfc <_malloc_usable_size_r>:
 8009cfc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009d00:	1f18      	subs	r0, r3, #4
 8009d02:	2b00      	cmp	r3, #0
 8009d04:	bfbc      	itt	lt
 8009d06:	580b      	ldrlt	r3, [r1, r0]
 8009d08:	18c0      	addlt	r0, r0, r3
 8009d0a:	4770      	bx	lr

08009d0c <_init>:
 8009d0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d0e:	bf00      	nop
 8009d10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009d12:	bc08      	pop	{r3}
 8009d14:	469e      	mov	lr, r3
 8009d16:	4770      	bx	lr

08009d18 <_fini>:
 8009d18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d1a:	bf00      	nop
 8009d1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009d1e:	bc08      	pop	{r3}
 8009d20:	469e      	mov	lr, r3
 8009d22:	4770      	bx	lr
