
Heli_SPL2_Firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000184  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012588  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000012c4  08012710  08012710  00022710  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080139d4  080139d4  00030378  2**0
                  CONTENTS
  4 .ARM          00000008  080139d4  080139d4  000239d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080139dc  080139dc  00030378  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   0000000c  080139dc  080139dc  000239dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080139e8  080139e8  000239e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000378  20000000  080139ec  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001e7c  20000378  08013d64  00030378  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200021f4  08013d64  000321f4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00030378  2**0
                  CONTENTS, READONLY
 12 .debug_info   00041028  00000000  00000000  000303a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005788  00000000  00000000  000713c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002000  00000000  00000000  00076b58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001e30  00000000  00000000  00078b58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028b5b  00000000  00000000  0007a988  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002387a  00000000  00000000  000a34e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cd6b6  00000000  00000000  000c6d5d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00194413  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a120  00000000  00000000  00194468  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000378 	.word	0x20000378
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080126f8 	.word	0x080126f8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000037c 	.word	0x2000037c
 80001c4:	080126f8 	.word	0x080126f8

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmpun>:
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x10>
 8000a8e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a92:	d10a      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000a94:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	d102      	bne.n	8000aa4 <__aeabi_dcmpun+0x20>
 8000a9e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aa2:	d102      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	f04f 0001 	mov.w	r0, #1
 8000aae:	4770      	bx	lr

08000ab0 <__aeabi_d2iz>:
 8000ab0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ab4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ab8:	d215      	bcs.n	8000ae6 <__aeabi_d2iz+0x36>
 8000aba:	d511      	bpl.n	8000ae0 <__aeabi_d2iz+0x30>
 8000abc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ac0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ac4:	d912      	bls.n	8000aec <__aeabi_d2iz+0x3c>
 8000ac6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aca:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ace:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ad2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ad6:	fa23 f002 	lsr.w	r0, r3, r2
 8000ada:	bf18      	it	ne
 8000adc:	4240      	negne	r0, r0
 8000ade:	4770      	bx	lr
 8000ae0:	f04f 0000 	mov.w	r0, #0
 8000ae4:	4770      	bx	lr
 8000ae6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aea:	d105      	bne.n	8000af8 <__aeabi_d2iz+0x48>
 8000aec:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000af0:	bf08      	it	eq
 8000af2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000af6:	4770      	bx	lr
 8000af8:	f04f 0000 	mov.w	r0, #0
 8000afc:	4770      	bx	lr
 8000afe:	bf00      	nop

08000b00 <__aeabi_d2f>:
 8000b00:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b04:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b08:	bf24      	itt	cs
 8000b0a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b0e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b12:	d90d      	bls.n	8000b30 <__aeabi_d2f+0x30>
 8000b14:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b18:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b1c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b20:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b24:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b28:	bf08      	it	eq
 8000b2a:	f020 0001 	biceq.w	r0, r0, #1
 8000b2e:	4770      	bx	lr
 8000b30:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b34:	d121      	bne.n	8000b7a <__aeabi_d2f+0x7a>
 8000b36:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b3a:	bfbc      	itt	lt
 8000b3c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b40:	4770      	bxlt	lr
 8000b42:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b46:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b4a:	f1c2 0218 	rsb	r2, r2, #24
 8000b4e:	f1c2 0c20 	rsb	ip, r2, #32
 8000b52:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b56:	fa20 f002 	lsr.w	r0, r0, r2
 8000b5a:	bf18      	it	ne
 8000b5c:	f040 0001 	orrne.w	r0, r0, #1
 8000b60:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b64:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b68:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b6c:	ea40 000c 	orr.w	r0, r0, ip
 8000b70:	fa23 f302 	lsr.w	r3, r3, r2
 8000b74:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b78:	e7cc      	b.n	8000b14 <__aeabi_d2f+0x14>
 8000b7a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b7e:	d107      	bne.n	8000b90 <__aeabi_d2f+0x90>
 8000b80:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b84:	bf1e      	ittt	ne
 8000b86:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b8a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b8e:	4770      	bxne	lr
 8000b90:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b94:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b98:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b9c:	4770      	bx	lr
 8000b9e:	bf00      	nop

08000ba0 <__aeabi_frsub>:
 8000ba0:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000ba4:	e002      	b.n	8000bac <__addsf3>
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_fsub>:
 8000ba8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000bac <__addsf3>:
 8000bac:	0042      	lsls	r2, r0, #1
 8000bae:	bf1f      	itttt	ne
 8000bb0:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000bb4:	ea92 0f03 	teqne	r2, r3
 8000bb8:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000bbc:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bc0:	d06a      	beq.n	8000c98 <__addsf3+0xec>
 8000bc2:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000bc6:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000bca:	bfc1      	itttt	gt
 8000bcc:	18d2      	addgt	r2, r2, r3
 8000bce:	4041      	eorgt	r1, r0
 8000bd0:	4048      	eorgt	r0, r1
 8000bd2:	4041      	eorgt	r1, r0
 8000bd4:	bfb8      	it	lt
 8000bd6:	425b      	neglt	r3, r3
 8000bd8:	2b19      	cmp	r3, #25
 8000bda:	bf88      	it	hi
 8000bdc:	4770      	bxhi	lr
 8000bde:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000be2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000be6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000bea:	bf18      	it	ne
 8000bec:	4240      	negne	r0, r0
 8000bee:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bf2:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bf6:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bfa:	bf18      	it	ne
 8000bfc:	4249      	negne	r1, r1
 8000bfe:	ea92 0f03 	teq	r2, r3
 8000c02:	d03f      	beq.n	8000c84 <__addsf3+0xd8>
 8000c04:	f1a2 0201 	sub.w	r2, r2, #1
 8000c08:	fa41 fc03 	asr.w	ip, r1, r3
 8000c0c:	eb10 000c 	adds.w	r0, r0, ip
 8000c10:	f1c3 0320 	rsb	r3, r3, #32
 8000c14:	fa01 f103 	lsl.w	r1, r1, r3
 8000c18:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c1c:	d502      	bpl.n	8000c24 <__addsf3+0x78>
 8000c1e:	4249      	negs	r1, r1
 8000c20:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c24:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000c28:	d313      	bcc.n	8000c52 <__addsf3+0xa6>
 8000c2a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000c2e:	d306      	bcc.n	8000c3e <__addsf3+0x92>
 8000c30:	0840      	lsrs	r0, r0, #1
 8000c32:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c36:	f102 0201 	add.w	r2, r2, #1
 8000c3a:	2afe      	cmp	r2, #254	; 0xfe
 8000c3c:	d251      	bcs.n	8000ce2 <__addsf3+0x136>
 8000c3e:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c42:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c46:	bf08      	it	eq
 8000c48:	f020 0001 	biceq.w	r0, r0, #1
 8000c4c:	ea40 0003 	orr.w	r0, r0, r3
 8000c50:	4770      	bx	lr
 8000c52:	0049      	lsls	r1, r1, #1
 8000c54:	eb40 0000 	adc.w	r0, r0, r0
 8000c58:	3a01      	subs	r2, #1
 8000c5a:	bf28      	it	cs
 8000c5c:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c60:	d2ed      	bcs.n	8000c3e <__addsf3+0x92>
 8000c62:	fab0 fc80 	clz	ip, r0
 8000c66:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c6a:	ebb2 020c 	subs.w	r2, r2, ip
 8000c6e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c72:	bfaa      	itet	ge
 8000c74:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c78:	4252      	neglt	r2, r2
 8000c7a:	4318      	orrge	r0, r3
 8000c7c:	bfbc      	itt	lt
 8000c7e:	40d0      	lsrlt	r0, r2
 8000c80:	4318      	orrlt	r0, r3
 8000c82:	4770      	bx	lr
 8000c84:	f092 0f00 	teq	r2, #0
 8000c88:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c8c:	bf06      	itte	eq
 8000c8e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c92:	3201      	addeq	r2, #1
 8000c94:	3b01      	subne	r3, #1
 8000c96:	e7b5      	b.n	8000c04 <__addsf3+0x58>
 8000c98:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c9c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000ca0:	bf18      	it	ne
 8000ca2:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ca6:	d021      	beq.n	8000cec <__addsf3+0x140>
 8000ca8:	ea92 0f03 	teq	r2, r3
 8000cac:	d004      	beq.n	8000cb8 <__addsf3+0x10c>
 8000cae:	f092 0f00 	teq	r2, #0
 8000cb2:	bf08      	it	eq
 8000cb4:	4608      	moveq	r0, r1
 8000cb6:	4770      	bx	lr
 8000cb8:	ea90 0f01 	teq	r0, r1
 8000cbc:	bf1c      	itt	ne
 8000cbe:	2000      	movne	r0, #0
 8000cc0:	4770      	bxne	lr
 8000cc2:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000cc6:	d104      	bne.n	8000cd2 <__addsf3+0x126>
 8000cc8:	0040      	lsls	r0, r0, #1
 8000cca:	bf28      	it	cs
 8000ccc:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000cd0:	4770      	bx	lr
 8000cd2:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000cd6:	bf3c      	itt	cc
 8000cd8:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000cdc:	4770      	bxcc	lr
 8000cde:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ce2:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000ce6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cea:	4770      	bx	lr
 8000cec:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cf0:	bf16      	itet	ne
 8000cf2:	4608      	movne	r0, r1
 8000cf4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cf8:	4601      	movne	r1, r0
 8000cfa:	0242      	lsls	r2, r0, #9
 8000cfc:	bf06      	itte	eq
 8000cfe:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000d02:	ea90 0f01 	teqeq	r0, r1
 8000d06:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000d0a:	4770      	bx	lr

08000d0c <__aeabi_ui2f>:
 8000d0c:	f04f 0300 	mov.w	r3, #0
 8000d10:	e004      	b.n	8000d1c <__aeabi_i2f+0x8>
 8000d12:	bf00      	nop

08000d14 <__aeabi_i2f>:
 8000d14:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000d18:	bf48      	it	mi
 8000d1a:	4240      	negmi	r0, r0
 8000d1c:	ea5f 0c00 	movs.w	ip, r0
 8000d20:	bf08      	it	eq
 8000d22:	4770      	bxeq	lr
 8000d24:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000d28:	4601      	mov	r1, r0
 8000d2a:	f04f 0000 	mov.w	r0, #0
 8000d2e:	e01c      	b.n	8000d6a <__aeabi_l2f+0x2a>

08000d30 <__aeabi_ul2f>:
 8000d30:	ea50 0201 	orrs.w	r2, r0, r1
 8000d34:	bf08      	it	eq
 8000d36:	4770      	bxeq	lr
 8000d38:	f04f 0300 	mov.w	r3, #0
 8000d3c:	e00a      	b.n	8000d54 <__aeabi_l2f+0x14>
 8000d3e:	bf00      	nop

08000d40 <__aeabi_l2f>:
 8000d40:	ea50 0201 	orrs.w	r2, r0, r1
 8000d44:	bf08      	it	eq
 8000d46:	4770      	bxeq	lr
 8000d48:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d4c:	d502      	bpl.n	8000d54 <__aeabi_l2f+0x14>
 8000d4e:	4240      	negs	r0, r0
 8000d50:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d54:	ea5f 0c01 	movs.w	ip, r1
 8000d58:	bf02      	ittt	eq
 8000d5a:	4684      	moveq	ip, r0
 8000d5c:	4601      	moveq	r1, r0
 8000d5e:	2000      	moveq	r0, #0
 8000d60:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d64:	bf08      	it	eq
 8000d66:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d6a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d6e:	fabc f28c 	clz	r2, ip
 8000d72:	3a08      	subs	r2, #8
 8000d74:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d78:	db10      	blt.n	8000d9c <__aeabi_l2f+0x5c>
 8000d7a:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d7e:	4463      	add	r3, ip
 8000d80:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d84:	f1c2 0220 	rsb	r2, r2, #32
 8000d88:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d8c:	fa20 f202 	lsr.w	r2, r0, r2
 8000d90:	eb43 0002 	adc.w	r0, r3, r2
 8000d94:	bf08      	it	eq
 8000d96:	f020 0001 	biceq.w	r0, r0, #1
 8000d9a:	4770      	bx	lr
 8000d9c:	f102 0220 	add.w	r2, r2, #32
 8000da0:	fa01 fc02 	lsl.w	ip, r1, r2
 8000da4:	f1c2 0220 	rsb	r2, r2, #32
 8000da8:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000dac:	fa21 f202 	lsr.w	r2, r1, r2
 8000db0:	eb43 0002 	adc.w	r0, r3, r2
 8000db4:	bf08      	it	eq
 8000db6:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000dba:	4770      	bx	lr

08000dbc <__aeabi_fmul>:
 8000dbc:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000dc0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000dc4:	bf1e      	ittt	ne
 8000dc6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000dca:	ea92 0f0c 	teqne	r2, ip
 8000dce:	ea93 0f0c 	teqne	r3, ip
 8000dd2:	d06f      	beq.n	8000eb4 <__aeabi_fmul+0xf8>
 8000dd4:	441a      	add	r2, r3
 8000dd6:	ea80 0c01 	eor.w	ip, r0, r1
 8000dda:	0240      	lsls	r0, r0, #9
 8000ddc:	bf18      	it	ne
 8000dde:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000de2:	d01e      	beq.n	8000e22 <__aeabi_fmul+0x66>
 8000de4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000de8:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000dec:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000df0:	fba0 3101 	umull	r3, r1, r0, r1
 8000df4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000df8:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000dfc:	bf3e      	ittt	cc
 8000dfe:	0049      	lslcc	r1, r1, #1
 8000e00:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000e04:	005b      	lslcc	r3, r3, #1
 8000e06:	ea40 0001 	orr.w	r0, r0, r1
 8000e0a:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000e0e:	2afd      	cmp	r2, #253	; 0xfd
 8000e10:	d81d      	bhi.n	8000e4e <__aeabi_fmul+0x92>
 8000e12:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000e16:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e1a:	bf08      	it	eq
 8000e1c:	f020 0001 	biceq.w	r0, r0, #1
 8000e20:	4770      	bx	lr
 8000e22:	f090 0f00 	teq	r0, #0
 8000e26:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000e2a:	bf08      	it	eq
 8000e2c:	0249      	lsleq	r1, r1, #9
 8000e2e:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000e32:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000e36:	3a7f      	subs	r2, #127	; 0x7f
 8000e38:	bfc2      	ittt	gt
 8000e3a:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e3e:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e42:	4770      	bxgt	lr
 8000e44:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e48:	f04f 0300 	mov.w	r3, #0
 8000e4c:	3a01      	subs	r2, #1
 8000e4e:	dc5d      	bgt.n	8000f0c <__aeabi_fmul+0x150>
 8000e50:	f112 0f19 	cmn.w	r2, #25
 8000e54:	bfdc      	itt	le
 8000e56:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e5a:	4770      	bxle	lr
 8000e5c:	f1c2 0200 	rsb	r2, r2, #0
 8000e60:	0041      	lsls	r1, r0, #1
 8000e62:	fa21 f102 	lsr.w	r1, r1, r2
 8000e66:	f1c2 0220 	rsb	r2, r2, #32
 8000e6a:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e6e:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e72:	f140 0000 	adc.w	r0, r0, #0
 8000e76:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e7a:	bf08      	it	eq
 8000e7c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e80:	4770      	bx	lr
 8000e82:	f092 0f00 	teq	r2, #0
 8000e86:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e8a:	bf02      	ittt	eq
 8000e8c:	0040      	lsleq	r0, r0, #1
 8000e8e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e92:	3a01      	subeq	r2, #1
 8000e94:	d0f9      	beq.n	8000e8a <__aeabi_fmul+0xce>
 8000e96:	ea40 000c 	orr.w	r0, r0, ip
 8000e9a:	f093 0f00 	teq	r3, #0
 8000e9e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ea2:	bf02      	ittt	eq
 8000ea4:	0049      	lsleq	r1, r1, #1
 8000ea6:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000eaa:	3b01      	subeq	r3, #1
 8000eac:	d0f9      	beq.n	8000ea2 <__aeabi_fmul+0xe6>
 8000eae:	ea41 010c 	orr.w	r1, r1, ip
 8000eb2:	e78f      	b.n	8000dd4 <__aeabi_fmul+0x18>
 8000eb4:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000eb8:	ea92 0f0c 	teq	r2, ip
 8000ebc:	bf18      	it	ne
 8000ebe:	ea93 0f0c 	teqne	r3, ip
 8000ec2:	d00a      	beq.n	8000eda <__aeabi_fmul+0x11e>
 8000ec4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000ec8:	bf18      	it	ne
 8000eca:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000ece:	d1d8      	bne.n	8000e82 <__aeabi_fmul+0xc6>
 8000ed0:	ea80 0001 	eor.w	r0, r0, r1
 8000ed4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ed8:	4770      	bx	lr
 8000eda:	f090 0f00 	teq	r0, #0
 8000ede:	bf17      	itett	ne
 8000ee0:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000ee4:	4608      	moveq	r0, r1
 8000ee6:	f091 0f00 	teqne	r1, #0
 8000eea:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000eee:	d014      	beq.n	8000f1a <__aeabi_fmul+0x15e>
 8000ef0:	ea92 0f0c 	teq	r2, ip
 8000ef4:	d101      	bne.n	8000efa <__aeabi_fmul+0x13e>
 8000ef6:	0242      	lsls	r2, r0, #9
 8000ef8:	d10f      	bne.n	8000f1a <__aeabi_fmul+0x15e>
 8000efa:	ea93 0f0c 	teq	r3, ip
 8000efe:	d103      	bne.n	8000f08 <__aeabi_fmul+0x14c>
 8000f00:	024b      	lsls	r3, r1, #9
 8000f02:	bf18      	it	ne
 8000f04:	4608      	movne	r0, r1
 8000f06:	d108      	bne.n	8000f1a <__aeabi_fmul+0x15e>
 8000f08:	ea80 0001 	eor.w	r0, r0, r1
 8000f0c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000f10:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000f14:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f18:	4770      	bx	lr
 8000f1a:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000f1e:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000f22:	4770      	bx	lr

08000f24 <__aeabi_fdiv>:
 8000f24:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000f28:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000f2c:	bf1e      	ittt	ne
 8000f2e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000f32:	ea92 0f0c 	teqne	r2, ip
 8000f36:	ea93 0f0c 	teqne	r3, ip
 8000f3a:	d069      	beq.n	8001010 <__aeabi_fdiv+0xec>
 8000f3c:	eba2 0203 	sub.w	r2, r2, r3
 8000f40:	ea80 0c01 	eor.w	ip, r0, r1
 8000f44:	0249      	lsls	r1, r1, #9
 8000f46:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f4a:	d037      	beq.n	8000fbc <__aeabi_fdiv+0x98>
 8000f4c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f50:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f54:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f58:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f5c:	428b      	cmp	r3, r1
 8000f5e:	bf38      	it	cc
 8000f60:	005b      	lslcc	r3, r3, #1
 8000f62:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f66:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f6a:	428b      	cmp	r3, r1
 8000f6c:	bf24      	itt	cs
 8000f6e:	1a5b      	subcs	r3, r3, r1
 8000f70:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f74:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f78:	bf24      	itt	cs
 8000f7a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f7e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f82:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f86:	bf24      	itt	cs
 8000f88:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f8c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f90:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f94:	bf24      	itt	cs
 8000f96:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f9a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f9e:	011b      	lsls	r3, r3, #4
 8000fa0:	bf18      	it	ne
 8000fa2:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000fa6:	d1e0      	bne.n	8000f6a <__aeabi_fdiv+0x46>
 8000fa8:	2afd      	cmp	r2, #253	; 0xfd
 8000faa:	f63f af50 	bhi.w	8000e4e <__aeabi_fmul+0x92>
 8000fae:	428b      	cmp	r3, r1
 8000fb0:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000fb4:	bf08      	it	eq
 8000fb6:	f020 0001 	biceq.w	r0, r0, #1
 8000fba:	4770      	bx	lr
 8000fbc:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000fc0:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000fc4:	327f      	adds	r2, #127	; 0x7f
 8000fc6:	bfc2      	ittt	gt
 8000fc8:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000fcc:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000fd0:	4770      	bxgt	lr
 8000fd2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000fd6:	f04f 0300 	mov.w	r3, #0
 8000fda:	3a01      	subs	r2, #1
 8000fdc:	e737      	b.n	8000e4e <__aeabi_fmul+0x92>
 8000fde:	f092 0f00 	teq	r2, #0
 8000fe2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000fe6:	bf02      	ittt	eq
 8000fe8:	0040      	lsleq	r0, r0, #1
 8000fea:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000fee:	3a01      	subeq	r2, #1
 8000ff0:	d0f9      	beq.n	8000fe6 <__aeabi_fdiv+0xc2>
 8000ff2:	ea40 000c 	orr.w	r0, r0, ip
 8000ff6:	f093 0f00 	teq	r3, #0
 8000ffa:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ffe:	bf02      	ittt	eq
 8001000:	0049      	lsleq	r1, r1, #1
 8001002:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8001006:	3b01      	subeq	r3, #1
 8001008:	d0f9      	beq.n	8000ffe <__aeabi_fdiv+0xda>
 800100a:	ea41 010c 	orr.w	r1, r1, ip
 800100e:	e795      	b.n	8000f3c <__aeabi_fdiv+0x18>
 8001010:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8001014:	ea92 0f0c 	teq	r2, ip
 8001018:	d108      	bne.n	800102c <__aeabi_fdiv+0x108>
 800101a:	0242      	lsls	r2, r0, #9
 800101c:	f47f af7d 	bne.w	8000f1a <__aeabi_fmul+0x15e>
 8001020:	ea93 0f0c 	teq	r3, ip
 8001024:	f47f af70 	bne.w	8000f08 <__aeabi_fmul+0x14c>
 8001028:	4608      	mov	r0, r1
 800102a:	e776      	b.n	8000f1a <__aeabi_fmul+0x15e>
 800102c:	ea93 0f0c 	teq	r3, ip
 8001030:	d104      	bne.n	800103c <__aeabi_fdiv+0x118>
 8001032:	024b      	lsls	r3, r1, #9
 8001034:	f43f af4c 	beq.w	8000ed0 <__aeabi_fmul+0x114>
 8001038:	4608      	mov	r0, r1
 800103a:	e76e      	b.n	8000f1a <__aeabi_fmul+0x15e>
 800103c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8001040:	bf18      	it	ne
 8001042:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8001046:	d1ca      	bne.n	8000fde <__aeabi_fdiv+0xba>
 8001048:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 800104c:	f47f af5c 	bne.w	8000f08 <__aeabi_fmul+0x14c>
 8001050:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8001054:	f47f af3c 	bne.w	8000ed0 <__aeabi_fmul+0x114>
 8001058:	e75f      	b.n	8000f1a <__aeabi_fmul+0x15e>
 800105a:	bf00      	nop

0800105c <__gesf2>:
 800105c:	f04f 3cff 	mov.w	ip, #4294967295
 8001060:	e006      	b.n	8001070 <__cmpsf2+0x4>
 8001062:	bf00      	nop

08001064 <__lesf2>:
 8001064:	f04f 0c01 	mov.w	ip, #1
 8001068:	e002      	b.n	8001070 <__cmpsf2+0x4>
 800106a:	bf00      	nop

0800106c <__cmpsf2>:
 800106c:	f04f 0c01 	mov.w	ip, #1
 8001070:	f84d cd04 	str.w	ip, [sp, #-4]!
 8001074:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001078:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800107c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001080:	bf18      	it	ne
 8001082:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8001086:	d011      	beq.n	80010ac <__cmpsf2+0x40>
 8001088:	b001      	add	sp, #4
 800108a:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800108e:	bf18      	it	ne
 8001090:	ea90 0f01 	teqne	r0, r1
 8001094:	bf58      	it	pl
 8001096:	ebb2 0003 	subspl.w	r0, r2, r3
 800109a:	bf88      	it	hi
 800109c:	17c8      	asrhi	r0, r1, #31
 800109e:	bf38      	it	cc
 80010a0:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 80010a4:	bf18      	it	ne
 80010a6:	f040 0001 	orrne.w	r0, r0, #1
 80010aa:	4770      	bx	lr
 80010ac:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80010b0:	d102      	bne.n	80010b8 <__cmpsf2+0x4c>
 80010b2:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 80010b6:	d105      	bne.n	80010c4 <__cmpsf2+0x58>
 80010b8:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 80010bc:	d1e4      	bne.n	8001088 <__cmpsf2+0x1c>
 80010be:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 80010c2:	d0e1      	beq.n	8001088 <__cmpsf2+0x1c>
 80010c4:	f85d 0b04 	ldr.w	r0, [sp], #4
 80010c8:	4770      	bx	lr
 80010ca:	bf00      	nop

080010cc <__aeabi_cfrcmple>:
 80010cc:	4684      	mov	ip, r0
 80010ce:	4608      	mov	r0, r1
 80010d0:	4661      	mov	r1, ip
 80010d2:	e7ff      	b.n	80010d4 <__aeabi_cfcmpeq>

080010d4 <__aeabi_cfcmpeq>:
 80010d4:	b50f      	push	{r0, r1, r2, r3, lr}
 80010d6:	f7ff ffc9 	bl	800106c <__cmpsf2>
 80010da:	2800      	cmp	r0, #0
 80010dc:	bf48      	it	mi
 80010de:	f110 0f00 	cmnmi.w	r0, #0
 80010e2:	bd0f      	pop	{r0, r1, r2, r3, pc}

080010e4 <__aeabi_fcmpeq>:
 80010e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010e8:	f7ff fff4 	bl	80010d4 <__aeabi_cfcmpeq>
 80010ec:	bf0c      	ite	eq
 80010ee:	2001      	moveq	r0, #1
 80010f0:	2000      	movne	r0, #0
 80010f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010f6:	bf00      	nop

080010f8 <__aeabi_fcmplt>:
 80010f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010fc:	f7ff ffea 	bl	80010d4 <__aeabi_cfcmpeq>
 8001100:	bf34      	ite	cc
 8001102:	2001      	movcc	r0, #1
 8001104:	2000      	movcs	r0, #0
 8001106:	f85d fb08 	ldr.w	pc, [sp], #8
 800110a:	bf00      	nop

0800110c <__aeabi_fcmple>:
 800110c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001110:	f7ff ffe0 	bl	80010d4 <__aeabi_cfcmpeq>
 8001114:	bf94      	ite	ls
 8001116:	2001      	movls	r0, #1
 8001118:	2000      	movhi	r0, #0
 800111a:	f85d fb08 	ldr.w	pc, [sp], #8
 800111e:	bf00      	nop

08001120 <__aeabi_fcmpge>:
 8001120:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001124:	f7ff ffd2 	bl	80010cc <__aeabi_cfrcmple>
 8001128:	bf94      	ite	ls
 800112a:	2001      	movls	r0, #1
 800112c:	2000      	movhi	r0, #0
 800112e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001132:	bf00      	nop

08001134 <__aeabi_fcmpgt>:
 8001134:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001138:	f7ff ffc8 	bl	80010cc <__aeabi_cfrcmple>
 800113c:	bf34      	ite	cc
 800113e:	2001      	movcc	r0, #1
 8001140:	2000      	movcs	r0, #0
 8001142:	f85d fb08 	ldr.w	pc, [sp], #8
 8001146:	bf00      	nop

08001148 <__aeabi_fcmpun>:
 8001148:	ea4f 0240 	mov.w	r2, r0, lsl #1
 800114c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001150:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001154:	d102      	bne.n	800115c <__aeabi_fcmpun+0x14>
 8001156:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800115a:	d108      	bne.n	800116e <__aeabi_fcmpun+0x26>
 800115c:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001160:	d102      	bne.n	8001168 <__aeabi_fcmpun+0x20>
 8001162:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8001166:	d102      	bne.n	800116e <__aeabi_fcmpun+0x26>
 8001168:	f04f 0000 	mov.w	r0, #0
 800116c:	4770      	bx	lr
 800116e:	f04f 0001 	mov.w	r0, #1
 8001172:	4770      	bx	lr

08001174 <__aeabi_f2iz>:
 8001174:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001178:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 800117c:	d30f      	bcc.n	800119e <__aeabi_f2iz+0x2a>
 800117e:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8001182:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001186:	d90d      	bls.n	80011a4 <__aeabi_f2iz+0x30>
 8001188:	ea4f 2300 	mov.w	r3, r0, lsl #8
 800118c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001190:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8001194:	fa23 f002 	lsr.w	r0, r3, r2
 8001198:	bf18      	it	ne
 800119a:	4240      	negne	r0, r0
 800119c:	4770      	bx	lr
 800119e:	f04f 0000 	mov.w	r0, #0
 80011a2:	4770      	bx	lr
 80011a4:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80011a8:	d101      	bne.n	80011ae <__aeabi_f2iz+0x3a>
 80011aa:	0242      	lsls	r2, r0, #9
 80011ac:	d105      	bne.n	80011ba <__aeabi_f2iz+0x46>
 80011ae:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 80011b2:	bf08      	it	eq
 80011b4:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80011b8:	4770      	bx	lr
 80011ba:	f04f 0000 	mov.w	r0, #0
 80011be:	4770      	bx	lr

080011c0 <__aeabi_f2uiz>:
 80011c0:	0042      	lsls	r2, r0, #1
 80011c2:	d20e      	bcs.n	80011e2 <__aeabi_f2uiz+0x22>
 80011c4:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80011c8:	d30b      	bcc.n	80011e2 <__aeabi_f2uiz+0x22>
 80011ca:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80011ce:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80011d2:	d409      	bmi.n	80011e8 <__aeabi_f2uiz+0x28>
 80011d4:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80011d8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80011dc:	fa23 f002 	lsr.w	r0, r3, r2
 80011e0:	4770      	bx	lr
 80011e2:	f04f 0000 	mov.w	r0, #0
 80011e6:	4770      	bx	lr
 80011e8:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80011ec:	d101      	bne.n	80011f2 <__aeabi_f2uiz+0x32>
 80011ee:	0242      	lsls	r2, r0, #9
 80011f0:	d102      	bne.n	80011f8 <__aeabi_f2uiz+0x38>
 80011f2:	f04f 30ff 	mov.w	r0, #4294967295
 80011f6:	4770      	bx	lr
 80011f8:	f04f 0000 	mov.w	r0, #0
 80011fc:	4770      	bx	lr
 80011fe:	bf00      	nop

08001200 <__aeabi_uldivmod>:
 8001200:	b953      	cbnz	r3, 8001218 <__aeabi_uldivmod+0x18>
 8001202:	b94a      	cbnz	r2, 8001218 <__aeabi_uldivmod+0x18>
 8001204:	2900      	cmp	r1, #0
 8001206:	bf08      	it	eq
 8001208:	2800      	cmpeq	r0, #0
 800120a:	bf1c      	itt	ne
 800120c:	f04f 31ff 	movne.w	r1, #4294967295
 8001210:	f04f 30ff 	movne.w	r0, #4294967295
 8001214:	f000 b96e 	b.w	80014f4 <__aeabi_idiv0>
 8001218:	f1ad 0c08 	sub.w	ip, sp, #8
 800121c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8001220:	f000 f806 	bl	8001230 <__udivmoddi4>
 8001224:	f8dd e004 	ldr.w	lr, [sp, #4]
 8001228:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800122c:	b004      	add	sp, #16
 800122e:	4770      	bx	lr

08001230 <__udivmoddi4>:
 8001230:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001234:	9e08      	ldr	r6, [sp, #32]
 8001236:	460d      	mov	r5, r1
 8001238:	4604      	mov	r4, r0
 800123a:	468e      	mov	lr, r1
 800123c:	2b00      	cmp	r3, #0
 800123e:	f040 8083 	bne.w	8001348 <__udivmoddi4+0x118>
 8001242:	428a      	cmp	r2, r1
 8001244:	4617      	mov	r7, r2
 8001246:	d947      	bls.n	80012d8 <__udivmoddi4+0xa8>
 8001248:	fab2 f382 	clz	r3, r2
 800124c:	b14b      	cbz	r3, 8001262 <__udivmoddi4+0x32>
 800124e:	f1c3 0120 	rsb	r1, r3, #32
 8001252:	fa05 fe03 	lsl.w	lr, r5, r3
 8001256:	fa20 f101 	lsr.w	r1, r0, r1
 800125a:	409f      	lsls	r7, r3
 800125c:	ea41 0e0e 	orr.w	lr, r1, lr
 8001260:	409c      	lsls	r4, r3
 8001262:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8001266:	fbbe fcf8 	udiv	ip, lr, r8
 800126a:	fa1f f987 	uxth.w	r9, r7
 800126e:	fb08 e21c 	mls	r2, r8, ip, lr
 8001272:	fb0c f009 	mul.w	r0, ip, r9
 8001276:	0c21      	lsrs	r1, r4, #16
 8001278:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
 800127c:	4290      	cmp	r0, r2
 800127e:	d90a      	bls.n	8001296 <__udivmoddi4+0x66>
 8001280:	18ba      	adds	r2, r7, r2
 8001282:	f10c 31ff 	add.w	r1, ip, #4294967295
 8001286:	f080 8118 	bcs.w	80014ba <__udivmoddi4+0x28a>
 800128a:	4290      	cmp	r0, r2
 800128c:	f240 8115 	bls.w	80014ba <__udivmoddi4+0x28a>
 8001290:	f1ac 0c02 	sub.w	ip, ip, #2
 8001294:	443a      	add	r2, r7
 8001296:	1a12      	subs	r2, r2, r0
 8001298:	fbb2 f0f8 	udiv	r0, r2, r8
 800129c:	fb08 2210 	mls	r2, r8, r0, r2
 80012a0:	fb00 f109 	mul.w	r1, r0, r9
 80012a4:	b2a4      	uxth	r4, r4
 80012a6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80012aa:	42a1      	cmp	r1, r4
 80012ac:	d909      	bls.n	80012c2 <__udivmoddi4+0x92>
 80012ae:	193c      	adds	r4, r7, r4
 80012b0:	f100 32ff 	add.w	r2, r0, #4294967295
 80012b4:	f080 8103 	bcs.w	80014be <__udivmoddi4+0x28e>
 80012b8:	42a1      	cmp	r1, r4
 80012ba:	f240 8100 	bls.w	80014be <__udivmoddi4+0x28e>
 80012be:	3802      	subs	r0, #2
 80012c0:	443c      	add	r4, r7
 80012c2:	1a64      	subs	r4, r4, r1
 80012c4:	2100      	movs	r1, #0
 80012c6:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80012ca:	b11e      	cbz	r6, 80012d4 <__udivmoddi4+0xa4>
 80012cc:	2200      	movs	r2, #0
 80012ce:	40dc      	lsrs	r4, r3
 80012d0:	e9c6 4200 	strd	r4, r2, [r6]
 80012d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80012d8:	b902      	cbnz	r2, 80012dc <__udivmoddi4+0xac>
 80012da:	deff      	udf	#255	; 0xff
 80012dc:	fab2 f382 	clz	r3, r2
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d14f      	bne.n	8001384 <__udivmoddi4+0x154>
 80012e4:	1a8d      	subs	r5, r1, r2
 80012e6:	2101      	movs	r1, #1
 80012e8:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80012ec:	fa1f f882 	uxth.w	r8, r2
 80012f0:	fbb5 fcfe 	udiv	ip, r5, lr
 80012f4:	fb0e 551c 	mls	r5, lr, ip, r5
 80012f8:	fb08 f00c 	mul.w	r0, r8, ip
 80012fc:	0c22      	lsrs	r2, r4, #16
 80012fe:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
 8001302:	42a8      	cmp	r0, r5
 8001304:	d907      	bls.n	8001316 <__udivmoddi4+0xe6>
 8001306:	197d      	adds	r5, r7, r5
 8001308:	f10c 32ff 	add.w	r2, ip, #4294967295
 800130c:	d202      	bcs.n	8001314 <__udivmoddi4+0xe4>
 800130e:	42a8      	cmp	r0, r5
 8001310:	f200 80e9 	bhi.w	80014e6 <__udivmoddi4+0x2b6>
 8001314:	4694      	mov	ip, r2
 8001316:	1a2d      	subs	r5, r5, r0
 8001318:	fbb5 f0fe 	udiv	r0, r5, lr
 800131c:	fb0e 5510 	mls	r5, lr, r0, r5
 8001320:	fb08 f800 	mul.w	r8, r8, r0
 8001324:	b2a4      	uxth	r4, r4
 8001326:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800132a:	45a0      	cmp	r8, r4
 800132c:	d907      	bls.n	800133e <__udivmoddi4+0x10e>
 800132e:	193c      	adds	r4, r7, r4
 8001330:	f100 32ff 	add.w	r2, r0, #4294967295
 8001334:	d202      	bcs.n	800133c <__udivmoddi4+0x10c>
 8001336:	45a0      	cmp	r8, r4
 8001338:	f200 80d9 	bhi.w	80014ee <__udivmoddi4+0x2be>
 800133c:	4610      	mov	r0, r2
 800133e:	eba4 0408 	sub.w	r4, r4, r8
 8001342:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8001346:	e7c0      	b.n	80012ca <__udivmoddi4+0x9a>
 8001348:	428b      	cmp	r3, r1
 800134a:	d908      	bls.n	800135e <__udivmoddi4+0x12e>
 800134c:	2e00      	cmp	r6, #0
 800134e:	f000 80b1 	beq.w	80014b4 <__udivmoddi4+0x284>
 8001352:	2100      	movs	r1, #0
 8001354:	e9c6 0500 	strd	r0, r5, [r6]
 8001358:	4608      	mov	r0, r1
 800135a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800135e:	fab3 f183 	clz	r1, r3
 8001362:	2900      	cmp	r1, #0
 8001364:	d14b      	bne.n	80013fe <__udivmoddi4+0x1ce>
 8001366:	42ab      	cmp	r3, r5
 8001368:	d302      	bcc.n	8001370 <__udivmoddi4+0x140>
 800136a:	4282      	cmp	r2, r0
 800136c:	f200 80b9 	bhi.w	80014e2 <__udivmoddi4+0x2b2>
 8001370:	1a84      	subs	r4, r0, r2
 8001372:	eb65 0303 	sbc.w	r3, r5, r3
 8001376:	2001      	movs	r0, #1
 8001378:	469e      	mov	lr, r3
 800137a:	2e00      	cmp	r6, #0
 800137c:	d0aa      	beq.n	80012d4 <__udivmoddi4+0xa4>
 800137e:	e9c6 4e00 	strd	r4, lr, [r6]
 8001382:	e7a7      	b.n	80012d4 <__udivmoddi4+0xa4>
 8001384:	409f      	lsls	r7, r3
 8001386:	f1c3 0220 	rsb	r2, r3, #32
 800138a:	40d1      	lsrs	r1, r2
 800138c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8001390:	fbb1 f0fe 	udiv	r0, r1, lr
 8001394:	fa1f f887 	uxth.w	r8, r7
 8001398:	fb0e 1110 	mls	r1, lr, r0, r1
 800139c:	fa24 f202 	lsr.w	r2, r4, r2
 80013a0:	409d      	lsls	r5, r3
 80013a2:	fb00 fc08 	mul.w	ip, r0, r8
 80013a6:	432a      	orrs	r2, r5
 80013a8:	0c15      	lsrs	r5, r2, #16
 80013aa:	ea45 4501 	orr.w	r5, r5, r1, lsl #16
 80013ae:	45ac      	cmp	ip, r5
 80013b0:	fa04 f403 	lsl.w	r4, r4, r3
 80013b4:	d909      	bls.n	80013ca <__udivmoddi4+0x19a>
 80013b6:	197d      	adds	r5, r7, r5
 80013b8:	f100 31ff 	add.w	r1, r0, #4294967295
 80013bc:	f080 808f 	bcs.w	80014de <__udivmoddi4+0x2ae>
 80013c0:	45ac      	cmp	ip, r5
 80013c2:	f240 808c 	bls.w	80014de <__udivmoddi4+0x2ae>
 80013c6:	3802      	subs	r0, #2
 80013c8:	443d      	add	r5, r7
 80013ca:	eba5 050c 	sub.w	r5, r5, ip
 80013ce:	fbb5 f1fe 	udiv	r1, r5, lr
 80013d2:	fb0e 5c11 	mls	ip, lr, r1, r5
 80013d6:	fb01 f908 	mul.w	r9, r1, r8
 80013da:	b295      	uxth	r5, r2
 80013dc:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 80013e0:	45a9      	cmp	r9, r5
 80013e2:	d907      	bls.n	80013f4 <__udivmoddi4+0x1c4>
 80013e4:	197d      	adds	r5, r7, r5
 80013e6:	f101 32ff 	add.w	r2, r1, #4294967295
 80013ea:	d274      	bcs.n	80014d6 <__udivmoddi4+0x2a6>
 80013ec:	45a9      	cmp	r9, r5
 80013ee:	d972      	bls.n	80014d6 <__udivmoddi4+0x2a6>
 80013f0:	3902      	subs	r1, #2
 80013f2:	443d      	add	r5, r7
 80013f4:	eba5 0509 	sub.w	r5, r5, r9
 80013f8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80013fc:	e778      	b.n	80012f0 <__udivmoddi4+0xc0>
 80013fe:	f1c1 0720 	rsb	r7, r1, #32
 8001402:	408b      	lsls	r3, r1
 8001404:	fa22 fc07 	lsr.w	ip, r2, r7
 8001408:	ea4c 0c03 	orr.w	ip, ip, r3
 800140c:	fa25 f407 	lsr.w	r4, r5, r7
 8001410:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8001414:	fbb4 f9fe 	udiv	r9, r4, lr
 8001418:	fa1f f88c 	uxth.w	r8, ip
 800141c:	fb0e 4419 	mls	r4, lr, r9, r4
 8001420:	fa20 f307 	lsr.w	r3, r0, r7
 8001424:	fb09 fa08 	mul.w	sl, r9, r8
 8001428:	408d      	lsls	r5, r1
 800142a:	431d      	orrs	r5, r3
 800142c:	0c2b      	lsrs	r3, r5, #16
 800142e:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8001432:	45a2      	cmp	sl, r4
 8001434:	fa02 f201 	lsl.w	r2, r2, r1
 8001438:	fa00 f301 	lsl.w	r3, r0, r1
 800143c:	d909      	bls.n	8001452 <__udivmoddi4+0x222>
 800143e:	eb1c 0404 	adds.w	r4, ip, r4
 8001442:	f109 30ff 	add.w	r0, r9, #4294967295
 8001446:	d248      	bcs.n	80014da <__udivmoddi4+0x2aa>
 8001448:	45a2      	cmp	sl, r4
 800144a:	d946      	bls.n	80014da <__udivmoddi4+0x2aa>
 800144c:	f1a9 0902 	sub.w	r9, r9, #2
 8001450:	4464      	add	r4, ip
 8001452:	eba4 040a 	sub.w	r4, r4, sl
 8001456:	fbb4 f0fe 	udiv	r0, r4, lr
 800145a:	fb0e 4410 	mls	r4, lr, r0, r4
 800145e:	fb00 fa08 	mul.w	sl, r0, r8
 8001462:	b2ad      	uxth	r5, r5
 8001464:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8001468:	45a2      	cmp	sl, r4
 800146a:	d908      	bls.n	800147e <__udivmoddi4+0x24e>
 800146c:	eb1c 0404 	adds.w	r4, ip, r4
 8001470:	f100 35ff 	add.w	r5, r0, #4294967295
 8001474:	d22d      	bcs.n	80014d2 <__udivmoddi4+0x2a2>
 8001476:	45a2      	cmp	sl, r4
 8001478:	d92b      	bls.n	80014d2 <__udivmoddi4+0x2a2>
 800147a:	3802      	subs	r0, #2
 800147c:	4464      	add	r4, ip
 800147e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8001482:	fba0 8902 	umull	r8, r9, r0, r2
 8001486:	eba4 040a 	sub.w	r4, r4, sl
 800148a:	454c      	cmp	r4, r9
 800148c:	46c6      	mov	lr, r8
 800148e:	464d      	mov	r5, r9
 8001490:	d319      	bcc.n	80014c6 <__udivmoddi4+0x296>
 8001492:	d016      	beq.n	80014c2 <__udivmoddi4+0x292>
 8001494:	b15e      	cbz	r6, 80014ae <__udivmoddi4+0x27e>
 8001496:	ebb3 020e 	subs.w	r2, r3, lr
 800149a:	eb64 0405 	sbc.w	r4, r4, r5
 800149e:	fa04 f707 	lsl.w	r7, r4, r7
 80014a2:	fa22 f301 	lsr.w	r3, r2, r1
 80014a6:	431f      	orrs	r7, r3
 80014a8:	40cc      	lsrs	r4, r1
 80014aa:	e9c6 7400 	strd	r7, r4, [r6]
 80014ae:	2100      	movs	r1, #0
 80014b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80014b4:	4631      	mov	r1, r6
 80014b6:	4630      	mov	r0, r6
 80014b8:	e70c      	b.n	80012d4 <__udivmoddi4+0xa4>
 80014ba:	468c      	mov	ip, r1
 80014bc:	e6eb      	b.n	8001296 <__udivmoddi4+0x66>
 80014be:	4610      	mov	r0, r2
 80014c0:	e6ff      	b.n	80012c2 <__udivmoddi4+0x92>
 80014c2:	4543      	cmp	r3, r8
 80014c4:	d2e6      	bcs.n	8001494 <__udivmoddi4+0x264>
 80014c6:	ebb8 0e02 	subs.w	lr, r8, r2
 80014ca:	eb69 050c 	sbc.w	r5, r9, ip
 80014ce:	3801      	subs	r0, #1
 80014d0:	e7e0      	b.n	8001494 <__udivmoddi4+0x264>
 80014d2:	4628      	mov	r0, r5
 80014d4:	e7d3      	b.n	800147e <__udivmoddi4+0x24e>
 80014d6:	4611      	mov	r1, r2
 80014d8:	e78c      	b.n	80013f4 <__udivmoddi4+0x1c4>
 80014da:	4681      	mov	r9, r0
 80014dc:	e7b9      	b.n	8001452 <__udivmoddi4+0x222>
 80014de:	4608      	mov	r0, r1
 80014e0:	e773      	b.n	80013ca <__udivmoddi4+0x19a>
 80014e2:	4608      	mov	r0, r1
 80014e4:	e749      	b.n	800137a <__udivmoddi4+0x14a>
 80014e6:	f1ac 0c02 	sub.w	ip, ip, #2
 80014ea:	443d      	add	r5, r7
 80014ec:	e713      	b.n	8001316 <__udivmoddi4+0xe6>
 80014ee:	3802      	subs	r0, #2
 80014f0:	443c      	add	r4, r7
 80014f2:	e724      	b.n	800133e <__udivmoddi4+0x10e>

080014f4 <__aeabi_idiv0>:
 80014f4:	4770      	bx	lr
 80014f6:	bf00      	nop

080014f8 <_Z8readBitshhhhPh>:
 * @param bitStart First bit position to read (0-7)
 * @param length Number of bits to read (not more than 8)
 * @param data Container for right-aligned value (i.e. '101' read from any bitStart position will equal 0x05)
 * @return Status of read operation (true = success)
 */
int8_t readBits(uint8_t devAddr, uint8_t regAddr, uint8_t bitStart, uint8_t length, uint8_t *data) {
 80014f8:	b590      	push	{r4, r7, lr}
 80014fa:	b089      	sub	sp, #36	; 0x24
 80014fc:	af04      	add	r7, sp, #16
 80014fe:	4604      	mov	r4, r0
 8001500:	4608      	mov	r0, r1
 8001502:	4611      	mov	r1, r2
 8001504:	461a      	mov	r2, r3
 8001506:	4623      	mov	r3, r4
 8001508:	71fb      	strb	r3, [r7, #7]
 800150a:	4603      	mov	r3, r0
 800150c:	71bb      	strb	r3, [r7, #6]
 800150e:	460b      	mov	r3, r1
 8001510:	717b      	strb	r3, [r7, #5]
 8001512:	4613      	mov	r3, r2
 8001514:	713b      	strb	r3, [r7, #4]
  // 01101001 read byte
  // 76543210 bit numbers
  //    xxx   args: bitStart=4, length=3
  //    010   masked
  //   -> 010 shifted
  sendBuf[0] = regAddr;
 8001516:	4a25      	ldr	r2, [pc, #148]	; (80015ac <_Z8readBitshhhhPh+0xb4>)
 8001518:	79bb      	ldrb	r3, [r7, #6]
 800151a:	7013      	strb	r3, [r2, #0]
  uint8_t buffer;
  while(HAL_I2C_Mem_Read(&hi2c1,devAddr,regAddr,I2C_MEMADD_SIZE_8BIT,&buffer,1,I2CDLY) != HAL_OK){
 800151c:	79fb      	ldrb	r3, [r7, #7]
 800151e:	b299      	uxth	r1, r3
 8001520:	79bb      	ldrb	r3, [r7, #6]
 8001522:	b29a      	uxth	r2, r3
 8001524:	2301      	movs	r3, #1
 8001526:	9302      	str	r3, [sp, #8]
 8001528:	2301      	movs	r3, #1
 800152a:	9301      	str	r3, [sp, #4]
 800152c:	f107 030c 	add.w	r3, r7, #12
 8001530:	9300      	str	r3, [sp, #0]
 8001532:	2301      	movs	r3, #1
 8001534:	481e      	ldr	r0, [pc, #120]	; (80015b0 <_Z8readBitshhhhPh+0xb8>)
 8001536:	f005 f8cd 	bl	80066d4 <HAL_I2C_Mem_Read>
 800153a:	4603      	mov	r3, r0
 800153c:	2b00      	cmp	r3, #0
 800153e:	bf14      	ite	ne
 8001540:	2301      	movne	r3, #1
 8001542:	2300      	moveq	r3, #0
 8001544:	b2db      	uxtb	r3, r3
 8001546:	2b00      	cmp	r3, #0
 8001548:	d002      	beq.n	8001550 <_Z8readBitshhhhPh+0x58>
  	  MX_I2C1_Init();
 800154a:	f002 fca7 	bl	8003e9c <MX_I2C1_Init>
  while(HAL_I2C_Mem_Read(&hi2c1,devAddr,regAddr,I2C_MEMADD_SIZE_8BIT,&buffer,1,I2CDLY) != HAL_OK){
 800154e:	e7e5      	b.n	800151c <_Z8readBitshhhhPh+0x24>
    }
  uint8_t response = BCM2835_I2C_REASON_OK;
 8001550:	2301      	movs	r3, #1
 8001552:	73fb      	strb	r3, [r7, #15]
  uint8_t b = buffer;
 8001554:	7b3b      	ldrb	r3, [r7, #12]
 8001556:	73bb      	strb	r3, [r7, #14]
  if (response == BCM2835_I2C_REASON_OK) {
 8001558:	7bfb      	ldrb	r3, [r7, #15]
 800155a:	2b01      	cmp	r3, #1
 800155c:	d11a      	bne.n	8001594 <_Z8readBitshhhhPh+0x9c>
    uint8_t mask = ((1 << length) - 1) << (bitStart - length + 1);
 800155e:	793b      	ldrb	r3, [r7, #4]
 8001560:	2201      	movs	r2, #1
 8001562:	fa02 f303 	lsl.w	r3, r2, r3
 8001566:	1e5a      	subs	r2, r3, #1
 8001568:	7979      	ldrb	r1, [r7, #5]
 800156a:	793b      	ldrb	r3, [r7, #4]
 800156c:	1acb      	subs	r3, r1, r3
 800156e:	3301      	adds	r3, #1
 8001570:	fa02 f303 	lsl.w	r3, r2, r3
 8001574:	737b      	strb	r3, [r7, #13]
    b &= mask;
 8001576:	7bba      	ldrb	r2, [r7, #14]
 8001578:	7b7b      	ldrb	r3, [r7, #13]
 800157a:	4013      	ands	r3, r2
 800157c:	73bb      	strb	r3, [r7, #14]
    b >>= (bitStart - length + 1);
 800157e:	7bba      	ldrb	r2, [r7, #14]
 8001580:	7979      	ldrb	r1, [r7, #5]
 8001582:	793b      	ldrb	r3, [r7, #4]
 8001584:	1acb      	subs	r3, r1, r3
 8001586:	3301      	adds	r3, #1
 8001588:	fa42 f303 	asr.w	r3, r2, r3
 800158c:	73bb      	strb	r3, [r7, #14]
    *data = b;
 800158e:	6a3b      	ldr	r3, [r7, #32]
 8001590:	7bba      	ldrb	r2, [r7, #14]
 8001592:	701a      	strb	r2, [r3, #0]
  }
  return response == BCM2835_I2C_REASON_OK;
 8001594:	7bfb      	ldrb	r3, [r7, #15]
 8001596:	2b01      	cmp	r3, #1
 8001598:	bf0c      	ite	eq
 800159a:	2301      	moveq	r3, #1
 800159c:	2300      	movne	r3, #0
 800159e:	b2db      	uxtb	r3, r3
 80015a0:	b25b      	sxtb	r3, r3
}
 80015a2:	4618      	mov	r0, r3
 80015a4:	3714      	adds	r7, #20
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bd90      	pop	{r4, r7, pc}
 80015aa:	bf00      	nop
 80015ac:	20000394 	.word	0x20000394
 80015b0:	20000678 	.word	0x20000678

080015b4 <_Z8readBytehhPh>:
 * @param devAddr I2C slave device address
 * @param regAddr Register regAddr to read from
 * @param data Container for byte value read from device
 * @return Status of read operation (true = success)
 */
int8_t readByte(uint8_t devAddr, uint8_t regAddr, uint8_t *data) {
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b088      	sub	sp, #32
 80015b8:	af04      	add	r7, sp, #16
 80015ba:	4603      	mov	r3, r0
 80015bc:	603a      	str	r2, [r7, #0]
 80015be:	71fb      	strb	r3, [r7, #7]
 80015c0:	460b      	mov	r3, r1
 80015c2:	71bb      	strb	r3, [r7, #6]
  sendBuf[0] = regAddr;
 80015c4:	4a16      	ldr	r2, [pc, #88]	; (8001620 <_Z8readBytehhPh+0x6c>)
 80015c6:	79bb      	ldrb	r3, [r7, #6]
 80015c8:	7013      	strb	r3, [r2, #0]
  uint8_t buffer;
  while(HAL_I2C_Mem_Read(&hi2c1,devAddr,regAddr,I2C_MEMADD_SIZE_8BIT,&buffer,1,I2CDLY) != HAL_OK){
 80015ca:	79fb      	ldrb	r3, [r7, #7]
 80015cc:	b299      	uxth	r1, r3
 80015ce:	79bb      	ldrb	r3, [r7, #6]
 80015d0:	b29a      	uxth	r2, r3
 80015d2:	2301      	movs	r3, #1
 80015d4:	9302      	str	r3, [sp, #8]
 80015d6:	2301      	movs	r3, #1
 80015d8:	9301      	str	r3, [sp, #4]
 80015da:	f107 030e 	add.w	r3, r7, #14
 80015de:	9300      	str	r3, [sp, #0]
 80015e0:	2301      	movs	r3, #1
 80015e2:	4810      	ldr	r0, [pc, #64]	; (8001624 <_Z8readBytehhPh+0x70>)
 80015e4:	f005 f876 	bl	80066d4 <HAL_I2C_Mem_Read>
 80015e8:	4603      	mov	r3, r0
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	bf14      	ite	ne
 80015ee:	2301      	movne	r3, #1
 80015f0:	2300      	moveq	r3, #0
 80015f2:	b2db      	uxtb	r3, r3
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d002      	beq.n	80015fe <_Z8readBytehhPh+0x4a>
    MX_I2C1_Init();
 80015f8:	f002 fc50 	bl	8003e9c <MX_I2C1_Init>
  while(HAL_I2C_Mem_Read(&hi2c1,devAddr,regAddr,I2C_MEMADD_SIZE_8BIT,&buffer,1,I2CDLY) != HAL_OK){
 80015fc:	e7e5      	b.n	80015ca <_Z8readBytehhPh+0x16>
  }
  uint8_t response = BCM2835_I2C_REASON_OK;
 80015fe:	2301      	movs	r3, #1
 8001600:	73fb      	strb	r3, [r7, #15]
  data[0] = buffer;
 8001602:	7bba      	ldrb	r2, [r7, #14]
 8001604:	683b      	ldr	r3, [r7, #0]
 8001606:	701a      	strb	r2, [r3, #0]
  return response == BCM2835_I2C_REASON_OK;
 8001608:	7bfb      	ldrb	r3, [r7, #15]
 800160a:	2b01      	cmp	r3, #1
 800160c:	bf0c      	ite	eq
 800160e:	2301      	moveq	r3, #1
 8001610:	2300      	movne	r3, #0
 8001612:	b2db      	uxtb	r3, r3
 8001614:	b25b      	sxtb	r3, r3
}
 8001616:	4618      	mov	r0, r3
 8001618:	3710      	adds	r7, #16
 800161a:	46bd      	mov	sp, r7
 800161c:	bd80      	pop	{r7, pc}
 800161e:	bf00      	nop
 8001620:	20000394 	.word	0x20000394
 8001624:	20000678 	.word	0x20000678

08001628 <_Z9readByteshhhPh>:
 * @param regAddr First register regAddr to read from
 * @param length Number of bytes to read
 * @param data Buffer to store read data in
 * @return I2C_TransferReturn_TypeDef http://downloads.energymicro.com/documentation/doxygen/group__I2C.html
 */
int8_t readBytes(uint8_t devAddr, uint8_t regAddr, uint8_t length, uint8_t *data) {
 8001628:	b5b0      	push	{r4, r5, r7, lr}
 800162a:	b08a      	sub	sp, #40	; 0x28
 800162c:	af04      	add	r7, sp, #16
 800162e:	603b      	str	r3, [r7, #0]
 8001630:	4603      	mov	r3, r0
 8001632:	71fb      	strb	r3, [r7, #7]
 8001634:	460b      	mov	r3, r1
 8001636:	71bb      	strb	r3, [r7, #6]
 8001638:	4613      	mov	r3, r2
 800163a:	717b      	strb	r3, [r7, #5]
  uint8_t response = BCM2835_I2C_REASON_OK;
  int i ;
  for (i = 0; i < length ; i++) {
    data[i] = (uint8_t) buffer[i];
  }
  return response == BCM2835_I2C_REASON_OK;
 800163c:	466b      	mov	r3, sp
 800163e:	461d      	mov	r5, r3
  sendBuf[0] = regAddr;
 8001640:	4a32      	ldr	r2, [pc, #200]	; (800170c <_Z9readByteshhhPh+0xe4>)
 8001642:	79bb      	ldrb	r3, [r7, #6]
 8001644:	7013      	strb	r3, [r2, #0]
  uint8_t buffer[length];
 8001646:	797b      	ldrb	r3, [r7, #5]
 8001648:	1e5c      	subs	r4, r3, #1
 800164a:	613c      	str	r4, [r7, #16]
 800164c:	4623      	mov	r3, r4
 800164e:	3301      	adds	r3, #1
 8001650:	4618      	mov	r0, r3
 8001652:	f04f 0100 	mov.w	r1, #0
 8001656:	f04f 0200 	mov.w	r2, #0
 800165a:	f04f 0300 	mov.w	r3, #0
 800165e:	00cb      	lsls	r3, r1, #3
 8001660:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8001664:	00c2      	lsls	r2, r0, #3
 8001666:	4623      	mov	r3, r4
 8001668:	3301      	adds	r3, #1
 800166a:	4618      	mov	r0, r3
 800166c:	f04f 0100 	mov.w	r1, #0
 8001670:	f04f 0200 	mov.w	r2, #0
 8001674:	f04f 0300 	mov.w	r3, #0
 8001678:	00cb      	lsls	r3, r1, #3
 800167a:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800167e:	00c2      	lsls	r2, r0, #3
 8001680:	4623      	mov	r3, r4
 8001682:	3301      	adds	r3, #1
 8001684:	3307      	adds	r3, #7
 8001686:	08db      	lsrs	r3, r3, #3
 8001688:	00db      	lsls	r3, r3, #3
 800168a:	ebad 0d03 	sub.w	sp, sp, r3
 800168e:	ab04      	add	r3, sp, #16
 8001690:	3300      	adds	r3, #0
 8001692:	60fb      	str	r3, [r7, #12]
  while(HAL_I2C_Mem_Read(&hi2c1,devAddr,regAddr,I2C_MEMADD_SIZE_8BIT,buffer,length,I2CDLY) != HAL_OK){
 8001694:	79fb      	ldrb	r3, [r7, #7]
 8001696:	b299      	uxth	r1, r3
 8001698:	79bb      	ldrb	r3, [r7, #6]
 800169a:	b298      	uxth	r0, r3
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	797a      	ldrb	r2, [r7, #5]
 80016a0:	b292      	uxth	r2, r2
 80016a2:	2401      	movs	r4, #1
 80016a4:	9402      	str	r4, [sp, #8]
 80016a6:	9201      	str	r2, [sp, #4]
 80016a8:	9300      	str	r3, [sp, #0]
 80016aa:	2301      	movs	r3, #1
 80016ac:	4602      	mov	r2, r0
 80016ae:	4818      	ldr	r0, [pc, #96]	; (8001710 <_Z9readByteshhhPh+0xe8>)
 80016b0:	f005 f810 	bl	80066d4 <HAL_I2C_Mem_Read>
 80016b4:	4603      	mov	r3, r0
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	bf14      	ite	ne
 80016ba:	2301      	movne	r3, #1
 80016bc:	2300      	moveq	r3, #0
 80016be:	b2db      	uxtb	r3, r3
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d002      	beq.n	80016ca <_Z9readByteshhhPh+0xa2>
    MX_I2C1_Init();
 80016c4:	f002 fbea 	bl	8003e9c <MX_I2C1_Init>
  while(HAL_I2C_Mem_Read(&hi2c1,devAddr,regAddr,I2C_MEMADD_SIZE_8BIT,buffer,length,I2CDLY) != HAL_OK){
 80016c8:	e7e4      	b.n	8001694 <_Z9readByteshhhPh+0x6c>
  uint8_t response = BCM2835_I2C_REASON_OK;
 80016ca:	2301      	movs	r3, #1
 80016cc:	72fb      	strb	r3, [r7, #11]
  for (i = 0; i < length ; i++) {
 80016ce:	2300      	movs	r3, #0
 80016d0:	617b      	str	r3, [r7, #20]
 80016d2:	797b      	ldrb	r3, [r7, #5]
 80016d4:	697a      	ldr	r2, [r7, #20]
 80016d6:	429a      	cmp	r2, r3
 80016d8:	da0b      	bge.n	80016f2 <_Z9readByteshhhPh+0xca>
    data[i] = (uint8_t) buffer[i];
 80016da:	697b      	ldr	r3, [r7, #20]
 80016dc:	683a      	ldr	r2, [r7, #0]
 80016de:	4413      	add	r3, r2
 80016e0:	68f9      	ldr	r1, [r7, #12]
 80016e2:	697a      	ldr	r2, [r7, #20]
 80016e4:	440a      	add	r2, r1
 80016e6:	7812      	ldrb	r2, [r2, #0]
 80016e8:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < length ; i++) {
 80016ea:	697b      	ldr	r3, [r7, #20]
 80016ec:	3301      	adds	r3, #1
 80016ee:	617b      	str	r3, [r7, #20]
 80016f0:	e7ef      	b.n	80016d2 <_Z9readByteshhhPh+0xaa>
  return response == BCM2835_I2C_REASON_OK;
 80016f2:	7afb      	ldrb	r3, [r7, #11]
 80016f4:	2b01      	cmp	r3, #1
 80016f6:	bf0c      	ite	eq
 80016f8:	2301      	moveq	r3, #1
 80016fa:	2300      	movne	r3, #0
 80016fc:	b2db      	uxtb	r3, r3
 80016fe:	b25b      	sxtb	r3, r3
 8001700:	46ad      	mov	sp, r5
}
 8001702:	4618      	mov	r0, r3
 8001704:	3718      	adds	r7, #24
 8001706:	46bd      	mov	sp, r7
 8001708:	bdb0      	pop	{r4, r5, r7, pc}
 800170a:	bf00      	nop
 800170c:	20000394 	.word	0x20000394
 8001710:	20000678 	.word	0x20000678

08001714 <_Z8writeBithhhh>:
 * @param regAddr Register regAddr to write to
 * @param bitNum Bit position to write (0-7)
 * @param value New bit value to write
 * @return Status of operation (true = success)
 */
bool writeBit(uint8_t devAddr, uint8_t regAddr, uint8_t bitNum, uint8_t data) {
 8001714:	b590      	push	{r4, r7, lr}
 8001716:	b089      	sub	sp, #36	; 0x24
 8001718:	af04      	add	r7, sp, #16
 800171a:	4604      	mov	r4, r0
 800171c:	4608      	mov	r0, r1
 800171e:	4611      	mov	r1, r2
 8001720:	461a      	mov	r2, r3
 8001722:	4623      	mov	r3, r4
 8001724:	71fb      	strb	r3, [r7, #7]
 8001726:	4603      	mov	r3, r0
 8001728:	71bb      	strb	r3, [r7, #6]
 800172a:	460b      	mov	r3, r1
 800172c:	717b      	strb	r3, [r7, #5]
 800172e:	4613      	mov	r3, r2
 8001730:	713b      	strb	r3, [r7, #4]

  //first reading registery value
  sendBuf[0] = regAddr;
 8001732:	4a34      	ldr	r2, [pc, #208]	; (8001804 <_Z8writeBithhhh+0xf0>)
 8001734:	79bb      	ldrb	r3, [r7, #6]
 8001736:	7013      	strb	r3, [r2, #0]
  uint8_t buffer;
  while(HAL_I2C_Mem_Read(&hi2c1,devAddr,regAddr,I2C_MEMADD_SIZE_8BIT,&buffer,1,I2CDLY) != HAL_OK){
 8001738:	79fb      	ldrb	r3, [r7, #7]
 800173a:	b299      	uxth	r1, r3
 800173c:	79bb      	ldrb	r3, [r7, #6]
 800173e:	b29a      	uxth	r2, r3
 8001740:	2301      	movs	r3, #1
 8001742:	9302      	str	r3, [sp, #8]
 8001744:	2301      	movs	r3, #1
 8001746:	9301      	str	r3, [sp, #4]
 8001748:	f107 030e 	add.w	r3, r7, #14
 800174c:	9300      	str	r3, [sp, #0]
 800174e:	2301      	movs	r3, #1
 8001750:	482d      	ldr	r0, [pc, #180]	; (8001808 <_Z8writeBithhhh+0xf4>)
 8001752:	f004 ffbf 	bl	80066d4 <HAL_I2C_Mem_Read>
 8001756:	4603      	mov	r3, r0
 8001758:	2b00      	cmp	r3, #0
 800175a:	bf14      	ite	ne
 800175c:	2301      	movne	r3, #1
 800175e:	2300      	moveq	r3, #0
 8001760:	b2db      	uxtb	r3, r3
 8001762:	2b00      	cmp	r3, #0
 8001764:	d002      	beq.n	800176c <_Z8writeBithhhh+0x58>
    MX_I2C1_Init();
 8001766:	f002 fb99 	bl	8003e9c <MX_I2C1_Init>
  while(HAL_I2C_Mem_Read(&hi2c1,devAddr,regAddr,I2C_MEMADD_SIZE_8BIT,&buffer,1,I2CDLY) != HAL_OK){
 800176a:	e7e5      	b.n	8001738 <_Z8writeBithhhh+0x24>
  }
  uint8_t response = BCM2835_I2C_REASON_OK;
 800176c:	2301      	movs	r3, #1
 800176e:	73fb      	strb	r3, [r7, #15]
  if ( response == BCM2835_I2C_REASON_OK ) {
 8001770:	7bfb      	ldrb	r3, [r7, #15]
 8001772:	2b01      	cmp	r3, #1
 8001774:	d13b      	bne.n	80017ee <_Z8writeBithhhh+0xda>
    uint8_t b = buffer ;
 8001776:	7bbb      	ldrb	r3, [r7, #14]
 8001778:	737b      	strb	r3, [r7, #13]
    b = (data != 0) ? (b | (1 << bitNum)) : (b & ~(1 << bitNum));
 800177a:	793b      	ldrb	r3, [r7, #4]
 800177c:	2b00      	cmp	r3, #0
 800177e:	d00a      	beq.n	8001796 <_Z8writeBithhhh+0x82>
 8001780:	797b      	ldrb	r3, [r7, #5]
 8001782:	2201      	movs	r2, #1
 8001784:	fa02 f303 	lsl.w	r3, r2, r3
 8001788:	b25a      	sxtb	r2, r3
 800178a:	7b7b      	ldrb	r3, [r7, #13]
 800178c:	b25b      	sxtb	r3, r3
 800178e:	4313      	orrs	r3, r2
 8001790:	b25b      	sxtb	r3, r3
 8001792:	b2db      	uxtb	r3, r3
 8001794:	e00b      	b.n	80017ae <_Z8writeBithhhh+0x9a>
 8001796:	797b      	ldrb	r3, [r7, #5]
 8001798:	2201      	movs	r2, #1
 800179a:	fa02 f303 	lsl.w	r3, r2, r3
 800179e:	b25b      	sxtb	r3, r3
 80017a0:	43db      	mvns	r3, r3
 80017a2:	b25a      	sxtb	r2, r3
 80017a4:	7b7b      	ldrb	r3, [r7, #13]
 80017a6:	b25b      	sxtb	r3, r3
 80017a8:	4013      	ands	r3, r2
 80017aa:	b25b      	sxtb	r3, r3
 80017ac:	b2db      	uxtb	r3, r3
 80017ae:	737b      	strb	r3, [r7, #13]
    sendBuf[1] = b ;
 80017b0:	7b7a      	ldrb	r2, [r7, #13]
 80017b2:	4b14      	ldr	r3, [pc, #80]	; (8001804 <_Z8writeBithhhh+0xf0>)
 80017b4:	705a      	strb	r2, [r3, #1]
    while(HAL_I2C_Mem_Write(&hi2c1,devAddr,regAddr, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&b, 1,I2CDLY) != HAL_OK){
 80017b6:	79fb      	ldrb	r3, [r7, #7]
 80017b8:	b299      	uxth	r1, r3
 80017ba:	79bb      	ldrb	r3, [r7, #6]
 80017bc:	b29a      	uxth	r2, r3
 80017be:	2301      	movs	r3, #1
 80017c0:	9302      	str	r3, [sp, #8]
 80017c2:	2301      	movs	r3, #1
 80017c4:	9301      	str	r3, [sp, #4]
 80017c6:	f107 030d 	add.w	r3, r7, #13
 80017ca:	9300      	str	r3, [sp, #0]
 80017cc:	2301      	movs	r3, #1
 80017ce:	480e      	ldr	r0, [pc, #56]	; (8001808 <_Z8writeBithhhh+0xf4>)
 80017d0:	f004 fe86 	bl	80064e0 <HAL_I2C_Mem_Write>
 80017d4:	4603      	mov	r3, r0
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	bf14      	ite	ne
 80017da:	2301      	movne	r3, #1
 80017dc:	2300      	moveq	r3, #0
 80017de:	b2db      	uxtb	r3, r3
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d002      	beq.n	80017ea <_Z8writeBithhhh+0xd6>
    	MX_I2C1_Init();
 80017e4:	f002 fb5a 	bl	8003e9c <MX_I2C1_Init>
    while(HAL_I2C_Mem_Write(&hi2c1,devAddr,regAddr, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&b, 1,I2CDLY) != HAL_OK){
 80017e8:	e7e5      	b.n	80017b6 <_Z8writeBithhhh+0xa2>
    }
    response = BCM2835_I2C_REASON_OK;
 80017ea:	2301      	movs	r3, #1
 80017ec:	73fb      	strb	r3, [r7, #15]
  }
  return response == BCM2835_I2C_REASON_OK;
 80017ee:	7bfb      	ldrb	r3, [r7, #15]
 80017f0:	2b01      	cmp	r3, #1
 80017f2:	bf0c      	ite	eq
 80017f4:	2301      	moveq	r3, #1
 80017f6:	2300      	movne	r3, #0
 80017f8:	b2db      	uxtb	r3, r3
}
 80017fa:	4618      	mov	r0, r3
 80017fc:	3714      	adds	r7, #20
 80017fe:	46bd      	mov	sp, r7
 8001800:	bd90      	pop	{r4, r7, pc}
 8001802:	bf00      	nop
 8001804:	20000394 	.word	0x20000394
 8001808:	20000678 	.word	0x20000678

0800180c <_Z9writeBitshhhhh>:
 * @param bitStart First bit position to write (0-7)
 * @param length Number of bits to write (not more than 8)
 * @param data Right-aligned value to write
 * @return Status of operation (true = success)
 */
bool writeBits(uint8_t devAddr, uint8_t regAddr, uint8_t bitStart, uint8_t length, uint8_t data) {
 800180c:	b590      	push	{r4, r7, lr}
 800180e:	b089      	sub	sp, #36	; 0x24
 8001810:	af04      	add	r7, sp, #16
 8001812:	4604      	mov	r4, r0
 8001814:	4608      	mov	r0, r1
 8001816:	4611      	mov	r1, r2
 8001818:	461a      	mov	r2, r3
 800181a:	4623      	mov	r3, r4
 800181c:	71fb      	strb	r3, [r7, #7]
 800181e:	4603      	mov	r3, r0
 8001820:	71bb      	strb	r3, [r7, #6]
 8001822:	460b      	mov	r3, r1
 8001824:	717b      	strb	r3, [r7, #5]
 8001826:	4613      	mov	r3, r2
 8001828:	713b      	strb	r3, [r7, #4]
  // 10101111 original value (sample)
  // 10100011 original & ~mask
  // 10101011 masked | value

  //first reading registery value
  sendBuf[0] = regAddr;
 800182a:	4a3c      	ldr	r2, [pc, #240]	; (800191c <_Z9writeBitshhhhh+0x110>)
 800182c:	79bb      	ldrb	r3, [r7, #6]
 800182e:	7013      	strb	r3, [r2, #0]
  uint8_t buffer;
  while(HAL_I2C_Mem_Read(&hi2c1,devAddr,regAddr,I2C_MEMADD_SIZE_8BIT,&buffer,1,I2CDLY) != HAL_OK){
 8001830:	79fb      	ldrb	r3, [r7, #7]
 8001832:	b299      	uxth	r1, r3
 8001834:	79bb      	ldrb	r3, [r7, #6]
 8001836:	b29a      	uxth	r2, r3
 8001838:	2301      	movs	r3, #1
 800183a:	9302      	str	r3, [sp, #8]
 800183c:	2301      	movs	r3, #1
 800183e:	9301      	str	r3, [sp, #4]
 8001840:	f107 030d 	add.w	r3, r7, #13
 8001844:	9300      	str	r3, [sp, #0]
 8001846:	2301      	movs	r3, #1
 8001848:	4835      	ldr	r0, [pc, #212]	; (8001920 <_Z9writeBitshhhhh+0x114>)
 800184a:	f004 ff43 	bl	80066d4 <HAL_I2C_Mem_Read>
 800184e:	4603      	mov	r3, r0
 8001850:	2b00      	cmp	r3, #0
 8001852:	bf14      	ite	ne
 8001854:	2301      	movne	r3, #1
 8001856:	2300      	moveq	r3, #0
 8001858:	b2db      	uxtb	r3, r3
 800185a:	2b00      	cmp	r3, #0
 800185c:	d002      	beq.n	8001864 <_Z9writeBitshhhhh+0x58>
    MX_I2C1_Init();
 800185e:	f002 fb1d 	bl	8003e9c <MX_I2C1_Init>
  while(HAL_I2C_Mem_Read(&hi2c1,devAddr,regAddr,I2C_MEMADD_SIZE_8BIT,&buffer,1,I2CDLY) != HAL_OK){
 8001862:	e7e5      	b.n	8001830 <_Z9writeBitshhhhh+0x24>
  }
  uint8_t response = BCM2835_I2C_REASON_OK;
 8001864:	2301      	movs	r3, #1
 8001866:	73fb      	strb	r3, [r7, #15]
  if ( response == BCM2835_I2C_REASON_OK ) {
 8001868:	7bfb      	ldrb	r3, [r7, #15]
 800186a:	2b01      	cmp	r3, #1
 800186c:	d14c      	bne.n	8001908 <_Z9writeBitshhhhh+0xfc>
    uint8_t b = buffer;
 800186e:	7b7b      	ldrb	r3, [r7, #13]
 8001870:	733b      	strb	r3, [r7, #12]
    uint8_t mask = ((1 << length) - 1) << (bitStart - length + 1);
 8001872:	793b      	ldrb	r3, [r7, #4]
 8001874:	2201      	movs	r2, #1
 8001876:	fa02 f303 	lsl.w	r3, r2, r3
 800187a:	1e5a      	subs	r2, r3, #1
 800187c:	7979      	ldrb	r1, [r7, #5]
 800187e:	793b      	ldrb	r3, [r7, #4]
 8001880:	1acb      	subs	r3, r1, r3
 8001882:	3301      	adds	r3, #1
 8001884:	fa02 f303 	lsl.w	r3, r2, r3
 8001888:	73bb      	strb	r3, [r7, #14]
    data <<= (bitStart - length + 1); // shift data into correct position
 800188a:	f897 2020 	ldrb.w	r2, [r7, #32]
 800188e:	7979      	ldrb	r1, [r7, #5]
 8001890:	793b      	ldrb	r3, [r7, #4]
 8001892:	1acb      	subs	r3, r1, r3
 8001894:	3301      	adds	r3, #1
 8001896:	fa02 f303 	lsl.w	r3, r2, r3
 800189a:	f887 3020 	strb.w	r3, [r7, #32]
    data &= mask; // zero all non-important bits in data
 800189e:	f897 2020 	ldrb.w	r2, [r7, #32]
 80018a2:	7bbb      	ldrb	r3, [r7, #14]
 80018a4:	4013      	ands	r3, r2
 80018a6:	f887 3020 	strb.w	r3, [r7, #32]
    b &= ~(mask); // zero all important bits in existing byte
 80018aa:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80018ae:	43db      	mvns	r3, r3
 80018b0:	b25a      	sxtb	r2, r3
 80018b2:	7b3b      	ldrb	r3, [r7, #12]
 80018b4:	b25b      	sxtb	r3, r3
 80018b6:	4013      	ands	r3, r2
 80018b8:	b25b      	sxtb	r3, r3
 80018ba:	b2db      	uxtb	r3, r3
 80018bc:	733b      	strb	r3, [r7, #12]
    b |= data; // combine data with existing byte
 80018be:	7b3a      	ldrb	r2, [r7, #12]
 80018c0:	f897 3020 	ldrb.w	r3, [r7, #32]
 80018c4:	4313      	orrs	r3, r2
 80018c6:	b2db      	uxtb	r3, r3
 80018c8:	733b      	strb	r3, [r7, #12]
    sendBuf[1] = b ;
 80018ca:	7b3a      	ldrb	r2, [r7, #12]
 80018cc:	4b13      	ldr	r3, [pc, #76]	; (800191c <_Z9writeBitshhhhh+0x110>)
 80018ce:	705a      	strb	r2, [r3, #1]
    while(HAL_I2C_Mem_Write(&hi2c1,devAddr,regAddr, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&b, 1,I2CDLY) != HAL_OK){
 80018d0:	79fb      	ldrb	r3, [r7, #7]
 80018d2:	b299      	uxth	r1, r3
 80018d4:	79bb      	ldrb	r3, [r7, #6]
 80018d6:	b29a      	uxth	r2, r3
 80018d8:	2301      	movs	r3, #1
 80018da:	9302      	str	r3, [sp, #8]
 80018dc:	2301      	movs	r3, #1
 80018de:	9301      	str	r3, [sp, #4]
 80018e0:	f107 030c 	add.w	r3, r7, #12
 80018e4:	9300      	str	r3, [sp, #0]
 80018e6:	2301      	movs	r3, #1
 80018e8:	480d      	ldr	r0, [pc, #52]	; (8001920 <_Z9writeBitshhhhh+0x114>)
 80018ea:	f004 fdf9 	bl	80064e0 <HAL_I2C_Mem_Write>
 80018ee:	4603      	mov	r3, r0
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	bf14      	ite	ne
 80018f4:	2301      	movne	r3, #1
 80018f6:	2300      	moveq	r3, #0
 80018f8:	b2db      	uxtb	r3, r3
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d002      	beq.n	8001904 <_Z9writeBitshhhhh+0xf8>
       MX_I2C1_Init();
 80018fe:	f002 facd 	bl	8003e9c <MX_I2C1_Init>
    while(HAL_I2C_Mem_Write(&hi2c1,devAddr,regAddr, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&b, 1,I2CDLY) != HAL_OK){
 8001902:	e7e5      	b.n	80018d0 <_Z9writeBitshhhhh+0xc4>
    }
    response = BCM2835_I2C_REASON_OK;
 8001904:	2301      	movs	r3, #1
 8001906:	73fb      	strb	r3, [r7, #15]
    }
  return response == BCM2835_I2C_REASON_OK;
 8001908:	7bfb      	ldrb	r3, [r7, #15]
 800190a:	2b01      	cmp	r3, #1
 800190c:	bf0c      	ite	eq
 800190e:	2301      	moveq	r3, #1
 8001910:	2300      	movne	r3, #0
 8001912:	b2db      	uxtb	r3, r3
}
 8001914:	4618      	mov	r0, r3
 8001916:	3714      	adds	r7, #20
 8001918:	46bd      	mov	sp, r7
 800191a:	bd90      	pop	{r4, r7, pc}
 800191c:	20000394 	.word	0x20000394
 8001920:	20000678 	.word	0x20000678

08001924 <_Z9writeBytehhh>:
 * @param devAddr I2C slave device address
 * @param regAddr Register address to write to
 * @param data New byte value to write
 * @return Status of operation (true = success)
 */
bool writeByte(uint8_t devAddr, uint8_t regAddr, uint8_t data) {
 8001924:	b580      	push	{r7, lr}
 8001926:	b088      	sub	sp, #32
 8001928:	af04      	add	r7, sp, #16
 800192a:	4603      	mov	r3, r0
 800192c:	71fb      	strb	r3, [r7, #7]
 800192e:	460b      	mov	r3, r1
 8001930:	71bb      	strb	r3, [r7, #6]
 8001932:	4613      	mov	r3, r2
 8001934:	717b      	strb	r3, [r7, #5]

  sendBuf[0] = regAddr;
 8001936:	4a15      	ldr	r2, [pc, #84]	; (800198c <_Z9writeBytehhh+0x68>)
 8001938:	79bb      	ldrb	r3, [r7, #6]
 800193a:	7013      	strb	r3, [r2, #0]
  sendBuf[1] = data;
 800193c:	797a      	ldrb	r2, [r7, #5]
 800193e:	4b13      	ldr	r3, [pc, #76]	; (800198c <_Z9writeBytehhh+0x68>)
 8001940:	705a      	strb	r2, [r3, #1]
  while(HAL_I2C_Mem_Write(&hi2c1,devAddr,regAddr, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&data, 1,I2CDLY) != HAL_OK){
 8001942:	79fb      	ldrb	r3, [r7, #7]
 8001944:	b299      	uxth	r1, r3
 8001946:	79bb      	ldrb	r3, [r7, #6]
 8001948:	b29a      	uxth	r2, r3
 800194a:	2301      	movs	r3, #1
 800194c:	9302      	str	r3, [sp, #8]
 800194e:	2301      	movs	r3, #1
 8001950:	9301      	str	r3, [sp, #4]
 8001952:	1d7b      	adds	r3, r7, #5
 8001954:	9300      	str	r3, [sp, #0]
 8001956:	2301      	movs	r3, #1
 8001958:	480d      	ldr	r0, [pc, #52]	; (8001990 <_Z9writeBytehhh+0x6c>)
 800195a:	f004 fdc1 	bl	80064e0 <HAL_I2C_Mem_Write>
 800195e:	4603      	mov	r3, r0
 8001960:	2b00      	cmp	r3, #0
 8001962:	bf14      	ite	ne
 8001964:	2301      	movne	r3, #1
 8001966:	2300      	moveq	r3, #0
 8001968:	b2db      	uxtb	r3, r3
 800196a:	2b00      	cmp	r3, #0
 800196c:	d002      	beq.n	8001974 <_Z9writeBytehhh+0x50>
     MX_I2C1_Init();
 800196e:	f002 fa95 	bl	8003e9c <MX_I2C1_Init>
  while(HAL_I2C_Mem_Write(&hi2c1,devAddr,regAddr, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&data, 1,I2CDLY) != HAL_OK){
 8001972:	e7e6      	b.n	8001942 <_Z9writeBytehhh+0x1e>
  }
  uint8_t response = BCM2835_I2C_REASON_OK;
 8001974:	2301      	movs	r3, #1
 8001976:	73fb      	strb	r3, [r7, #15]
  return response == BCM2835_I2C_REASON_OK ;
 8001978:	7bfb      	ldrb	r3, [r7, #15]
 800197a:	2b01      	cmp	r3, #1
 800197c:	bf0c      	ite	eq
 800197e:	2301      	moveq	r3, #1
 8001980:	2300      	movne	r3, #0
 8001982:	b2db      	uxtb	r3, r3
}
 8001984:	4618      	mov	r0, r3
 8001986:	3710      	adds	r7, #16
 8001988:	46bd      	mov	sp, r7
 800198a:	bd80      	pop	{r7, pc}
 800198c:	20000394 	.word	0x20000394
 8001990:	20000678 	.word	0x20000678

08001994 <_Z9writeWordhht>:
    data[i] = (buffer[i*2] << 8) | buffer[i*2+1] ;
  }
  return  response == BCM2835_I2C_REASON_OK ;
}

bool writeWord(uint8_t devAddr, uint8_t regAddr, uint16_t data){
 8001994:	b580      	push	{r7, lr}
 8001996:	b088      	sub	sp, #32
 8001998:	af04      	add	r7, sp, #16
 800199a:	4603      	mov	r3, r0
 800199c:	71fb      	strb	r3, [r7, #7]
 800199e:	460b      	mov	r3, r1
 80019a0:	71bb      	strb	r3, [r7, #6]
 80019a2:	4613      	mov	r3, r2
 80019a4:	80bb      	strh	r3, [r7, #4]

  sendBuf[0] = (uint8_t) (data >> 8); //MSByte
 80019a6:	88bb      	ldrh	r3, [r7, #4]
 80019a8:	121b      	asrs	r3, r3, #8
 80019aa:	b2da      	uxtb	r2, r3
 80019ac:	4b15      	ldr	r3, [pc, #84]	; (8001a04 <_Z9writeWordhht+0x70>)
 80019ae:	701a      	strb	r2, [r3, #0]
  sendBuf[1] = (uint8_t) (data >> 0); //LSByte
 80019b0:	88bb      	ldrh	r3, [r7, #4]
 80019b2:	b2da      	uxtb	r2, r3
 80019b4:	4b13      	ldr	r3, [pc, #76]	; (8001a04 <_Z9writeWordhht+0x70>)
 80019b6:	705a      	strb	r2, [r3, #1]
  while(HAL_I2C_Mem_Write(&hi2c1,devAddr,regAddr, I2C_MEMADD_SIZE_8BIT, (uint8_t*)sendBuf, 2,I2CDLY) != HAL_OK){
 80019b8:	79fb      	ldrb	r3, [r7, #7]
 80019ba:	b299      	uxth	r1, r3
 80019bc:	79bb      	ldrb	r3, [r7, #6]
 80019be:	b29a      	uxth	r2, r3
 80019c0:	2301      	movs	r3, #1
 80019c2:	9302      	str	r3, [sp, #8]
 80019c4:	2302      	movs	r3, #2
 80019c6:	9301      	str	r3, [sp, #4]
 80019c8:	4b0e      	ldr	r3, [pc, #56]	; (8001a04 <_Z9writeWordhht+0x70>)
 80019ca:	9300      	str	r3, [sp, #0]
 80019cc:	2301      	movs	r3, #1
 80019ce:	480e      	ldr	r0, [pc, #56]	; (8001a08 <_Z9writeWordhht+0x74>)
 80019d0:	f004 fd86 	bl	80064e0 <HAL_I2C_Mem_Write>
 80019d4:	4603      	mov	r3, r0
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	bf14      	ite	ne
 80019da:	2301      	movne	r3, #1
 80019dc:	2300      	moveq	r3, #0
 80019de:	b2db      	uxtb	r3, r3
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d002      	beq.n	80019ea <_Z9writeWordhht+0x56>
     MX_I2C1_Init();
 80019e4:	f002 fa5a 	bl	8003e9c <MX_I2C1_Init>
  while(HAL_I2C_Mem_Write(&hi2c1,devAddr,regAddr, I2C_MEMADD_SIZE_8BIT, (uint8_t*)sendBuf, 2,I2CDLY) != HAL_OK){
 80019e8:	e7e6      	b.n	80019b8 <_Z9writeWordhht+0x24>
  }
  uint8_t response = BCM2835_I2C_REASON_OK;
 80019ea:	2301      	movs	r3, #1
 80019ec:	73fb      	strb	r3, [r7, #15]
  return response == BCM2835_I2C_REASON_OK ;
 80019ee:	7bfb      	ldrb	r3, [r7, #15]
 80019f0:	2b01      	cmp	r3, #1
 80019f2:	bf0c      	ite	eq
 80019f4:	2301      	moveq	r3, #1
 80019f6:	2300      	movne	r3, #0
 80019f8:	b2db      	uxtb	r3, r3
}
 80019fa:	4618      	mov	r0, r3
 80019fc:	3710      	adds	r7, #16
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bd80      	pop	{r7, pc}
 8001a02:	bf00      	nop
 8001a04:	20000394 	.word	0x20000394
 8001a08:	20000678 	.word	0x20000678

08001a0c <_Z10writeByteshhhPh>:

bool writeBytes(uint8_t devAddr, uint8_t regAddr, uint8_t length, uint8_t *data){
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b088      	sub	sp, #32
 8001a10:	af04      	add	r7, sp, #16
 8001a12:	603b      	str	r3, [r7, #0]
 8001a14:	4603      	mov	r3, r0
 8001a16:	71fb      	strb	r3, [r7, #7]
 8001a18:	460b      	mov	r3, r1
 8001a1a:	71bb      	strb	r3, [r7, #6]
 8001a1c:	4613      	mov	r3, r2
 8001a1e:	717b      	strb	r3, [r7, #5]
  uint8_t i;
  for (i = 0; i < length; i++) {
 8001a20:	2300      	movs	r3, #0
 8001a22:	73fb      	strb	r3, [r7, #15]
 8001a24:	7bfa      	ldrb	r2, [r7, #15]
 8001a26:	797b      	ldrb	r3, [r7, #5]
 8001a28:	429a      	cmp	r2, r3
 8001a2a:	d20a      	bcs.n	8001a42 <_Z10writeByteshhhPh+0x36>
    sendBuf[i] = data[i] ;
 8001a2c:	7bfb      	ldrb	r3, [r7, #15]
 8001a2e:	683a      	ldr	r2, [r7, #0]
 8001a30:	441a      	add	r2, r3
 8001a32:	7bfb      	ldrb	r3, [r7, #15]
 8001a34:	7811      	ldrb	r1, [r2, #0]
 8001a36:	4a16      	ldr	r2, [pc, #88]	; (8001a90 <_Z10writeByteshhhPh+0x84>)
 8001a38:	54d1      	strb	r1, [r2, r3]
  for (i = 0; i < length; i++) {
 8001a3a:	7bfb      	ldrb	r3, [r7, #15]
 8001a3c:	3301      	adds	r3, #1
 8001a3e:	73fb      	strb	r3, [r7, #15]
 8001a40:	e7f0      	b.n	8001a24 <_Z10writeByteshhhPh+0x18>
  }
  while(HAL_I2C_Mem_Write(&hi2c1,devAddr,regAddr, I2C_MEMADD_SIZE_8BIT, (uint8_t*)sendBuf, length,I2CDLY) != HAL_OK){
 8001a42:	79fb      	ldrb	r3, [r7, #7]
 8001a44:	b299      	uxth	r1, r3
 8001a46:	79bb      	ldrb	r3, [r7, #6]
 8001a48:	b29a      	uxth	r2, r3
 8001a4a:	797b      	ldrb	r3, [r7, #5]
 8001a4c:	b29b      	uxth	r3, r3
 8001a4e:	2001      	movs	r0, #1
 8001a50:	9002      	str	r0, [sp, #8]
 8001a52:	9301      	str	r3, [sp, #4]
 8001a54:	4b0e      	ldr	r3, [pc, #56]	; (8001a90 <_Z10writeByteshhhPh+0x84>)
 8001a56:	9300      	str	r3, [sp, #0]
 8001a58:	2301      	movs	r3, #1
 8001a5a:	480e      	ldr	r0, [pc, #56]	; (8001a94 <_Z10writeByteshhhPh+0x88>)
 8001a5c:	f004 fd40 	bl	80064e0 <HAL_I2C_Mem_Write>
 8001a60:	4603      	mov	r3, r0
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	bf14      	ite	ne
 8001a66:	2301      	movne	r3, #1
 8001a68:	2300      	moveq	r3, #0
 8001a6a:	b2db      	uxtb	r3, r3
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d002      	beq.n	8001a76 <_Z10writeByteshhhPh+0x6a>
     MX_I2C1_Init();
 8001a70:	f002 fa14 	bl	8003e9c <MX_I2C1_Init>
  while(HAL_I2C_Mem_Write(&hi2c1,devAddr,regAddr, I2C_MEMADD_SIZE_8BIT, (uint8_t*)sendBuf, length,I2CDLY) != HAL_OK){
 8001a74:	e7e5      	b.n	8001a42 <_Z10writeByteshhhPh+0x36>
  }
  uint8_t response = BCM2835_I2C_REASON_OK;
 8001a76:	2301      	movs	r3, #1
 8001a78:	73bb      	strb	r3, [r7, #14]
  return response == BCM2835_I2C_REASON_OK ;
 8001a7a:	7bbb      	ldrb	r3, [r7, #14]
 8001a7c:	2b01      	cmp	r3, #1
 8001a7e:	bf0c      	ite	eq
 8001a80:	2301      	moveq	r3, #1
 8001a82:	2300      	movne	r3, #0
 8001a84:	b2db      	uxtb	r3, r3
}
 8001a86:	4618      	mov	r0, r3
 8001a88:	3710      	adds	r7, #16
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	bd80      	pop	{r7, pc}
 8001a8e:	bf00      	nop
 8001a90:	20000394 	.word	0x20000394
 8001a94:	20000678 	.word	0x20000678

08001a98 <_Z17MPU6050_resetFIFOv>:
  //   Quaternions[2] = (((uint32_t)MPU6050_RX_buf[8] << 24) |  ((uint32_t)MPU6050_RX_buf[9] << 16) |  ((uint32_t)MPU6050_RX_buf[10] << 8) | MPU6050_RX_buf[11]);
  //   Quaternions[3] = (((uint32_t)MPU6050_RX_buf[12] << 24) | ((uint32_t)MPU6050_RX_buf[13] << 16) | ((uint32_t)MPU6050_RX_buf[14] << 8) | MPU6050_RX_buf[15]);
}

void MPU6050_resetFIFO()
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	af00      	add	r7, sp, #0
    writeBit(MPU6050_Adresse, MPU6050_RA_USER_CTRL, MPU6050_USERCTRL_FIFO_RESET_BIT, true); //reset FIFO
 8001a9c:	2301      	movs	r3, #1
 8001a9e:	2202      	movs	r2, #2
 8001aa0:	216a      	movs	r1, #106	; 0x6a
 8001aa2:	20d0      	movs	r0, #208	; 0xd0
 8001aa4:	f7ff fe36 	bl	8001714 <_Z8writeBithhhh>
}
 8001aa8:	bf00      	nop
 8001aaa:	bd80      	pop	{r7, pc}

08001aac <_Z27MPU6050_readQuaternionBytesv>:

void MPU6050_readQuaternionBytes()
{
 8001aac:	b5b0      	push	{r4, r5, r7, lr}
 8001aae:	b0d0      	sub	sp, #320	; 0x140
 8001ab0:	af00      	add	r7, sp, #0
    readBytes(MPU6050_Adresse, MPU6050_RA_FIFO_COUNTH, 2, MPU6050_RX_buf);  //get FIFO count
 8001ab2:	4b54      	ldr	r3, [pc, #336]	; (8001c04 <_Z27MPU6050_readQuaternionBytesv+0x158>)
 8001ab4:	2202      	movs	r2, #2
 8001ab6:	2172      	movs	r1, #114	; 0x72
 8001ab8:	20d0      	movs	r0, #208	; 0xd0
 8001aba:	f7ff fdb5 	bl	8001628 <_Z9readByteshhhPh>
    FIFOCounter = (((uint16_t)MPU6050_RX_buf[0]) << 8) | MPU6050_RX_buf[1];
 8001abe:	4b51      	ldr	r3, [pc, #324]	; (8001c04 <_Z27MPU6050_readQuaternionBytesv+0x158>)
 8001ac0:	781b      	ldrb	r3, [r3, #0]
 8001ac2:	021b      	lsls	r3, r3, #8
 8001ac4:	b21a      	sxth	r2, r3
 8001ac6:	4b4f      	ldr	r3, [pc, #316]	; (8001c04 <_Z27MPU6050_readQuaternionBytesv+0x158>)
 8001ac8:	785b      	ldrb	r3, [r3, #1]
 8001aca:	b21b      	sxth	r3, r3
 8001acc:	4313      	orrs	r3, r2
 8001ace:	b21b      	sxth	r3, r3
 8001ad0:	b29a      	uxth	r2, r3
 8001ad2:	4b4d      	ldr	r3, [pc, #308]	; (8001c08 <_Z27MPU6050_readQuaternionBytesv+0x15c>)
 8001ad4:	801a      	strh	r2, [r3, #0]
    while (FIFOCounter < 42)
 8001ad6:	4b4c      	ldr	r3, [pc, #304]	; (8001c08 <_Z27MPU6050_readQuaternionBytesv+0x15c>)
 8001ad8:	881b      	ldrh	r3, [r3, #0]
 8001ada:	2b29      	cmp	r3, #41	; 0x29
 8001adc:	f200 808c 	bhi.w	8001bf8 <_Z27MPU6050_readQuaternionBytesv+0x14c>
    {
      HAL_GPIO_TogglePin(ONBOARD_WRITE_2_GPIO_Port, ONBOARD_WRITE_2_Pin);   //debug Pin
 8001ae0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001ae4:	4849      	ldr	r0, [pc, #292]	; (8001c0c <_Z27MPU6050_readQuaternionBytesv+0x160>)
 8001ae6:	f004 fb85 	bl	80061f4 <HAL_GPIO_TogglePin>
      readBytes(MPU6050_Adresse, MPU6050_RA_FIFO_COUNTH, 2, MPU6050_RX_buf);  //get FIFO count
 8001aea:	4b46      	ldr	r3, [pc, #280]	; (8001c04 <_Z27MPU6050_readQuaternionBytesv+0x158>)
 8001aec:	2202      	movs	r2, #2
 8001aee:	2172      	movs	r1, #114	; 0x72
 8001af0:	20d0      	movs	r0, #208	; 0xd0
 8001af2:	f7ff fd99 	bl	8001628 <_Z9readByteshhhPh>
      FIFOCounter = (((uint16_t)MPU6050_RX_buf[0]) << 8) | MPU6050_RX_buf[1];
 8001af6:	4b43      	ldr	r3, [pc, #268]	; (8001c04 <_Z27MPU6050_readQuaternionBytesv+0x158>)
 8001af8:	781b      	ldrb	r3, [r3, #0]
 8001afa:	021b      	lsls	r3, r3, #8
 8001afc:	b21a      	sxth	r2, r3
 8001afe:	4b41      	ldr	r3, [pc, #260]	; (8001c04 <_Z27MPU6050_readQuaternionBytesv+0x158>)
 8001b00:	785b      	ldrb	r3, [r3, #1]
 8001b02:	b21b      	sxth	r3, r3
 8001b04:	4313      	orrs	r3, r2
 8001b06:	b21b      	sxth	r3, r3
 8001b08:	b29a      	uxth	r2, r3
 8001b0a:	4b3f      	ldr	r3, [pc, #252]	; (8001c08 <_Z27MPU6050_readQuaternionBytesv+0x15c>)
 8001b0c:	801a      	strh	r2, [r3, #0]
      for (size_t i = 0; i < 1; i++)
 8001b0e:	2300      	movs	r3, #0
 8001b10:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 8001b14:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d1dc      	bne.n	8001ad6 <_Z27MPU6050_readQuaternionBytesv+0x2a>
        for (size_t i = 0; i < x; i++)
        {
        	msgTransmit[i] = msg[i];
        }
        CDC_Transmit_FS((unsigned char*)msgTransmit, sizeof(msgTransmit));
      }
 8001b1c:	466b      	mov	r3, sp
 8001b1e:	461d      	mov	r5, r3
        sprintf((char*)msg," %hd \r\n", FIFOCounter);
 8001b20:	4b39      	ldr	r3, [pc, #228]	; (8001c08 <_Z27MPU6050_readQuaternionBytesv+0x15c>)
 8001b22:	881b      	ldrh	r3, [r3, #0]
 8001b24:	461a      	mov	r2, r3
 8001b26:	463b      	mov	r3, r7
 8001b28:	4939      	ldr	r1, [pc, #228]	; (8001c10 <_Z27MPU6050_readQuaternionBytesv+0x164>)
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	f00e fc6a 	bl	8010404 <siprintf>
        uint8_t x = 0;
 8001b30:	2300      	movs	r3, #0
 8001b32:	f887 313b 	strb.w	r3, [r7, #315]	; 0x13b
        while (msg[x] != NULL)
 8001b36:	f897 313b 	ldrb.w	r3, [r7, #315]	; 0x13b
 8001b3a:	463a      	mov	r2, r7
 8001b3c:	5cd3      	ldrb	r3, [r2, r3]
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d005      	beq.n	8001b4e <_Z27MPU6050_readQuaternionBytesv+0xa2>
        	x++;
 8001b42:	f897 313b 	ldrb.w	r3, [r7, #315]	; 0x13b
 8001b46:	3301      	adds	r3, #1
 8001b48:	f887 313b 	strb.w	r3, [r7, #315]	; 0x13b
        while (msg[x] != NULL)
 8001b4c:	e7f3      	b.n	8001b36 <_Z27MPU6050_readQuaternionBytesv+0x8a>
        unsigned char msgTransmit[x];
 8001b4e:	f897 313b 	ldrb.w	r3, [r7, #315]	; 0x13b
 8001b52:	1e5c      	subs	r4, r3, #1
 8001b54:	f8c7 4130 	str.w	r4, [r7, #304]	; 0x130
 8001b58:	4623      	mov	r3, r4
 8001b5a:	3301      	adds	r3, #1
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	f04f 0100 	mov.w	r1, #0
 8001b62:	f04f 0200 	mov.w	r2, #0
 8001b66:	f04f 0300 	mov.w	r3, #0
 8001b6a:	00cb      	lsls	r3, r1, #3
 8001b6c:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8001b70:	00c2      	lsls	r2, r0, #3
 8001b72:	4623      	mov	r3, r4
 8001b74:	3301      	adds	r3, #1
 8001b76:	4618      	mov	r0, r3
 8001b78:	f04f 0100 	mov.w	r1, #0
 8001b7c:	f04f 0200 	mov.w	r2, #0
 8001b80:	f04f 0300 	mov.w	r3, #0
 8001b84:	00cb      	lsls	r3, r1, #3
 8001b86:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8001b8a:	00c2      	lsls	r2, r0, #3
 8001b8c:	4623      	mov	r3, r4
 8001b8e:	3301      	adds	r3, #1
 8001b90:	3307      	adds	r3, #7
 8001b92:	08db      	lsrs	r3, r3, #3
 8001b94:	00db      	lsls	r3, r3, #3
 8001b96:	ebad 0d03 	sub.w	sp, sp, r3
 8001b9a:	466b      	mov	r3, sp
 8001b9c:	3300      	adds	r3, #0
 8001b9e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        for (size_t i = 0; i < x; i++)
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 8001ba8:	f897 313b 	ldrb.w	r3, [r7, #315]	; 0x13b
 8001bac:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 8001bb0:	429a      	cmp	r2, r3
 8001bb2:	d211      	bcs.n	8001bd8 <_Z27MPU6050_readQuaternionBytesv+0x12c>
        	msgTransmit[i] = msg[i];
 8001bb4:	463a      	mov	r2, r7
 8001bb6:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8001bba:	4413      	add	r3, r2
 8001bbc:	7819      	ldrb	r1, [r3, #0]
 8001bbe:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8001bc2:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8001bc6:	4413      	add	r3, r2
 8001bc8:	460a      	mov	r2, r1
 8001bca:	701a      	strb	r2, [r3, #0]
        for (size_t i = 0; i < x; i++)
 8001bcc:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8001bd0:	3301      	adds	r3, #1
 8001bd2:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 8001bd6:	e7e7      	b.n	8001ba8 <_Z27MPU6050_readQuaternionBytesv+0xfc>
        CDC_Transmit_FS((unsigned char*)msgTransmit, sizeof(msgTransmit));
 8001bd8:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8001bdc:	b2a3      	uxth	r3, r4
 8001bde:	3301      	adds	r3, #1
 8001be0:	b29b      	uxth	r3, r3
 8001be2:	4619      	mov	r1, r3
 8001be4:	4610      	mov	r0, r2
 8001be6:	f00a ffad 	bl	800cb44 <CDC_Transmit_FS>
 8001bea:	46ad      	mov	sp, r5
      for (size_t i = 0; i < 1; i++)
 8001bec:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8001bf0:	3301      	adds	r3, #1
 8001bf2:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 8001bf6:	e78d      	b.n	8001b14 <_Z27MPU6050_readQuaternionBytesv+0x68>

    }
}
 8001bf8:	bf00      	nop
 8001bfa:	f507 77a0 	add.w	r7, r7, #320	; 0x140
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	bdb0      	pop	{r4, r5, r7, pc}
 8001c02:	bf00      	nop
 8001c04:	20000494 	.word	0x20000494
 8001c08:	200004a4 	.word	0x200004a4
 8001c0c:	40020800 	.word	0x40020800
 8001c10:	08012710 	.word	0x08012710

08001c14 <_Z28MPU6050_ConvertToQuaternionsv>:

void MPU6050_ConvertToQuaternions()
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	af00      	add	r7, sp, #0
    if ((FIFOCounter == 42) | (FIFOCounter == 84))
 8001c18:	4b42      	ldr	r3, [pc, #264]	; (8001d24 <_Z28MPU6050_ConvertToQuaternionsv+0x110>)
 8001c1a:	881b      	ldrh	r3, [r3, #0]
 8001c1c:	2b2a      	cmp	r3, #42	; 0x2a
 8001c1e:	bf0c      	ite	eq
 8001c20:	2301      	moveq	r3, #1
 8001c22:	2300      	movne	r3, #0
 8001c24:	b2da      	uxtb	r2, r3
 8001c26:	4b3f      	ldr	r3, [pc, #252]	; (8001d24 <_Z28MPU6050_ConvertToQuaternionsv+0x110>)
 8001c28:	881b      	ldrh	r3, [r3, #0]
 8001c2a:	2b54      	cmp	r3, #84	; 0x54
 8001c2c:	bf0c      	ite	eq
 8001c2e:	2301      	moveq	r3, #1
 8001c30:	2300      	movne	r3, #0
 8001c32:	b2db      	uxtb	r3, r3
 8001c34:	4313      	orrs	r3, r2
 8001c36:	b2db      	uxtb	r3, r3
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d071      	beq.n	8001d20 <_Z28MPU6050_ConvertToQuaternionsv+0x10c>
    {
      readBytes(MPU6050_Adresse, MPU6050_RA_FIFO_R_W, 16, MPU6050_RX_buf);      //get FIFO data
 8001c3c:	4b3a      	ldr	r3, [pc, #232]	; (8001d28 <_Z28MPU6050_ConvertToQuaternionsv+0x114>)
 8001c3e:	2210      	movs	r2, #16
 8001c40:	2174      	movs	r1, #116	; 0x74
 8001c42:	20d0      	movs	r0, #208	; 0xd0
 8001c44:	f7ff fcf0 	bl	8001628 <_Z9readByteshhhPh>
      MPUoutputQuaternion[0] = (float)(((int32_t)MPU6050_RX_buf[0] << 24) |  ((int32_t)MPU6050_RX_buf[1] << 16) |  ((int32_t)MPU6050_RX_buf[2] << 8) |  MPU6050_RX_buf[3 ]) / 1073741824;
 8001c48:	4b37      	ldr	r3, [pc, #220]	; (8001d28 <_Z28MPU6050_ConvertToQuaternionsv+0x114>)
 8001c4a:	781b      	ldrb	r3, [r3, #0]
 8001c4c:	061a      	lsls	r2, r3, #24
 8001c4e:	4b36      	ldr	r3, [pc, #216]	; (8001d28 <_Z28MPU6050_ConvertToQuaternionsv+0x114>)
 8001c50:	785b      	ldrb	r3, [r3, #1]
 8001c52:	041b      	lsls	r3, r3, #16
 8001c54:	431a      	orrs	r2, r3
 8001c56:	4b34      	ldr	r3, [pc, #208]	; (8001d28 <_Z28MPU6050_ConvertToQuaternionsv+0x114>)
 8001c58:	789b      	ldrb	r3, [r3, #2]
 8001c5a:	021b      	lsls	r3, r3, #8
 8001c5c:	4313      	orrs	r3, r2
 8001c5e:	4a32      	ldr	r2, [pc, #200]	; (8001d28 <_Z28MPU6050_ConvertToQuaternionsv+0x114>)
 8001c60:	78d2      	ldrb	r2, [r2, #3]
 8001c62:	4313      	orrs	r3, r2
 8001c64:	4618      	mov	r0, r3
 8001c66:	f7ff f855 	bl	8000d14 <__aeabi_i2f>
 8001c6a:	4603      	mov	r3, r0
 8001c6c:	f04f 419d 	mov.w	r1, #1317011456	; 0x4e800000
 8001c70:	4618      	mov	r0, r3
 8001c72:	f7ff f957 	bl	8000f24 <__aeabi_fdiv>
 8001c76:	4603      	mov	r3, r0
 8001c78:	461a      	mov	r2, r3
 8001c7a:	4b2c      	ldr	r3, [pc, #176]	; (8001d2c <_Z28MPU6050_ConvertToQuaternionsv+0x118>)
 8001c7c:	601a      	str	r2, [r3, #0]
      MPUoutputQuaternion[1] = (float)(((int32_t)MPU6050_RX_buf[4] << 24) |  ((int32_t)MPU6050_RX_buf[5] << 16) |  ((int32_t)MPU6050_RX_buf[6] << 8) |  MPU6050_RX_buf[7 ]) / 1073741824;
 8001c7e:	4b2a      	ldr	r3, [pc, #168]	; (8001d28 <_Z28MPU6050_ConvertToQuaternionsv+0x114>)
 8001c80:	791b      	ldrb	r3, [r3, #4]
 8001c82:	061a      	lsls	r2, r3, #24
 8001c84:	4b28      	ldr	r3, [pc, #160]	; (8001d28 <_Z28MPU6050_ConvertToQuaternionsv+0x114>)
 8001c86:	795b      	ldrb	r3, [r3, #5]
 8001c88:	041b      	lsls	r3, r3, #16
 8001c8a:	431a      	orrs	r2, r3
 8001c8c:	4b26      	ldr	r3, [pc, #152]	; (8001d28 <_Z28MPU6050_ConvertToQuaternionsv+0x114>)
 8001c8e:	799b      	ldrb	r3, [r3, #6]
 8001c90:	021b      	lsls	r3, r3, #8
 8001c92:	4313      	orrs	r3, r2
 8001c94:	4a24      	ldr	r2, [pc, #144]	; (8001d28 <_Z28MPU6050_ConvertToQuaternionsv+0x114>)
 8001c96:	79d2      	ldrb	r2, [r2, #7]
 8001c98:	4313      	orrs	r3, r2
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	f7ff f83a 	bl	8000d14 <__aeabi_i2f>
 8001ca0:	4603      	mov	r3, r0
 8001ca2:	f04f 419d 	mov.w	r1, #1317011456	; 0x4e800000
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	f7ff f93c 	bl	8000f24 <__aeabi_fdiv>
 8001cac:	4603      	mov	r3, r0
 8001cae:	461a      	mov	r2, r3
 8001cb0:	4b1e      	ldr	r3, [pc, #120]	; (8001d2c <_Z28MPU6050_ConvertToQuaternionsv+0x118>)
 8001cb2:	605a      	str	r2, [r3, #4]
      MPUoutputQuaternion[2] = (float)(((int32_t)MPU6050_RX_buf[8] << 24) |  ((int32_t)MPU6050_RX_buf[9] << 16) |  ((int32_t)MPU6050_RX_buf[10] << 8) | MPU6050_RX_buf[11]) / 1073741824;
 8001cb4:	4b1c      	ldr	r3, [pc, #112]	; (8001d28 <_Z28MPU6050_ConvertToQuaternionsv+0x114>)
 8001cb6:	7a1b      	ldrb	r3, [r3, #8]
 8001cb8:	061a      	lsls	r2, r3, #24
 8001cba:	4b1b      	ldr	r3, [pc, #108]	; (8001d28 <_Z28MPU6050_ConvertToQuaternionsv+0x114>)
 8001cbc:	7a5b      	ldrb	r3, [r3, #9]
 8001cbe:	041b      	lsls	r3, r3, #16
 8001cc0:	431a      	orrs	r2, r3
 8001cc2:	4b19      	ldr	r3, [pc, #100]	; (8001d28 <_Z28MPU6050_ConvertToQuaternionsv+0x114>)
 8001cc4:	7a9b      	ldrb	r3, [r3, #10]
 8001cc6:	021b      	lsls	r3, r3, #8
 8001cc8:	4313      	orrs	r3, r2
 8001cca:	4a17      	ldr	r2, [pc, #92]	; (8001d28 <_Z28MPU6050_ConvertToQuaternionsv+0x114>)
 8001ccc:	7ad2      	ldrb	r2, [r2, #11]
 8001cce:	4313      	orrs	r3, r2
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	f7ff f81f 	bl	8000d14 <__aeabi_i2f>
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	f04f 419d 	mov.w	r1, #1317011456	; 0x4e800000
 8001cdc:	4618      	mov	r0, r3
 8001cde:	f7ff f921 	bl	8000f24 <__aeabi_fdiv>
 8001ce2:	4603      	mov	r3, r0
 8001ce4:	461a      	mov	r2, r3
 8001ce6:	4b11      	ldr	r3, [pc, #68]	; (8001d2c <_Z28MPU6050_ConvertToQuaternionsv+0x118>)
 8001ce8:	609a      	str	r2, [r3, #8]
      MPUoutputQuaternion[3] = (float)(((int32_t)MPU6050_RX_buf[12] << 24) | ((int32_t)MPU6050_RX_buf[13] << 16) | ((int32_t)MPU6050_RX_buf[14] << 8) | MPU6050_RX_buf[15]) / 1073741824;
 8001cea:	4b0f      	ldr	r3, [pc, #60]	; (8001d28 <_Z28MPU6050_ConvertToQuaternionsv+0x114>)
 8001cec:	7b1b      	ldrb	r3, [r3, #12]
 8001cee:	061a      	lsls	r2, r3, #24
 8001cf0:	4b0d      	ldr	r3, [pc, #52]	; (8001d28 <_Z28MPU6050_ConvertToQuaternionsv+0x114>)
 8001cf2:	7b5b      	ldrb	r3, [r3, #13]
 8001cf4:	041b      	lsls	r3, r3, #16
 8001cf6:	431a      	orrs	r2, r3
 8001cf8:	4b0b      	ldr	r3, [pc, #44]	; (8001d28 <_Z28MPU6050_ConvertToQuaternionsv+0x114>)
 8001cfa:	7b9b      	ldrb	r3, [r3, #14]
 8001cfc:	021b      	lsls	r3, r3, #8
 8001cfe:	4313      	orrs	r3, r2
 8001d00:	4a09      	ldr	r2, [pc, #36]	; (8001d28 <_Z28MPU6050_ConvertToQuaternionsv+0x114>)
 8001d02:	7bd2      	ldrb	r2, [r2, #15]
 8001d04:	4313      	orrs	r3, r2
 8001d06:	4618      	mov	r0, r3
 8001d08:	f7ff f804 	bl	8000d14 <__aeabi_i2f>
 8001d0c:	4603      	mov	r3, r0
 8001d0e:	f04f 419d 	mov.w	r1, #1317011456	; 0x4e800000
 8001d12:	4618      	mov	r0, r3
 8001d14:	f7ff f906 	bl	8000f24 <__aeabi_fdiv>
 8001d18:	4603      	mov	r3, r0
 8001d1a:	461a      	mov	r2, r3
 8001d1c:	4b03      	ldr	r3, [pc, #12]	; (8001d2c <_Z28MPU6050_ConvertToQuaternionsv+0x118>)
 8001d1e:	60da      	str	r2, [r3, #12]
    }
}
 8001d20:	bf00      	nop
 8001d22:	bd80      	pop	{r7, pc}
 8001d24:	200004a4 	.word	0x200004a4
 8001d28:	20000494 	.word	0x20000494
 8001d2c:	200004c0 	.word	0x200004c0

08001d30 <_ZN7MPU6050C1Ev>:


/** Default constructor, uses default I2C address.
 * @see MPU6050_DEFAULT_ADDRESS
 */
MPU6050::MPU6050() {
 8001d30:	b480      	push	{r7}
 8001d32:	b083      	sub	sp, #12
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
    devAddr = MPU6050_DEFAULT_ADDRESS;
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	22d0      	movs	r2, #208	; 0xd0
 8001d3c:	719a      	strb	r2, [r3, #6]
}
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	4618      	mov	r0, r3
 8001d42:	370c      	adds	r7, #12
 8001d44:	46bd      	mov	sp, r7
 8001d46:	bc80      	pop	{r7}
 8001d48:	4770      	bx	lr

08001d4a <_ZN7MPU605010initializeEv>:
 * after start-up). This function also sets both the accelerometer and the gyroscope
 * to their most sensitive settings, namely +/- 2g and +/- 250 degrees/sec, and sets
 * the clock source to use the X Gyro for reference, which is slightly better than
 * the default internal clock source.
 */
void MPU6050::initialize() {
 8001d4a:	b580      	push	{r7, lr}
 8001d4c:	b082      	sub	sp, #8
 8001d4e:	af00      	add	r7, sp, #0
 8001d50:	6078      	str	r0, [r7, #4]
    setClockSource(MPU6050_CLOCK_PLL_XGYRO);
 8001d52:	2101      	movs	r1, #1
 8001d54:	6878      	ldr	r0, [r7, #4]
 8001d56:	f000 f951 	bl	8001ffc <_ZN7MPU605014setClockSourceEh>
    setFullScaleGyroRange(MPU6050_GYRO_FS_250);
 8001d5a:	2100      	movs	r1, #0
 8001d5c:	6878      	ldr	r0, [r7, #4]
 8001d5e:	f000 f843 	bl	8001de8 <_ZN7MPU605021setFullScaleGyroRangeEh>
    setFullScaleAccelRange(MPU6050_ACCEL_FS_2);
 8001d62:	2100      	movs	r1, #0
 8001d64:	6878      	ldr	r0, [r7, #4]
 8001d66:	f000 f852 	bl	8001e0e <_ZN7MPU605022setFullScaleAccelRangeEh>
    setSleepEnabled(false); // thanks to Jack Elston for pointing this one out!
 8001d6a:	2100      	movs	r1, #0
 8001d6c:	6878      	ldr	r0, [r7, #4]
 8001d6e:	f000 f934 	bl	8001fda <_ZN7MPU605015setSleepEnabledEb>
}
 8001d72:	bf00      	nop
 8001d74:	3708      	adds	r7, #8
 8001d76:	46bd      	mov	sp, r7
 8001d78:	bd80      	pop	{r7, pc}

08001d7a <_ZN7MPU60507setRateEh>:
/** Set gyroscope sample rate divider.
 * @param rate New sample rate divider
 * @see getRate()
 * @see MPU6050_RA_SMPLRT_DIV
 */
void MPU6050::setRate(uint8_t rate) {
 8001d7a:	b580      	push	{r7, lr}
 8001d7c:	b082      	sub	sp, #8
 8001d7e:	af00      	add	r7, sp, #0
 8001d80:	6078      	str	r0, [r7, #4]
 8001d82:	460b      	mov	r3, r1
 8001d84:	70fb      	strb	r3, [r7, #3]
    writeByte(devAddr, MPU6050_RA_SMPLRT_DIV, rate);
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	799b      	ldrb	r3, [r3, #6]
 8001d8a:	78fa      	ldrb	r2, [r7, #3]
 8001d8c:	2119      	movs	r1, #25
 8001d8e:	4618      	mov	r0, r3
 8001d90:	f7ff fdc8 	bl	8001924 <_Z9writeBytehhh>
}
 8001d94:	bf00      	nop
 8001d96:	3708      	adds	r7, #8
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	bd80      	pop	{r7, pc}

08001d9c <_ZN7MPU605020setExternalFrameSyncEh>:
/** Set external FSYNC configuration.
 * @see getExternalFrameSync()
 * @see MPU6050_RA_CONFIG
 * @param sync New FSYNC configuration value
 */
void MPU6050::setExternalFrameSync(uint8_t sync) {
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b084      	sub	sp, #16
 8001da0:	af02      	add	r7, sp, #8
 8001da2:	6078      	str	r0, [r7, #4]
 8001da4:	460b      	mov	r3, r1
 8001da6:	70fb      	strb	r3, [r7, #3]
    writeBits(devAddr, MPU6050_RA_CONFIG, MPU6050_CFG_EXT_SYNC_SET_BIT, MPU6050_CFG_EXT_SYNC_SET_LENGTH, sync);
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	7998      	ldrb	r0, [r3, #6]
 8001dac:	78fb      	ldrb	r3, [r7, #3]
 8001dae:	9300      	str	r3, [sp, #0]
 8001db0:	2303      	movs	r3, #3
 8001db2:	2205      	movs	r2, #5
 8001db4:	211a      	movs	r1, #26
 8001db6:	f7ff fd29 	bl	800180c <_Z9writeBitshhhhh>
}
 8001dba:	bf00      	nop
 8001dbc:	3708      	adds	r7, #8
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	bd80      	pop	{r7, pc}

08001dc2 <_ZN7MPU605011setDLPFModeEh>:
 * @see MPU6050_DLPF_BW_256
 * @see MPU6050_RA_CONFIG
 * @see MPU6050_CFG_DLPF_CFG_BIT
 * @see MPU6050_CFG_DLPF_CFG_LENGTH
 */
void MPU6050::setDLPFMode(uint8_t mode) {
 8001dc2:	b580      	push	{r7, lr}
 8001dc4:	b084      	sub	sp, #16
 8001dc6:	af02      	add	r7, sp, #8
 8001dc8:	6078      	str	r0, [r7, #4]
 8001dca:	460b      	mov	r3, r1
 8001dcc:	70fb      	strb	r3, [r7, #3]
    writeBits(devAddr, MPU6050_RA_CONFIG, MPU6050_CFG_DLPF_CFG_BIT, MPU6050_CFG_DLPF_CFG_LENGTH, mode);
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	7998      	ldrb	r0, [r3, #6]
 8001dd2:	78fb      	ldrb	r3, [r7, #3]
 8001dd4:	9300      	str	r3, [sp, #0]
 8001dd6:	2303      	movs	r3, #3
 8001dd8:	2202      	movs	r2, #2
 8001dda:	211a      	movs	r1, #26
 8001ddc:	f7ff fd16 	bl	800180c <_Z9writeBitshhhhh>
}
 8001de0:	bf00      	nop
 8001de2:	3708      	adds	r7, #8
 8001de4:	46bd      	mov	sp, r7
 8001de6:	bd80      	pop	{r7, pc}

08001de8 <_ZN7MPU605021setFullScaleGyroRangeEh>:
 * @see MPU6050_GYRO_FS_250
 * @see MPU6050_RA_GYRO_CONFIG
 * @see MPU6050_GCONFIG_FS_SEL_BIT
 * @see MPU6050_GCONFIG_FS_SEL_LENGTH
 */
void MPU6050::setFullScaleGyroRange(uint8_t range) {
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b084      	sub	sp, #16
 8001dec:	af02      	add	r7, sp, #8
 8001dee:	6078      	str	r0, [r7, #4]
 8001df0:	460b      	mov	r3, r1
 8001df2:	70fb      	strb	r3, [r7, #3]
    writeBits(devAddr, MPU6050_RA_GYRO_CONFIG, MPU6050_GCONFIG_FS_SEL_BIT, MPU6050_GCONFIG_FS_SEL_LENGTH, range);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	7998      	ldrb	r0, [r3, #6]
 8001df8:	78fb      	ldrb	r3, [r7, #3]
 8001dfa:	9300      	str	r3, [sp, #0]
 8001dfc:	2302      	movs	r3, #2
 8001dfe:	2204      	movs	r2, #4
 8001e00:	211b      	movs	r1, #27
 8001e02:	f7ff fd03 	bl	800180c <_Z9writeBitshhhhh>
}
 8001e06:	bf00      	nop
 8001e08:	3708      	adds	r7, #8
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	bd80      	pop	{r7, pc}

08001e0e <_ZN7MPU605022setFullScaleAccelRangeEh>:
}
/** Set full-scale accelerometer range.
 * @param range New full-scale accelerometer range setting
 * @see getFullScaleAccelRange()
 */
void MPU6050::setFullScaleAccelRange(uint8_t range) {
 8001e0e:	b580      	push	{r7, lr}
 8001e10:	b084      	sub	sp, #16
 8001e12:	af02      	add	r7, sp, #8
 8001e14:	6078      	str	r0, [r7, #4]
 8001e16:	460b      	mov	r3, r1
 8001e18:	70fb      	strb	r3, [r7, #3]
    writeBits(devAddr, MPU6050_RA_ACCEL_CONFIG, MPU6050_ACONFIG_AFS_SEL_BIT, MPU6050_ACONFIG_AFS_SEL_LENGTH, range);
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	7998      	ldrb	r0, [r3, #6]
 8001e1e:	78fb      	ldrb	r3, [r7, #3]
 8001e20:	9300      	str	r3, [sp, #0]
 8001e22:	2302      	movs	r3, #2
 8001e24:	2204      	movs	r2, #4
 8001e26:	211c      	movs	r1, #28
 8001e28:	f7ff fcf0 	bl	800180c <_Z9writeBitshhhhh>
}
 8001e2c:	bf00      	nop
 8001e2e:	3708      	adds	r7, #8
 8001e30:	46bd      	mov	sp, r7
 8001e32:	bd80      	pop	{r7, pc}

08001e34 <_ZN7MPU605027setMotionDetectionThresholdEh>:
/** Set motion detection event acceleration threshold.
 * @param threshold New motion detection acceleration threshold value (LSB = 2mg)
 * @see getMotionDetectionThreshold()
 * @see MPU6050_RA_MOT_THR
 */
void MPU6050::setMotionDetectionThreshold(uint8_t threshold) {
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b082      	sub	sp, #8
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
 8001e3c:	460b      	mov	r3, r1
 8001e3e:	70fb      	strb	r3, [r7, #3]
    writeByte(devAddr, MPU6050_RA_MOT_THR, threshold);
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	799b      	ldrb	r3, [r3, #6]
 8001e44:	78fa      	ldrb	r2, [r7, #3]
 8001e46:	211f      	movs	r1, #31
 8001e48:	4618      	mov	r0, r3
 8001e4a:	f7ff fd6b 	bl	8001924 <_Z9writeBytehhh>
}
 8001e4e:	bf00      	nop
 8001e50:	3708      	adds	r7, #8
 8001e52:	46bd      	mov	sp, r7
 8001e54:	bd80      	pop	{r7, pc}

08001e56 <_ZN7MPU605026setMotionDetectionDurationEh>:
/** Set motion detection event duration threshold.
 * @param duration New motion detection duration threshold value (LSB = 1ms)
 * @see getMotionDetectionDuration()
 * @see MPU6050_RA_MOT_DUR
 */
void MPU6050::setMotionDetectionDuration(uint8_t duration) {
 8001e56:	b580      	push	{r7, lr}
 8001e58:	b082      	sub	sp, #8
 8001e5a:	af00      	add	r7, sp, #0
 8001e5c:	6078      	str	r0, [r7, #4]
 8001e5e:	460b      	mov	r3, r1
 8001e60:	70fb      	strb	r3, [r7, #3]
    writeByte(devAddr, MPU6050_RA_MOT_DUR, duration);
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	799b      	ldrb	r3, [r3, #6]
 8001e66:	78fa      	ldrb	r2, [r7, #3]
 8001e68:	2120      	movs	r1, #32
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	f7ff fd5a 	bl	8001924 <_Z9writeBytehhh>
}
 8001e70:	bf00      	nop
 8001e72:	3708      	adds	r7, #8
 8001e74:	46bd      	mov	sp, r7
 8001e76:	bd80      	pop	{r7, pc}

08001e78 <_ZN7MPU605031setZeroMotionDetectionThresholdEh>:
/** Set zero motion detection event acceleration threshold.
 * @param threshold New zero motion detection acceleration threshold value (LSB = 2mg)
 * @see getZeroMotionDetectionThreshold()
 * @see MPU6050_RA_ZRMOT_THR
 */
void MPU6050::setZeroMotionDetectionThreshold(uint8_t threshold) {
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b082      	sub	sp, #8
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
 8001e80:	460b      	mov	r3, r1
 8001e82:	70fb      	strb	r3, [r7, #3]
    writeByte(devAddr, MPU6050_RA_ZRMOT_THR, threshold);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	799b      	ldrb	r3, [r3, #6]
 8001e88:	78fa      	ldrb	r2, [r7, #3]
 8001e8a:	2121      	movs	r1, #33	; 0x21
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	f7ff fd49 	bl	8001924 <_Z9writeBytehhh>
}
 8001e92:	bf00      	nop
 8001e94:	3708      	adds	r7, #8
 8001e96:	46bd      	mov	sp, r7
 8001e98:	bd80      	pop	{r7, pc}

08001e9a <_ZN7MPU605030setZeroMotionDetectionDurationEh>:
/** Set zero motion detection event duration threshold.
 * @param duration New zero motion detection duration threshold value (LSB = 1ms)
 * @see getZeroMotionDetectionDuration()
 * @see MPU6050_RA_ZRMOT_DUR
 */
void MPU6050::setZeroMotionDetectionDuration(uint8_t duration) {
 8001e9a:	b580      	push	{r7, lr}
 8001e9c:	b082      	sub	sp, #8
 8001e9e:	af00      	add	r7, sp, #0
 8001ea0:	6078      	str	r0, [r7, #4]
 8001ea2:	460b      	mov	r3, r1
 8001ea4:	70fb      	strb	r3, [r7, #3]
    writeByte(devAddr, MPU6050_RA_ZRMOT_DUR, duration);
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	799b      	ldrb	r3, [r3, #6]
 8001eaa:	78fa      	ldrb	r2, [r7, #3]
 8001eac:	2122      	movs	r1, #34	; 0x22
 8001eae:	4618      	mov	r0, r3
 8001eb0:	f7ff fd38 	bl	8001924 <_Z9writeBytehhh>
}
 8001eb4:	bf00      	nop
 8001eb6:	3708      	adds	r7, #8
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	bd80      	pop	{r7, pc}

08001ebc <_ZN7MPU605015setSlaveAddressEhh>:
 * @param num Slave number (0-3)
 * @param address New address for specified slave
 * @see getSlaveAddress()
 * @see MPU6050_RA_I2C_SLV0_ADDR
 */
void MPU6050::setSlaveAddress(uint8_t num, uint8_t address) {
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b082      	sub	sp, #8
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
 8001ec4:	460b      	mov	r3, r1
 8001ec6:	70fb      	strb	r3, [r7, #3]
 8001ec8:	4613      	mov	r3, r2
 8001eca:	70bb      	strb	r3, [r7, #2]
    if (num > 3) return;
 8001ecc:	78fb      	ldrb	r3, [r7, #3]
 8001ece:	2b03      	cmp	r3, #3
 8001ed0:	d80d      	bhi.n	8001eee <_ZN7MPU605015setSlaveAddressEhh+0x32>
    writeByte(devAddr, MPU6050_RA_I2C_SLV0_ADDR + num*3, address);
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	7998      	ldrb	r0, [r3, #6]
 8001ed6:	78fb      	ldrb	r3, [r7, #3]
 8001ed8:	461a      	mov	r2, r3
 8001eda:	0052      	lsls	r2, r2, #1
 8001edc:	4413      	add	r3, r2
 8001ede:	b2db      	uxtb	r3, r3
 8001ee0:	3325      	adds	r3, #37	; 0x25
 8001ee2:	b2db      	uxtb	r3, r3
 8001ee4:	78ba      	ldrb	r2, [r7, #2]
 8001ee6:	4619      	mov	r1, r3
 8001ee8:	f7ff fd1c 	bl	8001924 <_Z9writeBytehhh>
 8001eec:	e000      	b.n	8001ef0 <_ZN7MPU605015setSlaveAddressEhh+0x34>
    if (num > 3) return;
 8001eee:	bf00      	nop
}
 8001ef0:	3708      	adds	r7, #8
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	bd80      	pop	{r7, pc}

08001ef6 <_ZN7MPU605013setIntEnabledEh>:
 * @param enabled New interrupt enabled status
 * @see getIntFreefallEnabled()
 * @see MPU6050_RA_INT_ENABLE
 * @see MPU6050_INTERRUPT_FF_BIT
 **/
void MPU6050::setIntEnabled(uint8_t enabled) {
 8001ef6:	b580      	push	{r7, lr}
 8001ef8:	b082      	sub	sp, #8
 8001efa:	af00      	add	r7, sp, #0
 8001efc:	6078      	str	r0, [r7, #4]
 8001efe:	460b      	mov	r3, r1
 8001f00:	70fb      	strb	r3, [r7, #3]
    writeByte(devAddr, MPU6050_RA_INT_ENABLE, enabled);
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	799b      	ldrb	r3, [r3, #6]
 8001f06:	78fa      	ldrb	r2, [r7, #3]
 8001f08:	2138      	movs	r1, #56	; 0x38
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	f7ff fd0a 	bl	8001924 <_Z9writeBytehhh>
}
 8001f10:	bf00      	nop
 8001f12:	3708      	adds	r7, #8
 8001f14:	46bd      	mov	sp, r7
 8001f16:	bd80      	pop	{r7, pc}

08001f18 <_ZN7MPU605012getIntStatusEv>:
 * for getting multiple INT statuses, since each single bit read clears
 * all of them because it has to read the whole byte.
 * @return Current interrupt status
 * @see MPU6050_RA_INT_STATUS
 */
uint8_t MPU6050::getIntStatus() {
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b082      	sub	sp, #8
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
    readByte(devAddr, MPU6050_RA_INT_STATUS, buffer);
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	7998      	ldrb	r0, [r3, #6]
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	3307      	adds	r3, #7
 8001f28:	461a      	mov	r2, r3
 8001f2a:	213a      	movs	r1, #58	; 0x3a
 8001f2c:	f7ff fb42 	bl	80015b4 <_Z8readBytehhPh>
    return buffer[0];
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	79db      	ldrb	r3, [r3, #7]
}
 8001f34:	4618      	mov	r0, r3
 8001f36:	3708      	adds	r7, #8
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	bd80      	pop	{r7, pc}

08001f3c <_ZN7MPU605014setFIFOEnabledEb>:
 * @param enabled New FIFO enabled status
 * @see getFIFOEnabled()
 * @see MPU6050_RA_USER_CTRL
 * @see MPU6050_USERCTRL_FIFO_EN_BIT
 */
void MPU6050::setFIFOEnabled(bool enabled) {
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b082      	sub	sp, #8
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
 8001f44:	460b      	mov	r3, r1
 8001f46:	70fb      	strb	r3, [r7, #3]
    writeBit(devAddr, MPU6050_RA_USER_CTRL, MPU6050_USERCTRL_FIFO_EN_BIT, enabled);
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	7998      	ldrb	r0, [r3, #6]
 8001f4c:	78fb      	ldrb	r3, [r7, #3]
 8001f4e:	2206      	movs	r2, #6
 8001f50:	216a      	movs	r1, #106	; 0x6a
 8001f52:	f7ff fbdf 	bl	8001714 <_Z8writeBithhhh>
}
 8001f56:	bf00      	nop
 8001f58:	3708      	adds	r7, #8
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	bd80      	pop	{r7, pc}

08001f5e <_ZN7MPU605023setI2CMasterModeEnabledEb>:
 * @param enabled New I2C Master Mode enabled status
 * @see getI2CMasterModeEnabled()
 * @see MPU6050_RA_USER_CTRL
 * @see MPU6050_USERCTRL_I2C_MST_EN_BIT
 */
void MPU6050::setI2CMasterModeEnabled(bool enabled) {
 8001f5e:	b580      	push	{r7, lr}
 8001f60:	b082      	sub	sp, #8
 8001f62:	af00      	add	r7, sp, #0
 8001f64:	6078      	str	r0, [r7, #4]
 8001f66:	460b      	mov	r3, r1
 8001f68:	70fb      	strb	r3, [r7, #3]
    writeBit(devAddr, MPU6050_RA_USER_CTRL, MPU6050_USERCTRL_I2C_MST_EN_BIT, enabled);
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	7998      	ldrb	r0, [r3, #6]
 8001f6e:	78fb      	ldrb	r3, [r7, #3]
 8001f70:	2205      	movs	r2, #5
 8001f72:	216a      	movs	r1, #106	; 0x6a
 8001f74:	f7ff fbce 	bl	8001714 <_Z8writeBithhhh>
}
 8001f78:	bf00      	nop
 8001f7a:	3708      	adds	r7, #8
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	bd80      	pop	{r7, pc}

08001f80 <_ZN7MPU60509resetFIFOEv>:
 * This bit resets the FIFO buffer when set to 1 while FIFO_EN equals 0. This
 * bit automatically clears to 0 after the reset has been triggered.
 * @see MPU6050_RA_USER_CTRL
 * @see MPU6050_USERCTRL_FIFO_RESET_BIT
 */
void MPU6050::resetFIFO() {
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b082      	sub	sp, #8
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
    writeBit(devAddr, MPU6050_RA_USER_CTRL, MPU6050_USERCTRL_FIFO_RESET_BIT, true);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	7998      	ldrb	r0, [r3, #6]
 8001f8c:	2301      	movs	r3, #1
 8001f8e:	2202      	movs	r2, #2
 8001f90:	216a      	movs	r1, #106	; 0x6a
 8001f92:	f7ff fbbf 	bl	8001714 <_Z8writeBithhhh>
}
 8001f96:	bf00      	nop
 8001f98:	3708      	adds	r7, #8
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	bd80      	pop	{r7, pc}

08001f9e <_ZN7MPU605014resetI2CMasterEv>:
 * This bit resets the I2C Master when set to 1 while I2C_MST_EN equals 0.
 * This bit automatically clears to 0 after the reset has been triggered.
 * @see MPU6050_RA_USER_CTRL
 * @see MPU6050_USERCTRL_I2C_MST_RESET_BIT
 */
void MPU6050::resetI2CMaster() {
 8001f9e:	b580      	push	{r7, lr}
 8001fa0:	b082      	sub	sp, #8
 8001fa2:	af00      	add	r7, sp, #0
 8001fa4:	6078      	str	r0, [r7, #4]
    writeBit(devAddr, MPU6050_RA_USER_CTRL, MPU6050_USERCTRL_I2C_MST_RESET_BIT, true);
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	7998      	ldrb	r0, [r3, #6]
 8001faa:	2301      	movs	r3, #1
 8001fac:	2201      	movs	r2, #1
 8001fae:	216a      	movs	r1, #106	; 0x6a
 8001fb0:	f7ff fbb0 	bl	8001714 <_Z8writeBithhhh>
}
 8001fb4:	bf00      	nop
 8001fb6:	3708      	adds	r7, #8
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	bd80      	pop	{r7, pc}

08001fbc <_ZN7MPU60505resetEv>:
/** Trigger a full device reset.
 * A small delay of ~50ms may be desirable after triggering a reset.
 * @see MPU6050_RA_PWR_MGMT_1
 * @see MPU6050_PWR1_DEVICE_RESET_BIT
 */
void MPU6050::reset() {
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b082      	sub	sp, #8
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
    writeBit(devAddr, MPU6050_RA_PWR_MGMT_1, MPU6050_PWR1_DEVICE_RESET_BIT, true);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	7998      	ldrb	r0, [r3, #6]
 8001fc8:	2301      	movs	r3, #1
 8001fca:	2207      	movs	r2, #7
 8001fcc:	216b      	movs	r1, #107	; 0x6b
 8001fce:	f7ff fba1 	bl	8001714 <_Z8writeBithhhh>
}
 8001fd2:	bf00      	nop
 8001fd4:	3708      	adds	r7, #8
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	bd80      	pop	{r7, pc}

08001fda <_ZN7MPU605015setSleepEnabledEb>:
 * @param enabled New sleep mode enabled status
 * @see getSleepEnabled()
 * @see MPU6050_RA_PWR_MGMT_1
 * @see MPU6050_PWR1_SLEEP_BIT
 */
void MPU6050::setSleepEnabled(bool enabled) {
 8001fda:	b580      	push	{r7, lr}
 8001fdc:	b082      	sub	sp, #8
 8001fde:	af00      	add	r7, sp, #0
 8001fe0:	6078      	str	r0, [r7, #4]
 8001fe2:	460b      	mov	r3, r1
 8001fe4:	70fb      	strb	r3, [r7, #3]
    writeBit(devAddr, MPU6050_RA_PWR_MGMT_1, MPU6050_PWR1_SLEEP_BIT, enabled);
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	7998      	ldrb	r0, [r3, #6]
 8001fea:	78fb      	ldrb	r3, [r7, #3]
 8001fec:	2206      	movs	r2, #6
 8001fee:	216b      	movs	r1, #107	; 0x6b
 8001ff0:	f7ff fb90 	bl	8001714 <_Z8writeBithhhh>
}
 8001ff4:	bf00      	nop
 8001ff6:	3708      	adds	r7, #8
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	bd80      	pop	{r7, pc}

08001ffc <_ZN7MPU605014setClockSourceEh>:
 * @see getClockSource()
 * @see MPU6050_RA_PWR_MGMT_1
 * @see MPU6050_PWR1_CLKSEL_BIT
 * @see MPU6050_PWR1_CLKSEL_LENGTH
 */
void MPU6050::setClockSource(uint8_t source) {
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b084      	sub	sp, #16
 8002000:	af02      	add	r7, sp, #8
 8002002:	6078      	str	r0, [r7, #4]
 8002004:	460b      	mov	r3, r1
 8002006:	70fb      	strb	r3, [r7, #3]
    writeBits(devAddr, MPU6050_RA_PWR_MGMT_1, MPU6050_PWR1_CLKSEL_BIT, MPU6050_PWR1_CLKSEL_LENGTH, source);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	7998      	ldrb	r0, [r3, #6]
 800200c:	78fb      	ldrb	r3, [r7, #3]
 800200e:	9300      	str	r3, [sp, #0]
 8002010:	2303      	movs	r3, #3
 8002012:	2202      	movs	r2, #2
 8002014:	216b      	movs	r1, #107	; 0x6b
 8002016:	f7ff fbf9 	bl	800180c <_Z9writeBitshhhhh>
}
 800201a:	bf00      	nop
 800201c:	3708      	adds	r7, #8
 800201e:	46bd      	mov	sp, r7
 8002020:	bd80      	pop	{r7, pc}

08002022 <_ZN7MPU605012getFIFOCountEv>:
 * number is in turn the number of bytes that can be read from the FIFO buffer
 * and it is directly proportional to the number of samples available given the
 * set of sensor data bound to be stored in the FIFO (register 35 and 36).
 * @return Current FIFO buffer size
 */
uint16_t MPU6050::getFIFOCount() {
 8002022:	b580      	push	{r7, lr}
 8002024:	b082      	sub	sp, #8
 8002026:	af00      	add	r7, sp, #0
 8002028:	6078      	str	r0, [r7, #4]
    readBytes(devAddr, MPU6050_RA_FIFO_COUNTH, 2, buffer);
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	7998      	ldrb	r0, [r3, #6]
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	3307      	adds	r3, #7
 8002032:	2202      	movs	r2, #2
 8002034:	2172      	movs	r1, #114	; 0x72
 8002036:	f7ff faf7 	bl	8001628 <_Z9readByteshhhPh>
    return (((uint16_t)buffer[0]) << 8) | buffer[1];
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	79db      	ldrb	r3, [r3, #7]
 800203e:	021b      	lsls	r3, r3, #8
 8002040:	b21a      	sxth	r2, r3
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	7a1b      	ldrb	r3, [r3, #8]
 8002046:	b21b      	sxth	r3, r3
 8002048:	4313      	orrs	r3, r2
 800204a:	b21b      	sxth	r3, r3
 800204c:	b29b      	uxth	r3, r3
}
 800204e:	4618      	mov	r0, r3
 8002050:	3708      	adds	r7, #8
 8002052:	46bd      	mov	sp, r7
 8002054:	bd80      	pop	{r7, pc}

08002056 <_ZN7MPU605012getFIFOBytesEPhh>:
 */
uint8_t MPU6050::getFIFOByte() {
    readByte(devAddr, MPU6050_RA_FIFO_R_W, buffer);
    return buffer[0];
}
void MPU6050::getFIFOBytes(uint8_t *data, uint8_t length) {
 8002056:	b580      	push	{r7, lr}
 8002058:	b084      	sub	sp, #16
 800205a:	af00      	add	r7, sp, #0
 800205c:	60f8      	str	r0, [r7, #12]
 800205e:	60b9      	str	r1, [r7, #8]
 8002060:	4613      	mov	r3, r2
 8002062:	71fb      	strb	r3, [r7, #7]
    if(length > 0){
 8002064:	79fb      	ldrb	r3, [r7, #7]
 8002066:	2b00      	cmp	r3, #0
 8002068:	d007      	beq.n	800207a <_ZN7MPU605012getFIFOBytesEPhh+0x24>
        readBytes(devAddr, MPU6050_RA_FIFO_R_W, length, data);
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	7998      	ldrb	r0, [r3, #6]
 800206e:	79fa      	ldrb	r2, [r7, #7]
 8002070:	68bb      	ldr	r3, [r7, #8]
 8002072:	2174      	movs	r1, #116	; 0x74
 8002074:	f7ff fad8 	bl	8001628 <_Z9readByteshhhPh>
    } else {
    	*data = 0;
    }
}
 8002078:	e002      	b.n	8002080 <_ZN7MPU605012getFIFOBytesEPhh+0x2a>
    	*data = 0;
 800207a:	68bb      	ldr	r3, [r7, #8]
 800207c:	2200      	movs	r2, #0
 800207e:	701a      	strb	r2, [r3, #0]
}
 8002080:	bf00      	nop
 8002082:	3710      	adds	r7, #16
 8002084:	46bd      	mov	sp, r7
 8002086:	bd80      	pop	{r7, pc}

08002088 <_ZN7MPU605015setOTPBankValidEb>:

uint8_t MPU6050::getOTPBankValid() {
    readBit(devAddr, MPU6050_RA_XG_OFFS_TC, MPU6050_TC_OTP_BNK_VLD_BIT, buffer);
    return buffer[0];
}
void MPU6050::setOTPBankValid(bool enabled) {
 8002088:	b580      	push	{r7, lr}
 800208a:	b082      	sub	sp, #8
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
 8002090:	460b      	mov	r3, r1
 8002092:	70fb      	strb	r3, [r7, #3]
    writeBit(devAddr, MPU6050_RA_XG_OFFS_TC, MPU6050_TC_OTP_BNK_VLD_BIT, enabled);
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	7998      	ldrb	r0, [r3, #6]
 8002098:	78fb      	ldrb	r3, [r7, #3]
 800209a:	2200      	movs	r2, #0
 800209c:	2100      	movs	r1, #0
 800209e:	f7ff fb39 	bl	8001714 <_Z8writeBithhhh>
}
 80020a2:	bf00      	nop
 80020a4:	3708      	adds	r7, #8
 80020a6:	46bd      	mov	sp, r7
 80020a8:	bd80      	pop	{r7, pc}

080020aa <_ZN7MPU605016getXGyroOffsetTCEv>:
int8_t MPU6050::getXGyroOffsetTC() {
 80020aa:	b580      	push	{r7, lr}
 80020ac:	b084      	sub	sp, #16
 80020ae:	af02      	add	r7, sp, #8
 80020b0:	6078      	str	r0, [r7, #4]
    readBits(devAddr, MPU6050_RA_XG_OFFS_TC, MPU6050_TC_OFFSET_BIT, MPU6050_TC_OFFSET_LENGTH, buffer);
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	7998      	ldrb	r0, [r3, #6]
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	3307      	adds	r3, #7
 80020ba:	9300      	str	r3, [sp, #0]
 80020bc:	2306      	movs	r3, #6
 80020be:	2206      	movs	r2, #6
 80020c0:	2100      	movs	r1, #0
 80020c2:	f7ff fa19 	bl	80014f8 <_Z8readBitshhhhPh>
    return buffer[0];
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	79db      	ldrb	r3, [r3, #7]
 80020ca:	b25b      	sxtb	r3, r3
}
 80020cc:	4618      	mov	r0, r3
 80020ce:	3708      	adds	r7, #8
 80020d0:	46bd      	mov	sp, r7
 80020d2:	bd80      	pop	{r7, pc}

080020d4 <_ZN7MPU605016setXGyroOffsetTCEa>:
void MPU6050::setXGyroOffsetTC(int8_t offset) {
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b084      	sub	sp, #16
 80020d8:	af02      	add	r7, sp, #8
 80020da:	6078      	str	r0, [r7, #4]
 80020dc:	460b      	mov	r3, r1
 80020de:	70fb      	strb	r3, [r7, #3]
    writeBits(devAddr, MPU6050_RA_XG_OFFS_TC, MPU6050_TC_OFFSET_BIT, MPU6050_TC_OFFSET_LENGTH, offset);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	7998      	ldrb	r0, [r3, #6]
 80020e4:	78fb      	ldrb	r3, [r7, #3]
 80020e6:	9300      	str	r3, [sp, #0]
 80020e8:	2306      	movs	r3, #6
 80020ea:	2206      	movs	r2, #6
 80020ec:	2100      	movs	r1, #0
 80020ee:	f7ff fb8d 	bl	800180c <_Z9writeBitshhhhh>
}
 80020f2:	bf00      	nop
 80020f4:	3708      	adds	r7, #8
 80020f6:	46bd      	mov	sp, r7
 80020f8:	bd80      	pop	{r7, pc}

080020fa <_ZN7MPU605016getYGyroOffsetTCEv>:

// YG_OFFS_TC register

int8_t MPU6050::getYGyroOffsetTC() {
 80020fa:	b580      	push	{r7, lr}
 80020fc:	b084      	sub	sp, #16
 80020fe:	af02      	add	r7, sp, #8
 8002100:	6078      	str	r0, [r7, #4]
    readBits(devAddr, MPU6050_RA_YG_OFFS_TC, MPU6050_TC_OFFSET_BIT, MPU6050_TC_OFFSET_LENGTH, buffer);
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	7998      	ldrb	r0, [r3, #6]
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	3307      	adds	r3, #7
 800210a:	9300      	str	r3, [sp, #0]
 800210c:	2306      	movs	r3, #6
 800210e:	2206      	movs	r2, #6
 8002110:	2101      	movs	r1, #1
 8002112:	f7ff f9f1 	bl	80014f8 <_Z8readBitshhhhPh>
    return buffer[0];
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	79db      	ldrb	r3, [r3, #7]
 800211a:	b25b      	sxtb	r3, r3
}
 800211c:	4618      	mov	r0, r3
 800211e:	3708      	adds	r7, #8
 8002120:	46bd      	mov	sp, r7
 8002122:	bd80      	pop	{r7, pc}

08002124 <_ZN7MPU605016setYGyroOffsetTCEa>:
void MPU6050::setYGyroOffsetTC(int8_t offset) {
 8002124:	b580      	push	{r7, lr}
 8002126:	b084      	sub	sp, #16
 8002128:	af02      	add	r7, sp, #8
 800212a:	6078      	str	r0, [r7, #4]
 800212c:	460b      	mov	r3, r1
 800212e:	70fb      	strb	r3, [r7, #3]
    writeBits(devAddr, MPU6050_RA_YG_OFFS_TC, MPU6050_TC_OFFSET_BIT, MPU6050_TC_OFFSET_LENGTH, offset);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	7998      	ldrb	r0, [r3, #6]
 8002134:	78fb      	ldrb	r3, [r7, #3]
 8002136:	9300      	str	r3, [sp, #0]
 8002138:	2306      	movs	r3, #6
 800213a:	2206      	movs	r2, #6
 800213c:	2101      	movs	r1, #1
 800213e:	f7ff fb65 	bl	800180c <_Z9writeBitshhhhh>
}
 8002142:	bf00      	nop
 8002144:	3708      	adds	r7, #8
 8002146:	46bd      	mov	sp, r7
 8002148:	bd80      	pop	{r7, pc}

0800214a <_ZN7MPU605016getZGyroOffsetTCEv>:

// ZG_OFFS_TC register

int8_t MPU6050::getZGyroOffsetTC() {
 800214a:	b580      	push	{r7, lr}
 800214c:	b084      	sub	sp, #16
 800214e:	af02      	add	r7, sp, #8
 8002150:	6078      	str	r0, [r7, #4]
    readBits(devAddr, MPU6050_RA_ZG_OFFS_TC, MPU6050_TC_OFFSET_BIT, MPU6050_TC_OFFSET_LENGTH, buffer);
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	7998      	ldrb	r0, [r3, #6]
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	3307      	adds	r3, #7
 800215a:	9300      	str	r3, [sp, #0]
 800215c:	2306      	movs	r3, #6
 800215e:	2206      	movs	r2, #6
 8002160:	2102      	movs	r1, #2
 8002162:	f7ff f9c9 	bl	80014f8 <_Z8readBitshhhhPh>
    return buffer[0];
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	79db      	ldrb	r3, [r3, #7]
 800216a:	b25b      	sxtb	r3, r3
}
 800216c:	4618      	mov	r0, r3
 800216e:	3708      	adds	r7, #8
 8002170:	46bd      	mov	sp, r7
 8002172:	bd80      	pop	{r7, pc}

08002174 <_ZN7MPU605016setZGyroOffsetTCEa>:
void MPU6050::setZGyroOffsetTC(int8_t offset) {
 8002174:	b580      	push	{r7, lr}
 8002176:	b084      	sub	sp, #16
 8002178:	af02      	add	r7, sp, #8
 800217a:	6078      	str	r0, [r7, #4]
 800217c:	460b      	mov	r3, r1
 800217e:	70fb      	strb	r3, [r7, #3]
    writeBits(devAddr, MPU6050_RA_ZG_OFFS_TC, MPU6050_TC_OFFSET_BIT, MPU6050_TC_OFFSET_LENGTH, offset);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	7998      	ldrb	r0, [r3, #6]
 8002184:	78fb      	ldrb	r3, [r7, #3]
 8002186:	9300      	str	r3, [sp, #0]
 8002188:	2306      	movs	r3, #6
 800218a:	2206      	movs	r2, #6
 800218c:	2102      	movs	r1, #2
 800218e:	f7ff fb3d 	bl	800180c <_Z9writeBitshhhhh>
}
 8002192:	bf00      	nop
 8002194:	3708      	adds	r7, #8
 8002196:	46bd      	mov	sp, r7
 8002198:	bd80      	pop	{r7, pc}

0800219a <_ZN7MPU605015setXAccelOffsetEs>:

int16_t MPU6050::getXAccelOffset() {
    readBytes(devAddr, MPU6050_RA_XA_OFFS_H, 2, buffer);
    return (((int16_t)buffer[0]) << 8) | buffer[1];
}
void MPU6050::setXAccelOffset(int16_t offset) {
 800219a:	b580      	push	{r7, lr}
 800219c:	b082      	sub	sp, #8
 800219e:	af00      	add	r7, sp, #0
 80021a0:	6078      	str	r0, [r7, #4]
 80021a2:	460b      	mov	r3, r1
 80021a4:	807b      	strh	r3, [r7, #2]
    writeWord(devAddr, MPU6050_RA_XA_OFFS_H, offset);
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	799b      	ldrb	r3, [r3, #6]
 80021aa:	887a      	ldrh	r2, [r7, #2]
 80021ac:	2106      	movs	r1, #6
 80021ae:	4618      	mov	r0, r3
 80021b0:	f7ff fbf0 	bl	8001994 <_Z9writeWordhht>
}
 80021b4:	bf00      	nop
 80021b6:	3708      	adds	r7, #8
 80021b8:	46bd      	mov	sp, r7
 80021ba:	bd80      	pop	{r7, pc}

080021bc <_ZN7MPU605015setYAccelOffsetEs>:

int16_t MPU6050::getYAccelOffset() {
    readBytes(devAddr, MPU6050_RA_YA_OFFS_H, 2, buffer);
    return (((int16_t)buffer[0]) << 8) | buffer[1];
}
void MPU6050::setYAccelOffset(int16_t offset) {
 80021bc:	b580      	push	{r7, lr}
 80021be:	b082      	sub	sp, #8
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]
 80021c4:	460b      	mov	r3, r1
 80021c6:	807b      	strh	r3, [r7, #2]
    writeWord(devAddr, MPU6050_RA_YA_OFFS_H, offset);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	799b      	ldrb	r3, [r3, #6]
 80021cc:	887a      	ldrh	r2, [r7, #2]
 80021ce:	2108      	movs	r1, #8
 80021d0:	4618      	mov	r0, r3
 80021d2:	f7ff fbdf 	bl	8001994 <_Z9writeWordhht>
}
 80021d6:	bf00      	nop
 80021d8:	3708      	adds	r7, #8
 80021da:	46bd      	mov	sp, r7
 80021dc:	bd80      	pop	{r7, pc}

080021de <_ZN7MPU605015setZAccelOffsetEs>:

int16_t MPU6050::getZAccelOffset() {
    readBytes(devAddr, MPU6050_RA_ZA_OFFS_H, 2, buffer);
    return (((int16_t)buffer[0]) << 8) | buffer[1];
}
void MPU6050::setZAccelOffset(int16_t offset) {
 80021de:	b580      	push	{r7, lr}
 80021e0:	b082      	sub	sp, #8
 80021e2:	af00      	add	r7, sp, #0
 80021e4:	6078      	str	r0, [r7, #4]
 80021e6:	460b      	mov	r3, r1
 80021e8:	807b      	strh	r3, [r7, #2]
    writeWord(devAddr, MPU6050_RA_ZA_OFFS_H, offset);
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	799b      	ldrb	r3, [r3, #6]
 80021ee:	887a      	ldrh	r2, [r7, #2]
 80021f0:	210a      	movs	r1, #10
 80021f2:	4618      	mov	r0, r3
 80021f4:	f7ff fbce 	bl	8001994 <_Z9writeWordhht>
}
 80021f8:	bf00      	nop
 80021fa:	3708      	adds	r7, #8
 80021fc:	46bd      	mov	sp, r7
 80021fe:	bd80      	pop	{r7, pc}

08002200 <_ZN7MPU605014setXGyroOffsetEs>:

int16_t MPU6050::getXGyroOffset() {
    readBytes(devAddr, MPU6050_RA_XG_OFFS_USRH, 2, buffer);
    return (((int16_t)buffer[0]) << 8) | buffer[1];
}
void MPU6050::setXGyroOffset(int16_t offset) {
 8002200:	b580      	push	{r7, lr}
 8002202:	b082      	sub	sp, #8
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
 8002208:	460b      	mov	r3, r1
 800220a:	807b      	strh	r3, [r7, #2]
    writeWord(devAddr, MPU6050_RA_XG_OFFS_USRH, offset);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	799b      	ldrb	r3, [r3, #6]
 8002210:	887a      	ldrh	r2, [r7, #2]
 8002212:	2113      	movs	r1, #19
 8002214:	4618      	mov	r0, r3
 8002216:	f7ff fbbd 	bl	8001994 <_Z9writeWordhht>
}
 800221a:	bf00      	nop
 800221c:	3708      	adds	r7, #8
 800221e:	46bd      	mov	sp, r7
 8002220:	bd80      	pop	{r7, pc}

08002222 <_ZN7MPU605014setYGyroOffsetEs>:

int16_t MPU6050::getYGyroOffset() {
    readBytes(devAddr, MPU6050_RA_YG_OFFS_USRH, 2, buffer);
    return (((int16_t)buffer[0]) << 8) | buffer[1];
}
void MPU6050::setYGyroOffset(int16_t offset) {
 8002222:	b580      	push	{r7, lr}
 8002224:	b082      	sub	sp, #8
 8002226:	af00      	add	r7, sp, #0
 8002228:	6078      	str	r0, [r7, #4]
 800222a:	460b      	mov	r3, r1
 800222c:	807b      	strh	r3, [r7, #2]
    writeWord(devAddr, MPU6050_RA_YG_OFFS_USRH, offset);
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	799b      	ldrb	r3, [r3, #6]
 8002232:	887a      	ldrh	r2, [r7, #2]
 8002234:	2115      	movs	r1, #21
 8002236:	4618      	mov	r0, r3
 8002238:	f7ff fbac 	bl	8001994 <_Z9writeWordhht>
}
 800223c:	bf00      	nop
 800223e:	3708      	adds	r7, #8
 8002240:	46bd      	mov	sp, r7
 8002242:	bd80      	pop	{r7, pc}

08002244 <_ZN7MPU605014setZGyroOffsetEs>:

int16_t MPU6050::getZGyroOffset() {
    readBytes(devAddr, MPU6050_RA_ZG_OFFS_USRH, 2, buffer);
    return (((int16_t)buffer[0]) << 8) | buffer[1];
}
void MPU6050::setZGyroOffset(int16_t offset) {
 8002244:	b580      	push	{r7, lr}
 8002246:	b082      	sub	sp, #8
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
 800224c:	460b      	mov	r3, r1
 800224e:	807b      	strh	r3, [r7, #2]
    writeWord(devAddr, MPU6050_RA_ZG_OFFS_USRH, offset);
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	799b      	ldrb	r3, [r3, #6]
 8002254:	887a      	ldrh	r2, [r7, #2]
 8002256:	2117      	movs	r1, #23
 8002258:	4618      	mov	r0, r3
 800225a:	f7ff fb9b 	bl	8001994 <_Z9writeWordhht>
}
 800225e:	bf00      	nop
 8002260:	3708      	adds	r7, #8
 8002262:	46bd      	mov	sp, r7
 8002264:	bd80      	pop	{r7, pc}

08002266 <_ZN7MPU605013setDMPEnabledEb>:

bool MPU6050::getDMPEnabled() {
    readBit(devAddr, MPU6050_RA_USER_CTRL, MPU6050_USERCTRL_DMP_EN_BIT, buffer);
    return buffer[0];
}
void MPU6050::setDMPEnabled(bool enabled) {
 8002266:	b580      	push	{r7, lr}
 8002268:	b082      	sub	sp, #8
 800226a:	af00      	add	r7, sp, #0
 800226c:	6078      	str	r0, [r7, #4]
 800226e:	460b      	mov	r3, r1
 8002270:	70fb      	strb	r3, [r7, #3]
    writeBit(devAddr, MPU6050_RA_USER_CTRL, MPU6050_USERCTRL_DMP_EN_BIT, enabled);
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	7998      	ldrb	r0, [r3, #6]
 8002276:	78fb      	ldrb	r3, [r7, #3]
 8002278:	2207      	movs	r2, #7
 800227a:	216a      	movs	r1, #106	; 0x6a
 800227c:	f7ff fa4a 	bl	8001714 <_Z8writeBithhhh>
}
 8002280:	bf00      	nop
 8002282:	3708      	adds	r7, #8
 8002284:	46bd      	mov	sp, r7
 8002286:	bd80      	pop	{r7, pc}

08002288 <_ZN7MPU60508resetDMPEv>:
void MPU6050::resetDMP() {
 8002288:	b580      	push	{r7, lr}
 800228a:	b082      	sub	sp, #8
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
    writeBit(devAddr, MPU6050_RA_USER_CTRL, MPU6050_USERCTRL_DMP_RESET_BIT, true);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	7998      	ldrb	r0, [r3, #6]
 8002294:	2301      	movs	r3, #1
 8002296:	2203      	movs	r2, #3
 8002298:	216a      	movs	r1, #106	; 0x6a
 800229a:	f7ff fa3b 	bl	8001714 <_Z8writeBithhhh>
}
 800229e:	bf00      	nop
 80022a0:	3708      	adds	r7, #8
 80022a2:	46bd      	mov	sp, r7
 80022a4:	bd80      	pop	{r7, pc}

080022a6 <_ZN7MPU605013setMemoryBankEhbb>:

// BANK_SEL register

void MPU6050::setMemoryBank(uint8_t bank, bool prefetchEnabled, bool userBank) {
 80022a6:	b580      	push	{r7, lr}
 80022a8:	b082      	sub	sp, #8
 80022aa:	af00      	add	r7, sp, #0
 80022ac:	6078      	str	r0, [r7, #4]
 80022ae:	4608      	mov	r0, r1
 80022b0:	4611      	mov	r1, r2
 80022b2:	461a      	mov	r2, r3
 80022b4:	4603      	mov	r3, r0
 80022b6:	70fb      	strb	r3, [r7, #3]
 80022b8:	460b      	mov	r3, r1
 80022ba:	70bb      	strb	r3, [r7, #2]
 80022bc:	4613      	mov	r3, r2
 80022be:	707b      	strb	r3, [r7, #1]
    bank &= 0x1F;
 80022c0:	78fb      	ldrb	r3, [r7, #3]
 80022c2:	f003 031f 	and.w	r3, r3, #31
 80022c6:	70fb      	strb	r3, [r7, #3]
    if (userBank) bank |= 0x20;
 80022c8:	787b      	ldrb	r3, [r7, #1]
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d003      	beq.n	80022d6 <_ZN7MPU605013setMemoryBankEhbb+0x30>
 80022ce:	78fb      	ldrb	r3, [r7, #3]
 80022d0:	f043 0320 	orr.w	r3, r3, #32
 80022d4:	70fb      	strb	r3, [r7, #3]
    if (prefetchEnabled) bank |= 0x40;
 80022d6:	78bb      	ldrb	r3, [r7, #2]
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d003      	beq.n	80022e4 <_ZN7MPU605013setMemoryBankEhbb+0x3e>
 80022dc:	78fb      	ldrb	r3, [r7, #3]
 80022de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80022e2:	70fb      	strb	r3, [r7, #3]
    writeByte(devAddr, MPU6050_RA_BANK_SEL, bank);
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	799b      	ldrb	r3, [r3, #6]
 80022e8:	78fa      	ldrb	r2, [r7, #3]
 80022ea:	216d      	movs	r1, #109	; 0x6d
 80022ec:	4618      	mov	r0, r3
 80022ee:	f7ff fb19 	bl	8001924 <_Z9writeBytehhh>
}
 80022f2:	bf00      	nop
 80022f4:	3708      	adds	r7, #8
 80022f6:	46bd      	mov	sp, r7
 80022f8:	bd80      	pop	{r7, pc}

080022fa <_ZN7MPU605021setMemoryStartAddressEh>:

// MEM_START_ADDR register

void MPU6050::setMemoryStartAddress(uint8_t address) {
 80022fa:	b580      	push	{r7, lr}
 80022fc:	b082      	sub	sp, #8
 80022fe:	af00      	add	r7, sp, #0
 8002300:	6078      	str	r0, [r7, #4]
 8002302:	460b      	mov	r3, r1
 8002304:	70fb      	strb	r3, [r7, #3]
    writeByte(devAddr, MPU6050_RA_MEM_START_ADDR, address);
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	799b      	ldrb	r3, [r3, #6]
 800230a:	78fa      	ldrb	r2, [r7, #3]
 800230c:	216e      	movs	r1, #110	; 0x6e
 800230e:	4618      	mov	r0, r3
 8002310:	f7ff fb08 	bl	8001924 <_Z9writeBytehhh>
}
 8002314:	bf00      	nop
 8002316:	3708      	adds	r7, #8
 8002318:	46bd      	mov	sp, r7
 800231a:	bd80      	pop	{r7, pc}

0800231c <_ZN7MPU605015readMemoryBlockEPhthh>:
    return buffer[0];
}
void MPU6050::writeMemoryByte(uint8_t data) {
    writeByte(devAddr, MPU6050_RA_MEM_R_W, data);
}
void MPU6050::readMemoryBlock(uint8_t *data, uint16_t dataSize, uint8_t bank, uint8_t address) {
 800231c:	b580      	push	{r7, lr}
 800231e:	b086      	sub	sp, #24
 8002320:	af00      	add	r7, sp, #0
 8002322:	60f8      	str	r0, [r7, #12]
 8002324:	60b9      	str	r1, [r7, #8]
 8002326:	4611      	mov	r1, r2
 8002328:	461a      	mov	r2, r3
 800232a:	460b      	mov	r3, r1
 800232c:	80fb      	strh	r3, [r7, #6]
 800232e:	4613      	mov	r3, r2
 8002330:	717b      	strb	r3, [r7, #5]
    setMemoryBank(bank);
 8002332:	7979      	ldrb	r1, [r7, #5]
 8002334:	2300      	movs	r3, #0
 8002336:	2200      	movs	r2, #0
 8002338:	68f8      	ldr	r0, [r7, #12]
 800233a:	f7ff ffb4 	bl	80022a6 <_ZN7MPU605013setMemoryBankEhbb>
    setMemoryStartAddress(address);
 800233e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002342:	4619      	mov	r1, r3
 8002344:	68f8      	ldr	r0, [r7, #12]
 8002346:	f7ff ffd8 	bl	80022fa <_ZN7MPU605021setMemoryStartAddressEh>
    uint8_t chunkSize;
    for (uint16_t i = 0; i < dataSize;) {
 800234a:	2300      	movs	r3, #0
 800234c:	82bb      	strh	r3, [r7, #20]
 800234e:	8aba      	ldrh	r2, [r7, #20]
 8002350:	88fb      	ldrh	r3, [r7, #6]
 8002352:	429a      	cmp	r2, r3
 8002354:	d244      	bcs.n	80023e0 <_ZN7MPU605015readMemoryBlockEPhthh+0xc4>
        // determine correct chunk size according to bank position and data size
        chunkSize = MPU6050_DMP_MEMORY_CHUNK_SIZE;
 8002356:	2310      	movs	r3, #16
 8002358:	75fb      	strb	r3, [r7, #23]

        // make sure we don't go past the data size
        if (i + chunkSize > dataSize) chunkSize = dataSize - i;
 800235a:	8aba      	ldrh	r2, [r7, #20]
 800235c:	7dfb      	ldrb	r3, [r7, #23]
 800235e:	441a      	add	r2, r3
 8002360:	88fb      	ldrh	r3, [r7, #6]
 8002362:	429a      	cmp	r2, r3
 8002364:	dd05      	ble.n	8002372 <_ZN7MPU605015readMemoryBlockEPhthh+0x56>
 8002366:	88fb      	ldrh	r3, [r7, #6]
 8002368:	b2da      	uxtb	r2, r3
 800236a:	8abb      	ldrh	r3, [r7, #20]
 800236c:	b2db      	uxtb	r3, r3
 800236e:	1ad3      	subs	r3, r2, r3
 8002370:	75fb      	strb	r3, [r7, #23]

        // make sure this chunk doesn't go past the bank boundary (256 bytes)
        if (chunkSize > 256 - address) chunkSize = 256 - address;
 8002372:	7dfa      	ldrb	r2, [r7, #23]
 8002374:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002378:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 800237c:	429a      	cmp	r2, r3
 800237e:	dd03      	ble.n	8002388 <_ZN7MPU605015readMemoryBlockEPhthh+0x6c>
 8002380:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002384:	425b      	negs	r3, r3
 8002386:	75fb      	strb	r3, [r7, #23]

        // read the chunk of data as specified
        readBytes(devAddr, MPU6050_RA_MEM_R_W, chunkSize, data + i);
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	7998      	ldrb	r0, [r3, #6]
 800238c:	8abb      	ldrh	r3, [r7, #20]
 800238e:	68ba      	ldr	r2, [r7, #8]
 8002390:	4413      	add	r3, r2
 8002392:	7dfa      	ldrb	r2, [r7, #23]
 8002394:	216f      	movs	r1, #111	; 0x6f
 8002396:	f7ff f947 	bl	8001628 <_Z9readByteshhhPh>
        
        // increase byte index by [chunkSize]
        i += chunkSize;
 800239a:	7dfb      	ldrb	r3, [r7, #23]
 800239c:	b29a      	uxth	r2, r3
 800239e:	8abb      	ldrh	r3, [r7, #20]
 80023a0:	4413      	add	r3, r2
 80023a2:	82bb      	strh	r3, [r7, #20]

        // uint8_t automatically wraps to 0 at 256
        address += chunkSize;
 80023a4:	f897 2020 	ldrb.w	r2, [r7, #32]
 80023a8:	7dfb      	ldrb	r3, [r7, #23]
 80023aa:	4413      	add	r3, r2
 80023ac:	f887 3020 	strb.w	r3, [r7, #32]

        // if we aren't done, update bank (if necessary) and address
        if (i < dataSize) {
 80023b0:	8aba      	ldrh	r2, [r7, #20]
 80023b2:	88fb      	ldrh	r3, [r7, #6]
 80023b4:	429a      	cmp	r2, r3
 80023b6:	d2ca      	bcs.n	800234e <_ZN7MPU605015readMemoryBlockEPhthh+0x32>
            if (address == 0) bank++;
 80023b8:	f897 3020 	ldrb.w	r3, [r7, #32]
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d102      	bne.n	80023c6 <_ZN7MPU605015readMemoryBlockEPhthh+0xaa>
 80023c0:	797b      	ldrb	r3, [r7, #5]
 80023c2:	3301      	adds	r3, #1
 80023c4:	717b      	strb	r3, [r7, #5]
            setMemoryBank(bank);
 80023c6:	7979      	ldrb	r1, [r7, #5]
 80023c8:	2300      	movs	r3, #0
 80023ca:	2200      	movs	r2, #0
 80023cc:	68f8      	ldr	r0, [r7, #12]
 80023ce:	f7ff ff6a 	bl	80022a6 <_ZN7MPU605013setMemoryBankEhbb>
            setMemoryStartAddress(address);
 80023d2:	f897 3020 	ldrb.w	r3, [r7, #32]
 80023d6:	4619      	mov	r1, r3
 80023d8:	68f8      	ldr	r0, [r7, #12]
 80023da:	f7ff ff8e 	bl	80022fa <_ZN7MPU605021setMemoryStartAddressEh>
    for (uint16_t i = 0; i < dataSize;) {
 80023de:	e7b6      	b.n	800234e <_ZN7MPU605015readMemoryBlockEPhthh+0x32>
        }
    }
}
 80023e0:	bf00      	nop
 80023e2:	3718      	adds	r7, #24
 80023e4:	46bd      	mov	sp, r7
 80023e6:	bd80      	pop	{r7, pc}

080023e8 <_ZN7MPU605016writeMemoryBlockEPKhthhbb>:
bool MPU6050::writeMemoryBlock(const uint8_t *data, uint16_t dataSize, uint8_t bank, uint8_t address, bool verify, bool useProgMem) {
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b088      	sub	sp, #32
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	60f8      	str	r0, [r7, #12]
 80023f0:	60b9      	str	r1, [r7, #8]
 80023f2:	4611      	mov	r1, r2
 80023f4:	461a      	mov	r2, r3
 80023f6:	460b      	mov	r3, r1
 80023f8:	80fb      	strh	r3, [r7, #6]
 80023fa:	4613      	mov	r3, r2
 80023fc:	717b      	strb	r3, [r7, #5]
    setMemoryBank(bank);
 80023fe:	7979      	ldrb	r1, [r7, #5]
 8002400:	2300      	movs	r3, #0
 8002402:	2200      	movs	r2, #0
 8002404:	68f8      	ldr	r0, [r7, #12]
 8002406:	f7ff ff4e 	bl	80022a6 <_ZN7MPU605013setMemoryBankEhbb>
    setMemoryStartAddress(address);
 800240a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800240e:	4619      	mov	r1, r3
 8002410:	68f8      	ldr	r0, [r7, #12]
 8002412:	f7ff ff72 	bl	80022fa <_ZN7MPU605021setMemoryStartAddressEh>
    uint8_t chunkSize;
    uint8_t *verifyBuffer=0;
 8002416:	2300      	movs	r3, #0
 8002418:	61bb      	str	r3, [r7, #24]
    uint8_t *progBuffer=0;
 800241a:	2300      	movs	r3, #0
 800241c:	617b      	str	r3, [r7, #20]
    uint16_t i;
    uint8_t j;
    if (verify) verifyBuffer = (uint8_t *)malloc(MPU6050_DMP_MEMORY_CHUNK_SIZE);
 800241e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8002422:	2b00      	cmp	r3, #0
 8002424:	d004      	beq.n	8002430 <_ZN7MPU605016writeMemoryBlockEPKhthhbb+0x48>
 8002426:	2010      	movs	r0, #16
 8002428:	f00d faa8 	bl	800f97c <malloc>
 800242c:	4603      	mov	r3, r0
 800242e:	61bb      	str	r3, [r7, #24]
    if (useProgMem) progBuffer = (uint8_t *)malloc(MPU6050_DMP_MEMORY_CHUNK_SIZE);
 8002430:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8002434:	2b00      	cmp	r3, #0
 8002436:	d004      	beq.n	8002442 <_ZN7MPU605016writeMemoryBlockEPKhthhbb+0x5a>
 8002438:	2010      	movs	r0, #16
 800243a:	f00d fa9f 	bl	800f97c <malloc>
 800243e:	4603      	mov	r3, r0
 8002440:	617b      	str	r3, [r7, #20]
    for (i = 0; i < dataSize;) {
 8002442:	2300      	movs	r3, #0
 8002444:	827b      	strh	r3, [r7, #18]
 8002446:	8a7a      	ldrh	r2, [r7, #18]
 8002448:	88fb      	ldrh	r3, [r7, #6]
 800244a:	429a      	cmp	r2, r3
 800244c:	f080 808e 	bcs.w	800256c <_ZN7MPU605016writeMemoryBlockEPKhthhbb+0x184>
        // determine correct chunk size according to bank position and data size
        chunkSize = MPU6050_DMP_MEMORY_CHUNK_SIZE;
 8002450:	2310      	movs	r3, #16
 8002452:	77fb      	strb	r3, [r7, #31]

        // make sure we don't go past the data size
        if (i + chunkSize > dataSize) chunkSize = dataSize - i;
 8002454:	8a7a      	ldrh	r2, [r7, #18]
 8002456:	7ffb      	ldrb	r3, [r7, #31]
 8002458:	441a      	add	r2, r3
 800245a:	88fb      	ldrh	r3, [r7, #6]
 800245c:	429a      	cmp	r2, r3
 800245e:	dd05      	ble.n	800246c <_ZN7MPU605016writeMemoryBlockEPKhthhbb+0x84>
 8002460:	88fb      	ldrh	r3, [r7, #6]
 8002462:	b2da      	uxtb	r2, r3
 8002464:	8a7b      	ldrh	r3, [r7, #18]
 8002466:	b2db      	uxtb	r3, r3
 8002468:	1ad3      	subs	r3, r2, r3
 800246a:	77fb      	strb	r3, [r7, #31]

        // make sure this chunk doesn't go past the bank boundary (256 bytes)
        if (chunkSize > 256 - address) chunkSize = 256 - address;
 800246c:	7ffa      	ldrb	r2, [r7, #31]
 800246e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8002472:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8002476:	429a      	cmp	r2, r3
 8002478:	dd03      	ble.n	8002482 <_ZN7MPU605016writeMemoryBlockEPKhthhbb+0x9a>
 800247a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800247e:	425b      	negs	r3, r3
 8002480:	77fb      	strb	r3, [r7, #31]
        
        if (useProgMem) {
 8002482:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8002486:	2b00      	cmp	r3, #0
 8002488:	d013      	beq.n	80024b2 <_ZN7MPU605016writeMemoryBlockEPKhthhbb+0xca>
            // write the chunk of data as specified
            for (j = 0; j < chunkSize; j++) progBuffer[j] = pgm_read_byte(data + i + j);
 800248a:	2300      	movs	r3, #0
 800248c:	747b      	strb	r3, [r7, #17]
 800248e:	7c7a      	ldrb	r2, [r7, #17]
 8002490:	7ffb      	ldrb	r3, [r7, #31]
 8002492:	429a      	cmp	r2, r3
 8002494:	d211      	bcs.n	80024ba <_ZN7MPU605016writeMemoryBlockEPKhthhbb+0xd2>
 8002496:	8a7a      	ldrh	r2, [r7, #18]
 8002498:	7c7b      	ldrb	r3, [r7, #17]
 800249a:	4413      	add	r3, r2
 800249c:	68ba      	ldr	r2, [r7, #8]
 800249e:	441a      	add	r2, r3
 80024a0:	7c7b      	ldrb	r3, [r7, #17]
 80024a2:	6979      	ldr	r1, [r7, #20]
 80024a4:	440b      	add	r3, r1
 80024a6:	7812      	ldrb	r2, [r2, #0]
 80024a8:	701a      	strb	r2, [r3, #0]
 80024aa:	7c7b      	ldrb	r3, [r7, #17]
 80024ac:	3301      	adds	r3, #1
 80024ae:	747b      	strb	r3, [r7, #17]
 80024b0:	e7ed      	b.n	800248e <_ZN7MPU605016writeMemoryBlockEPKhthhbb+0xa6>
        } else {
            // write the chunk of data as specified
            progBuffer = (uint8_t *)data + i;
 80024b2:	8a7b      	ldrh	r3, [r7, #18]
 80024b4:	68ba      	ldr	r2, [r7, #8]
 80024b6:	4413      	add	r3, r2
 80024b8:	617b      	str	r3, [r7, #20]
        }

        writeBytes(devAddr, MPU6050_RA_MEM_R_W, chunkSize, progBuffer);
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	7998      	ldrb	r0, [r3, #6]
 80024be:	7ffa      	ldrb	r2, [r7, #31]
 80024c0:	697b      	ldr	r3, [r7, #20]
 80024c2:	216f      	movs	r1, #111	; 0x6f
 80024c4:	f7ff faa2 	bl	8001a0c <_Z10writeByteshhhPh>

        // verify data if needed
        if (verify && verifyBuffer) {
 80024c8:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d02a      	beq.n	8002526 <_ZN7MPU605016writeMemoryBlockEPKhthhbb+0x13e>
 80024d0:	69bb      	ldr	r3, [r7, #24]
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d027      	beq.n	8002526 <_ZN7MPU605016writeMemoryBlockEPKhthhbb+0x13e>
            setMemoryBank(bank);
 80024d6:	7979      	ldrb	r1, [r7, #5]
 80024d8:	2300      	movs	r3, #0
 80024da:	2200      	movs	r2, #0
 80024dc:	68f8      	ldr	r0, [r7, #12]
 80024de:	f7ff fee2 	bl	80022a6 <_ZN7MPU605013setMemoryBankEhbb>
            setMemoryStartAddress(address);
 80024e2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80024e6:	4619      	mov	r1, r3
 80024e8:	68f8      	ldr	r0, [r7, #12]
 80024ea:	f7ff ff06 	bl	80022fa <_ZN7MPU605021setMemoryStartAddressEh>
            readBytes(devAddr, MPU6050_RA_MEM_R_W, chunkSize, verifyBuffer);
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	7998      	ldrb	r0, [r3, #6]
 80024f2:	7ffa      	ldrb	r2, [r7, #31]
 80024f4:	69bb      	ldr	r3, [r7, #24]
 80024f6:	216f      	movs	r1, #111	; 0x6f
 80024f8:	f7ff f896 	bl	8001628 <_Z9readByteshhhPh>
            if (memcmp(progBuffer, verifyBuffer, chunkSize) != 0) {
 80024fc:	7ffb      	ldrb	r3, [r7, #31]
 80024fe:	461a      	mov	r2, r3
 8002500:	69b9      	ldr	r1, [r7, #24]
 8002502:	6978      	ldr	r0, [r7, #20]
 8002504:	f00d fa4a 	bl	800f99c <memcmp>
 8002508:	4603      	mov	r3, r0
 800250a:	2b00      	cmp	r3, #0
 800250c:	d00b      	beq.n	8002526 <_ZN7MPU605016writeMemoryBlockEPKhthhbb+0x13e>
                    Serial.print(" 0x");
                    if (verifyBuffer[i + j] < 16) Serial.print("0");
                    Serial.print(verifyBuffer[i + j], HEX);
                }
                Serial.print("\n");*/
                free(verifyBuffer);
 800250e:	69b8      	ldr	r0, [r7, #24]
 8002510:	f00d fa3c 	bl	800f98c <free>
                if (useProgMem) free(progBuffer);
 8002514:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8002518:	2b00      	cmp	r3, #0
 800251a:	d002      	beq.n	8002522 <_ZN7MPU605016writeMemoryBlockEPKhthhbb+0x13a>
 800251c:	6978      	ldr	r0, [r7, #20]
 800251e:	f00d fa35 	bl	800f98c <free>
                return false; // uh oh.
 8002522:	2300      	movs	r3, #0
 8002524:	e031      	b.n	800258a <_ZN7MPU605016writeMemoryBlockEPKhthhbb+0x1a2>
            }
        }

        // increase byte index by [chunkSize]
        i += chunkSize;
 8002526:	7ffb      	ldrb	r3, [r7, #31]
 8002528:	b29a      	uxth	r2, r3
 800252a:	8a7b      	ldrh	r3, [r7, #18]
 800252c:	4413      	add	r3, r2
 800252e:	827b      	strh	r3, [r7, #18]

        // uint8_t automatically wraps to 0 at 256
        address += chunkSize;
 8002530:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8002534:	7ffb      	ldrb	r3, [r7, #31]
 8002536:	4413      	add	r3, r2
 8002538:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28

        // if we aren't done, update bank (if necessary) and address
        if (i < dataSize) {
 800253c:	8a7a      	ldrh	r2, [r7, #18]
 800253e:	88fb      	ldrh	r3, [r7, #6]
 8002540:	429a      	cmp	r2, r3
 8002542:	d280      	bcs.n	8002446 <_ZN7MPU605016writeMemoryBlockEPKhthhbb+0x5e>
            if (address == 0) bank++;
 8002544:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8002548:	2b00      	cmp	r3, #0
 800254a:	d102      	bne.n	8002552 <_ZN7MPU605016writeMemoryBlockEPKhthhbb+0x16a>
 800254c:	797b      	ldrb	r3, [r7, #5]
 800254e:	3301      	adds	r3, #1
 8002550:	717b      	strb	r3, [r7, #5]
            setMemoryBank(bank);
 8002552:	7979      	ldrb	r1, [r7, #5]
 8002554:	2300      	movs	r3, #0
 8002556:	2200      	movs	r2, #0
 8002558:	68f8      	ldr	r0, [r7, #12]
 800255a:	f7ff fea4 	bl	80022a6 <_ZN7MPU605013setMemoryBankEhbb>
            setMemoryStartAddress(address);
 800255e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8002562:	4619      	mov	r1, r3
 8002564:	68f8      	ldr	r0, [r7, #12]
 8002566:	f7ff fec8 	bl	80022fa <_ZN7MPU605021setMemoryStartAddressEh>
    for (i = 0; i < dataSize;) {
 800256a:	e76c      	b.n	8002446 <_ZN7MPU605016writeMemoryBlockEPKhthhbb+0x5e>
        }
    }
    if (verify) free(verifyBuffer);
 800256c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8002570:	2b00      	cmp	r3, #0
 8002572:	d002      	beq.n	800257a <_ZN7MPU605016writeMemoryBlockEPKhthhbb+0x192>
 8002574:	69b8      	ldr	r0, [r7, #24]
 8002576:	f00d fa09 	bl	800f98c <free>
    if (useProgMem) free(progBuffer);
 800257a:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800257e:	2b00      	cmp	r3, #0
 8002580:	d002      	beq.n	8002588 <_ZN7MPU605016writeMemoryBlockEPKhthhbb+0x1a0>
 8002582:	6978      	ldr	r0, [r7, #20]
 8002584:	f00d fa02 	bl	800f98c <free>
    return true;
 8002588:	2301      	movs	r3, #1
}
 800258a:	4618      	mov	r0, r3
 800258c:	3720      	adds	r7, #32
 800258e:	46bd      	mov	sp, r7
 8002590:	bd80      	pop	{r7, pc}

08002592 <_ZN7MPU605020writeProgMemoryBlockEPKhthhb>:
bool MPU6050::writeProgMemoryBlock(const uint8_t *data, uint16_t dataSize, uint8_t bank, uint8_t address, bool verify) {
 8002592:	b580      	push	{r7, lr}
 8002594:	b088      	sub	sp, #32
 8002596:	af04      	add	r7, sp, #16
 8002598:	60f8      	str	r0, [r7, #12]
 800259a:	60b9      	str	r1, [r7, #8]
 800259c:	4611      	mov	r1, r2
 800259e:	461a      	mov	r2, r3
 80025a0:	460b      	mov	r3, r1
 80025a2:	80fb      	strh	r3, [r7, #6]
 80025a4:	4613      	mov	r3, r2
 80025a6:	717b      	strb	r3, [r7, #5]
    return writeMemoryBlock(data, dataSize, bank, address, verify, true);
 80025a8:	7979      	ldrb	r1, [r7, #5]
 80025aa:	88fa      	ldrh	r2, [r7, #6]
 80025ac:	2301      	movs	r3, #1
 80025ae:	9302      	str	r3, [sp, #8]
 80025b0:	7f3b      	ldrb	r3, [r7, #28]
 80025b2:	9301      	str	r3, [sp, #4]
 80025b4:	7e3b      	ldrb	r3, [r7, #24]
 80025b6:	9300      	str	r3, [sp, #0]
 80025b8:	460b      	mov	r3, r1
 80025ba:	68b9      	ldr	r1, [r7, #8]
 80025bc:	68f8      	ldr	r0, [r7, #12]
 80025be:	f7ff ff13 	bl	80023e8 <_ZN7MPU605016writeMemoryBlockEPKhthhbb>
 80025c2:	4603      	mov	r3, r0
}
 80025c4:	4618      	mov	r0, r3
 80025c6:	3710      	adds	r7, #16
 80025c8:	46bd      	mov	sp, r7
 80025ca:	bd80      	pop	{r7, pc}

080025cc <_ZN7MPU605024writeDMPConfigurationSetEPKhtb>:
bool MPU6050::writeDMPConfigurationSet(const uint8_t *data, uint16_t dataSize, bool useProgMem) {
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b08c      	sub	sp, #48	; 0x30
 80025d0:	af04      	add	r7, sp, #16
 80025d2:	60f8      	str	r0, [r7, #12]
 80025d4:	60b9      	str	r1, [r7, #8]
 80025d6:	4611      	mov	r1, r2
 80025d8:	461a      	mov	r2, r3
 80025da:	460b      	mov	r3, r1
 80025dc:	80fb      	strh	r3, [r7, #6]
 80025de:	4613      	mov	r3, r2
 80025e0:	717b      	strb	r3, [r7, #5]
    uint8_t *progBuffer = 0;
 80025e2:	2300      	movs	r3, #0
 80025e4:	61fb      	str	r3, [r7, #28]
	uint8_t success, special;
    uint16_t i, j;
    if (useProgMem) {
 80025e6:	797b      	ldrb	r3, [r7, #5]
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d004      	beq.n	80025f6 <_ZN7MPU605024writeDMPConfigurationSetEPKhtb+0x2a>
        progBuffer = (uint8_t *)malloc(8); // assume 8-byte blocks, realloc later if necessary
 80025ec:	2008      	movs	r0, #8
 80025ee:	f00d f9c5 	bl	800f97c <malloc>
 80025f2:	4603      	mov	r3, r0
 80025f4:	61fb      	str	r3, [r7, #28]
    }

    // config set data is a long string of blocks with the following structure:
    // [bank] [offset] [length] [byte[0], byte[1], ..., byte[length]]
    uint8_t bank, offset, length;
    for (i = 0; i < dataSize;) {
 80025f6:	2300      	movs	r3, #0
 80025f8:	833b      	strh	r3, [r7, #24]
 80025fa:	8b3a      	ldrh	r2, [r7, #24]
 80025fc:	88fb      	ldrh	r3, [r7, #6]
 80025fe:	429a      	cmp	r2, r3
 8002600:	f080 80a1 	bcs.w	8002746 <_ZN7MPU605024writeDMPConfigurationSetEPKhtb+0x17a>
        if (useProgMem) {
 8002604:	797b      	ldrb	r3, [r7, #5]
 8002606:	2b00      	cmp	r3, #0
 8002608:	d018      	beq.n	800263c <_ZN7MPU605024writeDMPConfigurationSetEPKhtb+0x70>
            bank = pgm_read_byte(data + i++);
 800260a:	8b3b      	ldrh	r3, [r7, #24]
 800260c:	1c5a      	adds	r2, r3, #1
 800260e:	833a      	strh	r2, [r7, #24]
 8002610:	461a      	mov	r2, r3
 8002612:	68bb      	ldr	r3, [r7, #8]
 8002614:	4413      	add	r3, r2
 8002616:	781b      	ldrb	r3, [r3, #0]
 8002618:	757b      	strb	r3, [r7, #21]
            offset = pgm_read_byte(data + i++);
 800261a:	8b3b      	ldrh	r3, [r7, #24]
 800261c:	1c5a      	adds	r2, r3, #1
 800261e:	833a      	strh	r2, [r7, #24]
 8002620:	461a      	mov	r2, r3
 8002622:	68bb      	ldr	r3, [r7, #8]
 8002624:	4413      	add	r3, r2
 8002626:	781b      	ldrb	r3, [r3, #0]
 8002628:	753b      	strb	r3, [r7, #20]
            length = pgm_read_byte(data + i++);
 800262a:	8b3b      	ldrh	r3, [r7, #24]
 800262c:	1c5a      	adds	r2, r3, #1
 800262e:	833a      	strh	r2, [r7, #24]
 8002630:	461a      	mov	r2, r3
 8002632:	68bb      	ldr	r3, [r7, #8]
 8002634:	4413      	add	r3, r2
 8002636:	781b      	ldrb	r3, [r3, #0]
 8002638:	74fb      	strb	r3, [r7, #19]
 800263a:	e017      	b.n	800266c <_ZN7MPU605024writeDMPConfigurationSetEPKhtb+0xa0>
        } else {
            bank = data[i++];
 800263c:	8b3b      	ldrh	r3, [r7, #24]
 800263e:	1c5a      	adds	r2, r3, #1
 8002640:	833a      	strh	r2, [r7, #24]
 8002642:	461a      	mov	r2, r3
 8002644:	68bb      	ldr	r3, [r7, #8]
 8002646:	4413      	add	r3, r2
 8002648:	781b      	ldrb	r3, [r3, #0]
 800264a:	757b      	strb	r3, [r7, #21]
            offset = data[i++];
 800264c:	8b3b      	ldrh	r3, [r7, #24]
 800264e:	1c5a      	adds	r2, r3, #1
 8002650:	833a      	strh	r2, [r7, #24]
 8002652:	461a      	mov	r2, r3
 8002654:	68bb      	ldr	r3, [r7, #8]
 8002656:	4413      	add	r3, r2
 8002658:	781b      	ldrb	r3, [r3, #0]
 800265a:	753b      	strb	r3, [r7, #20]
            length = data[i++];
 800265c:	8b3b      	ldrh	r3, [r7, #24]
 800265e:	1c5a      	adds	r2, r3, #1
 8002660:	833a      	strh	r2, [r7, #24]
 8002662:	461a      	mov	r2, r3
 8002664:	68bb      	ldr	r3, [r7, #8]
 8002666:	4413      	add	r3, r2
 8002668:	781b      	ldrb	r3, [r3, #0]
 800266a:	74fb      	strb	r3, [r7, #19]
        }

        // write data or perform special action
        if (length > 0) {
 800266c:	7cfb      	ldrb	r3, [r7, #19]
 800266e:	2b00      	cmp	r3, #0
 8002670:	d03a      	beq.n	80026e8 <_ZN7MPU605024writeDMPConfigurationSetEPKhtb+0x11c>
            Serial.print(bank);
            Serial.print(", offset ");
            Serial.print(offset);
            Serial.print(", length=");
            Serial.println(length);*/
            if (useProgMem) {
 8002672:	797b      	ldrb	r3, [r7, #5]
 8002674:	2b00      	cmp	r3, #0
 8002676:	d01d      	beq.n	80026b4 <_ZN7MPU605024writeDMPConfigurationSetEPKhtb+0xe8>
                if (sizeof(progBuffer) < length) progBuffer = (uint8_t *)realloc(progBuffer, length);
 8002678:	7cfb      	ldrb	r3, [r7, #19]
 800267a:	2b04      	cmp	r3, #4
 800267c:	d905      	bls.n	800268a <_ZN7MPU605024writeDMPConfigurationSetEPKhtb+0xbe>
 800267e:	7cfb      	ldrb	r3, [r7, #19]
 8002680:	4619      	mov	r1, r3
 8002682:	69f8      	ldr	r0, [r7, #28]
 8002684:	f00d fea6 	bl	80103d4 <realloc>
 8002688:	61f8      	str	r0, [r7, #28]
                for (j = 0; j < length; j++) progBuffer[j] = pgm_read_byte(data + i + j);
 800268a:	2300      	movs	r3, #0
 800268c:	82fb      	strh	r3, [r7, #22]
 800268e:	7cfb      	ldrb	r3, [r7, #19]
 8002690:	b29b      	uxth	r3, r3
 8002692:	8afa      	ldrh	r2, [r7, #22]
 8002694:	429a      	cmp	r2, r3
 8002696:	d211      	bcs.n	80026bc <_ZN7MPU605024writeDMPConfigurationSetEPKhtb+0xf0>
 8002698:	8b3a      	ldrh	r2, [r7, #24]
 800269a:	8afb      	ldrh	r3, [r7, #22]
 800269c:	4413      	add	r3, r2
 800269e:	68ba      	ldr	r2, [r7, #8]
 80026a0:	441a      	add	r2, r3
 80026a2:	8afb      	ldrh	r3, [r7, #22]
 80026a4:	69f9      	ldr	r1, [r7, #28]
 80026a6:	440b      	add	r3, r1
 80026a8:	7812      	ldrb	r2, [r2, #0]
 80026aa:	701a      	strb	r2, [r3, #0]
 80026ac:	8afb      	ldrh	r3, [r7, #22]
 80026ae:	3301      	adds	r3, #1
 80026b0:	82fb      	strh	r3, [r7, #22]
 80026b2:	e7ec      	b.n	800268e <_ZN7MPU605024writeDMPConfigurationSetEPKhtb+0xc2>
            } else {
                progBuffer = (uint8_t *)data + i;
 80026b4:	8b3b      	ldrh	r3, [r7, #24]
 80026b6:	68ba      	ldr	r2, [r7, #8]
 80026b8:	4413      	add	r3, r2
 80026ba:	61fb      	str	r3, [r7, #28]
            }
            success = writeMemoryBlock(progBuffer, length, bank, offset, true);
 80026bc:	7cfb      	ldrb	r3, [r7, #19]
 80026be:	b29a      	uxth	r2, r3
 80026c0:	7d79      	ldrb	r1, [r7, #21]
 80026c2:	2300      	movs	r3, #0
 80026c4:	9302      	str	r3, [sp, #8]
 80026c6:	2301      	movs	r3, #1
 80026c8:	9301      	str	r3, [sp, #4]
 80026ca:	7d3b      	ldrb	r3, [r7, #20]
 80026cc:	9300      	str	r3, [sp, #0]
 80026ce:	460b      	mov	r3, r1
 80026d0:	69f9      	ldr	r1, [r7, #28]
 80026d2:	68f8      	ldr	r0, [r7, #12]
 80026d4:	f7ff fe88 	bl	80023e8 <_ZN7MPU605016writeMemoryBlockEPKhthhbb>
 80026d8:	4603      	mov	r3, r0
 80026da:	76fb      	strb	r3, [r7, #27]
            i += length;
 80026dc:	7cfb      	ldrb	r3, [r7, #19]
 80026de:	b29a      	uxth	r2, r3
 80026e0:	8b3b      	ldrh	r3, [r7, #24]
 80026e2:	4413      	add	r3, r2
 80026e4:	833b      	strh	r3, [r7, #24]
 80026e6:	e022      	b.n	800272e <_ZN7MPU605024writeDMPConfigurationSetEPKhtb+0x162>
            // special instruction
            // NOTE: this kind of behavior (what and when to do certain things)
            // is totally undocumented. This code is in here based on observed
            // behavior only, and exactly why (or even whether) it has to be here
            // is anybody's guess for now.
            if (useProgMem) {
 80026e8:	797b      	ldrb	r3, [r7, #5]
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d008      	beq.n	8002700 <_ZN7MPU605024writeDMPConfigurationSetEPKhtb+0x134>
                special = pgm_read_byte(data + i++);
 80026ee:	8b3b      	ldrh	r3, [r7, #24]
 80026f0:	1c5a      	adds	r2, r3, #1
 80026f2:	833a      	strh	r2, [r7, #24]
 80026f4:	461a      	mov	r2, r3
 80026f6:	68bb      	ldr	r3, [r7, #8]
 80026f8:	4413      	add	r3, r2
 80026fa:	781b      	ldrb	r3, [r3, #0]
 80026fc:	76bb      	strb	r3, [r7, #26]
 80026fe:	e007      	b.n	8002710 <_ZN7MPU605024writeDMPConfigurationSetEPKhtb+0x144>
            } else {
                special = data[i++];
 8002700:	8b3b      	ldrh	r3, [r7, #24]
 8002702:	1c5a      	adds	r2, r3, #1
 8002704:	833a      	strh	r2, [r7, #24]
 8002706:	461a      	mov	r2, r3
 8002708:	68bb      	ldr	r3, [r7, #8]
 800270a:	4413      	add	r3, r2
 800270c:	781b      	ldrb	r3, [r3, #0]
 800270e:	76bb      	strb	r3, [r7, #26]
            }
            /*Serial.print("Special command code ");
            Serial.print(special, HEX);
            Serial.println(" found...");*/
            if (special == 0x01) {
 8002710:	7ebb      	ldrb	r3, [r7, #26]
 8002712:	2b01      	cmp	r3, #1
 8002714:	d109      	bne.n	800272a <_ZN7MPU605024writeDMPConfigurationSetEPKhtb+0x15e>
                // enable DMP-related interrupts
                
                //setIntZeroMotionEnabled(true);
                //setIntFIFOBufferOverflowEnabled(true);
                //setIntDMPEnabled(true);
                writeByte(devAddr, MPU6050_RA_INT_ENABLE, 0x32);  // single operation
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	799b      	ldrb	r3, [r3, #6]
 800271a:	2232      	movs	r2, #50	; 0x32
 800271c:	2138      	movs	r1, #56	; 0x38
 800271e:	4618      	mov	r0, r3
 8002720:	f7ff f900 	bl	8001924 <_Z9writeBytehhh>

                success = true;
 8002724:	2301      	movs	r3, #1
 8002726:	76fb      	strb	r3, [r7, #27]
 8002728:	e001      	b.n	800272e <_ZN7MPU605024writeDMPConfigurationSetEPKhtb+0x162>
            } else {
                // unknown special command
                success = false;
 800272a:	2300      	movs	r3, #0
 800272c:	76fb      	strb	r3, [r7, #27]
            }
        }
        
        if (!success) {
 800272e:	7efb      	ldrb	r3, [r7, #27]
 8002730:	2b00      	cmp	r3, #0
 8002732:	f47f af62 	bne.w	80025fa <_ZN7MPU605024writeDMPConfigurationSetEPKhtb+0x2e>
            if (useProgMem) free(progBuffer);
 8002736:	797b      	ldrb	r3, [r7, #5]
 8002738:	2b00      	cmp	r3, #0
 800273a:	d002      	beq.n	8002742 <_ZN7MPU605024writeDMPConfigurationSetEPKhtb+0x176>
 800273c:	69f8      	ldr	r0, [r7, #28]
 800273e:	f00d f925 	bl	800f98c <free>
            return false; // uh oh
 8002742:	2300      	movs	r3, #0
 8002744:	e006      	b.n	8002754 <_ZN7MPU605024writeDMPConfigurationSetEPKhtb+0x188>
        }
    }
    if (useProgMem) free(progBuffer);
 8002746:	797b      	ldrb	r3, [r7, #5]
 8002748:	2b00      	cmp	r3, #0
 800274a:	d002      	beq.n	8002752 <_ZN7MPU605024writeDMPConfigurationSetEPKhtb+0x186>
 800274c:	69f8      	ldr	r0, [r7, #28]
 800274e:	f00d f91d 	bl	800f98c <free>
    return true;
 8002752:	2301      	movs	r3, #1
}
 8002754:	4618      	mov	r0, r3
 8002756:	3720      	adds	r7, #32
 8002758:	46bd      	mov	sp, r7
 800275a:	bd80      	pop	{r7, pc}

0800275c <_ZN7MPU605028writeProgDMPConfigurationSetEPKht>:
bool MPU6050::writeProgDMPConfigurationSet(const uint8_t *data, uint16_t dataSize) {
 800275c:	b580      	push	{r7, lr}
 800275e:	b084      	sub	sp, #16
 8002760:	af00      	add	r7, sp, #0
 8002762:	60f8      	str	r0, [r7, #12]
 8002764:	60b9      	str	r1, [r7, #8]
 8002766:	4613      	mov	r3, r2
 8002768:	80fb      	strh	r3, [r7, #6]
    return writeDMPConfigurationSet(data, dataSize, true);
 800276a:	88fa      	ldrh	r2, [r7, #6]
 800276c:	2301      	movs	r3, #1
 800276e:	68b9      	ldr	r1, [r7, #8]
 8002770:	68f8      	ldr	r0, [r7, #12]
 8002772:	f7ff ff2b 	bl	80025cc <_ZN7MPU605024writeDMPConfigurationSetEPKhtb>
 8002776:	4603      	mov	r3, r0
}
 8002778:	4618      	mov	r0, r3
 800277a:	3710      	adds	r7, #16
 800277c:	46bd      	mov	sp, r7
 800277e:	bd80      	pop	{r7, pc}

08002780 <_ZN7MPU605013setDMPConfig1Eh>:

uint8_t MPU6050::getDMPConfig1() {
    readByte(devAddr, MPU6050_RA_DMP_CFG_1, buffer);
    return buffer[0];
}
void MPU6050::setDMPConfig1(uint8_t config) {
 8002780:	b580      	push	{r7, lr}
 8002782:	b082      	sub	sp, #8
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]
 8002788:	460b      	mov	r3, r1
 800278a:	70fb      	strb	r3, [r7, #3]
    writeByte(devAddr, MPU6050_RA_DMP_CFG_1, config);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	799b      	ldrb	r3, [r3, #6]
 8002790:	78fa      	ldrb	r2, [r7, #3]
 8002792:	2170      	movs	r1, #112	; 0x70
 8002794:	4618      	mov	r0, r3
 8002796:	f7ff f8c5 	bl	8001924 <_Z9writeBytehhh>
}
 800279a:	bf00      	nop
 800279c:	3708      	adds	r7, #8
 800279e:	46bd      	mov	sp, r7
 80027a0:	bd80      	pop	{r7, pc}

080027a2 <_ZN7MPU605013setDMPConfig2Eh>:

uint8_t MPU6050::getDMPConfig2() {
    readByte(devAddr, MPU6050_RA_DMP_CFG_2, buffer);
    return buffer[0];
}
void MPU6050::setDMPConfig2(uint8_t config) {
 80027a2:	b580      	push	{r7, lr}
 80027a4:	b082      	sub	sp, #8
 80027a6:	af00      	add	r7, sp, #0
 80027a8:	6078      	str	r0, [r7, #4]
 80027aa:	460b      	mov	r3, r1
 80027ac:	70fb      	strb	r3, [r7, #3]
    writeByte(devAddr, MPU6050_RA_DMP_CFG_2, config);
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	799b      	ldrb	r3, [r3, #6]
 80027b2:	78fa      	ldrb	r2, [r7, #3]
 80027b4:	2171      	movs	r1, #113	; 0x71
 80027b6:	4618      	mov	r0, r3
 80027b8:	f7ff f8b4 	bl	8001924 <_Z9writeBytehhh>
}
 80027bc:	bf00      	nop
 80027be:	3708      	adds	r7, #8
 80027c0:	46bd      	mov	sp, r7
 80027c2:	bd80      	pop	{r7, pc}

080027c4 <_ZN7MPU605013dmpInitializeEv>:


// 6_AXIS_MOTIONAPPS20
uint8_t MPU6050::dmpInitialize() {
 80027c4:	b590      	push	{r4, r7, lr}
 80027c6:	b0af      	sub	sp, #188	; 0xbc
 80027c8:	af04      	add	r7, sp, #16
 80027ca:	6078      	str	r0, [r7, #4]
    // reset device
    //DEBUG_PRINTLN(F("\n\nResetting MPU6050..."));
    reset();
 80027cc:	6878      	ldr	r0, [r7, #4]
 80027ce:	f7ff fbf5 	bl	8001fbc <_ZN7MPU60505resetEv>
    HAL_Delay(30); // wait after reset
 80027d2:	201e      	movs	r0, #30
 80027d4:	f002 fd14 	bl	8005200 <HAL_Delay>
    Serial.println(F("Enabling wake cycle..."));
    setWakeCycleEnabled(true);*/

    // disable sleep mode
    //DEBUG_PRINTLN(F("Disabling sleep mode..."));
    setSleepEnabled(false);
 80027d8:	2100      	movs	r1, #0
 80027da:	6878      	ldr	r0, [r7, #4]
 80027dc:	f7ff fbfd 	bl	8001fda <_ZN7MPU605015setSleepEnabledEb>

    // get MPU hardware revision
    //DEBUG_PRINTLN(F("Selecting user bank 16..."));
    setMemoryBank(0x10, true, true);
 80027e0:	2301      	movs	r3, #1
 80027e2:	2201      	movs	r2, #1
 80027e4:	2110      	movs	r1, #16
 80027e6:	6878      	ldr	r0, [r7, #4]
 80027e8:	f7ff fd5d 	bl	80022a6 <_ZN7MPU605013setMemoryBankEhbb>
    //DEBUG_PRINTLN(F("Selecting memory byte 6..."));
    setMemoryStartAddress(0x06);
 80027ec:	2106      	movs	r1, #6
 80027ee:	6878      	ldr	r0, [r7, #4]
 80027f0:	f7ff fd83 	bl	80022fa <_ZN7MPU605021setMemoryStartAddressEh>
    //DEBUG_PRINTLN(F("Checking hardware revision..."));
    //DEBUG_PRINT(F("Revision @ user[16][6] = "));
    //DEBUG_PRINTLNF(readMemoryByte(), HEX);
    //DEBUG_PRINTLN(F("Resetting memory bank selection to 0..."));
    setMemoryBank(0, false, false);
 80027f4:	2300      	movs	r3, #0
 80027f6:	2200      	movs	r2, #0
 80027f8:	2100      	movs	r1, #0
 80027fa:	6878      	ldr	r0, [r7, #4]
 80027fc:	f7ff fd53 	bl	80022a6 <_ZN7MPU605013setMemoryBankEhbb>
    //DEBUG_PRINT(F("OTP bank is "));
    //DEBUG_PRINTLN(getOTPBankValid() ? F("valid!") : F("invalid!"));

    // get X/Y/Z gyro offsets
    //DEBUG_PRINTLN(F("Reading gyro offset TC values..."));
    int8_t xgOffsetTC = getXGyroOffsetTC();
 8002800:	6878      	ldr	r0, [r7, #4]
 8002802:	f7ff fc52 	bl	80020aa <_ZN7MPU605016getXGyroOffsetTCEv>
 8002806:	4603      	mov	r3, r0
 8002808:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
    int8_t ygOffsetTC = getYGyroOffsetTC();
 800280c:	6878      	ldr	r0, [r7, #4]
 800280e:	f7ff fc74 	bl	80020fa <_ZN7MPU605016getYGyroOffsetTCEv>
 8002812:	4603      	mov	r3, r0
 8002814:	f887 30a2 	strb.w	r3, [r7, #162]	; 0xa2
    int8_t zgOffsetTC = getZGyroOffsetTC();
 8002818:	6878      	ldr	r0, [r7, #4]
 800281a:	f7ff fc96 	bl	800214a <_ZN7MPU605016getZGyroOffsetTCEv>
 800281e:	4603      	mov	r3, r0
 8002820:	f887 30a1 	strb.w	r3, [r7, #161]	; 0xa1
    //DEBUG_PRINT(F("Z gyro offset = "));
    //DEBUG_PRINTLN(zgOffsetTC);

    // setup weird slave stuff (?)
    //DEBUG_PRINTLN(F("Setting slave 0 address to 0x7F..."));
    setSlaveAddress(0, 0x7F);
 8002824:	227f      	movs	r2, #127	; 0x7f
 8002826:	2100      	movs	r1, #0
 8002828:	6878      	ldr	r0, [r7, #4]
 800282a:	f7ff fb47 	bl	8001ebc <_ZN7MPU605015setSlaveAddressEhh>
    //DEBUG_PRINTLN(F("Disabling I2C Master mode..."));
    setI2CMasterModeEnabled(false);
 800282e:	2100      	movs	r1, #0
 8002830:	6878      	ldr	r0, [r7, #4]
 8002832:	f7ff fb94 	bl	8001f5e <_ZN7MPU605023setI2CMasterModeEnabledEb>
    //DEBUG_PRINTLN(F("Setting slave 0 address to 0x68 (self)..."));
    setSlaveAddress(0, 0x68);
 8002836:	2268      	movs	r2, #104	; 0x68
 8002838:	2100      	movs	r1, #0
 800283a:	6878      	ldr	r0, [r7, #4]
 800283c:	f7ff fb3e 	bl	8001ebc <_ZN7MPU605015setSlaveAddressEhh>
    //DEBUG_PRINTLN(F("Resetting I2C Master control..."));
    resetI2CMaster();
 8002840:	6878      	ldr	r0, [r7, #4]
 8002842:	f7ff fbac 	bl	8001f9e <_ZN7MPU605014resetI2CMasterEv>
    HAL_Delay(20);
 8002846:	2014      	movs	r0, #20
 8002848:	f002 fcda 	bl	8005200 <HAL_Delay>

    // load DMP code into memory banks
    //DEBUG_PRINT(F("Writing DMP code to MPU memory banks ("));
    //DEBUG_PRINT(MPU6050_DMP_CODE_SIZE);
    //DEBUG_PRINTLN(F(" bytes)"));
    if (writeProgMemoryBlock(dmpMemory, MPU6050_DMP_CODE_SIZE)) {
 800284c:	2301      	movs	r3, #1
 800284e:	9301      	str	r3, [sp, #4]
 8002850:	2300      	movs	r3, #0
 8002852:	9300      	str	r3, [sp, #0]
 8002854:	2300      	movs	r3, #0
 8002856:	f240 7289 	movw	r2, #1929	; 0x789
 800285a:	49ce      	ldr	r1, [pc, #824]	; (8002b94 <_ZN7MPU605013dmpInitializeEv+0x3d0>)
 800285c:	6878      	ldr	r0, [r7, #4]
 800285e:	f7ff fe98 	bl	8002592 <_ZN7MPU605020writeProgMemoryBlockEPKhthhb>
 8002862:	4603      	mov	r3, r0
 8002864:	2b00      	cmp	r3, #0
 8002866:	f000 8238 	beq.w	8002cda <_ZN7MPU605013dmpInitializeEv+0x516>

        // write DMP configuration
        //DEBUG_PRINT(F("Writing DMP configuration to MPU memory banks ("));
        //DEBUG_PRINT(MPU6050_DMP_CONFIG_SIZE);
        //DEBUG_PRINTLN(F(" bytes in config def)"));
        if (writeProgDMPConfigurationSet(dmpConfig, MPU6050_DMP_CONFIG_SIZE)) {
 800286a:	22c0      	movs	r2, #192	; 0xc0
 800286c:	49ca      	ldr	r1, [pc, #808]	; (8002b98 <_ZN7MPU605013dmpInitializeEv+0x3d4>)
 800286e:	6878      	ldr	r0, [r7, #4]
 8002870:	f7ff ff74 	bl	800275c <_ZN7MPU605028writeProgDMPConfigurationSetEPKht>
 8002874:	4603      	mov	r3, r0
 8002876:	2b00      	cmp	r3, #0
 8002878:	f000 822d 	beq.w	8002cd6 <_ZN7MPU605013dmpInitializeEv+0x512>
            //DEBUG_PRINTLN(F("Success! DMP configuration written and verified."));

            //DEBUG_PRINTLN(F("Setting clock source to Z Gyro..."));
            setClockSource(MPU6050_CLOCK_PLL_ZGYRO);
 800287c:	2103      	movs	r1, #3
 800287e:	6878      	ldr	r0, [r7, #4]
 8002880:	f7ff fbbc 	bl	8001ffc <_ZN7MPU605014setClockSourceEh>

            //DEBUG_PRINTLN(F("Setting DMP and FIFO_OFLOW interrupts enabled..."));
            setIntEnabled(0x12);
 8002884:	2112      	movs	r1, #18
 8002886:	6878      	ldr	r0, [r7, #4]
 8002888:	f7ff fb35 	bl	8001ef6 <_ZN7MPU605013setIntEnabledEh>

            //DEBUG_PRINTLN(F("Setting sample rate to 200Hz..."));
            setRate(4); // 1khz / (1 + 4) = 200 Hz
 800288c:	2104      	movs	r1, #4
 800288e:	6878      	ldr	r0, [r7, #4]
 8002890:	f7ff fa73 	bl	8001d7a <_ZN7MPU60507setRateEh>

            //DEBUG_PRINTLN(F("Setting external frame sync to TEMP_OUT_L[0]..."));
            setExternalFrameSync(MPU6050_EXT_SYNC_TEMP_OUT_L);
 8002894:	2101      	movs	r1, #1
 8002896:	6878      	ldr	r0, [r7, #4]
 8002898:	f7ff fa80 	bl	8001d9c <_ZN7MPU605020setExternalFrameSyncEh>

            //DEBUG_PRINTLN(F("Setting DLPF bandwidth to 42Hz..."));
            setDLPFMode(MPU6050_DLPF_BW_42);
 800289c:	2103      	movs	r1, #3
 800289e:	6878      	ldr	r0, [r7, #4]
 80028a0:	f7ff fa8f 	bl	8001dc2 <_ZN7MPU605011setDLPFModeEh>

            //DEBUG_PRINTLN(F("Setting gyro sensitivity to +/- 2000 deg/sec..."));
            setFullScaleGyroRange(MPU6050_GYRO_FS_2000);
 80028a4:	2103      	movs	r1, #3
 80028a6:	6878      	ldr	r0, [r7, #4]
 80028a8:	f7ff fa9e 	bl	8001de8 <_ZN7MPU605021setFullScaleGyroRangeEh>

            //DEBUG_PRINTLN(F("Setting DMP programm start address"));
            //write start address MSB into register
            setDMPConfig1(0x03);
 80028ac:	2103      	movs	r1, #3
 80028ae:	6878      	ldr	r0, [r7, #4]
 80028b0:	f7ff ff66 	bl	8002780 <_ZN7MPU605013setDMPConfig1Eh>
            //write start address LSB into register
            setDMPConfig2(0x00);
 80028b4:	2100      	movs	r1, #0
 80028b6:	6878      	ldr	r0, [r7, #4]
 80028b8:	f7ff ff73 	bl	80027a2 <_ZN7MPU605013setDMPConfig2Eh>

            //DEBUG_PRINTLN(F("Clearing OTP Bank flag..."));
            setOTPBankValid(false);
 80028bc:	2100      	movs	r1, #0
 80028be:	6878      	ldr	r0, [r7, #4]
 80028c0:	f7ff fbe2 	bl	8002088 <_ZN7MPU605015setOTPBankValidEb>

            //DEBUG_PRINTLN(F("Setting X/Y/Z gyro offset TCs to previous values..."));
            setXGyroOffsetTC(xgOffsetTC);
 80028c4:	f997 30a3 	ldrsb.w	r3, [r7, #163]	; 0xa3
 80028c8:	4619      	mov	r1, r3
 80028ca:	6878      	ldr	r0, [r7, #4]
 80028cc:	f7ff fc02 	bl	80020d4 <_ZN7MPU605016setXGyroOffsetTCEa>
            setYGyroOffsetTC(ygOffsetTC);
 80028d0:	f997 30a2 	ldrsb.w	r3, [r7, #162]	; 0xa2
 80028d4:	4619      	mov	r1, r3
 80028d6:	6878      	ldr	r0, [r7, #4]
 80028d8:	f7ff fc24 	bl	8002124 <_ZN7MPU605016setYGyroOffsetTCEa>
            setZGyroOffsetTC(zgOffsetTC);
 80028dc:	f997 30a1 	ldrsb.w	r3, [r7, #161]	; 0xa1
 80028e0:	4619      	mov	r1, r3
 80028e2:	6878      	ldr	r0, [r7, #4]
 80028e4:	f7ff fc46 	bl	8002174 <_ZN7MPU605016setZGyroOffsetTCEa>
            //setYGyroOffset(0);
            //setZGyroOffset(0);

            //DEBUG_PRINTLN(F("Writing final memory update 1/7 (function unknown)..."));
            uint8_t dmpUpdate[16], j;
            uint16_t pos = 0;
 80028e8:	2300      	movs	r3, #0
 80028ea:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
            for (j = 0; j < 4 || j < dmpUpdate[2] + 3; j++, pos++) dmpUpdate[j] = pgm_read_byte(&dmpUpdates[pos]);
 80028ee:	2300      	movs	r3, #0
 80028f0:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
 80028f4:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 80028f8:	2b03      	cmp	r3, #3
 80028fa:	d906      	bls.n	800290a <_ZN7MPU605013dmpInitializeEv+0x146>
 80028fc:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 8002900:	1c9a      	adds	r2, r3, #2
 8002902:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8002906:	429a      	cmp	r2, r3
 8002908:	db15      	blt.n	8002936 <_ZN7MPU605013dmpInitializeEv+0x172>
 800290a:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 800290e:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8002912:	49a2      	ldr	r1, [pc, #648]	; (8002b9c <_ZN7MPU605013dmpInitializeEv+0x3d8>)
 8002914:	5c8a      	ldrb	r2, [r1, r2]
 8002916:	f107 01a8 	add.w	r1, r7, #168	; 0xa8
 800291a:	440b      	add	r3, r1
 800291c:	f803 2c1c 	strb.w	r2, [r3, #-28]
 8002920:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8002924:	3301      	adds	r3, #1
 8002926:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
 800292a:	f8b7 30a4 	ldrh.w	r3, [r7, #164]	; 0xa4
 800292e:	3301      	adds	r3, #1
 8002930:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
 8002934:	e7de      	b.n	80028f4 <_ZN7MPU605013dmpInitializeEv+0x130>
            writeMemoryBlock(dmpUpdate + 3, dmpUpdate[2], dmpUpdate[0], dmpUpdate[1]);
 8002936:	f107 018c 	add.w	r1, r7, #140	; 0x8c
 800293a:	3103      	adds	r1, #3
 800293c:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 8002940:	b29a      	uxth	r2, r3
 8002942:	f897 008c 	ldrb.w	r0, [r7, #140]	; 0x8c
 8002946:	f897 308d 	ldrb.w	r3, [r7, #141]	; 0x8d
 800294a:	2400      	movs	r4, #0
 800294c:	9402      	str	r4, [sp, #8]
 800294e:	2401      	movs	r4, #1
 8002950:	9401      	str	r4, [sp, #4]
 8002952:	9300      	str	r3, [sp, #0]
 8002954:	4603      	mov	r3, r0
 8002956:	6878      	ldr	r0, [r7, #4]
 8002958:	f7ff fd46 	bl	80023e8 <_ZN7MPU605016writeMemoryBlockEPKhthhbb>

            //DEBUG_PRINTLN(F("Writing final memory update 2/7 (function unknown)..."));
            for (j = 0; j < 4 || j < dmpUpdate[2] + 3; j++, pos++) dmpUpdate[j] = pgm_read_byte(&dmpUpdates[pos]);
 800295c:	2300      	movs	r3, #0
 800295e:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
 8002962:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8002966:	2b03      	cmp	r3, #3
 8002968:	d906      	bls.n	8002978 <_ZN7MPU605013dmpInitializeEv+0x1b4>
 800296a:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 800296e:	1c9a      	adds	r2, r3, #2
 8002970:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8002974:	429a      	cmp	r2, r3
 8002976:	db15      	blt.n	80029a4 <_ZN7MPU605013dmpInitializeEv+0x1e0>
 8002978:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 800297c:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8002980:	4986      	ldr	r1, [pc, #536]	; (8002b9c <_ZN7MPU605013dmpInitializeEv+0x3d8>)
 8002982:	5c8a      	ldrb	r2, [r1, r2]
 8002984:	f107 01a8 	add.w	r1, r7, #168	; 0xa8
 8002988:	440b      	add	r3, r1
 800298a:	f803 2c1c 	strb.w	r2, [r3, #-28]
 800298e:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8002992:	3301      	adds	r3, #1
 8002994:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
 8002998:	f8b7 30a4 	ldrh.w	r3, [r7, #164]	; 0xa4
 800299c:	3301      	adds	r3, #1
 800299e:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
 80029a2:	e7de      	b.n	8002962 <_ZN7MPU605013dmpInitializeEv+0x19e>
            writeMemoryBlock(dmpUpdate + 3, dmpUpdate[2], dmpUpdate[0], dmpUpdate[1]);
 80029a4:	f107 018c 	add.w	r1, r7, #140	; 0x8c
 80029a8:	3103      	adds	r1, #3
 80029aa:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 80029ae:	b29a      	uxth	r2, r3
 80029b0:	f897 008c 	ldrb.w	r0, [r7, #140]	; 0x8c
 80029b4:	f897 308d 	ldrb.w	r3, [r7, #141]	; 0x8d
 80029b8:	2400      	movs	r4, #0
 80029ba:	9402      	str	r4, [sp, #8]
 80029bc:	2401      	movs	r4, #1
 80029be:	9401      	str	r4, [sp, #4]
 80029c0:	9300      	str	r3, [sp, #0]
 80029c2:	4603      	mov	r3, r0
 80029c4:	6878      	ldr	r0, [r7, #4]
 80029c6:	f7ff fd0f 	bl	80023e8 <_ZN7MPU605016writeMemoryBlockEPKhthhbb>

            //DEBUG_PRINTLN(F("Resetting FIFO..."));
            resetFIFO();
 80029ca:	6878      	ldr	r0, [r7, #4]
 80029cc:	f7ff fad8 	bl	8001f80 <_ZN7MPU60509resetFIFOEv>

            //DEBUG_PRINTLN(F("Reading FIFO count..."));
            uint16_t fifoCount = getFIFOCount();
 80029d0:	6878      	ldr	r0, [r7, #4]
 80029d2:	f7ff fb26 	bl	8002022 <_ZN7MPU605012getFIFOCountEv>
 80029d6:	4603      	mov	r3, r0
 80029d8:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
            uint8_t fifoBuffer[128];

            //DEBUG_PRINT(F("Current FIFO count="));
            //DEBUG_PRINTLN(fifoCount);
            getFIFOBytes(fifoBuffer, fifoCount);
 80029dc:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 80029e0:	b2da      	uxtb	r2, r3
 80029e2:	f107 030c 	add.w	r3, r7, #12
 80029e6:	4619      	mov	r1, r3
 80029e8:	6878      	ldr	r0, [r7, #4]
 80029ea:	f7ff fb34 	bl	8002056 <_ZN7MPU605012getFIFOBytesEPhh>

            //DEBUG_PRINTLN(F("Setting motion detection threshold to 2..."));
            setMotionDetectionThreshold(2);
 80029ee:	2102      	movs	r1, #2
 80029f0:	6878      	ldr	r0, [r7, #4]
 80029f2:	f7ff fa1f 	bl	8001e34 <_ZN7MPU605027setMotionDetectionThresholdEh>

            //DEBUG_PRINTLN(F("Setting zero-motion detection threshold to 156..."));
            setZeroMotionDetectionThreshold(156);
 80029f6:	219c      	movs	r1, #156	; 0x9c
 80029f8:	6878      	ldr	r0, [r7, #4]
 80029fa:	f7ff fa3d 	bl	8001e78 <_ZN7MPU605031setZeroMotionDetectionThresholdEh>

            //DEBUG_PRINTLN(F("Setting motion detection duration to 80..."));
            setMotionDetectionDuration(80);
 80029fe:	2150      	movs	r1, #80	; 0x50
 8002a00:	6878      	ldr	r0, [r7, #4]
 8002a02:	f7ff fa28 	bl	8001e56 <_ZN7MPU605026setMotionDetectionDurationEh>

            //DEBUG_PRINTLN(F("Setting zero-motion detection duration to 0..."));
            setZeroMotionDetectionDuration(0);
 8002a06:	2100      	movs	r1, #0
 8002a08:	6878      	ldr	r0, [r7, #4]
 8002a0a:	f7ff fa46 	bl	8001e9a <_ZN7MPU605030setZeroMotionDetectionDurationEh>

            //DEBUG_PRINTLN(F("Resetting FIFO..."));
            resetFIFO();
 8002a0e:	6878      	ldr	r0, [r7, #4]
 8002a10:	f7ff fab6 	bl	8001f80 <_ZN7MPU60509resetFIFOEv>

            //DEBUG_PRINTLN(F("Enabling FIFO..."));
            setFIFOEnabled(true);
 8002a14:	2101      	movs	r1, #1
 8002a16:	6878      	ldr	r0, [r7, #4]
 8002a18:	f7ff fa90 	bl	8001f3c <_ZN7MPU605014setFIFOEnabledEb>

            //DEBUG_PRINTLN(F("Enabling DMP..."));
            setDMPEnabled(true);
 8002a1c:	2101      	movs	r1, #1
 8002a1e:	6878      	ldr	r0, [r7, #4]
 8002a20:	f7ff fc21 	bl	8002266 <_ZN7MPU605013setDMPEnabledEb>

            //DEBUG_PRINTLN(F("Resetting DMP..."));
            resetDMP();
 8002a24:	6878      	ldr	r0, [r7, #4]
 8002a26:	f7ff fc2f 	bl	8002288 <_ZN7MPU60508resetDMPEv>

            //DEBUG_PRINTLN(F("Writing final memory update 3/7 (function unknown)..."));
            for (j = 0; j < 4 || j < dmpUpdate[2] + 3; j++, pos++) dmpUpdate[j] = pgm_read_byte(&dmpUpdates[pos]);
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
 8002a30:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8002a34:	2b03      	cmp	r3, #3
 8002a36:	d906      	bls.n	8002a46 <_ZN7MPU605013dmpInitializeEv+0x282>
 8002a38:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 8002a3c:	1c9a      	adds	r2, r3, #2
 8002a3e:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8002a42:	429a      	cmp	r2, r3
 8002a44:	db15      	blt.n	8002a72 <_ZN7MPU605013dmpInitializeEv+0x2ae>
 8002a46:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 8002a4a:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8002a4e:	4953      	ldr	r1, [pc, #332]	; (8002b9c <_ZN7MPU605013dmpInitializeEv+0x3d8>)
 8002a50:	5c8a      	ldrb	r2, [r1, r2]
 8002a52:	f107 01a8 	add.w	r1, r7, #168	; 0xa8
 8002a56:	440b      	add	r3, r1
 8002a58:	f803 2c1c 	strb.w	r2, [r3, #-28]
 8002a5c:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8002a60:	3301      	adds	r3, #1
 8002a62:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
 8002a66:	f8b7 30a4 	ldrh.w	r3, [r7, #164]	; 0xa4
 8002a6a:	3301      	adds	r3, #1
 8002a6c:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
 8002a70:	e7de      	b.n	8002a30 <_ZN7MPU605013dmpInitializeEv+0x26c>
            writeMemoryBlock(dmpUpdate + 3, dmpUpdate[2], dmpUpdate[0], dmpUpdate[1]);
 8002a72:	f107 018c 	add.w	r1, r7, #140	; 0x8c
 8002a76:	3103      	adds	r1, #3
 8002a78:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 8002a7c:	b29a      	uxth	r2, r3
 8002a7e:	f897 008c 	ldrb.w	r0, [r7, #140]	; 0x8c
 8002a82:	f897 308d 	ldrb.w	r3, [r7, #141]	; 0x8d
 8002a86:	2400      	movs	r4, #0
 8002a88:	9402      	str	r4, [sp, #8]
 8002a8a:	2401      	movs	r4, #1
 8002a8c:	9401      	str	r4, [sp, #4]
 8002a8e:	9300      	str	r3, [sp, #0]
 8002a90:	4603      	mov	r3, r0
 8002a92:	6878      	ldr	r0, [r7, #4]
 8002a94:	f7ff fca8 	bl	80023e8 <_ZN7MPU605016writeMemoryBlockEPKhthhbb>

            //DEBUG_PRINTLN(F("Writing final memory update 4/7 (function unknown)..."));
            for (j = 0; j < 4 || j < dmpUpdate[2] + 3; j++, pos++) dmpUpdate[j] = pgm_read_byte(&dmpUpdates[pos]);
 8002a98:	2300      	movs	r3, #0
 8002a9a:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
 8002a9e:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8002aa2:	2b03      	cmp	r3, #3
 8002aa4:	d906      	bls.n	8002ab4 <_ZN7MPU605013dmpInitializeEv+0x2f0>
 8002aa6:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 8002aaa:	1c9a      	adds	r2, r3, #2
 8002aac:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8002ab0:	429a      	cmp	r2, r3
 8002ab2:	db15      	blt.n	8002ae0 <_ZN7MPU605013dmpInitializeEv+0x31c>
 8002ab4:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 8002ab8:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8002abc:	4937      	ldr	r1, [pc, #220]	; (8002b9c <_ZN7MPU605013dmpInitializeEv+0x3d8>)
 8002abe:	5c8a      	ldrb	r2, [r1, r2]
 8002ac0:	f107 01a8 	add.w	r1, r7, #168	; 0xa8
 8002ac4:	440b      	add	r3, r1
 8002ac6:	f803 2c1c 	strb.w	r2, [r3, #-28]
 8002aca:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8002ace:	3301      	adds	r3, #1
 8002ad0:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
 8002ad4:	f8b7 30a4 	ldrh.w	r3, [r7, #164]	; 0xa4
 8002ad8:	3301      	adds	r3, #1
 8002ada:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
 8002ade:	e7de      	b.n	8002a9e <_ZN7MPU605013dmpInitializeEv+0x2da>
            writeMemoryBlock(dmpUpdate + 3, dmpUpdate[2], dmpUpdate[0], dmpUpdate[1]);
 8002ae0:	f107 018c 	add.w	r1, r7, #140	; 0x8c
 8002ae4:	3103      	adds	r1, #3
 8002ae6:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 8002aea:	b29a      	uxth	r2, r3
 8002aec:	f897 008c 	ldrb.w	r0, [r7, #140]	; 0x8c
 8002af0:	f897 308d 	ldrb.w	r3, [r7, #141]	; 0x8d
 8002af4:	2400      	movs	r4, #0
 8002af6:	9402      	str	r4, [sp, #8]
 8002af8:	2401      	movs	r4, #1
 8002afa:	9401      	str	r4, [sp, #4]
 8002afc:	9300      	str	r3, [sp, #0]
 8002afe:	4603      	mov	r3, r0
 8002b00:	6878      	ldr	r0, [r7, #4]
 8002b02:	f7ff fc71 	bl	80023e8 <_ZN7MPU605016writeMemoryBlockEPKhthhbb>

            //DEBUG_PRINTLN(F("Writing final memory update 5/7 (function unknown)..."));
            for (j = 0; j < 4 || j < dmpUpdate[2] + 3; j++, pos++) dmpUpdate[j] = pgm_read_byte(&dmpUpdates[pos]);
 8002b06:	2300      	movs	r3, #0
 8002b08:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
 8002b0c:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8002b10:	2b03      	cmp	r3, #3
 8002b12:	d906      	bls.n	8002b22 <_ZN7MPU605013dmpInitializeEv+0x35e>
 8002b14:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 8002b18:	1c9a      	adds	r2, r3, #2
 8002b1a:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8002b1e:	429a      	cmp	r2, r3
 8002b20:	db15      	blt.n	8002b4e <_ZN7MPU605013dmpInitializeEv+0x38a>
 8002b22:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 8002b26:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8002b2a:	491c      	ldr	r1, [pc, #112]	; (8002b9c <_ZN7MPU605013dmpInitializeEv+0x3d8>)
 8002b2c:	5c8a      	ldrb	r2, [r1, r2]
 8002b2e:	f107 01a8 	add.w	r1, r7, #168	; 0xa8
 8002b32:	440b      	add	r3, r1
 8002b34:	f803 2c1c 	strb.w	r2, [r3, #-28]
 8002b38:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8002b3c:	3301      	adds	r3, #1
 8002b3e:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
 8002b42:	f8b7 30a4 	ldrh.w	r3, [r7, #164]	; 0xa4
 8002b46:	3301      	adds	r3, #1
 8002b48:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
 8002b4c:	e7de      	b.n	8002b0c <_ZN7MPU605013dmpInitializeEv+0x348>
            writeMemoryBlock(dmpUpdate + 3, dmpUpdate[2], dmpUpdate[0], dmpUpdate[1]);
 8002b4e:	f107 018c 	add.w	r1, r7, #140	; 0x8c
 8002b52:	3103      	adds	r1, #3
 8002b54:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 8002b58:	b29a      	uxth	r2, r3
 8002b5a:	f897 008c 	ldrb.w	r0, [r7, #140]	; 0x8c
 8002b5e:	f897 308d 	ldrb.w	r3, [r7, #141]	; 0x8d
 8002b62:	2400      	movs	r4, #0
 8002b64:	9402      	str	r4, [sp, #8]
 8002b66:	2401      	movs	r4, #1
 8002b68:	9401      	str	r4, [sp, #4]
 8002b6a:	9300      	str	r3, [sp, #0]
 8002b6c:	4603      	mov	r3, r0
 8002b6e:	6878      	ldr	r0, [r7, #4]
 8002b70:	f7ff fc3a 	bl	80023e8 <_ZN7MPU605016writeMemoryBlockEPKhthhbb>

            //DEBUG_PRINTLN(F("Waiting for FIFO count > 2..."));
            while ((fifoCount = getFIFOCount()) < 3);
 8002b74:	6878      	ldr	r0, [r7, #4]
 8002b76:	f7ff fa54 	bl	8002022 <_ZN7MPU605012getFIFOCountEv>
 8002b7a:	4603      	mov	r3, r0
 8002b7c:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
 8002b80:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8002b84:	2b02      	cmp	r3, #2
 8002b86:	bf94      	ite	ls
 8002b88:	2301      	movls	r3, #1
 8002b8a:	2300      	movhi	r3, #0
 8002b8c:	b2db      	uxtb	r3, r3
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d006      	beq.n	8002ba0 <_ZN7MPU605013dmpInitializeEv+0x3dc>
 8002b92:	e7ef      	b.n	8002b74 <_ZN7MPU605013dmpInitializeEv+0x3b0>
 8002b94:	0801278c 	.word	0x0801278c
 8002b98:	08012f18 	.word	0x08012f18
 8002b9c:	08012fd8 	.word	0x08012fd8

            //DEBUG_PRINT(F("Current FIFO count="));
            //DEBUG_PRINTLN(fifoCount);
            //DEBUG_PRINTLN(F("Reading FIFO data..."));
            getFIFOBytes(fifoBuffer, fifoCount);
 8002ba0:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8002ba4:	b2da      	uxtb	r2, r3
 8002ba6:	f107 030c 	add.w	r3, r7, #12
 8002baa:	4619      	mov	r1, r3
 8002bac:	6878      	ldr	r0, [r7, #4]
 8002bae:	f7ff fa52 	bl	8002056 <_ZN7MPU605012getFIFOBytesEPhh>

            //DEBUG_PRINT(F("Current interrupt status="));
            //DEBUG_PRINTLNF(getIntStatus(), HEX);

            //DEBUG_PRINTLN(F("Reading final memory update 6/7 (function unknown)..."));
            for (j = 0; j < 4 || j < dmpUpdate[2] + 3; j++, pos++) dmpUpdate[j] = pgm_read_byte(&dmpUpdates[pos]);
 8002bb2:	2300      	movs	r3, #0
 8002bb4:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
 8002bb8:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8002bbc:	2b03      	cmp	r3, #3
 8002bbe:	d906      	bls.n	8002bce <_ZN7MPU605013dmpInitializeEv+0x40a>
 8002bc0:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 8002bc4:	1c9a      	adds	r2, r3, #2
 8002bc6:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8002bca:	429a      	cmp	r2, r3
 8002bcc:	db15      	blt.n	8002bfa <_ZN7MPU605013dmpInitializeEv+0x436>
 8002bce:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 8002bd2:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8002bd6:	4943      	ldr	r1, [pc, #268]	; (8002ce4 <_ZN7MPU605013dmpInitializeEv+0x520>)
 8002bd8:	5c8a      	ldrb	r2, [r1, r2]
 8002bda:	f107 01a8 	add.w	r1, r7, #168	; 0xa8
 8002bde:	440b      	add	r3, r1
 8002be0:	f803 2c1c 	strb.w	r2, [r3, #-28]
 8002be4:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8002be8:	3301      	adds	r3, #1
 8002bea:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
 8002bee:	f8b7 30a4 	ldrh.w	r3, [r7, #164]	; 0xa4
 8002bf2:	3301      	adds	r3, #1
 8002bf4:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
 8002bf8:	e7de      	b.n	8002bb8 <_ZN7MPU605013dmpInitializeEv+0x3f4>
            readMemoryBlock(dmpUpdate + 3, dmpUpdate[2], dmpUpdate[0], dmpUpdate[1]);
 8002bfa:	f107 018c 	add.w	r1, r7, #140	; 0x8c
 8002bfe:	3103      	adds	r1, #3
 8002c00:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 8002c04:	b29a      	uxth	r2, r3
 8002c06:	f897 008c 	ldrb.w	r0, [r7, #140]	; 0x8c
 8002c0a:	f897 308d 	ldrb.w	r3, [r7, #141]	; 0x8d
 8002c0e:	9300      	str	r3, [sp, #0]
 8002c10:	4603      	mov	r3, r0
 8002c12:	6878      	ldr	r0, [r7, #4]
 8002c14:	f7ff fb82 	bl	800231c <_ZN7MPU605015readMemoryBlockEPhthh>

            //DEBUG_PRINTLN(F("Waiting for FIFO count > 2..."));
            while ((fifoCount = getFIFOCount()) < 3);
 8002c18:	6878      	ldr	r0, [r7, #4]
 8002c1a:	f7ff fa02 	bl	8002022 <_ZN7MPU605012getFIFOCountEv>
 8002c1e:	4603      	mov	r3, r0
 8002c20:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
 8002c24:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8002c28:	2b02      	cmp	r3, #2
 8002c2a:	bf94      	ite	ls
 8002c2c:	2301      	movls	r3, #1
 8002c2e:	2300      	movhi	r3, #0
 8002c30:	b2db      	uxtb	r3, r3
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d000      	beq.n	8002c38 <_ZN7MPU605013dmpInitializeEv+0x474>
 8002c36:	e7ef      	b.n	8002c18 <_ZN7MPU605013dmpInitializeEv+0x454>

            //DEBUG_PRINT(F("Current FIFO count="));
            //DEBUG_PRINTLN(fifoCount);

            //DEBUG_PRINTLN(F("Reading FIFO data..."));
            getFIFOBytes(fifoBuffer, fifoCount);
 8002c38:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8002c3c:	b2da      	uxtb	r2, r3
 8002c3e:	f107 030c 	add.w	r3, r7, #12
 8002c42:	4619      	mov	r1, r3
 8002c44:	6878      	ldr	r0, [r7, #4]
 8002c46:	f7ff fa06 	bl	8002056 <_ZN7MPU605012getFIFOBytesEPhh>

            //DEBUG_PRINT(F("Current interrupt status="));
            //DEBUG_PRINTLNF(getIntStatus(), HEX);

            //DEBUG_PRINTLN(F("Writing final memory update 7/7 (function unknown)..."));
            for (j = 0; j < 4 || j < dmpUpdate[2] + 3; j++, pos++) dmpUpdate[j] = pgm_read_byte(&dmpUpdates[pos]);
 8002c4a:	2300      	movs	r3, #0
 8002c4c:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
 8002c50:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8002c54:	2b03      	cmp	r3, #3
 8002c56:	d906      	bls.n	8002c66 <_ZN7MPU605013dmpInitializeEv+0x4a2>
 8002c58:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 8002c5c:	1c9a      	adds	r2, r3, #2
 8002c5e:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8002c62:	429a      	cmp	r2, r3
 8002c64:	db15      	blt.n	8002c92 <_ZN7MPU605013dmpInitializeEv+0x4ce>
 8002c66:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 8002c6a:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8002c6e:	491d      	ldr	r1, [pc, #116]	; (8002ce4 <_ZN7MPU605013dmpInitializeEv+0x520>)
 8002c70:	5c8a      	ldrb	r2, [r1, r2]
 8002c72:	f107 01a8 	add.w	r1, r7, #168	; 0xa8
 8002c76:	440b      	add	r3, r1
 8002c78:	f803 2c1c 	strb.w	r2, [r3, #-28]
 8002c7c:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8002c80:	3301      	adds	r3, #1
 8002c82:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
 8002c86:	f8b7 30a4 	ldrh.w	r3, [r7, #164]	; 0xa4
 8002c8a:	3301      	adds	r3, #1
 8002c8c:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
 8002c90:	e7de      	b.n	8002c50 <_ZN7MPU605013dmpInitializeEv+0x48c>
            writeMemoryBlock(dmpUpdate + 3, dmpUpdate[2], dmpUpdate[0], dmpUpdate[1]);
 8002c92:	f107 018c 	add.w	r1, r7, #140	; 0x8c
 8002c96:	3103      	adds	r1, #3
 8002c98:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 8002c9c:	b29a      	uxth	r2, r3
 8002c9e:	f897 008c 	ldrb.w	r0, [r7, #140]	; 0x8c
 8002ca2:	f897 308d 	ldrb.w	r3, [r7, #141]	; 0x8d
 8002ca6:	2400      	movs	r4, #0
 8002ca8:	9402      	str	r4, [sp, #8]
 8002caa:	2401      	movs	r4, #1
 8002cac:	9401      	str	r4, [sp, #4]
 8002cae:	9300      	str	r3, [sp, #0]
 8002cb0:	4603      	mov	r3, r0
 8002cb2:	6878      	ldr	r0, [r7, #4]
 8002cb4:	f7ff fb98 	bl	80023e8 <_ZN7MPU605016writeMemoryBlockEPKhthhbb>

            //DEBUG_PRINTLN(F("DMP is good to go! Finally."));

            //DEBUG_PRINTLN(F("Disabling DMP (you turn it on later)..."));
            setDMPEnabled(false);
 8002cb8:	2100      	movs	r1, #0
 8002cba:	6878      	ldr	r0, [r7, #4]
 8002cbc:	f7ff fad3 	bl	8002266 <_ZN7MPU605013setDMPEnabledEb>

            //DEBUG_PRINTLN(F("Setting up internal 42-byte (default) DMP packet buffer..."));
            dmpPacketSize = 42;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	222a      	movs	r2, #42	; 0x2a
 8002cc4:	809a      	strh	r2, [r3, #4]
            /*if ((dmpPacketBuffer = (uint8_t *)malloc(42)) == 0) {
                return 3; // TODO: proper error code for no memory
            }*/

            //DEBUG_PRINTLN(F("Resetting FIFO and clearing INT status one last time..."));
            resetFIFO();
 8002cc6:	6878      	ldr	r0, [r7, #4]
 8002cc8:	f7ff f95a 	bl	8001f80 <_ZN7MPU60509resetFIFOEv>
            getIntStatus();
 8002ccc:	6878      	ldr	r0, [r7, #4]
 8002cce:	f7ff f923 	bl	8001f18 <_ZN7MPU605012getIntStatusEv>
        }
    } else {
        //DEBUG_PRINTLN(F("ERROR! DMP code verification failed."));
        return 1; // main binary block loading failed
    }
    return 0; // success
 8002cd2:	2300      	movs	r3, #0
 8002cd4:	e002      	b.n	8002cdc <_ZN7MPU605013dmpInitializeEv+0x518>
            return 2; // configuration block loading failed
 8002cd6:	2302      	movs	r3, #2
 8002cd8:	e000      	b.n	8002cdc <_ZN7MPU605013dmpInitializeEv+0x518>
        return 1; // main binary block loading failed
 8002cda:	2301      	movs	r3, #1
}
 8002cdc:	4618      	mov	r0, r3
 8002cde:	37ac      	adds	r7, #172	; 0xac
 8002ce0:	46bd      	mov	sp, r7
 8002ce2:	bd90      	pop	{r4, r7, pc}
 8002ce4:	08012fd8 	.word	0x08012fd8

08002ce8 <_ZSt4asinf>:
  using ::asin;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  asin(float __x)
  { return __builtin_asinf(__x); }
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	b082      	sub	sp, #8
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	6078      	str	r0, [r7, #4]
 8002cf0:	6878      	ldr	r0, [r7, #4]
 8002cf2:	f00a fd81 	bl	800d7f8 <asinf>
 8002cf6:	4603      	mov	r3, r0
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	3708      	adds	r7, #8
 8002cfc:	46bd      	mov	sp, r7
 8002cfe:	bd80      	pop	{r7, pc}

08002d00 <_ZSt4atanf>:
  using ::atan;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  atan(float __x)
  { return __builtin_atanf(__x); }
 8002d00:	b580      	push	{r7, lr}
 8002d02:	b082      	sub	sp, #8
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
 8002d08:	6878      	ldr	r0, [r7, #4]
 8002d0a:	f00a fbd5 	bl	800d4b8 <atanf>
 8002d0e:	4603      	mov	r3, r0
 8002d10:	4618      	mov	r0, r3
 8002d12:	3708      	adds	r7, #8
 8002d14:	46bd      	mov	sp, r7
 8002d16:	bd80      	pop	{r7, pc}

08002d18 <_ZSt3cosf>:
  using ::cos;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  cos(float __x)
  { return __builtin_cosf(__x); }
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	b082      	sub	sp, #8
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	6078      	str	r0, [r7, #4]
 8002d20:	6878      	ldr	r0, [r7, #4]
 8002d22:	f00a fcd5 	bl	800d6d0 <cosf>
 8002d26:	4603      	mov	r3, r0
 8002d28:	4618      	mov	r0, r3
 8002d2a:	3708      	adds	r7, #8
 8002d2c:	46bd      	mov	sp, r7
 8002d2e:	bd80      	pop	{r7, pc}

08002d30 <_ZSt3sinf>:
  using ::sin;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  sin(float __x)
  { return __builtin_sinf(__x); }
 8002d30:	b580      	push	{r7, lr}
 8002d32:	b082      	sub	sp, #8
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
 8002d38:	6878      	ldr	r0, [r7, #4]
 8002d3a:	f00a fd01 	bl	800d740 <sinf>
 8002d3e:	4603      	mov	r3, r0
 8002d40:	4618      	mov	r0, r3
 8002d42:	3708      	adds	r7, #8
 8002d44:	46bd      	mov	sp, r7
 8002d46:	bd80      	pop	{r7, pc}

08002d48 <_ZSt4sqrtf>:
  using ::sqrt;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  sqrt(float __x)
  { return __builtin_sqrtf(__x); }
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	b082      	sub	sp, #8
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	6078      	str	r0, [r7, #4]
 8002d50:	6878      	ldr	r0, [r7, #4]
 8002d52:	f00a fd77 	bl	800d844 <sqrtf>
 8002d56:	4603      	mov	r3, r0
 8002d58:	4618      	mov	r0, r3
 8002d5a:	3708      	adds	r7, #8
 8002d5c:	46bd      	mov	sp, r7
 8002d5e:	bd80      	pop	{r7, pc}

08002d60 <_Z15getWXQuaternionv>:
float Pitch_D_old;
float Roll_D_old;
float Yaw_D_old;

void getWXQuaternion()
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	b082      	sub	sp, #8
 8002d64:	af00      	add	r7, sp, #0
  float *p = QuaternionSLERP(QuaternionProduct(&FrameOriginQuaternion[0] , QuaternionSLERP(&OriginQuaternion[0], &MPUoutputQuaternion[0])), &LoopWQuaternion[0]);
 8002d66:	494e      	ldr	r1, [pc, #312]	; (8002ea0 <_Z15getWXQuaternionv+0x140>)
 8002d68:	484e      	ldr	r0, [pc, #312]	; (8002ea4 <_Z15getWXQuaternionv+0x144>)
 8002d6a:	f000 fd43 	bl	80037f4 <_Z15QuaternionSLERPPfS_>
 8002d6e:	4603      	mov	r3, r0
 8002d70:	4619      	mov	r1, r3
 8002d72:	484d      	ldr	r0, [pc, #308]	; (8002ea8 <_Z15getWXQuaternionv+0x148>)
 8002d74:	f000 fc10 	bl	8003598 <_Z17QuaternionProductPfS_>
 8002d78:	4603      	mov	r3, r0
 8002d7a:	494c      	ldr	r1, [pc, #304]	; (8002eac <_Z15getWXQuaternionv+0x14c>)
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	f000 fd39 	bl	80037f4 <_Z15QuaternionSLERPPfS_>
 8002d82:	6078      	str	r0, [r7, #4]
  LoopWXQuaternion[0] = *p;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	4a49      	ldr	r2, [pc, #292]	; (8002eb0 <_Z15getWXQuaternionv+0x150>)
 8002d8a:	6013      	str	r3, [r2, #0]
  LoopWXQuaternion[1] = *(p + 1);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	685b      	ldr	r3, [r3, #4]
 8002d90:	4a47      	ldr	r2, [pc, #284]	; (8002eb0 <_Z15getWXQuaternionv+0x150>)
 8002d92:	6053      	str	r3, [r2, #4]
  LoopWXQuaternion[2] = *(p + 2);
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	689b      	ldr	r3, [r3, #8]
 8002d98:	4a45      	ldr	r2, [pc, #276]	; (8002eb0 <_Z15getWXQuaternionv+0x150>)
 8002d9a:	6093      	str	r3, [r2, #8]
  LoopWXQuaternion[3] = *(p + 3);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	68db      	ldr	r3, [r3, #12]
 8002da0:	4a43      	ldr	r2, [pc, #268]	; (8002eb0 <_Z15getWXQuaternionv+0x150>)
 8002da2:	60d3      	str	r3, [r2, #12]

  //difference x-w in degrees
  PID_Pitch_xw_diff = 2 * (((float)asin(LoopWXQuaternion[1]) * 180) / M_PI);
 8002da4:	4b42      	ldr	r3, [pc, #264]	; (8002eb0 <_Z15getWXQuaternionv+0x150>)
 8002da6:	685b      	ldr	r3, [r3, #4]
 8002da8:	4618      	mov	r0, r3
 8002daa:	f7ff ff9d 	bl	8002ce8 <_ZSt4asinf>
 8002dae:	4603      	mov	r3, r0
 8002db0:	4940      	ldr	r1, [pc, #256]	; (8002eb4 <_Z15getWXQuaternionv+0x154>)
 8002db2:	4618      	mov	r0, r3
 8002db4:	f7fe f802 	bl	8000dbc <__aeabi_fmul>
 8002db8:	4603      	mov	r3, r0
 8002dba:	4618      	mov	r0, r3
 8002dbc:	f7fd fb70 	bl	80004a0 <__aeabi_f2d>
 8002dc0:	a335      	add	r3, pc, #212	; (adr r3, 8002e98 <_Z15getWXQuaternionv+0x138>)
 8002dc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002dc6:	f7fd fced 	bl	80007a4 <__aeabi_ddiv>
 8002dca:	4602      	mov	r2, r0
 8002dcc:	460b      	mov	r3, r1
 8002dce:	4610      	mov	r0, r2
 8002dd0:	4619      	mov	r1, r3
 8002dd2:	4602      	mov	r2, r0
 8002dd4:	460b      	mov	r3, r1
 8002dd6:	f7fd fa05 	bl	80001e4 <__adddf3>
 8002dda:	4602      	mov	r2, r0
 8002ddc:	460b      	mov	r3, r1
 8002dde:	4610      	mov	r0, r2
 8002de0:	4619      	mov	r1, r3
 8002de2:	f7fd fe8d 	bl	8000b00 <__aeabi_d2f>
 8002de6:	4603      	mov	r3, r0
 8002de8:	4a33      	ldr	r2, [pc, #204]	; (8002eb8 <_Z15getWXQuaternionv+0x158>)
 8002dea:	6013      	str	r3, [r2, #0]
  PID_Roll_xw_diff  = 2 * (((float)asin(LoopWXQuaternion[2]) * 180) / M_PI);
 8002dec:	4b30      	ldr	r3, [pc, #192]	; (8002eb0 <_Z15getWXQuaternionv+0x150>)
 8002dee:	689b      	ldr	r3, [r3, #8]
 8002df0:	4618      	mov	r0, r3
 8002df2:	f7ff ff79 	bl	8002ce8 <_ZSt4asinf>
 8002df6:	4603      	mov	r3, r0
 8002df8:	492e      	ldr	r1, [pc, #184]	; (8002eb4 <_Z15getWXQuaternionv+0x154>)
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	f7fd ffde 	bl	8000dbc <__aeabi_fmul>
 8002e00:	4603      	mov	r3, r0
 8002e02:	4618      	mov	r0, r3
 8002e04:	f7fd fb4c 	bl	80004a0 <__aeabi_f2d>
 8002e08:	a323      	add	r3, pc, #140	; (adr r3, 8002e98 <_Z15getWXQuaternionv+0x138>)
 8002e0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e0e:	f7fd fcc9 	bl	80007a4 <__aeabi_ddiv>
 8002e12:	4602      	mov	r2, r0
 8002e14:	460b      	mov	r3, r1
 8002e16:	4610      	mov	r0, r2
 8002e18:	4619      	mov	r1, r3
 8002e1a:	4602      	mov	r2, r0
 8002e1c:	460b      	mov	r3, r1
 8002e1e:	f7fd f9e1 	bl	80001e4 <__adddf3>
 8002e22:	4602      	mov	r2, r0
 8002e24:	460b      	mov	r3, r1
 8002e26:	4610      	mov	r0, r2
 8002e28:	4619      	mov	r1, r3
 8002e2a:	f7fd fe69 	bl	8000b00 <__aeabi_d2f>
 8002e2e:	4603      	mov	r3, r0
 8002e30:	4a22      	ldr	r2, [pc, #136]	; (8002ebc <_Z15getWXQuaternionv+0x15c>)
 8002e32:	6013      	str	r3, [r2, #0]
  PID_Yaw_xw_diff   = 2 * (((float)atan(LoopWXQuaternion[3] / LoopWXQuaternion[0]) * 180) / M_PI);
 8002e34:	4b1e      	ldr	r3, [pc, #120]	; (8002eb0 <_Z15getWXQuaternionv+0x150>)
 8002e36:	68db      	ldr	r3, [r3, #12]
 8002e38:	4a1d      	ldr	r2, [pc, #116]	; (8002eb0 <_Z15getWXQuaternionv+0x150>)
 8002e3a:	6812      	ldr	r2, [r2, #0]
 8002e3c:	4611      	mov	r1, r2
 8002e3e:	4618      	mov	r0, r3
 8002e40:	f7fe f870 	bl	8000f24 <__aeabi_fdiv>
 8002e44:	4603      	mov	r3, r0
 8002e46:	4618      	mov	r0, r3
 8002e48:	f7ff ff5a 	bl	8002d00 <_ZSt4atanf>
 8002e4c:	4603      	mov	r3, r0
 8002e4e:	4919      	ldr	r1, [pc, #100]	; (8002eb4 <_Z15getWXQuaternionv+0x154>)
 8002e50:	4618      	mov	r0, r3
 8002e52:	f7fd ffb3 	bl	8000dbc <__aeabi_fmul>
 8002e56:	4603      	mov	r3, r0
 8002e58:	4618      	mov	r0, r3
 8002e5a:	f7fd fb21 	bl	80004a0 <__aeabi_f2d>
 8002e5e:	a30e      	add	r3, pc, #56	; (adr r3, 8002e98 <_Z15getWXQuaternionv+0x138>)
 8002e60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e64:	f7fd fc9e 	bl	80007a4 <__aeabi_ddiv>
 8002e68:	4602      	mov	r2, r0
 8002e6a:	460b      	mov	r3, r1
 8002e6c:	4610      	mov	r0, r2
 8002e6e:	4619      	mov	r1, r3
 8002e70:	4602      	mov	r2, r0
 8002e72:	460b      	mov	r3, r1
 8002e74:	f7fd f9b6 	bl	80001e4 <__adddf3>
 8002e78:	4602      	mov	r2, r0
 8002e7a:	460b      	mov	r3, r1
 8002e7c:	4610      	mov	r0, r2
 8002e7e:	4619      	mov	r1, r3
 8002e80:	f7fd fe3e 	bl	8000b00 <__aeabi_d2f>
 8002e84:	4603      	mov	r3, r0
 8002e86:	4a0e      	ldr	r2, [pc, #56]	; (8002ec0 <_Z15getWXQuaternionv+0x160>)
 8002e88:	6013      	str	r3, [r2, #0]
}
 8002e8a:	bf00      	nop
 8002e8c:	3708      	adds	r7, #8
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	bd80      	pop	{r7, pc}
 8002e92:	bf00      	nop
 8002e94:	f3af 8000 	nop.w
 8002e98:	54442d18 	.word	0x54442d18
 8002e9c:	400921fb 	.word	0x400921fb
 8002ea0:	200004c0 	.word	0x200004c0
 8002ea4:	200004d0 	.word	0x200004d0
 8002ea8:	20000000 	.word	0x20000000
 8002eac:	20000010 	.word	0x20000010
 8002eb0:	200004e0 	.word	0x200004e0
 8002eb4:	43340000 	.word	0x43340000
 8002eb8:	200004a8 	.word	0x200004a8
 8002ebc:	200004ac 	.word	0x200004ac
 8002ec0:	200004b0 	.word	0x200004b0

08002ec4 <_Z28Update_FrameOriginQuaternionv>:

void Update_FrameOriginQuaternion()
{
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	b084      	sub	sp, #16
 8002ec8:	af00      	add	r7, sp, #0
  updateQuaternion[0] = cos((float)SBUS_Channels[3] / 10000);
 8002eca:	4b44      	ldr	r3, [pc, #272]	; (8002fdc <_Z28Update_FrameOriginQuaternionv+0x118>)
 8002ecc:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8002ed0:	4618      	mov	r0, r3
 8002ed2:	f7fd ff1f 	bl	8000d14 <__aeabi_i2f>
 8002ed6:	4603      	mov	r3, r0
 8002ed8:	4941      	ldr	r1, [pc, #260]	; (8002fe0 <_Z28Update_FrameOriginQuaternionv+0x11c>)
 8002eda:	4618      	mov	r0, r3
 8002edc:	f7fe f822 	bl	8000f24 <__aeabi_fdiv>
 8002ee0:	4603      	mov	r3, r0
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	f7ff ff18 	bl	8002d18 <_ZSt3cosf>
 8002ee8:	4603      	mov	r3, r0
 8002eea:	4a3e      	ldr	r2, [pc, #248]	; (8002fe4 <_Z28Update_FrameOriginQuaternionv+0x120>)
 8002eec:	6013      	str	r3, [r2, #0]
  updateQuaternion[1] = (float)sin((float)SBUS_Channels[1] / (float)10000);
 8002eee:	4b3b      	ldr	r3, [pc, #236]	; (8002fdc <_Z28Update_FrameOriginQuaternionv+0x118>)
 8002ef0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	f7fd ff0d 	bl	8000d14 <__aeabi_i2f>
 8002efa:	4603      	mov	r3, r0
 8002efc:	4938      	ldr	r1, [pc, #224]	; (8002fe0 <_Z28Update_FrameOriginQuaternionv+0x11c>)
 8002efe:	4618      	mov	r0, r3
 8002f00:	f7fe f810 	bl	8000f24 <__aeabi_fdiv>
 8002f04:	4603      	mov	r3, r0
 8002f06:	4618      	mov	r0, r3
 8002f08:	f7ff ff12 	bl	8002d30 <_ZSt3sinf>
 8002f0c:	4603      	mov	r3, r0
 8002f0e:	4a35      	ldr	r2, [pc, #212]	; (8002fe4 <_Z28Update_FrameOriginQuaternionv+0x120>)
 8002f10:	6053      	str	r3, [r2, #4]
  updateQuaternion[2] = (float)sin((float)SBUS_Channels[0] / (float)10000);
 8002f12:	4b32      	ldr	r3, [pc, #200]	; (8002fdc <_Z28Update_FrameOriginQuaternionv+0x118>)
 8002f14:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002f18:	4618      	mov	r0, r3
 8002f1a:	f7fd fefb 	bl	8000d14 <__aeabi_i2f>
 8002f1e:	4603      	mov	r3, r0
 8002f20:	492f      	ldr	r1, [pc, #188]	; (8002fe0 <_Z28Update_FrameOriginQuaternionv+0x11c>)
 8002f22:	4618      	mov	r0, r3
 8002f24:	f7fd fffe 	bl	8000f24 <__aeabi_fdiv>
 8002f28:	4603      	mov	r3, r0
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	f7ff ff00 	bl	8002d30 <_ZSt3sinf>
 8002f30:	4603      	mov	r3, r0
 8002f32:	4a2c      	ldr	r2, [pc, #176]	; (8002fe4 <_Z28Update_FrameOriginQuaternionv+0x120>)
 8002f34:	6093      	str	r3, [r2, #8]
  updateQuaternion[3] = sin((float)SBUS_Channels[3] / 10000);
 8002f36:	4b29      	ldr	r3, [pc, #164]	; (8002fdc <_Z28Update_FrameOriginQuaternionv+0x118>)
 8002f38:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8002f3c:	4618      	mov	r0, r3
 8002f3e:	f7fd fee9 	bl	8000d14 <__aeabi_i2f>
 8002f42:	4603      	mov	r3, r0
 8002f44:	4926      	ldr	r1, [pc, #152]	; (8002fe0 <_Z28Update_FrameOriginQuaternionv+0x11c>)
 8002f46:	4618      	mov	r0, r3
 8002f48:	f7fd ffec 	bl	8000f24 <__aeabi_fdiv>
 8002f4c:	4603      	mov	r3, r0
 8002f4e:	4618      	mov	r0, r3
 8002f50:	f7ff feee 	bl	8002d30 <_ZSt3sinf>
 8002f54:	4603      	mov	r3, r0
 8002f56:	4a23      	ldr	r2, [pc, #140]	; (8002fe4 <_Z28Update_FrameOriginQuaternionv+0x120>)
 8002f58:	60d3      	str	r3, [r2, #12]

  float *p1 = QuaternionNormalize(&updateQuaternion[0]);
 8002f5a:	4822      	ldr	r0, [pc, #136]	; (8002fe4 <_Z28Update_FrameOriginQuaternionv+0x120>)
 8002f5c:	f000 fc5c 	bl	8003818 <_Z19QuaternionNormalizePf>
 8002f60:	60f8      	str	r0, [r7, #12]
  updateQuaternion[0] = *p1;
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	4a1f      	ldr	r2, [pc, #124]	; (8002fe4 <_Z28Update_FrameOriginQuaternionv+0x120>)
 8002f68:	6013      	str	r3, [r2, #0]
  updateQuaternion[1] = *(p1 + 1);
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	685b      	ldr	r3, [r3, #4]
 8002f6e:	4a1d      	ldr	r2, [pc, #116]	; (8002fe4 <_Z28Update_FrameOriginQuaternionv+0x120>)
 8002f70:	6053      	str	r3, [r2, #4]
  updateQuaternion[2] = *(p1 + 2);
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	689b      	ldr	r3, [r3, #8]
 8002f76:	4a1b      	ldr	r2, [pc, #108]	; (8002fe4 <_Z28Update_FrameOriginQuaternionv+0x120>)
 8002f78:	6093      	str	r3, [r2, #8]
  updateQuaternion[3] = *(p1 + 3);
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	68db      	ldr	r3, [r3, #12]
 8002f7e:	4a19      	ldr	r2, [pc, #100]	; (8002fe4 <_Z28Update_FrameOriginQuaternionv+0x120>)
 8002f80:	60d3      	str	r3, [r2, #12]

  float *p2 = QuaternionProduct(&updateQuaternion[0], &LoopWQuaternion[0]);
 8002f82:	4919      	ldr	r1, [pc, #100]	; (8002fe8 <_Z28Update_FrameOriginQuaternionv+0x124>)
 8002f84:	4817      	ldr	r0, [pc, #92]	; (8002fe4 <_Z28Update_FrameOriginQuaternionv+0x120>)
 8002f86:	f000 fb07 	bl	8003598 <_Z17QuaternionProductPfS_>
 8002f8a:	60b8      	str	r0, [r7, #8]
  LoopWQuaternion[0] = *p2;
 8002f8c:	68bb      	ldr	r3, [r7, #8]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	4a15      	ldr	r2, [pc, #84]	; (8002fe8 <_Z28Update_FrameOriginQuaternionv+0x124>)
 8002f92:	6013      	str	r3, [r2, #0]
  LoopWQuaternion[1] = *(p2 + 1);
 8002f94:	68bb      	ldr	r3, [r7, #8]
 8002f96:	685b      	ldr	r3, [r3, #4]
 8002f98:	4a13      	ldr	r2, [pc, #76]	; (8002fe8 <_Z28Update_FrameOriginQuaternionv+0x124>)
 8002f9a:	6053      	str	r3, [r2, #4]
  LoopWQuaternion[2] = *(p2 + 2);
 8002f9c:	68bb      	ldr	r3, [r7, #8]
 8002f9e:	689b      	ldr	r3, [r3, #8]
 8002fa0:	4a11      	ldr	r2, [pc, #68]	; (8002fe8 <_Z28Update_FrameOriginQuaternionv+0x124>)
 8002fa2:	6093      	str	r3, [r2, #8]
  LoopWQuaternion[3] = *(p2 + 3);
 8002fa4:	68bb      	ldr	r3, [r7, #8]
 8002fa6:	68db      	ldr	r3, [r3, #12]
 8002fa8:	4a0f      	ldr	r2, [pc, #60]	; (8002fe8 <_Z28Update_FrameOriginQuaternionv+0x124>)
 8002faa:	60d3      	str	r3, [r2, #12]

    float *p3 = QuaternionNormalize(&LoopWQuaternion[0]);
 8002fac:	480e      	ldr	r0, [pc, #56]	; (8002fe8 <_Z28Update_FrameOriginQuaternionv+0x124>)
 8002fae:	f000 fc33 	bl	8003818 <_Z19QuaternionNormalizePf>
 8002fb2:	6078      	str	r0, [r7, #4]
  LoopWQuaternion[0] = *p3;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	4a0b      	ldr	r2, [pc, #44]	; (8002fe8 <_Z28Update_FrameOriginQuaternionv+0x124>)
 8002fba:	6013      	str	r3, [r2, #0]
  LoopWQuaternion[1] = *(p3 + 1);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	685b      	ldr	r3, [r3, #4]
 8002fc0:	4a09      	ldr	r2, [pc, #36]	; (8002fe8 <_Z28Update_FrameOriginQuaternionv+0x124>)
 8002fc2:	6053      	str	r3, [r2, #4]
  LoopWQuaternion[2] = *(p3 + 2);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	689b      	ldr	r3, [r3, #8]
 8002fc8:	4a07      	ldr	r2, [pc, #28]	; (8002fe8 <_Z28Update_FrameOriginQuaternionv+0x124>)
 8002fca:	6093      	str	r3, [r2, #8]
  LoopWQuaternion[3] = *(p3 + 3);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	68db      	ldr	r3, [r3, #12]
 8002fd0:	4a05      	ldr	r2, [pc, #20]	; (8002fe8 <_Z28Update_FrameOriginQuaternionv+0x124>)
 8002fd2:	60d3      	str	r3, [r2, #12]
}
 8002fd4:	bf00      	nop
 8002fd6:	3710      	adds	r7, #16
 8002fd8:	46bd      	mov	sp, r7
 8002fda:	bd80      	pop	{r7, pc}
 8002fdc:	2000061c 	.word	0x2000061c
 8002fe0:	461c4000 	.word	0x461c4000
 8002fe4:	200004f0 	.word	0x200004f0
 8002fe8:	20000010 	.word	0x20000010

08002fec <_Z10Update_PIDv>:

void Update_PID()
{
 8002fec:	b598      	push	{r3, r4, r7, lr}
 8002fee:	af00      	add	r7, sp, #0
  Pitch_I_Sum += (PID_Pitch_xw_diff * Pitch_PID_k[1]);
 8002ff0:	4b92      	ldr	r3, [pc, #584]	; (800323c <_Z10Update_PIDv+0x250>)
 8002ff2:	685b      	ldr	r3, [r3, #4]
 8002ff4:	4a92      	ldr	r2, [pc, #584]	; (8003240 <_Z10Update_PIDv+0x254>)
 8002ff6:	6812      	ldr	r2, [r2, #0]
 8002ff8:	4611      	mov	r1, r2
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	f7fd fede 	bl	8000dbc <__aeabi_fmul>
 8003000:	4603      	mov	r3, r0
 8003002:	461a      	mov	r2, r3
 8003004:	4b8f      	ldr	r3, [pc, #572]	; (8003244 <_Z10Update_PIDv+0x258>)
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	4619      	mov	r1, r3
 800300a:	4610      	mov	r0, r2
 800300c:	f7fd fdce 	bl	8000bac <__addsf3>
 8003010:	4603      	mov	r3, r0
 8003012:	461a      	mov	r2, r3
 8003014:	4b8b      	ldr	r3, [pc, #556]	; (8003244 <_Z10Update_PIDv+0x258>)
 8003016:	601a      	str	r2, [r3, #0]
  Roll_I_Sum  += (PID_Roll_xw_diff  * Roll_PID_k[1] );
 8003018:	4b8b      	ldr	r3, [pc, #556]	; (8003248 <_Z10Update_PIDv+0x25c>)
 800301a:	685b      	ldr	r3, [r3, #4]
 800301c:	4a8b      	ldr	r2, [pc, #556]	; (800324c <_Z10Update_PIDv+0x260>)
 800301e:	6812      	ldr	r2, [r2, #0]
 8003020:	4611      	mov	r1, r2
 8003022:	4618      	mov	r0, r3
 8003024:	f7fd feca 	bl	8000dbc <__aeabi_fmul>
 8003028:	4603      	mov	r3, r0
 800302a:	461a      	mov	r2, r3
 800302c:	4b88      	ldr	r3, [pc, #544]	; (8003250 <_Z10Update_PIDv+0x264>)
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	4619      	mov	r1, r3
 8003032:	4610      	mov	r0, r2
 8003034:	f7fd fdba 	bl	8000bac <__addsf3>
 8003038:	4603      	mov	r3, r0
 800303a:	461a      	mov	r2, r3
 800303c:	4b84      	ldr	r3, [pc, #528]	; (8003250 <_Z10Update_PIDv+0x264>)
 800303e:	601a      	str	r2, [r3, #0]
  Yaw_I_Sum   += (PID_Yaw_xw_diff   * Yaw_PID_k[1]  );
 8003040:	4b84      	ldr	r3, [pc, #528]	; (8003254 <_Z10Update_PIDv+0x268>)
 8003042:	685b      	ldr	r3, [r3, #4]
 8003044:	4a84      	ldr	r2, [pc, #528]	; (8003258 <_Z10Update_PIDv+0x26c>)
 8003046:	6812      	ldr	r2, [r2, #0]
 8003048:	4611      	mov	r1, r2
 800304a:	4618      	mov	r0, r3
 800304c:	f7fd feb6 	bl	8000dbc <__aeabi_fmul>
 8003050:	4603      	mov	r3, r0
 8003052:	461a      	mov	r2, r3
 8003054:	4b81      	ldr	r3, [pc, #516]	; (800325c <_Z10Update_PIDv+0x270>)
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	4619      	mov	r1, r3
 800305a:	4610      	mov	r0, r2
 800305c:	f7fd fda6 	bl	8000bac <__addsf3>
 8003060:	4603      	mov	r3, r0
 8003062:	461a      	mov	r2, r3
 8003064:	4b7d      	ldr	r3, [pc, #500]	; (800325c <_Z10Update_PIDv+0x270>)
 8003066:	601a      	str	r2, [r3, #0]

  if (Pitch_I_Sum > 500 ) Pitch_I_Sum = 500 ;
 8003068:	4b76      	ldr	r3, [pc, #472]	; (8003244 <_Z10Update_PIDv+0x258>)
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	497c      	ldr	r1, [pc, #496]	; (8003260 <_Z10Update_PIDv+0x274>)
 800306e:	4618      	mov	r0, r3
 8003070:	f7fe f860 	bl	8001134 <__aeabi_fcmpgt>
 8003074:	4603      	mov	r3, r0
 8003076:	2b00      	cmp	r3, #0
 8003078:	d002      	beq.n	8003080 <_Z10Update_PIDv+0x94>
 800307a:	4b72      	ldr	r3, [pc, #456]	; (8003244 <_Z10Update_PIDv+0x258>)
 800307c:	4a78      	ldr	r2, [pc, #480]	; (8003260 <_Z10Update_PIDv+0x274>)
 800307e:	601a      	str	r2, [r3, #0]
  if (Roll_I_Sum  > 500 ) Roll_I_Sum  = 500 ;
 8003080:	4b73      	ldr	r3, [pc, #460]	; (8003250 <_Z10Update_PIDv+0x264>)
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	4976      	ldr	r1, [pc, #472]	; (8003260 <_Z10Update_PIDv+0x274>)
 8003086:	4618      	mov	r0, r3
 8003088:	f7fe f854 	bl	8001134 <__aeabi_fcmpgt>
 800308c:	4603      	mov	r3, r0
 800308e:	2b00      	cmp	r3, #0
 8003090:	d002      	beq.n	8003098 <_Z10Update_PIDv+0xac>
 8003092:	4b6f      	ldr	r3, [pc, #444]	; (8003250 <_Z10Update_PIDv+0x264>)
 8003094:	4a72      	ldr	r2, [pc, #456]	; (8003260 <_Z10Update_PIDv+0x274>)
 8003096:	601a      	str	r2, [r3, #0]
  if (Yaw_I_Sum   > 500 ) Yaw_I_Sum   = 500 ;
 8003098:	4b70      	ldr	r3, [pc, #448]	; (800325c <_Z10Update_PIDv+0x270>)
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	4970      	ldr	r1, [pc, #448]	; (8003260 <_Z10Update_PIDv+0x274>)
 800309e:	4618      	mov	r0, r3
 80030a0:	f7fe f848 	bl	8001134 <__aeabi_fcmpgt>
 80030a4:	4603      	mov	r3, r0
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d002      	beq.n	80030b0 <_Z10Update_PIDv+0xc4>
 80030aa:	4b6c      	ldr	r3, [pc, #432]	; (800325c <_Z10Update_PIDv+0x270>)
 80030ac:	4a6c      	ldr	r2, [pc, #432]	; (8003260 <_Z10Update_PIDv+0x274>)
 80030ae:	601a      	str	r2, [r3, #0]
  if (Pitch_I_Sum < -500) Pitch_I_Sum = -500;
 80030b0:	4b64      	ldr	r3, [pc, #400]	; (8003244 <_Z10Update_PIDv+0x258>)
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	496b      	ldr	r1, [pc, #428]	; (8003264 <_Z10Update_PIDv+0x278>)
 80030b6:	4618      	mov	r0, r3
 80030b8:	f7fe f81e 	bl	80010f8 <__aeabi_fcmplt>
 80030bc:	4603      	mov	r3, r0
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d002      	beq.n	80030c8 <_Z10Update_PIDv+0xdc>
 80030c2:	4b60      	ldr	r3, [pc, #384]	; (8003244 <_Z10Update_PIDv+0x258>)
 80030c4:	4a67      	ldr	r2, [pc, #412]	; (8003264 <_Z10Update_PIDv+0x278>)
 80030c6:	601a      	str	r2, [r3, #0]
  if (Roll_I_Sum  < -500) Roll_I_Sum  = -500;
 80030c8:	4b61      	ldr	r3, [pc, #388]	; (8003250 <_Z10Update_PIDv+0x264>)
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	4965      	ldr	r1, [pc, #404]	; (8003264 <_Z10Update_PIDv+0x278>)
 80030ce:	4618      	mov	r0, r3
 80030d0:	f7fe f812 	bl	80010f8 <__aeabi_fcmplt>
 80030d4:	4603      	mov	r3, r0
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d002      	beq.n	80030e0 <_Z10Update_PIDv+0xf4>
 80030da:	4b5d      	ldr	r3, [pc, #372]	; (8003250 <_Z10Update_PIDv+0x264>)
 80030dc:	4a61      	ldr	r2, [pc, #388]	; (8003264 <_Z10Update_PIDv+0x278>)
 80030de:	601a      	str	r2, [r3, #0]
  if (Yaw_I_Sum   < -500) Yaw_I_Sum   = -500;
 80030e0:	4b5e      	ldr	r3, [pc, #376]	; (800325c <_Z10Update_PIDv+0x270>)
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	495f      	ldr	r1, [pc, #380]	; (8003264 <_Z10Update_PIDv+0x278>)
 80030e6:	4618      	mov	r0, r3
 80030e8:	f7fe f806 	bl	80010f8 <__aeabi_fcmplt>
 80030ec:	4603      	mov	r3, r0
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d002      	beq.n	80030f8 <_Z10Update_PIDv+0x10c>
 80030f2:	4b5a      	ldr	r3, [pc, #360]	; (800325c <_Z10Update_PIDv+0x270>)
 80030f4:	4a5b      	ldr	r2, [pc, #364]	; (8003264 <_Z10Update_PIDv+0x278>)
 80030f6:	601a      	str	r2, [r3, #0]
  

  PID_Pitch_y = (PID_Pitch_xw_diff * Pitch_PID_k[0] * 10) + Pitch_I_Sum + ((PID_Pitch_xw_diff - Pitch_D_old) * Pitch_PID_k[2] * 100);
 80030f8:	4b50      	ldr	r3, [pc, #320]	; (800323c <_Z10Update_PIDv+0x250>)
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	4a50      	ldr	r2, [pc, #320]	; (8003240 <_Z10Update_PIDv+0x254>)
 80030fe:	6812      	ldr	r2, [r2, #0]
 8003100:	4611      	mov	r1, r2
 8003102:	4618      	mov	r0, r3
 8003104:	f7fd fe5a 	bl	8000dbc <__aeabi_fmul>
 8003108:	4603      	mov	r3, r0
 800310a:	4957      	ldr	r1, [pc, #348]	; (8003268 <_Z10Update_PIDv+0x27c>)
 800310c:	4618      	mov	r0, r3
 800310e:	f7fd fe55 	bl	8000dbc <__aeabi_fmul>
 8003112:	4603      	mov	r3, r0
 8003114:	461a      	mov	r2, r3
 8003116:	4b4b      	ldr	r3, [pc, #300]	; (8003244 <_Z10Update_PIDv+0x258>)
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	4619      	mov	r1, r3
 800311c:	4610      	mov	r0, r2
 800311e:	f7fd fd45 	bl	8000bac <__addsf3>
 8003122:	4603      	mov	r3, r0
 8003124:	461c      	mov	r4, r3
 8003126:	4b46      	ldr	r3, [pc, #280]	; (8003240 <_Z10Update_PIDv+0x254>)
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	4a50      	ldr	r2, [pc, #320]	; (800326c <_Z10Update_PIDv+0x280>)
 800312c:	6812      	ldr	r2, [r2, #0]
 800312e:	4611      	mov	r1, r2
 8003130:	4618      	mov	r0, r3
 8003132:	f7fd fd39 	bl	8000ba8 <__aeabi_fsub>
 8003136:	4603      	mov	r3, r0
 8003138:	461a      	mov	r2, r3
 800313a:	4b40      	ldr	r3, [pc, #256]	; (800323c <_Z10Update_PIDv+0x250>)
 800313c:	689b      	ldr	r3, [r3, #8]
 800313e:	4619      	mov	r1, r3
 8003140:	4610      	mov	r0, r2
 8003142:	f7fd fe3b 	bl	8000dbc <__aeabi_fmul>
 8003146:	4603      	mov	r3, r0
 8003148:	4949      	ldr	r1, [pc, #292]	; (8003270 <_Z10Update_PIDv+0x284>)
 800314a:	4618      	mov	r0, r3
 800314c:	f7fd fe36 	bl	8000dbc <__aeabi_fmul>
 8003150:	4603      	mov	r3, r0
 8003152:	4619      	mov	r1, r3
 8003154:	4620      	mov	r0, r4
 8003156:	f7fd fd29 	bl	8000bac <__addsf3>
 800315a:	4603      	mov	r3, r0
 800315c:	461a      	mov	r2, r3
 800315e:	4b45      	ldr	r3, [pc, #276]	; (8003274 <_Z10Update_PIDv+0x288>)
 8003160:	601a      	str	r2, [r3, #0]
  PID_Roll_y  = (PID_Roll_xw_diff  * Roll_PID_k[0]  * 10) + Roll_I_Sum  + ((PID_Roll_xw_diff  - Roll_D_old ) * Roll_PID_k[2]  * 100);
 8003162:	4b39      	ldr	r3, [pc, #228]	; (8003248 <_Z10Update_PIDv+0x25c>)
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	4a39      	ldr	r2, [pc, #228]	; (800324c <_Z10Update_PIDv+0x260>)
 8003168:	6812      	ldr	r2, [r2, #0]
 800316a:	4611      	mov	r1, r2
 800316c:	4618      	mov	r0, r3
 800316e:	f7fd fe25 	bl	8000dbc <__aeabi_fmul>
 8003172:	4603      	mov	r3, r0
 8003174:	493c      	ldr	r1, [pc, #240]	; (8003268 <_Z10Update_PIDv+0x27c>)
 8003176:	4618      	mov	r0, r3
 8003178:	f7fd fe20 	bl	8000dbc <__aeabi_fmul>
 800317c:	4603      	mov	r3, r0
 800317e:	461a      	mov	r2, r3
 8003180:	4b33      	ldr	r3, [pc, #204]	; (8003250 <_Z10Update_PIDv+0x264>)
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	4619      	mov	r1, r3
 8003186:	4610      	mov	r0, r2
 8003188:	f7fd fd10 	bl	8000bac <__addsf3>
 800318c:	4603      	mov	r3, r0
 800318e:	461c      	mov	r4, r3
 8003190:	4b2e      	ldr	r3, [pc, #184]	; (800324c <_Z10Update_PIDv+0x260>)
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	4a38      	ldr	r2, [pc, #224]	; (8003278 <_Z10Update_PIDv+0x28c>)
 8003196:	6812      	ldr	r2, [r2, #0]
 8003198:	4611      	mov	r1, r2
 800319a:	4618      	mov	r0, r3
 800319c:	f7fd fd04 	bl	8000ba8 <__aeabi_fsub>
 80031a0:	4603      	mov	r3, r0
 80031a2:	461a      	mov	r2, r3
 80031a4:	4b28      	ldr	r3, [pc, #160]	; (8003248 <_Z10Update_PIDv+0x25c>)
 80031a6:	689b      	ldr	r3, [r3, #8]
 80031a8:	4619      	mov	r1, r3
 80031aa:	4610      	mov	r0, r2
 80031ac:	f7fd fe06 	bl	8000dbc <__aeabi_fmul>
 80031b0:	4603      	mov	r3, r0
 80031b2:	492f      	ldr	r1, [pc, #188]	; (8003270 <_Z10Update_PIDv+0x284>)
 80031b4:	4618      	mov	r0, r3
 80031b6:	f7fd fe01 	bl	8000dbc <__aeabi_fmul>
 80031ba:	4603      	mov	r3, r0
 80031bc:	4619      	mov	r1, r3
 80031be:	4620      	mov	r0, r4
 80031c0:	f7fd fcf4 	bl	8000bac <__addsf3>
 80031c4:	4603      	mov	r3, r0
 80031c6:	461a      	mov	r2, r3
 80031c8:	4b2c      	ldr	r3, [pc, #176]	; (800327c <_Z10Update_PIDv+0x290>)
 80031ca:	601a      	str	r2, [r3, #0]
  PID_Yaw_y   = (PID_Yaw_xw_diff   * Yaw_PID_k[0]   * 10) + Yaw_I_Sum   + ((PID_Yaw_xw_diff   - Yaw_D_old  ) * Yaw_PID_k[2]   * 100);
 80031cc:	4b21      	ldr	r3, [pc, #132]	; (8003254 <_Z10Update_PIDv+0x268>)
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	4a21      	ldr	r2, [pc, #132]	; (8003258 <_Z10Update_PIDv+0x26c>)
 80031d2:	6812      	ldr	r2, [r2, #0]
 80031d4:	4611      	mov	r1, r2
 80031d6:	4618      	mov	r0, r3
 80031d8:	f7fd fdf0 	bl	8000dbc <__aeabi_fmul>
 80031dc:	4603      	mov	r3, r0
 80031de:	4922      	ldr	r1, [pc, #136]	; (8003268 <_Z10Update_PIDv+0x27c>)
 80031e0:	4618      	mov	r0, r3
 80031e2:	f7fd fdeb 	bl	8000dbc <__aeabi_fmul>
 80031e6:	4603      	mov	r3, r0
 80031e8:	461a      	mov	r2, r3
 80031ea:	4b1c      	ldr	r3, [pc, #112]	; (800325c <_Z10Update_PIDv+0x270>)
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	4619      	mov	r1, r3
 80031f0:	4610      	mov	r0, r2
 80031f2:	f7fd fcdb 	bl	8000bac <__addsf3>
 80031f6:	4603      	mov	r3, r0
 80031f8:	461c      	mov	r4, r3
 80031fa:	4b17      	ldr	r3, [pc, #92]	; (8003258 <_Z10Update_PIDv+0x26c>)
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	4a20      	ldr	r2, [pc, #128]	; (8003280 <_Z10Update_PIDv+0x294>)
 8003200:	6812      	ldr	r2, [r2, #0]
 8003202:	4611      	mov	r1, r2
 8003204:	4618      	mov	r0, r3
 8003206:	f7fd fccf 	bl	8000ba8 <__aeabi_fsub>
 800320a:	4603      	mov	r3, r0
 800320c:	461a      	mov	r2, r3
 800320e:	4b11      	ldr	r3, [pc, #68]	; (8003254 <_Z10Update_PIDv+0x268>)
 8003210:	689b      	ldr	r3, [r3, #8]
 8003212:	4619      	mov	r1, r3
 8003214:	4610      	mov	r0, r2
 8003216:	f7fd fdd1 	bl	8000dbc <__aeabi_fmul>
 800321a:	4603      	mov	r3, r0
 800321c:	4914      	ldr	r1, [pc, #80]	; (8003270 <_Z10Update_PIDv+0x284>)
 800321e:	4618      	mov	r0, r3
 8003220:	f7fd fdcc 	bl	8000dbc <__aeabi_fmul>
 8003224:	4603      	mov	r3, r0
 8003226:	4619      	mov	r1, r3
 8003228:	4620      	mov	r0, r4
 800322a:	f7fd fcbf 	bl	8000bac <__addsf3>
 800322e:	4603      	mov	r3, r0
 8003230:	461a      	mov	r2, r3
 8003232:	4b14      	ldr	r3, [pc, #80]	; (8003284 <_Z10Update_PIDv+0x298>)
 8003234:	601a      	str	r2, [r3, #0]

  Pitch_D_old = PID_Pitch_xw_diff;
 8003236:	4b02      	ldr	r3, [pc, #8]	; (8003240 <_Z10Update_PIDv+0x254>)
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	e025      	b.n	8003288 <_Z10Update_PIDv+0x29c>
 800323c:	20000500 	.word	0x20000500
 8003240:	200004a8 	.word	0x200004a8
 8003244:	20000524 	.word	0x20000524
 8003248:	2000050c 	.word	0x2000050c
 800324c:	200004ac 	.word	0x200004ac
 8003250:	20000528 	.word	0x20000528
 8003254:	20000518 	.word	0x20000518
 8003258:	200004b0 	.word	0x200004b0
 800325c:	2000052c 	.word	0x2000052c
 8003260:	43fa0000 	.word	0x43fa0000
 8003264:	c3fa0000 	.word	0xc3fa0000
 8003268:	41200000 	.word	0x41200000
 800326c:	20000530 	.word	0x20000530
 8003270:	42c80000 	.word	0x42c80000
 8003274:	200004b4 	.word	0x200004b4
 8003278:	20000534 	.word	0x20000534
 800327c:	200004b8 	.word	0x200004b8
 8003280:	20000538 	.word	0x20000538
 8003284:	200004bc 	.word	0x200004bc
 8003288:	4a2a      	ldr	r2, [pc, #168]	; (8003334 <_Z10Update_PIDv+0x348>)
 800328a:	6013      	str	r3, [r2, #0]
  Roll_D_old  = PID_Roll_xw_diff ;
 800328c:	4b2a      	ldr	r3, [pc, #168]	; (8003338 <_Z10Update_PIDv+0x34c>)
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	4a2a      	ldr	r2, [pc, #168]	; (800333c <_Z10Update_PIDv+0x350>)
 8003292:	6013      	str	r3, [r2, #0]
  Yaw_D_old   = PID_Yaw_xw_diff  ;
 8003294:	4b2a      	ldr	r3, [pc, #168]	; (8003340 <_Z10Update_PIDv+0x354>)
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	4a2a      	ldr	r2, [pc, #168]	; (8003344 <_Z10Update_PIDv+0x358>)
 800329a:	6013      	str	r3, [r2, #0]

  if (PID_Pitch_y > 500 ) PID_Pitch_y = 500 ;
 800329c:	4b2a      	ldr	r3, [pc, #168]	; (8003348 <_Z10Update_PIDv+0x35c>)
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	492a      	ldr	r1, [pc, #168]	; (800334c <_Z10Update_PIDv+0x360>)
 80032a2:	4618      	mov	r0, r3
 80032a4:	f7fd ff46 	bl	8001134 <__aeabi_fcmpgt>
 80032a8:	4603      	mov	r3, r0
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d002      	beq.n	80032b4 <_Z10Update_PIDv+0x2c8>
 80032ae:	4b26      	ldr	r3, [pc, #152]	; (8003348 <_Z10Update_PIDv+0x35c>)
 80032b0:	4a26      	ldr	r2, [pc, #152]	; (800334c <_Z10Update_PIDv+0x360>)
 80032b2:	601a      	str	r2, [r3, #0]
  if (PID_Roll_y  > 500 ) PID_Roll_y  = 500 ;
 80032b4:	4b26      	ldr	r3, [pc, #152]	; (8003350 <_Z10Update_PIDv+0x364>)
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	4924      	ldr	r1, [pc, #144]	; (800334c <_Z10Update_PIDv+0x360>)
 80032ba:	4618      	mov	r0, r3
 80032bc:	f7fd ff3a 	bl	8001134 <__aeabi_fcmpgt>
 80032c0:	4603      	mov	r3, r0
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d002      	beq.n	80032cc <_Z10Update_PIDv+0x2e0>
 80032c6:	4b22      	ldr	r3, [pc, #136]	; (8003350 <_Z10Update_PIDv+0x364>)
 80032c8:	4a20      	ldr	r2, [pc, #128]	; (800334c <_Z10Update_PIDv+0x360>)
 80032ca:	601a      	str	r2, [r3, #0]
  if (PID_Yaw_y   > 500 ) PID_Yaw_y   = 500 ;
 80032cc:	4b21      	ldr	r3, [pc, #132]	; (8003354 <_Z10Update_PIDv+0x368>)
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	491e      	ldr	r1, [pc, #120]	; (800334c <_Z10Update_PIDv+0x360>)
 80032d2:	4618      	mov	r0, r3
 80032d4:	f7fd ff2e 	bl	8001134 <__aeabi_fcmpgt>
 80032d8:	4603      	mov	r3, r0
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d002      	beq.n	80032e4 <_Z10Update_PIDv+0x2f8>
 80032de:	4b1d      	ldr	r3, [pc, #116]	; (8003354 <_Z10Update_PIDv+0x368>)
 80032e0:	4a1a      	ldr	r2, [pc, #104]	; (800334c <_Z10Update_PIDv+0x360>)
 80032e2:	601a      	str	r2, [r3, #0]
  if (PID_Pitch_y < -500) PID_Pitch_y = -500;
 80032e4:	4b18      	ldr	r3, [pc, #96]	; (8003348 <_Z10Update_PIDv+0x35c>)
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	491b      	ldr	r1, [pc, #108]	; (8003358 <_Z10Update_PIDv+0x36c>)
 80032ea:	4618      	mov	r0, r3
 80032ec:	f7fd ff04 	bl	80010f8 <__aeabi_fcmplt>
 80032f0:	4603      	mov	r3, r0
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d002      	beq.n	80032fc <_Z10Update_PIDv+0x310>
 80032f6:	4b14      	ldr	r3, [pc, #80]	; (8003348 <_Z10Update_PIDv+0x35c>)
 80032f8:	4a17      	ldr	r2, [pc, #92]	; (8003358 <_Z10Update_PIDv+0x36c>)
 80032fa:	601a      	str	r2, [r3, #0]
  if (PID_Roll_y  < -500) PID_Roll_y  = -500;
 80032fc:	4b14      	ldr	r3, [pc, #80]	; (8003350 <_Z10Update_PIDv+0x364>)
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	4915      	ldr	r1, [pc, #84]	; (8003358 <_Z10Update_PIDv+0x36c>)
 8003302:	4618      	mov	r0, r3
 8003304:	f7fd fef8 	bl	80010f8 <__aeabi_fcmplt>
 8003308:	4603      	mov	r3, r0
 800330a:	2b00      	cmp	r3, #0
 800330c:	d002      	beq.n	8003314 <_Z10Update_PIDv+0x328>
 800330e:	4b10      	ldr	r3, [pc, #64]	; (8003350 <_Z10Update_PIDv+0x364>)
 8003310:	4a11      	ldr	r2, [pc, #68]	; (8003358 <_Z10Update_PIDv+0x36c>)
 8003312:	601a      	str	r2, [r3, #0]
  if (PID_Yaw_y   < -500) PID_Yaw_y   = -500;
 8003314:	4b0f      	ldr	r3, [pc, #60]	; (8003354 <_Z10Update_PIDv+0x368>)
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	490f      	ldr	r1, [pc, #60]	; (8003358 <_Z10Update_PIDv+0x36c>)
 800331a:	4618      	mov	r0, r3
 800331c:	f7fd feec 	bl	80010f8 <__aeabi_fcmplt>
 8003320:	4603      	mov	r3, r0
 8003322:	2b00      	cmp	r3, #0
 8003324:	d100      	bne.n	8003328 <_Z10Update_PIDv+0x33c>
}
 8003326:	e002      	b.n	800332e <_Z10Update_PIDv+0x342>
  if (PID_Yaw_y   < -500) PID_Yaw_y   = -500;
 8003328:	4b0a      	ldr	r3, [pc, #40]	; (8003354 <_Z10Update_PIDv+0x368>)
 800332a:	4a0b      	ldr	r2, [pc, #44]	; (8003358 <_Z10Update_PIDv+0x36c>)
 800332c:	601a      	str	r2, [r3, #0]
}
 800332e:	bf00      	nop
 8003330:	bd98      	pop	{r3, r4, r7, pc}
 8003332:	bf00      	nop
 8003334:	20000530 	.word	0x20000530
 8003338:	200004ac 	.word	0x200004ac
 800333c:	20000534 	.word	0x20000534
 8003340:	200004b0 	.word	0x200004b0
 8003344:	20000538 	.word	0x20000538
 8003348:	200004b4 	.word	0x200004b4
 800334c:	43fa0000 	.word	0x43fa0000
 8003350:	200004b8 	.word	0x200004b8
 8003354:	200004bc 	.word	0x200004bc
 8003358:	c3fa0000 	.word	0xc3fa0000

0800335c <_Z12getPIDValuesv>:

void getPIDValues()
{
 800335c:	b580      	push	{r7, lr}
 800335e:	af00      	add	r7, sp, #0
  switch (SBUS_Channels[5])
 8003360:	4b7a      	ldr	r3, [pc, #488]	; (800354c <_Z12getPIDValuesv+0x1f0>)
 8003362:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8003366:	4a7a      	ldr	r2, [pc, #488]	; (8003550 <_Z12getPIDValuesv+0x1f4>)
 8003368:	4293      	cmp	r3, r2
 800336a:	d005      	beq.n	8003378 <_Z12getPIDValuesv+0x1c>
 800336c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003370:	4293      	cmp	r3, r2
 8003372:	f000 809b 	beq.w	80034ac <_Z12getPIDValuesv+0x150>
 8003376:	e04c      	b.n	8003412 <_Z12getPIDValuesv+0xb6>
  {
  case -999:   //Pitch
    switch (SBUS_Channels[6])
 8003378:	4b74      	ldr	r3, [pc, #464]	; (800354c <_Z12getPIDValuesv+0x1f0>)
 800337a:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 800337e:	4a74      	ldr	r2, [pc, #464]	; (8003550 <_Z12getPIDValuesv+0x1f4>)
 8003380:	4293      	cmp	r3, r2
 8003382:	d02f      	beq.n	80033e4 <_Z12getPIDValuesv+0x88>
 8003384:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003388:	4293      	cmp	r3, r2
 800338a:	d115      	bne.n	80033b8 <_Z12getPIDValuesv+0x5c>
    {
    case 999:   //P
      Pitch_PID_k[0] = 0.5 + ((float)SBUS_Channels[7] / 2000);
 800338c:	4b6f      	ldr	r3, [pc, #444]	; (800354c <_Z12getPIDValuesv+0x1f0>)
 800338e:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8003392:	4618      	mov	r0, r3
 8003394:	f7fd fcbe 	bl	8000d14 <__aeabi_i2f>
 8003398:	4603      	mov	r3, r0
 800339a:	496e      	ldr	r1, [pc, #440]	; (8003554 <_Z12getPIDValuesv+0x1f8>)
 800339c:	4618      	mov	r0, r3
 800339e:	f7fd fdc1 	bl	8000f24 <__aeabi_fdiv>
 80033a2:	4603      	mov	r3, r0
 80033a4:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 80033a8:	4618      	mov	r0, r3
 80033aa:	f7fd fbff 	bl	8000bac <__addsf3>
 80033ae:	4603      	mov	r3, r0
 80033b0:	461a      	mov	r2, r3
 80033b2:	4b69      	ldr	r3, [pc, #420]	; (8003558 <_Z12getPIDValuesv+0x1fc>)
 80033b4:	601a      	str	r2, [r3, #0]
      break;
 80033b6:	e02b      	b.n	8003410 <_Z12getPIDValuesv+0xb4>
    default:     //I
      Pitch_PID_k[1] = 0.5 + ((float)SBUS_Channels[7] / 2000);
 80033b8:	4b64      	ldr	r3, [pc, #400]	; (800354c <_Z12getPIDValuesv+0x1f0>)
 80033ba:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80033be:	4618      	mov	r0, r3
 80033c0:	f7fd fca8 	bl	8000d14 <__aeabi_i2f>
 80033c4:	4603      	mov	r3, r0
 80033c6:	4963      	ldr	r1, [pc, #396]	; (8003554 <_Z12getPIDValuesv+0x1f8>)
 80033c8:	4618      	mov	r0, r3
 80033ca:	f7fd fdab 	bl	8000f24 <__aeabi_fdiv>
 80033ce:	4603      	mov	r3, r0
 80033d0:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 80033d4:	4618      	mov	r0, r3
 80033d6:	f7fd fbe9 	bl	8000bac <__addsf3>
 80033da:	4603      	mov	r3, r0
 80033dc:	461a      	mov	r2, r3
 80033de:	4b5e      	ldr	r3, [pc, #376]	; (8003558 <_Z12getPIDValuesv+0x1fc>)
 80033e0:	605a      	str	r2, [r3, #4]
      break;
 80033e2:	e015      	b.n	8003410 <_Z12getPIDValuesv+0xb4>
    case -999:  //D
      Pitch_PID_k[2] = 0.5 + ((float)SBUS_Channels[7] / 2000);
 80033e4:	4b59      	ldr	r3, [pc, #356]	; (800354c <_Z12getPIDValuesv+0x1f0>)
 80033e6:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80033ea:	4618      	mov	r0, r3
 80033ec:	f7fd fc92 	bl	8000d14 <__aeabi_i2f>
 80033f0:	4603      	mov	r3, r0
 80033f2:	4958      	ldr	r1, [pc, #352]	; (8003554 <_Z12getPIDValuesv+0x1f8>)
 80033f4:	4618      	mov	r0, r3
 80033f6:	f7fd fd95 	bl	8000f24 <__aeabi_fdiv>
 80033fa:	4603      	mov	r3, r0
 80033fc:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8003400:	4618      	mov	r0, r3
 8003402:	f7fd fbd3 	bl	8000bac <__addsf3>
 8003406:	4603      	mov	r3, r0
 8003408:	461a      	mov	r2, r3
 800340a:	4b53      	ldr	r3, [pc, #332]	; (8003558 <_Z12getPIDValuesv+0x1fc>)
 800340c:	609a      	str	r2, [r3, #8]
      break;
 800340e:	bf00      	nop
  }
    break;
 8003410:	e099      	b.n	8003546 <_Z12getPIDValuesv+0x1ea>
  default:     //Roll
    switch (SBUS_Channels[6])
 8003412:	4b4e      	ldr	r3, [pc, #312]	; (800354c <_Z12getPIDValuesv+0x1f0>)
 8003414:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8003418:	4a4d      	ldr	r2, [pc, #308]	; (8003550 <_Z12getPIDValuesv+0x1f4>)
 800341a:	4293      	cmp	r3, r2
 800341c:	d02f      	beq.n	800347e <_Z12getPIDValuesv+0x122>
 800341e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003422:	4293      	cmp	r3, r2
 8003424:	d115      	bne.n	8003452 <_Z12getPIDValuesv+0xf6>
    {
    case 999:   //P
      Roll_PID_k[0] = 0.5 + ((float)SBUS_Channels[7] / 2000);
 8003426:	4b49      	ldr	r3, [pc, #292]	; (800354c <_Z12getPIDValuesv+0x1f0>)
 8003428:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800342c:	4618      	mov	r0, r3
 800342e:	f7fd fc71 	bl	8000d14 <__aeabi_i2f>
 8003432:	4603      	mov	r3, r0
 8003434:	4947      	ldr	r1, [pc, #284]	; (8003554 <_Z12getPIDValuesv+0x1f8>)
 8003436:	4618      	mov	r0, r3
 8003438:	f7fd fd74 	bl	8000f24 <__aeabi_fdiv>
 800343c:	4603      	mov	r3, r0
 800343e:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8003442:	4618      	mov	r0, r3
 8003444:	f7fd fbb2 	bl	8000bac <__addsf3>
 8003448:	4603      	mov	r3, r0
 800344a:	461a      	mov	r2, r3
 800344c:	4b43      	ldr	r3, [pc, #268]	; (800355c <_Z12getPIDValuesv+0x200>)
 800344e:	601a      	str	r2, [r3, #0]
      break;
 8003450:	e02b      	b.n	80034aa <_Z12getPIDValuesv+0x14e>
    default:     //I
      Roll_PID_k[1] = 0.5 + ((float)SBUS_Channels[7] / 2000);
 8003452:	4b3e      	ldr	r3, [pc, #248]	; (800354c <_Z12getPIDValuesv+0x1f0>)
 8003454:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8003458:	4618      	mov	r0, r3
 800345a:	f7fd fc5b 	bl	8000d14 <__aeabi_i2f>
 800345e:	4603      	mov	r3, r0
 8003460:	493c      	ldr	r1, [pc, #240]	; (8003554 <_Z12getPIDValuesv+0x1f8>)
 8003462:	4618      	mov	r0, r3
 8003464:	f7fd fd5e 	bl	8000f24 <__aeabi_fdiv>
 8003468:	4603      	mov	r3, r0
 800346a:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800346e:	4618      	mov	r0, r3
 8003470:	f7fd fb9c 	bl	8000bac <__addsf3>
 8003474:	4603      	mov	r3, r0
 8003476:	461a      	mov	r2, r3
 8003478:	4b38      	ldr	r3, [pc, #224]	; (800355c <_Z12getPIDValuesv+0x200>)
 800347a:	605a      	str	r2, [r3, #4]
      break;
 800347c:	e015      	b.n	80034aa <_Z12getPIDValuesv+0x14e>
    case -999:  //D
      Roll_PID_k[2] = 0.5 + ((float)SBUS_Channels[7] / 2000);
 800347e:	4b33      	ldr	r3, [pc, #204]	; (800354c <_Z12getPIDValuesv+0x1f0>)
 8003480:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8003484:	4618      	mov	r0, r3
 8003486:	f7fd fc45 	bl	8000d14 <__aeabi_i2f>
 800348a:	4603      	mov	r3, r0
 800348c:	4931      	ldr	r1, [pc, #196]	; (8003554 <_Z12getPIDValuesv+0x1f8>)
 800348e:	4618      	mov	r0, r3
 8003490:	f7fd fd48 	bl	8000f24 <__aeabi_fdiv>
 8003494:	4603      	mov	r3, r0
 8003496:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800349a:	4618      	mov	r0, r3
 800349c:	f7fd fb86 	bl	8000bac <__addsf3>
 80034a0:	4603      	mov	r3, r0
 80034a2:	461a      	mov	r2, r3
 80034a4:	4b2d      	ldr	r3, [pc, #180]	; (800355c <_Z12getPIDValuesv+0x200>)
 80034a6:	609a      	str	r2, [r3, #8]
      break;
 80034a8:	bf00      	nop
  }
    break;
 80034aa:	e04c      	b.n	8003546 <_Z12getPIDValuesv+0x1ea>
  case 999:  //Yaw
    switch (SBUS_Channels[6])
 80034ac:	4b27      	ldr	r3, [pc, #156]	; (800354c <_Z12getPIDValuesv+0x1f0>)
 80034ae:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80034b2:	4a27      	ldr	r2, [pc, #156]	; (8003550 <_Z12getPIDValuesv+0x1f4>)
 80034b4:	4293      	cmp	r3, r2
 80034b6:	d02f      	beq.n	8003518 <_Z12getPIDValuesv+0x1bc>
 80034b8:	f240 32e7 	movw	r2, #999	; 0x3e7
 80034bc:	4293      	cmp	r3, r2
 80034be:	d115      	bne.n	80034ec <_Z12getPIDValuesv+0x190>
    {
    case 999:   //P
      Yaw_PID_k[0] = 0.5 + ((float)SBUS_Channels[7] / 2000);
 80034c0:	4b22      	ldr	r3, [pc, #136]	; (800354c <_Z12getPIDValuesv+0x1f0>)
 80034c2:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80034c6:	4618      	mov	r0, r3
 80034c8:	f7fd fc24 	bl	8000d14 <__aeabi_i2f>
 80034cc:	4603      	mov	r3, r0
 80034ce:	4921      	ldr	r1, [pc, #132]	; (8003554 <_Z12getPIDValuesv+0x1f8>)
 80034d0:	4618      	mov	r0, r3
 80034d2:	f7fd fd27 	bl	8000f24 <__aeabi_fdiv>
 80034d6:	4603      	mov	r3, r0
 80034d8:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 80034dc:	4618      	mov	r0, r3
 80034de:	f7fd fb65 	bl	8000bac <__addsf3>
 80034e2:	4603      	mov	r3, r0
 80034e4:	461a      	mov	r2, r3
 80034e6:	4b1e      	ldr	r3, [pc, #120]	; (8003560 <_Z12getPIDValuesv+0x204>)
 80034e8:	601a      	str	r2, [r3, #0]
      break;
 80034ea:	e02b      	b.n	8003544 <_Z12getPIDValuesv+0x1e8>
    default:     //I
      Yaw_PID_k[1] = 0.5 + ((float)SBUS_Channels[7] / 2000);
 80034ec:	4b17      	ldr	r3, [pc, #92]	; (800354c <_Z12getPIDValuesv+0x1f0>)
 80034ee:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80034f2:	4618      	mov	r0, r3
 80034f4:	f7fd fc0e 	bl	8000d14 <__aeabi_i2f>
 80034f8:	4603      	mov	r3, r0
 80034fa:	4916      	ldr	r1, [pc, #88]	; (8003554 <_Z12getPIDValuesv+0x1f8>)
 80034fc:	4618      	mov	r0, r3
 80034fe:	f7fd fd11 	bl	8000f24 <__aeabi_fdiv>
 8003502:	4603      	mov	r3, r0
 8003504:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8003508:	4618      	mov	r0, r3
 800350a:	f7fd fb4f 	bl	8000bac <__addsf3>
 800350e:	4603      	mov	r3, r0
 8003510:	461a      	mov	r2, r3
 8003512:	4b13      	ldr	r3, [pc, #76]	; (8003560 <_Z12getPIDValuesv+0x204>)
 8003514:	605a      	str	r2, [r3, #4]
      break;
 8003516:	e015      	b.n	8003544 <_Z12getPIDValuesv+0x1e8>
    case -999:  //D
      Yaw_PID_k[2] = 0.5 + ((float)SBUS_Channels[7] / 2000);
 8003518:	4b0c      	ldr	r3, [pc, #48]	; (800354c <_Z12getPIDValuesv+0x1f0>)
 800351a:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800351e:	4618      	mov	r0, r3
 8003520:	f7fd fbf8 	bl	8000d14 <__aeabi_i2f>
 8003524:	4603      	mov	r3, r0
 8003526:	490b      	ldr	r1, [pc, #44]	; (8003554 <_Z12getPIDValuesv+0x1f8>)
 8003528:	4618      	mov	r0, r3
 800352a:	f7fd fcfb 	bl	8000f24 <__aeabi_fdiv>
 800352e:	4603      	mov	r3, r0
 8003530:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8003534:	4618      	mov	r0, r3
 8003536:	f7fd fb39 	bl	8000bac <__addsf3>
 800353a:	4603      	mov	r3, r0
 800353c:	461a      	mov	r2, r3
 800353e:	4b08      	ldr	r3, [pc, #32]	; (8003560 <_Z12getPIDValuesv+0x204>)
 8003540:	609a      	str	r2, [r3, #8]
      break;
 8003542:	bf00      	nop
    }
    break;
 8003544:	bf00      	nop
  }
}
 8003546:	bf00      	nop
 8003548:	bd80      	pop	{r7, pc}
 800354a:	bf00      	nop
 800354c:	2000061c 	.word	0x2000061c
 8003550:	fffffc19 	.word	0xfffffc19
 8003554:	44fa0000 	.word	0x44fa0000
 8003558:	20000500 	.word	0x20000500
 800355c:	2000050c 	.word	0x2000050c
 8003560:	20000518 	.word	0x20000518

08003564 <_Z27MPU6050_GetOriginQuaternionv>:

void MPU6050_GetOriginQuaternion()
{
 8003564:	b480      	push	{r7}
 8003566:	af00      	add	r7, sp, #0
  OriginQuaternion[0] = MPUoutputQuaternion[0];
 8003568:	4b09      	ldr	r3, [pc, #36]	; (8003590 <_Z27MPU6050_GetOriginQuaternionv+0x2c>)
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	4a09      	ldr	r2, [pc, #36]	; (8003594 <_Z27MPU6050_GetOriginQuaternionv+0x30>)
 800356e:	6013      	str	r3, [r2, #0]
  OriginQuaternion[1] = MPUoutputQuaternion[1];
 8003570:	4b07      	ldr	r3, [pc, #28]	; (8003590 <_Z27MPU6050_GetOriginQuaternionv+0x2c>)
 8003572:	685b      	ldr	r3, [r3, #4]
 8003574:	4a07      	ldr	r2, [pc, #28]	; (8003594 <_Z27MPU6050_GetOriginQuaternionv+0x30>)
 8003576:	6053      	str	r3, [r2, #4]
  OriginQuaternion[2] = MPUoutputQuaternion[2];
 8003578:	4b05      	ldr	r3, [pc, #20]	; (8003590 <_Z27MPU6050_GetOriginQuaternionv+0x2c>)
 800357a:	689b      	ldr	r3, [r3, #8]
 800357c:	4a05      	ldr	r2, [pc, #20]	; (8003594 <_Z27MPU6050_GetOriginQuaternionv+0x30>)
 800357e:	6093      	str	r3, [r2, #8]
  OriginQuaternion[3] = MPUoutputQuaternion[3];
 8003580:	4b03      	ldr	r3, [pc, #12]	; (8003590 <_Z27MPU6050_GetOriginQuaternionv+0x2c>)
 8003582:	68db      	ldr	r3, [r3, #12]
 8003584:	4a03      	ldr	r2, [pc, #12]	; (8003594 <_Z27MPU6050_GetOriginQuaternionv+0x30>)
 8003586:	60d3      	str	r3, [r2, #12]
}
 8003588:	bf00      	nop
 800358a:	46bd      	mov	sp, r7
 800358c:	bc80      	pop	{r7}
 800358e:	4770      	bx	lr
 8003590:	200004c0 	.word	0x200004c0
 8003594:	200004d0 	.word	0x200004d0

08003598 <_Z17QuaternionProductPfS_>:
 * @param q1 first Quaternion
 * @param q2 second Quaternion
 * @return float product-Quaternion
 */
float *QuaternionProduct(float *q1, float *q2)
{
 8003598:	b590      	push	{r4, r7, lr}
 800359a:	b083      	sub	sp, #12
 800359c:	af00      	add	r7, sp, #0
 800359e:	6078      	str	r0, [r7, #4]
 80035a0:	6039      	str	r1, [r7, #0]
  static float q3[4];
  q3[0] = (q1[0] * q2[0]) - (q1[1] * q2[1]) - (q1[2] * q2[2]) - (q1[3] * q2[3]);
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681a      	ldr	r2, [r3, #0]
 80035a6:	683b      	ldr	r3, [r7, #0]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	4619      	mov	r1, r3
 80035ac:	4610      	mov	r0, r2
 80035ae:	f7fd fc05 	bl	8000dbc <__aeabi_fmul>
 80035b2:	4603      	mov	r3, r0
 80035b4:	461c      	mov	r4, r3
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	3304      	adds	r3, #4
 80035ba:	681a      	ldr	r2, [r3, #0]
 80035bc:	683b      	ldr	r3, [r7, #0]
 80035be:	3304      	adds	r3, #4
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	4619      	mov	r1, r3
 80035c4:	4610      	mov	r0, r2
 80035c6:	f7fd fbf9 	bl	8000dbc <__aeabi_fmul>
 80035ca:	4603      	mov	r3, r0
 80035cc:	4619      	mov	r1, r3
 80035ce:	4620      	mov	r0, r4
 80035d0:	f7fd faea 	bl	8000ba8 <__aeabi_fsub>
 80035d4:	4603      	mov	r3, r0
 80035d6:	461c      	mov	r4, r3
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	3308      	adds	r3, #8
 80035dc:	681a      	ldr	r2, [r3, #0]
 80035de:	683b      	ldr	r3, [r7, #0]
 80035e0:	3308      	adds	r3, #8
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	4619      	mov	r1, r3
 80035e6:	4610      	mov	r0, r2
 80035e8:	f7fd fbe8 	bl	8000dbc <__aeabi_fmul>
 80035ec:	4603      	mov	r3, r0
 80035ee:	4619      	mov	r1, r3
 80035f0:	4620      	mov	r0, r4
 80035f2:	f7fd fad9 	bl	8000ba8 <__aeabi_fsub>
 80035f6:	4603      	mov	r3, r0
 80035f8:	461c      	mov	r4, r3
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	330c      	adds	r3, #12
 80035fe:	681a      	ldr	r2, [r3, #0]
 8003600:	683b      	ldr	r3, [r7, #0]
 8003602:	330c      	adds	r3, #12
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	4619      	mov	r1, r3
 8003608:	4610      	mov	r0, r2
 800360a:	f7fd fbd7 	bl	8000dbc <__aeabi_fmul>
 800360e:	4603      	mov	r3, r0
 8003610:	4619      	mov	r1, r3
 8003612:	4620      	mov	r0, r4
 8003614:	f7fd fac8 	bl	8000ba8 <__aeabi_fsub>
 8003618:	4603      	mov	r3, r0
 800361a:	461a      	mov	r2, r3
 800361c:	4b61      	ldr	r3, [pc, #388]	; (80037a4 <_Z17QuaternionProductPfS_+0x20c>)
 800361e:	601a      	str	r2, [r3, #0]
  q3[1] = (q1[0] * q2[1]) + (q1[1] * q2[0]) + (q1[2] * q2[3]) - (q1[3] * q2[2]);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681a      	ldr	r2, [r3, #0]
 8003624:	683b      	ldr	r3, [r7, #0]
 8003626:	3304      	adds	r3, #4
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	4619      	mov	r1, r3
 800362c:	4610      	mov	r0, r2
 800362e:	f7fd fbc5 	bl	8000dbc <__aeabi_fmul>
 8003632:	4603      	mov	r3, r0
 8003634:	461c      	mov	r4, r3
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	3304      	adds	r3, #4
 800363a:	681a      	ldr	r2, [r3, #0]
 800363c:	683b      	ldr	r3, [r7, #0]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	4619      	mov	r1, r3
 8003642:	4610      	mov	r0, r2
 8003644:	f7fd fbba 	bl	8000dbc <__aeabi_fmul>
 8003648:	4603      	mov	r3, r0
 800364a:	4619      	mov	r1, r3
 800364c:	4620      	mov	r0, r4
 800364e:	f7fd faad 	bl	8000bac <__addsf3>
 8003652:	4603      	mov	r3, r0
 8003654:	461c      	mov	r4, r3
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	3308      	adds	r3, #8
 800365a:	681a      	ldr	r2, [r3, #0]
 800365c:	683b      	ldr	r3, [r7, #0]
 800365e:	330c      	adds	r3, #12
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	4619      	mov	r1, r3
 8003664:	4610      	mov	r0, r2
 8003666:	f7fd fba9 	bl	8000dbc <__aeabi_fmul>
 800366a:	4603      	mov	r3, r0
 800366c:	4619      	mov	r1, r3
 800366e:	4620      	mov	r0, r4
 8003670:	f7fd fa9c 	bl	8000bac <__addsf3>
 8003674:	4603      	mov	r3, r0
 8003676:	461c      	mov	r4, r3
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	330c      	adds	r3, #12
 800367c:	681a      	ldr	r2, [r3, #0]
 800367e:	683b      	ldr	r3, [r7, #0]
 8003680:	3308      	adds	r3, #8
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	4619      	mov	r1, r3
 8003686:	4610      	mov	r0, r2
 8003688:	f7fd fb98 	bl	8000dbc <__aeabi_fmul>
 800368c:	4603      	mov	r3, r0
 800368e:	4619      	mov	r1, r3
 8003690:	4620      	mov	r0, r4
 8003692:	f7fd fa89 	bl	8000ba8 <__aeabi_fsub>
 8003696:	4603      	mov	r3, r0
 8003698:	461a      	mov	r2, r3
 800369a:	4b42      	ldr	r3, [pc, #264]	; (80037a4 <_Z17QuaternionProductPfS_+0x20c>)
 800369c:	605a      	str	r2, [r3, #4]
  q3[2] = (q1[0] * q2[2]) - (q1[1] * q2[3]) + (q1[2] * q2[0]) + (q1[3] * q2[1]);
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681a      	ldr	r2, [r3, #0]
 80036a2:	683b      	ldr	r3, [r7, #0]
 80036a4:	3308      	adds	r3, #8
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	4619      	mov	r1, r3
 80036aa:	4610      	mov	r0, r2
 80036ac:	f7fd fb86 	bl	8000dbc <__aeabi_fmul>
 80036b0:	4603      	mov	r3, r0
 80036b2:	461c      	mov	r4, r3
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	3304      	adds	r3, #4
 80036b8:	681a      	ldr	r2, [r3, #0]
 80036ba:	683b      	ldr	r3, [r7, #0]
 80036bc:	330c      	adds	r3, #12
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	4619      	mov	r1, r3
 80036c2:	4610      	mov	r0, r2
 80036c4:	f7fd fb7a 	bl	8000dbc <__aeabi_fmul>
 80036c8:	4603      	mov	r3, r0
 80036ca:	4619      	mov	r1, r3
 80036cc:	4620      	mov	r0, r4
 80036ce:	f7fd fa6b 	bl	8000ba8 <__aeabi_fsub>
 80036d2:	4603      	mov	r3, r0
 80036d4:	461c      	mov	r4, r3
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	3308      	adds	r3, #8
 80036da:	681a      	ldr	r2, [r3, #0]
 80036dc:	683b      	ldr	r3, [r7, #0]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	4619      	mov	r1, r3
 80036e2:	4610      	mov	r0, r2
 80036e4:	f7fd fb6a 	bl	8000dbc <__aeabi_fmul>
 80036e8:	4603      	mov	r3, r0
 80036ea:	4619      	mov	r1, r3
 80036ec:	4620      	mov	r0, r4
 80036ee:	f7fd fa5d 	bl	8000bac <__addsf3>
 80036f2:	4603      	mov	r3, r0
 80036f4:	461c      	mov	r4, r3
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	330c      	adds	r3, #12
 80036fa:	681a      	ldr	r2, [r3, #0]
 80036fc:	683b      	ldr	r3, [r7, #0]
 80036fe:	3304      	adds	r3, #4
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	4619      	mov	r1, r3
 8003704:	4610      	mov	r0, r2
 8003706:	f7fd fb59 	bl	8000dbc <__aeabi_fmul>
 800370a:	4603      	mov	r3, r0
 800370c:	4619      	mov	r1, r3
 800370e:	4620      	mov	r0, r4
 8003710:	f7fd fa4c 	bl	8000bac <__addsf3>
 8003714:	4603      	mov	r3, r0
 8003716:	461a      	mov	r2, r3
 8003718:	4b22      	ldr	r3, [pc, #136]	; (80037a4 <_Z17QuaternionProductPfS_+0x20c>)
 800371a:	609a      	str	r2, [r3, #8]
  q3[3] = (q1[0] * q2[3]) + (q1[1] * q2[2]) - (q1[2] * q2[1]) + (q1[3] * q2[0]);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681a      	ldr	r2, [r3, #0]
 8003720:	683b      	ldr	r3, [r7, #0]
 8003722:	330c      	adds	r3, #12
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	4619      	mov	r1, r3
 8003728:	4610      	mov	r0, r2
 800372a:	f7fd fb47 	bl	8000dbc <__aeabi_fmul>
 800372e:	4603      	mov	r3, r0
 8003730:	461c      	mov	r4, r3
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	3304      	adds	r3, #4
 8003736:	681a      	ldr	r2, [r3, #0]
 8003738:	683b      	ldr	r3, [r7, #0]
 800373a:	3308      	adds	r3, #8
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	4619      	mov	r1, r3
 8003740:	4610      	mov	r0, r2
 8003742:	f7fd fb3b 	bl	8000dbc <__aeabi_fmul>
 8003746:	4603      	mov	r3, r0
 8003748:	4619      	mov	r1, r3
 800374a:	4620      	mov	r0, r4
 800374c:	f7fd fa2e 	bl	8000bac <__addsf3>
 8003750:	4603      	mov	r3, r0
 8003752:	461c      	mov	r4, r3
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	3308      	adds	r3, #8
 8003758:	681a      	ldr	r2, [r3, #0]
 800375a:	683b      	ldr	r3, [r7, #0]
 800375c:	3304      	adds	r3, #4
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	4619      	mov	r1, r3
 8003762:	4610      	mov	r0, r2
 8003764:	f7fd fb2a 	bl	8000dbc <__aeabi_fmul>
 8003768:	4603      	mov	r3, r0
 800376a:	4619      	mov	r1, r3
 800376c:	4620      	mov	r0, r4
 800376e:	f7fd fa1b 	bl	8000ba8 <__aeabi_fsub>
 8003772:	4603      	mov	r3, r0
 8003774:	461c      	mov	r4, r3
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	330c      	adds	r3, #12
 800377a:	681a      	ldr	r2, [r3, #0]
 800377c:	683b      	ldr	r3, [r7, #0]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	4619      	mov	r1, r3
 8003782:	4610      	mov	r0, r2
 8003784:	f7fd fb1a 	bl	8000dbc <__aeabi_fmul>
 8003788:	4603      	mov	r3, r0
 800378a:	4619      	mov	r1, r3
 800378c:	4620      	mov	r0, r4
 800378e:	f7fd fa0d 	bl	8000bac <__addsf3>
 8003792:	4603      	mov	r3, r0
 8003794:	461a      	mov	r2, r3
 8003796:	4b03      	ldr	r3, [pc, #12]	; (80037a4 <_Z17QuaternionProductPfS_+0x20c>)
 8003798:	60da      	str	r2, [r3, #12]
  return q3;
 800379a:	4b02      	ldr	r3, [pc, #8]	; (80037a4 <_Z17QuaternionProductPfS_+0x20c>)
}
 800379c:	4618      	mov	r0, r3
 800379e:	370c      	adds	r7, #12
 80037a0:	46bd      	mov	sp, r7
 80037a2:	bd90      	pop	{r4, r7, pc}
 80037a4:	2000053c 	.word	0x2000053c

080037a8 <_Z17QuaternionInversePf>:
 * 
 * @param q1 quaternion to be inversed
 * @return float inverse Quaternion
 */
float *QuaternionInverse(float *q1)
{
 80037a8:	b480      	push	{r7}
 80037aa:	b083      	sub	sp, #12
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	6078      	str	r0, [r7, #4]
  static float qi[4];
  qi[0] = q1[0];
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	4a0e      	ldr	r2, [pc, #56]	; (80037f0 <_Z17QuaternionInversePf+0x48>)
 80037b6:	6013      	str	r3, [r2, #0]
  qi[1] = q1[1] * -1;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	3304      	adds	r3, #4
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80037c2:	4a0b      	ldr	r2, [pc, #44]	; (80037f0 <_Z17QuaternionInversePf+0x48>)
 80037c4:	6053      	str	r3, [r2, #4]
  qi[2] = q1[2] * -1;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	3308      	adds	r3, #8
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80037d0:	4a07      	ldr	r2, [pc, #28]	; (80037f0 <_Z17QuaternionInversePf+0x48>)
 80037d2:	6093      	str	r3, [r2, #8]
  qi[3] = q1[3] * -1;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	330c      	adds	r3, #12
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80037de:	4a04      	ldr	r2, [pc, #16]	; (80037f0 <_Z17QuaternionInversePf+0x48>)
 80037e0:	60d3      	str	r3, [r2, #12]
  return qi;
 80037e2:	4b03      	ldr	r3, [pc, #12]	; (80037f0 <_Z17QuaternionInversePf+0x48>)
}
 80037e4:	4618      	mov	r0, r3
 80037e6:	370c      	adds	r7, #12
 80037e8:	46bd      	mov	sp, r7
 80037ea:	bc80      	pop	{r7}
 80037ec:	4770      	bx	lr
 80037ee:	bf00      	nop
 80037f0:	2000054c 	.word	0x2000054c

080037f4 <_Z15QuaternionSLERPPfS_>:
 * @param q1 start quaternion
 * @param q2 end quaternion
 * @return float interpolation quaternion
 */
float * QuaternionSLERP(float *q1, float *q2)
{
 80037f4:	b580      	push	{r7, lr}
 80037f6:	b082      	sub	sp, #8
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	6078      	str	r0, [r7, #4]
 80037fc:	6039      	str	r1, [r7, #0]
  return QuaternionProduct(&q2[0], QuaternionInverse(&q1[0]));
 80037fe:	6878      	ldr	r0, [r7, #4]
 8003800:	f7ff ffd2 	bl	80037a8 <_Z17QuaternionInversePf>
 8003804:	4603      	mov	r3, r0
 8003806:	4619      	mov	r1, r3
 8003808:	6838      	ldr	r0, [r7, #0]
 800380a:	f7ff fec5 	bl	8003598 <_Z17QuaternionProductPfS_>
 800380e:	4603      	mov	r3, r0
}
 8003810:	4618      	mov	r0, r3
 8003812:	3708      	adds	r7, #8
 8003814:	46bd      	mov	sp, r7
 8003816:	bd80      	pop	{r7, pc}

08003818 <_Z19QuaternionNormalizePf>:
 * 
 * @param q1 quaternion to be normalized
 * @return float* pointer to normalized quaternion
 */
float *QuaternionNormalize(float *q1)
{
 8003818:	b590      	push	{r4, r7, lr}
 800381a:	b085      	sub	sp, #20
 800381c:	af00      	add	r7, sp, #0
 800381e:	6078      	str	r0, [r7, #4]
  float vectorlength = sqrt((q1[0] * q1[0]) + (q1[1] * q1[1]) + (q1[2] * q1[2]) + (q1[3] * q1[3]));
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681a      	ldr	r2, [r3, #0]
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	4619      	mov	r1, r3
 800382a:	4610      	mov	r0, r2
 800382c:	f7fd fac6 	bl	8000dbc <__aeabi_fmul>
 8003830:	4603      	mov	r3, r0
 8003832:	461c      	mov	r4, r3
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	3304      	adds	r3, #4
 8003838:	681a      	ldr	r2, [r3, #0]
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	3304      	adds	r3, #4
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	4619      	mov	r1, r3
 8003842:	4610      	mov	r0, r2
 8003844:	f7fd faba 	bl	8000dbc <__aeabi_fmul>
 8003848:	4603      	mov	r3, r0
 800384a:	4619      	mov	r1, r3
 800384c:	4620      	mov	r0, r4
 800384e:	f7fd f9ad 	bl	8000bac <__addsf3>
 8003852:	4603      	mov	r3, r0
 8003854:	461c      	mov	r4, r3
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	3308      	adds	r3, #8
 800385a:	681a      	ldr	r2, [r3, #0]
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	3308      	adds	r3, #8
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	4619      	mov	r1, r3
 8003864:	4610      	mov	r0, r2
 8003866:	f7fd faa9 	bl	8000dbc <__aeabi_fmul>
 800386a:	4603      	mov	r3, r0
 800386c:	4619      	mov	r1, r3
 800386e:	4620      	mov	r0, r4
 8003870:	f7fd f99c 	bl	8000bac <__addsf3>
 8003874:	4603      	mov	r3, r0
 8003876:	461c      	mov	r4, r3
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	330c      	adds	r3, #12
 800387c:	681a      	ldr	r2, [r3, #0]
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	330c      	adds	r3, #12
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	4619      	mov	r1, r3
 8003886:	4610      	mov	r0, r2
 8003888:	f7fd fa98 	bl	8000dbc <__aeabi_fmul>
 800388c:	4603      	mov	r3, r0
 800388e:	4619      	mov	r1, r3
 8003890:	4620      	mov	r0, r4
 8003892:	f7fd f98b 	bl	8000bac <__addsf3>
 8003896:	4603      	mov	r3, r0
 8003898:	4618      	mov	r0, r3
 800389a:	f7ff fa55 	bl	8002d48 <_ZSt4sqrtf>
 800389e:	60f8      	str	r0, [r7, #12]
  static float qn[4];
  qn[0] = q1[0] / vectorlength;
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	68f9      	ldr	r1, [r7, #12]
 80038a6:	4618      	mov	r0, r3
 80038a8:	f7fd fb3c 	bl	8000f24 <__aeabi_fdiv>
 80038ac:	4603      	mov	r3, r0
 80038ae:	461a      	mov	r2, r3
 80038b0:	4b13      	ldr	r3, [pc, #76]	; (8003900 <_Z19QuaternionNormalizePf+0xe8>)
 80038b2:	601a      	str	r2, [r3, #0]
  qn[1] = q1[1] / vectorlength;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	3304      	adds	r3, #4
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	68f9      	ldr	r1, [r7, #12]
 80038bc:	4618      	mov	r0, r3
 80038be:	f7fd fb31 	bl	8000f24 <__aeabi_fdiv>
 80038c2:	4603      	mov	r3, r0
 80038c4:	461a      	mov	r2, r3
 80038c6:	4b0e      	ldr	r3, [pc, #56]	; (8003900 <_Z19QuaternionNormalizePf+0xe8>)
 80038c8:	605a      	str	r2, [r3, #4]
  qn[2] = q1[2] / vectorlength;
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	3308      	adds	r3, #8
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	68f9      	ldr	r1, [r7, #12]
 80038d2:	4618      	mov	r0, r3
 80038d4:	f7fd fb26 	bl	8000f24 <__aeabi_fdiv>
 80038d8:	4603      	mov	r3, r0
 80038da:	461a      	mov	r2, r3
 80038dc:	4b08      	ldr	r3, [pc, #32]	; (8003900 <_Z19QuaternionNormalizePf+0xe8>)
 80038de:	609a      	str	r2, [r3, #8]
  qn[3] = q1[3] / vectorlength;
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	330c      	adds	r3, #12
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	68f9      	ldr	r1, [r7, #12]
 80038e8:	4618      	mov	r0, r3
 80038ea:	f7fd fb1b 	bl	8000f24 <__aeabi_fdiv>
 80038ee:	4603      	mov	r3, r0
 80038f0:	461a      	mov	r2, r3
 80038f2:	4b03      	ldr	r3, [pc, #12]	; (8003900 <_Z19QuaternionNormalizePf+0xe8>)
 80038f4:	60da      	str	r2, [r3, #12]
  return qn;
 80038f6:	4b02      	ldr	r3, [pc, #8]	; (8003900 <_Z19QuaternionNormalizePf+0xe8>)
 80038f8:	4618      	mov	r0, r3
 80038fa:	3714      	adds	r7, #20
 80038fc:	46bd      	mov	sp, r7
 80038fe:	bd90      	pop	{r4, r7, pc}
 8003900:	2000055c 	.word	0x2000055c

08003904 <_Z16SBUS_RecieveBitsv>:
uint8_t SBUSNewPackage = false;



void SBUS_RecieveBits()
{
 8003904:	b580      	push	{r7, lr}
 8003906:	b082      	sub	sp, #8
 8003908:	af00      	add	r7, sp, #0
  //collect bits:

  TIM4->CCR1 = (uint16_t)(fastPPM_MinTime + 500 + ((float)SBUS_Channels[2] / 2));
 800390a:	4b2c      	ldr	r3, [pc, #176]	; (80039bc <_Z16SBUS_RecieveBitsv+0xb8>)
 800390c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8003910:	4618      	mov	r0, r3
 8003912:	f7fd f9ff 	bl	8000d14 <__aeabi_i2f>
 8003916:	4603      	mov	r3, r0
 8003918:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800391c:	4618      	mov	r0, r3
 800391e:	f7fd fb01 	bl	8000f24 <__aeabi_fdiv>
 8003922:	4603      	mov	r3, r0
 8003924:	4926      	ldr	r1, [pc, #152]	; (80039c0 <_Z16SBUS_RecieveBitsv+0xbc>)
 8003926:	4618      	mov	r0, r3
 8003928:	f7fd f940 	bl	8000bac <__addsf3>
 800392c:	4603      	mov	r3, r0
 800392e:	4618      	mov	r0, r3
 8003930:	f7fd fc46 	bl	80011c0 <__aeabi_f2uiz>
 8003934:	4603      	mov	r3, r0
 8003936:	b29a      	uxth	r2, r3
 8003938:	4b22      	ldr	r3, [pc, #136]	; (80039c4 <_Z16SBUS_RecieveBitsv+0xc0>)
 800393a:	635a      	str	r2, [r3, #52]	; 0x34
  SBUS_timerCount = TIM11->CNT + SBUS_StartTimeOffset;       //get current clock count register value + time offset
 800393c:	4b22      	ldr	r3, [pc, #136]	; (80039c8 <_Z16SBUS_RecieveBitsv+0xc4>)
 800393e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003940:	b29b      	uxth	r3, r3
 8003942:	3b05      	subs	r3, #5
 8003944:	b29a      	uxth	r2, r3
 8003946:	4b21      	ldr	r3, [pc, #132]	; (80039cc <_Z16SBUS_RecieveBitsv+0xc8>)
 8003948:	801a      	strh	r2, [r3, #0]
  SBUS_RxBitString[0] = true;
 800394a:	4b21      	ldr	r3, [pc, #132]	; (80039d0 <_Z16SBUS_RecieveBitsv+0xcc>)
 800394c:	2201      	movs	r2, #1
 800394e:	701a      	strb	r2, [r3, #0]
  //HAL_GPIO_TogglePin(ONBOARD_WRITE_3_GPIO_Port, ONBOARD_WRITE_3_Pin);   //debug Pin
  for (size_t i = 1; i < SBUS_NumberOfBits; i++)
 8003950:	2301      	movs	r3, #1
 8003952:	607b      	str	r3, [r7, #4]
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	2b8f      	cmp	r3, #143	; 0x8f
 8003958:	d829      	bhi.n	80039ae <_Z16SBUS_RecieveBitsv+0xaa>
  {
    ONBOARD_WRITE_3_GPIO_Port->BSRR = (uint32_t)ONBOARD_WRITE_3_Pin << 16U;
 800395a:	4b1e      	ldr	r3, [pc, #120]	; (80039d4 <_Z16SBUS_RecieveBitsv+0xd0>)
 800395c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003960:	619a      	str	r2, [r3, #24]
    SBUS_RxBitString[i] = ((ONBOARD_READ_IT_3_GPIO_Port->IDR & ONBOARD_READ_IT_3_Pin) != 0 ? true : false);     //if the pin is HIGH then the value is 1 else 0
 8003962:	4b1d      	ldr	r3, [pc, #116]	; (80039d8 <_Z16SBUS_RecieveBitsv+0xd4>)
 8003964:	691b      	ldr	r3, [r3, #16]
 8003966:	b2db      	uxtb	r3, r3
 8003968:	f003 0301 	and.w	r3, r3, #1
 800396c:	b2d9      	uxtb	r1, r3
 800396e:	4a18      	ldr	r2, [pc, #96]	; (80039d0 <_Z16SBUS_RecieveBitsv+0xcc>)
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	4413      	add	r3, r2
 8003974:	460a      	mov	r2, r1
 8003976:	701a      	strb	r2, [r3, #0]
    ONBOARD_WRITE_3_GPIO_Port->BSRR = ONBOARD_WRITE_3_Pin;
 8003978:	4b16      	ldr	r3, [pc, #88]	; (80039d4 <_Z16SBUS_RecieveBitsv+0xd0>)
 800397a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800397e:	619a      	str	r2, [r3, #24]
    while ((TIM11->CNT - SBUS_timerCount) < 10)
 8003980:	4b11      	ldr	r3, [pc, #68]	; (80039c8 <_Z16SBUS_RecieveBitsv+0xc4>)
 8003982:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003984:	4a11      	ldr	r2, [pc, #68]	; (80039cc <_Z16SBUS_RecieveBitsv+0xc8>)
 8003986:	8812      	ldrh	r2, [r2, #0]
 8003988:	1a9b      	subs	r3, r3, r2
 800398a:	2b09      	cmp	r3, #9
 800398c:	bf94      	ite	ls
 800398e:	2301      	movls	r3, #1
 8003990:	2300      	movhi	r3, #0
 8003992:	b2db      	uxtb	r3, r3
 8003994:	2b00      	cmp	r3, #0
 8003996:	d000      	beq.n	800399a <_Z16SBUS_RecieveBitsv+0x96>
 8003998:	e7f2      	b.n	8003980 <_Z16SBUS_RecieveBitsv+0x7c>
    {
    }
    SBUS_timerCount += 10;
 800399a:	4b0c      	ldr	r3, [pc, #48]	; (80039cc <_Z16SBUS_RecieveBitsv+0xc8>)
 800399c:	881b      	ldrh	r3, [r3, #0]
 800399e:	330a      	adds	r3, #10
 80039a0:	b29a      	uxth	r2, r3
 80039a2:	4b0a      	ldr	r3, [pc, #40]	; (80039cc <_Z16SBUS_RecieveBitsv+0xc8>)
 80039a4:	801a      	strh	r2, [r3, #0]
  for (size_t i = 1; i < SBUS_NumberOfBits; i++)
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	3301      	adds	r3, #1
 80039aa:	607b      	str	r3, [r7, #4]
 80039ac:	e7d2      	b.n	8003954 <_Z16SBUS_RecieveBitsv+0x50>
  }
  SBUSNewPackage = true;
 80039ae:	4b0b      	ldr	r3, [pc, #44]	; (80039dc <_Z16SBUS_RecieveBitsv+0xd8>)
 80039b0:	2201      	movs	r2, #1
 80039b2:	701a      	strb	r2, [r3, #0]
}
 80039b4:	bf00      	nop
 80039b6:	3708      	adds	r7, #8
 80039b8:	46bd      	mov	sp, r7
 80039ba:	bd80      	pop	{r7, pc}
 80039bc:	2000061c 	.word	0x2000061c
 80039c0:	44bb8000 	.word	0x44bb8000
 80039c4:	40000800 	.word	0x40000800
 80039c8:	40014800 	.word	0x40014800
 80039cc:	2000056c 	.word	0x2000056c
 80039d0:	20000570 	.word	0x20000570
 80039d4:	40020000 	.word	0x40020000
 80039d8:	40020800 	.word	0x40020800
 80039dc:	2000062d 	.word	0x2000062d

080039e0 <_Z19SBUS_PostProcessingv>:

void SBUS_PostProcessing()
{
 80039e0:	b580      	push	{r7, lr}
 80039e2:	b088      	sub	sp, #32
 80039e4:	af00      	add	r7, sp, #0
    //check validity:

  SBUS_CorruptedPackage = false;                      //reset corrupted package flag
 80039e6:	4b88      	ldr	r3, [pc, #544]	; (8003c08 <_Z19SBUS_PostProcessingv+0x228>)
 80039e8:	2200      	movs	r2, #0
 80039ea:	701a      	strb	r2, [r3, #0]
  for (size_t i = 0; i < SBUS_NumberOfBytes; i++)      //repeat for each byte
 80039ec:	2300      	movs	r3, #0
 80039ee:	61fb      	str	r3, [r7, #28]
 80039f0:	69fb      	ldr	r3, [r7, #28]
 80039f2:	2b0b      	cmp	r3, #11
 80039f4:	d85b      	bhi.n	8003aae <_Z19SBUS_PostProcessingv+0xce>
  {
    if ((SBUS_RxBitString[0 + (i * SBUS_BitsPerByte)] == true) & (SBUS_RxBitString[10 + (i * SBUS_BitsPerByte)] == false) & (SBUS_RxBitString[11 + (i * SBUS_BitsPerByte)] == false))       //check start bit, 2 stop bit
 80039f6:	69fa      	ldr	r2, [r7, #28]
 80039f8:	4613      	mov	r3, r2
 80039fa:	005b      	lsls	r3, r3, #1
 80039fc:	4413      	add	r3, r2
 80039fe:	009b      	lsls	r3, r3, #2
 8003a00:	461a      	mov	r2, r3
 8003a02:	4b82      	ldr	r3, [pc, #520]	; (8003c0c <_Z19SBUS_PostProcessingv+0x22c>)
 8003a04:	5c9b      	ldrb	r3, [r3, r2]
 8003a06:	2b01      	cmp	r3, #1
 8003a08:	bf0c      	ite	eq
 8003a0a:	2301      	moveq	r3, #1
 8003a0c:	2300      	movne	r3, #0
 8003a0e:	b2d9      	uxtb	r1, r3
 8003a10:	69fa      	ldr	r2, [r7, #28]
 8003a12:	4613      	mov	r3, r2
 8003a14:	005b      	lsls	r3, r3, #1
 8003a16:	4413      	add	r3, r2
 8003a18:	009b      	lsls	r3, r3, #2
 8003a1a:	330a      	adds	r3, #10
 8003a1c:	4a7b      	ldr	r2, [pc, #492]	; (8003c0c <_Z19SBUS_PostProcessingv+0x22c>)
 8003a1e:	5cd3      	ldrb	r3, [r2, r3]
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	bf0c      	ite	eq
 8003a24:	2301      	moveq	r3, #1
 8003a26:	2300      	movne	r3, #0
 8003a28:	b2db      	uxtb	r3, r3
 8003a2a:	400b      	ands	r3, r1
 8003a2c:	b2db      	uxtb	r3, r3
 8003a2e:	4619      	mov	r1, r3
 8003a30:	69fa      	ldr	r2, [r7, #28]
 8003a32:	4613      	mov	r3, r2
 8003a34:	005b      	lsls	r3, r3, #1
 8003a36:	4413      	add	r3, r2
 8003a38:	009b      	lsls	r3, r3, #2
 8003a3a:	330b      	adds	r3, #11
 8003a3c:	4a73      	ldr	r2, [pc, #460]	; (8003c0c <_Z19SBUS_PostProcessingv+0x22c>)
 8003a3e:	5cd3      	ldrb	r3, [r2, r3]
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	bf0c      	ite	eq
 8003a44:	2301      	moveq	r3, #1
 8003a46:	2300      	movne	r3, #0
 8003a48:	b2db      	uxtb	r3, r3
 8003a4a:	400b      	ands	r3, r1
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d027      	beq.n	8003aa0 <_Z19SBUS_PostProcessingv+0xc0>
    {
      uint8_t parityCheck = false;
 8003a50:	2300      	movs	r3, #0
 8003a52:	76fb      	strb	r3, [r7, #27]
      for (size_t x = 0; x < 8; x++)                                              //generate parity from 8 bits
 8003a54:	2300      	movs	r3, #0
 8003a56:	617b      	str	r3, [r7, #20]
 8003a58:	697b      	ldr	r3, [r7, #20]
 8003a5a:	2b07      	cmp	r3, #7
 8003a5c:	d811      	bhi.n	8003a82 <_Z19SBUS_PostProcessingv+0xa2>
      {
        parityCheck ^= SBUS_RxBitString[1 + x + (i * SBUS_BitsPerByte)];
 8003a5e:	69fa      	ldr	r2, [r7, #28]
 8003a60:	4613      	mov	r3, r2
 8003a62:	005b      	lsls	r3, r3, #1
 8003a64:	4413      	add	r3, r2
 8003a66:	009b      	lsls	r3, r3, #2
 8003a68:	461a      	mov	r2, r3
 8003a6a:	697b      	ldr	r3, [r7, #20]
 8003a6c:	4413      	add	r3, r2
 8003a6e:	3301      	adds	r3, #1
 8003a70:	4a66      	ldr	r2, [pc, #408]	; (8003c0c <_Z19SBUS_PostProcessingv+0x22c>)
 8003a72:	5cd2      	ldrb	r2, [r2, r3]
 8003a74:	7efb      	ldrb	r3, [r7, #27]
 8003a76:	4053      	eors	r3, r2
 8003a78:	76fb      	strb	r3, [r7, #27]
      for (size_t x = 0; x < 8; x++)                                              //generate parity from 8 bits
 8003a7a:	697b      	ldr	r3, [r7, #20]
 8003a7c:	3301      	adds	r3, #1
 8003a7e:	617b      	str	r3, [r7, #20]
 8003a80:	e7ea      	b.n	8003a58 <_Z19SBUS_PostProcessingv+0x78>
      }
      if (parityCheck == SBUS_RxBitString[9 + (i * SBUS_BitsPerByte)])            //if parity fails set corrupted flag
 8003a82:	69fa      	ldr	r2, [r7, #28]
 8003a84:	4613      	mov	r3, r2
 8003a86:	005b      	lsls	r3, r3, #1
 8003a88:	4413      	add	r3, r2
 8003a8a:	009b      	lsls	r3, r3, #2
 8003a8c:	3309      	adds	r3, #9
 8003a8e:	4a5f      	ldr	r2, [pc, #380]	; (8003c0c <_Z19SBUS_PostProcessingv+0x22c>)
 8003a90:	5cd3      	ldrb	r3, [r2, r3]
 8003a92:	7efa      	ldrb	r2, [r7, #27]
 8003a94:	429a      	cmp	r2, r3
 8003a96:	d106      	bne.n	8003aa6 <_Z19SBUS_PostProcessingv+0xc6>
      {
        SBUS_CorruptedPackage = true;
 8003a98:	4b5b      	ldr	r3, [pc, #364]	; (8003c08 <_Z19SBUS_PostProcessingv+0x228>)
 8003a9a:	2201      	movs	r2, #1
 8003a9c:	701a      	strb	r2, [r3, #0]
 8003a9e:	e002      	b.n	8003aa6 <_Z19SBUS_PostProcessingv+0xc6>
      }
    }
    else                                                                            //if start or stop bits fail set corrupted flag
    {
      SBUS_CorruptedPackage = true;
 8003aa0:	4b59      	ldr	r3, [pc, #356]	; (8003c08 <_Z19SBUS_PostProcessingv+0x228>)
 8003aa2:	2201      	movs	r2, #1
 8003aa4:	701a      	strb	r2, [r3, #0]
  for (size_t i = 0; i < SBUS_NumberOfBytes; i++)      //repeat for each byte
 8003aa6:	69fb      	ldr	r3, [r7, #28]
 8003aa8:	3301      	adds	r3, #1
 8003aaa:	61fb      	str	r3, [r7, #28]
 8003aac:	e7a0      	b.n	80039f0 <_Z19SBUS_PostProcessingv+0x10>
    }
  }
  SBUS_Bytes[0] = 0;
 8003aae:	4b58      	ldr	r3, [pc, #352]	; (8003c10 <_Z19SBUS_PostProcessingv+0x230>)
 8003ab0:	2200      	movs	r2, #0
 8003ab2:	701a      	strb	r2, [r3, #0]
  for (size_t i = 0; i < 8; i++)
 8003ab4:	2300      	movs	r3, #0
 8003ab6:	613b      	str	r3, [r7, #16]
 8003ab8:	693b      	ldr	r3, [r7, #16]
 8003aba:	2b07      	cmp	r3, #7
 8003abc:	d816      	bhi.n	8003aec <_Z19SBUS_PostProcessingv+0x10c>
  {
    SBUS_Bytes[0] |= SBUS_RxBitString[1 + i] << (7 - i);
 8003abe:	4b54      	ldr	r3, [pc, #336]	; (8003c10 <_Z19SBUS_PostProcessingv+0x230>)
 8003ac0:	781b      	ldrb	r3, [r3, #0]
 8003ac2:	b25a      	sxtb	r2, r3
 8003ac4:	693b      	ldr	r3, [r7, #16]
 8003ac6:	3301      	adds	r3, #1
 8003ac8:	4950      	ldr	r1, [pc, #320]	; (8003c0c <_Z19SBUS_PostProcessingv+0x22c>)
 8003aca:	5ccb      	ldrb	r3, [r1, r3]
 8003acc:	4619      	mov	r1, r3
 8003ace:	693b      	ldr	r3, [r7, #16]
 8003ad0:	f1c3 0307 	rsb	r3, r3, #7
 8003ad4:	fa01 f303 	lsl.w	r3, r1, r3
 8003ad8:	b25b      	sxtb	r3, r3
 8003ada:	4313      	orrs	r3, r2
 8003adc:	b25b      	sxtb	r3, r3
 8003ade:	b2da      	uxtb	r2, r3
 8003ae0:	4b4b      	ldr	r3, [pc, #300]	; (8003c10 <_Z19SBUS_PostProcessingv+0x230>)
 8003ae2:	701a      	strb	r2, [r3, #0]
  for (size_t i = 0; i < 8; i++)
 8003ae4:	693b      	ldr	r3, [r7, #16]
 8003ae6:	3301      	adds	r3, #1
 8003ae8:	613b      	str	r3, [r7, #16]
 8003aea:	e7e5      	b.n	8003ab8 <_Z19SBUS_PostProcessingv+0xd8>
  }
  if (SBUS_Bytes[0] != 0x0FU)
 8003aec:	4b48      	ldr	r3, [pc, #288]	; (8003c10 <_Z19SBUS_PostProcessingv+0x230>)
 8003aee:	781b      	ldrb	r3, [r3, #0]
 8003af0:	2b0f      	cmp	r3, #15
 8003af2:	d002      	beq.n	8003afa <_Z19SBUS_PostProcessingv+0x11a>
  {
    SBUS_CorruptedPackage = true;
 8003af4:	4b44      	ldr	r3, [pc, #272]	; (8003c08 <_Z19SBUS_PostProcessingv+0x228>)
 8003af6:	2201      	movs	r2, #1
 8003af8:	701a      	strb	r2, [r3, #0]
  
  

  //assemble channels:

  if (SBUS_CorruptedPackage == false)
 8003afa:	4b43      	ldr	r3, [pc, #268]	; (8003c08 <_Z19SBUS_PostProcessingv+0x228>)
 8003afc:	781b      	ldrb	r3, [r3, #0]
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d17a      	bne.n	8003bf8 <_Z19SBUS_PostProcessingv+0x218>
  {
    uint8_t byteNumber = 0;         //0 to 21
 8003b02:	2300      	movs	r3, #0
 8003b04:	73fb      	strb	r3, [r7, #15]
    uint8_t bitNumber = 0;          //0(LSB) to 7/(MSB)
 8003b06:	2300      	movs	r3, #0
 8003b08:	73bb      	strb	r3, [r7, #14]
    for (size_t i = 0; i < SBUS_NumberOfChannels; i++)
 8003b0a:	2300      	movs	r3, #0
 8003b0c:	60bb      	str	r3, [r7, #8]
 8003b0e:	68bb      	ldr	r3, [r7, #8]
 8003b10:	2b07      	cmp	r3, #7
 8003b12:	d871      	bhi.n	8003bf8 <_Z19SBUS_PostProcessingv+0x218>
    {
      uint8_t bitInChannel = 0;   //0(LSB) to 10(MSB)
 8003b14:	2300      	movs	r3, #0
 8003b16:	71fb      	strb	r3, [r7, #7]
      SBUS_TempChannels[i] = 0;
 8003b18:	4a3e      	ldr	r2, [pc, #248]	; (8003c14 <_Z19SBUS_PostProcessingv+0x234>)
 8003b1a:	68bb      	ldr	r3, [r7, #8]
 8003b1c:	2100      	movs	r1, #0
 8003b1e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
      
      while (bitInChannel <= 10)
 8003b22:	79fb      	ldrb	r3, [r7, #7]
 8003b24:	2b0a      	cmp	r3, #10
 8003b26:	d843      	bhi.n	8003bb0 <_Z19SBUS_PostProcessingv+0x1d0>
      {
        if (bitNumber <= 7)
 8003b28:	7bbb      	ldrb	r3, [r7, #14]
 8003b2a:	2b07      	cmp	r3, #7
 8003b2c:	d81a      	bhi.n	8003b64 <_Z19SBUS_PostProcessingv+0x184>
        {
          //transfer bit
          SBUS_TempChannels[i] |= SBUS_RxBitString[13 + (bitNumber) + (byteNumber * SBUS_BitsPerByte)] << bitInChannel;
 8003b2e:	4a39      	ldr	r2, [pc, #228]	; (8003c14 <_Z19SBUS_PostProcessingv+0x234>)
 8003b30:	68bb      	ldr	r3, [r7, #8]
 8003b32:	f932 1013 	ldrsh.w	r1, [r2, r3, lsl #1]
 8003b36:	7bbb      	ldrb	r3, [r7, #14]
 8003b38:	f103 000d 	add.w	r0, r3, #13
 8003b3c:	7bfa      	ldrb	r2, [r7, #15]
 8003b3e:	4613      	mov	r3, r2
 8003b40:	005b      	lsls	r3, r3, #1
 8003b42:	4413      	add	r3, r2
 8003b44:	009b      	lsls	r3, r3, #2
 8003b46:	4403      	add	r3, r0
 8003b48:	4a30      	ldr	r2, [pc, #192]	; (8003c0c <_Z19SBUS_PostProcessingv+0x22c>)
 8003b4a:	5cd3      	ldrb	r3, [r2, r3]
 8003b4c:	461a      	mov	r2, r3
 8003b4e:	79fb      	ldrb	r3, [r7, #7]
 8003b50:	fa02 f303 	lsl.w	r3, r2, r3
 8003b54:	b21b      	sxth	r3, r3
 8003b56:	430b      	orrs	r3, r1
 8003b58:	b219      	sxth	r1, r3
 8003b5a:	4a2e      	ldr	r2, [pc, #184]	; (8003c14 <_Z19SBUS_PostProcessingv+0x234>)
 8003b5c:	68bb      	ldr	r3, [r7, #8]
 8003b5e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8003b62:	e01e      	b.n	8003ba2 <_Z19SBUS_PostProcessingv+0x1c2>
        }
        else
        {
          byteNumber ++;
 8003b64:	7bfb      	ldrb	r3, [r7, #15]
 8003b66:	3301      	adds	r3, #1
 8003b68:	73fb      	strb	r3, [r7, #15]
          bitNumber = 0;
 8003b6a:	2300      	movs	r3, #0
 8003b6c:	73bb      	strb	r3, [r7, #14]
          //transfer bit
          SBUS_TempChannels[i] |= SBUS_RxBitString[13 + (bitNumber) + (byteNumber * SBUS_BitsPerByte)] << bitInChannel;
 8003b6e:	4a29      	ldr	r2, [pc, #164]	; (8003c14 <_Z19SBUS_PostProcessingv+0x234>)
 8003b70:	68bb      	ldr	r3, [r7, #8]
 8003b72:	f932 1013 	ldrsh.w	r1, [r2, r3, lsl #1]
 8003b76:	7bbb      	ldrb	r3, [r7, #14]
 8003b78:	f103 000d 	add.w	r0, r3, #13
 8003b7c:	7bfa      	ldrb	r2, [r7, #15]
 8003b7e:	4613      	mov	r3, r2
 8003b80:	005b      	lsls	r3, r3, #1
 8003b82:	4413      	add	r3, r2
 8003b84:	009b      	lsls	r3, r3, #2
 8003b86:	4403      	add	r3, r0
 8003b88:	4a20      	ldr	r2, [pc, #128]	; (8003c0c <_Z19SBUS_PostProcessingv+0x22c>)
 8003b8a:	5cd3      	ldrb	r3, [r2, r3]
 8003b8c:	461a      	mov	r2, r3
 8003b8e:	79fb      	ldrb	r3, [r7, #7]
 8003b90:	fa02 f303 	lsl.w	r3, r2, r3
 8003b94:	b21b      	sxth	r3, r3
 8003b96:	430b      	orrs	r3, r1
 8003b98:	b219      	sxth	r1, r3
 8003b9a:	4a1e      	ldr	r2, [pc, #120]	; (8003c14 <_Z19SBUS_PostProcessingv+0x234>)
 8003b9c:	68bb      	ldr	r3, [r7, #8]
 8003b9e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        }
        bitNumber ++;
 8003ba2:	7bbb      	ldrb	r3, [r7, #14]
 8003ba4:	3301      	adds	r3, #1
 8003ba6:	73bb      	strb	r3, [r7, #14]
        bitInChannel ++;
 8003ba8:	79fb      	ldrb	r3, [r7, #7]
 8003baa:	3301      	adds	r3, #1
 8003bac:	71fb      	strb	r3, [r7, #7]
      while (bitInChannel <= 10)
 8003bae:	e7b8      	b.n	8003b22 <_Z19SBUS_PostProcessingv+0x142>
      }
      
      SBUS_TempChannels[i] = ((float)(SBUS_TempChannels[i] - 1054) * ((float)-1000 / (float)821));    //map from 233, 1875 to -1000, 1000
 8003bb0:	4a18      	ldr	r2, [pc, #96]	; (8003c14 <_Z19SBUS_PostProcessingv+0x234>)
 8003bb2:	68bb      	ldr	r3, [r7, #8]
 8003bb4:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8003bb8:	f2a3 431e 	subw	r3, r3, #1054	; 0x41e
 8003bbc:	4618      	mov	r0, r3
 8003bbe:	f7fd f8a9 	bl	8000d14 <__aeabi_i2f>
 8003bc2:	4603      	mov	r3, r0
 8003bc4:	4914      	ldr	r1, [pc, #80]	; (8003c18 <_Z19SBUS_PostProcessingv+0x238>)
 8003bc6:	4618      	mov	r0, r3
 8003bc8:	f7fd f8f8 	bl	8000dbc <__aeabi_fmul>
 8003bcc:	4603      	mov	r3, r0
 8003bce:	4618      	mov	r0, r3
 8003bd0:	f7fd fad0 	bl	8001174 <__aeabi_f2iz>
 8003bd4:	4603      	mov	r3, r0
 8003bd6:	b219      	sxth	r1, r3
 8003bd8:	4a0e      	ldr	r2, [pc, #56]	; (8003c14 <_Z19SBUS_PostProcessingv+0x234>)
 8003bda:	68bb      	ldr	r3, [r7, #8]
 8003bdc:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
      SBUS_Channels[i] = SBUS_TempChannels[i];
 8003be0:	4a0c      	ldr	r2, [pc, #48]	; (8003c14 <_Z19SBUS_PostProcessingv+0x234>)
 8003be2:	68bb      	ldr	r3, [r7, #8]
 8003be4:	f932 1013 	ldrsh.w	r1, [r2, r3, lsl #1]
 8003be8:	4a0c      	ldr	r2, [pc, #48]	; (8003c1c <_Z19SBUS_PostProcessingv+0x23c>)
 8003bea:	68bb      	ldr	r3, [r7, #8]
 8003bec:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for (size_t i = 0; i < SBUS_NumberOfChannels; i++)
 8003bf0:	68bb      	ldr	r3, [r7, #8]
 8003bf2:	3301      	adds	r3, #1
 8003bf4:	60bb      	str	r3, [r7, #8]
 8003bf6:	e78a      	b.n	8003b0e <_Z19SBUS_PostProcessingv+0x12e>
    }
  }
  SBUSNewPackage = false;
 8003bf8:	4b09      	ldr	r3, [pc, #36]	; (8003c20 <_Z19SBUS_PostProcessingv+0x240>)
 8003bfa:	2200      	movs	r2, #0
 8003bfc:	701a      	strb	r2, [r3, #0]
 8003bfe:	bf00      	nop
 8003c00:	3720      	adds	r7, #32
 8003c02:	46bd      	mov	sp, r7
 8003c04:	bd80      	pop	{r7, pc}
 8003c06:	bf00      	nop
 8003c08:	2000062c 	.word	0x2000062c
 8003c0c:	20000570 	.word	0x20000570
 8003c10:	20000600 	.word	0x20000600
 8003c14:	2000060c 	.word	0x2000060c
 8003c18:	bf9be84d 	.word	0xbf9be84d
 8003c1c:	2000061c 	.word	0x2000061c
 8003c20:	2000062d 	.word	0x2000062d

08003c24 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003c24:	b580      	push	{r7, lr}
 8003c26:	b086      	sub	sp, #24
 8003c28:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003c2a:	f001 fa7b 	bl	8005124 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003c2e:	f000 f89b 	bl	8003d68 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003c32:	f000 fad7 	bl	80041e4 <_ZL12MX_GPIO_Initv>
  MX_USB_DEVICE_Init();
 8003c36:	f008 feb3 	bl	800c9a0 <MX_USB_DEVICE_Init>
  MX_ADC1_Init();
 8003c3a:	f000 f8f1 	bl	8003e20 <_ZL12MX_ADC1_Initv>
  MX_I2C1_Init();
 8003c3e:	f000 f92d 	bl	8003e9c <MX_I2C1_Init>
  MX_TIM3_Init();
 8003c42:	f000 f95f 	bl	8003f04 <_ZL12MX_TIM3_Initv>
  MX_TIM4_Init();
 8003c46:	f000 f9c5 	bl	8003fd4 <_ZL12MX_TIM4_Initv>
  MX_TIM11_Init();
 8003c4a:	f000 fa2b 	bl	80040a4 <_ZL13MX_TIM11_Initv>
  MX_TIM13_Init();
 8003c4e:	f000 fa51 	bl	80040f4 <_ZL13MX_TIM13_Initv>
  MX_TIM14_Init();
 8003c52:	f000 fa77 	bl	8004144 <_ZL13MX_TIM14_Initv>
  MX_DMA_Init();
 8003c56:	f000 fa9d 	bl	8004194 <_ZL11MX_DMA_Initv>

  


  /* Initialize interrupts */
  MX_NVIC_Init();
 8003c5a:	f000 f8d5 	bl	8003e08 <_ZL12MX_NVIC_Initv>
  /* USER CODE BEGIN 2 */



  HAL_TIM_Base_Start_IT(&htim3);
 8003c5e:	483b      	ldr	r0, [pc, #236]	; (8003d4c <main+0x128>)
 8003c60:	f005 f932 	bl	8008ec8 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim4);
 8003c64:	483a      	ldr	r0, [pc, #232]	; (8003d50 <main+0x12c>)
 8003c66:	f005 f92f 	bl	8008ec8 <HAL_TIM_Base_Start_IT>
  //HAL_TIM_Base_Start_IT(&htim14);
  //HAL_TIM_Base_Start_IT(&htim13);
  HAL_TIM_Base_Start(&htim11);
 8003c6a:	483a      	ldr	r0, [pc, #232]	; (8003d54 <main+0x130>)
 8003c6c:	f005 f8c6 	bl	8008dfc <HAL_TIM_Base_Start>

  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8003c70:	2100      	movs	r1, #0
 8003c72:	4836      	ldr	r0, [pc, #216]	; (8003d4c <main+0x128>)
 8003c74:	f005 f9e6 	bl	8009044 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8003c78:	2100      	movs	r1, #0
 8003c7a:	4835      	ldr	r0, [pc, #212]	; (8003d50 <main+0x12c>)
 8003c7c:	f005 f9e2 	bl	8009044 <HAL_TIM_PWM_Start>

  TIM4->CCR1 = fastPPM_MinTime;
 8003c80:	4b35      	ldr	r3, [pc, #212]	; (8003d58 <main+0x134>)
 8003c82:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003c86:	635a      	str	r2, [r3, #52]	; 0x34
  TIM3->CCR1 = slowPPM1_MinTime;
 8003c88:	4b34      	ldr	r3, [pc, #208]	; (8003d5c <main+0x138>)
 8003c8a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003c8e:	635a      	str	r2, [r3, #52]	; 0x34

  HAL_Delay(3000);
 8003c90:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8003c94:	f001 fab4 	bl	8005200 <HAL_Delay>

  while (SBUSNewPackage != true)
 8003c98:	4b31      	ldr	r3, [pc, #196]	; (8003d60 <main+0x13c>)
 8003c9a:	781b      	ldrb	r3, [r3, #0]
 8003c9c:	2b01      	cmp	r3, #1
 8003c9e:	d000      	beq.n	8003ca2 <main+0x7e>
 8003ca0:	e7fa      	b.n	8003c98 <main+0x74>
  {
  }

  HAL_NVIC_DisableIRQ(EXTI0_IRQn);
 8003ca2:	2006      	movs	r0, #6
 8003ca4:	f001 fdef 	bl	8005886 <HAL_NVIC_DisableIRQ>

  HAL_Delay(50);
 8003ca8:	2032      	movs	r0, #50	; 0x32
 8003caa:	f001 faa9 	bl	8005200 <HAL_Delay>
  MPU6050 mpu;
 8003cae:	463b      	mov	r3, r7
 8003cb0:	4618      	mov	r0, r3
 8003cb2:	f7fe f83d 	bl	8001d30 <_ZN7MPU6050C1Ev>
  HAL_Delay(50);
 8003cb6:	2032      	movs	r0, #50	; 0x32
 8003cb8:	f001 faa2 	bl	8005200 <HAL_Delay>
  mpu.initialize();
 8003cbc:	463b      	mov	r3, r7
 8003cbe:	4618      	mov	r0, r3
 8003cc0:	f7fe f843 	bl	8001d4a <_ZN7MPU605010initializeEv>
  HAL_Delay(50);
 8003cc4:	2032      	movs	r0, #50	; 0x32
 8003cc6:	f001 fa9b 	bl	8005200 <HAL_Delay>
  mpu.dmpInitialize();
 8003cca:	463b      	mov	r3, r7
 8003ccc:	4618      	mov	r0, r3
 8003cce:	f7fe fd79 	bl	80027c4 <_ZN7MPU605013dmpInitializeEv>
  HAL_Delay(50);
 8003cd2:	2032      	movs	r0, #50	; 0x32
 8003cd4:	f001 fa94 	bl	8005200 <HAL_Delay>


  mpu.setXGyroOffset(-169);
 8003cd8:	463b      	mov	r3, r7
 8003cda:	f06f 01a8 	mvn.w	r1, #168	; 0xa8
 8003cde:	4618      	mov	r0, r3
 8003ce0:	f7fe fa8e 	bl	8002200 <_ZN7MPU605014setXGyroOffsetEs>
  mpu.setYGyroOffset(165);
 8003ce4:	463b      	mov	r3, r7
 8003ce6:	21a5      	movs	r1, #165	; 0xa5
 8003ce8:	4618      	mov	r0, r3
 8003cea:	f7fe fa9a 	bl	8002222 <_ZN7MPU605014setYGyroOffsetEs>
  mpu.setZGyroOffset(110);
 8003cee:	463b      	mov	r3, r7
 8003cf0:	216e      	movs	r1, #110	; 0x6e
 8003cf2:	4618      	mov	r0, r3
 8003cf4:	f7fe faa6 	bl	8002244 <_ZN7MPU605014setZGyroOffsetEs>
  mpu.setXAccelOffset(4599);
 8003cf8:	463b      	mov	r3, r7
 8003cfa:	f241 11f7 	movw	r1, #4599	; 0x11f7
 8003cfe:	4618      	mov	r0, r3
 8003d00:	f7fe fa4b 	bl	800219a <_ZN7MPU605015setXAccelOffsetEs>
  mpu.setYAccelOffset(-951);
 8003d04:	463b      	mov	r3, r7
 8003d06:	4917      	ldr	r1, [pc, #92]	; (8003d64 <main+0x140>)
 8003d08:	4618      	mov	r0, r3
 8003d0a:	f7fe fa57 	bl	80021bc <_ZN7MPU605015setYAccelOffsetEs>
  mpu.setZAccelOffset(1930);
 8003d0e:	463b      	mov	r3, r7
 8003d10:	f240 718a 	movw	r1, #1930	; 0x78a
 8003d14:	4618      	mov	r0, r3
 8003d16:	f7fe fa62 	bl	80021de <_ZN7MPU605015setZAccelOffsetEs>

  HAL_Delay(50);
 8003d1a:	2032      	movs	r0, #50	; 0x32
 8003d1c:	f001 fa70 	bl	8005200 <HAL_Delay>
  mpu.setDMPEnabled(true);
 8003d20:	463b      	mov	r3, r7
 8003d22:	2101      	movs	r1, #1
 8003d24:	4618      	mov	r0, r3
 8003d26:	f7fe fa9e 	bl	8002266 <_ZN7MPU605013setDMPEnabledEb>

  HAL_Delay(2000);
 8003d2a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8003d2e:	f001 fa67 	bl	8005200 <HAL_Delay>
  MPU6050_resetFIFO();
 8003d32:	f7fd feb1 	bl	8001a98 <_Z17MPU6050_resetFIFOv>
  HAL_Delay(2);
 8003d36:	2002      	movs	r0, #2
 8003d38:	f001 fa62 	bl	8005200 <HAL_Delay>
  //MPU6050_readQuaternionBytes();

  //MPU6050_ConvertToQuaternions();


  MPU6050_GetOriginQuaternion();
 8003d3c:	f7ff fc12 	bl	8003564 <_Z27MPU6050_GetOriginQuaternionv>

  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8003d40:	2006      	movs	r0, #6
 8003d42:	f001 fd92 	bl	800586a <HAL_NVIC_EnableIRQ>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    loop();
 8003d46:	f000 fb9b 	bl	8004480 <_Z4loopv>
 8003d4a:	e7fc      	b.n	8003d46 <main+0x122>
 8003d4c:	2000078c 	.word	0x2000078c
 8003d50:	200007d4 	.word	0x200007d4
 8003d54:	2000081c 	.word	0x2000081c
 8003d58:	40000800 	.word	0x40000800
 8003d5c:	40000400 	.word	0x40000400
 8003d60:	2000062d 	.word	0x2000062d
 8003d64:	fffffc49 	.word	0xfffffc49

08003d68 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003d68:	b580      	push	{r7, lr}
 8003d6a:	b092      	sub	sp, #72	; 0x48
 8003d6c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003d6e:	f107 0318 	add.w	r3, r7, #24
 8003d72:	2230      	movs	r2, #48	; 0x30
 8003d74:	2100      	movs	r1, #0
 8003d76:	4618      	mov	r0, r3
 8003d78:	f00b fe1e 	bl	800f9b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003d7c:	1d3b      	adds	r3, r7, #4
 8003d7e:	2200      	movs	r2, #0
 8003d80:	601a      	str	r2, [r3, #0]
 8003d82:	605a      	str	r2, [r3, #4]
 8003d84:	609a      	str	r2, [r3, #8]
 8003d86:	60da      	str	r2, [r3, #12]
 8003d88:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003d8a:	2301      	movs	r3, #1
 8003d8c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003d8e:	2301      	movs	r3, #1
 8003d90:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003d92:	2302      	movs	r3, #2
 8003d94:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003d96:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003d9a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLM = 16;
 8003d9c:	2310      	movs	r3, #16
 8003d9e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLN = 192;
 8003da0:	23c0      	movs	r3, #192	; 0xc0
 8003da2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003da4:	2302      	movs	r3, #2
 8003da6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8003da8:	2304      	movs	r3, #4
 8003daa:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003dac:	f107 0318 	add.w	r3, r7, #24
 8003db0:	4618      	mov	r0, r3
 8003db2:	f004 fb65 	bl	8008480 <HAL_RCC_OscConfig>
 8003db6:	4603      	mov	r3, r0
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	bf14      	ite	ne
 8003dbc:	2301      	movne	r3, #1
 8003dbe:	2300      	moveq	r3, #0
 8003dc0:	b2db      	uxtb	r3, r3
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d001      	beq.n	8003dca <_Z18SystemClock_Configv+0x62>
  {
    Error_Handler();
 8003dc6:	f000 fb19 	bl	80043fc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003dca:	230f      	movs	r3, #15
 8003dcc:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8003dce:	2301      	movs	r3, #1
 8003dd0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003dd2:	2300      	movs	r3, #0
 8003dd4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003dd6:	2300      	movs	r3, #0
 8003dd8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003dda:	2300      	movs	r3, #0
 8003ddc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8003dde:	1d3b      	adds	r3, r7, #4
 8003de0:	2100      	movs	r1, #0
 8003de2:	4618      	mov	r0, r3
 8003de4:	f004 fd9c 	bl	8008920 <HAL_RCC_ClockConfig>
 8003de8:	4603      	mov	r3, r0
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	bf14      	ite	ne
 8003dee:	2301      	movne	r3, #1
 8003df0:	2300      	moveq	r3, #0
 8003df2:	b2db      	uxtb	r3, r3
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d001      	beq.n	8003dfc <_Z18SystemClock_Configv+0x94>
  {
    Error_Handler();
 8003df8:	f000 fb00 	bl	80043fc <Error_Handler>
  }
  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 8003dfc:	f004 fe7c 	bl	8008af8 <HAL_RCC_EnableCSS>
}
 8003e00:	bf00      	nop
 8003e02:	3748      	adds	r7, #72	; 0x48
 8003e04:	46bd      	mov	sp, r7
 8003e06:	bd80      	pop	{r7, pc}

08003e08 <_ZL12MX_NVIC_Initv>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8003e08:	b580      	push	{r7, lr}
 8003e0a:	af00      	add	r7, sp, #0
  /* EXTI0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8003e0c:	2200      	movs	r2, #0
 8003e0e:	2100      	movs	r1, #0
 8003e10:	2006      	movs	r0, #6
 8003e12:	f001 fd0e 	bl	8005832 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8003e16:	2006      	movs	r0, #6
 8003e18:	f001 fd27 	bl	800586a <HAL_NVIC_EnableIRQ>
}
 8003e1c:	bf00      	nop
 8003e1e:	bd80      	pop	{r7, pc}

08003e20 <_ZL12MX_ADC1_Initv>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8003e20:	b580      	push	{r7, lr}
 8003e22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8003e24:	4b1a      	ldr	r3, [pc, #104]	; (8003e90 <_ZL12MX_ADC1_Initv+0x70>)
 8003e26:	4a1b      	ldr	r2, [pc, #108]	; (8003e94 <_ZL12MX_ADC1_Initv+0x74>)
 8003e28:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8003e2a:	4b19      	ldr	r3, [pc, #100]	; (8003e90 <_ZL12MX_ADC1_Initv+0x70>)
 8003e2c:	2200      	movs	r2, #0
 8003e2e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8003e30:	4b17      	ldr	r3, [pc, #92]	; (8003e90 <_ZL12MX_ADC1_Initv+0x70>)
 8003e32:	2200      	movs	r2, #0
 8003e34:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8003e36:	4b16      	ldr	r3, [pc, #88]	; (8003e90 <_ZL12MX_ADC1_Initv+0x70>)
 8003e38:	2201      	movs	r2, #1
 8003e3a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8003e3c:	4b14      	ldr	r3, [pc, #80]	; (8003e90 <_ZL12MX_ADC1_Initv+0x70>)
 8003e3e:	2201      	movs	r2, #1
 8003e40:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8003e42:	4b13      	ldr	r3, [pc, #76]	; (8003e90 <_ZL12MX_ADC1_Initv+0x70>)
 8003e44:	2200      	movs	r2, #0
 8003e46:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8003e4a:	4b11      	ldr	r3, [pc, #68]	; (8003e90 <_ZL12MX_ADC1_Initv+0x70>)
 8003e4c:	2200      	movs	r2, #0
 8003e4e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003e50:	4b0f      	ldr	r3, [pc, #60]	; (8003e90 <_ZL12MX_ADC1_Initv+0x70>)
 8003e52:	4a11      	ldr	r2, [pc, #68]	; (8003e98 <_ZL12MX_ADC1_Initv+0x78>)
 8003e54:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003e56:	4b0e      	ldr	r3, [pc, #56]	; (8003e90 <_ZL12MX_ADC1_Initv+0x70>)
 8003e58:	2200      	movs	r2, #0
 8003e5a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8003e5c:	4b0c      	ldr	r3, [pc, #48]	; (8003e90 <_ZL12MX_ADC1_Initv+0x70>)
 8003e5e:	2201      	movs	r2, #1
 8003e60:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8003e62:	4b0b      	ldr	r3, [pc, #44]	; (8003e90 <_ZL12MX_ADC1_Initv+0x70>)
 8003e64:	2200      	movs	r2, #0
 8003e66:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8003e6a:	4b09      	ldr	r3, [pc, #36]	; (8003e90 <_ZL12MX_ADC1_Initv+0x70>)
 8003e6c:	2201      	movs	r2, #1
 8003e6e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8003e70:	4807      	ldr	r0, [pc, #28]	; (8003e90 <_ZL12MX_ADC1_Initv+0x70>)
 8003e72:	f001 f9e9 	bl	8005248 <HAL_ADC_Init>
 8003e76:	4603      	mov	r3, r0
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	bf14      	ite	ne
 8003e7c:	2301      	movne	r3, #1
 8003e7e:	2300      	moveq	r3, #0
 8003e80:	b2db      	uxtb	r3, r3
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d001      	beq.n	8003e8a <_ZL12MX_ADC1_Initv+0x6a>
  {
    Error_Handler();
 8003e86:	f000 fab9 	bl	80043fc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8003e8a:	bf00      	nop
 8003e8c:	bd80      	pop	{r7, pc}
 8003e8e:	bf00      	nop
 8003e90:	20000630 	.word	0x20000630
 8003e94:	40012000 	.word	0x40012000
 8003e98:	0f000001 	.word	0x0f000001

08003e9c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
void MX_I2C1_Init(void)
{
 8003e9c:	b580      	push	{r7, lr}
 8003e9e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8003ea0:	4b15      	ldr	r3, [pc, #84]	; (8003ef8 <MX_I2C1_Init+0x5c>)
 8003ea2:	4a16      	ldr	r2, [pc, #88]	; (8003efc <MX_I2C1_Init+0x60>)
 8003ea4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8003ea6:	4b14      	ldr	r3, [pc, #80]	; (8003ef8 <MX_I2C1_Init+0x5c>)
 8003ea8:	4a15      	ldr	r2, [pc, #84]	; (8003f00 <MX_I2C1_Init+0x64>)
 8003eaa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003eac:	4b12      	ldr	r3, [pc, #72]	; (8003ef8 <MX_I2C1_Init+0x5c>)
 8003eae:	2200      	movs	r2, #0
 8003eb0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8003eb2:	4b11      	ldr	r3, [pc, #68]	; (8003ef8 <MX_I2C1_Init+0x5c>)
 8003eb4:	2200      	movs	r2, #0
 8003eb6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003eb8:	4b0f      	ldr	r3, [pc, #60]	; (8003ef8 <MX_I2C1_Init+0x5c>)
 8003eba:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003ebe:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003ec0:	4b0d      	ldr	r3, [pc, #52]	; (8003ef8 <MX_I2C1_Init+0x5c>)
 8003ec2:	2200      	movs	r2, #0
 8003ec4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8003ec6:	4b0c      	ldr	r3, [pc, #48]	; (8003ef8 <MX_I2C1_Init+0x5c>)
 8003ec8:	2200      	movs	r2, #0
 8003eca:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003ecc:	4b0a      	ldr	r3, [pc, #40]	; (8003ef8 <MX_I2C1_Init+0x5c>)
 8003ece:	2200      	movs	r2, #0
 8003ed0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003ed2:	4b09      	ldr	r3, [pc, #36]	; (8003ef8 <MX_I2C1_Init+0x5c>)
 8003ed4:	2200      	movs	r2, #0
 8003ed6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003ed8:	4807      	ldr	r0, [pc, #28]	; (8003ef8 <MX_I2C1_Init+0x5c>)
 8003eda:	f002 f9bd 	bl	8006258 <HAL_I2C_Init>
 8003ede:	4603      	mov	r3, r0
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	bf14      	ite	ne
 8003ee4:	2301      	movne	r3, #1
 8003ee6:	2300      	moveq	r3, #0
 8003ee8:	b2db      	uxtb	r3, r3
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d001      	beq.n	8003ef2 <MX_I2C1_Init+0x56>
  {
    Error_Handler();
 8003eee:	f000 fa85 	bl	80043fc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8003ef2:	bf00      	nop
 8003ef4:	bd80      	pop	{r7, pc}
 8003ef6:	bf00      	nop
 8003ef8:	20000678 	.word	0x20000678
 8003efc:	40005400 	.word	0x40005400
 8003f00:	00061a80 	.word	0x00061a80

08003f04 <_ZL12MX_TIM3_Initv>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8003f04:	b580      	push	{r7, lr}
 8003f06:	b08a      	sub	sp, #40	; 0x28
 8003f08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003f0a:	f107 0320 	add.w	r3, r7, #32
 8003f0e:	2200      	movs	r2, #0
 8003f10:	601a      	str	r2, [r3, #0]
 8003f12:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003f14:	1d3b      	adds	r3, r7, #4
 8003f16:	2200      	movs	r2, #0
 8003f18:	601a      	str	r2, [r3, #0]
 8003f1a:	605a      	str	r2, [r3, #4]
 8003f1c:	609a      	str	r2, [r3, #8]
 8003f1e:	60da      	str	r2, [r3, #12]
 8003f20:	611a      	str	r2, [r3, #16]
 8003f22:	615a      	str	r2, [r3, #20]
 8003f24:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003f26:	4b29      	ldr	r3, [pc, #164]	; (8003fcc <_ZL12MX_TIM3_Initv+0xc8>)
 8003f28:	4a29      	ldr	r2, [pc, #164]	; (8003fd0 <_ZL12MX_TIM3_Initv+0xcc>)
 8003f2a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 16-1;
 8003f2c:	4b27      	ldr	r3, [pc, #156]	; (8003fcc <_ZL12MX_TIM3_Initv+0xc8>)
 8003f2e:	220f      	movs	r2, #15
 8003f30:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003f32:	4b26      	ldr	r3, [pc, #152]	; (8003fcc <_ZL12MX_TIM3_Initv+0xc8>)
 8003f34:	2200      	movs	r2, #0
 8003f36:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 20000;
 8003f38:	4b24      	ldr	r3, [pc, #144]	; (8003fcc <_ZL12MX_TIM3_Initv+0xc8>)
 8003f3a:	f644 6220 	movw	r2, #20000	; 0x4e20
 8003f3e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003f40:	4b22      	ldr	r3, [pc, #136]	; (8003fcc <_ZL12MX_TIM3_Initv+0xc8>)
 8003f42:	2200      	movs	r2, #0
 8003f44:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003f46:	4b21      	ldr	r3, [pc, #132]	; (8003fcc <_ZL12MX_TIM3_Initv+0xc8>)
 8003f48:	2200      	movs	r2, #0
 8003f4a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8003f4c:	481f      	ldr	r0, [pc, #124]	; (8003fcc <_ZL12MX_TIM3_Initv+0xc8>)
 8003f4e:	f005 f829 	bl	8008fa4 <HAL_TIM_PWM_Init>
 8003f52:	4603      	mov	r3, r0
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	bf14      	ite	ne
 8003f58:	2301      	movne	r3, #1
 8003f5a:	2300      	moveq	r3, #0
 8003f5c:	b2db      	uxtb	r3, r3
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d001      	beq.n	8003f66 <_ZL12MX_TIM3_Initv+0x62>
  {
    Error_Handler();
 8003f62:	f000 fa4b 	bl	80043fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003f66:	2300      	movs	r3, #0
 8003f68:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003f6a:	2300      	movs	r3, #0
 8003f6c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003f6e:	f107 0320 	add.w	r3, r7, #32
 8003f72:	4619      	mov	r1, r3
 8003f74:	4815      	ldr	r0, [pc, #84]	; (8003fcc <_ZL12MX_TIM3_Initv+0xc8>)
 8003f76:	f005 fd85 	bl	8009a84 <HAL_TIMEx_MasterConfigSynchronization>
 8003f7a:	4603      	mov	r3, r0
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	bf14      	ite	ne
 8003f80:	2301      	movne	r3, #1
 8003f82:	2300      	moveq	r3, #0
 8003f84:	b2db      	uxtb	r3, r3
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d001      	beq.n	8003f8e <_ZL12MX_TIM3_Initv+0x8a>
  {
    Error_Handler();
 8003f8a:	f000 fa37 	bl	80043fc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003f8e:	2360      	movs	r3, #96	; 0x60
 8003f90:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8003f92:	2300      	movs	r3, #0
 8003f94:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003f96:	2300      	movs	r3, #0
 8003f98:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003f9a:	2300      	movs	r3, #0
 8003f9c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003f9e:	1d3b      	adds	r3, r7, #4
 8003fa0:	2200      	movs	r2, #0
 8003fa2:	4619      	mov	r1, r3
 8003fa4:	4809      	ldr	r0, [pc, #36]	; (8003fcc <_ZL12MX_TIM3_Initv+0xc8>)
 8003fa6:	f005 fa1d 	bl	80093e4 <HAL_TIM_PWM_ConfigChannel>
 8003faa:	4603      	mov	r3, r0
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	bf14      	ite	ne
 8003fb0:	2301      	movne	r3, #1
 8003fb2:	2300      	moveq	r3, #0
 8003fb4:	b2db      	uxtb	r3, r3
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d001      	beq.n	8003fbe <_ZL12MX_TIM3_Initv+0xba>
  {
    Error_Handler();
 8003fba:	f000 fa1f 	bl	80043fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8003fbe:	4803      	ldr	r0, [pc, #12]	; (8003fcc <_ZL12MX_TIM3_Initv+0xc8>)
 8003fc0:	f000 fefc 	bl	8004dbc <HAL_TIM_MspPostInit>

}
 8003fc4:	bf00      	nop
 8003fc6:	3728      	adds	r7, #40	; 0x28
 8003fc8:	46bd      	mov	sp, r7
 8003fca:	bd80      	pop	{r7, pc}
 8003fcc:	2000078c 	.word	0x2000078c
 8003fd0:	40000400 	.word	0x40000400

08003fd4 <_ZL12MX_TIM4_Initv>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8003fd4:	b580      	push	{r7, lr}
 8003fd6:	b08a      	sub	sp, #40	; 0x28
 8003fd8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003fda:	f107 0320 	add.w	r3, r7, #32
 8003fde:	2200      	movs	r2, #0
 8003fe0:	601a      	str	r2, [r3, #0]
 8003fe2:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003fe4:	1d3b      	adds	r3, r7, #4
 8003fe6:	2200      	movs	r2, #0
 8003fe8:	601a      	str	r2, [r3, #0]
 8003fea:	605a      	str	r2, [r3, #4]
 8003fec:	609a      	str	r2, [r3, #8]
 8003fee:	60da      	str	r2, [r3, #12]
 8003ff0:	611a      	str	r2, [r3, #16]
 8003ff2:	615a      	str	r2, [r3, #20]
 8003ff4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8003ff6:	4b29      	ldr	r3, [pc, #164]	; (800409c <_ZL12MX_TIM4_Initv+0xc8>)
 8003ff8:	4a29      	ldr	r2, [pc, #164]	; (80040a0 <_ZL12MX_TIM4_Initv+0xcc>)
 8003ffa:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 16-1;
 8003ffc:	4b27      	ldr	r3, [pc, #156]	; (800409c <_ZL12MX_TIM4_Initv+0xc8>)
 8003ffe:	220f      	movs	r2, #15
 8004000:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004002:	4b26      	ldr	r3, [pc, #152]	; (800409c <_ZL12MX_TIM4_Initv+0xc8>)
 8004004:	2200      	movs	r2, #0
 8004006:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 2500;
 8004008:	4b24      	ldr	r3, [pc, #144]	; (800409c <_ZL12MX_TIM4_Initv+0xc8>)
 800400a:	f640 12c4 	movw	r2, #2500	; 0x9c4
 800400e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004010:	4b22      	ldr	r3, [pc, #136]	; (800409c <_ZL12MX_TIM4_Initv+0xc8>)
 8004012:	2200      	movs	r2, #0
 8004014:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004016:	4b21      	ldr	r3, [pc, #132]	; (800409c <_ZL12MX_TIM4_Initv+0xc8>)
 8004018:	2200      	movs	r2, #0
 800401a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800401c:	481f      	ldr	r0, [pc, #124]	; (800409c <_ZL12MX_TIM4_Initv+0xc8>)
 800401e:	f004 ffc1 	bl	8008fa4 <HAL_TIM_PWM_Init>
 8004022:	4603      	mov	r3, r0
 8004024:	2b00      	cmp	r3, #0
 8004026:	bf14      	ite	ne
 8004028:	2301      	movne	r3, #1
 800402a:	2300      	moveq	r3, #0
 800402c:	b2db      	uxtb	r3, r3
 800402e:	2b00      	cmp	r3, #0
 8004030:	d001      	beq.n	8004036 <_ZL12MX_TIM4_Initv+0x62>
  {
    Error_Handler();
 8004032:	f000 f9e3 	bl	80043fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004036:	2300      	movs	r3, #0
 8004038:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800403a:	2300      	movs	r3, #0
 800403c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800403e:	f107 0320 	add.w	r3, r7, #32
 8004042:	4619      	mov	r1, r3
 8004044:	4815      	ldr	r0, [pc, #84]	; (800409c <_ZL12MX_TIM4_Initv+0xc8>)
 8004046:	f005 fd1d 	bl	8009a84 <HAL_TIMEx_MasterConfigSynchronization>
 800404a:	4603      	mov	r3, r0
 800404c:	2b00      	cmp	r3, #0
 800404e:	bf14      	ite	ne
 8004050:	2301      	movne	r3, #1
 8004052:	2300      	moveq	r3, #0
 8004054:	b2db      	uxtb	r3, r3
 8004056:	2b00      	cmp	r3, #0
 8004058:	d001      	beq.n	800405e <_ZL12MX_TIM4_Initv+0x8a>
  {
    Error_Handler();
 800405a:	f000 f9cf 	bl	80043fc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800405e:	2360      	movs	r3, #96	; 0x60
 8004060:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8004062:	2300      	movs	r3, #0
 8004064:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004066:	2300      	movs	r3, #0
 8004068:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800406a:	2300      	movs	r3, #0
 800406c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800406e:	1d3b      	adds	r3, r7, #4
 8004070:	2200      	movs	r2, #0
 8004072:	4619      	mov	r1, r3
 8004074:	4809      	ldr	r0, [pc, #36]	; (800409c <_ZL12MX_TIM4_Initv+0xc8>)
 8004076:	f005 f9b5 	bl	80093e4 <HAL_TIM_PWM_ConfigChannel>
 800407a:	4603      	mov	r3, r0
 800407c:	2b00      	cmp	r3, #0
 800407e:	bf14      	ite	ne
 8004080:	2301      	movne	r3, #1
 8004082:	2300      	moveq	r3, #0
 8004084:	b2db      	uxtb	r3, r3
 8004086:	2b00      	cmp	r3, #0
 8004088:	d001      	beq.n	800408e <_ZL12MX_TIM4_Initv+0xba>
  {
    Error_Handler();
 800408a:	f000 f9b7 	bl	80043fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 800408e:	4803      	ldr	r0, [pc, #12]	; (800409c <_ZL12MX_TIM4_Initv+0xc8>)
 8004090:	f000 fe94 	bl	8004dbc <HAL_TIM_MspPostInit>

}
 8004094:	bf00      	nop
 8004096:	3728      	adds	r7, #40	; 0x28
 8004098:	46bd      	mov	sp, r7
 800409a:	bd80      	pop	{r7, pc}
 800409c:	200007d4 	.word	0x200007d4
 80040a0:	40000800 	.word	0x40000800

080040a4 <_ZL13MX_TIM11_Initv>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 80040a4:	b580      	push	{r7, lr}
 80040a6:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 80040a8:	4b10      	ldr	r3, [pc, #64]	; (80040ec <_ZL13MX_TIM11_Initv+0x48>)
 80040aa:	4a11      	ldr	r2, [pc, #68]	; (80040f0 <_ZL13MX_TIM11_Initv+0x4c>)
 80040ac:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 16 - 1;
 80040ae:	4b0f      	ldr	r3, [pc, #60]	; (80040ec <_ZL13MX_TIM11_Initv+0x48>)
 80040b0:	220f      	movs	r2, #15
 80040b2:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 80040b4:	4b0d      	ldr	r3, [pc, #52]	; (80040ec <_ZL13MX_TIM11_Initv+0x48>)
 80040b6:	2200      	movs	r2, #0
 80040b8:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 65535;
 80040ba:	4b0c      	ldr	r3, [pc, #48]	; (80040ec <_ZL13MX_TIM11_Initv+0x48>)
 80040bc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80040c0:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80040c2:	4b0a      	ldr	r3, [pc, #40]	; (80040ec <_ZL13MX_TIM11_Initv+0x48>)
 80040c4:	2200      	movs	r2, #0
 80040c6:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80040c8:	4b08      	ldr	r3, [pc, #32]	; (80040ec <_ZL13MX_TIM11_Initv+0x48>)
 80040ca:	2200      	movs	r2, #0
 80040cc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 80040ce:	4807      	ldr	r0, [pc, #28]	; (80040ec <_ZL13MX_TIM11_Initv+0x48>)
 80040d0:	f004 fe44 	bl	8008d5c <HAL_TIM_Base_Init>
 80040d4:	4603      	mov	r3, r0
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	bf14      	ite	ne
 80040da:	2301      	movne	r3, #1
 80040dc:	2300      	moveq	r3, #0
 80040de:	b2db      	uxtb	r3, r3
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d001      	beq.n	80040e8 <_ZL13MX_TIM11_Initv+0x44>
  {
    Error_Handler();
 80040e4:	f000 f98a 	bl	80043fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 80040e8:	bf00      	nop
 80040ea:	bd80      	pop	{r7, pc}
 80040ec:	2000081c 	.word	0x2000081c
 80040f0:	40014800 	.word	0x40014800

080040f4 <_ZL13MX_TIM13_Initv>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 80040f4:	b580      	push	{r7, lr}
 80040f6:	af00      	add	r7, sp, #0
  /* USER CODE END TIM13_Init 0 */

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 80040f8:	4b10      	ldr	r3, [pc, #64]	; (800413c <_ZL13MX_TIM13_Initv+0x48>)
 80040fa:	4a11      	ldr	r2, [pc, #68]	; (8004140 <_ZL13MX_TIM13_Initv+0x4c>)
 80040fc:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 16 - 1;
 80040fe:	4b0f      	ldr	r3, [pc, #60]	; (800413c <_ZL13MX_TIM13_Initv+0x48>)
 8004100:	220f      	movs	r2, #15
 8004102:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004104:	4b0d      	ldr	r3, [pc, #52]	; (800413c <_ZL13MX_TIM13_Initv+0x48>)
 8004106:	2200      	movs	r2, #0
 8004108:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 65535;
 800410a:	4b0c      	ldr	r3, [pc, #48]	; (800413c <_ZL13MX_TIM13_Initv+0x48>)
 800410c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004110:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004112:	4b0a      	ldr	r3, [pc, #40]	; (800413c <_ZL13MX_TIM13_Initv+0x48>)
 8004114:	2200      	movs	r2, #0
 8004116:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004118:	4b08      	ldr	r3, [pc, #32]	; (800413c <_ZL13MX_TIM13_Initv+0x48>)
 800411a:	2200      	movs	r2, #0
 800411c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 800411e:	4807      	ldr	r0, [pc, #28]	; (800413c <_ZL13MX_TIM13_Initv+0x48>)
 8004120:	f004 fe1c 	bl	8008d5c <HAL_TIM_Base_Init>
 8004124:	4603      	mov	r3, r0
 8004126:	2b00      	cmp	r3, #0
 8004128:	bf14      	ite	ne
 800412a:	2301      	movne	r3, #1
 800412c:	2300      	moveq	r3, #0
 800412e:	b2db      	uxtb	r3, r3
 8004130:	2b00      	cmp	r3, #0
 8004132:	d001      	beq.n	8004138 <_ZL13MX_TIM13_Initv+0x44>
  {
    Error_Handler();
 8004134:	f000 f962 	bl	80043fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 8004138:	bf00      	nop
 800413a:	bd80      	pop	{r7, pc}
 800413c:	20000864 	.word	0x20000864
 8004140:	40001c00 	.word	0x40001c00

08004144 <_ZL13MX_TIM14_Initv>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 8004144:	b580      	push	{r7, lr}
 8004146:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8004148:	4b10      	ldr	r3, [pc, #64]	; (800418c <_ZL13MX_TIM14_Initv+0x48>)
 800414a:	4a11      	ldr	r2, [pc, #68]	; (8004190 <_ZL13MX_TIM14_Initv+0x4c>)
 800414c:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 16 - 1;
 800414e:	4b0f      	ldr	r3, [pc, #60]	; (800418c <_ZL13MX_TIM14_Initv+0x48>)
 8004150:	220f      	movs	r2, #15
 8004152:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004154:	4b0d      	ldr	r3, [pc, #52]	; (800418c <_ZL13MX_TIM14_Initv+0x48>)
 8004156:	2200      	movs	r2, #0
 8004158:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 65535;
 800415a:	4b0c      	ldr	r3, [pc, #48]	; (800418c <_ZL13MX_TIM14_Initv+0x48>)
 800415c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004160:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004162:	4b0a      	ldr	r3, [pc, #40]	; (800418c <_ZL13MX_TIM14_Initv+0x48>)
 8004164:	2200      	movs	r2, #0
 8004166:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004168:	4b08      	ldr	r3, [pc, #32]	; (800418c <_ZL13MX_TIM14_Initv+0x48>)
 800416a:	2200      	movs	r2, #0
 800416c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 800416e:	4807      	ldr	r0, [pc, #28]	; (800418c <_ZL13MX_TIM14_Initv+0x48>)
 8004170:	f004 fdf4 	bl	8008d5c <HAL_TIM_Base_Init>
 8004174:	4603      	mov	r3, r0
 8004176:	2b00      	cmp	r3, #0
 8004178:	bf14      	ite	ne
 800417a:	2301      	movne	r3, #1
 800417c:	2300      	moveq	r3, #0
 800417e:	b2db      	uxtb	r3, r3
 8004180:	2b00      	cmp	r3, #0
 8004182:	d001      	beq.n	8004188 <_ZL13MX_TIM14_Initv+0x44>
  {
    Error_Handler();
 8004184:	f000 f93a 	bl	80043fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 8004188:	bf00      	nop
 800418a:	bd80      	pop	{r7, pc}
 800418c:	200008ac 	.word	0x200008ac
 8004190:	40002000 	.word	0x40002000

08004194 <_ZL11MX_DMA_Initv>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8004194:	b580      	push	{r7, lr}
 8004196:	b082      	sub	sp, #8
 8004198:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800419a:	2300      	movs	r3, #0
 800419c:	607b      	str	r3, [r7, #4]
 800419e:	4b10      	ldr	r3, [pc, #64]	; (80041e0 <_ZL11MX_DMA_Initv+0x4c>)
 80041a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041a2:	4a0f      	ldr	r2, [pc, #60]	; (80041e0 <_ZL11MX_DMA_Initv+0x4c>)
 80041a4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80041a8:	6313      	str	r3, [r2, #48]	; 0x30
 80041aa:	4b0d      	ldr	r3, [pc, #52]	; (80041e0 <_ZL11MX_DMA_Initv+0x4c>)
 80041ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041ae:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80041b2:	607b      	str	r3, [r7, #4]
 80041b4:	687b      	ldr	r3, [r7, #4]
  
  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80041b6:	2200      	movs	r2, #0
 80041b8:	2100      	movs	r1, #0
 80041ba:	200b      	movs	r0, #11
 80041bc:	f001 fb39 	bl	8005832 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80041c0:	200b      	movs	r0, #11
 80041c2:	f001 fb52 	bl	800586a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 80041c6:	2200      	movs	r2, #0
 80041c8:	2100      	movs	r1, #0
 80041ca:	2011      	movs	r0, #17
 80041cc:	f001 fb31 	bl	8005832 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 80041d0:	2011      	movs	r0, #17
 80041d2:	f001 fb4a 	bl	800586a <HAL_NVIC_EnableIRQ>

}
 80041d6:	bf00      	nop
 80041d8:	3708      	adds	r7, #8
 80041da:	46bd      	mov	sp, r7
 80041dc:	bd80      	pop	{r7, pc}
 80041de:	bf00      	nop
 80041e0:	40023800 	.word	0x40023800

080041e4 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80041e4:	b580      	push	{r7, lr}
 80041e6:	b08a      	sub	sp, #40	; 0x28
 80041e8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80041ea:	f107 0314 	add.w	r3, r7, #20
 80041ee:	2200      	movs	r2, #0
 80041f0:	601a      	str	r2, [r3, #0]
 80041f2:	605a      	str	r2, [r3, #4]
 80041f4:	609a      	str	r2, [r3, #8]
 80041f6:	60da      	str	r2, [r3, #12]
 80041f8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80041fa:	2300      	movs	r3, #0
 80041fc:	613b      	str	r3, [r7, #16]
 80041fe:	4b44      	ldr	r3, [pc, #272]	; (8004310 <_ZL12MX_GPIO_Initv+0x12c>)
 8004200:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004202:	4a43      	ldr	r2, [pc, #268]	; (8004310 <_ZL12MX_GPIO_Initv+0x12c>)
 8004204:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004208:	6313      	str	r3, [r2, #48]	; 0x30
 800420a:	4b41      	ldr	r3, [pc, #260]	; (8004310 <_ZL12MX_GPIO_Initv+0x12c>)
 800420c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800420e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004212:	613b      	str	r3, [r7, #16]
 8004214:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004216:	2300      	movs	r3, #0
 8004218:	60fb      	str	r3, [r7, #12]
 800421a:	4b3d      	ldr	r3, [pc, #244]	; (8004310 <_ZL12MX_GPIO_Initv+0x12c>)
 800421c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800421e:	4a3c      	ldr	r2, [pc, #240]	; (8004310 <_ZL12MX_GPIO_Initv+0x12c>)
 8004220:	f043 0304 	orr.w	r3, r3, #4
 8004224:	6313      	str	r3, [r2, #48]	; 0x30
 8004226:	4b3a      	ldr	r3, [pc, #232]	; (8004310 <_ZL12MX_GPIO_Initv+0x12c>)
 8004228:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800422a:	f003 0304 	and.w	r3, r3, #4
 800422e:	60fb      	str	r3, [r7, #12]
 8004230:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004232:	2300      	movs	r3, #0
 8004234:	60bb      	str	r3, [r7, #8]
 8004236:	4b36      	ldr	r3, [pc, #216]	; (8004310 <_ZL12MX_GPIO_Initv+0x12c>)
 8004238:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800423a:	4a35      	ldr	r2, [pc, #212]	; (8004310 <_ZL12MX_GPIO_Initv+0x12c>)
 800423c:	f043 0301 	orr.w	r3, r3, #1
 8004240:	6313      	str	r3, [r2, #48]	; 0x30
 8004242:	4b33      	ldr	r3, [pc, #204]	; (8004310 <_ZL12MX_GPIO_Initv+0x12c>)
 8004244:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004246:	f003 0301 	and.w	r3, r3, #1
 800424a:	60bb      	str	r3, [r7, #8]
 800424c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800424e:	2300      	movs	r3, #0
 8004250:	607b      	str	r3, [r7, #4]
 8004252:	4b2f      	ldr	r3, [pc, #188]	; (8004310 <_ZL12MX_GPIO_Initv+0x12c>)
 8004254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004256:	4a2e      	ldr	r2, [pc, #184]	; (8004310 <_ZL12MX_GPIO_Initv+0x12c>)
 8004258:	f043 0302 	orr.w	r3, r3, #2
 800425c:	6313      	str	r3, [r2, #48]	; 0x30
 800425e:	4b2c      	ldr	r3, [pc, #176]	; (8004310 <_ZL12MX_GPIO_Initv+0x12c>)
 8004260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004262:	f003 0302 	and.w	r3, r3, #2
 8004266:	607b      	str	r3, [r7, #4]
 8004268:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ONBOARD_LED_1_Pin|ONBOARD_LED_2_Pin|ONBOARD_LED_3_Pin|ONBOARD_LED_4_Pin
 800426a:	2200      	movs	r2, #0
 800426c:	f44f 71f8 	mov.w	r1, #496	; 0x1f0
 8004270:	4828      	ldr	r0, [pc, #160]	; (8004314 <_ZL12MX_GPIO_Initv+0x130>)
 8004272:	f001 ffa7 	bl	80061c4 <HAL_GPIO_WritePin>
                          |ONBOARD_WRITE_3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ONBOARD_WRITE_2_GPIO_Port, ONBOARD_WRITE_2_Pin, GPIO_PIN_RESET);
 8004276:	2200      	movs	r2, #0
 8004278:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800427c:	4826      	ldr	r0, [pc, #152]	; (8004318 <_ZL12MX_GPIO_Initv+0x134>)
 800427e:	f001 ffa1 	bl	80061c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : ONBOARD_READ_IT_3_Pin */
  GPIO_InitStruct.Pin = ONBOARD_READ_IT_3_Pin;
 8004282:	2301      	movs	r3, #1
 8004284:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004286:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800428a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800428c:	2302      	movs	r3, #2
 800428e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ONBOARD_READ_IT_3_GPIO_Port, &GPIO_InitStruct);
 8004290:	f107 0314 	add.w	r3, r7, #20
 8004294:	4619      	mov	r1, r3
 8004296:	4820      	ldr	r0, [pc, #128]	; (8004318 <_ZL12MX_GPIO_Initv+0x134>)
 8004298:	f001 fdf6 	bl	8005e88 <HAL_GPIO_Init>

  /*Configure GPIO pins : ONBOARD_BUTTON_1_Pin ONBOARD_BUTTON_2_Pin ONBOARD_BUTTON_3_Pin ONBOARD_BUTTON_4_Pin */
  GPIO_InitStruct.Pin = ONBOARD_BUTTON_1_Pin|ONBOARD_BUTTON_2_Pin|ONBOARD_BUTTON_3_Pin|ONBOARD_BUTTON_4_Pin;
 800429c:	230f      	movs	r3, #15
 800429e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80042a0:	2300      	movs	r3, #0
 80042a2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042a4:	2300      	movs	r3, #0
 80042a6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80042a8:	f107 0314 	add.w	r3, r7, #20
 80042ac:	4619      	mov	r1, r3
 80042ae:	4819      	ldr	r0, [pc, #100]	; (8004314 <_ZL12MX_GPIO_Initv+0x130>)
 80042b0:	f001 fdea 	bl	8005e88 <HAL_GPIO_Init>

  /*Configure GPIO pins : ONBOARD_LED_1_Pin ONBOARD_LED_2_Pin ONBOARD_LED_3_Pin ONBOARD_LED_4_Pin
                           ONBOARD_WRITE_3_Pin */
  GPIO_InitStruct.Pin = ONBOARD_LED_1_Pin|ONBOARD_LED_2_Pin|ONBOARD_LED_3_Pin|ONBOARD_LED_4_Pin
 80042b4:	f44f 73f8 	mov.w	r3, #496	; 0x1f0
 80042b8:	617b      	str	r3, [r7, #20]
                          |ONBOARD_WRITE_3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80042ba:	2301      	movs	r3, #1
 80042bc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042be:	2300      	movs	r3, #0
 80042c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80042c2:	2300      	movs	r3, #0
 80042c4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80042c6:	f107 0314 	add.w	r3, r7, #20
 80042ca:	4619      	mov	r1, r3
 80042cc:	4811      	ldr	r0, [pc, #68]	; (8004314 <_ZL12MX_GPIO_Initv+0x130>)
 80042ce:	f001 fddb 	bl	8005e88 <HAL_GPIO_Init>

  /*Configure GPIO pin : ONBOARD_WRITE_2_Pin */
  GPIO_InitStruct.Pin = ONBOARD_WRITE_2_Pin;
 80042d2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80042d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80042d8:	2301      	movs	r3, #1
 80042da:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042dc:	2300      	movs	r3, #0
 80042de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80042e0:	2300      	movs	r3, #0
 80042e2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(ONBOARD_WRITE_2_GPIO_Port, &GPIO_InitStruct);
 80042e4:	f107 0314 	add.w	r3, r7, #20
 80042e8:	4619      	mov	r1, r3
 80042ea:	480b      	ldr	r0, [pc, #44]	; (8004318 <_ZL12MX_GPIO_Initv+0x134>)
 80042ec:	f001 fdcc 	bl	8005e88 <HAL_GPIO_Init>

  /*Configure GPIO pin : ONBOARD_READ_4_Pin */
  GPIO_InitStruct.Pin = ONBOARD_READ_4_Pin;
 80042f0:	2380      	movs	r3, #128	; 0x80
 80042f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80042f4:	2300      	movs	r3, #0
 80042f6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042f8:	2300      	movs	r3, #0
 80042fa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ONBOARD_READ_4_GPIO_Port, &GPIO_InitStruct);
 80042fc:	f107 0314 	add.w	r3, r7, #20
 8004300:	4619      	mov	r1, r3
 8004302:	4806      	ldr	r0, [pc, #24]	; (800431c <_ZL12MX_GPIO_Initv+0x138>)
 8004304:	f001 fdc0 	bl	8005e88 <HAL_GPIO_Init>

}
 8004308:	bf00      	nop
 800430a:	3728      	adds	r7, #40	; 0x28
 800430c:	46bd      	mov	sp, r7
 800430e:	bd80      	pop	{r7, pc}
 8004310:	40023800 	.word	0x40023800
 8004314:	40020000 	.word	0x40020000
 8004318:	40020800 	.word	0x40020800
 800431c:	40020400 	.word	0x40020400

08004320 <HAL_TIM_PeriodElapsedCallback>:
 * @brief Interrupt that is called when any Timer overflows
 * @param htim timer handle
 * @retval none
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004320:	b480      	push	{r7}
 8004322:	b083      	sub	sp, #12
 8004324:	af00      	add	r7, sp, #0
 8004326:	6078      	str	r0, [r7, #4]
  // }
  // else
  // {
  //   SBUS_RecieveDone = false;
  // }
}
 8004328:	bf00      	nop
 800432a:	370c      	adds	r7, #12
 800432c:	46bd      	mov	sp, r7
 800432e:	bc80      	pop	{r7}
 8004330:	4770      	bx	lr
	...

08004334 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{ 
 8004334:	b580      	push	{r7, lr}
 8004336:	b084      	sub	sp, #16
 8004338:	af00      	add	r7, sp, #0
 800433a:	4603      	mov	r3, r0
 800433c:	80fb      	strh	r3, [r7, #6]
  if (GPIO_Pin == ONBOARD_READ_IT_3_Pin)
 800433e:	88fb      	ldrh	r3, [r7, #6]
 8004340:	2b01      	cmp	r3, #1
 8004342:	d10d      	bne.n	8004360 <HAL_GPIO_EXTI_Callback+0x2c>
  {
    uint32_t time = HAL_GetTick();
 8004344:	f000 ff52 	bl	80051ec <HAL_GetTick>
 8004348:	60f8      	str	r0, [r7, #12]
    if (time - PinInterruptLastTime > 3)
 800434a:	4b07      	ldr	r3, [pc, #28]	; (8004368 <HAL_GPIO_EXTI_Callback+0x34>)
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	68fa      	ldr	r2, [r7, #12]
 8004350:	1ad3      	subs	r3, r2, r3
 8004352:	2b03      	cmp	r3, #3
 8004354:	d904      	bls.n	8004360 <HAL_GPIO_EXTI_Callback+0x2c>
    {
      PinInterruptLastTime = time;
 8004356:	4a04      	ldr	r2, [pc, #16]	; (8004368 <HAL_GPIO_EXTI_Callback+0x34>)
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	6013      	str	r3, [r2, #0]
      SBUS_RecieveBits();
 800435c:	f7ff fad2 	bl	8003904 <_Z16SBUS_RecieveBitsv>
    }
  }
}
 8004360:	bf00      	nop
 8004362:	3710      	adds	r7, #16
 8004364:	46bd      	mov	sp, r7
 8004366:	bd80      	pop	{r7, pc}
 8004368:	200008f4 	.word	0x200008f4

0800436c <ADC_Select_Channel_11>:

void ADC_Select_Channel_11()
{
 800436c:	b580      	push	{r7, lr}
 800436e:	af00      	add	r7, sp, #0
  // sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
  // if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
  // {
    // Error_Handler();
  // }
  ADC1->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, ADC_CHANNEL_11);
 8004370:	4b0e      	ldr	r3, [pc, #56]	; (80043ac <ADC_Select_Channel_11+0x40>)
 8004372:	68db      	ldr	r3, [r3, #12]
 8004374:	4a0d      	ldr	r2, [pc, #52]	; (80043ac <ADC_Select_Channel_11+0x40>)
 8004376:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 800437a:	60d3      	str	r3, [r2, #12]
  ADC1->SMPR1 |= ADC_SMPR1(ADC_SAMPLETIME_15CYCLES, ADC_CHANNEL_11);
 800437c:	4b0b      	ldr	r3, [pc, #44]	; (80043ac <ADC_Select_Channel_11+0x40>)
 800437e:	68db      	ldr	r3, [r3, #12]
 8004380:	4a0a      	ldr	r2, [pc, #40]	; (80043ac <ADC_Select_Channel_11+0x40>)
 8004382:	f043 0308 	orr.w	r3, r3, #8
 8004386:	60d3      	str	r3, [r2, #12]
  
  ADC1->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, 1);
 8004388:	4b08      	ldr	r3, [pc, #32]	; (80043ac <ADC_Select_Channel_11+0x40>)
 800438a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800438c:	4a07      	ldr	r2, [pc, #28]	; (80043ac <ADC_Select_Channel_11+0x40>)
 800438e:	f023 031f 	bic.w	r3, r3, #31
 8004392:	6353      	str	r3, [r2, #52]	; 0x34
  ADC1->SQR3 |= ADC_SQR3_RK(ADC_CHANNEL_11, 1);
 8004394:	4b05      	ldr	r3, [pc, #20]	; (80043ac <ADC_Select_Channel_11+0x40>)
 8004396:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004398:	4a04      	ldr	r2, [pc, #16]	; (80043ac <ADC_Select_Channel_11+0x40>)
 800439a:	f043 030b 	orr.w	r3, r3, #11
 800439e:	6353      	str	r3, [r2, #52]	; 0x34



  HAL_ADC_Start(&hadc1);
 80043a0:	4803      	ldr	r0, [pc, #12]	; (80043b0 <ADC_Select_Channel_11+0x44>)
 80043a2:	f000 ff95 	bl	80052d0 <HAL_ADC_Start>
}
 80043a6:	bf00      	nop
 80043a8:	bd80      	pop	{r7, pc}
 80043aa:	bf00      	nop
 80043ac:	40012000 	.word	0x40012000
 80043b0:	20000630 	.word	0x20000630

080043b4 <ADC_Select_Channel_12>:
void ADC_Select_Channel_12()
{
 80043b4:	b580      	push	{r7, lr}
 80043b6:	af00      	add	r7, sp, #0
  // if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
  // {
  //   Error_Handler();
  // }

  ADC1->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, ADC_CHANNEL_12);
 80043b8:	4b0e      	ldr	r3, [pc, #56]	; (80043f4 <ADC_Select_Channel_12+0x40>)
 80043ba:	68db      	ldr	r3, [r3, #12]
 80043bc:	4a0d      	ldr	r2, [pc, #52]	; (80043f4 <ADC_Select_Channel_12+0x40>)
 80043be:	f423 73e0 	bic.w	r3, r3, #448	; 0x1c0
 80043c2:	60d3      	str	r3, [r2, #12]
  ADC1->SMPR1 |= ADC_SMPR1(ADC_SAMPLETIME_15CYCLES, ADC_CHANNEL_12);
 80043c4:	4b0b      	ldr	r3, [pc, #44]	; (80043f4 <ADC_Select_Channel_12+0x40>)
 80043c6:	68db      	ldr	r3, [r3, #12]
 80043c8:	4a0a      	ldr	r2, [pc, #40]	; (80043f4 <ADC_Select_Channel_12+0x40>)
 80043ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80043ce:	60d3      	str	r3, [r2, #12]
  
  ADC1->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, 1);
 80043d0:	4b08      	ldr	r3, [pc, #32]	; (80043f4 <ADC_Select_Channel_12+0x40>)
 80043d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043d4:	4a07      	ldr	r2, [pc, #28]	; (80043f4 <ADC_Select_Channel_12+0x40>)
 80043d6:	f023 031f 	bic.w	r3, r3, #31
 80043da:	6353      	str	r3, [r2, #52]	; 0x34
  ADC1->SQR3 |= ADC_SQR3_RK(ADC_CHANNEL_12, 1);
 80043dc:	4b05      	ldr	r3, [pc, #20]	; (80043f4 <ADC_Select_Channel_12+0x40>)
 80043de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043e0:	4a04      	ldr	r2, [pc, #16]	; (80043f4 <ADC_Select_Channel_12+0x40>)
 80043e2:	f043 030c 	orr.w	r3, r3, #12
 80043e6:	6353      	str	r3, [r2, #52]	; 0x34

  HAL_ADC_Start(&hadc1);
 80043e8:	4803      	ldr	r0, [pc, #12]	; (80043f8 <ADC_Select_Channel_12+0x44>)
 80043ea:	f000 ff71 	bl	80052d0 <HAL_ADC_Start>
}
 80043ee:	bf00      	nop
 80043f0:	bd80      	pop	{r7, pc}
 80043f2:	bf00      	nop
 80043f4:	40012000 	.word	0x40012000
 80043f8:	20000630 	.word	0x20000630

080043fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80043fc:	b480      	push	{r7}
 80043fe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004400:	b672      	cpsid	i
}
 8004402:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004404:	e7fe      	b.n	8004404 <Error_Handler+0x8>
	...

08004408 <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 8004408:	b480      	push	{r7}
 800440a:	b083      	sub	sp, #12
 800440c:	af00      	add	r7, sp, #0
 800440e:	6078      	str	r0, [r7, #4]
 8004410:	6039      	str	r1, [r7, #0]
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	2b01      	cmp	r3, #1
 8004416:	d114      	bne.n	8004442 <_Z41__static_initialization_and_destruction_0ii+0x3a>
 8004418:	683b      	ldr	r3, [r7, #0]
 800441a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800441e:	4293      	cmp	r3, r2
 8004420:	d10f      	bne.n	8004442 <_Z41__static_initialization_and_destruction_0ii+0x3a>
uint16_t fastPPM_OFFTime = fastPPM_Pulselength - fastPPM_ONTime;//OFF time in microseconds
 8004422:	4b0a      	ldr	r3, [pc, #40]	; (800444c <_Z41__static_initialization_and_destruction_0ii+0x44>)
 8004424:	881b      	ldrh	r3, [r3, #0]
 8004426:	f5c3 631c 	rsb	r3, r3, #2496	; 0x9c0
 800442a:	3304      	adds	r3, #4
 800442c:	b29a      	uxth	r2, r3
 800442e:	4b08      	ldr	r3, [pc, #32]	; (8004450 <_Z41__static_initialization_and_destruction_0ii+0x48>)
 8004430:	801a      	strh	r2, [r3, #0]
uint16_t slowPPM1_OFFTime = fastPPM_Pulselength - fastPPM_ONTime;//OFF time in microseconds
 8004432:	4b06      	ldr	r3, [pc, #24]	; (800444c <_Z41__static_initialization_and_destruction_0ii+0x44>)
 8004434:	881b      	ldrh	r3, [r3, #0]
 8004436:	f5c3 631c 	rsb	r3, r3, #2496	; 0x9c0
 800443a:	3304      	adds	r3, #4
 800443c:	b29a      	uxth	r2, r3
 800443e:	4b05      	ldr	r3, [pc, #20]	; (8004454 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 8004440:	801a      	strh	r2, [r3, #0]
}
 8004442:	bf00      	nop
 8004444:	370c      	adds	r7, #12
 8004446:	46bd      	mov	sp, r7
 8004448:	bc80      	pop	{r7}
 800444a:	4770      	bx	lr
 800444c:	20000020 	.word	0x20000020
 8004450:	200008f8 	.word	0x200008f8
 8004454:	200008fa 	.word	0x200008fa

08004458 <_GLOBAL__sub_I_hadc1>:
 8004458:	b580      	push	{r7, lr}
 800445a:	af00      	add	r7, sp, #0
 800445c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8004460:	2001      	movs	r0, #1
 8004462:	f7ff ffd1 	bl	8004408 <_Z41__static_initialization_and_destruction_0ii>
 8004466:	bd80      	pop	{r7, pc}

08004468 <_ZSt4acosf>:
  { return __builtin_acosf(__x); }
 8004468:	b580      	push	{r7, lr}
 800446a:	b082      	sub	sp, #8
 800446c:	af00      	add	r7, sp, #0
 800446e:	6078      	str	r0, [r7, #4]
 8004470:	6878      	ldr	r0, [r7, #4]
 8004472:	f009 f99b 	bl	800d7ac <acosf>
 8004476:	4603      	mov	r3, r0
 8004478:	4618      	mov	r0, r3
 800447a:	3708      	adds	r7, #8
 800447c:	46bd      	mov	sp, r7
 800447e:	bd80      	pop	{r7, pc}

08004480 <_Z4loopv>:
uint16_t Debug_diff = 0;
//Debug_CNT = TIM4->CNT;
//Debug_diff = TIM4->CNT - Debug_CNT;

void loop()
{
 8004480:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004484:	b0f3      	sub	sp, #460	; 0x1cc
 8004486:	af14      	add	r7, sp, #80	; 0x50
  if (TIM4->CNT < 1000)
 8004488:	4b6b      	ldr	r3, [pc, #428]	; (8004638 <_Z4loopv+0x1b8>)
 800448a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800448c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8004490:	4293      	cmp	r3, r2
 8004492:	bf94      	ite	ls
 8004494:	2301      	movls	r3, #1
 8004496:	2300      	movhi	r3, #0
 8004498:	b2db      	uxtb	r3, r3
 800449a:	2b00      	cmp	r3, #0
 800449c:	f000 829e 	beq.w	80049dc <_Z4loopv+0x55c>
  {



    switch (Step)
 80044a0:	4b66      	ldr	r3, [pc, #408]	; (800463c <_Z4loopv+0x1bc>)
 80044a2:	781b      	ldrb	r3, [r3, #0]
 80044a4:	2b05      	cmp	r3, #5
 80044a6:	d00e      	beq.n	80044c6 <_Z4loopv+0x46>
 80044a8:	2b05      	cmp	r3, #5
 80044aa:	dc10      	bgt.n	80044ce <_Z4loopv+0x4e>
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d002      	beq.n	80044b6 <_Z4loopv+0x36>
 80044b0:	2b04      	cmp	r3, #4
 80044b2:	d004      	beq.n	80044be <_Z4loopv+0x3e>
      break;
    case 5:
      HAL_NVIC_DisableIRQ(EXTI0_IRQn);
      break;
    default:
      break;
 80044b4:	e00b      	b.n	80044ce <_Z4loopv+0x4e>
      HAL_NVIC_DisableIRQ(EXTI0_IRQn);
 80044b6:	2006      	movs	r0, #6
 80044b8:	f001 f9e5 	bl	8005886 <HAL_NVIC_DisableIRQ>
      break;
 80044bc:	e008      	b.n	80044d0 <_Z4loopv+0x50>
      HAL_NVIC_DisableIRQ(EXTI0_IRQn);
 80044be:	2006      	movs	r0, #6
 80044c0:	f001 f9e1 	bl	8005886 <HAL_NVIC_DisableIRQ>
      break;
 80044c4:	e004      	b.n	80044d0 <_Z4loopv+0x50>
      HAL_NVIC_DisableIRQ(EXTI0_IRQn);
 80044c6:	2006      	movs	r0, #6
 80044c8:	f001 f9dd 	bl	8005886 <HAL_NVIC_DisableIRQ>
      break;
 80044cc:	e000      	b.n	80044d0 <_Z4loopv+0x50>
      break;
 80044ce:	bf00      	nop
    }

    HAL_GPIO_TogglePin(ONBOARD_LED_2_GPIO_Port, ONBOARD_LED_2_Pin);   //debug Pin
 80044d0:	2120      	movs	r1, #32
 80044d2:	485b      	ldr	r0, [pc, #364]	; (8004640 <_Z4loopv+0x1c0>)
 80044d4:	f001 fe8e 	bl	80061f4 <HAL_GPIO_TogglePin>
    //get motor angle and update PPM_OnTime
    ADC_Select_Channel_11();
 80044d8:	f7ff ff48 	bl	800436c <ADC_Select_Channel_11>
	  adcValuesArray[0] = (uint16_t)ADC1->DR;
 80044dc:	4b59      	ldr	r3, [pc, #356]	; (8004644 <_Z4loopv+0x1c4>)
 80044de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80044e0:	b29a      	uxth	r2, r3
 80044e2:	4b59      	ldr	r3, [pc, #356]	; (8004648 <_Z4loopv+0x1c8>)
 80044e4:	801a      	strh	r2, [r3, #0]
	  ADC_Select_Channel_12();
 80044e6:	f7ff ff65 	bl	80043b4 <ADC_Select_Channel_12>
	  adcValuesArray[1] = (uint16_t)ADC1->DR;
 80044ea:	4b56      	ldr	r3, [pc, #344]	; (8004644 <_Z4loopv+0x1c4>)
 80044ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80044ee:	b29a      	uxth	r2, r3
 80044f0:	4b55      	ldr	r3, [pc, #340]	; (8004648 <_Z4loopv+0x1c8>)
 80044f2:	805a      	strh	r2, [r3, #2]
    //angle = motorAngle(adcValuesArray[1] - 1250, adcValuesArray[0] - 1250);
    //angle = ((atan2((float)adcValuesArray[1] - 1250, (float)adcValuesArray[0] - 1250) * 180) / M_PI) + 180;
    HAL_GPIO_TogglePin(ONBOARD_LED_2_GPIO_Port, ONBOARD_LED_2_Pin);   //debug Pin
 80044f4:	2120      	movs	r1, #32
 80044f6:	4852      	ldr	r0, [pc, #328]	; (8004640 <_Z4loopv+0x1c0>)
 80044f8:	f001 fe7c 	bl	80061f4 <HAL_GPIO_TogglePin>
    TIM4->CCR1 = (uint16_t)(fastPPM_MinTime + 500 + ((float)SBUS_Channels[2] / 2) + ((float)sin((angle + 45) * (M_PI / 180)) * (PID_Pitch_y / 10)) + ((float)cos((angle + 45) * (M_PI / 180)) * ((float)PID_Roll_y / 10)));
 80044fc:	4b53      	ldr	r3, [pc, #332]	; (800464c <_Z4loopv+0x1cc>)
 80044fe:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8004502:	4618      	mov	r0, r3
 8004504:	f7fc fc06 	bl	8000d14 <__aeabi_i2f>
 8004508:	4603      	mov	r3, r0
 800450a:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800450e:	4618      	mov	r0, r3
 8004510:	f7fc fd08 	bl	8000f24 <__aeabi_fdiv>
 8004514:	4603      	mov	r3, r0
 8004516:	494e      	ldr	r1, [pc, #312]	; (8004650 <_Z4loopv+0x1d0>)
 8004518:	4618      	mov	r0, r3
 800451a:	f7fc fb47 	bl	8000bac <__addsf3>
 800451e:	4603      	mov	r3, r0
 8004520:	461d      	mov	r5, r3
 8004522:	4b4c      	ldr	r3, [pc, #304]	; (8004654 <_Z4loopv+0x1d4>)
 8004524:	881b      	ldrh	r3, [r3, #0]
 8004526:	332d      	adds	r3, #45	; 0x2d
 8004528:	4618      	mov	r0, r3
 800452a:	f7fb ffa7 	bl	800047c <__aeabi_i2d>
 800452e:	a340      	add	r3, pc, #256	; (adr r3, 8004630 <_Z4loopv+0x1b0>)
 8004530:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004534:	f7fc f80c 	bl	8000550 <__aeabi_dmul>
 8004538:	4602      	mov	r2, r0
 800453a:	460b      	mov	r3, r1
 800453c:	4610      	mov	r0, r2
 800453e:	4619      	mov	r1, r3
 8004540:	f008 ff74 	bl	800d42c <sin>
 8004544:	4602      	mov	r2, r0
 8004546:	460b      	mov	r3, r1
 8004548:	4610      	mov	r0, r2
 800454a:	4619      	mov	r1, r3
 800454c:	f7fc fad8 	bl	8000b00 <__aeabi_d2f>
 8004550:	4604      	mov	r4, r0
 8004552:	4b41      	ldr	r3, [pc, #260]	; (8004658 <_Z4loopv+0x1d8>)
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	4941      	ldr	r1, [pc, #260]	; (800465c <_Z4loopv+0x1dc>)
 8004558:	4618      	mov	r0, r3
 800455a:	f7fc fce3 	bl	8000f24 <__aeabi_fdiv>
 800455e:	4603      	mov	r3, r0
 8004560:	4619      	mov	r1, r3
 8004562:	4620      	mov	r0, r4
 8004564:	f7fc fc2a 	bl	8000dbc <__aeabi_fmul>
 8004568:	4603      	mov	r3, r0
 800456a:	4619      	mov	r1, r3
 800456c:	4628      	mov	r0, r5
 800456e:	f7fc fb1d 	bl	8000bac <__addsf3>
 8004572:	4603      	mov	r3, r0
 8004574:	461d      	mov	r5, r3
 8004576:	4b37      	ldr	r3, [pc, #220]	; (8004654 <_Z4loopv+0x1d4>)
 8004578:	881b      	ldrh	r3, [r3, #0]
 800457a:	332d      	adds	r3, #45	; 0x2d
 800457c:	4618      	mov	r0, r3
 800457e:	f7fb ff7d 	bl	800047c <__aeabi_i2d>
 8004582:	a32b      	add	r3, pc, #172	; (adr r3, 8004630 <_Z4loopv+0x1b0>)
 8004584:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004588:	f7fb ffe2 	bl	8000550 <__aeabi_dmul>
 800458c:	4602      	mov	r2, r0
 800458e:	460b      	mov	r3, r1
 8004590:	4610      	mov	r0, r2
 8004592:	4619      	mov	r1, r3
 8004594:	f008 ff08 	bl	800d3a8 <cos>
 8004598:	4602      	mov	r2, r0
 800459a:	460b      	mov	r3, r1
 800459c:	4610      	mov	r0, r2
 800459e:	4619      	mov	r1, r3
 80045a0:	f7fc faae 	bl	8000b00 <__aeabi_d2f>
 80045a4:	4604      	mov	r4, r0
 80045a6:	4b2e      	ldr	r3, [pc, #184]	; (8004660 <_Z4loopv+0x1e0>)
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	492c      	ldr	r1, [pc, #176]	; (800465c <_Z4loopv+0x1dc>)
 80045ac:	4618      	mov	r0, r3
 80045ae:	f7fc fcb9 	bl	8000f24 <__aeabi_fdiv>
 80045b2:	4603      	mov	r3, r0
 80045b4:	4619      	mov	r1, r3
 80045b6:	4620      	mov	r0, r4
 80045b8:	f7fc fc00 	bl	8000dbc <__aeabi_fmul>
 80045bc:	4603      	mov	r3, r0
 80045be:	4619      	mov	r1, r3
 80045c0:	4628      	mov	r0, r5
 80045c2:	f7fc faf3 	bl	8000bac <__addsf3>
 80045c6:	4603      	mov	r3, r0
 80045c8:	4618      	mov	r0, r3
 80045ca:	f7fc fdf9 	bl	80011c0 <__aeabi_f2uiz>
 80045ce:	4603      	mov	r3, r0
 80045d0:	b29a      	uxth	r2, r3
 80045d2:	4b19      	ldr	r3, [pc, #100]	; (8004638 <_Z4loopv+0x1b8>)
 80045d4:	635a      	str	r2, [r3, #52]	; 0x34
    
    
    

    switch (Step)
 80045d6:	4b19      	ldr	r3, [pc, #100]	; (800463c <_Z4loopv+0x1bc>)
 80045d8:	781b      	ldrb	r3, [r3, #0]
 80045da:	2b09      	cmp	r3, #9
 80045dc:	f200 81e6 	bhi.w	80049ac <_Z4loopv+0x52c>
 80045e0:	a201      	add	r2, pc, #4	; (adr r2, 80045e8 <_Z4loopv+0x168>)
 80045e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045e6:	bf00      	nop
 80045e8:	08004611 	.word	0x08004611
 80045ec:	0800461d 	.word	0x0800461d
 80045f0:	08004669 	.word	0x08004669
 80045f4:	080048bd 	.word	0x080048bd
 80045f8:	080048e3 	.word	0x080048e3
 80045fc:	080048ef 	.word	0x080048ef
 8004600:	08004989 	.word	0x08004989
 8004604:	080049ad 	.word	0x080049ad
 8004608:	080049ad 	.word	0x080049ad
 800460c:	080049a5 	.word	0x080049a5
    {
    case 0:   //get quaternions
      MPU6050_resetFIFO();
 8004610:	f7fd fa42 	bl	8001a98 <_Z17MPU6050_resetFIFOv>
      HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8004614:	2006      	movs	r0, #6
 8004616:	f001 f928 	bl	800586a <HAL_NVIC_EnableIRQ>
      break;
 800461a:	e1ce      	b.n	80049ba <_Z4loopv+0x53a>
    case 1:
      if (SBUSNewPackage == true) SBUS_PostProcessing();
 800461c:	4b11      	ldr	r3, [pc, #68]	; (8004664 <_Z4loopv+0x1e4>)
 800461e:	781b      	ldrb	r3, [r3, #0]
 8004620:	2b01      	cmp	r3, #1
 8004622:	f040 81c5 	bne.w	80049b0 <_Z4loopv+0x530>
 8004626:	f7ff f9db 	bl	80039e0 <_Z19SBUS_PostProcessingv>
      break;
 800462a:	e1c1      	b.n	80049b0 <_Z4loopv+0x530>
 800462c:	f3af 8000 	nop.w
 8004630:	a2529d39 	.word	0xa2529d39
 8004634:	3f91df46 	.word	0x3f91df46
 8004638:	40000800 	.word	0x40000800
 800463c:	20000906 	.word	0x20000906
 8004640:	40020000 	.word	0x40020000
 8004644:	40012000 	.word	0x40012000
 8004648:	20000900 	.word	0x20000900
 800464c:	2000061c 	.word	0x2000061c
 8004650:	44bb8000 	.word	0x44bb8000
 8004654:	20000904 	.word	0x20000904
 8004658:	200004b4 	.word	0x200004b4
 800465c:	41200000 	.word	0x41200000
 8004660:	200004b8 	.word	0x200004b8
 8004664:	2000062d 	.word	0x2000062d
    case 2:
      for (size_t i = 0; i < 1; i++)
 8004668:	2300      	movs	r3, #0
 800466a:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 800466e:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8004672:	2b00      	cmp	r3, #0
 8004674:	f040 819e 	bne.w	80049b4 <_Z4loopv+0x534>
	      for (size_t i = 0; i < x; i++)
	      {
	      	msgTransmit[i] = msg[i];
	      }
	      CDC_Transmit_FS((unsigned char*)msgTransmit, sizeof(msgTransmit));
      }
 8004678:	466b      	mov	r3, sp
 800467a:	607b      	str	r3, [r7, #4]
	      sprintf((char*)msg,"%f %f %f %f %f %f %f %f %f %hd %hd %hu \r\n"                                         \
 800467c:	4bb0      	ldr	r3, [pc, #704]	; (8004940 <_Z4loopv+0x4c0>)
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	4618      	mov	r0, r3
 8004682:	f7fb ff0d 	bl	80004a0 <__aeabi_f2d>
 8004686:	e9c7 010c 	strd	r0, r1, [r7, #48]	; 0x30
 800468a:	4bae      	ldr	r3, [pc, #696]	; (8004944 <_Z4loopv+0x4c4>)
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	4618      	mov	r0, r3
 8004690:	f7fb ff06 	bl	80004a0 <__aeabi_f2d>
 8004694:	e9c7 010a 	strd	r0, r1, [r7, #40]	; 0x28
 8004698:	4bab      	ldr	r3, [pc, #684]	; (8004948 <_Z4loopv+0x4c8>)
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	4618      	mov	r0, r3
 800469e:	f7fb feff 	bl	80004a0 <__aeabi_f2d>
 80046a2:	e9c7 0108 	strd	r0, r1, [r7, #32]
 80046a6:	4ba9      	ldr	r3, [pc, #676]	; (800494c <_Z4loopv+0x4cc>)
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	4618      	mov	r0, r3
 80046ac:	f7fb fef8 	bl	80004a0 <__aeabi_f2d>
 80046b0:	e9c7 0106 	strd	r0, r1, [r7, #24]
 80046b4:	4ba6      	ldr	r3, [pc, #664]	; (8004950 <_Z4loopv+0x4d0>)
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	4618      	mov	r0, r3
 80046ba:	f7fb fef1 	bl	80004a0 <__aeabi_f2d>
 80046be:	e9c7 0104 	strd	r0, r1, [r7, #16]
 80046c2:	4ba4      	ldr	r3, [pc, #656]	; (8004954 <_Z4loopv+0x4d4>)
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	4618      	mov	r0, r3
 80046c8:	f7fb feea 	bl	80004a0 <__aeabi_f2d>
 80046cc:	e9c7 0102 	strd	r0, r1, [r7, #8]
        , Yaw_PID_k[0] * 100                                                                                         \
 80046d0:	4ba1      	ldr	r3, [pc, #644]	; (8004958 <_Z4loopv+0x4d8>)
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	49a1      	ldr	r1, [pc, #644]	; (800495c <_Z4loopv+0x4dc>)
 80046d6:	4618      	mov	r0, r3
 80046d8:	f7fc fb70 	bl	8000dbc <__aeabi_fmul>
 80046dc:	4603      	mov	r3, r0
	      sprintf((char*)msg,"%f %f %f %f %f %f %f %f %f %hd %hd %hu \r\n"                                         \
 80046de:	4618      	mov	r0, r3
 80046e0:	f7fb fede 	bl	80004a0 <__aeabi_f2d>
 80046e4:	4605      	mov	r5, r0
 80046e6:	460e      	mov	r6, r1
        , Yaw_PID_k[1] * 100                                                                                         \
 80046e8:	4b9b      	ldr	r3, [pc, #620]	; (8004958 <_Z4loopv+0x4d8>)
 80046ea:	685b      	ldr	r3, [r3, #4]
 80046ec:	499b      	ldr	r1, [pc, #620]	; (800495c <_Z4loopv+0x4dc>)
 80046ee:	4618      	mov	r0, r3
 80046f0:	f7fc fb64 	bl	8000dbc <__aeabi_fmul>
 80046f4:	4603      	mov	r3, r0
	      sprintf((char*)msg,"%f %f %f %f %f %f %f %f %f %hd %hd %hu \r\n"                                         \
 80046f6:	4618      	mov	r0, r3
 80046f8:	f7fb fed2 	bl	80004a0 <__aeabi_f2d>
 80046fc:	4682      	mov	sl, r0
 80046fe:	468b      	mov	fp, r1
        , Yaw_PID_k[2] * 100                                                                                         \
 8004700:	4b95      	ldr	r3, [pc, #596]	; (8004958 <_Z4loopv+0x4d8>)
 8004702:	689b      	ldr	r3, [r3, #8]
 8004704:	4995      	ldr	r1, [pc, #596]	; (800495c <_Z4loopv+0x4dc>)
 8004706:	4618      	mov	r0, r3
 8004708:	f7fc fb58 	bl	8000dbc <__aeabi_fmul>
 800470c:	4603      	mov	r3, r0
	      sprintf((char*)msg,"%f %f %f %f %f %f %f %f %f %hd %hd %hu \r\n"                                         \
 800470e:	4618      	mov	r0, r3
 8004710:	f7fb fec6 	bl	80004a0 <__aeabi_f2d>
 8004714:	4680      	mov	r8, r0
 8004716:	4689      	mov	r9, r1
        , 2 * (int16_t)(((float)atan((float)MPUoutputQuaternion[0] / (float)MPUoutputQuaternion[1]) * 180) / M_PI)   \
 8004718:	4b91      	ldr	r3, [pc, #580]	; (8004960 <_Z4loopv+0x4e0>)
 800471a:	681a      	ldr	r2, [r3, #0]
 800471c:	4b90      	ldr	r3, [pc, #576]	; (8004960 <_Z4loopv+0x4e0>)
 800471e:	685b      	ldr	r3, [r3, #4]
 8004720:	4619      	mov	r1, r3
 8004722:	4610      	mov	r0, r2
 8004724:	f7fc fbfe 	bl	8000f24 <__aeabi_fdiv>
 8004728:	4603      	mov	r3, r0
 800472a:	4618      	mov	r0, r3
 800472c:	f7fe fae8 	bl	8002d00 <_ZSt4atanf>
 8004730:	4603      	mov	r3, r0
 8004732:	498c      	ldr	r1, [pc, #560]	; (8004964 <_Z4loopv+0x4e4>)
 8004734:	4618      	mov	r0, r3
 8004736:	f7fc fb41 	bl	8000dbc <__aeabi_fmul>
 800473a:	4603      	mov	r3, r0
 800473c:	4618      	mov	r0, r3
 800473e:	f7fb feaf 	bl	80004a0 <__aeabi_f2d>
 8004742:	a37d      	add	r3, pc, #500	; (adr r3, 8004938 <_Z4loopv+0x4b8>)
 8004744:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004748:	f7fc f82c 	bl	80007a4 <__aeabi_ddiv>
 800474c:	4602      	mov	r2, r0
 800474e:	460b      	mov	r3, r1
 8004750:	4610      	mov	r0, r2
 8004752:	4619      	mov	r1, r3
 8004754:	f7fc f9ac 	bl	8000ab0 <__aeabi_d2iz>
 8004758:	4603      	mov	r3, r0
 800475a:	b21b      	sxth	r3, r3
	      sprintf((char*)msg,"%f %f %f %f %f %f %f %f %f %hd %hd %hu \r\n"                                         \
 800475c:	005c      	lsls	r4, r3, #1
        , 2 * (int16_t)(((float)acos((float)MPUoutputQuaternion[0] / (float)1073741824) * 180) / M_PI)               \
 800475e:	4b80      	ldr	r3, [pc, #512]	; (8004960 <_Z4loopv+0x4e0>)
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f04f 419d 	mov.w	r1, #1317011456	; 0x4e800000
 8004766:	4618      	mov	r0, r3
 8004768:	f7fc fbdc 	bl	8000f24 <__aeabi_fdiv>
 800476c:	4603      	mov	r3, r0
 800476e:	4618      	mov	r0, r3
 8004770:	f7ff fe7a 	bl	8004468 <_ZSt4acosf>
 8004774:	4603      	mov	r3, r0
 8004776:	497b      	ldr	r1, [pc, #492]	; (8004964 <_Z4loopv+0x4e4>)
 8004778:	4618      	mov	r0, r3
 800477a:	f7fc fb1f 	bl	8000dbc <__aeabi_fmul>
 800477e:	4603      	mov	r3, r0
 8004780:	4618      	mov	r0, r3
 8004782:	f7fb fe8d 	bl	80004a0 <__aeabi_f2d>
 8004786:	a36c      	add	r3, pc, #432	; (adr r3, 8004938 <_Z4loopv+0x4b8>)
 8004788:	e9d3 2300 	ldrd	r2, r3, [r3]
 800478c:	f7fc f80a 	bl	80007a4 <__aeabi_ddiv>
 8004790:	4602      	mov	r2, r0
 8004792:	460b      	mov	r3, r1
 8004794:	4610      	mov	r0, r2
 8004796:	4619      	mov	r1, r3
 8004798:	f7fc f98a 	bl	8000ab0 <__aeabi_d2iz>
 800479c:	4603      	mov	r3, r0
 800479e:	b21b      	sxth	r3, r3
	      sprintf((char*)msg,"%f %f %f %f %f %f %f %f %f %hd %hd %hu \r\n"                                         \
 80047a0:	005a      	lsls	r2, r3, #1
 80047a2:	4b71      	ldr	r3, [pc, #452]	; (8004968 <_Z4loopv+0x4e8>)
 80047a4:	881b      	ldrh	r3, [r3, #0]
 80047a6:	f107 0038 	add.w	r0, r7, #56	; 0x38
 80047aa:	9312      	str	r3, [sp, #72]	; 0x48
 80047ac:	9211      	str	r2, [sp, #68]	; 0x44
 80047ae:	9410      	str	r4, [sp, #64]	; 0x40
 80047b0:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 80047b4:	e9cd ab0c 	strd	sl, fp, [sp, #48]	; 0x30
 80047b8:	e9cd 560a 	strd	r5, r6, [sp, #40]	; 0x28
 80047bc:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80047c0:	e9cd 3408 	strd	r3, r4, [sp, #32]
 80047c4:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80047c8:	e9cd 3406 	strd	r3, r4, [sp, #24]
 80047cc:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 80047d0:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80047d4:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 80047d8:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80047dc:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 80047e0:	e9cd 3400 	strd	r3, r4, [sp]
 80047e4:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80047e8:	4960      	ldr	r1, [pc, #384]	; (800496c <_Z4loopv+0x4ec>)
 80047ea:	f00b fe0b 	bl	8010404 <siprintf>
	      uint8_t x = 0;
 80047ee:	2300      	movs	r3, #0
 80047f0:	f887 3173 	strb.w	r3, [r7, #371]	; 0x173
	      while (msg[x] != NULL)
 80047f4:	f897 3173 	ldrb.w	r3, [r7, #371]	; 0x173
 80047f8:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80047fc:	5cd3      	ldrb	r3, [r2, r3]
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d005      	beq.n	800480e <_Z4loopv+0x38e>
	      	x++;
 8004802:	f897 3173 	ldrb.w	r3, [r7, #371]	; 0x173
 8004806:	3301      	adds	r3, #1
 8004808:	f887 3173 	strb.w	r3, [r7, #371]	; 0x173
	      while (msg[x] != NULL)
 800480c:	e7f2      	b.n	80047f4 <_Z4loopv+0x374>
	      unsigned char msgTransmit[x];
 800480e:	f897 3173 	ldrb.w	r3, [r7, #371]	; 0x173
 8004812:	1e5c      	subs	r4, r3, #1
 8004814:	f8c7 4168 	str.w	r4, [r7, #360]	; 0x168
 8004818:	4623      	mov	r3, r4
 800481a:	3301      	adds	r3, #1
 800481c:	4618      	mov	r0, r3
 800481e:	f04f 0100 	mov.w	r1, #0
 8004822:	f04f 0200 	mov.w	r2, #0
 8004826:	f04f 0300 	mov.w	r3, #0
 800482a:	00cb      	lsls	r3, r1, #3
 800482c:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8004830:	00c2      	lsls	r2, r0, #3
 8004832:	4623      	mov	r3, r4
 8004834:	3301      	adds	r3, #1
 8004836:	4618      	mov	r0, r3
 8004838:	f04f 0100 	mov.w	r1, #0
 800483c:	f04f 0200 	mov.w	r2, #0
 8004840:	f04f 0300 	mov.w	r3, #0
 8004844:	00cb      	lsls	r3, r1, #3
 8004846:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800484a:	00c2      	lsls	r2, r0, #3
 800484c:	4623      	mov	r3, r4
 800484e:	3301      	adds	r3, #1
 8004850:	3307      	adds	r3, #7
 8004852:	08db      	lsrs	r3, r3, #3
 8004854:	00db      	lsls	r3, r3, #3
 8004856:	ebad 0d03 	sub.w	sp, sp, r3
 800485a:	ab14      	add	r3, sp, #80	; 0x50
 800485c:	3300      	adds	r3, #0
 800485e:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
	      for (size_t i = 0; i < x; i++)
 8004862:	2300      	movs	r3, #0
 8004864:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
 8004868:	f897 3173 	ldrb.w	r3, [r7, #371]	; 0x173
 800486c:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8004870:	429a      	cmp	r2, r3
 8004872:	d212      	bcs.n	800489a <_Z4loopv+0x41a>
	      	msgTransmit[i] = msg[i];
 8004874:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8004878:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 800487c:	4413      	add	r3, r2
 800487e:	7819      	ldrb	r1, [r3, #0]
 8004880:	f8d7 2164 	ldr.w	r2, [r7, #356]	; 0x164
 8004884:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8004888:	4413      	add	r3, r2
 800488a:	460a      	mov	r2, r1
 800488c:	701a      	strb	r2, [r3, #0]
	      for (size_t i = 0; i < x; i++)
 800488e:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8004892:	3301      	adds	r3, #1
 8004894:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
 8004898:	e7e6      	b.n	8004868 <_Z4loopv+0x3e8>
	      CDC_Transmit_FS((unsigned char*)msgTransmit, sizeof(msgTransmit));
 800489a:	f8d7 2164 	ldr.w	r2, [r7, #356]	; 0x164
 800489e:	b2a3      	uxth	r3, r4
 80048a0:	3301      	adds	r3, #1
 80048a2:	b29b      	uxth	r3, r3
 80048a4:	4619      	mov	r1, r3
 80048a6:	4610      	mov	r0, r2
 80048a8:	f008 f94c 	bl	800cb44 <CDC_Transmit_FS>
 80048ac:	f8d7 d004 	ldr.w	sp, [r7, #4]
      for (size_t i = 0; i < 1; i++)
 80048b0:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 80048b4:	3301      	adds	r3, #1
 80048b6:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 80048ba:	e6d8      	b.n	800466e <_Z4loopv+0x1ee>
      //  }
      //  CDC_Transmit_FS((unsigned char*)msgTransmit, sizeof(msgTransmit));
      //}
      break;
    case 3:
      Debug_CNT = TIM4->CNT;
 80048bc:	4b2c      	ldr	r3, [pc, #176]	; (8004970 <_Z4loopv+0x4f0>)
 80048be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048c0:	b29a      	uxth	r2, r3
 80048c2:	4b2c      	ldr	r3, [pc, #176]	; (8004974 <_Z4loopv+0x4f4>)
 80048c4:	801a      	strh	r2, [r3, #0]
      getWXQuaternion();
 80048c6:	f7fe fa4b 	bl	8002d60 <_Z15getWXQuaternionv>
      Update_FrameOriginQuaternion();
 80048ca:	f7fe fafb 	bl	8002ec4 <_Z28Update_FrameOriginQuaternionv>
      Debug_diff = TIM4->CNT - Debug_CNT;
 80048ce:	4b28      	ldr	r3, [pc, #160]	; (8004970 <_Z4loopv+0x4f0>)
 80048d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048d2:	b29a      	uxth	r2, r3
 80048d4:	4b27      	ldr	r3, [pc, #156]	; (8004974 <_Z4loopv+0x4f4>)
 80048d6:	881b      	ldrh	r3, [r3, #0]
 80048d8:	1ad3      	subs	r3, r2, r3
 80048da:	b29a      	uxth	r2, r3
 80048dc:	4b26      	ldr	r3, [pc, #152]	; (8004978 <_Z4loopv+0x4f8>)
 80048de:	801a      	strh	r2, [r3, #0]
      break;
 80048e0:	e06b      	b.n	80049ba <_Z4loopv+0x53a>
    case 4:
      MPU6050_readQuaternionBytes();
 80048e2:	f7fd f8e3 	bl	8001aac <_Z27MPU6050_readQuaternionBytesv>
      HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80048e6:	2006      	movs	r0, #6
 80048e8:	f000 ffbf 	bl	800586a <HAL_NVIC_EnableIRQ>
      break;
 80048ec:	e065      	b.n	80049ba <_Z4loopv+0x53a>
    case 5:
      MPU6050_ConvertToQuaternions();
 80048ee:	f7fd f991 	bl	8001c14 <_Z28MPU6050_ConvertToQuaternionsv>
      HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80048f2:	2006      	movs	r0, #6
 80048f4:	f000 ffb9 	bl	800586a <HAL_NVIC_EnableIRQ>
      Update_PID();
 80048f8:	f7fe fb78 	bl	8002fec <_Z10Update_PIDv>
      if (SBUS_Channels[2] > -990)
 80048fc:	4b1f      	ldr	r3, [pc, #124]	; (800497c <_Z4loopv+0x4fc>)
 80048fe:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8004902:	f46f 7277 	mvn.w	r2, #988	; 0x3dc
 8004906:	4293      	cmp	r3, r2
 8004908:	db0e      	blt.n	8004928 <_Z4loopv+0x4a8>
      {
        TIM3->CCR1 = (uint16_t)(slowPPM1_MinTime + 1000 - ((slowPPM1_MaxTime - slowPPM1_MinTime) / 2) - PID_Yaw_y);
 800490a:	4b12      	ldr	r3, [pc, #72]	; (8004954 <_Z4loopv+0x4d4>)
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	4619      	mov	r1, r3
 8004910:	481b      	ldr	r0, [pc, #108]	; (8004980 <_Z4loopv+0x500>)
 8004912:	f7fc f949 	bl	8000ba8 <__aeabi_fsub>
 8004916:	4603      	mov	r3, r0
 8004918:	4618      	mov	r0, r3
 800491a:	f7fc fc51 	bl	80011c0 <__aeabi_f2uiz>
 800491e:	4603      	mov	r3, r0
 8004920:	b29a      	uxth	r2, r3
 8004922:	4b18      	ldr	r3, [pc, #96]	; (8004984 <_Z4loopv+0x504>)
 8004924:	635a      	str	r2, [r3, #52]	; 0x34
      }
      else
      {
        TIM3->CCR1 = slowPPM1_MinTime;
      }
      break;
 8004926:	e048      	b.n	80049ba <_Z4loopv+0x53a>
        TIM3->CCR1 = slowPPM1_MinTime;
 8004928:	4b16      	ldr	r3, [pc, #88]	; (8004984 <_Z4loopv+0x504>)
 800492a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800492e:	635a      	str	r2, [r3, #52]	; 0x34
      break;
 8004930:	e043      	b.n	80049ba <_Z4loopv+0x53a>
 8004932:	bf00      	nop
 8004934:	f3af 8000 	nop.w
 8004938:	54442d18 	.word	0x54442d18
 800493c:	400921fb 	.word	0x400921fb
 8004940:	200004a8 	.word	0x200004a8
 8004944:	200004ac 	.word	0x200004ac
 8004948:	200004b0 	.word	0x200004b0
 800494c:	200004b4 	.word	0x200004b4
 8004950:	200004b8 	.word	0x200004b8
 8004954:	200004bc 	.word	0x200004bc
 8004958:	20000518 	.word	0x20000518
 800495c:	42c80000 	.word	0x42c80000
 8004960:	200004c0 	.word	0x200004c0
 8004964:	43340000 	.word	0x43340000
 8004968:	20000904 	.word	0x20000904
 800496c:	08012718 	.word	0x08012718
 8004970:	40000800 	.word	0x40000800
 8004974:	20000908 	.word	0x20000908
 8004978:	2000090a 	.word	0x2000090a
 800497c:	2000061c 	.word	0x2000061c
 8004980:	44bb8000 	.word	0x44bb8000
 8004984:	40000400 	.word	0x40000400
    case 6:
      HAL_GPIO_TogglePin(ONBOARD_LED_1_GPIO_Port, ONBOARD_LED_1_Pin);   //debug Pin
 8004988:	2110      	movs	r1, #16
 800498a:	4820      	ldr	r0, [pc, #128]	; (8004a0c <_Z4loopv+0x58c>)
 800498c:	f001 fc32 	bl	80061f4 <HAL_GPIO_TogglePin>
      if (SBUS_Channels[4] >= 999) getPIDValues();
 8004990:	4b1f      	ldr	r3, [pc, #124]	; (8004a10 <_Z4loopv+0x590>)
 8004992:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8004996:	f240 32e6 	movw	r2, #998	; 0x3e6
 800499a:	4293      	cmp	r3, r2
 800499c:	dd0c      	ble.n	80049b8 <_Z4loopv+0x538>
 800499e:	f7fe fcdd 	bl	800335c <_Z12getPIDValuesv>
      break;
 80049a2:	e009      	b.n	80049b8 <_Z4loopv+0x538>
    case 9:
      Step = 255;
 80049a4:	4b1b      	ldr	r3, [pc, #108]	; (8004a14 <_Z4loopv+0x594>)
 80049a6:	22ff      	movs	r2, #255	; 0xff
 80049a8:	701a      	strb	r2, [r3, #0]
      break;
 80049aa:	e006      	b.n	80049ba <_Z4loopv+0x53a>
    default:
      break;
 80049ac:	bf00      	nop
 80049ae:	e004      	b.n	80049ba <_Z4loopv+0x53a>
      break;
 80049b0:	bf00      	nop
 80049b2:	e002      	b.n	80049ba <_Z4loopv+0x53a>
      break;
 80049b4:	bf00      	nop
 80049b6:	e000      	b.n	80049ba <_Z4loopv+0x53a>
      break;
 80049b8:	bf00      	nop
    }
    Step ++;
 80049ba:	4b16      	ldr	r3, [pc, #88]	; (8004a14 <_Z4loopv+0x594>)
 80049bc:	781b      	ldrb	r3, [r3, #0]
 80049be:	3301      	adds	r3, #1
 80049c0:	b2da      	uxtb	r2, r3
 80049c2:	4b14      	ldr	r3, [pc, #80]	; (8004a14 <_Z4loopv+0x594>)
 80049c4:	701a      	strb	r2, [r3, #0]
    while (TIM4->CNT <= 1000)
 80049c6:	4b14      	ldr	r3, [pc, #80]	; (8004a18 <_Z4loopv+0x598>)
 80049c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049ca:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80049ce:	bf94      	ite	ls
 80049d0:	2301      	movls	r3, #1
 80049d2:	2300      	movhi	r3, #0
 80049d4:	b2db      	uxtb	r3, r3
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d000      	beq.n	80049dc <_Z4loopv+0x55c>
 80049da:	e7f4      	b.n	80049c6 <_Z4loopv+0x546>
    {
    }
  }
  
  if ((HAL_GetTick() - timestamp) >= 50)
 80049dc:	f000 fc06 	bl	80051ec <HAL_GetTick>
 80049e0:	4602      	mov	r2, r0
 80049e2:	4b0e      	ldr	r3, [pc, #56]	; (8004a1c <_Z4loopv+0x59c>)
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	1ad3      	subs	r3, r2, r3
 80049e8:	2b31      	cmp	r3, #49	; 0x31
 80049ea:	bf8c      	ite	hi
 80049ec:	2301      	movhi	r3, #1
 80049ee:	2300      	movls	r3, #0
 80049f0:	b2db      	uxtb	r3, r3
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d004      	beq.n	8004a00 <_Z4loopv+0x580>
  {
    timestamp += 50;
 80049f6:	4b09      	ldr	r3, [pc, #36]	; (8004a1c <_Z4loopv+0x59c>)
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	3332      	adds	r3, #50	; 0x32
 80049fc:	4a07      	ldr	r2, [pc, #28]	; (8004a1c <_Z4loopv+0x59c>)
 80049fe:	6013      	str	r3, [r2, #0]
  //// fastPPM_ONTime = (uint16_t)((((float)angle * (float)fastPPM_MinTime) / (float)360) + (float)fastPPM_MinTime);
  //fastPPM_ONTime = (uint16_t)(fastPPM_MinTime + ((float)SBUS_Channels[2] / 2));
  //fastPPM_OFFTime = fastPPM_Pulselength - fastPPM_ONTime;//OFF time in microseconds
  //TIM4->CCR1 = (uint16_t)(fastPPM_MinTime + 500 + ((float)SBUS_Channels[2] / 2) + ((float)sin((angle + 0) * (M_PI / 180)) * ((float)SBUS_Channels[0] / -10)) + ((float)cos((angle + 0) * (M_PI / 180)) * ((float)SBUS_Channels[1] / -10)));
  }
}
 8004a00:	bf00      	nop
 8004a02:	f507 77be 	add.w	r7, r7, #380	; 0x17c
 8004a06:	46bd      	mov	sp, r7
 8004a08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004a0c:	40020000 	.word	0x40020000
 8004a10:	2000061c 	.word	0x2000061c
 8004a14:	20000906 	.word	0x20000906
 8004a18:	40000800 	.word	0x40000800
 8004a1c:	200008fc 	.word	0x200008fc

08004a20 <_Z41__static_initialization_and_destruction_0ii>:
        }
      }  
      angle = offset + ((atan((float)hall_1 / (float)hall_2) * 180) / M_PI);
    }  
    return angle;
}
 8004a20:	b480      	push	{r7}
 8004a22:	b083      	sub	sp, #12
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	6078      	str	r0, [r7, #4]
 8004a28:	6039      	str	r1, [r7, #0]
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	2b01      	cmp	r3, #1
 8004a2e:	d109      	bne.n	8004a44 <_Z41__static_initialization_and_destruction_0ii+0x24>
 8004a30:	683b      	ldr	r3, [r7, #0]
 8004a32:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004a36:	4293      	cmp	r3, r2
 8004a38:	d104      	bne.n	8004a44 <_Z41__static_initialization_and_destruction_0ii+0x24>
uint16_t Debug_CNT = TIM4->CNT;
 8004a3a:	4b05      	ldr	r3, [pc, #20]	; (8004a50 <_Z41__static_initialization_and_destruction_0ii+0x30>)
 8004a3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a3e:	b29a      	uxth	r2, r3
 8004a40:	4b04      	ldr	r3, [pc, #16]	; (8004a54 <_Z41__static_initialization_and_destruction_0ii+0x34>)
 8004a42:	801a      	strh	r2, [r3, #0]
}
 8004a44:	bf00      	nop
 8004a46:	370c      	adds	r7, #12
 8004a48:	46bd      	mov	sp, r7
 8004a4a:	bc80      	pop	{r7}
 8004a4c:	4770      	bx	lr
 8004a4e:	bf00      	nop
 8004a50:	40000800 	.word	0x40000800
 8004a54:	20000908 	.word	0x20000908

08004a58 <_GLOBAL__sub_I_timestamp>:
 8004a58:	b580      	push	{r7, lr}
 8004a5a:	af00      	add	r7, sp, #0
 8004a5c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8004a60:	2001      	movs	r0, #1
 8004a62:	f7ff ffdd 	bl	8004a20 <_Z41__static_initialization_and_destruction_0ii>
 8004a66:	bd80      	pop	{r7, pc}

08004a68 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004a68:	b480      	push	{r7}
 8004a6a:	b083      	sub	sp, #12
 8004a6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004a6e:	2300      	movs	r3, #0
 8004a70:	607b      	str	r3, [r7, #4]
 8004a72:	4b0f      	ldr	r3, [pc, #60]	; (8004ab0 <HAL_MspInit+0x48>)
 8004a74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a76:	4a0e      	ldr	r2, [pc, #56]	; (8004ab0 <HAL_MspInit+0x48>)
 8004a78:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004a7c:	6453      	str	r3, [r2, #68]	; 0x44
 8004a7e:	4b0c      	ldr	r3, [pc, #48]	; (8004ab0 <HAL_MspInit+0x48>)
 8004a80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a82:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004a86:	607b      	str	r3, [r7, #4]
 8004a88:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004a8a:	2300      	movs	r3, #0
 8004a8c:	603b      	str	r3, [r7, #0]
 8004a8e:	4b08      	ldr	r3, [pc, #32]	; (8004ab0 <HAL_MspInit+0x48>)
 8004a90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a92:	4a07      	ldr	r2, [pc, #28]	; (8004ab0 <HAL_MspInit+0x48>)
 8004a94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a98:	6413      	str	r3, [r2, #64]	; 0x40
 8004a9a:	4b05      	ldr	r3, [pc, #20]	; (8004ab0 <HAL_MspInit+0x48>)
 8004a9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004aa2:	603b      	str	r3, [r7, #0]
 8004aa4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004aa6:	bf00      	nop
 8004aa8:	370c      	adds	r7, #12
 8004aaa:	46bd      	mov	sp, r7
 8004aac:	bc80      	pop	{r7}
 8004aae:	4770      	bx	lr
 8004ab0:	40023800 	.word	0x40023800

08004ab4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8004ab4:	b580      	push	{r7, lr}
 8004ab6:	b08a      	sub	sp, #40	; 0x28
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004abc:	f107 0314 	add.w	r3, r7, #20
 8004ac0:	2200      	movs	r2, #0
 8004ac2:	601a      	str	r2, [r3, #0]
 8004ac4:	605a      	str	r2, [r3, #4]
 8004ac6:	609a      	str	r2, [r3, #8]
 8004ac8:	60da      	str	r2, [r3, #12]
 8004aca:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	4a17      	ldr	r2, [pc, #92]	; (8004b30 <HAL_ADC_MspInit+0x7c>)
 8004ad2:	4293      	cmp	r3, r2
 8004ad4:	d127      	bne.n	8004b26 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8004ad6:	2300      	movs	r3, #0
 8004ad8:	613b      	str	r3, [r7, #16]
 8004ada:	4b16      	ldr	r3, [pc, #88]	; (8004b34 <HAL_ADC_MspInit+0x80>)
 8004adc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ade:	4a15      	ldr	r2, [pc, #84]	; (8004b34 <HAL_ADC_MspInit+0x80>)
 8004ae0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ae4:	6453      	str	r3, [r2, #68]	; 0x44
 8004ae6:	4b13      	ldr	r3, [pc, #76]	; (8004b34 <HAL_ADC_MspInit+0x80>)
 8004ae8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004aea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004aee:	613b      	str	r3, [r7, #16]
 8004af0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004af2:	2300      	movs	r3, #0
 8004af4:	60fb      	str	r3, [r7, #12]
 8004af6:	4b0f      	ldr	r3, [pc, #60]	; (8004b34 <HAL_ADC_MspInit+0x80>)
 8004af8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004afa:	4a0e      	ldr	r2, [pc, #56]	; (8004b34 <HAL_ADC_MspInit+0x80>)
 8004afc:	f043 0304 	orr.w	r3, r3, #4
 8004b00:	6313      	str	r3, [r2, #48]	; 0x30
 8004b02:	4b0c      	ldr	r3, [pc, #48]	; (8004b34 <HAL_ADC_MspInit+0x80>)
 8004b04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b06:	f003 0304 	and.w	r3, r3, #4
 8004b0a:	60fb      	str	r3, [r7, #12]
 8004b0c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC1     ------> ADC1_IN11
    PC2     ------> ADC1_IN12
    */
    GPIO_InitStruct.Pin = ONBOARD_ADC_2_Pin|ONBOARD_ADC_1_Pin;
 8004b0e:	2306      	movs	r3, #6
 8004b10:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004b12:	2303      	movs	r3, #3
 8004b14:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b16:	2300      	movs	r3, #0
 8004b18:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004b1a:	f107 0314 	add.w	r3, r7, #20
 8004b1e:	4619      	mov	r1, r3
 8004b20:	4805      	ldr	r0, [pc, #20]	; (8004b38 <HAL_ADC_MspInit+0x84>)
 8004b22:	f001 f9b1 	bl	8005e88 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8004b26:	bf00      	nop
 8004b28:	3728      	adds	r7, #40	; 0x28
 8004b2a:	46bd      	mov	sp, r7
 8004b2c:	bd80      	pop	{r7, pc}
 8004b2e:	bf00      	nop
 8004b30:	40012000 	.word	0x40012000
 8004b34:	40023800 	.word	0x40023800
 8004b38:	40020800 	.word	0x40020800

08004b3c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004b3c:	b580      	push	{r7, lr}
 8004b3e:	b08a      	sub	sp, #40	; 0x28
 8004b40:	af00      	add	r7, sp, #0
 8004b42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004b44:	f107 0314 	add.w	r3, r7, #20
 8004b48:	2200      	movs	r2, #0
 8004b4a:	601a      	str	r2, [r3, #0]
 8004b4c:	605a      	str	r2, [r3, #4]
 8004b4e:	609a      	str	r2, [r3, #8]
 8004b50:	60da      	str	r2, [r3, #12]
 8004b52:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	4a48      	ldr	r2, [pc, #288]	; (8004c7c <HAL_I2C_MspInit+0x140>)
 8004b5a:	4293      	cmp	r3, r2
 8004b5c:	f040 8089 	bne.w	8004c72 <HAL_I2C_MspInit+0x136>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004b60:	2300      	movs	r3, #0
 8004b62:	613b      	str	r3, [r7, #16]
 8004b64:	4b46      	ldr	r3, [pc, #280]	; (8004c80 <HAL_I2C_MspInit+0x144>)
 8004b66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b68:	4a45      	ldr	r2, [pc, #276]	; (8004c80 <HAL_I2C_MspInit+0x144>)
 8004b6a:	f043 0302 	orr.w	r3, r3, #2
 8004b6e:	6313      	str	r3, [r2, #48]	; 0x30
 8004b70:	4b43      	ldr	r3, [pc, #268]	; (8004c80 <HAL_I2C_MspInit+0x144>)
 8004b72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b74:	f003 0302 	and.w	r3, r3, #2
 8004b78:	613b      	str	r3, [r7, #16]
 8004b7a:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8004b7c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8004b80:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004b82:	2312      	movs	r3, #18
 8004b84:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b86:	2300      	movs	r3, #0
 8004b88:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004b8a:	2303      	movs	r3, #3
 8004b8c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8004b8e:	2304      	movs	r3, #4
 8004b90:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004b92:	f107 0314 	add.w	r3, r7, #20
 8004b96:	4619      	mov	r1, r3
 8004b98:	483a      	ldr	r0, [pc, #232]	; (8004c84 <HAL_I2C_MspInit+0x148>)
 8004b9a:	f001 f975 	bl	8005e88 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004b9e:	2300      	movs	r3, #0
 8004ba0:	60fb      	str	r3, [r7, #12]
 8004ba2:	4b37      	ldr	r3, [pc, #220]	; (8004c80 <HAL_I2C_MspInit+0x144>)
 8004ba4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ba6:	4a36      	ldr	r2, [pc, #216]	; (8004c80 <HAL_I2C_MspInit+0x144>)
 8004ba8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004bac:	6413      	str	r3, [r2, #64]	; 0x40
 8004bae:	4b34      	ldr	r3, [pc, #208]	; (8004c80 <HAL_I2C_MspInit+0x144>)
 8004bb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bb2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004bb6:	60fb      	str	r3, [r7, #12]
 8004bb8:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream6;
 8004bba:	4b33      	ldr	r3, [pc, #204]	; (8004c88 <HAL_I2C_MspInit+0x14c>)
 8004bbc:	4a33      	ldr	r2, [pc, #204]	; (8004c8c <HAL_I2C_MspInit+0x150>)
 8004bbe:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_1;
 8004bc0:	4b31      	ldr	r3, [pc, #196]	; (8004c88 <HAL_I2C_MspInit+0x14c>)
 8004bc2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004bc6:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004bc8:	4b2f      	ldr	r3, [pc, #188]	; (8004c88 <HAL_I2C_MspInit+0x14c>)
 8004bca:	2240      	movs	r2, #64	; 0x40
 8004bcc:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004bce:	4b2e      	ldr	r3, [pc, #184]	; (8004c88 <HAL_I2C_MspInit+0x14c>)
 8004bd0:	2200      	movs	r2, #0
 8004bd2:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004bd4:	4b2c      	ldr	r3, [pc, #176]	; (8004c88 <HAL_I2C_MspInit+0x14c>)
 8004bd6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004bda:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004bdc:	4b2a      	ldr	r3, [pc, #168]	; (8004c88 <HAL_I2C_MspInit+0x14c>)
 8004bde:	2200      	movs	r2, #0
 8004be0:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004be2:	4b29      	ldr	r3, [pc, #164]	; (8004c88 <HAL_I2C_MspInit+0x14c>)
 8004be4:	2200      	movs	r2, #0
 8004be6:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8004be8:	4b27      	ldr	r3, [pc, #156]	; (8004c88 <HAL_I2C_MspInit+0x14c>)
 8004bea:	2200      	movs	r2, #0
 8004bec:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8004bee:	4b26      	ldr	r3, [pc, #152]	; (8004c88 <HAL_I2C_MspInit+0x14c>)
 8004bf0:	2200      	movs	r2, #0
 8004bf2:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004bf4:	4b24      	ldr	r3, [pc, #144]	; (8004c88 <HAL_I2C_MspInit+0x14c>)
 8004bf6:	2200      	movs	r2, #0
 8004bf8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8004bfa:	4823      	ldr	r0, [pc, #140]	; (8004c88 <HAL_I2C_MspInit+0x14c>)
 8004bfc:	f000 fe5e 	bl	80058bc <HAL_DMA_Init>
 8004c00:	4603      	mov	r3, r0
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d001      	beq.n	8004c0a <HAL_I2C_MspInit+0xce>
    {
      Error_Handler();
 8004c06:	f7ff fbf9 	bl	80043fc <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	4a1e      	ldr	r2, [pc, #120]	; (8004c88 <HAL_I2C_MspInit+0x14c>)
 8004c0e:	635a      	str	r2, [r3, #52]	; 0x34
 8004c10:	4a1d      	ldr	r2, [pc, #116]	; (8004c88 <HAL_I2C_MspInit+0x14c>)
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 8004c16:	4b1e      	ldr	r3, [pc, #120]	; (8004c90 <HAL_I2C_MspInit+0x154>)
 8004c18:	4a1e      	ldr	r2, [pc, #120]	; (8004c94 <HAL_I2C_MspInit+0x158>)
 8004c1a:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 8004c1c:	4b1c      	ldr	r3, [pc, #112]	; (8004c90 <HAL_I2C_MspInit+0x154>)
 8004c1e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004c22:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004c24:	4b1a      	ldr	r3, [pc, #104]	; (8004c90 <HAL_I2C_MspInit+0x154>)
 8004c26:	2200      	movs	r2, #0
 8004c28:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004c2a:	4b19      	ldr	r3, [pc, #100]	; (8004c90 <HAL_I2C_MspInit+0x154>)
 8004c2c:	2200      	movs	r2, #0
 8004c2e:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004c30:	4b17      	ldr	r3, [pc, #92]	; (8004c90 <HAL_I2C_MspInit+0x154>)
 8004c32:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004c36:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004c38:	4b15      	ldr	r3, [pc, #84]	; (8004c90 <HAL_I2C_MspInit+0x154>)
 8004c3a:	2200      	movs	r2, #0
 8004c3c:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004c3e:	4b14      	ldr	r3, [pc, #80]	; (8004c90 <HAL_I2C_MspInit+0x154>)
 8004c40:	2200      	movs	r2, #0
 8004c42:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8004c44:	4b12      	ldr	r3, [pc, #72]	; (8004c90 <HAL_I2C_MspInit+0x154>)
 8004c46:	2200      	movs	r2, #0
 8004c48:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8004c4a:	4b11      	ldr	r3, [pc, #68]	; (8004c90 <HAL_I2C_MspInit+0x154>)
 8004c4c:	2200      	movs	r2, #0
 8004c4e:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004c50:	4b0f      	ldr	r3, [pc, #60]	; (8004c90 <HAL_I2C_MspInit+0x154>)
 8004c52:	2200      	movs	r2, #0
 8004c54:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8004c56:	480e      	ldr	r0, [pc, #56]	; (8004c90 <HAL_I2C_MspInit+0x154>)
 8004c58:	f000 fe30 	bl	80058bc <HAL_DMA_Init>
 8004c5c:	4603      	mov	r3, r0
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d001      	beq.n	8004c66 <HAL_I2C_MspInit+0x12a>
    {
      Error_Handler();
 8004c62:	f7ff fbcb 	bl	80043fc <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	4a09      	ldr	r2, [pc, #36]	; (8004c90 <HAL_I2C_MspInit+0x154>)
 8004c6a:	639a      	str	r2, [r3, #56]	; 0x38
 8004c6c:	4a08      	ldr	r2, [pc, #32]	; (8004c90 <HAL_I2C_MspInit+0x154>)
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8004c72:	bf00      	nop
 8004c74:	3728      	adds	r7, #40	; 0x28
 8004c76:	46bd      	mov	sp, r7
 8004c78:	bd80      	pop	{r7, pc}
 8004c7a:	bf00      	nop
 8004c7c:	40005400 	.word	0x40005400
 8004c80:	40023800 	.word	0x40023800
 8004c84:	40020400 	.word	0x40020400
 8004c88:	200006cc 	.word	0x200006cc
 8004c8c:	400260a0 	.word	0x400260a0
 8004c90:	2000072c 	.word	0x2000072c
 8004c94:	40026010 	.word	0x40026010

08004c98 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8004c98:	b480      	push	{r7}
 8004c9a:	b085      	sub	sp, #20
 8004c9c:	af00      	add	r7, sp, #0
 8004c9e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	4a14      	ldr	r2, [pc, #80]	; (8004cf8 <HAL_TIM_PWM_MspInit+0x60>)
 8004ca6:	4293      	cmp	r3, r2
 8004ca8:	d10e      	bne.n	8004cc8 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004caa:	2300      	movs	r3, #0
 8004cac:	60fb      	str	r3, [r7, #12]
 8004cae:	4b13      	ldr	r3, [pc, #76]	; (8004cfc <HAL_TIM_PWM_MspInit+0x64>)
 8004cb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cb2:	4a12      	ldr	r2, [pc, #72]	; (8004cfc <HAL_TIM_PWM_MspInit+0x64>)
 8004cb4:	f043 0302 	orr.w	r3, r3, #2
 8004cb8:	6413      	str	r3, [r2, #64]	; 0x40
 8004cba:	4b10      	ldr	r3, [pc, #64]	; (8004cfc <HAL_TIM_PWM_MspInit+0x64>)
 8004cbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cbe:	f003 0302 	and.w	r3, r3, #2
 8004cc2:	60fb      	str	r3, [r7, #12]
 8004cc4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8004cc6:	e012      	b.n	8004cee <HAL_TIM_PWM_MspInit+0x56>
  else if(htim_pwm->Instance==TIM4)
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	4a0c      	ldr	r2, [pc, #48]	; (8004d00 <HAL_TIM_PWM_MspInit+0x68>)
 8004cce:	4293      	cmp	r3, r2
 8004cd0:	d10d      	bne.n	8004cee <HAL_TIM_PWM_MspInit+0x56>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8004cd2:	2300      	movs	r3, #0
 8004cd4:	60bb      	str	r3, [r7, #8]
 8004cd6:	4b09      	ldr	r3, [pc, #36]	; (8004cfc <HAL_TIM_PWM_MspInit+0x64>)
 8004cd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cda:	4a08      	ldr	r2, [pc, #32]	; (8004cfc <HAL_TIM_PWM_MspInit+0x64>)
 8004cdc:	f043 0304 	orr.w	r3, r3, #4
 8004ce0:	6413      	str	r3, [r2, #64]	; 0x40
 8004ce2:	4b06      	ldr	r3, [pc, #24]	; (8004cfc <HAL_TIM_PWM_MspInit+0x64>)
 8004ce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ce6:	f003 0304 	and.w	r3, r3, #4
 8004cea:	60bb      	str	r3, [r7, #8]
 8004cec:	68bb      	ldr	r3, [r7, #8]
}
 8004cee:	bf00      	nop
 8004cf0:	3714      	adds	r7, #20
 8004cf2:	46bd      	mov	sp, r7
 8004cf4:	bc80      	pop	{r7}
 8004cf6:	4770      	bx	lr
 8004cf8:	40000400 	.word	0x40000400
 8004cfc:	40023800 	.word	0x40023800
 8004d00:	40000800 	.word	0x40000800

08004d04 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004d04:	b580      	push	{r7, lr}
 8004d06:	b086      	sub	sp, #24
 8004d08:	af00      	add	r7, sp, #0
 8004d0a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM11)
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	4a26      	ldr	r2, [pc, #152]	; (8004dac <HAL_TIM_Base_MspInit+0xa8>)
 8004d12:	4293      	cmp	r3, r2
 8004d14:	d10e      	bne.n	8004d34 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM11_MspInit 0 */

  /* USER CODE END TIM11_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM11_CLK_ENABLE();
 8004d16:	2300      	movs	r3, #0
 8004d18:	617b      	str	r3, [r7, #20]
 8004d1a:	4b25      	ldr	r3, [pc, #148]	; (8004db0 <HAL_TIM_Base_MspInit+0xac>)
 8004d1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d1e:	4a24      	ldr	r2, [pc, #144]	; (8004db0 <HAL_TIM_Base_MspInit+0xac>)
 8004d20:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004d24:	6453      	str	r3, [r2, #68]	; 0x44
 8004d26:	4b22      	ldr	r3, [pc, #136]	; (8004db0 <HAL_TIM_Base_MspInit+0xac>)
 8004d28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d2a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004d2e:	617b      	str	r3, [r7, #20]
 8004d30:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 8004d32:	e036      	b.n	8004da2 <HAL_TIM_Base_MspInit+0x9e>
  else if(htim_base->Instance==TIM13)
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	4a1e      	ldr	r2, [pc, #120]	; (8004db4 <HAL_TIM_Base_MspInit+0xb0>)
 8004d3a:	4293      	cmp	r3, r2
 8004d3c:	d116      	bne.n	8004d6c <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM13_CLK_ENABLE();
 8004d3e:	2300      	movs	r3, #0
 8004d40:	613b      	str	r3, [r7, #16]
 8004d42:	4b1b      	ldr	r3, [pc, #108]	; (8004db0 <HAL_TIM_Base_MspInit+0xac>)
 8004d44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d46:	4a1a      	ldr	r2, [pc, #104]	; (8004db0 <HAL_TIM_Base_MspInit+0xac>)
 8004d48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d4c:	6413      	str	r3, [r2, #64]	; 0x40
 8004d4e:	4b18      	ldr	r3, [pc, #96]	; (8004db0 <HAL_TIM_Base_MspInit+0xac>)
 8004d50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d56:	613b      	str	r3, [r7, #16]
 8004d58:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 1, 0);
 8004d5a:	2200      	movs	r2, #0
 8004d5c:	2101      	movs	r1, #1
 8004d5e:	202c      	movs	r0, #44	; 0x2c
 8004d60:	f000 fd67 	bl	8005832 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8004d64:	202c      	movs	r0, #44	; 0x2c
 8004d66:	f000 fd80 	bl	800586a <HAL_NVIC_EnableIRQ>
}
 8004d6a:	e01a      	b.n	8004da2 <HAL_TIM_Base_MspInit+0x9e>
  else if(htim_base->Instance==TIM14)
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	4a11      	ldr	r2, [pc, #68]	; (8004db8 <HAL_TIM_Base_MspInit+0xb4>)
 8004d72:	4293      	cmp	r3, r2
 8004d74:	d115      	bne.n	8004da2 <HAL_TIM_Base_MspInit+0x9e>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8004d76:	2300      	movs	r3, #0
 8004d78:	60fb      	str	r3, [r7, #12]
 8004d7a:	4b0d      	ldr	r3, [pc, #52]	; (8004db0 <HAL_TIM_Base_MspInit+0xac>)
 8004d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d7e:	4a0c      	ldr	r2, [pc, #48]	; (8004db0 <HAL_TIM_Base_MspInit+0xac>)
 8004d80:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d84:	6413      	str	r3, [r2, #64]	; 0x40
 8004d86:	4b0a      	ldr	r3, [pc, #40]	; (8004db0 <HAL_TIM_Base_MspInit+0xac>)
 8004d88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d8e:	60fb      	str	r3, [r7, #12]
 8004d90:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 0, 0);
 8004d92:	2200      	movs	r2, #0
 8004d94:	2100      	movs	r1, #0
 8004d96:	202d      	movs	r0, #45	; 0x2d
 8004d98:	f000 fd4b 	bl	8005832 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8004d9c:	202d      	movs	r0, #45	; 0x2d
 8004d9e:	f000 fd64 	bl	800586a <HAL_NVIC_EnableIRQ>
}
 8004da2:	bf00      	nop
 8004da4:	3718      	adds	r7, #24
 8004da6:	46bd      	mov	sp, r7
 8004da8:	bd80      	pop	{r7, pc}
 8004daa:	bf00      	nop
 8004dac:	40014800 	.word	0x40014800
 8004db0:	40023800 	.word	0x40023800
 8004db4:	40001c00 	.word	0x40001c00
 8004db8:	40002000 	.word	0x40002000

08004dbc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004dbc:	b580      	push	{r7, lr}
 8004dbe:	b08a      	sub	sp, #40	; 0x28
 8004dc0:	af00      	add	r7, sp, #0
 8004dc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004dc4:	f107 0314 	add.w	r3, r7, #20
 8004dc8:	2200      	movs	r2, #0
 8004dca:	601a      	str	r2, [r3, #0]
 8004dcc:	605a      	str	r2, [r3, #4]
 8004dce:	609a      	str	r2, [r3, #8]
 8004dd0:	60da      	str	r2, [r3, #12]
 8004dd2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	4a24      	ldr	r2, [pc, #144]	; (8004e6c <HAL_TIM_MspPostInit+0xb0>)
 8004dda:	4293      	cmp	r3, r2
 8004ddc:	d11e      	bne.n	8004e1c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004dde:	2300      	movs	r3, #0
 8004de0:	613b      	str	r3, [r7, #16]
 8004de2:	4b23      	ldr	r3, [pc, #140]	; (8004e70 <HAL_TIM_MspPostInit+0xb4>)
 8004de4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004de6:	4a22      	ldr	r2, [pc, #136]	; (8004e70 <HAL_TIM_MspPostInit+0xb4>)
 8004de8:	f043 0304 	orr.w	r3, r3, #4
 8004dec:	6313      	str	r3, [r2, #48]	; 0x30
 8004dee:	4b20      	ldr	r3, [pc, #128]	; (8004e70 <HAL_TIM_MspPostInit+0xb4>)
 8004df0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004df2:	f003 0304 	and.w	r3, r3, #4
 8004df6:	613b      	str	r3, [r7, #16]
 8004df8:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PC6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = ONBOARD_WRITE_4_Pin;
 8004dfa:	2340      	movs	r3, #64	; 0x40
 8004dfc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004dfe:	2302      	movs	r3, #2
 8004e00:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e02:	2300      	movs	r3, #0
 8004e04:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004e06:	2300      	movs	r3, #0
 8004e08:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8004e0a:	2302      	movs	r3, #2
 8004e0c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ONBOARD_WRITE_4_GPIO_Port, &GPIO_InitStruct);
 8004e0e:	f107 0314 	add.w	r3, r7, #20
 8004e12:	4619      	mov	r1, r3
 8004e14:	4817      	ldr	r0, [pc, #92]	; (8004e74 <HAL_TIM_MspPostInit+0xb8>)
 8004e16:	f001 f837 	bl	8005e88 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8004e1a:	e022      	b.n	8004e62 <HAL_TIM_MspPostInit+0xa6>
  else if(htim->Instance==TIM4)
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	4a15      	ldr	r2, [pc, #84]	; (8004e78 <HAL_TIM_MspPostInit+0xbc>)
 8004e22:	4293      	cmp	r3, r2
 8004e24:	d11d      	bne.n	8004e62 <HAL_TIM_MspPostInit+0xa6>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004e26:	2300      	movs	r3, #0
 8004e28:	60fb      	str	r3, [r7, #12]
 8004e2a:	4b11      	ldr	r3, [pc, #68]	; (8004e70 <HAL_TIM_MspPostInit+0xb4>)
 8004e2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e2e:	4a10      	ldr	r2, [pc, #64]	; (8004e70 <HAL_TIM_MspPostInit+0xb4>)
 8004e30:	f043 0302 	orr.w	r3, r3, #2
 8004e34:	6313      	str	r3, [r2, #48]	; 0x30
 8004e36:	4b0e      	ldr	r3, [pc, #56]	; (8004e70 <HAL_TIM_MspPostInit+0xb4>)
 8004e38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e3a:	f003 0302 	and.w	r3, r3, #2
 8004e3e:	60fb      	str	r3, [r7, #12]
 8004e40:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ONBOARD_WRITE_1_Pin;
 8004e42:	2340      	movs	r3, #64	; 0x40
 8004e44:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004e46:	2302      	movs	r3, #2
 8004e48:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e4a:	2300      	movs	r3, #0
 8004e4c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004e4e:	2300      	movs	r3, #0
 8004e50:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8004e52:	2302      	movs	r3, #2
 8004e54:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ONBOARD_WRITE_1_GPIO_Port, &GPIO_InitStruct);
 8004e56:	f107 0314 	add.w	r3, r7, #20
 8004e5a:	4619      	mov	r1, r3
 8004e5c:	4807      	ldr	r0, [pc, #28]	; (8004e7c <HAL_TIM_MspPostInit+0xc0>)
 8004e5e:	f001 f813 	bl	8005e88 <HAL_GPIO_Init>
}
 8004e62:	bf00      	nop
 8004e64:	3728      	adds	r7, #40	; 0x28
 8004e66:	46bd      	mov	sp, r7
 8004e68:	bd80      	pop	{r7, pc}
 8004e6a:	bf00      	nop
 8004e6c:	40000400 	.word	0x40000400
 8004e70:	40023800 	.word	0x40023800
 8004e74:	40020800 	.word	0x40020800
 8004e78:	40000800 	.word	0x40000800
 8004e7c:	40020400 	.word	0x40020400

08004e80 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004e80:	b580      	push	{r7, lr}
 8004e82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 8004e84:	f003 ff50 	bl	8008d28 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004e88:	e7fe      	b.n	8004e88 <NMI_Handler+0x8>

08004e8a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004e8a:	b480      	push	{r7}
 8004e8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004e8e:	e7fe      	b.n	8004e8e <HardFault_Handler+0x4>

08004e90 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004e90:	b480      	push	{r7}
 8004e92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004e94:	e7fe      	b.n	8004e94 <MemManage_Handler+0x4>

08004e96 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004e96:	b480      	push	{r7}
 8004e98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004e9a:	e7fe      	b.n	8004e9a <BusFault_Handler+0x4>

08004e9c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004e9c:	b480      	push	{r7}
 8004e9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004ea0:	e7fe      	b.n	8004ea0 <UsageFault_Handler+0x4>

08004ea2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004ea2:	b480      	push	{r7}
 8004ea4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004ea6:	bf00      	nop
 8004ea8:	46bd      	mov	sp, r7
 8004eaa:	bc80      	pop	{r7}
 8004eac:	4770      	bx	lr

08004eae <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004eae:	b480      	push	{r7}
 8004eb0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004eb2:	bf00      	nop
 8004eb4:	46bd      	mov	sp, r7
 8004eb6:	bc80      	pop	{r7}
 8004eb8:	4770      	bx	lr

08004eba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004eba:	b480      	push	{r7}
 8004ebc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004ebe:	bf00      	nop
 8004ec0:	46bd      	mov	sp, r7
 8004ec2:	bc80      	pop	{r7}
 8004ec4:	4770      	bx	lr

08004ec6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004ec6:	b580      	push	{r7, lr}
 8004ec8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004eca:	f000 f97d 	bl	80051c8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004ece:	bf00      	nop
 8004ed0:	bd80      	pop	{r7, pc}

08004ed2 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8004ed2:	b580      	push	{r7, lr}
 8004ed4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ONBOARD_READ_IT_3_Pin);
 8004ed6:	2001      	movs	r0, #1
 8004ed8:	f001 f9a6 	bl	8006228 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8004edc:	bf00      	nop
 8004ede:	bd80      	pop	{r7, pc}

08004ee0 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8004ee0:	b580      	push	{r7, lr}
 8004ee2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8004ee4:	4802      	ldr	r0, [pc, #8]	; (8004ef0 <DMA1_Stream0_IRQHandler+0x10>)
 8004ee6:	f000 fd97 	bl	8005a18 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8004eea:	bf00      	nop
 8004eec:	bd80      	pop	{r7, pc}
 8004eee:	bf00      	nop
 8004ef0:	2000072c 	.word	0x2000072c

08004ef4 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8004ef4:	b580      	push	{r7, lr}
 8004ef6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8004ef8:	4802      	ldr	r0, [pc, #8]	; (8004f04 <DMA1_Stream6_IRQHandler+0x10>)
 8004efa:	f000 fd8d 	bl	8005a18 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8004efe:	bf00      	nop
 8004f00:	bd80      	pop	{r7, pc}
 8004f02:	bf00      	nop
 8004f04:	200006cc 	.word	0x200006cc

08004f08 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8004f08:	b580      	push	{r7, lr}
 8004f0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim13);
 8004f0c:	4802      	ldr	r0, [pc, #8]	; (8004f18 <TIM8_UP_TIM13_IRQHandler+0x10>)
 8004f0e:	f004 f961 	bl	80091d4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 8004f12:	bf00      	nop
 8004f14:	bd80      	pop	{r7, pc}
 8004f16:	bf00      	nop
 8004f18:	20000864 	.word	0x20000864

08004f1c <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8004f1c:	b580      	push	{r7, lr}
 8004f1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8004f20:	4802      	ldr	r0, [pc, #8]	; (8004f2c <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 8004f22:	f004 f957 	bl	80091d4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8004f26:	bf00      	nop
 8004f28:	bd80      	pop	{r7, pc}
 8004f2a:	bf00      	nop
 8004f2c:	200008ac 	.word	0x200008ac

08004f30 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8004f30:	b580      	push	{r7, lr}
 8004f32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8004f34:	4802      	ldr	r0, [pc, #8]	; (8004f40 <OTG_FS_IRQHandler+0x10>)
 8004f36:	f002 fa8c 	bl	8007452 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8004f3a:	bf00      	nop
 8004f3c:	bd80      	pop	{r7, pc}
 8004f3e:	bf00      	nop
 8004f40:	20001de4 	.word	0x20001de4

08004f44 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004f44:	b480      	push	{r7}
 8004f46:	af00      	add	r7, sp, #0
	return 1;
 8004f48:	2301      	movs	r3, #1
}
 8004f4a:	4618      	mov	r0, r3
 8004f4c:	46bd      	mov	sp, r7
 8004f4e:	bc80      	pop	{r7}
 8004f50:	4770      	bx	lr

08004f52 <_kill>:

int _kill(int pid, int sig)
{
 8004f52:	b580      	push	{r7, lr}
 8004f54:	b082      	sub	sp, #8
 8004f56:	af00      	add	r7, sp, #0
 8004f58:	6078      	str	r0, [r7, #4]
 8004f5a:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8004f5c:	f00a fce4 	bl	800f928 <__errno>
 8004f60:	4603      	mov	r3, r0
 8004f62:	2216      	movs	r2, #22
 8004f64:	601a      	str	r2, [r3, #0]
	return -1;
 8004f66:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004f6a:	4618      	mov	r0, r3
 8004f6c:	3708      	adds	r7, #8
 8004f6e:	46bd      	mov	sp, r7
 8004f70:	bd80      	pop	{r7, pc}

08004f72 <_exit>:

void _exit (int status)
{
 8004f72:	b580      	push	{r7, lr}
 8004f74:	b082      	sub	sp, #8
 8004f76:	af00      	add	r7, sp, #0
 8004f78:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8004f7a:	f04f 31ff 	mov.w	r1, #4294967295
 8004f7e:	6878      	ldr	r0, [r7, #4]
 8004f80:	f7ff ffe7 	bl	8004f52 <_kill>
	while (1) {}		/* Make sure we hang here */
 8004f84:	e7fe      	b.n	8004f84 <_exit+0x12>

08004f86 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004f86:	b580      	push	{r7, lr}
 8004f88:	b086      	sub	sp, #24
 8004f8a:	af00      	add	r7, sp, #0
 8004f8c:	60f8      	str	r0, [r7, #12]
 8004f8e:	60b9      	str	r1, [r7, #8]
 8004f90:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004f92:	2300      	movs	r3, #0
 8004f94:	617b      	str	r3, [r7, #20]
 8004f96:	e00a      	b.n	8004fae <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8004f98:	f3af 8000 	nop.w
 8004f9c:	4601      	mov	r1, r0
 8004f9e:	68bb      	ldr	r3, [r7, #8]
 8004fa0:	1c5a      	adds	r2, r3, #1
 8004fa2:	60ba      	str	r2, [r7, #8]
 8004fa4:	b2ca      	uxtb	r2, r1
 8004fa6:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004fa8:	697b      	ldr	r3, [r7, #20]
 8004faa:	3301      	adds	r3, #1
 8004fac:	617b      	str	r3, [r7, #20]
 8004fae:	697a      	ldr	r2, [r7, #20]
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	429a      	cmp	r2, r3
 8004fb4:	dbf0      	blt.n	8004f98 <_read+0x12>
	}

return len;
 8004fb6:	687b      	ldr	r3, [r7, #4]
}
 8004fb8:	4618      	mov	r0, r3
 8004fba:	3718      	adds	r7, #24
 8004fbc:	46bd      	mov	sp, r7
 8004fbe:	bd80      	pop	{r7, pc}

08004fc0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004fc0:	b580      	push	{r7, lr}
 8004fc2:	b086      	sub	sp, #24
 8004fc4:	af00      	add	r7, sp, #0
 8004fc6:	60f8      	str	r0, [r7, #12]
 8004fc8:	60b9      	str	r1, [r7, #8]
 8004fca:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004fcc:	2300      	movs	r3, #0
 8004fce:	617b      	str	r3, [r7, #20]
 8004fd0:	e009      	b.n	8004fe6 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8004fd2:	68bb      	ldr	r3, [r7, #8]
 8004fd4:	1c5a      	adds	r2, r3, #1
 8004fd6:	60ba      	str	r2, [r7, #8]
 8004fd8:	781b      	ldrb	r3, [r3, #0]
 8004fda:	4618      	mov	r0, r3
 8004fdc:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004fe0:	697b      	ldr	r3, [r7, #20]
 8004fe2:	3301      	adds	r3, #1
 8004fe4:	617b      	str	r3, [r7, #20]
 8004fe6:	697a      	ldr	r2, [r7, #20]
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	429a      	cmp	r2, r3
 8004fec:	dbf1      	blt.n	8004fd2 <_write+0x12>
	}
	return len;
 8004fee:	687b      	ldr	r3, [r7, #4]
}
 8004ff0:	4618      	mov	r0, r3
 8004ff2:	3718      	adds	r7, #24
 8004ff4:	46bd      	mov	sp, r7
 8004ff6:	bd80      	pop	{r7, pc}

08004ff8 <_close>:

int _close(int file)
{
 8004ff8:	b480      	push	{r7}
 8004ffa:	b083      	sub	sp, #12
 8004ffc:	af00      	add	r7, sp, #0
 8004ffe:	6078      	str	r0, [r7, #4]
	return -1;
 8005000:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005004:	4618      	mov	r0, r3
 8005006:	370c      	adds	r7, #12
 8005008:	46bd      	mov	sp, r7
 800500a:	bc80      	pop	{r7}
 800500c:	4770      	bx	lr

0800500e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800500e:	b480      	push	{r7}
 8005010:	b083      	sub	sp, #12
 8005012:	af00      	add	r7, sp, #0
 8005014:	6078      	str	r0, [r7, #4]
 8005016:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8005018:	683b      	ldr	r3, [r7, #0]
 800501a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800501e:	605a      	str	r2, [r3, #4]
	return 0;
 8005020:	2300      	movs	r3, #0
}
 8005022:	4618      	mov	r0, r3
 8005024:	370c      	adds	r7, #12
 8005026:	46bd      	mov	sp, r7
 8005028:	bc80      	pop	{r7}
 800502a:	4770      	bx	lr

0800502c <_isatty>:

int _isatty(int file)
{
 800502c:	b480      	push	{r7}
 800502e:	b083      	sub	sp, #12
 8005030:	af00      	add	r7, sp, #0
 8005032:	6078      	str	r0, [r7, #4]
	return 1;
 8005034:	2301      	movs	r3, #1
}
 8005036:	4618      	mov	r0, r3
 8005038:	370c      	adds	r7, #12
 800503a:	46bd      	mov	sp, r7
 800503c:	bc80      	pop	{r7}
 800503e:	4770      	bx	lr

08005040 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8005040:	b480      	push	{r7}
 8005042:	b085      	sub	sp, #20
 8005044:	af00      	add	r7, sp, #0
 8005046:	60f8      	str	r0, [r7, #12]
 8005048:	60b9      	str	r1, [r7, #8]
 800504a:	607a      	str	r2, [r7, #4]
	return 0;
 800504c:	2300      	movs	r3, #0
}
 800504e:	4618      	mov	r0, r3
 8005050:	3714      	adds	r7, #20
 8005052:	46bd      	mov	sp, r7
 8005054:	bc80      	pop	{r7}
 8005056:	4770      	bx	lr

08005058 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005058:	b580      	push	{r7, lr}
 800505a:	b086      	sub	sp, #24
 800505c:	af00      	add	r7, sp, #0
 800505e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005060:	4a14      	ldr	r2, [pc, #80]	; (80050b4 <_sbrk+0x5c>)
 8005062:	4b15      	ldr	r3, [pc, #84]	; (80050b8 <_sbrk+0x60>)
 8005064:	1ad3      	subs	r3, r2, r3
 8005066:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005068:	697b      	ldr	r3, [r7, #20]
 800506a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800506c:	4b13      	ldr	r3, [pc, #76]	; (80050bc <_sbrk+0x64>)
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	2b00      	cmp	r3, #0
 8005072:	d102      	bne.n	800507a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005074:	4b11      	ldr	r3, [pc, #68]	; (80050bc <_sbrk+0x64>)
 8005076:	4a12      	ldr	r2, [pc, #72]	; (80050c0 <_sbrk+0x68>)
 8005078:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800507a:	4b10      	ldr	r3, [pc, #64]	; (80050bc <_sbrk+0x64>)
 800507c:	681a      	ldr	r2, [r3, #0]
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	4413      	add	r3, r2
 8005082:	693a      	ldr	r2, [r7, #16]
 8005084:	429a      	cmp	r2, r3
 8005086:	d207      	bcs.n	8005098 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8005088:	f00a fc4e 	bl	800f928 <__errno>
 800508c:	4603      	mov	r3, r0
 800508e:	220c      	movs	r2, #12
 8005090:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8005092:	f04f 33ff 	mov.w	r3, #4294967295
 8005096:	e009      	b.n	80050ac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8005098:	4b08      	ldr	r3, [pc, #32]	; (80050bc <_sbrk+0x64>)
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800509e:	4b07      	ldr	r3, [pc, #28]	; (80050bc <_sbrk+0x64>)
 80050a0:	681a      	ldr	r2, [r3, #0]
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	4413      	add	r3, r2
 80050a6:	4a05      	ldr	r2, [pc, #20]	; (80050bc <_sbrk+0x64>)
 80050a8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80050aa:	68fb      	ldr	r3, [r7, #12]
}
 80050ac:	4618      	mov	r0, r3
 80050ae:	3718      	adds	r7, #24
 80050b0:	46bd      	mov	sp, r7
 80050b2:	bd80      	pop	{r7, pc}
 80050b4:	20020000 	.word	0x20020000
 80050b8:	00000400 	.word	0x00000400
 80050bc:	2000090c 	.word	0x2000090c
 80050c0:	200021f8 	.word	0x200021f8

080050c4 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80050c4:	b480      	push	{r7}
 80050c6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80050c8:	bf00      	nop
 80050ca:	46bd      	mov	sp, r7
 80050cc:	bc80      	pop	{r7}
 80050ce:	4770      	bx	lr

080050d0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80050d0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005108 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80050d4:	480d      	ldr	r0, [pc, #52]	; (800510c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80050d6:	490e      	ldr	r1, [pc, #56]	; (8005110 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80050d8:	4a0e      	ldr	r2, [pc, #56]	; (8005114 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80050da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80050dc:	e002      	b.n	80050e4 <LoopCopyDataInit>

080050de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80050de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80050e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80050e2:	3304      	adds	r3, #4

080050e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80050e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80050e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80050e8:	d3f9      	bcc.n	80050de <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80050ea:	4a0b      	ldr	r2, [pc, #44]	; (8005118 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80050ec:	4c0b      	ldr	r4, [pc, #44]	; (800511c <LoopFillZerobss+0x26>)
  movs r3, #0
 80050ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80050f0:	e001      	b.n	80050f6 <LoopFillZerobss>

080050f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80050f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80050f4:	3204      	adds	r2, #4

080050f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80050f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80050f8:	d3fb      	bcc.n	80050f2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80050fa:	f7ff ffe3 	bl	80050c4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80050fe:	f00a fc19 	bl	800f934 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8005102:	f7fe fd8f 	bl	8003c24 <main>
  bx  lr    
 8005106:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8005108:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800510c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005110:	20000378 	.word	0x20000378
  ldr r2, =_sidata
 8005114:	080139ec 	.word	0x080139ec
  ldr r2, =_sbss
 8005118:	20000378 	.word	0x20000378
  ldr r4, =_ebss
 800511c:	200021f4 	.word	0x200021f4

08005120 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005120:	e7fe      	b.n	8005120 <ADC_IRQHandler>
	...

08005124 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005124:	b580      	push	{r7, lr}
 8005126:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
   __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8005128:	4b0e      	ldr	r3, [pc, #56]	; (8005164 <HAL_Init+0x40>)
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	4a0d      	ldr	r2, [pc, #52]	; (8005164 <HAL_Init+0x40>)
 800512e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005132:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
   __HAL_FLASH_DATA_CACHE_ENABLE();
 8005134:	4b0b      	ldr	r3, [pc, #44]	; (8005164 <HAL_Init+0x40>)
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	4a0a      	ldr	r2, [pc, #40]	; (8005164 <HAL_Init+0x40>)
 800513a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800513e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005140:	4b08      	ldr	r3, [pc, #32]	; (8005164 <HAL_Init+0x40>)
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	4a07      	ldr	r2, [pc, #28]	; (8005164 <HAL_Init+0x40>)
 8005146:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800514a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800514c:	2003      	movs	r0, #3
 800514e:	f000 fb65 	bl	800581c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005152:	200f      	movs	r0, #15
 8005154:	f000 f808 	bl	8005168 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8005158:	f7ff fc86 	bl	8004a68 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 800515c:	2300      	movs	r3, #0
}
 800515e:	4618      	mov	r0, r3
 8005160:	bd80      	pop	{r7, pc}
 8005162:	bf00      	nop
 8005164:	40023c00 	.word	0x40023c00

08005168 <HAL_InitTick>:
  *       implementation  in user file.
  * @param  TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005168:	b580      	push	{r7, lr}
 800516a:	b082      	sub	sp, #8
 800516c:	af00      	add	r7, sp, #0
 800516e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8005170:	4b12      	ldr	r3, [pc, #72]	; (80051bc <HAL_InitTick+0x54>)
 8005172:	681a      	ldr	r2, [r3, #0]
 8005174:	4b12      	ldr	r3, [pc, #72]	; (80051c0 <HAL_InitTick+0x58>)
 8005176:	781b      	ldrb	r3, [r3, #0]
 8005178:	4619      	mov	r1, r3
 800517a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800517e:	fbb3 f3f1 	udiv	r3, r3, r1
 8005182:	fbb2 f3f3 	udiv	r3, r2, r3
 8005186:	4618      	mov	r0, r3
 8005188:	f000 fb8b 	bl	80058a2 <HAL_SYSTICK_Config>
 800518c:	4603      	mov	r3, r0
 800518e:	2b00      	cmp	r3, #0
 8005190:	d001      	beq.n	8005196 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8005192:	2301      	movs	r3, #1
 8005194:	e00e      	b.n	80051b4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	2b0f      	cmp	r3, #15
 800519a:	d80a      	bhi.n	80051b2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800519c:	2200      	movs	r2, #0
 800519e:	6879      	ldr	r1, [r7, #4]
 80051a0:	f04f 30ff 	mov.w	r0, #4294967295
 80051a4:	f000 fb45 	bl	8005832 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80051a8:	4a06      	ldr	r2, [pc, #24]	; (80051c4 <HAL_InitTick+0x5c>)
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80051ae:	2300      	movs	r3, #0
 80051b0:	e000      	b.n	80051b4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80051b2:	2301      	movs	r3, #1
}
 80051b4:	4618      	mov	r0, r3
 80051b6:	3708      	adds	r7, #8
 80051b8:	46bd      	mov	sp, r7
 80051ba:	bd80      	pop	{r7, pc}
 80051bc:	20000024 	.word	0x20000024
 80051c0:	2000002c 	.word	0x2000002c
 80051c4:	20000028 	.word	0x20000028

080051c8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80051c8:	b480      	push	{r7}
 80051ca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80051cc:	4b05      	ldr	r3, [pc, #20]	; (80051e4 <HAL_IncTick+0x1c>)
 80051ce:	781b      	ldrb	r3, [r3, #0]
 80051d0:	461a      	mov	r2, r3
 80051d2:	4b05      	ldr	r3, [pc, #20]	; (80051e8 <HAL_IncTick+0x20>)
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	4413      	add	r3, r2
 80051d8:	4a03      	ldr	r2, [pc, #12]	; (80051e8 <HAL_IncTick+0x20>)
 80051da:	6013      	str	r3, [r2, #0]
}
 80051dc:	bf00      	nop
 80051de:	46bd      	mov	sp, r7
 80051e0:	bc80      	pop	{r7}
 80051e2:	4770      	bx	lr
 80051e4:	2000002c 	.word	0x2000002c
 80051e8:	2000091c 	.word	0x2000091c

080051ec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80051ec:	b480      	push	{r7}
 80051ee:	af00      	add	r7, sp, #0
  return uwTick;
 80051f0:	4b02      	ldr	r3, [pc, #8]	; (80051fc <HAL_GetTick+0x10>)
 80051f2:	681b      	ldr	r3, [r3, #0]
}
 80051f4:	4618      	mov	r0, r3
 80051f6:	46bd      	mov	sp, r7
 80051f8:	bc80      	pop	{r7}
 80051fa:	4770      	bx	lr
 80051fc:	2000091c 	.word	0x2000091c

08005200 <HAL_Delay>:
  *       implementations in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 8005200:	b580      	push	{r7, lr}
 8005202:	b084      	sub	sp, #16
 8005204:	af00      	add	r7, sp, #0
 8005206:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005208:	f7ff fff0 	bl	80051ec <HAL_GetTick>
 800520c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005218:	d005      	beq.n	8005226 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800521a:	4b0a      	ldr	r3, [pc, #40]	; (8005244 <HAL_Delay+0x44>)
 800521c:	781b      	ldrb	r3, [r3, #0]
 800521e:	461a      	mov	r2, r3
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	4413      	add	r3, r2
 8005224:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8005226:	bf00      	nop
 8005228:	f7ff ffe0 	bl	80051ec <HAL_GetTick>
 800522c:	4602      	mov	r2, r0
 800522e:	68bb      	ldr	r3, [r7, #8]
 8005230:	1ad3      	subs	r3, r2, r3
 8005232:	68fa      	ldr	r2, [r7, #12]
 8005234:	429a      	cmp	r2, r3
 8005236:	d8f7      	bhi.n	8005228 <HAL_Delay+0x28>
  {
  }
}
 8005238:	bf00      	nop
 800523a:	bf00      	nop
 800523c:	3710      	adds	r7, #16
 800523e:	46bd      	mov	sp, r7
 8005240:	bd80      	pop	{r7, pc}
 8005242:	bf00      	nop
 8005244:	2000002c 	.word	0x2000002c

08005248 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8005248:	b580      	push	{r7, lr}
 800524a:	b084      	sub	sp, #16
 800524c:	af00      	add	r7, sp, #0
 800524e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005250:	2300      	movs	r3, #0
 8005252:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	2b00      	cmp	r3, #0
 8005258:	d101      	bne.n	800525e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800525a:	2301      	movs	r3, #1
 800525c:	e033      	b.n	80052c6 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005262:	2b00      	cmp	r3, #0
 8005264:	d109      	bne.n	800527a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8005266:	6878      	ldr	r0, [r7, #4]
 8005268:	f7ff fc24 	bl	8004ab4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	2200      	movs	r2, #0
 8005270:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	2200      	movs	r2, #0
 8005276:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800527e:	f003 0310 	and.w	r3, r3, #16
 8005282:	2b00      	cmp	r3, #0
 8005284:	d118      	bne.n	80052b8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800528a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800528e:	f023 0302 	bic.w	r3, r3, #2
 8005292:	f043 0202 	orr.w	r2, r3, #2
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800529a:	6878      	ldr	r0, [r7, #4]
 800529c:	f000 f8c8 	bl	8005430 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	2200      	movs	r2, #0
 80052a4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052aa:	f023 0303 	bic.w	r3, r3, #3
 80052ae:	f043 0201 	orr.w	r2, r3, #1
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	641a      	str	r2, [r3, #64]	; 0x40
 80052b6:	e001      	b.n	80052bc <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80052b8:	2301      	movs	r3, #1
 80052ba:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	2200      	movs	r2, #0
 80052c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80052c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80052c6:	4618      	mov	r0, r3
 80052c8:	3710      	adds	r7, #16
 80052ca:	46bd      	mov	sp, r7
 80052cc:	bd80      	pop	{r7, pc}
	...

080052d0 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80052d0:	b480      	push	{r7}
 80052d2:	b085      	sub	sp, #20
 80052d4:	af00      	add	r7, sp, #0
 80052d6:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80052d8:	2300      	movs	r3, #0
 80052da:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80052e2:	2b01      	cmp	r3, #1
 80052e4:	d101      	bne.n	80052ea <HAL_ADC_Start+0x1a>
 80052e6:	2302      	movs	r3, #2
 80052e8:	e095      	b.n	8005416 <HAL_ADC_Start+0x146>
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	2201      	movs	r2, #1
 80052ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	689b      	ldr	r3, [r3, #8]
 80052f8:	f003 0301 	and.w	r3, r3, #1
 80052fc:	2b01      	cmp	r3, #1
 80052fe:	d018      	beq.n	8005332 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	689a      	ldr	r2, [r3, #8]
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	f042 0201 	orr.w	r2, r2, #1
 800530e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8005310:	4b43      	ldr	r3, [pc, #268]	; (8005420 <HAL_ADC_Start+0x150>)
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	4a43      	ldr	r2, [pc, #268]	; (8005424 <HAL_ADC_Start+0x154>)
 8005316:	fba2 2303 	umull	r2, r3, r2, r3
 800531a:	0c9a      	lsrs	r2, r3, #18
 800531c:	4613      	mov	r3, r2
 800531e:	005b      	lsls	r3, r3, #1
 8005320:	4413      	add	r3, r2
 8005322:	60fb      	str	r3, [r7, #12]
    while(counter != 0U)
 8005324:	e002      	b.n	800532c <HAL_ADC_Start+0x5c>
    {
      counter--;
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	3b01      	subs	r3, #1
 800532a:	60fb      	str	r3, [r7, #12]
    while(counter != 0U)
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	2b00      	cmp	r3, #0
 8005330:	d1f9      	bne.n	8005326 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	689b      	ldr	r3, [r3, #8]
 8005338:	f003 0301 	and.w	r3, r3, #1
 800533c:	2b01      	cmp	r3, #1
 800533e:	d15d      	bne.n	80053fc <HAL_ADC_Start+0x12c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005344:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8005348:	f023 0301 	bic.w	r3, r3, #1
 800534c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	685b      	ldr	r3, [r3, #4]
 800535a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800535e:	2b00      	cmp	r3, #0
 8005360:	d007      	beq.n	8005372 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005366:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800536a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005376:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800537a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800537e:	d106      	bne.n	800538e <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005384:	f023 0206 	bic.w	r2, r3, #6
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	645a      	str	r2, [r3, #68]	; 0x44
 800538c:	e002      	b.n	8005394 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	2200      	movs	r2, #0
 8005392:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	2200      	movs	r2, #0
 8005398:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80053a4:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 80053a6:	4b20      	ldr	r3, [pc, #128]	; (8005428 <HAL_ADC_Start+0x158>)
 80053a8:	685b      	ldr	r3, [r3, #4]
 80053aa:	f003 031f 	and.w	r3, r3, #31
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d10f      	bne.n	80053d2 <HAL_ADC_Start+0x102>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	689b      	ldr	r3, [r3, #8]
 80053b8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d129      	bne.n	8005414 <HAL_ADC_Start+0x144>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	689a      	ldr	r2, [r3, #8]
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80053ce:	609a      	str	r2, [r3, #8]
 80053d0:	e020      	b.n	8005414 <HAL_ADC_Start+0x144>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	4a15      	ldr	r2, [pc, #84]	; (800542c <HAL_ADC_Start+0x15c>)
 80053d8:	4293      	cmp	r3, r2
 80053da:	d11b      	bne.n	8005414 <HAL_ADC_Start+0x144>
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	689b      	ldr	r3, [r3, #8]
 80053e2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d114      	bne.n	8005414 <HAL_ADC_Start+0x144>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	689a      	ldr	r2, [r3, #8]
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80053f8:	609a      	str	r2, [r3, #8]
 80053fa:	e00b      	b.n	8005414 <HAL_ADC_Start+0x144>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005400:	f043 0210 	orr.w	r2, r3, #16
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800540c:	f043 0201 	orr.w	r2, r3, #1
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8005414:	2300      	movs	r3, #0
}
 8005416:	4618      	mov	r0, r3
 8005418:	3714      	adds	r7, #20
 800541a:	46bd      	mov	sp, r7
 800541c:	bc80      	pop	{r7}
 800541e:	4770      	bx	lr
 8005420:	20000024 	.word	0x20000024
 8005424:	431bde83 	.word	0x431bde83
 8005428:	40012300 	.word	0x40012300
 800542c:	40012000 	.word	0x40012000

08005430 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8005430:	b480      	push	{r7}
 8005432:	b085      	sub	sp, #20
 8005434:	af00      	add	r7, sp, #0
 8005436:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8005438:	4b7e      	ldr	r3, [pc, #504]	; (8005634 <ADC_Init+0x204>)
 800543a:	685b      	ldr	r3, [r3, #4]
 800543c:	4a7d      	ldr	r2, [pc, #500]	; (8005634 <ADC_Init+0x204>)
 800543e:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8005442:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8005444:	4b7b      	ldr	r3, [pc, #492]	; (8005634 <ADC_Init+0x204>)
 8005446:	685a      	ldr	r2, [r3, #4]
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	685b      	ldr	r3, [r3, #4]
 800544c:	4979      	ldr	r1, [pc, #484]	; (8005634 <ADC_Init+0x204>)
 800544e:	4313      	orrs	r3, r2
 8005450:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	685a      	ldr	r2, [r3, #4]
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005460:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	6859      	ldr	r1, [r3, #4]
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	691b      	ldr	r3, [r3, #16]
 800546c:	021a      	lsls	r2, r3, #8
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	430a      	orrs	r2, r1
 8005474:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	685a      	ldr	r2, [r3, #4]
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8005484:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	6859      	ldr	r1, [r3, #4]
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	689a      	ldr	r2, [r3, #8]
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	430a      	orrs	r2, r1
 8005496:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	689a      	ldr	r2, [r3, #8]
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80054a6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	6899      	ldr	r1, [r3, #8]
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	68da      	ldr	r2, [r3, #12]
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	430a      	orrs	r2, r1
 80054b8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054be:	4a5e      	ldr	r2, [pc, #376]	; (8005638 <ADC_Init+0x208>)
 80054c0:	4293      	cmp	r3, r2
 80054c2:	d022      	beq.n	800550a <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	689a      	ldr	r2, [r3, #8]
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80054d2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	6899      	ldr	r1, [r3, #8]
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	430a      	orrs	r2, r1
 80054e4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	689a      	ldr	r2, [r3, #8]
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80054f4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	6899      	ldr	r1, [r3, #8]
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	430a      	orrs	r2, r1
 8005506:	609a      	str	r2, [r3, #8]
 8005508:	e00f      	b.n	800552a <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	689a      	ldr	r2, [r3, #8]
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005518:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	689a      	ldr	r2, [r3, #8]
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8005528:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	689a      	ldr	r2, [r3, #8]
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	f022 0202 	bic.w	r2, r2, #2
 8005538:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	6899      	ldr	r1, [r3, #8]
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	7e1b      	ldrb	r3, [r3, #24]
 8005544:	005a      	lsls	r2, r3, #1
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	430a      	orrs	r2, r1
 800554c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005554:	2b00      	cmp	r3, #0
 8005556:	d027      	beq.n	80055a8 <ADC_Init+0x178>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	685a      	ldr	r2, [r3, #4]
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005566:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	685a      	ldr	r2, [r3, #4]
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8005576:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800557c:	3b01      	subs	r3, #1
 800557e:	f44f 4260 	mov.w	r2, #57344	; 0xe000
 8005582:	60fa      	str	r2, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005584:	68fa      	ldr	r2, [r7, #12]
 8005586:	fa92 f2a2 	rbit	r2, r2
 800558a:	60ba      	str	r2, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800558c:	68ba      	ldr	r2, [r7, #8]
 800558e:	fab2 f282 	clz	r2, r2
 8005592:	b2d2      	uxtb	r2, r2
 8005594:	fa03 f102 	lsl.w	r1, r3, r2
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	685a      	ldr	r2, [r3, #4]
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	430a      	orrs	r2, r1
 80055a4:	605a      	str	r2, [r3, #4]
 80055a6:	e007      	b.n	80055b8 <ADC_Init+0x188>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	685a      	ldr	r2, [r3, #4]
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80055b6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80055c6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	69db      	ldr	r3, [r3, #28]
 80055d2:	3b01      	subs	r3, #1
 80055d4:	051a      	lsls	r2, r3, #20
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	430a      	orrs	r2, r1
 80055dc:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	689a      	ldr	r2, [r3, #8]
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80055ec:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	6899      	ldr	r1, [r3, #8]
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80055fa:	025a      	lsls	r2, r3, #9
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	430a      	orrs	r2, r1
 8005602:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	689a      	ldr	r2, [r3, #8]
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005612:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	6899      	ldr	r1, [r3, #8]
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	695b      	ldr	r3, [r3, #20]
 800561e:	029a      	lsls	r2, r3, #10
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	430a      	orrs	r2, r1
 8005626:	609a      	str	r2, [r3, #8]
}
 8005628:	bf00      	nop
 800562a:	3714      	adds	r7, #20
 800562c:	46bd      	mov	sp, r7
 800562e:	bc80      	pop	{r7}
 8005630:	4770      	bx	lr
 8005632:	bf00      	nop
 8005634:	40012300 	.word	0x40012300
 8005638:	0f000001 	.word	0x0f000001

0800563c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800563c:	b480      	push	{r7}
 800563e:	b085      	sub	sp, #20
 8005640:	af00      	add	r7, sp, #0
 8005642:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	f003 0307 	and.w	r3, r3, #7
 800564a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800564c:	4b0c      	ldr	r3, [pc, #48]	; (8005680 <__NVIC_SetPriorityGrouping+0x44>)
 800564e:	68db      	ldr	r3, [r3, #12]
 8005650:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005652:	68ba      	ldr	r2, [r7, #8]
 8005654:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005658:	4013      	ands	r3, r2
 800565a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005660:	68bb      	ldr	r3, [r7, #8]
 8005662:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005664:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005668:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800566c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800566e:	4a04      	ldr	r2, [pc, #16]	; (8005680 <__NVIC_SetPriorityGrouping+0x44>)
 8005670:	68bb      	ldr	r3, [r7, #8]
 8005672:	60d3      	str	r3, [r2, #12]
}
 8005674:	bf00      	nop
 8005676:	3714      	adds	r7, #20
 8005678:	46bd      	mov	sp, r7
 800567a:	bc80      	pop	{r7}
 800567c:	4770      	bx	lr
 800567e:	bf00      	nop
 8005680:	e000ed00 	.word	0xe000ed00

08005684 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005684:	b480      	push	{r7}
 8005686:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005688:	4b04      	ldr	r3, [pc, #16]	; (800569c <__NVIC_GetPriorityGrouping+0x18>)
 800568a:	68db      	ldr	r3, [r3, #12]
 800568c:	0a1b      	lsrs	r3, r3, #8
 800568e:	f003 0307 	and.w	r3, r3, #7
}
 8005692:	4618      	mov	r0, r3
 8005694:	46bd      	mov	sp, r7
 8005696:	bc80      	pop	{r7}
 8005698:	4770      	bx	lr
 800569a:	bf00      	nop
 800569c:	e000ed00 	.word	0xe000ed00

080056a0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80056a0:	b480      	push	{r7}
 80056a2:	b083      	sub	sp, #12
 80056a4:	af00      	add	r7, sp, #0
 80056a6:	4603      	mov	r3, r0
 80056a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80056aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	db0b      	blt.n	80056ca <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80056b2:	79fb      	ldrb	r3, [r7, #7]
 80056b4:	f003 021f 	and.w	r2, r3, #31
 80056b8:	4906      	ldr	r1, [pc, #24]	; (80056d4 <__NVIC_EnableIRQ+0x34>)
 80056ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80056be:	095b      	lsrs	r3, r3, #5
 80056c0:	2001      	movs	r0, #1
 80056c2:	fa00 f202 	lsl.w	r2, r0, r2
 80056c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80056ca:	bf00      	nop
 80056cc:	370c      	adds	r7, #12
 80056ce:	46bd      	mov	sp, r7
 80056d0:	bc80      	pop	{r7}
 80056d2:	4770      	bx	lr
 80056d4:	e000e100 	.word	0xe000e100

080056d8 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80056d8:	b480      	push	{r7}
 80056da:	b083      	sub	sp, #12
 80056dc:	af00      	add	r7, sp, #0
 80056de:	4603      	mov	r3, r0
 80056e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80056e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	db12      	blt.n	8005710 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80056ea:	79fb      	ldrb	r3, [r7, #7]
 80056ec:	f003 021f 	and.w	r2, r3, #31
 80056f0:	490a      	ldr	r1, [pc, #40]	; (800571c <__NVIC_DisableIRQ+0x44>)
 80056f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80056f6:	095b      	lsrs	r3, r3, #5
 80056f8:	2001      	movs	r0, #1
 80056fa:	fa00 f202 	lsl.w	r2, r0, r2
 80056fe:	3320      	adds	r3, #32
 8005700:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8005704:	f3bf 8f4f 	dsb	sy
}
 8005708:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800570a:	f3bf 8f6f 	isb	sy
}
 800570e:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8005710:	bf00      	nop
 8005712:	370c      	adds	r7, #12
 8005714:	46bd      	mov	sp, r7
 8005716:	bc80      	pop	{r7}
 8005718:	4770      	bx	lr
 800571a:	bf00      	nop
 800571c:	e000e100 	.word	0xe000e100

08005720 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005720:	b480      	push	{r7}
 8005722:	b083      	sub	sp, #12
 8005724:	af00      	add	r7, sp, #0
 8005726:	4603      	mov	r3, r0
 8005728:	6039      	str	r1, [r7, #0]
 800572a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800572c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005730:	2b00      	cmp	r3, #0
 8005732:	db0a      	blt.n	800574a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005734:	683b      	ldr	r3, [r7, #0]
 8005736:	b2da      	uxtb	r2, r3
 8005738:	490c      	ldr	r1, [pc, #48]	; (800576c <__NVIC_SetPriority+0x4c>)
 800573a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800573e:	0112      	lsls	r2, r2, #4
 8005740:	b2d2      	uxtb	r2, r2
 8005742:	440b      	add	r3, r1
 8005744:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005748:	e00a      	b.n	8005760 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800574a:	683b      	ldr	r3, [r7, #0]
 800574c:	b2da      	uxtb	r2, r3
 800574e:	4908      	ldr	r1, [pc, #32]	; (8005770 <__NVIC_SetPriority+0x50>)
 8005750:	79fb      	ldrb	r3, [r7, #7]
 8005752:	f003 030f 	and.w	r3, r3, #15
 8005756:	3b04      	subs	r3, #4
 8005758:	0112      	lsls	r2, r2, #4
 800575a:	b2d2      	uxtb	r2, r2
 800575c:	440b      	add	r3, r1
 800575e:	761a      	strb	r2, [r3, #24]
}
 8005760:	bf00      	nop
 8005762:	370c      	adds	r7, #12
 8005764:	46bd      	mov	sp, r7
 8005766:	bc80      	pop	{r7}
 8005768:	4770      	bx	lr
 800576a:	bf00      	nop
 800576c:	e000e100 	.word	0xe000e100
 8005770:	e000ed00 	.word	0xe000ed00

08005774 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005774:	b480      	push	{r7}
 8005776:	b089      	sub	sp, #36	; 0x24
 8005778:	af00      	add	r7, sp, #0
 800577a:	60f8      	str	r0, [r7, #12]
 800577c:	60b9      	str	r1, [r7, #8]
 800577e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	f003 0307 	and.w	r3, r3, #7
 8005786:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005788:	69fb      	ldr	r3, [r7, #28]
 800578a:	f1c3 0307 	rsb	r3, r3, #7
 800578e:	2b04      	cmp	r3, #4
 8005790:	bf28      	it	cs
 8005792:	2304      	movcs	r3, #4
 8005794:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005796:	69fb      	ldr	r3, [r7, #28]
 8005798:	3304      	adds	r3, #4
 800579a:	2b06      	cmp	r3, #6
 800579c:	d902      	bls.n	80057a4 <NVIC_EncodePriority+0x30>
 800579e:	69fb      	ldr	r3, [r7, #28]
 80057a0:	3b03      	subs	r3, #3
 80057a2:	e000      	b.n	80057a6 <NVIC_EncodePriority+0x32>
 80057a4:	2300      	movs	r3, #0
 80057a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80057a8:	f04f 32ff 	mov.w	r2, #4294967295
 80057ac:	69bb      	ldr	r3, [r7, #24]
 80057ae:	fa02 f303 	lsl.w	r3, r2, r3
 80057b2:	43da      	mvns	r2, r3
 80057b4:	68bb      	ldr	r3, [r7, #8]
 80057b6:	401a      	ands	r2, r3
 80057b8:	697b      	ldr	r3, [r7, #20]
 80057ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80057bc:	f04f 31ff 	mov.w	r1, #4294967295
 80057c0:	697b      	ldr	r3, [r7, #20]
 80057c2:	fa01 f303 	lsl.w	r3, r1, r3
 80057c6:	43d9      	mvns	r1, r3
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80057cc:	4313      	orrs	r3, r2
         );
}
 80057ce:	4618      	mov	r0, r3
 80057d0:	3724      	adds	r7, #36	; 0x24
 80057d2:	46bd      	mov	sp, r7
 80057d4:	bc80      	pop	{r7}
 80057d6:	4770      	bx	lr

080057d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80057d8:	b580      	push	{r7, lr}
 80057da:	b082      	sub	sp, #8
 80057dc:	af00      	add	r7, sp, #0
 80057de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	3b01      	subs	r3, #1
 80057e4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80057e8:	d301      	bcc.n	80057ee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80057ea:	2301      	movs	r3, #1
 80057ec:	e00f      	b.n	800580e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80057ee:	4a0a      	ldr	r2, [pc, #40]	; (8005818 <SysTick_Config+0x40>)
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	3b01      	subs	r3, #1
 80057f4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80057f6:	210f      	movs	r1, #15
 80057f8:	f04f 30ff 	mov.w	r0, #4294967295
 80057fc:	f7ff ff90 	bl	8005720 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005800:	4b05      	ldr	r3, [pc, #20]	; (8005818 <SysTick_Config+0x40>)
 8005802:	2200      	movs	r2, #0
 8005804:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005806:	4b04      	ldr	r3, [pc, #16]	; (8005818 <SysTick_Config+0x40>)
 8005808:	2207      	movs	r2, #7
 800580a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800580c:	2300      	movs	r3, #0
}
 800580e:	4618      	mov	r0, r3
 8005810:	3708      	adds	r7, #8
 8005812:	46bd      	mov	sp, r7
 8005814:	bd80      	pop	{r7, pc}
 8005816:	bf00      	nop
 8005818:	e000e010 	.word	0xe000e010

0800581c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800581c:	b580      	push	{r7, lr}
 800581e:	b082      	sub	sp, #8
 8005820:	af00      	add	r7, sp, #0
 8005822:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005824:	6878      	ldr	r0, [r7, #4]
 8005826:	f7ff ff09 	bl	800563c <__NVIC_SetPriorityGrouping>
}
 800582a:	bf00      	nop
 800582c:	3708      	adds	r7, #8
 800582e:	46bd      	mov	sp, r7
 8005830:	bd80      	pop	{r7, pc}

08005832 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005832:	b580      	push	{r7, lr}
 8005834:	b086      	sub	sp, #24
 8005836:	af00      	add	r7, sp, #0
 8005838:	4603      	mov	r3, r0
 800583a:	60b9      	str	r1, [r7, #8]
 800583c:	607a      	str	r2, [r7, #4]
 800583e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005840:	2300      	movs	r3, #0
 8005842:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005844:	f7ff ff1e 	bl	8005684 <__NVIC_GetPriorityGrouping>
 8005848:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800584a:	687a      	ldr	r2, [r7, #4]
 800584c:	68b9      	ldr	r1, [r7, #8]
 800584e:	6978      	ldr	r0, [r7, #20]
 8005850:	f7ff ff90 	bl	8005774 <NVIC_EncodePriority>
 8005854:	4602      	mov	r2, r0
 8005856:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800585a:	4611      	mov	r1, r2
 800585c:	4618      	mov	r0, r3
 800585e:	f7ff ff5f 	bl	8005720 <__NVIC_SetPriority>
}
 8005862:	bf00      	nop
 8005864:	3718      	adds	r7, #24
 8005866:	46bd      	mov	sp, r7
 8005868:	bd80      	pop	{r7, pc}

0800586a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f2xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800586a:	b580      	push	{r7, lr}
 800586c:	b082      	sub	sp, #8
 800586e:	af00      	add	r7, sp, #0
 8005870:	4603      	mov	r3, r0
 8005872:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005874:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005878:	4618      	mov	r0, r3
 800587a:	f7ff ff11 	bl	80056a0 <__NVIC_EnableIRQ>
}
 800587e:	bf00      	nop
 8005880:	3708      	adds	r7, #8
 8005882:	46bd      	mov	sp, r7
 8005884:	bd80      	pop	{r7, pc}

08005886 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f2xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8005886:	b580      	push	{r7, lr}
 8005888:	b082      	sub	sp, #8
 800588a:	af00      	add	r7, sp, #0
 800588c:	4603      	mov	r3, r0
 800588e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8005890:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005894:	4618      	mov	r0, r3
 8005896:	f7ff ff1f 	bl	80056d8 <__NVIC_DisableIRQ>
}
 800589a:	bf00      	nop
 800589c:	3708      	adds	r7, #8
 800589e:	46bd      	mov	sp, r7
 80058a0:	bd80      	pop	{r7, pc}

080058a2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80058a2:	b580      	push	{r7, lr}
 80058a4:	b082      	sub	sp, #8
 80058a6:	af00      	add	r7, sp, #0
 80058a8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80058aa:	6878      	ldr	r0, [r7, #4]
 80058ac:	f7ff ff94 	bl	80057d8 <SysTick_Config>
 80058b0:	4603      	mov	r3, r0
}
 80058b2:	4618      	mov	r0, r3
 80058b4:	3708      	adds	r7, #8
 80058b6:	46bd      	mov	sp, r7
 80058b8:	bd80      	pop	{r7, pc}
	...

080058bc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80058bc:	b580      	push	{r7, lr}
 80058be:	b086      	sub	sp, #24
 80058c0:	af00      	add	r7, sp, #0
 80058c2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80058c4:	2300      	movs	r3, #0
 80058c6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80058c8:	f7ff fc90 	bl	80051ec <HAL_GetTick>
 80058cc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d101      	bne.n	80058d8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80058d4:	2301      	movs	r3, #1
 80058d6:	e099      	b.n	8005a0c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	2202      	movs	r2, #2
 80058dc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	2200      	movs	r2, #0
 80058e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	681a      	ldr	r2, [r3, #0]
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	f022 0201 	bic.w	r2, r2, #1
 80058f6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80058f8:	e00f      	b.n	800591a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80058fa:	f7ff fc77 	bl	80051ec <HAL_GetTick>
 80058fe:	4602      	mov	r2, r0
 8005900:	693b      	ldr	r3, [r7, #16]
 8005902:	1ad3      	subs	r3, r2, r3
 8005904:	2b05      	cmp	r3, #5
 8005906:	d908      	bls.n	800591a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	2220      	movs	r2, #32
 800590c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	2203      	movs	r2, #3
 8005912:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8005916:	2303      	movs	r3, #3
 8005918:	e078      	b.n	8005a0c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	f003 0301 	and.w	r3, r3, #1
 8005924:	2b00      	cmp	r3, #0
 8005926:	d1e8      	bne.n	80058fa <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005930:	697a      	ldr	r2, [r7, #20]
 8005932:	4b38      	ldr	r3, [pc, #224]	; (8005a14 <HAL_DMA_Init+0x158>)
 8005934:	4013      	ands	r3, r2
 8005936:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	685a      	ldr	r2, [r3, #4]
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	689b      	ldr	r3, [r3, #8]
 8005940:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005946:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	691b      	ldr	r3, [r3, #16]
 800594c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005952:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	699b      	ldr	r3, [r3, #24]
 8005958:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800595e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	6a1b      	ldr	r3, [r3, #32]
 8005964:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005966:	697a      	ldr	r2, [r7, #20]
 8005968:	4313      	orrs	r3, r2
 800596a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005970:	2b04      	cmp	r3, #4
 8005972:	d107      	bne.n	8005984 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800597c:	4313      	orrs	r3, r2
 800597e:	697a      	ldr	r2, [r7, #20]
 8005980:	4313      	orrs	r3, r2
 8005982:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	697a      	ldr	r2, [r7, #20]
 800598a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	695b      	ldr	r3, [r3, #20]
 8005992:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005994:	697b      	ldr	r3, [r7, #20]
 8005996:	f023 0307 	bic.w	r3, r3, #7
 800599a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059a0:	697a      	ldr	r2, [r7, #20]
 80059a2:	4313      	orrs	r3, r2
 80059a4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059aa:	2b04      	cmp	r3, #4
 80059ac:	d117      	bne.n	80059de <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059b2:	697a      	ldr	r2, [r7, #20]
 80059b4:	4313      	orrs	r3, r2
 80059b6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d00e      	beq.n	80059de <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80059c0:	6878      	ldr	r0, [r7, #4]
 80059c2:	f000 f9e7 	bl	8005d94 <DMA_CheckFifoParam>
 80059c6:	4603      	mov	r3, r0
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d008      	beq.n	80059de <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	2240      	movs	r2, #64	; 0x40
 80059d0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	2201      	movs	r2, #1
 80059d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80059da:	2301      	movs	r3, #1
 80059dc:	e016      	b.n	8005a0c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	697a      	ldr	r2, [r7, #20]
 80059e4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80059e6:	6878      	ldr	r0, [r7, #4]
 80059e8:	f000 f9a0 	bl	8005d2c <DMA_CalcBaseAndBitshift>
 80059ec:	4603      	mov	r3, r0
 80059ee:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80059f4:	223f      	movs	r2, #63	; 0x3f
 80059f6:	409a      	lsls	r2, r3
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	2200      	movs	r2, #0
 8005a00:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	2201      	movs	r2, #1
 8005a06:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8005a0a:	2300      	movs	r3, #0
}
 8005a0c:	4618      	mov	r0, r3
 8005a0e:	3718      	adds	r7, #24
 8005a10:	46bd      	mov	sp, r7
 8005a12:	bd80      	pop	{r7, pc}
 8005a14:	f010803f 	.word	0xf010803f

08005a18 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005a18:	b580      	push	{r7, lr}
 8005a1a:	b086      	sub	sp, #24
 8005a1c:	af00      	add	r7, sp, #0
 8005a1e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8005a20:	2300      	movs	r3, #0
 8005a22:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005a24:	4b92      	ldr	r3, [pc, #584]	; (8005c70 <HAL_DMA_IRQHandler+0x258>)
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	4a92      	ldr	r2, [pc, #584]	; (8005c74 <HAL_DMA_IRQHandler+0x25c>)
 8005a2a:	fba2 2303 	umull	r2, r3, r2, r3
 8005a2e:	0a9b      	lsrs	r3, r3, #10
 8005a30:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a36:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8005a38:	693b      	ldr	r3, [r7, #16]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a42:	2208      	movs	r2, #8
 8005a44:	409a      	lsls	r2, r3
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	4013      	ands	r3, r2
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d01a      	beq.n	8005a84 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	f003 0304 	and.w	r3, r3, #4
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d013      	beq.n	8005a84 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	681a      	ldr	r2, [r3, #0]
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	f022 0204 	bic.w	r2, r2, #4
 8005a6a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a70:	2208      	movs	r2, #8
 8005a72:	409a      	lsls	r2, r3
 8005a74:	693b      	ldr	r3, [r7, #16]
 8005a76:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a7c:	f043 0201 	orr.w	r2, r3, #1
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a88:	2201      	movs	r2, #1
 8005a8a:	409a      	lsls	r2, r3
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	4013      	ands	r3, r2
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d012      	beq.n	8005aba <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	695b      	ldr	r3, [r3, #20]
 8005a9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d00b      	beq.n	8005aba <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005aa6:	2201      	movs	r2, #1
 8005aa8:	409a      	lsls	r2, r3
 8005aaa:	693b      	ldr	r3, [r7, #16]
 8005aac:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ab2:	f043 0202 	orr.w	r2, r3, #2
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005abe:	2204      	movs	r2, #4
 8005ac0:	409a      	lsls	r2, r3
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	4013      	ands	r3, r2
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d012      	beq.n	8005af0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	f003 0302 	and.w	r3, r3, #2
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d00b      	beq.n	8005af0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005adc:	2204      	movs	r2, #4
 8005ade:	409a      	lsls	r2, r3
 8005ae0:	693b      	ldr	r3, [r7, #16]
 8005ae2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ae8:	f043 0204 	orr.w	r2, r3, #4
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005af4:	2210      	movs	r2, #16
 8005af6:	409a      	lsls	r2, r3
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	4013      	ands	r3, r2
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d043      	beq.n	8005b88 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	f003 0308 	and.w	r3, r3, #8
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d03c      	beq.n	8005b88 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b12:	2210      	movs	r2, #16
 8005b14:	409a      	lsls	r2, r3
 8005b16:	693b      	ldr	r3, [r7, #16]
 8005b18:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d018      	beq.n	8005b5a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d108      	bne.n	8005b48 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d024      	beq.n	8005b88 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b42:	6878      	ldr	r0, [r7, #4]
 8005b44:	4798      	blx	r3
 8005b46:	e01f      	b.n	8005b88 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d01b      	beq.n	8005b88 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005b54:	6878      	ldr	r0, [r7, #4]
 8005b56:	4798      	blx	r3
 8005b58:	e016      	b.n	8005b88 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d107      	bne.n	8005b78 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	681a      	ldr	r2, [r3, #0]
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	f022 0208 	bic.w	r2, r2, #8
 8005b76:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d003      	beq.n	8005b88 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b84:	6878      	ldr	r0, [r7, #4]
 8005b86:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b8c:	2220      	movs	r2, #32
 8005b8e:	409a      	lsls	r2, r3
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	4013      	ands	r3, r2
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	f000 808e 	beq.w	8005cb6 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	f003 0310 	and.w	r3, r3, #16
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	f000 8086 	beq.w	8005cb6 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005bae:	2220      	movs	r2, #32
 8005bb0:	409a      	lsls	r2, r3
 8005bb2:	693b      	ldr	r3, [r7, #16]
 8005bb4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005bbc:	b2db      	uxtb	r3, r3
 8005bbe:	2b05      	cmp	r3, #5
 8005bc0:	d136      	bne.n	8005c30 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	681a      	ldr	r2, [r3, #0]
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	f022 0216 	bic.w	r2, r2, #22
 8005bd0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	695a      	ldr	r2, [r3, #20]
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005be0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d103      	bne.n	8005bf2 <HAL_DMA_IRQHandler+0x1da>
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d007      	beq.n	8005c02 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	681a      	ldr	r2, [r3, #0]
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	f022 0208 	bic.w	r2, r2, #8
 8005c00:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c06:	223f      	movs	r2, #63	; 0x3f
 8005c08:	409a      	lsls	r2, r3
 8005c0a:	693b      	ldr	r3, [r7, #16]
 8005c0c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	2201      	movs	r2, #1
 8005c12:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	2200      	movs	r2, #0
 8005c1a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d07d      	beq.n	8005d22 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c2a:	6878      	ldr	r0, [r7, #4]
 8005c2c:	4798      	blx	r3
        }
        return;
 8005c2e:	e078      	b.n	8005d22 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d01c      	beq.n	8005c78 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d108      	bne.n	8005c5e <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d030      	beq.n	8005cb6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c58:	6878      	ldr	r0, [r7, #4]
 8005c5a:	4798      	blx	r3
 8005c5c:	e02b      	b.n	8005cb6 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d027      	beq.n	8005cb6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c6a:	6878      	ldr	r0, [r7, #4]
 8005c6c:	4798      	blx	r3
 8005c6e:	e022      	b.n	8005cb6 <HAL_DMA_IRQHandler+0x29e>
 8005c70:	20000024 	.word	0x20000024
 8005c74:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d10f      	bne.n	8005ca6 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	681a      	ldr	r2, [r3, #0]
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	f022 0210 	bic.w	r2, r2, #16
 8005c94:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	2201      	movs	r2, #1
 8005c9a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	2200      	movs	r2, #0
 8005ca2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d003      	beq.n	8005cb6 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005cb2:	6878      	ldr	r0, [r7, #4]
 8005cb4:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d032      	beq.n	8005d24 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005cc2:	f003 0301 	and.w	r3, r3, #1
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d022      	beq.n	8005d10 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	2205      	movs	r2, #5
 8005cce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	681a      	ldr	r2, [r3, #0]
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	f022 0201 	bic.w	r2, r2, #1
 8005ce0:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8005ce2:	68bb      	ldr	r3, [r7, #8]
 8005ce4:	3301      	adds	r3, #1
 8005ce6:	60bb      	str	r3, [r7, #8]
 8005ce8:	697a      	ldr	r2, [r7, #20]
 8005cea:	429a      	cmp	r2, r3
 8005cec:	d307      	bcc.n	8005cfe <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	f003 0301 	and.w	r3, r3, #1
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d1f2      	bne.n	8005ce2 <HAL_DMA_IRQHandler+0x2ca>
 8005cfc:	e000      	b.n	8005d00 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8005cfe:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	2201      	movs	r2, #1
 8005d04:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	2200      	movs	r2, #0
 8005d0c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d005      	beq.n	8005d24 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005d1c:	6878      	ldr	r0, [r7, #4]
 8005d1e:	4798      	blx	r3
 8005d20:	e000      	b.n	8005d24 <HAL_DMA_IRQHandler+0x30c>
        return;
 8005d22:	bf00      	nop
    }
  }
}
 8005d24:	3718      	adds	r7, #24
 8005d26:	46bd      	mov	sp, r7
 8005d28:	bd80      	pop	{r7, pc}
 8005d2a:	bf00      	nop

08005d2c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005d2c:	b480      	push	{r7}
 8005d2e:	b085      	sub	sp, #20
 8005d30:	af00      	add	r7, sp, #0
 8005d32:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	b2db      	uxtb	r3, r3
 8005d3a:	3b10      	subs	r3, #16
 8005d3c:	4a13      	ldr	r2, [pc, #76]	; (8005d8c <DMA_CalcBaseAndBitshift+0x60>)
 8005d3e:	fba2 2303 	umull	r2, r3, r2, r3
 8005d42:	091b      	lsrs	r3, r3, #4
 8005d44:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8005d46:	4a12      	ldr	r2, [pc, #72]	; (8005d90 <DMA_CalcBaseAndBitshift+0x64>)
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	4413      	add	r3, r2
 8005d4c:	781b      	ldrb	r3, [r3, #0]
 8005d4e:	461a      	mov	r2, r3
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	2b03      	cmp	r3, #3
 8005d58:	d909      	bls.n	8005d6e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8005d62:	f023 0303 	bic.w	r3, r3, #3
 8005d66:	1d1a      	adds	r2, r3, #4
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	659a      	str	r2, [r3, #88]	; 0x58
 8005d6c:	e007      	b.n	8005d7e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8005d76:	f023 0303 	bic.w	r3, r3, #3
 8005d7a:	687a      	ldr	r2, [r7, #4]
 8005d7c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8005d82:	4618      	mov	r0, r3
 8005d84:	3714      	adds	r7, #20
 8005d86:	46bd      	mov	sp, r7
 8005d88:	bc80      	pop	{r7}
 8005d8a:	4770      	bx	lr
 8005d8c:	aaaaaaab 	.word	0xaaaaaaab
 8005d90:	08013020 	.word	0x08013020

08005d94 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005d94:	b480      	push	{r7}
 8005d96:	b085      	sub	sp, #20
 8005d98:	af00      	add	r7, sp, #0
 8005d9a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005d9c:	2300      	movs	r3, #0
 8005d9e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005da4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	699b      	ldr	r3, [r3, #24]
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d11f      	bne.n	8005dee <DMA_CheckFifoParam+0x5a>
 8005dae:	68bb      	ldr	r3, [r7, #8]
 8005db0:	2b03      	cmp	r3, #3
 8005db2:	d856      	bhi.n	8005e62 <DMA_CheckFifoParam+0xce>
 8005db4:	a201      	add	r2, pc, #4	; (adr r2, 8005dbc <DMA_CheckFifoParam+0x28>)
 8005db6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005dba:	bf00      	nop
 8005dbc:	08005dcd 	.word	0x08005dcd
 8005dc0:	08005ddf 	.word	0x08005ddf
 8005dc4:	08005dcd 	.word	0x08005dcd
 8005dc8:	08005e63 	.word	0x08005e63
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005dd0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d046      	beq.n	8005e66 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8005dd8:	2301      	movs	r3, #1
 8005dda:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005ddc:	e043      	b.n	8005e66 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005de2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005de6:	d140      	bne.n	8005e6a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8005de8:	2301      	movs	r3, #1
 8005dea:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005dec:	e03d      	b.n	8005e6a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	699b      	ldr	r3, [r3, #24]
 8005df2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005df6:	d121      	bne.n	8005e3c <DMA_CheckFifoParam+0xa8>
 8005df8:	68bb      	ldr	r3, [r7, #8]
 8005dfa:	2b03      	cmp	r3, #3
 8005dfc:	d837      	bhi.n	8005e6e <DMA_CheckFifoParam+0xda>
 8005dfe:	a201      	add	r2, pc, #4	; (adr r2, 8005e04 <DMA_CheckFifoParam+0x70>)
 8005e00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e04:	08005e15 	.word	0x08005e15
 8005e08:	08005e1b 	.word	0x08005e1b
 8005e0c:	08005e15 	.word	0x08005e15
 8005e10:	08005e2d 	.word	0x08005e2d
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8005e14:	2301      	movs	r3, #1
 8005e16:	73fb      	strb	r3, [r7, #15]
      break;
 8005e18:	e030      	b.n	8005e7c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e1e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d025      	beq.n	8005e72 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8005e26:	2301      	movs	r3, #1
 8005e28:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005e2a:	e022      	b.n	8005e72 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e30:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005e34:	d11f      	bne.n	8005e76 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8005e36:	2301      	movs	r3, #1
 8005e38:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8005e3a:	e01c      	b.n	8005e76 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8005e3c:	68bb      	ldr	r3, [r7, #8]
 8005e3e:	2b02      	cmp	r3, #2
 8005e40:	d903      	bls.n	8005e4a <DMA_CheckFifoParam+0xb6>
 8005e42:	68bb      	ldr	r3, [r7, #8]
 8005e44:	2b03      	cmp	r3, #3
 8005e46:	d003      	beq.n	8005e50 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8005e48:	e018      	b.n	8005e7c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8005e4a:	2301      	movs	r3, #1
 8005e4c:	73fb      	strb	r3, [r7, #15]
      break;
 8005e4e:	e015      	b.n	8005e7c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e54:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d00e      	beq.n	8005e7a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8005e5c:	2301      	movs	r3, #1
 8005e5e:	73fb      	strb	r3, [r7, #15]
      break;
 8005e60:	e00b      	b.n	8005e7a <DMA_CheckFifoParam+0xe6>
      break;
 8005e62:	bf00      	nop
 8005e64:	e00a      	b.n	8005e7c <DMA_CheckFifoParam+0xe8>
      break;
 8005e66:	bf00      	nop
 8005e68:	e008      	b.n	8005e7c <DMA_CheckFifoParam+0xe8>
      break;
 8005e6a:	bf00      	nop
 8005e6c:	e006      	b.n	8005e7c <DMA_CheckFifoParam+0xe8>
      break;
 8005e6e:	bf00      	nop
 8005e70:	e004      	b.n	8005e7c <DMA_CheckFifoParam+0xe8>
      break;
 8005e72:	bf00      	nop
 8005e74:	e002      	b.n	8005e7c <DMA_CheckFifoParam+0xe8>
      break;   
 8005e76:	bf00      	nop
 8005e78:	e000      	b.n	8005e7c <DMA_CheckFifoParam+0xe8>
      break;
 8005e7a:	bf00      	nop
    }
  } 
  
  return status; 
 8005e7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e7e:	4618      	mov	r0, r3
 8005e80:	3714      	adds	r7, #20
 8005e82:	46bd      	mov	sp, r7
 8005e84:	bc80      	pop	{r7}
 8005e86:	4770      	bx	lr

08005e88 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005e88:	b480      	push	{r7}
 8005e8a:	b087      	sub	sp, #28
 8005e8c:	af00      	add	r7, sp, #0
 8005e8e:	6078      	str	r0, [r7, #4]
 8005e90:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8005e92:	2300      	movs	r3, #0
 8005e94:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005e96:	e16f      	b.n	8006178 <HAL_GPIO_Init+0x2f0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8005e98:	683b      	ldr	r3, [r7, #0]
 8005e9a:	681a      	ldr	r2, [r3, #0]
 8005e9c:	2101      	movs	r1, #1
 8005e9e:	697b      	ldr	r3, [r7, #20]
 8005ea0:	fa01 f303 	lsl.w	r3, r1, r3
 8005ea4:	4013      	ands	r3, r2
 8005ea6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	f000 8161 	beq.w	8006172 <HAL_GPIO_Init+0x2ea>
    {
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005eb0:	683b      	ldr	r3, [r7, #0]
 8005eb2:	685b      	ldr	r3, [r3, #4]
 8005eb4:	f003 0303 	and.w	r3, r3, #3
 8005eb8:	2b01      	cmp	r3, #1
 8005eba:	d005      	beq.n	8005ec8 <HAL_GPIO_Init+0x40>
 8005ebc:	683b      	ldr	r3, [r7, #0]
 8005ebe:	685b      	ldr	r3, [r3, #4]
 8005ec0:	f003 0303 	and.w	r3, r3, #3
 8005ec4:	2b02      	cmp	r3, #2
 8005ec6:	d130      	bne.n	8005f2a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	689b      	ldr	r3, [r3, #8]
 8005ecc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8005ece:	697b      	ldr	r3, [r7, #20]
 8005ed0:	005b      	lsls	r3, r3, #1
 8005ed2:	2203      	movs	r2, #3
 8005ed4:	fa02 f303 	lsl.w	r3, r2, r3
 8005ed8:	43db      	mvns	r3, r3
 8005eda:	693a      	ldr	r2, [r7, #16]
 8005edc:	4013      	ands	r3, r2
 8005ede:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8005ee0:	683b      	ldr	r3, [r7, #0]
 8005ee2:	68da      	ldr	r2, [r3, #12]
 8005ee4:	697b      	ldr	r3, [r7, #20]
 8005ee6:	005b      	lsls	r3, r3, #1
 8005ee8:	fa02 f303 	lsl.w	r3, r2, r3
 8005eec:	693a      	ldr	r2, [r7, #16]
 8005eee:	4313      	orrs	r3, r2
 8005ef0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	693a      	ldr	r2, [r7, #16]
 8005ef6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	685b      	ldr	r3, [r3, #4]
 8005efc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005efe:	2201      	movs	r2, #1
 8005f00:	697b      	ldr	r3, [r7, #20]
 8005f02:	fa02 f303 	lsl.w	r3, r2, r3
 8005f06:	43db      	mvns	r3, r3
 8005f08:	693a      	ldr	r2, [r7, #16]
 8005f0a:	4013      	ands	r3, r2
 8005f0c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005f0e:	683b      	ldr	r3, [r7, #0]
 8005f10:	685b      	ldr	r3, [r3, #4]
 8005f12:	091b      	lsrs	r3, r3, #4
 8005f14:	f003 0201 	and.w	r2, r3, #1
 8005f18:	697b      	ldr	r3, [r7, #20]
 8005f1a:	fa02 f303 	lsl.w	r3, r2, r3
 8005f1e:	693a      	ldr	r2, [r7, #16]
 8005f20:	4313      	orrs	r3, r2
 8005f22:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	693a      	ldr	r2, [r7, #16]
 8005f28:	605a      	str	r2, [r3, #4]
      }
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005f2a:	683b      	ldr	r3, [r7, #0]
 8005f2c:	685b      	ldr	r3, [r3, #4]
 8005f2e:	f003 0303 	and.w	r3, r3, #3
 8005f32:	2b03      	cmp	r3, #3
 8005f34:	d017      	beq.n	8005f66 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	68db      	ldr	r3, [r3, #12]
 8005f3a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8005f3c:	697b      	ldr	r3, [r7, #20]
 8005f3e:	005b      	lsls	r3, r3, #1
 8005f40:	2203      	movs	r2, #3
 8005f42:	fa02 f303 	lsl.w	r3, r2, r3
 8005f46:	43db      	mvns	r3, r3
 8005f48:	693a      	ldr	r2, [r7, #16]
 8005f4a:	4013      	ands	r3, r2
 8005f4c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8005f4e:	683b      	ldr	r3, [r7, #0]
 8005f50:	689a      	ldr	r2, [r3, #8]
 8005f52:	697b      	ldr	r3, [r7, #20]
 8005f54:	005b      	lsls	r3, r3, #1
 8005f56:	fa02 f303 	lsl.w	r3, r2, r3
 8005f5a:	693a      	ldr	r2, [r7, #16]
 8005f5c:	4313      	orrs	r3, r2
 8005f5e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	693a      	ldr	r2, [r7, #16]
 8005f64:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005f66:	683b      	ldr	r3, [r7, #0]
 8005f68:	685b      	ldr	r3, [r3, #4]
 8005f6a:	f003 0303 	and.w	r3, r3, #3
 8005f6e:	2b02      	cmp	r3, #2
 8005f70:	d123      	bne.n	8005fba <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8005f72:	697b      	ldr	r3, [r7, #20]
 8005f74:	08da      	lsrs	r2, r3, #3
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	3208      	adds	r2, #8
 8005f7a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f7e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8005f80:	697b      	ldr	r3, [r7, #20]
 8005f82:	f003 0307 	and.w	r3, r3, #7
 8005f86:	009b      	lsls	r3, r3, #2
 8005f88:	220f      	movs	r2, #15
 8005f8a:	fa02 f303 	lsl.w	r3, r2, r3
 8005f8e:	43db      	mvns	r3, r3
 8005f90:	693a      	ldr	r2, [r7, #16]
 8005f92:	4013      	ands	r3, r2
 8005f94:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8005f96:	683b      	ldr	r3, [r7, #0]
 8005f98:	691a      	ldr	r2, [r3, #16]
 8005f9a:	697b      	ldr	r3, [r7, #20]
 8005f9c:	f003 0307 	and.w	r3, r3, #7
 8005fa0:	009b      	lsls	r3, r3, #2
 8005fa2:	fa02 f303 	lsl.w	r3, r2, r3
 8005fa6:	693a      	ldr	r2, [r7, #16]
 8005fa8:	4313      	orrs	r3, r2
 8005faa:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8005fac:	697b      	ldr	r3, [r7, #20]
 8005fae:	08da      	lsrs	r2, r3, #3
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	3208      	adds	r2, #8
 8005fb4:	6939      	ldr	r1, [r7, #16]
 8005fb6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8005fc0:	697b      	ldr	r3, [r7, #20]
 8005fc2:	005b      	lsls	r3, r3, #1
 8005fc4:	2203      	movs	r2, #3
 8005fc6:	fa02 f303 	lsl.w	r3, r2, r3
 8005fca:	43db      	mvns	r3, r3
 8005fcc:	693a      	ldr	r2, [r7, #16]
 8005fce:	4013      	ands	r3, r2
 8005fd0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8005fd2:	683b      	ldr	r3, [r7, #0]
 8005fd4:	685b      	ldr	r3, [r3, #4]
 8005fd6:	f003 0203 	and.w	r2, r3, #3
 8005fda:	697b      	ldr	r3, [r7, #20]
 8005fdc:	005b      	lsls	r3, r3, #1
 8005fde:	fa02 f303 	lsl.w	r3, r2, r3
 8005fe2:	693a      	ldr	r2, [r7, #16]
 8005fe4:	4313      	orrs	r3, r2
 8005fe6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	693a      	ldr	r2, [r7, #16]
 8005fec:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005fee:	683b      	ldr	r3, [r7, #0]
 8005ff0:	685b      	ldr	r3, [r3, #4]
 8005ff2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	f000 80bb 	beq.w	8006172 <HAL_GPIO_Init+0x2ea>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005ffc:	2300      	movs	r3, #0
 8005ffe:	60bb      	str	r3, [r7, #8]
 8006000:	4b64      	ldr	r3, [pc, #400]	; (8006194 <HAL_GPIO_Init+0x30c>)
 8006002:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006004:	4a63      	ldr	r2, [pc, #396]	; (8006194 <HAL_GPIO_Init+0x30c>)
 8006006:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800600a:	6453      	str	r3, [r2, #68]	; 0x44
 800600c:	4b61      	ldr	r3, [pc, #388]	; (8006194 <HAL_GPIO_Init+0x30c>)
 800600e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006010:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006014:	60bb      	str	r3, [r7, #8]
 8006016:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8006018:	4a5f      	ldr	r2, [pc, #380]	; (8006198 <HAL_GPIO_Init+0x310>)
 800601a:	697b      	ldr	r3, [r7, #20]
 800601c:	089b      	lsrs	r3, r3, #2
 800601e:	3302      	adds	r3, #2
 8006020:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006024:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8006026:	697b      	ldr	r3, [r7, #20]
 8006028:	f003 0303 	and.w	r3, r3, #3
 800602c:	009b      	lsls	r3, r3, #2
 800602e:	220f      	movs	r2, #15
 8006030:	fa02 f303 	lsl.w	r3, r2, r3
 8006034:	43db      	mvns	r3, r3
 8006036:	693a      	ldr	r2, [r7, #16]
 8006038:	4013      	ands	r3, r2
 800603a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	4a57      	ldr	r2, [pc, #348]	; (800619c <HAL_GPIO_Init+0x314>)
 8006040:	4293      	cmp	r3, r2
 8006042:	d031      	beq.n	80060a8 <HAL_GPIO_Init+0x220>
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	4a56      	ldr	r2, [pc, #344]	; (80061a0 <HAL_GPIO_Init+0x318>)
 8006048:	4293      	cmp	r3, r2
 800604a:	d02b      	beq.n	80060a4 <HAL_GPIO_Init+0x21c>
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	4a55      	ldr	r2, [pc, #340]	; (80061a4 <HAL_GPIO_Init+0x31c>)
 8006050:	4293      	cmp	r3, r2
 8006052:	d025      	beq.n	80060a0 <HAL_GPIO_Init+0x218>
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	4a54      	ldr	r2, [pc, #336]	; (80061a8 <HAL_GPIO_Init+0x320>)
 8006058:	4293      	cmp	r3, r2
 800605a:	d01f      	beq.n	800609c <HAL_GPIO_Init+0x214>
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	4a53      	ldr	r2, [pc, #332]	; (80061ac <HAL_GPIO_Init+0x324>)
 8006060:	4293      	cmp	r3, r2
 8006062:	d019      	beq.n	8006098 <HAL_GPIO_Init+0x210>
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	4a52      	ldr	r2, [pc, #328]	; (80061b0 <HAL_GPIO_Init+0x328>)
 8006068:	4293      	cmp	r3, r2
 800606a:	d013      	beq.n	8006094 <HAL_GPIO_Init+0x20c>
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	4a51      	ldr	r2, [pc, #324]	; (80061b4 <HAL_GPIO_Init+0x32c>)
 8006070:	4293      	cmp	r3, r2
 8006072:	d00d      	beq.n	8006090 <HAL_GPIO_Init+0x208>
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	4a50      	ldr	r2, [pc, #320]	; (80061b8 <HAL_GPIO_Init+0x330>)
 8006078:	4293      	cmp	r3, r2
 800607a:	d007      	beq.n	800608c <HAL_GPIO_Init+0x204>
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	4a4f      	ldr	r2, [pc, #316]	; (80061bc <HAL_GPIO_Init+0x334>)
 8006080:	4293      	cmp	r3, r2
 8006082:	d101      	bne.n	8006088 <HAL_GPIO_Init+0x200>
 8006084:	2308      	movs	r3, #8
 8006086:	e010      	b.n	80060aa <HAL_GPIO_Init+0x222>
 8006088:	2309      	movs	r3, #9
 800608a:	e00e      	b.n	80060aa <HAL_GPIO_Init+0x222>
 800608c:	2307      	movs	r3, #7
 800608e:	e00c      	b.n	80060aa <HAL_GPIO_Init+0x222>
 8006090:	2306      	movs	r3, #6
 8006092:	e00a      	b.n	80060aa <HAL_GPIO_Init+0x222>
 8006094:	2305      	movs	r3, #5
 8006096:	e008      	b.n	80060aa <HAL_GPIO_Init+0x222>
 8006098:	2304      	movs	r3, #4
 800609a:	e006      	b.n	80060aa <HAL_GPIO_Init+0x222>
 800609c:	2303      	movs	r3, #3
 800609e:	e004      	b.n	80060aa <HAL_GPIO_Init+0x222>
 80060a0:	2302      	movs	r3, #2
 80060a2:	e002      	b.n	80060aa <HAL_GPIO_Init+0x222>
 80060a4:	2301      	movs	r3, #1
 80060a6:	e000      	b.n	80060aa <HAL_GPIO_Init+0x222>
 80060a8:	2300      	movs	r3, #0
 80060aa:	697a      	ldr	r2, [r7, #20]
 80060ac:	f002 0203 	and.w	r2, r2, #3
 80060b0:	0092      	lsls	r2, r2, #2
 80060b2:	4093      	lsls	r3, r2
 80060b4:	461a      	mov	r2, r3
 80060b6:	693b      	ldr	r3, [r7, #16]
 80060b8:	4313      	orrs	r3, r2
 80060ba:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80060bc:	4936      	ldr	r1, [pc, #216]	; (8006198 <HAL_GPIO_Init+0x310>)
 80060be:	697b      	ldr	r3, [r7, #20]
 80060c0:	089b      	lsrs	r3, r3, #2
 80060c2:	3302      	adds	r3, #2
 80060c4:	693a      	ldr	r2, [r7, #16]
 80060c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80060ca:	4b3d      	ldr	r3, [pc, #244]	; (80061c0 <HAL_GPIO_Init+0x338>)
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	43db      	mvns	r3, r3
 80060d4:	693a      	ldr	r2, [r7, #16]
 80060d6:	4013      	ands	r3, r2
 80060d8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80060da:	683b      	ldr	r3, [r7, #0]
 80060dc:	685b      	ldr	r3, [r3, #4]
 80060de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d003      	beq.n	80060ee <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80060e6:	693a      	ldr	r2, [r7, #16]
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	4313      	orrs	r3, r2
 80060ec:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80060ee:	4a34      	ldr	r2, [pc, #208]	; (80061c0 <HAL_GPIO_Init+0x338>)
 80060f0:	693b      	ldr	r3, [r7, #16]
 80060f2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80060f4:	4b32      	ldr	r3, [pc, #200]	; (80061c0 <HAL_GPIO_Init+0x338>)
 80060f6:	685b      	ldr	r3, [r3, #4]
 80060f8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	43db      	mvns	r3, r3
 80060fe:	693a      	ldr	r2, [r7, #16]
 8006100:	4013      	ands	r3, r2
 8006102:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8006104:	683b      	ldr	r3, [r7, #0]
 8006106:	685b      	ldr	r3, [r3, #4]
 8006108:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800610c:	2b00      	cmp	r3, #0
 800610e:	d003      	beq.n	8006118 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8006110:	693a      	ldr	r2, [r7, #16]
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	4313      	orrs	r3, r2
 8006116:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8006118:	4a29      	ldr	r2, [pc, #164]	; (80061c0 <HAL_GPIO_Init+0x338>)
 800611a:	693b      	ldr	r3, [r7, #16]
 800611c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800611e:	4b28      	ldr	r3, [pc, #160]	; (80061c0 <HAL_GPIO_Init+0x338>)
 8006120:	689b      	ldr	r3, [r3, #8]
 8006122:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	43db      	mvns	r3, r3
 8006128:	693a      	ldr	r2, [r7, #16]
 800612a:	4013      	ands	r3, r2
 800612c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800612e:	683b      	ldr	r3, [r7, #0]
 8006130:	685b      	ldr	r3, [r3, #4]
 8006132:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006136:	2b00      	cmp	r3, #0
 8006138:	d003      	beq.n	8006142 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800613a:	693a      	ldr	r2, [r7, #16]
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	4313      	orrs	r3, r2
 8006140:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8006142:	4a1f      	ldr	r2, [pc, #124]	; (80061c0 <HAL_GPIO_Init+0x338>)
 8006144:	693b      	ldr	r3, [r7, #16]
 8006146:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8006148:	4b1d      	ldr	r3, [pc, #116]	; (80061c0 <HAL_GPIO_Init+0x338>)
 800614a:	68db      	ldr	r3, [r3, #12]
 800614c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	43db      	mvns	r3, r3
 8006152:	693a      	ldr	r2, [r7, #16]
 8006154:	4013      	ands	r3, r2
 8006156:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8006158:	683b      	ldr	r3, [r7, #0]
 800615a:	685b      	ldr	r3, [r3, #4]
 800615c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006160:	2b00      	cmp	r3, #0
 8006162:	d003      	beq.n	800616c <HAL_GPIO_Init+0x2e4>
        {
          temp |= iocurrent;
 8006164:	693a      	ldr	r2, [r7, #16]
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	4313      	orrs	r3, r2
 800616a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800616c:	4a14      	ldr	r2, [pc, #80]	; (80061c0 <HAL_GPIO_Init+0x338>)
 800616e:	693b      	ldr	r3, [r7, #16]
 8006170:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8006172:	697b      	ldr	r3, [r7, #20]
 8006174:	3301      	adds	r3, #1
 8006176:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006178:	683b      	ldr	r3, [r7, #0]
 800617a:	681a      	ldr	r2, [r3, #0]
 800617c:	697b      	ldr	r3, [r7, #20]
 800617e:	fa22 f303 	lsr.w	r3, r2, r3
 8006182:	2b00      	cmp	r3, #0
 8006184:	f47f ae88 	bne.w	8005e98 <HAL_GPIO_Init+0x10>
  }
}
 8006188:	bf00      	nop
 800618a:	bf00      	nop
 800618c:	371c      	adds	r7, #28
 800618e:	46bd      	mov	sp, r7
 8006190:	bc80      	pop	{r7}
 8006192:	4770      	bx	lr
 8006194:	40023800 	.word	0x40023800
 8006198:	40013800 	.word	0x40013800
 800619c:	40020000 	.word	0x40020000
 80061a0:	40020400 	.word	0x40020400
 80061a4:	40020800 	.word	0x40020800
 80061a8:	40020c00 	.word	0x40020c00
 80061ac:	40021000 	.word	0x40021000
 80061b0:	40021400 	.word	0x40021400
 80061b4:	40021800 	.word	0x40021800
 80061b8:	40021c00 	.word	0x40021c00
 80061bc:	40022000 	.word	0x40022000
 80061c0:	40013c00 	.word	0x40013c00

080061c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80061c4:	b480      	push	{r7}
 80061c6:	b083      	sub	sp, #12
 80061c8:	af00      	add	r7, sp, #0
 80061ca:	6078      	str	r0, [r7, #4]
 80061cc:	460b      	mov	r3, r1
 80061ce:	807b      	strh	r3, [r7, #2]
 80061d0:	4613      	mov	r3, r2
 80061d2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80061d4:	787b      	ldrb	r3, [r7, #1]
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d003      	beq.n	80061e2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80061da:	887a      	ldrh	r2, [r7, #2]
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80061e0:	e003      	b.n	80061ea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80061e2:	887b      	ldrh	r3, [r7, #2]
 80061e4:	041a      	lsls	r2, r3, #16
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	619a      	str	r2, [r3, #24]
}
 80061ea:	bf00      	nop
 80061ec:	370c      	adds	r7, #12
 80061ee:	46bd      	mov	sp, r7
 80061f0:	bc80      	pop	{r7}
 80061f2:	4770      	bx	lr

080061f4 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..I) to select the GPIO peripheral. 
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80061f4:	b480      	push	{r7}
 80061f6:	b085      	sub	sp, #20
 80061f8:	af00      	add	r7, sp, #0
 80061fa:	6078      	str	r0, [r7, #4]
 80061fc:	460b      	mov	r3, r1
 80061fe:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	695b      	ldr	r3, [r3, #20]
 8006204:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8006206:	887a      	ldrh	r2, [r7, #2]
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	4013      	ands	r3, r2
 800620c:	041a      	lsls	r2, r3, #16
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	43d9      	mvns	r1, r3
 8006212:	887b      	ldrh	r3, [r7, #2]
 8006214:	400b      	ands	r3, r1
 8006216:	431a      	orrs	r2, r3
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	619a      	str	r2, [r3, #24]
}
 800621c:	bf00      	nop
 800621e:	3714      	adds	r7, #20
 8006220:	46bd      	mov	sp, r7
 8006222:	bc80      	pop	{r7}
 8006224:	4770      	bx	lr
	...

08006228 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006228:	b580      	push	{r7, lr}
 800622a:	b082      	sub	sp, #8
 800622c:	af00      	add	r7, sp, #0
 800622e:	4603      	mov	r3, r0
 8006230:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8006232:	4b08      	ldr	r3, [pc, #32]	; (8006254 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006234:	695a      	ldr	r2, [r3, #20]
 8006236:	88fb      	ldrh	r3, [r7, #6]
 8006238:	4013      	ands	r3, r2
 800623a:	2b00      	cmp	r3, #0
 800623c:	d006      	beq.n	800624c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800623e:	4a05      	ldr	r2, [pc, #20]	; (8006254 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006240:	88fb      	ldrh	r3, [r7, #6]
 8006242:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006244:	88fb      	ldrh	r3, [r7, #6]
 8006246:	4618      	mov	r0, r3
 8006248:	f7fe f874 	bl	8004334 <HAL_GPIO_EXTI_Callback>
  }
}
 800624c:	bf00      	nop
 800624e:	3708      	adds	r7, #8
 8006250:	46bd      	mov	sp, r7
 8006252:	bd80      	pop	{r7, pc}
 8006254:	40013c00 	.word	0x40013c00

08006258 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006258:	b580      	push	{r7, lr}
 800625a:	b084      	sub	sp, #16
 800625c:	af00      	add	r7, sp, #0
 800625e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	2b00      	cmp	r3, #0
 8006264:	d101      	bne.n	800626a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006266:	2301      	movs	r3, #1
 8006268:	e12b      	b.n	80064c2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006270:	b2db      	uxtb	r3, r3
 8006272:	2b00      	cmp	r3, #0
 8006274:	d106      	bne.n	8006284 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	2200      	movs	r2, #0
 800627a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800627e:	6878      	ldr	r0, [r7, #4]
 8006280:	f7fe fc5c 	bl	8004b3c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	2224      	movs	r2, #36	; 0x24
 8006288:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	681a      	ldr	r2, [r3, #0]
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	f022 0201 	bic.w	r2, r2, #1
 800629a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	681a      	ldr	r2, [r3, #0]
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80062aa:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	681a      	ldr	r2, [r3, #0]
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80062ba:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80062bc:	f002 fd12 	bl	8008ce4 <HAL_RCC_GetPCLK1Freq>
 80062c0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	685b      	ldr	r3, [r3, #4]
 80062c6:	4a81      	ldr	r2, [pc, #516]	; (80064cc <HAL_I2C_Init+0x274>)
 80062c8:	4293      	cmp	r3, r2
 80062ca:	d807      	bhi.n	80062dc <HAL_I2C_Init+0x84>
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	4a80      	ldr	r2, [pc, #512]	; (80064d0 <HAL_I2C_Init+0x278>)
 80062d0:	4293      	cmp	r3, r2
 80062d2:	bf94      	ite	ls
 80062d4:	2301      	movls	r3, #1
 80062d6:	2300      	movhi	r3, #0
 80062d8:	b2db      	uxtb	r3, r3
 80062da:	e006      	b.n	80062ea <HAL_I2C_Init+0x92>
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	4a7d      	ldr	r2, [pc, #500]	; (80064d4 <HAL_I2C_Init+0x27c>)
 80062e0:	4293      	cmp	r3, r2
 80062e2:	bf94      	ite	ls
 80062e4:	2301      	movls	r3, #1
 80062e6:	2300      	movhi	r3, #0
 80062e8:	b2db      	uxtb	r3, r3
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d001      	beq.n	80062f2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80062ee:	2301      	movs	r3, #1
 80062f0:	e0e7      	b.n	80064c2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	4a78      	ldr	r2, [pc, #480]	; (80064d8 <HAL_I2C_Init+0x280>)
 80062f6:	fba2 2303 	umull	r2, r3, r2, r3
 80062fa:	0c9b      	lsrs	r3, r3, #18
 80062fc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	685b      	ldr	r3, [r3, #4]
 8006304:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	68ba      	ldr	r2, [r7, #8]
 800630e:	430a      	orrs	r2, r1
 8006310:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	6a1b      	ldr	r3, [r3, #32]
 8006318:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	685b      	ldr	r3, [r3, #4]
 8006320:	4a6a      	ldr	r2, [pc, #424]	; (80064cc <HAL_I2C_Init+0x274>)
 8006322:	4293      	cmp	r3, r2
 8006324:	d802      	bhi.n	800632c <HAL_I2C_Init+0xd4>
 8006326:	68bb      	ldr	r3, [r7, #8]
 8006328:	3301      	adds	r3, #1
 800632a:	e009      	b.n	8006340 <HAL_I2C_Init+0xe8>
 800632c:	68bb      	ldr	r3, [r7, #8]
 800632e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8006332:	fb02 f303 	mul.w	r3, r2, r3
 8006336:	4a69      	ldr	r2, [pc, #420]	; (80064dc <HAL_I2C_Init+0x284>)
 8006338:	fba2 2303 	umull	r2, r3, r2, r3
 800633c:	099b      	lsrs	r3, r3, #6
 800633e:	3301      	adds	r3, #1
 8006340:	687a      	ldr	r2, [r7, #4]
 8006342:	6812      	ldr	r2, [r2, #0]
 8006344:	430b      	orrs	r3, r1
 8006346:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	69db      	ldr	r3, [r3, #28]
 800634e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8006352:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	685b      	ldr	r3, [r3, #4]
 800635a:	495c      	ldr	r1, [pc, #368]	; (80064cc <HAL_I2C_Init+0x274>)
 800635c:	428b      	cmp	r3, r1
 800635e:	d819      	bhi.n	8006394 <HAL_I2C_Init+0x13c>
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	1e59      	subs	r1, r3, #1
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	685b      	ldr	r3, [r3, #4]
 8006368:	005b      	lsls	r3, r3, #1
 800636a:	fbb1 f3f3 	udiv	r3, r1, r3
 800636e:	1c59      	adds	r1, r3, #1
 8006370:	f640 73fc 	movw	r3, #4092	; 0xffc
 8006374:	400b      	ands	r3, r1
 8006376:	2b00      	cmp	r3, #0
 8006378:	d00a      	beq.n	8006390 <HAL_I2C_Init+0x138>
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	1e59      	subs	r1, r3, #1
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	685b      	ldr	r3, [r3, #4]
 8006382:	005b      	lsls	r3, r3, #1
 8006384:	fbb1 f3f3 	udiv	r3, r1, r3
 8006388:	3301      	adds	r3, #1
 800638a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800638e:	e051      	b.n	8006434 <HAL_I2C_Init+0x1dc>
 8006390:	2304      	movs	r3, #4
 8006392:	e04f      	b.n	8006434 <HAL_I2C_Init+0x1dc>
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	689b      	ldr	r3, [r3, #8]
 8006398:	2b00      	cmp	r3, #0
 800639a:	d111      	bne.n	80063c0 <HAL_I2C_Init+0x168>
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	1e58      	subs	r0, r3, #1
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	6859      	ldr	r1, [r3, #4]
 80063a4:	460b      	mov	r3, r1
 80063a6:	005b      	lsls	r3, r3, #1
 80063a8:	440b      	add	r3, r1
 80063aa:	fbb0 f3f3 	udiv	r3, r0, r3
 80063ae:	3301      	adds	r3, #1
 80063b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	bf0c      	ite	eq
 80063b8:	2301      	moveq	r3, #1
 80063ba:	2300      	movne	r3, #0
 80063bc:	b2db      	uxtb	r3, r3
 80063be:	e012      	b.n	80063e6 <HAL_I2C_Init+0x18e>
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	1e58      	subs	r0, r3, #1
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	6859      	ldr	r1, [r3, #4]
 80063c8:	460b      	mov	r3, r1
 80063ca:	009b      	lsls	r3, r3, #2
 80063cc:	440b      	add	r3, r1
 80063ce:	0099      	lsls	r1, r3, #2
 80063d0:	440b      	add	r3, r1
 80063d2:	fbb0 f3f3 	udiv	r3, r0, r3
 80063d6:	3301      	adds	r3, #1
 80063d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80063dc:	2b00      	cmp	r3, #0
 80063de:	bf0c      	ite	eq
 80063e0:	2301      	moveq	r3, #1
 80063e2:	2300      	movne	r3, #0
 80063e4:	b2db      	uxtb	r3, r3
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d001      	beq.n	80063ee <HAL_I2C_Init+0x196>
 80063ea:	2301      	movs	r3, #1
 80063ec:	e022      	b.n	8006434 <HAL_I2C_Init+0x1dc>
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	689b      	ldr	r3, [r3, #8]
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d10e      	bne.n	8006414 <HAL_I2C_Init+0x1bc>
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	1e58      	subs	r0, r3, #1
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	6859      	ldr	r1, [r3, #4]
 80063fe:	460b      	mov	r3, r1
 8006400:	005b      	lsls	r3, r3, #1
 8006402:	440b      	add	r3, r1
 8006404:	fbb0 f3f3 	udiv	r3, r0, r3
 8006408:	3301      	adds	r3, #1
 800640a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800640e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006412:	e00f      	b.n	8006434 <HAL_I2C_Init+0x1dc>
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	1e58      	subs	r0, r3, #1
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	6859      	ldr	r1, [r3, #4]
 800641c:	460b      	mov	r3, r1
 800641e:	009b      	lsls	r3, r3, #2
 8006420:	440b      	add	r3, r1
 8006422:	0099      	lsls	r1, r3, #2
 8006424:	440b      	add	r3, r1
 8006426:	fbb0 f3f3 	udiv	r3, r0, r3
 800642a:	3301      	adds	r3, #1
 800642c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006430:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006434:	6879      	ldr	r1, [r7, #4]
 8006436:	6809      	ldr	r1, [r1, #0]
 8006438:	4313      	orrs	r3, r2
 800643a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	69da      	ldr	r2, [r3, #28]
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	6a1b      	ldr	r3, [r3, #32]
 800644e:	431a      	orrs	r2, r3
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	430a      	orrs	r2, r1
 8006456:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	689b      	ldr	r3, [r3, #8]
 800645e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8006462:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006466:	687a      	ldr	r2, [r7, #4]
 8006468:	6911      	ldr	r1, [r2, #16]
 800646a:	687a      	ldr	r2, [r7, #4]
 800646c:	68d2      	ldr	r2, [r2, #12]
 800646e:	4311      	orrs	r1, r2
 8006470:	687a      	ldr	r2, [r7, #4]
 8006472:	6812      	ldr	r2, [r2, #0]
 8006474:	430b      	orrs	r3, r1
 8006476:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	68db      	ldr	r3, [r3, #12]
 800647e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	695a      	ldr	r2, [r3, #20]
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	699b      	ldr	r3, [r3, #24]
 800648a:	431a      	orrs	r2, r3
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	430a      	orrs	r2, r1
 8006492:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	681a      	ldr	r2, [r3, #0]
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	f042 0201 	orr.w	r2, r2, #1
 80064a2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	2200      	movs	r2, #0
 80064a8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	2220      	movs	r2, #32
 80064ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	2200      	movs	r2, #0
 80064b6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	2200      	movs	r2, #0
 80064bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80064c0:	2300      	movs	r3, #0
}
 80064c2:	4618      	mov	r0, r3
 80064c4:	3710      	adds	r7, #16
 80064c6:	46bd      	mov	sp, r7
 80064c8:	bd80      	pop	{r7, pc}
 80064ca:	bf00      	nop
 80064cc:	000186a0 	.word	0x000186a0
 80064d0:	001e847f 	.word	0x001e847f
 80064d4:	003d08ff 	.word	0x003d08ff
 80064d8:	431bde83 	.word	0x431bde83
 80064dc:	10624dd3 	.word	0x10624dd3

080064e0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80064e0:	b580      	push	{r7, lr}
 80064e2:	b088      	sub	sp, #32
 80064e4:	af02      	add	r7, sp, #8
 80064e6:	60f8      	str	r0, [r7, #12]
 80064e8:	4608      	mov	r0, r1
 80064ea:	4611      	mov	r1, r2
 80064ec:	461a      	mov	r2, r3
 80064ee:	4603      	mov	r3, r0
 80064f0:	817b      	strh	r3, [r7, #10]
 80064f2:	460b      	mov	r3, r1
 80064f4:	813b      	strh	r3, [r7, #8]
 80064f6:	4613      	mov	r3, r2
 80064f8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80064fa:	f7fe fe77 	bl	80051ec <HAL_GetTick>
 80064fe:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006506:	b2db      	uxtb	r3, r3
 8006508:	2b20      	cmp	r3, #32
 800650a:	f040 80d9 	bne.w	80066c0 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800650e:	697b      	ldr	r3, [r7, #20]
 8006510:	9300      	str	r3, [sp, #0]
 8006512:	2319      	movs	r3, #25
 8006514:	2201      	movs	r2, #1
 8006516:	496d      	ldr	r1, [pc, #436]	; (80066cc <HAL_I2C_Mem_Write+0x1ec>)
 8006518:	68f8      	ldr	r0, [r7, #12]
 800651a:	f000 fc7f 	bl	8006e1c <I2C_WaitOnFlagUntilTimeout>
 800651e:	4603      	mov	r3, r0
 8006520:	2b00      	cmp	r3, #0
 8006522:	d001      	beq.n	8006528 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8006524:	2302      	movs	r3, #2
 8006526:	e0cc      	b.n	80066c2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800652e:	2b01      	cmp	r3, #1
 8006530:	d101      	bne.n	8006536 <HAL_I2C_Mem_Write+0x56>
 8006532:	2302      	movs	r3, #2
 8006534:	e0c5      	b.n	80066c2 <HAL_I2C_Mem_Write+0x1e2>
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	2201      	movs	r2, #1
 800653a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	f003 0301 	and.w	r3, r3, #1
 8006548:	2b01      	cmp	r3, #1
 800654a:	d007      	beq.n	800655c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	681a      	ldr	r2, [r3, #0]
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	f042 0201 	orr.w	r2, r2, #1
 800655a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	681a      	ldr	r2, [r3, #0]
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800656a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	2221      	movs	r2, #33	; 0x21
 8006570:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	2240      	movs	r2, #64	; 0x40
 8006578:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	2200      	movs	r2, #0
 8006580:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	6a3a      	ldr	r2, [r7, #32]
 8006586:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800658c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006592:	b29a      	uxth	r2, r3
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	4a4d      	ldr	r2, [pc, #308]	; (80066d0 <HAL_I2C_Mem_Write+0x1f0>)
 800659c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800659e:	88f8      	ldrh	r0, [r7, #6]
 80065a0:	893a      	ldrh	r2, [r7, #8]
 80065a2:	8979      	ldrh	r1, [r7, #10]
 80065a4:	697b      	ldr	r3, [r7, #20]
 80065a6:	9301      	str	r3, [sp, #4]
 80065a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065aa:	9300      	str	r3, [sp, #0]
 80065ac:	4603      	mov	r3, r0
 80065ae:	68f8      	ldr	r0, [r7, #12]
 80065b0:	f000 fab6 	bl	8006b20 <I2C_RequestMemoryWrite>
 80065b4:	4603      	mov	r3, r0
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d052      	beq.n	8006660 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80065ba:	2301      	movs	r3, #1
 80065bc:	e081      	b.n	80066c2 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80065be:	697a      	ldr	r2, [r7, #20]
 80065c0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80065c2:	68f8      	ldr	r0, [r7, #12]
 80065c4:	f000 fd00 	bl	8006fc8 <I2C_WaitOnTXEFlagUntilTimeout>
 80065c8:	4603      	mov	r3, r0
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d00d      	beq.n	80065ea <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065d2:	2b04      	cmp	r3, #4
 80065d4:	d107      	bne.n	80065e6 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	681a      	ldr	r2, [r3, #0]
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80065e4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80065e6:	2301      	movs	r3, #1
 80065e8:	e06b      	b.n	80066c2 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065ee:	781a      	ldrb	r2, [r3, #0]
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065fa:	1c5a      	adds	r2, r3, #1
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006604:	3b01      	subs	r3, #1
 8006606:	b29a      	uxth	r2, r3
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006610:	b29b      	uxth	r3, r3
 8006612:	3b01      	subs	r3, #1
 8006614:	b29a      	uxth	r2, r3
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	695b      	ldr	r3, [r3, #20]
 8006620:	f003 0304 	and.w	r3, r3, #4
 8006624:	2b04      	cmp	r3, #4
 8006626:	d11b      	bne.n	8006660 <HAL_I2C_Mem_Write+0x180>
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800662c:	2b00      	cmp	r3, #0
 800662e:	d017      	beq.n	8006660 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006634:	781a      	ldrb	r2, [r3, #0]
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006640:	1c5a      	adds	r2, r3, #1
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800664a:	3b01      	subs	r3, #1
 800664c:	b29a      	uxth	r2, r3
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006656:	b29b      	uxth	r3, r3
 8006658:	3b01      	subs	r3, #1
 800665a:	b29a      	uxth	r2, r3
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006664:	2b00      	cmp	r3, #0
 8006666:	d1aa      	bne.n	80065be <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006668:	697a      	ldr	r2, [r7, #20]
 800666a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800666c:	68f8      	ldr	r0, [r7, #12]
 800666e:	f000 fcec 	bl	800704a <I2C_WaitOnBTFFlagUntilTimeout>
 8006672:	4603      	mov	r3, r0
 8006674:	2b00      	cmp	r3, #0
 8006676:	d00d      	beq.n	8006694 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800667c:	2b04      	cmp	r3, #4
 800667e:	d107      	bne.n	8006690 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	681a      	ldr	r2, [r3, #0]
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800668e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006690:	2301      	movs	r3, #1
 8006692:	e016      	b.n	80066c2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	681a      	ldr	r2, [r3, #0]
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80066a2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	2220      	movs	r2, #32
 80066a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	2200      	movs	r2, #0
 80066b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	2200      	movs	r2, #0
 80066b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80066bc:	2300      	movs	r3, #0
 80066be:	e000      	b.n	80066c2 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80066c0:	2302      	movs	r3, #2
  }
}
 80066c2:	4618      	mov	r0, r3
 80066c4:	3718      	adds	r7, #24
 80066c6:	46bd      	mov	sp, r7
 80066c8:	bd80      	pop	{r7, pc}
 80066ca:	bf00      	nop
 80066cc:	00100002 	.word	0x00100002
 80066d0:	ffff0000 	.word	0xffff0000

080066d4 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80066d4:	b580      	push	{r7, lr}
 80066d6:	b08c      	sub	sp, #48	; 0x30
 80066d8:	af02      	add	r7, sp, #8
 80066da:	60f8      	str	r0, [r7, #12]
 80066dc:	4608      	mov	r0, r1
 80066de:	4611      	mov	r1, r2
 80066e0:	461a      	mov	r2, r3
 80066e2:	4603      	mov	r3, r0
 80066e4:	817b      	strh	r3, [r7, #10]
 80066e6:	460b      	mov	r3, r1
 80066e8:	813b      	strh	r3, [r7, #8]
 80066ea:	4613      	mov	r3, r2
 80066ec:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80066ee:	f7fe fd7d 	bl	80051ec <HAL_GetTick>
 80066f2:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80066fa:	b2db      	uxtb	r3, r3
 80066fc:	2b20      	cmp	r3, #32
 80066fe:	f040 8208 	bne.w	8006b12 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006704:	9300      	str	r3, [sp, #0]
 8006706:	2319      	movs	r3, #25
 8006708:	2201      	movs	r2, #1
 800670a:	497b      	ldr	r1, [pc, #492]	; (80068f8 <HAL_I2C_Mem_Read+0x224>)
 800670c:	68f8      	ldr	r0, [r7, #12]
 800670e:	f000 fb85 	bl	8006e1c <I2C_WaitOnFlagUntilTimeout>
 8006712:	4603      	mov	r3, r0
 8006714:	2b00      	cmp	r3, #0
 8006716:	d001      	beq.n	800671c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8006718:	2302      	movs	r3, #2
 800671a:	e1fb      	b.n	8006b14 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006722:	2b01      	cmp	r3, #1
 8006724:	d101      	bne.n	800672a <HAL_I2C_Mem_Read+0x56>
 8006726:	2302      	movs	r3, #2
 8006728:	e1f4      	b.n	8006b14 <HAL_I2C_Mem_Read+0x440>
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	2201      	movs	r2, #1
 800672e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	f003 0301 	and.w	r3, r3, #1
 800673c:	2b01      	cmp	r3, #1
 800673e:	d007      	beq.n	8006750 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	681a      	ldr	r2, [r3, #0]
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	f042 0201 	orr.w	r2, r2, #1
 800674e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	681a      	ldr	r2, [r3, #0]
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800675e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	2222      	movs	r2, #34	; 0x22
 8006764:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	2240      	movs	r2, #64	; 0x40
 800676c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	2200      	movs	r2, #0
 8006774:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800677a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8006780:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006786:	b29a      	uxth	r2, r3
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	4a5b      	ldr	r2, [pc, #364]	; (80068fc <HAL_I2C_Mem_Read+0x228>)
 8006790:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006792:	88f8      	ldrh	r0, [r7, #6]
 8006794:	893a      	ldrh	r2, [r7, #8]
 8006796:	8979      	ldrh	r1, [r7, #10]
 8006798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800679a:	9301      	str	r3, [sp, #4]
 800679c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800679e:	9300      	str	r3, [sp, #0]
 80067a0:	4603      	mov	r3, r0
 80067a2:	68f8      	ldr	r0, [r7, #12]
 80067a4:	f000 fa52 	bl	8006c4c <I2C_RequestMemoryRead>
 80067a8:	4603      	mov	r3, r0
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d001      	beq.n	80067b2 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80067ae:	2301      	movs	r3, #1
 80067b0:	e1b0      	b.n	8006b14 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d113      	bne.n	80067e2 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80067ba:	2300      	movs	r3, #0
 80067bc:	623b      	str	r3, [r7, #32]
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	695b      	ldr	r3, [r3, #20]
 80067c4:	623b      	str	r3, [r7, #32]
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	699b      	ldr	r3, [r3, #24]
 80067cc:	623b      	str	r3, [r7, #32]
 80067ce:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	681a      	ldr	r2, [r3, #0]
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80067de:	601a      	str	r2, [r3, #0]
 80067e0:	e184      	b.n	8006aec <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80067e6:	2b01      	cmp	r3, #1
 80067e8:	d11b      	bne.n	8006822 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	681a      	ldr	r2, [r3, #0]
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80067f8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80067fa:	2300      	movs	r3, #0
 80067fc:	61fb      	str	r3, [r7, #28]
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	695b      	ldr	r3, [r3, #20]
 8006804:	61fb      	str	r3, [r7, #28]
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	699b      	ldr	r3, [r3, #24]
 800680c:	61fb      	str	r3, [r7, #28]
 800680e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	681a      	ldr	r2, [r3, #0]
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800681e:	601a      	str	r2, [r3, #0]
 8006820:	e164      	b.n	8006aec <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006826:	2b02      	cmp	r3, #2
 8006828:	d11b      	bne.n	8006862 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	681a      	ldr	r2, [r3, #0]
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006838:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	681a      	ldr	r2, [r3, #0]
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006848:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800684a:	2300      	movs	r3, #0
 800684c:	61bb      	str	r3, [r7, #24]
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	695b      	ldr	r3, [r3, #20]
 8006854:	61bb      	str	r3, [r7, #24]
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	699b      	ldr	r3, [r3, #24]
 800685c:	61bb      	str	r3, [r7, #24]
 800685e:	69bb      	ldr	r3, [r7, #24]
 8006860:	e144      	b.n	8006aec <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006862:	2300      	movs	r3, #0
 8006864:	617b      	str	r3, [r7, #20]
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	695b      	ldr	r3, [r3, #20]
 800686c:	617b      	str	r3, [r7, #20]
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	699b      	ldr	r3, [r3, #24]
 8006874:	617b      	str	r3, [r7, #20]
 8006876:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8006878:	e138      	b.n	8006aec <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800687e:	2b03      	cmp	r3, #3
 8006880:	f200 80f1 	bhi.w	8006a66 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006888:	2b01      	cmp	r3, #1
 800688a:	d123      	bne.n	80068d4 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800688c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800688e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006890:	68f8      	ldr	r0, [r7, #12]
 8006892:	f000 fc1b 	bl	80070cc <I2C_WaitOnRXNEFlagUntilTimeout>
 8006896:	4603      	mov	r3, r0
 8006898:	2b00      	cmp	r3, #0
 800689a:	d001      	beq.n	80068a0 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 800689c:	2301      	movs	r3, #1
 800689e:	e139      	b.n	8006b14 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	691a      	ldr	r2, [r3, #16]
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068aa:	b2d2      	uxtb	r2, r2
 80068ac:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068b2:	1c5a      	adds	r2, r3, #1
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80068bc:	3b01      	subs	r3, #1
 80068be:	b29a      	uxth	r2, r3
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80068c8:	b29b      	uxth	r3, r3
 80068ca:	3b01      	subs	r3, #1
 80068cc:	b29a      	uxth	r2, r3
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	855a      	strh	r2, [r3, #42]	; 0x2a
 80068d2:	e10b      	b.n	8006aec <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80068d8:	2b02      	cmp	r3, #2
 80068da:	d14e      	bne.n	800697a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80068dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068de:	9300      	str	r3, [sp, #0]
 80068e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068e2:	2200      	movs	r2, #0
 80068e4:	4906      	ldr	r1, [pc, #24]	; (8006900 <HAL_I2C_Mem_Read+0x22c>)
 80068e6:	68f8      	ldr	r0, [r7, #12]
 80068e8:	f000 fa98 	bl	8006e1c <I2C_WaitOnFlagUntilTimeout>
 80068ec:	4603      	mov	r3, r0
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d008      	beq.n	8006904 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80068f2:	2301      	movs	r3, #1
 80068f4:	e10e      	b.n	8006b14 <HAL_I2C_Mem_Read+0x440>
 80068f6:	bf00      	nop
 80068f8:	00100002 	.word	0x00100002
 80068fc:	ffff0000 	.word	0xffff0000
 8006900:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	681a      	ldr	r2, [r3, #0]
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006912:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	691a      	ldr	r2, [r3, #16]
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800691e:	b2d2      	uxtb	r2, r2
 8006920:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006926:	1c5a      	adds	r2, r3, #1
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006930:	3b01      	subs	r3, #1
 8006932:	b29a      	uxth	r2, r3
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800693c:	b29b      	uxth	r3, r3
 800693e:	3b01      	subs	r3, #1
 8006940:	b29a      	uxth	r2, r3
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	691a      	ldr	r2, [r3, #16]
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006950:	b2d2      	uxtb	r2, r2
 8006952:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006958:	1c5a      	adds	r2, r3, #1
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006962:	3b01      	subs	r3, #1
 8006964:	b29a      	uxth	r2, r3
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800696e:	b29b      	uxth	r3, r3
 8006970:	3b01      	subs	r3, #1
 8006972:	b29a      	uxth	r2, r3
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006978:	e0b8      	b.n	8006aec <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800697a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800697c:	9300      	str	r3, [sp, #0]
 800697e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006980:	2200      	movs	r2, #0
 8006982:	4966      	ldr	r1, [pc, #408]	; (8006b1c <HAL_I2C_Mem_Read+0x448>)
 8006984:	68f8      	ldr	r0, [r7, #12]
 8006986:	f000 fa49 	bl	8006e1c <I2C_WaitOnFlagUntilTimeout>
 800698a:	4603      	mov	r3, r0
 800698c:	2b00      	cmp	r3, #0
 800698e:	d001      	beq.n	8006994 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8006990:	2301      	movs	r3, #1
 8006992:	e0bf      	b.n	8006b14 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	681a      	ldr	r2, [r3, #0]
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80069a2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	691a      	ldr	r2, [r3, #16]
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069ae:	b2d2      	uxtb	r2, r2
 80069b0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069b6:	1c5a      	adds	r2, r3, #1
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80069c0:	3b01      	subs	r3, #1
 80069c2:	b29a      	uxth	r2, r3
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80069cc:	b29b      	uxth	r3, r3
 80069ce:	3b01      	subs	r3, #1
 80069d0:	b29a      	uxth	r2, r3
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80069d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069d8:	9300      	str	r3, [sp, #0]
 80069da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069dc:	2200      	movs	r2, #0
 80069de:	494f      	ldr	r1, [pc, #316]	; (8006b1c <HAL_I2C_Mem_Read+0x448>)
 80069e0:	68f8      	ldr	r0, [r7, #12]
 80069e2:	f000 fa1b 	bl	8006e1c <I2C_WaitOnFlagUntilTimeout>
 80069e6:	4603      	mov	r3, r0
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d001      	beq.n	80069f0 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80069ec:	2301      	movs	r3, #1
 80069ee:	e091      	b.n	8006b14 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	681a      	ldr	r2, [r3, #0]
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80069fe:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	691a      	ldr	r2, [r3, #16]
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a0a:	b2d2      	uxtb	r2, r2
 8006a0c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a12:	1c5a      	adds	r2, r3, #1
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006a1c:	3b01      	subs	r3, #1
 8006a1e:	b29a      	uxth	r2, r3
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a28:	b29b      	uxth	r3, r3
 8006a2a:	3b01      	subs	r3, #1
 8006a2c:	b29a      	uxth	r2, r3
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	691a      	ldr	r2, [r3, #16]
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a3c:	b2d2      	uxtb	r2, r2
 8006a3e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a44:	1c5a      	adds	r2, r3, #1
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006a4e:	3b01      	subs	r3, #1
 8006a50:	b29a      	uxth	r2, r3
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a5a:	b29b      	uxth	r3, r3
 8006a5c:	3b01      	subs	r3, #1
 8006a5e:	b29a      	uxth	r2, r3
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006a64:	e042      	b.n	8006aec <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006a66:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006a68:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006a6a:	68f8      	ldr	r0, [r7, #12]
 8006a6c:	f000 fb2e 	bl	80070cc <I2C_WaitOnRXNEFlagUntilTimeout>
 8006a70:	4603      	mov	r3, r0
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d001      	beq.n	8006a7a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8006a76:	2301      	movs	r3, #1
 8006a78:	e04c      	b.n	8006b14 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	691a      	ldr	r2, [r3, #16]
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a84:	b2d2      	uxtb	r2, r2
 8006a86:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a8c:	1c5a      	adds	r2, r3, #1
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006a96:	3b01      	subs	r3, #1
 8006a98:	b29a      	uxth	r2, r3
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006aa2:	b29b      	uxth	r3, r3
 8006aa4:	3b01      	subs	r3, #1
 8006aa6:	b29a      	uxth	r2, r3
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	695b      	ldr	r3, [r3, #20]
 8006ab2:	f003 0304 	and.w	r3, r3, #4
 8006ab6:	2b04      	cmp	r3, #4
 8006ab8:	d118      	bne.n	8006aec <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	691a      	ldr	r2, [r3, #16]
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ac4:	b2d2      	uxtb	r2, r2
 8006ac6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006acc:	1c5a      	adds	r2, r3, #1
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006ad6:	3b01      	subs	r3, #1
 8006ad8:	b29a      	uxth	r2, r3
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ae2:	b29b      	uxth	r3, r3
 8006ae4:	3b01      	subs	r3, #1
 8006ae6:	b29a      	uxth	r2, r3
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	f47f aec2 	bne.w	800687a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	2220      	movs	r2, #32
 8006afa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	2200      	movs	r2, #0
 8006b02:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	2200      	movs	r2, #0
 8006b0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006b0e:	2300      	movs	r3, #0
 8006b10:	e000      	b.n	8006b14 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8006b12:	2302      	movs	r3, #2
  }
}
 8006b14:	4618      	mov	r0, r3
 8006b16:	3728      	adds	r7, #40	; 0x28
 8006b18:	46bd      	mov	sp, r7
 8006b1a:	bd80      	pop	{r7, pc}
 8006b1c:	00010004 	.word	0x00010004

08006b20 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006b20:	b580      	push	{r7, lr}
 8006b22:	b088      	sub	sp, #32
 8006b24:	af02      	add	r7, sp, #8
 8006b26:	60f8      	str	r0, [r7, #12]
 8006b28:	4608      	mov	r0, r1
 8006b2a:	4611      	mov	r1, r2
 8006b2c:	461a      	mov	r2, r3
 8006b2e:	4603      	mov	r3, r0
 8006b30:	817b      	strh	r3, [r7, #10]
 8006b32:	460b      	mov	r3, r1
 8006b34:	813b      	strh	r3, [r7, #8]
 8006b36:	4613      	mov	r3, r2
 8006b38:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	681a      	ldr	r2, [r3, #0]
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006b48:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006b4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b4c:	9300      	str	r3, [sp, #0]
 8006b4e:	6a3b      	ldr	r3, [r7, #32]
 8006b50:	2200      	movs	r2, #0
 8006b52:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006b56:	68f8      	ldr	r0, [r7, #12]
 8006b58:	f000 f960 	bl	8006e1c <I2C_WaitOnFlagUntilTimeout>
 8006b5c:	4603      	mov	r3, r0
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d00d      	beq.n	8006b7e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b6c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006b70:	d103      	bne.n	8006b7a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006b78:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006b7a:	2303      	movs	r3, #3
 8006b7c:	e05f      	b.n	8006c3e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006b7e:	897b      	ldrh	r3, [r7, #10]
 8006b80:	b2db      	uxtb	r3, r3
 8006b82:	461a      	mov	r2, r3
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006b8c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006b8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b90:	6a3a      	ldr	r2, [r7, #32]
 8006b92:	492d      	ldr	r1, [pc, #180]	; (8006c48 <I2C_RequestMemoryWrite+0x128>)
 8006b94:	68f8      	ldr	r0, [r7, #12]
 8006b96:	f000 f998 	bl	8006eca <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006b9a:	4603      	mov	r3, r0
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d001      	beq.n	8006ba4 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8006ba0:	2301      	movs	r3, #1
 8006ba2:	e04c      	b.n	8006c3e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006ba4:	2300      	movs	r3, #0
 8006ba6:	617b      	str	r3, [r7, #20]
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	695b      	ldr	r3, [r3, #20]
 8006bae:	617b      	str	r3, [r7, #20]
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	699b      	ldr	r3, [r3, #24]
 8006bb6:	617b      	str	r3, [r7, #20]
 8006bb8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006bba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006bbc:	6a39      	ldr	r1, [r7, #32]
 8006bbe:	68f8      	ldr	r0, [r7, #12]
 8006bc0:	f000 fa02 	bl	8006fc8 <I2C_WaitOnTXEFlagUntilTimeout>
 8006bc4:	4603      	mov	r3, r0
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d00d      	beq.n	8006be6 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bce:	2b04      	cmp	r3, #4
 8006bd0:	d107      	bne.n	8006be2 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	681a      	ldr	r2, [r3, #0]
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006be0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006be2:	2301      	movs	r3, #1
 8006be4:	e02b      	b.n	8006c3e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006be6:	88fb      	ldrh	r3, [r7, #6]
 8006be8:	2b01      	cmp	r3, #1
 8006bea:	d105      	bne.n	8006bf8 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006bec:	893b      	ldrh	r3, [r7, #8]
 8006bee:	b2da      	uxtb	r2, r3
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	611a      	str	r2, [r3, #16]
 8006bf6:	e021      	b.n	8006c3c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006bf8:	893b      	ldrh	r3, [r7, #8]
 8006bfa:	0a1b      	lsrs	r3, r3, #8
 8006bfc:	b29b      	uxth	r3, r3
 8006bfe:	b2da      	uxtb	r2, r3
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006c06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006c08:	6a39      	ldr	r1, [r7, #32]
 8006c0a:	68f8      	ldr	r0, [r7, #12]
 8006c0c:	f000 f9dc 	bl	8006fc8 <I2C_WaitOnTXEFlagUntilTimeout>
 8006c10:	4603      	mov	r3, r0
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d00d      	beq.n	8006c32 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c1a:	2b04      	cmp	r3, #4
 8006c1c:	d107      	bne.n	8006c2e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	681a      	ldr	r2, [r3, #0]
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006c2c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006c2e:	2301      	movs	r3, #1
 8006c30:	e005      	b.n	8006c3e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006c32:	893b      	ldrh	r3, [r7, #8]
 8006c34:	b2da      	uxtb	r2, r3
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8006c3c:	2300      	movs	r3, #0
}
 8006c3e:	4618      	mov	r0, r3
 8006c40:	3718      	adds	r7, #24
 8006c42:	46bd      	mov	sp, r7
 8006c44:	bd80      	pop	{r7, pc}
 8006c46:	bf00      	nop
 8006c48:	00010002 	.word	0x00010002

08006c4c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006c4c:	b580      	push	{r7, lr}
 8006c4e:	b088      	sub	sp, #32
 8006c50:	af02      	add	r7, sp, #8
 8006c52:	60f8      	str	r0, [r7, #12]
 8006c54:	4608      	mov	r0, r1
 8006c56:	4611      	mov	r1, r2
 8006c58:	461a      	mov	r2, r3
 8006c5a:	4603      	mov	r3, r0
 8006c5c:	817b      	strh	r3, [r7, #10]
 8006c5e:	460b      	mov	r3, r1
 8006c60:	813b      	strh	r3, [r7, #8]
 8006c62:	4613      	mov	r3, r2
 8006c64:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	681a      	ldr	r2, [r3, #0]
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006c74:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	681a      	ldr	r2, [r3, #0]
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006c84:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006c86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c88:	9300      	str	r3, [sp, #0]
 8006c8a:	6a3b      	ldr	r3, [r7, #32]
 8006c8c:	2200      	movs	r2, #0
 8006c8e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006c92:	68f8      	ldr	r0, [r7, #12]
 8006c94:	f000 f8c2 	bl	8006e1c <I2C_WaitOnFlagUntilTimeout>
 8006c98:	4603      	mov	r3, r0
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d00d      	beq.n	8006cba <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ca8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006cac:	d103      	bne.n	8006cb6 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006cb4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006cb6:	2303      	movs	r3, #3
 8006cb8:	e0aa      	b.n	8006e10 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006cba:	897b      	ldrh	r3, [r7, #10]
 8006cbc:	b2db      	uxtb	r3, r3
 8006cbe:	461a      	mov	r2, r3
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006cc8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006cca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ccc:	6a3a      	ldr	r2, [r7, #32]
 8006cce:	4952      	ldr	r1, [pc, #328]	; (8006e18 <I2C_RequestMemoryRead+0x1cc>)
 8006cd0:	68f8      	ldr	r0, [r7, #12]
 8006cd2:	f000 f8fa 	bl	8006eca <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006cd6:	4603      	mov	r3, r0
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d001      	beq.n	8006ce0 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8006cdc:	2301      	movs	r3, #1
 8006cde:	e097      	b.n	8006e10 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006ce0:	2300      	movs	r3, #0
 8006ce2:	617b      	str	r3, [r7, #20]
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	695b      	ldr	r3, [r3, #20]
 8006cea:	617b      	str	r3, [r7, #20]
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	699b      	ldr	r3, [r3, #24]
 8006cf2:	617b      	str	r3, [r7, #20]
 8006cf4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006cf6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006cf8:	6a39      	ldr	r1, [r7, #32]
 8006cfa:	68f8      	ldr	r0, [r7, #12]
 8006cfc:	f000 f964 	bl	8006fc8 <I2C_WaitOnTXEFlagUntilTimeout>
 8006d00:	4603      	mov	r3, r0
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d00d      	beq.n	8006d22 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d0a:	2b04      	cmp	r3, #4
 8006d0c:	d107      	bne.n	8006d1e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	681a      	ldr	r2, [r3, #0]
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006d1c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006d1e:	2301      	movs	r3, #1
 8006d20:	e076      	b.n	8006e10 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006d22:	88fb      	ldrh	r3, [r7, #6]
 8006d24:	2b01      	cmp	r3, #1
 8006d26:	d105      	bne.n	8006d34 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006d28:	893b      	ldrh	r3, [r7, #8]
 8006d2a:	b2da      	uxtb	r2, r3
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	611a      	str	r2, [r3, #16]
 8006d32:	e021      	b.n	8006d78 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006d34:	893b      	ldrh	r3, [r7, #8]
 8006d36:	0a1b      	lsrs	r3, r3, #8
 8006d38:	b29b      	uxth	r3, r3
 8006d3a:	b2da      	uxtb	r2, r3
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006d42:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006d44:	6a39      	ldr	r1, [r7, #32]
 8006d46:	68f8      	ldr	r0, [r7, #12]
 8006d48:	f000 f93e 	bl	8006fc8 <I2C_WaitOnTXEFlagUntilTimeout>
 8006d4c:	4603      	mov	r3, r0
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d00d      	beq.n	8006d6e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d56:	2b04      	cmp	r3, #4
 8006d58:	d107      	bne.n	8006d6a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	681a      	ldr	r2, [r3, #0]
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006d68:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006d6a:	2301      	movs	r3, #1
 8006d6c:	e050      	b.n	8006e10 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006d6e:	893b      	ldrh	r3, [r7, #8]
 8006d70:	b2da      	uxtb	r2, r3
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006d78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006d7a:	6a39      	ldr	r1, [r7, #32]
 8006d7c:	68f8      	ldr	r0, [r7, #12]
 8006d7e:	f000 f923 	bl	8006fc8 <I2C_WaitOnTXEFlagUntilTimeout>
 8006d82:	4603      	mov	r3, r0
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d00d      	beq.n	8006da4 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d8c:	2b04      	cmp	r3, #4
 8006d8e:	d107      	bne.n	8006da0 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	681a      	ldr	r2, [r3, #0]
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006d9e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006da0:	2301      	movs	r3, #1
 8006da2:	e035      	b.n	8006e10 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	681a      	ldr	r2, [r3, #0]
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006db2:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006db4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006db6:	9300      	str	r3, [sp, #0]
 8006db8:	6a3b      	ldr	r3, [r7, #32]
 8006dba:	2200      	movs	r2, #0
 8006dbc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006dc0:	68f8      	ldr	r0, [r7, #12]
 8006dc2:	f000 f82b 	bl	8006e1c <I2C_WaitOnFlagUntilTimeout>
 8006dc6:	4603      	mov	r3, r0
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d00d      	beq.n	8006de8 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006dd6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006dda:	d103      	bne.n	8006de4 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006de2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006de4:	2303      	movs	r3, #3
 8006de6:	e013      	b.n	8006e10 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8006de8:	897b      	ldrh	r3, [r7, #10]
 8006dea:	b2db      	uxtb	r3, r3
 8006dec:	f043 0301 	orr.w	r3, r3, #1
 8006df0:	b2da      	uxtb	r2, r3
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006df8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dfa:	6a3a      	ldr	r2, [r7, #32]
 8006dfc:	4906      	ldr	r1, [pc, #24]	; (8006e18 <I2C_RequestMemoryRead+0x1cc>)
 8006dfe:	68f8      	ldr	r0, [r7, #12]
 8006e00:	f000 f863 	bl	8006eca <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006e04:	4603      	mov	r3, r0
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d001      	beq.n	8006e0e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8006e0a:	2301      	movs	r3, #1
 8006e0c:	e000      	b.n	8006e10 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8006e0e:	2300      	movs	r3, #0
}
 8006e10:	4618      	mov	r0, r3
 8006e12:	3718      	adds	r7, #24
 8006e14:	46bd      	mov	sp, r7
 8006e16:	bd80      	pop	{r7, pc}
 8006e18:	00010002 	.word	0x00010002

08006e1c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8006e1c:	b580      	push	{r7, lr}
 8006e1e:	b084      	sub	sp, #16
 8006e20:	af00      	add	r7, sp, #0
 8006e22:	60f8      	str	r0, [r7, #12]
 8006e24:	60b9      	str	r1, [r7, #8]
 8006e26:	603b      	str	r3, [r7, #0]
 8006e28:	4613      	mov	r3, r2
 8006e2a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006e2c:	e025      	b.n	8006e7a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006e2e:	683b      	ldr	r3, [r7, #0]
 8006e30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e34:	d021      	beq.n	8006e7a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006e36:	f7fe f9d9 	bl	80051ec <HAL_GetTick>
 8006e3a:	4602      	mov	r2, r0
 8006e3c:	69bb      	ldr	r3, [r7, #24]
 8006e3e:	1ad3      	subs	r3, r2, r3
 8006e40:	683a      	ldr	r2, [r7, #0]
 8006e42:	429a      	cmp	r2, r3
 8006e44:	d302      	bcc.n	8006e4c <I2C_WaitOnFlagUntilTimeout+0x30>
 8006e46:	683b      	ldr	r3, [r7, #0]
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d116      	bne.n	8006e7a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	2200      	movs	r2, #0
 8006e50:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	2220      	movs	r2, #32
 8006e56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	2200      	movs	r2, #0
 8006e5e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e66:	f043 0220 	orr.w	r2, r3, #32
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	2200      	movs	r2, #0
 8006e72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006e76:	2301      	movs	r3, #1
 8006e78:	e023      	b.n	8006ec2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006e7a:	68bb      	ldr	r3, [r7, #8]
 8006e7c:	0c1b      	lsrs	r3, r3, #16
 8006e7e:	b2db      	uxtb	r3, r3
 8006e80:	2b01      	cmp	r3, #1
 8006e82:	d10d      	bne.n	8006ea0 <I2C_WaitOnFlagUntilTimeout+0x84>
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	695b      	ldr	r3, [r3, #20]
 8006e8a:	43da      	mvns	r2, r3
 8006e8c:	68bb      	ldr	r3, [r7, #8]
 8006e8e:	4013      	ands	r3, r2
 8006e90:	b29b      	uxth	r3, r3
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	bf0c      	ite	eq
 8006e96:	2301      	moveq	r3, #1
 8006e98:	2300      	movne	r3, #0
 8006e9a:	b2db      	uxtb	r3, r3
 8006e9c:	461a      	mov	r2, r3
 8006e9e:	e00c      	b.n	8006eba <I2C_WaitOnFlagUntilTimeout+0x9e>
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	699b      	ldr	r3, [r3, #24]
 8006ea6:	43da      	mvns	r2, r3
 8006ea8:	68bb      	ldr	r3, [r7, #8]
 8006eaa:	4013      	ands	r3, r2
 8006eac:	b29b      	uxth	r3, r3
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	bf0c      	ite	eq
 8006eb2:	2301      	moveq	r3, #1
 8006eb4:	2300      	movne	r3, #0
 8006eb6:	b2db      	uxtb	r3, r3
 8006eb8:	461a      	mov	r2, r3
 8006eba:	79fb      	ldrb	r3, [r7, #7]
 8006ebc:	429a      	cmp	r2, r3
 8006ebe:	d0b6      	beq.n	8006e2e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006ec0:	2300      	movs	r3, #0
}
 8006ec2:	4618      	mov	r0, r3
 8006ec4:	3710      	adds	r7, #16
 8006ec6:	46bd      	mov	sp, r7
 8006ec8:	bd80      	pop	{r7, pc}

08006eca <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8006eca:	b580      	push	{r7, lr}
 8006ecc:	b084      	sub	sp, #16
 8006ece:	af00      	add	r7, sp, #0
 8006ed0:	60f8      	str	r0, [r7, #12]
 8006ed2:	60b9      	str	r1, [r7, #8]
 8006ed4:	607a      	str	r2, [r7, #4]
 8006ed6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006ed8:	e051      	b.n	8006f7e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	695b      	ldr	r3, [r3, #20]
 8006ee0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006ee4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006ee8:	d123      	bne.n	8006f32 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	681a      	ldr	r2, [r3, #0]
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006ef8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006f02:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	2200      	movs	r2, #0
 8006f08:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	2220      	movs	r2, #32
 8006f0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	2200      	movs	r2, #0
 8006f16:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f1e:	f043 0204 	orr.w	r2, r3, #4
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	2200      	movs	r2, #0
 8006f2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006f2e:	2301      	movs	r3, #1
 8006f30:	e046      	b.n	8006fc0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f38:	d021      	beq.n	8006f7e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006f3a:	f7fe f957 	bl	80051ec <HAL_GetTick>
 8006f3e:	4602      	mov	r2, r0
 8006f40:	683b      	ldr	r3, [r7, #0]
 8006f42:	1ad3      	subs	r3, r2, r3
 8006f44:	687a      	ldr	r2, [r7, #4]
 8006f46:	429a      	cmp	r2, r3
 8006f48:	d302      	bcc.n	8006f50 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d116      	bne.n	8006f7e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	2200      	movs	r2, #0
 8006f54:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	2220      	movs	r2, #32
 8006f5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	2200      	movs	r2, #0
 8006f62:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f6a:	f043 0220 	orr.w	r2, r3, #32
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	2200      	movs	r2, #0
 8006f76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006f7a:	2301      	movs	r3, #1
 8006f7c:	e020      	b.n	8006fc0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006f7e:	68bb      	ldr	r3, [r7, #8]
 8006f80:	0c1b      	lsrs	r3, r3, #16
 8006f82:	b2db      	uxtb	r3, r3
 8006f84:	2b01      	cmp	r3, #1
 8006f86:	d10c      	bne.n	8006fa2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	695b      	ldr	r3, [r3, #20]
 8006f8e:	43da      	mvns	r2, r3
 8006f90:	68bb      	ldr	r3, [r7, #8]
 8006f92:	4013      	ands	r3, r2
 8006f94:	b29b      	uxth	r3, r3
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	bf14      	ite	ne
 8006f9a:	2301      	movne	r3, #1
 8006f9c:	2300      	moveq	r3, #0
 8006f9e:	b2db      	uxtb	r3, r3
 8006fa0:	e00b      	b.n	8006fba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	699b      	ldr	r3, [r3, #24]
 8006fa8:	43da      	mvns	r2, r3
 8006faa:	68bb      	ldr	r3, [r7, #8]
 8006fac:	4013      	ands	r3, r2
 8006fae:	b29b      	uxth	r3, r3
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	bf14      	ite	ne
 8006fb4:	2301      	movne	r3, #1
 8006fb6:	2300      	moveq	r3, #0
 8006fb8:	b2db      	uxtb	r3, r3
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d18d      	bne.n	8006eda <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8006fbe:	2300      	movs	r3, #0
}
 8006fc0:	4618      	mov	r0, r3
 8006fc2:	3710      	adds	r7, #16
 8006fc4:	46bd      	mov	sp, r7
 8006fc6:	bd80      	pop	{r7, pc}

08006fc8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006fc8:	b580      	push	{r7, lr}
 8006fca:	b084      	sub	sp, #16
 8006fcc:	af00      	add	r7, sp, #0
 8006fce:	60f8      	str	r0, [r7, #12]
 8006fd0:	60b9      	str	r1, [r7, #8]
 8006fd2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006fd4:	e02d      	b.n	8007032 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006fd6:	68f8      	ldr	r0, [r7, #12]
 8006fd8:	f000 f8ce 	bl	8007178 <I2C_IsAcknowledgeFailed>
 8006fdc:	4603      	mov	r3, r0
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d001      	beq.n	8006fe6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006fe2:	2301      	movs	r3, #1
 8006fe4:	e02d      	b.n	8007042 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006fe6:	68bb      	ldr	r3, [r7, #8]
 8006fe8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006fec:	d021      	beq.n	8007032 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006fee:	f7fe f8fd 	bl	80051ec <HAL_GetTick>
 8006ff2:	4602      	mov	r2, r0
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	1ad3      	subs	r3, r2, r3
 8006ff8:	68ba      	ldr	r2, [r7, #8]
 8006ffa:	429a      	cmp	r2, r3
 8006ffc:	d302      	bcc.n	8007004 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8006ffe:	68bb      	ldr	r3, [r7, #8]
 8007000:	2b00      	cmp	r3, #0
 8007002:	d116      	bne.n	8007032 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	2200      	movs	r2, #0
 8007008:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	2220      	movs	r2, #32
 800700e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	2200      	movs	r2, #0
 8007016:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800701e:	f043 0220 	orr.w	r2, r3, #32
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	2200      	movs	r2, #0
 800702a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800702e:	2301      	movs	r3, #1
 8007030:	e007      	b.n	8007042 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	695b      	ldr	r3, [r3, #20]
 8007038:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800703c:	2b80      	cmp	r3, #128	; 0x80
 800703e:	d1ca      	bne.n	8006fd6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007040:	2300      	movs	r3, #0
}
 8007042:	4618      	mov	r0, r3
 8007044:	3710      	adds	r7, #16
 8007046:	46bd      	mov	sp, r7
 8007048:	bd80      	pop	{r7, pc}

0800704a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800704a:	b580      	push	{r7, lr}
 800704c:	b084      	sub	sp, #16
 800704e:	af00      	add	r7, sp, #0
 8007050:	60f8      	str	r0, [r7, #12]
 8007052:	60b9      	str	r1, [r7, #8]
 8007054:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007056:	e02d      	b.n	80070b4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007058:	68f8      	ldr	r0, [r7, #12]
 800705a:	f000 f88d 	bl	8007178 <I2C_IsAcknowledgeFailed>
 800705e:	4603      	mov	r3, r0
 8007060:	2b00      	cmp	r3, #0
 8007062:	d001      	beq.n	8007068 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007064:	2301      	movs	r3, #1
 8007066:	e02d      	b.n	80070c4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007068:	68bb      	ldr	r3, [r7, #8]
 800706a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800706e:	d021      	beq.n	80070b4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007070:	f7fe f8bc 	bl	80051ec <HAL_GetTick>
 8007074:	4602      	mov	r2, r0
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	1ad3      	subs	r3, r2, r3
 800707a:	68ba      	ldr	r2, [r7, #8]
 800707c:	429a      	cmp	r2, r3
 800707e:	d302      	bcc.n	8007086 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8007080:	68bb      	ldr	r3, [r7, #8]
 8007082:	2b00      	cmp	r3, #0
 8007084:	d116      	bne.n	80070b4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	2200      	movs	r2, #0
 800708a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	2220      	movs	r2, #32
 8007090:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	2200      	movs	r2, #0
 8007098:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070a0:	f043 0220 	orr.w	r2, r3, #32
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	2200      	movs	r2, #0
 80070ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80070b0:	2301      	movs	r3, #1
 80070b2:	e007      	b.n	80070c4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	695b      	ldr	r3, [r3, #20]
 80070ba:	f003 0304 	and.w	r3, r3, #4
 80070be:	2b04      	cmp	r3, #4
 80070c0:	d1ca      	bne.n	8007058 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80070c2:	2300      	movs	r3, #0
}
 80070c4:	4618      	mov	r0, r3
 80070c6:	3710      	adds	r7, #16
 80070c8:	46bd      	mov	sp, r7
 80070ca:	bd80      	pop	{r7, pc}

080070cc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80070cc:	b580      	push	{r7, lr}
 80070ce:	b084      	sub	sp, #16
 80070d0:	af00      	add	r7, sp, #0
 80070d2:	60f8      	str	r0, [r7, #12]
 80070d4:	60b9      	str	r1, [r7, #8]
 80070d6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80070d8:	e042      	b.n	8007160 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	695b      	ldr	r3, [r3, #20]
 80070e0:	f003 0310 	and.w	r3, r3, #16
 80070e4:	2b10      	cmp	r3, #16
 80070e6:	d119      	bne.n	800711c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	f06f 0210 	mvn.w	r2, #16
 80070f0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	2200      	movs	r2, #0
 80070f6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	2220      	movs	r2, #32
 80070fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	2200      	movs	r2, #0
 8007104:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	2200      	movs	r2, #0
 8007114:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007118:	2301      	movs	r3, #1
 800711a:	e029      	b.n	8007170 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800711c:	f7fe f866 	bl	80051ec <HAL_GetTick>
 8007120:	4602      	mov	r2, r0
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	1ad3      	subs	r3, r2, r3
 8007126:	68ba      	ldr	r2, [r7, #8]
 8007128:	429a      	cmp	r2, r3
 800712a:	d302      	bcc.n	8007132 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800712c:	68bb      	ldr	r3, [r7, #8]
 800712e:	2b00      	cmp	r3, #0
 8007130:	d116      	bne.n	8007160 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	2200      	movs	r2, #0
 8007136:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	2220      	movs	r2, #32
 800713c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	2200      	movs	r2, #0
 8007144:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800714c:	f043 0220 	orr.w	r2, r3, #32
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	2200      	movs	r2, #0
 8007158:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800715c:	2301      	movs	r3, #1
 800715e:	e007      	b.n	8007170 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	695b      	ldr	r3, [r3, #20]
 8007166:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800716a:	2b40      	cmp	r3, #64	; 0x40
 800716c:	d1b5      	bne.n	80070da <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800716e:	2300      	movs	r3, #0
}
 8007170:	4618      	mov	r0, r3
 8007172:	3710      	adds	r7, #16
 8007174:	46bd      	mov	sp, r7
 8007176:	bd80      	pop	{r7, pc}

08007178 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8007178:	b480      	push	{r7}
 800717a:	b083      	sub	sp, #12
 800717c:	af00      	add	r7, sp, #0
 800717e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	695b      	ldr	r3, [r3, #20]
 8007186:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800718a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800718e:	d11b      	bne.n	80071c8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007198:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	2200      	movs	r2, #0
 800719e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	2220      	movs	r2, #32
 80071a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	2200      	movs	r2, #0
 80071ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071b4:	f043 0204 	orr.w	r2, r3, #4
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	2200      	movs	r2, #0
 80071c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80071c4:	2301      	movs	r3, #1
 80071c6:	e000      	b.n	80071ca <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80071c8:	2300      	movs	r3, #0
}
 80071ca:	4618      	mov	r0, r3
 80071cc:	370c      	adds	r7, #12
 80071ce:	46bd      	mov	sp, r7
 80071d0:	bc80      	pop	{r7}
 80071d2:	4770      	bx	lr

080071d4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80071d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80071d6:	b08f      	sub	sp, #60	; 0x3c
 80071d8:	af0a      	add	r7, sp, #40	; 0x28
 80071da:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d101      	bne.n	80071e6 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80071e2:	2301      	movs	r3, #1
 80071e4:	e10f      	b.n	8007406 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80071f2:	b2db      	uxtb	r3, r3
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d106      	bne.n	8007206 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	2200      	movs	r2, #0
 80071fc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8007200:	6878      	ldr	r0, [r7, #4]
 8007202:	f005 fdd3 	bl	800cdac <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	2203      	movs	r2, #3
 800720a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800720e:	68bb      	ldr	r3, [r7, #8]
 8007210:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007212:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007216:	2b00      	cmp	r3, #0
 8007218:	d102      	bne.n	8007220 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	2200      	movs	r2, #0
 800721e:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	4618      	mov	r0, r3
 8007226:	f002 fdc3 	bl	8009db0 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	603b      	str	r3, [r7, #0]
 8007230:	687e      	ldr	r6, [r7, #4]
 8007232:	466d      	mov	r5, sp
 8007234:	f106 0410 	add.w	r4, r6, #16
 8007238:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800723a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800723c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800723e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007240:	e894 0003 	ldmia.w	r4, {r0, r1}
 8007244:	e885 0003 	stmia.w	r5, {r0, r1}
 8007248:	1d33      	adds	r3, r6, #4
 800724a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800724c:	6838      	ldr	r0, [r7, #0]
 800724e:	f002 fca5 	bl	8009b9c <USB_CoreInit>
 8007252:	4603      	mov	r3, r0
 8007254:	2b00      	cmp	r3, #0
 8007256:	d005      	beq.n	8007264 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	2202      	movs	r2, #2
 800725c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8007260:	2301      	movs	r3, #1
 8007262:	e0d0      	b.n	8007406 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	2100      	movs	r1, #0
 800726a:	4618      	mov	r0, r3
 800726c:	f002 fdb0 	bl	8009dd0 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007270:	2300      	movs	r3, #0
 8007272:	73fb      	strb	r3, [r7, #15]
 8007274:	e04a      	b.n	800730c <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8007276:	7bfa      	ldrb	r2, [r7, #15]
 8007278:	6879      	ldr	r1, [r7, #4]
 800727a:	4613      	mov	r3, r2
 800727c:	00db      	lsls	r3, r3, #3
 800727e:	1a9b      	subs	r3, r3, r2
 8007280:	009b      	lsls	r3, r3, #2
 8007282:	440b      	add	r3, r1
 8007284:	333d      	adds	r3, #61	; 0x3d
 8007286:	2201      	movs	r2, #1
 8007288:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800728a:	7bfa      	ldrb	r2, [r7, #15]
 800728c:	6879      	ldr	r1, [r7, #4]
 800728e:	4613      	mov	r3, r2
 8007290:	00db      	lsls	r3, r3, #3
 8007292:	1a9b      	subs	r3, r3, r2
 8007294:	009b      	lsls	r3, r3, #2
 8007296:	440b      	add	r3, r1
 8007298:	333c      	adds	r3, #60	; 0x3c
 800729a:	7bfa      	ldrb	r2, [r7, #15]
 800729c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800729e:	7bfa      	ldrb	r2, [r7, #15]
 80072a0:	7bfb      	ldrb	r3, [r7, #15]
 80072a2:	b298      	uxth	r0, r3
 80072a4:	6879      	ldr	r1, [r7, #4]
 80072a6:	4613      	mov	r3, r2
 80072a8:	00db      	lsls	r3, r3, #3
 80072aa:	1a9b      	subs	r3, r3, r2
 80072ac:	009b      	lsls	r3, r3, #2
 80072ae:	440b      	add	r3, r1
 80072b0:	3342      	adds	r3, #66	; 0x42
 80072b2:	4602      	mov	r2, r0
 80072b4:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80072b6:	7bfa      	ldrb	r2, [r7, #15]
 80072b8:	6879      	ldr	r1, [r7, #4]
 80072ba:	4613      	mov	r3, r2
 80072bc:	00db      	lsls	r3, r3, #3
 80072be:	1a9b      	subs	r3, r3, r2
 80072c0:	009b      	lsls	r3, r3, #2
 80072c2:	440b      	add	r3, r1
 80072c4:	333f      	adds	r3, #63	; 0x3f
 80072c6:	2200      	movs	r2, #0
 80072c8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80072ca:	7bfa      	ldrb	r2, [r7, #15]
 80072cc:	6879      	ldr	r1, [r7, #4]
 80072ce:	4613      	mov	r3, r2
 80072d0:	00db      	lsls	r3, r3, #3
 80072d2:	1a9b      	subs	r3, r3, r2
 80072d4:	009b      	lsls	r3, r3, #2
 80072d6:	440b      	add	r3, r1
 80072d8:	3344      	adds	r3, #68	; 0x44
 80072da:	2200      	movs	r2, #0
 80072dc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80072de:	7bfa      	ldrb	r2, [r7, #15]
 80072e0:	6879      	ldr	r1, [r7, #4]
 80072e2:	4613      	mov	r3, r2
 80072e4:	00db      	lsls	r3, r3, #3
 80072e6:	1a9b      	subs	r3, r3, r2
 80072e8:	009b      	lsls	r3, r3, #2
 80072ea:	440b      	add	r3, r1
 80072ec:	3348      	adds	r3, #72	; 0x48
 80072ee:	2200      	movs	r2, #0
 80072f0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80072f2:	7bfa      	ldrb	r2, [r7, #15]
 80072f4:	6879      	ldr	r1, [r7, #4]
 80072f6:	4613      	mov	r3, r2
 80072f8:	00db      	lsls	r3, r3, #3
 80072fa:	1a9b      	subs	r3, r3, r2
 80072fc:	009b      	lsls	r3, r3, #2
 80072fe:	440b      	add	r3, r1
 8007300:	3350      	adds	r3, #80	; 0x50
 8007302:	2200      	movs	r2, #0
 8007304:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007306:	7bfb      	ldrb	r3, [r7, #15]
 8007308:	3301      	adds	r3, #1
 800730a:	73fb      	strb	r3, [r7, #15]
 800730c:	7bfa      	ldrb	r2, [r7, #15]
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	685b      	ldr	r3, [r3, #4]
 8007312:	429a      	cmp	r2, r3
 8007314:	d3af      	bcc.n	8007276 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007316:	2300      	movs	r3, #0
 8007318:	73fb      	strb	r3, [r7, #15]
 800731a:	e044      	b.n	80073a6 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800731c:	7bfa      	ldrb	r2, [r7, #15]
 800731e:	6879      	ldr	r1, [r7, #4]
 8007320:	4613      	mov	r3, r2
 8007322:	00db      	lsls	r3, r3, #3
 8007324:	1a9b      	subs	r3, r3, r2
 8007326:	009b      	lsls	r3, r3, #2
 8007328:	440b      	add	r3, r1
 800732a:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 800732e:	2200      	movs	r2, #0
 8007330:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8007332:	7bfa      	ldrb	r2, [r7, #15]
 8007334:	6879      	ldr	r1, [r7, #4]
 8007336:	4613      	mov	r3, r2
 8007338:	00db      	lsls	r3, r3, #3
 800733a:	1a9b      	subs	r3, r3, r2
 800733c:	009b      	lsls	r3, r3, #2
 800733e:	440b      	add	r3, r1
 8007340:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8007344:	7bfa      	ldrb	r2, [r7, #15]
 8007346:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8007348:	7bfa      	ldrb	r2, [r7, #15]
 800734a:	6879      	ldr	r1, [r7, #4]
 800734c:	4613      	mov	r3, r2
 800734e:	00db      	lsls	r3, r3, #3
 8007350:	1a9b      	subs	r3, r3, r2
 8007352:	009b      	lsls	r3, r3, #2
 8007354:	440b      	add	r3, r1
 8007356:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800735a:	2200      	movs	r2, #0
 800735c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800735e:	7bfa      	ldrb	r2, [r7, #15]
 8007360:	6879      	ldr	r1, [r7, #4]
 8007362:	4613      	mov	r3, r2
 8007364:	00db      	lsls	r3, r3, #3
 8007366:	1a9b      	subs	r3, r3, r2
 8007368:	009b      	lsls	r3, r3, #2
 800736a:	440b      	add	r3, r1
 800736c:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8007370:	2200      	movs	r2, #0
 8007372:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8007374:	7bfa      	ldrb	r2, [r7, #15]
 8007376:	6879      	ldr	r1, [r7, #4]
 8007378:	4613      	mov	r3, r2
 800737a:	00db      	lsls	r3, r3, #3
 800737c:	1a9b      	subs	r3, r3, r2
 800737e:	009b      	lsls	r3, r3, #2
 8007380:	440b      	add	r3, r1
 8007382:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8007386:	2200      	movs	r2, #0
 8007388:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800738a:	7bfa      	ldrb	r2, [r7, #15]
 800738c:	6879      	ldr	r1, [r7, #4]
 800738e:	4613      	mov	r3, r2
 8007390:	00db      	lsls	r3, r3, #3
 8007392:	1a9b      	subs	r3, r3, r2
 8007394:	009b      	lsls	r3, r3, #2
 8007396:	440b      	add	r3, r1
 8007398:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800739c:	2200      	movs	r2, #0
 800739e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80073a0:	7bfb      	ldrb	r3, [r7, #15]
 80073a2:	3301      	adds	r3, #1
 80073a4:	73fb      	strb	r3, [r7, #15]
 80073a6:	7bfa      	ldrb	r2, [r7, #15]
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	685b      	ldr	r3, [r3, #4]
 80073ac:	429a      	cmp	r2, r3
 80073ae:	d3b5      	bcc.n	800731c <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	603b      	str	r3, [r7, #0]
 80073b6:	687e      	ldr	r6, [r7, #4]
 80073b8:	466d      	mov	r5, sp
 80073ba:	f106 0410 	add.w	r4, r6, #16
 80073be:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80073c0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80073c2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80073c4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80073c6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80073ca:	e885 0003 	stmia.w	r5, {r0, r1}
 80073ce:	1d33      	adds	r3, r6, #4
 80073d0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80073d2:	6838      	ldr	r0, [r7, #0]
 80073d4:	f002 fd48 	bl	8009e68 <USB_DevInit>
 80073d8:	4603      	mov	r3, r0
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d005      	beq.n	80073ea <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	2202      	movs	r2, #2
 80073e2:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80073e6:	2301      	movs	r3, #1
 80073e8:	e00d      	b.n	8007406 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	2200      	movs	r2, #0
 80073ee:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	2201      	movs	r2, #1
 80073f6:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  (void)USB_DevDisconnect(hpcd->Instance);
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	4618      	mov	r0, r3
 8007400:	f003 fdb9 	bl	800af76 <USB_DevDisconnect>

  return HAL_OK;
 8007404:	2300      	movs	r3, #0
}
 8007406:	4618      	mov	r0, r3
 8007408:	3714      	adds	r7, #20
 800740a:	46bd      	mov	sp, r7
 800740c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800740e <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800740e:	b580      	push	{r7, lr}
 8007410:	b082      	sub	sp, #8
 8007412:	af00      	add	r7, sp, #0
 8007414:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800741c:	2b01      	cmp	r3, #1
 800741e:	d101      	bne.n	8007424 <HAL_PCD_Start+0x16>
 8007420:	2302      	movs	r3, #2
 8007422:	e012      	b.n	800744a <HAL_PCD_Start+0x3c>
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	2201      	movs	r2, #1
 8007428:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  __HAL_PCD_ENABLE(hpcd);
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	4618      	mov	r0, r3
 8007432:	f002 fcad 	bl	8009d90 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	4618      	mov	r0, r3
 800743c:	f003 fd7b 	bl	800af36 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	2200      	movs	r2, #0
 8007444:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8007448:	2300      	movs	r3, #0
}
 800744a:	4618      	mov	r0, r3
 800744c:	3708      	adds	r7, #8
 800744e:	46bd      	mov	sp, r7
 8007450:	bd80      	pop	{r7, pc}

08007452 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8007452:	b590      	push	{r4, r7, lr}
 8007454:	b08d      	sub	sp, #52	; 0x34
 8007456:	af00      	add	r7, sp, #0
 8007458:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007460:	6a3b      	ldr	r3, [r7, #32]
 8007462:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t temp;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	4618      	mov	r0, r3
 800746a:	f003 fe32 	bl	800b0d2 <USB_GetMode>
 800746e:	4603      	mov	r3, r0
 8007470:	2b00      	cmp	r3, #0
 8007472:	f040 838f 	bne.w	8007b94 <HAL_PCD_IRQHandler+0x742>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	4618      	mov	r0, r3
 800747c:	f003 fd9b 	bl	800afb6 <USB_ReadInterrupts>
 8007480:	4603      	mov	r3, r0
 8007482:	2b00      	cmp	r3, #0
 8007484:	f000 8385 	beq.w	8007b92 <HAL_PCD_IRQHandler+0x740>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	4618      	mov	r0, r3
 800748e:	f003 fd92 	bl	800afb6 <USB_ReadInterrupts>
 8007492:	4603      	mov	r3, r0
 8007494:	f003 0302 	and.w	r3, r3, #2
 8007498:	2b02      	cmp	r3, #2
 800749a:	d107      	bne.n	80074ac <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	695a      	ldr	r2, [r3, #20]
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	f002 0202 	and.w	r2, r2, #2
 80074aa:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	4618      	mov	r0, r3
 80074b2:	f003 fd80 	bl	800afb6 <USB_ReadInterrupts>
 80074b6:	4603      	mov	r3, r0
 80074b8:	f003 0310 	and.w	r3, r3, #16
 80074bc:	2b10      	cmp	r3, #16
 80074be:	d161      	bne.n	8007584 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	699a      	ldr	r2, [r3, #24]
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	f022 0210 	bic.w	r2, r2, #16
 80074ce:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 80074d0:	6a3b      	ldr	r3, [r7, #32]
 80074d2:	6a1b      	ldr	r3, [r3, #32]
 80074d4:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 80074d6:	69bb      	ldr	r3, [r7, #24]
 80074d8:	f003 020f 	and.w	r2, r3, #15
 80074dc:	4613      	mov	r3, r2
 80074de:	00db      	lsls	r3, r3, #3
 80074e0:	1a9b      	subs	r3, r3, r2
 80074e2:	009b      	lsls	r3, r3, #2
 80074e4:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80074e8:	687a      	ldr	r2, [r7, #4]
 80074ea:	4413      	add	r3, r2
 80074ec:	3304      	adds	r3, #4
 80074ee:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80074f0:	69bb      	ldr	r3, [r7, #24]
 80074f2:	0c5b      	lsrs	r3, r3, #17
 80074f4:	f003 030f 	and.w	r3, r3, #15
 80074f8:	2b02      	cmp	r3, #2
 80074fa:	d124      	bne.n	8007546 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 80074fc:	69ba      	ldr	r2, [r7, #24]
 80074fe:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8007502:	4013      	ands	r3, r2
 8007504:	2b00      	cmp	r3, #0
 8007506:	d035      	beq.n	8007574 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8007508:	697b      	ldr	r3, [r7, #20]
 800750a:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 800750c:	69bb      	ldr	r3, [r7, #24]
 800750e:	091b      	lsrs	r3, r3, #4
 8007510:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8007512:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007516:	b29b      	uxth	r3, r3
 8007518:	461a      	mov	r2, r3
 800751a:	6a38      	ldr	r0, [r7, #32]
 800751c:	f003 fbbd 	bl	800ac9a <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8007520:	697b      	ldr	r3, [r7, #20]
 8007522:	68da      	ldr	r2, [r3, #12]
 8007524:	69bb      	ldr	r3, [r7, #24]
 8007526:	091b      	lsrs	r3, r3, #4
 8007528:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800752c:	441a      	add	r2, r3
 800752e:	697b      	ldr	r3, [r7, #20]
 8007530:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8007532:	697b      	ldr	r3, [r7, #20]
 8007534:	699a      	ldr	r2, [r3, #24]
 8007536:	69bb      	ldr	r3, [r7, #24]
 8007538:	091b      	lsrs	r3, r3, #4
 800753a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800753e:	441a      	add	r2, r3
 8007540:	697b      	ldr	r3, [r7, #20]
 8007542:	619a      	str	r2, [r3, #24]
 8007544:	e016      	b.n	8007574 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8007546:	69bb      	ldr	r3, [r7, #24]
 8007548:	0c5b      	lsrs	r3, r3, #17
 800754a:	f003 030f 	and.w	r3, r3, #15
 800754e:	2b06      	cmp	r3, #6
 8007550:	d110      	bne.n	8007574 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8007558:	2208      	movs	r2, #8
 800755a:	4619      	mov	r1, r3
 800755c:	6a38      	ldr	r0, [r7, #32]
 800755e:	f003 fb9c 	bl	800ac9a <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8007562:	697b      	ldr	r3, [r7, #20]
 8007564:	699a      	ldr	r2, [r3, #24]
 8007566:	69bb      	ldr	r3, [r7, #24]
 8007568:	091b      	lsrs	r3, r3, #4
 800756a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800756e:	441a      	add	r2, r3
 8007570:	697b      	ldr	r3, [r7, #20]
 8007572:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	699a      	ldr	r2, [r3, #24]
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	f042 0210 	orr.w	r2, r2, #16
 8007582:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	4618      	mov	r0, r3
 800758a:	f003 fd14 	bl	800afb6 <USB_ReadInterrupts>
 800758e:	4603      	mov	r3, r0
 8007590:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007594:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8007598:	d16e      	bne.n	8007678 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 800759a:	2300      	movs	r3, #0
 800759c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	4618      	mov	r0, r3
 80075a4:	f003 fd19 	bl	800afda <USB_ReadDevAllOutEpInterrupt>
 80075a8:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80075aa:	e062      	b.n	8007672 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 80075ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075ae:	f003 0301 	and.w	r3, r3, #1
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d057      	beq.n	8007666 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80075bc:	b2d2      	uxtb	r2, r2
 80075be:	4611      	mov	r1, r2
 80075c0:	4618      	mov	r0, r3
 80075c2:	f003 fd3c 	bl	800b03e <USB_ReadDevOutEPInterrupt>
 80075c6:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80075c8:	693b      	ldr	r3, [r7, #16]
 80075ca:	f003 0301 	and.w	r3, r3, #1
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d00c      	beq.n	80075ec <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80075d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075d4:	015a      	lsls	r2, r3, #5
 80075d6:	69fb      	ldr	r3, [r7, #28]
 80075d8:	4413      	add	r3, r2
 80075da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80075de:	461a      	mov	r2, r3
 80075e0:	2301      	movs	r3, #1
 80075e2:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80075e4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80075e6:	6878      	ldr	r0, [r7, #4]
 80075e8:	f000 fda2 	bl	8008130 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80075ec:	693b      	ldr	r3, [r7, #16]
 80075ee:	f003 0308 	and.w	r3, r3, #8
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d00c      	beq.n	8007610 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80075f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075f8:	015a      	lsls	r2, r3, #5
 80075fa:	69fb      	ldr	r3, [r7, #28]
 80075fc:	4413      	add	r3, r2
 80075fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007602:	461a      	mov	r2, r3
 8007604:	2308      	movs	r3, #8
 8007606:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8007608:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800760a:	6878      	ldr	r0, [r7, #4]
 800760c:	f000 fe9c 	bl	8008348 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8007610:	693b      	ldr	r3, [r7, #16]
 8007612:	f003 0310 	and.w	r3, r3, #16
 8007616:	2b00      	cmp	r3, #0
 8007618:	d008      	beq.n	800762c <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800761a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800761c:	015a      	lsls	r2, r3, #5
 800761e:	69fb      	ldr	r3, [r7, #28]
 8007620:	4413      	add	r3, r2
 8007622:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007626:	461a      	mov	r2, r3
 8007628:	2310      	movs	r3, #16
 800762a:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800762c:	693b      	ldr	r3, [r7, #16]
 800762e:	f003 0320 	and.w	r3, r3, #32
 8007632:	2b00      	cmp	r3, #0
 8007634:	d008      	beq.n	8007648 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8007636:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007638:	015a      	lsls	r2, r3, #5
 800763a:	69fb      	ldr	r3, [r7, #28]
 800763c:	4413      	add	r3, r2
 800763e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007642:	461a      	mov	r2, r3
 8007644:	2320      	movs	r3, #32
 8007646:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8007648:	693b      	ldr	r3, [r7, #16]
 800764a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800764e:	2b00      	cmp	r3, #0
 8007650:	d009      	beq.n	8007666 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8007652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007654:	015a      	lsls	r2, r3, #5
 8007656:	69fb      	ldr	r3, [r7, #28]
 8007658:	4413      	add	r3, r2
 800765a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800765e:	461a      	mov	r2, r3
 8007660:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007664:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8007666:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007668:	3301      	adds	r3, #1
 800766a:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800766c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800766e:	085b      	lsrs	r3, r3, #1
 8007670:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8007672:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007674:	2b00      	cmp	r3, #0
 8007676:	d199      	bne.n	80075ac <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	4618      	mov	r0, r3
 800767e:	f003 fc9a 	bl	800afb6 <USB_ReadInterrupts>
 8007682:	4603      	mov	r3, r0
 8007684:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007688:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800768c:	f040 80c0 	bne.w	8007810 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	4618      	mov	r0, r3
 8007696:	f003 fcb9 	bl	800b00c <USB_ReadDevAllInEpInterrupt>
 800769a:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800769c:	2300      	movs	r3, #0
 800769e:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80076a0:	e0b2      	b.n	8007808 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80076a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076a4:	f003 0301 	and.w	r3, r3, #1
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	f000 80a7 	beq.w	80077fc <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80076b4:	b2d2      	uxtb	r2, r2
 80076b6:	4611      	mov	r1, r2
 80076b8:	4618      	mov	r0, r3
 80076ba:	f003 fcdd 	bl	800b078 <USB_ReadDevInEPInterrupt>
 80076be:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80076c0:	693b      	ldr	r3, [r7, #16]
 80076c2:	f003 0301 	and.w	r3, r3, #1
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d057      	beq.n	800777a <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80076ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076cc:	f003 030f 	and.w	r3, r3, #15
 80076d0:	2201      	movs	r2, #1
 80076d2:	fa02 f303 	lsl.w	r3, r2, r3
 80076d6:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80076d8:	69fb      	ldr	r3, [r7, #28]
 80076da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80076de:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	43db      	mvns	r3, r3
 80076e4:	69f9      	ldr	r1, [r7, #28]
 80076e6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80076ea:	4013      	ands	r3, r2
 80076ec:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80076ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076f0:	015a      	lsls	r2, r3, #5
 80076f2:	69fb      	ldr	r3, [r7, #28]
 80076f4:	4413      	add	r3, r2
 80076f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80076fa:	461a      	mov	r2, r3
 80076fc:	2301      	movs	r3, #1
 80076fe:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	691b      	ldr	r3, [r3, #16]
 8007704:	2b01      	cmp	r3, #1
 8007706:	d132      	bne.n	800776e <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8007708:	6879      	ldr	r1, [r7, #4]
 800770a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800770c:	4613      	mov	r3, r2
 800770e:	00db      	lsls	r3, r3, #3
 8007710:	1a9b      	subs	r3, r3, r2
 8007712:	009b      	lsls	r3, r3, #2
 8007714:	440b      	add	r3, r1
 8007716:	3348      	adds	r3, #72	; 0x48
 8007718:	6819      	ldr	r1, [r3, #0]
 800771a:	6878      	ldr	r0, [r7, #4]
 800771c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800771e:	4613      	mov	r3, r2
 8007720:	00db      	lsls	r3, r3, #3
 8007722:	1a9b      	subs	r3, r3, r2
 8007724:	009b      	lsls	r3, r3, #2
 8007726:	4403      	add	r3, r0
 8007728:	3344      	adds	r3, #68	; 0x44
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	4419      	add	r1, r3
 800772e:	6878      	ldr	r0, [r7, #4]
 8007730:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007732:	4613      	mov	r3, r2
 8007734:	00db      	lsls	r3, r3, #3
 8007736:	1a9b      	subs	r3, r3, r2
 8007738:	009b      	lsls	r3, r3, #2
 800773a:	4403      	add	r3, r0
 800773c:	3348      	adds	r3, #72	; 0x48
 800773e:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8007740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007742:	2b00      	cmp	r3, #0
 8007744:	d113      	bne.n	800776e <HAL_PCD_IRQHandler+0x31c>
 8007746:	6879      	ldr	r1, [r7, #4]
 8007748:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800774a:	4613      	mov	r3, r2
 800774c:	00db      	lsls	r3, r3, #3
 800774e:	1a9b      	subs	r3, r3, r2
 8007750:	009b      	lsls	r3, r3, #2
 8007752:	440b      	add	r3, r1
 8007754:	3350      	adds	r3, #80	; 0x50
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	2b00      	cmp	r3, #0
 800775a:	d108      	bne.n	800776e <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	6818      	ldr	r0, [r3, #0]
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8007766:	461a      	mov	r2, r3
 8007768:	2101      	movs	r1, #1
 800776a:	f003 fce1 	bl	800b130 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800776e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007770:	b2db      	uxtb	r3, r3
 8007772:	4619      	mov	r1, r3
 8007774:	6878      	ldr	r0, [r7, #4]
 8007776:	f005 fb9a 	bl	800ceae <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800777a:	693b      	ldr	r3, [r7, #16]
 800777c:	f003 0308 	and.w	r3, r3, #8
 8007780:	2b00      	cmp	r3, #0
 8007782:	d008      	beq.n	8007796 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8007784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007786:	015a      	lsls	r2, r3, #5
 8007788:	69fb      	ldr	r3, [r7, #28]
 800778a:	4413      	add	r3, r2
 800778c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007790:	461a      	mov	r2, r3
 8007792:	2308      	movs	r3, #8
 8007794:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8007796:	693b      	ldr	r3, [r7, #16]
 8007798:	f003 0310 	and.w	r3, r3, #16
 800779c:	2b00      	cmp	r3, #0
 800779e:	d008      	beq.n	80077b2 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80077a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077a2:	015a      	lsls	r2, r3, #5
 80077a4:	69fb      	ldr	r3, [r7, #28]
 80077a6:	4413      	add	r3, r2
 80077a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80077ac:	461a      	mov	r2, r3
 80077ae:	2310      	movs	r3, #16
 80077b0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80077b2:	693b      	ldr	r3, [r7, #16]
 80077b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d008      	beq.n	80077ce <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80077bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077be:	015a      	lsls	r2, r3, #5
 80077c0:	69fb      	ldr	r3, [r7, #28]
 80077c2:	4413      	add	r3, r2
 80077c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80077c8:	461a      	mov	r2, r3
 80077ca:	2340      	movs	r3, #64	; 0x40
 80077cc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80077ce:	693b      	ldr	r3, [r7, #16]
 80077d0:	f003 0302 	and.w	r3, r3, #2
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d008      	beq.n	80077ea <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80077d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077da:	015a      	lsls	r2, r3, #5
 80077dc:	69fb      	ldr	r3, [r7, #28]
 80077de:	4413      	add	r3, r2
 80077e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80077e4:	461a      	mov	r2, r3
 80077e6:	2302      	movs	r3, #2
 80077e8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80077ea:	693b      	ldr	r3, [r7, #16]
 80077ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d003      	beq.n	80077fc <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80077f4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80077f6:	6878      	ldr	r0, [r7, #4]
 80077f8:	f000 fc0c 	bl	8008014 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80077fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077fe:	3301      	adds	r3, #1
 8007800:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8007802:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007804:	085b      	lsrs	r3, r3, #1
 8007806:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8007808:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800780a:	2b00      	cmp	r3, #0
 800780c:	f47f af49 	bne.w	80076a2 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	4618      	mov	r0, r3
 8007816:	f003 fbce 	bl	800afb6 <USB_ReadInterrupts>
 800781a:	4603      	mov	r3, r0
 800781c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007820:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007824:	d114      	bne.n	8007850 <HAL_PCD_IRQHandler+0x3fe>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8007826:	69fb      	ldr	r3, [r7, #28]
 8007828:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800782c:	685b      	ldr	r3, [r3, #4]
 800782e:	69fa      	ldr	r2, [r7, #28]
 8007830:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007834:	f023 0301 	bic.w	r3, r3, #1
 8007838:	6053      	str	r3, [r2, #4]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResumeCallback(hpcd);
#else
      HAL_PCD_ResumeCallback(hpcd);
 800783a:	6878      	ldr	r0, [r7, #4]
 800783c:	f005 fbae 	bl	800cf9c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	695a      	ldr	r2, [r3, #20]
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800784e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	4618      	mov	r0, r3
 8007856:	f003 fbae 	bl	800afb6 <USB_ReadInterrupts>
 800785a:	4603      	mov	r3, r0
 800785c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007860:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007864:	d112      	bne.n	800788c <HAL_PCD_IRQHandler+0x43a>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8007866:	69fb      	ldr	r3, [r7, #28]
 8007868:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800786c:	689b      	ldr	r3, [r3, #8]
 800786e:	f003 0301 	and.w	r3, r3, #1
 8007872:	2b01      	cmp	r3, #1
 8007874:	d102      	bne.n	800787c <HAL_PCD_IRQHandler+0x42a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8007876:	6878      	ldr	r0, [r7, #4]
 8007878:	f005 fb6a 	bl	800cf50 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	695a      	ldr	r2, [r3, #20]
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800788a:	615a      	str	r2, [r3, #20]
    }
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	4618      	mov	r0, r3
 8007892:	f003 fb90 	bl	800afb6 <USB_ReadInterrupts>
 8007896:	4603      	mov	r3, r0
 8007898:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800789c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80078a0:	f040 80c7 	bne.w	8007a32 <HAL_PCD_IRQHandler+0x5e0>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80078a4:	69fb      	ldr	r3, [r7, #28]
 80078a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80078aa:	685b      	ldr	r3, [r3, #4]
 80078ac:	69fa      	ldr	r2, [r7, #28]
 80078ae:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80078b2:	f023 0301 	bic.w	r3, r3, #1
 80078b6:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	2110      	movs	r1, #16
 80078be:	4618      	mov	r0, r3
 80078c0:	f002 fc36 	bl	800a130 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80078c4:	2300      	movs	r3, #0
 80078c6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80078c8:	e056      	b.n	8007978 <HAL_PCD_IRQHandler+0x526>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80078ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078cc:	015a      	lsls	r2, r3, #5
 80078ce:	69fb      	ldr	r3, [r7, #28]
 80078d0:	4413      	add	r3, r2
 80078d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80078d6:	461a      	mov	r2, r3
 80078d8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80078dc:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80078de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078e0:	015a      	lsls	r2, r3, #5
 80078e2:	69fb      	ldr	r3, [r7, #28]
 80078e4:	4413      	add	r3, r2
 80078e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80078ee:	0151      	lsls	r1, r2, #5
 80078f0:	69fa      	ldr	r2, [r7, #28]
 80078f2:	440a      	add	r2, r1
 80078f4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80078f8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80078fc:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80078fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007900:	015a      	lsls	r2, r3, #5
 8007902:	69fb      	ldr	r3, [r7, #28]
 8007904:	4413      	add	r3, r2
 8007906:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800790e:	0151      	lsls	r1, r2, #5
 8007910:	69fa      	ldr	r2, [r7, #28]
 8007912:	440a      	add	r2, r1
 8007914:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007918:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800791c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800791e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007920:	015a      	lsls	r2, r3, #5
 8007922:	69fb      	ldr	r3, [r7, #28]
 8007924:	4413      	add	r3, r2
 8007926:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800792a:	461a      	mov	r2, r3
 800792c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007930:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8007932:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007934:	015a      	lsls	r2, r3, #5
 8007936:	69fb      	ldr	r3, [r7, #28]
 8007938:	4413      	add	r3, r2
 800793a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007942:	0151      	lsls	r1, r2, #5
 8007944:	69fa      	ldr	r2, [r7, #28]
 8007946:	440a      	add	r2, r1
 8007948:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800794c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007950:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8007952:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007954:	015a      	lsls	r2, r3, #5
 8007956:	69fb      	ldr	r3, [r7, #28]
 8007958:	4413      	add	r3, r2
 800795a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007962:	0151      	lsls	r1, r2, #5
 8007964:	69fa      	ldr	r2, [r7, #28]
 8007966:	440a      	add	r2, r1
 8007968:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800796c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007970:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007972:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007974:	3301      	adds	r3, #1
 8007976:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	685b      	ldr	r3, [r3, #4]
 800797c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800797e:	429a      	cmp	r2, r3
 8007980:	d3a3      	bcc.n	80078ca <HAL_PCD_IRQHandler+0x478>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8007982:	69fb      	ldr	r3, [r7, #28]
 8007984:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007988:	69db      	ldr	r3, [r3, #28]
 800798a:	69fa      	ldr	r2, [r7, #28]
 800798c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007990:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8007994:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800799a:	2b00      	cmp	r3, #0
 800799c:	d016      	beq.n	80079cc <HAL_PCD_IRQHandler+0x57a>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800799e:	69fb      	ldr	r3, [r7, #28]
 80079a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80079a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80079a8:	69fa      	ldr	r2, [r7, #28]
 80079aa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80079ae:	f043 030b 	orr.w	r3, r3, #11
 80079b2:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80079b6:	69fb      	ldr	r3, [r7, #28]
 80079b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80079bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80079be:	69fa      	ldr	r2, [r7, #28]
 80079c0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80079c4:	f043 030b 	orr.w	r3, r3, #11
 80079c8:	6453      	str	r3, [r2, #68]	; 0x44
 80079ca:	e015      	b.n	80079f8 <HAL_PCD_IRQHandler+0x5a6>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80079cc:	69fb      	ldr	r3, [r7, #28]
 80079ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80079d2:	695b      	ldr	r3, [r3, #20]
 80079d4:	69fa      	ldr	r2, [r7, #28]
 80079d6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80079da:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80079de:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80079e2:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80079e4:	69fb      	ldr	r3, [r7, #28]
 80079e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80079ea:	691b      	ldr	r3, [r3, #16]
 80079ec:	69fa      	ldr	r2, [r7, #28]
 80079ee:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80079f2:	f043 030b 	orr.w	r3, r3, #11
 80079f6:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80079f8:	69fb      	ldr	r3, [r7, #28]
 80079fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	69fa      	ldr	r2, [r7, #28]
 8007a02:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007a06:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8007a0a:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	6818      	ldr	r0, [r3, #0]
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	691b      	ldr	r3, [r3, #16]
 8007a14:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8007a1c:	461a      	mov	r2, r3
 8007a1e:	f003 fb87 	bl	800b130 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	695a      	ldr	r2, [r3, #20]
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8007a30:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	4618      	mov	r0, r3
 8007a38:	f003 fabd 	bl	800afb6 <USB_ReadInterrupts>
 8007a3c:	4603      	mov	r3, r0
 8007a3e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007a42:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007a46:	d124      	bne.n	8007a92 <HAL_PCD_IRQHandler+0x640>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	4618      	mov	r0, r3
 8007a4e:	f003 fb4d 	bl	800b0ec <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	4618      	mov	r0, r3
 8007a58:	f002 fbc6 	bl	800a1e8 <USB_GetDevSpeed>
 8007a5c:	4603      	mov	r3, r0
 8007a5e:	461a      	mov	r2, r3
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	681c      	ldr	r4, [r3, #0]
 8007a68:	f001 f932 	bl	8008cd0 <HAL_RCC_GetHCLKFreq>
 8007a6c:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8007a72:	b2db      	uxtb	r3, r3
 8007a74:	461a      	mov	r2, r3
 8007a76:	4620      	mov	r0, r4
 8007a78:	f002 f8e8 	bl	8009c4c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8007a7c:	6878      	ldr	r0, [r7, #4]
 8007a7e:	f005 fa3e 	bl	800cefe <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	695a      	ldr	r2, [r3, #20]
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8007a90:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	4618      	mov	r0, r3
 8007a98:	f003 fa8d 	bl	800afb6 <USB_ReadInterrupts>
 8007a9c:	4603      	mov	r3, r0
 8007a9e:	f003 0308 	and.w	r3, r3, #8
 8007aa2:	2b08      	cmp	r3, #8
 8007aa4:	d10a      	bne.n	8007abc <HAL_PCD_IRQHandler+0x66a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8007aa6:	6878      	ldr	r0, [r7, #4]
 8007aa8:	f005 fa1b 	bl	800cee2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	695a      	ldr	r2, [r3, #20]
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	f002 0208 	and.w	r2, r2, #8
 8007aba:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	4618      	mov	r0, r3
 8007ac2:	f003 fa78 	bl	800afb6 <USB_ReadInterrupts>
 8007ac6:	4603      	mov	r3, r0
 8007ac8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007acc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007ad0:	d10f      	bne.n	8007af2 <HAL_PCD_IRQHandler+0x6a0>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8007ad2:	2300      	movs	r3, #0
 8007ad4:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8007ad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ad8:	b2db      	uxtb	r3, r3
 8007ada:	4619      	mov	r1, r3
 8007adc:	6878      	ldr	r0, [r7, #4]
 8007ade:	f005 fa7d 	bl	800cfdc <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	695a      	ldr	r2, [r3, #20]
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8007af0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	4618      	mov	r0, r3
 8007af8:	f003 fa5d 	bl	800afb6 <USB_ReadInterrupts>
 8007afc:	4603      	mov	r3, r0
 8007afe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007b02:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007b06:	d10f      	bne.n	8007b28 <HAL_PCD_IRQHandler+0x6d6>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8007b08:	2300      	movs	r3, #0
 8007b0a:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8007b0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b0e:	b2db      	uxtb	r3, r3
 8007b10:	4619      	mov	r1, r3
 8007b12:	6878      	ldr	r0, [r7, #4]
 8007b14:	f005 fa50 	bl	800cfb8 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	695a      	ldr	r2, [r3, #20]
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8007b26:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	4618      	mov	r0, r3
 8007b2e:	f003 fa42 	bl	800afb6 <USB_ReadInterrupts>
 8007b32:	4603      	mov	r3, r0
 8007b34:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007b38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007b3c:	d10a      	bne.n	8007b54 <HAL_PCD_IRQHandler+0x702>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8007b3e:	6878      	ldr	r0, [r7, #4]
 8007b40:	f005 fa5e 	bl	800d000 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	695a      	ldr	r2, [r3, #20]
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8007b52:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	4618      	mov	r0, r3
 8007b5a:	f003 fa2c 	bl	800afb6 <USB_ReadInterrupts>
 8007b5e:	4603      	mov	r3, r0
 8007b60:	f003 0304 	and.w	r3, r3, #4
 8007b64:	2b04      	cmp	r3, #4
 8007b66:	d115      	bne.n	8007b94 <HAL_PCD_IRQHandler+0x742>
    {
      temp = hpcd->Instance->GOTGINT;
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	685b      	ldr	r3, [r3, #4]
 8007b6e:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8007b70:	69bb      	ldr	r3, [r7, #24]
 8007b72:	f003 0304 	and.w	r3, r3, #4
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d002      	beq.n	8007b80 <HAL_PCD_IRQHandler+0x72e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8007b7a:	6878      	ldr	r0, [r7, #4]
 8007b7c:	f005 fa4e 	bl	800d01c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	6859      	ldr	r1, [r3, #4]
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	69ba      	ldr	r2, [r7, #24]
 8007b8c:	430a      	orrs	r2, r1
 8007b8e:	605a      	str	r2, [r3, #4]
 8007b90:	e000      	b.n	8007b94 <HAL_PCD_IRQHandler+0x742>
      return;
 8007b92:	bf00      	nop
    }
  }
}
 8007b94:	3734      	adds	r7, #52	; 0x34
 8007b96:	46bd      	mov	sp, r7
 8007b98:	bd90      	pop	{r4, r7, pc}

08007b9a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8007b9a:	b580      	push	{r7, lr}
 8007b9c:	b082      	sub	sp, #8
 8007b9e:	af00      	add	r7, sp, #0
 8007ba0:	6078      	str	r0, [r7, #4]
 8007ba2:	460b      	mov	r3, r1
 8007ba4:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8007bac:	2b01      	cmp	r3, #1
 8007bae:	d101      	bne.n	8007bb4 <HAL_PCD_SetAddress+0x1a>
 8007bb0:	2302      	movs	r3, #2
 8007bb2:	e013      	b.n	8007bdc <HAL_PCD_SetAddress+0x42>
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	2201      	movs	r2, #1
 8007bb8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	78fa      	ldrb	r2, [r7, #3]
 8007bc0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	78fa      	ldrb	r2, [r7, #3]
 8007bca:	4611      	mov	r1, r2
 8007bcc:	4618      	mov	r0, r3
 8007bce:	f003 f98d 	bl	800aeec <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	2200      	movs	r2, #0
 8007bd6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8007bda:	2300      	movs	r3, #0
}
 8007bdc:	4618      	mov	r0, r3
 8007bde:	3708      	adds	r7, #8
 8007be0:	46bd      	mov	sp, r7
 8007be2:	bd80      	pop	{r7, pc}

08007be4 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8007be4:	b580      	push	{r7, lr}
 8007be6:	b084      	sub	sp, #16
 8007be8:	af00      	add	r7, sp, #0
 8007bea:	6078      	str	r0, [r7, #4]
 8007bec:	4608      	mov	r0, r1
 8007bee:	4611      	mov	r1, r2
 8007bf0:	461a      	mov	r2, r3
 8007bf2:	4603      	mov	r3, r0
 8007bf4:	70fb      	strb	r3, [r7, #3]
 8007bf6:	460b      	mov	r3, r1
 8007bf8:	803b      	strh	r3, [r7, #0]
 8007bfa:	4613      	mov	r3, r2
 8007bfc:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8007bfe:	2300      	movs	r3, #0
 8007c00:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8007c02:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	da0f      	bge.n	8007c2a <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007c0a:	78fb      	ldrb	r3, [r7, #3]
 8007c0c:	f003 020f 	and.w	r2, r3, #15
 8007c10:	4613      	mov	r3, r2
 8007c12:	00db      	lsls	r3, r3, #3
 8007c14:	1a9b      	subs	r3, r3, r2
 8007c16:	009b      	lsls	r3, r3, #2
 8007c18:	3338      	adds	r3, #56	; 0x38
 8007c1a:	687a      	ldr	r2, [r7, #4]
 8007c1c:	4413      	add	r3, r2
 8007c1e:	3304      	adds	r3, #4
 8007c20:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	2201      	movs	r2, #1
 8007c26:	705a      	strb	r2, [r3, #1]
 8007c28:	e00f      	b.n	8007c4a <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007c2a:	78fb      	ldrb	r3, [r7, #3]
 8007c2c:	f003 020f 	and.w	r2, r3, #15
 8007c30:	4613      	mov	r3, r2
 8007c32:	00db      	lsls	r3, r3, #3
 8007c34:	1a9b      	subs	r3, r3, r2
 8007c36:	009b      	lsls	r3, r3, #2
 8007c38:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8007c3c:	687a      	ldr	r2, [r7, #4]
 8007c3e:	4413      	add	r3, r2
 8007c40:	3304      	adds	r3, #4
 8007c42:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	2200      	movs	r2, #0
 8007c48:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8007c4a:	78fb      	ldrb	r3, [r7, #3]
 8007c4c:	f003 030f 	and.w	r3, r3, #15
 8007c50:	b2da      	uxtb	r2, r3
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8007c56:	883a      	ldrh	r2, [r7, #0]
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	78ba      	ldrb	r2, [r7, #2]
 8007c60:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	785b      	ldrb	r3, [r3, #1]
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d004      	beq.n	8007c74 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	781b      	ldrb	r3, [r3, #0]
 8007c6e:	b29a      	uxth	r2, r3
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8007c74:	78bb      	ldrb	r3, [r7, #2]
 8007c76:	2b02      	cmp	r3, #2
 8007c78:	d102      	bne.n	8007c80 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	2200      	movs	r2, #0
 8007c7e:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8007c86:	2b01      	cmp	r3, #1
 8007c88:	d101      	bne.n	8007c8e <HAL_PCD_EP_Open+0xaa>
 8007c8a:	2302      	movs	r3, #2
 8007c8c:	e00e      	b.n	8007cac <HAL_PCD_EP_Open+0xc8>
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	2201      	movs	r2, #1
 8007c92:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	68f9      	ldr	r1, [r7, #12]
 8007c9c:	4618      	mov	r0, r3
 8007c9e:	f002 fac7 	bl	800a230 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	2200      	movs	r2, #0
 8007ca6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8007caa:	7afb      	ldrb	r3, [r7, #11]
}
 8007cac:	4618      	mov	r0, r3
 8007cae:	3710      	adds	r7, #16
 8007cb0:	46bd      	mov	sp, r7
 8007cb2:	bd80      	pop	{r7, pc}

08007cb4 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007cb4:	b580      	push	{r7, lr}
 8007cb6:	b084      	sub	sp, #16
 8007cb8:	af00      	add	r7, sp, #0
 8007cba:	6078      	str	r0, [r7, #4]
 8007cbc:	460b      	mov	r3, r1
 8007cbe:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8007cc0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	da0f      	bge.n	8007ce8 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007cc8:	78fb      	ldrb	r3, [r7, #3]
 8007cca:	f003 020f 	and.w	r2, r3, #15
 8007cce:	4613      	mov	r3, r2
 8007cd0:	00db      	lsls	r3, r3, #3
 8007cd2:	1a9b      	subs	r3, r3, r2
 8007cd4:	009b      	lsls	r3, r3, #2
 8007cd6:	3338      	adds	r3, #56	; 0x38
 8007cd8:	687a      	ldr	r2, [r7, #4]
 8007cda:	4413      	add	r3, r2
 8007cdc:	3304      	adds	r3, #4
 8007cde:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	2201      	movs	r2, #1
 8007ce4:	705a      	strb	r2, [r3, #1]
 8007ce6:	e00f      	b.n	8007d08 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007ce8:	78fb      	ldrb	r3, [r7, #3]
 8007cea:	f003 020f 	and.w	r2, r3, #15
 8007cee:	4613      	mov	r3, r2
 8007cf0:	00db      	lsls	r3, r3, #3
 8007cf2:	1a9b      	subs	r3, r3, r2
 8007cf4:	009b      	lsls	r3, r3, #2
 8007cf6:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8007cfa:	687a      	ldr	r2, [r7, #4]
 8007cfc:	4413      	add	r3, r2
 8007cfe:	3304      	adds	r3, #4
 8007d00:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	2200      	movs	r2, #0
 8007d06:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8007d08:	78fb      	ldrb	r3, [r7, #3]
 8007d0a:	f003 030f 	and.w	r3, r3, #15
 8007d0e:	b2da      	uxtb	r2, r3
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8007d1a:	2b01      	cmp	r3, #1
 8007d1c:	d101      	bne.n	8007d22 <HAL_PCD_EP_Close+0x6e>
 8007d1e:	2302      	movs	r3, #2
 8007d20:	e00e      	b.n	8007d40 <HAL_PCD_EP_Close+0x8c>
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	2201      	movs	r2, #1
 8007d26:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	68f9      	ldr	r1, [r7, #12]
 8007d30:	4618      	mov	r0, r3
 8007d32:	f002 fb03 	bl	800a33c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	2200      	movs	r2, #0
 8007d3a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8007d3e:	2300      	movs	r3, #0
}
 8007d40:	4618      	mov	r0, r3
 8007d42:	3710      	adds	r7, #16
 8007d44:	46bd      	mov	sp, r7
 8007d46:	bd80      	pop	{r7, pc}

08007d48 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8007d48:	b580      	push	{r7, lr}
 8007d4a:	b086      	sub	sp, #24
 8007d4c:	af00      	add	r7, sp, #0
 8007d4e:	60f8      	str	r0, [r7, #12]
 8007d50:	607a      	str	r2, [r7, #4]
 8007d52:	603b      	str	r3, [r7, #0]
 8007d54:	460b      	mov	r3, r1
 8007d56:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007d58:	7afb      	ldrb	r3, [r7, #11]
 8007d5a:	f003 020f 	and.w	r2, r3, #15
 8007d5e:	4613      	mov	r3, r2
 8007d60:	00db      	lsls	r3, r3, #3
 8007d62:	1a9b      	subs	r3, r3, r2
 8007d64:	009b      	lsls	r3, r3, #2
 8007d66:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8007d6a:	68fa      	ldr	r2, [r7, #12]
 8007d6c:	4413      	add	r3, r2
 8007d6e:	3304      	adds	r3, #4
 8007d70:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8007d72:	697b      	ldr	r3, [r7, #20]
 8007d74:	687a      	ldr	r2, [r7, #4]
 8007d76:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8007d78:	697b      	ldr	r3, [r7, #20]
 8007d7a:	683a      	ldr	r2, [r7, #0]
 8007d7c:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8007d7e:	697b      	ldr	r3, [r7, #20]
 8007d80:	2200      	movs	r2, #0
 8007d82:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8007d84:	697b      	ldr	r3, [r7, #20]
 8007d86:	2200      	movs	r2, #0
 8007d88:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007d8a:	7afb      	ldrb	r3, [r7, #11]
 8007d8c:	f003 030f 	and.w	r3, r3, #15
 8007d90:	b2da      	uxtb	r2, r3
 8007d92:	697b      	ldr	r3, [r7, #20]
 8007d94:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	691b      	ldr	r3, [r3, #16]
 8007d9a:	2b01      	cmp	r3, #1
 8007d9c:	d102      	bne.n	8007da4 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8007d9e:	687a      	ldr	r2, [r7, #4]
 8007da0:	697b      	ldr	r3, [r7, #20]
 8007da2:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8007da4:	7afb      	ldrb	r3, [r7, #11]
 8007da6:	f003 030f 	and.w	r3, r3, #15
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	d109      	bne.n	8007dc2 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	6818      	ldr	r0, [r3, #0]
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	691b      	ldr	r3, [r3, #16]
 8007db6:	b2db      	uxtb	r3, r3
 8007db8:	461a      	mov	r2, r3
 8007dba:	6979      	ldr	r1, [r7, #20]
 8007dbc:	f002 fdde 	bl	800a97c <USB_EP0StartXfer>
 8007dc0:	e008      	b.n	8007dd4 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	6818      	ldr	r0, [r3, #0]
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	691b      	ldr	r3, [r3, #16]
 8007dca:	b2db      	uxtb	r3, r3
 8007dcc:	461a      	mov	r2, r3
 8007dce:	6979      	ldr	r1, [r7, #20]
 8007dd0:	f002 fb90 	bl	800a4f4 <USB_EPStartXfer>
  }

  return HAL_OK;
 8007dd4:	2300      	movs	r3, #0
}
 8007dd6:	4618      	mov	r0, r3
 8007dd8:	3718      	adds	r7, #24
 8007dda:	46bd      	mov	sp, r7
 8007ddc:	bd80      	pop	{r7, pc}

08007dde <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007dde:	b480      	push	{r7}
 8007de0:	b083      	sub	sp, #12
 8007de2:	af00      	add	r7, sp, #0
 8007de4:	6078      	str	r0, [r7, #4]
 8007de6:	460b      	mov	r3, r1
 8007de8:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8007dea:	78fb      	ldrb	r3, [r7, #3]
 8007dec:	f003 020f 	and.w	r2, r3, #15
 8007df0:	6879      	ldr	r1, [r7, #4]
 8007df2:	4613      	mov	r3, r2
 8007df4:	00db      	lsls	r3, r3, #3
 8007df6:	1a9b      	subs	r3, r3, r2
 8007df8:	009b      	lsls	r3, r3, #2
 8007dfa:	440b      	add	r3, r1
 8007dfc:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8007e00:	681b      	ldr	r3, [r3, #0]
}
 8007e02:	4618      	mov	r0, r3
 8007e04:	370c      	adds	r7, #12
 8007e06:	46bd      	mov	sp, r7
 8007e08:	bc80      	pop	{r7}
 8007e0a:	4770      	bx	lr

08007e0c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8007e0c:	b580      	push	{r7, lr}
 8007e0e:	b086      	sub	sp, #24
 8007e10:	af00      	add	r7, sp, #0
 8007e12:	60f8      	str	r0, [r7, #12]
 8007e14:	607a      	str	r2, [r7, #4]
 8007e16:	603b      	str	r3, [r7, #0]
 8007e18:	460b      	mov	r3, r1
 8007e1a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007e1c:	7afb      	ldrb	r3, [r7, #11]
 8007e1e:	f003 020f 	and.w	r2, r3, #15
 8007e22:	4613      	mov	r3, r2
 8007e24:	00db      	lsls	r3, r3, #3
 8007e26:	1a9b      	subs	r3, r3, r2
 8007e28:	009b      	lsls	r3, r3, #2
 8007e2a:	3338      	adds	r3, #56	; 0x38
 8007e2c:	68fa      	ldr	r2, [r7, #12]
 8007e2e:	4413      	add	r3, r2
 8007e30:	3304      	adds	r3, #4
 8007e32:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8007e34:	697b      	ldr	r3, [r7, #20]
 8007e36:	687a      	ldr	r2, [r7, #4]
 8007e38:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8007e3a:	697b      	ldr	r3, [r7, #20]
 8007e3c:	683a      	ldr	r2, [r7, #0]
 8007e3e:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8007e40:	697b      	ldr	r3, [r7, #20]
 8007e42:	2200      	movs	r2, #0
 8007e44:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8007e46:	697b      	ldr	r3, [r7, #20]
 8007e48:	2201      	movs	r2, #1
 8007e4a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007e4c:	7afb      	ldrb	r3, [r7, #11]
 8007e4e:	f003 030f 	and.w	r3, r3, #15
 8007e52:	b2da      	uxtb	r2, r3
 8007e54:	697b      	ldr	r3, [r7, #20]
 8007e56:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	691b      	ldr	r3, [r3, #16]
 8007e5c:	2b01      	cmp	r3, #1
 8007e5e:	d102      	bne.n	8007e66 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8007e60:	687a      	ldr	r2, [r7, #4]
 8007e62:	697b      	ldr	r3, [r7, #20]
 8007e64:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8007e66:	7afb      	ldrb	r3, [r7, #11]
 8007e68:	f003 030f 	and.w	r3, r3, #15
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d109      	bne.n	8007e84 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	6818      	ldr	r0, [r3, #0]
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	691b      	ldr	r3, [r3, #16]
 8007e78:	b2db      	uxtb	r3, r3
 8007e7a:	461a      	mov	r2, r3
 8007e7c:	6979      	ldr	r1, [r7, #20]
 8007e7e:	f002 fd7d 	bl	800a97c <USB_EP0StartXfer>
 8007e82:	e008      	b.n	8007e96 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	6818      	ldr	r0, [r3, #0]
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	691b      	ldr	r3, [r3, #16]
 8007e8c:	b2db      	uxtb	r3, r3
 8007e8e:	461a      	mov	r2, r3
 8007e90:	6979      	ldr	r1, [r7, #20]
 8007e92:	f002 fb2f 	bl	800a4f4 <USB_EPStartXfer>
  }

  return HAL_OK;
 8007e96:	2300      	movs	r3, #0
}
 8007e98:	4618      	mov	r0, r3
 8007e9a:	3718      	adds	r7, #24
 8007e9c:	46bd      	mov	sp, r7
 8007e9e:	bd80      	pop	{r7, pc}

08007ea0 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007ea0:	b580      	push	{r7, lr}
 8007ea2:	b084      	sub	sp, #16
 8007ea4:	af00      	add	r7, sp, #0
 8007ea6:	6078      	str	r0, [r7, #4]
 8007ea8:	460b      	mov	r3, r1
 8007eaa:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8007eac:	78fb      	ldrb	r3, [r7, #3]
 8007eae:	f003 020f 	and.w	r2, r3, #15
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	685b      	ldr	r3, [r3, #4]
 8007eb6:	429a      	cmp	r2, r3
 8007eb8:	d901      	bls.n	8007ebe <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8007eba:	2301      	movs	r3, #1
 8007ebc:	e050      	b.n	8007f60 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8007ebe:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	da0f      	bge.n	8007ee6 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007ec6:	78fb      	ldrb	r3, [r7, #3]
 8007ec8:	f003 020f 	and.w	r2, r3, #15
 8007ecc:	4613      	mov	r3, r2
 8007ece:	00db      	lsls	r3, r3, #3
 8007ed0:	1a9b      	subs	r3, r3, r2
 8007ed2:	009b      	lsls	r3, r3, #2
 8007ed4:	3338      	adds	r3, #56	; 0x38
 8007ed6:	687a      	ldr	r2, [r7, #4]
 8007ed8:	4413      	add	r3, r2
 8007eda:	3304      	adds	r3, #4
 8007edc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	2201      	movs	r2, #1
 8007ee2:	705a      	strb	r2, [r3, #1]
 8007ee4:	e00d      	b.n	8007f02 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8007ee6:	78fa      	ldrb	r2, [r7, #3]
 8007ee8:	4613      	mov	r3, r2
 8007eea:	00db      	lsls	r3, r3, #3
 8007eec:	1a9b      	subs	r3, r3, r2
 8007eee:	009b      	lsls	r3, r3, #2
 8007ef0:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8007ef4:	687a      	ldr	r2, [r7, #4]
 8007ef6:	4413      	add	r3, r2
 8007ef8:	3304      	adds	r3, #4
 8007efa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	2200      	movs	r2, #0
 8007f00:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	2201      	movs	r2, #1
 8007f06:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007f08:	78fb      	ldrb	r3, [r7, #3]
 8007f0a:	f003 030f 	and.w	r3, r3, #15
 8007f0e:	b2da      	uxtb	r2, r3
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8007f1a:	2b01      	cmp	r3, #1
 8007f1c:	d101      	bne.n	8007f22 <HAL_PCD_EP_SetStall+0x82>
 8007f1e:	2302      	movs	r3, #2
 8007f20:	e01e      	b.n	8007f60 <HAL_PCD_EP_SetStall+0xc0>
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	2201      	movs	r2, #1
 8007f26:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	68f9      	ldr	r1, [r7, #12]
 8007f30:	4618      	mov	r0, r3
 8007f32:	f002 ff09 	bl	800ad48 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8007f36:	78fb      	ldrb	r3, [r7, #3]
 8007f38:	f003 030f 	and.w	r3, r3, #15
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d10a      	bne.n	8007f56 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	6818      	ldr	r0, [r3, #0]
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	691b      	ldr	r3, [r3, #16]
 8007f48:	b2d9      	uxtb	r1, r3
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8007f50:	461a      	mov	r2, r3
 8007f52:	f003 f8ed 	bl	800b130 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	2200      	movs	r2, #0
 8007f5a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8007f5e:	2300      	movs	r3, #0
}
 8007f60:	4618      	mov	r0, r3
 8007f62:	3710      	adds	r7, #16
 8007f64:	46bd      	mov	sp, r7
 8007f66:	bd80      	pop	{r7, pc}

08007f68 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007f68:	b580      	push	{r7, lr}
 8007f6a:	b084      	sub	sp, #16
 8007f6c:	af00      	add	r7, sp, #0
 8007f6e:	6078      	str	r0, [r7, #4]
 8007f70:	460b      	mov	r3, r1
 8007f72:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8007f74:	78fb      	ldrb	r3, [r7, #3]
 8007f76:	f003 020f 	and.w	r2, r3, #15
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	685b      	ldr	r3, [r3, #4]
 8007f7e:	429a      	cmp	r2, r3
 8007f80:	d901      	bls.n	8007f86 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8007f82:	2301      	movs	r3, #1
 8007f84:	e042      	b.n	800800c <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8007f86:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	da0f      	bge.n	8007fae <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007f8e:	78fb      	ldrb	r3, [r7, #3]
 8007f90:	f003 020f 	and.w	r2, r3, #15
 8007f94:	4613      	mov	r3, r2
 8007f96:	00db      	lsls	r3, r3, #3
 8007f98:	1a9b      	subs	r3, r3, r2
 8007f9a:	009b      	lsls	r3, r3, #2
 8007f9c:	3338      	adds	r3, #56	; 0x38
 8007f9e:	687a      	ldr	r2, [r7, #4]
 8007fa0:	4413      	add	r3, r2
 8007fa2:	3304      	adds	r3, #4
 8007fa4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	2201      	movs	r2, #1
 8007faa:	705a      	strb	r2, [r3, #1]
 8007fac:	e00f      	b.n	8007fce <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007fae:	78fb      	ldrb	r3, [r7, #3]
 8007fb0:	f003 020f 	and.w	r2, r3, #15
 8007fb4:	4613      	mov	r3, r2
 8007fb6:	00db      	lsls	r3, r3, #3
 8007fb8:	1a9b      	subs	r3, r3, r2
 8007fba:	009b      	lsls	r3, r3, #2
 8007fbc:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8007fc0:	687a      	ldr	r2, [r7, #4]
 8007fc2:	4413      	add	r3, r2
 8007fc4:	3304      	adds	r3, #4
 8007fc6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	2200      	movs	r2, #0
 8007fcc:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	2200      	movs	r2, #0
 8007fd2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007fd4:	78fb      	ldrb	r3, [r7, #3]
 8007fd6:	f003 030f 	and.w	r3, r3, #15
 8007fda:	b2da      	uxtb	r2, r3
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8007fe6:	2b01      	cmp	r3, #1
 8007fe8:	d101      	bne.n	8007fee <HAL_PCD_EP_ClrStall+0x86>
 8007fea:	2302      	movs	r3, #2
 8007fec:	e00e      	b.n	800800c <HAL_PCD_EP_ClrStall+0xa4>
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	2201      	movs	r2, #1
 8007ff2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	68f9      	ldr	r1, [r7, #12]
 8007ffc:	4618      	mov	r0, r3
 8007ffe:	f002 ff10 	bl	800ae22 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	2200      	movs	r2, #0
 8008006:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800800a:	2300      	movs	r3, #0
}
 800800c:	4618      	mov	r0, r3
 800800e:	3710      	adds	r7, #16
 8008010:	46bd      	mov	sp, r7
 8008012:	bd80      	pop	{r7, pc}

08008014 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8008014:	b580      	push	{r7, lr}
 8008016:	b08a      	sub	sp, #40	; 0x28
 8008018:	af02      	add	r7, sp, #8
 800801a:	6078      	str	r0, [r7, #4]
 800801c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008024:	697b      	ldr	r3, [r7, #20]
 8008026:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8008028:	683a      	ldr	r2, [r7, #0]
 800802a:	4613      	mov	r3, r2
 800802c:	00db      	lsls	r3, r3, #3
 800802e:	1a9b      	subs	r3, r3, r2
 8008030:	009b      	lsls	r3, r3, #2
 8008032:	3338      	adds	r3, #56	; 0x38
 8008034:	687a      	ldr	r2, [r7, #4]
 8008036:	4413      	add	r3, r2
 8008038:	3304      	adds	r3, #4
 800803a:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	699a      	ldr	r2, [r3, #24]
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	695b      	ldr	r3, [r3, #20]
 8008044:	429a      	cmp	r2, r3
 8008046:	d901      	bls.n	800804c <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8008048:	2301      	movs	r3, #1
 800804a:	e06c      	b.n	8008126 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	695a      	ldr	r2, [r3, #20]
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	699b      	ldr	r3, [r3, #24]
 8008054:	1ad3      	subs	r3, r2, r3
 8008056:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	689b      	ldr	r3, [r3, #8]
 800805c:	69fa      	ldr	r2, [r7, #28]
 800805e:	429a      	cmp	r2, r3
 8008060:	d902      	bls.n	8008068 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	689b      	ldr	r3, [r3, #8]
 8008066:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8008068:	69fb      	ldr	r3, [r7, #28]
 800806a:	3303      	adds	r3, #3
 800806c:	089b      	lsrs	r3, r3, #2
 800806e:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8008070:	e02b      	b.n	80080ca <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	695a      	ldr	r2, [r3, #20]
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	699b      	ldr	r3, [r3, #24]
 800807a:	1ad3      	subs	r3, r2, r3
 800807c:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	689b      	ldr	r3, [r3, #8]
 8008082:	69fa      	ldr	r2, [r7, #28]
 8008084:	429a      	cmp	r2, r3
 8008086:	d902      	bls.n	800808e <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	689b      	ldr	r3, [r3, #8]
 800808c:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800808e:	69fb      	ldr	r3, [r7, #28]
 8008090:	3303      	adds	r3, #3
 8008092:	089b      	lsrs	r3, r3, #2
 8008094:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	68d9      	ldr	r1, [r3, #12]
 800809a:	683b      	ldr	r3, [r7, #0]
 800809c:	b2da      	uxtb	r2, r3
 800809e:	69fb      	ldr	r3, [r7, #28]
 80080a0:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80080a6:	b2db      	uxtb	r3, r3
 80080a8:	9300      	str	r3, [sp, #0]
 80080aa:	4603      	mov	r3, r0
 80080ac:	6978      	ldr	r0, [r7, #20]
 80080ae:	f002 fdb7 	bl	800ac20 <USB_WritePacket>

    ep->xfer_buff  += len;
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	68da      	ldr	r2, [r3, #12]
 80080b6:	69fb      	ldr	r3, [r7, #28]
 80080b8:	441a      	add	r2, r3
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	699a      	ldr	r2, [r3, #24]
 80080c2:	69fb      	ldr	r3, [r7, #28]
 80080c4:	441a      	add	r2, r3
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80080ca:	683b      	ldr	r3, [r7, #0]
 80080cc:	015a      	lsls	r2, r3, #5
 80080ce:	693b      	ldr	r3, [r7, #16]
 80080d0:	4413      	add	r3, r2
 80080d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80080d6:	699b      	ldr	r3, [r3, #24]
 80080d8:	b29b      	uxth	r3, r3
 80080da:	69ba      	ldr	r2, [r7, #24]
 80080dc:	429a      	cmp	r2, r3
 80080de:	d809      	bhi.n	80080f4 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	699a      	ldr	r2, [r3, #24]
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80080e8:	429a      	cmp	r2, r3
 80080ea:	d203      	bcs.n	80080f4 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	695b      	ldr	r3, [r3, #20]
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	d1be      	bne.n	8008072 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	695a      	ldr	r2, [r3, #20]
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	699b      	ldr	r3, [r3, #24]
 80080fc:	429a      	cmp	r2, r3
 80080fe:	d811      	bhi.n	8008124 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8008100:	683b      	ldr	r3, [r7, #0]
 8008102:	f003 030f 	and.w	r3, r3, #15
 8008106:	2201      	movs	r2, #1
 8008108:	fa02 f303 	lsl.w	r3, r2, r3
 800810c:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800810e:	693b      	ldr	r3, [r7, #16]
 8008110:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008114:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008116:	68bb      	ldr	r3, [r7, #8]
 8008118:	43db      	mvns	r3, r3
 800811a:	6939      	ldr	r1, [r7, #16]
 800811c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008120:	4013      	ands	r3, r2
 8008122:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8008124:	2300      	movs	r3, #0
}
 8008126:	4618      	mov	r0, r3
 8008128:	3720      	adds	r7, #32
 800812a:	46bd      	mov	sp, r7
 800812c:	bd80      	pop	{r7, pc}
	...

08008130 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8008130:	b580      	push	{r7, lr}
 8008132:	b086      	sub	sp, #24
 8008134:	af00      	add	r7, sp, #0
 8008136:	6078      	str	r0, [r7, #4]
 8008138:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008140:	697b      	ldr	r3, [r7, #20]
 8008142:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8008144:	697b      	ldr	r3, [r7, #20]
 8008146:	333c      	adds	r3, #60	; 0x3c
 8008148:	3304      	adds	r3, #4
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800814e:	683b      	ldr	r3, [r7, #0]
 8008150:	015a      	lsls	r2, r3, #5
 8008152:	693b      	ldr	r3, [r7, #16]
 8008154:	4413      	add	r3, r2
 8008156:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800815a:	689b      	ldr	r3, [r3, #8]
 800815c:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	691b      	ldr	r3, [r3, #16]
 8008162:	2b01      	cmp	r3, #1
 8008164:	f040 80a0 	bne.w	80082a8 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8008168:	68bb      	ldr	r3, [r7, #8]
 800816a:	f003 0308 	and.w	r3, r3, #8
 800816e:	2b00      	cmp	r3, #0
 8008170:	d015      	beq.n	800819e <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	4a72      	ldr	r2, [pc, #456]	; (8008340 <PCD_EP_OutXfrComplete_int+0x210>)
 8008176:	4293      	cmp	r3, r2
 8008178:	f240 80dd 	bls.w	8008336 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800817c:	68bb      	ldr	r3, [r7, #8]
 800817e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008182:	2b00      	cmp	r3, #0
 8008184:	f000 80d7 	beq.w	8008336 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8008188:	683b      	ldr	r3, [r7, #0]
 800818a:	015a      	lsls	r2, r3, #5
 800818c:	693b      	ldr	r3, [r7, #16]
 800818e:	4413      	add	r3, r2
 8008190:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008194:	461a      	mov	r2, r3
 8008196:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800819a:	6093      	str	r3, [r2, #8]
 800819c:	e0cb      	b.n	8008336 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800819e:	68bb      	ldr	r3, [r7, #8]
 80081a0:	f003 0320 	and.w	r3, r3, #32
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	d009      	beq.n	80081bc <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80081a8:	683b      	ldr	r3, [r7, #0]
 80081aa:	015a      	lsls	r2, r3, #5
 80081ac:	693b      	ldr	r3, [r7, #16]
 80081ae:	4413      	add	r3, r2
 80081b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80081b4:	461a      	mov	r2, r3
 80081b6:	2320      	movs	r3, #32
 80081b8:	6093      	str	r3, [r2, #8]
 80081ba:	e0bc      	b.n	8008336 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80081bc:	68bb      	ldr	r3, [r7, #8]
 80081be:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	f040 80b7 	bne.w	8008336 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	4a5d      	ldr	r2, [pc, #372]	; (8008340 <PCD_EP_OutXfrComplete_int+0x210>)
 80081cc:	4293      	cmp	r3, r2
 80081ce:	d90f      	bls.n	80081f0 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80081d0:	68bb      	ldr	r3, [r7, #8]
 80081d2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d00a      	beq.n	80081f0 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80081da:	683b      	ldr	r3, [r7, #0]
 80081dc:	015a      	lsls	r2, r3, #5
 80081de:	693b      	ldr	r3, [r7, #16]
 80081e0:	4413      	add	r3, r2
 80081e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80081e6:	461a      	mov	r2, r3
 80081e8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80081ec:	6093      	str	r3, [r2, #8]
 80081ee:	e0a2      	b.n	8008336 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 80081f0:	6879      	ldr	r1, [r7, #4]
 80081f2:	683a      	ldr	r2, [r7, #0]
 80081f4:	4613      	mov	r3, r2
 80081f6:	00db      	lsls	r3, r3, #3
 80081f8:	1a9b      	subs	r3, r3, r2
 80081fa:	009b      	lsls	r3, r3, #2
 80081fc:	440b      	add	r3, r1
 80081fe:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8008202:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8008204:	683b      	ldr	r3, [r7, #0]
 8008206:	0159      	lsls	r1, r3, #5
 8008208:	693b      	ldr	r3, [r7, #16]
 800820a:	440b      	add	r3, r1
 800820c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008210:	691b      	ldr	r3, [r3, #16]
 8008212:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8008216:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8008218:	6878      	ldr	r0, [r7, #4]
 800821a:	683a      	ldr	r2, [r7, #0]
 800821c:	4613      	mov	r3, r2
 800821e:	00db      	lsls	r3, r3, #3
 8008220:	1a9b      	subs	r3, r3, r2
 8008222:	009b      	lsls	r3, r3, #2
 8008224:	4403      	add	r3, r0
 8008226:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800822a:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 800822c:	6879      	ldr	r1, [r7, #4]
 800822e:	683a      	ldr	r2, [r7, #0]
 8008230:	4613      	mov	r3, r2
 8008232:	00db      	lsls	r3, r3, #3
 8008234:	1a9b      	subs	r3, r3, r2
 8008236:	009b      	lsls	r3, r3, #2
 8008238:	440b      	add	r3, r1
 800823a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800823e:	6819      	ldr	r1, [r3, #0]
 8008240:	6878      	ldr	r0, [r7, #4]
 8008242:	683a      	ldr	r2, [r7, #0]
 8008244:	4613      	mov	r3, r2
 8008246:	00db      	lsls	r3, r3, #3
 8008248:	1a9b      	subs	r3, r3, r2
 800824a:	009b      	lsls	r3, r3, #2
 800824c:	4403      	add	r3, r0
 800824e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	4419      	add	r1, r3
 8008256:	6878      	ldr	r0, [r7, #4]
 8008258:	683a      	ldr	r2, [r7, #0]
 800825a:	4613      	mov	r3, r2
 800825c:	00db      	lsls	r3, r3, #3
 800825e:	1a9b      	subs	r3, r3, r2
 8008260:	009b      	lsls	r3, r3, #2
 8008262:	4403      	add	r3, r0
 8008264:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8008268:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800826a:	683b      	ldr	r3, [r7, #0]
 800826c:	2b00      	cmp	r3, #0
 800826e:	d114      	bne.n	800829a <PCD_EP_OutXfrComplete_int+0x16a>
 8008270:	6879      	ldr	r1, [r7, #4]
 8008272:	683a      	ldr	r2, [r7, #0]
 8008274:	4613      	mov	r3, r2
 8008276:	00db      	lsls	r3, r3, #3
 8008278:	1a9b      	subs	r3, r3, r2
 800827a:	009b      	lsls	r3, r3, #2
 800827c:	440b      	add	r3, r1
 800827e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	2b00      	cmp	r3, #0
 8008286:	d108      	bne.n	800829a <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	6818      	ldr	r0, [r3, #0]
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8008292:	461a      	mov	r2, r3
 8008294:	2101      	movs	r1, #1
 8008296:	f002 ff4b 	bl	800b130 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800829a:	683b      	ldr	r3, [r7, #0]
 800829c:	b2db      	uxtb	r3, r3
 800829e:	4619      	mov	r1, r3
 80082a0:	6878      	ldr	r0, [r7, #4]
 80082a2:	f004 fde9 	bl	800ce78 <HAL_PCD_DataOutStageCallback>
 80082a6:	e046      	b.n	8008336 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	4a26      	ldr	r2, [pc, #152]	; (8008344 <PCD_EP_OutXfrComplete_int+0x214>)
 80082ac:	4293      	cmp	r3, r2
 80082ae:	d124      	bne.n	80082fa <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80082b0:	68bb      	ldr	r3, [r7, #8]
 80082b2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d00a      	beq.n	80082d0 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80082ba:	683b      	ldr	r3, [r7, #0]
 80082bc:	015a      	lsls	r2, r3, #5
 80082be:	693b      	ldr	r3, [r7, #16]
 80082c0:	4413      	add	r3, r2
 80082c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80082c6:	461a      	mov	r2, r3
 80082c8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80082cc:	6093      	str	r3, [r2, #8]
 80082ce:	e032      	b.n	8008336 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80082d0:	68bb      	ldr	r3, [r7, #8]
 80082d2:	f003 0320 	and.w	r3, r3, #32
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d008      	beq.n	80082ec <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80082da:	683b      	ldr	r3, [r7, #0]
 80082dc:	015a      	lsls	r2, r3, #5
 80082de:	693b      	ldr	r3, [r7, #16]
 80082e0:	4413      	add	r3, r2
 80082e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80082e6:	461a      	mov	r2, r3
 80082e8:	2320      	movs	r3, #32
 80082ea:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80082ec:	683b      	ldr	r3, [r7, #0]
 80082ee:	b2db      	uxtb	r3, r3
 80082f0:	4619      	mov	r1, r3
 80082f2:	6878      	ldr	r0, [r7, #4]
 80082f4:	f004 fdc0 	bl	800ce78 <HAL_PCD_DataOutStageCallback>
 80082f8:	e01d      	b.n	8008336 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80082fa:	683b      	ldr	r3, [r7, #0]
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	d114      	bne.n	800832a <PCD_EP_OutXfrComplete_int+0x1fa>
 8008300:	6879      	ldr	r1, [r7, #4]
 8008302:	683a      	ldr	r2, [r7, #0]
 8008304:	4613      	mov	r3, r2
 8008306:	00db      	lsls	r3, r3, #3
 8008308:	1a9b      	subs	r3, r3, r2
 800830a:	009b      	lsls	r3, r3, #2
 800830c:	440b      	add	r3, r1
 800830e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	2b00      	cmp	r3, #0
 8008316:	d108      	bne.n	800832a <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	6818      	ldr	r0, [r3, #0]
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8008322:	461a      	mov	r2, r3
 8008324:	2100      	movs	r1, #0
 8008326:	f002 ff03 	bl	800b130 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800832a:	683b      	ldr	r3, [r7, #0]
 800832c:	b2db      	uxtb	r3, r3
 800832e:	4619      	mov	r1, r3
 8008330:	6878      	ldr	r0, [r7, #4]
 8008332:	f004 fda1 	bl	800ce78 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8008336:	2300      	movs	r3, #0
}
 8008338:	4618      	mov	r0, r3
 800833a:	3718      	adds	r7, #24
 800833c:	46bd      	mov	sp, r7
 800833e:	bd80      	pop	{r7, pc}
 8008340:	4f54300a 	.word	0x4f54300a
 8008344:	4f54310a 	.word	0x4f54310a

08008348 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8008348:	b580      	push	{r7, lr}
 800834a:	b086      	sub	sp, #24
 800834c:	af00      	add	r7, sp, #0
 800834e:	6078      	str	r0, [r7, #4]
 8008350:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008358:	697b      	ldr	r3, [r7, #20]
 800835a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800835c:	697b      	ldr	r3, [r7, #20]
 800835e:	333c      	adds	r3, #60	; 0x3c
 8008360:	3304      	adds	r3, #4
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8008366:	683b      	ldr	r3, [r7, #0]
 8008368:	015a      	lsls	r2, r3, #5
 800836a:	693b      	ldr	r3, [r7, #16]
 800836c:	4413      	add	r3, r2
 800836e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008372:	689b      	ldr	r3, [r3, #8]
 8008374:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	4a15      	ldr	r2, [pc, #84]	; (80083d0 <PCD_EP_OutSetupPacket_int+0x88>)
 800837a:	4293      	cmp	r3, r2
 800837c:	d90e      	bls.n	800839c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800837e:	68bb      	ldr	r3, [r7, #8]
 8008380:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008384:	2b00      	cmp	r3, #0
 8008386:	d009      	beq.n	800839c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8008388:	683b      	ldr	r3, [r7, #0]
 800838a:	015a      	lsls	r2, r3, #5
 800838c:	693b      	ldr	r3, [r7, #16]
 800838e:	4413      	add	r3, r2
 8008390:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008394:	461a      	mov	r2, r3
 8008396:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800839a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800839c:	6878      	ldr	r0, [r7, #4]
 800839e:	f004 fd59 	bl	800ce54 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	4a0a      	ldr	r2, [pc, #40]	; (80083d0 <PCD_EP_OutSetupPacket_int+0x88>)
 80083a6:	4293      	cmp	r3, r2
 80083a8:	d90c      	bls.n	80083c4 <PCD_EP_OutSetupPacket_int+0x7c>
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	691b      	ldr	r3, [r3, #16]
 80083ae:	2b01      	cmp	r3, #1
 80083b0:	d108      	bne.n	80083c4 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	6818      	ldr	r0, [r3, #0]
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80083bc:	461a      	mov	r2, r3
 80083be:	2101      	movs	r1, #1
 80083c0:	f002 feb6 	bl	800b130 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80083c4:	2300      	movs	r3, #0
}
 80083c6:	4618      	mov	r0, r3
 80083c8:	3718      	adds	r7, #24
 80083ca:	46bd      	mov	sp, r7
 80083cc:	bd80      	pop	{r7, pc}
 80083ce:	bf00      	nop
 80083d0:	4f54300a 	.word	0x4f54300a

080083d4 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80083d4:	b480      	push	{r7}
 80083d6:	b085      	sub	sp, #20
 80083d8:	af00      	add	r7, sp, #0
 80083da:	6078      	str	r0, [r7, #4]
 80083dc:	460b      	mov	r3, r1
 80083de:	70fb      	strb	r3, [r7, #3]
 80083e0:	4613      	mov	r3, r2
 80083e2:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083ea:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80083ec:	78fb      	ldrb	r3, [r7, #3]
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	d107      	bne.n	8008402 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80083f2:	883b      	ldrh	r3, [r7, #0]
 80083f4:	0419      	lsls	r1, r3, #16
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	68ba      	ldr	r2, [r7, #8]
 80083fc:	430a      	orrs	r2, r1
 80083fe:	629a      	str	r2, [r3, #40]	; 0x28
 8008400:	e028      	b.n	8008454 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008408:	0c1b      	lsrs	r3, r3, #16
 800840a:	68ba      	ldr	r2, [r7, #8]
 800840c:	4413      	add	r3, r2
 800840e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8008410:	2300      	movs	r3, #0
 8008412:	73fb      	strb	r3, [r7, #15]
 8008414:	e00d      	b.n	8008432 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	681a      	ldr	r2, [r3, #0]
 800841a:	7bfb      	ldrb	r3, [r7, #15]
 800841c:	3340      	adds	r3, #64	; 0x40
 800841e:	009b      	lsls	r3, r3, #2
 8008420:	4413      	add	r3, r2
 8008422:	685b      	ldr	r3, [r3, #4]
 8008424:	0c1b      	lsrs	r3, r3, #16
 8008426:	68ba      	ldr	r2, [r7, #8]
 8008428:	4413      	add	r3, r2
 800842a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800842c:	7bfb      	ldrb	r3, [r7, #15]
 800842e:	3301      	adds	r3, #1
 8008430:	73fb      	strb	r3, [r7, #15]
 8008432:	7bfa      	ldrb	r2, [r7, #15]
 8008434:	78fb      	ldrb	r3, [r7, #3]
 8008436:	3b01      	subs	r3, #1
 8008438:	429a      	cmp	r2, r3
 800843a:	d3ec      	bcc.n	8008416 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800843c:	883b      	ldrh	r3, [r7, #0]
 800843e:	0418      	lsls	r0, r3, #16
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	6819      	ldr	r1, [r3, #0]
 8008444:	78fb      	ldrb	r3, [r7, #3]
 8008446:	3b01      	subs	r3, #1
 8008448:	68ba      	ldr	r2, [r7, #8]
 800844a:	4302      	orrs	r2, r0
 800844c:	3340      	adds	r3, #64	; 0x40
 800844e:	009b      	lsls	r3, r3, #2
 8008450:	440b      	add	r3, r1
 8008452:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8008454:	2300      	movs	r3, #0
}
 8008456:	4618      	mov	r0, r3
 8008458:	3714      	adds	r7, #20
 800845a:	46bd      	mov	sp, r7
 800845c:	bc80      	pop	{r7}
 800845e:	4770      	bx	lr

08008460 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8008460:	b480      	push	{r7}
 8008462:	b083      	sub	sp, #12
 8008464:	af00      	add	r7, sp, #0
 8008466:	6078      	str	r0, [r7, #4]
 8008468:	460b      	mov	r3, r1
 800846a:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	887a      	ldrh	r2, [r7, #2]
 8008472:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8008474:	2300      	movs	r3, #0
}
 8008476:	4618      	mov	r0, r3
 8008478:	370c      	adds	r7, #12
 800847a:	46bd      	mov	sp, r7
 800847c:	bc80      	pop	{r7}
 800847e:	4770      	bx	lr

08008480 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008480:	b580      	push	{r7, lr}
 8008482:	b08a      	sub	sp, #40	; 0x28
 8008484:	af00      	add	r7, sp, #0
 8008486:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	2b00      	cmp	r3, #0
 800848c:	d101      	bne.n	8008492 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800848e:	2301      	movs	r3, #1
 8008490:	e237      	b.n	8008902 <HAL_RCC_OscConfig+0x482>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	f003 0301 	and.w	r3, r3, #1
 800849a:	2b00      	cmp	r3, #0
 800849c:	d050      	beq.n	8008540 <HAL_RCC_OscConfig+0xc0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800849e:	4ba3      	ldr	r3, [pc, #652]	; (800872c <HAL_RCC_OscConfig+0x2ac>)
 80084a0:	689b      	ldr	r3, [r3, #8]
 80084a2:	f003 030c 	and.w	r3, r3, #12
 80084a6:	2b04      	cmp	r3, #4
 80084a8:	d00c      	beq.n	80084c4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80084aa:	4ba0      	ldr	r3, [pc, #640]	; (800872c <HAL_RCC_OscConfig+0x2ac>)
 80084ac:	689b      	ldr	r3, [r3, #8]
 80084ae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80084b2:	2b08      	cmp	r3, #8
 80084b4:	d112      	bne.n	80084dc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80084b6:	4b9d      	ldr	r3, [pc, #628]	; (800872c <HAL_RCC_OscConfig+0x2ac>)
 80084b8:	685b      	ldr	r3, [r3, #4]
 80084ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80084be:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80084c2:	d10b      	bne.n	80084dc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80084c4:	4b99      	ldr	r3, [pc, #612]	; (800872c <HAL_RCC_OscConfig+0x2ac>)
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	d036      	beq.n	800853e <HAL_RCC_OscConfig+0xbe>
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	685b      	ldr	r3, [r3, #4]
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	d132      	bne.n	800853e <HAL_RCC_OscConfig+0xbe>
      {
        return HAL_ERROR;
 80084d8:	2301      	movs	r3, #1
 80084da:	e212      	b.n	8008902 <HAL_RCC_OscConfig+0x482>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	685a      	ldr	r2, [r3, #4]
 80084e0:	4b93      	ldr	r3, [pc, #588]	; (8008730 <HAL_RCC_OscConfig+0x2b0>)
 80084e2:	b2d2      	uxtb	r2, r2
 80084e4:	701a      	strb	r2, [r3, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	685b      	ldr	r3, [r3, #4]
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	d013      	beq.n	8008516 <HAL_RCC_OscConfig+0x96>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80084ee:	f7fc fe7d 	bl	80051ec <HAL_GetTick>
 80084f2:	6238      	str	r0, [r7, #32]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80084f4:	e008      	b.n	8008508 <HAL_RCC_OscConfig+0x88>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80084f6:	f7fc fe79 	bl	80051ec <HAL_GetTick>
 80084fa:	4602      	mov	r2, r0
 80084fc:	6a3b      	ldr	r3, [r7, #32]
 80084fe:	1ad3      	subs	r3, r2, r3
 8008500:	2b64      	cmp	r3, #100	; 0x64
 8008502:	d901      	bls.n	8008508 <HAL_RCC_OscConfig+0x88>
          {
            return HAL_TIMEOUT;
 8008504:	2303      	movs	r3, #3
 8008506:	e1fc      	b.n	8008902 <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008508:	4b88      	ldr	r3, [pc, #544]	; (800872c <HAL_RCC_OscConfig+0x2ac>)
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008510:	2b00      	cmp	r3, #0
 8008512:	d0f0      	beq.n	80084f6 <HAL_RCC_OscConfig+0x76>
 8008514:	e014      	b.n	8008540 <HAL_RCC_OscConfig+0xc0>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008516:	f7fc fe69 	bl	80051ec <HAL_GetTick>
 800851a:	6238      	str	r0, [r7, #32]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800851c:	e008      	b.n	8008530 <HAL_RCC_OscConfig+0xb0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800851e:	f7fc fe65 	bl	80051ec <HAL_GetTick>
 8008522:	4602      	mov	r2, r0
 8008524:	6a3b      	ldr	r3, [r7, #32]
 8008526:	1ad3      	subs	r3, r2, r3
 8008528:	2b64      	cmp	r3, #100	; 0x64
 800852a:	d901      	bls.n	8008530 <HAL_RCC_OscConfig+0xb0>
          {
            return HAL_TIMEOUT;
 800852c:	2303      	movs	r3, #3
 800852e:	e1e8      	b.n	8008902 <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008530:	4b7e      	ldr	r3, [pc, #504]	; (800872c <HAL_RCC_OscConfig+0x2ac>)
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008538:	2b00      	cmp	r3, #0
 800853a:	d1f0      	bne.n	800851e <HAL_RCC_OscConfig+0x9e>
 800853c:	e000      	b.n	8008540 <HAL_RCC_OscConfig+0xc0>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800853e:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	f003 0302 	and.w	r3, r3, #2
 8008548:	2b00      	cmp	r3, #0
 800854a:	d077      	beq.n	800863c <HAL_RCC_OscConfig+0x1bc>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800854c:	4b77      	ldr	r3, [pc, #476]	; (800872c <HAL_RCC_OscConfig+0x2ac>)
 800854e:	689b      	ldr	r3, [r3, #8]
 8008550:	f003 030c 	and.w	r3, r3, #12
 8008554:	2b00      	cmp	r3, #0
 8008556:	d00b      	beq.n	8008570 <HAL_RCC_OscConfig+0xf0>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008558:	4b74      	ldr	r3, [pc, #464]	; (800872c <HAL_RCC_OscConfig+0x2ac>)
 800855a:	689b      	ldr	r3, [r3, #8]
 800855c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8008560:	2b08      	cmp	r3, #8
 8008562:	d126      	bne.n	80085b2 <HAL_RCC_OscConfig+0x132>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008564:	4b71      	ldr	r3, [pc, #452]	; (800872c <HAL_RCC_OscConfig+0x2ac>)
 8008566:	685b      	ldr	r3, [r3, #4]
 8008568:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800856c:	2b00      	cmp	r3, #0
 800856e:	d120      	bne.n	80085b2 <HAL_RCC_OscConfig+0x132>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008570:	4b6e      	ldr	r3, [pc, #440]	; (800872c <HAL_RCC_OscConfig+0x2ac>)
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	f003 0302 	and.w	r3, r3, #2
 8008578:	2b00      	cmp	r3, #0
 800857a:	d005      	beq.n	8008588 <HAL_RCC_OscConfig+0x108>
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	68db      	ldr	r3, [r3, #12]
 8008580:	2b01      	cmp	r3, #1
 8008582:	d001      	beq.n	8008588 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8008584:	2301      	movs	r3, #1
 8008586:	e1bc      	b.n	8008902 <HAL_RCC_OscConfig+0x482>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008588:	4b68      	ldr	r3, [pc, #416]	; (800872c <HAL_RCC_OscConfig+0x2ac>)
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	691b      	ldr	r3, [r3, #16]
 8008594:	21f8      	movs	r1, #248	; 0xf8
 8008596:	61b9      	str	r1, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008598:	69b9      	ldr	r1, [r7, #24]
 800859a:	fa91 f1a1 	rbit	r1, r1
 800859e:	6179      	str	r1, [r7, #20]
  return result;
 80085a0:	6979      	ldr	r1, [r7, #20]
 80085a2:	fab1 f181 	clz	r1, r1
 80085a6:	b2c9      	uxtb	r1, r1
 80085a8:	408b      	lsls	r3, r1
 80085aa:	4960      	ldr	r1, [pc, #384]	; (800872c <HAL_RCC_OscConfig+0x2ac>)
 80085ac:	4313      	orrs	r3, r2
 80085ae:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80085b0:	e044      	b.n	800863c <HAL_RCC_OscConfig+0x1bc>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	68db      	ldr	r3, [r3, #12]
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	d02a      	beq.n	8008610 <HAL_RCC_OscConfig+0x190>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80085ba:	4b5e      	ldr	r3, [pc, #376]	; (8008734 <HAL_RCC_OscConfig+0x2b4>)
 80085bc:	2201      	movs	r2, #1
 80085be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80085c0:	f7fc fe14 	bl	80051ec <HAL_GetTick>
 80085c4:	6238      	str	r0, [r7, #32]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80085c6:	e008      	b.n	80085da <HAL_RCC_OscConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80085c8:	f7fc fe10 	bl	80051ec <HAL_GetTick>
 80085cc:	4602      	mov	r2, r0
 80085ce:	6a3b      	ldr	r3, [r7, #32]
 80085d0:	1ad3      	subs	r3, r2, r3
 80085d2:	2b02      	cmp	r3, #2
 80085d4:	d901      	bls.n	80085da <HAL_RCC_OscConfig+0x15a>
          {
            return HAL_TIMEOUT;
 80085d6:	2303      	movs	r3, #3
 80085d8:	e193      	b.n	8008902 <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80085da:	4b54      	ldr	r3, [pc, #336]	; (800872c <HAL_RCC_OscConfig+0x2ac>)
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	f003 0302 	and.w	r3, r3, #2
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	d0f0      	beq.n	80085c8 <HAL_RCC_OscConfig+0x148>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80085e6:	4b51      	ldr	r3, [pc, #324]	; (800872c <HAL_RCC_OscConfig+0x2ac>)
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	691b      	ldr	r3, [r3, #16]
 80085f2:	21f8      	movs	r1, #248	; 0xf8
 80085f4:	6139      	str	r1, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80085f6:	6939      	ldr	r1, [r7, #16]
 80085f8:	fa91 f1a1 	rbit	r1, r1
 80085fc:	60f9      	str	r1, [r7, #12]
  return result;
 80085fe:	68f9      	ldr	r1, [r7, #12]
 8008600:	fab1 f181 	clz	r1, r1
 8008604:	b2c9      	uxtb	r1, r1
 8008606:	408b      	lsls	r3, r1
 8008608:	4948      	ldr	r1, [pc, #288]	; (800872c <HAL_RCC_OscConfig+0x2ac>)
 800860a:	4313      	orrs	r3, r2
 800860c:	600b      	str	r3, [r1, #0]
 800860e:	e015      	b.n	800863c <HAL_RCC_OscConfig+0x1bc>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008610:	4b48      	ldr	r3, [pc, #288]	; (8008734 <HAL_RCC_OscConfig+0x2b4>)
 8008612:	2200      	movs	r2, #0
 8008614:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008616:	f7fc fde9 	bl	80051ec <HAL_GetTick>
 800861a:	6238      	str	r0, [r7, #32]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800861c:	e008      	b.n	8008630 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800861e:	f7fc fde5 	bl	80051ec <HAL_GetTick>
 8008622:	4602      	mov	r2, r0
 8008624:	6a3b      	ldr	r3, [r7, #32]
 8008626:	1ad3      	subs	r3, r2, r3
 8008628:	2b02      	cmp	r3, #2
 800862a:	d901      	bls.n	8008630 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 800862c:	2303      	movs	r3, #3
 800862e:	e168      	b.n	8008902 <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008630:	4b3e      	ldr	r3, [pc, #248]	; (800872c <HAL_RCC_OscConfig+0x2ac>)
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	f003 0302 	and.w	r3, r3, #2
 8008638:	2b00      	cmp	r3, #0
 800863a:	d1f0      	bne.n	800861e <HAL_RCC_OscConfig+0x19e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	f003 0308 	and.w	r3, r3, #8
 8008644:	2b00      	cmp	r3, #0
 8008646:	d030      	beq.n	80086aa <HAL_RCC_OscConfig+0x22a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	695b      	ldr	r3, [r3, #20]
 800864c:	2b00      	cmp	r3, #0
 800864e:	d016      	beq.n	800867e <HAL_RCC_OscConfig+0x1fe>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008650:	4b39      	ldr	r3, [pc, #228]	; (8008738 <HAL_RCC_OscConfig+0x2b8>)
 8008652:	2201      	movs	r2, #1
 8008654:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008656:	f7fc fdc9 	bl	80051ec <HAL_GetTick>
 800865a:	6238      	str	r0, [r7, #32]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800865c:	e008      	b.n	8008670 <HAL_RCC_OscConfig+0x1f0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800865e:	f7fc fdc5 	bl	80051ec <HAL_GetTick>
 8008662:	4602      	mov	r2, r0
 8008664:	6a3b      	ldr	r3, [r7, #32]
 8008666:	1ad3      	subs	r3, r2, r3
 8008668:	2b02      	cmp	r3, #2
 800866a:	d901      	bls.n	8008670 <HAL_RCC_OscConfig+0x1f0>
        {
          return HAL_TIMEOUT;
 800866c:	2303      	movs	r3, #3
 800866e:	e148      	b.n	8008902 <HAL_RCC_OscConfig+0x482>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008670:	4b2e      	ldr	r3, [pc, #184]	; (800872c <HAL_RCC_OscConfig+0x2ac>)
 8008672:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008674:	f003 0302 	and.w	r3, r3, #2
 8008678:	2b00      	cmp	r3, #0
 800867a:	d0f0      	beq.n	800865e <HAL_RCC_OscConfig+0x1de>
 800867c:	e015      	b.n	80086aa <HAL_RCC_OscConfig+0x22a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800867e:	4b2e      	ldr	r3, [pc, #184]	; (8008738 <HAL_RCC_OscConfig+0x2b8>)
 8008680:	2200      	movs	r2, #0
 8008682:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008684:	f7fc fdb2 	bl	80051ec <HAL_GetTick>
 8008688:	6238      	str	r0, [r7, #32]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800868a:	e008      	b.n	800869e <HAL_RCC_OscConfig+0x21e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800868c:	f7fc fdae 	bl	80051ec <HAL_GetTick>
 8008690:	4602      	mov	r2, r0
 8008692:	6a3b      	ldr	r3, [r7, #32]
 8008694:	1ad3      	subs	r3, r2, r3
 8008696:	2b02      	cmp	r3, #2
 8008698:	d901      	bls.n	800869e <HAL_RCC_OscConfig+0x21e>
        {
          return HAL_TIMEOUT;
 800869a:	2303      	movs	r3, #3
 800869c:	e131      	b.n	8008902 <HAL_RCC_OscConfig+0x482>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800869e:	4b23      	ldr	r3, [pc, #140]	; (800872c <HAL_RCC_OscConfig+0x2ac>)
 80086a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80086a2:	f003 0302 	and.w	r3, r3, #2
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	d1f0      	bne.n	800868c <HAL_RCC_OscConfig+0x20c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	f003 0304 	and.w	r3, r3, #4
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	f000 8088 	beq.w	80087c8 <HAL_RCC_OscConfig+0x348>
  {
    FlagStatus       pwrclkchanged = RESET;
 80086b8:	2300      	movs	r3, #0
 80086ba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80086be:	4b1b      	ldr	r3, [pc, #108]	; (800872c <HAL_RCC_OscConfig+0x2ac>)
 80086c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	d110      	bne.n	80086ec <HAL_RCC_OscConfig+0x26c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80086ca:	2300      	movs	r3, #0
 80086cc:	60bb      	str	r3, [r7, #8]
 80086ce:	4b17      	ldr	r3, [pc, #92]	; (800872c <HAL_RCC_OscConfig+0x2ac>)
 80086d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086d2:	4a16      	ldr	r2, [pc, #88]	; (800872c <HAL_RCC_OscConfig+0x2ac>)
 80086d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80086d8:	6413      	str	r3, [r2, #64]	; 0x40
 80086da:	4b14      	ldr	r3, [pc, #80]	; (800872c <HAL_RCC_OscConfig+0x2ac>)
 80086dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80086e2:	60bb      	str	r3, [r7, #8]
 80086e4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80086e6:	2301      	movs	r3, #1
 80086e8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80086ec:	4b13      	ldr	r3, [pc, #76]	; (800873c <HAL_RCC_OscConfig+0x2bc>)
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	4a12      	ldr	r2, [pc, #72]	; (800873c <HAL_RCC_OscConfig+0x2bc>)
 80086f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80086f6:	6013      	str	r3, [r2, #0]

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80086f8:	4b10      	ldr	r3, [pc, #64]	; (800873c <HAL_RCC_OscConfig+0x2bc>)
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008700:	2b00      	cmp	r3, #0
 8008702:	d123      	bne.n	800874c <HAL_RCC_OscConfig+0x2cc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008704:	4b0d      	ldr	r3, [pc, #52]	; (800873c <HAL_RCC_OscConfig+0x2bc>)
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	4a0c      	ldr	r2, [pc, #48]	; (800873c <HAL_RCC_OscConfig+0x2bc>)
 800870a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800870e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008710:	f7fc fd6c 	bl	80051ec <HAL_GetTick>
 8008714:	6238      	str	r0, [r7, #32]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008716:	e013      	b.n	8008740 <HAL_RCC_OscConfig+0x2c0>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008718:	f7fc fd68 	bl	80051ec <HAL_GetTick>
 800871c:	4602      	mov	r2, r0
 800871e:	6a3b      	ldr	r3, [r7, #32]
 8008720:	1ad3      	subs	r3, r2, r3
 8008722:	2b02      	cmp	r3, #2
 8008724:	d90c      	bls.n	8008740 <HAL_RCC_OscConfig+0x2c0>
        {
          return HAL_TIMEOUT;
 8008726:	2303      	movs	r3, #3
 8008728:	e0eb      	b.n	8008902 <HAL_RCC_OscConfig+0x482>
 800872a:	bf00      	nop
 800872c:	40023800 	.word	0x40023800
 8008730:	40023802 	.word	0x40023802
 8008734:	42470000 	.word	0x42470000
 8008738:	42470e80 	.word	0x42470e80
 800873c:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008740:	4b72      	ldr	r3, [pc, #456]	; (800890c <HAL_RCC_OscConfig+0x48c>)
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008748:	2b00      	cmp	r3, #0
 800874a:	d0e5      	beq.n	8008718 <HAL_RCC_OscConfig+0x298>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	689a      	ldr	r2, [r3, #8]
 8008750:	4b6f      	ldr	r3, [pc, #444]	; (8008910 <HAL_RCC_OscConfig+0x490>)
 8008752:	b2d2      	uxtb	r2, r2
 8008754:	701a      	strb	r2, [r3, #0]
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	689b      	ldr	r3, [r3, #8]
 800875a:	2b00      	cmp	r3, #0
 800875c:	d015      	beq.n	800878a <HAL_RCC_OscConfig+0x30a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800875e:	f7fc fd45 	bl	80051ec <HAL_GetTick>
 8008762:	6238      	str	r0, [r7, #32]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008764:	e00a      	b.n	800877c <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008766:	f7fc fd41 	bl	80051ec <HAL_GetTick>
 800876a:	4602      	mov	r2, r0
 800876c:	6a3b      	ldr	r3, [r7, #32]
 800876e:	1ad3      	subs	r3, r2, r3
 8008770:	f241 3288 	movw	r2, #5000	; 0x1388
 8008774:	4293      	cmp	r3, r2
 8008776:	d901      	bls.n	800877c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8008778:	2303      	movs	r3, #3
 800877a:	e0c2      	b.n	8008902 <HAL_RCC_OscConfig+0x482>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800877c:	4b65      	ldr	r3, [pc, #404]	; (8008914 <HAL_RCC_OscConfig+0x494>)
 800877e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008780:	f003 0302 	and.w	r3, r3, #2
 8008784:	2b00      	cmp	r3, #0
 8008786:	d0ee      	beq.n	8008766 <HAL_RCC_OscConfig+0x2e6>
 8008788:	e014      	b.n	80087b4 <HAL_RCC_OscConfig+0x334>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800878a:	f7fc fd2f 	bl	80051ec <HAL_GetTick>
 800878e:	6238      	str	r0, [r7, #32]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008790:	e00a      	b.n	80087a8 <HAL_RCC_OscConfig+0x328>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008792:	f7fc fd2b 	bl	80051ec <HAL_GetTick>
 8008796:	4602      	mov	r2, r0
 8008798:	6a3b      	ldr	r3, [r7, #32]
 800879a:	1ad3      	subs	r3, r2, r3
 800879c:	f241 3288 	movw	r2, #5000	; 0x1388
 80087a0:	4293      	cmp	r3, r2
 80087a2:	d901      	bls.n	80087a8 <HAL_RCC_OscConfig+0x328>
        {
          return HAL_TIMEOUT;
 80087a4:	2303      	movs	r3, #3
 80087a6:	e0ac      	b.n	8008902 <HAL_RCC_OscConfig+0x482>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80087a8:	4b5a      	ldr	r3, [pc, #360]	; (8008914 <HAL_RCC_OscConfig+0x494>)
 80087aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80087ac:	f003 0302 	and.w	r3, r3, #2
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	d1ee      	bne.n	8008792 <HAL_RCC_OscConfig+0x312>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80087b4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80087b8:	2b01      	cmp	r3, #1
 80087ba:	d105      	bne.n	80087c8 <HAL_RCC_OscConfig+0x348>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80087bc:	4b55      	ldr	r3, [pc, #340]	; (8008914 <HAL_RCC_OscConfig+0x494>)
 80087be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087c0:	4a54      	ldr	r2, [pc, #336]	; (8008914 <HAL_RCC_OscConfig+0x494>)
 80087c2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80087c6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	699b      	ldr	r3, [r3, #24]
 80087cc:	2b00      	cmp	r3, #0
 80087ce:	f000 8097 	beq.w	8008900 <HAL_RCC_OscConfig+0x480>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80087d2:	4b50      	ldr	r3, [pc, #320]	; (8008914 <HAL_RCC_OscConfig+0x494>)
 80087d4:	689b      	ldr	r3, [r3, #8]
 80087d6:	f003 030c 	and.w	r3, r3, #12
 80087da:	2b08      	cmp	r3, #8
 80087dc:	d061      	beq.n	80088a2 <HAL_RCC_OscConfig+0x422>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	699b      	ldr	r3, [r3, #24]
 80087e2:	2b02      	cmp	r3, #2
 80087e4:	d146      	bne.n	8008874 <HAL_RCC_OscConfig+0x3f4>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80087e6:	4b4c      	ldr	r3, [pc, #304]	; (8008918 <HAL_RCC_OscConfig+0x498>)
 80087e8:	2200      	movs	r2, #0
 80087ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80087ec:	f7fc fcfe 	bl	80051ec <HAL_GetTick>
 80087f0:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80087f2:	e008      	b.n	8008806 <HAL_RCC_OscConfig+0x386>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80087f4:	f7fc fcfa 	bl	80051ec <HAL_GetTick>
 80087f8:	4602      	mov	r2, r0
 80087fa:	6a3b      	ldr	r3, [r7, #32]
 80087fc:	1ad3      	subs	r3, r2, r3
 80087fe:	2b64      	cmp	r3, #100	; 0x64
 8008800:	d901      	bls.n	8008806 <HAL_RCC_OscConfig+0x386>
          {
            return HAL_TIMEOUT;
 8008802:	2303      	movs	r3, #3
 8008804:	e07d      	b.n	8008902 <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008806:	4b43      	ldr	r3, [pc, #268]	; (8008914 <HAL_RCC_OscConfig+0x494>)
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800880e:	2b00      	cmp	r3, #0
 8008810:	d1f0      	bne.n	80087f4 <HAL_RCC_OscConfig+0x374>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008812:	4b40      	ldr	r3, [pc, #256]	; (8008914 <HAL_RCC_OscConfig+0x494>)
 8008814:	685a      	ldr	r2, [r3, #4]
 8008816:	4b41      	ldr	r3, [pc, #260]	; (800891c <HAL_RCC_OscConfig+0x49c>)
 8008818:	4013      	ands	r3, r2
 800881a:	687a      	ldr	r2, [r7, #4]
 800881c:	69d1      	ldr	r1, [r2, #28]
 800881e:	687a      	ldr	r2, [r7, #4]
 8008820:	6a12      	ldr	r2, [r2, #32]
 8008822:	4311      	orrs	r1, r2
 8008824:	687a      	ldr	r2, [r7, #4]
 8008826:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8008828:	0192      	lsls	r2, r2, #6
 800882a:	4311      	orrs	r1, r2
 800882c:	687a      	ldr	r2, [r7, #4]
 800882e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8008830:	0612      	lsls	r2, r2, #24
 8008832:	4311      	orrs	r1, r2
 8008834:	687a      	ldr	r2, [r7, #4]
 8008836:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8008838:	0852      	lsrs	r2, r2, #1
 800883a:	3a01      	subs	r2, #1
 800883c:	0412      	lsls	r2, r2, #16
 800883e:	430a      	orrs	r2, r1
 8008840:	4934      	ldr	r1, [pc, #208]	; (8008914 <HAL_RCC_OscConfig+0x494>)
 8008842:	4313      	orrs	r3, r2
 8008844:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008846:	4b34      	ldr	r3, [pc, #208]	; (8008918 <HAL_RCC_OscConfig+0x498>)
 8008848:	2201      	movs	r2, #1
 800884a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800884c:	f7fc fcce 	bl	80051ec <HAL_GetTick>
 8008850:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008852:	e008      	b.n	8008866 <HAL_RCC_OscConfig+0x3e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008854:	f7fc fcca 	bl	80051ec <HAL_GetTick>
 8008858:	4602      	mov	r2, r0
 800885a:	6a3b      	ldr	r3, [r7, #32]
 800885c:	1ad3      	subs	r3, r2, r3
 800885e:	2b64      	cmp	r3, #100	; 0x64
 8008860:	d901      	bls.n	8008866 <HAL_RCC_OscConfig+0x3e6>
          {
            return HAL_TIMEOUT;
 8008862:	2303      	movs	r3, #3
 8008864:	e04d      	b.n	8008902 <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008866:	4b2b      	ldr	r3, [pc, #172]	; (8008914 <HAL_RCC_OscConfig+0x494>)
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800886e:	2b00      	cmp	r3, #0
 8008870:	d0f0      	beq.n	8008854 <HAL_RCC_OscConfig+0x3d4>
 8008872:	e045      	b.n	8008900 <HAL_RCC_OscConfig+0x480>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008874:	4b28      	ldr	r3, [pc, #160]	; (8008918 <HAL_RCC_OscConfig+0x498>)
 8008876:	2200      	movs	r2, #0
 8008878:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800887a:	f7fc fcb7 	bl	80051ec <HAL_GetTick>
 800887e:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008880:	e008      	b.n	8008894 <HAL_RCC_OscConfig+0x414>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008882:	f7fc fcb3 	bl	80051ec <HAL_GetTick>
 8008886:	4602      	mov	r2, r0
 8008888:	6a3b      	ldr	r3, [r7, #32]
 800888a:	1ad3      	subs	r3, r2, r3
 800888c:	2b64      	cmp	r3, #100	; 0x64
 800888e:	d901      	bls.n	8008894 <HAL_RCC_OscConfig+0x414>
          {
            return HAL_TIMEOUT;
 8008890:	2303      	movs	r3, #3
 8008892:	e036      	b.n	8008902 <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008894:	4b1f      	ldr	r3, [pc, #124]	; (8008914 <HAL_RCC_OscConfig+0x494>)
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800889c:	2b00      	cmp	r3, #0
 800889e:	d1f0      	bne.n	8008882 <HAL_RCC_OscConfig+0x402>
 80088a0:	e02e      	b.n	8008900 <HAL_RCC_OscConfig+0x480>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	699b      	ldr	r3, [r3, #24]
 80088a6:	2b01      	cmp	r3, #1
 80088a8:	d101      	bne.n	80088ae <HAL_RCC_OscConfig+0x42e>
      {
        return HAL_ERROR;
 80088aa:	2301      	movs	r3, #1
 80088ac:	e029      	b.n	8008902 <HAL_RCC_OscConfig+0x482>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        uint32_t pllcfgr = RCC->PLLCFGR;
 80088ae:	4b19      	ldr	r3, [pc, #100]	; (8008914 <HAL_RCC_OscConfig+0x494>)
 80088b0:	685b      	ldr	r3, [r3, #4]
 80088b2:	61fb      	str	r3, [r7, #28]
      
        if((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80088b4:	69fb      	ldr	r3, [r7, #28]
 80088b6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	69db      	ldr	r3, [r3, #28]
 80088be:	429a      	cmp	r2, r3
 80088c0:	d11c      	bne.n	80088fc <HAL_RCC_OscConfig+0x47c>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80088c2:	69fb      	ldr	r3, [r7, #28]
 80088c4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80088cc:	429a      	cmp	r2, r3
 80088ce:	d115      	bne.n	80088fc <HAL_RCC_OscConfig+0x47c>
           ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80088d0:	69fb      	ldr	r3, [r7, #28]
 80088d2:	099b      	lsrs	r3, r3, #6
 80088d4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80088dc:	429a      	cmp	r2, r3
 80088de:	d10d      	bne.n	80088fc <HAL_RCC_OscConfig+0x47c>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80088e0:	69fb      	ldr	r3, [r7, #28]
 80088e2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80088ea:	429a      	cmp	r2, r3
 80088ec:	d106      	bne.n	80088fc <HAL_RCC_OscConfig+0x47c>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80088ee:	69fb      	ldr	r3, [r7, #28]
 80088f0:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80088f8:	429a      	cmp	r2, r3
 80088fa:	d001      	beq.n	8008900 <HAL_RCC_OscConfig+0x480>
        {
          return HAL_ERROR;
 80088fc:	2301      	movs	r3, #1
 80088fe:	e000      	b.n	8008902 <HAL_RCC_OscConfig+0x482>
        }
      }
    }
  }
  return HAL_OK;
 8008900:	2300      	movs	r3, #0
}
 8008902:	4618      	mov	r0, r3
 8008904:	3728      	adds	r7, #40	; 0x28
 8008906:	46bd      	mov	sp, r7
 8008908:	bd80      	pop	{r7, pc}
 800890a:	bf00      	nop
 800890c:	40007000 	.word	0x40007000
 8008910:	40023870 	.word	0x40023870
 8008914:	40023800 	.word	0x40023800
 8008918:	42470060 	.word	0x42470060
 800891c:	f0bc8000 	.word	0xf0bc8000

08008920 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008920:	b580      	push	{r7, lr}
 8008922:	b086      	sub	sp, #24
 8008924:	af00      	add	r7, sp, #0
 8008926:	6078      	str	r0, [r7, #4]
 8008928:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	2b00      	cmp	r3, #0
 800892e:	d101      	bne.n	8008934 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008930:	2301      	movs	r3, #1
 8008932:	e0d2      	b.n	8008ada <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008934:	4b6b      	ldr	r3, [pc, #428]	; (8008ae4 <HAL_RCC_ClockConfig+0x1c4>)
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	f003 030f 	and.w	r3, r3, #15
 800893c:	683a      	ldr	r2, [r7, #0]
 800893e:	429a      	cmp	r2, r3
 8008940:	d90c      	bls.n	800895c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008942:	4b68      	ldr	r3, [pc, #416]	; (8008ae4 <HAL_RCC_ClockConfig+0x1c4>)
 8008944:	683a      	ldr	r2, [r7, #0]
 8008946:	b2d2      	uxtb	r2, r2
 8008948:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800894a:	4b66      	ldr	r3, [pc, #408]	; (8008ae4 <HAL_RCC_ClockConfig+0x1c4>)
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	f003 030f 	and.w	r3, r3, #15
 8008952:	683a      	ldr	r2, [r7, #0]
 8008954:	429a      	cmp	r2, r3
 8008956:	d001      	beq.n	800895c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8008958:	2301      	movs	r3, #1
 800895a:	e0be      	b.n	8008ada <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	f003 0302 	and.w	r3, r3, #2
 8008964:	2b00      	cmp	r3, #0
 8008966:	d020      	beq.n	80089aa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	f003 0304 	and.w	r3, r3, #4
 8008970:	2b00      	cmp	r3, #0
 8008972:	d005      	beq.n	8008980 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008974:	4b5c      	ldr	r3, [pc, #368]	; (8008ae8 <HAL_RCC_ClockConfig+0x1c8>)
 8008976:	689b      	ldr	r3, [r3, #8]
 8008978:	4a5b      	ldr	r2, [pc, #364]	; (8008ae8 <HAL_RCC_ClockConfig+0x1c8>)
 800897a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800897e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	f003 0308 	and.w	r3, r3, #8
 8008988:	2b00      	cmp	r3, #0
 800898a:	d005      	beq.n	8008998 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3U));
 800898c:	4b56      	ldr	r3, [pc, #344]	; (8008ae8 <HAL_RCC_ClockConfig+0x1c8>)
 800898e:	689b      	ldr	r3, [r3, #8]
 8008990:	4a55      	ldr	r2, [pc, #340]	; (8008ae8 <HAL_RCC_ClockConfig+0x1c8>)
 8008992:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8008996:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008998:	4b53      	ldr	r3, [pc, #332]	; (8008ae8 <HAL_RCC_ClockConfig+0x1c8>)
 800899a:	689b      	ldr	r3, [r3, #8]
 800899c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	689b      	ldr	r3, [r3, #8]
 80089a4:	4950      	ldr	r1, [pc, #320]	; (8008ae8 <HAL_RCC_ClockConfig+0x1c8>)
 80089a6:	4313      	orrs	r3, r2
 80089a8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	f003 0301 	and.w	r3, r3, #1
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	d040      	beq.n	8008a38 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	685b      	ldr	r3, [r3, #4]
 80089ba:	2b01      	cmp	r3, #1
 80089bc:	d107      	bne.n	80089ce <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80089be:	4b4a      	ldr	r3, [pc, #296]	; (8008ae8 <HAL_RCC_ClockConfig+0x1c8>)
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	d115      	bne.n	80089f6 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80089ca:	2301      	movs	r3, #1
 80089cc:	e085      	b.n	8008ada <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	685b      	ldr	r3, [r3, #4]
 80089d2:	2b02      	cmp	r3, #2
 80089d4:	d107      	bne.n	80089e6 <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80089d6:	4b44      	ldr	r3, [pc, #272]	; (8008ae8 <HAL_RCC_ClockConfig+0x1c8>)
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80089de:	2b00      	cmp	r3, #0
 80089e0:	d109      	bne.n	80089f6 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80089e2:	2301      	movs	r3, #1
 80089e4:	e079      	b.n	8008ada <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80089e6:	4b40      	ldr	r3, [pc, #256]	; (8008ae8 <HAL_RCC_ClockConfig+0x1c8>)
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	f003 0302 	and.w	r3, r3, #2
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	d101      	bne.n	80089f6 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80089f2:	2301      	movs	r3, #1
 80089f4:	e071      	b.n	8008ada <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80089f6:	4b3c      	ldr	r3, [pc, #240]	; (8008ae8 <HAL_RCC_ClockConfig+0x1c8>)
 80089f8:	689b      	ldr	r3, [r3, #8]
 80089fa:	f023 0203 	bic.w	r2, r3, #3
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	685b      	ldr	r3, [r3, #4]
 8008a02:	4939      	ldr	r1, [pc, #228]	; (8008ae8 <HAL_RCC_ClockConfig+0x1c8>)
 8008a04:	4313      	orrs	r3, r2
 8008a06:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008a08:	f7fc fbf0 	bl	80051ec <HAL_GetTick>
 8008a0c:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008a0e:	e00a      	b.n	8008a26 <HAL_RCC_ClockConfig+0x106>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008a10:	f7fc fbec 	bl	80051ec <HAL_GetTick>
 8008a14:	4602      	mov	r2, r0
 8008a16:	697b      	ldr	r3, [r7, #20]
 8008a18:	1ad3      	subs	r3, r2, r3
 8008a1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8008a1e:	4293      	cmp	r3, r2
 8008a20:	d901      	bls.n	8008a26 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8008a22:	2303      	movs	r3, #3
 8008a24:	e059      	b.n	8008ada <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008a26:	4b30      	ldr	r3, [pc, #192]	; (8008ae8 <HAL_RCC_ClockConfig+0x1c8>)
 8008a28:	689b      	ldr	r3, [r3, #8]
 8008a2a:	f003 020c 	and.w	r2, r3, #12
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	685b      	ldr	r3, [r3, #4]
 8008a32:	009b      	lsls	r3, r3, #2
 8008a34:	429a      	cmp	r2, r3
 8008a36:	d1eb      	bne.n	8008a10 <HAL_RCC_ClockConfig+0xf0>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008a38:	4b2a      	ldr	r3, [pc, #168]	; (8008ae4 <HAL_RCC_ClockConfig+0x1c4>)
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	f003 030f 	and.w	r3, r3, #15
 8008a40:	683a      	ldr	r2, [r7, #0]
 8008a42:	429a      	cmp	r2, r3
 8008a44:	d20c      	bcs.n	8008a60 <HAL_RCC_ClockConfig+0x140>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008a46:	4b27      	ldr	r3, [pc, #156]	; (8008ae4 <HAL_RCC_ClockConfig+0x1c4>)
 8008a48:	683a      	ldr	r2, [r7, #0]
 8008a4a:	b2d2      	uxtb	r2, r2
 8008a4c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008a4e:	4b25      	ldr	r3, [pc, #148]	; (8008ae4 <HAL_RCC_ClockConfig+0x1c4>)
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	f003 030f 	and.w	r3, r3, #15
 8008a56:	683a      	ldr	r2, [r7, #0]
 8008a58:	429a      	cmp	r2, r3
 8008a5a:	d001      	beq.n	8008a60 <HAL_RCC_ClockConfig+0x140>
    {
      return HAL_ERROR;
 8008a5c:	2301      	movs	r3, #1
 8008a5e:	e03c      	b.n	8008ada <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	f003 0304 	and.w	r3, r3, #4
 8008a68:	2b00      	cmp	r3, #0
 8008a6a:	d008      	beq.n	8008a7e <HAL_RCC_ClockConfig+0x15e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008a6c:	4b1e      	ldr	r3, [pc, #120]	; (8008ae8 <HAL_RCC_ClockConfig+0x1c8>)
 8008a6e:	689b      	ldr	r3, [r3, #8]
 8008a70:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	68db      	ldr	r3, [r3, #12]
 8008a78:	491b      	ldr	r1, [pc, #108]	; (8008ae8 <HAL_RCC_ClockConfig+0x1c8>)
 8008a7a:	4313      	orrs	r3, r2
 8008a7c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	f003 0308 	and.w	r3, r3, #8
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	d009      	beq.n	8008a9e <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008a8a:	4b17      	ldr	r3, [pc, #92]	; (8008ae8 <HAL_RCC_ClockConfig+0x1c8>)
 8008a8c:	689b      	ldr	r3, [r3, #8]
 8008a8e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	691b      	ldr	r3, [r3, #16]
 8008a96:	00db      	lsls	r3, r3, #3
 8008a98:	4913      	ldr	r1, [pc, #76]	; (8008ae8 <HAL_RCC_ClockConfig+0x1c8>)
 8008a9a:	4313      	orrs	r3, r2
 8008a9c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 8008a9e:	f000 f837 	bl	8008b10 <HAL_RCC_GetSysClockFreq>
 8008aa2:	4601      	mov	r1, r0
 8008aa4:	4b10      	ldr	r3, [pc, #64]	; (8008ae8 <HAL_RCC_ClockConfig+0x1c8>)
 8008aa6:	689b      	ldr	r3, [r3, #8]
 8008aa8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008aac:	22f0      	movs	r2, #240	; 0xf0
 8008aae:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008ab0:	693a      	ldr	r2, [r7, #16]
 8008ab2:	fa92 f2a2 	rbit	r2, r2
 8008ab6:	60fa      	str	r2, [r7, #12]
  return result;
 8008ab8:	68fa      	ldr	r2, [r7, #12]
 8008aba:	fab2 f282 	clz	r2, r2
 8008abe:	b2d2      	uxtb	r2, r2
 8008ac0:	40d3      	lsrs	r3, r2
 8008ac2:	4a0a      	ldr	r2, [pc, #40]	; (8008aec <HAL_RCC_ClockConfig+0x1cc>)
 8008ac4:	5cd3      	ldrb	r3, [r2, r3]
 8008ac6:	fa21 f303 	lsr.w	r3, r1, r3
 8008aca:	4a09      	ldr	r2, [pc, #36]	; (8008af0 <HAL_RCC_ClockConfig+0x1d0>)
 8008acc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8008ace:	4b09      	ldr	r3, [pc, #36]	; (8008af4 <HAL_RCC_ClockConfig+0x1d4>)
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	4618      	mov	r0, r3
 8008ad4:	f7fc fb48 	bl	8005168 <HAL_InitTick>

  return HAL_OK;
 8008ad8:	2300      	movs	r3, #0
}
 8008ada:	4618      	mov	r0, r3
 8008adc:	3718      	adds	r7, #24
 8008ade:	46bd      	mov	sp, r7
 8008ae0:	bd80      	pop	{r7, pc}
 8008ae2:	bf00      	nop
 8008ae4:	40023c00 	.word	0x40023c00
 8008ae8:	40023800 	.word	0x40023800
 8008aec:	08013008 	.word	0x08013008
 8008af0:	20000024 	.word	0x20000024
 8008af4:	20000028 	.word	0x20000028

08008af8 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M3 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8008af8:	b480      	push	{r7}
 8008afa:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 8008afc:	4b03      	ldr	r3, [pc, #12]	; (8008b0c <HAL_RCC_EnableCSS+0x14>)
 8008afe:	2201      	movs	r2, #1
 8008b00:	601a      	str	r2, [r3, #0]
}
 8008b02:	bf00      	nop
 8008b04:	46bd      	mov	sp, r7
 8008b06:	bc80      	pop	{r7}
 8008b08:	4770      	bx	lr
 8008b0a:	bf00      	nop
 8008b0c:	4247004c 	.word	0x4247004c

08008b10 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008b10:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8008b14:	b084      	sub	sp, #16
 8008b16:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8008b18:	2300      	movs	r3, #0
 8008b1a:	607b      	str	r3, [r7, #4]
 8008b1c:	2300      	movs	r3, #0
 8008b1e:	60fb      	str	r3, [r7, #12]
 8008b20:	2300      	movs	r3, #0
 8008b22:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8008b24:	2300      	movs	r3, #0
 8008b26:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008b28:	4b67      	ldr	r3, [pc, #412]	; (8008cc8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8008b2a:	689b      	ldr	r3, [r3, #8]
 8008b2c:	f003 030c 	and.w	r3, r3, #12
 8008b30:	2b08      	cmp	r3, #8
 8008b32:	d00d      	beq.n	8008b50 <HAL_RCC_GetSysClockFreq+0x40>
 8008b34:	2b08      	cmp	r3, #8
 8008b36:	f200 80bd 	bhi.w	8008cb4 <HAL_RCC_GetSysClockFreq+0x1a4>
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	d002      	beq.n	8008b44 <HAL_RCC_GetSysClockFreq+0x34>
 8008b3e:	2b04      	cmp	r3, #4
 8008b40:	d003      	beq.n	8008b4a <HAL_RCC_GetSysClockFreq+0x3a>
 8008b42:	e0b7      	b.n	8008cb4 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008b44:	4b61      	ldr	r3, [pc, #388]	; (8008ccc <HAL_RCC_GetSysClockFreq+0x1bc>)
 8008b46:	60bb      	str	r3, [r7, #8]
       break;
 8008b48:	e0b7      	b.n	8008cba <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8008b4a:	4b60      	ldr	r3, [pc, #384]	; (8008ccc <HAL_RCC_GetSysClockFreq+0x1bc>)
 8008b4c:	60bb      	str	r3, [r7, #8]
      break;
 8008b4e:	e0b4      	b.n	8008cba <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008b50:	4b5d      	ldr	r3, [pc, #372]	; (8008cc8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8008b52:	685b      	ldr	r3, [r3, #4]
 8008b54:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008b58:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8008b5a:	4b5b      	ldr	r3, [pc, #364]	; (8008cc8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8008b5c:	685b      	ldr	r3, [r3, #4]
 8008b5e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	d04d      	beq.n	8008c02 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008b66:	4b58      	ldr	r3, [pc, #352]	; (8008cc8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8008b68:	685b      	ldr	r3, [r3, #4]
 8008b6a:	099b      	lsrs	r3, r3, #6
 8008b6c:	461a      	mov	r2, r3
 8008b6e:	f04f 0300 	mov.w	r3, #0
 8008b72:	f240 10ff 	movw	r0, #511	; 0x1ff
 8008b76:	f04f 0100 	mov.w	r1, #0
 8008b7a:	ea02 0800 	and.w	r8, r2, r0
 8008b7e:	ea03 0901 	and.w	r9, r3, r1
 8008b82:	4640      	mov	r0, r8
 8008b84:	4649      	mov	r1, r9
 8008b86:	f04f 0200 	mov.w	r2, #0
 8008b8a:	f04f 0300 	mov.w	r3, #0
 8008b8e:	014b      	lsls	r3, r1, #5
 8008b90:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8008b94:	0142      	lsls	r2, r0, #5
 8008b96:	4610      	mov	r0, r2
 8008b98:	4619      	mov	r1, r3
 8008b9a:	ebb0 0008 	subs.w	r0, r0, r8
 8008b9e:	eb61 0109 	sbc.w	r1, r1, r9
 8008ba2:	f04f 0200 	mov.w	r2, #0
 8008ba6:	f04f 0300 	mov.w	r3, #0
 8008baa:	018b      	lsls	r3, r1, #6
 8008bac:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8008bb0:	0182      	lsls	r2, r0, #6
 8008bb2:	1a12      	subs	r2, r2, r0
 8008bb4:	eb63 0301 	sbc.w	r3, r3, r1
 8008bb8:	f04f 0000 	mov.w	r0, #0
 8008bbc:	f04f 0100 	mov.w	r1, #0
 8008bc0:	00d9      	lsls	r1, r3, #3
 8008bc2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008bc6:	00d0      	lsls	r0, r2, #3
 8008bc8:	4602      	mov	r2, r0
 8008bca:	460b      	mov	r3, r1
 8008bcc:	eb12 0208 	adds.w	r2, r2, r8
 8008bd0:	eb43 0309 	adc.w	r3, r3, r9
 8008bd4:	f04f 0000 	mov.w	r0, #0
 8008bd8:	f04f 0100 	mov.w	r1, #0
 8008bdc:	0299      	lsls	r1, r3, #10
 8008bde:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8008be2:	0290      	lsls	r0, r2, #10
 8008be4:	4602      	mov	r2, r0
 8008be6:	460b      	mov	r3, r1
 8008be8:	4610      	mov	r0, r2
 8008bea:	4619      	mov	r1, r3
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	461a      	mov	r2, r3
 8008bf0:	f04f 0300 	mov.w	r3, #0
 8008bf4:	f7f8 fb04 	bl	8001200 <__aeabi_uldivmod>
 8008bf8:	4602      	mov	r2, r0
 8008bfa:	460b      	mov	r3, r1
 8008bfc:	4613      	mov	r3, r2
 8008bfe:	60fb      	str	r3, [r7, #12]
 8008c00:	e04a      	b.n	8008c98 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008c02:	4b31      	ldr	r3, [pc, #196]	; (8008cc8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8008c04:	685b      	ldr	r3, [r3, #4]
 8008c06:	099b      	lsrs	r3, r3, #6
 8008c08:	461a      	mov	r2, r3
 8008c0a:	f04f 0300 	mov.w	r3, #0
 8008c0e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8008c12:	f04f 0100 	mov.w	r1, #0
 8008c16:	ea02 0400 	and.w	r4, r2, r0
 8008c1a:	ea03 0501 	and.w	r5, r3, r1
 8008c1e:	4620      	mov	r0, r4
 8008c20:	4629      	mov	r1, r5
 8008c22:	f04f 0200 	mov.w	r2, #0
 8008c26:	f04f 0300 	mov.w	r3, #0
 8008c2a:	014b      	lsls	r3, r1, #5
 8008c2c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8008c30:	0142      	lsls	r2, r0, #5
 8008c32:	4610      	mov	r0, r2
 8008c34:	4619      	mov	r1, r3
 8008c36:	1b00      	subs	r0, r0, r4
 8008c38:	eb61 0105 	sbc.w	r1, r1, r5
 8008c3c:	f04f 0200 	mov.w	r2, #0
 8008c40:	f04f 0300 	mov.w	r3, #0
 8008c44:	018b      	lsls	r3, r1, #6
 8008c46:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8008c4a:	0182      	lsls	r2, r0, #6
 8008c4c:	1a12      	subs	r2, r2, r0
 8008c4e:	eb63 0301 	sbc.w	r3, r3, r1
 8008c52:	f04f 0000 	mov.w	r0, #0
 8008c56:	f04f 0100 	mov.w	r1, #0
 8008c5a:	00d9      	lsls	r1, r3, #3
 8008c5c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008c60:	00d0      	lsls	r0, r2, #3
 8008c62:	4602      	mov	r2, r0
 8008c64:	460b      	mov	r3, r1
 8008c66:	1912      	adds	r2, r2, r4
 8008c68:	eb45 0303 	adc.w	r3, r5, r3
 8008c6c:	f04f 0000 	mov.w	r0, #0
 8008c70:	f04f 0100 	mov.w	r1, #0
 8008c74:	0299      	lsls	r1, r3, #10
 8008c76:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8008c7a:	0290      	lsls	r0, r2, #10
 8008c7c:	4602      	mov	r2, r0
 8008c7e:	460b      	mov	r3, r1
 8008c80:	4610      	mov	r0, r2
 8008c82:	4619      	mov	r1, r3
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	461a      	mov	r2, r3
 8008c88:	f04f 0300 	mov.w	r3, #0
 8008c8c:	f7f8 fab8 	bl	8001200 <__aeabi_uldivmod>
 8008c90:	4602      	mov	r2, r0
 8008c92:	460b      	mov	r3, r1
 8008c94:	4613      	mov	r3, r2
 8008c96:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8008c98:	4b0b      	ldr	r3, [pc, #44]	; (8008cc8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8008c9a:	685b      	ldr	r3, [r3, #4]
 8008c9c:	0c1b      	lsrs	r3, r3, #16
 8008c9e:	f003 0303 	and.w	r3, r3, #3
 8008ca2:	3301      	adds	r3, #1
 8008ca4:	005b      	lsls	r3, r3, #1
 8008ca6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8008ca8:	68fa      	ldr	r2, [r7, #12]
 8008caa:	683b      	ldr	r3, [r7, #0]
 8008cac:	fbb2 f3f3 	udiv	r3, r2, r3
 8008cb0:	60bb      	str	r3, [r7, #8]
      break;
 8008cb2:	e002      	b.n	8008cba <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008cb4:	4b05      	ldr	r3, [pc, #20]	; (8008ccc <HAL_RCC_GetSysClockFreq+0x1bc>)
 8008cb6:	60bb      	str	r3, [r7, #8]
      break;
 8008cb8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008cba:	68bb      	ldr	r3, [r7, #8]
}
 8008cbc:	4618      	mov	r0, r3
 8008cbe:	3710      	adds	r7, #16
 8008cc0:	46bd      	mov	sp, r7
 8008cc2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8008cc6:	bf00      	nop
 8008cc8:	40023800 	.word	0x40023800
 8008ccc:	00f42400 	.word	0x00f42400

08008cd0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008cd0:	b480      	push	{r7}
 8008cd2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008cd4:	4b02      	ldr	r3, [pc, #8]	; (8008ce0 <HAL_RCC_GetHCLKFreq+0x10>)
 8008cd6:	681b      	ldr	r3, [r3, #0]
}
 8008cd8:	4618      	mov	r0, r3
 8008cda:	46bd      	mov	sp, r7
 8008cdc:	bc80      	pop	{r7}
 8008cde:	4770      	bx	lr
 8008ce0:	20000024 	.word	0x20000024

08008ce4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008ce4:	b580      	push	{r7, lr}
 8008ce6:	b082      	sub	sp, #8
 8008ce8:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> POSITION_VAL(RCC_CFGR_PPRE1)]);
 8008cea:	f7ff fff1 	bl	8008cd0 <HAL_RCC_GetHCLKFreq>
 8008cee:	4601      	mov	r1, r0
 8008cf0:	4b0b      	ldr	r3, [pc, #44]	; (8008d20 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8008cf2:	689b      	ldr	r3, [r3, #8]
 8008cf4:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8008cf8:	f44f 52e0 	mov.w	r2, #7168	; 0x1c00
 8008cfc:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008cfe:	687a      	ldr	r2, [r7, #4]
 8008d00:	fa92 f2a2 	rbit	r2, r2
 8008d04:	603a      	str	r2, [r7, #0]
  return result;
 8008d06:	683a      	ldr	r2, [r7, #0]
 8008d08:	fab2 f282 	clz	r2, r2
 8008d0c:	b2d2      	uxtb	r2, r2
 8008d0e:	40d3      	lsrs	r3, r2
 8008d10:	4a04      	ldr	r2, [pc, #16]	; (8008d24 <HAL_RCC_GetPCLK1Freq+0x40>)
 8008d12:	5cd3      	ldrb	r3, [r2, r3]
 8008d14:	fa21 f303 	lsr.w	r3, r1, r3
}
 8008d18:	4618      	mov	r0, r3
 8008d1a:	3708      	adds	r7, #8
 8008d1c:	46bd      	mov	sp, r7
 8008d1e:	bd80      	pop	{r7, pc}
 8008d20:	40023800 	.word	0x40023800
 8008d24:	08013018 	.word	0x08013018

08008d28 <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 8008d28:	b580      	push	{r7, lr}
 8008d2a:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 8008d2c:	4b06      	ldr	r3, [pc, #24]	; (8008d48 <HAL_RCC_NMI_IRQHandler+0x20>)
 8008d2e:	68db      	ldr	r3, [r3, #12]
 8008d30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008d34:	2b80      	cmp	r3, #128	; 0x80
 8008d36:	d104      	bne.n	8008d42 <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 8008d38:	f000 f80a 	bl	8008d50 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 8008d3c:	4b03      	ldr	r3, [pc, #12]	; (8008d4c <HAL_RCC_NMI_IRQHandler+0x24>)
 8008d3e:	2280      	movs	r2, #128	; 0x80
 8008d40:	701a      	strb	r2, [r3, #0]
  }
}
 8008d42:	bf00      	nop
 8008d44:	bd80      	pop	{r7, pc}
 8008d46:	bf00      	nop
 8008d48:	40023800 	.word	0x40023800
 8008d4c:	4002380e 	.word	0x4002380e

08008d50 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval None
  */
__weak void HAL_RCC_CSSCallback(void)
{
 8008d50:	b480      	push	{r7}
 8008d52:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback could be implemented in the user file
   */
}
 8008d54:	bf00      	nop
 8008d56:	46bd      	mov	sp, r7
 8008d58:	bc80      	pop	{r7}
 8008d5a:	4770      	bx	lr

08008d5c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008d5c:	b580      	push	{r7, lr}
 8008d5e:	b082      	sub	sp, #8
 8008d60:	af00      	add	r7, sp, #0
 8008d62:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	d101      	bne.n	8008d6e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008d6a:	2301      	movs	r3, #1
 8008d6c:	e041      	b.n	8008df2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008d74:	b2db      	uxtb	r3, r3
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	d106      	bne.n	8008d88 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	2200      	movs	r2, #0
 8008d7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008d82:	6878      	ldr	r0, [r7, #4]
 8008d84:	f7fb ffbe 	bl	8004d04 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	2202      	movs	r2, #2
 8008d8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	681a      	ldr	r2, [r3, #0]
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	3304      	adds	r3, #4
 8008d98:	4619      	mov	r1, r3
 8008d9a:	4610      	mov	r0, r2
 8008d9c:	f000 fc04 	bl	80095a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	2201      	movs	r2, #1
 8008da4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	2201      	movs	r2, #1
 8008dac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	2201      	movs	r2, #1
 8008db4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	2201      	movs	r2, #1
 8008dbc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	2201      	movs	r2, #1
 8008dc4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	2201      	movs	r2, #1
 8008dcc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	2201      	movs	r2, #1
 8008dd4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	2201      	movs	r2, #1
 8008ddc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	2201      	movs	r2, #1
 8008de4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	2201      	movs	r2, #1
 8008dec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008df0:	2300      	movs	r3, #0
}
 8008df2:	4618      	mov	r0, r3
 8008df4:	3708      	adds	r7, #8
 8008df6:	46bd      	mov	sp, r7
 8008df8:	bd80      	pop	{r7, pc}
	...

08008dfc <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8008dfc:	b480      	push	{r7}
 8008dfe:	b085      	sub	sp, #20
 8008e00:	af00      	add	r7, sp, #0
 8008e02:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008e0a:	b2db      	uxtb	r3, r3
 8008e0c:	2b01      	cmp	r3, #1
 8008e0e:	d001      	beq.n	8008e14 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8008e10:	2301      	movs	r3, #1
 8008e12:	e046      	b.n	8008ea2 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	2202      	movs	r2, #2
 8008e18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	4a22      	ldr	r2, [pc, #136]	; (8008eac <HAL_TIM_Base_Start+0xb0>)
 8008e22:	4293      	cmp	r3, r2
 8008e24:	d022      	beq.n	8008e6c <HAL_TIM_Base_Start+0x70>
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008e2e:	d01d      	beq.n	8008e6c <HAL_TIM_Base_Start+0x70>
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	4a1e      	ldr	r2, [pc, #120]	; (8008eb0 <HAL_TIM_Base_Start+0xb4>)
 8008e36:	4293      	cmp	r3, r2
 8008e38:	d018      	beq.n	8008e6c <HAL_TIM_Base_Start+0x70>
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	4a1d      	ldr	r2, [pc, #116]	; (8008eb4 <HAL_TIM_Base_Start+0xb8>)
 8008e40:	4293      	cmp	r3, r2
 8008e42:	d013      	beq.n	8008e6c <HAL_TIM_Base_Start+0x70>
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	4a1b      	ldr	r2, [pc, #108]	; (8008eb8 <HAL_TIM_Base_Start+0xbc>)
 8008e4a:	4293      	cmp	r3, r2
 8008e4c:	d00e      	beq.n	8008e6c <HAL_TIM_Base_Start+0x70>
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	4a1a      	ldr	r2, [pc, #104]	; (8008ebc <HAL_TIM_Base_Start+0xc0>)
 8008e54:	4293      	cmp	r3, r2
 8008e56:	d009      	beq.n	8008e6c <HAL_TIM_Base_Start+0x70>
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	4a18      	ldr	r2, [pc, #96]	; (8008ec0 <HAL_TIM_Base_Start+0xc4>)
 8008e5e:	4293      	cmp	r3, r2
 8008e60:	d004      	beq.n	8008e6c <HAL_TIM_Base_Start+0x70>
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	4a17      	ldr	r2, [pc, #92]	; (8008ec4 <HAL_TIM_Base_Start+0xc8>)
 8008e68:	4293      	cmp	r3, r2
 8008e6a:	d111      	bne.n	8008e90 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	689b      	ldr	r3, [r3, #8]
 8008e72:	f003 0307 	and.w	r3, r3, #7
 8008e76:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008e78:	68fb      	ldr	r3, [r7, #12]
 8008e7a:	2b06      	cmp	r3, #6
 8008e7c:	d010      	beq.n	8008ea0 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	681a      	ldr	r2, [r3, #0]
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	f042 0201 	orr.w	r2, r2, #1
 8008e8c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008e8e:	e007      	b.n	8008ea0 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	681a      	ldr	r2, [r3, #0]
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	f042 0201 	orr.w	r2, r2, #1
 8008e9e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008ea0:	2300      	movs	r3, #0
}
 8008ea2:	4618      	mov	r0, r3
 8008ea4:	3714      	adds	r7, #20
 8008ea6:	46bd      	mov	sp, r7
 8008ea8:	bc80      	pop	{r7}
 8008eaa:	4770      	bx	lr
 8008eac:	40010000 	.word	0x40010000
 8008eb0:	40000400 	.word	0x40000400
 8008eb4:	40000800 	.word	0x40000800
 8008eb8:	40000c00 	.word	0x40000c00
 8008ebc:	40010400 	.word	0x40010400
 8008ec0:	40014000 	.word	0x40014000
 8008ec4:	40001800 	.word	0x40001800

08008ec8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008ec8:	b480      	push	{r7}
 8008eca:	b085      	sub	sp, #20
 8008ecc:	af00      	add	r7, sp, #0
 8008ece:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008ed6:	b2db      	uxtb	r3, r3
 8008ed8:	2b01      	cmp	r3, #1
 8008eda:	d001      	beq.n	8008ee0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008edc:	2301      	movs	r3, #1
 8008ede:	e04e      	b.n	8008f7e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	2202      	movs	r2, #2
 8008ee4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	68da      	ldr	r2, [r3, #12]
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	f042 0201 	orr.w	r2, r2, #1
 8008ef6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	4a22      	ldr	r2, [pc, #136]	; (8008f88 <HAL_TIM_Base_Start_IT+0xc0>)
 8008efe:	4293      	cmp	r3, r2
 8008f00:	d022      	beq.n	8008f48 <HAL_TIM_Base_Start_IT+0x80>
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008f0a:	d01d      	beq.n	8008f48 <HAL_TIM_Base_Start_IT+0x80>
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	4a1e      	ldr	r2, [pc, #120]	; (8008f8c <HAL_TIM_Base_Start_IT+0xc4>)
 8008f12:	4293      	cmp	r3, r2
 8008f14:	d018      	beq.n	8008f48 <HAL_TIM_Base_Start_IT+0x80>
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	4a1d      	ldr	r2, [pc, #116]	; (8008f90 <HAL_TIM_Base_Start_IT+0xc8>)
 8008f1c:	4293      	cmp	r3, r2
 8008f1e:	d013      	beq.n	8008f48 <HAL_TIM_Base_Start_IT+0x80>
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	4a1b      	ldr	r2, [pc, #108]	; (8008f94 <HAL_TIM_Base_Start_IT+0xcc>)
 8008f26:	4293      	cmp	r3, r2
 8008f28:	d00e      	beq.n	8008f48 <HAL_TIM_Base_Start_IT+0x80>
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	4a1a      	ldr	r2, [pc, #104]	; (8008f98 <HAL_TIM_Base_Start_IT+0xd0>)
 8008f30:	4293      	cmp	r3, r2
 8008f32:	d009      	beq.n	8008f48 <HAL_TIM_Base_Start_IT+0x80>
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	4a18      	ldr	r2, [pc, #96]	; (8008f9c <HAL_TIM_Base_Start_IT+0xd4>)
 8008f3a:	4293      	cmp	r3, r2
 8008f3c:	d004      	beq.n	8008f48 <HAL_TIM_Base_Start_IT+0x80>
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	4a17      	ldr	r2, [pc, #92]	; (8008fa0 <HAL_TIM_Base_Start_IT+0xd8>)
 8008f44:	4293      	cmp	r3, r2
 8008f46:	d111      	bne.n	8008f6c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	689b      	ldr	r3, [r3, #8]
 8008f4e:	f003 0307 	and.w	r3, r3, #7
 8008f52:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008f54:	68fb      	ldr	r3, [r7, #12]
 8008f56:	2b06      	cmp	r3, #6
 8008f58:	d010      	beq.n	8008f7c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	681a      	ldr	r2, [r3, #0]
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	f042 0201 	orr.w	r2, r2, #1
 8008f68:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008f6a:	e007      	b.n	8008f7c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	681a      	ldr	r2, [r3, #0]
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	f042 0201 	orr.w	r2, r2, #1
 8008f7a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008f7c:	2300      	movs	r3, #0
}
 8008f7e:	4618      	mov	r0, r3
 8008f80:	3714      	adds	r7, #20
 8008f82:	46bd      	mov	sp, r7
 8008f84:	bc80      	pop	{r7}
 8008f86:	4770      	bx	lr
 8008f88:	40010000 	.word	0x40010000
 8008f8c:	40000400 	.word	0x40000400
 8008f90:	40000800 	.word	0x40000800
 8008f94:	40000c00 	.word	0x40000c00
 8008f98:	40010400 	.word	0x40010400
 8008f9c:	40014000 	.word	0x40014000
 8008fa0:	40001800 	.word	0x40001800

08008fa4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008fa4:	b580      	push	{r7, lr}
 8008fa6:	b082      	sub	sp, #8
 8008fa8:	af00      	add	r7, sp, #0
 8008faa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	2b00      	cmp	r3, #0
 8008fb0:	d101      	bne.n	8008fb6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008fb2:	2301      	movs	r3, #1
 8008fb4:	e041      	b.n	800903a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008fbc:	b2db      	uxtb	r3, r3
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	d106      	bne.n	8008fd0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	2200      	movs	r2, #0
 8008fc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008fca:	6878      	ldr	r0, [r7, #4]
 8008fcc:	f7fb fe64 	bl	8004c98 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	2202      	movs	r2, #2
 8008fd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	681a      	ldr	r2, [r3, #0]
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	3304      	adds	r3, #4
 8008fe0:	4619      	mov	r1, r3
 8008fe2:	4610      	mov	r0, r2
 8008fe4:	f000 fae0 	bl	80095a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	2201      	movs	r2, #1
 8008fec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	2201      	movs	r2, #1
 8008ff4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	2201      	movs	r2, #1
 8008ffc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	2201      	movs	r2, #1
 8009004:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	2201      	movs	r2, #1
 800900c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	2201      	movs	r2, #1
 8009014:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	2201      	movs	r2, #1
 800901c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	2201      	movs	r2, #1
 8009024:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	2201      	movs	r2, #1
 800902c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	2201      	movs	r2, #1
 8009034:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009038:	2300      	movs	r3, #0
}
 800903a:	4618      	mov	r0, r3
 800903c:	3708      	adds	r7, #8
 800903e:	46bd      	mov	sp, r7
 8009040:	bd80      	pop	{r7, pc}
	...

08009044 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009044:	b580      	push	{r7, lr}
 8009046:	b084      	sub	sp, #16
 8009048:	af00      	add	r7, sp, #0
 800904a:	6078      	str	r0, [r7, #4]
 800904c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800904e:	683b      	ldr	r3, [r7, #0]
 8009050:	2b00      	cmp	r3, #0
 8009052:	d109      	bne.n	8009068 <HAL_TIM_PWM_Start+0x24>
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800905a:	b2db      	uxtb	r3, r3
 800905c:	2b01      	cmp	r3, #1
 800905e:	bf14      	ite	ne
 8009060:	2301      	movne	r3, #1
 8009062:	2300      	moveq	r3, #0
 8009064:	b2db      	uxtb	r3, r3
 8009066:	e022      	b.n	80090ae <HAL_TIM_PWM_Start+0x6a>
 8009068:	683b      	ldr	r3, [r7, #0]
 800906a:	2b04      	cmp	r3, #4
 800906c:	d109      	bne.n	8009082 <HAL_TIM_PWM_Start+0x3e>
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8009074:	b2db      	uxtb	r3, r3
 8009076:	2b01      	cmp	r3, #1
 8009078:	bf14      	ite	ne
 800907a:	2301      	movne	r3, #1
 800907c:	2300      	moveq	r3, #0
 800907e:	b2db      	uxtb	r3, r3
 8009080:	e015      	b.n	80090ae <HAL_TIM_PWM_Start+0x6a>
 8009082:	683b      	ldr	r3, [r7, #0]
 8009084:	2b08      	cmp	r3, #8
 8009086:	d109      	bne.n	800909c <HAL_TIM_PWM_Start+0x58>
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800908e:	b2db      	uxtb	r3, r3
 8009090:	2b01      	cmp	r3, #1
 8009092:	bf14      	ite	ne
 8009094:	2301      	movne	r3, #1
 8009096:	2300      	moveq	r3, #0
 8009098:	b2db      	uxtb	r3, r3
 800909a:	e008      	b.n	80090ae <HAL_TIM_PWM_Start+0x6a>
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80090a2:	b2db      	uxtb	r3, r3
 80090a4:	2b01      	cmp	r3, #1
 80090a6:	bf14      	ite	ne
 80090a8:	2301      	movne	r3, #1
 80090aa:	2300      	moveq	r3, #0
 80090ac:	b2db      	uxtb	r3, r3
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	d001      	beq.n	80090b6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80090b2:	2301      	movs	r3, #1
 80090b4:	e07c      	b.n	80091b0 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80090b6:	683b      	ldr	r3, [r7, #0]
 80090b8:	2b00      	cmp	r3, #0
 80090ba:	d104      	bne.n	80090c6 <HAL_TIM_PWM_Start+0x82>
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	2202      	movs	r2, #2
 80090c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80090c4:	e013      	b.n	80090ee <HAL_TIM_PWM_Start+0xaa>
 80090c6:	683b      	ldr	r3, [r7, #0]
 80090c8:	2b04      	cmp	r3, #4
 80090ca:	d104      	bne.n	80090d6 <HAL_TIM_PWM_Start+0x92>
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	2202      	movs	r2, #2
 80090d0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80090d4:	e00b      	b.n	80090ee <HAL_TIM_PWM_Start+0xaa>
 80090d6:	683b      	ldr	r3, [r7, #0]
 80090d8:	2b08      	cmp	r3, #8
 80090da:	d104      	bne.n	80090e6 <HAL_TIM_PWM_Start+0xa2>
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	2202      	movs	r2, #2
 80090e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80090e4:	e003      	b.n	80090ee <HAL_TIM_PWM_Start+0xaa>
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	2202      	movs	r2, #2
 80090ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	2201      	movs	r2, #1
 80090f4:	6839      	ldr	r1, [r7, #0]
 80090f6:	4618      	mov	r0, r3
 80090f8:	f000 fca0 	bl	8009a3c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	4a2d      	ldr	r2, [pc, #180]	; (80091b8 <HAL_TIM_PWM_Start+0x174>)
 8009102:	4293      	cmp	r3, r2
 8009104:	d004      	beq.n	8009110 <HAL_TIM_PWM_Start+0xcc>
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	4a2c      	ldr	r2, [pc, #176]	; (80091bc <HAL_TIM_PWM_Start+0x178>)
 800910c:	4293      	cmp	r3, r2
 800910e:	d101      	bne.n	8009114 <HAL_TIM_PWM_Start+0xd0>
 8009110:	2301      	movs	r3, #1
 8009112:	e000      	b.n	8009116 <HAL_TIM_PWM_Start+0xd2>
 8009114:	2300      	movs	r3, #0
 8009116:	2b00      	cmp	r3, #0
 8009118:	d007      	beq.n	800912a <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009128:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	4a22      	ldr	r2, [pc, #136]	; (80091b8 <HAL_TIM_PWM_Start+0x174>)
 8009130:	4293      	cmp	r3, r2
 8009132:	d022      	beq.n	800917a <HAL_TIM_PWM_Start+0x136>
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800913c:	d01d      	beq.n	800917a <HAL_TIM_PWM_Start+0x136>
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	4a1f      	ldr	r2, [pc, #124]	; (80091c0 <HAL_TIM_PWM_Start+0x17c>)
 8009144:	4293      	cmp	r3, r2
 8009146:	d018      	beq.n	800917a <HAL_TIM_PWM_Start+0x136>
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	4a1d      	ldr	r2, [pc, #116]	; (80091c4 <HAL_TIM_PWM_Start+0x180>)
 800914e:	4293      	cmp	r3, r2
 8009150:	d013      	beq.n	800917a <HAL_TIM_PWM_Start+0x136>
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	681b      	ldr	r3, [r3, #0]
 8009156:	4a1c      	ldr	r2, [pc, #112]	; (80091c8 <HAL_TIM_PWM_Start+0x184>)
 8009158:	4293      	cmp	r3, r2
 800915a:	d00e      	beq.n	800917a <HAL_TIM_PWM_Start+0x136>
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	4a16      	ldr	r2, [pc, #88]	; (80091bc <HAL_TIM_PWM_Start+0x178>)
 8009162:	4293      	cmp	r3, r2
 8009164:	d009      	beq.n	800917a <HAL_TIM_PWM_Start+0x136>
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	4a18      	ldr	r2, [pc, #96]	; (80091cc <HAL_TIM_PWM_Start+0x188>)
 800916c:	4293      	cmp	r3, r2
 800916e:	d004      	beq.n	800917a <HAL_TIM_PWM_Start+0x136>
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	4a16      	ldr	r2, [pc, #88]	; (80091d0 <HAL_TIM_PWM_Start+0x18c>)
 8009176:	4293      	cmp	r3, r2
 8009178:	d111      	bne.n	800919e <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	689b      	ldr	r3, [r3, #8]
 8009180:	f003 0307 	and.w	r3, r3, #7
 8009184:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009186:	68fb      	ldr	r3, [r7, #12]
 8009188:	2b06      	cmp	r3, #6
 800918a:	d010      	beq.n	80091ae <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	681a      	ldr	r2, [r3, #0]
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	f042 0201 	orr.w	r2, r2, #1
 800919a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800919c:	e007      	b.n	80091ae <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	681a      	ldr	r2, [r3, #0]
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	f042 0201 	orr.w	r2, r2, #1
 80091ac:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80091ae:	2300      	movs	r3, #0
}
 80091b0:	4618      	mov	r0, r3
 80091b2:	3710      	adds	r7, #16
 80091b4:	46bd      	mov	sp, r7
 80091b6:	bd80      	pop	{r7, pc}
 80091b8:	40010000 	.word	0x40010000
 80091bc:	40010400 	.word	0x40010400
 80091c0:	40000400 	.word	0x40000400
 80091c4:	40000800 	.word	0x40000800
 80091c8:	40000c00 	.word	0x40000c00
 80091cc:	40014000 	.word	0x40014000
 80091d0:	40001800 	.word	0x40001800

080091d4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80091d4:	b580      	push	{r7, lr}
 80091d6:	b082      	sub	sp, #8
 80091d8:	af00      	add	r7, sp, #0
 80091da:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	691b      	ldr	r3, [r3, #16]
 80091e2:	f003 0302 	and.w	r3, r3, #2
 80091e6:	2b02      	cmp	r3, #2
 80091e8:	d122      	bne.n	8009230 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	681b      	ldr	r3, [r3, #0]
 80091ee:	68db      	ldr	r3, [r3, #12]
 80091f0:	f003 0302 	and.w	r3, r3, #2
 80091f4:	2b02      	cmp	r3, #2
 80091f6:	d11b      	bne.n	8009230 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	f06f 0202 	mvn.w	r2, #2
 8009200:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	2201      	movs	r2, #1
 8009206:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	699b      	ldr	r3, [r3, #24]
 800920e:	f003 0303 	and.w	r3, r3, #3
 8009212:	2b00      	cmp	r3, #0
 8009214:	d003      	beq.n	800921e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009216:	6878      	ldr	r0, [r7, #4]
 8009218:	f000 f9ab 	bl	8009572 <HAL_TIM_IC_CaptureCallback>
 800921c:	e005      	b.n	800922a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800921e:	6878      	ldr	r0, [r7, #4]
 8009220:	f000 f99e 	bl	8009560 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009224:	6878      	ldr	r0, [r7, #4]
 8009226:	f000 f9ad 	bl	8009584 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	2200      	movs	r2, #0
 800922e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	681b      	ldr	r3, [r3, #0]
 8009234:	691b      	ldr	r3, [r3, #16]
 8009236:	f003 0304 	and.w	r3, r3, #4
 800923a:	2b04      	cmp	r3, #4
 800923c:	d122      	bne.n	8009284 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	68db      	ldr	r3, [r3, #12]
 8009244:	f003 0304 	and.w	r3, r3, #4
 8009248:	2b04      	cmp	r3, #4
 800924a:	d11b      	bne.n	8009284 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	f06f 0204 	mvn.w	r2, #4
 8009254:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	2202      	movs	r2, #2
 800925a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	699b      	ldr	r3, [r3, #24]
 8009262:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009266:	2b00      	cmp	r3, #0
 8009268:	d003      	beq.n	8009272 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800926a:	6878      	ldr	r0, [r7, #4]
 800926c:	f000 f981 	bl	8009572 <HAL_TIM_IC_CaptureCallback>
 8009270:	e005      	b.n	800927e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009272:	6878      	ldr	r0, [r7, #4]
 8009274:	f000 f974 	bl	8009560 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009278:	6878      	ldr	r0, [r7, #4]
 800927a:	f000 f983 	bl	8009584 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	2200      	movs	r2, #0
 8009282:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	691b      	ldr	r3, [r3, #16]
 800928a:	f003 0308 	and.w	r3, r3, #8
 800928e:	2b08      	cmp	r3, #8
 8009290:	d122      	bne.n	80092d8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	68db      	ldr	r3, [r3, #12]
 8009298:	f003 0308 	and.w	r3, r3, #8
 800929c:	2b08      	cmp	r3, #8
 800929e:	d11b      	bne.n	80092d8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	f06f 0208 	mvn.w	r2, #8
 80092a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	2204      	movs	r2, #4
 80092ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	69db      	ldr	r3, [r3, #28]
 80092b6:	f003 0303 	and.w	r3, r3, #3
 80092ba:	2b00      	cmp	r3, #0
 80092bc:	d003      	beq.n	80092c6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80092be:	6878      	ldr	r0, [r7, #4]
 80092c0:	f000 f957 	bl	8009572 <HAL_TIM_IC_CaptureCallback>
 80092c4:	e005      	b.n	80092d2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80092c6:	6878      	ldr	r0, [r7, #4]
 80092c8:	f000 f94a 	bl	8009560 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80092cc:	6878      	ldr	r0, [r7, #4]
 80092ce:	f000 f959 	bl	8009584 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	2200      	movs	r2, #0
 80092d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	691b      	ldr	r3, [r3, #16]
 80092de:	f003 0310 	and.w	r3, r3, #16
 80092e2:	2b10      	cmp	r3, #16
 80092e4:	d122      	bne.n	800932c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	68db      	ldr	r3, [r3, #12]
 80092ec:	f003 0310 	and.w	r3, r3, #16
 80092f0:	2b10      	cmp	r3, #16
 80092f2:	d11b      	bne.n	800932c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	f06f 0210 	mvn.w	r2, #16
 80092fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	2208      	movs	r2, #8
 8009302:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	69db      	ldr	r3, [r3, #28]
 800930a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800930e:	2b00      	cmp	r3, #0
 8009310:	d003      	beq.n	800931a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009312:	6878      	ldr	r0, [r7, #4]
 8009314:	f000 f92d 	bl	8009572 <HAL_TIM_IC_CaptureCallback>
 8009318:	e005      	b.n	8009326 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800931a:	6878      	ldr	r0, [r7, #4]
 800931c:	f000 f920 	bl	8009560 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009320:	6878      	ldr	r0, [r7, #4]
 8009322:	f000 f92f 	bl	8009584 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	2200      	movs	r2, #0
 800932a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	691b      	ldr	r3, [r3, #16]
 8009332:	f003 0301 	and.w	r3, r3, #1
 8009336:	2b01      	cmp	r3, #1
 8009338:	d10e      	bne.n	8009358 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	681b      	ldr	r3, [r3, #0]
 800933e:	68db      	ldr	r3, [r3, #12]
 8009340:	f003 0301 	and.w	r3, r3, #1
 8009344:	2b01      	cmp	r3, #1
 8009346:	d107      	bne.n	8009358 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	f06f 0201 	mvn.w	r2, #1
 8009350:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009352:	6878      	ldr	r0, [r7, #4]
 8009354:	f7fa ffe4 	bl	8004320 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	691b      	ldr	r3, [r3, #16]
 800935e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009362:	2b80      	cmp	r3, #128	; 0x80
 8009364:	d10e      	bne.n	8009384 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	68db      	ldr	r3, [r3, #12]
 800936c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009370:	2b80      	cmp	r3, #128	; 0x80
 8009372:	d107      	bne.n	8009384 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800937c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800937e:	6878      	ldr	r0, [r7, #4]
 8009380:	f000 fc03 	bl	8009b8a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	681b      	ldr	r3, [r3, #0]
 8009388:	691b      	ldr	r3, [r3, #16]
 800938a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800938e:	2b40      	cmp	r3, #64	; 0x40
 8009390:	d10e      	bne.n	80093b0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	681b      	ldr	r3, [r3, #0]
 8009396:	68db      	ldr	r3, [r3, #12]
 8009398:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800939c:	2b40      	cmp	r3, #64	; 0x40
 800939e:	d107      	bne.n	80093b0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80093a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80093aa:	6878      	ldr	r0, [r7, #4]
 80093ac:	f000 f8f3 	bl	8009596 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	691b      	ldr	r3, [r3, #16]
 80093b6:	f003 0320 	and.w	r3, r3, #32
 80093ba:	2b20      	cmp	r3, #32
 80093bc:	d10e      	bne.n	80093dc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	68db      	ldr	r3, [r3, #12]
 80093c4:	f003 0320 	and.w	r3, r3, #32
 80093c8:	2b20      	cmp	r3, #32
 80093ca:	d107      	bne.n	80093dc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	f06f 0220 	mvn.w	r2, #32
 80093d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80093d6:	6878      	ldr	r0, [r7, #4]
 80093d8:	f000 fbce 	bl	8009b78 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80093dc:	bf00      	nop
 80093de:	3708      	adds	r7, #8
 80093e0:	46bd      	mov	sp, r7
 80093e2:	bd80      	pop	{r7, pc}

080093e4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80093e4:	b580      	push	{r7, lr}
 80093e6:	b084      	sub	sp, #16
 80093e8:	af00      	add	r7, sp, #0
 80093ea:	60f8      	str	r0, [r7, #12]
 80093ec:	60b9      	str	r1, [r7, #8]
 80093ee:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80093f0:	68fb      	ldr	r3, [r7, #12]
 80093f2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80093f6:	2b01      	cmp	r3, #1
 80093f8:	d101      	bne.n	80093fe <HAL_TIM_PWM_ConfigChannel+0x1a>
 80093fa:	2302      	movs	r3, #2
 80093fc:	e0ac      	b.n	8009558 <HAL_TIM_PWM_ConfigChannel+0x174>
 80093fe:	68fb      	ldr	r3, [r7, #12]
 8009400:	2201      	movs	r2, #1
 8009402:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	2b0c      	cmp	r3, #12
 800940a:	f200 809f 	bhi.w	800954c <HAL_TIM_PWM_ConfigChannel+0x168>
 800940e:	a201      	add	r2, pc, #4	; (adr r2, 8009414 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8009410:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009414:	08009449 	.word	0x08009449
 8009418:	0800954d 	.word	0x0800954d
 800941c:	0800954d 	.word	0x0800954d
 8009420:	0800954d 	.word	0x0800954d
 8009424:	08009489 	.word	0x08009489
 8009428:	0800954d 	.word	0x0800954d
 800942c:	0800954d 	.word	0x0800954d
 8009430:	0800954d 	.word	0x0800954d
 8009434:	080094cb 	.word	0x080094cb
 8009438:	0800954d 	.word	0x0800954d
 800943c:	0800954d 	.word	0x0800954d
 8009440:	0800954d 	.word	0x0800954d
 8009444:	0800950b 	.word	0x0800950b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009448:	68fb      	ldr	r3, [r7, #12]
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	68b9      	ldr	r1, [r7, #8]
 800944e:	4618      	mov	r0, r3
 8009450:	f000 f948 	bl	80096e4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009454:	68fb      	ldr	r3, [r7, #12]
 8009456:	681b      	ldr	r3, [r3, #0]
 8009458:	699a      	ldr	r2, [r3, #24]
 800945a:	68fb      	ldr	r3, [r7, #12]
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	f042 0208 	orr.w	r2, r2, #8
 8009462:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8009464:	68fb      	ldr	r3, [r7, #12]
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	699a      	ldr	r2, [r3, #24]
 800946a:	68fb      	ldr	r3, [r7, #12]
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	f022 0204 	bic.w	r2, r2, #4
 8009472:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8009474:	68fb      	ldr	r3, [r7, #12]
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	6999      	ldr	r1, [r3, #24]
 800947a:	68bb      	ldr	r3, [r7, #8]
 800947c:	691a      	ldr	r2, [r3, #16]
 800947e:	68fb      	ldr	r3, [r7, #12]
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	430a      	orrs	r2, r1
 8009484:	619a      	str	r2, [r3, #24]
      break;
 8009486:	e062      	b.n	800954e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009488:	68fb      	ldr	r3, [r7, #12]
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	68b9      	ldr	r1, [r7, #8]
 800948e:	4618      	mov	r0, r3
 8009490:	f000 f998 	bl	80097c4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009494:	68fb      	ldr	r3, [r7, #12]
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	699a      	ldr	r2, [r3, #24]
 800949a:	68fb      	ldr	r3, [r7, #12]
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80094a2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80094a4:	68fb      	ldr	r3, [r7, #12]
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	699a      	ldr	r2, [r3, #24]
 80094aa:	68fb      	ldr	r3, [r7, #12]
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80094b2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80094b4:	68fb      	ldr	r3, [r7, #12]
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	6999      	ldr	r1, [r3, #24]
 80094ba:	68bb      	ldr	r3, [r7, #8]
 80094bc:	691b      	ldr	r3, [r3, #16]
 80094be:	021a      	lsls	r2, r3, #8
 80094c0:	68fb      	ldr	r3, [r7, #12]
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	430a      	orrs	r2, r1
 80094c6:	619a      	str	r2, [r3, #24]
      break;
 80094c8:	e041      	b.n	800954e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80094ca:	68fb      	ldr	r3, [r7, #12]
 80094cc:	681b      	ldr	r3, [r3, #0]
 80094ce:	68b9      	ldr	r1, [r7, #8]
 80094d0:	4618      	mov	r0, r3
 80094d2:	f000 f9eb 	bl	80098ac <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80094d6:	68fb      	ldr	r3, [r7, #12]
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	69da      	ldr	r2, [r3, #28]
 80094dc:	68fb      	ldr	r3, [r7, #12]
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	f042 0208 	orr.w	r2, r2, #8
 80094e4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80094e6:	68fb      	ldr	r3, [r7, #12]
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	69da      	ldr	r2, [r3, #28]
 80094ec:	68fb      	ldr	r3, [r7, #12]
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	f022 0204 	bic.w	r2, r2, #4
 80094f4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80094f6:	68fb      	ldr	r3, [r7, #12]
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	69d9      	ldr	r1, [r3, #28]
 80094fc:	68bb      	ldr	r3, [r7, #8]
 80094fe:	691a      	ldr	r2, [r3, #16]
 8009500:	68fb      	ldr	r3, [r7, #12]
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	430a      	orrs	r2, r1
 8009506:	61da      	str	r2, [r3, #28]
      break;
 8009508:	e021      	b.n	800954e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800950a:	68fb      	ldr	r3, [r7, #12]
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	68b9      	ldr	r1, [r7, #8]
 8009510:	4618      	mov	r0, r3
 8009512:	f000 fa3f 	bl	8009994 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8009516:	68fb      	ldr	r3, [r7, #12]
 8009518:	681b      	ldr	r3, [r3, #0]
 800951a:	69da      	ldr	r2, [r3, #28]
 800951c:	68fb      	ldr	r3, [r7, #12]
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009524:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8009526:	68fb      	ldr	r3, [r7, #12]
 8009528:	681b      	ldr	r3, [r3, #0]
 800952a:	69da      	ldr	r2, [r3, #28]
 800952c:	68fb      	ldr	r3, [r7, #12]
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009534:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8009536:	68fb      	ldr	r3, [r7, #12]
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	69d9      	ldr	r1, [r3, #28]
 800953c:	68bb      	ldr	r3, [r7, #8]
 800953e:	691b      	ldr	r3, [r3, #16]
 8009540:	021a      	lsls	r2, r3, #8
 8009542:	68fb      	ldr	r3, [r7, #12]
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	430a      	orrs	r2, r1
 8009548:	61da      	str	r2, [r3, #28]
      break;
 800954a:	e000      	b.n	800954e <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 800954c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800954e:	68fb      	ldr	r3, [r7, #12]
 8009550:	2200      	movs	r2, #0
 8009552:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009556:	2300      	movs	r3, #0
}
 8009558:	4618      	mov	r0, r3
 800955a:	3710      	adds	r7, #16
 800955c:	46bd      	mov	sp, r7
 800955e:	bd80      	pop	{r7, pc}

08009560 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009560:	b480      	push	{r7}
 8009562:	b083      	sub	sp, #12
 8009564:	af00      	add	r7, sp, #0
 8009566:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009568:	bf00      	nop
 800956a:	370c      	adds	r7, #12
 800956c:	46bd      	mov	sp, r7
 800956e:	bc80      	pop	{r7}
 8009570:	4770      	bx	lr

08009572 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009572:	b480      	push	{r7}
 8009574:	b083      	sub	sp, #12
 8009576:	af00      	add	r7, sp, #0
 8009578:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800957a:	bf00      	nop
 800957c:	370c      	adds	r7, #12
 800957e:	46bd      	mov	sp, r7
 8009580:	bc80      	pop	{r7}
 8009582:	4770      	bx	lr

08009584 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009584:	b480      	push	{r7}
 8009586:	b083      	sub	sp, #12
 8009588:	af00      	add	r7, sp, #0
 800958a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800958c:	bf00      	nop
 800958e:	370c      	adds	r7, #12
 8009590:	46bd      	mov	sp, r7
 8009592:	bc80      	pop	{r7}
 8009594:	4770      	bx	lr

08009596 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009596:	b480      	push	{r7}
 8009598:	b083      	sub	sp, #12
 800959a:	af00      	add	r7, sp, #0
 800959c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800959e:	bf00      	nop
 80095a0:	370c      	adds	r7, #12
 80095a2:	46bd      	mov	sp, r7
 80095a4:	bc80      	pop	{r7}
 80095a6:	4770      	bx	lr

080095a8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80095a8:	b480      	push	{r7}
 80095aa:	b085      	sub	sp, #20
 80095ac:	af00      	add	r7, sp, #0
 80095ae:	6078      	str	r0, [r7, #4]
 80095b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	4a3f      	ldr	r2, [pc, #252]	; (80096b8 <TIM_Base_SetConfig+0x110>)
 80095bc:	4293      	cmp	r3, r2
 80095be:	d013      	beq.n	80095e8 <TIM_Base_SetConfig+0x40>
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80095c6:	d00f      	beq.n	80095e8 <TIM_Base_SetConfig+0x40>
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	4a3c      	ldr	r2, [pc, #240]	; (80096bc <TIM_Base_SetConfig+0x114>)
 80095cc:	4293      	cmp	r3, r2
 80095ce:	d00b      	beq.n	80095e8 <TIM_Base_SetConfig+0x40>
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	4a3b      	ldr	r2, [pc, #236]	; (80096c0 <TIM_Base_SetConfig+0x118>)
 80095d4:	4293      	cmp	r3, r2
 80095d6:	d007      	beq.n	80095e8 <TIM_Base_SetConfig+0x40>
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	4a3a      	ldr	r2, [pc, #232]	; (80096c4 <TIM_Base_SetConfig+0x11c>)
 80095dc:	4293      	cmp	r3, r2
 80095de:	d003      	beq.n	80095e8 <TIM_Base_SetConfig+0x40>
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	4a39      	ldr	r2, [pc, #228]	; (80096c8 <TIM_Base_SetConfig+0x120>)
 80095e4:	4293      	cmp	r3, r2
 80095e6:	d108      	bne.n	80095fa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80095e8:	68fb      	ldr	r3, [r7, #12]
 80095ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80095ee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80095f0:	683b      	ldr	r3, [r7, #0]
 80095f2:	685b      	ldr	r3, [r3, #4]
 80095f4:	68fa      	ldr	r2, [r7, #12]
 80095f6:	4313      	orrs	r3, r2
 80095f8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	4a2e      	ldr	r2, [pc, #184]	; (80096b8 <TIM_Base_SetConfig+0x110>)
 80095fe:	4293      	cmp	r3, r2
 8009600:	d02b      	beq.n	800965a <TIM_Base_SetConfig+0xb2>
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009608:	d027      	beq.n	800965a <TIM_Base_SetConfig+0xb2>
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	4a2b      	ldr	r2, [pc, #172]	; (80096bc <TIM_Base_SetConfig+0x114>)
 800960e:	4293      	cmp	r3, r2
 8009610:	d023      	beq.n	800965a <TIM_Base_SetConfig+0xb2>
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	4a2a      	ldr	r2, [pc, #168]	; (80096c0 <TIM_Base_SetConfig+0x118>)
 8009616:	4293      	cmp	r3, r2
 8009618:	d01f      	beq.n	800965a <TIM_Base_SetConfig+0xb2>
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	4a29      	ldr	r2, [pc, #164]	; (80096c4 <TIM_Base_SetConfig+0x11c>)
 800961e:	4293      	cmp	r3, r2
 8009620:	d01b      	beq.n	800965a <TIM_Base_SetConfig+0xb2>
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	4a28      	ldr	r2, [pc, #160]	; (80096c8 <TIM_Base_SetConfig+0x120>)
 8009626:	4293      	cmp	r3, r2
 8009628:	d017      	beq.n	800965a <TIM_Base_SetConfig+0xb2>
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	4a27      	ldr	r2, [pc, #156]	; (80096cc <TIM_Base_SetConfig+0x124>)
 800962e:	4293      	cmp	r3, r2
 8009630:	d013      	beq.n	800965a <TIM_Base_SetConfig+0xb2>
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	4a26      	ldr	r2, [pc, #152]	; (80096d0 <TIM_Base_SetConfig+0x128>)
 8009636:	4293      	cmp	r3, r2
 8009638:	d00f      	beq.n	800965a <TIM_Base_SetConfig+0xb2>
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	4a25      	ldr	r2, [pc, #148]	; (80096d4 <TIM_Base_SetConfig+0x12c>)
 800963e:	4293      	cmp	r3, r2
 8009640:	d00b      	beq.n	800965a <TIM_Base_SetConfig+0xb2>
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	4a24      	ldr	r2, [pc, #144]	; (80096d8 <TIM_Base_SetConfig+0x130>)
 8009646:	4293      	cmp	r3, r2
 8009648:	d007      	beq.n	800965a <TIM_Base_SetConfig+0xb2>
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	4a23      	ldr	r2, [pc, #140]	; (80096dc <TIM_Base_SetConfig+0x134>)
 800964e:	4293      	cmp	r3, r2
 8009650:	d003      	beq.n	800965a <TIM_Base_SetConfig+0xb2>
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	4a22      	ldr	r2, [pc, #136]	; (80096e0 <TIM_Base_SetConfig+0x138>)
 8009656:	4293      	cmp	r3, r2
 8009658:	d108      	bne.n	800966c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800965a:	68fb      	ldr	r3, [r7, #12]
 800965c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009660:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009662:	683b      	ldr	r3, [r7, #0]
 8009664:	68db      	ldr	r3, [r3, #12]
 8009666:	68fa      	ldr	r2, [r7, #12]
 8009668:	4313      	orrs	r3, r2
 800966a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800966c:	68fb      	ldr	r3, [r7, #12]
 800966e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009672:	683b      	ldr	r3, [r7, #0]
 8009674:	695b      	ldr	r3, [r3, #20]
 8009676:	4313      	orrs	r3, r2
 8009678:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	68fa      	ldr	r2, [r7, #12]
 800967e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009680:	683b      	ldr	r3, [r7, #0]
 8009682:	689a      	ldr	r2, [r3, #8]
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009688:	683b      	ldr	r3, [r7, #0]
 800968a:	681a      	ldr	r2, [r3, #0]
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	4a09      	ldr	r2, [pc, #36]	; (80096b8 <TIM_Base_SetConfig+0x110>)
 8009694:	4293      	cmp	r3, r2
 8009696:	d003      	beq.n	80096a0 <TIM_Base_SetConfig+0xf8>
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	4a0b      	ldr	r2, [pc, #44]	; (80096c8 <TIM_Base_SetConfig+0x120>)
 800969c:	4293      	cmp	r3, r2
 800969e:	d103      	bne.n	80096a8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80096a0:	683b      	ldr	r3, [r7, #0]
 80096a2:	691a      	ldr	r2, [r3, #16]
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	2201      	movs	r2, #1
 80096ac:	615a      	str	r2, [r3, #20]
}
 80096ae:	bf00      	nop
 80096b0:	3714      	adds	r7, #20
 80096b2:	46bd      	mov	sp, r7
 80096b4:	bc80      	pop	{r7}
 80096b6:	4770      	bx	lr
 80096b8:	40010000 	.word	0x40010000
 80096bc:	40000400 	.word	0x40000400
 80096c0:	40000800 	.word	0x40000800
 80096c4:	40000c00 	.word	0x40000c00
 80096c8:	40010400 	.word	0x40010400
 80096cc:	40014000 	.word	0x40014000
 80096d0:	40014400 	.word	0x40014400
 80096d4:	40014800 	.word	0x40014800
 80096d8:	40001800 	.word	0x40001800
 80096dc:	40001c00 	.word	0x40001c00
 80096e0:	40002000 	.word	0x40002000

080096e4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80096e4:	b480      	push	{r7}
 80096e6:	b087      	sub	sp, #28
 80096e8:	af00      	add	r7, sp, #0
 80096ea:	6078      	str	r0, [r7, #4]
 80096ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	6a1b      	ldr	r3, [r3, #32]
 80096f2:	f023 0201 	bic.w	r2, r3, #1
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	6a1b      	ldr	r3, [r3, #32]
 80096fe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	685b      	ldr	r3, [r3, #4]
 8009704:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	699b      	ldr	r3, [r3, #24]
 800970a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800970c:	68fb      	ldr	r3, [r7, #12]
 800970e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009712:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009714:	68fb      	ldr	r3, [r7, #12]
 8009716:	f023 0303 	bic.w	r3, r3, #3
 800971a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800971c:	683b      	ldr	r3, [r7, #0]
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	68fa      	ldr	r2, [r7, #12]
 8009722:	4313      	orrs	r3, r2
 8009724:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8009726:	697b      	ldr	r3, [r7, #20]
 8009728:	f023 0302 	bic.w	r3, r3, #2
 800972c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800972e:	683b      	ldr	r3, [r7, #0]
 8009730:	689b      	ldr	r3, [r3, #8]
 8009732:	697a      	ldr	r2, [r7, #20]
 8009734:	4313      	orrs	r3, r2
 8009736:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	4a20      	ldr	r2, [pc, #128]	; (80097bc <TIM_OC1_SetConfig+0xd8>)
 800973c:	4293      	cmp	r3, r2
 800973e:	d003      	beq.n	8009748 <TIM_OC1_SetConfig+0x64>
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	4a1f      	ldr	r2, [pc, #124]	; (80097c0 <TIM_OC1_SetConfig+0xdc>)
 8009744:	4293      	cmp	r3, r2
 8009746:	d10c      	bne.n	8009762 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009748:	697b      	ldr	r3, [r7, #20]
 800974a:	f023 0308 	bic.w	r3, r3, #8
 800974e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009750:	683b      	ldr	r3, [r7, #0]
 8009752:	68db      	ldr	r3, [r3, #12]
 8009754:	697a      	ldr	r2, [r7, #20]
 8009756:	4313      	orrs	r3, r2
 8009758:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800975a:	697b      	ldr	r3, [r7, #20]
 800975c:	f023 0304 	bic.w	r3, r3, #4
 8009760:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	4a15      	ldr	r2, [pc, #84]	; (80097bc <TIM_OC1_SetConfig+0xd8>)
 8009766:	4293      	cmp	r3, r2
 8009768:	d003      	beq.n	8009772 <TIM_OC1_SetConfig+0x8e>
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	4a14      	ldr	r2, [pc, #80]	; (80097c0 <TIM_OC1_SetConfig+0xdc>)
 800976e:	4293      	cmp	r3, r2
 8009770:	d111      	bne.n	8009796 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8009772:	693b      	ldr	r3, [r7, #16]
 8009774:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009778:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800977a:	693b      	ldr	r3, [r7, #16]
 800977c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009780:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8009782:	683b      	ldr	r3, [r7, #0]
 8009784:	695b      	ldr	r3, [r3, #20]
 8009786:	693a      	ldr	r2, [r7, #16]
 8009788:	4313      	orrs	r3, r2
 800978a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800978c:	683b      	ldr	r3, [r7, #0]
 800978e:	699b      	ldr	r3, [r3, #24]
 8009790:	693a      	ldr	r2, [r7, #16]
 8009792:	4313      	orrs	r3, r2
 8009794:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	693a      	ldr	r2, [r7, #16]
 800979a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	68fa      	ldr	r2, [r7, #12]
 80097a0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80097a2:	683b      	ldr	r3, [r7, #0]
 80097a4:	685a      	ldr	r2, [r3, #4]
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	697a      	ldr	r2, [r7, #20]
 80097ae:	621a      	str	r2, [r3, #32]
}
 80097b0:	bf00      	nop
 80097b2:	371c      	adds	r7, #28
 80097b4:	46bd      	mov	sp, r7
 80097b6:	bc80      	pop	{r7}
 80097b8:	4770      	bx	lr
 80097ba:	bf00      	nop
 80097bc:	40010000 	.word	0x40010000
 80097c0:	40010400 	.word	0x40010400

080097c4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80097c4:	b480      	push	{r7}
 80097c6:	b087      	sub	sp, #28
 80097c8:	af00      	add	r7, sp, #0
 80097ca:	6078      	str	r0, [r7, #4]
 80097cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	6a1b      	ldr	r3, [r3, #32]
 80097d2:	f023 0210 	bic.w	r2, r3, #16
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	6a1b      	ldr	r3, [r3, #32]
 80097de:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	685b      	ldr	r3, [r3, #4]
 80097e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	699b      	ldr	r3, [r3, #24]
 80097ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80097ec:	68fb      	ldr	r3, [r7, #12]
 80097ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80097f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80097f4:	68fb      	ldr	r3, [r7, #12]
 80097f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80097fa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80097fc:	683b      	ldr	r3, [r7, #0]
 80097fe:	681b      	ldr	r3, [r3, #0]
 8009800:	021b      	lsls	r3, r3, #8
 8009802:	68fa      	ldr	r2, [r7, #12]
 8009804:	4313      	orrs	r3, r2
 8009806:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009808:	697b      	ldr	r3, [r7, #20]
 800980a:	f023 0320 	bic.w	r3, r3, #32
 800980e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009810:	683b      	ldr	r3, [r7, #0]
 8009812:	689b      	ldr	r3, [r3, #8]
 8009814:	011b      	lsls	r3, r3, #4
 8009816:	697a      	ldr	r2, [r7, #20]
 8009818:	4313      	orrs	r3, r2
 800981a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	4a21      	ldr	r2, [pc, #132]	; (80098a4 <TIM_OC2_SetConfig+0xe0>)
 8009820:	4293      	cmp	r3, r2
 8009822:	d003      	beq.n	800982c <TIM_OC2_SetConfig+0x68>
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	4a20      	ldr	r2, [pc, #128]	; (80098a8 <TIM_OC2_SetConfig+0xe4>)
 8009828:	4293      	cmp	r3, r2
 800982a:	d10d      	bne.n	8009848 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800982c:	697b      	ldr	r3, [r7, #20]
 800982e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009832:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009834:	683b      	ldr	r3, [r7, #0]
 8009836:	68db      	ldr	r3, [r3, #12]
 8009838:	011b      	lsls	r3, r3, #4
 800983a:	697a      	ldr	r2, [r7, #20]
 800983c:	4313      	orrs	r3, r2
 800983e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009840:	697b      	ldr	r3, [r7, #20]
 8009842:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009846:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	4a16      	ldr	r2, [pc, #88]	; (80098a4 <TIM_OC2_SetConfig+0xe0>)
 800984c:	4293      	cmp	r3, r2
 800984e:	d003      	beq.n	8009858 <TIM_OC2_SetConfig+0x94>
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	4a15      	ldr	r2, [pc, #84]	; (80098a8 <TIM_OC2_SetConfig+0xe4>)
 8009854:	4293      	cmp	r3, r2
 8009856:	d113      	bne.n	8009880 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009858:	693b      	ldr	r3, [r7, #16]
 800985a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800985e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009860:	693b      	ldr	r3, [r7, #16]
 8009862:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009866:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009868:	683b      	ldr	r3, [r7, #0]
 800986a:	695b      	ldr	r3, [r3, #20]
 800986c:	009b      	lsls	r3, r3, #2
 800986e:	693a      	ldr	r2, [r7, #16]
 8009870:	4313      	orrs	r3, r2
 8009872:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009874:	683b      	ldr	r3, [r7, #0]
 8009876:	699b      	ldr	r3, [r3, #24]
 8009878:	009b      	lsls	r3, r3, #2
 800987a:	693a      	ldr	r2, [r7, #16]
 800987c:	4313      	orrs	r3, r2
 800987e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	693a      	ldr	r2, [r7, #16]
 8009884:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	68fa      	ldr	r2, [r7, #12]
 800988a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800988c:	683b      	ldr	r3, [r7, #0]
 800988e:	685a      	ldr	r2, [r3, #4]
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	697a      	ldr	r2, [r7, #20]
 8009898:	621a      	str	r2, [r3, #32]
}
 800989a:	bf00      	nop
 800989c:	371c      	adds	r7, #28
 800989e:	46bd      	mov	sp, r7
 80098a0:	bc80      	pop	{r7}
 80098a2:	4770      	bx	lr
 80098a4:	40010000 	.word	0x40010000
 80098a8:	40010400 	.word	0x40010400

080098ac <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80098ac:	b480      	push	{r7}
 80098ae:	b087      	sub	sp, #28
 80098b0:	af00      	add	r7, sp, #0
 80098b2:	6078      	str	r0, [r7, #4]
 80098b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	6a1b      	ldr	r3, [r3, #32]
 80098ba:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	6a1b      	ldr	r3, [r3, #32]
 80098c6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	685b      	ldr	r3, [r3, #4]
 80098cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	69db      	ldr	r3, [r3, #28]
 80098d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80098d4:	68fb      	ldr	r3, [r7, #12]
 80098d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80098da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80098dc:	68fb      	ldr	r3, [r7, #12]
 80098de:	f023 0303 	bic.w	r3, r3, #3
 80098e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80098e4:	683b      	ldr	r3, [r7, #0]
 80098e6:	681b      	ldr	r3, [r3, #0]
 80098e8:	68fa      	ldr	r2, [r7, #12]
 80098ea:	4313      	orrs	r3, r2
 80098ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80098ee:	697b      	ldr	r3, [r7, #20]
 80098f0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80098f4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80098f6:	683b      	ldr	r3, [r7, #0]
 80098f8:	689b      	ldr	r3, [r3, #8]
 80098fa:	021b      	lsls	r3, r3, #8
 80098fc:	697a      	ldr	r2, [r7, #20]
 80098fe:	4313      	orrs	r3, r2
 8009900:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	4a21      	ldr	r2, [pc, #132]	; (800998c <TIM_OC3_SetConfig+0xe0>)
 8009906:	4293      	cmp	r3, r2
 8009908:	d003      	beq.n	8009912 <TIM_OC3_SetConfig+0x66>
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	4a20      	ldr	r2, [pc, #128]	; (8009990 <TIM_OC3_SetConfig+0xe4>)
 800990e:	4293      	cmp	r3, r2
 8009910:	d10d      	bne.n	800992e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009912:	697b      	ldr	r3, [r7, #20]
 8009914:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009918:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800991a:	683b      	ldr	r3, [r7, #0]
 800991c:	68db      	ldr	r3, [r3, #12]
 800991e:	021b      	lsls	r3, r3, #8
 8009920:	697a      	ldr	r2, [r7, #20]
 8009922:	4313      	orrs	r3, r2
 8009924:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009926:	697b      	ldr	r3, [r7, #20]
 8009928:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800992c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	4a16      	ldr	r2, [pc, #88]	; (800998c <TIM_OC3_SetConfig+0xe0>)
 8009932:	4293      	cmp	r3, r2
 8009934:	d003      	beq.n	800993e <TIM_OC3_SetConfig+0x92>
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	4a15      	ldr	r2, [pc, #84]	; (8009990 <TIM_OC3_SetConfig+0xe4>)
 800993a:	4293      	cmp	r3, r2
 800993c:	d113      	bne.n	8009966 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800993e:	693b      	ldr	r3, [r7, #16]
 8009940:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009944:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009946:	693b      	ldr	r3, [r7, #16]
 8009948:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800994c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800994e:	683b      	ldr	r3, [r7, #0]
 8009950:	695b      	ldr	r3, [r3, #20]
 8009952:	011b      	lsls	r3, r3, #4
 8009954:	693a      	ldr	r2, [r7, #16]
 8009956:	4313      	orrs	r3, r2
 8009958:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800995a:	683b      	ldr	r3, [r7, #0]
 800995c:	699b      	ldr	r3, [r3, #24]
 800995e:	011b      	lsls	r3, r3, #4
 8009960:	693a      	ldr	r2, [r7, #16]
 8009962:	4313      	orrs	r3, r2
 8009964:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	693a      	ldr	r2, [r7, #16]
 800996a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	68fa      	ldr	r2, [r7, #12]
 8009970:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009972:	683b      	ldr	r3, [r7, #0]
 8009974:	685a      	ldr	r2, [r3, #4]
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	697a      	ldr	r2, [r7, #20]
 800997e:	621a      	str	r2, [r3, #32]
}
 8009980:	bf00      	nop
 8009982:	371c      	adds	r7, #28
 8009984:	46bd      	mov	sp, r7
 8009986:	bc80      	pop	{r7}
 8009988:	4770      	bx	lr
 800998a:	bf00      	nop
 800998c:	40010000 	.word	0x40010000
 8009990:	40010400 	.word	0x40010400

08009994 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009994:	b480      	push	{r7}
 8009996:	b087      	sub	sp, #28
 8009998:	af00      	add	r7, sp, #0
 800999a:	6078      	str	r0, [r7, #4]
 800999c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	6a1b      	ldr	r3, [r3, #32]
 80099a2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	6a1b      	ldr	r3, [r3, #32]
 80099ae:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	685b      	ldr	r3, [r3, #4]
 80099b4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	69db      	ldr	r3, [r3, #28]
 80099ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80099bc:	68fb      	ldr	r3, [r7, #12]
 80099be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80099c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80099c4:	68fb      	ldr	r3, [r7, #12]
 80099c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80099ca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80099cc:	683b      	ldr	r3, [r7, #0]
 80099ce:	681b      	ldr	r3, [r3, #0]
 80099d0:	021b      	lsls	r3, r3, #8
 80099d2:	68fa      	ldr	r2, [r7, #12]
 80099d4:	4313      	orrs	r3, r2
 80099d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80099d8:	693b      	ldr	r3, [r7, #16]
 80099da:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80099de:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80099e0:	683b      	ldr	r3, [r7, #0]
 80099e2:	689b      	ldr	r3, [r3, #8]
 80099e4:	031b      	lsls	r3, r3, #12
 80099e6:	693a      	ldr	r2, [r7, #16]
 80099e8:	4313      	orrs	r3, r2
 80099ea:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	4a11      	ldr	r2, [pc, #68]	; (8009a34 <TIM_OC4_SetConfig+0xa0>)
 80099f0:	4293      	cmp	r3, r2
 80099f2:	d003      	beq.n	80099fc <TIM_OC4_SetConfig+0x68>
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	4a10      	ldr	r2, [pc, #64]	; (8009a38 <TIM_OC4_SetConfig+0xa4>)
 80099f8:	4293      	cmp	r3, r2
 80099fa:	d109      	bne.n	8009a10 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80099fc:	697b      	ldr	r3, [r7, #20]
 80099fe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009a02:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009a04:	683b      	ldr	r3, [r7, #0]
 8009a06:	695b      	ldr	r3, [r3, #20]
 8009a08:	019b      	lsls	r3, r3, #6
 8009a0a:	697a      	ldr	r2, [r7, #20]
 8009a0c:	4313      	orrs	r3, r2
 8009a0e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	697a      	ldr	r2, [r7, #20]
 8009a14:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	68fa      	ldr	r2, [r7, #12]
 8009a1a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009a1c:	683b      	ldr	r3, [r7, #0]
 8009a1e:	685a      	ldr	r2, [r3, #4]
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	693a      	ldr	r2, [r7, #16]
 8009a28:	621a      	str	r2, [r3, #32]
}
 8009a2a:	bf00      	nop
 8009a2c:	371c      	adds	r7, #28
 8009a2e:	46bd      	mov	sp, r7
 8009a30:	bc80      	pop	{r7}
 8009a32:	4770      	bx	lr
 8009a34:	40010000 	.word	0x40010000
 8009a38:	40010400 	.word	0x40010400

08009a3c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009a3c:	b480      	push	{r7}
 8009a3e:	b087      	sub	sp, #28
 8009a40:	af00      	add	r7, sp, #0
 8009a42:	60f8      	str	r0, [r7, #12]
 8009a44:	60b9      	str	r1, [r7, #8]
 8009a46:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009a48:	68bb      	ldr	r3, [r7, #8]
 8009a4a:	f003 031f 	and.w	r3, r3, #31
 8009a4e:	2201      	movs	r2, #1
 8009a50:	fa02 f303 	lsl.w	r3, r2, r3
 8009a54:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8009a56:	68fb      	ldr	r3, [r7, #12]
 8009a58:	6a1a      	ldr	r2, [r3, #32]
 8009a5a:	697b      	ldr	r3, [r7, #20]
 8009a5c:	43db      	mvns	r3, r3
 8009a5e:	401a      	ands	r2, r3
 8009a60:	68fb      	ldr	r3, [r7, #12]
 8009a62:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009a64:	68fb      	ldr	r3, [r7, #12]
 8009a66:	6a1a      	ldr	r2, [r3, #32]
 8009a68:	68bb      	ldr	r3, [r7, #8]
 8009a6a:	f003 031f 	and.w	r3, r3, #31
 8009a6e:	6879      	ldr	r1, [r7, #4]
 8009a70:	fa01 f303 	lsl.w	r3, r1, r3
 8009a74:	431a      	orrs	r2, r3
 8009a76:	68fb      	ldr	r3, [r7, #12]
 8009a78:	621a      	str	r2, [r3, #32]
}
 8009a7a:	bf00      	nop
 8009a7c:	371c      	adds	r7, #28
 8009a7e:	46bd      	mov	sp, r7
 8009a80:	bc80      	pop	{r7}
 8009a82:	4770      	bx	lr

08009a84 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009a84:	b480      	push	{r7}
 8009a86:	b085      	sub	sp, #20
 8009a88:	af00      	add	r7, sp, #0
 8009a8a:	6078      	str	r0, [r7, #4]
 8009a8c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009a94:	2b01      	cmp	r3, #1
 8009a96:	d101      	bne.n	8009a9c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009a98:	2302      	movs	r3, #2
 8009a9a:	e05a      	b.n	8009b52 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	2201      	movs	r2, #1
 8009aa0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	2202      	movs	r2, #2
 8009aa8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	685b      	ldr	r3, [r3, #4]
 8009ab2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	681b      	ldr	r3, [r3, #0]
 8009ab8:	689b      	ldr	r3, [r3, #8]
 8009aba:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009abc:	68fb      	ldr	r3, [r7, #12]
 8009abe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009ac2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009ac4:	683b      	ldr	r3, [r7, #0]
 8009ac6:	681b      	ldr	r3, [r3, #0]
 8009ac8:	68fa      	ldr	r2, [r7, #12]
 8009aca:	4313      	orrs	r3, r2
 8009acc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	681b      	ldr	r3, [r3, #0]
 8009ad2:	68fa      	ldr	r2, [r7, #12]
 8009ad4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	681b      	ldr	r3, [r3, #0]
 8009ada:	4a20      	ldr	r2, [pc, #128]	; (8009b5c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8009adc:	4293      	cmp	r3, r2
 8009ade:	d022      	beq.n	8009b26 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	681b      	ldr	r3, [r3, #0]
 8009ae4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009ae8:	d01d      	beq.n	8009b26 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	681b      	ldr	r3, [r3, #0]
 8009aee:	4a1c      	ldr	r2, [pc, #112]	; (8009b60 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8009af0:	4293      	cmp	r3, r2
 8009af2:	d018      	beq.n	8009b26 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	681b      	ldr	r3, [r3, #0]
 8009af8:	4a1a      	ldr	r2, [pc, #104]	; (8009b64 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8009afa:	4293      	cmp	r3, r2
 8009afc:	d013      	beq.n	8009b26 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	681b      	ldr	r3, [r3, #0]
 8009b02:	4a19      	ldr	r2, [pc, #100]	; (8009b68 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8009b04:	4293      	cmp	r3, r2
 8009b06:	d00e      	beq.n	8009b26 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	681b      	ldr	r3, [r3, #0]
 8009b0c:	4a17      	ldr	r2, [pc, #92]	; (8009b6c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8009b0e:	4293      	cmp	r3, r2
 8009b10:	d009      	beq.n	8009b26 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	681b      	ldr	r3, [r3, #0]
 8009b16:	4a16      	ldr	r2, [pc, #88]	; (8009b70 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8009b18:	4293      	cmp	r3, r2
 8009b1a:	d004      	beq.n	8009b26 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	681b      	ldr	r3, [r3, #0]
 8009b20:	4a14      	ldr	r2, [pc, #80]	; (8009b74 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8009b22:	4293      	cmp	r3, r2
 8009b24:	d10c      	bne.n	8009b40 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009b26:	68bb      	ldr	r3, [r7, #8]
 8009b28:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009b2c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009b2e:	683b      	ldr	r3, [r7, #0]
 8009b30:	685b      	ldr	r3, [r3, #4]
 8009b32:	68ba      	ldr	r2, [r7, #8]
 8009b34:	4313      	orrs	r3, r2
 8009b36:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	681b      	ldr	r3, [r3, #0]
 8009b3c:	68ba      	ldr	r2, [r7, #8]
 8009b3e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	2201      	movs	r2, #1
 8009b44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	2200      	movs	r2, #0
 8009b4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009b50:	2300      	movs	r3, #0
}
 8009b52:	4618      	mov	r0, r3
 8009b54:	3714      	adds	r7, #20
 8009b56:	46bd      	mov	sp, r7
 8009b58:	bc80      	pop	{r7}
 8009b5a:	4770      	bx	lr
 8009b5c:	40010000 	.word	0x40010000
 8009b60:	40000400 	.word	0x40000400
 8009b64:	40000800 	.word	0x40000800
 8009b68:	40000c00 	.word	0x40000c00
 8009b6c:	40010400 	.word	0x40010400
 8009b70:	40014000 	.word	0x40014000
 8009b74:	40001800 	.word	0x40001800

08009b78 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009b78:	b480      	push	{r7}
 8009b7a:	b083      	sub	sp, #12
 8009b7c:	af00      	add	r7, sp, #0
 8009b7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009b80:	bf00      	nop
 8009b82:	370c      	adds	r7, #12
 8009b84:	46bd      	mov	sp, r7
 8009b86:	bc80      	pop	{r7}
 8009b88:	4770      	bx	lr

08009b8a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009b8a:	b480      	push	{r7}
 8009b8c:	b083      	sub	sp, #12
 8009b8e:	af00      	add	r7, sp, #0
 8009b90:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009b92:	bf00      	nop
 8009b94:	370c      	adds	r7, #12
 8009b96:	46bd      	mov	sp, r7
 8009b98:	bc80      	pop	{r7}
 8009b9a:	4770      	bx	lr

08009b9c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009b9c:	b084      	sub	sp, #16
 8009b9e:	b580      	push	{r7, lr}
 8009ba0:	b084      	sub	sp, #16
 8009ba2:	af00      	add	r7, sp, #0
 8009ba4:	6078      	str	r0, [r7, #4]
 8009ba6:	f107 001c 	add.w	r0, r7, #28
 8009baa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8009bae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009bb0:	2b01      	cmp	r3, #1
 8009bb2:	d122      	bne.n	8009bfa <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009bb8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	68db      	ldr	r3, [r3, #12]
 8009bc4:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8009bc8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009bcc:	687a      	ldr	r2, [r7, #4]
 8009bce:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	68db      	ldr	r3, [r3, #12]
 8009bd4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8009bdc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009bde:	2b01      	cmp	r3, #1
 8009be0:	d105      	bne.n	8009bee <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	68db      	ldr	r3, [r3, #12]
 8009be6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8009bee:	6878      	ldr	r0, [r7, #4]
 8009bf0:	f001 fafa 	bl	800b1e8 <USB_CoreReset>
 8009bf4:	4603      	mov	r3, r0
 8009bf6:	73fb      	strb	r3, [r7, #15]
 8009bf8:	e010      	b.n	8009c1c <USB_CoreInit+0x80>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	68db      	ldr	r3, [r3, #12]
 8009bfe:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8009c06:	6878      	ldr	r0, [r7, #4]
 8009c08:	f001 faee 	bl	800b1e8 <USB_CoreReset>
 8009c0c:	4603      	mov	r3, r0
 8009c0e:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c14:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8009c1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c1e:	2b01      	cmp	r3, #1
 8009c20:	d10b      	bne.n	8009c3a <USB_CoreInit+0x9e>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	689b      	ldr	r3, [r3, #8]
 8009c26:	f043 0206 	orr.w	r2, r3, #6
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	689b      	ldr	r3, [r3, #8]
 8009c32:	f043 0220 	orr.w	r2, r3, #32
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8009c3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c3c:	4618      	mov	r0, r3
 8009c3e:	3710      	adds	r7, #16
 8009c40:	46bd      	mov	sp, r7
 8009c42:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009c46:	b004      	add	sp, #16
 8009c48:	4770      	bx	lr
	...

08009c4c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8009c4c:	b480      	push	{r7}
 8009c4e:	b087      	sub	sp, #28
 8009c50:	af00      	add	r7, sp, #0
 8009c52:	60f8      	str	r0, [r7, #12]
 8009c54:	60b9      	str	r1, [r7, #8]
 8009c56:	4613      	mov	r3, r2
 8009c58:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8009c5a:	79fb      	ldrb	r3, [r7, #7]
 8009c5c:	2b02      	cmp	r3, #2
 8009c5e:	d165      	bne.n	8009d2c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8009c60:	68bb      	ldr	r3, [r7, #8]
 8009c62:	4a41      	ldr	r2, [pc, #260]	; (8009d68 <USB_SetTurnaroundTime+0x11c>)
 8009c64:	4293      	cmp	r3, r2
 8009c66:	d906      	bls.n	8009c76 <USB_SetTurnaroundTime+0x2a>
 8009c68:	68bb      	ldr	r3, [r7, #8]
 8009c6a:	4a40      	ldr	r2, [pc, #256]	; (8009d6c <USB_SetTurnaroundTime+0x120>)
 8009c6c:	4293      	cmp	r3, r2
 8009c6e:	d202      	bcs.n	8009c76 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8009c70:	230f      	movs	r3, #15
 8009c72:	617b      	str	r3, [r7, #20]
 8009c74:	e062      	b.n	8009d3c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8009c76:	68bb      	ldr	r3, [r7, #8]
 8009c78:	4a3c      	ldr	r2, [pc, #240]	; (8009d6c <USB_SetTurnaroundTime+0x120>)
 8009c7a:	4293      	cmp	r3, r2
 8009c7c:	d306      	bcc.n	8009c8c <USB_SetTurnaroundTime+0x40>
 8009c7e:	68bb      	ldr	r3, [r7, #8]
 8009c80:	4a3b      	ldr	r2, [pc, #236]	; (8009d70 <USB_SetTurnaroundTime+0x124>)
 8009c82:	4293      	cmp	r3, r2
 8009c84:	d202      	bcs.n	8009c8c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8009c86:	230e      	movs	r3, #14
 8009c88:	617b      	str	r3, [r7, #20]
 8009c8a:	e057      	b.n	8009d3c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8009c8c:	68bb      	ldr	r3, [r7, #8]
 8009c8e:	4a38      	ldr	r2, [pc, #224]	; (8009d70 <USB_SetTurnaroundTime+0x124>)
 8009c90:	4293      	cmp	r3, r2
 8009c92:	d306      	bcc.n	8009ca2 <USB_SetTurnaroundTime+0x56>
 8009c94:	68bb      	ldr	r3, [r7, #8]
 8009c96:	4a37      	ldr	r2, [pc, #220]	; (8009d74 <USB_SetTurnaroundTime+0x128>)
 8009c98:	4293      	cmp	r3, r2
 8009c9a:	d202      	bcs.n	8009ca2 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8009c9c:	230d      	movs	r3, #13
 8009c9e:	617b      	str	r3, [r7, #20]
 8009ca0:	e04c      	b.n	8009d3c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8009ca2:	68bb      	ldr	r3, [r7, #8]
 8009ca4:	4a33      	ldr	r2, [pc, #204]	; (8009d74 <USB_SetTurnaroundTime+0x128>)
 8009ca6:	4293      	cmp	r3, r2
 8009ca8:	d306      	bcc.n	8009cb8 <USB_SetTurnaroundTime+0x6c>
 8009caa:	68bb      	ldr	r3, [r7, #8]
 8009cac:	4a32      	ldr	r2, [pc, #200]	; (8009d78 <USB_SetTurnaroundTime+0x12c>)
 8009cae:	4293      	cmp	r3, r2
 8009cb0:	d802      	bhi.n	8009cb8 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8009cb2:	230c      	movs	r3, #12
 8009cb4:	617b      	str	r3, [r7, #20]
 8009cb6:	e041      	b.n	8009d3c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8009cb8:	68bb      	ldr	r3, [r7, #8]
 8009cba:	4a2f      	ldr	r2, [pc, #188]	; (8009d78 <USB_SetTurnaroundTime+0x12c>)
 8009cbc:	4293      	cmp	r3, r2
 8009cbe:	d906      	bls.n	8009cce <USB_SetTurnaroundTime+0x82>
 8009cc0:	68bb      	ldr	r3, [r7, #8]
 8009cc2:	4a2e      	ldr	r2, [pc, #184]	; (8009d7c <USB_SetTurnaroundTime+0x130>)
 8009cc4:	4293      	cmp	r3, r2
 8009cc6:	d802      	bhi.n	8009cce <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8009cc8:	230b      	movs	r3, #11
 8009cca:	617b      	str	r3, [r7, #20]
 8009ccc:	e036      	b.n	8009d3c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8009cce:	68bb      	ldr	r3, [r7, #8]
 8009cd0:	4a2a      	ldr	r2, [pc, #168]	; (8009d7c <USB_SetTurnaroundTime+0x130>)
 8009cd2:	4293      	cmp	r3, r2
 8009cd4:	d906      	bls.n	8009ce4 <USB_SetTurnaroundTime+0x98>
 8009cd6:	68bb      	ldr	r3, [r7, #8]
 8009cd8:	4a29      	ldr	r2, [pc, #164]	; (8009d80 <USB_SetTurnaroundTime+0x134>)
 8009cda:	4293      	cmp	r3, r2
 8009cdc:	d802      	bhi.n	8009ce4 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8009cde:	230a      	movs	r3, #10
 8009ce0:	617b      	str	r3, [r7, #20]
 8009ce2:	e02b      	b.n	8009d3c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8009ce4:	68bb      	ldr	r3, [r7, #8]
 8009ce6:	4a26      	ldr	r2, [pc, #152]	; (8009d80 <USB_SetTurnaroundTime+0x134>)
 8009ce8:	4293      	cmp	r3, r2
 8009cea:	d906      	bls.n	8009cfa <USB_SetTurnaroundTime+0xae>
 8009cec:	68bb      	ldr	r3, [r7, #8]
 8009cee:	4a25      	ldr	r2, [pc, #148]	; (8009d84 <USB_SetTurnaroundTime+0x138>)
 8009cf0:	4293      	cmp	r3, r2
 8009cf2:	d202      	bcs.n	8009cfa <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8009cf4:	2309      	movs	r3, #9
 8009cf6:	617b      	str	r3, [r7, #20]
 8009cf8:	e020      	b.n	8009d3c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8009cfa:	68bb      	ldr	r3, [r7, #8]
 8009cfc:	4a21      	ldr	r2, [pc, #132]	; (8009d84 <USB_SetTurnaroundTime+0x138>)
 8009cfe:	4293      	cmp	r3, r2
 8009d00:	d306      	bcc.n	8009d10 <USB_SetTurnaroundTime+0xc4>
 8009d02:	68bb      	ldr	r3, [r7, #8]
 8009d04:	4a20      	ldr	r2, [pc, #128]	; (8009d88 <USB_SetTurnaroundTime+0x13c>)
 8009d06:	4293      	cmp	r3, r2
 8009d08:	d802      	bhi.n	8009d10 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8009d0a:	2308      	movs	r3, #8
 8009d0c:	617b      	str	r3, [r7, #20]
 8009d0e:	e015      	b.n	8009d3c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8009d10:	68bb      	ldr	r3, [r7, #8]
 8009d12:	4a1d      	ldr	r2, [pc, #116]	; (8009d88 <USB_SetTurnaroundTime+0x13c>)
 8009d14:	4293      	cmp	r3, r2
 8009d16:	d906      	bls.n	8009d26 <USB_SetTurnaroundTime+0xda>
 8009d18:	68bb      	ldr	r3, [r7, #8]
 8009d1a:	4a1c      	ldr	r2, [pc, #112]	; (8009d8c <USB_SetTurnaroundTime+0x140>)
 8009d1c:	4293      	cmp	r3, r2
 8009d1e:	d202      	bcs.n	8009d26 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8009d20:	2307      	movs	r3, #7
 8009d22:	617b      	str	r3, [r7, #20]
 8009d24:	e00a      	b.n	8009d3c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8009d26:	2306      	movs	r3, #6
 8009d28:	617b      	str	r3, [r7, #20]
 8009d2a:	e007      	b.n	8009d3c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8009d2c:	79fb      	ldrb	r3, [r7, #7]
 8009d2e:	2b00      	cmp	r3, #0
 8009d30:	d102      	bne.n	8009d38 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8009d32:	2309      	movs	r3, #9
 8009d34:	617b      	str	r3, [r7, #20]
 8009d36:	e001      	b.n	8009d3c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8009d38:	2309      	movs	r3, #9
 8009d3a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8009d3c:	68fb      	ldr	r3, [r7, #12]
 8009d3e:	68db      	ldr	r3, [r3, #12]
 8009d40:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8009d44:	68fb      	ldr	r3, [r7, #12]
 8009d46:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8009d48:	68fb      	ldr	r3, [r7, #12]
 8009d4a:	68da      	ldr	r2, [r3, #12]
 8009d4c:	697b      	ldr	r3, [r7, #20]
 8009d4e:	029b      	lsls	r3, r3, #10
 8009d50:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8009d54:	431a      	orrs	r2, r3
 8009d56:	68fb      	ldr	r3, [r7, #12]
 8009d58:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8009d5a:	2300      	movs	r3, #0
}
 8009d5c:	4618      	mov	r0, r3
 8009d5e:	371c      	adds	r7, #28
 8009d60:	46bd      	mov	sp, r7
 8009d62:	bc80      	pop	{r7}
 8009d64:	4770      	bx	lr
 8009d66:	bf00      	nop
 8009d68:	00d8acbf 	.word	0x00d8acbf
 8009d6c:	00e4e1c0 	.word	0x00e4e1c0
 8009d70:	00f42400 	.word	0x00f42400
 8009d74:	01067380 	.word	0x01067380
 8009d78:	011a499f 	.word	0x011a499f
 8009d7c:	01312cff 	.word	0x01312cff
 8009d80:	014ca43f 	.word	0x014ca43f
 8009d84:	016e3600 	.word	0x016e3600
 8009d88:	01a6ab1f 	.word	0x01a6ab1f
 8009d8c:	01e84800 	.word	0x01e84800

08009d90 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009d90:	b480      	push	{r7}
 8009d92:	b083      	sub	sp, #12
 8009d94:	af00      	add	r7, sp, #0
 8009d96:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	689b      	ldr	r3, [r3, #8]
 8009d9c:	f043 0201 	orr.w	r2, r3, #1
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009da4:	2300      	movs	r3, #0
}
 8009da6:	4618      	mov	r0, r3
 8009da8:	370c      	adds	r7, #12
 8009daa:	46bd      	mov	sp, r7
 8009dac:	bc80      	pop	{r7}
 8009dae:	4770      	bx	lr

08009db0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009db0:	b480      	push	{r7}
 8009db2:	b083      	sub	sp, #12
 8009db4:	af00      	add	r7, sp, #0
 8009db6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	689b      	ldr	r3, [r3, #8]
 8009dbc:	f023 0201 	bic.w	r2, r3, #1
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009dc4:	2300      	movs	r3, #0
}
 8009dc6:	4618      	mov	r0, r3
 8009dc8:	370c      	adds	r7, #12
 8009dca:	46bd      	mov	sp, r7
 8009dcc:	bc80      	pop	{r7}
 8009dce:	4770      	bx	lr

08009dd0 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8009dd0:	b580      	push	{r7, lr}
 8009dd2:	b084      	sub	sp, #16
 8009dd4:	af00      	add	r7, sp, #0
 8009dd6:	6078      	str	r0, [r7, #4]
 8009dd8:	460b      	mov	r3, r1
 8009dda:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8009ddc:	2300      	movs	r3, #0
 8009dde:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	68db      	ldr	r3, [r3, #12]
 8009de4:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8009dec:	78fb      	ldrb	r3, [r7, #3]
 8009dee:	2b01      	cmp	r3, #1
 8009df0:	d115      	bne.n	8009e1e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	68db      	ldr	r3, [r3, #12]
 8009df6:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8009dfe:	2001      	movs	r0, #1
 8009e00:	f7fb f9fe 	bl	8005200 <HAL_Delay>
      ms++;
 8009e04:	68fb      	ldr	r3, [r7, #12]
 8009e06:	3301      	adds	r3, #1
 8009e08:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8009e0a:	6878      	ldr	r0, [r7, #4]
 8009e0c:	f001 f961 	bl	800b0d2 <USB_GetMode>
 8009e10:	4603      	mov	r3, r0
 8009e12:	2b01      	cmp	r3, #1
 8009e14:	d01e      	beq.n	8009e54 <USB_SetCurrentMode+0x84>
 8009e16:	68fb      	ldr	r3, [r7, #12]
 8009e18:	2b31      	cmp	r3, #49	; 0x31
 8009e1a:	d9f0      	bls.n	8009dfe <USB_SetCurrentMode+0x2e>
 8009e1c:	e01a      	b.n	8009e54 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8009e1e:	78fb      	ldrb	r3, [r7, #3]
 8009e20:	2b00      	cmp	r3, #0
 8009e22:	d115      	bne.n	8009e50 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	68db      	ldr	r3, [r3, #12]
 8009e28:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8009e30:	2001      	movs	r0, #1
 8009e32:	f7fb f9e5 	bl	8005200 <HAL_Delay>
      ms++;
 8009e36:	68fb      	ldr	r3, [r7, #12]
 8009e38:	3301      	adds	r3, #1
 8009e3a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8009e3c:	6878      	ldr	r0, [r7, #4]
 8009e3e:	f001 f948 	bl	800b0d2 <USB_GetMode>
 8009e42:	4603      	mov	r3, r0
 8009e44:	2b00      	cmp	r3, #0
 8009e46:	d005      	beq.n	8009e54 <USB_SetCurrentMode+0x84>
 8009e48:	68fb      	ldr	r3, [r7, #12]
 8009e4a:	2b31      	cmp	r3, #49	; 0x31
 8009e4c:	d9f0      	bls.n	8009e30 <USB_SetCurrentMode+0x60>
 8009e4e:	e001      	b.n	8009e54 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8009e50:	2301      	movs	r3, #1
 8009e52:	e005      	b.n	8009e60 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8009e54:	68fb      	ldr	r3, [r7, #12]
 8009e56:	2b32      	cmp	r3, #50	; 0x32
 8009e58:	d101      	bne.n	8009e5e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8009e5a:	2301      	movs	r3, #1
 8009e5c:	e000      	b.n	8009e60 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8009e5e:	2300      	movs	r3, #0
}
 8009e60:	4618      	mov	r0, r3
 8009e62:	3710      	adds	r7, #16
 8009e64:	46bd      	mov	sp, r7
 8009e66:	bd80      	pop	{r7, pc}

08009e68 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009e68:	b084      	sub	sp, #16
 8009e6a:	b580      	push	{r7, lr}
 8009e6c:	b086      	sub	sp, #24
 8009e6e:	af00      	add	r7, sp, #0
 8009e70:	6078      	str	r0, [r7, #4]
 8009e72:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8009e76:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8009e7a:	2300      	movs	r3, #0
 8009e7c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8009e82:	2300      	movs	r3, #0
 8009e84:	613b      	str	r3, [r7, #16]
 8009e86:	e009      	b.n	8009e9c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8009e88:	687a      	ldr	r2, [r7, #4]
 8009e8a:	693b      	ldr	r3, [r7, #16]
 8009e8c:	3340      	adds	r3, #64	; 0x40
 8009e8e:	009b      	lsls	r3, r3, #2
 8009e90:	4413      	add	r3, r2
 8009e92:	2200      	movs	r2, #0
 8009e94:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8009e96:	693b      	ldr	r3, [r7, #16]
 8009e98:	3301      	adds	r3, #1
 8009e9a:	613b      	str	r3, [r7, #16]
 8009e9c:	693b      	ldr	r3, [r7, #16]
 8009e9e:	2b0e      	cmp	r3, #14
 8009ea0:	d9f2      	bls.n	8009e88 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8009ea2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009ea4:	2b00      	cmp	r3, #0
 8009ea6:	d11c      	bne.n	8009ee2 <USB_DevInit+0x7a>
  {
    /*
     * disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009ea8:	68fb      	ldr	r3, [r7, #12]
 8009eaa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009eae:	685b      	ldr	r3, [r3, #4]
 8009eb0:	68fa      	ldr	r2, [r7, #12]
 8009eb2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009eb6:	f043 0302 	orr.w	r3, r3, #2
 8009eba:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ec0:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ecc:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ed8:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	639a      	str	r2, [r3, #56]	; 0x38
 8009ee0:	e00b      	b.n	8009efa <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ee6:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ef2:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8009efa:	68fb      	ldr	r3, [r7, #12]
 8009efc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009f00:	461a      	mov	r2, r3
 8009f02:	2300      	movs	r3, #0
 8009f04:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8009f06:	68fb      	ldr	r3, [r7, #12]
 8009f08:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009f0c:	4619      	mov	r1, r3
 8009f0e:	68fb      	ldr	r3, [r7, #12]
 8009f10:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009f14:	461a      	mov	r2, r3
 8009f16:	680b      	ldr	r3, [r1, #0]
 8009f18:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8009f1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f1c:	2b01      	cmp	r3, #1
 8009f1e:	d10c      	bne.n	8009f3a <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8009f20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f22:	2b00      	cmp	r3, #0
 8009f24:	d104      	bne.n	8009f30 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8009f26:	2100      	movs	r1, #0
 8009f28:	6878      	ldr	r0, [r7, #4]
 8009f2a:	f000 f945 	bl	800a1b8 <USB_SetDevSpeed>
 8009f2e:	e008      	b.n	8009f42 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8009f30:	2101      	movs	r1, #1
 8009f32:	6878      	ldr	r0, [r7, #4]
 8009f34:	f000 f940 	bl	800a1b8 <USB_SetDevSpeed>
 8009f38:	e003      	b.n	8009f42 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8009f3a:	2103      	movs	r1, #3
 8009f3c:	6878      	ldr	r0, [r7, #4]
 8009f3e:	f000 f93b 	bl	800a1b8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8009f42:	2110      	movs	r1, #16
 8009f44:	6878      	ldr	r0, [r7, #4]
 8009f46:	f000 f8f3 	bl	800a130 <USB_FlushTxFifo>
 8009f4a:	4603      	mov	r3, r0
 8009f4c:	2b00      	cmp	r3, #0
 8009f4e:	d001      	beq.n	8009f54 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8009f50:	2301      	movs	r3, #1
 8009f52:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8009f54:	6878      	ldr	r0, [r7, #4]
 8009f56:	f000 f90f 	bl	800a178 <USB_FlushRxFifo>
 8009f5a:	4603      	mov	r3, r0
 8009f5c:	2b00      	cmp	r3, #0
 8009f5e:	d001      	beq.n	8009f64 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8009f60:	2301      	movs	r3, #1
 8009f62:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8009f64:	68fb      	ldr	r3, [r7, #12]
 8009f66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009f6a:	461a      	mov	r2, r3
 8009f6c:	2300      	movs	r3, #0
 8009f6e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8009f70:	68fb      	ldr	r3, [r7, #12]
 8009f72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009f76:	461a      	mov	r2, r3
 8009f78:	2300      	movs	r3, #0
 8009f7a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8009f7c:	68fb      	ldr	r3, [r7, #12]
 8009f7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009f82:	461a      	mov	r2, r3
 8009f84:	2300      	movs	r3, #0
 8009f86:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009f88:	2300      	movs	r3, #0
 8009f8a:	613b      	str	r3, [r7, #16]
 8009f8c:	e043      	b.n	800a016 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009f8e:	693b      	ldr	r3, [r7, #16]
 8009f90:	015a      	lsls	r2, r3, #5
 8009f92:	68fb      	ldr	r3, [r7, #12]
 8009f94:	4413      	add	r3, r2
 8009f96:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009f9a:	681b      	ldr	r3, [r3, #0]
 8009f9c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009fa0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009fa4:	d118      	bne.n	8009fd8 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8009fa6:	693b      	ldr	r3, [r7, #16]
 8009fa8:	2b00      	cmp	r3, #0
 8009faa:	d10a      	bne.n	8009fc2 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8009fac:	693b      	ldr	r3, [r7, #16]
 8009fae:	015a      	lsls	r2, r3, #5
 8009fb0:	68fb      	ldr	r3, [r7, #12]
 8009fb2:	4413      	add	r3, r2
 8009fb4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009fb8:	461a      	mov	r2, r3
 8009fba:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009fbe:	6013      	str	r3, [r2, #0]
 8009fc0:	e013      	b.n	8009fea <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8009fc2:	693b      	ldr	r3, [r7, #16]
 8009fc4:	015a      	lsls	r2, r3, #5
 8009fc6:	68fb      	ldr	r3, [r7, #12]
 8009fc8:	4413      	add	r3, r2
 8009fca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009fce:	461a      	mov	r2, r3
 8009fd0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8009fd4:	6013      	str	r3, [r2, #0]
 8009fd6:	e008      	b.n	8009fea <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8009fd8:	693b      	ldr	r3, [r7, #16]
 8009fda:	015a      	lsls	r2, r3, #5
 8009fdc:	68fb      	ldr	r3, [r7, #12]
 8009fde:	4413      	add	r3, r2
 8009fe0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009fe4:	461a      	mov	r2, r3
 8009fe6:	2300      	movs	r3, #0
 8009fe8:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8009fea:	693b      	ldr	r3, [r7, #16]
 8009fec:	015a      	lsls	r2, r3, #5
 8009fee:	68fb      	ldr	r3, [r7, #12]
 8009ff0:	4413      	add	r3, r2
 8009ff2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009ff6:	461a      	mov	r2, r3
 8009ff8:	2300      	movs	r3, #0
 8009ffa:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8009ffc:	693b      	ldr	r3, [r7, #16]
 8009ffe:	015a      	lsls	r2, r3, #5
 800a000:	68fb      	ldr	r3, [r7, #12]
 800a002:	4413      	add	r3, r2
 800a004:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a008:	461a      	mov	r2, r3
 800a00a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800a00e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a010:	693b      	ldr	r3, [r7, #16]
 800a012:	3301      	adds	r3, #1
 800a014:	613b      	str	r3, [r7, #16]
 800a016:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a018:	693a      	ldr	r2, [r7, #16]
 800a01a:	429a      	cmp	r2, r3
 800a01c:	d3b7      	bcc.n	8009f8e <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a01e:	2300      	movs	r3, #0
 800a020:	613b      	str	r3, [r7, #16]
 800a022:	e043      	b.n	800a0ac <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a024:	693b      	ldr	r3, [r7, #16]
 800a026:	015a      	lsls	r2, r3, #5
 800a028:	68fb      	ldr	r3, [r7, #12]
 800a02a:	4413      	add	r3, r2
 800a02c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a030:	681b      	ldr	r3, [r3, #0]
 800a032:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a036:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a03a:	d118      	bne.n	800a06e <USB_DevInit+0x206>
    {
      if (i == 0U)
 800a03c:	693b      	ldr	r3, [r7, #16]
 800a03e:	2b00      	cmp	r3, #0
 800a040:	d10a      	bne.n	800a058 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800a042:	693b      	ldr	r3, [r7, #16]
 800a044:	015a      	lsls	r2, r3, #5
 800a046:	68fb      	ldr	r3, [r7, #12]
 800a048:	4413      	add	r3, r2
 800a04a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a04e:	461a      	mov	r2, r3
 800a050:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800a054:	6013      	str	r3, [r2, #0]
 800a056:	e013      	b.n	800a080 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800a058:	693b      	ldr	r3, [r7, #16]
 800a05a:	015a      	lsls	r2, r3, #5
 800a05c:	68fb      	ldr	r3, [r7, #12]
 800a05e:	4413      	add	r3, r2
 800a060:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a064:	461a      	mov	r2, r3
 800a066:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800a06a:	6013      	str	r3, [r2, #0]
 800a06c:	e008      	b.n	800a080 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800a06e:	693b      	ldr	r3, [r7, #16]
 800a070:	015a      	lsls	r2, r3, #5
 800a072:	68fb      	ldr	r3, [r7, #12]
 800a074:	4413      	add	r3, r2
 800a076:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a07a:	461a      	mov	r2, r3
 800a07c:	2300      	movs	r3, #0
 800a07e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800a080:	693b      	ldr	r3, [r7, #16]
 800a082:	015a      	lsls	r2, r3, #5
 800a084:	68fb      	ldr	r3, [r7, #12]
 800a086:	4413      	add	r3, r2
 800a088:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a08c:	461a      	mov	r2, r3
 800a08e:	2300      	movs	r3, #0
 800a090:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800a092:	693b      	ldr	r3, [r7, #16]
 800a094:	015a      	lsls	r2, r3, #5
 800a096:	68fb      	ldr	r3, [r7, #12]
 800a098:	4413      	add	r3, r2
 800a09a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a09e:	461a      	mov	r2, r3
 800a0a0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800a0a4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a0a6:	693b      	ldr	r3, [r7, #16]
 800a0a8:	3301      	adds	r3, #1
 800a0aa:	613b      	str	r3, [r7, #16]
 800a0ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0ae:	693a      	ldr	r2, [r7, #16]
 800a0b0:	429a      	cmp	r2, r3
 800a0b2:	d3b7      	bcc.n	800a024 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800a0b4:	68fb      	ldr	r3, [r7, #12]
 800a0b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a0ba:	691b      	ldr	r3, [r3, #16]
 800a0bc:	68fa      	ldr	r2, [r7, #12]
 800a0be:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a0c2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a0c6:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	2200      	movs	r2, #0
 800a0cc:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800a0d4:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800a0d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0d8:	2b00      	cmp	r3, #0
 800a0da:	d105      	bne.n	800a0e8 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	699b      	ldr	r3, [r3, #24]
 800a0e0:	f043 0210 	orr.w	r2, r3, #16
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	699a      	ldr	r2, [r3, #24]
 800a0ec:	4b0f      	ldr	r3, [pc, #60]	; (800a12c <USB_DevInit+0x2c4>)
 800a0ee:	4313      	orrs	r3, r2
 800a0f0:	687a      	ldr	r2, [r7, #4]
 800a0f2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800a0f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a0f6:	2b00      	cmp	r3, #0
 800a0f8:	d005      	beq.n	800a106 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	699b      	ldr	r3, [r3, #24]
 800a0fe:	f043 0208 	orr.w	r2, r3, #8
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800a106:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a108:	2b01      	cmp	r3, #1
 800a10a:	d107      	bne.n	800a11c <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	699b      	ldr	r3, [r3, #24]
 800a110:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a114:	f043 0304 	orr.w	r3, r3, #4
 800a118:	687a      	ldr	r2, [r7, #4]
 800a11a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800a11c:	7dfb      	ldrb	r3, [r7, #23]
}
 800a11e:	4618      	mov	r0, r3
 800a120:	3718      	adds	r7, #24
 800a122:	46bd      	mov	sp, r7
 800a124:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a128:	b004      	add	sp, #16
 800a12a:	4770      	bx	lr
 800a12c:	803c3800 	.word	0x803c3800

0800a130 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800a130:	b480      	push	{r7}
 800a132:	b085      	sub	sp, #20
 800a134:	af00      	add	r7, sp, #0
 800a136:	6078      	str	r0, [r7, #4]
 800a138:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800a13a:	2300      	movs	r3, #0
 800a13c:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800a13e:	683b      	ldr	r3, [r7, #0]
 800a140:	019b      	lsls	r3, r3, #6
 800a142:	f043 0220 	orr.w	r2, r3, #32
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800a14a:	68fb      	ldr	r3, [r7, #12]
 800a14c:	3301      	adds	r3, #1
 800a14e:	60fb      	str	r3, [r7, #12]
 800a150:	68fb      	ldr	r3, [r7, #12]
 800a152:	4a08      	ldr	r2, [pc, #32]	; (800a174 <USB_FlushTxFifo+0x44>)
 800a154:	4293      	cmp	r3, r2
 800a156:	d901      	bls.n	800a15c <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800a158:	2303      	movs	r3, #3
 800a15a:	e006      	b.n	800a16a <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	691b      	ldr	r3, [r3, #16]
 800a160:	f003 0320 	and.w	r3, r3, #32
 800a164:	2b20      	cmp	r3, #32
 800a166:	d0f0      	beq.n	800a14a <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800a168:	2300      	movs	r3, #0
}
 800a16a:	4618      	mov	r0, r3
 800a16c:	3714      	adds	r7, #20
 800a16e:	46bd      	mov	sp, r7
 800a170:	bc80      	pop	{r7}
 800a172:	4770      	bx	lr
 800a174:	00030d40 	.word	0x00030d40

0800a178 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800a178:	b480      	push	{r7}
 800a17a:	b085      	sub	sp, #20
 800a17c:	af00      	add	r7, sp, #0
 800a17e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800a180:	2300      	movs	r3, #0
 800a182:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	2210      	movs	r2, #16
 800a188:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800a18a:	68fb      	ldr	r3, [r7, #12]
 800a18c:	3301      	adds	r3, #1
 800a18e:	60fb      	str	r3, [r7, #12]
 800a190:	68fb      	ldr	r3, [r7, #12]
 800a192:	4a08      	ldr	r2, [pc, #32]	; (800a1b4 <USB_FlushRxFifo+0x3c>)
 800a194:	4293      	cmp	r3, r2
 800a196:	d901      	bls.n	800a19c <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800a198:	2303      	movs	r3, #3
 800a19a:	e006      	b.n	800a1aa <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	691b      	ldr	r3, [r3, #16]
 800a1a0:	f003 0310 	and.w	r3, r3, #16
 800a1a4:	2b10      	cmp	r3, #16
 800a1a6:	d0f0      	beq.n	800a18a <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800a1a8:	2300      	movs	r3, #0
}
 800a1aa:	4618      	mov	r0, r3
 800a1ac:	3714      	adds	r7, #20
 800a1ae:	46bd      	mov	sp, r7
 800a1b0:	bc80      	pop	{r7}
 800a1b2:	4770      	bx	lr
 800a1b4:	00030d40 	.word	0x00030d40

0800a1b8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800a1b8:	b480      	push	{r7}
 800a1ba:	b085      	sub	sp, #20
 800a1bc:	af00      	add	r7, sp, #0
 800a1be:	6078      	str	r0, [r7, #4]
 800a1c0:	460b      	mov	r3, r1
 800a1c2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800a1c8:	68fb      	ldr	r3, [r7, #12]
 800a1ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a1ce:	681a      	ldr	r2, [r3, #0]
 800a1d0:	78fb      	ldrb	r3, [r7, #3]
 800a1d2:	68f9      	ldr	r1, [r7, #12]
 800a1d4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a1d8:	4313      	orrs	r3, r2
 800a1da:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800a1dc:	2300      	movs	r3, #0
}
 800a1de:	4618      	mov	r0, r3
 800a1e0:	3714      	adds	r7, #20
 800a1e2:	46bd      	mov	sp, r7
 800a1e4:	bc80      	pop	{r7}
 800a1e6:	4770      	bx	lr

0800a1e8 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800a1e8:	b480      	push	{r7}
 800a1ea:	b087      	sub	sp, #28
 800a1ec:	af00      	add	r7, sp, #0
 800a1ee:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800a1f4:	693b      	ldr	r3, [r7, #16]
 800a1f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a1fa:	689b      	ldr	r3, [r3, #8]
 800a1fc:	f003 0306 	and.w	r3, r3, #6
 800a200:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800a202:	68fb      	ldr	r3, [r7, #12]
 800a204:	2b00      	cmp	r3, #0
 800a206:	d102      	bne.n	800a20e <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800a208:	2300      	movs	r3, #0
 800a20a:	75fb      	strb	r3, [r7, #23]
 800a20c:	e00a      	b.n	800a224 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800a20e:	68fb      	ldr	r3, [r7, #12]
 800a210:	2b02      	cmp	r3, #2
 800a212:	d002      	beq.n	800a21a <USB_GetDevSpeed+0x32>
 800a214:	68fb      	ldr	r3, [r7, #12]
 800a216:	2b06      	cmp	r3, #6
 800a218:	d102      	bne.n	800a220 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800a21a:	2302      	movs	r3, #2
 800a21c:	75fb      	strb	r3, [r7, #23]
 800a21e:	e001      	b.n	800a224 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800a220:	230f      	movs	r3, #15
 800a222:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800a224:	7dfb      	ldrb	r3, [r7, #23]
}
 800a226:	4618      	mov	r0, r3
 800a228:	371c      	adds	r7, #28
 800a22a:	46bd      	mov	sp, r7
 800a22c:	bc80      	pop	{r7}
 800a22e:	4770      	bx	lr

0800a230 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a230:	b480      	push	{r7}
 800a232:	b085      	sub	sp, #20
 800a234:	af00      	add	r7, sp, #0
 800a236:	6078      	str	r0, [r7, #4]
 800a238:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a23e:	683b      	ldr	r3, [r7, #0]
 800a240:	781b      	ldrb	r3, [r3, #0]
 800a242:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800a244:	683b      	ldr	r3, [r7, #0]
 800a246:	785b      	ldrb	r3, [r3, #1]
 800a248:	2b01      	cmp	r3, #1
 800a24a:	d13a      	bne.n	800a2c2 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800a24c:	68fb      	ldr	r3, [r7, #12]
 800a24e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a252:	69da      	ldr	r2, [r3, #28]
 800a254:	683b      	ldr	r3, [r7, #0]
 800a256:	781b      	ldrb	r3, [r3, #0]
 800a258:	f003 030f 	and.w	r3, r3, #15
 800a25c:	2101      	movs	r1, #1
 800a25e:	fa01 f303 	lsl.w	r3, r1, r3
 800a262:	b29b      	uxth	r3, r3
 800a264:	68f9      	ldr	r1, [r7, #12]
 800a266:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a26a:	4313      	orrs	r3, r2
 800a26c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800a26e:	68bb      	ldr	r3, [r7, #8]
 800a270:	015a      	lsls	r2, r3, #5
 800a272:	68fb      	ldr	r3, [r7, #12]
 800a274:	4413      	add	r3, r2
 800a276:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a27a:	681b      	ldr	r3, [r3, #0]
 800a27c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a280:	2b00      	cmp	r3, #0
 800a282:	d155      	bne.n	800a330 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800a284:	68bb      	ldr	r3, [r7, #8]
 800a286:	015a      	lsls	r2, r3, #5
 800a288:	68fb      	ldr	r3, [r7, #12]
 800a28a:	4413      	add	r3, r2
 800a28c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a290:	681a      	ldr	r2, [r3, #0]
 800a292:	683b      	ldr	r3, [r7, #0]
 800a294:	689b      	ldr	r3, [r3, #8]
 800a296:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800a29a:	683b      	ldr	r3, [r7, #0]
 800a29c:	78db      	ldrb	r3, [r3, #3]
 800a29e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800a2a0:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800a2a2:	68bb      	ldr	r3, [r7, #8]
 800a2a4:	059b      	lsls	r3, r3, #22
 800a2a6:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800a2a8:	4313      	orrs	r3, r2
 800a2aa:	68ba      	ldr	r2, [r7, #8]
 800a2ac:	0151      	lsls	r1, r2, #5
 800a2ae:	68fa      	ldr	r2, [r7, #12]
 800a2b0:	440a      	add	r2, r1
 800a2b2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a2b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a2ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a2be:	6013      	str	r3, [r2, #0]
 800a2c0:	e036      	b.n	800a330 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800a2c2:	68fb      	ldr	r3, [r7, #12]
 800a2c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a2c8:	69da      	ldr	r2, [r3, #28]
 800a2ca:	683b      	ldr	r3, [r7, #0]
 800a2cc:	781b      	ldrb	r3, [r3, #0]
 800a2ce:	f003 030f 	and.w	r3, r3, #15
 800a2d2:	2101      	movs	r1, #1
 800a2d4:	fa01 f303 	lsl.w	r3, r1, r3
 800a2d8:	041b      	lsls	r3, r3, #16
 800a2da:	68f9      	ldr	r1, [r7, #12]
 800a2dc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a2e0:	4313      	orrs	r3, r2
 800a2e2:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800a2e4:	68bb      	ldr	r3, [r7, #8]
 800a2e6:	015a      	lsls	r2, r3, #5
 800a2e8:	68fb      	ldr	r3, [r7, #12]
 800a2ea:	4413      	add	r3, r2
 800a2ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a2f0:	681b      	ldr	r3, [r3, #0]
 800a2f2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a2f6:	2b00      	cmp	r3, #0
 800a2f8:	d11a      	bne.n	800a330 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800a2fa:	68bb      	ldr	r3, [r7, #8]
 800a2fc:	015a      	lsls	r2, r3, #5
 800a2fe:	68fb      	ldr	r3, [r7, #12]
 800a300:	4413      	add	r3, r2
 800a302:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a306:	681a      	ldr	r2, [r3, #0]
 800a308:	683b      	ldr	r3, [r7, #0]
 800a30a:	689b      	ldr	r3, [r3, #8]
 800a30c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800a310:	683b      	ldr	r3, [r7, #0]
 800a312:	78db      	ldrb	r3, [r3, #3]
 800a314:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800a316:	430b      	orrs	r3, r1
 800a318:	4313      	orrs	r3, r2
 800a31a:	68ba      	ldr	r2, [r7, #8]
 800a31c:	0151      	lsls	r1, r2, #5
 800a31e:	68fa      	ldr	r2, [r7, #12]
 800a320:	440a      	add	r2, r1
 800a322:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a326:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a32a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a32e:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800a330:	2300      	movs	r3, #0
}
 800a332:	4618      	mov	r0, r3
 800a334:	3714      	adds	r7, #20
 800a336:	46bd      	mov	sp, r7
 800a338:	bc80      	pop	{r7}
 800a33a:	4770      	bx	lr

0800a33c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a33c:	b480      	push	{r7}
 800a33e:	b085      	sub	sp, #20
 800a340:	af00      	add	r7, sp, #0
 800a342:	6078      	str	r0, [r7, #4]
 800a344:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a34a:	683b      	ldr	r3, [r7, #0]
 800a34c:	781b      	ldrb	r3, [r3, #0]
 800a34e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800a350:	683b      	ldr	r3, [r7, #0]
 800a352:	785b      	ldrb	r3, [r3, #1]
 800a354:	2b01      	cmp	r3, #1
 800a356:	d161      	bne.n	800a41c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800a358:	68bb      	ldr	r3, [r7, #8]
 800a35a:	015a      	lsls	r2, r3, #5
 800a35c:	68fb      	ldr	r3, [r7, #12]
 800a35e:	4413      	add	r3, r2
 800a360:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a364:	681b      	ldr	r3, [r3, #0]
 800a366:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a36a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a36e:	d11f      	bne.n	800a3b0 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800a370:	68bb      	ldr	r3, [r7, #8]
 800a372:	015a      	lsls	r2, r3, #5
 800a374:	68fb      	ldr	r3, [r7, #12]
 800a376:	4413      	add	r3, r2
 800a378:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a37c:	681b      	ldr	r3, [r3, #0]
 800a37e:	68ba      	ldr	r2, [r7, #8]
 800a380:	0151      	lsls	r1, r2, #5
 800a382:	68fa      	ldr	r2, [r7, #12]
 800a384:	440a      	add	r2, r1
 800a386:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a38a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800a38e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800a390:	68bb      	ldr	r3, [r7, #8]
 800a392:	015a      	lsls	r2, r3, #5
 800a394:	68fb      	ldr	r3, [r7, #12]
 800a396:	4413      	add	r3, r2
 800a398:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a39c:	681b      	ldr	r3, [r3, #0]
 800a39e:	68ba      	ldr	r2, [r7, #8]
 800a3a0:	0151      	lsls	r1, r2, #5
 800a3a2:	68fa      	ldr	r2, [r7, #12]
 800a3a4:	440a      	add	r2, r1
 800a3a6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a3aa:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a3ae:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800a3b0:	68fb      	ldr	r3, [r7, #12]
 800a3b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a3b6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a3b8:	683b      	ldr	r3, [r7, #0]
 800a3ba:	781b      	ldrb	r3, [r3, #0]
 800a3bc:	f003 030f 	and.w	r3, r3, #15
 800a3c0:	2101      	movs	r1, #1
 800a3c2:	fa01 f303 	lsl.w	r3, r1, r3
 800a3c6:	b29b      	uxth	r3, r3
 800a3c8:	43db      	mvns	r3, r3
 800a3ca:	68f9      	ldr	r1, [r7, #12]
 800a3cc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a3d0:	4013      	ands	r3, r2
 800a3d2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800a3d4:	68fb      	ldr	r3, [r7, #12]
 800a3d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a3da:	69da      	ldr	r2, [r3, #28]
 800a3dc:	683b      	ldr	r3, [r7, #0]
 800a3de:	781b      	ldrb	r3, [r3, #0]
 800a3e0:	f003 030f 	and.w	r3, r3, #15
 800a3e4:	2101      	movs	r1, #1
 800a3e6:	fa01 f303 	lsl.w	r3, r1, r3
 800a3ea:	b29b      	uxth	r3, r3
 800a3ec:	43db      	mvns	r3, r3
 800a3ee:	68f9      	ldr	r1, [r7, #12]
 800a3f0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a3f4:	4013      	ands	r3, r2
 800a3f6:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800a3f8:	68bb      	ldr	r3, [r7, #8]
 800a3fa:	015a      	lsls	r2, r3, #5
 800a3fc:	68fb      	ldr	r3, [r7, #12]
 800a3fe:	4413      	add	r3, r2
 800a400:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a404:	681a      	ldr	r2, [r3, #0]
 800a406:	68bb      	ldr	r3, [r7, #8]
 800a408:	0159      	lsls	r1, r3, #5
 800a40a:	68fb      	ldr	r3, [r7, #12]
 800a40c:	440b      	add	r3, r1
 800a40e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a412:	4619      	mov	r1, r3
 800a414:	4b35      	ldr	r3, [pc, #212]	; (800a4ec <USB_DeactivateEndpoint+0x1b0>)
 800a416:	4013      	ands	r3, r2
 800a418:	600b      	str	r3, [r1, #0]
 800a41a:	e060      	b.n	800a4de <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a41c:	68bb      	ldr	r3, [r7, #8]
 800a41e:	015a      	lsls	r2, r3, #5
 800a420:	68fb      	ldr	r3, [r7, #12]
 800a422:	4413      	add	r3, r2
 800a424:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a428:	681b      	ldr	r3, [r3, #0]
 800a42a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a42e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a432:	d11f      	bne.n	800a474 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800a434:	68bb      	ldr	r3, [r7, #8]
 800a436:	015a      	lsls	r2, r3, #5
 800a438:	68fb      	ldr	r3, [r7, #12]
 800a43a:	4413      	add	r3, r2
 800a43c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a440:	681b      	ldr	r3, [r3, #0]
 800a442:	68ba      	ldr	r2, [r7, #8]
 800a444:	0151      	lsls	r1, r2, #5
 800a446:	68fa      	ldr	r2, [r7, #12]
 800a448:	440a      	add	r2, r1
 800a44a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a44e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800a452:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800a454:	68bb      	ldr	r3, [r7, #8]
 800a456:	015a      	lsls	r2, r3, #5
 800a458:	68fb      	ldr	r3, [r7, #12]
 800a45a:	4413      	add	r3, r2
 800a45c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a460:	681b      	ldr	r3, [r3, #0]
 800a462:	68ba      	ldr	r2, [r7, #8]
 800a464:	0151      	lsls	r1, r2, #5
 800a466:	68fa      	ldr	r2, [r7, #12]
 800a468:	440a      	add	r2, r1
 800a46a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a46e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a472:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800a474:	68fb      	ldr	r3, [r7, #12]
 800a476:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a47a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a47c:	683b      	ldr	r3, [r7, #0]
 800a47e:	781b      	ldrb	r3, [r3, #0]
 800a480:	f003 030f 	and.w	r3, r3, #15
 800a484:	2101      	movs	r1, #1
 800a486:	fa01 f303 	lsl.w	r3, r1, r3
 800a48a:	041b      	lsls	r3, r3, #16
 800a48c:	43db      	mvns	r3, r3
 800a48e:	68f9      	ldr	r1, [r7, #12]
 800a490:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a494:	4013      	ands	r3, r2
 800a496:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800a498:	68fb      	ldr	r3, [r7, #12]
 800a49a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a49e:	69da      	ldr	r2, [r3, #28]
 800a4a0:	683b      	ldr	r3, [r7, #0]
 800a4a2:	781b      	ldrb	r3, [r3, #0]
 800a4a4:	f003 030f 	and.w	r3, r3, #15
 800a4a8:	2101      	movs	r1, #1
 800a4aa:	fa01 f303 	lsl.w	r3, r1, r3
 800a4ae:	041b      	lsls	r3, r3, #16
 800a4b0:	43db      	mvns	r3, r3
 800a4b2:	68f9      	ldr	r1, [r7, #12]
 800a4b4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a4b8:	4013      	ands	r3, r2
 800a4ba:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800a4bc:	68bb      	ldr	r3, [r7, #8]
 800a4be:	015a      	lsls	r2, r3, #5
 800a4c0:	68fb      	ldr	r3, [r7, #12]
 800a4c2:	4413      	add	r3, r2
 800a4c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a4c8:	681a      	ldr	r2, [r3, #0]
 800a4ca:	68bb      	ldr	r3, [r7, #8]
 800a4cc:	0159      	lsls	r1, r3, #5
 800a4ce:	68fb      	ldr	r3, [r7, #12]
 800a4d0:	440b      	add	r3, r1
 800a4d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a4d6:	4619      	mov	r1, r3
 800a4d8:	4b05      	ldr	r3, [pc, #20]	; (800a4f0 <USB_DeactivateEndpoint+0x1b4>)
 800a4da:	4013      	ands	r3, r2
 800a4dc:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800a4de:	2300      	movs	r3, #0
}
 800a4e0:	4618      	mov	r0, r3
 800a4e2:	3714      	adds	r7, #20
 800a4e4:	46bd      	mov	sp, r7
 800a4e6:	bc80      	pop	{r7}
 800a4e8:	4770      	bx	lr
 800a4ea:	bf00      	nop
 800a4ec:	ec337800 	.word	0xec337800
 800a4f0:	eff37800 	.word	0xeff37800

0800a4f4 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800a4f4:	b580      	push	{r7, lr}
 800a4f6:	b08a      	sub	sp, #40	; 0x28
 800a4f8:	af02      	add	r7, sp, #8
 800a4fa:	60f8      	str	r0, [r7, #12]
 800a4fc:	60b9      	str	r1, [r7, #8]
 800a4fe:	4613      	mov	r3, r2
 800a500:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a502:	68fb      	ldr	r3, [r7, #12]
 800a504:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800a506:	68bb      	ldr	r3, [r7, #8]
 800a508:	781b      	ldrb	r3, [r3, #0]
 800a50a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800a50c:	68bb      	ldr	r3, [r7, #8]
 800a50e:	785b      	ldrb	r3, [r3, #1]
 800a510:	2b01      	cmp	r3, #1
 800a512:	f040 815c 	bne.w	800a7ce <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800a516:	68bb      	ldr	r3, [r7, #8]
 800a518:	695b      	ldr	r3, [r3, #20]
 800a51a:	2b00      	cmp	r3, #0
 800a51c:	d132      	bne.n	800a584 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a51e:	69bb      	ldr	r3, [r7, #24]
 800a520:	015a      	lsls	r2, r3, #5
 800a522:	69fb      	ldr	r3, [r7, #28]
 800a524:	4413      	add	r3, r2
 800a526:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a52a:	691b      	ldr	r3, [r3, #16]
 800a52c:	69ba      	ldr	r2, [r7, #24]
 800a52e:	0151      	lsls	r1, r2, #5
 800a530:	69fa      	ldr	r2, [r7, #28]
 800a532:	440a      	add	r2, r1
 800a534:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a538:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800a53c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800a540:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800a542:	69bb      	ldr	r3, [r7, #24]
 800a544:	015a      	lsls	r2, r3, #5
 800a546:	69fb      	ldr	r3, [r7, #28]
 800a548:	4413      	add	r3, r2
 800a54a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a54e:	691b      	ldr	r3, [r3, #16]
 800a550:	69ba      	ldr	r2, [r7, #24]
 800a552:	0151      	lsls	r1, r2, #5
 800a554:	69fa      	ldr	r2, [r7, #28]
 800a556:	440a      	add	r2, r1
 800a558:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a55c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a560:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a562:	69bb      	ldr	r3, [r7, #24]
 800a564:	015a      	lsls	r2, r3, #5
 800a566:	69fb      	ldr	r3, [r7, #28]
 800a568:	4413      	add	r3, r2
 800a56a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a56e:	691b      	ldr	r3, [r3, #16]
 800a570:	69ba      	ldr	r2, [r7, #24]
 800a572:	0151      	lsls	r1, r2, #5
 800a574:	69fa      	ldr	r2, [r7, #28]
 800a576:	440a      	add	r2, r1
 800a578:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a57c:	0cdb      	lsrs	r3, r3, #19
 800a57e:	04db      	lsls	r3, r3, #19
 800a580:	6113      	str	r3, [r2, #16]
 800a582:	e074      	b.n	800a66e <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a584:	69bb      	ldr	r3, [r7, #24]
 800a586:	015a      	lsls	r2, r3, #5
 800a588:	69fb      	ldr	r3, [r7, #28]
 800a58a:	4413      	add	r3, r2
 800a58c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a590:	691b      	ldr	r3, [r3, #16]
 800a592:	69ba      	ldr	r2, [r7, #24]
 800a594:	0151      	lsls	r1, r2, #5
 800a596:	69fa      	ldr	r2, [r7, #28]
 800a598:	440a      	add	r2, r1
 800a59a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a59e:	0cdb      	lsrs	r3, r3, #19
 800a5a0:	04db      	lsls	r3, r3, #19
 800a5a2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a5a4:	69bb      	ldr	r3, [r7, #24]
 800a5a6:	015a      	lsls	r2, r3, #5
 800a5a8:	69fb      	ldr	r3, [r7, #28]
 800a5aa:	4413      	add	r3, r2
 800a5ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a5b0:	691b      	ldr	r3, [r3, #16]
 800a5b2:	69ba      	ldr	r2, [r7, #24]
 800a5b4:	0151      	lsls	r1, r2, #5
 800a5b6:	69fa      	ldr	r2, [r7, #28]
 800a5b8:	440a      	add	r2, r1
 800a5ba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a5be:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800a5c2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800a5c6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800a5c8:	69bb      	ldr	r3, [r7, #24]
 800a5ca:	015a      	lsls	r2, r3, #5
 800a5cc:	69fb      	ldr	r3, [r7, #28]
 800a5ce:	4413      	add	r3, r2
 800a5d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a5d4:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800a5d6:	68bb      	ldr	r3, [r7, #8]
 800a5d8:	6959      	ldr	r1, [r3, #20]
 800a5da:	68bb      	ldr	r3, [r7, #8]
 800a5dc:	689b      	ldr	r3, [r3, #8]
 800a5de:	440b      	add	r3, r1
 800a5e0:	1e59      	subs	r1, r3, #1
 800a5e2:	68bb      	ldr	r3, [r7, #8]
 800a5e4:	689b      	ldr	r3, [r3, #8]
 800a5e6:	fbb1 f3f3 	udiv	r3, r1, r3
 800a5ea:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800a5ec:	4b9d      	ldr	r3, [pc, #628]	; (800a864 <USB_EPStartXfer+0x370>)
 800a5ee:	400b      	ands	r3, r1
 800a5f0:	69b9      	ldr	r1, [r7, #24]
 800a5f2:	0148      	lsls	r0, r1, #5
 800a5f4:	69f9      	ldr	r1, [r7, #28]
 800a5f6:	4401      	add	r1, r0
 800a5f8:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800a5fc:	4313      	orrs	r3, r2
 800a5fe:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800a600:	69bb      	ldr	r3, [r7, #24]
 800a602:	015a      	lsls	r2, r3, #5
 800a604:	69fb      	ldr	r3, [r7, #28]
 800a606:	4413      	add	r3, r2
 800a608:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a60c:	691a      	ldr	r2, [r3, #16]
 800a60e:	68bb      	ldr	r3, [r7, #8]
 800a610:	695b      	ldr	r3, [r3, #20]
 800a612:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a616:	69b9      	ldr	r1, [r7, #24]
 800a618:	0148      	lsls	r0, r1, #5
 800a61a:	69f9      	ldr	r1, [r7, #28]
 800a61c:	4401      	add	r1, r0
 800a61e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800a622:	4313      	orrs	r3, r2
 800a624:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800a626:	68bb      	ldr	r3, [r7, #8]
 800a628:	78db      	ldrb	r3, [r3, #3]
 800a62a:	2b01      	cmp	r3, #1
 800a62c:	d11f      	bne.n	800a66e <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800a62e:	69bb      	ldr	r3, [r7, #24]
 800a630:	015a      	lsls	r2, r3, #5
 800a632:	69fb      	ldr	r3, [r7, #28]
 800a634:	4413      	add	r3, r2
 800a636:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a63a:	691b      	ldr	r3, [r3, #16]
 800a63c:	69ba      	ldr	r2, [r7, #24]
 800a63e:	0151      	lsls	r1, r2, #5
 800a640:	69fa      	ldr	r2, [r7, #28]
 800a642:	440a      	add	r2, r1
 800a644:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a648:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800a64c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800a64e:	69bb      	ldr	r3, [r7, #24]
 800a650:	015a      	lsls	r2, r3, #5
 800a652:	69fb      	ldr	r3, [r7, #28]
 800a654:	4413      	add	r3, r2
 800a656:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a65a:	691b      	ldr	r3, [r3, #16]
 800a65c:	69ba      	ldr	r2, [r7, #24]
 800a65e:	0151      	lsls	r1, r2, #5
 800a660:	69fa      	ldr	r2, [r7, #28]
 800a662:	440a      	add	r2, r1
 800a664:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a668:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800a66c:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800a66e:	79fb      	ldrb	r3, [r7, #7]
 800a670:	2b01      	cmp	r3, #1
 800a672:	d14b      	bne.n	800a70c <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800a674:	68bb      	ldr	r3, [r7, #8]
 800a676:	691b      	ldr	r3, [r3, #16]
 800a678:	2b00      	cmp	r3, #0
 800a67a:	d009      	beq.n	800a690 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800a67c:	69bb      	ldr	r3, [r7, #24]
 800a67e:	015a      	lsls	r2, r3, #5
 800a680:	69fb      	ldr	r3, [r7, #28]
 800a682:	4413      	add	r3, r2
 800a684:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a688:	461a      	mov	r2, r3
 800a68a:	68bb      	ldr	r3, [r7, #8]
 800a68c:	691b      	ldr	r3, [r3, #16]
 800a68e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800a690:	68bb      	ldr	r3, [r7, #8]
 800a692:	78db      	ldrb	r3, [r3, #3]
 800a694:	2b01      	cmp	r3, #1
 800a696:	d128      	bne.n	800a6ea <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800a698:	69fb      	ldr	r3, [r7, #28]
 800a69a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a69e:	689b      	ldr	r3, [r3, #8]
 800a6a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a6a4:	2b00      	cmp	r3, #0
 800a6a6:	d110      	bne.n	800a6ca <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800a6a8:	69bb      	ldr	r3, [r7, #24]
 800a6aa:	015a      	lsls	r2, r3, #5
 800a6ac:	69fb      	ldr	r3, [r7, #28]
 800a6ae:	4413      	add	r3, r2
 800a6b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a6b4:	681b      	ldr	r3, [r3, #0]
 800a6b6:	69ba      	ldr	r2, [r7, #24]
 800a6b8:	0151      	lsls	r1, r2, #5
 800a6ba:	69fa      	ldr	r2, [r7, #28]
 800a6bc:	440a      	add	r2, r1
 800a6be:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a6c2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800a6c6:	6013      	str	r3, [r2, #0]
 800a6c8:	e00f      	b.n	800a6ea <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800a6ca:	69bb      	ldr	r3, [r7, #24]
 800a6cc:	015a      	lsls	r2, r3, #5
 800a6ce:	69fb      	ldr	r3, [r7, #28]
 800a6d0:	4413      	add	r3, r2
 800a6d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a6d6:	681b      	ldr	r3, [r3, #0]
 800a6d8:	69ba      	ldr	r2, [r7, #24]
 800a6da:	0151      	lsls	r1, r2, #5
 800a6dc:	69fa      	ldr	r2, [r7, #28]
 800a6de:	440a      	add	r2, r1
 800a6e0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a6e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a6e8:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800a6ea:	69bb      	ldr	r3, [r7, #24]
 800a6ec:	015a      	lsls	r2, r3, #5
 800a6ee:	69fb      	ldr	r3, [r7, #28]
 800a6f0:	4413      	add	r3, r2
 800a6f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a6f6:	681b      	ldr	r3, [r3, #0]
 800a6f8:	69ba      	ldr	r2, [r7, #24]
 800a6fa:	0151      	lsls	r1, r2, #5
 800a6fc:	69fa      	ldr	r2, [r7, #28]
 800a6fe:	440a      	add	r2, r1
 800a700:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a704:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a708:	6013      	str	r3, [r2, #0]
 800a70a:	e12f      	b.n	800a96c <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800a70c:	69bb      	ldr	r3, [r7, #24]
 800a70e:	015a      	lsls	r2, r3, #5
 800a710:	69fb      	ldr	r3, [r7, #28]
 800a712:	4413      	add	r3, r2
 800a714:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a718:	681b      	ldr	r3, [r3, #0]
 800a71a:	69ba      	ldr	r2, [r7, #24]
 800a71c:	0151      	lsls	r1, r2, #5
 800a71e:	69fa      	ldr	r2, [r7, #28]
 800a720:	440a      	add	r2, r1
 800a722:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a726:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a72a:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800a72c:	68bb      	ldr	r3, [r7, #8]
 800a72e:	78db      	ldrb	r3, [r3, #3]
 800a730:	2b01      	cmp	r3, #1
 800a732:	d015      	beq.n	800a760 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800a734:	68bb      	ldr	r3, [r7, #8]
 800a736:	695b      	ldr	r3, [r3, #20]
 800a738:	2b00      	cmp	r3, #0
 800a73a:	f000 8117 	beq.w	800a96c <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800a73e:	69fb      	ldr	r3, [r7, #28]
 800a740:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a744:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a746:	68bb      	ldr	r3, [r7, #8]
 800a748:	781b      	ldrb	r3, [r3, #0]
 800a74a:	f003 030f 	and.w	r3, r3, #15
 800a74e:	2101      	movs	r1, #1
 800a750:	fa01 f303 	lsl.w	r3, r1, r3
 800a754:	69f9      	ldr	r1, [r7, #28]
 800a756:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a75a:	4313      	orrs	r3, r2
 800a75c:	634b      	str	r3, [r1, #52]	; 0x34
 800a75e:	e105      	b.n	800a96c <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800a760:	69fb      	ldr	r3, [r7, #28]
 800a762:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a766:	689b      	ldr	r3, [r3, #8]
 800a768:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a76c:	2b00      	cmp	r3, #0
 800a76e:	d110      	bne.n	800a792 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800a770:	69bb      	ldr	r3, [r7, #24]
 800a772:	015a      	lsls	r2, r3, #5
 800a774:	69fb      	ldr	r3, [r7, #28]
 800a776:	4413      	add	r3, r2
 800a778:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a77c:	681b      	ldr	r3, [r3, #0]
 800a77e:	69ba      	ldr	r2, [r7, #24]
 800a780:	0151      	lsls	r1, r2, #5
 800a782:	69fa      	ldr	r2, [r7, #28]
 800a784:	440a      	add	r2, r1
 800a786:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a78a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800a78e:	6013      	str	r3, [r2, #0]
 800a790:	e00f      	b.n	800a7b2 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800a792:	69bb      	ldr	r3, [r7, #24]
 800a794:	015a      	lsls	r2, r3, #5
 800a796:	69fb      	ldr	r3, [r7, #28]
 800a798:	4413      	add	r3, r2
 800a79a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a79e:	681b      	ldr	r3, [r3, #0]
 800a7a0:	69ba      	ldr	r2, [r7, #24]
 800a7a2:	0151      	lsls	r1, r2, #5
 800a7a4:	69fa      	ldr	r2, [r7, #28]
 800a7a6:	440a      	add	r2, r1
 800a7a8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a7ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a7b0:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800a7b2:	68bb      	ldr	r3, [r7, #8]
 800a7b4:	68d9      	ldr	r1, [r3, #12]
 800a7b6:	68bb      	ldr	r3, [r7, #8]
 800a7b8:	781a      	ldrb	r2, [r3, #0]
 800a7ba:	68bb      	ldr	r3, [r7, #8]
 800a7bc:	695b      	ldr	r3, [r3, #20]
 800a7be:	b298      	uxth	r0, r3
 800a7c0:	79fb      	ldrb	r3, [r7, #7]
 800a7c2:	9300      	str	r3, [sp, #0]
 800a7c4:	4603      	mov	r3, r0
 800a7c6:	68f8      	ldr	r0, [r7, #12]
 800a7c8:	f000 fa2a 	bl	800ac20 <USB_WritePacket>
 800a7cc:	e0ce      	b.n	800a96c <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800a7ce:	69bb      	ldr	r3, [r7, #24]
 800a7d0:	015a      	lsls	r2, r3, #5
 800a7d2:	69fb      	ldr	r3, [r7, #28]
 800a7d4:	4413      	add	r3, r2
 800a7d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a7da:	691b      	ldr	r3, [r3, #16]
 800a7dc:	69ba      	ldr	r2, [r7, #24]
 800a7de:	0151      	lsls	r1, r2, #5
 800a7e0:	69fa      	ldr	r2, [r7, #28]
 800a7e2:	440a      	add	r2, r1
 800a7e4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a7e8:	0cdb      	lsrs	r3, r3, #19
 800a7ea:	04db      	lsls	r3, r3, #19
 800a7ec:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800a7ee:	69bb      	ldr	r3, [r7, #24]
 800a7f0:	015a      	lsls	r2, r3, #5
 800a7f2:	69fb      	ldr	r3, [r7, #28]
 800a7f4:	4413      	add	r3, r2
 800a7f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a7fa:	691b      	ldr	r3, [r3, #16]
 800a7fc:	69ba      	ldr	r2, [r7, #24]
 800a7fe:	0151      	lsls	r1, r2, #5
 800a800:	69fa      	ldr	r2, [r7, #28]
 800a802:	440a      	add	r2, r1
 800a804:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a808:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800a80c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800a810:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800a812:	68bb      	ldr	r3, [r7, #8]
 800a814:	695b      	ldr	r3, [r3, #20]
 800a816:	2b00      	cmp	r3, #0
 800a818:	d126      	bne.n	800a868 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800a81a:	69bb      	ldr	r3, [r7, #24]
 800a81c:	015a      	lsls	r2, r3, #5
 800a81e:	69fb      	ldr	r3, [r7, #28]
 800a820:	4413      	add	r3, r2
 800a822:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a826:	691a      	ldr	r2, [r3, #16]
 800a828:	68bb      	ldr	r3, [r7, #8]
 800a82a:	689b      	ldr	r3, [r3, #8]
 800a82c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a830:	69b9      	ldr	r1, [r7, #24]
 800a832:	0148      	lsls	r0, r1, #5
 800a834:	69f9      	ldr	r1, [r7, #28]
 800a836:	4401      	add	r1, r0
 800a838:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800a83c:	4313      	orrs	r3, r2
 800a83e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a840:	69bb      	ldr	r3, [r7, #24]
 800a842:	015a      	lsls	r2, r3, #5
 800a844:	69fb      	ldr	r3, [r7, #28]
 800a846:	4413      	add	r3, r2
 800a848:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a84c:	691b      	ldr	r3, [r3, #16]
 800a84e:	69ba      	ldr	r2, [r7, #24]
 800a850:	0151      	lsls	r1, r2, #5
 800a852:	69fa      	ldr	r2, [r7, #28]
 800a854:	440a      	add	r2, r1
 800a856:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a85a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a85e:	6113      	str	r3, [r2, #16]
 800a860:	e036      	b.n	800a8d0 <USB_EPStartXfer+0x3dc>
 800a862:	bf00      	nop
 800a864:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800a868:	68bb      	ldr	r3, [r7, #8]
 800a86a:	695a      	ldr	r2, [r3, #20]
 800a86c:	68bb      	ldr	r3, [r7, #8]
 800a86e:	689b      	ldr	r3, [r3, #8]
 800a870:	4413      	add	r3, r2
 800a872:	1e5a      	subs	r2, r3, #1
 800a874:	68bb      	ldr	r3, [r7, #8]
 800a876:	689b      	ldr	r3, [r3, #8]
 800a878:	fbb2 f3f3 	udiv	r3, r2, r3
 800a87c:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800a87e:	69bb      	ldr	r3, [r7, #24]
 800a880:	015a      	lsls	r2, r3, #5
 800a882:	69fb      	ldr	r3, [r7, #28]
 800a884:	4413      	add	r3, r2
 800a886:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a88a:	691a      	ldr	r2, [r3, #16]
 800a88c:	8afb      	ldrh	r3, [r7, #22]
 800a88e:	04d9      	lsls	r1, r3, #19
 800a890:	4b39      	ldr	r3, [pc, #228]	; (800a978 <USB_EPStartXfer+0x484>)
 800a892:	400b      	ands	r3, r1
 800a894:	69b9      	ldr	r1, [r7, #24]
 800a896:	0148      	lsls	r0, r1, #5
 800a898:	69f9      	ldr	r1, [r7, #28]
 800a89a:	4401      	add	r1, r0
 800a89c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800a8a0:	4313      	orrs	r3, r2
 800a8a2:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800a8a4:	69bb      	ldr	r3, [r7, #24]
 800a8a6:	015a      	lsls	r2, r3, #5
 800a8a8:	69fb      	ldr	r3, [r7, #28]
 800a8aa:	4413      	add	r3, r2
 800a8ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a8b0:	691a      	ldr	r2, [r3, #16]
 800a8b2:	68bb      	ldr	r3, [r7, #8]
 800a8b4:	689b      	ldr	r3, [r3, #8]
 800a8b6:	8af9      	ldrh	r1, [r7, #22]
 800a8b8:	fb01 f303 	mul.w	r3, r1, r3
 800a8bc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a8c0:	69b9      	ldr	r1, [r7, #24]
 800a8c2:	0148      	lsls	r0, r1, #5
 800a8c4:	69f9      	ldr	r1, [r7, #28]
 800a8c6:	4401      	add	r1, r0
 800a8c8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800a8cc:	4313      	orrs	r3, r2
 800a8ce:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800a8d0:	79fb      	ldrb	r3, [r7, #7]
 800a8d2:	2b01      	cmp	r3, #1
 800a8d4:	d10d      	bne.n	800a8f2 <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800a8d6:	68bb      	ldr	r3, [r7, #8]
 800a8d8:	68db      	ldr	r3, [r3, #12]
 800a8da:	2b00      	cmp	r3, #0
 800a8dc:	d009      	beq.n	800a8f2 <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800a8de:	68bb      	ldr	r3, [r7, #8]
 800a8e0:	68d9      	ldr	r1, [r3, #12]
 800a8e2:	69bb      	ldr	r3, [r7, #24]
 800a8e4:	015a      	lsls	r2, r3, #5
 800a8e6:	69fb      	ldr	r3, [r7, #28]
 800a8e8:	4413      	add	r3, r2
 800a8ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a8ee:	460a      	mov	r2, r1
 800a8f0:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800a8f2:	68bb      	ldr	r3, [r7, #8]
 800a8f4:	78db      	ldrb	r3, [r3, #3]
 800a8f6:	2b01      	cmp	r3, #1
 800a8f8:	d128      	bne.n	800a94c <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800a8fa:	69fb      	ldr	r3, [r7, #28]
 800a8fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a900:	689b      	ldr	r3, [r3, #8]
 800a902:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a906:	2b00      	cmp	r3, #0
 800a908:	d110      	bne.n	800a92c <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800a90a:	69bb      	ldr	r3, [r7, #24]
 800a90c:	015a      	lsls	r2, r3, #5
 800a90e:	69fb      	ldr	r3, [r7, #28]
 800a910:	4413      	add	r3, r2
 800a912:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a916:	681b      	ldr	r3, [r3, #0]
 800a918:	69ba      	ldr	r2, [r7, #24]
 800a91a:	0151      	lsls	r1, r2, #5
 800a91c:	69fa      	ldr	r2, [r7, #28]
 800a91e:	440a      	add	r2, r1
 800a920:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a924:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800a928:	6013      	str	r3, [r2, #0]
 800a92a:	e00f      	b.n	800a94c <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800a92c:	69bb      	ldr	r3, [r7, #24]
 800a92e:	015a      	lsls	r2, r3, #5
 800a930:	69fb      	ldr	r3, [r7, #28]
 800a932:	4413      	add	r3, r2
 800a934:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a938:	681b      	ldr	r3, [r3, #0]
 800a93a:	69ba      	ldr	r2, [r7, #24]
 800a93c:	0151      	lsls	r1, r2, #5
 800a93e:	69fa      	ldr	r2, [r7, #28]
 800a940:	440a      	add	r2, r1
 800a942:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a946:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a94a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800a94c:	69bb      	ldr	r3, [r7, #24]
 800a94e:	015a      	lsls	r2, r3, #5
 800a950:	69fb      	ldr	r3, [r7, #28]
 800a952:	4413      	add	r3, r2
 800a954:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a958:	681b      	ldr	r3, [r3, #0]
 800a95a:	69ba      	ldr	r2, [r7, #24]
 800a95c:	0151      	lsls	r1, r2, #5
 800a95e:	69fa      	ldr	r2, [r7, #28]
 800a960:	440a      	add	r2, r1
 800a962:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a966:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a96a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a96c:	2300      	movs	r3, #0
}
 800a96e:	4618      	mov	r0, r3
 800a970:	3720      	adds	r7, #32
 800a972:	46bd      	mov	sp, r7
 800a974:	bd80      	pop	{r7, pc}
 800a976:	bf00      	nop
 800a978:	1ff80000 	.word	0x1ff80000

0800a97c <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800a97c:	b480      	push	{r7}
 800a97e:	b087      	sub	sp, #28
 800a980:	af00      	add	r7, sp, #0
 800a982:	60f8      	str	r0, [r7, #12]
 800a984:	60b9      	str	r1, [r7, #8]
 800a986:	4613      	mov	r3, r2
 800a988:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a98a:	68fb      	ldr	r3, [r7, #12]
 800a98c:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800a98e:	68bb      	ldr	r3, [r7, #8]
 800a990:	781b      	ldrb	r3, [r3, #0]
 800a992:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800a994:	68bb      	ldr	r3, [r7, #8]
 800a996:	785b      	ldrb	r3, [r3, #1]
 800a998:	2b01      	cmp	r3, #1
 800a99a:	f040 80cd 	bne.w	800ab38 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800a99e:	68bb      	ldr	r3, [r7, #8]
 800a9a0:	695b      	ldr	r3, [r3, #20]
 800a9a2:	2b00      	cmp	r3, #0
 800a9a4:	d132      	bne.n	800aa0c <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a9a6:	693b      	ldr	r3, [r7, #16]
 800a9a8:	015a      	lsls	r2, r3, #5
 800a9aa:	697b      	ldr	r3, [r7, #20]
 800a9ac:	4413      	add	r3, r2
 800a9ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a9b2:	691b      	ldr	r3, [r3, #16]
 800a9b4:	693a      	ldr	r2, [r7, #16]
 800a9b6:	0151      	lsls	r1, r2, #5
 800a9b8:	697a      	ldr	r2, [r7, #20]
 800a9ba:	440a      	add	r2, r1
 800a9bc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a9c0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800a9c4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800a9c8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800a9ca:	693b      	ldr	r3, [r7, #16]
 800a9cc:	015a      	lsls	r2, r3, #5
 800a9ce:	697b      	ldr	r3, [r7, #20]
 800a9d0:	4413      	add	r3, r2
 800a9d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a9d6:	691b      	ldr	r3, [r3, #16]
 800a9d8:	693a      	ldr	r2, [r7, #16]
 800a9da:	0151      	lsls	r1, r2, #5
 800a9dc:	697a      	ldr	r2, [r7, #20]
 800a9de:	440a      	add	r2, r1
 800a9e0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a9e4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a9e8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a9ea:	693b      	ldr	r3, [r7, #16]
 800a9ec:	015a      	lsls	r2, r3, #5
 800a9ee:	697b      	ldr	r3, [r7, #20]
 800a9f0:	4413      	add	r3, r2
 800a9f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a9f6:	691b      	ldr	r3, [r3, #16]
 800a9f8:	693a      	ldr	r2, [r7, #16]
 800a9fa:	0151      	lsls	r1, r2, #5
 800a9fc:	697a      	ldr	r2, [r7, #20]
 800a9fe:	440a      	add	r2, r1
 800aa00:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800aa04:	0cdb      	lsrs	r3, r3, #19
 800aa06:	04db      	lsls	r3, r3, #19
 800aa08:	6113      	str	r3, [r2, #16]
 800aa0a:	e04e      	b.n	800aaaa <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800aa0c:	693b      	ldr	r3, [r7, #16]
 800aa0e:	015a      	lsls	r2, r3, #5
 800aa10:	697b      	ldr	r3, [r7, #20]
 800aa12:	4413      	add	r3, r2
 800aa14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aa18:	691b      	ldr	r3, [r3, #16]
 800aa1a:	693a      	ldr	r2, [r7, #16]
 800aa1c:	0151      	lsls	r1, r2, #5
 800aa1e:	697a      	ldr	r2, [r7, #20]
 800aa20:	440a      	add	r2, r1
 800aa22:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800aa26:	0cdb      	lsrs	r3, r3, #19
 800aa28:	04db      	lsls	r3, r3, #19
 800aa2a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800aa2c:	693b      	ldr	r3, [r7, #16]
 800aa2e:	015a      	lsls	r2, r3, #5
 800aa30:	697b      	ldr	r3, [r7, #20]
 800aa32:	4413      	add	r3, r2
 800aa34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aa38:	691b      	ldr	r3, [r3, #16]
 800aa3a:	693a      	ldr	r2, [r7, #16]
 800aa3c:	0151      	lsls	r1, r2, #5
 800aa3e:	697a      	ldr	r2, [r7, #20]
 800aa40:	440a      	add	r2, r1
 800aa42:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800aa46:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800aa4a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800aa4e:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800aa50:	68bb      	ldr	r3, [r7, #8]
 800aa52:	695a      	ldr	r2, [r3, #20]
 800aa54:	68bb      	ldr	r3, [r7, #8]
 800aa56:	689b      	ldr	r3, [r3, #8]
 800aa58:	429a      	cmp	r2, r3
 800aa5a:	d903      	bls.n	800aa64 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800aa5c:	68bb      	ldr	r3, [r7, #8]
 800aa5e:	689a      	ldr	r2, [r3, #8]
 800aa60:	68bb      	ldr	r3, [r7, #8]
 800aa62:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800aa64:	693b      	ldr	r3, [r7, #16]
 800aa66:	015a      	lsls	r2, r3, #5
 800aa68:	697b      	ldr	r3, [r7, #20]
 800aa6a:	4413      	add	r3, r2
 800aa6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aa70:	691b      	ldr	r3, [r3, #16]
 800aa72:	693a      	ldr	r2, [r7, #16]
 800aa74:	0151      	lsls	r1, r2, #5
 800aa76:	697a      	ldr	r2, [r7, #20]
 800aa78:	440a      	add	r2, r1
 800aa7a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800aa7e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800aa82:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800aa84:	693b      	ldr	r3, [r7, #16]
 800aa86:	015a      	lsls	r2, r3, #5
 800aa88:	697b      	ldr	r3, [r7, #20]
 800aa8a:	4413      	add	r3, r2
 800aa8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aa90:	691a      	ldr	r2, [r3, #16]
 800aa92:	68bb      	ldr	r3, [r7, #8]
 800aa94:	695b      	ldr	r3, [r3, #20]
 800aa96:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800aa9a:	6939      	ldr	r1, [r7, #16]
 800aa9c:	0148      	lsls	r0, r1, #5
 800aa9e:	6979      	ldr	r1, [r7, #20]
 800aaa0:	4401      	add	r1, r0
 800aaa2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800aaa6:	4313      	orrs	r3, r2
 800aaa8:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800aaaa:	79fb      	ldrb	r3, [r7, #7]
 800aaac:	2b01      	cmp	r3, #1
 800aaae:	d11e      	bne.n	800aaee <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800aab0:	68bb      	ldr	r3, [r7, #8]
 800aab2:	691b      	ldr	r3, [r3, #16]
 800aab4:	2b00      	cmp	r3, #0
 800aab6:	d009      	beq.n	800aacc <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800aab8:	693b      	ldr	r3, [r7, #16]
 800aaba:	015a      	lsls	r2, r3, #5
 800aabc:	697b      	ldr	r3, [r7, #20]
 800aabe:	4413      	add	r3, r2
 800aac0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aac4:	461a      	mov	r2, r3
 800aac6:	68bb      	ldr	r3, [r7, #8]
 800aac8:	691b      	ldr	r3, [r3, #16]
 800aaca:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800aacc:	693b      	ldr	r3, [r7, #16]
 800aace:	015a      	lsls	r2, r3, #5
 800aad0:	697b      	ldr	r3, [r7, #20]
 800aad2:	4413      	add	r3, r2
 800aad4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aad8:	681b      	ldr	r3, [r3, #0]
 800aada:	693a      	ldr	r2, [r7, #16]
 800aadc:	0151      	lsls	r1, r2, #5
 800aade:	697a      	ldr	r2, [r7, #20]
 800aae0:	440a      	add	r2, r1
 800aae2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800aae6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800aaea:	6013      	str	r3, [r2, #0]
 800aaec:	e092      	b.n	800ac14 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800aaee:	693b      	ldr	r3, [r7, #16]
 800aaf0:	015a      	lsls	r2, r3, #5
 800aaf2:	697b      	ldr	r3, [r7, #20]
 800aaf4:	4413      	add	r3, r2
 800aaf6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aafa:	681b      	ldr	r3, [r3, #0]
 800aafc:	693a      	ldr	r2, [r7, #16]
 800aafe:	0151      	lsls	r1, r2, #5
 800ab00:	697a      	ldr	r2, [r7, #20]
 800ab02:	440a      	add	r2, r1
 800ab04:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ab08:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800ab0c:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800ab0e:	68bb      	ldr	r3, [r7, #8]
 800ab10:	695b      	ldr	r3, [r3, #20]
 800ab12:	2b00      	cmp	r3, #0
 800ab14:	d07e      	beq.n	800ac14 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800ab16:	697b      	ldr	r3, [r7, #20]
 800ab18:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ab1c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ab1e:	68bb      	ldr	r3, [r7, #8]
 800ab20:	781b      	ldrb	r3, [r3, #0]
 800ab22:	f003 030f 	and.w	r3, r3, #15
 800ab26:	2101      	movs	r1, #1
 800ab28:	fa01 f303 	lsl.w	r3, r1, r3
 800ab2c:	6979      	ldr	r1, [r7, #20]
 800ab2e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ab32:	4313      	orrs	r3, r2
 800ab34:	634b      	str	r3, [r1, #52]	; 0x34
 800ab36:	e06d      	b.n	800ac14 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800ab38:	693b      	ldr	r3, [r7, #16]
 800ab3a:	015a      	lsls	r2, r3, #5
 800ab3c:	697b      	ldr	r3, [r7, #20]
 800ab3e:	4413      	add	r3, r2
 800ab40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ab44:	691b      	ldr	r3, [r3, #16]
 800ab46:	693a      	ldr	r2, [r7, #16]
 800ab48:	0151      	lsls	r1, r2, #5
 800ab4a:	697a      	ldr	r2, [r7, #20]
 800ab4c:	440a      	add	r2, r1
 800ab4e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ab52:	0cdb      	lsrs	r3, r3, #19
 800ab54:	04db      	lsls	r3, r3, #19
 800ab56:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800ab58:	693b      	ldr	r3, [r7, #16]
 800ab5a:	015a      	lsls	r2, r3, #5
 800ab5c:	697b      	ldr	r3, [r7, #20]
 800ab5e:	4413      	add	r3, r2
 800ab60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ab64:	691b      	ldr	r3, [r3, #16]
 800ab66:	693a      	ldr	r2, [r7, #16]
 800ab68:	0151      	lsls	r1, r2, #5
 800ab6a:	697a      	ldr	r2, [r7, #20]
 800ab6c:	440a      	add	r2, r1
 800ab6e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ab72:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800ab76:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800ab7a:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800ab7c:	68bb      	ldr	r3, [r7, #8]
 800ab7e:	695b      	ldr	r3, [r3, #20]
 800ab80:	2b00      	cmp	r3, #0
 800ab82:	d003      	beq.n	800ab8c <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 800ab84:	68bb      	ldr	r3, [r7, #8]
 800ab86:	689a      	ldr	r2, [r3, #8]
 800ab88:	68bb      	ldr	r3, [r7, #8]
 800ab8a:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800ab8c:	693b      	ldr	r3, [r7, #16]
 800ab8e:	015a      	lsls	r2, r3, #5
 800ab90:	697b      	ldr	r3, [r7, #20]
 800ab92:	4413      	add	r3, r2
 800ab94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ab98:	691b      	ldr	r3, [r3, #16]
 800ab9a:	693a      	ldr	r2, [r7, #16]
 800ab9c:	0151      	lsls	r1, r2, #5
 800ab9e:	697a      	ldr	r2, [r7, #20]
 800aba0:	440a      	add	r2, r1
 800aba2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800aba6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800abaa:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 800abac:	693b      	ldr	r3, [r7, #16]
 800abae:	015a      	lsls	r2, r3, #5
 800abb0:	697b      	ldr	r3, [r7, #20]
 800abb2:	4413      	add	r3, r2
 800abb4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800abb8:	691a      	ldr	r2, [r3, #16]
 800abba:	68bb      	ldr	r3, [r7, #8]
 800abbc:	689b      	ldr	r3, [r3, #8]
 800abbe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800abc2:	6939      	ldr	r1, [r7, #16]
 800abc4:	0148      	lsls	r0, r1, #5
 800abc6:	6979      	ldr	r1, [r7, #20]
 800abc8:	4401      	add	r1, r0
 800abca:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800abce:	4313      	orrs	r3, r2
 800abd0:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800abd2:	79fb      	ldrb	r3, [r7, #7]
 800abd4:	2b01      	cmp	r3, #1
 800abd6:	d10d      	bne.n	800abf4 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800abd8:	68bb      	ldr	r3, [r7, #8]
 800abda:	68db      	ldr	r3, [r3, #12]
 800abdc:	2b00      	cmp	r3, #0
 800abde:	d009      	beq.n	800abf4 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800abe0:	68bb      	ldr	r3, [r7, #8]
 800abe2:	68d9      	ldr	r1, [r3, #12]
 800abe4:	693b      	ldr	r3, [r7, #16]
 800abe6:	015a      	lsls	r2, r3, #5
 800abe8:	697b      	ldr	r3, [r7, #20]
 800abea:	4413      	add	r3, r2
 800abec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800abf0:	460a      	mov	r2, r1
 800abf2:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800abf4:	693b      	ldr	r3, [r7, #16]
 800abf6:	015a      	lsls	r2, r3, #5
 800abf8:	697b      	ldr	r3, [r7, #20]
 800abfa:	4413      	add	r3, r2
 800abfc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ac00:	681b      	ldr	r3, [r3, #0]
 800ac02:	693a      	ldr	r2, [r7, #16]
 800ac04:	0151      	lsls	r1, r2, #5
 800ac06:	697a      	ldr	r2, [r7, #20]
 800ac08:	440a      	add	r2, r1
 800ac0a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ac0e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800ac12:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800ac14:	2300      	movs	r3, #0
}
 800ac16:	4618      	mov	r0, r3
 800ac18:	371c      	adds	r7, #28
 800ac1a:	46bd      	mov	sp, r7
 800ac1c:	bc80      	pop	{r7}
 800ac1e:	4770      	bx	lr

0800ac20 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800ac20:	b480      	push	{r7}
 800ac22:	b089      	sub	sp, #36	; 0x24
 800ac24:	af00      	add	r7, sp, #0
 800ac26:	60f8      	str	r0, [r7, #12]
 800ac28:	60b9      	str	r1, [r7, #8]
 800ac2a:	4611      	mov	r1, r2
 800ac2c:	461a      	mov	r2, r3
 800ac2e:	460b      	mov	r3, r1
 800ac30:	71fb      	strb	r3, [r7, #7]
 800ac32:	4613      	mov	r3, r2
 800ac34:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ac36:	68fb      	ldr	r3, [r7, #12]
 800ac38:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800ac3a:	68bb      	ldr	r3, [r7, #8]
 800ac3c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800ac3e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800ac42:	2b00      	cmp	r3, #0
 800ac44:	d123      	bne.n	800ac8e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800ac46:	88bb      	ldrh	r3, [r7, #4]
 800ac48:	3303      	adds	r3, #3
 800ac4a:	089b      	lsrs	r3, r3, #2
 800ac4c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800ac4e:	2300      	movs	r3, #0
 800ac50:	61bb      	str	r3, [r7, #24]
 800ac52:	e018      	b.n	800ac86 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800ac54:	79fb      	ldrb	r3, [r7, #7]
 800ac56:	031a      	lsls	r2, r3, #12
 800ac58:	697b      	ldr	r3, [r7, #20]
 800ac5a:	4413      	add	r3, r2
 800ac5c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ac60:	461a      	mov	r2, r3
 800ac62:	69fb      	ldr	r3, [r7, #28]
 800ac64:	681b      	ldr	r3, [r3, #0]
 800ac66:	6013      	str	r3, [r2, #0]
      pSrc++;
 800ac68:	69fb      	ldr	r3, [r7, #28]
 800ac6a:	3301      	adds	r3, #1
 800ac6c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800ac6e:	69fb      	ldr	r3, [r7, #28]
 800ac70:	3301      	adds	r3, #1
 800ac72:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800ac74:	69fb      	ldr	r3, [r7, #28]
 800ac76:	3301      	adds	r3, #1
 800ac78:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800ac7a:	69fb      	ldr	r3, [r7, #28]
 800ac7c:	3301      	adds	r3, #1
 800ac7e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800ac80:	69bb      	ldr	r3, [r7, #24]
 800ac82:	3301      	adds	r3, #1
 800ac84:	61bb      	str	r3, [r7, #24]
 800ac86:	69ba      	ldr	r2, [r7, #24]
 800ac88:	693b      	ldr	r3, [r7, #16]
 800ac8a:	429a      	cmp	r2, r3
 800ac8c:	d3e2      	bcc.n	800ac54 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800ac8e:	2300      	movs	r3, #0
}
 800ac90:	4618      	mov	r0, r3
 800ac92:	3724      	adds	r7, #36	; 0x24
 800ac94:	46bd      	mov	sp, r7
 800ac96:	bc80      	pop	{r7}
 800ac98:	4770      	bx	lr

0800ac9a <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800ac9a:	b480      	push	{r7}
 800ac9c:	b08b      	sub	sp, #44	; 0x2c
 800ac9e:	af00      	add	r7, sp, #0
 800aca0:	60f8      	str	r0, [r7, #12]
 800aca2:	60b9      	str	r1, [r7, #8]
 800aca4:	4613      	mov	r3, r2
 800aca6:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aca8:	68fb      	ldr	r3, [r7, #12]
 800acaa:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800acac:	68bb      	ldr	r3, [r7, #8]
 800acae:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800acb0:	88fb      	ldrh	r3, [r7, #6]
 800acb2:	089b      	lsrs	r3, r3, #2
 800acb4:	b29b      	uxth	r3, r3
 800acb6:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800acb8:	88fb      	ldrh	r3, [r7, #6]
 800acba:	f003 0303 	and.w	r3, r3, #3
 800acbe:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800acc0:	2300      	movs	r3, #0
 800acc2:	623b      	str	r3, [r7, #32]
 800acc4:	e014      	b.n	800acf0 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800acc6:	69bb      	ldr	r3, [r7, #24]
 800acc8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800accc:	681a      	ldr	r2, [r3, #0]
 800acce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acd0:	601a      	str	r2, [r3, #0]
    pDest++;
 800acd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acd4:	3301      	adds	r3, #1
 800acd6:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800acd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acda:	3301      	adds	r3, #1
 800acdc:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800acde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ace0:	3301      	adds	r3, #1
 800ace2:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800ace4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ace6:	3301      	adds	r3, #1
 800ace8:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800acea:	6a3b      	ldr	r3, [r7, #32]
 800acec:	3301      	adds	r3, #1
 800acee:	623b      	str	r3, [r7, #32]
 800acf0:	6a3a      	ldr	r2, [r7, #32]
 800acf2:	697b      	ldr	r3, [r7, #20]
 800acf4:	429a      	cmp	r2, r3
 800acf6:	d3e6      	bcc.n	800acc6 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800acf8:	8bfb      	ldrh	r3, [r7, #30]
 800acfa:	2b00      	cmp	r3, #0
 800acfc:	d01e      	beq.n	800ad3c <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800acfe:	2300      	movs	r3, #0
 800ad00:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800ad02:	69bb      	ldr	r3, [r7, #24]
 800ad04:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ad08:	461a      	mov	r2, r3
 800ad0a:	f107 0310 	add.w	r3, r7, #16
 800ad0e:	6812      	ldr	r2, [r2, #0]
 800ad10:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800ad12:	693a      	ldr	r2, [r7, #16]
 800ad14:	6a3b      	ldr	r3, [r7, #32]
 800ad16:	b2db      	uxtb	r3, r3
 800ad18:	00db      	lsls	r3, r3, #3
 800ad1a:	fa22 f303 	lsr.w	r3, r2, r3
 800ad1e:	b2da      	uxtb	r2, r3
 800ad20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad22:	701a      	strb	r2, [r3, #0]
      i++;
 800ad24:	6a3b      	ldr	r3, [r7, #32]
 800ad26:	3301      	adds	r3, #1
 800ad28:	623b      	str	r3, [r7, #32]
      pDest++;
 800ad2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad2c:	3301      	adds	r3, #1
 800ad2e:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800ad30:	8bfb      	ldrh	r3, [r7, #30]
 800ad32:	3b01      	subs	r3, #1
 800ad34:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800ad36:	8bfb      	ldrh	r3, [r7, #30]
 800ad38:	2b00      	cmp	r3, #0
 800ad3a:	d1ea      	bne.n	800ad12 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800ad3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800ad3e:	4618      	mov	r0, r3
 800ad40:	372c      	adds	r7, #44	; 0x2c
 800ad42:	46bd      	mov	sp, r7
 800ad44:	bc80      	pop	{r7}
 800ad46:	4770      	bx	lr

0800ad48 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800ad48:	b480      	push	{r7}
 800ad4a:	b085      	sub	sp, #20
 800ad4c:	af00      	add	r7, sp, #0
 800ad4e:	6078      	str	r0, [r7, #4]
 800ad50:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800ad56:	683b      	ldr	r3, [r7, #0]
 800ad58:	781b      	ldrb	r3, [r3, #0]
 800ad5a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800ad5c:	683b      	ldr	r3, [r7, #0]
 800ad5e:	785b      	ldrb	r3, [r3, #1]
 800ad60:	2b01      	cmp	r3, #1
 800ad62:	d12c      	bne.n	800adbe <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800ad64:	68bb      	ldr	r3, [r7, #8]
 800ad66:	015a      	lsls	r2, r3, #5
 800ad68:	68fb      	ldr	r3, [r7, #12]
 800ad6a:	4413      	add	r3, r2
 800ad6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ad70:	681b      	ldr	r3, [r3, #0]
 800ad72:	2b00      	cmp	r3, #0
 800ad74:	db12      	blt.n	800ad9c <USB_EPSetStall+0x54>
 800ad76:	68bb      	ldr	r3, [r7, #8]
 800ad78:	2b00      	cmp	r3, #0
 800ad7a:	d00f      	beq.n	800ad9c <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800ad7c:	68bb      	ldr	r3, [r7, #8]
 800ad7e:	015a      	lsls	r2, r3, #5
 800ad80:	68fb      	ldr	r3, [r7, #12]
 800ad82:	4413      	add	r3, r2
 800ad84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ad88:	681b      	ldr	r3, [r3, #0]
 800ad8a:	68ba      	ldr	r2, [r7, #8]
 800ad8c:	0151      	lsls	r1, r2, #5
 800ad8e:	68fa      	ldr	r2, [r7, #12]
 800ad90:	440a      	add	r2, r1
 800ad92:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ad96:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800ad9a:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800ad9c:	68bb      	ldr	r3, [r7, #8]
 800ad9e:	015a      	lsls	r2, r3, #5
 800ada0:	68fb      	ldr	r3, [r7, #12]
 800ada2:	4413      	add	r3, r2
 800ada4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ada8:	681b      	ldr	r3, [r3, #0]
 800adaa:	68ba      	ldr	r2, [r7, #8]
 800adac:	0151      	lsls	r1, r2, #5
 800adae:	68fa      	ldr	r2, [r7, #12]
 800adb0:	440a      	add	r2, r1
 800adb2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800adb6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800adba:	6013      	str	r3, [r2, #0]
 800adbc:	e02b      	b.n	800ae16 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800adbe:	68bb      	ldr	r3, [r7, #8]
 800adc0:	015a      	lsls	r2, r3, #5
 800adc2:	68fb      	ldr	r3, [r7, #12]
 800adc4:	4413      	add	r3, r2
 800adc6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800adca:	681b      	ldr	r3, [r3, #0]
 800adcc:	2b00      	cmp	r3, #0
 800adce:	db12      	blt.n	800adf6 <USB_EPSetStall+0xae>
 800add0:	68bb      	ldr	r3, [r7, #8]
 800add2:	2b00      	cmp	r3, #0
 800add4:	d00f      	beq.n	800adf6 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800add6:	68bb      	ldr	r3, [r7, #8]
 800add8:	015a      	lsls	r2, r3, #5
 800adda:	68fb      	ldr	r3, [r7, #12]
 800addc:	4413      	add	r3, r2
 800adde:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ade2:	681b      	ldr	r3, [r3, #0]
 800ade4:	68ba      	ldr	r2, [r7, #8]
 800ade6:	0151      	lsls	r1, r2, #5
 800ade8:	68fa      	ldr	r2, [r7, #12]
 800adea:	440a      	add	r2, r1
 800adec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800adf0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800adf4:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800adf6:	68bb      	ldr	r3, [r7, #8]
 800adf8:	015a      	lsls	r2, r3, #5
 800adfa:	68fb      	ldr	r3, [r7, #12]
 800adfc:	4413      	add	r3, r2
 800adfe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ae02:	681b      	ldr	r3, [r3, #0]
 800ae04:	68ba      	ldr	r2, [r7, #8]
 800ae06:	0151      	lsls	r1, r2, #5
 800ae08:	68fa      	ldr	r2, [r7, #12]
 800ae0a:	440a      	add	r2, r1
 800ae0c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ae10:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800ae14:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800ae16:	2300      	movs	r3, #0
}
 800ae18:	4618      	mov	r0, r3
 800ae1a:	3714      	adds	r7, #20
 800ae1c:	46bd      	mov	sp, r7
 800ae1e:	bc80      	pop	{r7}
 800ae20:	4770      	bx	lr

0800ae22 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800ae22:	b480      	push	{r7}
 800ae24:	b085      	sub	sp, #20
 800ae26:	af00      	add	r7, sp, #0
 800ae28:	6078      	str	r0, [r7, #4]
 800ae2a:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800ae30:	683b      	ldr	r3, [r7, #0]
 800ae32:	781b      	ldrb	r3, [r3, #0]
 800ae34:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800ae36:	683b      	ldr	r3, [r7, #0]
 800ae38:	785b      	ldrb	r3, [r3, #1]
 800ae3a:	2b01      	cmp	r3, #1
 800ae3c:	d128      	bne.n	800ae90 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800ae3e:	68bb      	ldr	r3, [r7, #8]
 800ae40:	015a      	lsls	r2, r3, #5
 800ae42:	68fb      	ldr	r3, [r7, #12]
 800ae44:	4413      	add	r3, r2
 800ae46:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ae4a:	681b      	ldr	r3, [r3, #0]
 800ae4c:	68ba      	ldr	r2, [r7, #8]
 800ae4e:	0151      	lsls	r1, r2, #5
 800ae50:	68fa      	ldr	r2, [r7, #12]
 800ae52:	440a      	add	r2, r1
 800ae54:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ae58:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800ae5c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800ae5e:	683b      	ldr	r3, [r7, #0]
 800ae60:	78db      	ldrb	r3, [r3, #3]
 800ae62:	2b03      	cmp	r3, #3
 800ae64:	d003      	beq.n	800ae6e <USB_EPClearStall+0x4c>
 800ae66:	683b      	ldr	r3, [r7, #0]
 800ae68:	78db      	ldrb	r3, [r3, #3]
 800ae6a:	2b02      	cmp	r3, #2
 800ae6c:	d138      	bne.n	800aee0 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800ae6e:	68bb      	ldr	r3, [r7, #8]
 800ae70:	015a      	lsls	r2, r3, #5
 800ae72:	68fb      	ldr	r3, [r7, #12]
 800ae74:	4413      	add	r3, r2
 800ae76:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ae7a:	681b      	ldr	r3, [r3, #0]
 800ae7c:	68ba      	ldr	r2, [r7, #8]
 800ae7e:	0151      	lsls	r1, r2, #5
 800ae80:	68fa      	ldr	r2, [r7, #12]
 800ae82:	440a      	add	r2, r1
 800ae84:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ae88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ae8c:	6013      	str	r3, [r2, #0]
 800ae8e:	e027      	b.n	800aee0 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800ae90:	68bb      	ldr	r3, [r7, #8]
 800ae92:	015a      	lsls	r2, r3, #5
 800ae94:	68fb      	ldr	r3, [r7, #12]
 800ae96:	4413      	add	r3, r2
 800ae98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ae9c:	681b      	ldr	r3, [r3, #0]
 800ae9e:	68ba      	ldr	r2, [r7, #8]
 800aea0:	0151      	lsls	r1, r2, #5
 800aea2:	68fa      	ldr	r2, [r7, #12]
 800aea4:	440a      	add	r2, r1
 800aea6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800aeaa:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800aeae:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800aeb0:	683b      	ldr	r3, [r7, #0]
 800aeb2:	78db      	ldrb	r3, [r3, #3]
 800aeb4:	2b03      	cmp	r3, #3
 800aeb6:	d003      	beq.n	800aec0 <USB_EPClearStall+0x9e>
 800aeb8:	683b      	ldr	r3, [r7, #0]
 800aeba:	78db      	ldrb	r3, [r3, #3]
 800aebc:	2b02      	cmp	r3, #2
 800aebe:	d10f      	bne.n	800aee0 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800aec0:	68bb      	ldr	r3, [r7, #8]
 800aec2:	015a      	lsls	r2, r3, #5
 800aec4:	68fb      	ldr	r3, [r7, #12]
 800aec6:	4413      	add	r3, r2
 800aec8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aecc:	681b      	ldr	r3, [r3, #0]
 800aece:	68ba      	ldr	r2, [r7, #8]
 800aed0:	0151      	lsls	r1, r2, #5
 800aed2:	68fa      	ldr	r2, [r7, #12]
 800aed4:	440a      	add	r2, r1
 800aed6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800aeda:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800aede:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800aee0:	2300      	movs	r3, #0
}
 800aee2:	4618      	mov	r0, r3
 800aee4:	3714      	adds	r7, #20
 800aee6:	46bd      	mov	sp, r7
 800aee8:	bc80      	pop	{r7}
 800aeea:	4770      	bx	lr

0800aeec <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800aeec:	b480      	push	{r7}
 800aeee:	b085      	sub	sp, #20
 800aef0:	af00      	add	r7, sp, #0
 800aef2:	6078      	str	r0, [r7, #4]
 800aef4:	460b      	mov	r3, r1
 800aef6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800aefc:	68fb      	ldr	r3, [r7, #12]
 800aefe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800af02:	681b      	ldr	r3, [r3, #0]
 800af04:	68fa      	ldr	r2, [r7, #12]
 800af06:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800af0a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800af0e:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800af10:	68fb      	ldr	r3, [r7, #12]
 800af12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800af16:	681a      	ldr	r2, [r3, #0]
 800af18:	78fb      	ldrb	r3, [r7, #3]
 800af1a:	011b      	lsls	r3, r3, #4
 800af1c:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800af20:	68f9      	ldr	r1, [r7, #12]
 800af22:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800af26:	4313      	orrs	r3, r2
 800af28:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800af2a:	2300      	movs	r3, #0
}
 800af2c:	4618      	mov	r0, r3
 800af2e:	3714      	adds	r7, #20
 800af30:	46bd      	mov	sp, r7
 800af32:	bc80      	pop	{r7}
 800af34:	4770      	bx	lr

0800af36 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800af36:	b480      	push	{r7}
 800af38:	b085      	sub	sp, #20
 800af3a:	af00      	add	r7, sp, #0
 800af3c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800af42:	68fb      	ldr	r3, [r7, #12]
 800af44:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800af48:	681b      	ldr	r3, [r3, #0]
 800af4a:	68fa      	ldr	r2, [r7, #12]
 800af4c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800af50:	f023 0303 	bic.w	r3, r3, #3
 800af54:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800af56:	68fb      	ldr	r3, [r7, #12]
 800af58:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800af5c:	685b      	ldr	r3, [r3, #4]
 800af5e:	68fa      	ldr	r2, [r7, #12]
 800af60:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800af64:	f023 0302 	bic.w	r3, r3, #2
 800af68:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800af6a:	2300      	movs	r3, #0
}
 800af6c:	4618      	mov	r0, r3
 800af6e:	3714      	adds	r7, #20
 800af70:	46bd      	mov	sp, r7
 800af72:	bc80      	pop	{r7}
 800af74:	4770      	bx	lr

0800af76 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800af76:	b480      	push	{r7}
 800af78:	b085      	sub	sp, #20
 800af7a:	af00      	add	r7, sp, #0
 800af7c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800af82:	68fb      	ldr	r3, [r7, #12]
 800af84:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800af88:	681b      	ldr	r3, [r3, #0]
 800af8a:	68fa      	ldr	r2, [r7, #12]
 800af8c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800af90:	f023 0303 	bic.w	r3, r3, #3
 800af94:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800af96:	68fb      	ldr	r3, [r7, #12]
 800af98:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800af9c:	685b      	ldr	r3, [r3, #4]
 800af9e:	68fa      	ldr	r2, [r7, #12]
 800afa0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800afa4:	f043 0302 	orr.w	r3, r3, #2
 800afa8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800afaa:	2300      	movs	r3, #0
}
 800afac:	4618      	mov	r0, r3
 800afae:	3714      	adds	r7, #20
 800afb0:	46bd      	mov	sp, r7
 800afb2:	bc80      	pop	{r7}
 800afb4:	4770      	bx	lr

0800afb6 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800afb6:	b480      	push	{r7}
 800afb8:	b085      	sub	sp, #20
 800afba:	af00      	add	r7, sp, #0
 800afbc:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	695b      	ldr	r3, [r3, #20]
 800afc2:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	699b      	ldr	r3, [r3, #24]
 800afc8:	68fa      	ldr	r2, [r7, #12]
 800afca:	4013      	ands	r3, r2
 800afcc:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800afce:	68fb      	ldr	r3, [r7, #12]
}
 800afd0:	4618      	mov	r0, r3
 800afd2:	3714      	adds	r7, #20
 800afd4:	46bd      	mov	sp, r7
 800afd6:	bc80      	pop	{r7}
 800afd8:	4770      	bx	lr

0800afda <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800afda:	b480      	push	{r7}
 800afdc:	b085      	sub	sp, #20
 800afde:	af00      	add	r7, sp, #0
 800afe0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800afe6:	68fb      	ldr	r3, [r7, #12]
 800afe8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800afec:	699b      	ldr	r3, [r3, #24]
 800afee:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800aff0:	68fb      	ldr	r3, [r7, #12]
 800aff2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aff6:	69db      	ldr	r3, [r3, #28]
 800aff8:	68ba      	ldr	r2, [r7, #8]
 800affa:	4013      	ands	r3, r2
 800affc:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800affe:	68bb      	ldr	r3, [r7, #8]
 800b000:	0c1b      	lsrs	r3, r3, #16
}
 800b002:	4618      	mov	r0, r3
 800b004:	3714      	adds	r7, #20
 800b006:	46bd      	mov	sp, r7
 800b008:	bc80      	pop	{r7}
 800b00a:	4770      	bx	lr

0800b00c <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800b00c:	b480      	push	{r7}
 800b00e:	b085      	sub	sp, #20
 800b010:	af00      	add	r7, sp, #0
 800b012:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800b018:	68fb      	ldr	r3, [r7, #12]
 800b01a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b01e:	699b      	ldr	r3, [r3, #24]
 800b020:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800b022:	68fb      	ldr	r3, [r7, #12]
 800b024:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b028:	69db      	ldr	r3, [r3, #28]
 800b02a:	68ba      	ldr	r2, [r7, #8]
 800b02c:	4013      	ands	r3, r2
 800b02e:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800b030:	68bb      	ldr	r3, [r7, #8]
 800b032:	b29b      	uxth	r3, r3
}
 800b034:	4618      	mov	r0, r3
 800b036:	3714      	adds	r7, #20
 800b038:	46bd      	mov	sp, r7
 800b03a:	bc80      	pop	{r7}
 800b03c:	4770      	bx	lr

0800b03e <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800b03e:	b480      	push	{r7}
 800b040:	b085      	sub	sp, #20
 800b042:	af00      	add	r7, sp, #0
 800b044:	6078      	str	r0, [r7, #4]
 800b046:	460b      	mov	r3, r1
 800b048:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800b04e:	78fb      	ldrb	r3, [r7, #3]
 800b050:	015a      	lsls	r2, r3, #5
 800b052:	68fb      	ldr	r3, [r7, #12]
 800b054:	4413      	add	r3, r2
 800b056:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b05a:	689b      	ldr	r3, [r3, #8]
 800b05c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800b05e:	68fb      	ldr	r3, [r7, #12]
 800b060:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b064:	695b      	ldr	r3, [r3, #20]
 800b066:	68ba      	ldr	r2, [r7, #8]
 800b068:	4013      	ands	r3, r2
 800b06a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800b06c:	68bb      	ldr	r3, [r7, #8]
}
 800b06e:	4618      	mov	r0, r3
 800b070:	3714      	adds	r7, #20
 800b072:	46bd      	mov	sp, r7
 800b074:	bc80      	pop	{r7}
 800b076:	4770      	bx	lr

0800b078 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800b078:	b480      	push	{r7}
 800b07a:	b087      	sub	sp, #28
 800b07c:	af00      	add	r7, sp, #0
 800b07e:	6078      	str	r0, [r7, #4]
 800b080:	460b      	mov	r3, r1
 800b082:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800b088:	697b      	ldr	r3, [r7, #20]
 800b08a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b08e:	691b      	ldr	r3, [r3, #16]
 800b090:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800b092:	697b      	ldr	r3, [r7, #20]
 800b094:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b098:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b09a:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800b09c:	78fb      	ldrb	r3, [r7, #3]
 800b09e:	f003 030f 	and.w	r3, r3, #15
 800b0a2:	68fa      	ldr	r2, [r7, #12]
 800b0a4:	fa22 f303 	lsr.w	r3, r2, r3
 800b0a8:	01db      	lsls	r3, r3, #7
 800b0aa:	b2db      	uxtb	r3, r3
 800b0ac:	693a      	ldr	r2, [r7, #16]
 800b0ae:	4313      	orrs	r3, r2
 800b0b0:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800b0b2:	78fb      	ldrb	r3, [r7, #3]
 800b0b4:	015a      	lsls	r2, r3, #5
 800b0b6:	697b      	ldr	r3, [r7, #20]
 800b0b8:	4413      	add	r3, r2
 800b0ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b0be:	689b      	ldr	r3, [r3, #8]
 800b0c0:	693a      	ldr	r2, [r7, #16]
 800b0c2:	4013      	ands	r3, r2
 800b0c4:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800b0c6:	68bb      	ldr	r3, [r7, #8]
}
 800b0c8:	4618      	mov	r0, r3
 800b0ca:	371c      	adds	r7, #28
 800b0cc:	46bd      	mov	sp, r7
 800b0ce:	bc80      	pop	{r7}
 800b0d0:	4770      	bx	lr

0800b0d2 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800b0d2:	b480      	push	{r7}
 800b0d4:	b083      	sub	sp, #12
 800b0d6:	af00      	add	r7, sp, #0
 800b0d8:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	695b      	ldr	r3, [r3, #20]
 800b0de:	f003 0301 	and.w	r3, r3, #1
}
 800b0e2:	4618      	mov	r0, r3
 800b0e4:	370c      	adds	r7, #12
 800b0e6:	46bd      	mov	sp, r7
 800b0e8:	bc80      	pop	{r7}
 800b0ea:	4770      	bx	lr

0800b0ec <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800b0ec:	b480      	push	{r7}
 800b0ee:	b085      	sub	sp, #20
 800b0f0:	af00      	add	r7, sp, #0
 800b0f2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800b0f8:	68fb      	ldr	r3, [r7, #12]
 800b0fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b0fe:	681b      	ldr	r3, [r3, #0]
 800b100:	68fa      	ldr	r2, [r7, #12]
 800b102:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b106:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800b10a:	f023 0307 	bic.w	r3, r3, #7
 800b10e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800b110:	68fb      	ldr	r3, [r7, #12]
 800b112:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b116:	685b      	ldr	r3, [r3, #4]
 800b118:	68fa      	ldr	r2, [r7, #12]
 800b11a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b11e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b122:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800b124:	2300      	movs	r3, #0
}
 800b126:	4618      	mov	r0, r3
 800b128:	3714      	adds	r7, #20
 800b12a:	46bd      	mov	sp, r7
 800b12c:	bc80      	pop	{r7}
 800b12e:	4770      	bx	lr

0800b130 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800b130:	b480      	push	{r7}
 800b132:	b087      	sub	sp, #28
 800b134:	af00      	add	r7, sp, #0
 800b136:	60f8      	str	r0, [r7, #12]
 800b138:	460b      	mov	r3, r1
 800b13a:	607a      	str	r2, [r7, #4]
 800b13c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b13e:	68fb      	ldr	r3, [r7, #12]
 800b140:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800b142:	68fb      	ldr	r3, [r7, #12]
 800b144:	333c      	adds	r3, #60	; 0x3c
 800b146:	3304      	adds	r3, #4
 800b148:	681b      	ldr	r3, [r3, #0]
 800b14a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800b14c:	693b      	ldr	r3, [r7, #16]
 800b14e:	4a25      	ldr	r2, [pc, #148]	; (800b1e4 <USB_EP0_OutStart+0xb4>)
 800b150:	4293      	cmp	r3, r2
 800b152:	d90a      	bls.n	800b16a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800b154:	697b      	ldr	r3, [r7, #20]
 800b156:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b15a:	681b      	ldr	r3, [r3, #0]
 800b15c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b160:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b164:	d101      	bne.n	800b16a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800b166:	2300      	movs	r3, #0
 800b168:	e037      	b.n	800b1da <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800b16a:	697b      	ldr	r3, [r7, #20]
 800b16c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b170:	461a      	mov	r2, r3
 800b172:	2300      	movs	r3, #0
 800b174:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800b176:	697b      	ldr	r3, [r7, #20]
 800b178:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b17c:	691b      	ldr	r3, [r3, #16]
 800b17e:	697a      	ldr	r2, [r7, #20]
 800b180:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b184:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b188:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800b18a:	697b      	ldr	r3, [r7, #20]
 800b18c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b190:	691b      	ldr	r3, [r3, #16]
 800b192:	697a      	ldr	r2, [r7, #20]
 800b194:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b198:	f043 0318 	orr.w	r3, r3, #24
 800b19c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800b19e:	697b      	ldr	r3, [r7, #20]
 800b1a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b1a4:	691b      	ldr	r3, [r3, #16]
 800b1a6:	697a      	ldr	r2, [r7, #20]
 800b1a8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b1ac:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800b1b0:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800b1b2:	7afb      	ldrb	r3, [r7, #11]
 800b1b4:	2b01      	cmp	r3, #1
 800b1b6:	d10f      	bne.n	800b1d8 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800b1b8:	697b      	ldr	r3, [r7, #20]
 800b1ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b1be:	461a      	mov	r2, r3
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800b1c4:	697b      	ldr	r3, [r7, #20]
 800b1c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b1ca:	681b      	ldr	r3, [r3, #0]
 800b1cc:	697a      	ldr	r2, [r7, #20]
 800b1ce:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b1d2:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800b1d6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800b1d8:	2300      	movs	r3, #0
}
 800b1da:	4618      	mov	r0, r3
 800b1dc:	371c      	adds	r7, #28
 800b1de:	46bd      	mov	sp, r7
 800b1e0:	bc80      	pop	{r7}
 800b1e2:	4770      	bx	lr
 800b1e4:	4f54300a 	.word	0x4f54300a

0800b1e8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800b1e8:	b480      	push	{r7}
 800b1ea:	b085      	sub	sp, #20
 800b1ec:	af00      	add	r7, sp, #0
 800b1ee:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800b1f0:	2300      	movs	r3, #0
 800b1f2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800b1f4:	68fb      	ldr	r3, [r7, #12]
 800b1f6:	3301      	adds	r3, #1
 800b1f8:	60fb      	str	r3, [r7, #12]
 800b1fa:	68fb      	ldr	r3, [r7, #12]
 800b1fc:	4a12      	ldr	r2, [pc, #72]	; (800b248 <USB_CoreReset+0x60>)
 800b1fe:	4293      	cmp	r3, r2
 800b200:	d901      	bls.n	800b206 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800b202:	2303      	movs	r3, #3
 800b204:	e01b      	b.n	800b23e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	691b      	ldr	r3, [r3, #16]
 800b20a:	2b00      	cmp	r3, #0
 800b20c:	daf2      	bge.n	800b1f4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800b20e:	2300      	movs	r3, #0
 800b210:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	691b      	ldr	r3, [r3, #16]
 800b216:	f043 0201 	orr.w	r2, r3, #1
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800b21e:	68fb      	ldr	r3, [r7, #12]
 800b220:	3301      	adds	r3, #1
 800b222:	60fb      	str	r3, [r7, #12]
 800b224:	68fb      	ldr	r3, [r7, #12]
 800b226:	4a08      	ldr	r2, [pc, #32]	; (800b248 <USB_CoreReset+0x60>)
 800b228:	4293      	cmp	r3, r2
 800b22a:	d901      	bls.n	800b230 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800b22c:	2303      	movs	r3, #3
 800b22e:	e006      	b.n	800b23e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	691b      	ldr	r3, [r3, #16]
 800b234:	f003 0301 	and.w	r3, r3, #1
 800b238:	2b01      	cmp	r3, #1
 800b23a:	d0f0      	beq.n	800b21e <USB_CoreReset+0x36>

  return HAL_OK;
 800b23c:	2300      	movs	r3, #0
}
 800b23e:	4618      	mov	r0, r3
 800b240:	3714      	adds	r7, #20
 800b242:	46bd      	mov	sp, r7
 800b244:	bc80      	pop	{r7}
 800b246:	4770      	bx	lr
 800b248:	00030d40 	.word	0x00030d40

0800b24c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b24c:	b580      	push	{r7, lr}
 800b24e:	b084      	sub	sp, #16
 800b250:	af00      	add	r7, sp, #0
 800b252:	6078      	str	r0, [r7, #4]
 800b254:	460b      	mov	r3, r1
 800b256:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800b258:	2300      	movs	r3, #0
 800b25a:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	7c1b      	ldrb	r3, [r3, #16]
 800b260:	2b00      	cmp	r3, #0
 800b262:	d115      	bne.n	800b290 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800b264:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b268:	2202      	movs	r2, #2
 800b26a:	2181      	movs	r1, #129	; 0x81
 800b26c:	6878      	ldr	r0, [r7, #4]
 800b26e:	f001 ff48 	bl	800d102 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	2201      	movs	r2, #1
 800b276:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800b278:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b27c:	2202      	movs	r2, #2
 800b27e:	2101      	movs	r1, #1
 800b280:	6878      	ldr	r0, [r7, #4]
 800b282:	f001 ff3e 	bl	800d102 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	2201      	movs	r2, #1
 800b28a:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 800b28e:	e012      	b.n	800b2b6 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800b290:	2340      	movs	r3, #64	; 0x40
 800b292:	2202      	movs	r2, #2
 800b294:	2181      	movs	r1, #129	; 0x81
 800b296:	6878      	ldr	r0, [r7, #4]
 800b298:	f001 ff33 	bl	800d102 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	2201      	movs	r2, #1
 800b2a0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800b2a2:	2340      	movs	r3, #64	; 0x40
 800b2a4:	2202      	movs	r2, #2
 800b2a6:	2101      	movs	r1, #1
 800b2a8:	6878      	ldr	r0, [r7, #4]
 800b2aa:	f001 ff2a 	bl	800d102 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	2201      	movs	r2, #1
 800b2b2:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800b2b6:	2308      	movs	r3, #8
 800b2b8:	2203      	movs	r2, #3
 800b2ba:	2182      	movs	r1, #130	; 0x82
 800b2bc:	6878      	ldr	r0, [r7, #4]
 800b2be:	f001 ff20 	bl	800d102 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	2201      	movs	r2, #1
 800b2c6:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800b2c8:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800b2cc:	f004 fb56 	bl	800f97c <malloc>
 800b2d0:	4603      	mov	r3, r0
 800b2d2:	461a      	mov	r2, r3
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b2e0:	2b00      	cmp	r3, #0
 800b2e2:	d102      	bne.n	800b2ea <USBD_CDC_Init+0x9e>
  {
    ret = 1U;
 800b2e4:	2301      	movs	r3, #1
 800b2e6:	73fb      	strb	r3, [r7, #15]
 800b2e8:	e026      	b.n	800b338 <USBD_CDC_Init+0xec>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b2f0:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b2f8:	681b      	ldr	r3, [r3, #0]
 800b2fa:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 800b2fc:	68bb      	ldr	r3, [r7, #8]
 800b2fe:	2200      	movs	r2, #0
 800b300:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 800b304:	68bb      	ldr	r3, [r7, #8]
 800b306:	2200      	movs	r2, #0
 800b308:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	7c1b      	ldrb	r3, [r3, #16]
 800b310:	2b00      	cmp	r3, #0
 800b312:	d109      	bne.n	800b328 <USBD_CDC_Init+0xdc>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800b314:	68bb      	ldr	r3, [r7, #8]
 800b316:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b31a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b31e:	2101      	movs	r1, #1
 800b320:	6878      	ldr	r0, [r7, #4]
 800b322:	f001 ffde 	bl	800d2e2 <USBD_LL_PrepareReceive>
 800b326:	e007      	b.n	800b338 <USBD_CDC_Init+0xec>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800b328:	68bb      	ldr	r3, [r7, #8]
 800b32a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b32e:	2340      	movs	r3, #64	; 0x40
 800b330:	2101      	movs	r1, #1
 800b332:	6878      	ldr	r0, [r7, #4]
 800b334:	f001 ffd5 	bl	800d2e2 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 800b338:	7bfb      	ldrb	r3, [r7, #15]
}
 800b33a:	4618      	mov	r0, r3
 800b33c:	3710      	adds	r7, #16
 800b33e:	46bd      	mov	sp, r7
 800b340:	bd80      	pop	{r7, pc}

0800b342 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b342:	b580      	push	{r7, lr}
 800b344:	b084      	sub	sp, #16
 800b346:	af00      	add	r7, sp, #0
 800b348:	6078      	str	r0, [r7, #4]
 800b34a:	460b      	mov	r3, r1
 800b34c:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800b34e:	2300      	movs	r3, #0
 800b350:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800b352:	2181      	movs	r1, #129	; 0x81
 800b354:	6878      	ldr	r0, [r7, #4]
 800b356:	f001 fefa 	bl	800d14e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	2200      	movs	r2, #0
 800b35e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800b360:	2101      	movs	r1, #1
 800b362:	6878      	ldr	r0, [r7, #4]
 800b364:	f001 fef3 	bl	800d14e <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	2200      	movs	r2, #0
 800b36c:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800b370:	2182      	movs	r1, #130	; 0x82
 800b372:	6878      	ldr	r0, [r7, #4]
 800b374:	f001 feeb 	bl	800d14e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	2200      	movs	r2, #0
 800b37c:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b384:	2b00      	cmp	r3, #0
 800b386:	d00e      	beq.n	800b3a6 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b38e:	685b      	ldr	r3, [r3, #4]
 800b390:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b398:	4618      	mov	r0, r3
 800b39a:	f004 faf7 	bl	800f98c <free>
    pdev->pClassData = NULL;
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	2200      	movs	r2, #0
 800b3a2:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 800b3a6:	7bfb      	ldrb	r3, [r7, #15]
}
 800b3a8:	4618      	mov	r0, r3
 800b3aa:	3710      	adds	r7, #16
 800b3ac:	46bd      	mov	sp, r7
 800b3ae:	bd80      	pop	{r7, pc}

0800b3b0 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800b3b0:	b580      	push	{r7, lr}
 800b3b2:	b086      	sub	sp, #24
 800b3b4:	af00      	add	r7, sp, #0
 800b3b6:	6078      	str	r0, [r7, #4]
 800b3b8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b3c0:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800b3c2:	2300      	movs	r3, #0
 800b3c4:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 800b3c6:	2300      	movs	r3, #0
 800b3c8:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 800b3ca:	2300      	movs	r3, #0
 800b3cc:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b3ce:	683b      	ldr	r3, [r7, #0]
 800b3d0:	781b      	ldrb	r3, [r3, #0]
 800b3d2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b3d6:	2b00      	cmp	r3, #0
 800b3d8:	d039      	beq.n	800b44e <USBD_CDC_Setup+0x9e>
 800b3da:	2b20      	cmp	r3, #32
 800b3dc:	d17f      	bne.n	800b4de <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 800b3de:	683b      	ldr	r3, [r7, #0]
 800b3e0:	88db      	ldrh	r3, [r3, #6]
 800b3e2:	2b00      	cmp	r3, #0
 800b3e4:	d029      	beq.n	800b43a <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 800b3e6:	683b      	ldr	r3, [r7, #0]
 800b3e8:	781b      	ldrb	r3, [r3, #0]
 800b3ea:	b25b      	sxtb	r3, r3
 800b3ec:	2b00      	cmp	r3, #0
 800b3ee:	da11      	bge.n	800b414 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b3f6:	689b      	ldr	r3, [r3, #8]
 800b3f8:	683a      	ldr	r2, [r7, #0]
 800b3fa:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 800b3fc:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800b3fe:	683a      	ldr	r2, [r7, #0]
 800b400:	88d2      	ldrh	r2, [r2, #6]
 800b402:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800b404:	6939      	ldr	r1, [r7, #16]
 800b406:	683b      	ldr	r3, [r7, #0]
 800b408:	88db      	ldrh	r3, [r3, #6]
 800b40a:	461a      	mov	r2, r3
 800b40c:	6878      	ldr	r0, [r7, #4]
 800b40e:	f001 fa42 	bl	800c896 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 800b412:	e06b      	b.n	800b4ec <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 800b414:	683b      	ldr	r3, [r7, #0]
 800b416:	785a      	ldrb	r2, [r3, #1]
 800b418:	693b      	ldr	r3, [r7, #16]
 800b41a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800b41e:	683b      	ldr	r3, [r7, #0]
 800b420:	88db      	ldrh	r3, [r3, #6]
 800b422:	b2da      	uxtb	r2, r3
 800b424:	693b      	ldr	r3, [r7, #16]
 800b426:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800b42a:	6939      	ldr	r1, [r7, #16]
 800b42c:	683b      	ldr	r3, [r7, #0]
 800b42e:	88db      	ldrh	r3, [r3, #6]
 800b430:	461a      	mov	r2, r3
 800b432:	6878      	ldr	r0, [r7, #4]
 800b434:	f001 fa5d 	bl	800c8f2 <USBD_CtlPrepareRx>
      break;
 800b438:	e058      	b.n	800b4ec <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b440:	689b      	ldr	r3, [r3, #8]
 800b442:	683a      	ldr	r2, [r7, #0]
 800b444:	7850      	ldrb	r0, [r2, #1]
 800b446:	2200      	movs	r2, #0
 800b448:	6839      	ldr	r1, [r7, #0]
 800b44a:	4798      	blx	r3
      break;
 800b44c:	e04e      	b.n	800b4ec <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b44e:	683b      	ldr	r3, [r7, #0]
 800b450:	785b      	ldrb	r3, [r3, #1]
 800b452:	2b0b      	cmp	r3, #11
 800b454:	d02e      	beq.n	800b4b4 <USBD_CDC_Setup+0x104>
 800b456:	2b0b      	cmp	r3, #11
 800b458:	dc38      	bgt.n	800b4cc <USBD_CDC_Setup+0x11c>
 800b45a:	2b00      	cmp	r3, #0
 800b45c:	d002      	beq.n	800b464 <USBD_CDC_Setup+0xb4>
 800b45e:	2b0a      	cmp	r3, #10
 800b460:	d014      	beq.n	800b48c <USBD_CDC_Setup+0xdc>
 800b462:	e033      	b.n	800b4cc <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b46a:	2b03      	cmp	r3, #3
 800b46c:	d107      	bne.n	800b47e <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 800b46e:	f107 030c 	add.w	r3, r7, #12
 800b472:	2202      	movs	r2, #2
 800b474:	4619      	mov	r1, r3
 800b476:	6878      	ldr	r0, [r7, #4]
 800b478:	f001 fa0d 	bl	800c896 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800b47c:	e02e      	b.n	800b4dc <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 800b47e:	6839      	ldr	r1, [r7, #0]
 800b480:	6878      	ldr	r0, [r7, #4]
 800b482:	f001 f99e 	bl	800c7c2 <USBD_CtlError>
            ret = USBD_FAIL;
 800b486:	2302      	movs	r3, #2
 800b488:	75fb      	strb	r3, [r7, #23]
          break;
 800b48a:	e027      	b.n	800b4dc <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b492:	2b03      	cmp	r3, #3
 800b494:	d107      	bne.n	800b4a6 <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 800b496:	f107 030f 	add.w	r3, r7, #15
 800b49a:	2201      	movs	r2, #1
 800b49c:	4619      	mov	r1, r3
 800b49e:	6878      	ldr	r0, [r7, #4]
 800b4a0:	f001 f9f9 	bl	800c896 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800b4a4:	e01a      	b.n	800b4dc <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 800b4a6:	6839      	ldr	r1, [r7, #0]
 800b4a8:	6878      	ldr	r0, [r7, #4]
 800b4aa:	f001 f98a 	bl	800c7c2 <USBD_CtlError>
            ret = USBD_FAIL;
 800b4ae:	2302      	movs	r3, #2
 800b4b0:	75fb      	strb	r3, [r7, #23]
          break;
 800b4b2:	e013      	b.n	800b4dc <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b4ba:	2b03      	cmp	r3, #3
 800b4bc:	d00d      	beq.n	800b4da <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 800b4be:	6839      	ldr	r1, [r7, #0]
 800b4c0:	6878      	ldr	r0, [r7, #4]
 800b4c2:	f001 f97e 	bl	800c7c2 <USBD_CtlError>
            ret = USBD_FAIL;
 800b4c6:	2302      	movs	r3, #2
 800b4c8:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800b4ca:	e006      	b.n	800b4da <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 800b4cc:	6839      	ldr	r1, [r7, #0]
 800b4ce:	6878      	ldr	r0, [r7, #4]
 800b4d0:	f001 f977 	bl	800c7c2 <USBD_CtlError>
          ret = USBD_FAIL;
 800b4d4:	2302      	movs	r3, #2
 800b4d6:	75fb      	strb	r3, [r7, #23]
          break;
 800b4d8:	e000      	b.n	800b4dc <USBD_CDC_Setup+0x12c>
          break;
 800b4da:	bf00      	nop
      }
      break;
 800b4dc:	e006      	b.n	800b4ec <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800b4de:	6839      	ldr	r1, [r7, #0]
 800b4e0:	6878      	ldr	r0, [r7, #4]
 800b4e2:	f001 f96e 	bl	800c7c2 <USBD_CtlError>
      ret = USBD_FAIL;
 800b4e6:	2302      	movs	r3, #2
 800b4e8:	75fb      	strb	r3, [r7, #23]
      break;
 800b4ea:	bf00      	nop
  }

  return ret;
 800b4ec:	7dfb      	ldrb	r3, [r7, #23]
}
 800b4ee:	4618      	mov	r0, r3
 800b4f0:	3718      	adds	r7, #24
 800b4f2:	46bd      	mov	sp, r7
 800b4f4:	bd80      	pop	{r7, pc}

0800b4f6 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b4f6:	b580      	push	{r7, lr}
 800b4f8:	b084      	sub	sp, #16
 800b4fa:	af00      	add	r7, sp, #0
 800b4fc:	6078      	str	r0, [r7, #4]
 800b4fe:	460b      	mov	r3, r1
 800b500:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b508:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800b50a:	687b      	ldr	r3, [r7, #4]
 800b50c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b510:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b518:	2b00      	cmp	r3, #0
 800b51a:	d03a      	beq.n	800b592 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800b51c:	78fa      	ldrb	r2, [r7, #3]
 800b51e:	6879      	ldr	r1, [r7, #4]
 800b520:	4613      	mov	r3, r2
 800b522:	009b      	lsls	r3, r3, #2
 800b524:	4413      	add	r3, r2
 800b526:	009b      	lsls	r3, r3, #2
 800b528:	440b      	add	r3, r1
 800b52a:	331c      	adds	r3, #28
 800b52c:	681b      	ldr	r3, [r3, #0]
 800b52e:	2b00      	cmp	r3, #0
 800b530:	d029      	beq.n	800b586 <USBD_CDC_DataIn+0x90>
 800b532:	78fa      	ldrb	r2, [r7, #3]
 800b534:	6879      	ldr	r1, [r7, #4]
 800b536:	4613      	mov	r3, r2
 800b538:	009b      	lsls	r3, r3, #2
 800b53a:	4413      	add	r3, r2
 800b53c:	009b      	lsls	r3, r3, #2
 800b53e:	440b      	add	r3, r1
 800b540:	331c      	adds	r3, #28
 800b542:	681a      	ldr	r2, [r3, #0]
 800b544:	78f9      	ldrb	r1, [r7, #3]
 800b546:	68b8      	ldr	r0, [r7, #8]
 800b548:	460b      	mov	r3, r1
 800b54a:	00db      	lsls	r3, r3, #3
 800b54c:	1a5b      	subs	r3, r3, r1
 800b54e:	009b      	lsls	r3, r3, #2
 800b550:	4403      	add	r3, r0
 800b552:	3344      	adds	r3, #68	; 0x44
 800b554:	681b      	ldr	r3, [r3, #0]
 800b556:	fbb2 f1f3 	udiv	r1, r2, r3
 800b55a:	fb03 f301 	mul.w	r3, r3, r1
 800b55e:	1ad3      	subs	r3, r2, r3
 800b560:	2b00      	cmp	r3, #0
 800b562:	d110      	bne.n	800b586 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 800b564:	78fa      	ldrb	r2, [r7, #3]
 800b566:	6879      	ldr	r1, [r7, #4]
 800b568:	4613      	mov	r3, r2
 800b56a:	009b      	lsls	r3, r3, #2
 800b56c:	4413      	add	r3, r2
 800b56e:	009b      	lsls	r3, r3, #2
 800b570:	440b      	add	r3, r1
 800b572:	331c      	adds	r3, #28
 800b574:	2200      	movs	r2, #0
 800b576:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800b578:	78f9      	ldrb	r1, [r7, #3]
 800b57a:	2300      	movs	r3, #0
 800b57c:	2200      	movs	r2, #0
 800b57e:	6878      	ldr	r0, [r7, #4]
 800b580:	f001 fe8c 	bl	800d29c <USBD_LL_Transmit>
 800b584:	e003      	b.n	800b58e <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 800b586:	68fb      	ldr	r3, [r7, #12]
 800b588:	2200      	movs	r2, #0
 800b58a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 800b58e:	2300      	movs	r3, #0
 800b590:	e000      	b.n	800b594 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 800b592:	2302      	movs	r3, #2
  }
}
 800b594:	4618      	mov	r0, r3
 800b596:	3710      	adds	r7, #16
 800b598:	46bd      	mov	sp, r7
 800b59a:	bd80      	pop	{r7, pc}

0800b59c <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b59c:	b580      	push	{r7, lr}
 800b59e:	b084      	sub	sp, #16
 800b5a0:	af00      	add	r7, sp, #0
 800b5a2:	6078      	str	r0, [r7, #4]
 800b5a4:	460b      	mov	r3, r1
 800b5a6:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b5ae:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800b5b0:	78fb      	ldrb	r3, [r7, #3]
 800b5b2:	4619      	mov	r1, r3
 800b5b4:	6878      	ldr	r0, [r7, #4]
 800b5b6:	f001 feb7 	bl	800d328 <USBD_LL_GetRxDataSize>
 800b5ba:	4602      	mov	r2, r0
 800b5bc:	68fb      	ldr	r3, [r7, #12]
 800b5be:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b5c8:	2b00      	cmp	r3, #0
 800b5ca:	d00d      	beq.n	800b5e8 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b5d2:	68db      	ldr	r3, [r3, #12]
 800b5d4:	68fa      	ldr	r2, [r7, #12]
 800b5d6:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800b5da:	68fa      	ldr	r2, [r7, #12]
 800b5dc:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800b5e0:	4611      	mov	r1, r2
 800b5e2:	4798      	blx	r3

    return USBD_OK;
 800b5e4:	2300      	movs	r3, #0
 800b5e6:	e000      	b.n	800b5ea <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 800b5e8:	2302      	movs	r3, #2
  }
}
 800b5ea:	4618      	mov	r0, r3
 800b5ec:	3710      	adds	r7, #16
 800b5ee:	46bd      	mov	sp, r7
 800b5f0:	bd80      	pop	{r7, pc}

0800b5f2 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800b5f2:	b580      	push	{r7, lr}
 800b5f4:	b084      	sub	sp, #16
 800b5f6:	af00      	add	r7, sp, #0
 800b5f8:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b600:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800b602:	687b      	ldr	r3, [r7, #4]
 800b604:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b608:	2b00      	cmp	r3, #0
 800b60a:	d015      	beq.n	800b638 <USBD_CDC_EP0_RxReady+0x46>
 800b60c:	68fb      	ldr	r3, [r7, #12]
 800b60e:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800b612:	2bff      	cmp	r3, #255	; 0xff
 800b614:	d010      	beq.n	800b638 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b61c:	689b      	ldr	r3, [r3, #8]
 800b61e:	68fa      	ldr	r2, [r7, #12]
 800b620:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 800b624:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800b626:	68fa      	ldr	r2, [r7, #12]
 800b628:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800b62c:	b292      	uxth	r2, r2
 800b62e:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800b630:	68fb      	ldr	r3, [r7, #12]
 800b632:	22ff      	movs	r2, #255	; 0xff
 800b634:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 800b638:	2300      	movs	r3, #0
}
 800b63a:	4618      	mov	r0, r3
 800b63c:	3710      	adds	r7, #16
 800b63e:	46bd      	mov	sp, r7
 800b640:	bd80      	pop	{r7, pc}
	...

0800b644 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800b644:	b480      	push	{r7}
 800b646:	b083      	sub	sp, #12
 800b648:	af00      	add	r7, sp, #0
 800b64a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	2243      	movs	r2, #67	; 0x43
 800b650:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 800b652:	4b03      	ldr	r3, [pc, #12]	; (800b660 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800b654:	4618      	mov	r0, r3
 800b656:	370c      	adds	r7, #12
 800b658:	46bd      	mov	sp, r7
 800b65a:	bc80      	pop	{r7}
 800b65c:	4770      	bx	lr
 800b65e:	bf00      	nop
 800b660:	200000b8 	.word	0x200000b8

0800b664 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800b664:	b480      	push	{r7}
 800b666:	b083      	sub	sp, #12
 800b668:	af00      	add	r7, sp, #0
 800b66a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	2243      	movs	r2, #67	; 0x43
 800b670:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 800b672:	4b03      	ldr	r3, [pc, #12]	; (800b680 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800b674:	4618      	mov	r0, r3
 800b676:	370c      	adds	r7, #12
 800b678:	46bd      	mov	sp, r7
 800b67a:	bc80      	pop	{r7}
 800b67c:	4770      	bx	lr
 800b67e:	bf00      	nop
 800b680:	20000074 	.word	0x20000074

0800b684 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800b684:	b480      	push	{r7}
 800b686:	b083      	sub	sp, #12
 800b688:	af00      	add	r7, sp, #0
 800b68a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	2243      	movs	r2, #67	; 0x43
 800b690:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 800b692:	4b03      	ldr	r3, [pc, #12]	; (800b6a0 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800b694:	4618      	mov	r0, r3
 800b696:	370c      	adds	r7, #12
 800b698:	46bd      	mov	sp, r7
 800b69a:	bc80      	pop	{r7}
 800b69c:	4770      	bx	lr
 800b69e:	bf00      	nop
 800b6a0:	200000fc 	.word	0x200000fc

0800b6a4 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800b6a4:	b480      	push	{r7}
 800b6a6:	b083      	sub	sp, #12
 800b6a8:	af00      	add	r7, sp, #0
 800b6aa:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	220a      	movs	r2, #10
 800b6b0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800b6b2:	4b03      	ldr	r3, [pc, #12]	; (800b6c0 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800b6b4:	4618      	mov	r0, r3
 800b6b6:	370c      	adds	r7, #12
 800b6b8:	46bd      	mov	sp, r7
 800b6ba:	bc80      	pop	{r7}
 800b6bc:	4770      	bx	lr
 800b6be:	bf00      	nop
 800b6c0:	20000030 	.word	0x20000030

0800b6c4 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 800b6c4:	b480      	push	{r7}
 800b6c6:	b085      	sub	sp, #20
 800b6c8:	af00      	add	r7, sp, #0
 800b6ca:	6078      	str	r0, [r7, #4]
 800b6cc:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800b6ce:	2302      	movs	r3, #2
 800b6d0:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 800b6d2:	683b      	ldr	r3, [r7, #0]
 800b6d4:	2b00      	cmp	r3, #0
 800b6d6:	d005      	beq.n	800b6e4 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	683a      	ldr	r2, [r7, #0]
 800b6dc:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 800b6e0:	2300      	movs	r3, #0
 800b6e2:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800b6e4:	7bfb      	ldrb	r3, [r7, #15]
}
 800b6e6:	4618      	mov	r0, r3
 800b6e8:	3714      	adds	r7, #20
 800b6ea:	46bd      	mov	sp, r7
 800b6ec:	bc80      	pop	{r7}
 800b6ee:	4770      	bx	lr

0800b6f0 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 800b6f0:	b480      	push	{r7}
 800b6f2:	b087      	sub	sp, #28
 800b6f4:	af00      	add	r7, sp, #0
 800b6f6:	60f8      	str	r0, [r7, #12]
 800b6f8:	60b9      	str	r1, [r7, #8]
 800b6fa:	4613      	mov	r3, r2
 800b6fc:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800b6fe:	68fb      	ldr	r3, [r7, #12]
 800b700:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b704:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800b706:	697b      	ldr	r3, [r7, #20]
 800b708:	68ba      	ldr	r2, [r7, #8]
 800b70a:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800b70e:	88fa      	ldrh	r2, [r7, #6]
 800b710:	697b      	ldr	r3, [r7, #20]
 800b712:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 800b716:	2300      	movs	r3, #0
}
 800b718:	4618      	mov	r0, r3
 800b71a:	371c      	adds	r7, #28
 800b71c:	46bd      	mov	sp, r7
 800b71e:	bc80      	pop	{r7}
 800b720:	4770      	bx	lr

0800b722 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 800b722:	b480      	push	{r7}
 800b724:	b085      	sub	sp, #20
 800b726:	af00      	add	r7, sp, #0
 800b728:	6078      	str	r0, [r7, #4]
 800b72a:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b732:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800b734:	68fb      	ldr	r3, [r7, #12]
 800b736:	683a      	ldr	r2, [r7, #0]
 800b738:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 800b73c:	2300      	movs	r3, #0
}
 800b73e:	4618      	mov	r0, r3
 800b740:	3714      	adds	r7, #20
 800b742:	46bd      	mov	sp, r7
 800b744:	bc80      	pop	{r7}
 800b746:	4770      	bx	lr

0800b748 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800b748:	b580      	push	{r7, lr}
 800b74a:	b084      	sub	sp, #16
 800b74c:	af00      	add	r7, sp, #0
 800b74e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800b750:	687b      	ldr	r3, [r7, #4]
 800b752:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b756:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 800b758:	687b      	ldr	r3, [r7, #4]
 800b75a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b75e:	2b00      	cmp	r3, #0
 800b760:	d01c      	beq.n	800b79c <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 800b762:	68fb      	ldr	r3, [r7, #12]
 800b764:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800b768:	2b00      	cmp	r3, #0
 800b76a:	d115      	bne.n	800b798 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 800b76c:	68fb      	ldr	r3, [r7, #12]
 800b76e:	2201      	movs	r2, #1
 800b770:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800b774:	68fb      	ldr	r3, [r7, #12]
 800b776:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800b77a:	687b      	ldr	r3, [r7, #4]
 800b77c:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800b77e:	68fb      	ldr	r3, [r7, #12]
 800b780:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 800b784:	68fb      	ldr	r3, [r7, #12]
 800b786:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800b78a:	b29b      	uxth	r3, r3
 800b78c:	2181      	movs	r1, #129	; 0x81
 800b78e:	6878      	ldr	r0, [r7, #4]
 800b790:	f001 fd84 	bl	800d29c <USBD_LL_Transmit>

      return USBD_OK;
 800b794:	2300      	movs	r3, #0
 800b796:	e002      	b.n	800b79e <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 800b798:	2301      	movs	r3, #1
 800b79a:	e000      	b.n	800b79e <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 800b79c:	2302      	movs	r3, #2
  }
}
 800b79e:	4618      	mov	r0, r3
 800b7a0:	3710      	adds	r7, #16
 800b7a2:	46bd      	mov	sp, r7
 800b7a4:	bd80      	pop	{r7, pc}

0800b7a6 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800b7a6:	b580      	push	{r7, lr}
 800b7a8:	b084      	sub	sp, #16
 800b7aa:	af00      	add	r7, sp, #0
 800b7ac:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800b7ae:	687b      	ldr	r3, [r7, #4]
 800b7b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b7b4:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 800b7b6:	687b      	ldr	r3, [r7, #4]
 800b7b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b7bc:	2b00      	cmp	r3, #0
 800b7be:	d017      	beq.n	800b7f0 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	7c1b      	ldrb	r3, [r3, #16]
 800b7c4:	2b00      	cmp	r3, #0
 800b7c6:	d109      	bne.n	800b7dc <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800b7c8:	68fb      	ldr	r3, [r7, #12]
 800b7ca:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b7ce:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b7d2:	2101      	movs	r1, #1
 800b7d4:	6878      	ldr	r0, [r7, #4]
 800b7d6:	f001 fd84 	bl	800d2e2 <USBD_LL_PrepareReceive>
 800b7da:	e007      	b.n	800b7ec <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800b7dc:	68fb      	ldr	r3, [r7, #12]
 800b7de:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b7e2:	2340      	movs	r3, #64	; 0x40
 800b7e4:	2101      	movs	r1, #1
 800b7e6:	6878      	ldr	r0, [r7, #4]
 800b7e8:	f001 fd7b 	bl	800d2e2 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 800b7ec:	2300      	movs	r3, #0
 800b7ee:	e000      	b.n	800b7f2 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 800b7f0:	2302      	movs	r3, #2
  }
}
 800b7f2:	4618      	mov	r0, r3
 800b7f4:	3710      	adds	r7, #16
 800b7f6:	46bd      	mov	sp, r7
 800b7f8:	bd80      	pop	{r7, pc}

0800b7fa <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800b7fa:	b580      	push	{r7, lr}
 800b7fc:	b084      	sub	sp, #16
 800b7fe:	af00      	add	r7, sp, #0
 800b800:	60f8      	str	r0, [r7, #12]
 800b802:	60b9      	str	r1, [r7, #8]
 800b804:	4613      	mov	r3, r2
 800b806:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800b808:	68fb      	ldr	r3, [r7, #12]
 800b80a:	2b00      	cmp	r3, #0
 800b80c:	d101      	bne.n	800b812 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800b80e:	2302      	movs	r3, #2
 800b810:	e01a      	b.n	800b848 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 800b812:	68fb      	ldr	r3, [r7, #12]
 800b814:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b818:	2b00      	cmp	r3, #0
 800b81a:	d003      	beq.n	800b824 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800b81c:	68fb      	ldr	r3, [r7, #12]
 800b81e:	2200      	movs	r2, #0
 800b820:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800b824:	68bb      	ldr	r3, [r7, #8]
 800b826:	2b00      	cmp	r3, #0
 800b828:	d003      	beq.n	800b832 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 800b82a:	68fb      	ldr	r3, [r7, #12]
 800b82c:	68ba      	ldr	r2, [r7, #8]
 800b82e:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b832:	68fb      	ldr	r3, [r7, #12]
 800b834:	2201      	movs	r2, #1
 800b836:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800b83a:	68fb      	ldr	r3, [r7, #12]
 800b83c:	79fa      	ldrb	r2, [r7, #7]
 800b83e:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800b840:	68f8      	ldr	r0, [r7, #12]
 800b842:	f001 fbf9 	bl	800d038 <USBD_LL_Init>

  return USBD_OK;
 800b846:	2300      	movs	r3, #0
}
 800b848:	4618      	mov	r0, r3
 800b84a:	3710      	adds	r7, #16
 800b84c:	46bd      	mov	sp, r7
 800b84e:	bd80      	pop	{r7, pc}

0800b850 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800b850:	b480      	push	{r7}
 800b852:	b085      	sub	sp, #20
 800b854:	af00      	add	r7, sp, #0
 800b856:	6078      	str	r0, [r7, #4]
 800b858:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 800b85a:	2300      	movs	r3, #0
 800b85c:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 800b85e:	683b      	ldr	r3, [r7, #0]
 800b860:	2b00      	cmp	r3, #0
 800b862:	d006      	beq.n	800b872 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	683a      	ldr	r2, [r7, #0]
 800b868:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 800b86c:	2300      	movs	r3, #0
 800b86e:	73fb      	strb	r3, [r7, #15]
 800b870:	e001      	b.n	800b876 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800b872:	2302      	movs	r3, #2
 800b874:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800b876:	7bfb      	ldrb	r3, [r7, #15]
}
 800b878:	4618      	mov	r0, r3
 800b87a:	3714      	adds	r7, #20
 800b87c:	46bd      	mov	sp, r7
 800b87e:	bc80      	pop	{r7}
 800b880:	4770      	bx	lr

0800b882 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 800b882:	b580      	push	{r7, lr}
 800b884:	b082      	sub	sp, #8
 800b886:	af00      	add	r7, sp, #0
 800b888:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800b88a:	6878      	ldr	r0, [r7, #4]
 800b88c:	f001 fc1e 	bl	800d0cc <USBD_LL_Start>

  return USBD_OK;
 800b890:	2300      	movs	r3, #0
}
 800b892:	4618      	mov	r0, r3
 800b894:	3708      	adds	r7, #8
 800b896:	46bd      	mov	sp, r7
 800b898:	bd80      	pop	{r7, pc}

0800b89a <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800b89a:	b480      	push	{r7}
 800b89c:	b083      	sub	sp, #12
 800b89e:	af00      	add	r7, sp, #0
 800b8a0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800b8a2:	2300      	movs	r3, #0
}
 800b8a4:	4618      	mov	r0, r3
 800b8a6:	370c      	adds	r7, #12
 800b8a8:	46bd      	mov	sp, r7
 800b8aa:	bc80      	pop	{r7}
 800b8ac:	4770      	bx	lr

0800b8ae <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800b8ae:	b580      	push	{r7, lr}
 800b8b0:	b084      	sub	sp, #16
 800b8b2:	af00      	add	r7, sp, #0
 800b8b4:	6078      	str	r0, [r7, #4]
 800b8b6:	460b      	mov	r3, r1
 800b8b8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800b8ba:	2302      	movs	r3, #2
 800b8bc:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800b8be:	687b      	ldr	r3, [r7, #4]
 800b8c0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b8c4:	2b00      	cmp	r3, #0
 800b8c6:	d00c      	beq.n	800b8e2 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 800b8c8:	687b      	ldr	r3, [r7, #4]
 800b8ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b8ce:	681b      	ldr	r3, [r3, #0]
 800b8d0:	78fa      	ldrb	r2, [r7, #3]
 800b8d2:	4611      	mov	r1, r2
 800b8d4:	6878      	ldr	r0, [r7, #4]
 800b8d6:	4798      	blx	r3
 800b8d8:	4603      	mov	r3, r0
 800b8da:	2b00      	cmp	r3, #0
 800b8dc:	d101      	bne.n	800b8e2 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800b8de:	2300      	movs	r3, #0
 800b8e0:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800b8e2:	7bfb      	ldrb	r3, [r7, #15]
}
 800b8e4:	4618      	mov	r0, r3
 800b8e6:	3710      	adds	r7, #16
 800b8e8:	46bd      	mov	sp, r7
 800b8ea:	bd80      	pop	{r7, pc}

0800b8ec <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800b8ec:	b580      	push	{r7, lr}
 800b8ee:	b082      	sub	sp, #8
 800b8f0:	af00      	add	r7, sp, #0
 800b8f2:	6078      	str	r0, [r7, #4]
 800b8f4:	460b      	mov	r3, r1
 800b8f6:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b8fe:	685b      	ldr	r3, [r3, #4]
 800b900:	78fa      	ldrb	r2, [r7, #3]
 800b902:	4611      	mov	r1, r2
 800b904:	6878      	ldr	r0, [r7, #4]
 800b906:	4798      	blx	r3

  return USBD_OK;
 800b908:	2300      	movs	r3, #0
}
 800b90a:	4618      	mov	r0, r3
 800b90c:	3708      	adds	r7, #8
 800b90e:	46bd      	mov	sp, r7
 800b910:	bd80      	pop	{r7, pc}

0800b912 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800b912:	b580      	push	{r7, lr}
 800b914:	b082      	sub	sp, #8
 800b916:	af00      	add	r7, sp, #0
 800b918:	6078      	str	r0, [r7, #4]
 800b91a:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800b922:	6839      	ldr	r1, [r7, #0]
 800b924:	4618      	mov	r0, r3
 800b926:	f000 ff10 	bl	800c74a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	2201      	movs	r2, #1
 800b92e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800b932:	687b      	ldr	r3, [r7, #4]
 800b934:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800b938:	461a      	mov	r2, r3
 800b93a:	687b      	ldr	r3, [r7, #4]
 800b93c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800b940:	687b      	ldr	r3, [r7, #4]
 800b942:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800b946:	f003 031f 	and.w	r3, r3, #31
 800b94a:	2b02      	cmp	r3, #2
 800b94c:	d016      	beq.n	800b97c <USBD_LL_SetupStage+0x6a>
 800b94e:	2b02      	cmp	r3, #2
 800b950:	d81c      	bhi.n	800b98c <USBD_LL_SetupStage+0x7a>
 800b952:	2b00      	cmp	r3, #0
 800b954:	d002      	beq.n	800b95c <USBD_LL_SetupStage+0x4a>
 800b956:	2b01      	cmp	r3, #1
 800b958:	d008      	beq.n	800b96c <USBD_LL_SetupStage+0x5a>
 800b95a:	e017      	b.n	800b98c <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 800b95c:	687b      	ldr	r3, [r7, #4]
 800b95e:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800b962:	4619      	mov	r1, r3
 800b964:	6878      	ldr	r0, [r7, #4]
 800b966:	f000 fa03 	bl	800bd70 <USBD_StdDevReq>
      break;
 800b96a:	e01a      	b.n	800b9a2 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 800b96c:	687b      	ldr	r3, [r7, #4]
 800b96e:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800b972:	4619      	mov	r1, r3
 800b974:	6878      	ldr	r0, [r7, #4]
 800b976:	f000 fa65 	bl	800be44 <USBD_StdItfReq>
      break;
 800b97a:	e012      	b.n	800b9a2 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800b982:	4619      	mov	r1, r3
 800b984:	6878      	ldr	r0, [r7, #4]
 800b986:	f000 faa5 	bl	800bed4 <USBD_StdEPReq>
      break;
 800b98a:	e00a      	b.n	800b9a2 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800b992:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800b996:	b2db      	uxtb	r3, r3
 800b998:	4619      	mov	r1, r3
 800b99a:	6878      	ldr	r0, [r7, #4]
 800b99c:	f001 fbf6 	bl	800d18c <USBD_LL_StallEP>
      break;
 800b9a0:	bf00      	nop
  }

  return USBD_OK;
 800b9a2:	2300      	movs	r3, #0
}
 800b9a4:	4618      	mov	r0, r3
 800b9a6:	3708      	adds	r7, #8
 800b9a8:	46bd      	mov	sp, r7
 800b9aa:	bd80      	pop	{r7, pc}

0800b9ac <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800b9ac:	b580      	push	{r7, lr}
 800b9ae:	b086      	sub	sp, #24
 800b9b0:	af00      	add	r7, sp, #0
 800b9b2:	60f8      	str	r0, [r7, #12]
 800b9b4:	460b      	mov	r3, r1
 800b9b6:	607a      	str	r2, [r7, #4]
 800b9b8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800b9ba:	7afb      	ldrb	r3, [r7, #11]
 800b9bc:	2b00      	cmp	r3, #0
 800b9be:	d14b      	bne.n	800ba58 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 800b9c0:	68fb      	ldr	r3, [r7, #12]
 800b9c2:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800b9c6:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800b9c8:	68fb      	ldr	r3, [r7, #12]
 800b9ca:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800b9ce:	2b03      	cmp	r3, #3
 800b9d0:	d134      	bne.n	800ba3c <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 800b9d2:	697b      	ldr	r3, [r7, #20]
 800b9d4:	68da      	ldr	r2, [r3, #12]
 800b9d6:	697b      	ldr	r3, [r7, #20]
 800b9d8:	691b      	ldr	r3, [r3, #16]
 800b9da:	429a      	cmp	r2, r3
 800b9dc:	d919      	bls.n	800ba12 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 800b9de:	697b      	ldr	r3, [r7, #20]
 800b9e0:	68da      	ldr	r2, [r3, #12]
 800b9e2:	697b      	ldr	r3, [r7, #20]
 800b9e4:	691b      	ldr	r3, [r3, #16]
 800b9e6:	1ad2      	subs	r2, r2, r3
 800b9e8:	697b      	ldr	r3, [r7, #20]
 800b9ea:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800b9ec:	697b      	ldr	r3, [r7, #20]
 800b9ee:	68da      	ldr	r2, [r3, #12]
 800b9f0:	697b      	ldr	r3, [r7, #20]
 800b9f2:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800b9f4:	429a      	cmp	r2, r3
 800b9f6:	d203      	bcs.n	800ba00 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800b9f8:	697b      	ldr	r3, [r7, #20]
 800b9fa:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 800b9fc:	b29b      	uxth	r3, r3
 800b9fe:	e002      	b.n	800ba06 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800ba00:	697b      	ldr	r3, [r7, #20]
 800ba02:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800ba04:	b29b      	uxth	r3, r3
 800ba06:	461a      	mov	r2, r3
 800ba08:	6879      	ldr	r1, [r7, #4]
 800ba0a:	68f8      	ldr	r0, [r7, #12]
 800ba0c:	f000 ff8f 	bl	800c92e <USBD_CtlContinueRx>
 800ba10:	e038      	b.n	800ba84 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800ba12:	68fb      	ldr	r3, [r7, #12]
 800ba14:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ba18:	691b      	ldr	r3, [r3, #16]
 800ba1a:	2b00      	cmp	r3, #0
 800ba1c:	d00a      	beq.n	800ba34 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800ba1e:	68fb      	ldr	r3, [r7, #12]
 800ba20:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800ba24:	2b03      	cmp	r3, #3
 800ba26:	d105      	bne.n	800ba34 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800ba28:	68fb      	ldr	r3, [r7, #12]
 800ba2a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ba2e:	691b      	ldr	r3, [r3, #16]
 800ba30:	68f8      	ldr	r0, [r7, #12]
 800ba32:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800ba34:	68f8      	ldr	r0, [r7, #12]
 800ba36:	f000 ff8c 	bl	800c952 <USBD_CtlSendStatus>
 800ba3a:	e023      	b.n	800ba84 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800ba3c:	68fb      	ldr	r3, [r7, #12]
 800ba3e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800ba42:	2b05      	cmp	r3, #5
 800ba44:	d11e      	bne.n	800ba84 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800ba46:	68fb      	ldr	r3, [r7, #12]
 800ba48:	2200      	movs	r2, #0
 800ba4a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 800ba4e:	2100      	movs	r1, #0
 800ba50:	68f8      	ldr	r0, [r7, #12]
 800ba52:	f001 fb9b 	bl	800d18c <USBD_LL_StallEP>
 800ba56:	e015      	b.n	800ba84 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800ba58:	68fb      	ldr	r3, [r7, #12]
 800ba5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ba5e:	699b      	ldr	r3, [r3, #24]
 800ba60:	2b00      	cmp	r3, #0
 800ba62:	d00d      	beq.n	800ba80 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800ba64:	68fb      	ldr	r3, [r7, #12]
 800ba66:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800ba6a:	2b03      	cmp	r3, #3
 800ba6c:	d108      	bne.n	800ba80 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800ba6e:	68fb      	ldr	r3, [r7, #12]
 800ba70:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ba74:	699b      	ldr	r3, [r3, #24]
 800ba76:	7afa      	ldrb	r2, [r7, #11]
 800ba78:	4611      	mov	r1, r2
 800ba7a:	68f8      	ldr	r0, [r7, #12]
 800ba7c:	4798      	blx	r3
 800ba7e:	e001      	b.n	800ba84 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800ba80:	2302      	movs	r3, #2
 800ba82:	e000      	b.n	800ba86 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 800ba84:	2300      	movs	r3, #0
}
 800ba86:	4618      	mov	r0, r3
 800ba88:	3718      	adds	r7, #24
 800ba8a:	46bd      	mov	sp, r7
 800ba8c:	bd80      	pop	{r7, pc}

0800ba8e <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800ba8e:	b580      	push	{r7, lr}
 800ba90:	b086      	sub	sp, #24
 800ba92:	af00      	add	r7, sp, #0
 800ba94:	60f8      	str	r0, [r7, #12]
 800ba96:	460b      	mov	r3, r1
 800ba98:	607a      	str	r2, [r7, #4]
 800ba9a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800ba9c:	7afb      	ldrb	r3, [r7, #11]
 800ba9e:	2b00      	cmp	r3, #0
 800baa0:	d17f      	bne.n	800bba2 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 800baa2:	68fb      	ldr	r3, [r7, #12]
 800baa4:	3314      	adds	r3, #20
 800baa6:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800baa8:	68fb      	ldr	r3, [r7, #12]
 800baaa:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800baae:	2b02      	cmp	r3, #2
 800bab0:	d15c      	bne.n	800bb6c <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 800bab2:	697b      	ldr	r3, [r7, #20]
 800bab4:	68da      	ldr	r2, [r3, #12]
 800bab6:	697b      	ldr	r3, [r7, #20]
 800bab8:	691b      	ldr	r3, [r3, #16]
 800baba:	429a      	cmp	r2, r3
 800babc:	d915      	bls.n	800baea <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 800babe:	697b      	ldr	r3, [r7, #20]
 800bac0:	68da      	ldr	r2, [r3, #12]
 800bac2:	697b      	ldr	r3, [r7, #20]
 800bac4:	691b      	ldr	r3, [r3, #16]
 800bac6:	1ad2      	subs	r2, r2, r3
 800bac8:	697b      	ldr	r3, [r7, #20]
 800baca:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 800bacc:	697b      	ldr	r3, [r7, #20]
 800bace:	68db      	ldr	r3, [r3, #12]
 800bad0:	b29b      	uxth	r3, r3
 800bad2:	461a      	mov	r2, r3
 800bad4:	6879      	ldr	r1, [r7, #4]
 800bad6:	68f8      	ldr	r0, [r7, #12]
 800bad8:	f000 fef9 	bl	800c8ce <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800badc:	2300      	movs	r3, #0
 800bade:	2200      	movs	r2, #0
 800bae0:	2100      	movs	r1, #0
 800bae2:	68f8      	ldr	r0, [r7, #12]
 800bae4:	f001 fbfd 	bl	800d2e2 <USBD_LL_PrepareReceive>
 800bae8:	e04e      	b.n	800bb88 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800baea:	697b      	ldr	r3, [r7, #20]
 800baec:	689b      	ldr	r3, [r3, #8]
 800baee:	697a      	ldr	r2, [r7, #20]
 800baf0:	6912      	ldr	r2, [r2, #16]
 800baf2:	fbb3 f1f2 	udiv	r1, r3, r2
 800baf6:	fb02 f201 	mul.w	r2, r2, r1
 800bafa:	1a9b      	subs	r3, r3, r2
 800bafc:	2b00      	cmp	r3, #0
 800bafe:	d11c      	bne.n	800bb3a <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 800bb00:	697b      	ldr	r3, [r7, #20]
 800bb02:	689a      	ldr	r2, [r3, #8]
 800bb04:	697b      	ldr	r3, [r7, #20]
 800bb06:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800bb08:	429a      	cmp	r2, r3
 800bb0a:	d316      	bcc.n	800bb3a <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 800bb0c:	697b      	ldr	r3, [r7, #20]
 800bb0e:	689a      	ldr	r2, [r3, #8]
 800bb10:	68fb      	ldr	r3, [r7, #12]
 800bb12:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800bb16:	429a      	cmp	r2, r3
 800bb18:	d20f      	bcs.n	800bb3a <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800bb1a:	2200      	movs	r2, #0
 800bb1c:	2100      	movs	r1, #0
 800bb1e:	68f8      	ldr	r0, [r7, #12]
 800bb20:	f000 fed5 	bl	800c8ce <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800bb24:	68fb      	ldr	r3, [r7, #12]
 800bb26:	2200      	movs	r2, #0
 800bb28:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800bb2c:	2300      	movs	r3, #0
 800bb2e:	2200      	movs	r2, #0
 800bb30:	2100      	movs	r1, #0
 800bb32:	68f8      	ldr	r0, [r7, #12]
 800bb34:	f001 fbd5 	bl	800d2e2 <USBD_LL_PrepareReceive>
 800bb38:	e026      	b.n	800bb88 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800bb3a:	68fb      	ldr	r3, [r7, #12]
 800bb3c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bb40:	68db      	ldr	r3, [r3, #12]
 800bb42:	2b00      	cmp	r3, #0
 800bb44:	d00a      	beq.n	800bb5c <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800bb46:	68fb      	ldr	r3, [r7, #12]
 800bb48:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800bb4c:	2b03      	cmp	r3, #3
 800bb4e:	d105      	bne.n	800bb5c <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800bb50:	68fb      	ldr	r3, [r7, #12]
 800bb52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bb56:	68db      	ldr	r3, [r3, #12]
 800bb58:	68f8      	ldr	r0, [r7, #12]
 800bb5a:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800bb5c:	2180      	movs	r1, #128	; 0x80
 800bb5e:	68f8      	ldr	r0, [r7, #12]
 800bb60:	f001 fb14 	bl	800d18c <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800bb64:	68f8      	ldr	r0, [r7, #12]
 800bb66:	f000 ff07 	bl	800c978 <USBD_CtlReceiveStatus>
 800bb6a:	e00d      	b.n	800bb88 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800bb6c:	68fb      	ldr	r3, [r7, #12]
 800bb6e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800bb72:	2b04      	cmp	r3, #4
 800bb74:	d004      	beq.n	800bb80 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800bb76:	68fb      	ldr	r3, [r7, #12]
 800bb78:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800bb7c:	2b00      	cmp	r3, #0
 800bb7e:	d103      	bne.n	800bb88 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800bb80:	2180      	movs	r1, #128	; 0x80
 800bb82:	68f8      	ldr	r0, [r7, #12]
 800bb84:	f001 fb02 	bl	800d18c <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800bb88:	68fb      	ldr	r3, [r7, #12]
 800bb8a:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800bb8e:	2b01      	cmp	r3, #1
 800bb90:	d11d      	bne.n	800bbce <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 800bb92:	68f8      	ldr	r0, [r7, #12]
 800bb94:	f7ff fe81 	bl	800b89a <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800bb98:	68fb      	ldr	r3, [r7, #12]
 800bb9a:	2200      	movs	r2, #0
 800bb9c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800bba0:	e015      	b.n	800bbce <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800bba2:	68fb      	ldr	r3, [r7, #12]
 800bba4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bba8:	695b      	ldr	r3, [r3, #20]
 800bbaa:	2b00      	cmp	r3, #0
 800bbac:	d00d      	beq.n	800bbca <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800bbae:	68fb      	ldr	r3, [r7, #12]
 800bbb0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800bbb4:	2b03      	cmp	r3, #3
 800bbb6:	d108      	bne.n	800bbca <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800bbb8:	68fb      	ldr	r3, [r7, #12]
 800bbba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bbbe:	695b      	ldr	r3, [r3, #20]
 800bbc0:	7afa      	ldrb	r2, [r7, #11]
 800bbc2:	4611      	mov	r1, r2
 800bbc4:	68f8      	ldr	r0, [r7, #12]
 800bbc6:	4798      	blx	r3
 800bbc8:	e001      	b.n	800bbce <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800bbca:	2302      	movs	r3, #2
 800bbcc:	e000      	b.n	800bbd0 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800bbce:	2300      	movs	r3, #0
}
 800bbd0:	4618      	mov	r0, r3
 800bbd2:	3718      	adds	r7, #24
 800bbd4:	46bd      	mov	sp, r7
 800bbd6:	bd80      	pop	{r7, pc}

0800bbd8 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800bbd8:	b580      	push	{r7, lr}
 800bbda:	b082      	sub	sp, #8
 800bbdc:	af00      	add	r7, sp, #0
 800bbde:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800bbe0:	2340      	movs	r3, #64	; 0x40
 800bbe2:	2200      	movs	r2, #0
 800bbe4:	2100      	movs	r1, #0
 800bbe6:	6878      	ldr	r0, [r7, #4]
 800bbe8:	f001 fa8b 	bl	800d102 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	2201      	movs	r2, #1
 800bbf0:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800bbf4:	687b      	ldr	r3, [r7, #4]
 800bbf6:	2240      	movs	r2, #64	; 0x40
 800bbf8:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800bbfc:	2340      	movs	r3, #64	; 0x40
 800bbfe:	2200      	movs	r2, #0
 800bc00:	2180      	movs	r1, #128	; 0x80
 800bc02:	6878      	ldr	r0, [r7, #4]
 800bc04:	f001 fa7d 	bl	800d102 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	2201      	movs	r2, #1
 800bc0c:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800bc0e:	687b      	ldr	r3, [r7, #4]
 800bc10:	2240      	movs	r2, #64	; 0x40
 800bc12:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800bc14:	687b      	ldr	r3, [r7, #4]
 800bc16:	2201      	movs	r2, #1
 800bc18:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800bc1c:	687b      	ldr	r3, [r7, #4]
 800bc1e:	2200      	movs	r2, #0
 800bc20:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	2200      	movs	r2, #0
 800bc28:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800bc2a:	687b      	ldr	r3, [r7, #4]
 800bc2c:	2200      	movs	r2, #0
 800bc2e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 800bc32:	687b      	ldr	r3, [r7, #4]
 800bc34:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bc38:	2b00      	cmp	r3, #0
 800bc3a:	d009      	beq.n	800bc50 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800bc3c:	687b      	ldr	r3, [r7, #4]
 800bc3e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bc42:	685b      	ldr	r3, [r3, #4]
 800bc44:	687a      	ldr	r2, [r7, #4]
 800bc46:	6852      	ldr	r2, [r2, #4]
 800bc48:	b2d2      	uxtb	r2, r2
 800bc4a:	4611      	mov	r1, r2
 800bc4c:	6878      	ldr	r0, [r7, #4]
 800bc4e:	4798      	blx	r3
  }

  return USBD_OK;
 800bc50:	2300      	movs	r3, #0
}
 800bc52:	4618      	mov	r0, r3
 800bc54:	3708      	adds	r7, #8
 800bc56:	46bd      	mov	sp, r7
 800bc58:	bd80      	pop	{r7, pc}

0800bc5a <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800bc5a:	b480      	push	{r7}
 800bc5c:	b083      	sub	sp, #12
 800bc5e:	af00      	add	r7, sp, #0
 800bc60:	6078      	str	r0, [r7, #4]
 800bc62:	460b      	mov	r3, r1
 800bc64:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800bc66:	687b      	ldr	r3, [r7, #4]
 800bc68:	78fa      	ldrb	r2, [r7, #3]
 800bc6a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800bc6c:	2300      	movs	r3, #0
}
 800bc6e:	4618      	mov	r0, r3
 800bc70:	370c      	adds	r7, #12
 800bc72:	46bd      	mov	sp, r7
 800bc74:	bc80      	pop	{r7}
 800bc76:	4770      	bx	lr

0800bc78 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800bc78:	b480      	push	{r7}
 800bc7a:	b083      	sub	sp, #12
 800bc7c:	af00      	add	r7, sp, #0
 800bc7e:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800bc86:	687b      	ldr	r3, [r7, #4]
 800bc88:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800bc8c:	687b      	ldr	r3, [r7, #4]
 800bc8e:	2204      	movs	r2, #4
 800bc90:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800bc94:	2300      	movs	r3, #0
}
 800bc96:	4618      	mov	r0, r3
 800bc98:	370c      	adds	r7, #12
 800bc9a:	46bd      	mov	sp, r7
 800bc9c:	bc80      	pop	{r7}
 800bc9e:	4770      	bx	lr

0800bca0 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800bca0:	b480      	push	{r7}
 800bca2:	b083      	sub	sp, #12
 800bca4:	af00      	add	r7, sp, #0
 800bca6:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800bca8:	687b      	ldr	r3, [r7, #4]
 800bcaa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bcae:	2b04      	cmp	r3, #4
 800bcb0:	d105      	bne.n	800bcbe <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800bcb2:	687b      	ldr	r3, [r7, #4]
 800bcb4:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800bcbe:	2300      	movs	r3, #0
}
 800bcc0:	4618      	mov	r0, r3
 800bcc2:	370c      	adds	r7, #12
 800bcc4:	46bd      	mov	sp, r7
 800bcc6:	bc80      	pop	{r7}
 800bcc8:	4770      	bx	lr

0800bcca <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800bcca:	b580      	push	{r7, lr}
 800bccc:	b082      	sub	sp, #8
 800bcce:	af00      	add	r7, sp, #0
 800bcd0:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bcd2:	687b      	ldr	r3, [r7, #4]
 800bcd4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bcd8:	2b03      	cmp	r3, #3
 800bcda:	d10b      	bne.n	800bcf4 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800bcdc:	687b      	ldr	r3, [r7, #4]
 800bcde:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bce2:	69db      	ldr	r3, [r3, #28]
 800bce4:	2b00      	cmp	r3, #0
 800bce6:	d005      	beq.n	800bcf4 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bcee:	69db      	ldr	r3, [r3, #28]
 800bcf0:	6878      	ldr	r0, [r7, #4]
 800bcf2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800bcf4:	2300      	movs	r3, #0
}
 800bcf6:	4618      	mov	r0, r3
 800bcf8:	3708      	adds	r7, #8
 800bcfa:	46bd      	mov	sp, r7
 800bcfc:	bd80      	pop	{r7, pc}

0800bcfe <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800bcfe:	b480      	push	{r7}
 800bd00:	b083      	sub	sp, #12
 800bd02:	af00      	add	r7, sp, #0
 800bd04:	6078      	str	r0, [r7, #4]
 800bd06:	460b      	mov	r3, r1
 800bd08:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800bd0a:	2300      	movs	r3, #0
}
 800bd0c:	4618      	mov	r0, r3
 800bd0e:	370c      	adds	r7, #12
 800bd10:	46bd      	mov	sp, r7
 800bd12:	bc80      	pop	{r7}
 800bd14:	4770      	bx	lr

0800bd16 <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800bd16:	b480      	push	{r7}
 800bd18:	b083      	sub	sp, #12
 800bd1a:	af00      	add	r7, sp, #0
 800bd1c:	6078      	str	r0, [r7, #4]
 800bd1e:	460b      	mov	r3, r1
 800bd20:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800bd22:	2300      	movs	r3, #0
}
 800bd24:	4618      	mov	r0, r3
 800bd26:	370c      	adds	r7, #12
 800bd28:	46bd      	mov	sp, r7
 800bd2a:	bc80      	pop	{r7}
 800bd2c:	4770      	bx	lr

0800bd2e <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800bd2e:	b480      	push	{r7}
 800bd30:	b083      	sub	sp, #12
 800bd32:	af00      	add	r7, sp, #0
 800bd34:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800bd36:	2300      	movs	r3, #0
}
 800bd38:	4618      	mov	r0, r3
 800bd3a:	370c      	adds	r7, #12
 800bd3c:	46bd      	mov	sp, r7
 800bd3e:	bc80      	pop	{r7}
 800bd40:	4770      	bx	lr

0800bd42 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800bd42:	b580      	push	{r7, lr}
 800bd44:	b082      	sub	sp, #8
 800bd46:	af00      	add	r7, sp, #0
 800bd48:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800bd4a:	687b      	ldr	r3, [r7, #4]
 800bd4c:	2201      	movs	r2, #1
 800bd4e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800bd52:	687b      	ldr	r3, [r7, #4]
 800bd54:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bd58:	685b      	ldr	r3, [r3, #4]
 800bd5a:	687a      	ldr	r2, [r7, #4]
 800bd5c:	6852      	ldr	r2, [r2, #4]
 800bd5e:	b2d2      	uxtb	r2, r2
 800bd60:	4611      	mov	r1, r2
 800bd62:	6878      	ldr	r0, [r7, #4]
 800bd64:	4798      	blx	r3

  return USBD_OK;
 800bd66:	2300      	movs	r3, #0
}
 800bd68:	4618      	mov	r0, r3
 800bd6a:	3708      	adds	r7, #8
 800bd6c:	46bd      	mov	sp, r7
 800bd6e:	bd80      	pop	{r7, pc}

0800bd70 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 800bd70:	b580      	push	{r7, lr}
 800bd72:	b084      	sub	sp, #16
 800bd74:	af00      	add	r7, sp, #0
 800bd76:	6078      	str	r0, [r7, #4]
 800bd78:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800bd7a:	2300      	movs	r3, #0
 800bd7c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bd7e:	683b      	ldr	r3, [r7, #0]
 800bd80:	781b      	ldrb	r3, [r3, #0]
 800bd82:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800bd86:	2b40      	cmp	r3, #64	; 0x40
 800bd88:	d005      	beq.n	800bd96 <USBD_StdDevReq+0x26>
 800bd8a:	2b40      	cmp	r3, #64	; 0x40
 800bd8c:	d84f      	bhi.n	800be2e <USBD_StdDevReq+0xbe>
 800bd8e:	2b00      	cmp	r3, #0
 800bd90:	d009      	beq.n	800bda6 <USBD_StdDevReq+0x36>
 800bd92:	2b20      	cmp	r3, #32
 800bd94:	d14b      	bne.n	800be2e <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800bd96:	687b      	ldr	r3, [r7, #4]
 800bd98:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bd9c:	689b      	ldr	r3, [r3, #8]
 800bd9e:	6839      	ldr	r1, [r7, #0]
 800bda0:	6878      	ldr	r0, [r7, #4]
 800bda2:	4798      	blx	r3
      break;
 800bda4:	e048      	b.n	800be38 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800bda6:	683b      	ldr	r3, [r7, #0]
 800bda8:	785b      	ldrb	r3, [r3, #1]
 800bdaa:	2b09      	cmp	r3, #9
 800bdac:	d839      	bhi.n	800be22 <USBD_StdDevReq+0xb2>
 800bdae:	a201      	add	r2, pc, #4	; (adr r2, 800bdb4 <USBD_StdDevReq+0x44>)
 800bdb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bdb4:	0800be05 	.word	0x0800be05
 800bdb8:	0800be19 	.word	0x0800be19
 800bdbc:	0800be23 	.word	0x0800be23
 800bdc0:	0800be0f 	.word	0x0800be0f
 800bdc4:	0800be23 	.word	0x0800be23
 800bdc8:	0800bde7 	.word	0x0800bde7
 800bdcc:	0800bddd 	.word	0x0800bddd
 800bdd0:	0800be23 	.word	0x0800be23
 800bdd4:	0800bdfb 	.word	0x0800bdfb
 800bdd8:	0800bdf1 	.word	0x0800bdf1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800bddc:	6839      	ldr	r1, [r7, #0]
 800bdde:	6878      	ldr	r0, [r7, #4]
 800bde0:	f000 f9dc 	bl	800c19c <USBD_GetDescriptor>
          break;
 800bde4:	e022      	b.n	800be2c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800bde6:	6839      	ldr	r1, [r7, #0]
 800bde8:	6878      	ldr	r0, [r7, #4]
 800bdea:	f000 fb3f 	bl	800c46c <USBD_SetAddress>
          break;
 800bdee:	e01d      	b.n	800be2c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 800bdf0:	6839      	ldr	r1, [r7, #0]
 800bdf2:	6878      	ldr	r0, [r7, #4]
 800bdf4:	f000 fb7e 	bl	800c4f4 <USBD_SetConfig>
          break;
 800bdf8:	e018      	b.n	800be2c <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800bdfa:	6839      	ldr	r1, [r7, #0]
 800bdfc:	6878      	ldr	r0, [r7, #4]
 800bdfe:	f000 fc07 	bl	800c610 <USBD_GetConfig>
          break;
 800be02:	e013      	b.n	800be2c <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800be04:	6839      	ldr	r1, [r7, #0]
 800be06:	6878      	ldr	r0, [r7, #4]
 800be08:	f000 fc37 	bl	800c67a <USBD_GetStatus>
          break;
 800be0c:	e00e      	b.n	800be2c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800be0e:	6839      	ldr	r1, [r7, #0]
 800be10:	6878      	ldr	r0, [r7, #4]
 800be12:	f000 fc65 	bl	800c6e0 <USBD_SetFeature>
          break;
 800be16:	e009      	b.n	800be2c <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800be18:	6839      	ldr	r1, [r7, #0]
 800be1a:	6878      	ldr	r0, [r7, #4]
 800be1c:	f000 fc74 	bl	800c708 <USBD_ClrFeature>
          break;
 800be20:	e004      	b.n	800be2c <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 800be22:	6839      	ldr	r1, [r7, #0]
 800be24:	6878      	ldr	r0, [r7, #4]
 800be26:	f000 fccc 	bl	800c7c2 <USBD_CtlError>
          break;
 800be2a:	bf00      	nop
      }
      break;
 800be2c:	e004      	b.n	800be38 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 800be2e:	6839      	ldr	r1, [r7, #0]
 800be30:	6878      	ldr	r0, [r7, #4]
 800be32:	f000 fcc6 	bl	800c7c2 <USBD_CtlError>
      break;
 800be36:	bf00      	nop
  }

  return ret;
 800be38:	7bfb      	ldrb	r3, [r7, #15]
}
 800be3a:	4618      	mov	r0, r3
 800be3c:	3710      	adds	r7, #16
 800be3e:	46bd      	mov	sp, r7
 800be40:	bd80      	pop	{r7, pc}
 800be42:	bf00      	nop

0800be44 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 800be44:	b580      	push	{r7, lr}
 800be46:	b084      	sub	sp, #16
 800be48:	af00      	add	r7, sp, #0
 800be4a:	6078      	str	r0, [r7, #4]
 800be4c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800be4e:	2300      	movs	r3, #0
 800be50:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800be52:	683b      	ldr	r3, [r7, #0]
 800be54:	781b      	ldrb	r3, [r3, #0]
 800be56:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800be5a:	2b40      	cmp	r3, #64	; 0x40
 800be5c:	d005      	beq.n	800be6a <USBD_StdItfReq+0x26>
 800be5e:	2b40      	cmp	r3, #64	; 0x40
 800be60:	d82e      	bhi.n	800bec0 <USBD_StdItfReq+0x7c>
 800be62:	2b00      	cmp	r3, #0
 800be64:	d001      	beq.n	800be6a <USBD_StdItfReq+0x26>
 800be66:	2b20      	cmp	r3, #32
 800be68:	d12a      	bne.n	800bec0 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800be6a:	687b      	ldr	r3, [r7, #4]
 800be6c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800be70:	3b01      	subs	r3, #1
 800be72:	2b02      	cmp	r3, #2
 800be74:	d81d      	bhi.n	800beb2 <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800be76:	683b      	ldr	r3, [r7, #0]
 800be78:	889b      	ldrh	r3, [r3, #4]
 800be7a:	b2db      	uxtb	r3, r3
 800be7c:	2b01      	cmp	r3, #1
 800be7e:	d813      	bhi.n	800bea8 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800be80:	687b      	ldr	r3, [r7, #4]
 800be82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800be86:	689b      	ldr	r3, [r3, #8]
 800be88:	6839      	ldr	r1, [r7, #0]
 800be8a:	6878      	ldr	r0, [r7, #4]
 800be8c:	4798      	blx	r3
 800be8e:	4603      	mov	r3, r0
 800be90:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800be92:	683b      	ldr	r3, [r7, #0]
 800be94:	88db      	ldrh	r3, [r3, #6]
 800be96:	2b00      	cmp	r3, #0
 800be98:	d110      	bne.n	800bebc <USBD_StdItfReq+0x78>
 800be9a:	7bfb      	ldrb	r3, [r7, #15]
 800be9c:	2b00      	cmp	r3, #0
 800be9e:	d10d      	bne.n	800bebc <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 800bea0:	6878      	ldr	r0, [r7, #4]
 800bea2:	f000 fd56 	bl	800c952 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800bea6:	e009      	b.n	800bebc <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 800bea8:	6839      	ldr	r1, [r7, #0]
 800beaa:	6878      	ldr	r0, [r7, #4]
 800beac:	f000 fc89 	bl	800c7c2 <USBD_CtlError>
          break;
 800beb0:	e004      	b.n	800bebc <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 800beb2:	6839      	ldr	r1, [r7, #0]
 800beb4:	6878      	ldr	r0, [r7, #4]
 800beb6:	f000 fc84 	bl	800c7c2 <USBD_CtlError>
          break;
 800beba:	e000      	b.n	800bebe <USBD_StdItfReq+0x7a>
          break;
 800bebc:	bf00      	nop
      }
      break;
 800bebe:	e004      	b.n	800beca <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 800bec0:	6839      	ldr	r1, [r7, #0]
 800bec2:	6878      	ldr	r0, [r7, #4]
 800bec4:	f000 fc7d 	bl	800c7c2 <USBD_CtlError>
      break;
 800bec8:	bf00      	nop
  }

  return USBD_OK;
 800beca:	2300      	movs	r3, #0
}
 800becc:	4618      	mov	r0, r3
 800bece:	3710      	adds	r7, #16
 800bed0:	46bd      	mov	sp, r7
 800bed2:	bd80      	pop	{r7, pc}

0800bed4 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 800bed4:	b580      	push	{r7, lr}
 800bed6:	b084      	sub	sp, #16
 800bed8:	af00      	add	r7, sp, #0
 800beda:	6078      	str	r0, [r7, #4]
 800bedc:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800bede:	2300      	movs	r3, #0
 800bee0:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 800bee2:	683b      	ldr	r3, [r7, #0]
 800bee4:	889b      	ldrh	r3, [r3, #4]
 800bee6:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bee8:	683b      	ldr	r3, [r7, #0]
 800beea:	781b      	ldrb	r3, [r3, #0]
 800beec:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800bef0:	2b40      	cmp	r3, #64	; 0x40
 800bef2:	d007      	beq.n	800bf04 <USBD_StdEPReq+0x30>
 800bef4:	2b40      	cmp	r3, #64	; 0x40
 800bef6:	f200 8146 	bhi.w	800c186 <USBD_StdEPReq+0x2b2>
 800befa:	2b00      	cmp	r3, #0
 800befc:	d00a      	beq.n	800bf14 <USBD_StdEPReq+0x40>
 800befe:	2b20      	cmp	r3, #32
 800bf00:	f040 8141 	bne.w	800c186 <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bf0a:	689b      	ldr	r3, [r3, #8]
 800bf0c:	6839      	ldr	r1, [r7, #0]
 800bf0e:	6878      	ldr	r0, [r7, #4]
 800bf10:	4798      	blx	r3
      break;
 800bf12:	e13d      	b.n	800c190 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 800bf14:	683b      	ldr	r3, [r7, #0]
 800bf16:	781b      	ldrb	r3, [r3, #0]
 800bf18:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800bf1c:	2b20      	cmp	r3, #32
 800bf1e:	d10a      	bne.n	800bf36 <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800bf20:	687b      	ldr	r3, [r7, #4]
 800bf22:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bf26:	689b      	ldr	r3, [r3, #8]
 800bf28:	6839      	ldr	r1, [r7, #0]
 800bf2a:	6878      	ldr	r0, [r7, #4]
 800bf2c:	4798      	blx	r3
 800bf2e:	4603      	mov	r3, r0
 800bf30:	73fb      	strb	r3, [r7, #15]

        return ret;
 800bf32:	7bfb      	ldrb	r3, [r7, #15]
 800bf34:	e12d      	b.n	800c192 <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 800bf36:	683b      	ldr	r3, [r7, #0]
 800bf38:	785b      	ldrb	r3, [r3, #1]
 800bf3a:	2b03      	cmp	r3, #3
 800bf3c:	d007      	beq.n	800bf4e <USBD_StdEPReq+0x7a>
 800bf3e:	2b03      	cmp	r3, #3
 800bf40:	f300 811b 	bgt.w	800c17a <USBD_StdEPReq+0x2a6>
 800bf44:	2b00      	cmp	r3, #0
 800bf46:	d072      	beq.n	800c02e <USBD_StdEPReq+0x15a>
 800bf48:	2b01      	cmp	r3, #1
 800bf4a:	d03a      	beq.n	800bfc2 <USBD_StdEPReq+0xee>
 800bf4c:	e115      	b.n	800c17a <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800bf4e:	687b      	ldr	r3, [r7, #4]
 800bf50:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bf54:	2b02      	cmp	r3, #2
 800bf56:	d002      	beq.n	800bf5e <USBD_StdEPReq+0x8a>
 800bf58:	2b03      	cmp	r3, #3
 800bf5a:	d015      	beq.n	800bf88 <USBD_StdEPReq+0xb4>
 800bf5c:	e02b      	b.n	800bfb6 <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800bf5e:	7bbb      	ldrb	r3, [r7, #14]
 800bf60:	2b00      	cmp	r3, #0
 800bf62:	d00c      	beq.n	800bf7e <USBD_StdEPReq+0xaa>
 800bf64:	7bbb      	ldrb	r3, [r7, #14]
 800bf66:	2b80      	cmp	r3, #128	; 0x80
 800bf68:	d009      	beq.n	800bf7e <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800bf6a:	7bbb      	ldrb	r3, [r7, #14]
 800bf6c:	4619      	mov	r1, r3
 800bf6e:	6878      	ldr	r0, [r7, #4]
 800bf70:	f001 f90c 	bl	800d18c <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800bf74:	2180      	movs	r1, #128	; 0x80
 800bf76:	6878      	ldr	r0, [r7, #4]
 800bf78:	f001 f908 	bl	800d18c <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800bf7c:	e020      	b.n	800bfc0 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 800bf7e:	6839      	ldr	r1, [r7, #0]
 800bf80:	6878      	ldr	r0, [r7, #4]
 800bf82:	f000 fc1e 	bl	800c7c2 <USBD_CtlError>
              break;
 800bf86:	e01b      	b.n	800bfc0 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800bf88:	683b      	ldr	r3, [r7, #0]
 800bf8a:	885b      	ldrh	r3, [r3, #2]
 800bf8c:	2b00      	cmp	r3, #0
 800bf8e:	d10e      	bne.n	800bfae <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 800bf90:	7bbb      	ldrb	r3, [r7, #14]
 800bf92:	2b00      	cmp	r3, #0
 800bf94:	d00b      	beq.n	800bfae <USBD_StdEPReq+0xda>
 800bf96:	7bbb      	ldrb	r3, [r7, #14]
 800bf98:	2b80      	cmp	r3, #128	; 0x80
 800bf9a:	d008      	beq.n	800bfae <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800bf9c:	683b      	ldr	r3, [r7, #0]
 800bf9e:	88db      	ldrh	r3, [r3, #6]
 800bfa0:	2b00      	cmp	r3, #0
 800bfa2:	d104      	bne.n	800bfae <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 800bfa4:	7bbb      	ldrb	r3, [r7, #14]
 800bfa6:	4619      	mov	r1, r3
 800bfa8:	6878      	ldr	r0, [r7, #4]
 800bfaa:	f001 f8ef 	bl	800d18c <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800bfae:	6878      	ldr	r0, [r7, #4]
 800bfb0:	f000 fccf 	bl	800c952 <USBD_CtlSendStatus>

              break;
 800bfb4:	e004      	b.n	800bfc0 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 800bfb6:	6839      	ldr	r1, [r7, #0]
 800bfb8:	6878      	ldr	r0, [r7, #4]
 800bfba:	f000 fc02 	bl	800c7c2 <USBD_CtlError>
              break;
 800bfbe:	bf00      	nop
          }
          break;
 800bfc0:	e0e0      	b.n	800c184 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800bfc2:	687b      	ldr	r3, [r7, #4]
 800bfc4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bfc8:	2b02      	cmp	r3, #2
 800bfca:	d002      	beq.n	800bfd2 <USBD_StdEPReq+0xfe>
 800bfcc:	2b03      	cmp	r3, #3
 800bfce:	d015      	beq.n	800bffc <USBD_StdEPReq+0x128>
 800bfd0:	e026      	b.n	800c020 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800bfd2:	7bbb      	ldrb	r3, [r7, #14]
 800bfd4:	2b00      	cmp	r3, #0
 800bfd6:	d00c      	beq.n	800bff2 <USBD_StdEPReq+0x11e>
 800bfd8:	7bbb      	ldrb	r3, [r7, #14]
 800bfda:	2b80      	cmp	r3, #128	; 0x80
 800bfdc:	d009      	beq.n	800bff2 <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800bfde:	7bbb      	ldrb	r3, [r7, #14]
 800bfe0:	4619      	mov	r1, r3
 800bfe2:	6878      	ldr	r0, [r7, #4]
 800bfe4:	f001 f8d2 	bl	800d18c <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800bfe8:	2180      	movs	r1, #128	; 0x80
 800bfea:	6878      	ldr	r0, [r7, #4]
 800bfec:	f001 f8ce 	bl	800d18c <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800bff0:	e01c      	b.n	800c02c <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 800bff2:	6839      	ldr	r1, [r7, #0]
 800bff4:	6878      	ldr	r0, [r7, #4]
 800bff6:	f000 fbe4 	bl	800c7c2 <USBD_CtlError>
              break;
 800bffa:	e017      	b.n	800c02c <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800bffc:	683b      	ldr	r3, [r7, #0]
 800bffe:	885b      	ldrh	r3, [r3, #2]
 800c000:	2b00      	cmp	r3, #0
 800c002:	d112      	bne.n	800c02a <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800c004:	7bbb      	ldrb	r3, [r7, #14]
 800c006:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c00a:	2b00      	cmp	r3, #0
 800c00c:	d004      	beq.n	800c018 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800c00e:	7bbb      	ldrb	r3, [r7, #14]
 800c010:	4619      	mov	r1, r3
 800c012:	6878      	ldr	r0, [r7, #4]
 800c014:	f001 f8d9 	bl	800d1ca <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 800c018:	6878      	ldr	r0, [r7, #4]
 800c01a:	f000 fc9a 	bl	800c952 <USBD_CtlSendStatus>
              }
              break;
 800c01e:	e004      	b.n	800c02a <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 800c020:	6839      	ldr	r1, [r7, #0]
 800c022:	6878      	ldr	r0, [r7, #4]
 800c024:	f000 fbcd 	bl	800c7c2 <USBD_CtlError>
              break;
 800c028:	e000      	b.n	800c02c <USBD_StdEPReq+0x158>
              break;
 800c02a:	bf00      	nop
          }
          break;
 800c02c:	e0aa      	b.n	800c184 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800c02e:	687b      	ldr	r3, [r7, #4]
 800c030:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c034:	2b02      	cmp	r3, #2
 800c036:	d002      	beq.n	800c03e <USBD_StdEPReq+0x16a>
 800c038:	2b03      	cmp	r3, #3
 800c03a:	d032      	beq.n	800c0a2 <USBD_StdEPReq+0x1ce>
 800c03c:	e097      	b.n	800c16e <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c03e:	7bbb      	ldrb	r3, [r7, #14]
 800c040:	2b00      	cmp	r3, #0
 800c042:	d007      	beq.n	800c054 <USBD_StdEPReq+0x180>
 800c044:	7bbb      	ldrb	r3, [r7, #14]
 800c046:	2b80      	cmp	r3, #128	; 0x80
 800c048:	d004      	beq.n	800c054 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 800c04a:	6839      	ldr	r1, [r7, #0]
 800c04c:	6878      	ldr	r0, [r7, #4]
 800c04e:	f000 fbb8 	bl	800c7c2 <USBD_CtlError>
                break;
 800c052:	e091      	b.n	800c178 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c054:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c058:	2b00      	cmp	r3, #0
 800c05a:	da0b      	bge.n	800c074 <USBD_StdEPReq+0x1a0>
 800c05c:	7bbb      	ldrb	r3, [r7, #14]
 800c05e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c062:	4613      	mov	r3, r2
 800c064:	009b      	lsls	r3, r3, #2
 800c066:	4413      	add	r3, r2
 800c068:	009b      	lsls	r3, r3, #2
 800c06a:	3310      	adds	r3, #16
 800c06c:	687a      	ldr	r2, [r7, #4]
 800c06e:	4413      	add	r3, r2
 800c070:	3304      	adds	r3, #4
 800c072:	e00b      	b.n	800c08c <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800c074:	7bbb      	ldrb	r3, [r7, #14]
 800c076:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c07a:	4613      	mov	r3, r2
 800c07c:	009b      	lsls	r3, r3, #2
 800c07e:	4413      	add	r3, r2
 800c080:	009b      	lsls	r3, r3, #2
 800c082:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800c086:	687a      	ldr	r2, [r7, #4]
 800c088:	4413      	add	r3, r2
 800c08a:	3304      	adds	r3, #4
 800c08c:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800c08e:	68bb      	ldr	r3, [r7, #8]
 800c090:	2200      	movs	r2, #0
 800c092:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800c094:	68bb      	ldr	r3, [r7, #8]
 800c096:	2202      	movs	r2, #2
 800c098:	4619      	mov	r1, r3
 800c09a:	6878      	ldr	r0, [r7, #4]
 800c09c:	f000 fbfb 	bl	800c896 <USBD_CtlSendData>
              break;
 800c0a0:	e06a      	b.n	800c178 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800c0a2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c0a6:	2b00      	cmp	r3, #0
 800c0a8:	da11      	bge.n	800c0ce <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800c0aa:	7bbb      	ldrb	r3, [r7, #14]
 800c0ac:	f003 020f 	and.w	r2, r3, #15
 800c0b0:	6879      	ldr	r1, [r7, #4]
 800c0b2:	4613      	mov	r3, r2
 800c0b4:	009b      	lsls	r3, r3, #2
 800c0b6:	4413      	add	r3, r2
 800c0b8:	009b      	lsls	r3, r3, #2
 800c0ba:	440b      	add	r3, r1
 800c0bc:	3318      	adds	r3, #24
 800c0be:	681b      	ldr	r3, [r3, #0]
 800c0c0:	2b00      	cmp	r3, #0
 800c0c2:	d117      	bne.n	800c0f4 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800c0c4:	6839      	ldr	r1, [r7, #0]
 800c0c6:	6878      	ldr	r0, [r7, #4]
 800c0c8:	f000 fb7b 	bl	800c7c2 <USBD_CtlError>
                  break;
 800c0cc:	e054      	b.n	800c178 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800c0ce:	7bbb      	ldrb	r3, [r7, #14]
 800c0d0:	f003 020f 	and.w	r2, r3, #15
 800c0d4:	6879      	ldr	r1, [r7, #4]
 800c0d6:	4613      	mov	r3, r2
 800c0d8:	009b      	lsls	r3, r3, #2
 800c0da:	4413      	add	r3, r2
 800c0dc:	009b      	lsls	r3, r3, #2
 800c0de:	440b      	add	r3, r1
 800c0e0:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 800c0e4:	681b      	ldr	r3, [r3, #0]
 800c0e6:	2b00      	cmp	r3, #0
 800c0e8:	d104      	bne.n	800c0f4 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800c0ea:	6839      	ldr	r1, [r7, #0]
 800c0ec:	6878      	ldr	r0, [r7, #4]
 800c0ee:	f000 fb68 	bl	800c7c2 <USBD_CtlError>
                  break;
 800c0f2:	e041      	b.n	800c178 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c0f4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c0f8:	2b00      	cmp	r3, #0
 800c0fa:	da0b      	bge.n	800c114 <USBD_StdEPReq+0x240>
 800c0fc:	7bbb      	ldrb	r3, [r7, #14]
 800c0fe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c102:	4613      	mov	r3, r2
 800c104:	009b      	lsls	r3, r3, #2
 800c106:	4413      	add	r3, r2
 800c108:	009b      	lsls	r3, r3, #2
 800c10a:	3310      	adds	r3, #16
 800c10c:	687a      	ldr	r2, [r7, #4]
 800c10e:	4413      	add	r3, r2
 800c110:	3304      	adds	r3, #4
 800c112:	e00b      	b.n	800c12c <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800c114:	7bbb      	ldrb	r3, [r7, #14]
 800c116:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c11a:	4613      	mov	r3, r2
 800c11c:	009b      	lsls	r3, r3, #2
 800c11e:	4413      	add	r3, r2
 800c120:	009b      	lsls	r3, r3, #2
 800c122:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800c126:	687a      	ldr	r2, [r7, #4]
 800c128:	4413      	add	r3, r2
 800c12a:	3304      	adds	r3, #4
 800c12c:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800c12e:	7bbb      	ldrb	r3, [r7, #14]
 800c130:	2b00      	cmp	r3, #0
 800c132:	d002      	beq.n	800c13a <USBD_StdEPReq+0x266>
 800c134:	7bbb      	ldrb	r3, [r7, #14]
 800c136:	2b80      	cmp	r3, #128	; 0x80
 800c138:	d103      	bne.n	800c142 <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 800c13a:	68bb      	ldr	r3, [r7, #8]
 800c13c:	2200      	movs	r2, #0
 800c13e:	601a      	str	r2, [r3, #0]
 800c140:	e00e      	b.n	800c160 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800c142:	7bbb      	ldrb	r3, [r7, #14]
 800c144:	4619      	mov	r1, r3
 800c146:	6878      	ldr	r0, [r7, #4]
 800c148:	f001 f85e 	bl	800d208 <USBD_LL_IsStallEP>
 800c14c:	4603      	mov	r3, r0
 800c14e:	2b00      	cmp	r3, #0
 800c150:	d003      	beq.n	800c15a <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 800c152:	68bb      	ldr	r3, [r7, #8]
 800c154:	2201      	movs	r2, #1
 800c156:	601a      	str	r2, [r3, #0]
 800c158:	e002      	b.n	800c160 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 800c15a:	68bb      	ldr	r3, [r7, #8]
 800c15c:	2200      	movs	r2, #0
 800c15e:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800c160:	68bb      	ldr	r3, [r7, #8]
 800c162:	2202      	movs	r2, #2
 800c164:	4619      	mov	r1, r3
 800c166:	6878      	ldr	r0, [r7, #4]
 800c168:	f000 fb95 	bl	800c896 <USBD_CtlSendData>
              break;
 800c16c:	e004      	b.n	800c178 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 800c16e:	6839      	ldr	r1, [r7, #0]
 800c170:	6878      	ldr	r0, [r7, #4]
 800c172:	f000 fb26 	bl	800c7c2 <USBD_CtlError>
              break;
 800c176:	bf00      	nop
          }
          break;
 800c178:	e004      	b.n	800c184 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 800c17a:	6839      	ldr	r1, [r7, #0]
 800c17c:	6878      	ldr	r0, [r7, #4]
 800c17e:	f000 fb20 	bl	800c7c2 <USBD_CtlError>
          break;
 800c182:	bf00      	nop
      }
      break;
 800c184:	e004      	b.n	800c190 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 800c186:	6839      	ldr	r1, [r7, #0]
 800c188:	6878      	ldr	r0, [r7, #4]
 800c18a:	f000 fb1a 	bl	800c7c2 <USBD_CtlError>
      break;
 800c18e:	bf00      	nop
  }

  return ret;
 800c190:	7bfb      	ldrb	r3, [r7, #15]
}
 800c192:	4618      	mov	r0, r3
 800c194:	3710      	adds	r7, #16
 800c196:	46bd      	mov	sp, r7
 800c198:	bd80      	pop	{r7, pc}
	...

0800c19c <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800c19c:	b580      	push	{r7, lr}
 800c19e:	b084      	sub	sp, #16
 800c1a0:	af00      	add	r7, sp, #0
 800c1a2:	6078      	str	r0, [r7, #4]
 800c1a4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800c1a6:	2300      	movs	r3, #0
 800c1a8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800c1aa:	2300      	movs	r3, #0
 800c1ac:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800c1ae:	2300      	movs	r3, #0
 800c1b0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800c1b2:	683b      	ldr	r3, [r7, #0]
 800c1b4:	885b      	ldrh	r3, [r3, #2]
 800c1b6:	0a1b      	lsrs	r3, r3, #8
 800c1b8:	b29b      	uxth	r3, r3
 800c1ba:	3b01      	subs	r3, #1
 800c1bc:	2b06      	cmp	r3, #6
 800c1be:	f200 8128 	bhi.w	800c412 <USBD_GetDescriptor+0x276>
 800c1c2:	a201      	add	r2, pc, #4	; (adr r2, 800c1c8 <USBD_GetDescriptor+0x2c>)
 800c1c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c1c8:	0800c1e5 	.word	0x0800c1e5
 800c1cc:	0800c1fd 	.word	0x0800c1fd
 800c1d0:	0800c23d 	.word	0x0800c23d
 800c1d4:	0800c413 	.word	0x0800c413
 800c1d8:	0800c413 	.word	0x0800c413
 800c1dc:	0800c3b3 	.word	0x0800c3b3
 800c1e0:	0800c3df 	.word	0x0800c3df
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800c1e4:	687b      	ldr	r3, [r7, #4]
 800c1e6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800c1ea:	681b      	ldr	r3, [r3, #0]
 800c1ec:	687a      	ldr	r2, [r7, #4]
 800c1ee:	7c12      	ldrb	r2, [r2, #16]
 800c1f0:	f107 0108 	add.w	r1, r7, #8
 800c1f4:	4610      	mov	r0, r2
 800c1f6:	4798      	blx	r3
 800c1f8:	60f8      	str	r0, [r7, #12]
      break;
 800c1fa:	e112      	b.n	800c422 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c1fc:	687b      	ldr	r3, [r7, #4]
 800c1fe:	7c1b      	ldrb	r3, [r3, #16]
 800c200:	2b00      	cmp	r3, #0
 800c202:	d10d      	bne.n	800c220 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800c204:	687b      	ldr	r3, [r7, #4]
 800c206:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c20a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c20c:	f107 0208 	add.w	r2, r7, #8
 800c210:	4610      	mov	r0, r2
 800c212:	4798      	blx	r3
 800c214:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c216:	68fb      	ldr	r3, [r7, #12]
 800c218:	3301      	adds	r3, #1
 800c21a:	2202      	movs	r2, #2
 800c21c:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800c21e:	e100      	b.n	800c422 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800c220:	687b      	ldr	r3, [r7, #4]
 800c222:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c226:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c228:	f107 0208 	add.w	r2, r7, #8
 800c22c:	4610      	mov	r0, r2
 800c22e:	4798      	blx	r3
 800c230:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c232:	68fb      	ldr	r3, [r7, #12]
 800c234:	3301      	adds	r3, #1
 800c236:	2202      	movs	r2, #2
 800c238:	701a      	strb	r2, [r3, #0]
      break;
 800c23a:	e0f2      	b.n	800c422 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800c23c:	683b      	ldr	r3, [r7, #0]
 800c23e:	885b      	ldrh	r3, [r3, #2]
 800c240:	b2db      	uxtb	r3, r3
 800c242:	2b05      	cmp	r3, #5
 800c244:	f200 80ac 	bhi.w	800c3a0 <USBD_GetDescriptor+0x204>
 800c248:	a201      	add	r2, pc, #4	; (adr r2, 800c250 <USBD_GetDescriptor+0xb4>)
 800c24a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c24e:	bf00      	nop
 800c250:	0800c269 	.word	0x0800c269
 800c254:	0800c29d 	.word	0x0800c29d
 800c258:	0800c2d1 	.word	0x0800c2d1
 800c25c:	0800c305 	.word	0x0800c305
 800c260:	0800c339 	.word	0x0800c339
 800c264:	0800c36d 	.word	0x0800c36d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800c268:	687b      	ldr	r3, [r7, #4]
 800c26a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800c26e:	685b      	ldr	r3, [r3, #4]
 800c270:	2b00      	cmp	r3, #0
 800c272:	d00b      	beq.n	800c28c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800c274:	687b      	ldr	r3, [r7, #4]
 800c276:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800c27a:	685b      	ldr	r3, [r3, #4]
 800c27c:	687a      	ldr	r2, [r7, #4]
 800c27e:	7c12      	ldrb	r2, [r2, #16]
 800c280:	f107 0108 	add.w	r1, r7, #8
 800c284:	4610      	mov	r0, r2
 800c286:	4798      	blx	r3
 800c288:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c28a:	e091      	b.n	800c3b0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c28c:	6839      	ldr	r1, [r7, #0]
 800c28e:	6878      	ldr	r0, [r7, #4]
 800c290:	f000 fa97 	bl	800c7c2 <USBD_CtlError>
            err++;
 800c294:	7afb      	ldrb	r3, [r7, #11]
 800c296:	3301      	adds	r3, #1
 800c298:	72fb      	strb	r3, [r7, #11]
          break;
 800c29a:	e089      	b.n	800c3b0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800c29c:	687b      	ldr	r3, [r7, #4]
 800c29e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800c2a2:	689b      	ldr	r3, [r3, #8]
 800c2a4:	2b00      	cmp	r3, #0
 800c2a6:	d00b      	beq.n	800c2c0 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800c2a8:	687b      	ldr	r3, [r7, #4]
 800c2aa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800c2ae:	689b      	ldr	r3, [r3, #8]
 800c2b0:	687a      	ldr	r2, [r7, #4]
 800c2b2:	7c12      	ldrb	r2, [r2, #16]
 800c2b4:	f107 0108 	add.w	r1, r7, #8
 800c2b8:	4610      	mov	r0, r2
 800c2ba:	4798      	blx	r3
 800c2bc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c2be:	e077      	b.n	800c3b0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c2c0:	6839      	ldr	r1, [r7, #0]
 800c2c2:	6878      	ldr	r0, [r7, #4]
 800c2c4:	f000 fa7d 	bl	800c7c2 <USBD_CtlError>
            err++;
 800c2c8:	7afb      	ldrb	r3, [r7, #11]
 800c2ca:	3301      	adds	r3, #1
 800c2cc:	72fb      	strb	r3, [r7, #11]
          break;
 800c2ce:	e06f      	b.n	800c3b0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800c2d0:	687b      	ldr	r3, [r7, #4]
 800c2d2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800c2d6:	68db      	ldr	r3, [r3, #12]
 800c2d8:	2b00      	cmp	r3, #0
 800c2da:	d00b      	beq.n	800c2f4 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800c2dc:	687b      	ldr	r3, [r7, #4]
 800c2de:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800c2e2:	68db      	ldr	r3, [r3, #12]
 800c2e4:	687a      	ldr	r2, [r7, #4]
 800c2e6:	7c12      	ldrb	r2, [r2, #16]
 800c2e8:	f107 0108 	add.w	r1, r7, #8
 800c2ec:	4610      	mov	r0, r2
 800c2ee:	4798      	blx	r3
 800c2f0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c2f2:	e05d      	b.n	800c3b0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c2f4:	6839      	ldr	r1, [r7, #0]
 800c2f6:	6878      	ldr	r0, [r7, #4]
 800c2f8:	f000 fa63 	bl	800c7c2 <USBD_CtlError>
            err++;
 800c2fc:	7afb      	ldrb	r3, [r7, #11]
 800c2fe:	3301      	adds	r3, #1
 800c300:	72fb      	strb	r3, [r7, #11]
          break;
 800c302:	e055      	b.n	800c3b0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800c304:	687b      	ldr	r3, [r7, #4]
 800c306:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800c30a:	691b      	ldr	r3, [r3, #16]
 800c30c:	2b00      	cmp	r3, #0
 800c30e:	d00b      	beq.n	800c328 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800c310:	687b      	ldr	r3, [r7, #4]
 800c312:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800c316:	691b      	ldr	r3, [r3, #16]
 800c318:	687a      	ldr	r2, [r7, #4]
 800c31a:	7c12      	ldrb	r2, [r2, #16]
 800c31c:	f107 0108 	add.w	r1, r7, #8
 800c320:	4610      	mov	r0, r2
 800c322:	4798      	blx	r3
 800c324:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c326:	e043      	b.n	800c3b0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c328:	6839      	ldr	r1, [r7, #0]
 800c32a:	6878      	ldr	r0, [r7, #4]
 800c32c:	f000 fa49 	bl	800c7c2 <USBD_CtlError>
            err++;
 800c330:	7afb      	ldrb	r3, [r7, #11]
 800c332:	3301      	adds	r3, #1
 800c334:	72fb      	strb	r3, [r7, #11]
          break;
 800c336:	e03b      	b.n	800c3b0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800c338:	687b      	ldr	r3, [r7, #4]
 800c33a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800c33e:	695b      	ldr	r3, [r3, #20]
 800c340:	2b00      	cmp	r3, #0
 800c342:	d00b      	beq.n	800c35c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800c344:	687b      	ldr	r3, [r7, #4]
 800c346:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800c34a:	695b      	ldr	r3, [r3, #20]
 800c34c:	687a      	ldr	r2, [r7, #4]
 800c34e:	7c12      	ldrb	r2, [r2, #16]
 800c350:	f107 0108 	add.w	r1, r7, #8
 800c354:	4610      	mov	r0, r2
 800c356:	4798      	blx	r3
 800c358:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c35a:	e029      	b.n	800c3b0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c35c:	6839      	ldr	r1, [r7, #0]
 800c35e:	6878      	ldr	r0, [r7, #4]
 800c360:	f000 fa2f 	bl	800c7c2 <USBD_CtlError>
            err++;
 800c364:	7afb      	ldrb	r3, [r7, #11]
 800c366:	3301      	adds	r3, #1
 800c368:	72fb      	strb	r3, [r7, #11]
          break;
 800c36a:	e021      	b.n	800c3b0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800c36c:	687b      	ldr	r3, [r7, #4]
 800c36e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800c372:	699b      	ldr	r3, [r3, #24]
 800c374:	2b00      	cmp	r3, #0
 800c376:	d00b      	beq.n	800c390 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800c378:	687b      	ldr	r3, [r7, #4]
 800c37a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800c37e:	699b      	ldr	r3, [r3, #24]
 800c380:	687a      	ldr	r2, [r7, #4]
 800c382:	7c12      	ldrb	r2, [r2, #16]
 800c384:	f107 0108 	add.w	r1, r7, #8
 800c388:	4610      	mov	r0, r2
 800c38a:	4798      	blx	r3
 800c38c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c38e:	e00f      	b.n	800c3b0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c390:	6839      	ldr	r1, [r7, #0]
 800c392:	6878      	ldr	r0, [r7, #4]
 800c394:	f000 fa15 	bl	800c7c2 <USBD_CtlError>
            err++;
 800c398:	7afb      	ldrb	r3, [r7, #11]
 800c39a:	3301      	adds	r3, #1
 800c39c:	72fb      	strb	r3, [r7, #11]
          break;
 800c39e:	e007      	b.n	800c3b0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 800c3a0:	6839      	ldr	r1, [r7, #0]
 800c3a2:	6878      	ldr	r0, [r7, #4]
 800c3a4:	f000 fa0d 	bl	800c7c2 <USBD_CtlError>
          err++;
 800c3a8:	7afb      	ldrb	r3, [r7, #11]
 800c3aa:	3301      	adds	r3, #1
 800c3ac:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 800c3ae:	e038      	b.n	800c422 <USBD_GetDescriptor+0x286>
 800c3b0:	e037      	b.n	800c422 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c3b2:	687b      	ldr	r3, [r7, #4]
 800c3b4:	7c1b      	ldrb	r3, [r3, #16]
 800c3b6:	2b00      	cmp	r3, #0
 800c3b8:	d109      	bne.n	800c3ce <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800c3ba:	687b      	ldr	r3, [r7, #4]
 800c3bc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c3c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c3c2:	f107 0208 	add.w	r2, r7, #8
 800c3c6:	4610      	mov	r0, r2
 800c3c8:	4798      	blx	r3
 800c3ca:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c3cc:	e029      	b.n	800c422 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800c3ce:	6839      	ldr	r1, [r7, #0]
 800c3d0:	6878      	ldr	r0, [r7, #4]
 800c3d2:	f000 f9f6 	bl	800c7c2 <USBD_CtlError>
        err++;
 800c3d6:	7afb      	ldrb	r3, [r7, #11]
 800c3d8:	3301      	adds	r3, #1
 800c3da:	72fb      	strb	r3, [r7, #11]
      break;
 800c3dc:	e021      	b.n	800c422 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c3de:	687b      	ldr	r3, [r7, #4]
 800c3e0:	7c1b      	ldrb	r3, [r3, #16]
 800c3e2:	2b00      	cmp	r3, #0
 800c3e4:	d10d      	bne.n	800c402 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800c3e6:	687b      	ldr	r3, [r7, #4]
 800c3e8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c3ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c3ee:	f107 0208 	add.w	r2, r7, #8
 800c3f2:	4610      	mov	r0, r2
 800c3f4:	4798      	blx	r3
 800c3f6:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800c3f8:	68fb      	ldr	r3, [r7, #12]
 800c3fa:	3301      	adds	r3, #1
 800c3fc:	2207      	movs	r2, #7
 800c3fe:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c400:	e00f      	b.n	800c422 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800c402:	6839      	ldr	r1, [r7, #0]
 800c404:	6878      	ldr	r0, [r7, #4]
 800c406:	f000 f9dc 	bl	800c7c2 <USBD_CtlError>
        err++;
 800c40a:	7afb      	ldrb	r3, [r7, #11]
 800c40c:	3301      	adds	r3, #1
 800c40e:	72fb      	strb	r3, [r7, #11]
      break;
 800c410:	e007      	b.n	800c422 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800c412:	6839      	ldr	r1, [r7, #0]
 800c414:	6878      	ldr	r0, [r7, #4]
 800c416:	f000 f9d4 	bl	800c7c2 <USBD_CtlError>
      err++;
 800c41a:	7afb      	ldrb	r3, [r7, #11]
 800c41c:	3301      	adds	r3, #1
 800c41e:	72fb      	strb	r3, [r7, #11]
      break;
 800c420:	bf00      	nop
  }

  if (err != 0U)
 800c422:	7afb      	ldrb	r3, [r7, #11]
 800c424:	2b00      	cmp	r3, #0
 800c426:	d11c      	bne.n	800c462 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 800c428:	893b      	ldrh	r3, [r7, #8]
 800c42a:	2b00      	cmp	r3, #0
 800c42c:	d011      	beq.n	800c452 <USBD_GetDescriptor+0x2b6>
 800c42e:	683b      	ldr	r3, [r7, #0]
 800c430:	88db      	ldrh	r3, [r3, #6]
 800c432:	2b00      	cmp	r3, #0
 800c434:	d00d      	beq.n	800c452 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 800c436:	683b      	ldr	r3, [r7, #0]
 800c438:	88da      	ldrh	r2, [r3, #6]
 800c43a:	893b      	ldrh	r3, [r7, #8]
 800c43c:	4293      	cmp	r3, r2
 800c43e:	bf28      	it	cs
 800c440:	4613      	movcs	r3, r2
 800c442:	b29b      	uxth	r3, r3
 800c444:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800c446:	893b      	ldrh	r3, [r7, #8]
 800c448:	461a      	mov	r2, r3
 800c44a:	68f9      	ldr	r1, [r7, #12]
 800c44c:	6878      	ldr	r0, [r7, #4]
 800c44e:	f000 fa22 	bl	800c896 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800c452:	683b      	ldr	r3, [r7, #0]
 800c454:	88db      	ldrh	r3, [r3, #6]
 800c456:	2b00      	cmp	r3, #0
 800c458:	d104      	bne.n	800c464 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 800c45a:	6878      	ldr	r0, [r7, #4]
 800c45c:	f000 fa79 	bl	800c952 <USBD_CtlSendStatus>
 800c460:	e000      	b.n	800c464 <USBD_GetDescriptor+0x2c8>
    return;
 800c462:	bf00      	nop
    }
  }
}
 800c464:	3710      	adds	r7, #16
 800c466:	46bd      	mov	sp, r7
 800c468:	bd80      	pop	{r7, pc}
 800c46a:	bf00      	nop

0800c46c <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800c46c:	b580      	push	{r7, lr}
 800c46e:	b084      	sub	sp, #16
 800c470:	af00      	add	r7, sp, #0
 800c472:	6078      	str	r0, [r7, #4]
 800c474:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800c476:	683b      	ldr	r3, [r7, #0]
 800c478:	889b      	ldrh	r3, [r3, #4]
 800c47a:	2b00      	cmp	r3, #0
 800c47c:	d130      	bne.n	800c4e0 <USBD_SetAddress+0x74>
 800c47e:	683b      	ldr	r3, [r7, #0]
 800c480:	88db      	ldrh	r3, [r3, #6]
 800c482:	2b00      	cmp	r3, #0
 800c484:	d12c      	bne.n	800c4e0 <USBD_SetAddress+0x74>
 800c486:	683b      	ldr	r3, [r7, #0]
 800c488:	885b      	ldrh	r3, [r3, #2]
 800c48a:	2b7f      	cmp	r3, #127	; 0x7f
 800c48c:	d828      	bhi.n	800c4e0 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800c48e:	683b      	ldr	r3, [r7, #0]
 800c490:	885b      	ldrh	r3, [r3, #2]
 800c492:	b2db      	uxtb	r3, r3
 800c494:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c498:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c49a:	687b      	ldr	r3, [r7, #4]
 800c49c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c4a0:	2b03      	cmp	r3, #3
 800c4a2:	d104      	bne.n	800c4ae <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800c4a4:	6839      	ldr	r1, [r7, #0]
 800c4a6:	6878      	ldr	r0, [r7, #4]
 800c4a8:	f000 f98b 	bl	800c7c2 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c4ac:	e01d      	b.n	800c4ea <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800c4ae:	687b      	ldr	r3, [r7, #4]
 800c4b0:	7bfa      	ldrb	r2, [r7, #15]
 800c4b2:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800c4b6:	7bfb      	ldrb	r3, [r7, #15]
 800c4b8:	4619      	mov	r1, r3
 800c4ba:	6878      	ldr	r0, [r7, #4]
 800c4bc:	f000 fecf 	bl	800d25e <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800c4c0:	6878      	ldr	r0, [r7, #4]
 800c4c2:	f000 fa46 	bl	800c952 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800c4c6:	7bfb      	ldrb	r3, [r7, #15]
 800c4c8:	2b00      	cmp	r3, #0
 800c4ca:	d004      	beq.n	800c4d6 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c4cc:	687b      	ldr	r3, [r7, #4]
 800c4ce:	2202      	movs	r2, #2
 800c4d0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c4d4:	e009      	b.n	800c4ea <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800c4d6:	687b      	ldr	r3, [r7, #4]
 800c4d8:	2201      	movs	r2, #1
 800c4da:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c4de:	e004      	b.n	800c4ea <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800c4e0:	6839      	ldr	r1, [r7, #0]
 800c4e2:	6878      	ldr	r0, [r7, #4]
 800c4e4:	f000 f96d 	bl	800c7c2 <USBD_CtlError>
  }
}
 800c4e8:	bf00      	nop
 800c4ea:	bf00      	nop
 800c4ec:	3710      	adds	r7, #16
 800c4ee:	46bd      	mov	sp, r7
 800c4f0:	bd80      	pop	{r7, pc}
	...

0800c4f4 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c4f4:	b580      	push	{r7, lr}
 800c4f6:	b082      	sub	sp, #8
 800c4f8:	af00      	add	r7, sp, #0
 800c4fa:	6078      	str	r0, [r7, #4]
 800c4fc:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800c4fe:	683b      	ldr	r3, [r7, #0]
 800c500:	885b      	ldrh	r3, [r3, #2]
 800c502:	b2da      	uxtb	r2, r3
 800c504:	4b41      	ldr	r3, [pc, #260]	; (800c60c <USBD_SetConfig+0x118>)
 800c506:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800c508:	4b40      	ldr	r3, [pc, #256]	; (800c60c <USBD_SetConfig+0x118>)
 800c50a:	781b      	ldrb	r3, [r3, #0]
 800c50c:	2b01      	cmp	r3, #1
 800c50e:	d904      	bls.n	800c51a <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 800c510:	6839      	ldr	r1, [r7, #0]
 800c512:	6878      	ldr	r0, [r7, #4]
 800c514:	f000 f955 	bl	800c7c2 <USBD_CtlError>
 800c518:	e075      	b.n	800c606 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800c51a:	687b      	ldr	r3, [r7, #4]
 800c51c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c520:	2b02      	cmp	r3, #2
 800c522:	d002      	beq.n	800c52a <USBD_SetConfig+0x36>
 800c524:	2b03      	cmp	r3, #3
 800c526:	d023      	beq.n	800c570 <USBD_SetConfig+0x7c>
 800c528:	e062      	b.n	800c5f0 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800c52a:	4b38      	ldr	r3, [pc, #224]	; (800c60c <USBD_SetConfig+0x118>)
 800c52c:	781b      	ldrb	r3, [r3, #0]
 800c52e:	2b00      	cmp	r3, #0
 800c530:	d01a      	beq.n	800c568 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 800c532:	4b36      	ldr	r3, [pc, #216]	; (800c60c <USBD_SetConfig+0x118>)
 800c534:	781b      	ldrb	r3, [r3, #0]
 800c536:	461a      	mov	r2, r3
 800c538:	687b      	ldr	r3, [r7, #4]
 800c53a:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800c53c:	687b      	ldr	r3, [r7, #4]
 800c53e:	2203      	movs	r2, #3
 800c540:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800c544:	4b31      	ldr	r3, [pc, #196]	; (800c60c <USBD_SetConfig+0x118>)
 800c546:	781b      	ldrb	r3, [r3, #0]
 800c548:	4619      	mov	r1, r3
 800c54a:	6878      	ldr	r0, [r7, #4]
 800c54c:	f7ff f9af 	bl	800b8ae <USBD_SetClassConfig>
 800c550:	4603      	mov	r3, r0
 800c552:	2b02      	cmp	r3, #2
 800c554:	d104      	bne.n	800c560 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800c556:	6839      	ldr	r1, [r7, #0]
 800c558:	6878      	ldr	r0, [r7, #4]
 800c55a:	f000 f932 	bl	800c7c2 <USBD_CtlError>
            return;
 800c55e:	e052      	b.n	800c606 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 800c560:	6878      	ldr	r0, [r7, #4]
 800c562:	f000 f9f6 	bl	800c952 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800c566:	e04e      	b.n	800c606 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800c568:	6878      	ldr	r0, [r7, #4]
 800c56a:	f000 f9f2 	bl	800c952 <USBD_CtlSendStatus>
        break;
 800c56e:	e04a      	b.n	800c606 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 800c570:	4b26      	ldr	r3, [pc, #152]	; (800c60c <USBD_SetConfig+0x118>)
 800c572:	781b      	ldrb	r3, [r3, #0]
 800c574:	2b00      	cmp	r3, #0
 800c576:	d112      	bne.n	800c59e <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800c578:	687b      	ldr	r3, [r7, #4]
 800c57a:	2202      	movs	r2, #2
 800c57c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 800c580:	4b22      	ldr	r3, [pc, #136]	; (800c60c <USBD_SetConfig+0x118>)
 800c582:	781b      	ldrb	r3, [r3, #0]
 800c584:	461a      	mov	r2, r3
 800c586:	687b      	ldr	r3, [r7, #4]
 800c588:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800c58a:	4b20      	ldr	r3, [pc, #128]	; (800c60c <USBD_SetConfig+0x118>)
 800c58c:	781b      	ldrb	r3, [r3, #0]
 800c58e:	4619      	mov	r1, r3
 800c590:	6878      	ldr	r0, [r7, #4]
 800c592:	f7ff f9ab 	bl	800b8ec <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800c596:	6878      	ldr	r0, [r7, #4]
 800c598:	f000 f9db 	bl	800c952 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800c59c:	e033      	b.n	800c606 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 800c59e:	4b1b      	ldr	r3, [pc, #108]	; (800c60c <USBD_SetConfig+0x118>)
 800c5a0:	781b      	ldrb	r3, [r3, #0]
 800c5a2:	461a      	mov	r2, r3
 800c5a4:	687b      	ldr	r3, [r7, #4]
 800c5a6:	685b      	ldr	r3, [r3, #4]
 800c5a8:	429a      	cmp	r2, r3
 800c5aa:	d01d      	beq.n	800c5e8 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c5ac:	687b      	ldr	r3, [r7, #4]
 800c5ae:	685b      	ldr	r3, [r3, #4]
 800c5b0:	b2db      	uxtb	r3, r3
 800c5b2:	4619      	mov	r1, r3
 800c5b4:	6878      	ldr	r0, [r7, #4]
 800c5b6:	f7ff f999 	bl	800b8ec <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800c5ba:	4b14      	ldr	r3, [pc, #80]	; (800c60c <USBD_SetConfig+0x118>)
 800c5bc:	781b      	ldrb	r3, [r3, #0]
 800c5be:	461a      	mov	r2, r3
 800c5c0:	687b      	ldr	r3, [r7, #4]
 800c5c2:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800c5c4:	4b11      	ldr	r3, [pc, #68]	; (800c60c <USBD_SetConfig+0x118>)
 800c5c6:	781b      	ldrb	r3, [r3, #0]
 800c5c8:	4619      	mov	r1, r3
 800c5ca:	6878      	ldr	r0, [r7, #4]
 800c5cc:	f7ff f96f 	bl	800b8ae <USBD_SetClassConfig>
 800c5d0:	4603      	mov	r3, r0
 800c5d2:	2b02      	cmp	r3, #2
 800c5d4:	d104      	bne.n	800c5e0 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 800c5d6:	6839      	ldr	r1, [r7, #0]
 800c5d8:	6878      	ldr	r0, [r7, #4]
 800c5da:	f000 f8f2 	bl	800c7c2 <USBD_CtlError>
            return;
 800c5de:	e012      	b.n	800c606 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800c5e0:	6878      	ldr	r0, [r7, #4]
 800c5e2:	f000 f9b6 	bl	800c952 <USBD_CtlSendStatus>
        break;
 800c5e6:	e00e      	b.n	800c606 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800c5e8:	6878      	ldr	r0, [r7, #4]
 800c5ea:	f000 f9b2 	bl	800c952 <USBD_CtlSendStatus>
        break;
 800c5ee:	e00a      	b.n	800c606 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 800c5f0:	6839      	ldr	r1, [r7, #0]
 800c5f2:	6878      	ldr	r0, [r7, #4]
 800c5f4:	f000 f8e5 	bl	800c7c2 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 800c5f8:	4b04      	ldr	r3, [pc, #16]	; (800c60c <USBD_SetConfig+0x118>)
 800c5fa:	781b      	ldrb	r3, [r3, #0]
 800c5fc:	4619      	mov	r1, r3
 800c5fe:	6878      	ldr	r0, [r7, #4]
 800c600:	f7ff f974 	bl	800b8ec <USBD_ClrClassConfig>
        break;
 800c604:	bf00      	nop
    }
  }
}
 800c606:	3708      	adds	r7, #8
 800c608:	46bd      	mov	sp, r7
 800c60a:	bd80      	pop	{r7, pc}
 800c60c:	20000910 	.word	0x20000910

0800c610 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c610:	b580      	push	{r7, lr}
 800c612:	b082      	sub	sp, #8
 800c614:	af00      	add	r7, sp, #0
 800c616:	6078      	str	r0, [r7, #4]
 800c618:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800c61a:	683b      	ldr	r3, [r7, #0]
 800c61c:	88db      	ldrh	r3, [r3, #6]
 800c61e:	2b01      	cmp	r3, #1
 800c620:	d004      	beq.n	800c62c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800c622:	6839      	ldr	r1, [r7, #0]
 800c624:	6878      	ldr	r0, [r7, #4]
 800c626:	f000 f8cc 	bl	800c7c2 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800c62a:	e022      	b.n	800c672 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 800c62c:	687b      	ldr	r3, [r7, #4]
 800c62e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c632:	2b02      	cmp	r3, #2
 800c634:	dc02      	bgt.n	800c63c <USBD_GetConfig+0x2c>
 800c636:	2b00      	cmp	r3, #0
 800c638:	dc03      	bgt.n	800c642 <USBD_GetConfig+0x32>
 800c63a:	e015      	b.n	800c668 <USBD_GetConfig+0x58>
 800c63c:	2b03      	cmp	r3, #3
 800c63e:	d00b      	beq.n	800c658 <USBD_GetConfig+0x48>
 800c640:	e012      	b.n	800c668 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 800c642:	687b      	ldr	r3, [r7, #4]
 800c644:	2200      	movs	r2, #0
 800c646:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800c648:	687b      	ldr	r3, [r7, #4]
 800c64a:	3308      	adds	r3, #8
 800c64c:	2201      	movs	r2, #1
 800c64e:	4619      	mov	r1, r3
 800c650:	6878      	ldr	r0, [r7, #4]
 800c652:	f000 f920 	bl	800c896 <USBD_CtlSendData>
        break;
 800c656:	e00c      	b.n	800c672 <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800c658:	687b      	ldr	r3, [r7, #4]
 800c65a:	3304      	adds	r3, #4
 800c65c:	2201      	movs	r2, #1
 800c65e:	4619      	mov	r1, r3
 800c660:	6878      	ldr	r0, [r7, #4]
 800c662:	f000 f918 	bl	800c896 <USBD_CtlSendData>
        break;
 800c666:	e004      	b.n	800c672 <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 800c668:	6839      	ldr	r1, [r7, #0]
 800c66a:	6878      	ldr	r0, [r7, #4]
 800c66c:	f000 f8a9 	bl	800c7c2 <USBD_CtlError>
        break;
 800c670:	bf00      	nop
}
 800c672:	bf00      	nop
 800c674:	3708      	adds	r7, #8
 800c676:	46bd      	mov	sp, r7
 800c678:	bd80      	pop	{r7, pc}

0800c67a <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c67a:	b580      	push	{r7, lr}
 800c67c:	b082      	sub	sp, #8
 800c67e:	af00      	add	r7, sp, #0
 800c680:	6078      	str	r0, [r7, #4]
 800c682:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c684:	687b      	ldr	r3, [r7, #4]
 800c686:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c68a:	3b01      	subs	r3, #1
 800c68c:	2b02      	cmp	r3, #2
 800c68e:	d81e      	bhi.n	800c6ce <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800c690:	683b      	ldr	r3, [r7, #0]
 800c692:	88db      	ldrh	r3, [r3, #6]
 800c694:	2b02      	cmp	r3, #2
 800c696:	d004      	beq.n	800c6a2 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 800c698:	6839      	ldr	r1, [r7, #0]
 800c69a:	6878      	ldr	r0, [r7, #4]
 800c69c:	f000 f891 	bl	800c7c2 <USBD_CtlError>
        break;
 800c6a0:	e01a      	b.n	800c6d8 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800c6a2:	687b      	ldr	r3, [r7, #4]
 800c6a4:	2201      	movs	r2, #1
 800c6a6:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800c6a8:	687b      	ldr	r3, [r7, #4]
 800c6aa:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800c6ae:	2b00      	cmp	r3, #0
 800c6b0:	d005      	beq.n	800c6be <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800c6b2:	687b      	ldr	r3, [r7, #4]
 800c6b4:	68db      	ldr	r3, [r3, #12]
 800c6b6:	f043 0202 	orr.w	r2, r3, #2
 800c6ba:	687b      	ldr	r3, [r7, #4]
 800c6bc:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800c6be:	687b      	ldr	r3, [r7, #4]
 800c6c0:	330c      	adds	r3, #12
 800c6c2:	2202      	movs	r2, #2
 800c6c4:	4619      	mov	r1, r3
 800c6c6:	6878      	ldr	r0, [r7, #4]
 800c6c8:	f000 f8e5 	bl	800c896 <USBD_CtlSendData>
      break;
 800c6cc:	e004      	b.n	800c6d8 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 800c6ce:	6839      	ldr	r1, [r7, #0]
 800c6d0:	6878      	ldr	r0, [r7, #4]
 800c6d2:	f000 f876 	bl	800c7c2 <USBD_CtlError>
      break;
 800c6d6:	bf00      	nop
  }
}
 800c6d8:	bf00      	nop
 800c6da:	3708      	adds	r7, #8
 800c6dc:	46bd      	mov	sp, r7
 800c6de:	bd80      	pop	{r7, pc}

0800c6e0 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800c6e0:	b580      	push	{r7, lr}
 800c6e2:	b082      	sub	sp, #8
 800c6e4:	af00      	add	r7, sp, #0
 800c6e6:	6078      	str	r0, [r7, #4]
 800c6e8:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c6ea:	683b      	ldr	r3, [r7, #0]
 800c6ec:	885b      	ldrh	r3, [r3, #2]
 800c6ee:	2b01      	cmp	r3, #1
 800c6f0:	d106      	bne.n	800c700 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800c6f2:	687b      	ldr	r3, [r7, #4]
 800c6f4:	2201      	movs	r2, #1
 800c6f6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 800c6fa:	6878      	ldr	r0, [r7, #4]
 800c6fc:	f000 f929 	bl	800c952 <USBD_CtlSendStatus>
  }
}
 800c700:	bf00      	nop
 800c702:	3708      	adds	r7, #8
 800c704:	46bd      	mov	sp, r7
 800c706:	bd80      	pop	{r7, pc}

0800c708 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800c708:	b580      	push	{r7, lr}
 800c70a:	b082      	sub	sp, #8
 800c70c:	af00      	add	r7, sp, #0
 800c70e:	6078      	str	r0, [r7, #4]
 800c710:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c712:	687b      	ldr	r3, [r7, #4]
 800c714:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c718:	3b01      	subs	r3, #1
 800c71a:	2b02      	cmp	r3, #2
 800c71c:	d80b      	bhi.n	800c736 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c71e:	683b      	ldr	r3, [r7, #0]
 800c720:	885b      	ldrh	r3, [r3, #2]
 800c722:	2b01      	cmp	r3, #1
 800c724:	d10c      	bne.n	800c740 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800c726:	687b      	ldr	r3, [r7, #4]
 800c728:	2200      	movs	r2, #0
 800c72a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 800c72e:	6878      	ldr	r0, [r7, #4]
 800c730:	f000 f90f 	bl	800c952 <USBD_CtlSendStatus>
      }
      break;
 800c734:	e004      	b.n	800c740 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800c736:	6839      	ldr	r1, [r7, #0]
 800c738:	6878      	ldr	r0, [r7, #4]
 800c73a:	f000 f842 	bl	800c7c2 <USBD_CtlError>
      break;
 800c73e:	e000      	b.n	800c742 <USBD_ClrFeature+0x3a>
      break;
 800c740:	bf00      	nop
  }
}
 800c742:	bf00      	nop
 800c744:	3708      	adds	r7, #8
 800c746:	46bd      	mov	sp, r7
 800c748:	bd80      	pop	{r7, pc}

0800c74a <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800c74a:	b480      	push	{r7}
 800c74c:	b083      	sub	sp, #12
 800c74e:	af00      	add	r7, sp, #0
 800c750:	6078      	str	r0, [r7, #4]
 800c752:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800c754:	683b      	ldr	r3, [r7, #0]
 800c756:	781a      	ldrb	r2, [r3, #0]
 800c758:	687b      	ldr	r3, [r7, #4]
 800c75a:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800c75c:	683b      	ldr	r3, [r7, #0]
 800c75e:	785a      	ldrb	r2, [r3, #1]
 800c760:	687b      	ldr	r3, [r7, #4]
 800c762:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800c764:	683b      	ldr	r3, [r7, #0]
 800c766:	3302      	adds	r3, #2
 800c768:	781b      	ldrb	r3, [r3, #0]
 800c76a:	b29a      	uxth	r2, r3
 800c76c:	683b      	ldr	r3, [r7, #0]
 800c76e:	3303      	adds	r3, #3
 800c770:	781b      	ldrb	r3, [r3, #0]
 800c772:	b29b      	uxth	r3, r3
 800c774:	021b      	lsls	r3, r3, #8
 800c776:	b29b      	uxth	r3, r3
 800c778:	4413      	add	r3, r2
 800c77a:	b29a      	uxth	r2, r3
 800c77c:	687b      	ldr	r3, [r7, #4]
 800c77e:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800c780:	683b      	ldr	r3, [r7, #0]
 800c782:	3304      	adds	r3, #4
 800c784:	781b      	ldrb	r3, [r3, #0]
 800c786:	b29a      	uxth	r2, r3
 800c788:	683b      	ldr	r3, [r7, #0]
 800c78a:	3305      	adds	r3, #5
 800c78c:	781b      	ldrb	r3, [r3, #0]
 800c78e:	b29b      	uxth	r3, r3
 800c790:	021b      	lsls	r3, r3, #8
 800c792:	b29b      	uxth	r3, r3
 800c794:	4413      	add	r3, r2
 800c796:	b29a      	uxth	r2, r3
 800c798:	687b      	ldr	r3, [r7, #4]
 800c79a:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800c79c:	683b      	ldr	r3, [r7, #0]
 800c79e:	3306      	adds	r3, #6
 800c7a0:	781b      	ldrb	r3, [r3, #0]
 800c7a2:	b29a      	uxth	r2, r3
 800c7a4:	683b      	ldr	r3, [r7, #0]
 800c7a6:	3307      	adds	r3, #7
 800c7a8:	781b      	ldrb	r3, [r3, #0]
 800c7aa:	b29b      	uxth	r3, r3
 800c7ac:	021b      	lsls	r3, r3, #8
 800c7ae:	b29b      	uxth	r3, r3
 800c7b0:	4413      	add	r3, r2
 800c7b2:	b29a      	uxth	r2, r3
 800c7b4:	687b      	ldr	r3, [r7, #4]
 800c7b6:	80da      	strh	r2, [r3, #6]

}
 800c7b8:	bf00      	nop
 800c7ba:	370c      	adds	r7, #12
 800c7bc:	46bd      	mov	sp, r7
 800c7be:	bc80      	pop	{r7}
 800c7c0:	4770      	bx	lr

0800c7c2 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800c7c2:	b580      	push	{r7, lr}
 800c7c4:	b082      	sub	sp, #8
 800c7c6:	af00      	add	r7, sp, #0
 800c7c8:	6078      	str	r0, [r7, #4]
 800c7ca:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800c7cc:	2180      	movs	r1, #128	; 0x80
 800c7ce:	6878      	ldr	r0, [r7, #4]
 800c7d0:	f000 fcdc 	bl	800d18c <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800c7d4:	2100      	movs	r1, #0
 800c7d6:	6878      	ldr	r0, [r7, #4]
 800c7d8:	f000 fcd8 	bl	800d18c <USBD_LL_StallEP>
}
 800c7dc:	bf00      	nop
 800c7de:	3708      	adds	r7, #8
 800c7e0:	46bd      	mov	sp, r7
 800c7e2:	bd80      	pop	{r7, pc}

0800c7e4 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800c7e4:	b580      	push	{r7, lr}
 800c7e6:	b086      	sub	sp, #24
 800c7e8:	af00      	add	r7, sp, #0
 800c7ea:	60f8      	str	r0, [r7, #12]
 800c7ec:	60b9      	str	r1, [r7, #8]
 800c7ee:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800c7f0:	2300      	movs	r3, #0
 800c7f2:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800c7f4:	68fb      	ldr	r3, [r7, #12]
 800c7f6:	2b00      	cmp	r3, #0
 800c7f8:	d032      	beq.n	800c860 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800c7fa:	68f8      	ldr	r0, [r7, #12]
 800c7fc:	f000 f834 	bl	800c868 <USBD_GetLen>
 800c800:	4603      	mov	r3, r0
 800c802:	3301      	adds	r3, #1
 800c804:	b29b      	uxth	r3, r3
 800c806:	005b      	lsls	r3, r3, #1
 800c808:	b29a      	uxth	r2, r3
 800c80a:	687b      	ldr	r3, [r7, #4]
 800c80c:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800c80e:	7dfb      	ldrb	r3, [r7, #23]
 800c810:	1c5a      	adds	r2, r3, #1
 800c812:	75fa      	strb	r2, [r7, #23]
 800c814:	461a      	mov	r2, r3
 800c816:	68bb      	ldr	r3, [r7, #8]
 800c818:	4413      	add	r3, r2
 800c81a:	687a      	ldr	r2, [r7, #4]
 800c81c:	7812      	ldrb	r2, [r2, #0]
 800c81e:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800c820:	7dfb      	ldrb	r3, [r7, #23]
 800c822:	1c5a      	adds	r2, r3, #1
 800c824:	75fa      	strb	r2, [r7, #23]
 800c826:	461a      	mov	r2, r3
 800c828:	68bb      	ldr	r3, [r7, #8]
 800c82a:	4413      	add	r3, r2
 800c82c:	2203      	movs	r2, #3
 800c82e:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800c830:	e012      	b.n	800c858 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800c832:	68fb      	ldr	r3, [r7, #12]
 800c834:	1c5a      	adds	r2, r3, #1
 800c836:	60fa      	str	r2, [r7, #12]
 800c838:	7dfa      	ldrb	r2, [r7, #23]
 800c83a:	1c51      	adds	r1, r2, #1
 800c83c:	75f9      	strb	r1, [r7, #23]
 800c83e:	4611      	mov	r1, r2
 800c840:	68ba      	ldr	r2, [r7, #8]
 800c842:	440a      	add	r2, r1
 800c844:	781b      	ldrb	r3, [r3, #0]
 800c846:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800c848:	7dfb      	ldrb	r3, [r7, #23]
 800c84a:	1c5a      	adds	r2, r3, #1
 800c84c:	75fa      	strb	r2, [r7, #23]
 800c84e:	461a      	mov	r2, r3
 800c850:	68bb      	ldr	r3, [r7, #8]
 800c852:	4413      	add	r3, r2
 800c854:	2200      	movs	r2, #0
 800c856:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800c858:	68fb      	ldr	r3, [r7, #12]
 800c85a:	781b      	ldrb	r3, [r3, #0]
 800c85c:	2b00      	cmp	r3, #0
 800c85e:	d1e8      	bne.n	800c832 <USBD_GetString+0x4e>
    }
  }
}
 800c860:	bf00      	nop
 800c862:	3718      	adds	r7, #24
 800c864:	46bd      	mov	sp, r7
 800c866:	bd80      	pop	{r7, pc}

0800c868 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800c868:	b480      	push	{r7}
 800c86a:	b085      	sub	sp, #20
 800c86c:	af00      	add	r7, sp, #0
 800c86e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800c870:	2300      	movs	r3, #0
 800c872:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 800c874:	e005      	b.n	800c882 <USBD_GetLen+0x1a>
  {
    len++;
 800c876:	7bfb      	ldrb	r3, [r7, #15]
 800c878:	3301      	adds	r3, #1
 800c87a:	73fb      	strb	r3, [r7, #15]
    buf++;
 800c87c:	687b      	ldr	r3, [r7, #4]
 800c87e:	3301      	adds	r3, #1
 800c880:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800c882:	687b      	ldr	r3, [r7, #4]
 800c884:	781b      	ldrb	r3, [r3, #0]
 800c886:	2b00      	cmp	r3, #0
 800c888:	d1f5      	bne.n	800c876 <USBD_GetLen+0xe>
  }

  return len;
 800c88a:	7bfb      	ldrb	r3, [r7, #15]
}
 800c88c:	4618      	mov	r0, r3
 800c88e:	3714      	adds	r7, #20
 800c890:	46bd      	mov	sp, r7
 800c892:	bc80      	pop	{r7}
 800c894:	4770      	bx	lr

0800c896 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800c896:	b580      	push	{r7, lr}
 800c898:	b084      	sub	sp, #16
 800c89a:	af00      	add	r7, sp, #0
 800c89c:	60f8      	str	r0, [r7, #12]
 800c89e:	60b9      	str	r1, [r7, #8]
 800c8a0:	4613      	mov	r3, r2
 800c8a2:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800c8a4:	68fb      	ldr	r3, [r7, #12]
 800c8a6:	2202      	movs	r2, #2
 800c8a8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800c8ac:	88fa      	ldrh	r2, [r7, #6]
 800c8ae:	68fb      	ldr	r3, [r7, #12]
 800c8b0:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800c8b2:	88fa      	ldrh	r2, [r7, #6]
 800c8b4:	68fb      	ldr	r3, [r7, #12]
 800c8b6:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c8b8:	88fb      	ldrh	r3, [r7, #6]
 800c8ba:	68ba      	ldr	r2, [r7, #8]
 800c8bc:	2100      	movs	r1, #0
 800c8be:	68f8      	ldr	r0, [r7, #12]
 800c8c0:	f000 fcec 	bl	800d29c <USBD_LL_Transmit>

  return USBD_OK;
 800c8c4:	2300      	movs	r3, #0
}
 800c8c6:	4618      	mov	r0, r3
 800c8c8:	3710      	adds	r7, #16
 800c8ca:	46bd      	mov	sp, r7
 800c8cc:	bd80      	pop	{r7, pc}

0800c8ce <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800c8ce:	b580      	push	{r7, lr}
 800c8d0:	b084      	sub	sp, #16
 800c8d2:	af00      	add	r7, sp, #0
 800c8d4:	60f8      	str	r0, [r7, #12]
 800c8d6:	60b9      	str	r1, [r7, #8]
 800c8d8:	4613      	mov	r3, r2
 800c8da:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c8dc:	88fb      	ldrh	r3, [r7, #6]
 800c8de:	68ba      	ldr	r2, [r7, #8]
 800c8e0:	2100      	movs	r1, #0
 800c8e2:	68f8      	ldr	r0, [r7, #12]
 800c8e4:	f000 fcda 	bl	800d29c <USBD_LL_Transmit>

  return USBD_OK;
 800c8e8:	2300      	movs	r3, #0
}
 800c8ea:	4618      	mov	r0, r3
 800c8ec:	3710      	adds	r7, #16
 800c8ee:	46bd      	mov	sp, r7
 800c8f0:	bd80      	pop	{r7, pc}

0800c8f2 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800c8f2:	b580      	push	{r7, lr}
 800c8f4:	b084      	sub	sp, #16
 800c8f6:	af00      	add	r7, sp, #0
 800c8f8:	60f8      	str	r0, [r7, #12]
 800c8fa:	60b9      	str	r1, [r7, #8]
 800c8fc:	4613      	mov	r3, r2
 800c8fe:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800c900:	68fb      	ldr	r3, [r7, #12]
 800c902:	2203      	movs	r2, #3
 800c904:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800c908:	88fa      	ldrh	r2, [r7, #6]
 800c90a:	68fb      	ldr	r3, [r7, #12]
 800c90c:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 800c910:	88fa      	ldrh	r2, [r7, #6]
 800c912:	68fb      	ldr	r3, [r7, #12]
 800c914:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c918:	88fb      	ldrh	r3, [r7, #6]
 800c91a:	68ba      	ldr	r2, [r7, #8]
 800c91c:	2100      	movs	r1, #0
 800c91e:	68f8      	ldr	r0, [r7, #12]
 800c920:	f000 fcdf 	bl	800d2e2 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c924:	2300      	movs	r3, #0
}
 800c926:	4618      	mov	r0, r3
 800c928:	3710      	adds	r7, #16
 800c92a:	46bd      	mov	sp, r7
 800c92c:	bd80      	pop	{r7, pc}

0800c92e <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800c92e:	b580      	push	{r7, lr}
 800c930:	b084      	sub	sp, #16
 800c932:	af00      	add	r7, sp, #0
 800c934:	60f8      	str	r0, [r7, #12]
 800c936:	60b9      	str	r1, [r7, #8]
 800c938:	4613      	mov	r3, r2
 800c93a:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c93c:	88fb      	ldrh	r3, [r7, #6]
 800c93e:	68ba      	ldr	r2, [r7, #8]
 800c940:	2100      	movs	r1, #0
 800c942:	68f8      	ldr	r0, [r7, #12]
 800c944:	f000 fccd 	bl	800d2e2 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c948:	2300      	movs	r3, #0
}
 800c94a:	4618      	mov	r0, r3
 800c94c:	3710      	adds	r7, #16
 800c94e:	46bd      	mov	sp, r7
 800c950:	bd80      	pop	{r7, pc}

0800c952 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800c952:	b580      	push	{r7, lr}
 800c954:	b082      	sub	sp, #8
 800c956:	af00      	add	r7, sp, #0
 800c958:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800c95a:	687b      	ldr	r3, [r7, #4]
 800c95c:	2204      	movs	r2, #4
 800c95e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800c962:	2300      	movs	r3, #0
 800c964:	2200      	movs	r2, #0
 800c966:	2100      	movs	r1, #0
 800c968:	6878      	ldr	r0, [r7, #4]
 800c96a:	f000 fc97 	bl	800d29c <USBD_LL_Transmit>

  return USBD_OK;
 800c96e:	2300      	movs	r3, #0
}
 800c970:	4618      	mov	r0, r3
 800c972:	3708      	adds	r7, #8
 800c974:	46bd      	mov	sp, r7
 800c976:	bd80      	pop	{r7, pc}

0800c978 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800c978:	b580      	push	{r7, lr}
 800c97a:	b082      	sub	sp, #8
 800c97c:	af00      	add	r7, sp, #0
 800c97e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800c980:	687b      	ldr	r3, [r7, #4]
 800c982:	2205      	movs	r2, #5
 800c984:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c988:	2300      	movs	r3, #0
 800c98a:	2200      	movs	r2, #0
 800c98c:	2100      	movs	r1, #0
 800c98e:	6878      	ldr	r0, [r7, #4]
 800c990:	f000 fca7 	bl	800d2e2 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c994:	2300      	movs	r3, #0
}
 800c996:	4618      	mov	r0, r3
 800c998:	3708      	adds	r7, #8
 800c99a:	46bd      	mov	sp, r7
 800c99c:	bd80      	pop	{r7, pc}
	...

0800c9a0 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800c9a0:	b580      	push	{r7, lr}
 800c9a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800c9a4:	2200      	movs	r2, #0
 800c9a6:	4912      	ldr	r1, [pc, #72]	; (800c9f0 <MX_USB_DEVICE_Init+0x50>)
 800c9a8:	4812      	ldr	r0, [pc, #72]	; (800c9f4 <MX_USB_DEVICE_Init+0x54>)
 800c9aa:	f7fe ff26 	bl	800b7fa <USBD_Init>
 800c9ae:	4603      	mov	r3, r0
 800c9b0:	2b00      	cmp	r3, #0
 800c9b2:	d001      	beq.n	800c9b8 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800c9b4:	f7f7 fd22 	bl	80043fc <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800c9b8:	490f      	ldr	r1, [pc, #60]	; (800c9f8 <MX_USB_DEVICE_Init+0x58>)
 800c9ba:	480e      	ldr	r0, [pc, #56]	; (800c9f4 <MX_USB_DEVICE_Init+0x54>)
 800c9bc:	f7fe ff48 	bl	800b850 <USBD_RegisterClass>
 800c9c0:	4603      	mov	r3, r0
 800c9c2:	2b00      	cmp	r3, #0
 800c9c4:	d001      	beq.n	800c9ca <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800c9c6:	f7f7 fd19 	bl	80043fc <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800c9ca:	490c      	ldr	r1, [pc, #48]	; (800c9fc <MX_USB_DEVICE_Init+0x5c>)
 800c9cc:	4809      	ldr	r0, [pc, #36]	; (800c9f4 <MX_USB_DEVICE_Init+0x54>)
 800c9ce:	f7fe fe79 	bl	800b6c4 <USBD_CDC_RegisterInterface>
 800c9d2:	4603      	mov	r3, r0
 800c9d4:	2b00      	cmp	r3, #0
 800c9d6:	d001      	beq.n	800c9dc <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800c9d8:	f7f7 fd10 	bl	80043fc <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800c9dc:	4805      	ldr	r0, [pc, #20]	; (800c9f4 <MX_USB_DEVICE_Init+0x54>)
 800c9de:	f7fe ff50 	bl	800b882 <USBD_Start>
 800c9e2:	4603      	mov	r3, r0
 800c9e4:	2b00      	cmp	r3, #0
 800c9e6:	d001      	beq.n	800c9ec <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800c9e8:	f7f7 fd08 	bl	80043fc <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800c9ec:	bf00      	nop
 800c9ee:	bd80      	pop	{r7, pc}
 800c9f0:	20000158 	.word	0x20000158
 800c9f4:	20000920 	.word	0x20000920
 800c9f8:	2000003c 	.word	0x2000003c
 800c9fc:	20000140 	.word	0x20000140

0800ca00 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800ca00:	b580      	push	{r7, lr}
 800ca02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800ca04:	2200      	movs	r2, #0
 800ca06:	4905      	ldr	r1, [pc, #20]	; (800ca1c <CDC_Init_FS+0x1c>)
 800ca08:	4805      	ldr	r0, [pc, #20]	; (800ca20 <CDC_Init_FS+0x20>)
 800ca0a:	f7fe fe71 	bl	800b6f0 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800ca0e:	4905      	ldr	r1, [pc, #20]	; (800ca24 <CDC_Init_FS+0x24>)
 800ca10:	4803      	ldr	r0, [pc, #12]	; (800ca20 <CDC_Init_FS+0x20>)
 800ca12:	f7fe fe86 	bl	800b722 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800ca16:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800ca18:	4618      	mov	r0, r3
 800ca1a:	bd80      	pop	{r7, pc}
 800ca1c:	200013e4 	.word	0x200013e4
 800ca20:	20000920 	.word	0x20000920
 800ca24:	20000be4 	.word	0x20000be4

0800ca28 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800ca28:	b480      	push	{r7}
 800ca2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800ca2c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800ca2e:	4618      	mov	r0, r3
 800ca30:	46bd      	mov	sp, r7
 800ca32:	bc80      	pop	{r7}
 800ca34:	4770      	bx	lr
	...

0800ca38 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800ca38:	b480      	push	{r7}
 800ca3a:	b083      	sub	sp, #12
 800ca3c:	af00      	add	r7, sp, #0
 800ca3e:	4603      	mov	r3, r0
 800ca40:	6039      	str	r1, [r7, #0]
 800ca42:	71fb      	strb	r3, [r7, #7]
 800ca44:	4613      	mov	r3, r2
 800ca46:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800ca48:	79fb      	ldrb	r3, [r7, #7]
 800ca4a:	2b23      	cmp	r3, #35	; 0x23
 800ca4c:	d85c      	bhi.n	800cb08 <CDC_Control_FS+0xd0>
 800ca4e:	a201      	add	r2, pc, #4	; (adr r2, 800ca54 <CDC_Control_FS+0x1c>)
 800ca50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ca54:	0800cb09 	.word	0x0800cb09
 800ca58:	0800cb09 	.word	0x0800cb09
 800ca5c:	0800cb09 	.word	0x0800cb09
 800ca60:	0800cb09 	.word	0x0800cb09
 800ca64:	0800cb09 	.word	0x0800cb09
 800ca68:	0800cb09 	.word	0x0800cb09
 800ca6c:	0800cb09 	.word	0x0800cb09
 800ca70:	0800cb09 	.word	0x0800cb09
 800ca74:	0800cb09 	.word	0x0800cb09
 800ca78:	0800cb09 	.word	0x0800cb09
 800ca7c:	0800cb09 	.word	0x0800cb09
 800ca80:	0800cb09 	.word	0x0800cb09
 800ca84:	0800cb09 	.word	0x0800cb09
 800ca88:	0800cb09 	.word	0x0800cb09
 800ca8c:	0800cb09 	.word	0x0800cb09
 800ca90:	0800cb09 	.word	0x0800cb09
 800ca94:	0800cb09 	.word	0x0800cb09
 800ca98:	0800cb09 	.word	0x0800cb09
 800ca9c:	0800cb09 	.word	0x0800cb09
 800caa0:	0800cb09 	.word	0x0800cb09
 800caa4:	0800cb09 	.word	0x0800cb09
 800caa8:	0800cb09 	.word	0x0800cb09
 800caac:	0800cb09 	.word	0x0800cb09
 800cab0:	0800cb09 	.word	0x0800cb09
 800cab4:	0800cb09 	.word	0x0800cb09
 800cab8:	0800cb09 	.word	0x0800cb09
 800cabc:	0800cb09 	.word	0x0800cb09
 800cac0:	0800cb09 	.word	0x0800cb09
 800cac4:	0800cb09 	.word	0x0800cb09
 800cac8:	0800cb09 	.word	0x0800cb09
 800cacc:	0800cb09 	.word	0x0800cb09
 800cad0:	0800cb09 	.word	0x0800cb09
 800cad4:	0800cae5 	.word	0x0800cae5
 800cad8:	0800caf7 	.word	0x0800caf7
 800cadc:	0800cb09 	.word	0x0800cb09
 800cae0:	0800cb09 	.word	0x0800cb09
    static uint8_t lineCoding[7] // 115200bps, 1stop, no parity, 8bit

    = { 0x00, 0xC2, 0x01, 0x00, 0x00, 0x00, 0x08 };

    case CDC_SET_LINE_CODING:
      memcpy(lineCoding, pbuf, sizeof(lineCoding));
 800cae4:	4b0c      	ldr	r3, [pc, #48]	; (800cb18 <CDC_Control_FS+0xe0>)
 800cae6:	683a      	ldr	r2, [r7, #0]
 800cae8:	6810      	ldr	r0, [r2, #0]
 800caea:	6018      	str	r0, [r3, #0]
 800caec:	8891      	ldrh	r1, [r2, #4]
 800caee:	7992      	ldrb	r2, [r2, #6]
 800caf0:	8099      	strh	r1, [r3, #4]
 800caf2:	719a      	strb	r2, [r3, #6]
    break;
 800caf4:	e009      	b.n	800cb0a <CDC_Control_FS+0xd2>

    case CDC_GET_LINE_CODING:
      memcpy(pbuf, lineCoding, sizeof(lineCoding));
 800caf6:	683b      	ldr	r3, [r7, #0]
 800caf8:	4a07      	ldr	r2, [pc, #28]	; (800cb18 <CDC_Control_FS+0xe0>)
 800cafa:	6810      	ldr	r0, [r2, #0]
 800cafc:	6018      	str	r0, [r3, #0]
 800cafe:	8891      	ldrh	r1, [r2, #4]
 800cb00:	7992      	ldrb	r2, [r2, #6]
 800cb02:	8099      	strh	r1, [r3, #4]
 800cb04:	719a      	strb	r2, [r3, #6]
    break;
 800cb06:	e000      	b.n	800cb0a <CDC_Control_FS+0xd2>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800cb08:	bf00      	nop
  }

  return (USBD_OK);
 800cb0a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800cb0c:	4618      	mov	r0, r3
 800cb0e:	370c      	adds	r7, #12
 800cb10:	46bd      	mov	sp, r7
 800cb12:	bc80      	pop	{r7}
 800cb14:	4770      	bx	lr
 800cb16:	bf00      	nop
 800cb18:	20000150 	.word	0x20000150

0800cb1c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800cb1c:	b580      	push	{r7, lr}
 800cb1e:	b082      	sub	sp, #8
 800cb20:	af00      	add	r7, sp, #0
 800cb22:	6078      	str	r0, [r7, #4]
 800cb24:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800cb26:	6879      	ldr	r1, [r7, #4]
 800cb28:	4805      	ldr	r0, [pc, #20]	; (800cb40 <CDC_Receive_FS+0x24>)
 800cb2a:	f7fe fdfa 	bl	800b722 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800cb2e:	4804      	ldr	r0, [pc, #16]	; (800cb40 <CDC_Receive_FS+0x24>)
 800cb30:	f7fe fe39 	bl	800b7a6 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800cb34:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800cb36:	4618      	mov	r0, r3
 800cb38:	3708      	adds	r7, #8
 800cb3a:	46bd      	mov	sp, r7
 800cb3c:	bd80      	pop	{r7, pc}
 800cb3e:	bf00      	nop
 800cb40:	20000920 	.word	0x20000920

0800cb44 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800cb44:	b580      	push	{r7, lr}
 800cb46:	b084      	sub	sp, #16
 800cb48:	af00      	add	r7, sp, #0
 800cb4a:	6078      	str	r0, [r7, #4]
 800cb4c:	460b      	mov	r3, r1
 800cb4e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800cb50:	2300      	movs	r3, #0
 800cb52:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800cb54:	4b0d      	ldr	r3, [pc, #52]	; (800cb8c <CDC_Transmit_FS+0x48>)
 800cb56:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cb5a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800cb5c:	68bb      	ldr	r3, [r7, #8]
 800cb5e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800cb62:	2b00      	cmp	r3, #0
 800cb64:	d001      	beq.n	800cb6a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800cb66:	2301      	movs	r3, #1
 800cb68:	e00b      	b.n	800cb82 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800cb6a:	887b      	ldrh	r3, [r7, #2]
 800cb6c:	461a      	mov	r2, r3
 800cb6e:	6879      	ldr	r1, [r7, #4]
 800cb70:	4806      	ldr	r0, [pc, #24]	; (800cb8c <CDC_Transmit_FS+0x48>)
 800cb72:	f7fe fdbd 	bl	800b6f0 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800cb76:	4805      	ldr	r0, [pc, #20]	; (800cb8c <CDC_Transmit_FS+0x48>)
 800cb78:	f7fe fde6 	bl	800b748 <USBD_CDC_TransmitPacket>
 800cb7c:	4603      	mov	r3, r0
 800cb7e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800cb80:	7bfb      	ldrb	r3, [r7, #15]
}
 800cb82:	4618      	mov	r0, r3
 800cb84:	3710      	adds	r7, #16
 800cb86:	46bd      	mov	sp, r7
 800cb88:	bd80      	pop	{r7, pc}
 800cb8a:	bf00      	nop
 800cb8c:	20000920 	.word	0x20000920

0800cb90 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cb90:	b480      	push	{r7}
 800cb92:	b083      	sub	sp, #12
 800cb94:	af00      	add	r7, sp, #0
 800cb96:	4603      	mov	r3, r0
 800cb98:	6039      	str	r1, [r7, #0]
 800cb9a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800cb9c:	683b      	ldr	r3, [r7, #0]
 800cb9e:	2212      	movs	r2, #18
 800cba0:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800cba2:	4b03      	ldr	r3, [pc, #12]	; (800cbb0 <USBD_FS_DeviceDescriptor+0x20>)
}
 800cba4:	4618      	mov	r0, r3
 800cba6:	370c      	adds	r7, #12
 800cba8:	46bd      	mov	sp, r7
 800cbaa:	bc80      	pop	{r7}
 800cbac:	4770      	bx	lr
 800cbae:	bf00      	nop
 800cbb0:	20000174 	.word	0x20000174

0800cbb4 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cbb4:	b480      	push	{r7}
 800cbb6:	b083      	sub	sp, #12
 800cbb8:	af00      	add	r7, sp, #0
 800cbba:	4603      	mov	r3, r0
 800cbbc:	6039      	str	r1, [r7, #0]
 800cbbe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800cbc0:	683b      	ldr	r3, [r7, #0]
 800cbc2:	2204      	movs	r2, #4
 800cbc4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800cbc6:	4b03      	ldr	r3, [pc, #12]	; (800cbd4 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800cbc8:	4618      	mov	r0, r3
 800cbca:	370c      	adds	r7, #12
 800cbcc:	46bd      	mov	sp, r7
 800cbce:	bc80      	pop	{r7}
 800cbd0:	4770      	bx	lr
 800cbd2:	bf00      	nop
 800cbd4:	20000188 	.word	0x20000188

0800cbd8 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cbd8:	b580      	push	{r7, lr}
 800cbda:	b082      	sub	sp, #8
 800cbdc:	af00      	add	r7, sp, #0
 800cbde:	4603      	mov	r3, r0
 800cbe0:	6039      	str	r1, [r7, #0]
 800cbe2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800cbe4:	79fb      	ldrb	r3, [r7, #7]
 800cbe6:	2b00      	cmp	r3, #0
 800cbe8:	d105      	bne.n	800cbf6 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800cbea:	683a      	ldr	r2, [r7, #0]
 800cbec:	4907      	ldr	r1, [pc, #28]	; (800cc0c <USBD_FS_ProductStrDescriptor+0x34>)
 800cbee:	4808      	ldr	r0, [pc, #32]	; (800cc10 <USBD_FS_ProductStrDescriptor+0x38>)
 800cbf0:	f7ff fdf8 	bl	800c7e4 <USBD_GetString>
 800cbf4:	e004      	b.n	800cc00 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800cbf6:	683a      	ldr	r2, [r7, #0]
 800cbf8:	4904      	ldr	r1, [pc, #16]	; (800cc0c <USBD_FS_ProductStrDescriptor+0x34>)
 800cbfa:	4805      	ldr	r0, [pc, #20]	; (800cc10 <USBD_FS_ProductStrDescriptor+0x38>)
 800cbfc:	f7ff fdf2 	bl	800c7e4 <USBD_GetString>
  }
  return USBD_StrDesc;
 800cc00:	4b02      	ldr	r3, [pc, #8]	; (800cc0c <USBD_FS_ProductStrDescriptor+0x34>)
}
 800cc02:	4618      	mov	r0, r3
 800cc04:	3708      	adds	r7, #8
 800cc06:	46bd      	mov	sp, r7
 800cc08:	bd80      	pop	{r7, pc}
 800cc0a:	bf00      	nop
 800cc0c:	20001be4 	.word	0x20001be4
 800cc10:	08012744 	.word	0x08012744

0800cc14 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cc14:	b580      	push	{r7, lr}
 800cc16:	b082      	sub	sp, #8
 800cc18:	af00      	add	r7, sp, #0
 800cc1a:	4603      	mov	r3, r0
 800cc1c:	6039      	str	r1, [r7, #0]
 800cc1e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800cc20:	683a      	ldr	r2, [r7, #0]
 800cc22:	4904      	ldr	r1, [pc, #16]	; (800cc34 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800cc24:	4804      	ldr	r0, [pc, #16]	; (800cc38 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800cc26:	f7ff fddd 	bl	800c7e4 <USBD_GetString>
  return USBD_StrDesc;
 800cc2a:	4b02      	ldr	r3, [pc, #8]	; (800cc34 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800cc2c:	4618      	mov	r0, r3
 800cc2e:	3708      	adds	r7, #8
 800cc30:	46bd      	mov	sp, r7
 800cc32:	bd80      	pop	{r7, pc}
 800cc34:	20001be4 	.word	0x20001be4
 800cc38:	0801275c 	.word	0x0801275c

0800cc3c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cc3c:	b580      	push	{r7, lr}
 800cc3e:	b082      	sub	sp, #8
 800cc40:	af00      	add	r7, sp, #0
 800cc42:	4603      	mov	r3, r0
 800cc44:	6039      	str	r1, [r7, #0]
 800cc46:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800cc48:	683b      	ldr	r3, [r7, #0]
 800cc4a:	221a      	movs	r2, #26
 800cc4c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800cc4e:	f000 f843 	bl	800ccd8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800cc52:	4b02      	ldr	r3, [pc, #8]	; (800cc5c <USBD_FS_SerialStrDescriptor+0x20>)
}
 800cc54:	4618      	mov	r0, r3
 800cc56:	3708      	adds	r7, #8
 800cc58:	46bd      	mov	sp, r7
 800cc5a:	bd80      	pop	{r7, pc}
 800cc5c:	2000018c 	.word	0x2000018c

0800cc60 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cc60:	b580      	push	{r7, lr}
 800cc62:	b082      	sub	sp, #8
 800cc64:	af00      	add	r7, sp, #0
 800cc66:	4603      	mov	r3, r0
 800cc68:	6039      	str	r1, [r7, #0]
 800cc6a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800cc6c:	79fb      	ldrb	r3, [r7, #7]
 800cc6e:	2b00      	cmp	r3, #0
 800cc70:	d105      	bne.n	800cc7e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800cc72:	683a      	ldr	r2, [r7, #0]
 800cc74:	4907      	ldr	r1, [pc, #28]	; (800cc94 <USBD_FS_ConfigStrDescriptor+0x34>)
 800cc76:	4808      	ldr	r0, [pc, #32]	; (800cc98 <USBD_FS_ConfigStrDescriptor+0x38>)
 800cc78:	f7ff fdb4 	bl	800c7e4 <USBD_GetString>
 800cc7c:	e004      	b.n	800cc88 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800cc7e:	683a      	ldr	r2, [r7, #0]
 800cc80:	4904      	ldr	r1, [pc, #16]	; (800cc94 <USBD_FS_ConfigStrDescriptor+0x34>)
 800cc82:	4805      	ldr	r0, [pc, #20]	; (800cc98 <USBD_FS_ConfigStrDescriptor+0x38>)
 800cc84:	f7ff fdae 	bl	800c7e4 <USBD_GetString>
  }
  return USBD_StrDesc;
 800cc88:	4b02      	ldr	r3, [pc, #8]	; (800cc94 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800cc8a:	4618      	mov	r0, r3
 800cc8c:	3708      	adds	r7, #8
 800cc8e:	46bd      	mov	sp, r7
 800cc90:	bd80      	pop	{r7, pc}
 800cc92:	bf00      	nop
 800cc94:	20001be4 	.word	0x20001be4
 800cc98:	08012770 	.word	0x08012770

0800cc9c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cc9c:	b580      	push	{r7, lr}
 800cc9e:	b082      	sub	sp, #8
 800cca0:	af00      	add	r7, sp, #0
 800cca2:	4603      	mov	r3, r0
 800cca4:	6039      	str	r1, [r7, #0]
 800cca6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800cca8:	79fb      	ldrb	r3, [r7, #7]
 800ccaa:	2b00      	cmp	r3, #0
 800ccac:	d105      	bne.n	800ccba <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800ccae:	683a      	ldr	r2, [r7, #0]
 800ccb0:	4907      	ldr	r1, [pc, #28]	; (800ccd0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800ccb2:	4808      	ldr	r0, [pc, #32]	; (800ccd4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800ccb4:	f7ff fd96 	bl	800c7e4 <USBD_GetString>
 800ccb8:	e004      	b.n	800ccc4 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800ccba:	683a      	ldr	r2, [r7, #0]
 800ccbc:	4904      	ldr	r1, [pc, #16]	; (800ccd0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800ccbe:	4805      	ldr	r0, [pc, #20]	; (800ccd4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800ccc0:	f7ff fd90 	bl	800c7e4 <USBD_GetString>
  }
  return USBD_StrDesc;
 800ccc4:	4b02      	ldr	r3, [pc, #8]	; (800ccd0 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800ccc6:	4618      	mov	r0, r3
 800ccc8:	3708      	adds	r7, #8
 800ccca:	46bd      	mov	sp, r7
 800cccc:	bd80      	pop	{r7, pc}
 800ccce:	bf00      	nop
 800ccd0:	20001be4 	.word	0x20001be4
 800ccd4:	0801277c 	.word	0x0801277c

0800ccd8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800ccd8:	b580      	push	{r7, lr}
 800ccda:	b084      	sub	sp, #16
 800ccdc:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800ccde:	4b0f      	ldr	r3, [pc, #60]	; (800cd1c <Get_SerialNum+0x44>)
 800cce0:	681b      	ldr	r3, [r3, #0]
 800cce2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800cce4:	4b0e      	ldr	r3, [pc, #56]	; (800cd20 <Get_SerialNum+0x48>)
 800cce6:	681b      	ldr	r3, [r3, #0]
 800cce8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800ccea:	4b0e      	ldr	r3, [pc, #56]	; (800cd24 <Get_SerialNum+0x4c>)
 800ccec:	681b      	ldr	r3, [r3, #0]
 800ccee:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800ccf0:	68fa      	ldr	r2, [r7, #12]
 800ccf2:	687b      	ldr	r3, [r7, #4]
 800ccf4:	4413      	add	r3, r2
 800ccf6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800ccf8:	68fb      	ldr	r3, [r7, #12]
 800ccfa:	2b00      	cmp	r3, #0
 800ccfc:	d009      	beq.n	800cd12 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800ccfe:	2208      	movs	r2, #8
 800cd00:	4909      	ldr	r1, [pc, #36]	; (800cd28 <Get_SerialNum+0x50>)
 800cd02:	68f8      	ldr	r0, [r7, #12]
 800cd04:	f000 f814 	bl	800cd30 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800cd08:	2204      	movs	r2, #4
 800cd0a:	4908      	ldr	r1, [pc, #32]	; (800cd2c <Get_SerialNum+0x54>)
 800cd0c:	68b8      	ldr	r0, [r7, #8]
 800cd0e:	f000 f80f 	bl	800cd30 <IntToUnicode>
  }
}
 800cd12:	bf00      	nop
 800cd14:	3710      	adds	r7, #16
 800cd16:	46bd      	mov	sp, r7
 800cd18:	bd80      	pop	{r7, pc}
 800cd1a:	bf00      	nop
 800cd1c:	1fff7a10 	.word	0x1fff7a10
 800cd20:	1fff7a14 	.word	0x1fff7a14
 800cd24:	1fff7a18 	.word	0x1fff7a18
 800cd28:	2000018e 	.word	0x2000018e
 800cd2c:	2000019e 	.word	0x2000019e

0800cd30 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800cd30:	b480      	push	{r7}
 800cd32:	b087      	sub	sp, #28
 800cd34:	af00      	add	r7, sp, #0
 800cd36:	60f8      	str	r0, [r7, #12]
 800cd38:	60b9      	str	r1, [r7, #8]
 800cd3a:	4613      	mov	r3, r2
 800cd3c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800cd3e:	2300      	movs	r3, #0
 800cd40:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800cd42:	2300      	movs	r3, #0
 800cd44:	75fb      	strb	r3, [r7, #23]
 800cd46:	e027      	b.n	800cd98 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800cd48:	68fb      	ldr	r3, [r7, #12]
 800cd4a:	0f1b      	lsrs	r3, r3, #28
 800cd4c:	2b09      	cmp	r3, #9
 800cd4e:	d80b      	bhi.n	800cd68 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800cd50:	68fb      	ldr	r3, [r7, #12]
 800cd52:	0f1b      	lsrs	r3, r3, #28
 800cd54:	b2da      	uxtb	r2, r3
 800cd56:	7dfb      	ldrb	r3, [r7, #23]
 800cd58:	005b      	lsls	r3, r3, #1
 800cd5a:	4619      	mov	r1, r3
 800cd5c:	68bb      	ldr	r3, [r7, #8]
 800cd5e:	440b      	add	r3, r1
 800cd60:	3230      	adds	r2, #48	; 0x30
 800cd62:	b2d2      	uxtb	r2, r2
 800cd64:	701a      	strb	r2, [r3, #0]
 800cd66:	e00a      	b.n	800cd7e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800cd68:	68fb      	ldr	r3, [r7, #12]
 800cd6a:	0f1b      	lsrs	r3, r3, #28
 800cd6c:	b2da      	uxtb	r2, r3
 800cd6e:	7dfb      	ldrb	r3, [r7, #23]
 800cd70:	005b      	lsls	r3, r3, #1
 800cd72:	4619      	mov	r1, r3
 800cd74:	68bb      	ldr	r3, [r7, #8]
 800cd76:	440b      	add	r3, r1
 800cd78:	3237      	adds	r2, #55	; 0x37
 800cd7a:	b2d2      	uxtb	r2, r2
 800cd7c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800cd7e:	68fb      	ldr	r3, [r7, #12]
 800cd80:	011b      	lsls	r3, r3, #4
 800cd82:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800cd84:	7dfb      	ldrb	r3, [r7, #23]
 800cd86:	005b      	lsls	r3, r3, #1
 800cd88:	3301      	adds	r3, #1
 800cd8a:	68ba      	ldr	r2, [r7, #8]
 800cd8c:	4413      	add	r3, r2
 800cd8e:	2200      	movs	r2, #0
 800cd90:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800cd92:	7dfb      	ldrb	r3, [r7, #23]
 800cd94:	3301      	adds	r3, #1
 800cd96:	75fb      	strb	r3, [r7, #23]
 800cd98:	7dfa      	ldrb	r2, [r7, #23]
 800cd9a:	79fb      	ldrb	r3, [r7, #7]
 800cd9c:	429a      	cmp	r2, r3
 800cd9e:	d3d3      	bcc.n	800cd48 <IntToUnicode+0x18>
  }
}
 800cda0:	bf00      	nop
 800cda2:	bf00      	nop
 800cda4:	371c      	adds	r7, #28
 800cda6:	46bd      	mov	sp, r7
 800cda8:	bc80      	pop	{r7}
 800cdaa:	4770      	bx	lr

0800cdac <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800cdac:	b580      	push	{r7, lr}
 800cdae:	b08a      	sub	sp, #40	; 0x28
 800cdb0:	af00      	add	r7, sp, #0
 800cdb2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800cdb4:	f107 0314 	add.w	r3, r7, #20
 800cdb8:	2200      	movs	r2, #0
 800cdba:	601a      	str	r2, [r3, #0]
 800cdbc:	605a      	str	r2, [r3, #4]
 800cdbe:	609a      	str	r2, [r3, #8]
 800cdc0:	60da      	str	r2, [r3, #12]
 800cdc2:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800cdc4:	687b      	ldr	r3, [r7, #4]
 800cdc6:	681b      	ldr	r3, [r3, #0]
 800cdc8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800cdcc:	d13a      	bne.n	800ce44 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800cdce:	2300      	movs	r3, #0
 800cdd0:	613b      	str	r3, [r7, #16]
 800cdd2:	4b1e      	ldr	r3, [pc, #120]	; (800ce4c <HAL_PCD_MspInit+0xa0>)
 800cdd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cdd6:	4a1d      	ldr	r2, [pc, #116]	; (800ce4c <HAL_PCD_MspInit+0xa0>)
 800cdd8:	f043 0301 	orr.w	r3, r3, #1
 800cddc:	6313      	str	r3, [r2, #48]	; 0x30
 800cdde:	4b1b      	ldr	r3, [pc, #108]	; (800ce4c <HAL_PCD_MspInit+0xa0>)
 800cde0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cde2:	f003 0301 	and.w	r3, r3, #1
 800cde6:	613b      	str	r3, [r7, #16]
 800cde8:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800cdea:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800cdee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800cdf0:	2302      	movs	r3, #2
 800cdf2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cdf4:	2300      	movs	r3, #0
 800cdf6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800cdf8:	2303      	movs	r3, #3
 800cdfa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800cdfc:	230a      	movs	r3, #10
 800cdfe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ce00:	f107 0314 	add.w	r3, r7, #20
 800ce04:	4619      	mov	r1, r3
 800ce06:	4812      	ldr	r0, [pc, #72]	; (800ce50 <HAL_PCD_MspInit+0xa4>)
 800ce08:	f7f9 f83e 	bl	8005e88 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800ce0c:	4b0f      	ldr	r3, [pc, #60]	; (800ce4c <HAL_PCD_MspInit+0xa0>)
 800ce0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ce10:	4a0e      	ldr	r2, [pc, #56]	; (800ce4c <HAL_PCD_MspInit+0xa0>)
 800ce12:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ce16:	6353      	str	r3, [r2, #52]	; 0x34
 800ce18:	2300      	movs	r3, #0
 800ce1a:	60fb      	str	r3, [r7, #12]
 800ce1c:	4b0b      	ldr	r3, [pc, #44]	; (800ce4c <HAL_PCD_MspInit+0xa0>)
 800ce1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ce20:	4a0a      	ldr	r2, [pc, #40]	; (800ce4c <HAL_PCD_MspInit+0xa0>)
 800ce22:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800ce26:	6453      	str	r3, [r2, #68]	; 0x44
 800ce28:	4b08      	ldr	r3, [pc, #32]	; (800ce4c <HAL_PCD_MspInit+0xa0>)
 800ce2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ce2c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ce30:	60fb      	str	r3, [r7, #12]
 800ce32:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800ce34:	2200      	movs	r2, #0
 800ce36:	2100      	movs	r1, #0
 800ce38:	2043      	movs	r0, #67	; 0x43
 800ce3a:	f7f8 fcfa 	bl	8005832 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800ce3e:	2043      	movs	r0, #67	; 0x43
 800ce40:	f7f8 fd13 	bl	800586a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800ce44:	bf00      	nop
 800ce46:	3728      	adds	r7, #40	; 0x28
 800ce48:	46bd      	mov	sp, r7
 800ce4a:	bd80      	pop	{r7, pc}
 800ce4c:	40023800 	.word	0x40023800
 800ce50:	40020000 	.word	0x40020000

0800ce54 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ce54:	b580      	push	{r7, lr}
 800ce56:	b082      	sub	sp, #8
 800ce58:	af00      	add	r7, sp, #0
 800ce5a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800ce5c:	687b      	ldr	r3, [r7, #4]
 800ce5e:	f8d3 23fc 	ldr.w	r2, [r3, #1020]	; 0x3fc
 800ce62:	687b      	ldr	r3, [r7, #4]
 800ce64:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800ce68:	4619      	mov	r1, r3
 800ce6a:	4610      	mov	r0, r2
 800ce6c:	f7fe fd51 	bl	800b912 <USBD_LL_SetupStage>
}
 800ce70:	bf00      	nop
 800ce72:	3708      	adds	r7, #8
 800ce74:	46bd      	mov	sp, r7
 800ce76:	bd80      	pop	{r7, pc}

0800ce78 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ce78:	b580      	push	{r7, lr}
 800ce7a:	b082      	sub	sp, #8
 800ce7c:	af00      	add	r7, sp, #0
 800ce7e:	6078      	str	r0, [r7, #4]
 800ce80:	460b      	mov	r3, r1
 800ce82:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800ce84:	687b      	ldr	r3, [r7, #4]
 800ce86:	f8d3 03fc 	ldr.w	r0, [r3, #1020]	; 0x3fc
 800ce8a:	78fa      	ldrb	r2, [r7, #3]
 800ce8c:	6879      	ldr	r1, [r7, #4]
 800ce8e:	4613      	mov	r3, r2
 800ce90:	00db      	lsls	r3, r3, #3
 800ce92:	1a9b      	subs	r3, r3, r2
 800ce94:	009b      	lsls	r3, r3, #2
 800ce96:	440b      	add	r3, r1
 800ce98:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800ce9c:	681a      	ldr	r2, [r3, #0]
 800ce9e:	78fb      	ldrb	r3, [r7, #3]
 800cea0:	4619      	mov	r1, r3
 800cea2:	f7fe fd83 	bl	800b9ac <USBD_LL_DataOutStage>
}
 800cea6:	bf00      	nop
 800cea8:	3708      	adds	r7, #8
 800ceaa:	46bd      	mov	sp, r7
 800ceac:	bd80      	pop	{r7, pc}

0800ceae <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ceae:	b580      	push	{r7, lr}
 800ceb0:	b082      	sub	sp, #8
 800ceb2:	af00      	add	r7, sp, #0
 800ceb4:	6078      	str	r0, [r7, #4]
 800ceb6:	460b      	mov	r3, r1
 800ceb8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800ceba:	687b      	ldr	r3, [r7, #4]
 800cebc:	f8d3 03fc 	ldr.w	r0, [r3, #1020]	; 0x3fc
 800cec0:	78fa      	ldrb	r2, [r7, #3]
 800cec2:	6879      	ldr	r1, [r7, #4]
 800cec4:	4613      	mov	r3, r2
 800cec6:	00db      	lsls	r3, r3, #3
 800cec8:	1a9b      	subs	r3, r3, r2
 800ceca:	009b      	lsls	r3, r3, #2
 800cecc:	440b      	add	r3, r1
 800cece:	3348      	adds	r3, #72	; 0x48
 800ced0:	681a      	ldr	r2, [r3, #0]
 800ced2:	78fb      	ldrb	r3, [r7, #3]
 800ced4:	4619      	mov	r1, r3
 800ced6:	f7fe fdda 	bl	800ba8e <USBD_LL_DataInStage>
}
 800ceda:	bf00      	nop
 800cedc:	3708      	adds	r7, #8
 800cede:	46bd      	mov	sp, r7
 800cee0:	bd80      	pop	{r7, pc}

0800cee2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cee2:	b580      	push	{r7, lr}
 800cee4:	b082      	sub	sp, #8
 800cee6:	af00      	add	r7, sp, #0
 800cee8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800ceea:	687b      	ldr	r3, [r7, #4]
 800ceec:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 800cef0:	4618      	mov	r0, r3
 800cef2:	f7fe feea 	bl	800bcca <USBD_LL_SOF>
}
 800cef6:	bf00      	nop
 800cef8:	3708      	adds	r7, #8
 800cefa:	46bd      	mov	sp, r7
 800cefc:	bd80      	pop	{r7, pc}

0800cefe <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cefe:	b580      	push	{r7, lr}
 800cf00:	b084      	sub	sp, #16
 800cf02:	af00      	add	r7, sp, #0
 800cf04:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800cf06:	2301      	movs	r3, #1
 800cf08:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800cf0a:	687b      	ldr	r3, [r7, #4]
 800cf0c:	68db      	ldr	r3, [r3, #12]
 800cf0e:	2b00      	cmp	r3, #0
 800cf10:	d102      	bne.n	800cf18 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800cf12:	2300      	movs	r3, #0
 800cf14:	73fb      	strb	r3, [r7, #15]
 800cf16:	e008      	b.n	800cf2a <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800cf18:	687b      	ldr	r3, [r7, #4]
 800cf1a:	68db      	ldr	r3, [r3, #12]
 800cf1c:	2b02      	cmp	r3, #2
 800cf1e:	d102      	bne.n	800cf26 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800cf20:	2301      	movs	r3, #1
 800cf22:	73fb      	strb	r3, [r7, #15]
 800cf24:	e001      	b.n	800cf2a <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800cf26:	f7f7 fa69 	bl	80043fc <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800cf2a:	687b      	ldr	r3, [r7, #4]
 800cf2c:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 800cf30:	7bfa      	ldrb	r2, [r7, #15]
 800cf32:	4611      	mov	r1, r2
 800cf34:	4618      	mov	r0, r3
 800cf36:	f7fe fe90 	bl	800bc5a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800cf3a:	687b      	ldr	r3, [r7, #4]
 800cf3c:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 800cf40:	4618      	mov	r0, r3
 800cf42:	f7fe fe49 	bl	800bbd8 <USBD_LL_Reset>
}
 800cf46:	bf00      	nop
 800cf48:	3710      	adds	r7, #16
 800cf4a:	46bd      	mov	sp, r7
 800cf4c:	bd80      	pop	{r7, pc}
	...

0800cf50 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cf50:	b580      	push	{r7, lr}
 800cf52:	b082      	sub	sp, #8
 800cf54:	af00      	add	r7, sp, #0
 800cf56:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800cf58:	687b      	ldr	r3, [r7, #4]
 800cf5a:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 800cf5e:	4618      	mov	r0, r3
 800cf60:	f7fe fe8a 	bl	800bc78 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800cf64:	687b      	ldr	r3, [r7, #4]
 800cf66:	681b      	ldr	r3, [r3, #0]
 800cf68:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800cf6c:	681b      	ldr	r3, [r3, #0]
 800cf6e:	687a      	ldr	r2, [r7, #4]
 800cf70:	6812      	ldr	r2, [r2, #0]
 800cf72:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800cf76:	f043 0301 	orr.w	r3, r3, #1
 800cf7a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800cf7c:	687b      	ldr	r3, [r7, #4]
 800cf7e:	6a1b      	ldr	r3, [r3, #32]
 800cf80:	2b00      	cmp	r3, #0
 800cf82:	d005      	beq.n	800cf90 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800cf84:	4b04      	ldr	r3, [pc, #16]	; (800cf98 <HAL_PCD_SuspendCallback+0x48>)
 800cf86:	691b      	ldr	r3, [r3, #16]
 800cf88:	4a03      	ldr	r2, [pc, #12]	; (800cf98 <HAL_PCD_SuspendCallback+0x48>)
 800cf8a:	f043 0306 	orr.w	r3, r3, #6
 800cf8e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800cf90:	bf00      	nop
 800cf92:	3708      	adds	r7, #8
 800cf94:	46bd      	mov	sp, r7
 800cf96:	bd80      	pop	{r7, pc}
 800cf98:	e000ed00 	.word	0xe000ed00

0800cf9c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cf9c:	b580      	push	{r7, lr}
 800cf9e:	b082      	sub	sp, #8
 800cfa0:	af00      	add	r7, sp, #0
 800cfa2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800cfa4:	687b      	ldr	r3, [r7, #4]
 800cfa6:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 800cfaa:	4618      	mov	r0, r3
 800cfac:	f7fe fe78 	bl	800bca0 <USBD_LL_Resume>
}
 800cfb0:	bf00      	nop
 800cfb2:	3708      	adds	r7, #8
 800cfb4:	46bd      	mov	sp, r7
 800cfb6:	bd80      	pop	{r7, pc}

0800cfb8 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cfb8:	b580      	push	{r7, lr}
 800cfba:	b082      	sub	sp, #8
 800cfbc:	af00      	add	r7, sp, #0
 800cfbe:	6078      	str	r0, [r7, #4]
 800cfc0:	460b      	mov	r3, r1
 800cfc2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800cfc4:	687b      	ldr	r3, [r7, #4]
 800cfc6:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 800cfca:	78fa      	ldrb	r2, [r7, #3]
 800cfcc:	4611      	mov	r1, r2
 800cfce:	4618      	mov	r0, r3
 800cfd0:	f7fe fea1 	bl	800bd16 <USBD_LL_IsoOUTIncomplete>
}
 800cfd4:	bf00      	nop
 800cfd6:	3708      	adds	r7, #8
 800cfd8:	46bd      	mov	sp, r7
 800cfda:	bd80      	pop	{r7, pc}

0800cfdc <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cfdc:	b580      	push	{r7, lr}
 800cfde:	b082      	sub	sp, #8
 800cfe0:	af00      	add	r7, sp, #0
 800cfe2:	6078      	str	r0, [r7, #4]
 800cfe4:	460b      	mov	r3, r1
 800cfe6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800cfe8:	687b      	ldr	r3, [r7, #4]
 800cfea:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 800cfee:	78fa      	ldrb	r2, [r7, #3]
 800cff0:	4611      	mov	r1, r2
 800cff2:	4618      	mov	r0, r3
 800cff4:	f7fe fe83 	bl	800bcfe <USBD_LL_IsoINIncomplete>
}
 800cff8:	bf00      	nop
 800cffa:	3708      	adds	r7, #8
 800cffc:	46bd      	mov	sp, r7
 800cffe:	bd80      	pop	{r7, pc}

0800d000 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d000:	b580      	push	{r7, lr}
 800d002:	b082      	sub	sp, #8
 800d004:	af00      	add	r7, sp, #0
 800d006:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800d008:	687b      	ldr	r3, [r7, #4]
 800d00a:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 800d00e:	4618      	mov	r0, r3
 800d010:	f7fe fe8d 	bl	800bd2e <USBD_LL_DevConnected>
}
 800d014:	bf00      	nop
 800d016:	3708      	adds	r7, #8
 800d018:	46bd      	mov	sp, r7
 800d01a:	bd80      	pop	{r7, pc}

0800d01c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d01c:	b580      	push	{r7, lr}
 800d01e:	b082      	sub	sp, #8
 800d020:	af00      	add	r7, sp, #0
 800d022:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800d024:	687b      	ldr	r3, [r7, #4]
 800d026:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 800d02a:	4618      	mov	r0, r3
 800d02c:	f7fe fe89 	bl	800bd42 <USBD_LL_DevDisconnected>
}
 800d030:	bf00      	nop
 800d032:	3708      	adds	r7, #8
 800d034:	46bd      	mov	sp, r7
 800d036:	bd80      	pop	{r7, pc}

0800d038 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800d038:	b580      	push	{r7, lr}
 800d03a:	b082      	sub	sp, #8
 800d03c:	af00      	add	r7, sp, #0
 800d03e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800d040:	687b      	ldr	r3, [r7, #4]
 800d042:	781b      	ldrb	r3, [r3, #0]
 800d044:	2b00      	cmp	r3, #0
 800d046:	d139      	bne.n	800d0bc <USBD_LL_Init+0x84>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800d048:	4a1f      	ldr	r2, [pc, #124]	; (800d0c8 <USBD_LL_Init+0x90>)
 800d04a:	687b      	ldr	r3, [r7, #4]
 800d04c:	f8c2 33fc 	str.w	r3, [r2, #1020]	; 0x3fc
  pdev->pData = &hpcd_USB_OTG_FS;
 800d050:	687b      	ldr	r3, [r7, #4]
 800d052:	4a1d      	ldr	r2, [pc, #116]	; (800d0c8 <USBD_LL_Init+0x90>)
 800d054:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800d058:	4b1b      	ldr	r3, [pc, #108]	; (800d0c8 <USBD_LL_Init+0x90>)
 800d05a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800d05e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800d060:	4b19      	ldr	r3, [pc, #100]	; (800d0c8 <USBD_LL_Init+0x90>)
 800d062:	2204      	movs	r2, #4
 800d064:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800d066:	4b18      	ldr	r3, [pc, #96]	; (800d0c8 <USBD_LL_Init+0x90>)
 800d068:	2202      	movs	r2, #2
 800d06a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800d06c:	4b16      	ldr	r3, [pc, #88]	; (800d0c8 <USBD_LL_Init+0x90>)
 800d06e:	2200      	movs	r2, #0
 800d070:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800d072:	4b15      	ldr	r3, [pc, #84]	; (800d0c8 <USBD_LL_Init+0x90>)
 800d074:	2202      	movs	r2, #2
 800d076:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800d078:	4b13      	ldr	r3, [pc, #76]	; (800d0c8 <USBD_LL_Init+0x90>)
 800d07a:	2200      	movs	r2, #0
 800d07c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800d07e:	4b12      	ldr	r3, [pc, #72]	; (800d0c8 <USBD_LL_Init+0x90>)
 800d080:	2200      	movs	r2, #0
 800d082:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800d084:	4b10      	ldr	r3, [pc, #64]	; (800d0c8 <USBD_LL_Init+0x90>)
 800d086:	2200      	movs	r2, #0
 800d088:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800d08a:	4b0f      	ldr	r3, [pc, #60]	; (800d0c8 <USBD_LL_Init+0x90>)
 800d08c:	2200      	movs	r2, #0
 800d08e:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800d090:	480d      	ldr	r0, [pc, #52]	; (800d0c8 <USBD_LL_Init+0x90>)
 800d092:	f7fa f89f 	bl	80071d4 <HAL_PCD_Init>
 800d096:	4603      	mov	r3, r0
 800d098:	2b00      	cmp	r3, #0
 800d09a:	d001      	beq.n	800d0a0 <USBD_LL_Init+0x68>
  {
    Error_Handler( );
 800d09c:	f7f7 f9ae 	bl	80043fc <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800d0a0:	2180      	movs	r1, #128	; 0x80
 800d0a2:	4809      	ldr	r0, [pc, #36]	; (800d0c8 <USBD_LL_Init+0x90>)
 800d0a4:	f7fb f9dc 	bl	8008460 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800d0a8:	2240      	movs	r2, #64	; 0x40
 800d0aa:	2100      	movs	r1, #0
 800d0ac:	4806      	ldr	r0, [pc, #24]	; (800d0c8 <USBD_LL_Init+0x90>)
 800d0ae:	f7fb f991 	bl	80083d4 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800d0b2:	2280      	movs	r2, #128	; 0x80
 800d0b4:	2101      	movs	r1, #1
 800d0b6:	4804      	ldr	r0, [pc, #16]	; (800d0c8 <USBD_LL_Init+0x90>)
 800d0b8:	f7fb f98c 	bl	80083d4 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800d0bc:	2300      	movs	r3, #0
}
 800d0be:	4618      	mov	r0, r3
 800d0c0:	3708      	adds	r7, #8
 800d0c2:	46bd      	mov	sp, r7
 800d0c4:	bd80      	pop	{r7, pc}
 800d0c6:	bf00      	nop
 800d0c8:	20001de4 	.word	0x20001de4

0800d0cc <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800d0cc:	b580      	push	{r7, lr}
 800d0ce:	b084      	sub	sp, #16
 800d0d0:	af00      	add	r7, sp, #0
 800d0d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d0d4:	2300      	movs	r3, #0
 800d0d6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d0d8:	2300      	movs	r3, #0
 800d0da:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800d0dc:	687b      	ldr	r3, [r7, #4]
 800d0de:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d0e2:	4618      	mov	r0, r3
 800d0e4:	f7fa f993 	bl	800740e <HAL_PCD_Start>
 800d0e8:	4603      	mov	r3, r0
 800d0ea:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d0ec:	7bfb      	ldrb	r3, [r7, #15]
 800d0ee:	4618      	mov	r0, r3
 800d0f0:	f000 f92e 	bl	800d350 <USBD_Get_USB_Status>
 800d0f4:	4603      	mov	r3, r0
 800d0f6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d0f8:	7bbb      	ldrb	r3, [r7, #14]
}
 800d0fa:	4618      	mov	r0, r3
 800d0fc:	3710      	adds	r7, #16
 800d0fe:	46bd      	mov	sp, r7
 800d100:	bd80      	pop	{r7, pc}

0800d102 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800d102:	b580      	push	{r7, lr}
 800d104:	b084      	sub	sp, #16
 800d106:	af00      	add	r7, sp, #0
 800d108:	6078      	str	r0, [r7, #4]
 800d10a:	4608      	mov	r0, r1
 800d10c:	4611      	mov	r1, r2
 800d10e:	461a      	mov	r2, r3
 800d110:	4603      	mov	r3, r0
 800d112:	70fb      	strb	r3, [r7, #3]
 800d114:	460b      	mov	r3, r1
 800d116:	70bb      	strb	r3, [r7, #2]
 800d118:	4613      	mov	r3, r2
 800d11a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d11c:	2300      	movs	r3, #0
 800d11e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d120:	2300      	movs	r3, #0
 800d122:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800d124:	687b      	ldr	r3, [r7, #4]
 800d126:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800d12a:	78bb      	ldrb	r3, [r7, #2]
 800d12c:	883a      	ldrh	r2, [r7, #0]
 800d12e:	78f9      	ldrb	r1, [r7, #3]
 800d130:	f7fa fd58 	bl	8007be4 <HAL_PCD_EP_Open>
 800d134:	4603      	mov	r3, r0
 800d136:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d138:	7bfb      	ldrb	r3, [r7, #15]
 800d13a:	4618      	mov	r0, r3
 800d13c:	f000 f908 	bl	800d350 <USBD_Get_USB_Status>
 800d140:	4603      	mov	r3, r0
 800d142:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d144:	7bbb      	ldrb	r3, [r7, #14]
}
 800d146:	4618      	mov	r0, r3
 800d148:	3710      	adds	r7, #16
 800d14a:	46bd      	mov	sp, r7
 800d14c:	bd80      	pop	{r7, pc}

0800d14e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d14e:	b580      	push	{r7, lr}
 800d150:	b084      	sub	sp, #16
 800d152:	af00      	add	r7, sp, #0
 800d154:	6078      	str	r0, [r7, #4]
 800d156:	460b      	mov	r3, r1
 800d158:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d15a:	2300      	movs	r3, #0
 800d15c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d15e:	2300      	movs	r3, #0
 800d160:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800d162:	687b      	ldr	r3, [r7, #4]
 800d164:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d168:	78fa      	ldrb	r2, [r7, #3]
 800d16a:	4611      	mov	r1, r2
 800d16c:	4618      	mov	r0, r3
 800d16e:	f7fa fda1 	bl	8007cb4 <HAL_PCD_EP_Close>
 800d172:	4603      	mov	r3, r0
 800d174:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d176:	7bfb      	ldrb	r3, [r7, #15]
 800d178:	4618      	mov	r0, r3
 800d17a:	f000 f8e9 	bl	800d350 <USBD_Get_USB_Status>
 800d17e:	4603      	mov	r3, r0
 800d180:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d182:	7bbb      	ldrb	r3, [r7, #14]
}
 800d184:	4618      	mov	r0, r3
 800d186:	3710      	adds	r7, #16
 800d188:	46bd      	mov	sp, r7
 800d18a:	bd80      	pop	{r7, pc}

0800d18c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d18c:	b580      	push	{r7, lr}
 800d18e:	b084      	sub	sp, #16
 800d190:	af00      	add	r7, sp, #0
 800d192:	6078      	str	r0, [r7, #4]
 800d194:	460b      	mov	r3, r1
 800d196:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d198:	2300      	movs	r3, #0
 800d19a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d19c:	2300      	movs	r3, #0
 800d19e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800d1a0:	687b      	ldr	r3, [r7, #4]
 800d1a2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d1a6:	78fa      	ldrb	r2, [r7, #3]
 800d1a8:	4611      	mov	r1, r2
 800d1aa:	4618      	mov	r0, r3
 800d1ac:	f7fa fe78 	bl	8007ea0 <HAL_PCD_EP_SetStall>
 800d1b0:	4603      	mov	r3, r0
 800d1b2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d1b4:	7bfb      	ldrb	r3, [r7, #15]
 800d1b6:	4618      	mov	r0, r3
 800d1b8:	f000 f8ca 	bl	800d350 <USBD_Get_USB_Status>
 800d1bc:	4603      	mov	r3, r0
 800d1be:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d1c0:	7bbb      	ldrb	r3, [r7, #14]
}
 800d1c2:	4618      	mov	r0, r3
 800d1c4:	3710      	adds	r7, #16
 800d1c6:	46bd      	mov	sp, r7
 800d1c8:	bd80      	pop	{r7, pc}

0800d1ca <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d1ca:	b580      	push	{r7, lr}
 800d1cc:	b084      	sub	sp, #16
 800d1ce:	af00      	add	r7, sp, #0
 800d1d0:	6078      	str	r0, [r7, #4]
 800d1d2:	460b      	mov	r3, r1
 800d1d4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d1d6:	2300      	movs	r3, #0
 800d1d8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d1da:	2300      	movs	r3, #0
 800d1dc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800d1de:	687b      	ldr	r3, [r7, #4]
 800d1e0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d1e4:	78fa      	ldrb	r2, [r7, #3]
 800d1e6:	4611      	mov	r1, r2
 800d1e8:	4618      	mov	r0, r3
 800d1ea:	f7fa febd 	bl	8007f68 <HAL_PCD_EP_ClrStall>
 800d1ee:	4603      	mov	r3, r0
 800d1f0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d1f2:	7bfb      	ldrb	r3, [r7, #15]
 800d1f4:	4618      	mov	r0, r3
 800d1f6:	f000 f8ab 	bl	800d350 <USBD_Get_USB_Status>
 800d1fa:	4603      	mov	r3, r0
 800d1fc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d1fe:	7bbb      	ldrb	r3, [r7, #14]
}
 800d200:	4618      	mov	r0, r3
 800d202:	3710      	adds	r7, #16
 800d204:	46bd      	mov	sp, r7
 800d206:	bd80      	pop	{r7, pc}

0800d208 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d208:	b480      	push	{r7}
 800d20a:	b085      	sub	sp, #20
 800d20c:	af00      	add	r7, sp, #0
 800d20e:	6078      	str	r0, [r7, #4]
 800d210:	460b      	mov	r3, r1
 800d212:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800d214:	687b      	ldr	r3, [r7, #4]
 800d216:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d21a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800d21c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800d220:	2b00      	cmp	r3, #0
 800d222:	da0b      	bge.n	800d23c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800d224:	78fb      	ldrb	r3, [r7, #3]
 800d226:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800d22a:	68f9      	ldr	r1, [r7, #12]
 800d22c:	4613      	mov	r3, r2
 800d22e:	00db      	lsls	r3, r3, #3
 800d230:	1a9b      	subs	r3, r3, r2
 800d232:	009b      	lsls	r3, r3, #2
 800d234:	440b      	add	r3, r1
 800d236:	333e      	adds	r3, #62	; 0x3e
 800d238:	781b      	ldrb	r3, [r3, #0]
 800d23a:	e00b      	b.n	800d254 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800d23c:	78fb      	ldrb	r3, [r7, #3]
 800d23e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800d242:	68f9      	ldr	r1, [r7, #12]
 800d244:	4613      	mov	r3, r2
 800d246:	00db      	lsls	r3, r3, #3
 800d248:	1a9b      	subs	r3, r3, r2
 800d24a:	009b      	lsls	r3, r3, #2
 800d24c:	440b      	add	r3, r1
 800d24e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800d252:	781b      	ldrb	r3, [r3, #0]
  }
}
 800d254:	4618      	mov	r0, r3
 800d256:	3714      	adds	r7, #20
 800d258:	46bd      	mov	sp, r7
 800d25a:	bc80      	pop	{r7}
 800d25c:	4770      	bx	lr

0800d25e <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800d25e:	b580      	push	{r7, lr}
 800d260:	b084      	sub	sp, #16
 800d262:	af00      	add	r7, sp, #0
 800d264:	6078      	str	r0, [r7, #4]
 800d266:	460b      	mov	r3, r1
 800d268:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d26a:	2300      	movs	r3, #0
 800d26c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d26e:	2300      	movs	r3, #0
 800d270:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800d272:	687b      	ldr	r3, [r7, #4]
 800d274:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d278:	78fa      	ldrb	r2, [r7, #3]
 800d27a:	4611      	mov	r1, r2
 800d27c:	4618      	mov	r0, r3
 800d27e:	f7fa fc8c 	bl	8007b9a <HAL_PCD_SetAddress>
 800d282:	4603      	mov	r3, r0
 800d284:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d286:	7bfb      	ldrb	r3, [r7, #15]
 800d288:	4618      	mov	r0, r3
 800d28a:	f000 f861 	bl	800d350 <USBD_Get_USB_Status>
 800d28e:	4603      	mov	r3, r0
 800d290:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d292:	7bbb      	ldrb	r3, [r7, #14]
}
 800d294:	4618      	mov	r0, r3
 800d296:	3710      	adds	r7, #16
 800d298:	46bd      	mov	sp, r7
 800d29a:	bd80      	pop	{r7, pc}

0800d29c <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800d29c:	b580      	push	{r7, lr}
 800d29e:	b086      	sub	sp, #24
 800d2a0:	af00      	add	r7, sp, #0
 800d2a2:	60f8      	str	r0, [r7, #12]
 800d2a4:	607a      	str	r2, [r7, #4]
 800d2a6:	461a      	mov	r2, r3
 800d2a8:	460b      	mov	r3, r1
 800d2aa:	72fb      	strb	r3, [r7, #11]
 800d2ac:	4613      	mov	r3, r2
 800d2ae:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d2b0:	2300      	movs	r3, #0
 800d2b2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d2b4:	2300      	movs	r3, #0
 800d2b6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800d2b8:	68fb      	ldr	r3, [r7, #12]
 800d2ba:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800d2be:	893b      	ldrh	r3, [r7, #8]
 800d2c0:	7af9      	ldrb	r1, [r7, #11]
 800d2c2:	687a      	ldr	r2, [r7, #4]
 800d2c4:	f7fa fda2 	bl	8007e0c <HAL_PCD_EP_Transmit>
 800d2c8:	4603      	mov	r3, r0
 800d2ca:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d2cc:	7dfb      	ldrb	r3, [r7, #23]
 800d2ce:	4618      	mov	r0, r3
 800d2d0:	f000 f83e 	bl	800d350 <USBD_Get_USB_Status>
 800d2d4:	4603      	mov	r3, r0
 800d2d6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800d2d8:	7dbb      	ldrb	r3, [r7, #22]
}
 800d2da:	4618      	mov	r0, r3
 800d2dc:	3718      	adds	r7, #24
 800d2de:	46bd      	mov	sp, r7
 800d2e0:	bd80      	pop	{r7, pc}

0800d2e2 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800d2e2:	b580      	push	{r7, lr}
 800d2e4:	b086      	sub	sp, #24
 800d2e6:	af00      	add	r7, sp, #0
 800d2e8:	60f8      	str	r0, [r7, #12]
 800d2ea:	607a      	str	r2, [r7, #4]
 800d2ec:	461a      	mov	r2, r3
 800d2ee:	460b      	mov	r3, r1
 800d2f0:	72fb      	strb	r3, [r7, #11]
 800d2f2:	4613      	mov	r3, r2
 800d2f4:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d2f6:	2300      	movs	r3, #0
 800d2f8:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d2fa:	2300      	movs	r3, #0
 800d2fc:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800d2fe:	68fb      	ldr	r3, [r7, #12]
 800d300:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800d304:	893b      	ldrh	r3, [r7, #8]
 800d306:	7af9      	ldrb	r1, [r7, #11]
 800d308:	687a      	ldr	r2, [r7, #4]
 800d30a:	f7fa fd1d 	bl	8007d48 <HAL_PCD_EP_Receive>
 800d30e:	4603      	mov	r3, r0
 800d310:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d312:	7dfb      	ldrb	r3, [r7, #23]
 800d314:	4618      	mov	r0, r3
 800d316:	f000 f81b 	bl	800d350 <USBD_Get_USB_Status>
 800d31a:	4603      	mov	r3, r0
 800d31c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800d31e:	7dbb      	ldrb	r3, [r7, #22]
}
 800d320:	4618      	mov	r0, r3
 800d322:	3718      	adds	r7, #24
 800d324:	46bd      	mov	sp, r7
 800d326:	bd80      	pop	{r7, pc}

0800d328 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d328:	b580      	push	{r7, lr}
 800d32a:	b082      	sub	sp, #8
 800d32c:	af00      	add	r7, sp, #0
 800d32e:	6078      	str	r0, [r7, #4]
 800d330:	460b      	mov	r3, r1
 800d332:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800d334:	687b      	ldr	r3, [r7, #4]
 800d336:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d33a:	78fa      	ldrb	r2, [r7, #3]
 800d33c:	4611      	mov	r1, r2
 800d33e:	4618      	mov	r0, r3
 800d340:	f7fa fd4d 	bl	8007dde <HAL_PCD_EP_GetRxCount>
 800d344:	4603      	mov	r3, r0
}
 800d346:	4618      	mov	r0, r3
 800d348:	3708      	adds	r7, #8
 800d34a:	46bd      	mov	sp, r7
 800d34c:	bd80      	pop	{r7, pc}
	...

0800d350 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800d350:	b480      	push	{r7}
 800d352:	b085      	sub	sp, #20
 800d354:	af00      	add	r7, sp, #0
 800d356:	4603      	mov	r3, r0
 800d358:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d35a:	2300      	movs	r3, #0
 800d35c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800d35e:	79fb      	ldrb	r3, [r7, #7]
 800d360:	2b03      	cmp	r3, #3
 800d362:	d817      	bhi.n	800d394 <USBD_Get_USB_Status+0x44>
 800d364:	a201      	add	r2, pc, #4	; (adr r2, 800d36c <USBD_Get_USB_Status+0x1c>)
 800d366:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d36a:	bf00      	nop
 800d36c:	0800d37d 	.word	0x0800d37d
 800d370:	0800d383 	.word	0x0800d383
 800d374:	0800d389 	.word	0x0800d389
 800d378:	0800d38f 	.word	0x0800d38f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800d37c:	2300      	movs	r3, #0
 800d37e:	73fb      	strb	r3, [r7, #15]
    break;
 800d380:	e00b      	b.n	800d39a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800d382:	2302      	movs	r3, #2
 800d384:	73fb      	strb	r3, [r7, #15]
    break;
 800d386:	e008      	b.n	800d39a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800d388:	2301      	movs	r3, #1
 800d38a:	73fb      	strb	r3, [r7, #15]
    break;
 800d38c:	e005      	b.n	800d39a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800d38e:	2302      	movs	r3, #2
 800d390:	73fb      	strb	r3, [r7, #15]
    break;
 800d392:	e002      	b.n	800d39a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800d394:	2302      	movs	r3, #2
 800d396:	73fb      	strb	r3, [r7, #15]
    break;
 800d398:	bf00      	nop
  }
  return usb_status;
 800d39a:	7bfb      	ldrb	r3, [r7, #15]
}
 800d39c:	4618      	mov	r0, r3
 800d39e:	3714      	adds	r7, #20
 800d3a0:	46bd      	mov	sp, r7
 800d3a2:	bc80      	pop	{r7}
 800d3a4:	4770      	bx	lr
 800d3a6:	bf00      	nop

0800d3a8 <cos>:
 800d3a8:	b530      	push	{r4, r5, lr}
 800d3aa:	4a1e      	ldr	r2, [pc, #120]	; (800d424 <cos+0x7c>)
 800d3ac:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800d3b0:	4293      	cmp	r3, r2
 800d3b2:	b087      	sub	sp, #28
 800d3b4:	dc04      	bgt.n	800d3c0 <cos+0x18>
 800d3b6:	2200      	movs	r2, #0
 800d3b8:	2300      	movs	r3, #0
 800d3ba:	f001 f8ad 	bl	800e518 <__kernel_cos>
 800d3be:	e006      	b.n	800d3ce <cos+0x26>
 800d3c0:	4a19      	ldr	r2, [pc, #100]	; (800d428 <cos+0x80>)
 800d3c2:	4293      	cmp	r3, r2
 800d3c4:	dd05      	ble.n	800d3d2 <cos+0x2a>
 800d3c6:	4602      	mov	r2, r0
 800d3c8:	460b      	mov	r3, r1
 800d3ca:	f7f2 ff09 	bl	80001e0 <__aeabi_dsub>
 800d3ce:	b007      	add	sp, #28
 800d3d0:	bd30      	pop	{r4, r5, pc}
 800d3d2:	aa02      	add	r2, sp, #8
 800d3d4:	f000 fa58 	bl	800d888 <__ieee754_rem_pio2>
 800d3d8:	f000 0003 	and.w	r0, r0, #3
 800d3dc:	2801      	cmp	r0, #1
 800d3de:	d007      	beq.n	800d3f0 <cos+0x48>
 800d3e0:	2802      	cmp	r0, #2
 800d3e2:	d00f      	beq.n	800d404 <cos+0x5c>
 800d3e4:	b9a8      	cbnz	r0, 800d412 <cos+0x6a>
 800d3e6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d3ea:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d3ee:	e7e4      	b.n	800d3ba <cos+0x12>
 800d3f0:	9000      	str	r0, [sp, #0]
 800d3f2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d3f6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d3fa:	f001 fc95 	bl	800ed28 <__kernel_sin>
 800d3fe:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 800d402:	e7e4      	b.n	800d3ce <cos+0x26>
 800d404:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d408:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d40c:	f001 f884 	bl	800e518 <__kernel_cos>
 800d410:	e7f5      	b.n	800d3fe <cos+0x56>
 800d412:	2301      	movs	r3, #1
 800d414:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d418:	9300      	str	r3, [sp, #0]
 800d41a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d41e:	f001 fc83 	bl	800ed28 <__kernel_sin>
 800d422:	e7d4      	b.n	800d3ce <cos+0x26>
 800d424:	3fe921fb 	.word	0x3fe921fb
 800d428:	7fefffff 	.word	0x7fefffff

0800d42c <sin>:
 800d42c:	b530      	push	{r4, r5, lr}
 800d42e:	4a20      	ldr	r2, [pc, #128]	; (800d4b0 <sin+0x84>)
 800d430:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800d434:	4293      	cmp	r3, r2
 800d436:	b087      	sub	sp, #28
 800d438:	dc06      	bgt.n	800d448 <sin+0x1c>
 800d43a:	2300      	movs	r3, #0
 800d43c:	2200      	movs	r2, #0
 800d43e:	9300      	str	r3, [sp, #0]
 800d440:	2300      	movs	r3, #0
 800d442:	f001 fc71 	bl	800ed28 <__kernel_sin>
 800d446:	e006      	b.n	800d456 <sin+0x2a>
 800d448:	4a1a      	ldr	r2, [pc, #104]	; (800d4b4 <sin+0x88>)
 800d44a:	4293      	cmp	r3, r2
 800d44c:	dd05      	ble.n	800d45a <sin+0x2e>
 800d44e:	4602      	mov	r2, r0
 800d450:	460b      	mov	r3, r1
 800d452:	f7f2 fec5 	bl	80001e0 <__aeabi_dsub>
 800d456:	b007      	add	sp, #28
 800d458:	bd30      	pop	{r4, r5, pc}
 800d45a:	aa02      	add	r2, sp, #8
 800d45c:	f000 fa14 	bl	800d888 <__ieee754_rem_pio2>
 800d460:	f000 0003 	and.w	r0, r0, #3
 800d464:	2801      	cmp	r0, #1
 800d466:	d009      	beq.n	800d47c <sin+0x50>
 800d468:	2802      	cmp	r0, #2
 800d46a:	d00e      	beq.n	800d48a <sin+0x5e>
 800d46c:	b9c0      	cbnz	r0, 800d4a0 <sin+0x74>
 800d46e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d472:	2301      	movs	r3, #1
 800d474:	9300      	str	r3, [sp, #0]
 800d476:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d47a:	e7e2      	b.n	800d442 <sin+0x16>
 800d47c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d480:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d484:	f001 f848 	bl	800e518 <__kernel_cos>
 800d488:	e7e5      	b.n	800d456 <sin+0x2a>
 800d48a:	2301      	movs	r3, #1
 800d48c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d490:	9300      	str	r3, [sp, #0]
 800d492:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d496:	f001 fc47 	bl	800ed28 <__kernel_sin>
 800d49a:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 800d49e:	e7da      	b.n	800d456 <sin+0x2a>
 800d4a0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d4a4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d4a8:	f001 f836 	bl	800e518 <__kernel_cos>
 800d4ac:	e7f5      	b.n	800d49a <sin+0x6e>
 800d4ae:	bf00      	nop
 800d4b0:	3fe921fb 	.word	0x3fe921fb
 800d4b4:	7fefffff 	.word	0x7fefffff

0800d4b8 <atanf>:
 800d4b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d4bc:	f020 4500 	bic.w	r5, r0, #2147483648	; 0x80000000
 800d4c0:	f1b5 4fa1 	cmp.w	r5, #1350565888	; 0x50800000
 800d4c4:	4604      	mov	r4, r0
 800d4c6:	4680      	mov	r8, r0
 800d4c8:	db0e      	blt.n	800d4e8 <atanf+0x30>
 800d4ca:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 800d4ce:	dd04      	ble.n	800d4da <atanf+0x22>
 800d4d0:	4601      	mov	r1, r0
 800d4d2:	f7f3 fb6b 	bl	8000bac <__addsf3>
 800d4d6:	4604      	mov	r4, r0
 800d4d8:	e003      	b.n	800d4e2 <atanf+0x2a>
 800d4da:	2800      	cmp	r0, #0
 800d4dc:	f300 80ce 	bgt.w	800d67c <atanf+0x1c4>
 800d4e0:	4c67      	ldr	r4, [pc, #412]	; (800d680 <atanf+0x1c8>)
 800d4e2:	4620      	mov	r0, r4
 800d4e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d4e8:	4b66      	ldr	r3, [pc, #408]	; (800d684 <atanf+0x1cc>)
 800d4ea:	429d      	cmp	r5, r3
 800d4ec:	dc0e      	bgt.n	800d50c <atanf+0x54>
 800d4ee:	f1b5 5f44 	cmp.w	r5, #822083584	; 0x31000000
 800d4f2:	da08      	bge.n	800d506 <atanf+0x4e>
 800d4f4:	4964      	ldr	r1, [pc, #400]	; (800d688 <atanf+0x1d0>)
 800d4f6:	f7f3 fb59 	bl	8000bac <__addsf3>
 800d4fa:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800d4fe:	f7f3 fe19 	bl	8001134 <__aeabi_fcmpgt>
 800d502:	2800      	cmp	r0, #0
 800d504:	d1ed      	bne.n	800d4e2 <atanf+0x2a>
 800d506:	f04f 36ff 	mov.w	r6, #4294967295
 800d50a:	e01c      	b.n	800d546 <atanf+0x8e>
 800d50c:	f000 f914 	bl	800d738 <fabsf>
 800d510:	4b5e      	ldr	r3, [pc, #376]	; (800d68c <atanf+0x1d4>)
 800d512:	4604      	mov	r4, r0
 800d514:	429d      	cmp	r5, r3
 800d516:	dc7c      	bgt.n	800d612 <atanf+0x15a>
 800d518:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 800d51c:	429d      	cmp	r5, r3
 800d51e:	dc67      	bgt.n	800d5f0 <atanf+0x138>
 800d520:	4601      	mov	r1, r0
 800d522:	f7f3 fb43 	bl	8000bac <__addsf3>
 800d526:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800d52a:	f7f3 fb3d 	bl	8000ba8 <__aeabi_fsub>
 800d52e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800d532:	4605      	mov	r5, r0
 800d534:	4620      	mov	r0, r4
 800d536:	f7f3 fb39 	bl	8000bac <__addsf3>
 800d53a:	4601      	mov	r1, r0
 800d53c:	4628      	mov	r0, r5
 800d53e:	f7f3 fcf1 	bl	8000f24 <__aeabi_fdiv>
 800d542:	2600      	movs	r6, #0
 800d544:	4604      	mov	r4, r0
 800d546:	4621      	mov	r1, r4
 800d548:	4620      	mov	r0, r4
 800d54a:	f7f3 fc37 	bl	8000dbc <__aeabi_fmul>
 800d54e:	4601      	mov	r1, r0
 800d550:	4607      	mov	r7, r0
 800d552:	f7f3 fc33 	bl	8000dbc <__aeabi_fmul>
 800d556:	4605      	mov	r5, r0
 800d558:	494d      	ldr	r1, [pc, #308]	; (800d690 <atanf+0x1d8>)
 800d55a:	f7f3 fc2f 	bl	8000dbc <__aeabi_fmul>
 800d55e:	494d      	ldr	r1, [pc, #308]	; (800d694 <atanf+0x1dc>)
 800d560:	f7f3 fb24 	bl	8000bac <__addsf3>
 800d564:	4629      	mov	r1, r5
 800d566:	f7f3 fc29 	bl	8000dbc <__aeabi_fmul>
 800d56a:	494b      	ldr	r1, [pc, #300]	; (800d698 <atanf+0x1e0>)
 800d56c:	f7f3 fb1e 	bl	8000bac <__addsf3>
 800d570:	4629      	mov	r1, r5
 800d572:	f7f3 fc23 	bl	8000dbc <__aeabi_fmul>
 800d576:	4949      	ldr	r1, [pc, #292]	; (800d69c <atanf+0x1e4>)
 800d578:	f7f3 fb18 	bl	8000bac <__addsf3>
 800d57c:	4629      	mov	r1, r5
 800d57e:	f7f3 fc1d 	bl	8000dbc <__aeabi_fmul>
 800d582:	4947      	ldr	r1, [pc, #284]	; (800d6a0 <atanf+0x1e8>)
 800d584:	f7f3 fb12 	bl	8000bac <__addsf3>
 800d588:	4629      	mov	r1, r5
 800d58a:	f7f3 fc17 	bl	8000dbc <__aeabi_fmul>
 800d58e:	4945      	ldr	r1, [pc, #276]	; (800d6a4 <atanf+0x1ec>)
 800d590:	f7f3 fb0c 	bl	8000bac <__addsf3>
 800d594:	4639      	mov	r1, r7
 800d596:	f7f3 fc11 	bl	8000dbc <__aeabi_fmul>
 800d59a:	4943      	ldr	r1, [pc, #268]	; (800d6a8 <atanf+0x1f0>)
 800d59c:	4607      	mov	r7, r0
 800d59e:	4628      	mov	r0, r5
 800d5a0:	f7f3 fc0c 	bl	8000dbc <__aeabi_fmul>
 800d5a4:	4941      	ldr	r1, [pc, #260]	; (800d6ac <atanf+0x1f4>)
 800d5a6:	f7f3 faff 	bl	8000ba8 <__aeabi_fsub>
 800d5aa:	4629      	mov	r1, r5
 800d5ac:	f7f3 fc06 	bl	8000dbc <__aeabi_fmul>
 800d5b0:	493f      	ldr	r1, [pc, #252]	; (800d6b0 <atanf+0x1f8>)
 800d5b2:	f7f3 faf9 	bl	8000ba8 <__aeabi_fsub>
 800d5b6:	4629      	mov	r1, r5
 800d5b8:	f7f3 fc00 	bl	8000dbc <__aeabi_fmul>
 800d5bc:	493d      	ldr	r1, [pc, #244]	; (800d6b4 <atanf+0x1fc>)
 800d5be:	f7f3 faf3 	bl	8000ba8 <__aeabi_fsub>
 800d5c2:	4629      	mov	r1, r5
 800d5c4:	f7f3 fbfa 	bl	8000dbc <__aeabi_fmul>
 800d5c8:	493b      	ldr	r1, [pc, #236]	; (800d6b8 <atanf+0x200>)
 800d5ca:	f7f3 faed 	bl	8000ba8 <__aeabi_fsub>
 800d5ce:	4629      	mov	r1, r5
 800d5d0:	f7f3 fbf4 	bl	8000dbc <__aeabi_fmul>
 800d5d4:	4601      	mov	r1, r0
 800d5d6:	4638      	mov	r0, r7
 800d5d8:	f7f3 fae8 	bl	8000bac <__addsf3>
 800d5dc:	4621      	mov	r1, r4
 800d5de:	f7f3 fbed 	bl	8000dbc <__aeabi_fmul>
 800d5e2:	1c73      	adds	r3, r6, #1
 800d5e4:	4601      	mov	r1, r0
 800d5e6:	d133      	bne.n	800d650 <atanf+0x198>
 800d5e8:	4620      	mov	r0, r4
 800d5ea:	f7f3 fadd 	bl	8000ba8 <__aeabi_fsub>
 800d5ee:	e772      	b.n	800d4d6 <atanf+0x1e>
 800d5f0:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800d5f4:	f7f3 fad8 	bl	8000ba8 <__aeabi_fsub>
 800d5f8:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800d5fc:	4605      	mov	r5, r0
 800d5fe:	4620      	mov	r0, r4
 800d600:	f7f3 fad4 	bl	8000bac <__addsf3>
 800d604:	4601      	mov	r1, r0
 800d606:	4628      	mov	r0, r5
 800d608:	f7f3 fc8c 	bl	8000f24 <__aeabi_fdiv>
 800d60c:	2601      	movs	r6, #1
 800d60e:	4604      	mov	r4, r0
 800d610:	e799      	b.n	800d546 <atanf+0x8e>
 800d612:	4b2a      	ldr	r3, [pc, #168]	; (800d6bc <atanf+0x204>)
 800d614:	429d      	cmp	r5, r3
 800d616:	dc14      	bgt.n	800d642 <atanf+0x18a>
 800d618:	f04f 517f 	mov.w	r1, #1069547520	; 0x3fc00000
 800d61c:	f7f3 fac4 	bl	8000ba8 <__aeabi_fsub>
 800d620:	f04f 517f 	mov.w	r1, #1069547520	; 0x3fc00000
 800d624:	4605      	mov	r5, r0
 800d626:	4620      	mov	r0, r4
 800d628:	f7f3 fbc8 	bl	8000dbc <__aeabi_fmul>
 800d62c:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800d630:	f7f3 fabc 	bl	8000bac <__addsf3>
 800d634:	4601      	mov	r1, r0
 800d636:	4628      	mov	r0, r5
 800d638:	f7f3 fc74 	bl	8000f24 <__aeabi_fdiv>
 800d63c:	2602      	movs	r6, #2
 800d63e:	4604      	mov	r4, r0
 800d640:	e781      	b.n	800d546 <atanf+0x8e>
 800d642:	4601      	mov	r1, r0
 800d644:	481e      	ldr	r0, [pc, #120]	; (800d6c0 <atanf+0x208>)
 800d646:	f7f3 fc6d 	bl	8000f24 <__aeabi_fdiv>
 800d64a:	2603      	movs	r6, #3
 800d64c:	4604      	mov	r4, r0
 800d64e:	e77a      	b.n	800d546 <atanf+0x8e>
 800d650:	4b1c      	ldr	r3, [pc, #112]	; (800d6c4 <atanf+0x20c>)
 800d652:	f853 1026 	ldr.w	r1, [r3, r6, lsl #2]
 800d656:	f7f3 faa7 	bl	8000ba8 <__aeabi_fsub>
 800d65a:	4621      	mov	r1, r4
 800d65c:	f7f3 faa4 	bl	8000ba8 <__aeabi_fsub>
 800d660:	4b19      	ldr	r3, [pc, #100]	; (800d6c8 <atanf+0x210>)
 800d662:	4601      	mov	r1, r0
 800d664:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800d668:	f7f3 fa9e 	bl	8000ba8 <__aeabi_fsub>
 800d66c:	f1b8 0f00 	cmp.w	r8, #0
 800d670:	4604      	mov	r4, r0
 800d672:	f6bf af36 	bge.w	800d4e2 <atanf+0x2a>
 800d676:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800d67a:	e72c      	b.n	800d4d6 <atanf+0x1e>
 800d67c:	4c13      	ldr	r4, [pc, #76]	; (800d6cc <atanf+0x214>)
 800d67e:	e730      	b.n	800d4e2 <atanf+0x2a>
 800d680:	bfc90fdb 	.word	0xbfc90fdb
 800d684:	3edfffff 	.word	0x3edfffff
 800d688:	7149f2ca 	.word	0x7149f2ca
 800d68c:	3f97ffff 	.word	0x3f97ffff
 800d690:	3c8569d7 	.word	0x3c8569d7
 800d694:	3d4bda59 	.word	0x3d4bda59
 800d698:	3d886b35 	.word	0x3d886b35
 800d69c:	3dba2e6e 	.word	0x3dba2e6e
 800d6a0:	3e124925 	.word	0x3e124925
 800d6a4:	3eaaaaab 	.word	0x3eaaaaab
 800d6a8:	bd15a221 	.word	0xbd15a221
 800d6ac:	3d6ef16b 	.word	0x3d6ef16b
 800d6b0:	3d9d8795 	.word	0x3d9d8795
 800d6b4:	3de38e38 	.word	0x3de38e38
 800d6b8:	3e4ccccd 	.word	0x3e4ccccd
 800d6bc:	401bffff 	.word	0x401bffff
 800d6c0:	bf800000 	.word	0xbf800000
 800d6c4:	08013038 	.word	0x08013038
 800d6c8:	08013028 	.word	0x08013028
 800d6cc:	3fc90fdb 	.word	0x3fc90fdb

0800d6d0 <cosf>:
 800d6d0:	b507      	push	{r0, r1, r2, lr}
 800d6d2:	4a18      	ldr	r2, [pc, #96]	; (800d734 <cosf+0x64>)
 800d6d4:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 800d6d8:	4293      	cmp	r3, r2
 800d6da:	4601      	mov	r1, r0
 800d6dc:	dc03      	bgt.n	800d6e6 <cosf+0x16>
 800d6de:	2100      	movs	r1, #0
 800d6e0:	f001 fbd8 	bl	800ee94 <__kernel_cosf>
 800d6e4:	e004      	b.n	800d6f0 <cosf+0x20>
 800d6e6:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800d6ea:	db04      	blt.n	800d6f6 <cosf+0x26>
 800d6ec:	f7f3 fa5c 	bl	8000ba8 <__aeabi_fsub>
 800d6f0:	b003      	add	sp, #12
 800d6f2:	f85d fb04 	ldr.w	pc, [sp], #4
 800d6f6:	4669      	mov	r1, sp
 800d6f8:	f000 fd5c 	bl	800e1b4 <__ieee754_rem_pio2f>
 800d6fc:	f000 0203 	and.w	r2, r0, #3
 800d700:	2a01      	cmp	r2, #1
 800d702:	d005      	beq.n	800d710 <cosf+0x40>
 800d704:	2a02      	cmp	r2, #2
 800d706:	d00a      	beq.n	800d71e <cosf+0x4e>
 800d708:	b972      	cbnz	r2, 800d728 <cosf+0x58>
 800d70a:	9901      	ldr	r1, [sp, #4]
 800d70c:	9800      	ldr	r0, [sp, #0]
 800d70e:	e7e7      	b.n	800d6e0 <cosf+0x10>
 800d710:	9901      	ldr	r1, [sp, #4]
 800d712:	9800      	ldr	r0, [sp, #0]
 800d714:	f001 fef4 	bl	800f500 <__kernel_sinf>
 800d718:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800d71c:	e7e8      	b.n	800d6f0 <cosf+0x20>
 800d71e:	9901      	ldr	r1, [sp, #4]
 800d720:	9800      	ldr	r0, [sp, #0]
 800d722:	f001 fbb7 	bl	800ee94 <__kernel_cosf>
 800d726:	e7f7      	b.n	800d718 <cosf+0x48>
 800d728:	2201      	movs	r2, #1
 800d72a:	9901      	ldr	r1, [sp, #4]
 800d72c:	9800      	ldr	r0, [sp, #0]
 800d72e:	f001 fee7 	bl	800f500 <__kernel_sinf>
 800d732:	e7dd      	b.n	800d6f0 <cosf+0x20>
 800d734:	3f490fd8 	.word	0x3f490fd8

0800d738 <fabsf>:
 800d738:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800d73c:	4770      	bx	lr
	...

0800d740 <sinf>:
 800d740:	b507      	push	{r0, r1, r2, lr}
 800d742:	4a19      	ldr	r2, [pc, #100]	; (800d7a8 <sinf+0x68>)
 800d744:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 800d748:	4293      	cmp	r3, r2
 800d74a:	4601      	mov	r1, r0
 800d74c:	dc04      	bgt.n	800d758 <sinf+0x18>
 800d74e:	2200      	movs	r2, #0
 800d750:	2100      	movs	r1, #0
 800d752:	f001 fed5 	bl	800f500 <__kernel_sinf>
 800d756:	e004      	b.n	800d762 <sinf+0x22>
 800d758:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800d75c:	db04      	blt.n	800d768 <sinf+0x28>
 800d75e:	f7f3 fa23 	bl	8000ba8 <__aeabi_fsub>
 800d762:	b003      	add	sp, #12
 800d764:	f85d fb04 	ldr.w	pc, [sp], #4
 800d768:	4669      	mov	r1, sp
 800d76a:	f000 fd23 	bl	800e1b4 <__ieee754_rem_pio2f>
 800d76e:	f000 0003 	and.w	r0, r0, #3
 800d772:	2801      	cmp	r0, #1
 800d774:	d006      	beq.n	800d784 <sinf+0x44>
 800d776:	2802      	cmp	r0, #2
 800d778:	d009      	beq.n	800d78e <sinf+0x4e>
 800d77a:	b980      	cbnz	r0, 800d79e <sinf+0x5e>
 800d77c:	2201      	movs	r2, #1
 800d77e:	9901      	ldr	r1, [sp, #4]
 800d780:	9800      	ldr	r0, [sp, #0]
 800d782:	e7e6      	b.n	800d752 <sinf+0x12>
 800d784:	9901      	ldr	r1, [sp, #4]
 800d786:	9800      	ldr	r0, [sp, #0]
 800d788:	f001 fb84 	bl	800ee94 <__kernel_cosf>
 800d78c:	e7e9      	b.n	800d762 <sinf+0x22>
 800d78e:	2201      	movs	r2, #1
 800d790:	9901      	ldr	r1, [sp, #4]
 800d792:	9800      	ldr	r0, [sp, #0]
 800d794:	f001 feb4 	bl	800f500 <__kernel_sinf>
 800d798:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800d79c:	e7e1      	b.n	800d762 <sinf+0x22>
 800d79e:	9901      	ldr	r1, [sp, #4]
 800d7a0:	9800      	ldr	r0, [sp, #0]
 800d7a2:	f001 fb77 	bl	800ee94 <__kernel_cosf>
 800d7a6:	e7f7      	b.n	800d798 <sinf+0x58>
 800d7a8:	3f490fd8 	.word	0x3f490fd8

0800d7ac <acosf>:
 800d7ac:	b538      	push	{r3, r4, r5, lr}
 800d7ae:	4604      	mov	r4, r0
 800d7b0:	f000 fa5a 	bl	800dc68 <__ieee754_acosf>
 800d7b4:	4b0e      	ldr	r3, [pc, #56]	; (800d7f0 <acosf+0x44>)
 800d7b6:	4605      	mov	r5, r0
 800d7b8:	f993 3000 	ldrsb.w	r3, [r3]
 800d7bc:	3301      	adds	r3, #1
 800d7be:	d015      	beq.n	800d7ec <acosf+0x40>
 800d7c0:	4621      	mov	r1, r4
 800d7c2:	4620      	mov	r0, r4
 800d7c4:	f7f3 fcc0 	bl	8001148 <__aeabi_fcmpun>
 800d7c8:	b980      	cbnz	r0, 800d7ec <acosf+0x40>
 800d7ca:	4620      	mov	r0, r4
 800d7cc:	f7ff ffb4 	bl	800d738 <fabsf>
 800d7d0:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800d7d4:	f7f3 fcae 	bl	8001134 <__aeabi_fcmpgt>
 800d7d8:	b140      	cbz	r0, 800d7ec <acosf+0x40>
 800d7da:	f002 f8a5 	bl	800f928 <__errno>
 800d7de:	2321      	movs	r3, #33	; 0x21
 800d7e0:	6003      	str	r3, [r0, #0]
 800d7e2:	4804      	ldr	r0, [pc, #16]	; (800d7f4 <acosf+0x48>)
 800d7e4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d7e8:	f002 b84e 	b.w	800f888 <nanf>
 800d7ec:	4628      	mov	r0, r5
 800d7ee:	bd38      	pop	{r3, r4, r5, pc}
 800d7f0:	200001a6 	.word	0x200001a6
 800d7f4:	08013868 	.word	0x08013868

0800d7f8 <asinf>:
 800d7f8:	b538      	push	{r3, r4, r5, lr}
 800d7fa:	4604      	mov	r4, r0
 800d7fc:	f000 fb96 	bl	800df2c <__ieee754_asinf>
 800d800:	4b0e      	ldr	r3, [pc, #56]	; (800d83c <asinf+0x44>)
 800d802:	4605      	mov	r5, r0
 800d804:	f993 3000 	ldrsb.w	r3, [r3]
 800d808:	3301      	adds	r3, #1
 800d80a:	d015      	beq.n	800d838 <asinf+0x40>
 800d80c:	4621      	mov	r1, r4
 800d80e:	4620      	mov	r0, r4
 800d810:	f7f3 fc9a 	bl	8001148 <__aeabi_fcmpun>
 800d814:	b980      	cbnz	r0, 800d838 <asinf+0x40>
 800d816:	4620      	mov	r0, r4
 800d818:	f7ff ff8e 	bl	800d738 <fabsf>
 800d81c:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800d820:	f7f3 fc88 	bl	8001134 <__aeabi_fcmpgt>
 800d824:	b140      	cbz	r0, 800d838 <asinf+0x40>
 800d826:	f002 f87f 	bl	800f928 <__errno>
 800d82a:	2321      	movs	r3, #33	; 0x21
 800d82c:	6003      	str	r3, [r0, #0]
 800d82e:	4804      	ldr	r0, [pc, #16]	; (800d840 <asinf+0x48>)
 800d830:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d834:	f002 b828 	b.w	800f888 <nanf>
 800d838:	4628      	mov	r0, r5
 800d83a:	bd38      	pop	{r3, r4, r5, pc}
 800d83c:	200001a6 	.word	0x200001a6
 800d840:	08013868 	.word	0x08013868

0800d844 <sqrtf>:
 800d844:	b538      	push	{r3, r4, r5, lr}
 800d846:	4605      	mov	r5, r0
 800d848:	f000 fe12 	bl	800e470 <__ieee754_sqrtf>
 800d84c:	4b0d      	ldr	r3, [pc, #52]	; (800d884 <sqrtf+0x40>)
 800d84e:	4604      	mov	r4, r0
 800d850:	f993 3000 	ldrsb.w	r3, [r3]
 800d854:	3301      	adds	r3, #1
 800d856:	d012      	beq.n	800d87e <sqrtf+0x3a>
 800d858:	4629      	mov	r1, r5
 800d85a:	4628      	mov	r0, r5
 800d85c:	f7f3 fc74 	bl	8001148 <__aeabi_fcmpun>
 800d860:	b968      	cbnz	r0, 800d87e <sqrtf+0x3a>
 800d862:	2100      	movs	r1, #0
 800d864:	4628      	mov	r0, r5
 800d866:	f7f3 fc47 	bl	80010f8 <__aeabi_fcmplt>
 800d86a:	b140      	cbz	r0, 800d87e <sqrtf+0x3a>
 800d86c:	f002 f85c 	bl	800f928 <__errno>
 800d870:	2321      	movs	r3, #33	; 0x21
 800d872:	2100      	movs	r1, #0
 800d874:	6003      	str	r3, [r0, #0]
 800d876:	4608      	mov	r0, r1
 800d878:	f7f3 fb54 	bl	8000f24 <__aeabi_fdiv>
 800d87c:	4604      	mov	r4, r0
 800d87e:	4620      	mov	r0, r4
 800d880:	bd38      	pop	{r3, r4, r5, pc}
 800d882:	bf00      	nop
 800d884:	200001a6 	.word	0x200001a6

0800d888 <__ieee754_rem_pio2>:
 800d888:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d88c:	4614      	mov	r4, r2
 800d88e:	4ac4      	ldr	r2, [pc, #784]	; (800dba0 <__ieee754_rem_pio2+0x318>)
 800d890:	f021 4a00 	bic.w	sl, r1, #2147483648	; 0x80000000
 800d894:	b08d      	sub	sp, #52	; 0x34
 800d896:	4592      	cmp	sl, r2
 800d898:	9104      	str	r1, [sp, #16]
 800d89a:	dc07      	bgt.n	800d8ac <__ieee754_rem_pio2+0x24>
 800d89c:	2200      	movs	r2, #0
 800d89e:	2300      	movs	r3, #0
 800d8a0:	e9c4 0100 	strd	r0, r1, [r4]
 800d8a4:	e9c4 2302 	strd	r2, r3, [r4, #8]
 800d8a8:	2500      	movs	r5, #0
 800d8aa:	e024      	b.n	800d8f6 <__ieee754_rem_pio2+0x6e>
 800d8ac:	4abd      	ldr	r2, [pc, #756]	; (800dba4 <__ieee754_rem_pio2+0x31c>)
 800d8ae:	4592      	cmp	sl, r2
 800d8b0:	dc72      	bgt.n	800d998 <__ieee754_rem_pio2+0x110>
 800d8b2:	9b04      	ldr	r3, [sp, #16]
 800d8b4:	4dbc      	ldr	r5, [pc, #752]	; (800dba8 <__ieee754_rem_pio2+0x320>)
 800d8b6:	2b00      	cmp	r3, #0
 800d8b8:	a3ab      	add	r3, pc, #684	; (adr r3, 800db68 <__ieee754_rem_pio2+0x2e0>)
 800d8ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d8be:	dd36      	ble.n	800d92e <__ieee754_rem_pio2+0xa6>
 800d8c0:	f7f2 fc8e 	bl	80001e0 <__aeabi_dsub>
 800d8c4:	45aa      	cmp	sl, r5
 800d8c6:	4606      	mov	r6, r0
 800d8c8:	460f      	mov	r7, r1
 800d8ca:	d018      	beq.n	800d8fe <__ieee754_rem_pio2+0x76>
 800d8cc:	a3a8      	add	r3, pc, #672	; (adr r3, 800db70 <__ieee754_rem_pio2+0x2e8>)
 800d8ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d8d2:	f7f2 fc85 	bl	80001e0 <__aeabi_dsub>
 800d8d6:	4602      	mov	r2, r0
 800d8d8:	460b      	mov	r3, r1
 800d8da:	4630      	mov	r0, r6
 800d8dc:	e9c4 2300 	strd	r2, r3, [r4]
 800d8e0:	4639      	mov	r1, r7
 800d8e2:	f7f2 fc7d 	bl	80001e0 <__aeabi_dsub>
 800d8e6:	a3a2      	add	r3, pc, #648	; (adr r3, 800db70 <__ieee754_rem_pio2+0x2e8>)
 800d8e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d8ec:	f7f2 fc78 	bl	80001e0 <__aeabi_dsub>
 800d8f0:	2501      	movs	r5, #1
 800d8f2:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800d8f6:	4628      	mov	r0, r5
 800d8f8:	b00d      	add	sp, #52	; 0x34
 800d8fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d8fe:	a39e      	add	r3, pc, #632	; (adr r3, 800db78 <__ieee754_rem_pio2+0x2f0>)
 800d900:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d904:	f7f2 fc6c 	bl	80001e0 <__aeabi_dsub>
 800d908:	a39d      	add	r3, pc, #628	; (adr r3, 800db80 <__ieee754_rem_pio2+0x2f8>)
 800d90a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d90e:	4606      	mov	r6, r0
 800d910:	460f      	mov	r7, r1
 800d912:	f7f2 fc65 	bl	80001e0 <__aeabi_dsub>
 800d916:	4602      	mov	r2, r0
 800d918:	460b      	mov	r3, r1
 800d91a:	4630      	mov	r0, r6
 800d91c:	e9c4 2300 	strd	r2, r3, [r4]
 800d920:	4639      	mov	r1, r7
 800d922:	f7f2 fc5d 	bl	80001e0 <__aeabi_dsub>
 800d926:	a396      	add	r3, pc, #600	; (adr r3, 800db80 <__ieee754_rem_pio2+0x2f8>)
 800d928:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d92c:	e7de      	b.n	800d8ec <__ieee754_rem_pio2+0x64>
 800d92e:	f7f2 fc59 	bl	80001e4 <__adddf3>
 800d932:	45aa      	cmp	sl, r5
 800d934:	4606      	mov	r6, r0
 800d936:	460f      	mov	r7, r1
 800d938:	d016      	beq.n	800d968 <__ieee754_rem_pio2+0xe0>
 800d93a:	a38d      	add	r3, pc, #564	; (adr r3, 800db70 <__ieee754_rem_pio2+0x2e8>)
 800d93c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d940:	f7f2 fc50 	bl	80001e4 <__adddf3>
 800d944:	4602      	mov	r2, r0
 800d946:	460b      	mov	r3, r1
 800d948:	4630      	mov	r0, r6
 800d94a:	e9c4 2300 	strd	r2, r3, [r4]
 800d94e:	4639      	mov	r1, r7
 800d950:	f7f2 fc46 	bl	80001e0 <__aeabi_dsub>
 800d954:	a386      	add	r3, pc, #536	; (adr r3, 800db70 <__ieee754_rem_pio2+0x2e8>)
 800d956:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d95a:	f7f2 fc43 	bl	80001e4 <__adddf3>
 800d95e:	f04f 35ff 	mov.w	r5, #4294967295
 800d962:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800d966:	e7c6      	b.n	800d8f6 <__ieee754_rem_pio2+0x6e>
 800d968:	a383      	add	r3, pc, #524	; (adr r3, 800db78 <__ieee754_rem_pio2+0x2f0>)
 800d96a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d96e:	f7f2 fc39 	bl	80001e4 <__adddf3>
 800d972:	a383      	add	r3, pc, #524	; (adr r3, 800db80 <__ieee754_rem_pio2+0x2f8>)
 800d974:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d978:	4606      	mov	r6, r0
 800d97a:	460f      	mov	r7, r1
 800d97c:	f7f2 fc32 	bl	80001e4 <__adddf3>
 800d980:	4602      	mov	r2, r0
 800d982:	460b      	mov	r3, r1
 800d984:	4630      	mov	r0, r6
 800d986:	e9c4 2300 	strd	r2, r3, [r4]
 800d98a:	4639      	mov	r1, r7
 800d98c:	f7f2 fc28 	bl	80001e0 <__aeabi_dsub>
 800d990:	a37b      	add	r3, pc, #492	; (adr r3, 800db80 <__ieee754_rem_pio2+0x2f8>)
 800d992:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d996:	e7e0      	b.n	800d95a <__ieee754_rem_pio2+0xd2>
 800d998:	4a84      	ldr	r2, [pc, #528]	; (800dbac <__ieee754_rem_pio2+0x324>)
 800d99a:	4592      	cmp	sl, r2
 800d99c:	f300 80d5 	bgt.w	800db4a <__ieee754_rem_pio2+0x2c2>
 800d9a0:	f001 fe24 	bl	800f5ec <fabs>
 800d9a4:	a378      	add	r3, pc, #480	; (adr r3, 800db88 <__ieee754_rem_pio2+0x300>)
 800d9a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d9aa:	4606      	mov	r6, r0
 800d9ac:	460f      	mov	r7, r1
 800d9ae:	f7f2 fdcf 	bl	8000550 <__aeabi_dmul>
 800d9b2:	2200      	movs	r2, #0
 800d9b4:	4b7e      	ldr	r3, [pc, #504]	; (800dbb0 <__ieee754_rem_pio2+0x328>)
 800d9b6:	f7f2 fc15 	bl	80001e4 <__adddf3>
 800d9ba:	f7f3 f879 	bl	8000ab0 <__aeabi_d2iz>
 800d9be:	4605      	mov	r5, r0
 800d9c0:	f7f2 fd5c 	bl	800047c <__aeabi_i2d>
 800d9c4:	4602      	mov	r2, r0
 800d9c6:	460b      	mov	r3, r1
 800d9c8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800d9cc:	a366      	add	r3, pc, #408	; (adr r3, 800db68 <__ieee754_rem_pio2+0x2e0>)
 800d9ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d9d2:	f7f2 fdbd 	bl	8000550 <__aeabi_dmul>
 800d9d6:	4602      	mov	r2, r0
 800d9d8:	460b      	mov	r3, r1
 800d9da:	4630      	mov	r0, r6
 800d9dc:	4639      	mov	r1, r7
 800d9de:	f7f2 fbff 	bl	80001e0 <__aeabi_dsub>
 800d9e2:	a363      	add	r3, pc, #396	; (adr r3, 800db70 <__ieee754_rem_pio2+0x2e8>)
 800d9e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d9e8:	4680      	mov	r8, r0
 800d9ea:	4689      	mov	r9, r1
 800d9ec:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d9f0:	f7f2 fdae 	bl	8000550 <__aeabi_dmul>
 800d9f4:	2d1f      	cmp	r5, #31
 800d9f6:	4606      	mov	r6, r0
 800d9f8:	460f      	mov	r7, r1
 800d9fa:	dc0e      	bgt.n	800da1a <__ieee754_rem_pio2+0x192>
 800d9fc:	4b6d      	ldr	r3, [pc, #436]	; (800dbb4 <__ieee754_rem_pio2+0x32c>)
 800d9fe:	1e6a      	subs	r2, r5, #1
 800da00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800da04:	4553      	cmp	r3, sl
 800da06:	d008      	beq.n	800da1a <__ieee754_rem_pio2+0x192>
 800da08:	4632      	mov	r2, r6
 800da0a:	463b      	mov	r3, r7
 800da0c:	4640      	mov	r0, r8
 800da0e:	4649      	mov	r1, r9
 800da10:	f7f2 fbe6 	bl	80001e0 <__aeabi_dsub>
 800da14:	e9c4 0100 	strd	r0, r1, [r4]
 800da18:	e013      	b.n	800da42 <__ieee754_rem_pio2+0x1ba>
 800da1a:	463b      	mov	r3, r7
 800da1c:	4632      	mov	r2, r6
 800da1e:	4640      	mov	r0, r8
 800da20:	4649      	mov	r1, r9
 800da22:	f7f2 fbdd 	bl	80001e0 <__aeabi_dsub>
 800da26:	ea4f 532a 	mov.w	r3, sl, asr #20
 800da2a:	9305      	str	r3, [sp, #20]
 800da2c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800da30:	ebc3 5a1a 	rsb	sl, r3, sl, lsr #20
 800da34:	f1ba 0f10 	cmp.w	sl, #16
 800da38:	dc1f      	bgt.n	800da7a <__ieee754_rem_pio2+0x1f2>
 800da3a:	4602      	mov	r2, r0
 800da3c:	460b      	mov	r3, r1
 800da3e:	e9c4 2300 	strd	r2, r3, [r4]
 800da42:	e9d4 2a00 	ldrd	r2, sl, [r4]
 800da46:	4640      	mov	r0, r8
 800da48:	4653      	mov	r3, sl
 800da4a:	4649      	mov	r1, r9
 800da4c:	f7f2 fbc8 	bl	80001e0 <__aeabi_dsub>
 800da50:	4632      	mov	r2, r6
 800da52:	463b      	mov	r3, r7
 800da54:	f7f2 fbc4 	bl	80001e0 <__aeabi_dsub>
 800da58:	460b      	mov	r3, r1
 800da5a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800da5e:	9904      	ldr	r1, [sp, #16]
 800da60:	4602      	mov	r2, r0
 800da62:	2900      	cmp	r1, #0
 800da64:	f6bf af47 	bge.w	800d8f6 <__ieee754_rem_pio2+0x6e>
 800da68:	f10a 4100 	add.w	r1, sl, #2147483648	; 0x80000000
 800da6c:	e9c4 1201 	strd	r1, r2, [r4, #4]
 800da70:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800da74:	60e3      	str	r3, [r4, #12]
 800da76:	426d      	negs	r5, r5
 800da78:	e73d      	b.n	800d8f6 <__ieee754_rem_pio2+0x6e>
 800da7a:	a33f      	add	r3, pc, #252	; (adr r3, 800db78 <__ieee754_rem_pio2+0x2f0>)
 800da7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da80:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800da84:	f7f2 fd64 	bl	8000550 <__aeabi_dmul>
 800da88:	4606      	mov	r6, r0
 800da8a:	460f      	mov	r7, r1
 800da8c:	4602      	mov	r2, r0
 800da8e:	460b      	mov	r3, r1
 800da90:	4640      	mov	r0, r8
 800da92:	4649      	mov	r1, r9
 800da94:	f7f2 fba4 	bl	80001e0 <__aeabi_dsub>
 800da98:	4602      	mov	r2, r0
 800da9a:	460b      	mov	r3, r1
 800da9c:	4682      	mov	sl, r0
 800da9e:	468b      	mov	fp, r1
 800daa0:	4640      	mov	r0, r8
 800daa2:	4649      	mov	r1, r9
 800daa4:	f7f2 fb9c 	bl	80001e0 <__aeabi_dsub>
 800daa8:	4632      	mov	r2, r6
 800daaa:	463b      	mov	r3, r7
 800daac:	f7f2 fb98 	bl	80001e0 <__aeabi_dsub>
 800dab0:	a333      	add	r3, pc, #204	; (adr r3, 800db80 <__ieee754_rem_pio2+0x2f8>)
 800dab2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dab6:	4606      	mov	r6, r0
 800dab8:	460f      	mov	r7, r1
 800daba:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800dabe:	f7f2 fd47 	bl	8000550 <__aeabi_dmul>
 800dac2:	4632      	mov	r2, r6
 800dac4:	463b      	mov	r3, r7
 800dac6:	f7f2 fb8b 	bl	80001e0 <__aeabi_dsub>
 800daca:	4602      	mov	r2, r0
 800dacc:	460b      	mov	r3, r1
 800dace:	4606      	mov	r6, r0
 800dad0:	460f      	mov	r7, r1
 800dad2:	4650      	mov	r0, sl
 800dad4:	4659      	mov	r1, fp
 800dad6:	f7f2 fb83 	bl	80001e0 <__aeabi_dsub>
 800dada:	9a05      	ldr	r2, [sp, #20]
 800dadc:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800dae0:	1ad3      	subs	r3, r2, r3
 800dae2:	2b31      	cmp	r3, #49	; 0x31
 800dae4:	dc06      	bgt.n	800daf4 <__ieee754_rem_pio2+0x26c>
 800dae6:	4602      	mov	r2, r0
 800dae8:	460b      	mov	r3, r1
 800daea:	46d0      	mov	r8, sl
 800daec:	46d9      	mov	r9, fp
 800daee:	e9c4 2300 	strd	r2, r3, [r4]
 800daf2:	e7a6      	b.n	800da42 <__ieee754_rem_pio2+0x1ba>
 800daf4:	a326      	add	r3, pc, #152	; (adr r3, 800db90 <__ieee754_rem_pio2+0x308>)
 800daf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dafa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800dafe:	f7f2 fd27 	bl	8000550 <__aeabi_dmul>
 800db02:	4606      	mov	r6, r0
 800db04:	460f      	mov	r7, r1
 800db06:	4602      	mov	r2, r0
 800db08:	460b      	mov	r3, r1
 800db0a:	4650      	mov	r0, sl
 800db0c:	4659      	mov	r1, fp
 800db0e:	f7f2 fb67 	bl	80001e0 <__aeabi_dsub>
 800db12:	4602      	mov	r2, r0
 800db14:	460b      	mov	r3, r1
 800db16:	4680      	mov	r8, r0
 800db18:	4689      	mov	r9, r1
 800db1a:	4650      	mov	r0, sl
 800db1c:	4659      	mov	r1, fp
 800db1e:	f7f2 fb5f 	bl	80001e0 <__aeabi_dsub>
 800db22:	4632      	mov	r2, r6
 800db24:	463b      	mov	r3, r7
 800db26:	f7f2 fb5b 	bl	80001e0 <__aeabi_dsub>
 800db2a:	a31b      	add	r3, pc, #108	; (adr r3, 800db98 <__ieee754_rem_pio2+0x310>)
 800db2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db30:	4606      	mov	r6, r0
 800db32:	460f      	mov	r7, r1
 800db34:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800db38:	f7f2 fd0a 	bl	8000550 <__aeabi_dmul>
 800db3c:	4632      	mov	r2, r6
 800db3e:	463b      	mov	r3, r7
 800db40:	f7f2 fb4e 	bl	80001e0 <__aeabi_dsub>
 800db44:	4606      	mov	r6, r0
 800db46:	460f      	mov	r7, r1
 800db48:	e75e      	b.n	800da08 <__ieee754_rem_pio2+0x180>
 800db4a:	4a1b      	ldr	r2, [pc, #108]	; (800dbb8 <__ieee754_rem_pio2+0x330>)
 800db4c:	4592      	cmp	sl, r2
 800db4e:	dd35      	ble.n	800dbbc <__ieee754_rem_pio2+0x334>
 800db50:	4602      	mov	r2, r0
 800db52:	460b      	mov	r3, r1
 800db54:	f7f2 fb44 	bl	80001e0 <__aeabi_dsub>
 800db58:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800db5c:	e9c4 0100 	strd	r0, r1, [r4]
 800db60:	e6a2      	b.n	800d8a8 <__ieee754_rem_pio2+0x20>
 800db62:	bf00      	nop
 800db64:	f3af 8000 	nop.w
 800db68:	54400000 	.word	0x54400000
 800db6c:	3ff921fb 	.word	0x3ff921fb
 800db70:	1a626331 	.word	0x1a626331
 800db74:	3dd0b461 	.word	0x3dd0b461
 800db78:	1a600000 	.word	0x1a600000
 800db7c:	3dd0b461 	.word	0x3dd0b461
 800db80:	2e037073 	.word	0x2e037073
 800db84:	3ba3198a 	.word	0x3ba3198a
 800db88:	6dc9c883 	.word	0x6dc9c883
 800db8c:	3fe45f30 	.word	0x3fe45f30
 800db90:	2e000000 	.word	0x2e000000
 800db94:	3ba3198a 	.word	0x3ba3198a
 800db98:	252049c1 	.word	0x252049c1
 800db9c:	397b839a 	.word	0x397b839a
 800dba0:	3fe921fb 	.word	0x3fe921fb
 800dba4:	4002d97b 	.word	0x4002d97b
 800dba8:	3ff921fb 	.word	0x3ff921fb
 800dbac:	413921fb 	.word	0x413921fb
 800dbb0:	3fe00000 	.word	0x3fe00000
 800dbb4:	08013048 	.word	0x08013048
 800dbb8:	7fefffff 	.word	0x7fefffff
 800dbbc:	ea4f 552a 	mov.w	r5, sl, asr #20
 800dbc0:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 800dbc4:	ebaa 5105 	sub.w	r1, sl, r5, lsl #20
 800dbc8:	460f      	mov	r7, r1
 800dbca:	4606      	mov	r6, r0
 800dbcc:	f7f2 ff70 	bl	8000ab0 <__aeabi_d2iz>
 800dbd0:	f7f2 fc54 	bl	800047c <__aeabi_i2d>
 800dbd4:	4602      	mov	r2, r0
 800dbd6:	460b      	mov	r3, r1
 800dbd8:	4630      	mov	r0, r6
 800dbda:	4639      	mov	r1, r7
 800dbdc:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800dbe0:	f7f2 fafe 	bl	80001e0 <__aeabi_dsub>
 800dbe4:	2200      	movs	r2, #0
 800dbe6:	4b1e      	ldr	r3, [pc, #120]	; (800dc60 <__ieee754_rem_pio2+0x3d8>)
 800dbe8:	f7f2 fcb2 	bl	8000550 <__aeabi_dmul>
 800dbec:	460f      	mov	r7, r1
 800dbee:	4606      	mov	r6, r0
 800dbf0:	f7f2 ff5e 	bl	8000ab0 <__aeabi_d2iz>
 800dbf4:	f7f2 fc42 	bl	800047c <__aeabi_i2d>
 800dbf8:	4602      	mov	r2, r0
 800dbfa:	460b      	mov	r3, r1
 800dbfc:	4630      	mov	r0, r6
 800dbfe:	4639      	mov	r1, r7
 800dc00:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800dc04:	f7f2 faec 	bl	80001e0 <__aeabi_dsub>
 800dc08:	2200      	movs	r2, #0
 800dc0a:	4b15      	ldr	r3, [pc, #84]	; (800dc60 <__ieee754_rem_pio2+0x3d8>)
 800dc0c:	f7f2 fca0 	bl	8000550 <__aeabi_dmul>
 800dc10:	f04f 0803 	mov.w	r8, #3
 800dc14:	2600      	movs	r6, #0
 800dc16:	2700      	movs	r7, #0
 800dc18:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800dc1c:	f10d 0928 	add.w	r9, sp, #40	; 0x28
 800dc20:	4632      	mov	r2, r6
 800dc22:	e879 0102 	ldrd	r0, r1, [r9], #-8
 800dc26:	463b      	mov	r3, r7
 800dc28:	46c2      	mov	sl, r8
 800dc2a:	f108 38ff 	add.w	r8, r8, #4294967295
 800dc2e:	f7f2 fef7 	bl	8000a20 <__aeabi_dcmpeq>
 800dc32:	2800      	cmp	r0, #0
 800dc34:	d1f4      	bne.n	800dc20 <__ieee754_rem_pio2+0x398>
 800dc36:	4b0b      	ldr	r3, [pc, #44]	; (800dc64 <__ieee754_rem_pio2+0x3dc>)
 800dc38:	462a      	mov	r2, r5
 800dc3a:	9301      	str	r3, [sp, #4]
 800dc3c:	2302      	movs	r3, #2
 800dc3e:	4621      	mov	r1, r4
 800dc40:	9300      	str	r3, [sp, #0]
 800dc42:	a806      	add	r0, sp, #24
 800dc44:	4653      	mov	r3, sl
 800dc46:	f000 fd25 	bl	800e694 <__kernel_rem_pio2>
 800dc4a:	9b04      	ldr	r3, [sp, #16]
 800dc4c:	4605      	mov	r5, r0
 800dc4e:	2b00      	cmp	r3, #0
 800dc50:	f6bf ae51 	bge.w	800d8f6 <__ieee754_rem_pio2+0x6e>
 800dc54:	6863      	ldr	r3, [r4, #4]
 800dc56:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800dc5a:	6063      	str	r3, [r4, #4]
 800dc5c:	68e3      	ldr	r3, [r4, #12]
 800dc5e:	e707      	b.n	800da70 <__ieee754_rem_pio2+0x1e8>
 800dc60:	41700000 	.word	0x41700000
 800dc64:	080130c8 	.word	0x080130c8

0800dc68 <__ieee754_acosf>:
 800dc68:	f020 4200 	bic.w	r2, r0, #2147483648	; 0x80000000
 800dc6c:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 800dc70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dc72:	4605      	mov	r5, r0
 800dc74:	d104      	bne.n	800dc80 <__ieee754_acosf+0x18>
 800dc76:	2800      	cmp	r0, #0
 800dc78:	f300 8135 	bgt.w	800dee6 <__ieee754_acosf+0x27e>
 800dc7c:	489c      	ldr	r0, [pc, #624]	; (800def0 <__ieee754_acosf+0x288>)
 800dc7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dc80:	dd06      	ble.n	800dc90 <__ieee754_acosf+0x28>
 800dc82:	4601      	mov	r1, r0
 800dc84:	f7f2 ff90 	bl	8000ba8 <__aeabi_fsub>
 800dc88:	4601      	mov	r1, r0
 800dc8a:	f7f3 f94b 	bl	8000f24 <__aeabi_fdiv>
 800dc8e:	e7f6      	b.n	800dc7e <__ieee754_acosf+0x16>
 800dc90:	f1b2 5f7c 	cmp.w	r2, #1056964608	; 0x3f000000
 800dc94:	da57      	bge.n	800dd46 <__ieee754_acosf+0xde>
 800dc96:	f1b2 5f0c 	cmp.w	r2, #587202560	; 0x23000000
 800dc9a:	f340 8126 	ble.w	800deea <__ieee754_acosf+0x282>
 800dc9e:	4601      	mov	r1, r0
 800dca0:	f7f3 f88c 	bl	8000dbc <__aeabi_fmul>
 800dca4:	4604      	mov	r4, r0
 800dca6:	4993      	ldr	r1, [pc, #588]	; (800def4 <__ieee754_acosf+0x28c>)
 800dca8:	f7f3 f888 	bl	8000dbc <__aeabi_fmul>
 800dcac:	4992      	ldr	r1, [pc, #584]	; (800def8 <__ieee754_acosf+0x290>)
 800dcae:	f7f2 ff7d 	bl	8000bac <__addsf3>
 800dcb2:	4621      	mov	r1, r4
 800dcb4:	f7f3 f882 	bl	8000dbc <__aeabi_fmul>
 800dcb8:	4990      	ldr	r1, [pc, #576]	; (800defc <__ieee754_acosf+0x294>)
 800dcba:	f7f2 ff75 	bl	8000ba8 <__aeabi_fsub>
 800dcbe:	4621      	mov	r1, r4
 800dcc0:	f7f3 f87c 	bl	8000dbc <__aeabi_fmul>
 800dcc4:	498e      	ldr	r1, [pc, #568]	; (800df00 <__ieee754_acosf+0x298>)
 800dcc6:	f7f2 ff71 	bl	8000bac <__addsf3>
 800dcca:	4621      	mov	r1, r4
 800dccc:	f7f3 f876 	bl	8000dbc <__aeabi_fmul>
 800dcd0:	498c      	ldr	r1, [pc, #560]	; (800df04 <__ieee754_acosf+0x29c>)
 800dcd2:	f7f2 ff69 	bl	8000ba8 <__aeabi_fsub>
 800dcd6:	4621      	mov	r1, r4
 800dcd8:	f7f3 f870 	bl	8000dbc <__aeabi_fmul>
 800dcdc:	498a      	ldr	r1, [pc, #552]	; (800df08 <__ieee754_acosf+0x2a0>)
 800dcde:	f7f2 ff65 	bl	8000bac <__addsf3>
 800dce2:	4621      	mov	r1, r4
 800dce4:	f7f3 f86a 	bl	8000dbc <__aeabi_fmul>
 800dce8:	4988      	ldr	r1, [pc, #544]	; (800df0c <__ieee754_acosf+0x2a4>)
 800dcea:	4606      	mov	r6, r0
 800dcec:	4620      	mov	r0, r4
 800dcee:	f7f3 f865 	bl	8000dbc <__aeabi_fmul>
 800dcf2:	4987      	ldr	r1, [pc, #540]	; (800df10 <__ieee754_acosf+0x2a8>)
 800dcf4:	f7f2 ff58 	bl	8000ba8 <__aeabi_fsub>
 800dcf8:	4621      	mov	r1, r4
 800dcfa:	f7f3 f85f 	bl	8000dbc <__aeabi_fmul>
 800dcfe:	4985      	ldr	r1, [pc, #532]	; (800df14 <__ieee754_acosf+0x2ac>)
 800dd00:	f7f2 ff54 	bl	8000bac <__addsf3>
 800dd04:	4621      	mov	r1, r4
 800dd06:	f7f3 f859 	bl	8000dbc <__aeabi_fmul>
 800dd0a:	4983      	ldr	r1, [pc, #524]	; (800df18 <__ieee754_acosf+0x2b0>)
 800dd0c:	f7f2 ff4c 	bl	8000ba8 <__aeabi_fsub>
 800dd10:	4621      	mov	r1, r4
 800dd12:	f7f3 f853 	bl	8000dbc <__aeabi_fmul>
 800dd16:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800dd1a:	f7f2 ff47 	bl	8000bac <__addsf3>
 800dd1e:	4601      	mov	r1, r0
 800dd20:	4630      	mov	r0, r6
 800dd22:	f7f3 f8ff 	bl	8000f24 <__aeabi_fdiv>
 800dd26:	4629      	mov	r1, r5
 800dd28:	f7f3 f848 	bl	8000dbc <__aeabi_fmul>
 800dd2c:	4601      	mov	r1, r0
 800dd2e:	487b      	ldr	r0, [pc, #492]	; (800df1c <__ieee754_acosf+0x2b4>)
 800dd30:	f7f2 ff3a 	bl	8000ba8 <__aeabi_fsub>
 800dd34:	4601      	mov	r1, r0
 800dd36:	4628      	mov	r0, r5
 800dd38:	f7f2 ff36 	bl	8000ba8 <__aeabi_fsub>
 800dd3c:	4601      	mov	r1, r0
 800dd3e:	4878      	ldr	r0, [pc, #480]	; (800df20 <__ieee754_acosf+0x2b8>)
 800dd40:	f7f2 ff32 	bl	8000ba8 <__aeabi_fsub>
 800dd44:	e79b      	b.n	800dc7e <__ieee754_acosf+0x16>
 800dd46:	2800      	cmp	r0, #0
 800dd48:	da5b      	bge.n	800de02 <__ieee754_acosf+0x19a>
 800dd4a:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800dd4e:	f7f2 ff2d 	bl	8000bac <__addsf3>
 800dd52:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800dd56:	f7f3 f831 	bl	8000dbc <__aeabi_fmul>
 800dd5a:	4604      	mov	r4, r0
 800dd5c:	4965      	ldr	r1, [pc, #404]	; (800def4 <__ieee754_acosf+0x28c>)
 800dd5e:	f7f3 f82d 	bl	8000dbc <__aeabi_fmul>
 800dd62:	4965      	ldr	r1, [pc, #404]	; (800def8 <__ieee754_acosf+0x290>)
 800dd64:	f7f2 ff22 	bl	8000bac <__addsf3>
 800dd68:	4621      	mov	r1, r4
 800dd6a:	f7f3 f827 	bl	8000dbc <__aeabi_fmul>
 800dd6e:	4963      	ldr	r1, [pc, #396]	; (800defc <__ieee754_acosf+0x294>)
 800dd70:	f7f2 ff1a 	bl	8000ba8 <__aeabi_fsub>
 800dd74:	4621      	mov	r1, r4
 800dd76:	f7f3 f821 	bl	8000dbc <__aeabi_fmul>
 800dd7a:	4961      	ldr	r1, [pc, #388]	; (800df00 <__ieee754_acosf+0x298>)
 800dd7c:	f7f2 ff16 	bl	8000bac <__addsf3>
 800dd80:	4621      	mov	r1, r4
 800dd82:	f7f3 f81b 	bl	8000dbc <__aeabi_fmul>
 800dd86:	495f      	ldr	r1, [pc, #380]	; (800df04 <__ieee754_acosf+0x29c>)
 800dd88:	f7f2 ff0e 	bl	8000ba8 <__aeabi_fsub>
 800dd8c:	4621      	mov	r1, r4
 800dd8e:	f7f3 f815 	bl	8000dbc <__aeabi_fmul>
 800dd92:	495d      	ldr	r1, [pc, #372]	; (800df08 <__ieee754_acosf+0x2a0>)
 800dd94:	f7f2 ff0a 	bl	8000bac <__addsf3>
 800dd98:	4621      	mov	r1, r4
 800dd9a:	f7f3 f80f 	bl	8000dbc <__aeabi_fmul>
 800dd9e:	4606      	mov	r6, r0
 800dda0:	4620      	mov	r0, r4
 800dda2:	f000 fb65 	bl	800e470 <__ieee754_sqrtf>
 800dda6:	4959      	ldr	r1, [pc, #356]	; (800df0c <__ieee754_acosf+0x2a4>)
 800dda8:	4605      	mov	r5, r0
 800ddaa:	4620      	mov	r0, r4
 800ddac:	f7f3 f806 	bl	8000dbc <__aeabi_fmul>
 800ddb0:	4957      	ldr	r1, [pc, #348]	; (800df10 <__ieee754_acosf+0x2a8>)
 800ddb2:	f7f2 fef9 	bl	8000ba8 <__aeabi_fsub>
 800ddb6:	4621      	mov	r1, r4
 800ddb8:	f7f3 f800 	bl	8000dbc <__aeabi_fmul>
 800ddbc:	4955      	ldr	r1, [pc, #340]	; (800df14 <__ieee754_acosf+0x2ac>)
 800ddbe:	f7f2 fef5 	bl	8000bac <__addsf3>
 800ddc2:	4621      	mov	r1, r4
 800ddc4:	f7f2 fffa 	bl	8000dbc <__aeabi_fmul>
 800ddc8:	4953      	ldr	r1, [pc, #332]	; (800df18 <__ieee754_acosf+0x2b0>)
 800ddca:	f7f2 feed 	bl	8000ba8 <__aeabi_fsub>
 800ddce:	4621      	mov	r1, r4
 800ddd0:	f7f2 fff4 	bl	8000dbc <__aeabi_fmul>
 800ddd4:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800ddd8:	f7f2 fee8 	bl	8000bac <__addsf3>
 800dddc:	4601      	mov	r1, r0
 800ddde:	4630      	mov	r0, r6
 800dde0:	f7f3 f8a0 	bl	8000f24 <__aeabi_fdiv>
 800dde4:	4629      	mov	r1, r5
 800dde6:	f7f2 ffe9 	bl	8000dbc <__aeabi_fmul>
 800ddea:	494c      	ldr	r1, [pc, #304]	; (800df1c <__ieee754_acosf+0x2b4>)
 800ddec:	f7f2 fedc 	bl	8000ba8 <__aeabi_fsub>
 800ddf0:	4629      	mov	r1, r5
 800ddf2:	f7f2 fedb 	bl	8000bac <__addsf3>
 800ddf6:	4601      	mov	r1, r0
 800ddf8:	f7f2 fed8 	bl	8000bac <__addsf3>
 800ddfc:	4601      	mov	r1, r0
 800ddfe:	4849      	ldr	r0, [pc, #292]	; (800df24 <__ieee754_acosf+0x2bc>)
 800de00:	e79e      	b.n	800dd40 <__ieee754_acosf+0xd8>
 800de02:	4601      	mov	r1, r0
 800de04:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800de08:	f7f2 fece 	bl	8000ba8 <__aeabi_fsub>
 800de0c:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800de10:	f7f2 ffd4 	bl	8000dbc <__aeabi_fmul>
 800de14:	4604      	mov	r4, r0
 800de16:	f000 fb2b 	bl	800e470 <__ieee754_sqrtf>
 800de1a:	4936      	ldr	r1, [pc, #216]	; (800def4 <__ieee754_acosf+0x28c>)
 800de1c:	4606      	mov	r6, r0
 800de1e:	f420 657f 	bic.w	r5, r0, #4080	; 0xff0
 800de22:	4620      	mov	r0, r4
 800de24:	f7f2 ffca 	bl	8000dbc <__aeabi_fmul>
 800de28:	4933      	ldr	r1, [pc, #204]	; (800def8 <__ieee754_acosf+0x290>)
 800de2a:	f7f2 febf 	bl	8000bac <__addsf3>
 800de2e:	4621      	mov	r1, r4
 800de30:	f7f2 ffc4 	bl	8000dbc <__aeabi_fmul>
 800de34:	4931      	ldr	r1, [pc, #196]	; (800defc <__ieee754_acosf+0x294>)
 800de36:	f7f2 feb7 	bl	8000ba8 <__aeabi_fsub>
 800de3a:	4621      	mov	r1, r4
 800de3c:	f7f2 ffbe 	bl	8000dbc <__aeabi_fmul>
 800de40:	492f      	ldr	r1, [pc, #188]	; (800df00 <__ieee754_acosf+0x298>)
 800de42:	f7f2 feb3 	bl	8000bac <__addsf3>
 800de46:	4621      	mov	r1, r4
 800de48:	f7f2 ffb8 	bl	8000dbc <__aeabi_fmul>
 800de4c:	492d      	ldr	r1, [pc, #180]	; (800df04 <__ieee754_acosf+0x29c>)
 800de4e:	f7f2 feab 	bl	8000ba8 <__aeabi_fsub>
 800de52:	4621      	mov	r1, r4
 800de54:	f7f2 ffb2 	bl	8000dbc <__aeabi_fmul>
 800de58:	492b      	ldr	r1, [pc, #172]	; (800df08 <__ieee754_acosf+0x2a0>)
 800de5a:	f7f2 fea7 	bl	8000bac <__addsf3>
 800de5e:	4621      	mov	r1, r4
 800de60:	f7f2 ffac 	bl	8000dbc <__aeabi_fmul>
 800de64:	4929      	ldr	r1, [pc, #164]	; (800df0c <__ieee754_acosf+0x2a4>)
 800de66:	4607      	mov	r7, r0
 800de68:	4620      	mov	r0, r4
 800de6a:	f7f2 ffa7 	bl	8000dbc <__aeabi_fmul>
 800de6e:	4928      	ldr	r1, [pc, #160]	; (800df10 <__ieee754_acosf+0x2a8>)
 800de70:	f7f2 fe9a 	bl	8000ba8 <__aeabi_fsub>
 800de74:	4621      	mov	r1, r4
 800de76:	f7f2 ffa1 	bl	8000dbc <__aeabi_fmul>
 800de7a:	4926      	ldr	r1, [pc, #152]	; (800df14 <__ieee754_acosf+0x2ac>)
 800de7c:	f7f2 fe96 	bl	8000bac <__addsf3>
 800de80:	4621      	mov	r1, r4
 800de82:	f7f2 ff9b 	bl	8000dbc <__aeabi_fmul>
 800de86:	4924      	ldr	r1, [pc, #144]	; (800df18 <__ieee754_acosf+0x2b0>)
 800de88:	f7f2 fe8e 	bl	8000ba8 <__aeabi_fsub>
 800de8c:	4621      	mov	r1, r4
 800de8e:	f7f2 ff95 	bl	8000dbc <__aeabi_fmul>
 800de92:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800de96:	f7f2 fe89 	bl	8000bac <__addsf3>
 800de9a:	4601      	mov	r1, r0
 800de9c:	4638      	mov	r0, r7
 800de9e:	f7f3 f841 	bl	8000f24 <__aeabi_fdiv>
 800dea2:	4631      	mov	r1, r6
 800dea4:	f7f2 ff8a 	bl	8000dbc <__aeabi_fmul>
 800dea8:	f025 050f 	bic.w	r5, r5, #15
 800deac:	4607      	mov	r7, r0
 800deae:	4629      	mov	r1, r5
 800deb0:	4628      	mov	r0, r5
 800deb2:	f7f2 ff83 	bl	8000dbc <__aeabi_fmul>
 800deb6:	4601      	mov	r1, r0
 800deb8:	4620      	mov	r0, r4
 800deba:	f7f2 fe75 	bl	8000ba8 <__aeabi_fsub>
 800debe:	4629      	mov	r1, r5
 800dec0:	4604      	mov	r4, r0
 800dec2:	4630      	mov	r0, r6
 800dec4:	f7f2 fe72 	bl	8000bac <__addsf3>
 800dec8:	4601      	mov	r1, r0
 800deca:	4620      	mov	r0, r4
 800decc:	f7f3 f82a 	bl	8000f24 <__aeabi_fdiv>
 800ded0:	4601      	mov	r1, r0
 800ded2:	4638      	mov	r0, r7
 800ded4:	f7f2 fe6a 	bl	8000bac <__addsf3>
 800ded8:	4629      	mov	r1, r5
 800deda:	f7f2 fe67 	bl	8000bac <__addsf3>
 800dede:	4601      	mov	r1, r0
 800dee0:	f7f2 fe64 	bl	8000bac <__addsf3>
 800dee4:	e6cb      	b.n	800dc7e <__ieee754_acosf+0x16>
 800dee6:	2000      	movs	r0, #0
 800dee8:	e6c9      	b.n	800dc7e <__ieee754_acosf+0x16>
 800deea:	480f      	ldr	r0, [pc, #60]	; (800df28 <__ieee754_acosf+0x2c0>)
 800deec:	e6c7      	b.n	800dc7e <__ieee754_acosf+0x16>
 800deee:	bf00      	nop
 800def0:	40490fdb 	.word	0x40490fdb
 800def4:	3811ef08 	.word	0x3811ef08
 800def8:	3a4f7f04 	.word	0x3a4f7f04
 800defc:	3d241146 	.word	0x3d241146
 800df00:	3e4e0aa8 	.word	0x3e4e0aa8
 800df04:	3ea6b090 	.word	0x3ea6b090
 800df08:	3e2aaaab 	.word	0x3e2aaaab
 800df0c:	3d9dc62e 	.word	0x3d9dc62e
 800df10:	3f303361 	.word	0x3f303361
 800df14:	4001572d 	.word	0x4001572d
 800df18:	4019d139 	.word	0x4019d139
 800df1c:	33a22168 	.word	0x33a22168
 800df20:	3fc90fda 	.word	0x3fc90fda
 800df24:	40490fda 	.word	0x40490fda
 800df28:	3fc90fdb 	.word	0x3fc90fdb

0800df2c <__ieee754_asinf>:
 800df2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800df30:	f020 4800 	bic.w	r8, r0, #2147483648	; 0x80000000
 800df34:	f1b8 5f7e 	cmp.w	r8, #1065353216	; 0x3f800000
 800df38:	4604      	mov	r4, r0
 800df3a:	4605      	mov	r5, r0
 800df3c:	d10c      	bne.n	800df58 <__ieee754_asinf+0x2c>
 800df3e:	498d      	ldr	r1, [pc, #564]	; (800e174 <__ieee754_asinf+0x248>)
 800df40:	f7f2 ff3c 	bl	8000dbc <__aeabi_fmul>
 800df44:	498c      	ldr	r1, [pc, #560]	; (800e178 <__ieee754_asinf+0x24c>)
 800df46:	4605      	mov	r5, r0
 800df48:	4620      	mov	r0, r4
 800df4a:	f7f2 ff37 	bl	8000dbc <__aeabi_fmul>
 800df4e:	4601      	mov	r1, r0
 800df50:	4628      	mov	r0, r5
 800df52:	f7f2 fe2b 	bl	8000bac <__addsf3>
 800df56:	e006      	b.n	800df66 <__ieee754_asinf+0x3a>
 800df58:	dd07      	ble.n	800df6a <__ieee754_asinf+0x3e>
 800df5a:	4601      	mov	r1, r0
 800df5c:	f7f2 fe24 	bl	8000ba8 <__aeabi_fsub>
 800df60:	4601      	mov	r1, r0
 800df62:	f7f2 ffdf 	bl	8000f24 <__aeabi_fdiv>
 800df66:	4604      	mov	r4, r0
 800df68:	e00e      	b.n	800df88 <__ieee754_asinf+0x5c>
 800df6a:	f1b8 5f7c 	cmp.w	r8, #1056964608	; 0x3f000000
 800df6e:	da58      	bge.n	800e022 <__ieee754_asinf+0xf6>
 800df70:	f1b8 5f48 	cmp.w	r8, #838860800	; 0x32000000
 800df74:	da0b      	bge.n	800df8e <__ieee754_asinf+0x62>
 800df76:	4981      	ldr	r1, [pc, #516]	; (800e17c <__ieee754_asinf+0x250>)
 800df78:	f7f2 fe18 	bl	8000bac <__addsf3>
 800df7c:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800df80:	f7f3 f8d8 	bl	8001134 <__aeabi_fcmpgt>
 800df84:	2800      	cmp	r0, #0
 800df86:	d04c      	beq.n	800e022 <__ieee754_asinf+0xf6>
 800df88:	4620      	mov	r0, r4
 800df8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800df8e:	4601      	mov	r1, r0
 800df90:	f7f2 ff14 	bl	8000dbc <__aeabi_fmul>
 800df94:	4605      	mov	r5, r0
 800df96:	497a      	ldr	r1, [pc, #488]	; (800e180 <__ieee754_asinf+0x254>)
 800df98:	f7f2 ff10 	bl	8000dbc <__aeabi_fmul>
 800df9c:	4979      	ldr	r1, [pc, #484]	; (800e184 <__ieee754_asinf+0x258>)
 800df9e:	f7f2 fe05 	bl	8000bac <__addsf3>
 800dfa2:	4629      	mov	r1, r5
 800dfa4:	f7f2 ff0a 	bl	8000dbc <__aeabi_fmul>
 800dfa8:	4977      	ldr	r1, [pc, #476]	; (800e188 <__ieee754_asinf+0x25c>)
 800dfaa:	f7f2 fdfd 	bl	8000ba8 <__aeabi_fsub>
 800dfae:	4629      	mov	r1, r5
 800dfb0:	f7f2 ff04 	bl	8000dbc <__aeabi_fmul>
 800dfb4:	4975      	ldr	r1, [pc, #468]	; (800e18c <__ieee754_asinf+0x260>)
 800dfb6:	f7f2 fdf9 	bl	8000bac <__addsf3>
 800dfba:	4629      	mov	r1, r5
 800dfbc:	f7f2 fefe 	bl	8000dbc <__aeabi_fmul>
 800dfc0:	4973      	ldr	r1, [pc, #460]	; (800e190 <__ieee754_asinf+0x264>)
 800dfc2:	f7f2 fdf1 	bl	8000ba8 <__aeabi_fsub>
 800dfc6:	4629      	mov	r1, r5
 800dfc8:	f7f2 fef8 	bl	8000dbc <__aeabi_fmul>
 800dfcc:	4971      	ldr	r1, [pc, #452]	; (800e194 <__ieee754_asinf+0x268>)
 800dfce:	f7f2 fded 	bl	8000bac <__addsf3>
 800dfd2:	4629      	mov	r1, r5
 800dfd4:	f7f2 fef2 	bl	8000dbc <__aeabi_fmul>
 800dfd8:	496f      	ldr	r1, [pc, #444]	; (800e198 <__ieee754_asinf+0x26c>)
 800dfda:	4606      	mov	r6, r0
 800dfdc:	4628      	mov	r0, r5
 800dfde:	f7f2 feed 	bl	8000dbc <__aeabi_fmul>
 800dfe2:	496e      	ldr	r1, [pc, #440]	; (800e19c <__ieee754_asinf+0x270>)
 800dfe4:	f7f2 fde0 	bl	8000ba8 <__aeabi_fsub>
 800dfe8:	4629      	mov	r1, r5
 800dfea:	f7f2 fee7 	bl	8000dbc <__aeabi_fmul>
 800dfee:	496c      	ldr	r1, [pc, #432]	; (800e1a0 <__ieee754_asinf+0x274>)
 800dff0:	f7f2 fddc 	bl	8000bac <__addsf3>
 800dff4:	4629      	mov	r1, r5
 800dff6:	f7f2 fee1 	bl	8000dbc <__aeabi_fmul>
 800dffa:	496a      	ldr	r1, [pc, #424]	; (800e1a4 <__ieee754_asinf+0x278>)
 800dffc:	f7f2 fdd4 	bl	8000ba8 <__aeabi_fsub>
 800e000:	4629      	mov	r1, r5
 800e002:	f7f2 fedb 	bl	8000dbc <__aeabi_fmul>
 800e006:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800e00a:	f7f2 fdcf 	bl	8000bac <__addsf3>
 800e00e:	4601      	mov	r1, r0
 800e010:	4630      	mov	r0, r6
 800e012:	f7f2 ff87 	bl	8000f24 <__aeabi_fdiv>
 800e016:	4621      	mov	r1, r4
 800e018:	f7f2 fed0 	bl	8000dbc <__aeabi_fmul>
 800e01c:	4601      	mov	r1, r0
 800e01e:	4620      	mov	r0, r4
 800e020:	e797      	b.n	800df52 <__ieee754_asinf+0x26>
 800e022:	4620      	mov	r0, r4
 800e024:	f7ff fb88 	bl	800d738 <fabsf>
 800e028:	4601      	mov	r1, r0
 800e02a:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800e02e:	f7f2 fdbb 	bl	8000ba8 <__aeabi_fsub>
 800e032:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800e036:	f7f2 fec1 	bl	8000dbc <__aeabi_fmul>
 800e03a:	4606      	mov	r6, r0
 800e03c:	4950      	ldr	r1, [pc, #320]	; (800e180 <__ieee754_asinf+0x254>)
 800e03e:	f7f2 febd 	bl	8000dbc <__aeabi_fmul>
 800e042:	4950      	ldr	r1, [pc, #320]	; (800e184 <__ieee754_asinf+0x258>)
 800e044:	f7f2 fdb2 	bl	8000bac <__addsf3>
 800e048:	4631      	mov	r1, r6
 800e04a:	f7f2 feb7 	bl	8000dbc <__aeabi_fmul>
 800e04e:	494e      	ldr	r1, [pc, #312]	; (800e188 <__ieee754_asinf+0x25c>)
 800e050:	f7f2 fdaa 	bl	8000ba8 <__aeabi_fsub>
 800e054:	4631      	mov	r1, r6
 800e056:	f7f2 feb1 	bl	8000dbc <__aeabi_fmul>
 800e05a:	494c      	ldr	r1, [pc, #304]	; (800e18c <__ieee754_asinf+0x260>)
 800e05c:	f7f2 fda6 	bl	8000bac <__addsf3>
 800e060:	4631      	mov	r1, r6
 800e062:	f7f2 feab 	bl	8000dbc <__aeabi_fmul>
 800e066:	494a      	ldr	r1, [pc, #296]	; (800e190 <__ieee754_asinf+0x264>)
 800e068:	f7f2 fd9e 	bl	8000ba8 <__aeabi_fsub>
 800e06c:	4631      	mov	r1, r6
 800e06e:	f7f2 fea5 	bl	8000dbc <__aeabi_fmul>
 800e072:	4948      	ldr	r1, [pc, #288]	; (800e194 <__ieee754_asinf+0x268>)
 800e074:	f7f2 fd9a 	bl	8000bac <__addsf3>
 800e078:	4631      	mov	r1, r6
 800e07a:	f7f2 fe9f 	bl	8000dbc <__aeabi_fmul>
 800e07e:	4946      	ldr	r1, [pc, #280]	; (800e198 <__ieee754_asinf+0x26c>)
 800e080:	4681      	mov	r9, r0
 800e082:	4630      	mov	r0, r6
 800e084:	f7f2 fe9a 	bl	8000dbc <__aeabi_fmul>
 800e088:	4944      	ldr	r1, [pc, #272]	; (800e19c <__ieee754_asinf+0x270>)
 800e08a:	f7f2 fd8d 	bl	8000ba8 <__aeabi_fsub>
 800e08e:	4631      	mov	r1, r6
 800e090:	f7f2 fe94 	bl	8000dbc <__aeabi_fmul>
 800e094:	4942      	ldr	r1, [pc, #264]	; (800e1a0 <__ieee754_asinf+0x274>)
 800e096:	f7f2 fd89 	bl	8000bac <__addsf3>
 800e09a:	4631      	mov	r1, r6
 800e09c:	f7f2 fe8e 	bl	8000dbc <__aeabi_fmul>
 800e0a0:	4940      	ldr	r1, [pc, #256]	; (800e1a4 <__ieee754_asinf+0x278>)
 800e0a2:	f7f2 fd81 	bl	8000ba8 <__aeabi_fsub>
 800e0a6:	4631      	mov	r1, r6
 800e0a8:	f7f2 fe88 	bl	8000dbc <__aeabi_fmul>
 800e0ac:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800e0b0:	f7f2 fd7c 	bl	8000bac <__addsf3>
 800e0b4:	4682      	mov	sl, r0
 800e0b6:	4630      	mov	r0, r6
 800e0b8:	f000 f9da 	bl	800e470 <__ieee754_sqrtf>
 800e0bc:	4b3a      	ldr	r3, [pc, #232]	; (800e1a8 <__ieee754_asinf+0x27c>)
 800e0be:	4607      	mov	r7, r0
 800e0c0:	4598      	cmp	r8, r3
 800e0c2:	dd1a      	ble.n	800e0fa <__ieee754_asinf+0x1ce>
 800e0c4:	4651      	mov	r1, sl
 800e0c6:	4648      	mov	r0, r9
 800e0c8:	f7f2 ff2c 	bl	8000f24 <__aeabi_fdiv>
 800e0cc:	4639      	mov	r1, r7
 800e0ce:	f7f2 fe75 	bl	8000dbc <__aeabi_fmul>
 800e0d2:	4639      	mov	r1, r7
 800e0d4:	f7f2 fd6a 	bl	8000bac <__addsf3>
 800e0d8:	4601      	mov	r1, r0
 800e0da:	f7f2 fd67 	bl	8000bac <__addsf3>
 800e0de:	4933      	ldr	r1, [pc, #204]	; (800e1ac <__ieee754_asinf+0x280>)
 800e0e0:	f7f2 fd64 	bl	8000bac <__addsf3>
 800e0e4:	4601      	mov	r1, r0
 800e0e6:	4823      	ldr	r0, [pc, #140]	; (800e174 <__ieee754_asinf+0x248>)
 800e0e8:	f7f2 fd5e 	bl	8000ba8 <__aeabi_fsub>
 800e0ec:	2d00      	cmp	r5, #0
 800e0ee:	4604      	mov	r4, r0
 800e0f0:	f73f af4a 	bgt.w	800df88 <__ieee754_asinf+0x5c>
 800e0f4:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800e0f8:	e735      	b.n	800df66 <__ieee754_asinf+0x3a>
 800e0fa:	4601      	mov	r1, r0
 800e0fc:	f420 687f 	bic.w	r8, r0, #4080	; 0xff0
 800e100:	f7f2 fd54 	bl	8000bac <__addsf3>
 800e104:	4651      	mov	r1, sl
 800e106:	4604      	mov	r4, r0
 800e108:	4648      	mov	r0, r9
 800e10a:	f7f2 ff0b 	bl	8000f24 <__aeabi_fdiv>
 800e10e:	4601      	mov	r1, r0
 800e110:	4620      	mov	r0, r4
 800e112:	f7f2 fe53 	bl	8000dbc <__aeabi_fmul>
 800e116:	f028 080f 	bic.w	r8, r8, #15
 800e11a:	4681      	mov	r9, r0
 800e11c:	4641      	mov	r1, r8
 800e11e:	4640      	mov	r0, r8
 800e120:	f7f2 fe4c 	bl	8000dbc <__aeabi_fmul>
 800e124:	4601      	mov	r1, r0
 800e126:	4630      	mov	r0, r6
 800e128:	f7f2 fd3e 	bl	8000ba8 <__aeabi_fsub>
 800e12c:	4641      	mov	r1, r8
 800e12e:	4604      	mov	r4, r0
 800e130:	4638      	mov	r0, r7
 800e132:	f7f2 fd3b 	bl	8000bac <__addsf3>
 800e136:	4601      	mov	r1, r0
 800e138:	4620      	mov	r0, r4
 800e13a:	f7f2 fef3 	bl	8000f24 <__aeabi_fdiv>
 800e13e:	4601      	mov	r1, r0
 800e140:	f7f2 fd34 	bl	8000bac <__addsf3>
 800e144:	4601      	mov	r1, r0
 800e146:	480c      	ldr	r0, [pc, #48]	; (800e178 <__ieee754_asinf+0x24c>)
 800e148:	f7f2 fd2e 	bl	8000ba8 <__aeabi_fsub>
 800e14c:	4601      	mov	r1, r0
 800e14e:	4648      	mov	r0, r9
 800e150:	f7f2 fd2a 	bl	8000ba8 <__aeabi_fsub>
 800e154:	4641      	mov	r1, r8
 800e156:	4604      	mov	r4, r0
 800e158:	4640      	mov	r0, r8
 800e15a:	f7f2 fd27 	bl	8000bac <__addsf3>
 800e15e:	4601      	mov	r1, r0
 800e160:	4813      	ldr	r0, [pc, #76]	; (800e1b0 <__ieee754_asinf+0x284>)
 800e162:	f7f2 fd21 	bl	8000ba8 <__aeabi_fsub>
 800e166:	4601      	mov	r1, r0
 800e168:	4620      	mov	r0, r4
 800e16a:	f7f2 fd1d 	bl	8000ba8 <__aeabi_fsub>
 800e16e:	4601      	mov	r1, r0
 800e170:	480f      	ldr	r0, [pc, #60]	; (800e1b0 <__ieee754_asinf+0x284>)
 800e172:	e7b9      	b.n	800e0e8 <__ieee754_asinf+0x1bc>
 800e174:	3fc90fdb 	.word	0x3fc90fdb
 800e178:	b33bbd2e 	.word	0xb33bbd2e
 800e17c:	7149f2ca 	.word	0x7149f2ca
 800e180:	3811ef08 	.word	0x3811ef08
 800e184:	3a4f7f04 	.word	0x3a4f7f04
 800e188:	3d241146 	.word	0x3d241146
 800e18c:	3e4e0aa8 	.word	0x3e4e0aa8
 800e190:	3ea6b090 	.word	0x3ea6b090
 800e194:	3e2aaaab 	.word	0x3e2aaaab
 800e198:	3d9dc62e 	.word	0x3d9dc62e
 800e19c:	3f303361 	.word	0x3f303361
 800e1a0:	4001572d 	.word	0x4001572d
 800e1a4:	4019d139 	.word	0x4019d139
 800e1a8:	3f799999 	.word	0x3f799999
 800e1ac:	333bbd2e 	.word	0x333bbd2e
 800e1b0:	3f490fdb 	.word	0x3f490fdb

0800e1b4 <__ieee754_rem_pio2f>:
 800e1b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e1b8:	4aa0      	ldr	r2, [pc, #640]	; (800e43c <__ieee754_rem_pio2f+0x288>)
 800e1ba:	f020 4600 	bic.w	r6, r0, #2147483648	; 0x80000000
 800e1be:	4296      	cmp	r6, r2
 800e1c0:	460c      	mov	r4, r1
 800e1c2:	4682      	mov	sl, r0
 800e1c4:	b087      	sub	sp, #28
 800e1c6:	dc04      	bgt.n	800e1d2 <__ieee754_rem_pio2f+0x1e>
 800e1c8:	2300      	movs	r3, #0
 800e1ca:	6008      	str	r0, [r1, #0]
 800e1cc:	604b      	str	r3, [r1, #4]
 800e1ce:	2500      	movs	r5, #0
 800e1d0:	e01a      	b.n	800e208 <__ieee754_rem_pio2f+0x54>
 800e1d2:	4a9b      	ldr	r2, [pc, #620]	; (800e440 <__ieee754_rem_pio2f+0x28c>)
 800e1d4:	4296      	cmp	r6, r2
 800e1d6:	dc4b      	bgt.n	800e270 <__ieee754_rem_pio2f+0xbc>
 800e1d8:	2800      	cmp	r0, #0
 800e1da:	499a      	ldr	r1, [pc, #616]	; (800e444 <__ieee754_rem_pio2f+0x290>)
 800e1dc:	4f9a      	ldr	r7, [pc, #616]	; (800e448 <__ieee754_rem_pio2f+0x294>)
 800e1de:	f026 060f 	bic.w	r6, r6, #15
 800e1e2:	dd23      	ble.n	800e22c <__ieee754_rem_pio2f+0x78>
 800e1e4:	f7f2 fce0 	bl	8000ba8 <__aeabi_fsub>
 800e1e8:	42be      	cmp	r6, r7
 800e1ea:	4605      	mov	r5, r0
 800e1ec:	d010      	beq.n	800e210 <__ieee754_rem_pio2f+0x5c>
 800e1ee:	4997      	ldr	r1, [pc, #604]	; (800e44c <__ieee754_rem_pio2f+0x298>)
 800e1f0:	f7f2 fcda 	bl	8000ba8 <__aeabi_fsub>
 800e1f4:	4601      	mov	r1, r0
 800e1f6:	6020      	str	r0, [r4, #0]
 800e1f8:	4628      	mov	r0, r5
 800e1fa:	f7f2 fcd5 	bl	8000ba8 <__aeabi_fsub>
 800e1fe:	4993      	ldr	r1, [pc, #588]	; (800e44c <__ieee754_rem_pio2f+0x298>)
 800e200:	f7f2 fcd2 	bl	8000ba8 <__aeabi_fsub>
 800e204:	2501      	movs	r5, #1
 800e206:	6060      	str	r0, [r4, #4]
 800e208:	4628      	mov	r0, r5
 800e20a:	b007      	add	sp, #28
 800e20c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e210:	498f      	ldr	r1, [pc, #572]	; (800e450 <__ieee754_rem_pio2f+0x29c>)
 800e212:	f7f2 fcc9 	bl	8000ba8 <__aeabi_fsub>
 800e216:	498f      	ldr	r1, [pc, #572]	; (800e454 <__ieee754_rem_pio2f+0x2a0>)
 800e218:	4605      	mov	r5, r0
 800e21a:	f7f2 fcc5 	bl	8000ba8 <__aeabi_fsub>
 800e21e:	4601      	mov	r1, r0
 800e220:	6020      	str	r0, [r4, #0]
 800e222:	4628      	mov	r0, r5
 800e224:	f7f2 fcc0 	bl	8000ba8 <__aeabi_fsub>
 800e228:	498a      	ldr	r1, [pc, #552]	; (800e454 <__ieee754_rem_pio2f+0x2a0>)
 800e22a:	e7e9      	b.n	800e200 <__ieee754_rem_pio2f+0x4c>
 800e22c:	f7f2 fcbe 	bl	8000bac <__addsf3>
 800e230:	42be      	cmp	r6, r7
 800e232:	4605      	mov	r5, r0
 800e234:	d00e      	beq.n	800e254 <__ieee754_rem_pio2f+0xa0>
 800e236:	4985      	ldr	r1, [pc, #532]	; (800e44c <__ieee754_rem_pio2f+0x298>)
 800e238:	f7f2 fcb8 	bl	8000bac <__addsf3>
 800e23c:	4601      	mov	r1, r0
 800e23e:	6020      	str	r0, [r4, #0]
 800e240:	4628      	mov	r0, r5
 800e242:	f7f2 fcb1 	bl	8000ba8 <__aeabi_fsub>
 800e246:	4981      	ldr	r1, [pc, #516]	; (800e44c <__ieee754_rem_pio2f+0x298>)
 800e248:	f7f2 fcb0 	bl	8000bac <__addsf3>
 800e24c:	f04f 35ff 	mov.w	r5, #4294967295
 800e250:	6060      	str	r0, [r4, #4]
 800e252:	e7d9      	b.n	800e208 <__ieee754_rem_pio2f+0x54>
 800e254:	497e      	ldr	r1, [pc, #504]	; (800e450 <__ieee754_rem_pio2f+0x29c>)
 800e256:	f7f2 fca9 	bl	8000bac <__addsf3>
 800e25a:	497e      	ldr	r1, [pc, #504]	; (800e454 <__ieee754_rem_pio2f+0x2a0>)
 800e25c:	4605      	mov	r5, r0
 800e25e:	f7f2 fca5 	bl	8000bac <__addsf3>
 800e262:	4601      	mov	r1, r0
 800e264:	6020      	str	r0, [r4, #0]
 800e266:	4628      	mov	r0, r5
 800e268:	f7f2 fc9e 	bl	8000ba8 <__aeabi_fsub>
 800e26c:	4979      	ldr	r1, [pc, #484]	; (800e454 <__ieee754_rem_pio2f+0x2a0>)
 800e26e:	e7eb      	b.n	800e248 <__ieee754_rem_pio2f+0x94>
 800e270:	4a79      	ldr	r2, [pc, #484]	; (800e458 <__ieee754_rem_pio2f+0x2a4>)
 800e272:	4296      	cmp	r6, r2
 800e274:	f300 8091 	bgt.w	800e39a <__ieee754_rem_pio2f+0x1e6>
 800e278:	f7ff fa5e 	bl	800d738 <fabsf>
 800e27c:	4977      	ldr	r1, [pc, #476]	; (800e45c <__ieee754_rem_pio2f+0x2a8>)
 800e27e:	4607      	mov	r7, r0
 800e280:	f7f2 fd9c 	bl	8000dbc <__aeabi_fmul>
 800e284:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800e288:	f7f2 fc90 	bl	8000bac <__addsf3>
 800e28c:	f7f2 ff72 	bl	8001174 <__aeabi_f2iz>
 800e290:	4605      	mov	r5, r0
 800e292:	f7f2 fd3f 	bl	8000d14 <__aeabi_i2f>
 800e296:	496b      	ldr	r1, [pc, #428]	; (800e444 <__ieee754_rem_pio2f+0x290>)
 800e298:	4681      	mov	r9, r0
 800e29a:	f7f2 fd8f 	bl	8000dbc <__aeabi_fmul>
 800e29e:	4601      	mov	r1, r0
 800e2a0:	4638      	mov	r0, r7
 800e2a2:	f7f2 fc81 	bl	8000ba8 <__aeabi_fsub>
 800e2a6:	4969      	ldr	r1, [pc, #420]	; (800e44c <__ieee754_rem_pio2f+0x298>)
 800e2a8:	4680      	mov	r8, r0
 800e2aa:	4648      	mov	r0, r9
 800e2ac:	f7f2 fd86 	bl	8000dbc <__aeabi_fmul>
 800e2b0:	2d1f      	cmp	r5, #31
 800e2b2:	4607      	mov	r7, r0
 800e2b4:	dc0c      	bgt.n	800e2d0 <__ieee754_rem_pio2f+0x11c>
 800e2b6:	4a6a      	ldr	r2, [pc, #424]	; (800e460 <__ieee754_rem_pio2f+0x2ac>)
 800e2b8:	1e69      	subs	r1, r5, #1
 800e2ba:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800e2be:	f026 03ff 	bic.w	r3, r6, #255	; 0xff
 800e2c2:	4293      	cmp	r3, r2
 800e2c4:	d004      	beq.n	800e2d0 <__ieee754_rem_pio2f+0x11c>
 800e2c6:	4639      	mov	r1, r7
 800e2c8:	4640      	mov	r0, r8
 800e2ca:	f7f2 fc6d 	bl	8000ba8 <__aeabi_fsub>
 800e2ce:	e00b      	b.n	800e2e8 <__ieee754_rem_pio2f+0x134>
 800e2d0:	4639      	mov	r1, r7
 800e2d2:	4640      	mov	r0, r8
 800e2d4:	f7f2 fc68 	bl	8000ba8 <__aeabi_fsub>
 800e2d8:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 800e2dc:	ea4f 5be6 	mov.w	fp, r6, asr #23
 800e2e0:	ebc3 56d6 	rsb	r6, r3, r6, lsr #23
 800e2e4:	2e08      	cmp	r6, #8
 800e2e6:	dc01      	bgt.n	800e2ec <__ieee754_rem_pio2f+0x138>
 800e2e8:	6020      	str	r0, [r4, #0]
 800e2ea:	e026      	b.n	800e33a <__ieee754_rem_pio2f+0x186>
 800e2ec:	4958      	ldr	r1, [pc, #352]	; (800e450 <__ieee754_rem_pio2f+0x29c>)
 800e2ee:	4648      	mov	r0, r9
 800e2f0:	f7f2 fd64 	bl	8000dbc <__aeabi_fmul>
 800e2f4:	4607      	mov	r7, r0
 800e2f6:	4601      	mov	r1, r0
 800e2f8:	4640      	mov	r0, r8
 800e2fa:	f7f2 fc55 	bl	8000ba8 <__aeabi_fsub>
 800e2fe:	4601      	mov	r1, r0
 800e300:	4606      	mov	r6, r0
 800e302:	4640      	mov	r0, r8
 800e304:	f7f2 fc50 	bl	8000ba8 <__aeabi_fsub>
 800e308:	4639      	mov	r1, r7
 800e30a:	f7f2 fc4d 	bl	8000ba8 <__aeabi_fsub>
 800e30e:	4607      	mov	r7, r0
 800e310:	4950      	ldr	r1, [pc, #320]	; (800e454 <__ieee754_rem_pio2f+0x2a0>)
 800e312:	4648      	mov	r0, r9
 800e314:	f7f2 fd52 	bl	8000dbc <__aeabi_fmul>
 800e318:	4639      	mov	r1, r7
 800e31a:	f7f2 fc45 	bl	8000ba8 <__aeabi_fsub>
 800e31e:	4601      	mov	r1, r0
 800e320:	4607      	mov	r7, r0
 800e322:	4630      	mov	r0, r6
 800e324:	f7f2 fc40 	bl	8000ba8 <__aeabi_fsub>
 800e328:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 800e32c:	ebab 0b03 	sub.w	fp, fp, r3
 800e330:	f1bb 0f19 	cmp.w	fp, #25
 800e334:	dc16      	bgt.n	800e364 <__ieee754_rem_pio2f+0x1b0>
 800e336:	46b0      	mov	r8, r6
 800e338:	6020      	str	r0, [r4, #0]
 800e33a:	6826      	ldr	r6, [r4, #0]
 800e33c:	4640      	mov	r0, r8
 800e33e:	4631      	mov	r1, r6
 800e340:	f7f2 fc32 	bl	8000ba8 <__aeabi_fsub>
 800e344:	4639      	mov	r1, r7
 800e346:	f7f2 fc2f 	bl	8000ba8 <__aeabi_fsub>
 800e34a:	f1ba 0f00 	cmp.w	sl, #0
 800e34e:	6060      	str	r0, [r4, #4]
 800e350:	f6bf af5a 	bge.w	800e208 <__ieee754_rem_pio2f+0x54>
 800e354:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
 800e358:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800e35c:	6026      	str	r6, [r4, #0]
 800e35e:	6060      	str	r0, [r4, #4]
 800e360:	426d      	negs	r5, r5
 800e362:	e751      	b.n	800e208 <__ieee754_rem_pio2f+0x54>
 800e364:	493f      	ldr	r1, [pc, #252]	; (800e464 <__ieee754_rem_pio2f+0x2b0>)
 800e366:	4648      	mov	r0, r9
 800e368:	f7f2 fd28 	bl	8000dbc <__aeabi_fmul>
 800e36c:	4607      	mov	r7, r0
 800e36e:	4601      	mov	r1, r0
 800e370:	4630      	mov	r0, r6
 800e372:	f7f2 fc19 	bl	8000ba8 <__aeabi_fsub>
 800e376:	4601      	mov	r1, r0
 800e378:	4680      	mov	r8, r0
 800e37a:	4630      	mov	r0, r6
 800e37c:	f7f2 fc14 	bl	8000ba8 <__aeabi_fsub>
 800e380:	4639      	mov	r1, r7
 800e382:	f7f2 fc11 	bl	8000ba8 <__aeabi_fsub>
 800e386:	4606      	mov	r6, r0
 800e388:	4937      	ldr	r1, [pc, #220]	; (800e468 <__ieee754_rem_pio2f+0x2b4>)
 800e38a:	4648      	mov	r0, r9
 800e38c:	f7f2 fd16 	bl	8000dbc <__aeabi_fmul>
 800e390:	4631      	mov	r1, r6
 800e392:	f7f2 fc09 	bl	8000ba8 <__aeabi_fsub>
 800e396:	4607      	mov	r7, r0
 800e398:	e795      	b.n	800e2c6 <__ieee754_rem_pio2f+0x112>
 800e39a:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 800e39e:	db05      	blt.n	800e3ac <__ieee754_rem_pio2f+0x1f8>
 800e3a0:	4601      	mov	r1, r0
 800e3a2:	f7f2 fc01 	bl	8000ba8 <__aeabi_fsub>
 800e3a6:	6060      	str	r0, [r4, #4]
 800e3a8:	6020      	str	r0, [r4, #0]
 800e3aa:	e710      	b.n	800e1ce <__ieee754_rem_pio2f+0x1a>
 800e3ac:	15f7      	asrs	r7, r6, #23
 800e3ae:	3f86      	subs	r7, #134	; 0x86
 800e3b0:	eba6 56c7 	sub.w	r6, r6, r7, lsl #23
 800e3b4:	4630      	mov	r0, r6
 800e3b6:	f7f2 fedd 	bl	8001174 <__aeabi_f2iz>
 800e3ba:	f7f2 fcab 	bl	8000d14 <__aeabi_i2f>
 800e3be:	4601      	mov	r1, r0
 800e3c0:	9003      	str	r0, [sp, #12]
 800e3c2:	4630      	mov	r0, r6
 800e3c4:	f7f2 fbf0 	bl	8000ba8 <__aeabi_fsub>
 800e3c8:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 800e3cc:	f7f2 fcf6 	bl	8000dbc <__aeabi_fmul>
 800e3d0:	4606      	mov	r6, r0
 800e3d2:	f7f2 fecf 	bl	8001174 <__aeabi_f2iz>
 800e3d6:	f7f2 fc9d 	bl	8000d14 <__aeabi_i2f>
 800e3da:	4601      	mov	r1, r0
 800e3dc:	9004      	str	r0, [sp, #16]
 800e3de:	4605      	mov	r5, r0
 800e3e0:	4630      	mov	r0, r6
 800e3e2:	f7f2 fbe1 	bl	8000ba8 <__aeabi_fsub>
 800e3e6:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 800e3ea:	f7f2 fce7 	bl	8000dbc <__aeabi_fmul>
 800e3ee:	2100      	movs	r1, #0
 800e3f0:	9005      	str	r0, [sp, #20]
 800e3f2:	f7f2 fe77 	bl	80010e4 <__aeabi_fcmpeq>
 800e3f6:	b1f0      	cbz	r0, 800e436 <__ieee754_rem_pio2f+0x282>
 800e3f8:	2100      	movs	r1, #0
 800e3fa:	4628      	mov	r0, r5
 800e3fc:	f7f2 fe72 	bl	80010e4 <__aeabi_fcmpeq>
 800e400:	2800      	cmp	r0, #0
 800e402:	bf14      	ite	ne
 800e404:	2301      	movne	r3, #1
 800e406:	2302      	moveq	r3, #2
 800e408:	4a18      	ldr	r2, [pc, #96]	; (800e46c <__ieee754_rem_pio2f+0x2b8>)
 800e40a:	4621      	mov	r1, r4
 800e40c:	9201      	str	r2, [sp, #4]
 800e40e:	2202      	movs	r2, #2
 800e410:	a803      	add	r0, sp, #12
 800e412:	9200      	str	r2, [sp, #0]
 800e414:	463a      	mov	r2, r7
 800e416:	f000 fdbd 	bl	800ef94 <__kernel_rem_pio2f>
 800e41a:	f1ba 0f00 	cmp.w	sl, #0
 800e41e:	4605      	mov	r5, r0
 800e420:	f6bf aef2 	bge.w	800e208 <__ieee754_rem_pio2f+0x54>
 800e424:	6823      	ldr	r3, [r4, #0]
 800e426:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800e42a:	6023      	str	r3, [r4, #0]
 800e42c:	6863      	ldr	r3, [r4, #4]
 800e42e:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800e432:	6063      	str	r3, [r4, #4]
 800e434:	e794      	b.n	800e360 <__ieee754_rem_pio2f+0x1ac>
 800e436:	2303      	movs	r3, #3
 800e438:	e7e6      	b.n	800e408 <__ieee754_rem_pio2f+0x254>
 800e43a:	bf00      	nop
 800e43c:	3f490fd8 	.word	0x3f490fd8
 800e440:	4016cbe3 	.word	0x4016cbe3
 800e444:	3fc90f80 	.word	0x3fc90f80
 800e448:	3fc90fd0 	.word	0x3fc90fd0
 800e44c:	37354443 	.word	0x37354443
 800e450:	37354400 	.word	0x37354400
 800e454:	2e85a308 	.word	0x2e85a308
 800e458:	43490f80 	.word	0x43490f80
 800e45c:	3f22f984 	.word	0x3f22f984
 800e460:	080131d0 	.word	0x080131d0
 800e464:	2e85a300 	.word	0x2e85a300
 800e468:	248d3132 	.word	0x248d3132
 800e46c:	08013250 	.word	0x08013250

0800e470 <__ieee754_sqrtf>:
 800e470:	f020 4200 	bic.w	r2, r0, #2147483648	; 0x80000000
 800e474:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800e478:	b570      	push	{r4, r5, r6, lr}
 800e47a:	4603      	mov	r3, r0
 800e47c:	4604      	mov	r4, r0
 800e47e:	d309      	bcc.n	800e494 <__ieee754_sqrtf+0x24>
 800e480:	4601      	mov	r1, r0
 800e482:	f7f2 fc9b 	bl	8000dbc <__aeabi_fmul>
 800e486:	4601      	mov	r1, r0
 800e488:	4620      	mov	r0, r4
 800e48a:	f7f2 fb8f 	bl	8000bac <__addsf3>
 800e48e:	4604      	mov	r4, r0
 800e490:	4620      	mov	r0, r4
 800e492:	bd70      	pop	{r4, r5, r6, pc}
 800e494:	2a00      	cmp	r2, #0
 800e496:	d0fb      	beq.n	800e490 <__ieee754_sqrtf+0x20>
 800e498:	2800      	cmp	r0, #0
 800e49a:	da06      	bge.n	800e4aa <__ieee754_sqrtf+0x3a>
 800e49c:	4601      	mov	r1, r0
 800e49e:	f7f2 fb83 	bl	8000ba8 <__aeabi_fsub>
 800e4a2:	4601      	mov	r1, r0
 800e4a4:	f7f2 fd3e 	bl	8000f24 <__aeabi_fdiv>
 800e4a8:	e7f1      	b.n	800e48e <__ieee754_sqrtf+0x1e>
 800e4aa:	f010 42ff 	ands.w	r2, r0, #2139095040	; 0x7f800000
 800e4ae:	ea4f 51e0 	mov.w	r1, r0, asr #23
 800e4b2:	d029      	beq.n	800e508 <__ieee754_sqrtf+0x98>
 800e4b4:	f3c3 0216 	ubfx	r2, r3, #0, #23
 800e4b8:	07cb      	lsls	r3, r1, #31
 800e4ba:	f04f 0300 	mov.w	r3, #0
 800e4be:	f1a1 007f 	sub.w	r0, r1, #127	; 0x7f
 800e4c2:	f04f 0419 	mov.w	r4, #25
 800e4c6:	461e      	mov	r6, r3
 800e4c8:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
 800e4cc:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800e4d0:	bf58      	it	pl
 800e4d2:	0052      	lslpl	r2, r2, #1
 800e4d4:	1040      	asrs	r0, r0, #1
 800e4d6:	0052      	lsls	r2, r2, #1
 800e4d8:	1875      	adds	r5, r6, r1
 800e4da:	4295      	cmp	r5, r2
 800e4dc:	bfde      	ittt	le
 800e4de:	186e      	addle	r6, r5, r1
 800e4e0:	1b52      	suble	r2, r2, r5
 800e4e2:	185b      	addle	r3, r3, r1
 800e4e4:	3c01      	subs	r4, #1
 800e4e6:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800e4ea:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800e4ee:	d1f3      	bne.n	800e4d8 <__ieee754_sqrtf+0x68>
 800e4f0:	b112      	cbz	r2, 800e4f8 <__ieee754_sqrtf+0x88>
 800e4f2:	3301      	adds	r3, #1
 800e4f4:	f023 0301 	bic.w	r3, r3, #1
 800e4f8:	105c      	asrs	r4, r3, #1
 800e4fa:	f104 547c 	add.w	r4, r4, #1056964608	; 0x3f000000
 800e4fe:	eb04 54c0 	add.w	r4, r4, r0, lsl #23
 800e502:	e7c5      	b.n	800e490 <__ieee754_sqrtf+0x20>
 800e504:	005b      	lsls	r3, r3, #1
 800e506:	3201      	adds	r2, #1
 800e508:	0218      	lsls	r0, r3, #8
 800e50a:	d5fb      	bpl.n	800e504 <__ieee754_sqrtf+0x94>
 800e50c:	3a01      	subs	r2, #1
 800e50e:	1a89      	subs	r1, r1, r2
 800e510:	e7d0      	b.n	800e4b4 <__ieee754_sqrtf+0x44>
 800e512:	0000      	movs	r0, r0
 800e514:	0000      	movs	r0, r0
	...

0800e518 <__kernel_cos>:
 800e518:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e51c:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800e520:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 800e524:	4680      	mov	r8, r0
 800e526:	460f      	mov	r7, r1
 800e528:	e9cd 2300 	strd	r2, r3, [sp]
 800e52c:	da04      	bge.n	800e538 <__kernel_cos+0x20>
 800e52e:	f7f2 fabf 	bl	8000ab0 <__aeabi_d2iz>
 800e532:	2800      	cmp	r0, #0
 800e534:	f000 8086 	beq.w	800e644 <__kernel_cos+0x12c>
 800e538:	4642      	mov	r2, r8
 800e53a:	463b      	mov	r3, r7
 800e53c:	4640      	mov	r0, r8
 800e53e:	4639      	mov	r1, r7
 800e540:	f7f2 f806 	bl	8000550 <__aeabi_dmul>
 800e544:	2200      	movs	r2, #0
 800e546:	4b4e      	ldr	r3, [pc, #312]	; (800e680 <__kernel_cos+0x168>)
 800e548:	4604      	mov	r4, r0
 800e54a:	460d      	mov	r5, r1
 800e54c:	f7f2 f800 	bl	8000550 <__aeabi_dmul>
 800e550:	a33f      	add	r3, pc, #252	; (adr r3, 800e650 <__kernel_cos+0x138>)
 800e552:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e556:	4682      	mov	sl, r0
 800e558:	468b      	mov	fp, r1
 800e55a:	4620      	mov	r0, r4
 800e55c:	4629      	mov	r1, r5
 800e55e:	f7f1 fff7 	bl	8000550 <__aeabi_dmul>
 800e562:	a33d      	add	r3, pc, #244	; (adr r3, 800e658 <__kernel_cos+0x140>)
 800e564:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e568:	f7f1 fe3c 	bl	80001e4 <__adddf3>
 800e56c:	4622      	mov	r2, r4
 800e56e:	462b      	mov	r3, r5
 800e570:	f7f1 ffee 	bl	8000550 <__aeabi_dmul>
 800e574:	a33a      	add	r3, pc, #232	; (adr r3, 800e660 <__kernel_cos+0x148>)
 800e576:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e57a:	f7f1 fe31 	bl	80001e0 <__aeabi_dsub>
 800e57e:	4622      	mov	r2, r4
 800e580:	462b      	mov	r3, r5
 800e582:	f7f1 ffe5 	bl	8000550 <__aeabi_dmul>
 800e586:	a338      	add	r3, pc, #224	; (adr r3, 800e668 <__kernel_cos+0x150>)
 800e588:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e58c:	f7f1 fe2a 	bl	80001e4 <__adddf3>
 800e590:	4622      	mov	r2, r4
 800e592:	462b      	mov	r3, r5
 800e594:	f7f1 ffdc 	bl	8000550 <__aeabi_dmul>
 800e598:	a335      	add	r3, pc, #212	; (adr r3, 800e670 <__kernel_cos+0x158>)
 800e59a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e59e:	f7f1 fe1f 	bl	80001e0 <__aeabi_dsub>
 800e5a2:	4622      	mov	r2, r4
 800e5a4:	462b      	mov	r3, r5
 800e5a6:	f7f1 ffd3 	bl	8000550 <__aeabi_dmul>
 800e5aa:	a333      	add	r3, pc, #204	; (adr r3, 800e678 <__kernel_cos+0x160>)
 800e5ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e5b0:	f7f1 fe18 	bl	80001e4 <__adddf3>
 800e5b4:	4622      	mov	r2, r4
 800e5b6:	462b      	mov	r3, r5
 800e5b8:	f7f1 ffca 	bl	8000550 <__aeabi_dmul>
 800e5bc:	4622      	mov	r2, r4
 800e5be:	462b      	mov	r3, r5
 800e5c0:	f7f1 ffc6 	bl	8000550 <__aeabi_dmul>
 800e5c4:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e5c8:	4604      	mov	r4, r0
 800e5ca:	460d      	mov	r5, r1
 800e5cc:	4640      	mov	r0, r8
 800e5ce:	4639      	mov	r1, r7
 800e5d0:	f7f1 ffbe 	bl	8000550 <__aeabi_dmul>
 800e5d4:	460b      	mov	r3, r1
 800e5d6:	4602      	mov	r2, r0
 800e5d8:	4629      	mov	r1, r5
 800e5da:	4620      	mov	r0, r4
 800e5dc:	f7f1 fe00 	bl	80001e0 <__aeabi_dsub>
 800e5e0:	4b28      	ldr	r3, [pc, #160]	; (800e684 <__kernel_cos+0x16c>)
 800e5e2:	4680      	mov	r8, r0
 800e5e4:	429e      	cmp	r6, r3
 800e5e6:	4689      	mov	r9, r1
 800e5e8:	dc0e      	bgt.n	800e608 <__kernel_cos+0xf0>
 800e5ea:	4602      	mov	r2, r0
 800e5ec:	460b      	mov	r3, r1
 800e5ee:	4650      	mov	r0, sl
 800e5f0:	4659      	mov	r1, fp
 800e5f2:	f7f1 fdf5 	bl	80001e0 <__aeabi_dsub>
 800e5f6:	4602      	mov	r2, r0
 800e5f8:	2000      	movs	r0, #0
 800e5fa:	460b      	mov	r3, r1
 800e5fc:	4922      	ldr	r1, [pc, #136]	; (800e688 <__kernel_cos+0x170>)
 800e5fe:	f7f1 fdef 	bl	80001e0 <__aeabi_dsub>
 800e602:	b003      	add	sp, #12
 800e604:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e608:	2400      	movs	r4, #0
 800e60a:	4b20      	ldr	r3, [pc, #128]	; (800e68c <__kernel_cos+0x174>)
 800e60c:	4622      	mov	r2, r4
 800e60e:	429e      	cmp	r6, r3
 800e610:	bfcc      	ite	gt
 800e612:	4d1f      	ldrgt	r5, [pc, #124]	; (800e690 <__kernel_cos+0x178>)
 800e614:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 800e618:	462b      	mov	r3, r5
 800e61a:	2000      	movs	r0, #0
 800e61c:	491a      	ldr	r1, [pc, #104]	; (800e688 <__kernel_cos+0x170>)
 800e61e:	f7f1 fddf 	bl	80001e0 <__aeabi_dsub>
 800e622:	4622      	mov	r2, r4
 800e624:	4606      	mov	r6, r0
 800e626:	460f      	mov	r7, r1
 800e628:	462b      	mov	r3, r5
 800e62a:	4650      	mov	r0, sl
 800e62c:	4659      	mov	r1, fp
 800e62e:	f7f1 fdd7 	bl	80001e0 <__aeabi_dsub>
 800e632:	4642      	mov	r2, r8
 800e634:	464b      	mov	r3, r9
 800e636:	f7f1 fdd3 	bl	80001e0 <__aeabi_dsub>
 800e63a:	4602      	mov	r2, r0
 800e63c:	460b      	mov	r3, r1
 800e63e:	4630      	mov	r0, r6
 800e640:	4639      	mov	r1, r7
 800e642:	e7dc      	b.n	800e5fe <__kernel_cos+0xe6>
 800e644:	2000      	movs	r0, #0
 800e646:	4910      	ldr	r1, [pc, #64]	; (800e688 <__kernel_cos+0x170>)
 800e648:	e7db      	b.n	800e602 <__kernel_cos+0xea>
 800e64a:	bf00      	nop
 800e64c:	f3af 8000 	nop.w
 800e650:	be8838d4 	.word	0xbe8838d4
 800e654:	bda8fae9 	.word	0xbda8fae9
 800e658:	bdb4b1c4 	.word	0xbdb4b1c4
 800e65c:	3e21ee9e 	.word	0x3e21ee9e
 800e660:	809c52ad 	.word	0x809c52ad
 800e664:	3e927e4f 	.word	0x3e927e4f
 800e668:	19cb1590 	.word	0x19cb1590
 800e66c:	3efa01a0 	.word	0x3efa01a0
 800e670:	16c15177 	.word	0x16c15177
 800e674:	3f56c16c 	.word	0x3f56c16c
 800e678:	5555554c 	.word	0x5555554c
 800e67c:	3fa55555 	.word	0x3fa55555
 800e680:	3fe00000 	.word	0x3fe00000
 800e684:	3fd33332 	.word	0x3fd33332
 800e688:	3ff00000 	.word	0x3ff00000
 800e68c:	3fe90000 	.word	0x3fe90000
 800e690:	3fd20000 	.word	0x3fd20000

0800e694 <__kernel_rem_pio2>:
 800e694:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e698:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 800e69c:	9308      	str	r3, [sp, #32]
 800e69e:	9101      	str	r1, [sp, #4]
 800e6a0:	4bc0      	ldr	r3, [pc, #768]	; (800e9a4 <__kernel_rem_pio2+0x310>)
 800e6a2:	99a2      	ldr	r1, [sp, #648]	; 0x288
 800e6a4:	f112 0f14 	cmn.w	r2, #20
 800e6a8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800e6ac:	bfa8      	it	ge
 800e6ae:	1ed4      	subge	r4, r2, #3
 800e6b0:	9304      	str	r3, [sp, #16]
 800e6b2:	9b08      	ldr	r3, [sp, #32]
 800e6b4:	bfb8      	it	lt
 800e6b6:	2400      	movlt	r4, #0
 800e6b8:	f103 33ff 	add.w	r3, r3, #4294967295
 800e6bc:	9306      	str	r3, [sp, #24]
 800e6be:	bfa4      	itt	ge
 800e6c0:	2318      	movge	r3, #24
 800e6c2:	fb94 f4f3 	sdivge	r4, r4, r3
 800e6c6:	f06f 0317 	mvn.w	r3, #23
 800e6ca:	fb04 3303 	mla	r3, r4, r3, r3
 800e6ce:	eb03 0a02 	add.w	sl, r3, r2
 800e6d2:	9a06      	ldr	r2, [sp, #24]
 800e6d4:	9b04      	ldr	r3, [sp, #16]
 800e6d6:	1aa7      	subs	r7, r4, r2
 800e6d8:	eb03 0802 	add.w	r8, r3, r2
 800e6dc:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 800e6de:	2500      	movs	r5, #0
 800e6e0:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800e6e4:	2200      	movs	r2, #0
 800e6e6:	2300      	movs	r3, #0
 800e6e8:	9009      	str	r0, [sp, #36]	; 0x24
 800e6ea:	ae20      	add	r6, sp, #128	; 0x80
 800e6ec:	4545      	cmp	r5, r8
 800e6ee:	dd19      	ble.n	800e724 <__kernel_rem_pio2+0x90>
 800e6f0:	9b08      	ldr	r3, [sp, #32]
 800e6f2:	aa20      	add	r2, sp, #128	; 0x80
 800e6f4:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800e6f8:	f8dd 8018 	ldr.w	r8, [sp, #24]
 800e6fc:	f1c3 0301 	rsb	r3, r3, #1
 800e700:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 800e704:	9307      	str	r3, [sp, #28]
 800e706:	9b07      	ldr	r3, [sp, #28]
 800e708:	9a04      	ldr	r2, [sp, #16]
 800e70a:	4443      	add	r3, r8
 800e70c:	429a      	cmp	r2, r3
 800e70e:	db35      	blt.n	800e77c <__kernel_rem_pio2+0xe8>
 800e710:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e712:	2200      	movs	r2, #0
 800e714:	f1a3 0908 	sub.w	r9, r3, #8
 800e718:	2300      	movs	r3, #0
 800e71a:	462f      	mov	r7, r5
 800e71c:	2600      	movs	r6, #0
 800e71e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800e722:	e01f      	b.n	800e764 <__kernel_rem_pio2+0xd0>
 800e724:	42ef      	cmn	r7, r5
 800e726:	d40b      	bmi.n	800e740 <__kernel_rem_pio2+0xac>
 800e728:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800e72c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800e730:	f7f1 fea4 	bl	800047c <__aeabi_i2d>
 800e734:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e738:	e8e6 0102 	strd	r0, r1, [r6], #8
 800e73c:	3501      	adds	r5, #1
 800e73e:	e7d5      	b.n	800e6ec <__kernel_rem_pio2+0x58>
 800e740:	4610      	mov	r0, r2
 800e742:	4619      	mov	r1, r3
 800e744:	e7f8      	b.n	800e738 <__kernel_rem_pio2+0xa4>
 800e746:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e74a:	e9f9 0102 	ldrd	r0, r1, [r9, #8]!
 800e74e:	f7f1 feff 	bl	8000550 <__aeabi_dmul>
 800e752:	4602      	mov	r2, r0
 800e754:	460b      	mov	r3, r1
 800e756:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e75a:	f7f1 fd43 	bl	80001e4 <__adddf3>
 800e75e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e762:	3601      	adds	r6, #1
 800e764:	9b06      	ldr	r3, [sp, #24]
 800e766:	3f08      	subs	r7, #8
 800e768:	429e      	cmp	r6, r3
 800e76a:	ddec      	ble.n	800e746 <__kernel_rem_pio2+0xb2>
 800e76c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e770:	3508      	adds	r5, #8
 800e772:	e8eb 2302 	strd	r2, r3, [fp], #8
 800e776:	f108 0801 	add.w	r8, r8, #1
 800e77a:	e7c4      	b.n	800e706 <__kernel_rem_pio2+0x72>
 800e77c:	9b04      	ldr	r3, [sp, #16]
 800e77e:	aa0c      	add	r2, sp, #48	; 0x30
 800e780:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800e784:	930b      	str	r3, [sp, #44]	; 0x2c
 800e786:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 800e788:	9f04      	ldr	r7, [sp, #16]
 800e78a:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800e78e:	930a      	str	r3, [sp, #40]	; 0x28
 800e790:	463e      	mov	r6, r7
 800e792:	ab98      	add	r3, sp, #608	; 0x260
 800e794:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
 800e798:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800e79c:	f8cd b008 	str.w	fp, [sp, #8]
 800e7a0:	e953 4528 	ldrd	r4, r5, [r3, #-160]	; 0xa0
 800e7a4:	2e00      	cmp	r6, #0
 800e7a6:	dc71      	bgt.n	800e88c <__kernel_rem_pio2+0x1f8>
 800e7a8:	4652      	mov	r2, sl
 800e7aa:	4620      	mov	r0, r4
 800e7ac:	4629      	mov	r1, r5
 800e7ae:	f000 ffa3 	bl	800f6f8 <scalbn>
 800e7b2:	2200      	movs	r2, #0
 800e7b4:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800e7b8:	4604      	mov	r4, r0
 800e7ba:	460d      	mov	r5, r1
 800e7bc:	f7f1 fec8 	bl	8000550 <__aeabi_dmul>
 800e7c0:	f000 ff1a 	bl	800f5f8 <floor>
 800e7c4:	2200      	movs	r2, #0
 800e7c6:	4b78      	ldr	r3, [pc, #480]	; (800e9a8 <__kernel_rem_pio2+0x314>)
 800e7c8:	f7f1 fec2 	bl	8000550 <__aeabi_dmul>
 800e7cc:	4602      	mov	r2, r0
 800e7ce:	460b      	mov	r3, r1
 800e7d0:	4620      	mov	r0, r4
 800e7d2:	4629      	mov	r1, r5
 800e7d4:	f7f1 fd04 	bl	80001e0 <__aeabi_dsub>
 800e7d8:	460d      	mov	r5, r1
 800e7da:	4604      	mov	r4, r0
 800e7dc:	f7f2 f968 	bl	8000ab0 <__aeabi_d2iz>
 800e7e0:	9007      	str	r0, [sp, #28]
 800e7e2:	f7f1 fe4b 	bl	800047c <__aeabi_i2d>
 800e7e6:	4602      	mov	r2, r0
 800e7e8:	460b      	mov	r3, r1
 800e7ea:	4620      	mov	r0, r4
 800e7ec:	4629      	mov	r1, r5
 800e7ee:	f7f1 fcf7 	bl	80001e0 <__aeabi_dsub>
 800e7f2:	f1ba 0f00 	cmp.w	sl, #0
 800e7f6:	4680      	mov	r8, r0
 800e7f8:	4689      	mov	r9, r1
 800e7fa:	dd70      	ble.n	800e8de <__kernel_rem_pio2+0x24a>
 800e7fc:	1e7a      	subs	r2, r7, #1
 800e7fe:	ab0c      	add	r3, sp, #48	; 0x30
 800e800:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800e804:	9c07      	ldr	r4, [sp, #28]
 800e806:	f1ca 0118 	rsb	r1, sl, #24
 800e80a:	fa40 f301 	asr.w	r3, r0, r1
 800e80e:	441c      	add	r4, r3
 800e810:	408b      	lsls	r3, r1
 800e812:	1ac0      	subs	r0, r0, r3
 800e814:	ab0c      	add	r3, sp, #48	; 0x30
 800e816:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800e81a:	f1ca 0317 	rsb	r3, sl, #23
 800e81e:	9407      	str	r4, [sp, #28]
 800e820:	fa40 f303 	asr.w	r3, r0, r3
 800e824:	9302      	str	r3, [sp, #8]
 800e826:	9b02      	ldr	r3, [sp, #8]
 800e828:	2b00      	cmp	r3, #0
 800e82a:	dd66      	ble.n	800e8fa <__kernel_rem_pio2+0x266>
 800e82c:	2200      	movs	r2, #0
 800e82e:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800e832:	4614      	mov	r4, r2
 800e834:	9b07      	ldr	r3, [sp, #28]
 800e836:	3301      	adds	r3, #1
 800e838:	9307      	str	r3, [sp, #28]
 800e83a:	4297      	cmp	r7, r2
 800e83c:	f300 809f 	bgt.w	800e97e <__kernel_rem_pio2+0x2ea>
 800e840:	f1ba 0f00 	cmp.w	sl, #0
 800e844:	dd07      	ble.n	800e856 <__kernel_rem_pio2+0x1c2>
 800e846:	f1ba 0f01 	cmp.w	sl, #1
 800e84a:	f000 80b9 	beq.w	800e9c0 <__kernel_rem_pio2+0x32c>
 800e84e:	f1ba 0f02 	cmp.w	sl, #2
 800e852:	f000 80bf 	beq.w	800e9d4 <__kernel_rem_pio2+0x340>
 800e856:	9b02      	ldr	r3, [sp, #8]
 800e858:	2b02      	cmp	r3, #2
 800e85a:	d14e      	bne.n	800e8fa <__kernel_rem_pio2+0x266>
 800e85c:	4642      	mov	r2, r8
 800e85e:	464b      	mov	r3, r9
 800e860:	2000      	movs	r0, #0
 800e862:	4952      	ldr	r1, [pc, #328]	; (800e9ac <__kernel_rem_pio2+0x318>)
 800e864:	f7f1 fcbc 	bl	80001e0 <__aeabi_dsub>
 800e868:	4680      	mov	r8, r0
 800e86a:	4689      	mov	r9, r1
 800e86c:	2c00      	cmp	r4, #0
 800e86e:	d044      	beq.n	800e8fa <__kernel_rem_pio2+0x266>
 800e870:	4652      	mov	r2, sl
 800e872:	2000      	movs	r0, #0
 800e874:	494d      	ldr	r1, [pc, #308]	; (800e9ac <__kernel_rem_pio2+0x318>)
 800e876:	f000 ff3f 	bl	800f6f8 <scalbn>
 800e87a:	4602      	mov	r2, r0
 800e87c:	460b      	mov	r3, r1
 800e87e:	4640      	mov	r0, r8
 800e880:	4649      	mov	r1, r9
 800e882:	f7f1 fcad 	bl	80001e0 <__aeabi_dsub>
 800e886:	4680      	mov	r8, r0
 800e888:	4689      	mov	r9, r1
 800e88a:	e036      	b.n	800e8fa <__kernel_rem_pio2+0x266>
 800e88c:	2200      	movs	r2, #0
 800e88e:	4b48      	ldr	r3, [pc, #288]	; (800e9b0 <__kernel_rem_pio2+0x31c>)
 800e890:	4620      	mov	r0, r4
 800e892:	4629      	mov	r1, r5
 800e894:	f7f1 fe5c 	bl	8000550 <__aeabi_dmul>
 800e898:	f7f2 f90a 	bl	8000ab0 <__aeabi_d2iz>
 800e89c:	f7f1 fdee 	bl	800047c <__aeabi_i2d>
 800e8a0:	2200      	movs	r2, #0
 800e8a2:	4b44      	ldr	r3, [pc, #272]	; (800e9b4 <__kernel_rem_pio2+0x320>)
 800e8a4:	4680      	mov	r8, r0
 800e8a6:	4689      	mov	r9, r1
 800e8a8:	f7f1 fe52 	bl	8000550 <__aeabi_dmul>
 800e8ac:	4602      	mov	r2, r0
 800e8ae:	460b      	mov	r3, r1
 800e8b0:	4620      	mov	r0, r4
 800e8b2:	4629      	mov	r1, r5
 800e8b4:	f7f1 fc94 	bl	80001e0 <__aeabi_dsub>
 800e8b8:	f7f2 f8fa 	bl	8000ab0 <__aeabi_d2iz>
 800e8bc:	9b02      	ldr	r3, [sp, #8]
 800e8be:	3e01      	subs	r6, #1
 800e8c0:	f843 0b04 	str.w	r0, [r3], #4
 800e8c4:	9302      	str	r3, [sp, #8]
 800e8c6:	ab70      	add	r3, sp, #448	; 0x1c0
 800e8c8:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800e8cc:	4640      	mov	r0, r8
 800e8ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e8d2:	4649      	mov	r1, r9
 800e8d4:	f7f1 fc86 	bl	80001e4 <__adddf3>
 800e8d8:	4604      	mov	r4, r0
 800e8da:	460d      	mov	r5, r1
 800e8dc:	e762      	b.n	800e7a4 <__kernel_rem_pio2+0x110>
 800e8de:	d105      	bne.n	800e8ec <__kernel_rem_pio2+0x258>
 800e8e0:	1e7b      	subs	r3, r7, #1
 800e8e2:	aa0c      	add	r2, sp, #48	; 0x30
 800e8e4:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800e8e8:	15c3      	asrs	r3, r0, #23
 800e8ea:	e79b      	b.n	800e824 <__kernel_rem_pio2+0x190>
 800e8ec:	2200      	movs	r2, #0
 800e8ee:	4b32      	ldr	r3, [pc, #200]	; (800e9b8 <__kernel_rem_pio2+0x324>)
 800e8f0:	f7f2 f8b4 	bl	8000a5c <__aeabi_dcmpge>
 800e8f4:	2800      	cmp	r0, #0
 800e8f6:	d13f      	bne.n	800e978 <__kernel_rem_pio2+0x2e4>
 800e8f8:	9002      	str	r0, [sp, #8]
 800e8fa:	2200      	movs	r2, #0
 800e8fc:	2300      	movs	r3, #0
 800e8fe:	4640      	mov	r0, r8
 800e900:	4649      	mov	r1, r9
 800e902:	f7f2 f88d 	bl	8000a20 <__aeabi_dcmpeq>
 800e906:	2800      	cmp	r0, #0
 800e908:	f000 80b5 	beq.w	800ea76 <__kernel_rem_pio2+0x3e2>
 800e90c:	1e7c      	subs	r4, r7, #1
 800e90e:	4623      	mov	r3, r4
 800e910:	2200      	movs	r2, #0
 800e912:	9904      	ldr	r1, [sp, #16]
 800e914:	428b      	cmp	r3, r1
 800e916:	da64      	bge.n	800e9e2 <__kernel_rem_pio2+0x34e>
 800e918:	2a00      	cmp	r2, #0
 800e91a:	d078      	beq.n	800ea0e <__kernel_rem_pio2+0x37a>
 800e91c:	ab0c      	add	r3, sp, #48	; 0x30
 800e91e:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800e922:	f1aa 0a18 	sub.w	sl, sl, #24
 800e926:	2b00      	cmp	r3, #0
 800e928:	f000 80a3 	beq.w	800ea72 <__kernel_rem_pio2+0x3de>
 800e92c:	4652      	mov	r2, sl
 800e92e:	2000      	movs	r0, #0
 800e930:	491e      	ldr	r1, [pc, #120]	; (800e9ac <__kernel_rem_pio2+0x318>)
 800e932:	f000 fee1 	bl	800f6f8 <scalbn>
 800e936:	46a2      	mov	sl, r4
 800e938:	4606      	mov	r6, r0
 800e93a:	460f      	mov	r7, r1
 800e93c:	f04f 0800 	mov.w	r8, #0
 800e940:	00e3      	lsls	r3, r4, #3
 800e942:	9306      	str	r3, [sp, #24]
 800e944:	f8df 9068 	ldr.w	r9, [pc, #104]	; 800e9b0 <__kernel_rem_pio2+0x31c>
 800e948:	ab70      	add	r3, sp, #448	; 0x1c0
 800e94a:	eb03 0bc4 	add.w	fp, r3, r4, lsl #3
 800e94e:	f1ba 0f00 	cmp.w	sl, #0
 800e952:	f280 80c6 	bge.w	800eae2 <__kernel_rem_pio2+0x44e>
 800e956:	4627      	mov	r7, r4
 800e958:	f04f 0800 	mov.w	r8, #0
 800e95c:	2f00      	cmp	r7, #0
 800e95e:	f2c0 80f3 	blt.w	800eb48 <__kernel_rem_pio2+0x4b4>
 800e962:	4b16      	ldr	r3, [pc, #88]	; (800e9bc <__kernel_rem_pio2+0x328>)
 800e964:	f04f 0a00 	mov.w	sl, #0
 800e968:	461d      	mov	r5, r3
 800e96a:	ab70      	add	r3, sp, #448	; 0x1c0
 800e96c:	f04f 0b00 	mov.w	fp, #0
 800e970:	2600      	movs	r6, #0
 800e972:	eb03 09c7 	add.w	r9, r3, r7, lsl #3
 800e976:	e0d9      	b.n	800eb2c <__kernel_rem_pio2+0x498>
 800e978:	2302      	movs	r3, #2
 800e97a:	9302      	str	r3, [sp, #8]
 800e97c:	e756      	b.n	800e82c <__kernel_rem_pio2+0x198>
 800e97e:	f8db 3000 	ldr.w	r3, [fp]
 800e982:	b954      	cbnz	r4, 800e99a <__kernel_rem_pio2+0x306>
 800e984:	b123      	cbz	r3, 800e990 <__kernel_rem_pio2+0x2fc>
 800e986:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800e98a:	f8cb 3000 	str.w	r3, [fp]
 800e98e:	2301      	movs	r3, #1
 800e990:	461c      	mov	r4, r3
 800e992:	3201      	adds	r2, #1
 800e994:	f10b 0b04 	add.w	fp, fp, #4
 800e998:	e74f      	b.n	800e83a <__kernel_rem_pio2+0x1a6>
 800e99a:	1acb      	subs	r3, r1, r3
 800e99c:	f8cb 3000 	str.w	r3, [fp]
 800e9a0:	4623      	mov	r3, r4
 800e9a2:	e7f5      	b.n	800e990 <__kernel_rem_pio2+0x2fc>
 800e9a4:	080135a8 	.word	0x080135a8
 800e9a8:	40200000 	.word	0x40200000
 800e9ac:	3ff00000 	.word	0x3ff00000
 800e9b0:	3e700000 	.word	0x3e700000
 800e9b4:	41700000 	.word	0x41700000
 800e9b8:	3fe00000 	.word	0x3fe00000
 800e9bc:	08013568 	.word	0x08013568
 800e9c0:	1e7a      	subs	r2, r7, #1
 800e9c2:	ab0c      	add	r3, sp, #48	; 0x30
 800e9c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e9c8:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800e9cc:	a90c      	add	r1, sp, #48	; 0x30
 800e9ce:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800e9d2:	e740      	b.n	800e856 <__kernel_rem_pio2+0x1c2>
 800e9d4:	1e7a      	subs	r2, r7, #1
 800e9d6:	ab0c      	add	r3, sp, #48	; 0x30
 800e9d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e9dc:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800e9e0:	e7f4      	b.n	800e9cc <__kernel_rem_pio2+0x338>
 800e9e2:	a90c      	add	r1, sp, #48	; 0x30
 800e9e4:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800e9e8:	3b01      	subs	r3, #1
 800e9ea:	430a      	orrs	r2, r1
 800e9ec:	e791      	b.n	800e912 <__kernel_rem_pio2+0x27e>
 800e9ee:	3401      	adds	r4, #1
 800e9f0:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800e9f4:	2a00      	cmp	r2, #0
 800e9f6:	d0fa      	beq.n	800e9ee <__kernel_rem_pio2+0x35a>
 800e9f8:	9b08      	ldr	r3, [sp, #32]
 800e9fa:	1c7e      	adds	r6, r7, #1
 800e9fc:	18fd      	adds	r5, r7, r3
 800e9fe:	ab20      	add	r3, sp, #128	; 0x80
 800ea00:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800ea04:	443c      	add	r4, r7
 800ea06:	42b4      	cmp	r4, r6
 800ea08:	da04      	bge.n	800ea14 <__kernel_rem_pio2+0x380>
 800ea0a:	4627      	mov	r7, r4
 800ea0c:	e6c0      	b.n	800e790 <__kernel_rem_pio2+0xfc>
 800ea0e:	2401      	movs	r4, #1
 800ea10:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ea12:	e7ed      	b.n	800e9f0 <__kernel_rem_pio2+0x35c>
 800ea14:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ea16:	462f      	mov	r7, r5
 800ea18:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800ea1c:	f7f1 fd2e 	bl	800047c <__aeabi_i2d>
 800ea20:	f04f 0b00 	mov.w	fp, #0
 800ea24:	f04f 0800 	mov.w	r8, #0
 800ea28:	f04f 0900 	mov.w	r9, #0
 800ea2c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ea2e:	e8e7 0102 	strd	r0, r1, [r7], #8
 800ea32:	3b08      	subs	r3, #8
 800ea34:	9302      	str	r3, [sp, #8]
 800ea36:	9b06      	ldr	r3, [sp, #24]
 800ea38:	459b      	cmp	fp, r3
 800ea3a:	dd07      	ble.n	800ea4c <__kernel_rem_pio2+0x3b8>
 800ea3c:	ab70      	add	r3, sp, #448	; 0x1c0
 800ea3e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800ea42:	463d      	mov	r5, r7
 800ea44:	e9c3 8900 	strd	r8, r9, [r3]
 800ea48:	3601      	adds	r6, #1
 800ea4a:	e7dc      	b.n	800ea06 <__kernel_rem_pio2+0x372>
 800ea4c:	9902      	ldr	r1, [sp, #8]
 800ea4e:	f10b 0b01 	add.w	fp, fp, #1
 800ea52:	e9f1 2302 	ldrd	r2, r3, [r1, #8]!
 800ea56:	9102      	str	r1, [sp, #8]
 800ea58:	e875 0102 	ldrd	r0, r1, [r5], #-8
 800ea5c:	f7f1 fd78 	bl	8000550 <__aeabi_dmul>
 800ea60:	4602      	mov	r2, r0
 800ea62:	460b      	mov	r3, r1
 800ea64:	4640      	mov	r0, r8
 800ea66:	4649      	mov	r1, r9
 800ea68:	f7f1 fbbc 	bl	80001e4 <__adddf3>
 800ea6c:	4680      	mov	r8, r0
 800ea6e:	4689      	mov	r9, r1
 800ea70:	e7e1      	b.n	800ea36 <__kernel_rem_pio2+0x3a2>
 800ea72:	3c01      	subs	r4, #1
 800ea74:	e752      	b.n	800e91c <__kernel_rem_pio2+0x288>
 800ea76:	f1ca 0200 	rsb	r2, sl, #0
 800ea7a:	4640      	mov	r0, r8
 800ea7c:	4649      	mov	r1, r9
 800ea7e:	f000 fe3b 	bl	800f6f8 <scalbn>
 800ea82:	2200      	movs	r2, #0
 800ea84:	4ba5      	ldr	r3, [pc, #660]	; (800ed1c <__kernel_rem_pio2+0x688>)
 800ea86:	4604      	mov	r4, r0
 800ea88:	460d      	mov	r5, r1
 800ea8a:	f7f1 ffe7 	bl	8000a5c <__aeabi_dcmpge>
 800ea8e:	b1f8      	cbz	r0, 800ead0 <__kernel_rem_pio2+0x43c>
 800ea90:	2200      	movs	r2, #0
 800ea92:	4ba3      	ldr	r3, [pc, #652]	; (800ed20 <__kernel_rem_pio2+0x68c>)
 800ea94:	4620      	mov	r0, r4
 800ea96:	4629      	mov	r1, r5
 800ea98:	f7f1 fd5a 	bl	8000550 <__aeabi_dmul>
 800ea9c:	f7f2 f808 	bl	8000ab0 <__aeabi_d2iz>
 800eaa0:	4606      	mov	r6, r0
 800eaa2:	f7f1 fceb 	bl	800047c <__aeabi_i2d>
 800eaa6:	2200      	movs	r2, #0
 800eaa8:	4b9c      	ldr	r3, [pc, #624]	; (800ed1c <__kernel_rem_pio2+0x688>)
 800eaaa:	f7f1 fd51 	bl	8000550 <__aeabi_dmul>
 800eaae:	460b      	mov	r3, r1
 800eab0:	4602      	mov	r2, r0
 800eab2:	4629      	mov	r1, r5
 800eab4:	4620      	mov	r0, r4
 800eab6:	f7f1 fb93 	bl	80001e0 <__aeabi_dsub>
 800eaba:	f7f1 fff9 	bl	8000ab0 <__aeabi_d2iz>
 800eabe:	1c7c      	adds	r4, r7, #1
 800eac0:	ab0c      	add	r3, sp, #48	; 0x30
 800eac2:	f843 0027 	str.w	r0, [r3, r7, lsl #2]
 800eac6:	f10a 0a18 	add.w	sl, sl, #24
 800eaca:	f843 6024 	str.w	r6, [r3, r4, lsl #2]
 800eace:	e72d      	b.n	800e92c <__kernel_rem_pio2+0x298>
 800ead0:	4620      	mov	r0, r4
 800ead2:	4629      	mov	r1, r5
 800ead4:	f7f1 ffec 	bl	8000ab0 <__aeabi_d2iz>
 800ead8:	ab0c      	add	r3, sp, #48	; 0x30
 800eada:	463c      	mov	r4, r7
 800eadc:	f843 0027 	str.w	r0, [r3, r7, lsl #2]
 800eae0:	e724      	b.n	800e92c <__kernel_rem_pio2+0x298>
 800eae2:	ab0c      	add	r3, sp, #48	; 0x30
 800eae4:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 800eae8:	f7f1 fcc8 	bl	800047c <__aeabi_i2d>
 800eaec:	4632      	mov	r2, r6
 800eaee:	463b      	mov	r3, r7
 800eaf0:	f7f1 fd2e 	bl	8000550 <__aeabi_dmul>
 800eaf4:	4642      	mov	r2, r8
 800eaf6:	e86b 0102 	strd	r0, r1, [fp], #-8
 800eafa:	464b      	mov	r3, r9
 800eafc:	4630      	mov	r0, r6
 800eafe:	4639      	mov	r1, r7
 800eb00:	f7f1 fd26 	bl	8000550 <__aeabi_dmul>
 800eb04:	f10a 3aff 	add.w	sl, sl, #4294967295
 800eb08:	4606      	mov	r6, r0
 800eb0a:	460f      	mov	r7, r1
 800eb0c:	e71f      	b.n	800e94e <__kernel_rem_pio2+0x2ba>
 800eb0e:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 800eb12:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 800eb16:	f7f1 fd1b 	bl	8000550 <__aeabi_dmul>
 800eb1a:	4602      	mov	r2, r0
 800eb1c:	460b      	mov	r3, r1
 800eb1e:	4650      	mov	r0, sl
 800eb20:	4659      	mov	r1, fp
 800eb22:	f7f1 fb5f 	bl	80001e4 <__adddf3>
 800eb26:	4682      	mov	sl, r0
 800eb28:	468b      	mov	fp, r1
 800eb2a:	3601      	adds	r6, #1
 800eb2c:	9b04      	ldr	r3, [sp, #16]
 800eb2e:	429e      	cmp	r6, r3
 800eb30:	dc01      	bgt.n	800eb36 <__kernel_rem_pio2+0x4a2>
 800eb32:	45b0      	cmp	r8, r6
 800eb34:	daeb      	bge.n	800eb0e <__kernel_rem_pio2+0x47a>
 800eb36:	ab48      	add	r3, sp, #288	; 0x120
 800eb38:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800eb3c:	e9c3 ab00 	strd	sl, fp, [r3]
 800eb40:	3f01      	subs	r7, #1
 800eb42:	f108 0801 	add.w	r8, r8, #1
 800eb46:	e709      	b.n	800e95c <__kernel_rem_pio2+0x2c8>
 800eb48:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 800eb4a:	2b02      	cmp	r3, #2
 800eb4c:	dc09      	bgt.n	800eb62 <__kernel_rem_pio2+0x4ce>
 800eb4e:	2b00      	cmp	r3, #0
 800eb50:	dc34      	bgt.n	800ebbc <__kernel_rem_pio2+0x528>
 800eb52:	d05e      	beq.n	800ec12 <__kernel_rem_pio2+0x57e>
 800eb54:	9b07      	ldr	r3, [sp, #28]
 800eb56:	f003 0007 	and.w	r0, r3, #7
 800eb5a:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 800eb5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eb62:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 800eb64:	2b03      	cmp	r3, #3
 800eb66:	d1f5      	bne.n	800eb54 <__kernel_rem_pio2+0x4c0>
 800eb68:	9a06      	ldr	r2, [sp, #24]
 800eb6a:	ab48      	add	r3, sp, #288	; 0x120
 800eb6c:	441a      	add	r2, r3
 800eb6e:	4615      	mov	r5, r2
 800eb70:	4692      	mov	sl, r2
 800eb72:	46a3      	mov	fp, r4
 800eb74:	f1bb 0f00 	cmp.w	fp, #0
 800eb78:	dc7a      	bgt.n	800ec70 <__kernel_rem_pio2+0x5dc>
 800eb7a:	46aa      	mov	sl, r5
 800eb7c:	46a3      	mov	fp, r4
 800eb7e:	f1bb 0f01 	cmp.w	fp, #1
 800eb82:	f300 8094 	bgt.w	800ecae <__kernel_rem_pio2+0x61a>
 800eb86:	2700      	movs	r7, #0
 800eb88:	463e      	mov	r6, r7
 800eb8a:	2c01      	cmp	r4, #1
 800eb8c:	f300 80ae 	bgt.w	800ecec <__kernel_rem_pio2+0x658>
 800eb90:	e9dd 5048 	ldrd	r5, r0, [sp, #288]	; 0x120
 800eb94:	e9dd 414a 	ldrd	r4, r1, [sp, #296]	; 0x128
 800eb98:	9b02      	ldr	r3, [sp, #8]
 800eb9a:	2b00      	cmp	r3, #0
 800eb9c:	f040 80b0 	bne.w	800ed00 <__kernel_rem_pio2+0x66c>
 800eba0:	4603      	mov	r3, r0
 800eba2:	462a      	mov	r2, r5
 800eba4:	9801      	ldr	r0, [sp, #4]
 800eba6:	e9c0 2300 	strd	r2, r3, [r0]
 800ebaa:	4622      	mov	r2, r4
 800ebac:	460b      	mov	r3, r1
 800ebae:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800ebb2:	463a      	mov	r2, r7
 800ebb4:	4633      	mov	r3, r6
 800ebb6:	e9c0 2304 	strd	r2, r3, [r0, #16]
 800ebba:	e7cb      	b.n	800eb54 <__kernel_rem_pio2+0x4c0>
 800ebbc:	2000      	movs	r0, #0
 800ebbe:	9a06      	ldr	r2, [sp, #24]
 800ebc0:	ab48      	add	r3, sp, #288	; 0x120
 800ebc2:	441a      	add	r2, r3
 800ebc4:	4615      	mov	r5, r2
 800ebc6:	46a0      	mov	r8, r4
 800ebc8:	4601      	mov	r1, r0
 800ebca:	f1b8 0f00 	cmp.w	r8, #0
 800ebce:	da3c      	bge.n	800ec4a <__kernel_rem_pio2+0x5b6>
 800ebd0:	9b02      	ldr	r3, [sp, #8]
 800ebd2:	2b00      	cmp	r3, #0
 800ebd4:	d040      	beq.n	800ec58 <__kernel_rem_pio2+0x5c4>
 800ebd6:	f101 4500 	add.w	r5, r1, #2147483648	; 0x80000000
 800ebda:	4602      	mov	r2, r0
 800ebdc:	462b      	mov	r3, r5
 800ebde:	9d01      	ldr	r5, [sp, #4]
 800ebe0:	2601      	movs	r6, #1
 800ebe2:	e9c5 2300 	strd	r2, r3, [r5]
 800ebe6:	460b      	mov	r3, r1
 800ebe8:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 800ebec:	f7f1 faf8 	bl	80001e0 <__aeabi_dsub>
 800ebf0:	4684      	mov	ip, r0
 800ebf2:	460f      	mov	r7, r1
 800ebf4:	ad48      	add	r5, sp, #288	; 0x120
 800ebf6:	42b4      	cmp	r4, r6
 800ebf8:	f105 0508 	add.w	r5, r5, #8
 800ebfc:	da2e      	bge.n	800ec5c <__kernel_rem_pio2+0x5c8>
 800ebfe:	9b02      	ldr	r3, [sp, #8]
 800ec00:	b10b      	cbz	r3, 800ec06 <__kernel_rem_pio2+0x572>
 800ec02:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
 800ec06:	4662      	mov	r2, ip
 800ec08:	463b      	mov	r3, r7
 800ec0a:	9901      	ldr	r1, [sp, #4]
 800ec0c:	e9c1 2302 	strd	r2, r3, [r1, #8]
 800ec10:	e7a0      	b.n	800eb54 <__kernel_rem_pio2+0x4c0>
 800ec12:	9a06      	ldr	r2, [sp, #24]
 800ec14:	9ea2      	ldr	r6, [sp, #648]	; 0x288
 800ec16:	ab48      	add	r3, sp, #288	; 0x120
 800ec18:	441a      	add	r2, r3
 800ec1a:	4615      	mov	r5, r2
 800ec1c:	4637      	mov	r7, r6
 800ec1e:	2c00      	cmp	r4, #0
 800ec20:	da09      	bge.n	800ec36 <__kernel_rem_pio2+0x5a2>
 800ec22:	9b02      	ldr	r3, [sp, #8]
 800ec24:	b10b      	cbz	r3, 800ec2a <__kernel_rem_pio2+0x596>
 800ec26:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
 800ec2a:	4632      	mov	r2, r6
 800ec2c:	463b      	mov	r3, r7
 800ec2e:	9901      	ldr	r1, [sp, #4]
 800ec30:	e9c1 2300 	strd	r2, r3, [r1]
 800ec34:	e78e      	b.n	800eb54 <__kernel_rem_pio2+0x4c0>
 800ec36:	4630      	mov	r0, r6
 800ec38:	e875 2302 	ldrd	r2, r3, [r5], #-8
 800ec3c:	4639      	mov	r1, r7
 800ec3e:	f7f1 fad1 	bl	80001e4 <__adddf3>
 800ec42:	3c01      	subs	r4, #1
 800ec44:	4606      	mov	r6, r0
 800ec46:	460f      	mov	r7, r1
 800ec48:	e7e9      	b.n	800ec1e <__kernel_rem_pio2+0x58a>
 800ec4a:	e875 2302 	ldrd	r2, r3, [r5], #-8
 800ec4e:	f7f1 fac9 	bl	80001e4 <__adddf3>
 800ec52:	f108 38ff 	add.w	r8, r8, #4294967295
 800ec56:	e7b8      	b.n	800ebca <__kernel_rem_pio2+0x536>
 800ec58:	460d      	mov	r5, r1
 800ec5a:	e7be      	b.n	800ebda <__kernel_rem_pio2+0x546>
 800ec5c:	4660      	mov	r0, ip
 800ec5e:	e9d5 2300 	ldrd	r2, r3, [r5]
 800ec62:	4639      	mov	r1, r7
 800ec64:	f7f1 fabe 	bl	80001e4 <__adddf3>
 800ec68:	3601      	adds	r6, #1
 800ec6a:	4684      	mov	ip, r0
 800ec6c:	460f      	mov	r7, r1
 800ec6e:	e7c2      	b.n	800ebf6 <__kernel_rem_pio2+0x562>
 800ec70:	e9da 6700 	ldrd	r6, r7, [sl]
 800ec74:	e95a 8902 	ldrd	r8, r9, [sl, #-8]
 800ec78:	4632      	mov	r2, r6
 800ec7a:	463b      	mov	r3, r7
 800ec7c:	4640      	mov	r0, r8
 800ec7e:	4649      	mov	r1, r9
 800ec80:	f7f1 fab0 	bl	80001e4 <__adddf3>
 800ec84:	4602      	mov	r2, r0
 800ec86:	460b      	mov	r3, r1
 800ec88:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ec8c:	4640      	mov	r0, r8
 800ec8e:	4649      	mov	r1, r9
 800ec90:	f7f1 faa6 	bl	80001e0 <__aeabi_dsub>
 800ec94:	4632      	mov	r2, r6
 800ec96:	463b      	mov	r3, r7
 800ec98:	f7f1 faa4 	bl	80001e4 <__adddf3>
 800ec9c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800eca0:	e86a 0102 	strd	r0, r1, [sl], #-8
 800eca4:	f10b 3bff 	add.w	fp, fp, #4294967295
 800eca8:	e9ca 2300 	strd	r2, r3, [sl]
 800ecac:	e762      	b.n	800eb74 <__kernel_rem_pio2+0x4e0>
 800ecae:	e9da 8900 	ldrd	r8, r9, [sl]
 800ecb2:	e95a 6702 	ldrd	r6, r7, [sl, #-8]
 800ecb6:	4642      	mov	r2, r8
 800ecb8:	464b      	mov	r3, r9
 800ecba:	4630      	mov	r0, r6
 800ecbc:	4639      	mov	r1, r7
 800ecbe:	f7f1 fa91 	bl	80001e4 <__adddf3>
 800ecc2:	4602      	mov	r2, r0
 800ecc4:	460b      	mov	r3, r1
 800ecc6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ecca:	4630      	mov	r0, r6
 800eccc:	4639      	mov	r1, r7
 800ecce:	f7f1 fa87 	bl	80001e0 <__aeabi_dsub>
 800ecd2:	4642      	mov	r2, r8
 800ecd4:	464b      	mov	r3, r9
 800ecd6:	f7f1 fa85 	bl	80001e4 <__adddf3>
 800ecda:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ecde:	e86a 0102 	strd	r0, r1, [sl], #-8
 800ece2:	f10b 3bff 	add.w	fp, fp, #4294967295
 800ece6:	e9ca 2300 	strd	r2, r3, [sl]
 800ecea:	e748      	b.n	800eb7e <__kernel_rem_pio2+0x4ea>
 800ecec:	4638      	mov	r0, r7
 800ecee:	e875 2302 	ldrd	r2, r3, [r5], #-8
 800ecf2:	4631      	mov	r1, r6
 800ecf4:	f7f1 fa76 	bl	80001e4 <__adddf3>
 800ecf8:	3c01      	subs	r4, #1
 800ecfa:	4607      	mov	r7, r0
 800ecfc:	460e      	mov	r6, r1
 800ecfe:	e744      	b.n	800eb8a <__kernel_rem_pio2+0x4f6>
 800ed00:	9b01      	ldr	r3, [sp, #4]
 800ed02:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800ed06:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 800ed0a:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
 800ed0e:	e9c3 0401 	strd	r0, r4, [r3, #4]
 800ed12:	e9c3 1703 	strd	r1, r7, [r3, #12]
 800ed16:	601d      	str	r5, [r3, #0]
 800ed18:	615e      	str	r6, [r3, #20]
 800ed1a:	e71b      	b.n	800eb54 <__kernel_rem_pio2+0x4c0>
 800ed1c:	41700000 	.word	0x41700000
 800ed20:	3e700000 	.word	0x3e700000
 800ed24:	00000000 	.word	0x00000000

0800ed28 <__kernel_sin>:
 800ed28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ed2c:	b086      	sub	sp, #24
 800ed2e:	e9cd 2300 	strd	r2, r3, [sp]
 800ed32:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800ed36:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800ed3a:	4682      	mov	sl, r0
 800ed3c:	460c      	mov	r4, r1
 800ed3e:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 800ed40:	da03      	bge.n	800ed4a <__kernel_sin+0x22>
 800ed42:	f7f1 feb5 	bl	8000ab0 <__aeabi_d2iz>
 800ed46:	2800      	cmp	r0, #0
 800ed48:	d050      	beq.n	800edec <__kernel_sin+0xc4>
 800ed4a:	4652      	mov	r2, sl
 800ed4c:	4623      	mov	r3, r4
 800ed4e:	4650      	mov	r0, sl
 800ed50:	4621      	mov	r1, r4
 800ed52:	f7f1 fbfd 	bl	8000550 <__aeabi_dmul>
 800ed56:	4606      	mov	r6, r0
 800ed58:	460f      	mov	r7, r1
 800ed5a:	4602      	mov	r2, r0
 800ed5c:	460b      	mov	r3, r1
 800ed5e:	4650      	mov	r0, sl
 800ed60:	4621      	mov	r1, r4
 800ed62:	f7f1 fbf5 	bl	8000550 <__aeabi_dmul>
 800ed66:	a33e      	add	r3, pc, #248	; (adr r3, 800ee60 <__kernel_sin+0x138>)
 800ed68:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed6c:	4680      	mov	r8, r0
 800ed6e:	4689      	mov	r9, r1
 800ed70:	4630      	mov	r0, r6
 800ed72:	4639      	mov	r1, r7
 800ed74:	f7f1 fbec 	bl	8000550 <__aeabi_dmul>
 800ed78:	a33b      	add	r3, pc, #236	; (adr r3, 800ee68 <__kernel_sin+0x140>)
 800ed7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed7e:	f7f1 fa2f 	bl	80001e0 <__aeabi_dsub>
 800ed82:	4632      	mov	r2, r6
 800ed84:	463b      	mov	r3, r7
 800ed86:	f7f1 fbe3 	bl	8000550 <__aeabi_dmul>
 800ed8a:	a339      	add	r3, pc, #228	; (adr r3, 800ee70 <__kernel_sin+0x148>)
 800ed8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed90:	f7f1 fa28 	bl	80001e4 <__adddf3>
 800ed94:	4632      	mov	r2, r6
 800ed96:	463b      	mov	r3, r7
 800ed98:	f7f1 fbda 	bl	8000550 <__aeabi_dmul>
 800ed9c:	a336      	add	r3, pc, #216	; (adr r3, 800ee78 <__kernel_sin+0x150>)
 800ed9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eda2:	f7f1 fa1d 	bl	80001e0 <__aeabi_dsub>
 800eda6:	4632      	mov	r2, r6
 800eda8:	463b      	mov	r3, r7
 800edaa:	f7f1 fbd1 	bl	8000550 <__aeabi_dmul>
 800edae:	a334      	add	r3, pc, #208	; (adr r3, 800ee80 <__kernel_sin+0x158>)
 800edb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800edb4:	f7f1 fa16 	bl	80001e4 <__adddf3>
 800edb8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800edbc:	b9dd      	cbnz	r5, 800edf6 <__kernel_sin+0xce>
 800edbe:	4602      	mov	r2, r0
 800edc0:	460b      	mov	r3, r1
 800edc2:	4630      	mov	r0, r6
 800edc4:	4639      	mov	r1, r7
 800edc6:	f7f1 fbc3 	bl	8000550 <__aeabi_dmul>
 800edca:	a32f      	add	r3, pc, #188	; (adr r3, 800ee88 <__kernel_sin+0x160>)
 800edcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800edd0:	f7f1 fa06 	bl	80001e0 <__aeabi_dsub>
 800edd4:	4642      	mov	r2, r8
 800edd6:	464b      	mov	r3, r9
 800edd8:	f7f1 fbba 	bl	8000550 <__aeabi_dmul>
 800eddc:	4602      	mov	r2, r0
 800edde:	460b      	mov	r3, r1
 800ede0:	4650      	mov	r0, sl
 800ede2:	4621      	mov	r1, r4
 800ede4:	f7f1 f9fe 	bl	80001e4 <__adddf3>
 800ede8:	4682      	mov	sl, r0
 800edea:	460c      	mov	r4, r1
 800edec:	4650      	mov	r0, sl
 800edee:	4621      	mov	r1, r4
 800edf0:	b006      	add	sp, #24
 800edf2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800edf6:	2200      	movs	r2, #0
 800edf8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800edfc:	4b24      	ldr	r3, [pc, #144]	; (800ee90 <__kernel_sin+0x168>)
 800edfe:	f7f1 fba7 	bl	8000550 <__aeabi_dmul>
 800ee02:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ee06:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ee0a:	4640      	mov	r0, r8
 800ee0c:	4649      	mov	r1, r9
 800ee0e:	f7f1 fb9f 	bl	8000550 <__aeabi_dmul>
 800ee12:	4602      	mov	r2, r0
 800ee14:	460b      	mov	r3, r1
 800ee16:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ee1a:	f7f1 f9e1 	bl	80001e0 <__aeabi_dsub>
 800ee1e:	4632      	mov	r2, r6
 800ee20:	463b      	mov	r3, r7
 800ee22:	f7f1 fb95 	bl	8000550 <__aeabi_dmul>
 800ee26:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ee2a:	f7f1 f9d9 	bl	80001e0 <__aeabi_dsub>
 800ee2e:	a316      	add	r3, pc, #88	; (adr r3, 800ee88 <__kernel_sin+0x160>)
 800ee30:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee34:	4606      	mov	r6, r0
 800ee36:	460f      	mov	r7, r1
 800ee38:	4640      	mov	r0, r8
 800ee3a:	4649      	mov	r1, r9
 800ee3c:	f7f1 fb88 	bl	8000550 <__aeabi_dmul>
 800ee40:	4602      	mov	r2, r0
 800ee42:	460b      	mov	r3, r1
 800ee44:	4630      	mov	r0, r6
 800ee46:	4639      	mov	r1, r7
 800ee48:	f7f1 f9cc 	bl	80001e4 <__adddf3>
 800ee4c:	4602      	mov	r2, r0
 800ee4e:	460b      	mov	r3, r1
 800ee50:	4650      	mov	r0, sl
 800ee52:	4621      	mov	r1, r4
 800ee54:	f7f1 f9c4 	bl	80001e0 <__aeabi_dsub>
 800ee58:	e7c6      	b.n	800ede8 <__kernel_sin+0xc0>
 800ee5a:	bf00      	nop
 800ee5c:	f3af 8000 	nop.w
 800ee60:	5acfd57c 	.word	0x5acfd57c
 800ee64:	3de5d93a 	.word	0x3de5d93a
 800ee68:	8a2b9ceb 	.word	0x8a2b9ceb
 800ee6c:	3e5ae5e6 	.word	0x3e5ae5e6
 800ee70:	57b1fe7d 	.word	0x57b1fe7d
 800ee74:	3ec71de3 	.word	0x3ec71de3
 800ee78:	19c161d5 	.word	0x19c161d5
 800ee7c:	3f2a01a0 	.word	0x3f2a01a0
 800ee80:	1110f8a6 	.word	0x1110f8a6
 800ee84:	3f811111 	.word	0x3f811111
 800ee88:	55555549 	.word	0x55555549
 800ee8c:	3fc55555 	.word	0x3fc55555
 800ee90:	3fe00000 	.word	0x3fe00000

0800ee94 <__kernel_cosf>:
 800ee94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ee98:	f020 4400 	bic.w	r4, r0, #2147483648	; 0x80000000
 800ee9c:	f1b4 5f48 	cmp.w	r4, #838860800	; 0x32000000
 800eea0:	4606      	mov	r6, r0
 800eea2:	4688      	mov	r8, r1
 800eea4:	da03      	bge.n	800eeae <__kernel_cosf+0x1a>
 800eea6:	f7f2 f965 	bl	8001174 <__aeabi_f2iz>
 800eeaa:	2800      	cmp	r0, #0
 800eeac:	d05c      	beq.n	800ef68 <__kernel_cosf+0xd4>
 800eeae:	4631      	mov	r1, r6
 800eeb0:	4630      	mov	r0, r6
 800eeb2:	f7f1 ff83 	bl	8000dbc <__aeabi_fmul>
 800eeb6:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800eeba:	4605      	mov	r5, r0
 800eebc:	f7f1 ff7e 	bl	8000dbc <__aeabi_fmul>
 800eec0:	492b      	ldr	r1, [pc, #172]	; (800ef70 <__kernel_cosf+0xdc>)
 800eec2:	4607      	mov	r7, r0
 800eec4:	4628      	mov	r0, r5
 800eec6:	f7f1 ff79 	bl	8000dbc <__aeabi_fmul>
 800eeca:	492a      	ldr	r1, [pc, #168]	; (800ef74 <__kernel_cosf+0xe0>)
 800eecc:	f7f1 fe6e 	bl	8000bac <__addsf3>
 800eed0:	4629      	mov	r1, r5
 800eed2:	f7f1 ff73 	bl	8000dbc <__aeabi_fmul>
 800eed6:	4928      	ldr	r1, [pc, #160]	; (800ef78 <__kernel_cosf+0xe4>)
 800eed8:	f7f1 fe66 	bl	8000ba8 <__aeabi_fsub>
 800eedc:	4629      	mov	r1, r5
 800eede:	f7f1 ff6d 	bl	8000dbc <__aeabi_fmul>
 800eee2:	4926      	ldr	r1, [pc, #152]	; (800ef7c <__kernel_cosf+0xe8>)
 800eee4:	f7f1 fe62 	bl	8000bac <__addsf3>
 800eee8:	4629      	mov	r1, r5
 800eeea:	f7f1 ff67 	bl	8000dbc <__aeabi_fmul>
 800eeee:	4924      	ldr	r1, [pc, #144]	; (800ef80 <__kernel_cosf+0xec>)
 800eef0:	f7f1 fe5a 	bl	8000ba8 <__aeabi_fsub>
 800eef4:	4629      	mov	r1, r5
 800eef6:	f7f1 ff61 	bl	8000dbc <__aeabi_fmul>
 800eefa:	4922      	ldr	r1, [pc, #136]	; (800ef84 <__kernel_cosf+0xf0>)
 800eefc:	f7f1 fe56 	bl	8000bac <__addsf3>
 800ef00:	4629      	mov	r1, r5
 800ef02:	f7f1 ff5b 	bl	8000dbc <__aeabi_fmul>
 800ef06:	4629      	mov	r1, r5
 800ef08:	f7f1 ff58 	bl	8000dbc <__aeabi_fmul>
 800ef0c:	4641      	mov	r1, r8
 800ef0e:	4605      	mov	r5, r0
 800ef10:	4630      	mov	r0, r6
 800ef12:	f7f1 ff53 	bl	8000dbc <__aeabi_fmul>
 800ef16:	4601      	mov	r1, r0
 800ef18:	4628      	mov	r0, r5
 800ef1a:	f7f1 fe45 	bl	8000ba8 <__aeabi_fsub>
 800ef1e:	4b1a      	ldr	r3, [pc, #104]	; (800ef88 <__kernel_cosf+0xf4>)
 800ef20:	4605      	mov	r5, r0
 800ef22:	429c      	cmp	r4, r3
 800ef24:	dc0a      	bgt.n	800ef3c <__kernel_cosf+0xa8>
 800ef26:	4601      	mov	r1, r0
 800ef28:	4638      	mov	r0, r7
 800ef2a:	f7f1 fe3d 	bl	8000ba8 <__aeabi_fsub>
 800ef2e:	4601      	mov	r1, r0
 800ef30:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800ef34:	f7f1 fe38 	bl	8000ba8 <__aeabi_fsub>
 800ef38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ef3c:	4b13      	ldr	r3, [pc, #76]	; (800ef8c <__kernel_cosf+0xf8>)
 800ef3e:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800ef42:	429c      	cmp	r4, r3
 800ef44:	bfcc      	ite	gt
 800ef46:	4c12      	ldrgt	r4, [pc, #72]	; (800ef90 <__kernel_cosf+0xfc>)
 800ef48:	f104 447f 	addle.w	r4, r4, #4278190080	; 0xff000000
 800ef4c:	4621      	mov	r1, r4
 800ef4e:	f7f1 fe2b 	bl	8000ba8 <__aeabi_fsub>
 800ef52:	4621      	mov	r1, r4
 800ef54:	4606      	mov	r6, r0
 800ef56:	4638      	mov	r0, r7
 800ef58:	f7f1 fe26 	bl	8000ba8 <__aeabi_fsub>
 800ef5c:	4629      	mov	r1, r5
 800ef5e:	f7f1 fe23 	bl	8000ba8 <__aeabi_fsub>
 800ef62:	4601      	mov	r1, r0
 800ef64:	4630      	mov	r0, r6
 800ef66:	e7e5      	b.n	800ef34 <__kernel_cosf+0xa0>
 800ef68:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800ef6c:	e7e4      	b.n	800ef38 <__kernel_cosf+0xa4>
 800ef6e:	bf00      	nop
 800ef70:	ad47d74e 	.word	0xad47d74e
 800ef74:	310f74f6 	.word	0x310f74f6
 800ef78:	3493f27c 	.word	0x3493f27c
 800ef7c:	37d00d01 	.word	0x37d00d01
 800ef80:	3ab60b61 	.word	0x3ab60b61
 800ef84:	3d2aaaab 	.word	0x3d2aaaab
 800ef88:	3e999999 	.word	0x3e999999
 800ef8c:	3f480000 	.word	0x3f480000
 800ef90:	3e900000 	.word	0x3e900000

0800ef94 <__kernel_rem_pio2f>:
 800ef94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ef98:	b0db      	sub	sp, #364	; 0x16c
 800ef9a:	9202      	str	r2, [sp, #8]
 800ef9c:	9304      	str	r3, [sp, #16]
 800ef9e:	9a64      	ldr	r2, [sp, #400]	; 0x190
 800efa0:	4bc5      	ldr	r3, [pc, #788]	; (800f2b8 <__kernel_rem_pio2f+0x324>)
 800efa2:	9005      	str	r0, [sp, #20]
 800efa4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800efa8:	9100      	str	r1, [sp, #0]
 800efaa:	9301      	str	r3, [sp, #4]
 800efac:	9b04      	ldr	r3, [sp, #16]
 800efae:	3b01      	subs	r3, #1
 800efb0:	9303      	str	r3, [sp, #12]
 800efb2:	9b02      	ldr	r3, [sp, #8]
 800efb4:	1d1a      	adds	r2, r3, #4
 800efb6:	f2c0 809b 	blt.w	800f0f0 <__kernel_rem_pio2f+0x15c>
 800efba:	1edc      	subs	r4, r3, #3
 800efbc:	bf48      	it	mi
 800efbe:	1d1c      	addmi	r4, r3, #4
 800efc0:	10e4      	asrs	r4, r4, #3
 800efc2:	2500      	movs	r5, #0
 800efc4:	f04f 0a00 	mov.w	sl, #0
 800efc8:	1c67      	adds	r7, r4, #1
 800efca:	00fb      	lsls	r3, r7, #3
 800efcc:	9306      	str	r3, [sp, #24]
 800efce:	9b02      	ldr	r3, [sp, #8]
 800efd0:	9a03      	ldr	r2, [sp, #12]
 800efd2:	eba3 07c7 	sub.w	r7, r3, r7, lsl #3
 800efd6:	9b01      	ldr	r3, [sp, #4]
 800efd8:	1aa6      	subs	r6, r4, r2
 800efda:	eb03 0802 	add.w	r8, r3, r2
 800efde:	9b65      	ldr	r3, [sp, #404]	; 0x194
 800efe0:	f10d 0b78 	add.w	fp, sp, #120	; 0x78
 800efe4:	eb03 0986 	add.w	r9, r3, r6, lsl #2
 800efe8:	4545      	cmp	r5, r8
 800efea:	f340 8083 	ble.w	800f0f4 <__kernel_rem_pio2f+0x160>
 800efee:	f04f 0800 	mov.w	r8, #0
 800eff2:	f04f 0b00 	mov.w	fp, #0
 800eff6:	9b04      	ldr	r3, [sp, #16]
 800eff8:	aa1e      	add	r2, sp, #120	; 0x78
 800effa:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 800effe:	ab46      	add	r3, sp, #280	; 0x118
 800f000:	9a01      	ldr	r2, [sp, #4]
 800f002:	4590      	cmp	r8, r2
 800f004:	f340 809c 	ble.w	800f140 <__kernel_rem_pio2f+0x1ac>
 800f008:	4613      	mov	r3, r2
 800f00a:	aa0a      	add	r2, sp, #40	; 0x28
 800f00c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800f010:	9308      	str	r3, [sp, #32]
 800f012:	9b65      	ldr	r3, [sp, #404]	; 0x194
 800f014:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800f018:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800f01c:	9307      	str	r3, [sp, #28]
 800f01e:	ad0a      	add	r5, sp, #40	; 0x28
 800f020:	462e      	mov	r6, r5
 800f022:	46c3      	mov	fp, r8
 800f024:	f04f 4987 	mov.w	r9, #1132462080	; 0x43800000
 800f028:	ab5a      	add	r3, sp, #360	; 0x168
 800f02a:	eb03 0388 	add.w	r3, r3, r8, lsl #2
 800f02e:	f853 4c50 	ldr.w	r4, [r3, #-80]
 800f032:	f50d 7a8c 	add.w	sl, sp, #280	; 0x118
 800f036:	f1bb 0f00 	cmp.w	fp, #0
 800f03a:	f300 8086 	bgt.w	800f14a <__kernel_rem_pio2f+0x1b6>
 800f03e:	4639      	mov	r1, r7
 800f040:	4620      	mov	r0, r4
 800f042:	f000 fc25 	bl	800f890 <scalbnf>
 800f046:	f04f 5178 	mov.w	r1, #1040187392	; 0x3e000000
 800f04a:	4604      	mov	r4, r0
 800f04c:	f7f1 feb6 	bl	8000dbc <__aeabi_fmul>
 800f050:	f000 fbd8 	bl	800f804 <floorf>
 800f054:	f04f 4182 	mov.w	r1, #1090519040	; 0x41000000
 800f058:	f7f1 feb0 	bl	8000dbc <__aeabi_fmul>
 800f05c:	4601      	mov	r1, r0
 800f05e:	4620      	mov	r0, r4
 800f060:	f7f1 fda2 	bl	8000ba8 <__aeabi_fsub>
 800f064:	4604      	mov	r4, r0
 800f066:	f7f2 f885 	bl	8001174 <__aeabi_f2iz>
 800f06a:	4606      	mov	r6, r0
 800f06c:	f7f1 fe52 	bl	8000d14 <__aeabi_i2f>
 800f070:	4601      	mov	r1, r0
 800f072:	4620      	mov	r0, r4
 800f074:	f7f1 fd98 	bl	8000ba8 <__aeabi_fsub>
 800f078:	2f00      	cmp	r7, #0
 800f07a:	4681      	mov	r9, r0
 800f07c:	f340 8084 	ble.w	800f188 <__kernel_rem_pio2f+0x1f4>
 800f080:	f108 32ff 	add.w	r2, r8, #4294967295
 800f084:	ab0a      	add	r3, sp, #40	; 0x28
 800f086:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
 800f08a:	f1c7 0108 	rsb	r1, r7, #8
 800f08e:	fa44 f301 	asr.w	r3, r4, r1
 800f092:	441e      	add	r6, r3
 800f094:	408b      	lsls	r3, r1
 800f096:	1ae4      	subs	r4, r4, r3
 800f098:	f1c7 0007 	rsb	r0, r7, #7
 800f09c:	ab0a      	add	r3, sp, #40	; 0x28
 800f09e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800f0a2:	4104      	asrs	r4, r0
 800f0a4:	2c00      	cmp	r4, #0
 800f0a6:	dd7e      	ble.n	800f1a6 <__kernel_rem_pio2f+0x212>
 800f0a8:	2200      	movs	r2, #0
 800f0aa:	4692      	mov	sl, r2
 800f0ac:	3601      	adds	r6, #1
 800f0ae:	4590      	cmp	r8, r2
 800f0b0:	f300 80b0 	bgt.w	800f214 <__kernel_rem_pio2f+0x280>
 800f0b4:	2f00      	cmp	r7, #0
 800f0b6:	dd05      	ble.n	800f0c4 <__kernel_rem_pio2f+0x130>
 800f0b8:	2f01      	cmp	r7, #1
 800f0ba:	f000 80bd 	beq.w	800f238 <__kernel_rem_pio2f+0x2a4>
 800f0be:	2f02      	cmp	r7, #2
 800f0c0:	f000 80c5 	beq.w	800f24e <__kernel_rem_pio2f+0x2ba>
 800f0c4:	2c02      	cmp	r4, #2
 800f0c6:	d16e      	bne.n	800f1a6 <__kernel_rem_pio2f+0x212>
 800f0c8:	4649      	mov	r1, r9
 800f0ca:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800f0ce:	f7f1 fd6b 	bl	8000ba8 <__aeabi_fsub>
 800f0d2:	4681      	mov	r9, r0
 800f0d4:	f1ba 0f00 	cmp.w	sl, #0
 800f0d8:	d065      	beq.n	800f1a6 <__kernel_rem_pio2f+0x212>
 800f0da:	4639      	mov	r1, r7
 800f0dc:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800f0e0:	f000 fbd6 	bl	800f890 <scalbnf>
 800f0e4:	4601      	mov	r1, r0
 800f0e6:	4648      	mov	r0, r9
 800f0e8:	f7f1 fd5e 	bl	8000ba8 <__aeabi_fsub>
 800f0ec:	4681      	mov	r9, r0
 800f0ee:	e05a      	b.n	800f1a6 <__kernel_rem_pio2f+0x212>
 800f0f0:	2400      	movs	r4, #0
 800f0f2:	e766      	b.n	800efc2 <__kernel_rem_pio2f+0x2e>
 800f0f4:	42ee      	cmn	r6, r5
 800f0f6:	d407      	bmi.n	800f108 <__kernel_rem_pio2f+0x174>
 800f0f8:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800f0fc:	f7f1 fe0a 	bl	8000d14 <__aeabi_i2f>
 800f100:	f84b 0025 	str.w	r0, [fp, r5, lsl #2]
 800f104:	3501      	adds	r5, #1
 800f106:	e76f      	b.n	800efe8 <__kernel_rem_pio2f+0x54>
 800f108:	4650      	mov	r0, sl
 800f10a:	e7f9      	b.n	800f100 <__kernel_rem_pio2f+0x16c>
 800f10c:	9b05      	ldr	r3, [sp, #20]
 800f10e:	f8da 1000 	ldr.w	r1, [sl]
 800f112:	f853 0029 	ldr.w	r0, [r3, r9, lsl #2]
 800f116:	f7f1 fe51 	bl	8000dbc <__aeabi_fmul>
 800f11a:	4601      	mov	r1, r0
 800f11c:	4630      	mov	r0, r6
 800f11e:	f7f1 fd45 	bl	8000bac <__addsf3>
 800f122:	4606      	mov	r6, r0
 800f124:	f109 0901 	add.w	r9, r9, #1
 800f128:	ab46      	add	r3, sp, #280	; 0x118
 800f12a:	9a03      	ldr	r2, [sp, #12]
 800f12c:	f1aa 0a04 	sub.w	sl, sl, #4
 800f130:	4591      	cmp	r9, r2
 800f132:	ddeb      	ble.n	800f10c <__kernel_rem_pio2f+0x178>
 800f134:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 800f138:	3504      	adds	r5, #4
 800f13a:	f108 0801 	add.w	r8, r8, #1
 800f13e:	e75f      	b.n	800f000 <__kernel_rem_pio2f+0x6c>
 800f140:	46aa      	mov	sl, r5
 800f142:	465e      	mov	r6, fp
 800f144:	f04f 0900 	mov.w	r9, #0
 800f148:	e7ef      	b.n	800f12a <__kernel_rem_pio2f+0x196>
 800f14a:	f04f 516e 	mov.w	r1, #998244352	; 0x3b800000
 800f14e:	4620      	mov	r0, r4
 800f150:	f7f1 fe34 	bl	8000dbc <__aeabi_fmul>
 800f154:	f7f2 f80e 	bl	8001174 <__aeabi_f2iz>
 800f158:	f7f1 fddc 	bl	8000d14 <__aeabi_i2f>
 800f15c:	4649      	mov	r1, r9
 800f15e:	9009      	str	r0, [sp, #36]	; 0x24
 800f160:	f7f1 fe2c 	bl	8000dbc <__aeabi_fmul>
 800f164:	4601      	mov	r1, r0
 800f166:	4620      	mov	r0, r4
 800f168:	f7f1 fd1e 	bl	8000ba8 <__aeabi_fsub>
 800f16c:	f7f2 f802 	bl	8001174 <__aeabi_f2iz>
 800f170:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f172:	f10b 3bff 	add.w	fp, fp, #4294967295
 800f176:	f846 0b04 	str.w	r0, [r6], #4
 800f17a:	f85a 102b 	ldr.w	r1, [sl, fp, lsl #2]
 800f17e:	4618      	mov	r0, r3
 800f180:	f7f1 fd14 	bl	8000bac <__addsf3>
 800f184:	4604      	mov	r4, r0
 800f186:	e756      	b.n	800f036 <__kernel_rem_pio2f+0xa2>
 800f188:	d106      	bne.n	800f198 <__kernel_rem_pio2f+0x204>
 800f18a:	f108 33ff 	add.w	r3, r8, #4294967295
 800f18e:	aa0a      	add	r2, sp, #40	; 0x28
 800f190:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800f194:	1224      	asrs	r4, r4, #8
 800f196:	e785      	b.n	800f0a4 <__kernel_rem_pio2f+0x110>
 800f198:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800f19c:	f7f1 ffc0 	bl	8001120 <__aeabi_fcmpge>
 800f1a0:	4604      	mov	r4, r0
 800f1a2:	2800      	cmp	r0, #0
 800f1a4:	d134      	bne.n	800f210 <__kernel_rem_pio2f+0x27c>
 800f1a6:	2100      	movs	r1, #0
 800f1a8:	4648      	mov	r0, r9
 800f1aa:	f7f1 ff9b 	bl	80010e4 <__aeabi_fcmpeq>
 800f1ae:	2800      	cmp	r0, #0
 800f1b0:	f000 809a 	beq.w	800f2e8 <__kernel_rem_pio2f+0x354>
 800f1b4:	f108 35ff 	add.w	r5, r8, #4294967295
 800f1b8:	462b      	mov	r3, r5
 800f1ba:	2200      	movs	r2, #0
 800f1bc:	9901      	ldr	r1, [sp, #4]
 800f1be:	428b      	cmp	r3, r1
 800f1c0:	da4d      	bge.n	800f25e <__kernel_rem_pio2f+0x2ca>
 800f1c2:	2a00      	cmp	r2, #0
 800f1c4:	d07c      	beq.n	800f2c0 <__kernel_rem_pio2f+0x32c>
 800f1c6:	ab0a      	add	r3, sp, #40	; 0x28
 800f1c8:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800f1cc:	3f08      	subs	r7, #8
 800f1ce:	2b00      	cmp	r3, #0
 800f1d0:	f000 8088 	beq.w	800f2e4 <__kernel_rem_pio2f+0x350>
 800f1d4:	4639      	mov	r1, r7
 800f1d6:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800f1da:	f000 fb59 	bl	800f890 <scalbnf>
 800f1de:	46aa      	mov	sl, r5
 800f1e0:	4681      	mov	r9, r0
 800f1e2:	f04f 586e 	mov.w	r8, #998244352	; 0x3b800000
 800f1e6:	af46      	add	r7, sp, #280	; 0x118
 800f1e8:	f1ba 0f00 	cmp.w	sl, #0
 800f1ec:	f280 80b1 	bge.w	800f352 <__kernel_rem_pio2f+0x3be>
 800f1f0:	46a9      	mov	r9, r5
 800f1f2:	f04f 0a00 	mov.w	sl, #0
 800f1f6:	2200      	movs	r2, #0
 800f1f8:	f1b9 0f00 	cmp.w	r9, #0
 800f1fc:	f2c0 80db 	blt.w	800f3b6 <__kernel_rem_pio2f+0x422>
 800f200:	a946      	add	r1, sp, #280	; 0x118
 800f202:	4617      	mov	r7, r2
 800f204:	f04f 0800 	mov.w	r8, #0
 800f208:	4b2c      	ldr	r3, [pc, #176]	; (800f2bc <__kernel_rem_pio2f+0x328>)
 800f20a:	eb01 0b89 	add.w	fp, r1, r9, lsl #2
 800f20e:	e0c3      	b.n	800f398 <__kernel_rem_pio2f+0x404>
 800f210:	2402      	movs	r4, #2
 800f212:	e749      	b.n	800f0a8 <__kernel_rem_pio2f+0x114>
 800f214:	682b      	ldr	r3, [r5, #0]
 800f216:	f1ba 0f00 	cmp.w	sl, #0
 800f21a:	d108      	bne.n	800f22e <__kernel_rem_pio2f+0x29a>
 800f21c:	b11b      	cbz	r3, 800f226 <__kernel_rem_pio2f+0x292>
 800f21e:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 800f222:	602b      	str	r3, [r5, #0]
 800f224:	2301      	movs	r3, #1
 800f226:	469a      	mov	sl, r3
 800f228:	3201      	adds	r2, #1
 800f22a:	3504      	adds	r5, #4
 800f22c:	e73f      	b.n	800f0ae <__kernel_rem_pio2f+0x11a>
 800f22e:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 800f232:	602b      	str	r3, [r5, #0]
 800f234:	4653      	mov	r3, sl
 800f236:	e7f6      	b.n	800f226 <__kernel_rem_pio2f+0x292>
 800f238:	f108 32ff 	add.w	r2, r8, #4294967295
 800f23c:	ab0a      	add	r3, sp, #40	; 0x28
 800f23e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f242:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f246:	a90a      	add	r1, sp, #40	; 0x28
 800f248:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800f24c:	e73a      	b.n	800f0c4 <__kernel_rem_pio2f+0x130>
 800f24e:	f108 32ff 	add.w	r2, r8, #4294967295
 800f252:	ab0a      	add	r3, sp, #40	; 0x28
 800f254:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f258:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f25c:	e7f3      	b.n	800f246 <__kernel_rem_pio2f+0x2b2>
 800f25e:	a90a      	add	r1, sp, #40	; 0x28
 800f260:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800f264:	3b01      	subs	r3, #1
 800f266:	430a      	orrs	r2, r1
 800f268:	e7a8      	b.n	800f1bc <__kernel_rem_pio2f+0x228>
 800f26a:	3301      	adds	r3, #1
 800f26c:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800f270:	2900      	cmp	r1, #0
 800f272:	d0fa      	beq.n	800f26a <__kernel_rem_pio2f+0x2d6>
 800f274:	9a04      	ldr	r2, [sp, #16]
 800f276:	f108 0501 	add.w	r5, r8, #1
 800f27a:	eb08 0402 	add.w	r4, r8, r2
 800f27e:	aa1e      	add	r2, sp, #120	; 0x78
 800f280:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 800f284:	4498      	add	r8, r3
 800f286:	f50d 798c 	add.w	r9, sp, #280	; 0x118
 800f28a:	45a8      	cmp	r8, r5
 800f28c:	f6ff aec7 	blt.w	800f01e <__kernel_rem_pio2f+0x8a>
 800f290:	9b07      	ldr	r3, [sp, #28]
 800f292:	46a3      	mov	fp, r4
 800f294:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800f298:	f7f1 fd3c 	bl	8000d14 <__aeabi_i2f>
 800f29c:	f04f 0a00 	mov.w	sl, #0
 800f2a0:	2600      	movs	r6, #0
 800f2a2:	f84b 0b04 	str.w	r0, [fp], #4
 800f2a6:	9b03      	ldr	r3, [sp, #12]
 800f2a8:	459a      	cmp	sl, r3
 800f2aa:	dd0c      	ble.n	800f2c6 <__kernel_rem_pio2f+0x332>
 800f2ac:	f849 6025 	str.w	r6, [r9, r5, lsl #2]
 800f2b0:	465c      	mov	r4, fp
 800f2b2:	3501      	adds	r5, #1
 800f2b4:	e7e9      	b.n	800f28a <__kernel_rem_pio2f+0x2f6>
 800f2b6:	bf00      	nop
 800f2b8:	080135e4 	.word	0x080135e4
 800f2bc:	080135b8 	.word	0x080135b8
 800f2c0:	2301      	movs	r3, #1
 800f2c2:	9a08      	ldr	r2, [sp, #32]
 800f2c4:	e7d2      	b.n	800f26c <__kernel_rem_pio2f+0x2d8>
 800f2c6:	9b05      	ldr	r3, [sp, #20]
 800f2c8:	f854 0904 	ldr.w	r0, [r4], #-4
 800f2cc:	f853 102a 	ldr.w	r1, [r3, sl, lsl #2]
 800f2d0:	f7f1 fd74 	bl	8000dbc <__aeabi_fmul>
 800f2d4:	4601      	mov	r1, r0
 800f2d6:	4630      	mov	r0, r6
 800f2d8:	f7f1 fc68 	bl	8000bac <__addsf3>
 800f2dc:	f10a 0a01 	add.w	sl, sl, #1
 800f2e0:	4606      	mov	r6, r0
 800f2e2:	e7e0      	b.n	800f2a6 <__kernel_rem_pio2f+0x312>
 800f2e4:	3d01      	subs	r5, #1
 800f2e6:	e76e      	b.n	800f1c6 <__kernel_rem_pio2f+0x232>
 800f2e8:	9b06      	ldr	r3, [sp, #24]
 800f2ea:	9a02      	ldr	r2, [sp, #8]
 800f2ec:	4648      	mov	r0, r9
 800f2ee:	1a99      	subs	r1, r3, r2
 800f2f0:	f000 face 	bl	800f890 <scalbnf>
 800f2f4:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 800f2f8:	4605      	mov	r5, r0
 800f2fa:	f7f1 ff11 	bl	8001120 <__aeabi_fcmpge>
 800f2fe:	b300      	cbz	r0, 800f342 <__kernel_rem_pio2f+0x3ae>
 800f300:	f04f 516e 	mov.w	r1, #998244352	; 0x3b800000
 800f304:	4628      	mov	r0, r5
 800f306:	f7f1 fd59 	bl	8000dbc <__aeabi_fmul>
 800f30a:	f7f1 ff33 	bl	8001174 <__aeabi_f2iz>
 800f30e:	f7f1 fd01 	bl	8000d14 <__aeabi_i2f>
 800f312:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 800f316:	4681      	mov	r9, r0
 800f318:	f7f1 fd50 	bl	8000dbc <__aeabi_fmul>
 800f31c:	4601      	mov	r1, r0
 800f31e:	4628      	mov	r0, r5
 800f320:	f7f1 fc42 	bl	8000ba8 <__aeabi_fsub>
 800f324:	f7f1 ff26 	bl	8001174 <__aeabi_f2iz>
 800f328:	ab0a      	add	r3, sp, #40	; 0x28
 800f32a:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 800f32e:	4648      	mov	r0, r9
 800f330:	f7f1 ff20 	bl	8001174 <__aeabi_f2iz>
 800f334:	f108 0501 	add.w	r5, r8, #1
 800f338:	ab0a      	add	r3, sp, #40	; 0x28
 800f33a:	3708      	adds	r7, #8
 800f33c:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
 800f340:	e748      	b.n	800f1d4 <__kernel_rem_pio2f+0x240>
 800f342:	4628      	mov	r0, r5
 800f344:	f7f1 ff16 	bl	8001174 <__aeabi_f2iz>
 800f348:	ab0a      	add	r3, sp, #40	; 0x28
 800f34a:	4645      	mov	r5, r8
 800f34c:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 800f350:	e740      	b.n	800f1d4 <__kernel_rem_pio2f+0x240>
 800f352:	ab0a      	add	r3, sp, #40	; 0x28
 800f354:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 800f358:	f7f1 fcdc 	bl	8000d14 <__aeabi_i2f>
 800f35c:	4649      	mov	r1, r9
 800f35e:	f7f1 fd2d 	bl	8000dbc <__aeabi_fmul>
 800f362:	4641      	mov	r1, r8
 800f364:	f847 002a 	str.w	r0, [r7, sl, lsl #2]
 800f368:	4648      	mov	r0, r9
 800f36a:	f7f1 fd27 	bl	8000dbc <__aeabi_fmul>
 800f36e:	f10a 3aff 	add.w	sl, sl, #4294967295
 800f372:	4681      	mov	r9, r0
 800f374:	e738      	b.n	800f1e8 <__kernel_rem_pio2f+0x254>
 800f376:	f853 0b04 	ldr.w	r0, [r3], #4
 800f37a:	f85b 1b04 	ldr.w	r1, [fp], #4
 800f37e:	9203      	str	r2, [sp, #12]
 800f380:	9302      	str	r3, [sp, #8]
 800f382:	f7f1 fd1b 	bl	8000dbc <__aeabi_fmul>
 800f386:	4601      	mov	r1, r0
 800f388:	4638      	mov	r0, r7
 800f38a:	f7f1 fc0f 	bl	8000bac <__addsf3>
 800f38e:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800f392:	4607      	mov	r7, r0
 800f394:	f108 0801 	add.w	r8, r8, #1
 800f398:	9901      	ldr	r1, [sp, #4]
 800f39a:	4588      	cmp	r8, r1
 800f39c:	dc01      	bgt.n	800f3a2 <__kernel_rem_pio2f+0x40e>
 800f39e:	45c2      	cmp	sl, r8
 800f3a0:	dae9      	bge.n	800f376 <__kernel_rem_pio2f+0x3e2>
 800f3a2:	ab5a      	add	r3, sp, #360	; 0x168
 800f3a4:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 800f3a8:	f843 7ca0 	str.w	r7, [r3, #-160]
 800f3ac:	f109 39ff 	add.w	r9, r9, #4294967295
 800f3b0:	f10a 0a01 	add.w	sl, sl, #1
 800f3b4:	e720      	b.n	800f1f8 <__kernel_rem_pio2f+0x264>
 800f3b6:	9b64      	ldr	r3, [sp, #400]	; 0x190
 800f3b8:	2b02      	cmp	r3, #2
 800f3ba:	dc07      	bgt.n	800f3cc <__kernel_rem_pio2f+0x438>
 800f3bc:	2b00      	cmp	r3, #0
 800f3be:	dc4d      	bgt.n	800f45c <__kernel_rem_pio2f+0x4c8>
 800f3c0:	d02e      	beq.n	800f420 <__kernel_rem_pio2f+0x48c>
 800f3c2:	f006 0007 	and.w	r0, r6, #7
 800f3c6:	b05b      	add	sp, #364	; 0x16c
 800f3c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f3cc:	9b64      	ldr	r3, [sp, #400]	; 0x190
 800f3ce:	2b03      	cmp	r3, #3
 800f3d0:	d1f7      	bne.n	800f3c2 <__kernel_rem_pio2f+0x42e>
 800f3d2:	f10d 0bc8 	add.w	fp, sp, #200	; 0xc8
 800f3d6:	eb0b 0785 	add.w	r7, fp, r5, lsl #2
 800f3da:	46b8      	mov	r8, r7
 800f3dc:	46aa      	mov	sl, r5
 800f3de:	f1ba 0f00 	cmp.w	sl, #0
 800f3e2:	dc48      	bgt.n	800f476 <__kernel_rem_pio2f+0x4e2>
 800f3e4:	46a9      	mov	r9, r5
 800f3e6:	f1b9 0f01 	cmp.w	r9, #1
 800f3ea:	dc5f      	bgt.n	800f4ac <__kernel_rem_pio2f+0x518>
 800f3ec:	2000      	movs	r0, #0
 800f3ee:	2d01      	cmp	r5, #1
 800f3f0:	dc75      	bgt.n	800f4de <__kernel_rem_pio2f+0x54a>
 800f3f2:	9a32      	ldr	r2, [sp, #200]	; 0xc8
 800f3f4:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 800f3f6:	2c00      	cmp	r4, #0
 800f3f8:	d177      	bne.n	800f4ea <__kernel_rem_pio2f+0x556>
 800f3fa:	9900      	ldr	r1, [sp, #0]
 800f3fc:	600a      	str	r2, [r1, #0]
 800f3fe:	460a      	mov	r2, r1
 800f400:	604b      	str	r3, [r1, #4]
 800f402:	6090      	str	r0, [r2, #8]
 800f404:	e7dd      	b.n	800f3c2 <__kernel_rem_pio2f+0x42e>
 800f406:	f857 1025 	ldr.w	r1, [r7, r5, lsl #2]
 800f40a:	f7f1 fbcf 	bl	8000bac <__addsf3>
 800f40e:	3d01      	subs	r5, #1
 800f410:	2d00      	cmp	r5, #0
 800f412:	daf8      	bge.n	800f406 <__kernel_rem_pio2f+0x472>
 800f414:	b10c      	cbz	r4, 800f41a <__kernel_rem_pio2f+0x486>
 800f416:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800f41a:	9b00      	ldr	r3, [sp, #0]
 800f41c:	6018      	str	r0, [r3, #0]
 800f41e:	e7d0      	b.n	800f3c2 <__kernel_rem_pio2f+0x42e>
 800f420:	2000      	movs	r0, #0
 800f422:	af32      	add	r7, sp, #200	; 0xc8
 800f424:	e7f4      	b.n	800f410 <__kernel_rem_pio2f+0x47c>
 800f426:	f858 1027 	ldr.w	r1, [r8, r7, lsl #2]
 800f42a:	f7f1 fbbf 	bl	8000bac <__addsf3>
 800f42e:	3f01      	subs	r7, #1
 800f430:	2f00      	cmp	r7, #0
 800f432:	daf8      	bge.n	800f426 <__kernel_rem_pio2f+0x492>
 800f434:	b1bc      	cbz	r4, 800f466 <__kernel_rem_pio2f+0x4d2>
 800f436:	f100 4300 	add.w	r3, r0, #2147483648	; 0x80000000
 800f43a:	9a00      	ldr	r2, [sp, #0]
 800f43c:	4601      	mov	r1, r0
 800f43e:	6013      	str	r3, [r2, #0]
 800f440:	9832      	ldr	r0, [sp, #200]	; 0xc8
 800f442:	f7f1 fbb1 	bl	8000ba8 <__aeabi_fsub>
 800f446:	2701      	movs	r7, #1
 800f448:	f10d 08c8 	add.w	r8, sp, #200	; 0xc8
 800f44c:	42bd      	cmp	r5, r7
 800f44e:	da0c      	bge.n	800f46a <__kernel_rem_pio2f+0x4d6>
 800f450:	b10c      	cbz	r4, 800f456 <__kernel_rem_pio2f+0x4c2>
 800f452:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800f456:	9b00      	ldr	r3, [sp, #0]
 800f458:	6058      	str	r0, [r3, #4]
 800f45a:	e7b2      	b.n	800f3c2 <__kernel_rem_pio2f+0x42e>
 800f45c:	462f      	mov	r7, r5
 800f45e:	2000      	movs	r0, #0
 800f460:	f10d 08c8 	add.w	r8, sp, #200	; 0xc8
 800f464:	e7e4      	b.n	800f430 <__kernel_rem_pio2f+0x49c>
 800f466:	4603      	mov	r3, r0
 800f468:	e7e7      	b.n	800f43a <__kernel_rem_pio2f+0x4a6>
 800f46a:	f858 1027 	ldr.w	r1, [r8, r7, lsl #2]
 800f46e:	f7f1 fb9d 	bl	8000bac <__addsf3>
 800f472:	3701      	adds	r7, #1
 800f474:	e7ea      	b.n	800f44c <__kernel_rem_pio2f+0x4b8>
 800f476:	f8d8 3000 	ldr.w	r3, [r8]
 800f47a:	f858 2c04 	ldr.w	r2, [r8, #-4]
 800f47e:	4619      	mov	r1, r3
 800f480:	4610      	mov	r0, r2
 800f482:	9302      	str	r3, [sp, #8]
 800f484:	9201      	str	r2, [sp, #4]
 800f486:	f7f1 fb91 	bl	8000bac <__addsf3>
 800f48a:	9a01      	ldr	r2, [sp, #4]
 800f48c:	4601      	mov	r1, r0
 800f48e:	4681      	mov	r9, r0
 800f490:	4610      	mov	r0, r2
 800f492:	f7f1 fb89 	bl	8000ba8 <__aeabi_fsub>
 800f496:	9b02      	ldr	r3, [sp, #8]
 800f498:	f10a 3aff 	add.w	sl, sl, #4294967295
 800f49c:	4619      	mov	r1, r3
 800f49e:	f7f1 fb85 	bl	8000bac <__addsf3>
 800f4a2:	f848 0904 	str.w	r0, [r8], #-4
 800f4a6:	f8c8 9000 	str.w	r9, [r8]
 800f4aa:	e798      	b.n	800f3de <__kernel_rem_pio2f+0x44a>
 800f4ac:	f857 3c04 	ldr.w	r3, [r7, #-4]
 800f4b0:	f8d7 a000 	ldr.w	sl, [r7]
 800f4b4:	4618      	mov	r0, r3
 800f4b6:	4651      	mov	r1, sl
 800f4b8:	9301      	str	r3, [sp, #4]
 800f4ba:	f7f1 fb77 	bl	8000bac <__addsf3>
 800f4be:	9b01      	ldr	r3, [sp, #4]
 800f4c0:	4601      	mov	r1, r0
 800f4c2:	4680      	mov	r8, r0
 800f4c4:	4618      	mov	r0, r3
 800f4c6:	f7f1 fb6f 	bl	8000ba8 <__aeabi_fsub>
 800f4ca:	4651      	mov	r1, sl
 800f4cc:	f7f1 fb6e 	bl	8000bac <__addsf3>
 800f4d0:	f847 0904 	str.w	r0, [r7], #-4
 800f4d4:	f109 39ff 	add.w	r9, r9, #4294967295
 800f4d8:	f8c7 8000 	str.w	r8, [r7]
 800f4dc:	e783      	b.n	800f3e6 <__kernel_rem_pio2f+0x452>
 800f4de:	f85b 1025 	ldr.w	r1, [fp, r5, lsl #2]
 800f4e2:	f7f1 fb63 	bl	8000bac <__addsf3>
 800f4e6:	3d01      	subs	r5, #1
 800f4e8:	e781      	b.n	800f3ee <__kernel_rem_pio2f+0x45a>
 800f4ea:	9900      	ldr	r1, [sp, #0]
 800f4ec:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
 800f4f0:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800f4f4:	600a      	str	r2, [r1, #0]
 800f4f6:	604b      	str	r3, [r1, #4]
 800f4f8:	460a      	mov	r2, r1
 800f4fa:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800f4fe:	e780      	b.n	800f402 <__kernel_rem_pio2f+0x46e>

0800f500 <__kernel_sinf>:
 800f500:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f504:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 800f508:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 800f50c:	4604      	mov	r4, r0
 800f50e:	460f      	mov	r7, r1
 800f510:	4691      	mov	r9, r2
 800f512:	da03      	bge.n	800f51c <__kernel_sinf+0x1c>
 800f514:	f7f1 fe2e 	bl	8001174 <__aeabi_f2iz>
 800f518:	2800      	cmp	r0, #0
 800f51a:	d035      	beq.n	800f588 <__kernel_sinf+0x88>
 800f51c:	4621      	mov	r1, r4
 800f51e:	4620      	mov	r0, r4
 800f520:	f7f1 fc4c 	bl	8000dbc <__aeabi_fmul>
 800f524:	4605      	mov	r5, r0
 800f526:	4601      	mov	r1, r0
 800f528:	4620      	mov	r0, r4
 800f52a:	f7f1 fc47 	bl	8000dbc <__aeabi_fmul>
 800f52e:	4929      	ldr	r1, [pc, #164]	; (800f5d4 <__kernel_sinf+0xd4>)
 800f530:	4606      	mov	r6, r0
 800f532:	4628      	mov	r0, r5
 800f534:	f7f1 fc42 	bl	8000dbc <__aeabi_fmul>
 800f538:	4927      	ldr	r1, [pc, #156]	; (800f5d8 <__kernel_sinf+0xd8>)
 800f53a:	f7f1 fb35 	bl	8000ba8 <__aeabi_fsub>
 800f53e:	4629      	mov	r1, r5
 800f540:	f7f1 fc3c 	bl	8000dbc <__aeabi_fmul>
 800f544:	4925      	ldr	r1, [pc, #148]	; (800f5dc <__kernel_sinf+0xdc>)
 800f546:	f7f1 fb31 	bl	8000bac <__addsf3>
 800f54a:	4629      	mov	r1, r5
 800f54c:	f7f1 fc36 	bl	8000dbc <__aeabi_fmul>
 800f550:	4923      	ldr	r1, [pc, #140]	; (800f5e0 <__kernel_sinf+0xe0>)
 800f552:	f7f1 fb29 	bl	8000ba8 <__aeabi_fsub>
 800f556:	4629      	mov	r1, r5
 800f558:	f7f1 fc30 	bl	8000dbc <__aeabi_fmul>
 800f55c:	4921      	ldr	r1, [pc, #132]	; (800f5e4 <__kernel_sinf+0xe4>)
 800f55e:	f7f1 fb25 	bl	8000bac <__addsf3>
 800f562:	4680      	mov	r8, r0
 800f564:	f1b9 0f00 	cmp.w	r9, #0
 800f568:	d111      	bne.n	800f58e <__kernel_sinf+0x8e>
 800f56a:	4601      	mov	r1, r0
 800f56c:	4628      	mov	r0, r5
 800f56e:	f7f1 fc25 	bl	8000dbc <__aeabi_fmul>
 800f572:	491d      	ldr	r1, [pc, #116]	; (800f5e8 <__kernel_sinf+0xe8>)
 800f574:	f7f1 fb18 	bl	8000ba8 <__aeabi_fsub>
 800f578:	4631      	mov	r1, r6
 800f57a:	f7f1 fc1f 	bl	8000dbc <__aeabi_fmul>
 800f57e:	4601      	mov	r1, r0
 800f580:	4620      	mov	r0, r4
 800f582:	f7f1 fb13 	bl	8000bac <__addsf3>
 800f586:	4604      	mov	r4, r0
 800f588:	4620      	mov	r0, r4
 800f58a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f58e:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800f592:	4638      	mov	r0, r7
 800f594:	f7f1 fc12 	bl	8000dbc <__aeabi_fmul>
 800f598:	4641      	mov	r1, r8
 800f59a:	4681      	mov	r9, r0
 800f59c:	4630      	mov	r0, r6
 800f59e:	f7f1 fc0d 	bl	8000dbc <__aeabi_fmul>
 800f5a2:	4601      	mov	r1, r0
 800f5a4:	4648      	mov	r0, r9
 800f5a6:	f7f1 faff 	bl	8000ba8 <__aeabi_fsub>
 800f5aa:	4629      	mov	r1, r5
 800f5ac:	f7f1 fc06 	bl	8000dbc <__aeabi_fmul>
 800f5b0:	4639      	mov	r1, r7
 800f5b2:	f7f1 faf9 	bl	8000ba8 <__aeabi_fsub>
 800f5b6:	490c      	ldr	r1, [pc, #48]	; (800f5e8 <__kernel_sinf+0xe8>)
 800f5b8:	4605      	mov	r5, r0
 800f5ba:	4630      	mov	r0, r6
 800f5bc:	f7f1 fbfe 	bl	8000dbc <__aeabi_fmul>
 800f5c0:	4601      	mov	r1, r0
 800f5c2:	4628      	mov	r0, r5
 800f5c4:	f7f1 faf2 	bl	8000bac <__addsf3>
 800f5c8:	4601      	mov	r1, r0
 800f5ca:	4620      	mov	r0, r4
 800f5cc:	f7f1 faec 	bl	8000ba8 <__aeabi_fsub>
 800f5d0:	e7d9      	b.n	800f586 <__kernel_sinf+0x86>
 800f5d2:	bf00      	nop
 800f5d4:	2f2ec9d3 	.word	0x2f2ec9d3
 800f5d8:	32d72f34 	.word	0x32d72f34
 800f5dc:	3638ef1b 	.word	0x3638ef1b
 800f5e0:	39500d01 	.word	0x39500d01
 800f5e4:	3c088889 	.word	0x3c088889
 800f5e8:	3e2aaaab 	.word	0x3e2aaaab

0800f5ec <fabs>:
 800f5ec:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800f5f0:	4770      	bx	lr
 800f5f2:	0000      	movs	r0, r0
 800f5f4:	0000      	movs	r0, r0
	...

0800f5f8 <floor>:
 800f5f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f5fc:	f3c1 580a 	ubfx	r8, r1, #20, #11
 800f600:	f2a8 36ff 	subw	r6, r8, #1023	; 0x3ff
 800f604:	2e13      	cmp	r6, #19
 800f606:	4602      	mov	r2, r0
 800f608:	460b      	mov	r3, r1
 800f60a:	4607      	mov	r7, r0
 800f60c:	460c      	mov	r4, r1
 800f60e:	4605      	mov	r5, r0
 800f610:	dc34      	bgt.n	800f67c <floor+0x84>
 800f612:	2e00      	cmp	r6, #0
 800f614:	da15      	bge.n	800f642 <floor+0x4a>
 800f616:	a334      	add	r3, pc, #208	; (adr r3, 800f6e8 <floor+0xf0>)
 800f618:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f61c:	f7f0 fde2 	bl	80001e4 <__adddf3>
 800f620:	2200      	movs	r2, #0
 800f622:	2300      	movs	r3, #0
 800f624:	f7f1 fa24 	bl	8000a70 <__aeabi_dcmpgt>
 800f628:	b140      	cbz	r0, 800f63c <floor+0x44>
 800f62a:	2c00      	cmp	r4, #0
 800f62c:	da59      	bge.n	800f6e2 <floor+0xea>
 800f62e:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800f632:	ea57 0503 	orrs.w	r5, r7, r3
 800f636:	d001      	beq.n	800f63c <floor+0x44>
 800f638:	2500      	movs	r5, #0
 800f63a:	4c2d      	ldr	r4, [pc, #180]	; (800f6f0 <floor+0xf8>)
 800f63c:	4623      	mov	r3, r4
 800f63e:	462f      	mov	r7, r5
 800f640:	e025      	b.n	800f68e <floor+0x96>
 800f642:	4a2c      	ldr	r2, [pc, #176]	; (800f6f4 <floor+0xfc>)
 800f644:	fa42 f806 	asr.w	r8, r2, r6
 800f648:	ea01 0208 	and.w	r2, r1, r8
 800f64c:	4302      	orrs	r2, r0
 800f64e:	d01e      	beq.n	800f68e <floor+0x96>
 800f650:	a325      	add	r3, pc, #148	; (adr r3, 800f6e8 <floor+0xf0>)
 800f652:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f656:	f7f0 fdc5 	bl	80001e4 <__adddf3>
 800f65a:	2200      	movs	r2, #0
 800f65c:	2300      	movs	r3, #0
 800f65e:	f7f1 fa07 	bl	8000a70 <__aeabi_dcmpgt>
 800f662:	2800      	cmp	r0, #0
 800f664:	d0ea      	beq.n	800f63c <floor+0x44>
 800f666:	2c00      	cmp	r4, #0
 800f668:	bfbe      	ittt	lt
 800f66a:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800f66e:	fa43 f606 	asrlt.w	r6, r3, r6
 800f672:	19a4      	addlt	r4, r4, r6
 800f674:	2500      	movs	r5, #0
 800f676:	ea24 0408 	bic.w	r4, r4, r8
 800f67a:	e7df      	b.n	800f63c <floor+0x44>
 800f67c:	2e33      	cmp	r6, #51	; 0x33
 800f67e:	dd0a      	ble.n	800f696 <floor+0x9e>
 800f680:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800f684:	d103      	bne.n	800f68e <floor+0x96>
 800f686:	f7f0 fdad 	bl	80001e4 <__adddf3>
 800f68a:	4607      	mov	r7, r0
 800f68c:	460b      	mov	r3, r1
 800f68e:	4638      	mov	r0, r7
 800f690:	4619      	mov	r1, r3
 800f692:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f696:	f04f 32ff 	mov.w	r2, #4294967295
 800f69a:	f2a8 4813 	subw	r8, r8, #1043	; 0x413
 800f69e:	fa22 f808 	lsr.w	r8, r2, r8
 800f6a2:	ea18 0f00 	tst.w	r8, r0
 800f6a6:	d0f2      	beq.n	800f68e <floor+0x96>
 800f6a8:	a30f      	add	r3, pc, #60	; (adr r3, 800f6e8 <floor+0xf0>)
 800f6aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f6ae:	f7f0 fd99 	bl	80001e4 <__adddf3>
 800f6b2:	2200      	movs	r2, #0
 800f6b4:	2300      	movs	r3, #0
 800f6b6:	f7f1 f9db 	bl	8000a70 <__aeabi_dcmpgt>
 800f6ba:	2800      	cmp	r0, #0
 800f6bc:	d0be      	beq.n	800f63c <floor+0x44>
 800f6be:	2c00      	cmp	r4, #0
 800f6c0:	da02      	bge.n	800f6c8 <floor+0xd0>
 800f6c2:	2e14      	cmp	r6, #20
 800f6c4:	d103      	bne.n	800f6ce <floor+0xd6>
 800f6c6:	3401      	adds	r4, #1
 800f6c8:	ea25 0508 	bic.w	r5, r5, r8
 800f6cc:	e7b6      	b.n	800f63c <floor+0x44>
 800f6ce:	2301      	movs	r3, #1
 800f6d0:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800f6d4:	fa03 f606 	lsl.w	r6, r3, r6
 800f6d8:	4435      	add	r5, r6
 800f6da:	42bd      	cmp	r5, r7
 800f6dc:	bf38      	it	cc
 800f6de:	18e4      	addcc	r4, r4, r3
 800f6e0:	e7f2      	b.n	800f6c8 <floor+0xd0>
 800f6e2:	2500      	movs	r5, #0
 800f6e4:	462c      	mov	r4, r5
 800f6e6:	e7a9      	b.n	800f63c <floor+0x44>
 800f6e8:	8800759c 	.word	0x8800759c
 800f6ec:	7e37e43c 	.word	0x7e37e43c
 800f6f0:	bff00000 	.word	0xbff00000
 800f6f4:	000fffff 	.word	0x000fffff

0800f6f8 <scalbn>:
 800f6f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f6fa:	f3c1 560a 	ubfx	r6, r1, #20, #11
 800f6fe:	4604      	mov	r4, r0
 800f700:	460d      	mov	r5, r1
 800f702:	4617      	mov	r7, r2
 800f704:	460b      	mov	r3, r1
 800f706:	b996      	cbnz	r6, 800f72e <scalbn+0x36>
 800f708:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800f70c:	4303      	orrs	r3, r0
 800f70e:	d039      	beq.n	800f784 <scalbn+0x8c>
 800f710:	4b35      	ldr	r3, [pc, #212]	; (800f7e8 <scalbn+0xf0>)
 800f712:	2200      	movs	r2, #0
 800f714:	f7f0 ff1c 	bl	8000550 <__aeabi_dmul>
 800f718:	4b34      	ldr	r3, [pc, #208]	; (800f7ec <scalbn+0xf4>)
 800f71a:	4604      	mov	r4, r0
 800f71c:	429f      	cmp	r7, r3
 800f71e:	460d      	mov	r5, r1
 800f720:	da0f      	bge.n	800f742 <scalbn+0x4a>
 800f722:	a32d      	add	r3, pc, #180	; (adr r3, 800f7d8 <scalbn+0xe0>)
 800f724:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f728:	f7f0 ff12 	bl	8000550 <__aeabi_dmul>
 800f72c:	e006      	b.n	800f73c <scalbn+0x44>
 800f72e:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800f732:	4296      	cmp	r6, r2
 800f734:	d10a      	bne.n	800f74c <scalbn+0x54>
 800f736:	4602      	mov	r2, r0
 800f738:	f7f0 fd54 	bl	80001e4 <__adddf3>
 800f73c:	4604      	mov	r4, r0
 800f73e:	460d      	mov	r5, r1
 800f740:	e020      	b.n	800f784 <scalbn+0x8c>
 800f742:	460b      	mov	r3, r1
 800f744:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800f748:	f1a1 0636 	sub.w	r6, r1, #54	; 0x36
 800f74c:	f240 72fe 	movw	r2, #2046	; 0x7fe
 800f750:	19b9      	adds	r1, r7, r6
 800f752:	4291      	cmp	r1, r2
 800f754:	dd0e      	ble.n	800f774 <scalbn+0x7c>
 800f756:	a322      	add	r3, pc, #136	; (adr r3, 800f7e0 <scalbn+0xe8>)
 800f758:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f75c:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 800f760:	f044 41fc 	orr.w	r1, r4, #2113929216	; 0x7e000000
 800f764:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
 800f768:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
 800f76c:	4820      	ldr	r0, [pc, #128]	; (800f7f0 <scalbn+0xf8>)
 800f76e:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
 800f772:	e7d9      	b.n	800f728 <scalbn+0x30>
 800f774:	2900      	cmp	r1, #0
 800f776:	dd08      	ble.n	800f78a <scalbn+0x92>
 800f778:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800f77c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800f780:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 800f784:	4620      	mov	r0, r4
 800f786:	4629      	mov	r1, r5
 800f788:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f78a:	f111 0f35 	cmn.w	r1, #53	; 0x35
 800f78e:	da16      	bge.n	800f7be <scalbn+0xc6>
 800f790:	f24c 3350 	movw	r3, #50000	; 0xc350
 800f794:	429f      	cmp	r7, r3
 800f796:	ea4f 73d5 	mov.w	r3, r5, lsr #31
 800f79a:	dd08      	ble.n	800f7ae <scalbn+0xb6>
 800f79c:	4c15      	ldr	r4, [pc, #84]	; (800f7f4 <scalbn+0xfc>)
 800f79e:	4814      	ldr	r0, [pc, #80]	; (800f7f0 <scalbn+0xf8>)
 800f7a0:	f363 74df 	bfi	r4, r3, #31, #1
 800f7a4:	a30e      	add	r3, pc, #56	; (adr r3, 800f7e0 <scalbn+0xe8>)
 800f7a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f7aa:	4621      	mov	r1, r4
 800f7ac:	e7bc      	b.n	800f728 <scalbn+0x30>
 800f7ae:	4c12      	ldr	r4, [pc, #72]	; (800f7f8 <scalbn+0x100>)
 800f7b0:	4812      	ldr	r0, [pc, #72]	; (800f7fc <scalbn+0x104>)
 800f7b2:	f363 74df 	bfi	r4, r3, #31, #1
 800f7b6:	a308      	add	r3, pc, #32	; (adr r3, 800f7d8 <scalbn+0xe0>)
 800f7b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f7bc:	e7f5      	b.n	800f7aa <scalbn+0xb2>
 800f7be:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800f7c2:	3136      	adds	r1, #54	; 0x36
 800f7c4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800f7c8:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 800f7cc:	4620      	mov	r0, r4
 800f7ce:	4629      	mov	r1, r5
 800f7d0:	2200      	movs	r2, #0
 800f7d2:	4b0b      	ldr	r3, [pc, #44]	; (800f800 <scalbn+0x108>)
 800f7d4:	e7a8      	b.n	800f728 <scalbn+0x30>
 800f7d6:	bf00      	nop
 800f7d8:	c2f8f359 	.word	0xc2f8f359
 800f7dc:	01a56e1f 	.word	0x01a56e1f
 800f7e0:	8800759c 	.word	0x8800759c
 800f7e4:	7e37e43c 	.word	0x7e37e43c
 800f7e8:	43500000 	.word	0x43500000
 800f7ec:	ffff3cb0 	.word	0xffff3cb0
 800f7f0:	8800759c 	.word	0x8800759c
 800f7f4:	7e37e43c 	.word	0x7e37e43c
 800f7f8:	01a56e1f 	.word	0x01a56e1f
 800f7fc:	c2f8f359 	.word	0xc2f8f359
 800f800:	3c900000 	.word	0x3c900000

0800f804 <floorf>:
 800f804:	b570      	push	{r4, r5, r6, lr}
 800f806:	f3c0 55c7 	ubfx	r5, r0, #23, #8
 800f80a:	3d7f      	subs	r5, #127	; 0x7f
 800f80c:	2d16      	cmp	r5, #22
 800f80e:	4601      	mov	r1, r0
 800f810:	4604      	mov	r4, r0
 800f812:	f020 4600 	bic.w	r6, r0, #2147483648	; 0x80000000
 800f816:	dc26      	bgt.n	800f866 <floorf+0x62>
 800f818:	2d00      	cmp	r5, #0
 800f81a:	da0e      	bge.n	800f83a <floorf+0x36>
 800f81c:	4917      	ldr	r1, [pc, #92]	; (800f87c <floorf+0x78>)
 800f81e:	f7f1 f9c5 	bl	8000bac <__addsf3>
 800f822:	2100      	movs	r1, #0
 800f824:	f7f1 fc86 	bl	8001134 <__aeabi_fcmpgt>
 800f828:	b128      	cbz	r0, 800f836 <floorf+0x32>
 800f82a:	2c00      	cmp	r4, #0
 800f82c:	da23      	bge.n	800f876 <floorf+0x72>
 800f82e:	4b14      	ldr	r3, [pc, #80]	; (800f880 <floorf+0x7c>)
 800f830:	2e00      	cmp	r6, #0
 800f832:	bf18      	it	ne
 800f834:	461c      	movne	r4, r3
 800f836:	4621      	mov	r1, r4
 800f838:	e01b      	b.n	800f872 <floorf+0x6e>
 800f83a:	4e12      	ldr	r6, [pc, #72]	; (800f884 <floorf+0x80>)
 800f83c:	412e      	asrs	r6, r5
 800f83e:	4230      	tst	r0, r6
 800f840:	d017      	beq.n	800f872 <floorf+0x6e>
 800f842:	490e      	ldr	r1, [pc, #56]	; (800f87c <floorf+0x78>)
 800f844:	f7f1 f9b2 	bl	8000bac <__addsf3>
 800f848:	2100      	movs	r1, #0
 800f84a:	f7f1 fc73 	bl	8001134 <__aeabi_fcmpgt>
 800f84e:	2800      	cmp	r0, #0
 800f850:	d0f1      	beq.n	800f836 <floorf+0x32>
 800f852:	2c00      	cmp	r4, #0
 800f854:	bfbe      	ittt	lt
 800f856:	f44f 0300 	movlt.w	r3, #8388608	; 0x800000
 800f85a:	fa43 f505 	asrlt.w	r5, r3, r5
 800f85e:	1964      	addlt	r4, r4, r5
 800f860:	ea24 0406 	bic.w	r4, r4, r6
 800f864:	e7e7      	b.n	800f836 <floorf+0x32>
 800f866:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 800f86a:	d302      	bcc.n	800f872 <floorf+0x6e>
 800f86c:	f7f1 f99e 	bl	8000bac <__addsf3>
 800f870:	4601      	mov	r1, r0
 800f872:	4608      	mov	r0, r1
 800f874:	bd70      	pop	{r4, r5, r6, pc}
 800f876:	2400      	movs	r4, #0
 800f878:	e7dd      	b.n	800f836 <floorf+0x32>
 800f87a:	bf00      	nop
 800f87c:	7149f2ca 	.word	0x7149f2ca
 800f880:	bf800000 	.word	0xbf800000
 800f884:	007fffff 	.word	0x007fffff

0800f888 <nanf>:
 800f888:	4800      	ldr	r0, [pc, #0]	; (800f88c <nanf+0x4>)
 800f88a:	4770      	bx	lr
 800f88c:	7fc00000 	.word	0x7fc00000

0800f890 <scalbnf>:
 800f890:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 800f894:	b538      	push	{r3, r4, r5, lr}
 800f896:	4603      	mov	r3, r0
 800f898:	460d      	mov	r5, r1
 800f89a:	4604      	mov	r4, r0
 800f89c:	d02a      	beq.n	800f8f4 <scalbnf+0x64>
 800f89e:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800f8a2:	d304      	bcc.n	800f8ae <scalbnf+0x1e>
 800f8a4:	4601      	mov	r1, r0
 800f8a6:	f7f1 f981 	bl	8000bac <__addsf3>
 800f8aa:	4603      	mov	r3, r0
 800f8ac:	e022      	b.n	800f8f4 <scalbnf+0x64>
 800f8ae:	f010 4fff 	tst.w	r0, #2139095040	; 0x7f800000
 800f8b2:	d117      	bne.n	800f8e4 <scalbnf+0x54>
 800f8b4:	f04f 4198 	mov.w	r1, #1275068416	; 0x4c000000
 800f8b8:	f7f1 fa80 	bl	8000dbc <__aeabi_fmul>
 800f8bc:	4a17      	ldr	r2, [pc, #92]	; (800f91c <scalbnf+0x8c>)
 800f8be:	4603      	mov	r3, r0
 800f8c0:	4295      	cmp	r5, r2
 800f8c2:	db0b      	blt.n	800f8dc <scalbnf+0x4c>
 800f8c4:	4604      	mov	r4, r0
 800f8c6:	f3c0 52c7 	ubfx	r2, r0, #23, #8
 800f8ca:	3a19      	subs	r2, #25
 800f8cc:	442a      	add	r2, r5
 800f8ce:	2afe      	cmp	r2, #254	; 0xfe
 800f8d0:	dd0a      	ble.n	800f8e8 <scalbnf+0x58>
 800f8d2:	4913      	ldr	r1, [pc, #76]	; (800f920 <scalbnf+0x90>)
 800f8d4:	4618      	mov	r0, r3
 800f8d6:	f361 001e 	bfi	r0, r1, #0, #31
 800f8da:	e000      	b.n	800f8de <scalbnf+0x4e>
 800f8dc:	4911      	ldr	r1, [pc, #68]	; (800f924 <scalbnf+0x94>)
 800f8de:	f7f1 fa6d 	bl	8000dbc <__aeabi_fmul>
 800f8e2:	e7e2      	b.n	800f8aa <scalbnf+0x1a>
 800f8e4:	0dd2      	lsrs	r2, r2, #23
 800f8e6:	e7f1      	b.n	800f8cc <scalbnf+0x3c>
 800f8e8:	2a00      	cmp	r2, #0
 800f8ea:	dd05      	ble.n	800f8f8 <scalbnf+0x68>
 800f8ec:	f024 40ff 	bic.w	r0, r4, #2139095040	; 0x7f800000
 800f8f0:	ea40 53c2 	orr.w	r3, r0, r2, lsl #23
 800f8f4:	4618      	mov	r0, r3
 800f8f6:	bd38      	pop	{r3, r4, r5, pc}
 800f8f8:	f112 0f16 	cmn.w	r2, #22
 800f8fc:	da05      	bge.n	800f90a <scalbnf+0x7a>
 800f8fe:	f24c 3250 	movw	r2, #50000	; 0xc350
 800f902:	4295      	cmp	r5, r2
 800f904:	dce5      	bgt.n	800f8d2 <scalbnf+0x42>
 800f906:	4907      	ldr	r1, [pc, #28]	; (800f924 <scalbnf+0x94>)
 800f908:	e7e4      	b.n	800f8d4 <scalbnf+0x44>
 800f90a:	3219      	adds	r2, #25
 800f90c:	f024 44ff 	bic.w	r4, r4, #2139095040	; 0x7f800000
 800f910:	f04f 514c 	mov.w	r1, #855638016	; 0x33000000
 800f914:	ea44 50c2 	orr.w	r0, r4, r2, lsl #23
 800f918:	e7e1      	b.n	800f8de <scalbnf+0x4e>
 800f91a:	bf00      	nop
 800f91c:	ffff3cb0 	.word	0xffff3cb0
 800f920:	7149f2ca 	.word	0x7149f2ca
 800f924:	0da24260 	.word	0x0da24260

0800f928 <__errno>:
 800f928:	4b01      	ldr	r3, [pc, #4]	; (800f930 <__errno+0x8>)
 800f92a:	6818      	ldr	r0, [r3, #0]
 800f92c:	4770      	bx	lr
 800f92e:	bf00      	nop
 800f930:	200001a8 	.word	0x200001a8

0800f934 <__libc_init_array>:
 800f934:	b570      	push	{r4, r5, r6, lr}
 800f936:	2600      	movs	r6, #0
 800f938:	4d0c      	ldr	r5, [pc, #48]	; (800f96c <__libc_init_array+0x38>)
 800f93a:	4c0d      	ldr	r4, [pc, #52]	; (800f970 <__libc_init_array+0x3c>)
 800f93c:	1b64      	subs	r4, r4, r5
 800f93e:	10a4      	asrs	r4, r4, #2
 800f940:	42a6      	cmp	r6, r4
 800f942:	d109      	bne.n	800f958 <__libc_init_array+0x24>
 800f944:	f002 fed8 	bl	80126f8 <_init>
 800f948:	2600      	movs	r6, #0
 800f94a:	4d0a      	ldr	r5, [pc, #40]	; (800f974 <__libc_init_array+0x40>)
 800f94c:	4c0a      	ldr	r4, [pc, #40]	; (800f978 <__libc_init_array+0x44>)
 800f94e:	1b64      	subs	r4, r4, r5
 800f950:	10a4      	asrs	r4, r4, #2
 800f952:	42a6      	cmp	r6, r4
 800f954:	d105      	bne.n	800f962 <__libc_init_array+0x2e>
 800f956:	bd70      	pop	{r4, r5, r6, pc}
 800f958:	f855 3b04 	ldr.w	r3, [r5], #4
 800f95c:	4798      	blx	r3
 800f95e:	3601      	adds	r6, #1
 800f960:	e7ee      	b.n	800f940 <__libc_init_array+0xc>
 800f962:	f855 3b04 	ldr.w	r3, [r5], #4
 800f966:	4798      	blx	r3
 800f968:	3601      	adds	r6, #1
 800f96a:	e7f2      	b.n	800f952 <__libc_init_array+0x1e>
 800f96c:	080139dc 	.word	0x080139dc
 800f970:	080139dc 	.word	0x080139dc
 800f974:	080139dc 	.word	0x080139dc
 800f978:	080139e8 	.word	0x080139e8

0800f97c <malloc>:
 800f97c:	4b02      	ldr	r3, [pc, #8]	; (800f988 <malloc+0xc>)
 800f97e:	4601      	mov	r1, r0
 800f980:	6818      	ldr	r0, [r3, #0]
 800f982:	f000 b86d 	b.w	800fa60 <_malloc_r>
 800f986:	bf00      	nop
 800f988:	200001a8 	.word	0x200001a8

0800f98c <free>:
 800f98c:	4b02      	ldr	r3, [pc, #8]	; (800f998 <free+0xc>)
 800f98e:	4601      	mov	r1, r0
 800f990:	6818      	ldr	r0, [r3, #0]
 800f992:	f000 b819 	b.w	800f9c8 <_free_r>
 800f996:	bf00      	nop
 800f998:	200001a8 	.word	0x200001a8

0800f99c <memcmp>:
 800f99c:	b530      	push	{r4, r5, lr}
 800f99e:	2400      	movs	r4, #0
 800f9a0:	3901      	subs	r1, #1
 800f9a2:	42a2      	cmp	r2, r4
 800f9a4:	d101      	bne.n	800f9aa <memcmp+0xe>
 800f9a6:	2000      	movs	r0, #0
 800f9a8:	e005      	b.n	800f9b6 <memcmp+0x1a>
 800f9aa:	5d03      	ldrb	r3, [r0, r4]
 800f9ac:	3401      	adds	r4, #1
 800f9ae:	5d0d      	ldrb	r5, [r1, r4]
 800f9b0:	42ab      	cmp	r3, r5
 800f9b2:	d0f6      	beq.n	800f9a2 <memcmp+0x6>
 800f9b4:	1b58      	subs	r0, r3, r5
 800f9b6:	bd30      	pop	{r4, r5, pc}

0800f9b8 <memset>:
 800f9b8:	4603      	mov	r3, r0
 800f9ba:	4402      	add	r2, r0
 800f9bc:	4293      	cmp	r3, r2
 800f9be:	d100      	bne.n	800f9c2 <memset+0xa>
 800f9c0:	4770      	bx	lr
 800f9c2:	f803 1b01 	strb.w	r1, [r3], #1
 800f9c6:	e7f9      	b.n	800f9bc <memset+0x4>

0800f9c8 <_free_r>:
 800f9c8:	b538      	push	{r3, r4, r5, lr}
 800f9ca:	4605      	mov	r5, r0
 800f9cc:	2900      	cmp	r1, #0
 800f9ce:	d043      	beq.n	800fa58 <_free_r+0x90>
 800f9d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f9d4:	1f0c      	subs	r4, r1, #4
 800f9d6:	2b00      	cmp	r3, #0
 800f9d8:	bfb8      	it	lt
 800f9da:	18e4      	addlt	r4, r4, r3
 800f9dc:	f001 fbce 	bl	801117c <__malloc_lock>
 800f9e0:	4a1e      	ldr	r2, [pc, #120]	; (800fa5c <_free_r+0x94>)
 800f9e2:	6813      	ldr	r3, [r2, #0]
 800f9e4:	4610      	mov	r0, r2
 800f9e6:	b933      	cbnz	r3, 800f9f6 <_free_r+0x2e>
 800f9e8:	6063      	str	r3, [r4, #4]
 800f9ea:	6014      	str	r4, [r2, #0]
 800f9ec:	4628      	mov	r0, r5
 800f9ee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f9f2:	f001 bbc9 	b.w	8011188 <__malloc_unlock>
 800f9f6:	42a3      	cmp	r3, r4
 800f9f8:	d90a      	bls.n	800fa10 <_free_r+0x48>
 800f9fa:	6821      	ldr	r1, [r4, #0]
 800f9fc:	1862      	adds	r2, r4, r1
 800f9fe:	4293      	cmp	r3, r2
 800fa00:	bf01      	itttt	eq
 800fa02:	681a      	ldreq	r2, [r3, #0]
 800fa04:	685b      	ldreq	r3, [r3, #4]
 800fa06:	1852      	addeq	r2, r2, r1
 800fa08:	6022      	streq	r2, [r4, #0]
 800fa0a:	6063      	str	r3, [r4, #4]
 800fa0c:	6004      	str	r4, [r0, #0]
 800fa0e:	e7ed      	b.n	800f9ec <_free_r+0x24>
 800fa10:	461a      	mov	r2, r3
 800fa12:	685b      	ldr	r3, [r3, #4]
 800fa14:	b10b      	cbz	r3, 800fa1a <_free_r+0x52>
 800fa16:	42a3      	cmp	r3, r4
 800fa18:	d9fa      	bls.n	800fa10 <_free_r+0x48>
 800fa1a:	6811      	ldr	r1, [r2, #0]
 800fa1c:	1850      	adds	r0, r2, r1
 800fa1e:	42a0      	cmp	r0, r4
 800fa20:	d10b      	bne.n	800fa3a <_free_r+0x72>
 800fa22:	6820      	ldr	r0, [r4, #0]
 800fa24:	4401      	add	r1, r0
 800fa26:	1850      	adds	r0, r2, r1
 800fa28:	4283      	cmp	r3, r0
 800fa2a:	6011      	str	r1, [r2, #0]
 800fa2c:	d1de      	bne.n	800f9ec <_free_r+0x24>
 800fa2e:	6818      	ldr	r0, [r3, #0]
 800fa30:	685b      	ldr	r3, [r3, #4]
 800fa32:	4401      	add	r1, r0
 800fa34:	6011      	str	r1, [r2, #0]
 800fa36:	6053      	str	r3, [r2, #4]
 800fa38:	e7d8      	b.n	800f9ec <_free_r+0x24>
 800fa3a:	d902      	bls.n	800fa42 <_free_r+0x7a>
 800fa3c:	230c      	movs	r3, #12
 800fa3e:	602b      	str	r3, [r5, #0]
 800fa40:	e7d4      	b.n	800f9ec <_free_r+0x24>
 800fa42:	6820      	ldr	r0, [r4, #0]
 800fa44:	1821      	adds	r1, r4, r0
 800fa46:	428b      	cmp	r3, r1
 800fa48:	bf01      	itttt	eq
 800fa4a:	6819      	ldreq	r1, [r3, #0]
 800fa4c:	685b      	ldreq	r3, [r3, #4]
 800fa4e:	1809      	addeq	r1, r1, r0
 800fa50:	6021      	streq	r1, [r4, #0]
 800fa52:	6063      	str	r3, [r4, #4]
 800fa54:	6054      	str	r4, [r2, #4]
 800fa56:	e7c9      	b.n	800f9ec <_free_r+0x24>
 800fa58:	bd38      	pop	{r3, r4, r5, pc}
 800fa5a:	bf00      	nop
 800fa5c:	20000914 	.word	0x20000914

0800fa60 <_malloc_r>:
 800fa60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fa62:	1ccd      	adds	r5, r1, #3
 800fa64:	f025 0503 	bic.w	r5, r5, #3
 800fa68:	3508      	adds	r5, #8
 800fa6a:	2d0c      	cmp	r5, #12
 800fa6c:	bf38      	it	cc
 800fa6e:	250c      	movcc	r5, #12
 800fa70:	2d00      	cmp	r5, #0
 800fa72:	4606      	mov	r6, r0
 800fa74:	db01      	blt.n	800fa7a <_malloc_r+0x1a>
 800fa76:	42a9      	cmp	r1, r5
 800fa78:	d903      	bls.n	800fa82 <_malloc_r+0x22>
 800fa7a:	230c      	movs	r3, #12
 800fa7c:	6033      	str	r3, [r6, #0]
 800fa7e:	2000      	movs	r0, #0
 800fa80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fa82:	f001 fb7b 	bl	801117c <__malloc_lock>
 800fa86:	4921      	ldr	r1, [pc, #132]	; (800fb0c <_malloc_r+0xac>)
 800fa88:	680a      	ldr	r2, [r1, #0]
 800fa8a:	4614      	mov	r4, r2
 800fa8c:	b99c      	cbnz	r4, 800fab6 <_malloc_r+0x56>
 800fa8e:	4f20      	ldr	r7, [pc, #128]	; (800fb10 <_malloc_r+0xb0>)
 800fa90:	683b      	ldr	r3, [r7, #0]
 800fa92:	b923      	cbnz	r3, 800fa9e <_malloc_r+0x3e>
 800fa94:	4621      	mov	r1, r4
 800fa96:	4630      	mov	r0, r6
 800fa98:	f000 fca4 	bl	80103e4 <_sbrk_r>
 800fa9c:	6038      	str	r0, [r7, #0]
 800fa9e:	4629      	mov	r1, r5
 800faa0:	4630      	mov	r0, r6
 800faa2:	f000 fc9f 	bl	80103e4 <_sbrk_r>
 800faa6:	1c43      	adds	r3, r0, #1
 800faa8:	d123      	bne.n	800faf2 <_malloc_r+0x92>
 800faaa:	230c      	movs	r3, #12
 800faac:	4630      	mov	r0, r6
 800faae:	6033      	str	r3, [r6, #0]
 800fab0:	f001 fb6a 	bl	8011188 <__malloc_unlock>
 800fab4:	e7e3      	b.n	800fa7e <_malloc_r+0x1e>
 800fab6:	6823      	ldr	r3, [r4, #0]
 800fab8:	1b5b      	subs	r3, r3, r5
 800faba:	d417      	bmi.n	800faec <_malloc_r+0x8c>
 800fabc:	2b0b      	cmp	r3, #11
 800fabe:	d903      	bls.n	800fac8 <_malloc_r+0x68>
 800fac0:	6023      	str	r3, [r4, #0]
 800fac2:	441c      	add	r4, r3
 800fac4:	6025      	str	r5, [r4, #0]
 800fac6:	e004      	b.n	800fad2 <_malloc_r+0x72>
 800fac8:	6863      	ldr	r3, [r4, #4]
 800faca:	42a2      	cmp	r2, r4
 800facc:	bf0c      	ite	eq
 800face:	600b      	streq	r3, [r1, #0]
 800fad0:	6053      	strne	r3, [r2, #4]
 800fad2:	4630      	mov	r0, r6
 800fad4:	f001 fb58 	bl	8011188 <__malloc_unlock>
 800fad8:	f104 000b 	add.w	r0, r4, #11
 800fadc:	1d23      	adds	r3, r4, #4
 800fade:	f020 0007 	bic.w	r0, r0, #7
 800fae2:	1ac2      	subs	r2, r0, r3
 800fae4:	d0cc      	beq.n	800fa80 <_malloc_r+0x20>
 800fae6:	1a1b      	subs	r3, r3, r0
 800fae8:	50a3      	str	r3, [r4, r2]
 800faea:	e7c9      	b.n	800fa80 <_malloc_r+0x20>
 800faec:	4622      	mov	r2, r4
 800faee:	6864      	ldr	r4, [r4, #4]
 800faf0:	e7cc      	b.n	800fa8c <_malloc_r+0x2c>
 800faf2:	1cc4      	adds	r4, r0, #3
 800faf4:	f024 0403 	bic.w	r4, r4, #3
 800faf8:	42a0      	cmp	r0, r4
 800fafa:	d0e3      	beq.n	800fac4 <_malloc_r+0x64>
 800fafc:	1a21      	subs	r1, r4, r0
 800fafe:	4630      	mov	r0, r6
 800fb00:	f000 fc70 	bl	80103e4 <_sbrk_r>
 800fb04:	3001      	adds	r0, #1
 800fb06:	d1dd      	bne.n	800fac4 <_malloc_r+0x64>
 800fb08:	e7cf      	b.n	800faaa <_malloc_r+0x4a>
 800fb0a:	bf00      	nop
 800fb0c:	20000914 	.word	0x20000914
 800fb10:	20000918 	.word	0x20000918

0800fb14 <__cvt>:
 800fb14:	2b00      	cmp	r3, #0
 800fb16:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fb1a:	461f      	mov	r7, r3
 800fb1c:	bfbb      	ittet	lt
 800fb1e:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 800fb22:	461f      	movlt	r7, r3
 800fb24:	2300      	movge	r3, #0
 800fb26:	232d      	movlt	r3, #45	; 0x2d
 800fb28:	b088      	sub	sp, #32
 800fb2a:	4614      	mov	r4, r2
 800fb2c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800fb2e:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800fb30:	7013      	strb	r3, [r2, #0]
 800fb32:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800fb34:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 800fb38:	f023 0820 	bic.w	r8, r3, #32
 800fb3c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800fb40:	d005      	beq.n	800fb4e <__cvt+0x3a>
 800fb42:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800fb46:	d100      	bne.n	800fb4a <__cvt+0x36>
 800fb48:	3501      	adds	r5, #1
 800fb4a:	2302      	movs	r3, #2
 800fb4c:	e000      	b.n	800fb50 <__cvt+0x3c>
 800fb4e:	2303      	movs	r3, #3
 800fb50:	aa07      	add	r2, sp, #28
 800fb52:	9204      	str	r2, [sp, #16]
 800fb54:	aa06      	add	r2, sp, #24
 800fb56:	e9cd a202 	strd	sl, r2, [sp, #8]
 800fb5a:	e9cd 3500 	strd	r3, r5, [sp]
 800fb5e:	4622      	mov	r2, r4
 800fb60:	463b      	mov	r3, r7
 800fb62:	f000 fcfd 	bl	8010560 <_dtoa_r>
 800fb66:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800fb6a:	4606      	mov	r6, r0
 800fb6c:	d102      	bne.n	800fb74 <__cvt+0x60>
 800fb6e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800fb70:	07db      	lsls	r3, r3, #31
 800fb72:	d522      	bpl.n	800fbba <__cvt+0xa6>
 800fb74:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800fb78:	eb06 0905 	add.w	r9, r6, r5
 800fb7c:	d110      	bne.n	800fba0 <__cvt+0x8c>
 800fb7e:	7833      	ldrb	r3, [r6, #0]
 800fb80:	2b30      	cmp	r3, #48	; 0x30
 800fb82:	d10a      	bne.n	800fb9a <__cvt+0x86>
 800fb84:	2200      	movs	r2, #0
 800fb86:	2300      	movs	r3, #0
 800fb88:	4620      	mov	r0, r4
 800fb8a:	4639      	mov	r1, r7
 800fb8c:	f7f0 ff48 	bl	8000a20 <__aeabi_dcmpeq>
 800fb90:	b918      	cbnz	r0, 800fb9a <__cvt+0x86>
 800fb92:	f1c5 0501 	rsb	r5, r5, #1
 800fb96:	f8ca 5000 	str.w	r5, [sl]
 800fb9a:	f8da 3000 	ldr.w	r3, [sl]
 800fb9e:	4499      	add	r9, r3
 800fba0:	2200      	movs	r2, #0
 800fba2:	2300      	movs	r3, #0
 800fba4:	4620      	mov	r0, r4
 800fba6:	4639      	mov	r1, r7
 800fba8:	f7f0 ff3a 	bl	8000a20 <__aeabi_dcmpeq>
 800fbac:	b108      	cbz	r0, 800fbb2 <__cvt+0x9e>
 800fbae:	f8cd 901c 	str.w	r9, [sp, #28]
 800fbb2:	2230      	movs	r2, #48	; 0x30
 800fbb4:	9b07      	ldr	r3, [sp, #28]
 800fbb6:	454b      	cmp	r3, r9
 800fbb8:	d307      	bcc.n	800fbca <__cvt+0xb6>
 800fbba:	4630      	mov	r0, r6
 800fbbc:	9b07      	ldr	r3, [sp, #28]
 800fbbe:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800fbc0:	1b9b      	subs	r3, r3, r6
 800fbc2:	6013      	str	r3, [r2, #0]
 800fbc4:	b008      	add	sp, #32
 800fbc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fbca:	1c59      	adds	r1, r3, #1
 800fbcc:	9107      	str	r1, [sp, #28]
 800fbce:	701a      	strb	r2, [r3, #0]
 800fbd0:	e7f0      	b.n	800fbb4 <__cvt+0xa0>

0800fbd2 <__exponent>:
 800fbd2:	4603      	mov	r3, r0
 800fbd4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800fbd6:	2900      	cmp	r1, #0
 800fbd8:	f803 2b02 	strb.w	r2, [r3], #2
 800fbdc:	bfb6      	itet	lt
 800fbde:	222d      	movlt	r2, #45	; 0x2d
 800fbe0:	222b      	movge	r2, #43	; 0x2b
 800fbe2:	4249      	neglt	r1, r1
 800fbe4:	2909      	cmp	r1, #9
 800fbe6:	7042      	strb	r2, [r0, #1]
 800fbe8:	dd2b      	ble.n	800fc42 <__exponent+0x70>
 800fbea:	f10d 0407 	add.w	r4, sp, #7
 800fbee:	46a4      	mov	ip, r4
 800fbf0:	270a      	movs	r7, #10
 800fbf2:	fb91 f6f7 	sdiv	r6, r1, r7
 800fbf6:	460a      	mov	r2, r1
 800fbf8:	46a6      	mov	lr, r4
 800fbfa:	fb07 1516 	mls	r5, r7, r6, r1
 800fbfe:	2a63      	cmp	r2, #99	; 0x63
 800fc00:	f105 0530 	add.w	r5, r5, #48	; 0x30
 800fc04:	4631      	mov	r1, r6
 800fc06:	f104 34ff 	add.w	r4, r4, #4294967295
 800fc0a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800fc0e:	dcf0      	bgt.n	800fbf2 <__exponent+0x20>
 800fc10:	3130      	adds	r1, #48	; 0x30
 800fc12:	f1ae 0502 	sub.w	r5, lr, #2
 800fc16:	f804 1c01 	strb.w	r1, [r4, #-1]
 800fc1a:	4629      	mov	r1, r5
 800fc1c:	1c44      	adds	r4, r0, #1
 800fc1e:	4561      	cmp	r1, ip
 800fc20:	d30a      	bcc.n	800fc38 <__exponent+0x66>
 800fc22:	f10d 0209 	add.w	r2, sp, #9
 800fc26:	eba2 020e 	sub.w	r2, r2, lr
 800fc2a:	4565      	cmp	r5, ip
 800fc2c:	bf88      	it	hi
 800fc2e:	2200      	movhi	r2, #0
 800fc30:	4413      	add	r3, r2
 800fc32:	1a18      	subs	r0, r3, r0
 800fc34:	b003      	add	sp, #12
 800fc36:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fc38:	f811 2b01 	ldrb.w	r2, [r1], #1
 800fc3c:	f804 2f01 	strb.w	r2, [r4, #1]!
 800fc40:	e7ed      	b.n	800fc1e <__exponent+0x4c>
 800fc42:	2330      	movs	r3, #48	; 0x30
 800fc44:	3130      	adds	r1, #48	; 0x30
 800fc46:	7083      	strb	r3, [r0, #2]
 800fc48:	70c1      	strb	r1, [r0, #3]
 800fc4a:	1d03      	adds	r3, r0, #4
 800fc4c:	e7f1      	b.n	800fc32 <__exponent+0x60>
	...

0800fc50 <_printf_float>:
 800fc50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fc54:	b091      	sub	sp, #68	; 0x44
 800fc56:	460c      	mov	r4, r1
 800fc58:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 800fc5c:	4616      	mov	r6, r2
 800fc5e:	461f      	mov	r7, r3
 800fc60:	4605      	mov	r5, r0
 800fc62:	f001 fa6b 	bl	801113c <_localeconv_r>
 800fc66:	6803      	ldr	r3, [r0, #0]
 800fc68:	4618      	mov	r0, r3
 800fc6a:	9309      	str	r3, [sp, #36]	; 0x24
 800fc6c:	f7f0 faac 	bl	80001c8 <strlen>
 800fc70:	2300      	movs	r3, #0
 800fc72:	930e      	str	r3, [sp, #56]	; 0x38
 800fc74:	f8d8 3000 	ldr.w	r3, [r8]
 800fc78:	900a      	str	r0, [sp, #40]	; 0x28
 800fc7a:	3307      	adds	r3, #7
 800fc7c:	f023 0307 	bic.w	r3, r3, #7
 800fc80:	f103 0208 	add.w	r2, r3, #8
 800fc84:	f894 9018 	ldrb.w	r9, [r4, #24]
 800fc88:	f8d4 b000 	ldr.w	fp, [r4]
 800fc8c:	f8c8 2000 	str.w	r2, [r8]
 800fc90:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc94:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800fc98:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 800fc9c:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 800fca0:	930b      	str	r3, [sp, #44]	; 0x2c
 800fca2:	f04f 32ff 	mov.w	r2, #4294967295
 800fca6:	4640      	mov	r0, r8
 800fca8:	4b9c      	ldr	r3, [pc, #624]	; (800ff1c <_printf_float+0x2cc>)
 800fcaa:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800fcac:	f7f0 feea 	bl	8000a84 <__aeabi_dcmpun>
 800fcb0:	bb70      	cbnz	r0, 800fd10 <_printf_float+0xc0>
 800fcb2:	f04f 32ff 	mov.w	r2, #4294967295
 800fcb6:	4640      	mov	r0, r8
 800fcb8:	4b98      	ldr	r3, [pc, #608]	; (800ff1c <_printf_float+0x2cc>)
 800fcba:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800fcbc:	f7f0 fec4 	bl	8000a48 <__aeabi_dcmple>
 800fcc0:	bb30      	cbnz	r0, 800fd10 <_printf_float+0xc0>
 800fcc2:	2200      	movs	r2, #0
 800fcc4:	2300      	movs	r3, #0
 800fcc6:	4640      	mov	r0, r8
 800fcc8:	4651      	mov	r1, sl
 800fcca:	f7f0 feb3 	bl	8000a34 <__aeabi_dcmplt>
 800fcce:	b110      	cbz	r0, 800fcd6 <_printf_float+0x86>
 800fcd0:	232d      	movs	r3, #45	; 0x2d
 800fcd2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800fcd6:	4b92      	ldr	r3, [pc, #584]	; (800ff20 <_printf_float+0x2d0>)
 800fcd8:	4892      	ldr	r0, [pc, #584]	; (800ff24 <_printf_float+0x2d4>)
 800fcda:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800fcde:	bf94      	ite	ls
 800fce0:	4698      	movls	r8, r3
 800fce2:	4680      	movhi	r8, r0
 800fce4:	2303      	movs	r3, #3
 800fce6:	f04f 0a00 	mov.w	sl, #0
 800fcea:	6123      	str	r3, [r4, #16]
 800fcec:	f02b 0304 	bic.w	r3, fp, #4
 800fcf0:	6023      	str	r3, [r4, #0]
 800fcf2:	4633      	mov	r3, r6
 800fcf4:	4621      	mov	r1, r4
 800fcf6:	4628      	mov	r0, r5
 800fcf8:	9700      	str	r7, [sp, #0]
 800fcfa:	aa0f      	add	r2, sp, #60	; 0x3c
 800fcfc:	f000 f9d4 	bl	80100a8 <_printf_common>
 800fd00:	3001      	adds	r0, #1
 800fd02:	f040 8090 	bne.w	800fe26 <_printf_float+0x1d6>
 800fd06:	f04f 30ff 	mov.w	r0, #4294967295
 800fd0a:	b011      	add	sp, #68	; 0x44
 800fd0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fd10:	4642      	mov	r2, r8
 800fd12:	4653      	mov	r3, sl
 800fd14:	4640      	mov	r0, r8
 800fd16:	4651      	mov	r1, sl
 800fd18:	f7f0 feb4 	bl	8000a84 <__aeabi_dcmpun>
 800fd1c:	b148      	cbz	r0, 800fd32 <_printf_float+0xe2>
 800fd1e:	f1ba 0f00 	cmp.w	sl, #0
 800fd22:	bfb8      	it	lt
 800fd24:	232d      	movlt	r3, #45	; 0x2d
 800fd26:	4880      	ldr	r0, [pc, #512]	; (800ff28 <_printf_float+0x2d8>)
 800fd28:	bfb8      	it	lt
 800fd2a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800fd2e:	4b7f      	ldr	r3, [pc, #508]	; (800ff2c <_printf_float+0x2dc>)
 800fd30:	e7d3      	b.n	800fcda <_printf_float+0x8a>
 800fd32:	6863      	ldr	r3, [r4, #4]
 800fd34:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800fd38:	1c5a      	adds	r2, r3, #1
 800fd3a:	d142      	bne.n	800fdc2 <_printf_float+0x172>
 800fd3c:	2306      	movs	r3, #6
 800fd3e:	6063      	str	r3, [r4, #4]
 800fd40:	2200      	movs	r2, #0
 800fd42:	9206      	str	r2, [sp, #24]
 800fd44:	aa0e      	add	r2, sp, #56	; 0x38
 800fd46:	e9cd 9204 	strd	r9, r2, [sp, #16]
 800fd4a:	aa0d      	add	r2, sp, #52	; 0x34
 800fd4c:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 800fd50:	9203      	str	r2, [sp, #12]
 800fd52:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 800fd56:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800fd5a:	6023      	str	r3, [r4, #0]
 800fd5c:	6863      	ldr	r3, [r4, #4]
 800fd5e:	4642      	mov	r2, r8
 800fd60:	9300      	str	r3, [sp, #0]
 800fd62:	4628      	mov	r0, r5
 800fd64:	4653      	mov	r3, sl
 800fd66:	910b      	str	r1, [sp, #44]	; 0x2c
 800fd68:	f7ff fed4 	bl	800fb14 <__cvt>
 800fd6c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800fd6e:	4680      	mov	r8, r0
 800fd70:	2947      	cmp	r1, #71	; 0x47
 800fd72:	990d      	ldr	r1, [sp, #52]	; 0x34
 800fd74:	d108      	bne.n	800fd88 <_printf_float+0x138>
 800fd76:	1cc8      	adds	r0, r1, #3
 800fd78:	db02      	blt.n	800fd80 <_printf_float+0x130>
 800fd7a:	6863      	ldr	r3, [r4, #4]
 800fd7c:	4299      	cmp	r1, r3
 800fd7e:	dd40      	ble.n	800fe02 <_printf_float+0x1b2>
 800fd80:	f1a9 0902 	sub.w	r9, r9, #2
 800fd84:	fa5f f989 	uxtb.w	r9, r9
 800fd88:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800fd8c:	d81f      	bhi.n	800fdce <_printf_float+0x17e>
 800fd8e:	464a      	mov	r2, r9
 800fd90:	3901      	subs	r1, #1
 800fd92:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800fd96:	910d      	str	r1, [sp, #52]	; 0x34
 800fd98:	f7ff ff1b 	bl	800fbd2 <__exponent>
 800fd9c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800fd9e:	4682      	mov	sl, r0
 800fda0:	1813      	adds	r3, r2, r0
 800fda2:	2a01      	cmp	r2, #1
 800fda4:	6123      	str	r3, [r4, #16]
 800fda6:	dc02      	bgt.n	800fdae <_printf_float+0x15e>
 800fda8:	6822      	ldr	r2, [r4, #0]
 800fdaa:	07d2      	lsls	r2, r2, #31
 800fdac:	d501      	bpl.n	800fdb2 <_printf_float+0x162>
 800fdae:	3301      	adds	r3, #1
 800fdb0:	6123      	str	r3, [r4, #16]
 800fdb2:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800fdb6:	2b00      	cmp	r3, #0
 800fdb8:	d09b      	beq.n	800fcf2 <_printf_float+0xa2>
 800fdba:	232d      	movs	r3, #45	; 0x2d
 800fdbc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800fdc0:	e797      	b.n	800fcf2 <_printf_float+0xa2>
 800fdc2:	2947      	cmp	r1, #71	; 0x47
 800fdc4:	d1bc      	bne.n	800fd40 <_printf_float+0xf0>
 800fdc6:	2b00      	cmp	r3, #0
 800fdc8:	d1ba      	bne.n	800fd40 <_printf_float+0xf0>
 800fdca:	2301      	movs	r3, #1
 800fdcc:	e7b7      	b.n	800fd3e <_printf_float+0xee>
 800fdce:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800fdd2:	d118      	bne.n	800fe06 <_printf_float+0x1b6>
 800fdd4:	2900      	cmp	r1, #0
 800fdd6:	6863      	ldr	r3, [r4, #4]
 800fdd8:	dd0b      	ble.n	800fdf2 <_printf_float+0x1a2>
 800fdda:	6121      	str	r1, [r4, #16]
 800fddc:	b913      	cbnz	r3, 800fde4 <_printf_float+0x194>
 800fdde:	6822      	ldr	r2, [r4, #0]
 800fde0:	07d0      	lsls	r0, r2, #31
 800fde2:	d502      	bpl.n	800fdea <_printf_float+0x19a>
 800fde4:	3301      	adds	r3, #1
 800fde6:	440b      	add	r3, r1
 800fde8:	6123      	str	r3, [r4, #16]
 800fdea:	f04f 0a00 	mov.w	sl, #0
 800fdee:	65a1      	str	r1, [r4, #88]	; 0x58
 800fdf0:	e7df      	b.n	800fdb2 <_printf_float+0x162>
 800fdf2:	b913      	cbnz	r3, 800fdfa <_printf_float+0x1aa>
 800fdf4:	6822      	ldr	r2, [r4, #0]
 800fdf6:	07d2      	lsls	r2, r2, #31
 800fdf8:	d501      	bpl.n	800fdfe <_printf_float+0x1ae>
 800fdfa:	3302      	adds	r3, #2
 800fdfc:	e7f4      	b.n	800fde8 <_printf_float+0x198>
 800fdfe:	2301      	movs	r3, #1
 800fe00:	e7f2      	b.n	800fde8 <_printf_float+0x198>
 800fe02:	f04f 0967 	mov.w	r9, #103	; 0x67
 800fe06:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800fe08:	4299      	cmp	r1, r3
 800fe0a:	db05      	blt.n	800fe18 <_printf_float+0x1c8>
 800fe0c:	6823      	ldr	r3, [r4, #0]
 800fe0e:	6121      	str	r1, [r4, #16]
 800fe10:	07d8      	lsls	r0, r3, #31
 800fe12:	d5ea      	bpl.n	800fdea <_printf_float+0x19a>
 800fe14:	1c4b      	adds	r3, r1, #1
 800fe16:	e7e7      	b.n	800fde8 <_printf_float+0x198>
 800fe18:	2900      	cmp	r1, #0
 800fe1a:	bfcc      	ite	gt
 800fe1c:	2201      	movgt	r2, #1
 800fe1e:	f1c1 0202 	rsble	r2, r1, #2
 800fe22:	4413      	add	r3, r2
 800fe24:	e7e0      	b.n	800fde8 <_printf_float+0x198>
 800fe26:	6823      	ldr	r3, [r4, #0]
 800fe28:	055a      	lsls	r2, r3, #21
 800fe2a:	d407      	bmi.n	800fe3c <_printf_float+0x1ec>
 800fe2c:	6923      	ldr	r3, [r4, #16]
 800fe2e:	4642      	mov	r2, r8
 800fe30:	4631      	mov	r1, r6
 800fe32:	4628      	mov	r0, r5
 800fe34:	47b8      	blx	r7
 800fe36:	3001      	adds	r0, #1
 800fe38:	d12b      	bne.n	800fe92 <_printf_float+0x242>
 800fe3a:	e764      	b.n	800fd06 <_printf_float+0xb6>
 800fe3c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800fe40:	f240 80dd 	bls.w	800fffe <_printf_float+0x3ae>
 800fe44:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800fe48:	2200      	movs	r2, #0
 800fe4a:	2300      	movs	r3, #0
 800fe4c:	f7f0 fde8 	bl	8000a20 <__aeabi_dcmpeq>
 800fe50:	2800      	cmp	r0, #0
 800fe52:	d033      	beq.n	800febc <_printf_float+0x26c>
 800fe54:	2301      	movs	r3, #1
 800fe56:	4631      	mov	r1, r6
 800fe58:	4628      	mov	r0, r5
 800fe5a:	4a35      	ldr	r2, [pc, #212]	; (800ff30 <_printf_float+0x2e0>)
 800fe5c:	47b8      	blx	r7
 800fe5e:	3001      	adds	r0, #1
 800fe60:	f43f af51 	beq.w	800fd06 <_printf_float+0xb6>
 800fe64:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800fe68:	429a      	cmp	r2, r3
 800fe6a:	db02      	blt.n	800fe72 <_printf_float+0x222>
 800fe6c:	6823      	ldr	r3, [r4, #0]
 800fe6e:	07d8      	lsls	r0, r3, #31
 800fe70:	d50f      	bpl.n	800fe92 <_printf_float+0x242>
 800fe72:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800fe76:	4631      	mov	r1, r6
 800fe78:	4628      	mov	r0, r5
 800fe7a:	47b8      	blx	r7
 800fe7c:	3001      	adds	r0, #1
 800fe7e:	f43f af42 	beq.w	800fd06 <_printf_float+0xb6>
 800fe82:	f04f 0800 	mov.w	r8, #0
 800fe86:	f104 091a 	add.w	r9, r4, #26
 800fe8a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800fe8c:	3b01      	subs	r3, #1
 800fe8e:	4543      	cmp	r3, r8
 800fe90:	dc09      	bgt.n	800fea6 <_printf_float+0x256>
 800fe92:	6823      	ldr	r3, [r4, #0]
 800fe94:	079b      	lsls	r3, r3, #30
 800fe96:	f100 8102 	bmi.w	801009e <_printf_float+0x44e>
 800fe9a:	68e0      	ldr	r0, [r4, #12]
 800fe9c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800fe9e:	4298      	cmp	r0, r3
 800fea0:	bfb8      	it	lt
 800fea2:	4618      	movlt	r0, r3
 800fea4:	e731      	b.n	800fd0a <_printf_float+0xba>
 800fea6:	2301      	movs	r3, #1
 800fea8:	464a      	mov	r2, r9
 800feaa:	4631      	mov	r1, r6
 800feac:	4628      	mov	r0, r5
 800feae:	47b8      	blx	r7
 800feb0:	3001      	adds	r0, #1
 800feb2:	f43f af28 	beq.w	800fd06 <_printf_float+0xb6>
 800feb6:	f108 0801 	add.w	r8, r8, #1
 800feba:	e7e6      	b.n	800fe8a <_printf_float+0x23a>
 800febc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800febe:	2b00      	cmp	r3, #0
 800fec0:	dc38      	bgt.n	800ff34 <_printf_float+0x2e4>
 800fec2:	2301      	movs	r3, #1
 800fec4:	4631      	mov	r1, r6
 800fec6:	4628      	mov	r0, r5
 800fec8:	4a19      	ldr	r2, [pc, #100]	; (800ff30 <_printf_float+0x2e0>)
 800feca:	47b8      	blx	r7
 800fecc:	3001      	adds	r0, #1
 800fece:	f43f af1a 	beq.w	800fd06 <_printf_float+0xb6>
 800fed2:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800fed6:	4313      	orrs	r3, r2
 800fed8:	d102      	bne.n	800fee0 <_printf_float+0x290>
 800feda:	6823      	ldr	r3, [r4, #0]
 800fedc:	07d9      	lsls	r1, r3, #31
 800fede:	d5d8      	bpl.n	800fe92 <_printf_float+0x242>
 800fee0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800fee4:	4631      	mov	r1, r6
 800fee6:	4628      	mov	r0, r5
 800fee8:	47b8      	blx	r7
 800feea:	3001      	adds	r0, #1
 800feec:	f43f af0b 	beq.w	800fd06 <_printf_float+0xb6>
 800fef0:	f04f 0900 	mov.w	r9, #0
 800fef4:	f104 0a1a 	add.w	sl, r4, #26
 800fef8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800fefa:	425b      	negs	r3, r3
 800fefc:	454b      	cmp	r3, r9
 800fefe:	dc01      	bgt.n	800ff04 <_printf_float+0x2b4>
 800ff00:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ff02:	e794      	b.n	800fe2e <_printf_float+0x1de>
 800ff04:	2301      	movs	r3, #1
 800ff06:	4652      	mov	r2, sl
 800ff08:	4631      	mov	r1, r6
 800ff0a:	4628      	mov	r0, r5
 800ff0c:	47b8      	blx	r7
 800ff0e:	3001      	adds	r0, #1
 800ff10:	f43f aef9 	beq.w	800fd06 <_printf_float+0xb6>
 800ff14:	f109 0901 	add.w	r9, r9, #1
 800ff18:	e7ee      	b.n	800fef8 <_printf_float+0x2a8>
 800ff1a:	bf00      	nop
 800ff1c:	7fefffff 	.word	0x7fefffff
 800ff20:	080135f4 	.word	0x080135f4
 800ff24:	080135f8 	.word	0x080135f8
 800ff28:	08013600 	.word	0x08013600
 800ff2c:	080135fc 	.word	0x080135fc
 800ff30:	08013604 	.word	0x08013604
 800ff34:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ff36:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800ff38:	429a      	cmp	r2, r3
 800ff3a:	bfa8      	it	ge
 800ff3c:	461a      	movge	r2, r3
 800ff3e:	2a00      	cmp	r2, #0
 800ff40:	4691      	mov	r9, r2
 800ff42:	dc37      	bgt.n	800ffb4 <_printf_float+0x364>
 800ff44:	f04f 0b00 	mov.w	fp, #0
 800ff48:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ff4c:	f104 021a 	add.w	r2, r4, #26
 800ff50:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800ff54:	ebaa 0309 	sub.w	r3, sl, r9
 800ff58:	455b      	cmp	r3, fp
 800ff5a:	dc33      	bgt.n	800ffc4 <_printf_float+0x374>
 800ff5c:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800ff60:	429a      	cmp	r2, r3
 800ff62:	db3b      	blt.n	800ffdc <_printf_float+0x38c>
 800ff64:	6823      	ldr	r3, [r4, #0]
 800ff66:	07da      	lsls	r2, r3, #31
 800ff68:	d438      	bmi.n	800ffdc <_printf_float+0x38c>
 800ff6a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ff6c:	990d      	ldr	r1, [sp, #52]	; 0x34
 800ff6e:	eba2 030a 	sub.w	r3, r2, sl
 800ff72:	eba2 0901 	sub.w	r9, r2, r1
 800ff76:	4599      	cmp	r9, r3
 800ff78:	bfa8      	it	ge
 800ff7a:	4699      	movge	r9, r3
 800ff7c:	f1b9 0f00 	cmp.w	r9, #0
 800ff80:	dc34      	bgt.n	800ffec <_printf_float+0x39c>
 800ff82:	f04f 0800 	mov.w	r8, #0
 800ff86:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ff8a:	f104 0a1a 	add.w	sl, r4, #26
 800ff8e:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800ff92:	1a9b      	subs	r3, r3, r2
 800ff94:	eba3 0309 	sub.w	r3, r3, r9
 800ff98:	4543      	cmp	r3, r8
 800ff9a:	f77f af7a 	ble.w	800fe92 <_printf_float+0x242>
 800ff9e:	2301      	movs	r3, #1
 800ffa0:	4652      	mov	r2, sl
 800ffa2:	4631      	mov	r1, r6
 800ffa4:	4628      	mov	r0, r5
 800ffa6:	47b8      	blx	r7
 800ffa8:	3001      	adds	r0, #1
 800ffaa:	f43f aeac 	beq.w	800fd06 <_printf_float+0xb6>
 800ffae:	f108 0801 	add.w	r8, r8, #1
 800ffb2:	e7ec      	b.n	800ff8e <_printf_float+0x33e>
 800ffb4:	4613      	mov	r3, r2
 800ffb6:	4631      	mov	r1, r6
 800ffb8:	4642      	mov	r2, r8
 800ffba:	4628      	mov	r0, r5
 800ffbc:	47b8      	blx	r7
 800ffbe:	3001      	adds	r0, #1
 800ffc0:	d1c0      	bne.n	800ff44 <_printf_float+0x2f4>
 800ffc2:	e6a0      	b.n	800fd06 <_printf_float+0xb6>
 800ffc4:	2301      	movs	r3, #1
 800ffc6:	4631      	mov	r1, r6
 800ffc8:	4628      	mov	r0, r5
 800ffca:	920b      	str	r2, [sp, #44]	; 0x2c
 800ffcc:	47b8      	blx	r7
 800ffce:	3001      	adds	r0, #1
 800ffd0:	f43f ae99 	beq.w	800fd06 <_printf_float+0xb6>
 800ffd4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800ffd6:	f10b 0b01 	add.w	fp, fp, #1
 800ffda:	e7b9      	b.n	800ff50 <_printf_float+0x300>
 800ffdc:	4631      	mov	r1, r6
 800ffde:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ffe2:	4628      	mov	r0, r5
 800ffe4:	47b8      	blx	r7
 800ffe6:	3001      	adds	r0, #1
 800ffe8:	d1bf      	bne.n	800ff6a <_printf_float+0x31a>
 800ffea:	e68c      	b.n	800fd06 <_printf_float+0xb6>
 800ffec:	464b      	mov	r3, r9
 800ffee:	4631      	mov	r1, r6
 800fff0:	4628      	mov	r0, r5
 800fff2:	eb08 020a 	add.w	r2, r8, sl
 800fff6:	47b8      	blx	r7
 800fff8:	3001      	adds	r0, #1
 800fffa:	d1c2      	bne.n	800ff82 <_printf_float+0x332>
 800fffc:	e683      	b.n	800fd06 <_printf_float+0xb6>
 800fffe:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8010000:	2a01      	cmp	r2, #1
 8010002:	dc01      	bgt.n	8010008 <_printf_float+0x3b8>
 8010004:	07db      	lsls	r3, r3, #31
 8010006:	d537      	bpl.n	8010078 <_printf_float+0x428>
 8010008:	2301      	movs	r3, #1
 801000a:	4642      	mov	r2, r8
 801000c:	4631      	mov	r1, r6
 801000e:	4628      	mov	r0, r5
 8010010:	47b8      	blx	r7
 8010012:	3001      	adds	r0, #1
 8010014:	f43f ae77 	beq.w	800fd06 <_printf_float+0xb6>
 8010018:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801001c:	4631      	mov	r1, r6
 801001e:	4628      	mov	r0, r5
 8010020:	47b8      	blx	r7
 8010022:	3001      	adds	r0, #1
 8010024:	f43f ae6f 	beq.w	800fd06 <_printf_float+0xb6>
 8010028:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 801002c:	2200      	movs	r2, #0
 801002e:	2300      	movs	r3, #0
 8010030:	f7f0 fcf6 	bl	8000a20 <__aeabi_dcmpeq>
 8010034:	b9d8      	cbnz	r0, 801006e <_printf_float+0x41e>
 8010036:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010038:	f108 0201 	add.w	r2, r8, #1
 801003c:	3b01      	subs	r3, #1
 801003e:	4631      	mov	r1, r6
 8010040:	4628      	mov	r0, r5
 8010042:	47b8      	blx	r7
 8010044:	3001      	adds	r0, #1
 8010046:	d10e      	bne.n	8010066 <_printf_float+0x416>
 8010048:	e65d      	b.n	800fd06 <_printf_float+0xb6>
 801004a:	2301      	movs	r3, #1
 801004c:	464a      	mov	r2, r9
 801004e:	4631      	mov	r1, r6
 8010050:	4628      	mov	r0, r5
 8010052:	47b8      	blx	r7
 8010054:	3001      	adds	r0, #1
 8010056:	f43f ae56 	beq.w	800fd06 <_printf_float+0xb6>
 801005a:	f108 0801 	add.w	r8, r8, #1
 801005e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010060:	3b01      	subs	r3, #1
 8010062:	4543      	cmp	r3, r8
 8010064:	dcf1      	bgt.n	801004a <_printf_float+0x3fa>
 8010066:	4653      	mov	r3, sl
 8010068:	f104 0250 	add.w	r2, r4, #80	; 0x50
 801006c:	e6e0      	b.n	800fe30 <_printf_float+0x1e0>
 801006e:	f04f 0800 	mov.w	r8, #0
 8010072:	f104 091a 	add.w	r9, r4, #26
 8010076:	e7f2      	b.n	801005e <_printf_float+0x40e>
 8010078:	2301      	movs	r3, #1
 801007a:	4642      	mov	r2, r8
 801007c:	e7df      	b.n	801003e <_printf_float+0x3ee>
 801007e:	2301      	movs	r3, #1
 8010080:	464a      	mov	r2, r9
 8010082:	4631      	mov	r1, r6
 8010084:	4628      	mov	r0, r5
 8010086:	47b8      	blx	r7
 8010088:	3001      	adds	r0, #1
 801008a:	f43f ae3c 	beq.w	800fd06 <_printf_float+0xb6>
 801008e:	f108 0801 	add.w	r8, r8, #1
 8010092:	68e3      	ldr	r3, [r4, #12]
 8010094:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8010096:	1a5b      	subs	r3, r3, r1
 8010098:	4543      	cmp	r3, r8
 801009a:	dcf0      	bgt.n	801007e <_printf_float+0x42e>
 801009c:	e6fd      	b.n	800fe9a <_printf_float+0x24a>
 801009e:	f04f 0800 	mov.w	r8, #0
 80100a2:	f104 0919 	add.w	r9, r4, #25
 80100a6:	e7f4      	b.n	8010092 <_printf_float+0x442>

080100a8 <_printf_common>:
 80100a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80100ac:	4616      	mov	r6, r2
 80100ae:	4699      	mov	r9, r3
 80100b0:	688a      	ldr	r2, [r1, #8]
 80100b2:	690b      	ldr	r3, [r1, #16]
 80100b4:	4607      	mov	r7, r0
 80100b6:	4293      	cmp	r3, r2
 80100b8:	bfb8      	it	lt
 80100ba:	4613      	movlt	r3, r2
 80100bc:	6033      	str	r3, [r6, #0]
 80100be:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80100c2:	460c      	mov	r4, r1
 80100c4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80100c8:	b10a      	cbz	r2, 80100ce <_printf_common+0x26>
 80100ca:	3301      	adds	r3, #1
 80100cc:	6033      	str	r3, [r6, #0]
 80100ce:	6823      	ldr	r3, [r4, #0]
 80100d0:	0699      	lsls	r1, r3, #26
 80100d2:	bf42      	ittt	mi
 80100d4:	6833      	ldrmi	r3, [r6, #0]
 80100d6:	3302      	addmi	r3, #2
 80100d8:	6033      	strmi	r3, [r6, #0]
 80100da:	6825      	ldr	r5, [r4, #0]
 80100dc:	f015 0506 	ands.w	r5, r5, #6
 80100e0:	d106      	bne.n	80100f0 <_printf_common+0x48>
 80100e2:	f104 0a19 	add.w	sl, r4, #25
 80100e6:	68e3      	ldr	r3, [r4, #12]
 80100e8:	6832      	ldr	r2, [r6, #0]
 80100ea:	1a9b      	subs	r3, r3, r2
 80100ec:	42ab      	cmp	r3, r5
 80100ee:	dc28      	bgt.n	8010142 <_printf_common+0x9a>
 80100f0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80100f4:	1e13      	subs	r3, r2, #0
 80100f6:	6822      	ldr	r2, [r4, #0]
 80100f8:	bf18      	it	ne
 80100fa:	2301      	movne	r3, #1
 80100fc:	0692      	lsls	r2, r2, #26
 80100fe:	d42d      	bmi.n	801015c <_printf_common+0xb4>
 8010100:	4649      	mov	r1, r9
 8010102:	4638      	mov	r0, r7
 8010104:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8010108:	47c0      	blx	r8
 801010a:	3001      	adds	r0, #1
 801010c:	d020      	beq.n	8010150 <_printf_common+0xa8>
 801010e:	6823      	ldr	r3, [r4, #0]
 8010110:	68e5      	ldr	r5, [r4, #12]
 8010112:	f003 0306 	and.w	r3, r3, #6
 8010116:	2b04      	cmp	r3, #4
 8010118:	bf18      	it	ne
 801011a:	2500      	movne	r5, #0
 801011c:	6832      	ldr	r2, [r6, #0]
 801011e:	f04f 0600 	mov.w	r6, #0
 8010122:	68a3      	ldr	r3, [r4, #8]
 8010124:	bf08      	it	eq
 8010126:	1aad      	subeq	r5, r5, r2
 8010128:	6922      	ldr	r2, [r4, #16]
 801012a:	bf08      	it	eq
 801012c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8010130:	4293      	cmp	r3, r2
 8010132:	bfc4      	itt	gt
 8010134:	1a9b      	subgt	r3, r3, r2
 8010136:	18ed      	addgt	r5, r5, r3
 8010138:	341a      	adds	r4, #26
 801013a:	42b5      	cmp	r5, r6
 801013c:	d11a      	bne.n	8010174 <_printf_common+0xcc>
 801013e:	2000      	movs	r0, #0
 8010140:	e008      	b.n	8010154 <_printf_common+0xac>
 8010142:	2301      	movs	r3, #1
 8010144:	4652      	mov	r2, sl
 8010146:	4649      	mov	r1, r9
 8010148:	4638      	mov	r0, r7
 801014a:	47c0      	blx	r8
 801014c:	3001      	adds	r0, #1
 801014e:	d103      	bne.n	8010158 <_printf_common+0xb0>
 8010150:	f04f 30ff 	mov.w	r0, #4294967295
 8010154:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010158:	3501      	adds	r5, #1
 801015a:	e7c4      	b.n	80100e6 <_printf_common+0x3e>
 801015c:	2030      	movs	r0, #48	; 0x30
 801015e:	18e1      	adds	r1, r4, r3
 8010160:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8010164:	1c5a      	adds	r2, r3, #1
 8010166:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801016a:	4422      	add	r2, r4
 801016c:	3302      	adds	r3, #2
 801016e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8010172:	e7c5      	b.n	8010100 <_printf_common+0x58>
 8010174:	2301      	movs	r3, #1
 8010176:	4622      	mov	r2, r4
 8010178:	4649      	mov	r1, r9
 801017a:	4638      	mov	r0, r7
 801017c:	47c0      	blx	r8
 801017e:	3001      	adds	r0, #1
 8010180:	d0e6      	beq.n	8010150 <_printf_common+0xa8>
 8010182:	3601      	adds	r6, #1
 8010184:	e7d9      	b.n	801013a <_printf_common+0x92>
	...

08010188 <_printf_i>:
 8010188:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801018c:	460c      	mov	r4, r1
 801018e:	7e27      	ldrb	r7, [r4, #24]
 8010190:	4691      	mov	r9, r2
 8010192:	2f78      	cmp	r7, #120	; 0x78
 8010194:	4680      	mov	r8, r0
 8010196:	469a      	mov	sl, r3
 8010198:	990c      	ldr	r1, [sp, #48]	; 0x30
 801019a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801019e:	d807      	bhi.n	80101b0 <_printf_i+0x28>
 80101a0:	2f62      	cmp	r7, #98	; 0x62
 80101a2:	d80a      	bhi.n	80101ba <_printf_i+0x32>
 80101a4:	2f00      	cmp	r7, #0
 80101a6:	f000 80d9 	beq.w	801035c <_printf_i+0x1d4>
 80101aa:	2f58      	cmp	r7, #88	; 0x58
 80101ac:	f000 80a4 	beq.w	80102f8 <_printf_i+0x170>
 80101b0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80101b4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80101b8:	e03a      	b.n	8010230 <_printf_i+0xa8>
 80101ba:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80101be:	2b15      	cmp	r3, #21
 80101c0:	d8f6      	bhi.n	80101b0 <_printf_i+0x28>
 80101c2:	a001      	add	r0, pc, #4	; (adr r0, 80101c8 <_printf_i+0x40>)
 80101c4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80101c8:	08010221 	.word	0x08010221
 80101cc:	08010235 	.word	0x08010235
 80101d0:	080101b1 	.word	0x080101b1
 80101d4:	080101b1 	.word	0x080101b1
 80101d8:	080101b1 	.word	0x080101b1
 80101dc:	080101b1 	.word	0x080101b1
 80101e0:	08010235 	.word	0x08010235
 80101e4:	080101b1 	.word	0x080101b1
 80101e8:	080101b1 	.word	0x080101b1
 80101ec:	080101b1 	.word	0x080101b1
 80101f0:	080101b1 	.word	0x080101b1
 80101f4:	08010343 	.word	0x08010343
 80101f8:	08010265 	.word	0x08010265
 80101fc:	08010325 	.word	0x08010325
 8010200:	080101b1 	.word	0x080101b1
 8010204:	080101b1 	.word	0x080101b1
 8010208:	08010365 	.word	0x08010365
 801020c:	080101b1 	.word	0x080101b1
 8010210:	08010265 	.word	0x08010265
 8010214:	080101b1 	.word	0x080101b1
 8010218:	080101b1 	.word	0x080101b1
 801021c:	0801032d 	.word	0x0801032d
 8010220:	680b      	ldr	r3, [r1, #0]
 8010222:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8010226:	1d1a      	adds	r2, r3, #4
 8010228:	681b      	ldr	r3, [r3, #0]
 801022a:	600a      	str	r2, [r1, #0]
 801022c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8010230:	2301      	movs	r3, #1
 8010232:	e0a4      	b.n	801037e <_printf_i+0x1f6>
 8010234:	6825      	ldr	r5, [r4, #0]
 8010236:	6808      	ldr	r0, [r1, #0]
 8010238:	062e      	lsls	r6, r5, #24
 801023a:	f100 0304 	add.w	r3, r0, #4
 801023e:	d50a      	bpl.n	8010256 <_printf_i+0xce>
 8010240:	6805      	ldr	r5, [r0, #0]
 8010242:	600b      	str	r3, [r1, #0]
 8010244:	2d00      	cmp	r5, #0
 8010246:	da03      	bge.n	8010250 <_printf_i+0xc8>
 8010248:	232d      	movs	r3, #45	; 0x2d
 801024a:	426d      	negs	r5, r5
 801024c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010250:	230a      	movs	r3, #10
 8010252:	485e      	ldr	r0, [pc, #376]	; (80103cc <_printf_i+0x244>)
 8010254:	e019      	b.n	801028a <_printf_i+0x102>
 8010256:	f015 0f40 	tst.w	r5, #64	; 0x40
 801025a:	6805      	ldr	r5, [r0, #0]
 801025c:	600b      	str	r3, [r1, #0]
 801025e:	bf18      	it	ne
 8010260:	b22d      	sxthne	r5, r5
 8010262:	e7ef      	b.n	8010244 <_printf_i+0xbc>
 8010264:	680b      	ldr	r3, [r1, #0]
 8010266:	6825      	ldr	r5, [r4, #0]
 8010268:	1d18      	adds	r0, r3, #4
 801026a:	6008      	str	r0, [r1, #0]
 801026c:	0628      	lsls	r0, r5, #24
 801026e:	d501      	bpl.n	8010274 <_printf_i+0xec>
 8010270:	681d      	ldr	r5, [r3, #0]
 8010272:	e002      	b.n	801027a <_printf_i+0xf2>
 8010274:	0669      	lsls	r1, r5, #25
 8010276:	d5fb      	bpl.n	8010270 <_printf_i+0xe8>
 8010278:	881d      	ldrh	r5, [r3, #0]
 801027a:	2f6f      	cmp	r7, #111	; 0x6f
 801027c:	bf0c      	ite	eq
 801027e:	2308      	moveq	r3, #8
 8010280:	230a      	movne	r3, #10
 8010282:	4852      	ldr	r0, [pc, #328]	; (80103cc <_printf_i+0x244>)
 8010284:	2100      	movs	r1, #0
 8010286:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801028a:	6866      	ldr	r6, [r4, #4]
 801028c:	2e00      	cmp	r6, #0
 801028e:	bfa8      	it	ge
 8010290:	6821      	ldrge	r1, [r4, #0]
 8010292:	60a6      	str	r6, [r4, #8]
 8010294:	bfa4      	itt	ge
 8010296:	f021 0104 	bicge.w	r1, r1, #4
 801029a:	6021      	strge	r1, [r4, #0]
 801029c:	b90d      	cbnz	r5, 80102a2 <_printf_i+0x11a>
 801029e:	2e00      	cmp	r6, #0
 80102a0:	d04d      	beq.n	801033e <_printf_i+0x1b6>
 80102a2:	4616      	mov	r6, r2
 80102a4:	fbb5 f1f3 	udiv	r1, r5, r3
 80102a8:	fb03 5711 	mls	r7, r3, r1, r5
 80102ac:	5dc7      	ldrb	r7, [r0, r7]
 80102ae:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80102b2:	462f      	mov	r7, r5
 80102b4:	42bb      	cmp	r3, r7
 80102b6:	460d      	mov	r5, r1
 80102b8:	d9f4      	bls.n	80102a4 <_printf_i+0x11c>
 80102ba:	2b08      	cmp	r3, #8
 80102bc:	d10b      	bne.n	80102d6 <_printf_i+0x14e>
 80102be:	6823      	ldr	r3, [r4, #0]
 80102c0:	07df      	lsls	r7, r3, #31
 80102c2:	d508      	bpl.n	80102d6 <_printf_i+0x14e>
 80102c4:	6923      	ldr	r3, [r4, #16]
 80102c6:	6861      	ldr	r1, [r4, #4]
 80102c8:	4299      	cmp	r1, r3
 80102ca:	bfde      	ittt	le
 80102cc:	2330      	movle	r3, #48	; 0x30
 80102ce:	f806 3c01 	strble.w	r3, [r6, #-1]
 80102d2:	f106 36ff 	addle.w	r6, r6, #4294967295
 80102d6:	1b92      	subs	r2, r2, r6
 80102d8:	6122      	str	r2, [r4, #16]
 80102da:	464b      	mov	r3, r9
 80102dc:	4621      	mov	r1, r4
 80102de:	4640      	mov	r0, r8
 80102e0:	f8cd a000 	str.w	sl, [sp]
 80102e4:	aa03      	add	r2, sp, #12
 80102e6:	f7ff fedf 	bl	80100a8 <_printf_common>
 80102ea:	3001      	adds	r0, #1
 80102ec:	d14c      	bne.n	8010388 <_printf_i+0x200>
 80102ee:	f04f 30ff 	mov.w	r0, #4294967295
 80102f2:	b004      	add	sp, #16
 80102f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80102f8:	4834      	ldr	r0, [pc, #208]	; (80103cc <_printf_i+0x244>)
 80102fa:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80102fe:	680e      	ldr	r6, [r1, #0]
 8010300:	6823      	ldr	r3, [r4, #0]
 8010302:	f856 5b04 	ldr.w	r5, [r6], #4
 8010306:	061f      	lsls	r7, r3, #24
 8010308:	600e      	str	r6, [r1, #0]
 801030a:	d514      	bpl.n	8010336 <_printf_i+0x1ae>
 801030c:	07d9      	lsls	r1, r3, #31
 801030e:	bf44      	itt	mi
 8010310:	f043 0320 	orrmi.w	r3, r3, #32
 8010314:	6023      	strmi	r3, [r4, #0]
 8010316:	b91d      	cbnz	r5, 8010320 <_printf_i+0x198>
 8010318:	6823      	ldr	r3, [r4, #0]
 801031a:	f023 0320 	bic.w	r3, r3, #32
 801031e:	6023      	str	r3, [r4, #0]
 8010320:	2310      	movs	r3, #16
 8010322:	e7af      	b.n	8010284 <_printf_i+0xfc>
 8010324:	6823      	ldr	r3, [r4, #0]
 8010326:	f043 0320 	orr.w	r3, r3, #32
 801032a:	6023      	str	r3, [r4, #0]
 801032c:	2378      	movs	r3, #120	; 0x78
 801032e:	4828      	ldr	r0, [pc, #160]	; (80103d0 <_printf_i+0x248>)
 8010330:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8010334:	e7e3      	b.n	80102fe <_printf_i+0x176>
 8010336:	065e      	lsls	r6, r3, #25
 8010338:	bf48      	it	mi
 801033a:	b2ad      	uxthmi	r5, r5
 801033c:	e7e6      	b.n	801030c <_printf_i+0x184>
 801033e:	4616      	mov	r6, r2
 8010340:	e7bb      	b.n	80102ba <_printf_i+0x132>
 8010342:	680b      	ldr	r3, [r1, #0]
 8010344:	6826      	ldr	r6, [r4, #0]
 8010346:	1d1d      	adds	r5, r3, #4
 8010348:	6960      	ldr	r0, [r4, #20]
 801034a:	600d      	str	r5, [r1, #0]
 801034c:	0635      	lsls	r5, r6, #24
 801034e:	681b      	ldr	r3, [r3, #0]
 8010350:	d501      	bpl.n	8010356 <_printf_i+0x1ce>
 8010352:	6018      	str	r0, [r3, #0]
 8010354:	e002      	b.n	801035c <_printf_i+0x1d4>
 8010356:	0671      	lsls	r1, r6, #25
 8010358:	d5fb      	bpl.n	8010352 <_printf_i+0x1ca>
 801035a:	8018      	strh	r0, [r3, #0]
 801035c:	2300      	movs	r3, #0
 801035e:	4616      	mov	r6, r2
 8010360:	6123      	str	r3, [r4, #16]
 8010362:	e7ba      	b.n	80102da <_printf_i+0x152>
 8010364:	680b      	ldr	r3, [r1, #0]
 8010366:	1d1a      	adds	r2, r3, #4
 8010368:	600a      	str	r2, [r1, #0]
 801036a:	681e      	ldr	r6, [r3, #0]
 801036c:	2100      	movs	r1, #0
 801036e:	4630      	mov	r0, r6
 8010370:	6862      	ldr	r2, [r4, #4]
 8010372:	f000 fee7 	bl	8011144 <memchr>
 8010376:	b108      	cbz	r0, 801037c <_printf_i+0x1f4>
 8010378:	1b80      	subs	r0, r0, r6
 801037a:	6060      	str	r0, [r4, #4]
 801037c:	6863      	ldr	r3, [r4, #4]
 801037e:	6123      	str	r3, [r4, #16]
 8010380:	2300      	movs	r3, #0
 8010382:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010386:	e7a8      	b.n	80102da <_printf_i+0x152>
 8010388:	4632      	mov	r2, r6
 801038a:	4649      	mov	r1, r9
 801038c:	4640      	mov	r0, r8
 801038e:	6923      	ldr	r3, [r4, #16]
 8010390:	47d0      	blx	sl
 8010392:	3001      	adds	r0, #1
 8010394:	d0ab      	beq.n	80102ee <_printf_i+0x166>
 8010396:	6823      	ldr	r3, [r4, #0]
 8010398:	079b      	lsls	r3, r3, #30
 801039a:	d413      	bmi.n	80103c4 <_printf_i+0x23c>
 801039c:	68e0      	ldr	r0, [r4, #12]
 801039e:	9b03      	ldr	r3, [sp, #12]
 80103a0:	4298      	cmp	r0, r3
 80103a2:	bfb8      	it	lt
 80103a4:	4618      	movlt	r0, r3
 80103a6:	e7a4      	b.n	80102f2 <_printf_i+0x16a>
 80103a8:	2301      	movs	r3, #1
 80103aa:	4632      	mov	r2, r6
 80103ac:	4649      	mov	r1, r9
 80103ae:	4640      	mov	r0, r8
 80103b0:	47d0      	blx	sl
 80103b2:	3001      	adds	r0, #1
 80103b4:	d09b      	beq.n	80102ee <_printf_i+0x166>
 80103b6:	3501      	adds	r5, #1
 80103b8:	68e3      	ldr	r3, [r4, #12]
 80103ba:	9903      	ldr	r1, [sp, #12]
 80103bc:	1a5b      	subs	r3, r3, r1
 80103be:	42ab      	cmp	r3, r5
 80103c0:	dcf2      	bgt.n	80103a8 <_printf_i+0x220>
 80103c2:	e7eb      	b.n	801039c <_printf_i+0x214>
 80103c4:	2500      	movs	r5, #0
 80103c6:	f104 0619 	add.w	r6, r4, #25
 80103ca:	e7f5      	b.n	80103b8 <_printf_i+0x230>
 80103cc:	08013606 	.word	0x08013606
 80103d0:	08013617 	.word	0x08013617

080103d4 <realloc>:
 80103d4:	4b02      	ldr	r3, [pc, #8]	; (80103e0 <realloc+0xc>)
 80103d6:	460a      	mov	r2, r1
 80103d8:	4601      	mov	r1, r0
 80103da:	6818      	ldr	r0, [r3, #0]
 80103dc:	f001 ba6a 	b.w	80118b4 <_realloc_r>
 80103e0:	200001a8 	.word	0x200001a8

080103e4 <_sbrk_r>:
 80103e4:	b538      	push	{r3, r4, r5, lr}
 80103e6:	2300      	movs	r3, #0
 80103e8:	4d05      	ldr	r5, [pc, #20]	; (8010400 <_sbrk_r+0x1c>)
 80103ea:	4604      	mov	r4, r0
 80103ec:	4608      	mov	r0, r1
 80103ee:	602b      	str	r3, [r5, #0]
 80103f0:	f7f4 fe32 	bl	8005058 <_sbrk>
 80103f4:	1c43      	adds	r3, r0, #1
 80103f6:	d102      	bne.n	80103fe <_sbrk_r+0x1a>
 80103f8:	682b      	ldr	r3, [r5, #0]
 80103fa:	b103      	cbz	r3, 80103fe <_sbrk_r+0x1a>
 80103fc:	6023      	str	r3, [r4, #0]
 80103fe:	bd38      	pop	{r3, r4, r5, pc}
 8010400:	200021e4 	.word	0x200021e4

08010404 <siprintf>:
 8010404:	b40e      	push	{r1, r2, r3}
 8010406:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801040a:	b500      	push	{lr}
 801040c:	b09c      	sub	sp, #112	; 0x70
 801040e:	ab1d      	add	r3, sp, #116	; 0x74
 8010410:	9002      	str	r0, [sp, #8]
 8010412:	9006      	str	r0, [sp, #24]
 8010414:	9107      	str	r1, [sp, #28]
 8010416:	9104      	str	r1, [sp, #16]
 8010418:	4808      	ldr	r0, [pc, #32]	; (801043c <siprintf+0x38>)
 801041a:	4909      	ldr	r1, [pc, #36]	; (8010440 <siprintf+0x3c>)
 801041c:	f853 2b04 	ldr.w	r2, [r3], #4
 8010420:	9105      	str	r1, [sp, #20]
 8010422:	6800      	ldr	r0, [r0, #0]
 8010424:	a902      	add	r1, sp, #8
 8010426:	9301      	str	r3, [sp, #4]
 8010428:	f001 fac6 	bl	80119b8 <_svfiprintf_r>
 801042c:	2200      	movs	r2, #0
 801042e:	9b02      	ldr	r3, [sp, #8]
 8010430:	701a      	strb	r2, [r3, #0]
 8010432:	b01c      	add	sp, #112	; 0x70
 8010434:	f85d eb04 	ldr.w	lr, [sp], #4
 8010438:	b003      	add	sp, #12
 801043a:	4770      	bx	lr
 801043c:	200001a8 	.word	0x200001a8
 8010440:	ffff0208 	.word	0xffff0208

08010444 <quorem>:
 8010444:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010448:	6903      	ldr	r3, [r0, #16]
 801044a:	690c      	ldr	r4, [r1, #16]
 801044c:	4607      	mov	r7, r0
 801044e:	42a3      	cmp	r3, r4
 8010450:	f2c0 8083 	blt.w	801055a <quorem+0x116>
 8010454:	3c01      	subs	r4, #1
 8010456:	f100 0514 	add.w	r5, r0, #20
 801045a:	f101 0814 	add.w	r8, r1, #20
 801045e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8010462:	9301      	str	r3, [sp, #4]
 8010464:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8010468:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801046c:	3301      	adds	r3, #1
 801046e:	429a      	cmp	r2, r3
 8010470:	fbb2 f6f3 	udiv	r6, r2, r3
 8010474:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8010478:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801047c:	d332      	bcc.n	80104e4 <quorem+0xa0>
 801047e:	f04f 0e00 	mov.w	lr, #0
 8010482:	4640      	mov	r0, r8
 8010484:	46ac      	mov	ip, r5
 8010486:	46f2      	mov	sl, lr
 8010488:	f850 2b04 	ldr.w	r2, [r0], #4
 801048c:	b293      	uxth	r3, r2
 801048e:	fb06 e303 	mla	r3, r6, r3, lr
 8010492:	0c12      	lsrs	r2, r2, #16
 8010494:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8010498:	fb06 e202 	mla	r2, r6, r2, lr
 801049c:	b29b      	uxth	r3, r3
 801049e:	ebaa 0303 	sub.w	r3, sl, r3
 80104a2:	f8dc a000 	ldr.w	sl, [ip]
 80104a6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80104aa:	fa1f fa8a 	uxth.w	sl, sl
 80104ae:	4453      	add	r3, sl
 80104b0:	fa1f fa82 	uxth.w	sl, r2
 80104b4:	f8dc 2000 	ldr.w	r2, [ip]
 80104b8:	4581      	cmp	r9, r0
 80104ba:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 80104be:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80104c2:	b29b      	uxth	r3, r3
 80104c4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80104c8:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80104cc:	f84c 3b04 	str.w	r3, [ip], #4
 80104d0:	d2da      	bcs.n	8010488 <quorem+0x44>
 80104d2:	f855 300b 	ldr.w	r3, [r5, fp]
 80104d6:	b92b      	cbnz	r3, 80104e4 <quorem+0xa0>
 80104d8:	9b01      	ldr	r3, [sp, #4]
 80104da:	3b04      	subs	r3, #4
 80104dc:	429d      	cmp	r5, r3
 80104de:	461a      	mov	r2, r3
 80104e0:	d32f      	bcc.n	8010542 <quorem+0xfe>
 80104e2:	613c      	str	r4, [r7, #16]
 80104e4:	4638      	mov	r0, r7
 80104e6:	f001 f8cf 	bl	8011688 <__mcmp>
 80104ea:	2800      	cmp	r0, #0
 80104ec:	db25      	blt.n	801053a <quorem+0xf6>
 80104ee:	4628      	mov	r0, r5
 80104f0:	f04f 0c00 	mov.w	ip, #0
 80104f4:	3601      	adds	r6, #1
 80104f6:	f858 1b04 	ldr.w	r1, [r8], #4
 80104fa:	f8d0 e000 	ldr.w	lr, [r0]
 80104fe:	b28b      	uxth	r3, r1
 8010500:	ebac 0303 	sub.w	r3, ip, r3
 8010504:	fa1f f28e 	uxth.w	r2, lr
 8010508:	4413      	add	r3, r2
 801050a:	0c0a      	lsrs	r2, r1, #16
 801050c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8010510:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8010514:	b29b      	uxth	r3, r3
 8010516:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801051a:	45c1      	cmp	r9, r8
 801051c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8010520:	f840 3b04 	str.w	r3, [r0], #4
 8010524:	d2e7      	bcs.n	80104f6 <quorem+0xb2>
 8010526:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801052a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801052e:	b922      	cbnz	r2, 801053a <quorem+0xf6>
 8010530:	3b04      	subs	r3, #4
 8010532:	429d      	cmp	r5, r3
 8010534:	461a      	mov	r2, r3
 8010536:	d30a      	bcc.n	801054e <quorem+0x10a>
 8010538:	613c      	str	r4, [r7, #16]
 801053a:	4630      	mov	r0, r6
 801053c:	b003      	add	sp, #12
 801053e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010542:	6812      	ldr	r2, [r2, #0]
 8010544:	3b04      	subs	r3, #4
 8010546:	2a00      	cmp	r2, #0
 8010548:	d1cb      	bne.n	80104e2 <quorem+0x9e>
 801054a:	3c01      	subs	r4, #1
 801054c:	e7c6      	b.n	80104dc <quorem+0x98>
 801054e:	6812      	ldr	r2, [r2, #0]
 8010550:	3b04      	subs	r3, #4
 8010552:	2a00      	cmp	r2, #0
 8010554:	d1f0      	bne.n	8010538 <quorem+0xf4>
 8010556:	3c01      	subs	r4, #1
 8010558:	e7eb      	b.n	8010532 <quorem+0xee>
 801055a:	2000      	movs	r0, #0
 801055c:	e7ee      	b.n	801053c <quorem+0xf8>
	...

08010560 <_dtoa_r>:
 8010560:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010564:	4616      	mov	r6, r2
 8010566:	461f      	mov	r7, r3
 8010568:	6a44      	ldr	r4, [r0, #36]	; 0x24
 801056a:	b099      	sub	sp, #100	; 0x64
 801056c:	4605      	mov	r5, r0
 801056e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8010572:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8010576:	b974      	cbnz	r4, 8010596 <_dtoa_r+0x36>
 8010578:	2010      	movs	r0, #16
 801057a:	f7ff f9ff 	bl	800f97c <malloc>
 801057e:	4602      	mov	r2, r0
 8010580:	6268      	str	r0, [r5, #36]	; 0x24
 8010582:	b920      	cbnz	r0, 801058e <_dtoa_r+0x2e>
 8010584:	21ea      	movs	r1, #234	; 0xea
 8010586:	4bae      	ldr	r3, [pc, #696]	; (8010840 <_dtoa_r+0x2e0>)
 8010588:	48ae      	ldr	r0, [pc, #696]	; (8010844 <_dtoa_r+0x2e4>)
 801058a:	f001 fb15 	bl	8011bb8 <__assert_func>
 801058e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8010592:	6004      	str	r4, [r0, #0]
 8010594:	60c4      	str	r4, [r0, #12]
 8010596:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8010598:	6819      	ldr	r1, [r3, #0]
 801059a:	b151      	cbz	r1, 80105b2 <_dtoa_r+0x52>
 801059c:	685a      	ldr	r2, [r3, #4]
 801059e:	2301      	movs	r3, #1
 80105a0:	4093      	lsls	r3, r2
 80105a2:	604a      	str	r2, [r1, #4]
 80105a4:	608b      	str	r3, [r1, #8]
 80105a6:	4628      	mov	r0, r5
 80105a8:	f000 fe34 	bl	8011214 <_Bfree>
 80105ac:	2200      	movs	r2, #0
 80105ae:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80105b0:	601a      	str	r2, [r3, #0]
 80105b2:	1e3b      	subs	r3, r7, #0
 80105b4:	bfaf      	iteee	ge
 80105b6:	2300      	movge	r3, #0
 80105b8:	2201      	movlt	r2, #1
 80105ba:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80105be:	9305      	strlt	r3, [sp, #20]
 80105c0:	bfa8      	it	ge
 80105c2:	f8c8 3000 	strge.w	r3, [r8]
 80105c6:	f8dd 9014 	ldr.w	r9, [sp, #20]
 80105ca:	4b9f      	ldr	r3, [pc, #636]	; (8010848 <_dtoa_r+0x2e8>)
 80105cc:	bfb8      	it	lt
 80105ce:	f8c8 2000 	strlt.w	r2, [r8]
 80105d2:	ea33 0309 	bics.w	r3, r3, r9
 80105d6:	d119      	bne.n	801060c <_dtoa_r+0xac>
 80105d8:	f242 730f 	movw	r3, #9999	; 0x270f
 80105dc:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80105de:	6013      	str	r3, [r2, #0]
 80105e0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80105e4:	4333      	orrs	r3, r6
 80105e6:	f000 8580 	beq.w	80110ea <_dtoa_r+0xb8a>
 80105ea:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80105ec:	b953      	cbnz	r3, 8010604 <_dtoa_r+0xa4>
 80105ee:	4b97      	ldr	r3, [pc, #604]	; (801084c <_dtoa_r+0x2ec>)
 80105f0:	e022      	b.n	8010638 <_dtoa_r+0xd8>
 80105f2:	4b97      	ldr	r3, [pc, #604]	; (8010850 <_dtoa_r+0x2f0>)
 80105f4:	9308      	str	r3, [sp, #32]
 80105f6:	3308      	adds	r3, #8
 80105f8:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80105fa:	6013      	str	r3, [r2, #0]
 80105fc:	9808      	ldr	r0, [sp, #32]
 80105fe:	b019      	add	sp, #100	; 0x64
 8010600:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010604:	4b91      	ldr	r3, [pc, #580]	; (801084c <_dtoa_r+0x2ec>)
 8010606:	9308      	str	r3, [sp, #32]
 8010608:	3303      	adds	r3, #3
 801060a:	e7f5      	b.n	80105f8 <_dtoa_r+0x98>
 801060c:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8010610:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8010614:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8010618:	2200      	movs	r2, #0
 801061a:	2300      	movs	r3, #0
 801061c:	f7f0 fa00 	bl	8000a20 <__aeabi_dcmpeq>
 8010620:	4680      	mov	r8, r0
 8010622:	b158      	cbz	r0, 801063c <_dtoa_r+0xdc>
 8010624:	2301      	movs	r3, #1
 8010626:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8010628:	6013      	str	r3, [r2, #0]
 801062a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801062c:	2b00      	cmp	r3, #0
 801062e:	f000 8559 	beq.w	80110e4 <_dtoa_r+0xb84>
 8010632:	4888      	ldr	r0, [pc, #544]	; (8010854 <_dtoa_r+0x2f4>)
 8010634:	6018      	str	r0, [r3, #0]
 8010636:	1e43      	subs	r3, r0, #1
 8010638:	9308      	str	r3, [sp, #32]
 801063a:	e7df      	b.n	80105fc <_dtoa_r+0x9c>
 801063c:	ab16      	add	r3, sp, #88	; 0x58
 801063e:	9301      	str	r3, [sp, #4]
 8010640:	ab17      	add	r3, sp, #92	; 0x5c
 8010642:	9300      	str	r3, [sp, #0]
 8010644:	4628      	mov	r0, r5
 8010646:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 801064a:	f001 f8c9 	bl	80117e0 <__d2b>
 801064e:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8010652:	4682      	mov	sl, r0
 8010654:	2c00      	cmp	r4, #0
 8010656:	d07e      	beq.n	8010756 <_dtoa_r+0x1f6>
 8010658:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801065c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801065e:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8010662:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8010666:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 801066a:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 801066e:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8010672:	2200      	movs	r2, #0
 8010674:	4b78      	ldr	r3, [pc, #480]	; (8010858 <_dtoa_r+0x2f8>)
 8010676:	f7ef fdb3 	bl	80001e0 <__aeabi_dsub>
 801067a:	a36b      	add	r3, pc, #428	; (adr r3, 8010828 <_dtoa_r+0x2c8>)
 801067c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010680:	f7ef ff66 	bl	8000550 <__aeabi_dmul>
 8010684:	a36a      	add	r3, pc, #424	; (adr r3, 8010830 <_dtoa_r+0x2d0>)
 8010686:	e9d3 2300 	ldrd	r2, r3, [r3]
 801068a:	f7ef fdab 	bl	80001e4 <__adddf3>
 801068e:	4606      	mov	r6, r0
 8010690:	4620      	mov	r0, r4
 8010692:	460f      	mov	r7, r1
 8010694:	f7ef fef2 	bl	800047c <__aeabi_i2d>
 8010698:	a367      	add	r3, pc, #412	; (adr r3, 8010838 <_dtoa_r+0x2d8>)
 801069a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801069e:	f7ef ff57 	bl	8000550 <__aeabi_dmul>
 80106a2:	4602      	mov	r2, r0
 80106a4:	460b      	mov	r3, r1
 80106a6:	4630      	mov	r0, r6
 80106a8:	4639      	mov	r1, r7
 80106aa:	f7ef fd9b 	bl	80001e4 <__adddf3>
 80106ae:	4606      	mov	r6, r0
 80106b0:	460f      	mov	r7, r1
 80106b2:	f7f0 f9fd 	bl	8000ab0 <__aeabi_d2iz>
 80106b6:	2200      	movs	r2, #0
 80106b8:	4681      	mov	r9, r0
 80106ba:	2300      	movs	r3, #0
 80106bc:	4630      	mov	r0, r6
 80106be:	4639      	mov	r1, r7
 80106c0:	f7f0 f9b8 	bl	8000a34 <__aeabi_dcmplt>
 80106c4:	b148      	cbz	r0, 80106da <_dtoa_r+0x17a>
 80106c6:	4648      	mov	r0, r9
 80106c8:	f7ef fed8 	bl	800047c <__aeabi_i2d>
 80106cc:	4632      	mov	r2, r6
 80106ce:	463b      	mov	r3, r7
 80106d0:	f7f0 f9a6 	bl	8000a20 <__aeabi_dcmpeq>
 80106d4:	b908      	cbnz	r0, 80106da <_dtoa_r+0x17a>
 80106d6:	f109 39ff 	add.w	r9, r9, #4294967295
 80106da:	f1b9 0f16 	cmp.w	r9, #22
 80106de:	d857      	bhi.n	8010790 <_dtoa_r+0x230>
 80106e0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80106e4:	4b5d      	ldr	r3, [pc, #372]	; (801085c <_dtoa_r+0x2fc>)
 80106e6:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 80106ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80106ee:	f7f0 f9a1 	bl	8000a34 <__aeabi_dcmplt>
 80106f2:	2800      	cmp	r0, #0
 80106f4:	d04e      	beq.n	8010794 <_dtoa_r+0x234>
 80106f6:	2300      	movs	r3, #0
 80106f8:	f109 39ff 	add.w	r9, r9, #4294967295
 80106fc:	930f      	str	r3, [sp, #60]	; 0x3c
 80106fe:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8010700:	1b1c      	subs	r4, r3, r4
 8010702:	1e63      	subs	r3, r4, #1
 8010704:	9309      	str	r3, [sp, #36]	; 0x24
 8010706:	bf49      	itett	mi
 8010708:	f1c4 0301 	rsbmi	r3, r4, #1
 801070c:	2300      	movpl	r3, #0
 801070e:	9306      	strmi	r3, [sp, #24]
 8010710:	2300      	movmi	r3, #0
 8010712:	bf54      	ite	pl
 8010714:	9306      	strpl	r3, [sp, #24]
 8010716:	9309      	strmi	r3, [sp, #36]	; 0x24
 8010718:	f1b9 0f00 	cmp.w	r9, #0
 801071c:	db3c      	blt.n	8010798 <_dtoa_r+0x238>
 801071e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010720:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8010724:	444b      	add	r3, r9
 8010726:	9309      	str	r3, [sp, #36]	; 0x24
 8010728:	2300      	movs	r3, #0
 801072a:	930a      	str	r3, [sp, #40]	; 0x28
 801072c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801072e:	2b09      	cmp	r3, #9
 8010730:	d86c      	bhi.n	801080c <_dtoa_r+0x2ac>
 8010732:	2b05      	cmp	r3, #5
 8010734:	bfc4      	itt	gt
 8010736:	3b04      	subgt	r3, #4
 8010738:	9322      	strgt	r3, [sp, #136]	; 0x88
 801073a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801073c:	bfc8      	it	gt
 801073e:	2400      	movgt	r4, #0
 8010740:	f1a3 0302 	sub.w	r3, r3, #2
 8010744:	bfd8      	it	le
 8010746:	2401      	movle	r4, #1
 8010748:	2b03      	cmp	r3, #3
 801074a:	f200 808b 	bhi.w	8010864 <_dtoa_r+0x304>
 801074e:	e8df f003 	tbb	[pc, r3]
 8010752:	4f2d      	.short	0x4f2d
 8010754:	5b4d      	.short	0x5b4d
 8010756:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 801075a:	441c      	add	r4, r3
 801075c:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8010760:	2b20      	cmp	r3, #32
 8010762:	bfc3      	ittte	gt
 8010764:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8010768:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 801076c:	fa09 f303 	lslgt.w	r3, r9, r3
 8010770:	f1c3 0320 	rsble	r3, r3, #32
 8010774:	bfc6      	itte	gt
 8010776:	fa26 f000 	lsrgt.w	r0, r6, r0
 801077a:	4318      	orrgt	r0, r3
 801077c:	fa06 f003 	lslle.w	r0, r6, r3
 8010780:	f7ef fe6c 	bl	800045c <__aeabi_ui2d>
 8010784:	2301      	movs	r3, #1
 8010786:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 801078a:	3c01      	subs	r4, #1
 801078c:	9313      	str	r3, [sp, #76]	; 0x4c
 801078e:	e770      	b.n	8010672 <_dtoa_r+0x112>
 8010790:	2301      	movs	r3, #1
 8010792:	e7b3      	b.n	80106fc <_dtoa_r+0x19c>
 8010794:	900f      	str	r0, [sp, #60]	; 0x3c
 8010796:	e7b2      	b.n	80106fe <_dtoa_r+0x19e>
 8010798:	9b06      	ldr	r3, [sp, #24]
 801079a:	eba3 0309 	sub.w	r3, r3, r9
 801079e:	9306      	str	r3, [sp, #24]
 80107a0:	f1c9 0300 	rsb	r3, r9, #0
 80107a4:	930a      	str	r3, [sp, #40]	; 0x28
 80107a6:	2300      	movs	r3, #0
 80107a8:	930e      	str	r3, [sp, #56]	; 0x38
 80107aa:	e7bf      	b.n	801072c <_dtoa_r+0x1cc>
 80107ac:	2300      	movs	r3, #0
 80107ae:	930b      	str	r3, [sp, #44]	; 0x2c
 80107b0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80107b2:	2b00      	cmp	r3, #0
 80107b4:	dc59      	bgt.n	801086a <_dtoa_r+0x30a>
 80107b6:	f04f 0b01 	mov.w	fp, #1
 80107ba:	465b      	mov	r3, fp
 80107bc:	f8cd b008 	str.w	fp, [sp, #8]
 80107c0:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 80107c4:	2200      	movs	r2, #0
 80107c6:	6a68      	ldr	r0, [r5, #36]	; 0x24
 80107c8:	6042      	str	r2, [r0, #4]
 80107ca:	2204      	movs	r2, #4
 80107cc:	f102 0614 	add.w	r6, r2, #20
 80107d0:	429e      	cmp	r6, r3
 80107d2:	6841      	ldr	r1, [r0, #4]
 80107d4:	d94f      	bls.n	8010876 <_dtoa_r+0x316>
 80107d6:	4628      	mov	r0, r5
 80107d8:	f000 fcdc 	bl	8011194 <_Balloc>
 80107dc:	9008      	str	r0, [sp, #32]
 80107de:	2800      	cmp	r0, #0
 80107e0:	d14d      	bne.n	801087e <_dtoa_r+0x31e>
 80107e2:	4602      	mov	r2, r0
 80107e4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80107e8:	4b1d      	ldr	r3, [pc, #116]	; (8010860 <_dtoa_r+0x300>)
 80107ea:	e6cd      	b.n	8010588 <_dtoa_r+0x28>
 80107ec:	2301      	movs	r3, #1
 80107ee:	e7de      	b.n	80107ae <_dtoa_r+0x24e>
 80107f0:	2300      	movs	r3, #0
 80107f2:	930b      	str	r3, [sp, #44]	; 0x2c
 80107f4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80107f6:	eb09 0b03 	add.w	fp, r9, r3
 80107fa:	f10b 0301 	add.w	r3, fp, #1
 80107fe:	2b01      	cmp	r3, #1
 8010800:	9302      	str	r3, [sp, #8]
 8010802:	bfb8      	it	lt
 8010804:	2301      	movlt	r3, #1
 8010806:	e7dd      	b.n	80107c4 <_dtoa_r+0x264>
 8010808:	2301      	movs	r3, #1
 801080a:	e7f2      	b.n	80107f2 <_dtoa_r+0x292>
 801080c:	2401      	movs	r4, #1
 801080e:	2300      	movs	r3, #0
 8010810:	940b      	str	r4, [sp, #44]	; 0x2c
 8010812:	9322      	str	r3, [sp, #136]	; 0x88
 8010814:	f04f 3bff 	mov.w	fp, #4294967295
 8010818:	2200      	movs	r2, #0
 801081a:	2312      	movs	r3, #18
 801081c:	f8cd b008 	str.w	fp, [sp, #8]
 8010820:	9223      	str	r2, [sp, #140]	; 0x8c
 8010822:	e7cf      	b.n	80107c4 <_dtoa_r+0x264>
 8010824:	f3af 8000 	nop.w
 8010828:	636f4361 	.word	0x636f4361
 801082c:	3fd287a7 	.word	0x3fd287a7
 8010830:	8b60c8b3 	.word	0x8b60c8b3
 8010834:	3fc68a28 	.word	0x3fc68a28
 8010838:	509f79fb 	.word	0x509f79fb
 801083c:	3fd34413 	.word	0x3fd34413
 8010840:	08013635 	.word	0x08013635
 8010844:	0801364c 	.word	0x0801364c
 8010848:	7ff00000 	.word	0x7ff00000
 801084c:	08013631 	.word	0x08013631
 8010850:	08013628 	.word	0x08013628
 8010854:	08013605 	.word	0x08013605
 8010858:	3ff80000 	.word	0x3ff80000
 801085c:	08013748 	.word	0x08013748
 8010860:	080136ab 	.word	0x080136ab
 8010864:	2301      	movs	r3, #1
 8010866:	930b      	str	r3, [sp, #44]	; 0x2c
 8010868:	e7d4      	b.n	8010814 <_dtoa_r+0x2b4>
 801086a:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 801086e:	465b      	mov	r3, fp
 8010870:	f8cd b008 	str.w	fp, [sp, #8]
 8010874:	e7a6      	b.n	80107c4 <_dtoa_r+0x264>
 8010876:	3101      	adds	r1, #1
 8010878:	6041      	str	r1, [r0, #4]
 801087a:	0052      	lsls	r2, r2, #1
 801087c:	e7a6      	b.n	80107cc <_dtoa_r+0x26c>
 801087e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8010880:	9a08      	ldr	r2, [sp, #32]
 8010882:	601a      	str	r2, [r3, #0]
 8010884:	9b02      	ldr	r3, [sp, #8]
 8010886:	2b0e      	cmp	r3, #14
 8010888:	f200 80a8 	bhi.w	80109dc <_dtoa_r+0x47c>
 801088c:	2c00      	cmp	r4, #0
 801088e:	f000 80a5 	beq.w	80109dc <_dtoa_r+0x47c>
 8010892:	f1b9 0f00 	cmp.w	r9, #0
 8010896:	dd34      	ble.n	8010902 <_dtoa_r+0x3a2>
 8010898:	4a9a      	ldr	r2, [pc, #616]	; (8010b04 <_dtoa_r+0x5a4>)
 801089a:	f009 030f 	and.w	r3, r9, #15
 801089e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80108a2:	f419 7f80 	tst.w	r9, #256	; 0x100
 80108a6:	e9d3 3400 	ldrd	r3, r4, [r3]
 80108aa:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80108ae:	ea4f 1429 	mov.w	r4, r9, asr #4
 80108b2:	d016      	beq.n	80108e2 <_dtoa_r+0x382>
 80108b4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80108b8:	4b93      	ldr	r3, [pc, #588]	; (8010b08 <_dtoa_r+0x5a8>)
 80108ba:	2703      	movs	r7, #3
 80108bc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80108c0:	f7ef ff70 	bl	80007a4 <__aeabi_ddiv>
 80108c4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80108c8:	f004 040f 	and.w	r4, r4, #15
 80108cc:	4e8e      	ldr	r6, [pc, #568]	; (8010b08 <_dtoa_r+0x5a8>)
 80108ce:	b954      	cbnz	r4, 80108e6 <_dtoa_r+0x386>
 80108d0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80108d4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80108d8:	f7ef ff64 	bl	80007a4 <__aeabi_ddiv>
 80108dc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80108e0:	e029      	b.n	8010936 <_dtoa_r+0x3d6>
 80108e2:	2702      	movs	r7, #2
 80108e4:	e7f2      	b.n	80108cc <_dtoa_r+0x36c>
 80108e6:	07e1      	lsls	r1, r4, #31
 80108e8:	d508      	bpl.n	80108fc <_dtoa_r+0x39c>
 80108ea:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80108ee:	e9d6 2300 	ldrd	r2, r3, [r6]
 80108f2:	f7ef fe2d 	bl	8000550 <__aeabi_dmul>
 80108f6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80108fa:	3701      	adds	r7, #1
 80108fc:	1064      	asrs	r4, r4, #1
 80108fe:	3608      	adds	r6, #8
 8010900:	e7e5      	b.n	80108ce <_dtoa_r+0x36e>
 8010902:	f000 80a5 	beq.w	8010a50 <_dtoa_r+0x4f0>
 8010906:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801090a:	f1c9 0400 	rsb	r4, r9, #0
 801090e:	4b7d      	ldr	r3, [pc, #500]	; (8010b04 <_dtoa_r+0x5a4>)
 8010910:	f004 020f 	and.w	r2, r4, #15
 8010914:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010918:	e9d3 2300 	ldrd	r2, r3, [r3]
 801091c:	f7ef fe18 	bl	8000550 <__aeabi_dmul>
 8010920:	2702      	movs	r7, #2
 8010922:	2300      	movs	r3, #0
 8010924:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8010928:	4e77      	ldr	r6, [pc, #476]	; (8010b08 <_dtoa_r+0x5a8>)
 801092a:	1124      	asrs	r4, r4, #4
 801092c:	2c00      	cmp	r4, #0
 801092e:	f040 8084 	bne.w	8010a3a <_dtoa_r+0x4da>
 8010932:	2b00      	cmp	r3, #0
 8010934:	d1d2      	bne.n	80108dc <_dtoa_r+0x37c>
 8010936:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8010938:	2b00      	cmp	r3, #0
 801093a:	f000 808b 	beq.w	8010a54 <_dtoa_r+0x4f4>
 801093e:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8010942:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8010946:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 801094a:	2200      	movs	r2, #0
 801094c:	4b6f      	ldr	r3, [pc, #444]	; (8010b0c <_dtoa_r+0x5ac>)
 801094e:	f7f0 f871 	bl	8000a34 <__aeabi_dcmplt>
 8010952:	2800      	cmp	r0, #0
 8010954:	d07e      	beq.n	8010a54 <_dtoa_r+0x4f4>
 8010956:	9b02      	ldr	r3, [sp, #8]
 8010958:	2b00      	cmp	r3, #0
 801095a:	d07b      	beq.n	8010a54 <_dtoa_r+0x4f4>
 801095c:	f1bb 0f00 	cmp.w	fp, #0
 8010960:	dd38      	ble.n	80109d4 <_dtoa_r+0x474>
 8010962:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8010966:	2200      	movs	r2, #0
 8010968:	4b69      	ldr	r3, [pc, #420]	; (8010b10 <_dtoa_r+0x5b0>)
 801096a:	f7ef fdf1 	bl	8000550 <__aeabi_dmul>
 801096e:	465c      	mov	r4, fp
 8010970:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8010974:	f109 38ff 	add.w	r8, r9, #4294967295
 8010978:	3701      	adds	r7, #1
 801097a:	4638      	mov	r0, r7
 801097c:	f7ef fd7e 	bl	800047c <__aeabi_i2d>
 8010980:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010984:	f7ef fde4 	bl	8000550 <__aeabi_dmul>
 8010988:	2200      	movs	r2, #0
 801098a:	4b62      	ldr	r3, [pc, #392]	; (8010b14 <_dtoa_r+0x5b4>)
 801098c:	f7ef fc2a 	bl	80001e4 <__adddf3>
 8010990:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8010994:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8010998:	9611      	str	r6, [sp, #68]	; 0x44
 801099a:	2c00      	cmp	r4, #0
 801099c:	d15d      	bne.n	8010a5a <_dtoa_r+0x4fa>
 801099e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80109a2:	2200      	movs	r2, #0
 80109a4:	4b5c      	ldr	r3, [pc, #368]	; (8010b18 <_dtoa_r+0x5b8>)
 80109a6:	f7ef fc1b 	bl	80001e0 <__aeabi_dsub>
 80109aa:	4602      	mov	r2, r0
 80109ac:	460b      	mov	r3, r1
 80109ae:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80109b2:	4633      	mov	r3, r6
 80109b4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80109b6:	f7f0 f85b 	bl	8000a70 <__aeabi_dcmpgt>
 80109ba:	2800      	cmp	r0, #0
 80109bc:	f040 829e 	bne.w	8010efc <_dtoa_r+0x99c>
 80109c0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80109c4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80109c6:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80109ca:	f7f0 f833 	bl	8000a34 <__aeabi_dcmplt>
 80109ce:	2800      	cmp	r0, #0
 80109d0:	f040 8292 	bne.w	8010ef8 <_dtoa_r+0x998>
 80109d4:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 80109d8:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80109dc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80109de:	2b00      	cmp	r3, #0
 80109e0:	f2c0 8153 	blt.w	8010c8a <_dtoa_r+0x72a>
 80109e4:	f1b9 0f0e 	cmp.w	r9, #14
 80109e8:	f300 814f 	bgt.w	8010c8a <_dtoa_r+0x72a>
 80109ec:	4b45      	ldr	r3, [pc, #276]	; (8010b04 <_dtoa_r+0x5a4>)
 80109ee:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 80109f2:	e9d3 3400 	ldrd	r3, r4, [r3]
 80109f6:	e9cd 3406 	strd	r3, r4, [sp, #24]
 80109fa:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80109fc:	2b00      	cmp	r3, #0
 80109fe:	f280 80db 	bge.w	8010bb8 <_dtoa_r+0x658>
 8010a02:	9b02      	ldr	r3, [sp, #8]
 8010a04:	2b00      	cmp	r3, #0
 8010a06:	f300 80d7 	bgt.w	8010bb8 <_dtoa_r+0x658>
 8010a0a:	f040 8274 	bne.w	8010ef6 <_dtoa_r+0x996>
 8010a0e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8010a12:	2200      	movs	r2, #0
 8010a14:	4b40      	ldr	r3, [pc, #256]	; (8010b18 <_dtoa_r+0x5b8>)
 8010a16:	f7ef fd9b 	bl	8000550 <__aeabi_dmul>
 8010a1a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010a1e:	f7f0 f81d 	bl	8000a5c <__aeabi_dcmpge>
 8010a22:	9c02      	ldr	r4, [sp, #8]
 8010a24:	4626      	mov	r6, r4
 8010a26:	2800      	cmp	r0, #0
 8010a28:	f040 824a 	bne.w	8010ec0 <_dtoa_r+0x960>
 8010a2c:	2331      	movs	r3, #49	; 0x31
 8010a2e:	9f08      	ldr	r7, [sp, #32]
 8010a30:	f109 0901 	add.w	r9, r9, #1
 8010a34:	f807 3b01 	strb.w	r3, [r7], #1
 8010a38:	e246      	b.n	8010ec8 <_dtoa_r+0x968>
 8010a3a:	07e2      	lsls	r2, r4, #31
 8010a3c:	d505      	bpl.n	8010a4a <_dtoa_r+0x4ea>
 8010a3e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8010a42:	f7ef fd85 	bl	8000550 <__aeabi_dmul>
 8010a46:	2301      	movs	r3, #1
 8010a48:	3701      	adds	r7, #1
 8010a4a:	1064      	asrs	r4, r4, #1
 8010a4c:	3608      	adds	r6, #8
 8010a4e:	e76d      	b.n	801092c <_dtoa_r+0x3cc>
 8010a50:	2702      	movs	r7, #2
 8010a52:	e770      	b.n	8010936 <_dtoa_r+0x3d6>
 8010a54:	46c8      	mov	r8, r9
 8010a56:	9c02      	ldr	r4, [sp, #8]
 8010a58:	e78f      	b.n	801097a <_dtoa_r+0x41a>
 8010a5a:	9908      	ldr	r1, [sp, #32]
 8010a5c:	4b29      	ldr	r3, [pc, #164]	; (8010b04 <_dtoa_r+0x5a4>)
 8010a5e:	4421      	add	r1, r4
 8010a60:	9112      	str	r1, [sp, #72]	; 0x48
 8010a62:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8010a64:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8010a68:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8010a6c:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8010a70:	2900      	cmp	r1, #0
 8010a72:	d055      	beq.n	8010b20 <_dtoa_r+0x5c0>
 8010a74:	2000      	movs	r0, #0
 8010a76:	4929      	ldr	r1, [pc, #164]	; (8010b1c <_dtoa_r+0x5bc>)
 8010a78:	f7ef fe94 	bl	80007a4 <__aeabi_ddiv>
 8010a7c:	463b      	mov	r3, r7
 8010a7e:	4632      	mov	r2, r6
 8010a80:	f7ef fbae 	bl	80001e0 <__aeabi_dsub>
 8010a84:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8010a88:	9f08      	ldr	r7, [sp, #32]
 8010a8a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010a8e:	f7f0 f80f 	bl	8000ab0 <__aeabi_d2iz>
 8010a92:	4604      	mov	r4, r0
 8010a94:	f7ef fcf2 	bl	800047c <__aeabi_i2d>
 8010a98:	4602      	mov	r2, r0
 8010a9a:	460b      	mov	r3, r1
 8010a9c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010aa0:	f7ef fb9e 	bl	80001e0 <__aeabi_dsub>
 8010aa4:	4602      	mov	r2, r0
 8010aa6:	460b      	mov	r3, r1
 8010aa8:	3430      	adds	r4, #48	; 0x30
 8010aaa:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8010aae:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8010ab2:	f807 4b01 	strb.w	r4, [r7], #1
 8010ab6:	f7ef ffbd 	bl	8000a34 <__aeabi_dcmplt>
 8010aba:	2800      	cmp	r0, #0
 8010abc:	d174      	bne.n	8010ba8 <_dtoa_r+0x648>
 8010abe:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010ac2:	2000      	movs	r0, #0
 8010ac4:	4911      	ldr	r1, [pc, #68]	; (8010b0c <_dtoa_r+0x5ac>)
 8010ac6:	f7ef fb8b 	bl	80001e0 <__aeabi_dsub>
 8010aca:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8010ace:	f7ef ffb1 	bl	8000a34 <__aeabi_dcmplt>
 8010ad2:	2800      	cmp	r0, #0
 8010ad4:	f040 80b6 	bne.w	8010c44 <_dtoa_r+0x6e4>
 8010ad8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8010ada:	429f      	cmp	r7, r3
 8010adc:	f43f af7a 	beq.w	80109d4 <_dtoa_r+0x474>
 8010ae0:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8010ae4:	2200      	movs	r2, #0
 8010ae6:	4b0a      	ldr	r3, [pc, #40]	; (8010b10 <_dtoa_r+0x5b0>)
 8010ae8:	f7ef fd32 	bl	8000550 <__aeabi_dmul>
 8010aec:	2200      	movs	r2, #0
 8010aee:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8010af2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010af6:	4b06      	ldr	r3, [pc, #24]	; (8010b10 <_dtoa_r+0x5b0>)
 8010af8:	f7ef fd2a 	bl	8000550 <__aeabi_dmul>
 8010afc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8010b00:	e7c3      	b.n	8010a8a <_dtoa_r+0x52a>
 8010b02:	bf00      	nop
 8010b04:	08013748 	.word	0x08013748
 8010b08:	08013720 	.word	0x08013720
 8010b0c:	3ff00000 	.word	0x3ff00000
 8010b10:	40240000 	.word	0x40240000
 8010b14:	401c0000 	.word	0x401c0000
 8010b18:	40140000 	.word	0x40140000
 8010b1c:	3fe00000 	.word	0x3fe00000
 8010b20:	4630      	mov	r0, r6
 8010b22:	4639      	mov	r1, r7
 8010b24:	f7ef fd14 	bl	8000550 <__aeabi_dmul>
 8010b28:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8010b2a:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8010b2e:	9c08      	ldr	r4, [sp, #32]
 8010b30:	9314      	str	r3, [sp, #80]	; 0x50
 8010b32:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010b36:	f7ef ffbb 	bl	8000ab0 <__aeabi_d2iz>
 8010b3a:	9015      	str	r0, [sp, #84]	; 0x54
 8010b3c:	f7ef fc9e 	bl	800047c <__aeabi_i2d>
 8010b40:	4602      	mov	r2, r0
 8010b42:	460b      	mov	r3, r1
 8010b44:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010b48:	f7ef fb4a 	bl	80001e0 <__aeabi_dsub>
 8010b4c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8010b4e:	4606      	mov	r6, r0
 8010b50:	3330      	adds	r3, #48	; 0x30
 8010b52:	f804 3b01 	strb.w	r3, [r4], #1
 8010b56:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8010b58:	460f      	mov	r7, r1
 8010b5a:	429c      	cmp	r4, r3
 8010b5c:	f04f 0200 	mov.w	r2, #0
 8010b60:	d124      	bne.n	8010bac <_dtoa_r+0x64c>
 8010b62:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8010b66:	4bb3      	ldr	r3, [pc, #716]	; (8010e34 <_dtoa_r+0x8d4>)
 8010b68:	f7ef fb3c 	bl	80001e4 <__adddf3>
 8010b6c:	4602      	mov	r2, r0
 8010b6e:	460b      	mov	r3, r1
 8010b70:	4630      	mov	r0, r6
 8010b72:	4639      	mov	r1, r7
 8010b74:	f7ef ff7c 	bl	8000a70 <__aeabi_dcmpgt>
 8010b78:	2800      	cmp	r0, #0
 8010b7a:	d162      	bne.n	8010c42 <_dtoa_r+0x6e2>
 8010b7c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8010b80:	2000      	movs	r0, #0
 8010b82:	49ac      	ldr	r1, [pc, #688]	; (8010e34 <_dtoa_r+0x8d4>)
 8010b84:	f7ef fb2c 	bl	80001e0 <__aeabi_dsub>
 8010b88:	4602      	mov	r2, r0
 8010b8a:	460b      	mov	r3, r1
 8010b8c:	4630      	mov	r0, r6
 8010b8e:	4639      	mov	r1, r7
 8010b90:	f7ef ff50 	bl	8000a34 <__aeabi_dcmplt>
 8010b94:	2800      	cmp	r0, #0
 8010b96:	f43f af1d 	beq.w	80109d4 <_dtoa_r+0x474>
 8010b9a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8010b9c:	1e7b      	subs	r3, r7, #1
 8010b9e:	9314      	str	r3, [sp, #80]	; 0x50
 8010ba0:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8010ba4:	2b30      	cmp	r3, #48	; 0x30
 8010ba6:	d0f8      	beq.n	8010b9a <_dtoa_r+0x63a>
 8010ba8:	46c1      	mov	r9, r8
 8010baa:	e03a      	b.n	8010c22 <_dtoa_r+0x6c2>
 8010bac:	4ba2      	ldr	r3, [pc, #648]	; (8010e38 <_dtoa_r+0x8d8>)
 8010bae:	f7ef fccf 	bl	8000550 <__aeabi_dmul>
 8010bb2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8010bb6:	e7bc      	b.n	8010b32 <_dtoa_r+0x5d2>
 8010bb8:	9f08      	ldr	r7, [sp, #32]
 8010bba:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8010bbe:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010bc2:	f7ef fdef 	bl	80007a4 <__aeabi_ddiv>
 8010bc6:	f7ef ff73 	bl	8000ab0 <__aeabi_d2iz>
 8010bca:	4604      	mov	r4, r0
 8010bcc:	f7ef fc56 	bl	800047c <__aeabi_i2d>
 8010bd0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8010bd4:	f7ef fcbc 	bl	8000550 <__aeabi_dmul>
 8010bd8:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8010bdc:	460b      	mov	r3, r1
 8010bde:	4602      	mov	r2, r0
 8010be0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010be4:	f7ef fafc 	bl	80001e0 <__aeabi_dsub>
 8010be8:	f807 6b01 	strb.w	r6, [r7], #1
 8010bec:	9e08      	ldr	r6, [sp, #32]
 8010bee:	9b02      	ldr	r3, [sp, #8]
 8010bf0:	1bbe      	subs	r6, r7, r6
 8010bf2:	42b3      	cmp	r3, r6
 8010bf4:	d13a      	bne.n	8010c6c <_dtoa_r+0x70c>
 8010bf6:	4602      	mov	r2, r0
 8010bf8:	460b      	mov	r3, r1
 8010bfa:	f7ef faf3 	bl	80001e4 <__adddf3>
 8010bfe:	4602      	mov	r2, r0
 8010c00:	460b      	mov	r3, r1
 8010c02:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8010c06:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8010c0a:	f7ef ff31 	bl	8000a70 <__aeabi_dcmpgt>
 8010c0e:	bb58      	cbnz	r0, 8010c68 <_dtoa_r+0x708>
 8010c10:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8010c14:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010c18:	f7ef ff02 	bl	8000a20 <__aeabi_dcmpeq>
 8010c1c:	b108      	cbz	r0, 8010c22 <_dtoa_r+0x6c2>
 8010c1e:	07e1      	lsls	r1, r4, #31
 8010c20:	d422      	bmi.n	8010c68 <_dtoa_r+0x708>
 8010c22:	4628      	mov	r0, r5
 8010c24:	4651      	mov	r1, sl
 8010c26:	f000 faf5 	bl	8011214 <_Bfree>
 8010c2a:	2300      	movs	r3, #0
 8010c2c:	703b      	strb	r3, [r7, #0]
 8010c2e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8010c30:	f109 0001 	add.w	r0, r9, #1
 8010c34:	6018      	str	r0, [r3, #0]
 8010c36:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8010c38:	2b00      	cmp	r3, #0
 8010c3a:	f43f acdf 	beq.w	80105fc <_dtoa_r+0x9c>
 8010c3e:	601f      	str	r7, [r3, #0]
 8010c40:	e4dc      	b.n	80105fc <_dtoa_r+0x9c>
 8010c42:	4627      	mov	r7, r4
 8010c44:	463b      	mov	r3, r7
 8010c46:	461f      	mov	r7, r3
 8010c48:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8010c4c:	2a39      	cmp	r2, #57	; 0x39
 8010c4e:	d107      	bne.n	8010c60 <_dtoa_r+0x700>
 8010c50:	9a08      	ldr	r2, [sp, #32]
 8010c52:	429a      	cmp	r2, r3
 8010c54:	d1f7      	bne.n	8010c46 <_dtoa_r+0x6e6>
 8010c56:	2230      	movs	r2, #48	; 0x30
 8010c58:	9908      	ldr	r1, [sp, #32]
 8010c5a:	f108 0801 	add.w	r8, r8, #1
 8010c5e:	700a      	strb	r2, [r1, #0]
 8010c60:	781a      	ldrb	r2, [r3, #0]
 8010c62:	3201      	adds	r2, #1
 8010c64:	701a      	strb	r2, [r3, #0]
 8010c66:	e79f      	b.n	8010ba8 <_dtoa_r+0x648>
 8010c68:	46c8      	mov	r8, r9
 8010c6a:	e7eb      	b.n	8010c44 <_dtoa_r+0x6e4>
 8010c6c:	2200      	movs	r2, #0
 8010c6e:	4b72      	ldr	r3, [pc, #456]	; (8010e38 <_dtoa_r+0x8d8>)
 8010c70:	f7ef fc6e 	bl	8000550 <__aeabi_dmul>
 8010c74:	4602      	mov	r2, r0
 8010c76:	460b      	mov	r3, r1
 8010c78:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8010c7c:	2200      	movs	r2, #0
 8010c7e:	2300      	movs	r3, #0
 8010c80:	f7ef fece 	bl	8000a20 <__aeabi_dcmpeq>
 8010c84:	2800      	cmp	r0, #0
 8010c86:	d098      	beq.n	8010bba <_dtoa_r+0x65a>
 8010c88:	e7cb      	b.n	8010c22 <_dtoa_r+0x6c2>
 8010c8a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8010c8c:	2a00      	cmp	r2, #0
 8010c8e:	f000 80cd 	beq.w	8010e2c <_dtoa_r+0x8cc>
 8010c92:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8010c94:	2a01      	cmp	r2, #1
 8010c96:	f300 80af 	bgt.w	8010df8 <_dtoa_r+0x898>
 8010c9a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8010c9c:	2a00      	cmp	r2, #0
 8010c9e:	f000 80a7 	beq.w	8010df0 <_dtoa_r+0x890>
 8010ca2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8010ca6:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8010ca8:	9f06      	ldr	r7, [sp, #24]
 8010caa:	9a06      	ldr	r2, [sp, #24]
 8010cac:	2101      	movs	r1, #1
 8010cae:	441a      	add	r2, r3
 8010cb0:	9206      	str	r2, [sp, #24]
 8010cb2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010cb4:	4628      	mov	r0, r5
 8010cb6:	441a      	add	r2, r3
 8010cb8:	9209      	str	r2, [sp, #36]	; 0x24
 8010cba:	f000 fb65 	bl	8011388 <__i2b>
 8010cbe:	4606      	mov	r6, r0
 8010cc0:	2f00      	cmp	r7, #0
 8010cc2:	dd0c      	ble.n	8010cde <_dtoa_r+0x77e>
 8010cc4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010cc6:	2b00      	cmp	r3, #0
 8010cc8:	dd09      	ble.n	8010cde <_dtoa_r+0x77e>
 8010cca:	42bb      	cmp	r3, r7
 8010ccc:	bfa8      	it	ge
 8010cce:	463b      	movge	r3, r7
 8010cd0:	9a06      	ldr	r2, [sp, #24]
 8010cd2:	1aff      	subs	r7, r7, r3
 8010cd4:	1ad2      	subs	r2, r2, r3
 8010cd6:	9206      	str	r2, [sp, #24]
 8010cd8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010cda:	1ad3      	subs	r3, r2, r3
 8010cdc:	9309      	str	r3, [sp, #36]	; 0x24
 8010cde:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010ce0:	b1f3      	cbz	r3, 8010d20 <_dtoa_r+0x7c0>
 8010ce2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010ce4:	2b00      	cmp	r3, #0
 8010ce6:	f000 80a9 	beq.w	8010e3c <_dtoa_r+0x8dc>
 8010cea:	2c00      	cmp	r4, #0
 8010cec:	dd10      	ble.n	8010d10 <_dtoa_r+0x7b0>
 8010cee:	4631      	mov	r1, r6
 8010cf0:	4622      	mov	r2, r4
 8010cf2:	4628      	mov	r0, r5
 8010cf4:	f000 fc02 	bl	80114fc <__pow5mult>
 8010cf8:	4652      	mov	r2, sl
 8010cfa:	4601      	mov	r1, r0
 8010cfc:	4606      	mov	r6, r0
 8010cfe:	4628      	mov	r0, r5
 8010d00:	f000 fb58 	bl	80113b4 <__multiply>
 8010d04:	4680      	mov	r8, r0
 8010d06:	4651      	mov	r1, sl
 8010d08:	4628      	mov	r0, r5
 8010d0a:	f000 fa83 	bl	8011214 <_Bfree>
 8010d0e:	46c2      	mov	sl, r8
 8010d10:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010d12:	1b1a      	subs	r2, r3, r4
 8010d14:	d004      	beq.n	8010d20 <_dtoa_r+0x7c0>
 8010d16:	4651      	mov	r1, sl
 8010d18:	4628      	mov	r0, r5
 8010d1a:	f000 fbef 	bl	80114fc <__pow5mult>
 8010d1e:	4682      	mov	sl, r0
 8010d20:	2101      	movs	r1, #1
 8010d22:	4628      	mov	r0, r5
 8010d24:	f000 fb30 	bl	8011388 <__i2b>
 8010d28:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010d2a:	4604      	mov	r4, r0
 8010d2c:	2b00      	cmp	r3, #0
 8010d2e:	f340 8087 	ble.w	8010e40 <_dtoa_r+0x8e0>
 8010d32:	461a      	mov	r2, r3
 8010d34:	4601      	mov	r1, r0
 8010d36:	4628      	mov	r0, r5
 8010d38:	f000 fbe0 	bl	80114fc <__pow5mult>
 8010d3c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8010d3e:	4604      	mov	r4, r0
 8010d40:	2b01      	cmp	r3, #1
 8010d42:	f340 8080 	ble.w	8010e46 <_dtoa_r+0x8e6>
 8010d46:	f04f 0800 	mov.w	r8, #0
 8010d4a:	6923      	ldr	r3, [r4, #16]
 8010d4c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8010d50:	6918      	ldr	r0, [r3, #16]
 8010d52:	f000 facb 	bl	80112ec <__hi0bits>
 8010d56:	f1c0 0020 	rsb	r0, r0, #32
 8010d5a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010d5c:	4418      	add	r0, r3
 8010d5e:	f010 001f 	ands.w	r0, r0, #31
 8010d62:	f000 8092 	beq.w	8010e8a <_dtoa_r+0x92a>
 8010d66:	f1c0 0320 	rsb	r3, r0, #32
 8010d6a:	2b04      	cmp	r3, #4
 8010d6c:	f340 808a 	ble.w	8010e84 <_dtoa_r+0x924>
 8010d70:	f1c0 001c 	rsb	r0, r0, #28
 8010d74:	9b06      	ldr	r3, [sp, #24]
 8010d76:	4407      	add	r7, r0
 8010d78:	4403      	add	r3, r0
 8010d7a:	9306      	str	r3, [sp, #24]
 8010d7c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010d7e:	4403      	add	r3, r0
 8010d80:	9309      	str	r3, [sp, #36]	; 0x24
 8010d82:	9b06      	ldr	r3, [sp, #24]
 8010d84:	2b00      	cmp	r3, #0
 8010d86:	dd05      	ble.n	8010d94 <_dtoa_r+0x834>
 8010d88:	4651      	mov	r1, sl
 8010d8a:	461a      	mov	r2, r3
 8010d8c:	4628      	mov	r0, r5
 8010d8e:	f000 fc0f 	bl	80115b0 <__lshift>
 8010d92:	4682      	mov	sl, r0
 8010d94:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010d96:	2b00      	cmp	r3, #0
 8010d98:	dd05      	ble.n	8010da6 <_dtoa_r+0x846>
 8010d9a:	4621      	mov	r1, r4
 8010d9c:	461a      	mov	r2, r3
 8010d9e:	4628      	mov	r0, r5
 8010da0:	f000 fc06 	bl	80115b0 <__lshift>
 8010da4:	4604      	mov	r4, r0
 8010da6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8010da8:	2b00      	cmp	r3, #0
 8010daa:	d070      	beq.n	8010e8e <_dtoa_r+0x92e>
 8010dac:	4621      	mov	r1, r4
 8010dae:	4650      	mov	r0, sl
 8010db0:	f000 fc6a 	bl	8011688 <__mcmp>
 8010db4:	2800      	cmp	r0, #0
 8010db6:	da6a      	bge.n	8010e8e <_dtoa_r+0x92e>
 8010db8:	2300      	movs	r3, #0
 8010dba:	4651      	mov	r1, sl
 8010dbc:	220a      	movs	r2, #10
 8010dbe:	4628      	mov	r0, r5
 8010dc0:	f000 fa4a 	bl	8011258 <__multadd>
 8010dc4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010dc6:	4682      	mov	sl, r0
 8010dc8:	f109 39ff 	add.w	r9, r9, #4294967295
 8010dcc:	2b00      	cmp	r3, #0
 8010dce:	f000 8193 	beq.w	80110f8 <_dtoa_r+0xb98>
 8010dd2:	4631      	mov	r1, r6
 8010dd4:	2300      	movs	r3, #0
 8010dd6:	220a      	movs	r2, #10
 8010dd8:	4628      	mov	r0, r5
 8010dda:	f000 fa3d 	bl	8011258 <__multadd>
 8010dde:	f1bb 0f00 	cmp.w	fp, #0
 8010de2:	4606      	mov	r6, r0
 8010de4:	f300 8093 	bgt.w	8010f0e <_dtoa_r+0x9ae>
 8010de8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8010dea:	2b02      	cmp	r3, #2
 8010dec:	dc57      	bgt.n	8010e9e <_dtoa_r+0x93e>
 8010dee:	e08e      	b.n	8010f0e <_dtoa_r+0x9ae>
 8010df0:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8010df2:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8010df6:	e756      	b.n	8010ca6 <_dtoa_r+0x746>
 8010df8:	9b02      	ldr	r3, [sp, #8]
 8010dfa:	1e5c      	subs	r4, r3, #1
 8010dfc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010dfe:	42a3      	cmp	r3, r4
 8010e00:	bfb7      	itett	lt
 8010e02:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8010e04:	1b1c      	subge	r4, r3, r4
 8010e06:	1ae2      	sublt	r2, r4, r3
 8010e08:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8010e0a:	bfbe      	ittt	lt
 8010e0c:	940a      	strlt	r4, [sp, #40]	; 0x28
 8010e0e:	189b      	addlt	r3, r3, r2
 8010e10:	930e      	strlt	r3, [sp, #56]	; 0x38
 8010e12:	9b02      	ldr	r3, [sp, #8]
 8010e14:	bfb8      	it	lt
 8010e16:	2400      	movlt	r4, #0
 8010e18:	2b00      	cmp	r3, #0
 8010e1a:	bfbb      	ittet	lt
 8010e1c:	9b06      	ldrlt	r3, [sp, #24]
 8010e1e:	9a02      	ldrlt	r2, [sp, #8]
 8010e20:	9f06      	ldrge	r7, [sp, #24]
 8010e22:	1a9f      	sublt	r7, r3, r2
 8010e24:	bfac      	ite	ge
 8010e26:	9b02      	ldrge	r3, [sp, #8]
 8010e28:	2300      	movlt	r3, #0
 8010e2a:	e73e      	b.n	8010caa <_dtoa_r+0x74a>
 8010e2c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8010e2e:	9f06      	ldr	r7, [sp, #24]
 8010e30:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8010e32:	e745      	b.n	8010cc0 <_dtoa_r+0x760>
 8010e34:	3fe00000 	.word	0x3fe00000
 8010e38:	40240000 	.word	0x40240000
 8010e3c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010e3e:	e76a      	b.n	8010d16 <_dtoa_r+0x7b6>
 8010e40:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8010e42:	2b01      	cmp	r3, #1
 8010e44:	dc19      	bgt.n	8010e7a <_dtoa_r+0x91a>
 8010e46:	9b04      	ldr	r3, [sp, #16]
 8010e48:	b9bb      	cbnz	r3, 8010e7a <_dtoa_r+0x91a>
 8010e4a:	9b05      	ldr	r3, [sp, #20]
 8010e4c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8010e50:	b99b      	cbnz	r3, 8010e7a <_dtoa_r+0x91a>
 8010e52:	9b05      	ldr	r3, [sp, #20]
 8010e54:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8010e58:	0d1b      	lsrs	r3, r3, #20
 8010e5a:	051b      	lsls	r3, r3, #20
 8010e5c:	b183      	cbz	r3, 8010e80 <_dtoa_r+0x920>
 8010e5e:	f04f 0801 	mov.w	r8, #1
 8010e62:	9b06      	ldr	r3, [sp, #24]
 8010e64:	3301      	adds	r3, #1
 8010e66:	9306      	str	r3, [sp, #24]
 8010e68:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010e6a:	3301      	adds	r3, #1
 8010e6c:	9309      	str	r3, [sp, #36]	; 0x24
 8010e6e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010e70:	2b00      	cmp	r3, #0
 8010e72:	f47f af6a 	bne.w	8010d4a <_dtoa_r+0x7ea>
 8010e76:	2001      	movs	r0, #1
 8010e78:	e76f      	b.n	8010d5a <_dtoa_r+0x7fa>
 8010e7a:	f04f 0800 	mov.w	r8, #0
 8010e7e:	e7f6      	b.n	8010e6e <_dtoa_r+0x90e>
 8010e80:	4698      	mov	r8, r3
 8010e82:	e7f4      	b.n	8010e6e <_dtoa_r+0x90e>
 8010e84:	f43f af7d 	beq.w	8010d82 <_dtoa_r+0x822>
 8010e88:	4618      	mov	r0, r3
 8010e8a:	301c      	adds	r0, #28
 8010e8c:	e772      	b.n	8010d74 <_dtoa_r+0x814>
 8010e8e:	9b02      	ldr	r3, [sp, #8]
 8010e90:	2b00      	cmp	r3, #0
 8010e92:	dc36      	bgt.n	8010f02 <_dtoa_r+0x9a2>
 8010e94:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8010e96:	2b02      	cmp	r3, #2
 8010e98:	dd33      	ble.n	8010f02 <_dtoa_r+0x9a2>
 8010e9a:	f8dd b008 	ldr.w	fp, [sp, #8]
 8010e9e:	f1bb 0f00 	cmp.w	fp, #0
 8010ea2:	d10d      	bne.n	8010ec0 <_dtoa_r+0x960>
 8010ea4:	4621      	mov	r1, r4
 8010ea6:	465b      	mov	r3, fp
 8010ea8:	2205      	movs	r2, #5
 8010eaa:	4628      	mov	r0, r5
 8010eac:	f000 f9d4 	bl	8011258 <__multadd>
 8010eb0:	4601      	mov	r1, r0
 8010eb2:	4604      	mov	r4, r0
 8010eb4:	4650      	mov	r0, sl
 8010eb6:	f000 fbe7 	bl	8011688 <__mcmp>
 8010eba:	2800      	cmp	r0, #0
 8010ebc:	f73f adb6 	bgt.w	8010a2c <_dtoa_r+0x4cc>
 8010ec0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8010ec2:	9f08      	ldr	r7, [sp, #32]
 8010ec4:	ea6f 0903 	mvn.w	r9, r3
 8010ec8:	f04f 0800 	mov.w	r8, #0
 8010ecc:	4621      	mov	r1, r4
 8010ece:	4628      	mov	r0, r5
 8010ed0:	f000 f9a0 	bl	8011214 <_Bfree>
 8010ed4:	2e00      	cmp	r6, #0
 8010ed6:	f43f aea4 	beq.w	8010c22 <_dtoa_r+0x6c2>
 8010eda:	f1b8 0f00 	cmp.w	r8, #0
 8010ede:	d005      	beq.n	8010eec <_dtoa_r+0x98c>
 8010ee0:	45b0      	cmp	r8, r6
 8010ee2:	d003      	beq.n	8010eec <_dtoa_r+0x98c>
 8010ee4:	4641      	mov	r1, r8
 8010ee6:	4628      	mov	r0, r5
 8010ee8:	f000 f994 	bl	8011214 <_Bfree>
 8010eec:	4631      	mov	r1, r6
 8010eee:	4628      	mov	r0, r5
 8010ef0:	f000 f990 	bl	8011214 <_Bfree>
 8010ef4:	e695      	b.n	8010c22 <_dtoa_r+0x6c2>
 8010ef6:	2400      	movs	r4, #0
 8010ef8:	4626      	mov	r6, r4
 8010efa:	e7e1      	b.n	8010ec0 <_dtoa_r+0x960>
 8010efc:	46c1      	mov	r9, r8
 8010efe:	4626      	mov	r6, r4
 8010f00:	e594      	b.n	8010a2c <_dtoa_r+0x4cc>
 8010f02:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010f04:	f8dd b008 	ldr.w	fp, [sp, #8]
 8010f08:	2b00      	cmp	r3, #0
 8010f0a:	f000 80fc 	beq.w	8011106 <_dtoa_r+0xba6>
 8010f0e:	2f00      	cmp	r7, #0
 8010f10:	dd05      	ble.n	8010f1e <_dtoa_r+0x9be>
 8010f12:	4631      	mov	r1, r6
 8010f14:	463a      	mov	r2, r7
 8010f16:	4628      	mov	r0, r5
 8010f18:	f000 fb4a 	bl	80115b0 <__lshift>
 8010f1c:	4606      	mov	r6, r0
 8010f1e:	f1b8 0f00 	cmp.w	r8, #0
 8010f22:	d05c      	beq.n	8010fde <_dtoa_r+0xa7e>
 8010f24:	4628      	mov	r0, r5
 8010f26:	6871      	ldr	r1, [r6, #4]
 8010f28:	f000 f934 	bl	8011194 <_Balloc>
 8010f2c:	4607      	mov	r7, r0
 8010f2e:	b928      	cbnz	r0, 8010f3c <_dtoa_r+0x9dc>
 8010f30:	4602      	mov	r2, r0
 8010f32:	f240 21ea 	movw	r1, #746	; 0x2ea
 8010f36:	4b7e      	ldr	r3, [pc, #504]	; (8011130 <_dtoa_r+0xbd0>)
 8010f38:	f7ff bb26 	b.w	8010588 <_dtoa_r+0x28>
 8010f3c:	6932      	ldr	r2, [r6, #16]
 8010f3e:	f106 010c 	add.w	r1, r6, #12
 8010f42:	3202      	adds	r2, #2
 8010f44:	0092      	lsls	r2, r2, #2
 8010f46:	300c      	adds	r0, #12
 8010f48:	f000 f90a 	bl	8011160 <memcpy>
 8010f4c:	2201      	movs	r2, #1
 8010f4e:	4639      	mov	r1, r7
 8010f50:	4628      	mov	r0, r5
 8010f52:	f000 fb2d 	bl	80115b0 <__lshift>
 8010f56:	46b0      	mov	r8, r6
 8010f58:	4606      	mov	r6, r0
 8010f5a:	9b08      	ldr	r3, [sp, #32]
 8010f5c:	3301      	adds	r3, #1
 8010f5e:	9302      	str	r3, [sp, #8]
 8010f60:	9b08      	ldr	r3, [sp, #32]
 8010f62:	445b      	add	r3, fp
 8010f64:	930a      	str	r3, [sp, #40]	; 0x28
 8010f66:	9b04      	ldr	r3, [sp, #16]
 8010f68:	f003 0301 	and.w	r3, r3, #1
 8010f6c:	9309      	str	r3, [sp, #36]	; 0x24
 8010f6e:	9b02      	ldr	r3, [sp, #8]
 8010f70:	4621      	mov	r1, r4
 8010f72:	4650      	mov	r0, sl
 8010f74:	f103 3bff 	add.w	fp, r3, #4294967295
 8010f78:	f7ff fa64 	bl	8010444 <quorem>
 8010f7c:	4603      	mov	r3, r0
 8010f7e:	4641      	mov	r1, r8
 8010f80:	3330      	adds	r3, #48	; 0x30
 8010f82:	9004      	str	r0, [sp, #16]
 8010f84:	4650      	mov	r0, sl
 8010f86:	930b      	str	r3, [sp, #44]	; 0x2c
 8010f88:	f000 fb7e 	bl	8011688 <__mcmp>
 8010f8c:	4632      	mov	r2, r6
 8010f8e:	9006      	str	r0, [sp, #24]
 8010f90:	4621      	mov	r1, r4
 8010f92:	4628      	mov	r0, r5
 8010f94:	f000 fb94 	bl	80116c0 <__mdiff>
 8010f98:	68c2      	ldr	r2, [r0, #12]
 8010f9a:	4607      	mov	r7, r0
 8010f9c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010f9e:	bb02      	cbnz	r2, 8010fe2 <_dtoa_r+0xa82>
 8010fa0:	4601      	mov	r1, r0
 8010fa2:	4650      	mov	r0, sl
 8010fa4:	f000 fb70 	bl	8011688 <__mcmp>
 8010fa8:	4602      	mov	r2, r0
 8010faa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010fac:	4639      	mov	r1, r7
 8010fae:	4628      	mov	r0, r5
 8010fb0:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8010fb4:	f000 f92e 	bl	8011214 <_Bfree>
 8010fb8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8010fba:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8010fbc:	9f02      	ldr	r7, [sp, #8]
 8010fbe:	ea43 0102 	orr.w	r1, r3, r2
 8010fc2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010fc4:	430b      	orrs	r3, r1
 8010fc6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010fc8:	d10d      	bne.n	8010fe6 <_dtoa_r+0xa86>
 8010fca:	2b39      	cmp	r3, #57	; 0x39
 8010fcc:	d027      	beq.n	801101e <_dtoa_r+0xabe>
 8010fce:	9a06      	ldr	r2, [sp, #24]
 8010fd0:	2a00      	cmp	r2, #0
 8010fd2:	dd01      	ble.n	8010fd8 <_dtoa_r+0xa78>
 8010fd4:	9b04      	ldr	r3, [sp, #16]
 8010fd6:	3331      	adds	r3, #49	; 0x31
 8010fd8:	f88b 3000 	strb.w	r3, [fp]
 8010fdc:	e776      	b.n	8010ecc <_dtoa_r+0x96c>
 8010fde:	4630      	mov	r0, r6
 8010fe0:	e7b9      	b.n	8010f56 <_dtoa_r+0x9f6>
 8010fe2:	2201      	movs	r2, #1
 8010fe4:	e7e2      	b.n	8010fac <_dtoa_r+0xa4c>
 8010fe6:	9906      	ldr	r1, [sp, #24]
 8010fe8:	2900      	cmp	r1, #0
 8010fea:	db04      	blt.n	8010ff6 <_dtoa_r+0xa96>
 8010fec:	9822      	ldr	r0, [sp, #136]	; 0x88
 8010fee:	4301      	orrs	r1, r0
 8010ff0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010ff2:	4301      	orrs	r1, r0
 8010ff4:	d120      	bne.n	8011038 <_dtoa_r+0xad8>
 8010ff6:	2a00      	cmp	r2, #0
 8010ff8:	ddee      	ble.n	8010fd8 <_dtoa_r+0xa78>
 8010ffa:	4651      	mov	r1, sl
 8010ffc:	2201      	movs	r2, #1
 8010ffe:	4628      	mov	r0, r5
 8011000:	9302      	str	r3, [sp, #8]
 8011002:	f000 fad5 	bl	80115b0 <__lshift>
 8011006:	4621      	mov	r1, r4
 8011008:	4682      	mov	sl, r0
 801100a:	f000 fb3d 	bl	8011688 <__mcmp>
 801100e:	2800      	cmp	r0, #0
 8011010:	9b02      	ldr	r3, [sp, #8]
 8011012:	dc02      	bgt.n	801101a <_dtoa_r+0xaba>
 8011014:	d1e0      	bne.n	8010fd8 <_dtoa_r+0xa78>
 8011016:	07da      	lsls	r2, r3, #31
 8011018:	d5de      	bpl.n	8010fd8 <_dtoa_r+0xa78>
 801101a:	2b39      	cmp	r3, #57	; 0x39
 801101c:	d1da      	bne.n	8010fd4 <_dtoa_r+0xa74>
 801101e:	2339      	movs	r3, #57	; 0x39
 8011020:	f88b 3000 	strb.w	r3, [fp]
 8011024:	463b      	mov	r3, r7
 8011026:	461f      	mov	r7, r3
 8011028:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 801102c:	3b01      	subs	r3, #1
 801102e:	2a39      	cmp	r2, #57	; 0x39
 8011030:	d050      	beq.n	80110d4 <_dtoa_r+0xb74>
 8011032:	3201      	adds	r2, #1
 8011034:	701a      	strb	r2, [r3, #0]
 8011036:	e749      	b.n	8010ecc <_dtoa_r+0x96c>
 8011038:	2a00      	cmp	r2, #0
 801103a:	dd03      	ble.n	8011044 <_dtoa_r+0xae4>
 801103c:	2b39      	cmp	r3, #57	; 0x39
 801103e:	d0ee      	beq.n	801101e <_dtoa_r+0xabe>
 8011040:	3301      	adds	r3, #1
 8011042:	e7c9      	b.n	8010fd8 <_dtoa_r+0xa78>
 8011044:	9a02      	ldr	r2, [sp, #8]
 8011046:	990a      	ldr	r1, [sp, #40]	; 0x28
 8011048:	f802 3c01 	strb.w	r3, [r2, #-1]
 801104c:	428a      	cmp	r2, r1
 801104e:	d02a      	beq.n	80110a6 <_dtoa_r+0xb46>
 8011050:	4651      	mov	r1, sl
 8011052:	2300      	movs	r3, #0
 8011054:	220a      	movs	r2, #10
 8011056:	4628      	mov	r0, r5
 8011058:	f000 f8fe 	bl	8011258 <__multadd>
 801105c:	45b0      	cmp	r8, r6
 801105e:	4682      	mov	sl, r0
 8011060:	f04f 0300 	mov.w	r3, #0
 8011064:	f04f 020a 	mov.w	r2, #10
 8011068:	4641      	mov	r1, r8
 801106a:	4628      	mov	r0, r5
 801106c:	d107      	bne.n	801107e <_dtoa_r+0xb1e>
 801106e:	f000 f8f3 	bl	8011258 <__multadd>
 8011072:	4680      	mov	r8, r0
 8011074:	4606      	mov	r6, r0
 8011076:	9b02      	ldr	r3, [sp, #8]
 8011078:	3301      	adds	r3, #1
 801107a:	9302      	str	r3, [sp, #8]
 801107c:	e777      	b.n	8010f6e <_dtoa_r+0xa0e>
 801107e:	f000 f8eb 	bl	8011258 <__multadd>
 8011082:	4631      	mov	r1, r6
 8011084:	4680      	mov	r8, r0
 8011086:	2300      	movs	r3, #0
 8011088:	220a      	movs	r2, #10
 801108a:	4628      	mov	r0, r5
 801108c:	f000 f8e4 	bl	8011258 <__multadd>
 8011090:	4606      	mov	r6, r0
 8011092:	e7f0      	b.n	8011076 <_dtoa_r+0xb16>
 8011094:	f1bb 0f00 	cmp.w	fp, #0
 8011098:	bfcc      	ite	gt
 801109a:	465f      	movgt	r7, fp
 801109c:	2701      	movle	r7, #1
 801109e:	f04f 0800 	mov.w	r8, #0
 80110a2:	9a08      	ldr	r2, [sp, #32]
 80110a4:	4417      	add	r7, r2
 80110a6:	4651      	mov	r1, sl
 80110a8:	2201      	movs	r2, #1
 80110aa:	4628      	mov	r0, r5
 80110ac:	9302      	str	r3, [sp, #8]
 80110ae:	f000 fa7f 	bl	80115b0 <__lshift>
 80110b2:	4621      	mov	r1, r4
 80110b4:	4682      	mov	sl, r0
 80110b6:	f000 fae7 	bl	8011688 <__mcmp>
 80110ba:	2800      	cmp	r0, #0
 80110bc:	dcb2      	bgt.n	8011024 <_dtoa_r+0xac4>
 80110be:	d102      	bne.n	80110c6 <_dtoa_r+0xb66>
 80110c0:	9b02      	ldr	r3, [sp, #8]
 80110c2:	07db      	lsls	r3, r3, #31
 80110c4:	d4ae      	bmi.n	8011024 <_dtoa_r+0xac4>
 80110c6:	463b      	mov	r3, r7
 80110c8:	461f      	mov	r7, r3
 80110ca:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80110ce:	2a30      	cmp	r2, #48	; 0x30
 80110d0:	d0fa      	beq.n	80110c8 <_dtoa_r+0xb68>
 80110d2:	e6fb      	b.n	8010ecc <_dtoa_r+0x96c>
 80110d4:	9a08      	ldr	r2, [sp, #32]
 80110d6:	429a      	cmp	r2, r3
 80110d8:	d1a5      	bne.n	8011026 <_dtoa_r+0xac6>
 80110da:	2331      	movs	r3, #49	; 0x31
 80110dc:	f109 0901 	add.w	r9, r9, #1
 80110e0:	7013      	strb	r3, [r2, #0]
 80110e2:	e6f3      	b.n	8010ecc <_dtoa_r+0x96c>
 80110e4:	4b13      	ldr	r3, [pc, #76]	; (8011134 <_dtoa_r+0xbd4>)
 80110e6:	f7ff baa7 	b.w	8010638 <_dtoa_r+0xd8>
 80110ea:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80110ec:	2b00      	cmp	r3, #0
 80110ee:	f47f aa80 	bne.w	80105f2 <_dtoa_r+0x92>
 80110f2:	4b11      	ldr	r3, [pc, #68]	; (8011138 <_dtoa_r+0xbd8>)
 80110f4:	f7ff baa0 	b.w	8010638 <_dtoa_r+0xd8>
 80110f8:	f1bb 0f00 	cmp.w	fp, #0
 80110fc:	dc03      	bgt.n	8011106 <_dtoa_r+0xba6>
 80110fe:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8011100:	2b02      	cmp	r3, #2
 8011102:	f73f aecc 	bgt.w	8010e9e <_dtoa_r+0x93e>
 8011106:	9f08      	ldr	r7, [sp, #32]
 8011108:	4621      	mov	r1, r4
 801110a:	4650      	mov	r0, sl
 801110c:	f7ff f99a 	bl	8010444 <quorem>
 8011110:	9a08      	ldr	r2, [sp, #32]
 8011112:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8011116:	f807 3b01 	strb.w	r3, [r7], #1
 801111a:	1aba      	subs	r2, r7, r2
 801111c:	4593      	cmp	fp, r2
 801111e:	ddb9      	ble.n	8011094 <_dtoa_r+0xb34>
 8011120:	4651      	mov	r1, sl
 8011122:	2300      	movs	r3, #0
 8011124:	220a      	movs	r2, #10
 8011126:	4628      	mov	r0, r5
 8011128:	f000 f896 	bl	8011258 <__multadd>
 801112c:	4682      	mov	sl, r0
 801112e:	e7eb      	b.n	8011108 <_dtoa_r+0xba8>
 8011130:	080136ab 	.word	0x080136ab
 8011134:	08013604 	.word	0x08013604
 8011138:	08013628 	.word	0x08013628

0801113c <_localeconv_r>:
 801113c:	4800      	ldr	r0, [pc, #0]	; (8011140 <_localeconv_r+0x4>)
 801113e:	4770      	bx	lr
 8011140:	200002fc 	.word	0x200002fc

08011144 <memchr>:
 8011144:	4603      	mov	r3, r0
 8011146:	b510      	push	{r4, lr}
 8011148:	b2c9      	uxtb	r1, r1
 801114a:	4402      	add	r2, r0
 801114c:	4293      	cmp	r3, r2
 801114e:	4618      	mov	r0, r3
 8011150:	d101      	bne.n	8011156 <memchr+0x12>
 8011152:	2000      	movs	r0, #0
 8011154:	e003      	b.n	801115e <memchr+0x1a>
 8011156:	7804      	ldrb	r4, [r0, #0]
 8011158:	3301      	adds	r3, #1
 801115a:	428c      	cmp	r4, r1
 801115c:	d1f6      	bne.n	801114c <memchr+0x8>
 801115e:	bd10      	pop	{r4, pc}

08011160 <memcpy>:
 8011160:	440a      	add	r2, r1
 8011162:	4291      	cmp	r1, r2
 8011164:	f100 33ff 	add.w	r3, r0, #4294967295
 8011168:	d100      	bne.n	801116c <memcpy+0xc>
 801116a:	4770      	bx	lr
 801116c:	b510      	push	{r4, lr}
 801116e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011172:	4291      	cmp	r1, r2
 8011174:	f803 4f01 	strb.w	r4, [r3, #1]!
 8011178:	d1f9      	bne.n	801116e <memcpy+0xe>
 801117a:	bd10      	pop	{r4, pc}

0801117c <__malloc_lock>:
 801117c:	4801      	ldr	r0, [pc, #4]	; (8011184 <__malloc_lock+0x8>)
 801117e:	f000 bd4c 	b.w	8011c1a <__retarget_lock_acquire_recursive>
 8011182:	bf00      	nop
 8011184:	200021ec 	.word	0x200021ec

08011188 <__malloc_unlock>:
 8011188:	4801      	ldr	r0, [pc, #4]	; (8011190 <__malloc_unlock+0x8>)
 801118a:	f000 bd47 	b.w	8011c1c <__retarget_lock_release_recursive>
 801118e:	bf00      	nop
 8011190:	200021ec 	.word	0x200021ec

08011194 <_Balloc>:
 8011194:	b570      	push	{r4, r5, r6, lr}
 8011196:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8011198:	4604      	mov	r4, r0
 801119a:	460d      	mov	r5, r1
 801119c:	b976      	cbnz	r6, 80111bc <_Balloc+0x28>
 801119e:	2010      	movs	r0, #16
 80111a0:	f7fe fbec 	bl	800f97c <malloc>
 80111a4:	4602      	mov	r2, r0
 80111a6:	6260      	str	r0, [r4, #36]	; 0x24
 80111a8:	b920      	cbnz	r0, 80111b4 <_Balloc+0x20>
 80111aa:	2166      	movs	r1, #102	; 0x66
 80111ac:	4b17      	ldr	r3, [pc, #92]	; (801120c <_Balloc+0x78>)
 80111ae:	4818      	ldr	r0, [pc, #96]	; (8011210 <_Balloc+0x7c>)
 80111b0:	f000 fd02 	bl	8011bb8 <__assert_func>
 80111b4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80111b8:	6006      	str	r6, [r0, #0]
 80111ba:	60c6      	str	r6, [r0, #12]
 80111bc:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80111be:	68f3      	ldr	r3, [r6, #12]
 80111c0:	b183      	cbz	r3, 80111e4 <_Balloc+0x50>
 80111c2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80111c4:	68db      	ldr	r3, [r3, #12]
 80111c6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80111ca:	b9b8      	cbnz	r0, 80111fc <_Balloc+0x68>
 80111cc:	2101      	movs	r1, #1
 80111ce:	fa01 f605 	lsl.w	r6, r1, r5
 80111d2:	1d72      	adds	r2, r6, #5
 80111d4:	4620      	mov	r0, r4
 80111d6:	0092      	lsls	r2, r2, #2
 80111d8:	f000 fb5e 	bl	8011898 <_calloc_r>
 80111dc:	b160      	cbz	r0, 80111f8 <_Balloc+0x64>
 80111de:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80111e2:	e00e      	b.n	8011202 <_Balloc+0x6e>
 80111e4:	2221      	movs	r2, #33	; 0x21
 80111e6:	2104      	movs	r1, #4
 80111e8:	4620      	mov	r0, r4
 80111ea:	f000 fb55 	bl	8011898 <_calloc_r>
 80111ee:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80111f0:	60f0      	str	r0, [r6, #12]
 80111f2:	68db      	ldr	r3, [r3, #12]
 80111f4:	2b00      	cmp	r3, #0
 80111f6:	d1e4      	bne.n	80111c2 <_Balloc+0x2e>
 80111f8:	2000      	movs	r0, #0
 80111fa:	bd70      	pop	{r4, r5, r6, pc}
 80111fc:	6802      	ldr	r2, [r0, #0]
 80111fe:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8011202:	2300      	movs	r3, #0
 8011204:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8011208:	e7f7      	b.n	80111fa <_Balloc+0x66>
 801120a:	bf00      	nop
 801120c:	08013635 	.word	0x08013635
 8011210:	080136bc 	.word	0x080136bc

08011214 <_Bfree>:
 8011214:	b570      	push	{r4, r5, r6, lr}
 8011216:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8011218:	4605      	mov	r5, r0
 801121a:	460c      	mov	r4, r1
 801121c:	b976      	cbnz	r6, 801123c <_Bfree+0x28>
 801121e:	2010      	movs	r0, #16
 8011220:	f7fe fbac 	bl	800f97c <malloc>
 8011224:	4602      	mov	r2, r0
 8011226:	6268      	str	r0, [r5, #36]	; 0x24
 8011228:	b920      	cbnz	r0, 8011234 <_Bfree+0x20>
 801122a:	218a      	movs	r1, #138	; 0x8a
 801122c:	4b08      	ldr	r3, [pc, #32]	; (8011250 <_Bfree+0x3c>)
 801122e:	4809      	ldr	r0, [pc, #36]	; (8011254 <_Bfree+0x40>)
 8011230:	f000 fcc2 	bl	8011bb8 <__assert_func>
 8011234:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8011238:	6006      	str	r6, [r0, #0]
 801123a:	60c6      	str	r6, [r0, #12]
 801123c:	b13c      	cbz	r4, 801124e <_Bfree+0x3a>
 801123e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8011240:	6862      	ldr	r2, [r4, #4]
 8011242:	68db      	ldr	r3, [r3, #12]
 8011244:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8011248:	6021      	str	r1, [r4, #0]
 801124a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801124e:	bd70      	pop	{r4, r5, r6, pc}
 8011250:	08013635 	.word	0x08013635
 8011254:	080136bc 	.word	0x080136bc

08011258 <__multadd>:
 8011258:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801125c:	4698      	mov	r8, r3
 801125e:	460c      	mov	r4, r1
 8011260:	2300      	movs	r3, #0
 8011262:	690e      	ldr	r6, [r1, #16]
 8011264:	4607      	mov	r7, r0
 8011266:	f101 0014 	add.w	r0, r1, #20
 801126a:	6805      	ldr	r5, [r0, #0]
 801126c:	3301      	adds	r3, #1
 801126e:	b2a9      	uxth	r1, r5
 8011270:	fb02 8101 	mla	r1, r2, r1, r8
 8011274:	0c2d      	lsrs	r5, r5, #16
 8011276:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 801127a:	fb02 c505 	mla	r5, r2, r5, ip
 801127e:	b289      	uxth	r1, r1
 8011280:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8011284:	429e      	cmp	r6, r3
 8011286:	ea4f 4815 	mov.w	r8, r5, lsr #16
 801128a:	f840 1b04 	str.w	r1, [r0], #4
 801128e:	dcec      	bgt.n	801126a <__multadd+0x12>
 8011290:	f1b8 0f00 	cmp.w	r8, #0
 8011294:	d022      	beq.n	80112dc <__multadd+0x84>
 8011296:	68a3      	ldr	r3, [r4, #8]
 8011298:	42b3      	cmp	r3, r6
 801129a:	dc19      	bgt.n	80112d0 <__multadd+0x78>
 801129c:	6861      	ldr	r1, [r4, #4]
 801129e:	4638      	mov	r0, r7
 80112a0:	3101      	adds	r1, #1
 80112a2:	f7ff ff77 	bl	8011194 <_Balloc>
 80112a6:	4605      	mov	r5, r0
 80112a8:	b928      	cbnz	r0, 80112b6 <__multadd+0x5e>
 80112aa:	4602      	mov	r2, r0
 80112ac:	21b5      	movs	r1, #181	; 0xb5
 80112ae:	4b0d      	ldr	r3, [pc, #52]	; (80112e4 <__multadd+0x8c>)
 80112b0:	480d      	ldr	r0, [pc, #52]	; (80112e8 <__multadd+0x90>)
 80112b2:	f000 fc81 	bl	8011bb8 <__assert_func>
 80112b6:	6922      	ldr	r2, [r4, #16]
 80112b8:	f104 010c 	add.w	r1, r4, #12
 80112bc:	3202      	adds	r2, #2
 80112be:	0092      	lsls	r2, r2, #2
 80112c0:	300c      	adds	r0, #12
 80112c2:	f7ff ff4d 	bl	8011160 <memcpy>
 80112c6:	4621      	mov	r1, r4
 80112c8:	4638      	mov	r0, r7
 80112ca:	f7ff ffa3 	bl	8011214 <_Bfree>
 80112ce:	462c      	mov	r4, r5
 80112d0:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 80112d4:	3601      	adds	r6, #1
 80112d6:	f8c3 8014 	str.w	r8, [r3, #20]
 80112da:	6126      	str	r6, [r4, #16]
 80112dc:	4620      	mov	r0, r4
 80112de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80112e2:	bf00      	nop
 80112e4:	080136ab 	.word	0x080136ab
 80112e8:	080136bc 	.word	0x080136bc

080112ec <__hi0bits>:
 80112ec:	0c02      	lsrs	r2, r0, #16
 80112ee:	0412      	lsls	r2, r2, #16
 80112f0:	4603      	mov	r3, r0
 80112f2:	b9ca      	cbnz	r2, 8011328 <__hi0bits+0x3c>
 80112f4:	0403      	lsls	r3, r0, #16
 80112f6:	2010      	movs	r0, #16
 80112f8:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80112fc:	bf04      	itt	eq
 80112fe:	021b      	lsleq	r3, r3, #8
 8011300:	3008      	addeq	r0, #8
 8011302:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8011306:	bf04      	itt	eq
 8011308:	011b      	lsleq	r3, r3, #4
 801130a:	3004      	addeq	r0, #4
 801130c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8011310:	bf04      	itt	eq
 8011312:	009b      	lsleq	r3, r3, #2
 8011314:	3002      	addeq	r0, #2
 8011316:	2b00      	cmp	r3, #0
 8011318:	db05      	blt.n	8011326 <__hi0bits+0x3a>
 801131a:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 801131e:	f100 0001 	add.w	r0, r0, #1
 8011322:	bf08      	it	eq
 8011324:	2020      	moveq	r0, #32
 8011326:	4770      	bx	lr
 8011328:	2000      	movs	r0, #0
 801132a:	e7e5      	b.n	80112f8 <__hi0bits+0xc>

0801132c <__lo0bits>:
 801132c:	6803      	ldr	r3, [r0, #0]
 801132e:	4602      	mov	r2, r0
 8011330:	f013 0007 	ands.w	r0, r3, #7
 8011334:	d00b      	beq.n	801134e <__lo0bits+0x22>
 8011336:	07d9      	lsls	r1, r3, #31
 8011338:	d422      	bmi.n	8011380 <__lo0bits+0x54>
 801133a:	0798      	lsls	r0, r3, #30
 801133c:	bf49      	itett	mi
 801133e:	085b      	lsrmi	r3, r3, #1
 8011340:	089b      	lsrpl	r3, r3, #2
 8011342:	2001      	movmi	r0, #1
 8011344:	6013      	strmi	r3, [r2, #0]
 8011346:	bf5c      	itt	pl
 8011348:	2002      	movpl	r0, #2
 801134a:	6013      	strpl	r3, [r2, #0]
 801134c:	4770      	bx	lr
 801134e:	b299      	uxth	r1, r3
 8011350:	b909      	cbnz	r1, 8011356 <__lo0bits+0x2a>
 8011352:	2010      	movs	r0, #16
 8011354:	0c1b      	lsrs	r3, r3, #16
 8011356:	f013 0fff 	tst.w	r3, #255	; 0xff
 801135a:	bf04      	itt	eq
 801135c:	0a1b      	lsreq	r3, r3, #8
 801135e:	3008      	addeq	r0, #8
 8011360:	0719      	lsls	r1, r3, #28
 8011362:	bf04      	itt	eq
 8011364:	091b      	lsreq	r3, r3, #4
 8011366:	3004      	addeq	r0, #4
 8011368:	0799      	lsls	r1, r3, #30
 801136a:	bf04      	itt	eq
 801136c:	089b      	lsreq	r3, r3, #2
 801136e:	3002      	addeq	r0, #2
 8011370:	07d9      	lsls	r1, r3, #31
 8011372:	d403      	bmi.n	801137c <__lo0bits+0x50>
 8011374:	085b      	lsrs	r3, r3, #1
 8011376:	f100 0001 	add.w	r0, r0, #1
 801137a:	d003      	beq.n	8011384 <__lo0bits+0x58>
 801137c:	6013      	str	r3, [r2, #0]
 801137e:	4770      	bx	lr
 8011380:	2000      	movs	r0, #0
 8011382:	4770      	bx	lr
 8011384:	2020      	movs	r0, #32
 8011386:	4770      	bx	lr

08011388 <__i2b>:
 8011388:	b510      	push	{r4, lr}
 801138a:	460c      	mov	r4, r1
 801138c:	2101      	movs	r1, #1
 801138e:	f7ff ff01 	bl	8011194 <_Balloc>
 8011392:	4602      	mov	r2, r0
 8011394:	b928      	cbnz	r0, 80113a2 <__i2b+0x1a>
 8011396:	f44f 71a0 	mov.w	r1, #320	; 0x140
 801139a:	4b04      	ldr	r3, [pc, #16]	; (80113ac <__i2b+0x24>)
 801139c:	4804      	ldr	r0, [pc, #16]	; (80113b0 <__i2b+0x28>)
 801139e:	f000 fc0b 	bl	8011bb8 <__assert_func>
 80113a2:	2301      	movs	r3, #1
 80113a4:	6144      	str	r4, [r0, #20]
 80113a6:	6103      	str	r3, [r0, #16]
 80113a8:	bd10      	pop	{r4, pc}
 80113aa:	bf00      	nop
 80113ac:	080136ab 	.word	0x080136ab
 80113b0:	080136bc 	.word	0x080136bc

080113b4 <__multiply>:
 80113b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80113b8:	4614      	mov	r4, r2
 80113ba:	690a      	ldr	r2, [r1, #16]
 80113bc:	6923      	ldr	r3, [r4, #16]
 80113be:	460d      	mov	r5, r1
 80113c0:	429a      	cmp	r2, r3
 80113c2:	bfbe      	ittt	lt
 80113c4:	460b      	movlt	r3, r1
 80113c6:	4625      	movlt	r5, r4
 80113c8:	461c      	movlt	r4, r3
 80113ca:	f8d5 a010 	ldr.w	sl, [r5, #16]
 80113ce:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80113d2:	68ab      	ldr	r3, [r5, #8]
 80113d4:	6869      	ldr	r1, [r5, #4]
 80113d6:	eb0a 0709 	add.w	r7, sl, r9
 80113da:	42bb      	cmp	r3, r7
 80113dc:	b085      	sub	sp, #20
 80113de:	bfb8      	it	lt
 80113e0:	3101      	addlt	r1, #1
 80113e2:	f7ff fed7 	bl	8011194 <_Balloc>
 80113e6:	b930      	cbnz	r0, 80113f6 <__multiply+0x42>
 80113e8:	4602      	mov	r2, r0
 80113ea:	f240 115d 	movw	r1, #349	; 0x15d
 80113ee:	4b41      	ldr	r3, [pc, #260]	; (80114f4 <__multiply+0x140>)
 80113f0:	4841      	ldr	r0, [pc, #260]	; (80114f8 <__multiply+0x144>)
 80113f2:	f000 fbe1 	bl	8011bb8 <__assert_func>
 80113f6:	f100 0614 	add.w	r6, r0, #20
 80113fa:	4633      	mov	r3, r6
 80113fc:	2200      	movs	r2, #0
 80113fe:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8011402:	4543      	cmp	r3, r8
 8011404:	d31e      	bcc.n	8011444 <__multiply+0x90>
 8011406:	f105 0c14 	add.w	ip, r5, #20
 801140a:	f104 0314 	add.w	r3, r4, #20
 801140e:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8011412:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8011416:	9202      	str	r2, [sp, #8]
 8011418:	ebac 0205 	sub.w	r2, ip, r5
 801141c:	3a15      	subs	r2, #21
 801141e:	f022 0203 	bic.w	r2, r2, #3
 8011422:	3204      	adds	r2, #4
 8011424:	f105 0115 	add.w	r1, r5, #21
 8011428:	458c      	cmp	ip, r1
 801142a:	bf38      	it	cc
 801142c:	2204      	movcc	r2, #4
 801142e:	9201      	str	r2, [sp, #4]
 8011430:	9a02      	ldr	r2, [sp, #8]
 8011432:	9303      	str	r3, [sp, #12]
 8011434:	429a      	cmp	r2, r3
 8011436:	d808      	bhi.n	801144a <__multiply+0x96>
 8011438:	2f00      	cmp	r7, #0
 801143a:	dc55      	bgt.n	80114e8 <__multiply+0x134>
 801143c:	6107      	str	r7, [r0, #16]
 801143e:	b005      	add	sp, #20
 8011440:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011444:	f843 2b04 	str.w	r2, [r3], #4
 8011448:	e7db      	b.n	8011402 <__multiply+0x4e>
 801144a:	f8b3 a000 	ldrh.w	sl, [r3]
 801144e:	f1ba 0f00 	cmp.w	sl, #0
 8011452:	d020      	beq.n	8011496 <__multiply+0xe2>
 8011454:	46b1      	mov	r9, r6
 8011456:	2200      	movs	r2, #0
 8011458:	f105 0e14 	add.w	lr, r5, #20
 801145c:	f85e 4b04 	ldr.w	r4, [lr], #4
 8011460:	f8d9 b000 	ldr.w	fp, [r9]
 8011464:	b2a1      	uxth	r1, r4
 8011466:	fa1f fb8b 	uxth.w	fp, fp
 801146a:	fb0a b101 	mla	r1, sl, r1, fp
 801146e:	4411      	add	r1, r2
 8011470:	f8d9 2000 	ldr.w	r2, [r9]
 8011474:	0c24      	lsrs	r4, r4, #16
 8011476:	0c12      	lsrs	r2, r2, #16
 8011478:	fb0a 2404 	mla	r4, sl, r4, r2
 801147c:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8011480:	b289      	uxth	r1, r1
 8011482:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8011486:	45f4      	cmp	ip, lr
 8011488:	ea4f 4214 	mov.w	r2, r4, lsr #16
 801148c:	f849 1b04 	str.w	r1, [r9], #4
 8011490:	d8e4      	bhi.n	801145c <__multiply+0xa8>
 8011492:	9901      	ldr	r1, [sp, #4]
 8011494:	5072      	str	r2, [r6, r1]
 8011496:	9a03      	ldr	r2, [sp, #12]
 8011498:	3304      	adds	r3, #4
 801149a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 801149e:	f1b9 0f00 	cmp.w	r9, #0
 80114a2:	d01f      	beq.n	80114e4 <__multiply+0x130>
 80114a4:	46b6      	mov	lr, r6
 80114a6:	f04f 0a00 	mov.w	sl, #0
 80114aa:	6834      	ldr	r4, [r6, #0]
 80114ac:	f105 0114 	add.w	r1, r5, #20
 80114b0:	880a      	ldrh	r2, [r1, #0]
 80114b2:	f8be b002 	ldrh.w	fp, [lr, #2]
 80114b6:	b2a4      	uxth	r4, r4
 80114b8:	fb09 b202 	mla	r2, r9, r2, fp
 80114bc:	4492      	add	sl, r2
 80114be:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80114c2:	f84e 4b04 	str.w	r4, [lr], #4
 80114c6:	f851 4b04 	ldr.w	r4, [r1], #4
 80114ca:	f8be 2000 	ldrh.w	r2, [lr]
 80114ce:	0c24      	lsrs	r4, r4, #16
 80114d0:	fb09 2404 	mla	r4, r9, r4, r2
 80114d4:	458c      	cmp	ip, r1
 80114d6:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 80114da:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80114de:	d8e7      	bhi.n	80114b0 <__multiply+0xfc>
 80114e0:	9a01      	ldr	r2, [sp, #4]
 80114e2:	50b4      	str	r4, [r6, r2]
 80114e4:	3604      	adds	r6, #4
 80114e6:	e7a3      	b.n	8011430 <__multiply+0x7c>
 80114e8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80114ec:	2b00      	cmp	r3, #0
 80114ee:	d1a5      	bne.n	801143c <__multiply+0x88>
 80114f0:	3f01      	subs	r7, #1
 80114f2:	e7a1      	b.n	8011438 <__multiply+0x84>
 80114f4:	080136ab 	.word	0x080136ab
 80114f8:	080136bc 	.word	0x080136bc

080114fc <__pow5mult>:
 80114fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011500:	4615      	mov	r5, r2
 8011502:	f012 0203 	ands.w	r2, r2, #3
 8011506:	4606      	mov	r6, r0
 8011508:	460f      	mov	r7, r1
 801150a:	d007      	beq.n	801151c <__pow5mult+0x20>
 801150c:	4c25      	ldr	r4, [pc, #148]	; (80115a4 <__pow5mult+0xa8>)
 801150e:	3a01      	subs	r2, #1
 8011510:	2300      	movs	r3, #0
 8011512:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8011516:	f7ff fe9f 	bl	8011258 <__multadd>
 801151a:	4607      	mov	r7, r0
 801151c:	10ad      	asrs	r5, r5, #2
 801151e:	d03d      	beq.n	801159c <__pow5mult+0xa0>
 8011520:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8011522:	b97c      	cbnz	r4, 8011544 <__pow5mult+0x48>
 8011524:	2010      	movs	r0, #16
 8011526:	f7fe fa29 	bl	800f97c <malloc>
 801152a:	4602      	mov	r2, r0
 801152c:	6270      	str	r0, [r6, #36]	; 0x24
 801152e:	b928      	cbnz	r0, 801153c <__pow5mult+0x40>
 8011530:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8011534:	4b1c      	ldr	r3, [pc, #112]	; (80115a8 <__pow5mult+0xac>)
 8011536:	481d      	ldr	r0, [pc, #116]	; (80115ac <__pow5mult+0xb0>)
 8011538:	f000 fb3e 	bl	8011bb8 <__assert_func>
 801153c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8011540:	6004      	str	r4, [r0, #0]
 8011542:	60c4      	str	r4, [r0, #12]
 8011544:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8011548:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801154c:	b94c      	cbnz	r4, 8011562 <__pow5mult+0x66>
 801154e:	f240 2171 	movw	r1, #625	; 0x271
 8011552:	4630      	mov	r0, r6
 8011554:	f7ff ff18 	bl	8011388 <__i2b>
 8011558:	2300      	movs	r3, #0
 801155a:	4604      	mov	r4, r0
 801155c:	f8c8 0008 	str.w	r0, [r8, #8]
 8011560:	6003      	str	r3, [r0, #0]
 8011562:	f04f 0900 	mov.w	r9, #0
 8011566:	07eb      	lsls	r3, r5, #31
 8011568:	d50a      	bpl.n	8011580 <__pow5mult+0x84>
 801156a:	4639      	mov	r1, r7
 801156c:	4622      	mov	r2, r4
 801156e:	4630      	mov	r0, r6
 8011570:	f7ff ff20 	bl	80113b4 <__multiply>
 8011574:	4680      	mov	r8, r0
 8011576:	4639      	mov	r1, r7
 8011578:	4630      	mov	r0, r6
 801157a:	f7ff fe4b 	bl	8011214 <_Bfree>
 801157e:	4647      	mov	r7, r8
 8011580:	106d      	asrs	r5, r5, #1
 8011582:	d00b      	beq.n	801159c <__pow5mult+0xa0>
 8011584:	6820      	ldr	r0, [r4, #0]
 8011586:	b938      	cbnz	r0, 8011598 <__pow5mult+0x9c>
 8011588:	4622      	mov	r2, r4
 801158a:	4621      	mov	r1, r4
 801158c:	4630      	mov	r0, r6
 801158e:	f7ff ff11 	bl	80113b4 <__multiply>
 8011592:	6020      	str	r0, [r4, #0]
 8011594:	f8c0 9000 	str.w	r9, [r0]
 8011598:	4604      	mov	r4, r0
 801159a:	e7e4      	b.n	8011566 <__pow5mult+0x6a>
 801159c:	4638      	mov	r0, r7
 801159e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80115a2:	bf00      	nop
 80115a4:	08013810 	.word	0x08013810
 80115a8:	08013635 	.word	0x08013635
 80115ac:	080136bc 	.word	0x080136bc

080115b0 <__lshift>:
 80115b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80115b4:	460c      	mov	r4, r1
 80115b6:	4607      	mov	r7, r0
 80115b8:	4691      	mov	r9, r2
 80115ba:	6923      	ldr	r3, [r4, #16]
 80115bc:	6849      	ldr	r1, [r1, #4]
 80115be:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80115c2:	68a3      	ldr	r3, [r4, #8]
 80115c4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80115c8:	f108 0601 	add.w	r6, r8, #1
 80115cc:	42b3      	cmp	r3, r6
 80115ce:	db0b      	blt.n	80115e8 <__lshift+0x38>
 80115d0:	4638      	mov	r0, r7
 80115d2:	f7ff fddf 	bl	8011194 <_Balloc>
 80115d6:	4605      	mov	r5, r0
 80115d8:	b948      	cbnz	r0, 80115ee <__lshift+0x3e>
 80115da:	4602      	mov	r2, r0
 80115dc:	f240 11d9 	movw	r1, #473	; 0x1d9
 80115e0:	4b27      	ldr	r3, [pc, #156]	; (8011680 <__lshift+0xd0>)
 80115e2:	4828      	ldr	r0, [pc, #160]	; (8011684 <__lshift+0xd4>)
 80115e4:	f000 fae8 	bl	8011bb8 <__assert_func>
 80115e8:	3101      	adds	r1, #1
 80115ea:	005b      	lsls	r3, r3, #1
 80115ec:	e7ee      	b.n	80115cc <__lshift+0x1c>
 80115ee:	2300      	movs	r3, #0
 80115f0:	f100 0114 	add.w	r1, r0, #20
 80115f4:	f100 0210 	add.w	r2, r0, #16
 80115f8:	4618      	mov	r0, r3
 80115fa:	4553      	cmp	r3, sl
 80115fc:	db33      	blt.n	8011666 <__lshift+0xb6>
 80115fe:	6920      	ldr	r0, [r4, #16]
 8011600:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8011604:	f104 0314 	add.w	r3, r4, #20
 8011608:	f019 091f 	ands.w	r9, r9, #31
 801160c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8011610:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8011614:	d02b      	beq.n	801166e <__lshift+0xbe>
 8011616:	468a      	mov	sl, r1
 8011618:	2200      	movs	r2, #0
 801161a:	f1c9 0e20 	rsb	lr, r9, #32
 801161e:	6818      	ldr	r0, [r3, #0]
 8011620:	fa00 f009 	lsl.w	r0, r0, r9
 8011624:	4302      	orrs	r2, r0
 8011626:	f84a 2b04 	str.w	r2, [sl], #4
 801162a:	f853 2b04 	ldr.w	r2, [r3], #4
 801162e:	459c      	cmp	ip, r3
 8011630:	fa22 f20e 	lsr.w	r2, r2, lr
 8011634:	d8f3      	bhi.n	801161e <__lshift+0x6e>
 8011636:	ebac 0304 	sub.w	r3, ip, r4
 801163a:	3b15      	subs	r3, #21
 801163c:	f023 0303 	bic.w	r3, r3, #3
 8011640:	3304      	adds	r3, #4
 8011642:	f104 0015 	add.w	r0, r4, #21
 8011646:	4584      	cmp	ip, r0
 8011648:	bf38      	it	cc
 801164a:	2304      	movcc	r3, #4
 801164c:	50ca      	str	r2, [r1, r3]
 801164e:	b10a      	cbz	r2, 8011654 <__lshift+0xa4>
 8011650:	f108 0602 	add.w	r6, r8, #2
 8011654:	3e01      	subs	r6, #1
 8011656:	4638      	mov	r0, r7
 8011658:	4621      	mov	r1, r4
 801165a:	612e      	str	r6, [r5, #16]
 801165c:	f7ff fdda 	bl	8011214 <_Bfree>
 8011660:	4628      	mov	r0, r5
 8011662:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011666:	f842 0f04 	str.w	r0, [r2, #4]!
 801166a:	3301      	adds	r3, #1
 801166c:	e7c5      	b.n	80115fa <__lshift+0x4a>
 801166e:	3904      	subs	r1, #4
 8011670:	f853 2b04 	ldr.w	r2, [r3], #4
 8011674:	459c      	cmp	ip, r3
 8011676:	f841 2f04 	str.w	r2, [r1, #4]!
 801167a:	d8f9      	bhi.n	8011670 <__lshift+0xc0>
 801167c:	e7ea      	b.n	8011654 <__lshift+0xa4>
 801167e:	bf00      	nop
 8011680:	080136ab 	.word	0x080136ab
 8011684:	080136bc 	.word	0x080136bc

08011688 <__mcmp>:
 8011688:	4603      	mov	r3, r0
 801168a:	690a      	ldr	r2, [r1, #16]
 801168c:	6900      	ldr	r0, [r0, #16]
 801168e:	b530      	push	{r4, r5, lr}
 8011690:	1a80      	subs	r0, r0, r2
 8011692:	d10d      	bne.n	80116b0 <__mcmp+0x28>
 8011694:	3314      	adds	r3, #20
 8011696:	3114      	adds	r1, #20
 8011698:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 801169c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80116a0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80116a4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80116a8:	4295      	cmp	r5, r2
 80116aa:	d002      	beq.n	80116b2 <__mcmp+0x2a>
 80116ac:	d304      	bcc.n	80116b8 <__mcmp+0x30>
 80116ae:	2001      	movs	r0, #1
 80116b0:	bd30      	pop	{r4, r5, pc}
 80116b2:	42a3      	cmp	r3, r4
 80116b4:	d3f4      	bcc.n	80116a0 <__mcmp+0x18>
 80116b6:	e7fb      	b.n	80116b0 <__mcmp+0x28>
 80116b8:	f04f 30ff 	mov.w	r0, #4294967295
 80116bc:	e7f8      	b.n	80116b0 <__mcmp+0x28>
	...

080116c0 <__mdiff>:
 80116c0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80116c4:	460c      	mov	r4, r1
 80116c6:	4606      	mov	r6, r0
 80116c8:	4611      	mov	r1, r2
 80116ca:	4620      	mov	r0, r4
 80116cc:	4692      	mov	sl, r2
 80116ce:	f7ff ffdb 	bl	8011688 <__mcmp>
 80116d2:	1e05      	subs	r5, r0, #0
 80116d4:	d111      	bne.n	80116fa <__mdiff+0x3a>
 80116d6:	4629      	mov	r1, r5
 80116d8:	4630      	mov	r0, r6
 80116da:	f7ff fd5b 	bl	8011194 <_Balloc>
 80116de:	4602      	mov	r2, r0
 80116e0:	b928      	cbnz	r0, 80116ee <__mdiff+0x2e>
 80116e2:	f240 2132 	movw	r1, #562	; 0x232
 80116e6:	4b3c      	ldr	r3, [pc, #240]	; (80117d8 <__mdiff+0x118>)
 80116e8:	483c      	ldr	r0, [pc, #240]	; (80117dc <__mdiff+0x11c>)
 80116ea:	f000 fa65 	bl	8011bb8 <__assert_func>
 80116ee:	2301      	movs	r3, #1
 80116f0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80116f4:	4610      	mov	r0, r2
 80116f6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80116fa:	bfa4      	itt	ge
 80116fc:	4653      	movge	r3, sl
 80116fe:	46a2      	movge	sl, r4
 8011700:	4630      	mov	r0, r6
 8011702:	f8da 1004 	ldr.w	r1, [sl, #4]
 8011706:	bfa6      	itte	ge
 8011708:	461c      	movge	r4, r3
 801170a:	2500      	movge	r5, #0
 801170c:	2501      	movlt	r5, #1
 801170e:	f7ff fd41 	bl	8011194 <_Balloc>
 8011712:	4602      	mov	r2, r0
 8011714:	b918      	cbnz	r0, 801171e <__mdiff+0x5e>
 8011716:	f44f 7110 	mov.w	r1, #576	; 0x240
 801171a:	4b2f      	ldr	r3, [pc, #188]	; (80117d8 <__mdiff+0x118>)
 801171c:	e7e4      	b.n	80116e8 <__mdiff+0x28>
 801171e:	f100 0814 	add.w	r8, r0, #20
 8011722:	f8da 7010 	ldr.w	r7, [sl, #16]
 8011726:	60c5      	str	r5, [r0, #12]
 8011728:	f04f 0c00 	mov.w	ip, #0
 801172c:	f10a 0514 	add.w	r5, sl, #20
 8011730:	f10a 0010 	add.w	r0, sl, #16
 8011734:	46c2      	mov	sl, r8
 8011736:	6926      	ldr	r6, [r4, #16]
 8011738:	f104 0914 	add.w	r9, r4, #20
 801173c:	eb05 0e87 	add.w	lr, r5, r7, lsl #2
 8011740:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8011744:	f850 bf04 	ldr.w	fp, [r0, #4]!
 8011748:	f859 3b04 	ldr.w	r3, [r9], #4
 801174c:	fa1f f18b 	uxth.w	r1, fp
 8011750:	4461      	add	r1, ip
 8011752:	fa1f fc83 	uxth.w	ip, r3
 8011756:	0c1b      	lsrs	r3, r3, #16
 8011758:	eba1 010c 	sub.w	r1, r1, ip
 801175c:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8011760:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8011764:	b289      	uxth	r1, r1
 8011766:	ea4f 4c23 	mov.w	ip, r3, asr #16
 801176a:	454e      	cmp	r6, r9
 801176c:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8011770:	f84a 3b04 	str.w	r3, [sl], #4
 8011774:	d8e6      	bhi.n	8011744 <__mdiff+0x84>
 8011776:	1b33      	subs	r3, r6, r4
 8011778:	3b15      	subs	r3, #21
 801177a:	f023 0303 	bic.w	r3, r3, #3
 801177e:	3415      	adds	r4, #21
 8011780:	3304      	adds	r3, #4
 8011782:	42a6      	cmp	r6, r4
 8011784:	bf38      	it	cc
 8011786:	2304      	movcc	r3, #4
 8011788:	441d      	add	r5, r3
 801178a:	4443      	add	r3, r8
 801178c:	461e      	mov	r6, r3
 801178e:	462c      	mov	r4, r5
 8011790:	4574      	cmp	r4, lr
 8011792:	d30e      	bcc.n	80117b2 <__mdiff+0xf2>
 8011794:	f10e 0103 	add.w	r1, lr, #3
 8011798:	1b49      	subs	r1, r1, r5
 801179a:	f021 0103 	bic.w	r1, r1, #3
 801179e:	3d03      	subs	r5, #3
 80117a0:	45ae      	cmp	lr, r5
 80117a2:	bf38      	it	cc
 80117a4:	2100      	movcc	r1, #0
 80117a6:	4419      	add	r1, r3
 80117a8:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 80117ac:	b18b      	cbz	r3, 80117d2 <__mdiff+0x112>
 80117ae:	6117      	str	r7, [r2, #16]
 80117b0:	e7a0      	b.n	80116f4 <__mdiff+0x34>
 80117b2:	f854 8b04 	ldr.w	r8, [r4], #4
 80117b6:	fa1f f188 	uxth.w	r1, r8
 80117ba:	4461      	add	r1, ip
 80117bc:	1408      	asrs	r0, r1, #16
 80117be:	eb00 4018 	add.w	r0, r0, r8, lsr #16
 80117c2:	b289      	uxth	r1, r1
 80117c4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80117c8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80117cc:	f846 1b04 	str.w	r1, [r6], #4
 80117d0:	e7de      	b.n	8011790 <__mdiff+0xd0>
 80117d2:	3f01      	subs	r7, #1
 80117d4:	e7e8      	b.n	80117a8 <__mdiff+0xe8>
 80117d6:	bf00      	nop
 80117d8:	080136ab 	.word	0x080136ab
 80117dc:	080136bc 	.word	0x080136bc

080117e0 <__d2b>:
 80117e0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80117e4:	2101      	movs	r1, #1
 80117e6:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 80117ea:	4690      	mov	r8, r2
 80117ec:	461d      	mov	r5, r3
 80117ee:	f7ff fcd1 	bl	8011194 <_Balloc>
 80117f2:	4604      	mov	r4, r0
 80117f4:	b930      	cbnz	r0, 8011804 <__d2b+0x24>
 80117f6:	4602      	mov	r2, r0
 80117f8:	f240 310a 	movw	r1, #778	; 0x30a
 80117fc:	4b24      	ldr	r3, [pc, #144]	; (8011890 <__d2b+0xb0>)
 80117fe:	4825      	ldr	r0, [pc, #148]	; (8011894 <__d2b+0xb4>)
 8011800:	f000 f9da 	bl	8011bb8 <__assert_func>
 8011804:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8011808:	f3c5 550a 	ubfx	r5, r5, #20, #11
 801180c:	bb2d      	cbnz	r5, 801185a <__d2b+0x7a>
 801180e:	9301      	str	r3, [sp, #4]
 8011810:	f1b8 0300 	subs.w	r3, r8, #0
 8011814:	d026      	beq.n	8011864 <__d2b+0x84>
 8011816:	4668      	mov	r0, sp
 8011818:	9300      	str	r3, [sp, #0]
 801181a:	f7ff fd87 	bl	801132c <__lo0bits>
 801181e:	9900      	ldr	r1, [sp, #0]
 8011820:	b1f0      	cbz	r0, 8011860 <__d2b+0x80>
 8011822:	9a01      	ldr	r2, [sp, #4]
 8011824:	f1c0 0320 	rsb	r3, r0, #32
 8011828:	fa02 f303 	lsl.w	r3, r2, r3
 801182c:	430b      	orrs	r3, r1
 801182e:	40c2      	lsrs	r2, r0
 8011830:	6163      	str	r3, [r4, #20]
 8011832:	9201      	str	r2, [sp, #4]
 8011834:	9b01      	ldr	r3, [sp, #4]
 8011836:	2b00      	cmp	r3, #0
 8011838:	bf14      	ite	ne
 801183a:	2102      	movne	r1, #2
 801183c:	2101      	moveq	r1, #1
 801183e:	61a3      	str	r3, [r4, #24]
 8011840:	6121      	str	r1, [r4, #16]
 8011842:	b1c5      	cbz	r5, 8011876 <__d2b+0x96>
 8011844:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8011848:	4405      	add	r5, r0
 801184a:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 801184e:	603d      	str	r5, [r7, #0]
 8011850:	6030      	str	r0, [r6, #0]
 8011852:	4620      	mov	r0, r4
 8011854:	b002      	add	sp, #8
 8011856:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801185a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801185e:	e7d6      	b.n	801180e <__d2b+0x2e>
 8011860:	6161      	str	r1, [r4, #20]
 8011862:	e7e7      	b.n	8011834 <__d2b+0x54>
 8011864:	a801      	add	r0, sp, #4
 8011866:	f7ff fd61 	bl	801132c <__lo0bits>
 801186a:	2101      	movs	r1, #1
 801186c:	9b01      	ldr	r3, [sp, #4]
 801186e:	6121      	str	r1, [r4, #16]
 8011870:	6163      	str	r3, [r4, #20]
 8011872:	3020      	adds	r0, #32
 8011874:	e7e5      	b.n	8011842 <__d2b+0x62>
 8011876:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 801187a:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801187e:	6038      	str	r0, [r7, #0]
 8011880:	6918      	ldr	r0, [r3, #16]
 8011882:	f7ff fd33 	bl	80112ec <__hi0bits>
 8011886:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 801188a:	6031      	str	r1, [r6, #0]
 801188c:	e7e1      	b.n	8011852 <__d2b+0x72>
 801188e:	bf00      	nop
 8011890:	080136ab 	.word	0x080136ab
 8011894:	080136bc 	.word	0x080136bc

08011898 <_calloc_r>:
 8011898:	b538      	push	{r3, r4, r5, lr}
 801189a:	fb02 f501 	mul.w	r5, r2, r1
 801189e:	4629      	mov	r1, r5
 80118a0:	f7fe f8de 	bl	800fa60 <_malloc_r>
 80118a4:	4604      	mov	r4, r0
 80118a6:	b118      	cbz	r0, 80118b0 <_calloc_r+0x18>
 80118a8:	462a      	mov	r2, r5
 80118aa:	2100      	movs	r1, #0
 80118ac:	f7fe f884 	bl	800f9b8 <memset>
 80118b0:	4620      	mov	r0, r4
 80118b2:	bd38      	pop	{r3, r4, r5, pc}

080118b4 <_realloc_r>:
 80118b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80118b6:	4607      	mov	r7, r0
 80118b8:	4614      	mov	r4, r2
 80118ba:	460e      	mov	r6, r1
 80118bc:	b921      	cbnz	r1, 80118c8 <_realloc_r+0x14>
 80118be:	4611      	mov	r1, r2
 80118c0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80118c4:	f7fe b8cc 	b.w	800fa60 <_malloc_r>
 80118c8:	b922      	cbnz	r2, 80118d4 <_realloc_r+0x20>
 80118ca:	f7fe f87d 	bl	800f9c8 <_free_r>
 80118ce:	4625      	mov	r5, r4
 80118d0:	4628      	mov	r0, r5
 80118d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80118d4:	f000 f9cf 	bl	8011c76 <_malloc_usable_size_r>
 80118d8:	42a0      	cmp	r0, r4
 80118da:	d20f      	bcs.n	80118fc <_realloc_r+0x48>
 80118dc:	4621      	mov	r1, r4
 80118de:	4638      	mov	r0, r7
 80118e0:	f7fe f8be 	bl	800fa60 <_malloc_r>
 80118e4:	4605      	mov	r5, r0
 80118e6:	2800      	cmp	r0, #0
 80118e8:	d0f2      	beq.n	80118d0 <_realloc_r+0x1c>
 80118ea:	4631      	mov	r1, r6
 80118ec:	4622      	mov	r2, r4
 80118ee:	f7ff fc37 	bl	8011160 <memcpy>
 80118f2:	4631      	mov	r1, r6
 80118f4:	4638      	mov	r0, r7
 80118f6:	f7fe f867 	bl	800f9c8 <_free_r>
 80118fa:	e7e9      	b.n	80118d0 <_realloc_r+0x1c>
 80118fc:	4635      	mov	r5, r6
 80118fe:	e7e7      	b.n	80118d0 <_realloc_r+0x1c>

08011900 <__ssputs_r>:
 8011900:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011904:	688e      	ldr	r6, [r1, #8]
 8011906:	4682      	mov	sl, r0
 8011908:	429e      	cmp	r6, r3
 801190a:	460c      	mov	r4, r1
 801190c:	4690      	mov	r8, r2
 801190e:	461f      	mov	r7, r3
 8011910:	d838      	bhi.n	8011984 <__ssputs_r+0x84>
 8011912:	898a      	ldrh	r2, [r1, #12]
 8011914:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8011918:	d032      	beq.n	8011980 <__ssputs_r+0x80>
 801191a:	6825      	ldr	r5, [r4, #0]
 801191c:	6909      	ldr	r1, [r1, #16]
 801191e:	3301      	adds	r3, #1
 8011920:	eba5 0901 	sub.w	r9, r5, r1
 8011924:	6965      	ldr	r5, [r4, #20]
 8011926:	444b      	add	r3, r9
 8011928:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801192c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8011930:	106d      	asrs	r5, r5, #1
 8011932:	429d      	cmp	r5, r3
 8011934:	bf38      	it	cc
 8011936:	461d      	movcc	r5, r3
 8011938:	0553      	lsls	r3, r2, #21
 801193a:	d531      	bpl.n	80119a0 <__ssputs_r+0xa0>
 801193c:	4629      	mov	r1, r5
 801193e:	f7fe f88f 	bl	800fa60 <_malloc_r>
 8011942:	4606      	mov	r6, r0
 8011944:	b950      	cbnz	r0, 801195c <__ssputs_r+0x5c>
 8011946:	230c      	movs	r3, #12
 8011948:	f04f 30ff 	mov.w	r0, #4294967295
 801194c:	f8ca 3000 	str.w	r3, [sl]
 8011950:	89a3      	ldrh	r3, [r4, #12]
 8011952:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011956:	81a3      	strh	r3, [r4, #12]
 8011958:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801195c:	464a      	mov	r2, r9
 801195e:	6921      	ldr	r1, [r4, #16]
 8011960:	f7ff fbfe 	bl	8011160 <memcpy>
 8011964:	89a3      	ldrh	r3, [r4, #12]
 8011966:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801196a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801196e:	81a3      	strh	r3, [r4, #12]
 8011970:	6126      	str	r6, [r4, #16]
 8011972:	444e      	add	r6, r9
 8011974:	6026      	str	r6, [r4, #0]
 8011976:	463e      	mov	r6, r7
 8011978:	6165      	str	r5, [r4, #20]
 801197a:	eba5 0509 	sub.w	r5, r5, r9
 801197e:	60a5      	str	r5, [r4, #8]
 8011980:	42be      	cmp	r6, r7
 8011982:	d900      	bls.n	8011986 <__ssputs_r+0x86>
 8011984:	463e      	mov	r6, r7
 8011986:	4632      	mov	r2, r6
 8011988:	4641      	mov	r1, r8
 801198a:	6820      	ldr	r0, [r4, #0]
 801198c:	f000 f959 	bl	8011c42 <memmove>
 8011990:	68a3      	ldr	r3, [r4, #8]
 8011992:	6822      	ldr	r2, [r4, #0]
 8011994:	1b9b      	subs	r3, r3, r6
 8011996:	4432      	add	r2, r6
 8011998:	2000      	movs	r0, #0
 801199a:	60a3      	str	r3, [r4, #8]
 801199c:	6022      	str	r2, [r4, #0]
 801199e:	e7db      	b.n	8011958 <__ssputs_r+0x58>
 80119a0:	462a      	mov	r2, r5
 80119a2:	f7ff ff87 	bl	80118b4 <_realloc_r>
 80119a6:	4606      	mov	r6, r0
 80119a8:	2800      	cmp	r0, #0
 80119aa:	d1e1      	bne.n	8011970 <__ssputs_r+0x70>
 80119ac:	4650      	mov	r0, sl
 80119ae:	6921      	ldr	r1, [r4, #16]
 80119b0:	f7fe f80a 	bl	800f9c8 <_free_r>
 80119b4:	e7c7      	b.n	8011946 <__ssputs_r+0x46>
	...

080119b8 <_svfiprintf_r>:
 80119b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80119bc:	4698      	mov	r8, r3
 80119be:	898b      	ldrh	r3, [r1, #12]
 80119c0:	4607      	mov	r7, r0
 80119c2:	061b      	lsls	r3, r3, #24
 80119c4:	460d      	mov	r5, r1
 80119c6:	4614      	mov	r4, r2
 80119c8:	b09d      	sub	sp, #116	; 0x74
 80119ca:	d50e      	bpl.n	80119ea <_svfiprintf_r+0x32>
 80119cc:	690b      	ldr	r3, [r1, #16]
 80119ce:	b963      	cbnz	r3, 80119ea <_svfiprintf_r+0x32>
 80119d0:	2140      	movs	r1, #64	; 0x40
 80119d2:	f7fe f845 	bl	800fa60 <_malloc_r>
 80119d6:	6028      	str	r0, [r5, #0]
 80119d8:	6128      	str	r0, [r5, #16]
 80119da:	b920      	cbnz	r0, 80119e6 <_svfiprintf_r+0x2e>
 80119dc:	230c      	movs	r3, #12
 80119de:	603b      	str	r3, [r7, #0]
 80119e0:	f04f 30ff 	mov.w	r0, #4294967295
 80119e4:	e0d1      	b.n	8011b8a <_svfiprintf_r+0x1d2>
 80119e6:	2340      	movs	r3, #64	; 0x40
 80119e8:	616b      	str	r3, [r5, #20]
 80119ea:	2300      	movs	r3, #0
 80119ec:	9309      	str	r3, [sp, #36]	; 0x24
 80119ee:	2320      	movs	r3, #32
 80119f0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80119f4:	2330      	movs	r3, #48	; 0x30
 80119f6:	f04f 0901 	mov.w	r9, #1
 80119fa:	f8cd 800c 	str.w	r8, [sp, #12]
 80119fe:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8011ba4 <_svfiprintf_r+0x1ec>
 8011a02:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8011a06:	4623      	mov	r3, r4
 8011a08:	469a      	mov	sl, r3
 8011a0a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011a0e:	b10a      	cbz	r2, 8011a14 <_svfiprintf_r+0x5c>
 8011a10:	2a25      	cmp	r2, #37	; 0x25
 8011a12:	d1f9      	bne.n	8011a08 <_svfiprintf_r+0x50>
 8011a14:	ebba 0b04 	subs.w	fp, sl, r4
 8011a18:	d00b      	beq.n	8011a32 <_svfiprintf_r+0x7a>
 8011a1a:	465b      	mov	r3, fp
 8011a1c:	4622      	mov	r2, r4
 8011a1e:	4629      	mov	r1, r5
 8011a20:	4638      	mov	r0, r7
 8011a22:	f7ff ff6d 	bl	8011900 <__ssputs_r>
 8011a26:	3001      	adds	r0, #1
 8011a28:	f000 80aa 	beq.w	8011b80 <_svfiprintf_r+0x1c8>
 8011a2c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011a2e:	445a      	add	r2, fp
 8011a30:	9209      	str	r2, [sp, #36]	; 0x24
 8011a32:	f89a 3000 	ldrb.w	r3, [sl]
 8011a36:	2b00      	cmp	r3, #0
 8011a38:	f000 80a2 	beq.w	8011b80 <_svfiprintf_r+0x1c8>
 8011a3c:	2300      	movs	r3, #0
 8011a3e:	f04f 32ff 	mov.w	r2, #4294967295
 8011a42:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011a46:	f10a 0a01 	add.w	sl, sl, #1
 8011a4a:	9304      	str	r3, [sp, #16]
 8011a4c:	9307      	str	r3, [sp, #28]
 8011a4e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8011a52:	931a      	str	r3, [sp, #104]	; 0x68
 8011a54:	4654      	mov	r4, sl
 8011a56:	2205      	movs	r2, #5
 8011a58:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011a5c:	4851      	ldr	r0, [pc, #324]	; (8011ba4 <_svfiprintf_r+0x1ec>)
 8011a5e:	f7ff fb71 	bl	8011144 <memchr>
 8011a62:	9a04      	ldr	r2, [sp, #16]
 8011a64:	b9d8      	cbnz	r0, 8011a9e <_svfiprintf_r+0xe6>
 8011a66:	06d0      	lsls	r0, r2, #27
 8011a68:	bf44      	itt	mi
 8011a6a:	2320      	movmi	r3, #32
 8011a6c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011a70:	0711      	lsls	r1, r2, #28
 8011a72:	bf44      	itt	mi
 8011a74:	232b      	movmi	r3, #43	; 0x2b
 8011a76:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011a7a:	f89a 3000 	ldrb.w	r3, [sl]
 8011a7e:	2b2a      	cmp	r3, #42	; 0x2a
 8011a80:	d015      	beq.n	8011aae <_svfiprintf_r+0xf6>
 8011a82:	4654      	mov	r4, sl
 8011a84:	2000      	movs	r0, #0
 8011a86:	f04f 0c0a 	mov.w	ip, #10
 8011a8a:	9a07      	ldr	r2, [sp, #28]
 8011a8c:	4621      	mov	r1, r4
 8011a8e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011a92:	3b30      	subs	r3, #48	; 0x30
 8011a94:	2b09      	cmp	r3, #9
 8011a96:	d94e      	bls.n	8011b36 <_svfiprintf_r+0x17e>
 8011a98:	b1b0      	cbz	r0, 8011ac8 <_svfiprintf_r+0x110>
 8011a9a:	9207      	str	r2, [sp, #28]
 8011a9c:	e014      	b.n	8011ac8 <_svfiprintf_r+0x110>
 8011a9e:	eba0 0308 	sub.w	r3, r0, r8
 8011aa2:	fa09 f303 	lsl.w	r3, r9, r3
 8011aa6:	4313      	orrs	r3, r2
 8011aa8:	46a2      	mov	sl, r4
 8011aaa:	9304      	str	r3, [sp, #16]
 8011aac:	e7d2      	b.n	8011a54 <_svfiprintf_r+0x9c>
 8011aae:	9b03      	ldr	r3, [sp, #12]
 8011ab0:	1d19      	adds	r1, r3, #4
 8011ab2:	681b      	ldr	r3, [r3, #0]
 8011ab4:	9103      	str	r1, [sp, #12]
 8011ab6:	2b00      	cmp	r3, #0
 8011ab8:	bfbb      	ittet	lt
 8011aba:	425b      	neglt	r3, r3
 8011abc:	f042 0202 	orrlt.w	r2, r2, #2
 8011ac0:	9307      	strge	r3, [sp, #28]
 8011ac2:	9307      	strlt	r3, [sp, #28]
 8011ac4:	bfb8      	it	lt
 8011ac6:	9204      	strlt	r2, [sp, #16]
 8011ac8:	7823      	ldrb	r3, [r4, #0]
 8011aca:	2b2e      	cmp	r3, #46	; 0x2e
 8011acc:	d10c      	bne.n	8011ae8 <_svfiprintf_r+0x130>
 8011ace:	7863      	ldrb	r3, [r4, #1]
 8011ad0:	2b2a      	cmp	r3, #42	; 0x2a
 8011ad2:	d135      	bne.n	8011b40 <_svfiprintf_r+0x188>
 8011ad4:	9b03      	ldr	r3, [sp, #12]
 8011ad6:	3402      	adds	r4, #2
 8011ad8:	1d1a      	adds	r2, r3, #4
 8011ada:	681b      	ldr	r3, [r3, #0]
 8011adc:	9203      	str	r2, [sp, #12]
 8011ade:	2b00      	cmp	r3, #0
 8011ae0:	bfb8      	it	lt
 8011ae2:	f04f 33ff 	movlt.w	r3, #4294967295
 8011ae6:	9305      	str	r3, [sp, #20]
 8011ae8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8011bb4 <_svfiprintf_r+0x1fc>
 8011aec:	2203      	movs	r2, #3
 8011aee:	4650      	mov	r0, sl
 8011af0:	7821      	ldrb	r1, [r4, #0]
 8011af2:	f7ff fb27 	bl	8011144 <memchr>
 8011af6:	b140      	cbz	r0, 8011b0a <_svfiprintf_r+0x152>
 8011af8:	2340      	movs	r3, #64	; 0x40
 8011afa:	eba0 000a 	sub.w	r0, r0, sl
 8011afe:	fa03 f000 	lsl.w	r0, r3, r0
 8011b02:	9b04      	ldr	r3, [sp, #16]
 8011b04:	3401      	adds	r4, #1
 8011b06:	4303      	orrs	r3, r0
 8011b08:	9304      	str	r3, [sp, #16]
 8011b0a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011b0e:	2206      	movs	r2, #6
 8011b10:	4825      	ldr	r0, [pc, #148]	; (8011ba8 <_svfiprintf_r+0x1f0>)
 8011b12:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8011b16:	f7ff fb15 	bl	8011144 <memchr>
 8011b1a:	2800      	cmp	r0, #0
 8011b1c:	d038      	beq.n	8011b90 <_svfiprintf_r+0x1d8>
 8011b1e:	4b23      	ldr	r3, [pc, #140]	; (8011bac <_svfiprintf_r+0x1f4>)
 8011b20:	bb1b      	cbnz	r3, 8011b6a <_svfiprintf_r+0x1b2>
 8011b22:	9b03      	ldr	r3, [sp, #12]
 8011b24:	3307      	adds	r3, #7
 8011b26:	f023 0307 	bic.w	r3, r3, #7
 8011b2a:	3308      	adds	r3, #8
 8011b2c:	9303      	str	r3, [sp, #12]
 8011b2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011b30:	4433      	add	r3, r6
 8011b32:	9309      	str	r3, [sp, #36]	; 0x24
 8011b34:	e767      	b.n	8011a06 <_svfiprintf_r+0x4e>
 8011b36:	460c      	mov	r4, r1
 8011b38:	2001      	movs	r0, #1
 8011b3a:	fb0c 3202 	mla	r2, ip, r2, r3
 8011b3e:	e7a5      	b.n	8011a8c <_svfiprintf_r+0xd4>
 8011b40:	2300      	movs	r3, #0
 8011b42:	f04f 0c0a 	mov.w	ip, #10
 8011b46:	4619      	mov	r1, r3
 8011b48:	3401      	adds	r4, #1
 8011b4a:	9305      	str	r3, [sp, #20]
 8011b4c:	4620      	mov	r0, r4
 8011b4e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011b52:	3a30      	subs	r2, #48	; 0x30
 8011b54:	2a09      	cmp	r2, #9
 8011b56:	d903      	bls.n	8011b60 <_svfiprintf_r+0x1a8>
 8011b58:	2b00      	cmp	r3, #0
 8011b5a:	d0c5      	beq.n	8011ae8 <_svfiprintf_r+0x130>
 8011b5c:	9105      	str	r1, [sp, #20]
 8011b5e:	e7c3      	b.n	8011ae8 <_svfiprintf_r+0x130>
 8011b60:	4604      	mov	r4, r0
 8011b62:	2301      	movs	r3, #1
 8011b64:	fb0c 2101 	mla	r1, ip, r1, r2
 8011b68:	e7f0      	b.n	8011b4c <_svfiprintf_r+0x194>
 8011b6a:	ab03      	add	r3, sp, #12
 8011b6c:	9300      	str	r3, [sp, #0]
 8011b6e:	462a      	mov	r2, r5
 8011b70:	4638      	mov	r0, r7
 8011b72:	4b0f      	ldr	r3, [pc, #60]	; (8011bb0 <_svfiprintf_r+0x1f8>)
 8011b74:	a904      	add	r1, sp, #16
 8011b76:	f7fe f86b 	bl	800fc50 <_printf_float>
 8011b7a:	1c42      	adds	r2, r0, #1
 8011b7c:	4606      	mov	r6, r0
 8011b7e:	d1d6      	bne.n	8011b2e <_svfiprintf_r+0x176>
 8011b80:	89ab      	ldrh	r3, [r5, #12]
 8011b82:	065b      	lsls	r3, r3, #25
 8011b84:	f53f af2c 	bmi.w	80119e0 <_svfiprintf_r+0x28>
 8011b88:	9809      	ldr	r0, [sp, #36]	; 0x24
 8011b8a:	b01d      	add	sp, #116	; 0x74
 8011b8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011b90:	ab03      	add	r3, sp, #12
 8011b92:	9300      	str	r3, [sp, #0]
 8011b94:	462a      	mov	r2, r5
 8011b96:	4638      	mov	r0, r7
 8011b98:	4b05      	ldr	r3, [pc, #20]	; (8011bb0 <_svfiprintf_r+0x1f8>)
 8011b9a:	a904      	add	r1, sp, #16
 8011b9c:	f7fe faf4 	bl	8010188 <_printf_i>
 8011ba0:	e7eb      	b.n	8011b7a <_svfiprintf_r+0x1c2>
 8011ba2:	bf00      	nop
 8011ba4:	0801381c 	.word	0x0801381c
 8011ba8:	08013826 	.word	0x08013826
 8011bac:	0800fc51 	.word	0x0800fc51
 8011bb0:	08011901 	.word	0x08011901
 8011bb4:	08013822 	.word	0x08013822

08011bb8 <__assert_func>:
 8011bb8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8011bba:	4614      	mov	r4, r2
 8011bbc:	461a      	mov	r2, r3
 8011bbe:	4b09      	ldr	r3, [pc, #36]	; (8011be4 <__assert_func+0x2c>)
 8011bc0:	4605      	mov	r5, r0
 8011bc2:	681b      	ldr	r3, [r3, #0]
 8011bc4:	68d8      	ldr	r0, [r3, #12]
 8011bc6:	b14c      	cbz	r4, 8011bdc <__assert_func+0x24>
 8011bc8:	4b07      	ldr	r3, [pc, #28]	; (8011be8 <__assert_func+0x30>)
 8011bca:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8011bce:	9100      	str	r1, [sp, #0]
 8011bd0:	462b      	mov	r3, r5
 8011bd2:	4906      	ldr	r1, [pc, #24]	; (8011bec <__assert_func+0x34>)
 8011bd4:	f000 f80e 	bl	8011bf4 <fiprintf>
 8011bd8:	f000 fa7a 	bl	80120d0 <abort>
 8011bdc:	4b04      	ldr	r3, [pc, #16]	; (8011bf0 <__assert_func+0x38>)
 8011bde:	461c      	mov	r4, r3
 8011be0:	e7f3      	b.n	8011bca <__assert_func+0x12>
 8011be2:	bf00      	nop
 8011be4:	200001a8 	.word	0x200001a8
 8011be8:	0801382d 	.word	0x0801382d
 8011bec:	0801383a 	.word	0x0801383a
 8011bf0:	08013868 	.word	0x08013868

08011bf4 <fiprintf>:
 8011bf4:	b40e      	push	{r1, r2, r3}
 8011bf6:	b503      	push	{r0, r1, lr}
 8011bf8:	4601      	mov	r1, r0
 8011bfa:	ab03      	add	r3, sp, #12
 8011bfc:	4805      	ldr	r0, [pc, #20]	; (8011c14 <fiprintf+0x20>)
 8011bfe:	f853 2b04 	ldr.w	r2, [r3], #4
 8011c02:	6800      	ldr	r0, [r0, #0]
 8011c04:	9301      	str	r3, [sp, #4]
 8011c06:	f000 f865 	bl	8011cd4 <_vfiprintf_r>
 8011c0a:	b002      	add	sp, #8
 8011c0c:	f85d eb04 	ldr.w	lr, [sp], #4
 8011c10:	b003      	add	sp, #12
 8011c12:	4770      	bx	lr
 8011c14:	200001a8 	.word	0x200001a8

08011c18 <__retarget_lock_init_recursive>:
 8011c18:	4770      	bx	lr

08011c1a <__retarget_lock_acquire_recursive>:
 8011c1a:	4770      	bx	lr

08011c1c <__retarget_lock_release_recursive>:
 8011c1c:	4770      	bx	lr

08011c1e <__ascii_mbtowc>:
 8011c1e:	b082      	sub	sp, #8
 8011c20:	b901      	cbnz	r1, 8011c24 <__ascii_mbtowc+0x6>
 8011c22:	a901      	add	r1, sp, #4
 8011c24:	b142      	cbz	r2, 8011c38 <__ascii_mbtowc+0x1a>
 8011c26:	b14b      	cbz	r3, 8011c3c <__ascii_mbtowc+0x1e>
 8011c28:	7813      	ldrb	r3, [r2, #0]
 8011c2a:	600b      	str	r3, [r1, #0]
 8011c2c:	7812      	ldrb	r2, [r2, #0]
 8011c2e:	1e10      	subs	r0, r2, #0
 8011c30:	bf18      	it	ne
 8011c32:	2001      	movne	r0, #1
 8011c34:	b002      	add	sp, #8
 8011c36:	4770      	bx	lr
 8011c38:	4610      	mov	r0, r2
 8011c3a:	e7fb      	b.n	8011c34 <__ascii_mbtowc+0x16>
 8011c3c:	f06f 0001 	mvn.w	r0, #1
 8011c40:	e7f8      	b.n	8011c34 <__ascii_mbtowc+0x16>

08011c42 <memmove>:
 8011c42:	4288      	cmp	r0, r1
 8011c44:	b510      	push	{r4, lr}
 8011c46:	eb01 0402 	add.w	r4, r1, r2
 8011c4a:	d902      	bls.n	8011c52 <memmove+0x10>
 8011c4c:	4284      	cmp	r4, r0
 8011c4e:	4623      	mov	r3, r4
 8011c50:	d807      	bhi.n	8011c62 <memmove+0x20>
 8011c52:	1e43      	subs	r3, r0, #1
 8011c54:	42a1      	cmp	r1, r4
 8011c56:	d008      	beq.n	8011c6a <memmove+0x28>
 8011c58:	f811 2b01 	ldrb.w	r2, [r1], #1
 8011c5c:	f803 2f01 	strb.w	r2, [r3, #1]!
 8011c60:	e7f8      	b.n	8011c54 <memmove+0x12>
 8011c62:	4601      	mov	r1, r0
 8011c64:	4402      	add	r2, r0
 8011c66:	428a      	cmp	r2, r1
 8011c68:	d100      	bne.n	8011c6c <memmove+0x2a>
 8011c6a:	bd10      	pop	{r4, pc}
 8011c6c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8011c70:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8011c74:	e7f7      	b.n	8011c66 <memmove+0x24>

08011c76 <_malloc_usable_size_r>:
 8011c76:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011c7a:	1f18      	subs	r0, r3, #4
 8011c7c:	2b00      	cmp	r3, #0
 8011c7e:	bfbc      	itt	lt
 8011c80:	580b      	ldrlt	r3, [r1, r0]
 8011c82:	18c0      	addlt	r0, r0, r3
 8011c84:	4770      	bx	lr

08011c86 <__sfputc_r>:
 8011c86:	6893      	ldr	r3, [r2, #8]
 8011c88:	b410      	push	{r4}
 8011c8a:	3b01      	subs	r3, #1
 8011c8c:	2b00      	cmp	r3, #0
 8011c8e:	6093      	str	r3, [r2, #8]
 8011c90:	da07      	bge.n	8011ca2 <__sfputc_r+0x1c>
 8011c92:	6994      	ldr	r4, [r2, #24]
 8011c94:	42a3      	cmp	r3, r4
 8011c96:	db01      	blt.n	8011c9c <__sfputc_r+0x16>
 8011c98:	290a      	cmp	r1, #10
 8011c9a:	d102      	bne.n	8011ca2 <__sfputc_r+0x1c>
 8011c9c:	bc10      	pop	{r4}
 8011c9e:	f000 b949 	b.w	8011f34 <__swbuf_r>
 8011ca2:	6813      	ldr	r3, [r2, #0]
 8011ca4:	1c58      	adds	r0, r3, #1
 8011ca6:	6010      	str	r0, [r2, #0]
 8011ca8:	7019      	strb	r1, [r3, #0]
 8011caa:	4608      	mov	r0, r1
 8011cac:	bc10      	pop	{r4}
 8011cae:	4770      	bx	lr

08011cb0 <__sfputs_r>:
 8011cb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011cb2:	4606      	mov	r6, r0
 8011cb4:	460f      	mov	r7, r1
 8011cb6:	4614      	mov	r4, r2
 8011cb8:	18d5      	adds	r5, r2, r3
 8011cba:	42ac      	cmp	r4, r5
 8011cbc:	d101      	bne.n	8011cc2 <__sfputs_r+0x12>
 8011cbe:	2000      	movs	r0, #0
 8011cc0:	e007      	b.n	8011cd2 <__sfputs_r+0x22>
 8011cc2:	463a      	mov	r2, r7
 8011cc4:	4630      	mov	r0, r6
 8011cc6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011cca:	f7ff ffdc 	bl	8011c86 <__sfputc_r>
 8011cce:	1c43      	adds	r3, r0, #1
 8011cd0:	d1f3      	bne.n	8011cba <__sfputs_r+0xa>
 8011cd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08011cd4 <_vfiprintf_r>:
 8011cd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011cd8:	460d      	mov	r5, r1
 8011cda:	4614      	mov	r4, r2
 8011cdc:	4698      	mov	r8, r3
 8011cde:	4606      	mov	r6, r0
 8011ce0:	b09d      	sub	sp, #116	; 0x74
 8011ce2:	b118      	cbz	r0, 8011cec <_vfiprintf_r+0x18>
 8011ce4:	6983      	ldr	r3, [r0, #24]
 8011ce6:	b90b      	cbnz	r3, 8011cec <_vfiprintf_r+0x18>
 8011ce8:	f000 fb14 	bl	8012314 <__sinit>
 8011cec:	4b89      	ldr	r3, [pc, #548]	; (8011f14 <_vfiprintf_r+0x240>)
 8011cee:	429d      	cmp	r5, r3
 8011cf0:	d11b      	bne.n	8011d2a <_vfiprintf_r+0x56>
 8011cf2:	6875      	ldr	r5, [r6, #4]
 8011cf4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011cf6:	07d9      	lsls	r1, r3, #31
 8011cf8:	d405      	bmi.n	8011d06 <_vfiprintf_r+0x32>
 8011cfa:	89ab      	ldrh	r3, [r5, #12]
 8011cfc:	059a      	lsls	r2, r3, #22
 8011cfe:	d402      	bmi.n	8011d06 <_vfiprintf_r+0x32>
 8011d00:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011d02:	f7ff ff8a 	bl	8011c1a <__retarget_lock_acquire_recursive>
 8011d06:	89ab      	ldrh	r3, [r5, #12]
 8011d08:	071b      	lsls	r3, r3, #28
 8011d0a:	d501      	bpl.n	8011d10 <_vfiprintf_r+0x3c>
 8011d0c:	692b      	ldr	r3, [r5, #16]
 8011d0e:	b9eb      	cbnz	r3, 8011d4c <_vfiprintf_r+0x78>
 8011d10:	4629      	mov	r1, r5
 8011d12:	4630      	mov	r0, r6
 8011d14:	f000 f96e 	bl	8011ff4 <__swsetup_r>
 8011d18:	b1c0      	cbz	r0, 8011d4c <_vfiprintf_r+0x78>
 8011d1a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011d1c:	07dc      	lsls	r4, r3, #31
 8011d1e:	d50e      	bpl.n	8011d3e <_vfiprintf_r+0x6a>
 8011d20:	f04f 30ff 	mov.w	r0, #4294967295
 8011d24:	b01d      	add	sp, #116	; 0x74
 8011d26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011d2a:	4b7b      	ldr	r3, [pc, #492]	; (8011f18 <_vfiprintf_r+0x244>)
 8011d2c:	429d      	cmp	r5, r3
 8011d2e:	d101      	bne.n	8011d34 <_vfiprintf_r+0x60>
 8011d30:	68b5      	ldr	r5, [r6, #8]
 8011d32:	e7df      	b.n	8011cf4 <_vfiprintf_r+0x20>
 8011d34:	4b79      	ldr	r3, [pc, #484]	; (8011f1c <_vfiprintf_r+0x248>)
 8011d36:	429d      	cmp	r5, r3
 8011d38:	bf08      	it	eq
 8011d3a:	68f5      	ldreq	r5, [r6, #12]
 8011d3c:	e7da      	b.n	8011cf4 <_vfiprintf_r+0x20>
 8011d3e:	89ab      	ldrh	r3, [r5, #12]
 8011d40:	0598      	lsls	r0, r3, #22
 8011d42:	d4ed      	bmi.n	8011d20 <_vfiprintf_r+0x4c>
 8011d44:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011d46:	f7ff ff69 	bl	8011c1c <__retarget_lock_release_recursive>
 8011d4a:	e7e9      	b.n	8011d20 <_vfiprintf_r+0x4c>
 8011d4c:	2300      	movs	r3, #0
 8011d4e:	9309      	str	r3, [sp, #36]	; 0x24
 8011d50:	2320      	movs	r3, #32
 8011d52:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8011d56:	2330      	movs	r3, #48	; 0x30
 8011d58:	f04f 0901 	mov.w	r9, #1
 8011d5c:	f8cd 800c 	str.w	r8, [sp, #12]
 8011d60:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8011f20 <_vfiprintf_r+0x24c>
 8011d64:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8011d68:	4623      	mov	r3, r4
 8011d6a:	469a      	mov	sl, r3
 8011d6c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011d70:	b10a      	cbz	r2, 8011d76 <_vfiprintf_r+0xa2>
 8011d72:	2a25      	cmp	r2, #37	; 0x25
 8011d74:	d1f9      	bne.n	8011d6a <_vfiprintf_r+0x96>
 8011d76:	ebba 0b04 	subs.w	fp, sl, r4
 8011d7a:	d00b      	beq.n	8011d94 <_vfiprintf_r+0xc0>
 8011d7c:	465b      	mov	r3, fp
 8011d7e:	4622      	mov	r2, r4
 8011d80:	4629      	mov	r1, r5
 8011d82:	4630      	mov	r0, r6
 8011d84:	f7ff ff94 	bl	8011cb0 <__sfputs_r>
 8011d88:	3001      	adds	r0, #1
 8011d8a:	f000 80aa 	beq.w	8011ee2 <_vfiprintf_r+0x20e>
 8011d8e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011d90:	445a      	add	r2, fp
 8011d92:	9209      	str	r2, [sp, #36]	; 0x24
 8011d94:	f89a 3000 	ldrb.w	r3, [sl]
 8011d98:	2b00      	cmp	r3, #0
 8011d9a:	f000 80a2 	beq.w	8011ee2 <_vfiprintf_r+0x20e>
 8011d9e:	2300      	movs	r3, #0
 8011da0:	f04f 32ff 	mov.w	r2, #4294967295
 8011da4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011da8:	f10a 0a01 	add.w	sl, sl, #1
 8011dac:	9304      	str	r3, [sp, #16]
 8011dae:	9307      	str	r3, [sp, #28]
 8011db0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8011db4:	931a      	str	r3, [sp, #104]	; 0x68
 8011db6:	4654      	mov	r4, sl
 8011db8:	2205      	movs	r2, #5
 8011dba:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011dbe:	4858      	ldr	r0, [pc, #352]	; (8011f20 <_vfiprintf_r+0x24c>)
 8011dc0:	f7ff f9c0 	bl	8011144 <memchr>
 8011dc4:	9a04      	ldr	r2, [sp, #16]
 8011dc6:	b9d8      	cbnz	r0, 8011e00 <_vfiprintf_r+0x12c>
 8011dc8:	06d1      	lsls	r1, r2, #27
 8011dca:	bf44      	itt	mi
 8011dcc:	2320      	movmi	r3, #32
 8011dce:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011dd2:	0713      	lsls	r3, r2, #28
 8011dd4:	bf44      	itt	mi
 8011dd6:	232b      	movmi	r3, #43	; 0x2b
 8011dd8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011ddc:	f89a 3000 	ldrb.w	r3, [sl]
 8011de0:	2b2a      	cmp	r3, #42	; 0x2a
 8011de2:	d015      	beq.n	8011e10 <_vfiprintf_r+0x13c>
 8011de4:	4654      	mov	r4, sl
 8011de6:	2000      	movs	r0, #0
 8011de8:	f04f 0c0a 	mov.w	ip, #10
 8011dec:	9a07      	ldr	r2, [sp, #28]
 8011dee:	4621      	mov	r1, r4
 8011df0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011df4:	3b30      	subs	r3, #48	; 0x30
 8011df6:	2b09      	cmp	r3, #9
 8011df8:	d94e      	bls.n	8011e98 <_vfiprintf_r+0x1c4>
 8011dfa:	b1b0      	cbz	r0, 8011e2a <_vfiprintf_r+0x156>
 8011dfc:	9207      	str	r2, [sp, #28]
 8011dfe:	e014      	b.n	8011e2a <_vfiprintf_r+0x156>
 8011e00:	eba0 0308 	sub.w	r3, r0, r8
 8011e04:	fa09 f303 	lsl.w	r3, r9, r3
 8011e08:	4313      	orrs	r3, r2
 8011e0a:	46a2      	mov	sl, r4
 8011e0c:	9304      	str	r3, [sp, #16]
 8011e0e:	e7d2      	b.n	8011db6 <_vfiprintf_r+0xe2>
 8011e10:	9b03      	ldr	r3, [sp, #12]
 8011e12:	1d19      	adds	r1, r3, #4
 8011e14:	681b      	ldr	r3, [r3, #0]
 8011e16:	9103      	str	r1, [sp, #12]
 8011e18:	2b00      	cmp	r3, #0
 8011e1a:	bfbb      	ittet	lt
 8011e1c:	425b      	neglt	r3, r3
 8011e1e:	f042 0202 	orrlt.w	r2, r2, #2
 8011e22:	9307      	strge	r3, [sp, #28]
 8011e24:	9307      	strlt	r3, [sp, #28]
 8011e26:	bfb8      	it	lt
 8011e28:	9204      	strlt	r2, [sp, #16]
 8011e2a:	7823      	ldrb	r3, [r4, #0]
 8011e2c:	2b2e      	cmp	r3, #46	; 0x2e
 8011e2e:	d10c      	bne.n	8011e4a <_vfiprintf_r+0x176>
 8011e30:	7863      	ldrb	r3, [r4, #1]
 8011e32:	2b2a      	cmp	r3, #42	; 0x2a
 8011e34:	d135      	bne.n	8011ea2 <_vfiprintf_r+0x1ce>
 8011e36:	9b03      	ldr	r3, [sp, #12]
 8011e38:	3402      	adds	r4, #2
 8011e3a:	1d1a      	adds	r2, r3, #4
 8011e3c:	681b      	ldr	r3, [r3, #0]
 8011e3e:	9203      	str	r2, [sp, #12]
 8011e40:	2b00      	cmp	r3, #0
 8011e42:	bfb8      	it	lt
 8011e44:	f04f 33ff 	movlt.w	r3, #4294967295
 8011e48:	9305      	str	r3, [sp, #20]
 8011e4a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8011f30 <_vfiprintf_r+0x25c>
 8011e4e:	2203      	movs	r2, #3
 8011e50:	4650      	mov	r0, sl
 8011e52:	7821      	ldrb	r1, [r4, #0]
 8011e54:	f7ff f976 	bl	8011144 <memchr>
 8011e58:	b140      	cbz	r0, 8011e6c <_vfiprintf_r+0x198>
 8011e5a:	2340      	movs	r3, #64	; 0x40
 8011e5c:	eba0 000a 	sub.w	r0, r0, sl
 8011e60:	fa03 f000 	lsl.w	r0, r3, r0
 8011e64:	9b04      	ldr	r3, [sp, #16]
 8011e66:	3401      	adds	r4, #1
 8011e68:	4303      	orrs	r3, r0
 8011e6a:	9304      	str	r3, [sp, #16]
 8011e6c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011e70:	2206      	movs	r2, #6
 8011e72:	482c      	ldr	r0, [pc, #176]	; (8011f24 <_vfiprintf_r+0x250>)
 8011e74:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8011e78:	f7ff f964 	bl	8011144 <memchr>
 8011e7c:	2800      	cmp	r0, #0
 8011e7e:	d03f      	beq.n	8011f00 <_vfiprintf_r+0x22c>
 8011e80:	4b29      	ldr	r3, [pc, #164]	; (8011f28 <_vfiprintf_r+0x254>)
 8011e82:	bb1b      	cbnz	r3, 8011ecc <_vfiprintf_r+0x1f8>
 8011e84:	9b03      	ldr	r3, [sp, #12]
 8011e86:	3307      	adds	r3, #7
 8011e88:	f023 0307 	bic.w	r3, r3, #7
 8011e8c:	3308      	adds	r3, #8
 8011e8e:	9303      	str	r3, [sp, #12]
 8011e90:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011e92:	443b      	add	r3, r7
 8011e94:	9309      	str	r3, [sp, #36]	; 0x24
 8011e96:	e767      	b.n	8011d68 <_vfiprintf_r+0x94>
 8011e98:	460c      	mov	r4, r1
 8011e9a:	2001      	movs	r0, #1
 8011e9c:	fb0c 3202 	mla	r2, ip, r2, r3
 8011ea0:	e7a5      	b.n	8011dee <_vfiprintf_r+0x11a>
 8011ea2:	2300      	movs	r3, #0
 8011ea4:	f04f 0c0a 	mov.w	ip, #10
 8011ea8:	4619      	mov	r1, r3
 8011eaa:	3401      	adds	r4, #1
 8011eac:	9305      	str	r3, [sp, #20]
 8011eae:	4620      	mov	r0, r4
 8011eb0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011eb4:	3a30      	subs	r2, #48	; 0x30
 8011eb6:	2a09      	cmp	r2, #9
 8011eb8:	d903      	bls.n	8011ec2 <_vfiprintf_r+0x1ee>
 8011eba:	2b00      	cmp	r3, #0
 8011ebc:	d0c5      	beq.n	8011e4a <_vfiprintf_r+0x176>
 8011ebe:	9105      	str	r1, [sp, #20]
 8011ec0:	e7c3      	b.n	8011e4a <_vfiprintf_r+0x176>
 8011ec2:	4604      	mov	r4, r0
 8011ec4:	2301      	movs	r3, #1
 8011ec6:	fb0c 2101 	mla	r1, ip, r1, r2
 8011eca:	e7f0      	b.n	8011eae <_vfiprintf_r+0x1da>
 8011ecc:	ab03      	add	r3, sp, #12
 8011ece:	9300      	str	r3, [sp, #0]
 8011ed0:	462a      	mov	r2, r5
 8011ed2:	4630      	mov	r0, r6
 8011ed4:	4b15      	ldr	r3, [pc, #84]	; (8011f2c <_vfiprintf_r+0x258>)
 8011ed6:	a904      	add	r1, sp, #16
 8011ed8:	f7fd feba 	bl	800fc50 <_printf_float>
 8011edc:	4607      	mov	r7, r0
 8011ede:	1c78      	adds	r0, r7, #1
 8011ee0:	d1d6      	bne.n	8011e90 <_vfiprintf_r+0x1bc>
 8011ee2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011ee4:	07d9      	lsls	r1, r3, #31
 8011ee6:	d405      	bmi.n	8011ef4 <_vfiprintf_r+0x220>
 8011ee8:	89ab      	ldrh	r3, [r5, #12]
 8011eea:	059a      	lsls	r2, r3, #22
 8011eec:	d402      	bmi.n	8011ef4 <_vfiprintf_r+0x220>
 8011eee:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011ef0:	f7ff fe94 	bl	8011c1c <__retarget_lock_release_recursive>
 8011ef4:	89ab      	ldrh	r3, [r5, #12]
 8011ef6:	065b      	lsls	r3, r3, #25
 8011ef8:	f53f af12 	bmi.w	8011d20 <_vfiprintf_r+0x4c>
 8011efc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8011efe:	e711      	b.n	8011d24 <_vfiprintf_r+0x50>
 8011f00:	ab03      	add	r3, sp, #12
 8011f02:	9300      	str	r3, [sp, #0]
 8011f04:	462a      	mov	r2, r5
 8011f06:	4630      	mov	r0, r6
 8011f08:	4b08      	ldr	r3, [pc, #32]	; (8011f2c <_vfiprintf_r+0x258>)
 8011f0a:	a904      	add	r1, sp, #16
 8011f0c:	f7fe f93c 	bl	8010188 <_printf_i>
 8011f10:	e7e4      	b.n	8011edc <_vfiprintf_r+0x208>
 8011f12:	bf00      	nop
 8011f14:	08013994 	.word	0x08013994
 8011f18:	080139b4 	.word	0x080139b4
 8011f1c:	08013974 	.word	0x08013974
 8011f20:	0801381c 	.word	0x0801381c
 8011f24:	08013826 	.word	0x08013826
 8011f28:	0800fc51 	.word	0x0800fc51
 8011f2c:	08011cb1 	.word	0x08011cb1
 8011f30:	08013822 	.word	0x08013822

08011f34 <__swbuf_r>:
 8011f34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011f36:	460e      	mov	r6, r1
 8011f38:	4614      	mov	r4, r2
 8011f3a:	4605      	mov	r5, r0
 8011f3c:	b118      	cbz	r0, 8011f46 <__swbuf_r+0x12>
 8011f3e:	6983      	ldr	r3, [r0, #24]
 8011f40:	b90b      	cbnz	r3, 8011f46 <__swbuf_r+0x12>
 8011f42:	f000 f9e7 	bl	8012314 <__sinit>
 8011f46:	4b21      	ldr	r3, [pc, #132]	; (8011fcc <__swbuf_r+0x98>)
 8011f48:	429c      	cmp	r4, r3
 8011f4a:	d12b      	bne.n	8011fa4 <__swbuf_r+0x70>
 8011f4c:	686c      	ldr	r4, [r5, #4]
 8011f4e:	69a3      	ldr	r3, [r4, #24]
 8011f50:	60a3      	str	r3, [r4, #8]
 8011f52:	89a3      	ldrh	r3, [r4, #12]
 8011f54:	071a      	lsls	r2, r3, #28
 8011f56:	d52f      	bpl.n	8011fb8 <__swbuf_r+0x84>
 8011f58:	6923      	ldr	r3, [r4, #16]
 8011f5a:	b36b      	cbz	r3, 8011fb8 <__swbuf_r+0x84>
 8011f5c:	6923      	ldr	r3, [r4, #16]
 8011f5e:	6820      	ldr	r0, [r4, #0]
 8011f60:	b2f6      	uxtb	r6, r6
 8011f62:	1ac0      	subs	r0, r0, r3
 8011f64:	6963      	ldr	r3, [r4, #20]
 8011f66:	4637      	mov	r7, r6
 8011f68:	4283      	cmp	r3, r0
 8011f6a:	dc04      	bgt.n	8011f76 <__swbuf_r+0x42>
 8011f6c:	4621      	mov	r1, r4
 8011f6e:	4628      	mov	r0, r5
 8011f70:	f000 f93c 	bl	80121ec <_fflush_r>
 8011f74:	bb30      	cbnz	r0, 8011fc4 <__swbuf_r+0x90>
 8011f76:	68a3      	ldr	r3, [r4, #8]
 8011f78:	3001      	adds	r0, #1
 8011f7a:	3b01      	subs	r3, #1
 8011f7c:	60a3      	str	r3, [r4, #8]
 8011f7e:	6823      	ldr	r3, [r4, #0]
 8011f80:	1c5a      	adds	r2, r3, #1
 8011f82:	6022      	str	r2, [r4, #0]
 8011f84:	701e      	strb	r6, [r3, #0]
 8011f86:	6963      	ldr	r3, [r4, #20]
 8011f88:	4283      	cmp	r3, r0
 8011f8a:	d004      	beq.n	8011f96 <__swbuf_r+0x62>
 8011f8c:	89a3      	ldrh	r3, [r4, #12]
 8011f8e:	07db      	lsls	r3, r3, #31
 8011f90:	d506      	bpl.n	8011fa0 <__swbuf_r+0x6c>
 8011f92:	2e0a      	cmp	r6, #10
 8011f94:	d104      	bne.n	8011fa0 <__swbuf_r+0x6c>
 8011f96:	4621      	mov	r1, r4
 8011f98:	4628      	mov	r0, r5
 8011f9a:	f000 f927 	bl	80121ec <_fflush_r>
 8011f9e:	b988      	cbnz	r0, 8011fc4 <__swbuf_r+0x90>
 8011fa0:	4638      	mov	r0, r7
 8011fa2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011fa4:	4b0a      	ldr	r3, [pc, #40]	; (8011fd0 <__swbuf_r+0x9c>)
 8011fa6:	429c      	cmp	r4, r3
 8011fa8:	d101      	bne.n	8011fae <__swbuf_r+0x7a>
 8011faa:	68ac      	ldr	r4, [r5, #8]
 8011fac:	e7cf      	b.n	8011f4e <__swbuf_r+0x1a>
 8011fae:	4b09      	ldr	r3, [pc, #36]	; (8011fd4 <__swbuf_r+0xa0>)
 8011fb0:	429c      	cmp	r4, r3
 8011fb2:	bf08      	it	eq
 8011fb4:	68ec      	ldreq	r4, [r5, #12]
 8011fb6:	e7ca      	b.n	8011f4e <__swbuf_r+0x1a>
 8011fb8:	4621      	mov	r1, r4
 8011fba:	4628      	mov	r0, r5
 8011fbc:	f000 f81a 	bl	8011ff4 <__swsetup_r>
 8011fc0:	2800      	cmp	r0, #0
 8011fc2:	d0cb      	beq.n	8011f5c <__swbuf_r+0x28>
 8011fc4:	f04f 37ff 	mov.w	r7, #4294967295
 8011fc8:	e7ea      	b.n	8011fa0 <__swbuf_r+0x6c>
 8011fca:	bf00      	nop
 8011fcc:	08013994 	.word	0x08013994
 8011fd0:	080139b4 	.word	0x080139b4
 8011fd4:	08013974 	.word	0x08013974

08011fd8 <__ascii_wctomb>:
 8011fd8:	4603      	mov	r3, r0
 8011fda:	4608      	mov	r0, r1
 8011fdc:	b141      	cbz	r1, 8011ff0 <__ascii_wctomb+0x18>
 8011fde:	2aff      	cmp	r2, #255	; 0xff
 8011fe0:	d904      	bls.n	8011fec <__ascii_wctomb+0x14>
 8011fe2:	228a      	movs	r2, #138	; 0x8a
 8011fe4:	f04f 30ff 	mov.w	r0, #4294967295
 8011fe8:	601a      	str	r2, [r3, #0]
 8011fea:	4770      	bx	lr
 8011fec:	2001      	movs	r0, #1
 8011fee:	700a      	strb	r2, [r1, #0]
 8011ff0:	4770      	bx	lr
	...

08011ff4 <__swsetup_r>:
 8011ff4:	4b32      	ldr	r3, [pc, #200]	; (80120c0 <__swsetup_r+0xcc>)
 8011ff6:	b570      	push	{r4, r5, r6, lr}
 8011ff8:	681d      	ldr	r5, [r3, #0]
 8011ffa:	4606      	mov	r6, r0
 8011ffc:	460c      	mov	r4, r1
 8011ffe:	b125      	cbz	r5, 801200a <__swsetup_r+0x16>
 8012000:	69ab      	ldr	r3, [r5, #24]
 8012002:	b913      	cbnz	r3, 801200a <__swsetup_r+0x16>
 8012004:	4628      	mov	r0, r5
 8012006:	f000 f985 	bl	8012314 <__sinit>
 801200a:	4b2e      	ldr	r3, [pc, #184]	; (80120c4 <__swsetup_r+0xd0>)
 801200c:	429c      	cmp	r4, r3
 801200e:	d10f      	bne.n	8012030 <__swsetup_r+0x3c>
 8012010:	686c      	ldr	r4, [r5, #4]
 8012012:	89a3      	ldrh	r3, [r4, #12]
 8012014:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8012018:	0719      	lsls	r1, r3, #28
 801201a:	d42c      	bmi.n	8012076 <__swsetup_r+0x82>
 801201c:	06dd      	lsls	r5, r3, #27
 801201e:	d411      	bmi.n	8012044 <__swsetup_r+0x50>
 8012020:	2309      	movs	r3, #9
 8012022:	6033      	str	r3, [r6, #0]
 8012024:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8012028:	f04f 30ff 	mov.w	r0, #4294967295
 801202c:	81a3      	strh	r3, [r4, #12]
 801202e:	e03e      	b.n	80120ae <__swsetup_r+0xba>
 8012030:	4b25      	ldr	r3, [pc, #148]	; (80120c8 <__swsetup_r+0xd4>)
 8012032:	429c      	cmp	r4, r3
 8012034:	d101      	bne.n	801203a <__swsetup_r+0x46>
 8012036:	68ac      	ldr	r4, [r5, #8]
 8012038:	e7eb      	b.n	8012012 <__swsetup_r+0x1e>
 801203a:	4b24      	ldr	r3, [pc, #144]	; (80120cc <__swsetup_r+0xd8>)
 801203c:	429c      	cmp	r4, r3
 801203e:	bf08      	it	eq
 8012040:	68ec      	ldreq	r4, [r5, #12]
 8012042:	e7e6      	b.n	8012012 <__swsetup_r+0x1e>
 8012044:	0758      	lsls	r0, r3, #29
 8012046:	d512      	bpl.n	801206e <__swsetup_r+0x7a>
 8012048:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801204a:	b141      	cbz	r1, 801205e <__swsetup_r+0x6a>
 801204c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8012050:	4299      	cmp	r1, r3
 8012052:	d002      	beq.n	801205a <__swsetup_r+0x66>
 8012054:	4630      	mov	r0, r6
 8012056:	f7fd fcb7 	bl	800f9c8 <_free_r>
 801205a:	2300      	movs	r3, #0
 801205c:	6363      	str	r3, [r4, #52]	; 0x34
 801205e:	89a3      	ldrh	r3, [r4, #12]
 8012060:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8012064:	81a3      	strh	r3, [r4, #12]
 8012066:	2300      	movs	r3, #0
 8012068:	6063      	str	r3, [r4, #4]
 801206a:	6923      	ldr	r3, [r4, #16]
 801206c:	6023      	str	r3, [r4, #0]
 801206e:	89a3      	ldrh	r3, [r4, #12]
 8012070:	f043 0308 	orr.w	r3, r3, #8
 8012074:	81a3      	strh	r3, [r4, #12]
 8012076:	6923      	ldr	r3, [r4, #16]
 8012078:	b94b      	cbnz	r3, 801208e <__swsetup_r+0x9a>
 801207a:	89a3      	ldrh	r3, [r4, #12]
 801207c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8012080:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8012084:	d003      	beq.n	801208e <__swsetup_r+0x9a>
 8012086:	4621      	mov	r1, r4
 8012088:	4630      	mov	r0, r6
 801208a:	f000 fa05 	bl	8012498 <__smakebuf_r>
 801208e:	89a0      	ldrh	r0, [r4, #12]
 8012090:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8012094:	f010 0301 	ands.w	r3, r0, #1
 8012098:	d00a      	beq.n	80120b0 <__swsetup_r+0xbc>
 801209a:	2300      	movs	r3, #0
 801209c:	60a3      	str	r3, [r4, #8]
 801209e:	6963      	ldr	r3, [r4, #20]
 80120a0:	425b      	negs	r3, r3
 80120a2:	61a3      	str	r3, [r4, #24]
 80120a4:	6923      	ldr	r3, [r4, #16]
 80120a6:	b943      	cbnz	r3, 80120ba <__swsetup_r+0xc6>
 80120a8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80120ac:	d1ba      	bne.n	8012024 <__swsetup_r+0x30>
 80120ae:	bd70      	pop	{r4, r5, r6, pc}
 80120b0:	0781      	lsls	r1, r0, #30
 80120b2:	bf58      	it	pl
 80120b4:	6963      	ldrpl	r3, [r4, #20]
 80120b6:	60a3      	str	r3, [r4, #8]
 80120b8:	e7f4      	b.n	80120a4 <__swsetup_r+0xb0>
 80120ba:	2000      	movs	r0, #0
 80120bc:	e7f7      	b.n	80120ae <__swsetup_r+0xba>
 80120be:	bf00      	nop
 80120c0:	200001a8 	.word	0x200001a8
 80120c4:	08013994 	.word	0x08013994
 80120c8:	080139b4 	.word	0x080139b4
 80120cc:	08013974 	.word	0x08013974

080120d0 <abort>:
 80120d0:	2006      	movs	r0, #6
 80120d2:	b508      	push	{r3, lr}
 80120d4:	f000 fa48 	bl	8012568 <raise>
 80120d8:	2001      	movs	r0, #1
 80120da:	f7f2 ff4a 	bl	8004f72 <_exit>
	...

080120e0 <__sflush_r>:
 80120e0:	898a      	ldrh	r2, [r1, #12]
 80120e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80120e6:	4605      	mov	r5, r0
 80120e8:	0710      	lsls	r0, r2, #28
 80120ea:	460c      	mov	r4, r1
 80120ec:	d458      	bmi.n	80121a0 <__sflush_r+0xc0>
 80120ee:	684b      	ldr	r3, [r1, #4]
 80120f0:	2b00      	cmp	r3, #0
 80120f2:	dc05      	bgt.n	8012100 <__sflush_r+0x20>
 80120f4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80120f6:	2b00      	cmp	r3, #0
 80120f8:	dc02      	bgt.n	8012100 <__sflush_r+0x20>
 80120fa:	2000      	movs	r0, #0
 80120fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012100:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8012102:	2e00      	cmp	r6, #0
 8012104:	d0f9      	beq.n	80120fa <__sflush_r+0x1a>
 8012106:	2300      	movs	r3, #0
 8012108:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801210c:	682f      	ldr	r7, [r5, #0]
 801210e:	602b      	str	r3, [r5, #0]
 8012110:	d032      	beq.n	8012178 <__sflush_r+0x98>
 8012112:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8012114:	89a3      	ldrh	r3, [r4, #12]
 8012116:	075a      	lsls	r2, r3, #29
 8012118:	d505      	bpl.n	8012126 <__sflush_r+0x46>
 801211a:	6863      	ldr	r3, [r4, #4]
 801211c:	1ac0      	subs	r0, r0, r3
 801211e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8012120:	b10b      	cbz	r3, 8012126 <__sflush_r+0x46>
 8012122:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8012124:	1ac0      	subs	r0, r0, r3
 8012126:	2300      	movs	r3, #0
 8012128:	4602      	mov	r2, r0
 801212a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801212c:	4628      	mov	r0, r5
 801212e:	6a21      	ldr	r1, [r4, #32]
 8012130:	47b0      	blx	r6
 8012132:	1c43      	adds	r3, r0, #1
 8012134:	89a3      	ldrh	r3, [r4, #12]
 8012136:	d106      	bne.n	8012146 <__sflush_r+0x66>
 8012138:	6829      	ldr	r1, [r5, #0]
 801213a:	291d      	cmp	r1, #29
 801213c:	d82c      	bhi.n	8012198 <__sflush_r+0xb8>
 801213e:	4a2a      	ldr	r2, [pc, #168]	; (80121e8 <__sflush_r+0x108>)
 8012140:	40ca      	lsrs	r2, r1
 8012142:	07d6      	lsls	r6, r2, #31
 8012144:	d528      	bpl.n	8012198 <__sflush_r+0xb8>
 8012146:	2200      	movs	r2, #0
 8012148:	6062      	str	r2, [r4, #4]
 801214a:	6922      	ldr	r2, [r4, #16]
 801214c:	04d9      	lsls	r1, r3, #19
 801214e:	6022      	str	r2, [r4, #0]
 8012150:	d504      	bpl.n	801215c <__sflush_r+0x7c>
 8012152:	1c42      	adds	r2, r0, #1
 8012154:	d101      	bne.n	801215a <__sflush_r+0x7a>
 8012156:	682b      	ldr	r3, [r5, #0]
 8012158:	b903      	cbnz	r3, 801215c <__sflush_r+0x7c>
 801215a:	6560      	str	r0, [r4, #84]	; 0x54
 801215c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801215e:	602f      	str	r7, [r5, #0]
 8012160:	2900      	cmp	r1, #0
 8012162:	d0ca      	beq.n	80120fa <__sflush_r+0x1a>
 8012164:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8012168:	4299      	cmp	r1, r3
 801216a:	d002      	beq.n	8012172 <__sflush_r+0x92>
 801216c:	4628      	mov	r0, r5
 801216e:	f7fd fc2b 	bl	800f9c8 <_free_r>
 8012172:	2000      	movs	r0, #0
 8012174:	6360      	str	r0, [r4, #52]	; 0x34
 8012176:	e7c1      	b.n	80120fc <__sflush_r+0x1c>
 8012178:	6a21      	ldr	r1, [r4, #32]
 801217a:	2301      	movs	r3, #1
 801217c:	4628      	mov	r0, r5
 801217e:	47b0      	blx	r6
 8012180:	1c41      	adds	r1, r0, #1
 8012182:	d1c7      	bne.n	8012114 <__sflush_r+0x34>
 8012184:	682b      	ldr	r3, [r5, #0]
 8012186:	2b00      	cmp	r3, #0
 8012188:	d0c4      	beq.n	8012114 <__sflush_r+0x34>
 801218a:	2b1d      	cmp	r3, #29
 801218c:	d001      	beq.n	8012192 <__sflush_r+0xb2>
 801218e:	2b16      	cmp	r3, #22
 8012190:	d101      	bne.n	8012196 <__sflush_r+0xb6>
 8012192:	602f      	str	r7, [r5, #0]
 8012194:	e7b1      	b.n	80120fa <__sflush_r+0x1a>
 8012196:	89a3      	ldrh	r3, [r4, #12]
 8012198:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801219c:	81a3      	strh	r3, [r4, #12]
 801219e:	e7ad      	b.n	80120fc <__sflush_r+0x1c>
 80121a0:	690f      	ldr	r7, [r1, #16]
 80121a2:	2f00      	cmp	r7, #0
 80121a4:	d0a9      	beq.n	80120fa <__sflush_r+0x1a>
 80121a6:	0793      	lsls	r3, r2, #30
 80121a8:	bf18      	it	ne
 80121aa:	2300      	movne	r3, #0
 80121ac:	680e      	ldr	r6, [r1, #0]
 80121ae:	bf08      	it	eq
 80121b0:	694b      	ldreq	r3, [r1, #20]
 80121b2:	eba6 0807 	sub.w	r8, r6, r7
 80121b6:	600f      	str	r7, [r1, #0]
 80121b8:	608b      	str	r3, [r1, #8]
 80121ba:	f1b8 0f00 	cmp.w	r8, #0
 80121be:	dd9c      	ble.n	80120fa <__sflush_r+0x1a>
 80121c0:	4643      	mov	r3, r8
 80121c2:	463a      	mov	r2, r7
 80121c4:	4628      	mov	r0, r5
 80121c6:	6a21      	ldr	r1, [r4, #32]
 80121c8:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80121ca:	47b0      	blx	r6
 80121cc:	2800      	cmp	r0, #0
 80121ce:	dc06      	bgt.n	80121de <__sflush_r+0xfe>
 80121d0:	89a3      	ldrh	r3, [r4, #12]
 80121d2:	f04f 30ff 	mov.w	r0, #4294967295
 80121d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80121da:	81a3      	strh	r3, [r4, #12]
 80121dc:	e78e      	b.n	80120fc <__sflush_r+0x1c>
 80121de:	4407      	add	r7, r0
 80121e0:	eba8 0800 	sub.w	r8, r8, r0
 80121e4:	e7e9      	b.n	80121ba <__sflush_r+0xda>
 80121e6:	bf00      	nop
 80121e8:	20400001 	.word	0x20400001

080121ec <_fflush_r>:
 80121ec:	b538      	push	{r3, r4, r5, lr}
 80121ee:	690b      	ldr	r3, [r1, #16]
 80121f0:	4605      	mov	r5, r0
 80121f2:	460c      	mov	r4, r1
 80121f4:	b913      	cbnz	r3, 80121fc <_fflush_r+0x10>
 80121f6:	2500      	movs	r5, #0
 80121f8:	4628      	mov	r0, r5
 80121fa:	bd38      	pop	{r3, r4, r5, pc}
 80121fc:	b118      	cbz	r0, 8012206 <_fflush_r+0x1a>
 80121fe:	6983      	ldr	r3, [r0, #24]
 8012200:	b90b      	cbnz	r3, 8012206 <_fflush_r+0x1a>
 8012202:	f000 f887 	bl	8012314 <__sinit>
 8012206:	4b14      	ldr	r3, [pc, #80]	; (8012258 <_fflush_r+0x6c>)
 8012208:	429c      	cmp	r4, r3
 801220a:	d11b      	bne.n	8012244 <_fflush_r+0x58>
 801220c:	686c      	ldr	r4, [r5, #4]
 801220e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012212:	2b00      	cmp	r3, #0
 8012214:	d0ef      	beq.n	80121f6 <_fflush_r+0xa>
 8012216:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8012218:	07d0      	lsls	r0, r2, #31
 801221a:	d404      	bmi.n	8012226 <_fflush_r+0x3a>
 801221c:	0599      	lsls	r1, r3, #22
 801221e:	d402      	bmi.n	8012226 <_fflush_r+0x3a>
 8012220:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8012222:	f7ff fcfa 	bl	8011c1a <__retarget_lock_acquire_recursive>
 8012226:	4628      	mov	r0, r5
 8012228:	4621      	mov	r1, r4
 801222a:	f7ff ff59 	bl	80120e0 <__sflush_r>
 801222e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8012230:	4605      	mov	r5, r0
 8012232:	07da      	lsls	r2, r3, #31
 8012234:	d4e0      	bmi.n	80121f8 <_fflush_r+0xc>
 8012236:	89a3      	ldrh	r3, [r4, #12]
 8012238:	059b      	lsls	r3, r3, #22
 801223a:	d4dd      	bmi.n	80121f8 <_fflush_r+0xc>
 801223c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801223e:	f7ff fced 	bl	8011c1c <__retarget_lock_release_recursive>
 8012242:	e7d9      	b.n	80121f8 <_fflush_r+0xc>
 8012244:	4b05      	ldr	r3, [pc, #20]	; (801225c <_fflush_r+0x70>)
 8012246:	429c      	cmp	r4, r3
 8012248:	d101      	bne.n	801224e <_fflush_r+0x62>
 801224a:	68ac      	ldr	r4, [r5, #8]
 801224c:	e7df      	b.n	801220e <_fflush_r+0x22>
 801224e:	4b04      	ldr	r3, [pc, #16]	; (8012260 <_fflush_r+0x74>)
 8012250:	429c      	cmp	r4, r3
 8012252:	bf08      	it	eq
 8012254:	68ec      	ldreq	r4, [r5, #12]
 8012256:	e7da      	b.n	801220e <_fflush_r+0x22>
 8012258:	08013994 	.word	0x08013994
 801225c:	080139b4 	.word	0x080139b4
 8012260:	08013974 	.word	0x08013974

08012264 <std>:
 8012264:	2300      	movs	r3, #0
 8012266:	b510      	push	{r4, lr}
 8012268:	4604      	mov	r4, r0
 801226a:	e9c0 3300 	strd	r3, r3, [r0]
 801226e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8012272:	6083      	str	r3, [r0, #8]
 8012274:	8181      	strh	r1, [r0, #12]
 8012276:	6643      	str	r3, [r0, #100]	; 0x64
 8012278:	81c2      	strh	r2, [r0, #14]
 801227a:	6183      	str	r3, [r0, #24]
 801227c:	4619      	mov	r1, r3
 801227e:	2208      	movs	r2, #8
 8012280:	305c      	adds	r0, #92	; 0x5c
 8012282:	f7fd fb99 	bl	800f9b8 <memset>
 8012286:	4b05      	ldr	r3, [pc, #20]	; (801229c <std+0x38>)
 8012288:	6224      	str	r4, [r4, #32]
 801228a:	6263      	str	r3, [r4, #36]	; 0x24
 801228c:	4b04      	ldr	r3, [pc, #16]	; (80122a0 <std+0x3c>)
 801228e:	62a3      	str	r3, [r4, #40]	; 0x28
 8012290:	4b04      	ldr	r3, [pc, #16]	; (80122a4 <std+0x40>)
 8012292:	62e3      	str	r3, [r4, #44]	; 0x2c
 8012294:	4b04      	ldr	r3, [pc, #16]	; (80122a8 <std+0x44>)
 8012296:	6323      	str	r3, [r4, #48]	; 0x30
 8012298:	bd10      	pop	{r4, pc}
 801229a:	bf00      	nop
 801229c:	080125a1 	.word	0x080125a1
 80122a0:	080125c3 	.word	0x080125c3
 80122a4:	080125fb 	.word	0x080125fb
 80122a8:	0801261f 	.word	0x0801261f

080122ac <_cleanup_r>:
 80122ac:	4901      	ldr	r1, [pc, #4]	; (80122b4 <_cleanup_r+0x8>)
 80122ae:	f000 b8af 	b.w	8012410 <_fwalk_reent>
 80122b2:	bf00      	nop
 80122b4:	080121ed 	.word	0x080121ed

080122b8 <__sfmoreglue>:
 80122b8:	b570      	push	{r4, r5, r6, lr}
 80122ba:	2568      	movs	r5, #104	; 0x68
 80122bc:	1e4a      	subs	r2, r1, #1
 80122be:	4355      	muls	r5, r2
 80122c0:	460e      	mov	r6, r1
 80122c2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80122c6:	f7fd fbcb 	bl	800fa60 <_malloc_r>
 80122ca:	4604      	mov	r4, r0
 80122cc:	b140      	cbz	r0, 80122e0 <__sfmoreglue+0x28>
 80122ce:	2100      	movs	r1, #0
 80122d0:	e9c0 1600 	strd	r1, r6, [r0]
 80122d4:	300c      	adds	r0, #12
 80122d6:	60a0      	str	r0, [r4, #8]
 80122d8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80122dc:	f7fd fb6c 	bl	800f9b8 <memset>
 80122e0:	4620      	mov	r0, r4
 80122e2:	bd70      	pop	{r4, r5, r6, pc}

080122e4 <__sfp_lock_acquire>:
 80122e4:	4801      	ldr	r0, [pc, #4]	; (80122ec <__sfp_lock_acquire+0x8>)
 80122e6:	f7ff bc98 	b.w	8011c1a <__retarget_lock_acquire_recursive>
 80122ea:	bf00      	nop
 80122ec:	200021f0 	.word	0x200021f0

080122f0 <__sfp_lock_release>:
 80122f0:	4801      	ldr	r0, [pc, #4]	; (80122f8 <__sfp_lock_release+0x8>)
 80122f2:	f7ff bc93 	b.w	8011c1c <__retarget_lock_release_recursive>
 80122f6:	bf00      	nop
 80122f8:	200021f0 	.word	0x200021f0

080122fc <__sinit_lock_acquire>:
 80122fc:	4801      	ldr	r0, [pc, #4]	; (8012304 <__sinit_lock_acquire+0x8>)
 80122fe:	f7ff bc8c 	b.w	8011c1a <__retarget_lock_acquire_recursive>
 8012302:	bf00      	nop
 8012304:	200021eb 	.word	0x200021eb

08012308 <__sinit_lock_release>:
 8012308:	4801      	ldr	r0, [pc, #4]	; (8012310 <__sinit_lock_release+0x8>)
 801230a:	f7ff bc87 	b.w	8011c1c <__retarget_lock_release_recursive>
 801230e:	bf00      	nop
 8012310:	200021eb 	.word	0x200021eb

08012314 <__sinit>:
 8012314:	b510      	push	{r4, lr}
 8012316:	4604      	mov	r4, r0
 8012318:	f7ff fff0 	bl	80122fc <__sinit_lock_acquire>
 801231c:	69a3      	ldr	r3, [r4, #24]
 801231e:	b11b      	cbz	r3, 8012328 <__sinit+0x14>
 8012320:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012324:	f7ff bff0 	b.w	8012308 <__sinit_lock_release>
 8012328:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801232c:	6523      	str	r3, [r4, #80]	; 0x50
 801232e:	4b13      	ldr	r3, [pc, #76]	; (801237c <__sinit+0x68>)
 8012330:	4a13      	ldr	r2, [pc, #76]	; (8012380 <__sinit+0x6c>)
 8012332:	681b      	ldr	r3, [r3, #0]
 8012334:	62a2      	str	r2, [r4, #40]	; 0x28
 8012336:	42a3      	cmp	r3, r4
 8012338:	bf08      	it	eq
 801233a:	2301      	moveq	r3, #1
 801233c:	4620      	mov	r0, r4
 801233e:	bf08      	it	eq
 8012340:	61a3      	streq	r3, [r4, #24]
 8012342:	f000 f81f 	bl	8012384 <__sfp>
 8012346:	6060      	str	r0, [r4, #4]
 8012348:	4620      	mov	r0, r4
 801234a:	f000 f81b 	bl	8012384 <__sfp>
 801234e:	60a0      	str	r0, [r4, #8]
 8012350:	4620      	mov	r0, r4
 8012352:	f000 f817 	bl	8012384 <__sfp>
 8012356:	2200      	movs	r2, #0
 8012358:	2104      	movs	r1, #4
 801235a:	60e0      	str	r0, [r4, #12]
 801235c:	6860      	ldr	r0, [r4, #4]
 801235e:	f7ff ff81 	bl	8012264 <std>
 8012362:	2201      	movs	r2, #1
 8012364:	2109      	movs	r1, #9
 8012366:	68a0      	ldr	r0, [r4, #8]
 8012368:	f7ff ff7c 	bl	8012264 <std>
 801236c:	2202      	movs	r2, #2
 801236e:	2112      	movs	r1, #18
 8012370:	68e0      	ldr	r0, [r4, #12]
 8012372:	f7ff ff77 	bl	8012264 <std>
 8012376:	2301      	movs	r3, #1
 8012378:	61a3      	str	r3, [r4, #24]
 801237a:	e7d1      	b.n	8012320 <__sinit+0xc>
 801237c:	080135f0 	.word	0x080135f0
 8012380:	080122ad 	.word	0x080122ad

08012384 <__sfp>:
 8012384:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012386:	4607      	mov	r7, r0
 8012388:	f7ff ffac 	bl	80122e4 <__sfp_lock_acquire>
 801238c:	4b1e      	ldr	r3, [pc, #120]	; (8012408 <__sfp+0x84>)
 801238e:	681e      	ldr	r6, [r3, #0]
 8012390:	69b3      	ldr	r3, [r6, #24]
 8012392:	b913      	cbnz	r3, 801239a <__sfp+0x16>
 8012394:	4630      	mov	r0, r6
 8012396:	f7ff ffbd 	bl	8012314 <__sinit>
 801239a:	3648      	adds	r6, #72	; 0x48
 801239c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80123a0:	3b01      	subs	r3, #1
 80123a2:	d503      	bpl.n	80123ac <__sfp+0x28>
 80123a4:	6833      	ldr	r3, [r6, #0]
 80123a6:	b30b      	cbz	r3, 80123ec <__sfp+0x68>
 80123a8:	6836      	ldr	r6, [r6, #0]
 80123aa:	e7f7      	b.n	801239c <__sfp+0x18>
 80123ac:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80123b0:	b9d5      	cbnz	r5, 80123e8 <__sfp+0x64>
 80123b2:	4b16      	ldr	r3, [pc, #88]	; (801240c <__sfp+0x88>)
 80123b4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80123b8:	60e3      	str	r3, [r4, #12]
 80123ba:	6665      	str	r5, [r4, #100]	; 0x64
 80123bc:	f7ff fc2c 	bl	8011c18 <__retarget_lock_init_recursive>
 80123c0:	f7ff ff96 	bl	80122f0 <__sfp_lock_release>
 80123c4:	2208      	movs	r2, #8
 80123c6:	4629      	mov	r1, r5
 80123c8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80123cc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80123d0:	6025      	str	r5, [r4, #0]
 80123d2:	61a5      	str	r5, [r4, #24]
 80123d4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80123d8:	f7fd faee 	bl	800f9b8 <memset>
 80123dc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80123e0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80123e4:	4620      	mov	r0, r4
 80123e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80123e8:	3468      	adds	r4, #104	; 0x68
 80123ea:	e7d9      	b.n	80123a0 <__sfp+0x1c>
 80123ec:	2104      	movs	r1, #4
 80123ee:	4638      	mov	r0, r7
 80123f0:	f7ff ff62 	bl	80122b8 <__sfmoreglue>
 80123f4:	4604      	mov	r4, r0
 80123f6:	6030      	str	r0, [r6, #0]
 80123f8:	2800      	cmp	r0, #0
 80123fa:	d1d5      	bne.n	80123a8 <__sfp+0x24>
 80123fc:	f7ff ff78 	bl	80122f0 <__sfp_lock_release>
 8012400:	230c      	movs	r3, #12
 8012402:	603b      	str	r3, [r7, #0]
 8012404:	e7ee      	b.n	80123e4 <__sfp+0x60>
 8012406:	bf00      	nop
 8012408:	080135f0 	.word	0x080135f0
 801240c:	ffff0001 	.word	0xffff0001

08012410 <_fwalk_reent>:
 8012410:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012414:	4606      	mov	r6, r0
 8012416:	4688      	mov	r8, r1
 8012418:	2700      	movs	r7, #0
 801241a:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801241e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8012422:	f1b9 0901 	subs.w	r9, r9, #1
 8012426:	d505      	bpl.n	8012434 <_fwalk_reent+0x24>
 8012428:	6824      	ldr	r4, [r4, #0]
 801242a:	2c00      	cmp	r4, #0
 801242c:	d1f7      	bne.n	801241e <_fwalk_reent+0xe>
 801242e:	4638      	mov	r0, r7
 8012430:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012434:	89ab      	ldrh	r3, [r5, #12]
 8012436:	2b01      	cmp	r3, #1
 8012438:	d907      	bls.n	801244a <_fwalk_reent+0x3a>
 801243a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801243e:	3301      	adds	r3, #1
 8012440:	d003      	beq.n	801244a <_fwalk_reent+0x3a>
 8012442:	4629      	mov	r1, r5
 8012444:	4630      	mov	r0, r6
 8012446:	47c0      	blx	r8
 8012448:	4307      	orrs	r7, r0
 801244a:	3568      	adds	r5, #104	; 0x68
 801244c:	e7e9      	b.n	8012422 <_fwalk_reent+0x12>

0801244e <__swhatbuf_r>:
 801244e:	b570      	push	{r4, r5, r6, lr}
 8012450:	460e      	mov	r6, r1
 8012452:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012456:	4614      	mov	r4, r2
 8012458:	2900      	cmp	r1, #0
 801245a:	461d      	mov	r5, r3
 801245c:	b096      	sub	sp, #88	; 0x58
 801245e:	da07      	bge.n	8012470 <__swhatbuf_r+0x22>
 8012460:	2300      	movs	r3, #0
 8012462:	602b      	str	r3, [r5, #0]
 8012464:	89b3      	ldrh	r3, [r6, #12]
 8012466:	061a      	lsls	r2, r3, #24
 8012468:	d410      	bmi.n	801248c <__swhatbuf_r+0x3e>
 801246a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801246e:	e00e      	b.n	801248e <__swhatbuf_r+0x40>
 8012470:	466a      	mov	r2, sp
 8012472:	f000 f8fb 	bl	801266c <_fstat_r>
 8012476:	2800      	cmp	r0, #0
 8012478:	dbf2      	blt.n	8012460 <__swhatbuf_r+0x12>
 801247a:	9a01      	ldr	r2, [sp, #4]
 801247c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8012480:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8012484:	425a      	negs	r2, r3
 8012486:	415a      	adcs	r2, r3
 8012488:	602a      	str	r2, [r5, #0]
 801248a:	e7ee      	b.n	801246a <__swhatbuf_r+0x1c>
 801248c:	2340      	movs	r3, #64	; 0x40
 801248e:	2000      	movs	r0, #0
 8012490:	6023      	str	r3, [r4, #0]
 8012492:	b016      	add	sp, #88	; 0x58
 8012494:	bd70      	pop	{r4, r5, r6, pc}
	...

08012498 <__smakebuf_r>:
 8012498:	898b      	ldrh	r3, [r1, #12]
 801249a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801249c:	079d      	lsls	r5, r3, #30
 801249e:	4606      	mov	r6, r0
 80124a0:	460c      	mov	r4, r1
 80124a2:	d507      	bpl.n	80124b4 <__smakebuf_r+0x1c>
 80124a4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80124a8:	6023      	str	r3, [r4, #0]
 80124aa:	6123      	str	r3, [r4, #16]
 80124ac:	2301      	movs	r3, #1
 80124ae:	6163      	str	r3, [r4, #20]
 80124b0:	b002      	add	sp, #8
 80124b2:	bd70      	pop	{r4, r5, r6, pc}
 80124b4:	466a      	mov	r2, sp
 80124b6:	ab01      	add	r3, sp, #4
 80124b8:	f7ff ffc9 	bl	801244e <__swhatbuf_r>
 80124bc:	9900      	ldr	r1, [sp, #0]
 80124be:	4605      	mov	r5, r0
 80124c0:	4630      	mov	r0, r6
 80124c2:	f7fd facd 	bl	800fa60 <_malloc_r>
 80124c6:	b948      	cbnz	r0, 80124dc <__smakebuf_r+0x44>
 80124c8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80124cc:	059a      	lsls	r2, r3, #22
 80124ce:	d4ef      	bmi.n	80124b0 <__smakebuf_r+0x18>
 80124d0:	f023 0303 	bic.w	r3, r3, #3
 80124d4:	f043 0302 	orr.w	r3, r3, #2
 80124d8:	81a3      	strh	r3, [r4, #12]
 80124da:	e7e3      	b.n	80124a4 <__smakebuf_r+0xc>
 80124dc:	4b0d      	ldr	r3, [pc, #52]	; (8012514 <__smakebuf_r+0x7c>)
 80124de:	62b3      	str	r3, [r6, #40]	; 0x28
 80124e0:	89a3      	ldrh	r3, [r4, #12]
 80124e2:	6020      	str	r0, [r4, #0]
 80124e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80124e8:	81a3      	strh	r3, [r4, #12]
 80124ea:	9b00      	ldr	r3, [sp, #0]
 80124ec:	6120      	str	r0, [r4, #16]
 80124ee:	6163      	str	r3, [r4, #20]
 80124f0:	9b01      	ldr	r3, [sp, #4]
 80124f2:	b15b      	cbz	r3, 801250c <__smakebuf_r+0x74>
 80124f4:	4630      	mov	r0, r6
 80124f6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80124fa:	f000 f8c9 	bl	8012690 <_isatty_r>
 80124fe:	b128      	cbz	r0, 801250c <__smakebuf_r+0x74>
 8012500:	89a3      	ldrh	r3, [r4, #12]
 8012502:	f023 0303 	bic.w	r3, r3, #3
 8012506:	f043 0301 	orr.w	r3, r3, #1
 801250a:	81a3      	strh	r3, [r4, #12]
 801250c:	89a0      	ldrh	r0, [r4, #12]
 801250e:	4305      	orrs	r5, r0
 8012510:	81a5      	strh	r5, [r4, #12]
 8012512:	e7cd      	b.n	80124b0 <__smakebuf_r+0x18>
 8012514:	080122ad 	.word	0x080122ad

08012518 <_raise_r>:
 8012518:	291f      	cmp	r1, #31
 801251a:	b538      	push	{r3, r4, r5, lr}
 801251c:	4604      	mov	r4, r0
 801251e:	460d      	mov	r5, r1
 8012520:	d904      	bls.n	801252c <_raise_r+0x14>
 8012522:	2316      	movs	r3, #22
 8012524:	6003      	str	r3, [r0, #0]
 8012526:	f04f 30ff 	mov.w	r0, #4294967295
 801252a:	bd38      	pop	{r3, r4, r5, pc}
 801252c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801252e:	b112      	cbz	r2, 8012536 <_raise_r+0x1e>
 8012530:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8012534:	b94b      	cbnz	r3, 801254a <_raise_r+0x32>
 8012536:	4620      	mov	r0, r4
 8012538:	f000 f830 	bl	801259c <_getpid_r>
 801253c:	462a      	mov	r2, r5
 801253e:	4601      	mov	r1, r0
 8012540:	4620      	mov	r0, r4
 8012542:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012546:	f000 b817 	b.w	8012578 <_kill_r>
 801254a:	2b01      	cmp	r3, #1
 801254c:	d00a      	beq.n	8012564 <_raise_r+0x4c>
 801254e:	1c59      	adds	r1, r3, #1
 8012550:	d103      	bne.n	801255a <_raise_r+0x42>
 8012552:	2316      	movs	r3, #22
 8012554:	6003      	str	r3, [r0, #0]
 8012556:	2001      	movs	r0, #1
 8012558:	e7e7      	b.n	801252a <_raise_r+0x12>
 801255a:	2400      	movs	r4, #0
 801255c:	4628      	mov	r0, r5
 801255e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8012562:	4798      	blx	r3
 8012564:	2000      	movs	r0, #0
 8012566:	e7e0      	b.n	801252a <_raise_r+0x12>

08012568 <raise>:
 8012568:	4b02      	ldr	r3, [pc, #8]	; (8012574 <raise+0xc>)
 801256a:	4601      	mov	r1, r0
 801256c:	6818      	ldr	r0, [r3, #0]
 801256e:	f7ff bfd3 	b.w	8012518 <_raise_r>
 8012572:	bf00      	nop
 8012574:	200001a8 	.word	0x200001a8

08012578 <_kill_r>:
 8012578:	b538      	push	{r3, r4, r5, lr}
 801257a:	2300      	movs	r3, #0
 801257c:	4d06      	ldr	r5, [pc, #24]	; (8012598 <_kill_r+0x20>)
 801257e:	4604      	mov	r4, r0
 8012580:	4608      	mov	r0, r1
 8012582:	4611      	mov	r1, r2
 8012584:	602b      	str	r3, [r5, #0]
 8012586:	f7f2 fce4 	bl	8004f52 <_kill>
 801258a:	1c43      	adds	r3, r0, #1
 801258c:	d102      	bne.n	8012594 <_kill_r+0x1c>
 801258e:	682b      	ldr	r3, [r5, #0]
 8012590:	b103      	cbz	r3, 8012594 <_kill_r+0x1c>
 8012592:	6023      	str	r3, [r4, #0]
 8012594:	bd38      	pop	{r3, r4, r5, pc}
 8012596:	bf00      	nop
 8012598:	200021e4 	.word	0x200021e4

0801259c <_getpid_r>:
 801259c:	f7f2 bcd2 	b.w	8004f44 <_getpid>

080125a0 <__sread>:
 80125a0:	b510      	push	{r4, lr}
 80125a2:	460c      	mov	r4, r1
 80125a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80125a8:	f000 f894 	bl	80126d4 <_read_r>
 80125ac:	2800      	cmp	r0, #0
 80125ae:	bfab      	itete	ge
 80125b0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80125b2:	89a3      	ldrhlt	r3, [r4, #12]
 80125b4:	181b      	addge	r3, r3, r0
 80125b6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80125ba:	bfac      	ite	ge
 80125bc:	6563      	strge	r3, [r4, #84]	; 0x54
 80125be:	81a3      	strhlt	r3, [r4, #12]
 80125c0:	bd10      	pop	{r4, pc}

080125c2 <__swrite>:
 80125c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80125c6:	461f      	mov	r7, r3
 80125c8:	898b      	ldrh	r3, [r1, #12]
 80125ca:	4605      	mov	r5, r0
 80125cc:	05db      	lsls	r3, r3, #23
 80125ce:	460c      	mov	r4, r1
 80125d0:	4616      	mov	r6, r2
 80125d2:	d505      	bpl.n	80125e0 <__swrite+0x1e>
 80125d4:	2302      	movs	r3, #2
 80125d6:	2200      	movs	r2, #0
 80125d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80125dc:	f000 f868 	bl	80126b0 <_lseek_r>
 80125e0:	89a3      	ldrh	r3, [r4, #12]
 80125e2:	4632      	mov	r2, r6
 80125e4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80125e8:	81a3      	strh	r3, [r4, #12]
 80125ea:	4628      	mov	r0, r5
 80125ec:	463b      	mov	r3, r7
 80125ee:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80125f2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80125f6:	f000 b817 	b.w	8012628 <_write_r>

080125fa <__sseek>:
 80125fa:	b510      	push	{r4, lr}
 80125fc:	460c      	mov	r4, r1
 80125fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012602:	f000 f855 	bl	80126b0 <_lseek_r>
 8012606:	1c43      	adds	r3, r0, #1
 8012608:	89a3      	ldrh	r3, [r4, #12]
 801260a:	bf15      	itete	ne
 801260c:	6560      	strne	r0, [r4, #84]	; 0x54
 801260e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8012612:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8012616:	81a3      	strheq	r3, [r4, #12]
 8012618:	bf18      	it	ne
 801261a:	81a3      	strhne	r3, [r4, #12]
 801261c:	bd10      	pop	{r4, pc}

0801261e <__sclose>:
 801261e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012622:	f000 b813 	b.w	801264c <_close_r>
	...

08012628 <_write_r>:
 8012628:	b538      	push	{r3, r4, r5, lr}
 801262a:	4604      	mov	r4, r0
 801262c:	4608      	mov	r0, r1
 801262e:	4611      	mov	r1, r2
 8012630:	2200      	movs	r2, #0
 8012632:	4d05      	ldr	r5, [pc, #20]	; (8012648 <_write_r+0x20>)
 8012634:	602a      	str	r2, [r5, #0]
 8012636:	461a      	mov	r2, r3
 8012638:	f7f2 fcc2 	bl	8004fc0 <_write>
 801263c:	1c43      	adds	r3, r0, #1
 801263e:	d102      	bne.n	8012646 <_write_r+0x1e>
 8012640:	682b      	ldr	r3, [r5, #0]
 8012642:	b103      	cbz	r3, 8012646 <_write_r+0x1e>
 8012644:	6023      	str	r3, [r4, #0]
 8012646:	bd38      	pop	{r3, r4, r5, pc}
 8012648:	200021e4 	.word	0x200021e4

0801264c <_close_r>:
 801264c:	b538      	push	{r3, r4, r5, lr}
 801264e:	2300      	movs	r3, #0
 8012650:	4d05      	ldr	r5, [pc, #20]	; (8012668 <_close_r+0x1c>)
 8012652:	4604      	mov	r4, r0
 8012654:	4608      	mov	r0, r1
 8012656:	602b      	str	r3, [r5, #0]
 8012658:	f7f2 fcce 	bl	8004ff8 <_close>
 801265c:	1c43      	adds	r3, r0, #1
 801265e:	d102      	bne.n	8012666 <_close_r+0x1a>
 8012660:	682b      	ldr	r3, [r5, #0]
 8012662:	b103      	cbz	r3, 8012666 <_close_r+0x1a>
 8012664:	6023      	str	r3, [r4, #0]
 8012666:	bd38      	pop	{r3, r4, r5, pc}
 8012668:	200021e4 	.word	0x200021e4

0801266c <_fstat_r>:
 801266c:	b538      	push	{r3, r4, r5, lr}
 801266e:	2300      	movs	r3, #0
 8012670:	4d06      	ldr	r5, [pc, #24]	; (801268c <_fstat_r+0x20>)
 8012672:	4604      	mov	r4, r0
 8012674:	4608      	mov	r0, r1
 8012676:	4611      	mov	r1, r2
 8012678:	602b      	str	r3, [r5, #0]
 801267a:	f7f2 fcc8 	bl	800500e <_fstat>
 801267e:	1c43      	adds	r3, r0, #1
 8012680:	d102      	bne.n	8012688 <_fstat_r+0x1c>
 8012682:	682b      	ldr	r3, [r5, #0]
 8012684:	b103      	cbz	r3, 8012688 <_fstat_r+0x1c>
 8012686:	6023      	str	r3, [r4, #0]
 8012688:	bd38      	pop	{r3, r4, r5, pc}
 801268a:	bf00      	nop
 801268c:	200021e4 	.word	0x200021e4

08012690 <_isatty_r>:
 8012690:	b538      	push	{r3, r4, r5, lr}
 8012692:	2300      	movs	r3, #0
 8012694:	4d05      	ldr	r5, [pc, #20]	; (80126ac <_isatty_r+0x1c>)
 8012696:	4604      	mov	r4, r0
 8012698:	4608      	mov	r0, r1
 801269a:	602b      	str	r3, [r5, #0]
 801269c:	f7f2 fcc6 	bl	800502c <_isatty>
 80126a0:	1c43      	adds	r3, r0, #1
 80126a2:	d102      	bne.n	80126aa <_isatty_r+0x1a>
 80126a4:	682b      	ldr	r3, [r5, #0]
 80126a6:	b103      	cbz	r3, 80126aa <_isatty_r+0x1a>
 80126a8:	6023      	str	r3, [r4, #0]
 80126aa:	bd38      	pop	{r3, r4, r5, pc}
 80126ac:	200021e4 	.word	0x200021e4

080126b0 <_lseek_r>:
 80126b0:	b538      	push	{r3, r4, r5, lr}
 80126b2:	4604      	mov	r4, r0
 80126b4:	4608      	mov	r0, r1
 80126b6:	4611      	mov	r1, r2
 80126b8:	2200      	movs	r2, #0
 80126ba:	4d05      	ldr	r5, [pc, #20]	; (80126d0 <_lseek_r+0x20>)
 80126bc:	602a      	str	r2, [r5, #0]
 80126be:	461a      	mov	r2, r3
 80126c0:	f7f2 fcbe 	bl	8005040 <_lseek>
 80126c4:	1c43      	adds	r3, r0, #1
 80126c6:	d102      	bne.n	80126ce <_lseek_r+0x1e>
 80126c8:	682b      	ldr	r3, [r5, #0]
 80126ca:	b103      	cbz	r3, 80126ce <_lseek_r+0x1e>
 80126cc:	6023      	str	r3, [r4, #0]
 80126ce:	bd38      	pop	{r3, r4, r5, pc}
 80126d0:	200021e4 	.word	0x200021e4

080126d4 <_read_r>:
 80126d4:	b538      	push	{r3, r4, r5, lr}
 80126d6:	4604      	mov	r4, r0
 80126d8:	4608      	mov	r0, r1
 80126da:	4611      	mov	r1, r2
 80126dc:	2200      	movs	r2, #0
 80126de:	4d05      	ldr	r5, [pc, #20]	; (80126f4 <_read_r+0x20>)
 80126e0:	602a      	str	r2, [r5, #0]
 80126e2:	461a      	mov	r2, r3
 80126e4:	f7f2 fc4f 	bl	8004f86 <_read>
 80126e8:	1c43      	adds	r3, r0, #1
 80126ea:	d102      	bne.n	80126f2 <_read_r+0x1e>
 80126ec:	682b      	ldr	r3, [r5, #0]
 80126ee:	b103      	cbz	r3, 80126f2 <_read_r+0x1e>
 80126f0:	6023      	str	r3, [r4, #0]
 80126f2:	bd38      	pop	{r3, r4, r5, pc}
 80126f4:	200021e4 	.word	0x200021e4

080126f8 <_init>:
 80126f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80126fa:	bf00      	nop
 80126fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80126fe:	bc08      	pop	{r3}
 8012700:	469e      	mov	lr, r3
 8012702:	4770      	bx	lr

08012704 <_fini>:
 8012704:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012706:	bf00      	nop
 8012708:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801270a:	bc08      	pop	{r3}
 801270c:	469e      	mov	lr, r3
 801270e:	4770      	bx	lr
