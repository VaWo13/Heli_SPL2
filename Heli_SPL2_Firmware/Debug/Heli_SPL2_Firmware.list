
Heli_SPL2_Firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000184  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012590  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000012c4  08012718  08012718  00022718  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080139dc  080139dc  00030378  2**0
                  CONTENTS
  4 .ARM          00000008  080139dc  080139dc  000239dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080139e4  080139e4  00030378  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   0000000c  080139e4  080139e4  000239e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080139f0  080139f0  000239f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000378  20000000  080139f4  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001f28  20000378  08013d6c  00030378  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200022a0  08013d6c  000322a0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00030378  2**0
                  CONTENTS, READONLY
 12 .debug_info   0004102c  00000000  00000000  000303a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000057a3  00000000  00000000  000713cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002000  00000000  00000000  00076b70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001e30  00000000  00000000  00078b70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028b5c  00000000  00000000  0007a9a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002387a  00000000  00000000  000a34fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cd6b6  00000000  00000000  000c6d76  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0019442c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a120  00000000  00000000  00194480  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000378 	.word	0x20000378
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08012700 	.word	0x08012700

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000037c 	.word	0x2000037c
 80001c4:	08012700 	.word	0x08012700

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmpun>:
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x10>
 8000a8e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a92:	d10a      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000a94:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	d102      	bne.n	8000aa4 <__aeabi_dcmpun+0x20>
 8000a9e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aa2:	d102      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	f04f 0001 	mov.w	r0, #1
 8000aae:	4770      	bx	lr

08000ab0 <__aeabi_d2iz>:
 8000ab0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ab4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ab8:	d215      	bcs.n	8000ae6 <__aeabi_d2iz+0x36>
 8000aba:	d511      	bpl.n	8000ae0 <__aeabi_d2iz+0x30>
 8000abc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ac0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ac4:	d912      	bls.n	8000aec <__aeabi_d2iz+0x3c>
 8000ac6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aca:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ace:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ad2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ad6:	fa23 f002 	lsr.w	r0, r3, r2
 8000ada:	bf18      	it	ne
 8000adc:	4240      	negne	r0, r0
 8000ade:	4770      	bx	lr
 8000ae0:	f04f 0000 	mov.w	r0, #0
 8000ae4:	4770      	bx	lr
 8000ae6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aea:	d105      	bne.n	8000af8 <__aeabi_d2iz+0x48>
 8000aec:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000af0:	bf08      	it	eq
 8000af2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000af6:	4770      	bx	lr
 8000af8:	f04f 0000 	mov.w	r0, #0
 8000afc:	4770      	bx	lr
 8000afe:	bf00      	nop

08000b00 <__aeabi_d2f>:
 8000b00:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b04:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b08:	bf24      	itt	cs
 8000b0a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b0e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b12:	d90d      	bls.n	8000b30 <__aeabi_d2f+0x30>
 8000b14:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b18:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b1c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b20:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b24:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b28:	bf08      	it	eq
 8000b2a:	f020 0001 	biceq.w	r0, r0, #1
 8000b2e:	4770      	bx	lr
 8000b30:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b34:	d121      	bne.n	8000b7a <__aeabi_d2f+0x7a>
 8000b36:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b3a:	bfbc      	itt	lt
 8000b3c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b40:	4770      	bxlt	lr
 8000b42:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b46:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b4a:	f1c2 0218 	rsb	r2, r2, #24
 8000b4e:	f1c2 0c20 	rsb	ip, r2, #32
 8000b52:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b56:	fa20 f002 	lsr.w	r0, r0, r2
 8000b5a:	bf18      	it	ne
 8000b5c:	f040 0001 	orrne.w	r0, r0, #1
 8000b60:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b64:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b68:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b6c:	ea40 000c 	orr.w	r0, r0, ip
 8000b70:	fa23 f302 	lsr.w	r3, r3, r2
 8000b74:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b78:	e7cc      	b.n	8000b14 <__aeabi_d2f+0x14>
 8000b7a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b7e:	d107      	bne.n	8000b90 <__aeabi_d2f+0x90>
 8000b80:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b84:	bf1e      	ittt	ne
 8000b86:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b8a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b8e:	4770      	bxne	lr
 8000b90:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b94:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b98:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b9c:	4770      	bx	lr
 8000b9e:	bf00      	nop

08000ba0 <__aeabi_frsub>:
 8000ba0:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000ba4:	e002      	b.n	8000bac <__addsf3>
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_fsub>:
 8000ba8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000bac <__addsf3>:
 8000bac:	0042      	lsls	r2, r0, #1
 8000bae:	bf1f      	itttt	ne
 8000bb0:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000bb4:	ea92 0f03 	teqne	r2, r3
 8000bb8:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000bbc:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bc0:	d06a      	beq.n	8000c98 <__addsf3+0xec>
 8000bc2:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000bc6:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000bca:	bfc1      	itttt	gt
 8000bcc:	18d2      	addgt	r2, r2, r3
 8000bce:	4041      	eorgt	r1, r0
 8000bd0:	4048      	eorgt	r0, r1
 8000bd2:	4041      	eorgt	r1, r0
 8000bd4:	bfb8      	it	lt
 8000bd6:	425b      	neglt	r3, r3
 8000bd8:	2b19      	cmp	r3, #25
 8000bda:	bf88      	it	hi
 8000bdc:	4770      	bxhi	lr
 8000bde:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000be2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000be6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000bea:	bf18      	it	ne
 8000bec:	4240      	negne	r0, r0
 8000bee:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bf2:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bf6:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bfa:	bf18      	it	ne
 8000bfc:	4249      	negne	r1, r1
 8000bfe:	ea92 0f03 	teq	r2, r3
 8000c02:	d03f      	beq.n	8000c84 <__addsf3+0xd8>
 8000c04:	f1a2 0201 	sub.w	r2, r2, #1
 8000c08:	fa41 fc03 	asr.w	ip, r1, r3
 8000c0c:	eb10 000c 	adds.w	r0, r0, ip
 8000c10:	f1c3 0320 	rsb	r3, r3, #32
 8000c14:	fa01 f103 	lsl.w	r1, r1, r3
 8000c18:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c1c:	d502      	bpl.n	8000c24 <__addsf3+0x78>
 8000c1e:	4249      	negs	r1, r1
 8000c20:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c24:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000c28:	d313      	bcc.n	8000c52 <__addsf3+0xa6>
 8000c2a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000c2e:	d306      	bcc.n	8000c3e <__addsf3+0x92>
 8000c30:	0840      	lsrs	r0, r0, #1
 8000c32:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c36:	f102 0201 	add.w	r2, r2, #1
 8000c3a:	2afe      	cmp	r2, #254	; 0xfe
 8000c3c:	d251      	bcs.n	8000ce2 <__addsf3+0x136>
 8000c3e:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c42:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c46:	bf08      	it	eq
 8000c48:	f020 0001 	biceq.w	r0, r0, #1
 8000c4c:	ea40 0003 	orr.w	r0, r0, r3
 8000c50:	4770      	bx	lr
 8000c52:	0049      	lsls	r1, r1, #1
 8000c54:	eb40 0000 	adc.w	r0, r0, r0
 8000c58:	3a01      	subs	r2, #1
 8000c5a:	bf28      	it	cs
 8000c5c:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c60:	d2ed      	bcs.n	8000c3e <__addsf3+0x92>
 8000c62:	fab0 fc80 	clz	ip, r0
 8000c66:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c6a:	ebb2 020c 	subs.w	r2, r2, ip
 8000c6e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c72:	bfaa      	itet	ge
 8000c74:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c78:	4252      	neglt	r2, r2
 8000c7a:	4318      	orrge	r0, r3
 8000c7c:	bfbc      	itt	lt
 8000c7e:	40d0      	lsrlt	r0, r2
 8000c80:	4318      	orrlt	r0, r3
 8000c82:	4770      	bx	lr
 8000c84:	f092 0f00 	teq	r2, #0
 8000c88:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c8c:	bf06      	itte	eq
 8000c8e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c92:	3201      	addeq	r2, #1
 8000c94:	3b01      	subne	r3, #1
 8000c96:	e7b5      	b.n	8000c04 <__addsf3+0x58>
 8000c98:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c9c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000ca0:	bf18      	it	ne
 8000ca2:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ca6:	d021      	beq.n	8000cec <__addsf3+0x140>
 8000ca8:	ea92 0f03 	teq	r2, r3
 8000cac:	d004      	beq.n	8000cb8 <__addsf3+0x10c>
 8000cae:	f092 0f00 	teq	r2, #0
 8000cb2:	bf08      	it	eq
 8000cb4:	4608      	moveq	r0, r1
 8000cb6:	4770      	bx	lr
 8000cb8:	ea90 0f01 	teq	r0, r1
 8000cbc:	bf1c      	itt	ne
 8000cbe:	2000      	movne	r0, #0
 8000cc0:	4770      	bxne	lr
 8000cc2:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000cc6:	d104      	bne.n	8000cd2 <__addsf3+0x126>
 8000cc8:	0040      	lsls	r0, r0, #1
 8000cca:	bf28      	it	cs
 8000ccc:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000cd0:	4770      	bx	lr
 8000cd2:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000cd6:	bf3c      	itt	cc
 8000cd8:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000cdc:	4770      	bxcc	lr
 8000cde:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ce2:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000ce6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cea:	4770      	bx	lr
 8000cec:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cf0:	bf16      	itet	ne
 8000cf2:	4608      	movne	r0, r1
 8000cf4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cf8:	4601      	movne	r1, r0
 8000cfa:	0242      	lsls	r2, r0, #9
 8000cfc:	bf06      	itte	eq
 8000cfe:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000d02:	ea90 0f01 	teqeq	r0, r1
 8000d06:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000d0a:	4770      	bx	lr

08000d0c <__aeabi_ui2f>:
 8000d0c:	f04f 0300 	mov.w	r3, #0
 8000d10:	e004      	b.n	8000d1c <__aeabi_i2f+0x8>
 8000d12:	bf00      	nop

08000d14 <__aeabi_i2f>:
 8000d14:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000d18:	bf48      	it	mi
 8000d1a:	4240      	negmi	r0, r0
 8000d1c:	ea5f 0c00 	movs.w	ip, r0
 8000d20:	bf08      	it	eq
 8000d22:	4770      	bxeq	lr
 8000d24:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000d28:	4601      	mov	r1, r0
 8000d2a:	f04f 0000 	mov.w	r0, #0
 8000d2e:	e01c      	b.n	8000d6a <__aeabi_l2f+0x2a>

08000d30 <__aeabi_ul2f>:
 8000d30:	ea50 0201 	orrs.w	r2, r0, r1
 8000d34:	bf08      	it	eq
 8000d36:	4770      	bxeq	lr
 8000d38:	f04f 0300 	mov.w	r3, #0
 8000d3c:	e00a      	b.n	8000d54 <__aeabi_l2f+0x14>
 8000d3e:	bf00      	nop

08000d40 <__aeabi_l2f>:
 8000d40:	ea50 0201 	orrs.w	r2, r0, r1
 8000d44:	bf08      	it	eq
 8000d46:	4770      	bxeq	lr
 8000d48:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d4c:	d502      	bpl.n	8000d54 <__aeabi_l2f+0x14>
 8000d4e:	4240      	negs	r0, r0
 8000d50:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d54:	ea5f 0c01 	movs.w	ip, r1
 8000d58:	bf02      	ittt	eq
 8000d5a:	4684      	moveq	ip, r0
 8000d5c:	4601      	moveq	r1, r0
 8000d5e:	2000      	moveq	r0, #0
 8000d60:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d64:	bf08      	it	eq
 8000d66:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d6a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d6e:	fabc f28c 	clz	r2, ip
 8000d72:	3a08      	subs	r2, #8
 8000d74:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d78:	db10      	blt.n	8000d9c <__aeabi_l2f+0x5c>
 8000d7a:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d7e:	4463      	add	r3, ip
 8000d80:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d84:	f1c2 0220 	rsb	r2, r2, #32
 8000d88:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d8c:	fa20 f202 	lsr.w	r2, r0, r2
 8000d90:	eb43 0002 	adc.w	r0, r3, r2
 8000d94:	bf08      	it	eq
 8000d96:	f020 0001 	biceq.w	r0, r0, #1
 8000d9a:	4770      	bx	lr
 8000d9c:	f102 0220 	add.w	r2, r2, #32
 8000da0:	fa01 fc02 	lsl.w	ip, r1, r2
 8000da4:	f1c2 0220 	rsb	r2, r2, #32
 8000da8:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000dac:	fa21 f202 	lsr.w	r2, r1, r2
 8000db0:	eb43 0002 	adc.w	r0, r3, r2
 8000db4:	bf08      	it	eq
 8000db6:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000dba:	4770      	bx	lr

08000dbc <__aeabi_fmul>:
 8000dbc:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000dc0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000dc4:	bf1e      	ittt	ne
 8000dc6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000dca:	ea92 0f0c 	teqne	r2, ip
 8000dce:	ea93 0f0c 	teqne	r3, ip
 8000dd2:	d06f      	beq.n	8000eb4 <__aeabi_fmul+0xf8>
 8000dd4:	441a      	add	r2, r3
 8000dd6:	ea80 0c01 	eor.w	ip, r0, r1
 8000dda:	0240      	lsls	r0, r0, #9
 8000ddc:	bf18      	it	ne
 8000dde:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000de2:	d01e      	beq.n	8000e22 <__aeabi_fmul+0x66>
 8000de4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000de8:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000dec:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000df0:	fba0 3101 	umull	r3, r1, r0, r1
 8000df4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000df8:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000dfc:	bf3e      	ittt	cc
 8000dfe:	0049      	lslcc	r1, r1, #1
 8000e00:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000e04:	005b      	lslcc	r3, r3, #1
 8000e06:	ea40 0001 	orr.w	r0, r0, r1
 8000e0a:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000e0e:	2afd      	cmp	r2, #253	; 0xfd
 8000e10:	d81d      	bhi.n	8000e4e <__aeabi_fmul+0x92>
 8000e12:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000e16:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e1a:	bf08      	it	eq
 8000e1c:	f020 0001 	biceq.w	r0, r0, #1
 8000e20:	4770      	bx	lr
 8000e22:	f090 0f00 	teq	r0, #0
 8000e26:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000e2a:	bf08      	it	eq
 8000e2c:	0249      	lsleq	r1, r1, #9
 8000e2e:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000e32:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000e36:	3a7f      	subs	r2, #127	; 0x7f
 8000e38:	bfc2      	ittt	gt
 8000e3a:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e3e:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e42:	4770      	bxgt	lr
 8000e44:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e48:	f04f 0300 	mov.w	r3, #0
 8000e4c:	3a01      	subs	r2, #1
 8000e4e:	dc5d      	bgt.n	8000f0c <__aeabi_fmul+0x150>
 8000e50:	f112 0f19 	cmn.w	r2, #25
 8000e54:	bfdc      	itt	le
 8000e56:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e5a:	4770      	bxle	lr
 8000e5c:	f1c2 0200 	rsb	r2, r2, #0
 8000e60:	0041      	lsls	r1, r0, #1
 8000e62:	fa21 f102 	lsr.w	r1, r1, r2
 8000e66:	f1c2 0220 	rsb	r2, r2, #32
 8000e6a:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e6e:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e72:	f140 0000 	adc.w	r0, r0, #0
 8000e76:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e7a:	bf08      	it	eq
 8000e7c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e80:	4770      	bx	lr
 8000e82:	f092 0f00 	teq	r2, #0
 8000e86:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e8a:	bf02      	ittt	eq
 8000e8c:	0040      	lsleq	r0, r0, #1
 8000e8e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e92:	3a01      	subeq	r2, #1
 8000e94:	d0f9      	beq.n	8000e8a <__aeabi_fmul+0xce>
 8000e96:	ea40 000c 	orr.w	r0, r0, ip
 8000e9a:	f093 0f00 	teq	r3, #0
 8000e9e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ea2:	bf02      	ittt	eq
 8000ea4:	0049      	lsleq	r1, r1, #1
 8000ea6:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000eaa:	3b01      	subeq	r3, #1
 8000eac:	d0f9      	beq.n	8000ea2 <__aeabi_fmul+0xe6>
 8000eae:	ea41 010c 	orr.w	r1, r1, ip
 8000eb2:	e78f      	b.n	8000dd4 <__aeabi_fmul+0x18>
 8000eb4:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000eb8:	ea92 0f0c 	teq	r2, ip
 8000ebc:	bf18      	it	ne
 8000ebe:	ea93 0f0c 	teqne	r3, ip
 8000ec2:	d00a      	beq.n	8000eda <__aeabi_fmul+0x11e>
 8000ec4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000ec8:	bf18      	it	ne
 8000eca:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000ece:	d1d8      	bne.n	8000e82 <__aeabi_fmul+0xc6>
 8000ed0:	ea80 0001 	eor.w	r0, r0, r1
 8000ed4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ed8:	4770      	bx	lr
 8000eda:	f090 0f00 	teq	r0, #0
 8000ede:	bf17      	itett	ne
 8000ee0:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000ee4:	4608      	moveq	r0, r1
 8000ee6:	f091 0f00 	teqne	r1, #0
 8000eea:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000eee:	d014      	beq.n	8000f1a <__aeabi_fmul+0x15e>
 8000ef0:	ea92 0f0c 	teq	r2, ip
 8000ef4:	d101      	bne.n	8000efa <__aeabi_fmul+0x13e>
 8000ef6:	0242      	lsls	r2, r0, #9
 8000ef8:	d10f      	bne.n	8000f1a <__aeabi_fmul+0x15e>
 8000efa:	ea93 0f0c 	teq	r3, ip
 8000efe:	d103      	bne.n	8000f08 <__aeabi_fmul+0x14c>
 8000f00:	024b      	lsls	r3, r1, #9
 8000f02:	bf18      	it	ne
 8000f04:	4608      	movne	r0, r1
 8000f06:	d108      	bne.n	8000f1a <__aeabi_fmul+0x15e>
 8000f08:	ea80 0001 	eor.w	r0, r0, r1
 8000f0c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000f10:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000f14:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f18:	4770      	bx	lr
 8000f1a:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000f1e:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000f22:	4770      	bx	lr

08000f24 <__aeabi_fdiv>:
 8000f24:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000f28:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000f2c:	bf1e      	ittt	ne
 8000f2e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000f32:	ea92 0f0c 	teqne	r2, ip
 8000f36:	ea93 0f0c 	teqne	r3, ip
 8000f3a:	d069      	beq.n	8001010 <__aeabi_fdiv+0xec>
 8000f3c:	eba2 0203 	sub.w	r2, r2, r3
 8000f40:	ea80 0c01 	eor.w	ip, r0, r1
 8000f44:	0249      	lsls	r1, r1, #9
 8000f46:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f4a:	d037      	beq.n	8000fbc <__aeabi_fdiv+0x98>
 8000f4c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f50:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f54:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f58:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f5c:	428b      	cmp	r3, r1
 8000f5e:	bf38      	it	cc
 8000f60:	005b      	lslcc	r3, r3, #1
 8000f62:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f66:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f6a:	428b      	cmp	r3, r1
 8000f6c:	bf24      	itt	cs
 8000f6e:	1a5b      	subcs	r3, r3, r1
 8000f70:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f74:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f78:	bf24      	itt	cs
 8000f7a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f7e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f82:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f86:	bf24      	itt	cs
 8000f88:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f8c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f90:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f94:	bf24      	itt	cs
 8000f96:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f9a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f9e:	011b      	lsls	r3, r3, #4
 8000fa0:	bf18      	it	ne
 8000fa2:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000fa6:	d1e0      	bne.n	8000f6a <__aeabi_fdiv+0x46>
 8000fa8:	2afd      	cmp	r2, #253	; 0xfd
 8000faa:	f63f af50 	bhi.w	8000e4e <__aeabi_fmul+0x92>
 8000fae:	428b      	cmp	r3, r1
 8000fb0:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000fb4:	bf08      	it	eq
 8000fb6:	f020 0001 	biceq.w	r0, r0, #1
 8000fba:	4770      	bx	lr
 8000fbc:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000fc0:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000fc4:	327f      	adds	r2, #127	; 0x7f
 8000fc6:	bfc2      	ittt	gt
 8000fc8:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000fcc:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000fd0:	4770      	bxgt	lr
 8000fd2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000fd6:	f04f 0300 	mov.w	r3, #0
 8000fda:	3a01      	subs	r2, #1
 8000fdc:	e737      	b.n	8000e4e <__aeabi_fmul+0x92>
 8000fde:	f092 0f00 	teq	r2, #0
 8000fe2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000fe6:	bf02      	ittt	eq
 8000fe8:	0040      	lsleq	r0, r0, #1
 8000fea:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000fee:	3a01      	subeq	r2, #1
 8000ff0:	d0f9      	beq.n	8000fe6 <__aeabi_fdiv+0xc2>
 8000ff2:	ea40 000c 	orr.w	r0, r0, ip
 8000ff6:	f093 0f00 	teq	r3, #0
 8000ffa:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ffe:	bf02      	ittt	eq
 8001000:	0049      	lsleq	r1, r1, #1
 8001002:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8001006:	3b01      	subeq	r3, #1
 8001008:	d0f9      	beq.n	8000ffe <__aeabi_fdiv+0xda>
 800100a:	ea41 010c 	orr.w	r1, r1, ip
 800100e:	e795      	b.n	8000f3c <__aeabi_fdiv+0x18>
 8001010:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8001014:	ea92 0f0c 	teq	r2, ip
 8001018:	d108      	bne.n	800102c <__aeabi_fdiv+0x108>
 800101a:	0242      	lsls	r2, r0, #9
 800101c:	f47f af7d 	bne.w	8000f1a <__aeabi_fmul+0x15e>
 8001020:	ea93 0f0c 	teq	r3, ip
 8001024:	f47f af70 	bne.w	8000f08 <__aeabi_fmul+0x14c>
 8001028:	4608      	mov	r0, r1
 800102a:	e776      	b.n	8000f1a <__aeabi_fmul+0x15e>
 800102c:	ea93 0f0c 	teq	r3, ip
 8001030:	d104      	bne.n	800103c <__aeabi_fdiv+0x118>
 8001032:	024b      	lsls	r3, r1, #9
 8001034:	f43f af4c 	beq.w	8000ed0 <__aeabi_fmul+0x114>
 8001038:	4608      	mov	r0, r1
 800103a:	e76e      	b.n	8000f1a <__aeabi_fmul+0x15e>
 800103c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8001040:	bf18      	it	ne
 8001042:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8001046:	d1ca      	bne.n	8000fde <__aeabi_fdiv+0xba>
 8001048:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 800104c:	f47f af5c 	bne.w	8000f08 <__aeabi_fmul+0x14c>
 8001050:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8001054:	f47f af3c 	bne.w	8000ed0 <__aeabi_fmul+0x114>
 8001058:	e75f      	b.n	8000f1a <__aeabi_fmul+0x15e>
 800105a:	bf00      	nop

0800105c <__gesf2>:
 800105c:	f04f 3cff 	mov.w	ip, #4294967295
 8001060:	e006      	b.n	8001070 <__cmpsf2+0x4>
 8001062:	bf00      	nop

08001064 <__lesf2>:
 8001064:	f04f 0c01 	mov.w	ip, #1
 8001068:	e002      	b.n	8001070 <__cmpsf2+0x4>
 800106a:	bf00      	nop

0800106c <__cmpsf2>:
 800106c:	f04f 0c01 	mov.w	ip, #1
 8001070:	f84d cd04 	str.w	ip, [sp, #-4]!
 8001074:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001078:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800107c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001080:	bf18      	it	ne
 8001082:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8001086:	d011      	beq.n	80010ac <__cmpsf2+0x40>
 8001088:	b001      	add	sp, #4
 800108a:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800108e:	bf18      	it	ne
 8001090:	ea90 0f01 	teqne	r0, r1
 8001094:	bf58      	it	pl
 8001096:	ebb2 0003 	subspl.w	r0, r2, r3
 800109a:	bf88      	it	hi
 800109c:	17c8      	asrhi	r0, r1, #31
 800109e:	bf38      	it	cc
 80010a0:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 80010a4:	bf18      	it	ne
 80010a6:	f040 0001 	orrne.w	r0, r0, #1
 80010aa:	4770      	bx	lr
 80010ac:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80010b0:	d102      	bne.n	80010b8 <__cmpsf2+0x4c>
 80010b2:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 80010b6:	d105      	bne.n	80010c4 <__cmpsf2+0x58>
 80010b8:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 80010bc:	d1e4      	bne.n	8001088 <__cmpsf2+0x1c>
 80010be:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 80010c2:	d0e1      	beq.n	8001088 <__cmpsf2+0x1c>
 80010c4:	f85d 0b04 	ldr.w	r0, [sp], #4
 80010c8:	4770      	bx	lr
 80010ca:	bf00      	nop

080010cc <__aeabi_cfrcmple>:
 80010cc:	4684      	mov	ip, r0
 80010ce:	4608      	mov	r0, r1
 80010d0:	4661      	mov	r1, ip
 80010d2:	e7ff      	b.n	80010d4 <__aeabi_cfcmpeq>

080010d4 <__aeabi_cfcmpeq>:
 80010d4:	b50f      	push	{r0, r1, r2, r3, lr}
 80010d6:	f7ff ffc9 	bl	800106c <__cmpsf2>
 80010da:	2800      	cmp	r0, #0
 80010dc:	bf48      	it	mi
 80010de:	f110 0f00 	cmnmi.w	r0, #0
 80010e2:	bd0f      	pop	{r0, r1, r2, r3, pc}

080010e4 <__aeabi_fcmpeq>:
 80010e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010e8:	f7ff fff4 	bl	80010d4 <__aeabi_cfcmpeq>
 80010ec:	bf0c      	ite	eq
 80010ee:	2001      	moveq	r0, #1
 80010f0:	2000      	movne	r0, #0
 80010f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010f6:	bf00      	nop

080010f8 <__aeabi_fcmplt>:
 80010f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010fc:	f7ff ffea 	bl	80010d4 <__aeabi_cfcmpeq>
 8001100:	bf34      	ite	cc
 8001102:	2001      	movcc	r0, #1
 8001104:	2000      	movcs	r0, #0
 8001106:	f85d fb08 	ldr.w	pc, [sp], #8
 800110a:	bf00      	nop

0800110c <__aeabi_fcmple>:
 800110c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001110:	f7ff ffe0 	bl	80010d4 <__aeabi_cfcmpeq>
 8001114:	bf94      	ite	ls
 8001116:	2001      	movls	r0, #1
 8001118:	2000      	movhi	r0, #0
 800111a:	f85d fb08 	ldr.w	pc, [sp], #8
 800111e:	bf00      	nop

08001120 <__aeabi_fcmpge>:
 8001120:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001124:	f7ff ffd2 	bl	80010cc <__aeabi_cfrcmple>
 8001128:	bf94      	ite	ls
 800112a:	2001      	movls	r0, #1
 800112c:	2000      	movhi	r0, #0
 800112e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001132:	bf00      	nop

08001134 <__aeabi_fcmpgt>:
 8001134:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001138:	f7ff ffc8 	bl	80010cc <__aeabi_cfrcmple>
 800113c:	bf34      	ite	cc
 800113e:	2001      	movcc	r0, #1
 8001140:	2000      	movcs	r0, #0
 8001142:	f85d fb08 	ldr.w	pc, [sp], #8
 8001146:	bf00      	nop

08001148 <__aeabi_fcmpun>:
 8001148:	ea4f 0240 	mov.w	r2, r0, lsl #1
 800114c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001150:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001154:	d102      	bne.n	800115c <__aeabi_fcmpun+0x14>
 8001156:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800115a:	d108      	bne.n	800116e <__aeabi_fcmpun+0x26>
 800115c:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001160:	d102      	bne.n	8001168 <__aeabi_fcmpun+0x20>
 8001162:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8001166:	d102      	bne.n	800116e <__aeabi_fcmpun+0x26>
 8001168:	f04f 0000 	mov.w	r0, #0
 800116c:	4770      	bx	lr
 800116e:	f04f 0001 	mov.w	r0, #1
 8001172:	4770      	bx	lr

08001174 <__aeabi_f2iz>:
 8001174:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001178:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 800117c:	d30f      	bcc.n	800119e <__aeabi_f2iz+0x2a>
 800117e:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8001182:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001186:	d90d      	bls.n	80011a4 <__aeabi_f2iz+0x30>
 8001188:	ea4f 2300 	mov.w	r3, r0, lsl #8
 800118c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001190:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8001194:	fa23 f002 	lsr.w	r0, r3, r2
 8001198:	bf18      	it	ne
 800119a:	4240      	negne	r0, r0
 800119c:	4770      	bx	lr
 800119e:	f04f 0000 	mov.w	r0, #0
 80011a2:	4770      	bx	lr
 80011a4:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80011a8:	d101      	bne.n	80011ae <__aeabi_f2iz+0x3a>
 80011aa:	0242      	lsls	r2, r0, #9
 80011ac:	d105      	bne.n	80011ba <__aeabi_f2iz+0x46>
 80011ae:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 80011b2:	bf08      	it	eq
 80011b4:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80011b8:	4770      	bx	lr
 80011ba:	f04f 0000 	mov.w	r0, #0
 80011be:	4770      	bx	lr

080011c0 <__aeabi_f2uiz>:
 80011c0:	0042      	lsls	r2, r0, #1
 80011c2:	d20e      	bcs.n	80011e2 <__aeabi_f2uiz+0x22>
 80011c4:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80011c8:	d30b      	bcc.n	80011e2 <__aeabi_f2uiz+0x22>
 80011ca:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80011ce:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80011d2:	d409      	bmi.n	80011e8 <__aeabi_f2uiz+0x28>
 80011d4:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80011d8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80011dc:	fa23 f002 	lsr.w	r0, r3, r2
 80011e0:	4770      	bx	lr
 80011e2:	f04f 0000 	mov.w	r0, #0
 80011e6:	4770      	bx	lr
 80011e8:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80011ec:	d101      	bne.n	80011f2 <__aeabi_f2uiz+0x32>
 80011ee:	0242      	lsls	r2, r0, #9
 80011f0:	d102      	bne.n	80011f8 <__aeabi_f2uiz+0x38>
 80011f2:	f04f 30ff 	mov.w	r0, #4294967295
 80011f6:	4770      	bx	lr
 80011f8:	f04f 0000 	mov.w	r0, #0
 80011fc:	4770      	bx	lr
 80011fe:	bf00      	nop

08001200 <__aeabi_uldivmod>:
 8001200:	b953      	cbnz	r3, 8001218 <__aeabi_uldivmod+0x18>
 8001202:	b94a      	cbnz	r2, 8001218 <__aeabi_uldivmod+0x18>
 8001204:	2900      	cmp	r1, #0
 8001206:	bf08      	it	eq
 8001208:	2800      	cmpeq	r0, #0
 800120a:	bf1c      	itt	ne
 800120c:	f04f 31ff 	movne.w	r1, #4294967295
 8001210:	f04f 30ff 	movne.w	r0, #4294967295
 8001214:	f000 b96e 	b.w	80014f4 <__aeabi_idiv0>
 8001218:	f1ad 0c08 	sub.w	ip, sp, #8
 800121c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8001220:	f000 f806 	bl	8001230 <__udivmoddi4>
 8001224:	f8dd e004 	ldr.w	lr, [sp, #4]
 8001228:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800122c:	b004      	add	sp, #16
 800122e:	4770      	bx	lr

08001230 <__udivmoddi4>:
 8001230:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001234:	9e08      	ldr	r6, [sp, #32]
 8001236:	460d      	mov	r5, r1
 8001238:	4604      	mov	r4, r0
 800123a:	468e      	mov	lr, r1
 800123c:	2b00      	cmp	r3, #0
 800123e:	f040 8083 	bne.w	8001348 <__udivmoddi4+0x118>
 8001242:	428a      	cmp	r2, r1
 8001244:	4617      	mov	r7, r2
 8001246:	d947      	bls.n	80012d8 <__udivmoddi4+0xa8>
 8001248:	fab2 f382 	clz	r3, r2
 800124c:	b14b      	cbz	r3, 8001262 <__udivmoddi4+0x32>
 800124e:	f1c3 0120 	rsb	r1, r3, #32
 8001252:	fa05 fe03 	lsl.w	lr, r5, r3
 8001256:	fa20 f101 	lsr.w	r1, r0, r1
 800125a:	409f      	lsls	r7, r3
 800125c:	ea41 0e0e 	orr.w	lr, r1, lr
 8001260:	409c      	lsls	r4, r3
 8001262:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8001266:	fbbe fcf8 	udiv	ip, lr, r8
 800126a:	fa1f f987 	uxth.w	r9, r7
 800126e:	fb08 e21c 	mls	r2, r8, ip, lr
 8001272:	fb0c f009 	mul.w	r0, ip, r9
 8001276:	0c21      	lsrs	r1, r4, #16
 8001278:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
 800127c:	4290      	cmp	r0, r2
 800127e:	d90a      	bls.n	8001296 <__udivmoddi4+0x66>
 8001280:	18ba      	adds	r2, r7, r2
 8001282:	f10c 31ff 	add.w	r1, ip, #4294967295
 8001286:	f080 8118 	bcs.w	80014ba <__udivmoddi4+0x28a>
 800128a:	4290      	cmp	r0, r2
 800128c:	f240 8115 	bls.w	80014ba <__udivmoddi4+0x28a>
 8001290:	f1ac 0c02 	sub.w	ip, ip, #2
 8001294:	443a      	add	r2, r7
 8001296:	1a12      	subs	r2, r2, r0
 8001298:	fbb2 f0f8 	udiv	r0, r2, r8
 800129c:	fb08 2210 	mls	r2, r8, r0, r2
 80012a0:	fb00 f109 	mul.w	r1, r0, r9
 80012a4:	b2a4      	uxth	r4, r4
 80012a6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80012aa:	42a1      	cmp	r1, r4
 80012ac:	d909      	bls.n	80012c2 <__udivmoddi4+0x92>
 80012ae:	193c      	adds	r4, r7, r4
 80012b0:	f100 32ff 	add.w	r2, r0, #4294967295
 80012b4:	f080 8103 	bcs.w	80014be <__udivmoddi4+0x28e>
 80012b8:	42a1      	cmp	r1, r4
 80012ba:	f240 8100 	bls.w	80014be <__udivmoddi4+0x28e>
 80012be:	3802      	subs	r0, #2
 80012c0:	443c      	add	r4, r7
 80012c2:	1a64      	subs	r4, r4, r1
 80012c4:	2100      	movs	r1, #0
 80012c6:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80012ca:	b11e      	cbz	r6, 80012d4 <__udivmoddi4+0xa4>
 80012cc:	2200      	movs	r2, #0
 80012ce:	40dc      	lsrs	r4, r3
 80012d0:	e9c6 4200 	strd	r4, r2, [r6]
 80012d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80012d8:	b902      	cbnz	r2, 80012dc <__udivmoddi4+0xac>
 80012da:	deff      	udf	#255	; 0xff
 80012dc:	fab2 f382 	clz	r3, r2
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d14f      	bne.n	8001384 <__udivmoddi4+0x154>
 80012e4:	1a8d      	subs	r5, r1, r2
 80012e6:	2101      	movs	r1, #1
 80012e8:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80012ec:	fa1f f882 	uxth.w	r8, r2
 80012f0:	fbb5 fcfe 	udiv	ip, r5, lr
 80012f4:	fb0e 551c 	mls	r5, lr, ip, r5
 80012f8:	fb08 f00c 	mul.w	r0, r8, ip
 80012fc:	0c22      	lsrs	r2, r4, #16
 80012fe:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
 8001302:	42a8      	cmp	r0, r5
 8001304:	d907      	bls.n	8001316 <__udivmoddi4+0xe6>
 8001306:	197d      	adds	r5, r7, r5
 8001308:	f10c 32ff 	add.w	r2, ip, #4294967295
 800130c:	d202      	bcs.n	8001314 <__udivmoddi4+0xe4>
 800130e:	42a8      	cmp	r0, r5
 8001310:	f200 80e9 	bhi.w	80014e6 <__udivmoddi4+0x2b6>
 8001314:	4694      	mov	ip, r2
 8001316:	1a2d      	subs	r5, r5, r0
 8001318:	fbb5 f0fe 	udiv	r0, r5, lr
 800131c:	fb0e 5510 	mls	r5, lr, r0, r5
 8001320:	fb08 f800 	mul.w	r8, r8, r0
 8001324:	b2a4      	uxth	r4, r4
 8001326:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800132a:	45a0      	cmp	r8, r4
 800132c:	d907      	bls.n	800133e <__udivmoddi4+0x10e>
 800132e:	193c      	adds	r4, r7, r4
 8001330:	f100 32ff 	add.w	r2, r0, #4294967295
 8001334:	d202      	bcs.n	800133c <__udivmoddi4+0x10c>
 8001336:	45a0      	cmp	r8, r4
 8001338:	f200 80d9 	bhi.w	80014ee <__udivmoddi4+0x2be>
 800133c:	4610      	mov	r0, r2
 800133e:	eba4 0408 	sub.w	r4, r4, r8
 8001342:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8001346:	e7c0      	b.n	80012ca <__udivmoddi4+0x9a>
 8001348:	428b      	cmp	r3, r1
 800134a:	d908      	bls.n	800135e <__udivmoddi4+0x12e>
 800134c:	2e00      	cmp	r6, #0
 800134e:	f000 80b1 	beq.w	80014b4 <__udivmoddi4+0x284>
 8001352:	2100      	movs	r1, #0
 8001354:	e9c6 0500 	strd	r0, r5, [r6]
 8001358:	4608      	mov	r0, r1
 800135a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800135e:	fab3 f183 	clz	r1, r3
 8001362:	2900      	cmp	r1, #0
 8001364:	d14b      	bne.n	80013fe <__udivmoddi4+0x1ce>
 8001366:	42ab      	cmp	r3, r5
 8001368:	d302      	bcc.n	8001370 <__udivmoddi4+0x140>
 800136a:	4282      	cmp	r2, r0
 800136c:	f200 80b9 	bhi.w	80014e2 <__udivmoddi4+0x2b2>
 8001370:	1a84      	subs	r4, r0, r2
 8001372:	eb65 0303 	sbc.w	r3, r5, r3
 8001376:	2001      	movs	r0, #1
 8001378:	469e      	mov	lr, r3
 800137a:	2e00      	cmp	r6, #0
 800137c:	d0aa      	beq.n	80012d4 <__udivmoddi4+0xa4>
 800137e:	e9c6 4e00 	strd	r4, lr, [r6]
 8001382:	e7a7      	b.n	80012d4 <__udivmoddi4+0xa4>
 8001384:	409f      	lsls	r7, r3
 8001386:	f1c3 0220 	rsb	r2, r3, #32
 800138a:	40d1      	lsrs	r1, r2
 800138c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8001390:	fbb1 f0fe 	udiv	r0, r1, lr
 8001394:	fa1f f887 	uxth.w	r8, r7
 8001398:	fb0e 1110 	mls	r1, lr, r0, r1
 800139c:	fa24 f202 	lsr.w	r2, r4, r2
 80013a0:	409d      	lsls	r5, r3
 80013a2:	fb00 fc08 	mul.w	ip, r0, r8
 80013a6:	432a      	orrs	r2, r5
 80013a8:	0c15      	lsrs	r5, r2, #16
 80013aa:	ea45 4501 	orr.w	r5, r5, r1, lsl #16
 80013ae:	45ac      	cmp	ip, r5
 80013b0:	fa04 f403 	lsl.w	r4, r4, r3
 80013b4:	d909      	bls.n	80013ca <__udivmoddi4+0x19a>
 80013b6:	197d      	adds	r5, r7, r5
 80013b8:	f100 31ff 	add.w	r1, r0, #4294967295
 80013bc:	f080 808f 	bcs.w	80014de <__udivmoddi4+0x2ae>
 80013c0:	45ac      	cmp	ip, r5
 80013c2:	f240 808c 	bls.w	80014de <__udivmoddi4+0x2ae>
 80013c6:	3802      	subs	r0, #2
 80013c8:	443d      	add	r5, r7
 80013ca:	eba5 050c 	sub.w	r5, r5, ip
 80013ce:	fbb5 f1fe 	udiv	r1, r5, lr
 80013d2:	fb0e 5c11 	mls	ip, lr, r1, r5
 80013d6:	fb01 f908 	mul.w	r9, r1, r8
 80013da:	b295      	uxth	r5, r2
 80013dc:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 80013e0:	45a9      	cmp	r9, r5
 80013e2:	d907      	bls.n	80013f4 <__udivmoddi4+0x1c4>
 80013e4:	197d      	adds	r5, r7, r5
 80013e6:	f101 32ff 	add.w	r2, r1, #4294967295
 80013ea:	d274      	bcs.n	80014d6 <__udivmoddi4+0x2a6>
 80013ec:	45a9      	cmp	r9, r5
 80013ee:	d972      	bls.n	80014d6 <__udivmoddi4+0x2a6>
 80013f0:	3902      	subs	r1, #2
 80013f2:	443d      	add	r5, r7
 80013f4:	eba5 0509 	sub.w	r5, r5, r9
 80013f8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80013fc:	e778      	b.n	80012f0 <__udivmoddi4+0xc0>
 80013fe:	f1c1 0720 	rsb	r7, r1, #32
 8001402:	408b      	lsls	r3, r1
 8001404:	fa22 fc07 	lsr.w	ip, r2, r7
 8001408:	ea4c 0c03 	orr.w	ip, ip, r3
 800140c:	fa25 f407 	lsr.w	r4, r5, r7
 8001410:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8001414:	fbb4 f9fe 	udiv	r9, r4, lr
 8001418:	fa1f f88c 	uxth.w	r8, ip
 800141c:	fb0e 4419 	mls	r4, lr, r9, r4
 8001420:	fa20 f307 	lsr.w	r3, r0, r7
 8001424:	fb09 fa08 	mul.w	sl, r9, r8
 8001428:	408d      	lsls	r5, r1
 800142a:	431d      	orrs	r5, r3
 800142c:	0c2b      	lsrs	r3, r5, #16
 800142e:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8001432:	45a2      	cmp	sl, r4
 8001434:	fa02 f201 	lsl.w	r2, r2, r1
 8001438:	fa00 f301 	lsl.w	r3, r0, r1
 800143c:	d909      	bls.n	8001452 <__udivmoddi4+0x222>
 800143e:	eb1c 0404 	adds.w	r4, ip, r4
 8001442:	f109 30ff 	add.w	r0, r9, #4294967295
 8001446:	d248      	bcs.n	80014da <__udivmoddi4+0x2aa>
 8001448:	45a2      	cmp	sl, r4
 800144a:	d946      	bls.n	80014da <__udivmoddi4+0x2aa>
 800144c:	f1a9 0902 	sub.w	r9, r9, #2
 8001450:	4464      	add	r4, ip
 8001452:	eba4 040a 	sub.w	r4, r4, sl
 8001456:	fbb4 f0fe 	udiv	r0, r4, lr
 800145a:	fb0e 4410 	mls	r4, lr, r0, r4
 800145e:	fb00 fa08 	mul.w	sl, r0, r8
 8001462:	b2ad      	uxth	r5, r5
 8001464:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8001468:	45a2      	cmp	sl, r4
 800146a:	d908      	bls.n	800147e <__udivmoddi4+0x24e>
 800146c:	eb1c 0404 	adds.w	r4, ip, r4
 8001470:	f100 35ff 	add.w	r5, r0, #4294967295
 8001474:	d22d      	bcs.n	80014d2 <__udivmoddi4+0x2a2>
 8001476:	45a2      	cmp	sl, r4
 8001478:	d92b      	bls.n	80014d2 <__udivmoddi4+0x2a2>
 800147a:	3802      	subs	r0, #2
 800147c:	4464      	add	r4, ip
 800147e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8001482:	fba0 8902 	umull	r8, r9, r0, r2
 8001486:	eba4 040a 	sub.w	r4, r4, sl
 800148a:	454c      	cmp	r4, r9
 800148c:	46c6      	mov	lr, r8
 800148e:	464d      	mov	r5, r9
 8001490:	d319      	bcc.n	80014c6 <__udivmoddi4+0x296>
 8001492:	d016      	beq.n	80014c2 <__udivmoddi4+0x292>
 8001494:	b15e      	cbz	r6, 80014ae <__udivmoddi4+0x27e>
 8001496:	ebb3 020e 	subs.w	r2, r3, lr
 800149a:	eb64 0405 	sbc.w	r4, r4, r5
 800149e:	fa04 f707 	lsl.w	r7, r4, r7
 80014a2:	fa22 f301 	lsr.w	r3, r2, r1
 80014a6:	431f      	orrs	r7, r3
 80014a8:	40cc      	lsrs	r4, r1
 80014aa:	e9c6 7400 	strd	r7, r4, [r6]
 80014ae:	2100      	movs	r1, #0
 80014b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80014b4:	4631      	mov	r1, r6
 80014b6:	4630      	mov	r0, r6
 80014b8:	e70c      	b.n	80012d4 <__udivmoddi4+0xa4>
 80014ba:	468c      	mov	ip, r1
 80014bc:	e6eb      	b.n	8001296 <__udivmoddi4+0x66>
 80014be:	4610      	mov	r0, r2
 80014c0:	e6ff      	b.n	80012c2 <__udivmoddi4+0x92>
 80014c2:	4543      	cmp	r3, r8
 80014c4:	d2e6      	bcs.n	8001494 <__udivmoddi4+0x264>
 80014c6:	ebb8 0e02 	subs.w	lr, r8, r2
 80014ca:	eb69 050c 	sbc.w	r5, r9, ip
 80014ce:	3801      	subs	r0, #1
 80014d0:	e7e0      	b.n	8001494 <__udivmoddi4+0x264>
 80014d2:	4628      	mov	r0, r5
 80014d4:	e7d3      	b.n	800147e <__udivmoddi4+0x24e>
 80014d6:	4611      	mov	r1, r2
 80014d8:	e78c      	b.n	80013f4 <__udivmoddi4+0x1c4>
 80014da:	4681      	mov	r9, r0
 80014dc:	e7b9      	b.n	8001452 <__udivmoddi4+0x222>
 80014de:	4608      	mov	r0, r1
 80014e0:	e773      	b.n	80013ca <__udivmoddi4+0x19a>
 80014e2:	4608      	mov	r0, r1
 80014e4:	e749      	b.n	800137a <__udivmoddi4+0x14a>
 80014e6:	f1ac 0c02 	sub.w	ip, ip, #2
 80014ea:	443d      	add	r5, r7
 80014ec:	e713      	b.n	8001316 <__udivmoddi4+0xe6>
 80014ee:	3802      	subs	r0, #2
 80014f0:	443c      	add	r4, r7
 80014f2:	e724      	b.n	800133e <__udivmoddi4+0x10e>

080014f4 <__aeabi_idiv0>:
 80014f4:	4770      	bx	lr
 80014f6:	bf00      	nop

080014f8 <_Z8readBitshhhhPh>:
 * @param bitStart First bit position to read (0-7)
 * @param length Number of bits to read (not more than 8)
 * @param data Container for right-aligned value (i.e. '101' read from any bitStart position will equal 0x05)
 * @return Status of read operation (true = success)
 */
int8_t readBits(uint8_t devAddr, uint8_t regAddr, uint8_t bitStart, uint8_t length, uint8_t *data) {
 80014f8:	b590      	push	{r4, r7, lr}
 80014fa:	b089      	sub	sp, #36	; 0x24
 80014fc:	af04      	add	r7, sp, #16
 80014fe:	4604      	mov	r4, r0
 8001500:	4608      	mov	r0, r1
 8001502:	4611      	mov	r1, r2
 8001504:	461a      	mov	r2, r3
 8001506:	4623      	mov	r3, r4
 8001508:	71fb      	strb	r3, [r7, #7]
 800150a:	4603      	mov	r3, r0
 800150c:	71bb      	strb	r3, [r7, #6]
 800150e:	460b      	mov	r3, r1
 8001510:	717b      	strb	r3, [r7, #5]
 8001512:	4613      	mov	r3, r2
 8001514:	713b      	strb	r3, [r7, #4]
  // 01101001 read byte
  // 76543210 bit numbers
  //    xxx   args: bitStart=4, length=3
  //    010   masked
  //   -> 010 shifted
  sendBuf[0] = regAddr;
 8001516:	4a25      	ldr	r2, [pc, #148]	; (80015ac <_Z8readBitshhhhPh+0xb4>)
 8001518:	79bb      	ldrb	r3, [r7, #6]
 800151a:	7013      	strb	r3, [r2, #0]
  uint8_t buffer;
  while(HAL_I2C_Mem_Read(&hi2c1,devAddr,regAddr,I2C_MEMADD_SIZE_8BIT,&buffer,1,I2CDLY) != HAL_OK){
 800151c:	79fb      	ldrb	r3, [r7, #7]
 800151e:	b299      	uxth	r1, r3
 8001520:	79bb      	ldrb	r3, [r7, #6]
 8001522:	b29a      	uxth	r2, r3
 8001524:	2301      	movs	r3, #1
 8001526:	9302      	str	r3, [sp, #8]
 8001528:	2301      	movs	r3, #1
 800152a:	9301      	str	r3, [sp, #4]
 800152c:	f107 030c 	add.w	r3, r7, #12
 8001530:	9300      	str	r3, [sp, #0]
 8001532:	2301      	movs	r3, #1
 8001534:	481e      	ldr	r0, [pc, #120]	; (80015b0 <_Z8readBitshhhhPh+0xb8>)
 8001536:	f005 f8d1 	bl	80066dc <HAL_I2C_Mem_Read>
 800153a:	4603      	mov	r3, r0
 800153c:	2b00      	cmp	r3, #0
 800153e:	bf14      	ite	ne
 8001540:	2301      	movne	r3, #1
 8001542:	2300      	moveq	r3, #0
 8001544:	b2db      	uxtb	r3, r3
 8001546:	2b00      	cmp	r3, #0
 8001548:	d002      	beq.n	8001550 <_Z8readBitshhhhPh+0x58>
  	  MX_I2C1_Init();
 800154a:	f002 fca9 	bl	8003ea0 <MX_I2C1_Init>
  while(HAL_I2C_Mem_Read(&hi2c1,devAddr,regAddr,I2C_MEMADD_SIZE_8BIT,&buffer,1,I2CDLY) != HAL_OK){
 800154e:	e7e5      	b.n	800151c <_Z8readBitshhhhPh+0x24>
    }
  uint8_t response = BCM2835_I2C_REASON_OK;
 8001550:	2301      	movs	r3, #1
 8001552:	73fb      	strb	r3, [r7, #15]
  uint8_t b = buffer;
 8001554:	7b3b      	ldrb	r3, [r7, #12]
 8001556:	73bb      	strb	r3, [r7, #14]
  if (response == BCM2835_I2C_REASON_OK) {
 8001558:	7bfb      	ldrb	r3, [r7, #15]
 800155a:	2b01      	cmp	r3, #1
 800155c:	d11a      	bne.n	8001594 <_Z8readBitshhhhPh+0x9c>
    uint8_t mask = ((1 << length) - 1) << (bitStart - length + 1);
 800155e:	793b      	ldrb	r3, [r7, #4]
 8001560:	2201      	movs	r2, #1
 8001562:	fa02 f303 	lsl.w	r3, r2, r3
 8001566:	1e5a      	subs	r2, r3, #1
 8001568:	7979      	ldrb	r1, [r7, #5]
 800156a:	793b      	ldrb	r3, [r7, #4]
 800156c:	1acb      	subs	r3, r1, r3
 800156e:	3301      	adds	r3, #1
 8001570:	fa02 f303 	lsl.w	r3, r2, r3
 8001574:	737b      	strb	r3, [r7, #13]
    b &= mask;
 8001576:	7bba      	ldrb	r2, [r7, #14]
 8001578:	7b7b      	ldrb	r3, [r7, #13]
 800157a:	4013      	ands	r3, r2
 800157c:	73bb      	strb	r3, [r7, #14]
    b >>= (bitStart - length + 1);
 800157e:	7bba      	ldrb	r2, [r7, #14]
 8001580:	7979      	ldrb	r1, [r7, #5]
 8001582:	793b      	ldrb	r3, [r7, #4]
 8001584:	1acb      	subs	r3, r1, r3
 8001586:	3301      	adds	r3, #1
 8001588:	fa42 f303 	asr.w	r3, r2, r3
 800158c:	73bb      	strb	r3, [r7, #14]
    *data = b;
 800158e:	6a3b      	ldr	r3, [r7, #32]
 8001590:	7bba      	ldrb	r2, [r7, #14]
 8001592:	701a      	strb	r2, [r3, #0]
  }
  return response == BCM2835_I2C_REASON_OK;
 8001594:	7bfb      	ldrb	r3, [r7, #15]
 8001596:	2b01      	cmp	r3, #1
 8001598:	bf0c      	ite	eq
 800159a:	2301      	moveq	r3, #1
 800159c:	2300      	movne	r3, #0
 800159e:	b2db      	uxtb	r3, r3
 80015a0:	b25b      	sxtb	r3, r3
}
 80015a2:	4618      	mov	r0, r3
 80015a4:	3714      	adds	r7, #20
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bd90      	pop	{r4, r7, pc}
 80015aa:	bf00      	nop
 80015ac:	20000394 	.word	0x20000394
 80015b0:	20000724 	.word	0x20000724

080015b4 <_Z8readBytehhPh>:
 * @param devAddr I2C slave device address
 * @param regAddr Register regAddr to read from
 * @param data Container for byte value read from device
 * @return Status of read operation (true = success)
 */
int8_t readByte(uint8_t devAddr, uint8_t regAddr, uint8_t *data) {
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b088      	sub	sp, #32
 80015b8:	af04      	add	r7, sp, #16
 80015ba:	4603      	mov	r3, r0
 80015bc:	603a      	str	r2, [r7, #0]
 80015be:	71fb      	strb	r3, [r7, #7]
 80015c0:	460b      	mov	r3, r1
 80015c2:	71bb      	strb	r3, [r7, #6]
  sendBuf[0] = regAddr;
 80015c4:	4a16      	ldr	r2, [pc, #88]	; (8001620 <_Z8readBytehhPh+0x6c>)
 80015c6:	79bb      	ldrb	r3, [r7, #6]
 80015c8:	7013      	strb	r3, [r2, #0]
  uint8_t buffer;
  while(HAL_I2C_Mem_Read(&hi2c1,devAddr,regAddr,I2C_MEMADD_SIZE_8BIT,&buffer,1,I2CDLY) != HAL_OK){
 80015ca:	79fb      	ldrb	r3, [r7, #7]
 80015cc:	b299      	uxth	r1, r3
 80015ce:	79bb      	ldrb	r3, [r7, #6]
 80015d0:	b29a      	uxth	r2, r3
 80015d2:	2301      	movs	r3, #1
 80015d4:	9302      	str	r3, [sp, #8]
 80015d6:	2301      	movs	r3, #1
 80015d8:	9301      	str	r3, [sp, #4]
 80015da:	f107 030e 	add.w	r3, r7, #14
 80015de:	9300      	str	r3, [sp, #0]
 80015e0:	2301      	movs	r3, #1
 80015e2:	4810      	ldr	r0, [pc, #64]	; (8001624 <_Z8readBytehhPh+0x70>)
 80015e4:	f005 f87a 	bl	80066dc <HAL_I2C_Mem_Read>
 80015e8:	4603      	mov	r3, r0
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	bf14      	ite	ne
 80015ee:	2301      	movne	r3, #1
 80015f0:	2300      	moveq	r3, #0
 80015f2:	b2db      	uxtb	r3, r3
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d002      	beq.n	80015fe <_Z8readBytehhPh+0x4a>
    MX_I2C1_Init();
 80015f8:	f002 fc52 	bl	8003ea0 <MX_I2C1_Init>
  while(HAL_I2C_Mem_Read(&hi2c1,devAddr,regAddr,I2C_MEMADD_SIZE_8BIT,&buffer,1,I2CDLY) != HAL_OK){
 80015fc:	e7e5      	b.n	80015ca <_Z8readBytehhPh+0x16>
  }
  uint8_t response = BCM2835_I2C_REASON_OK;
 80015fe:	2301      	movs	r3, #1
 8001600:	73fb      	strb	r3, [r7, #15]
  data[0] = buffer;
 8001602:	7bba      	ldrb	r2, [r7, #14]
 8001604:	683b      	ldr	r3, [r7, #0]
 8001606:	701a      	strb	r2, [r3, #0]
  return response == BCM2835_I2C_REASON_OK;
 8001608:	7bfb      	ldrb	r3, [r7, #15]
 800160a:	2b01      	cmp	r3, #1
 800160c:	bf0c      	ite	eq
 800160e:	2301      	moveq	r3, #1
 8001610:	2300      	movne	r3, #0
 8001612:	b2db      	uxtb	r3, r3
 8001614:	b25b      	sxtb	r3, r3
}
 8001616:	4618      	mov	r0, r3
 8001618:	3710      	adds	r7, #16
 800161a:	46bd      	mov	sp, r7
 800161c:	bd80      	pop	{r7, pc}
 800161e:	bf00      	nop
 8001620:	20000394 	.word	0x20000394
 8001624:	20000724 	.word	0x20000724

08001628 <_Z9readByteshhhPh>:
 * @param regAddr First register regAddr to read from
 * @param length Number of bytes to read
 * @param data Buffer to store read data in
 * @return I2C_TransferReturn_TypeDef http://downloads.energymicro.com/documentation/doxygen/group__I2C.html
 */
int8_t readBytes(uint8_t devAddr, uint8_t regAddr, uint8_t length, uint8_t *data) {
 8001628:	b5b0      	push	{r4, r5, r7, lr}
 800162a:	b08a      	sub	sp, #40	; 0x28
 800162c:	af04      	add	r7, sp, #16
 800162e:	603b      	str	r3, [r7, #0]
 8001630:	4603      	mov	r3, r0
 8001632:	71fb      	strb	r3, [r7, #7]
 8001634:	460b      	mov	r3, r1
 8001636:	71bb      	strb	r3, [r7, #6]
 8001638:	4613      	mov	r3, r2
 800163a:	717b      	strb	r3, [r7, #5]
  uint8_t response = BCM2835_I2C_REASON_OK;
  int i ;
  for (i = 0; i < length ; i++) {
    data[i] = (uint8_t) buffer[i];
  }
  return response == BCM2835_I2C_REASON_OK;
 800163c:	466b      	mov	r3, sp
 800163e:	461d      	mov	r5, r3
  sendBuf[0] = regAddr;
 8001640:	4a32      	ldr	r2, [pc, #200]	; (800170c <_Z9readByteshhhPh+0xe4>)
 8001642:	79bb      	ldrb	r3, [r7, #6]
 8001644:	7013      	strb	r3, [r2, #0]
  uint8_t buffer[length];
 8001646:	797b      	ldrb	r3, [r7, #5]
 8001648:	1e5c      	subs	r4, r3, #1
 800164a:	613c      	str	r4, [r7, #16]
 800164c:	4623      	mov	r3, r4
 800164e:	3301      	adds	r3, #1
 8001650:	4618      	mov	r0, r3
 8001652:	f04f 0100 	mov.w	r1, #0
 8001656:	f04f 0200 	mov.w	r2, #0
 800165a:	f04f 0300 	mov.w	r3, #0
 800165e:	00cb      	lsls	r3, r1, #3
 8001660:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8001664:	00c2      	lsls	r2, r0, #3
 8001666:	4623      	mov	r3, r4
 8001668:	3301      	adds	r3, #1
 800166a:	4618      	mov	r0, r3
 800166c:	f04f 0100 	mov.w	r1, #0
 8001670:	f04f 0200 	mov.w	r2, #0
 8001674:	f04f 0300 	mov.w	r3, #0
 8001678:	00cb      	lsls	r3, r1, #3
 800167a:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800167e:	00c2      	lsls	r2, r0, #3
 8001680:	4623      	mov	r3, r4
 8001682:	3301      	adds	r3, #1
 8001684:	3307      	adds	r3, #7
 8001686:	08db      	lsrs	r3, r3, #3
 8001688:	00db      	lsls	r3, r3, #3
 800168a:	ebad 0d03 	sub.w	sp, sp, r3
 800168e:	ab04      	add	r3, sp, #16
 8001690:	3300      	adds	r3, #0
 8001692:	60fb      	str	r3, [r7, #12]
  while(HAL_I2C_Mem_Read(&hi2c1,devAddr,regAddr,I2C_MEMADD_SIZE_8BIT,buffer,length,I2CDLY) != HAL_OK){
 8001694:	79fb      	ldrb	r3, [r7, #7]
 8001696:	b299      	uxth	r1, r3
 8001698:	79bb      	ldrb	r3, [r7, #6]
 800169a:	b298      	uxth	r0, r3
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	797a      	ldrb	r2, [r7, #5]
 80016a0:	b292      	uxth	r2, r2
 80016a2:	2401      	movs	r4, #1
 80016a4:	9402      	str	r4, [sp, #8]
 80016a6:	9201      	str	r2, [sp, #4]
 80016a8:	9300      	str	r3, [sp, #0]
 80016aa:	2301      	movs	r3, #1
 80016ac:	4602      	mov	r2, r0
 80016ae:	4818      	ldr	r0, [pc, #96]	; (8001710 <_Z9readByteshhhPh+0xe8>)
 80016b0:	f005 f814 	bl	80066dc <HAL_I2C_Mem_Read>
 80016b4:	4603      	mov	r3, r0
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	bf14      	ite	ne
 80016ba:	2301      	movne	r3, #1
 80016bc:	2300      	moveq	r3, #0
 80016be:	b2db      	uxtb	r3, r3
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d002      	beq.n	80016ca <_Z9readByteshhhPh+0xa2>
    MX_I2C1_Init();
 80016c4:	f002 fbec 	bl	8003ea0 <MX_I2C1_Init>
  while(HAL_I2C_Mem_Read(&hi2c1,devAddr,regAddr,I2C_MEMADD_SIZE_8BIT,buffer,length,I2CDLY) != HAL_OK){
 80016c8:	e7e4      	b.n	8001694 <_Z9readByteshhhPh+0x6c>
  uint8_t response = BCM2835_I2C_REASON_OK;
 80016ca:	2301      	movs	r3, #1
 80016cc:	72fb      	strb	r3, [r7, #11]
  for (i = 0; i < length ; i++) {
 80016ce:	2300      	movs	r3, #0
 80016d0:	617b      	str	r3, [r7, #20]
 80016d2:	797b      	ldrb	r3, [r7, #5]
 80016d4:	697a      	ldr	r2, [r7, #20]
 80016d6:	429a      	cmp	r2, r3
 80016d8:	da0b      	bge.n	80016f2 <_Z9readByteshhhPh+0xca>
    data[i] = (uint8_t) buffer[i];
 80016da:	697b      	ldr	r3, [r7, #20]
 80016dc:	683a      	ldr	r2, [r7, #0]
 80016de:	4413      	add	r3, r2
 80016e0:	68f9      	ldr	r1, [r7, #12]
 80016e2:	697a      	ldr	r2, [r7, #20]
 80016e4:	440a      	add	r2, r1
 80016e6:	7812      	ldrb	r2, [r2, #0]
 80016e8:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < length ; i++) {
 80016ea:	697b      	ldr	r3, [r7, #20]
 80016ec:	3301      	adds	r3, #1
 80016ee:	617b      	str	r3, [r7, #20]
 80016f0:	e7ef      	b.n	80016d2 <_Z9readByteshhhPh+0xaa>
  return response == BCM2835_I2C_REASON_OK;
 80016f2:	7afb      	ldrb	r3, [r7, #11]
 80016f4:	2b01      	cmp	r3, #1
 80016f6:	bf0c      	ite	eq
 80016f8:	2301      	moveq	r3, #1
 80016fa:	2300      	movne	r3, #0
 80016fc:	b2db      	uxtb	r3, r3
 80016fe:	b25b      	sxtb	r3, r3
 8001700:	46ad      	mov	sp, r5
}
 8001702:	4618      	mov	r0, r3
 8001704:	3718      	adds	r7, #24
 8001706:	46bd      	mov	sp, r7
 8001708:	bdb0      	pop	{r4, r5, r7, pc}
 800170a:	bf00      	nop
 800170c:	20000394 	.word	0x20000394
 8001710:	20000724 	.word	0x20000724

08001714 <_Z8writeBithhhh>:
 * @param regAddr Register regAddr to write to
 * @param bitNum Bit position to write (0-7)
 * @param value New bit value to write
 * @return Status of operation (true = success)
 */
bool writeBit(uint8_t devAddr, uint8_t regAddr, uint8_t bitNum, uint8_t data) {
 8001714:	b590      	push	{r4, r7, lr}
 8001716:	b089      	sub	sp, #36	; 0x24
 8001718:	af04      	add	r7, sp, #16
 800171a:	4604      	mov	r4, r0
 800171c:	4608      	mov	r0, r1
 800171e:	4611      	mov	r1, r2
 8001720:	461a      	mov	r2, r3
 8001722:	4623      	mov	r3, r4
 8001724:	71fb      	strb	r3, [r7, #7]
 8001726:	4603      	mov	r3, r0
 8001728:	71bb      	strb	r3, [r7, #6]
 800172a:	460b      	mov	r3, r1
 800172c:	717b      	strb	r3, [r7, #5]
 800172e:	4613      	mov	r3, r2
 8001730:	713b      	strb	r3, [r7, #4]

  //first reading registery value
  sendBuf[0] = regAddr;
 8001732:	4a34      	ldr	r2, [pc, #208]	; (8001804 <_Z8writeBithhhh+0xf0>)
 8001734:	79bb      	ldrb	r3, [r7, #6]
 8001736:	7013      	strb	r3, [r2, #0]
  uint8_t buffer;
  while(HAL_I2C_Mem_Read(&hi2c1,devAddr,regAddr,I2C_MEMADD_SIZE_8BIT,&buffer,1,I2CDLY) != HAL_OK){
 8001738:	79fb      	ldrb	r3, [r7, #7]
 800173a:	b299      	uxth	r1, r3
 800173c:	79bb      	ldrb	r3, [r7, #6]
 800173e:	b29a      	uxth	r2, r3
 8001740:	2301      	movs	r3, #1
 8001742:	9302      	str	r3, [sp, #8]
 8001744:	2301      	movs	r3, #1
 8001746:	9301      	str	r3, [sp, #4]
 8001748:	f107 030e 	add.w	r3, r7, #14
 800174c:	9300      	str	r3, [sp, #0]
 800174e:	2301      	movs	r3, #1
 8001750:	482d      	ldr	r0, [pc, #180]	; (8001808 <_Z8writeBithhhh+0xf4>)
 8001752:	f004 ffc3 	bl	80066dc <HAL_I2C_Mem_Read>
 8001756:	4603      	mov	r3, r0
 8001758:	2b00      	cmp	r3, #0
 800175a:	bf14      	ite	ne
 800175c:	2301      	movne	r3, #1
 800175e:	2300      	moveq	r3, #0
 8001760:	b2db      	uxtb	r3, r3
 8001762:	2b00      	cmp	r3, #0
 8001764:	d002      	beq.n	800176c <_Z8writeBithhhh+0x58>
    MX_I2C1_Init();
 8001766:	f002 fb9b 	bl	8003ea0 <MX_I2C1_Init>
  while(HAL_I2C_Mem_Read(&hi2c1,devAddr,regAddr,I2C_MEMADD_SIZE_8BIT,&buffer,1,I2CDLY) != HAL_OK){
 800176a:	e7e5      	b.n	8001738 <_Z8writeBithhhh+0x24>
  }
  uint8_t response = BCM2835_I2C_REASON_OK;
 800176c:	2301      	movs	r3, #1
 800176e:	73fb      	strb	r3, [r7, #15]
  if ( response == BCM2835_I2C_REASON_OK ) {
 8001770:	7bfb      	ldrb	r3, [r7, #15]
 8001772:	2b01      	cmp	r3, #1
 8001774:	d13b      	bne.n	80017ee <_Z8writeBithhhh+0xda>
    uint8_t b = buffer ;
 8001776:	7bbb      	ldrb	r3, [r7, #14]
 8001778:	737b      	strb	r3, [r7, #13]
    b = (data != 0) ? (b | (1 << bitNum)) : (b & ~(1 << bitNum));
 800177a:	793b      	ldrb	r3, [r7, #4]
 800177c:	2b00      	cmp	r3, #0
 800177e:	d00a      	beq.n	8001796 <_Z8writeBithhhh+0x82>
 8001780:	797b      	ldrb	r3, [r7, #5]
 8001782:	2201      	movs	r2, #1
 8001784:	fa02 f303 	lsl.w	r3, r2, r3
 8001788:	b25a      	sxtb	r2, r3
 800178a:	7b7b      	ldrb	r3, [r7, #13]
 800178c:	b25b      	sxtb	r3, r3
 800178e:	4313      	orrs	r3, r2
 8001790:	b25b      	sxtb	r3, r3
 8001792:	b2db      	uxtb	r3, r3
 8001794:	e00b      	b.n	80017ae <_Z8writeBithhhh+0x9a>
 8001796:	797b      	ldrb	r3, [r7, #5]
 8001798:	2201      	movs	r2, #1
 800179a:	fa02 f303 	lsl.w	r3, r2, r3
 800179e:	b25b      	sxtb	r3, r3
 80017a0:	43db      	mvns	r3, r3
 80017a2:	b25a      	sxtb	r2, r3
 80017a4:	7b7b      	ldrb	r3, [r7, #13]
 80017a6:	b25b      	sxtb	r3, r3
 80017a8:	4013      	ands	r3, r2
 80017aa:	b25b      	sxtb	r3, r3
 80017ac:	b2db      	uxtb	r3, r3
 80017ae:	737b      	strb	r3, [r7, #13]
    sendBuf[1] = b ;
 80017b0:	7b7a      	ldrb	r2, [r7, #13]
 80017b2:	4b14      	ldr	r3, [pc, #80]	; (8001804 <_Z8writeBithhhh+0xf0>)
 80017b4:	705a      	strb	r2, [r3, #1]
    while(HAL_I2C_Mem_Write(&hi2c1,devAddr,regAddr, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&b, 1,I2CDLY) != HAL_OK){
 80017b6:	79fb      	ldrb	r3, [r7, #7]
 80017b8:	b299      	uxth	r1, r3
 80017ba:	79bb      	ldrb	r3, [r7, #6]
 80017bc:	b29a      	uxth	r2, r3
 80017be:	2301      	movs	r3, #1
 80017c0:	9302      	str	r3, [sp, #8]
 80017c2:	2301      	movs	r3, #1
 80017c4:	9301      	str	r3, [sp, #4]
 80017c6:	f107 030d 	add.w	r3, r7, #13
 80017ca:	9300      	str	r3, [sp, #0]
 80017cc:	2301      	movs	r3, #1
 80017ce:	480e      	ldr	r0, [pc, #56]	; (8001808 <_Z8writeBithhhh+0xf4>)
 80017d0:	f004 fe8a 	bl	80064e8 <HAL_I2C_Mem_Write>
 80017d4:	4603      	mov	r3, r0
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	bf14      	ite	ne
 80017da:	2301      	movne	r3, #1
 80017dc:	2300      	moveq	r3, #0
 80017de:	b2db      	uxtb	r3, r3
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d002      	beq.n	80017ea <_Z8writeBithhhh+0xd6>
    	MX_I2C1_Init();
 80017e4:	f002 fb5c 	bl	8003ea0 <MX_I2C1_Init>
    while(HAL_I2C_Mem_Write(&hi2c1,devAddr,regAddr, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&b, 1,I2CDLY) != HAL_OK){
 80017e8:	e7e5      	b.n	80017b6 <_Z8writeBithhhh+0xa2>
    }
    response = BCM2835_I2C_REASON_OK;
 80017ea:	2301      	movs	r3, #1
 80017ec:	73fb      	strb	r3, [r7, #15]
  }
  return response == BCM2835_I2C_REASON_OK;
 80017ee:	7bfb      	ldrb	r3, [r7, #15]
 80017f0:	2b01      	cmp	r3, #1
 80017f2:	bf0c      	ite	eq
 80017f4:	2301      	moveq	r3, #1
 80017f6:	2300      	movne	r3, #0
 80017f8:	b2db      	uxtb	r3, r3
}
 80017fa:	4618      	mov	r0, r3
 80017fc:	3714      	adds	r7, #20
 80017fe:	46bd      	mov	sp, r7
 8001800:	bd90      	pop	{r4, r7, pc}
 8001802:	bf00      	nop
 8001804:	20000394 	.word	0x20000394
 8001808:	20000724 	.word	0x20000724

0800180c <_Z9writeBitshhhhh>:
 * @param bitStart First bit position to write (0-7)
 * @param length Number of bits to write (not more than 8)
 * @param data Right-aligned value to write
 * @return Status of operation (true = success)
 */
bool writeBits(uint8_t devAddr, uint8_t regAddr, uint8_t bitStart, uint8_t length, uint8_t data) {
 800180c:	b590      	push	{r4, r7, lr}
 800180e:	b089      	sub	sp, #36	; 0x24
 8001810:	af04      	add	r7, sp, #16
 8001812:	4604      	mov	r4, r0
 8001814:	4608      	mov	r0, r1
 8001816:	4611      	mov	r1, r2
 8001818:	461a      	mov	r2, r3
 800181a:	4623      	mov	r3, r4
 800181c:	71fb      	strb	r3, [r7, #7]
 800181e:	4603      	mov	r3, r0
 8001820:	71bb      	strb	r3, [r7, #6]
 8001822:	460b      	mov	r3, r1
 8001824:	717b      	strb	r3, [r7, #5]
 8001826:	4613      	mov	r3, r2
 8001828:	713b      	strb	r3, [r7, #4]
  // 10101111 original value (sample)
  // 10100011 original & ~mask
  // 10101011 masked | value

  //first reading registery value
  sendBuf[0] = regAddr;
 800182a:	4a3c      	ldr	r2, [pc, #240]	; (800191c <_Z9writeBitshhhhh+0x110>)
 800182c:	79bb      	ldrb	r3, [r7, #6]
 800182e:	7013      	strb	r3, [r2, #0]
  uint8_t buffer;
  while(HAL_I2C_Mem_Read(&hi2c1,devAddr,regAddr,I2C_MEMADD_SIZE_8BIT,&buffer,1,I2CDLY) != HAL_OK){
 8001830:	79fb      	ldrb	r3, [r7, #7]
 8001832:	b299      	uxth	r1, r3
 8001834:	79bb      	ldrb	r3, [r7, #6]
 8001836:	b29a      	uxth	r2, r3
 8001838:	2301      	movs	r3, #1
 800183a:	9302      	str	r3, [sp, #8]
 800183c:	2301      	movs	r3, #1
 800183e:	9301      	str	r3, [sp, #4]
 8001840:	f107 030d 	add.w	r3, r7, #13
 8001844:	9300      	str	r3, [sp, #0]
 8001846:	2301      	movs	r3, #1
 8001848:	4835      	ldr	r0, [pc, #212]	; (8001920 <_Z9writeBitshhhhh+0x114>)
 800184a:	f004 ff47 	bl	80066dc <HAL_I2C_Mem_Read>
 800184e:	4603      	mov	r3, r0
 8001850:	2b00      	cmp	r3, #0
 8001852:	bf14      	ite	ne
 8001854:	2301      	movne	r3, #1
 8001856:	2300      	moveq	r3, #0
 8001858:	b2db      	uxtb	r3, r3
 800185a:	2b00      	cmp	r3, #0
 800185c:	d002      	beq.n	8001864 <_Z9writeBitshhhhh+0x58>
    MX_I2C1_Init();
 800185e:	f002 fb1f 	bl	8003ea0 <MX_I2C1_Init>
  while(HAL_I2C_Mem_Read(&hi2c1,devAddr,regAddr,I2C_MEMADD_SIZE_8BIT,&buffer,1,I2CDLY) != HAL_OK){
 8001862:	e7e5      	b.n	8001830 <_Z9writeBitshhhhh+0x24>
  }
  uint8_t response = BCM2835_I2C_REASON_OK;
 8001864:	2301      	movs	r3, #1
 8001866:	73fb      	strb	r3, [r7, #15]
  if ( response == BCM2835_I2C_REASON_OK ) {
 8001868:	7bfb      	ldrb	r3, [r7, #15]
 800186a:	2b01      	cmp	r3, #1
 800186c:	d14c      	bne.n	8001908 <_Z9writeBitshhhhh+0xfc>
    uint8_t b = buffer;
 800186e:	7b7b      	ldrb	r3, [r7, #13]
 8001870:	733b      	strb	r3, [r7, #12]
    uint8_t mask = ((1 << length) - 1) << (bitStart - length + 1);
 8001872:	793b      	ldrb	r3, [r7, #4]
 8001874:	2201      	movs	r2, #1
 8001876:	fa02 f303 	lsl.w	r3, r2, r3
 800187a:	1e5a      	subs	r2, r3, #1
 800187c:	7979      	ldrb	r1, [r7, #5]
 800187e:	793b      	ldrb	r3, [r7, #4]
 8001880:	1acb      	subs	r3, r1, r3
 8001882:	3301      	adds	r3, #1
 8001884:	fa02 f303 	lsl.w	r3, r2, r3
 8001888:	73bb      	strb	r3, [r7, #14]
    data <<= (bitStart - length + 1); // shift data into correct position
 800188a:	f897 2020 	ldrb.w	r2, [r7, #32]
 800188e:	7979      	ldrb	r1, [r7, #5]
 8001890:	793b      	ldrb	r3, [r7, #4]
 8001892:	1acb      	subs	r3, r1, r3
 8001894:	3301      	adds	r3, #1
 8001896:	fa02 f303 	lsl.w	r3, r2, r3
 800189a:	f887 3020 	strb.w	r3, [r7, #32]
    data &= mask; // zero all non-important bits in data
 800189e:	f897 2020 	ldrb.w	r2, [r7, #32]
 80018a2:	7bbb      	ldrb	r3, [r7, #14]
 80018a4:	4013      	ands	r3, r2
 80018a6:	f887 3020 	strb.w	r3, [r7, #32]
    b &= ~(mask); // zero all important bits in existing byte
 80018aa:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80018ae:	43db      	mvns	r3, r3
 80018b0:	b25a      	sxtb	r2, r3
 80018b2:	7b3b      	ldrb	r3, [r7, #12]
 80018b4:	b25b      	sxtb	r3, r3
 80018b6:	4013      	ands	r3, r2
 80018b8:	b25b      	sxtb	r3, r3
 80018ba:	b2db      	uxtb	r3, r3
 80018bc:	733b      	strb	r3, [r7, #12]
    b |= data; // combine data with existing byte
 80018be:	7b3a      	ldrb	r2, [r7, #12]
 80018c0:	f897 3020 	ldrb.w	r3, [r7, #32]
 80018c4:	4313      	orrs	r3, r2
 80018c6:	b2db      	uxtb	r3, r3
 80018c8:	733b      	strb	r3, [r7, #12]
    sendBuf[1] = b ;
 80018ca:	7b3a      	ldrb	r2, [r7, #12]
 80018cc:	4b13      	ldr	r3, [pc, #76]	; (800191c <_Z9writeBitshhhhh+0x110>)
 80018ce:	705a      	strb	r2, [r3, #1]
    while(HAL_I2C_Mem_Write(&hi2c1,devAddr,regAddr, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&b, 1,I2CDLY) != HAL_OK){
 80018d0:	79fb      	ldrb	r3, [r7, #7]
 80018d2:	b299      	uxth	r1, r3
 80018d4:	79bb      	ldrb	r3, [r7, #6]
 80018d6:	b29a      	uxth	r2, r3
 80018d8:	2301      	movs	r3, #1
 80018da:	9302      	str	r3, [sp, #8]
 80018dc:	2301      	movs	r3, #1
 80018de:	9301      	str	r3, [sp, #4]
 80018e0:	f107 030c 	add.w	r3, r7, #12
 80018e4:	9300      	str	r3, [sp, #0]
 80018e6:	2301      	movs	r3, #1
 80018e8:	480d      	ldr	r0, [pc, #52]	; (8001920 <_Z9writeBitshhhhh+0x114>)
 80018ea:	f004 fdfd 	bl	80064e8 <HAL_I2C_Mem_Write>
 80018ee:	4603      	mov	r3, r0
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	bf14      	ite	ne
 80018f4:	2301      	movne	r3, #1
 80018f6:	2300      	moveq	r3, #0
 80018f8:	b2db      	uxtb	r3, r3
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d002      	beq.n	8001904 <_Z9writeBitshhhhh+0xf8>
       MX_I2C1_Init();
 80018fe:	f002 facf 	bl	8003ea0 <MX_I2C1_Init>
    while(HAL_I2C_Mem_Write(&hi2c1,devAddr,regAddr, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&b, 1,I2CDLY) != HAL_OK){
 8001902:	e7e5      	b.n	80018d0 <_Z9writeBitshhhhh+0xc4>
    }
    response = BCM2835_I2C_REASON_OK;
 8001904:	2301      	movs	r3, #1
 8001906:	73fb      	strb	r3, [r7, #15]
    }
  return response == BCM2835_I2C_REASON_OK;
 8001908:	7bfb      	ldrb	r3, [r7, #15]
 800190a:	2b01      	cmp	r3, #1
 800190c:	bf0c      	ite	eq
 800190e:	2301      	moveq	r3, #1
 8001910:	2300      	movne	r3, #0
 8001912:	b2db      	uxtb	r3, r3
}
 8001914:	4618      	mov	r0, r3
 8001916:	3714      	adds	r7, #20
 8001918:	46bd      	mov	sp, r7
 800191a:	bd90      	pop	{r4, r7, pc}
 800191c:	20000394 	.word	0x20000394
 8001920:	20000724 	.word	0x20000724

08001924 <_Z9writeBytehhh>:
 * @param devAddr I2C slave device address
 * @param regAddr Register address to write to
 * @param data New byte value to write
 * @return Status of operation (true = success)
 */
bool writeByte(uint8_t devAddr, uint8_t regAddr, uint8_t data) {
 8001924:	b580      	push	{r7, lr}
 8001926:	b088      	sub	sp, #32
 8001928:	af04      	add	r7, sp, #16
 800192a:	4603      	mov	r3, r0
 800192c:	71fb      	strb	r3, [r7, #7]
 800192e:	460b      	mov	r3, r1
 8001930:	71bb      	strb	r3, [r7, #6]
 8001932:	4613      	mov	r3, r2
 8001934:	717b      	strb	r3, [r7, #5]

  sendBuf[0] = regAddr;
 8001936:	4a15      	ldr	r2, [pc, #84]	; (800198c <_Z9writeBytehhh+0x68>)
 8001938:	79bb      	ldrb	r3, [r7, #6]
 800193a:	7013      	strb	r3, [r2, #0]
  sendBuf[1] = data;
 800193c:	797a      	ldrb	r2, [r7, #5]
 800193e:	4b13      	ldr	r3, [pc, #76]	; (800198c <_Z9writeBytehhh+0x68>)
 8001940:	705a      	strb	r2, [r3, #1]
  while(HAL_I2C_Mem_Write(&hi2c1,devAddr,regAddr, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&data, 1,I2CDLY) != HAL_OK){
 8001942:	79fb      	ldrb	r3, [r7, #7]
 8001944:	b299      	uxth	r1, r3
 8001946:	79bb      	ldrb	r3, [r7, #6]
 8001948:	b29a      	uxth	r2, r3
 800194a:	2301      	movs	r3, #1
 800194c:	9302      	str	r3, [sp, #8]
 800194e:	2301      	movs	r3, #1
 8001950:	9301      	str	r3, [sp, #4]
 8001952:	1d7b      	adds	r3, r7, #5
 8001954:	9300      	str	r3, [sp, #0]
 8001956:	2301      	movs	r3, #1
 8001958:	480d      	ldr	r0, [pc, #52]	; (8001990 <_Z9writeBytehhh+0x6c>)
 800195a:	f004 fdc5 	bl	80064e8 <HAL_I2C_Mem_Write>
 800195e:	4603      	mov	r3, r0
 8001960:	2b00      	cmp	r3, #0
 8001962:	bf14      	ite	ne
 8001964:	2301      	movne	r3, #1
 8001966:	2300      	moveq	r3, #0
 8001968:	b2db      	uxtb	r3, r3
 800196a:	2b00      	cmp	r3, #0
 800196c:	d002      	beq.n	8001974 <_Z9writeBytehhh+0x50>
     MX_I2C1_Init();
 800196e:	f002 fa97 	bl	8003ea0 <MX_I2C1_Init>
  while(HAL_I2C_Mem_Write(&hi2c1,devAddr,regAddr, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&data, 1,I2CDLY) != HAL_OK){
 8001972:	e7e6      	b.n	8001942 <_Z9writeBytehhh+0x1e>
  }
  uint8_t response = BCM2835_I2C_REASON_OK;
 8001974:	2301      	movs	r3, #1
 8001976:	73fb      	strb	r3, [r7, #15]
  return response == BCM2835_I2C_REASON_OK ;
 8001978:	7bfb      	ldrb	r3, [r7, #15]
 800197a:	2b01      	cmp	r3, #1
 800197c:	bf0c      	ite	eq
 800197e:	2301      	moveq	r3, #1
 8001980:	2300      	movne	r3, #0
 8001982:	b2db      	uxtb	r3, r3
}
 8001984:	4618      	mov	r0, r3
 8001986:	3710      	adds	r7, #16
 8001988:	46bd      	mov	sp, r7
 800198a:	bd80      	pop	{r7, pc}
 800198c:	20000394 	.word	0x20000394
 8001990:	20000724 	.word	0x20000724

08001994 <_Z9writeWordhht>:
    data[i] = (buffer[i*2] << 8) | buffer[i*2+1] ;
  }
  return  response == BCM2835_I2C_REASON_OK ;
}

bool writeWord(uint8_t devAddr, uint8_t regAddr, uint16_t data){
 8001994:	b580      	push	{r7, lr}
 8001996:	b088      	sub	sp, #32
 8001998:	af04      	add	r7, sp, #16
 800199a:	4603      	mov	r3, r0
 800199c:	71fb      	strb	r3, [r7, #7]
 800199e:	460b      	mov	r3, r1
 80019a0:	71bb      	strb	r3, [r7, #6]
 80019a2:	4613      	mov	r3, r2
 80019a4:	80bb      	strh	r3, [r7, #4]

  sendBuf[0] = (uint8_t) (data >> 8); //MSByte
 80019a6:	88bb      	ldrh	r3, [r7, #4]
 80019a8:	121b      	asrs	r3, r3, #8
 80019aa:	b2da      	uxtb	r2, r3
 80019ac:	4b15      	ldr	r3, [pc, #84]	; (8001a04 <_Z9writeWordhht+0x70>)
 80019ae:	701a      	strb	r2, [r3, #0]
  sendBuf[1] = (uint8_t) (data >> 0); //LSByte
 80019b0:	88bb      	ldrh	r3, [r7, #4]
 80019b2:	b2da      	uxtb	r2, r3
 80019b4:	4b13      	ldr	r3, [pc, #76]	; (8001a04 <_Z9writeWordhht+0x70>)
 80019b6:	705a      	strb	r2, [r3, #1]
  while(HAL_I2C_Mem_Write(&hi2c1,devAddr,regAddr, I2C_MEMADD_SIZE_8BIT, (uint8_t*)sendBuf, 2,I2CDLY) != HAL_OK){
 80019b8:	79fb      	ldrb	r3, [r7, #7]
 80019ba:	b299      	uxth	r1, r3
 80019bc:	79bb      	ldrb	r3, [r7, #6]
 80019be:	b29a      	uxth	r2, r3
 80019c0:	2301      	movs	r3, #1
 80019c2:	9302      	str	r3, [sp, #8]
 80019c4:	2302      	movs	r3, #2
 80019c6:	9301      	str	r3, [sp, #4]
 80019c8:	4b0e      	ldr	r3, [pc, #56]	; (8001a04 <_Z9writeWordhht+0x70>)
 80019ca:	9300      	str	r3, [sp, #0]
 80019cc:	2301      	movs	r3, #1
 80019ce:	480e      	ldr	r0, [pc, #56]	; (8001a08 <_Z9writeWordhht+0x74>)
 80019d0:	f004 fd8a 	bl	80064e8 <HAL_I2C_Mem_Write>
 80019d4:	4603      	mov	r3, r0
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	bf14      	ite	ne
 80019da:	2301      	movne	r3, #1
 80019dc:	2300      	moveq	r3, #0
 80019de:	b2db      	uxtb	r3, r3
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d002      	beq.n	80019ea <_Z9writeWordhht+0x56>
     MX_I2C1_Init();
 80019e4:	f002 fa5c 	bl	8003ea0 <MX_I2C1_Init>
  while(HAL_I2C_Mem_Write(&hi2c1,devAddr,regAddr, I2C_MEMADD_SIZE_8BIT, (uint8_t*)sendBuf, 2,I2CDLY) != HAL_OK){
 80019e8:	e7e6      	b.n	80019b8 <_Z9writeWordhht+0x24>
  }
  uint8_t response = BCM2835_I2C_REASON_OK;
 80019ea:	2301      	movs	r3, #1
 80019ec:	73fb      	strb	r3, [r7, #15]
  return response == BCM2835_I2C_REASON_OK ;
 80019ee:	7bfb      	ldrb	r3, [r7, #15]
 80019f0:	2b01      	cmp	r3, #1
 80019f2:	bf0c      	ite	eq
 80019f4:	2301      	moveq	r3, #1
 80019f6:	2300      	movne	r3, #0
 80019f8:	b2db      	uxtb	r3, r3
}
 80019fa:	4618      	mov	r0, r3
 80019fc:	3710      	adds	r7, #16
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bd80      	pop	{r7, pc}
 8001a02:	bf00      	nop
 8001a04:	20000394 	.word	0x20000394
 8001a08:	20000724 	.word	0x20000724

08001a0c <_Z10writeByteshhhPh>:

bool writeBytes(uint8_t devAddr, uint8_t regAddr, uint8_t length, uint8_t *data){
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b088      	sub	sp, #32
 8001a10:	af04      	add	r7, sp, #16
 8001a12:	603b      	str	r3, [r7, #0]
 8001a14:	4603      	mov	r3, r0
 8001a16:	71fb      	strb	r3, [r7, #7]
 8001a18:	460b      	mov	r3, r1
 8001a1a:	71bb      	strb	r3, [r7, #6]
 8001a1c:	4613      	mov	r3, r2
 8001a1e:	717b      	strb	r3, [r7, #5]
  uint8_t i;
  for (i = 0; i < length; i++) {
 8001a20:	2300      	movs	r3, #0
 8001a22:	73fb      	strb	r3, [r7, #15]
 8001a24:	7bfa      	ldrb	r2, [r7, #15]
 8001a26:	797b      	ldrb	r3, [r7, #5]
 8001a28:	429a      	cmp	r2, r3
 8001a2a:	d20a      	bcs.n	8001a42 <_Z10writeByteshhhPh+0x36>
    sendBuf[i] = data[i] ;
 8001a2c:	7bfb      	ldrb	r3, [r7, #15]
 8001a2e:	683a      	ldr	r2, [r7, #0]
 8001a30:	441a      	add	r2, r3
 8001a32:	7bfb      	ldrb	r3, [r7, #15]
 8001a34:	7811      	ldrb	r1, [r2, #0]
 8001a36:	4a16      	ldr	r2, [pc, #88]	; (8001a90 <_Z10writeByteshhhPh+0x84>)
 8001a38:	54d1      	strb	r1, [r2, r3]
  for (i = 0; i < length; i++) {
 8001a3a:	7bfb      	ldrb	r3, [r7, #15]
 8001a3c:	3301      	adds	r3, #1
 8001a3e:	73fb      	strb	r3, [r7, #15]
 8001a40:	e7f0      	b.n	8001a24 <_Z10writeByteshhhPh+0x18>
  }
  while(HAL_I2C_Mem_Write(&hi2c1,devAddr,regAddr, I2C_MEMADD_SIZE_8BIT, (uint8_t*)sendBuf, length,I2CDLY) != HAL_OK){
 8001a42:	79fb      	ldrb	r3, [r7, #7]
 8001a44:	b299      	uxth	r1, r3
 8001a46:	79bb      	ldrb	r3, [r7, #6]
 8001a48:	b29a      	uxth	r2, r3
 8001a4a:	797b      	ldrb	r3, [r7, #5]
 8001a4c:	b29b      	uxth	r3, r3
 8001a4e:	2001      	movs	r0, #1
 8001a50:	9002      	str	r0, [sp, #8]
 8001a52:	9301      	str	r3, [sp, #4]
 8001a54:	4b0e      	ldr	r3, [pc, #56]	; (8001a90 <_Z10writeByteshhhPh+0x84>)
 8001a56:	9300      	str	r3, [sp, #0]
 8001a58:	2301      	movs	r3, #1
 8001a5a:	480e      	ldr	r0, [pc, #56]	; (8001a94 <_Z10writeByteshhhPh+0x88>)
 8001a5c:	f004 fd44 	bl	80064e8 <HAL_I2C_Mem_Write>
 8001a60:	4603      	mov	r3, r0
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	bf14      	ite	ne
 8001a66:	2301      	movne	r3, #1
 8001a68:	2300      	moveq	r3, #0
 8001a6a:	b2db      	uxtb	r3, r3
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d002      	beq.n	8001a76 <_Z10writeByteshhhPh+0x6a>
     MX_I2C1_Init();
 8001a70:	f002 fa16 	bl	8003ea0 <MX_I2C1_Init>
  while(HAL_I2C_Mem_Write(&hi2c1,devAddr,regAddr, I2C_MEMADD_SIZE_8BIT, (uint8_t*)sendBuf, length,I2CDLY) != HAL_OK){
 8001a74:	e7e5      	b.n	8001a42 <_Z10writeByteshhhPh+0x36>
  }
  uint8_t response = BCM2835_I2C_REASON_OK;
 8001a76:	2301      	movs	r3, #1
 8001a78:	73bb      	strb	r3, [r7, #14]
  return response == BCM2835_I2C_REASON_OK ;
 8001a7a:	7bbb      	ldrb	r3, [r7, #14]
 8001a7c:	2b01      	cmp	r3, #1
 8001a7e:	bf0c      	ite	eq
 8001a80:	2301      	moveq	r3, #1
 8001a82:	2300      	movne	r3, #0
 8001a84:	b2db      	uxtb	r3, r3
}
 8001a86:	4618      	mov	r0, r3
 8001a88:	3710      	adds	r7, #16
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	bd80      	pop	{r7, pc}
 8001a8e:	bf00      	nop
 8001a90:	20000394 	.word	0x20000394
 8001a94:	20000724 	.word	0x20000724

08001a98 <_Z17MPU6050_resetFIFOv>:
  //   Quaternions[2] = (((uint32_t)MPU6050_RX_buf[8] << 24) |  ((uint32_t)MPU6050_RX_buf[9] << 16) |  ((uint32_t)MPU6050_RX_buf[10] << 8) | MPU6050_RX_buf[11]);
  //   Quaternions[3] = (((uint32_t)MPU6050_RX_buf[12] << 24) | ((uint32_t)MPU6050_RX_buf[13] << 16) | ((uint32_t)MPU6050_RX_buf[14] << 8) | MPU6050_RX_buf[15]);
}

void MPU6050_resetFIFO()
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	af00      	add	r7, sp, #0
    writeBit(MPU6050_Adresse, MPU6050_RA_USER_CTRL, MPU6050_USERCTRL_FIFO_RESET_BIT, true); //reset FIFO
 8001a9c:	2301      	movs	r3, #1
 8001a9e:	2202      	movs	r2, #2
 8001aa0:	216a      	movs	r1, #106	; 0x6a
 8001aa2:	20d0      	movs	r0, #208	; 0xd0
 8001aa4:	f7ff fe36 	bl	8001714 <_Z8writeBithhhh>
}
 8001aa8:	bf00      	nop
 8001aaa:	bd80      	pop	{r7, pc}

08001aac <_Z27MPU6050_readQuaternionBytesv>:

void MPU6050_readQuaternionBytes()
{
 8001aac:	b5b0      	push	{r4, r5, r7, lr}
 8001aae:	b0d0      	sub	sp, #320	; 0x140
 8001ab0:	af00      	add	r7, sp, #0
    readBytes(MPU6050_Adresse, MPU6050_RA_FIFO_COUNTH, 2, MPU6050_RX_buf);  //get FIFO count
 8001ab2:	4b54      	ldr	r3, [pc, #336]	; (8001c04 <_Z27MPU6050_readQuaternionBytesv+0x158>)
 8001ab4:	2202      	movs	r2, #2
 8001ab6:	2172      	movs	r1, #114	; 0x72
 8001ab8:	20d0      	movs	r0, #208	; 0xd0
 8001aba:	f7ff fdb5 	bl	8001628 <_Z9readByteshhhPh>
    FIFOCounter = (((uint16_t)MPU6050_RX_buf[0]) << 8) | MPU6050_RX_buf[1];
 8001abe:	4b51      	ldr	r3, [pc, #324]	; (8001c04 <_Z27MPU6050_readQuaternionBytesv+0x158>)
 8001ac0:	781b      	ldrb	r3, [r3, #0]
 8001ac2:	021b      	lsls	r3, r3, #8
 8001ac4:	b21a      	sxth	r2, r3
 8001ac6:	4b4f      	ldr	r3, [pc, #316]	; (8001c04 <_Z27MPU6050_readQuaternionBytesv+0x158>)
 8001ac8:	785b      	ldrb	r3, [r3, #1]
 8001aca:	b21b      	sxth	r3, r3
 8001acc:	4313      	orrs	r3, r2
 8001ace:	b21b      	sxth	r3, r3
 8001ad0:	b29a      	uxth	r2, r3
 8001ad2:	4b4d      	ldr	r3, [pc, #308]	; (8001c08 <_Z27MPU6050_readQuaternionBytesv+0x15c>)
 8001ad4:	801a      	strh	r2, [r3, #0]
    while (FIFOCounter < 42)
 8001ad6:	4b4c      	ldr	r3, [pc, #304]	; (8001c08 <_Z27MPU6050_readQuaternionBytesv+0x15c>)
 8001ad8:	881b      	ldrh	r3, [r3, #0]
 8001ada:	2b29      	cmp	r3, #41	; 0x29
 8001adc:	f200 808c 	bhi.w	8001bf8 <_Z27MPU6050_readQuaternionBytesv+0x14c>
    {
      HAL_GPIO_TogglePin(ONBOARD_WRITE_2_GPIO_Port, ONBOARD_WRITE_2_Pin);   //debug Pin
 8001ae0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001ae4:	4849      	ldr	r0, [pc, #292]	; (8001c0c <_Z27MPU6050_readQuaternionBytesv+0x160>)
 8001ae6:	f004 fb89 	bl	80061fc <HAL_GPIO_TogglePin>
      readBytes(MPU6050_Adresse, MPU6050_RA_FIFO_COUNTH, 2, MPU6050_RX_buf);  //get FIFO count
 8001aea:	4b46      	ldr	r3, [pc, #280]	; (8001c04 <_Z27MPU6050_readQuaternionBytesv+0x158>)
 8001aec:	2202      	movs	r2, #2
 8001aee:	2172      	movs	r1, #114	; 0x72
 8001af0:	20d0      	movs	r0, #208	; 0xd0
 8001af2:	f7ff fd99 	bl	8001628 <_Z9readByteshhhPh>
      FIFOCounter = (((uint16_t)MPU6050_RX_buf[0]) << 8) | MPU6050_RX_buf[1];
 8001af6:	4b43      	ldr	r3, [pc, #268]	; (8001c04 <_Z27MPU6050_readQuaternionBytesv+0x158>)
 8001af8:	781b      	ldrb	r3, [r3, #0]
 8001afa:	021b      	lsls	r3, r3, #8
 8001afc:	b21a      	sxth	r2, r3
 8001afe:	4b41      	ldr	r3, [pc, #260]	; (8001c04 <_Z27MPU6050_readQuaternionBytesv+0x158>)
 8001b00:	785b      	ldrb	r3, [r3, #1]
 8001b02:	b21b      	sxth	r3, r3
 8001b04:	4313      	orrs	r3, r2
 8001b06:	b21b      	sxth	r3, r3
 8001b08:	b29a      	uxth	r2, r3
 8001b0a:	4b3f      	ldr	r3, [pc, #252]	; (8001c08 <_Z27MPU6050_readQuaternionBytesv+0x15c>)
 8001b0c:	801a      	strh	r2, [r3, #0]
      for (size_t i = 0; i < 1; i++)
 8001b0e:	2300      	movs	r3, #0
 8001b10:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 8001b14:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d1dc      	bne.n	8001ad6 <_Z27MPU6050_readQuaternionBytesv+0x2a>
        for (size_t i = 0; i < x; i++)
        {
        	msgTransmit[i] = msg[i];
        }
        CDC_Transmit_FS((unsigned char*)msgTransmit, sizeof(msgTransmit));
      }
 8001b1c:	466b      	mov	r3, sp
 8001b1e:	461d      	mov	r5, r3
        sprintf((char*)msg," %hd \r\n", FIFOCounter);
 8001b20:	4b39      	ldr	r3, [pc, #228]	; (8001c08 <_Z27MPU6050_readQuaternionBytesv+0x15c>)
 8001b22:	881b      	ldrh	r3, [r3, #0]
 8001b24:	461a      	mov	r2, r3
 8001b26:	463b      	mov	r3, r7
 8001b28:	4939      	ldr	r1, [pc, #228]	; (8001c10 <_Z27MPU6050_readQuaternionBytesv+0x164>)
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	f00e fc6e 	bl	801040c <siprintf>
        uint8_t x = 0;
 8001b30:	2300      	movs	r3, #0
 8001b32:	f887 313b 	strb.w	r3, [r7, #315]	; 0x13b
        while (msg[x] != NULL)
 8001b36:	f897 313b 	ldrb.w	r3, [r7, #315]	; 0x13b
 8001b3a:	463a      	mov	r2, r7
 8001b3c:	5cd3      	ldrb	r3, [r2, r3]
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d005      	beq.n	8001b4e <_Z27MPU6050_readQuaternionBytesv+0xa2>
        	x++;
 8001b42:	f897 313b 	ldrb.w	r3, [r7, #315]	; 0x13b
 8001b46:	3301      	adds	r3, #1
 8001b48:	f887 313b 	strb.w	r3, [r7, #315]	; 0x13b
        while (msg[x] != NULL)
 8001b4c:	e7f3      	b.n	8001b36 <_Z27MPU6050_readQuaternionBytesv+0x8a>
        unsigned char msgTransmit[x];
 8001b4e:	f897 313b 	ldrb.w	r3, [r7, #315]	; 0x13b
 8001b52:	1e5c      	subs	r4, r3, #1
 8001b54:	f8c7 4130 	str.w	r4, [r7, #304]	; 0x130
 8001b58:	4623      	mov	r3, r4
 8001b5a:	3301      	adds	r3, #1
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	f04f 0100 	mov.w	r1, #0
 8001b62:	f04f 0200 	mov.w	r2, #0
 8001b66:	f04f 0300 	mov.w	r3, #0
 8001b6a:	00cb      	lsls	r3, r1, #3
 8001b6c:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8001b70:	00c2      	lsls	r2, r0, #3
 8001b72:	4623      	mov	r3, r4
 8001b74:	3301      	adds	r3, #1
 8001b76:	4618      	mov	r0, r3
 8001b78:	f04f 0100 	mov.w	r1, #0
 8001b7c:	f04f 0200 	mov.w	r2, #0
 8001b80:	f04f 0300 	mov.w	r3, #0
 8001b84:	00cb      	lsls	r3, r1, #3
 8001b86:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8001b8a:	00c2      	lsls	r2, r0, #3
 8001b8c:	4623      	mov	r3, r4
 8001b8e:	3301      	adds	r3, #1
 8001b90:	3307      	adds	r3, #7
 8001b92:	08db      	lsrs	r3, r3, #3
 8001b94:	00db      	lsls	r3, r3, #3
 8001b96:	ebad 0d03 	sub.w	sp, sp, r3
 8001b9a:	466b      	mov	r3, sp
 8001b9c:	3300      	adds	r3, #0
 8001b9e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        for (size_t i = 0; i < x; i++)
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 8001ba8:	f897 313b 	ldrb.w	r3, [r7, #315]	; 0x13b
 8001bac:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 8001bb0:	429a      	cmp	r2, r3
 8001bb2:	d211      	bcs.n	8001bd8 <_Z27MPU6050_readQuaternionBytesv+0x12c>
        	msgTransmit[i] = msg[i];
 8001bb4:	463a      	mov	r2, r7
 8001bb6:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8001bba:	4413      	add	r3, r2
 8001bbc:	7819      	ldrb	r1, [r3, #0]
 8001bbe:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8001bc2:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8001bc6:	4413      	add	r3, r2
 8001bc8:	460a      	mov	r2, r1
 8001bca:	701a      	strb	r2, [r3, #0]
        for (size_t i = 0; i < x; i++)
 8001bcc:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8001bd0:	3301      	adds	r3, #1
 8001bd2:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 8001bd6:	e7e7      	b.n	8001ba8 <_Z27MPU6050_readQuaternionBytesv+0xfc>
        CDC_Transmit_FS((unsigned char*)msgTransmit, sizeof(msgTransmit));
 8001bd8:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8001bdc:	b2a3      	uxth	r3, r4
 8001bde:	3301      	adds	r3, #1
 8001be0:	b29b      	uxth	r3, r3
 8001be2:	4619      	mov	r1, r3
 8001be4:	4610      	mov	r0, r2
 8001be6:	f00a ffb1 	bl	800cb4c <CDC_Transmit_FS>
 8001bea:	46ad      	mov	sp, r5
      for (size_t i = 0; i < 1; i++)
 8001bec:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8001bf0:	3301      	adds	r3, #1
 8001bf2:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 8001bf6:	e78d      	b.n	8001b14 <_Z27MPU6050_readQuaternionBytesv+0x68>

    }
}
 8001bf8:	bf00      	nop
 8001bfa:	f507 77a0 	add.w	r7, r7, #320	; 0x140
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	bdb0      	pop	{r4, r5, r7, pc}
 8001c02:	bf00      	nop
 8001c04:	20000494 	.word	0x20000494
 8001c08:	200004a4 	.word	0x200004a4
 8001c0c:	40020800 	.word	0x40020800
 8001c10:	08012718 	.word	0x08012718

08001c14 <_Z28MPU6050_ConvertToQuaternionsv>:

void MPU6050_ConvertToQuaternions()
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	af00      	add	r7, sp, #0
    if ((FIFOCounter == 42) | (FIFOCounter == 84))
 8001c18:	4b42      	ldr	r3, [pc, #264]	; (8001d24 <_Z28MPU6050_ConvertToQuaternionsv+0x110>)
 8001c1a:	881b      	ldrh	r3, [r3, #0]
 8001c1c:	2b2a      	cmp	r3, #42	; 0x2a
 8001c1e:	bf0c      	ite	eq
 8001c20:	2301      	moveq	r3, #1
 8001c22:	2300      	movne	r3, #0
 8001c24:	b2da      	uxtb	r2, r3
 8001c26:	4b3f      	ldr	r3, [pc, #252]	; (8001d24 <_Z28MPU6050_ConvertToQuaternionsv+0x110>)
 8001c28:	881b      	ldrh	r3, [r3, #0]
 8001c2a:	2b54      	cmp	r3, #84	; 0x54
 8001c2c:	bf0c      	ite	eq
 8001c2e:	2301      	moveq	r3, #1
 8001c30:	2300      	movne	r3, #0
 8001c32:	b2db      	uxtb	r3, r3
 8001c34:	4313      	orrs	r3, r2
 8001c36:	b2db      	uxtb	r3, r3
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d071      	beq.n	8001d20 <_Z28MPU6050_ConvertToQuaternionsv+0x10c>
    {
      readBytes(MPU6050_Adresse, MPU6050_RA_FIFO_R_W, 16, MPU6050_RX_buf);      //get FIFO data
 8001c3c:	4b3a      	ldr	r3, [pc, #232]	; (8001d28 <_Z28MPU6050_ConvertToQuaternionsv+0x114>)
 8001c3e:	2210      	movs	r2, #16
 8001c40:	2174      	movs	r1, #116	; 0x74
 8001c42:	20d0      	movs	r0, #208	; 0xd0
 8001c44:	f7ff fcf0 	bl	8001628 <_Z9readByteshhhPh>
      MPUoutputQuaternion[0] = (float)(((int32_t)MPU6050_RX_buf[0] << 24) |  ((int32_t)MPU6050_RX_buf[1] << 16) |  ((int32_t)MPU6050_RX_buf[2] << 8) |  MPU6050_RX_buf[3 ]) / 1073741824;
 8001c48:	4b37      	ldr	r3, [pc, #220]	; (8001d28 <_Z28MPU6050_ConvertToQuaternionsv+0x114>)
 8001c4a:	781b      	ldrb	r3, [r3, #0]
 8001c4c:	061a      	lsls	r2, r3, #24
 8001c4e:	4b36      	ldr	r3, [pc, #216]	; (8001d28 <_Z28MPU6050_ConvertToQuaternionsv+0x114>)
 8001c50:	785b      	ldrb	r3, [r3, #1]
 8001c52:	041b      	lsls	r3, r3, #16
 8001c54:	431a      	orrs	r2, r3
 8001c56:	4b34      	ldr	r3, [pc, #208]	; (8001d28 <_Z28MPU6050_ConvertToQuaternionsv+0x114>)
 8001c58:	789b      	ldrb	r3, [r3, #2]
 8001c5a:	021b      	lsls	r3, r3, #8
 8001c5c:	4313      	orrs	r3, r2
 8001c5e:	4a32      	ldr	r2, [pc, #200]	; (8001d28 <_Z28MPU6050_ConvertToQuaternionsv+0x114>)
 8001c60:	78d2      	ldrb	r2, [r2, #3]
 8001c62:	4313      	orrs	r3, r2
 8001c64:	4618      	mov	r0, r3
 8001c66:	f7ff f855 	bl	8000d14 <__aeabi_i2f>
 8001c6a:	4603      	mov	r3, r0
 8001c6c:	f04f 419d 	mov.w	r1, #1317011456	; 0x4e800000
 8001c70:	4618      	mov	r0, r3
 8001c72:	f7ff f957 	bl	8000f24 <__aeabi_fdiv>
 8001c76:	4603      	mov	r3, r0
 8001c78:	461a      	mov	r2, r3
 8001c7a:	4b2c      	ldr	r3, [pc, #176]	; (8001d2c <_Z28MPU6050_ConvertToQuaternionsv+0x118>)
 8001c7c:	601a      	str	r2, [r3, #0]
      MPUoutputQuaternion[1] = (float)(((int32_t)MPU6050_RX_buf[4] << 24) |  ((int32_t)MPU6050_RX_buf[5] << 16) |  ((int32_t)MPU6050_RX_buf[6] << 8) |  MPU6050_RX_buf[7 ]) / 1073741824;
 8001c7e:	4b2a      	ldr	r3, [pc, #168]	; (8001d28 <_Z28MPU6050_ConvertToQuaternionsv+0x114>)
 8001c80:	791b      	ldrb	r3, [r3, #4]
 8001c82:	061a      	lsls	r2, r3, #24
 8001c84:	4b28      	ldr	r3, [pc, #160]	; (8001d28 <_Z28MPU6050_ConvertToQuaternionsv+0x114>)
 8001c86:	795b      	ldrb	r3, [r3, #5]
 8001c88:	041b      	lsls	r3, r3, #16
 8001c8a:	431a      	orrs	r2, r3
 8001c8c:	4b26      	ldr	r3, [pc, #152]	; (8001d28 <_Z28MPU6050_ConvertToQuaternionsv+0x114>)
 8001c8e:	799b      	ldrb	r3, [r3, #6]
 8001c90:	021b      	lsls	r3, r3, #8
 8001c92:	4313      	orrs	r3, r2
 8001c94:	4a24      	ldr	r2, [pc, #144]	; (8001d28 <_Z28MPU6050_ConvertToQuaternionsv+0x114>)
 8001c96:	79d2      	ldrb	r2, [r2, #7]
 8001c98:	4313      	orrs	r3, r2
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	f7ff f83a 	bl	8000d14 <__aeabi_i2f>
 8001ca0:	4603      	mov	r3, r0
 8001ca2:	f04f 419d 	mov.w	r1, #1317011456	; 0x4e800000
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	f7ff f93c 	bl	8000f24 <__aeabi_fdiv>
 8001cac:	4603      	mov	r3, r0
 8001cae:	461a      	mov	r2, r3
 8001cb0:	4b1e      	ldr	r3, [pc, #120]	; (8001d2c <_Z28MPU6050_ConvertToQuaternionsv+0x118>)
 8001cb2:	605a      	str	r2, [r3, #4]
      MPUoutputQuaternion[2] = (float)(((int32_t)MPU6050_RX_buf[8] << 24) |  ((int32_t)MPU6050_RX_buf[9] << 16) |  ((int32_t)MPU6050_RX_buf[10] << 8) | MPU6050_RX_buf[11]) / 1073741824;
 8001cb4:	4b1c      	ldr	r3, [pc, #112]	; (8001d28 <_Z28MPU6050_ConvertToQuaternionsv+0x114>)
 8001cb6:	7a1b      	ldrb	r3, [r3, #8]
 8001cb8:	061a      	lsls	r2, r3, #24
 8001cba:	4b1b      	ldr	r3, [pc, #108]	; (8001d28 <_Z28MPU6050_ConvertToQuaternionsv+0x114>)
 8001cbc:	7a5b      	ldrb	r3, [r3, #9]
 8001cbe:	041b      	lsls	r3, r3, #16
 8001cc0:	431a      	orrs	r2, r3
 8001cc2:	4b19      	ldr	r3, [pc, #100]	; (8001d28 <_Z28MPU6050_ConvertToQuaternionsv+0x114>)
 8001cc4:	7a9b      	ldrb	r3, [r3, #10]
 8001cc6:	021b      	lsls	r3, r3, #8
 8001cc8:	4313      	orrs	r3, r2
 8001cca:	4a17      	ldr	r2, [pc, #92]	; (8001d28 <_Z28MPU6050_ConvertToQuaternionsv+0x114>)
 8001ccc:	7ad2      	ldrb	r2, [r2, #11]
 8001cce:	4313      	orrs	r3, r2
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	f7ff f81f 	bl	8000d14 <__aeabi_i2f>
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	f04f 419d 	mov.w	r1, #1317011456	; 0x4e800000
 8001cdc:	4618      	mov	r0, r3
 8001cde:	f7ff f921 	bl	8000f24 <__aeabi_fdiv>
 8001ce2:	4603      	mov	r3, r0
 8001ce4:	461a      	mov	r2, r3
 8001ce6:	4b11      	ldr	r3, [pc, #68]	; (8001d2c <_Z28MPU6050_ConvertToQuaternionsv+0x118>)
 8001ce8:	609a      	str	r2, [r3, #8]
      MPUoutputQuaternion[3] = (float)(((int32_t)MPU6050_RX_buf[12] << 24) | ((int32_t)MPU6050_RX_buf[13] << 16) | ((int32_t)MPU6050_RX_buf[14] << 8) | MPU6050_RX_buf[15]) / 1073741824;
 8001cea:	4b0f      	ldr	r3, [pc, #60]	; (8001d28 <_Z28MPU6050_ConvertToQuaternionsv+0x114>)
 8001cec:	7b1b      	ldrb	r3, [r3, #12]
 8001cee:	061a      	lsls	r2, r3, #24
 8001cf0:	4b0d      	ldr	r3, [pc, #52]	; (8001d28 <_Z28MPU6050_ConvertToQuaternionsv+0x114>)
 8001cf2:	7b5b      	ldrb	r3, [r3, #13]
 8001cf4:	041b      	lsls	r3, r3, #16
 8001cf6:	431a      	orrs	r2, r3
 8001cf8:	4b0b      	ldr	r3, [pc, #44]	; (8001d28 <_Z28MPU6050_ConvertToQuaternionsv+0x114>)
 8001cfa:	7b9b      	ldrb	r3, [r3, #14]
 8001cfc:	021b      	lsls	r3, r3, #8
 8001cfe:	4313      	orrs	r3, r2
 8001d00:	4a09      	ldr	r2, [pc, #36]	; (8001d28 <_Z28MPU6050_ConvertToQuaternionsv+0x114>)
 8001d02:	7bd2      	ldrb	r2, [r2, #15]
 8001d04:	4313      	orrs	r3, r2
 8001d06:	4618      	mov	r0, r3
 8001d08:	f7ff f804 	bl	8000d14 <__aeabi_i2f>
 8001d0c:	4603      	mov	r3, r0
 8001d0e:	f04f 419d 	mov.w	r1, #1317011456	; 0x4e800000
 8001d12:	4618      	mov	r0, r3
 8001d14:	f7ff f906 	bl	8000f24 <__aeabi_fdiv>
 8001d18:	4603      	mov	r3, r0
 8001d1a:	461a      	mov	r2, r3
 8001d1c:	4b03      	ldr	r3, [pc, #12]	; (8001d2c <_Z28MPU6050_ConvertToQuaternionsv+0x118>)
 8001d1e:	60da      	str	r2, [r3, #12]
    }
}
 8001d20:	bf00      	nop
 8001d22:	bd80      	pop	{r7, pc}
 8001d24:	200004a4 	.word	0x200004a4
 8001d28:	20000494 	.word	0x20000494
 8001d2c:	200004c0 	.word	0x200004c0

08001d30 <_ZN7MPU6050C1Ev>:


/** Default constructor, uses default I2C address.
 * @see MPU6050_DEFAULT_ADDRESS
 */
MPU6050::MPU6050() {
 8001d30:	b480      	push	{r7}
 8001d32:	b083      	sub	sp, #12
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
    devAddr = MPU6050_DEFAULT_ADDRESS;
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	22d0      	movs	r2, #208	; 0xd0
 8001d3c:	719a      	strb	r2, [r3, #6]
}
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	4618      	mov	r0, r3
 8001d42:	370c      	adds	r7, #12
 8001d44:	46bd      	mov	sp, r7
 8001d46:	bc80      	pop	{r7}
 8001d48:	4770      	bx	lr

08001d4a <_ZN7MPU605010initializeEv>:
 * after start-up). This function also sets both the accelerometer and the gyroscope
 * to their most sensitive settings, namely +/- 2g and +/- 250 degrees/sec, and sets
 * the clock source to use the X Gyro for reference, which is slightly better than
 * the default internal clock source.
 */
void MPU6050::initialize() {
 8001d4a:	b580      	push	{r7, lr}
 8001d4c:	b082      	sub	sp, #8
 8001d4e:	af00      	add	r7, sp, #0
 8001d50:	6078      	str	r0, [r7, #4]
    setClockSource(MPU6050_CLOCK_PLL_XGYRO);
 8001d52:	2101      	movs	r1, #1
 8001d54:	6878      	ldr	r0, [r7, #4]
 8001d56:	f000 f951 	bl	8001ffc <_ZN7MPU605014setClockSourceEh>
    setFullScaleGyroRange(MPU6050_GYRO_FS_250);
 8001d5a:	2100      	movs	r1, #0
 8001d5c:	6878      	ldr	r0, [r7, #4]
 8001d5e:	f000 f843 	bl	8001de8 <_ZN7MPU605021setFullScaleGyroRangeEh>
    setFullScaleAccelRange(MPU6050_ACCEL_FS_2);
 8001d62:	2100      	movs	r1, #0
 8001d64:	6878      	ldr	r0, [r7, #4]
 8001d66:	f000 f852 	bl	8001e0e <_ZN7MPU605022setFullScaleAccelRangeEh>
    setSleepEnabled(false); // thanks to Jack Elston for pointing this one out!
 8001d6a:	2100      	movs	r1, #0
 8001d6c:	6878      	ldr	r0, [r7, #4]
 8001d6e:	f000 f934 	bl	8001fda <_ZN7MPU605015setSleepEnabledEb>
}
 8001d72:	bf00      	nop
 8001d74:	3708      	adds	r7, #8
 8001d76:	46bd      	mov	sp, r7
 8001d78:	bd80      	pop	{r7, pc}

08001d7a <_ZN7MPU60507setRateEh>:
/** Set gyroscope sample rate divider.
 * @param rate New sample rate divider
 * @see getRate()
 * @see MPU6050_RA_SMPLRT_DIV
 */
void MPU6050::setRate(uint8_t rate) {
 8001d7a:	b580      	push	{r7, lr}
 8001d7c:	b082      	sub	sp, #8
 8001d7e:	af00      	add	r7, sp, #0
 8001d80:	6078      	str	r0, [r7, #4]
 8001d82:	460b      	mov	r3, r1
 8001d84:	70fb      	strb	r3, [r7, #3]
    writeByte(devAddr, MPU6050_RA_SMPLRT_DIV, rate);
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	799b      	ldrb	r3, [r3, #6]
 8001d8a:	78fa      	ldrb	r2, [r7, #3]
 8001d8c:	2119      	movs	r1, #25
 8001d8e:	4618      	mov	r0, r3
 8001d90:	f7ff fdc8 	bl	8001924 <_Z9writeBytehhh>
}
 8001d94:	bf00      	nop
 8001d96:	3708      	adds	r7, #8
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	bd80      	pop	{r7, pc}

08001d9c <_ZN7MPU605020setExternalFrameSyncEh>:
/** Set external FSYNC configuration.
 * @see getExternalFrameSync()
 * @see MPU6050_RA_CONFIG
 * @param sync New FSYNC configuration value
 */
void MPU6050::setExternalFrameSync(uint8_t sync) {
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b084      	sub	sp, #16
 8001da0:	af02      	add	r7, sp, #8
 8001da2:	6078      	str	r0, [r7, #4]
 8001da4:	460b      	mov	r3, r1
 8001da6:	70fb      	strb	r3, [r7, #3]
    writeBits(devAddr, MPU6050_RA_CONFIG, MPU6050_CFG_EXT_SYNC_SET_BIT, MPU6050_CFG_EXT_SYNC_SET_LENGTH, sync);
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	7998      	ldrb	r0, [r3, #6]
 8001dac:	78fb      	ldrb	r3, [r7, #3]
 8001dae:	9300      	str	r3, [sp, #0]
 8001db0:	2303      	movs	r3, #3
 8001db2:	2205      	movs	r2, #5
 8001db4:	211a      	movs	r1, #26
 8001db6:	f7ff fd29 	bl	800180c <_Z9writeBitshhhhh>
}
 8001dba:	bf00      	nop
 8001dbc:	3708      	adds	r7, #8
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	bd80      	pop	{r7, pc}

08001dc2 <_ZN7MPU605011setDLPFModeEh>:
 * @see MPU6050_DLPF_BW_256
 * @see MPU6050_RA_CONFIG
 * @see MPU6050_CFG_DLPF_CFG_BIT
 * @see MPU6050_CFG_DLPF_CFG_LENGTH
 */
void MPU6050::setDLPFMode(uint8_t mode) {
 8001dc2:	b580      	push	{r7, lr}
 8001dc4:	b084      	sub	sp, #16
 8001dc6:	af02      	add	r7, sp, #8
 8001dc8:	6078      	str	r0, [r7, #4]
 8001dca:	460b      	mov	r3, r1
 8001dcc:	70fb      	strb	r3, [r7, #3]
    writeBits(devAddr, MPU6050_RA_CONFIG, MPU6050_CFG_DLPF_CFG_BIT, MPU6050_CFG_DLPF_CFG_LENGTH, mode);
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	7998      	ldrb	r0, [r3, #6]
 8001dd2:	78fb      	ldrb	r3, [r7, #3]
 8001dd4:	9300      	str	r3, [sp, #0]
 8001dd6:	2303      	movs	r3, #3
 8001dd8:	2202      	movs	r2, #2
 8001dda:	211a      	movs	r1, #26
 8001ddc:	f7ff fd16 	bl	800180c <_Z9writeBitshhhhh>
}
 8001de0:	bf00      	nop
 8001de2:	3708      	adds	r7, #8
 8001de4:	46bd      	mov	sp, r7
 8001de6:	bd80      	pop	{r7, pc}

08001de8 <_ZN7MPU605021setFullScaleGyroRangeEh>:
 * @see MPU6050_GYRO_FS_250
 * @see MPU6050_RA_GYRO_CONFIG
 * @see MPU6050_GCONFIG_FS_SEL_BIT
 * @see MPU6050_GCONFIG_FS_SEL_LENGTH
 */
void MPU6050::setFullScaleGyroRange(uint8_t range) {
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b084      	sub	sp, #16
 8001dec:	af02      	add	r7, sp, #8
 8001dee:	6078      	str	r0, [r7, #4]
 8001df0:	460b      	mov	r3, r1
 8001df2:	70fb      	strb	r3, [r7, #3]
    writeBits(devAddr, MPU6050_RA_GYRO_CONFIG, MPU6050_GCONFIG_FS_SEL_BIT, MPU6050_GCONFIG_FS_SEL_LENGTH, range);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	7998      	ldrb	r0, [r3, #6]
 8001df8:	78fb      	ldrb	r3, [r7, #3]
 8001dfa:	9300      	str	r3, [sp, #0]
 8001dfc:	2302      	movs	r3, #2
 8001dfe:	2204      	movs	r2, #4
 8001e00:	211b      	movs	r1, #27
 8001e02:	f7ff fd03 	bl	800180c <_Z9writeBitshhhhh>
}
 8001e06:	bf00      	nop
 8001e08:	3708      	adds	r7, #8
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	bd80      	pop	{r7, pc}

08001e0e <_ZN7MPU605022setFullScaleAccelRangeEh>:
}
/** Set full-scale accelerometer range.
 * @param range New full-scale accelerometer range setting
 * @see getFullScaleAccelRange()
 */
void MPU6050::setFullScaleAccelRange(uint8_t range) {
 8001e0e:	b580      	push	{r7, lr}
 8001e10:	b084      	sub	sp, #16
 8001e12:	af02      	add	r7, sp, #8
 8001e14:	6078      	str	r0, [r7, #4]
 8001e16:	460b      	mov	r3, r1
 8001e18:	70fb      	strb	r3, [r7, #3]
    writeBits(devAddr, MPU6050_RA_ACCEL_CONFIG, MPU6050_ACONFIG_AFS_SEL_BIT, MPU6050_ACONFIG_AFS_SEL_LENGTH, range);
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	7998      	ldrb	r0, [r3, #6]
 8001e1e:	78fb      	ldrb	r3, [r7, #3]
 8001e20:	9300      	str	r3, [sp, #0]
 8001e22:	2302      	movs	r3, #2
 8001e24:	2204      	movs	r2, #4
 8001e26:	211c      	movs	r1, #28
 8001e28:	f7ff fcf0 	bl	800180c <_Z9writeBitshhhhh>
}
 8001e2c:	bf00      	nop
 8001e2e:	3708      	adds	r7, #8
 8001e30:	46bd      	mov	sp, r7
 8001e32:	bd80      	pop	{r7, pc}

08001e34 <_ZN7MPU605027setMotionDetectionThresholdEh>:
/** Set motion detection event acceleration threshold.
 * @param threshold New motion detection acceleration threshold value (LSB = 2mg)
 * @see getMotionDetectionThreshold()
 * @see MPU6050_RA_MOT_THR
 */
void MPU6050::setMotionDetectionThreshold(uint8_t threshold) {
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b082      	sub	sp, #8
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
 8001e3c:	460b      	mov	r3, r1
 8001e3e:	70fb      	strb	r3, [r7, #3]
    writeByte(devAddr, MPU6050_RA_MOT_THR, threshold);
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	799b      	ldrb	r3, [r3, #6]
 8001e44:	78fa      	ldrb	r2, [r7, #3]
 8001e46:	211f      	movs	r1, #31
 8001e48:	4618      	mov	r0, r3
 8001e4a:	f7ff fd6b 	bl	8001924 <_Z9writeBytehhh>
}
 8001e4e:	bf00      	nop
 8001e50:	3708      	adds	r7, #8
 8001e52:	46bd      	mov	sp, r7
 8001e54:	bd80      	pop	{r7, pc}

08001e56 <_ZN7MPU605026setMotionDetectionDurationEh>:
/** Set motion detection event duration threshold.
 * @param duration New motion detection duration threshold value (LSB = 1ms)
 * @see getMotionDetectionDuration()
 * @see MPU6050_RA_MOT_DUR
 */
void MPU6050::setMotionDetectionDuration(uint8_t duration) {
 8001e56:	b580      	push	{r7, lr}
 8001e58:	b082      	sub	sp, #8
 8001e5a:	af00      	add	r7, sp, #0
 8001e5c:	6078      	str	r0, [r7, #4]
 8001e5e:	460b      	mov	r3, r1
 8001e60:	70fb      	strb	r3, [r7, #3]
    writeByte(devAddr, MPU6050_RA_MOT_DUR, duration);
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	799b      	ldrb	r3, [r3, #6]
 8001e66:	78fa      	ldrb	r2, [r7, #3]
 8001e68:	2120      	movs	r1, #32
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	f7ff fd5a 	bl	8001924 <_Z9writeBytehhh>
}
 8001e70:	bf00      	nop
 8001e72:	3708      	adds	r7, #8
 8001e74:	46bd      	mov	sp, r7
 8001e76:	bd80      	pop	{r7, pc}

08001e78 <_ZN7MPU605031setZeroMotionDetectionThresholdEh>:
/** Set zero motion detection event acceleration threshold.
 * @param threshold New zero motion detection acceleration threshold value (LSB = 2mg)
 * @see getZeroMotionDetectionThreshold()
 * @see MPU6050_RA_ZRMOT_THR
 */
void MPU6050::setZeroMotionDetectionThreshold(uint8_t threshold) {
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b082      	sub	sp, #8
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
 8001e80:	460b      	mov	r3, r1
 8001e82:	70fb      	strb	r3, [r7, #3]
    writeByte(devAddr, MPU6050_RA_ZRMOT_THR, threshold);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	799b      	ldrb	r3, [r3, #6]
 8001e88:	78fa      	ldrb	r2, [r7, #3]
 8001e8a:	2121      	movs	r1, #33	; 0x21
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	f7ff fd49 	bl	8001924 <_Z9writeBytehhh>
}
 8001e92:	bf00      	nop
 8001e94:	3708      	adds	r7, #8
 8001e96:	46bd      	mov	sp, r7
 8001e98:	bd80      	pop	{r7, pc}

08001e9a <_ZN7MPU605030setZeroMotionDetectionDurationEh>:
/** Set zero motion detection event duration threshold.
 * @param duration New zero motion detection duration threshold value (LSB = 1ms)
 * @see getZeroMotionDetectionDuration()
 * @see MPU6050_RA_ZRMOT_DUR
 */
void MPU6050::setZeroMotionDetectionDuration(uint8_t duration) {
 8001e9a:	b580      	push	{r7, lr}
 8001e9c:	b082      	sub	sp, #8
 8001e9e:	af00      	add	r7, sp, #0
 8001ea0:	6078      	str	r0, [r7, #4]
 8001ea2:	460b      	mov	r3, r1
 8001ea4:	70fb      	strb	r3, [r7, #3]
    writeByte(devAddr, MPU6050_RA_ZRMOT_DUR, duration);
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	799b      	ldrb	r3, [r3, #6]
 8001eaa:	78fa      	ldrb	r2, [r7, #3]
 8001eac:	2122      	movs	r1, #34	; 0x22
 8001eae:	4618      	mov	r0, r3
 8001eb0:	f7ff fd38 	bl	8001924 <_Z9writeBytehhh>
}
 8001eb4:	bf00      	nop
 8001eb6:	3708      	adds	r7, #8
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	bd80      	pop	{r7, pc}

08001ebc <_ZN7MPU605015setSlaveAddressEhh>:
 * @param num Slave number (0-3)
 * @param address New address for specified slave
 * @see getSlaveAddress()
 * @see MPU6050_RA_I2C_SLV0_ADDR
 */
void MPU6050::setSlaveAddress(uint8_t num, uint8_t address) {
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b082      	sub	sp, #8
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
 8001ec4:	460b      	mov	r3, r1
 8001ec6:	70fb      	strb	r3, [r7, #3]
 8001ec8:	4613      	mov	r3, r2
 8001eca:	70bb      	strb	r3, [r7, #2]
    if (num > 3) return;
 8001ecc:	78fb      	ldrb	r3, [r7, #3]
 8001ece:	2b03      	cmp	r3, #3
 8001ed0:	d80d      	bhi.n	8001eee <_ZN7MPU605015setSlaveAddressEhh+0x32>
    writeByte(devAddr, MPU6050_RA_I2C_SLV0_ADDR + num*3, address);
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	7998      	ldrb	r0, [r3, #6]
 8001ed6:	78fb      	ldrb	r3, [r7, #3]
 8001ed8:	461a      	mov	r2, r3
 8001eda:	0052      	lsls	r2, r2, #1
 8001edc:	4413      	add	r3, r2
 8001ede:	b2db      	uxtb	r3, r3
 8001ee0:	3325      	adds	r3, #37	; 0x25
 8001ee2:	b2db      	uxtb	r3, r3
 8001ee4:	78ba      	ldrb	r2, [r7, #2]
 8001ee6:	4619      	mov	r1, r3
 8001ee8:	f7ff fd1c 	bl	8001924 <_Z9writeBytehhh>
 8001eec:	e000      	b.n	8001ef0 <_ZN7MPU605015setSlaveAddressEhh+0x34>
    if (num > 3) return;
 8001eee:	bf00      	nop
}
 8001ef0:	3708      	adds	r7, #8
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	bd80      	pop	{r7, pc}

08001ef6 <_ZN7MPU605013setIntEnabledEh>:
 * @param enabled New interrupt enabled status
 * @see getIntFreefallEnabled()
 * @see MPU6050_RA_INT_ENABLE
 * @see MPU6050_INTERRUPT_FF_BIT
 **/
void MPU6050::setIntEnabled(uint8_t enabled) {
 8001ef6:	b580      	push	{r7, lr}
 8001ef8:	b082      	sub	sp, #8
 8001efa:	af00      	add	r7, sp, #0
 8001efc:	6078      	str	r0, [r7, #4]
 8001efe:	460b      	mov	r3, r1
 8001f00:	70fb      	strb	r3, [r7, #3]
    writeByte(devAddr, MPU6050_RA_INT_ENABLE, enabled);
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	799b      	ldrb	r3, [r3, #6]
 8001f06:	78fa      	ldrb	r2, [r7, #3]
 8001f08:	2138      	movs	r1, #56	; 0x38
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	f7ff fd0a 	bl	8001924 <_Z9writeBytehhh>
}
 8001f10:	bf00      	nop
 8001f12:	3708      	adds	r7, #8
 8001f14:	46bd      	mov	sp, r7
 8001f16:	bd80      	pop	{r7, pc}

08001f18 <_ZN7MPU605012getIntStatusEv>:
 * for getting multiple INT statuses, since each single bit read clears
 * all of them because it has to read the whole byte.
 * @return Current interrupt status
 * @see MPU6050_RA_INT_STATUS
 */
uint8_t MPU6050::getIntStatus() {
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b082      	sub	sp, #8
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
    readByte(devAddr, MPU6050_RA_INT_STATUS, buffer);
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	7998      	ldrb	r0, [r3, #6]
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	3307      	adds	r3, #7
 8001f28:	461a      	mov	r2, r3
 8001f2a:	213a      	movs	r1, #58	; 0x3a
 8001f2c:	f7ff fb42 	bl	80015b4 <_Z8readBytehhPh>
    return buffer[0];
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	79db      	ldrb	r3, [r3, #7]
}
 8001f34:	4618      	mov	r0, r3
 8001f36:	3708      	adds	r7, #8
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	bd80      	pop	{r7, pc}

08001f3c <_ZN7MPU605014setFIFOEnabledEb>:
 * @param enabled New FIFO enabled status
 * @see getFIFOEnabled()
 * @see MPU6050_RA_USER_CTRL
 * @see MPU6050_USERCTRL_FIFO_EN_BIT
 */
void MPU6050::setFIFOEnabled(bool enabled) {
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b082      	sub	sp, #8
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
 8001f44:	460b      	mov	r3, r1
 8001f46:	70fb      	strb	r3, [r7, #3]
    writeBit(devAddr, MPU6050_RA_USER_CTRL, MPU6050_USERCTRL_FIFO_EN_BIT, enabled);
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	7998      	ldrb	r0, [r3, #6]
 8001f4c:	78fb      	ldrb	r3, [r7, #3]
 8001f4e:	2206      	movs	r2, #6
 8001f50:	216a      	movs	r1, #106	; 0x6a
 8001f52:	f7ff fbdf 	bl	8001714 <_Z8writeBithhhh>
}
 8001f56:	bf00      	nop
 8001f58:	3708      	adds	r7, #8
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	bd80      	pop	{r7, pc}

08001f5e <_ZN7MPU605023setI2CMasterModeEnabledEb>:
 * @param enabled New I2C Master Mode enabled status
 * @see getI2CMasterModeEnabled()
 * @see MPU6050_RA_USER_CTRL
 * @see MPU6050_USERCTRL_I2C_MST_EN_BIT
 */
void MPU6050::setI2CMasterModeEnabled(bool enabled) {
 8001f5e:	b580      	push	{r7, lr}
 8001f60:	b082      	sub	sp, #8
 8001f62:	af00      	add	r7, sp, #0
 8001f64:	6078      	str	r0, [r7, #4]
 8001f66:	460b      	mov	r3, r1
 8001f68:	70fb      	strb	r3, [r7, #3]
    writeBit(devAddr, MPU6050_RA_USER_CTRL, MPU6050_USERCTRL_I2C_MST_EN_BIT, enabled);
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	7998      	ldrb	r0, [r3, #6]
 8001f6e:	78fb      	ldrb	r3, [r7, #3]
 8001f70:	2205      	movs	r2, #5
 8001f72:	216a      	movs	r1, #106	; 0x6a
 8001f74:	f7ff fbce 	bl	8001714 <_Z8writeBithhhh>
}
 8001f78:	bf00      	nop
 8001f7a:	3708      	adds	r7, #8
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	bd80      	pop	{r7, pc}

08001f80 <_ZN7MPU60509resetFIFOEv>:
 * This bit resets the FIFO buffer when set to 1 while FIFO_EN equals 0. This
 * bit automatically clears to 0 after the reset has been triggered.
 * @see MPU6050_RA_USER_CTRL
 * @see MPU6050_USERCTRL_FIFO_RESET_BIT
 */
void MPU6050::resetFIFO() {
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b082      	sub	sp, #8
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
    writeBit(devAddr, MPU6050_RA_USER_CTRL, MPU6050_USERCTRL_FIFO_RESET_BIT, true);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	7998      	ldrb	r0, [r3, #6]
 8001f8c:	2301      	movs	r3, #1
 8001f8e:	2202      	movs	r2, #2
 8001f90:	216a      	movs	r1, #106	; 0x6a
 8001f92:	f7ff fbbf 	bl	8001714 <_Z8writeBithhhh>
}
 8001f96:	bf00      	nop
 8001f98:	3708      	adds	r7, #8
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	bd80      	pop	{r7, pc}

08001f9e <_ZN7MPU605014resetI2CMasterEv>:
 * This bit resets the I2C Master when set to 1 while I2C_MST_EN equals 0.
 * This bit automatically clears to 0 after the reset has been triggered.
 * @see MPU6050_RA_USER_CTRL
 * @see MPU6050_USERCTRL_I2C_MST_RESET_BIT
 */
void MPU6050::resetI2CMaster() {
 8001f9e:	b580      	push	{r7, lr}
 8001fa0:	b082      	sub	sp, #8
 8001fa2:	af00      	add	r7, sp, #0
 8001fa4:	6078      	str	r0, [r7, #4]
    writeBit(devAddr, MPU6050_RA_USER_CTRL, MPU6050_USERCTRL_I2C_MST_RESET_BIT, true);
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	7998      	ldrb	r0, [r3, #6]
 8001faa:	2301      	movs	r3, #1
 8001fac:	2201      	movs	r2, #1
 8001fae:	216a      	movs	r1, #106	; 0x6a
 8001fb0:	f7ff fbb0 	bl	8001714 <_Z8writeBithhhh>
}
 8001fb4:	bf00      	nop
 8001fb6:	3708      	adds	r7, #8
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	bd80      	pop	{r7, pc}

08001fbc <_ZN7MPU60505resetEv>:
/** Trigger a full device reset.
 * A small delay of ~50ms may be desirable after triggering a reset.
 * @see MPU6050_RA_PWR_MGMT_1
 * @see MPU6050_PWR1_DEVICE_RESET_BIT
 */
void MPU6050::reset() {
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b082      	sub	sp, #8
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
    writeBit(devAddr, MPU6050_RA_PWR_MGMT_1, MPU6050_PWR1_DEVICE_RESET_BIT, true);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	7998      	ldrb	r0, [r3, #6]
 8001fc8:	2301      	movs	r3, #1
 8001fca:	2207      	movs	r2, #7
 8001fcc:	216b      	movs	r1, #107	; 0x6b
 8001fce:	f7ff fba1 	bl	8001714 <_Z8writeBithhhh>
}
 8001fd2:	bf00      	nop
 8001fd4:	3708      	adds	r7, #8
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	bd80      	pop	{r7, pc}

08001fda <_ZN7MPU605015setSleepEnabledEb>:
 * @param enabled New sleep mode enabled status
 * @see getSleepEnabled()
 * @see MPU6050_RA_PWR_MGMT_1
 * @see MPU6050_PWR1_SLEEP_BIT
 */
void MPU6050::setSleepEnabled(bool enabled) {
 8001fda:	b580      	push	{r7, lr}
 8001fdc:	b082      	sub	sp, #8
 8001fde:	af00      	add	r7, sp, #0
 8001fe0:	6078      	str	r0, [r7, #4]
 8001fe2:	460b      	mov	r3, r1
 8001fe4:	70fb      	strb	r3, [r7, #3]
    writeBit(devAddr, MPU6050_RA_PWR_MGMT_1, MPU6050_PWR1_SLEEP_BIT, enabled);
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	7998      	ldrb	r0, [r3, #6]
 8001fea:	78fb      	ldrb	r3, [r7, #3]
 8001fec:	2206      	movs	r2, #6
 8001fee:	216b      	movs	r1, #107	; 0x6b
 8001ff0:	f7ff fb90 	bl	8001714 <_Z8writeBithhhh>
}
 8001ff4:	bf00      	nop
 8001ff6:	3708      	adds	r7, #8
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	bd80      	pop	{r7, pc}

08001ffc <_ZN7MPU605014setClockSourceEh>:
 * @see getClockSource()
 * @see MPU6050_RA_PWR_MGMT_1
 * @see MPU6050_PWR1_CLKSEL_BIT
 * @see MPU6050_PWR1_CLKSEL_LENGTH
 */
void MPU6050::setClockSource(uint8_t source) {
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b084      	sub	sp, #16
 8002000:	af02      	add	r7, sp, #8
 8002002:	6078      	str	r0, [r7, #4]
 8002004:	460b      	mov	r3, r1
 8002006:	70fb      	strb	r3, [r7, #3]
    writeBits(devAddr, MPU6050_RA_PWR_MGMT_1, MPU6050_PWR1_CLKSEL_BIT, MPU6050_PWR1_CLKSEL_LENGTH, source);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	7998      	ldrb	r0, [r3, #6]
 800200c:	78fb      	ldrb	r3, [r7, #3]
 800200e:	9300      	str	r3, [sp, #0]
 8002010:	2303      	movs	r3, #3
 8002012:	2202      	movs	r2, #2
 8002014:	216b      	movs	r1, #107	; 0x6b
 8002016:	f7ff fbf9 	bl	800180c <_Z9writeBitshhhhh>
}
 800201a:	bf00      	nop
 800201c:	3708      	adds	r7, #8
 800201e:	46bd      	mov	sp, r7
 8002020:	bd80      	pop	{r7, pc}

08002022 <_ZN7MPU605012getFIFOCountEv>:
 * number is in turn the number of bytes that can be read from the FIFO buffer
 * and it is directly proportional to the number of samples available given the
 * set of sensor data bound to be stored in the FIFO (register 35 and 36).
 * @return Current FIFO buffer size
 */
uint16_t MPU6050::getFIFOCount() {
 8002022:	b580      	push	{r7, lr}
 8002024:	b082      	sub	sp, #8
 8002026:	af00      	add	r7, sp, #0
 8002028:	6078      	str	r0, [r7, #4]
    readBytes(devAddr, MPU6050_RA_FIFO_COUNTH, 2, buffer);
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	7998      	ldrb	r0, [r3, #6]
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	3307      	adds	r3, #7
 8002032:	2202      	movs	r2, #2
 8002034:	2172      	movs	r1, #114	; 0x72
 8002036:	f7ff faf7 	bl	8001628 <_Z9readByteshhhPh>
    return (((uint16_t)buffer[0]) << 8) | buffer[1];
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	79db      	ldrb	r3, [r3, #7]
 800203e:	021b      	lsls	r3, r3, #8
 8002040:	b21a      	sxth	r2, r3
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	7a1b      	ldrb	r3, [r3, #8]
 8002046:	b21b      	sxth	r3, r3
 8002048:	4313      	orrs	r3, r2
 800204a:	b21b      	sxth	r3, r3
 800204c:	b29b      	uxth	r3, r3
}
 800204e:	4618      	mov	r0, r3
 8002050:	3708      	adds	r7, #8
 8002052:	46bd      	mov	sp, r7
 8002054:	bd80      	pop	{r7, pc}

08002056 <_ZN7MPU605012getFIFOBytesEPhh>:
 */
uint8_t MPU6050::getFIFOByte() {
    readByte(devAddr, MPU6050_RA_FIFO_R_W, buffer);
    return buffer[0];
}
void MPU6050::getFIFOBytes(uint8_t *data, uint8_t length) {
 8002056:	b580      	push	{r7, lr}
 8002058:	b084      	sub	sp, #16
 800205a:	af00      	add	r7, sp, #0
 800205c:	60f8      	str	r0, [r7, #12]
 800205e:	60b9      	str	r1, [r7, #8]
 8002060:	4613      	mov	r3, r2
 8002062:	71fb      	strb	r3, [r7, #7]
    if(length > 0){
 8002064:	79fb      	ldrb	r3, [r7, #7]
 8002066:	2b00      	cmp	r3, #0
 8002068:	d007      	beq.n	800207a <_ZN7MPU605012getFIFOBytesEPhh+0x24>
        readBytes(devAddr, MPU6050_RA_FIFO_R_W, length, data);
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	7998      	ldrb	r0, [r3, #6]
 800206e:	79fa      	ldrb	r2, [r7, #7]
 8002070:	68bb      	ldr	r3, [r7, #8]
 8002072:	2174      	movs	r1, #116	; 0x74
 8002074:	f7ff fad8 	bl	8001628 <_Z9readByteshhhPh>
    } else {
    	*data = 0;
    }
}
 8002078:	e002      	b.n	8002080 <_ZN7MPU605012getFIFOBytesEPhh+0x2a>
    	*data = 0;
 800207a:	68bb      	ldr	r3, [r7, #8]
 800207c:	2200      	movs	r2, #0
 800207e:	701a      	strb	r2, [r3, #0]
}
 8002080:	bf00      	nop
 8002082:	3710      	adds	r7, #16
 8002084:	46bd      	mov	sp, r7
 8002086:	bd80      	pop	{r7, pc}

08002088 <_ZN7MPU605015setOTPBankValidEb>:

uint8_t MPU6050::getOTPBankValid() {
    readBit(devAddr, MPU6050_RA_XG_OFFS_TC, MPU6050_TC_OTP_BNK_VLD_BIT, buffer);
    return buffer[0];
}
void MPU6050::setOTPBankValid(bool enabled) {
 8002088:	b580      	push	{r7, lr}
 800208a:	b082      	sub	sp, #8
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
 8002090:	460b      	mov	r3, r1
 8002092:	70fb      	strb	r3, [r7, #3]
    writeBit(devAddr, MPU6050_RA_XG_OFFS_TC, MPU6050_TC_OTP_BNK_VLD_BIT, enabled);
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	7998      	ldrb	r0, [r3, #6]
 8002098:	78fb      	ldrb	r3, [r7, #3]
 800209a:	2200      	movs	r2, #0
 800209c:	2100      	movs	r1, #0
 800209e:	f7ff fb39 	bl	8001714 <_Z8writeBithhhh>
}
 80020a2:	bf00      	nop
 80020a4:	3708      	adds	r7, #8
 80020a6:	46bd      	mov	sp, r7
 80020a8:	bd80      	pop	{r7, pc}

080020aa <_ZN7MPU605016getXGyroOffsetTCEv>:
int8_t MPU6050::getXGyroOffsetTC() {
 80020aa:	b580      	push	{r7, lr}
 80020ac:	b084      	sub	sp, #16
 80020ae:	af02      	add	r7, sp, #8
 80020b0:	6078      	str	r0, [r7, #4]
    readBits(devAddr, MPU6050_RA_XG_OFFS_TC, MPU6050_TC_OFFSET_BIT, MPU6050_TC_OFFSET_LENGTH, buffer);
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	7998      	ldrb	r0, [r3, #6]
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	3307      	adds	r3, #7
 80020ba:	9300      	str	r3, [sp, #0]
 80020bc:	2306      	movs	r3, #6
 80020be:	2206      	movs	r2, #6
 80020c0:	2100      	movs	r1, #0
 80020c2:	f7ff fa19 	bl	80014f8 <_Z8readBitshhhhPh>
    return buffer[0];
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	79db      	ldrb	r3, [r3, #7]
 80020ca:	b25b      	sxtb	r3, r3
}
 80020cc:	4618      	mov	r0, r3
 80020ce:	3708      	adds	r7, #8
 80020d0:	46bd      	mov	sp, r7
 80020d2:	bd80      	pop	{r7, pc}

080020d4 <_ZN7MPU605016setXGyroOffsetTCEa>:
void MPU6050::setXGyroOffsetTC(int8_t offset) {
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b084      	sub	sp, #16
 80020d8:	af02      	add	r7, sp, #8
 80020da:	6078      	str	r0, [r7, #4]
 80020dc:	460b      	mov	r3, r1
 80020de:	70fb      	strb	r3, [r7, #3]
    writeBits(devAddr, MPU6050_RA_XG_OFFS_TC, MPU6050_TC_OFFSET_BIT, MPU6050_TC_OFFSET_LENGTH, offset);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	7998      	ldrb	r0, [r3, #6]
 80020e4:	78fb      	ldrb	r3, [r7, #3]
 80020e6:	9300      	str	r3, [sp, #0]
 80020e8:	2306      	movs	r3, #6
 80020ea:	2206      	movs	r2, #6
 80020ec:	2100      	movs	r1, #0
 80020ee:	f7ff fb8d 	bl	800180c <_Z9writeBitshhhhh>
}
 80020f2:	bf00      	nop
 80020f4:	3708      	adds	r7, #8
 80020f6:	46bd      	mov	sp, r7
 80020f8:	bd80      	pop	{r7, pc}

080020fa <_ZN7MPU605016getYGyroOffsetTCEv>:

// YG_OFFS_TC register

int8_t MPU6050::getYGyroOffsetTC() {
 80020fa:	b580      	push	{r7, lr}
 80020fc:	b084      	sub	sp, #16
 80020fe:	af02      	add	r7, sp, #8
 8002100:	6078      	str	r0, [r7, #4]
    readBits(devAddr, MPU6050_RA_YG_OFFS_TC, MPU6050_TC_OFFSET_BIT, MPU6050_TC_OFFSET_LENGTH, buffer);
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	7998      	ldrb	r0, [r3, #6]
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	3307      	adds	r3, #7
 800210a:	9300      	str	r3, [sp, #0]
 800210c:	2306      	movs	r3, #6
 800210e:	2206      	movs	r2, #6
 8002110:	2101      	movs	r1, #1
 8002112:	f7ff f9f1 	bl	80014f8 <_Z8readBitshhhhPh>
    return buffer[0];
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	79db      	ldrb	r3, [r3, #7]
 800211a:	b25b      	sxtb	r3, r3
}
 800211c:	4618      	mov	r0, r3
 800211e:	3708      	adds	r7, #8
 8002120:	46bd      	mov	sp, r7
 8002122:	bd80      	pop	{r7, pc}

08002124 <_ZN7MPU605016setYGyroOffsetTCEa>:
void MPU6050::setYGyroOffsetTC(int8_t offset) {
 8002124:	b580      	push	{r7, lr}
 8002126:	b084      	sub	sp, #16
 8002128:	af02      	add	r7, sp, #8
 800212a:	6078      	str	r0, [r7, #4]
 800212c:	460b      	mov	r3, r1
 800212e:	70fb      	strb	r3, [r7, #3]
    writeBits(devAddr, MPU6050_RA_YG_OFFS_TC, MPU6050_TC_OFFSET_BIT, MPU6050_TC_OFFSET_LENGTH, offset);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	7998      	ldrb	r0, [r3, #6]
 8002134:	78fb      	ldrb	r3, [r7, #3]
 8002136:	9300      	str	r3, [sp, #0]
 8002138:	2306      	movs	r3, #6
 800213a:	2206      	movs	r2, #6
 800213c:	2101      	movs	r1, #1
 800213e:	f7ff fb65 	bl	800180c <_Z9writeBitshhhhh>
}
 8002142:	bf00      	nop
 8002144:	3708      	adds	r7, #8
 8002146:	46bd      	mov	sp, r7
 8002148:	bd80      	pop	{r7, pc}

0800214a <_ZN7MPU605016getZGyroOffsetTCEv>:

// ZG_OFFS_TC register

int8_t MPU6050::getZGyroOffsetTC() {
 800214a:	b580      	push	{r7, lr}
 800214c:	b084      	sub	sp, #16
 800214e:	af02      	add	r7, sp, #8
 8002150:	6078      	str	r0, [r7, #4]
    readBits(devAddr, MPU6050_RA_ZG_OFFS_TC, MPU6050_TC_OFFSET_BIT, MPU6050_TC_OFFSET_LENGTH, buffer);
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	7998      	ldrb	r0, [r3, #6]
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	3307      	adds	r3, #7
 800215a:	9300      	str	r3, [sp, #0]
 800215c:	2306      	movs	r3, #6
 800215e:	2206      	movs	r2, #6
 8002160:	2102      	movs	r1, #2
 8002162:	f7ff f9c9 	bl	80014f8 <_Z8readBitshhhhPh>
    return buffer[0];
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	79db      	ldrb	r3, [r3, #7]
 800216a:	b25b      	sxtb	r3, r3
}
 800216c:	4618      	mov	r0, r3
 800216e:	3708      	adds	r7, #8
 8002170:	46bd      	mov	sp, r7
 8002172:	bd80      	pop	{r7, pc}

08002174 <_ZN7MPU605016setZGyroOffsetTCEa>:
void MPU6050::setZGyroOffsetTC(int8_t offset) {
 8002174:	b580      	push	{r7, lr}
 8002176:	b084      	sub	sp, #16
 8002178:	af02      	add	r7, sp, #8
 800217a:	6078      	str	r0, [r7, #4]
 800217c:	460b      	mov	r3, r1
 800217e:	70fb      	strb	r3, [r7, #3]
    writeBits(devAddr, MPU6050_RA_ZG_OFFS_TC, MPU6050_TC_OFFSET_BIT, MPU6050_TC_OFFSET_LENGTH, offset);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	7998      	ldrb	r0, [r3, #6]
 8002184:	78fb      	ldrb	r3, [r7, #3]
 8002186:	9300      	str	r3, [sp, #0]
 8002188:	2306      	movs	r3, #6
 800218a:	2206      	movs	r2, #6
 800218c:	2102      	movs	r1, #2
 800218e:	f7ff fb3d 	bl	800180c <_Z9writeBitshhhhh>
}
 8002192:	bf00      	nop
 8002194:	3708      	adds	r7, #8
 8002196:	46bd      	mov	sp, r7
 8002198:	bd80      	pop	{r7, pc}

0800219a <_ZN7MPU605015setXAccelOffsetEs>:

int16_t MPU6050::getXAccelOffset() {
    readBytes(devAddr, MPU6050_RA_XA_OFFS_H, 2, buffer);
    return (((int16_t)buffer[0]) << 8) | buffer[1];
}
void MPU6050::setXAccelOffset(int16_t offset) {
 800219a:	b580      	push	{r7, lr}
 800219c:	b082      	sub	sp, #8
 800219e:	af00      	add	r7, sp, #0
 80021a0:	6078      	str	r0, [r7, #4]
 80021a2:	460b      	mov	r3, r1
 80021a4:	807b      	strh	r3, [r7, #2]
    writeWord(devAddr, MPU6050_RA_XA_OFFS_H, offset);
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	799b      	ldrb	r3, [r3, #6]
 80021aa:	887a      	ldrh	r2, [r7, #2]
 80021ac:	2106      	movs	r1, #6
 80021ae:	4618      	mov	r0, r3
 80021b0:	f7ff fbf0 	bl	8001994 <_Z9writeWordhht>
}
 80021b4:	bf00      	nop
 80021b6:	3708      	adds	r7, #8
 80021b8:	46bd      	mov	sp, r7
 80021ba:	bd80      	pop	{r7, pc}

080021bc <_ZN7MPU605015setYAccelOffsetEs>:

int16_t MPU6050::getYAccelOffset() {
    readBytes(devAddr, MPU6050_RA_YA_OFFS_H, 2, buffer);
    return (((int16_t)buffer[0]) << 8) | buffer[1];
}
void MPU6050::setYAccelOffset(int16_t offset) {
 80021bc:	b580      	push	{r7, lr}
 80021be:	b082      	sub	sp, #8
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]
 80021c4:	460b      	mov	r3, r1
 80021c6:	807b      	strh	r3, [r7, #2]
    writeWord(devAddr, MPU6050_RA_YA_OFFS_H, offset);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	799b      	ldrb	r3, [r3, #6]
 80021cc:	887a      	ldrh	r2, [r7, #2]
 80021ce:	2108      	movs	r1, #8
 80021d0:	4618      	mov	r0, r3
 80021d2:	f7ff fbdf 	bl	8001994 <_Z9writeWordhht>
}
 80021d6:	bf00      	nop
 80021d8:	3708      	adds	r7, #8
 80021da:	46bd      	mov	sp, r7
 80021dc:	bd80      	pop	{r7, pc}

080021de <_ZN7MPU605015setZAccelOffsetEs>:

int16_t MPU6050::getZAccelOffset() {
    readBytes(devAddr, MPU6050_RA_ZA_OFFS_H, 2, buffer);
    return (((int16_t)buffer[0]) << 8) | buffer[1];
}
void MPU6050::setZAccelOffset(int16_t offset) {
 80021de:	b580      	push	{r7, lr}
 80021e0:	b082      	sub	sp, #8
 80021e2:	af00      	add	r7, sp, #0
 80021e4:	6078      	str	r0, [r7, #4]
 80021e6:	460b      	mov	r3, r1
 80021e8:	807b      	strh	r3, [r7, #2]
    writeWord(devAddr, MPU6050_RA_ZA_OFFS_H, offset);
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	799b      	ldrb	r3, [r3, #6]
 80021ee:	887a      	ldrh	r2, [r7, #2]
 80021f0:	210a      	movs	r1, #10
 80021f2:	4618      	mov	r0, r3
 80021f4:	f7ff fbce 	bl	8001994 <_Z9writeWordhht>
}
 80021f8:	bf00      	nop
 80021fa:	3708      	adds	r7, #8
 80021fc:	46bd      	mov	sp, r7
 80021fe:	bd80      	pop	{r7, pc}

08002200 <_ZN7MPU605014setXGyroOffsetEs>:

int16_t MPU6050::getXGyroOffset() {
    readBytes(devAddr, MPU6050_RA_XG_OFFS_USRH, 2, buffer);
    return (((int16_t)buffer[0]) << 8) | buffer[1];
}
void MPU6050::setXGyroOffset(int16_t offset) {
 8002200:	b580      	push	{r7, lr}
 8002202:	b082      	sub	sp, #8
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
 8002208:	460b      	mov	r3, r1
 800220a:	807b      	strh	r3, [r7, #2]
    writeWord(devAddr, MPU6050_RA_XG_OFFS_USRH, offset);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	799b      	ldrb	r3, [r3, #6]
 8002210:	887a      	ldrh	r2, [r7, #2]
 8002212:	2113      	movs	r1, #19
 8002214:	4618      	mov	r0, r3
 8002216:	f7ff fbbd 	bl	8001994 <_Z9writeWordhht>
}
 800221a:	bf00      	nop
 800221c:	3708      	adds	r7, #8
 800221e:	46bd      	mov	sp, r7
 8002220:	bd80      	pop	{r7, pc}

08002222 <_ZN7MPU605014setYGyroOffsetEs>:

int16_t MPU6050::getYGyroOffset() {
    readBytes(devAddr, MPU6050_RA_YG_OFFS_USRH, 2, buffer);
    return (((int16_t)buffer[0]) << 8) | buffer[1];
}
void MPU6050::setYGyroOffset(int16_t offset) {
 8002222:	b580      	push	{r7, lr}
 8002224:	b082      	sub	sp, #8
 8002226:	af00      	add	r7, sp, #0
 8002228:	6078      	str	r0, [r7, #4]
 800222a:	460b      	mov	r3, r1
 800222c:	807b      	strh	r3, [r7, #2]
    writeWord(devAddr, MPU6050_RA_YG_OFFS_USRH, offset);
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	799b      	ldrb	r3, [r3, #6]
 8002232:	887a      	ldrh	r2, [r7, #2]
 8002234:	2115      	movs	r1, #21
 8002236:	4618      	mov	r0, r3
 8002238:	f7ff fbac 	bl	8001994 <_Z9writeWordhht>
}
 800223c:	bf00      	nop
 800223e:	3708      	adds	r7, #8
 8002240:	46bd      	mov	sp, r7
 8002242:	bd80      	pop	{r7, pc}

08002244 <_ZN7MPU605014setZGyroOffsetEs>:

int16_t MPU6050::getZGyroOffset() {
    readBytes(devAddr, MPU6050_RA_ZG_OFFS_USRH, 2, buffer);
    return (((int16_t)buffer[0]) << 8) | buffer[1];
}
void MPU6050::setZGyroOffset(int16_t offset) {
 8002244:	b580      	push	{r7, lr}
 8002246:	b082      	sub	sp, #8
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
 800224c:	460b      	mov	r3, r1
 800224e:	807b      	strh	r3, [r7, #2]
    writeWord(devAddr, MPU6050_RA_ZG_OFFS_USRH, offset);
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	799b      	ldrb	r3, [r3, #6]
 8002254:	887a      	ldrh	r2, [r7, #2]
 8002256:	2117      	movs	r1, #23
 8002258:	4618      	mov	r0, r3
 800225a:	f7ff fb9b 	bl	8001994 <_Z9writeWordhht>
}
 800225e:	bf00      	nop
 8002260:	3708      	adds	r7, #8
 8002262:	46bd      	mov	sp, r7
 8002264:	bd80      	pop	{r7, pc}

08002266 <_ZN7MPU605013setDMPEnabledEb>:

bool MPU6050::getDMPEnabled() {
    readBit(devAddr, MPU6050_RA_USER_CTRL, MPU6050_USERCTRL_DMP_EN_BIT, buffer);
    return buffer[0];
}
void MPU6050::setDMPEnabled(bool enabled) {
 8002266:	b580      	push	{r7, lr}
 8002268:	b082      	sub	sp, #8
 800226a:	af00      	add	r7, sp, #0
 800226c:	6078      	str	r0, [r7, #4]
 800226e:	460b      	mov	r3, r1
 8002270:	70fb      	strb	r3, [r7, #3]
    writeBit(devAddr, MPU6050_RA_USER_CTRL, MPU6050_USERCTRL_DMP_EN_BIT, enabled);
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	7998      	ldrb	r0, [r3, #6]
 8002276:	78fb      	ldrb	r3, [r7, #3]
 8002278:	2207      	movs	r2, #7
 800227a:	216a      	movs	r1, #106	; 0x6a
 800227c:	f7ff fa4a 	bl	8001714 <_Z8writeBithhhh>
}
 8002280:	bf00      	nop
 8002282:	3708      	adds	r7, #8
 8002284:	46bd      	mov	sp, r7
 8002286:	bd80      	pop	{r7, pc}

08002288 <_ZN7MPU60508resetDMPEv>:
void MPU6050::resetDMP() {
 8002288:	b580      	push	{r7, lr}
 800228a:	b082      	sub	sp, #8
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
    writeBit(devAddr, MPU6050_RA_USER_CTRL, MPU6050_USERCTRL_DMP_RESET_BIT, true);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	7998      	ldrb	r0, [r3, #6]
 8002294:	2301      	movs	r3, #1
 8002296:	2203      	movs	r2, #3
 8002298:	216a      	movs	r1, #106	; 0x6a
 800229a:	f7ff fa3b 	bl	8001714 <_Z8writeBithhhh>
}
 800229e:	bf00      	nop
 80022a0:	3708      	adds	r7, #8
 80022a2:	46bd      	mov	sp, r7
 80022a4:	bd80      	pop	{r7, pc}

080022a6 <_ZN7MPU605013setMemoryBankEhbb>:

// BANK_SEL register

void MPU6050::setMemoryBank(uint8_t bank, bool prefetchEnabled, bool userBank) {
 80022a6:	b580      	push	{r7, lr}
 80022a8:	b082      	sub	sp, #8
 80022aa:	af00      	add	r7, sp, #0
 80022ac:	6078      	str	r0, [r7, #4]
 80022ae:	4608      	mov	r0, r1
 80022b0:	4611      	mov	r1, r2
 80022b2:	461a      	mov	r2, r3
 80022b4:	4603      	mov	r3, r0
 80022b6:	70fb      	strb	r3, [r7, #3]
 80022b8:	460b      	mov	r3, r1
 80022ba:	70bb      	strb	r3, [r7, #2]
 80022bc:	4613      	mov	r3, r2
 80022be:	707b      	strb	r3, [r7, #1]
    bank &= 0x1F;
 80022c0:	78fb      	ldrb	r3, [r7, #3]
 80022c2:	f003 031f 	and.w	r3, r3, #31
 80022c6:	70fb      	strb	r3, [r7, #3]
    if (userBank) bank |= 0x20;
 80022c8:	787b      	ldrb	r3, [r7, #1]
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d003      	beq.n	80022d6 <_ZN7MPU605013setMemoryBankEhbb+0x30>
 80022ce:	78fb      	ldrb	r3, [r7, #3]
 80022d0:	f043 0320 	orr.w	r3, r3, #32
 80022d4:	70fb      	strb	r3, [r7, #3]
    if (prefetchEnabled) bank |= 0x40;
 80022d6:	78bb      	ldrb	r3, [r7, #2]
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d003      	beq.n	80022e4 <_ZN7MPU605013setMemoryBankEhbb+0x3e>
 80022dc:	78fb      	ldrb	r3, [r7, #3]
 80022de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80022e2:	70fb      	strb	r3, [r7, #3]
    writeByte(devAddr, MPU6050_RA_BANK_SEL, bank);
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	799b      	ldrb	r3, [r3, #6]
 80022e8:	78fa      	ldrb	r2, [r7, #3]
 80022ea:	216d      	movs	r1, #109	; 0x6d
 80022ec:	4618      	mov	r0, r3
 80022ee:	f7ff fb19 	bl	8001924 <_Z9writeBytehhh>
}
 80022f2:	bf00      	nop
 80022f4:	3708      	adds	r7, #8
 80022f6:	46bd      	mov	sp, r7
 80022f8:	bd80      	pop	{r7, pc}

080022fa <_ZN7MPU605021setMemoryStartAddressEh>:

// MEM_START_ADDR register

void MPU6050::setMemoryStartAddress(uint8_t address) {
 80022fa:	b580      	push	{r7, lr}
 80022fc:	b082      	sub	sp, #8
 80022fe:	af00      	add	r7, sp, #0
 8002300:	6078      	str	r0, [r7, #4]
 8002302:	460b      	mov	r3, r1
 8002304:	70fb      	strb	r3, [r7, #3]
    writeByte(devAddr, MPU6050_RA_MEM_START_ADDR, address);
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	799b      	ldrb	r3, [r3, #6]
 800230a:	78fa      	ldrb	r2, [r7, #3]
 800230c:	216e      	movs	r1, #110	; 0x6e
 800230e:	4618      	mov	r0, r3
 8002310:	f7ff fb08 	bl	8001924 <_Z9writeBytehhh>
}
 8002314:	bf00      	nop
 8002316:	3708      	adds	r7, #8
 8002318:	46bd      	mov	sp, r7
 800231a:	bd80      	pop	{r7, pc}

0800231c <_ZN7MPU605015readMemoryBlockEPhthh>:
    return buffer[0];
}
void MPU6050::writeMemoryByte(uint8_t data) {
    writeByte(devAddr, MPU6050_RA_MEM_R_W, data);
}
void MPU6050::readMemoryBlock(uint8_t *data, uint16_t dataSize, uint8_t bank, uint8_t address) {
 800231c:	b580      	push	{r7, lr}
 800231e:	b086      	sub	sp, #24
 8002320:	af00      	add	r7, sp, #0
 8002322:	60f8      	str	r0, [r7, #12]
 8002324:	60b9      	str	r1, [r7, #8]
 8002326:	4611      	mov	r1, r2
 8002328:	461a      	mov	r2, r3
 800232a:	460b      	mov	r3, r1
 800232c:	80fb      	strh	r3, [r7, #6]
 800232e:	4613      	mov	r3, r2
 8002330:	717b      	strb	r3, [r7, #5]
    setMemoryBank(bank);
 8002332:	7979      	ldrb	r1, [r7, #5]
 8002334:	2300      	movs	r3, #0
 8002336:	2200      	movs	r2, #0
 8002338:	68f8      	ldr	r0, [r7, #12]
 800233a:	f7ff ffb4 	bl	80022a6 <_ZN7MPU605013setMemoryBankEhbb>
    setMemoryStartAddress(address);
 800233e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002342:	4619      	mov	r1, r3
 8002344:	68f8      	ldr	r0, [r7, #12]
 8002346:	f7ff ffd8 	bl	80022fa <_ZN7MPU605021setMemoryStartAddressEh>
    uint8_t chunkSize;
    for (uint16_t i = 0; i < dataSize;) {
 800234a:	2300      	movs	r3, #0
 800234c:	82bb      	strh	r3, [r7, #20]
 800234e:	8aba      	ldrh	r2, [r7, #20]
 8002350:	88fb      	ldrh	r3, [r7, #6]
 8002352:	429a      	cmp	r2, r3
 8002354:	d244      	bcs.n	80023e0 <_ZN7MPU605015readMemoryBlockEPhthh+0xc4>
        // determine correct chunk size according to bank position and data size
        chunkSize = MPU6050_DMP_MEMORY_CHUNK_SIZE;
 8002356:	2310      	movs	r3, #16
 8002358:	75fb      	strb	r3, [r7, #23]

        // make sure we don't go past the data size
        if (i + chunkSize > dataSize) chunkSize = dataSize - i;
 800235a:	8aba      	ldrh	r2, [r7, #20]
 800235c:	7dfb      	ldrb	r3, [r7, #23]
 800235e:	441a      	add	r2, r3
 8002360:	88fb      	ldrh	r3, [r7, #6]
 8002362:	429a      	cmp	r2, r3
 8002364:	dd05      	ble.n	8002372 <_ZN7MPU605015readMemoryBlockEPhthh+0x56>
 8002366:	88fb      	ldrh	r3, [r7, #6]
 8002368:	b2da      	uxtb	r2, r3
 800236a:	8abb      	ldrh	r3, [r7, #20]
 800236c:	b2db      	uxtb	r3, r3
 800236e:	1ad3      	subs	r3, r2, r3
 8002370:	75fb      	strb	r3, [r7, #23]

        // make sure this chunk doesn't go past the bank boundary (256 bytes)
        if (chunkSize > 256 - address) chunkSize = 256 - address;
 8002372:	7dfa      	ldrb	r2, [r7, #23]
 8002374:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002378:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 800237c:	429a      	cmp	r2, r3
 800237e:	dd03      	ble.n	8002388 <_ZN7MPU605015readMemoryBlockEPhthh+0x6c>
 8002380:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002384:	425b      	negs	r3, r3
 8002386:	75fb      	strb	r3, [r7, #23]

        // read the chunk of data as specified
        readBytes(devAddr, MPU6050_RA_MEM_R_W, chunkSize, data + i);
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	7998      	ldrb	r0, [r3, #6]
 800238c:	8abb      	ldrh	r3, [r7, #20]
 800238e:	68ba      	ldr	r2, [r7, #8]
 8002390:	4413      	add	r3, r2
 8002392:	7dfa      	ldrb	r2, [r7, #23]
 8002394:	216f      	movs	r1, #111	; 0x6f
 8002396:	f7ff f947 	bl	8001628 <_Z9readByteshhhPh>
        
        // increase byte index by [chunkSize]
        i += chunkSize;
 800239a:	7dfb      	ldrb	r3, [r7, #23]
 800239c:	b29a      	uxth	r2, r3
 800239e:	8abb      	ldrh	r3, [r7, #20]
 80023a0:	4413      	add	r3, r2
 80023a2:	82bb      	strh	r3, [r7, #20]

        // uint8_t automatically wraps to 0 at 256
        address += chunkSize;
 80023a4:	f897 2020 	ldrb.w	r2, [r7, #32]
 80023a8:	7dfb      	ldrb	r3, [r7, #23]
 80023aa:	4413      	add	r3, r2
 80023ac:	f887 3020 	strb.w	r3, [r7, #32]

        // if we aren't done, update bank (if necessary) and address
        if (i < dataSize) {
 80023b0:	8aba      	ldrh	r2, [r7, #20]
 80023b2:	88fb      	ldrh	r3, [r7, #6]
 80023b4:	429a      	cmp	r2, r3
 80023b6:	d2ca      	bcs.n	800234e <_ZN7MPU605015readMemoryBlockEPhthh+0x32>
            if (address == 0) bank++;
 80023b8:	f897 3020 	ldrb.w	r3, [r7, #32]
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d102      	bne.n	80023c6 <_ZN7MPU605015readMemoryBlockEPhthh+0xaa>
 80023c0:	797b      	ldrb	r3, [r7, #5]
 80023c2:	3301      	adds	r3, #1
 80023c4:	717b      	strb	r3, [r7, #5]
            setMemoryBank(bank);
 80023c6:	7979      	ldrb	r1, [r7, #5]
 80023c8:	2300      	movs	r3, #0
 80023ca:	2200      	movs	r2, #0
 80023cc:	68f8      	ldr	r0, [r7, #12]
 80023ce:	f7ff ff6a 	bl	80022a6 <_ZN7MPU605013setMemoryBankEhbb>
            setMemoryStartAddress(address);
 80023d2:	f897 3020 	ldrb.w	r3, [r7, #32]
 80023d6:	4619      	mov	r1, r3
 80023d8:	68f8      	ldr	r0, [r7, #12]
 80023da:	f7ff ff8e 	bl	80022fa <_ZN7MPU605021setMemoryStartAddressEh>
    for (uint16_t i = 0; i < dataSize;) {
 80023de:	e7b6      	b.n	800234e <_ZN7MPU605015readMemoryBlockEPhthh+0x32>
        }
    }
}
 80023e0:	bf00      	nop
 80023e2:	3718      	adds	r7, #24
 80023e4:	46bd      	mov	sp, r7
 80023e6:	bd80      	pop	{r7, pc}

080023e8 <_ZN7MPU605016writeMemoryBlockEPKhthhbb>:
bool MPU6050::writeMemoryBlock(const uint8_t *data, uint16_t dataSize, uint8_t bank, uint8_t address, bool verify, bool useProgMem) {
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b088      	sub	sp, #32
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	60f8      	str	r0, [r7, #12]
 80023f0:	60b9      	str	r1, [r7, #8]
 80023f2:	4611      	mov	r1, r2
 80023f4:	461a      	mov	r2, r3
 80023f6:	460b      	mov	r3, r1
 80023f8:	80fb      	strh	r3, [r7, #6]
 80023fa:	4613      	mov	r3, r2
 80023fc:	717b      	strb	r3, [r7, #5]
    setMemoryBank(bank);
 80023fe:	7979      	ldrb	r1, [r7, #5]
 8002400:	2300      	movs	r3, #0
 8002402:	2200      	movs	r2, #0
 8002404:	68f8      	ldr	r0, [r7, #12]
 8002406:	f7ff ff4e 	bl	80022a6 <_ZN7MPU605013setMemoryBankEhbb>
    setMemoryStartAddress(address);
 800240a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800240e:	4619      	mov	r1, r3
 8002410:	68f8      	ldr	r0, [r7, #12]
 8002412:	f7ff ff72 	bl	80022fa <_ZN7MPU605021setMemoryStartAddressEh>
    uint8_t chunkSize;
    uint8_t *verifyBuffer=0;
 8002416:	2300      	movs	r3, #0
 8002418:	61bb      	str	r3, [r7, #24]
    uint8_t *progBuffer=0;
 800241a:	2300      	movs	r3, #0
 800241c:	617b      	str	r3, [r7, #20]
    uint16_t i;
    uint8_t j;
    if (verify) verifyBuffer = (uint8_t *)malloc(MPU6050_DMP_MEMORY_CHUNK_SIZE);
 800241e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8002422:	2b00      	cmp	r3, #0
 8002424:	d004      	beq.n	8002430 <_ZN7MPU605016writeMemoryBlockEPKhthhbb+0x48>
 8002426:	2010      	movs	r0, #16
 8002428:	f00d faac 	bl	800f984 <malloc>
 800242c:	4603      	mov	r3, r0
 800242e:	61bb      	str	r3, [r7, #24]
    if (useProgMem) progBuffer = (uint8_t *)malloc(MPU6050_DMP_MEMORY_CHUNK_SIZE);
 8002430:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8002434:	2b00      	cmp	r3, #0
 8002436:	d004      	beq.n	8002442 <_ZN7MPU605016writeMemoryBlockEPKhthhbb+0x5a>
 8002438:	2010      	movs	r0, #16
 800243a:	f00d faa3 	bl	800f984 <malloc>
 800243e:	4603      	mov	r3, r0
 8002440:	617b      	str	r3, [r7, #20]
    for (i = 0; i < dataSize;) {
 8002442:	2300      	movs	r3, #0
 8002444:	827b      	strh	r3, [r7, #18]
 8002446:	8a7a      	ldrh	r2, [r7, #18]
 8002448:	88fb      	ldrh	r3, [r7, #6]
 800244a:	429a      	cmp	r2, r3
 800244c:	f080 808e 	bcs.w	800256c <_ZN7MPU605016writeMemoryBlockEPKhthhbb+0x184>
        // determine correct chunk size according to bank position and data size
        chunkSize = MPU6050_DMP_MEMORY_CHUNK_SIZE;
 8002450:	2310      	movs	r3, #16
 8002452:	77fb      	strb	r3, [r7, #31]

        // make sure we don't go past the data size
        if (i + chunkSize > dataSize) chunkSize = dataSize - i;
 8002454:	8a7a      	ldrh	r2, [r7, #18]
 8002456:	7ffb      	ldrb	r3, [r7, #31]
 8002458:	441a      	add	r2, r3
 800245a:	88fb      	ldrh	r3, [r7, #6]
 800245c:	429a      	cmp	r2, r3
 800245e:	dd05      	ble.n	800246c <_ZN7MPU605016writeMemoryBlockEPKhthhbb+0x84>
 8002460:	88fb      	ldrh	r3, [r7, #6]
 8002462:	b2da      	uxtb	r2, r3
 8002464:	8a7b      	ldrh	r3, [r7, #18]
 8002466:	b2db      	uxtb	r3, r3
 8002468:	1ad3      	subs	r3, r2, r3
 800246a:	77fb      	strb	r3, [r7, #31]

        // make sure this chunk doesn't go past the bank boundary (256 bytes)
        if (chunkSize > 256 - address) chunkSize = 256 - address;
 800246c:	7ffa      	ldrb	r2, [r7, #31]
 800246e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8002472:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8002476:	429a      	cmp	r2, r3
 8002478:	dd03      	ble.n	8002482 <_ZN7MPU605016writeMemoryBlockEPKhthhbb+0x9a>
 800247a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800247e:	425b      	negs	r3, r3
 8002480:	77fb      	strb	r3, [r7, #31]
        
        if (useProgMem) {
 8002482:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8002486:	2b00      	cmp	r3, #0
 8002488:	d013      	beq.n	80024b2 <_ZN7MPU605016writeMemoryBlockEPKhthhbb+0xca>
            // write the chunk of data as specified
            for (j = 0; j < chunkSize; j++) progBuffer[j] = pgm_read_byte(data + i + j);
 800248a:	2300      	movs	r3, #0
 800248c:	747b      	strb	r3, [r7, #17]
 800248e:	7c7a      	ldrb	r2, [r7, #17]
 8002490:	7ffb      	ldrb	r3, [r7, #31]
 8002492:	429a      	cmp	r2, r3
 8002494:	d211      	bcs.n	80024ba <_ZN7MPU605016writeMemoryBlockEPKhthhbb+0xd2>
 8002496:	8a7a      	ldrh	r2, [r7, #18]
 8002498:	7c7b      	ldrb	r3, [r7, #17]
 800249a:	4413      	add	r3, r2
 800249c:	68ba      	ldr	r2, [r7, #8]
 800249e:	441a      	add	r2, r3
 80024a0:	7c7b      	ldrb	r3, [r7, #17]
 80024a2:	6979      	ldr	r1, [r7, #20]
 80024a4:	440b      	add	r3, r1
 80024a6:	7812      	ldrb	r2, [r2, #0]
 80024a8:	701a      	strb	r2, [r3, #0]
 80024aa:	7c7b      	ldrb	r3, [r7, #17]
 80024ac:	3301      	adds	r3, #1
 80024ae:	747b      	strb	r3, [r7, #17]
 80024b0:	e7ed      	b.n	800248e <_ZN7MPU605016writeMemoryBlockEPKhthhbb+0xa6>
        } else {
            // write the chunk of data as specified
            progBuffer = (uint8_t *)data + i;
 80024b2:	8a7b      	ldrh	r3, [r7, #18]
 80024b4:	68ba      	ldr	r2, [r7, #8]
 80024b6:	4413      	add	r3, r2
 80024b8:	617b      	str	r3, [r7, #20]
        }

        writeBytes(devAddr, MPU6050_RA_MEM_R_W, chunkSize, progBuffer);
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	7998      	ldrb	r0, [r3, #6]
 80024be:	7ffa      	ldrb	r2, [r7, #31]
 80024c0:	697b      	ldr	r3, [r7, #20]
 80024c2:	216f      	movs	r1, #111	; 0x6f
 80024c4:	f7ff faa2 	bl	8001a0c <_Z10writeByteshhhPh>

        // verify data if needed
        if (verify && verifyBuffer) {
 80024c8:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d02a      	beq.n	8002526 <_ZN7MPU605016writeMemoryBlockEPKhthhbb+0x13e>
 80024d0:	69bb      	ldr	r3, [r7, #24]
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d027      	beq.n	8002526 <_ZN7MPU605016writeMemoryBlockEPKhthhbb+0x13e>
            setMemoryBank(bank);
 80024d6:	7979      	ldrb	r1, [r7, #5]
 80024d8:	2300      	movs	r3, #0
 80024da:	2200      	movs	r2, #0
 80024dc:	68f8      	ldr	r0, [r7, #12]
 80024de:	f7ff fee2 	bl	80022a6 <_ZN7MPU605013setMemoryBankEhbb>
            setMemoryStartAddress(address);
 80024e2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80024e6:	4619      	mov	r1, r3
 80024e8:	68f8      	ldr	r0, [r7, #12]
 80024ea:	f7ff ff06 	bl	80022fa <_ZN7MPU605021setMemoryStartAddressEh>
            readBytes(devAddr, MPU6050_RA_MEM_R_W, chunkSize, verifyBuffer);
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	7998      	ldrb	r0, [r3, #6]
 80024f2:	7ffa      	ldrb	r2, [r7, #31]
 80024f4:	69bb      	ldr	r3, [r7, #24]
 80024f6:	216f      	movs	r1, #111	; 0x6f
 80024f8:	f7ff f896 	bl	8001628 <_Z9readByteshhhPh>
            if (memcmp(progBuffer, verifyBuffer, chunkSize) != 0) {
 80024fc:	7ffb      	ldrb	r3, [r7, #31]
 80024fe:	461a      	mov	r2, r3
 8002500:	69b9      	ldr	r1, [r7, #24]
 8002502:	6978      	ldr	r0, [r7, #20]
 8002504:	f00d fa4e 	bl	800f9a4 <memcmp>
 8002508:	4603      	mov	r3, r0
 800250a:	2b00      	cmp	r3, #0
 800250c:	d00b      	beq.n	8002526 <_ZN7MPU605016writeMemoryBlockEPKhthhbb+0x13e>
                    Serial.print(" 0x");
                    if (verifyBuffer[i + j] < 16) Serial.print("0");
                    Serial.print(verifyBuffer[i + j], HEX);
                }
                Serial.print("\n");*/
                free(verifyBuffer);
 800250e:	69b8      	ldr	r0, [r7, #24]
 8002510:	f00d fa40 	bl	800f994 <free>
                if (useProgMem) free(progBuffer);
 8002514:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8002518:	2b00      	cmp	r3, #0
 800251a:	d002      	beq.n	8002522 <_ZN7MPU605016writeMemoryBlockEPKhthhbb+0x13a>
 800251c:	6978      	ldr	r0, [r7, #20]
 800251e:	f00d fa39 	bl	800f994 <free>
                return false; // uh oh.
 8002522:	2300      	movs	r3, #0
 8002524:	e031      	b.n	800258a <_ZN7MPU605016writeMemoryBlockEPKhthhbb+0x1a2>
            }
        }

        // increase byte index by [chunkSize]
        i += chunkSize;
 8002526:	7ffb      	ldrb	r3, [r7, #31]
 8002528:	b29a      	uxth	r2, r3
 800252a:	8a7b      	ldrh	r3, [r7, #18]
 800252c:	4413      	add	r3, r2
 800252e:	827b      	strh	r3, [r7, #18]

        // uint8_t automatically wraps to 0 at 256
        address += chunkSize;
 8002530:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8002534:	7ffb      	ldrb	r3, [r7, #31]
 8002536:	4413      	add	r3, r2
 8002538:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28

        // if we aren't done, update bank (if necessary) and address
        if (i < dataSize) {
 800253c:	8a7a      	ldrh	r2, [r7, #18]
 800253e:	88fb      	ldrh	r3, [r7, #6]
 8002540:	429a      	cmp	r2, r3
 8002542:	d280      	bcs.n	8002446 <_ZN7MPU605016writeMemoryBlockEPKhthhbb+0x5e>
            if (address == 0) bank++;
 8002544:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8002548:	2b00      	cmp	r3, #0
 800254a:	d102      	bne.n	8002552 <_ZN7MPU605016writeMemoryBlockEPKhthhbb+0x16a>
 800254c:	797b      	ldrb	r3, [r7, #5]
 800254e:	3301      	adds	r3, #1
 8002550:	717b      	strb	r3, [r7, #5]
            setMemoryBank(bank);
 8002552:	7979      	ldrb	r1, [r7, #5]
 8002554:	2300      	movs	r3, #0
 8002556:	2200      	movs	r2, #0
 8002558:	68f8      	ldr	r0, [r7, #12]
 800255a:	f7ff fea4 	bl	80022a6 <_ZN7MPU605013setMemoryBankEhbb>
            setMemoryStartAddress(address);
 800255e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8002562:	4619      	mov	r1, r3
 8002564:	68f8      	ldr	r0, [r7, #12]
 8002566:	f7ff fec8 	bl	80022fa <_ZN7MPU605021setMemoryStartAddressEh>
    for (i = 0; i < dataSize;) {
 800256a:	e76c      	b.n	8002446 <_ZN7MPU605016writeMemoryBlockEPKhthhbb+0x5e>
        }
    }
    if (verify) free(verifyBuffer);
 800256c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8002570:	2b00      	cmp	r3, #0
 8002572:	d002      	beq.n	800257a <_ZN7MPU605016writeMemoryBlockEPKhthhbb+0x192>
 8002574:	69b8      	ldr	r0, [r7, #24]
 8002576:	f00d fa0d 	bl	800f994 <free>
    if (useProgMem) free(progBuffer);
 800257a:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800257e:	2b00      	cmp	r3, #0
 8002580:	d002      	beq.n	8002588 <_ZN7MPU605016writeMemoryBlockEPKhthhbb+0x1a0>
 8002582:	6978      	ldr	r0, [r7, #20]
 8002584:	f00d fa06 	bl	800f994 <free>
    return true;
 8002588:	2301      	movs	r3, #1
}
 800258a:	4618      	mov	r0, r3
 800258c:	3720      	adds	r7, #32
 800258e:	46bd      	mov	sp, r7
 8002590:	bd80      	pop	{r7, pc}

08002592 <_ZN7MPU605020writeProgMemoryBlockEPKhthhb>:
bool MPU6050::writeProgMemoryBlock(const uint8_t *data, uint16_t dataSize, uint8_t bank, uint8_t address, bool verify) {
 8002592:	b580      	push	{r7, lr}
 8002594:	b088      	sub	sp, #32
 8002596:	af04      	add	r7, sp, #16
 8002598:	60f8      	str	r0, [r7, #12]
 800259a:	60b9      	str	r1, [r7, #8]
 800259c:	4611      	mov	r1, r2
 800259e:	461a      	mov	r2, r3
 80025a0:	460b      	mov	r3, r1
 80025a2:	80fb      	strh	r3, [r7, #6]
 80025a4:	4613      	mov	r3, r2
 80025a6:	717b      	strb	r3, [r7, #5]
    return writeMemoryBlock(data, dataSize, bank, address, verify, true);
 80025a8:	7979      	ldrb	r1, [r7, #5]
 80025aa:	88fa      	ldrh	r2, [r7, #6]
 80025ac:	2301      	movs	r3, #1
 80025ae:	9302      	str	r3, [sp, #8]
 80025b0:	7f3b      	ldrb	r3, [r7, #28]
 80025b2:	9301      	str	r3, [sp, #4]
 80025b4:	7e3b      	ldrb	r3, [r7, #24]
 80025b6:	9300      	str	r3, [sp, #0]
 80025b8:	460b      	mov	r3, r1
 80025ba:	68b9      	ldr	r1, [r7, #8]
 80025bc:	68f8      	ldr	r0, [r7, #12]
 80025be:	f7ff ff13 	bl	80023e8 <_ZN7MPU605016writeMemoryBlockEPKhthhbb>
 80025c2:	4603      	mov	r3, r0
}
 80025c4:	4618      	mov	r0, r3
 80025c6:	3710      	adds	r7, #16
 80025c8:	46bd      	mov	sp, r7
 80025ca:	bd80      	pop	{r7, pc}

080025cc <_ZN7MPU605024writeDMPConfigurationSetEPKhtb>:
bool MPU6050::writeDMPConfigurationSet(const uint8_t *data, uint16_t dataSize, bool useProgMem) {
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b08c      	sub	sp, #48	; 0x30
 80025d0:	af04      	add	r7, sp, #16
 80025d2:	60f8      	str	r0, [r7, #12]
 80025d4:	60b9      	str	r1, [r7, #8]
 80025d6:	4611      	mov	r1, r2
 80025d8:	461a      	mov	r2, r3
 80025da:	460b      	mov	r3, r1
 80025dc:	80fb      	strh	r3, [r7, #6]
 80025de:	4613      	mov	r3, r2
 80025e0:	717b      	strb	r3, [r7, #5]
    uint8_t *progBuffer = 0;
 80025e2:	2300      	movs	r3, #0
 80025e4:	61fb      	str	r3, [r7, #28]
	uint8_t success, special;
    uint16_t i, j;
    if (useProgMem) {
 80025e6:	797b      	ldrb	r3, [r7, #5]
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d004      	beq.n	80025f6 <_ZN7MPU605024writeDMPConfigurationSetEPKhtb+0x2a>
        progBuffer = (uint8_t *)malloc(8); // assume 8-byte blocks, realloc later if necessary
 80025ec:	2008      	movs	r0, #8
 80025ee:	f00d f9c9 	bl	800f984 <malloc>
 80025f2:	4603      	mov	r3, r0
 80025f4:	61fb      	str	r3, [r7, #28]
    }

    // config set data is a long string of blocks with the following structure:
    // [bank] [offset] [length] [byte[0], byte[1], ..., byte[length]]
    uint8_t bank, offset, length;
    for (i = 0; i < dataSize;) {
 80025f6:	2300      	movs	r3, #0
 80025f8:	833b      	strh	r3, [r7, #24]
 80025fa:	8b3a      	ldrh	r2, [r7, #24]
 80025fc:	88fb      	ldrh	r3, [r7, #6]
 80025fe:	429a      	cmp	r2, r3
 8002600:	f080 80a1 	bcs.w	8002746 <_ZN7MPU605024writeDMPConfigurationSetEPKhtb+0x17a>
        if (useProgMem) {
 8002604:	797b      	ldrb	r3, [r7, #5]
 8002606:	2b00      	cmp	r3, #0
 8002608:	d018      	beq.n	800263c <_ZN7MPU605024writeDMPConfigurationSetEPKhtb+0x70>
            bank = pgm_read_byte(data + i++);
 800260a:	8b3b      	ldrh	r3, [r7, #24]
 800260c:	1c5a      	adds	r2, r3, #1
 800260e:	833a      	strh	r2, [r7, #24]
 8002610:	461a      	mov	r2, r3
 8002612:	68bb      	ldr	r3, [r7, #8]
 8002614:	4413      	add	r3, r2
 8002616:	781b      	ldrb	r3, [r3, #0]
 8002618:	757b      	strb	r3, [r7, #21]
            offset = pgm_read_byte(data + i++);
 800261a:	8b3b      	ldrh	r3, [r7, #24]
 800261c:	1c5a      	adds	r2, r3, #1
 800261e:	833a      	strh	r2, [r7, #24]
 8002620:	461a      	mov	r2, r3
 8002622:	68bb      	ldr	r3, [r7, #8]
 8002624:	4413      	add	r3, r2
 8002626:	781b      	ldrb	r3, [r3, #0]
 8002628:	753b      	strb	r3, [r7, #20]
            length = pgm_read_byte(data + i++);
 800262a:	8b3b      	ldrh	r3, [r7, #24]
 800262c:	1c5a      	adds	r2, r3, #1
 800262e:	833a      	strh	r2, [r7, #24]
 8002630:	461a      	mov	r2, r3
 8002632:	68bb      	ldr	r3, [r7, #8]
 8002634:	4413      	add	r3, r2
 8002636:	781b      	ldrb	r3, [r3, #0]
 8002638:	74fb      	strb	r3, [r7, #19]
 800263a:	e017      	b.n	800266c <_ZN7MPU605024writeDMPConfigurationSetEPKhtb+0xa0>
        } else {
            bank = data[i++];
 800263c:	8b3b      	ldrh	r3, [r7, #24]
 800263e:	1c5a      	adds	r2, r3, #1
 8002640:	833a      	strh	r2, [r7, #24]
 8002642:	461a      	mov	r2, r3
 8002644:	68bb      	ldr	r3, [r7, #8]
 8002646:	4413      	add	r3, r2
 8002648:	781b      	ldrb	r3, [r3, #0]
 800264a:	757b      	strb	r3, [r7, #21]
            offset = data[i++];
 800264c:	8b3b      	ldrh	r3, [r7, #24]
 800264e:	1c5a      	adds	r2, r3, #1
 8002650:	833a      	strh	r2, [r7, #24]
 8002652:	461a      	mov	r2, r3
 8002654:	68bb      	ldr	r3, [r7, #8]
 8002656:	4413      	add	r3, r2
 8002658:	781b      	ldrb	r3, [r3, #0]
 800265a:	753b      	strb	r3, [r7, #20]
            length = data[i++];
 800265c:	8b3b      	ldrh	r3, [r7, #24]
 800265e:	1c5a      	adds	r2, r3, #1
 8002660:	833a      	strh	r2, [r7, #24]
 8002662:	461a      	mov	r2, r3
 8002664:	68bb      	ldr	r3, [r7, #8]
 8002666:	4413      	add	r3, r2
 8002668:	781b      	ldrb	r3, [r3, #0]
 800266a:	74fb      	strb	r3, [r7, #19]
        }

        // write data or perform special action
        if (length > 0) {
 800266c:	7cfb      	ldrb	r3, [r7, #19]
 800266e:	2b00      	cmp	r3, #0
 8002670:	d03a      	beq.n	80026e8 <_ZN7MPU605024writeDMPConfigurationSetEPKhtb+0x11c>
            Serial.print(bank);
            Serial.print(", offset ");
            Serial.print(offset);
            Serial.print(", length=");
            Serial.println(length);*/
            if (useProgMem) {
 8002672:	797b      	ldrb	r3, [r7, #5]
 8002674:	2b00      	cmp	r3, #0
 8002676:	d01d      	beq.n	80026b4 <_ZN7MPU605024writeDMPConfigurationSetEPKhtb+0xe8>
                if (sizeof(progBuffer) < length) progBuffer = (uint8_t *)realloc(progBuffer, length);
 8002678:	7cfb      	ldrb	r3, [r7, #19]
 800267a:	2b04      	cmp	r3, #4
 800267c:	d905      	bls.n	800268a <_ZN7MPU605024writeDMPConfigurationSetEPKhtb+0xbe>
 800267e:	7cfb      	ldrb	r3, [r7, #19]
 8002680:	4619      	mov	r1, r3
 8002682:	69f8      	ldr	r0, [r7, #28]
 8002684:	f00d feaa 	bl	80103dc <realloc>
 8002688:	61f8      	str	r0, [r7, #28]
                for (j = 0; j < length; j++) progBuffer[j] = pgm_read_byte(data + i + j);
 800268a:	2300      	movs	r3, #0
 800268c:	82fb      	strh	r3, [r7, #22]
 800268e:	7cfb      	ldrb	r3, [r7, #19]
 8002690:	b29b      	uxth	r3, r3
 8002692:	8afa      	ldrh	r2, [r7, #22]
 8002694:	429a      	cmp	r2, r3
 8002696:	d211      	bcs.n	80026bc <_ZN7MPU605024writeDMPConfigurationSetEPKhtb+0xf0>
 8002698:	8b3a      	ldrh	r2, [r7, #24]
 800269a:	8afb      	ldrh	r3, [r7, #22]
 800269c:	4413      	add	r3, r2
 800269e:	68ba      	ldr	r2, [r7, #8]
 80026a0:	441a      	add	r2, r3
 80026a2:	8afb      	ldrh	r3, [r7, #22]
 80026a4:	69f9      	ldr	r1, [r7, #28]
 80026a6:	440b      	add	r3, r1
 80026a8:	7812      	ldrb	r2, [r2, #0]
 80026aa:	701a      	strb	r2, [r3, #0]
 80026ac:	8afb      	ldrh	r3, [r7, #22]
 80026ae:	3301      	adds	r3, #1
 80026b0:	82fb      	strh	r3, [r7, #22]
 80026b2:	e7ec      	b.n	800268e <_ZN7MPU605024writeDMPConfigurationSetEPKhtb+0xc2>
            } else {
                progBuffer = (uint8_t *)data + i;
 80026b4:	8b3b      	ldrh	r3, [r7, #24]
 80026b6:	68ba      	ldr	r2, [r7, #8]
 80026b8:	4413      	add	r3, r2
 80026ba:	61fb      	str	r3, [r7, #28]
            }
            success = writeMemoryBlock(progBuffer, length, bank, offset, true);
 80026bc:	7cfb      	ldrb	r3, [r7, #19]
 80026be:	b29a      	uxth	r2, r3
 80026c0:	7d79      	ldrb	r1, [r7, #21]
 80026c2:	2300      	movs	r3, #0
 80026c4:	9302      	str	r3, [sp, #8]
 80026c6:	2301      	movs	r3, #1
 80026c8:	9301      	str	r3, [sp, #4]
 80026ca:	7d3b      	ldrb	r3, [r7, #20]
 80026cc:	9300      	str	r3, [sp, #0]
 80026ce:	460b      	mov	r3, r1
 80026d0:	69f9      	ldr	r1, [r7, #28]
 80026d2:	68f8      	ldr	r0, [r7, #12]
 80026d4:	f7ff fe88 	bl	80023e8 <_ZN7MPU605016writeMemoryBlockEPKhthhbb>
 80026d8:	4603      	mov	r3, r0
 80026da:	76fb      	strb	r3, [r7, #27]
            i += length;
 80026dc:	7cfb      	ldrb	r3, [r7, #19]
 80026de:	b29a      	uxth	r2, r3
 80026e0:	8b3b      	ldrh	r3, [r7, #24]
 80026e2:	4413      	add	r3, r2
 80026e4:	833b      	strh	r3, [r7, #24]
 80026e6:	e022      	b.n	800272e <_ZN7MPU605024writeDMPConfigurationSetEPKhtb+0x162>
            // special instruction
            // NOTE: this kind of behavior (what and when to do certain things)
            // is totally undocumented. This code is in here based on observed
            // behavior only, and exactly why (or even whether) it has to be here
            // is anybody's guess for now.
            if (useProgMem) {
 80026e8:	797b      	ldrb	r3, [r7, #5]
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d008      	beq.n	8002700 <_ZN7MPU605024writeDMPConfigurationSetEPKhtb+0x134>
                special = pgm_read_byte(data + i++);
 80026ee:	8b3b      	ldrh	r3, [r7, #24]
 80026f0:	1c5a      	adds	r2, r3, #1
 80026f2:	833a      	strh	r2, [r7, #24]
 80026f4:	461a      	mov	r2, r3
 80026f6:	68bb      	ldr	r3, [r7, #8]
 80026f8:	4413      	add	r3, r2
 80026fa:	781b      	ldrb	r3, [r3, #0]
 80026fc:	76bb      	strb	r3, [r7, #26]
 80026fe:	e007      	b.n	8002710 <_ZN7MPU605024writeDMPConfigurationSetEPKhtb+0x144>
            } else {
                special = data[i++];
 8002700:	8b3b      	ldrh	r3, [r7, #24]
 8002702:	1c5a      	adds	r2, r3, #1
 8002704:	833a      	strh	r2, [r7, #24]
 8002706:	461a      	mov	r2, r3
 8002708:	68bb      	ldr	r3, [r7, #8]
 800270a:	4413      	add	r3, r2
 800270c:	781b      	ldrb	r3, [r3, #0]
 800270e:	76bb      	strb	r3, [r7, #26]
            }
            /*Serial.print("Special command code ");
            Serial.print(special, HEX);
            Serial.println(" found...");*/
            if (special == 0x01) {
 8002710:	7ebb      	ldrb	r3, [r7, #26]
 8002712:	2b01      	cmp	r3, #1
 8002714:	d109      	bne.n	800272a <_ZN7MPU605024writeDMPConfigurationSetEPKhtb+0x15e>
                // enable DMP-related interrupts
                
                //setIntZeroMotionEnabled(true);
                //setIntFIFOBufferOverflowEnabled(true);
                //setIntDMPEnabled(true);
                writeByte(devAddr, MPU6050_RA_INT_ENABLE, 0x32);  // single operation
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	799b      	ldrb	r3, [r3, #6]
 800271a:	2232      	movs	r2, #50	; 0x32
 800271c:	2138      	movs	r1, #56	; 0x38
 800271e:	4618      	mov	r0, r3
 8002720:	f7ff f900 	bl	8001924 <_Z9writeBytehhh>

                success = true;
 8002724:	2301      	movs	r3, #1
 8002726:	76fb      	strb	r3, [r7, #27]
 8002728:	e001      	b.n	800272e <_ZN7MPU605024writeDMPConfigurationSetEPKhtb+0x162>
            } else {
                // unknown special command
                success = false;
 800272a:	2300      	movs	r3, #0
 800272c:	76fb      	strb	r3, [r7, #27]
            }
        }
        
        if (!success) {
 800272e:	7efb      	ldrb	r3, [r7, #27]
 8002730:	2b00      	cmp	r3, #0
 8002732:	f47f af62 	bne.w	80025fa <_ZN7MPU605024writeDMPConfigurationSetEPKhtb+0x2e>
            if (useProgMem) free(progBuffer);
 8002736:	797b      	ldrb	r3, [r7, #5]
 8002738:	2b00      	cmp	r3, #0
 800273a:	d002      	beq.n	8002742 <_ZN7MPU605024writeDMPConfigurationSetEPKhtb+0x176>
 800273c:	69f8      	ldr	r0, [r7, #28]
 800273e:	f00d f929 	bl	800f994 <free>
            return false; // uh oh
 8002742:	2300      	movs	r3, #0
 8002744:	e006      	b.n	8002754 <_ZN7MPU605024writeDMPConfigurationSetEPKhtb+0x188>
        }
    }
    if (useProgMem) free(progBuffer);
 8002746:	797b      	ldrb	r3, [r7, #5]
 8002748:	2b00      	cmp	r3, #0
 800274a:	d002      	beq.n	8002752 <_ZN7MPU605024writeDMPConfigurationSetEPKhtb+0x186>
 800274c:	69f8      	ldr	r0, [r7, #28]
 800274e:	f00d f921 	bl	800f994 <free>
    return true;
 8002752:	2301      	movs	r3, #1
}
 8002754:	4618      	mov	r0, r3
 8002756:	3720      	adds	r7, #32
 8002758:	46bd      	mov	sp, r7
 800275a:	bd80      	pop	{r7, pc}

0800275c <_ZN7MPU605028writeProgDMPConfigurationSetEPKht>:
bool MPU6050::writeProgDMPConfigurationSet(const uint8_t *data, uint16_t dataSize) {
 800275c:	b580      	push	{r7, lr}
 800275e:	b084      	sub	sp, #16
 8002760:	af00      	add	r7, sp, #0
 8002762:	60f8      	str	r0, [r7, #12]
 8002764:	60b9      	str	r1, [r7, #8]
 8002766:	4613      	mov	r3, r2
 8002768:	80fb      	strh	r3, [r7, #6]
    return writeDMPConfigurationSet(data, dataSize, true);
 800276a:	88fa      	ldrh	r2, [r7, #6]
 800276c:	2301      	movs	r3, #1
 800276e:	68b9      	ldr	r1, [r7, #8]
 8002770:	68f8      	ldr	r0, [r7, #12]
 8002772:	f7ff ff2b 	bl	80025cc <_ZN7MPU605024writeDMPConfigurationSetEPKhtb>
 8002776:	4603      	mov	r3, r0
}
 8002778:	4618      	mov	r0, r3
 800277a:	3710      	adds	r7, #16
 800277c:	46bd      	mov	sp, r7
 800277e:	bd80      	pop	{r7, pc}

08002780 <_ZN7MPU605013setDMPConfig1Eh>:

uint8_t MPU6050::getDMPConfig1() {
    readByte(devAddr, MPU6050_RA_DMP_CFG_1, buffer);
    return buffer[0];
}
void MPU6050::setDMPConfig1(uint8_t config) {
 8002780:	b580      	push	{r7, lr}
 8002782:	b082      	sub	sp, #8
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]
 8002788:	460b      	mov	r3, r1
 800278a:	70fb      	strb	r3, [r7, #3]
    writeByte(devAddr, MPU6050_RA_DMP_CFG_1, config);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	799b      	ldrb	r3, [r3, #6]
 8002790:	78fa      	ldrb	r2, [r7, #3]
 8002792:	2170      	movs	r1, #112	; 0x70
 8002794:	4618      	mov	r0, r3
 8002796:	f7ff f8c5 	bl	8001924 <_Z9writeBytehhh>
}
 800279a:	bf00      	nop
 800279c:	3708      	adds	r7, #8
 800279e:	46bd      	mov	sp, r7
 80027a0:	bd80      	pop	{r7, pc}

080027a2 <_ZN7MPU605013setDMPConfig2Eh>:

uint8_t MPU6050::getDMPConfig2() {
    readByte(devAddr, MPU6050_RA_DMP_CFG_2, buffer);
    return buffer[0];
}
void MPU6050::setDMPConfig2(uint8_t config) {
 80027a2:	b580      	push	{r7, lr}
 80027a4:	b082      	sub	sp, #8
 80027a6:	af00      	add	r7, sp, #0
 80027a8:	6078      	str	r0, [r7, #4]
 80027aa:	460b      	mov	r3, r1
 80027ac:	70fb      	strb	r3, [r7, #3]
    writeByte(devAddr, MPU6050_RA_DMP_CFG_2, config);
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	799b      	ldrb	r3, [r3, #6]
 80027b2:	78fa      	ldrb	r2, [r7, #3]
 80027b4:	2171      	movs	r1, #113	; 0x71
 80027b6:	4618      	mov	r0, r3
 80027b8:	f7ff f8b4 	bl	8001924 <_Z9writeBytehhh>
}
 80027bc:	bf00      	nop
 80027be:	3708      	adds	r7, #8
 80027c0:	46bd      	mov	sp, r7
 80027c2:	bd80      	pop	{r7, pc}

080027c4 <_ZN7MPU605013dmpInitializeEv>:


// 6_AXIS_MOTIONAPPS20
uint8_t MPU6050::dmpInitialize() {
 80027c4:	b590      	push	{r4, r7, lr}
 80027c6:	b0af      	sub	sp, #188	; 0xbc
 80027c8:	af04      	add	r7, sp, #16
 80027ca:	6078      	str	r0, [r7, #4]
    // reset device
    //DEBUG_PRINTLN(F("\n\nResetting MPU6050..."));
    reset();
 80027cc:	6878      	ldr	r0, [r7, #4]
 80027ce:	f7ff fbf5 	bl	8001fbc <_ZN7MPU60505resetEv>
    HAL_Delay(30); // wait after reset
 80027d2:	201e      	movs	r0, #30
 80027d4:	f002 fd18 	bl	8005208 <HAL_Delay>
    Serial.println(F("Enabling wake cycle..."));
    setWakeCycleEnabled(true);*/

    // disable sleep mode
    //DEBUG_PRINTLN(F("Disabling sleep mode..."));
    setSleepEnabled(false);
 80027d8:	2100      	movs	r1, #0
 80027da:	6878      	ldr	r0, [r7, #4]
 80027dc:	f7ff fbfd 	bl	8001fda <_ZN7MPU605015setSleepEnabledEb>

    // get MPU hardware revision
    //DEBUG_PRINTLN(F("Selecting user bank 16..."));
    setMemoryBank(0x10, true, true);
 80027e0:	2301      	movs	r3, #1
 80027e2:	2201      	movs	r2, #1
 80027e4:	2110      	movs	r1, #16
 80027e6:	6878      	ldr	r0, [r7, #4]
 80027e8:	f7ff fd5d 	bl	80022a6 <_ZN7MPU605013setMemoryBankEhbb>
    //DEBUG_PRINTLN(F("Selecting memory byte 6..."));
    setMemoryStartAddress(0x06);
 80027ec:	2106      	movs	r1, #6
 80027ee:	6878      	ldr	r0, [r7, #4]
 80027f0:	f7ff fd83 	bl	80022fa <_ZN7MPU605021setMemoryStartAddressEh>
    //DEBUG_PRINTLN(F("Checking hardware revision..."));
    //DEBUG_PRINT(F("Revision @ user[16][6] = "));
    //DEBUG_PRINTLNF(readMemoryByte(), HEX);
    //DEBUG_PRINTLN(F("Resetting memory bank selection to 0..."));
    setMemoryBank(0, false, false);
 80027f4:	2300      	movs	r3, #0
 80027f6:	2200      	movs	r2, #0
 80027f8:	2100      	movs	r1, #0
 80027fa:	6878      	ldr	r0, [r7, #4]
 80027fc:	f7ff fd53 	bl	80022a6 <_ZN7MPU605013setMemoryBankEhbb>
    //DEBUG_PRINT(F("OTP bank is "));
    //DEBUG_PRINTLN(getOTPBankValid() ? F("valid!") : F("invalid!"));

    // get X/Y/Z gyro offsets
    //DEBUG_PRINTLN(F("Reading gyro offset TC values..."));
    int8_t xgOffsetTC = getXGyroOffsetTC();
 8002800:	6878      	ldr	r0, [r7, #4]
 8002802:	f7ff fc52 	bl	80020aa <_ZN7MPU605016getXGyroOffsetTCEv>
 8002806:	4603      	mov	r3, r0
 8002808:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
    int8_t ygOffsetTC = getYGyroOffsetTC();
 800280c:	6878      	ldr	r0, [r7, #4]
 800280e:	f7ff fc74 	bl	80020fa <_ZN7MPU605016getYGyroOffsetTCEv>
 8002812:	4603      	mov	r3, r0
 8002814:	f887 30a2 	strb.w	r3, [r7, #162]	; 0xa2
    int8_t zgOffsetTC = getZGyroOffsetTC();
 8002818:	6878      	ldr	r0, [r7, #4]
 800281a:	f7ff fc96 	bl	800214a <_ZN7MPU605016getZGyroOffsetTCEv>
 800281e:	4603      	mov	r3, r0
 8002820:	f887 30a1 	strb.w	r3, [r7, #161]	; 0xa1
    //DEBUG_PRINT(F("Z gyro offset = "));
    //DEBUG_PRINTLN(zgOffsetTC);

    // setup weird slave stuff (?)
    //DEBUG_PRINTLN(F("Setting slave 0 address to 0x7F..."));
    setSlaveAddress(0, 0x7F);
 8002824:	227f      	movs	r2, #127	; 0x7f
 8002826:	2100      	movs	r1, #0
 8002828:	6878      	ldr	r0, [r7, #4]
 800282a:	f7ff fb47 	bl	8001ebc <_ZN7MPU605015setSlaveAddressEhh>
    //DEBUG_PRINTLN(F("Disabling I2C Master mode..."));
    setI2CMasterModeEnabled(false);
 800282e:	2100      	movs	r1, #0
 8002830:	6878      	ldr	r0, [r7, #4]
 8002832:	f7ff fb94 	bl	8001f5e <_ZN7MPU605023setI2CMasterModeEnabledEb>
    //DEBUG_PRINTLN(F("Setting slave 0 address to 0x68 (self)..."));
    setSlaveAddress(0, 0x68);
 8002836:	2268      	movs	r2, #104	; 0x68
 8002838:	2100      	movs	r1, #0
 800283a:	6878      	ldr	r0, [r7, #4]
 800283c:	f7ff fb3e 	bl	8001ebc <_ZN7MPU605015setSlaveAddressEhh>
    //DEBUG_PRINTLN(F("Resetting I2C Master control..."));
    resetI2CMaster();
 8002840:	6878      	ldr	r0, [r7, #4]
 8002842:	f7ff fbac 	bl	8001f9e <_ZN7MPU605014resetI2CMasterEv>
    HAL_Delay(20);
 8002846:	2014      	movs	r0, #20
 8002848:	f002 fcde 	bl	8005208 <HAL_Delay>

    // load DMP code into memory banks
    //DEBUG_PRINT(F("Writing DMP code to MPU memory banks ("));
    //DEBUG_PRINT(MPU6050_DMP_CODE_SIZE);
    //DEBUG_PRINTLN(F(" bytes)"));
    if (writeProgMemoryBlock(dmpMemory, MPU6050_DMP_CODE_SIZE)) {
 800284c:	2301      	movs	r3, #1
 800284e:	9301      	str	r3, [sp, #4]
 8002850:	2300      	movs	r3, #0
 8002852:	9300      	str	r3, [sp, #0]
 8002854:	2300      	movs	r3, #0
 8002856:	f240 7289 	movw	r2, #1929	; 0x789
 800285a:	49ce      	ldr	r1, [pc, #824]	; (8002b94 <_ZN7MPU605013dmpInitializeEv+0x3d0>)
 800285c:	6878      	ldr	r0, [r7, #4]
 800285e:	f7ff fe98 	bl	8002592 <_ZN7MPU605020writeProgMemoryBlockEPKhthhb>
 8002862:	4603      	mov	r3, r0
 8002864:	2b00      	cmp	r3, #0
 8002866:	f000 8238 	beq.w	8002cda <_ZN7MPU605013dmpInitializeEv+0x516>

        // write DMP configuration
        //DEBUG_PRINT(F("Writing DMP configuration to MPU memory banks ("));
        //DEBUG_PRINT(MPU6050_DMP_CONFIG_SIZE);
        //DEBUG_PRINTLN(F(" bytes in config def)"));
        if (writeProgDMPConfigurationSet(dmpConfig, MPU6050_DMP_CONFIG_SIZE)) {
 800286a:	22c0      	movs	r2, #192	; 0xc0
 800286c:	49ca      	ldr	r1, [pc, #808]	; (8002b98 <_ZN7MPU605013dmpInitializeEv+0x3d4>)
 800286e:	6878      	ldr	r0, [r7, #4]
 8002870:	f7ff ff74 	bl	800275c <_ZN7MPU605028writeProgDMPConfigurationSetEPKht>
 8002874:	4603      	mov	r3, r0
 8002876:	2b00      	cmp	r3, #0
 8002878:	f000 822d 	beq.w	8002cd6 <_ZN7MPU605013dmpInitializeEv+0x512>
            //DEBUG_PRINTLN(F("Success! DMP configuration written and verified."));

            //DEBUG_PRINTLN(F("Setting clock source to Z Gyro..."));
            setClockSource(MPU6050_CLOCK_PLL_ZGYRO);
 800287c:	2103      	movs	r1, #3
 800287e:	6878      	ldr	r0, [r7, #4]
 8002880:	f7ff fbbc 	bl	8001ffc <_ZN7MPU605014setClockSourceEh>

            //DEBUG_PRINTLN(F("Setting DMP and FIFO_OFLOW interrupts enabled..."));
            setIntEnabled(0x12);
 8002884:	2112      	movs	r1, #18
 8002886:	6878      	ldr	r0, [r7, #4]
 8002888:	f7ff fb35 	bl	8001ef6 <_ZN7MPU605013setIntEnabledEh>

            //DEBUG_PRINTLN(F("Setting sample rate to 200Hz..."));
            setRate(4); // 1khz / (1 + 4) = 200 Hz
 800288c:	2104      	movs	r1, #4
 800288e:	6878      	ldr	r0, [r7, #4]
 8002890:	f7ff fa73 	bl	8001d7a <_ZN7MPU60507setRateEh>

            //DEBUG_PRINTLN(F("Setting external frame sync to TEMP_OUT_L[0]..."));
            setExternalFrameSync(MPU6050_EXT_SYNC_TEMP_OUT_L);
 8002894:	2101      	movs	r1, #1
 8002896:	6878      	ldr	r0, [r7, #4]
 8002898:	f7ff fa80 	bl	8001d9c <_ZN7MPU605020setExternalFrameSyncEh>

            //DEBUG_PRINTLN(F("Setting DLPF bandwidth to 42Hz..."));
            setDLPFMode(MPU6050_DLPF_BW_42);
 800289c:	2103      	movs	r1, #3
 800289e:	6878      	ldr	r0, [r7, #4]
 80028a0:	f7ff fa8f 	bl	8001dc2 <_ZN7MPU605011setDLPFModeEh>

            //DEBUG_PRINTLN(F("Setting gyro sensitivity to +/- 2000 deg/sec..."));
            setFullScaleGyroRange(MPU6050_GYRO_FS_2000);
 80028a4:	2103      	movs	r1, #3
 80028a6:	6878      	ldr	r0, [r7, #4]
 80028a8:	f7ff fa9e 	bl	8001de8 <_ZN7MPU605021setFullScaleGyroRangeEh>

            //DEBUG_PRINTLN(F("Setting DMP programm start address"));
            //write start address MSB into register
            setDMPConfig1(0x03);
 80028ac:	2103      	movs	r1, #3
 80028ae:	6878      	ldr	r0, [r7, #4]
 80028b0:	f7ff ff66 	bl	8002780 <_ZN7MPU605013setDMPConfig1Eh>
            //write start address LSB into register
            setDMPConfig2(0x00);
 80028b4:	2100      	movs	r1, #0
 80028b6:	6878      	ldr	r0, [r7, #4]
 80028b8:	f7ff ff73 	bl	80027a2 <_ZN7MPU605013setDMPConfig2Eh>

            //DEBUG_PRINTLN(F("Clearing OTP Bank flag..."));
            setOTPBankValid(false);
 80028bc:	2100      	movs	r1, #0
 80028be:	6878      	ldr	r0, [r7, #4]
 80028c0:	f7ff fbe2 	bl	8002088 <_ZN7MPU605015setOTPBankValidEb>

            //DEBUG_PRINTLN(F("Setting X/Y/Z gyro offset TCs to previous values..."));
            setXGyroOffsetTC(xgOffsetTC);
 80028c4:	f997 30a3 	ldrsb.w	r3, [r7, #163]	; 0xa3
 80028c8:	4619      	mov	r1, r3
 80028ca:	6878      	ldr	r0, [r7, #4]
 80028cc:	f7ff fc02 	bl	80020d4 <_ZN7MPU605016setXGyroOffsetTCEa>
            setYGyroOffsetTC(ygOffsetTC);
 80028d0:	f997 30a2 	ldrsb.w	r3, [r7, #162]	; 0xa2
 80028d4:	4619      	mov	r1, r3
 80028d6:	6878      	ldr	r0, [r7, #4]
 80028d8:	f7ff fc24 	bl	8002124 <_ZN7MPU605016setYGyroOffsetTCEa>
            setZGyroOffsetTC(zgOffsetTC);
 80028dc:	f997 30a1 	ldrsb.w	r3, [r7, #161]	; 0xa1
 80028e0:	4619      	mov	r1, r3
 80028e2:	6878      	ldr	r0, [r7, #4]
 80028e4:	f7ff fc46 	bl	8002174 <_ZN7MPU605016setZGyroOffsetTCEa>
            //setYGyroOffset(0);
            //setZGyroOffset(0);

            //DEBUG_PRINTLN(F("Writing final memory update 1/7 (function unknown)..."));
            uint8_t dmpUpdate[16], j;
            uint16_t pos = 0;
 80028e8:	2300      	movs	r3, #0
 80028ea:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
            for (j = 0; j < 4 || j < dmpUpdate[2] + 3; j++, pos++) dmpUpdate[j] = pgm_read_byte(&dmpUpdates[pos]);
 80028ee:	2300      	movs	r3, #0
 80028f0:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
 80028f4:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 80028f8:	2b03      	cmp	r3, #3
 80028fa:	d906      	bls.n	800290a <_ZN7MPU605013dmpInitializeEv+0x146>
 80028fc:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 8002900:	1c9a      	adds	r2, r3, #2
 8002902:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8002906:	429a      	cmp	r2, r3
 8002908:	db15      	blt.n	8002936 <_ZN7MPU605013dmpInitializeEv+0x172>
 800290a:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 800290e:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8002912:	49a2      	ldr	r1, [pc, #648]	; (8002b9c <_ZN7MPU605013dmpInitializeEv+0x3d8>)
 8002914:	5c8a      	ldrb	r2, [r1, r2]
 8002916:	f107 01a8 	add.w	r1, r7, #168	; 0xa8
 800291a:	440b      	add	r3, r1
 800291c:	f803 2c1c 	strb.w	r2, [r3, #-28]
 8002920:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8002924:	3301      	adds	r3, #1
 8002926:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
 800292a:	f8b7 30a4 	ldrh.w	r3, [r7, #164]	; 0xa4
 800292e:	3301      	adds	r3, #1
 8002930:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
 8002934:	e7de      	b.n	80028f4 <_ZN7MPU605013dmpInitializeEv+0x130>
            writeMemoryBlock(dmpUpdate + 3, dmpUpdate[2], dmpUpdate[0], dmpUpdate[1]);
 8002936:	f107 018c 	add.w	r1, r7, #140	; 0x8c
 800293a:	3103      	adds	r1, #3
 800293c:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 8002940:	b29a      	uxth	r2, r3
 8002942:	f897 008c 	ldrb.w	r0, [r7, #140]	; 0x8c
 8002946:	f897 308d 	ldrb.w	r3, [r7, #141]	; 0x8d
 800294a:	2400      	movs	r4, #0
 800294c:	9402      	str	r4, [sp, #8]
 800294e:	2401      	movs	r4, #1
 8002950:	9401      	str	r4, [sp, #4]
 8002952:	9300      	str	r3, [sp, #0]
 8002954:	4603      	mov	r3, r0
 8002956:	6878      	ldr	r0, [r7, #4]
 8002958:	f7ff fd46 	bl	80023e8 <_ZN7MPU605016writeMemoryBlockEPKhthhbb>

            //DEBUG_PRINTLN(F("Writing final memory update 2/7 (function unknown)..."));
            for (j = 0; j < 4 || j < dmpUpdate[2] + 3; j++, pos++) dmpUpdate[j] = pgm_read_byte(&dmpUpdates[pos]);
 800295c:	2300      	movs	r3, #0
 800295e:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
 8002962:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8002966:	2b03      	cmp	r3, #3
 8002968:	d906      	bls.n	8002978 <_ZN7MPU605013dmpInitializeEv+0x1b4>
 800296a:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 800296e:	1c9a      	adds	r2, r3, #2
 8002970:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8002974:	429a      	cmp	r2, r3
 8002976:	db15      	blt.n	80029a4 <_ZN7MPU605013dmpInitializeEv+0x1e0>
 8002978:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 800297c:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8002980:	4986      	ldr	r1, [pc, #536]	; (8002b9c <_ZN7MPU605013dmpInitializeEv+0x3d8>)
 8002982:	5c8a      	ldrb	r2, [r1, r2]
 8002984:	f107 01a8 	add.w	r1, r7, #168	; 0xa8
 8002988:	440b      	add	r3, r1
 800298a:	f803 2c1c 	strb.w	r2, [r3, #-28]
 800298e:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8002992:	3301      	adds	r3, #1
 8002994:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
 8002998:	f8b7 30a4 	ldrh.w	r3, [r7, #164]	; 0xa4
 800299c:	3301      	adds	r3, #1
 800299e:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
 80029a2:	e7de      	b.n	8002962 <_ZN7MPU605013dmpInitializeEv+0x19e>
            writeMemoryBlock(dmpUpdate + 3, dmpUpdate[2], dmpUpdate[0], dmpUpdate[1]);
 80029a4:	f107 018c 	add.w	r1, r7, #140	; 0x8c
 80029a8:	3103      	adds	r1, #3
 80029aa:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 80029ae:	b29a      	uxth	r2, r3
 80029b0:	f897 008c 	ldrb.w	r0, [r7, #140]	; 0x8c
 80029b4:	f897 308d 	ldrb.w	r3, [r7, #141]	; 0x8d
 80029b8:	2400      	movs	r4, #0
 80029ba:	9402      	str	r4, [sp, #8]
 80029bc:	2401      	movs	r4, #1
 80029be:	9401      	str	r4, [sp, #4]
 80029c0:	9300      	str	r3, [sp, #0]
 80029c2:	4603      	mov	r3, r0
 80029c4:	6878      	ldr	r0, [r7, #4]
 80029c6:	f7ff fd0f 	bl	80023e8 <_ZN7MPU605016writeMemoryBlockEPKhthhbb>

            //DEBUG_PRINTLN(F("Resetting FIFO..."));
            resetFIFO();
 80029ca:	6878      	ldr	r0, [r7, #4]
 80029cc:	f7ff fad8 	bl	8001f80 <_ZN7MPU60509resetFIFOEv>

            //DEBUG_PRINTLN(F("Reading FIFO count..."));
            uint16_t fifoCount = getFIFOCount();
 80029d0:	6878      	ldr	r0, [r7, #4]
 80029d2:	f7ff fb26 	bl	8002022 <_ZN7MPU605012getFIFOCountEv>
 80029d6:	4603      	mov	r3, r0
 80029d8:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
            uint8_t fifoBuffer[128];

            //DEBUG_PRINT(F("Current FIFO count="));
            //DEBUG_PRINTLN(fifoCount);
            getFIFOBytes(fifoBuffer, fifoCount);
 80029dc:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 80029e0:	b2da      	uxtb	r2, r3
 80029e2:	f107 030c 	add.w	r3, r7, #12
 80029e6:	4619      	mov	r1, r3
 80029e8:	6878      	ldr	r0, [r7, #4]
 80029ea:	f7ff fb34 	bl	8002056 <_ZN7MPU605012getFIFOBytesEPhh>

            //DEBUG_PRINTLN(F("Setting motion detection threshold to 2..."));
            setMotionDetectionThreshold(2);
 80029ee:	2102      	movs	r1, #2
 80029f0:	6878      	ldr	r0, [r7, #4]
 80029f2:	f7ff fa1f 	bl	8001e34 <_ZN7MPU605027setMotionDetectionThresholdEh>

            //DEBUG_PRINTLN(F("Setting zero-motion detection threshold to 156..."));
            setZeroMotionDetectionThreshold(156);
 80029f6:	219c      	movs	r1, #156	; 0x9c
 80029f8:	6878      	ldr	r0, [r7, #4]
 80029fa:	f7ff fa3d 	bl	8001e78 <_ZN7MPU605031setZeroMotionDetectionThresholdEh>

            //DEBUG_PRINTLN(F("Setting motion detection duration to 80..."));
            setMotionDetectionDuration(80);
 80029fe:	2150      	movs	r1, #80	; 0x50
 8002a00:	6878      	ldr	r0, [r7, #4]
 8002a02:	f7ff fa28 	bl	8001e56 <_ZN7MPU605026setMotionDetectionDurationEh>

            //DEBUG_PRINTLN(F("Setting zero-motion detection duration to 0..."));
            setZeroMotionDetectionDuration(0);
 8002a06:	2100      	movs	r1, #0
 8002a08:	6878      	ldr	r0, [r7, #4]
 8002a0a:	f7ff fa46 	bl	8001e9a <_ZN7MPU605030setZeroMotionDetectionDurationEh>

            //DEBUG_PRINTLN(F("Resetting FIFO..."));
            resetFIFO();
 8002a0e:	6878      	ldr	r0, [r7, #4]
 8002a10:	f7ff fab6 	bl	8001f80 <_ZN7MPU60509resetFIFOEv>

            //DEBUG_PRINTLN(F("Enabling FIFO..."));
            setFIFOEnabled(true);
 8002a14:	2101      	movs	r1, #1
 8002a16:	6878      	ldr	r0, [r7, #4]
 8002a18:	f7ff fa90 	bl	8001f3c <_ZN7MPU605014setFIFOEnabledEb>

            //DEBUG_PRINTLN(F("Enabling DMP..."));
            setDMPEnabled(true);
 8002a1c:	2101      	movs	r1, #1
 8002a1e:	6878      	ldr	r0, [r7, #4]
 8002a20:	f7ff fc21 	bl	8002266 <_ZN7MPU605013setDMPEnabledEb>

            //DEBUG_PRINTLN(F("Resetting DMP..."));
            resetDMP();
 8002a24:	6878      	ldr	r0, [r7, #4]
 8002a26:	f7ff fc2f 	bl	8002288 <_ZN7MPU60508resetDMPEv>

            //DEBUG_PRINTLN(F("Writing final memory update 3/7 (function unknown)..."));
            for (j = 0; j < 4 || j < dmpUpdate[2] + 3; j++, pos++) dmpUpdate[j] = pgm_read_byte(&dmpUpdates[pos]);
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
 8002a30:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8002a34:	2b03      	cmp	r3, #3
 8002a36:	d906      	bls.n	8002a46 <_ZN7MPU605013dmpInitializeEv+0x282>
 8002a38:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 8002a3c:	1c9a      	adds	r2, r3, #2
 8002a3e:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8002a42:	429a      	cmp	r2, r3
 8002a44:	db15      	blt.n	8002a72 <_ZN7MPU605013dmpInitializeEv+0x2ae>
 8002a46:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 8002a4a:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8002a4e:	4953      	ldr	r1, [pc, #332]	; (8002b9c <_ZN7MPU605013dmpInitializeEv+0x3d8>)
 8002a50:	5c8a      	ldrb	r2, [r1, r2]
 8002a52:	f107 01a8 	add.w	r1, r7, #168	; 0xa8
 8002a56:	440b      	add	r3, r1
 8002a58:	f803 2c1c 	strb.w	r2, [r3, #-28]
 8002a5c:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8002a60:	3301      	adds	r3, #1
 8002a62:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
 8002a66:	f8b7 30a4 	ldrh.w	r3, [r7, #164]	; 0xa4
 8002a6a:	3301      	adds	r3, #1
 8002a6c:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
 8002a70:	e7de      	b.n	8002a30 <_ZN7MPU605013dmpInitializeEv+0x26c>
            writeMemoryBlock(dmpUpdate + 3, dmpUpdate[2], dmpUpdate[0], dmpUpdate[1]);
 8002a72:	f107 018c 	add.w	r1, r7, #140	; 0x8c
 8002a76:	3103      	adds	r1, #3
 8002a78:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 8002a7c:	b29a      	uxth	r2, r3
 8002a7e:	f897 008c 	ldrb.w	r0, [r7, #140]	; 0x8c
 8002a82:	f897 308d 	ldrb.w	r3, [r7, #141]	; 0x8d
 8002a86:	2400      	movs	r4, #0
 8002a88:	9402      	str	r4, [sp, #8]
 8002a8a:	2401      	movs	r4, #1
 8002a8c:	9401      	str	r4, [sp, #4]
 8002a8e:	9300      	str	r3, [sp, #0]
 8002a90:	4603      	mov	r3, r0
 8002a92:	6878      	ldr	r0, [r7, #4]
 8002a94:	f7ff fca8 	bl	80023e8 <_ZN7MPU605016writeMemoryBlockEPKhthhbb>

            //DEBUG_PRINTLN(F("Writing final memory update 4/7 (function unknown)..."));
            for (j = 0; j < 4 || j < dmpUpdate[2] + 3; j++, pos++) dmpUpdate[j] = pgm_read_byte(&dmpUpdates[pos]);
 8002a98:	2300      	movs	r3, #0
 8002a9a:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
 8002a9e:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8002aa2:	2b03      	cmp	r3, #3
 8002aa4:	d906      	bls.n	8002ab4 <_ZN7MPU605013dmpInitializeEv+0x2f0>
 8002aa6:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 8002aaa:	1c9a      	adds	r2, r3, #2
 8002aac:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8002ab0:	429a      	cmp	r2, r3
 8002ab2:	db15      	blt.n	8002ae0 <_ZN7MPU605013dmpInitializeEv+0x31c>
 8002ab4:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 8002ab8:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8002abc:	4937      	ldr	r1, [pc, #220]	; (8002b9c <_ZN7MPU605013dmpInitializeEv+0x3d8>)
 8002abe:	5c8a      	ldrb	r2, [r1, r2]
 8002ac0:	f107 01a8 	add.w	r1, r7, #168	; 0xa8
 8002ac4:	440b      	add	r3, r1
 8002ac6:	f803 2c1c 	strb.w	r2, [r3, #-28]
 8002aca:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8002ace:	3301      	adds	r3, #1
 8002ad0:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
 8002ad4:	f8b7 30a4 	ldrh.w	r3, [r7, #164]	; 0xa4
 8002ad8:	3301      	adds	r3, #1
 8002ada:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
 8002ade:	e7de      	b.n	8002a9e <_ZN7MPU605013dmpInitializeEv+0x2da>
            writeMemoryBlock(dmpUpdate + 3, dmpUpdate[2], dmpUpdate[0], dmpUpdate[1]);
 8002ae0:	f107 018c 	add.w	r1, r7, #140	; 0x8c
 8002ae4:	3103      	adds	r1, #3
 8002ae6:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 8002aea:	b29a      	uxth	r2, r3
 8002aec:	f897 008c 	ldrb.w	r0, [r7, #140]	; 0x8c
 8002af0:	f897 308d 	ldrb.w	r3, [r7, #141]	; 0x8d
 8002af4:	2400      	movs	r4, #0
 8002af6:	9402      	str	r4, [sp, #8]
 8002af8:	2401      	movs	r4, #1
 8002afa:	9401      	str	r4, [sp, #4]
 8002afc:	9300      	str	r3, [sp, #0]
 8002afe:	4603      	mov	r3, r0
 8002b00:	6878      	ldr	r0, [r7, #4]
 8002b02:	f7ff fc71 	bl	80023e8 <_ZN7MPU605016writeMemoryBlockEPKhthhbb>

            //DEBUG_PRINTLN(F("Writing final memory update 5/7 (function unknown)..."));
            for (j = 0; j < 4 || j < dmpUpdate[2] + 3; j++, pos++) dmpUpdate[j] = pgm_read_byte(&dmpUpdates[pos]);
 8002b06:	2300      	movs	r3, #0
 8002b08:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
 8002b0c:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8002b10:	2b03      	cmp	r3, #3
 8002b12:	d906      	bls.n	8002b22 <_ZN7MPU605013dmpInitializeEv+0x35e>
 8002b14:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 8002b18:	1c9a      	adds	r2, r3, #2
 8002b1a:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8002b1e:	429a      	cmp	r2, r3
 8002b20:	db15      	blt.n	8002b4e <_ZN7MPU605013dmpInitializeEv+0x38a>
 8002b22:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 8002b26:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8002b2a:	491c      	ldr	r1, [pc, #112]	; (8002b9c <_ZN7MPU605013dmpInitializeEv+0x3d8>)
 8002b2c:	5c8a      	ldrb	r2, [r1, r2]
 8002b2e:	f107 01a8 	add.w	r1, r7, #168	; 0xa8
 8002b32:	440b      	add	r3, r1
 8002b34:	f803 2c1c 	strb.w	r2, [r3, #-28]
 8002b38:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8002b3c:	3301      	adds	r3, #1
 8002b3e:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
 8002b42:	f8b7 30a4 	ldrh.w	r3, [r7, #164]	; 0xa4
 8002b46:	3301      	adds	r3, #1
 8002b48:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
 8002b4c:	e7de      	b.n	8002b0c <_ZN7MPU605013dmpInitializeEv+0x348>
            writeMemoryBlock(dmpUpdate + 3, dmpUpdate[2], dmpUpdate[0], dmpUpdate[1]);
 8002b4e:	f107 018c 	add.w	r1, r7, #140	; 0x8c
 8002b52:	3103      	adds	r1, #3
 8002b54:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 8002b58:	b29a      	uxth	r2, r3
 8002b5a:	f897 008c 	ldrb.w	r0, [r7, #140]	; 0x8c
 8002b5e:	f897 308d 	ldrb.w	r3, [r7, #141]	; 0x8d
 8002b62:	2400      	movs	r4, #0
 8002b64:	9402      	str	r4, [sp, #8]
 8002b66:	2401      	movs	r4, #1
 8002b68:	9401      	str	r4, [sp, #4]
 8002b6a:	9300      	str	r3, [sp, #0]
 8002b6c:	4603      	mov	r3, r0
 8002b6e:	6878      	ldr	r0, [r7, #4]
 8002b70:	f7ff fc3a 	bl	80023e8 <_ZN7MPU605016writeMemoryBlockEPKhthhbb>

            //DEBUG_PRINTLN(F("Waiting for FIFO count > 2..."));
            while ((fifoCount = getFIFOCount()) < 3);
 8002b74:	6878      	ldr	r0, [r7, #4]
 8002b76:	f7ff fa54 	bl	8002022 <_ZN7MPU605012getFIFOCountEv>
 8002b7a:	4603      	mov	r3, r0
 8002b7c:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
 8002b80:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8002b84:	2b02      	cmp	r3, #2
 8002b86:	bf94      	ite	ls
 8002b88:	2301      	movls	r3, #1
 8002b8a:	2300      	movhi	r3, #0
 8002b8c:	b2db      	uxtb	r3, r3
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d006      	beq.n	8002ba0 <_ZN7MPU605013dmpInitializeEv+0x3dc>
 8002b92:	e7ef      	b.n	8002b74 <_ZN7MPU605013dmpInitializeEv+0x3b0>
 8002b94:	08012794 	.word	0x08012794
 8002b98:	08012f20 	.word	0x08012f20
 8002b9c:	08012fe0 	.word	0x08012fe0

            //DEBUG_PRINT(F("Current FIFO count="));
            //DEBUG_PRINTLN(fifoCount);
            //DEBUG_PRINTLN(F("Reading FIFO data..."));
            getFIFOBytes(fifoBuffer, fifoCount);
 8002ba0:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8002ba4:	b2da      	uxtb	r2, r3
 8002ba6:	f107 030c 	add.w	r3, r7, #12
 8002baa:	4619      	mov	r1, r3
 8002bac:	6878      	ldr	r0, [r7, #4]
 8002bae:	f7ff fa52 	bl	8002056 <_ZN7MPU605012getFIFOBytesEPhh>

            //DEBUG_PRINT(F("Current interrupt status="));
            //DEBUG_PRINTLNF(getIntStatus(), HEX);

            //DEBUG_PRINTLN(F("Reading final memory update 6/7 (function unknown)..."));
            for (j = 0; j < 4 || j < dmpUpdate[2] + 3; j++, pos++) dmpUpdate[j] = pgm_read_byte(&dmpUpdates[pos]);
 8002bb2:	2300      	movs	r3, #0
 8002bb4:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
 8002bb8:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8002bbc:	2b03      	cmp	r3, #3
 8002bbe:	d906      	bls.n	8002bce <_ZN7MPU605013dmpInitializeEv+0x40a>
 8002bc0:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 8002bc4:	1c9a      	adds	r2, r3, #2
 8002bc6:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8002bca:	429a      	cmp	r2, r3
 8002bcc:	db15      	blt.n	8002bfa <_ZN7MPU605013dmpInitializeEv+0x436>
 8002bce:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 8002bd2:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8002bd6:	4943      	ldr	r1, [pc, #268]	; (8002ce4 <_ZN7MPU605013dmpInitializeEv+0x520>)
 8002bd8:	5c8a      	ldrb	r2, [r1, r2]
 8002bda:	f107 01a8 	add.w	r1, r7, #168	; 0xa8
 8002bde:	440b      	add	r3, r1
 8002be0:	f803 2c1c 	strb.w	r2, [r3, #-28]
 8002be4:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8002be8:	3301      	adds	r3, #1
 8002bea:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
 8002bee:	f8b7 30a4 	ldrh.w	r3, [r7, #164]	; 0xa4
 8002bf2:	3301      	adds	r3, #1
 8002bf4:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
 8002bf8:	e7de      	b.n	8002bb8 <_ZN7MPU605013dmpInitializeEv+0x3f4>
            readMemoryBlock(dmpUpdate + 3, dmpUpdate[2], dmpUpdate[0], dmpUpdate[1]);
 8002bfa:	f107 018c 	add.w	r1, r7, #140	; 0x8c
 8002bfe:	3103      	adds	r1, #3
 8002c00:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 8002c04:	b29a      	uxth	r2, r3
 8002c06:	f897 008c 	ldrb.w	r0, [r7, #140]	; 0x8c
 8002c0a:	f897 308d 	ldrb.w	r3, [r7, #141]	; 0x8d
 8002c0e:	9300      	str	r3, [sp, #0]
 8002c10:	4603      	mov	r3, r0
 8002c12:	6878      	ldr	r0, [r7, #4]
 8002c14:	f7ff fb82 	bl	800231c <_ZN7MPU605015readMemoryBlockEPhthh>

            //DEBUG_PRINTLN(F("Waiting for FIFO count > 2..."));
            while ((fifoCount = getFIFOCount()) < 3);
 8002c18:	6878      	ldr	r0, [r7, #4]
 8002c1a:	f7ff fa02 	bl	8002022 <_ZN7MPU605012getFIFOCountEv>
 8002c1e:	4603      	mov	r3, r0
 8002c20:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
 8002c24:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8002c28:	2b02      	cmp	r3, #2
 8002c2a:	bf94      	ite	ls
 8002c2c:	2301      	movls	r3, #1
 8002c2e:	2300      	movhi	r3, #0
 8002c30:	b2db      	uxtb	r3, r3
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d000      	beq.n	8002c38 <_ZN7MPU605013dmpInitializeEv+0x474>
 8002c36:	e7ef      	b.n	8002c18 <_ZN7MPU605013dmpInitializeEv+0x454>

            //DEBUG_PRINT(F("Current FIFO count="));
            //DEBUG_PRINTLN(fifoCount);

            //DEBUG_PRINTLN(F("Reading FIFO data..."));
            getFIFOBytes(fifoBuffer, fifoCount);
 8002c38:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8002c3c:	b2da      	uxtb	r2, r3
 8002c3e:	f107 030c 	add.w	r3, r7, #12
 8002c42:	4619      	mov	r1, r3
 8002c44:	6878      	ldr	r0, [r7, #4]
 8002c46:	f7ff fa06 	bl	8002056 <_ZN7MPU605012getFIFOBytesEPhh>

            //DEBUG_PRINT(F("Current interrupt status="));
            //DEBUG_PRINTLNF(getIntStatus(), HEX);

            //DEBUG_PRINTLN(F("Writing final memory update 7/7 (function unknown)..."));
            for (j = 0; j < 4 || j < dmpUpdate[2] + 3; j++, pos++) dmpUpdate[j] = pgm_read_byte(&dmpUpdates[pos]);
 8002c4a:	2300      	movs	r3, #0
 8002c4c:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
 8002c50:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8002c54:	2b03      	cmp	r3, #3
 8002c56:	d906      	bls.n	8002c66 <_ZN7MPU605013dmpInitializeEv+0x4a2>
 8002c58:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 8002c5c:	1c9a      	adds	r2, r3, #2
 8002c5e:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8002c62:	429a      	cmp	r2, r3
 8002c64:	db15      	blt.n	8002c92 <_ZN7MPU605013dmpInitializeEv+0x4ce>
 8002c66:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 8002c6a:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8002c6e:	491d      	ldr	r1, [pc, #116]	; (8002ce4 <_ZN7MPU605013dmpInitializeEv+0x520>)
 8002c70:	5c8a      	ldrb	r2, [r1, r2]
 8002c72:	f107 01a8 	add.w	r1, r7, #168	; 0xa8
 8002c76:	440b      	add	r3, r1
 8002c78:	f803 2c1c 	strb.w	r2, [r3, #-28]
 8002c7c:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8002c80:	3301      	adds	r3, #1
 8002c82:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
 8002c86:	f8b7 30a4 	ldrh.w	r3, [r7, #164]	; 0xa4
 8002c8a:	3301      	adds	r3, #1
 8002c8c:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
 8002c90:	e7de      	b.n	8002c50 <_ZN7MPU605013dmpInitializeEv+0x48c>
            writeMemoryBlock(dmpUpdate + 3, dmpUpdate[2], dmpUpdate[0], dmpUpdate[1]);
 8002c92:	f107 018c 	add.w	r1, r7, #140	; 0x8c
 8002c96:	3103      	adds	r1, #3
 8002c98:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 8002c9c:	b29a      	uxth	r2, r3
 8002c9e:	f897 008c 	ldrb.w	r0, [r7, #140]	; 0x8c
 8002ca2:	f897 308d 	ldrb.w	r3, [r7, #141]	; 0x8d
 8002ca6:	2400      	movs	r4, #0
 8002ca8:	9402      	str	r4, [sp, #8]
 8002caa:	2401      	movs	r4, #1
 8002cac:	9401      	str	r4, [sp, #4]
 8002cae:	9300      	str	r3, [sp, #0]
 8002cb0:	4603      	mov	r3, r0
 8002cb2:	6878      	ldr	r0, [r7, #4]
 8002cb4:	f7ff fb98 	bl	80023e8 <_ZN7MPU605016writeMemoryBlockEPKhthhbb>

            //DEBUG_PRINTLN(F("DMP is good to go! Finally."));

            //DEBUG_PRINTLN(F("Disabling DMP (you turn it on later)..."));
            setDMPEnabled(false);
 8002cb8:	2100      	movs	r1, #0
 8002cba:	6878      	ldr	r0, [r7, #4]
 8002cbc:	f7ff fad3 	bl	8002266 <_ZN7MPU605013setDMPEnabledEb>

            //DEBUG_PRINTLN(F("Setting up internal 42-byte (default) DMP packet buffer..."));
            dmpPacketSize = 42;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	222a      	movs	r2, #42	; 0x2a
 8002cc4:	809a      	strh	r2, [r3, #4]
            /*if ((dmpPacketBuffer = (uint8_t *)malloc(42)) == 0) {
                return 3; // TODO: proper error code for no memory
            }*/

            //DEBUG_PRINTLN(F("Resetting FIFO and clearing INT status one last time..."));
            resetFIFO();
 8002cc6:	6878      	ldr	r0, [r7, #4]
 8002cc8:	f7ff f95a 	bl	8001f80 <_ZN7MPU60509resetFIFOEv>
            getIntStatus();
 8002ccc:	6878      	ldr	r0, [r7, #4]
 8002cce:	f7ff f923 	bl	8001f18 <_ZN7MPU605012getIntStatusEv>
        }
    } else {
        //DEBUG_PRINTLN(F("ERROR! DMP code verification failed."));
        return 1; // main binary block loading failed
    }
    return 0; // success
 8002cd2:	2300      	movs	r3, #0
 8002cd4:	e002      	b.n	8002cdc <_ZN7MPU605013dmpInitializeEv+0x518>
            return 2; // configuration block loading failed
 8002cd6:	2302      	movs	r3, #2
 8002cd8:	e000      	b.n	8002cdc <_ZN7MPU605013dmpInitializeEv+0x518>
        return 1; // main binary block loading failed
 8002cda:	2301      	movs	r3, #1
}
 8002cdc:	4618      	mov	r0, r3
 8002cde:	37ac      	adds	r7, #172	; 0xac
 8002ce0:	46bd      	mov	sp, r7
 8002ce2:	bd90      	pop	{r4, r7, pc}
 8002ce4:	08012fe0 	.word	0x08012fe0

08002ce8 <_ZSt4asinf>:
  using ::asin;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  asin(float __x)
  { return __builtin_asinf(__x); }
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	b082      	sub	sp, #8
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	6078      	str	r0, [r7, #4]
 8002cf0:	6878      	ldr	r0, [r7, #4]
 8002cf2:	f00a fd85 	bl	800d800 <asinf>
 8002cf6:	4603      	mov	r3, r0
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	3708      	adds	r7, #8
 8002cfc:	46bd      	mov	sp, r7
 8002cfe:	bd80      	pop	{r7, pc}

08002d00 <_ZSt4atanf>:
  using ::atan;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  atan(float __x)
  { return __builtin_atanf(__x); }
 8002d00:	b580      	push	{r7, lr}
 8002d02:	b082      	sub	sp, #8
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
 8002d08:	6878      	ldr	r0, [r7, #4]
 8002d0a:	f00a fbd9 	bl	800d4c0 <atanf>
 8002d0e:	4603      	mov	r3, r0
 8002d10:	4618      	mov	r0, r3
 8002d12:	3708      	adds	r7, #8
 8002d14:	46bd      	mov	sp, r7
 8002d16:	bd80      	pop	{r7, pc}

08002d18 <_ZSt3cosf>:
  using ::cos;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  cos(float __x)
  { return __builtin_cosf(__x); }
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	b082      	sub	sp, #8
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	6078      	str	r0, [r7, #4]
 8002d20:	6878      	ldr	r0, [r7, #4]
 8002d22:	f00a fcd9 	bl	800d6d8 <cosf>
 8002d26:	4603      	mov	r3, r0
 8002d28:	4618      	mov	r0, r3
 8002d2a:	3708      	adds	r7, #8
 8002d2c:	46bd      	mov	sp, r7
 8002d2e:	bd80      	pop	{r7, pc}

08002d30 <_ZSt3sinf>:
  using ::sin;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  sin(float __x)
  { return __builtin_sinf(__x); }
 8002d30:	b580      	push	{r7, lr}
 8002d32:	b082      	sub	sp, #8
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
 8002d38:	6878      	ldr	r0, [r7, #4]
 8002d3a:	f00a fd05 	bl	800d748 <sinf>
 8002d3e:	4603      	mov	r3, r0
 8002d40:	4618      	mov	r0, r3
 8002d42:	3708      	adds	r7, #8
 8002d44:	46bd      	mov	sp, r7
 8002d46:	bd80      	pop	{r7, pc}

08002d48 <_ZSt4sqrtf>:
  using ::sqrt;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  sqrt(float __x)
  { return __builtin_sqrtf(__x); }
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	b082      	sub	sp, #8
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	6078      	str	r0, [r7, #4]
 8002d50:	6878      	ldr	r0, [r7, #4]
 8002d52:	f00a fd7b 	bl	800d84c <sqrtf>
 8002d56:	4603      	mov	r3, r0
 8002d58:	4618      	mov	r0, r3
 8002d5a:	3708      	adds	r7, #8
 8002d5c:	46bd      	mov	sp, r7
 8002d5e:	bd80      	pop	{r7, pc}

08002d60 <_Z15getWXQuaternionv>:
float Pitch_D_old;
float Roll_D_old;
float Yaw_D_old;

void getWXQuaternion()
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	b082      	sub	sp, #8
 8002d64:	af00      	add	r7, sp, #0
  float *p = QuaternionSLERP(QuaternionProduct(&FrameOriginQuaternion[0] , QuaternionSLERP(&OriginQuaternion[0], &MPUoutputQuaternion[0])), &LoopWQuaternion[0]);
 8002d66:	494e      	ldr	r1, [pc, #312]	; (8002ea0 <_Z15getWXQuaternionv+0x140>)
 8002d68:	484e      	ldr	r0, [pc, #312]	; (8002ea4 <_Z15getWXQuaternionv+0x144>)
 8002d6a:	f000 fd43 	bl	80037f4 <_Z15QuaternionSLERPPfS_>
 8002d6e:	4603      	mov	r3, r0
 8002d70:	4619      	mov	r1, r3
 8002d72:	484d      	ldr	r0, [pc, #308]	; (8002ea8 <_Z15getWXQuaternionv+0x148>)
 8002d74:	f000 fc10 	bl	8003598 <_Z17QuaternionProductPfS_>
 8002d78:	4603      	mov	r3, r0
 8002d7a:	494c      	ldr	r1, [pc, #304]	; (8002eac <_Z15getWXQuaternionv+0x14c>)
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	f000 fd39 	bl	80037f4 <_Z15QuaternionSLERPPfS_>
 8002d82:	6078      	str	r0, [r7, #4]
  LoopWXQuaternion[0] = *p;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	4a49      	ldr	r2, [pc, #292]	; (8002eb0 <_Z15getWXQuaternionv+0x150>)
 8002d8a:	6013      	str	r3, [r2, #0]
  LoopWXQuaternion[1] = *(p + 1);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	685b      	ldr	r3, [r3, #4]
 8002d90:	4a47      	ldr	r2, [pc, #284]	; (8002eb0 <_Z15getWXQuaternionv+0x150>)
 8002d92:	6053      	str	r3, [r2, #4]
  LoopWXQuaternion[2] = *(p + 2);
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	689b      	ldr	r3, [r3, #8]
 8002d98:	4a45      	ldr	r2, [pc, #276]	; (8002eb0 <_Z15getWXQuaternionv+0x150>)
 8002d9a:	6093      	str	r3, [r2, #8]
  LoopWXQuaternion[3] = *(p + 3);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	68db      	ldr	r3, [r3, #12]
 8002da0:	4a43      	ldr	r2, [pc, #268]	; (8002eb0 <_Z15getWXQuaternionv+0x150>)
 8002da2:	60d3      	str	r3, [r2, #12]

  //difference x-w in degrees
  PID_Pitch_xw_diff = 2 * (((float)asin(LoopWXQuaternion[1]) * 180) / M_PI);
 8002da4:	4b42      	ldr	r3, [pc, #264]	; (8002eb0 <_Z15getWXQuaternionv+0x150>)
 8002da6:	685b      	ldr	r3, [r3, #4]
 8002da8:	4618      	mov	r0, r3
 8002daa:	f7ff ff9d 	bl	8002ce8 <_ZSt4asinf>
 8002dae:	4603      	mov	r3, r0
 8002db0:	4940      	ldr	r1, [pc, #256]	; (8002eb4 <_Z15getWXQuaternionv+0x154>)
 8002db2:	4618      	mov	r0, r3
 8002db4:	f7fe f802 	bl	8000dbc <__aeabi_fmul>
 8002db8:	4603      	mov	r3, r0
 8002dba:	4618      	mov	r0, r3
 8002dbc:	f7fd fb70 	bl	80004a0 <__aeabi_f2d>
 8002dc0:	a335      	add	r3, pc, #212	; (adr r3, 8002e98 <_Z15getWXQuaternionv+0x138>)
 8002dc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002dc6:	f7fd fced 	bl	80007a4 <__aeabi_ddiv>
 8002dca:	4602      	mov	r2, r0
 8002dcc:	460b      	mov	r3, r1
 8002dce:	4610      	mov	r0, r2
 8002dd0:	4619      	mov	r1, r3
 8002dd2:	4602      	mov	r2, r0
 8002dd4:	460b      	mov	r3, r1
 8002dd6:	f7fd fa05 	bl	80001e4 <__adddf3>
 8002dda:	4602      	mov	r2, r0
 8002ddc:	460b      	mov	r3, r1
 8002dde:	4610      	mov	r0, r2
 8002de0:	4619      	mov	r1, r3
 8002de2:	f7fd fe8d 	bl	8000b00 <__aeabi_d2f>
 8002de6:	4603      	mov	r3, r0
 8002de8:	4a33      	ldr	r2, [pc, #204]	; (8002eb8 <_Z15getWXQuaternionv+0x158>)
 8002dea:	6013      	str	r3, [r2, #0]
  PID_Roll_xw_diff  = 2 * (((float)asin(LoopWXQuaternion[2]) * 180) / M_PI);
 8002dec:	4b30      	ldr	r3, [pc, #192]	; (8002eb0 <_Z15getWXQuaternionv+0x150>)
 8002dee:	689b      	ldr	r3, [r3, #8]
 8002df0:	4618      	mov	r0, r3
 8002df2:	f7ff ff79 	bl	8002ce8 <_ZSt4asinf>
 8002df6:	4603      	mov	r3, r0
 8002df8:	492e      	ldr	r1, [pc, #184]	; (8002eb4 <_Z15getWXQuaternionv+0x154>)
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	f7fd ffde 	bl	8000dbc <__aeabi_fmul>
 8002e00:	4603      	mov	r3, r0
 8002e02:	4618      	mov	r0, r3
 8002e04:	f7fd fb4c 	bl	80004a0 <__aeabi_f2d>
 8002e08:	a323      	add	r3, pc, #140	; (adr r3, 8002e98 <_Z15getWXQuaternionv+0x138>)
 8002e0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e0e:	f7fd fcc9 	bl	80007a4 <__aeabi_ddiv>
 8002e12:	4602      	mov	r2, r0
 8002e14:	460b      	mov	r3, r1
 8002e16:	4610      	mov	r0, r2
 8002e18:	4619      	mov	r1, r3
 8002e1a:	4602      	mov	r2, r0
 8002e1c:	460b      	mov	r3, r1
 8002e1e:	f7fd f9e1 	bl	80001e4 <__adddf3>
 8002e22:	4602      	mov	r2, r0
 8002e24:	460b      	mov	r3, r1
 8002e26:	4610      	mov	r0, r2
 8002e28:	4619      	mov	r1, r3
 8002e2a:	f7fd fe69 	bl	8000b00 <__aeabi_d2f>
 8002e2e:	4603      	mov	r3, r0
 8002e30:	4a22      	ldr	r2, [pc, #136]	; (8002ebc <_Z15getWXQuaternionv+0x15c>)
 8002e32:	6013      	str	r3, [r2, #0]
  PID_Yaw_xw_diff   = 2 * (((float)atan(LoopWXQuaternion[3] / LoopWXQuaternion[0]) * 180) / M_PI);
 8002e34:	4b1e      	ldr	r3, [pc, #120]	; (8002eb0 <_Z15getWXQuaternionv+0x150>)
 8002e36:	68db      	ldr	r3, [r3, #12]
 8002e38:	4a1d      	ldr	r2, [pc, #116]	; (8002eb0 <_Z15getWXQuaternionv+0x150>)
 8002e3a:	6812      	ldr	r2, [r2, #0]
 8002e3c:	4611      	mov	r1, r2
 8002e3e:	4618      	mov	r0, r3
 8002e40:	f7fe f870 	bl	8000f24 <__aeabi_fdiv>
 8002e44:	4603      	mov	r3, r0
 8002e46:	4618      	mov	r0, r3
 8002e48:	f7ff ff5a 	bl	8002d00 <_ZSt4atanf>
 8002e4c:	4603      	mov	r3, r0
 8002e4e:	4919      	ldr	r1, [pc, #100]	; (8002eb4 <_Z15getWXQuaternionv+0x154>)
 8002e50:	4618      	mov	r0, r3
 8002e52:	f7fd ffb3 	bl	8000dbc <__aeabi_fmul>
 8002e56:	4603      	mov	r3, r0
 8002e58:	4618      	mov	r0, r3
 8002e5a:	f7fd fb21 	bl	80004a0 <__aeabi_f2d>
 8002e5e:	a30e      	add	r3, pc, #56	; (adr r3, 8002e98 <_Z15getWXQuaternionv+0x138>)
 8002e60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e64:	f7fd fc9e 	bl	80007a4 <__aeabi_ddiv>
 8002e68:	4602      	mov	r2, r0
 8002e6a:	460b      	mov	r3, r1
 8002e6c:	4610      	mov	r0, r2
 8002e6e:	4619      	mov	r1, r3
 8002e70:	4602      	mov	r2, r0
 8002e72:	460b      	mov	r3, r1
 8002e74:	f7fd f9b6 	bl	80001e4 <__adddf3>
 8002e78:	4602      	mov	r2, r0
 8002e7a:	460b      	mov	r3, r1
 8002e7c:	4610      	mov	r0, r2
 8002e7e:	4619      	mov	r1, r3
 8002e80:	f7fd fe3e 	bl	8000b00 <__aeabi_d2f>
 8002e84:	4603      	mov	r3, r0
 8002e86:	4a0e      	ldr	r2, [pc, #56]	; (8002ec0 <_Z15getWXQuaternionv+0x160>)
 8002e88:	6013      	str	r3, [r2, #0]
}
 8002e8a:	bf00      	nop
 8002e8c:	3708      	adds	r7, #8
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	bd80      	pop	{r7, pc}
 8002e92:	bf00      	nop
 8002e94:	f3af 8000 	nop.w
 8002e98:	54442d18 	.word	0x54442d18
 8002e9c:	400921fb 	.word	0x400921fb
 8002ea0:	200004c0 	.word	0x200004c0
 8002ea4:	200004d0 	.word	0x200004d0
 8002ea8:	20000000 	.word	0x20000000
 8002eac:	20000010 	.word	0x20000010
 8002eb0:	200004e0 	.word	0x200004e0
 8002eb4:	43340000 	.word	0x43340000
 8002eb8:	200004a8 	.word	0x200004a8
 8002ebc:	200004ac 	.word	0x200004ac
 8002ec0:	200004b0 	.word	0x200004b0

08002ec4 <_Z28Update_FrameOriginQuaternionv>:

void Update_FrameOriginQuaternion()
{
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	b084      	sub	sp, #16
 8002ec8:	af00      	add	r7, sp, #0
  updateQuaternion[0] = cos((float)SBUS_Channels[3] / 10000);
 8002eca:	4b44      	ldr	r3, [pc, #272]	; (8002fdc <_Z28Update_FrameOriginQuaternionv+0x118>)
 8002ecc:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8002ed0:	4618      	mov	r0, r3
 8002ed2:	f7fd ff1f 	bl	8000d14 <__aeabi_i2f>
 8002ed6:	4603      	mov	r3, r0
 8002ed8:	4941      	ldr	r1, [pc, #260]	; (8002fe0 <_Z28Update_FrameOriginQuaternionv+0x11c>)
 8002eda:	4618      	mov	r0, r3
 8002edc:	f7fe f822 	bl	8000f24 <__aeabi_fdiv>
 8002ee0:	4603      	mov	r3, r0
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	f7ff ff18 	bl	8002d18 <_ZSt3cosf>
 8002ee8:	4603      	mov	r3, r0
 8002eea:	4a3e      	ldr	r2, [pc, #248]	; (8002fe4 <_Z28Update_FrameOriginQuaternionv+0x120>)
 8002eec:	6013      	str	r3, [r2, #0]
  updateQuaternion[1] = (float)sin((float)SBUS_Channels[1] / (float)10000);
 8002eee:	4b3b      	ldr	r3, [pc, #236]	; (8002fdc <_Z28Update_FrameOriginQuaternionv+0x118>)
 8002ef0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	f7fd ff0d 	bl	8000d14 <__aeabi_i2f>
 8002efa:	4603      	mov	r3, r0
 8002efc:	4938      	ldr	r1, [pc, #224]	; (8002fe0 <_Z28Update_FrameOriginQuaternionv+0x11c>)
 8002efe:	4618      	mov	r0, r3
 8002f00:	f7fe f810 	bl	8000f24 <__aeabi_fdiv>
 8002f04:	4603      	mov	r3, r0
 8002f06:	4618      	mov	r0, r3
 8002f08:	f7ff ff12 	bl	8002d30 <_ZSt3sinf>
 8002f0c:	4603      	mov	r3, r0
 8002f0e:	4a35      	ldr	r2, [pc, #212]	; (8002fe4 <_Z28Update_FrameOriginQuaternionv+0x120>)
 8002f10:	6053      	str	r3, [r2, #4]
  updateQuaternion[2] = (float)sin((float)SBUS_Channels[0] / (float)10000);
 8002f12:	4b32      	ldr	r3, [pc, #200]	; (8002fdc <_Z28Update_FrameOriginQuaternionv+0x118>)
 8002f14:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002f18:	4618      	mov	r0, r3
 8002f1a:	f7fd fefb 	bl	8000d14 <__aeabi_i2f>
 8002f1e:	4603      	mov	r3, r0
 8002f20:	492f      	ldr	r1, [pc, #188]	; (8002fe0 <_Z28Update_FrameOriginQuaternionv+0x11c>)
 8002f22:	4618      	mov	r0, r3
 8002f24:	f7fd fffe 	bl	8000f24 <__aeabi_fdiv>
 8002f28:	4603      	mov	r3, r0
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	f7ff ff00 	bl	8002d30 <_ZSt3sinf>
 8002f30:	4603      	mov	r3, r0
 8002f32:	4a2c      	ldr	r2, [pc, #176]	; (8002fe4 <_Z28Update_FrameOriginQuaternionv+0x120>)
 8002f34:	6093      	str	r3, [r2, #8]
  updateQuaternion[3] = sin((float)SBUS_Channels[3] / 10000);
 8002f36:	4b29      	ldr	r3, [pc, #164]	; (8002fdc <_Z28Update_FrameOriginQuaternionv+0x118>)
 8002f38:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8002f3c:	4618      	mov	r0, r3
 8002f3e:	f7fd fee9 	bl	8000d14 <__aeabi_i2f>
 8002f42:	4603      	mov	r3, r0
 8002f44:	4926      	ldr	r1, [pc, #152]	; (8002fe0 <_Z28Update_FrameOriginQuaternionv+0x11c>)
 8002f46:	4618      	mov	r0, r3
 8002f48:	f7fd ffec 	bl	8000f24 <__aeabi_fdiv>
 8002f4c:	4603      	mov	r3, r0
 8002f4e:	4618      	mov	r0, r3
 8002f50:	f7ff feee 	bl	8002d30 <_ZSt3sinf>
 8002f54:	4603      	mov	r3, r0
 8002f56:	4a23      	ldr	r2, [pc, #140]	; (8002fe4 <_Z28Update_FrameOriginQuaternionv+0x120>)
 8002f58:	60d3      	str	r3, [r2, #12]

  float *p1 = QuaternionNormalize(&updateQuaternion[0]);
 8002f5a:	4822      	ldr	r0, [pc, #136]	; (8002fe4 <_Z28Update_FrameOriginQuaternionv+0x120>)
 8002f5c:	f000 fc5c 	bl	8003818 <_Z19QuaternionNormalizePf>
 8002f60:	60f8      	str	r0, [r7, #12]
  updateQuaternion[0] = *p1;
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	4a1f      	ldr	r2, [pc, #124]	; (8002fe4 <_Z28Update_FrameOriginQuaternionv+0x120>)
 8002f68:	6013      	str	r3, [r2, #0]
  updateQuaternion[1] = *(p1 + 1);
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	685b      	ldr	r3, [r3, #4]
 8002f6e:	4a1d      	ldr	r2, [pc, #116]	; (8002fe4 <_Z28Update_FrameOriginQuaternionv+0x120>)
 8002f70:	6053      	str	r3, [r2, #4]
  updateQuaternion[2] = *(p1 + 2);
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	689b      	ldr	r3, [r3, #8]
 8002f76:	4a1b      	ldr	r2, [pc, #108]	; (8002fe4 <_Z28Update_FrameOriginQuaternionv+0x120>)
 8002f78:	6093      	str	r3, [r2, #8]
  updateQuaternion[3] = *(p1 + 3);
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	68db      	ldr	r3, [r3, #12]
 8002f7e:	4a19      	ldr	r2, [pc, #100]	; (8002fe4 <_Z28Update_FrameOriginQuaternionv+0x120>)
 8002f80:	60d3      	str	r3, [r2, #12]

  float *p2 = QuaternionProduct(&updateQuaternion[0], &LoopWQuaternion[0]);
 8002f82:	4919      	ldr	r1, [pc, #100]	; (8002fe8 <_Z28Update_FrameOriginQuaternionv+0x124>)
 8002f84:	4817      	ldr	r0, [pc, #92]	; (8002fe4 <_Z28Update_FrameOriginQuaternionv+0x120>)
 8002f86:	f000 fb07 	bl	8003598 <_Z17QuaternionProductPfS_>
 8002f8a:	60b8      	str	r0, [r7, #8]
  LoopWQuaternion[0] = *p2;
 8002f8c:	68bb      	ldr	r3, [r7, #8]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	4a15      	ldr	r2, [pc, #84]	; (8002fe8 <_Z28Update_FrameOriginQuaternionv+0x124>)
 8002f92:	6013      	str	r3, [r2, #0]
  LoopWQuaternion[1] = *(p2 + 1);
 8002f94:	68bb      	ldr	r3, [r7, #8]
 8002f96:	685b      	ldr	r3, [r3, #4]
 8002f98:	4a13      	ldr	r2, [pc, #76]	; (8002fe8 <_Z28Update_FrameOriginQuaternionv+0x124>)
 8002f9a:	6053      	str	r3, [r2, #4]
  LoopWQuaternion[2] = *(p2 + 2);
 8002f9c:	68bb      	ldr	r3, [r7, #8]
 8002f9e:	689b      	ldr	r3, [r3, #8]
 8002fa0:	4a11      	ldr	r2, [pc, #68]	; (8002fe8 <_Z28Update_FrameOriginQuaternionv+0x124>)
 8002fa2:	6093      	str	r3, [r2, #8]
  LoopWQuaternion[3] = *(p2 + 3);
 8002fa4:	68bb      	ldr	r3, [r7, #8]
 8002fa6:	68db      	ldr	r3, [r3, #12]
 8002fa8:	4a0f      	ldr	r2, [pc, #60]	; (8002fe8 <_Z28Update_FrameOriginQuaternionv+0x124>)
 8002faa:	60d3      	str	r3, [r2, #12]

    float *p3 = QuaternionNormalize(&LoopWQuaternion[0]);
 8002fac:	480e      	ldr	r0, [pc, #56]	; (8002fe8 <_Z28Update_FrameOriginQuaternionv+0x124>)
 8002fae:	f000 fc33 	bl	8003818 <_Z19QuaternionNormalizePf>
 8002fb2:	6078      	str	r0, [r7, #4]
  LoopWQuaternion[0] = *p3;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	4a0b      	ldr	r2, [pc, #44]	; (8002fe8 <_Z28Update_FrameOriginQuaternionv+0x124>)
 8002fba:	6013      	str	r3, [r2, #0]
  LoopWQuaternion[1] = *(p3 + 1);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	685b      	ldr	r3, [r3, #4]
 8002fc0:	4a09      	ldr	r2, [pc, #36]	; (8002fe8 <_Z28Update_FrameOriginQuaternionv+0x124>)
 8002fc2:	6053      	str	r3, [r2, #4]
  LoopWQuaternion[2] = *(p3 + 2);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	689b      	ldr	r3, [r3, #8]
 8002fc8:	4a07      	ldr	r2, [pc, #28]	; (8002fe8 <_Z28Update_FrameOriginQuaternionv+0x124>)
 8002fca:	6093      	str	r3, [r2, #8]
  LoopWQuaternion[3] = *(p3 + 3);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	68db      	ldr	r3, [r3, #12]
 8002fd0:	4a05      	ldr	r2, [pc, #20]	; (8002fe8 <_Z28Update_FrameOriginQuaternionv+0x124>)
 8002fd2:	60d3      	str	r3, [r2, #12]
}
 8002fd4:	bf00      	nop
 8002fd6:	3710      	adds	r7, #16
 8002fd8:	46bd      	mov	sp, r7
 8002fda:	bd80      	pop	{r7, pc}
 8002fdc:	200006c8 	.word	0x200006c8
 8002fe0:	461c4000 	.word	0x461c4000
 8002fe4:	200004f0 	.word	0x200004f0
 8002fe8:	20000010 	.word	0x20000010

08002fec <_Z10Update_PIDv>:

void Update_PID()
{
 8002fec:	b598      	push	{r3, r4, r7, lr}
 8002fee:	af00      	add	r7, sp, #0
  Pitch_I_Sum += (PID_Pitch_xw_diff * Pitch_PID_k[1]);
 8002ff0:	4b92      	ldr	r3, [pc, #584]	; (800323c <_Z10Update_PIDv+0x250>)
 8002ff2:	685b      	ldr	r3, [r3, #4]
 8002ff4:	4a92      	ldr	r2, [pc, #584]	; (8003240 <_Z10Update_PIDv+0x254>)
 8002ff6:	6812      	ldr	r2, [r2, #0]
 8002ff8:	4611      	mov	r1, r2
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	f7fd fede 	bl	8000dbc <__aeabi_fmul>
 8003000:	4603      	mov	r3, r0
 8003002:	461a      	mov	r2, r3
 8003004:	4b8f      	ldr	r3, [pc, #572]	; (8003244 <_Z10Update_PIDv+0x258>)
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	4619      	mov	r1, r3
 800300a:	4610      	mov	r0, r2
 800300c:	f7fd fdce 	bl	8000bac <__addsf3>
 8003010:	4603      	mov	r3, r0
 8003012:	461a      	mov	r2, r3
 8003014:	4b8b      	ldr	r3, [pc, #556]	; (8003244 <_Z10Update_PIDv+0x258>)
 8003016:	601a      	str	r2, [r3, #0]
  Roll_I_Sum  += (PID_Roll_xw_diff  * Roll_PID_k[1] );
 8003018:	4b8b      	ldr	r3, [pc, #556]	; (8003248 <_Z10Update_PIDv+0x25c>)
 800301a:	685b      	ldr	r3, [r3, #4]
 800301c:	4a8b      	ldr	r2, [pc, #556]	; (800324c <_Z10Update_PIDv+0x260>)
 800301e:	6812      	ldr	r2, [r2, #0]
 8003020:	4611      	mov	r1, r2
 8003022:	4618      	mov	r0, r3
 8003024:	f7fd feca 	bl	8000dbc <__aeabi_fmul>
 8003028:	4603      	mov	r3, r0
 800302a:	461a      	mov	r2, r3
 800302c:	4b88      	ldr	r3, [pc, #544]	; (8003250 <_Z10Update_PIDv+0x264>)
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	4619      	mov	r1, r3
 8003032:	4610      	mov	r0, r2
 8003034:	f7fd fdba 	bl	8000bac <__addsf3>
 8003038:	4603      	mov	r3, r0
 800303a:	461a      	mov	r2, r3
 800303c:	4b84      	ldr	r3, [pc, #528]	; (8003250 <_Z10Update_PIDv+0x264>)
 800303e:	601a      	str	r2, [r3, #0]
  Yaw_I_Sum   += (PID_Yaw_xw_diff   * Yaw_PID_k[1]  );
 8003040:	4b84      	ldr	r3, [pc, #528]	; (8003254 <_Z10Update_PIDv+0x268>)
 8003042:	685b      	ldr	r3, [r3, #4]
 8003044:	4a84      	ldr	r2, [pc, #528]	; (8003258 <_Z10Update_PIDv+0x26c>)
 8003046:	6812      	ldr	r2, [r2, #0]
 8003048:	4611      	mov	r1, r2
 800304a:	4618      	mov	r0, r3
 800304c:	f7fd feb6 	bl	8000dbc <__aeabi_fmul>
 8003050:	4603      	mov	r3, r0
 8003052:	461a      	mov	r2, r3
 8003054:	4b81      	ldr	r3, [pc, #516]	; (800325c <_Z10Update_PIDv+0x270>)
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	4619      	mov	r1, r3
 800305a:	4610      	mov	r0, r2
 800305c:	f7fd fda6 	bl	8000bac <__addsf3>
 8003060:	4603      	mov	r3, r0
 8003062:	461a      	mov	r2, r3
 8003064:	4b7d      	ldr	r3, [pc, #500]	; (800325c <_Z10Update_PIDv+0x270>)
 8003066:	601a      	str	r2, [r3, #0]

  if (Pitch_I_Sum > 500 ) Pitch_I_Sum = 500 ;
 8003068:	4b76      	ldr	r3, [pc, #472]	; (8003244 <_Z10Update_PIDv+0x258>)
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	497c      	ldr	r1, [pc, #496]	; (8003260 <_Z10Update_PIDv+0x274>)
 800306e:	4618      	mov	r0, r3
 8003070:	f7fe f860 	bl	8001134 <__aeabi_fcmpgt>
 8003074:	4603      	mov	r3, r0
 8003076:	2b00      	cmp	r3, #0
 8003078:	d002      	beq.n	8003080 <_Z10Update_PIDv+0x94>
 800307a:	4b72      	ldr	r3, [pc, #456]	; (8003244 <_Z10Update_PIDv+0x258>)
 800307c:	4a78      	ldr	r2, [pc, #480]	; (8003260 <_Z10Update_PIDv+0x274>)
 800307e:	601a      	str	r2, [r3, #0]
  if (Roll_I_Sum  > 500 ) Roll_I_Sum  = 500 ;
 8003080:	4b73      	ldr	r3, [pc, #460]	; (8003250 <_Z10Update_PIDv+0x264>)
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	4976      	ldr	r1, [pc, #472]	; (8003260 <_Z10Update_PIDv+0x274>)
 8003086:	4618      	mov	r0, r3
 8003088:	f7fe f854 	bl	8001134 <__aeabi_fcmpgt>
 800308c:	4603      	mov	r3, r0
 800308e:	2b00      	cmp	r3, #0
 8003090:	d002      	beq.n	8003098 <_Z10Update_PIDv+0xac>
 8003092:	4b6f      	ldr	r3, [pc, #444]	; (8003250 <_Z10Update_PIDv+0x264>)
 8003094:	4a72      	ldr	r2, [pc, #456]	; (8003260 <_Z10Update_PIDv+0x274>)
 8003096:	601a      	str	r2, [r3, #0]
  if (Yaw_I_Sum   > 500 ) Yaw_I_Sum   = 500 ;
 8003098:	4b70      	ldr	r3, [pc, #448]	; (800325c <_Z10Update_PIDv+0x270>)
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	4970      	ldr	r1, [pc, #448]	; (8003260 <_Z10Update_PIDv+0x274>)
 800309e:	4618      	mov	r0, r3
 80030a0:	f7fe f848 	bl	8001134 <__aeabi_fcmpgt>
 80030a4:	4603      	mov	r3, r0
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d002      	beq.n	80030b0 <_Z10Update_PIDv+0xc4>
 80030aa:	4b6c      	ldr	r3, [pc, #432]	; (800325c <_Z10Update_PIDv+0x270>)
 80030ac:	4a6c      	ldr	r2, [pc, #432]	; (8003260 <_Z10Update_PIDv+0x274>)
 80030ae:	601a      	str	r2, [r3, #0]
  if (Pitch_I_Sum < -500) Pitch_I_Sum = -500;
 80030b0:	4b64      	ldr	r3, [pc, #400]	; (8003244 <_Z10Update_PIDv+0x258>)
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	496b      	ldr	r1, [pc, #428]	; (8003264 <_Z10Update_PIDv+0x278>)
 80030b6:	4618      	mov	r0, r3
 80030b8:	f7fe f81e 	bl	80010f8 <__aeabi_fcmplt>
 80030bc:	4603      	mov	r3, r0
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d002      	beq.n	80030c8 <_Z10Update_PIDv+0xdc>
 80030c2:	4b60      	ldr	r3, [pc, #384]	; (8003244 <_Z10Update_PIDv+0x258>)
 80030c4:	4a67      	ldr	r2, [pc, #412]	; (8003264 <_Z10Update_PIDv+0x278>)
 80030c6:	601a      	str	r2, [r3, #0]
  if (Roll_I_Sum  < -500) Roll_I_Sum  = -500;
 80030c8:	4b61      	ldr	r3, [pc, #388]	; (8003250 <_Z10Update_PIDv+0x264>)
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	4965      	ldr	r1, [pc, #404]	; (8003264 <_Z10Update_PIDv+0x278>)
 80030ce:	4618      	mov	r0, r3
 80030d0:	f7fe f812 	bl	80010f8 <__aeabi_fcmplt>
 80030d4:	4603      	mov	r3, r0
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d002      	beq.n	80030e0 <_Z10Update_PIDv+0xf4>
 80030da:	4b5d      	ldr	r3, [pc, #372]	; (8003250 <_Z10Update_PIDv+0x264>)
 80030dc:	4a61      	ldr	r2, [pc, #388]	; (8003264 <_Z10Update_PIDv+0x278>)
 80030de:	601a      	str	r2, [r3, #0]
  if (Yaw_I_Sum   < -500) Yaw_I_Sum   = -500;
 80030e0:	4b5e      	ldr	r3, [pc, #376]	; (800325c <_Z10Update_PIDv+0x270>)
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	495f      	ldr	r1, [pc, #380]	; (8003264 <_Z10Update_PIDv+0x278>)
 80030e6:	4618      	mov	r0, r3
 80030e8:	f7fe f806 	bl	80010f8 <__aeabi_fcmplt>
 80030ec:	4603      	mov	r3, r0
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d002      	beq.n	80030f8 <_Z10Update_PIDv+0x10c>
 80030f2:	4b5a      	ldr	r3, [pc, #360]	; (800325c <_Z10Update_PIDv+0x270>)
 80030f4:	4a5b      	ldr	r2, [pc, #364]	; (8003264 <_Z10Update_PIDv+0x278>)
 80030f6:	601a      	str	r2, [r3, #0]
  

  PID_Pitch_y = (PID_Pitch_xw_diff * Pitch_PID_k[0] * 10) + Pitch_I_Sum + ((PID_Pitch_xw_diff - Pitch_D_old) * Pitch_PID_k[2] * 100);
 80030f8:	4b50      	ldr	r3, [pc, #320]	; (800323c <_Z10Update_PIDv+0x250>)
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	4a50      	ldr	r2, [pc, #320]	; (8003240 <_Z10Update_PIDv+0x254>)
 80030fe:	6812      	ldr	r2, [r2, #0]
 8003100:	4611      	mov	r1, r2
 8003102:	4618      	mov	r0, r3
 8003104:	f7fd fe5a 	bl	8000dbc <__aeabi_fmul>
 8003108:	4603      	mov	r3, r0
 800310a:	4957      	ldr	r1, [pc, #348]	; (8003268 <_Z10Update_PIDv+0x27c>)
 800310c:	4618      	mov	r0, r3
 800310e:	f7fd fe55 	bl	8000dbc <__aeabi_fmul>
 8003112:	4603      	mov	r3, r0
 8003114:	461a      	mov	r2, r3
 8003116:	4b4b      	ldr	r3, [pc, #300]	; (8003244 <_Z10Update_PIDv+0x258>)
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	4619      	mov	r1, r3
 800311c:	4610      	mov	r0, r2
 800311e:	f7fd fd45 	bl	8000bac <__addsf3>
 8003122:	4603      	mov	r3, r0
 8003124:	461c      	mov	r4, r3
 8003126:	4b46      	ldr	r3, [pc, #280]	; (8003240 <_Z10Update_PIDv+0x254>)
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	4a50      	ldr	r2, [pc, #320]	; (800326c <_Z10Update_PIDv+0x280>)
 800312c:	6812      	ldr	r2, [r2, #0]
 800312e:	4611      	mov	r1, r2
 8003130:	4618      	mov	r0, r3
 8003132:	f7fd fd39 	bl	8000ba8 <__aeabi_fsub>
 8003136:	4603      	mov	r3, r0
 8003138:	461a      	mov	r2, r3
 800313a:	4b40      	ldr	r3, [pc, #256]	; (800323c <_Z10Update_PIDv+0x250>)
 800313c:	689b      	ldr	r3, [r3, #8]
 800313e:	4619      	mov	r1, r3
 8003140:	4610      	mov	r0, r2
 8003142:	f7fd fe3b 	bl	8000dbc <__aeabi_fmul>
 8003146:	4603      	mov	r3, r0
 8003148:	4949      	ldr	r1, [pc, #292]	; (8003270 <_Z10Update_PIDv+0x284>)
 800314a:	4618      	mov	r0, r3
 800314c:	f7fd fe36 	bl	8000dbc <__aeabi_fmul>
 8003150:	4603      	mov	r3, r0
 8003152:	4619      	mov	r1, r3
 8003154:	4620      	mov	r0, r4
 8003156:	f7fd fd29 	bl	8000bac <__addsf3>
 800315a:	4603      	mov	r3, r0
 800315c:	461a      	mov	r2, r3
 800315e:	4b45      	ldr	r3, [pc, #276]	; (8003274 <_Z10Update_PIDv+0x288>)
 8003160:	601a      	str	r2, [r3, #0]
  PID_Roll_y  = (PID_Roll_xw_diff  * Roll_PID_k[0]  * 10) + Roll_I_Sum  + ((PID_Roll_xw_diff  - Roll_D_old ) * Roll_PID_k[2]  * 100);
 8003162:	4b39      	ldr	r3, [pc, #228]	; (8003248 <_Z10Update_PIDv+0x25c>)
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	4a39      	ldr	r2, [pc, #228]	; (800324c <_Z10Update_PIDv+0x260>)
 8003168:	6812      	ldr	r2, [r2, #0]
 800316a:	4611      	mov	r1, r2
 800316c:	4618      	mov	r0, r3
 800316e:	f7fd fe25 	bl	8000dbc <__aeabi_fmul>
 8003172:	4603      	mov	r3, r0
 8003174:	493c      	ldr	r1, [pc, #240]	; (8003268 <_Z10Update_PIDv+0x27c>)
 8003176:	4618      	mov	r0, r3
 8003178:	f7fd fe20 	bl	8000dbc <__aeabi_fmul>
 800317c:	4603      	mov	r3, r0
 800317e:	461a      	mov	r2, r3
 8003180:	4b33      	ldr	r3, [pc, #204]	; (8003250 <_Z10Update_PIDv+0x264>)
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	4619      	mov	r1, r3
 8003186:	4610      	mov	r0, r2
 8003188:	f7fd fd10 	bl	8000bac <__addsf3>
 800318c:	4603      	mov	r3, r0
 800318e:	461c      	mov	r4, r3
 8003190:	4b2e      	ldr	r3, [pc, #184]	; (800324c <_Z10Update_PIDv+0x260>)
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	4a38      	ldr	r2, [pc, #224]	; (8003278 <_Z10Update_PIDv+0x28c>)
 8003196:	6812      	ldr	r2, [r2, #0]
 8003198:	4611      	mov	r1, r2
 800319a:	4618      	mov	r0, r3
 800319c:	f7fd fd04 	bl	8000ba8 <__aeabi_fsub>
 80031a0:	4603      	mov	r3, r0
 80031a2:	461a      	mov	r2, r3
 80031a4:	4b28      	ldr	r3, [pc, #160]	; (8003248 <_Z10Update_PIDv+0x25c>)
 80031a6:	689b      	ldr	r3, [r3, #8]
 80031a8:	4619      	mov	r1, r3
 80031aa:	4610      	mov	r0, r2
 80031ac:	f7fd fe06 	bl	8000dbc <__aeabi_fmul>
 80031b0:	4603      	mov	r3, r0
 80031b2:	492f      	ldr	r1, [pc, #188]	; (8003270 <_Z10Update_PIDv+0x284>)
 80031b4:	4618      	mov	r0, r3
 80031b6:	f7fd fe01 	bl	8000dbc <__aeabi_fmul>
 80031ba:	4603      	mov	r3, r0
 80031bc:	4619      	mov	r1, r3
 80031be:	4620      	mov	r0, r4
 80031c0:	f7fd fcf4 	bl	8000bac <__addsf3>
 80031c4:	4603      	mov	r3, r0
 80031c6:	461a      	mov	r2, r3
 80031c8:	4b2c      	ldr	r3, [pc, #176]	; (800327c <_Z10Update_PIDv+0x290>)
 80031ca:	601a      	str	r2, [r3, #0]
  PID_Yaw_y   = (PID_Yaw_xw_diff   * Yaw_PID_k[0]   * 10) + Yaw_I_Sum   + ((PID_Yaw_xw_diff   - Yaw_D_old  ) * Yaw_PID_k[2]   * 100);
 80031cc:	4b21      	ldr	r3, [pc, #132]	; (8003254 <_Z10Update_PIDv+0x268>)
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	4a21      	ldr	r2, [pc, #132]	; (8003258 <_Z10Update_PIDv+0x26c>)
 80031d2:	6812      	ldr	r2, [r2, #0]
 80031d4:	4611      	mov	r1, r2
 80031d6:	4618      	mov	r0, r3
 80031d8:	f7fd fdf0 	bl	8000dbc <__aeabi_fmul>
 80031dc:	4603      	mov	r3, r0
 80031de:	4922      	ldr	r1, [pc, #136]	; (8003268 <_Z10Update_PIDv+0x27c>)
 80031e0:	4618      	mov	r0, r3
 80031e2:	f7fd fdeb 	bl	8000dbc <__aeabi_fmul>
 80031e6:	4603      	mov	r3, r0
 80031e8:	461a      	mov	r2, r3
 80031ea:	4b1c      	ldr	r3, [pc, #112]	; (800325c <_Z10Update_PIDv+0x270>)
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	4619      	mov	r1, r3
 80031f0:	4610      	mov	r0, r2
 80031f2:	f7fd fcdb 	bl	8000bac <__addsf3>
 80031f6:	4603      	mov	r3, r0
 80031f8:	461c      	mov	r4, r3
 80031fa:	4b17      	ldr	r3, [pc, #92]	; (8003258 <_Z10Update_PIDv+0x26c>)
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	4a20      	ldr	r2, [pc, #128]	; (8003280 <_Z10Update_PIDv+0x294>)
 8003200:	6812      	ldr	r2, [r2, #0]
 8003202:	4611      	mov	r1, r2
 8003204:	4618      	mov	r0, r3
 8003206:	f7fd fccf 	bl	8000ba8 <__aeabi_fsub>
 800320a:	4603      	mov	r3, r0
 800320c:	461a      	mov	r2, r3
 800320e:	4b11      	ldr	r3, [pc, #68]	; (8003254 <_Z10Update_PIDv+0x268>)
 8003210:	689b      	ldr	r3, [r3, #8]
 8003212:	4619      	mov	r1, r3
 8003214:	4610      	mov	r0, r2
 8003216:	f7fd fdd1 	bl	8000dbc <__aeabi_fmul>
 800321a:	4603      	mov	r3, r0
 800321c:	4914      	ldr	r1, [pc, #80]	; (8003270 <_Z10Update_PIDv+0x284>)
 800321e:	4618      	mov	r0, r3
 8003220:	f7fd fdcc 	bl	8000dbc <__aeabi_fmul>
 8003224:	4603      	mov	r3, r0
 8003226:	4619      	mov	r1, r3
 8003228:	4620      	mov	r0, r4
 800322a:	f7fd fcbf 	bl	8000bac <__addsf3>
 800322e:	4603      	mov	r3, r0
 8003230:	461a      	mov	r2, r3
 8003232:	4b14      	ldr	r3, [pc, #80]	; (8003284 <_Z10Update_PIDv+0x298>)
 8003234:	601a      	str	r2, [r3, #0]

  Pitch_D_old = PID_Pitch_xw_diff;
 8003236:	4b02      	ldr	r3, [pc, #8]	; (8003240 <_Z10Update_PIDv+0x254>)
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	e025      	b.n	8003288 <_Z10Update_PIDv+0x29c>
 800323c:	20000500 	.word	0x20000500
 8003240:	200004a8 	.word	0x200004a8
 8003244:	20000524 	.word	0x20000524
 8003248:	2000050c 	.word	0x2000050c
 800324c:	200004ac 	.word	0x200004ac
 8003250:	20000528 	.word	0x20000528
 8003254:	20000518 	.word	0x20000518
 8003258:	200004b0 	.word	0x200004b0
 800325c:	2000052c 	.word	0x2000052c
 8003260:	43fa0000 	.word	0x43fa0000
 8003264:	c3fa0000 	.word	0xc3fa0000
 8003268:	41200000 	.word	0x41200000
 800326c:	20000530 	.word	0x20000530
 8003270:	42c80000 	.word	0x42c80000
 8003274:	200004b4 	.word	0x200004b4
 8003278:	20000534 	.word	0x20000534
 800327c:	200004b8 	.word	0x200004b8
 8003280:	20000538 	.word	0x20000538
 8003284:	200004bc 	.word	0x200004bc
 8003288:	4a2a      	ldr	r2, [pc, #168]	; (8003334 <_Z10Update_PIDv+0x348>)
 800328a:	6013      	str	r3, [r2, #0]
  Roll_D_old  = PID_Roll_xw_diff ;
 800328c:	4b2a      	ldr	r3, [pc, #168]	; (8003338 <_Z10Update_PIDv+0x34c>)
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	4a2a      	ldr	r2, [pc, #168]	; (800333c <_Z10Update_PIDv+0x350>)
 8003292:	6013      	str	r3, [r2, #0]
  Yaw_D_old   = PID_Yaw_xw_diff  ;
 8003294:	4b2a      	ldr	r3, [pc, #168]	; (8003340 <_Z10Update_PIDv+0x354>)
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	4a2a      	ldr	r2, [pc, #168]	; (8003344 <_Z10Update_PIDv+0x358>)
 800329a:	6013      	str	r3, [r2, #0]

  if (PID_Pitch_y > 500 ) PID_Pitch_y = 500 ;
 800329c:	4b2a      	ldr	r3, [pc, #168]	; (8003348 <_Z10Update_PIDv+0x35c>)
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	492a      	ldr	r1, [pc, #168]	; (800334c <_Z10Update_PIDv+0x360>)
 80032a2:	4618      	mov	r0, r3
 80032a4:	f7fd ff46 	bl	8001134 <__aeabi_fcmpgt>
 80032a8:	4603      	mov	r3, r0
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d002      	beq.n	80032b4 <_Z10Update_PIDv+0x2c8>
 80032ae:	4b26      	ldr	r3, [pc, #152]	; (8003348 <_Z10Update_PIDv+0x35c>)
 80032b0:	4a26      	ldr	r2, [pc, #152]	; (800334c <_Z10Update_PIDv+0x360>)
 80032b2:	601a      	str	r2, [r3, #0]
  if (PID_Roll_y  > 500 ) PID_Roll_y  = 500 ;
 80032b4:	4b26      	ldr	r3, [pc, #152]	; (8003350 <_Z10Update_PIDv+0x364>)
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	4924      	ldr	r1, [pc, #144]	; (800334c <_Z10Update_PIDv+0x360>)
 80032ba:	4618      	mov	r0, r3
 80032bc:	f7fd ff3a 	bl	8001134 <__aeabi_fcmpgt>
 80032c0:	4603      	mov	r3, r0
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d002      	beq.n	80032cc <_Z10Update_PIDv+0x2e0>
 80032c6:	4b22      	ldr	r3, [pc, #136]	; (8003350 <_Z10Update_PIDv+0x364>)
 80032c8:	4a20      	ldr	r2, [pc, #128]	; (800334c <_Z10Update_PIDv+0x360>)
 80032ca:	601a      	str	r2, [r3, #0]
  if (PID_Yaw_y   > 500 ) PID_Yaw_y   = 500 ;
 80032cc:	4b21      	ldr	r3, [pc, #132]	; (8003354 <_Z10Update_PIDv+0x368>)
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	491e      	ldr	r1, [pc, #120]	; (800334c <_Z10Update_PIDv+0x360>)
 80032d2:	4618      	mov	r0, r3
 80032d4:	f7fd ff2e 	bl	8001134 <__aeabi_fcmpgt>
 80032d8:	4603      	mov	r3, r0
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d002      	beq.n	80032e4 <_Z10Update_PIDv+0x2f8>
 80032de:	4b1d      	ldr	r3, [pc, #116]	; (8003354 <_Z10Update_PIDv+0x368>)
 80032e0:	4a1a      	ldr	r2, [pc, #104]	; (800334c <_Z10Update_PIDv+0x360>)
 80032e2:	601a      	str	r2, [r3, #0]
  if (PID_Pitch_y < -500) PID_Pitch_y = -500;
 80032e4:	4b18      	ldr	r3, [pc, #96]	; (8003348 <_Z10Update_PIDv+0x35c>)
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	491b      	ldr	r1, [pc, #108]	; (8003358 <_Z10Update_PIDv+0x36c>)
 80032ea:	4618      	mov	r0, r3
 80032ec:	f7fd ff04 	bl	80010f8 <__aeabi_fcmplt>
 80032f0:	4603      	mov	r3, r0
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d002      	beq.n	80032fc <_Z10Update_PIDv+0x310>
 80032f6:	4b14      	ldr	r3, [pc, #80]	; (8003348 <_Z10Update_PIDv+0x35c>)
 80032f8:	4a17      	ldr	r2, [pc, #92]	; (8003358 <_Z10Update_PIDv+0x36c>)
 80032fa:	601a      	str	r2, [r3, #0]
  if (PID_Roll_y  < -500) PID_Roll_y  = -500;
 80032fc:	4b14      	ldr	r3, [pc, #80]	; (8003350 <_Z10Update_PIDv+0x364>)
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	4915      	ldr	r1, [pc, #84]	; (8003358 <_Z10Update_PIDv+0x36c>)
 8003302:	4618      	mov	r0, r3
 8003304:	f7fd fef8 	bl	80010f8 <__aeabi_fcmplt>
 8003308:	4603      	mov	r3, r0
 800330a:	2b00      	cmp	r3, #0
 800330c:	d002      	beq.n	8003314 <_Z10Update_PIDv+0x328>
 800330e:	4b10      	ldr	r3, [pc, #64]	; (8003350 <_Z10Update_PIDv+0x364>)
 8003310:	4a11      	ldr	r2, [pc, #68]	; (8003358 <_Z10Update_PIDv+0x36c>)
 8003312:	601a      	str	r2, [r3, #0]
  if (PID_Yaw_y   < -500) PID_Yaw_y   = -500;
 8003314:	4b0f      	ldr	r3, [pc, #60]	; (8003354 <_Z10Update_PIDv+0x368>)
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	490f      	ldr	r1, [pc, #60]	; (8003358 <_Z10Update_PIDv+0x36c>)
 800331a:	4618      	mov	r0, r3
 800331c:	f7fd feec 	bl	80010f8 <__aeabi_fcmplt>
 8003320:	4603      	mov	r3, r0
 8003322:	2b00      	cmp	r3, #0
 8003324:	d100      	bne.n	8003328 <_Z10Update_PIDv+0x33c>
}
 8003326:	e002      	b.n	800332e <_Z10Update_PIDv+0x342>
  if (PID_Yaw_y   < -500) PID_Yaw_y   = -500;
 8003328:	4b0a      	ldr	r3, [pc, #40]	; (8003354 <_Z10Update_PIDv+0x368>)
 800332a:	4a0b      	ldr	r2, [pc, #44]	; (8003358 <_Z10Update_PIDv+0x36c>)
 800332c:	601a      	str	r2, [r3, #0]
}
 800332e:	bf00      	nop
 8003330:	bd98      	pop	{r3, r4, r7, pc}
 8003332:	bf00      	nop
 8003334:	20000530 	.word	0x20000530
 8003338:	200004ac 	.word	0x200004ac
 800333c:	20000534 	.word	0x20000534
 8003340:	200004b0 	.word	0x200004b0
 8003344:	20000538 	.word	0x20000538
 8003348:	200004b4 	.word	0x200004b4
 800334c:	43fa0000 	.word	0x43fa0000
 8003350:	200004b8 	.word	0x200004b8
 8003354:	200004bc 	.word	0x200004bc
 8003358:	c3fa0000 	.word	0xc3fa0000

0800335c <_Z12getPIDValuesv>:

void getPIDValues()
{
 800335c:	b580      	push	{r7, lr}
 800335e:	af00      	add	r7, sp, #0
  switch (SBUS_Channels[5])
 8003360:	4b7a      	ldr	r3, [pc, #488]	; (800354c <_Z12getPIDValuesv+0x1f0>)
 8003362:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8003366:	4a7a      	ldr	r2, [pc, #488]	; (8003550 <_Z12getPIDValuesv+0x1f4>)
 8003368:	4293      	cmp	r3, r2
 800336a:	d005      	beq.n	8003378 <_Z12getPIDValuesv+0x1c>
 800336c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003370:	4293      	cmp	r3, r2
 8003372:	f000 809b 	beq.w	80034ac <_Z12getPIDValuesv+0x150>
 8003376:	e04c      	b.n	8003412 <_Z12getPIDValuesv+0xb6>
  {
  case -999:   //Pitch
    switch (SBUS_Channels[6])
 8003378:	4b74      	ldr	r3, [pc, #464]	; (800354c <_Z12getPIDValuesv+0x1f0>)
 800337a:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 800337e:	4a74      	ldr	r2, [pc, #464]	; (8003550 <_Z12getPIDValuesv+0x1f4>)
 8003380:	4293      	cmp	r3, r2
 8003382:	d02f      	beq.n	80033e4 <_Z12getPIDValuesv+0x88>
 8003384:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003388:	4293      	cmp	r3, r2
 800338a:	d115      	bne.n	80033b8 <_Z12getPIDValuesv+0x5c>
    {
    case 999:   //P
      Pitch_PID_k[0] = 0.5 + ((float)SBUS_Channels[7] / 2000);
 800338c:	4b6f      	ldr	r3, [pc, #444]	; (800354c <_Z12getPIDValuesv+0x1f0>)
 800338e:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8003392:	4618      	mov	r0, r3
 8003394:	f7fd fcbe 	bl	8000d14 <__aeabi_i2f>
 8003398:	4603      	mov	r3, r0
 800339a:	496e      	ldr	r1, [pc, #440]	; (8003554 <_Z12getPIDValuesv+0x1f8>)
 800339c:	4618      	mov	r0, r3
 800339e:	f7fd fdc1 	bl	8000f24 <__aeabi_fdiv>
 80033a2:	4603      	mov	r3, r0
 80033a4:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 80033a8:	4618      	mov	r0, r3
 80033aa:	f7fd fbff 	bl	8000bac <__addsf3>
 80033ae:	4603      	mov	r3, r0
 80033b0:	461a      	mov	r2, r3
 80033b2:	4b69      	ldr	r3, [pc, #420]	; (8003558 <_Z12getPIDValuesv+0x1fc>)
 80033b4:	601a      	str	r2, [r3, #0]
      break;
 80033b6:	e02b      	b.n	8003410 <_Z12getPIDValuesv+0xb4>
    default:     //I
      Pitch_PID_k[1] = 0.5 + ((float)SBUS_Channels[7] / 2000);
 80033b8:	4b64      	ldr	r3, [pc, #400]	; (800354c <_Z12getPIDValuesv+0x1f0>)
 80033ba:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80033be:	4618      	mov	r0, r3
 80033c0:	f7fd fca8 	bl	8000d14 <__aeabi_i2f>
 80033c4:	4603      	mov	r3, r0
 80033c6:	4963      	ldr	r1, [pc, #396]	; (8003554 <_Z12getPIDValuesv+0x1f8>)
 80033c8:	4618      	mov	r0, r3
 80033ca:	f7fd fdab 	bl	8000f24 <__aeabi_fdiv>
 80033ce:	4603      	mov	r3, r0
 80033d0:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 80033d4:	4618      	mov	r0, r3
 80033d6:	f7fd fbe9 	bl	8000bac <__addsf3>
 80033da:	4603      	mov	r3, r0
 80033dc:	461a      	mov	r2, r3
 80033de:	4b5e      	ldr	r3, [pc, #376]	; (8003558 <_Z12getPIDValuesv+0x1fc>)
 80033e0:	605a      	str	r2, [r3, #4]
      break;
 80033e2:	e015      	b.n	8003410 <_Z12getPIDValuesv+0xb4>
    case -999:  //D
      Pitch_PID_k[2] = 0.5 + ((float)SBUS_Channels[7] / 2000);
 80033e4:	4b59      	ldr	r3, [pc, #356]	; (800354c <_Z12getPIDValuesv+0x1f0>)
 80033e6:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80033ea:	4618      	mov	r0, r3
 80033ec:	f7fd fc92 	bl	8000d14 <__aeabi_i2f>
 80033f0:	4603      	mov	r3, r0
 80033f2:	4958      	ldr	r1, [pc, #352]	; (8003554 <_Z12getPIDValuesv+0x1f8>)
 80033f4:	4618      	mov	r0, r3
 80033f6:	f7fd fd95 	bl	8000f24 <__aeabi_fdiv>
 80033fa:	4603      	mov	r3, r0
 80033fc:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8003400:	4618      	mov	r0, r3
 8003402:	f7fd fbd3 	bl	8000bac <__addsf3>
 8003406:	4603      	mov	r3, r0
 8003408:	461a      	mov	r2, r3
 800340a:	4b53      	ldr	r3, [pc, #332]	; (8003558 <_Z12getPIDValuesv+0x1fc>)
 800340c:	609a      	str	r2, [r3, #8]
      break;
 800340e:	bf00      	nop
  }
    break;
 8003410:	e099      	b.n	8003546 <_Z12getPIDValuesv+0x1ea>
  default:     //Roll
    switch (SBUS_Channels[6])
 8003412:	4b4e      	ldr	r3, [pc, #312]	; (800354c <_Z12getPIDValuesv+0x1f0>)
 8003414:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8003418:	4a4d      	ldr	r2, [pc, #308]	; (8003550 <_Z12getPIDValuesv+0x1f4>)
 800341a:	4293      	cmp	r3, r2
 800341c:	d02f      	beq.n	800347e <_Z12getPIDValuesv+0x122>
 800341e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003422:	4293      	cmp	r3, r2
 8003424:	d115      	bne.n	8003452 <_Z12getPIDValuesv+0xf6>
    {
    case 999:   //P
      Roll_PID_k[0] = 0.5 + ((float)SBUS_Channels[7] / 2000);
 8003426:	4b49      	ldr	r3, [pc, #292]	; (800354c <_Z12getPIDValuesv+0x1f0>)
 8003428:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800342c:	4618      	mov	r0, r3
 800342e:	f7fd fc71 	bl	8000d14 <__aeabi_i2f>
 8003432:	4603      	mov	r3, r0
 8003434:	4947      	ldr	r1, [pc, #284]	; (8003554 <_Z12getPIDValuesv+0x1f8>)
 8003436:	4618      	mov	r0, r3
 8003438:	f7fd fd74 	bl	8000f24 <__aeabi_fdiv>
 800343c:	4603      	mov	r3, r0
 800343e:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8003442:	4618      	mov	r0, r3
 8003444:	f7fd fbb2 	bl	8000bac <__addsf3>
 8003448:	4603      	mov	r3, r0
 800344a:	461a      	mov	r2, r3
 800344c:	4b43      	ldr	r3, [pc, #268]	; (800355c <_Z12getPIDValuesv+0x200>)
 800344e:	601a      	str	r2, [r3, #0]
      break;
 8003450:	e02b      	b.n	80034aa <_Z12getPIDValuesv+0x14e>
    default:     //I
      Roll_PID_k[1] = 0.5 + ((float)SBUS_Channels[7] / 2000);
 8003452:	4b3e      	ldr	r3, [pc, #248]	; (800354c <_Z12getPIDValuesv+0x1f0>)
 8003454:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8003458:	4618      	mov	r0, r3
 800345a:	f7fd fc5b 	bl	8000d14 <__aeabi_i2f>
 800345e:	4603      	mov	r3, r0
 8003460:	493c      	ldr	r1, [pc, #240]	; (8003554 <_Z12getPIDValuesv+0x1f8>)
 8003462:	4618      	mov	r0, r3
 8003464:	f7fd fd5e 	bl	8000f24 <__aeabi_fdiv>
 8003468:	4603      	mov	r3, r0
 800346a:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800346e:	4618      	mov	r0, r3
 8003470:	f7fd fb9c 	bl	8000bac <__addsf3>
 8003474:	4603      	mov	r3, r0
 8003476:	461a      	mov	r2, r3
 8003478:	4b38      	ldr	r3, [pc, #224]	; (800355c <_Z12getPIDValuesv+0x200>)
 800347a:	605a      	str	r2, [r3, #4]
      break;
 800347c:	e015      	b.n	80034aa <_Z12getPIDValuesv+0x14e>
    case -999:  //D
      Roll_PID_k[2] = 0.5 + ((float)SBUS_Channels[7] / 2000);
 800347e:	4b33      	ldr	r3, [pc, #204]	; (800354c <_Z12getPIDValuesv+0x1f0>)
 8003480:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8003484:	4618      	mov	r0, r3
 8003486:	f7fd fc45 	bl	8000d14 <__aeabi_i2f>
 800348a:	4603      	mov	r3, r0
 800348c:	4931      	ldr	r1, [pc, #196]	; (8003554 <_Z12getPIDValuesv+0x1f8>)
 800348e:	4618      	mov	r0, r3
 8003490:	f7fd fd48 	bl	8000f24 <__aeabi_fdiv>
 8003494:	4603      	mov	r3, r0
 8003496:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800349a:	4618      	mov	r0, r3
 800349c:	f7fd fb86 	bl	8000bac <__addsf3>
 80034a0:	4603      	mov	r3, r0
 80034a2:	461a      	mov	r2, r3
 80034a4:	4b2d      	ldr	r3, [pc, #180]	; (800355c <_Z12getPIDValuesv+0x200>)
 80034a6:	609a      	str	r2, [r3, #8]
      break;
 80034a8:	bf00      	nop
  }
    break;
 80034aa:	e04c      	b.n	8003546 <_Z12getPIDValuesv+0x1ea>
  case 999:  //Yaw
    switch (SBUS_Channels[6])
 80034ac:	4b27      	ldr	r3, [pc, #156]	; (800354c <_Z12getPIDValuesv+0x1f0>)
 80034ae:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80034b2:	4a27      	ldr	r2, [pc, #156]	; (8003550 <_Z12getPIDValuesv+0x1f4>)
 80034b4:	4293      	cmp	r3, r2
 80034b6:	d02f      	beq.n	8003518 <_Z12getPIDValuesv+0x1bc>
 80034b8:	f240 32e7 	movw	r2, #999	; 0x3e7
 80034bc:	4293      	cmp	r3, r2
 80034be:	d115      	bne.n	80034ec <_Z12getPIDValuesv+0x190>
    {
    case 999:   //P
      Yaw_PID_k[0] = 0.5 + ((float)SBUS_Channels[7] / 2000);
 80034c0:	4b22      	ldr	r3, [pc, #136]	; (800354c <_Z12getPIDValuesv+0x1f0>)
 80034c2:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80034c6:	4618      	mov	r0, r3
 80034c8:	f7fd fc24 	bl	8000d14 <__aeabi_i2f>
 80034cc:	4603      	mov	r3, r0
 80034ce:	4921      	ldr	r1, [pc, #132]	; (8003554 <_Z12getPIDValuesv+0x1f8>)
 80034d0:	4618      	mov	r0, r3
 80034d2:	f7fd fd27 	bl	8000f24 <__aeabi_fdiv>
 80034d6:	4603      	mov	r3, r0
 80034d8:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 80034dc:	4618      	mov	r0, r3
 80034de:	f7fd fb65 	bl	8000bac <__addsf3>
 80034e2:	4603      	mov	r3, r0
 80034e4:	461a      	mov	r2, r3
 80034e6:	4b1e      	ldr	r3, [pc, #120]	; (8003560 <_Z12getPIDValuesv+0x204>)
 80034e8:	601a      	str	r2, [r3, #0]
      break;
 80034ea:	e02b      	b.n	8003544 <_Z12getPIDValuesv+0x1e8>
    default:     //I
      Yaw_PID_k[1] = 0.5 + ((float)SBUS_Channels[7] / 2000);
 80034ec:	4b17      	ldr	r3, [pc, #92]	; (800354c <_Z12getPIDValuesv+0x1f0>)
 80034ee:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80034f2:	4618      	mov	r0, r3
 80034f4:	f7fd fc0e 	bl	8000d14 <__aeabi_i2f>
 80034f8:	4603      	mov	r3, r0
 80034fa:	4916      	ldr	r1, [pc, #88]	; (8003554 <_Z12getPIDValuesv+0x1f8>)
 80034fc:	4618      	mov	r0, r3
 80034fe:	f7fd fd11 	bl	8000f24 <__aeabi_fdiv>
 8003502:	4603      	mov	r3, r0
 8003504:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8003508:	4618      	mov	r0, r3
 800350a:	f7fd fb4f 	bl	8000bac <__addsf3>
 800350e:	4603      	mov	r3, r0
 8003510:	461a      	mov	r2, r3
 8003512:	4b13      	ldr	r3, [pc, #76]	; (8003560 <_Z12getPIDValuesv+0x204>)
 8003514:	605a      	str	r2, [r3, #4]
      break;
 8003516:	e015      	b.n	8003544 <_Z12getPIDValuesv+0x1e8>
    case -999:  //D
      Yaw_PID_k[2] = 0.5 + ((float)SBUS_Channels[7] / 2000);
 8003518:	4b0c      	ldr	r3, [pc, #48]	; (800354c <_Z12getPIDValuesv+0x1f0>)
 800351a:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800351e:	4618      	mov	r0, r3
 8003520:	f7fd fbf8 	bl	8000d14 <__aeabi_i2f>
 8003524:	4603      	mov	r3, r0
 8003526:	490b      	ldr	r1, [pc, #44]	; (8003554 <_Z12getPIDValuesv+0x1f8>)
 8003528:	4618      	mov	r0, r3
 800352a:	f7fd fcfb 	bl	8000f24 <__aeabi_fdiv>
 800352e:	4603      	mov	r3, r0
 8003530:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8003534:	4618      	mov	r0, r3
 8003536:	f7fd fb39 	bl	8000bac <__addsf3>
 800353a:	4603      	mov	r3, r0
 800353c:	461a      	mov	r2, r3
 800353e:	4b08      	ldr	r3, [pc, #32]	; (8003560 <_Z12getPIDValuesv+0x204>)
 8003540:	609a      	str	r2, [r3, #8]
      break;
 8003542:	bf00      	nop
    }
    break;
 8003544:	bf00      	nop
  }
}
 8003546:	bf00      	nop
 8003548:	bd80      	pop	{r7, pc}
 800354a:	bf00      	nop
 800354c:	200006c8 	.word	0x200006c8
 8003550:	fffffc19 	.word	0xfffffc19
 8003554:	44fa0000 	.word	0x44fa0000
 8003558:	20000500 	.word	0x20000500
 800355c:	2000050c 	.word	0x2000050c
 8003560:	20000518 	.word	0x20000518

08003564 <_Z27MPU6050_GetOriginQuaternionv>:

void MPU6050_GetOriginQuaternion()
{
 8003564:	b480      	push	{r7}
 8003566:	af00      	add	r7, sp, #0
  OriginQuaternion[0] = MPUoutputQuaternion[0];
 8003568:	4b09      	ldr	r3, [pc, #36]	; (8003590 <_Z27MPU6050_GetOriginQuaternionv+0x2c>)
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	4a09      	ldr	r2, [pc, #36]	; (8003594 <_Z27MPU6050_GetOriginQuaternionv+0x30>)
 800356e:	6013      	str	r3, [r2, #0]
  OriginQuaternion[1] = MPUoutputQuaternion[1];
 8003570:	4b07      	ldr	r3, [pc, #28]	; (8003590 <_Z27MPU6050_GetOriginQuaternionv+0x2c>)
 8003572:	685b      	ldr	r3, [r3, #4]
 8003574:	4a07      	ldr	r2, [pc, #28]	; (8003594 <_Z27MPU6050_GetOriginQuaternionv+0x30>)
 8003576:	6053      	str	r3, [r2, #4]
  OriginQuaternion[2] = MPUoutputQuaternion[2];
 8003578:	4b05      	ldr	r3, [pc, #20]	; (8003590 <_Z27MPU6050_GetOriginQuaternionv+0x2c>)
 800357a:	689b      	ldr	r3, [r3, #8]
 800357c:	4a05      	ldr	r2, [pc, #20]	; (8003594 <_Z27MPU6050_GetOriginQuaternionv+0x30>)
 800357e:	6093      	str	r3, [r2, #8]
  OriginQuaternion[3] = MPUoutputQuaternion[3];
 8003580:	4b03      	ldr	r3, [pc, #12]	; (8003590 <_Z27MPU6050_GetOriginQuaternionv+0x2c>)
 8003582:	68db      	ldr	r3, [r3, #12]
 8003584:	4a03      	ldr	r2, [pc, #12]	; (8003594 <_Z27MPU6050_GetOriginQuaternionv+0x30>)
 8003586:	60d3      	str	r3, [r2, #12]
}
 8003588:	bf00      	nop
 800358a:	46bd      	mov	sp, r7
 800358c:	bc80      	pop	{r7}
 800358e:	4770      	bx	lr
 8003590:	200004c0 	.word	0x200004c0
 8003594:	200004d0 	.word	0x200004d0

08003598 <_Z17QuaternionProductPfS_>:
 * @param q1 first Quaternion
 * @param q2 second Quaternion
 * @return float product-Quaternion
 */
float *QuaternionProduct(float *q1, float *q2)
{
 8003598:	b590      	push	{r4, r7, lr}
 800359a:	b083      	sub	sp, #12
 800359c:	af00      	add	r7, sp, #0
 800359e:	6078      	str	r0, [r7, #4]
 80035a0:	6039      	str	r1, [r7, #0]
  static float q3[4];
  q3[0] = (q1[0] * q2[0]) - (q1[1] * q2[1]) - (q1[2] * q2[2]) - (q1[3] * q2[3]);
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681a      	ldr	r2, [r3, #0]
 80035a6:	683b      	ldr	r3, [r7, #0]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	4619      	mov	r1, r3
 80035ac:	4610      	mov	r0, r2
 80035ae:	f7fd fc05 	bl	8000dbc <__aeabi_fmul>
 80035b2:	4603      	mov	r3, r0
 80035b4:	461c      	mov	r4, r3
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	3304      	adds	r3, #4
 80035ba:	681a      	ldr	r2, [r3, #0]
 80035bc:	683b      	ldr	r3, [r7, #0]
 80035be:	3304      	adds	r3, #4
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	4619      	mov	r1, r3
 80035c4:	4610      	mov	r0, r2
 80035c6:	f7fd fbf9 	bl	8000dbc <__aeabi_fmul>
 80035ca:	4603      	mov	r3, r0
 80035cc:	4619      	mov	r1, r3
 80035ce:	4620      	mov	r0, r4
 80035d0:	f7fd faea 	bl	8000ba8 <__aeabi_fsub>
 80035d4:	4603      	mov	r3, r0
 80035d6:	461c      	mov	r4, r3
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	3308      	adds	r3, #8
 80035dc:	681a      	ldr	r2, [r3, #0]
 80035de:	683b      	ldr	r3, [r7, #0]
 80035e0:	3308      	adds	r3, #8
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	4619      	mov	r1, r3
 80035e6:	4610      	mov	r0, r2
 80035e8:	f7fd fbe8 	bl	8000dbc <__aeabi_fmul>
 80035ec:	4603      	mov	r3, r0
 80035ee:	4619      	mov	r1, r3
 80035f0:	4620      	mov	r0, r4
 80035f2:	f7fd fad9 	bl	8000ba8 <__aeabi_fsub>
 80035f6:	4603      	mov	r3, r0
 80035f8:	461c      	mov	r4, r3
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	330c      	adds	r3, #12
 80035fe:	681a      	ldr	r2, [r3, #0]
 8003600:	683b      	ldr	r3, [r7, #0]
 8003602:	330c      	adds	r3, #12
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	4619      	mov	r1, r3
 8003608:	4610      	mov	r0, r2
 800360a:	f7fd fbd7 	bl	8000dbc <__aeabi_fmul>
 800360e:	4603      	mov	r3, r0
 8003610:	4619      	mov	r1, r3
 8003612:	4620      	mov	r0, r4
 8003614:	f7fd fac8 	bl	8000ba8 <__aeabi_fsub>
 8003618:	4603      	mov	r3, r0
 800361a:	461a      	mov	r2, r3
 800361c:	4b61      	ldr	r3, [pc, #388]	; (80037a4 <_Z17QuaternionProductPfS_+0x20c>)
 800361e:	601a      	str	r2, [r3, #0]
  q3[1] = (q1[0] * q2[1]) + (q1[1] * q2[0]) + (q1[2] * q2[3]) - (q1[3] * q2[2]);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681a      	ldr	r2, [r3, #0]
 8003624:	683b      	ldr	r3, [r7, #0]
 8003626:	3304      	adds	r3, #4
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	4619      	mov	r1, r3
 800362c:	4610      	mov	r0, r2
 800362e:	f7fd fbc5 	bl	8000dbc <__aeabi_fmul>
 8003632:	4603      	mov	r3, r0
 8003634:	461c      	mov	r4, r3
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	3304      	adds	r3, #4
 800363a:	681a      	ldr	r2, [r3, #0]
 800363c:	683b      	ldr	r3, [r7, #0]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	4619      	mov	r1, r3
 8003642:	4610      	mov	r0, r2
 8003644:	f7fd fbba 	bl	8000dbc <__aeabi_fmul>
 8003648:	4603      	mov	r3, r0
 800364a:	4619      	mov	r1, r3
 800364c:	4620      	mov	r0, r4
 800364e:	f7fd faad 	bl	8000bac <__addsf3>
 8003652:	4603      	mov	r3, r0
 8003654:	461c      	mov	r4, r3
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	3308      	adds	r3, #8
 800365a:	681a      	ldr	r2, [r3, #0]
 800365c:	683b      	ldr	r3, [r7, #0]
 800365e:	330c      	adds	r3, #12
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	4619      	mov	r1, r3
 8003664:	4610      	mov	r0, r2
 8003666:	f7fd fba9 	bl	8000dbc <__aeabi_fmul>
 800366a:	4603      	mov	r3, r0
 800366c:	4619      	mov	r1, r3
 800366e:	4620      	mov	r0, r4
 8003670:	f7fd fa9c 	bl	8000bac <__addsf3>
 8003674:	4603      	mov	r3, r0
 8003676:	461c      	mov	r4, r3
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	330c      	adds	r3, #12
 800367c:	681a      	ldr	r2, [r3, #0]
 800367e:	683b      	ldr	r3, [r7, #0]
 8003680:	3308      	adds	r3, #8
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	4619      	mov	r1, r3
 8003686:	4610      	mov	r0, r2
 8003688:	f7fd fb98 	bl	8000dbc <__aeabi_fmul>
 800368c:	4603      	mov	r3, r0
 800368e:	4619      	mov	r1, r3
 8003690:	4620      	mov	r0, r4
 8003692:	f7fd fa89 	bl	8000ba8 <__aeabi_fsub>
 8003696:	4603      	mov	r3, r0
 8003698:	461a      	mov	r2, r3
 800369a:	4b42      	ldr	r3, [pc, #264]	; (80037a4 <_Z17QuaternionProductPfS_+0x20c>)
 800369c:	605a      	str	r2, [r3, #4]
  q3[2] = (q1[0] * q2[2]) - (q1[1] * q2[3]) + (q1[2] * q2[0]) + (q1[3] * q2[1]);
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681a      	ldr	r2, [r3, #0]
 80036a2:	683b      	ldr	r3, [r7, #0]
 80036a4:	3308      	adds	r3, #8
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	4619      	mov	r1, r3
 80036aa:	4610      	mov	r0, r2
 80036ac:	f7fd fb86 	bl	8000dbc <__aeabi_fmul>
 80036b0:	4603      	mov	r3, r0
 80036b2:	461c      	mov	r4, r3
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	3304      	adds	r3, #4
 80036b8:	681a      	ldr	r2, [r3, #0]
 80036ba:	683b      	ldr	r3, [r7, #0]
 80036bc:	330c      	adds	r3, #12
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	4619      	mov	r1, r3
 80036c2:	4610      	mov	r0, r2
 80036c4:	f7fd fb7a 	bl	8000dbc <__aeabi_fmul>
 80036c8:	4603      	mov	r3, r0
 80036ca:	4619      	mov	r1, r3
 80036cc:	4620      	mov	r0, r4
 80036ce:	f7fd fa6b 	bl	8000ba8 <__aeabi_fsub>
 80036d2:	4603      	mov	r3, r0
 80036d4:	461c      	mov	r4, r3
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	3308      	adds	r3, #8
 80036da:	681a      	ldr	r2, [r3, #0]
 80036dc:	683b      	ldr	r3, [r7, #0]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	4619      	mov	r1, r3
 80036e2:	4610      	mov	r0, r2
 80036e4:	f7fd fb6a 	bl	8000dbc <__aeabi_fmul>
 80036e8:	4603      	mov	r3, r0
 80036ea:	4619      	mov	r1, r3
 80036ec:	4620      	mov	r0, r4
 80036ee:	f7fd fa5d 	bl	8000bac <__addsf3>
 80036f2:	4603      	mov	r3, r0
 80036f4:	461c      	mov	r4, r3
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	330c      	adds	r3, #12
 80036fa:	681a      	ldr	r2, [r3, #0]
 80036fc:	683b      	ldr	r3, [r7, #0]
 80036fe:	3304      	adds	r3, #4
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	4619      	mov	r1, r3
 8003704:	4610      	mov	r0, r2
 8003706:	f7fd fb59 	bl	8000dbc <__aeabi_fmul>
 800370a:	4603      	mov	r3, r0
 800370c:	4619      	mov	r1, r3
 800370e:	4620      	mov	r0, r4
 8003710:	f7fd fa4c 	bl	8000bac <__addsf3>
 8003714:	4603      	mov	r3, r0
 8003716:	461a      	mov	r2, r3
 8003718:	4b22      	ldr	r3, [pc, #136]	; (80037a4 <_Z17QuaternionProductPfS_+0x20c>)
 800371a:	609a      	str	r2, [r3, #8]
  q3[3] = (q1[0] * q2[3]) + (q1[1] * q2[2]) - (q1[2] * q2[1]) + (q1[3] * q2[0]);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681a      	ldr	r2, [r3, #0]
 8003720:	683b      	ldr	r3, [r7, #0]
 8003722:	330c      	adds	r3, #12
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	4619      	mov	r1, r3
 8003728:	4610      	mov	r0, r2
 800372a:	f7fd fb47 	bl	8000dbc <__aeabi_fmul>
 800372e:	4603      	mov	r3, r0
 8003730:	461c      	mov	r4, r3
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	3304      	adds	r3, #4
 8003736:	681a      	ldr	r2, [r3, #0]
 8003738:	683b      	ldr	r3, [r7, #0]
 800373a:	3308      	adds	r3, #8
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	4619      	mov	r1, r3
 8003740:	4610      	mov	r0, r2
 8003742:	f7fd fb3b 	bl	8000dbc <__aeabi_fmul>
 8003746:	4603      	mov	r3, r0
 8003748:	4619      	mov	r1, r3
 800374a:	4620      	mov	r0, r4
 800374c:	f7fd fa2e 	bl	8000bac <__addsf3>
 8003750:	4603      	mov	r3, r0
 8003752:	461c      	mov	r4, r3
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	3308      	adds	r3, #8
 8003758:	681a      	ldr	r2, [r3, #0]
 800375a:	683b      	ldr	r3, [r7, #0]
 800375c:	3304      	adds	r3, #4
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	4619      	mov	r1, r3
 8003762:	4610      	mov	r0, r2
 8003764:	f7fd fb2a 	bl	8000dbc <__aeabi_fmul>
 8003768:	4603      	mov	r3, r0
 800376a:	4619      	mov	r1, r3
 800376c:	4620      	mov	r0, r4
 800376e:	f7fd fa1b 	bl	8000ba8 <__aeabi_fsub>
 8003772:	4603      	mov	r3, r0
 8003774:	461c      	mov	r4, r3
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	330c      	adds	r3, #12
 800377a:	681a      	ldr	r2, [r3, #0]
 800377c:	683b      	ldr	r3, [r7, #0]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	4619      	mov	r1, r3
 8003782:	4610      	mov	r0, r2
 8003784:	f7fd fb1a 	bl	8000dbc <__aeabi_fmul>
 8003788:	4603      	mov	r3, r0
 800378a:	4619      	mov	r1, r3
 800378c:	4620      	mov	r0, r4
 800378e:	f7fd fa0d 	bl	8000bac <__addsf3>
 8003792:	4603      	mov	r3, r0
 8003794:	461a      	mov	r2, r3
 8003796:	4b03      	ldr	r3, [pc, #12]	; (80037a4 <_Z17QuaternionProductPfS_+0x20c>)
 8003798:	60da      	str	r2, [r3, #12]
  return q3;
 800379a:	4b02      	ldr	r3, [pc, #8]	; (80037a4 <_Z17QuaternionProductPfS_+0x20c>)
}
 800379c:	4618      	mov	r0, r3
 800379e:	370c      	adds	r7, #12
 80037a0:	46bd      	mov	sp, r7
 80037a2:	bd90      	pop	{r4, r7, pc}
 80037a4:	2000053c 	.word	0x2000053c

080037a8 <_Z17QuaternionInversePf>:
 * 
 * @param q1 quaternion to be inversed
 * @return float inverse Quaternion
 */
float *QuaternionInverse(float *q1)
{
 80037a8:	b480      	push	{r7}
 80037aa:	b083      	sub	sp, #12
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	6078      	str	r0, [r7, #4]
  static float qi[4];
  qi[0] = q1[0];
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	4a0e      	ldr	r2, [pc, #56]	; (80037f0 <_Z17QuaternionInversePf+0x48>)
 80037b6:	6013      	str	r3, [r2, #0]
  qi[1] = q1[1] * -1;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	3304      	adds	r3, #4
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80037c2:	4a0b      	ldr	r2, [pc, #44]	; (80037f0 <_Z17QuaternionInversePf+0x48>)
 80037c4:	6053      	str	r3, [r2, #4]
  qi[2] = q1[2] * -1;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	3308      	adds	r3, #8
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80037d0:	4a07      	ldr	r2, [pc, #28]	; (80037f0 <_Z17QuaternionInversePf+0x48>)
 80037d2:	6093      	str	r3, [r2, #8]
  qi[3] = q1[3] * -1;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	330c      	adds	r3, #12
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80037de:	4a04      	ldr	r2, [pc, #16]	; (80037f0 <_Z17QuaternionInversePf+0x48>)
 80037e0:	60d3      	str	r3, [r2, #12]
  return qi;
 80037e2:	4b03      	ldr	r3, [pc, #12]	; (80037f0 <_Z17QuaternionInversePf+0x48>)
}
 80037e4:	4618      	mov	r0, r3
 80037e6:	370c      	adds	r7, #12
 80037e8:	46bd      	mov	sp, r7
 80037ea:	bc80      	pop	{r7}
 80037ec:	4770      	bx	lr
 80037ee:	bf00      	nop
 80037f0:	2000054c 	.word	0x2000054c

080037f4 <_Z15QuaternionSLERPPfS_>:
 * @param q1 start quaternion
 * @param q2 end quaternion
 * @return float interpolation quaternion
 */
float * QuaternionSLERP(float *q1, float *q2)
{
 80037f4:	b580      	push	{r7, lr}
 80037f6:	b082      	sub	sp, #8
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	6078      	str	r0, [r7, #4]
 80037fc:	6039      	str	r1, [r7, #0]
  return QuaternionProduct(&q2[0], QuaternionInverse(&q1[0]));
 80037fe:	6878      	ldr	r0, [r7, #4]
 8003800:	f7ff ffd2 	bl	80037a8 <_Z17QuaternionInversePf>
 8003804:	4603      	mov	r3, r0
 8003806:	4619      	mov	r1, r3
 8003808:	6838      	ldr	r0, [r7, #0]
 800380a:	f7ff fec5 	bl	8003598 <_Z17QuaternionProductPfS_>
 800380e:	4603      	mov	r3, r0
}
 8003810:	4618      	mov	r0, r3
 8003812:	3708      	adds	r7, #8
 8003814:	46bd      	mov	sp, r7
 8003816:	bd80      	pop	{r7, pc}

08003818 <_Z19QuaternionNormalizePf>:
 * 
 * @param q1 quaternion to be normalized
 * @return float* pointer to normalized quaternion
 */
float *QuaternionNormalize(float *q1)
{
 8003818:	b590      	push	{r4, r7, lr}
 800381a:	b085      	sub	sp, #20
 800381c:	af00      	add	r7, sp, #0
 800381e:	6078      	str	r0, [r7, #4]
  float vectorlength = sqrt((q1[0] * q1[0]) + (q1[1] * q1[1]) + (q1[2] * q1[2]) + (q1[3] * q1[3]));
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681a      	ldr	r2, [r3, #0]
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	4619      	mov	r1, r3
 800382a:	4610      	mov	r0, r2
 800382c:	f7fd fac6 	bl	8000dbc <__aeabi_fmul>
 8003830:	4603      	mov	r3, r0
 8003832:	461c      	mov	r4, r3
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	3304      	adds	r3, #4
 8003838:	681a      	ldr	r2, [r3, #0]
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	3304      	adds	r3, #4
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	4619      	mov	r1, r3
 8003842:	4610      	mov	r0, r2
 8003844:	f7fd faba 	bl	8000dbc <__aeabi_fmul>
 8003848:	4603      	mov	r3, r0
 800384a:	4619      	mov	r1, r3
 800384c:	4620      	mov	r0, r4
 800384e:	f7fd f9ad 	bl	8000bac <__addsf3>
 8003852:	4603      	mov	r3, r0
 8003854:	461c      	mov	r4, r3
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	3308      	adds	r3, #8
 800385a:	681a      	ldr	r2, [r3, #0]
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	3308      	adds	r3, #8
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	4619      	mov	r1, r3
 8003864:	4610      	mov	r0, r2
 8003866:	f7fd faa9 	bl	8000dbc <__aeabi_fmul>
 800386a:	4603      	mov	r3, r0
 800386c:	4619      	mov	r1, r3
 800386e:	4620      	mov	r0, r4
 8003870:	f7fd f99c 	bl	8000bac <__addsf3>
 8003874:	4603      	mov	r3, r0
 8003876:	461c      	mov	r4, r3
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	330c      	adds	r3, #12
 800387c:	681a      	ldr	r2, [r3, #0]
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	330c      	adds	r3, #12
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	4619      	mov	r1, r3
 8003886:	4610      	mov	r0, r2
 8003888:	f7fd fa98 	bl	8000dbc <__aeabi_fmul>
 800388c:	4603      	mov	r3, r0
 800388e:	4619      	mov	r1, r3
 8003890:	4620      	mov	r0, r4
 8003892:	f7fd f98b 	bl	8000bac <__addsf3>
 8003896:	4603      	mov	r3, r0
 8003898:	4618      	mov	r0, r3
 800389a:	f7ff fa55 	bl	8002d48 <_ZSt4sqrtf>
 800389e:	60f8      	str	r0, [r7, #12]
  static float qn[4];
  qn[0] = q1[0] / vectorlength;
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	68f9      	ldr	r1, [r7, #12]
 80038a6:	4618      	mov	r0, r3
 80038a8:	f7fd fb3c 	bl	8000f24 <__aeabi_fdiv>
 80038ac:	4603      	mov	r3, r0
 80038ae:	461a      	mov	r2, r3
 80038b0:	4b13      	ldr	r3, [pc, #76]	; (8003900 <_Z19QuaternionNormalizePf+0xe8>)
 80038b2:	601a      	str	r2, [r3, #0]
  qn[1] = q1[1] / vectorlength;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	3304      	adds	r3, #4
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	68f9      	ldr	r1, [r7, #12]
 80038bc:	4618      	mov	r0, r3
 80038be:	f7fd fb31 	bl	8000f24 <__aeabi_fdiv>
 80038c2:	4603      	mov	r3, r0
 80038c4:	461a      	mov	r2, r3
 80038c6:	4b0e      	ldr	r3, [pc, #56]	; (8003900 <_Z19QuaternionNormalizePf+0xe8>)
 80038c8:	605a      	str	r2, [r3, #4]
  qn[2] = q1[2] / vectorlength;
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	3308      	adds	r3, #8
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	68f9      	ldr	r1, [r7, #12]
 80038d2:	4618      	mov	r0, r3
 80038d4:	f7fd fb26 	bl	8000f24 <__aeabi_fdiv>
 80038d8:	4603      	mov	r3, r0
 80038da:	461a      	mov	r2, r3
 80038dc:	4b08      	ldr	r3, [pc, #32]	; (8003900 <_Z19QuaternionNormalizePf+0xe8>)
 80038de:	609a      	str	r2, [r3, #8]
  qn[3] = q1[3] / vectorlength;
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	330c      	adds	r3, #12
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	68f9      	ldr	r1, [r7, #12]
 80038e8:	4618      	mov	r0, r3
 80038ea:	f7fd fb1b 	bl	8000f24 <__aeabi_fdiv>
 80038ee:	4603      	mov	r3, r0
 80038f0:	461a      	mov	r2, r3
 80038f2:	4b03      	ldr	r3, [pc, #12]	; (8003900 <_Z19QuaternionNormalizePf+0xe8>)
 80038f4:	60da      	str	r2, [r3, #12]
  return qn;
 80038f6:	4b02      	ldr	r3, [pc, #8]	; (8003900 <_Z19QuaternionNormalizePf+0xe8>)
 80038f8:	4618      	mov	r0, r3
 80038fa:	3714      	adds	r7, #20
 80038fc:	46bd      	mov	sp, r7
 80038fe:	bd90      	pop	{r4, r7, pc}
 8003900:	2000055c 	.word	0x2000055c

08003904 <_Z16SBUS_RecieveBitsv>:
uint8_t SBUSNewPackage = false;



void SBUS_RecieveBits()
{
 8003904:	b580      	push	{r7, lr}
 8003906:	b082      	sub	sp, #8
 8003908:	af00      	add	r7, sp, #0
  //collect bits:

  TIM4->CCR1 = (uint16_t)(fastPPM_MinTime + 500 + ((float)SBUS_Channels[2] / 2));
 800390a:	4b2d      	ldr	r3, [pc, #180]	; (80039c0 <_Z16SBUS_RecieveBitsv+0xbc>)
 800390c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8003910:	4618      	mov	r0, r3
 8003912:	f7fd f9ff 	bl	8000d14 <__aeabi_i2f>
 8003916:	4603      	mov	r3, r0
 8003918:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800391c:	4618      	mov	r0, r3
 800391e:	f7fd fb01 	bl	8000f24 <__aeabi_fdiv>
 8003922:	4603      	mov	r3, r0
 8003924:	4927      	ldr	r1, [pc, #156]	; (80039c4 <_Z16SBUS_RecieveBitsv+0xc0>)
 8003926:	4618      	mov	r0, r3
 8003928:	f7fd f940 	bl	8000bac <__addsf3>
 800392c:	4603      	mov	r3, r0
 800392e:	4618      	mov	r0, r3
 8003930:	f7fd fc46 	bl	80011c0 <__aeabi_f2uiz>
 8003934:	4603      	mov	r3, r0
 8003936:	b29a      	uxth	r2, r3
 8003938:	4b23      	ldr	r3, [pc, #140]	; (80039c8 <_Z16SBUS_RecieveBitsv+0xc4>)
 800393a:	635a      	str	r2, [r3, #52]	; 0x34
  SBUS_timerCount = TIM11->CNT + SBUS_StartTimeOffset;       //get current clock count register value + time offset
 800393c:	4b23      	ldr	r3, [pc, #140]	; (80039cc <_Z16SBUS_RecieveBitsv+0xc8>)
 800393e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003940:	b29b      	uxth	r3, r3
 8003942:	3b05      	subs	r3, #5
 8003944:	b29a      	uxth	r2, r3
 8003946:	4b22      	ldr	r3, [pc, #136]	; (80039d0 <_Z16SBUS_RecieveBitsv+0xcc>)
 8003948:	801a      	strh	r2, [r3, #0]
  SBUS_RxBitString[0] = true;
 800394a:	4b22      	ldr	r3, [pc, #136]	; (80039d4 <_Z16SBUS_RecieveBitsv+0xd0>)
 800394c:	2201      	movs	r2, #1
 800394e:	701a      	strb	r2, [r3, #0]
  //HAL_GPIO_TogglePin(ONBOARD_WRITE_3_GPIO_Port, ONBOARD_WRITE_3_Pin);   //debug Pin
  for (size_t i = 1; i < SBUS_NumberOfBits; i++)
 8003950:	2301      	movs	r3, #1
 8003952:	607b      	str	r3, [r7, #4]
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800395a:	d229      	bcs.n	80039b0 <_Z16SBUS_RecieveBitsv+0xac>
  {
    ONBOARD_WRITE_3_GPIO_Port->BSRR = (uint32_t)ONBOARD_WRITE_3_Pin << 16U;
 800395c:	4b1e      	ldr	r3, [pc, #120]	; (80039d8 <_Z16SBUS_RecieveBitsv+0xd4>)
 800395e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003962:	619a      	str	r2, [r3, #24]
    SBUS_RxBitString[i] = ((ONBOARD_READ_IT_3_GPIO_Port->IDR & ONBOARD_READ_IT_3_Pin) != 0 ? true : false);     //if the pin is HIGH then the value is 1 else 0
 8003964:	4b1d      	ldr	r3, [pc, #116]	; (80039dc <_Z16SBUS_RecieveBitsv+0xd8>)
 8003966:	691b      	ldr	r3, [r3, #16]
 8003968:	b2db      	uxtb	r3, r3
 800396a:	f003 0301 	and.w	r3, r3, #1
 800396e:	b2d9      	uxtb	r1, r3
 8003970:	4a18      	ldr	r2, [pc, #96]	; (80039d4 <_Z16SBUS_RecieveBitsv+0xd0>)
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	4413      	add	r3, r2
 8003976:	460a      	mov	r2, r1
 8003978:	701a      	strb	r2, [r3, #0]
    ONBOARD_WRITE_3_GPIO_Port->BSRR = ONBOARD_WRITE_3_Pin;
 800397a:	4b17      	ldr	r3, [pc, #92]	; (80039d8 <_Z16SBUS_RecieveBitsv+0xd4>)
 800397c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003980:	619a      	str	r2, [r3, #24]
    while ((TIM11->CNT - SBUS_timerCount) < 10)
 8003982:	4b12      	ldr	r3, [pc, #72]	; (80039cc <_Z16SBUS_RecieveBitsv+0xc8>)
 8003984:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003986:	4a12      	ldr	r2, [pc, #72]	; (80039d0 <_Z16SBUS_RecieveBitsv+0xcc>)
 8003988:	8812      	ldrh	r2, [r2, #0]
 800398a:	1a9b      	subs	r3, r3, r2
 800398c:	2b09      	cmp	r3, #9
 800398e:	bf94      	ite	ls
 8003990:	2301      	movls	r3, #1
 8003992:	2300      	movhi	r3, #0
 8003994:	b2db      	uxtb	r3, r3
 8003996:	2b00      	cmp	r3, #0
 8003998:	d000      	beq.n	800399c <_Z16SBUS_RecieveBitsv+0x98>
 800399a:	e7f2      	b.n	8003982 <_Z16SBUS_RecieveBitsv+0x7e>
    {
    }
    SBUS_timerCount += 10;
 800399c:	4b0c      	ldr	r3, [pc, #48]	; (80039d0 <_Z16SBUS_RecieveBitsv+0xcc>)
 800399e:	881b      	ldrh	r3, [r3, #0]
 80039a0:	330a      	adds	r3, #10
 80039a2:	b29a      	uxth	r2, r3
 80039a4:	4b0a      	ldr	r3, [pc, #40]	; (80039d0 <_Z16SBUS_RecieveBitsv+0xcc>)
 80039a6:	801a      	strh	r2, [r3, #0]
  for (size_t i = 1; i < SBUS_NumberOfBits; i++)
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	3301      	adds	r3, #1
 80039ac:	607b      	str	r3, [r7, #4]
 80039ae:	e7d1      	b.n	8003954 <_Z16SBUS_RecieveBitsv+0x50>
  }
  SBUSNewPackage = true;
 80039b0:	4b0b      	ldr	r3, [pc, #44]	; (80039e0 <_Z16SBUS_RecieveBitsv+0xdc>)
 80039b2:	2201      	movs	r2, #1
 80039b4:	701a      	strb	r2, [r3, #0]
}
 80039b6:	bf00      	nop
 80039b8:	3708      	adds	r7, #8
 80039ba:	46bd      	mov	sp, r7
 80039bc:	bd80      	pop	{r7, pc}
 80039be:	bf00      	nop
 80039c0:	200006c8 	.word	0x200006c8
 80039c4:	44bb8000 	.word	0x44bb8000
 80039c8:	40000800 	.word	0x40000800
 80039cc:	40014800 	.word	0x40014800
 80039d0:	2000056c 	.word	0x2000056c
 80039d4:	20000570 	.word	0x20000570
 80039d8:	40020000 	.word	0x40020000
 80039dc:	40020800 	.word	0x40020800
 80039e0:	200006d9 	.word	0x200006d9

080039e4 <_Z19SBUS_PostProcessingv>:

void SBUS_PostProcessing()
{
 80039e4:	b580      	push	{r7, lr}
 80039e6:	b088      	sub	sp, #32
 80039e8:	af00      	add	r7, sp, #0
    //check validity:

  SBUS_CorruptedPackage = false;                      //reset corrupted package flag
 80039ea:	4b88      	ldr	r3, [pc, #544]	; (8003c0c <_Z19SBUS_PostProcessingv+0x228>)
 80039ec:	2200      	movs	r2, #0
 80039ee:	701a      	strb	r2, [r3, #0]
  for (size_t i = 0; i < SBUS_NumberOfBytes; i++)      //repeat for each byte
 80039f0:	2300      	movs	r3, #0
 80039f2:	61fb      	str	r3, [r7, #28]
 80039f4:	69fb      	ldr	r3, [r7, #28]
 80039f6:	2b18      	cmp	r3, #24
 80039f8:	d85b      	bhi.n	8003ab2 <_Z19SBUS_PostProcessingv+0xce>
  {
    if ((SBUS_RxBitString[0 + (i * SBUS_BitsPerByte)] == true) & (SBUS_RxBitString[10 + (i * SBUS_BitsPerByte)] == false) & (SBUS_RxBitString[11 + (i * SBUS_BitsPerByte)] == false))       //check start bit, 2 stop bit
 80039fa:	69fa      	ldr	r2, [r7, #28]
 80039fc:	4613      	mov	r3, r2
 80039fe:	005b      	lsls	r3, r3, #1
 8003a00:	4413      	add	r3, r2
 8003a02:	009b      	lsls	r3, r3, #2
 8003a04:	461a      	mov	r2, r3
 8003a06:	4b82      	ldr	r3, [pc, #520]	; (8003c10 <_Z19SBUS_PostProcessingv+0x22c>)
 8003a08:	5c9b      	ldrb	r3, [r3, r2]
 8003a0a:	2b01      	cmp	r3, #1
 8003a0c:	bf0c      	ite	eq
 8003a0e:	2301      	moveq	r3, #1
 8003a10:	2300      	movne	r3, #0
 8003a12:	b2d9      	uxtb	r1, r3
 8003a14:	69fa      	ldr	r2, [r7, #28]
 8003a16:	4613      	mov	r3, r2
 8003a18:	005b      	lsls	r3, r3, #1
 8003a1a:	4413      	add	r3, r2
 8003a1c:	009b      	lsls	r3, r3, #2
 8003a1e:	330a      	adds	r3, #10
 8003a20:	4a7b      	ldr	r2, [pc, #492]	; (8003c10 <_Z19SBUS_PostProcessingv+0x22c>)
 8003a22:	5cd3      	ldrb	r3, [r2, r3]
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	bf0c      	ite	eq
 8003a28:	2301      	moveq	r3, #1
 8003a2a:	2300      	movne	r3, #0
 8003a2c:	b2db      	uxtb	r3, r3
 8003a2e:	400b      	ands	r3, r1
 8003a30:	b2db      	uxtb	r3, r3
 8003a32:	4619      	mov	r1, r3
 8003a34:	69fa      	ldr	r2, [r7, #28]
 8003a36:	4613      	mov	r3, r2
 8003a38:	005b      	lsls	r3, r3, #1
 8003a3a:	4413      	add	r3, r2
 8003a3c:	009b      	lsls	r3, r3, #2
 8003a3e:	330b      	adds	r3, #11
 8003a40:	4a73      	ldr	r2, [pc, #460]	; (8003c10 <_Z19SBUS_PostProcessingv+0x22c>)
 8003a42:	5cd3      	ldrb	r3, [r2, r3]
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	bf0c      	ite	eq
 8003a48:	2301      	moveq	r3, #1
 8003a4a:	2300      	movne	r3, #0
 8003a4c:	b2db      	uxtb	r3, r3
 8003a4e:	400b      	ands	r3, r1
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d027      	beq.n	8003aa4 <_Z19SBUS_PostProcessingv+0xc0>
    {
      uint8_t parityCheck = false;
 8003a54:	2300      	movs	r3, #0
 8003a56:	76fb      	strb	r3, [r7, #27]
      for (size_t x = 0; x < 8; x++)                                              //generate parity from 8 bits
 8003a58:	2300      	movs	r3, #0
 8003a5a:	617b      	str	r3, [r7, #20]
 8003a5c:	697b      	ldr	r3, [r7, #20]
 8003a5e:	2b07      	cmp	r3, #7
 8003a60:	d811      	bhi.n	8003a86 <_Z19SBUS_PostProcessingv+0xa2>
      {
        parityCheck ^= SBUS_RxBitString[1 + x + (i * SBUS_BitsPerByte)];
 8003a62:	69fa      	ldr	r2, [r7, #28]
 8003a64:	4613      	mov	r3, r2
 8003a66:	005b      	lsls	r3, r3, #1
 8003a68:	4413      	add	r3, r2
 8003a6a:	009b      	lsls	r3, r3, #2
 8003a6c:	461a      	mov	r2, r3
 8003a6e:	697b      	ldr	r3, [r7, #20]
 8003a70:	4413      	add	r3, r2
 8003a72:	3301      	adds	r3, #1
 8003a74:	4a66      	ldr	r2, [pc, #408]	; (8003c10 <_Z19SBUS_PostProcessingv+0x22c>)
 8003a76:	5cd2      	ldrb	r2, [r2, r3]
 8003a78:	7efb      	ldrb	r3, [r7, #27]
 8003a7a:	4053      	eors	r3, r2
 8003a7c:	76fb      	strb	r3, [r7, #27]
      for (size_t x = 0; x < 8; x++)                                              //generate parity from 8 bits
 8003a7e:	697b      	ldr	r3, [r7, #20]
 8003a80:	3301      	adds	r3, #1
 8003a82:	617b      	str	r3, [r7, #20]
 8003a84:	e7ea      	b.n	8003a5c <_Z19SBUS_PostProcessingv+0x78>
      }
      if (parityCheck == SBUS_RxBitString[9 + (i * SBUS_BitsPerByte)])            //if parity fails set corrupted flag
 8003a86:	69fa      	ldr	r2, [r7, #28]
 8003a88:	4613      	mov	r3, r2
 8003a8a:	005b      	lsls	r3, r3, #1
 8003a8c:	4413      	add	r3, r2
 8003a8e:	009b      	lsls	r3, r3, #2
 8003a90:	3309      	adds	r3, #9
 8003a92:	4a5f      	ldr	r2, [pc, #380]	; (8003c10 <_Z19SBUS_PostProcessingv+0x22c>)
 8003a94:	5cd3      	ldrb	r3, [r2, r3]
 8003a96:	7efa      	ldrb	r2, [r7, #27]
 8003a98:	429a      	cmp	r2, r3
 8003a9a:	d106      	bne.n	8003aaa <_Z19SBUS_PostProcessingv+0xc6>
      {
        SBUS_CorruptedPackage = true;
 8003a9c:	4b5b      	ldr	r3, [pc, #364]	; (8003c0c <_Z19SBUS_PostProcessingv+0x228>)
 8003a9e:	2201      	movs	r2, #1
 8003aa0:	701a      	strb	r2, [r3, #0]
 8003aa2:	e002      	b.n	8003aaa <_Z19SBUS_PostProcessingv+0xc6>
      }
    }
    else                                                                            //if start or stop bits fail set corrupted flag
    {
      SBUS_CorruptedPackage = true;
 8003aa4:	4b59      	ldr	r3, [pc, #356]	; (8003c0c <_Z19SBUS_PostProcessingv+0x228>)
 8003aa6:	2201      	movs	r2, #1
 8003aa8:	701a      	strb	r2, [r3, #0]
  for (size_t i = 0; i < SBUS_NumberOfBytes; i++)      //repeat for each byte
 8003aaa:	69fb      	ldr	r3, [r7, #28]
 8003aac:	3301      	adds	r3, #1
 8003aae:	61fb      	str	r3, [r7, #28]
 8003ab0:	e7a0      	b.n	80039f4 <_Z19SBUS_PostProcessingv+0x10>
    }
  }
  SBUS_Bytes[0] = 0;
 8003ab2:	4b58      	ldr	r3, [pc, #352]	; (8003c14 <_Z19SBUS_PostProcessingv+0x230>)
 8003ab4:	2200      	movs	r2, #0
 8003ab6:	701a      	strb	r2, [r3, #0]
  for (size_t i = 0; i < 8; i++)
 8003ab8:	2300      	movs	r3, #0
 8003aba:	613b      	str	r3, [r7, #16]
 8003abc:	693b      	ldr	r3, [r7, #16]
 8003abe:	2b07      	cmp	r3, #7
 8003ac0:	d816      	bhi.n	8003af0 <_Z19SBUS_PostProcessingv+0x10c>
  {
    SBUS_Bytes[0] |= SBUS_RxBitString[1 + i] << (7 - i);
 8003ac2:	4b54      	ldr	r3, [pc, #336]	; (8003c14 <_Z19SBUS_PostProcessingv+0x230>)
 8003ac4:	781b      	ldrb	r3, [r3, #0]
 8003ac6:	b25a      	sxtb	r2, r3
 8003ac8:	693b      	ldr	r3, [r7, #16]
 8003aca:	3301      	adds	r3, #1
 8003acc:	4950      	ldr	r1, [pc, #320]	; (8003c10 <_Z19SBUS_PostProcessingv+0x22c>)
 8003ace:	5ccb      	ldrb	r3, [r1, r3]
 8003ad0:	4619      	mov	r1, r3
 8003ad2:	693b      	ldr	r3, [r7, #16]
 8003ad4:	f1c3 0307 	rsb	r3, r3, #7
 8003ad8:	fa01 f303 	lsl.w	r3, r1, r3
 8003adc:	b25b      	sxtb	r3, r3
 8003ade:	4313      	orrs	r3, r2
 8003ae0:	b25b      	sxtb	r3, r3
 8003ae2:	b2da      	uxtb	r2, r3
 8003ae4:	4b4b      	ldr	r3, [pc, #300]	; (8003c14 <_Z19SBUS_PostProcessingv+0x230>)
 8003ae6:	701a      	strb	r2, [r3, #0]
  for (size_t i = 0; i < 8; i++)
 8003ae8:	693b      	ldr	r3, [r7, #16]
 8003aea:	3301      	adds	r3, #1
 8003aec:	613b      	str	r3, [r7, #16]
 8003aee:	e7e5      	b.n	8003abc <_Z19SBUS_PostProcessingv+0xd8>
  }
  if (SBUS_Bytes[0] != 0x0FU)
 8003af0:	4b48      	ldr	r3, [pc, #288]	; (8003c14 <_Z19SBUS_PostProcessingv+0x230>)
 8003af2:	781b      	ldrb	r3, [r3, #0]
 8003af4:	2b0f      	cmp	r3, #15
 8003af6:	d002      	beq.n	8003afe <_Z19SBUS_PostProcessingv+0x11a>
  {
    SBUS_CorruptedPackage = true;
 8003af8:	4b44      	ldr	r3, [pc, #272]	; (8003c0c <_Z19SBUS_PostProcessingv+0x228>)
 8003afa:	2201      	movs	r2, #1
 8003afc:	701a      	strb	r2, [r3, #0]
  
  

  //assemble channels:

  if (SBUS_CorruptedPackage == false)
 8003afe:	4b43      	ldr	r3, [pc, #268]	; (8003c0c <_Z19SBUS_PostProcessingv+0x228>)
 8003b00:	781b      	ldrb	r3, [r3, #0]
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d17a      	bne.n	8003bfc <_Z19SBUS_PostProcessingv+0x218>
  {
    uint8_t byteNumber = 0;         //0 to 21
 8003b06:	2300      	movs	r3, #0
 8003b08:	73fb      	strb	r3, [r7, #15]
    uint8_t bitNumber = 0;          //0(LSB) to 7/(MSB)
 8003b0a:	2300      	movs	r3, #0
 8003b0c:	73bb      	strb	r3, [r7, #14]
    for (size_t i = 0; i < SBUS_NumberOfChannels; i++)
 8003b0e:	2300      	movs	r3, #0
 8003b10:	60bb      	str	r3, [r7, #8]
 8003b12:	68bb      	ldr	r3, [r7, #8]
 8003b14:	2b07      	cmp	r3, #7
 8003b16:	d871      	bhi.n	8003bfc <_Z19SBUS_PostProcessingv+0x218>
    {
      uint8_t bitInChannel = 0;   //0(LSB) to 10(MSB)
 8003b18:	2300      	movs	r3, #0
 8003b1a:	71fb      	strb	r3, [r7, #7]
      SBUS_TempChannels[i] = 0;
 8003b1c:	4a3e      	ldr	r2, [pc, #248]	; (8003c18 <_Z19SBUS_PostProcessingv+0x234>)
 8003b1e:	68bb      	ldr	r3, [r7, #8]
 8003b20:	2100      	movs	r1, #0
 8003b22:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
      
      while (bitInChannel <= 10)
 8003b26:	79fb      	ldrb	r3, [r7, #7]
 8003b28:	2b0a      	cmp	r3, #10
 8003b2a:	d843      	bhi.n	8003bb4 <_Z19SBUS_PostProcessingv+0x1d0>
      {
        if (bitNumber <= 7)
 8003b2c:	7bbb      	ldrb	r3, [r7, #14]
 8003b2e:	2b07      	cmp	r3, #7
 8003b30:	d81a      	bhi.n	8003b68 <_Z19SBUS_PostProcessingv+0x184>
        {
          //transfer bit
          SBUS_TempChannels[i] |= SBUS_RxBitString[13 + (bitNumber) + (byteNumber * SBUS_BitsPerByte)] << bitInChannel;
 8003b32:	4a39      	ldr	r2, [pc, #228]	; (8003c18 <_Z19SBUS_PostProcessingv+0x234>)
 8003b34:	68bb      	ldr	r3, [r7, #8]
 8003b36:	f932 1013 	ldrsh.w	r1, [r2, r3, lsl #1]
 8003b3a:	7bbb      	ldrb	r3, [r7, #14]
 8003b3c:	f103 000d 	add.w	r0, r3, #13
 8003b40:	7bfa      	ldrb	r2, [r7, #15]
 8003b42:	4613      	mov	r3, r2
 8003b44:	005b      	lsls	r3, r3, #1
 8003b46:	4413      	add	r3, r2
 8003b48:	009b      	lsls	r3, r3, #2
 8003b4a:	4403      	add	r3, r0
 8003b4c:	4a30      	ldr	r2, [pc, #192]	; (8003c10 <_Z19SBUS_PostProcessingv+0x22c>)
 8003b4e:	5cd3      	ldrb	r3, [r2, r3]
 8003b50:	461a      	mov	r2, r3
 8003b52:	79fb      	ldrb	r3, [r7, #7]
 8003b54:	fa02 f303 	lsl.w	r3, r2, r3
 8003b58:	b21b      	sxth	r3, r3
 8003b5a:	430b      	orrs	r3, r1
 8003b5c:	b219      	sxth	r1, r3
 8003b5e:	4a2e      	ldr	r2, [pc, #184]	; (8003c18 <_Z19SBUS_PostProcessingv+0x234>)
 8003b60:	68bb      	ldr	r3, [r7, #8]
 8003b62:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8003b66:	e01e      	b.n	8003ba6 <_Z19SBUS_PostProcessingv+0x1c2>
        }
        else
        {
          byteNumber ++;
 8003b68:	7bfb      	ldrb	r3, [r7, #15]
 8003b6a:	3301      	adds	r3, #1
 8003b6c:	73fb      	strb	r3, [r7, #15]
          bitNumber = 0;
 8003b6e:	2300      	movs	r3, #0
 8003b70:	73bb      	strb	r3, [r7, #14]
          //transfer bit
          SBUS_TempChannels[i] |= SBUS_RxBitString[13 + (bitNumber) + (byteNumber * SBUS_BitsPerByte)] << bitInChannel;
 8003b72:	4a29      	ldr	r2, [pc, #164]	; (8003c18 <_Z19SBUS_PostProcessingv+0x234>)
 8003b74:	68bb      	ldr	r3, [r7, #8]
 8003b76:	f932 1013 	ldrsh.w	r1, [r2, r3, lsl #1]
 8003b7a:	7bbb      	ldrb	r3, [r7, #14]
 8003b7c:	f103 000d 	add.w	r0, r3, #13
 8003b80:	7bfa      	ldrb	r2, [r7, #15]
 8003b82:	4613      	mov	r3, r2
 8003b84:	005b      	lsls	r3, r3, #1
 8003b86:	4413      	add	r3, r2
 8003b88:	009b      	lsls	r3, r3, #2
 8003b8a:	4403      	add	r3, r0
 8003b8c:	4a20      	ldr	r2, [pc, #128]	; (8003c10 <_Z19SBUS_PostProcessingv+0x22c>)
 8003b8e:	5cd3      	ldrb	r3, [r2, r3]
 8003b90:	461a      	mov	r2, r3
 8003b92:	79fb      	ldrb	r3, [r7, #7]
 8003b94:	fa02 f303 	lsl.w	r3, r2, r3
 8003b98:	b21b      	sxth	r3, r3
 8003b9a:	430b      	orrs	r3, r1
 8003b9c:	b219      	sxth	r1, r3
 8003b9e:	4a1e      	ldr	r2, [pc, #120]	; (8003c18 <_Z19SBUS_PostProcessingv+0x234>)
 8003ba0:	68bb      	ldr	r3, [r7, #8]
 8003ba2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        }
        bitNumber ++;
 8003ba6:	7bbb      	ldrb	r3, [r7, #14]
 8003ba8:	3301      	adds	r3, #1
 8003baa:	73bb      	strb	r3, [r7, #14]
        bitInChannel ++;
 8003bac:	79fb      	ldrb	r3, [r7, #7]
 8003bae:	3301      	adds	r3, #1
 8003bb0:	71fb      	strb	r3, [r7, #7]
      while (bitInChannel <= 10)
 8003bb2:	e7b8      	b.n	8003b26 <_Z19SBUS_PostProcessingv+0x142>
      }
      
      SBUS_TempChannels[i] = ((float)(SBUS_TempChannels[i] - 1054) * ((float)-1000 / (float)821));    //map from 233, 1875 to -1000, 1000
 8003bb4:	4a18      	ldr	r2, [pc, #96]	; (8003c18 <_Z19SBUS_PostProcessingv+0x234>)
 8003bb6:	68bb      	ldr	r3, [r7, #8]
 8003bb8:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8003bbc:	f2a3 431e 	subw	r3, r3, #1054	; 0x41e
 8003bc0:	4618      	mov	r0, r3
 8003bc2:	f7fd f8a7 	bl	8000d14 <__aeabi_i2f>
 8003bc6:	4603      	mov	r3, r0
 8003bc8:	4914      	ldr	r1, [pc, #80]	; (8003c1c <_Z19SBUS_PostProcessingv+0x238>)
 8003bca:	4618      	mov	r0, r3
 8003bcc:	f7fd f8f6 	bl	8000dbc <__aeabi_fmul>
 8003bd0:	4603      	mov	r3, r0
 8003bd2:	4618      	mov	r0, r3
 8003bd4:	f7fd face 	bl	8001174 <__aeabi_f2iz>
 8003bd8:	4603      	mov	r3, r0
 8003bda:	b219      	sxth	r1, r3
 8003bdc:	4a0e      	ldr	r2, [pc, #56]	; (8003c18 <_Z19SBUS_PostProcessingv+0x234>)
 8003bde:	68bb      	ldr	r3, [r7, #8]
 8003be0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
      SBUS_Channels[i] = SBUS_TempChannels[i];
 8003be4:	4a0c      	ldr	r2, [pc, #48]	; (8003c18 <_Z19SBUS_PostProcessingv+0x234>)
 8003be6:	68bb      	ldr	r3, [r7, #8]
 8003be8:	f932 1013 	ldrsh.w	r1, [r2, r3, lsl #1]
 8003bec:	4a0c      	ldr	r2, [pc, #48]	; (8003c20 <_Z19SBUS_PostProcessingv+0x23c>)
 8003bee:	68bb      	ldr	r3, [r7, #8]
 8003bf0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for (size_t i = 0; i < SBUS_NumberOfChannels; i++)
 8003bf4:	68bb      	ldr	r3, [r7, #8]
 8003bf6:	3301      	adds	r3, #1
 8003bf8:	60bb      	str	r3, [r7, #8]
 8003bfa:	e78a      	b.n	8003b12 <_Z19SBUS_PostProcessingv+0x12e>
    }
  }
  SBUSNewPackage = false;
 8003bfc:	4b09      	ldr	r3, [pc, #36]	; (8003c24 <_Z19SBUS_PostProcessingv+0x240>)
 8003bfe:	2200      	movs	r2, #0
 8003c00:	701a      	strb	r2, [r3, #0]
 8003c02:	bf00      	nop
 8003c04:	3720      	adds	r7, #32
 8003c06:	46bd      	mov	sp, r7
 8003c08:	bd80      	pop	{r7, pc}
 8003c0a:	bf00      	nop
 8003c0c:	200006d8 	.word	0x200006d8
 8003c10:	20000570 	.word	0x20000570
 8003c14:	2000069c 	.word	0x2000069c
 8003c18:	200006b8 	.word	0x200006b8
 8003c1c:	bf9be84d 	.word	0xbf9be84d
 8003c20:	200006c8 	.word	0x200006c8
 8003c24:	200006d9 	.word	0x200006d9

08003c28 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003c28:	b580      	push	{r7, lr}
 8003c2a:	b086      	sub	sp, #24
 8003c2c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003c2e:	f001 fa7d 	bl	800512c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003c32:	f000 f89b 	bl	8003d6c <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003c36:	f000 fad7 	bl	80041e8 <_ZL12MX_GPIO_Initv>
  MX_USB_DEVICE_Init();
 8003c3a:	f008 feb5 	bl	800c9a8 <MX_USB_DEVICE_Init>
  MX_ADC1_Init();
 8003c3e:	f000 f8f1 	bl	8003e24 <_ZL12MX_ADC1_Initv>
  MX_I2C1_Init();
 8003c42:	f000 f92d 	bl	8003ea0 <MX_I2C1_Init>
  MX_TIM3_Init();
 8003c46:	f000 f95f 	bl	8003f08 <_ZL12MX_TIM3_Initv>
  MX_TIM4_Init();
 8003c4a:	f000 f9c5 	bl	8003fd8 <_ZL12MX_TIM4_Initv>
  MX_TIM11_Init();
 8003c4e:	f000 fa2b 	bl	80040a8 <_ZL13MX_TIM11_Initv>
  MX_TIM13_Init();
 8003c52:	f000 fa51 	bl	80040f8 <_ZL13MX_TIM13_Initv>
  MX_TIM14_Init();
 8003c56:	f000 fa77 	bl	8004148 <_ZL13MX_TIM14_Initv>
  MX_DMA_Init();
 8003c5a:	f000 fa9d 	bl	8004198 <_ZL11MX_DMA_Initv>

  


  /* Initialize interrupts */
  MX_NVIC_Init();
 8003c5e:	f000 f8d5 	bl	8003e0c <_ZL12MX_NVIC_Initv>
  /* USER CODE BEGIN 2 */



  HAL_TIM_Base_Start_IT(&htim3);
 8003c62:	483b      	ldr	r0, [pc, #236]	; (8003d50 <main+0x128>)
 8003c64:	f005 f934 	bl	8008ed0 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim4);
 8003c68:	483a      	ldr	r0, [pc, #232]	; (8003d54 <main+0x12c>)
 8003c6a:	f005 f931 	bl	8008ed0 <HAL_TIM_Base_Start_IT>
  //HAL_TIM_Base_Start_IT(&htim14);
  //HAL_TIM_Base_Start_IT(&htim13);
  HAL_TIM_Base_Start(&htim11);
 8003c6e:	483a      	ldr	r0, [pc, #232]	; (8003d58 <main+0x130>)
 8003c70:	f005 f8c8 	bl	8008e04 <HAL_TIM_Base_Start>

  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8003c74:	2100      	movs	r1, #0
 8003c76:	4836      	ldr	r0, [pc, #216]	; (8003d50 <main+0x128>)
 8003c78:	f005 f9e8 	bl	800904c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8003c7c:	2100      	movs	r1, #0
 8003c7e:	4835      	ldr	r0, [pc, #212]	; (8003d54 <main+0x12c>)
 8003c80:	f005 f9e4 	bl	800904c <HAL_TIM_PWM_Start>

  TIM4->CCR1 = fastPPM_MinTime;
 8003c84:	4b35      	ldr	r3, [pc, #212]	; (8003d5c <main+0x134>)
 8003c86:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003c8a:	635a      	str	r2, [r3, #52]	; 0x34
  TIM3->CCR1 = slowPPM1_MinTime;
 8003c8c:	4b34      	ldr	r3, [pc, #208]	; (8003d60 <main+0x138>)
 8003c8e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003c92:	635a      	str	r2, [r3, #52]	; 0x34

  HAL_Delay(3000);
 8003c94:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8003c98:	f001 fab6 	bl	8005208 <HAL_Delay>

  while (SBUSNewPackage != true)
 8003c9c:	4b31      	ldr	r3, [pc, #196]	; (8003d64 <main+0x13c>)
 8003c9e:	781b      	ldrb	r3, [r3, #0]
 8003ca0:	2b01      	cmp	r3, #1
 8003ca2:	d000      	beq.n	8003ca6 <main+0x7e>
 8003ca4:	e7fa      	b.n	8003c9c <main+0x74>
  {
  }

  HAL_NVIC_DisableIRQ(EXTI0_IRQn);
 8003ca6:	2006      	movs	r0, #6
 8003ca8:	f001 fdf1 	bl	800588e <HAL_NVIC_DisableIRQ>

  HAL_Delay(50);
 8003cac:	2032      	movs	r0, #50	; 0x32
 8003cae:	f001 faab 	bl	8005208 <HAL_Delay>
  MPU6050 mpu;
 8003cb2:	463b      	mov	r3, r7
 8003cb4:	4618      	mov	r0, r3
 8003cb6:	f7fe f83b 	bl	8001d30 <_ZN7MPU6050C1Ev>
  HAL_Delay(50);
 8003cba:	2032      	movs	r0, #50	; 0x32
 8003cbc:	f001 faa4 	bl	8005208 <HAL_Delay>
  mpu.initialize();
 8003cc0:	463b      	mov	r3, r7
 8003cc2:	4618      	mov	r0, r3
 8003cc4:	f7fe f841 	bl	8001d4a <_ZN7MPU605010initializeEv>
  HAL_Delay(50);
 8003cc8:	2032      	movs	r0, #50	; 0x32
 8003cca:	f001 fa9d 	bl	8005208 <HAL_Delay>
  mpu.dmpInitialize();
 8003cce:	463b      	mov	r3, r7
 8003cd0:	4618      	mov	r0, r3
 8003cd2:	f7fe fd77 	bl	80027c4 <_ZN7MPU605013dmpInitializeEv>
  HAL_Delay(50);
 8003cd6:	2032      	movs	r0, #50	; 0x32
 8003cd8:	f001 fa96 	bl	8005208 <HAL_Delay>


  mpu.setXGyroOffset(-169);
 8003cdc:	463b      	mov	r3, r7
 8003cde:	f06f 01a8 	mvn.w	r1, #168	; 0xa8
 8003ce2:	4618      	mov	r0, r3
 8003ce4:	f7fe fa8c 	bl	8002200 <_ZN7MPU605014setXGyroOffsetEs>
  mpu.setYGyroOffset(165);
 8003ce8:	463b      	mov	r3, r7
 8003cea:	21a5      	movs	r1, #165	; 0xa5
 8003cec:	4618      	mov	r0, r3
 8003cee:	f7fe fa98 	bl	8002222 <_ZN7MPU605014setYGyroOffsetEs>
  mpu.setZGyroOffset(110);
 8003cf2:	463b      	mov	r3, r7
 8003cf4:	216e      	movs	r1, #110	; 0x6e
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	f7fe faa4 	bl	8002244 <_ZN7MPU605014setZGyroOffsetEs>
  mpu.setXAccelOffset(4599);
 8003cfc:	463b      	mov	r3, r7
 8003cfe:	f241 11f7 	movw	r1, #4599	; 0x11f7
 8003d02:	4618      	mov	r0, r3
 8003d04:	f7fe fa49 	bl	800219a <_ZN7MPU605015setXAccelOffsetEs>
  mpu.setYAccelOffset(-951);
 8003d08:	463b      	mov	r3, r7
 8003d0a:	4917      	ldr	r1, [pc, #92]	; (8003d68 <main+0x140>)
 8003d0c:	4618      	mov	r0, r3
 8003d0e:	f7fe fa55 	bl	80021bc <_ZN7MPU605015setYAccelOffsetEs>
  mpu.setZAccelOffset(1930);
 8003d12:	463b      	mov	r3, r7
 8003d14:	f240 718a 	movw	r1, #1930	; 0x78a
 8003d18:	4618      	mov	r0, r3
 8003d1a:	f7fe fa60 	bl	80021de <_ZN7MPU605015setZAccelOffsetEs>

  HAL_Delay(50);
 8003d1e:	2032      	movs	r0, #50	; 0x32
 8003d20:	f001 fa72 	bl	8005208 <HAL_Delay>
  mpu.setDMPEnabled(true);
 8003d24:	463b      	mov	r3, r7
 8003d26:	2101      	movs	r1, #1
 8003d28:	4618      	mov	r0, r3
 8003d2a:	f7fe fa9c 	bl	8002266 <_ZN7MPU605013setDMPEnabledEb>

  HAL_Delay(2000);
 8003d2e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8003d32:	f001 fa69 	bl	8005208 <HAL_Delay>
  MPU6050_resetFIFO();
 8003d36:	f7fd feaf 	bl	8001a98 <_Z17MPU6050_resetFIFOv>
  HAL_Delay(2);
 8003d3a:	2002      	movs	r0, #2
 8003d3c:	f001 fa64 	bl	8005208 <HAL_Delay>
  //MPU6050_readQuaternionBytes();

  //MPU6050_ConvertToQuaternions();


  MPU6050_GetOriginQuaternion();
 8003d40:	f7ff fc10 	bl	8003564 <_Z27MPU6050_GetOriginQuaternionv>

  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8003d44:	2006      	movs	r0, #6
 8003d46:	f001 fd94 	bl	8005872 <HAL_NVIC_EnableIRQ>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    loop();
 8003d4a:	f000 fb9d 	bl	8004488 <_Z4loopv>
 8003d4e:	e7fc      	b.n	8003d4a <main+0x122>
 8003d50:	20000838 	.word	0x20000838
 8003d54:	20000880 	.word	0x20000880
 8003d58:	200008c8 	.word	0x200008c8
 8003d5c:	40000800 	.word	0x40000800
 8003d60:	40000400 	.word	0x40000400
 8003d64:	200006d9 	.word	0x200006d9
 8003d68:	fffffc49 	.word	0xfffffc49

08003d6c <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003d6c:	b580      	push	{r7, lr}
 8003d6e:	b092      	sub	sp, #72	; 0x48
 8003d70:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003d72:	f107 0318 	add.w	r3, r7, #24
 8003d76:	2230      	movs	r2, #48	; 0x30
 8003d78:	2100      	movs	r1, #0
 8003d7a:	4618      	mov	r0, r3
 8003d7c:	f00b fe20 	bl	800f9c0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003d80:	1d3b      	adds	r3, r7, #4
 8003d82:	2200      	movs	r2, #0
 8003d84:	601a      	str	r2, [r3, #0]
 8003d86:	605a      	str	r2, [r3, #4]
 8003d88:	609a      	str	r2, [r3, #8]
 8003d8a:	60da      	str	r2, [r3, #12]
 8003d8c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003d8e:	2301      	movs	r3, #1
 8003d90:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003d92:	2301      	movs	r3, #1
 8003d94:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003d96:	2302      	movs	r3, #2
 8003d98:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003d9a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003d9e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLM = 16;
 8003da0:	2310      	movs	r3, #16
 8003da2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLN = 192;
 8003da4:	23c0      	movs	r3, #192	; 0xc0
 8003da6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003da8:	2302      	movs	r3, #2
 8003daa:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8003dac:	2304      	movs	r3, #4
 8003dae:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003db0:	f107 0318 	add.w	r3, r7, #24
 8003db4:	4618      	mov	r0, r3
 8003db6:	f004 fb67 	bl	8008488 <HAL_RCC_OscConfig>
 8003dba:	4603      	mov	r3, r0
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	bf14      	ite	ne
 8003dc0:	2301      	movne	r3, #1
 8003dc2:	2300      	moveq	r3, #0
 8003dc4:	b2db      	uxtb	r3, r3
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d001      	beq.n	8003dce <_Z18SystemClock_Configv+0x62>
  {
    Error_Handler();
 8003dca:	f000 fb19 	bl	8004400 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003dce:	230f      	movs	r3, #15
 8003dd0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8003dd2:	2301      	movs	r3, #1
 8003dd4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003dd6:	2300      	movs	r3, #0
 8003dd8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003dda:	2300      	movs	r3, #0
 8003ddc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003dde:	2300      	movs	r3, #0
 8003de0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8003de2:	1d3b      	adds	r3, r7, #4
 8003de4:	2100      	movs	r1, #0
 8003de6:	4618      	mov	r0, r3
 8003de8:	f004 fd9e 	bl	8008928 <HAL_RCC_ClockConfig>
 8003dec:	4603      	mov	r3, r0
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	bf14      	ite	ne
 8003df2:	2301      	movne	r3, #1
 8003df4:	2300      	moveq	r3, #0
 8003df6:	b2db      	uxtb	r3, r3
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d001      	beq.n	8003e00 <_Z18SystemClock_Configv+0x94>
  {
    Error_Handler();
 8003dfc:	f000 fb00 	bl	8004400 <Error_Handler>
  }
  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 8003e00:	f004 fe7e 	bl	8008b00 <HAL_RCC_EnableCSS>
}
 8003e04:	bf00      	nop
 8003e06:	3748      	adds	r7, #72	; 0x48
 8003e08:	46bd      	mov	sp, r7
 8003e0a:	bd80      	pop	{r7, pc}

08003e0c <_ZL12MX_NVIC_Initv>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8003e0c:	b580      	push	{r7, lr}
 8003e0e:	af00      	add	r7, sp, #0
  /* EXTI0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8003e10:	2200      	movs	r2, #0
 8003e12:	2100      	movs	r1, #0
 8003e14:	2006      	movs	r0, #6
 8003e16:	f001 fd10 	bl	800583a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8003e1a:	2006      	movs	r0, #6
 8003e1c:	f001 fd29 	bl	8005872 <HAL_NVIC_EnableIRQ>
}
 8003e20:	bf00      	nop
 8003e22:	bd80      	pop	{r7, pc}

08003e24 <_ZL12MX_ADC1_Initv>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8003e24:	b580      	push	{r7, lr}
 8003e26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8003e28:	4b1a      	ldr	r3, [pc, #104]	; (8003e94 <_ZL12MX_ADC1_Initv+0x70>)
 8003e2a:	4a1b      	ldr	r2, [pc, #108]	; (8003e98 <_ZL12MX_ADC1_Initv+0x74>)
 8003e2c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8003e2e:	4b19      	ldr	r3, [pc, #100]	; (8003e94 <_ZL12MX_ADC1_Initv+0x70>)
 8003e30:	2200      	movs	r2, #0
 8003e32:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8003e34:	4b17      	ldr	r3, [pc, #92]	; (8003e94 <_ZL12MX_ADC1_Initv+0x70>)
 8003e36:	2200      	movs	r2, #0
 8003e38:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8003e3a:	4b16      	ldr	r3, [pc, #88]	; (8003e94 <_ZL12MX_ADC1_Initv+0x70>)
 8003e3c:	2201      	movs	r2, #1
 8003e3e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8003e40:	4b14      	ldr	r3, [pc, #80]	; (8003e94 <_ZL12MX_ADC1_Initv+0x70>)
 8003e42:	2201      	movs	r2, #1
 8003e44:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8003e46:	4b13      	ldr	r3, [pc, #76]	; (8003e94 <_ZL12MX_ADC1_Initv+0x70>)
 8003e48:	2200      	movs	r2, #0
 8003e4a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8003e4e:	4b11      	ldr	r3, [pc, #68]	; (8003e94 <_ZL12MX_ADC1_Initv+0x70>)
 8003e50:	2200      	movs	r2, #0
 8003e52:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003e54:	4b0f      	ldr	r3, [pc, #60]	; (8003e94 <_ZL12MX_ADC1_Initv+0x70>)
 8003e56:	4a11      	ldr	r2, [pc, #68]	; (8003e9c <_ZL12MX_ADC1_Initv+0x78>)
 8003e58:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003e5a:	4b0e      	ldr	r3, [pc, #56]	; (8003e94 <_ZL12MX_ADC1_Initv+0x70>)
 8003e5c:	2200      	movs	r2, #0
 8003e5e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8003e60:	4b0c      	ldr	r3, [pc, #48]	; (8003e94 <_ZL12MX_ADC1_Initv+0x70>)
 8003e62:	2201      	movs	r2, #1
 8003e64:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8003e66:	4b0b      	ldr	r3, [pc, #44]	; (8003e94 <_ZL12MX_ADC1_Initv+0x70>)
 8003e68:	2200      	movs	r2, #0
 8003e6a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8003e6e:	4b09      	ldr	r3, [pc, #36]	; (8003e94 <_ZL12MX_ADC1_Initv+0x70>)
 8003e70:	2201      	movs	r2, #1
 8003e72:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8003e74:	4807      	ldr	r0, [pc, #28]	; (8003e94 <_ZL12MX_ADC1_Initv+0x70>)
 8003e76:	f001 f9eb 	bl	8005250 <HAL_ADC_Init>
 8003e7a:	4603      	mov	r3, r0
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	bf14      	ite	ne
 8003e80:	2301      	movne	r3, #1
 8003e82:	2300      	moveq	r3, #0
 8003e84:	b2db      	uxtb	r3, r3
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d001      	beq.n	8003e8e <_ZL12MX_ADC1_Initv+0x6a>
  {
    Error_Handler();
 8003e8a:	f000 fab9 	bl	8004400 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8003e8e:	bf00      	nop
 8003e90:	bd80      	pop	{r7, pc}
 8003e92:	bf00      	nop
 8003e94:	200006dc 	.word	0x200006dc
 8003e98:	40012000 	.word	0x40012000
 8003e9c:	0f000001 	.word	0x0f000001

08003ea0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
void MX_I2C1_Init(void)
{
 8003ea0:	b580      	push	{r7, lr}
 8003ea2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8003ea4:	4b15      	ldr	r3, [pc, #84]	; (8003efc <MX_I2C1_Init+0x5c>)
 8003ea6:	4a16      	ldr	r2, [pc, #88]	; (8003f00 <MX_I2C1_Init+0x60>)
 8003ea8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8003eaa:	4b14      	ldr	r3, [pc, #80]	; (8003efc <MX_I2C1_Init+0x5c>)
 8003eac:	4a15      	ldr	r2, [pc, #84]	; (8003f04 <MX_I2C1_Init+0x64>)
 8003eae:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003eb0:	4b12      	ldr	r3, [pc, #72]	; (8003efc <MX_I2C1_Init+0x5c>)
 8003eb2:	2200      	movs	r2, #0
 8003eb4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8003eb6:	4b11      	ldr	r3, [pc, #68]	; (8003efc <MX_I2C1_Init+0x5c>)
 8003eb8:	2200      	movs	r2, #0
 8003eba:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003ebc:	4b0f      	ldr	r3, [pc, #60]	; (8003efc <MX_I2C1_Init+0x5c>)
 8003ebe:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003ec2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003ec4:	4b0d      	ldr	r3, [pc, #52]	; (8003efc <MX_I2C1_Init+0x5c>)
 8003ec6:	2200      	movs	r2, #0
 8003ec8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8003eca:	4b0c      	ldr	r3, [pc, #48]	; (8003efc <MX_I2C1_Init+0x5c>)
 8003ecc:	2200      	movs	r2, #0
 8003ece:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003ed0:	4b0a      	ldr	r3, [pc, #40]	; (8003efc <MX_I2C1_Init+0x5c>)
 8003ed2:	2200      	movs	r2, #0
 8003ed4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003ed6:	4b09      	ldr	r3, [pc, #36]	; (8003efc <MX_I2C1_Init+0x5c>)
 8003ed8:	2200      	movs	r2, #0
 8003eda:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003edc:	4807      	ldr	r0, [pc, #28]	; (8003efc <MX_I2C1_Init+0x5c>)
 8003ede:	f002 f9bf 	bl	8006260 <HAL_I2C_Init>
 8003ee2:	4603      	mov	r3, r0
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	bf14      	ite	ne
 8003ee8:	2301      	movne	r3, #1
 8003eea:	2300      	moveq	r3, #0
 8003eec:	b2db      	uxtb	r3, r3
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d001      	beq.n	8003ef6 <MX_I2C1_Init+0x56>
  {
    Error_Handler();
 8003ef2:	f000 fa85 	bl	8004400 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8003ef6:	bf00      	nop
 8003ef8:	bd80      	pop	{r7, pc}
 8003efa:	bf00      	nop
 8003efc:	20000724 	.word	0x20000724
 8003f00:	40005400 	.word	0x40005400
 8003f04:	00061a80 	.word	0x00061a80

08003f08 <_ZL12MX_TIM3_Initv>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8003f08:	b580      	push	{r7, lr}
 8003f0a:	b08a      	sub	sp, #40	; 0x28
 8003f0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003f0e:	f107 0320 	add.w	r3, r7, #32
 8003f12:	2200      	movs	r2, #0
 8003f14:	601a      	str	r2, [r3, #0]
 8003f16:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003f18:	1d3b      	adds	r3, r7, #4
 8003f1a:	2200      	movs	r2, #0
 8003f1c:	601a      	str	r2, [r3, #0]
 8003f1e:	605a      	str	r2, [r3, #4]
 8003f20:	609a      	str	r2, [r3, #8]
 8003f22:	60da      	str	r2, [r3, #12]
 8003f24:	611a      	str	r2, [r3, #16]
 8003f26:	615a      	str	r2, [r3, #20]
 8003f28:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003f2a:	4b29      	ldr	r3, [pc, #164]	; (8003fd0 <_ZL12MX_TIM3_Initv+0xc8>)
 8003f2c:	4a29      	ldr	r2, [pc, #164]	; (8003fd4 <_ZL12MX_TIM3_Initv+0xcc>)
 8003f2e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 16-1;
 8003f30:	4b27      	ldr	r3, [pc, #156]	; (8003fd0 <_ZL12MX_TIM3_Initv+0xc8>)
 8003f32:	220f      	movs	r2, #15
 8003f34:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003f36:	4b26      	ldr	r3, [pc, #152]	; (8003fd0 <_ZL12MX_TIM3_Initv+0xc8>)
 8003f38:	2200      	movs	r2, #0
 8003f3a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 20000;
 8003f3c:	4b24      	ldr	r3, [pc, #144]	; (8003fd0 <_ZL12MX_TIM3_Initv+0xc8>)
 8003f3e:	f644 6220 	movw	r2, #20000	; 0x4e20
 8003f42:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003f44:	4b22      	ldr	r3, [pc, #136]	; (8003fd0 <_ZL12MX_TIM3_Initv+0xc8>)
 8003f46:	2200      	movs	r2, #0
 8003f48:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003f4a:	4b21      	ldr	r3, [pc, #132]	; (8003fd0 <_ZL12MX_TIM3_Initv+0xc8>)
 8003f4c:	2200      	movs	r2, #0
 8003f4e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8003f50:	481f      	ldr	r0, [pc, #124]	; (8003fd0 <_ZL12MX_TIM3_Initv+0xc8>)
 8003f52:	f005 f82b 	bl	8008fac <HAL_TIM_PWM_Init>
 8003f56:	4603      	mov	r3, r0
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	bf14      	ite	ne
 8003f5c:	2301      	movne	r3, #1
 8003f5e:	2300      	moveq	r3, #0
 8003f60:	b2db      	uxtb	r3, r3
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d001      	beq.n	8003f6a <_ZL12MX_TIM3_Initv+0x62>
  {
    Error_Handler();
 8003f66:	f000 fa4b 	bl	8004400 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003f6a:	2300      	movs	r3, #0
 8003f6c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003f6e:	2300      	movs	r3, #0
 8003f70:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003f72:	f107 0320 	add.w	r3, r7, #32
 8003f76:	4619      	mov	r1, r3
 8003f78:	4815      	ldr	r0, [pc, #84]	; (8003fd0 <_ZL12MX_TIM3_Initv+0xc8>)
 8003f7a:	f005 fd87 	bl	8009a8c <HAL_TIMEx_MasterConfigSynchronization>
 8003f7e:	4603      	mov	r3, r0
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	bf14      	ite	ne
 8003f84:	2301      	movne	r3, #1
 8003f86:	2300      	moveq	r3, #0
 8003f88:	b2db      	uxtb	r3, r3
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d001      	beq.n	8003f92 <_ZL12MX_TIM3_Initv+0x8a>
  {
    Error_Handler();
 8003f8e:	f000 fa37 	bl	8004400 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003f92:	2360      	movs	r3, #96	; 0x60
 8003f94:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8003f96:	2300      	movs	r3, #0
 8003f98:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003f9a:	2300      	movs	r3, #0
 8003f9c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003f9e:	2300      	movs	r3, #0
 8003fa0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003fa2:	1d3b      	adds	r3, r7, #4
 8003fa4:	2200      	movs	r2, #0
 8003fa6:	4619      	mov	r1, r3
 8003fa8:	4809      	ldr	r0, [pc, #36]	; (8003fd0 <_ZL12MX_TIM3_Initv+0xc8>)
 8003faa:	f005 fa1f 	bl	80093ec <HAL_TIM_PWM_ConfigChannel>
 8003fae:	4603      	mov	r3, r0
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	bf14      	ite	ne
 8003fb4:	2301      	movne	r3, #1
 8003fb6:	2300      	moveq	r3, #0
 8003fb8:	b2db      	uxtb	r3, r3
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d001      	beq.n	8003fc2 <_ZL12MX_TIM3_Initv+0xba>
  {
    Error_Handler();
 8003fbe:	f000 fa1f 	bl	8004400 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8003fc2:	4803      	ldr	r0, [pc, #12]	; (8003fd0 <_ZL12MX_TIM3_Initv+0xc8>)
 8003fc4:	f000 fefe 	bl	8004dc4 <HAL_TIM_MspPostInit>

}
 8003fc8:	bf00      	nop
 8003fca:	3728      	adds	r7, #40	; 0x28
 8003fcc:	46bd      	mov	sp, r7
 8003fce:	bd80      	pop	{r7, pc}
 8003fd0:	20000838 	.word	0x20000838
 8003fd4:	40000400 	.word	0x40000400

08003fd8 <_ZL12MX_TIM4_Initv>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8003fd8:	b580      	push	{r7, lr}
 8003fda:	b08a      	sub	sp, #40	; 0x28
 8003fdc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003fde:	f107 0320 	add.w	r3, r7, #32
 8003fe2:	2200      	movs	r2, #0
 8003fe4:	601a      	str	r2, [r3, #0]
 8003fe6:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003fe8:	1d3b      	adds	r3, r7, #4
 8003fea:	2200      	movs	r2, #0
 8003fec:	601a      	str	r2, [r3, #0]
 8003fee:	605a      	str	r2, [r3, #4]
 8003ff0:	609a      	str	r2, [r3, #8]
 8003ff2:	60da      	str	r2, [r3, #12]
 8003ff4:	611a      	str	r2, [r3, #16]
 8003ff6:	615a      	str	r2, [r3, #20]
 8003ff8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8003ffa:	4b29      	ldr	r3, [pc, #164]	; (80040a0 <_ZL12MX_TIM4_Initv+0xc8>)
 8003ffc:	4a29      	ldr	r2, [pc, #164]	; (80040a4 <_ZL12MX_TIM4_Initv+0xcc>)
 8003ffe:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 16-1;
 8004000:	4b27      	ldr	r3, [pc, #156]	; (80040a0 <_ZL12MX_TIM4_Initv+0xc8>)
 8004002:	220f      	movs	r2, #15
 8004004:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004006:	4b26      	ldr	r3, [pc, #152]	; (80040a0 <_ZL12MX_TIM4_Initv+0xc8>)
 8004008:	2200      	movs	r2, #0
 800400a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 2500;
 800400c:	4b24      	ldr	r3, [pc, #144]	; (80040a0 <_ZL12MX_TIM4_Initv+0xc8>)
 800400e:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8004012:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004014:	4b22      	ldr	r3, [pc, #136]	; (80040a0 <_ZL12MX_TIM4_Initv+0xc8>)
 8004016:	2200      	movs	r2, #0
 8004018:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800401a:	4b21      	ldr	r3, [pc, #132]	; (80040a0 <_ZL12MX_TIM4_Initv+0xc8>)
 800401c:	2200      	movs	r2, #0
 800401e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8004020:	481f      	ldr	r0, [pc, #124]	; (80040a0 <_ZL12MX_TIM4_Initv+0xc8>)
 8004022:	f004 ffc3 	bl	8008fac <HAL_TIM_PWM_Init>
 8004026:	4603      	mov	r3, r0
 8004028:	2b00      	cmp	r3, #0
 800402a:	bf14      	ite	ne
 800402c:	2301      	movne	r3, #1
 800402e:	2300      	moveq	r3, #0
 8004030:	b2db      	uxtb	r3, r3
 8004032:	2b00      	cmp	r3, #0
 8004034:	d001      	beq.n	800403a <_ZL12MX_TIM4_Initv+0x62>
  {
    Error_Handler();
 8004036:	f000 f9e3 	bl	8004400 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800403a:	2300      	movs	r3, #0
 800403c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800403e:	2300      	movs	r3, #0
 8004040:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8004042:	f107 0320 	add.w	r3, r7, #32
 8004046:	4619      	mov	r1, r3
 8004048:	4815      	ldr	r0, [pc, #84]	; (80040a0 <_ZL12MX_TIM4_Initv+0xc8>)
 800404a:	f005 fd1f 	bl	8009a8c <HAL_TIMEx_MasterConfigSynchronization>
 800404e:	4603      	mov	r3, r0
 8004050:	2b00      	cmp	r3, #0
 8004052:	bf14      	ite	ne
 8004054:	2301      	movne	r3, #1
 8004056:	2300      	moveq	r3, #0
 8004058:	b2db      	uxtb	r3, r3
 800405a:	2b00      	cmp	r3, #0
 800405c:	d001      	beq.n	8004062 <_ZL12MX_TIM4_Initv+0x8a>
  {
    Error_Handler();
 800405e:	f000 f9cf 	bl	8004400 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004062:	2360      	movs	r3, #96	; 0x60
 8004064:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8004066:	2300      	movs	r3, #0
 8004068:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800406a:	2300      	movs	r3, #0
 800406c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800406e:	2300      	movs	r3, #0
 8004070:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004072:	1d3b      	adds	r3, r7, #4
 8004074:	2200      	movs	r2, #0
 8004076:	4619      	mov	r1, r3
 8004078:	4809      	ldr	r0, [pc, #36]	; (80040a0 <_ZL12MX_TIM4_Initv+0xc8>)
 800407a:	f005 f9b7 	bl	80093ec <HAL_TIM_PWM_ConfigChannel>
 800407e:	4603      	mov	r3, r0
 8004080:	2b00      	cmp	r3, #0
 8004082:	bf14      	ite	ne
 8004084:	2301      	movne	r3, #1
 8004086:	2300      	moveq	r3, #0
 8004088:	b2db      	uxtb	r3, r3
 800408a:	2b00      	cmp	r3, #0
 800408c:	d001      	beq.n	8004092 <_ZL12MX_TIM4_Initv+0xba>
  {
    Error_Handler();
 800408e:	f000 f9b7 	bl	8004400 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8004092:	4803      	ldr	r0, [pc, #12]	; (80040a0 <_ZL12MX_TIM4_Initv+0xc8>)
 8004094:	f000 fe96 	bl	8004dc4 <HAL_TIM_MspPostInit>

}
 8004098:	bf00      	nop
 800409a:	3728      	adds	r7, #40	; 0x28
 800409c:	46bd      	mov	sp, r7
 800409e:	bd80      	pop	{r7, pc}
 80040a0:	20000880 	.word	0x20000880
 80040a4:	40000800 	.word	0x40000800

080040a8 <_ZL13MX_TIM11_Initv>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 80040a8:	b580      	push	{r7, lr}
 80040aa:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 80040ac:	4b10      	ldr	r3, [pc, #64]	; (80040f0 <_ZL13MX_TIM11_Initv+0x48>)
 80040ae:	4a11      	ldr	r2, [pc, #68]	; (80040f4 <_ZL13MX_TIM11_Initv+0x4c>)
 80040b0:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 16 - 1;
 80040b2:	4b0f      	ldr	r3, [pc, #60]	; (80040f0 <_ZL13MX_TIM11_Initv+0x48>)
 80040b4:	220f      	movs	r2, #15
 80040b6:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 80040b8:	4b0d      	ldr	r3, [pc, #52]	; (80040f0 <_ZL13MX_TIM11_Initv+0x48>)
 80040ba:	2200      	movs	r2, #0
 80040bc:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 65535;
 80040be:	4b0c      	ldr	r3, [pc, #48]	; (80040f0 <_ZL13MX_TIM11_Initv+0x48>)
 80040c0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80040c4:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80040c6:	4b0a      	ldr	r3, [pc, #40]	; (80040f0 <_ZL13MX_TIM11_Initv+0x48>)
 80040c8:	2200      	movs	r2, #0
 80040ca:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80040cc:	4b08      	ldr	r3, [pc, #32]	; (80040f0 <_ZL13MX_TIM11_Initv+0x48>)
 80040ce:	2200      	movs	r2, #0
 80040d0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 80040d2:	4807      	ldr	r0, [pc, #28]	; (80040f0 <_ZL13MX_TIM11_Initv+0x48>)
 80040d4:	f004 fe46 	bl	8008d64 <HAL_TIM_Base_Init>
 80040d8:	4603      	mov	r3, r0
 80040da:	2b00      	cmp	r3, #0
 80040dc:	bf14      	ite	ne
 80040de:	2301      	movne	r3, #1
 80040e0:	2300      	moveq	r3, #0
 80040e2:	b2db      	uxtb	r3, r3
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d001      	beq.n	80040ec <_ZL13MX_TIM11_Initv+0x44>
  {
    Error_Handler();
 80040e8:	f000 f98a 	bl	8004400 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 80040ec:	bf00      	nop
 80040ee:	bd80      	pop	{r7, pc}
 80040f0:	200008c8 	.word	0x200008c8
 80040f4:	40014800 	.word	0x40014800

080040f8 <_ZL13MX_TIM13_Initv>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 80040f8:	b580      	push	{r7, lr}
 80040fa:	af00      	add	r7, sp, #0
  /* USER CODE END TIM13_Init 0 */

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 80040fc:	4b10      	ldr	r3, [pc, #64]	; (8004140 <_ZL13MX_TIM13_Initv+0x48>)
 80040fe:	4a11      	ldr	r2, [pc, #68]	; (8004144 <_ZL13MX_TIM13_Initv+0x4c>)
 8004100:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 16 - 1;
 8004102:	4b0f      	ldr	r3, [pc, #60]	; (8004140 <_ZL13MX_TIM13_Initv+0x48>)
 8004104:	220f      	movs	r2, #15
 8004106:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004108:	4b0d      	ldr	r3, [pc, #52]	; (8004140 <_ZL13MX_TIM13_Initv+0x48>)
 800410a:	2200      	movs	r2, #0
 800410c:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 65535;
 800410e:	4b0c      	ldr	r3, [pc, #48]	; (8004140 <_ZL13MX_TIM13_Initv+0x48>)
 8004110:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004114:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004116:	4b0a      	ldr	r3, [pc, #40]	; (8004140 <_ZL13MX_TIM13_Initv+0x48>)
 8004118:	2200      	movs	r2, #0
 800411a:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800411c:	4b08      	ldr	r3, [pc, #32]	; (8004140 <_ZL13MX_TIM13_Initv+0x48>)
 800411e:	2200      	movs	r2, #0
 8004120:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8004122:	4807      	ldr	r0, [pc, #28]	; (8004140 <_ZL13MX_TIM13_Initv+0x48>)
 8004124:	f004 fe1e 	bl	8008d64 <HAL_TIM_Base_Init>
 8004128:	4603      	mov	r3, r0
 800412a:	2b00      	cmp	r3, #0
 800412c:	bf14      	ite	ne
 800412e:	2301      	movne	r3, #1
 8004130:	2300      	moveq	r3, #0
 8004132:	b2db      	uxtb	r3, r3
 8004134:	2b00      	cmp	r3, #0
 8004136:	d001      	beq.n	800413c <_ZL13MX_TIM13_Initv+0x44>
  {
    Error_Handler();
 8004138:	f000 f962 	bl	8004400 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 800413c:	bf00      	nop
 800413e:	bd80      	pop	{r7, pc}
 8004140:	20000910 	.word	0x20000910
 8004144:	40001c00 	.word	0x40001c00

08004148 <_ZL13MX_TIM14_Initv>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 8004148:	b580      	push	{r7, lr}
 800414a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 800414c:	4b10      	ldr	r3, [pc, #64]	; (8004190 <_ZL13MX_TIM14_Initv+0x48>)
 800414e:	4a11      	ldr	r2, [pc, #68]	; (8004194 <_ZL13MX_TIM14_Initv+0x4c>)
 8004150:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 16 - 1;
 8004152:	4b0f      	ldr	r3, [pc, #60]	; (8004190 <_ZL13MX_TIM14_Initv+0x48>)
 8004154:	220f      	movs	r2, #15
 8004156:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004158:	4b0d      	ldr	r3, [pc, #52]	; (8004190 <_ZL13MX_TIM14_Initv+0x48>)
 800415a:	2200      	movs	r2, #0
 800415c:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 65535;
 800415e:	4b0c      	ldr	r3, [pc, #48]	; (8004190 <_ZL13MX_TIM14_Initv+0x48>)
 8004160:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004164:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004166:	4b0a      	ldr	r3, [pc, #40]	; (8004190 <_ZL13MX_TIM14_Initv+0x48>)
 8004168:	2200      	movs	r2, #0
 800416a:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800416c:	4b08      	ldr	r3, [pc, #32]	; (8004190 <_ZL13MX_TIM14_Initv+0x48>)
 800416e:	2200      	movs	r2, #0
 8004170:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8004172:	4807      	ldr	r0, [pc, #28]	; (8004190 <_ZL13MX_TIM14_Initv+0x48>)
 8004174:	f004 fdf6 	bl	8008d64 <HAL_TIM_Base_Init>
 8004178:	4603      	mov	r3, r0
 800417a:	2b00      	cmp	r3, #0
 800417c:	bf14      	ite	ne
 800417e:	2301      	movne	r3, #1
 8004180:	2300      	moveq	r3, #0
 8004182:	b2db      	uxtb	r3, r3
 8004184:	2b00      	cmp	r3, #0
 8004186:	d001      	beq.n	800418c <_ZL13MX_TIM14_Initv+0x44>
  {
    Error_Handler();
 8004188:	f000 f93a 	bl	8004400 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 800418c:	bf00      	nop
 800418e:	bd80      	pop	{r7, pc}
 8004190:	20000958 	.word	0x20000958
 8004194:	40002000 	.word	0x40002000

08004198 <_ZL11MX_DMA_Initv>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8004198:	b580      	push	{r7, lr}
 800419a:	b082      	sub	sp, #8
 800419c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800419e:	2300      	movs	r3, #0
 80041a0:	607b      	str	r3, [r7, #4]
 80041a2:	4b10      	ldr	r3, [pc, #64]	; (80041e4 <_ZL11MX_DMA_Initv+0x4c>)
 80041a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041a6:	4a0f      	ldr	r2, [pc, #60]	; (80041e4 <_ZL11MX_DMA_Initv+0x4c>)
 80041a8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80041ac:	6313      	str	r3, [r2, #48]	; 0x30
 80041ae:	4b0d      	ldr	r3, [pc, #52]	; (80041e4 <_ZL11MX_DMA_Initv+0x4c>)
 80041b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041b2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80041b6:	607b      	str	r3, [r7, #4]
 80041b8:	687b      	ldr	r3, [r7, #4]
  
  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80041ba:	2200      	movs	r2, #0
 80041bc:	2100      	movs	r1, #0
 80041be:	200b      	movs	r0, #11
 80041c0:	f001 fb3b 	bl	800583a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80041c4:	200b      	movs	r0, #11
 80041c6:	f001 fb54 	bl	8005872 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 80041ca:	2200      	movs	r2, #0
 80041cc:	2100      	movs	r1, #0
 80041ce:	2011      	movs	r0, #17
 80041d0:	f001 fb33 	bl	800583a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 80041d4:	2011      	movs	r0, #17
 80041d6:	f001 fb4c 	bl	8005872 <HAL_NVIC_EnableIRQ>

}
 80041da:	bf00      	nop
 80041dc:	3708      	adds	r7, #8
 80041de:	46bd      	mov	sp, r7
 80041e0:	bd80      	pop	{r7, pc}
 80041e2:	bf00      	nop
 80041e4:	40023800 	.word	0x40023800

080041e8 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80041e8:	b580      	push	{r7, lr}
 80041ea:	b08a      	sub	sp, #40	; 0x28
 80041ec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80041ee:	f107 0314 	add.w	r3, r7, #20
 80041f2:	2200      	movs	r2, #0
 80041f4:	601a      	str	r2, [r3, #0]
 80041f6:	605a      	str	r2, [r3, #4]
 80041f8:	609a      	str	r2, [r3, #8]
 80041fa:	60da      	str	r2, [r3, #12]
 80041fc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80041fe:	2300      	movs	r3, #0
 8004200:	613b      	str	r3, [r7, #16]
 8004202:	4b44      	ldr	r3, [pc, #272]	; (8004314 <_ZL12MX_GPIO_Initv+0x12c>)
 8004204:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004206:	4a43      	ldr	r2, [pc, #268]	; (8004314 <_ZL12MX_GPIO_Initv+0x12c>)
 8004208:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800420c:	6313      	str	r3, [r2, #48]	; 0x30
 800420e:	4b41      	ldr	r3, [pc, #260]	; (8004314 <_ZL12MX_GPIO_Initv+0x12c>)
 8004210:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004212:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004216:	613b      	str	r3, [r7, #16]
 8004218:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800421a:	2300      	movs	r3, #0
 800421c:	60fb      	str	r3, [r7, #12]
 800421e:	4b3d      	ldr	r3, [pc, #244]	; (8004314 <_ZL12MX_GPIO_Initv+0x12c>)
 8004220:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004222:	4a3c      	ldr	r2, [pc, #240]	; (8004314 <_ZL12MX_GPIO_Initv+0x12c>)
 8004224:	f043 0304 	orr.w	r3, r3, #4
 8004228:	6313      	str	r3, [r2, #48]	; 0x30
 800422a:	4b3a      	ldr	r3, [pc, #232]	; (8004314 <_ZL12MX_GPIO_Initv+0x12c>)
 800422c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800422e:	f003 0304 	and.w	r3, r3, #4
 8004232:	60fb      	str	r3, [r7, #12]
 8004234:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004236:	2300      	movs	r3, #0
 8004238:	60bb      	str	r3, [r7, #8]
 800423a:	4b36      	ldr	r3, [pc, #216]	; (8004314 <_ZL12MX_GPIO_Initv+0x12c>)
 800423c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800423e:	4a35      	ldr	r2, [pc, #212]	; (8004314 <_ZL12MX_GPIO_Initv+0x12c>)
 8004240:	f043 0301 	orr.w	r3, r3, #1
 8004244:	6313      	str	r3, [r2, #48]	; 0x30
 8004246:	4b33      	ldr	r3, [pc, #204]	; (8004314 <_ZL12MX_GPIO_Initv+0x12c>)
 8004248:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800424a:	f003 0301 	and.w	r3, r3, #1
 800424e:	60bb      	str	r3, [r7, #8]
 8004250:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004252:	2300      	movs	r3, #0
 8004254:	607b      	str	r3, [r7, #4]
 8004256:	4b2f      	ldr	r3, [pc, #188]	; (8004314 <_ZL12MX_GPIO_Initv+0x12c>)
 8004258:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800425a:	4a2e      	ldr	r2, [pc, #184]	; (8004314 <_ZL12MX_GPIO_Initv+0x12c>)
 800425c:	f043 0302 	orr.w	r3, r3, #2
 8004260:	6313      	str	r3, [r2, #48]	; 0x30
 8004262:	4b2c      	ldr	r3, [pc, #176]	; (8004314 <_ZL12MX_GPIO_Initv+0x12c>)
 8004264:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004266:	f003 0302 	and.w	r3, r3, #2
 800426a:	607b      	str	r3, [r7, #4]
 800426c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ONBOARD_LED_1_Pin|ONBOARD_LED_2_Pin|ONBOARD_LED_3_Pin|ONBOARD_LED_4_Pin
 800426e:	2200      	movs	r2, #0
 8004270:	f44f 71f8 	mov.w	r1, #496	; 0x1f0
 8004274:	4828      	ldr	r0, [pc, #160]	; (8004318 <_ZL12MX_GPIO_Initv+0x130>)
 8004276:	f001 ffa9 	bl	80061cc <HAL_GPIO_WritePin>
                          |ONBOARD_WRITE_3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ONBOARD_WRITE_2_GPIO_Port, ONBOARD_WRITE_2_Pin, GPIO_PIN_RESET);
 800427a:	2200      	movs	r2, #0
 800427c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004280:	4826      	ldr	r0, [pc, #152]	; (800431c <_ZL12MX_GPIO_Initv+0x134>)
 8004282:	f001 ffa3 	bl	80061cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : ONBOARD_READ_IT_3_Pin */
  GPIO_InitStruct.Pin = ONBOARD_READ_IT_3_Pin;
 8004286:	2301      	movs	r3, #1
 8004288:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800428a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800428e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8004290:	2302      	movs	r3, #2
 8004292:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ONBOARD_READ_IT_3_GPIO_Port, &GPIO_InitStruct);
 8004294:	f107 0314 	add.w	r3, r7, #20
 8004298:	4619      	mov	r1, r3
 800429a:	4820      	ldr	r0, [pc, #128]	; (800431c <_ZL12MX_GPIO_Initv+0x134>)
 800429c:	f001 fdf8 	bl	8005e90 <HAL_GPIO_Init>

  /*Configure GPIO pins : ONBOARD_BUTTON_1_Pin ONBOARD_BUTTON_2_Pin ONBOARD_BUTTON_3_Pin ONBOARD_BUTTON_4_Pin */
  GPIO_InitStruct.Pin = ONBOARD_BUTTON_1_Pin|ONBOARD_BUTTON_2_Pin|ONBOARD_BUTTON_3_Pin|ONBOARD_BUTTON_4_Pin;
 80042a0:	230f      	movs	r3, #15
 80042a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80042a4:	2300      	movs	r3, #0
 80042a6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042a8:	2300      	movs	r3, #0
 80042aa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80042ac:	f107 0314 	add.w	r3, r7, #20
 80042b0:	4619      	mov	r1, r3
 80042b2:	4819      	ldr	r0, [pc, #100]	; (8004318 <_ZL12MX_GPIO_Initv+0x130>)
 80042b4:	f001 fdec 	bl	8005e90 <HAL_GPIO_Init>

  /*Configure GPIO pins : ONBOARD_LED_1_Pin ONBOARD_LED_2_Pin ONBOARD_LED_3_Pin ONBOARD_LED_4_Pin
                           ONBOARD_WRITE_3_Pin */
  GPIO_InitStruct.Pin = ONBOARD_LED_1_Pin|ONBOARD_LED_2_Pin|ONBOARD_LED_3_Pin|ONBOARD_LED_4_Pin
 80042b8:	f44f 73f8 	mov.w	r3, #496	; 0x1f0
 80042bc:	617b      	str	r3, [r7, #20]
                          |ONBOARD_WRITE_3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80042be:	2301      	movs	r3, #1
 80042c0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042c2:	2300      	movs	r3, #0
 80042c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80042c6:	2300      	movs	r3, #0
 80042c8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80042ca:	f107 0314 	add.w	r3, r7, #20
 80042ce:	4619      	mov	r1, r3
 80042d0:	4811      	ldr	r0, [pc, #68]	; (8004318 <_ZL12MX_GPIO_Initv+0x130>)
 80042d2:	f001 fddd 	bl	8005e90 <HAL_GPIO_Init>

  /*Configure GPIO pin : ONBOARD_WRITE_2_Pin */
  GPIO_InitStruct.Pin = ONBOARD_WRITE_2_Pin;
 80042d6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80042da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80042dc:	2301      	movs	r3, #1
 80042de:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042e0:	2300      	movs	r3, #0
 80042e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80042e4:	2300      	movs	r3, #0
 80042e6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(ONBOARD_WRITE_2_GPIO_Port, &GPIO_InitStruct);
 80042e8:	f107 0314 	add.w	r3, r7, #20
 80042ec:	4619      	mov	r1, r3
 80042ee:	480b      	ldr	r0, [pc, #44]	; (800431c <_ZL12MX_GPIO_Initv+0x134>)
 80042f0:	f001 fdce 	bl	8005e90 <HAL_GPIO_Init>

  /*Configure GPIO pin : ONBOARD_READ_4_Pin */
  GPIO_InitStruct.Pin = ONBOARD_READ_4_Pin;
 80042f4:	2380      	movs	r3, #128	; 0x80
 80042f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80042f8:	2300      	movs	r3, #0
 80042fa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042fc:	2300      	movs	r3, #0
 80042fe:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ONBOARD_READ_4_GPIO_Port, &GPIO_InitStruct);
 8004300:	f107 0314 	add.w	r3, r7, #20
 8004304:	4619      	mov	r1, r3
 8004306:	4806      	ldr	r0, [pc, #24]	; (8004320 <_ZL12MX_GPIO_Initv+0x138>)
 8004308:	f001 fdc2 	bl	8005e90 <HAL_GPIO_Init>

}
 800430c:	bf00      	nop
 800430e:	3728      	adds	r7, #40	; 0x28
 8004310:	46bd      	mov	sp, r7
 8004312:	bd80      	pop	{r7, pc}
 8004314:	40023800 	.word	0x40023800
 8004318:	40020000 	.word	0x40020000
 800431c:	40020800 	.word	0x40020800
 8004320:	40020400 	.word	0x40020400

08004324 <HAL_TIM_PeriodElapsedCallback>:
 * @brief Interrupt that is called when any Timer overflows
 * @param htim timer handle
 * @retval none
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004324:	b480      	push	{r7}
 8004326:	b083      	sub	sp, #12
 8004328:	af00      	add	r7, sp, #0
 800432a:	6078      	str	r0, [r7, #4]
  // }
  // else
  // {
  //   SBUS_RecieveDone = false;
  // }
}
 800432c:	bf00      	nop
 800432e:	370c      	adds	r7, #12
 8004330:	46bd      	mov	sp, r7
 8004332:	bc80      	pop	{r7}
 8004334:	4770      	bx	lr
	...

08004338 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{ 
 8004338:	b580      	push	{r7, lr}
 800433a:	b084      	sub	sp, #16
 800433c:	af00      	add	r7, sp, #0
 800433e:	4603      	mov	r3, r0
 8004340:	80fb      	strh	r3, [r7, #6]
  if (GPIO_Pin == ONBOARD_READ_IT_3_Pin)
 8004342:	88fb      	ldrh	r3, [r7, #6]
 8004344:	2b01      	cmp	r3, #1
 8004346:	d10d      	bne.n	8004364 <HAL_GPIO_EXTI_Callback+0x2c>
  {
    uint32_t time = HAL_GetTick();
 8004348:	f000 ff54 	bl	80051f4 <HAL_GetTick>
 800434c:	60f8      	str	r0, [r7, #12]
    if (time - PinInterruptLastTime > 3)
 800434e:	4b07      	ldr	r3, [pc, #28]	; (800436c <HAL_GPIO_EXTI_Callback+0x34>)
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	68fa      	ldr	r2, [r7, #12]
 8004354:	1ad3      	subs	r3, r2, r3
 8004356:	2b03      	cmp	r3, #3
 8004358:	d904      	bls.n	8004364 <HAL_GPIO_EXTI_Callback+0x2c>
    {
      PinInterruptLastTime = time;
 800435a:	4a04      	ldr	r2, [pc, #16]	; (800436c <HAL_GPIO_EXTI_Callback+0x34>)
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	6013      	str	r3, [r2, #0]
      SBUS_RecieveBits();
 8004360:	f7ff fad0 	bl	8003904 <_Z16SBUS_RecieveBitsv>
    }
  }
}
 8004364:	bf00      	nop
 8004366:	3710      	adds	r7, #16
 8004368:	46bd      	mov	sp, r7
 800436a:	bd80      	pop	{r7, pc}
 800436c:	200009a0 	.word	0x200009a0

08004370 <ADC_Select_Channel_11>:

void ADC_Select_Channel_11()
{
 8004370:	b580      	push	{r7, lr}
 8004372:	af00      	add	r7, sp, #0
  // sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
  // if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
  // {
    // Error_Handler();
  // }
  ADC1->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, ADC_CHANNEL_11);
 8004374:	4b0e      	ldr	r3, [pc, #56]	; (80043b0 <ADC_Select_Channel_11+0x40>)
 8004376:	68db      	ldr	r3, [r3, #12]
 8004378:	4a0d      	ldr	r2, [pc, #52]	; (80043b0 <ADC_Select_Channel_11+0x40>)
 800437a:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 800437e:	60d3      	str	r3, [r2, #12]
  ADC1->SMPR1 |= ADC_SMPR1(ADC_SAMPLETIME_15CYCLES, ADC_CHANNEL_11);
 8004380:	4b0b      	ldr	r3, [pc, #44]	; (80043b0 <ADC_Select_Channel_11+0x40>)
 8004382:	68db      	ldr	r3, [r3, #12]
 8004384:	4a0a      	ldr	r2, [pc, #40]	; (80043b0 <ADC_Select_Channel_11+0x40>)
 8004386:	f043 0308 	orr.w	r3, r3, #8
 800438a:	60d3      	str	r3, [r2, #12]
  
  ADC1->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, 1);
 800438c:	4b08      	ldr	r3, [pc, #32]	; (80043b0 <ADC_Select_Channel_11+0x40>)
 800438e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004390:	4a07      	ldr	r2, [pc, #28]	; (80043b0 <ADC_Select_Channel_11+0x40>)
 8004392:	f023 031f 	bic.w	r3, r3, #31
 8004396:	6353      	str	r3, [r2, #52]	; 0x34
  ADC1->SQR3 |= ADC_SQR3_RK(ADC_CHANNEL_11, 1);
 8004398:	4b05      	ldr	r3, [pc, #20]	; (80043b0 <ADC_Select_Channel_11+0x40>)
 800439a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800439c:	4a04      	ldr	r2, [pc, #16]	; (80043b0 <ADC_Select_Channel_11+0x40>)
 800439e:	f043 030b 	orr.w	r3, r3, #11
 80043a2:	6353      	str	r3, [r2, #52]	; 0x34



  HAL_ADC_Start(&hadc1);
 80043a4:	4803      	ldr	r0, [pc, #12]	; (80043b4 <ADC_Select_Channel_11+0x44>)
 80043a6:	f000 ff97 	bl	80052d8 <HAL_ADC_Start>
}
 80043aa:	bf00      	nop
 80043ac:	bd80      	pop	{r7, pc}
 80043ae:	bf00      	nop
 80043b0:	40012000 	.word	0x40012000
 80043b4:	200006dc 	.word	0x200006dc

080043b8 <ADC_Select_Channel_12>:
void ADC_Select_Channel_12()
{
 80043b8:	b580      	push	{r7, lr}
 80043ba:	af00      	add	r7, sp, #0
  // if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
  // {
  //   Error_Handler();
  // }

  ADC1->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, ADC_CHANNEL_12);
 80043bc:	4b0e      	ldr	r3, [pc, #56]	; (80043f8 <ADC_Select_Channel_12+0x40>)
 80043be:	68db      	ldr	r3, [r3, #12]
 80043c0:	4a0d      	ldr	r2, [pc, #52]	; (80043f8 <ADC_Select_Channel_12+0x40>)
 80043c2:	f423 73e0 	bic.w	r3, r3, #448	; 0x1c0
 80043c6:	60d3      	str	r3, [r2, #12]
  ADC1->SMPR1 |= ADC_SMPR1(ADC_SAMPLETIME_15CYCLES, ADC_CHANNEL_12);
 80043c8:	4b0b      	ldr	r3, [pc, #44]	; (80043f8 <ADC_Select_Channel_12+0x40>)
 80043ca:	68db      	ldr	r3, [r3, #12]
 80043cc:	4a0a      	ldr	r2, [pc, #40]	; (80043f8 <ADC_Select_Channel_12+0x40>)
 80043ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80043d2:	60d3      	str	r3, [r2, #12]
  
  ADC1->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, 1);
 80043d4:	4b08      	ldr	r3, [pc, #32]	; (80043f8 <ADC_Select_Channel_12+0x40>)
 80043d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043d8:	4a07      	ldr	r2, [pc, #28]	; (80043f8 <ADC_Select_Channel_12+0x40>)
 80043da:	f023 031f 	bic.w	r3, r3, #31
 80043de:	6353      	str	r3, [r2, #52]	; 0x34
  ADC1->SQR3 |= ADC_SQR3_RK(ADC_CHANNEL_12, 1);
 80043e0:	4b05      	ldr	r3, [pc, #20]	; (80043f8 <ADC_Select_Channel_12+0x40>)
 80043e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043e4:	4a04      	ldr	r2, [pc, #16]	; (80043f8 <ADC_Select_Channel_12+0x40>)
 80043e6:	f043 030c 	orr.w	r3, r3, #12
 80043ea:	6353      	str	r3, [r2, #52]	; 0x34

  HAL_ADC_Start(&hadc1);
 80043ec:	4803      	ldr	r0, [pc, #12]	; (80043fc <ADC_Select_Channel_12+0x44>)
 80043ee:	f000 ff73 	bl	80052d8 <HAL_ADC_Start>
}
 80043f2:	bf00      	nop
 80043f4:	bd80      	pop	{r7, pc}
 80043f6:	bf00      	nop
 80043f8:	40012000 	.word	0x40012000
 80043fc:	200006dc 	.word	0x200006dc

08004400 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004400:	b480      	push	{r7}
 8004402:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004404:	b672      	cpsid	i
}
 8004406:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004408:	e7fe      	b.n	8004408 <Error_Handler+0x8>
	...

0800440c <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 800440c:	b480      	push	{r7}
 800440e:	b083      	sub	sp, #12
 8004410:	af00      	add	r7, sp, #0
 8004412:	6078      	str	r0, [r7, #4]
 8004414:	6039      	str	r1, [r7, #0]
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	2b01      	cmp	r3, #1
 800441a:	d114      	bne.n	8004446 <_Z41__static_initialization_and_destruction_0ii+0x3a>
 800441c:	683b      	ldr	r3, [r7, #0]
 800441e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004422:	4293      	cmp	r3, r2
 8004424:	d10f      	bne.n	8004446 <_Z41__static_initialization_and_destruction_0ii+0x3a>
uint16_t fastPPM_OFFTime = fastPPM_Pulselength - fastPPM_ONTime;//OFF time in microseconds
 8004426:	4b0a      	ldr	r3, [pc, #40]	; (8004450 <_Z41__static_initialization_and_destruction_0ii+0x44>)
 8004428:	881b      	ldrh	r3, [r3, #0]
 800442a:	f5c3 631c 	rsb	r3, r3, #2496	; 0x9c0
 800442e:	3304      	adds	r3, #4
 8004430:	b29a      	uxth	r2, r3
 8004432:	4b08      	ldr	r3, [pc, #32]	; (8004454 <_Z41__static_initialization_and_destruction_0ii+0x48>)
 8004434:	801a      	strh	r2, [r3, #0]
uint16_t slowPPM1_OFFTime = fastPPM_Pulselength - fastPPM_ONTime;//OFF time in microseconds
 8004436:	4b06      	ldr	r3, [pc, #24]	; (8004450 <_Z41__static_initialization_and_destruction_0ii+0x44>)
 8004438:	881b      	ldrh	r3, [r3, #0]
 800443a:	f5c3 631c 	rsb	r3, r3, #2496	; 0x9c0
 800443e:	3304      	adds	r3, #4
 8004440:	b29a      	uxth	r2, r3
 8004442:	4b05      	ldr	r3, [pc, #20]	; (8004458 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 8004444:	801a      	strh	r2, [r3, #0]
}
 8004446:	bf00      	nop
 8004448:	370c      	adds	r7, #12
 800444a:	46bd      	mov	sp, r7
 800444c:	bc80      	pop	{r7}
 800444e:	4770      	bx	lr
 8004450:	20000020 	.word	0x20000020
 8004454:	200009a4 	.word	0x200009a4
 8004458:	200009a6 	.word	0x200009a6

0800445c <_GLOBAL__sub_I_hadc1>:
 800445c:	b580      	push	{r7, lr}
 800445e:	af00      	add	r7, sp, #0
 8004460:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8004464:	2001      	movs	r0, #1
 8004466:	f7ff ffd1 	bl	800440c <_Z41__static_initialization_and_destruction_0ii>
 800446a:	bd80      	pop	{r7, pc}

0800446c <_ZSt4acosf>:
  { return __builtin_acosf(__x); }
 800446c:	b580      	push	{r7, lr}
 800446e:	b082      	sub	sp, #8
 8004470:	af00      	add	r7, sp, #0
 8004472:	6078      	str	r0, [r7, #4]
 8004474:	6878      	ldr	r0, [r7, #4]
 8004476:	f009 f99d 	bl	800d7b4 <acosf>
 800447a:	4603      	mov	r3, r0
 800447c:	4618      	mov	r0, r3
 800447e:	3708      	adds	r7, #8
 8004480:	46bd      	mov	sp, r7
 8004482:	bd80      	pop	{r7, pc}
 8004484:	0000      	movs	r0, r0
	...

08004488 <_Z4loopv>:
uint16_t Debug_diff = 0;
//Debug_CNT = TIM4->CNT;
//Debug_diff = TIM4->CNT - Debug_CNT;

void loop()
{
 8004488:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800448c:	b0f3      	sub	sp, #460	; 0x1cc
 800448e:	af14      	add	r7, sp, #80	; 0x50
  if (TIM4->CNT < 1000)
 8004490:	4b6b      	ldr	r3, [pc, #428]	; (8004640 <_Z4loopv+0x1b8>)
 8004492:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004494:	f240 32e7 	movw	r2, #999	; 0x3e7
 8004498:	4293      	cmp	r3, r2
 800449a:	bf94      	ite	ls
 800449c:	2301      	movls	r3, #1
 800449e:	2300      	movhi	r3, #0
 80044a0:	b2db      	uxtb	r3, r3
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	f000 829e 	beq.w	80049e4 <_Z4loopv+0x55c>
  {



    switch (Step)
 80044a8:	4b66      	ldr	r3, [pc, #408]	; (8004644 <_Z4loopv+0x1bc>)
 80044aa:	781b      	ldrb	r3, [r3, #0]
 80044ac:	2b05      	cmp	r3, #5
 80044ae:	d00e      	beq.n	80044ce <_Z4loopv+0x46>
 80044b0:	2b05      	cmp	r3, #5
 80044b2:	dc10      	bgt.n	80044d6 <_Z4loopv+0x4e>
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d002      	beq.n	80044be <_Z4loopv+0x36>
 80044b8:	2b04      	cmp	r3, #4
 80044ba:	d004      	beq.n	80044c6 <_Z4loopv+0x3e>
      break;
    case 5:
      HAL_NVIC_DisableIRQ(EXTI0_IRQn);
      break;
    default:
      break;
 80044bc:	e00b      	b.n	80044d6 <_Z4loopv+0x4e>
      HAL_NVIC_DisableIRQ(EXTI0_IRQn);
 80044be:	2006      	movs	r0, #6
 80044c0:	f001 f9e5 	bl	800588e <HAL_NVIC_DisableIRQ>
      break;
 80044c4:	e008      	b.n	80044d8 <_Z4loopv+0x50>
      HAL_NVIC_DisableIRQ(EXTI0_IRQn);
 80044c6:	2006      	movs	r0, #6
 80044c8:	f001 f9e1 	bl	800588e <HAL_NVIC_DisableIRQ>
      break;
 80044cc:	e004      	b.n	80044d8 <_Z4loopv+0x50>
      HAL_NVIC_DisableIRQ(EXTI0_IRQn);
 80044ce:	2006      	movs	r0, #6
 80044d0:	f001 f9dd 	bl	800588e <HAL_NVIC_DisableIRQ>
      break;
 80044d4:	e000      	b.n	80044d8 <_Z4loopv+0x50>
      break;
 80044d6:	bf00      	nop
    }

    HAL_GPIO_TogglePin(ONBOARD_LED_2_GPIO_Port, ONBOARD_LED_2_Pin);   //debug Pin
 80044d8:	2120      	movs	r1, #32
 80044da:	485b      	ldr	r0, [pc, #364]	; (8004648 <_Z4loopv+0x1c0>)
 80044dc:	f001 fe8e 	bl	80061fc <HAL_GPIO_TogglePin>
    //get motor angle and update PPM_OnTime
    ADC_Select_Channel_11();
 80044e0:	f7ff ff46 	bl	8004370 <ADC_Select_Channel_11>
	  adcValuesArray[0] = (uint16_t)ADC1->DR;
 80044e4:	4b59      	ldr	r3, [pc, #356]	; (800464c <_Z4loopv+0x1c4>)
 80044e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80044e8:	b29a      	uxth	r2, r3
 80044ea:	4b59      	ldr	r3, [pc, #356]	; (8004650 <_Z4loopv+0x1c8>)
 80044ec:	801a      	strh	r2, [r3, #0]
	  ADC_Select_Channel_12();
 80044ee:	f7ff ff63 	bl	80043b8 <ADC_Select_Channel_12>
	  adcValuesArray[1] = (uint16_t)ADC1->DR;
 80044f2:	4b56      	ldr	r3, [pc, #344]	; (800464c <_Z4loopv+0x1c4>)
 80044f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80044f6:	b29a      	uxth	r2, r3
 80044f8:	4b55      	ldr	r3, [pc, #340]	; (8004650 <_Z4loopv+0x1c8>)
 80044fa:	805a      	strh	r2, [r3, #2]
    //angle = motorAngle(adcValuesArray[1] - 1250, adcValuesArray[0] - 1250);
    //angle = ((atan2((float)adcValuesArray[1] - 1250, (float)adcValuesArray[0] - 1250) * 180) / M_PI) + 180;
    HAL_GPIO_TogglePin(ONBOARD_LED_2_GPIO_Port, ONBOARD_LED_2_Pin);   //debug Pin
 80044fc:	2120      	movs	r1, #32
 80044fe:	4852      	ldr	r0, [pc, #328]	; (8004648 <_Z4loopv+0x1c0>)
 8004500:	f001 fe7c 	bl	80061fc <HAL_GPIO_TogglePin>
    TIM4->CCR1 = (uint16_t)(fastPPM_MinTime + 500 + ((float)SBUS_Channels[2] / 2) + ((float)sin((angle + 45) * (M_PI / 180)) * (PID_Pitch_y / 10)) + ((float)cos((angle + 45) * (M_PI / 180)) * ((float)PID_Roll_y / 10)));
 8004504:	4b53      	ldr	r3, [pc, #332]	; (8004654 <_Z4loopv+0x1cc>)
 8004506:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800450a:	4618      	mov	r0, r3
 800450c:	f7fc fc02 	bl	8000d14 <__aeabi_i2f>
 8004510:	4603      	mov	r3, r0
 8004512:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8004516:	4618      	mov	r0, r3
 8004518:	f7fc fd04 	bl	8000f24 <__aeabi_fdiv>
 800451c:	4603      	mov	r3, r0
 800451e:	494e      	ldr	r1, [pc, #312]	; (8004658 <_Z4loopv+0x1d0>)
 8004520:	4618      	mov	r0, r3
 8004522:	f7fc fb43 	bl	8000bac <__addsf3>
 8004526:	4603      	mov	r3, r0
 8004528:	461d      	mov	r5, r3
 800452a:	4b4c      	ldr	r3, [pc, #304]	; (800465c <_Z4loopv+0x1d4>)
 800452c:	881b      	ldrh	r3, [r3, #0]
 800452e:	332d      	adds	r3, #45	; 0x2d
 8004530:	4618      	mov	r0, r3
 8004532:	f7fb ffa3 	bl	800047c <__aeabi_i2d>
 8004536:	a340      	add	r3, pc, #256	; (adr r3, 8004638 <_Z4loopv+0x1b0>)
 8004538:	e9d3 2300 	ldrd	r2, r3, [r3]
 800453c:	f7fc f808 	bl	8000550 <__aeabi_dmul>
 8004540:	4602      	mov	r2, r0
 8004542:	460b      	mov	r3, r1
 8004544:	4610      	mov	r0, r2
 8004546:	4619      	mov	r1, r3
 8004548:	f008 ff74 	bl	800d434 <sin>
 800454c:	4602      	mov	r2, r0
 800454e:	460b      	mov	r3, r1
 8004550:	4610      	mov	r0, r2
 8004552:	4619      	mov	r1, r3
 8004554:	f7fc fad4 	bl	8000b00 <__aeabi_d2f>
 8004558:	4604      	mov	r4, r0
 800455a:	4b41      	ldr	r3, [pc, #260]	; (8004660 <_Z4loopv+0x1d8>)
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	4941      	ldr	r1, [pc, #260]	; (8004664 <_Z4loopv+0x1dc>)
 8004560:	4618      	mov	r0, r3
 8004562:	f7fc fcdf 	bl	8000f24 <__aeabi_fdiv>
 8004566:	4603      	mov	r3, r0
 8004568:	4619      	mov	r1, r3
 800456a:	4620      	mov	r0, r4
 800456c:	f7fc fc26 	bl	8000dbc <__aeabi_fmul>
 8004570:	4603      	mov	r3, r0
 8004572:	4619      	mov	r1, r3
 8004574:	4628      	mov	r0, r5
 8004576:	f7fc fb19 	bl	8000bac <__addsf3>
 800457a:	4603      	mov	r3, r0
 800457c:	461d      	mov	r5, r3
 800457e:	4b37      	ldr	r3, [pc, #220]	; (800465c <_Z4loopv+0x1d4>)
 8004580:	881b      	ldrh	r3, [r3, #0]
 8004582:	332d      	adds	r3, #45	; 0x2d
 8004584:	4618      	mov	r0, r3
 8004586:	f7fb ff79 	bl	800047c <__aeabi_i2d>
 800458a:	a32b      	add	r3, pc, #172	; (adr r3, 8004638 <_Z4loopv+0x1b0>)
 800458c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004590:	f7fb ffde 	bl	8000550 <__aeabi_dmul>
 8004594:	4602      	mov	r2, r0
 8004596:	460b      	mov	r3, r1
 8004598:	4610      	mov	r0, r2
 800459a:	4619      	mov	r1, r3
 800459c:	f008 ff08 	bl	800d3b0 <cos>
 80045a0:	4602      	mov	r2, r0
 80045a2:	460b      	mov	r3, r1
 80045a4:	4610      	mov	r0, r2
 80045a6:	4619      	mov	r1, r3
 80045a8:	f7fc faaa 	bl	8000b00 <__aeabi_d2f>
 80045ac:	4604      	mov	r4, r0
 80045ae:	4b2e      	ldr	r3, [pc, #184]	; (8004668 <_Z4loopv+0x1e0>)
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	492c      	ldr	r1, [pc, #176]	; (8004664 <_Z4loopv+0x1dc>)
 80045b4:	4618      	mov	r0, r3
 80045b6:	f7fc fcb5 	bl	8000f24 <__aeabi_fdiv>
 80045ba:	4603      	mov	r3, r0
 80045bc:	4619      	mov	r1, r3
 80045be:	4620      	mov	r0, r4
 80045c0:	f7fc fbfc 	bl	8000dbc <__aeabi_fmul>
 80045c4:	4603      	mov	r3, r0
 80045c6:	4619      	mov	r1, r3
 80045c8:	4628      	mov	r0, r5
 80045ca:	f7fc faef 	bl	8000bac <__addsf3>
 80045ce:	4603      	mov	r3, r0
 80045d0:	4618      	mov	r0, r3
 80045d2:	f7fc fdf5 	bl	80011c0 <__aeabi_f2uiz>
 80045d6:	4603      	mov	r3, r0
 80045d8:	b29a      	uxth	r2, r3
 80045da:	4b19      	ldr	r3, [pc, #100]	; (8004640 <_Z4loopv+0x1b8>)
 80045dc:	635a      	str	r2, [r3, #52]	; 0x34
    
    
    

    switch (Step)
 80045de:	4b19      	ldr	r3, [pc, #100]	; (8004644 <_Z4loopv+0x1bc>)
 80045e0:	781b      	ldrb	r3, [r3, #0]
 80045e2:	2b09      	cmp	r3, #9
 80045e4:	f200 81e6 	bhi.w	80049b4 <_Z4loopv+0x52c>
 80045e8:	a201      	add	r2, pc, #4	; (adr r2, 80045f0 <_Z4loopv+0x168>)
 80045ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045ee:	bf00      	nop
 80045f0:	08004619 	.word	0x08004619
 80045f4:	08004625 	.word	0x08004625
 80045f8:	08004671 	.word	0x08004671
 80045fc:	080048c5 	.word	0x080048c5
 8004600:	080048eb 	.word	0x080048eb
 8004604:	080048f7 	.word	0x080048f7
 8004608:	08004991 	.word	0x08004991
 800460c:	080049b5 	.word	0x080049b5
 8004610:	080049b5 	.word	0x080049b5
 8004614:	080049ad 	.word	0x080049ad
    {
    case 0:   //get quaternions
      MPU6050_resetFIFO();
 8004618:	f7fd fa3e 	bl	8001a98 <_Z17MPU6050_resetFIFOv>
      HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800461c:	2006      	movs	r0, #6
 800461e:	f001 f928 	bl	8005872 <HAL_NVIC_EnableIRQ>
      break;
 8004622:	e1ce      	b.n	80049c2 <_Z4loopv+0x53a>
    case 1:
      if (SBUSNewPackage == true) SBUS_PostProcessing();
 8004624:	4b11      	ldr	r3, [pc, #68]	; (800466c <_Z4loopv+0x1e4>)
 8004626:	781b      	ldrb	r3, [r3, #0]
 8004628:	2b01      	cmp	r3, #1
 800462a:	f040 81c5 	bne.w	80049b8 <_Z4loopv+0x530>
 800462e:	f7ff f9d9 	bl	80039e4 <_Z19SBUS_PostProcessingv>
      break;
 8004632:	e1c1      	b.n	80049b8 <_Z4loopv+0x530>
 8004634:	f3af 8000 	nop.w
 8004638:	a2529d39 	.word	0xa2529d39
 800463c:	3f91df46 	.word	0x3f91df46
 8004640:	40000800 	.word	0x40000800
 8004644:	200009b2 	.word	0x200009b2
 8004648:	40020000 	.word	0x40020000
 800464c:	40012000 	.word	0x40012000
 8004650:	200009ac 	.word	0x200009ac
 8004654:	200006c8 	.word	0x200006c8
 8004658:	44bb8000 	.word	0x44bb8000
 800465c:	200009b0 	.word	0x200009b0
 8004660:	200004b4 	.word	0x200004b4
 8004664:	41200000 	.word	0x41200000
 8004668:	200004b8 	.word	0x200004b8
 800466c:	200006d9 	.word	0x200006d9
    case 2:
      for (size_t i = 0; i < 1; i++)
 8004670:	2300      	movs	r3, #0
 8004672:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 8004676:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 800467a:	2b00      	cmp	r3, #0
 800467c:	f040 819e 	bne.w	80049bc <_Z4loopv+0x534>
	      for (size_t i = 0; i < x; i++)
	      {
	      	msgTransmit[i] = msg[i];
	      }
	      CDC_Transmit_FS((unsigned char*)msgTransmit, sizeof(msgTransmit));
      }
 8004680:	466b      	mov	r3, sp
 8004682:	607b      	str	r3, [r7, #4]
	      sprintf((char*)msg,"%f %f %f %f %f %f %f %f %f %hd %hd %hu \r\n"                                         \
 8004684:	4bb0      	ldr	r3, [pc, #704]	; (8004948 <_Z4loopv+0x4c0>)
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	4618      	mov	r0, r3
 800468a:	f7fb ff09 	bl	80004a0 <__aeabi_f2d>
 800468e:	e9c7 010c 	strd	r0, r1, [r7, #48]	; 0x30
 8004692:	4bae      	ldr	r3, [pc, #696]	; (800494c <_Z4loopv+0x4c4>)
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	4618      	mov	r0, r3
 8004698:	f7fb ff02 	bl	80004a0 <__aeabi_f2d>
 800469c:	e9c7 010a 	strd	r0, r1, [r7, #40]	; 0x28
 80046a0:	4bab      	ldr	r3, [pc, #684]	; (8004950 <_Z4loopv+0x4c8>)
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	4618      	mov	r0, r3
 80046a6:	f7fb fefb 	bl	80004a0 <__aeabi_f2d>
 80046aa:	e9c7 0108 	strd	r0, r1, [r7, #32]
 80046ae:	4ba9      	ldr	r3, [pc, #676]	; (8004954 <_Z4loopv+0x4cc>)
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	4618      	mov	r0, r3
 80046b4:	f7fb fef4 	bl	80004a0 <__aeabi_f2d>
 80046b8:	e9c7 0106 	strd	r0, r1, [r7, #24]
 80046bc:	4ba6      	ldr	r3, [pc, #664]	; (8004958 <_Z4loopv+0x4d0>)
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	4618      	mov	r0, r3
 80046c2:	f7fb feed 	bl	80004a0 <__aeabi_f2d>
 80046c6:	e9c7 0104 	strd	r0, r1, [r7, #16]
 80046ca:	4ba4      	ldr	r3, [pc, #656]	; (800495c <_Z4loopv+0x4d4>)
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	4618      	mov	r0, r3
 80046d0:	f7fb fee6 	bl	80004a0 <__aeabi_f2d>
 80046d4:	e9c7 0102 	strd	r0, r1, [r7, #8]
        , Yaw_PID_k[0] * 100                                                                                         \
 80046d8:	4ba1      	ldr	r3, [pc, #644]	; (8004960 <_Z4loopv+0x4d8>)
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	49a1      	ldr	r1, [pc, #644]	; (8004964 <_Z4loopv+0x4dc>)
 80046de:	4618      	mov	r0, r3
 80046e0:	f7fc fb6c 	bl	8000dbc <__aeabi_fmul>
 80046e4:	4603      	mov	r3, r0
	      sprintf((char*)msg,"%f %f %f %f %f %f %f %f %f %hd %hd %hu \r\n"                                         \
 80046e6:	4618      	mov	r0, r3
 80046e8:	f7fb feda 	bl	80004a0 <__aeabi_f2d>
 80046ec:	4605      	mov	r5, r0
 80046ee:	460e      	mov	r6, r1
        , Yaw_PID_k[1] * 100                                                                                         \
 80046f0:	4b9b      	ldr	r3, [pc, #620]	; (8004960 <_Z4loopv+0x4d8>)
 80046f2:	685b      	ldr	r3, [r3, #4]
 80046f4:	499b      	ldr	r1, [pc, #620]	; (8004964 <_Z4loopv+0x4dc>)
 80046f6:	4618      	mov	r0, r3
 80046f8:	f7fc fb60 	bl	8000dbc <__aeabi_fmul>
 80046fc:	4603      	mov	r3, r0
	      sprintf((char*)msg,"%f %f %f %f %f %f %f %f %f %hd %hd %hu \r\n"                                         \
 80046fe:	4618      	mov	r0, r3
 8004700:	f7fb fece 	bl	80004a0 <__aeabi_f2d>
 8004704:	4682      	mov	sl, r0
 8004706:	468b      	mov	fp, r1
        , Yaw_PID_k[2] * 100                                                                                         \
 8004708:	4b95      	ldr	r3, [pc, #596]	; (8004960 <_Z4loopv+0x4d8>)
 800470a:	689b      	ldr	r3, [r3, #8]
 800470c:	4995      	ldr	r1, [pc, #596]	; (8004964 <_Z4loopv+0x4dc>)
 800470e:	4618      	mov	r0, r3
 8004710:	f7fc fb54 	bl	8000dbc <__aeabi_fmul>
 8004714:	4603      	mov	r3, r0
	      sprintf((char*)msg,"%f %f %f %f %f %f %f %f %f %hd %hd %hu \r\n"                                         \
 8004716:	4618      	mov	r0, r3
 8004718:	f7fb fec2 	bl	80004a0 <__aeabi_f2d>
 800471c:	4680      	mov	r8, r0
 800471e:	4689      	mov	r9, r1
        , 2 * (int16_t)(((float)atan((float)MPUoutputQuaternion[0] / (float)MPUoutputQuaternion[1]) * 180) / M_PI)   \
 8004720:	4b91      	ldr	r3, [pc, #580]	; (8004968 <_Z4loopv+0x4e0>)
 8004722:	681a      	ldr	r2, [r3, #0]
 8004724:	4b90      	ldr	r3, [pc, #576]	; (8004968 <_Z4loopv+0x4e0>)
 8004726:	685b      	ldr	r3, [r3, #4]
 8004728:	4619      	mov	r1, r3
 800472a:	4610      	mov	r0, r2
 800472c:	f7fc fbfa 	bl	8000f24 <__aeabi_fdiv>
 8004730:	4603      	mov	r3, r0
 8004732:	4618      	mov	r0, r3
 8004734:	f7fe fae4 	bl	8002d00 <_ZSt4atanf>
 8004738:	4603      	mov	r3, r0
 800473a:	498c      	ldr	r1, [pc, #560]	; (800496c <_Z4loopv+0x4e4>)
 800473c:	4618      	mov	r0, r3
 800473e:	f7fc fb3d 	bl	8000dbc <__aeabi_fmul>
 8004742:	4603      	mov	r3, r0
 8004744:	4618      	mov	r0, r3
 8004746:	f7fb feab 	bl	80004a0 <__aeabi_f2d>
 800474a:	a37d      	add	r3, pc, #500	; (adr r3, 8004940 <_Z4loopv+0x4b8>)
 800474c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004750:	f7fc f828 	bl	80007a4 <__aeabi_ddiv>
 8004754:	4602      	mov	r2, r0
 8004756:	460b      	mov	r3, r1
 8004758:	4610      	mov	r0, r2
 800475a:	4619      	mov	r1, r3
 800475c:	f7fc f9a8 	bl	8000ab0 <__aeabi_d2iz>
 8004760:	4603      	mov	r3, r0
 8004762:	b21b      	sxth	r3, r3
	      sprintf((char*)msg,"%f %f %f %f %f %f %f %f %f %hd %hd %hu \r\n"                                         \
 8004764:	005c      	lsls	r4, r3, #1
        , 2 * (int16_t)(((float)acos((float)MPUoutputQuaternion[0] / (float)1073741824) * 180) / M_PI)               \
 8004766:	4b80      	ldr	r3, [pc, #512]	; (8004968 <_Z4loopv+0x4e0>)
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	f04f 419d 	mov.w	r1, #1317011456	; 0x4e800000
 800476e:	4618      	mov	r0, r3
 8004770:	f7fc fbd8 	bl	8000f24 <__aeabi_fdiv>
 8004774:	4603      	mov	r3, r0
 8004776:	4618      	mov	r0, r3
 8004778:	f7ff fe78 	bl	800446c <_ZSt4acosf>
 800477c:	4603      	mov	r3, r0
 800477e:	497b      	ldr	r1, [pc, #492]	; (800496c <_Z4loopv+0x4e4>)
 8004780:	4618      	mov	r0, r3
 8004782:	f7fc fb1b 	bl	8000dbc <__aeabi_fmul>
 8004786:	4603      	mov	r3, r0
 8004788:	4618      	mov	r0, r3
 800478a:	f7fb fe89 	bl	80004a0 <__aeabi_f2d>
 800478e:	a36c      	add	r3, pc, #432	; (adr r3, 8004940 <_Z4loopv+0x4b8>)
 8004790:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004794:	f7fc f806 	bl	80007a4 <__aeabi_ddiv>
 8004798:	4602      	mov	r2, r0
 800479a:	460b      	mov	r3, r1
 800479c:	4610      	mov	r0, r2
 800479e:	4619      	mov	r1, r3
 80047a0:	f7fc f986 	bl	8000ab0 <__aeabi_d2iz>
 80047a4:	4603      	mov	r3, r0
 80047a6:	b21b      	sxth	r3, r3
	      sprintf((char*)msg,"%f %f %f %f %f %f %f %f %f %hd %hd %hu \r\n"                                         \
 80047a8:	005a      	lsls	r2, r3, #1
 80047aa:	4b71      	ldr	r3, [pc, #452]	; (8004970 <_Z4loopv+0x4e8>)
 80047ac:	881b      	ldrh	r3, [r3, #0]
 80047ae:	f107 0038 	add.w	r0, r7, #56	; 0x38
 80047b2:	9312      	str	r3, [sp, #72]	; 0x48
 80047b4:	9211      	str	r2, [sp, #68]	; 0x44
 80047b6:	9410      	str	r4, [sp, #64]	; 0x40
 80047b8:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 80047bc:	e9cd ab0c 	strd	sl, fp, [sp, #48]	; 0x30
 80047c0:	e9cd 560a 	strd	r5, r6, [sp, #40]	; 0x28
 80047c4:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80047c8:	e9cd 3408 	strd	r3, r4, [sp, #32]
 80047cc:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80047d0:	e9cd 3406 	strd	r3, r4, [sp, #24]
 80047d4:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 80047d8:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80047dc:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 80047e0:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80047e4:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 80047e8:	e9cd 3400 	strd	r3, r4, [sp]
 80047ec:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80047f0:	4960      	ldr	r1, [pc, #384]	; (8004974 <_Z4loopv+0x4ec>)
 80047f2:	f00b fe0b 	bl	801040c <siprintf>
	      uint8_t x = 0;
 80047f6:	2300      	movs	r3, #0
 80047f8:	f887 3173 	strb.w	r3, [r7, #371]	; 0x173
	      while (msg[x] != NULL)
 80047fc:	f897 3173 	ldrb.w	r3, [r7, #371]	; 0x173
 8004800:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8004804:	5cd3      	ldrb	r3, [r2, r3]
 8004806:	2b00      	cmp	r3, #0
 8004808:	d005      	beq.n	8004816 <_Z4loopv+0x38e>
	      	x++;
 800480a:	f897 3173 	ldrb.w	r3, [r7, #371]	; 0x173
 800480e:	3301      	adds	r3, #1
 8004810:	f887 3173 	strb.w	r3, [r7, #371]	; 0x173
	      while (msg[x] != NULL)
 8004814:	e7f2      	b.n	80047fc <_Z4loopv+0x374>
	      unsigned char msgTransmit[x];
 8004816:	f897 3173 	ldrb.w	r3, [r7, #371]	; 0x173
 800481a:	1e5c      	subs	r4, r3, #1
 800481c:	f8c7 4168 	str.w	r4, [r7, #360]	; 0x168
 8004820:	4623      	mov	r3, r4
 8004822:	3301      	adds	r3, #1
 8004824:	4618      	mov	r0, r3
 8004826:	f04f 0100 	mov.w	r1, #0
 800482a:	f04f 0200 	mov.w	r2, #0
 800482e:	f04f 0300 	mov.w	r3, #0
 8004832:	00cb      	lsls	r3, r1, #3
 8004834:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8004838:	00c2      	lsls	r2, r0, #3
 800483a:	4623      	mov	r3, r4
 800483c:	3301      	adds	r3, #1
 800483e:	4618      	mov	r0, r3
 8004840:	f04f 0100 	mov.w	r1, #0
 8004844:	f04f 0200 	mov.w	r2, #0
 8004848:	f04f 0300 	mov.w	r3, #0
 800484c:	00cb      	lsls	r3, r1, #3
 800484e:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8004852:	00c2      	lsls	r2, r0, #3
 8004854:	4623      	mov	r3, r4
 8004856:	3301      	adds	r3, #1
 8004858:	3307      	adds	r3, #7
 800485a:	08db      	lsrs	r3, r3, #3
 800485c:	00db      	lsls	r3, r3, #3
 800485e:	ebad 0d03 	sub.w	sp, sp, r3
 8004862:	ab14      	add	r3, sp, #80	; 0x50
 8004864:	3300      	adds	r3, #0
 8004866:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
	      for (size_t i = 0; i < x; i++)
 800486a:	2300      	movs	r3, #0
 800486c:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
 8004870:	f897 3173 	ldrb.w	r3, [r7, #371]	; 0x173
 8004874:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8004878:	429a      	cmp	r2, r3
 800487a:	d212      	bcs.n	80048a2 <_Z4loopv+0x41a>
	      	msgTransmit[i] = msg[i];
 800487c:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8004880:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8004884:	4413      	add	r3, r2
 8004886:	7819      	ldrb	r1, [r3, #0]
 8004888:	f8d7 2164 	ldr.w	r2, [r7, #356]	; 0x164
 800488c:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8004890:	4413      	add	r3, r2
 8004892:	460a      	mov	r2, r1
 8004894:	701a      	strb	r2, [r3, #0]
	      for (size_t i = 0; i < x; i++)
 8004896:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 800489a:	3301      	adds	r3, #1
 800489c:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
 80048a0:	e7e6      	b.n	8004870 <_Z4loopv+0x3e8>
	      CDC_Transmit_FS((unsigned char*)msgTransmit, sizeof(msgTransmit));
 80048a2:	f8d7 2164 	ldr.w	r2, [r7, #356]	; 0x164
 80048a6:	b2a3      	uxth	r3, r4
 80048a8:	3301      	adds	r3, #1
 80048aa:	b29b      	uxth	r3, r3
 80048ac:	4619      	mov	r1, r3
 80048ae:	4610      	mov	r0, r2
 80048b0:	f008 f94c 	bl	800cb4c <CDC_Transmit_FS>
 80048b4:	f8d7 d004 	ldr.w	sp, [r7, #4]
      for (size_t i = 0; i < 1; i++)
 80048b8:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 80048bc:	3301      	adds	r3, #1
 80048be:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 80048c2:	e6d8      	b.n	8004676 <_Z4loopv+0x1ee>
      //  }
      //  CDC_Transmit_FS((unsigned char*)msgTransmit, sizeof(msgTransmit));
      //}
      break;
    case 3:
      Debug_CNT = TIM4->CNT;
 80048c4:	4b2c      	ldr	r3, [pc, #176]	; (8004978 <_Z4loopv+0x4f0>)
 80048c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048c8:	b29a      	uxth	r2, r3
 80048ca:	4b2c      	ldr	r3, [pc, #176]	; (800497c <_Z4loopv+0x4f4>)
 80048cc:	801a      	strh	r2, [r3, #0]
      getWXQuaternion();
 80048ce:	f7fe fa47 	bl	8002d60 <_Z15getWXQuaternionv>
      Update_FrameOriginQuaternion();
 80048d2:	f7fe faf7 	bl	8002ec4 <_Z28Update_FrameOriginQuaternionv>
      Debug_diff = TIM4->CNT - Debug_CNT;
 80048d6:	4b28      	ldr	r3, [pc, #160]	; (8004978 <_Z4loopv+0x4f0>)
 80048d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048da:	b29a      	uxth	r2, r3
 80048dc:	4b27      	ldr	r3, [pc, #156]	; (800497c <_Z4loopv+0x4f4>)
 80048de:	881b      	ldrh	r3, [r3, #0]
 80048e0:	1ad3      	subs	r3, r2, r3
 80048e2:	b29a      	uxth	r2, r3
 80048e4:	4b26      	ldr	r3, [pc, #152]	; (8004980 <_Z4loopv+0x4f8>)
 80048e6:	801a      	strh	r2, [r3, #0]
      break;
 80048e8:	e06b      	b.n	80049c2 <_Z4loopv+0x53a>
    case 4:
      MPU6050_readQuaternionBytes();
 80048ea:	f7fd f8df 	bl	8001aac <_Z27MPU6050_readQuaternionBytesv>
      HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80048ee:	2006      	movs	r0, #6
 80048f0:	f000 ffbf 	bl	8005872 <HAL_NVIC_EnableIRQ>
      break;
 80048f4:	e065      	b.n	80049c2 <_Z4loopv+0x53a>
    case 5:
      MPU6050_ConvertToQuaternions();
 80048f6:	f7fd f98d 	bl	8001c14 <_Z28MPU6050_ConvertToQuaternionsv>
      HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80048fa:	2006      	movs	r0, #6
 80048fc:	f000 ffb9 	bl	8005872 <HAL_NVIC_EnableIRQ>
      Update_PID();
 8004900:	f7fe fb74 	bl	8002fec <_Z10Update_PIDv>
      if (SBUS_Channels[2] > -990)
 8004904:	4b1f      	ldr	r3, [pc, #124]	; (8004984 <_Z4loopv+0x4fc>)
 8004906:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800490a:	f46f 7277 	mvn.w	r2, #988	; 0x3dc
 800490e:	4293      	cmp	r3, r2
 8004910:	db0e      	blt.n	8004930 <_Z4loopv+0x4a8>
      {
        TIM3->CCR1 = (uint16_t)(slowPPM1_MinTime + 1000 - ((slowPPM1_MaxTime - slowPPM1_MinTime) / 2) - PID_Yaw_y);
 8004912:	4b12      	ldr	r3, [pc, #72]	; (800495c <_Z4loopv+0x4d4>)
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	4619      	mov	r1, r3
 8004918:	481b      	ldr	r0, [pc, #108]	; (8004988 <_Z4loopv+0x500>)
 800491a:	f7fc f945 	bl	8000ba8 <__aeabi_fsub>
 800491e:	4603      	mov	r3, r0
 8004920:	4618      	mov	r0, r3
 8004922:	f7fc fc4d 	bl	80011c0 <__aeabi_f2uiz>
 8004926:	4603      	mov	r3, r0
 8004928:	b29a      	uxth	r2, r3
 800492a:	4b18      	ldr	r3, [pc, #96]	; (800498c <_Z4loopv+0x504>)
 800492c:	635a      	str	r2, [r3, #52]	; 0x34
      }
      else
      {
        TIM3->CCR1 = slowPPM1_MinTime;
      }
      break;
 800492e:	e048      	b.n	80049c2 <_Z4loopv+0x53a>
        TIM3->CCR1 = slowPPM1_MinTime;
 8004930:	4b16      	ldr	r3, [pc, #88]	; (800498c <_Z4loopv+0x504>)
 8004932:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004936:	635a      	str	r2, [r3, #52]	; 0x34
      break;
 8004938:	e043      	b.n	80049c2 <_Z4loopv+0x53a>
 800493a:	bf00      	nop
 800493c:	f3af 8000 	nop.w
 8004940:	54442d18 	.word	0x54442d18
 8004944:	400921fb 	.word	0x400921fb
 8004948:	200004a8 	.word	0x200004a8
 800494c:	200004ac 	.word	0x200004ac
 8004950:	200004b0 	.word	0x200004b0
 8004954:	200004b4 	.word	0x200004b4
 8004958:	200004b8 	.word	0x200004b8
 800495c:	200004bc 	.word	0x200004bc
 8004960:	20000518 	.word	0x20000518
 8004964:	42c80000 	.word	0x42c80000
 8004968:	200004c0 	.word	0x200004c0
 800496c:	43340000 	.word	0x43340000
 8004970:	200009b0 	.word	0x200009b0
 8004974:	08012720 	.word	0x08012720
 8004978:	40000800 	.word	0x40000800
 800497c:	200009b4 	.word	0x200009b4
 8004980:	200009b6 	.word	0x200009b6
 8004984:	200006c8 	.word	0x200006c8
 8004988:	44bb8000 	.word	0x44bb8000
 800498c:	40000400 	.word	0x40000400
    case 6:
      HAL_GPIO_TogglePin(ONBOARD_LED_1_GPIO_Port, ONBOARD_LED_1_Pin);   //debug Pin
 8004990:	2110      	movs	r1, #16
 8004992:	4820      	ldr	r0, [pc, #128]	; (8004a14 <_Z4loopv+0x58c>)
 8004994:	f001 fc32 	bl	80061fc <HAL_GPIO_TogglePin>
      if (SBUS_Channels[4] >= 999) getPIDValues();
 8004998:	4b1f      	ldr	r3, [pc, #124]	; (8004a18 <_Z4loopv+0x590>)
 800499a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800499e:	f240 32e6 	movw	r2, #998	; 0x3e6
 80049a2:	4293      	cmp	r3, r2
 80049a4:	dd0c      	ble.n	80049c0 <_Z4loopv+0x538>
 80049a6:	f7fe fcd9 	bl	800335c <_Z12getPIDValuesv>
      break;
 80049aa:	e009      	b.n	80049c0 <_Z4loopv+0x538>
    case 9:
      Step = 255;
 80049ac:	4b1b      	ldr	r3, [pc, #108]	; (8004a1c <_Z4loopv+0x594>)
 80049ae:	22ff      	movs	r2, #255	; 0xff
 80049b0:	701a      	strb	r2, [r3, #0]
      break;
 80049b2:	e006      	b.n	80049c2 <_Z4loopv+0x53a>
    default:
      break;
 80049b4:	bf00      	nop
 80049b6:	e004      	b.n	80049c2 <_Z4loopv+0x53a>
      break;
 80049b8:	bf00      	nop
 80049ba:	e002      	b.n	80049c2 <_Z4loopv+0x53a>
      break;
 80049bc:	bf00      	nop
 80049be:	e000      	b.n	80049c2 <_Z4loopv+0x53a>
      break;
 80049c0:	bf00      	nop
    }
    Step ++;
 80049c2:	4b16      	ldr	r3, [pc, #88]	; (8004a1c <_Z4loopv+0x594>)
 80049c4:	781b      	ldrb	r3, [r3, #0]
 80049c6:	3301      	adds	r3, #1
 80049c8:	b2da      	uxtb	r2, r3
 80049ca:	4b14      	ldr	r3, [pc, #80]	; (8004a1c <_Z4loopv+0x594>)
 80049cc:	701a      	strb	r2, [r3, #0]
    while (TIM4->CNT <= 1000)
 80049ce:	4b14      	ldr	r3, [pc, #80]	; (8004a20 <_Z4loopv+0x598>)
 80049d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049d2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80049d6:	bf94      	ite	ls
 80049d8:	2301      	movls	r3, #1
 80049da:	2300      	movhi	r3, #0
 80049dc:	b2db      	uxtb	r3, r3
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d000      	beq.n	80049e4 <_Z4loopv+0x55c>
 80049e2:	e7f4      	b.n	80049ce <_Z4loopv+0x546>
    {
    }
  }
  
  if ((HAL_GetTick() - timestamp) >= 50)
 80049e4:	f000 fc06 	bl	80051f4 <HAL_GetTick>
 80049e8:	4602      	mov	r2, r0
 80049ea:	4b0e      	ldr	r3, [pc, #56]	; (8004a24 <_Z4loopv+0x59c>)
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	1ad3      	subs	r3, r2, r3
 80049f0:	2b31      	cmp	r3, #49	; 0x31
 80049f2:	bf8c      	ite	hi
 80049f4:	2301      	movhi	r3, #1
 80049f6:	2300      	movls	r3, #0
 80049f8:	b2db      	uxtb	r3, r3
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d004      	beq.n	8004a08 <_Z4loopv+0x580>
  {
    timestamp += 50;
 80049fe:	4b09      	ldr	r3, [pc, #36]	; (8004a24 <_Z4loopv+0x59c>)
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	3332      	adds	r3, #50	; 0x32
 8004a04:	4a07      	ldr	r2, [pc, #28]	; (8004a24 <_Z4loopv+0x59c>)
 8004a06:	6013      	str	r3, [r2, #0]
  //// fastPPM_ONTime = (uint16_t)((((float)angle * (float)fastPPM_MinTime) / (float)360) + (float)fastPPM_MinTime);
  //fastPPM_ONTime = (uint16_t)(fastPPM_MinTime + ((float)SBUS_Channels[2] / 2));
  //fastPPM_OFFTime = fastPPM_Pulselength - fastPPM_ONTime;//OFF time in microseconds
  //TIM4->CCR1 = (uint16_t)(fastPPM_MinTime + 500 + ((float)SBUS_Channels[2] / 2) + ((float)sin((angle + 0) * (M_PI / 180)) * ((float)SBUS_Channels[0] / -10)) + ((float)cos((angle + 0) * (M_PI / 180)) * ((float)SBUS_Channels[1] / -10)));
  }
}
 8004a08:	bf00      	nop
 8004a0a:	f507 77be 	add.w	r7, r7, #380	; 0x17c
 8004a0e:	46bd      	mov	sp, r7
 8004a10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004a14:	40020000 	.word	0x40020000
 8004a18:	200006c8 	.word	0x200006c8
 8004a1c:	200009b2 	.word	0x200009b2
 8004a20:	40000800 	.word	0x40000800
 8004a24:	200009a8 	.word	0x200009a8

08004a28 <_Z41__static_initialization_and_destruction_0ii>:
        }
      }  
      angle = offset + ((atan((float)hall_1 / (float)hall_2) * 180) / M_PI);
    }  
    return angle;
}
 8004a28:	b480      	push	{r7}
 8004a2a:	b083      	sub	sp, #12
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	6078      	str	r0, [r7, #4]
 8004a30:	6039      	str	r1, [r7, #0]
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	2b01      	cmp	r3, #1
 8004a36:	d109      	bne.n	8004a4c <_Z41__static_initialization_and_destruction_0ii+0x24>
 8004a38:	683b      	ldr	r3, [r7, #0]
 8004a3a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004a3e:	4293      	cmp	r3, r2
 8004a40:	d104      	bne.n	8004a4c <_Z41__static_initialization_and_destruction_0ii+0x24>
uint16_t Debug_CNT = TIM4->CNT;
 8004a42:	4b05      	ldr	r3, [pc, #20]	; (8004a58 <_Z41__static_initialization_and_destruction_0ii+0x30>)
 8004a44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a46:	b29a      	uxth	r2, r3
 8004a48:	4b04      	ldr	r3, [pc, #16]	; (8004a5c <_Z41__static_initialization_and_destruction_0ii+0x34>)
 8004a4a:	801a      	strh	r2, [r3, #0]
}
 8004a4c:	bf00      	nop
 8004a4e:	370c      	adds	r7, #12
 8004a50:	46bd      	mov	sp, r7
 8004a52:	bc80      	pop	{r7}
 8004a54:	4770      	bx	lr
 8004a56:	bf00      	nop
 8004a58:	40000800 	.word	0x40000800
 8004a5c:	200009b4 	.word	0x200009b4

08004a60 <_GLOBAL__sub_I_timestamp>:
 8004a60:	b580      	push	{r7, lr}
 8004a62:	af00      	add	r7, sp, #0
 8004a64:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8004a68:	2001      	movs	r0, #1
 8004a6a:	f7ff ffdd 	bl	8004a28 <_Z41__static_initialization_and_destruction_0ii>
 8004a6e:	bd80      	pop	{r7, pc}

08004a70 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004a70:	b480      	push	{r7}
 8004a72:	b083      	sub	sp, #12
 8004a74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004a76:	2300      	movs	r3, #0
 8004a78:	607b      	str	r3, [r7, #4]
 8004a7a:	4b0f      	ldr	r3, [pc, #60]	; (8004ab8 <HAL_MspInit+0x48>)
 8004a7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a7e:	4a0e      	ldr	r2, [pc, #56]	; (8004ab8 <HAL_MspInit+0x48>)
 8004a80:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004a84:	6453      	str	r3, [r2, #68]	; 0x44
 8004a86:	4b0c      	ldr	r3, [pc, #48]	; (8004ab8 <HAL_MspInit+0x48>)
 8004a88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a8a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004a8e:	607b      	str	r3, [r7, #4]
 8004a90:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004a92:	2300      	movs	r3, #0
 8004a94:	603b      	str	r3, [r7, #0]
 8004a96:	4b08      	ldr	r3, [pc, #32]	; (8004ab8 <HAL_MspInit+0x48>)
 8004a98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a9a:	4a07      	ldr	r2, [pc, #28]	; (8004ab8 <HAL_MspInit+0x48>)
 8004a9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004aa0:	6413      	str	r3, [r2, #64]	; 0x40
 8004aa2:	4b05      	ldr	r3, [pc, #20]	; (8004ab8 <HAL_MspInit+0x48>)
 8004aa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aa6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004aaa:	603b      	str	r3, [r7, #0]
 8004aac:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004aae:	bf00      	nop
 8004ab0:	370c      	adds	r7, #12
 8004ab2:	46bd      	mov	sp, r7
 8004ab4:	bc80      	pop	{r7}
 8004ab6:	4770      	bx	lr
 8004ab8:	40023800 	.word	0x40023800

08004abc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8004abc:	b580      	push	{r7, lr}
 8004abe:	b08a      	sub	sp, #40	; 0x28
 8004ac0:	af00      	add	r7, sp, #0
 8004ac2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004ac4:	f107 0314 	add.w	r3, r7, #20
 8004ac8:	2200      	movs	r2, #0
 8004aca:	601a      	str	r2, [r3, #0]
 8004acc:	605a      	str	r2, [r3, #4]
 8004ace:	609a      	str	r2, [r3, #8]
 8004ad0:	60da      	str	r2, [r3, #12]
 8004ad2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	4a17      	ldr	r2, [pc, #92]	; (8004b38 <HAL_ADC_MspInit+0x7c>)
 8004ada:	4293      	cmp	r3, r2
 8004adc:	d127      	bne.n	8004b2e <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8004ade:	2300      	movs	r3, #0
 8004ae0:	613b      	str	r3, [r7, #16]
 8004ae2:	4b16      	ldr	r3, [pc, #88]	; (8004b3c <HAL_ADC_MspInit+0x80>)
 8004ae4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ae6:	4a15      	ldr	r2, [pc, #84]	; (8004b3c <HAL_ADC_MspInit+0x80>)
 8004ae8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004aec:	6453      	str	r3, [r2, #68]	; 0x44
 8004aee:	4b13      	ldr	r3, [pc, #76]	; (8004b3c <HAL_ADC_MspInit+0x80>)
 8004af0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004af2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004af6:	613b      	str	r3, [r7, #16]
 8004af8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004afa:	2300      	movs	r3, #0
 8004afc:	60fb      	str	r3, [r7, #12]
 8004afe:	4b0f      	ldr	r3, [pc, #60]	; (8004b3c <HAL_ADC_MspInit+0x80>)
 8004b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b02:	4a0e      	ldr	r2, [pc, #56]	; (8004b3c <HAL_ADC_MspInit+0x80>)
 8004b04:	f043 0304 	orr.w	r3, r3, #4
 8004b08:	6313      	str	r3, [r2, #48]	; 0x30
 8004b0a:	4b0c      	ldr	r3, [pc, #48]	; (8004b3c <HAL_ADC_MspInit+0x80>)
 8004b0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b0e:	f003 0304 	and.w	r3, r3, #4
 8004b12:	60fb      	str	r3, [r7, #12]
 8004b14:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC1     ------> ADC1_IN11
    PC2     ------> ADC1_IN12
    */
    GPIO_InitStruct.Pin = ONBOARD_ADC_2_Pin|ONBOARD_ADC_1_Pin;
 8004b16:	2306      	movs	r3, #6
 8004b18:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004b1a:	2303      	movs	r3, #3
 8004b1c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b1e:	2300      	movs	r3, #0
 8004b20:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004b22:	f107 0314 	add.w	r3, r7, #20
 8004b26:	4619      	mov	r1, r3
 8004b28:	4805      	ldr	r0, [pc, #20]	; (8004b40 <HAL_ADC_MspInit+0x84>)
 8004b2a:	f001 f9b1 	bl	8005e90 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8004b2e:	bf00      	nop
 8004b30:	3728      	adds	r7, #40	; 0x28
 8004b32:	46bd      	mov	sp, r7
 8004b34:	bd80      	pop	{r7, pc}
 8004b36:	bf00      	nop
 8004b38:	40012000 	.word	0x40012000
 8004b3c:	40023800 	.word	0x40023800
 8004b40:	40020800 	.word	0x40020800

08004b44 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004b44:	b580      	push	{r7, lr}
 8004b46:	b08a      	sub	sp, #40	; 0x28
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004b4c:	f107 0314 	add.w	r3, r7, #20
 8004b50:	2200      	movs	r2, #0
 8004b52:	601a      	str	r2, [r3, #0]
 8004b54:	605a      	str	r2, [r3, #4]
 8004b56:	609a      	str	r2, [r3, #8]
 8004b58:	60da      	str	r2, [r3, #12]
 8004b5a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	4a48      	ldr	r2, [pc, #288]	; (8004c84 <HAL_I2C_MspInit+0x140>)
 8004b62:	4293      	cmp	r3, r2
 8004b64:	f040 8089 	bne.w	8004c7a <HAL_I2C_MspInit+0x136>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004b68:	2300      	movs	r3, #0
 8004b6a:	613b      	str	r3, [r7, #16]
 8004b6c:	4b46      	ldr	r3, [pc, #280]	; (8004c88 <HAL_I2C_MspInit+0x144>)
 8004b6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b70:	4a45      	ldr	r2, [pc, #276]	; (8004c88 <HAL_I2C_MspInit+0x144>)
 8004b72:	f043 0302 	orr.w	r3, r3, #2
 8004b76:	6313      	str	r3, [r2, #48]	; 0x30
 8004b78:	4b43      	ldr	r3, [pc, #268]	; (8004c88 <HAL_I2C_MspInit+0x144>)
 8004b7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b7c:	f003 0302 	and.w	r3, r3, #2
 8004b80:	613b      	str	r3, [r7, #16]
 8004b82:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8004b84:	f44f 7340 	mov.w	r3, #768	; 0x300
 8004b88:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004b8a:	2312      	movs	r3, #18
 8004b8c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b8e:	2300      	movs	r3, #0
 8004b90:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004b92:	2303      	movs	r3, #3
 8004b94:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8004b96:	2304      	movs	r3, #4
 8004b98:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004b9a:	f107 0314 	add.w	r3, r7, #20
 8004b9e:	4619      	mov	r1, r3
 8004ba0:	483a      	ldr	r0, [pc, #232]	; (8004c8c <HAL_I2C_MspInit+0x148>)
 8004ba2:	f001 f975 	bl	8005e90 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004ba6:	2300      	movs	r3, #0
 8004ba8:	60fb      	str	r3, [r7, #12]
 8004baa:	4b37      	ldr	r3, [pc, #220]	; (8004c88 <HAL_I2C_MspInit+0x144>)
 8004bac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bae:	4a36      	ldr	r2, [pc, #216]	; (8004c88 <HAL_I2C_MspInit+0x144>)
 8004bb0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004bb4:	6413      	str	r3, [r2, #64]	; 0x40
 8004bb6:	4b34      	ldr	r3, [pc, #208]	; (8004c88 <HAL_I2C_MspInit+0x144>)
 8004bb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bba:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004bbe:	60fb      	str	r3, [r7, #12]
 8004bc0:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream6;
 8004bc2:	4b33      	ldr	r3, [pc, #204]	; (8004c90 <HAL_I2C_MspInit+0x14c>)
 8004bc4:	4a33      	ldr	r2, [pc, #204]	; (8004c94 <HAL_I2C_MspInit+0x150>)
 8004bc6:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_1;
 8004bc8:	4b31      	ldr	r3, [pc, #196]	; (8004c90 <HAL_I2C_MspInit+0x14c>)
 8004bca:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004bce:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004bd0:	4b2f      	ldr	r3, [pc, #188]	; (8004c90 <HAL_I2C_MspInit+0x14c>)
 8004bd2:	2240      	movs	r2, #64	; 0x40
 8004bd4:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004bd6:	4b2e      	ldr	r3, [pc, #184]	; (8004c90 <HAL_I2C_MspInit+0x14c>)
 8004bd8:	2200      	movs	r2, #0
 8004bda:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004bdc:	4b2c      	ldr	r3, [pc, #176]	; (8004c90 <HAL_I2C_MspInit+0x14c>)
 8004bde:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004be2:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004be4:	4b2a      	ldr	r3, [pc, #168]	; (8004c90 <HAL_I2C_MspInit+0x14c>)
 8004be6:	2200      	movs	r2, #0
 8004be8:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004bea:	4b29      	ldr	r3, [pc, #164]	; (8004c90 <HAL_I2C_MspInit+0x14c>)
 8004bec:	2200      	movs	r2, #0
 8004bee:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8004bf0:	4b27      	ldr	r3, [pc, #156]	; (8004c90 <HAL_I2C_MspInit+0x14c>)
 8004bf2:	2200      	movs	r2, #0
 8004bf4:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8004bf6:	4b26      	ldr	r3, [pc, #152]	; (8004c90 <HAL_I2C_MspInit+0x14c>)
 8004bf8:	2200      	movs	r2, #0
 8004bfa:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004bfc:	4b24      	ldr	r3, [pc, #144]	; (8004c90 <HAL_I2C_MspInit+0x14c>)
 8004bfe:	2200      	movs	r2, #0
 8004c00:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8004c02:	4823      	ldr	r0, [pc, #140]	; (8004c90 <HAL_I2C_MspInit+0x14c>)
 8004c04:	f000 fe5e 	bl	80058c4 <HAL_DMA_Init>
 8004c08:	4603      	mov	r3, r0
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d001      	beq.n	8004c12 <HAL_I2C_MspInit+0xce>
    {
      Error_Handler();
 8004c0e:	f7ff fbf7 	bl	8004400 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	4a1e      	ldr	r2, [pc, #120]	; (8004c90 <HAL_I2C_MspInit+0x14c>)
 8004c16:	635a      	str	r2, [r3, #52]	; 0x34
 8004c18:	4a1d      	ldr	r2, [pc, #116]	; (8004c90 <HAL_I2C_MspInit+0x14c>)
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 8004c1e:	4b1e      	ldr	r3, [pc, #120]	; (8004c98 <HAL_I2C_MspInit+0x154>)
 8004c20:	4a1e      	ldr	r2, [pc, #120]	; (8004c9c <HAL_I2C_MspInit+0x158>)
 8004c22:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 8004c24:	4b1c      	ldr	r3, [pc, #112]	; (8004c98 <HAL_I2C_MspInit+0x154>)
 8004c26:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004c2a:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004c2c:	4b1a      	ldr	r3, [pc, #104]	; (8004c98 <HAL_I2C_MspInit+0x154>)
 8004c2e:	2200      	movs	r2, #0
 8004c30:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004c32:	4b19      	ldr	r3, [pc, #100]	; (8004c98 <HAL_I2C_MspInit+0x154>)
 8004c34:	2200      	movs	r2, #0
 8004c36:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004c38:	4b17      	ldr	r3, [pc, #92]	; (8004c98 <HAL_I2C_MspInit+0x154>)
 8004c3a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004c3e:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004c40:	4b15      	ldr	r3, [pc, #84]	; (8004c98 <HAL_I2C_MspInit+0x154>)
 8004c42:	2200      	movs	r2, #0
 8004c44:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004c46:	4b14      	ldr	r3, [pc, #80]	; (8004c98 <HAL_I2C_MspInit+0x154>)
 8004c48:	2200      	movs	r2, #0
 8004c4a:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8004c4c:	4b12      	ldr	r3, [pc, #72]	; (8004c98 <HAL_I2C_MspInit+0x154>)
 8004c4e:	2200      	movs	r2, #0
 8004c50:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8004c52:	4b11      	ldr	r3, [pc, #68]	; (8004c98 <HAL_I2C_MspInit+0x154>)
 8004c54:	2200      	movs	r2, #0
 8004c56:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004c58:	4b0f      	ldr	r3, [pc, #60]	; (8004c98 <HAL_I2C_MspInit+0x154>)
 8004c5a:	2200      	movs	r2, #0
 8004c5c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8004c5e:	480e      	ldr	r0, [pc, #56]	; (8004c98 <HAL_I2C_MspInit+0x154>)
 8004c60:	f000 fe30 	bl	80058c4 <HAL_DMA_Init>
 8004c64:	4603      	mov	r3, r0
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d001      	beq.n	8004c6e <HAL_I2C_MspInit+0x12a>
    {
      Error_Handler();
 8004c6a:	f7ff fbc9 	bl	8004400 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	4a09      	ldr	r2, [pc, #36]	; (8004c98 <HAL_I2C_MspInit+0x154>)
 8004c72:	639a      	str	r2, [r3, #56]	; 0x38
 8004c74:	4a08      	ldr	r2, [pc, #32]	; (8004c98 <HAL_I2C_MspInit+0x154>)
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8004c7a:	bf00      	nop
 8004c7c:	3728      	adds	r7, #40	; 0x28
 8004c7e:	46bd      	mov	sp, r7
 8004c80:	bd80      	pop	{r7, pc}
 8004c82:	bf00      	nop
 8004c84:	40005400 	.word	0x40005400
 8004c88:	40023800 	.word	0x40023800
 8004c8c:	40020400 	.word	0x40020400
 8004c90:	20000778 	.word	0x20000778
 8004c94:	400260a0 	.word	0x400260a0
 8004c98:	200007d8 	.word	0x200007d8
 8004c9c:	40026010 	.word	0x40026010

08004ca0 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8004ca0:	b480      	push	{r7}
 8004ca2:	b085      	sub	sp, #20
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	4a14      	ldr	r2, [pc, #80]	; (8004d00 <HAL_TIM_PWM_MspInit+0x60>)
 8004cae:	4293      	cmp	r3, r2
 8004cb0:	d10e      	bne.n	8004cd0 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004cb2:	2300      	movs	r3, #0
 8004cb4:	60fb      	str	r3, [r7, #12]
 8004cb6:	4b13      	ldr	r3, [pc, #76]	; (8004d04 <HAL_TIM_PWM_MspInit+0x64>)
 8004cb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cba:	4a12      	ldr	r2, [pc, #72]	; (8004d04 <HAL_TIM_PWM_MspInit+0x64>)
 8004cbc:	f043 0302 	orr.w	r3, r3, #2
 8004cc0:	6413      	str	r3, [r2, #64]	; 0x40
 8004cc2:	4b10      	ldr	r3, [pc, #64]	; (8004d04 <HAL_TIM_PWM_MspInit+0x64>)
 8004cc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cc6:	f003 0302 	and.w	r3, r3, #2
 8004cca:	60fb      	str	r3, [r7, #12]
 8004ccc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8004cce:	e012      	b.n	8004cf6 <HAL_TIM_PWM_MspInit+0x56>
  else if(htim_pwm->Instance==TIM4)
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	4a0c      	ldr	r2, [pc, #48]	; (8004d08 <HAL_TIM_PWM_MspInit+0x68>)
 8004cd6:	4293      	cmp	r3, r2
 8004cd8:	d10d      	bne.n	8004cf6 <HAL_TIM_PWM_MspInit+0x56>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8004cda:	2300      	movs	r3, #0
 8004cdc:	60bb      	str	r3, [r7, #8]
 8004cde:	4b09      	ldr	r3, [pc, #36]	; (8004d04 <HAL_TIM_PWM_MspInit+0x64>)
 8004ce0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ce2:	4a08      	ldr	r2, [pc, #32]	; (8004d04 <HAL_TIM_PWM_MspInit+0x64>)
 8004ce4:	f043 0304 	orr.w	r3, r3, #4
 8004ce8:	6413      	str	r3, [r2, #64]	; 0x40
 8004cea:	4b06      	ldr	r3, [pc, #24]	; (8004d04 <HAL_TIM_PWM_MspInit+0x64>)
 8004cec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cee:	f003 0304 	and.w	r3, r3, #4
 8004cf2:	60bb      	str	r3, [r7, #8]
 8004cf4:	68bb      	ldr	r3, [r7, #8]
}
 8004cf6:	bf00      	nop
 8004cf8:	3714      	adds	r7, #20
 8004cfa:	46bd      	mov	sp, r7
 8004cfc:	bc80      	pop	{r7}
 8004cfe:	4770      	bx	lr
 8004d00:	40000400 	.word	0x40000400
 8004d04:	40023800 	.word	0x40023800
 8004d08:	40000800 	.word	0x40000800

08004d0c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004d0c:	b580      	push	{r7, lr}
 8004d0e:	b086      	sub	sp, #24
 8004d10:	af00      	add	r7, sp, #0
 8004d12:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM11)
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	4a26      	ldr	r2, [pc, #152]	; (8004db4 <HAL_TIM_Base_MspInit+0xa8>)
 8004d1a:	4293      	cmp	r3, r2
 8004d1c:	d10e      	bne.n	8004d3c <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM11_MspInit 0 */

  /* USER CODE END TIM11_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM11_CLK_ENABLE();
 8004d1e:	2300      	movs	r3, #0
 8004d20:	617b      	str	r3, [r7, #20]
 8004d22:	4b25      	ldr	r3, [pc, #148]	; (8004db8 <HAL_TIM_Base_MspInit+0xac>)
 8004d24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d26:	4a24      	ldr	r2, [pc, #144]	; (8004db8 <HAL_TIM_Base_MspInit+0xac>)
 8004d28:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004d2c:	6453      	str	r3, [r2, #68]	; 0x44
 8004d2e:	4b22      	ldr	r3, [pc, #136]	; (8004db8 <HAL_TIM_Base_MspInit+0xac>)
 8004d30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d32:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004d36:	617b      	str	r3, [r7, #20]
 8004d38:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 8004d3a:	e036      	b.n	8004daa <HAL_TIM_Base_MspInit+0x9e>
  else if(htim_base->Instance==TIM13)
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	4a1e      	ldr	r2, [pc, #120]	; (8004dbc <HAL_TIM_Base_MspInit+0xb0>)
 8004d42:	4293      	cmp	r3, r2
 8004d44:	d116      	bne.n	8004d74 <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM13_CLK_ENABLE();
 8004d46:	2300      	movs	r3, #0
 8004d48:	613b      	str	r3, [r7, #16]
 8004d4a:	4b1b      	ldr	r3, [pc, #108]	; (8004db8 <HAL_TIM_Base_MspInit+0xac>)
 8004d4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d4e:	4a1a      	ldr	r2, [pc, #104]	; (8004db8 <HAL_TIM_Base_MspInit+0xac>)
 8004d50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d54:	6413      	str	r3, [r2, #64]	; 0x40
 8004d56:	4b18      	ldr	r3, [pc, #96]	; (8004db8 <HAL_TIM_Base_MspInit+0xac>)
 8004d58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d5e:	613b      	str	r3, [r7, #16]
 8004d60:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 1, 0);
 8004d62:	2200      	movs	r2, #0
 8004d64:	2101      	movs	r1, #1
 8004d66:	202c      	movs	r0, #44	; 0x2c
 8004d68:	f000 fd67 	bl	800583a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8004d6c:	202c      	movs	r0, #44	; 0x2c
 8004d6e:	f000 fd80 	bl	8005872 <HAL_NVIC_EnableIRQ>
}
 8004d72:	e01a      	b.n	8004daa <HAL_TIM_Base_MspInit+0x9e>
  else if(htim_base->Instance==TIM14)
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	4a11      	ldr	r2, [pc, #68]	; (8004dc0 <HAL_TIM_Base_MspInit+0xb4>)
 8004d7a:	4293      	cmp	r3, r2
 8004d7c:	d115      	bne.n	8004daa <HAL_TIM_Base_MspInit+0x9e>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8004d7e:	2300      	movs	r3, #0
 8004d80:	60fb      	str	r3, [r7, #12]
 8004d82:	4b0d      	ldr	r3, [pc, #52]	; (8004db8 <HAL_TIM_Base_MspInit+0xac>)
 8004d84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d86:	4a0c      	ldr	r2, [pc, #48]	; (8004db8 <HAL_TIM_Base_MspInit+0xac>)
 8004d88:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d8c:	6413      	str	r3, [r2, #64]	; 0x40
 8004d8e:	4b0a      	ldr	r3, [pc, #40]	; (8004db8 <HAL_TIM_Base_MspInit+0xac>)
 8004d90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d96:	60fb      	str	r3, [r7, #12]
 8004d98:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 0, 0);
 8004d9a:	2200      	movs	r2, #0
 8004d9c:	2100      	movs	r1, #0
 8004d9e:	202d      	movs	r0, #45	; 0x2d
 8004da0:	f000 fd4b 	bl	800583a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8004da4:	202d      	movs	r0, #45	; 0x2d
 8004da6:	f000 fd64 	bl	8005872 <HAL_NVIC_EnableIRQ>
}
 8004daa:	bf00      	nop
 8004dac:	3718      	adds	r7, #24
 8004dae:	46bd      	mov	sp, r7
 8004db0:	bd80      	pop	{r7, pc}
 8004db2:	bf00      	nop
 8004db4:	40014800 	.word	0x40014800
 8004db8:	40023800 	.word	0x40023800
 8004dbc:	40001c00 	.word	0x40001c00
 8004dc0:	40002000 	.word	0x40002000

08004dc4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004dc4:	b580      	push	{r7, lr}
 8004dc6:	b08a      	sub	sp, #40	; 0x28
 8004dc8:	af00      	add	r7, sp, #0
 8004dca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004dcc:	f107 0314 	add.w	r3, r7, #20
 8004dd0:	2200      	movs	r2, #0
 8004dd2:	601a      	str	r2, [r3, #0]
 8004dd4:	605a      	str	r2, [r3, #4]
 8004dd6:	609a      	str	r2, [r3, #8]
 8004dd8:	60da      	str	r2, [r3, #12]
 8004dda:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	4a24      	ldr	r2, [pc, #144]	; (8004e74 <HAL_TIM_MspPostInit+0xb0>)
 8004de2:	4293      	cmp	r3, r2
 8004de4:	d11e      	bne.n	8004e24 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004de6:	2300      	movs	r3, #0
 8004de8:	613b      	str	r3, [r7, #16]
 8004dea:	4b23      	ldr	r3, [pc, #140]	; (8004e78 <HAL_TIM_MspPostInit+0xb4>)
 8004dec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dee:	4a22      	ldr	r2, [pc, #136]	; (8004e78 <HAL_TIM_MspPostInit+0xb4>)
 8004df0:	f043 0304 	orr.w	r3, r3, #4
 8004df4:	6313      	str	r3, [r2, #48]	; 0x30
 8004df6:	4b20      	ldr	r3, [pc, #128]	; (8004e78 <HAL_TIM_MspPostInit+0xb4>)
 8004df8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dfa:	f003 0304 	and.w	r3, r3, #4
 8004dfe:	613b      	str	r3, [r7, #16]
 8004e00:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PC6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = ONBOARD_WRITE_4_Pin;
 8004e02:	2340      	movs	r3, #64	; 0x40
 8004e04:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004e06:	2302      	movs	r3, #2
 8004e08:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e0a:	2300      	movs	r3, #0
 8004e0c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004e0e:	2300      	movs	r3, #0
 8004e10:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8004e12:	2302      	movs	r3, #2
 8004e14:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ONBOARD_WRITE_4_GPIO_Port, &GPIO_InitStruct);
 8004e16:	f107 0314 	add.w	r3, r7, #20
 8004e1a:	4619      	mov	r1, r3
 8004e1c:	4817      	ldr	r0, [pc, #92]	; (8004e7c <HAL_TIM_MspPostInit+0xb8>)
 8004e1e:	f001 f837 	bl	8005e90 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8004e22:	e022      	b.n	8004e6a <HAL_TIM_MspPostInit+0xa6>
  else if(htim->Instance==TIM4)
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	4a15      	ldr	r2, [pc, #84]	; (8004e80 <HAL_TIM_MspPostInit+0xbc>)
 8004e2a:	4293      	cmp	r3, r2
 8004e2c:	d11d      	bne.n	8004e6a <HAL_TIM_MspPostInit+0xa6>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004e2e:	2300      	movs	r3, #0
 8004e30:	60fb      	str	r3, [r7, #12]
 8004e32:	4b11      	ldr	r3, [pc, #68]	; (8004e78 <HAL_TIM_MspPostInit+0xb4>)
 8004e34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e36:	4a10      	ldr	r2, [pc, #64]	; (8004e78 <HAL_TIM_MspPostInit+0xb4>)
 8004e38:	f043 0302 	orr.w	r3, r3, #2
 8004e3c:	6313      	str	r3, [r2, #48]	; 0x30
 8004e3e:	4b0e      	ldr	r3, [pc, #56]	; (8004e78 <HAL_TIM_MspPostInit+0xb4>)
 8004e40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e42:	f003 0302 	and.w	r3, r3, #2
 8004e46:	60fb      	str	r3, [r7, #12]
 8004e48:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ONBOARD_WRITE_1_Pin;
 8004e4a:	2340      	movs	r3, #64	; 0x40
 8004e4c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004e4e:	2302      	movs	r3, #2
 8004e50:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e52:	2300      	movs	r3, #0
 8004e54:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004e56:	2300      	movs	r3, #0
 8004e58:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8004e5a:	2302      	movs	r3, #2
 8004e5c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ONBOARD_WRITE_1_GPIO_Port, &GPIO_InitStruct);
 8004e5e:	f107 0314 	add.w	r3, r7, #20
 8004e62:	4619      	mov	r1, r3
 8004e64:	4807      	ldr	r0, [pc, #28]	; (8004e84 <HAL_TIM_MspPostInit+0xc0>)
 8004e66:	f001 f813 	bl	8005e90 <HAL_GPIO_Init>
}
 8004e6a:	bf00      	nop
 8004e6c:	3728      	adds	r7, #40	; 0x28
 8004e6e:	46bd      	mov	sp, r7
 8004e70:	bd80      	pop	{r7, pc}
 8004e72:	bf00      	nop
 8004e74:	40000400 	.word	0x40000400
 8004e78:	40023800 	.word	0x40023800
 8004e7c:	40020800 	.word	0x40020800
 8004e80:	40000800 	.word	0x40000800
 8004e84:	40020400 	.word	0x40020400

08004e88 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004e88:	b580      	push	{r7, lr}
 8004e8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 8004e8c:	f003 ff50 	bl	8008d30 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004e90:	e7fe      	b.n	8004e90 <NMI_Handler+0x8>

08004e92 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004e92:	b480      	push	{r7}
 8004e94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004e96:	e7fe      	b.n	8004e96 <HardFault_Handler+0x4>

08004e98 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004e98:	b480      	push	{r7}
 8004e9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004e9c:	e7fe      	b.n	8004e9c <MemManage_Handler+0x4>

08004e9e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004e9e:	b480      	push	{r7}
 8004ea0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004ea2:	e7fe      	b.n	8004ea2 <BusFault_Handler+0x4>

08004ea4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004ea4:	b480      	push	{r7}
 8004ea6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004ea8:	e7fe      	b.n	8004ea8 <UsageFault_Handler+0x4>

08004eaa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004eaa:	b480      	push	{r7}
 8004eac:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004eae:	bf00      	nop
 8004eb0:	46bd      	mov	sp, r7
 8004eb2:	bc80      	pop	{r7}
 8004eb4:	4770      	bx	lr

08004eb6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004eb6:	b480      	push	{r7}
 8004eb8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004eba:	bf00      	nop
 8004ebc:	46bd      	mov	sp, r7
 8004ebe:	bc80      	pop	{r7}
 8004ec0:	4770      	bx	lr

08004ec2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004ec2:	b480      	push	{r7}
 8004ec4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004ec6:	bf00      	nop
 8004ec8:	46bd      	mov	sp, r7
 8004eca:	bc80      	pop	{r7}
 8004ecc:	4770      	bx	lr

08004ece <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004ece:	b580      	push	{r7, lr}
 8004ed0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004ed2:	f000 f97d 	bl	80051d0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004ed6:	bf00      	nop
 8004ed8:	bd80      	pop	{r7, pc}

08004eda <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8004eda:	b580      	push	{r7, lr}
 8004edc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ONBOARD_READ_IT_3_Pin);
 8004ede:	2001      	movs	r0, #1
 8004ee0:	f001 f9a6 	bl	8006230 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8004ee4:	bf00      	nop
 8004ee6:	bd80      	pop	{r7, pc}

08004ee8 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8004ee8:	b580      	push	{r7, lr}
 8004eea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8004eec:	4802      	ldr	r0, [pc, #8]	; (8004ef8 <DMA1_Stream0_IRQHandler+0x10>)
 8004eee:	f000 fd97 	bl	8005a20 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8004ef2:	bf00      	nop
 8004ef4:	bd80      	pop	{r7, pc}
 8004ef6:	bf00      	nop
 8004ef8:	200007d8 	.word	0x200007d8

08004efc <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8004efc:	b580      	push	{r7, lr}
 8004efe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8004f00:	4802      	ldr	r0, [pc, #8]	; (8004f0c <DMA1_Stream6_IRQHandler+0x10>)
 8004f02:	f000 fd8d 	bl	8005a20 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8004f06:	bf00      	nop
 8004f08:	bd80      	pop	{r7, pc}
 8004f0a:	bf00      	nop
 8004f0c:	20000778 	.word	0x20000778

08004f10 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8004f10:	b580      	push	{r7, lr}
 8004f12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim13);
 8004f14:	4802      	ldr	r0, [pc, #8]	; (8004f20 <TIM8_UP_TIM13_IRQHandler+0x10>)
 8004f16:	f004 f961 	bl	80091dc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 8004f1a:	bf00      	nop
 8004f1c:	bd80      	pop	{r7, pc}
 8004f1e:	bf00      	nop
 8004f20:	20000910 	.word	0x20000910

08004f24 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8004f24:	b580      	push	{r7, lr}
 8004f26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8004f28:	4802      	ldr	r0, [pc, #8]	; (8004f34 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 8004f2a:	f004 f957 	bl	80091dc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8004f2e:	bf00      	nop
 8004f30:	bd80      	pop	{r7, pc}
 8004f32:	bf00      	nop
 8004f34:	20000958 	.word	0x20000958

08004f38 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8004f38:	b580      	push	{r7, lr}
 8004f3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8004f3c:	4802      	ldr	r0, [pc, #8]	; (8004f48 <OTG_FS_IRQHandler+0x10>)
 8004f3e:	f002 fa8c 	bl	800745a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8004f42:	bf00      	nop
 8004f44:	bd80      	pop	{r7, pc}
 8004f46:	bf00      	nop
 8004f48:	20001e90 	.word	0x20001e90

08004f4c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004f4c:	b480      	push	{r7}
 8004f4e:	af00      	add	r7, sp, #0
	return 1;
 8004f50:	2301      	movs	r3, #1
}
 8004f52:	4618      	mov	r0, r3
 8004f54:	46bd      	mov	sp, r7
 8004f56:	bc80      	pop	{r7}
 8004f58:	4770      	bx	lr

08004f5a <_kill>:

int _kill(int pid, int sig)
{
 8004f5a:	b580      	push	{r7, lr}
 8004f5c:	b082      	sub	sp, #8
 8004f5e:	af00      	add	r7, sp, #0
 8004f60:	6078      	str	r0, [r7, #4]
 8004f62:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8004f64:	f00a fce4 	bl	800f930 <__errno>
 8004f68:	4603      	mov	r3, r0
 8004f6a:	2216      	movs	r2, #22
 8004f6c:	601a      	str	r2, [r3, #0]
	return -1;
 8004f6e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004f72:	4618      	mov	r0, r3
 8004f74:	3708      	adds	r7, #8
 8004f76:	46bd      	mov	sp, r7
 8004f78:	bd80      	pop	{r7, pc}

08004f7a <_exit>:

void _exit (int status)
{
 8004f7a:	b580      	push	{r7, lr}
 8004f7c:	b082      	sub	sp, #8
 8004f7e:	af00      	add	r7, sp, #0
 8004f80:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8004f82:	f04f 31ff 	mov.w	r1, #4294967295
 8004f86:	6878      	ldr	r0, [r7, #4]
 8004f88:	f7ff ffe7 	bl	8004f5a <_kill>
	while (1) {}		/* Make sure we hang here */
 8004f8c:	e7fe      	b.n	8004f8c <_exit+0x12>

08004f8e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004f8e:	b580      	push	{r7, lr}
 8004f90:	b086      	sub	sp, #24
 8004f92:	af00      	add	r7, sp, #0
 8004f94:	60f8      	str	r0, [r7, #12]
 8004f96:	60b9      	str	r1, [r7, #8]
 8004f98:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004f9a:	2300      	movs	r3, #0
 8004f9c:	617b      	str	r3, [r7, #20]
 8004f9e:	e00a      	b.n	8004fb6 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8004fa0:	f3af 8000 	nop.w
 8004fa4:	4601      	mov	r1, r0
 8004fa6:	68bb      	ldr	r3, [r7, #8]
 8004fa8:	1c5a      	adds	r2, r3, #1
 8004faa:	60ba      	str	r2, [r7, #8]
 8004fac:	b2ca      	uxtb	r2, r1
 8004fae:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004fb0:	697b      	ldr	r3, [r7, #20]
 8004fb2:	3301      	adds	r3, #1
 8004fb4:	617b      	str	r3, [r7, #20]
 8004fb6:	697a      	ldr	r2, [r7, #20]
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	429a      	cmp	r2, r3
 8004fbc:	dbf0      	blt.n	8004fa0 <_read+0x12>
	}

return len;
 8004fbe:	687b      	ldr	r3, [r7, #4]
}
 8004fc0:	4618      	mov	r0, r3
 8004fc2:	3718      	adds	r7, #24
 8004fc4:	46bd      	mov	sp, r7
 8004fc6:	bd80      	pop	{r7, pc}

08004fc8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004fc8:	b580      	push	{r7, lr}
 8004fca:	b086      	sub	sp, #24
 8004fcc:	af00      	add	r7, sp, #0
 8004fce:	60f8      	str	r0, [r7, #12]
 8004fd0:	60b9      	str	r1, [r7, #8]
 8004fd2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004fd4:	2300      	movs	r3, #0
 8004fd6:	617b      	str	r3, [r7, #20]
 8004fd8:	e009      	b.n	8004fee <_write+0x26>
	{
		__io_putchar(*ptr++);
 8004fda:	68bb      	ldr	r3, [r7, #8]
 8004fdc:	1c5a      	adds	r2, r3, #1
 8004fde:	60ba      	str	r2, [r7, #8]
 8004fe0:	781b      	ldrb	r3, [r3, #0]
 8004fe2:	4618      	mov	r0, r3
 8004fe4:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004fe8:	697b      	ldr	r3, [r7, #20]
 8004fea:	3301      	adds	r3, #1
 8004fec:	617b      	str	r3, [r7, #20]
 8004fee:	697a      	ldr	r2, [r7, #20]
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	429a      	cmp	r2, r3
 8004ff4:	dbf1      	blt.n	8004fda <_write+0x12>
	}
	return len;
 8004ff6:	687b      	ldr	r3, [r7, #4]
}
 8004ff8:	4618      	mov	r0, r3
 8004ffa:	3718      	adds	r7, #24
 8004ffc:	46bd      	mov	sp, r7
 8004ffe:	bd80      	pop	{r7, pc}

08005000 <_close>:

int _close(int file)
{
 8005000:	b480      	push	{r7}
 8005002:	b083      	sub	sp, #12
 8005004:	af00      	add	r7, sp, #0
 8005006:	6078      	str	r0, [r7, #4]
	return -1;
 8005008:	f04f 33ff 	mov.w	r3, #4294967295
}
 800500c:	4618      	mov	r0, r3
 800500e:	370c      	adds	r7, #12
 8005010:	46bd      	mov	sp, r7
 8005012:	bc80      	pop	{r7}
 8005014:	4770      	bx	lr

08005016 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8005016:	b480      	push	{r7}
 8005018:	b083      	sub	sp, #12
 800501a:	af00      	add	r7, sp, #0
 800501c:	6078      	str	r0, [r7, #4]
 800501e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8005020:	683b      	ldr	r3, [r7, #0]
 8005022:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005026:	605a      	str	r2, [r3, #4]
	return 0;
 8005028:	2300      	movs	r3, #0
}
 800502a:	4618      	mov	r0, r3
 800502c:	370c      	adds	r7, #12
 800502e:	46bd      	mov	sp, r7
 8005030:	bc80      	pop	{r7}
 8005032:	4770      	bx	lr

08005034 <_isatty>:

int _isatty(int file)
{
 8005034:	b480      	push	{r7}
 8005036:	b083      	sub	sp, #12
 8005038:	af00      	add	r7, sp, #0
 800503a:	6078      	str	r0, [r7, #4]
	return 1;
 800503c:	2301      	movs	r3, #1
}
 800503e:	4618      	mov	r0, r3
 8005040:	370c      	adds	r7, #12
 8005042:	46bd      	mov	sp, r7
 8005044:	bc80      	pop	{r7}
 8005046:	4770      	bx	lr

08005048 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8005048:	b480      	push	{r7}
 800504a:	b085      	sub	sp, #20
 800504c:	af00      	add	r7, sp, #0
 800504e:	60f8      	str	r0, [r7, #12]
 8005050:	60b9      	str	r1, [r7, #8]
 8005052:	607a      	str	r2, [r7, #4]
	return 0;
 8005054:	2300      	movs	r3, #0
}
 8005056:	4618      	mov	r0, r3
 8005058:	3714      	adds	r7, #20
 800505a:	46bd      	mov	sp, r7
 800505c:	bc80      	pop	{r7}
 800505e:	4770      	bx	lr

08005060 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005060:	b580      	push	{r7, lr}
 8005062:	b086      	sub	sp, #24
 8005064:	af00      	add	r7, sp, #0
 8005066:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005068:	4a14      	ldr	r2, [pc, #80]	; (80050bc <_sbrk+0x5c>)
 800506a:	4b15      	ldr	r3, [pc, #84]	; (80050c0 <_sbrk+0x60>)
 800506c:	1ad3      	subs	r3, r2, r3
 800506e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005070:	697b      	ldr	r3, [r7, #20]
 8005072:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005074:	4b13      	ldr	r3, [pc, #76]	; (80050c4 <_sbrk+0x64>)
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	2b00      	cmp	r3, #0
 800507a:	d102      	bne.n	8005082 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800507c:	4b11      	ldr	r3, [pc, #68]	; (80050c4 <_sbrk+0x64>)
 800507e:	4a12      	ldr	r2, [pc, #72]	; (80050c8 <_sbrk+0x68>)
 8005080:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8005082:	4b10      	ldr	r3, [pc, #64]	; (80050c4 <_sbrk+0x64>)
 8005084:	681a      	ldr	r2, [r3, #0]
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	4413      	add	r3, r2
 800508a:	693a      	ldr	r2, [r7, #16]
 800508c:	429a      	cmp	r2, r3
 800508e:	d207      	bcs.n	80050a0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8005090:	f00a fc4e 	bl	800f930 <__errno>
 8005094:	4603      	mov	r3, r0
 8005096:	220c      	movs	r2, #12
 8005098:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800509a:	f04f 33ff 	mov.w	r3, #4294967295
 800509e:	e009      	b.n	80050b4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80050a0:	4b08      	ldr	r3, [pc, #32]	; (80050c4 <_sbrk+0x64>)
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80050a6:	4b07      	ldr	r3, [pc, #28]	; (80050c4 <_sbrk+0x64>)
 80050a8:	681a      	ldr	r2, [r3, #0]
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	4413      	add	r3, r2
 80050ae:	4a05      	ldr	r2, [pc, #20]	; (80050c4 <_sbrk+0x64>)
 80050b0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80050b2:	68fb      	ldr	r3, [r7, #12]
}
 80050b4:	4618      	mov	r0, r3
 80050b6:	3718      	adds	r7, #24
 80050b8:	46bd      	mov	sp, r7
 80050ba:	bd80      	pop	{r7, pc}
 80050bc:	20020000 	.word	0x20020000
 80050c0:	00000400 	.word	0x00000400
 80050c4:	200009b8 	.word	0x200009b8
 80050c8:	200022a0 	.word	0x200022a0

080050cc <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80050cc:	b480      	push	{r7}
 80050ce:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80050d0:	bf00      	nop
 80050d2:	46bd      	mov	sp, r7
 80050d4:	bc80      	pop	{r7}
 80050d6:	4770      	bx	lr

080050d8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80050d8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005110 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80050dc:	480d      	ldr	r0, [pc, #52]	; (8005114 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80050de:	490e      	ldr	r1, [pc, #56]	; (8005118 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80050e0:	4a0e      	ldr	r2, [pc, #56]	; (800511c <LoopFillZerobss+0x1e>)
  movs r3, #0
 80050e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80050e4:	e002      	b.n	80050ec <LoopCopyDataInit>

080050e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80050e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80050e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80050ea:	3304      	adds	r3, #4

080050ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80050ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80050ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80050f0:	d3f9      	bcc.n	80050e6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80050f2:	4a0b      	ldr	r2, [pc, #44]	; (8005120 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80050f4:	4c0b      	ldr	r4, [pc, #44]	; (8005124 <LoopFillZerobss+0x26>)
  movs r3, #0
 80050f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80050f8:	e001      	b.n	80050fe <LoopFillZerobss>

080050fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80050fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80050fc:	3204      	adds	r2, #4

080050fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80050fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005100:	d3fb      	bcc.n	80050fa <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8005102:	f7ff ffe3 	bl	80050cc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005106:	f00a fc19 	bl	800f93c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800510a:	f7fe fd8d 	bl	8003c28 <main>
  bx  lr    
 800510e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8005110:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8005114:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005118:	20000378 	.word	0x20000378
  ldr r2, =_sidata
 800511c:	080139f4 	.word	0x080139f4
  ldr r2, =_sbss
 8005120:	20000378 	.word	0x20000378
  ldr r4, =_ebss
 8005124:	200022a0 	.word	0x200022a0

08005128 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005128:	e7fe      	b.n	8005128 <ADC_IRQHandler>
	...

0800512c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800512c:	b580      	push	{r7, lr}
 800512e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
   __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8005130:	4b0e      	ldr	r3, [pc, #56]	; (800516c <HAL_Init+0x40>)
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	4a0d      	ldr	r2, [pc, #52]	; (800516c <HAL_Init+0x40>)
 8005136:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800513a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
   __HAL_FLASH_DATA_CACHE_ENABLE();
 800513c:	4b0b      	ldr	r3, [pc, #44]	; (800516c <HAL_Init+0x40>)
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	4a0a      	ldr	r2, [pc, #40]	; (800516c <HAL_Init+0x40>)
 8005142:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005146:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005148:	4b08      	ldr	r3, [pc, #32]	; (800516c <HAL_Init+0x40>)
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	4a07      	ldr	r2, [pc, #28]	; (800516c <HAL_Init+0x40>)
 800514e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005152:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005154:	2003      	movs	r0, #3
 8005156:	f000 fb65 	bl	8005824 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800515a:	200f      	movs	r0, #15
 800515c:	f000 f808 	bl	8005170 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8005160:	f7ff fc86 	bl	8004a70 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8005164:	2300      	movs	r3, #0
}
 8005166:	4618      	mov	r0, r3
 8005168:	bd80      	pop	{r7, pc}
 800516a:	bf00      	nop
 800516c:	40023c00 	.word	0x40023c00

08005170 <HAL_InitTick>:
  *       implementation  in user file.
  * @param  TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005170:	b580      	push	{r7, lr}
 8005172:	b082      	sub	sp, #8
 8005174:	af00      	add	r7, sp, #0
 8005176:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8005178:	4b12      	ldr	r3, [pc, #72]	; (80051c4 <HAL_InitTick+0x54>)
 800517a:	681a      	ldr	r2, [r3, #0]
 800517c:	4b12      	ldr	r3, [pc, #72]	; (80051c8 <HAL_InitTick+0x58>)
 800517e:	781b      	ldrb	r3, [r3, #0]
 8005180:	4619      	mov	r1, r3
 8005182:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005186:	fbb3 f3f1 	udiv	r3, r3, r1
 800518a:	fbb2 f3f3 	udiv	r3, r2, r3
 800518e:	4618      	mov	r0, r3
 8005190:	f000 fb8b 	bl	80058aa <HAL_SYSTICK_Config>
 8005194:	4603      	mov	r3, r0
 8005196:	2b00      	cmp	r3, #0
 8005198:	d001      	beq.n	800519e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800519a:	2301      	movs	r3, #1
 800519c:	e00e      	b.n	80051bc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	2b0f      	cmp	r3, #15
 80051a2:	d80a      	bhi.n	80051ba <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80051a4:	2200      	movs	r2, #0
 80051a6:	6879      	ldr	r1, [r7, #4]
 80051a8:	f04f 30ff 	mov.w	r0, #4294967295
 80051ac:	f000 fb45 	bl	800583a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80051b0:	4a06      	ldr	r2, [pc, #24]	; (80051cc <HAL_InitTick+0x5c>)
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80051b6:	2300      	movs	r3, #0
 80051b8:	e000      	b.n	80051bc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80051ba:	2301      	movs	r3, #1
}
 80051bc:	4618      	mov	r0, r3
 80051be:	3708      	adds	r7, #8
 80051c0:	46bd      	mov	sp, r7
 80051c2:	bd80      	pop	{r7, pc}
 80051c4:	20000024 	.word	0x20000024
 80051c8:	2000002c 	.word	0x2000002c
 80051cc:	20000028 	.word	0x20000028

080051d0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80051d0:	b480      	push	{r7}
 80051d2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80051d4:	4b05      	ldr	r3, [pc, #20]	; (80051ec <HAL_IncTick+0x1c>)
 80051d6:	781b      	ldrb	r3, [r3, #0]
 80051d8:	461a      	mov	r2, r3
 80051da:	4b05      	ldr	r3, [pc, #20]	; (80051f0 <HAL_IncTick+0x20>)
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	4413      	add	r3, r2
 80051e0:	4a03      	ldr	r2, [pc, #12]	; (80051f0 <HAL_IncTick+0x20>)
 80051e2:	6013      	str	r3, [r2, #0]
}
 80051e4:	bf00      	nop
 80051e6:	46bd      	mov	sp, r7
 80051e8:	bc80      	pop	{r7}
 80051ea:	4770      	bx	lr
 80051ec:	2000002c 	.word	0x2000002c
 80051f0:	200009c8 	.word	0x200009c8

080051f4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80051f4:	b480      	push	{r7}
 80051f6:	af00      	add	r7, sp, #0
  return uwTick;
 80051f8:	4b02      	ldr	r3, [pc, #8]	; (8005204 <HAL_GetTick+0x10>)
 80051fa:	681b      	ldr	r3, [r3, #0]
}
 80051fc:	4618      	mov	r0, r3
 80051fe:	46bd      	mov	sp, r7
 8005200:	bc80      	pop	{r7}
 8005202:	4770      	bx	lr
 8005204:	200009c8 	.word	0x200009c8

08005208 <HAL_Delay>:
  *       implementations in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 8005208:	b580      	push	{r7, lr}
 800520a:	b084      	sub	sp, #16
 800520c:	af00      	add	r7, sp, #0
 800520e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005210:	f7ff fff0 	bl	80051f4 <HAL_GetTick>
 8005214:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005220:	d005      	beq.n	800522e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005222:	4b0a      	ldr	r3, [pc, #40]	; (800524c <HAL_Delay+0x44>)
 8005224:	781b      	ldrb	r3, [r3, #0]
 8005226:	461a      	mov	r2, r3
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	4413      	add	r3, r2
 800522c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800522e:	bf00      	nop
 8005230:	f7ff ffe0 	bl	80051f4 <HAL_GetTick>
 8005234:	4602      	mov	r2, r0
 8005236:	68bb      	ldr	r3, [r7, #8]
 8005238:	1ad3      	subs	r3, r2, r3
 800523a:	68fa      	ldr	r2, [r7, #12]
 800523c:	429a      	cmp	r2, r3
 800523e:	d8f7      	bhi.n	8005230 <HAL_Delay+0x28>
  {
  }
}
 8005240:	bf00      	nop
 8005242:	bf00      	nop
 8005244:	3710      	adds	r7, #16
 8005246:	46bd      	mov	sp, r7
 8005248:	bd80      	pop	{r7, pc}
 800524a:	bf00      	nop
 800524c:	2000002c 	.word	0x2000002c

08005250 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8005250:	b580      	push	{r7, lr}
 8005252:	b084      	sub	sp, #16
 8005254:	af00      	add	r7, sp, #0
 8005256:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005258:	2300      	movs	r3, #0
 800525a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	2b00      	cmp	r3, #0
 8005260:	d101      	bne.n	8005266 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8005262:	2301      	movs	r3, #1
 8005264:	e033      	b.n	80052ce <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800526a:	2b00      	cmp	r3, #0
 800526c:	d109      	bne.n	8005282 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800526e:	6878      	ldr	r0, [r7, #4]
 8005270:	f7ff fc24 	bl	8004abc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	2200      	movs	r2, #0
 8005278:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	2200      	movs	r2, #0
 800527e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005286:	f003 0310 	and.w	r3, r3, #16
 800528a:	2b00      	cmp	r3, #0
 800528c:	d118      	bne.n	80052c0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005292:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8005296:	f023 0302 	bic.w	r3, r3, #2
 800529a:	f043 0202 	orr.w	r2, r3, #2
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80052a2:	6878      	ldr	r0, [r7, #4]
 80052a4:	f000 f8c8 	bl	8005438 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	2200      	movs	r2, #0
 80052ac:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052b2:	f023 0303 	bic.w	r3, r3, #3
 80052b6:	f043 0201 	orr.w	r2, r3, #1
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	641a      	str	r2, [r3, #64]	; 0x40
 80052be:	e001      	b.n	80052c4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80052c0:	2301      	movs	r3, #1
 80052c2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	2200      	movs	r2, #0
 80052c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80052cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80052ce:	4618      	mov	r0, r3
 80052d0:	3710      	adds	r7, #16
 80052d2:	46bd      	mov	sp, r7
 80052d4:	bd80      	pop	{r7, pc}
	...

080052d8 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80052d8:	b480      	push	{r7}
 80052da:	b085      	sub	sp, #20
 80052dc:	af00      	add	r7, sp, #0
 80052de:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80052e0:	2300      	movs	r3, #0
 80052e2:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80052ea:	2b01      	cmp	r3, #1
 80052ec:	d101      	bne.n	80052f2 <HAL_ADC_Start+0x1a>
 80052ee:	2302      	movs	r3, #2
 80052f0:	e095      	b.n	800541e <HAL_ADC_Start+0x146>
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	2201      	movs	r2, #1
 80052f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	689b      	ldr	r3, [r3, #8]
 8005300:	f003 0301 	and.w	r3, r3, #1
 8005304:	2b01      	cmp	r3, #1
 8005306:	d018      	beq.n	800533a <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	689a      	ldr	r2, [r3, #8]
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	f042 0201 	orr.w	r2, r2, #1
 8005316:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8005318:	4b43      	ldr	r3, [pc, #268]	; (8005428 <HAL_ADC_Start+0x150>)
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	4a43      	ldr	r2, [pc, #268]	; (800542c <HAL_ADC_Start+0x154>)
 800531e:	fba2 2303 	umull	r2, r3, r2, r3
 8005322:	0c9a      	lsrs	r2, r3, #18
 8005324:	4613      	mov	r3, r2
 8005326:	005b      	lsls	r3, r3, #1
 8005328:	4413      	add	r3, r2
 800532a:	60fb      	str	r3, [r7, #12]
    while(counter != 0U)
 800532c:	e002      	b.n	8005334 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	3b01      	subs	r3, #1
 8005332:	60fb      	str	r3, [r7, #12]
    while(counter != 0U)
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	2b00      	cmp	r3, #0
 8005338:	d1f9      	bne.n	800532e <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	689b      	ldr	r3, [r3, #8]
 8005340:	f003 0301 	and.w	r3, r3, #1
 8005344:	2b01      	cmp	r3, #1
 8005346:	d15d      	bne.n	8005404 <HAL_ADC_Start+0x12c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800534c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8005350:	f023 0301 	bic.w	r3, r3, #1
 8005354:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	685b      	ldr	r3, [r3, #4]
 8005362:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005366:	2b00      	cmp	r3, #0
 8005368:	d007      	beq.n	800537a <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800536e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8005372:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800537e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005382:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005386:	d106      	bne.n	8005396 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800538c:	f023 0206 	bic.w	r2, r3, #6
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	645a      	str	r2, [r3, #68]	; 0x44
 8005394:	e002      	b.n	800539c <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	2200      	movs	r2, #0
 800539a:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	2200      	movs	r2, #0
 80053a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80053ac:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 80053ae:	4b20      	ldr	r3, [pc, #128]	; (8005430 <HAL_ADC_Start+0x158>)
 80053b0:	685b      	ldr	r3, [r3, #4]
 80053b2:	f003 031f 	and.w	r3, r3, #31
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d10f      	bne.n	80053da <HAL_ADC_Start+0x102>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	689b      	ldr	r3, [r3, #8]
 80053c0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d129      	bne.n	800541c <HAL_ADC_Start+0x144>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	689a      	ldr	r2, [r3, #8]
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80053d6:	609a      	str	r2, [r3, #8]
 80053d8:	e020      	b.n	800541c <HAL_ADC_Start+0x144>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	4a15      	ldr	r2, [pc, #84]	; (8005434 <HAL_ADC_Start+0x15c>)
 80053e0:	4293      	cmp	r3, r2
 80053e2:	d11b      	bne.n	800541c <HAL_ADC_Start+0x144>
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	689b      	ldr	r3, [r3, #8]
 80053ea:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d114      	bne.n	800541c <HAL_ADC_Start+0x144>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	689a      	ldr	r2, [r3, #8]
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8005400:	609a      	str	r2, [r3, #8]
 8005402:	e00b      	b.n	800541c <HAL_ADC_Start+0x144>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005408:	f043 0210 	orr.w	r2, r3, #16
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005414:	f043 0201 	orr.w	r2, r3, #1
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 800541c:	2300      	movs	r3, #0
}
 800541e:	4618      	mov	r0, r3
 8005420:	3714      	adds	r7, #20
 8005422:	46bd      	mov	sp, r7
 8005424:	bc80      	pop	{r7}
 8005426:	4770      	bx	lr
 8005428:	20000024 	.word	0x20000024
 800542c:	431bde83 	.word	0x431bde83
 8005430:	40012300 	.word	0x40012300
 8005434:	40012000 	.word	0x40012000

08005438 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8005438:	b480      	push	{r7}
 800543a:	b085      	sub	sp, #20
 800543c:	af00      	add	r7, sp, #0
 800543e:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8005440:	4b7e      	ldr	r3, [pc, #504]	; (800563c <ADC_Init+0x204>)
 8005442:	685b      	ldr	r3, [r3, #4]
 8005444:	4a7d      	ldr	r2, [pc, #500]	; (800563c <ADC_Init+0x204>)
 8005446:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800544a:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 800544c:	4b7b      	ldr	r3, [pc, #492]	; (800563c <ADC_Init+0x204>)
 800544e:	685a      	ldr	r2, [r3, #4]
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	685b      	ldr	r3, [r3, #4]
 8005454:	4979      	ldr	r1, [pc, #484]	; (800563c <ADC_Init+0x204>)
 8005456:	4313      	orrs	r3, r2
 8005458:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	685a      	ldr	r2, [r3, #4]
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005468:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	6859      	ldr	r1, [r3, #4]
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	691b      	ldr	r3, [r3, #16]
 8005474:	021a      	lsls	r2, r3, #8
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	430a      	orrs	r2, r1
 800547c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	685a      	ldr	r2, [r3, #4]
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800548c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	6859      	ldr	r1, [r3, #4]
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	689a      	ldr	r2, [r3, #8]
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	430a      	orrs	r2, r1
 800549e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	689a      	ldr	r2, [r3, #8]
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80054ae:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	6899      	ldr	r1, [r3, #8]
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	68da      	ldr	r2, [r3, #12]
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	430a      	orrs	r2, r1
 80054c0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054c6:	4a5e      	ldr	r2, [pc, #376]	; (8005640 <ADC_Init+0x208>)
 80054c8:	4293      	cmp	r3, r2
 80054ca:	d022      	beq.n	8005512 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	689a      	ldr	r2, [r3, #8]
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80054da:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	6899      	ldr	r1, [r3, #8]
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	430a      	orrs	r2, r1
 80054ec:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	689a      	ldr	r2, [r3, #8]
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80054fc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	6899      	ldr	r1, [r3, #8]
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	430a      	orrs	r2, r1
 800550e:	609a      	str	r2, [r3, #8]
 8005510:	e00f      	b.n	8005532 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	689a      	ldr	r2, [r3, #8]
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005520:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	689a      	ldr	r2, [r3, #8]
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8005530:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	689a      	ldr	r2, [r3, #8]
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	f022 0202 	bic.w	r2, r2, #2
 8005540:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	6899      	ldr	r1, [r3, #8]
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	7e1b      	ldrb	r3, [r3, #24]
 800554c:	005a      	lsls	r2, r3, #1
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	430a      	orrs	r2, r1
 8005554:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	f893 3020 	ldrb.w	r3, [r3, #32]
 800555c:	2b00      	cmp	r3, #0
 800555e:	d027      	beq.n	80055b0 <ADC_Init+0x178>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	685a      	ldr	r2, [r3, #4]
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800556e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	685a      	ldr	r2, [r3, #4]
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800557e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005584:	3b01      	subs	r3, #1
 8005586:	f44f 4260 	mov.w	r2, #57344	; 0xe000
 800558a:	60fa      	str	r2, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800558c:	68fa      	ldr	r2, [r7, #12]
 800558e:	fa92 f2a2 	rbit	r2, r2
 8005592:	60ba      	str	r2, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8005594:	68ba      	ldr	r2, [r7, #8]
 8005596:	fab2 f282 	clz	r2, r2
 800559a:	b2d2      	uxtb	r2, r2
 800559c:	fa03 f102 	lsl.w	r1, r3, r2
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	685a      	ldr	r2, [r3, #4]
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	430a      	orrs	r2, r1
 80055ac:	605a      	str	r2, [r3, #4]
 80055ae:	e007      	b.n	80055c0 <ADC_Init+0x188>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	685a      	ldr	r2, [r3, #4]
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80055be:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80055ce:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	69db      	ldr	r3, [r3, #28]
 80055da:	3b01      	subs	r3, #1
 80055dc:	051a      	lsls	r2, r3, #20
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	430a      	orrs	r2, r1
 80055e4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	689a      	ldr	r2, [r3, #8]
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80055f4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	6899      	ldr	r1, [r3, #8]
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005602:	025a      	lsls	r2, r3, #9
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	430a      	orrs	r2, r1
 800560a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	689a      	ldr	r2, [r3, #8]
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800561a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	6899      	ldr	r1, [r3, #8]
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	695b      	ldr	r3, [r3, #20]
 8005626:	029a      	lsls	r2, r3, #10
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	430a      	orrs	r2, r1
 800562e:	609a      	str	r2, [r3, #8]
}
 8005630:	bf00      	nop
 8005632:	3714      	adds	r7, #20
 8005634:	46bd      	mov	sp, r7
 8005636:	bc80      	pop	{r7}
 8005638:	4770      	bx	lr
 800563a:	bf00      	nop
 800563c:	40012300 	.word	0x40012300
 8005640:	0f000001 	.word	0x0f000001

08005644 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005644:	b480      	push	{r7}
 8005646:	b085      	sub	sp, #20
 8005648:	af00      	add	r7, sp, #0
 800564a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	f003 0307 	and.w	r3, r3, #7
 8005652:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005654:	4b0c      	ldr	r3, [pc, #48]	; (8005688 <__NVIC_SetPriorityGrouping+0x44>)
 8005656:	68db      	ldr	r3, [r3, #12]
 8005658:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800565a:	68ba      	ldr	r2, [r7, #8]
 800565c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005660:	4013      	ands	r3, r2
 8005662:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005668:	68bb      	ldr	r3, [r7, #8]
 800566a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800566c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005670:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005674:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005676:	4a04      	ldr	r2, [pc, #16]	; (8005688 <__NVIC_SetPriorityGrouping+0x44>)
 8005678:	68bb      	ldr	r3, [r7, #8]
 800567a:	60d3      	str	r3, [r2, #12]
}
 800567c:	bf00      	nop
 800567e:	3714      	adds	r7, #20
 8005680:	46bd      	mov	sp, r7
 8005682:	bc80      	pop	{r7}
 8005684:	4770      	bx	lr
 8005686:	bf00      	nop
 8005688:	e000ed00 	.word	0xe000ed00

0800568c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800568c:	b480      	push	{r7}
 800568e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005690:	4b04      	ldr	r3, [pc, #16]	; (80056a4 <__NVIC_GetPriorityGrouping+0x18>)
 8005692:	68db      	ldr	r3, [r3, #12]
 8005694:	0a1b      	lsrs	r3, r3, #8
 8005696:	f003 0307 	and.w	r3, r3, #7
}
 800569a:	4618      	mov	r0, r3
 800569c:	46bd      	mov	sp, r7
 800569e:	bc80      	pop	{r7}
 80056a0:	4770      	bx	lr
 80056a2:	bf00      	nop
 80056a4:	e000ed00 	.word	0xe000ed00

080056a8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80056a8:	b480      	push	{r7}
 80056aa:	b083      	sub	sp, #12
 80056ac:	af00      	add	r7, sp, #0
 80056ae:	4603      	mov	r3, r0
 80056b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80056b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	db0b      	blt.n	80056d2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80056ba:	79fb      	ldrb	r3, [r7, #7]
 80056bc:	f003 021f 	and.w	r2, r3, #31
 80056c0:	4906      	ldr	r1, [pc, #24]	; (80056dc <__NVIC_EnableIRQ+0x34>)
 80056c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80056c6:	095b      	lsrs	r3, r3, #5
 80056c8:	2001      	movs	r0, #1
 80056ca:	fa00 f202 	lsl.w	r2, r0, r2
 80056ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80056d2:	bf00      	nop
 80056d4:	370c      	adds	r7, #12
 80056d6:	46bd      	mov	sp, r7
 80056d8:	bc80      	pop	{r7}
 80056da:	4770      	bx	lr
 80056dc:	e000e100 	.word	0xe000e100

080056e0 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80056e0:	b480      	push	{r7}
 80056e2:	b083      	sub	sp, #12
 80056e4:	af00      	add	r7, sp, #0
 80056e6:	4603      	mov	r3, r0
 80056e8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80056ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	db12      	blt.n	8005718 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80056f2:	79fb      	ldrb	r3, [r7, #7]
 80056f4:	f003 021f 	and.w	r2, r3, #31
 80056f8:	490a      	ldr	r1, [pc, #40]	; (8005724 <__NVIC_DisableIRQ+0x44>)
 80056fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80056fe:	095b      	lsrs	r3, r3, #5
 8005700:	2001      	movs	r0, #1
 8005702:	fa00 f202 	lsl.w	r2, r0, r2
 8005706:	3320      	adds	r3, #32
 8005708:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 800570c:	f3bf 8f4f 	dsb	sy
}
 8005710:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8005712:	f3bf 8f6f 	isb	sy
}
 8005716:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8005718:	bf00      	nop
 800571a:	370c      	adds	r7, #12
 800571c:	46bd      	mov	sp, r7
 800571e:	bc80      	pop	{r7}
 8005720:	4770      	bx	lr
 8005722:	bf00      	nop
 8005724:	e000e100 	.word	0xe000e100

08005728 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005728:	b480      	push	{r7}
 800572a:	b083      	sub	sp, #12
 800572c:	af00      	add	r7, sp, #0
 800572e:	4603      	mov	r3, r0
 8005730:	6039      	str	r1, [r7, #0]
 8005732:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005734:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005738:	2b00      	cmp	r3, #0
 800573a:	db0a      	blt.n	8005752 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800573c:	683b      	ldr	r3, [r7, #0]
 800573e:	b2da      	uxtb	r2, r3
 8005740:	490c      	ldr	r1, [pc, #48]	; (8005774 <__NVIC_SetPriority+0x4c>)
 8005742:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005746:	0112      	lsls	r2, r2, #4
 8005748:	b2d2      	uxtb	r2, r2
 800574a:	440b      	add	r3, r1
 800574c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005750:	e00a      	b.n	8005768 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005752:	683b      	ldr	r3, [r7, #0]
 8005754:	b2da      	uxtb	r2, r3
 8005756:	4908      	ldr	r1, [pc, #32]	; (8005778 <__NVIC_SetPriority+0x50>)
 8005758:	79fb      	ldrb	r3, [r7, #7]
 800575a:	f003 030f 	and.w	r3, r3, #15
 800575e:	3b04      	subs	r3, #4
 8005760:	0112      	lsls	r2, r2, #4
 8005762:	b2d2      	uxtb	r2, r2
 8005764:	440b      	add	r3, r1
 8005766:	761a      	strb	r2, [r3, #24]
}
 8005768:	bf00      	nop
 800576a:	370c      	adds	r7, #12
 800576c:	46bd      	mov	sp, r7
 800576e:	bc80      	pop	{r7}
 8005770:	4770      	bx	lr
 8005772:	bf00      	nop
 8005774:	e000e100 	.word	0xe000e100
 8005778:	e000ed00 	.word	0xe000ed00

0800577c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800577c:	b480      	push	{r7}
 800577e:	b089      	sub	sp, #36	; 0x24
 8005780:	af00      	add	r7, sp, #0
 8005782:	60f8      	str	r0, [r7, #12]
 8005784:	60b9      	str	r1, [r7, #8]
 8005786:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	f003 0307 	and.w	r3, r3, #7
 800578e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005790:	69fb      	ldr	r3, [r7, #28]
 8005792:	f1c3 0307 	rsb	r3, r3, #7
 8005796:	2b04      	cmp	r3, #4
 8005798:	bf28      	it	cs
 800579a:	2304      	movcs	r3, #4
 800579c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800579e:	69fb      	ldr	r3, [r7, #28]
 80057a0:	3304      	adds	r3, #4
 80057a2:	2b06      	cmp	r3, #6
 80057a4:	d902      	bls.n	80057ac <NVIC_EncodePriority+0x30>
 80057a6:	69fb      	ldr	r3, [r7, #28]
 80057a8:	3b03      	subs	r3, #3
 80057aa:	e000      	b.n	80057ae <NVIC_EncodePriority+0x32>
 80057ac:	2300      	movs	r3, #0
 80057ae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80057b0:	f04f 32ff 	mov.w	r2, #4294967295
 80057b4:	69bb      	ldr	r3, [r7, #24]
 80057b6:	fa02 f303 	lsl.w	r3, r2, r3
 80057ba:	43da      	mvns	r2, r3
 80057bc:	68bb      	ldr	r3, [r7, #8]
 80057be:	401a      	ands	r2, r3
 80057c0:	697b      	ldr	r3, [r7, #20]
 80057c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80057c4:	f04f 31ff 	mov.w	r1, #4294967295
 80057c8:	697b      	ldr	r3, [r7, #20]
 80057ca:	fa01 f303 	lsl.w	r3, r1, r3
 80057ce:	43d9      	mvns	r1, r3
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80057d4:	4313      	orrs	r3, r2
         );
}
 80057d6:	4618      	mov	r0, r3
 80057d8:	3724      	adds	r7, #36	; 0x24
 80057da:	46bd      	mov	sp, r7
 80057dc:	bc80      	pop	{r7}
 80057de:	4770      	bx	lr

080057e0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80057e0:	b580      	push	{r7, lr}
 80057e2:	b082      	sub	sp, #8
 80057e4:	af00      	add	r7, sp, #0
 80057e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	3b01      	subs	r3, #1
 80057ec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80057f0:	d301      	bcc.n	80057f6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80057f2:	2301      	movs	r3, #1
 80057f4:	e00f      	b.n	8005816 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80057f6:	4a0a      	ldr	r2, [pc, #40]	; (8005820 <SysTick_Config+0x40>)
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	3b01      	subs	r3, #1
 80057fc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80057fe:	210f      	movs	r1, #15
 8005800:	f04f 30ff 	mov.w	r0, #4294967295
 8005804:	f7ff ff90 	bl	8005728 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005808:	4b05      	ldr	r3, [pc, #20]	; (8005820 <SysTick_Config+0x40>)
 800580a:	2200      	movs	r2, #0
 800580c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800580e:	4b04      	ldr	r3, [pc, #16]	; (8005820 <SysTick_Config+0x40>)
 8005810:	2207      	movs	r2, #7
 8005812:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005814:	2300      	movs	r3, #0
}
 8005816:	4618      	mov	r0, r3
 8005818:	3708      	adds	r7, #8
 800581a:	46bd      	mov	sp, r7
 800581c:	bd80      	pop	{r7, pc}
 800581e:	bf00      	nop
 8005820:	e000e010 	.word	0xe000e010

08005824 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005824:	b580      	push	{r7, lr}
 8005826:	b082      	sub	sp, #8
 8005828:	af00      	add	r7, sp, #0
 800582a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800582c:	6878      	ldr	r0, [r7, #4]
 800582e:	f7ff ff09 	bl	8005644 <__NVIC_SetPriorityGrouping>
}
 8005832:	bf00      	nop
 8005834:	3708      	adds	r7, #8
 8005836:	46bd      	mov	sp, r7
 8005838:	bd80      	pop	{r7, pc}

0800583a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800583a:	b580      	push	{r7, lr}
 800583c:	b086      	sub	sp, #24
 800583e:	af00      	add	r7, sp, #0
 8005840:	4603      	mov	r3, r0
 8005842:	60b9      	str	r1, [r7, #8]
 8005844:	607a      	str	r2, [r7, #4]
 8005846:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005848:	2300      	movs	r3, #0
 800584a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800584c:	f7ff ff1e 	bl	800568c <__NVIC_GetPriorityGrouping>
 8005850:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005852:	687a      	ldr	r2, [r7, #4]
 8005854:	68b9      	ldr	r1, [r7, #8]
 8005856:	6978      	ldr	r0, [r7, #20]
 8005858:	f7ff ff90 	bl	800577c <NVIC_EncodePriority>
 800585c:	4602      	mov	r2, r0
 800585e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005862:	4611      	mov	r1, r2
 8005864:	4618      	mov	r0, r3
 8005866:	f7ff ff5f 	bl	8005728 <__NVIC_SetPriority>
}
 800586a:	bf00      	nop
 800586c:	3718      	adds	r7, #24
 800586e:	46bd      	mov	sp, r7
 8005870:	bd80      	pop	{r7, pc}

08005872 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f2xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005872:	b580      	push	{r7, lr}
 8005874:	b082      	sub	sp, #8
 8005876:	af00      	add	r7, sp, #0
 8005878:	4603      	mov	r3, r0
 800587a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800587c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005880:	4618      	mov	r0, r3
 8005882:	f7ff ff11 	bl	80056a8 <__NVIC_EnableIRQ>
}
 8005886:	bf00      	nop
 8005888:	3708      	adds	r7, #8
 800588a:	46bd      	mov	sp, r7
 800588c:	bd80      	pop	{r7, pc}

0800588e <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f2xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800588e:	b580      	push	{r7, lr}
 8005890:	b082      	sub	sp, #8
 8005892:	af00      	add	r7, sp, #0
 8005894:	4603      	mov	r3, r0
 8005896:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8005898:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800589c:	4618      	mov	r0, r3
 800589e:	f7ff ff1f 	bl	80056e0 <__NVIC_DisableIRQ>
}
 80058a2:	bf00      	nop
 80058a4:	3708      	adds	r7, #8
 80058a6:	46bd      	mov	sp, r7
 80058a8:	bd80      	pop	{r7, pc}

080058aa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80058aa:	b580      	push	{r7, lr}
 80058ac:	b082      	sub	sp, #8
 80058ae:	af00      	add	r7, sp, #0
 80058b0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80058b2:	6878      	ldr	r0, [r7, #4]
 80058b4:	f7ff ff94 	bl	80057e0 <SysTick_Config>
 80058b8:	4603      	mov	r3, r0
}
 80058ba:	4618      	mov	r0, r3
 80058bc:	3708      	adds	r7, #8
 80058be:	46bd      	mov	sp, r7
 80058c0:	bd80      	pop	{r7, pc}
	...

080058c4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80058c4:	b580      	push	{r7, lr}
 80058c6:	b086      	sub	sp, #24
 80058c8:	af00      	add	r7, sp, #0
 80058ca:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80058cc:	2300      	movs	r3, #0
 80058ce:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80058d0:	f7ff fc90 	bl	80051f4 <HAL_GetTick>
 80058d4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d101      	bne.n	80058e0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80058dc:	2301      	movs	r3, #1
 80058de:	e099      	b.n	8005a14 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	2202      	movs	r2, #2
 80058e4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	2200      	movs	r2, #0
 80058ec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	681a      	ldr	r2, [r3, #0]
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	f022 0201 	bic.w	r2, r2, #1
 80058fe:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005900:	e00f      	b.n	8005922 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005902:	f7ff fc77 	bl	80051f4 <HAL_GetTick>
 8005906:	4602      	mov	r2, r0
 8005908:	693b      	ldr	r3, [r7, #16]
 800590a:	1ad3      	subs	r3, r2, r3
 800590c:	2b05      	cmp	r3, #5
 800590e:	d908      	bls.n	8005922 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	2220      	movs	r2, #32
 8005914:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	2203      	movs	r2, #3
 800591a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800591e:	2303      	movs	r3, #3
 8005920:	e078      	b.n	8005a14 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	f003 0301 	and.w	r3, r3, #1
 800592c:	2b00      	cmp	r3, #0
 800592e:	d1e8      	bne.n	8005902 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005938:	697a      	ldr	r2, [r7, #20]
 800593a:	4b38      	ldr	r3, [pc, #224]	; (8005a1c <HAL_DMA_Init+0x158>)
 800593c:	4013      	ands	r3, r2
 800593e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	685a      	ldr	r2, [r3, #4]
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	689b      	ldr	r3, [r3, #8]
 8005948:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800594e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	691b      	ldr	r3, [r3, #16]
 8005954:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800595a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	699b      	ldr	r3, [r3, #24]
 8005960:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005966:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	6a1b      	ldr	r3, [r3, #32]
 800596c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800596e:	697a      	ldr	r2, [r7, #20]
 8005970:	4313      	orrs	r3, r2
 8005972:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005978:	2b04      	cmp	r3, #4
 800597a:	d107      	bne.n	800598c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005984:	4313      	orrs	r3, r2
 8005986:	697a      	ldr	r2, [r7, #20]
 8005988:	4313      	orrs	r3, r2
 800598a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	697a      	ldr	r2, [r7, #20]
 8005992:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	695b      	ldr	r3, [r3, #20]
 800599a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800599c:	697b      	ldr	r3, [r7, #20]
 800599e:	f023 0307 	bic.w	r3, r3, #7
 80059a2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059a8:	697a      	ldr	r2, [r7, #20]
 80059aa:	4313      	orrs	r3, r2
 80059ac:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059b2:	2b04      	cmp	r3, #4
 80059b4:	d117      	bne.n	80059e6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059ba:	697a      	ldr	r2, [r7, #20]
 80059bc:	4313      	orrs	r3, r2
 80059be:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d00e      	beq.n	80059e6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80059c8:	6878      	ldr	r0, [r7, #4]
 80059ca:	f000 f9e7 	bl	8005d9c <DMA_CheckFifoParam>
 80059ce:	4603      	mov	r3, r0
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d008      	beq.n	80059e6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	2240      	movs	r2, #64	; 0x40
 80059d8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	2201      	movs	r2, #1
 80059de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80059e2:	2301      	movs	r3, #1
 80059e4:	e016      	b.n	8005a14 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	697a      	ldr	r2, [r7, #20]
 80059ec:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80059ee:	6878      	ldr	r0, [r7, #4]
 80059f0:	f000 f9a0 	bl	8005d34 <DMA_CalcBaseAndBitshift>
 80059f4:	4603      	mov	r3, r0
 80059f6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80059fc:	223f      	movs	r2, #63	; 0x3f
 80059fe:	409a      	lsls	r2, r3
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	2200      	movs	r2, #0
 8005a08:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	2201      	movs	r2, #1
 8005a0e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8005a12:	2300      	movs	r3, #0
}
 8005a14:	4618      	mov	r0, r3
 8005a16:	3718      	adds	r7, #24
 8005a18:	46bd      	mov	sp, r7
 8005a1a:	bd80      	pop	{r7, pc}
 8005a1c:	f010803f 	.word	0xf010803f

08005a20 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005a20:	b580      	push	{r7, lr}
 8005a22:	b086      	sub	sp, #24
 8005a24:	af00      	add	r7, sp, #0
 8005a26:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8005a28:	2300      	movs	r3, #0
 8005a2a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005a2c:	4b92      	ldr	r3, [pc, #584]	; (8005c78 <HAL_DMA_IRQHandler+0x258>)
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	4a92      	ldr	r2, [pc, #584]	; (8005c7c <HAL_DMA_IRQHandler+0x25c>)
 8005a32:	fba2 2303 	umull	r2, r3, r2, r3
 8005a36:	0a9b      	lsrs	r3, r3, #10
 8005a38:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a3e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8005a40:	693b      	ldr	r3, [r7, #16]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a4a:	2208      	movs	r2, #8
 8005a4c:	409a      	lsls	r2, r3
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	4013      	ands	r3, r2
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d01a      	beq.n	8005a8c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	f003 0304 	and.w	r3, r3, #4
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d013      	beq.n	8005a8c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	681a      	ldr	r2, [r3, #0]
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	f022 0204 	bic.w	r2, r2, #4
 8005a72:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a78:	2208      	movs	r2, #8
 8005a7a:	409a      	lsls	r2, r3
 8005a7c:	693b      	ldr	r3, [r7, #16]
 8005a7e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a84:	f043 0201 	orr.w	r2, r3, #1
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a90:	2201      	movs	r2, #1
 8005a92:	409a      	lsls	r2, r3
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	4013      	ands	r3, r2
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d012      	beq.n	8005ac2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	695b      	ldr	r3, [r3, #20]
 8005aa2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d00b      	beq.n	8005ac2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005aae:	2201      	movs	r2, #1
 8005ab0:	409a      	lsls	r2, r3
 8005ab2:	693b      	ldr	r3, [r7, #16]
 8005ab4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005aba:	f043 0202 	orr.w	r2, r3, #2
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ac6:	2204      	movs	r2, #4
 8005ac8:	409a      	lsls	r2, r3
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	4013      	ands	r3, r2
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d012      	beq.n	8005af8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	f003 0302 	and.w	r3, r3, #2
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d00b      	beq.n	8005af8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ae4:	2204      	movs	r2, #4
 8005ae6:	409a      	lsls	r2, r3
 8005ae8:	693b      	ldr	r3, [r7, #16]
 8005aea:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005af0:	f043 0204 	orr.w	r2, r3, #4
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005afc:	2210      	movs	r2, #16
 8005afe:	409a      	lsls	r2, r3
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	4013      	ands	r3, r2
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d043      	beq.n	8005b90 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	f003 0308 	and.w	r3, r3, #8
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d03c      	beq.n	8005b90 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b1a:	2210      	movs	r2, #16
 8005b1c:	409a      	lsls	r2, r3
 8005b1e:	693b      	ldr	r3, [r7, #16]
 8005b20:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d018      	beq.n	8005b62 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d108      	bne.n	8005b50 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d024      	beq.n	8005b90 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b4a:	6878      	ldr	r0, [r7, #4]
 8005b4c:	4798      	blx	r3
 8005b4e:	e01f      	b.n	8005b90 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d01b      	beq.n	8005b90 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005b5c:	6878      	ldr	r0, [r7, #4]
 8005b5e:	4798      	blx	r3
 8005b60:	e016      	b.n	8005b90 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d107      	bne.n	8005b80 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	681a      	ldr	r2, [r3, #0]
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	f022 0208 	bic.w	r2, r2, #8
 8005b7e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d003      	beq.n	8005b90 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b8c:	6878      	ldr	r0, [r7, #4]
 8005b8e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b94:	2220      	movs	r2, #32
 8005b96:	409a      	lsls	r2, r3
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	4013      	ands	r3, r2
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	f000 808e 	beq.w	8005cbe <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	f003 0310 	and.w	r3, r3, #16
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	f000 8086 	beq.w	8005cbe <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005bb6:	2220      	movs	r2, #32
 8005bb8:	409a      	lsls	r2, r3
 8005bba:	693b      	ldr	r3, [r7, #16]
 8005bbc:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005bc4:	b2db      	uxtb	r3, r3
 8005bc6:	2b05      	cmp	r3, #5
 8005bc8:	d136      	bne.n	8005c38 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	681a      	ldr	r2, [r3, #0]
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	f022 0216 	bic.w	r2, r2, #22
 8005bd8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	695a      	ldr	r2, [r3, #20]
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005be8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d103      	bne.n	8005bfa <HAL_DMA_IRQHandler+0x1da>
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d007      	beq.n	8005c0a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	681a      	ldr	r2, [r3, #0]
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	f022 0208 	bic.w	r2, r2, #8
 8005c08:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c0e:	223f      	movs	r2, #63	; 0x3f
 8005c10:	409a      	lsls	r2, r3
 8005c12:	693b      	ldr	r3, [r7, #16]
 8005c14:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	2201      	movs	r2, #1
 8005c1a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	2200      	movs	r2, #0
 8005c22:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d07d      	beq.n	8005d2a <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c32:	6878      	ldr	r0, [r7, #4]
 8005c34:	4798      	blx	r3
        }
        return;
 8005c36:	e078      	b.n	8005d2a <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d01c      	beq.n	8005c80 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d108      	bne.n	8005c66 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d030      	beq.n	8005cbe <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c60:	6878      	ldr	r0, [r7, #4]
 8005c62:	4798      	blx	r3
 8005c64:	e02b      	b.n	8005cbe <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d027      	beq.n	8005cbe <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c72:	6878      	ldr	r0, [r7, #4]
 8005c74:	4798      	blx	r3
 8005c76:	e022      	b.n	8005cbe <HAL_DMA_IRQHandler+0x29e>
 8005c78:	20000024 	.word	0x20000024
 8005c7c:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d10f      	bne.n	8005cae <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	681a      	ldr	r2, [r3, #0]
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	f022 0210 	bic.w	r2, r2, #16
 8005c9c:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	2201      	movs	r2, #1
 8005ca2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	2200      	movs	r2, #0
 8005caa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d003      	beq.n	8005cbe <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005cba:	6878      	ldr	r0, [r7, #4]
 8005cbc:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d032      	beq.n	8005d2c <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005cca:	f003 0301 	and.w	r3, r3, #1
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d022      	beq.n	8005d18 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	2205      	movs	r2, #5
 8005cd6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	681a      	ldr	r2, [r3, #0]
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	f022 0201 	bic.w	r2, r2, #1
 8005ce8:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8005cea:	68bb      	ldr	r3, [r7, #8]
 8005cec:	3301      	adds	r3, #1
 8005cee:	60bb      	str	r3, [r7, #8]
 8005cf0:	697a      	ldr	r2, [r7, #20]
 8005cf2:	429a      	cmp	r2, r3
 8005cf4:	d307      	bcc.n	8005d06 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	f003 0301 	and.w	r3, r3, #1
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d1f2      	bne.n	8005cea <HAL_DMA_IRQHandler+0x2ca>
 8005d04:	e000      	b.n	8005d08 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8005d06:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	2201      	movs	r2, #1
 8005d0c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	2200      	movs	r2, #0
 8005d14:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d005      	beq.n	8005d2c <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005d24:	6878      	ldr	r0, [r7, #4]
 8005d26:	4798      	blx	r3
 8005d28:	e000      	b.n	8005d2c <HAL_DMA_IRQHandler+0x30c>
        return;
 8005d2a:	bf00      	nop
    }
  }
}
 8005d2c:	3718      	adds	r7, #24
 8005d2e:	46bd      	mov	sp, r7
 8005d30:	bd80      	pop	{r7, pc}
 8005d32:	bf00      	nop

08005d34 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005d34:	b480      	push	{r7}
 8005d36:	b085      	sub	sp, #20
 8005d38:	af00      	add	r7, sp, #0
 8005d3a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	b2db      	uxtb	r3, r3
 8005d42:	3b10      	subs	r3, #16
 8005d44:	4a13      	ldr	r2, [pc, #76]	; (8005d94 <DMA_CalcBaseAndBitshift+0x60>)
 8005d46:	fba2 2303 	umull	r2, r3, r2, r3
 8005d4a:	091b      	lsrs	r3, r3, #4
 8005d4c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8005d4e:	4a12      	ldr	r2, [pc, #72]	; (8005d98 <DMA_CalcBaseAndBitshift+0x64>)
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	4413      	add	r3, r2
 8005d54:	781b      	ldrb	r3, [r3, #0]
 8005d56:	461a      	mov	r2, r3
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	2b03      	cmp	r3, #3
 8005d60:	d909      	bls.n	8005d76 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8005d6a:	f023 0303 	bic.w	r3, r3, #3
 8005d6e:	1d1a      	adds	r2, r3, #4
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	659a      	str	r2, [r3, #88]	; 0x58
 8005d74:	e007      	b.n	8005d86 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8005d7e:	f023 0303 	bic.w	r3, r3, #3
 8005d82:	687a      	ldr	r2, [r7, #4]
 8005d84:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8005d8a:	4618      	mov	r0, r3
 8005d8c:	3714      	adds	r7, #20
 8005d8e:	46bd      	mov	sp, r7
 8005d90:	bc80      	pop	{r7}
 8005d92:	4770      	bx	lr
 8005d94:	aaaaaaab 	.word	0xaaaaaaab
 8005d98:	08013028 	.word	0x08013028

08005d9c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005d9c:	b480      	push	{r7}
 8005d9e:	b085      	sub	sp, #20
 8005da0:	af00      	add	r7, sp, #0
 8005da2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005da4:	2300      	movs	r3, #0
 8005da6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005dac:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	699b      	ldr	r3, [r3, #24]
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d11f      	bne.n	8005df6 <DMA_CheckFifoParam+0x5a>
 8005db6:	68bb      	ldr	r3, [r7, #8]
 8005db8:	2b03      	cmp	r3, #3
 8005dba:	d856      	bhi.n	8005e6a <DMA_CheckFifoParam+0xce>
 8005dbc:	a201      	add	r2, pc, #4	; (adr r2, 8005dc4 <DMA_CheckFifoParam+0x28>)
 8005dbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005dc2:	bf00      	nop
 8005dc4:	08005dd5 	.word	0x08005dd5
 8005dc8:	08005de7 	.word	0x08005de7
 8005dcc:	08005dd5 	.word	0x08005dd5
 8005dd0:	08005e6b 	.word	0x08005e6b
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005dd8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d046      	beq.n	8005e6e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8005de0:	2301      	movs	r3, #1
 8005de2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005de4:	e043      	b.n	8005e6e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005dea:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005dee:	d140      	bne.n	8005e72 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8005df0:	2301      	movs	r3, #1
 8005df2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005df4:	e03d      	b.n	8005e72 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	699b      	ldr	r3, [r3, #24]
 8005dfa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005dfe:	d121      	bne.n	8005e44 <DMA_CheckFifoParam+0xa8>
 8005e00:	68bb      	ldr	r3, [r7, #8]
 8005e02:	2b03      	cmp	r3, #3
 8005e04:	d837      	bhi.n	8005e76 <DMA_CheckFifoParam+0xda>
 8005e06:	a201      	add	r2, pc, #4	; (adr r2, 8005e0c <DMA_CheckFifoParam+0x70>)
 8005e08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e0c:	08005e1d 	.word	0x08005e1d
 8005e10:	08005e23 	.word	0x08005e23
 8005e14:	08005e1d 	.word	0x08005e1d
 8005e18:	08005e35 	.word	0x08005e35
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8005e1c:	2301      	movs	r3, #1
 8005e1e:	73fb      	strb	r3, [r7, #15]
      break;
 8005e20:	e030      	b.n	8005e84 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e26:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d025      	beq.n	8005e7a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8005e2e:	2301      	movs	r3, #1
 8005e30:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005e32:	e022      	b.n	8005e7a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e38:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005e3c:	d11f      	bne.n	8005e7e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8005e3e:	2301      	movs	r3, #1
 8005e40:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8005e42:	e01c      	b.n	8005e7e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8005e44:	68bb      	ldr	r3, [r7, #8]
 8005e46:	2b02      	cmp	r3, #2
 8005e48:	d903      	bls.n	8005e52 <DMA_CheckFifoParam+0xb6>
 8005e4a:	68bb      	ldr	r3, [r7, #8]
 8005e4c:	2b03      	cmp	r3, #3
 8005e4e:	d003      	beq.n	8005e58 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8005e50:	e018      	b.n	8005e84 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8005e52:	2301      	movs	r3, #1
 8005e54:	73fb      	strb	r3, [r7, #15]
      break;
 8005e56:	e015      	b.n	8005e84 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e5c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d00e      	beq.n	8005e82 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8005e64:	2301      	movs	r3, #1
 8005e66:	73fb      	strb	r3, [r7, #15]
      break;
 8005e68:	e00b      	b.n	8005e82 <DMA_CheckFifoParam+0xe6>
      break;
 8005e6a:	bf00      	nop
 8005e6c:	e00a      	b.n	8005e84 <DMA_CheckFifoParam+0xe8>
      break;
 8005e6e:	bf00      	nop
 8005e70:	e008      	b.n	8005e84 <DMA_CheckFifoParam+0xe8>
      break;
 8005e72:	bf00      	nop
 8005e74:	e006      	b.n	8005e84 <DMA_CheckFifoParam+0xe8>
      break;
 8005e76:	bf00      	nop
 8005e78:	e004      	b.n	8005e84 <DMA_CheckFifoParam+0xe8>
      break;
 8005e7a:	bf00      	nop
 8005e7c:	e002      	b.n	8005e84 <DMA_CheckFifoParam+0xe8>
      break;   
 8005e7e:	bf00      	nop
 8005e80:	e000      	b.n	8005e84 <DMA_CheckFifoParam+0xe8>
      break;
 8005e82:	bf00      	nop
    }
  } 
  
  return status; 
 8005e84:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e86:	4618      	mov	r0, r3
 8005e88:	3714      	adds	r7, #20
 8005e8a:	46bd      	mov	sp, r7
 8005e8c:	bc80      	pop	{r7}
 8005e8e:	4770      	bx	lr

08005e90 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005e90:	b480      	push	{r7}
 8005e92:	b087      	sub	sp, #28
 8005e94:	af00      	add	r7, sp, #0
 8005e96:	6078      	str	r0, [r7, #4]
 8005e98:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8005e9a:	2300      	movs	r3, #0
 8005e9c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005e9e:	e16f      	b.n	8006180 <HAL_GPIO_Init+0x2f0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8005ea0:	683b      	ldr	r3, [r7, #0]
 8005ea2:	681a      	ldr	r2, [r3, #0]
 8005ea4:	2101      	movs	r1, #1
 8005ea6:	697b      	ldr	r3, [r7, #20]
 8005ea8:	fa01 f303 	lsl.w	r3, r1, r3
 8005eac:	4013      	ands	r3, r2
 8005eae:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	f000 8161 	beq.w	800617a <HAL_GPIO_Init+0x2ea>
    {
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005eb8:	683b      	ldr	r3, [r7, #0]
 8005eba:	685b      	ldr	r3, [r3, #4]
 8005ebc:	f003 0303 	and.w	r3, r3, #3
 8005ec0:	2b01      	cmp	r3, #1
 8005ec2:	d005      	beq.n	8005ed0 <HAL_GPIO_Init+0x40>
 8005ec4:	683b      	ldr	r3, [r7, #0]
 8005ec6:	685b      	ldr	r3, [r3, #4]
 8005ec8:	f003 0303 	and.w	r3, r3, #3
 8005ecc:	2b02      	cmp	r3, #2
 8005ece:	d130      	bne.n	8005f32 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	689b      	ldr	r3, [r3, #8]
 8005ed4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8005ed6:	697b      	ldr	r3, [r7, #20]
 8005ed8:	005b      	lsls	r3, r3, #1
 8005eda:	2203      	movs	r2, #3
 8005edc:	fa02 f303 	lsl.w	r3, r2, r3
 8005ee0:	43db      	mvns	r3, r3
 8005ee2:	693a      	ldr	r2, [r7, #16]
 8005ee4:	4013      	ands	r3, r2
 8005ee6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8005ee8:	683b      	ldr	r3, [r7, #0]
 8005eea:	68da      	ldr	r2, [r3, #12]
 8005eec:	697b      	ldr	r3, [r7, #20]
 8005eee:	005b      	lsls	r3, r3, #1
 8005ef0:	fa02 f303 	lsl.w	r3, r2, r3
 8005ef4:	693a      	ldr	r2, [r7, #16]
 8005ef6:	4313      	orrs	r3, r2
 8005ef8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	693a      	ldr	r2, [r7, #16]
 8005efe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	685b      	ldr	r3, [r3, #4]
 8005f04:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005f06:	2201      	movs	r2, #1
 8005f08:	697b      	ldr	r3, [r7, #20]
 8005f0a:	fa02 f303 	lsl.w	r3, r2, r3
 8005f0e:	43db      	mvns	r3, r3
 8005f10:	693a      	ldr	r2, [r7, #16]
 8005f12:	4013      	ands	r3, r2
 8005f14:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005f16:	683b      	ldr	r3, [r7, #0]
 8005f18:	685b      	ldr	r3, [r3, #4]
 8005f1a:	091b      	lsrs	r3, r3, #4
 8005f1c:	f003 0201 	and.w	r2, r3, #1
 8005f20:	697b      	ldr	r3, [r7, #20]
 8005f22:	fa02 f303 	lsl.w	r3, r2, r3
 8005f26:	693a      	ldr	r2, [r7, #16]
 8005f28:	4313      	orrs	r3, r2
 8005f2a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	693a      	ldr	r2, [r7, #16]
 8005f30:	605a      	str	r2, [r3, #4]
      }
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005f32:	683b      	ldr	r3, [r7, #0]
 8005f34:	685b      	ldr	r3, [r3, #4]
 8005f36:	f003 0303 	and.w	r3, r3, #3
 8005f3a:	2b03      	cmp	r3, #3
 8005f3c:	d017      	beq.n	8005f6e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	68db      	ldr	r3, [r3, #12]
 8005f42:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8005f44:	697b      	ldr	r3, [r7, #20]
 8005f46:	005b      	lsls	r3, r3, #1
 8005f48:	2203      	movs	r2, #3
 8005f4a:	fa02 f303 	lsl.w	r3, r2, r3
 8005f4e:	43db      	mvns	r3, r3
 8005f50:	693a      	ldr	r2, [r7, #16]
 8005f52:	4013      	ands	r3, r2
 8005f54:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8005f56:	683b      	ldr	r3, [r7, #0]
 8005f58:	689a      	ldr	r2, [r3, #8]
 8005f5a:	697b      	ldr	r3, [r7, #20]
 8005f5c:	005b      	lsls	r3, r3, #1
 8005f5e:	fa02 f303 	lsl.w	r3, r2, r3
 8005f62:	693a      	ldr	r2, [r7, #16]
 8005f64:	4313      	orrs	r3, r2
 8005f66:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	693a      	ldr	r2, [r7, #16]
 8005f6c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005f6e:	683b      	ldr	r3, [r7, #0]
 8005f70:	685b      	ldr	r3, [r3, #4]
 8005f72:	f003 0303 	and.w	r3, r3, #3
 8005f76:	2b02      	cmp	r3, #2
 8005f78:	d123      	bne.n	8005fc2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8005f7a:	697b      	ldr	r3, [r7, #20]
 8005f7c:	08da      	lsrs	r2, r3, #3
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	3208      	adds	r2, #8
 8005f82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f86:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8005f88:	697b      	ldr	r3, [r7, #20]
 8005f8a:	f003 0307 	and.w	r3, r3, #7
 8005f8e:	009b      	lsls	r3, r3, #2
 8005f90:	220f      	movs	r2, #15
 8005f92:	fa02 f303 	lsl.w	r3, r2, r3
 8005f96:	43db      	mvns	r3, r3
 8005f98:	693a      	ldr	r2, [r7, #16]
 8005f9a:	4013      	ands	r3, r2
 8005f9c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8005f9e:	683b      	ldr	r3, [r7, #0]
 8005fa0:	691a      	ldr	r2, [r3, #16]
 8005fa2:	697b      	ldr	r3, [r7, #20]
 8005fa4:	f003 0307 	and.w	r3, r3, #7
 8005fa8:	009b      	lsls	r3, r3, #2
 8005faa:	fa02 f303 	lsl.w	r3, r2, r3
 8005fae:	693a      	ldr	r2, [r7, #16]
 8005fb0:	4313      	orrs	r3, r2
 8005fb2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8005fb4:	697b      	ldr	r3, [r7, #20]
 8005fb6:	08da      	lsrs	r2, r3, #3
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	3208      	adds	r2, #8
 8005fbc:	6939      	ldr	r1, [r7, #16]
 8005fbe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8005fc8:	697b      	ldr	r3, [r7, #20]
 8005fca:	005b      	lsls	r3, r3, #1
 8005fcc:	2203      	movs	r2, #3
 8005fce:	fa02 f303 	lsl.w	r3, r2, r3
 8005fd2:	43db      	mvns	r3, r3
 8005fd4:	693a      	ldr	r2, [r7, #16]
 8005fd6:	4013      	ands	r3, r2
 8005fd8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8005fda:	683b      	ldr	r3, [r7, #0]
 8005fdc:	685b      	ldr	r3, [r3, #4]
 8005fde:	f003 0203 	and.w	r2, r3, #3
 8005fe2:	697b      	ldr	r3, [r7, #20]
 8005fe4:	005b      	lsls	r3, r3, #1
 8005fe6:	fa02 f303 	lsl.w	r3, r2, r3
 8005fea:	693a      	ldr	r2, [r7, #16]
 8005fec:	4313      	orrs	r3, r2
 8005fee:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	693a      	ldr	r2, [r7, #16]
 8005ff4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005ff6:	683b      	ldr	r3, [r7, #0]
 8005ff8:	685b      	ldr	r3, [r3, #4]
 8005ffa:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	f000 80bb 	beq.w	800617a <HAL_GPIO_Init+0x2ea>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006004:	2300      	movs	r3, #0
 8006006:	60bb      	str	r3, [r7, #8]
 8006008:	4b64      	ldr	r3, [pc, #400]	; (800619c <HAL_GPIO_Init+0x30c>)
 800600a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800600c:	4a63      	ldr	r2, [pc, #396]	; (800619c <HAL_GPIO_Init+0x30c>)
 800600e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006012:	6453      	str	r3, [r2, #68]	; 0x44
 8006014:	4b61      	ldr	r3, [pc, #388]	; (800619c <HAL_GPIO_Init+0x30c>)
 8006016:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006018:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800601c:	60bb      	str	r3, [r7, #8]
 800601e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8006020:	4a5f      	ldr	r2, [pc, #380]	; (80061a0 <HAL_GPIO_Init+0x310>)
 8006022:	697b      	ldr	r3, [r7, #20]
 8006024:	089b      	lsrs	r3, r3, #2
 8006026:	3302      	adds	r3, #2
 8006028:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800602c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800602e:	697b      	ldr	r3, [r7, #20]
 8006030:	f003 0303 	and.w	r3, r3, #3
 8006034:	009b      	lsls	r3, r3, #2
 8006036:	220f      	movs	r2, #15
 8006038:	fa02 f303 	lsl.w	r3, r2, r3
 800603c:	43db      	mvns	r3, r3
 800603e:	693a      	ldr	r2, [r7, #16]
 8006040:	4013      	ands	r3, r2
 8006042:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	4a57      	ldr	r2, [pc, #348]	; (80061a4 <HAL_GPIO_Init+0x314>)
 8006048:	4293      	cmp	r3, r2
 800604a:	d031      	beq.n	80060b0 <HAL_GPIO_Init+0x220>
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	4a56      	ldr	r2, [pc, #344]	; (80061a8 <HAL_GPIO_Init+0x318>)
 8006050:	4293      	cmp	r3, r2
 8006052:	d02b      	beq.n	80060ac <HAL_GPIO_Init+0x21c>
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	4a55      	ldr	r2, [pc, #340]	; (80061ac <HAL_GPIO_Init+0x31c>)
 8006058:	4293      	cmp	r3, r2
 800605a:	d025      	beq.n	80060a8 <HAL_GPIO_Init+0x218>
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	4a54      	ldr	r2, [pc, #336]	; (80061b0 <HAL_GPIO_Init+0x320>)
 8006060:	4293      	cmp	r3, r2
 8006062:	d01f      	beq.n	80060a4 <HAL_GPIO_Init+0x214>
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	4a53      	ldr	r2, [pc, #332]	; (80061b4 <HAL_GPIO_Init+0x324>)
 8006068:	4293      	cmp	r3, r2
 800606a:	d019      	beq.n	80060a0 <HAL_GPIO_Init+0x210>
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	4a52      	ldr	r2, [pc, #328]	; (80061b8 <HAL_GPIO_Init+0x328>)
 8006070:	4293      	cmp	r3, r2
 8006072:	d013      	beq.n	800609c <HAL_GPIO_Init+0x20c>
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	4a51      	ldr	r2, [pc, #324]	; (80061bc <HAL_GPIO_Init+0x32c>)
 8006078:	4293      	cmp	r3, r2
 800607a:	d00d      	beq.n	8006098 <HAL_GPIO_Init+0x208>
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	4a50      	ldr	r2, [pc, #320]	; (80061c0 <HAL_GPIO_Init+0x330>)
 8006080:	4293      	cmp	r3, r2
 8006082:	d007      	beq.n	8006094 <HAL_GPIO_Init+0x204>
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	4a4f      	ldr	r2, [pc, #316]	; (80061c4 <HAL_GPIO_Init+0x334>)
 8006088:	4293      	cmp	r3, r2
 800608a:	d101      	bne.n	8006090 <HAL_GPIO_Init+0x200>
 800608c:	2308      	movs	r3, #8
 800608e:	e010      	b.n	80060b2 <HAL_GPIO_Init+0x222>
 8006090:	2309      	movs	r3, #9
 8006092:	e00e      	b.n	80060b2 <HAL_GPIO_Init+0x222>
 8006094:	2307      	movs	r3, #7
 8006096:	e00c      	b.n	80060b2 <HAL_GPIO_Init+0x222>
 8006098:	2306      	movs	r3, #6
 800609a:	e00a      	b.n	80060b2 <HAL_GPIO_Init+0x222>
 800609c:	2305      	movs	r3, #5
 800609e:	e008      	b.n	80060b2 <HAL_GPIO_Init+0x222>
 80060a0:	2304      	movs	r3, #4
 80060a2:	e006      	b.n	80060b2 <HAL_GPIO_Init+0x222>
 80060a4:	2303      	movs	r3, #3
 80060a6:	e004      	b.n	80060b2 <HAL_GPIO_Init+0x222>
 80060a8:	2302      	movs	r3, #2
 80060aa:	e002      	b.n	80060b2 <HAL_GPIO_Init+0x222>
 80060ac:	2301      	movs	r3, #1
 80060ae:	e000      	b.n	80060b2 <HAL_GPIO_Init+0x222>
 80060b0:	2300      	movs	r3, #0
 80060b2:	697a      	ldr	r2, [r7, #20]
 80060b4:	f002 0203 	and.w	r2, r2, #3
 80060b8:	0092      	lsls	r2, r2, #2
 80060ba:	4093      	lsls	r3, r2
 80060bc:	461a      	mov	r2, r3
 80060be:	693b      	ldr	r3, [r7, #16]
 80060c0:	4313      	orrs	r3, r2
 80060c2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80060c4:	4936      	ldr	r1, [pc, #216]	; (80061a0 <HAL_GPIO_Init+0x310>)
 80060c6:	697b      	ldr	r3, [r7, #20]
 80060c8:	089b      	lsrs	r3, r3, #2
 80060ca:	3302      	adds	r3, #2
 80060cc:	693a      	ldr	r2, [r7, #16]
 80060ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80060d2:	4b3d      	ldr	r3, [pc, #244]	; (80061c8 <HAL_GPIO_Init+0x338>)
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	43db      	mvns	r3, r3
 80060dc:	693a      	ldr	r2, [r7, #16]
 80060de:	4013      	ands	r3, r2
 80060e0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80060e2:	683b      	ldr	r3, [r7, #0]
 80060e4:	685b      	ldr	r3, [r3, #4]
 80060e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d003      	beq.n	80060f6 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80060ee:	693a      	ldr	r2, [r7, #16]
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	4313      	orrs	r3, r2
 80060f4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80060f6:	4a34      	ldr	r2, [pc, #208]	; (80061c8 <HAL_GPIO_Init+0x338>)
 80060f8:	693b      	ldr	r3, [r7, #16]
 80060fa:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80060fc:	4b32      	ldr	r3, [pc, #200]	; (80061c8 <HAL_GPIO_Init+0x338>)
 80060fe:	685b      	ldr	r3, [r3, #4]
 8006100:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	43db      	mvns	r3, r3
 8006106:	693a      	ldr	r2, [r7, #16]
 8006108:	4013      	ands	r3, r2
 800610a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800610c:	683b      	ldr	r3, [r7, #0]
 800610e:	685b      	ldr	r3, [r3, #4]
 8006110:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006114:	2b00      	cmp	r3, #0
 8006116:	d003      	beq.n	8006120 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8006118:	693a      	ldr	r2, [r7, #16]
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	4313      	orrs	r3, r2
 800611e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8006120:	4a29      	ldr	r2, [pc, #164]	; (80061c8 <HAL_GPIO_Init+0x338>)
 8006122:	693b      	ldr	r3, [r7, #16]
 8006124:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8006126:	4b28      	ldr	r3, [pc, #160]	; (80061c8 <HAL_GPIO_Init+0x338>)
 8006128:	689b      	ldr	r3, [r3, #8]
 800612a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	43db      	mvns	r3, r3
 8006130:	693a      	ldr	r2, [r7, #16]
 8006132:	4013      	ands	r3, r2
 8006134:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8006136:	683b      	ldr	r3, [r7, #0]
 8006138:	685b      	ldr	r3, [r3, #4]
 800613a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800613e:	2b00      	cmp	r3, #0
 8006140:	d003      	beq.n	800614a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8006142:	693a      	ldr	r2, [r7, #16]
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	4313      	orrs	r3, r2
 8006148:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800614a:	4a1f      	ldr	r2, [pc, #124]	; (80061c8 <HAL_GPIO_Init+0x338>)
 800614c:	693b      	ldr	r3, [r7, #16]
 800614e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8006150:	4b1d      	ldr	r3, [pc, #116]	; (80061c8 <HAL_GPIO_Init+0x338>)
 8006152:	68db      	ldr	r3, [r3, #12]
 8006154:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	43db      	mvns	r3, r3
 800615a:	693a      	ldr	r2, [r7, #16]
 800615c:	4013      	ands	r3, r2
 800615e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8006160:	683b      	ldr	r3, [r7, #0]
 8006162:	685b      	ldr	r3, [r3, #4]
 8006164:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006168:	2b00      	cmp	r3, #0
 800616a:	d003      	beq.n	8006174 <HAL_GPIO_Init+0x2e4>
        {
          temp |= iocurrent;
 800616c:	693a      	ldr	r2, [r7, #16]
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	4313      	orrs	r3, r2
 8006172:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8006174:	4a14      	ldr	r2, [pc, #80]	; (80061c8 <HAL_GPIO_Init+0x338>)
 8006176:	693b      	ldr	r3, [r7, #16]
 8006178:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800617a:	697b      	ldr	r3, [r7, #20]
 800617c:	3301      	adds	r3, #1
 800617e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006180:	683b      	ldr	r3, [r7, #0]
 8006182:	681a      	ldr	r2, [r3, #0]
 8006184:	697b      	ldr	r3, [r7, #20]
 8006186:	fa22 f303 	lsr.w	r3, r2, r3
 800618a:	2b00      	cmp	r3, #0
 800618c:	f47f ae88 	bne.w	8005ea0 <HAL_GPIO_Init+0x10>
  }
}
 8006190:	bf00      	nop
 8006192:	bf00      	nop
 8006194:	371c      	adds	r7, #28
 8006196:	46bd      	mov	sp, r7
 8006198:	bc80      	pop	{r7}
 800619a:	4770      	bx	lr
 800619c:	40023800 	.word	0x40023800
 80061a0:	40013800 	.word	0x40013800
 80061a4:	40020000 	.word	0x40020000
 80061a8:	40020400 	.word	0x40020400
 80061ac:	40020800 	.word	0x40020800
 80061b0:	40020c00 	.word	0x40020c00
 80061b4:	40021000 	.word	0x40021000
 80061b8:	40021400 	.word	0x40021400
 80061bc:	40021800 	.word	0x40021800
 80061c0:	40021c00 	.word	0x40021c00
 80061c4:	40022000 	.word	0x40022000
 80061c8:	40013c00 	.word	0x40013c00

080061cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80061cc:	b480      	push	{r7}
 80061ce:	b083      	sub	sp, #12
 80061d0:	af00      	add	r7, sp, #0
 80061d2:	6078      	str	r0, [r7, #4]
 80061d4:	460b      	mov	r3, r1
 80061d6:	807b      	strh	r3, [r7, #2]
 80061d8:	4613      	mov	r3, r2
 80061da:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80061dc:	787b      	ldrb	r3, [r7, #1]
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d003      	beq.n	80061ea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80061e2:	887a      	ldrh	r2, [r7, #2]
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80061e8:	e003      	b.n	80061f2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80061ea:	887b      	ldrh	r3, [r7, #2]
 80061ec:	041a      	lsls	r2, r3, #16
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	619a      	str	r2, [r3, #24]
}
 80061f2:	bf00      	nop
 80061f4:	370c      	adds	r7, #12
 80061f6:	46bd      	mov	sp, r7
 80061f8:	bc80      	pop	{r7}
 80061fa:	4770      	bx	lr

080061fc <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..I) to select the GPIO peripheral. 
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80061fc:	b480      	push	{r7}
 80061fe:	b085      	sub	sp, #20
 8006200:	af00      	add	r7, sp, #0
 8006202:	6078      	str	r0, [r7, #4]
 8006204:	460b      	mov	r3, r1
 8006206:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	695b      	ldr	r3, [r3, #20]
 800620c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800620e:	887a      	ldrh	r2, [r7, #2]
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	4013      	ands	r3, r2
 8006214:	041a      	lsls	r2, r3, #16
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	43d9      	mvns	r1, r3
 800621a:	887b      	ldrh	r3, [r7, #2]
 800621c:	400b      	ands	r3, r1
 800621e:	431a      	orrs	r2, r3
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	619a      	str	r2, [r3, #24]
}
 8006224:	bf00      	nop
 8006226:	3714      	adds	r7, #20
 8006228:	46bd      	mov	sp, r7
 800622a:	bc80      	pop	{r7}
 800622c:	4770      	bx	lr
	...

08006230 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006230:	b580      	push	{r7, lr}
 8006232:	b082      	sub	sp, #8
 8006234:	af00      	add	r7, sp, #0
 8006236:	4603      	mov	r3, r0
 8006238:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800623a:	4b08      	ldr	r3, [pc, #32]	; (800625c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800623c:	695a      	ldr	r2, [r3, #20]
 800623e:	88fb      	ldrh	r3, [r7, #6]
 8006240:	4013      	ands	r3, r2
 8006242:	2b00      	cmp	r3, #0
 8006244:	d006      	beq.n	8006254 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8006246:	4a05      	ldr	r2, [pc, #20]	; (800625c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006248:	88fb      	ldrh	r3, [r7, #6]
 800624a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800624c:	88fb      	ldrh	r3, [r7, #6]
 800624e:	4618      	mov	r0, r3
 8006250:	f7fe f872 	bl	8004338 <HAL_GPIO_EXTI_Callback>
  }
}
 8006254:	bf00      	nop
 8006256:	3708      	adds	r7, #8
 8006258:	46bd      	mov	sp, r7
 800625a:	bd80      	pop	{r7, pc}
 800625c:	40013c00 	.word	0x40013c00

08006260 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006260:	b580      	push	{r7, lr}
 8006262:	b084      	sub	sp, #16
 8006264:	af00      	add	r7, sp, #0
 8006266:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	2b00      	cmp	r3, #0
 800626c:	d101      	bne.n	8006272 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800626e:	2301      	movs	r3, #1
 8006270:	e12b      	b.n	80064ca <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006278:	b2db      	uxtb	r3, r3
 800627a:	2b00      	cmp	r3, #0
 800627c:	d106      	bne.n	800628c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	2200      	movs	r2, #0
 8006282:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8006286:	6878      	ldr	r0, [r7, #4]
 8006288:	f7fe fc5c 	bl	8004b44 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	2224      	movs	r2, #36	; 0x24
 8006290:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	681a      	ldr	r2, [r3, #0]
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	f022 0201 	bic.w	r2, r2, #1
 80062a2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	681a      	ldr	r2, [r3, #0]
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80062b2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	681a      	ldr	r2, [r3, #0]
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80062c2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80062c4:	f002 fd12 	bl	8008cec <HAL_RCC_GetPCLK1Freq>
 80062c8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	685b      	ldr	r3, [r3, #4]
 80062ce:	4a81      	ldr	r2, [pc, #516]	; (80064d4 <HAL_I2C_Init+0x274>)
 80062d0:	4293      	cmp	r3, r2
 80062d2:	d807      	bhi.n	80062e4 <HAL_I2C_Init+0x84>
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	4a80      	ldr	r2, [pc, #512]	; (80064d8 <HAL_I2C_Init+0x278>)
 80062d8:	4293      	cmp	r3, r2
 80062da:	bf94      	ite	ls
 80062dc:	2301      	movls	r3, #1
 80062de:	2300      	movhi	r3, #0
 80062e0:	b2db      	uxtb	r3, r3
 80062e2:	e006      	b.n	80062f2 <HAL_I2C_Init+0x92>
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	4a7d      	ldr	r2, [pc, #500]	; (80064dc <HAL_I2C_Init+0x27c>)
 80062e8:	4293      	cmp	r3, r2
 80062ea:	bf94      	ite	ls
 80062ec:	2301      	movls	r3, #1
 80062ee:	2300      	movhi	r3, #0
 80062f0:	b2db      	uxtb	r3, r3
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d001      	beq.n	80062fa <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80062f6:	2301      	movs	r3, #1
 80062f8:	e0e7      	b.n	80064ca <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	4a78      	ldr	r2, [pc, #480]	; (80064e0 <HAL_I2C_Init+0x280>)
 80062fe:	fba2 2303 	umull	r2, r3, r2, r3
 8006302:	0c9b      	lsrs	r3, r3, #18
 8006304:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	685b      	ldr	r3, [r3, #4]
 800630c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	68ba      	ldr	r2, [r7, #8]
 8006316:	430a      	orrs	r2, r1
 8006318:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	6a1b      	ldr	r3, [r3, #32]
 8006320:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	685b      	ldr	r3, [r3, #4]
 8006328:	4a6a      	ldr	r2, [pc, #424]	; (80064d4 <HAL_I2C_Init+0x274>)
 800632a:	4293      	cmp	r3, r2
 800632c:	d802      	bhi.n	8006334 <HAL_I2C_Init+0xd4>
 800632e:	68bb      	ldr	r3, [r7, #8]
 8006330:	3301      	adds	r3, #1
 8006332:	e009      	b.n	8006348 <HAL_I2C_Init+0xe8>
 8006334:	68bb      	ldr	r3, [r7, #8]
 8006336:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800633a:	fb02 f303 	mul.w	r3, r2, r3
 800633e:	4a69      	ldr	r2, [pc, #420]	; (80064e4 <HAL_I2C_Init+0x284>)
 8006340:	fba2 2303 	umull	r2, r3, r2, r3
 8006344:	099b      	lsrs	r3, r3, #6
 8006346:	3301      	adds	r3, #1
 8006348:	687a      	ldr	r2, [r7, #4]
 800634a:	6812      	ldr	r2, [r2, #0]
 800634c:	430b      	orrs	r3, r1
 800634e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	69db      	ldr	r3, [r3, #28]
 8006356:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800635a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	685b      	ldr	r3, [r3, #4]
 8006362:	495c      	ldr	r1, [pc, #368]	; (80064d4 <HAL_I2C_Init+0x274>)
 8006364:	428b      	cmp	r3, r1
 8006366:	d819      	bhi.n	800639c <HAL_I2C_Init+0x13c>
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	1e59      	subs	r1, r3, #1
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	685b      	ldr	r3, [r3, #4]
 8006370:	005b      	lsls	r3, r3, #1
 8006372:	fbb1 f3f3 	udiv	r3, r1, r3
 8006376:	1c59      	adds	r1, r3, #1
 8006378:	f640 73fc 	movw	r3, #4092	; 0xffc
 800637c:	400b      	ands	r3, r1
 800637e:	2b00      	cmp	r3, #0
 8006380:	d00a      	beq.n	8006398 <HAL_I2C_Init+0x138>
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	1e59      	subs	r1, r3, #1
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	685b      	ldr	r3, [r3, #4]
 800638a:	005b      	lsls	r3, r3, #1
 800638c:	fbb1 f3f3 	udiv	r3, r1, r3
 8006390:	3301      	adds	r3, #1
 8006392:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006396:	e051      	b.n	800643c <HAL_I2C_Init+0x1dc>
 8006398:	2304      	movs	r3, #4
 800639a:	e04f      	b.n	800643c <HAL_I2C_Init+0x1dc>
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	689b      	ldr	r3, [r3, #8]
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d111      	bne.n	80063c8 <HAL_I2C_Init+0x168>
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	1e58      	subs	r0, r3, #1
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	6859      	ldr	r1, [r3, #4]
 80063ac:	460b      	mov	r3, r1
 80063ae:	005b      	lsls	r3, r3, #1
 80063b0:	440b      	add	r3, r1
 80063b2:	fbb0 f3f3 	udiv	r3, r0, r3
 80063b6:	3301      	adds	r3, #1
 80063b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80063bc:	2b00      	cmp	r3, #0
 80063be:	bf0c      	ite	eq
 80063c0:	2301      	moveq	r3, #1
 80063c2:	2300      	movne	r3, #0
 80063c4:	b2db      	uxtb	r3, r3
 80063c6:	e012      	b.n	80063ee <HAL_I2C_Init+0x18e>
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	1e58      	subs	r0, r3, #1
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	6859      	ldr	r1, [r3, #4]
 80063d0:	460b      	mov	r3, r1
 80063d2:	009b      	lsls	r3, r3, #2
 80063d4:	440b      	add	r3, r1
 80063d6:	0099      	lsls	r1, r3, #2
 80063d8:	440b      	add	r3, r1
 80063da:	fbb0 f3f3 	udiv	r3, r0, r3
 80063de:	3301      	adds	r3, #1
 80063e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	bf0c      	ite	eq
 80063e8:	2301      	moveq	r3, #1
 80063ea:	2300      	movne	r3, #0
 80063ec:	b2db      	uxtb	r3, r3
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d001      	beq.n	80063f6 <HAL_I2C_Init+0x196>
 80063f2:	2301      	movs	r3, #1
 80063f4:	e022      	b.n	800643c <HAL_I2C_Init+0x1dc>
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	689b      	ldr	r3, [r3, #8]
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d10e      	bne.n	800641c <HAL_I2C_Init+0x1bc>
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	1e58      	subs	r0, r3, #1
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	6859      	ldr	r1, [r3, #4]
 8006406:	460b      	mov	r3, r1
 8006408:	005b      	lsls	r3, r3, #1
 800640a:	440b      	add	r3, r1
 800640c:	fbb0 f3f3 	udiv	r3, r0, r3
 8006410:	3301      	adds	r3, #1
 8006412:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006416:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800641a:	e00f      	b.n	800643c <HAL_I2C_Init+0x1dc>
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	1e58      	subs	r0, r3, #1
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	6859      	ldr	r1, [r3, #4]
 8006424:	460b      	mov	r3, r1
 8006426:	009b      	lsls	r3, r3, #2
 8006428:	440b      	add	r3, r1
 800642a:	0099      	lsls	r1, r3, #2
 800642c:	440b      	add	r3, r1
 800642e:	fbb0 f3f3 	udiv	r3, r0, r3
 8006432:	3301      	adds	r3, #1
 8006434:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006438:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800643c:	6879      	ldr	r1, [r7, #4]
 800643e:	6809      	ldr	r1, [r1, #0]
 8006440:	4313      	orrs	r3, r2
 8006442:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	69da      	ldr	r2, [r3, #28]
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	6a1b      	ldr	r3, [r3, #32]
 8006456:	431a      	orrs	r2, r3
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	430a      	orrs	r2, r1
 800645e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	689b      	ldr	r3, [r3, #8]
 8006466:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800646a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800646e:	687a      	ldr	r2, [r7, #4]
 8006470:	6911      	ldr	r1, [r2, #16]
 8006472:	687a      	ldr	r2, [r7, #4]
 8006474:	68d2      	ldr	r2, [r2, #12]
 8006476:	4311      	orrs	r1, r2
 8006478:	687a      	ldr	r2, [r7, #4]
 800647a:	6812      	ldr	r2, [r2, #0]
 800647c:	430b      	orrs	r3, r1
 800647e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	68db      	ldr	r3, [r3, #12]
 8006486:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	695a      	ldr	r2, [r3, #20]
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	699b      	ldr	r3, [r3, #24]
 8006492:	431a      	orrs	r2, r3
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	430a      	orrs	r2, r1
 800649a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	681a      	ldr	r2, [r3, #0]
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	f042 0201 	orr.w	r2, r2, #1
 80064aa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	2200      	movs	r2, #0
 80064b0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	2220      	movs	r2, #32
 80064b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	2200      	movs	r2, #0
 80064be:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	2200      	movs	r2, #0
 80064c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80064c8:	2300      	movs	r3, #0
}
 80064ca:	4618      	mov	r0, r3
 80064cc:	3710      	adds	r7, #16
 80064ce:	46bd      	mov	sp, r7
 80064d0:	bd80      	pop	{r7, pc}
 80064d2:	bf00      	nop
 80064d4:	000186a0 	.word	0x000186a0
 80064d8:	001e847f 	.word	0x001e847f
 80064dc:	003d08ff 	.word	0x003d08ff
 80064e0:	431bde83 	.word	0x431bde83
 80064e4:	10624dd3 	.word	0x10624dd3

080064e8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80064e8:	b580      	push	{r7, lr}
 80064ea:	b088      	sub	sp, #32
 80064ec:	af02      	add	r7, sp, #8
 80064ee:	60f8      	str	r0, [r7, #12]
 80064f0:	4608      	mov	r0, r1
 80064f2:	4611      	mov	r1, r2
 80064f4:	461a      	mov	r2, r3
 80064f6:	4603      	mov	r3, r0
 80064f8:	817b      	strh	r3, [r7, #10]
 80064fa:	460b      	mov	r3, r1
 80064fc:	813b      	strh	r3, [r7, #8]
 80064fe:	4613      	mov	r3, r2
 8006500:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006502:	f7fe fe77 	bl	80051f4 <HAL_GetTick>
 8006506:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800650e:	b2db      	uxtb	r3, r3
 8006510:	2b20      	cmp	r3, #32
 8006512:	f040 80d9 	bne.w	80066c8 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006516:	697b      	ldr	r3, [r7, #20]
 8006518:	9300      	str	r3, [sp, #0]
 800651a:	2319      	movs	r3, #25
 800651c:	2201      	movs	r2, #1
 800651e:	496d      	ldr	r1, [pc, #436]	; (80066d4 <HAL_I2C_Mem_Write+0x1ec>)
 8006520:	68f8      	ldr	r0, [r7, #12]
 8006522:	f000 fc7f 	bl	8006e24 <I2C_WaitOnFlagUntilTimeout>
 8006526:	4603      	mov	r3, r0
 8006528:	2b00      	cmp	r3, #0
 800652a:	d001      	beq.n	8006530 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800652c:	2302      	movs	r3, #2
 800652e:	e0cc      	b.n	80066ca <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006536:	2b01      	cmp	r3, #1
 8006538:	d101      	bne.n	800653e <HAL_I2C_Mem_Write+0x56>
 800653a:	2302      	movs	r3, #2
 800653c:	e0c5      	b.n	80066ca <HAL_I2C_Mem_Write+0x1e2>
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	2201      	movs	r2, #1
 8006542:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	f003 0301 	and.w	r3, r3, #1
 8006550:	2b01      	cmp	r3, #1
 8006552:	d007      	beq.n	8006564 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	681a      	ldr	r2, [r3, #0]
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	f042 0201 	orr.w	r2, r2, #1
 8006562:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	681a      	ldr	r2, [r3, #0]
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006572:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	2221      	movs	r2, #33	; 0x21
 8006578:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	2240      	movs	r2, #64	; 0x40
 8006580:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	2200      	movs	r2, #0
 8006588:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	6a3a      	ldr	r2, [r7, #32]
 800658e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006594:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800659a:	b29a      	uxth	r2, r3
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	4a4d      	ldr	r2, [pc, #308]	; (80066d8 <HAL_I2C_Mem_Write+0x1f0>)
 80065a4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80065a6:	88f8      	ldrh	r0, [r7, #6]
 80065a8:	893a      	ldrh	r2, [r7, #8]
 80065aa:	8979      	ldrh	r1, [r7, #10]
 80065ac:	697b      	ldr	r3, [r7, #20]
 80065ae:	9301      	str	r3, [sp, #4]
 80065b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065b2:	9300      	str	r3, [sp, #0]
 80065b4:	4603      	mov	r3, r0
 80065b6:	68f8      	ldr	r0, [r7, #12]
 80065b8:	f000 fab6 	bl	8006b28 <I2C_RequestMemoryWrite>
 80065bc:	4603      	mov	r3, r0
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d052      	beq.n	8006668 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80065c2:	2301      	movs	r3, #1
 80065c4:	e081      	b.n	80066ca <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80065c6:	697a      	ldr	r2, [r7, #20]
 80065c8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80065ca:	68f8      	ldr	r0, [r7, #12]
 80065cc:	f000 fd00 	bl	8006fd0 <I2C_WaitOnTXEFlagUntilTimeout>
 80065d0:	4603      	mov	r3, r0
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d00d      	beq.n	80065f2 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065da:	2b04      	cmp	r3, #4
 80065dc:	d107      	bne.n	80065ee <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	681a      	ldr	r2, [r3, #0]
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80065ec:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80065ee:	2301      	movs	r3, #1
 80065f0:	e06b      	b.n	80066ca <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065f6:	781a      	ldrb	r2, [r3, #0]
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006602:	1c5a      	adds	r2, r3, #1
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800660c:	3b01      	subs	r3, #1
 800660e:	b29a      	uxth	r2, r3
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006618:	b29b      	uxth	r3, r3
 800661a:	3b01      	subs	r3, #1
 800661c:	b29a      	uxth	r2, r3
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	695b      	ldr	r3, [r3, #20]
 8006628:	f003 0304 	and.w	r3, r3, #4
 800662c:	2b04      	cmp	r3, #4
 800662e:	d11b      	bne.n	8006668 <HAL_I2C_Mem_Write+0x180>
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006634:	2b00      	cmp	r3, #0
 8006636:	d017      	beq.n	8006668 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800663c:	781a      	ldrb	r2, [r3, #0]
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006648:	1c5a      	adds	r2, r3, #1
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006652:	3b01      	subs	r3, #1
 8006654:	b29a      	uxth	r2, r3
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800665e:	b29b      	uxth	r3, r3
 8006660:	3b01      	subs	r3, #1
 8006662:	b29a      	uxth	r2, r3
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800666c:	2b00      	cmp	r3, #0
 800666e:	d1aa      	bne.n	80065c6 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006670:	697a      	ldr	r2, [r7, #20]
 8006672:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006674:	68f8      	ldr	r0, [r7, #12]
 8006676:	f000 fcec 	bl	8007052 <I2C_WaitOnBTFFlagUntilTimeout>
 800667a:	4603      	mov	r3, r0
 800667c:	2b00      	cmp	r3, #0
 800667e:	d00d      	beq.n	800669c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006684:	2b04      	cmp	r3, #4
 8006686:	d107      	bne.n	8006698 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	681a      	ldr	r2, [r3, #0]
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006696:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006698:	2301      	movs	r3, #1
 800669a:	e016      	b.n	80066ca <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	681a      	ldr	r2, [r3, #0]
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80066aa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	2220      	movs	r2, #32
 80066b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	2200      	movs	r2, #0
 80066b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	2200      	movs	r2, #0
 80066c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80066c4:	2300      	movs	r3, #0
 80066c6:	e000      	b.n	80066ca <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80066c8:	2302      	movs	r3, #2
  }
}
 80066ca:	4618      	mov	r0, r3
 80066cc:	3718      	adds	r7, #24
 80066ce:	46bd      	mov	sp, r7
 80066d0:	bd80      	pop	{r7, pc}
 80066d2:	bf00      	nop
 80066d4:	00100002 	.word	0x00100002
 80066d8:	ffff0000 	.word	0xffff0000

080066dc <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80066dc:	b580      	push	{r7, lr}
 80066de:	b08c      	sub	sp, #48	; 0x30
 80066e0:	af02      	add	r7, sp, #8
 80066e2:	60f8      	str	r0, [r7, #12]
 80066e4:	4608      	mov	r0, r1
 80066e6:	4611      	mov	r1, r2
 80066e8:	461a      	mov	r2, r3
 80066ea:	4603      	mov	r3, r0
 80066ec:	817b      	strh	r3, [r7, #10]
 80066ee:	460b      	mov	r3, r1
 80066f0:	813b      	strh	r3, [r7, #8]
 80066f2:	4613      	mov	r3, r2
 80066f4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80066f6:	f7fe fd7d 	bl	80051f4 <HAL_GetTick>
 80066fa:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006702:	b2db      	uxtb	r3, r3
 8006704:	2b20      	cmp	r3, #32
 8006706:	f040 8208 	bne.w	8006b1a <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800670a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800670c:	9300      	str	r3, [sp, #0]
 800670e:	2319      	movs	r3, #25
 8006710:	2201      	movs	r2, #1
 8006712:	497b      	ldr	r1, [pc, #492]	; (8006900 <HAL_I2C_Mem_Read+0x224>)
 8006714:	68f8      	ldr	r0, [r7, #12]
 8006716:	f000 fb85 	bl	8006e24 <I2C_WaitOnFlagUntilTimeout>
 800671a:	4603      	mov	r3, r0
 800671c:	2b00      	cmp	r3, #0
 800671e:	d001      	beq.n	8006724 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8006720:	2302      	movs	r3, #2
 8006722:	e1fb      	b.n	8006b1c <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800672a:	2b01      	cmp	r3, #1
 800672c:	d101      	bne.n	8006732 <HAL_I2C_Mem_Read+0x56>
 800672e:	2302      	movs	r3, #2
 8006730:	e1f4      	b.n	8006b1c <HAL_I2C_Mem_Read+0x440>
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	2201      	movs	r2, #1
 8006736:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	f003 0301 	and.w	r3, r3, #1
 8006744:	2b01      	cmp	r3, #1
 8006746:	d007      	beq.n	8006758 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	681a      	ldr	r2, [r3, #0]
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	f042 0201 	orr.w	r2, r2, #1
 8006756:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	681a      	ldr	r2, [r3, #0]
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006766:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	2222      	movs	r2, #34	; 0x22
 800676c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	2240      	movs	r2, #64	; 0x40
 8006774:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	2200      	movs	r2, #0
 800677c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006782:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8006788:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800678e:	b29a      	uxth	r2, r3
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	4a5b      	ldr	r2, [pc, #364]	; (8006904 <HAL_I2C_Mem_Read+0x228>)
 8006798:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800679a:	88f8      	ldrh	r0, [r7, #6]
 800679c:	893a      	ldrh	r2, [r7, #8]
 800679e:	8979      	ldrh	r1, [r7, #10]
 80067a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067a2:	9301      	str	r3, [sp, #4]
 80067a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067a6:	9300      	str	r3, [sp, #0]
 80067a8:	4603      	mov	r3, r0
 80067aa:	68f8      	ldr	r0, [r7, #12]
 80067ac:	f000 fa52 	bl	8006c54 <I2C_RequestMemoryRead>
 80067b0:	4603      	mov	r3, r0
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d001      	beq.n	80067ba <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80067b6:	2301      	movs	r3, #1
 80067b8:	e1b0      	b.n	8006b1c <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d113      	bne.n	80067ea <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80067c2:	2300      	movs	r3, #0
 80067c4:	623b      	str	r3, [r7, #32]
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	695b      	ldr	r3, [r3, #20]
 80067cc:	623b      	str	r3, [r7, #32]
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	699b      	ldr	r3, [r3, #24]
 80067d4:	623b      	str	r3, [r7, #32]
 80067d6:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	681a      	ldr	r2, [r3, #0]
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80067e6:	601a      	str	r2, [r3, #0]
 80067e8:	e184      	b.n	8006af4 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80067ee:	2b01      	cmp	r3, #1
 80067f0:	d11b      	bne.n	800682a <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	681a      	ldr	r2, [r3, #0]
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006800:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006802:	2300      	movs	r3, #0
 8006804:	61fb      	str	r3, [r7, #28]
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	695b      	ldr	r3, [r3, #20]
 800680c:	61fb      	str	r3, [r7, #28]
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	699b      	ldr	r3, [r3, #24]
 8006814:	61fb      	str	r3, [r7, #28]
 8006816:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	681a      	ldr	r2, [r3, #0]
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006826:	601a      	str	r2, [r3, #0]
 8006828:	e164      	b.n	8006af4 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800682e:	2b02      	cmp	r3, #2
 8006830:	d11b      	bne.n	800686a <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	681a      	ldr	r2, [r3, #0]
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006840:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	681a      	ldr	r2, [r3, #0]
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006850:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006852:	2300      	movs	r3, #0
 8006854:	61bb      	str	r3, [r7, #24]
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	695b      	ldr	r3, [r3, #20]
 800685c:	61bb      	str	r3, [r7, #24]
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	699b      	ldr	r3, [r3, #24]
 8006864:	61bb      	str	r3, [r7, #24]
 8006866:	69bb      	ldr	r3, [r7, #24]
 8006868:	e144      	b.n	8006af4 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800686a:	2300      	movs	r3, #0
 800686c:	617b      	str	r3, [r7, #20]
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	695b      	ldr	r3, [r3, #20]
 8006874:	617b      	str	r3, [r7, #20]
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	699b      	ldr	r3, [r3, #24]
 800687c:	617b      	str	r3, [r7, #20]
 800687e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8006880:	e138      	b.n	8006af4 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006886:	2b03      	cmp	r3, #3
 8006888:	f200 80f1 	bhi.w	8006a6e <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006890:	2b01      	cmp	r3, #1
 8006892:	d123      	bne.n	80068dc <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006894:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006896:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006898:	68f8      	ldr	r0, [r7, #12]
 800689a:	f000 fc1b 	bl	80070d4 <I2C_WaitOnRXNEFlagUntilTimeout>
 800689e:	4603      	mov	r3, r0
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d001      	beq.n	80068a8 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80068a4:	2301      	movs	r3, #1
 80068a6:	e139      	b.n	8006b1c <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	691a      	ldr	r2, [r3, #16]
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068b2:	b2d2      	uxtb	r2, r2
 80068b4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068ba:	1c5a      	adds	r2, r3, #1
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80068c4:	3b01      	subs	r3, #1
 80068c6:	b29a      	uxth	r2, r3
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80068d0:	b29b      	uxth	r3, r3
 80068d2:	3b01      	subs	r3, #1
 80068d4:	b29a      	uxth	r2, r3
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	855a      	strh	r2, [r3, #42]	; 0x2a
 80068da:	e10b      	b.n	8006af4 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80068e0:	2b02      	cmp	r3, #2
 80068e2:	d14e      	bne.n	8006982 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80068e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068e6:	9300      	str	r3, [sp, #0]
 80068e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068ea:	2200      	movs	r2, #0
 80068ec:	4906      	ldr	r1, [pc, #24]	; (8006908 <HAL_I2C_Mem_Read+0x22c>)
 80068ee:	68f8      	ldr	r0, [r7, #12]
 80068f0:	f000 fa98 	bl	8006e24 <I2C_WaitOnFlagUntilTimeout>
 80068f4:	4603      	mov	r3, r0
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d008      	beq.n	800690c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80068fa:	2301      	movs	r3, #1
 80068fc:	e10e      	b.n	8006b1c <HAL_I2C_Mem_Read+0x440>
 80068fe:	bf00      	nop
 8006900:	00100002 	.word	0x00100002
 8006904:	ffff0000 	.word	0xffff0000
 8006908:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	681a      	ldr	r2, [r3, #0]
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800691a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	691a      	ldr	r2, [r3, #16]
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006926:	b2d2      	uxtb	r2, r2
 8006928:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800692e:	1c5a      	adds	r2, r3, #1
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006938:	3b01      	subs	r3, #1
 800693a:	b29a      	uxth	r2, r3
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006944:	b29b      	uxth	r3, r3
 8006946:	3b01      	subs	r3, #1
 8006948:	b29a      	uxth	r2, r3
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	691a      	ldr	r2, [r3, #16]
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006958:	b2d2      	uxtb	r2, r2
 800695a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006960:	1c5a      	adds	r2, r3, #1
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800696a:	3b01      	subs	r3, #1
 800696c:	b29a      	uxth	r2, r3
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006976:	b29b      	uxth	r3, r3
 8006978:	3b01      	subs	r3, #1
 800697a:	b29a      	uxth	r2, r3
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006980:	e0b8      	b.n	8006af4 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006984:	9300      	str	r3, [sp, #0]
 8006986:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006988:	2200      	movs	r2, #0
 800698a:	4966      	ldr	r1, [pc, #408]	; (8006b24 <HAL_I2C_Mem_Read+0x448>)
 800698c:	68f8      	ldr	r0, [r7, #12]
 800698e:	f000 fa49 	bl	8006e24 <I2C_WaitOnFlagUntilTimeout>
 8006992:	4603      	mov	r3, r0
 8006994:	2b00      	cmp	r3, #0
 8006996:	d001      	beq.n	800699c <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8006998:	2301      	movs	r3, #1
 800699a:	e0bf      	b.n	8006b1c <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	681a      	ldr	r2, [r3, #0]
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80069aa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	691a      	ldr	r2, [r3, #16]
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069b6:	b2d2      	uxtb	r2, r2
 80069b8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069be:	1c5a      	adds	r2, r3, #1
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80069c8:	3b01      	subs	r3, #1
 80069ca:	b29a      	uxth	r2, r3
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80069d4:	b29b      	uxth	r3, r3
 80069d6:	3b01      	subs	r3, #1
 80069d8:	b29a      	uxth	r2, r3
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80069de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069e0:	9300      	str	r3, [sp, #0]
 80069e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069e4:	2200      	movs	r2, #0
 80069e6:	494f      	ldr	r1, [pc, #316]	; (8006b24 <HAL_I2C_Mem_Read+0x448>)
 80069e8:	68f8      	ldr	r0, [r7, #12]
 80069ea:	f000 fa1b 	bl	8006e24 <I2C_WaitOnFlagUntilTimeout>
 80069ee:	4603      	mov	r3, r0
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d001      	beq.n	80069f8 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80069f4:	2301      	movs	r3, #1
 80069f6:	e091      	b.n	8006b1c <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	681a      	ldr	r2, [r3, #0]
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006a06:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	691a      	ldr	r2, [r3, #16]
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a12:	b2d2      	uxtb	r2, r2
 8006a14:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a1a:	1c5a      	adds	r2, r3, #1
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006a24:	3b01      	subs	r3, #1
 8006a26:	b29a      	uxth	r2, r3
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a30:	b29b      	uxth	r3, r3
 8006a32:	3b01      	subs	r3, #1
 8006a34:	b29a      	uxth	r2, r3
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	691a      	ldr	r2, [r3, #16]
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a44:	b2d2      	uxtb	r2, r2
 8006a46:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a4c:	1c5a      	adds	r2, r3, #1
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006a56:	3b01      	subs	r3, #1
 8006a58:	b29a      	uxth	r2, r3
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a62:	b29b      	uxth	r3, r3
 8006a64:	3b01      	subs	r3, #1
 8006a66:	b29a      	uxth	r2, r3
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006a6c:	e042      	b.n	8006af4 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006a6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006a70:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006a72:	68f8      	ldr	r0, [r7, #12]
 8006a74:	f000 fb2e 	bl	80070d4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006a78:	4603      	mov	r3, r0
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d001      	beq.n	8006a82 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8006a7e:	2301      	movs	r3, #1
 8006a80:	e04c      	b.n	8006b1c <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	691a      	ldr	r2, [r3, #16]
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a8c:	b2d2      	uxtb	r2, r2
 8006a8e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a94:	1c5a      	adds	r2, r3, #1
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006a9e:	3b01      	subs	r3, #1
 8006aa0:	b29a      	uxth	r2, r3
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006aaa:	b29b      	uxth	r3, r3
 8006aac:	3b01      	subs	r3, #1
 8006aae:	b29a      	uxth	r2, r3
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	695b      	ldr	r3, [r3, #20]
 8006aba:	f003 0304 	and.w	r3, r3, #4
 8006abe:	2b04      	cmp	r3, #4
 8006ac0:	d118      	bne.n	8006af4 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	691a      	ldr	r2, [r3, #16]
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006acc:	b2d2      	uxtb	r2, r2
 8006ace:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ad4:	1c5a      	adds	r2, r3, #1
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006ade:	3b01      	subs	r3, #1
 8006ae0:	b29a      	uxth	r2, r3
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006aea:	b29b      	uxth	r3, r3
 8006aec:	3b01      	subs	r3, #1
 8006aee:	b29a      	uxth	r2, r3
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	f47f aec2 	bne.w	8006882 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	2220      	movs	r2, #32
 8006b02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	2200      	movs	r2, #0
 8006b0a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	2200      	movs	r2, #0
 8006b12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006b16:	2300      	movs	r3, #0
 8006b18:	e000      	b.n	8006b1c <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8006b1a:	2302      	movs	r3, #2
  }
}
 8006b1c:	4618      	mov	r0, r3
 8006b1e:	3728      	adds	r7, #40	; 0x28
 8006b20:	46bd      	mov	sp, r7
 8006b22:	bd80      	pop	{r7, pc}
 8006b24:	00010004 	.word	0x00010004

08006b28 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006b28:	b580      	push	{r7, lr}
 8006b2a:	b088      	sub	sp, #32
 8006b2c:	af02      	add	r7, sp, #8
 8006b2e:	60f8      	str	r0, [r7, #12]
 8006b30:	4608      	mov	r0, r1
 8006b32:	4611      	mov	r1, r2
 8006b34:	461a      	mov	r2, r3
 8006b36:	4603      	mov	r3, r0
 8006b38:	817b      	strh	r3, [r7, #10]
 8006b3a:	460b      	mov	r3, r1
 8006b3c:	813b      	strh	r3, [r7, #8]
 8006b3e:	4613      	mov	r3, r2
 8006b40:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	681a      	ldr	r2, [r3, #0]
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006b50:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006b52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b54:	9300      	str	r3, [sp, #0]
 8006b56:	6a3b      	ldr	r3, [r7, #32]
 8006b58:	2200      	movs	r2, #0
 8006b5a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006b5e:	68f8      	ldr	r0, [r7, #12]
 8006b60:	f000 f960 	bl	8006e24 <I2C_WaitOnFlagUntilTimeout>
 8006b64:	4603      	mov	r3, r0
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d00d      	beq.n	8006b86 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b74:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006b78:	d103      	bne.n	8006b82 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006b80:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006b82:	2303      	movs	r3, #3
 8006b84:	e05f      	b.n	8006c46 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006b86:	897b      	ldrh	r3, [r7, #10]
 8006b88:	b2db      	uxtb	r3, r3
 8006b8a:	461a      	mov	r2, r3
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006b94:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006b96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b98:	6a3a      	ldr	r2, [r7, #32]
 8006b9a:	492d      	ldr	r1, [pc, #180]	; (8006c50 <I2C_RequestMemoryWrite+0x128>)
 8006b9c:	68f8      	ldr	r0, [r7, #12]
 8006b9e:	f000 f998 	bl	8006ed2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006ba2:	4603      	mov	r3, r0
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d001      	beq.n	8006bac <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8006ba8:	2301      	movs	r3, #1
 8006baa:	e04c      	b.n	8006c46 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006bac:	2300      	movs	r3, #0
 8006bae:	617b      	str	r3, [r7, #20]
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	695b      	ldr	r3, [r3, #20]
 8006bb6:	617b      	str	r3, [r7, #20]
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	699b      	ldr	r3, [r3, #24]
 8006bbe:	617b      	str	r3, [r7, #20]
 8006bc0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006bc2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006bc4:	6a39      	ldr	r1, [r7, #32]
 8006bc6:	68f8      	ldr	r0, [r7, #12]
 8006bc8:	f000 fa02 	bl	8006fd0 <I2C_WaitOnTXEFlagUntilTimeout>
 8006bcc:	4603      	mov	r3, r0
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d00d      	beq.n	8006bee <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bd6:	2b04      	cmp	r3, #4
 8006bd8:	d107      	bne.n	8006bea <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	681a      	ldr	r2, [r3, #0]
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006be8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006bea:	2301      	movs	r3, #1
 8006bec:	e02b      	b.n	8006c46 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006bee:	88fb      	ldrh	r3, [r7, #6]
 8006bf0:	2b01      	cmp	r3, #1
 8006bf2:	d105      	bne.n	8006c00 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006bf4:	893b      	ldrh	r3, [r7, #8]
 8006bf6:	b2da      	uxtb	r2, r3
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	611a      	str	r2, [r3, #16]
 8006bfe:	e021      	b.n	8006c44 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006c00:	893b      	ldrh	r3, [r7, #8]
 8006c02:	0a1b      	lsrs	r3, r3, #8
 8006c04:	b29b      	uxth	r3, r3
 8006c06:	b2da      	uxtb	r2, r3
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006c0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006c10:	6a39      	ldr	r1, [r7, #32]
 8006c12:	68f8      	ldr	r0, [r7, #12]
 8006c14:	f000 f9dc 	bl	8006fd0 <I2C_WaitOnTXEFlagUntilTimeout>
 8006c18:	4603      	mov	r3, r0
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d00d      	beq.n	8006c3a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c22:	2b04      	cmp	r3, #4
 8006c24:	d107      	bne.n	8006c36 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	681a      	ldr	r2, [r3, #0]
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006c34:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006c36:	2301      	movs	r3, #1
 8006c38:	e005      	b.n	8006c46 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006c3a:	893b      	ldrh	r3, [r7, #8]
 8006c3c:	b2da      	uxtb	r2, r3
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8006c44:	2300      	movs	r3, #0
}
 8006c46:	4618      	mov	r0, r3
 8006c48:	3718      	adds	r7, #24
 8006c4a:	46bd      	mov	sp, r7
 8006c4c:	bd80      	pop	{r7, pc}
 8006c4e:	bf00      	nop
 8006c50:	00010002 	.word	0x00010002

08006c54 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006c54:	b580      	push	{r7, lr}
 8006c56:	b088      	sub	sp, #32
 8006c58:	af02      	add	r7, sp, #8
 8006c5a:	60f8      	str	r0, [r7, #12]
 8006c5c:	4608      	mov	r0, r1
 8006c5e:	4611      	mov	r1, r2
 8006c60:	461a      	mov	r2, r3
 8006c62:	4603      	mov	r3, r0
 8006c64:	817b      	strh	r3, [r7, #10]
 8006c66:	460b      	mov	r3, r1
 8006c68:	813b      	strh	r3, [r7, #8]
 8006c6a:	4613      	mov	r3, r2
 8006c6c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	681a      	ldr	r2, [r3, #0]
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006c7c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	681a      	ldr	r2, [r3, #0]
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006c8c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006c8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c90:	9300      	str	r3, [sp, #0]
 8006c92:	6a3b      	ldr	r3, [r7, #32]
 8006c94:	2200      	movs	r2, #0
 8006c96:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006c9a:	68f8      	ldr	r0, [r7, #12]
 8006c9c:	f000 f8c2 	bl	8006e24 <I2C_WaitOnFlagUntilTimeout>
 8006ca0:	4603      	mov	r3, r0
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d00d      	beq.n	8006cc2 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006cb0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006cb4:	d103      	bne.n	8006cbe <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006cbc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006cbe:	2303      	movs	r3, #3
 8006cc0:	e0aa      	b.n	8006e18 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006cc2:	897b      	ldrh	r3, [r7, #10]
 8006cc4:	b2db      	uxtb	r3, r3
 8006cc6:	461a      	mov	r2, r3
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006cd0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006cd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cd4:	6a3a      	ldr	r2, [r7, #32]
 8006cd6:	4952      	ldr	r1, [pc, #328]	; (8006e20 <I2C_RequestMemoryRead+0x1cc>)
 8006cd8:	68f8      	ldr	r0, [r7, #12]
 8006cda:	f000 f8fa 	bl	8006ed2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006cde:	4603      	mov	r3, r0
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d001      	beq.n	8006ce8 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8006ce4:	2301      	movs	r3, #1
 8006ce6:	e097      	b.n	8006e18 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006ce8:	2300      	movs	r3, #0
 8006cea:	617b      	str	r3, [r7, #20]
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	695b      	ldr	r3, [r3, #20]
 8006cf2:	617b      	str	r3, [r7, #20]
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	699b      	ldr	r3, [r3, #24]
 8006cfa:	617b      	str	r3, [r7, #20]
 8006cfc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006cfe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006d00:	6a39      	ldr	r1, [r7, #32]
 8006d02:	68f8      	ldr	r0, [r7, #12]
 8006d04:	f000 f964 	bl	8006fd0 <I2C_WaitOnTXEFlagUntilTimeout>
 8006d08:	4603      	mov	r3, r0
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d00d      	beq.n	8006d2a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d12:	2b04      	cmp	r3, #4
 8006d14:	d107      	bne.n	8006d26 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	681a      	ldr	r2, [r3, #0]
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006d24:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006d26:	2301      	movs	r3, #1
 8006d28:	e076      	b.n	8006e18 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006d2a:	88fb      	ldrh	r3, [r7, #6]
 8006d2c:	2b01      	cmp	r3, #1
 8006d2e:	d105      	bne.n	8006d3c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006d30:	893b      	ldrh	r3, [r7, #8]
 8006d32:	b2da      	uxtb	r2, r3
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	611a      	str	r2, [r3, #16]
 8006d3a:	e021      	b.n	8006d80 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006d3c:	893b      	ldrh	r3, [r7, #8]
 8006d3e:	0a1b      	lsrs	r3, r3, #8
 8006d40:	b29b      	uxth	r3, r3
 8006d42:	b2da      	uxtb	r2, r3
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006d4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006d4c:	6a39      	ldr	r1, [r7, #32]
 8006d4e:	68f8      	ldr	r0, [r7, #12]
 8006d50:	f000 f93e 	bl	8006fd0 <I2C_WaitOnTXEFlagUntilTimeout>
 8006d54:	4603      	mov	r3, r0
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d00d      	beq.n	8006d76 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d5e:	2b04      	cmp	r3, #4
 8006d60:	d107      	bne.n	8006d72 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	681a      	ldr	r2, [r3, #0]
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006d70:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006d72:	2301      	movs	r3, #1
 8006d74:	e050      	b.n	8006e18 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006d76:	893b      	ldrh	r3, [r7, #8]
 8006d78:	b2da      	uxtb	r2, r3
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006d80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006d82:	6a39      	ldr	r1, [r7, #32]
 8006d84:	68f8      	ldr	r0, [r7, #12]
 8006d86:	f000 f923 	bl	8006fd0 <I2C_WaitOnTXEFlagUntilTimeout>
 8006d8a:	4603      	mov	r3, r0
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d00d      	beq.n	8006dac <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d94:	2b04      	cmp	r3, #4
 8006d96:	d107      	bne.n	8006da8 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	681a      	ldr	r2, [r3, #0]
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006da6:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006da8:	2301      	movs	r3, #1
 8006daa:	e035      	b.n	8006e18 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	681a      	ldr	r2, [r3, #0]
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006dba:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006dbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dbe:	9300      	str	r3, [sp, #0]
 8006dc0:	6a3b      	ldr	r3, [r7, #32]
 8006dc2:	2200      	movs	r2, #0
 8006dc4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006dc8:	68f8      	ldr	r0, [r7, #12]
 8006dca:	f000 f82b 	bl	8006e24 <I2C_WaitOnFlagUntilTimeout>
 8006dce:	4603      	mov	r3, r0
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d00d      	beq.n	8006df0 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006dde:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006de2:	d103      	bne.n	8006dec <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006dea:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006dec:	2303      	movs	r3, #3
 8006dee:	e013      	b.n	8006e18 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8006df0:	897b      	ldrh	r3, [r7, #10]
 8006df2:	b2db      	uxtb	r3, r3
 8006df4:	f043 0301 	orr.w	r3, r3, #1
 8006df8:	b2da      	uxtb	r2, r3
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006e00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e02:	6a3a      	ldr	r2, [r7, #32]
 8006e04:	4906      	ldr	r1, [pc, #24]	; (8006e20 <I2C_RequestMemoryRead+0x1cc>)
 8006e06:	68f8      	ldr	r0, [r7, #12]
 8006e08:	f000 f863 	bl	8006ed2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006e0c:	4603      	mov	r3, r0
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d001      	beq.n	8006e16 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8006e12:	2301      	movs	r3, #1
 8006e14:	e000      	b.n	8006e18 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8006e16:	2300      	movs	r3, #0
}
 8006e18:	4618      	mov	r0, r3
 8006e1a:	3718      	adds	r7, #24
 8006e1c:	46bd      	mov	sp, r7
 8006e1e:	bd80      	pop	{r7, pc}
 8006e20:	00010002 	.word	0x00010002

08006e24 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8006e24:	b580      	push	{r7, lr}
 8006e26:	b084      	sub	sp, #16
 8006e28:	af00      	add	r7, sp, #0
 8006e2a:	60f8      	str	r0, [r7, #12]
 8006e2c:	60b9      	str	r1, [r7, #8]
 8006e2e:	603b      	str	r3, [r7, #0]
 8006e30:	4613      	mov	r3, r2
 8006e32:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006e34:	e025      	b.n	8006e82 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006e36:	683b      	ldr	r3, [r7, #0]
 8006e38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e3c:	d021      	beq.n	8006e82 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006e3e:	f7fe f9d9 	bl	80051f4 <HAL_GetTick>
 8006e42:	4602      	mov	r2, r0
 8006e44:	69bb      	ldr	r3, [r7, #24]
 8006e46:	1ad3      	subs	r3, r2, r3
 8006e48:	683a      	ldr	r2, [r7, #0]
 8006e4a:	429a      	cmp	r2, r3
 8006e4c:	d302      	bcc.n	8006e54 <I2C_WaitOnFlagUntilTimeout+0x30>
 8006e4e:	683b      	ldr	r3, [r7, #0]
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d116      	bne.n	8006e82 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	2200      	movs	r2, #0
 8006e58:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	2220      	movs	r2, #32
 8006e5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	2200      	movs	r2, #0
 8006e66:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e6e:	f043 0220 	orr.w	r2, r3, #32
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	2200      	movs	r2, #0
 8006e7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006e7e:	2301      	movs	r3, #1
 8006e80:	e023      	b.n	8006eca <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006e82:	68bb      	ldr	r3, [r7, #8]
 8006e84:	0c1b      	lsrs	r3, r3, #16
 8006e86:	b2db      	uxtb	r3, r3
 8006e88:	2b01      	cmp	r3, #1
 8006e8a:	d10d      	bne.n	8006ea8 <I2C_WaitOnFlagUntilTimeout+0x84>
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	695b      	ldr	r3, [r3, #20]
 8006e92:	43da      	mvns	r2, r3
 8006e94:	68bb      	ldr	r3, [r7, #8]
 8006e96:	4013      	ands	r3, r2
 8006e98:	b29b      	uxth	r3, r3
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	bf0c      	ite	eq
 8006e9e:	2301      	moveq	r3, #1
 8006ea0:	2300      	movne	r3, #0
 8006ea2:	b2db      	uxtb	r3, r3
 8006ea4:	461a      	mov	r2, r3
 8006ea6:	e00c      	b.n	8006ec2 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	699b      	ldr	r3, [r3, #24]
 8006eae:	43da      	mvns	r2, r3
 8006eb0:	68bb      	ldr	r3, [r7, #8]
 8006eb2:	4013      	ands	r3, r2
 8006eb4:	b29b      	uxth	r3, r3
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	bf0c      	ite	eq
 8006eba:	2301      	moveq	r3, #1
 8006ebc:	2300      	movne	r3, #0
 8006ebe:	b2db      	uxtb	r3, r3
 8006ec0:	461a      	mov	r2, r3
 8006ec2:	79fb      	ldrb	r3, [r7, #7]
 8006ec4:	429a      	cmp	r2, r3
 8006ec6:	d0b6      	beq.n	8006e36 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006ec8:	2300      	movs	r3, #0
}
 8006eca:	4618      	mov	r0, r3
 8006ecc:	3710      	adds	r7, #16
 8006ece:	46bd      	mov	sp, r7
 8006ed0:	bd80      	pop	{r7, pc}

08006ed2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8006ed2:	b580      	push	{r7, lr}
 8006ed4:	b084      	sub	sp, #16
 8006ed6:	af00      	add	r7, sp, #0
 8006ed8:	60f8      	str	r0, [r7, #12]
 8006eda:	60b9      	str	r1, [r7, #8]
 8006edc:	607a      	str	r2, [r7, #4]
 8006ede:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006ee0:	e051      	b.n	8006f86 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	695b      	ldr	r3, [r3, #20]
 8006ee8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006eec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006ef0:	d123      	bne.n	8006f3a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	681a      	ldr	r2, [r3, #0]
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006f00:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006f0a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	2200      	movs	r2, #0
 8006f10:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	2220      	movs	r2, #32
 8006f16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	2200      	movs	r2, #0
 8006f1e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f26:	f043 0204 	orr.w	r2, r3, #4
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	2200      	movs	r2, #0
 8006f32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006f36:	2301      	movs	r3, #1
 8006f38:	e046      	b.n	8006fc8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f40:	d021      	beq.n	8006f86 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006f42:	f7fe f957 	bl	80051f4 <HAL_GetTick>
 8006f46:	4602      	mov	r2, r0
 8006f48:	683b      	ldr	r3, [r7, #0]
 8006f4a:	1ad3      	subs	r3, r2, r3
 8006f4c:	687a      	ldr	r2, [r7, #4]
 8006f4e:	429a      	cmp	r2, r3
 8006f50:	d302      	bcc.n	8006f58 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d116      	bne.n	8006f86 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	2200      	movs	r2, #0
 8006f5c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	2220      	movs	r2, #32
 8006f62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	2200      	movs	r2, #0
 8006f6a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f72:	f043 0220 	orr.w	r2, r3, #32
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	2200      	movs	r2, #0
 8006f7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006f82:	2301      	movs	r3, #1
 8006f84:	e020      	b.n	8006fc8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006f86:	68bb      	ldr	r3, [r7, #8]
 8006f88:	0c1b      	lsrs	r3, r3, #16
 8006f8a:	b2db      	uxtb	r3, r3
 8006f8c:	2b01      	cmp	r3, #1
 8006f8e:	d10c      	bne.n	8006faa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	695b      	ldr	r3, [r3, #20]
 8006f96:	43da      	mvns	r2, r3
 8006f98:	68bb      	ldr	r3, [r7, #8]
 8006f9a:	4013      	ands	r3, r2
 8006f9c:	b29b      	uxth	r3, r3
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	bf14      	ite	ne
 8006fa2:	2301      	movne	r3, #1
 8006fa4:	2300      	moveq	r3, #0
 8006fa6:	b2db      	uxtb	r3, r3
 8006fa8:	e00b      	b.n	8006fc2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	699b      	ldr	r3, [r3, #24]
 8006fb0:	43da      	mvns	r2, r3
 8006fb2:	68bb      	ldr	r3, [r7, #8]
 8006fb4:	4013      	ands	r3, r2
 8006fb6:	b29b      	uxth	r3, r3
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	bf14      	ite	ne
 8006fbc:	2301      	movne	r3, #1
 8006fbe:	2300      	moveq	r3, #0
 8006fc0:	b2db      	uxtb	r3, r3
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d18d      	bne.n	8006ee2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8006fc6:	2300      	movs	r3, #0
}
 8006fc8:	4618      	mov	r0, r3
 8006fca:	3710      	adds	r7, #16
 8006fcc:	46bd      	mov	sp, r7
 8006fce:	bd80      	pop	{r7, pc}

08006fd0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006fd0:	b580      	push	{r7, lr}
 8006fd2:	b084      	sub	sp, #16
 8006fd4:	af00      	add	r7, sp, #0
 8006fd6:	60f8      	str	r0, [r7, #12]
 8006fd8:	60b9      	str	r1, [r7, #8]
 8006fda:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006fdc:	e02d      	b.n	800703a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006fde:	68f8      	ldr	r0, [r7, #12]
 8006fe0:	f000 f8ce 	bl	8007180 <I2C_IsAcknowledgeFailed>
 8006fe4:	4603      	mov	r3, r0
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d001      	beq.n	8006fee <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006fea:	2301      	movs	r3, #1
 8006fec:	e02d      	b.n	800704a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006fee:	68bb      	ldr	r3, [r7, #8]
 8006ff0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ff4:	d021      	beq.n	800703a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006ff6:	f7fe f8fd 	bl	80051f4 <HAL_GetTick>
 8006ffa:	4602      	mov	r2, r0
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	1ad3      	subs	r3, r2, r3
 8007000:	68ba      	ldr	r2, [r7, #8]
 8007002:	429a      	cmp	r2, r3
 8007004:	d302      	bcc.n	800700c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8007006:	68bb      	ldr	r3, [r7, #8]
 8007008:	2b00      	cmp	r3, #0
 800700a:	d116      	bne.n	800703a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	2200      	movs	r2, #0
 8007010:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	2220      	movs	r2, #32
 8007016:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	2200      	movs	r2, #0
 800701e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007026:	f043 0220 	orr.w	r2, r3, #32
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	2200      	movs	r2, #0
 8007032:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007036:	2301      	movs	r3, #1
 8007038:	e007      	b.n	800704a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	695b      	ldr	r3, [r3, #20]
 8007040:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007044:	2b80      	cmp	r3, #128	; 0x80
 8007046:	d1ca      	bne.n	8006fde <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007048:	2300      	movs	r3, #0
}
 800704a:	4618      	mov	r0, r3
 800704c:	3710      	adds	r7, #16
 800704e:	46bd      	mov	sp, r7
 8007050:	bd80      	pop	{r7, pc}

08007052 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007052:	b580      	push	{r7, lr}
 8007054:	b084      	sub	sp, #16
 8007056:	af00      	add	r7, sp, #0
 8007058:	60f8      	str	r0, [r7, #12]
 800705a:	60b9      	str	r1, [r7, #8]
 800705c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800705e:	e02d      	b.n	80070bc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007060:	68f8      	ldr	r0, [r7, #12]
 8007062:	f000 f88d 	bl	8007180 <I2C_IsAcknowledgeFailed>
 8007066:	4603      	mov	r3, r0
 8007068:	2b00      	cmp	r3, #0
 800706a:	d001      	beq.n	8007070 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800706c:	2301      	movs	r3, #1
 800706e:	e02d      	b.n	80070cc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007070:	68bb      	ldr	r3, [r7, #8]
 8007072:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007076:	d021      	beq.n	80070bc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007078:	f7fe f8bc 	bl	80051f4 <HAL_GetTick>
 800707c:	4602      	mov	r2, r0
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	1ad3      	subs	r3, r2, r3
 8007082:	68ba      	ldr	r2, [r7, #8]
 8007084:	429a      	cmp	r2, r3
 8007086:	d302      	bcc.n	800708e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8007088:	68bb      	ldr	r3, [r7, #8]
 800708a:	2b00      	cmp	r3, #0
 800708c:	d116      	bne.n	80070bc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	2200      	movs	r2, #0
 8007092:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	2220      	movs	r2, #32
 8007098:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	2200      	movs	r2, #0
 80070a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070a8:	f043 0220 	orr.w	r2, r3, #32
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	2200      	movs	r2, #0
 80070b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80070b8:	2301      	movs	r3, #1
 80070ba:	e007      	b.n	80070cc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	695b      	ldr	r3, [r3, #20]
 80070c2:	f003 0304 	and.w	r3, r3, #4
 80070c6:	2b04      	cmp	r3, #4
 80070c8:	d1ca      	bne.n	8007060 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80070ca:	2300      	movs	r3, #0
}
 80070cc:	4618      	mov	r0, r3
 80070ce:	3710      	adds	r7, #16
 80070d0:	46bd      	mov	sp, r7
 80070d2:	bd80      	pop	{r7, pc}

080070d4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80070d4:	b580      	push	{r7, lr}
 80070d6:	b084      	sub	sp, #16
 80070d8:	af00      	add	r7, sp, #0
 80070da:	60f8      	str	r0, [r7, #12]
 80070dc:	60b9      	str	r1, [r7, #8]
 80070de:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80070e0:	e042      	b.n	8007168 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	695b      	ldr	r3, [r3, #20]
 80070e8:	f003 0310 	and.w	r3, r3, #16
 80070ec:	2b10      	cmp	r3, #16
 80070ee:	d119      	bne.n	8007124 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	f06f 0210 	mvn.w	r2, #16
 80070f8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	2200      	movs	r2, #0
 80070fe:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	2220      	movs	r2, #32
 8007104:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	2200      	movs	r2, #0
 800710c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	2200      	movs	r2, #0
 800711c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007120:	2301      	movs	r3, #1
 8007122:	e029      	b.n	8007178 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007124:	f7fe f866 	bl	80051f4 <HAL_GetTick>
 8007128:	4602      	mov	r2, r0
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	1ad3      	subs	r3, r2, r3
 800712e:	68ba      	ldr	r2, [r7, #8]
 8007130:	429a      	cmp	r2, r3
 8007132:	d302      	bcc.n	800713a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8007134:	68bb      	ldr	r3, [r7, #8]
 8007136:	2b00      	cmp	r3, #0
 8007138:	d116      	bne.n	8007168 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	2200      	movs	r2, #0
 800713e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	2220      	movs	r2, #32
 8007144:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	2200      	movs	r2, #0
 800714c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007154:	f043 0220 	orr.w	r2, r3, #32
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	2200      	movs	r2, #0
 8007160:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007164:	2301      	movs	r3, #1
 8007166:	e007      	b.n	8007178 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	695b      	ldr	r3, [r3, #20]
 800716e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007172:	2b40      	cmp	r3, #64	; 0x40
 8007174:	d1b5      	bne.n	80070e2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8007176:	2300      	movs	r3, #0
}
 8007178:	4618      	mov	r0, r3
 800717a:	3710      	adds	r7, #16
 800717c:	46bd      	mov	sp, r7
 800717e:	bd80      	pop	{r7, pc}

08007180 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8007180:	b480      	push	{r7}
 8007182:	b083      	sub	sp, #12
 8007184:	af00      	add	r7, sp, #0
 8007186:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	695b      	ldr	r3, [r3, #20]
 800718e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007192:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007196:	d11b      	bne.n	80071d0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80071a0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	2200      	movs	r2, #0
 80071a6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	2220      	movs	r2, #32
 80071ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	2200      	movs	r2, #0
 80071b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071bc:	f043 0204 	orr.w	r2, r3, #4
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	2200      	movs	r2, #0
 80071c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80071cc:	2301      	movs	r3, #1
 80071ce:	e000      	b.n	80071d2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80071d0:	2300      	movs	r3, #0
}
 80071d2:	4618      	mov	r0, r3
 80071d4:	370c      	adds	r7, #12
 80071d6:	46bd      	mov	sp, r7
 80071d8:	bc80      	pop	{r7}
 80071da:	4770      	bx	lr

080071dc <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80071dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80071de:	b08f      	sub	sp, #60	; 0x3c
 80071e0:	af0a      	add	r7, sp, #40	; 0x28
 80071e2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d101      	bne.n	80071ee <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80071ea:	2301      	movs	r3, #1
 80071ec:	e10f      	b.n	800740e <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80071fa:	b2db      	uxtb	r3, r3
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d106      	bne.n	800720e <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	2200      	movs	r2, #0
 8007204:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8007208:	6878      	ldr	r0, [r7, #4]
 800720a:	f005 fdd3 	bl	800cdb4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	2203      	movs	r2, #3
 8007212:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8007216:	68bb      	ldr	r3, [r7, #8]
 8007218:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800721a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800721e:	2b00      	cmp	r3, #0
 8007220:	d102      	bne.n	8007228 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	2200      	movs	r2, #0
 8007226:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	4618      	mov	r0, r3
 800722e:	f002 fdc3 	bl	8009db8 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	603b      	str	r3, [r7, #0]
 8007238:	687e      	ldr	r6, [r7, #4]
 800723a:	466d      	mov	r5, sp
 800723c:	f106 0410 	add.w	r4, r6, #16
 8007240:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007242:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007244:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007246:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007248:	e894 0003 	ldmia.w	r4, {r0, r1}
 800724c:	e885 0003 	stmia.w	r5, {r0, r1}
 8007250:	1d33      	adds	r3, r6, #4
 8007252:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007254:	6838      	ldr	r0, [r7, #0]
 8007256:	f002 fca5 	bl	8009ba4 <USB_CoreInit>
 800725a:	4603      	mov	r3, r0
 800725c:	2b00      	cmp	r3, #0
 800725e:	d005      	beq.n	800726c <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	2202      	movs	r2, #2
 8007264:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8007268:	2301      	movs	r3, #1
 800726a:	e0d0      	b.n	800740e <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	2100      	movs	r1, #0
 8007272:	4618      	mov	r0, r3
 8007274:	f002 fdb0 	bl	8009dd8 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007278:	2300      	movs	r3, #0
 800727a:	73fb      	strb	r3, [r7, #15]
 800727c:	e04a      	b.n	8007314 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800727e:	7bfa      	ldrb	r2, [r7, #15]
 8007280:	6879      	ldr	r1, [r7, #4]
 8007282:	4613      	mov	r3, r2
 8007284:	00db      	lsls	r3, r3, #3
 8007286:	1a9b      	subs	r3, r3, r2
 8007288:	009b      	lsls	r3, r3, #2
 800728a:	440b      	add	r3, r1
 800728c:	333d      	adds	r3, #61	; 0x3d
 800728e:	2201      	movs	r2, #1
 8007290:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8007292:	7bfa      	ldrb	r2, [r7, #15]
 8007294:	6879      	ldr	r1, [r7, #4]
 8007296:	4613      	mov	r3, r2
 8007298:	00db      	lsls	r3, r3, #3
 800729a:	1a9b      	subs	r3, r3, r2
 800729c:	009b      	lsls	r3, r3, #2
 800729e:	440b      	add	r3, r1
 80072a0:	333c      	adds	r3, #60	; 0x3c
 80072a2:	7bfa      	ldrb	r2, [r7, #15]
 80072a4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80072a6:	7bfa      	ldrb	r2, [r7, #15]
 80072a8:	7bfb      	ldrb	r3, [r7, #15]
 80072aa:	b298      	uxth	r0, r3
 80072ac:	6879      	ldr	r1, [r7, #4]
 80072ae:	4613      	mov	r3, r2
 80072b0:	00db      	lsls	r3, r3, #3
 80072b2:	1a9b      	subs	r3, r3, r2
 80072b4:	009b      	lsls	r3, r3, #2
 80072b6:	440b      	add	r3, r1
 80072b8:	3342      	adds	r3, #66	; 0x42
 80072ba:	4602      	mov	r2, r0
 80072bc:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80072be:	7bfa      	ldrb	r2, [r7, #15]
 80072c0:	6879      	ldr	r1, [r7, #4]
 80072c2:	4613      	mov	r3, r2
 80072c4:	00db      	lsls	r3, r3, #3
 80072c6:	1a9b      	subs	r3, r3, r2
 80072c8:	009b      	lsls	r3, r3, #2
 80072ca:	440b      	add	r3, r1
 80072cc:	333f      	adds	r3, #63	; 0x3f
 80072ce:	2200      	movs	r2, #0
 80072d0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80072d2:	7bfa      	ldrb	r2, [r7, #15]
 80072d4:	6879      	ldr	r1, [r7, #4]
 80072d6:	4613      	mov	r3, r2
 80072d8:	00db      	lsls	r3, r3, #3
 80072da:	1a9b      	subs	r3, r3, r2
 80072dc:	009b      	lsls	r3, r3, #2
 80072de:	440b      	add	r3, r1
 80072e0:	3344      	adds	r3, #68	; 0x44
 80072e2:	2200      	movs	r2, #0
 80072e4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80072e6:	7bfa      	ldrb	r2, [r7, #15]
 80072e8:	6879      	ldr	r1, [r7, #4]
 80072ea:	4613      	mov	r3, r2
 80072ec:	00db      	lsls	r3, r3, #3
 80072ee:	1a9b      	subs	r3, r3, r2
 80072f0:	009b      	lsls	r3, r3, #2
 80072f2:	440b      	add	r3, r1
 80072f4:	3348      	adds	r3, #72	; 0x48
 80072f6:	2200      	movs	r2, #0
 80072f8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80072fa:	7bfa      	ldrb	r2, [r7, #15]
 80072fc:	6879      	ldr	r1, [r7, #4]
 80072fe:	4613      	mov	r3, r2
 8007300:	00db      	lsls	r3, r3, #3
 8007302:	1a9b      	subs	r3, r3, r2
 8007304:	009b      	lsls	r3, r3, #2
 8007306:	440b      	add	r3, r1
 8007308:	3350      	adds	r3, #80	; 0x50
 800730a:	2200      	movs	r2, #0
 800730c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800730e:	7bfb      	ldrb	r3, [r7, #15]
 8007310:	3301      	adds	r3, #1
 8007312:	73fb      	strb	r3, [r7, #15]
 8007314:	7bfa      	ldrb	r2, [r7, #15]
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	685b      	ldr	r3, [r3, #4]
 800731a:	429a      	cmp	r2, r3
 800731c:	d3af      	bcc.n	800727e <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800731e:	2300      	movs	r3, #0
 8007320:	73fb      	strb	r3, [r7, #15]
 8007322:	e044      	b.n	80073ae <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8007324:	7bfa      	ldrb	r2, [r7, #15]
 8007326:	6879      	ldr	r1, [r7, #4]
 8007328:	4613      	mov	r3, r2
 800732a:	00db      	lsls	r3, r3, #3
 800732c:	1a9b      	subs	r3, r3, r2
 800732e:	009b      	lsls	r3, r3, #2
 8007330:	440b      	add	r3, r1
 8007332:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8007336:	2200      	movs	r2, #0
 8007338:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800733a:	7bfa      	ldrb	r2, [r7, #15]
 800733c:	6879      	ldr	r1, [r7, #4]
 800733e:	4613      	mov	r3, r2
 8007340:	00db      	lsls	r3, r3, #3
 8007342:	1a9b      	subs	r3, r3, r2
 8007344:	009b      	lsls	r3, r3, #2
 8007346:	440b      	add	r3, r1
 8007348:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800734c:	7bfa      	ldrb	r2, [r7, #15]
 800734e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8007350:	7bfa      	ldrb	r2, [r7, #15]
 8007352:	6879      	ldr	r1, [r7, #4]
 8007354:	4613      	mov	r3, r2
 8007356:	00db      	lsls	r3, r3, #3
 8007358:	1a9b      	subs	r3, r3, r2
 800735a:	009b      	lsls	r3, r3, #2
 800735c:	440b      	add	r3, r1
 800735e:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8007362:	2200      	movs	r2, #0
 8007364:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8007366:	7bfa      	ldrb	r2, [r7, #15]
 8007368:	6879      	ldr	r1, [r7, #4]
 800736a:	4613      	mov	r3, r2
 800736c:	00db      	lsls	r3, r3, #3
 800736e:	1a9b      	subs	r3, r3, r2
 8007370:	009b      	lsls	r3, r3, #2
 8007372:	440b      	add	r3, r1
 8007374:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8007378:	2200      	movs	r2, #0
 800737a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800737c:	7bfa      	ldrb	r2, [r7, #15]
 800737e:	6879      	ldr	r1, [r7, #4]
 8007380:	4613      	mov	r3, r2
 8007382:	00db      	lsls	r3, r3, #3
 8007384:	1a9b      	subs	r3, r3, r2
 8007386:	009b      	lsls	r3, r3, #2
 8007388:	440b      	add	r3, r1
 800738a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800738e:	2200      	movs	r2, #0
 8007390:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8007392:	7bfa      	ldrb	r2, [r7, #15]
 8007394:	6879      	ldr	r1, [r7, #4]
 8007396:	4613      	mov	r3, r2
 8007398:	00db      	lsls	r3, r3, #3
 800739a:	1a9b      	subs	r3, r3, r2
 800739c:	009b      	lsls	r3, r3, #2
 800739e:	440b      	add	r3, r1
 80073a0:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80073a4:	2200      	movs	r2, #0
 80073a6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80073a8:	7bfb      	ldrb	r3, [r7, #15]
 80073aa:	3301      	adds	r3, #1
 80073ac:	73fb      	strb	r3, [r7, #15]
 80073ae:	7bfa      	ldrb	r2, [r7, #15]
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	685b      	ldr	r3, [r3, #4]
 80073b4:	429a      	cmp	r2, r3
 80073b6:	d3b5      	bcc.n	8007324 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	603b      	str	r3, [r7, #0]
 80073be:	687e      	ldr	r6, [r7, #4]
 80073c0:	466d      	mov	r5, sp
 80073c2:	f106 0410 	add.w	r4, r6, #16
 80073c6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80073c8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80073ca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80073cc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80073ce:	e894 0003 	ldmia.w	r4, {r0, r1}
 80073d2:	e885 0003 	stmia.w	r5, {r0, r1}
 80073d6:	1d33      	adds	r3, r6, #4
 80073d8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80073da:	6838      	ldr	r0, [r7, #0]
 80073dc:	f002 fd48 	bl	8009e70 <USB_DevInit>
 80073e0:	4603      	mov	r3, r0
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d005      	beq.n	80073f2 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	2202      	movs	r2, #2
 80073ea:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80073ee:	2301      	movs	r3, #1
 80073f0:	e00d      	b.n	800740e <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	2200      	movs	r2, #0
 80073f6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	2201      	movs	r2, #1
 80073fe:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  (void)USB_DevDisconnect(hpcd->Instance);
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	4618      	mov	r0, r3
 8007408:	f003 fdb9 	bl	800af7e <USB_DevDisconnect>

  return HAL_OK;
 800740c:	2300      	movs	r3, #0
}
 800740e:	4618      	mov	r0, r3
 8007410:	3714      	adds	r7, #20
 8007412:	46bd      	mov	sp, r7
 8007414:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007416 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8007416:	b580      	push	{r7, lr}
 8007418:	b082      	sub	sp, #8
 800741a:	af00      	add	r7, sp, #0
 800741c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8007424:	2b01      	cmp	r3, #1
 8007426:	d101      	bne.n	800742c <HAL_PCD_Start+0x16>
 8007428:	2302      	movs	r3, #2
 800742a:	e012      	b.n	8007452 <HAL_PCD_Start+0x3c>
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	2201      	movs	r2, #1
 8007430:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  __HAL_PCD_ENABLE(hpcd);
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	4618      	mov	r0, r3
 800743a:	f002 fcad 	bl	8009d98 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	4618      	mov	r0, r3
 8007444:	f003 fd7b 	bl	800af3e <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	2200      	movs	r2, #0
 800744c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8007450:	2300      	movs	r3, #0
}
 8007452:	4618      	mov	r0, r3
 8007454:	3708      	adds	r7, #8
 8007456:	46bd      	mov	sp, r7
 8007458:	bd80      	pop	{r7, pc}

0800745a <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800745a:	b590      	push	{r4, r7, lr}
 800745c:	b08d      	sub	sp, #52	; 0x34
 800745e:	af00      	add	r7, sp, #0
 8007460:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007468:	6a3b      	ldr	r3, [r7, #32]
 800746a:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t temp;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	4618      	mov	r0, r3
 8007472:	f003 fe32 	bl	800b0da <USB_GetMode>
 8007476:	4603      	mov	r3, r0
 8007478:	2b00      	cmp	r3, #0
 800747a:	f040 838f 	bne.w	8007b9c <HAL_PCD_IRQHandler+0x742>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	4618      	mov	r0, r3
 8007484:	f003 fd9b 	bl	800afbe <USB_ReadInterrupts>
 8007488:	4603      	mov	r3, r0
 800748a:	2b00      	cmp	r3, #0
 800748c:	f000 8385 	beq.w	8007b9a <HAL_PCD_IRQHandler+0x740>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	4618      	mov	r0, r3
 8007496:	f003 fd92 	bl	800afbe <USB_ReadInterrupts>
 800749a:	4603      	mov	r3, r0
 800749c:	f003 0302 	and.w	r3, r3, #2
 80074a0:	2b02      	cmp	r3, #2
 80074a2:	d107      	bne.n	80074b4 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	695a      	ldr	r2, [r3, #20]
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	f002 0202 	and.w	r2, r2, #2
 80074b2:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	4618      	mov	r0, r3
 80074ba:	f003 fd80 	bl	800afbe <USB_ReadInterrupts>
 80074be:	4603      	mov	r3, r0
 80074c0:	f003 0310 	and.w	r3, r3, #16
 80074c4:	2b10      	cmp	r3, #16
 80074c6:	d161      	bne.n	800758c <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	699a      	ldr	r2, [r3, #24]
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	f022 0210 	bic.w	r2, r2, #16
 80074d6:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 80074d8:	6a3b      	ldr	r3, [r7, #32]
 80074da:	6a1b      	ldr	r3, [r3, #32]
 80074dc:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 80074de:	69bb      	ldr	r3, [r7, #24]
 80074e0:	f003 020f 	and.w	r2, r3, #15
 80074e4:	4613      	mov	r3, r2
 80074e6:	00db      	lsls	r3, r3, #3
 80074e8:	1a9b      	subs	r3, r3, r2
 80074ea:	009b      	lsls	r3, r3, #2
 80074ec:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80074f0:	687a      	ldr	r2, [r7, #4]
 80074f2:	4413      	add	r3, r2
 80074f4:	3304      	adds	r3, #4
 80074f6:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80074f8:	69bb      	ldr	r3, [r7, #24]
 80074fa:	0c5b      	lsrs	r3, r3, #17
 80074fc:	f003 030f 	and.w	r3, r3, #15
 8007500:	2b02      	cmp	r3, #2
 8007502:	d124      	bne.n	800754e <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8007504:	69ba      	ldr	r2, [r7, #24]
 8007506:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800750a:	4013      	ands	r3, r2
 800750c:	2b00      	cmp	r3, #0
 800750e:	d035      	beq.n	800757c <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8007510:	697b      	ldr	r3, [r7, #20]
 8007512:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8007514:	69bb      	ldr	r3, [r7, #24]
 8007516:	091b      	lsrs	r3, r3, #4
 8007518:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800751a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800751e:	b29b      	uxth	r3, r3
 8007520:	461a      	mov	r2, r3
 8007522:	6a38      	ldr	r0, [r7, #32]
 8007524:	f003 fbbd 	bl	800aca2 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8007528:	697b      	ldr	r3, [r7, #20]
 800752a:	68da      	ldr	r2, [r3, #12]
 800752c:	69bb      	ldr	r3, [r7, #24]
 800752e:	091b      	lsrs	r3, r3, #4
 8007530:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007534:	441a      	add	r2, r3
 8007536:	697b      	ldr	r3, [r7, #20]
 8007538:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800753a:	697b      	ldr	r3, [r7, #20]
 800753c:	699a      	ldr	r2, [r3, #24]
 800753e:	69bb      	ldr	r3, [r7, #24]
 8007540:	091b      	lsrs	r3, r3, #4
 8007542:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007546:	441a      	add	r2, r3
 8007548:	697b      	ldr	r3, [r7, #20]
 800754a:	619a      	str	r2, [r3, #24]
 800754c:	e016      	b.n	800757c <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 800754e:	69bb      	ldr	r3, [r7, #24]
 8007550:	0c5b      	lsrs	r3, r3, #17
 8007552:	f003 030f 	and.w	r3, r3, #15
 8007556:	2b06      	cmp	r3, #6
 8007558:	d110      	bne.n	800757c <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8007560:	2208      	movs	r2, #8
 8007562:	4619      	mov	r1, r3
 8007564:	6a38      	ldr	r0, [r7, #32]
 8007566:	f003 fb9c 	bl	800aca2 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800756a:	697b      	ldr	r3, [r7, #20]
 800756c:	699a      	ldr	r2, [r3, #24]
 800756e:	69bb      	ldr	r3, [r7, #24]
 8007570:	091b      	lsrs	r3, r3, #4
 8007572:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007576:	441a      	add	r2, r3
 8007578:	697b      	ldr	r3, [r7, #20]
 800757a:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	699a      	ldr	r2, [r3, #24]
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	f042 0210 	orr.w	r2, r2, #16
 800758a:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	4618      	mov	r0, r3
 8007592:	f003 fd14 	bl	800afbe <USB_ReadInterrupts>
 8007596:	4603      	mov	r3, r0
 8007598:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800759c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80075a0:	d16e      	bne.n	8007680 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 80075a2:	2300      	movs	r3, #0
 80075a4:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	4618      	mov	r0, r3
 80075ac:	f003 fd19 	bl	800afe2 <USB_ReadDevAllOutEpInterrupt>
 80075b0:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80075b2:	e062      	b.n	800767a <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 80075b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075b6:	f003 0301 	and.w	r3, r3, #1
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d057      	beq.n	800766e <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80075c4:	b2d2      	uxtb	r2, r2
 80075c6:	4611      	mov	r1, r2
 80075c8:	4618      	mov	r0, r3
 80075ca:	f003 fd3c 	bl	800b046 <USB_ReadDevOutEPInterrupt>
 80075ce:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80075d0:	693b      	ldr	r3, [r7, #16]
 80075d2:	f003 0301 	and.w	r3, r3, #1
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d00c      	beq.n	80075f4 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80075da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075dc:	015a      	lsls	r2, r3, #5
 80075de:	69fb      	ldr	r3, [r7, #28]
 80075e0:	4413      	add	r3, r2
 80075e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80075e6:	461a      	mov	r2, r3
 80075e8:	2301      	movs	r3, #1
 80075ea:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80075ec:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80075ee:	6878      	ldr	r0, [r7, #4]
 80075f0:	f000 fda2 	bl	8008138 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80075f4:	693b      	ldr	r3, [r7, #16]
 80075f6:	f003 0308 	and.w	r3, r3, #8
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d00c      	beq.n	8007618 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80075fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007600:	015a      	lsls	r2, r3, #5
 8007602:	69fb      	ldr	r3, [r7, #28]
 8007604:	4413      	add	r3, r2
 8007606:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800760a:	461a      	mov	r2, r3
 800760c:	2308      	movs	r3, #8
 800760e:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8007610:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007612:	6878      	ldr	r0, [r7, #4]
 8007614:	f000 fe9c 	bl	8008350 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8007618:	693b      	ldr	r3, [r7, #16]
 800761a:	f003 0310 	and.w	r3, r3, #16
 800761e:	2b00      	cmp	r3, #0
 8007620:	d008      	beq.n	8007634 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8007622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007624:	015a      	lsls	r2, r3, #5
 8007626:	69fb      	ldr	r3, [r7, #28]
 8007628:	4413      	add	r3, r2
 800762a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800762e:	461a      	mov	r2, r3
 8007630:	2310      	movs	r3, #16
 8007632:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8007634:	693b      	ldr	r3, [r7, #16]
 8007636:	f003 0320 	and.w	r3, r3, #32
 800763a:	2b00      	cmp	r3, #0
 800763c:	d008      	beq.n	8007650 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800763e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007640:	015a      	lsls	r2, r3, #5
 8007642:	69fb      	ldr	r3, [r7, #28]
 8007644:	4413      	add	r3, r2
 8007646:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800764a:	461a      	mov	r2, r3
 800764c:	2320      	movs	r3, #32
 800764e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8007650:	693b      	ldr	r3, [r7, #16]
 8007652:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007656:	2b00      	cmp	r3, #0
 8007658:	d009      	beq.n	800766e <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800765a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800765c:	015a      	lsls	r2, r3, #5
 800765e:	69fb      	ldr	r3, [r7, #28]
 8007660:	4413      	add	r3, r2
 8007662:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007666:	461a      	mov	r2, r3
 8007668:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800766c:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800766e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007670:	3301      	adds	r3, #1
 8007672:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8007674:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007676:	085b      	lsrs	r3, r3, #1
 8007678:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800767a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800767c:	2b00      	cmp	r3, #0
 800767e:	d199      	bne.n	80075b4 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	4618      	mov	r0, r3
 8007686:	f003 fc9a 	bl	800afbe <USB_ReadInterrupts>
 800768a:	4603      	mov	r3, r0
 800768c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007690:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007694:	f040 80c0 	bne.w	8007818 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	4618      	mov	r0, r3
 800769e:	f003 fcb9 	bl	800b014 <USB_ReadDevAllInEpInterrupt>
 80076a2:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80076a4:	2300      	movs	r3, #0
 80076a6:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80076a8:	e0b2      	b.n	8007810 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80076aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076ac:	f003 0301 	and.w	r3, r3, #1
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	f000 80a7 	beq.w	8007804 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80076bc:	b2d2      	uxtb	r2, r2
 80076be:	4611      	mov	r1, r2
 80076c0:	4618      	mov	r0, r3
 80076c2:	f003 fcdd 	bl	800b080 <USB_ReadDevInEPInterrupt>
 80076c6:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80076c8:	693b      	ldr	r3, [r7, #16]
 80076ca:	f003 0301 	and.w	r3, r3, #1
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d057      	beq.n	8007782 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80076d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076d4:	f003 030f 	and.w	r3, r3, #15
 80076d8:	2201      	movs	r2, #1
 80076da:	fa02 f303 	lsl.w	r3, r2, r3
 80076de:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80076e0:	69fb      	ldr	r3, [r7, #28]
 80076e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80076e6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	43db      	mvns	r3, r3
 80076ec:	69f9      	ldr	r1, [r7, #28]
 80076ee:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80076f2:	4013      	ands	r3, r2
 80076f4:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80076f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076f8:	015a      	lsls	r2, r3, #5
 80076fa:	69fb      	ldr	r3, [r7, #28]
 80076fc:	4413      	add	r3, r2
 80076fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007702:	461a      	mov	r2, r3
 8007704:	2301      	movs	r3, #1
 8007706:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	691b      	ldr	r3, [r3, #16]
 800770c:	2b01      	cmp	r3, #1
 800770e:	d132      	bne.n	8007776 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8007710:	6879      	ldr	r1, [r7, #4]
 8007712:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007714:	4613      	mov	r3, r2
 8007716:	00db      	lsls	r3, r3, #3
 8007718:	1a9b      	subs	r3, r3, r2
 800771a:	009b      	lsls	r3, r3, #2
 800771c:	440b      	add	r3, r1
 800771e:	3348      	adds	r3, #72	; 0x48
 8007720:	6819      	ldr	r1, [r3, #0]
 8007722:	6878      	ldr	r0, [r7, #4]
 8007724:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007726:	4613      	mov	r3, r2
 8007728:	00db      	lsls	r3, r3, #3
 800772a:	1a9b      	subs	r3, r3, r2
 800772c:	009b      	lsls	r3, r3, #2
 800772e:	4403      	add	r3, r0
 8007730:	3344      	adds	r3, #68	; 0x44
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	4419      	add	r1, r3
 8007736:	6878      	ldr	r0, [r7, #4]
 8007738:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800773a:	4613      	mov	r3, r2
 800773c:	00db      	lsls	r3, r3, #3
 800773e:	1a9b      	subs	r3, r3, r2
 8007740:	009b      	lsls	r3, r3, #2
 8007742:	4403      	add	r3, r0
 8007744:	3348      	adds	r3, #72	; 0x48
 8007746:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8007748:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800774a:	2b00      	cmp	r3, #0
 800774c:	d113      	bne.n	8007776 <HAL_PCD_IRQHandler+0x31c>
 800774e:	6879      	ldr	r1, [r7, #4]
 8007750:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007752:	4613      	mov	r3, r2
 8007754:	00db      	lsls	r3, r3, #3
 8007756:	1a9b      	subs	r3, r3, r2
 8007758:	009b      	lsls	r3, r3, #2
 800775a:	440b      	add	r3, r1
 800775c:	3350      	adds	r3, #80	; 0x50
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	2b00      	cmp	r3, #0
 8007762:	d108      	bne.n	8007776 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	6818      	ldr	r0, [r3, #0]
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800776e:	461a      	mov	r2, r3
 8007770:	2101      	movs	r1, #1
 8007772:	f003 fce1 	bl	800b138 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8007776:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007778:	b2db      	uxtb	r3, r3
 800777a:	4619      	mov	r1, r3
 800777c:	6878      	ldr	r0, [r7, #4]
 800777e:	f005 fb9a 	bl	800ceb6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8007782:	693b      	ldr	r3, [r7, #16]
 8007784:	f003 0308 	and.w	r3, r3, #8
 8007788:	2b00      	cmp	r3, #0
 800778a:	d008      	beq.n	800779e <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800778c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800778e:	015a      	lsls	r2, r3, #5
 8007790:	69fb      	ldr	r3, [r7, #28]
 8007792:	4413      	add	r3, r2
 8007794:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007798:	461a      	mov	r2, r3
 800779a:	2308      	movs	r3, #8
 800779c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800779e:	693b      	ldr	r3, [r7, #16]
 80077a0:	f003 0310 	and.w	r3, r3, #16
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d008      	beq.n	80077ba <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80077a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077aa:	015a      	lsls	r2, r3, #5
 80077ac:	69fb      	ldr	r3, [r7, #28]
 80077ae:	4413      	add	r3, r2
 80077b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80077b4:	461a      	mov	r2, r3
 80077b6:	2310      	movs	r3, #16
 80077b8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80077ba:	693b      	ldr	r3, [r7, #16]
 80077bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d008      	beq.n	80077d6 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80077c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077c6:	015a      	lsls	r2, r3, #5
 80077c8:	69fb      	ldr	r3, [r7, #28]
 80077ca:	4413      	add	r3, r2
 80077cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80077d0:	461a      	mov	r2, r3
 80077d2:	2340      	movs	r3, #64	; 0x40
 80077d4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80077d6:	693b      	ldr	r3, [r7, #16]
 80077d8:	f003 0302 	and.w	r3, r3, #2
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d008      	beq.n	80077f2 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80077e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077e2:	015a      	lsls	r2, r3, #5
 80077e4:	69fb      	ldr	r3, [r7, #28]
 80077e6:	4413      	add	r3, r2
 80077e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80077ec:	461a      	mov	r2, r3
 80077ee:	2302      	movs	r3, #2
 80077f0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80077f2:	693b      	ldr	r3, [r7, #16]
 80077f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d003      	beq.n	8007804 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80077fc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80077fe:	6878      	ldr	r0, [r7, #4]
 8007800:	f000 fc0c 	bl	800801c <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8007804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007806:	3301      	adds	r3, #1
 8007808:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800780a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800780c:	085b      	lsrs	r3, r3, #1
 800780e:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8007810:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007812:	2b00      	cmp	r3, #0
 8007814:	f47f af49 	bne.w	80076aa <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	4618      	mov	r0, r3
 800781e:	f003 fbce 	bl	800afbe <USB_ReadInterrupts>
 8007822:	4603      	mov	r3, r0
 8007824:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007828:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800782c:	d114      	bne.n	8007858 <HAL_PCD_IRQHandler+0x3fe>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800782e:	69fb      	ldr	r3, [r7, #28]
 8007830:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007834:	685b      	ldr	r3, [r3, #4]
 8007836:	69fa      	ldr	r2, [r7, #28]
 8007838:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800783c:	f023 0301 	bic.w	r3, r3, #1
 8007840:	6053      	str	r3, [r2, #4]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResumeCallback(hpcd);
#else
      HAL_PCD_ResumeCallback(hpcd);
 8007842:	6878      	ldr	r0, [r7, #4]
 8007844:	f005 fbae 	bl	800cfa4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	695a      	ldr	r2, [r3, #20]
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8007856:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	4618      	mov	r0, r3
 800785e:	f003 fbae 	bl	800afbe <USB_ReadInterrupts>
 8007862:	4603      	mov	r3, r0
 8007864:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007868:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800786c:	d112      	bne.n	8007894 <HAL_PCD_IRQHandler+0x43a>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800786e:	69fb      	ldr	r3, [r7, #28]
 8007870:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007874:	689b      	ldr	r3, [r3, #8]
 8007876:	f003 0301 	and.w	r3, r3, #1
 800787a:	2b01      	cmp	r3, #1
 800787c:	d102      	bne.n	8007884 <HAL_PCD_IRQHandler+0x42a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800787e:	6878      	ldr	r0, [r7, #4]
 8007880:	f005 fb6a 	bl	800cf58 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	695a      	ldr	r2, [r3, #20]
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8007892:	615a      	str	r2, [r3, #20]
    }
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	4618      	mov	r0, r3
 800789a:	f003 fb90 	bl	800afbe <USB_ReadInterrupts>
 800789e:	4603      	mov	r3, r0
 80078a0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80078a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80078a8:	f040 80c7 	bne.w	8007a3a <HAL_PCD_IRQHandler+0x5e0>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80078ac:	69fb      	ldr	r3, [r7, #28]
 80078ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80078b2:	685b      	ldr	r3, [r3, #4]
 80078b4:	69fa      	ldr	r2, [r7, #28]
 80078b6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80078ba:	f023 0301 	bic.w	r3, r3, #1
 80078be:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	2110      	movs	r1, #16
 80078c6:	4618      	mov	r0, r3
 80078c8:	f002 fc36 	bl	800a138 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80078cc:	2300      	movs	r3, #0
 80078ce:	62fb      	str	r3, [r7, #44]	; 0x2c
 80078d0:	e056      	b.n	8007980 <HAL_PCD_IRQHandler+0x526>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80078d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078d4:	015a      	lsls	r2, r3, #5
 80078d6:	69fb      	ldr	r3, [r7, #28]
 80078d8:	4413      	add	r3, r2
 80078da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80078de:	461a      	mov	r2, r3
 80078e0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80078e4:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80078e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078e8:	015a      	lsls	r2, r3, #5
 80078ea:	69fb      	ldr	r3, [r7, #28]
 80078ec:	4413      	add	r3, r2
 80078ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80078f6:	0151      	lsls	r1, r2, #5
 80078f8:	69fa      	ldr	r2, [r7, #28]
 80078fa:	440a      	add	r2, r1
 80078fc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007900:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007904:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8007906:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007908:	015a      	lsls	r2, r3, #5
 800790a:	69fb      	ldr	r3, [r7, #28]
 800790c:	4413      	add	r3, r2
 800790e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007916:	0151      	lsls	r1, r2, #5
 8007918:	69fa      	ldr	r2, [r7, #28]
 800791a:	440a      	add	r2, r1
 800791c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007920:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007924:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8007926:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007928:	015a      	lsls	r2, r3, #5
 800792a:	69fb      	ldr	r3, [r7, #28]
 800792c:	4413      	add	r3, r2
 800792e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007932:	461a      	mov	r2, r3
 8007934:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007938:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800793a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800793c:	015a      	lsls	r2, r3, #5
 800793e:	69fb      	ldr	r3, [r7, #28]
 8007940:	4413      	add	r3, r2
 8007942:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800794a:	0151      	lsls	r1, r2, #5
 800794c:	69fa      	ldr	r2, [r7, #28]
 800794e:	440a      	add	r2, r1
 8007950:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007954:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007958:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800795a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800795c:	015a      	lsls	r2, r3, #5
 800795e:	69fb      	ldr	r3, [r7, #28]
 8007960:	4413      	add	r3, r2
 8007962:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800796a:	0151      	lsls	r1, r2, #5
 800796c:	69fa      	ldr	r2, [r7, #28]
 800796e:	440a      	add	r2, r1
 8007970:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007974:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007978:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800797a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800797c:	3301      	adds	r3, #1
 800797e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	685b      	ldr	r3, [r3, #4]
 8007984:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007986:	429a      	cmp	r2, r3
 8007988:	d3a3      	bcc.n	80078d2 <HAL_PCD_IRQHandler+0x478>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800798a:	69fb      	ldr	r3, [r7, #28]
 800798c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007990:	69db      	ldr	r3, [r3, #28]
 8007992:	69fa      	ldr	r2, [r7, #28]
 8007994:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007998:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800799c:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d016      	beq.n	80079d4 <HAL_PCD_IRQHandler+0x57a>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80079a6:	69fb      	ldr	r3, [r7, #28]
 80079a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80079ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80079b0:	69fa      	ldr	r2, [r7, #28]
 80079b2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80079b6:	f043 030b 	orr.w	r3, r3, #11
 80079ba:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80079be:	69fb      	ldr	r3, [r7, #28]
 80079c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80079c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80079c6:	69fa      	ldr	r2, [r7, #28]
 80079c8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80079cc:	f043 030b 	orr.w	r3, r3, #11
 80079d0:	6453      	str	r3, [r2, #68]	; 0x44
 80079d2:	e015      	b.n	8007a00 <HAL_PCD_IRQHandler+0x5a6>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80079d4:	69fb      	ldr	r3, [r7, #28]
 80079d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80079da:	695b      	ldr	r3, [r3, #20]
 80079dc:	69fa      	ldr	r2, [r7, #28]
 80079de:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80079e2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80079e6:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80079ea:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80079ec:	69fb      	ldr	r3, [r7, #28]
 80079ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80079f2:	691b      	ldr	r3, [r3, #16]
 80079f4:	69fa      	ldr	r2, [r7, #28]
 80079f6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80079fa:	f043 030b 	orr.w	r3, r3, #11
 80079fe:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8007a00:	69fb      	ldr	r3, [r7, #28]
 8007a02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	69fa      	ldr	r2, [r7, #28]
 8007a0a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007a0e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8007a12:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	6818      	ldr	r0, [r3, #0]
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	691b      	ldr	r3, [r3, #16]
 8007a1c:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8007a24:	461a      	mov	r2, r3
 8007a26:	f003 fb87 	bl	800b138 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	695a      	ldr	r2, [r3, #20]
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8007a38:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	4618      	mov	r0, r3
 8007a40:	f003 fabd 	bl	800afbe <USB_ReadInterrupts>
 8007a44:	4603      	mov	r3, r0
 8007a46:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007a4a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007a4e:	d124      	bne.n	8007a9a <HAL_PCD_IRQHandler+0x640>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	4618      	mov	r0, r3
 8007a56:	f003 fb4d 	bl	800b0f4 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	4618      	mov	r0, r3
 8007a60:	f002 fbc6 	bl	800a1f0 <USB_GetDevSpeed>
 8007a64:	4603      	mov	r3, r0
 8007a66:	461a      	mov	r2, r3
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	681c      	ldr	r4, [r3, #0]
 8007a70:	f001 f932 	bl	8008cd8 <HAL_RCC_GetHCLKFreq>
 8007a74:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8007a7a:	b2db      	uxtb	r3, r3
 8007a7c:	461a      	mov	r2, r3
 8007a7e:	4620      	mov	r0, r4
 8007a80:	f002 f8e8 	bl	8009c54 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8007a84:	6878      	ldr	r0, [r7, #4]
 8007a86:	f005 fa3e 	bl	800cf06 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	695a      	ldr	r2, [r3, #20]
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8007a98:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	4618      	mov	r0, r3
 8007aa0:	f003 fa8d 	bl	800afbe <USB_ReadInterrupts>
 8007aa4:	4603      	mov	r3, r0
 8007aa6:	f003 0308 	and.w	r3, r3, #8
 8007aaa:	2b08      	cmp	r3, #8
 8007aac:	d10a      	bne.n	8007ac4 <HAL_PCD_IRQHandler+0x66a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8007aae:	6878      	ldr	r0, [r7, #4]
 8007ab0:	f005 fa1b 	bl	800ceea <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	695a      	ldr	r2, [r3, #20]
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	f002 0208 	and.w	r2, r2, #8
 8007ac2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	4618      	mov	r0, r3
 8007aca:	f003 fa78 	bl	800afbe <USB_ReadInterrupts>
 8007ace:	4603      	mov	r3, r0
 8007ad0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007ad4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007ad8:	d10f      	bne.n	8007afa <HAL_PCD_IRQHandler+0x6a0>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8007ada:	2300      	movs	r3, #0
 8007adc:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8007ade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ae0:	b2db      	uxtb	r3, r3
 8007ae2:	4619      	mov	r1, r3
 8007ae4:	6878      	ldr	r0, [r7, #4]
 8007ae6:	f005 fa7d 	bl	800cfe4 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	695a      	ldr	r2, [r3, #20]
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8007af8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	4618      	mov	r0, r3
 8007b00:	f003 fa5d 	bl	800afbe <USB_ReadInterrupts>
 8007b04:	4603      	mov	r3, r0
 8007b06:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007b0a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007b0e:	d10f      	bne.n	8007b30 <HAL_PCD_IRQHandler+0x6d6>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8007b10:	2300      	movs	r3, #0
 8007b12:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8007b14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b16:	b2db      	uxtb	r3, r3
 8007b18:	4619      	mov	r1, r3
 8007b1a:	6878      	ldr	r0, [r7, #4]
 8007b1c:	f005 fa50 	bl	800cfc0 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	695a      	ldr	r2, [r3, #20]
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8007b2e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	4618      	mov	r0, r3
 8007b36:	f003 fa42 	bl	800afbe <USB_ReadInterrupts>
 8007b3a:	4603      	mov	r3, r0
 8007b3c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007b40:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007b44:	d10a      	bne.n	8007b5c <HAL_PCD_IRQHandler+0x702>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8007b46:	6878      	ldr	r0, [r7, #4]
 8007b48:	f005 fa5e 	bl	800d008 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	695a      	ldr	r2, [r3, #20]
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8007b5a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	4618      	mov	r0, r3
 8007b62:	f003 fa2c 	bl	800afbe <USB_ReadInterrupts>
 8007b66:	4603      	mov	r3, r0
 8007b68:	f003 0304 	and.w	r3, r3, #4
 8007b6c:	2b04      	cmp	r3, #4
 8007b6e:	d115      	bne.n	8007b9c <HAL_PCD_IRQHandler+0x742>
    {
      temp = hpcd->Instance->GOTGINT;
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	685b      	ldr	r3, [r3, #4]
 8007b76:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8007b78:	69bb      	ldr	r3, [r7, #24]
 8007b7a:	f003 0304 	and.w	r3, r3, #4
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d002      	beq.n	8007b88 <HAL_PCD_IRQHandler+0x72e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8007b82:	6878      	ldr	r0, [r7, #4]
 8007b84:	f005 fa4e 	bl	800d024 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	6859      	ldr	r1, [r3, #4]
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	69ba      	ldr	r2, [r7, #24]
 8007b94:	430a      	orrs	r2, r1
 8007b96:	605a      	str	r2, [r3, #4]
 8007b98:	e000      	b.n	8007b9c <HAL_PCD_IRQHandler+0x742>
      return;
 8007b9a:	bf00      	nop
    }
  }
}
 8007b9c:	3734      	adds	r7, #52	; 0x34
 8007b9e:	46bd      	mov	sp, r7
 8007ba0:	bd90      	pop	{r4, r7, pc}

08007ba2 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8007ba2:	b580      	push	{r7, lr}
 8007ba4:	b082      	sub	sp, #8
 8007ba6:	af00      	add	r7, sp, #0
 8007ba8:	6078      	str	r0, [r7, #4]
 8007baa:	460b      	mov	r3, r1
 8007bac:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8007bb4:	2b01      	cmp	r3, #1
 8007bb6:	d101      	bne.n	8007bbc <HAL_PCD_SetAddress+0x1a>
 8007bb8:	2302      	movs	r3, #2
 8007bba:	e013      	b.n	8007be4 <HAL_PCD_SetAddress+0x42>
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	2201      	movs	r2, #1
 8007bc0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	78fa      	ldrb	r2, [r7, #3]
 8007bc8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	78fa      	ldrb	r2, [r7, #3]
 8007bd2:	4611      	mov	r1, r2
 8007bd4:	4618      	mov	r0, r3
 8007bd6:	f003 f98d 	bl	800aef4 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	2200      	movs	r2, #0
 8007bde:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8007be2:	2300      	movs	r3, #0
}
 8007be4:	4618      	mov	r0, r3
 8007be6:	3708      	adds	r7, #8
 8007be8:	46bd      	mov	sp, r7
 8007bea:	bd80      	pop	{r7, pc}

08007bec <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8007bec:	b580      	push	{r7, lr}
 8007bee:	b084      	sub	sp, #16
 8007bf0:	af00      	add	r7, sp, #0
 8007bf2:	6078      	str	r0, [r7, #4]
 8007bf4:	4608      	mov	r0, r1
 8007bf6:	4611      	mov	r1, r2
 8007bf8:	461a      	mov	r2, r3
 8007bfa:	4603      	mov	r3, r0
 8007bfc:	70fb      	strb	r3, [r7, #3]
 8007bfe:	460b      	mov	r3, r1
 8007c00:	803b      	strh	r3, [r7, #0]
 8007c02:	4613      	mov	r3, r2
 8007c04:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8007c06:	2300      	movs	r3, #0
 8007c08:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8007c0a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	da0f      	bge.n	8007c32 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007c12:	78fb      	ldrb	r3, [r7, #3]
 8007c14:	f003 020f 	and.w	r2, r3, #15
 8007c18:	4613      	mov	r3, r2
 8007c1a:	00db      	lsls	r3, r3, #3
 8007c1c:	1a9b      	subs	r3, r3, r2
 8007c1e:	009b      	lsls	r3, r3, #2
 8007c20:	3338      	adds	r3, #56	; 0x38
 8007c22:	687a      	ldr	r2, [r7, #4]
 8007c24:	4413      	add	r3, r2
 8007c26:	3304      	adds	r3, #4
 8007c28:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	2201      	movs	r2, #1
 8007c2e:	705a      	strb	r2, [r3, #1]
 8007c30:	e00f      	b.n	8007c52 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007c32:	78fb      	ldrb	r3, [r7, #3]
 8007c34:	f003 020f 	and.w	r2, r3, #15
 8007c38:	4613      	mov	r3, r2
 8007c3a:	00db      	lsls	r3, r3, #3
 8007c3c:	1a9b      	subs	r3, r3, r2
 8007c3e:	009b      	lsls	r3, r3, #2
 8007c40:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8007c44:	687a      	ldr	r2, [r7, #4]
 8007c46:	4413      	add	r3, r2
 8007c48:	3304      	adds	r3, #4
 8007c4a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	2200      	movs	r2, #0
 8007c50:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8007c52:	78fb      	ldrb	r3, [r7, #3]
 8007c54:	f003 030f 	and.w	r3, r3, #15
 8007c58:	b2da      	uxtb	r2, r3
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8007c5e:	883a      	ldrh	r2, [r7, #0]
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	78ba      	ldrb	r2, [r7, #2]
 8007c68:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	785b      	ldrb	r3, [r3, #1]
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d004      	beq.n	8007c7c <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	781b      	ldrb	r3, [r3, #0]
 8007c76:	b29a      	uxth	r2, r3
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8007c7c:	78bb      	ldrb	r3, [r7, #2]
 8007c7e:	2b02      	cmp	r3, #2
 8007c80:	d102      	bne.n	8007c88 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	2200      	movs	r2, #0
 8007c86:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8007c8e:	2b01      	cmp	r3, #1
 8007c90:	d101      	bne.n	8007c96 <HAL_PCD_EP_Open+0xaa>
 8007c92:	2302      	movs	r3, #2
 8007c94:	e00e      	b.n	8007cb4 <HAL_PCD_EP_Open+0xc8>
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	2201      	movs	r2, #1
 8007c9a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	68f9      	ldr	r1, [r7, #12]
 8007ca4:	4618      	mov	r0, r3
 8007ca6:	f002 fac7 	bl	800a238 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	2200      	movs	r2, #0
 8007cae:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8007cb2:	7afb      	ldrb	r3, [r7, #11]
}
 8007cb4:	4618      	mov	r0, r3
 8007cb6:	3710      	adds	r7, #16
 8007cb8:	46bd      	mov	sp, r7
 8007cba:	bd80      	pop	{r7, pc}

08007cbc <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007cbc:	b580      	push	{r7, lr}
 8007cbe:	b084      	sub	sp, #16
 8007cc0:	af00      	add	r7, sp, #0
 8007cc2:	6078      	str	r0, [r7, #4]
 8007cc4:	460b      	mov	r3, r1
 8007cc6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8007cc8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	da0f      	bge.n	8007cf0 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007cd0:	78fb      	ldrb	r3, [r7, #3]
 8007cd2:	f003 020f 	and.w	r2, r3, #15
 8007cd6:	4613      	mov	r3, r2
 8007cd8:	00db      	lsls	r3, r3, #3
 8007cda:	1a9b      	subs	r3, r3, r2
 8007cdc:	009b      	lsls	r3, r3, #2
 8007cde:	3338      	adds	r3, #56	; 0x38
 8007ce0:	687a      	ldr	r2, [r7, #4]
 8007ce2:	4413      	add	r3, r2
 8007ce4:	3304      	adds	r3, #4
 8007ce6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	2201      	movs	r2, #1
 8007cec:	705a      	strb	r2, [r3, #1]
 8007cee:	e00f      	b.n	8007d10 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007cf0:	78fb      	ldrb	r3, [r7, #3]
 8007cf2:	f003 020f 	and.w	r2, r3, #15
 8007cf6:	4613      	mov	r3, r2
 8007cf8:	00db      	lsls	r3, r3, #3
 8007cfa:	1a9b      	subs	r3, r3, r2
 8007cfc:	009b      	lsls	r3, r3, #2
 8007cfe:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8007d02:	687a      	ldr	r2, [r7, #4]
 8007d04:	4413      	add	r3, r2
 8007d06:	3304      	adds	r3, #4
 8007d08:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	2200      	movs	r2, #0
 8007d0e:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8007d10:	78fb      	ldrb	r3, [r7, #3]
 8007d12:	f003 030f 	and.w	r3, r3, #15
 8007d16:	b2da      	uxtb	r2, r3
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8007d22:	2b01      	cmp	r3, #1
 8007d24:	d101      	bne.n	8007d2a <HAL_PCD_EP_Close+0x6e>
 8007d26:	2302      	movs	r3, #2
 8007d28:	e00e      	b.n	8007d48 <HAL_PCD_EP_Close+0x8c>
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	2201      	movs	r2, #1
 8007d2e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	68f9      	ldr	r1, [r7, #12]
 8007d38:	4618      	mov	r0, r3
 8007d3a:	f002 fb03 	bl	800a344 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	2200      	movs	r2, #0
 8007d42:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8007d46:	2300      	movs	r3, #0
}
 8007d48:	4618      	mov	r0, r3
 8007d4a:	3710      	adds	r7, #16
 8007d4c:	46bd      	mov	sp, r7
 8007d4e:	bd80      	pop	{r7, pc}

08007d50 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8007d50:	b580      	push	{r7, lr}
 8007d52:	b086      	sub	sp, #24
 8007d54:	af00      	add	r7, sp, #0
 8007d56:	60f8      	str	r0, [r7, #12]
 8007d58:	607a      	str	r2, [r7, #4]
 8007d5a:	603b      	str	r3, [r7, #0]
 8007d5c:	460b      	mov	r3, r1
 8007d5e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007d60:	7afb      	ldrb	r3, [r7, #11]
 8007d62:	f003 020f 	and.w	r2, r3, #15
 8007d66:	4613      	mov	r3, r2
 8007d68:	00db      	lsls	r3, r3, #3
 8007d6a:	1a9b      	subs	r3, r3, r2
 8007d6c:	009b      	lsls	r3, r3, #2
 8007d6e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8007d72:	68fa      	ldr	r2, [r7, #12]
 8007d74:	4413      	add	r3, r2
 8007d76:	3304      	adds	r3, #4
 8007d78:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8007d7a:	697b      	ldr	r3, [r7, #20]
 8007d7c:	687a      	ldr	r2, [r7, #4]
 8007d7e:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8007d80:	697b      	ldr	r3, [r7, #20]
 8007d82:	683a      	ldr	r2, [r7, #0]
 8007d84:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8007d86:	697b      	ldr	r3, [r7, #20]
 8007d88:	2200      	movs	r2, #0
 8007d8a:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8007d8c:	697b      	ldr	r3, [r7, #20]
 8007d8e:	2200      	movs	r2, #0
 8007d90:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007d92:	7afb      	ldrb	r3, [r7, #11]
 8007d94:	f003 030f 	and.w	r3, r3, #15
 8007d98:	b2da      	uxtb	r2, r3
 8007d9a:	697b      	ldr	r3, [r7, #20]
 8007d9c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	691b      	ldr	r3, [r3, #16]
 8007da2:	2b01      	cmp	r3, #1
 8007da4:	d102      	bne.n	8007dac <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8007da6:	687a      	ldr	r2, [r7, #4]
 8007da8:	697b      	ldr	r3, [r7, #20]
 8007daa:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8007dac:	7afb      	ldrb	r3, [r7, #11]
 8007dae:	f003 030f 	and.w	r3, r3, #15
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d109      	bne.n	8007dca <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	6818      	ldr	r0, [r3, #0]
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	691b      	ldr	r3, [r3, #16]
 8007dbe:	b2db      	uxtb	r3, r3
 8007dc0:	461a      	mov	r2, r3
 8007dc2:	6979      	ldr	r1, [r7, #20]
 8007dc4:	f002 fdde 	bl	800a984 <USB_EP0StartXfer>
 8007dc8:	e008      	b.n	8007ddc <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	6818      	ldr	r0, [r3, #0]
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	691b      	ldr	r3, [r3, #16]
 8007dd2:	b2db      	uxtb	r3, r3
 8007dd4:	461a      	mov	r2, r3
 8007dd6:	6979      	ldr	r1, [r7, #20]
 8007dd8:	f002 fb90 	bl	800a4fc <USB_EPStartXfer>
  }

  return HAL_OK;
 8007ddc:	2300      	movs	r3, #0
}
 8007dde:	4618      	mov	r0, r3
 8007de0:	3718      	adds	r7, #24
 8007de2:	46bd      	mov	sp, r7
 8007de4:	bd80      	pop	{r7, pc}

08007de6 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007de6:	b480      	push	{r7}
 8007de8:	b083      	sub	sp, #12
 8007dea:	af00      	add	r7, sp, #0
 8007dec:	6078      	str	r0, [r7, #4]
 8007dee:	460b      	mov	r3, r1
 8007df0:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8007df2:	78fb      	ldrb	r3, [r7, #3]
 8007df4:	f003 020f 	and.w	r2, r3, #15
 8007df8:	6879      	ldr	r1, [r7, #4]
 8007dfa:	4613      	mov	r3, r2
 8007dfc:	00db      	lsls	r3, r3, #3
 8007dfe:	1a9b      	subs	r3, r3, r2
 8007e00:	009b      	lsls	r3, r3, #2
 8007e02:	440b      	add	r3, r1
 8007e04:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8007e08:	681b      	ldr	r3, [r3, #0]
}
 8007e0a:	4618      	mov	r0, r3
 8007e0c:	370c      	adds	r7, #12
 8007e0e:	46bd      	mov	sp, r7
 8007e10:	bc80      	pop	{r7}
 8007e12:	4770      	bx	lr

08007e14 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8007e14:	b580      	push	{r7, lr}
 8007e16:	b086      	sub	sp, #24
 8007e18:	af00      	add	r7, sp, #0
 8007e1a:	60f8      	str	r0, [r7, #12]
 8007e1c:	607a      	str	r2, [r7, #4]
 8007e1e:	603b      	str	r3, [r7, #0]
 8007e20:	460b      	mov	r3, r1
 8007e22:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007e24:	7afb      	ldrb	r3, [r7, #11]
 8007e26:	f003 020f 	and.w	r2, r3, #15
 8007e2a:	4613      	mov	r3, r2
 8007e2c:	00db      	lsls	r3, r3, #3
 8007e2e:	1a9b      	subs	r3, r3, r2
 8007e30:	009b      	lsls	r3, r3, #2
 8007e32:	3338      	adds	r3, #56	; 0x38
 8007e34:	68fa      	ldr	r2, [r7, #12]
 8007e36:	4413      	add	r3, r2
 8007e38:	3304      	adds	r3, #4
 8007e3a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8007e3c:	697b      	ldr	r3, [r7, #20]
 8007e3e:	687a      	ldr	r2, [r7, #4]
 8007e40:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8007e42:	697b      	ldr	r3, [r7, #20]
 8007e44:	683a      	ldr	r2, [r7, #0]
 8007e46:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8007e48:	697b      	ldr	r3, [r7, #20]
 8007e4a:	2200      	movs	r2, #0
 8007e4c:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8007e4e:	697b      	ldr	r3, [r7, #20]
 8007e50:	2201      	movs	r2, #1
 8007e52:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007e54:	7afb      	ldrb	r3, [r7, #11]
 8007e56:	f003 030f 	and.w	r3, r3, #15
 8007e5a:	b2da      	uxtb	r2, r3
 8007e5c:	697b      	ldr	r3, [r7, #20]
 8007e5e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	691b      	ldr	r3, [r3, #16]
 8007e64:	2b01      	cmp	r3, #1
 8007e66:	d102      	bne.n	8007e6e <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8007e68:	687a      	ldr	r2, [r7, #4]
 8007e6a:	697b      	ldr	r3, [r7, #20]
 8007e6c:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8007e6e:	7afb      	ldrb	r3, [r7, #11]
 8007e70:	f003 030f 	and.w	r3, r3, #15
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d109      	bne.n	8007e8c <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	6818      	ldr	r0, [r3, #0]
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	691b      	ldr	r3, [r3, #16]
 8007e80:	b2db      	uxtb	r3, r3
 8007e82:	461a      	mov	r2, r3
 8007e84:	6979      	ldr	r1, [r7, #20]
 8007e86:	f002 fd7d 	bl	800a984 <USB_EP0StartXfer>
 8007e8a:	e008      	b.n	8007e9e <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	6818      	ldr	r0, [r3, #0]
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	691b      	ldr	r3, [r3, #16]
 8007e94:	b2db      	uxtb	r3, r3
 8007e96:	461a      	mov	r2, r3
 8007e98:	6979      	ldr	r1, [r7, #20]
 8007e9a:	f002 fb2f 	bl	800a4fc <USB_EPStartXfer>
  }

  return HAL_OK;
 8007e9e:	2300      	movs	r3, #0
}
 8007ea0:	4618      	mov	r0, r3
 8007ea2:	3718      	adds	r7, #24
 8007ea4:	46bd      	mov	sp, r7
 8007ea6:	bd80      	pop	{r7, pc}

08007ea8 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007ea8:	b580      	push	{r7, lr}
 8007eaa:	b084      	sub	sp, #16
 8007eac:	af00      	add	r7, sp, #0
 8007eae:	6078      	str	r0, [r7, #4]
 8007eb0:	460b      	mov	r3, r1
 8007eb2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8007eb4:	78fb      	ldrb	r3, [r7, #3]
 8007eb6:	f003 020f 	and.w	r2, r3, #15
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	685b      	ldr	r3, [r3, #4]
 8007ebe:	429a      	cmp	r2, r3
 8007ec0:	d901      	bls.n	8007ec6 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8007ec2:	2301      	movs	r3, #1
 8007ec4:	e050      	b.n	8007f68 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8007ec6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	da0f      	bge.n	8007eee <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007ece:	78fb      	ldrb	r3, [r7, #3]
 8007ed0:	f003 020f 	and.w	r2, r3, #15
 8007ed4:	4613      	mov	r3, r2
 8007ed6:	00db      	lsls	r3, r3, #3
 8007ed8:	1a9b      	subs	r3, r3, r2
 8007eda:	009b      	lsls	r3, r3, #2
 8007edc:	3338      	adds	r3, #56	; 0x38
 8007ede:	687a      	ldr	r2, [r7, #4]
 8007ee0:	4413      	add	r3, r2
 8007ee2:	3304      	adds	r3, #4
 8007ee4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	2201      	movs	r2, #1
 8007eea:	705a      	strb	r2, [r3, #1]
 8007eec:	e00d      	b.n	8007f0a <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8007eee:	78fa      	ldrb	r2, [r7, #3]
 8007ef0:	4613      	mov	r3, r2
 8007ef2:	00db      	lsls	r3, r3, #3
 8007ef4:	1a9b      	subs	r3, r3, r2
 8007ef6:	009b      	lsls	r3, r3, #2
 8007ef8:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8007efc:	687a      	ldr	r2, [r7, #4]
 8007efe:	4413      	add	r3, r2
 8007f00:	3304      	adds	r3, #4
 8007f02:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	2200      	movs	r2, #0
 8007f08:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	2201      	movs	r2, #1
 8007f0e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007f10:	78fb      	ldrb	r3, [r7, #3]
 8007f12:	f003 030f 	and.w	r3, r3, #15
 8007f16:	b2da      	uxtb	r2, r3
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8007f22:	2b01      	cmp	r3, #1
 8007f24:	d101      	bne.n	8007f2a <HAL_PCD_EP_SetStall+0x82>
 8007f26:	2302      	movs	r3, #2
 8007f28:	e01e      	b.n	8007f68 <HAL_PCD_EP_SetStall+0xc0>
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	2201      	movs	r2, #1
 8007f2e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	68f9      	ldr	r1, [r7, #12]
 8007f38:	4618      	mov	r0, r3
 8007f3a:	f002 ff09 	bl	800ad50 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8007f3e:	78fb      	ldrb	r3, [r7, #3]
 8007f40:	f003 030f 	and.w	r3, r3, #15
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d10a      	bne.n	8007f5e <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	6818      	ldr	r0, [r3, #0]
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	691b      	ldr	r3, [r3, #16]
 8007f50:	b2d9      	uxtb	r1, r3
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8007f58:	461a      	mov	r2, r3
 8007f5a:	f003 f8ed 	bl	800b138 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	2200      	movs	r2, #0
 8007f62:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8007f66:	2300      	movs	r3, #0
}
 8007f68:	4618      	mov	r0, r3
 8007f6a:	3710      	adds	r7, #16
 8007f6c:	46bd      	mov	sp, r7
 8007f6e:	bd80      	pop	{r7, pc}

08007f70 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007f70:	b580      	push	{r7, lr}
 8007f72:	b084      	sub	sp, #16
 8007f74:	af00      	add	r7, sp, #0
 8007f76:	6078      	str	r0, [r7, #4]
 8007f78:	460b      	mov	r3, r1
 8007f7a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8007f7c:	78fb      	ldrb	r3, [r7, #3]
 8007f7e:	f003 020f 	and.w	r2, r3, #15
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	685b      	ldr	r3, [r3, #4]
 8007f86:	429a      	cmp	r2, r3
 8007f88:	d901      	bls.n	8007f8e <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8007f8a:	2301      	movs	r3, #1
 8007f8c:	e042      	b.n	8008014 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8007f8e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	da0f      	bge.n	8007fb6 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007f96:	78fb      	ldrb	r3, [r7, #3]
 8007f98:	f003 020f 	and.w	r2, r3, #15
 8007f9c:	4613      	mov	r3, r2
 8007f9e:	00db      	lsls	r3, r3, #3
 8007fa0:	1a9b      	subs	r3, r3, r2
 8007fa2:	009b      	lsls	r3, r3, #2
 8007fa4:	3338      	adds	r3, #56	; 0x38
 8007fa6:	687a      	ldr	r2, [r7, #4]
 8007fa8:	4413      	add	r3, r2
 8007faa:	3304      	adds	r3, #4
 8007fac:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	2201      	movs	r2, #1
 8007fb2:	705a      	strb	r2, [r3, #1]
 8007fb4:	e00f      	b.n	8007fd6 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007fb6:	78fb      	ldrb	r3, [r7, #3]
 8007fb8:	f003 020f 	and.w	r2, r3, #15
 8007fbc:	4613      	mov	r3, r2
 8007fbe:	00db      	lsls	r3, r3, #3
 8007fc0:	1a9b      	subs	r3, r3, r2
 8007fc2:	009b      	lsls	r3, r3, #2
 8007fc4:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8007fc8:	687a      	ldr	r2, [r7, #4]
 8007fca:	4413      	add	r3, r2
 8007fcc:	3304      	adds	r3, #4
 8007fce:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	2200      	movs	r2, #0
 8007fd4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	2200      	movs	r2, #0
 8007fda:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007fdc:	78fb      	ldrb	r3, [r7, #3]
 8007fde:	f003 030f 	and.w	r3, r3, #15
 8007fe2:	b2da      	uxtb	r2, r3
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8007fee:	2b01      	cmp	r3, #1
 8007ff0:	d101      	bne.n	8007ff6 <HAL_PCD_EP_ClrStall+0x86>
 8007ff2:	2302      	movs	r3, #2
 8007ff4:	e00e      	b.n	8008014 <HAL_PCD_EP_ClrStall+0xa4>
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	2201      	movs	r2, #1
 8007ffa:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	68f9      	ldr	r1, [r7, #12]
 8008004:	4618      	mov	r0, r3
 8008006:	f002 ff10 	bl	800ae2a <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	2200      	movs	r2, #0
 800800e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8008012:	2300      	movs	r3, #0
}
 8008014:	4618      	mov	r0, r3
 8008016:	3710      	adds	r7, #16
 8008018:	46bd      	mov	sp, r7
 800801a:	bd80      	pop	{r7, pc}

0800801c <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800801c:	b580      	push	{r7, lr}
 800801e:	b08a      	sub	sp, #40	; 0x28
 8008020:	af02      	add	r7, sp, #8
 8008022:	6078      	str	r0, [r7, #4]
 8008024:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800802c:	697b      	ldr	r3, [r7, #20]
 800802e:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8008030:	683a      	ldr	r2, [r7, #0]
 8008032:	4613      	mov	r3, r2
 8008034:	00db      	lsls	r3, r3, #3
 8008036:	1a9b      	subs	r3, r3, r2
 8008038:	009b      	lsls	r3, r3, #2
 800803a:	3338      	adds	r3, #56	; 0x38
 800803c:	687a      	ldr	r2, [r7, #4]
 800803e:	4413      	add	r3, r2
 8008040:	3304      	adds	r3, #4
 8008042:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	699a      	ldr	r2, [r3, #24]
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	695b      	ldr	r3, [r3, #20]
 800804c:	429a      	cmp	r2, r3
 800804e:	d901      	bls.n	8008054 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8008050:	2301      	movs	r3, #1
 8008052:	e06c      	b.n	800812e <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	695a      	ldr	r2, [r3, #20]
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	699b      	ldr	r3, [r3, #24]
 800805c:	1ad3      	subs	r3, r2, r3
 800805e:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	689b      	ldr	r3, [r3, #8]
 8008064:	69fa      	ldr	r2, [r7, #28]
 8008066:	429a      	cmp	r2, r3
 8008068:	d902      	bls.n	8008070 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	689b      	ldr	r3, [r3, #8]
 800806e:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8008070:	69fb      	ldr	r3, [r7, #28]
 8008072:	3303      	adds	r3, #3
 8008074:	089b      	lsrs	r3, r3, #2
 8008076:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8008078:	e02b      	b.n	80080d2 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	695a      	ldr	r2, [r3, #20]
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	699b      	ldr	r3, [r3, #24]
 8008082:	1ad3      	subs	r3, r2, r3
 8008084:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	689b      	ldr	r3, [r3, #8]
 800808a:	69fa      	ldr	r2, [r7, #28]
 800808c:	429a      	cmp	r2, r3
 800808e:	d902      	bls.n	8008096 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	689b      	ldr	r3, [r3, #8]
 8008094:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8008096:	69fb      	ldr	r3, [r7, #28]
 8008098:	3303      	adds	r3, #3
 800809a:	089b      	lsrs	r3, r3, #2
 800809c:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	68d9      	ldr	r1, [r3, #12]
 80080a2:	683b      	ldr	r3, [r7, #0]
 80080a4:	b2da      	uxtb	r2, r3
 80080a6:	69fb      	ldr	r3, [r7, #28]
 80080a8:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80080ae:	b2db      	uxtb	r3, r3
 80080b0:	9300      	str	r3, [sp, #0]
 80080b2:	4603      	mov	r3, r0
 80080b4:	6978      	ldr	r0, [r7, #20]
 80080b6:	f002 fdb7 	bl	800ac28 <USB_WritePacket>

    ep->xfer_buff  += len;
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	68da      	ldr	r2, [r3, #12]
 80080be:	69fb      	ldr	r3, [r7, #28]
 80080c0:	441a      	add	r2, r3
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	699a      	ldr	r2, [r3, #24]
 80080ca:	69fb      	ldr	r3, [r7, #28]
 80080cc:	441a      	add	r2, r3
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80080d2:	683b      	ldr	r3, [r7, #0]
 80080d4:	015a      	lsls	r2, r3, #5
 80080d6:	693b      	ldr	r3, [r7, #16]
 80080d8:	4413      	add	r3, r2
 80080da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80080de:	699b      	ldr	r3, [r3, #24]
 80080e0:	b29b      	uxth	r3, r3
 80080e2:	69ba      	ldr	r2, [r7, #24]
 80080e4:	429a      	cmp	r2, r3
 80080e6:	d809      	bhi.n	80080fc <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	699a      	ldr	r2, [r3, #24]
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80080f0:	429a      	cmp	r2, r3
 80080f2:	d203      	bcs.n	80080fc <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	695b      	ldr	r3, [r3, #20]
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d1be      	bne.n	800807a <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	695a      	ldr	r2, [r3, #20]
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	699b      	ldr	r3, [r3, #24]
 8008104:	429a      	cmp	r2, r3
 8008106:	d811      	bhi.n	800812c <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8008108:	683b      	ldr	r3, [r7, #0]
 800810a:	f003 030f 	and.w	r3, r3, #15
 800810e:	2201      	movs	r2, #1
 8008110:	fa02 f303 	lsl.w	r3, r2, r3
 8008114:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8008116:	693b      	ldr	r3, [r7, #16]
 8008118:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800811c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800811e:	68bb      	ldr	r3, [r7, #8]
 8008120:	43db      	mvns	r3, r3
 8008122:	6939      	ldr	r1, [r7, #16]
 8008124:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008128:	4013      	ands	r3, r2
 800812a:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800812c:	2300      	movs	r3, #0
}
 800812e:	4618      	mov	r0, r3
 8008130:	3720      	adds	r7, #32
 8008132:	46bd      	mov	sp, r7
 8008134:	bd80      	pop	{r7, pc}
	...

08008138 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8008138:	b580      	push	{r7, lr}
 800813a:	b086      	sub	sp, #24
 800813c:	af00      	add	r7, sp, #0
 800813e:	6078      	str	r0, [r7, #4]
 8008140:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008148:	697b      	ldr	r3, [r7, #20]
 800814a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800814c:	697b      	ldr	r3, [r7, #20]
 800814e:	333c      	adds	r3, #60	; 0x3c
 8008150:	3304      	adds	r3, #4
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8008156:	683b      	ldr	r3, [r7, #0]
 8008158:	015a      	lsls	r2, r3, #5
 800815a:	693b      	ldr	r3, [r7, #16]
 800815c:	4413      	add	r3, r2
 800815e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008162:	689b      	ldr	r3, [r3, #8]
 8008164:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	691b      	ldr	r3, [r3, #16]
 800816a:	2b01      	cmp	r3, #1
 800816c:	f040 80a0 	bne.w	80082b0 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8008170:	68bb      	ldr	r3, [r7, #8]
 8008172:	f003 0308 	and.w	r3, r3, #8
 8008176:	2b00      	cmp	r3, #0
 8008178:	d015      	beq.n	80081a6 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	4a72      	ldr	r2, [pc, #456]	; (8008348 <PCD_EP_OutXfrComplete_int+0x210>)
 800817e:	4293      	cmp	r3, r2
 8008180:	f240 80dd 	bls.w	800833e <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8008184:	68bb      	ldr	r3, [r7, #8]
 8008186:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800818a:	2b00      	cmp	r3, #0
 800818c:	f000 80d7 	beq.w	800833e <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8008190:	683b      	ldr	r3, [r7, #0]
 8008192:	015a      	lsls	r2, r3, #5
 8008194:	693b      	ldr	r3, [r7, #16]
 8008196:	4413      	add	r3, r2
 8008198:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800819c:	461a      	mov	r2, r3
 800819e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80081a2:	6093      	str	r3, [r2, #8]
 80081a4:	e0cb      	b.n	800833e <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80081a6:	68bb      	ldr	r3, [r7, #8]
 80081a8:	f003 0320 	and.w	r3, r3, #32
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d009      	beq.n	80081c4 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80081b0:	683b      	ldr	r3, [r7, #0]
 80081b2:	015a      	lsls	r2, r3, #5
 80081b4:	693b      	ldr	r3, [r7, #16]
 80081b6:	4413      	add	r3, r2
 80081b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80081bc:	461a      	mov	r2, r3
 80081be:	2320      	movs	r3, #32
 80081c0:	6093      	str	r3, [r2, #8]
 80081c2:	e0bc      	b.n	800833e <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80081c4:	68bb      	ldr	r3, [r7, #8]
 80081c6:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	f040 80b7 	bne.w	800833e <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	4a5d      	ldr	r2, [pc, #372]	; (8008348 <PCD_EP_OutXfrComplete_int+0x210>)
 80081d4:	4293      	cmp	r3, r2
 80081d6:	d90f      	bls.n	80081f8 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80081d8:	68bb      	ldr	r3, [r7, #8]
 80081da:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80081de:	2b00      	cmp	r3, #0
 80081e0:	d00a      	beq.n	80081f8 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80081e2:	683b      	ldr	r3, [r7, #0]
 80081e4:	015a      	lsls	r2, r3, #5
 80081e6:	693b      	ldr	r3, [r7, #16]
 80081e8:	4413      	add	r3, r2
 80081ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80081ee:	461a      	mov	r2, r3
 80081f0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80081f4:	6093      	str	r3, [r2, #8]
 80081f6:	e0a2      	b.n	800833e <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 80081f8:	6879      	ldr	r1, [r7, #4]
 80081fa:	683a      	ldr	r2, [r7, #0]
 80081fc:	4613      	mov	r3, r2
 80081fe:	00db      	lsls	r3, r3, #3
 8008200:	1a9b      	subs	r3, r3, r2
 8008202:	009b      	lsls	r3, r3, #2
 8008204:	440b      	add	r3, r1
 8008206:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800820a:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800820c:	683b      	ldr	r3, [r7, #0]
 800820e:	0159      	lsls	r1, r3, #5
 8008210:	693b      	ldr	r3, [r7, #16]
 8008212:	440b      	add	r3, r1
 8008214:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008218:	691b      	ldr	r3, [r3, #16]
 800821a:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 800821e:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8008220:	6878      	ldr	r0, [r7, #4]
 8008222:	683a      	ldr	r2, [r7, #0]
 8008224:	4613      	mov	r3, r2
 8008226:	00db      	lsls	r3, r3, #3
 8008228:	1a9b      	subs	r3, r3, r2
 800822a:	009b      	lsls	r3, r3, #2
 800822c:	4403      	add	r3, r0
 800822e:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8008232:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8008234:	6879      	ldr	r1, [r7, #4]
 8008236:	683a      	ldr	r2, [r7, #0]
 8008238:	4613      	mov	r3, r2
 800823a:	00db      	lsls	r3, r3, #3
 800823c:	1a9b      	subs	r3, r3, r2
 800823e:	009b      	lsls	r3, r3, #2
 8008240:	440b      	add	r3, r1
 8008242:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8008246:	6819      	ldr	r1, [r3, #0]
 8008248:	6878      	ldr	r0, [r7, #4]
 800824a:	683a      	ldr	r2, [r7, #0]
 800824c:	4613      	mov	r3, r2
 800824e:	00db      	lsls	r3, r3, #3
 8008250:	1a9b      	subs	r3, r3, r2
 8008252:	009b      	lsls	r3, r3, #2
 8008254:	4403      	add	r3, r0
 8008256:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	4419      	add	r1, r3
 800825e:	6878      	ldr	r0, [r7, #4]
 8008260:	683a      	ldr	r2, [r7, #0]
 8008262:	4613      	mov	r3, r2
 8008264:	00db      	lsls	r3, r3, #3
 8008266:	1a9b      	subs	r3, r3, r2
 8008268:	009b      	lsls	r3, r3, #2
 800826a:	4403      	add	r3, r0
 800826c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8008270:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8008272:	683b      	ldr	r3, [r7, #0]
 8008274:	2b00      	cmp	r3, #0
 8008276:	d114      	bne.n	80082a2 <PCD_EP_OutXfrComplete_int+0x16a>
 8008278:	6879      	ldr	r1, [r7, #4]
 800827a:	683a      	ldr	r2, [r7, #0]
 800827c:	4613      	mov	r3, r2
 800827e:	00db      	lsls	r3, r3, #3
 8008280:	1a9b      	subs	r3, r3, r2
 8008282:	009b      	lsls	r3, r3, #2
 8008284:	440b      	add	r3, r1
 8008286:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	2b00      	cmp	r3, #0
 800828e:	d108      	bne.n	80082a2 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	6818      	ldr	r0, [r3, #0]
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800829a:	461a      	mov	r2, r3
 800829c:	2101      	movs	r1, #1
 800829e:	f002 ff4b 	bl	800b138 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80082a2:	683b      	ldr	r3, [r7, #0]
 80082a4:	b2db      	uxtb	r3, r3
 80082a6:	4619      	mov	r1, r3
 80082a8:	6878      	ldr	r0, [r7, #4]
 80082aa:	f004 fde9 	bl	800ce80 <HAL_PCD_DataOutStageCallback>
 80082ae:	e046      	b.n	800833e <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	4a26      	ldr	r2, [pc, #152]	; (800834c <PCD_EP_OutXfrComplete_int+0x214>)
 80082b4:	4293      	cmp	r3, r2
 80082b6:	d124      	bne.n	8008302 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80082b8:	68bb      	ldr	r3, [r7, #8]
 80082ba:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80082be:	2b00      	cmp	r3, #0
 80082c0:	d00a      	beq.n	80082d8 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80082c2:	683b      	ldr	r3, [r7, #0]
 80082c4:	015a      	lsls	r2, r3, #5
 80082c6:	693b      	ldr	r3, [r7, #16]
 80082c8:	4413      	add	r3, r2
 80082ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80082ce:	461a      	mov	r2, r3
 80082d0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80082d4:	6093      	str	r3, [r2, #8]
 80082d6:	e032      	b.n	800833e <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80082d8:	68bb      	ldr	r3, [r7, #8]
 80082da:	f003 0320 	and.w	r3, r3, #32
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d008      	beq.n	80082f4 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80082e2:	683b      	ldr	r3, [r7, #0]
 80082e4:	015a      	lsls	r2, r3, #5
 80082e6:	693b      	ldr	r3, [r7, #16]
 80082e8:	4413      	add	r3, r2
 80082ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80082ee:	461a      	mov	r2, r3
 80082f0:	2320      	movs	r3, #32
 80082f2:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80082f4:	683b      	ldr	r3, [r7, #0]
 80082f6:	b2db      	uxtb	r3, r3
 80082f8:	4619      	mov	r1, r3
 80082fa:	6878      	ldr	r0, [r7, #4]
 80082fc:	f004 fdc0 	bl	800ce80 <HAL_PCD_DataOutStageCallback>
 8008300:	e01d      	b.n	800833e <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8008302:	683b      	ldr	r3, [r7, #0]
 8008304:	2b00      	cmp	r3, #0
 8008306:	d114      	bne.n	8008332 <PCD_EP_OutXfrComplete_int+0x1fa>
 8008308:	6879      	ldr	r1, [r7, #4]
 800830a:	683a      	ldr	r2, [r7, #0]
 800830c:	4613      	mov	r3, r2
 800830e:	00db      	lsls	r3, r3, #3
 8008310:	1a9b      	subs	r3, r3, r2
 8008312:	009b      	lsls	r3, r3, #2
 8008314:	440b      	add	r3, r1
 8008316:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	2b00      	cmp	r3, #0
 800831e:	d108      	bne.n	8008332 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	6818      	ldr	r0, [r3, #0]
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800832a:	461a      	mov	r2, r3
 800832c:	2100      	movs	r1, #0
 800832e:	f002 ff03 	bl	800b138 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8008332:	683b      	ldr	r3, [r7, #0]
 8008334:	b2db      	uxtb	r3, r3
 8008336:	4619      	mov	r1, r3
 8008338:	6878      	ldr	r0, [r7, #4]
 800833a:	f004 fda1 	bl	800ce80 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800833e:	2300      	movs	r3, #0
}
 8008340:	4618      	mov	r0, r3
 8008342:	3718      	adds	r7, #24
 8008344:	46bd      	mov	sp, r7
 8008346:	bd80      	pop	{r7, pc}
 8008348:	4f54300a 	.word	0x4f54300a
 800834c:	4f54310a 	.word	0x4f54310a

08008350 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8008350:	b580      	push	{r7, lr}
 8008352:	b086      	sub	sp, #24
 8008354:	af00      	add	r7, sp, #0
 8008356:	6078      	str	r0, [r7, #4]
 8008358:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008360:	697b      	ldr	r3, [r7, #20]
 8008362:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8008364:	697b      	ldr	r3, [r7, #20]
 8008366:	333c      	adds	r3, #60	; 0x3c
 8008368:	3304      	adds	r3, #4
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800836e:	683b      	ldr	r3, [r7, #0]
 8008370:	015a      	lsls	r2, r3, #5
 8008372:	693b      	ldr	r3, [r7, #16]
 8008374:	4413      	add	r3, r2
 8008376:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800837a:	689b      	ldr	r3, [r3, #8]
 800837c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	4a15      	ldr	r2, [pc, #84]	; (80083d8 <PCD_EP_OutSetupPacket_int+0x88>)
 8008382:	4293      	cmp	r3, r2
 8008384:	d90e      	bls.n	80083a4 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8008386:	68bb      	ldr	r3, [r7, #8]
 8008388:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800838c:	2b00      	cmp	r3, #0
 800838e:	d009      	beq.n	80083a4 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8008390:	683b      	ldr	r3, [r7, #0]
 8008392:	015a      	lsls	r2, r3, #5
 8008394:	693b      	ldr	r3, [r7, #16]
 8008396:	4413      	add	r3, r2
 8008398:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800839c:	461a      	mov	r2, r3
 800839e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80083a2:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80083a4:	6878      	ldr	r0, [r7, #4]
 80083a6:	f004 fd59 	bl	800ce5c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	4a0a      	ldr	r2, [pc, #40]	; (80083d8 <PCD_EP_OutSetupPacket_int+0x88>)
 80083ae:	4293      	cmp	r3, r2
 80083b0:	d90c      	bls.n	80083cc <PCD_EP_OutSetupPacket_int+0x7c>
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	691b      	ldr	r3, [r3, #16]
 80083b6:	2b01      	cmp	r3, #1
 80083b8:	d108      	bne.n	80083cc <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	6818      	ldr	r0, [r3, #0]
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80083c4:	461a      	mov	r2, r3
 80083c6:	2101      	movs	r1, #1
 80083c8:	f002 feb6 	bl	800b138 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80083cc:	2300      	movs	r3, #0
}
 80083ce:	4618      	mov	r0, r3
 80083d0:	3718      	adds	r7, #24
 80083d2:	46bd      	mov	sp, r7
 80083d4:	bd80      	pop	{r7, pc}
 80083d6:	bf00      	nop
 80083d8:	4f54300a 	.word	0x4f54300a

080083dc <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80083dc:	b480      	push	{r7}
 80083de:	b085      	sub	sp, #20
 80083e0:	af00      	add	r7, sp, #0
 80083e2:	6078      	str	r0, [r7, #4]
 80083e4:	460b      	mov	r3, r1
 80083e6:	70fb      	strb	r3, [r7, #3]
 80083e8:	4613      	mov	r3, r2
 80083ea:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083f2:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80083f4:	78fb      	ldrb	r3, [r7, #3]
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d107      	bne.n	800840a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80083fa:	883b      	ldrh	r3, [r7, #0]
 80083fc:	0419      	lsls	r1, r3, #16
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	68ba      	ldr	r2, [r7, #8]
 8008404:	430a      	orrs	r2, r1
 8008406:	629a      	str	r2, [r3, #40]	; 0x28
 8008408:	e028      	b.n	800845c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008410:	0c1b      	lsrs	r3, r3, #16
 8008412:	68ba      	ldr	r2, [r7, #8]
 8008414:	4413      	add	r3, r2
 8008416:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8008418:	2300      	movs	r3, #0
 800841a:	73fb      	strb	r3, [r7, #15]
 800841c:	e00d      	b.n	800843a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	681a      	ldr	r2, [r3, #0]
 8008422:	7bfb      	ldrb	r3, [r7, #15]
 8008424:	3340      	adds	r3, #64	; 0x40
 8008426:	009b      	lsls	r3, r3, #2
 8008428:	4413      	add	r3, r2
 800842a:	685b      	ldr	r3, [r3, #4]
 800842c:	0c1b      	lsrs	r3, r3, #16
 800842e:	68ba      	ldr	r2, [r7, #8]
 8008430:	4413      	add	r3, r2
 8008432:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8008434:	7bfb      	ldrb	r3, [r7, #15]
 8008436:	3301      	adds	r3, #1
 8008438:	73fb      	strb	r3, [r7, #15]
 800843a:	7bfa      	ldrb	r2, [r7, #15]
 800843c:	78fb      	ldrb	r3, [r7, #3]
 800843e:	3b01      	subs	r3, #1
 8008440:	429a      	cmp	r2, r3
 8008442:	d3ec      	bcc.n	800841e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8008444:	883b      	ldrh	r3, [r7, #0]
 8008446:	0418      	lsls	r0, r3, #16
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	6819      	ldr	r1, [r3, #0]
 800844c:	78fb      	ldrb	r3, [r7, #3]
 800844e:	3b01      	subs	r3, #1
 8008450:	68ba      	ldr	r2, [r7, #8]
 8008452:	4302      	orrs	r2, r0
 8008454:	3340      	adds	r3, #64	; 0x40
 8008456:	009b      	lsls	r3, r3, #2
 8008458:	440b      	add	r3, r1
 800845a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800845c:	2300      	movs	r3, #0
}
 800845e:	4618      	mov	r0, r3
 8008460:	3714      	adds	r7, #20
 8008462:	46bd      	mov	sp, r7
 8008464:	bc80      	pop	{r7}
 8008466:	4770      	bx	lr

08008468 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8008468:	b480      	push	{r7}
 800846a:	b083      	sub	sp, #12
 800846c:	af00      	add	r7, sp, #0
 800846e:	6078      	str	r0, [r7, #4]
 8008470:	460b      	mov	r3, r1
 8008472:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	887a      	ldrh	r2, [r7, #2]
 800847a:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800847c:	2300      	movs	r3, #0
}
 800847e:	4618      	mov	r0, r3
 8008480:	370c      	adds	r7, #12
 8008482:	46bd      	mov	sp, r7
 8008484:	bc80      	pop	{r7}
 8008486:	4770      	bx	lr

08008488 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008488:	b580      	push	{r7, lr}
 800848a:	b08a      	sub	sp, #40	; 0x28
 800848c:	af00      	add	r7, sp, #0
 800848e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	2b00      	cmp	r3, #0
 8008494:	d101      	bne.n	800849a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008496:	2301      	movs	r3, #1
 8008498:	e237      	b.n	800890a <HAL_RCC_OscConfig+0x482>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	f003 0301 	and.w	r3, r3, #1
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d050      	beq.n	8008548 <HAL_RCC_OscConfig+0xc0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80084a6:	4ba3      	ldr	r3, [pc, #652]	; (8008734 <HAL_RCC_OscConfig+0x2ac>)
 80084a8:	689b      	ldr	r3, [r3, #8]
 80084aa:	f003 030c 	and.w	r3, r3, #12
 80084ae:	2b04      	cmp	r3, #4
 80084b0:	d00c      	beq.n	80084cc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80084b2:	4ba0      	ldr	r3, [pc, #640]	; (8008734 <HAL_RCC_OscConfig+0x2ac>)
 80084b4:	689b      	ldr	r3, [r3, #8]
 80084b6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80084ba:	2b08      	cmp	r3, #8
 80084bc:	d112      	bne.n	80084e4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80084be:	4b9d      	ldr	r3, [pc, #628]	; (8008734 <HAL_RCC_OscConfig+0x2ac>)
 80084c0:	685b      	ldr	r3, [r3, #4]
 80084c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80084c6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80084ca:	d10b      	bne.n	80084e4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80084cc:	4b99      	ldr	r3, [pc, #612]	; (8008734 <HAL_RCC_OscConfig+0x2ac>)
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	d036      	beq.n	8008546 <HAL_RCC_OscConfig+0xbe>
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	685b      	ldr	r3, [r3, #4]
 80084dc:	2b00      	cmp	r3, #0
 80084de:	d132      	bne.n	8008546 <HAL_RCC_OscConfig+0xbe>
      {
        return HAL_ERROR;
 80084e0:	2301      	movs	r3, #1
 80084e2:	e212      	b.n	800890a <HAL_RCC_OscConfig+0x482>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	685a      	ldr	r2, [r3, #4]
 80084e8:	4b93      	ldr	r3, [pc, #588]	; (8008738 <HAL_RCC_OscConfig+0x2b0>)
 80084ea:	b2d2      	uxtb	r2, r2
 80084ec:	701a      	strb	r2, [r3, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	685b      	ldr	r3, [r3, #4]
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	d013      	beq.n	800851e <HAL_RCC_OscConfig+0x96>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80084f6:	f7fc fe7d 	bl	80051f4 <HAL_GetTick>
 80084fa:	6238      	str	r0, [r7, #32]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80084fc:	e008      	b.n	8008510 <HAL_RCC_OscConfig+0x88>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80084fe:	f7fc fe79 	bl	80051f4 <HAL_GetTick>
 8008502:	4602      	mov	r2, r0
 8008504:	6a3b      	ldr	r3, [r7, #32]
 8008506:	1ad3      	subs	r3, r2, r3
 8008508:	2b64      	cmp	r3, #100	; 0x64
 800850a:	d901      	bls.n	8008510 <HAL_RCC_OscConfig+0x88>
          {
            return HAL_TIMEOUT;
 800850c:	2303      	movs	r3, #3
 800850e:	e1fc      	b.n	800890a <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008510:	4b88      	ldr	r3, [pc, #544]	; (8008734 <HAL_RCC_OscConfig+0x2ac>)
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008518:	2b00      	cmp	r3, #0
 800851a:	d0f0      	beq.n	80084fe <HAL_RCC_OscConfig+0x76>
 800851c:	e014      	b.n	8008548 <HAL_RCC_OscConfig+0xc0>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800851e:	f7fc fe69 	bl	80051f4 <HAL_GetTick>
 8008522:	6238      	str	r0, [r7, #32]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008524:	e008      	b.n	8008538 <HAL_RCC_OscConfig+0xb0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008526:	f7fc fe65 	bl	80051f4 <HAL_GetTick>
 800852a:	4602      	mov	r2, r0
 800852c:	6a3b      	ldr	r3, [r7, #32]
 800852e:	1ad3      	subs	r3, r2, r3
 8008530:	2b64      	cmp	r3, #100	; 0x64
 8008532:	d901      	bls.n	8008538 <HAL_RCC_OscConfig+0xb0>
          {
            return HAL_TIMEOUT;
 8008534:	2303      	movs	r3, #3
 8008536:	e1e8      	b.n	800890a <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008538:	4b7e      	ldr	r3, [pc, #504]	; (8008734 <HAL_RCC_OscConfig+0x2ac>)
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008540:	2b00      	cmp	r3, #0
 8008542:	d1f0      	bne.n	8008526 <HAL_RCC_OscConfig+0x9e>
 8008544:	e000      	b.n	8008548 <HAL_RCC_OscConfig+0xc0>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008546:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	f003 0302 	and.w	r3, r3, #2
 8008550:	2b00      	cmp	r3, #0
 8008552:	d077      	beq.n	8008644 <HAL_RCC_OscConfig+0x1bc>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8008554:	4b77      	ldr	r3, [pc, #476]	; (8008734 <HAL_RCC_OscConfig+0x2ac>)
 8008556:	689b      	ldr	r3, [r3, #8]
 8008558:	f003 030c 	and.w	r3, r3, #12
 800855c:	2b00      	cmp	r3, #0
 800855e:	d00b      	beq.n	8008578 <HAL_RCC_OscConfig+0xf0>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008560:	4b74      	ldr	r3, [pc, #464]	; (8008734 <HAL_RCC_OscConfig+0x2ac>)
 8008562:	689b      	ldr	r3, [r3, #8]
 8008564:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8008568:	2b08      	cmp	r3, #8
 800856a:	d126      	bne.n	80085ba <HAL_RCC_OscConfig+0x132>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800856c:	4b71      	ldr	r3, [pc, #452]	; (8008734 <HAL_RCC_OscConfig+0x2ac>)
 800856e:	685b      	ldr	r3, [r3, #4]
 8008570:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008574:	2b00      	cmp	r3, #0
 8008576:	d120      	bne.n	80085ba <HAL_RCC_OscConfig+0x132>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008578:	4b6e      	ldr	r3, [pc, #440]	; (8008734 <HAL_RCC_OscConfig+0x2ac>)
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	f003 0302 	and.w	r3, r3, #2
 8008580:	2b00      	cmp	r3, #0
 8008582:	d005      	beq.n	8008590 <HAL_RCC_OscConfig+0x108>
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	68db      	ldr	r3, [r3, #12]
 8008588:	2b01      	cmp	r3, #1
 800858a:	d001      	beq.n	8008590 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800858c:	2301      	movs	r3, #1
 800858e:	e1bc      	b.n	800890a <HAL_RCC_OscConfig+0x482>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008590:	4b68      	ldr	r3, [pc, #416]	; (8008734 <HAL_RCC_OscConfig+0x2ac>)
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	691b      	ldr	r3, [r3, #16]
 800859c:	21f8      	movs	r1, #248	; 0xf8
 800859e:	61b9      	str	r1, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80085a0:	69b9      	ldr	r1, [r7, #24]
 80085a2:	fa91 f1a1 	rbit	r1, r1
 80085a6:	6179      	str	r1, [r7, #20]
  return result;
 80085a8:	6979      	ldr	r1, [r7, #20]
 80085aa:	fab1 f181 	clz	r1, r1
 80085ae:	b2c9      	uxtb	r1, r1
 80085b0:	408b      	lsls	r3, r1
 80085b2:	4960      	ldr	r1, [pc, #384]	; (8008734 <HAL_RCC_OscConfig+0x2ac>)
 80085b4:	4313      	orrs	r3, r2
 80085b6:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80085b8:	e044      	b.n	8008644 <HAL_RCC_OscConfig+0x1bc>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	68db      	ldr	r3, [r3, #12]
 80085be:	2b00      	cmp	r3, #0
 80085c0:	d02a      	beq.n	8008618 <HAL_RCC_OscConfig+0x190>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80085c2:	4b5e      	ldr	r3, [pc, #376]	; (800873c <HAL_RCC_OscConfig+0x2b4>)
 80085c4:	2201      	movs	r2, #1
 80085c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80085c8:	f7fc fe14 	bl	80051f4 <HAL_GetTick>
 80085cc:	6238      	str	r0, [r7, #32]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80085ce:	e008      	b.n	80085e2 <HAL_RCC_OscConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80085d0:	f7fc fe10 	bl	80051f4 <HAL_GetTick>
 80085d4:	4602      	mov	r2, r0
 80085d6:	6a3b      	ldr	r3, [r7, #32]
 80085d8:	1ad3      	subs	r3, r2, r3
 80085da:	2b02      	cmp	r3, #2
 80085dc:	d901      	bls.n	80085e2 <HAL_RCC_OscConfig+0x15a>
          {
            return HAL_TIMEOUT;
 80085de:	2303      	movs	r3, #3
 80085e0:	e193      	b.n	800890a <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80085e2:	4b54      	ldr	r3, [pc, #336]	; (8008734 <HAL_RCC_OscConfig+0x2ac>)
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	f003 0302 	and.w	r3, r3, #2
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	d0f0      	beq.n	80085d0 <HAL_RCC_OscConfig+0x148>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80085ee:	4b51      	ldr	r3, [pc, #324]	; (8008734 <HAL_RCC_OscConfig+0x2ac>)
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	691b      	ldr	r3, [r3, #16]
 80085fa:	21f8      	movs	r1, #248	; 0xf8
 80085fc:	6139      	str	r1, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80085fe:	6939      	ldr	r1, [r7, #16]
 8008600:	fa91 f1a1 	rbit	r1, r1
 8008604:	60f9      	str	r1, [r7, #12]
  return result;
 8008606:	68f9      	ldr	r1, [r7, #12]
 8008608:	fab1 f181 	clz	r1, r1
 800860c:	b2c9      	uxtb	r1, r1
 800860e:	408b      	lsls	r3, r1
 8008610:	4948      	ldr	r1, [pc, #288]	; (8008734 <HAL_RCC_OscConfig+0x2ac>)
 8008612:	4313      	orrs	r3, r2
 8008614:	600b      	str	r3, [r1, #0]
 8008616:	e015      	b.n	8008644 <HAL_RCC_OscConfig+0x1bc>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008618:	4b48      	ldr	r3, [pc, #288]	; (800873c <HAL_RCC_OscConfig+0x2b4>)
 800861a:	2200      	movs	r2, #0
 800861c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800861e:	f7fc fde9 	bl	80051f4 <HAL_GetTick>
 8008622:	6238      	str	r0, [r7, #32]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008624:	e008      	b.n	8008638 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008626:	f7fc fde5 	bl	80051f4 <HAL_GetTick>
 800862a:	4602      	mov	r2, r0
 800862c:	6a3b      	ldr	r3, [r7, #32]
 800862e:	1ad3      	subs	r3, r2, r3
 8008630:	2b02      	cmp	r3, #2
 8008632:	d901      	bls.n	8008638 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8008634:	2303      	movs	r3, #3
 8008636:	e168      	b.n	800890a <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008638:	4b3e      	ldr	r3, [pc, #248]	; (8008734 <HAL_RCC_OscConfig+0x2ac>)
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	f003 0302 	and.w	r3, r3, #2
 8008640:	2b00      	cmp	r3, #0
 8008642:	d1f0      	bne.n	8008626 <HAL_RCC_OscConfig+0x19e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	f003 0308 	and.w	r3, r3, #8
 800864c:	2b00      	cmp	r3, #0
 800864e:	d030      	beq.n	80086b2 <HAL_RCC_OscConfig+0x22a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	695b      	ldr	r3, [r3, #20]
 8008654:	2b00      	cmp	r3, #0
 8008656:	d016      	beq.n	8008686 <HAL_RCC_OscConfig+0x1fe>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008658:	4b39      	ldr	r3, [pc, #228]	; (8008740 <HAL_RCC_OscConfig+0x2b8>)
 800865a:	2201      	movs	r2, #1
 800865c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800865e:	f7fc fdc9 	bl	80051f4 <HAL_GetTick>
 8008662:	6238      	str	r0, [r7, #32]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008664:	e008      	b.n	8008678 <HAL_RCC_OscConfig+0x1f0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008666:	f7fc fdc5 	bl	80051f4 <HAL_GetTick>
 800866a:	4602      	mov	r2, r0
 800866c:	6a3b      	ldr	r3, [r7, #32]
 800866e:	1ad3      	subs	r3, r2, r3
 8008670:	2b02      	cmp	r3, #2
 8008672:	d901      	bls.n	8008678 <HAL_RCC_OscConfig+0x1f0>
        {
          return HAL_TIMEOUT;
 8008674:	2303      	movs	r3, #3
 8008676:	e148      	b.n	800890a <HAL_RCC_OscConfig+0x482>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008678:	4b2e      	ldr	r3, [pc, #184]	; (8008734 <HAL_RCC_OscConfig+0x2ac>)
 800867a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800867c:	f003 0302 	and.w	r3, r3, #2
 8008680:	2b00      	cmp	r3, #0
 8008682:	d0f0      	beq.n	8008666 <HAL_RCC_OscConfig+0x1de>
 8008684:	e015      	b.n	80086b2 <HAL_RCC_OscConfig+0x22a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008686:	4b2e      	ldr	r3, [pc, #184]	; (8008740 <HAL_RCC_OscConfig+0x2b8>)
 8008688:	2200      	movs	r2, #0
 800868a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800868c:	f7fc fdb2 	bl	80051f4 <HAL_GetTick>
 8008690:	6238      	str	r0, [r7, #32]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008692:	e008      	b.n	80086a6 <HAL_RCC_OscConfig+0x21e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008694:	f7fc fdae 	bl	80051f4 <HAL_GetTick>
 8008698:	4602      	mov	r2, r0
 800869a:	6a3b      	ldr	r3, [r7, #32]
 800869c:	1ad3      	subs	r3, r2, r3
 800869e:	2b02      	cmp	r3, #2
 80086a0:	d901      	bls.n	80086a6 <HAL_RCC_OscConfig+0x21e>
        {
          return HAL_TIMEOUT;
 80086a2:	2303      	movs	r3, #3
 80086a4:	e131      	b.n	800890a <HAL_RCC_OscConfig+0x482>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80086a6:	4b23      	ldr	r3, [pc, #140]	; (8008734 <HAL_RCC_OscConfig+0x2ac>)
 80086a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80086aa:	f003 0302 	and.w	r3, r3, #2
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	d1f0      	bne.n	8008694 <HAL_RCC_OscConfig+0x20c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	f003 0304 	and.w	r3, r3, #4
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	f000 8088 	beq.w	80087d0 <HAL_RCC_OscConfig+0x348>
  {
    FlagStatus       pwrclkchanged = RESET;
 80086c0:	2300      	movs	r3, #0
 80086c2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80086c6:	4b1b      	ldr	r3, [pc, #108]	; (8008734 <HAL_RCC_OscConfig+0x2ac>)
 80086c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	d110      	bne.n	80086f4 <HAL_RCC_OscConfig+0x26c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80086d2:	2300      	movs	r3, #0
 80086d4:	60bb      	str	r3, [r7, #8]
 80086d6:	4b17      	ldr	r3, [pc, #92]	; (8008734 <HAL_RCC_OscConfig+0x2ac>)
 80086d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086da:	4a16      	ldr	r2, [pc, #88]	; (8008734 <HAL_RCC_OscConfig+0x2ac>)
 80086dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80086e0:	6413      	str	r3, [r2, #64]	; 0x40
 80086e2:	4b14      	ldr	r3, [pc, #80]	; (8008734 <HAL_RCC_OscConfig+0x2ac>)
 80086e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80086ea:	60bb      	str	r3, [r7, #8]
 80086ec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80086ee:	2301      	movs	r3, #1
 80086f0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80086f4:	4b13      	ldr	r3, [pc, #76]	; (8008744 <HAL_RCC_OscConfig+0x2bc>)
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	4a12      	ldr	r2, [pc, #72]	; (8008744 <HAL_RCC_OscConfig+0x2bc>)
 80086fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80086fe:	6013      	str	r3, [r2, #0]

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008700:	4b10      	ldr	r3, [pc, #64]	; (8008744 <HAL_RCC_OscConfig+0x2bc>)
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008708:	2b00      	cmp	r3, #0
 800870a:	d123      	bne.n	8008754 <HAL_RCC_OscConfig+0x2cc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800870c:	4b0d      	ldr	r3, [pc, #52]	; (8008744 <HAL_RCC_OscConfig+0x2bc>)
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	4a0c      	ldr	r2, [pc, #48]	; (8008744 <HAL_RCC_OscConfig+0x2bc>)
 8008712:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008716:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008718:	f7fc fd6c 	bl	80051f4 <HAL_GetTick>
 800871c:	6238      	str	r0, [r7, #32]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800871e:	e013      	b.n	8008748 <HAL_RCC_OscConfig+0x2c0>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008720:	f7fc fd68 	bl	80051f4 <HAL_GetTick>
 8008724:	4602      	mov	r2, r0
 8008726:	6a3b      	ldr	r3, [r7, #32]
 8008728:	1ad3      	subs	r3, r2, r3
 800872a:	2b02      	cmp	r3, #2
 800872c:	d90c      	bls.n	8008748 <HAL_RCC_OscConfig+0x2c0>
        {
          return HAL_TIMEOUT;
 800872e:	2303      	movs	r3, #3
 8008730:	e0eb      	b.n	800890a <HAL_RCC_OscConfig+0x482>
 8008732:	bf00      	nop
 8008734:	40023800 	.word	0x40023800
 8008738:	40023802 	.word	0x40023802
 800873c:	42470000 	.word	0x42470000
 8008740:	42470e80 	.word	0x42470e80
 8008744:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008748:	4b72      	ldr	r3, [pc, #456]	; (8008914 <HAL_RCC_OscConfig+0x48c>)
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008750:	2b00      	cmp	r3, #0
 8008752:	d0e5      	beq.n	8008720 <HAL_RCC_OscConfig+0x298>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	689a      	ldr	r2, [r3, #8]
 8008758:	4b6f      	ldr	r3, [pc, #444]	; (8008918 <HAL_RCC_OscConfig+0x490>)
 800875a:	b2d2      	uxtb	r2, r2
 800875c:	701a      	strb	r2, [r3, #0]
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	689b      	ldr	r3, [r3, #8]
 8008762:	2b00      	cmp	r3, #0
 8008764:	d015      	beq.n	8008792 <HAL_RCC_OscConfig+0x30a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008766:	f7fc fd45 	bl	80051f4 <HAL_GetTick>
 800876a:	6238      	str	r0, [r7, #32]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800876c:	e00a      	b.n	8008784 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800876e:	f7fc fd41 	bl	80051f4 <HAL_GetTick>
 8008772:	4602      	mov	r2, r0
 8008774:	6a3b      	ldr	r3, [r7, #32]
 8008776:	1ad3      	subs	r3, r2, r3
 8008778:	f241 3288 	movw	r2, #5000	; 0x1388
 800877c:	4293      	cmp	r3, r2
 800877e:	d901      	bls.n	8008784 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8008780:	2303      	movs	r3, #3
 8008782:	e0c2      	b.n	800890a <HAL_RCC_OscConfig+0x482>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008784:	4b65      	ldr	r3, [pc, #404]	; (800891c <HAL_RCC_OscConfig+0x494>)
 8008786:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008788:	f003 0302 	and.w	r3, r3, #2
 800878c:	2b00      	cmp	r3, #0
 800878e:	d0ee      	beq.n	800876e <HAL_RCC_OscConfig+0x2e6>
 8008790:	e014      	b.n	80087bc <HAL_RCC_OscConfig+0x334>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008792:	f7fc fd2f 	bl	80051f4 <HAL_GetTick>
 8008796:	6238      	str	r0, [r7, #32]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008798:	e00a      	b.n	80087b0 <HAL_RCC_OscConfig+0x328>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800879a:	f7fc fd2b 	bl	80051f4 <HAL_GetTick>
 800879e:	4602      	mov	r2, r0
 80087a0:	6a3b      	ldr	r3, [r7, #32]
 80087a2:	1ad3      	subs	r3, r2, r3
 80087a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80087a8:	4293      	cmp	r3, r2
 80087aa:	d901      	bls.n	80087b0 <HAL_RCC_OscConfig+0x328>
        {
          return HAL_TIMEOUT;
 80087ac:	2303      	movs	r3, #3
 80087ae:	e0ac      	b.n	800890a <HAL_RCC_OscConfig+0x482>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80087b0:	4b5a      	ldr	r3, [pc, #360]	; (800891c <HAL_RCC_OscConfig+0x494>)
 80087b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80087b4:	f003 0302 	and.w	r3, r3, #2
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	d1ee      	bne.n	800879a <HAL_RCC_OscConfig+0x312>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80087bc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80087c0:	2b01      	cmp	r3, #1
 80087c2:	d105      	bne.n	80087d0 <HAL_RCC_OscConfig+0x348>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80087c4:	4b55      	ldr	r3, [pc, #340]	; (800891c <HAL_RCC_OscConfig+0x494>)
 80087c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087c8:	4a54      	ldr	r2, [pc, #336]	; (800891c <HAL_RCC_OscConfig+0x494>)
 80087ca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80087ce:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	699b      	ldr	r3, [r3, #24]
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	f000 8097 	beq.w	8008908 <HAL_RCC_OscConfig+0x480>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80087da:	4b50      	ldr	r3, [pc, #320]	; (800891c <HAL_RCC_OscConfig+0x494>)
 80087dc:	689b      	ldr	r3, [r3, #8]
 80087de:	f003 030c 	and.w	r3, r3, #12
 80087e2:	2b08      	cmp	r3, #8
 80087e4:	d061      	beq.n	80088aa <HAL_RCC_OscConfig+0x422>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	699b      	ldr	r3, [r3, #24]
 80087ea:	2b02      	cmp	r3, #2
 80087ec:	d146      	bne.n	800887c <HAL_RCC_OscConfig+0x3f4>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80087ee:	4b4c      	ldr	r3, [pc, #304]	; (8008920 <HAL_RCC_OscConfig+0x498>)
 80087f0:	2200      	movs	r2, #0
 80087f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80087f4:	f7fc fcfe 	bl	80051f4 <HAL_GetTick>
 80087f8:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80087fa:	e008      	b.n	800880e <HAL_RCC_OscConfig+0x386>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80087fc:	f7fc fcfa 	bl	80051f4 <HAL_GetTick>
 8008800:	4602      	mov	r2, r0
 8008802:	6a3b      	ldr	r3, [r7, #32]
 8008804:	1ad3      	subs	r3, r2, r3
 8008806:	2b64      	cmp	r3, #100	; 0x64
 8008808:	d901      	bls.n	800880e <HAL_RCC_OscConfig+0x386>
          {
            return HAL_TIMEOUT;
 800880a:	2303      	movs	r3, #3
 800880c:	e07d      	b.n	800890a <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800880e:	4b43      	ldr	r3, [pc, #268]	; (800891c <HAL_RCC_OscConfig+0x494>)
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008816:	2b00      	cmp	r3, #0
 8008818:	d1f0      	bne.n	80087fc <HAL_RCC_OscConfig+0x374>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800881a:	4b40      	ldr	r3, [pc, #256]	; (800891c <HAL_RCC_OscConfig+0x494>)
 800881c:	685a      	ldr	r2, [r3, #4]
 800881e:	4b41      	ldr	r3, [pc, #260]	; (8008924 <HAL_RCC_OscConfig+0x49c>)
 8008820:	4013      	ands	r3, r2
 8008822:	687a      	ldr	r2, [r7, #4]
 8008824:	69d1      	ldr	r1, [r2, #28]
 8008826:	687a      	ldr	r2, [r7, #4]
 8008828:	6a12      	ldr	r2, [r2, #32]
 800882a:	4311      	orrs	r1, r2
 800882c:	687a      	ldr	r2, [r7, #4]
 800882e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8008830:	0192      	lsls	r2, r2, #6
 8008832:	4311      	orrs	r1, r2
 8008834:	687a      	ldr	r2, [r7, #4]
 8008836:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8008838:	0612      	lsls	r2, r2, #24
 800883a:	4311      	orrs	r1, r2
 800883c:	687a      	ldr	r2, [r7, #4]
 800883e:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8008840:	0852      	lsrs	r2, r2, #1
 8008842:	3a01      	subs	r2, #1
 8008844:	0412      	lsls	r2, r2, #16
 8008846:	430a      	orrs	r2, r1
 8008848:	4934      	ldr	r1, [pc, #208]	; (800891c <HAL_RCC_OscConfig+0x494>)
 800884a:	4313      	orrs	r3, r2
 800884c:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800884e:	4b34      	ldr	r3, [pc, #208]	; (8008920 <HAL_RCC_OscConfig+0x498>)
 8008850:	2201      	movs	r2, #1
 8008852:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008854:	f7fc fcce 	bl	80051f4 <HAL_GetTick>
 8008858:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800885a:	e008      	b.n	800886e <HAL_RCC_OscConfig+0x3e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800885c:	f7fc fcca 	bl	80051f4 <HAL_GetTick>
 8008860:	4602      	mov	r2, r0
 8008862:	6a3b      	ldr	r3, [r7, #32]
 8008864:	1ad3      	subs	r3, r2, r3
 8008866:	2b64      	cmp	r3, #100	; 0x64
 8008868:	d901      	bls.n	800886e <HAL_RCC_OscConfig+0x3e6>
          {
            return HAL_TIMEOUT;
 800886a:	2303      	movs	r3, #3
 800886c:	e04d      	b.n	800890a <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800886e:	4b2b      	ldr	r3, [pc, #172]	; (800891c <HAL_RCC_OscConfig+0x494>)
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008876:	2b00      	cmp	r3, #0
 8008878:	d0f0      	beq.n	800885c <HAL_RCC_OscConfig+0x3d4>
 800887a:	e045      	b.n	8008908 <HAL_RCC_OscConfig+0x480>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800887c:	4b28      	ldr	r3, [pc, #160]	; (8008920 <HAL_RCC_OscConfig+0x498>)
 800887e:	2200      	movs	r2, #0
 8008880:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008882:	f7fc fcb7 	bl	80051f4 <HAL_GetTick>
 8008886:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008888:	e008      	b.n	800889c <HAL_RCC_OscConfig+0x414>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800888a:	f7fc fcb3 	bl	80051f4 <HAL_GetTick>
 800888e:	4602      	mov	r2, r0
 8008890:	6a3b      	ldr	r3, [r7, #32]
 8008892:	1ad3      	subs	r3, r2, r3
 8008894:	2b64      	cmp	r3, #100	; 0x64
 8008896:	d901      	bls.n	800889c <HAL_RCC_OscConfig+0x414>
          {
            return HAL_TIMEOUT;
 8008898:	2303      	movs	r3, #3
 800889a:	e036      	b.n	800890a <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800889c:	4b1f      	ldr	r3, [pc, #124]	; (800891c <HAL_RCC_OscConfig+0x494>)
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	d1f0      	bne.n	800888a <HAL_RCC_OscConfig+0x402>
 80088a8:	e02e      	b.n	8008908 <HAL_RCC_OscConfig+0x480>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	699b      	ldr	r3, [r3, #24]
 80088ae:	2b01      	cmp	r3, #1
 80088b0:	d101      	bne.n	80088b6 <HAL_RCC_OscConfig+0x42e>
      {
        return HAL_ERROR;
 80088b2:	2301      	movs	r3, #1
 80088b4:	e029      	b.n	800890a <HAL_RCC_OscConfig+0x482>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        uint32_t pllcfgr = RCC->PLLCFGR;
 80088b6:	4b19      	ldr	r3, [pc, #100]	; (800891c <HAL_RCC_OscConfig+0x494>)
 80088b8:	685b      	ldr	r3, [r3, #4]
 80088ba:	61fb      	str	r3, [r7, #28]
      
        if((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80088bc:	69fb      	ldr	r3, [r7, #28]
 80088be:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	69db      	ldr	r3, [r3, #28]
 80088c6:	429a      	cmp	r2, r3
 80088c8:	d11c      	bne.n	8008904 <HAL_RCC_OscConfig+0x47c>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80088ca:	69fb      	ldr	r3, [r7, #28]
 80088cc:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80088d4:	429a      	cmp	r2, r3
 80088d6:	d115      	bne.n	8008904 <HAL_RCC_OscConfig+0x47c>
           ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80088d8:	69fb      	ldr	r3, [r7, #28]
 80088da:	099b      	lsrs	r3, r3, #6
 80088dc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80088e4:	429a      	cmp	r2, r3
 80088e6:	d10d      	bne.n	8008904 <HAL_RCC_OscConfig+0x47c>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80088e8:	69fb      	ldr	r3, [r7, #28]
 80088ea:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80088f2:	429a      	cmp	r2, r3
 80088f4:	d106      	bne.n	8008904 <HAL_RCC_OscConfig+0x47c>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80088f6:	69fb      	ldr	r3, [r7, #28]
 80088f8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8008900:	429a      	cmp	r2, r3
 8008902:	d001      	beq.n	8008908 <HAL_RCC_OscConfig+0x480>
        {
          return HAL_ERROR;
 8008904:	2301      	movs	r3, #1
 8008906:	e000      	b.n	800890a <HAL_RCC_OscConfig+0x482>
        }
      }
    }
  }
  return HAL_OK;
 8008908:	2300      	movs	r3, #0
}
 800890a:	4618      	mov	r0, r3
 800890c:	3728      	adds	r7, #40	; 0x28
 800890e:	46bd      	mov	sp, r7
 8008910:	bd80      	pop	{r7, pc}
 8008912:	bf00      	nop
 8008914:	40007000 	.word	0x40007000
 8008918:	40023870 	.word	0x40023870
 800891c:	40023800 	.word	0x40023800
 8008920:	42470060 	.word	0x42470060
 8008924:	f0bc8000 	.word	0xf0bc8000

08008928 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008928:	b580      	push	{r7, lr}
 800892a:	b086      	sub	sp, #24
 800892c:	af00      	add	r7, sp, #0
 800892e:	6078      	str	r0, [r7, #4]
 8008930:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	2b00      	cmp	r3, #0
 8008936:	d101      	bne.n	800893c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008938:	2301      	movs	r3, #1
 800893a:	e0d2      	b.n	8008ae2 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800893c:	4b6b      	ldr	r3, [pc, #428]	; (8008aec <HAL_RCC_ClockConfig+0x1c4>)
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	f003 030f 	and.w	r3, r3, #15
 8008944:	683a      	ldr	r2, [r7, #0]
 8008946:	429a      	cmp	r2, r3
 8008948:	d90c      	bls.n	8008964 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800894a:	4b68      	ldr	r3, [pc, #416]	; (8008aec <HAL_RCC_ClockConfig+0x1c4>)
 800894c:	683a      	ldr	r2, [r7, #0]
 800894e:	b2d2      	uxtb	r2, r2
 8008950:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008952:	4b66      	ldr	r3, [pc, #408]	; (8008aec <HAL_RCC_ClockConfig+0x1c4>)
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	f003 030f 	and.w	r3, r3, #15
 800895a:	683a      	ldr	r2, [r7, #0]
 800895c:	429a      	cmp	r2, r3
 800895e:	d001      	beq.n	8008964 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8008960:	2301      	movs	r3, #1
 8008962:	e0be      	b.n	8008ae2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	f003 0302 	and.w	r3, r3, #2
 800896c:	2b00      	cmp	r3, #0
 800896e:	d020      	beq.n	80089b2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	f003 0304 	and.w	r3, r3, #4
 8008978:	2b00      	cmp	r3, #0
 800897a:	d005      	beq.n	8008988 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800897c:	4b5c      	ldr	r3, [pc, #368]	; (8008af0 <HAL_RCC_ClockConfig+0x1c8>)
 800897e:	689b      	ldr	r3, [r3, #8]
 8008980:	4a5b      	ldr	r2, [pc, #364]	; (8008af0 <HAL_RCC_ClockConfig+0x1c8>)
 8008982:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8008986:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	f003 0308 	and.w	r3, r3, #8
 8008990:	2b00      	cmp	r3, #0
 8008992:	d005      	beq.n	80089a0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3U));
 8008994:	4b56      	ldr	r3, [pc, #344]	; (8008af0 <HAL_RCC_ClockConfig+0x1c8>)
 8008996:	689b      	ldr	r3, [r3, #8]
 8008998:	4a55      	ldr	r2, [pc, #340]	; (8008af0 <HAL_RCC_ClockConfig+0x1c8>)
 800899a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800899e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80089a0:	4b53      	ldr	r3, [pc, #332]	; (8008af0 <HAL_RCC_ClockConfig+0x1c8>)
 80089a2:	689b      	ldr	r3, [r3, #8]
 80089a4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	689b      	ldr	r3, [r3, #8]
 80089ac:	4950      	ldr	r1, [pc, #320]	; (8008af0 <HAL_RCC_ClockConfig+0x1c8>)
 80089ae:	4313      	orrs	r3, r2
 80089b0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	f003 0301 	and.w	r3, r3, #1
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	d040      	beq.n	8008a40 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	685b      	ldr	r3, [r3, #4]
 80089c2:	2b01      	cmp	r3, #1
 80089c4:	d107      	bne.n	80089d6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80089c6:	4b4a      	ldr	r3, [pc, #296]	; (8008af0 <HAL_RCC_ClockConfig+0x1c8>)
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	d115      	bne.n	80089fe <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80089d2:	2301      	movs	r3, #1
 80089d4:	e085      	b.n	8008ae2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	685b      	ldr	r3, [r3, #4]
 80089da:	2b02      	cmp	r3, #2
 80089dc:	d107      	bne.n	80089ee <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80089de:	4b44      	ldr	r3, [pc, #272]	; (8008af0 <HAL_RCC_ClockConfig+0x1c8>)
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	d109      	bne.n	80089fe <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80089ea:	2301      	movs	r3, #1
 80089ec:	e079      	b.n	8008ae2 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80089ee:	4b40      	ldr	r3, [pc, #256]	; (8008af0 <HAL_RCC_ClockConfig+0x1c8>)
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	f003 0302 	and.w	r3, r3, #2
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	d101      	bne.n	80089fe <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80089fa:	2301      	movs	r3, #1
 80089fc:	e071      	b.n	8008ae2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80089fe:	4b3c      	ldr	r3, [pc, #240]	; (8008af0 <HAL_RCC_ClockConfig+0x1c8>)
 8008a00:	689b      	ldr	r3, [r3, #8]
 8008a02:	f023 0203 	bic.w	r2, r3, #3
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	685b      	ldr	r3, [r3, #4]
 8008a0a:	4939      	ldr	r1, [pc, #228]	; (8008af0 <HAL_RCC_ClockConfig+0x1c8>)
 8008a0c:	4313      	orrs	r3, r2
 8008a0e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008a10:	f7fc fbf0 	bl	80051f4 <HAL_GetTick>
 8008a14:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008a16:	e00a      	b.n	8008a2e <HAL_RCC_ClockConfig+0x106>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008a18:	f7fc fbec 	bl	80051f4 <HAL_GetTick>
 8008a1c:	4602      	mov	r2, r0
 8008a1e:	697b      	ldr	r3, [r7, #20]
 8008a20:	1ad3      	subs	r3, r2, r3
 8008a22:	f241 3288 	movw	r2, #5000	; 0x1388
 8008a26:	4293      	cmp	r3, r2
 8008a28:	d901      	bls.n	8008a2e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8008a2a:	2303      	movs	r3, #3
 8008a2c:	e059      	b.n	8008ae2 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008a2e:	4b30      	ldr	r3, [pc, #192]	; (8008af0 <HAL_RCC_ClockConfig+0x1c8>)
 8008a30:	689b      	ldr	r3, [r3, #8]
 8008a32:	f003 020c 	and.w	r2, r3, #12
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	685b      	ldr	r3, [r3, #4]
 8008a3a:	009b      	lsls	r3, r3, #2
 8008a3c:	429a      	cmp	r2, r3
 8008a3e:	d1eb      	bne.n	8008a18 <HAL_RCC_ClockConfig+0xf0>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008a40:	4b2a      	ldr	r3, [pc, #168]	; (8008aec <HAL_RCC_ClockConfig+0x1c4>)
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	f003 030f 	and.w	r3, r3, #15
 8008a48:	683a      	ldr	r2, [r7, #0]
 8008a4a:	429a      	cmp	r2, r3
 8008a4c:	d20c      	bcs.n	8008a68 <HAL_RCC_ClockConfig+0x140>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008a4e:	4b27      	ldr	r3, [pc, #156]	; (8008aec <HAL_RCC_ClockConfig+0x1c4>)
 8008a50:	683a      	ldr	r2, [r7, #0]
 8008a52:	b2d2      	uxtb	r2, r2
 8008a54:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008a56:	4b25      	ldr	r3, [pc, #148]	; (8008aec <HAL_RCC_ClockConfig+0x1c4>)
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	f003 030f 	and.w	r3, r3, #15
 8008a5e:	683a      	ldr	r2, [r7, #0]
 8008a60:	429a      	cmp	r2, r3
 8008a62:	d001      	beq.n	8008a68 <HAL_RCC_ClockConfig+0x140>
    {
      return HAL_ERROR;
 8008a64:	2301      	movs	r3, #1
 8008a66:	e03c      	b.n	8008ae2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	f003 0304 	and.w	r3, r3, #4
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	d008      	beq.n	8008a86 <HAL_RCC_ClockConfig+0x15e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008a74:	4b1e      	ldr	r3, [pc, #120]	; (8008af0 <HAL_RCC_ClockConfig+0x1c8>)
 8008a76:	689b      	ldr	r3, [r3, #8]
 8008a78:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	68db      	ldr	r3, [r3, #12]
 8008a80:	491b      	ldr	r1, [pc, #108]	; (8008af0 <HAL_RCC_ClockConfig+0x1c8>)
 8008a82:	4313      	orrs	r3, r2
 8008a84:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	f003 0308 	and.w	r3, r3, #8
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	d009      	beq.n	8008aa6 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008a92:	4b17      	ldr	r3, [pc, #92]	; (8008af0 <HAL_RCC_ClockConfig+0x1c8>)
 8008a94:	689b      	ldr	r3, [r3, #8]
 8008a96:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	691b      	ldr	r3, [r3, #16]
 8008a9e:	00db      	lsls	r3, r3, #3
 8008aa0:	4913      	ldr	r1, [pc, #76]	; (8008af0 <HAL_RCC_ClockConfig+0x1c8>)
 8008aa2:	4313      	orrs	r3, r2
 8008aa4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 8008aa6:	f000 f837 	bl	8008b18 <HAL_RCC_GetSysClockFreq>
 8008aaa:	4601      	mov	r1, r0
 8008aac:	4b10      	ldr	r3, [pc, #64]	; (8008af0 <HAL_RCC_ClockConfig+0x1c8>)
 8008aae:	689b      	ldr	r3, [r3, #8]
 8008ab0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008ab4:	22f0      	movs	r2, #240	; 0xf0
 8008ab6:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008ab8:	693a      	ldr	r2, [r7, #16]
 8008aba:	fa92 f2a2 	rbit	r2, r2
 8008abe:	60fa      	str	r2, [r7, #12]
  return result;
 8008ac0:	68fa      	ldr	r2, [r7, #12]
 8008ac2:	fab2 f282 	clz	r2, r2
 8008ac6:	b2d2      	uxtb	r2, r2
 8008ac8:	40d3      	lsrs	r3, r2
 8008aca:	4a0a      	ldr	r2, [pc, #40]	; (8008af4 <HAL_RCC_ClockConfig+0x1cc>)
 8008acc:	5cd3      	ldrb	r3, [r2, r3]
 8008ace:	fa21 f303 	lsr.w	r3, r1, r3
 8008ad2:	4a09      	ldr	r2, [pc, #36]	; (8008af8 <HAL_RCC_ClockConfig+0x1d0>)
 8008ad4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8008ad6:	4b09      	ldr	r3, [pc, #36]	; (8008afc <HAL_RCC_ClockConfig+0x1d4>)
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	4618      	mov	r0, r3
 8008adc:	f7fc fb48 	bl	8005170 <HAL_InitTick>

  return HAL_OK;
 8008ae0:	2300      	movs	r3, #0
}
 8008ae2:	4618      	mov	r0, r3
 8008ae4:	3718      	adds	r7, #24
 8008ae6:	46bd      	mov	sp, r7
 8008ae8:	bd80      	pop	{r7, pc}
 8008aea:	bf00      	nop
 8008aec:	40023c00 	.word	0x40023c00
 8008af0:	40023800 	.word	0x40023800
 8008af4:	08013010 	.word	0x08013010
 8008af8:	20000024 	.word	0x20000024
 8008afc:	20000028 	.word	0x20000028

08008b00 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M3 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8008b00:	b480      	push	{r7}
 8008b02:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 8008b04:	4b03      	ldr	r3, [pc, #12]	; (8008b14 <HAL_RCC_EnableCSS+0x14>)
 8008b06:	2201      	movs	r2, #1
 8008b08:	601a      	str	r2, [r3, #0]
}
 8008b0a:	bf00      	nop
 8008b0c:	46bd      	mov	sp, r7
 8008b0e:	bc80      	pop	{r7}
 8008b10:	4770      	bx	lr
 8008b12:	bf00      	nop
 8008b14:	4247004c 	.word	0x4247004c

08008b18 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008b18:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8008b1c:	b084      	sub	sp, #16
 8008b1e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8008b20:	2300      	movs	r3, #0
 8008b22:	607b      	str	r3, [r7, #4]
 8008b24:	2300      	movs	r3, #0
 8008b26:	60fb      	str	r3, [r7, #12]
 8008b28:	2300      	movs	r3, #0
 8008b2a:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8008b2c:	2300      	movs	r3, #0
 8008b2e:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008b30:	4b67      	ldr	r3, [pc, #412]	; (8008cd0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8008b32:	689b      	ldr	r3, [r3, #8]
 8008b34:	f003 030c 	and.w	r3, r3, #12
 8008b38:	2b08      	cmp	r3, #8
 8008b3a:	d00d      	beq.n	8008b58 <HAL_RCC_GetSysClockFreq+0x40>
 8008b3c:	2b08      	cmp	r3, #8
 8008b3e:	f200 80bd 	bhi.w	8008cbc <HAL_RCC_GetSysClockFreq+0x1a4>
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	d002      	beq.n	8008b4c <HAL_RCC_GetSysClockFreq+0x34>
 8008b46:	2b04      	cmp	r3, #4
 8008b48:	d003      	beq.n	8008b52 <HAL_RCC_GetSysClockFreq+0x3a>
 8008b4a:	e0b7      	b.n	8008cbc <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008b4c:	4b61      	ldr	r3, [pc, #388]	; (8008cd4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8008b4e:	60bb      	str	r3, [r7, #8]
       break;
 8008b50:	e0b7      	b.n	8008cc2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8008b52:	4b60      	ldr	r3, [pc, #384]	; (8008cd4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8008b54:	60bb      	str	r3, [r7, #8]
      break;
 8008b56:	e0b4      	b.n	8008cc2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008b58:	4b5d      	ldr	r3, [pc, #372]	; (8008cd0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8008b5a:	685b      	ldr	r3, [r3, #4]
 8008b5c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008b60:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8008b62:	4b5b      	ldr	r3, [pc, #364]	; (8008cd0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8008b64:	685b      	ldr	r3, [r3, #4]
 8008b66:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d04d      	beq.n	8008c0a <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008b6e:	4b58      	ldr	r3, [pc, #352]	; (8008cd0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8008b70:	685b      	ldr	r3, [r3, #4]
 8008b72:	099b      	lsrs	r3, r3, #6
 8008b74:	461a      	mov	r2, r3
 8008b76:	f04f 0300 	mov.w	r3, #0
 8008b7a:	f240 10ff 	movw	r0, #511	; 0x1ff
 8008b7e:	f04f 0100 	mov.w	r1, #0
 8008b82:	ea02 0800 	and.w	r8, r2, r0
 8008b86:	ea03 0901 	and.w	r9, r3, r1
 8008b8a:	4640      	mov	r0, r8
 8008b8c:	4649      	mov	r1, r9
 8008b8e:	f04f 0200 	mov.w	r2, #0
 8008b92:	f04f 0300 	mov.w	r3, #0
 8008b96:	014b      	lsls	r3, r1, #5
 8008b98:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8008b9c:	0142      	lsls	r2, r0, #5
 8008b9e:	4610      	mov	r0, r2
 8008ba0:	4619      	mov	r1, r3
 8008ba2:	ebb0 0008 	subs.w	r0, r0, r8
 8008ba6:	eb61 0109 	sbc.w	r1, r1, r9
 8008baa:	f04f 0200 	mov.w	r2, #0
 8008bae:	f04f 0300 	mov.w	r3, #0
 8008bb2:	018b      	lsls	r3, r1, #6
 8008bb4:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8008bb8:	0182      	lsls	r2, r0, #6
 8008bba:	1a12      	subs	r2, r2, r0
 8008bbc:	eb63 0301 	sbc.w	r3, r3, r1
 8008bc0:	f04f 0000 	mov.w	r0, #0
 8008bc4:	f04f 0100 	mov.w	r1, #0
 8008bc8:	00d9      	lsls	r1, r3, #3
 8008bca:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008bce:	00d0      	lsls	r0, r2, #3
 8008bd0:	4602      	mov	r2, r0
 8008bd2:	460b      	mov	r3, r1
 8008bd4:	eb12 0208 	adds.w	r2, r2, r8
 8008bd8:	eb43 0309 	adc.w	r3, r3, r9
 8008bdc:	f04f 0000 	mov.w	r0, #0
 8008be0:	f04f 0100 	mov.w	r1, #0
 8008be4:	0299      	lsls	r1, r3, #10
 8008be6:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8008bea:	0290      	lsls	r0, r2, #10
 8008bec:	4602      	mov	r2, r0
 8008bee:	460b      	mov	r3, r1
 8008bf0:	4610      	mov	r0, r2
 8008bf2:	4619      	mov	r1, r3
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	461a      	mov	r2, r3
 8008bf8:	f04f 0300 	mov.w	r3, #0
 8008bfc:	f7f8 fb00 	bl	8001200 <__aeabi_uldivmod>
 8008c00:	4602      	mov	r2, r0
 8008c02:	460b      	mov	r3, r1
 8008c04:	4613      	mov	r3, r2
 8008c06:	60fb      	str	r3, [r7, #12]
 8008c08:	e04a      	b.n	8008ca0 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008c0a:	4b31      	ldr	r3, [pc, #196]	; (8008cd0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8008c0c:	685b      	ldr	r3, [r3, #4]
 8008c0e:	099b      	lsrs	r3, r3, #6
 8008c10:	461a      	mov	r2, r3
 8008c12:	f04f 0300 	mov.w	r3, #0
 8008c16:	f240 10ff 	movw	r0, #511	; 0x1ff
 8008c1a:	f04f 0100 	mov.w	r1, #0
 8008c1e:	ea02 0400 	and.w	r4, r2, r0
 8008c22:	ea03 0501 	and.w	r5, r3, r1
 8008c26:	4620      	mov	r0, r4
 8008c28:	4629      	mov	r1, r5
 8008c2a:	f04f 0200 	mov.w	r2, #0
 8008c2e:	f04f 0300 	mov.w	r3, #0
 8008c32:	014b      	lsls	r3, r1, #5
 8008c34:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8008c38:	0142      	lsls	r2, r0, #5
 8008c3a:	4610      	mov	r0, r2
 8008c3c:	4619      	mov	r1, r3
 8008c3e:	1b00      	subs	r0, r0, r4
 8008c40:	eb61 0105 	sbc.w	r1, r1, r5
 8008c44:	f04f 0200 	mov.w	r2, #0
 8008c48:	f04f 0300 	mov.w	r3, #0
 8008c4c:	018b      	lsls	r3, r1, #6
 8008c4e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8008c52:	0182      	lsls	r2, r0, #6
 8008c54:	1a12      	subs	r2, r2, r0
 8008c56:	eb63 0301 	sbc.w	r3, r3, r1
 8008c5a:	f04f 0000 	mov.w	r0, #0
 8008c5e:	f04f 0100 	mov.w	r1, #0
 8008c62:	00d9      	lsls	r1, r3, #3
 8008c64:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008c68:	00d0      	lsls	r0, r2, #3
 8008c6a:	4602      	mov	r2, r0
 8008c6c:	460b      	mov	r3, r1
 8008c6e:	1912      	adds	r2, r2, r4
 8008c70:	eb45 0303 	adc.w	r3, r5, r3
 8008c74:	f04f 0000 	mov.w	r0, #0
 8008c78:	f04f 0100 	mov.w	r1, #0
 8008c7c:	0299      	lsls	r1, r3, #10
 8008c7e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8008c82:	0290      	lsls	r0, r2, #10
 8008c84:	4602      	mov	r2, r0
 8008c86:	460b      	mov	r3, r1
 8008c88:	4610      	mov	r0, r2
 8008c8a:	4619      	mov	r1, r3
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	461a      	mov	r2, r3
 8008c90:	f04f 0300 	mov.w	r3, #0
 8008c94:	f7f8 fab4 	bl	8001200 <__aeabi_uldivmod>
 8008c98:	4602      	mov	r2, r0
 8008c9a:	460b      	mov	r3, r1
 8008c9c:	4613      	mov	r3, r2
 8008c9e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8008ca0:	4b0b      	ldr	r3, [pc, #44]	; (8008cd0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8008ca2:	685b      	ldr	r3, [r3, #4]
 8008ca4:	0c1b      	lsrs	r3, r3, #16
 8008ca6:	f003 0303 	and.w	r3, r3, #3
 8008caa:	3301      	adds	r3, #1
 8008cac:	005b      	lsls	r3, r3, #1
 8008cae:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8008cb0:	68fa      	ldr	r2, [r7, #12]
 8008cb2:	683b      	ldr	r3, [r7, #0]
 8008cb4:	fbb2 f3f3 	udiv	r3, r2, r3
 8008cb8:	60bb      	str	r3, [r7, #8]
      break;
 8008cba:	e002      	b.n	8008cc2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008cbc:	4b05      	ldr	r3, [pc, #20]	; (8008cd4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8008cbe:	60bb      	str	r3, [r7, #8]
      break;
 8008cc0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008cc2:	68bb      	ldr	r3, [r7, #8]
}
 8008cc4:	4618      	mov	r0, r3
 8008cc6:	3710      	adds	r7, #16
 8008cc8:	46bd      	mov	sp, r7
 8008cca:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8008cce:	bf00      	nop
 8008cd0:	40023800 	.word	0x40023800
 8008cd4:	00f42400 	.word	0x00f42400

08008cd8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008cd8:	b480      	push	{r7}
 8008cda:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008cdc:	4b02      	ldr	r3, [pc, #8]	; (8008ce8 <HAL_RCC_GetHCLKFreq+0x10>)
 8008cde:	681b      	ldr	r3, [r3, #0]
}
 8008ce0:	4618      	mov	r0, r3
 8008ce2:	46bd      	mov	sp, r7
 8008ce4:	bc80      	pop	{r7}
 8008ce6:	4770      	bx	lr
 8008ce8:	20000024 	.word	0x20000024

08008cec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008cec:	b580      	push	{r7, lr}
 8008cee:	b082      	sub	sp, #8
 8008cf0:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> POSITION_VAL(RCC_CFGR_PPRE1)]);
 8008cf2:	f7ff fff1 	bl	8008cd8 <HAL_RCC_GetHCLKFreq>
 8008cf6:	4601      	mov	r1, r0
 8008cf8:	4b0b      	ldr	r3, [pc, #44]	; (8008d28 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8008cfa:	689b      	ldr	r3, [r3, #8]
 8008cfc:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8008d00:	f44f 52e0 	mov.w	r2, #7168	; 0x1c00
 8008d04:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008d06:	687a      	ldr	r2, [r7, #4]
 8008d08:	fa92 f2a2 	rbit	r2, r2
 8008d0c:	603a      	str	r2, [r7, #0]
  return result;
 8008d0e:	683a      	ldr	r2, [r7, #0]
 8008d10:	fab2 f282 	clz	r2, r2
 8008d14:	b2d2      	uxtb	r2, r2
 8008d16:	40d3      	lsrs	r3, r2
 8008d18:	4a04      	ldr	r2, [pc, #16]	; (8008d2c <HAL_RCC_GetPCLK1Freq+0x40>)
 8008d1a:	5cd3      	ldrb	r3, [r2, r3]
 8008d1c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8008d20:	4618      	mov	r0, r3
 8008d22:	3708      	adds	r7, #8
 8008d24:	46bd      	mov	sp, r7
 8008d26:	bd80      	pop	{r7, pc}
 8008d28:	40023800 	.word	0x40023800
 8008d2c:	08013020 	.word	0x08013020

08008d30 <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 8008d30:	b580      	push	{r7, lr}
 8008d32:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 8008d34:	4b06      	ldr	r3, [pc, #24]	; (8008d50 <HAL_RCC_NMI_IRQHandler+0x20>)
 8008d36:	68db      	ldr	r3, [r3, #12]
 8008d38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008d3c:	2b80      	cmp	r3, #128	; 0x80
 8008d3e:	d104      	bne.n	8008d4a <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 8008d40:	f000 f80a 	bl	8008d58 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 8008d44:	4b03      	ldr	r3, [pc, #12]	; (8008d54 <HAL_RCC_NMI_IRQHandler+0x24>)
 8008d46:	2280      	movs	r2, #128	; 0x80
 8008d48:	701a      	strb	r2, [r3, #0]
  }
}
 8008d4a:	bf00      	nop
 8008d4c:	bd80      	pop	{r7, pc}
 8008d4e:	bf00      	nop
 8008d50:	40023800 	.word	0x40023800
 8008d54:	4002380e 	.word	0x4002380e

08008d58 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval None
  */
__weak void HAL_RCC_CSSCallback(void)
{
 8008d58:	b480      	push	{r7}
 8008d5a:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback could be implemented in the user file
   */
}
 8008d5c:	bf00      	nop
 8008d5e:	46bd      	mov	sp, r7
 8008d60:	bc80      	pop	{r7}
 8008d62:	4770      	bx	lr

08008d64 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008d64:	b580      	push	{r7, lr}
 8008d66:	b082      	sub	sp, #8
 8008d68:	af00      	add	r7, sp, #0
 8008d6a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	2b00      	cmp	r3, #0
 8008d70:	d101      	bne.n	8008d76 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008d72:	2301      	movs	r3, #1
 8008d74:	e041      	b.n	8008dfa <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008d7c:	b2db      	uxtb	r3, r3
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	d106      	bne.n	8008d90 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	2200      	movs	r2, #0
 8008d86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008d8a:	6878      	ldr	r0, [r7, #4]
 8008d8c:	f7fb ffbe 	bl	8004d0c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	2202      	movs	r2, #2
 8008d94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	681a      	ldr	r2, [r3, #0]
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	3304      	adds	r3, #4
 8008da0:	4619      	mov	r1, r3
 8008da2:	4610      	mov	r0, r2
 8008da4:	f000 fc04 	bl	80095b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	2201      	movs	r2, #1
 8008dac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	2201      	movs	r2, #1
 8008db4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	2201      	movs	r2, #1
 8008dbc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	2201      	movs	r2, #1
 8008dc4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	2201      	movs	r2, #1
 8008dcc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	2201      	movs	r2, #1
 8008dd4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	2201      	movs	r2, #1
 8008ddc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	2201      	movs	r2, #1
 8008de4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	2201      	movs	r2, #1
 8008dec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	2201      	movs	r2, #1
 8008df4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008df8:	2300      	movs	r3, #0
}
 8008dfa:	4618      	mov	r0, r3
 8008dfc:	3708      	adds	r7, #8
 8008dfe:	46bd      	mov	sp, r7
 8008e00:	bd80      	pop	{r7, pc}
	...

08008e04 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8008e04:	b480      	push	{r7}
 8008e06:	b085      	sub	sp, #20
 8008e08:	af00      	add	r7, sp, #0
 8008e0a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008e12:	b2db      	uxtb	r3, r3
 8008e14:	2b01      	cmp	r3, #1
 8008e16:	d001      	beq.n	8008e1c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8008e18:	2301      	movs	r3, #1
 8008e1a:	e046      	b.n	8008eaa <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	2202      	movs	r2, #2
 8008e20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	4a22      	ldr	r2, [pc, #136]	; (8008eb4 <HAL_TIM_Base_Start+0xb0>)
 8008e2a:	4293      	cmp	r3, r2
 8008e2c:	d022      	beq.n	8008e74 <HAL_TIM_Base_Start+0x70>
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008e36:	d01d      	beq.n	8008e74 <HAL_TIM_Base_Start+0x70>
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	4a1e      	ldr	r2, [pc, #120]	; (8008eb8 <HAL_TIM_Base_Start+0xb4>)
 8008e3e:	4293      	cmp	r3, r2
 8008e40:	d018      	beq.n	8008e74 <HAL_TIM_Base_Start+0x70>
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	4a1d      	ldr	r2, [pc, #116]	; (8008ebc <HAL_TIM_Base_Start+0xb8>)
 8008e48:	4293      	cmp	r3, r2
 8008e4a:	d013      	beq.n	8008e74 <HAL_TIM_Base_Start+0x70>
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	4a1b      	ldr	r2, [pc, #108]	; (8008ec0 <HAL_TIM_Base_Start+0xbc>)
 8008e52:	4293      	cmp	r3, r2
 8008e54:	d00e      	beq.n	8008e74 <HAL_TIM_Base_Start+0x70>
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	4a1a      	ldr	r2, [pc, #104]	; (8008ec4 <HAL_TIM_Base_Start+0xc0>)
 8008e5c:	4293      	cmp	r3, r2
 8008e5e:	d009      	beq.n	8008e74 <HAL_TIM_Base_Start+0x70>
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	4a18      	ldr	r2, [pc, #96]	; (8008ec8 <HAL_TIM_Base_Start+0xc4>)
 8008e66:	4293      	cmp	r3, r2
 8008e68:	d004      	beq.n	8008e74 <HAL_TIM_Base_Start+0x70>
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	4a17      	ldr	r2, [pc, #92]	; (8008ecc <HAL_TIM_Base_Start+0xc8>)
 8008e70:	4293      	cmp	r3, r2
 8008e72:	d111      	bne.n	8008e98 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	689b      	ldr	r3, [r3, #8]
 8008e7a:	f003 0307 	and.w	r3, r3, #7
 8008e7e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008e80:	68fb      	ldr	r3, [r7, #12]
 8008e82:	2b06      	cmp	r3, #6
 8008e84:	d010      	beq.n	8008ea8 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	681a      	ldr	r2, [r3, #0]
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	f042 0201 	orr.w	r2, r2, #1
 8008e94:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008e96:	e007      	b.n	8008ea8 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	681a      	ldr	r2, [r3, #0]
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	f042 0201 	orr.w	r2, r2, #1
 8008ea6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008ea8:	2300      	movs	r3, #0
}
 8008eaa:	4618      	mov	r0, r3
 8008eac:	3714      	adds	r7, #20
 8008eae:	46bd      	mov	sp, r7
 8008eb0:	bc80      	pop	{r7}
 8008eb2:	4770      	bx	lr
 8008eb4:	40010000 	.word	0x40010000
 8008eb8:	40000400 	.word	0x40000400
 8008ebc:	40000800 	.word	0x40000800
 8008ec0:	40000c00 	.word	0x40000c00
 8008ec4:	40010400 	.word	0x40010400
 8008ec8:	40014000 	.word	0x40014000
 8008ecc:	40001800 	.word	0x40001800

08008ed0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008ed0:	b480      	push	{r7}
 8008ed2:	b085      	sub	sp, #20
 8008ed4:	af00      	add	r7, sp, #0
 8008ed6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008ede:	b2db      	uxtb	r3, r3
 8008ee0:	2b01      	cmp	r3, #1
 8008ee2:	d001      	beq.n	8008ee8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008ee4:	2301      	movs	r3, #1
 8008ee6:	e04e      	b.n	8008f86 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	2202      	movs	r2, #2
 8008eec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	68da      	ldr	r2, [r3, #12]
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	f042 0201 	orr.w	r2, r2, #1
 8008efe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	4a22      	ldr	r2, [pc, #136]	; (8008f90 <HAL_TIM_Base_Start_IT+0xc0>)
 8008f06:	4293      	cmp	r3, r2
 8008f08:	d022      	beq.n	8008f50 <HAL_TIM_Base_Start_IT+0x80>
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	681b      	ldr	r3, [r3, #0]
 8008f0e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008f12:	d01d      	beq.n	8008f50 <HAL_TIM_Base_Start_IT+0x80>
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	4a1e      	ldr	r2, [pc, #120]	; (8008f94 <HAL_TIM_Base_Start_IT+0xc4>)
 8008f1a:	4293      	cmp	r3, r2
 8008f1c:	d018      	beq.n	8008f50 <HAL_TIM_Base_Start_IT+0x80>
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	4a1d      	ldr	r2, [pc, #116]	; (8008f98 <HAL_TIM_Base_Start_IT+0xc8>)
 8008f24:	4293      	cmp	r3, r2
 8008f26:	d013      	beq.n	8008f50 <HAL_TIM_Base_Start_IT+0x80>
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	4a1b      	ldr	r2, [pc, #108]	; (8008f9c <HAL_TIM_Base_Start_IT+0xcc>)
 8008f2e:	4293      	cmp	r3, r2
 8008f30:	d00e      	beq.n	8008f50 <HAL_TIM_Base_Start_IT+0x80>
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	4a1a      	ldr	r2, [pc, #104]	; (8008fa0 <HAL_TIM_Base_Start_IT+0xd0>)
 8008f38:	4293      	cmp	r3, r2
 8008f3a:	d009      	beq.n	8008f50 <HAL_TIM_Base_Start_IT+0x80>
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	4a18      	ldr	r2, [pc, #96]	; (8008fa4 <HAL_TIM_Base_Start_IT+0xd4>)
 8008f42:	4293      	cmp	r3, r2
 8008f44:	d004      	beq.n	8008f50 <HAL_TIM_Base_Start_IT+0x80>
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	4a17      	ldr	r2, [pc, #92]	; (8008fa8 <HAL_TIM_Base_Start_IT+0xd8>)
 8008f4c:	4293      	cmp	r3, r2
 8008f4e:	d111      	bne.n	8008f74 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	689b      	ldr	r3, [r3, #8]
 8008f56:	f003 0307 	and.w	r3, r3, #7
 8008f5a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008f5c:	68fb      	ldr	r3, [r7, #12]
 8008f5e:	2b06      	cmp	r3, #6
 8008f60:	d010      	beq.n	8008f84 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	681b      	ldr	r3, [r3, #0]
 8008f66:	681a      	ldr	r2, [r3, #0]
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	f042 0201 	orr.w	r2, r2, #1
 8008f70:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008f72:	e007      	b.n	8008f84 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	681a      	ldr	r2, [r3, #0]
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	f042 0201 	orr.w	r2, r2, #1
 8008f82:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008f84:	2300      	movs	r3, #0
}
 8008f86:	4618      	mov	r0, r3
 8008f88:	3714      	adds	r7, #20
 8008f8a:	46bd      	mov	sp, r7
 8008f8c:	bc80      	pop	{r7}
 8008f8e:	4770      	bx	lr
 8008f90:	40010000 	.word	0x40010000
 8008f94:	40000400 	.word	0x40000400
 8008f98:	40000800 	.word	0x40000800
 8008f9c:	40000c00 	.word	0x40000c00
 8008fa0:	40010400 	.word	0x40010400
 8008fa4:	40014000 	.word	0x40014000
 8008fa8:	40001800 	.word	0x40001800

08008fac <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008fac:	b580      	push	{r7, lr}
 8008fae:	b082      	sub	sp, #8
 8008fb0:	af00      	add	r7, sp, #0
 8008fb2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	2b00      	cmp	r3, #0
 8008fb8:	d101      	bne.n	8008fbe <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008fba:	2301      	movs	r3, #1
 8008fbc:	e041      	b.n	8009042 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008fc4:	b2db      	uxtb	r3, r3
 8008fc6:	2b00      	cmp	r3, #0
 8008fc8:	d106      	bne.n	8008fd8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	2200      	movs	r2, #0
 8008fce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008fd2:	6878      	ldr	r0, [r7, #4]
 8008fd4:	f7fb fe64 	bl	8004ca0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	2202      	movs	r2, #2
 8008fdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	681a      	ldr	r2, [r3, #0]
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	3304      	adds	r3, #4
 8008fe8:	4619      	mov	r1, r3
 8008fea:	4610      	mov	r0, r2
 8008fec:	f000 fae0 	bl	80095b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	2201      	movs	r2, #1
 8008ff4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	2201      	movs	r2, #1
 8008ffc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	2201      	movs	r2, #1
 8009004:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	2201      	movs	r2, #1
 800900c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	2201      	movs	r2, #1
 8009014:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	2201      	movs	r2, #1
 800901c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	2201      	movs	r2, #1
 8009024:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	2201      	movs	r2, #1
 800902c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	2201      	movs	r2, #1
 8009034:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	2201      	movs	r2, #1
 800903c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009040:	2300      	movs	r3, #0
}
 8009042:	4618      	mov	r0, r3
 8009044:	3708      	adds	r7, #8
 8009046:	46bd      	mov	sp, r7
 8009048:	bd80      	pop	{r7, pc}
	...

0800904c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800904c:	b580      	push	{r7, lr}
 800904e:	b084      	sub	sp, #16
 8009050:	af00      	add	r7, sp, #0
 8009052:	6078      	str	r0, [r7, #4]
 8009054:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8009056:	683b      	ldr	r3, [r7, #0]
 8009058:	2b00      	cmp	r3, #0
 800905a:	d109      	bne.n	8009070 <HAL_TIM_PWM_Start+0x24>
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009062:	b2db      	uxtb	r3, r3
 8009064:	2b01      	cmp	r3, #1
 8009066:	bf14      	ite	ne
 8009068:	2301      	movne	r3, #1
 800906a:	2300      	moveq	r3, #0
 800906c:	b2db      	uxtb	r3, r3
 800906e:	e022      	b.n	80090b6 <HAL_TIM_PWM_Start+0x6a>
 8009070:	683b      	ldr	r3, [r7, #0]
 8009072:	2b04      	cmp	r3, #4
 8009074:	d109      	bne.n	800908a <HAL_TIM_PWM_Start+0x3e>
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800907c:	b2db      	uxtb	r3, r3
 800907e:	2b01      	cmp	r3, #1
 8009080:	bf14      	ite	ne
 8009082:	2301      	movne	r3, #1
 8009084:	2300      	moveq	r3, #0
 8009086:	b2db      	uxtb	r3, r3
 8009088:	e015      	b.n	80090b6 <HAL_TIM_PWM_Start+0x6a>
 800908a:	683b      	ldr	r3, [r7, #0]
 800908c:	2b08      	cmp	r3, #8
 800908e:	d109      	bne.n	80090a4 <HAL_TIM_PWM_Start+0x58>
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009096:	b2db      	uxtb	r3, r3
 8009098:	2b01      	cmp	r3, #1
 800909a:	bf14      	ite	ne
 800909c:	2301      	movne	r3, #1
 800909e:	2300      	moveq	r3, #0
 80090a0:	b2db      	uxtb	r3, r3
 80090a2:	e008      	b.n	80090b6 <HAL_TIM_PWM_Start+0x6a>
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80090aa:	b2db      	uxtb	r3, r3
 80090ac:	2b01      	cmp	r3, #1
 80090ae:	bf14      	ite	ne
 80090b0:	2301      	movne	r3, #1
 80090b2:	2300      	moveq	r3, #0
 80090b4:	b2db      	uxtb	r3, r3
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	d001      	beq.n	80090be <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80090ba:	2301      	movs	r3, #1
 80090bc:	e07c      	b.n	80091b8 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80090be:	683b      	ldr	r3, [r7, #0]
 80090c0:	2b00      	cmp	r3, #0
 80090c2:	d104      	bne.n	80090ce <HAL_TIM_PWM_Start+0x82>
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	2202      	movs	r2, #2
 80090c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80090cc:	e013      	b.n	80090f6 <HAL_TIM_PWM_Start+0xaa>
 80090ce:	683b      	ldr	r3, [r7, #0]
 80090d0:	2b04      	cmp	r3, #4
 80090d2:	d104      	bne.n	80090de <HAL_TIM_PWM_Start+0x92>
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	2202      	movs	r2, #2
 80090d8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80090dc:	e00b      	b.n	80090f6 <HAL_TIM_PWM_Start+0xaa>
 80090de:	683b      	ldr	r3, [r7, #0]
 80090e0:	2b08      	cmp	r3, #8
 80090e2:	d104      	bne.n	80090ee <HAL_TIM_PWM_Start+0xa2>
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	2202      	movs	r2, #2
 80090e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80090ec:	e003      	b.n	80090f6 <HAL_TIM_PWM_Start+0xaa>
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	2202      	movs	r2, #2
 80090f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	2201      	movs	r2, #1
 80090fc:	6839      	ldr	r1, [r7, #0]
 80090fe:	4618      	mov	r0, r3
 8009100:	f000 fca0 	bl	8009a44 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	4a2d      	ldr	r2, [pc, #180]	; (80091c0 <HAL_TIM_PWM_Start+0x174>)
 800910a:	4293      	cmp	r3, r2
 800910c:	d004      	beq.n	8009118 <HAL_TIM_PWM_Start+0xcc>
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	4a2c      	ldr	r2, [pc, #176]	; (80091c4 <HAL_TIM_PWM_Start+0x178>)
 8009114:	4293      	cmp	r3, r2
 8009116:	d101      	bne.n	800911c <HAL_TIM_PWM_Start+0xd0>
 8009118:	2301      	movs	r3, #1
 800911a:	e000      	b.n	800911e <HAL_TIM_PWM_Start+0xd2>
 800911c:	2300      	movs	r3, #0
 800911e:	2b00      	cmp	r3, #0
 8009120:	d007      	beq.n	8009132 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009130:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	4a22      	ldr	r2, [pc, #136]	; (80091c0 <HAL_TIM_PWM_Start+0x174>)
 8009138:	4293      	cmp	r3, r2
 800913a:	d022      	beq.n	8009182 <HAL_TIM_PWM_Start+0x136>
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009144:	d01d      	beq.n	8009182 <HAL_TIM_PWM_Start+0x136>
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	4a1f      	ldr	r2, [pc, #124]	; (80091c8 <HAL_TIM_PWM_Start+0x17c>)
 800914c:	4293      	cmp	r3, r2
 800914e:	d018      	beq.n	8009182 <HAL_TIM_PWM_Start+0x136>
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	4a1d      	ldr	r2, [pc, #116]	; (80091cc <HAL_TIM_PWM_Start+0x180>)
 8009156:	4293      	cmp	r3, r2
 8009158:	d013      	beq.n	8009182 <HAL_TIM_PWM_Start+0x136>
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	4a1c      	ldr	r2, [pc, #112]	; (80091d0 <HAL_TIM_PWM_Start+0x184>)
 8009160:	4293      	cmp	r3, r2
 8009162:	d00e      	beq.n	8009182 <HAL_TIM_PWM_Start+0x136>
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	4a16      	ldr	r2, [pc, #88]	; (80091c4 <HAL_TIM_PWM_Start+0x178>)
 800916a:	4293      	cmp	r3, r2
 800916c:	d009      	beq.n	8009182 <HAL_TIM_PWM_Start+0x136>
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	4a18      	ldr	r2, [pc, #96]	; (80091d4 <HAL_TIM_PWM_Start+0x188>)
 8009174:	4293      	cmp	r3, r2
 8009176:	d004      	beq.n	8009182 <HAL_TIM_PWM_Start+0x136>
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	4a16      	ldr	r2, [pc, #88]	; (80091d8 <HAL_TIM_PWM_Start+0x18c>)
 800917e:	4293      	cmp	r3, r2
 8009180:	d111      	bne.n	80091a6 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	689b      	ldr	r3, [r3, #8]
 8009188:	f003 0307 	and.w	r3, r3, #7
 800918c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800918e:	68fb      	ldr	r3, [r7, #12]
 8009190:	2b06      	cmp	r3, #6
 8009192:	d010      	beq.n	80091b6 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	681a      	ldr	r2, [r3, #0]
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	f042 0201 	orr.w	r2, r2, #1
 80091a2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80091a4:	e007      	b.n	80091b6 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	681a      	ldr	r2, [r3, #0]
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	f042 0201 	orr.w	r2, r2, #1
 80091b4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80091b6:	2300      	movs	r3, #0
}
 80091b8:	4618      	mov	r0, r3
 80091ba:	3710      	adds	r7, #16
 80091bc:	46bd      	mov	sp, r7
 80091be:	bd80      	pop	{r7, pc}
 80091c0:	40010000 	.word	0x40010000
 80091c4:	40010400 	.word	0x40010400
 80091c8:	40000400 	.word	0x40000400
 80091cc:	40000800 	.word	0x40000800
 80091d0:	40000c00 	.word	0x40000c00
 80091d4:	40014000 	.word	0x40014000
 80091d8:	40001800 	.word	0x40001800

080091dc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80091dc:	b580      	push	{r7, lr}
 80091de:	b082      	sub	sp, #8
 80091e0:	af00      	add	r7, sp, #0
 80091e2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	691b      	ldr	r3, [r3, #16]
 80091ea:	f003 0302 	and.w	r3, r3, #2
 80091ee:	2b02      	cmp	r3, #2
 80091f0:	d122      	bne.n	8009238 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	68db      	ldr	r3, [r3, #12]
 80091f8:	f003 0302 	and.w	r3, r3, #2
 80091fc:	2b02      	cmp	r3, #2
 80091fe:	d11b      	bne.n	8009238 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	f06f 0202 	mvn.w	r2, #2
 8009208:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	2201      	movs	r2, #1
 800920e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	699b      	ldr	r3, [r3, #24]
 8009216:	f003 0303 	and.w	r3, r3, #3
 800921a:	2b00      	cmp	r3, #0
 800921c:	d003      	beq.n	8009226 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800921e:	6878      	ldr	r0, [r7, #4]
 8009220:	f000 f9ab 	bl	800957a <HAL_TIM_IC_CaptureCallback>
 8009224:	e005      	b.n	8009232 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009226:	6878      	ldr	r0, [r7, #4]
 8009228:	f000 f99e 	bl	8009568 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800922c:	6878      	ldr	r0, [r7, #4]
 800922e:	f000 f9ad 	bl	800958c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	2200      	movs	r2, #0
 8009236:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	691b      	ldr	r3, [r3, #16]
 800923e:	f003 0304 	and.w	r3, r3, #4
 8009242:	2b04      	cmp	r3, #4
 8009244:	d122      	bne.n	800928c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	68db      	ldr	r3, [r3, #12]
 800924c:	f003 0304 	and.w	r3, r3, #4
 8009250:	2b04      	cmp	r3, #4
 8009252:	d11b      	bne.n	800928c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	681b      	ldr	r3, [r3, #0]
 8009258:	f06f 0204 	mvn.w	r2, #4
 800925c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	2202      	movs	r2, #2
 8009262:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	699b      	ldr	r3, [r3, #24]
 800926a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800926e:	2b00      	cmp	r3, #0
 8009270:	d003      	beq.n	800927a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009272:	6878      	ldr	r0, [r7, #4]
 8009274:	f000 f981 	bl	800957a <HAL_TIM_IC_CaptureCallback>
 8009278:	e005      	b.n	8009286 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800927a:	6878      	ldr	r0, [r7, #4]
 800927c:	f000 f974 	bl	8009568 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009280:	6878      	ldr	r0, [r7, #4]
 8009282:	f000 f983 	bl	800958c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	2200      	movs	r2, #0
 800928a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	691b      	ldr	r3, [r3, #16]
 8009292:	f003 0308 	and.w	r3, r3, #8
 8009296:	2b08      	cmp	r3, #8
 8009298:	d122      	bne.n	80092e0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	681b      	ldr	r3, [r3, #0]
 800929e:	68db      	ldr	r3, [r3, #12]
 80092a0:	f003 0308 	and.w	r3, r3, #8
 80092a4:	2b08      	cmp	r3, #8
 80092a6:	d11b      	bne.n	80092e0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	f06f 0208 	mvn.w	r2, #8
 80092b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	2204      	movs	r2, #4
 80092b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	69db      	ldr	r3, [r3, #28]
 80092be:	f003 0303 	and.w	r3, r3, #3
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	d003      	beq.n	80092ce <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80092c6:	6878      	ldr	r0, [r7, #4]
 80092c8:	f000 f957 	bl	800957a <HAL_TIM_IC_CaptureCallback>
 80092cc:	e005      	b.n	80092da <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80092ce:	6878      	ldr	r0, [r7, #4]
 80092d0:	f000 f94a 	bl	8009568 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80092d4:	6878      	ldr	r0, [r7, #4]
 80092d6:	f000 f959 	bl	800958c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	2200      	movs	r2, #0
 80092de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	691b      	ldr	r3, [r3, #16]
 80092e6:	f003 0310 	and.w	r3, r3, #16
 80092ea:	2b10      	cmp	r3, #16
 80092ec:	d122      	bne.n	8009334 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	68db      	ldr	r3, [r3, #12]
 80092f4:	f003 0310 	and.w	r3, r3, #16
 80092f8:	2b10      	cmp	r3, #16
 80092fa:	d11b      	bne.n	8009334 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	f06f 0210 	mvn.w	r2, #16
 8009304:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	2208      	movs	r2, #8
 800930a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	69db      	ldr	r3, [r3, #28]
 8009312:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009316:	2b00      	cmp	r3, #0
 8009318:	d003      	beq.n	8009322 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800931a:	6878      	ldr	r0, [r7, #4]
 800931c:	f000 f92d 	bl	800957a <HAL_TIM_IC_CaptureCallback>
 8009320:	e005      	b.n	800932e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009322:	6878      	ldr	r0, [r7, #4]
 8009324:	f000 f920 	bl	8009568 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009328:	6878      	ldr	r0, [r7, #4]
 800932a:	f000 f92f 	bl	800958c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	2200      	movs	r2, #0
 8009332:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	681b      	ldr	r3, [r3, #0]
 8009338:	691b      	ldr	r3, [r3, #16]
 800933a:	f003 0301 	and.w	r3, r3, #1
 800933e:	2b01      	cmp	r3, #1
 8009340:	d10e      	bne.n	8009360 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	681b      	ldr	r3, [r3, #0]
 8009346:	68db      	ldr	r3, [r3, #12]
 8009348:	f003 0301 	and.w	r3, r3, #1
 800934c:	2b01      	cmp	r3, #1
 800934e:	d107      	bne.n	8009360 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	f06f 0201 	mvn.w	r2, #1
 8009358:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800935a:	6878      	ldr	r0, [r7, #4]
 800935c:	f7fa ffe2 	bl	8004324 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	691b      	ldr	r3, [r3, #16]
 8009366:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800936a:	2b80      	cmp	r3, #128	; 0x80
 800936c:	d10e      	bne.n	800938c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	68db      	ldr	r3, [r3, #12]
 8009374:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009378:	2b80      	cmp	r3, #128	; 0x80
 800937a:	d107      	bne.n	800938c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8009384:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009386:	6878      	ldr	r0, [r7, #4]
 8009388:	f000 fc03 	bl	8009b92 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	691b      	ldr	r3, [r3, #16]
 8009392:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009396:	2b40      	cmp	r3, #64	; 0x40
 8009398:	d10e      	bne.n	80093b8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	681b      	ldr	r3, [r3, #0]
 800939e:	68db      	ldr	r3, [r3, #12]
 80093a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80093a4:	2b40      	cmp	r3, #64	; 0x40
 80093a6:	d107      	bne.n	80093b8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80093b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80093b2:	6878      	ldr	r0, [r7, #4]
 80093b4:	f000 f8f3 	bl	800959e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	691b      	ldr	r3, [r3, #16]
 80093be:	f003 0320 	and.w	r3, r3, #32
 80093c2:	2b20      	cmp	r3, #32
 80093c4:	d10e      	bne.n	80093e4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	68db      	ldr	r3, [r3, #12]
 80093cc:	f003 0320 	and.w	r3, r3, #32
 80093d0:	2b20      	cmp	r3, #32
 80093d2:	d107      	bne.n	80093e4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	f06f 0220 	mvn.w	r2, #32
 80093dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80093de:	6878      	ldr	r0, [r7, #4]
 80093e0:	f000 fbce 	bl	8009b80 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80093e4:	bf00      	nop
 80093e6:	3708      	adds	r7, #8
 80093e8:	46bd      	mov	sp, r7
 80093ea:	bd80      	pop	{r7, pc}

080093ec <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80093ec:	b580      	push	{r7, lr}
 80093ee:	b084      	sub	sp, #16
 80093f0:	af00      	add	r7, sp, #0
 80093f2:	60f8      	str	r0, [r7, #12]
 80093f4:	60b9      	str	r1, [r7, #8]
 80093f6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80093f8:	68fb      	ldr	r3, [r7, #12]
 80093fa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80093fe:	2b01      	cmp	r3, #1
 8009400:	d101      	bne.n	8009406 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8009402:	2302      	movs	r3, #2
 8009404:	e0ac      	b.n	8009560 <HAL_TIM_PWM_ConfigChannel+0x174>
 8009406:	68fb      	ldr	r3, [r7, #12]
 8009408:	2201      	movs	r2, #1
 800940a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	2b0c      	cmp	r3, #12
 8009412:	f200 809f 	bhi.w	8009554 <HAL_TIM_PWM_ConfigChannel+0x168>
 8009416:	a201      	add	r2, pc, #4	; (adr r2, 800941c <HAL_TIM_PWM_ConfigChannel+0x30>)
 8009418:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800941c:	08009451 	.word	0x08009451
 8009420:	08009555 	.word	0x08009555
 8009424:	08009555 	.word	0x08009555
 8009428:	08009555 	.word	0x08009555
 800942c:	08009491 	.word	0x08009491
 8009430:	08009555 	.word	0x08009555
 8009434:	08009555 	.word	0x08009555
 8009438:	08009555 	.word	0x08009555
 800943c:	080094d3 	.word	0x080094d3
 8009440:	08009555 	.word	0x08009555
 8009444:	08009555 	.word	0x08009555
 8009448:	08009555 	.word	0x08009555
 800944c:	08009513 	.word	0x08009513
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009450:	68fb      	ldr	r3, [r7, #12]
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	68b9      	ldr	r1, [r7, #8]
 8009456:	4618      	mov	r0, r3
 8009458:	f000 f948 	bl	80096ec <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800945c:	68fb      	ldr	r3, [r7, #12]
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	699a      	ldr	r2, [r3, #24]
 8009462:	68fb      	ldr	r3, [r7, #12]
 8009464:	681b      	ldr	r3, [r3, #0]
 8009466:	f042 0208 	orr.w	r2, r2, #8
 800946a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800946c:	68fb      	ldr	r3, [r7, #12]
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	699a      	ldr	r2, [r3, #24]
 8009472:	68fb      	ldr	r3, [r7, #12]
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	f022 0204 	bic.w	r2, r2, #4
 800947a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800947c:	68fb      	ldr	r3, [r7, #12]
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	6999      	ldr	r1, [r3, #24]
 8009482:	68bb      	ldr	r3, [r7, #8]
 8009484:	691a      	ldr	r2, [r3, #16]
 8009486:	68fb      	ldr	r3, [r7, #12]
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	430a      	orrs	r2, r1
 800948c:	619a      	str	r2, [r3, #24]
      break;
 800948e:	e062      	b.n	8009556 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009490:	68fb      	ldr	r3, [r7, #12]
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	68b9      	ldr	r1, [r7, #8]
 8009496:	4618      	mov	r0, r3
 8009498:	f000 f998 	bl	80097cc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800949c:	68fb      	ldr	r3, [r7, #12]
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	699a      	ldr	r2, [r3, #24]
 80094a2:	68fb      	ldr	r3, [r7, #12]
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80094aa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80094ac:	68fb      	ldr	r3, [r7, #12]
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	699a      	ldr	r2, [r3, #24]
 80094b2:	68fb      	ldr	r3, [r7, #12]
 80094b4:	681b      	ldr	r3, [r3, #0]
 80094b6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80094ba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80094bc:	68fb      	ldr	r3, [r7, #12]
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	6999      	ldr	r1, [r3, #24]
 80094c2:	68bb      	ldr	r3, [r7, #8]
 80094c4:	691b      	ldr	r3, [r3, #16]
 80094c6:	021a      	lsls	r2, r3, #8
 80094c8:	68fb      	ldr	r3, [r7, #12]
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	430a      	orrs	r2, r1
 80094ce:	619a      	str	r2, [r3, #24]
      break;
 80094d0:	e041      	b.n	8009556 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80094d2:	68fb      	ldr	r3, [r7, #12]
 80094d4:	681b      	ldr	r3, [r3, #0]
 80094d6:	68b9      	ldr	r1, [r7, #8]
 80094d8:	4618      	mov	r0, r3
 80094da:	f000 f9eb 	bl	80098b4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80094de:	68fb      	ldr	r3, [r7, #12]
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	69da      	ldr	r2, [r3, #28]
 80094e4:	68fb      	ldr	r3, [r7, #12]
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	f042 0208 	orr.w	r2, r2, #8
 80094ec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80094ee:	68fb      	ldr	r3, [r7, #12]
 80094f0:	681b      	ldr	r3, [r3, #0]
 80094f2:	69da      	ldr	r2, [r3, #28]
 80094f4:	68fb      	ldr	r3, [r7, #12]
 80094f6:	681b      	ldr	r3, [r3, #0]
 80094f8:	f022 0204 	bic.w	r2, r2, #4
 80094fc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80094fe:	68fb      	ldr	r3, [r7, #12]
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	69d9      	ldr	r1, [r3, #28]
 8009504:	68bb      	ldr	r3, [r7, #8]
 8009506:	691a      	ldr	r2, [r3, #16]
 8009508:	68fb      	ldr	r3, [r7, #12]
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	430a      	orrs	r2, r1
 800950e:	61da      	str	r2, [r3, #28]
      break;
 8009510:	e021      	b.n	8009556 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009512:	68fb      	ldr	r3, [r7, #12]
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	68b9      	ldr	r1, [r7, #8]
 8009518:	4618      	mov	r0, r3
 800951a:	f000 fa3f 	bl	800999c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800951e:	68fb      	ldr	r3, [r7, #12]
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	69da      	ldr	r2, [r3, #28]
 8009524:	68fb      	ldr	r3, [r7, #12]
 8009526:	681b      	ldr	r3, [r3, #0]
 8009528:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800952c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800952e:	68fb      	ldr	r3, [r7, #12]
 8009530:	681b      	ldr	r3, [r3, #0]
 8009532:	69da      	ldr	r2, [r3, #28]
 8009534:	68fb      	ldr	r3, [r7, #12]
 8009536:	681b      	ldr	r3, [r3, #0]
 8009538:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800953c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800953e:	68fb      	ldr	r3, [r7, #12]
 8009540:	681b      	ldr	r3, [r3, #0]
 8009542:	69d9      	ldr	r1, [r3, #28]
 8009544:	68bb      	ldr	r3, [r7, #8]
 8009546:	691b      	ldr	r3, [r3, #16]
 8009548:	021a      	lsls	r2, r3, #8
 800954a:	68fb      	ldr	r3, [r7, #12]
 800954c:	681b      	ldr	r3, [r3, #0]
 800954e:	430a      	orrs	r2, r1
 8009550:	61da      	str	r2, [r3, #28]
      break;
 8009552:	e000      	b.n	8009556 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8009554:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8009556:	68fb      	ldr	r3, [r7, #12]
 8009558:	2200      	movs	r2, #0
 800955a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800955e:	2300      	movs	r3, #0
}
 8009560:	4618      	mov	r0, r3
 8009562:	3710      	adds	r7, #16
 8009564:	46bd      	mov	sp, r7
 8009566:	bd80      	pop	{r7, pc}

08009568 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009568:	b480      	push	{r7}
 800956a:	b083      	sub	sp, #12
 800956c:	af00      	add	r7, sp, #0
 800956e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009570:	bf00      	nop
 8009572:	370c      	adds	r7, #12
 8009574:	46bd      	mov	sp, r7
 8009576:	bc80      	pop	{r7}
 8009578:	4770      	bx	lr

0800957a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800957a:	b480      	push	{r7}
 800957c:	b083      	sub	sp, #12
 800957e:	af00      	add	r7, sp, #0
 8009580:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009582:	bf00      	nop
 8009584:	370c      	adds	r7, #12
 8009586:	46bd      	mov	sp, r7
 8009588:	bc80      	pop	{r7}
 800958a:	4770      	bx	lr

0800958c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800958c:	b480      	push	{r7}
 800958e:	b083      	sub	sp, #12
 8009590:	af00      	add	r7, sp, #0
 8009592:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009594:	bf00      	nop
 8009596:	370c      	adds	r7, #12
 8009598:	46bd      	mov	sp, r7
 800959a:	bc80      	pop	{r7}
 800959c:	4770      	bx	lr

0800959e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800959e:	b480      	push	{r7}
 80095a0:	b083      	sub	sp, #12
 80095a2:	af00      	add	r7, sp, #0
 80095a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80095a6:	bf00      	nop
 80095a8:	370c      	adds	r7, #12
 80095aa:	46bd      	mov	sp, r7
 80095ac:	bc80      	pop	{r7}
 80095ae:	4770      	bx	lr

080095b0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80095b0:	b480      	push	{r7}
 80095b2:	b085      	sub	sp, #20
 80095b4:	af00      	add	r7, sp, #0
 80095b6:	6078      	str	r0, [r7, #4]
 80095b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	681b      	ldr	r3, [r3, #0]
 80095be:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	4a3f      	ldr	r2, [pc, #252]	; (80096c0 <TIM_Base_SetConfig+0x110>)
 80095c4:	4293      	cmp	r3, r2
 80095c6:	d013      	beq.n	80095f0 <TIM_Base_SetConfig+0x40>
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80095ce:	d00f      	beq.n	80095f0 <TIM_Base_SetConfig+0x40>
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	4a3c      	ldr	r2, [pc, #240]	; (80096c4 <TIM_Base_SetConfig+0x114>)
 80095d4:	4293      	cmp	r3, r2
 80095d6:	d00b      	beq.n	80095f0 <TIM_Base_SetConfig+0x40>
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	4a3b      	ldr	r2, [pc, #236]	; (80096c8 <TIM_Base_SetConfig+0x118>)
 80095dc:	4293      	cmp	r3, r2
 80095de:	d007      	beq.n	80095f0 <TIM_Base_SetConfig+0x40>
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	4a3a      	ldr	r2, [pc, #232]	; (80096cc <TIM_Base_SetConfig+0x11c>)
 80095e4:	4293      	cmp	r3, r2
 80095e6:	d003      	beq.n	80095f0 <TIM_Base_SetConfig+0x40>
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	4a39      	ldr	r2, [pc, #228]	; (80096d0 <TIM_Base_SetConfig+0x120>)
 80095ec:	4293      	cmp	r3, r2
 80095ee:	d108      	bne.n	8009602 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80095f0:	68fb      	ldr	r3, [r7, #12]
 80095f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80095f6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80095f8:	683b      	ldr	r3, [r7, #0]
 80095fa:	685b      	ldr	r3, [r3, #4]
 80095fc:	68fa      	ldr	r2, [r7, #12]
 80095fe:	4313      	orrs	r3, r2
 8009600:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	4a2e      	ldr	r2, [pc, #184]	; (80096c0 <TIM_Base_SetConfig+0x110>)
 8009606:	4293      	cmp	r3, r2
 8009608:	d02b      	beq.n	8009662 <TIM_Base_SetConfig+0xb2>
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009610:	d027      	beq.n	8009662 <TIM_Base_SetConfig+0xb2>
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	4a2b      	ldr	r2, [pc, #172]	; (80096c4 <TIM_Base_SetConfig+0x114>)
 8009616:	4293      	cmp	r3, r2
 8009618:	d023      	beq.n	8009662 <TIM_Base_SetConfig+0xb2>
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	4a2a      	ldr	r2, [pc, #168]	; (80096c8 <TIM_Base_SetConfig+0x118>)
 800961e:	4293      	cmp	r3, r2
 8009620:	d01f      	beq.n	8009662 <TIM_Base_SetConfig+0xb2>
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	4a29      	ldr	r2, [pc, #164]	; (80096cc <TIM_Base_SetConfig+0x11c>)
 8009626:	4293      	cmp	r3, r2
 8009628:	d01b      	beq.n	8009662 <TIM_Base_SetConfig+0xb2>
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	4a28      	ldr	r2, [pc, #160]	; (80096d0 <TIM_Base_SetConfig+0x120>)
 800962e:	4293      	cmp	r3, r2
 8009630:	d017      	beq.n	8009662 <TIM_Base_SetConfig+0xb2>
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	4a27      	ldr	r2, [pc, #156]	; (80096d4 <TIM_Base_SetConfig+0x124>)
 8009636:	4293      	cmp	r3, r2
 8009638:	d013      	beq.n	8009662 <TIM_Base_SetConfig+0xb2>
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	4a26      	ldr	r2, [pc, #152]	; (80096d8 <TIM_Base_SetConfig+0x128>)
 800963e:	4293      	cmp	r3, r2
 8009640:	d00f      	beq.n	8009662 <TIM_Base_SetConfig+0xb2>
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	4a25      	ldr	r2, [pc, #148]	; (80096dc <TIM_Base_SetConfig+0x12c>)
 8009646:	4293      	cmp	r3, r2
 8009648:	d00b      	beq.n	8009662 <TIM_Base_SetConfig+0xb2>
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	4a24      	ldr	r2, [pc, #144]	; (80096e0 <TIM_Base_SetConfig+0x130>)
 800964e:	4293      	cmp	r3, r2
 8009650:	d007      	beq.n	8009662 <TIM_Base_SetConfig+0xb2>
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	4a23      	ldr	r2, [pc, #140]	; (80096e4 <TIM_Base_SetConfig+0x134>)
 8009656:	4293      	cmp	r3, r2
 8009658:	d003      	beq.n	8009662 <TIM_Base_SetConfig+0xb2>
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	4a22      	ldr	r2, [pc, #136]	; (80096e8 <TIM_Base_SetConfig+0x138>)
 800965e:	4293      	cmp	r3, r2
 8009660:	d108      	bne.n	8009674 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009662:	68fb      	ldr	r3, [r7, #12]
 8009664:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009668:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800966a:	683b      	ldr	r3, [r7, #0]
 800966c:	68db      	ldr	r3, [r3, #12]
 800966e:	68fa      	ldr	r2, [r7, #12]
 8009670:	4313      	orrs	r3, r2
 8009672:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009674:	68fb      	ldr	r3, [r7, #12]
 8009676:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800967a:	683b      	ldr	r3, [r7, #0]
 800967c:	695b      	ldr	r3, [r3, #20]
 800967e:	4313      	orrs	r3, r2
 8009680:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	68fa      	ldr	r2, [r7, #12]
 8009686:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009688:	683b      	ldr	r3, [r7, #0]
 800968a:	689a      	ldr	r2, [r3, #8]
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009690:	683b      	ldr	r3, [r7, #0]
 8009692:	681a      	ldr	r2, [r3, #0]
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	4a09      	ldr	r2, [pc, #36]	; (80096c0 <TIM_Base_SetConfig+0x110>)
 800969c:	4293      	cmp	r3, r2
 800969e:	d003      	beq.n	80096a8 <TIM_Base_SetConfig+0xf8>
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	4a0b      	ldr	r2, [pc, #44]	; (80096d0 <TIM_Base_SetConfig+0x120>)
 80096a4:	4293      	cmp	r3, r2
 80096a6:	d103      	bne.n	80096b0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80096a8:	683b      	ldr	r3, [r7, #0]
 80096aa:	691a      	ldr	r2, [r3, #16]
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	2201      	movs	r2, #1
 80096b4:	615a      	str	r2, [r3, #20]
}
 80096b6:	bf00      	nop
 80096b8:	3714      	adds	r7, #20
 80096ba:	46bd      	mov	sp, r7
 80096bc:	bc80      	pop	{r7}
 80096be:	4770      	bx	lr
 80096c0:	40010000 	.word	0x40010000
 80096c4:	40000400 	.word	0x40000400
 80096c8:	40000800 	.word	0x40000800
 80096cc:	40000c00 	.word	0x40000c00
 80096d0:	40010400 	.word	0x40010400
 80096d4:	40014000 	.word	0x40014000
 80096d8:	40014400 	.word	0x40014400
 80096dc:	40014800 	.word	0x40014800
 80096e0:	40001800 	.word	0x40001800
 80096e4:	40001c00 	.word	0x40001c00
 80096e8:	40002000 	.word	0x40002000

080096ec <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80096ec:	b480      	push	{r7}
 80096ee:	b087      	sub	sp, #28
 80096f0:	af00      	add	r7, sp, #0
 80096f2:	6078      	str	r0, [r7, #4]
 80096f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	6a1b      	ldr	r3, [r3, #32]
 80096fa:	f023 0201 	bic.w	r2, r3, #1
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	6a1b      	ldr	r3, [r3, #32]
 8009706:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	685b      	ldr	r3, [r3, #4]
 800970c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	699b      	ldr	r3, [r3, #24]
 8009712:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009714:	68fb      	ldr	r3, [r7, #12]
 8009716:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800971a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800971c:	68fb      	ldr	r3, [r7, #12]
 800971e:	f023 0303 	bic.w	r3, r3, #3
 8009722:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009724:	683b      	ldr	r3, [r7, #0]
 8009726:	681b      	ldr	r3, [r3, #0]
 8009728:	68fa      	ldr	r2, [r7, #12]
 800972a:	4313      	orrs	r3, r2
 800972c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800972e:	697b      	ldr	r3, [r7, #20]
 8009730:	f023 0302 	bic.w	r3, r3, #2
 8009734:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009736:	683b      	ldr	r3, [r7, #0]
 8009738:	689b      	ldr	r3, [r3, #8]
 800973a:	697a      	ldr	r2, [r7, #20]
 800973c:	4313      	orrs	r3, r2
 800973e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	4a20      	ldr	r2, [pc, #128]	; (80097c4 <TIM_OC1_SetConfig+0xd8>)
 8009744:	4293      	cmp	r3, r2
 8009746:	d003      	beq.n	8009750 <TIM_OC1_SetConfig+0x64>
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	4a1f      	ldr	r2, [pc, #124]	; (80097c8 <TIM_OC1_SetConfig+0xdc>)
 800974c:	4293      	cmp	r3, r2
 800974e:	d10c      	bne.n	800976a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009750:	697b      	ldr	r3, [r7, #20]
 8009752:	f023 0308 	bic.w	r3, r3, #8
 8009756:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009758:	683b      	ldr	r3, [r7, #0]
 800975a:	68db      	ldr	r3, [r3, #12]
 800975c:	697a      	ldr	r2, [r7, #20]
 800975e:	4313      	orrs	r3, r2
 8009760:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8009762:	697b      	ldr	r3, [r7, #20]
 8009764:	f023 0304 	bic.w	r3, r3, #4
 8009768:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	4a15      	ldr	r2, [pc, #84]	; (80097c4 <TIM_OC1_SetConfig+0xd8>)
 800976e:	4293      	cmp	r3, r2
 8009770:	d003      	beq.n	800977a <TIM_OC1_SetConfig+0x8e>
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	4a14      	ldr	r2, [pc, #80]	; (80097c8 <TIM_OC1_SetConfig+0xdc>)
 8009776:	4293      	cmp	r3, r2
 8009778:	d111      	bne.n	800979e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800977a:	693b      	ldr	r3, [r7, #16]
 800977c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009780:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8009782:	693b      	ldr	r3, [r7, #16]
 8009784:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009788:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800978a:	683b      	ldr	r3, [r7, #0]
 800978c:	695b      	ldr	r3, [r3, #20]
 800978e:	693a      	ldr	r2, [r7, #16]
 8009790:	4313      	orrs	r3, r2
 8009792:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009794:	683b      	ldr	r3, [r7, #0]
 8009796:	699b      	ldr	r3, [r3, #24]
 8009798:	693a      	ldr	r2, [r7, #16]
 800979a:	4313      	orrs	r3, r2
 800979c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	693a      	ldr	r2, [r7, #16]
 80097a2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	68fa      	ldr	r2, [r7, #12]
 80097a8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80097aa:	683b      	ldr	r3, [r7, #0]
 80097ac:	685a      	ldr	r2, [r3, #4]
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	697a      	ldr	r2, [r7, #20]
 80097b6:	621a      	str	r2, [r3, #32]
}
 80097b8:	bf00      	nop
 80097ba:	371c      	adds	r7, #28
 80097bc:	46bd      	mov	sp, r7
 80097be:	bc80      	pop	{r7}
 80097c0:	4770      	bx	lr
 80097c2:	bf00      	nop
 80097c4:	40010000 	.word	0x40010000
 80097c8:	40010400 	.word	0x40010400

080097cc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80097cc:	b480      	push	{r7}
 80097ce:	b087      	sub	sp, #28
 80097d0:	af00      	add	r7, sp, #0
 80097d2:	6078      	str	r0, [r7, #4]
 80097d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	6a1b      	ldr	r3, [r3, #32]
 80097da:	f023 0210 	bic.w	r2, r3, #16
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	6a1b      	ldr	r3, [r3, #32]
 80097e6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	685b      	ldr	r3, [r3, #4]
 80097ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	699b      	ldr	r3, [r3, #24]
 80097f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80097f4:	68fb      	ldr	r3, [r7, #12]
 80097f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80097fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80097fc:	68fb      	ldr	r3, [r7, #12]
 80097fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009802:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009804:	683b      	ldr	r3, [r7, #0]
 8009806:	681b      	ldr	r3, [r3, #0]
 8009808:	021b      	lsls	r3, r3, #8
 800980a:	68fa      	ldr	r2, [r7, #12]
 800980c:	4313      	orrs	r3, r2
 800980e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009810:	697b      	ldr	r3, [r7, #20]
 8009812:	f023 0320 	bic.w	r3, r3, #32
 8009816:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009818:	683b      	ldr	r3, [r7, #0]
 800981a:	689b      	ldr	r3, [r3, #8]
 800981c:	011b      	lsls	r3, r3, #4
 800981e:	697a      	ldr	r2, [r7, #20]
 8009820:	4313      	orrs	r3, r2
 8009822:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	4a21      	ldr	r2, [pc, #132]	; (80098ac <TIM_OC2_SetConfig+0xe0>)
 8009828:	4293      	cmp	r3, r2
 800982a:	d003      	beq.n	8009834 <TIM_OC2_SetConfig+0x68>
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	4a20      	ldr	r2, [pc, #128]	; (80098b0 <TIM_OC2_SetConfig+0xe4>)
 8009830:	4293      	cmp	r3, r2
 8009832:	d10d      	bne.n	8009850 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009834:	697b      	ldr	r3, [r7, #20]
 8009836:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800983a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800983c:	683b      	ldr	r3, [r7, #0]
 800983e:	68db      	ldr	r3, [r3, #12]
 8009840:	011b      	lsls	r3, r3, #4
 8009842:	697a      	ldr	r2, [r7, #20]
 8009844:	4313      	orrs	r3, r2
 8009846:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009848:	697b      	ldr	r3, [r7, #20]
 800984a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800984e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	4a16      	ldr	r2, [pc, #88]	; (80098ac <TIM_OC2_SetConfig+0xe0>)
 8009854:	4293      	cmp	r3, r2
 8009856:	d003      	beq.n	8009860 <TIM_OC2_SetConfig+0x94>
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	4a15      	ldr	r2, [pc, #84]	; (80098b0 <TIM_OC2_SetConfig+0xe4>)
 800985c:	4293      	cmp	r3, r2
 800985e:	d113      	bne.n	8009888 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009860:	693b      	ldr	r3, [r7, #16]
 8009862:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009866:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009868:	693b      	ldr	r3, [r7, #16]
 800986a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800986e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009870:	683b      	ldr	r3, [r7, #0]
 8009872:	695b      	ldr	r3, [r3, #20]
 8009874:	009b      	lsls	r3, r3, #2
 8009876:	693a      	ldr	r2, [r7, #16]
 8009878:	4313      	orrs	r3, r2
 800987a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800987c:	683b      	ldr	r3, [r7, #0]
 800987e:	699b      	ldr	r3, [r3, #24]
 8009880:	009b      	lsls	r3, r3, #2
 8009882:	693a      	ldr	r2, [r7, #16]
 8009884:	4313      	orrs	r3, r2
 8009886:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	693a      	ldr	r2, [r7, #16]
 800988c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	68fa      	ldr	r2, [r7, #12]
 8009892:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009894:	683b      	ldr	r3, [r7, #0]
 8009896:	685a      	ldr	r2, [r3, #4]
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	697a      	ldr	r2, [r7, #20]
 80098a0:	621a      	str	r2, [r3, #32]
}
 80098a2:	bf00      	nop
 80098a4:	371c      	adds	r7, #28
 80098a6:	46bd      	mov	sp, r7
 80098a8:	bc80      	pop	{r7}
 80098aa:	4770      	bx	lr
 80098ac:	40010000 	.word	0x40010000
 80098b0:	40010400 	.word	0x40010400

080098b4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80098b4:	b480      	push	{r7}
 80098b6:	b087      	sub	sp, #28
 80098b8:	af00      	add	r7, sp, #0
 80098ba:	6078      	str	r0, [r7, #4]
 80098bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	6a1b      	ldr	r3, [r3, #32]
 80098c2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	6a1b      	ldr	r3, [r3, #32]
 80098ce:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	685b      	ldr	r3, [r3, #4]
 80098d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	69db      	ldr	r3, [r3, #28]
 80098da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80098dc:	68fb      	ldr	r3, [r7, #12]
 80098de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80098e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80098e4:	68fb      	ldr	r3, [r7, #12]
 80098e6:	f023 0303 	bic.w	r3, r3, #3
 80098ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80098ec:	683b      	ldr	r3, [r7, #0]
 80098ee:	681b      	ldr	r3, [r3, #0]
 80098f0:	68fa      	ldr	r2, [r7, #12]
 80098f2:	4313      	orrs	r3, r2
 80098f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80098f6:	697b      	ldr	r3, [r7, #20]
 80098f8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80098fc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80098fe:	683b      	ldr	r3, [r7, #0]
 8009900:	689b      	ldr	r3, [r3, #8]
 8009902:	021b      	lsls	r3, r3, #8
 8009904:	697a      	ldr	r2, [r7, #20]
 8009906:	4313      	orrs	r3, r2
 8009908:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	4a21      	ldr	r2, [pc, #132]	; (8009994 <TIM_OC3_SetConfig+0xe0>)
 800990e:	4293      	cmp	r3, r2
 8009910:	d003      	beq.n	800991a <TIM_OC3_SetConfig+0x66>
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	4a20      	ldr	r2, [pc, #128]	; (8009998 <TIM_OC3_SetConfig+0xe4>)
 8009916:	4293      	cmp	r3, r2
 8009918:	d10d      	bne.n	8009936 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800991a:	697b      	ldr	r3, [r7, #20]
 800991c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009920:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009922:	683b      	ldr	r3, [r7, #0]
 8009924:	68db      	ldr	r3, [r3, #12]
 8009926:	021b      	lsls	r3, r3, #8
 8009928:	697a      	ldr	r2, [r7, #20]
 800992a:	4313      	orrs	r3, r2
 800992c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800992e:	697b      	ldr	r3, [r7, #20]
 8009930:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009934:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	4a16      	ldr	r2, [pc, #88]	; (8009994 <TIM_OC3_SetConfig+0xe0>)
 800993a:	4293      	cmp	r3, r2
 800993c:	d003      	beq.n	8009946 <TIM_OC3_SetConfig+0x92>
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	4a15      	ldr	r2, [pc, #84]	; (8009998 <TIM_OC3_SetConfig+0xe4>)
 8009942:	4293      	cmp	r3, r2
 8009944:	d113      	bne.n	800996e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8009946:	693b      	ldr	r3, [r7, #16]
 8009948:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800994c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800994e:	693b      	ldr	r3, [r7, #16]
 8009950:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009954:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8009956:	683b      	ldr	r3, [r7, #0]
 8009958:	695b      	ldr	r3, [r3, #20]
 800995a:	011b      	lsls	r3, r3, #4
 800995c:	693a      	ldr	r2, [r7, #16]
 800995e:	4313      	orrs	r3, r2
 8009960:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009962:	683b      	ldr	r3, [r7, #0]
 8009964:	699b      	ldr	r3, [r3, #24]
 8009966:	011b      	lsls	r3, r3, #4
 8009968:	693a      	ldr	r2, [r7, #16]
 800996a:	4313      	orrs	r3, r2
 800996c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	693a      	ldr	r2, [r7, #16]
 8009972:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	68fa      	ldr	r2, [r7, #12]
 8009978:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800997a:	683b      	ldr	r3, [r7, #0]
 800997c:	685a      	ldr	r2, [r3, #4]
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	697a      	ldr	r2, [r7, #20]
 8009986:	621a      	str	r2, [r3, #32]
}
 8009988:	bf00      	nop
 800998a:	371c      	adds	r7, #28
 800998c:	46bd      	mov	sp, r7
 800998e:	bc80      	pop	{r7}
 8009990:	4770      	bx	lr
 8009992:	bf00      	nop
 8009994:	40010000 	.word	0x40010000
 8009998:	40010400 	.word	0x40010400

0800999c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800999c:	b480      	push	{r7}
 800999e:	b087      	sub	sp, #28
 80099a0:	af00      	add	r7, sp, #0
 80099a2:	6078      	str	r0, [r7, #4]
 80099a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	6a1b      	ldr	r3, [r3, #32]
 80099aa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	6a1b      	ldr	r3, [r3, #32]
 80099b6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	685b      	ldr	r3, [r3, #4]
 80099bc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	69db      	ldr	r3, [r3, #28]
 80099c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80099c4:	68fb      	ldr	r3, [r7, #12]
 80099c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80099ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80099cc:	68fb      	ldr	r3, [r7, #12]
 80099ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80099d2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80099d4:	683b      	ldr	r3, [r7, #0]
 80099d6:	681b      	ldr	r3, [r3, #0]
 80099d8:	021b      	lsls	r3, r3, #8
 80099da:	68fa      	ldr	r2, [r7, #12]
 80099dc:	4313      	orrs	r3, r2
 80099de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80099e0:	693b      	ldr	r3, [r7, #16]
 80099e2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80099e6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80099e8:	683b      	ldr	r3, [r7, #0]
 80099ea:	689b      	ldr	r3, [r3, #8]
 80099ec:	031b      	lsls	r3, r3, #12
 80099ee:	693a      	ldr	r2, [r7, #16]
 80099f0:	4313      	orrs	r3, r2
 80099f2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	4a11      	ldr	r2, [pc, #68]	; (8009a3c <TIM_OC4_SetConfig+0xa0>)
 80099f8:	4293      	cmp	r3, r2
 80099fa:	d003      	beq.n	8009a04 <TIM_OC4_SetConfig+0x68>
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	4a10      	ldr	r2, [pc, #64]	; (8009a40 <TIM_OC4_SetConfig+0xa4>)
 8009a00:	4293      	cmp	r3, r2
 8009a02:	d109      	bne.n	8009a18 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009a04:	697b      	ldr	r3, [r7, #20]
 8009a06:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009a0a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009a0c:	683b      	ldr	r3, [r7, #0]
 8009a0e:	695b      	ldr	r3, [r3, #20]
 8009a10:	019b      	lsls	r3, r3, #6
 8009a12:	697a      	ldr	r2, [r7, #20]
 8009a14:	4313      	orrs	r3, r2
 8009a16:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	697a      	ldr	r2, [r7, #20]
 8009a1c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	68fa      	ldr	r2, [r7, #12]
 8009a22:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009a24:	683b      	ldr	r3, [r7, #0]
 8009a26:	685a      	ldr	r2, [r3, #4]
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	693a      	ldr	r2, [r7, #16]
 8009a30:	621a      	str	r2, [r3, #32]
}
 8009a32:	bf00      	nop
 8009a34:	371c      	adds	r7, #28
 8009a36:	46bd      	mov	sp, r7
 8009a38:	bc80      	pop	{r7}
 8009a3a:	4770      	bx	lr
 8009a3c:	40010000 	.word	0x40010000
 8009a40:	40010400 	.word	0x40010400

08009a44 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009a44:	b480      	push	{r7}
 8009a46:	b087      	sub	sp, #28
 8009a48:	af00      	add	r7, sp, #0
 8009a4a:	60f8      	str	r0, [r7, #12]
 8009a4c:	60b9      	str	r1, [r7, #8]
 8009a4e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009a50:	68bb      	ldr	r3, [r7, #8]
 8009a52:	f003 031f 	and.w	r3, r3, #31
 8009a56:	2201      	movs	r2, #1
 8009a58:	fa02 f303 	lsl.w	r3, r2, r3
 8009a5c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8009a5e:	68fb      	ldr	r3, [r7, #12]
 8009a60:	6a1a      	ldr	r2, [r3, #32]
 8009a62:	697b      	ldr	r3, [r7, #20]
 8009a64:	43db      	mvns	r3, r3
 8009a66:	401a      	ands	r2, r3
 8009a68:	68fb      	ldr	r3, [r7, #12]
 8009a6a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009a6c:	68fb      	ldr	r3, [r7, #12]
 8009a6e:	6a1a      	ldr	r2, [r3, #32]
 8009a70:	68bb      	ldr	r3, [r7, #8]
 8009a72:	f003 031f 	and.w	r3, r3, #31
 8009a76:	6879      	ldr	r1, [r7, #4]
 8009a78:	fa01 f303 	lsl.w	r3, r1, r3
 8009a7c:	431a      	orrs	r2, r3
 8009a7e:	68fb      	ldr	r3, [r7, #12]
 8009a80:	621a      	str	r2, [r3, #32]
}
 8009a82:	bf00      	nop
 8009a84:	371c      	adds	r7, #28
 8009a86:	46bd      	mov	sp, r7
 8009a88:	bc80      	pop	{r7}
 8009a8a:	4770      	bx	lr

08009a8c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009a8c:	b480      	push	{r7}
 8009a8e:	b085      	sub	sp, #20
 8009a90:	af00      	add	r7, sp, #0
 8009a92:	6078      	str	r0, [r7, #4]
 8009a94:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009a9c:	2b01      	cmp	r3, #1
 8009a9e:	d101      	bne.n	8009aa4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009aa0:	2302      	movs	r3, #2
 8009aa2:	e05a      	b.n	8009b5a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	2201      	movs	r2, #1
 8009aa8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	2202      	movs	r2, #2
 8009ab0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	681b      	ldr	r3, [r3, #0]
 8009ab8:	685b      	ldr	r3, [r3, #4]
 8009aba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	681b      	ldr	r3, [r3, #0]
 8009ac0:	689b      	ldr	r3, [r3, #8]
 8009ac2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009ac4:	68fb      	ldr	r3, [r7, #12]
 8009ac6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009aca:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009acc:	683b      	ldr	r3, [r7, #0]
 8009ace:	681b      	ldr	r3, [r3, #0]
 8009ad0:	68fa      	ldr	r2, [r7, #12]
 8009ad2:	4313      	orrs	r3, r2
 8009ad4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	681b      	ldr	r3, [r3, #0]
 8009ada:	68fa      	ldr	r2, [r7, #12]
 8009adc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	681b      	ldr	r3, [r3, #0]
 8009ae2:	4a20      	ldr	r2, [pc, #128]	; (8009b64 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8009ae4:	4293      	cmp	r3, r2
 8009ae6:	d022      	beq.n	8009b2e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	681b      	ldr	r3, [r3, #0]
 8009aec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009af0:	d01d      	beq.n	8009b2e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	681b      	ldr	r3, [r3, #0]
 8009af6:	4a1c      	ldr	r2, [pc, #112]	; (8009b68 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8009af8:	4293      	cmp	r3, r2
 8009afa:	d018      	beq.n	8009b2e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	4a1a      	ldr	r2, [pc, #104]	; (8009b6c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8009b02:	4293      	cmp	r3, r2
 8009b04:	d013      	beq.n	8009b2e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	681b      	ldr	r3, [r3, #0]
 8009b0a:	4a19      	ldr	r2, [pc, #100]	; (8009b70 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8009b0c:	4293      	cmp	r3, r2
 8009b0e:	d00e      	beq.n	8009b2e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	681b      	ldr	r3, [r3, #0]
 8009b14:	4a17      	ldr	r2, [pc, #92]	; (8009b74 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8009b16:	4293      	cmp	r3, r2
 8009b18:	d009      	beq.n	8009b2e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	681b      	ldr	r3, [r3, #0]
 8009b1e:	4a16      	ldr	r2, [pc, #88]	; (8009b78 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8009b20:	4293      	cmp	r3, r2
 8009b22:	d004      	beq.n	8009b2e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	681b      	ldr	r3, [r3, #0]
 8009b28:	4a14      	ldr	r2, [pc, #80]	; (8009b7c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8009b2a:	4293      	cmp	r3, r2
 8009b2c:	d10c      	bne.n	8009b48 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009b2e:	68bb      	ldr	r3, [r7, #8]
 8009b30:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009b34:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009b36:	683b      	ldr	r3, [r7, #0]
 8009b38:	685b      	ldr	r3, [r3, #4]
 8009b3a:	68ba      	ldr	r2, [r7, #8]
 8009b3c:	4313      	orrs	r3, r2
 8009b3e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	681b      	ldr	r3, [r3, #0]
 8009b44:	68ba      	ldr	r2, [r7, #8]
 8009b46:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	2201      	movs	r2, #1
 8009b4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	2200      	movs	r2, #0
 8009b54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009b58:	2300      	movs	r3, #0
}
 8009b5a:	4618      	mov	r0, r3
 8009b5c:	3714      	adds	r7, #20
 8009b5e:	46bd      	mov	sp, r7
 8009b60:	bc80      	pop	{r7}
 8009b62:	4770      	bx	lr
 8009b64:	40010000 	.word	0x40010000
 8009b68:	40000400 	.word	0x40000400
 8009b6c:	40000800 	.word	0x40000800
 8009b70:	40000c00 	.word	0x40000c00
 8009b74:	40010400 	.word	0x40010400
 8009b78:	40014000 	.word	0x40014000
 8009b7c:	40001800 	.word	0x40001800

08009b80 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009b80:	b480      	push	{r7}
 8009b82:	b083      	sub	sp, #12
 8009b84:	af00      	add	r7, sp, #0
 8009b86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009b88:	bf00      	nop
 8009b8a:	370c      	adds	r7, #12
 8009b8c:	46bd      	mov	sp, r7
 8009b8e:	bc80      	pop	{r7}
 8009b90:	4770      	bx	lr

08009b92 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009b92:	b480      	push	{r7}
 8009b94:	b083      	sub	sp, #12
 8009b96:	af00      	add	r7, sp, #0
 8009b98:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009b9a:	bf00      	nop
 8009b9c:	370c      	adds	r7, #12
 8009b9e:	46bd      	mov	sp, r7
 8009ba0:	bc80      	pop	{r7}
 8009ba2:	4770      	bx	lr

08009ba4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009ba4:	b084      	sub	sp, #16
 8009ba6:	b580      	push	{r7, lr}
 8009ba8:	b084      	sub	sp, #16
 8009baa:	af00      	add	r7, sp, #0
 8009bac:	6078      	str	r0, [r7, #4]
 8009bae:	f107 001c 	add.w	r0, r7, #28
 8009bb2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8009bb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009bb8:	2b01      	cmp	r3, #1
 8009bba:	d122      	bne.n	8009c02 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009bc0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	68db      	ldr	r3, [r3, #12]
 8009bcc:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8009bd0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009bd4:	687a      	ldr	r2, [r7, #4]
 8009bd6:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	68db      	ldr	r3, [r3, #12]
 8009bdc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8009be4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009be6:	2b01      	cmp	r3, #1
 8009be8:	d105      	bne.n	8009bf6 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	68db      	ldr	r3, [r3, #12]
 8009bee:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8009bf6:	6878      	ldr	r0, [r7, #4]
 8009bf8:	f001 fafa 	bl	800b1f0 <USB_CoreReset>
 8009bfc:	4603      	mov	r3, r0
 8009bfe:	73fb      	strb	r3, [r7, #15]
 8009c00:	e010      	b.n	8009c24 <USB_CoreInit+0x80>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	68db      	ldr	r3, [r3, #12]
 8009c06:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8009c0e:	6878      	ldr	r0, [r7, #4]
 8009c10:	f001 faee 	bl	800b1f0 <USB_CoreReset>
 8009c14:	4603      	mov	r3, r0
 8009c16:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c1c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8009c24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c26:	2b01      	cmp	r3, #1
 8009c28:	d10b      	bne.n	8009c42 <USB_CoreInit+0x9e>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	689b      	ldr	r3, [r3, #8]
 8009c2e:	f043 0206 	orr.w	r2, r3, #6
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	689b      	ldr	r3, [r3, #8]
 8009c3a:	f043 0220 	orr.w	r2, r3, #32
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8009c42:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c44:	4618      	mov	r0, r3
 8009c46:	3710      	adds	r7, #16
 8009c48:	46bd      	mov	sp, r7
 8009c4a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009c4e:	b004      	add	sp, #16
 8009c50:	4770      	bx	lr
	...

08009c54 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8009c54:	b480      	push	{r7}
 8009c56:	b087      	sub	sp, #28
 8009c58:	af00      	add	r7, sp, #0
 8009c5a:	60f8      	str	r0, [r7, #12]
 8009c5c:	60b9      	str	r1, [r7, #8]
 8009c5e:	4613      	mov	r3, r2
 8009c60:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8009c62:	79fb      	ldrb	r3, [r7, #7]
 8009c64:	2b02      	cmp	r3, #2
 8009c66:	d165      	bne.n	8009d34 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8009c68:	68bb      	ldr	r3, [r7, #8]
 8009c6a:	4a41      	ldr	r2, [pc, #260]	; (8009d70 <USB_SetTurnaroundTime+0x11c>)
 8009c6c:	4293      	cmp	r3, r2
 8009c6e:	d906      	bls.n	8009c7e <USB_SetTurnaroundTime+0x2a>
 8009c70:	68bb      	ldr	r3, [r7, #8]
 8009c72:	4a40      	ldr	r2, [pc, #256]	; (8009d74 <USB_SetTurnaroundTime+0x120>)
 8009c74:	4293      	cmp	r3, r2
 8009c76:	d202      	bcs.n	8009c7e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8009c78:	230f      	movs	r3, #15
 8009c7a:	617b      	str	r3, [r7, #20]
 8009c7c:	e062      	b.n	8009d44 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8009c7e:	68bb      	ldr	r3, [r7, #8]
 8009c80:	4a3c      	ldr	r2, [pc, #240]	; (8009d74 <USB_SetTurnaroundTime+0x120>)
 8009c82:	4293      	cmp	r3, r2
 8009c84:	d306      	bcc.n	8009c94 <USB_SetTurnaroundTime+0x40>
 8009c86:	68bb      	ldr	r3, [r7, #8]
 8009c88:	4a3b      	ldr	r2, [pc, #236]	; (8009d78 <USB_SetTurnaroundTime+0x124>)
 8009c8a:	4293      	cmp	r3, r2
 8009c8c:	d202      	bcs.n	8009c94 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8009c8e:	230e      	movs	r3, #14
 8009c90:	617b      	str	r3, [r7, #20]
 8009c92:	e057      	b.n	8009d44 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8009c94:	68bb      	ldr	r3, [r7, #8]
 8009c96:	4a38      	ldr	r2, [pc, #224]	; (8009d78 <USB_SetTurnaroundTime+0x124>)
 8009c98:	4293      	cmp	r3, r2
 8009c9a:	d306      	bcc.n	8009caa <USB_SetTurnaroundTime+0x56>
 8009c9c:	68bb      	ldr	r3, [r7, #8]
 8009c9e:	4a37      	ldr	r2, [pc, #220]	; (8009d7c <USB_SetTurnaroundTime+0x128>)
 8009ca0:	4293      	cmp	r3, r2
 8009ca2:	d202      	bcs.n	8009caa <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8009ca4:	230d      	movs	r3, #13
 8009ca6:	617b      	str	r3, [r7, #20]
 8009ca8:	e04c      	b.n	8009d44 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8009caa:	68bb      	ldr	r3, [r7, #8]
 8009cac:	4a33      	ldr	r2, [pc, #204]	; (8009d7c <USB_SetTurnaroundTime+0x128>)
 8009cae:	4293      	cmp	r3, r2
 8009cb0:	d306      	bcc.n	8009cc0 <USB_SetTurnaroundTime+0x6c>
 8009cb2:	68bb      	ldr	r3, [r7, #8]
 8009cb4:	4a32      	ldr	r2, [pc, #200]	; (8009d80 <USB_SetTurnaroundTime+0x12c>)
 8009cb6:	4293      	cmp	r3, r2
 8009cb8:	d802      	bhi.n	8009cc0 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8009cba:	230c      	movs	r3, #12
 8009cbc:	617b      	str	r3, [r7, #20]
 8009cbe:	e041      	b.n	8009d44 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8009cc0:	68bb      	ldr	r3, [r7, #8]
 8009cc2:	4a2f      	ldr	r2, [pc, #188]	; (8009d80 <USB_SetTurnaroundTime+0x12c>)
 8009cc4:	4293      	cmp	r3, r2
 8009cc6:	d906      	bls.n	8009cd6 <USB_SetTurnaroundTime+0x82>
 8009cc8:	68bb      	ldr	r3, [r7, #8]
 8009cca:	4a2e      	ldr	r2, [pc, #184]	; (8009d84 <USB_SetTurnaroundTime+0x130>)
 8009ccc:	4293      	cmp	r3, r2
 8009cce:	d802      	bhi.n	8009cd6 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8009cd0:	230b      	movs	r3, #11
 8009cd2:	617b      	str	r3, [r7, #20]
 8009cd4:	e036      	b.n	8009d44 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8009cd6:	68bb      	ldr	r3, [r7, #8]
 8009cd8:	4a2a      	ldr	r2, [pc, #168]	; (8009d84 <USB_SetTurnaroundTime+0x130>)
 8009cda:	4293      	cmp	r3, r2
 8009cdc:	d906      	bls.n	8009cec <USB_SetTurnaroundTime+0x98>
 8009cde:	68bb      	ldr	r3, [r7, #8]
 8009ce0:	4a29      	ldr	r2, [pc, #164]	; (8009d88 <USB_SetTurnaroundTime+0x134>)
 8009ce2:	4293      	cmp	r3, r2
 8009ce4:	d802      	bhi.n	8009cec <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8009ce6:	230a      	movs	r3, #10
 8009ce8:	617b      	str	r3, [r7, #20]
 8009cea:	e02b      	b.n	8009d44 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8009cec:	68bb      	ldr	r3, [r7, #8]
 8009cee:	4a26      	ldr	r2, [pc, #152]	; (8009d88 <USB_SetTurnaroundTime+0x134>)
 8009cf0:	4293      	cmp	r3, r2
 8009cf2:	d906      	bls.n	8009d02 <USB_SetTurnaroundTime+0xae>
 8009cf4:	68bb      	ldr	r3, [r7, #8]
 8009cf6:	4a25      	ldr	r2, [pc, #148]	; (8009d8c <USB_SetTurnaroundTime+0x138>)
 8009cf8:	4293      	cmp	r3, r2
 8009cfa:	d202      	bcs.n	8009d02 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8009cfc:	2309      	movs	r3, #9
 8009cfe:	617b      	str	r3, [r7, #20]
 8009d00:	e020      	b.n	8009d44 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8009d02:	68bb      	ldr	r3, [r7, #8]
 8009d04:	4a21      	ldr	r2, [pc, #132]	; (8009d8c <USB_SetTurnaroundTime+0x138>)
 8009d06:	4293      	cmp	r3, r2
 8009d08:	d306      	bcc.n	8009d18 <USB_SetTurnaroundTime+0xc4>
 8009d0a:	68bb      	ldr	r3, [r7, #8]
 8009d0c:	4a20      	ldr	r2, [pc, #128]	; (8009d90 <USB_SetTurnaroundTime+0x13c>)
 8009d0e:	4293      	cmp	r3, r2
 8009d10:	d802      	bhi.n	8009d18 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8009d12:	2308      	movs	r3, #8
 8009d14:	617b      	str	r3, [r7, #20]
 8009d16:	e015      	b.n	8009d44 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8009d18:	68bb      	ldr	r3, [r7, #8]
 8009d1a:	4a1d      	ldr	r2, [pc, #116]	; (8009d90 <USB_SetTurnaroundTime+0x13c>)
 8009d1c:	4293      	cmp	r3, r2
 8009d1e:	d906      	bls.n	8009d2e <USB_SetTurnaroundTime+0xda>
 8009d20:	68bb      	ldr	r3, [r7, #8]
 8009d22:	4a1c      	ldr	r2, [pc, #112]	; (8009d94 <USB_SetTurnaroundTime+0x140>)
 8009d24:	4293      	cmp	r3, r2
 8009d26:	d202      	bcs.n	8009d2e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8009d28:	2307      	movs	r3, #7
 8009d2a:	617b      	str	r3, [r7, #20]
 8009d2c:	e00a      	b.n	8009d44 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8009d2e:	2306      	movs	r3, #6
 8009d30:	617b      	str	r3, [r7, #20]
 8009d32:	e007      	b.n	8009d44 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8009d34:	79fb      	ldrb	r3, [r7, #7]
 8009d36:	2b00      	cmp	r3, #0
 8009d38:	d102      	bne.n	8009d40 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8009d3a:	2309      	movs	r3, #9
 8009d3c:	617b      	str	r3, [r7, #20]
 8009d3e:	e001      	b.n	8009d44 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8009d40:	2309      	movs	r3, #9
 8009d42:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8009d44:	68fb      	ldr	r3, [r7, #12]
 8009d46:	68db      	ldr	r3, [r3, #12]
 8009d48:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8009d4c:	68fb      	ldr	r3, [r7, #12]
 8009d4e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8009d50:	68fb      	ldr	r3, [r7, #12]
 8009d52:	68da      	ldr	r2, [r3, #12]
 8009d54:	697b      	ldr	r3, [r7, #20]
 8009d56:	029b      	lsls	r3, r3, #10
 8009d58:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8009d5c:	431a      	orrs	r2, r3
 8009d5e:	68fb      	ldr	r3, [r7, #12]
 8009d60:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8009d62:	2300      	movs	r3, #0
}
 8009d64:	4618      	mov	r0, r3
 8009d66:	371c      	adds	r7, #28
 8009d68:	46bd      	mov	sp, r7
 8009d6a:	bc80      	pop	{r7}
 8009d6c:	4770      	bx	lr
 8009d6e:	bf00      	nop
 8009d70:	00d8acbf 	.word	0x00d8acbf
 8009d74:	00e4e1c0 	.word	0x00e4e1c0
 8009d78:	00f42400 	.word	0x00f42400
 8009d7c:	01067380 	.word	0x01067380
 8009d80:	011a499f 	.word	0x011a499f
 8009d84:	01312cff 	.word	0x01312cff
 8009d88:	014ca43f 	.word	0x014ca43f
 8009d8c:	016e3600 	.word	0x016e3600
 8009d90:	01a6ab1f 	.word	0x01a6ab1f
 8009d94:	01e84800 	.word	0x01e84800

08009d98 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009d98:	b480      	push	{r7}
 8009d9a:	b083      	sub	sp, #12
 8009d9c:	af00      	add	r7, sp, #0
 8009d9e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	689b      	ldr	r3, [r3, #8]
 8009da4:	f043 0201 	orr.w	r2, r3, #1
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009dac:	2300      	movs	r3, #0
}
 8009dae:	4618      	mov	r0, r3
 8009db0:	370c      	adds	r7, #12
 8009db2:	46bd      	mov	sp, r7
 8009db4:	bc80      	pop	{r7}
 8009db6:	4770      	bx	lr

08009db8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009db8:	b480      	push	{r7}
 8009dba:	b083      	sub	sp, #12
 8009dbc:	af00      	add	r7, sp, #0
 8009dbe:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	689b      	ldr	r3, [r3, #8]
 8009dc4:	f023 0201 	bic.w	r2, r3, #1
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009dcc:	2300      	movs	r3, #0
}
 8009dce:	4618      	mov	r0, r3
 8009dd0:	370c      	adds	r7, #12
 8009dd2:	46bd      	mov	sp, r7
 8009dd4:	bc80      	pop	{r7}
 8009dd6:	4770      	bx	lr

08009dd8 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8009dd8:	b580      	push	{r7, lr}
 8009dda:	b084      	sub	sp, #16
 8009ddc:	af00      	add	r7, sp, #0
 8009dde:	6078      	str	r0, [r7, #4]
 8009de0:	460b      	mov	r3, r1
 8009de2:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8009de4:	2300      	movs	r3, #0
 8009de6:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	68db      	ldr	r3, [r3, #12]
 8009dec:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8009df4:	78fb      	ldrb	r3, [r7, #3]
 8009df6:	2b01      	cmp	r3, #1
 8009df8:	d115      	bne.n	8009e26 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	68db      	ldr	r3, [r3, #12]
 8009dfe:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8009e06:	2001      	movs	r0, #1
 8009e08:	f7fb f9fe 	bl	8005208 <HAL_Delay>
      ms++;
 8009e0c:	68fb      	ldr	r3, [r7, #12]
 8009e0e:	3301      	adds	r3, #1
 8009e10:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8009e12:	6878      	ldr	r0, [r7, #4]
 8009e14:	f001 f961 	bl	800b0da <USB_GetMode>
 8009e18:	4603      	mov	r3, r0
 8009e1a:	2b01      	cmp	r3, #1
 8009e1c:	d01e      	beq.n	8009e5c <USB_SetCurrentMode+0x84>
 8009e1e:	68fb      	ldr	r3, [r7, #12]
 8009e20:	2b31      	cmp	r3, #49	; 0x31
 8009e22:	d9f0      	bls.n	8009e06 <USB_SetCurrentMode+0x2e>
 8009e24:	e01a      	b.n	8009e5c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8009e26:	78fb      	ldrb	r3, [r7, #3]
 8009e28:	2b00      	cmp	r3, #0
 8009e2a:	d115      	bne.n	8009e58 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	68db      	ldr	r3, [r3, #12]
 8009e30:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8009e38:	2001      	movs	r0, #1
 8009e3a:	f7fb f9e5 	bl	8005208 <HAL_Delay>
      ms++;
 8009e3e:	68fb      	ldr	r3, [r7, #12]
 8009e40:	3301      	adds	r3, #1
 8009e42:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8009e44:	6878      	ldr	r0, [r7, #4]
 8009e46:	f001 f948 	bl	800b0da <USB_GetMode>
 8009e4a:	4603      	mov	r3, r0
 8009e4c:	2b00      	cmp	r3, #0
 8009e4e:	d005      	beq.n	8009e5c <USB_SetCurrentMode+0x84>
 8009e50:	68fb      	ldr	r3, [r7, #12]
 8009e52:	2b31      	cmp	r3, #49	; 0x31
 8009e54:	d9f0      	bls.n	8009e38 <USB_SetCurrentMode+0x60>
 8009e56:	e001      	b.n	8009e5c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8009e58:	2301      	movs	r3, #1
 8009e5a:	e005      	b.n	8009e68 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8009e5c:	68fb      	ldr	r3, [r7, #12]
 8009e5e:	2b32      	cmp	r3, #50	; 0x32
 8009e60:	d101      	bne.n	8009e66 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8009e62:	2301      	movs	r3, #1
 8009e64:	e000      	b.n	8009e68 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8009e66:	2300      	movs	r3, #0
}
 8009e68:	4618      	mov	r0, r3
 8009e6a:	3710      	adds	r7, #16
 8009e6c:	46bd      	mov	sp, r7
 8009e6e:	bd80      	pop	{r7, pc}

08009e70 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009e70:	b084      	sub	sp, #16
 8009e72:	b580      	push	{r7, lr}
 8009e74:	b086      	sub	sp, #24
 8009e76:	af00      	add	r7, sp, #0
 8009e78:	6078      	str	r0, [r7, #4]
 8009e7a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8009e7e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8009e82:	2300      	movs	r3, #0
 8009e84:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8009e8a:	2300      	movs	r3, #0
 8009e8c:	613b      	str	r3, [r7, #16]
 8009e8e:	e009      	b.n	8009ea4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8009e90:	687a      	ldr	r2, [r7, #4]
 8009e92:	693b      	ldr	r3, [r7, #16]
 8009e94:	3340      	adds	r3, #64	; 0x40
 8009e96:	009b      	lsls	r3, r3, #2
 8009e98:	4413      	add	r3, r2
 8009e9a:	2200      	movs	r2, #0
 8009e9c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8009e9e:	693b      	ldr	r3, [r7, #16]
 8009ea0:	3301      	adds	r3, #1
 8009ea2:	613b      	str	r3, [r7, #16]
 8009ea4:	693b      	ldr	r3, [r7, #16]
 8009ea6:	2b0e      	cmp	r3, #14
 8009ea8:	d9f2      	bls.n	8009e90 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8009eaa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009eac:	2b00      	cmp	r3, #0
 8009eae:	d11c      	bne.n	8009eea <USB_DevInit+0x7a>
  {
    /*
     * disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009eb0:	68fb      	ldr	r3, [r7, #12]
 8009eb2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009eb6:	685b      	ldr	r3, [r3, #4]
 8009eb8:	68fa      	ldr	r2, [r7, #12]
 8009eba:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009ebe:	f043 0302 	orr.w	r3, r3, #2
 8009ec2:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ec8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ed4:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ee0:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	639a      	str	r2, [r3, #56]	; 0x38
 8009ee8:	e00b      	b.n	8009f02 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009eee:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009efa:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8009f02:	68fb      	ldr	r3, [r7, #12]
 8009f04:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009f08:	461a      	mov	r2, r3
 8009f0a:	2300      	movs	r3, #0
 8009f0c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8009f0e:	68fb      	ldr	r3, [r7, #12]
 8009f10:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009f14:	4619      	mov	r1, r3
 8009f16:	68fb      	ldr	r3, [r7, #12]
 8009f18:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009f1c:	461a      	mov	r2, r3
 8009f1e:	680b      	ldr	r3, [r1, #0]
 8009f20:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8009f22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f24:	2b01      	cmp	r3, #1
 8009f26:	d10c      	bne.n	8009f42 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8009f28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f2a:	2b00      	cmp	r3, #0
 8009f2c:	d104      	bne.n	8009f38 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8009f2e:	2100      	movs	r1, #0
 8009f30:	6878      	ldr	r0, [r7, #4]
 8009f32:	f000 f945 	bl	800a1c0 <USB_SetDevSpeed>
 8009f36:	e008      	b.n	8009f4a <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8009f38:	2101      	movs	r1, #1
 8009f3a:	6878      	ldr	r0, [r7, #4]
 8009f3c:	f000 f940 	bl	800a1c0 <USB_SetDevSpeed>
 8009f40:	e003      	b.n	8009f4a <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8009f42:	2103      	movs	r1, #3
 8009f44:	6878      	ldr	r0, [r7, #4]
 8009f46:	f000 f93b 	bl	800a1c0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8009f4a:	2110      	movs	r1, #16
 8009f4c:	6878      	ldr	r0, [r7, #4]
 8009f4e:	f000 f8f3 	bl	800a138 <USB_FlushTxFifo>
 8009f52:	4603      	mov	r3, r0
 8009f54:	2b00      	cmp	r3, #0
 8009f56:	d001      	beq.n	8009f5c <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8009f58:	2301      	movs	r3, #1
 8009f5a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8009f5c:	6878      	ldr	r0, [r7, #4]
 8009f5e:	f000 f90f 	bl	800a180 <USB_FlushRxFifo>
 8009f62:	4603      	mov	r3, r0
 8009f64:	2b00      	cmp	r3, #0
 8009f66:	d001      	beq.n	8009f6c <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8009f68:	2301      	movs	r3, #1
 8009f6a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8009f6c:	68fb      	ldr	r3, [r7, #12]
 8009f6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009f72:	461a      	mov	r2, r3
 8009f74:	2300      	movs	r3, #0
 8009f76:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8009f78:	68fb      	ldr	r3, [r7, #12]
 8009f7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009f7e:	461a      	mov	r2, r3
 8009f80:	2300      	movs	r3, #0
 8009f82:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8009f84:	68fb      	ldr	r3, [r7, #12]
 8009f86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009f8a:	461a      	mov	r2, r3
 8009f8c:	2300      	movs	r3, #0
 8009f8e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009f90:	2300      	movs	r3, #0
 8009f92:	613b      	str	r3, [r7, #16]
 8009f94:	e043      	b.n	800a01e <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009f96:	693b      	ldr	r3, [r7, #16]
 8009f98:	015a      	lsls	r2, r3, #5
 8009f9a:	68fb      	ldr	r3, [r7, #12]
 8009f9c:	4413      	add	r3, r2
 8009f9e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009fa2:	681b      	ldr	r3, [r3, #0]
 8009fa4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009fa8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009fac:	d118      	bne.n	8009fe0 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8009fae:	693b      	ldr	r3, [r7, #16]
 8009fb0:	2b00      	cmp	r3, #0
 8009fb2:	d10a      	bne.n	8009fca <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8009fb4:	693b      	ldr	r3, [r7, #16]
 8009fb6:	015a      	lsls	r2, r3, #5
 8009fb8:	68fb      	ldr	r3, [r7, #12]
 8009fba:	4413      	add	r3, r2
 8009fbc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009fc0:	461a      	mov	r2, r3
 8009fc2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009fc6:	6013      	str	r3, [r2, #0]
 8009fc8:	e013      	b.n	8009ff2 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8009fca:	693b      	ldr	r3, [r7, #16]
 8009fcc:	015a      	lsls	r2, r3, #5
 8009fce:	68fb      	ldr	r3, [r7, #12]
 8009fd0:	4413      	add	r3, r2
 8009fd2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009fd6:	461a      	mov	r2, r3
 8009fd8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8009fdc:	6013      	str	r3, [r2, #0]
 8009fde:	e008      	b.n	8009ff2 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8009fe0:	693b      	ldr	r3, [r7, #16]
 8009fe2:	015a      	lsls	r2, r3, #5
 8009fe4:	68fb      	ldr	r3, [r7, #12]
 8009fe6:	4413      	add	r3, r2
 8009fe8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009fec:	461a      	mov	r2, r3
 8009fee:	2300      	movs	r3, #0
 8009ff0:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8009ff2:	693b      	ldr	r3, [r7, #16]
 8009ff4:	015a      	lsls	r2, r3, #5
 8009ff6:	68fb      	ldr	r3, [r7, #12]
 8009ff8:	4413      	add	r3, r2
 8009ffa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009ffe:	461a      	mov	r2, r3
 800a000:	2300      	movs	r3, #0
 800a002:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800a004:	693b      	ldr	r3, [r7, #16]
 800a006:	015a      	lsls	r2, r3, #5
 800a008:	68fb      	ldr	r3, [r7, #12]
 800a00a:	4413      	add	r3, r2
 800a00c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a010:	461a      	mov	r2, r3
 800a012:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800a016:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a018:	693b      	ldr	r3, [r7, #16]
 800a01a:	3301      	adds	r3, #1
 800a01c:	613b      	str	r3, [r7, #16]
 800a01e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a020:	693a      	ldr	r2, [r7, #16]
 800a022:	429a      	cmp	r2, r3
 800a024:	d3b7      	bcc.n	8009f96 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a026:	2300      	movs	r3, #0
 800a028:	613b      	str	r3, [r7, #16]
 800a02a:	e043      	b.n	800a0b4 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a02c:	693b      	ldr	r3, [r7, #16]
 800a02e:	015a      	lsls	r2, r3, #5
 800a030:	68fb      	ldr	r3, [r7, #12]
 800a032:	4413      	add	r3, r2
 800a034:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a038:	681b      	ldr	r3, [r3, #0]
 800a03a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a03e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a042:	d118      	bne.n	800a076 <USB_DevInit+0x206>
    {
      if (i == 0U)
 800a044:	693b      	ldr	r3, [r7, #16]
 800a046:	2b00      	cmp	r3, #0
 800a048:	d10a      	bne.n	800a060 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800a04a:	693b      	ldr	r3, [r7, #16]
 800a04c:	015a      	lsls	r2, r3, #5
 800a04e:	68fb      	ldr	r3, [r7, #12]
 800a050:	4413      	add	r3, r2
 800a052:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a056:	461a      	mov	r2, r3
 800a058:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800a05c:	6013      	str	r3, [r2, #0]
 800a05e:	e013      	b.n	800a088 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800a060:	693b      	ldr	r3, [r7, #16]
 800a062:	015a      	lsls	r2, r3, #5
 800a064:	68fb      	ldr	r3, [r7, #12]
 800a066:	4413      	add	r3, r2
 800a068:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a06c:	461a      	mov	r2, r3
 800a06e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800a072:	6013      	str	r3, [r2, #0]
 800a074:	e008      	b.n	800a088 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800a076:	693b      	ldr	r3, [r7, #16]
 800a078:	015a      	lsls	r2, r3, #5
 800a07a:	68fb      	ldr	r3, [r7, #12]
 800a07c:	4413      	add	r3, r2
 800a07e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a082:	461a      	mov	r2, r3
 800a084:	2300      	movs	r3, #0
 800a086:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800a088:	693b      	ldr	r3, [r7, #16]
 800a08a:	015a      	lsls	r2, r3, #5
 800a08c:	68fb      	ldr	r3, [r7, #12]
 800a08e:	4413      	add	r3, r2
 800a090:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a094:	461a      	mov	r2, r3
 800a096:	2300      	movs	r3, #0
 800a098:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800a09a:	693b      	ldr	r3, [r7, #16]
 800a09c:	015a      	lsls	r2, r3, #5
 800a09e:	68fb      	ldr	r3, [r7, #12]
 800a0a0:	4413      	add	r3, r2
 800a0a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a0a6:	461a      	mov	r2, r3
 800a0a8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800a0ac:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a0ae:	693b      	ldr	r3, [r7, #16]
 800a0b0:	3301      	adds	r3, #1
 800a0b2:	613b      	str	r3, [r7, #16]
 800a0b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0b6:	693a      	ldr	r2, [r7, #16]
 800a0b8:	429a      	cmp	r2, r3
 800a0ba:	d3b7      	bcc.n	800a02c <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800a0bc:	68fb      	ldr	r3, [r7, #12]
 800a0be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a0c2:	691b      	ldr	r3, [r3, #16]
 800a0c4:	68fa      	ldr	r2, [r7, #12]
 800a0c6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a0ca:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a0ce:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	2200      	movs	r2, #0
 800a0d4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800a0dc:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800a0de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0e0:	2b00      	cmp	r3, #0
 800a0e2:	d105      	bne.n	800a0f0 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	699b      	ldr	r3, [r3, #24]
 800a0e8:	f043 0210 	orr.w	r2, r3, #16
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	699a      	ldr	r2, [r3, #24]
 800a0f4:	4b0f      	ldr	r3, [pc, #60]	; (800a134 <USB_DevInit+0x2c4>)
 800a0f6:	4313      	orrs	r3, r2
 800a0f8:	687a      	ldr	r2, [r7, #4]
 800a0fa:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800a0fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a0fe:	2b00      	cmp	r3, #0
 800a100:	d005      	beq.n	800a10e <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	699b      	ldr	r3, [r3, #24]
 800a106:	f043 0208 	orr.w	r2, r3, #8
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800a10e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a110:	2b01      	cmp	r3, #1
 800a112:	d107      	bne.n	800a124 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	699b      	ldr	r3, [r3, #24]
 800a118:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a11c:	f043 0304 	orr.w	r3, r3, #4
 800a120:	687a      	ldr	r2, [r7, #4]
 800a122:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800a124:	7dfb      	ldrb	r3, [r7, #23]
}
 800a126:	4618      	mov	r0, r3
 800a128:	3718      	adds	r7, #24
 800a12a:	46bd      	mov	sp, r7
 800a12c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a130:	b004      	add	sp, #16
 800a132:	4770      	bx	lr
 800a134:	803c3800 	.word	0x803c3800

0800a138 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800a138:	b480      	push	{r7}
 800a13a:	b085      	sub	sp, #20
 800a13c:	af00      	add	r7, sp, #0
 800a13e:	6078      	str	r0, [r7, #4]
 800a140:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800a142:	2300      	movs	r3, #0
 800a144:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800a146:	683b      	ldr	r3, [r7, #0]
 800a148:	019b      	lsls	r3, r3, #6
 800a14a:	f043 0220 	orr.w	r2, r3, #32
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800a152:	68fb      	ldr	r3, [r7, #12]
 800a154:	3301      	adds	r3, #1
 800a156:	60fb      	str	r3, [r7, #12]
 800a158:	68fb      	ldr	r3, [r7, #12]
 800a15a:	4a08      	ldr	r2, [pc, #32]	; (800a17c <USB_FlushTxFifo+0x44>)
 800a15c:	4293      	cmp	r3, r2
 800a15e:	d901      	bls.n	800a164 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800a160:	2303      	movs	r3, #3
 800a162:	e006      	b.n	800a172 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	691b      	ldr	r3, [r3, #16]
 800a168:	f003 0320 	and.w	r3, r3, #32
 800a16c:	2b20      	cmp	r3, #32
 800a16e:	d0f0      	beq.n	800a152 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800a170:	2300      	movs	r3, #0
}
 800a172:	4618      	mov	r0, r3
 800a174:	3714      	adds	r7, #20
 800a176:	46bd      	mov	sp, r7
 800a178:	bc80      	pop	{r7}
 800a17a:	4770      	bx	lr
 800a17c:	00030d40 	.word	0x00030d40

0800a180 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800a180:	b480      	push	{r7}
 800a182:	b085      	sub	sp, #20
 800a184:	af00      	add	r7, sp, #0
 800a186:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800a188:	2300      	movs	r3, #0
 800a18a:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	2210      	movs	r2, #16
 800a190:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800a192:	68fb      	ldr	r3, [r7, #12]
 800a194:	3301      	adds	r3, #1
 800a196:	60fb      	str	r3, [r7, #12]
 800a198:	68fb      	ldr	r3, [r7, #12]
 800a19a:	4a08      	ldr	r2, [pc, #32]	; (800a1bc <USB_FlushRxFifo+0x3c>)
 800a19c:	4293      	cmp	r3, r2
 800a19e:	d901      	bls.n	800a1a4 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800a1a0:	2303      	movs	r3, #3
 800a1a2:	e006      	b.n	800a1b2 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	691b      	ldr	r3, [r3, #16]
 800a1a8:	f003 0310 	and.w	r3, r3, #16
 800a1ac:	2b10      	cmp	r3, #16
 800a1ae:	d0f0      	beq.n	800a192 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800a1b0:	2300      	movs	r3, #0
}
 800a1b2:	4618      	mov	r0, r3
 800a1b4:	3714      	adds	r7, #20
 800a1b6:	46bd      	mov	sp, r7
 800a1b8:	bc80      	pop	{r7}
 800a1ba:	4770      	bx	lr
 800a1bc:	00030d40 	.word	0x00030d40

0800a1c0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800a1c0:	b480      	push	{r7}
 800a1c2:	b085      	sub	sp, #20
 800a1c4:	af00      	add	r7, sp, #0
 800a1c6:	6078      	str	r0, [r7, #4]
 800a1c8:	460b      	mov	r3, r1
 800a1ca:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800a1d0:	68fb      	ldr	r3, [r7, #12]
 800a1d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a1d6:	681a      	ldr	r2, [r3, #0]
 800a1d8:	78fb      	ldrb	r3, [r7, #3]
 800a1da:	68f9      	ldr	r1, [r7, #12]
 800a1dc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a1e0:	4313      	orrs	r3, r2
 800a1e2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800a1e4:	2300      	movs	r3, #0
}
 800a1e6:	4618      	mov	r0, r3
 800a1e8:	3714      	adds	r7, #20
 800a1ea:	46bd      	mov	sp, r7
 800a1ec:	bc80      	pop	{r7}
 800a1ee:	4770      	bx	lr

0800a1f0 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800a1f0:	b480      	push	{r7}
 800a1f2:	b087      	sub	sp, #28
 800a1f4:	af00      	add	r7, sp, #0
 800a1f6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800a1fc:	693b      	ldr	r3, [r7, #16]
 800a1fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a202:	689b      	ldr	r3, [r3, #8]
 800a204:	f003 0306 	and.w	r3, r3, #6
 800a208:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800a20a:	68fb      	ldr	r3, [r7, #12]
 800a20c:	2b00      	cmp	r3, #0
 800a20e:	d102      	bne.n	800a216 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800a210:	2300      	movs	r3, #0
 800a212:	75fb      	strb	r3, [r7, #23]
 800a214:	e00a      	b.n	800a22c <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800a216:	68fb      	ldr	r3, [r7, #12]
 800a218:	2b02      	cmp	r3, #2
 800a21a:	d002      	beq.n	800a222 <USB_GetDevSpeed+0x32>
 800a21c:	68fb      	ldr	r3, [r7, #12]
 800a21e:	2b06      	cmp	r3, #6
 800a220:	d102      	bne.n	800a228 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800a222:	2302      	movs	r3, #2
 800a224:	75fb      	strb	r3, [r7, #23]
 800a226:	e001      	b.n	800a22c <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800a228:	230f      	movs	r3, #15
 800a22a:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800a22c:	7dfb      	ldrb	r3, [r7, #23]
}
 800a22e:	4618      	mov	r0, r3
 800a230:	371c      	adds	r7, #28
 800a232:	46bd      	mov	sp, r7
 800a234:	bc80      	pop	{r7}
 800a236:	4770      	bx	lr

0800a238 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a238:	b480      	push	{r7}
 800a23a:	b085      	sub	sp, #20
 800a23c:	af00      	add	r7, sp, #0
 800a23e:	6078      	str	r0, [r7, #4]
 800a240:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a246:	683b      	ldr	r3, [r7, #0]
 800a248:	781b      	ldrb	r3, [r3, #0]
 800a24a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800a24c:	683b      	ldr	r3, [r7, #0]
 800a24e:	785b      	ldrb	r3, [r3, #1]
 800a250:	2b01      	cmp	r3, #1
 800a252:	d13a      	bne.n	800a2ca <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800a254:	68fb      	ldr	r3, [r7, #12]
 800a256:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a25a:	69da      	ldr	r2, [r3, #28]
 800a25c:	683b      	ldr	r3, [r7, #0]
 800a25e:	781b      	ldrb	r3, [r3, #0]
 800a260:	f003 030f 	and.w	r3, r3, #15
 800a264:	2101      	movs	r1, #1
 800a266:	fa01 f303 	lsl.w	r3, r1, r3
 800a26a:	b29b      	uxth	r3, r3
 800a26c:	68f9      	ldr	r1, [r7, #12]
 800a26e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a272:	4313      	orrs	r3, r2
 800a274:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800a276:	68bb      	ldr	r3, [r7, #8]
 800a278:	015a      	lsls	r2, r3, #5
 800a27a:	68fb      	ldr	r3, [r7, #12]
 800a27c:	4413      	add	r3, r2
 800a27e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a282:	681b      	ldr	r3, [r3, #0]
 800a284:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a288:	2b00      	cmp	r3, #0
 800a28a:	d155      	bne.n	800a338 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800a28c:	68bb      	ldr	r3, [r7, #8]
 800a28e:	015a      	lsls	r2, r3, #5
 800a290:	68fb      	ldr	r3, [r7, #12]
 800a292:	4413      	add	r3, r2
 800a294:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a298:	681a      	ldr	r2, [r3, #0]
 800a29a:	683b      	ldr	r3, [r7, #0]
 800a29c:	689b      	ldr	r3, [r3, #8]
 800a29e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800a2a2:	683b      	ldr	r3, [r7, #0]
 800a2a4:	78db      	ldrb	r3, [r3, #3]
 800a2a6:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800a2a8:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800a2aa:	68bb      	ldr	r3, [r7, #8]
 800a2ac:	059b      	lsls	r3, r3, #22
 800a2ae:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800a2b0:	4313      	orrs	r3, r2
 800a2b2:	68ba      	ldr	r2, [r7, #8]
 800a2b4:	0151      	lsls	r1, r2, #5
 800a2b6:	68fa      	ldr	r2, [r7, #12]
 800a2b8:	440a      	add	r2, r1
 800a2ba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a2be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a2c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a2c6:	6013      	str	r3, [r2, #0]
 800a2c8:	e036      	b.n	800a338 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800a2ca:	68fb      	ldr	r3, [r7, #12]
 800a2cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a2d0:	69da      	ldr	r2, [r3, #28]
 800a2d2:	683b      	ldr	r3, [r7, #0]
 800a2d4:	781b      	ldrb	r3, [r3, #0]
 800a2d6:	f003 030f 	and.w	r3, r3, #15
 800a2da:	2101      	movs	r1, #1
 800a2dc:	fa01 f303 	lsl.w	r3, r1, r3
 800a2e0:	041b      	lsls	r3, r3, #16
 800a2e2:	68f9      	ldr	r1, [r7, #12]
 800a2e4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a2e8:	4313      	orrs	r3, r2
 800a2ea:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800a2ec:	68bb      	ldr	r3, [r7, #8]
 800a2ee:	015a      	lsls	r2, r3, #5
 800a2f0:	68fb      	ldr	r3, [r7, #12]
 800a2f2:	4413      	add	r3, r2
 800a2f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a2f8:	681b      	ldr	r3, [r3, #0]
 800a2fa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a2fe:	2b00      	cmp	r3, #0
 800a300:	d11a      	bne.n	800a338 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800a302:	68bb      	ldr	r3, [r7, #8]
 800a304:	015a      	lsls	r2, r3, #5
 800a306:	68fb      	ldr	r3, [r7, #12]
 800a308:	4413      	add	r3, r2
 800a30a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a30e:	681a      	ldr	r2, [r3, #0]
 800a310:	683b      	ldr	r3, [r7, #0]
 800a312:	689b      	ldr	r3, [r3, #8]
 800a314:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800a318:	683b      	ldr	r3, [r7, #0]
 800a31a:	78db      	ldrb	r3, [r3, #3]
 800a31c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800a31e:	430b      	orrs	r3, r1
 800a320:	4313      	orrs	r3, r2
 800a322:	68ba      	ldr	r2, [r7, #8]
 800a324:	0151      	lsls	r1, r2, #5
 800a326:	68fa      	ldr	r2, [r7, #12]
 800a328:	440a      	add	r2, r1
 800a32a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a32e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a332:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a336:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800a338:	2300      	movs	r3, #0
}
 800a33a:	4618      	mov	r0, r3
 800a33c:	3714      	adds	r7, #20
 800a33e:	46bd      	mov	sp, r7
 800a340:	bc80      	pop	{r7}
 800a342:	4770      	bx	lr

0800a344 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a344:	b480      	push	{r7}
 800a346:	b085      	sub	sp, #20
 800a348:	af00      	add	r7, sp, #0
 800a34a:	6078      	str	r0, [r7, #4]
 800a34c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a352:	683b      	ldr	r3, [r7, #0]
 800a354:	781b      	ldrb	r3, [r3, #0]
 800a356:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800a358:	683b      	ldr	r3, [r7, #0]
 800a35a:	785b      	ldrb	r3, [r3, #1]
 800a35c:	2b01      	cmp	r3, #1
 800a35e:	d161      	bne.n	800a424 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800a360:	68bb      	ldr	r3, [r7, #8]
 800a362:	015a      	lsls	r2, r3, #5
 800a364:	68fb      	ldr	r3, [r7, #12]
 800a366:	4413      	add	r3, r2
 800a368:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a36c:	681b      	ldr	r3, [r3, #0]
 800a36e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a372:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a376:	d11f      	bne.n	800a3b8 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800a378:	68bb      	ldr	r3, [r7, #8]
 800a37a:	015a      	lsls	r2, r3, #5
 800a37c:	68fb      	ldr	r3, [r7, #12]
 800a37e:	4413      	add	r3, r2
 800a380:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a384:	681b      	ldr	r3, [r3, #0]
 800a386:	68ba      	ldr	r2, [r7, #8]
 800a388:	0151      	lsls	r1, r2, #5
 800a38a:	68fa      	ldr	r2, [r7, #12]
 800a38c:	440a      	add	r2, r1
 800a38e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a392:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800a396:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800a398:	68bb      	ldr	r3, [r7, #8]
 800a39a:	015a      	lsls	r2, r3, #5
 800a39c:	68fb      	ldr	r3, [r7, #12]
 800a39e:	4413      	add	r3, r2
 800a3a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a3a4:	681b      	ldr	r3, [r3, #0]
 800a3a6:	68ba      	ldr	r2, [r7, #8]
 800a3a8:	0151      	lsls	r1, r2, #5
 800a3aa:	68fa      	ldr	r2, [r7, #12]
 800a3ac:	440a      	add	r2, r1
 800a3ae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a3b2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a3b6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800a3b8:	68fb      	ldr	r3, [r7, #12]
 800a3ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a3be:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a3c0:	683b      	ldr	r3, [r7, #0]
 800a3c2:	781b      	ldrb	r3, [r3, #0]
 800a3c4:	f003 030f 	and.w	r3, r3, #15
 800a3c8:	2101      	movs	r1, #1
 800a3ca:	fa01 f303 	lsl.w	r3, r1, r3
 800a3ce:	b29b      	uxth	r3, r3
 800a3d0:	43db      	mvns	r3, r3
 800a3d2:	68f9      	ldr	r1, [r7, #12]
 800a3d4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a3d8:	4013      	ands	r3, r2
 800a3da:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800a3dc:	68fb      	ldr	r3, [r7, #12]
 800a3de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a3e2:	69da      	ldr	r2, [r3, #28]
 800a3e4:	683b      	ldr	r3, [r7, #0]
 800a3e6:	781b      	ldrb	r3, [r3, #0]
 800a3e8:	f003 030f 	and.w	r3, r3, #15
 800a3ec:	2101      	movs	r1, #1
 800a3ee:	fa01 f303 	lsl.w	r3, r1, r3
 800a3f2:	b29b      	uxth	r3, r3
 800a3f4:	43db      	mvns	r3, r3
 800a3f6:	68f9      	ldr	r1, [r7, #12]
 800a3f8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a3fc:	4013      	ands	r3, r2
 800a3fe:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800a400:	68bb      	ldr	r3, [r7, #8]
 800a402:	015a      	lsls	r2, r3, #5
 800a404:	68fb      	ldr	r3, [r7, #12]
 800a406:	4413      	add	r3, r2
 800a408:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a40c:	681a      	ldr	r2, [r3, #0]
 800a40e:	68bb      	ldr	r3, [r7, #8]
 800a410:	0159      	lsls	r1, r3, #5
 800a412:	68fb      	ldr	r3, [r7, #12]
 800a414:	440b      	add	r3, r1
 800a416:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a41a:	4619      	mov	r1, r3
 800a41c:	4b35      	ldr	r3, [pc, #212]	; (800a4f4 <USB_DeactivateEndpoint+0x1b0>)
 800a41e:	4013      	ands	r3, r2
 800a420:	600b      	str	r3, [r1, #0]
 800a422:	e060      	b.n	800a4e6 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a424:	68bb      	ldr	r3, [r7, #8]
 800a426:	015a      	lsls	r2, r3, #5
 800a428:	68fb      	ldr	r3, [r7, #12]
 800a42a:	4413      	add	r3, r2
 800a42c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a430:	681b      	ldr	r3, [r3, #0]
 800a432:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a436:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a43a:	d11f      	bne.n	800a47c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800a43c:	68bb      	ldr	r3, [r7, #8]
 800a43e:	015a      	lsls	r2, r3, #5
 800a440:	68fb      	ldr	r3, [r7, #12]
 800a442:	4413      	add	r3, r2
 800a444:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a448:	681b      	ldr	r3, [r3, #0]
 800a44a:	68ba      	ldr	r2, [r7, #8]
 800a44c:	0151      	lsls	r1, r2, #5
 800a44e:	68fa      	ldr	r2, [r7, #12]
 800a450:	440a      	add	r2, r1
 800a452:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a456:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800a45a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800a45c:	68bb      	ldr	r3, [r7, #8]
 800a45e:	015a      	lsls	r2, r3, #5
 800a460:	68fb      	ldr	r3, [r7, #12]
 800a462:	4413      	add	r3, r2
 800a464:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a468:	681b      	ldr	r3, [r3, #0]
 800a46a:	68ba      	ldr	r2, [r7, #8]
 800a46c:	0151      	lsls	r1, r2, #5
 800a46e:	68fa      	ldr	r2, [r7, #12]
 800a470:	440a      	add	r2, r1
 800a472:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a476:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a47a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800a47c:	68fb      	ldr	r3, [r7, #12]
 800a47e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a482:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a484:	683b      	ldr	r3, [r7, #0]
 800a486:	781b      	ldrb	r3, [r3, #0]
 800a488:	f003 030f 	and.w	r3, r3, #15
 800a48c:	2101      	movs	r1, #1
 800a48e:	fa01 f303 	lsl.w	r3, r1, r3
 800a492:	041b      	lsls	r3, r3, #16
 800a494:	43db      	mvns	r3, r3
 800a496:	68f9      	ldr	r1, [r7, #12]
 800a498:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a49c:	4013      	ands	r3, r2
 800a49e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800a4a0:	68fb      	ldr	r3, [r7, #12]
 800a4a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a4a6:	69da      	ldr	r2, [r3, #28]
 800a4a8:	683b      	ldr	r3, [r7, #0]
 800a4aa:	781b      	ldrb	r3, [r3, #0]
 800a4ac:	f003 030f 	and.w	r3, r3, #15
 800a4b0:	2101      	movs	r1, #1
 800a4b2:	fa01 f303 	lsl.w	r3, r1, r3
 800a4b6:	041b      	lsls	r3, r3, #16
 800a4b8:	43db      	mvns	r3, r3
 800a4ba:	68f9      	ldr	r1, [r7, #12]
 800a4bc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a4c0:	4013      	ands	r3, r2
 800a4c2:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800a4c4:	68bb      	ldr	r3, [r7, #8]
 800a4c6:	015a      	lsls	r2, r3, #5
 800a4c8:	68fb      	ldr	r3, [r7, #12]
 800a4ca:	4413      	add	r3, r2
 800a4cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a4d0:	681a      	ldr	r2, [r3, #0]
 800a4d2:	68bb      	ldr	r3, [r7, #8]
 800a4d4:	0159      	lsls	r1, r3, #5
 800a4d6:	68fb      	ldr	r3, [r7, #12]
 800a4d8:	440b      	add	r3, r1
 800a4da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a4de:	4619      	mov	r1, r3
 800a4e0:	4b05      	ldr	r3, [pc, #20]	; (800a4f8 <USB_DeactivateEndpoint+0x1b4>)
 800a4e2:	4013      	ands	r3, r2
 800a4e4:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800a4e6:	2300      	movs	r3, #0
}
 800a4e8:	4618      	mov	r0, r3
 800a4ea:	3714      	adds	r7, #20
 800a4ec:	46bd      	mov	sp, r7
 800a4ee:	bc80      	pop	{r7}
 800a4f0:	4770      	bx	lr
 800a4f2:	bf00      	nop
 800a4f4:	ec337800 	.word	0xec337800
 800a4f8:	eff37800 	.word	0xeff37800

0800a4fc <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800a4fc:	b580      	push	{r7, lr}
 800a4fe:	b08a      	sub	sp, #40	; 0x28
 800a500:	af02      	add	r7, sp, #8
 800a502:	60f8      	str	r0, [r7, #12]
 800a504:	60b9      	str	r1, [r7, #8]
 800a506:	4613      	mov	r3, r2
 800a508:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a50a:	68fb      	ldr	r3, [r7, #12]
 800a50c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800a50e:	68bb      	ldr	r3, [r7, #8]
 800a510:	781b      	ldrb	r3, [r3, #0]
 800a512:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800a514:	68bb      	ldr	r3, [r7, #8]
 800a516:	785b      	ldrb	r3, [r3, #1]
 800a518:	2b01      	cmp	r3, #1
 800a51a:	f040 815c 	bne.w	800a7d6 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800a51e:	68bb      	ldr	r3, [r7, #8]
 800a520:	695b      	ldr	r3, [r3, #20]
 800a522:	2b00      	cmp	r3, #0
 800a524:	d132      	bne.n	800a58c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a526:	69bb      	ldr	r3, [r7, #24]
 800a528:	015a      	lsls	r2, r3, #5
 800a52a:	69fb      	ldr	r3, [r7, #28]
 800a52c:	4413      	add	r3, r2
 800a52e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a532:	691b      	ldr	r3, [r3, #16]
 800a534:	69ba      	ldr	r2, [r7, #24]
 800a536:	0151      	lsls	r1, r2, #5
 800a538:	69fa      	ldr	r2, [r7, #28]
 800a53a:	440a      	add	r2, r1
 800a53c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a540:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800a544:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800a548:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800a54a:	69bb      	ldr	r3, [r7, #24]
 800a54c:	015a      	lsls	r2, r3, #5
 800a54e:	69fb      	ldr	r3, [r7, #28]
 800a550:	4413      	add	r3, r2
 800a552:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a556:	691b      	ldr	r3, [r3, #16]
 800a558:	69ba      	ldr	r2, [r7, #24]
 800a55a:	0151      	lsls	r1, r2, #5
 800a55c:	69fa      	ldr	r2, [r7, #28]
 800a55e:	440a      	add	r2, r1
 800a560:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a564:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a568:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a56a:	69bb      	ldr	r3, [r7, #24]
 800a56c:	015a      	lsls	r2, r3, #5
 800a56e:	69fb      	ldr	r3, [r7, #28]
 800a570:	4413      	add	r3, r2
 800a572:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a576:	691b      	ldr	r3, [r3, #16]
 800a578:	69ba      	ldr	r2, [r7, #24]
 800a57a:	0151      	lsls	r1, r2, #5
 800a57c:	69fa      	ldr	r2, [r7, #28]
 800a57e:	440a      	add	r2, r1
 800a580:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a584:	0cdb      	lsrs	r3, r3, #19
 800a586:	04db      	lsls	r3, r3, #19
 800a588:	6113      	str	r3, [r2, #16]
 800a58a:	e074      	b.n	800a676 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a58c:	69bb      	ldr	r3, [r7, #24]
 800a58e:	015a      	lsls	r2, r3, #5
 800a590:	69fb      	ldr	r3, [r7, #28]
 800a592:	4413      	add	r3, r2
 800a594:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a598:	691b      	ldr	r3, [r3, #16]
 800a59a:	69ba      	ldr	r2, [r7, #24]
 800a59c:	0151      	lsls	r1, r2, #5
 800a59e:	69fa      	ldr	r2, [r7, #28]
 800a5a0:	440a      	add	r2, r1
 800a5a2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a5a6:	0cdb      	lsrs	r3, r3, #19
 800a5a8:	04db      	lsls	r3, r3, #19
 800a5aa:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a5ac:	69bb      	ldr	r3, [r7, #24]
 800a5ae:	015a      	lsls	r2, r3, #5
 800a5b0:	69fb      	ldr	r3, [r7, #28]
 800a5b2:	4413      	add	r3, r2
 800a5b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a5b8:	691b      	ldr	r3, [r3, #16]
 800a5ba:	69ba      	ldr	r2, [r7, #24]
 800a5bc:	0151      	lsls	r1, r2, #5
 800a5be:	69fa      	ldr	r2, [r7, #28]
 800a5c0:	440a      	add	r2, r1
 800a5c2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a5c6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800a5ca:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800a5ce:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800a5d0:	69bb      	ldr	r3, [r7, #24]
 800a5d2:	015a      	lsls	r2, r3, #5
 800a5d4:	69fb      	ldr	r3, [r7, #28]
 800a5d6:	4413      	add	r3, r2
 800a5d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a5dc:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800a5de:	68bb      	ldr	r3, [r7, #8]
 800a5e0:	6959      	ldr	r1, [r3, #20]
 800a5e2:	68bb      	ldr	r3, [r7, #8]
 800a5e4:	689b      	ldr	r3, [r3, #8]
 800a5e6:	440b      	add	r3, r1
 800a5e8:	1e59      	subs	r1, r3, #1
 800a5ea:	68bb      	ldr	r3, [r7, #8]
 800a5ec:	689b      	ldr	r3, [r3, #8]
 800a5ee:	fbb1 f3f3 	udiv	r3, r1, r3
 800a5f2:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800a5f4:	4b9d      	ldr	r3, [pc, #628]	; (800a86c <USB_EPStartXfer+0x370>)
 800a5f6:	400b      	ands	r3, r1
 800a5f8:	69b9      	ldr	r1, [r7, #24]
 800a5fa:	0148      	lsls	r0, r1, #5
 800a5fc:	69f9      	ldr	r1, [r7, #28]
 800a5fe:	4401      	add	r1, r0
 800a600:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800a604:	4313      	orrs	r3, r2
 800a606:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800a608:	69bb      	ldr	r3, [r7, #24]
 800a60a:	015a      	lsls	r2, r3, #5
 800a60c:	69fb      	ldr	r3, [r7, #28]
 800a60e:	4413      	add	r3, r2
 800a610:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a614:	691a      	ldr	r2, [r3, #16]
 800a616:	68bb      	ldr	r3, [r7, #8]
 800a618:	695b      	ldr	r3, [r3, #20]
 800a61a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a61e:	69b9      	ldr	r1, [r7, #24]
 800a620:	0148      	lsls	r0, r1, #5
 800a622:	69f9      	ldr	r1, [r7, #28]
 800a624:	4401      	add	r1, r0
 800a626:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800a62a:	4313      	orrs	r3, r2
 800a62c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800a62e:	68bb      	ldr	r3, [r7, #8]
 800a630:	78db      	ldrb	r3, [r3, #3]
 800a632:	2b01      	cmp	r3, #1
 800a634:	d11f      	bne.n	800a676 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800a636:	69bb      	ldr	r3, [r7, #24]
 800a638:	015a      	lsls	r2, r3, #5
 800a63a:	69fb      	ldr	r3, [r7, #28]
 800a63c:	4413      	add	r3, r2
 800a63e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a642:	691b      	ldr	r3, [r3, #16]
 800a644:	69ba      	ldr	r2, [r7, #24]
 800a646:	0151      	lsls	r1, r2, #5
 800a648:	69fa      	ldr	r2, [r7, #28]
 800a64a:	440a      	add	r2, r1
 800a64c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a650:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800a654:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800a656:	69bb      	ldr	r3, [r7, #24]
 800a658:	015a      	lsls	r2, r3, #5
 800a65a:	69fb      	ldr	r3, [r7, #28]
 800a65c:	4413      	add	r3, r2
 800a65e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a662:	691b      	ldr	r3, [r3, #16]
 800a664:	69ba      	ldr	r2, [r7, #24]
 800a666:	0151      	lsls	r1, r2, #5
 800a668:	69fa      	ldr	r2, [r7, #28]
 800a66a:	440a      	add	r2, r1
 800a66c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a670:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800a674:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800a676:	79fb      	ldrb	r3, [r7, #7]
 800a678:	2b01      	cmp	r3, #1
 800a67a:	d14b      	bne.n	800a714 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800a67c:	68bb      	ldr	r3, [r7, #8]
 800a67e:	691b      	ldr	r3, [r3, #16]
 800a680:	2b00      	cmp	r3, #0
 800a682:	d009      	beq.n	800a698 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800a684:	69bb      	ldr	r3, [r7, #24]
 800a686:	015a      	lsls	r2, r3, #5
 800a688:	69fb      	ldr	r3, [r7, #28]
 800a68a:	4413      	add	r3, r2
 800a68c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a690:	461a      	mov	r2, r3
 800a692:	68bb      	ldr	r3, [r7, #8]
 800a694:	691b      	ldr	r3, [r3, #16]
 800a696:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800a698:	68bb      	ldr	r3, [r7, #8]
 800a69a:	78db      	ldrb	r3, [r3, #3]
 800a69c:	2b01      	cmp	r3, #1
 800a69e:	d128      	bne.n	800a6f2 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800a6a0:	69fb      	ldr	r3, [r7, #28]
 800a6a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a6a6:	689b      	ldr	r3, [r3, #8]
 800a6a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a6ac:	2b00      	cmp	r3, #0
 800a6ae:	d110      	bne.n	800a6d2 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800a6b0:	69bb      	ldr	r3, [r7, #24]
 800a6b2:	015a      	lsls	r2, r3, #5
 800a6b4:	69fb      	ldr	r3, [r7, #28]
 800a6b6:	4413      	add	r3, r2
 800a6b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a6bc:	681b      	ldr	r3, [r3, #0]
 800a6be:	69ba      	ldr	r2, [r7, #24]
 800a6c0:	0151      	lsls	r1, r2, #5
 800a6c2:	69fa      	ldr	r2, [r7, #28]
 800a6c4:	440a      	add	r2, r1
 800a6c6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a6ca:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800a6ce:	6013      	str	r3, [r2, #0]
 800a6d0:	e00f      	b.n	800a6f2 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800a6d2:	69bb      	ldr	r3, [r7, #24]
 800a6d4:	015a      	lsls	r2, r3, #5
 800a6d6:	69fb      	ldr	r3, [r7, #28]
 800a6d8:	4413      	add	r3, r2
 800a6da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a6de:	681b      	ldr	r3, [r3, #0]
 800a6e0:	69ba      	ldr	r2, [r7, #24]
 800a6e2:	0151      	lsls	r1, r2, #5
 800a6e4:	69fa      	ldr	r2, [r7, #28]
 800a6e6:	440a      	add	r2, r1
 800a6e8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a6ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a6f0:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800a6f2:	69bb      	ldr	r3, [r7, #24]
 800a6f4:	015a      	lsls	r2, r3, #5
 800a6f6:	69fb      	ldr	r3, [r7, #28]
 800a6f8:	4413      	add	r3, r2
 800a6fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a6fe:	681b      	ldr	r3, [r3, #0]
 800a700:	69ba      	ldr	r2, [r7, #24]
 800a702:	0151      	lsls	r1, r2, #5
 800a704:	69fa      	ldr	r2, [r7, #28]
 800a706:	440a      	add	r2, r1
 800a708:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a70c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a710:	6013      	str	r3, [r2, #0]
 800a712:	e12f      	b.n	800a974 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800a714:	69bb      	ldr	r3, [r7, #24]
 800a716:	015a      	lsls	r2, r3, #5
 800a718:	69fb      	ldr	r3, [r7, #28]
 800a71a:	4413      	add	r3, r2
 800a71c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a720:	681b      	ldr	r3, [r3, #0]
 800a722:	69ba      	ldr	r2, [r7, #24]
 800a724:	0151      	lsls	r1, r2, #5
 800a726:	69fa      	ldr	r2, [r7, #28]
 800a728:	440a      	add	r2, r1
 800a72a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a72e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a732:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800a734:	68bb      	ldr	r3, [r7, #8]
 800a736:	78db      	ldrb	r3, [r3, #3]
 800a738:	2b01      	cmp	r3, #1
 800a73a:	d015      	beq.n	800a768 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800a73c:	68bb      	ldr	r3, [r7, #8]
 800a73e:	695b      	ldr	r3, [r3, #20]
 800a740:	2b00      	cmp	r3, #0
 800a742:	f000 8117 	beq.w	800a974 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800a746:	69fb      	ldr	r3, [r7, #28]
 800a748:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a74c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a74e:	68bb      	ldr	r3, [r7, #8]
 800a750:	781b      	ldrb	r3, [r3, #0]
 800a752:	f003 030f 	and.w	r3, r3, #15
 800a756:	2101      	movs	r1, #1
 800a758:	fa01 f303 	lsl.w	r3, r1, r3
 800a75c:	69f9      	ldr	r1, [r7, #28]
 800a75e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a762:	4313      	orrs	r3, r2
 800a764:	634b      	str	r3, [r1, #52]	; 0x34
 800a766:	e105      	b.n	800a974 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800a768:	69fb      	ldr	r3, [r7, #28]
 800a76a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a76e:	689b      	ldr	r3, [r3, #8]
 800a770:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a774:	2b00      	cmp	r3, #0
 800a776:	d110      	bne.n	800a79a <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800a778:	69bb      	ldr	r3, [r7, #24]
 800a77a:	015a      	lsls	r2, r3, #5
 800a77c:	69fb      	ldr	r3, [r7, #28]
 800a77e:	4413      	add	r3, r2
 800a780:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a784:	681b      	ldr	r3, [r3, #0]
 800a786:	69ba      	ldr	r2, [r7, #24]
 800a788:	0151      	lsls	r1, r2, #5
 800a78a:	69fa      	ldr	r2, [r7, #28]
 800a78c:	440a      	add	r2, r1
 800a78e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a792:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800a796:	6013      	str	r3, [r2, #0]
 800a798:	e00f      	b.n	800a7ba <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800a79a:	69bb      	ldr	r3, [r7, #24]
 800a79c:	015a      	lsls	r2, r3, #5
 800a79e:	69fb      	ldr	r3, [r7, #28]
 800a7a0:	4413      	add	r3, r2
 800a7a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a7a6:	681b      	ldr	r3, [r3, #0]
 800a7a8:	69ba      	ldr	r2, [r7, #24]
 800a7aa:	0151      	lsls	r1, r2, #5
 800a7ac:	69fa      	ldr	r2, [r7, #28]
 800a7ae:	440a      	add	r2, r1
 800a7b0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a7b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a7b8:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800a7ba:	68bb      	ldr	r3, [r7, #8]
 800a7bc:	68d9      	ldr	r1, [r3, #12]
 800a7be:	68bb      	ldr	r3, [r7, #8]
 800a7c0:	781a      	ldrb	r2, [r3, #0]
 800a7c2:	68bb      	ldr	r3, [r7, #8]
 800a7c4:	695b      	ldr	r3, [r3, #20]
 800a7c6:	b298      	uxth	r0, r3
 800a7c8:	79fb      	ldrb	r3, [r7, #7]
 800a7ca:	9300      	str	r3, [sp, #0]
 800a7cc:	4603      	mov	r3, r0
 800a7ce:	68f8      	ldr	r0, [r7, #12]
 800a7d0:	f000 fa2a 	bl	800ac28 <USB_WritePacket>
 800a7d4:	e0ce      	b.n	800a974 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800a7d6:	69bb      	ldr	r3, [r7, #24]
 800a7d8:	015a      	lsls	r2, r3, #5
 800a7da:	69fb      	ldr	r3, [r7, #28]
 800a7dc:	4413      	add	r3, r2
 800a7de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a7e2:	691b      	ldr	r3, [r3, #16]
 800a7e4:	69ba      	ldr	r2, [r7, #24]
 800a7e6:	0151      	lsls	r1, r2, #5
 800a7e8:	69fa      	ldr	r2, [r7, #28]
 800a7ea:	440a      	add	r2, r1
 800a7ec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a7f0:	0cdb      	lsrs	r3, r3, #19
 800a7f2:	04db      	lsls	r3, r3, #19
 800a7f4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800a7f6:	69bb      	ldr	r3, [r7, #24]
 800a7f8:	015a      	lsls	r2, r3, #5
 800a7fa:	69fb      	ldr	r3, [r7, #28]
 800a7fc:	4413      	add	r3, r2
 800a7fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a802:	691b      	ldr	r3, [r3, #16]
 800a804:	69ba      	ldr	r2, [r7, #24]
 800a806:	0151      	lsls	r1, r2, #5
 800a808:	69fa      	ldr	r2, [r7, #28]
 800a80a:	440a      	add	r2, r1
 800a80c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a810:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800a814:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800a818:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800a81a:	68bb      	ldr	r3, [r7, #8]
 800a81c:	695b      	ldr	r3, [r3, #20]
 800a81e:	2b00      	cmp	r3, #0
 800a820:	d126      	bne.n	800a870 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800a822:	69bb      	ldr	r3, [r7, #24]
 800a824:	015a      	lsls	r2, r3, #5
 800a826:	69fb      	ldr	r3, [r7, #28]
 800a828:	4413      	add	r3, r2
 800a82a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a82e:	691a      	ldr	r2, [r3, #16]
 800a830:	68bb      	ldr	r3, [r7, #8]
 800a832:	689b      	ldr	r3, [r3, #8]
 800a834:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a838:	69b9      	ldr	r1, [r7, #24]
 800a83a:	0148      	lsls	r0, r1, #5
 800a83c:	69f9      	ldr	r1, [r7, #28]
 800a83e:	4401      	add	r1, r0
 800a840:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800a844:	4313      	orrs	r3, r2
 800a846:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a848:	69bb      	ldr	r3, [r7, #24]
 800a84a:	015a      	lsls	r2, r3, #5
 800a84c:	69fb      	ldr	r3, [r7, #28]
 800a84e:	4413      	add	r3, r2
 800a850:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a854:	691b      	ldr	r3, [r3, #16]
 800a856:	69ba      	ldr	r2, [r7, #24]
 800a858:	0151      	lsls	r1, r2, #5
 800a85a:	69fa      	ldr	r2, [r7, #28]
 800a85c:	440a      	add	r2, r1
 800a85e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a862:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a866:	6113      	str	r3, [r2, #16]
 800a868:	e036      	b.n	800a8d8 <USB_EPStartXfer+0x3dc>
 800a86a:	bf00      	nop
 800a86c:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800a870:	68bb      	ldr	r3, [r7, #8]
 800a872:	695a      	ldr	r2, [r3, #20]
 800a874:	68bb      	ldr	r3, [r7, #8]
 800a876:	689b      	ldr	r3, [r3, #8]
 800a878:	4413      	add	r3, r2
 800a87a:	1e5a      	subs	r2, r3, #1
 800a87c:	68bb      	ldr	r3, [r7, #8]
 800a87e:	689b      	ldr	r3, [r3, #8]
 800a880:	fbb2 f3f3 	udiv	r3, r2, r3
 800a884:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800a886:	69bb      	ldr	r3, [r7, #24]
 800a888:	015a      	lsls	r2, r3, #5
 800a88a:	69fb      	ldr	r3, [r7, #28]
 800a88c:	4413      	add	r3, r2
 800a88e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a892:	691a      	ldr	r2, [r3, #16]
 800a894:	8afb      	ldrh	r3, [r7, #22]
 800a896:	04d9      	lsls	r1, r3, #19
 800a898:	4b39      	ldr	r3, [pc, #228]	; (800a980 <USB_EPStartXfer+0x484>)
 800a89a:	400b      	ands	r3, r1
 800a89c:	69b9      	ldr	r1, [r7, #24]
 800a89e:	0148      	lsls	r0, r1, #5
 800a8a0:	69f9      	ldr	r1, [r7, #28]
 800a8a2:	4401      	add	r1, r0
 800a8a4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800a8a8:	4313      	orrs	r3, r2
 800a8aa:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800a8ac:	69bb      	ldr	r3, [r7, #24]
 800a8ae:	015a      	lsls	r2, r3, #5
 800a8b0:	69fb      	ldr	r3, [r7, #28]
 800a8b2:	4413      	add	r3, r2
 800a8b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a8b8:	691a      	ldr	r2, [r3, #16]
 800a8ba:	68bb      	ldr	r3, [r7, #8]
 800a8bc:	689b      	ldr	r3, [r3, #8]
 800a8be:	8af9      	ldrh	r1, [r7, #22]
 800a8c0:	fb01 f303 	mul.w	r3, r1, r3
 800a8c4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a8c8:	69b9      	ldr	r1, [r7, #24]
 800a8ca:	0148      	lsls	r0, r1, #5
 800a8cc:	69f9      	ldr	r1, [r7, #28]
 800a8ce:	4401      	add	r1, r0
 800a8d0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800a8d4:	4313      	orrs	r3, r2
 800a8d6:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800a8d8:	79fb      	ldrb	r3, [r7, #7]
 800a8da:	2b01      	cmp	r3, #1
 800a8dc:	d10d      	bne.n	800a8fa <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800a8de:	68bb      	ldr	r3, [r7, #8]
 800a8e0:	68db      	ldr	r3, [r3, #12]
 800a8e2:	2b00      	cmp	r3, #0
 800a8e4:	d009      	beq.n	800a8fa <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800a8e6:	68bb      	ldr	r3, [r7, #8]
 800a8e8:	68d9      	ldr	r1, [r3, #12]
 800a8ea:	69bb      	ldr	r3, [r7, #24]
 800a8ec:	015a      	lsls	r2, r3, #5
 800a8ee:	69fb      	ldr	r3, [r7, #28]
 800a8f0:	4413      	add	r3, r2
 800a8f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a8f6:	460a      	mov	r2, r1
 800a8f8:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800a8fa:	68bb      	ldr	r3, [r7, #8]
 800a8fc:	78db      	ldrb	r3, [r3, #3]
 800a8fe:	2b01      	cmp	r3, #1
 800a900:	d128      	bne.n	800a954 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800a902:	69fb      	ldr	r3, [r7, #28]
 800a904:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a908:	689b      	ldr	r3, [r3, #8]
 800a90a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a90e:	2b00      	cmp	r3, #0
 800a910:	d110      	bne.n	800a934 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800a912:	69bb      	ldr	r3, [r7, #24]
 800a914:	015a      	lsls	r2, r3, #5
 800a916:	69fb      	ldr	r3, [r7, #28]
 800a918:	4413      	add	r3, r2
 800a91a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a91e:	681b      	ldr	r3, [r3, #0]
 800a920:	69ba      	ldr	r2, [r7, #24]
 800a922:	0151      	lsls	r1, r2, #5
 800a924:	69fa      	ldr	r2, [r7, #28]
 800a926:	440a      	add	r2, r1
 800a928:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a92c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800a930:	6013      	str	r3, [r2, #0]
 800a932:	e00f      	b.n	800a954 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800a934:	69bb      	ldr	r3, [r7, #24]
 800a936:	015a      	lsls	r2, r3, #5
 800a938:	69fb      	ldr	r3, [r7, #28]
 800a93a:	4413      	add	r3, r2
 800a93c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a940:	681b      	ldr	r3, [r3, #0]
 800a942:	69ba      	ldr	r2, [r7, #24]
 800a944:	0151      	lsls	r1, r2, #5
 800a946:	69fa      	ldr	r2, [r7, #28]
 800a948:	440a      	add	r2, r1
 800a94a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a94e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a952:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800a954:	69bb      	ldr	r3, [r7, #24]
 800a956:	015a      	lsls	r2, r3, #5
 800a958:	69fb      	ldr	r3, [r7, #28]
 800a95a:	4413      	add	r3, r2
 800a95c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a960:	681b      	ldr	r3, [r3, #0]
 800a962:	69ba      	ldr	r2, [r7, #24]
 800a964:	0151      	lsls	r1, r2, #5
 800a966:	69fa      	ldr	r2, [r7, #28]
 800a968:	440a      	add	r2, r1
 800a96a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a96e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a972:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a974:	2300      	movs	r3, #0
}
 800a976:	4618      	mov	r0, r3
 800a978:	3720      	adds	r7, #32
 800a97a:	46bd      	mov	sp, r7
 800a97c:	bd80      	pop	{r7, pc}
 800a97e:	bf00      	nop
 800a980:	1ff80000 	.word	0x1ff80000

0800a984 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800a984:	b480      	push	{r7}
 800a986:	b087      	sub	sp, #28
 800a988:	af00      	add	r7, sp, #0
 800a98a:	60f8      	str	r0, [r7, #12]
 800a98c:	60b9      	str	r1, [r7, #8]
 800a98e:	4613      	mov	r3, r2
 800a990:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a992:	68fb      	ldr	r3, [r7, #12]
 800a994:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800a996:	68bb      	ldr	r3, [r7, #8]
 800a998:	781b      	ldrb	r3, [r3, #0]
 800a99a:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800a99c:	68bb      	ldr	r3, [r7, #8]
 800a99e:	785b      	ldrb	r3, [r3, #1]
 800a9a0:	2b01      	cmp	r3, #1
 800a9a2:	f040 80cd 	bne.w	800ab40 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800a9a6:	68bb      	ldr	r3, [r7, #8]
 800a9a8:	695b      	ldr	r3, [r3, #20]
 800a9aa:	2b00      	cmp	r3, #0
 800a9ac:	d132      	bne.n	800aa14 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a9ae:	693b      	ldr	r3, [r7, #16]
 800a9b0:	015a      	lsls	r2, r3, #5
 800a9b2:	697b      	ldr	r3, [r7, #20]
 800a9b4:	4413      	add	r3, r2
 800a9b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a9ba:	691b      	ldr	r3, [r3, #16]
 800a9bc:	693a      	ldr	r2, [r7, #16]
 800a9be:	0151      	lsls	r1, r2, #5
 800a9c0:	697a      	ldr	r2, [r7, #20]
 800a9c2:	440a      	add	r2, r1
 800a9c4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a9c8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800a9cc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800a9d0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800a9d2:	693b      	ldr	r3, [r7, #16]
 800a9d4:	015a      	lsls	r2, r3, #5
 800a9d6:	697b      	ldr	r3, [r7, #20]
 800a9d8:	4413      	add	r3, r2
 800a9da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a9de:	691b      	ldr	r3, [r3, #16]
 800a9e0:	693a      	ldr	r2, [r7, #16]
 800a9e2:	0151      	lsls	r1, r2, #5
 800a9e4:	697a      	ldr	r2, [r7, #20]
 800a9e6:	440a      	add	r2, r1
 800a9e8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a9ec:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a9f0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a9f2:	693b      	ldr	r3, [r7, #16]
 800a9f4:	015a      	lsls	r2, r3, #5
 800a9f6:	697b      	ldr	r3, [r7, #20]
 800a9f8:	4413      	add	r3, r2
 800a9fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a9fe:	691b      	ldr	r3, [r3, #16]
 800aa00:	693a      	ldr	r2, [r7, #16]
 800aa02:	0151      	lsls	r1, r2, #5
 800aa04:	697a      	ldr	r2, [r7, #20]
 800aa06:	440a      	add	r2, r1
 800aa08:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800aa0c:	0cdb      	lsrs	r3, r3, #19
 800aa0e:	04db      	lsls	r3, r3, #19
 800aa10:	6113      	str	r3, [r2, #16]
 800aa12:	e04e      	b.n	800aab2 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800aa14:	693b      	ldr	r3, [r7, #16]
 800aa16:	015a      	lsls	r2, r3, #5
 800aa18:	697b      	ldr	r3, [r7, #20]
 800aa1a:	4413      	add	r3, r2
 800aa1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aa20:	691b      	ldr	r3, [r3, #16]
 800aa22:	693a      	ldr	r2, [r7, #16]
 800aa24:	0151      	lsls	r1, r2, #5
 800aa26:	697a      	ldr	r2, [r7, #20]
 800aa28:	440a      	add	r2, r1
 800aa2a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800aa2e:	0cdb      	lsrs	r3, r3, #19
 800aa30:	04db      	lsls	r3, r3, #19
 800aa32:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800aa34:	693b      	ldr	r3, [r7, #16]
 800aa36:	015a      	lsls	r2, r3, #5
 800aa38:	697b      	ldr	r3, [r7, #20]
 800aa3a:	4413      	add	r3, r2
 800aa3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aa40:	691b      	ldr	r3, [r3, #16]
 800aa42:	693a      	ldr	r2, [r7, #16]
 800aa44:	0151      	lsls	r1, r2, #5
 800aa46:	697a      	ldr	r2, [r7, #20]
 800aa48:	440a      	add	r2, r1
 800aa4a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800aa4e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800aa52:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800aa56:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800aa58:	68bb      	ldr	r3, [r7, #8]
 800aa5a:	695a      	ldr	r2, [r3, #20]
 800aa5c:	68bb      	ldr	r3, [r7, #8]
 800aa5e:	689b      	ldr	r3, [r3, #8]
 800aa60:	429a      	cmp	r2, r3
 800aa62:	d903      	bls.n	800aa6c <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800aa64:	68bb      	ldr	r3, [r7, #8]
 800aa66:	689a      	ldr	r2, [r3, #8]
 800aa68:	68bb      	ldr	r3, [r7, #8]
 800aa6a:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800aa6c:	693b      	ldr	r3, [r7, #16]
 800aa6e:	015a      	lsls	r2, r3, #5
 800aa70:	697b      	ldr	r3, [r7, #20]
 800aa72:	4413      	add	r3, r2
 800aa74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aa78:	691b      	ldr	r3, [r3, #16]
 800aa7a:	693a      	ldr	r2, [r7, #16]
 800aa7c:	0151      	lsls	r1, r2, #5
 800aa7e:	697a      	ldr	r2, [r7, #20]
 800aa80:	440a      	add	r2, r1
 800aa82:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800aa86:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800aa8a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800aa8c:	693b      	ldr	r3, [r7, #16]
 800aa8e:	015a      	lsls	r2, r3, #5
 800aa90:	697b      	ldr	r3, [r7, #20]
 800aa92:	4413      	add	r3, r2
 800aa94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aa98:	691a      	ldr	r2, [r3, #16]
 800aa9a:	68bb      	ldr	r3, [r7, #8]
 800aa9c:	695b      	ldr	r3, [r3, #20]
 800aa9e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800aaa2:	6939      	ldr	r1, [r7, #16]
 800aaa4:	0148      	lsls	r0, r1, #5
 800aaa6:	6979      	ldr	r1, [r7, #20]
 800aaa8:	4401      	add	r1, r0
 800aaaa:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800aaae:	4313      	orrs	r3, r2
 800aab0:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800aab2:	79fb      	ldrb	r3, [r7, #7]
 800aab4:	2b01      	cmp	r3, #1
 800aab6:	d11e      	bne.n	800aaf6 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800aab8:	68bb      	ldr	r3, [r7, #8]
 800aaba:	691b      	ldr	r3, [r3, #16]
 800aabc:	2b00      	cmp	r3, #0
 800aabe:	d009      	beq.n	800aad4 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800aac0:	693b      	ldr	r3, [r7, #16]
 800aac2:	015a      	lsls	r2, r3, #5
 800aac4:	697b      	ldr	r3, [r7, #20]
 800aac6:	4413      	add	r3, r2
 800aac8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aacc:	461a      	mov	r2, r3
 800aace:	68bb      	ldr	r3, [r7, #8]
 800aad0:	691b      	ldr	r3, [r3, #16]
 800aad2:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800aad4:	693b      	ldr	r3, [r7, #16]
 800aad6:	015a      	lsls	r2, r3, #5
 800aad8:	697b      	ldr	r3, [r7, #20]
 800aada:	4413      	add	r3, r2
 800aadc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aae0:	681b      	ldr	r3, [r3, #0]
 800aae2:	693a      	ldr	r2, [r7, #16]
 800aae4:	0151      	lsls	r1, r2, #5
 800aae6:	697a      	ldr	r2, [r7, #20]
 800aae8:	440a      	add	r2, r1
 800aaea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800aaee:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800aaf2:	6013      	str	r3, [r2, #0]
 800aaf4:	e092      	b.n	800ac1c <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800aaf6:	693b      	ldr	r3, [r7, #16]
 800aaf8:	015a      	lsls	r2, r3, #5
 800aafa:	697b      	ldr	r3, [r7, #20]
 800aafc:	4413      	add	r3, r2
 800aafe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ab02:	681b      	ldr	r3, [r3, #0]
 800ab04:	693a      	ldr	r2, [r7, #16]
 800ab06:	0151      	lsls	r1, r2, #5
 800ab08:	697a      	ldr	r2, [r7, #20]
 800ab0a:	440a      	add	r2, r1
 800ab0c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ab10:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800ab14:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800ab16:	68bb      	ldr	r3, [r7, #8]
 800ab18:	695b      	ldr	r3, [r3, #20]
 800ab1a:	2b00      	cmp	r3, #0
 800ab1c:	d07e      	beq.n	800ac1c <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800ab1e:	697b      	ldr	r3, [r7, #20]
 800ab20:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ab24:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ab26:	68bb      	ldr	r3, [r7, #8]
 800ab28:	781b      	ldrb	r3, [r3, #0]
 800ab2a:	f003 030f 	and.w	r3, r3, #15
 800ab2e:	2101      	movs	r1, #1
 800ab30:	fa01 f303 	lsl.w	r3, r1, r3
 800ab34:	6979      	ldr	r1, [r7, #20]
 800ab36:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ab3a:	4313      	orrs	r3, r2
 800ab3c:	634b      	str	r3, [r1, #52]	; 0x34
 800ab3e:	e06d      	b.n	800ac1c <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800ab40:	693b      	ldr	r3, [r7, #16]
 800ab42:	015a      	lsls	r2, r3, #5
 800ab44:	697b      	ldr	r3, [r7, #20]
 800ab46:	4413      	add	r3, r2
 800ab48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ab4c:	691b      	ldr	r3, [r3, #16]
 800ab4e:	693a      	ldr	r2, [r7, #16]
 800ab50:	0151      	lsls	r1, r2, #5
 800ab52:	697a      	ldr	r2, [r7, #20]
 800ab54:	440a      	add	r2, r1
 800ab56:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ab5a:	0cdb      	lsrs	r3, r3, #19
 800ab5c:	04db      	lsls	r3, r3, #19
 800ab5e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800ab60:	693b      	ldr	r3, [r7, #16]
 800ab62:	015a      	lsls	r2, r3, #5
 800ab64:	697b      	ldr	r3, [r7, #20]
 800ab66:	4413      	add	r3, r2
 800ab68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ab6c:	691b      	ldr	r3, [r3, #16]
 800ab6e:	693a      	ldr	r2, [r7, #16]
 800ab70:	0151      	lsls	r1, r2, #5
 800ab72:	697a      	ldr	r2, [r7, #20]
 800ab74:	440a      	add	r2, r1
 800ab76:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ab7a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800ab7e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800ab82:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800ab84:	68bb      	ldr	r3, [r7, #8]
 800ab86:	695b      	ldr	r3, [r3, #20]
 800ab88:	2b00      	cmp	r3, #0
 800ab8a:	d003      	beq.n	800ab94 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 800ab8c:	68bb      	ldr	r3, [r7, #8]
 800ab8e:	689a      	ldr	r2, [r3, #8]
 800ab90:	68bb      	ldr	r3, [r7, #8]
 800ab92:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800ab94:	693b      	ldr	r3, [r7, #16]
 800ab96:	015a      	lsls	r2, r3, #5
 800ab98:	697b      	ldr	r3, [r7, #20]
 800ab9a:	4413      	add	r3, r2
 800ab9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aba0:	691b      	ldr	r3, [r3, #16]
 800aba2:	693a      	ldr	r2, [r7, #16]
 800aba4:	0151      	lsls	r1, r2, #5
 800aba6:	697a      	ldr	r2, [r7, #20]
 800aba8:	440a      	add	r2, r1
 800abaa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800abae:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800abb2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 800abb4:	693b      	ldr	r3, [r7, #16]
 800abb6:	015a      	lsls	r2, r3, #5
 800abb8:	697b      	ldr	r3, [r7, #20]
 800abba:	4413      	add	r3, r2
 800abbc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800abc0:	691a      	ldr	r2, [r3, #16]
 800abc2:	68bb      	ldr	r3, [r7, #8]
 800abc4:	689b      	ldr	r3, [r3, #8]
 800abc6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800abca:	6939      	ldr	r1, [r7, #16]
 800abcc:	0148      	lsls	r0, r1, #5
 800abce:	6979      	ldr	r1, [r7, #20]
 800abd0:	4401      	add	r1, r0
 800abd2:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800abd6:	4313      	orrs	r3, r2
 800abd8:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800abda:	79fb      	ldrb	r3, [r7, #7]
 800abdc:	2b01      	cmp	r3, #1
 800abde:	d10d      	bne.n	800abfc <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800abe0:	68bb      	ldr	r3, [r7, #8]
 800abe2:	68db      	ldr	r3, [r3, #12]
 800abe4:	2b00      	cmp	r3, #0
 800abe6:	d009      	beq.n	800abfc <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800abe8:	68bb      	ldr	r3, [r7, #8]
 800abea:	68d9      	ldr	r1, [r3, #12]
 800abec:	693b      	ldr	r3, [r7, #16]
 800abee:	015a      	lsls	r2, r3, #5
 800abf0:	697b      	ldr	r3, [r7, #20]
 800abf2:	4413      	add	r3, r2
 800abf4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800abf8:	460a      	mov	r2, r1
 800abfa:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800abfc:	693b      	ldr	r3, [r7, #16]
 800abfe:	015a      	lsls	r2, r3, #5
 800ac00:	697b      	ldr	r3, [r7, #20]
 800ac02:	4413      	add	r3, r2
 800ac04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ac08:	681b      	ldr	r3, [r3, #0]
 800ac0a:	693a      	ldr	r2, [r7, #16]
 800ac0c:	0151      	lsls	r1, r2, #5
 800ac0e:	697a      	ldr	r2, [r7, #20]
 800ac10:	440a      	add	r2, r1
 800ac12:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ac16:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800ac1a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800ac1c:	2300      	movs	r3, #0
}
 800ac1e:	4618      	mov	r0, r3
 800ac20:	371c      	adds	r7, #28
 800ac22:	46bd      	mov	sp, r7
 800ac24:	bc80      	pop	{r7}
 800ac26:	4770      	bx	lr

0800ac28 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800ac28:	b480      	push	{r7}
 800ac2a:	b089      	sub	sp, #36	; 0x24
 800ac2c:	af00      	add	r7, sp, #0
 800ac2e:	60f8      	str	r0, [r7, #12]
 800ac30:	60b9      	str	r1, [r7, #8]
 800ac32:	4611      	mov	r1, r2
 800ac34:	461a      	mov	r2, r3
 800ac36:	460b      	mov	r3, r1
 800ac38:	71fb      	strb	r3, [r7, #7]
 800ac3a:	4613      	mov	r3, r2
 800ac3c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ac3e:	68fb      	ldr	r3, [r7, #12]
 800ac40:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800ac42:	68bb      	ldr	r3, [r7, #8]
 800ac44:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800ac46:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800ac4a:	2b00      	cmp	r3, #0
 800ac4c:	d123      	bne.n	800ac96 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800ac4e:	88bb      	ldrh	r3, [r7, #4]
 800ac50:	3303      	adds	r3, #3
 800ac52:	089b      	lsrs	r3, r3, #2
 800ac54:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800ac56:	2300      	movs	r3, #0
 800ac58:	61bb      	str	r3, [r7, #24]
 800ac5a:	e018      	b.n	800ac8e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800ac5c:	79fb      	ldrb	r3, [r7, #7]
 800ac5e:	031a      	lsls	r2, r3, #12
 800ac60:	697b      	ldr	r3, [r7, #20]
 800ac62:	4413      	add	r3, r2
 800ac64:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ac68:	461a      	mov	r2, r3
 800ac6a:	69fb      	ldr	r3, [r7, #28]
 800ac6c:	681b      	ldr	r3, [r3, #0]
 800ac6e:	6013      	str	r3, [r2, #0]
      pSrc++;
 800ac70:	69fb      	ldr	r3, [r7, #28]
 800ac72:	3301      	adds	r3, #1
 800ac74:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800ac76:	69fb      	ldr	r3, [r7, #28]
 800ac78:	3301      	adds	r3, #1
 800ac7a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800ac7c:	69fb      	ldr	r3, [r7, #28]
 800ac7e:	3301      	adds	r3, #1
 800ac80:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800ac82:	69fb      	ldr	r3, [r7, #28]
 800ac84:	3301      	adds	r3, #1
 800ac86:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800ac88:	69bb      	ldr	r3, [r7, #24]
 800ac8a:	3301      	adds	r3, #1
 800ac8c:	61bb      	str	r3, [r7, #24]
 800ac8e:	69ba      	ldr	r2, [r7, #24]
 800ac90:	693b      	ldr	r3, [r7, #16]
 800ac92:	429a      	cmp	r2, r3
 800ac94:	d3e2      	bcc.n	800ac5c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800ac96:	2300      	movs	r3, #0
}
 800ac98:	4618      	mov	r0, r3
 800ac9a:	3724      	adds	r7, #36	; 0x24
 800ac9c:	46bd      	mov	sp, r7
 800ac9e:	bc80      	pop	{r7}
 800aca0:	4770      	bx	lr

0800aca2 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800aca2:	b480      	push	{r7}
 800aca4:	b08b      	sub	sp, #44	; 0x2c
 800aca6:	af00      	add	r7, sp, #0
 800aca8:	60f8      	str	r0, [r7, #12]
 800acaa:	60b9      	str	r1, [r7, #8]
 800acac:	4613      	mov	r3, r2
 800acae:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800acb0:	68fb      	ldr	r3, [r7, #12]
 800acb2:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800acb4:	68bb      	ldr	r3, [r7, #8]
 800acb6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800acb8:	88fb      	ldrh	r3, [r7, #6]
 800acba:	089b      	lsrs	r3, r3, #2
 800acbc:	b29b      	uxth	r3, r3
 800acbe:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800acc0:	88fb      	ldrh	r3, [r7, #6]
 800acc2:	f003 0303 	and.w	r3, r3, #3
 800acc6:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800acc8:	2300      	movs	r3, #0
 800acca:	623b      	str	r3, [r7, #32]
 800accc:	e014      	b.n	800acf8 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800acce:	69bb      	ldr	r3, [r7, #24]
 800acd0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800acd4:	681a      	ldr	r2, [r3, #0]
 800acd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acd8:	601a      	str	r2, [r3, #0]
    pDest++;
 800acda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acdc:	3301      	adds	r3, #1
 800acde:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800ace0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ace2:	3301      	adds	r3, #1
 800ace4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800ace6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ace8:	3301      	adds	r3, #1
 800acea:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800acec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acee:	3301      	adds	r3, #1
 800acf0:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800acf2:	6a3b      	ldr	r3, [r7, #32]
 800acf4:	3301      	adds	r3, #1
 800acf6:	623b      	str	r3, [r7, #32]
 800acf8:	6a3a      	ldr	r2, [r7, #32]
 800acfa:	697b      	ldr	r3, [r7, #20]
 800acfc:	429a      	cmp	r2, r3
 800acfe:	d3e6      	bcc.n	800acce <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800ad00:	8bfb      	ldrh	r3, [r7, #30]
 800ad02:	2b00      	cmp	r3, #0
 800ad04:	d01e      	beq.n	800ad44 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800ad06:	2300      	movs	r3, #0
 800ad08:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800ad0a:	69bb      	ldr	r3, [r7, #24]
 800ad0c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ad10:	461a      	mov	r2, r3
 800ad12:	f107 0310 	add.w	r3, r7, #16
 800ad16:	6812      	ldr	r2, [r2, #0]
 800ad18:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800ad1a:	693a      	ldr	r2, [r7, #16]
 800ad1c:	6a3b      	ldr	r3, [r7, #32]
 800ad1e:	b2db      	uxtb	r3, r3
 800ad20:	00db      	lsls	r3, r3, #3
 800ad22:	fa22 f303 	lsr.w	r3, r2, r3
 800ad26:	b2da      	uxtb	r2, r3
 800ad28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad2a:	701a      	strb	r2, [r3, #0]
      i++;
 800ad2c:	6a3b      	ldr	r3, [r7, #32]
 800ad2e:	3301      	adds	r3, #1
 800ad30:	623b      	str	r3, [r7, #32]
      pDest++;
 800ad32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad34:	3301      	adds	r3, #1
 800ad36:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800ad38:	8bfb      	ldrh	r3, [r7, #30]
 800ad3a:	3b01      	subs	r3, #1
 800ad3c:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800ad3e:	8bfb      	ldrh	r3, [r7, #30]
 800ad40:	2b00      	cmp	r3, #0
 800ad42:	d1ea      	bne.n	800ad1a <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800ad44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800ad46:	4618      	mov	r0, r3
 800ad48:	372c      	adds	r7, #44	; 0x2c
 800ad4a:	46bd      	mov	sp, r7
 800ad4c:	bc80      	pop	{r7}
 800ad4e:	4770      	bx	lr

0800ad50 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800ad50:	b480      	push	{r7}
 800ad52:	b085      	sub	sp, #20
 800ad54:	af00      	add	r7, sp, #0
 800ad56:	6078      	str	r0, [r7, #4]
 800ad58:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800ad5e:	683b      	ldr	r3, [r7, #0]
 800ad60:	781b      	ldrb	r3, [r3, #0]
 800ad62:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800ad64:	683b      	ldr	r3, [r7, #0]
 800ad66:	785b      	ldrb	r3, [r3, #1]
 800ad68:	2b01      	cmp	r3, #1
 800ad6a:	d12c      	bne.n	800adc6 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800ad6c:	68bb      	ldr	r3, [r7, #8]
 800ad6e:	015a      	lsls	r2, r3, #5
 800ad70:	68fb      	ldr	r3, [r7, #12]
 800ad72:	4413      	add	r3, r2
 800ad74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ad78:	681b      	ldr	r3, [r3, #0]
 800ad7a:	2b00      	cmp	r3, #0
 800ad7c:	db12      	blt.n	800ada4 <USB_EPSetStall+0x54>
 800ad7e:	68bb      	ldr	r3, [r7, #8]
 800ad80:	2b00      	cmp	r3, #0
 800ad82:	d00f      	beq.n	800ada4 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800ad84:	68bb      	ldr	r3, [r7, #8]
 800ad86:	015a      	lsls	r2, r3, #5
 800ad88:	68fb      	ldr	r3, [r7, #12]
 800ad8a:	4413      	add	r3, r2
 800ad8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ad90:	681b      	ldr	r3, [r3, #0]
 800ad92:	68ba      	ldr	r2, [r7, #8]
 800ad94:	0151      	lsls	r1, r2, #5
 800ad96:	68fa      	ldr	r2, [r7, #12]
 800ad98:	440a      	add	r2, r1
 800ad9a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ad9e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800ada2:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800ada4:	68bb      	ldr	r3, [r7, #8]
 800ada6:	015a      	lsls	r2, r3, #5
 800ada8:	68fb      	ldr	r3, [r7, #12]
 800adaa:	4413      	add	r3, r2
 800adac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800adb0:	681b      	ldr	r3, [r3, #0]
 800adb2:	68ba      	ldr	r2, [r7, #8]
 800adb4:	0151      	lsls	r1, r2, #5
 800adb6:	68fa      	ldr	r2, [r7, #12]
 800adb8:	440a      	add	r2, r1
 800adba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800adbe:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800adc2:	6013      	str	r3, [r2, #0]
 800adc4:	e02b      	b.n	800ae1e <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800adc6:	68bb      	ldr	r3, [r7, #8]
 800adc8:	015a      	lsls	r2, r3, #5
 800adca:	68fb      	ldr	r3, [r7, #12]
 800adcc:	4413      	add	r3, r2
 800adce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800add2:	681b      	ldr	r3, [r3, #0]
 800add4:	2b00      	cmp	r3, #0
 800add6:	db12      	blt.n	800adfe <USB_EPSetStall+0xae>
 800add8:	68bb      	ldr	r3, [r7, #8]
 800adda:	2b00      	cmp	r3, #0
 800addc:	d00f      	beq.n	800adfe <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800adde:	68bb      	ldr	r3, [r7, #8]
 800ade0:	015a      	lsls	r2, r3, #5
 800ade2:	68fb      	ldr	r3, [r7, #12]
 800ade4:	4413      	add	r3, r2
 800ade6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800adea:	681b      	ldr	r3, [r3, #0]
 800adec:	68ba      	ldr	r2, [r7, #8]
 800adee:	0151      	lsls	r1, r2, #5
 800adf0:	68fa      	ldr	r2, [r7, #12]
 800adf2:	440a      	add	r2, r1
 800adf4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800adf8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800adfc:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800adfe:	68bb      	ldr	r3, [r7, #8]
 800ae00:	015a      	lsls	r2, r3, #5
 800ae02:	68fb      	ldr	r3, [r7, #12]
 800ae04:	4413      	add	r3, r2
 800ae06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ae0a:	681b      	ldr	r3, [r3, #0]
 800ae0c:	68ba      	ldr	r2, [r7, #8]
 800ae0e:	0151      	lsls	r1, r2, #5
 800ae10:	68fa      	ldr	r2, [r7, #12]
 800ae12:	440a      	add	r2, r1
 800ae14:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ae18:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800ae1c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800ae1e:	2300      	movs	r3, #0
}
 800ae20:	4618      	mov	r0, r3
 800ae22:	3714      	adds	r7, #20
 800ae24:	46bd      	mov	sp, r7
 800ae26:	bc80      	pop	{r7}
 800ae28:	4770      	bx	lr

0800ae2a <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800ae2a:	b480      	push	{r7}
 800ae2c:	b085      	sub	sp, #20
 800ae2e:	af00      	add	r7, sp, #0
 800ae30:	6078      	str	r0, [r7, #4]
 800ae32:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800ae38:	683b      	ldr	r3, [r7, #0]
 800ae3a:	781b      	ldrb	r3, [r3, #0]
 800ae3c:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800ae3e:	683b      	ldr	r3, [r7, #0]
 800ae40:	785b      	ldrb	r3, [r3, #1]
 800ae42:	2b01      	cmp	r3, #1
 800ae44:	d128      	bne.n	800ae98 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800ae46:	68bb      	ldr	r3, [r7, #8]
 800ae48:	015a      	lsls	r2, r3, #5
 800ae4a:	68fb      	ldr	r3, [r7, #12]
 800ae4c:	4413      	add	r3, r2
 800ae4e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ae52:	681b      	ldr	r3, [r3, #0]
 800ae54:	68ba      	ldr	r2, [r7, #8]
 800ae56:	0151      	lsls	r1, r2, #5
 800ae58:	68fa      	ldr	r2, [r7, #12]
 800ae5a:	440a      	add	r2, r1
 800ae5c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ae60:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800ae64:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800ae66:	683b      	ldr	r3, [r7, #0]
 800ae68:	78db      	ldrb	r3, [r3, #3]
 800ae6a:	2b03      	cmp	r3, #3
 800ae6c:	d003      	beq.n	800ae76 <USB_EPClearStall+0x4c>
 800ae6e:	683b      	ldr	r3, [r7, #0]
 800ae70:	78db      	ldrb	r3, [r3, #3]
 800ae72:	2b02      	cmp	r3, #2
 800ae74:	d138      	bne.n	800aee8 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800ae76:	68bb      	ldr	r3, [r7, #8]
 800ae78:	015a      	lsls	r2, r3, #5
 800ae7a:	68fb      	ldr	r3, [r7, #12]
 800ae7c:	4413      	add	r3, r2
 800ae7e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ae82:	681b      	ldr	r3, [r3, #0]
 800ae84:	68ba      	ldr	r2, [r7, #8]
 800ae86:	0151      	lsls	r1, r2, #5
 800ae88:	68fa      	ldr	r2, [r7, #12]
 800ae8a:	440a      	add	r2, r1
 800ae8c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ae90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ae94:	6013      	str	r3, [r2, #0]
 800ae96:	e027      	b.n	800aee8 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800ae98:	68bb      	ldr	r3, [r7, #8]
 800ae9a:	015a      	lsls	r2, r3, #5
 800ae9c:	68fb      	ldr	r3, [r7, #12]
 800ae9e:	4413      	add	r3, r2
 800aea0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aea4:	681b      	ldr	r3, [r3, #0]
 800aea6:	68ba      	ldr	r2, [r7, #8]
 800aea8:	0151      	lsls	r1, r2, #5
 800aeaa:	68fa      	ldr	r2, [r7, #12]
 800aeac:	440a      	add	r2, r1
 800aeae:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800aeb2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800aeb6:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800aeb8:	683b      	ldr	r3, [r7, #0]
 800aeba:	78db      	ldrb	r3, [r3, #3]
 800aebc:	2b03      	cmp	r3, #3
 800aebe:	d003      	beq.n	800aec8 <USB_EPClearStall+0x9e>
 800aec0:	683b      	ldr	r3, [r7, #0]
 800aec2:	78db      	ldrb	r3, [r3, #3]
 800aec4:	2b02      	cmp	r3, #2
 800aec6:	d10f      	bne.n	800aee8 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800aec8:	68bb      	ldr	r3, [r7, #8]
 800aeca:	015a      	lsls	r2, r3, #5
 800aecc:	68fb      	ldr	r3, [r7, #12]
 800aece:	4413      	add	r3, r2
 800aed0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aed4:	681b      	ldr	r3, [r3, #0]
 800aed6:	68ba      	ldr	r2, [r7, #8]
 800aed8:	0151      	lsls	r1, r2, #5
 800aeda:	68fa      	ldr	r2, [r7, #12]
 800aedc:	440a      	add	r2, r1
 800aede:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800aee2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800aee6:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800aee8:	2300      	movs	r3, #0
}
 800aeea:	4618      	mov	r0, r3
 800aeec:	3714      	adds	r7, #20
 800aeee:	46bd      	mov	sp, r7
 800aef0:	bc80      	pop	{r7}
 800aef2:	4770      	bx	lr

0800aef4 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800aef4:	b480      	push	{r7}
 800aef6:	b085      	sub	sp, #20
 800aef8:	af00      	add	r7, sp, #0
 800aefa:	6078      	str	r0, [r7, #4]
 800aefc:	460b      	mov	r3, r1
 800aefe:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800af04:	68fb      	ldr	r3, [r7, #12]
 800af06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800af0a:	681b      	ldr	r3, [r3, #0]
 800af0c:	68fa      	ldr	r2, [r7, #12]
 800af0e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800af12:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800af16:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800af18:	68fb      	ldr	r3, [r7, #12]
 800af1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800af1e:	681a      	ldr	r2, [r3, #0]
 800af20:	78fb      	ldrb	r3, [r7, #3]
 800af22:	011b      	lsls	r3, r3, #4
 800af24:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800af28:	68f9      	ldr	r1, [r7, #12]
 800af2a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800af2e:	4313      	orrs	r3, r2
 800af30:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800af32:	2300      	movs	r3, #0
}
 800af34:	4618      	mov	r0, r3
 800af36:	3714      	adds	r7, #20
 800af38:	46bd      	mov	sp, r7
 800af3a:	bc80      	pop	{r7}
 800af3c:	4770      	bx	lr

0800af3e <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800af3e:	b480      	push	{r7}
 800af40:	b085      	sub	sp, #20
 800af42:	af00      	add	r7, sp, #0
 800af44:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800af4a:	68fb      	ldr	r3, [r7, #12]
 800af4c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800af50:	681b      	ldr	r3, [r3, #0]
 800af52:	68fa      	ldr	r2, [r7, #12]
 800af54:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800af58:	f023 0303 	bic.w	r3, r3, #3
 800af5c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800af5e:	68fb      	ldr	r3, [r7, #12]
 800af60:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800af64:	685b      	ldr	r3, [r3, #4]
 800af66:	68fa      	ldr	r2, [r7, #12]
 800af68:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800af6c:	f023 0302 	bic.w	r3, r3, #2
 800af70:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800af72:	2300      	movs	r3, #0
}
 800af74:	4618      	mov	r0, r3
 800af76:	3714      	adds	r7, #20
 800af78:	46bd      	mov	sp, r7
 800af7a:	bc80      	pop	{r7}
 800af7c:	4770      	bx	lr

0800af7e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800af7e:	b480      	push	{r7}
 800af80:	b085      	sub	sp, #20
 800af82:	af00      	add	r7, sp, #0
 800af84:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800af8a:	68fb      	ldr	r3, [r7, #12]
 800af8c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800af90:	681b      	ldr	r3, [r3, #0]
 800af92:	68fa      	ldr	r2, [r7, #12]
 800af94:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800af98:	f023 0303 	bic.w	r3, r3, #3
 800af9c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800af9e:	68fb      	ldr	r3, [r7, #12]
 800afa0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800afa4:	685b      	ldr	r3, [r3, #4]
 800afa6:	68fa      	ldr	r2, [r7, #12]
 800afa8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800afac:	f043 0302 	orr.w	r3, r3, #2
 800afb0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800afb2:	2300      	movs	r3, #0
}
 800afb4:	4618      	mov	r0, r3
 800afb6:	3714      	adds	r7, #20
 800afb8:	46bd      	mov	sp, r7
 800afba:	bc80      	pop	{r7}
 800afbc:	4770      	bx	lr

0800afbe <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800afbe:	b480      	push	{r7}
 800afc0:	b085      	sub	sp, #20
 800afc2:	af00      	add	r7, sp, #0
 800afc4:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	695b      	ldr	r3, [r3, #20]
 800afca:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	699b      	ldr	r3, [r3, #24]
 800afd0:	68fa      	ldr	r2, [r7, #12]
 800afd2:	4013      	ands	r3, r2
 800afd4:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800afd6:	68fb      	ldr	r3, [r7, #12]
}
 800afd8:	4618      	mov	r0, r3
 800afda:	3714      	adds	r7, #20
 800afdc:	46bd      	mov	sp, r7
 800afde:	bc80      	pop	{r7}
 800afe0:	4770      	bx	lr

0800afe2 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800afe2:	b480      	push	{r7}
 800afe4:	b085      	sub	sp, #20
 800afe6:	af00      	add	r7, sp, #0
 800afe8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800afee:	68fb      	ldr	r3, [r7, #12]
 800aff0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aff4:	699b      	ldr	r3, [r3, #24]
 800aff6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800aff8:	68fb      	ldr	r3, [r7, #12]
 800affa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800affe:	69db      	ldr	r3, [r3, #28]
 800b000:	68ba      	ldr	r2, [r7, #8]
 800b002:	4013      	ands	r3, r2
 800b004:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800b006:	68bb      	ldr	r3, [r7, #8]
 800b008:	0c1b      	lsrs	r3, r3, #16
}
 800b00a:	4618      	mov	r0, r3
 800b00c:	3714      	adds	r7, #20
 800b00e:	46bd      	mov	sp, r7
 800b010:	bc80      	pop	{r7}
 800b012:	4770      	bx	lr

0800b014 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800b014:	b480      	push	{r7}
 800b016:	b085      	sub	sp, #20
 800b018:	af00      	add	r7, sp, #0
 800b01a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800b020:	68fb      	ldr	r3, [r7, #12]
 800b022:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b026:	699b      	ldr	r3, [r3, #24]
 800b028:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800b02a:	68fb      	ldr	r3, [r7, #12]
 800b02c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b030:	69db      	ldr	r3, [r3, #28]
 800b032:	68ba      	ldr	r2, [r7, #8]
 800b034:	4013      	ands	r3, r2
 800b036:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800b038:	68bb      	ldr	r3, [r7, #8]
 800b03a:	b29b      	uxth	r3, r3
}
 800b03c:	4618      	mov	r0, r3
 800b03e:	3714      	adds	r7, #20
 800b040:	46bd      	mov	sp, r7
 800b042:	bc80      	pop	{r7}
 800b044:	4770      	bx	lr

0800b046 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800b046:	b480      	push	{r7}
 800b048:	b085      	sub	sp, #20
 800b04a:	af00      	add	r7, sp, #0
 800b04c:	6078      	str	r0, [r7, #4]
 800b04e:	460b      	mov	r3, r1
 800b050:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800b056:	78fb      	ldrb	r3, [r7, #3]
 800b058:	015a      	lsls	r2, r3, #5
 800b05a:	68fb      	ldr	r3, [r7, #12]
 800b05c:	4413      	add	r3, r2
 800b05e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b062:	689b      	ldr	r3, [r3, #8]
 800b064:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800b066:	68fb      	ldr	r3, [r7, #12]
 800b068:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b06c:	695b      	ldr	r3, [r3, #20]
 800b06e:	68ba      	ldr	r2, [r7, #8]
 800b070:	4013      	ands	r3, r2
 800b072:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800b074:	68bb      	ldr	r3, [r7, #8]
}
 800b076:	4618      	mov	r0, r3
 800b078:	3714      	adds	r7, #20
 800b07a:	46bd      	mov	sp, r7
 800b07c:	bc80      	pop	{r7}
 800b07e:	4770      	bx	lr

0800b080 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800b080:	b480      	push	{r7}
 800b082:	b087      	sub	sp, #28
 800b084:	af00      	add	r7, sp, #0
 800b086:	6078      	str	r0, [r7, #4]
 800b088:	460b      	mov	r3, r1
 800b08a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800b090:	697b      	ldr	r3, [r7, #20]
 800b092:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b096:	691b      	ldr	r3, [r3, #16]
 800b098:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800b09a:	697b      	ldr	r3, [r7, #20]
 800b09c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b0a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b0a2:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800b0a4:	78fb      	ldrb	r3, [r7, #3]
 800b0a6:	f003 030f 	and.w	r3, r3, #15
 800b0aa:	68fa      	ldr	r2, [r7, #12]
 800b0ac:	fa22 f303 	lsr.w	r3, r2, r3
 800b0b0:	01db      	lsls	r3, r3, #7
 800b0b2:	b2db      	uxtb	r3, r3
 800b0b4:	693a      	ldr	r2, [r7, #16]
 800b0b6:	4313      	orrs	r3, r2
 800b0b8:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800b0ba:	78fb      	ldrb	r3, [r7, #3]
 800b0bc:	015a      	lsls	r2, r3, #5
 800b0be:	697b      	ldr	r3, [r7, #20]
 800b0c0:	4413      	add	r3, r2
 800b0c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b0c6:	689b      	ldr	r3, [r3, #8]
 800b0c8:	693a      	ldr	r2, [r7, #16]
 800b0ca:	4013      	ands	r3, r2
 800b0cc:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800b0ce:	68bb      	ldr	r3, [r7, #8]
}
 800b0d0:	4618      	mov	r0, r3
 800b0d2:	371c      	adds	r7, #28
 800b0d4:	46bd      	mov	sp, r7
 800b0d6:	bc80      	pop	{r7}
 800b0d8:	4770      	bx	lr

0800b0da <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800b0da:	b480      	push	{r7}
 800b0dc:	b083      	sub	sp, #12
 800b0de:	af00      	add	r7, sp, #0
 800b0e0:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	695b      	ldr	r3, [r3, #20]
 800b0e6:	f003 0301 	and.w	r3, r3, #1
}
 800b0ea:	4618      	mov	r0, r3
 800b0ec:	370c      	adds	r7, #12
 800b0ee:	46bd      	mov	sp, r7
 800b0f0:	bc80      	pop	{r7}
 800b0f2:	4770      	bx	lr

0800b0f4 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800b0f4:	b480      	push	{r7}
 800b0f6:	b085      	sub	sp, #20
 800b0f8:	af00      	add	r7, sp, #0
 800b0fa:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800b100:	68fb      	ldr	r3, [r7, #12]
 800b102:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b106:	681b      	ldr	r3, [r3, #0]
 800b108:	68fa      	ldr	r2, [r7, #12]
 800b10a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b10e:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800b112:	f023 0307 	bic.w	r3, r3, #7
 800b116:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800b118:	68fb      	ldr	r3, [r7, #12]
 800b11a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b11e:	685b      	ldr	r3, [r3, #4]
 800b120:	68fa      	ldr	r2, [r7, #12]
 800b122:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b126:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b12a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800b12c:	2300      	movs	r3, #0
}
 800b12e:	4618      	mov	r0, r3
 800b130:	3714      	adds	r7, #20
 800b132:	46bd      	mov	sp, r7
 800b134:	bc80      	pop	{r7}
 800b136:	4770      	bx	lr

0800b138 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800b138:	b480      	push	{r7}
 800b13a:	b087      	sub	sp, #28
 800b13c:	af00      	add	r7, sp, #0
 800b13e:	60f8      	str	r0, [r7, #12]
 800b140:	460b      	mov	r3, r1
 800b142:	607a      	str	r2, [r7, #4]
 800b144:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b146:	68fb      	ldr	r3, [r7, #12]
 800b148:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800b14a:	68fb      	ldr	r3, [r7, #12]
 800b14c:	333c      	adds	r3, #60	; 0x3c
 800b14e:	3304      	adds	r3, #4
 800b150:	681b      	ldr	r3, [r3, #0]
 800b152:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800b154:	693b      	ldr	r3, [r7, #16]
 800b156:	4a25      	ldr	r2, [pc, #148]	; (800b1ec <USB_EP0_OutStart+0xb4>)
 800b158:	4293      	cmp	r3, r2
 800b15a:	d90a      	bls.n	800b172 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800b15c:	697b      	ldr	r3, [r7, #20]
 800b15e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b162:	681b      	ldr	r3, [r3, #0]
 800b164:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b168:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b16c:	d101      	bne.n	800b172 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800b16e:	2300      	movs	r3, #0
 800b170:	e037      	b.n	800b1e2 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800b172:	697b      	ldr	r3, [r7, #20]
 800b174:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b178:	461a      	mov	r2, r3
 800b17a:	2300      	movs	r3, #0
 800b17c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800b17e:	697b      	ldr	r3, [r7, #20]
 800b180:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b184:	691b      	ldr	r3, [r3, #16]
 800b186:	697a      	ldr	r2, [r7, #20]
 800b188:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b18c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b190:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800b192:	697b      	ldr	r3, [r7, #20]
 800b194:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b198:	691b      	ldr	r3, [r3, #16]
 800b19a:	697a      	ldr	r2, [r7, #20]
 800b19c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b1a0:	f043 0318 	orr.w	r3, r3, #24
 800b1a4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800b1a6:	697b      	ldr	r3, [r7, #20]
 800b1a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b1ac:	691b      	ldr	r3, [r3, #16]
 800b1ae:	697a      	ldr	r2, [r7, #20]
 800b1b0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b1b4:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800b1b8:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800b1ba:	7afb      	ldrb	r3, [r7, #11]
 800b1bc:	2b01      	cmp	r3, #1
 800b1be:	d10f      	bne.n	800b1e0 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800b1c0:	697b      	ldr	r3, [r7, #20]
 800b1c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b1c6:	461a      	mov	r2, r3
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800b1cc:	697b      	ldr	r3, [r7, #20]
 800b1ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b1d2:	681b      	ldr	r3, [r3, #0]
 800b1d4:	697a      	ldr	r2, [r7, #20]
 800b1d6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b1da:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800b1de:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800b1e0:	2300      	movs	r3, #0
}
 800b1e2:	4618      	mov	r0, r3
 800b1e4:	371c      	adds	r7, #28
 800b1e6:	46bd      	mov	sp, r7
 800b1e8:	bc80      	pop	{r7}
 800b1ea:	4770      	bx	lr
 800b1ec:	4f54300a 	.word	0x4f54300a

0800b1f0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800b1f0:	b480      	push	{r7}
 800b1f2:	b085      	sub	sp, #20
 800b1f4:	af00      	add	r7, sp, #0
 800b1f6:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800b1f8:	2300      	movs	r3, #0
 800b1fa:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800b1fc:	68fb      	ldr	r3, [r7, #12]
 800b1fe:	3301      	adds	r3, #1
 800b200:	60fb      	str	r3, [r7, #12]
 800b202:	68fb      	ldr	r3, [r7, #12]
 800b204:	4a12      	ldr	r2, [pc, #72]	; (800b250 <USB_CoreReset+0x60>)
 800b206:	4293      	cmp	r3, r2
 800b208:	d901      	bls.n	800b20e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800b20a:	2303      	movs	r3, #3
 800b20c:	e01b      	b.n	800b246 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	691b      	ldr	r3, [r3, #16]
 800b212:	2b00      	cmp	r3, #0
 800b214:	daf2      	bge.n	800b1fc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800b216:	2300      	movs	r3, #0
 800b218:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	691b      	ldr	r3, [r3, #16]
 800b21e:	f043 0201 	orr.w	r2, r3, #1
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800b226:	68fb      	ldr	r3, [r7, #12]
 800b228:	3301      	adds	r3, #1
 800b22a:	60fb      	str	r3, [r7, #12]
 800b22c:	68fb      	ldr	r3, [r7, #12]
 800b22e:	4a08      	ldr	r2, [pc, #32]	; (800b250 <USB_CoreReset+0x60>)
 800b230:	4293      	cmp	r3, r2
 800b232:	d901      	bls.n	800b238 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800b234:	2303      	movs	r3, #3
 800b236:	e006      	b.n	800b246 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	691b      	ldr	r3, [r3, #16]
 800b23c:	f003 0301 	and.w	r3, r3, #1
 800b240:	2b01      	cmp	r3, #1
 800b242:	d0f0      	beq.n	800b226 <USB_CoreReset+0x36>

  return HAL_OK;
 800b244:	2300      	movs	r3, #0
}
 800b246:	4618      	mov	r0, r3
 800b248:	3714      	adds	r7, #20
 800b24a:	46bd      	mov	sp, r7
 800b24c:	bc80      	pop	{r7}
 800b24e:	4770      	bx	lr
 800b250:	00030d40 	.word	0x00030d40

0800b254 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b254:	b580      	push	{r7, lr}
 800b256:	b084      	sub	sp, #16
 800b258:	af00      	add	r7, sp, #0
 800b25a:	6078      	str	r0, [r7, #4]
 800b25c:	460b      	mov	r3, r1
 800b25e:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800b260:	2300      	movs	r3, #0
 800b262:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	7c1b      	ldrb	r3, [r3, #16]
 800b268:	2b00      	cmp	r3, #0
 800b26a:	d115      	bne.n	800b298 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800b26c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b270:	2202      	movs	r2, #2
 800b272:	2181      	movs	r1, #129	; 0x81
 800b274:	6878      	ldr	r0, [r7, #4]
 800b276:	f001 ff48 	bl	800d10a <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	2201      	movs	r2, #1
 800b27e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800b280:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b284:	2202      	movs	r2, #2
 800b286:	2101      	movs	r1, #1
 800b288:	6878      	ldr	r0, [r7, #4]
 800b28a:	f001 ff3e 	bl	800d10a <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	2201      	movs	r2, #1
 800b292:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 800b296:	e012      	b.n	800b2be <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800b298:	2340      	movs	r3, #64	; 0x40
 800b29a:	2202      	movs	r2, #2
 800b29c:	2181      	movs	r1, #129	; 0x81
 800b29e:	6878      	ldr	r0, [r7, #4]
 800b2a0:	f001 ff33 	bl	800d10a <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	2201      	movs	r2, #1
 800b2a8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800b2aa:	2340      	movs	r3, #64	; 0x40
 800b2ac:	2202      	movs	r2, #2
 800b2ae:	2101      	movs	r1, #1
 800b2b0:	6878      	ldr	r0, [r7, #4]
 800b2b2:	f001 ff2a 	bl	800d10a <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	2201      	movs	r2, #1
 800b2ba:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800b2be:	2308      	movs	r3, #8
 800b2c0:	2203      	movs	r2, #3
 800b2c2:	2182      	movs	r1, #130	; 0x82
 800b2c4:	6878      	ldr	r0, [r7, #4]
 800b2c6:	f001 ff20 	bl	800d10a <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	2201      	movs	r2, #1
 800b2ce:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800b2d0:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800b2d4:	f004 fb56 	bl	800f984 <malloc>
 800b2d8:	4603      	mov	r3, r0
 800b2da:	461a      	mov	r2, r3
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b2e8:	2b00      	cmp	r3, #0
 800b2ea:	d102      	bne.n	800b2f2 <USBD_CDC_Init+0x9e>
  {
    ret = 1U;
 800b2ec:	2301      	movs	r3, #1
 800b2ee:	73fb      	strb	r3, [r7, #15]
 800b2f0:	e026      	b.n	800b340 <USBD_CDC_Init+0xec>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b2f8:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b300:	681b      	ldr	r3, [r3, #0]
 800b302:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 800b304:	68bb      	ldr	r3, [r7, #8]
 800b306:	2200      	movs	r2, #0
 800b308:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 800b30c:	68bb      	ldr	r3, [r7, #8]
 800b30e:	2200      	movs	r2, #0
 800b310:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	7c1b      	ldrb	r3, [r3, #16]
 800b318:	2b00      	cmp	r3, #0
 800b31a:	d109      	bne.n	800b330 <USBD_CDC_Init+0xdc>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800b31c:	68bb      	ldr	r3, [r7, #8]
 800b31e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b322:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b326:	2101      	movs	r1, #1
 800b328:	6878      	ldr	r0, [r7, #4]
 800b32a:	f001 ffde 	bl	800d2ea <USBD_LL_PrepareReceive>
 800b32e:	e007      	b.n	800b340 <USBD_CDC_Init+0xec>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800b330:	68bb      	ldr	r3, [r7, #8]
 800b332:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b336:	2340      	movs	r3, #64	; 0x40
 800b338:	2101      	movs	r1, #1
 800b33a:	6878      	ldr	r0, [r7, #4]
 800b33c:	f001 ffd5 	bl	800d2ea <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 800b340:	7bfb      	ldrb	r3, [r7, #15]
}
 800b342:	4618      	mov	r0, r3
 800b344:	3710      	adds	r7, #16
 800b346:	46bd      	mov	sp, r7
 800b348:	bd80      	pop	{r7, pc}

0800b34a <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b34a:	b580      	push	{r7, lr}
 800b34c:	b084      	sub	sp, #16
 800b34e:	af00      	add	r7, sp, #0
 800b350:	6078      	str	r0, [r7, #4]
 800b352:	460b      	mov	r3, r1
 800b354:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800b356:	2300      	movs	r3, #0
 800b358:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800b35a:	2181      	movs	r1, #129	; 0x81
 800b35c:	6878      	ldr	r0, [r7, #4]
 800b35e:	f001 fefa 	bl	800d156 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800b362:	687b      	ldr	r3, [r7, #4]
 800b364:	2200      	movs	r2, #0
 800b366:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800b368:	2101      	movs	r1, #1
 800b36a:	6878      	ldr	r0, [r7, #4]
 800b36c:	f001 fef3 	bl	800d156 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	2200      	movs	r2, #0
 800b374:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800b378:	2182      	movs	r1, #130	; 0x82
 800b37a:	6878      	ldr	r0, [r7, #4]
 800b37c:	f001 feeb 	bl	800d156 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	2200      	movs	r2, #0
 800b384:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800b386:	687b      	ldr	r3, [r7, #4]
 800b388:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b38c:	2b00      	cmp	r3, #0
 800b38e:	d00e      	beq.n	800b3ae <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b396:	685b      	ldr	r3, [r3, #4]
 800b398:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b3a0:	4618      	mov	r0, r3
 800b3a2:	f004 faf7 	bl	800f994 <free>
    pdev->pClassData = NULL;
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	2200      	movs	r2, #0
 800b3aa:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 800b3ae:	7bfb      	ldrb	r3, [r7, #15]
}
 800b3b0:	4618      	mov	r0, r3
 800b3b2:	3710      	adds	r7, #16
 800b3b4:	46bd      	mov	sp, r7
 800b3b6:	bd80      	pop	{r7, pc}

0800b3b8 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800b3b8:	b580      	push	{r7, lr}
 800b3ba:	b086      	sub	sp, #24
 800b3bc:	af00      	add	r7, sp, #0
 800b3be:	6078      	str	r0, [r7, #4]
 800b3c0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b3c8:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800b3ca:	2300      	movs	r3, #0
 800b3cc:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 800b3ce:	2300      	movs	r3, #0
 800b3d0:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 800b3d2:	2300      	movs	r3, #0
 800b3d4:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b3d6:	683b      	ldr	r3, [r7, #0]
 800b3d8:	781b      	ldrb	r3, [r3, #0]
 800b3da:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b3de:	2b00      	cmp	r3, #0
 800b3e0:	d039      	beq.n	800b456 <USBD_CDC_Setup+0x9e>
 800b3e2:	2b20      	cmp	r3, #32
 800b3e4:	d17f      	bne.n	800b4e6 <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 800b3e6:	683b      	ldr	r3, [r7, #0]
 800b3e8:	88db      	ldrh	r3, [r3, #6]
 800b3ea:	2b00      	cmp	r3, #0
 800b3ec:	d029      	beq.n	800b442 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 800b3ee:	683b      	ldr	r3, [r7, #0]
 800b3f0:	781b      	ldrb	r3, [r3, #0]
 800b3f2:	b25b      	sxtb	r3, r3
 800b3f4:	2b00      	cmp	r3, #0
 800b3f6:	da11      	bge.n	800b41c <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b3fe:	689b      	ldr	r3, [r3, #8]
 800b400:	683a      	ldr	r2, [r7, #0]
 800b402:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 800b404:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800b406:	683a      	ldr	r2, [r7, #0]
 800b408:	88d2      	ldrh	r2, [r2, #6]
 800b40a:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800b40c:	6939      	ldr	r1, [r7, #16]
 800b40e:	683b      	ldr	r3, [r7, #0]
 800b410:	88db      	ldrh	r3, [r3, #6]
 800b412:	461a      	mov	r2, r3
 800b414:	6878      	ldr	r0, [r7, #4]
 800b416:	f001 fa42 	bl	800c89e <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 800b41a:	e06b      	b.n	800b4f4 <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 800b41c:	683b      	ldr	r3, [r7, #0]
 800b41e:	785a      	ldrb	r2, [r3, #1]
 800b420:	693b      	ldr	r3, [r7, #16]
 800b422:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800b426:	683b      	ldr	r3, [r7, #0]
 800b428:	88db      	ldrh	r3, [r3, #6]
 800b42a:	b2da      	uxtb	r2, r3
 800b42c:	693b      	ldr	r3, [r7, #16]
 800b42e:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800b432:	6939      	ldr	r1, [r7, #16]
 800b434:	683b      	ldr	r3, [r7, #0]
 800b436:	88db      	ldrh	r3, [r3, #6]
 800b438:	461a      	mov	r2, r3
 800b43a:	6878      	ldr	r0, [r7, #4]
 800b43c:	f001 fa5d 	bl	800c8fa <USBD_CtlPrepareRx>
      break;
 800b440:	e058      	b.n	800b4f4 <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b448:	689b      	ldr	r3, [r3, #8]
 800b44a:	683a      	ldr	r2, [r7, #0]
 800b44c:	7850      	ldrb	r0, [r2, #1]
 800b44e:	2200      	movs	r2, #0
 800b450:	6839      	ldr	r1, [r7, #0]
 800b452:	4798      	blx	r3
      break;
 800b454:	e04e      	b.n	800b4f4 <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b456:	683b      	ldr	r3, [r7, #0]
 800b458:	785b      	ldrb	r3, [r3, #1]
 800b45a:	2b0b      	cmp	r3, #11
 800b45c:	d02e      	beq.n	800b4bc <USBD_CDC_Setup+0x104>
 800b45e:	2b0b      	cmp	r3, #11
 800b460:	dc38      	bgt.n	800b4d4 <USBD_CDC_Setup+0x11c>
 800b462:	2b00      	cmp	r3, #0
 800b464:	d002      	beq.n	800b46c <USBD_CDC_Setup+0xb4>
 800b466:	2b0a      	cmp	r3, #10
 800b468:	d014      	beq.n	800b494 <USBD_CDC_Setup+0xdc>
 800b46a:	e033      	b.n	800b4d4 <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b472:	2b03      	cmp	r3, #3
 800b474:	d107      	bne.n	800b486 <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 800b476:	f107 030c 	add.w	r3, r7, #12
 800b47a:	2202      	movs	r2, #2
 800b47c:	4619      	mov	r1, r3
 800b47e:	6878      	ldr	r0, [r7, #4]
 800b480:	f001 fa0d 	bl	800c89e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800b484:	e02e      	b.n	800b4e4 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 800b486:	6839      	ldr	r1, [r7, #0]
 800b488:	6878      	ldr	r0, [r7, #4]
 800b48a:	f001 f99e 	bl	800c7ca <USBD_CtlError>
            ret = USBD_FAIL;
 800b48e:	2302      	movs	r3, #2
 800b490:	75fb      	strb	r3, [r7, #23]
          break;
 800b492:	e027      	b.n	800b4e4 <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b49a:	2b03      	cmp	r3, #3
 800b49c:	d107      	bne.n	800b4ae <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 800b49e:	f107 030f 	add.w	r3, r7, #15
 800b4a2:	2201      	movs	r2, #1
 800b4a4:	4619      	mov	r1, r3
 800b4a6:	6878      	ldr	r0, [r7, #4]
 800b4a8:	f001 f9f9 	bl	800c89e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800b4ac:	e01a      	b.n	800b4e4 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 800b4ae:	6839      	ldr	r1, [r7, #0]
 800b4b0:	6878      	ldr	r0, [r7, #4]
 800b4b2:	f001 f98a 	bl	800c7ca <USBD_CtlError>
            ret = USBD_FAIL;
 800b4b6:	2302      	movs	r3, #2
 800b4b8:	75fb      	strb	r3, [r7, #23]
          break;
 800b4ba:	e013      	b.n	800b4e4 <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b4c2:	2b03      	cmp	r3, #3
 800b4c4:	d00d      	beq.n	800b4e2 <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 800b4c6:	6839      	ldr	r1, [r7, #0]
 800b4c8:	6878      	ldr	r0, [r7, #4]
 800b4ca:	f001 f97e 	bl	800c7ca <USBD_CtlError>
            ret = USBD_FAIL;
 800b4ce:	2302      	movs	r3, #2
 800b4d0:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800b4d2:	e006      	b.n	800b4e2 <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 800b4d4:	6839      	ldr	r1, [r7, #0]
 800b4d6:	6878      	ldr	r0, [r7, #4]
 800b4d8:	f001 f977 	bl	800c7ca <USBD_CtlError>
          ret = USBD_FAIL;
 800b4dc:	2302      	movs	r3, #2
 800b4de:	75fb      	strb	r3, [r7, #23]
          break;
 800b4e0:	e000      	b.n	800b4e4 <USBD_CDC_Setup+0x12c>
          break;
 800b4e2:	bf00      	nop
      }
      break;
 800b4e4:	e006      	b.n	800b4f4 <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800b4e6:	6839      	ldr	r1, [r7, #0]
 800b4e8:	6878      	ldr	r0, [r7, #4]
 800b4ea:	f001 f96e 	bl	800c7ca <USBD_CtlError>
      ret = USBD_FAIL;
 800b4ee:	2302      	movs	r3, #2
 800b4f0:	75fb      	strb	r3, [r7, #23]
      break;
 800b4f2:	bf00      	nop
  }

  return ret;
 800b4f4:	7dfb      	ldrb	r3, [r7, #23]
}
 800b4f6:	4618      	mov	r0, r3
 800b4f8:	3718      	adds	r7, #24
 800b4fa:	46bd      	mov	sp, r7
 800b4fc:	bd80      	pop	{r7, pc}

0800b4fe <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b4fe:	b580      	push	{r7, lr}
 800b500:	b084      	sub	sp, #16
 800b502:	af00      	add	r7, sp, #0
 800b504:	6078      	str	r0, [r7, #4]
 800b506:	460b      	mov	r3, r1
 800b508:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b50a:	687b      	ldr	r3, [r7, #4]
 800b50c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b510:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b518:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b520:	2b00      	cmp	r3, #0
 800b522:	d03a      	beq.n	800b59a <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800b524:	78fa      	ldrb	r2, [r7, #3]
 800b526:	6879      	ldr	r1, [r7, #4]
 800b528:	4613      	mov	r3, r2
 800b52a:	009b      	lsls	r3, r3, #2
 800b52c:	4413      	add	r3, r2
 800b52e:	009b      	lsls	r3, r3, #2
 800b530:	440b      	add	r3, r1
 800b532:	331c      	adds	r3, #28
 800b534:	681b      	ldr	r3, [r3, #0]
 800b536:	2b00      	cmp	r3, #0
 800b538:	d029      	beq.n	800b58e <USBD_CDC_DataIn+0x90>
 800b53a:	78fa      	ldrb	r2, [r7, #3]
 800b53c:	6879      	ldr	r1, [r7, #4]
 800b53e:	4613      	mov	r3, r2
 800b540:	009b      	lsls	r3, r3, #2
 800b542:	4413      	add	r3, r2
 800b544:	009b      	lsls	r3, r3, #2
 800b546:	440b      	add	r3, r1
 800b548:	331c      	adds	r3, #28
 800b54a:	681a      	ldr	r2, [r3, #0]
 800b54c:	78f9      	ldrb	r1, [r7, #3]
 800b54e:	68b8      	ldr	r0, [r7, #8]
 800b550:	460b      	mov	r3, r1
 800b552:	00db      	lsls	r3, r3, #3
 800b554:	1a5b      	subs	r3, r3, r1
 800b556:	009b      	lsls	r3, r3, #2
 800b558:	4403      	add	r3, r0
 800b55a:	3344      	adds	r3, #68	; 0x44
 800b55c:	681b      	ldr	r3, [r3, #0]
 800b55e:	fbb2 f1f3 	udiv	r1, r2, r3
 800b562:	fb03 f301 	mul.w	r3, r3, r1
 800b566:	1ad3      	subs	r3, r2, r3
 800b568:	2b00      	cmp	r3, #0
 800b56a:	d110      	bne.n	800b58e <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 800b56c:	78fa      	ldrb	r2, [r7, #3]
 800b56e:	6879      	ldr	r1, [r7, #4]
 800b570:	4613      	mov	r3, r2
 800b572:	009b      	lsls	r3, r3, #2
 800b574:	4413      	add	r3, r2
 800b576:	009b      	lsls	r3, r3, #2
 800b578:	440b      	add	r3, r1
 800b57a:	331c      	adds	r3, #28
 800b57c:	2200      	movs	r2, #0
 800b57e:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800b580:	78f9      	ldrb	r1, [r7, #3]
 800b582:	2300      	movs	r3, #0
 800b584:	2200      	movs	r2, #0
 800b586:	6878      	ldr	r0, [r7, #4]
 800b588:	f001 fe8c 	bl	800d2a4 <USBD_LL_Transmit>
 800b58c:	e003      	b.n	800b596 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 800b58e:	68fb      	ldr	r3, [r7, #12]
 800b590:	2200      	movs	r2, #0
 800b592:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 800b596:	2300      	movs	r3, #0
 800b598:	e000      	b.n	800b59c <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 800b59a:	2302      	movs	r3, #2
  }
}
 800b59c:	4618      	mov	r0, r3
 800b59e:	3710      	adds	r7, #16
 800b5a0:	46bd      	mov	sp, r7
 800b5a2:	bd80      	pop	{r7, pc}

0800b5a4 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b5a4:	b580      	push	{r7, lr}
 800b5a6:	b084      	sub	sp, #16
 800b5a8:	af00      	add	r7, sp, #0
 800b5aa:	6078      	str	r0, [r7, #4]
 800b5ac:	460b      	mov	r3, r1
 800b5ae:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800b5b0:	687b      	ldr	r3, [r7, #4]
 800b5b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b5b6:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800b5b8:	78fb      	ldrb	r3, [r7, #3]
 800b5ba:	4619      	mov	r1, r3
 800b5bc:	6878      	ldr	r0, [r7, #4]
 800b5be:	f001 feb7 	bl	800d330 <USBD_LL_GetRxDataSize>
 800b5c2:	4602      	mov	r2, r0
 800b5c4:	68fb      	ldr	r3, [r7, #12]
 800b5c6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b5d0:	2b00      	cmp	r3, #0
 800b5d2:	d00d      	beq.n	800b5f0 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b5da:	68db      	ldr	r3, [r3, #12]
 800b5dc:	68fa      	ldr	r2, [r7, #12]
 800b5de:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800b5e2:	68fa      	ldr	r2, [r7, #12]
 800b5e4:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800b5e8:	4611      	mov	r1, r2
 800b5ea:	4798      	blx	r3

    return USBD_OK;
 800b5ec:	2300      	movs	r3, #0
 800b5ee:	e000      	b.n	800b5f2 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 800b5f0:	2302      	movs	r3, #2
  }
}
 800b5f2:	4618      	mov	r0, r3
 800b5f4:	3710      	adds	r7, #16
 800b5f6:	46bd      	mov	sp, r7
 800b5f8:	bd80      	pop	{r7, pc}

0800b5fa <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800b5fa:	b580      	push	{r7, lr}
 800b5fc:	b084      	sub	sp, #16
 800b5fe:	af00      	add	r7, sp, #0
 800b600:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800b602:	687b      	ldr	r3, [r7, #4]
 800b604:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b608:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b610:	2b00      	cmp	r3, #0
 800b612:	d015      	beq.n	800b640 <USBD_CDC_EP0_RxReady+0x46>
 800b614:	68fb      	ldr	r3, [r7, #12]
 800b616:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800b61a:	2bff      	cmp	r3, #255	; 0xff
 800b61c:	d010      	beq.n	800b640 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800b61e:	687b      	ldr	r3, [r7, #4]
 800b620:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b624:	689b      	ldr	r3, [r3, #8]
 800b626:	68fa      	ldr	r2, [r7, #12]
 800b628:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 800b62c:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800b62e:	68fa      	ldr	r2, [r7, #12]
 800b630:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800b634:	b292      	uxth	r2, r2
 800b636:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800b638:	68fb      	ldr	r3, [r7, #12]
 800b63a:	22ff      	movs	r2, #255	; 0xff
 800b63c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 800b640:	2300      	movs	r3, #0
}
 800b642:	4618      	mov	r0, r3
 800b644:	3710      	adds	r7, #16
 800b646:	46bd      	mov	sp, r7
 800b648:	bd80      	pop	{r7, pc}
	...

0800b64c <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800b64c:	b480      	push	{r7}
 800b64e:	b083      	sub	sp, #12
 800b650:	af00      	add	r7, sp, #0
 800b652:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	2243      	movs	r2, #67	; 0x43
 800b658:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 800b65a:	4b03      	ldr	r3, [pc, #12]	; (800b668 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800b65c:	4618      	mov	r0, r3
 800b65e:	370c      	adds	r7, #12
 800b660:	46bd      	mov	sp, r7
 800b662:	bc80      	pop	{r7}
 800b664:	4770      	bx	lr
 800b666:	bf00      	nop
 800b668:	200000b8 	.word	0x200000b8

0800b66c <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800b66c:	b480      	push	{r7}
 800b66e:	b083      	sub	sp, #12
 800b670:	af00      	add	r7, sp, #0
 800b672:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	2243      	movs	r2, #67	; 0x43
 800b678:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 800b67a:	4b03      	ldr	r3, [pc, #12]	; (800b688 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800b67c:	4618      	mov	r0, r3
 800b67e:	370c      	adds	r7, #12
 800b680:	46bd      	mov	sp, r7
 800b682:	bc80      	pop	{r7}
 800b684:	4770      	bx	lr
 800b686:	bf00      	nop
 800b688:	20000074 	.word	0x20000074

0800b68c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800b68c:	b480      	push	{r7}
 800b68e:	b083      	sub	sp, #12
 800b690:	af00      	add	r7, sp, #0
 800b692:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	2243      	movs	r2, #67	; 0x43
 800b698:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 800b69a:	4b03      	ldr	r3, [pc, #12]	; (800b6a8 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800b69c:	4618      	mov	r0, r3
 800b69e:	370c      	adds	r7, #12
 800b6a0:	46bd      	mov	sp, r7
 800b6a2:	bc80      	pop	{r7}
 800b6a4:	4770      	bx	lr
 800b6a6:	bf00      	nop
 800b6a8:	200000fc 	.word	0x200000fc

0800b6ac <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800b6ac:	b480      	push	{r7}
 800b6ae:	b083      	sub	sp, #12
 800b6b0:	af00      	add	r7, sp, #0
 800b6b2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	220a      	movs	r2, #10
 800b6b8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800b6ba:	4b03      	ldr	r3, [pc, #12]	; (800b6c8 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800b6bc:	4618      	mov	r0, r3
 800b6be:	370c      	adds	r7, #12
 800b6c0:	46bd      	mov	sp, r7
 800b6c2:	bc80      	pop	{r7}
 800b6c4:	4770      	bx	lr
 800b6c6:	bf00      	nop
 800b6c8:	20000030 	.word	0x20000030

0800b6cc <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 800b6cc:	b480      	push	{r7}
 800b6ce:	b085      	sub	sp, #20
 800b6d0:	af00      	add	r7, sp, #0
 800b6d2:	6078      	str	r0, [r7, #4]
 800b6d4:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800b6d6:	2302      	movs	r3, #2
 800b6d8:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 800b6da:	683b      	ldr	r3, [r7, #0]
 800b6dc:	2b00      	cmp	r3, #0
 800b6de:	d005      	beq.n	800b6ec <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	683a      	ldr	r2, [r7, #0]
 800b6e4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 800b6e8:	2300      	movs	r3, #0
 800b6ea:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800b6ec:	7bfb      	ldrb	r3, [r7, #15]
}
 800b6ee:	4618      	mov	r0, r3
 800b6f0:	3714      	adds	r7, #20
 800b6f2:	46bd      	mov	sp, r7
 800b6f4:	bc80      	pop	{r7}
 800b6f6:	4770      	bx	lr

0800b6f8 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 800b6f8:	b480      	push	{r7}
 800b6fa:	b087      	sub	sp, #28
 800b6fc:	af00      	add	r7, sp, #0
 800b6fe:	60f8      	str	r0, [r7, #12]
 800b700:	60b9      	str	r1, [r7, #8]
 800b702:	4613      	mov	r3, r2
 800b704:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800b706:	68fb      	ldr	r3, [r7, #12]
 800b708:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b70c:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800b70e:	697b      	ldr	r3, [r7, #20]
 800b710:	68ba      	ldr	r2, [r7, #8]
 800b712:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800b716:	88fa      	ldrh	r2, [r7, #6]
 800b718:	697b      	ldr	r3, [r7, #20]
 800b71a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 800b71e:	2300      	movs	r3, #0
}
 800b720:	4618      	mov	r0, r3
 800b722:	371c      	adds	r7, #28
 800b724:	46bd      	mov	sp, r7
 800b726:	bc80      	pop	{r7}
 800b728:	4770      	bx	lr

0800b72a <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 800b72a:	b480      	push	{r7}
 800b72c:	b085      	sub	sp, #20
 800b72e:	af00      	add	r7, sp, #0
 800b730:	6078      	str	r0, [r7, #4]
 800b732:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800b734:	687b      	ldr	r3, [r7, #4]
 800b736:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b73a:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800b73c:	68fb      	ldr	r3, [r7, #12]
 800b73e:	683a      	ldr	r2, [r7, #0]
 800b740:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 800b744:	2300      	movs	r3, #0
}
 800b746:	4618      	mov	r0, r3
 800b748:	3714      	adds	r7, #20
 800b74a:	46bd      	mov	sp, r7
 800b74c:	bc80      	pop	{r7}
 800b74e:	4770      	bx	lr

0800b750 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800b750:	b580      	push	{r7, lr}
 800b752:	b084      	sub	sp, #16
 800b754:	af00      	add	r7, sp, #0
 800b756:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800b758:	687b      	ldr	r3, [r7, #4]
 800b75a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b75e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b766:	2b00      	cmp	r3, #0
 800b768:	d01c      	beq.n	800b7a4 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 800b76a:	68fb      	ldr	r3, [r7, #12]
 800b76c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800b770:	2b00      	cmp	r3, #0
 800b772:	d115      	bne.n	800b7a0 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 800b774:	68fb      	ldr	r3, [r7, #12]
 800b776:	2201      	movs	r2, #1
 800b778:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800b77c:	68fb      	ldr	r3, [r7, #12]
 800b77e:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800b786:	68fb      	ldr	r3, [r7, #12]
 800b788:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 800b78c:	68fb      	ldr	r3, [r7, #12]
 800b78e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800b792:	b29b      	uxth	r3, r3
 800b794:	2181      	movs	r1, #129	; 0x81
 800b796:	6878      	ldr	r0, [r7, #4]
 800b798:	f001 fd84 	bl	800d2a4 <USBD_LL_Transmit>

      return USBD_OK;
 800b79c:	2300      	movs	r3, #0
 800b79e:	e002      	b.n	800b7a6 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 800b7a0:	2301      	movs	r3, #1
 800b7a2:	e000      	b.n	800b7a6 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 800b7a4:	2302      	movs	r3, #2
  }
}
 800b7a6:	4618      	mov	r0, r3
 800b7a8:	3710      	adds	r7, #16
 800b7aa:	46bd      	mov	sp, r7
 800b7ac:	bd80      	pop	{r7, pc}

0800b7ae <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800b7ae:	b580      	push	{r7, lr}
 800b7b0:	b084      	sub	sp, #16
 800b7b2:	af00      	add	r7, sp, #0
 800b7b4:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800b7b6:	687b      	ldr	r3, [r7, #4]
 800b7b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b7bc:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 800b7be:	687b      	ldr	r3, [r7, #4]
 800b7c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b7c4:	2b00      	cmp	r3, #0
 800b7c6:	d017      	beq.n	800b7f8 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	7c1b      	ldrb	r3, [r3, #16]
 800b7cc:	2b00      	cmp	r3, #0
 800b7ce:	d109      	bne.n	800b7e4 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800b7d0:	68fb      	ldr	r3, [r7, #12]
 800b7d2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b7d6:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b7da:	2101      	movs	r1, #1
 800b7dc:	6878      	ldr	r0, [r7, #4]
 800b7de:	f001 fd84 	bl	800d2ea <USBD_LL_PrepareReceive>
 800b7e2:	e007      	b.n	800b7f4 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800b7e4:	68fb      	ldr	r3, [r7, #12]
 800b7e6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b7ea:	2340      	movs	r3, #64	; 0x40
 800b7ec:	2101      	movs	r1, #1
 800b7ee:	6878      	ldr	r0, [r7, #4]
 800b7f0:	f001 fd7b 	bl	800d2ea <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 800b7f4:	2300      	movs	r3, #0
 800b7f6:	e000      	b.n	800b7fa <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 800b7f8:	2302      	movs	r3, #2
  }
}
 800b7fa:	4618      	mov	r0, r3
 800b7fc:	3710      	adds	r7, #16
 800b7fe:	46bd      	mov	sp, r7
 800b800:	bd80      	pop	{r7, pc}

0800b802 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800b802:	b580      	push	{r7, lr}
 800b804:	b084      	sub	sp, #16
 800b806:	af00      	add	r7, sp, #0
 800b808:	60f8      	str	r0, [r7, #12]
 800b80a:	60b9      	str	r1, [r7, #8]
 800b80c:	4613      	mov	r3, r2
 800b80e:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800b810:	68fb      	ldr	r3, [r7, #12]
 800b812:	2b00      	cmp	r3, #0
 800b814:	d101      	bne.n	800b81a <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800b816:	2302      	movs	r3, #2
 800b818:	e01a      	b.n	800b850 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 800b81a:	68fb      	ldr	r3, [r7, #12]
 800b81c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b820:	2b00      	cmp	r3, #0
 800b822:	d003      	beq.n	800b82c <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800b824:	68fb      	ldr	r3, [r7, #12]
 800b826:	2200      	movs	r2, #0
 800b828:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800b82c:	68bb      	ldr	r3, [r7, #8]
 800b82e:	2b00      	cmp	r3, #0
 800b830:	d003      	beq.n	800b83a <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 800b832:	68fb      	ldr	r3, [r7, #12]
 800b834:	68ba      	ldr	r2, [r7, #8]
 800b836:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b83a:	68fb      	ldr	r3, [r7, #12]
 800b83c:	2201      	movs	r2, #1
 800b83e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800b842:	68fb      	ldr	r3, [r7, #12]
 800b844:	79fa      	ldrb	r2, [r7, #7]
 800b846:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800b848:	68f8      	ldr	r0, [r7, #12]
 800b84a:	f001 fbf9 	bl	800d040 <USBD_LL_Init>

  return USBD_OK;
 800b84e:	2300      	movs	r3, #0
}
 800b850:	4618      	mov	r0, r3
 800b852:	3710      	adds	r7, #16
 800b854:	46bd      	mov	sp, r7
 800b856:	bd80      	pop	{r7, pc}

0800b858 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800b858:	b480      	push	{r7}
 800b85a:	b085      	sub	sp, #20
 800b85c:	af00      	add	r7, sp, #0
 800b85e:	6078      	str	r0, [r7, #4]
 800b860:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 800b862:	2300      	movs	r3, #0
 800b864:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 800b866:	683b      	ldr	r3, [r7, #0]
 800b868:	2b00      	cmp	r3, #0
 800b86a:	d006      	beq.n	800b87a <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	683a      	ldr	r2, [r7, #0]
 800b870:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 800b874:	2300      	movs	r3, #0
 800b876:	73fb      	strb	r3, [r7, #15]
 800b878:	e001      	b.n	800b87e <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800b87a:	2302      	movs	r3, #2
 800b87c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800b87e:	7bfb      	ldrb	r3, [r7, #15]
}
 800b880:	4618      	mov	r0, r3
 800b882:	3714      	adds	r7, #20
 800b884:	46bd      	mov	sp, r7
 800b886:	bc80      	pop	{r7}
 800b888:	4770      	bx	lr

0800b88a <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 800b88a:	b580      	push	{r7, lr}
 800b88c:	b082      	sub	sp, #8
 800b88e:	af00      	add	r7, sp, #0
 800b890:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800b892:	6878      	ldr	r0, [r7, #4]
 800b894:	f001 fc1e 	bl	800d0d4 <USBD_LL_Start>

  return USBD_OK;
 800b898:	2300      	movs	r3, #0
}
 800b89a:	4618      	mov	r0, r3
 800b89c:	3708      	adds	r7, #8
 800b89e:	46bd      	mov	sp, r7
 800b8a0:	bd80      	pop	{r7, pc}

0800b8a2 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800b8a2:	b480      	push	{r7}
 800b8a4:	b083      	sub	sp, #12
 800b8a6:	af00      	add	r7, sp, #0
 800b8a8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800b8aa:	2300      	movs	r3, #0
}
 800b8ac:	4618      	mov	r0, r3
 800b8ae:	370c      	adds	r7, #12
 800b8b0:	46bd      	mov	sp, r7
 800b8b2:	bc80      	pop	{r7}
 800b8b4:	4770      	bx	lr

0800b8b6 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800b8b6:	b580      	push	{r7, lr}
 800b8b8:	b084      	sub	sp, #16
 800b8ba:	af00      	add	r7, sp, #0
 800b8bc:	6078      	str	r0, [r7, #4]
 800b8be:	460b      	mov	r3, r1
 800b8c0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800b8c2:	2302      	movs	r3, #2
 800b8c4:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800b8c6:	687b      	ldr	r3, [r7, #4]
 800b8c8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b8cc:	2b00      	cmp	r3, #0
 800b8ce:	d00c      	beq.n	800b8ea <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b8d6:	681b      	ldr	r3, [r3, #0]
 800b8d8:	78fa      	ldrb	r2, [r7, #3]
 800b8da:	4611      	mov	r1, r2
 800b8dc:	6878      	ldr	r0, [r7, #4]
 800b8de:	4798      	blx	r3
 800b8e0:	4603      	mov	r3, r0
 800b8e2:	2b00      	cmp	r3, #0
 800b8e4:	d101      	bne.n	800b8ea <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800b8e6:	2300      	movs	r3, #0
 800b8e8:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800b8ea:	7bfb      	ldrb	r3, [r7, #15]
}
 800b8ec:	4618      	mov	r0, r3
 800b8ee:	3710      	adds	r7, #16
 800b8f0:	46bd      	mov	sp, r7
 800b8f2:	bd80      	pop	{r7, pc}

0800b8f4 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800b8f4:	b580      	push	{r7, lr}
 800b8f6:	b082      	sub	sp, #8
 800b8f8:	af00      	add	r7, sp, #0
 800b8fa:	6078      	str	r0, [r7, #4]
 800b8fc:	460b      	mov	r3, r1
 800b8fe:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800b900:	687b      	ldr	r3, [r7, #4]
 800b902:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b906:	685b      	ldr	r3, [r3, #4]
 800b908:	78fa      	ldrb	r2, [r7, #3]
 800b90a:	4611      	mov	r1, r2
 800b90c:	6878      	ldr	r0, [r7, #4]
 800b90e:	4798      	blx	r3

  return USBD_OK;
 800b910:	2300      	movs	r3, #0
}
 800b912:	4618      	mov	r0, r3
 800b914:	3708      	adds	r7, #8
 800b916:	46bd      	mov	sp, r7
 800b918:	bd80      	pop	{r7, pc}

0800b91a <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800b91a:	b580      	push	{r7, lr}
 800b91c:	b082      	sub	sp, #8
 800b91e:	af00      	add	r7, sp, #0
 800b920:	6078      	str	r0, [r7, #4]
 800b922:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800b92a:	6839      	ldr	r1, [r7, #0]
 800b92c:	4618      	mov	r0, r3
 800b92e:	f000 ff10 	bl	800c752 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800b932:	687b      	ldr	r3, [r7, #4]
 800b934:	2201      	movs	r2, #1
 800b936:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800b93a:	687b      	ldr	r3, [r7, #4]
 800b93c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800b940:	461a      	mov	r2, r3
 800b942:	687b      	ldr	r3, [r7, #4]
 800b944:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800b948:	687b      	ldr	r3, [r7, #4]
 800b94a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800b94e:	f003 031f 	and.w	r3, r3, #31
 800b952:	2b02      	cmp	r3, #2
 800b954:	d016      	beq.n	800b984 <USBD_LL_SetupStage+0x6a>
 800b956:	2b02      	cmp	r3, #2
 800b958:	d81c      	bhi.n	800b994 <USBD_LL_SetupStage+0x7a>
 800b95a:	2b00      	cmp	r3, #0
 800b95c:	d002      	beq.n	800b964 <USBD_LL_SetupStage+0x4a>
 800b95e:	2b01      	cmp	r3, #1
 800b960:	d008      	beq.n	800b974 <USBD_LL_SetupStage+0x5a>
 800b962:	e017      	b.n	800b994 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800b96a:	4619      	mov	r1, r3
 800b96c:	6878      	ldr	r0, [r7, #4]
 800b96e:	f000 fa03 	bl	800bd78 <USBD_StdDevReq>
      break;
 800b972:	e01a      	b.n	800b9aa <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800b97a:	4619      	mov	r1, r3
 800b97c:	6878      	ldr	r0, [r7, #4]
 800b97e:	f000 fa65 	bl	800be4c <USBD_StdItfReq>
      break;
 800b982:	e012      	b.n	800b9aa <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800b98a:	4619      	mov	r1, r3
 800b98c:	6878      	ldr	r0, [r7, #4]
 800b98e:	f000 faa5 	bl	800bedc <USBD_StdEPReq>
      break;
 800b992:	e00a      	b.n	800b9aa <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800b99a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800b99e:	b2db      	uxtb	r3, r3
 800b9a0:	4619      	mov	r1, r3
 800b9a2:	6878      	ldr	r0, [r7, #4]
 800b9a4:	f001 fbf6 	bl	800d194 <USBD_LL_StallEP>
      break;
 800b9a8:	bf00      	nop
  }

  return USBD_OK;
 800b9aa:	2300      	movs	r3, #0
}
 800b9ac:	4618      	mov	r0, r3
 800b9ae:	3708      	adds	r7, #8
 800b9b0:	46bd      	mov	sp, r7
 800b9b2:	bd80      	pop	{r7, pc}

0800b9b4 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800b9b4:	b580      	push	{r7, lr}
 800b9b6:	b086      	sub	sp, #24
 800b9b8:	af00      	add	r7, sp, #0
 800b9ba:	60f8      	str	r0, [r7, #12]
 800b9bc:	460b      	mov	r3, r1
 800b9be:	607a      	str	r2, [r7, #4]
 800b9c0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800b9c2:	7afb      	ldrb	r3, [r7, #11]
 800b9c4:	2b00      	cmp	r3, #0
 800b9c6:	d14b      	bne.n	800ba60 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 800b9c8:	68fb      	ldr	r3, [r7, #12]
 800b9ca:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800b9ce:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800b9d0:	68fb      	ldr	r3, [r7, #12]
 800b9d2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800b9d6:	2b03      	cmp	r3, #3
 800b9d8:	d134      	bne.n	800ba44 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 800b9da:	697b      	ldr	r3, [r7, #20]
 800b9dc:	68da      	ldr	r2, [r3, #12]
 800b9de:	697b      	ldr	r3, [r7, #20]
 800b9e0:	691b      	ldr	r3, [r3, #16]
 800b9e2:	429a      	cmp	r2, r3
 800b9e4:	d919      	bls.n	800ba1a <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 800b9e6:	697b      	ldr	r3, [r7, #20]
 800b9e8:	68da      	ldr	r2, [r3, #12]
 800b9ea:	697b      	ldr	r3, [r7, #20]
 800b9ec:	691b      	ldr	r3, [r3, #16]
 800b9ee:	1ad2      	subs	r2, r2, r3
 800b9f0:	697b      	ldr	r3, [r7, #20]
 800b9f2:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800b9f4:	697b      	ldr	r3, [r7, #20]
 800b9f6:	68da      	ldr	r2, [r3, #12]
 800b9f8:	697b      	ldr	r3, [r7, #20]
 800b9fa:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800b9fc:	429a      	cmp	r2, r3
 800b9fe:	d203      	bcs.n	800ba08 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800ba00:	697b      	ldr	r3, [r7, #20]
 800ba02:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 800ba04:	b29b      	uxth	r3, r3
 800ba06:	e002      	b.n	800ba0e <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800ba08:	697b      	ldr	r3, [r7, #20]
 800ba0a:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800ba0c:	b29b      	uxth	r3, r3
 800ba0e:	461a      	mov	r2, r3
 800ba10:	6879      	ldr	r1, [r7, #4]
 800ba12:	68f8      	ldr	r0, [r7, #12]
 800ba14:	f000 ff8f 	bl	800c936 <USBD_CtlContinueRx>
 800ba18:	e038      	b.n	800ba8c <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800ba1a:	68fb      	ldr	r3, [r7, #12]
 800ba1c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ba20:	691b      	ldr	r3, [r3, #16]
 800ba22:	2b00      	cmp	r3, #0
 800ba24:	d00a      	beq.n	800ba3c <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800ba26:	68fb      	ldr	r3, [r7, #12]
 800ba28:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800ba2c:	2b03      	cmp	r3, #3
 800ba2e:	d105      	bne.n	800ba3c <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800ba30:	68fb      	ldr	r3, [r7, #12]
 800ba32:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ba36:	691b      	ldr	r3, [r3, #16]
 800ba38:	68f8      	ldr	r0, [r7, #12]
 800ba3a:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800ba3c:	68f8      	ldr	r0, [r7, #12]
 800ba3e:	f000 ff8c 	bl	800c95a <USBD_CtlSendStatus>
 800ba42:	e023      	b.n	800ba8c <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800ba44:	68fb      	ldr	r3, [r7, #12]
 800ba46:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800ba4a:	2b05      	cmp	r3, #5
 800ba4c:	d11e      	bne.n	800ba8c <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800ba4e:	68fb      	ldr	r3, [r7, #12]
 800ba50:	2200      	movs	r2, #0
 800ba52:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 800ba56:	2100      	movs	r1, #0
 800ba58:	68f8      	ldr	r0, [r7, #12]
 800ba5a:	f001 fb9b 	bl	800d194 <USBD_LL_StallEP>
 800ba5e:	e015      	b.n	800ba8c <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800ba60:	68fb      	ldr	r3, [r7, #12]
 800ba62:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ba66:	699b      	ldr	r3, [r3, #24]
 800ba68:	2b00      	cmp	r3, #0
 800ba6a:	d00d      	beq.n	800ba88 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800ba6c:	68fb      	ldr	r3, [r7, #12]
 800ba6e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800ba72:	2b03      	cmp	r3, #3
 800ba74:	d108      	bne.n	800ba88 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800ba76:	68fb      	ldr	r3, [r7, #12]
 800ba78:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ba7c:	699b      	ldr	r3, [r3, #24]
 800ba7e:	7afa      	ldrb	r2, [r7, #11]
 800ba80:	4611      	mov	r1, r2
 800ba82:	68f8      	ldr	r0, [r7, #12]
 800ba84:	4798      	blx	r3
 800ba86:	e001      	b.n	800ba8c <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800ba88:	2302      	movs	r3, #2
 800ba8a:	e000      	b.n	800ba8e <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 800ba8c:	2300      	movs	r3, #0
}
 800ba8e:	4618      	mov	r0, r3
 800ba90:	3718      	adds	r7, #24
 800ba92:	46bd      	mov	sp, r7
 800ba94:	bd80      	pop	{r7, pc}

0800ba96 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800ba96:	b580      	push	{r7, lr}
 800ba98:	b086      	sub	sp, #24
 800ba9a:	af00      	add	r7, sp, #0
 800ba9c:	60f8      	str	r0, [r7, #12]
 800ba9e:	460b      	mov	r3, r1
 800baa0:	607a      	str	r2, [r7, #4]
 800baa2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800baa4:	7afb      	ldrb	r3, [r7, #11]
 800baa6:	2b00      	cmp	r3, #0
 800baa8:	d17f      	bne.n	800bbaa <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 800baaa:	68fb      	ldr	r3, [r7, #12]
 800baac:	3314      	adds	r3, #20
 800baae:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800bab0:	68fb      	ldr	r3, [r7, #12]
 800bab2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800bab6:	2b02      	cmp	r3, #2
 800bab8:	d15c      	bne.n	800bb74 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 800baba:	697b      	ldr	r3, [r7, #20]
 800babc:	68da      	ldr	r2, [r3, #12]
 800babe:	697b      	ldr	r3, [r7, #20]
 800bac0:	691b      	ldr	r3, [r3, #16]
 800bac2:	429a      	cmp	r2, r3
 800bac4:	d915      	bls.n	800baf2 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 800bac6:	697b      	ldr	r3, [r7, #20]
 800bac8:	68da      	ldr	r2, [r3, #12]
 800baca:	697b      	ldr	r3, [r7, #20]
 800bacc:	691b      	ldr	r3, [r3, #16]
 800bace:	1ad2      	subs	r2, r2, r3
 800bad0:	697b      	ldr	r3, [r7, #20]
 800bad2:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 800bad4:	697b      	ldr	r3, [r7, #20]
 800bad6:	68db      	ldr	r3, [r3, #12]
 800bad8:	b29b      	uxth	r3, r3
 800bada:	461a      	mov	r2, r3
 800badc:	6879      	ldr	r1, [r7, #4]
 800bade:	68f8      	ldr	r0, [r7, #12]
 800bae0:	f000 fef9 	bl	800c8d6 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800bae4:	2300      	movs	r3, #0
 800bae6:	2200      	movs	r2, #0
 800bae8:	2100      	movs	r1, #0
 800baea:	68f8      	ldr	r0, [r7, #12]
 800baec:	f001 fbfd 	bl	800d2ea <USBD_LL_PrepareReceive>
 800baf0:	e04e      	b.n	800bb90 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800baf2:	697b      	ldr	r3, [r7, #20]
 800baf4:	689b      	ldr	r3, [r3, #8]
 800baf6:	697a      	ldr	r2, [r7, #20]
 800baf8:	6912      	ldr	r2, [r2, #16]
 800bafa:	fbb3 f1f2 	udiv	r1, r3, r2
 800bafe:	fb02 f201 	mul.w	r2, r2, r1
 800bb02:	1a9b      	subs	r3, r3, r2
 800bb04:	2b00      	cmp	r3, #0
 800bb06:	d11c      	bne.n	800bb42 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 800bb08:	697b      	ldr	r3, [r7, #20]
 800bb0a:	689a      	ldr	r2, [r3, #8]
 800bb0c:	697b      	ldr	r3, [r7, #20]
 800bb0e:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800bb10:	429a      	cmp	r2, r3
 800bb12:	d316      	bcc.n	800bb42 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 800bb14:	697b      	ldr	r3, [r7, #20]
 800bb16:	689a      	ldr	r2, [r3, #8]
 800bb18:	68fb      	ldr	r3, [r7, #12]
 800bb1a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800bb1e:	429a      	cmp	r2, r3
 800bb20:	d20f      	bcs.n	800bb42 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800bb22:	2200      	movs	r2, #0
 800bb24:	2100      	movs	r1, #0
 800bb26:	68f8      	ldr	r0, [r7, #12]
 800bb28:	f000 fed5 	bl	800c8d6 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800bb2c:	68fb      	ldr	r3, [r7, #12]
 800bb2e:	2200      	movs	r2, #0
 800bb30:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800bb34:	2300      	movs	r3, #0
 800bb36:	2200      	movs	r2, #0
 800bb38:	2100      	movs	r1, #0
 800bb3a:	68f8      	ldr	r0, [r7, #12]
 800bb3c:	f001 fbd5 	bl	800d2ea <USBD_LL_PrepareReceive>
 800bb40:	e026      	b.n	800bb90 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800bb42:	68fb      	ldr	r3, [r7, #12]
 800bb44:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bb48:	68db      	ldr	r3, [r3, #12]
 800bb4a:	2b00      	cmp	r3, #0
 800bb4c:	d00a      	beq.n	800bb64 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800bb4e:	68fb      	ldr	r3, [r7, #12]
 800bb50:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800bb54:	2b03      	cmp	r3, #3
 800bb56:	d105      	bne.n	800bb64 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800bb58:	68fb      	ldr	r3, [r7, #12]
 800bb5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bb5e:	68db      	ldr	r3, [r3, #12]
 800bb60:	68f8      	ldr	r0, [r7, #12]
 800bb62:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800bb64:	2180      	movs	r1, #128	; 0x80
 800bb66:	68f8      	ldr	r0, [r7, #12]
 800bb68:	f001 fb14 	bl	800d194 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800bb6c:	68f8      	ldr	r0, [r7, #12]
 800bb6e:	f000 ff07 	bl	800c980 <USBD_CtlReceiveStatus>
 800bb72:	e00d      	b.n	800bb90 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800bb74:	68fb      	ldr	r3, [r7, #12]
 800bb76:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800bb7a:	2b04      	cmp	r3, #4
 800bb7c:	d004      	beq.n	800bb88 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800bb7e:	68fb      	ldr	r3, [r7, #12]
 800bb80:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800bb84:	2b00      	cmp	r3, #0
 800bb86:	d103      	bne.n	800bb90 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800bb88:	2180      	movs	r1, #128	; 0x80
 800bb8a:	68f8      	ldr	r0, [r7, #12]
 800bb8c:	f001 fb02 	bl	800d194 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800bb90:	68fb      	ldr	r3, [r7, #12]
 800bb92:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800bb96:	2b01      	cmp	r3, #1
 800bb98:	d11d      	bne.n	800bbd6 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 800bb9a:	68f8      	ldr	r0, [r7, #12]
 800bb9c:	f7ff fe81 	bl	800b8a2 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800bba0:	68fb      	ldr	r3, [r7, #12]
 800bba2:	2200      	movs	r2, #0
 800bba4:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800bba8:	e015      	b.n	800bbd6 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800bbaa:	68fb      	ldr	r3, [r7, #12]
 800bbac:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bbb0:	695b      	ldr	r3, [r3, #20]
 800bbb2:	2b00      	cmp	r3, #0
 800bbb4:	d00d      	beq.n	800bbd2 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800bbb6:	68fb      	ldr	r3, [r7, #12]
 800bbb8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800bbbc:	2b03      	cmp	r3, #3
 800bbbe:	d108      	bne.n	800bbd2 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800bbc0:	68fb      	ldr	r3, [r7, #12]
 800bbc2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bbc6:	695b      	ldr	r3, [r3, #20]
 800bbc8:	7afa      	ldrb	r2, [r7, #11]
 800bbca:	4611      	mov	r1, r2
 800bbcc:	68f8      	ldr	r0, [r7, #12]
 800bbce:	4798      	blx	r3
 800bbd0:	e001      	b.n	800bbd6 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800bbd2:	2302      	movs	r3, #2
 800bbd4:	e000      	b.n	800bbd8 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800bbd6:	2300      	movs	r3, #0
}
 800bbd8:	4618      	mov	r0, r3
 800bbda:	3718      	adds	r7, #24
 800bbdc:	46bd      	mov	sp, r7
 800bbde:	bd80      	pop	{r7, pc}

0800bbe0 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800bbe0:	b580      	push	{r7, lr}
 800bbe2:	b082      	sub	sp, #8
 800bbe4:	af00      	add	r7, sp, #0
 800bbe6:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800bbe8:	2340      	movs	r3, #64	; 0x40
 800bbea:	2200      	movs	r2, #0
 800bbec:	2100      	movs	r1, #0
 800bbee:	6878      	ldr	r0, [r7, #4]
 800bbf0:	f001 fa8b 	bl	800d10a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800bbf4:	687b      	ldr	r3, [r7, #4]
 800bbf6:	2201      	movs	r2, #1
 800bbf8:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	2240      	movs	r2, #64	; 0x40
 800bc00:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800bc04:	2340      	movs	r3, #64	; 0x40
 800bc06:	2200      	movs	r2, #0
 800bc08:	2180      	movs	r1, #128	; 0x80
 800bc0a:	6878      	ldr	r0, [r7, #4]
 800bc0c:	f001 fa7d 	bl	800d10a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800bc10:	687b      	ldr	r3, [r7, #4]
 800bc12:	2201      	movs	r2, #1
 800bc14:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800bc16:	687b      	ldr	r3, [r7, #4]
 800bc18:	2240      	movs	r2, #64	; 0x40
 800bc1a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800bc1c:	687b      	ldr	r3, [r7, #4]
 800bc1e:	2201      	movs	r2, #1
 800bc20:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	2200      	movs	r2, #0
 800bc28:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	2200      	movs	r2, #0
 800bc30:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800bc32:	687b      	ldr	r3, [r7, #4]
 800bc34:	2200      	movs	r2, #0
 800bc36:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 800bc3a:	687b      	ldr	r3, [r7, #4]
 800bc3c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bc40:	2b00      	cmp	r3, #0
 800bc42:	d009      	beq.n	800bc58 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800bc44:	687b      	ldr	r3, [r7, #4]
 800bc46:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bc4a:	685b      	ldr	r3, [r3, #4]
 800bc4c:	687a      	ldr	r2, [r7, #4]
 800bc4e:	6852      	ldr	r2, [r2, #4]
 800bc50:	b2d2      	uxtb	r2, r2
 800bc52:	4611      	mov	r1, r2
 800bc54:	6878      	ldr	r0, [r7, #4]
 800bc56:	4798      	blx	r3
  }

  return USBD_OK;
 800bc58:	2300      	movs	r3, #0
}
 800bc5a:	4618      	mov	r0, r3
 800bc5c:	3708      	adds	r7, #8
 800bc5e:	46bd      	mov	sp, r7
 800bc60:	bd80      	pop	{r7, pc}

0800bc62 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800bc62:	b480      	push	{r7}
 800bc64:	b083      	sub	sp, #12
 800bc66:	af00      	add	r7, sp, #0
 800bc68:	6078      	str	r0, [r7, #4]
 800bc6a:	460b      	mov	r3, r1
 800bc6c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800bc6e:	687b      	ldr	r3, [r7, #4]
 800bc70:	78fa      	ldrb	r2, [r7, #3]
 800bc72:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800bc74:	2300      	movs	r3, #0
}
 800bc76:	4618      	mov	r0, r3
 800bc78:	370c      	adds	r7, #12
 800bc7a:	46bd      	mov	sp, r7
 800bc7c:	bc80      	pop	{r7}
 800bc7e:	4770      	bx	lr

0800bc80 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800bc80:	b480      	push	{r7}
 800bc82:	b083      	sub	sp, #12
 800bc84:	af00      	add	r7, sp, #0
 800bc86:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800bc8e:	687b      	ldr	r3, [r7, #4]
 800bc90:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800bc94:	687b      	ldr	r3, [r7, #4]
 800bc96:	2204      	movs	r2, #4
 800bc98:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800bc9c:	2300      	movs	r3, #0
}
 800bc9e:	4618      	mov	r0, r3
 800bca0:	370c      	adds	r7, #12
 800bca2:	46bd      	mov	sp, r7
 800bca4:	bc80      	pop	{r7}
 800bca6:	4770      	bx	lr

0800bca8 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800bca8:	b480      	push	{r7}
 800bcaa:	b083      	sub	sp, #12
 800bcac:	af00      	add	r7, sp, #0
 800bcae:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800bcb0:	687b      	ldr	r3, [r7, #4]
 800bcb2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bcb6:	2b04      	cmp	r3, #4
 800bcb8:	d105      	bne.n	800bcc6 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800bcba:	687b      	ldr	r3, [r7, #4]
 800bcbc:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 800bcc0:	687b      	ldr	r3, [r7, #4]
 800bcc2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800bcc6:	2300      	movs	r3, #0
}
 800bcc8:	4618      	mov	r0, r3
 800bcca:	370c      	adds	r7, #12
 800bccc:	46bd      	mov	sp, r7
 800bcce:	bc80      	pop	{r7}
 800bcd0:	4770      	bx	lr

0800bcd2 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800bcd2:	b580      	push	{r7, lr}
 800bcd4:	b082      	sub	sp, #8
 800bcd6:	af00      	add	r7, sp, #0
 800bcd8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bcda:	687b      	ldr	r3, [r7, #4]
 800bcdc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bce0:	2b03      	cmp	r3, #3
 800bce2:	d10b      	bne.n	800bcfc <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800bce4:	687b      	ldr	r3, [r7, #4]
 800bce6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bcea:	69db      	ldr	r3, [r3, #28]
 800bcec:	2b00      	cmp	r3, #0
 800bcee:	d005      	beq.n	800bcfc <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800bcf0:	687b      	ldr	r3, [r7, #4]
 800bcf2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bcf6:	69db      	ldr	r3, [r3, #28]
 800bcf8:	6878      	ldr	r0, [r7, #4]
 800bcfa:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800bcfc:	2300      	movs	r3, #0
}
 800bcfe:	4618      	mov	r0, r3
 800bd00:	3708      	adds	r7, #8
 800bd02:	46bd      	mov	sp, r7
 800bd04:	bd80      	pop	{r7, pc}

0800bd06 <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800bd06:	b480      	push	{r7}
 800bd08:	b083      	sub	sp, #12
 800bd0a:	af00      	add	r7, sp, #0
 800bd0c:	6078      	str	r0, [r7, #4]
 800bd0e:	460b      	mov	r3, r1
 800bd10:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800bd12:	2300      	movs	r3, #0
}
 800bd14:	4618      	mov	r0, r3
 800bd16:	370c      	adds	r7, #12
 800bd18:	46bd      	mov	sp, r7
 800bd1a:	bc80      	pop	{r7}
 800bd1c:	4770      	bx	lr

0800bd1e <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800bd1e:	b480      	push	{r7}
 800bd20:	b083      	sub	sp, #12
 800bd22:	af00      	add	r7, sp, #0
 800bd24:	6078      	str	r0, [r7, #4]
 800bd26:	460b      	mov	r3, r1
 800bd28:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800bd2a:	2300      	movs	r3, #0
}
 800bd2c:	4618      	mov	r0, r3
 800bd2e:	370c      	adds	r7, #12
 800bd30:	46bd      	mov	sp, r7
 800bd32:	bc80      	pop	{r7}
 800bd34:	4770      	bx	lr

0800bd36 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800bd36:	b480      	push	{r7}
 800bd38:	b083      	sub	sp, #12
 800bd3a:	af00      	add	r7, sp, #0
 800bd3c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800bd3e:	2300      	movs	r3, #0
}
 800bd40:	4618      	mov	r0, r3
 800bd42:	370c      	adds	r7, #12
 800bd44:	46bd      	mov	sp, r7
 800bd46:	bc80      	pop	{r7}
 800bd48:	4770      	bx	lr

0800bd4a <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800bd4a:	b580      	push	{r7, lr}
 800bd4c:	b082      	sub	sp, #8
 800bd4e:	af00      	add	r7, sp, #0
 800bd50:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800bd52:	687b      	ldr	r3, [r7, #4]
 800bd54:	2201      	movs	r2, #1
 800bd56:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800bd5a:	687b      	ldr	r3, [r7, #4]
 800bd5c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bd60:	685b      	ldr	r3, [r3, #4]
 800bd62:	687a      	ldr	r2, [r7, #4]
 800bd64:	6852      	ldr	r2, [r2, #4]
 800bd66:	b2d2      	uxtb	r2, r2
 800bd68:	4611      	mov	r1, r2
 800bd6a:	6878      	ldr	r0, [r7, #4]
 800bd6c:	4798      	blx	r3

  return USBD_OK;
 800bd6e:	2300      	movs	r3, #0
}
 800bd70:	4618      	mov	r0, r3
 800bd72:	3708      	adds	r7, #8
 800bd74:	46bd      	mov	sp, r7
 800bd76:	bd80      	pop	{r7, pc}

0800bd78 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 800bd78:	b580      	push	{r7, lr}
 800bd7a:	b084      	sub	sp, #16
 800bd7c:	af00      	add	r7, sp, #0
 800bd7e:	6078      	str	r0, [r7, #4]
 800bd80:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800bd82:	2300      	movs	r3, #0
 800bd84:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bd86:	683b      	ldr	r3, [r7, #0]
 800bd88:	781b      	ldrb	r3, [r3, #0]
 800bd8a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800bd8e:	2b40      	cmp	r3, #64	; 0x40
 800bd90:	d005      	beq.n	800bd9e <USBD_StdDevReq+0x26>
 800bd92:	2b40      	cmp	r3, #64	; 0x40
 800bd94:	d84f      	bhi.n	800be36 <USBD_StdDevReq+0xbe>
 800bd96:	2b00      	cmp	r3, #0
 800bd98:	d009      	beq.n	800bdae <USBD_StdDevReq+0x36>
 800bd9a:	2b20      	cmp	r3, #32
 800bd9c:	d14b      	bne.n	800be36 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800bd9e:	687b      	ldr	r3, [r7, #4]
 800bda0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bda4:	689b      	ldr	r3, [r3, #8]
 800bda6:	6839      	ldr	r1, [r7, #0]
 800bda8:	6878      	ldr	r0, [r7, #4]
 800bdaa:	4798      	blx	r3
      break;
 800bdac:	e048      	b.n	800be40 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800bdae:	683b      	ldr	r3, [r7, #0]
 800bdb0:	785b      	ldrb	r3, [r3, #1]
 800bdb2:	2b09      	cmp	r3, #9
 800bdb4:	d839      	bhi.n	800be2a <USBD_StdDevReq+0xb2>
 800bdb6:	a201      	add	r2, pc, #4	; (adr r2, 800bdbc <USBD_StdDevReq+0x44>)
 800bdb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bdbc:	0800be0d 	.word	0x0800be0d
 800bdc0:	0800be21 	.word	0x0800be21
 800bdc4:	0800be2b 	.word	0x0800be2b
 800bdc8:	0800be17 	.word	0x0800be17
 800bdcc:	0800be2b 	.word	0x0800be2b
 800bdd0:	0800bdef 	.word	0x0800bdef
 800bdd4:	0800bde5 	.word	0x0800bde5
 800bdd8:	0800be2b 	.word	0x0800be2b
 800bddc:	0800be03 	.word	0x0800be03
 800bde0:	0800bdf9 	.word	0x0800bdf9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800bde4:	6839      	ldr	r1, [r7, #0]
 800bde6:	6878      	ldr	r0, [r7, #4]
 800bde8:	f000 f9dc 	bl	800c1a4 <USBD_GetDescriptor>
          break;
 800bdec:	e022      	b.n	800be34 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800bdee:	6839      	ldr	r1, [r7, #0]
 800bdf0:	6878      	ldr	r0, [r7, #4]
 800bdf2:	f000 fb3f 	bl	800c474 <USBD_SetAddress>
          break;
 800bdf6:	e01d      	b.n	800be34 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 800bdf8:	6839      	ldr	r1, [r7, #0]
 800bdfa:	6878      	ldr	r0, [r7, #4]
 800bdfc:	f000 fb7e 	bl	800c4fc <USBD_SetConfig>
          break;
 800be00:	e018      	b.n	800be34 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800be02:	6839      	ldr	r1, [r7, #0]
 800be04:	6878      	ldr	r0, [r7, #4]
 800be06:	f000 fc07 	bl	800c618 <USBD_GetConfig>
          break;
 800be0a:	e013      	b.n	800be34 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800be0c:	6839      	ldr	r1, [r7, #0]
 800be0e:	6878      	ldr	r0, [r7, #4]
 800be10:	f000 fc37 	bl	800c682 <USBD_GetStatus>
          break;
 800be14:	e00e      	b.n	800be34 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800be16:	6839      	ldr	r1, [r7, #0]
 800be18:	6878      	ldr	r0, [r7, #4]
 800be1a:	f000 fc65 	bl	800c6e8 <USBD_SetFeature>
          break;
 800be1e:	e009      	b.n	800be34 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800be20:	6839      	ldr	r1, [r7, #0]
 800be22:	6878      	ldr	r0, [r7, #4]
 800be24:	f000 fc74 	bl	800c710 <USBD_ClrFeature>
          break;
 800be28:	e004      	b.n	800be34 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 800be2a:	6839      	ldr	r1, [r7, #0]
 800be2c:	6878      	ldr	r0, [r7, #4]
 800be2e:	f000 fccc 	bl	800c7ca <USBD_CtlError>
          break;
 800be32:	bf00      	nop
      }
      break;
 800be34:	e004      	b.n	800be40 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 800be36:	6839      	ldr	r1, [r7, #0]
 800be38:	6878      	ldr	r0, [r7, #4]
 800be3a:	f000 fcc6 	bl	800c7ca <USBD_CtlError>
      break;
 800be3e:	bf00      	nop
  }

  return ret;
 800be40:	7bfb      	ldrb	r3, [r7, #15]
}
 800be42:	4618      	mov	r0, r3
 800be44:	3710      	adds	r7, #16
 800be46:	46bd      	mov	sp, r7
 800be48:	bd80      	pop	{r7, pc}
 800be4a:	bf00      	nop

0800be4c <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 800be4c:	b580      	push	{r7, lr}
 800be4e:	b084      	sub	sp, #16
 800be50:	af00      	add	r7, sp, #0
 800be52:	6078      	str	r0, [r7, #4]
 800be54:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800be56:	2300      	movs	r3, #0
 800be58:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800be5a:	683b      	ldr	r3, [r7, #0]
 800be5c:	781b      	ldrb	r3, [r3, #0]
 800be5e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800be62:	2b40      	cmp	r3, #64	; 0x40
 800be64:	d005      	beq.n	800be72 <USBD_StdItfReq+0x26>
 800be66:	2b40      	cmp	r3, #64	; 0x40
 800be68:	d82e      	bhi.n	800bec8 <USBD_StdItfReq+0x7c>
 800be6a:	2b00      	cmp	r3, #0
 800be6c:	d001      	beq.n	800be72 <USBD_StdItfReq+0x26>
 800be6e:	2b20      	cmp	r3, #32
 800be70:	d12a      	bne.n	800bec8 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800be72:	687b      	ldr	r3, [r7, #4]
 800be74:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800be78:	3b01      	subs	r3, #1
 800be7a:	2b02      	cmp	r3, #2
 800be7c:	d81d      	bhi.n	800beba <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800be7e:	683b      	ldr	r3, [r7, #0]
 800be80:	889b      	ldrh	r3, [r3, #4]
 800be82:	b2db      	uxtb	r3, r3
 800be84:	2b01      	cmp	r3, #1
 800be86:	d813      	bhi.n	800beb0 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800be88:	687b      	ldr	r3, [r7, #4]
 800be8a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800be8e:	689b      	ldr	r3, [r3, #8]
 800be90:	6839      	ldr	r1, [r7, #0]
 800be92:	6878      	ldr	r0, [r7, #4]
 800be94:	4798      	blx	r3
 800be96:	4603      	mov	r3, r0
 800be98:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800be9a:	683b      	ldr	r3, [r7, #0]
 800be9c:	88db      	ldrh	r3, [r3, #6]
 800be9e:	2b00      	cmp	r3, #0
 800bea0:	d110      	bne.n	800bec4 <USBD_StdItfReq+0x78>
 800bea2:	7bfb      	ldrb	r3, [r7, #15]
 800bea4:	2b00      	cmp	r3, #0
 800bea6:	d10d      	bne.n	800bec4 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 800bea8:	6878      	ldr	r0, [r7, #4]
 800beaa:	f000 fd56 	bl	800c95a <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800beae:	e009      	b.n	800bec4 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 800beb0:	6839      	ldr	r1, [r7, #0]
 800beb2:	6878      	ldr	r0, [r7, #4]
 800beb4:	f000 fc89 	bl	800c7ca <USBD_CtlError>
          break;
 800beb8:	e004      	b.n	800bec4 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 800beba:	6839      	ldr	r1, [r7, #0]
 800bebc:	6878      	ldr	r0, [r7, #4]
 800bebe:	f000 fc84 	bl	800c7ca <USBD_CtlError>
          break;
 800bec2:	e000      	b.n	800bec6 <USBD_StdItfReq+0x7a>
          break;
 800bec4:	bf00      	nop
      }
      break;
 800bec6:	e004      	b.n	800bed2 <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 800bec8:	6839      	ldr	r1, [r7, #0]
 800beca:	6878      	ldr	r0, [r7, #4]
 800becc:	f000 fc7d 	bl	800c7ca <USBD_CtlError>
      break;
 800bed0:	bf00      	nop
  }

  return USBD_OK;
 800bed2:	2300      	movs	r3, #0
}
 800bed4:	4618      	mov	r0, r3
 800bed6:	3710      	adds	r7, #16
 800bed8:	46bd      	mov	sp, r7
 800beda:	bd80      	pop	{r7, pc}

0800bedc <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 800bedc:	b580      	push	{r7, lr}
 800bede:	b084      	sub	sp, #16
 800bee0:	af00      	add	r7, sp, #0
 800bee2:	6078      	str	r0, [r7, #4]
 800bee4:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800bee6:	2300      	movs	r3, #0
 800bee8:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 800beea:	683b      	ldr	r3, [r7, #0]
 800beec:	889b      	ldrh	r3, [r3, #4]
 800beee:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bef0:	683b      	ldr	r3, [r7, #0]
 800bef2:	781b      	ldrb	r3, [r3, #0]
 800bef4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800bef8:	2b40      	cmp	r3, #64	; 0x40
 800befa:	d007      	beq.n	800bf0c <USBD_StdEPReq+0x30>
 800befc:	2b40      	cmp	r3, #64	; 0x40
 800befe:	f200 8146 	bhi.w	800c18e <USBD_StdEPReq+0x2b2>
 800bf02:	2b00      	cmp	r3, #0
 800bf04:	d00a      	beq.n	800bf1c <USBD_StdEPReq+0x40>
 800bf06:	2b20      	cmp	r3, #32
 800bf08:	f040 8141 	bne.w	800c18e <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800bf0c:	687b      	ldr	r3, [r7, #4]
 800bf0e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bf12:	689b      	ldr	r3, [r3, #8]
 800bf14:	6839      	ldr	r1, [r7, #0]
 800bf16:	6878      	ldr	r0, [r7, #4]
 800bf18:	4798      	blx	r3
      break;
 800bf1a:	e13d      	b.n	800c198 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 800bf1c:	683b      	ldr	r3, [r7, #0]
 800bf1e:	781b      	ldrb	r3, [r3, #0]
 800bf20:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800bf24:	2b20      	cmp	r3, #32
 800bf26:	d10a      	bne.n	800bf3e <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800bf28:	687b      	ldr	r3, [r7, #4]
 800bf2a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bf2e:	689b      	ldr	r3, [r3, #8]
 800bf30:	6839      	ldr	r1, [r7, #0]
 800bf32:	6878      	ldr	r0, [r7, #4]
 800bf34:	4798      	blx	r3
 800bf36:	4603      	mov	r3, r0
 800bf38:	73fb      	strb	r3, [r7, #15]

        return ret;
 800bf3a:	7bfb      	ldrb	r3, [r7, #15]
 800bf3c:	e12d      	b.n	800c19a <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 800bf3e:	683b      	ldr	r3, [r7, #0]
 800bf40:	785b      	ldrb	r3, [r3, #1]
 800bf42:	2b03      	cmp	r3, #3
 800bf44:	d007      	beq.n	800bf56 <USBD_StdEPReq+0x7a>
 800bf46:	2b03      	cmp	r3, #3
 800bf48:	f300 811b 	bgt.w	800c182 <USBD_StdEPReq+0x2a6>
 800bf4c:	2b00      	cmp	r3, #0
 800bf4e:	d072      	beq.n	800c036 <USBD_StdEPReq+0x15a>
 800bf50:	2b01      	cmp	r3, #1
 800bf52:	d03a      	beq.n	800bfca <USBD_StdEPReq+0xee>
 800bf54:	e115      	b.n	800c182 <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800bf56:	687b      	ldr	r3, [r7, #4]
 800bf58:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bf5c:	2b02      	cmp	r3, #2
 800bf5e:	d002      	beq.n	800bf66 <USBD_StdEPReq+0x8a>
 800bf60:	2b03      	cmp	r3, #3
 800bf62:	d015      	beq.n	800bf90 <USBD_StdEPReq+0xb4>
 800bf64:	e02b      	b.n	800bfbe <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800bf66:	7bbb      	ldrb	r3, [r7, #14]
 800bf68:	2b00      	cmp	r3, #0
 800bf6a:	d00c      	beq.n	800bf86 <USBD_StdEPReq+0xaa>
 800bf6c:	7bbb      	ldrb	r3, [r7, #14]
 800bf6e:	2b80      	cmp	r3, #128	; 0x80
 800bf70:	d009      	beq.n	800bf86 <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800bf72:	7bbb      	ldrb	r3, [r7, #14]
 800bf74:	4619      	mov	r1, r3
 800bf76:	6878      	ldr	r0, [r7, #4]
 800bf78:	f001 f90c 	bl	800d194 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800bf7c:	2180      	movs	r1, #128	; 0x80
 800bf7e:	6878      	ldr	r0, [r7, #4]
 800bf80:	f001 f908 	bl	800d194 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800bf84:	e020      	b.n	800bfc8 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 800bf86:	6839      	ldr	r1, [r7, #0]
 800bf88:	6878      	ldr	r0, [r7, #4]
 800bf8a:	f000 fc1e 	bl	800c7ca <USBD_CtlError>
              break;
 800bf8e:	e01b      	b.n	800bfc8 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800bf90:	683b      	ldr	r3, [r7, #0]
 800bf92:	885b      	ldrh	r3, [r3, #2]
 800bf94:	2b00      	cmp	r3, #0
 800bf96:	d10e      	bne.n	800bfb6 <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 800bf98:	7bbb      	ldrb	r3, [r7, #14]
 800bf9a:	2b00      	cmp	r3, #0
 800bf9c:	d00b      	beq.n	800bfb6 <USBD_StdEPReq+0xda>
 800bf9e:	7bbb      	ldrb	r3, [r7, #14]
 800bfa0:	2b80      	cmp	r3, #128	; 0x80
 800bfa2:	d008      	beq.n	800bfb6 <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800bfa4:	683b      	ldr	r3, [r7, #0]
 800bfa6:	88db      	ldrh	r3, [r3, #6]
 800bfa8:	2b00      	cmp	r3, #0
 800bfaa:	d104      	bne.n	800bfb6 <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 800bfac:	7bbb      	ldrb	r3, [r7, #14]
 800bfae:	4619      	mov	r1, r3
 800bfb0:	6878      	ldr	r0, [r7, #4]
 800bfb2:	f001 f8ef 	bl	800d194 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800bfb6:	6878      	ldr	r0, [r7, #4]
 800bfb8:	f000 fccf 	bl	800c95a <USBD_CtlSendStatus>

              break;
 800bfbc:	e004      	b.n	800bfc8 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 800bfbe:	6839      	ldr	r1, [r7, #0]
 800bfc0:	6878      	ldr	r0, [r7, #4]
 800bfc2:	f000 fc02 	bl	800c7ca <USBD_CtlError>
              break;
 800bfc6:	bf00      	nop
          }
          break;
 800bfc8:	e0e0      	b.n	800c18c <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800bfca:	687b      	ldr	r3, [r7, #4]
 800bfcc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bfd0:	2b02      	cmp	r3, #2
 800bfd2:	d002      	beq.n	800bfda <USBD_StdEPReq+0xfe>
 800bfd4:	2b03      	cmp	r3, #3
 800bfd6:	d015      	beq.n	800c004 <USBD_StdEPReq+0x128>
 800bfd8:	e026      	b.n	800c028 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800bfda:	7bbb      	ldrb	r3, [r7, #14]
 800bfdc:	2b00      	cmp	r3, #0
 800bfde:	d00c      	beq.n	800bffa <USBD_StdEPReq+0x11e>
 800bfe0:	7bbb      	ldrb	r3, [r7, #14]
 800bfe2:	2b80      	cmp	r3, #128	; 0x80
 800bfe4:	d009      	beq.n	800bffa <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800bfe6:	7bbb      	ldrb	r3, [r7, #14]
 800bfe8:	4619      	mov	r1, r3
 800bfea:	6878      	ldr	r0, [r7, #4]
 800bfec:	f001 f8d2 	bl	800d194 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800bff0:	2180      	movs	r1, #128	; 0x80
 800bff2:	6878      	ldr	r0, [r7, #4]
 800bff4:	f001 f8ce 	bl	800d194 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800bff8:	e01c      	b.n	800c034 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 800bffa:	6839      	ldr	r1, [r7, #0]
 800bffc:	6878      	ldr	r0, [r7, #4]
 800bffe:	f000 fbe4 	bl	800c7ca <USBD_CtlError>
              break;
 800c002:	e017      	b.n	800c034 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800c004:	683b      	ldr	r3, [r7, #0]
 800c006:	885b      	ldrh	r3, [r3, #2]
 800c008:	2b00      	cmp	r3, #0
 800c00a:	d112      	bne.n	800c032 <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800c00c:	7bbb      	ldrb	r3, [r7, #14]
 800c00e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c012:	2b00      	cmp	r3, #0
 800c014:	d004      	beq.n	800c020 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800c016:	7bbb      	ldrb	r3, [r7, #14]
 800c018:	4619      	mov	r1, r3
 800c01a:	6878      	ldr	r0, [r7, #4]
 800c01c:	f001 f8d9 	bl	800d1d2 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 800c020:	6878      	ldr	r0, [r7, #4]
 800c022:	f000 fc9a 	bl	800c95a <USBD_CtlSendStatus>
              }
              break;
 800c026:	e004      	b.n	800c032 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 800c028:	6839      	ldr	r1, [r7, #0]
 800c02a:	6878      	ldr	r0, [r7, #4]
 800c02c:	f000 fbcd 	bl	800c7ca <USBD_CtlError>
              break;
 800c030:	e000      	b.n	800c034 <USBD_StdEPReq+0x158>
              break;
 800c032:	bf00      	nop
          }
          break;
 800c034:	e0aa      	b.n	800c18c <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800c036:	687b      	ldr	r3, [r7, #4]
 800c038:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c03c:	2b02      	cmp	r3, #2
 800c03e:	d002      	beq.n	800c046 <USBD_StdEPReq+0x16a>
 800c040:	2b03      	cmp	r3, #3
 800c042:	d032      	beq.n	800c0aa <USBD_StdEPReq+0x1ce>
 800c044:	e097      	b.n	800c176 <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c046:	7bbb      	ldrb	r3, [r7, #14]
 800c048:	2b00      	cmp	r3, #0
 800c04a:	d007      	beq.n	800c05c <USBD_StdEPReq+0x180>
 800c04c:	7bbb      	ldrb	r3, [r7, #14]
 800c04e:	2b80      	cmp	r3, #128	; 0x80
 800c050:	d004      	beq.n	800c05c <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 800c052:	6839      	ldr	r1, [r7, #0]
 800c054:	6878      	ldr	r0, [r7, #4]
 800c056:	f000 fbb8 	bl	800c7ca <USBD_CtlError>
                break;
 800c05a:	e091      	b.n	800c180 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c05c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c060:	2b00      	cmp	r3, #0
 800c062:	da0b      	bge.n	800c07c <USBD_StdEPReq+0x1a0>
 800c064:	7bbb      	ldrb	r3, [r7, #14]
 800c066:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c06a:	4613      	mov	r3, r2
 800c06c:	009b      	lsls	r3, r3, #2
 800c06e:	4413      	add	r3, r2
 800c070:	009b      	lsls	r3, r3, #2
 800c072:	3310      	adds	r3, #16
 800c074:	687a      	ldr	r2, [r7, #4]
 800c076:	4413      	add	r3, r2
 800c078:	3304      	adds	r3, #4
 800c07a:	e00b      	b.n	800c094 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800c07c:	7bbb      	ldrb	r3, [r7, #14]
 800c07e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c082:	4613      	mov	r3, r2
 800c084:	009b      	lsls	r3, r3, #2
 800c086:	4413      	add	r3, r2
 800c088:	009b      	lsls	r3, r3, #2
 800c08a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800c08e:	687a      	ldr	r2, [r7, #4]
 800c090:	4413      	add	r3, r2
 800c092:	3304      	adds	r3, #4
 800c094:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800c096:	68bb      	ldr	r3, [r7, #8]
 800c098:	2200      	movs	r2, #0
 800c09a:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800c09c:	68bb      	ldr	r3, [r7, #8]
 800c09e:	2202      	movs	r2, #2
 800c0a0:	4619      	mov	r1, r3
 800c0a2:	6878      	ldr	r0, [r7, #4]
 800c0a4:	f000 fbfb 	bl	800c89e <USBD_CtlSendData>
              break;
 800c0a8:	e06a      	b.n	800c180 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800c0aa:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c0ae:	2b00      	cmp	r3, #0
 800c0b0:	da11      	bge.n	800c0d6 <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800c0b2:	7bbb      	ldrb	r3, [r7, #14]
 800c0b4:	f003 020f 	and.w	r2, r3, #15
 800c0b8:	6879      	ldr	r1, [r7, #4]
 800c0ba:	4613      	mov	r3, r2
 800c0bc:	009b      	lsls	r3, r3, #2
 800c0be:	4413      	add	r3, r2
 800c0c0:	009b      	lsls	r3, r3, #2
 800c0c2:	440b      	add	r3, r1
 800c0c4:	3318      	adds	r3, #24
 800c0c6:	681b      	ldr	r3, [r3, #0]
 800c0c8:	2b00      	cmp	r3, #0
 800c0ca:	d117      	bne.n	800c0fc <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800c0cc:	6839      	ldr	r1, [r7, #0]
 800c0ce:	6878      	ldr	r0, [r7, #4]
 800c0d0:	f000 fb7b 	bl	800c7ca <USBD_CtlError>
                  break;
 800c0d4:	e054      	b.n	800c180 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800c0d6:	7bbb      	ldrb	r3, [r7, #14]
 800c0d8:	f003 020f 	and.w	r2, r3, #15
 800c0dc:	6879      	ldr	r1, [r7, #4]
 800c0de:	4613      	mov	r3, r2
 800c0e0:	009b      	lsls	r3, r3, #2
 800c0e2:	4413      	add	r3, r2
 800c0e4:	009b      	lsls	r3, r3, #2
 800c0e6:	440b      	add	r3, r1
 800c0e8:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 800c0ec:	681b      	ldr	r3, [r3, #0]
 800c0ee:	2b00      	cmp	r3, #0
 800c0f0:	d104      	bne.n	800c0fc <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800c0f2:	6839      	ldr	r1, [r7, #0]
 800c0f4:	6878      	ldr	r0, [r7, #4]
 800c0f6:	f000 fb68 	bl	800c7ca <USBD_CtlError>
                  break;
 800c0fa:	e041      	b.n	800c180 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c0fc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c100:	2b00      	cmp	r3, #0
 800c102:	da0b      	bge.n	800c11c <USBD_StdEPReq+0x240>
 800c104:	7bbb      	ldrb	r3, [r7, #14]
 800c106:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c10a:	4613      	mov	r3, r2
 800c10c:	009b      	lsls	r3, r3, #2
 800c10e:	4413      	add	r3, r2
 800c110:	009b      	lsls	r3, r3, #2
 800c112:	3310      	adds	r3, #16
 800c114:	687a      	ldr	r2, [r7, #4]
 800c116:	4413      	add	r3, r2
 800c118:	3304      	adds	r3, #4
 800c11a:	e00b      	b.n	800c134 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800c11c:	7bbb      	ldrb	r3, [r7, #14]
 800c11e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c122:	4613      	mov	r3, r2
 800c124:	009b      	lsls	r3, r3, #2
 800c126:	4413      	add	r3, r2
 800c128:	009b      	lsls	r3, r3, #2
 800c12a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800c12e:	687a      	ldr	r2, [r7, #4]
 800c130:	4413      	add	r3, r2
 800c132:	3304      	adds	r3, #4
 800c134:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800c136:	7bbb      	ldrb	r3, [r7, #14]
 800c138:	2b00      	cmp	r3, #0
 800c13a:	d002      	beq.n	800c142 <USBD_StdEPReq+0x266>
 800c13c:	7bbb      	ldrb	r3, [r7, #14]
 800c13e:	2b80      	cmp	r3, #128	; 0x80
 800c140:	d103      	bne.n	800c14a <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 800c142:	68bb      	ldr	r3, [r7, #8]
 800c144:	2200      	movs	r2, #0
 800c146:	601a      	str	r2, [r3, #0]
 800c148:	e00e      	b.n	800c168 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800c14a:	7bbb      	ldrb	r3, [r7, #14]
 800c14c:	4619      	mov	r1, r3
 800c14e:	6878      	ldr	r0, [r7, #4]
 800c150:	f001 f85e 	bl	800d210 <USBD_LL_IsStallEP>
 800c154:	4603      	mov	r3, r0
 800c156:	2b00      	cmp	r3, #0
 800c158:	d003      	beq.n	800c162 <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 800c15a:	68bb      	ldr	r3, [r7, #8]
 800c15c:	2201      	movs	r2, #1
 800c15e:	601a      	str	r2, [r3, #0]
 800c160:	e002      	b.n	800c168 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 800c162:	68bb      	ldr	r3, [r7, #8]
 800c164:	2200      	movs	r2, #0
 800c166:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800c168:	68bb      	ldr	r3, [r7, #8]
 800c16a:	2202      	movs	r2, #2
 800c16c:	4619      	mov	r1, r3
 800c16e:	6878      	ldr	r0, [r7, #4]
 800c170:	f000 fb95 	bl	800c89e <USBD_CtlSendData>
              break;
 800c174:	e004      	b.n	800c180 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 800c176:	6839      	ldr	r1, [r7, #0]
 800c178:	6878      	ldr	r0, [r7, #4]
 800c17a:	f000 fb26 	bl	800c7ca <USBD_CtlError>
              break;
 800c17e:	bf00      	nop
          }
          break;
 800c180:	e004      	b.n	800c18c <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 800c182:	6839      	ldr	r1, [r7, #0]
 800c184:	6878      	ldr	r0, [r7, #4]
 800c186:	f000 fb20 	bl	800c7ca <USBD_CtlError>
          break;
 800c18a:	bf00      	nop
      }
      break;
 800c18c:	e004      	b.n	800c198 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 800c18e:	6839      	ldr	r1, [r7, #0]
 800c190:	6878      	ldr	r0, [r7, #4]
 800c192:	f000 fb1a 	bl	800c7ca <USBD_CtlError>
      break;
 800c196:	bf00      	nop
  }

  return ret;
 800c198:	7bfb      	ldrb	r3, [r7, #15]
}
 800c19a:	4618      	mov	r0, r3
 800c19c:	3710      	adds	r7, #16
 800c19e:	46bd      	mov	sp, r7
 800c1a0:	bd80      	pop	{r7, pc}
	...

0800c1a4 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800c1a4:	b580      	push	{r7, lr}
 800c1a6:	b084      	sub	sp, #16
 800c1a8:	af00      	add	r7, sp, #0
 800c1aa:	6078      	str	r0, [r7, #4]
 800c1ac:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800c1ae:	2300      	movs	r3, #0
 800c1b0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800c1b2:	2300      	movs	r3, #0
 800c1b4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800c1b6:	2300      	movs	r3, #0
 800c1b8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800c1ba:	683b      	ldr	r3, [r7, #0]
 800c1bc:	885b      	ldrh	r3, [r3, #2]
 800c1be:	0a1b      	lsrs	r3, r3, #8
 800c1c0:	b29b      	uxth	r3, r3
 800c1c2:	3b01      	subs	r3, #1
 800c1c4:	2b06      	cmp	r3, #6
 800c1c6:	f200 8128 	bhi.w	800c41a <USBD_GetDescriptor+0x276>
 800c1ca:	a201      	add	r2, pc, #4	; (adr r2, 800c1d0 <USBD_GetDescriptor+0x2c>)
 800c1cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c1d0:	0800c1ed 	.word	0x0800c1ed
 800c1d4:	0800c205 	.word	0x0800c205
 800c1d8:	0800c245 	.word	0x0800c245
 800c1dc:	0800c41b 	.word	0x0800c41b
 800c1e0:	0800c41b 	.word	0x0800c41b
 800c1e4:	0800c3bb 	.word	0x0800c3bb
 800c1e8:	0800c3e7 	.word	0x0800c3e7
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800c1ec:	687b      	ldr	r3, [r7, #4]
 800c1ee:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800c1f2:	681b      	ldr	r3, [r3, #0]
 800c1f4:	687a      	ldr	r2, [r7, #4]
 800c1f6:	7c12      	ldrb	r2, [r2, #16]
 800c1f8:	f107 0108 	add.w	r1, r7, #8
 800c1fc:	4610      	mov	r0, r2
 800c1fe:	4798      	blx	r3
 800c200:	60f8      	str	r0, [r7, #12]
      break;
 800c202:	e112      	b.n	800c42a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c204:	687b      	ldr	r3, [r7, #4]
 800c206:	7c1b      	ldrb	r3, [r3, #16]
 800c208:	2b00      	cmp	r3, #0
 800c20a:	d10d      	bne.n	800c228 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800c20c:	687b      	ldr	r3, [r7, #4]
 800c20e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c212:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c214:	f107 0208 	add.w	r2, r7, #8
 800c218:	4610      	mov	r0, r2
 800c21a:	4798      	blx	r3
 800c21c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c21e:	68fb      	ldr	r3, [r7, #12]
 800c220:	3301      	adds	r3, #1
 800c222:	2202      	movs	r2, #2
 800c224:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800c226:	e100      	b.n	800c42a <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800c228:	687b      	ldr	r3, [r7, #4]
 800c22a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c22e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c230:	f107 0208 	add.w	r2, r7, #8
 800c234:	4610      	mov	r0, r2
 800c236:	4798      	blx	r3
 800c238:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c23a:	68fb      	ldr	r3, [r7, #12]
 800c23c:	3301      	adds	r3, #1
 800c23e:	2202      	movs	r2, #2
 800c240:	701a      	strb	r2, [r3, #0]
      break;
 800c242:	e0f2      	b.n	800c42a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800c244:	683b      	ldr	r3, [r7, #0]
 800c246:	885b      	ldrh	r3, [r3, #2]
 800c248:	b2db      	uxtb	r3, r3
 800c24a:	2b05      	cmp	r3, #5
 800c24c:	f200 80ac 	bhi.w	800c3a8 <USBD_GetDescriptor+0x204>
 800c250:	a201      	add	r2, pc, #4	; (adr r2, 800c258 <USBD_GetDescriptor+0xb4>)
 800c252:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c256:	bf00      	nop
 800c258:	0800c271 	.word	0x0800c271
 800c25c:	0800c2a5 	.word	0x0800c2a5
 800c260:	0800c2d9 	.word	0x0800c2d9
 800c264:	0800c30d 	.word	0x0800c30d
 800c268:	0800c341 	.word	0x0800c341
 800c26c:	0800c375 	.word	0x0800c375
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800c270:	687b      	ldr	r3, [r7, #4]
 800c272:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800c276:	685b      	ldr	r3, [r3, #4]
 800c278:	2b00      	cmp	r3, #0
 800c27a:	d00b      	beq.n	800c294 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800c27c:	687b      	ldr	r3, [r7, #4]
 800c27e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800c282:	685b      	ldr	r3, [r3, #4]
 800c284:	687a      	ldr	r2, [r7, #4]
 800c286:	7c12      	ldrb	r2, [r2, #16]
 800c288:	f107 0108 	add.w	r1, r7, #8
 800c28c:	4610      	mov	r0, r2
 800c28e:	4798      	blx	r3
 800c290:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c292:	e091      	b.n	800c3b8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c294:	6839      	ldr	r1, [r7, #0]
 800c296:	6878      	ldr	r0, [r7, #4]
 800c298:	f000 fa97 	bl	800c7ca <USBD_CtlError>
            err++;
 800c29c:	7afb      	ldrb	r3, [r7, #11]
 800c29e:	3301      	adds	r3, #1
 800c2a0:	72fb      	strb	r3, [r7, #11]
          break;
 800c2a2:	e089      	b.n	800c3b8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800c2a4:	687b      	ldr	r3, [r7, #4]
 800c2a6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800c2aa:	689b      	ldr	r3, [r3, #8]
 800c2ac:	2b00      	cmp	r3, #0
 800c2ae:	d00b      	beq.n	800c2c8 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800c2b0:	687b      	ldr	r3, [r7, #4]
 800c2b2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800c2b6:	689b      	ldr	r3, [r3, #8]
 800c2b8:	687a      	ldr	r2, [r7, #4]
 800c2ba:	7c12      	ldrb	r2, [r2, #16]
 800c2bc:	f107 0108 	add.w	r1, r7, #8
 800c2c0:	4610      	mov	r0, r2
 800c2c2:	4798      	blx	r3
 800c2c4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c2c6:	e077      	b.n	800c3b8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c2c8:	6839      	ldr	r1, [r7, #0]
 800c2ca:	6878      	ldr	r0, [r7, #4]
 800c2cc:	f000 fa7d 	bl	800c7ca <USBD_CtlError>
            err++;
 800c2d0:	7afb      	ldrb	r3, [r7, #11]
 800c2d2:	3301      	adds	r3, #1
 800c2d4:	72fb      	strb	r3, [r7, #11]
          break;
 800c2d6:	e06f      	b.n	800c3b8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800c2d8:	687b      	ldr	r3, [r7, #4]
 800c2da:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800c2de:	68db      	ldr	r3, [r3, #12]
 800c2e0:	2b00      	cmp	r3, #0
 800c2e2:	d00b      	beq.n	800c2fc <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800c2e4:	687b      	ldr	r3, [r7, #4]
 800c2e6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800c2ea:	68db      	ldr	r3, [r3, #12]
 800c2ec:	687a      	ldr	r2, [r7, #4]
 800c2ee:	7c12      	ldrb	r2, [r2, #16]
 800c2f0:	f107 0108 	add.w	r1, r7, #8
 800c2f4:	4610      	mov	r0, r2
 800c2f6:	4798      	blx	r3
 800c2f8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c2fa:	e05d      	b.n	800c3b8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c2fc:	6839      	ldr	r1, [r7, #0]
 800c2fe:	6878      	ldr	r0, [r7, #4]
 800c300:	f000 fa63 	bl	800c7ca <USBD_CtlError>
            err++;
 800c304:	7afb      	ldrb	r3, [r7, #11]
 800c306:	3301      	adds	r3, #1
 800c308:	72fb      	strb	r3, [r7, #11]
          break;
 800c30a:	e055      	b.n	800c3b8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800c30c:	687b      	ldr	r3, [r7, #4]
 800c30e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800c312:	691b      	ldr	r3, [r3, #16]
 800c314:	2b00      	cmp	r3, #0
 800c316:	d00b      	beq.n	800c330 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800c318:	687b      	ldr	r3, [r7, #4]
 800c31a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800c31e:	691b      	ldr	r3, [r3, #16]
 800c320:	687a      	ldr	r2, [r7, #4]
 800c322:	7c12      	ldrb	r2, [r2, #16]
 800c324:	f107 0108 	add.w	r1, r7, #8
 800c328:	4610      	mov	r0, r2
 800c32a:	4798      	blx	r3
 800c32c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c32e:	e043      	b.n	800c3b8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c330:	6839      	ldr	r1, [r7, #0]
 800c332:	6878      	ldr	r0, [r7, #4]
 800c334:	f000 fa49 	bl	800c7ca <USBD_CtlError>
            err++;
 800c338:	7afb      	ldrb	r3, [r7, #11]
 800c33a:	3301      	adds	r3, #1
 800c33c:	72fb      	strb	r3, [r7, #11]
          break;
 800c33e:	e03b      	b.n	800c3b8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800c340:	687b      	ldr	r3, [r7, #4]
 800c342:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800c346:	695b      	ldr	r3, [r3, #20]
 800c348:	2b00      	cmp	r3, #0
 800c34a:	d00b      	beq.n	800c364 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800c34c:	687b      	ldr	r3, [r7, #4]
 800c34e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800c352:	695b      	ldr	r3, [r3, #20]
 800c354:	687a      	ldr	r2, [r7, #4]
 800c356:	7c12      	ldrb	r2, [r2, #16]
 800c358:	f107 0108 	add.w	r1, r7, #8
 800c35c:	4610      	mov	r0, r2
 800c35e:	4798      	blx	r3
 800c360:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c362:	e029      	b.n	800c3b8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c364:	6839      	ldr	r1, [r7, #0]
 800c366:	6878      	ldr	r0, [r7, #4]
 800c368:	f000 fa2f 	bl	800c7ca <USBD_CtlError>
            err++;
 800c36c:	7afb      	ldrb	r3, [r7, #11]
 800c36e:	3301      	adds	r3, #1
 800c370:	72fb      	strb	r3, [r7, #11]
          break;
 800c372:	e021      	b.n	800c3b8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800c374:	687b      	ldr	r3, [r7, #4]
 800c376:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800c37a:	699b      	ldr	r3, [r3, #24]
 800c37c:	2b00      	cmp	r3, #0
 800c37e:	d00b      	beq.n	800c398 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800c380:	687b      	ldr	r3, [r7, #4]
 800c382:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800c386:	699b      	ldr	r3, [r3, #24]
 800c388:	687a      	ldr	r2, [r7, #4]
 800c38a:	7c12      	ldrb	r2, [r2, #16]
 800c38c:	f107 0108 	add.w	r1, r7, #8
 800c390:	4610      	mov	r0, r2
 800c392:	4798      	blx	r3
 800c394:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c396:	e00f      	b.n	800c3b8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c398:	6839      	ldr	r1, [r7, #0]
 800c39a:	6878      	ldr	r0, [r7, #4]
 800c39c:	f000 fa15 	bl	800c7ca <USBD_CtlError>
            err++;
 800c3a0:	7afb      	ldrb	r3, [r7, #11]
 800c3a2:	3301      	adds	r3, #1
 800c3a4:	72fb      	strb	r3, [r7, #11]
          break;
 800c3a6:	e007      	b.n	800c3b8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 800c3a8:	6839      	ldr	r1, [r7, #0]
 800c3aa:	6878      	ldr	r0, [r7, #4]
 800c3ac:	f000 fa0d 	bl	800c7ca <USBD_CtlError>
          err++;
 800c3b0:	7afb      	ldrb	r3, [r7, #11]
 800c3b2:	3301      	adds	r3, #1
 800c3b4:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 800c3b6:	e038      	b.n	800c42a <USBD_GetDescriptor+0x286>
 800c3b8:	e037      	b.n	800c42a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c3ba:	687b      	ldr	r3, [r7, #4]
 800c3bc:	7c1b      	ldrb	r3, [r3, #16]
 800c3be:	2b00      	cmp	r3, #0
 800c3c0:	d109      	bne.n	800c3d6 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800c3c2:	687b      	ldr	r3, [r7, #4]
 800c3c4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c3c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c3ca:	f107 0208 	add.w	r2, r7, #8
 800c3ce:	4610      	mov	r0, r2
 800c3d0:	4798      	blx	r3
 800c3d2:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c3d4:	e029      	b.n	800c42a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800c3d6:	6839      	ldr	r1, [r7, #0]
 800c3d8:	6878      	ldr	r0, [r7, #4]
 800c3da:	f000 f9f6 	bl	800c7ca <USBD_CtlError>
        err++;
 800c3de:	7afb      	ldrb	r3, [r7, #11]
 800c3e0:	3301      	adds	r3, #1
 800c3e2:	72fb      	strb	r3, [r7, #11]
      break;
 800c3e4:	e021      	b.n	800c42a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c3e6:	687b      	ldr	r3, [r7, #4]
 800c3e8:	7c1b      	ldrb	r3, [r3, #16]
 800c3ea:	2b00      	cmp	r3, #0
 800c3ec:	d10d      	bne.n	800c40a <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800c3ee:	687b      	ldr	r3, [r7, #4]
 800c3f0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c3f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c3f6:	f107 0208 	add.w	r2, r7, #8
 800c3fa:	4610      	mov	r0, r2
 800c3fc:	4798      	blx	r3
 800c3fe:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800c400:	68fb      	ldr	r3, [r7, #12]
 800c402:	3301      	adds	r3, #1
 800c404:	2207      	movs	r2, #7
 800c406:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c408:	e00f      	b.n	800c42a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800c40a:	6839      	ldr	r1, [r7, #0]
 800c40c:	6878      	ldr	r0, [r7, #4]
 800c40e:	f000 f9dc 	bl	800c7ca <USBD_CtlError>
        err++;
 800c412:	7afb      	ldrb	r3, [r7, #11]
 800c414:	3301      	adds	r3, #1
 800c416:	72fb      	strb	r3, [r7, #11]
      break;
 800c418:	e007      	b.n	800c42a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800c41a:	6839      	ldr	r1, [r7, #0]
 800c41c:	6878      	ldr	r0, [r7, #4]
 800c41e:	f000 f9d4 	bl	800c7ca <USBD_CtlError>
      err++;
 800c422:	7afb      	ldrb	r3, [r7, #11]
 800c424:	3301      	adds	r3, #1
 800c426:	72fb      	strb	r3, [r7, #11]
      break;
 800c428:	bf00      	nop
  }

  if (err != 0U)
 800c42a:	7afb      	ldrb	r3, [r7, #11]
 800c42c:	2b00      	cmp	r3, #0
 800c42e:	d11c      	bne.n	800c46a <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 800c430:	893b      	ldrh	r3, [r7, #8]
 800c432:	2b00      	cmp	r3, #0
 800c434:	d011      	beq.n	800c45a <USBD_GetDescriptor+0x2b6>
 800c436:	683b      	ldr	r3, [r7, #0]
 800c438:	88db      	ldrh	r3, [r3, #6]
 800c43a:	2b00      	cmp	r3, #0
 800c43c:	d00d      	beq.n	800c45a <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 800c43e:	683b      	ldr	r3, [r7, #0]
 800c440:	88da      	ldrh	r2, [r3, #6]
 800c442:	893b      	ldrh	r3, [r7, #8]
 800c444:	4293      	cmp	r3, r2
 800c446:	bf28      	it	cs
 800c448:	4613      	movcs	r3, r2
 800c44a:	b29b      	uxth	r3, r3
 800c44c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800c44e:	893b      	ldrh	r3, [r7, #8]
 800c450:	461a      	mov	r2, r3
 800c452:	68f9      	ldr	r1, [r7, #12]
 800c454:	6878      	ldr	r0, [r7, #4]
 800c456:	f000 fa22 	bl	800c89e <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800c45a:	683b      	ldr	r3, [r7, #0]
 800c45c:	88db      	ldrh	r3, [r3, #6]
 800c45e:	2b00      	cmp	r3, #0
 800c460:	d104      	bne.n	800c46c <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 800c462:	6878      	ldr	r0, [r7, #4]
 800c464:	f000 fa79 	bl	800c95a <USBD_CtlSendStatus>
 800c468:	e000      	b.n	800c46c <USBD_GetDescriptor+0x2c8>
    return;
 800c46a:	bf00      	nop
    }
  }
}
 800c46c:	3710      	adds	r7, #16
 800c46e:	46bd      	mov	sp, r7
 800c470:	bd80      	pop	{r7, pc}
 800c472:	bf00      	nop

0800c474 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800c474:	b580      	push	{r7, lr}
 800c476:	b084      	sub	sp, #16
 800c478:	af00      	add	r7, sp, #0
 800c47a:	6078      	str	r0, [r7, #4]
 800c47c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800c47e:	683b      	ldr	r3, [r7, #0]
 800c480:	889b      	ldrh	r3, [r3, #4]
 800c482:	2b00      	cmp	r3, #0
 800c484:	d130      	bne.n	800c4e8 <USBD_SetAddress+0x74>
 800c486:	683b      	ldr	r3, [r7, #0]
 800c488:	88db      	ldrh	r3, [r3, #6]
 800c48a:	2b00      	cmp	r3, #0
 800c48c:	d12c      	bne.n	800c4e8 <USBD_SetAddress+0x74>
 800c48e:	683b      	ldr	r3, [r7, #0]
 800c490:	885b      	ldrh	r3, [r3, #2]
 800c492:	2b7f      	cmp	r3, #127	; 0x7f
 800c494:	d828      	bhi.n	800c4e8 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800c496:	683b      	ldr	r3, [r7, #0]
 800c498:	885b      	ldrh	r3, [r3, #2]
 800c49a:	b2db      	uxtb	r3, r3
 800c49c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c4a0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c4a2:	687b      	ldr	r3, [r7, #4]
 800c4a4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c4a8:	2b03      	cmp	r3, #3
 800c4aa:	d104      	bne.n	800c4b6 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800c4ac:	6839      	ldr	r1, [r7, #0]
 800c4ae:	6878      	ldr	r0, [r7, #4]
 800c4b0:	f000 f98b 	bl	800c7ca <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c4b4:	e01d      	b.n	800c4f2 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800c4b6:	687b      	ldr	r3, [r7, #4]
 800c4b8:	7bfa      	ldrb	r2, [r7, #15]
 800c4ba:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800c4be:	7bfb      	ldrb	r3, [r7, #15]
 800c4c0:	4619      	mov	r1, r3
 800c4c2:	6878      	ldr	r0, [r7, #4]
 800c4c4:	f000 fecf 	bl	800d266 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800c4c8:	6878      	ldr	r0, [r7, #4]
 800c4ca:	f000 fa46 	bl	800c95a <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800c4ce:	7bfb      	ldrb	r3, [r7, #15]
 800c4d0:	2b00      	cmp	r3, #0
 800c4d2:	d004      	beq.n	800c4de <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c4d4:	687b      	ldr	r3, [r7, #4]
 800c4d6:	2202      	movs	r2, #2
 800c4d8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c4dc:	e009      	b.n	800c4f2 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800c4de:	687b      	ldr	r3, [r7, #4]
 800c4e0:	2201      	movs	r2, #1
 800c4e2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c4e6:	e004      	b.n	800c4f2 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800c4e8:	6839      	ldr	r1, [r7, #0]
 800c4ea:	6878      	ldr	r0, [r7, #4]
 800c4ec:	f000 f96d 	bl	800c7ca <USBD_CtlError>
  }
}
 800c4f0:	bf00      	nop
 800c4f2:	bf00      	nop
 800c4f4:	3710      	adds	r7, #16
 800c4f6:	46bd      	mov	sp, r7
 800c4f8:	bd80      	pop	{r7, pc}
	...

0800c4fc <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c4fc:	b580      	push	{r7, lr}
 800c4fe:	b082      	sub	sp, #8
 800c500:	af00      	add	r7, sp, #0
 800c502:	6078      	str	r0, [r7, #4]
 800c504:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800c506:	683b      	ldr	r3, [r7, #0]
 800c508:	885b      	ldrh	r3, [r3, #2]
 800c50a:	b2da      	uxtb	r2, r3
 800c50c:	4b41      	ldr	r3, [pc, #260]	; (800c614 <USBD_SetConfig+0x118>)
 800c50e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800c510:	4b40      	ldr	r3, [pc, #256]	; (800c614 <USBD_SetConfig+0x118>)
 800c512:	781b      	ldrb	r3, [r3, #0]
 800c514:	2b01      	cmp	r3, #1
 800c516:	d904      	bls.n	800c522 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 800c518:	6839      	ldr	r1, [r7, #0]
 800c51a:	6878      	ldr	r0, [r7, #4]
 800c51c:	f000 f955 	bl	800c7ca <USBD_CtlError>
 800c520:	e075      	b.n	800c60e <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800c522:	687b      	ldr	r3, [r7, #4]
 800c524:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c528:	2b02      	cmp	r3, #2
 800c52a:	d002      	beq.n	800c532 <USBD_SetConfig+0x36>
 800c52c:	2b03      	cmp	r3, #3
 800c52e:	d023      	beq.n	800c578 <USBD_SetConfig+0x7c>
 800c530:	e062      	b.n	800c5f8 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800c532:	4b38      	ldr	r3, [pc, #224]	; (800c614 <USBD_SetConfig+0x118>)
 800c534:	781b      	ldrb	r3, [r3, #0]
 800c536:	2b00      	cmp	r3, #0
 800c538:	d01a      	beq.n	800c570 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 800c53a:	4b36      	ldr	r3, [pc, #216]	; (800c614 <USBD_SetConfig+0x118>)
 800c53c:	781b      	ldrb	r3, [r3, #0]
 800c53e:	461a      	mov	r2, r3
 800c540:	687b      	ldr	r3, [r7, #4]
 800c542:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800c544:	687b      	ldr	r3, [r7, #4]
 800c546:	2203      	movs	r2, #3
 800c548:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800c54c:	4b31      	ldr	r3, [pc, #196]	; (800c614 <USBD_SetConfig+0x118>)
 800c54e:	781b      	ldrb	r3, [r3, #0]
 800c550:	4619      	mov	r1, r3
 800c552:	6878      	ldr	r0, [r7, #4]
 800c554:	f7ff f9af 	bl	800b8b6 <USBD_SetClassConfig>
 800c558:	4603      	mov	r3, r0
 800c55a:	2b02      	cmp	r3, #2
 800c55c:	d104      	bne.n	800c568 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800c55e:	6839      	ldr	r1, [r7, #0]
 800c560:	6878      	ldr	r0, [r7, #4]
 800c562:	f000 f932 	bl	800c7ca <USBD_CtlError>
            return;
 800c566:	e052      	b.n	800c60e <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 800c568:	6878      	ldr	r0, [r7, #4]
 800c56a:	f000 f9f6 	bl	800c95a <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800c56e:	e04e      	b.n	800c60e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800c570:	6878      	ldr	r0, [r7, #4]
 800c572:	f000 f9f2 	bl	800c95a <USBD_CtlSendStatus>
        break;
 800c576:	e04a      	b.n	800c60e <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 800c578:	4b26      	ldr	r3, [pc, #152]	; (800c614 <USBD_SetConfig+0x118>)
 800c57a:	781b      	ldrb	r3, [r3, #0]
 800c57c:	2b00      	cmp	r3, #0
 800c57e:	d112      	bne.n	800c5a6 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800c580:	687b      	ldr	r3, [r7, #4]
 800c582:	2202      	movs	r2, #2
 800c584:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 800c588:	4b22      	ldr	r3, [pc, #136]	; (800c614 <USBD_SetConfig+0x118>)
 800c58a:	781b      	ldrb	r3, [r3, #0]
 800c58c:	461a      	mov	r2, r3
 800c58e:	687b      	ldr	r3, [r7, #4]
 800c590:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800c592:	4b20      	ldr	r3, [pc, #128]	; (800c614 <USBD_SetConfig+0x118>)
 800c594:	781b      	ldrb	r3, [r3, #0]
 800c596:	4619      	mov	r1, r3
 800c598:	6878      	ldr	r0, [r7, #4]
 800c59a:	f7ff f9ab 	bl	800b8f4 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800c59e:	6878      	ldr	r0, [r7, #4]
 800c5a0:	f000 f9db 	bl	800c95a <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800c5a4:	e033      	b.n	800c60e <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 800c5a6:	4b1b      	ldr	r3, [pc, #108]	; (800c614 <USBD_SetConfig+0x118>)
 800c5a8:	781b      	ldrb	r3, [r3, #0]
 800c5aa:	461a      	mov	r2, r3
 800c5ac:	687b      	ldr	r3, [r7, #4]
 800c5ae:	685b      	ldr	r3, [r3, #4]
 800c5b0:	429a      	cmp	r2, r3
 800c5b2:	d01d      	beq.n	800c5f0 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c5b4:	687b      	ldr	r3, [r7, #4]
 800c5b6:	685b      	ldr	r3, [r3, #4]
 800c5b8:	b2db      	uxtb	r3, r3
 800c5ba:	4619      	mov	r1, r3
 800c5bc:	6878      	ldr	r0, [r7, #4]
 800c5be:	f7ff f999 	bl	800b8f4 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800c5c2:	4b14      	ldr	r3, [pc, #80]	; (800c614 <USBD_SetConfig+0x118>)
 800c5c4:	781b      	ldrb	r3, [r3, #0]
 800c5c6:	461a      	mov	r2, r3
 800c5c8:	687b      	ldr	r3, [r7, #4]
 800c5ca:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800c5cc:	4b11      	ldr	r3, [pc, #68]	; (800c614 <USBD_SetConfig+0x118>)
 800c5ce:	781b      	ldrb	r3, [r3, #0]
 800c5d0:	4619      	mov	r1, r3
 800c5d2:	6878      	ldr	r0, [r7, #4]
 800c5d4:	f7ff f96f 	bl	800b8b6 <USBD_SetClassConfig>
 800c5d8:	4603      	mov	r3, r0
 800c5da:	2b02      	cmp	r3, #2
 800c5dc:	d104      	bne.n	800c5e8 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 800c5de:	6839      	ldr	r1, [r7, #0]
 800c5e0:	6878      	ldr	r0, [r7, #4]
 800c5e2:	f000 f8f2 	bl	800c7ca <USBD_CtlError>
            return;
 800c5e6:	e012      	b.n	800c60e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800c5e8:	6878      	ldr	r0, [r7, #4]
 800c5ea:	f000 f9b6 	bl	800c95a <USBD_CtlSendStatus>
        break;
 800c5ee:	e00e      	b.n	800c60e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800c5f0:	6878      	ldr	r0, [r7, #4]
 800c5f2:	f000 f9b2 	bl	800c95a <USBD_CtlSendStatus>
        break;
 800c5f6:	e00a      	b.n	800c60e <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 800c5f8:	6839      	ldr	r1, [r7, #0]
 800c5fa:	6878      	ldr	r0, [r7, #4]
 800c5fc:	f000 f8e5 	bl	800c7ca <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 800c600:	4b04      	ldr	r3, [pc, #16]	; (800c614 <USBD_SetConfig+0x118>)
 800c602:	781b      	ldrb	r3, [r3, #0]
 800c604:	4619      	mov	r1, r3
 800c606:	6878      	ldr	r0, [r7, #4]
 800c608:	f7ff f974 	bl	800b8f4 <USBD_ClrClassConfig>
        break;
 800c60c:	bf00      	nop
    }
  }
}
 800c60e:	3708      	adds	r7, #8
 800c610:	46bd      	mov	sp, r7
 800c612:	bd80      	pop	{r7, pc}
 800c614:	200009bc 	.word	0x200009bc

0800c618 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c618:	b580      	push	{r7, lr}
 800c61a:	b082      	sub	sp, #8
 800c61c:	af00      	add	r7, sp, #0
 800c61e:	6078      	str	r0, [r7, #4]
 800c620:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800c622:	683b      	ldr	r3, [r7, #0]
 800c624:	88db      	ldrh	r3, [r3, #6]
 800c626:	2b01      	cmp	r3, #1
 800c628:	d004      	beq.n	800c634 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800c62a:	6839      	ldr	r1, [r7, #0]
 800c62c:	6878      	ldr	r0, [r7, #4]
 800c62e:	f000 f8cc 	bl	800c7ca <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800c632:	e022      	b.n	800c67a <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 800c634:	687b      	ldr	r3, [r7, #4]
 800c636:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c63a:	2b02      	cmp	r3, #2
 800c63c:	dc02      	bgt.n	800c644 <USBD_GetConfig+0x2c>
 800c63e:	2b00      	cmp	r3, #0
 800c640:	dc03      	bgt.n	800c64a <USBD_GetConfig+0x32>
 800c642:	e015      	b.n	800c670 <USBD_GetConfig+0x58>
 800c644:	2b03      	cmp	r3, #3
 800c646:	d00b      	beq.n	800c660 <USBD_GetConfig+0x48>
 800c648:	e012      	b.n	800c670 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 800c64a:	687b      	ldr	r3, [r7, #4]
 800c64c:	2200      	movs	r2, #0
 800c64e:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800c650:	687b      	ldr	r3, [r7, #4]
 800c652:	3308      	adds	r3, #8
 800c654:	2201      	movs	r2, #1
 800c656:	4619      	mov	r1, r3
 800c658:	6878      	ldr	r0, [r7, #4]
 800c65a:	f000 f920 	bl	800c89e <USBD_CtlSendData>
        break;
 800c65e:	e00c      	b.n	800c67a <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800c660:	687b      	ldr	r3, [r7, #4]
 800c662:	3304      	adds	r3, #4
 800c664:	2201      	movs	r2, #1
 800c666:	4619      	mov	r1, r3
 800c668:	6878      	ldr	r0, [r7, #4]
 800c66a:	f000 f918 	bl	800c89e <USBD_CtlSendData>
        break;
 800c66e:	e004      	b.n	800c67a <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 800c670:	6839      	ldr	r1, [r7, #0]
 800c672:	6878      	ldr	r0, [r7, #4]
 800c674:	f000 f8a9 	bl	800c7ca <USBD_CtlError>
        break;
 800c678:	bf00      	nop
}
 800c67a:	bf00      	nop
 800c67c:	3708      	adds	r7, #8
 800c67e:	46bd      	mov	sp, r7
 800c680:	bd80      	pop	{r7, pc}

0800c682 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c682:	b580      	push	{r7, lr}
 800c684:	b082      	sub	sp, #8
 800c686:	af00      	add	r7, sp, #0
 800c688:	6078      	str	r0, [r7, #4]
 800c68a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c68c:	687b      	ldr	r3, [r7, #4]
 800c68e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c692:	3b01      	subs	r3, #1
 800c694:	2b02      	cmp	r3, #2
 800c696:	d81e      	bhi.n	800c6d6 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800c698:	683b      	ldr	r3, [r7, #0]
 800c69a:	88db      	ldrh	r3, [r3, #6]
 800c69c:	2b02      	cmp	r3, #2
 800c69e:	d004      	beq.n	800c6aa <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 800c6a0:	6839      	ldr	r1, [r7, #0]
 800c6a2:	6878      	ldr	r0, [r7, #4]
 800c6a4:	f000 f891 	bl	800c7ca <USBD_CtlError>
        break;
 800c6a8:	e01a      	b.n	800c6e0 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800c6aa:	687b      	ldr	r3, [r7, #4]
 800c6ac:	2201      	movs	r2, #1
 800c6ae:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800c6b0:	687b      	ldr	r3, [r7, #4]
 800c6b2:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800c6b6:	2b00      	cmp	r3, #0
 800c6b8:	d005      	beq.n	800c6c6 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800c6ba:	687b      	ldr	r3, [r7, #4]
 800c6bc:	68db      	ldr	r3, [r3, #12]
 800c6be:	f043 0202 	orr.w	r2, r3, #2
 800c6c2:	687b      	ldr	r3, [r7, #4]
 800c6c4:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800c6c6:	687b      	ldr	r3, [r7, #4]
 800c6c8:	330c      	adds	r3, #12
 800c6ca:	2202      	movs	r2, #2
 800c6cc:	4619      	mov	r1, r3
 800c6ce:	6878      	ldr	r0, [r7, #4]
 800c6d0:	f000 f8e5 	bl	800c89e <USBD_CtlSendData>
      break;
 800c6d4:	e004      	b.n	800c6e0 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 800c6d6:	6839      	ldr	r1, [r7, #0]
 800c6d8:	6878      	ldr	r0, [r7, #4]
 800c6da:	f000 f876 	bl	800c7ca <USBD_CtlError>
      break;
 800c6de:	bf00      	nop
  }
}
 800c6e0:	bf00      	nop
 800c6e2:	3708      	adds	r7, #8
 800c6e4:	46bd      	mov	sp, r7
 800c6e6:	bd80      	pop	{r7, pc}

0800c6e8 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800c6e8:	b580      	push	{r7, lr}
 800c6ea:	b082      	sub	sp, #8
 800c6ec:	af00      	add	r7, sp, #0
 800c6ee:	6078      	str	r0, [r7, #4]
 800c6f0:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c6f2:	683b      	ldr	r3, [r7, #0]
 800c6f4:	885b      	ldrh	r3, [r3, #2]
 800c6f6:	2b01      	cmp	r3, #1
 800c6f8:	d106      	bne.n	800c708 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800c6fa:	687b      	ldr	r3, [r7, #4]
 800c6fc:	2201      	movs	r2, #1
 800c6fe:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 800c702:	6878      	ldr	r0, [r7, #4]
 800c704:	f000 f929 	bl	800c95a <USBD_CtlSendStatus>
  }
}
 800c708:	bf00      	nop
 800c70a:	3708      	adds	r7, #8
 800c70c:	46bd      	mov	sp, r7
 800c70e:	bd80      	pop	{r7, pc}

0800c710 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800c710:	b580      	push	{r7, lr}
 800c712:	b082      	sub	sp, #8
 800c714:	af00      	add	r7, sp, #0
 800c716:	6078      	str	r0, [r7, #4]
 800c718:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c71a:	687b      	ldr	r3, [r7, #4]
 800c71c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c720:	3b01      	subs	r3, #1
 800c722:	2b02      	cmp	r3, #2
 800c724:	d80b      	bhi.n	800c73e <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c726:	683b      	ldr	r3, [r7, #0]
 800c728:	885b      	ldrh	r3, [r3, #2]
 800c72a:	2b01      	cmp	r3, #1
 800c72c:	d10c      	bne.n	800c748 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800c72e:	687b      	ldr	r3, [r7, #4]
 800c730:	2200      	movs	r2, #0
 800c732:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 800c736:	6878      	ldr	r0, [r7, #4]
 800c738:	f000 f90f 	bl	800c95a <USBD_CtlSendStatus>
      }
      break;
 800c73c:	e004      	b.n	800c748 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800c73e:	6839      	ldr	r1, [r7, #0]
 800c740:	6878      	ldr	r0, [r7, #4]
 800c742:	f000 f842 	bl	800c7ca <USBD_CtlError>
      break;
 800c746:	e000      	b.n	800c74a <USBD_ClrFeature+0x3a>
      break;
 800c748:	bf00      	nop
  }
}
 800c74a:	bf00      	nop
 800c74c:	3708      	adds	r7, #8
 800c74e:	46bd      	mov	sp, r7
 800c750:	bd80      	pop	{r7, pc}

0800c752 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800c752:	b480      	push	{r7}
 800c754:	b083      	sub	sp, #12
 800c756:	af00      	add	r7, sp, #0
 800c758:	6078      	str	r0, [r7, #4]
 800c75a:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800c75c:	683b      	ldr	r3, [r7, #0]
 800c75e:	781a      	ldrb	r2, [r3, #0]
 800c760:	687b      	ldr	r3, [r7, #4]
 800c762:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800c764:	683b      	ldr	r3, [r7, #0]
 800c766:	785a      	ldrb	r2, [r3, #1]
 800c768:	687b      	ldr	r3, [r7, #4]
 800c76a:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800c76c:	683b      	ldr	r3, [r7, #0]
 800c76e:	3302      	adds	r3, #2
 800c770:	781b      	ldrb	r3, [r3, #0]
 800c772:	b29a      	uxth	r2, r3
 800c774:	683b      	ldr	r3, [r7, #0]
 800c776:	3303      	adds	r3, #3
 800c778:	781b      	ldrb	r3, [r3, #0]
 800c77a:	b29b      	uxth	r3, r3
 800c77c:	021b      	lsls	r3, r3, #8
 800c77e:	b29b      	uxth	r3, r3
 800c780:	4413      	add	r3, r2
 800c782:	b29a      	uxth	r2, r3
 800c784:	687b      	ldr	r3, [r7, #4]
 800c786:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800c788:	683b      	ldr	r3, [r7, #0]
 800c78a:	3304      	adds	r3, #4
 800c78c:	781b      	ldrb	r3, [r3, #0]
 800c78e:	b29a      	uxth	r2, r3
 800c790:	683b      	ldr	r3, [r7, #0]
 800c792:	3305      	adds	r3, #5
 800c794:	781b      	ldrb	r3, [r3, #0]
 800c796:	b29b      	uxth	r3, r3
 800c798:	021b      	lsls	r3, r3, #8
 800c79a:	b29b      	uxth	r3, r3
 800c79c:	4413      	add	r3, r2
 800c79e:	b29a      	uxth	r2, r3
 800c7a0:	687b      	ldr	r3, [r7, #4]
 800c7a2:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800c7a4:	683b      	ldr	r3, [r7, #0]
 800c7a6:	3306      	adds	r3, #6
 800c7a8:	781b      	ldrb	r3, [r3, #0]
 800c7aa:	b29a      	uxth	r2, r3
 800c7ac:	683b      	ldr	r3, [r7, #0]
 800c7ae:	3307      	adds	r3, #7
 800c7b0:	781b      	ldrb	r3, [r3, #0]
 800c7b2:	b29b      	uxth	r3, r3
 800c7b4:	021b      	lsls	r3, r3, #8
 800c7b6:	b29b      	uxth	r3, r3
 800c7b8:	4413      	add	r3, r2
 800c7ba:	b29a      	uxth	r2, r3
 800c7bc:	687b      	ldr	r3, [r7, #4]
 800c7be:	80da      	strh	r2, [r3, #6]

}
 800c7c0:	bf00      	nop
 800c7c2:	370c      	adds	r7, #12
 800c7c4:	46bd      	mov	sp, r7
 800c7c6:	bc80      	pop	{r7}
 800c7c8:	4770      	bx	lr

0800c7ca <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800c7ca:	b580      	push	{r7, lr}
 800c7cc:	b082      	sub	sp, #8
 800c7ce:	af00      	add	r7, sp, #0
 800c7d0:	6078      	str	r0, [r7, #4]
 800c7d2:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800c7d4:	2180      	movs	r1, #128	; 0x80
 800c7d6:	6878      	ldr	r0, [r7, #4]
 800c7d8:	f000 fcdc 	bl	800d194 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800c7dc:	2100      	movs	r1, #0
 800c7de:	6878      	ldr	r0, [r7, #4]
 800c7e0:	f000 fcd8 	bl	800d194 <USBD_LL_StallEP>
}
 800c7e4:	bf00      	nop
 800c7e6:	3708      	adds	r7, #8
 800c7e8:	46bd      	mov	sp, r7
 800c7ea:	bd80      	pop	{r7, pc}

0800c7ec <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800c7ec:	b580      	push	{r7, lr}
 800c7ee:	b086      	sub	sp, #24
 800c7f0:	af00      	add	r7, sp, #0
 800c7f2:	60f8      	str	r0, [r7, #12]
 800c7f4:	60b9      	str	r1, [r7, #8]
 800c7f6:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800c7f8:	2300      	movs	r3, #0
 800c7fa:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800c7fc:	68fb      	ldr	r3, [r7, #12]
 800c7fe:	2b00      	cmp	r3, #0
 800c800:	d032      	beq.n	800c868 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800c802:	68f8      	ldr	r0, [r7, #12]
 800c804:	f000 f834 	bl	800c870 <USBD_GetLen>
 800c808:	4603      	mov	r3, r0
 800c80a:	3301      	adds	r3, #1
 800c80c:	b29b      	uxth	r3, r3
 800c80e:	005b      	lsls	r3, r3, #1
 800c810:	b29a      	uxth	r2, r3
 800c812:	687b      	ldr	r3, [r7, #4]
 800c814:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800c816:	7dfb      	ldrb	r3, [r7, #23]
 800c818:	1c5a      	adds	r2, r3, #1
 800c81a:	75fa      	strb	r2, [r7, #23]
 800c81c:	461a      	mov	r2, r3
 800c81e:	68bb      	ldr	r3, [r7, #8]
 800c820:	4413      	add	r3, r2
 800c822:	687a      	ldr	r2, [r7, #4]
 800c824:	7812      	ldrb	r2, [r2, #0]
 800c826:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800c828:	7dfb      	ldrb	r3, [r7, #23]
 800c82a:	1c5a      	adds	r2, r3, #1
 800c82c:	75fa      	strb	r2, [r7, #23]
 800c82e:	461a      	mov	r2, r3
 800c830:	68bb      	ldr	r3, [r7, #8]
 800c832:	4413      	add	r3, r2
 800c834:	2203      	movs	r2, #3
 800c836:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800c838:	e012      	b.n	800c860 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800c83a:	68fb      	ldr	r3, [r7, #12]
 800c83c:	1c5a      	adds	r2, r3, #1
 800c83e:	60fa      	str	r2, [r7, #12]
 800c840:	7dfa      	ldrb	r2, [r7, #23]
 800c842:	1c51      	adds	r1, r2, #1
 800c844:	75f9      	strb	r1, [r7, #23]
 800c846:	4611      	mov	r1, r2
 800c848:	68ba      	ldr	r2, [r7, #8]
 800c84a:	440a      	add	r2, r1
 800c84c:	781b      	ldrb	r3, [r3, #0]
 800c84e:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800c850:	7dfb      	ldrb	r3, [r7, #23]
 800c852:	1c5a      	adds	r2, r3, #1
 800c854:	75fa      	strb	r2, [r7, #23]
 800c856:	461a      	mov	r2, r3
 800c858:	68bb      	ldr	r3, [r7, #8]
 800c85a:	4413      	add	r3, r2
 800c85c:	2200      	movs	r2, #0
 800c85e:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800c860:	68fb      	ldr	r3, [r7, #12]
 800c862:	781b      	ldrb	r3, [r3, #0]
 800c864:	2b00      	cmp	r3, #0
 800c866:	d1e8      	bne.n	800c83a <USBD_GetString+0x4e>
    }
  }
}
 800c868:	bf00      	nop
 800c86a:	3718      	adds	r7, #24
 800c86c:	46bd      	mov	sp, r7
 800c86e:	bd80      	pop	{r7, pc}

0800c870 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800c870:	b480      	push	{r7}
 800c872:	b085      	sub	sp, #20
 800c874:	af00      	add	r7, sp, #0
 800c876:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800c878:	2300      	movs	r3, #0
 800c87a:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 800c87c:	e005      	b.n	800c88a <USBD_GetLen+0x1a>
  {
    len++;
 800c87e:	7bfb      	ldrb	r3, [r7, #15]
 800c880:	3301      	adds	r3, #1
 800c882:	73fb      	strb	r3, [r7, #15]
    buf++;
 800c884:	687b      	ldr	r3, [r7, #4]
 800c886:	3301      	adds	r3, #1
 800c888:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800c88a:	687b      	ldr	r3, [r7, #4]
 800c88c:	781b      	ldrb	r3, [r3, #0]
 800c88e:	2b00      	cmp	r3, #0
 800c890:	d1f5      	bne.n	800c87e <USBD_GetLen+0xe>
  }

  return len;
 800c892:	7bfb      	ldrb	r3, [r7, #15]
}
 800c894:	4618      	mov	r0, r3
 800c896:	3714      	adds	r7, #20
 800c898:	46bd      	mov	sp, r7
 800c89a:	bc80      	pop	{r7}
 800c89c:	4770      	bx	lr

0800c89e <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800c89e:	b580      	push	{r7, lr}
 800c8a0:	b084      	sub	sp, #16
 800c8a2:	af00      	add	r7, sp, #0
 800c8a4:	60f8      	str	r0, [r7, #12]
 800c8a6:	60b9      	str	r1, [r7, #8]
 800c8a8:	4613      	mov	r3, r2
 800c8aa:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800c8ac:	68fb      	ldr	r3, [r7, #12]
 800c8ae:	2202      	movs	r2, #2
 800c8b0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800c8b4:	88fa      	ldrh	r2, [r7, #6]
 800c8b6:	68fb      	ldr	r3, [r7, #12]
 800c8b8:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800c8ba:	88fa      	ldrh	r2, [r7, #6]
 800c8bc:	68fb      	ldr	r3, [r7, #12]
 800c8be:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c8c0:	88fb      	ldrh	r3, [r7, #6]
 800c8c2:	68ba      	ldr	r2, [r7, #8]
 800c8c4:	2100      	movs	r1, #0
 800c8c6:	68f8      	ldr	r0, [r7, #12]
 800c8c8:	f000 fcec 	bl	800d2a4 <USBD_LL_Transmit>

  return USBD_OK;
 800c8cc:	2300      	movs	r3, #0
}
 800c8ce:	4618      	mov	r0, r3
 800c8d0:	3710      	adds	r7, #16
 800c8d2:	46bd      	mov	sp, r7
 800c8d4:	bd80      	pop	{r7, pc}

0800c8d6 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800c8d6:	b580      	push	{r7, lr}
 800c8d8:	b084      	sub	sp, #16
 800c8da:	af00      	add	r7, sp, #0
 800c8dc:	60f8      	str	r0, [r7, #12]
 800c8de:	60b9      	str	r1, [r7, #8]
 800c8e0:	4613      	mov	r3, r2
 800c8e2:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c8e4:	88fb      	ldrh	r3, [r7, #6]
 800c8e6:	68ba      	ldr	r2, [r7, #8]
 800c8e8:	2100      	movs	r1, #0
 800c8ea:	68f8      	ldr	r0, [r7, #12]
 800c8ec:	f000 fcda 	bl	800d2a4 <USBD_LL_Transmit>

  return USBD_OK;
 800c8f0:	2300      	movs	r3, #0
}
 800c8f2:	4618      	mov	r0, r3
 800c8f4:	3710      	adds	r7, #16
 800c8f6:	46bd      	mov	sp, r7
 800c8f8:	bd80      	pop	{r7, pc}

0800c8fa <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800c8fa:	b580      	push	{r7, lr}
 800c8fc:	b084      	sub	sp, #16
 800c8fe:	af00      	add	r7, sp, #0
 800c900:	60f8      	str	r0, [r7, #12]
 800c902:	60b9      	str	r1, [r7, #8]
 800c904:	4613      	mov	r3, r2
 800c906:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800c908:	68fb      	ldr	r3, [r7, #12]
 800c90a:	2203      	movs	r2, #3
 800c90c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800c910:	88fa      	ldrh	r2, [r7, #6]
 800c912:	68fb      	ldr	r3, [r7, #12]
 800c914:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 800c918:	88fa      	ldrh	r2, [r7, #6]
 800c91a:	68fb      	ldr	r3, [r7, #12]
 800c91c:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c920:	88fb      	ldrh	r3, [r7, #6]
 800c922:	68ba      	ldr	r2, [r7, #8]
 800c924:	2100      	movs	r1, #0
 800c926:	68f8      	ldr	r0, [r7, #12]
 800c928:	f000 fcdf 	bl	800d2ea <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c92c:	2300      	movs	r3, #0
}
 800c92e:	4618      	mov	r0, r3
 800c930:	3710      	adds	r7, #16
 800c932:	46bd      	mov	sp, r7
 800c934:	bd80      	pop	{r7, pc}

0800c936 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800c936:	b580      	push	{r7, lr}
 800c938:	b084      	sub	sp, #16
 800c93a:	af00      	add	r7, sp, #0
 800c93c:	60f8      	str	r0, [r7, #12]
 800c93e:	60b9      	str	r1, [r7, #8]
 800c940:	4613      	mov	r3, r2
 800c942:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c944:	88fb      	ldrh	r3, [r7, #6]
 800c946:	68ba      	ldr	r2, [r7, #8]
 800c948:	2100      	movs	r1, #0
 800c94a:	68f8      	ldr	r0, [r7, #12]
 800c94c:	f000 fccd 	bl	800d2ea <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c950:	2300      	movs	r3, #0
}
 800c952:	4618      	mov	r0, r3
 800c954:	3710      	adds	r7, #16
 800c956:	46bd      	mov	sp, r7
 800c958:	bd80      	pop	{r7, pc}

0800c95a <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800c95a:	b580      	push	{r7, lr}
 800c95c:	b082      	sub	sp, #8
 800c95e:	af00      	add	r7, sp, #0
 800c960:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800c962:	687b      	ldr	r3, [r7, #4]
 800c964:	2204      	movs	r2, #4
 800c966:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800c96a:	2300      	movs	r3, #0
 800c96c:	2200      	movs	r2, #0
 800c96e:	2100      	movs	r1, #0
 800c970:	6878      	ldr	r0, [r7, #4]
 800c972:	f000 fc97 	bl	800d2a4 <USBD_LL_Transmit>

  return USBD_OK;
 800c976:	2300      	movs	r3, #0
}
 800c978:	4618      	mov	r0, r3
 800c97a:	3708      	adds	r7, #8
 800c97c:	46bd      	mov	sp, r7
 800c97e:	bd80      	pop	{r7, pc}

0800c980 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800c980:	b580      	push	{r7, lr}
 800c982:	b082      	sub	sp, #8
 800c984:	af00      	add	r7, sp, #0
 800c986:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800c988:	687b      	ldr	r3, [r7, #4]
 800c98a:	2205      	movs	r2, #5
 800c98c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c990:	2300      	movs	r3, #0
 800c992:	2200      	movs	r2, #0
 800c994:	2100      	movs	r1, #0
 800c996:	6878      	ldr	r0, [r7, #4]
 800c998:	f000 fca7 	bl	800d2ea <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c99c:	2300      	movs	r3, #0
}
 800c99e:	4618      	mov	r0, r3
 800c9a0:	3708      	adds	r7, #8
 800c9a2:	46bd      	mov	sp, r7
 800c9a4:	bd80      	pop	{r7, pc}
	...

0800c9a8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800c9a8:	b580      	push	{r7, lr}
 800c9aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800c9ac:	2200      	movs	r2, #0
 800c9ae:	4912      	ldr	r1, [pc, #72]	; (800c9f8 <MX_USB_DEVICE_Init+0x50>)
 800c9b0:	4812      	ldr	r0, [pc, #72]	; (800c9fc <MX_USB_DEVICE_Init+0x54>)
 800c9b2:	f7fe ff26 	bl	800b802 <USBD_Init>
 800c9b6:	4603      	mov	r3, r0
 800c9b8:	2b00      	cmp	r3, #0
 800c9ba:	d001      	beq.n	800c9c0 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800c9bc:	f7f7 fd20 	bl	8004400 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800c9c0:	490f      	ldr	r1, [pc, #60]	; (800ca00 <MX_USB_DEVICE_Init+0x58>)
 800c9c2:	480e      	ldr	r0, [pc, #56]	; (800c9fc <MX_USB_DEVICE_Init+0x54>)
 800c9c4:	f7fe ff48 	bl	800b858 <USBD_RegisterClass>
 800c9c8:	4603      	mov	r3, r0
 800c9ca:	2b00      	cmp	r3, #0
 800c9cc:	d001      	beq.n	800c9d2 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800c9ce:	f7f7 fd17 	bl	8004400 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800c9d2:	490c      	ldr	r1, [pc, #48]	; (800ca04 <MX_USB_DEVICE_Init+0x5c>)
 800c9d4:	4809      	ldr	r0, [pc, #36]	; (800c9fc <MX_USB_DEVICE_Init+0x54>)
 800c9d6:	f7fe fe79 	bl	800b6cc <USBD_CDC_RegisterInterface>
 800c9da:	4603      	mov	r3, r0
 800c9dc:	2b00      	cmp	r3, #0
 800c9de:	d001      	beq.n	800c9e4 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800c9e0:	f7f7 fd0e 	bl	8004400 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800c9e4:	4805      	ldr	r0, [pc, #20]	; (800c9fc <MX_USB_DEVICE_Init+0x54>)
 800c9e6:	f7fe ff50 	bl	800b88a <USBD_Start>
 800c9ea:	4603      	mov	r3, r0
 800c9ec:	2b00      	cmp	r3, #0
 800c9ee:	d001      	beq.n	800c9f4 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800c9f0:	f7f7 fd06 	bl	8004400 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800c9f4:	bf00      	nop
 800c9f6:	bd80      	pop	{r7, pc}
 800c9f8:	20000158 	.word	0x20000158
 800c9fc:	200009cc 	.word	0x200009cc
 800ca00:	2000003c 	.word	0x2000003c
 800ca04:	20000140 	.word	0x20000140

0800ca08 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800ca08:	b580      	push	{r7, lr}
 800ca0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800ca0c:	2200      	movs	r2, #0
 800ca0e:	4905      	ldr	r1, [pc, #20]	; (800ca24 <CDC_Init_FS+0x1c>)
 800ca10:	4805      	ldr	r0, [pc, #20]	; (800ca28 <CDC_Init_FS+0x20>)
 800ca12:	f7fe fe71 	bl	800b6f8 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800ca16:	4905      	ldr	r1, [pc, #20]	; (800ca2c <CDC_Init_FS+0x24>)
 800ca18:	4803      	ldr	r0, [pc, #12]	; (800ca28 <CDC_Init_FS+0x20>)
 800ca1a:	f7fe fe86 	bl	800b72a <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800ca1e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800ca20:	4618      	mov	r0, r3
 800ca22:	bd80      	pop	{r7, pc}
 800ca24:	20001490 	.word	0x20001490
 800ca28:	200009cc 	.word	0x200009cc
 800ca2c:	20000c90 	.word	0x20000c90

0800ca30 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800ca30:	b480      	push	{r7}
 800ca32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800ca34:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800ca36:	4618      	mov	r0, r3
 800ca38:	46bd      	mov	sp, r7
 800ca3a:	bc80      	pop	{r7}
 800ca3c:	4770      	bx	lr
	...

0800ca40 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800ca40:	b480      	push	{r7}
 800ca42:	b083      	sub	sp, #12
 800ca44:	af00      	add	r7, sp, #0
 800ca46:	4603      	mov	r3, r0
 800ca48:	6039      	str	r1, [r7, #0]
 800ca4a:	71fb      	strb	r3, [r7, #7]
 800ca4c:	4613      	mov	r3, r2
 800ca4e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800ca50:	79fb      	ldrb	r3, [r7, #7]
 800ca52:	2b23      	cmp	r3, #35	; 0x23
 800ca54:	d85c      	bhi.n	800cb10 <CDC_Control_FS+0xd0>
 800ca56:	a201      	add	r2, pc, #4	; (adr r2, 800ca5c <CDC_Control_FS+0x1c>)
 800ca58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ca5c:	0800cb11 	.word	0x0800cb11
 800ca60:	0800cb11 	.word	0x0800cb11
 800ca64:	0800cb11 	.word	0x0800cb11
 800ca68:	0800cb11 	.word	0x0800cb11
 800ca6c:	0800cb11 	.word	0x0800cb11
 800ca70:	0800cb11 	.word	0x0800cb11
 800ca74:	0800cb11 	.word	0x0800cb11
 800ca78:	0800cb11 	.word	0x0800cb11
 800ca7c:	0800cb11 	.word	0x0800cb11
 800ca80:	0800cb11 	.word	0x0800cb11
 800ca84:	0800cb11 	.word	0x0800cb11
 800ca88:	0800cb11 	.word	0x0800cb11
 800ca8c:	0800cb11 	.word	0x0800cb11
 800ca90:	0800cb11 	.word	0x0800cb11
 800ca94:	0800cb11 	.word	0x0800cb11
 800ca98:	0800cb11 	.word	0x0800cb11
 800ca9c:	0800cb11 	.word	0x0800cb11
 800caa0:	0800cb11 	.word	0x0800cb11
 800caa4:	0800cb11 	.word	0x0800cb11
 800caa8:	0800cb11 	.word	0x0800cb11
 800caac:	0800cb11 	.word	0x0800cb11
 800cab0:	0800cb11 	.word	0x0800cb11
 800cab4:	0800cb11 	.word	0x0800cb11
 800cab8:	0800cb11 	.word	0x0800cb11
 800cabc:	0800cb11 	.word	0x0800cb11
 800cac0:	0800cb11 	.word	0x0800cb11
 800cac4:	0800cb11 	.word	0x0800cb11
 800cac8:	0800cb11 	.word	0x0800cb11
 800cacc:	0800cb11 	.word	0x0800cb11
 800cad0:	0800cb11 	.word	0x0800cb11
 800cad4:	0800cb11 	.word	0x0800cb11
 800cad8:	0800cb11 	.word	0x0800cb11
 800cadc:	0800caed 	.word	0x0800caed
 800cae0:	0800caff 	.word	0x0800caff
 800cae4:	0800cb11 	.word	0x0800cb11
 800cae8:	0800cb11 	.word	0x0800cb11
    static uint8_t lineCoding[7] // 115200bps, 1stop, no parity, 8bit

    = { 0x00, 0xC2, 0x01, 0x00, 0x00, 0x00, 0x08 };

    case CDC_SET_LINE_CODING:
      memcpy(lineCoding, pbuf, sizeof(lineCoding));
 800caec:	4b0c      	ldr	r3, [pc, #48]	; (800cb20 <CDC_Control_FS+0xe0>)
 800caee:	683a      	ldr	r2, [r7, #0]
 800caf0:	6810      	ldr	r0, [r2, #0]
 800caf2:	6018      	str	r0, [r3, #0]
 800caf4:	8891      	ldrh	r1, [r2, #4]
 800caf6:	7992      	ldrb	r2, [r2, #6]
 800caf8:	8099      	strh	r1, [r3, #4]
 800cafa:	719a      	strb	r2, [r3, #6]
    break;
 800cafc:	e009      	b.n	800cb12 <CDC_Control_FS+0xd2>

    case CDC_GET_LINE_CODING:
      memcpy(pbuf, lineCoding, sizeof(lineCoding));
 800cafe:	683b      	ldr	r3, [r7, #0]
 800cb00:	4a07      	ldr	r2, [pc, #28]	; (800cb20 <CDC_Control_FS+0xe0>)
 800cb02:	6810      	ldr	r0, [r2, #0]
 800cb04:	6018      	str	r0, [r3, #0]
 800cb06:	8891      	ldrh	r1, [r2, #4]
 800cb08:	7992      	ldrb	r2, [r2, #6]
 800cb0a:	8099      	strh	r1, [r3, #4]
 800cb0c:	719a      	strb	r2, [r3, #6]
    break;
 800cb0e:	e000      	b.n	800cb12 <CDC_Control_FS+0xd2>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800cb10:	bf00      	nop
  }

  return (USBD_OK);
 800cb12:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800cb14:	4618      	mov	r0, r3
 800cb16:	370c      	adds	r7, #12
 800cb18:	46bd      	mov	sp, r7
 800cb1a:	bc80      	pop	{r7}
 800cb1c:	4770      	bx	lr
 800cb1e:	bf00      	nop
 800cb20:	20000150 	.word	0x20000150

0800cb24 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800cb24:	b580      	push	{r7, lr}
 800cb26:	b082      	sub	sp, #8
 800cb28:	af00      	add	r7, sp, #0
 800cb2a:	6078      	str	r0, [r7, #4]
 800cb2c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800cb2e:	6879      	ldr	r1, [r7, #4]
 800cb30:	4805      	ldr	r0, [pc, #20]	; (800cb48 <CDC_Receive_FS+0x24>)
 800cb32:	f7fe fdfa 	bl	800b72a <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800cb36:	4804      	ldr	r0, [pc, #16]	; (800cb48 <CDC_Receive_FS+0x24>)
 800cb38:	f7fe fe39 	bl	800b7ae <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800cb3c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800cb3e:	4618      	mov	r0, r3
 800cb40:	3708      	adds	r7, #8
 800cb42:	46bd      	mov	sp, r7
 800cb44:	bd80      	pop	{r7, pc}
 800cb46:	bf00      	nop
 800cb48:	200009cc 	.word	0x200009cc

0800cb4c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800cb4c:	b580      	push	{r7, lr}
 800cb4e:	b084      	sub	sp, #16
 800cb50:	af00      	add	r7, sp, #0
 800cb52:	6078      	str	r0, [r7, #4]
 800cb54:	460b      	mov	r3, r1
 800cb56:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800cb58:	2300      	movs	r3, #0
 800cb5a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800cb5c:	4b0d      	ldr	r3, [pc, #52]	; (800cb94 <CDC_Transmit_FS+0x48>)
 800cb5e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cb62:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800cb64:	68bb      	ldr	r3, [r7, #8]
 800cb66:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800cb6a:	2b00      	cmp	r3, #0
 800cb6c:	d001      	beq.n	800cb72 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800cb6e:	2301      	movs	r3, #1
 800cb70:	e00b      	b.n	800cb8a <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800cb72:	887b      	ldrh	r3, [r7, #2]
 800cb74:	461a      	mov	r2, r3
 800cb76:	6879      	ldr	r1, [r7, #4]
 800cb78:	4806      	ldr	r0, [pc, #24]	; (800cb94 <CDC_Transmit_FS+0x48>)
 800cb7a:	f7fe fdbd 	bl	800b6f8 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800cb7e:	4805      	ldr	r0, [pc, #20]	; (800cb94 <CDC_Transmit_FS+0x48>)
 800cb80:	f7fe fde6 	bl	800b750 <USBD_CDC_TransmitPacket>
 800cb84:	4603      	mov	r3, r0
 800cb86:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800cb88:	7bfb      	ldrb	r3, [r7, #15]
}
 800cb8a:	4618      	mov	r0, r3
 800cb8c:	3710      	adds	r7, #16
 800cb8e:	46bd      	mov	sp, r7
 800cb90:	bd80      	pop	{r7, pc}
 800cb92:	bf00      	nop
 800cb94:	200009cc 	.word	0x200009cc

0800cb98 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cb98:	b480      	push	{r7}
 800cb9a:	b083      	sub	sp, #12
 800cb9c:	af00      	add	r7, sp, #0
 800cb9e:	4603      	mov	r3, r0
 800cba0:	6039      	str	r1, [r7, #0]
 800cba2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800cba4:	683b      	ldr	r3, [r7, #0]
 800cba6:	2212      	movs	r2, #18
 800cba8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800cbaa:	4b03      	ldr	r3, [pc, #12]	; (800cbb8 <USBD_FS_DeviceDescriptor+0x20>)
}
 800cbac:	4618      	mov	r0, r3
 800cbae:	370c      	adds	r7, #12
 800cbb0:	46bd      	mov	sp, r7
 800cbb2:	bc80      	pop	{r7}
 800cbb4:	4770      	bx	lr
 800cbb6:	bf00      	nop
 800cbb8:	20000174 	.word	0x20000174

0800cbbc <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cbbc:	b480      	push	{r7}
 800cbbe:	b083      	sub	sp, #12
 800cbc0:	af00      	add	r7, sp, #0
 800cbc2:	4603      	mov	r3, r0
 800cbc4:	6039      	str	r1, [r7, #0]
 800cbc6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800cbc8:	683b      	ldr	r3, [r7, #0]
 800cbca:	2204      	movs	r2, #4
 800cbcc:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800cbce:	4b03      	ldr	r3, [pc, #12]	; (800cbdc <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800cbd0:	4618      	mov	r0, r3
 800cbd2:	370c      	adds	r7, #12
 800cbd4:	46bd      	mov	sp, r7
 800cbd6:	bc80      	pop	{r7}
 800cbd8:	4770      	bx	lr
 800cbda:	bf00      	nop
 800cbdc:	20000188 	.word	0x20000188

0800cbe0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cbe0:	b580      	push	{r7, lr}
 800cbe2:	b082      	sub	sp, #8
 800cbe4:	af00      	add	r7, sp, #0
 800cbe6:	4603      	mov	r3, r0
 800cbe8:	6039      	str	r1, [r7, #0]
 800cbea:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800cbec:	79fb      	ldrb	r3, [r7, #7]
 800cbee:	2b00      	cmp	r3, #0
 800cbf0:	d105      	bne.n	800cbfe <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800cbf2:	683a      	ldr	r2, [r7, #0]
 800cbf4:	4907      	ldr	r1, [pc, #28]	; (800cc14 <USBD_FS_ProductStrDescriptor+0x34>)
 800cbf6:	4808      	ldr	r0, [pc, #32]	; (800cc18 <USBD_FS_ProductStrDescriptor+0x38>)
 800cbf8:	f7ff fdf8 	bl	800c7ec <USBD_GetString>
 800cbfc:	e004      	b.n	800cc08 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800cbfe:	683a      	ldr	r2, [r7, #0]
 800cc00:	4904      	ldr	r1, [pc, #16]	; (800cc14 <USBD_FS_ProductStrDescriptor+0x34>)
 800cc02:	4805      	ldr	r0, [pc, #20]	; (800cc18 <USBD_FS_ProductStrDescriptor+0x38>)
 800cc04:	f7ff fdf2 	bl	800c7ec <USBD_GetString>
  }
  return USBD_StrDesc;
 800cc08:	4b02      	ldr	r3, [pc, #8]	; (800cc14 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800cc0a:	4618      	mov	r0, r3
 800cc0c:	3708      	adds	r7, #8
 800cc0e:	46bd      	mov	sp, r7
 800cc10:	bd80      	pop	{r7, pc}
 800cc12:	bf00      	nop
 800cc14:	20001c90 	.word	0x20001c90
 800cc18:	0801274c 	.word	0x0801274c

0800cc1c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cc1c:	b580      	push	{r7, lr}
 800cc1e:	b082      	sub	sp, #8
 800cc20:	af00      	add	r7, sp, #0
 800cc22:	4603      	mov	r3, r0
 800cc24:	6039      	str	r1, [r7, #0]
 800cc26:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800cc28:	683a      	ldr	r2, [r7, #0]
 800cc2a:	4904      	ldr	r1, [pc, #16]	; (800cc3c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800cc2c:	4804      	ldr	r0, [pc, #16]	; (800cc40 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800cc2e:	f7ff fddd 	bl	800c7ec <USBD_GetString>
  return USBD_StrDesc;
 800cc32:	4b02      	ldr	r3, [pc, #8]	; (800cc3c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800cc34:	4618      	mov	r0, r3
 800cc36:	3708      	adds	r7, #8
 800cc38:	46bd      	mov	sp, r7
 800cc3a:	bd80      	pop	{r7, pc}
 800cc3c:	20001c90 	.word	0x20001c90
 800cc40:	08012764 	.word	0x08012764

0800cc44 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cc44:	b580      	push	{r7, lr}
 800cc46:	b082      	sub	sp, #8
 800cc48:	af00      	add	r7, sp, #0
 800cc4a:	4603      	mov	r3, r0
 800cc4c:	6039      	str	r1, [r7, #0]
 800cc4e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800cc50:	683b      	ldr	r3, [r7, #0]
 800cc52:	221a      	movs	r2, #26
 800cc54:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800cc56:	f000 f843 	bl	800cce0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800cc5a:	4b02      	ldr	r3, [pc, #8]	; (800cc64 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800cc5c:	4618      	mov	r0, r3
 800cc5e:	3708      	adds	r7, #8
 800cc60:	46bd      	mov	sp, r7
 800cc62:	bd80      	pop	{r7, pc}
 800cc64:	2000018c 	.word	0x2000018c

0800cc68 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cc68:	b580      	push	{r7, lr}
 800cc6a:	b082      	sub	sp, #8
 800cc6c:	af00      	add	r7, sp, #0
 800cc6e:	4603      	mov	r3, r0
 800cc70:	6039      	str	r1, [r7, #0]
 800cc72:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800cc74:	79fb      	ldrb	r3, [r7, #7]
 800cc76:	2b00      	cmp	r3, #0
 800cc78:	d105      	bne.n	800cc86 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800cc7a:	683a      	ldr	r2, [r7, #0]
 800cc7c:	4907      	ldr	r1, [pc, #28]	; (800cc9c <USBD_FS_ConfigStrDescriptor+0x34>)
 800cc7e:	4808      	ldr	r0, [pc, #32]	; (800cca0 <USBD_FS_ConfigStrDescriptor+0x38>)
 800cc80:	f7ff fdb4 	bl	800c7ec <USBD_GetString>
 800cc84:	e004      	b.n	800cc90 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800cc86:	683a      	ldr	r2, [r7, #0]
 800cc88:	4904      	ldr	r1, [pc, #16]	; (800cc9c <USBD_FS_ConfigStrDescriptor+0x34>)
 800cc8a:	4805      	ldr	r0, [pc, #20]	; (800cca0 <USBD_FS_ConfigStrDescriptor+0x38>)
 800cc8c:	f7ff fdae 	bl	800c7ec <USBD_GetString>
  }
  return USBD_StrDesc;
 800cc90:	4b02      	ldr	r3, [pc, #8]	; (800cc9c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800cc92:	4618      	mov	r0, r3
 800cc94:	3708      	adds	r7, #8
 800cc96:	46bd      	mov	sp, r7
 800cc98:	bd80      	pop	{r7, pc}
 800cc9a:	bf00      	nop
 800cc9c:	20001c90 	.word	0x20001c90
 800cca0:	08012778 	.word	0x08012778

0800cca4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cca4:	b580      	push	{r7, lr}
 800cca6:	b082      	sub	sp, #8
 800cca8:	af00      	add	r7, sp, #0
 800ccaa:	4603      	mov	r3, r0
 800ccac:	6039      	str	r1, [r7, #0]
 800ccae:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800ccb0:	79fb      	ldrb	r3, [r7, #7]
 800ccb2:	2b00      	cmp	r3, #0
 800ccb4:	d105      	bne.n	800ccc2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800ccb6:	683a      	ldr	r2, [r7, #0]
 800ccb8:	4907      	ldr	r1, [pc, #28]	; (800ccd8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800ccba:	4808      	ldr	r0, [pc, #32]	; (800ccdc <USBD_FS_InterfaceStrDescriptor+0x38>)
 800ccbc:	f7ff fd96 	bl	800c7ec <USBD_GetString>
 800ccc0:	e004      	b.n	800cccc <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800ccc2:	683a      	ldr	r2, [r7, #0]
 800ccc4:	4904      	ldr	r1, [pc, #16]	; (800ccd8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800ccc6:	4805      	ldr	r0, [pc, #20]	; (800ccdc <USBD_FS_InterfaceStrDescriptor+0x38>)
 800ccc8:	f7ff fd90 	bl	800c7ec <USBD_GetString>
  }
  return USBD_StrDesc;
 800cccc:	4b02      	ldr	r3, [pc, #8]	; (800ccd8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800ccce:	4618      	mov	r0, r3
 800ccd0:	3708      	adds	r7, #8
 800ccd2:	46bd      	mov	sp, r7
 800ccd4:	bd80      	pop	{r7, pc}
 800ccd6:	bf00      	nop
 800ccd8:	20001c90 	.word	0x20001c90
 800ccdc:	08012784 	.word	0x08012784

0800cce0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800cce0:	b580      	push	{r7, lr}
 800cce2:	b084      	sub	sp, #16
 800cce4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800cce6:	4b0f      	ldr	r3, [pc, #60]	; (800cd24 <Get_SerialNum+0x44>)
 800cce8:	681b      	ldr	r3, [r3, #0]
 800ccea:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800ccec:	4b0e      	ldr	r3, [pc, #56]	; (800cd28 <Get_SerialNum+0x48>)
 800ccee:	681b      	ldr	r3, [r3, #0]
 800ccf0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800ccf2:	4b0e      	ldr	r3, [pc, #56]	; (800cd2c <Get_SerialNum+0x4c>)
 800ccf4:	681b      	ldr	r3, [r3, #0]
 800ccf6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800ccf8:	68fa      	ldr	r2, [r7, #12]
 800ccfa:	687b      	ldr	r3, [r7, #4]
 800ccfc:	4413      	add	r3, r2
 800ccfe:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800cd00:	68fb      	ldr	r3, [r7, #12]
 800cd02:	2b00      	cmp	r3, #0
 800cd04:	d009      	beq.n	800cd1a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800cd06:	2208      	movs	r2, #8
 800cd08:	4909      	ldr	r1, [pc, #36]	; (800cd30 <Get_SerialNum+0x50>)
 800cd0a:	68f8      	ldr	r0, [r7, #12]
 800cd0c:	f000 f814 	bl	800cd38 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800cd10:	2204      	movs	r2, #4
 800cd12:	4908      	ldr	r1, [pc, #32]	; (800cd34 <Get_SerialNum+0x54>)
 800cd14:	68b8      	ldr	r0, [r7, #8]
 800cd16:	f000 f80f 	bl	800cd38 <IntToUnicode>
  }
}
 800cd1a:	bf00      	nop
 800cd1c:	3710      	adds	r7, #16
 800cd1e:	46bd      	mov	sp, r7
 800cd20:	bd80      	pop	{r7, pc}
 800cd22:	bf00      	nop
 800cd24:	1fff7a10 	.word	0x1fff7a10
 800cd28:	1fff7a14 	.word	0x1fff7a14
 800cd2c:	1fff7a18 	.word	0x1fff7a18
 800cd30:	2000018e 	.word	0x2000018e
 800cd34:	2000019e 	.word	0x2000019e

0800cd38 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800cd38:	b480      	push	{r7}
 800cd3a:	b087      	sub	sp, #28
 800cd3c:	af00      	add	r7, sp, #0
 800cd3e:	60f8      	str	r0, [r7, #12]
 800cd40:	60b9      	str	r1, [r7, #8]
 800cd42:	4613      	mov	r3, r2
 800cd44:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800cd46:	2300      	movs	r3, #0
 800cd48:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800cd4a:	2300      	movs	r3, #0
 800cd4c:	75fb      	strb	r3, [r7, #23]
 800cd4e:	e027      	b.n	800cda0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800cd50:	68fb      	ldr	r3, [r7, #12]
 800cd52:	0f1b      	lsrs	r3, r3, #28
 800cd54:	2b09      	cmp	r3, #9
 800cd56:	d80b      	bhi.n	800cd70 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800cd58:	68fb      	ldr	r3, [r7, #12]
 800cd5a:	0f1b      	lsrs	r3, r3, #28
 800cd5c:	b2da      	uxtb	r2, r3
 800cd5e:	7dfb      	ldrb	r3, [r7, #23]
 800cd60:	005b      	lsls	r3, r3, #1
 800cd62:	4619      	mov	r1, r3
 800cd64:	68bb      	ldr	r3, [r7, #8]
 800cd66:	440b      	add	r3, r1
 800cd68:	3230      	adds	r2, #48	; 0x30
 800cd6a:	b2d2      	uxtb	r2, r2
 800cd6c:	701a      	strb	r2, [r3, #0]
 800cd6e:	e00a      	b.n	800cd86 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800cd70:	68fb      	ldr	r3, [r7, #12]
 800cd72:	0f1b      	lsrs	r3, r3, #28
 800cd74:	b2da      	uxtb	r2, r3
 800cd76:	7dfb      	ldrb	r3, [r7, #23]
 800cd78:	005b      	lsls	r3, r3, #1
 800cd7a:	4619      	mov	r1, r3
 800cd7c:	68bb      	ldr	r3, [r7, #8]
 800cd7e:	440b      	add	r3, r1
 800cd80:	3237      	adds	r2, #55	; 0x37
 800cd82:	b2d2      	uxtb	r2, r2
 800cd84:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800cd86:	68fb      	ldr	r3, [r7, #12]
 800cd88:	011b      	lsls	r3, r3, #4
 800cd8a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800cd8c:	7dfb      	ldrb	r3, [r7, #23]
 800cd8e:	005b      	lsls	r3, r3, #1
 800cd90:	3301      	adds	r3, #1
 800cd92:	68ba      	ldr	r2, [r7, #8]
 800cd94:	4413      	add	r3, r2
 800cd96:	2200      	movs	r2, #0
 800cd98:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800cd9a:	7dfb      	ldrb	r3, [r7, #23]
 800cd9c:	3301      	adds	r3, #1
 800cd9e:	75fb      	strb	r3, [r7, #23]
 800cda0:	7dfa      	ldrb	r2, [r7, #23]
 800cda2:	79fb      	ldrb	r3, [r7, #7]
 800cda4:	429a      	cmp	r2, r3
 800cda6:	d3d3      	bcc.n	800cd50 <IntToUnicode+0x18>
  }
}
 800cda8:	bf00      	nop
 800cdaa:	bf00      	nop
 800cdac:	371c      	adds	r7, #28
 800cdae:	46bd      	mov	sp, r7
 800cdb0:	bc80      	pop	{r7}
 800cdb2:	4770      	bx	lr

0800cdb4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800cdb4:	b580      	push	{r7, lr}
 800cdb6:	b08a      	sub	sp, #40	; 0x28
 800cdb8:	af00      	add	r7, sp, #0
 800cdba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800cdbc:	f107 0314 	add.w	r3, r7, #20
 800cdc0:	2200      	movs	r2, #0
 800cdc2:	601a      	str	r2, [r3, #0]
 800cdc4:	605a      	str	r2, [r3, #4]
 800cdc6:	609a      	str	r2, [r3, #8]
 800cdc8:	60da      	str	r2, [r3, #12]
 800cdca:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800cdcc:	687b      	ldr	r3, [r7, #4]
 800cdce:	681b      	ldr	r3, [r3, #0]
 800cdd0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800cdd4:	d13a      	bne.n	800ce4c <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800cdd6:	2300      	movs	r3, #0
 800cdd8:	613b      	str	r3, [r7, #16]
 800cdda:	4b1e      	ldr	r3, [pc, #120]	; (800ce54 <HAL_PCD_MspInit+0xa0>)
 800cddc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cdde:	4a1d      	ldr	r2, [pc, #116]	; (800ce54 <HAL_PCD_MspInit+0xa0>)
 800cde0:	f043 0301 	orr.w	r3, r3, #1
 800cde4:	6313      	str	r3, [r2, #48]	; 0x30
 800cde6:	4b1b      	ldr	r3, [pc, #108]	; (800ce54 <HAL_PCD_MspInit+0xa0>)
 800cde8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cdea:	f003 0301 	and.w	r3, r3, #1
 800cdee:	613b      	str	r3, [r7, #16]
 800cdf0:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800cdf2:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800cdf6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800cdf8:	2302      	movs	r3, #2
 800cdfa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cdfc:	2300      	movs	r3, #0
 800cdfe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ce00:	2303      	movs	r3, #3
 800ce02:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800ce04:	230a      	movs	r3, #10
 800ce06:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ce08:	f107 0314 	add.w	r3, r7, #20
 800ce0c:	4619      	mov	r1, r3
 800ce0e:	4812      	ldr	r0, [pc, #72]	; (800ce58 <HAL_PCD_MspInit+0xa4>)
 800ce10:	f7f9 f83e 	bl	8005e90 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800ce14:	4b0f      	ldr	r3, [pc, #60]	; (800ce54 <HAL_PCD_MspInit+0xa0>)
 800ce16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ce18:	4a0e      	ldr	r2, [pc, #56]	; (800ce54 <HAL_PCD_MspInit+0xa0>)
 800ce1a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ce1e:	6353      	str	r3, [r2, #52]	; 0x34
 800ce20:	2300      	movs	r3, #0
 800ce22:	60fb      	str	r3, [r7, #12]
 800ce24:	4b0b      	ldr	r3, [pc, #44]	; (800ce54 <HAL_PCD_MspInit+0xa0>)
 800ce26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ce28:	4a0a      	ldr	r2, [pc, #40]	; (800ce54 <HAL_PCD_MspInit+0xa0>)
 800ce2a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800ce2e:	6453      	str	r3, [r2, #68]	; 0x44
 800ce30:	4b08      	ldr	r3, [pc, #32]	; (800ce54 <HAL_PCD_MspInit+0xa0>)
 800ce32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ce34:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ce38:	60fb      	str	r3, [r7, #12]
 800ce3a:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800ce3c:	2200      	movs	r2, #0
 800ce3e:	2100      	movs	r1, #0
 800ce40:	2043      	movs	r0, #67	; 0x43
 800ce42:	f7f8 fcfa 	bl	800583a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800ce46:	2043      	movs	r0, #67	; 0x43
 800ce48:	f7f8 fd13 	bl	8005872 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800ce4c:	bf00      	nop
 800ce4e:	3728      	adds	r7, #40	; 0x28
 800ce50:	46bd      	mov	sp, r7
 800ce52:	bd80      	pop	{r7, pc}
 800ce54:	40023800 	.word	0x40023800
 800ce58:	40020000 	.word	0x40020000

0800ce5c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ce5c:	b580      	push	{r7, lr}
 800ce5e:	b082      	sub	sp, #8
 800ce60:	af00      	add	r7, sp, #0
 800ce62:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800ce64:	687b      	ldr	r3, [r7, #4]
 800ce66:	f8d3 23fc 	ldr.w	r2, [r3, #1020]	; 0x3fc
 800ce6a:	687b      	ldr	r3, [r7, #4]
 800ce6c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800ce70:	4619      	mov	r1, r3
 800ce72:	4610      	mov	r0, r2
 800ce74:	f7fe fd51 	bl	800b91a <USBD_LL_SetupStage>
}
 800ce78:	bf00      	nop
 800ce7a:	3708      	adds	r7, #8
 800ce7c:	46bd      	mov	sp, r7
 800ce7e:	bd80      	pop	{r7, pc}

0800ce80 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ce80:	b580      	push	{r7, lr}
 800ce82:	b082      	sub	sp, #8
 800ce84:	af00      	add	r7, sp, #0
 800ce86:	6078      	str	r0, [r7, #4]
 800ce88:	460b      	mov	r3, r1
 800ce8a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800ce8c:	687b      	ldr	r3, [r7, #4]
 800ce8e:	f8d3 03fc 	ldr.w	r0, [r3, #1020]	; 0x3fc
 800ce92:	78fa      	ldrb	r2, [r7, #3]
 800ce94:	6879      	ldr	r1, [r7, #4]
 800ce96:	4613      	mov	r3, r2
 800ce98:	00db      	lsls	r3, r3, #3
 800ce9a:	1a9b      	subs	r3, r3, r2
 800ce9c:	009b      	lsls	r3, r3, #2
 800ce9e:	440b      	add	r3, r1
 800cea0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800cea4:	681a      	ldr	r2, [r3, #0]
 800cea6:	78fb      	ldrb	r3, [r7, #3]
 800cea8:	4619      	mov	r1, r3
 800ceaa:	f7fe fd83 	bl	800b9b4 <USBD_LL_DataOutStage>
}
 800ceae:	bf00      	nop
 800ceb0:	3708      	adds	r7, #8
 800ceb2:	46bd      	mov	sp, r7
 800ceb4:	bd80      	pop	{r7, pc}

0800ceb6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ceb6:	b580      	push	{r7, lr}
 800ceb8:	b082      	sub	sp, #8
 800ceba:	af00      	add	r7, sp, #0
 800cebc:	6078      	str	r0, [r7, #4]
 800cebe:	460b      	mov	r3, r1
 800cec0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800cec2:	687b      	ldr	r3, [r7, #4]
 800cec4:	f8d3 03fc 	ldr.w	r0, [r3, #1020]	; 0x3fc
 800cec8:	78fa      	ldrb	r2, [r7, #3]
 800ceca:	6879      	ldr	r1, [r7, #4]
 800cecc:	4613      	mov	r3, r2
 800cece:	00db      	lsls	r3, r3, #3
 800ced0:	1a9b      	subs	r3, r3, r2
 800ced2:	009b      	lsls	r3, r3, #2
 800ced4:	440b      	add	r3, r1
 800ced6:	3348      	adds	r3, #72	; 0x48
 800ced8:	681a      	ldr	r2, [r3, #0]
 800ceda:	78fb      	ldrb	r3, [r7, #3]
 800cedc:	4619      	mov	r1, r3
 800cede:	f7fe fdda 	bl	800ba96 <USBD_LL_DataInStage>
}
 800cee2:	bf00      	nop
 800cee4:	3708      	adds	r7, #8
 800cee6:	46bd      	mov	sp, r7
 800cee8:	bd80      	pop	{r7, pc}

0800ceea <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ceea:	b580      	push	{r7, lr}
 800ceec:	b082      	sub	sp, #8
 800ceee:	af00      	add	r7, sp, #0
 800cef0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800cef2:	687b      	ldr	r3, [r7, #4]
 800cef4:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 800cef8:	4618      	mov	r0, r3
 800cefa:	f7fe feea 	bl	800bcd2 <USBD_LL_SOF>
}
 800cefe:	bf00      	nop
 800cf00:	3708      	adds	r7, #8
 800cf02:	46bd      	mov	sp, r7
 800cf04:	bd80      	pop	{r7, pc}

0800cf06 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cf06:	b580      	push	{r7, lr}
 800cf08:	b084      	sub	sp, #16
 800cf0a:	af00      	add	r7, sp, #0
 800cf0c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800cf0e:	2301      	movs	r3, #1
 800cf10:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800cf12:	687b      	ldr	r3, [r7, #4]
 800cf14:	68db      	ldr	r3, [r3, #12]
 800cf16:	2b00      	cmp	r3, #0
 800cf18:	d102      	bne.n	800cf20 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800cf1a:	2300      	movs	r3, #0
 800cf1c:	73fb      	strb	r3, [r7, #15]
 800cf1e:	e008      	b.n	800cf32 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800cf20:	687b      	ldr	r3, [r7, #4]
 800cf22:	68db      	ldr	r3, [r3, #12]
 800cf24:	2b02      	cmp	r3, #2
 800cf26:	d102      	bne.n	800cf2e <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800cf28:	2301      	movs	r3, #1
 800cf2a:	73fb      	strb	r3, [r7, #15]
 800cf2c:	e001      	b.n	800cf32 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800cf2e:	f7f7 fa67 	bl	8004400 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800cf32:	687b      	ldr	r3, [r7, #4]
 800cf34:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 800cf38:	7bfa      	ldrb	r2, [r7, #15]
 800cf3a:	4611      	mov	r1, r2
 800cf3c:	4618      	mov	r0, r3
 800cf3e:	f7fe fe90 	bl	800bc62 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800cf42:	687b      	ldr	r3, [r7, #4]
 800cf44:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 800cf48:	4618      	mov	r0, r3
 800cf4a:	f7fe fe49 	bl	800bbe0 <USBD_LL_Reset>
}
 800cf4e:	bf00      	nop
 800cf50:	3710      	adds	r7, #16
 800cf52:	46bd      	mov	sp, r7
 800cf54:	bd80      	pop	{r7, pc}
	...

0800cf58 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cf58:	b580      	push	{r7, lr}
 800cf5a:	b082      	sub	sp, #8
 800cf5c:	af00      	add	r7, sp, #0
 800cf5e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800cf60:	687b      	ldr	r3, [r7, #4]
 800cf62:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 800cf66:	4618      	mov	r0, r3
 800cf68:	f7fe fe8a 	bl	800bc80 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800cf6c:	687b      	ldr	r3, [r7, #4]
 800cf6e:	681b      	ldr	r3, [r3, #0]
 800cf70:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800cf74:	681b      	ldr	r3, [r3, #0]
 800cf76:	687a      	ldr	r2, [r7, #4]
 800cf78:	6812      	ldr	r2, [r2, #0]
 800cf7a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800cf7e:	f043 0301 	orr.w	r3, r3, #1
 800cf82:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800cf84:	687b      	ldr	r3, [r7, #4]
 800cf86:	6a1b      	ldr	r3, [r3, #32]
 800cf88:	2b00      	cmp	r3, #0
 800cf8a:	d005      	beq.n	800cf98 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800cf8c:	4b04      	ldr	r3, [pc, #16]	; (800cfa0 <HAL_PCD_SuspendCallback+0x48>)
 800cf8e:	691b      	ldr	r3, [r3, #16]
 800cf90:	4a03      	ldr	r2, [pc, #12]	; (800cfa0 <HAL_PCD_SuspendCallback+0x48>)
 800cf92:	f043 0306 	orr.w	r3, r3, #6
 800cf96:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800cf98:	bf00      	nop
 800cf9a:	3708      	adds	r7, #8
 800cf9c:	46bd      	mov	sp, r7
 800cf9e:	bd80      	pop	{r7, pc}
 800cfa0:	e000ed00 	.word	0xe000ed00

0800cfa4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cfa4:	b580      	push	{r7, lr}
 800cfa6:	b082      	sub	sp, #8
 800cfa8:	af00      	add	r7, sp, #0
 800cfaa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800cfac:	687b      	ldr	r3, [r7, #4]
 800cfae:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 800cfb2:	4618      	mov	r0, r3
 800cfb4:	f7fe fe78 	bl	800bca8 <USBD_LL_Resume>
}
 800cfb8:	bf00      	nop
 800cfba:	3708      	adds	r7, #8
 800cfbc:	46bd      	mov	sp, r7
 800cfbe:	bd80      	pop	{r7, pc}

0800cfc0 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cfc0:	b580      	push	{r7, lr}
 800cfc2:	b082      	sub	sp, #8
 800cfc4:	af00      	add	r7, sp, #0
 800cfc6:	6078      	str	r0, [r7, #4]
 800cfc8:	460b      	mov	r3, r1
 800cfca:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800cfcc:	687b      	ldr	r3, [r7, #4]
 800cfce:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 800cfd2:	78fa      	ldrb	r2, [r7, #3]
 800cfd4:	4611      	mov	r1, r2
 800cfd6:	4618      	mov	r0, r3
 800cfd8:	f7fe fea1 	bl	800bd1e <USBD_LL_IsoOUTIncomplete>
}
 800cfdc:	bf00      	nop
 800cfde:	3708      	adds	r7, #8
 800cfe0:	46bd      	mov	sp, r7
 800cfe2:	bd80      	pop	{r7, pc}

0800cfe4 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cfe4:	b580      	push	{r7, lr}
 800cfe6:	b082      	sub	sp, #8
 800cfe8:	af00      	add	r7, sp, #0
 800cfea:	6078      	str	r0, [r7, #4]
 800cfec:	460b      	mov	r3, r1
 800cfee:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800cff0:	687b      	ldr	r3, [r7, #4]
 800cff2:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 800cff6:	78fa      	ldrb	r2, [r7, #3]
 800cff8:	4611      	mov	r1, r2
 800cffa:	4618      	mov	r0, r3
 800cffc:	f7fe fe83 	bl	800bd06 <USBD_LL_IsoINIncomplete>
}
 800d000:	bf00      	nop
 800d002:	3708      	adds	r7, #8
 800d004:	46bd      	mov	sp, r7
 800d006:	bd80      	pop	{r7, pc}

0800d008 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d008:	b580      	push	{r7, lr}
 800d00a:	b082      	sub	sp, #8
 800d00c:	af00      	add	r7, sp, #0
 800d00e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800d010:	687b      	ldr	r3, [r7, #4]
 800d012:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 800d016:	4618      	mov	r0, r3
 800d018:	f7fe fe8d 	bl	800bd36 <USBD_LL_DevConnected>
}
 800d01c:	bf00      	nop
 800d01e:	3708      	adds	r7, #8
 800d020:	46bd      	mov	sp, r7
 800d022:	bd80      	pop	{r7, pc}

0800d024 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d024:	b580      	push	{r7, lr}
 800d026:	b082      	sub	sp, #8
 800d028:	af00      	add	r7, sp, #0
 800d02a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800d02c:	687b      	ldr	r3, [r7, #4]
 800d02e:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 800d032:	4618      	mov	r0, r3
 800d034:	f7fe fe89 	bl	800bd4a <USBD_LL_DevDisconnected>
}
 800d038:	bf00      	nop
 800d03a:	3708      	adds	r7, #8
 800d03c:	46bd      	mov	sp, r7
 800d03e:	bd80      	pop	{r7, pc}

0800d040 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800d040:	b580      	push	{r7, lr}
 800d042:	b082      	sub	sp, #8
 800d044:	af00      	add	r7, sp, #0
 800d046:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800d048:	687b      	ldr	r3, [r7, #4]
 800d04a:	781b      	ldrb	r3, [r3, #0]
 800d04c:	2b00      	cmp	r3, #0
 800d04e:	d139      	bne.n	800d0c4 <USBD_LL_Init+0x84>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800d050:	4a1f      	ldr	r2, [pc, #124]	; (800d0d0 <USBD_LL_Init+0x90>)
 800d052:	687b      	ldr	r3, [r7, #4]
 800d054:	f8c2 33fc 	str.w	r3, [r2, #1020]	; 0x3fc
  pdev->pData = &hpcd_USB_OTG_FS;
 800d058:	687b      	ldr	r3, [r7, #4]
 800d05a:	4a1d      	ldr	r2, [pc, #116]	; (800d0d0 <USBD_LL_Init+0x90>)
 800d05c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800d060:	4b1b      	ldr	r3, [pc, #108]	; (800d0d0 <USBD_LL_Init+0x90>)
 800d062:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800d066:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800d068:	4b19      	ldr	r3, [pc, #100]	; (800d0d0 <USBD_LL_Init+0x90>)
 800d06a:	2204      	movs	r2, #4
 800d06c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800d06e:	4b18      	ldr	r3, [pc, #96]	; (800d0d0 <USBD_LL_Init+0x90>)
 800d070:	2202      	movs	r2, #2
 800d072:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800d074:	4b16      	ldr	r3, [pc, #88]	; (800d0d0 <USBD_LL_Init+0x90>)
 800d076:	2200      	movs	r2, #0
 800d078:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800d07a:	4b15      	ldr	r3, [pc, #84]	; (800d0d0 <USBD_LL_Init+0x90>)
 800d07c:	2202      	movs	r2, #2
 800d07e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800d080:	4b13      	ldr	r3, [pc, #76]	; (800d0d0 <USBD_LL_Init+0x90>)
 800d082:	2200      	movs	r2, #0
 800d084:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800d086:	4b12      	ldr	r3, [pc, #72]	; (800d0d0 <USBD_LL_Init+0x90>)
 800d088:	2200      	movs	r2, #0
 800d08a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800d08c:	4b10      	ldr	r3, [pc, #64]	; (800d0d0 <USBD_LL_Init+0x90>)
 800d08e:	2200      	movs	r2, #0
 800d090:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800d092:	4b0f      	ldr	r3, [pc, #60]	; (800d0d0 <USBD_LL_Init+0x90>)
 800d094:	2200      	movs	r2, #0
 800d096:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800d098:	480d      	ldr	r0, [pc, #52]	; (800d0d0 <USBD_LL_Init+0x90>)
 800d09a:	f7fa f89f 	bl	80071dc <HAL_PCD_Init>
 800d09e:	4603      	mov	r3, r0
 800d0a0:	2b00      	cmp	r3, #0
 800d0a2:	d001      	beq.n	800d0a8 <USBD_LL_Init+0x68>
  {
    Error_Handler( );
 800d0a4:	f7f7 f9ac 	bl	8004400 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800d0a8:	2180      	movs	r1, #128	; 0x80
 800d0aa:	4809      	ldr	r0, [pc, #36]	; (800d0d0 <USBD_LL_Init+0x90>)
 800d0ac:	f7fb f9dc 	bl	8008468 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800d0b0:	2240      	movs	r2, #64	; 0x40
 800d0b2:	2100      	movs	r1, #0
 800d0b4:	4806      	ldr	r0, [pc, #24]	; (800d0d0 <USBD_LL_Init+0x90>)
 800d0b6:	f7fb f991 	bl	80083dc <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800d0ba:	2280      	movs	r2, #128	; 0x80
 800d0bc:	2101      	movs	r1, #1
 800d0be:	4804      	ldr	r0, [pc, #16]	; (800d0d0 <USBD_LL_Init+0x90>)
 800d0c0:	f7fb f98c 	bl	80083dc <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800d0c4:	2300      	movs	r3, #0
}
 800d0c6:	4618      	mov	r0, r3
 800d0c8:	3708      	adds	r7, #8
 800d0ca:	46bd      	mov	sp, r7
 800d0cc:	bd80      	pop	{r7, pc}
 800d0ce:	bf00      	nop
 800d0d0:	20001e90 	.word	0x20001e90

0800d0d4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800d0d4:	b580      	push	{r7, lr}
 800d0d6:	b084      	sub	sp, #16
 800d0d8:	af00      	add	r7, sp, #0
 800d0da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d0dc:	2300      	movs	r3, #0
 800d0de:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d0e0:	2300      	movs	r3, #0
 800d0e2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800d0e4:	687b      	ldr	r3, [r7, #4]
 800d0e6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d0ea:	4618      	mov	r0, r3
 800d0ec:	f7fa f993 	bl	8007416 <HAL_PCD_Start>
 800d0f0:	4603      	mov	r3, r0
 800d0f2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d0f4:	7bfb      	ldrb	r3, [r7, #15]
 800d0f6:	4618      	mov	r0, r3
 800d0f8:	f000 f92e 	bl	800d358 <USBD_Get_USB_Status>
 800d0fc:	4603      	mov	r3, r0
 800d0fe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d100:	7bbb      	ldrb	r3, [r7, #14]
}
 800d102:	4618      	mov	r0, r3
 800d104:	3710      	adds	r7, #16
 800d106:	46bd      	mov	sp, r7
 800d108:	bd80      	pop	{r7, pc}

0800d10a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800d10a:	b580      	push	{r7, lr}
 800d10c:	b084      	sub	sp, #16
 800d10e:	af00      	add	r7, sp, #0
 800d110:	6078      	str	r0, [r7, #4]
 800d112:	4608      	mov	r0, r1
 800d114:	4611      	mov	r1, r2
 800d116:	461a      	mov	r2, r3
 800d118:	4603      	mov	r3, r0
 800d11a:	70fb      	strb	r3, [r7, #3]
 800d11c:	460b      	mov	r3, r1
 800d11e:	70bb      	strb	r3, [r7, #2]
 800d120:	4613      	mov	r3, r2
 800d122:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d124:	2300      	movs	r3, #0
 800d126:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d128:	2300      	movs	r3, #0
 800d12a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800d12c:	687b      	ldr	r3, [r7, #4]
 800d12e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800d132:	78bb      	ldrb	r3, [r7, #2]
 800d134:	883a      	ldrh	r2, [r7, #0]
 800d136:	78f9      	ldrb	r1, [r7, #3]
 800d138:	f7fa fd58 	bl	8007bec <HAL_PCD_EP_Open>
 800d13c:	4603      	mov	r3, r0
 800d13e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d140:	7bfb      	ldrb	r3, [r7, #15]
 800d142:	4618      	mov	r0, r3
 800d144:	f000 f908 	bl	800d358 <USBD_Get_USB_Status>
 800d148:	4603      	mov	r3, r0
 800d14a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d14c:	7bbb      	ldrb	r3, [r7, #14]
}
 800d14e:	4618      	mov	r0, r3
 800d150:	3710      	adds	r7, #16
 800d152:	46bd      	mov	sp, r7
 800d154:	bd80      	pop	{r7, pc}

0800d156 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d156:	b580      	push	{r7, lr}
 800d158:	b084      	sub	sp, #16
 800d15a:	af00      	add	r7, sp, #0
 800d15c:	6078      	str	r0, [r7, #4]
 800d15e:	460b      	mov	r3, r1
 800d160:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d162:	2300      	movs	r3, #0
 800d164:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d166:	2300      	movs	r3, #0
 800d168:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800d16a:	687b      	ldr	r3, [r7, #4]
 800d16c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d170:	78fa      	ldrb	r2, [r7, #3]
 800d172:	4611      	mov	r1, r2
 800d174:	4618      	mov	r0, r3
 800d176:	f7fa fda1 	bl	8007cbc <HAL_PCD_EP_Close>
 800d17a:	4603      	mov	r3, r0
 800d17c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d17e:	7bfb      	ldrb	r3, [r7, #15]
 800d180:	4618      	mov	r0, r3
 800d182:	f000 f8e9 	bl	800d358 <USBD_Get_USB_Status>
 800d186:	4603      	mov	r3, r0
 800d188:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d18a:	7bbb      	ldrb	r3, [r7, #14]
}
 800d18c:	4618      	mov	r0, r3
 800d18e:	3710      	adds	r7, #16
 800d190:	46bd      	mov	sp, r7
 800d192:	bd80      	pop	{r7, pc}

0800d194 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d194:	b580      	push	{r7, lr}
 800d196:	b084      	sub	sp, #16
 800d198:	af00      	add	r7, sp, #0
 800d19a:	6078      	str	r0, [r7, #4]
 800d19c:	460b      	mov	r3, r1
 800d19e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d1a0:	2300      	movs	r3, #0
 800d1a2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d1a4:	2300      	movs	r3, #0
 800d1a6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800d1a8:	687b      	ldr	r3, [r7, #4]
 800d1aa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d1ae:	78fa      	ldrb	r2, [r7, #3]
 800d1b0:	4611      	mov	r1, r2
 800d1b2:	4618      	mov	r0, r3
 800d1b4:	f7fa fe78 	bl	8007ea8 <HAL_PCD_EP_SetStall>
 800d1b8:	4603      	mov	r3, r0
 800d1ba:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d1bc:	7bfb      	ldrb	r3, [r7, #15]
 800d1be:	4618      	mov	r0, r3
 800d1c0:	f000 f8ca 	bl	800d358 <USBD_Get_USB_Status>
 800d1c4:	4603      	mov	r3, r0
 800d1c6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d1c8:	7bbb      	ldrb	r3, [r7, #14]
}
 800d1ca:	4618      	mov	r0, r3
 800d1cc:	3710      	adds	r7, #16
 800d1ce:	46bd      	mov	sp, r7
 800d1d0:	bd80      	pop	{r7, pc}

0800d1d2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d1d2:	b580      	push	{r7, lr}
 800d1d4:	b084      	sub	sp, #16
 800d1d6:	af00      	add	r7, sp, #0
 800d1d8:	6078      	str	r0, [r7, #4]
 800d1da:	460b      	mov	r3, r1
 800d1dc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d1de:	2300      	movs	r3, #0
 800d1e0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d1e2:	2300      	movs	r3, #0
 800d1e4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800d1e6:	687b      	ldr	r3, [r7, #4]
 800d1e8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d1ec:	78fa      	ldrb	r2, [r7, #3]
 800d1ee:	4611      	mov	r1, r2
 800d1f0:	4618      	mov	r0, r3
 800d1f2:	f7fa febd 	bl	8007f70 <HAL_PCD_EP_ClrStall>
 800d1f6:	4603      	mov	r3, r0
 800d1f8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d1fa:	7bfb      	ldrb	r3, [r7, #15]
 800d1fc:	4618      	mov	r0, r3
 800d1fe:	f000 f8ab 	bl	800d358 <USBD_Get_USB_Status>
 800d202:	4603      	mov	r3, r0
 800d204:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d206:	7bbb      	ldrb	r3, [r7, #14]
}
 800d208:	4618      	mov	r0, r3
 800d20a:	3710      	adds	r7, #16
 800d20c:	46bd      	mov	sp, r7
 800d20e:	bd80      	pop	{r7, pc}

0800d210 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d210:	b480      	push	{r7}
 800d212:	b085      	sub	sp, #20
 800d214:	af00      	add	r7, sp, #0
 800d216:	6078      	str	r0, [r7, #4]
 800d218:	460b      	mov	r3, r1
 800d21a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800d21c:	687b      	ldr	r3, [r7, #4]
 800d21e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d222:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800d224:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800d228:	2b00      	cmp	r3, #0
 800d22a:	da0b      	bge.n	800d244 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800d22c:	78fb      	ldrb	r3, [r7, #3]
 800d22e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800d232:	68f9      	ldr	r1, [r7, #12]
 800d234:	4613      	mov	r3, r2
 800d236:	00db      	lsls	r3, r3, #3
 800d238:	1a9b      	subs	r3, r3, r2
 800d23a:	009b      	lsls	r3, r3, #2
 800d23c:	440b      	add	r3, r1
 800d23e:	333e      	adds	r3, #62	; 0x3e
 800d240:	781b      	ldrb	r3, [r3, #0]
 800d242:	e00b      	b.n	800d25c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800d244:	78fb      	ldrb	r3, [r7, #3]
 800d246:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800d24a:	68f9      	ldr	r1, [r7, #12]
 800d24c:	4613      	mov	r3, r2
 800d24e:	00db      	lsls	r3, r3, #3
 800d250:	1a9b      	subs	r3, r3, r2
 800d252:	009b      	lsls	r3, r3, #2
 800d254:	440b      	add	r3, r1
 800d256:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800d25a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800d25c:	4618      	mov	r0, r3
 800d25e:	3714      	adds	r7, #20
 800d260:	46bd      	mov	sp, r7
 800d262:	bc80      	pop	{r7}
 800d264:	4770      	bx	lr

0800d266 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800d266:	b580      	push	{r7, lr}
 800d268:	b084      	sub	sp, #16
 800d26a:	af00      	add	r7, sp, #0
 800d26c:	6078      	str	r0, [r7, #4]
 800d26e:	460b      	mov	r3, r1
 800d270:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d272:	2300      	movs	r3, #0
 800d274:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d276:	2300      	movs	r3, #0
 800d278:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800d27a:	687b      	ldr	r3, [r7, #4]
 800d27c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d280:	78fa      	ldrb	r2, [r7, #3]
 800d282:	4611      	mov	r1, r2
 800d284:	4618      	mov	r0, r3
 800d286:	f7fa fc8c 	bl	8007ba2 <HAL_PCD_SetAddress>
 800d28a:	4603      	mov	r3, r0
 800d28c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d28e:	7bfb      	ldrb	r3, [r7, #15]
 800d290:	4618      	mov	r0, r3
 800d292:	f000 f861 	bl	800d358 <USBD_Get_USB_Status>
 800d296:	4603      	mov	r3, r0
 800d298:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d29a:	7bbb      	ldrb	r3, [r7, #14]
}
 800d29c:	4618      	mov	r0, r3
 800d29e:	3710      	adds	r7, #16
 800d2a0:	46bd      	mov	sp, r7
 800d2a2:	bd80      	pop	{r7, pc}

0800d2a4 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800d2a4:	b580      	push	{r7, lr}
 800d2a6:	b086      	sub	sp, #24
 800d2a8:	af00      	add	r7, sp, #0
 800d2aa:	60f8      	str	r0, [r7, #12]
 800d2ac:	607a      	str	r2, [r7, #4]
 800d2ae:	461a      	mov	r2, r3
 800d2b0:	460b      	mov	r3, r1
 800d2b2:	72fb      	strb	r3, [r7, #11]
 800d2b4:	4613      	mov	r3, r2
 800d2b6:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d2b8:	2300      	movs	r3, #0
 800d2ba:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d2bc:	2300      	movs	r3, #0
 800d2be:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800d2c0:	68fb      	ldr	r3, [r7, #12]
 800d2c2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800d2c6:	893b      	ldrh	r3, [r7, #8]
 800d2c8:	7af9      	ldrb	r1, [r7, #11]
 800d2ca:	687a      	ldr	r2, [r7, #4]
 800d2cc:	f7fa fda2 	bl	8007e14 <HAL_PCD_EP_Transmit>
 800d2d0:	4603      	mov	r3, r0
 800d2d2:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d2d4:	7dfb      	ldrb	r3, [r7, #23]
 800d2d6:	4618      	mov	r0, r3
 800d2d8:	f000 f83e 	bl	800d358 <USBD_Get_USB_Status>
 800d2dc:	4603      	mov	r3, r0
 800d2de:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800d2e0:	7dbb      	ldrb	r3, [r7, #22]
}
 800d2e2:	4618      	mov	r0, r3
 800d2e4:	3718      	adds	r7, #24
 800d2e6:	46bd      	mov	sp, r7
 800d2e8:	bd80      	pop	{r7, pc}

0800d2ea <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800d2ea:	b580      	push	{r7, lr}
 800d2ec:	b086      	sub	sp, #24
 800d2ee:	af00      	add	r7, sp, #0
 800d2f0:	60f8      	str	r0, [r7, #12]
 800d2f2:	607a      	str	r2, [r7, #4]
 800d2f4:	461a      	mov	r2, r3
 800d2f6:	460b      	mov	r3, r1
 800d2f8:	72fb      	strb	r3, [r7, #11]
 800d2fa:	4613      	mov	r3, r2
 800d2fc:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d2fe:	2300      	movs	r3, #0
 800d300:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d302:	2300      	movs	r3, #0
 800d304:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800d306:	68fb      	ldr	r3, [r7, #12]
 800d308:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800d30c:	893b      	ldrh	r3, [r7, #8]
 800d30e:	7af9      	ldrb	r1, [r7, #11]
 800d310:	687a      	ldr	r2, [r7, #4]
 800d312:	f7fa fd1d 	bl	8007d50 <HAL_PCD_EP_Receive>
 800d316:	4603      	mov	r3, r0
 800d318:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d31a:	7dfb      	ldrb	r3, [r7, #23]
 800d31c:	4618      	mov	r0, r3
 800d31e:	f000 f81b 	bl	800d358 <USBD_Get_USB_Status>
 800d322:	4603      	mov	r3, r0
 800d324:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800d326:	7dbb      	ldrb	r3, [r7, #22]
}
 800d328:	4618      	mov	r0, r3
 800d32a:	3718      	adds	r7, #24
 800d32c:	46bd      	mov	sp, r7
 800d32e:	bd80      	pop	{r7, pc}

0800d330 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d330:	b580      	push	{r7, lr}
 800d332:	b082      	sub	sp, #8
 800d334:	af00      	add	r7, sp, #0
 800d336:	6078      	str	r0, [r7, #4]
 800d338:	460b      	mov	r3, r1
 800d33a:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800d33c:	687b      	ldr	r3, [r7, #4]
 800d33e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d342:	78fa      	ldrb	r2, [r7, #3]
 800d344:	4611      	mov	r1, r2
 800d346:	4618      	mov	r0, r3
 800d348:	f7fa fd4d 	bl	8007de6 <HAL_PCD_EP_GetRxCount>
 800d34c:	4603      	mov	r3, r0
}
 800d34e:	4618      	mov	r0, r3
 800d350:	3708      	adds	r7, #8
 800d352:	46bd      	mov	sp, r7
 800d354:	bd80      	pop	{r7, pc}
	...

0800d358 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800d358:	b480      	push	{r7}
 800d35a:	b085      	sub	sp, #20
 800d35c:	af00      	add	r7, sp, #0
 800d35e:	4603      	mov	r3, r0
 800d360:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d362:	2300      	movs	r3, #0
 800d364:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800d366:	79fb      	ldrb	r3, [r7, #7]
 800d368:	2b03      	cmp	r3, #3
 800d36a:	d817      	bhi.n	800d39c <USBD_Get_USB_Status+0x44>
 800d36c:	a201      	add	r2, pc, #4	; (adr r2, 800d374 <USBD_Get_USB_Status+0x1c>)
 800d36e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d372:	bf00      	nop
 800d374:	0800d385 	.word	0x0800d385
 800d378:	0800d38b 	.word	0x0800d38b
 800d37c:	0800d391 	.word	0x0800d391
 800d380:	0800d397 	.word	0x0800d397
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800d384:	2300      	movs	r3, #0
 800d386:	73fb      	strb	r3, [r7, #15]
    break;
 800d388:	e00b      	b.n	800d3a2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800d38a:	2302      	movs	r3, #2
 800d38c:	73fb      	strb	r3, [r7, #15]
    break;
 800d38e:	e008      	b.n	800d3a2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800d390:	2301      	movs	r3, #1
 800d392:	73fb      	strb	r3, [r7, #15]
    break;
 800d394:	e005      	b.n	800d3a2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800d396:	2302      	movs	r3, #2
 800d398:	73fb      	strb	r3, [r7, #15]
    break;
 800d39a:	e002      	b.n	800d3a2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800d39c:	2302      	movs	r3, #2
 800d39e:	73fb      	strb	r3, [r7, #15]
    break;
 800d3a0:	bf00      	nop
  }
  return usb_status;
 800d3a2:	7bfb      	ldrb	r3, [r7, #15]
}
 800d3a4:	4618      	mov	r0, r3
 800d3a6:	3714      	adds	r7, #20
 800d3a8:	46bd      	mov	sp, r7
 800d3aa:	bc80      	pop	{r7}
 800d3ac:	4770      	bx	lr
 800d3ae:	bf00      	nop

0800d3b0 <cos>:
 800d3b0:	b530      	push	{r4, r5, lr}
 800d3b2:	4a1e      	ldr	r2, [pc, #120]	; (800d42c <cos+0x7c>)
 800d3b4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800d3b8:	4293      	cmp	r3, r2
 800d3ba:	b087      	sub	sp, #28
 800d3bc:	dc04      	bgt.n	800d3c8 <cos+0x18>
 800d3be:	2200      	movs	r2, #0
 800d3c0:	2300      	movs	r3, #0
 800d3c2:	f001 f8ad 	bl	800e520 <__kernel_cos>
 800d3c6:	e006      	b.n	800d3d6 <cos+0x26>
 800d3c8:	4a19      	ldr	r2, [pc, #100]	; (800d430 <cos+0x80>)
 800d3ca:	4293      	cmp	r3, r2
 800d3cc:	dd05      	ble.n	800d3da <cos+0x2a>
 800d3ce:	4602      	mov	r2, r0
 800d3d0:	460b      	mov	r3, r1
 800d3d2:	f7f2 ff05 	bl	80001e0 <__aeabi_dsub>
 800d3d6:	b007      	add	sp, #28
 800d3d8:	bd30      	pop	{r4, r5, pc}
 800d3da:	aa02      	add	r2, sp, #8
 800d3dc:	f000 fa58 	bl	800d890 <__ieee754_rem_pio2>
 800d3e0:	f000 0003 	and.w	r0, r0, #3
 800d3e4:	2801      	cmp	r0, #1
 800d3e6:	d007      	beq.n	800d3f8 <cos+0x48>
 800d3e8:	2802      	cmp	r0, #2
 800d3ea:	d00f      	beq.n	800d40c <cos+0x5c>
 800d3ec:	b9a8      	cbnz	r0, 800d41a <cos+0x6a>
 800d3ee:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d3f2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d3f6:	e7e4      	b.n	800d3c2 <cos+0x12>
 800d3f8:	9000      	str	r0, [sp, #0]
 800d3fa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d3fe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d402:	f001 fc95 	bl	800ed30 <__kernel_sin>
 800d406:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 800d40a:	e7e4      	b.n	800d3d6 <cos+0x26>
 800d40c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d410:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d414:	f001 f884 	bl	800e520 <__kernel_cos>
 800d418:	e7f5      	b.n	800d406 <cos+0x56>
 800d41a:	2301      	movs	r3, #1
 800d41c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d420:	9300      	str	r3, [sp, #0]
 800d422:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d426:	f001 fc83 	bl	800ed30 <__kernel_sin>
 800d42a:	e7d4      	b.n	800d3d6 <cos+0x26>
 800d42c:	3fe921fb 	.word	0x3fe921fb
 800d430:	7fefffff 	.word	0x7fefffff

0800d434 <sin>:
 800d434:	b530      	push	{r4, r5, lr}
 800d436:	4a20      	ldr	r2, [pc, #128]	; (800d4b8 <sin+0x84>)
 800d438:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800d43c:	4293      	cmp	r3, r2
 800d43e:	b087      	sub	sp, #28
 800d440:	dc06      	bgt.n	800d450 <sin+0x1c>
 800d442:	2300      	movs	r3, #0
 800d444:	2200      	movs	r2, #0
 800d446:	9300      	str	r3, [sp, #0]
 800d448:	2300      	movs	r3, #0
 800d44a:	f001 fc71 	bl	800ed30 <__kernel_sin>
 800d44e:	e006      	b.n	800d45e <sin+0x2a>
 800d450:	4a1a      	ldr	r2, [pc, #104]	; (800d4bc <sin+0x88>)
 800d452:	4293      	cmp	r3, r2
 800d454:	dd05      	ble.n	800d462 <sin+0x2e>
 800d456:	4602      	mov	r2, r0
 800d458:	460b      	mov	r3, r1
 800d45a:	f7f2 fec1 	bl	80001e0 <__aeabi_dsub>
 800d45e:	b007      	add	sp, #28
 800d460:	bd30      	pop	{r4, r5, pc}
 800d462:	aa02      	add	r2, sp, #8
 800d464:	f000 fa14 	bl	800d890 <__ieee754_rem_pio2>
 800d468:	f000 0003 	and.w	r0, r0, #3
 800d46c:	2801      	cmp	r0, #1
 800d46e:	d009      	beq.n	800d484 <sin+0x50>
 800d470:	2802      	cmp	r0, #2
 800d472:	d00e      	beq.n	800d492 <sin+0x5e>
 800d474:	b9c0      	cbnz	r0, 800d4a8 <sin+0x74>
 800d476:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d47a:	2301      	movs	r3, #1
 800d47c:	9300      	str	r3, [sp, #0]
 800d47e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d482:	e7e2      	b.n	800d44a <sin+0x16>
 800d484:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d488:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d48c:	f001 f848 	bl	800e520 <__kernel_cos>
 800d490:	e7e5      	b.n	800d45e <sin+0x2a>
 800d492:	2301      	movs	r3, #1
 800d494:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d498:	9300      	str	r3, [sp, #0]
 800d49a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d49e:	f001 fc47 	bl	800ed30 <__kernel_sin>
 800d4a2:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 800d4a6:	e7da      	b.n	800d45e <sin+0x2a>
 800d4a8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d4ac:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d4b0:	f001 f836 	bl	800e520 <__kernel_cos>
 800d4b4:	e7f5      	b.n	800d4a2 <sin+0x6e>
 800d4b6:	bf00      	nop
 800d4b8:	3fe921fb 	.word	0x3fe921fb
 800d4bc:	7fefffff 	.word	0x7fefffff

0800d4c0 <atanf>:
 800d4c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d4c4:	f020 4500 	bic.w	r5, r0, #2147483648	; 0x80000000
 800d4c8:	f1b5 4fa1 	cmp.w	r5, #1350565888	; 0x50800000
 800d4cc:	4604      	mov	r4, r0
 800d4ce:	4680      	mov	r8, r0
 800d4d0:	db0e      	blt.n	800d4f0 <atanf+0x30>
 800d4d2:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 800d4d6:	dd04      	ble.n	800d4e2 <atanf+0x22>
 800d4d8:	4601      	mov	r1, r0
 800d4da:	f7f3 fb67 	bl	8000bac <__addsf3>
 800d4de:	4604      	mov	r4, r0
 800d4e0:	e003      	b.n	800d4ea <atanf+0x2a>
 800d4e2:	2800      	cmp	r0, #0
 800d4e4:	f300 80ce 	bgt.w	800d684 <atanf+0x1c4>
 800d4e8:	4c67      	ldr	r4, [pc, #412]	; (800d688 <atanf+0x1c8>)
 800d4ea:	4620      	mov	r0, r4
 800d4ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d4f0:	4b66      	ldr	r3, [pc, #408]	; (800d68c <atanf+0x1cc>)
 800d4f2:	429d      	cmp	r5, r3
 800d4f4:	dc0e      	bgt.n	800d514 <atanf+0x54>
 800d4f6:	f1b5 5f44 	cmp.w	r5, #822083584	; 0x31000000
 800d4fa:	da08      	bge.n	800d50e <atanf+0x4e>
 800d4fc:	4964      	ldr	r1, [pc, #400]	; (800d690 <atanf+0x1d0>)
 800d4fe:	f7f3 fb55 	bl	8000bac <__addsf3>
 800d502:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800d506:	f7f3 fe15 	bl	8001134 <__aeabi_fcmpgt>
 800d50a:	2800      	cmp	r0, #0
 800d50c:	d1ed      	bne.n	800d4ea <atanf+0x2a>
 800d50e:	f04f 36ff 	mov.w	r6, #4294967295
 800d512:	e01c      	b.n	800d54e <atanf+0x8e>
 800d514:	f000 f914 	bl	800d740 <fabsf>
 800d518:	4b5e      	ldr	r3, [pc, #376]	; (800d694 <atanf+0x1d4>)
 800d51a:	4604      	mov	r4, r0
 800d51c:	429d      	cmp	r5, r3
 800d51e:	dc7c      	bgt.n	800d61a <atanf+0x15a>
 800d520:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 800d524:	429d      	cmp	r5, r3
 800d526:	dc67      	bgt.n	800d5f8 <atanf+0x138>
 800d528:	4601      	mov	r1, r0
 800d52a:	f7f3 fb3f 	bl	8000bac <__addsf3>
 800d52e:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800d532:	f7f3 fb39 	bl	8000ba8 <__aeabi_fsub>
 800d536:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800d53a:	4605      	mov	r5, r0
 800d53c:	4620      	mov	r0, r4
 800d53e:	f7f3 fb35 	bl	8000bac <__addsf3>
 800d542:	4601      	mov	r1, r0
 800d544:	4628      	mov	r0, r5
 800d546:	f7f3 fced 	bl	8000f24 <__aeabi_fdiv>
 800d54a:	2600      	movs	r6, #0
 800d54c:	4604      	mov	r4, r0
 800d54e:	4621      	mov	r1, r4
 800d550:	4620      	mov	r0, r4
 800d552:	f7f3 fc33 	bl	8000dbc <__aeabi_fmul>
 800d556:	4601      	mov	r1, r0
 800d558:	4607      	mov	r7, r0
 800d55a:	f7f3 fc2f 	bl	8000dbc <__aeabi_fmul>
 800d55e:	4605      	mov	r5, r0
 800d560:	494d      	ldr	r1, [pc, #308]	; (800d698 <atanf+0x1d8>)
 800d562:	f7f3 fc2b 	bl	8000dbc <__aeabi_fmul>
 800d566:	494d      	ldr	r1, [pc, #308]	; (800d69c <atanf+0x1dc>)
 800d568:	f7f3 fb20 	bl	8000bac <__addsf3>
 800d56c:	4629      	mov	r1, r5
 800d56e:	f7f3 fc25 	bl	8000dbc <__aeabi_fmul>
 800d572:	494b      	ldr	r1, [pc, #300]	; (800d6a0 <atanf+0x1e0>)
 800d574:	f7f3 fb1a 	bl	8000bac <__addsf3>
 800d578:	4629      	mov	r1, r5
 800d57a:	f7f3 fc1f 	bl	8000dbc <__aeabi_fmul>
 800d57e:	4949      	ldr	r1, [pc, #292]	; (800d6a4 <atanf+0x1e4>)
 800d580:	f7f3 fb14 	bl	8000bac <__addsf3>
 800d584:	4629      	mov	r1, r5
 800d586:	f7f3 fc19 	bl	8000dbc <__aeabi_fmul>
 800d58a:	4947      	ldr	r1, [pc, #284]	; (800d6a8 <atanf+0x1e8>)
 800d58c:	f7f3 fb0e 	bl	8000bac <__addsf3>
 800d590:	4629      	mov	r1, r5
 800d592:	f7f3 fc13 	bl	8000dbc <__aeabi_fmul>
 800d596:	4945      	ldr	r1, [pc, #276]	; (800d6ac <atanf+0x1ec>)
 800d598:	f7f3 fb08 	bl	8000bac <__addsf3>
 800d59c:	4639      	mov	r1, r7
 800d59e:	f7f3 fc0d 	bl	8000dbc <__aeabi_fmul>
 800d5a2:	4943      	ldr	r1, [pc, #268]	; (800d6b0 <atanf+0x1f0>)
 800d5a4:	4607      	mov	r7, r0
 800d5a6:	4628      	mov	r0, r5
 800d5a8:	f7f3 fc08 	bl	8000dbc <__aeabi_fmul>
 800d5ac:	4941      	ldr	r1, [pc, #260]	; (800d6b4 <atanf+0x1f4>)
 800d5ae:	f7f3 fafb 	bl	8000ba8 <__aeabi_fsub>
 800d5b2:	4629      	mov	r1, r5
 800d5b4:	f7f3 fc02 	bl	8000dbc <__aeabi_fmul>
 800d5b8:	493f      	ldr	r1, [pc, #252]	; (800d6b8 <atanf+0x1f8>)
 800d5ba:	f7f3 faf5 	bl	8000ba8 <__aeabi_fsub>
 800d5be:	4629      	mov	r1, r5
 800d5c0:	f7f3 fbfc 	bl	8000dbc <__aeabi_fmul>
 800d5c4:	493d      	ldr	r1, [pc, #244]	; (800d6bc <atanf+0x1fc>)
 800d5c6:	f7f3 faef 	bl	8000ba8 <__aeabi_fsub>
 800d5ca:	4629      	mov	r1, r5
 800d5cc:	f7f3 fbf6 	bl	8000dbc <__aeabi_fmul>
 800d5d0:	493b      	ldr	r1, [pc, #236]	; (800d6c0 <atanf+0x200>)
 800d5d2:	f7f3 fae9 	bl	8000ba8 <__aeabi_fsub>
 800d5d6:	4629      	mov	r1, r5
 800d5d8:	f7f3 fbf0 	bl	8000dbc <__aeabi_fmul>
 800d5dc:	4601      	mov	r1, r0
 800d5de:	4638      	mov	r0, r7
 800d5e0:	f7f3 fae4 	bl	8000bac <__addsf3>
 800d5e4:	4621      	mov	r1, r4
 800d5e6:	f7f3 fbe9 	bl	8000dbc <__aeabi_fmul>
 800d5ea:	1c73      	adds	r3, r6, #1
 800d5ec:	4601      	mov	r1, r0
 800d5ee:	d133      	bne.n	800d658 <atanf+0x198>
 800d5f0:	4620      	mov	r0, r4
 800d5f2:	f7f3 fad9 	bl	8000ba8 <__aeabi_fsub>
 800d5f6:	e772      	b.n	800d4de <atanf+0x1e>
 800d5f8:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800d5fc:	f7f3 fad4 	bl	8000ba8 <__aeabi_fsub>
 800d600:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800d604:	4605      	mov	r5, r0
 800d606:	4620      	mov	r0, r4
 800d608:	f7f3 fad0 	bl	8000bac <__addsf3>
 800d60c:	4601      	mov	r1, r0
 800d60e:	4628      	mov	r0, r5
 800d610:	f7f3 fc88 	bl	8000f24 <__aeabi_fdiv>
 800d614:	2601      	movs	r6, #1
 800d616:	4604      	mov	r4, r0
 800d618:	e799      	b.n	800d54e <atanf+0x8e>
 800d61a:	4b2a      	ldr	r3, [pc, #168]	; (800d6c4 <atanf+0x204>)
 800d61c:	429d      	cmp	r5, r3
 800d61e:	dc14      	bgt.n	800d64a <atanf+0x18a>
 800d620:	f04f 517f 	mov.w	r1, #1069547520	; 0x3fc00000
 800d624:	f7f3 fac0 	bl	8000ba8 <__aeabi_fsub>
 800d628:	f04f 517f 	mov.w	r1, #1069547520	; 0x3fc00000
 800d62c:	4605      	mov	r5, r0
 800d62e:	4620      	mov	r0, r4
 800d630:	f7f3 fbc4 	bl	8000dbc <__aeabi_fmul>
 800d634:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800d638:	f7f3 fab8 	bl	8000bac <__addsf3>
 800d63c:	4601      	mov	r1, r0
 800d63e:	4628      	mov	r0, r5
 800d640:	f7f3 fc70 	bl	8000f24 <__aeabi_fdiv>
 800d644:	2602      	movs	r6, #2
 800d646:	4604      	mov	r4, r0
 800d648:	e781      	b.n	800d54e <atanf+0x8e>
 800d64a:	4601      	mov	r1, r0
 800d64c:	481e      	ldr	r0, [pc, #120]	; (800d6c8 <atanf+0x208>)
 800d64e:	f7f3 fc69 	bl	8000f24 <__aeabi_fdiv>
 800d652:	2603      	movs	r6, #3
 800d654:	4604      	mov	r4, r0
 800d656:	e77a      	b.n	800d54e <atanf+0x8e>
 800d658:	4b1c      	ldr	r3, [pc, #112]	; (800d6cc <atanf+0x20c>)
 800d65a:	f853 1026 	ldr.w	r1, [r3, r6, lsl #2]
 800d65e:	f7f3 faa3 	bl	8000ba8 <__aeabi_fsub>
 800d662:	4621      	mov	r1, r4
 800d664:	f7f3 faa0 	bl	8000ba8 <__aeabi_fsub>
 800d668:	4b19      	ldr	r3, [pc, #100]	; (800d6d0 <atanf+0x210>)
 800d66a:	4601      	mov	r1, r0
 800d66c:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800d670:	f7f3 fa9a 	bl	8000ba8 <__aeabi_fsub>
 800d674:	f1b8 0f00 	cmp.w	r8, #0
 800d678:	4604      	mov	r4, r0
 800d67a:	f6bf af36 	bge.w	800d4ea <atanf+0x2a>
 800d67e:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800d682:	e72c      	b.n	800d4de <atanf+0x1e>
 800d684:	4c13      	ldr	r4, [pc, #76]	; (800d6d4 <atanf+0x214>)
 800d686:	e730      	b.n	800d4ea <atanf+0x2a>
 800d688:	bfc90fdb 	.word	0xbfc90fdb
 800d68c:	3edfffff 	.word	0x3edfffff
 800d690:	7149f2ca 	.word	0x7149f2ca
 800d694:	3f97ffff 	.word	0x3f97ffff
 800d698:	3c8569d7 	.word	0x3c8569d7
 800d69c:	3d4bda59 	.word	0x3d4bda59
 800d6a0:	3d886b35 	.word	0x3d886b35
 800d6a4:	3dba2e6e 	.word	0x3dba2e6e
 800d6a8:	3e124925 	.word	0x3e124925
 800d6ac:	3eaaaaab 	.word	0x3eaaaaab
 800d6b0:	bd15a221 	.word	0xbd15a221
 800d6b4:	3d6ef16b 	.word	0x3d6ef16b
 800d6b8:	3d9d8795 	.word	0x3d9d8795
 800d6bc:	3de38e38 	.word	0x3de38e38
 800d6c0:	3e4ccccd 	.word	0x3e4ccccd
 800d6c4:	401bffff 	.word	0x401bffff
 800d6c8:	bf800000 	.word	0xbf800000
 800d6cc:	08013040 	.word	0x08013040
 800d6d0:	08013030 	.word	0x08013030
 800d6d4:	3fc90fdb 	.word	0x3fc90fdb

0800d6d8 <cosf>:
 800d6d8:	b507      	push	{r0, r1, r2, lr}
 800d6da:	4a18      	ldr	r2, [pc, #96]	; (800d73c <cosf+0x64>)
 800d6dc:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 800d6e0:	4293      	cmp	r3, r2
 800d6e2:	4601      	mov	r1, r0
 800d6e4:	dc03      	bgt.n	800d6ee <cosf+0x16>
 800d6e6:	2100      	movs	r1, #0
 800d6e8:	f001 fbd8 	bl	800ee9c <__kernel_cosf>
 800d6ec:	e004      	b.n	800d6f8 <cosf+0x20>
 800d6ee:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800d6f2:	db04      	blt.n	800d6fe <cosf+0x26>
 800d6f4:	f7f3 fa58 	bl	8000ba8 <__aeabi_fsub>
 800d6f8:	b003      	add	sp, #12
 800d6fa:	f85d fb04 	ldr.w	pc, [sp], #4
 800d6fe:	4669      	mov	r1, sp
 800d700:	f000 fd5c 	bl	800e1bc <__ieee754_rem_pio2f>
 800d704:	f000 0203 	and.w	r2, r0, #3
 800d708:	2a01      	cmp	r2, #1
 800d70a:	d005      	beq.n	800d718 <cosf+0x40>
 800d70c:	2a02      	cmp	r2, #2
 800d70e:	d00a      	beq.n	800d726 <cosf+0x4e>
 800d710:	b972      	cbnz	r2, 800d730 <cosf+0x58>
 800d712:	9901      	ldr	r1, [sp, #4]
 800d714:	9800      	ldr	r0, [sp, #0]
 800d716:	e7e7      	b.n	800d6e8 <cosf+0x10>
 800d718:	9901      	ldr	r1, [sp, #4]
 800d71a:	9800      	ldr	r0, [sp, #0]
 800d71c:	f001 fef4 	bl	800f508 <__kernel_sinf>
 800d720:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800d724:	e7e8      	b.n	800d6f8 <cosf+0x20>
 800d726:	9901      	ldr	r1, [sp, #4]
 800d728:	9800      	ldr	r0, [sp, #0]
 800d72a:	f001 fbb7 	bl	800ee9c <__kernel_cosf>
 800d72e:	e7f7      	b.n	800d720 <cosf+0x48>
 800d730:	2201      	movs	r2, #1
 800d732:	9901      	ldr	r1, [sp, #4]
 800d734:	9800      	ldr	r0, [sp, #0]
 800d736:	f001 fee7 	bl	800f508 <__kernel_sinf>
 800d73a:	e7dd      	b.n	800d6f8 <cosf+0x20>
 800d73c:	3f490fd8 	.word	0x3f490fd8

0800d740 <fabsf>:
 800d740:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800d744:	4770      	bx	lr
	...

0800d748 <sinf>:
 800d748:	b507      	push	{r0, r1, r2, lr}
 800d74a:	4a19      	ldr	r2, [pc, #100]	; (800d7b0 <sinf+0x68>)
 800d74c:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 800d750:	4293      	cmp	r3, r2
 800d752:	4601      	mov	r1, r0
 800d754:	dc04      	bgt.n	800d760 <sinf+0x18>
 800d756:	2200      	movs	r2, #0
 800d758:	2100      	movs	r1, #0
 800d75a:	f001 fed5 	bl	800f508 <__kernel_sinf>
 800d75e:	e004      	b.n	800d76a <sinf+0x22>
 800d760:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800d764:	db04      	blt.n	800d770 <sinf+0x28>
 800d766:	f7f3 fa1f 	bl	8000ba8 <__aeabi_fsub>
 800d76a:	b003      	add	sp, #12
 800d76c:	f85d fb04 	ldr.w	pc, [sp], #4
 800d770:	4669      	mov	r1, sp
 800d772:	f000 fd23 	bl	800e1bc <__ieee754_rem_pio2f>
 800d776:	f000 0003 	and.w	r0, r0, #3
 800d77a:	2801      	cmp	r0, #1
 800d77c:	d006      	beq.n	800d78c <sinf+0x44>
 800d77e:	2802      	cmp	r0, #2
 800d780:	d009      	beq.n	800d796 <sinf+0x4e>
 800d782:	b980      	cbnz	r0, 800d7a6 <sinf+0x5e>
 800d784:	2201      	movs	r2, #1
 800d786:	9901      	ldr	r1, [sp, #4]
 800d788:	9800      	ldr	r0, [sp, #0]
 800d78a:	e7e6      	b.n	800d75a <sinf+0x12>
 800d78c:	9901      	ldr	r1, [sp, #4]
 800d78e:	9800      	ldr	r0, [sp, #0]
 800d790:	f001 fb84 	bl	800ee9c <__kernel_cosf>
 800d794:	e7e9      	b.n	800d76a <sinf+0x22>
 800d796:	2201      	movs	r2, #1
 800d798:	9901      	ldr	r1, [sp, #4]
 800d79a:	9800      	ldr	r0, [sp, #0]
 800d79c:	f001 feb4 	bl	800f508 <__kernel_sinf>
 800d7a0:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800d7a4:	e7e1      	b.n	800d76a <sinf+0x22>
 800d7a6:	9901      	ldr	r1, [sp, #4]
 800d7a8:	9800      	ldr	r0, [sp, #0]
 800d7aa:	f001 fb77 	bl	800ee9c <__kernel_cosf>
 800d7ae:	e7f7      	b.n	800d7a0 <sinf+0x58>
 800d7b0:	3f490fd8 	.word	0x3f490fd8

0800d7b4 <acosf>:
 800d7b4:	b538      	push	{r3, r4, r5, lr}
 800d7b6:	4604      	mov	r4, r0
 800d7b8:	f000 fa5a 	bl	800dc70 <__ieee754_acosf>
 800d7bc:	4b0e      	ldr	r3, [pc, #56]	; (800d7f8 <acosf+0x44>)
 800d7be:	4605      	mov	r5, r0
 800d7c0:	f993 3000 	ldrsb.w	r3, [r3]
 800d7c4:	3301      	adds	r3, #1
 800d7c6:	d015      	beq.n	800d7f4 <acosf+0x40>
 800d7c8:	4621      	mov	r1, r4
 800d7ca:	4620      	mov	r0, r4
 800d7cc:	f7f3 fcbc 	bl	8001148 <__aeabi_fcmpun>
 800d7d0:	b980      	cbnz	r0, 800d7f4 <acosf+0x40>
 800d7d2:	4620      	mov	r0, r4
 800d7d4:	f7ff ffb4 	bl	800d740 <fabsf>
 800d7d8:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800d7dc:	f7f3 fcaa 	bl	8001134 <__aeabi_fcmpgt>
 800d7e0:	b140      	cbz	r0, 800d7f4 <acosf+0x40>
 800d7e2:	f002 f8a5 	bl	800f930 <__errno>
 800d7e6:	2321      	movs	r3, #33	; 0x21
 800d7e8:	6003      	str	r3, [r0, #0]
 800d7ea:	4804      	ldr	r0, [pc, #16]	; (800d7fc <acosf+0x48>)
 800d7ec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d7f0:	f002 b84e 	b.w	800f890 <nanf>
 800d7f4:	4628      	mov	r0, r5
 800d7f6:	bd38      	pop	{r3, r4, r5, pc}
 800d7f8:	200001a6 	.word	0x200001a6
 800d7fc:	08013870 	.word	0x08013870

0800d800 <asinf>:
 800d800:	b538      	push	{r3, r4, r5, lr}
 800d802:	4604      	mov	r4, r0
 800d804:	f000 fb96 	bl	800df34 <__ieee754_asinf>
 800d808:	4b0e      	ldr	r3, [pc, #56]	; (800d844 <asinf+0x44>)
 800d80a:	4605      	mov	r5, r0
 800d80c:	f993 3000 	ldrsb.w	r3, [r3]
 800d810:	3301      	adds	r3, #1
 800d812:	d015      	beq.n	800d840 <asinf+0x40>
 800d814:	4621      	mov	r1, r4
 800d816:	4620      	mov	r0, r4
 800d818:	f7f3 fc96 	bl	8001148 <__aeabi_fcmpun>
 800d81c:	b980      	cbnz	r0, 800d840 <asinf+0x40>
 800d81e:	4620      	mov	r0, r4
 800d820:	f7ff ff8e 	bl	800d740 <fabsf>
 800d824:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800d828:	f7f3 fc84 	bl	8001134 <__aeabi_fcmpgt>
 800d82c:	b140      	cbz	r0, 800d840 <asinf+0x40>
 800d82e:	f002 f87f 	bl	800f930 <__errno>
 800d832:	2321      	movs	r3, #33	; 0x21
 800d834:	6003      	str	r3, [r0, #0]
 800d836:	4804      	ldr	r0, [pc, #16]	; (800d848 <asinf+0x48>)
 800d838:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d83c:	f002 b828 	b.w	800f890 <nanf>
 800d840:	4628      	mov	r0, r5
 800d842:	bd38      	pop	{r3, r4, r5, pc}
 800d844:	200001a6 	.word	0x200001a6
 800d848:	08013870 	.word	0x08013870

0800d84c <sqrtf>:
 800d84c:	b538      	push	{r3, r4, r5, lr}
 800d84e:	4605      	mov	r5, r0
 800d850:	f000 fe12 	bl	800e478 <__ieee754_sqrtf>
 800d854:	4b0d      	ldr	r3, [pc, #52]	; (800d88c <sqrtf+0x40>)
 800d856:	4604      	mov	r4, r0
 800d858:	f993 3000 	ldrsb.w	r3, [r3]
 800d85c:	3301      	adds	r3, #1
 800d85e:	d012      	beq.n	800d886 <sqrtf+0x3a>
 800d860:	4629      	mov	r1, r5
 800d862:	4628      	mov	r0, r5
 800d864:	f7f3 fc70 	bl	8001148 <__aeabi_fcmpun>
 800d868:	b968      	cbnz	r0, 800d886 <sqrtf+0x3a>
 800d86a:	2100      	movs	r1, #0
 800d86c:	4628      	mov	r0, r5
 800d86e:	f7f3 fc43 	bl	80010f8 <__aeabi_fcmplt>
 800d872:	b140      	cbz	r0, 800d886 <sqrtf+0x3a>
 800d874:	f002 f85c 	bl	800f930 <__errno>
 800d878:	2321      	movs	r3, #33	; 0x21
 800d87a:	2100      	movs	r1, #0
 800d87c:	6003      	str	r3, [r0, #0]
 800d87e:	4608      	mov	r0, r1
 800d880:	f7f3 fb50 	bl	8000f24 <__aeabi_fdiv>
 800d884:	4604      	mov	r4, r0
 800d886:	4620      	mov	r0, r4
 800d888:	bd38      	pop	{r3, r4, r5, pc}
 800d88a:	bf00      	nop
 800d88c:	200001a6 	.word	0x200001a6

0800d890 <__ieee754_rem_pio2>:
 800d890:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d894:	4614      	mov	r4, r2
 800d896:	4ac4      	ldr	r2, [pc, #784]	; (800dba8 <__ieee754_rem_pio2+0x318>)
 800d898:	f021 4a00 	bic.w	sl, r1, #2147483648	; 0x80000000
 800d89c:	b08d      	sub	sp, #52	; 0x34
 800d89e:	4592      	cmp	sl, r2
 800d8a0:	9104      	str	r1, [sp, #16]
 800d8a2:	dc07      	bgt.n	800d8b4 <__ieee754_rem_pio2+0x24>
 800d8a4:	2200      	movs	r2, #0
 800d8a6:	2300      	movs	r3, #0
 800d8a8:	e9c4 0100 	strd	r0, r1, [r4]
 800d8ac:	e9c4 2302 	strd	r2, r3, [r4, #8]
 800d8b0:	2500      	movs	r5, #0
 800d8b2:	e024      	b.n	800d8fe <__ieee754_rem_pio2+0x6e>
 800d8b4:	4abd      	ldr	r2, [pc, #756]	; (800dbac <__ieee754_rem_pio2+0x31c>)
 800d8b6:	4592      	cmp	sl, r2
 800d8b8:	dc72      	bgt.n	800d9a0 <__ieee754_rem_pio2+0x110>
 800d8ba:	9b04      	ldr	r3, [sp, #16]
 800d8bc:	4dbc      	ldr	r5, [pc, #752]	; (800dbb0 <__ieee754_rem_pio2+0x320>)
 800d8be:	2b00      	cmp	r3, #0
 800d8c0:	a3ab      	add	r3, pc, #684	; (adr r3, 800db70 <__ieee754_rem_pio2+0x2e0>)
 800d8c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d8c6:	dd36      	ble.n	800d936 <__ieee754_rem_pio2+0xa6>
 800d8c8:	f7f2 fc8a 	bl	80001e0 <__aeabi_dsub>
 800d8cc:	45aa      	cmp	sl, r5
 800d8ce:	4606      	mov	r6, r0
 800d8d0:	460f      	mov	r7, r1
 800d8d2:	d018      	beq.n	800d906 <__ieee754_rem_pio2+0x76>
 800d8d4:	a3a8      	add	r3, pc, #672	; (adr r3, 800db78 <__ieee754_rem_pio2+0x2e8>)
 800d8d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d8da:	f7f2 fc81 	bl	80001e0 <__aeabi_dsub>
 800d8de:	4602      	mov	r2, r0
 800d8e0:	460b      	mov	r3, r1
 800d8e2:	4630      	mov	r0, r6
 800d8e4:	e9c4 2300 	strd	r2, r3, [r4]
 800d8e8:	4639      	mov	r1, r7
 800d8ea:	f7f2 fc79 	bl	80001e0 <__aeabi_dsub>
 800d8ee:	a3a2      	add	r3, pc, #648	; (adr r3, 800db78 <__ieee754_rem_pio2+0x2e8>)
 800d8f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d8f4:	f7f2 fc74 	bl	80001e0 <__aeabi_dsub>
 800d8f8:	2501      	movs	r5, #1
 800d8fa:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800d8fe:	4628      	mov	r0, r5
 800d900:	b00d      	add	sp, #52	; 0x34
 800d902:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d906:	a39e      	add	r3, pc, #632	; (adr r3, 800db80 <__ieee754_rem_pio2+0x2f0>)
 800d908:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d90c:	f7f2 fc68 	bl	80001e0 <__aeabi_dsub>
 800d910:	a39d      	add	r3, pc, #628	; (adr r3, 800db88 <__ieee754_rem_pio2+0x2f8>)
 800d912:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d916:	4606      	mov	r6, r0
 800d918:	460f      	mov	r7, r1
 800d91a:	f7f2 fc61 	bl	80001e0 <__aeabi_dsub>
 800d91e:	4602      	mov	r2, r0
 800d920:	460b      	mov	r3, r1
 800d922:	4630      	mov	r0, r6
 800d924:	e9c4 2300 	strd	r2, r3, [r4]
 800d928:	4639      	mov	r1, r7
 800d92a:	f7f2 fc59 	bl	80001e0 <__aeabi_dsub>
 800d92e:	a396      	add	r3, pc, #600	; (adr r3, 800db88 <__ieee754_rem_pio2+0x2f8>)
 800d930:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d934:	e7de      	b.n	800d8f4 <__ieee754_rem_pio2+0x64>
 800d936:	f7f2 fc55 	bl	80001e4 <__adddf3>
 800d93a:	45aa      	cmp	sl, r5
 800d93c:	4606      	mov	r6, r0
 800d93e:	460f      	mov	r7, r1
 800d940:	d016      	beq.n	800d970 <__ieee754_rem_pio2+0xe0>
 800d942:	a38d      	add	r3, pc, #564	; (adr r3, 800db78 <__ieee754_rem_pio2+0x2e8>)
 800d944:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d948:	f7f2 fc4c 	bl	80001e4 <__adddf3>
 800d94c:	4602      	mov	r2, r0
 800d94e:	460b      	mov	r3, r1
 800d950:	4630      	mov	r0, r6
 800d952:	e9c4 2300 	strd	r2, r3, [r4]
 800d956:	4639      	mov	r1, r7
 800d958:	f7f2 fc42 	bl	80001e0 <__aeabi_dsub>
 800d95c:	a386      	add	r3, pc, #536	; (adr r3, 800db78 <__ieee754_rem_pio2+0x2e8>)
 800d95e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d962:	f7f2 fc3f 	bl	80001e4 <__adddf3>
 800d966:	f04f 35ff 	mov.w	r5, #4294967295
 800d96a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800d96e:	e7c6      	b.n	800d8fe <__ieee754_rem_pio2+0x6e>
 800d970:	a383      	add	r3, pc, #524	; (adr r3, 800db80 <__ieee754_rem_pio2+0x2f0>)
 800d972:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d976:	f7f2 fc35 	bl	80001e4 <__adddf3>
 800d97a:	a383      	add	r3, pc, #524	; (adr r3, 800db88 <__ieee754_rem_pio2+0x2f8>)
 800d97c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d980:	4606      	mov	r6, r0
 800d982:	460f      	mov	r7, r1
 800d984:	f7f2 fc2e 	bl	80001e4 <__adddf3>
 800d988:	4602      	mov	r2, r0
 800d98a:	460b      	mov	r3, r1
 800d98c:	4630      	mov	r0, r6
 800d98e:	e9c4 2300 	strd	r2, r3, [r4]
 800d992:	4639      	mov	r1, r7
 800d994:	f7f2 fc24 	bl	80001e0 <__aeabi_dsub>
 800d998:	a37b      	add	r3, pc, #492	; (adr r3, 800db88 <__ieee754_rem_pio2+0x2f8>)
 800d99a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d99e:	e7e0      	b.n	800d962 <__ieee754_rem_pio2+0xd2>
 800d9a0:	4a84      	ldr	r2, [pc, #528]	; (800dbb4 <__ieee754_rem_pio2+0x324>)
 800d9a2:	4592      	cmp	sl, r2
 800d9a4:	f300 80d5 	bgt.w	800db52 <__ieee754_rem_pio2+0x2c2>
 800d9a8:	f001 fe24 	bl	800f5f4 <fabs>
 800d9ac:	a378      	add	r3, pc, #480	; (adr r3, 800db90 <__ieee754_rem_pio2+0x300>)
 800d9ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d9b2:	4606      	mov	r6, r0
 800d9b4:	460f      	mov	r7, r1
 800d9b6:	f7f2 fdcb 	bl	8000550 <__aeabi_dmul>
 800d9ba:	2200      	movs	r2, #0
 800d9bc:	4b7e      	ldr	r3, [pc, #504]	; (800dbb8 <__ieee754_rem_pio2+0x328>)
 800d9be:	f7f2 fc11 	bl	80001e4 <__adddf3>
 800d9c2:	f7f3 f875 	bl	8000ab0 <__aeabi_d2iz>
 800d9c6:	4605      	mov	r5, r0
 800d9c8:	f7f2 fd58 	bl	800047c <__aeabi_i2d>
 800d9cc:	4602      	mov	r2, r0
 800d9ce:	460b      	mov	r3, r1
 800d9d0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800d9d4:	a366      	add	r3, pc, #408	; (adr r3, 800db70 <__ieee754_rem_pio2+0x2e0>)
 800d9d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d9da:	f7f2 fdb9 	bl	8000550 <__aeabi_dmul>
 800d9de:	4602      	mov	r2, r0
 800d9e0:	460b      	mov	r3, r1
 800d9e2:	4630      	mov	r0, r6
 800d9e4:	4639      	mov	r1, r7
 800d9e6:	f7f2 fbfb 	bl	80001e0 <__aeabi_dsub>
 800d9ea:	a363      	add	r3, pc, #396	; (adr r3, 800db78 <__ieee754_rem_pio2+0x2e8>)
 800d9ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d9f0:	4680      	mov	r8, r0
 800d9f2:	4689      	mov	r9, r1
 800d9f4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d9f8:	f7f2 fdaa 	bl	8000550 <__aeabi_dmul>
 800d9fc:	2d1f      	cmp	r5, #31
 800d9fe:	4606      	mov	r6, r0
 800da00:	460f      	mov	r7, r1
 800da02:	dc0e      	bgt.n	800da22 <__ieee754_rem_pio2+0x192>
 800da04:	4b6d      	ldr	r3, [pc, #436]	; (800dbbc <__ieee754_rem_pio2+0x32c>)
 800da06:	1e6a      	subs	r2, r5, #1
 800da08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800da0c:	4553      	cmp	r3, sl
 800da0e:	d008      	beq.n	800da22 <__ieee754_rem_pio2+0x192>
 800da10:	4632      	mov	r2, r6
 800da12:	463b      	mov	r3, r7
 800da14:	4640      	mov	r0, r8
 800da16:	4649      	mov	r1, r9
 800da18:	f7f2 fbe2 	bl	80001e0 <__aeabi_dsub>
 800da1c:	e9c4 0100 	strd	r0, r1, [r4]
 800da20:	e013      	b.n	800da4a <__ieee754_rem_pio2+0x1ba>
 800da22:	463b      	mov	r3, r7
 800da24:	4632      	mov	r2, r6
 800da26:	4640      	mov	r0, r8
 800da28:	4649      	mov	r1, r9
 800da2a:	f7f2 fbd9 	bl	80001e0 <__aeabi_dsub>
 800da2e:	ea4f 532a 	mov.w	r3, sl, asr #20
 800da32:	9305      	str	r3, [sp, #20]
 800da34:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800da38:	ebc3 5a1a 	rsb	sl, r3, sl, lsr #20
 800da3c:	f1ba 0f10 	cmp.w	sl, #16
 800da40:	dc1f      	bgt.n	800da82 <__ieee754_rem_pio2+0x1f2>
 800da42:	4602      	mov	r2, r0
 800da44:	460b      	mov	r3, r1
 800da46:	e9c4 2300 	strd	r2, r3, [r4]
 800da4a:	e9d4 2a00 	ldrd	r2, sl, [r4]
 800da4e:	4640      	mov	r0, r8
 800da50:	4653      	mov	r3, sl
 800da52:	4649      	mov	r1, r9
 800da54:	f7f2 fbc4 	bl	80001e0 <__aeabi_dsub>
 800da58:	4632      	mov	r2, r6
 800da5a:	463b      	mov	r3, r7
 800da5c:	f7f2 fbc0 	bl	80001e0 <__aeabi_dsub>
 800da60:	460b      	mov	r3, r1
 800da62:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800da66:	9904      	ldr	r1, [sp, #16]
 800da68:	4602      	mov	r2, r0
 800da6a:	2900      	cmp	r1, #0
 800da6c:	f6bf af47 	bge.w	800d8fe <__ieee754_rem_pio2+0x6e>
 800da70:	f10a 4100 	add.w	r1, sl, #2147483648	; 0x80000000
 800da74:	e9c4 1201 	strd	r1, r2, [r4, #4]
 800da78:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800da7c:	60e3      	str	r3, [r4, #12]
 800da7e:	426d      	negs	r5, r5
 800da80:	e73d      	b.n	800d8fe <__ieee754_rem_pio2+0x6e>
 800da82:	a33f      	add	r3, pc, #252	; (adr r3, 800db80 <__ieee754_rem_pio2+0x2f0>)
 800da84:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da88:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800da8c:	f7f2 fd60 	bl	8000550 <__aeabi_dmul>
 800da90:	4606      	mov	r6, r0
 800da92:	460f      	mov	r7, r1
 800da94:	4602      	mov	r2, r0
 800da96:	460b      	mov	r3, r1
 800da98:	4640      	mov	r0, r8
 800da9a:	4649      	mov	r1, r9
 800da9c:	f7f2 fba0 	bl	80001e0 <__aeabi_dsub>
 800daa0:	4602      	mov	r2, r0
 800daa2:	460b      	mov	r3, r1
 800daa4:	4682      	mov	sl, r0
 800daa6:	468b      	mov	fp, r1
 800daa8:	4640      	mov	r0, r8
 800daaa:	4649      	mov	r1, r9
 800daac:	f7f2 fb98 	bl	80001e0 <__aeabi_dsub>
 800dab0:	4632      	mov	r2, r6
 800dab2:	463b      	mov	r3, r7
 800dab4:	f7f2 fb94 	bl	80001e0 <__aeabi_dsub>
 800dab8:	a333      	add	r3, pc, #204	; (adr r3, 800db88 <__ieee754_rem_pio2+0x2f8>)
 800daba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dabe:	4606      	mov	r6, r0
 800dac0:	460f      	mov	r7, r1
 800dac2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800dac6:	f7f2 fd43 	bl	8000550 <__aeabi_dmul>
 800daca:	4632      	mov	r2, r6
 800dacc:	463b      	mov	r3, r7
 800dace:	f7f2 fb87 	bl	80001e0 <__aeabi_dsub>
 800dad2:	4602      	mov	r2, r0
 800dad4:	460b      	mov	r3, r1
 800dad6:	4606      	mov	r6, r0
 800dad8:	460f      	mov	r7, r1
 800dada:	4650      	mov	r0, sl
 800dadc:	4659      	mov	r1, fp
 800dade:	f7f2 fb7f 	bl	80001e0 <__aeabi_dsub>
 800dae2:	9a05      	ldr	r2, [sp, #20]
 800dae4:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800dae8:	1ad3      	subs	r3, r2, r3
 800daea:	2b31      	cmp	r3, #49	; 0x31
 800daec:	dc06      	bgt.n	800dafc <__ieee754_rem_pio2+0x26c>
 800daee:	4602      	mov	r2, r0
 800daf0:	460b      	mov	r3, r1
 800daf2:	46d0      	mov	r8, sl
 800daf4:	46d9      	mov	r9, fp
 800daf6:	e9c4 2300 	strd	r2, r3, [r4]
 800dafa:	e7a6      	b.n	800da4a <__ieee754_rem_pio2+0x1ba>
 800dafc:	a326      	add	r3, pc, #152	; (adr r3, 800db98 <__ieee754_rem_pio2+0x308>)
 800dafe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db02:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800db06:	f7f2 fd23 	bl	8000550 <__aeabi_dmul>
 800db0a:	4606      	mov	r6, r0
 800db0c:	460f      	mov	r7, r1
 800db0e:	4602      	mov	r2, r0
 800db10:	460b      	mov	r3, r1
 800db12:	4650      	mov	r0, sl
 800db14:	4659      	mov	r1, fp
 800db16:	f7f2 fb63 	bl	80001e0 <__aeabi_dsub>
 800db1a:	4602      	mov	r2, r0
 800db1c:	460b      	mov	r3, r1
 800db1e:	4680      	mov	r8, r0
 800db20:	4689      	mov	r9, r1
 800db22:	4650      	mov	r0, sl
 800db24:	4659      	mov	r1, fp
 800db26:	f7f2 fb5b 	bl	80001e0 <__aeabi_dsub>
 800db2a:	4632      	mov	r2, r6
 800db2c:	463b      	mov	r3, r7
 800db2e:	f7f2 fb57 	bl	80001e0 <__aeabi_dsub>
 800db32:	a31b      	add	r3, pc, #108	; (adr r3, 800dba0 <__ieee754_rem_pio2+0x310>)
 800db34:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db38:	4606      	mov	r6, r0
 800db3a:	460f      	mov	r7, r1
 800db3c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800db40:	f7f2 fd06 	bl	8000550 <__aeabi_dmul>
 800db44:	4632      	mov	r2, r6
 800db46:	463b      	mov	r3, r7
 800db48:	f7f2 fb4a 	bl	80001e0 <__aeabi_dsub>
 800db4c:	4606      	mov	r6, r0
 800db4e:	460f      	mov	r7, r1
 800db50:	e75e      	b.n	800da10 <__ieee754_rem_pio2+0x180>
 800db52:	4a1b      	ldr	r2, [pc, #108]	; (800dbc0 <__ieee754_rem_pio2+0x330>)
 800db54:	4592      	cmp	sl, r2
 800db56:	dd35      	ble.n	800dbc4 <__ieee754_rem_pio2+0x334>
 800db58:	4602      	mov	r2, r0
 800db5a:	460b      	mov	r3, r1
 800db5c:	f7f2 fb40 	bl	80001e0 <__aeabi_dsub>
 800db60:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800db64:	e9c4 0100 	strd	r0, r1, [r4]
 800db68:	e6a2      	b.n	800d8b0 <__ieee754_rem_pio2+0x20>
 800db6a:	bf00      	nop
 800db6c:	f3af 8000 	nop.w
 800db70:	54400000 	.word	0x54400000
 800db74:	3ff921fb 	.word	0x3ff921fb
 800db78:	1a626331 	.word	0x1a626331
 800db7c:	3dd0b461 	.word	0x3dd0b461
 800db80:	1a600000 	.word	0x1a600000
 800db84:	3dd0b461 	.word	0x3dd0b461
 800db88:	2e037073 	.word	0x2e037073
 800db8c:	3ba3198a 	.word	0x3ba3198a
 800db90:	6dc9c883 	.word	0x6dc9c883
 800db94:	3fe45f30 	.word	0x3fe45f30
 800db98:	2e000000 	.word	0x2e000000
 800db9c:	3ba3198a 	.word	0x3ba3198a
 800dba0:	252049c1 	.word	0x252049c1
 800dba4:	397b839a 	.word	0x397b839a
 800dba8:	3fe921fb 	.word	0x3fe921fb
 800dbac:	4002d97b 	.word	0x4002d97b
 800dbb0:	3ff921fb 	.word	0x3ff921fb
 800dbb4:	413921fb 	.word	0x413921fb
 800dbb8:	3fe00000 	.word	0x3fe00000
 800dbbc:	08013050 	.word	0x08013050
 800dbc0:	7fefffff 	.word	0x7fefffff
 800dbc4:	ea4f 552a 	mov.w	r5, sl, asr #20
 800dbc8:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 800dbcc:	ebaa 5105 	sub.w	r1, sl, r5, lsl #20
 800dbd0:	460f      	mov	r7, r1
 800dbd2:	4606      	mov	r6, r0
 800dbd4:	f7f2 ff6c 	bl	8000ab0 <__aeabi_d2iz>
 800dbd8:	f7f2 fc50 	bl	800047c <__aeabi_i2d>
 800dbdc:	4602      	mov	r2, r0
 800dbde:	460b      	mov	r3, r1
 800dbe0:	4630      	mov	r0, r6
 800dbe2:	4639      	mov	r1, r7
 800dbe4:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800dbe8:	f7f2 fafa 	bl	80001e0 <__aeabi_dsub>
 800dbec:	2200      	movs	r2, #0
 800dbee:	4b1e      	ldr	r3, [pc, #120]	; (800dc68 <__ieee754_rem_pio2+0x3d8>)
 800dbf0:	f7f2 fcae 	bl	8000550 <__aeabi_dmul>
 800dbf4:	460f      	mov	r7, r1
 800dbf6:	4606      	mov	r6, r0
 800dbf8:	f7f2 ff5a 	bl	8000ab0 <__aeabi_d2iz>
 800dbfc:	f7f2 fc3e 	bl	800047c <__aeabi_i2d>
 800dc00:	4602      	mov	r2, r0
 800dc02:	460b      	mov	r3, r1
 800dc04:	4630      	mov	r0, r6
 800dc06:	4639      	mov	r1, r7
 800dc08:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800dc0c:	f7f2 fae8 	bl	80001e0 <__aeabi_dsub>
 800dc10:	2200      	movs	r2, #0
 800dc12:	4b15      	ldr	r3, [pc, #84]	; (800dc68 <__ieee754_rem_pio2+0x3d8>)
 800dc14:	f7f2 fc9c 	bl	8000550 <__aeabi_dmul>
 800dc18:	f04f 0803 	mov.w	r8, #3
 800dc1c:	2600      	movs	r6, #0
 800dc1e:	2700      	movs	r7, #0
 800dc20:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800dc24:	f10d 0928 	add.w	r9, sp, #40	; 0x28
 800dc28:	4632      	mov	r2, r6
 800dc2a:	e879 0102 	ldrd	r0, r1, [r9], #-8
 800dc2e:	463b      	mov	r3, r7
 800dc30:	46c2      	mov	sl, r8
 800dc32:	f108 38ff 	add.w	r8, r8, #4294967295
 800dc36:	f7f2 fef3 	bl	8000a20 <__aeabi_dcmpeq>
 800dc3a:	2800      	cmp	r0, #0
 800dc3c:	d1f4      	bne.n	800dc28 <__ieee754_rem_pio2+0x398>
 800dc3e:	4b0b      	ldr	r3, [pc, #44]	; (800dc6c <__ieee754_rem_pio2+0x3dc>)
 800dc40:	462a      	mov	r2, r5
 800dc42:	9301      	str	r3, [sp, #4]
 800dc44:	2302      	movs	r3, #2
 800dc46:	4621      	mov	r1, r4
 800dc48:	9300      	str	r3, [sp, #0]
 800dc4a:	a806      	add	r0, sp, #24
 800dc4c:	4653      	mov	r3, sl
 800dc4e:	f000 fd25 	bl	800e69c <__kernel_rem_pio2>
 800dc52:	9b04      	ldr	r3, [sp, #16]
 800dc54:	4605      	mov	r5, r0
 800dc56:	2b00      	cmp	r3, #0
 800dc58:	f6bf ae51 	bge.w	800d8fe <__ieee754_rem_pio2+0x6e>
 800dc5c:	6863      	ldr	r3, [r4, #4]
 800dc5e:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800dc62:	6063      	str	r3, [r4, #4]
 800dc64:	68e3      	ldr	r3, [r4, #12]
 800dc66:	e707      	b.n	800da78 <__ieee754_rem_pio2+0x1e8>
 800dc68:	41700000 	.word	0x41700000
 800dc6c:	080130d0 	.word	0x080130d0

0800dc70 <__ieee754_acosf>:
 800dc70:	f020 4200 	bic.w	r2, r0, #2147483648	; 0x80000000
 800dc74:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 800dc78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dc7a:	4605      	mov	r5, r0
 800dc7c:	d104      	bne.n	800dc88 <__ieee754_acosf+0x18>
 800dc7e:	2800      	cmp	r0, #0
 800dc80:	f300 8135 	bgt.w	800deee <__ieee754_acosf+0x27e>
 800dc84:	489c      	ldr	r0, [pc, #624]	; (800def8 <__ieee754_acosf+0x288>)
 800dc86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dc88:	dd06      	ble.n	800dc98 <__ieee754_acosf+0x28>
 800dc8a:	4601      	mov	r1, r0
 800dc8c:	f7f2 ff8c 	bl	8000ba8 <__aeabi_fsub>
 800dc90:	4601      	mov	r1, r0
 800dc92:	f7f3 f947 	bl	8000f24 <__aeabi_fdiv>
 800dc96:	e7f6      	b.n	800dc86 <__ieee754_acosf+0x16>
 800dc98:	f1b2 5f7c 	cmp.w	r2, #1056964608	; 0x3f000000
 800dc9c:	da57      	bge.n	800dd4e <__ieee754_acosf+0xde>
 800dc9e:	f1b2 5f0c 	cmp.w	r2, #587202560	; 0x23000000
 800dca2:	f340 8126 	ble.w	800def2 <__ieee754_acosf+0x282>
 800dca6:	4601      	mov	r1, r0
 800dca8:	f7f3 f888 	bl	8000dbc <__aeabi_fmul>
 800dcac:	4604      	mov	r4, r0
 800dcae:	4993      	ldr	r1, [pc, #588]	; (800defc <__ieee754_acosf+0x28c>)
 800dcb0:	f7f3 f884 	bl	8000dbc <__aeabi_fmul>
 800dcb4:	4992      	ldr	r1, [pc, #584]	; (800df00 <__ieee754_acosf+0x290>)
 800dcb6:	f7f2 ff79 	bl	8000bac <__addsf3>
 800dcba:	4621      	mov	r1, r4
 800dcbc:	f7f3 f87e 	bl	8000dbc <__aeabi_fmul>
 800dcc0:	4990      	ldr	r1, [pc, #576]	; (800df04 <__ieee754_acosf+0x294>)
 800dcc2:	f7f2 ff71 	bl	8000ba8 <__aeabi_fsub>
 800dcc6:	4621      	mov	r1, r4
 800dcc8:	f7f3 f878 	bl	8000dbc <__aeabi_fmul>
 800dccc:	498e      	ldr	r1, [pc, #568]	; (800df08 <__ieee754_acosf+0x298>)
 800dcce:	f7f2 ff6d 	bl	8000bac <__addsf3>
 800dcd2:	4621      	mov	r1, r4
 800dcd4:	f7f3 f872 	bl	8000dbc <__aeabi_fmul>
 800dcd8:	498c      	ldr	r1, [pc, #560]	; (800df0c <__ieee754_acosf+0x29c>)
 800dcda:	f7f2 ff65 	bl	8000ba8 <__aeabi_fsub>
 800dcde:	4621      	mov	r1, r4
 800dce0:	f7f3 f86c 	bl	8000dbc <__aeabi_fmul>
 800dce4:	498a      	ldr	r1, [pc, #552]	; (800df10 <__ieee754_acosf+0x2a0>)
 800dce6:	f7f2 ff61 	bl	8000bac <__addsf3>
 800dcea:	4621      	mov	r1, r4
 800dcec:	f7f3 f866 	bl	8000dbc <__aeabi_fmul>
 800dcf0:	4988      	ldr	r1, [pc, #544]	; (800df14 <__ieee754_acosf+0x2a4>)
 800dcf2:	4606      	mov	r6, r0
 800dcf4:	4620      	mov	r0, r4
 800dcf6:	f7f3 f861 	bl	8000dbc <__aeabi_fmul>
 800dcfa:	4987      	ldr	r1, [pc, #540]	; (800df18 <__ieee754_acosf+0x2a8>)
 800dcfc:	f7f2 ff54 	bl	8000ba8 <__aeabi_fsub>
 800dd00:	4621      	mov	r1, r4
 800dd02:	f7f3 f85b 	bl	8000dbc <__aeabi_fmul>
 800dd06:	4985      	ldr	r1, [pc, #532]	; (800df1c <__ieee754_acosf+0x2ac>)
 800dd08:	f7f2 ff50 	bl	8000bac <__addsf3>
 800dd0c:	4621      	mov	r1, r4
 800dd0e:	f7f3 f855 	bl	8000dbc <__aeabi_fmul>
 800dd12:	4983      	ldr	r1, [pc, #524]	; (800df20 <__ieee754_acosf+0x2b0>)
 800dd14:	f7f2 ff48 	bl	8000ba8 <__aeabi_fsub>
 800dd18:	4621      	mov	r1, r4
 800dd1a:	f7f3 f84f 	bl	8000dbc <__aeabi_fmul>
 800dd1e:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800dd22:	f7f2 ff43 	bl	8000bac <__addsf3>
 800dd26:	4601      	mov	r1, r0
 800dd28:	4630      	mov	r0, r6
 800dd2a:	f7f3 f8fb 	bl	8000f24 <__aeabi_fdiv>
 800dd2e:	4629      	mov	r1, r5
 800dd30:	f7f3 f844 	bl	8000dbc <__aeabi_fmul>
 800dd34:	4601      	mov	r1, r0
 800dd36:	487b      	ldr	r0, [pc, #492]	; (800df24 <__ieee754_acosf+0x2b4>)
 800dd38:	f7f2 ff36 	bl	8000ba8 <__aeabi_fsub>
 800dd3c:	4601      	mov	r1, r0
 800dd3e:	4628      	mov	r0, r5
 800dd40:	f7f2 ff32 	bl	8000ba8 <__aeabi_fsub>
 800dd44:	4601      	mov	r1, r0
 800dd46:	4878      	ldr	r0, [pc, #480]	; (800df28 <__ieee754_acosf+0x2b8>)
 800dd48:	f7f2 ff2e 	bl	8000ba8 <__aeabi_fsub>
 800dd4c:	e79b      	b.n	800dc86 <__ieee754_acosf+0x16>
 800dd4e:	2800      	cmp	r0, #0
 800dd50:	da5b      	bge.n	800de0a <__ieee754_acosf+0x19a>
 800dd52:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800dd56:	f7f2 ff29 	bl	8000bac <__addsf3>
 800dd5a:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800dd5e:	f7f3 f82d 	bl	8000dbc <__aeabi_fmul>
 800dd62:	4604      	mov	r4, r0
 800dd64:	4965      	ldr	r1, [pc, #404]	; (800defc <__ieee754_acosf+0x28c>)
 800dd66:	f7f3 f829 	bl	8000dbc <__aeabi_fmul>
 800dd6a:	4965      	ldr	r1, [pc, #404]	; (800df00 <__ieee754_acosf+0x290>)
 800dd6c:	f7f2 ff1e 	bl	8000bac <__addsf3>
 800dd70:	4621      	mov	r1, r4
 800dd72:	f7f3 f823 	bl	8000dbc <__aeabi_fmul>
 800dd76:	4963      	ldr	r1, [pc, #396]	; (800df04 <__ieee754_acosf+0x294>)
 800dd78:	f7f2 ff16 	bl	8000ba8 <__aeabi_fsub>
 800dd7c:	4621      	mov	r1, r4
 800dd7e:	f7f3 f81d 	bl	8000dbc <__aeabi_fmul>
 800dd82:	4961      	ldr	r1, [pc, #388]	; (800df08 <__ieee754_acosf+0x298>)
 800dd84:	f7f2 ff12 	bl	8000bac <__addsf3>
 800dd88:	4621      	mov	r1, r4
 800dd8a:	f7f3 f817 	bl	8000dbc <__aeabi_fmul>
 800dd8e:	495f      	ldr	r1, [pc, #380]	; (800df0c <__ieee754_acosf+0x29c>)
 800dd90:	f7f2 ff0a 	bl	8000ba8 <__aeabi_fsub>
 800dd94:	4621      	mov	r1, r4
 800dd96:	f7f3 f811 	bl	8000dbc <__aeabi_fmul>
 800dd9a:	495d      	ldr	r1, [pc, #372]	; (800df10 <__ieee754_acosf+0x2a0>)
 800dd9c:	f7f2 ff06 	bl	8000bac <__addsf3>
 800dda0:	4621      	mov	r1, r4
 800dda2:	f7f3 f80b 	bl	8000dbc <__aeabi_fmul>
 800dda6:	4606      	mov	r6, r0
 800dda8:	4620      	mov	r0, r4
 800ddaa:	f000 fb65 	bl	800e478 <__ieee754_sqrtf>
 800ddae:	4959      	ldr	r1, [pc, #356]	; (800df14 <__ieee754_acosf+0x2a4>)
 800ddb0:	4605      	mov	r5, r0
 800ddb2:	4620      	mov	r0, r4
 800ddb4:	f7f3 f802 	bl	8000dbc <__aeabi_fmul>
 800ddb8:	4957      	ldr	r1, [pc, #348]	; (800df18 <__ieee754_acosf+0x2a8>)
 800ddba:	f7f2 fef5 	bl	8000ba8 <__aeabi_fsub>
 800ddbe:	4621      	mov	r1, r4
 800ddc0:	f7f2 fffc 	bl	8000dbc <__aeabi_fmul>
 800ddc4:	4955      	ldr	r1, [pc, #340]	; (800df1c <__ieee754_acosf+0x2ac>)
 800ddc6:	f7f2 fef1 	bl	8000bac <__addsf3>
 800ddca:	4621      	mov	r1, r4
 800ddcc:	f7f2 fff6 	bl	8000dbc <__aeabi_fmul>
 800ddd0:	4953      	ldr	r1, [pc, #332]	; (800df20 <__ieee754_acosf+0x2b0>)
 800ddd2:	f7f2 fee9 	bl	8000ba8 <__aeabi_fsub>
 800ddd6:	4621      	mov	r1, r4
 800ddd8:	f7f2 fff0 	bl	8000dbc <__aeabi_fmul>
 800dddc:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800dde0:	f7f2 fee4 	bl	8000bac <__addsf3>
 800dde4:	4601      	mov	r1, r0
 800dde6:	4630      	mov	r0, r6
 800dde8:	f7f3 f89c 	bl	8000f24 <__aeabi_fdiv>
 800ddec:	4629      	mov	r1, r5
 800ddee:	f7f2 ffe5 	bl	8000dbc <__aeabi_fmul>
 800ddf2:	494c      	ldr	r1, [pc, #304]	; (800df24 <__ieee754_acosf+0x2b4>)
 800ddf4:	f7f2 fed8 	bl	8000ba8 <__aeabi_fsub>
 800ddf8:	4629      	mov	r1, r5
 800ddfa:	f7f2 fed7 	bl	8000bac <__addsf3>
 800ddfe:	4601      	mov	r1, r0
 800de00:	f7f2 fed4 	bl	8000bac <__addsf3>
 800de04:	4601      	mov	r1, r0
 800de06:	4849      	ldr	r0, [pc, #292]	; (800df2c <__ieee754_acosf+0x2bc>)
 800de08:	e79e      	b.n	800dd48 <__ieee754_acosf+0xd8>
 800de0a:	4601      	mov	r1, r0
 800de0c:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800de10:	f7f2 feca 	bl	8000ba8 <__aeabi_fsub>
 800de14:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800de18:	f7f2 ffd0 	bl	8000dbc <__aeabi_fmul>
 800de1c:	4604      	mov	r4, r0
 800de1e:	f000 fb2b 	bl	800e478 <__ieee754_sqrtf>
 800de22:	4936      	ldr	r1, [pc, #216]	; (800defc <__ieee754_acosf+0x28c>)
 800de24:	4606      	mov	r6, r0
 800de26:	f420 657f 	bic.w	r5, r0, #4080	; 0xff0
 800de2a:	4620      	mov	r0, r4
 800de2c:	f7f2 ffc6 	bl	8000dbc <__aeabi_fmul>
 800de30:	4933      	ldr	r1, [pc, #204]	; (800df00 <__ieee754_acosf+0x290>)
 800de32:	f7f2 febb 	bl	8000bac <__addsf3>
 800de36:	4621      	mov	r1, r4
 800de38:	f7f2 ffc0 	bl	8000dbc <__aeabi_fmul>
 800de3c:	4931      	ldr	r1, [pc, #196]	; (800df04 <__ieee754_acosf+0x294>)
 800de3e:	f7f2 feb3 	bl	8000ba8 <__aeabi_fsub>
 800de42:	4621      	mov	r1, r4
 800de44:	f7f2 ffba 	bl	8000dbc <__aeabi_fmul>
 800de48:	492f      	ldr	r1, [pc, #188]	; (800df08 <__ieee754_acosf+0x298>)
 800de4a:	f7f2 feaf 	bl	8000bac <__addsf3>
 800de4e:	4621      	mov	r1, r4
 800de50:	f7f2 ffb4 	bl	8000dbc <__aeabi_fmul>
 800de54:	492d      	ldr	r1, [pc, #180]	; (800df0c <__ieee754_acosf+0x29c>)
 800de56:	f7f2 fea7 	bl	8000ba8 <__aeabi_fsub>
 800de5a:	4621      	mov	r1, r4
 800de5c:	f7f2 ffae 	bl	8000dbc <__aeabi_fmul>
 800de60:	492b      	ldr	r1, [pc, #172]	; (800df10 <__ieee754_acosf+0x2a0>)
 800de62:	f7f2 fea3 	bl	8000bac <__addsf3>
 800de66:	4621      	mov	r1, r4
 800de68:	f7f2 ffa8 	bl	8000dbc <__aeabi_fmul>
 800de6c:	4929      	ldr	r1, [pc, #164]	; (800df14 <__ieee754_acosf+0x2a4>)
 800de6e:	4607      	mov	r7, r0
 800de70:	4620      	mov	r0, r4
 800de72:	f7f2 ffa3 	bl	8000dbc <__aeabi_fmul>
 800de76:	4928      	ldr	r1, [pc, #160]	; (800df18 <__ieee754_acosf+0x2a8>)
 800de78:	f7f2 fe96 	bl	8000ba8 <__aeabi_fsub>
 800de7c:	4621      	mov	r1, r4
 800de7e:	f7f2 ff9d 	bl	8000dbc <__aeabi_fmul>
 800de82:	4926      	ldr	r1, [pc, #152]	; (800df1c <__ieee754_acosf+0x2ac>)
 800de84:	f7f2 fe92 	bl	8000bac <__addsf3>
 800de88:	4621      	mov	r1, r4
 800de8a:	f7f2 ff97 	bl	8000dbc <__aeabi_fmul>
 800de8e:	4924      	ldr	r1, [pc, #144]	; (800df20 <__ieee754_acosf+0x2b0>)
 800de90:	f7f2 fe8a 	bl	8000ba8 <__aeabi_fsub>
 800de94:	4621      	mov	r1, r4
 800de96:	f7f2 ff91 	bl	8000dbc <__aeabi_fmul>
 800de9a:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800de9e:	f7f2 fe85 	bl	8000bac <__addsf3>
 800dea2:	4601      	mov	r1, r0
 800dea4:	4638      	mov	r0, r7
 800dea6:	f7f3 f83d 	bl	8000f24 <__aeabi_fdiv>
 800deaa:	4631      	mov	r1, r6
 800deac:	f7f2 ff86 	bl	8000dbc <__aeabi_fmul>
 800deb0:	f025 050f 	bic.w	r5, r5, #15
 800deb4:	4607      	mov	r7, r0
 800deb6:	4629      	mov	r1, r5
 800deb8:	4628      	mov	r0, r5
 800deba:	f7f2 ff7f 	bl	8000dbc <__aeabi_fmul>
 800debe:	4601      	mov	r1, r0
 800dec0:	4620      	mov	r0, r4
 800dec2:	f7f2 fe71 	bl	8000ba8 <__aeabi_fsub>
 800dec6:	4629      	mov	r1, r5
 800dec8:	4604      	mov	r4, r0
 800deca:	4630      	mov	r0, r6
 800decc:	f7f2 fe6e 	bl	8000bac <__addsf3>
 800ded0:	4601      	mov	r1, r0
 800ded2:	4620      	mov	r0, r4
 800ded4:	f7f3 f826 	bl	8000f24 <__aeabi_fdiv>
 800ded8:	4601      	mov	r1, r0
 800deda:	4638      	mov	r0, r7
 800dedc:	f7f2 fe66 	bl	8000bac <__addsf3>
 800dee0:	4629      	mov	r1, r5
 800dee2:	f7f2 fe63 	bl	8000bac <__addsf3>
 800dee6:	4601      	mov	r1, r0
 800dee8:	f7f2 fe60 	bl	8000bac <__addsf3>
 800deec:	e6cb      	b.n	800dc86 <__ieee754_acosf+0x16>
 800deee:	2000      	movs	r0, #0
 800def0:	e6c9      	b.n	800dc86 <__ieee754_acosf+0x16>
 800def2:	480f      	ldr	r0, [pc, #60]	; (800df30 <__ieee754_acosf+0x2c0>)
 800def4:	e6c7      	b.n	800dc86 <__ieee754_acosf+0x16>
 800def6:	bf00      	nop
 800def8:	40490fdb 	.word	0x40490fdb
 800defc:	3811ef08 	.word	0x3811ef08
 800df00:	3a4f7f04 	.word	0x3a4f7f04
 800df04:	3d241146 	.word	0x3d241146
 800df08:	3e4e0aa8 	.word	0x3e4e0aa8
 800df0c:	3ea6b090 	.word	0x3ea6b090
 800df10:	3e2aaaab 	.word	0x3e2aaaab
 800df14:	3d9dc62e 	.word	0x3d9dc62e
 800df18:	3f303361 	.word	0x3f303361
 800df1c:	4001572d 	.word	0x4001572d
 800df20:	4019d139 	.word	0x4019d139
 800df24:	33a22168 	.word	0x33a22168
 800df28:	3fc90fda 	.word	0x3fc90fda
 800df2c:	40490fda 	.word	0x40490fda
 800df30:	3fc90fdb 	.word	0x3fc90fdb

0800df34 <__ieee754_asinf>:
 800df34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800df38:	f020 4800 	bic.w	r8, r0, #2147483648	; 0x80000000
 800df3c:	f1b8 5f7e 	cmp.w	r8, #1065353216	; 0x3f800000
 800df40:	4604      	mov	r4, r0
 800df42:	4605      	mov	r5, r0
 800df44:	d10c      	bne.n	800df60 <__ieee754_asinf+0x2c>
 800df46:	498d      	ldr	r1, [pc, #564]	; (800e17c <__ieee754_asinf+0x248>)
 800df48:	f7f2 ff38 	bl	8000dbc <__aeabi_fmul>
 800df4c:	498c      	ldr	r1, [pc, #560]	; (800e180 <__ieee754_asinf+0x24c>)
 800df4e:	4605      	mov	r5, r0
 800df50:	4620      	mov	r0, r4
 800df52:	f7f2 ff33 	bl	8000dbc <__aeabi_fmul>
 800df56:	4601      	mov	r1, r0
 800df58:	4628      	mov	r0, r5
 800df5a:	f7f2 fe27 	bl	8000bac <__addsf3>
 800df5e:	e006      	b.n	800df6e <__ieee754_asinf+0x3a>
 800df60:	dd07      	ble.n	800df72 <__ieee754_asinf+0x3e>
 800df62:	4601      	mov	r1, r0
 800df64:	f7f2 fe20 	bl	8000ba8 <__aeabi_fsub>
 800df68:	4601      	mov	r1, r0
 800df6a:	f7f2 ffdb 	bl	8000f24 <__aeabi_fdiv>
 800df6e:	4604      	mov	r4, r0
 800df70:	e00e      	b.n	800df90 <__ieee754_asinf+0x5c>
 800df72:	f1b8 5f7c 	cmp.w	r8, #1056964608	; 0x3f000000
 800df76:	da58      	bge.n	800e02a <__ieee754_asinf+0xf6>
 800df78:	f1b8 5f48 	cmp.w	r8, #838860800	; 0x32000000
 800df7c:	da0b      	bge.n	800df96 <__ieee754_asinf+0x62>
 800df7e:	4981      	ldr	r1, [pc, #516]	; (800e184 <__ieee754_asinf+0x250>)
 800df80:	f7f2 fe14 	bl	8000bac <__addsf3>
 800df84:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800df88:	f7f3 f8d4 	bl	8001134 <__aeabi_fcmpgt>
 800df8c:	2800      	cmp	r0, #0
 800df8e:	d04c      	beq.n	800e02a <__ieee754_asinf+0xf6>
 800df90:	4620      	mov	r0, r4
 800df92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800df96:	4601      	mov	r1, r0
 800df98:	f7f2 ff10 	bl	8000dbc <__aeabi_fmul>
 800df9c:	4605      	mov	r5, r0
 800df9e:	497a      	ldr	r1, [pc, #488]	; (800e188 <__ieee754_asinf+0x254>)
 800dfa0:	f7f2 ff0c 	bl	8000dbc <__aeabi_fmul>
 800dfa4:	4979      	ldr	r1, [pc, #484]	; (800e18c <__ieee754_asinf+0x258>)
 800dfa6:	f7f2 fe01 	bl	8000bac <__addsf3>
 800dfaa:	4629      	mov	r1, r5
 800dfac:	f7f2 ff06 	bl	8000dbc <__aeabi_fmul>
 800dfb0:	4977      	ldr	r1, [pc, #476]	; (800e190 <__ieee754_asinf+0x25c>)
 800dfb2:	f7f2 fdf9 	bl	8000ba8 <__aeabi_fsub>
 800dfb6:	4629      	mov	r1, r5
 800dfb8:	f7f2 ff00 	bl	8000dbc <__aeabi_fmul>
 800dfbc:	4975      	ldr	r1, [pc, #468]	; (800e194 <__ieee754_asinf+0x260>)
 800dfbe:	f7f2 fdf5 	bl	8000bac <__addsf3>
 800dfc2:	4629      	mov	r1, r5
 800dfc4:	f7f2 fefa 	bl	8000dbc <__aeabi_fmul>
 800dfc8:	4973      	ldr	r1, [pc, #460]	; (800e198 <__ieee754_asinf+0x264>)
 800dfca:	f7f2 fded 	bl	8000ba8 <__aeabi_fsub>
 800dfce:	4629      	mov	r1, r5
 800dfd0:	f7f2 fef4 	bl	8000dbc <__aeabi_fmul>
 800dfd4:	4971      	ldr	r1, [pc, #452]	; (800e19c <__ieee754_asinf+0x268>)
 800dfd6:	f7f2 fde9 	bl	8000bac <__addsf3>
 800dfda:	4629      	mov	r1, r5
 800dfdc:	f7f2 feee 	bl	8000dbc <__aeabi_fmul>
 800dfe0:	496f      	ldr	r1, [pc, #444]	; (800e1a0 <__ieee754_asinf+0x26c>)
 800dfe2:	4606      	mov	r6, r0
 800dfe4:	4628      	mov	r0, r5
 800dfe6:	f7f2 fee9 	bl	8000dbc <__aeabi_fmul>
 800dfea:	496e      	ldr	r1, [pc, #440]	; (800e1a4 <__ieee754_asinf+0x270>)
 800dfec:	f7f2 fddc 	bl	8000ba8 <__aeabi_fsub>
 800dff0:	4629      	mov	r1, r5
 800dff2:	f7f2 fee3 	bl	8000dbc <__aeabi_fmul>
 800dff6:	496c      	ldr	r1, [pc, #432]	; (800e1a8 <__ieee754_asinf+0x274>)
 800dff8:	f7f2 fdd8 	bl	8000bac <__addsf3>
 800dffc:	4629      	mov	r1, r5
 800dffe:	f7f2 fedd 	bl	8000dbc <__aeabi_fmul>
 800e002:	496a      	ldr	r1, [pc, #424]	; (800e1ac <__ieee754_asinf+0x278>)
 800e004:	f7f2 fdd0 	bl	8000ba8 <__aeabi_fsub>
 800e008:	4629      	mov	r1, r5
 800e00a:	f7f2 fed7 	bl	8000dbc <__aeabi_fmul>
 800e00e:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800e012:	f7f2 fdcb 	bl	8000bac <__addsf3>
 800e016:	4601      	mov	r1, r0
 800e018:	4630      	mov	r0, r6
 800e01a:	f7f2 ff83 	bl	8000f24 <__aeabi_fdiv>
 800e01e:	4621      	mov	r1, r4
 800e020:	f7f2 fecc 	bl	8000dbc <__aeabi_fmul>
 800e024:	4601      	mov	r1, r0
 800e026:	4620      	mov	r0, r4
 800e028:	e797      	b.n	800df5a <__ieee754_asinf+0x26>
 800e02a:	4620      	mov	r0, r4
 800e02c:	f7ff fb88 	bl	800d740 <fabsf>
 800e030:	4601      	mov	r1, r0
 800e032:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800e036:	f7f2 fdb7 	bl	8000ba8 <__aeabi_fsub>
 800e03a:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800e03e:	f7f2 febd 	bl	8000dbc <__aeabi_fmul>
 800e042:	4606      	mov	r6, r0
 800e044:	4950      	ldr	r1, [pc, #320]	; (800e188 <__ieee754_asinf+0x254>)
 800e046:	f7f2 feb9 	bl	8000dbc <__aeabi_fmul>
 800e04a:	4950      	ldr	r1, [pc, #320]	; (800e18c <__ieee754_asinf+0x258>)
 800e04c:	f7f2 fdae 	bl	8000bac <__addsf3>
 800e050:	4631      	mov	r1, r6
 800e052:	f7f2 feb3 	bl	8000dbc <__aeabi_fmul>
 800e056:	494e      	ldr	r1, [pc, #312]	; (800e190 <__ieee754_asinf+0x25c>)
 800e058:	f7f2 fda6 	bl	8000ba8 <__aeabi_fsub>
 800e05c:	4631      	mov	r1, r6
 800e05e:	f7f2 fead 	bl	8000dbc <__aeabi_fmul>
 800e062:	494c      	ldr	r1, [pc, #304]	; (800e194 <__ieee754_asinf+0x260>)
 800e064:	f7f2 fda2 	bl	8000bac <__addsf3>
 800e068:	4631      	mov	r1, r6
 800e06a:	f7f2 fea7 	bl	8000dbc <__aeabi_fmul>
 800e06e:	494a      	ldr	r1, [pc, #296]	; (800e198 <__ieee754_asinf+0x264>)
 800e070:	f7f2 fd9a 	bl	8000ba8 <__aeabi_fsub>
 800e074:	4631      	mov	r1, r6
 800e076:	f7f2 fea1 	bl	8000dbc <__aeabi_fmul>
 800e07a:	4948      	ldr	r1, [pc, #288]	; (800e19c <__ieee754_asinf+0x268>)
 800e07c:	f7f2 fd96 	bl	8000bac <__addsf3>
 800e080:	4631      	mov	r1, r6
 800e082:	f7f2 fe9b 	bl	8000dbc <__aeabi_fmul>
 800e086:	4946      	ldr	r1, [pc, #280]	; (800e1a0 <__ieee754_asinf+0x26c>)
 800e088:	4681      	mov	r9, r0
 800e08a:	4630      	mov	r0, r6
 800e08c:	f7f2 fe96 	bl	8000dbc <__aeabi_fmul>
 800e090:	4944      	ldr	r1, [pc, #272]	; (800e1a4 <__ieee754_asinf+0x270>)
 800e092:	f7f2 fd89 	bl	8000ba8 <__aeabi_fsub>
 800e096:	4631      	mov	r1, r6
 800e098:	f7f2 fe90 	bl	8000dbc <__aeabi_fmul>
 800e09c:	4942      	ldr	r1, [pc, #264]	; (800e1a8 <__ieee754_asinf+0x274>)
 800e09e:	f7f2 fd85 	bl	8000bac <__addsf3>
 800e0a2:	4631      	mov	r1, r6
 800e0a4:	f7f2 fe8a 	bl	8000dbc <__aeabi_fmul>
 800e0a8:	4940      	ldr	r1, [pc, #256]	; (800e1ac <__ieee754_asinf+0x278>)
 800e0aa:	f7f2 fd7d 	bl	8000ba8 <__aeabi_fsub>
 800e0ae:	4631      	mov	r1, r6
 800e0b0:	f7f2 fe84 	bl	8000dbc <__aeabi_fmul>
 800e0b4:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800e0b8:	f7f2 fd78 	bl	8000bac <__addsf3>
 800e0bc:	4682      	mov	sl, r0
 800e0be:	4630      	mov	r0, r6
 800e0c0:	f000 f9da 	bl	800e478 <__ieee754_sqrtf>
 800e0c4:	4b3a      	ldr	r3, [pc, #232]	; (800e1b0 <__ieee754_asinf+0x27c>)
 800e0c6:	4607      	mov	r7, r0
 800e0c8:	4598      	cmp	r8, r3
 800e0ca:	dd1a      	ble.n	800e102 <__ieee754_asinf+0x1ce>
 800e0cc:	4651      	mov	r1, sl
 800e0ce:	4648      	mov	r0, r9
 800e0d0:	f7f2 ff28 	bl	8000f24 <__aeabi_fdiv>
 800e0d4:	4639      	mov	r1, r7
 800e0d6:	f7f2 fe71 	bl	8000dbc <__aeabi_fmul>
 800e0da:	4639      	mov	r1, r7
 800e0dc:	f7f2 fd66 	bl	8000bac <__addsf3>
 800e0e0:	4601      	mov	r1, r0
 800e0e2:	f7f2 fd63 	bl	8000bac <__addsf3>
 800e0e6:	4933      	ldr	r1, [pc, #204]	; (800e1b4 <__ieee754_asinf+0x280>)
 800e0e8:	f7f2 fd60 	bl	8000bac <__addsf3>
 800e0ec:	4601      	mov	r1, r0
 800e0ee:	4823      	ldr	r0, [pc, #140]	; (800e17c <__ieee754_asinf+0x248>)
 800e0f0:	f7f2 fd5a 	bl	8000ba8 <__aeabi_fsub>
 800e0f4:	2d00      	cmp	r5, #0
 800e0f6:	4604      	mov	r4, r0
 800e0f8:	f73f af4a 	bgt.w	800df90 <__ieee754_asinf+0x5c>
 800e0fc:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800e100:	e735      	b.n	800df6e <__ieee754_asinf+0x3a>
 800e102:	4601      	mov	r1, r0
 800e104:	f420 687f 	bic.w	r8, r0, #4080	; 0xff0
 800e108:	f7f2 fd50 	bl	8000bac <__addsf3>
 800e10c:	4651      	mov	r1, sl
 800e10e:	4604      	mov	r4, r0
 800e110:	4648      	mov	r0, r9
 800e112:	f7f2 ff07 	bl	8000f24 <__aeabi_fdiv>
 800e116:	4601      	mov	r1, r0
 800e118:	4620      	mov	r0, r4
 800e11a:	f7f2 fe4f 	bl	8000dbc <__aeabi_fmul>
 800e11e:	f028 080f 	bic.w	r8, r8, #15
 800e122:	4681      	mov	r9, r0
 800e124:	4641      	mov	r1, r8
 800e126:	4640      	mov	r0, r8
 800e128:	f7f2 fe48 	bl	8000dbc <__aeabi_fmul>
 800e12c:	4601      	mov	r1, r0
 800e12e:	4630      	mov	r0, r6
 800e130:	f7f2 fd3a 	bl	8000ba8 <__aeabi_fsub>
 800e134:	4641      	mov	r1, r8
 800e136:	4604      	mov	r4, r0
 800e138:	4638      	mov	r0, r7
 800e13a:	f7f2 fd37 	bl	8000bac <__addsf3>
 800e13e:	4601      	mov	r1, r0
 800e140:	4620      	mov	r0, r4
 800e142:	f7f2 feef 	bl	8000f24 <__aeabi_fdiv>
 800e146:	4601      	mov	r1, r0
 800e148:	f7f2 fd30 	bl	8000bac <__addsf3>
 800e14c:	4601      	mov	r1, r0
 800e14e:	480c      	ldr	r0, [pc, #48]	; (800e180 <__ieee754_asinf+0x24c>)
 800e150:	f7f2 fd2a 	bl	8000ba8 <__aeabi_fsub>
 800e154:	4601      	mov	r1, r0
 800e156:	4648      	mov	r0, r9
 800e158:	f7f2 fd26 	bl	8000ba8 <__aeabi_fsub>
 800e15c:	4641      	mov	r1, r8
 800e15e:	4604      	mov	r4, r0
 800e160:	4640      	mov	r0, r8
 800e162:	f7f2 fd23 	bl	8000bac <__addsf3>
 800e166:	4601      	mov	r1, r0
 800e168:	4813      	ldr	r0, [pc, #76]	; (800e1b8 <__ieee754_asinf+0x284>)
 800e16a:	f7f2 fd1d 	bl	8000ba8 <__aeabi_fsub>
 800e16e:	4601      	mov	r1, r0
 800e170:	4620      	mov	r0, r4
 800e172:	f7f2 fd19 	bl	8000ba8 <__aeabi_fsub>
 800e176:	4601      	mov	r1, r0
 800e178:	480f      	ldr	r0, [pc, #60]	; (800e1b8 <__ieee754_asinf+0x284>)
 800e17a:	e7b9      	b.n	800e0f0 <__ieee754_asinf+0x1bc>
 800e17c:	3fc90fdb 	.word	0x3fc90fdb
 800e180:	b33bbd2e 	.word	0xb33bbd2e
 800e184:	7149f2ca 	.word	0x7149f2ca
 800e188:	3811ef08 	.word	0x3811ef08
 800e18c:	3a4f7f04 	.word	0x3a4f7f04
 800e190:	3d241146 	.word	0x3d241146
 800e194:	3e4e0aa8 	.word	0x3e4e0aa8
 800e198:	3ea6b090 	.word	0x3ea6b090
 800e19c:	3e2aaaab 	.word	0x3e2aaaab
 800e1a0:	3d9dc62e 	.word	0x3d9dc62e
 800e1a4:	3f303361 	.word	0x3f303361
 800e1a8:	4001572d 	.word	0x4001572d
 800e1ac:	4019d139 	.word	0x4019d139
 800e1b0:	3f799999 	.word	0x3f799999
 800e1b4:	333bbd2e 	.word	0x333bbd2e
 800e1b8:	3f490fdb 	.word	0x3f490fdb

0800e1bc <__ieee754_rem_pio2f>:
 800e1bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e1c0:	4aa0      	ldr	r2, [pc, #640]	; (800e444 <__ieee754_rem_pio2f+0x288>)
 800e1c2:	f020 4600 	bic.w	r6, r0, #2147483648	; 0x80000000
 800e1c6:	4296      	cmp	r6, r2
 800e1c8:	460c      	mov	r4, r1
 800e1ca:	4682      	mov	sl, r0
 800e1cc:	b087      	sub	sp, #28
 800e1ce:	dc04      	bgt.n	800e1da <__ieee754_rem_pio2f+0x1e>
 800e1d0:	2300      	movs	r3, #0
 800e1d2:	6008      	str	r0, [r1, #0]
 800e1d4:	604b      	str	r3, [r1, #4]
 800e1d6:	2500      	movs	r5, #0
 800e1d8:	e01a      	b.n	800e210 <__ieee754_rem_pio2f+0x54>
 800e1da:	4a9b      	ldr	r2, [pc, #620]	; (800e448 <__ieee754_rem_pio2f+0x28c>)
 800e1dc:	4296      	cmp	r6, r2
 800e1de:	dc4b      	bgt.n	800e278 <__ieee754_rem_pio2f+0xbc>
 800e1e0:	2800      	cmp	r0, #0
 800e1e2:	499a      	ldr	r1, [pc, #616]	; (800e44c <__ieee754_rem_pio2f+0x290>)
 800e1e4:	4f9a      	ldr	r7, [pc, #616]	; (800e450 <__ieee754_rem_pio2f+0x294>)
 800e1e6:	f026 060f 	bic.w	r6, r6, #15
 800e1ea:	dd23      	ble.n	800e234 <__ieee754_rem_pio2f+0x78>
 800e1ec:	f7f2 fcdc 	bl	8000ba8 <__aeabi_fsub>
 800e1f0:	42be      	cmp	r6, r7
 800e1f2:	4605      	mov	r5, r0
 800e1f4:	d010      	beq.n	800e218 <__ieee754_rem_pio2f+0x5c>
 800e1f6:	4997      	ldr	r1, [pc, #604]	; (800e454 <__ieee754_rem_pio2f+0x298>)
 800e1f8:	f7f2 fcd6 	bl	8000ba8 <__aeabi_fsub>
 800e1fc:	4601      	mov	r1, r0
 800e1fe:	6020      	str	r0, [r4, #0]
 800e200:	4628      	mov	r0, r5
 800e202:	f7f2 fcd1 	bl	8000ba8 <__aeabi_fsub>
 800e206:	4993      	ldr	r1, [pc, #588]	; (800e454 <__ieee754_rem_pio2f+0x298>)
 800e208:	f7f2 fcce 	bl	8000ba8 <__aeabi_fsub>
 800e20c:	2501      	movs	r5, #1
 800e20e:	6060      	str	r0, [r4, #4]
 800e210:	4628      	mov	r0, r5
 800e212:	b007      	add	sp, #28
 800e214:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e218:	498f      	ldr	r1, [pc, #572]	; (800e458 <__ieee754_rem_pio2f+0x29c>)
 800e21a:	f7f2 fcc5 	bl	8000ba8 <__aeabi_fsub>
 800e21e:	498f      	ldr	r1, [pc, #572]	; (800e45c <__ieee754_rem_pio2f+0x2a0>)
 800e220:	4605      	mov	r5, r0
 800e222:	f7f2 fcc1 	bl	8000ba8 <__aeabi_fsub>
 800e226:	4601      	mov	r1, r0
 800e228:	6020      	str	r0, [r4, #0]
 800e22a:	4628      	mov	r0, r5
 800e22c:	f7f2 fcbc 	bl	8000ba8 <__aeabi_fsub>
 800e230:	498a      	ldr	r1, [pc, #552]	; (800e45c <__ieee754_rem_pio2f+0x2a0>)
 800e232:	e7e9      	b.n	800e208 <__ieee754_rem_pio2f+0x4c>
 800e234:	f7f2 fcba 	bl	8000bac <__addsf3>
 800e238:	42be      	cmp	r6, r7
 800e23a:	4605      	mov	r5, r0
 800e23c:	d00e      	beq.n	800e25c <__ieee754_rem_pio2f+0xa0>
 800e23e:	4985      	ldr	r1, [pc, #532]	; (800e454 <__ieee754_rem_pio2f+0x298>)
 800e240:	f7f2 fcb4 	bl	8000bac <__addsf3>
 800e244:	4601      	mov	r1, r0
 800e246:	6020      	str	r0, [r4, #0]
 800e248:	4628      	mov	r0, r5
 800e24a:	f7f2 fcad 	bl	8000ba8 <__aeabi_fsub>
 800e24e:	4981      	ldr	r1, [pc, #516]	; (800e454 <__ieee754_rem_pio2f+0x298>)
 800e250:	f7f2 fcac 	bl	8000bac <__addsf3>
 800e254:	f04f 35ff 	mov.w	r5, #4294967295
 800e258:	6060      	str	r0, [r4, #4]
 800e25a:	e7d9      	b.n	800e210 <__ieee754_rem_pio2f+0x54>
 800e25c:	497e      	ldr	r1, [pc, #504]	; (800e458 <__ieee754_rem_pio2f+0x29c>)
 800e25e:	f7f2 fca5 	bl	8000bac <__addsf3>
 800e262:	497e      	ldr	r1, [pc, #504]	; (800e45c <__ieee754_rem_pio2f+0x2a0>)
 800e264:	4605      	mov	r5, r0
 800e266:	f7f2 fca1 	bl	8000bac <__addsf3>
 800e26a:	4601      	mov	r1, r0
 800e26c:	6020      	str	r0, [r4, #0]
 800e26e:	4628      	mov	r0, r5
 800e270:	f7f2 fc9a 	bl	8000ba8 <__aeabi_fsub>
 800e274:	4979      	ldr	r1, [pc, #484]	; (800e45c <__ieee754_rem_pio2f+0x2a0>)
 800e276:	e7eb      	b.n	800e250 <__ieee754_rem_pio2f+0x94>
 800e278:	4a79      	ldr	r2, [pc, #484]	; (800e460 <__ieee754_rem_pio2f+0x2a4>)
 800e27a:	4296      	cmp	r6, r2
 800e27c:	f300 8091 	bgt.w	800e3a2 <__ieee754_rem_pio2f+0x1e6>
 800e280:	f7ff fa5e 	bl	800d740 <fabsf>
 800e284:	4977      	ldr	r1, [pc, #476]	; (800e464 <__ieee754_rem_pio2f+0x2a8>)
 800e286:	4607      	mov	r7, r0
 800e288:	f7f2 fd98 	bl	8000dbc <__aeabi_fmul>
 800e28c:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800e290:	f7f2 fc8c 	bl	8000bac <__addsf3>
 800e294:	f7f2 ff6e 	bl	8001174 <__aeabi_f2iz>
 800e298:	4605      	mov	r5, r0
 800e29a:	f7f2 fd3b 	bl	8000d14 <__aeabi_i2f>
 800e29e:	496b      	ldr	r1, [pc, #428]	; (800e44c <__ieee754_rem_pio2f+0x290>)
 800e2a0:	4681      	mov	r9, r0
 800e2a2:	f7f2 fd8b 	bl	8000dbc <__aeabi_fmul>
 800e2a6:	4601      	mov	r1, r0
 800e2a8:	4638      	mov	r0, r7
 800e2aa:	f7f2 fc7d 	bl	8000ba8 <__aeabi_fsub>
 800e2ae:	4969      	ldr	r1, [pc, #420]	; (800e454 <__ieee754_rem_pio2f+0x298>)
 800e2b0:	4680      	mov	r8, r0
 800e2b2:	4648      	mov	r0, r9
 800e2b4:	f7f2 fd82 	bl	8000dbc <__aeabi_fmul>
 800e2b8:	2d1f      	cmp	r5, #31
 800e2ba:	4607      	mov	r7, r0
 800e2bc:	dc0c      	bgt.n	800e2d8 <__ieee754_rem_pio2f+0x11c>
 800e2be:	4a6a      	ldr	r2, [pc, #424]	; (800e468 <__ieee754_rem_pio2f+0x2ac>)
 800e2c0:	1e69      	subs	r1, r5, #1
 800e2c2:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800e2c6:	f026 03ff 	bic.w	r3, r6, #255	; 0xff
 800e2ca:	4293      	cmp	r3, r2
 800e2cc:	d004      	beq.n	800e2d8 <__ieee754_rem_pio2f+0x11c>
 800e2ce:	4639      	mov	r1, r7
 800e2d0:	4640      	mov	r0, r8
 800e2d2:	f7f2 fc69 	bl	8000ba8 <__aeabi_fsub>
 800e2d6:	e00b      	b.n	800e2f0 <__ieee754_rem_pio2f+0x134>
 800e2d8:	4639      	mov	r1, r7
 800e2da:	4640      	mov	r0, r8
 800e2dc:	f7f2 fc64 	bl	8000ba8 <__aeabi_fsub>
 800e2e0:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 800e2e4:	ea4f 5be6 	mov.w	fp, r6, asr #23
 800e2e8:	ebc3 56d6 	rsb	r6, r3, r6, lsr #23
 800e2ec:	2e08      	cmp	r6, #8
 800e2ee:	dc01      	bgt.n	800e2f4 <__ieee754_rem_pio2f+0x138>
 800e2f0:	6020      	str	r0, [r4, #0]
 800e2f2:	e026      	b.n	800e342 <__ieee754_rem_pio2f+0x186>
 800e2f4:	4958      	ldr	r1, [pc, #352]	; (800e458 <__ieee754_rem_pio2f+0x29c>)
 800e2f6:	4648      	mov	r0, r9
 800e2f8:	f7f2 fd60 	bl	8000dbc <__aeabi_fmul>
 800e2fc:	4607      	mov	r7, r0
 800e2fe:	4601      	mov	r1, r0
 800e300:	4640      	mov	r0, r8
 800e302:	f7f2 fc51 	bl	8000ba8 <__aeabi_fsub>
 800e306:	4601      	mov	r1, r0
 800e308:	4606      	mov	r6, r0
 800e30a:	4640      	mov	r0, r8
 800e30c:	f7f2 fc4c 	bl	8000ba8 <__aeabi_fsub>
 800e310:	4639      	mov	r1, r7
 800e312:	f7f2 fc49 	bl	8000ba8 <__aeabi_fsub>
 800e316:	4607      	mov	r7, r0
 800e318:	4950      	ldr	r1, [pc, #320]	; (800e45c <__ieee754_rem_pio2f+0x2a0>)
 800e31a:	4648      	mov	r0, r9
 800e31c:	f7f2 fd4e 	bl	8000dbc <__aeabi_fmul>
 800e320:	4639      	mov	r1, r7
 800e322:	f7f2 fc41 	bl	8000ba8 <__aeabi_fsub>
 800e326:	4601      	mov	r1, r0
 800e328:	4607      	mov	r7, r0
 800e32a:	4630      	mov	r0, r6
 800e32c:	f7f2 fc3c 	bl	8000ba8 <__aeabi_fsub>
 800e330:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 800e334:	ebab 0b03 	sub.w	fp, fp, r3
 800e338:	f1bb 0f19 	cmp.w	fp, #25
 800e33c:	dc16      	bgt.n	800e36c <__ieee754_rem_pio2f+0x1b0>
 800e33e:	46b0      	mov	r8, r6
 800e340:	6020      	str	r0, [r4, #0]
 800e342:	6826      	ldr	r6, [r4, #0]
 800e344:	4640      	mov	r0, r8
 800e346:	4631      	mov	r1, r6
 800e348:	f7f2 fc2e 	bl	8000ba8 <__aeabi_fsub>
 800e34c:	4639      	mov	r1, r7
 800e34e:	f7f2 fc2b 	bl	8000ba8 <__aeabi_fsub>
 800e352:	f1ba 0f00 	cmp.w	sl, #0
 800e356:	6060      	str	r0, [r4, #4]
 800e358:	f6bf af5a 	bge.w	800e210 <__ieee754_rem_pio2f+0x54>
 800e35c:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
 800e360:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800e364:	6026      	str	r6, [r4, #0]
 800e366:	6060      	str	r0, [r4, #4]
 800e368:	426d      	negs	r5, r5
 800e36a:	e751      	b.n	800e210 <__ieee754_rem_pio2f+0x54>
 800e36c:	493f      	ldr	r1, [pc, #252]	; (800e46c <__ieee754_rem_pio2f+0x2b0>)
 800e36e:	4648      	mov	r0, r9
 800e370:	f7f2 fd24 	bl	8000dbc <__aeabi_fmul>
 800e374:	4607      	mov	r7, r0
 800e376:	4601      	mov	r1, r0
 800e378:	4630      	mov	r0, r6
 800e37a:	f7f2 fc15 	bl	8000ba8 <__aeabi_fsub>
 800e37e:	4601      	mov	r1, r0
 800e380:	4680      	mov	r8, r0
 800e382:	4630      	mov	r0, r6
 800e384:	f7f2 fc10 	bl	8000ba8 <__aeabi_fsub>
 800e388:	4639      	mov	r1, r7
 800e38a:	f7f2 fc0d 	bl	8000ba8 <__aeabi_fsub>
 800e38e:	4606      	mov	r6, r0
 800e390:	4937      	ldr	r1, [pc, #220]	; (800e470 <__ieee754_rem_pio2f+0x2b4>)
 800e392:	4648      	mov	r0, r9
 800e394:	f7f2 fd12 	bl	8000dbc <__aeabi_fmul>
 800e398:	4631      	mov	r1, r6
 800e39a:	f7f2 fc05 	bl	8000ba8 <__aeabi_fsub>
 800e39e:	4607      	mov	r7, r0
 800e3a0:	e795      	b.n	800e2ce <__ieee754_rem_pio2f+0x112>
 800e3a2:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 800e3a6:	db05      	blt.n	800e3b4 <__ieee754_rem_pio2f+0x1f8>
 800e3a8:	4601      	mov	r1, r0
 800e3aa:	f7f2 fbfd 	bl	8000ba8 <__aeabi_fsub>
 800e3ae:	6060      	str	r0, [r4, #4]
 800e3b0:	6020      	str	r0, [r4, #0]
 800e3b2:	e710      	b.n	800e1d6 <__ieee754_rem_pio2f+0x1a>
 800e3b4:	15f7      	asrs	r7, r6, #23
 800e3b6:	3f86      	subs	r7, #134	; 0x86
 800e3b8:	eba6 56c7 	sub.w	r6, r6, r7, lsl #23
 800e3bc:	4630      	mov	r0, r6
 800e3be:	f7f2 fed9 	bl	8001174 <__aeabi_f2iz>
 800e3c2:	f7f2 fca7 	bl	8000d14 <__aeabi_i2f>
 800e3c6:	4601      	mov	r1, r0
 800e3c8:	9003      	str	r0, [sp, #12]
 800e3ca:	4630      	mov	r0, r6
 800e3cc:	f7f2 fbec 	bl	8000ba8 <__aeabi_fsub>
 800e3d0:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 800e3d4:	f7f2 fcf2 	bl	8000dbc <__aeabi_fmul>
 800e3d8:	4606      	mov	r6, r0
 800e3da:	f7f2 fecb 	bl	8001174 <__aeabi_f2iz>
 800e3de:	f7f2 fc99 	bl	8000d14 <__aeabi_i2f>
 800e3e2:	4601      	mov	r1, r0
 800e3e4:	9004      	str	r0, [sp, #16]
 800e3e6:	4605      	mov	r5, r0
 800e3e8:	4630      	mov	r0, r6
 800e3ea:	f7f2 fbdd 	bl	8000ba8 <__aeabi_fsub>
 800e3ee:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 800e3f2:	f7f2 fce3 	bl	8000dbc <__aeabi_fmul>
 800e3f6:	2100      	movs	r1, #0
 800e3f8:	9005      	str	r0, [sp, #20]
 800e3fa:	f7f2 fe73 	bl	80010e4 <__aeabi_fcmpeq>
 800e3fe:	b1f0      	cbz	r0, 800e43e <__ieee754_rem_pio2f+0x282>
 800e400:	2100      	movs	r1, #0
 800e402:	4628      	mov	r0, r5
 800e404:	f7f2 fe6e 	bl	80010e4 <__aeabi_fcmpeq>
 800e408:	2800      	cmp	r0, #0
 800e40a:	bf14      	ite	ne
 800e40c:	2301      	movne	r3, #1
 800e40e:	2302      	moveq	r3, #2
 800e410:	4a18      	ldr	r2, [pc, #96]	; (800e474 <__ieee754_rem_pio2f+0x2b8>)
 800e412:	4621      	mov	r1, r4
 800e414:	9201      	str	r2, [sp, #4]
 800e416:	2202      	movs	r2, #2
 800e418:	a803      	add	r0, sp, #12
 800e41a:	9200      	str	r2, [sp, #0]
 800e41c:	463a      	mov	r2, r7
 800e41e:	f000 fdbd 	bl	800ef9c <__kernel_rem_pio2f>
 800e422:	f1ba 0f00 	cmp.w	sl, #0
 800e426:	4605      	mov	r5, r0
 800e428:	f6bf aef2 	bge.w	800e210 <__ieee754_rem_pio2f+0x54>
 800e42c:	6823      	ldr	r3, [r4, #0]
 800e42e:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800e432:	6023      	str	r3, [r4, #0]
 800e434:	6863      	ldr	r3, [r4, #4]
 800e436:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800e43a:	6063      	str	r3, [r4, #4]
 800e43c:	e794      	b.n	800e368 <__ieee754_rem_pio2f+0x1ac>
 800e43e:	2303      	movs	r3, #3
 800e440:	e7e6      	b.n	800e410 <__ieee754_rem_pio2f+0x254>
 800e442:	bf00      	nop
 800e444:	3f490fd8 	.word	0x3f490fd8
 800e448:	4016cbe3 	.word	0x4016cbe3
 800e44c:	3fc90f80 	.word	0x3fc90f80
 800e450:	3fc90fd0 	.word	0x3fc90fd0
 800e454:	37354443 	.word	0x37354443
 800e458:	37354400 	.word	0x37354400
 800e45c:	2e85a308 	.word	0x2e85a308
 800e460:	43490f80 	.word	0x43490f80
 800e464:	3f22f984 	.word	0x3f22f984
 800e468:	080131d8 	.word	0x080131d8
 800e46c:	2e85a300 	.word	0x2e85a300
 800e470:	248d3132 	.word	0x248d3132
 800e474:	08013258 	.word	0x08013258

0800e478 <__ieee754_sqrtf>:
 800e478:	f020 4200 	bic.w	r2, r0, #2147483648	; 0x80000000
 800e47c:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800e480:	b570      	push	{r4, r5, r6, lr}
 800e482:	4603      	mov	r3, r0
 800e484:	4604      	mov	r4, r0
 800e486:	d309      	bcc.n	800e49c <__ieee754_sqrtf+0x24>
 800e488:	4601      	mov	r1, r0
 800e48a:	f7f2 fc97 	bl	8000dbc <__aeabi_fmul>
 800e48e:	4601      	mov	r1, r0
 800e490:	4620      	mov	r0, r4
 800e492:	f7f2 fb8b 	bl	8000bac <__addsf3>
 800e496:	4604      	mov	r4, r0
 800e498:	4620      	mov	r0, r4
 800e49a:	bd70      	pop	{r4, r5, r6, pc}
 800e49c:	2a00      	cmp	r2, #0
 800e49e:	d0fb      	beq.n	800e498 <__ieee754_sqrtf+0x20>
 800e4a0:	2800      	cmp	r0, #0
 800e4a2:	da06      	bge.n	800e4b2 <__ieee754_sqrtf+0x3a>
 800e4a4:	4601      	mov	r1, r0
 800e4a6:	f7f2 fb7f 	bl	8000ba8 <__aeabi_fsub>
 800e4aa:	4601      	mov	r1, r0
 800e4ac:	f7f2 fd3a 	bl	8000f24 <__aeabi_fdiv>
 800e4b0:	e7f1      	b.n	800e496 <__ieee754_sqrtf+0x1e>
 800e4b2:	f010 42ff 	ands.w	r2, r0, #2139095040	; 0x7f800000
 800e4b6:	ea4f 51e0 	mov.w	r1, r0, asr #23
 800e4ba:	d029      	beq.n	800e510 <__ieee754_sqrtf+0x98>
 800e4bc:	f3c3 0216 	ubfx	r2, r3, #0, #23
 800e4c0:	07cb      	lsls	r3, r1, #31
 800e4c2:	f04f 0300 	mov.w	r3, #0
 800e4c6:	f1a1 007f 	sub.w	r0, r1, #127	; 0x7f
 800e4ca:	f04f 0419 	mov.w	r4, #25
 800e4ce:	461e      	mov	r6, r3
 800e4d0:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
 800e4d4:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800e4d8:	bf58      	it	pl
 800e4da:	0052      	lslpl	r2, r2, #1
 800e4dc:	1040      	asrs	r0, r0, #1
 800e4de:	0052      	lsls	r2, r2, #1
 800e4e0:	1875      	adds	r5, r6, r1
 800e4e2:	4295      	cmp	r5, r2
 800e4e4:	bfde      	ittt	le
 800e4e6:	186e      	addle	r6, r5, r1
 800e4e8:	1b52      	suble	r2, r2, r5
 800e4ea:	185b      	addle	r3, r3, r1
 800e4ec:	3c01      	subs	r4, #1
 800e4ee:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800e4f2:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800e4f6:	d1f3      	bne.n	800e4e0 <__ieee754_sqrtf+0x68>
 800e4f8:	b112      	cbz	r2, 800e500 <__ieee754_sqrtf+0x88>
 800e4fa:	3301      	adds	r3, #1
 800e4fc:	f023 0301 	bic.w	r3, r3, #1
 800e500:	105c      	asrs	r4, r3, #1
 800e502:	f104 547c 	add.w	r4, r4, #1056964608	; 0x3f000000
 800e506:	eb04 54c0 	add.w	r4, r4, r0, lsl #23
 800e50a:	e7c5      	b.n	800e498 <__ieee754_sqrtf+0x20>
 800e50c:	005b      	lsls	r3, r3, #1
 800e50e:	3201      	adds	r2, #1
 800e510:	0218      	lsls	r0, r3, #8
 800e512:	d5fb      	bpl.n	800e50c <__ieee754_sqrtf+0x94>
 800e514:	3a01      	subs	r2, #1
 800e516:	1a89      	subs	r1, r1, r2
 800e518:	e7d0      	b.n	800e4bc <__ieee754_sqrtf+0x44>
 800e51a:	0000      	movs	r0, r0
 800e51c:	0000      	movs	r0, r0
	...

0800e520 <__kernel_cos>:
 800e520:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e524:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800e528:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 800e52c:	4680      	mov	r8, r0
 800e52e:	460f      	mov	r7, r1
 800e530:	e9cd 2300 	strd	r2, r3, [sp]
 800e534:	da04      	bge.n	800e540 <__kernel_cos+0x20>
 800e536:	f7f2 fabb 	bl	8000ab0 <__aeabi_d2iz>
 800e53a:	2800      	cmp	r0, #0
 800e53c:	f000 8086 	beq.w	800e64c <__kernel_cos+0x12c>
 800e540:	4642      	mov	r2, r8
 800e542:	463b      	mov	r3, r7
 800e544:	4640      	mov	r0, r8
 800e546:	4639      	mov	r1, r7
 800e548:	f7f2 f802 	bl	8000550 <__aeabi_dmul>
 800e54c:	2200      	movs	r2, #0
 800e54e:	4b4e      	ldr	r3, [pc, #312]	; (800e688 <__kernel_cos+0x168>)
 800e550:	4604      	mov	r4, r0
 800e552:	460d      	mov	r5, r1
 800e554:	f7f1 fffc 	bl	8000550 <__aeabi_dmul>
 800e558:	a33f      	add	r3, pc, #252	; (adr r3, 800e658 <__kernel_cos+0x138>)
 800e55a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e55e:	4682      	mov	sl, r0
 800e560:	468b      	mov	fp, r1
 800e562:	4620      	mov	r0, r4
 800e564:	4629      	mov	r1, r5
 800e566:	f7f1 fff3 	bl	8000550 <__aeabi_dmul>
 800e56a:	a33d      	add	r3, pc, #244	; (adr r3, 800e660 <__kernel_cos+0x140>)
 800e56c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e570:	f7f1 fe38 	bl	80001e4 <__adddf3>
 800e574:	4622      	mov	r2, r4
 800e576:	462b      	mov	r3, r5
 800e578:	f7f1 ffea 	bl	8000550 <__aeabi_dmul>
 800e57c:	a33a      	add	r3, pc, #232	; (adr r3, 800e668 <__kernel_cos+0x148>)
 800e57e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e582:	f7f1 fe2d 	bl	80001e0 <__aeabi_dsub>
 800e586:	4622      	mov	r2, r4
 800e588:	462b      	mov	r3, r5
 800e58a:	f7f1 ffe1 	bl	8000550 <__aeabi_dmul>
 800e58e:	a338      	add	r3, pc, #224	; (adr r3, 800e670 <__kernel_cos+0x150>)
 800e590:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e594:	f7f1 fe26 	bl	80001e4 <__adddf3>
 800e598:	4622      	mov	r2, r4
 800e59a:	462b      	mov	r3, r5
 800e59c:	f7f1 ffd8 	bl	8000550 <__aeabi_dmul>
 800e5a0:	a335      	add	r3, pc, #212	; (adr r3, 800e678 <__kernel_cos+0x158>)
 800e5a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e5a6:	f7f1 fe1b 	bl	80001e0 <__aeabi_dsub>
 800e5aa:	4622      	mov	r2, r4
 800e5ac:	462b      	mov	r3, r5
 800e5ae:	f7f1 ffcf 	bl	8000550 <__aeabi_dmul>
 800e5b2:	a333      	add	r3, pc, #204	; (adr r3, 800e680 <__kernel_cos+0x160>)
 800e5b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e5b8:	f7f1 fe14 	bl	80001e4 <__adddf3>
 800e5bc:	4622      	mov	r2, r4
 800e5be:	462b      	mov	r3, r5
 800e5c0:	f7f1 ffc6 	bl	8000550 <__aeabi_dmul>
 800e5c4:	4622      	mov	r2, r4
 800e5c6:	462b      	mov	r3, r5
 800e5c8:	f7f1 ffc2 	bl	8000550 <__aeabi_dmul>
 800e5cc:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e5d0:	4604      	mov	r4, r0
 800e5d2:	460d      	mov	r5, r1
 800e5d4:	4640      	mov	r0, r8
 800e5d6:	4639      	mov	r1, r7
 800e5d8:	f7f1 ffba 	bl	8000550 <__aeabi_dmul>
 800e5dc:	460b      	mov	r3, r1
 800e5de:	4602      	mov	r2, r0
 800e5e0:	4629      	mov	r1, r5
 800e5e2:	4620      	mov	r0, r4
 800e5e4:	f7f1 fdfc 	bl	80001e0 <__aeabi_dsub>
 800e5e8:	4b28      	ldr	r3, [pc, #160]	; (800e68c <__kernel_cos+0x16c>)
 800e5ea:	4680      	mov	r8, r0
 800e5ec:	429e      	cmp	r6, r3
 800e5ee:	4689      	mov	r9, r1
 800e5f0:	dc0e      	bgt.n	800e610 <__kernel_cos+0xf0>
 800e5f2:	4602      	mov	r2, r0
 800e5f4:	460b      	mov	r3, r1
 800e5f6:	4650      	mov	r0, sl
 800e5f8:	4659      	mov	r1, fp
 800e5fa:	f7f1 fdf1 	bl	80001e0 <__aeabi_dsub>
 800e5fe:	4602      	mov	r2, r0
 800e600:	2000      	movs	r0, #0
 800e602:	460b      	mov	r3, r1
 800e604:	4922      	ldr	r1, [pc, #136]	; (800e690 <__kernel_cos+0x170>)
 800e606:	f7f1 fdeb 	bl	80001e0 <__aeabi_dsub>
 800e60a:	b003      	add	sp, #12
 800e60c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e610:	2400      	movs	r4, #0
 800e612:	4b20      	ldr	r3, [pc, #128]	; (800e694 <__kernel_cos+0x174>)
 800e614:	4622      	mov	r2, r4
 800e616:	429e      	cmp	r6, r3
 800e618:	bfcc      	ite	gt
 800e61a:	4d1f      	ldrgt	r5, [pc, #124]	; (800e698 <__kernel_cos+0x178>)
 800e61c:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 800e620:	462b      	mov	r3, r5
 800e622:	2000      	movs	r0, #0
 800e624:	491a      	ldr	r1, [pc, #104]	; (800e690 <__kernel_cos+0x170>)
 800e626:	f7f1 fddb 	bl	80001e0 <__aeabi_dsub>
 800e62a:	4622      	mov	r2, r4
 800e62c:	4606      	mov	r6, r0
 800e62e:	460f      	mov	r7, r1
 800e630:	462b      	mov	r3, r5
 800e632:	4650      	mov	r0, sl
 800e634:	4659      	mov	r1, fp
 800e636:	f7f1 fdd3 	bl	80001e0 <__aeabi_dsub>
 800e63a:	4642      	mov	r2, r8
 800e63c:	464b      	mov	r3, r9
 800e63e:	f7f1 fdcf 	bl	80001e0 <__aeabi_dsub>
 800e642:	4602      	mov	r2, r0
 800e644:	460b      	mov	r3, r1
 800e646:	4630      	mov	r0, r6
 800e648:	4639      	mov	r1, r7
 800e64a:	e7dc      	b.n	800e606 <__kernel_cos+0xe6>
 800e64c:	2000      	movs	r0, #0
 800e64e:	4910      	ldr	r1, [pc, #64]	; (800e690 <__kernel_cos+0x170>)
 800e650:	e7db      	b.n	800e60a <__kernel_cos+0xea>
 800e652:	bf00      	nop
 800e654:	f3af 8000 	nop.w
 800e658:	be8838d4 	.word	0xbe8838d4
 800e65c:	bda8fae9 	.word	0xbda8fae9
 800e660:	bdb4b1c4 	.word	0xbdb4b1c4
 800e664:	3e21ee9e 	.word	0x3e21ee9e
 800e668:	809c52ad 	.word	0x809c52ad
 800e66c:	3e927e4f 	.word	0x3e927e4f
 800e670:	19cb1590 	.word	0x19cb1590
 800e674:	3efa01a0 	.word	0x3efa01a0
 800e678:	16c15177 	.word	0x16c15177
 800e67c:	3f56c16c 	.word	0x3f56c16c
 800e680:	5555554c 	.word	0x5555554c
 800e684:	3fa55555 	.word	0x3fa55555
 800e688:	3fe00000 	.word	0x3fe00000
 800e68c:	3fd33332 	.word	0x3fd33332
 800e690:	3ff00000 	.word	0x3ff00000
 800e694:	3fe90000 	.word	0x3fe90000
 800e698:	3fd20000 	.word	0x3fd20000

0800e69c <__kernel_rem_pio2>:
 800e69c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e6a0:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 800e6a4:	9308      	str	r3, [sp, #32]
 800e6a6:	9101      	str	r1, [sp, #4]
 800e6a8:	4bc0      	ldr	r3, [pc, #768]	; (800e9ac <__kernel_rem_pio2+0x310>)
 800e6aa:	99a2      	ldr	r1, [sp, #648]	; 0x288
 800e6ac:	f112 0f14 	cmn.w	r2, #20
 800e6b0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800e6b4:	bfa8      	it	ge
 800e6b6:	1ed4      	subge	r4, r2, #3
 800e6b8:	9304      	str	r3, [sp, #16]
 800e6ba:	9b08      	ldr	r3, [sp, #32]
 800e6bc:	bfb8      	it	lt
 800e6be:	2400      	movlt	r4, #0
 800e6c0:	f103 33ff 	add.w	r3, r3, #4294967295
 800e6c4:	9306      	str	r3, [sp, #24]
 800e6c6:	bfa4      	itt	ge
 800e6c8:	2318      	movge	r3, #24
 800e6ca:	fb94 f4f3 	sdivge	r4, r4, r3
 800e6ce:	f06f 0317 	mvn.w	r3, #23
 800e6d2:	fb04 3303 	mla	r3, r4, r3, r3
 800e6d6:	eb03 0a02 	add.w	sl, r3, r2
 800e6da:	9a06      	ldr	r2, [sp, #24]
 800e6dc:	9b04      	ldr	r3, [sp, #16]
 800e6de:	1aa7      	subs	r7, r4, r2
 800e6e0:	eb03 0802 	add.w	r8, r3, r2
 800e6e4:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 800e6e6:	2500      	movs	r5, #0
 800e6e8:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800e6ec:	2200      	movs	r2, #0
 800e6ee:	2300      	movs	r3, #0
 800e6f0:	9009      	str	r0, [sp, #36]	; 0x24
 800e6f2:	ae20      	add	r6, sp, #128	; 0x80
 800e6f4:	4545      	cmp	r5, r8
 800e6f6:	dd19      	ble.n	800e72c <__kernel_rem_pio2+0x90>
 800e6f8:	9b08      	ldr	r3, [sp, #32]
 800e6fa:	aa20      	add	r2, sp, #128	; 0x80
 800e6fc:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800e700:	f8dd 8018 	ldr.w	r8, [sp, #24]
 800e704:	f1c3 0301 	rsb	r3, r3, #1
 800e708:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 800e70c:	9307      	str	r3, [sp, #28]
 800e70e:	9b07      	ldr	r3, [sp, #28]
 800e710:	9a04      	ldr	r2, [sp, #16]
 800e712:	4443      	add	r3, r8
 800e714:	429a      	cmp	r2, r3
 800e716:	db35      	blt.n	800e784 <__kernel_rem_pio2+0xe8>
 800e718:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e71a:	2200      	movs	r2, #0
 800e71c:	f1a3 0908 	sub.w	r9, r3, #8
 800e720:	2300      	movs	r3, #0
 800e722:	462f      	mov	r7, r5
 800e724:	2600      	movs	r6, #0
 800e726:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800e72a:	e01f      	b.n	800e76c <__kernel_rem_pio2+0xd0>
 800e72c:	42ef      	cmn	r7, r5
 800e72e:	d40b      	bmi.n	800e748 <__kernel_rem_pio2+0xac>
 800e730:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800e734:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800e738:	f7f1 fea0 	bl	800047c <__aeabi_i2d>
 800e73c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e740:	e8e6 0102 	strd	r0, r1, [r6], #8
 800e744:	3501      	adds	r5, #1
 800e746:	e7d5      	b.n	800e6f4 <__kernel_rem_pio2+0x58>
 800e748:	4610      	mov	r0, r2
 800e74a:	4619      	mov	r1, r3
 800e74c:	e7f8      	b.n	800e740 <__kernel_rem_pio2+0xa4>
 800e74e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e752:	e9f9 0102 	ldrd	r0, r1, [r9, #8]!
 800e756:	f7f1 fefb 	bl	8000550 <__aeabi_dmul>
 800e75a:	4602      	mov	r2, r0
 800e75c:	460b      	mov	r3, r1
 800e75e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e762:	f7f1 fd3f 	bl	80001e4 <__adddf3>
 800e766:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e76a:	3601      	adds	r6, #1
 800e76c:	9b06      	ldr	r3, [sp, #24]
 800e76e:	3f08      	subs	r7, #8
 800e770:	429e      	cmp	r6, r3
 800e772:	ddec      	ble.n	800e74e <__kernel_rem_pio2+0xb2>
 800e774:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e778:	3508      	adds	r5, #8
 800e77a:	e8eb 2302 	strd	r2, r3, [fp], #8
 800e77e:	f108 0801 	add.w	r8, r8, #1
 800e782:	e7c4      	b.n	800e70e <__kernel_rem_pio2+0x72>
 800e784:	9b04      	ldr	r3, [sp, #16]
 800e786:	aa0c      	add	r2, sp, #48	; 0x30
 800e788:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800e78c:	930b      	str	r3, [sp, #44]	; 0x2c
 800e78e:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 800e790:	9f04      	ldr	r7, [sp, #16]
 800e792:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800e796:	930a      	str	r3, [sp, #40]	; 0x28
 800e798:	463e      	mov	r6, r7
 800e79a:	ab98      	add	r3, sp, #608	; 0x260
 800e79c:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
 800e7a0:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800e7a4:	f8cd b008 	str.w	fp, [sp, #8]
 800e7a8:	e953 4528 	ldrd	r4, r5, [r3, #-160]	; 0xa0
 800e7ac:	2e00      	cmp	r6, #0
 800e7ae:	dc71      	bgt.n	800e894 <__kernel_rem_pio2+0x1f8>
 800e7b0:	4652      	mov	r2, sl
 800e7b2:	4620      	mov	r0, r4
 800e7b4:	4629      	mov	r1, r5
 800e7b6:	f000 ffa3 	bl	800f700 <scalbn>
 800e7ba:	2200      	movs	r2, #0
 800e7bc:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800e7c0:	4604      	mov	r4, r0
 800e7c2:	460d      	mov	r5, r1
 800e7c4:	f7f1 fec4 	bl	8000550 <__aeabi_dmul>
 800e7c8:	f000 ff1a 	bl	800f600 <floor>
 800e7cc:	2200      	movs	r2, #0
 800e7ce:	4b78      	ldr	r3, [pc, #480]	; (800e9b0 <__kernel_rem_pio2+0x314>)
 800e7d0:	f7f1 febe 	bl	8000550 <__aeabi_dmul>
 800e7d4:	4602      	mov	r2, r0
 800e7d6:	460b      	mov	r3, r1
 800e7d8:	4620      	mov	r0, r4
 800e7da:	4629      	mov	r1, r5
 800e7dc:	f7f1 fd00 	bl	80001e0 <__aeabi_dsub>
 800e7e0:	460d      	mov	r5, r1
 800e7e2:	4604      	mov	r4, r0
 800e7e4:	f7f2 f964 	bl	8000ab0 <__aeabi_d2iz>
 800e7e8:	9007      	str	r0, [sp, #28]
 800e7ea:	f7f1 fe47 	bl	800047c <__aeabi_i2d>
 800e7ee:	4602      	mov	r2, r0
 800e7f0:	460b      	mov	r3, r1
 800e7f2:	4620      	mov	r0, r4
 800e7f4:	4629      	mov	r1, r5
 800e7f6:	f7f1 fcf3 	bl	80001e0 <__aeabi_dsub>
 800e7fa:	f1ba 0f00 	cmp.w	sl, #0
 800e7fe:	4680      	mov	r8, r0
 800e800:	4689      	mov	r9, r1
 800e802:	dd70      	ble.n	800e8e6 <__kernel_rem_pio2+0x24a>
 800e804:	1e7a      	subs	r2, r7, #1
 800e806:	ab0c      	add	r3, sp, #48	; 0x30
 800e808:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800e80c:	9c07      	ldr	r4, [sp, #28]
 800e80e:	f1ca 0118 	rsb	r1, sl, #24
 800e812:	fa40 f301 	asr.w	r3, r0, r1
 800e816:	441c      	add	r4, r3
 800e818:	408b      	lsls	r3, r1
 800e81a:	1ac0      	subs	r0, r0, r3
 800e81c:	ab0c      	add	r3, sp, #48	; 0x30
 800e81e:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800e822:	f1ca 0317 	rsb	r3, sl, #23
 800e826:	9407      	str	r4, [sp, #28]
 800e828:	fa40 f303 	asr.w	r3, r0, r3
 800e82c:	9302      	str	r3, [sp, #8]
 800e82e:	9b02      	ldr	r3, [sp, #8]
 800e830:	2b00      	cmp	r3, #0
 800e832:	dd66      	ble.n	800e902 <__kernel_rem_pio2+0x266>
 800e834:	2200      	movs	r2, #0
 800e836:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800e83a:	4614      	mov	r4, r2
 800e83c:	9b07      	ldr	r3, [sp, #28]
 800e83e:	3301      	adds	r3, #1
 800e840:	9307      	str	r3, [sp, #28]
 800e842:	4297      	cmp	r7, r2
 800e844:	f300 809f 	bgt.w	800e986 <__kernel_rem_pio2+0x2ea>
 800e848:	f1ba 0f00 	cmp.w	sl, #0
 800e84c:	dd07      	ble.n	800e85e <__kernel_rem_pio2+0x1c2>
 800e84e:	f1ba 0f01 	cmp.w	sl, #1
 800e852:	f000 80b9 	beq.w	800e9c8 <__kernel_rem_pio2+0x32c>
 800e856:	f1ba 0f02 	cmp.w	sl, #2
 800e85a:	f000 80bf 	beq.w	800e9dc <__kernel_rem_pio2+0x340>
 800e85e:	9b02      	ldr	r3, [sp, #8]
 800e860:	2b02      	cmp	r3, #2
 800e862:	d14e      	bne.n	800e902 <__kernel_rem_pio2+0x266>
 800e864:	4642      	mov	r2, r8
 800e866:	464b      	mov	r3, r9
 800e868:	2000      	movs	r0, #0
 800e86a:	4952      	ldr	r1, [pc, #328]	; (800e9b4 <__kernel_rem_pio2+0x318>)
 800e86c:	f7f1 fcb8 	bl	80001e0 <__aeabi_dsub>
 800e870:	4680      	mov	r8, r0
 800e872:	4689      	mov	r9, r1
 800e874:	2c00      	cmp	r4, #0
 800e876:	d044      	beq.n	800e902 <__kernel_rem_pio2+0x266>
 800e878:	4652      	mov	r2, sl
 800e87a:	2000      	movs	r0, #0
 800e87c:	494d      	ldr	r1, [pc, #308]	; (800e9b4 <__kernel_rem_pio2+0x318>)
 800e87e:	f000 ff3f 	bl	800f700 <scalbn>
 800e882:	4602      	mov	r2, r0
 800e884:	460b      	mov	r3, r1
 800e886:	4640      	mov	r0, r8
 800e888:	4649      	mov	r1, r9
 800e88a:	f7f1 fca9 	bl	80001e0 <__aeabi_dsub>
 800e88e:	4680      	mov	r8, r0
 800e890:	4689      	mov	r9, r1
 800e892:	e036      	b.n	800e902 <__kernel_rem_pio2+0x266>
 800e894:	2200      	movs	r2, #0
 800e896:	4b48      	ldr	r3, [pc, #288]	; (800e9b8 <__kernel_rem_pio2+0x31c>)
 800e898:	4620      	mov	r0, r4
 800e89a:	4629      	mov	r1, r5
 800e89c:	f7f1 fe58 	bl	8000550 <__aeabi_dmul>
 800e8a0:	f7f2 f906 	bl	8000ab0 <__aeabi_d2iz>
 800e8a4:	f7f1 fdea 	bl	800047c <__aeabi_i2d>
 800e8a8:	2200      	movs	r2, #0
 800e8aa:	4b44      	ldr	r3, [pc, #272]	; (800e9bc <__kernel_rem_pio2+0x320>)
 800e8ac:	4680      	mov	r8, r0
 800e8ae:	4689      	mov	r9, r1
 800e8b0:	f7f1 fe4e 	bl	8000550 <__aeabi_dmul>
 800e8b4:	4602      	mov	r2, r0
 800e8b6:	460b      	mov	r3, r1
 800e8b8:	4620      	mov	r0, r4
 800e8ba:	4629      	mov	r1, r5
 800e8bc:	f7f1 fc90 	bl	80001e0 <__aeabi_dsub>
 800e8c0:	f7f2 f8f6 	bl	8000ab0 <__aeabi_d2iz>
 800e8c4:	9b02      	ldr	r3, [sp, #8]
 800e8c6:	3e01      	subs	r6, #1
 800e8c8:	f843 0b04 	str.w	r0, [r3], #4
 800e8cc:	9302      	str	r3, [sp, #8]
 800e8ce:	ab70      	add	r3, sp, #448	; 0x1c0
 800e8d0:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800e8d4:	4640      	mov	r0, r8
 800e8d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e8da:	4649      	mov	r1, r9
 800e8dc:	f7f1 fc82 	bl	80001e4 <__adddf3>
 800e8e0:	4604      	mov	r4, r0
 800e8e2:	460d      	mov	r5, r1
 800e8e4:	e762      	b.n	800e7ac <__kernel_rem_pio2+0x110>
 800e8e6:	d105      	bne.n	800e8f4 <__kernel_rem_pio2+0x258>
 800e8e8:	1e7b      	subs	r3, r7, #1
 800e8ea:	aa0c      	add	r2, sp, #48	; 0x30
 800e8ec:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800e8f0:	15c3      	asrs	r3, r0, #23
 800e8f2:	e79b      	b.n	800e82c <__kernel_rem_pio2+0x190>
 800e8f4:	2200      	movs	r2, #0
 800e8f6:	4b32      	ldr	r3, [pc, #200]	; (800e9c0 <__kernel_rem_pio2+0x324>)
 800e8f8:	f7f2 f8b0 	bl	8000a5c <__aeabi_dcmpge>
 800e8fc:	2800      	cmp	r0, #0
 800e8fe:	d13f      	bne.n	800e980 <__kernel_rem_pio2+0x2e4>
 800e900:	9002      	str	r0, [sp, #8]
 800e902:	2200      	movs	r2, #0
 800e904:	2300      	movs	r3, #0
 800e906:	4640      	mov	r0, r8
 800e908:	4649      	mov	r1, r9
 800e90a:	f7f2 f889 	bl	8000a20 <__aeabi_dcmpeq>
 800e90e:	2800      	cmp	r0, #0
 800e910:	f000 80b5 	beq.w	800ea7e <__kernel_rem_pio2+0x3e2>
 800e914:	1e7c      	subs	r4, r7, #1
 800e916:	4623      	mov	r3, r4
 800e918:	2200      	movs	r2, #0
 800e91a:	9904      	ldr	r1, [sp, #16]
 800e91c:	428b      	cmp	r3, r1
 800e91e:	da64      	bge.n	800e9ea <__kernel_rem_pio2+0x34e>
 800e920:	2a00      	cmp	r2, #0
 800e922:	d078      	beq.n	800ea16 <__kernel_rem_pio2+0x37a>
 800e924:	ab0c      	add	r3, sp, #48	; 0x30
 800e926:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800e92a:	f1aa 0a18 	sub.w	sl, sl, #24
 800e92e:	2b00      	cmp	r3, #0
 800e930:	f000 80a3 	beq.w	800ea7a <__kernel_rem_pio2+0x3de>
 800e934:	4652      	mov	r2, sl
 800e936:	2000      	movs	r0, #0
 800e938:	491e      	ldr	r1, [pc, #120]	; (800e9b4 <__kernel_rem_pio2+0x318>)
 800e93a:	f000 fee1 	bl	800f700 <scalbn>
 800e93e:	46a2      	mov	sl, r4
 800e940:	4606      	mov	r6, r0
 800e942:	460f      	mov	r7, r1
 800e944:	f04f 0800 	mov.w	r8, #0
 800e948:	00e3      	lsls	r3, r4, #3
 800e94a:	9306      	str	r3, [sp, #24]
 800e94c:	f8df 9068 	ldr.w	r9, [pc, #104]	; 800e9b8 <__kernel_rem_pio2+0x31c>
 800e950:	ab70      	add	r3, sp, #448	; 0x1c0
 800e952:	eb03 0bc4 	add.w	fp, r3, r4, lsl #3
 800e956:	f1ba 0f00 	cmp.w	sl, #0
 800e95a:	f280 80c6 	bge.w	800eaea <__kernel_rem_pio2+0x44e>
 800e95e:	4627      	mov	r7, r4
 800e960:	f04f 0800 	mov.w	r8, #0
 800e964:	2f00      	cmp	r7, #0
 800e966:	f2c0 80f3 	blt.w	800eb50 <__kernel_rem_pio2+0x4b4>
 800e96a:	4b16      	ldr	r3, [pc, #88]	; (800e9c4 <__kernel_rem_pio2+0x328>)
 800e96c:	f04f 0a00 	mov.w	sl, #0
 800e970:	461d      	mov	r5, r3
 800e972:	ab70      	add	r3, sp, #448	; 0x1c0
 800e974:	f04f 0b00 	mov.w	fp, #0
 800e978:	2600      	movs	r6, #0
 800e97a:	eb03 09c7 	add.w	r9, r3, r7, lsl #3
 800e97e:	e0d9      	b.n	800eb34 <__kernel_rem_pio2+0x498>
 800e980:	2302      	movs	r3, #2
 800e982:	9302      	str	r3, [sp, #8]
 800e984:	e756      	b.n	800e834 <__kernel_rem_pio2+0x198>
 800e986:	f8db 3000 	ldr.w	r3, [fp]
 800e98a:	b954      	cbnz	r4, 800e9a2 <__kernel_rem_pio2+0x306>
 800e98c:	b123      	cbz	r3, 800e998 <__kernel_rem_pio2+0x2fc>
 800e98e:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800e992:	f8cb 3000 	str.w	r3, [fp]
 800e996:	2301      	movs	r3, #1
 800e998:	461c      	mov	r4, r3
 800e99a:	3201      	adds	r2, #1
 800e99c:	f10b 0b04 	add.w	fp, fp, #4
 800e9a0:	e74f      	b.n	800e842 <__kernel_rem_pio2+0x1a6>
 800e9a2:	1acb      	subs	r3, r1, r3
 800e9a4:	f8cb 3000 	str.w	r3, [fp]
 800e9a8:	4623      	mov	r3, r4
 800e9aa:	e7f5      	b.n	800e998 <__kernel_rem_pio2+0x2fc>
 800e9ac:	080135b0 	.word	0x080135b0
 800e9b0:	40200000 	.word	0x40200000
 800e9b4:	3ff00000 	.word	0x3ff00000
 800e9b8:	3e700000 	.word	0x3e700000
 800e9bc:	41700000 	.word	0x41700000
 800e9c0:	3fe00000 	.word	0x3fe00000
 800e9c4:	08013570 	.word	0x08013570
 800e9c8:	1e7a      	subs	r2, r7, #1
 800e9ca:	ab0c      	add	r3, sp, #48	; 0x30
 800e9cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e9d0:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800e9d4:	a90c      	add	r1, sp, #48	; 0x30
 800e9d6:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800e9da:	e740      	b.n	800e85e <__kernel_rem_pio2+0x1c2>
 800e9dc:	1e7a      	subs	r2, r7, #1
 800e9de:	ab0c      	add	r3, sp, #48	; 0x30
 800e9e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e9e4:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800e9e8:	e7f4      	b.n	800e9d4 <__kernel_rem_pio2+0x338>
 800e9ea:	a90c      	add	r1, sp, #48	; 0x30
 800e9ec:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800e9f0:	3b01      	subs	r3, #1
 800e9f2:	430a      	orrs	r2, r1
 800e9f4:	e791      	b.n	800e91a <__kernel_rem_pio2+0x27e>
 800e9f6:	3401      	adds	r4, #1
 800e9f8:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800e9fc:	2a00      	cmp	r2, #0
 800e9fe:	d0fa      	beq.n	800e9f6 <__kernel_rem_pio2+0x35a>
 800ea00:	9b08      	ldr	r3, [sp, #32]
 800ea02:	1c7e      	adds	r6, r7, #1
 800ea04:	18fd      	adds	r5, r7, r3
 800ea06:	ab20      	add	r3, sp, #128	; 0x80
 800ea08:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800ea0c:	443c      	add	r4, r7
 800ea0e:	42b4      	cmp	r4, r6
 800ea10:	da04      	bge.n	800ea1c <__kernel_rem_pio2+0x380>
 800ea12:	4627      	mov	r7, r4
 800ea14:	e6c0      	b.n	800e798 <__kernel_rem_pio2+0xfc>
 800ea16:	2401      	movs	r4, #1
 800ea18:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ea1a:	e7ed      	b.n	800e9f8 <__kernel_rem_pio2+0x35c>
 800ea1c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ea1e:	462f      	mov	r7, r5
 800ea20:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800ea24:	f7f1 fd2a 	bl	800047c <__aeabi_i2d>
 800ea28:	f04f 0b00 	mov.w	fp, #0
 800ea2c:	f04f 0800 	mov.w	r8, #0
 800ea30:	f04f 0900 	mov.w	r9, #0
 800ea34:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ea36:	e8e7 0102 	strd	r0, r1, [r7], #8
 800ea3a:	3b08      	subs	r3, #8
 800ea3c:	9302      	str	r3, [sp, #8]
 800ea3e:	9b06      	ldr	r3, [sp, #24]
 800ea40:	459b      	cmp	fp, r3
 800ea42:	dd07      	ble.n	800ea54 <__kernel_rem_pio2+0x3b8>
 800ea44:	ab70      	add	r3, sp, #448	; 0x1c0
 800ea46:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800ea4a:	463d      	mov	r5, r7
 800ea4c:	e9c3 8900 	strd	r8, r9, [r3]
 800ea50:	3601      	adds	r6, #1
 800ea52:	e7dc      	b.n	800ea0e <__kernel_rem_pio2+0x372>
 800ea54:	9902      	ldr	r1, [sp, #8]
 800ea56:	f10b 0b01 	add.w	fp, fp, #1
 800ea5a:	e9f1 2302 	ldrd	r2, r3, [r1, #8]!
 800ea5e:	9102      	str	r1, [sp, #8]
 800ea60:	e875 0102 	ldrd	r0, r1, [r5], #-8
 800ea64:	f7f1 fd74 	bl	8000550 <__aeabi_dmul>
 800ea68:	4602      	mov	r2, r0
 800ea6a:	460b      	mov	r3, r1
 800ea6c:	4640      	mov	r0, r8
 800ea6e:	4649      	mov	r1, r9
 800ea70:	f7f1 fbb8 	bl	80001e4 <__adddf3>
 800ea74:	4680      	mov	r8, r0
 800ea76:	4689      	mov	r9, r1
 800ea78:	e7e1      	b.n	800ea3e <__kernel_rem_pio2+0x3a2>
 800ea7a:	3c01      	subs	r4, #1
 800ea7c:	e752      	b.n	800e924 <__kernel_rem_pio2+0x288>
 800ea7e:	f1ca 0200 	rsb	r2, sl, #0
 800ea82:	4640      	mov	r0, r8
 800ea84:	4649      	mov	r1, r9
 800ea86:	f000 fe3b 	bl	800f700 <scalbn>
 800ea8a:	2200      	movs	r2, #0
 800ea8c:	4ba5      	ldr	r3, [pc, #660]	; (800ed24 <__kernel_rem_pio2+0x688>)
 800ea8e:	4604      	mov	r4, r0
 800ea90:	460d      	mov	r5, r1
 800ea92:	f7f1 ffe3 	bl	8000a5c <__aeabi_dcmpge>
 800ea96:	b1f8      	cbz	r0, 800ead8 <__kernel_rem_pio2+0x43c>
 800ea98:	2200      	movs	r2, #0
 800ea9a:	4ba3      	ldr	r3, [pc, #652]	; (800ed28 <__kernel_rem_pio2+0x68c>)
 800ea9c:	4620      	mov	r0, r4
 800ea9e:	4629      	mov	r1, r5
 800eaa0:	f7f1 fd56 	bl	8000550 <__aeabi_dmul>
 800eaa4:	f7f2 f804 	bl	8000ab0 <__aeabi_d2iz>
 800eaa8:	4606      	mov	r6, r0
 800eaaa:	f7f1 fce7 	bl	800047c <__aeabi_i2d>
 800eaae:	2200      	movs	r2, #0
 800eab0:	4b9c      	ldr	r3, [pc, #624]	; (800ed24 <__kernel_rem_pio2+0x688>)
 800eab2:	f7f1 fd4d 	bl	8000550 <__aeabi_dmul>
 800eab6:	460b      	mov	r3, r1
 800eab8:	4602      	mov	r2, r0
 800eaba:	4629      	mov	r1, r5
 800eabc:	4620      	mov	r0, r4
 800eabe:	f7f1 fb8f 	bl	80001e0 <__aeabi_dsub>
 800eac2:	f7f1 fff5 	bl	8000ab0 <__aeabi_d2iz>
 800eac6:	1c7c      	adds	r4, r7, #1
 800eac8:	ab0c      	add	r3, sp, #48	; 0x30
 800eaca:	f843 0027 	str.w	r0, [r3, r7, lsl #2]
 800eace:	f10a 0a18 	add.w	sl, sl, #24
 800ead2:	f843 6024 	str.w	r6, [r3, r4, lsl #2]
 800ead6:	e72d      	b.n	800e934 <__kernel_rem_pio2+0x298>
 800ead8:	4620      	mov	r0, r4
 800eada:	4629      	mov	r1, r5
 800eadc:	f7f1 ffe8 	bl	8000ab0 <__aeabi_d2iz>
 800eae0:	ab0c      	add	r3, sp, #48	; 0x30
 800eae2:	463c      	mov	r4, r7
 800eae4:	f843 0027 	str.w	r0, [r3, r7, lsl #2]
 800eae8:	e724      	b.n	800e934 <__kernel_rem_pio2+0x298>
 800eaea:	ab0c      	add	r3, sp, #48	; 0x30
 800eaec:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 800eaf0:	f7f1 fcc4 	bl	800047c <__aeabi_i2d>
 800eaf4:	4632      	mov	r2, r6
 800eaf6:	463b      	mov	r3, r7
 800eaf8:	f7f1 fd2a 	bl	8000550 <__aeabi_dmul>
 800eafc:	4642      	mov	r2, r8
 800eafe:	e86b 0102 	strd	r0, r1, [fp], #-8
 800eb02:	464b      	mov	r3, r9
 800eb04:	4630      	mov	r0, r6
 800eb06:	4639      	mov	r1, r7
 800eb08:	f7f1 fd22 	bl	8000550 <__aeabi_dmul>
 800eb0c:	f10a 3aff 	add.w	sl, sl, #4294967295
 800eb10:	4606      	mov	r6, r0
 800eb12:	460f      	mov	r7, r1
 800eb14:	e71f      	b.n	800e956 <__kernel_rem_pio2+0x2ba>
 800eb16:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 800eb1a:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 800eb1e:	f7f1 fd17 	bl	8000550 <__aeabi_dmul>
 800eb22:	4602      	mov	r2, r0
 800eb24:	460b      	mov	r3, r1
 800eb26:	4650      	mov	r0, sl
 800eb28:	4659      	mov	r1, fp
 800eb2a:	f7f1 fb5b 	bl	80001e4 <__adddf3>
 800eb2e:	4682      	mov	sl, r0
 800eb30:	468b      	mov	fp, r1
 800eb32:	3601      	adds	r6, #1
 800eb34:	9b04      	ldr	r3, [sp, #16]
 800eb36:	429e      	cmp	r6, r3
 800eb38:	dc01      	bgt.n	800eb3e <__kernel_rem_pio2+0x4a2>
 800eb3a:	45b0      	cmp	r8, r6
 800eb3c:	daeb      	bge.n	800eb16 <__kernel_rem_pio2+0x47a>
 800eb3e:	ab48      	add	r3, sp, #288	; 0x120
 800eb40:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800eb44:	e9c3 ab00 	strd	sl, fp, [r3]
 800eb48:	3f01      	subs	r7, #1
 800eb4a:	f108 0801 	add.w	r8, r8, #1
 800eb4e:	e709      	b.n	800e964 <__kernel_rem_pio2+0x2c8>
 800eb50:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 800eb52:	2b02      	cmp	r3, #2
 800eb54:	dc09      	bgt.n	800eb6a <__kernel_rem_pio2+0x4ce>
 800eb56:	2b00      	cmp	r3, #0
 800eb58:	dc34      	bgt.n	800ebc4 <__kernel_rem_pio2+0x528>
 800eb5a:	d05e      	beq.n	800ec1a <__kernel_rem_pio2+0x57e>
 800eb5c:	9b07      	ldr	r3, [sp, #28]
 800eb5e:	f003 0007 	and.w	r0, r3, #7
 800eb62:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 800eb66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eb6a:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 800eb6c:	2b03      	cmp	r3, #3
 800eb6e:	d1f5      	bne.n	800eb5c <__kernel_rem_pio2+0x4c0>
 800eb70:	9a06      	ldr	r2, [sp, #24]
 800eb72:	ab48      	add	r3, sp, #288	; 0x120
 800eb74:	441a      	add	r2, r3
 800eb76:	4615      	mov	r5, r2
 800eb78:	4692      	mov	sl, r2
 800eb7a:	46a3      	mov	fp, r4
 800eb7c:	f1bb 0f00 	cmp.w	fp, #0
 800eb80:	dc7a      	bgt.n	800ec78 <__kernel_rem_pio2+0x5dc>
 800eb82:	46aa      	mov	sl, r5
 800eb84:	46a3      	mov	fp, r4
 800eb86:	f1bb 0f01 	cmp.w	fp, #1
 800eb8a:	f300 8094 	bgt.w	800ecb6 <__kernel_rem_pio2+0x61a>
 800eb8e:	2700      	movs	r7, #0
 800eb90:	463e      	mov	r6, r7
 800eb92:	2c01      	cmp	r4, #1
 800eb94:	f300 80ae 	bgt.w	800ecf4 <__kernel_rem_pio2+0x658>
 800eb98:	e9dd 5048 	ldrd	r5, r0, [sp, #288]	; 0x120
 800eb9c:	e9dd 414a 	ldrd	r4, r1, [sp, #296]	; 0x128
 800eba0:	9b02      	ldr	r3, [sp, #8]
 800eba2:	2b00      	cmp	r3, #0
 800eba4:	f040 80b0 	bne.w	800ed08 <__kernel_rem_pio2+0x66c>
 800eba8:	4603      	mov	r3, r0
 800ebaa:	462a      	mov	r2, r5
 800ebac:	9801      	ldr	r0, [sp, #4]
 800ebae:	e9c0 2300 	strd	r2, r3, [r0]
 800ebb2:	4622      	mov	r2, r4
 800ebb4:	460b      	mov	r3, r1
 800ebb6:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800ebba:	463a      	mov	r2, r7
 800ebbc:	4633      	mov	r3, r6
 800ebbe:	e9c0 2304 	strd	r2, r3, [r0, #16]
 800ebc2:	e7cb      	b.n	800eb5c <__kernel_rem_pio2+0x4c0>
 800ebc4:	2000      	movs	r0, #0
 800ebc6:	9a06      	ldr	r2, [sp, #24]
 800ebc8:	ab48      	add	r3, sp, #288	; 0x120
 800ebca:	441a      	add	r2, r3
 800ebcc:	4615      	mov	r5, r2
 800ebce:	46a0      	mov	r8, r4
 800ebd0:	4601      	mov	r1, r0
 800ebd2:	f1b8 0f00 	cmp.w	r8, #0
 800ebd6:	da3c      	bge.n	800ec52 <__kernel_rem_pio2+0x5b6>
 800ebd8:	9b02      	ldr	r3, [sp, #8]
 800ebda:	2b00      	cmp	r3, #0
 800ebdc:	d040      	beq.n	800ec60 <__kernel_rem_pio2+0x5c4>
 800ebde:	f101 4500 	add.w	r5, r1, #2147483648	; 0x80000000
 800ebe2:	4602      	mov	r2, r0
 800ebe4:	462b      	mov	r3, r5
 800ebe6:	9d01      	ldr	r5, [sp, #4]
 800ebe8:	2601      	movs	r6, #1
 800ebea:	e9c5 2300 	strd	r2, r3, [r5]
 800ebee:	460b      	mov	r3, r1
 800ebf0:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 800ebf4:	f7f1 faf4 	bl	80001e0 <__aeabi_dsub>
 800ebf8:	4684      	mov	ip, r0
 800ebfa:	460f      	mov	r7, r1
 800ebfc:	ad48      	add	r5, sp, #288	; 0x120
 800ebfe:	42b4      	cmp	r4, r6
 800ec00:	f105 0508 	add.w	r5, r5, #8
 800ec04:	da2e      	bge.n	800ec64 <__kernel_rem_pio2+0x5c8>
 800ec06:	9b02      	ldr	r3, [sp, #8]
 800ec08:	b10b      	cbz	r3, 800ec0e <__kernel_rem_pio2+0x572>
 800ec0a:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
 800ec0e:	4662      	mov	r2, ip
 800ec10:	463b      	mov	r3, r7
 800ec12:	9901      	ldr	r1, [sp, #4]
 800ec14:	e9c1 2302 	strd	r2, r3, [r1, #8]
 800ec18:	e7a0      	b.n	800eb5c <__kernel_rem_pio2+0x4c0>
 800ec1a:	9a06      	ldr	r2, [sp, #24]
 800ec1c:	9ea2      	ldr	r6, [sp, #648]	; 0x288
 800ec1e:	ab48      	add	r3, sp, #288	; 0x120
 800ec20:	441a      	add	r2, r3
 800ec22:	4615      	mov	r5, r2
 800ec24:	4637      	mov	r7, r6
 800ec26:	2c00      	cmp	r4, #0
 800ec28:	da09      	bge.n	800ec3e <__kernel_rem_pio2+0x5a2>
 800ec2a:	9b02      	ldr	r3, [sp, #8]
 800ec2c:	b10b      	cbz	r3, 800ec32 <__kernel_rem_pio2+0x596>
 800ec2e:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
 800ec32:	4632      	mov	r2, r6
 800ec34:	463b      	mov	r3, r7
 800ec36:	9901      	ldr	r1, [sp, #4]
 800ec38:	e9c1 2300 	strd	r2, r3, [r1]
 800ec3c:	e78e      	b.n	800eb5c <__kernel_rem_pio2+0x4c0>
 800ec3e:	4630      	mov	r0, r6
 800ec40:	e875 2302 	ldrd	r2, r3, [r5], #-8
 800ec44:	4639      	mov	r1, r7
 800ec46:	f7f1 facd 	bl	80001e4 <__adddf3>
 800ec4a:	3c01      	subs	r4, #1
 800ec4c:	4606      	mov	r6, r0
 800ec4e:	460f      	mov	r7, r1
 800ec50:	e7e9      	b.n	800ec26 <__kernel_rem_pio2+0x58a>
 800ec52:	e875 2302 	ldrd	r2, r3, [r5], #-8
 800ec56:	f7f1 fac5 	bl	80001e4 <__adddf3>
 800ec5a:	f108 38ff 	add.w	r8, r8, #4294967295
 800ec5e:	e7b8      	b.n	800ebd2 <__kernel_rem_pio2+0x536>
 800ec60:	460d      	mov	r5, r1
 800ec62:	e7be      	b.n	800ebe2 <__kernel_rem_pio2+0x546>
 800ec64:	4660      	mov	r0, ip
 800ec66:	e9d5 2300 	ldrd	r2, r3, [r5]
 800ec6a:	4639      	mov	r1, r7
 800ec6c:	f7f1 faba 	bl	80001e4 <__adddf3>
 800ec70:	3601      	adds	r6, #1
 800ec72:	4684      	mov	ip, r0
 800ec74:	460f      	mov	r7, r1
 800ec76:	e7c2      	b.n	800ebfe <__kernel_rem_pio2+0x562>
 800ec78:	e9da 6700 	ldrd	r6, r7, [sl]
 800ec7c:	e95a 8902 	ldrd	r8, r9, [sl, #-8]
 800ec80:	4632      	mov	r2, r6
 800ec82:	463b      	mov	r3, r7
 800ec84:	4640      	mov	r0, r8
 800ec86:	4649      	mov	r1, r9
 800ec88:	f7f1 faac 	bl	80001e4 <__adddf3>
 800ec8c:	4602      	mov	r2, r0
 800ec8e:	460b      	mov	r3, r1
 800ec90:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ec94:	4640      	mov	r0, r8
 800ec96:	4649      	mov	r1, r9
 800ec98:	f7f1 faa2 	bl	80001e0 <__aeabi_dsub>
 800ec9c:	4632      	mov	r2, r6
 800ec9e:	463b      	mov	r3, r7
 800eca0:	f7f1 faa0 	bl	80001e4 <__adddf3>
 800eca4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800eca8:	e86a 0102 	strd	r0, r1, [sl], #-8
 800ecac:	f10b 3bff 	add.w	fp, fp, #4294967295
 800ecb0:	e9ca 2300 	strd	r2, r3, [sl]
 800ecb4:	e762      	b.n	800eb7c <__kernel_rem_pio2+0x4e0>
 800ecb6:	e9da 8900 	ldrd	r8, r9, [sl]
 800ecba:	e95a 6702 	ldrd	r6, r7, [sl, #-8]
 800ecbe:	4642      	mov	r2, r8
 800ecc0:	464b      	mov	r3, r9
 800ecc2:	4630      	mov	r0, r6
 800ecc4:	4639      	mov	r1, r7
 800ecc6:	f7f1 fa8d 	bl	80001e4 <__adddf3>
 800ecca:	4602      	mov	r2, r0
 800eccc:	460b      	mov	r3, r1
 800ecce:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ecd2:	4630      	mov	r0, r6
 800ecd4:	4639      	mov	r1, r7
 800ecd6:	f7f1 fa83 	bl	80001e0 <__aeabi_dsub>
 800ecda:	4642      	mov	r2, r8
 800ecdc:	464b      	mov	r3, r9
 800ecde:	f7f1 fa81 	bl	80001e4 <__adddf3>
 800ece2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ece6:	e86a 0102 	strd	r0, r1, [sl], #-8
 800ecea:	f10b 3bff 	add.w	fp, fp, #4294967295
 800ecee:	e9ca 2300 	strd	r2, r3, [sl]
 800ecf2:	e748      	b.n	800eb86 <__kernel_rem_pio2+0x4ea>
 800ecf4:	4638      	mov	r0, r7
 800ecf6:	e875 2302 	ldrd	r2, r3, [r5], #-8
 800ecfa:	4631      	mov	r1, r6
 800ecfc:	f7f1 fa72 	bl	80001e4 <__adddf3>
 800ed00:	3c01      	subs	r4, #1
 800ed02:	4607      	mov	r7, r0
 800ed04:	460e      	mov	r6, r1
 800ed06:	e744      	b.n	800eb92 <__kernel_rem_pio2+0x4f6>
 800ed08:	9b01      	ldr	r3, [sp, #4]
 800ed0a:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800ed0e:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 800ed12:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
 800ed16:	e9c3 0401 	strd	r0, r4, [r3, #4]
 800ed1a:	e9c3 1703 	strd	r1, r7, [r3, #12]
 800ed1e:	601d      	str	r5, [r3, #0]
 800ed20:	615e      	str	r6, [r3, #20]
 800ed22:	e71b      	b.n	800eb5c <__kernel_rem_pio2+0x4c0>
 800ed24:	41700000 	.word	0x41700000
 800ed28:	3e700000 	.word	0x3e700000
 800ed2c:	00000000 	.word	0x00000000

0800ed30 <__kernel_sin>:
 800ed30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ed34:	b086      	sub	sp, #24
 800ed36:	e9cd 2300 	strd	r2, r3, [sp]
 800ed3a:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800ed3e:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800ed42:	4682      	mov	sl, r0
 800ed44:	460c      	mov	r4, r1
 800ed46:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 800ed48:	da03      	bge.n	800ed52 <__kernel_sin+0x22>
 800ed4a:	f7f1 feb1 	bl	8000ab0 <__aeabi_d2iz>
 800ed4e:	2800      	cmp	r0, #0
 800ed50:	d050      	beq.n	800edf4 <__kernel_sin+0xc4>
 800ed52:	4652      	mov	r2, sl
 800ed54:	4623      	mov	r3, r4
 800ed56:	4650      	mov	r0, sl
 800ed58:	4621      	mov	r1, r4
 800ed5a:	f7f1 fbf9 	bl	8000550 <__aeabi_dmul>
 800ed5e:	4606      	mov	r6, r0
 800ed60:	460f      	mov	r7, r1
 800ed62:	4602      	mov	r2, r0
 800ed64:	460b      	mov	r3, r1
 800ed66:	4650      	mov	r0, sl
 800ed68:	4621      	mov	r1, r4
 800ed6a:	f7f1 fbf1 	bl	8000550 <__aeabi_dmul>
 800ed6e:	a33e      	add	r3, pc, #248	; (adr r3, 800ee68 <__kernel_sin+0x138>)
 800ed70:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed74:	4680      	mov	r8, r0
 800ed76:	4689      	mov	r9, r1
 800ed78:	4630      	mov	r0, r6
 800ed7a:	4639      	mov	r1, r7
 800ed7c:	f7f1 fbe8 	bl	8000550 <__aeabi_dmul>
 800ed80:	a33b      	add	r3, pc, #236	; (adr r3, 800ee70 <__kernel_sin+0x140>)
 800ed82:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed86:	f7f1 fa2b 	bl	80001e0 <__aeabi_dsub>
 800ed8a:	4632      	mov	r2, r6
 800ed8c:	463b      	mov	r3, r7
 800ed8e:	f7f1 fbdf 	bl	8000550 <__aeabi_dmul>
 800ed92:	a339      	add	r3, pc, #228	; (adr r3, 800ee78 <__kernel_sin+0x148>)
 800ed94:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed98:	f7f1 fa24 	bl	80001e4 <__adddf3>
 800ed9c:	4632      	mov	r2, r6
 800ed9e:	463b      	mov	r3, r7
 800eda0:	f7f1 fbd6 	bl	8000550 <__aeabi_dmul>
 800eda4:	a336      	add	r3, pc, #216	; (adr r3, 800ee80 <__kernel_sin+0x150>)
 800eda6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800edaa:	f7f1 fa19 	bl	80001e0 <__aeabi_dsub>
 800edae:	4632      	mov	r2, r6
 800edb0:	463b      	mov	r3, r7
 800edb2:	f7f1 fbcd 	bl	8000550 <__aeabi_dmul>
 800edb6:	a334      	add	r3, pc, #208	; (adr r3, 800ee88 <__kernel_sin+0x158>)
 800edb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800edbc:	f7f1 fa12 	bl	80001e4 <__adddf3>
 800edc0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800edc4:	b9dd      	cbnz	r5, 800edfe <__kernel_sin+0xce>
 800edc6:	4602      	mov	r2, r0
 800edc8:	460b      	mov	r3, r1
 800edca:	4630      	mov	r0, r6
 800edcc:	4639      	mov	r1, r7
 800edce:	f7f1 fbbf 	bl	8000550 <__aeabi_dmul>
 800edd2:	a32f      	add	r3, pc, #188	; (adr r3, 800ee90 <__kernel_sin+0x160>)
 800edd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800edd8:	f7f1 fa02 	bl	80001e0 <__aeabi_dsub>
 800eddc:	4642      	mov	r2, r8
 800edde:	464b      	mov	r3, r9
 800ede0:	f7f1 fbb6 	bl	8000550 <__aeabi_dmul>
 800ede4:	4602      	mov	r2, r0
 800ede6:	460b      	mov	r3, r1
 800ede8:	4650      	mov	r0, sl
 800edea:	4621      	mov	r1, r4
 800edec:	f7f1 f9fa 	bl	80001e4 <__adddf3>
 800edf0:	4682      	mov	sl, r0
 800edf2:	460c      	mov	r4, r1
 800edf4:	4650      	mov	r0, sl
 800edf6:	4621      	mov	r1, r4
 800edf8:	b006      	add	sp, #24
 800edfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800edfe:	2200      	movs	r2, #0
 800ee00:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ee04:	4b24      	ldr	r3, [pc, #144]	; (800ee98 <__kernel_sin+0x168>)
 800ee06:	f7f1 fba3 	bl	8000550 <__aeabi_dmul>
 800ee0a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ee0e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ee12:	4640      	mov	r0, r8
 800ee14:	4649      	mov	r1, r9
 800ee16:	f7f1 fb9b 	bl	8000550 <__aeabi_dmul>
 800ee1a:	4602      	mov	r2, r0
 800ee1c:	460b      	mov	r3, r1
 800ee1e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ee22:	f7f1 f9dd 	bl	80001e0 <__aeabi_dsub>
 800ee26:	4632      	mov	r2, r6
 800ee28:	463b      	mov	r3, r7
 800ee2a:	f7f1 fb91 	bl	8000550 <__aeabi_dmul>
 800ee2e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ee32:	f7f1 f9d5 	bl	80001e0 <__aeabi_dsub>
 800ee36:	a316      	add	r3, pc, #88	; (adr r3, 800ee90 <__kernel_sin+0x160>)
 800ee38:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee3c:	4606      	mov	r6, r0
 800ee3e:	460f      	mov	r7, r1
 800ee40:	4640      	mov	r0, r8
 800ee42:	4649      	mov	r1, r9
 800ee44:	f7f1 fb84 	bl	8000550 <__aeabi_dmul>
 800ee48:	4602      	mov	r2, r0
 800ee4a:	460b      	mov	r3, r1
 800ee4c:	4630      	mov	r0, r6
 800ee4e:	4639      	mov	r1, r7
 800ee50:	f7f1 f9c8 	bl	80001e4 <__adddf3>
 800ee54:	4602      	mov	r2, r0
 800ee56:	460b      	mov	r3, r1
 800ee58:	4650      	mov	r0, sl
 800ee5a:	4621      	mov	r1, r4
 800ee5c:	f7f1 f9c0 	bl	80001e0 <__aeabi_dsub>
 800ee60:	e7c6      	b.n	800edf0 <__kernel_sin+0xc0>
 800ee62:	bf00      	nop
 800ee64:	f3af 8000 	nop.w
 800ee68:	5acfd57c 	.word	0x5acfd57c
 800ee6c:	3de5d93a 	.word	0x3de5d93a
 800ee70:	8a2b9ceb 	.word	0x8a2b9ceb
 800ee74:	3e5ae5e6 	.word	0x3e5ae5e6
 800ee78:	57b1fe7d 	.word	0x57b1fe7d
 800ee7c:	3ec71de3 	.word	0x3ec71de3
 800ee80:	19c161d5 	.word	0x19c161d5
 800ee84:	3f2a01a0 	.word	0x3f2a01a0
 800ee88:	1110f8a6 	.word	0x1110f8a6
 800ee8c:	3f811111 	.word	0x3f811111
 800ee90:	55555549 	.word	0x55555549
 800ee94:	3fc55555 	.word	0x3fc55555
 800ee98:	3fe00000 	.word	0x3fe00000

0800ee9c <__kernel_cosf>:
 800ee9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eea0:	f020 4400 	bic.w	r4, r0, #2147483648	; 0x80000000
 800eea4:	f1b4 5f48 	cmp.w	r4, #838860800	; 0x32000000
 800eea8:	4606      	mov	r6, r0
 800eeaa:	4688      	mov	r8, r1
 800eeac:	da03      	bge.n	800eeb6 <__kernel_cosf+0x1a>
 800eeae:	f7f2 f961 	bl	8001174 <__aeabi_f2iz>
 800eeb2:	2800      	cmp	r0, #0
 800eeb4:	d05c      	beq.n	800ef70 <__kernel_cosf+0xd4>
 800eeb6:	4631      	mov	r1, r6
 800eeb8:	4630      	mov	r0, r6
 800eeba:	f7f1 ff7f 	bl	8000dbc <__aeabi_fmul>
 800eebe:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800eec2:	4605      	mov	r5, r0
 800eec4:	f7f1 ff7a 	bl	8000dbc <__aeabi_fmul>
 800eec8:	492b      	ldr	r1, [pc, #172]	; (800ef78 <__kernel_cosf+0xdc>)
 800eeca:	4607      	mov	r7, r0
 800eecc:	4628      	mov	r0, r5
 800eece:	f7f1 ff75 	bl	8000dbc <__aeabi_fmul>
 800eed2:	492a      	ldr	r1, [pc, #168]	; (800ef7c <__kernel_cosf+0xe0>)
 800eed4:	f7f1 fe6a 	bl	8000bac <__addsf3>
 800eed8:	4629      	mov	r1, r5
 800eeda:	f7f1 ff6f 	bl	8000dbc <__aeabi_fmul>
 800eede:	4928      	ldr	r1, [pc, #160]	; (800ef80 <__kernel_cosf+0xe4>)
 800eee0:	f7f1 fe62 	bl	8000ba8 <__aeabi_fsub>
 800eee4:	4629      	mov	r1, r5
 800eee6:	f7f1 ff69 	bl	8000dbc <__aeabi_fmul>
 800eeea:	4926      	ldr	r1, [pc, #152]	; (800ef84 <__kernel_cosf+0xe8>)
 800eeec:	f7f1 fe5e 	bl	8000bac <__addsf3>
 800eef0:	4629      	mov	r1, r5
 800eef2:	f7f1 ff63 	bl	8000dbc <__aeabi_fmul>
 800eef6:	4924      	ldr	r1, [pc, #144]	; (800ef88 <__kernel_cosf+0xec>)
 800eef8:	f7f1 fe56 	bl	8000ba8 <__aeabi_fsub>
 800eefc:	4629      	mov	r1, r5
 800eefe:	f7f1 ff5d 	bl	8000dbc <__aeabi_fmul>
 800ef02:	4922      	ldr	r1, [pc, #136]	; (800ef8c <__kernel_cosf+0xf0>)
 800ef04:	f7f1 fe52 	bl	8000bac <__addsf3>
 800ef08:	4629      	mov	r1, r5
 800ef0a:	f7f1 ff57 	bl	8000dbc <__aeabi_fmul>
 800ef0e:	4629      	mov	r1, r5
 800ef10:	f7f1 ff54 	bl	8000dbc <__aeabi_fmul>
 800ef14:	4641      	mov	r1, r8
 800ef16:	4605      	mov	r5, r0
 800ef18:	4630      	mov	r0, r6
 800ef1a:	f7f1 ff4f 	bl	8000dbc <__aeabi_fmul>
 800ef1e:	4601      	mov	r1, r0
 800ef20:	4628      	mov	r0, r5
 800ef22:	f7f1 fe41 	bl	8000ba8 <__aeabi_fsub>
 800ef26:	4b1a      	ldr	r3, [pc, #104]	; (800ef90 <__kernel_cosf+0xf4>)
 800ef28:	4605      	mov	r5, r0
 800ef2a:	429c      	cmp	r4, r3
 800ef2c:	dc0a      	bgt.n	800ef44 <__kernel_cosf+0xa8>
 800ef2e:	4601      	mov	r1, r0
 800ef30:	4638      	mov	r0, r7
 800ef32:	f7f1 fe39 	bl	8000ba8 <__aeabi_fsub>
 800ef36:	4601      	mov	r1, r0
 800ef38:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800ef3c:	f7f1 fe34 	bl	8000ba8 <__aeabi_fsub>
 800ef40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ef44:	4b13      	ldr	r3, [pc, #76]	; (800ef94 <__kernel_cosf+0xf8>)
 800ef46:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800ef4a:	429c      	cmp	r4, r3
 800ef4c:	bfcc      	ite	gt
 800ef4e:	4c12      	ldrgt	r4, [pc, #72]	; (800ef98 <__kernel_cosf+0xfc>)
 800ef50:	f104 447f 	addle.w	r4, r4, #4278190080	; 0xff000000
 800ef54:	4621      	mov	r1, r4
 800ef56:	f7f1 fe27 	bl	8000ba8 <__aeabi_fsub>
 800ef5a:	4621      	mov	r1, r4
 800ef5c:	4606      	mov	r6, r0
 800ef5e:	4638      	mov	r0, r7
 800ef60:	f7f1 fe22 	bl	8000ba8 <__aeabi_fsub>
 800ef64:	4629      	mov	r1, r5
 800ef66:	f7f1 fe1f 	bl	8000ba8 <__aeabi_fsub>
 800ef6a:	4601      	mov	r1, r0
 800ef6c:	4630      	mov	r0, r6
 800ef6e:	e7e5      	b.n	800ef3c <__kernel_cosf+0xa0>
 800ef70:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800ef74:	e7e4      	b.n	800ef40 <__kernel_cosf+0xa4>
 800ef76:	bf00      	nop
 800ef78:	ad47d74e 	.word	0xad47d74e
 800ef7c:	310f74f6 	.word	0x310f74f6
 800ef80:	3493f27c 	.word	0x3493f27c
 800ef84:	37d00d01 	.word	0x37d00d01
 800ef88:	3ab60b61 	.word	0x3ab60b61
 800ef8c:	3d2aaaab 	.word	0x3d2aaaab
 800ef90:	3e999999 	.word	0x3e999999
 800ef94:	3f480000 	.word	0x3f480000
 800ef98:	3e900000 	.word	0x3e900000

0800ef9c <__kernel_rem_pio2f>:
 800ef9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800efa0:	b0db      	sub	sp, #364	; 0x16c
 800efa2:	9202      	str	r2, [sp, #8]
 800efa4:	9304      	str	r3, [sp, #16]
 800efa6:	9a64      	ldr	r2, [sp, #400]	; 0x190
 800efa8:	4bc5      	ldr	r3, [pc, #788]	; (800f2c0 <__kernel_rem_pio2f+0x324>)
 800efaa:	9005      	str	r0, [sp, #20]
 800efac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800efb0:	9100      	str	r1, [sp, #0]
 800efb2:	9301      	str	r3, [sp, #4]
 800efb4:	9b04      	ldr	r3, [sp, #16]
 800efb6:	3b01      	subs	r3, #1
 800efb8:	9303      	str	r3, [sp, #12]
 800efba:	9b02      	ldr	r3, [sp, #8]
 800efbc:	1d1a      	adds	r2, r3, #4
 800efbe:	f2c0 809b 	blt.w	800f0f8 <__kernel_rem_pio2f+0x15c>
 800efc2:	1edc      	subs	r4, r3, #3
 800efc4:	bf48      	it	mi
 800efc6:	1d1c      	addmi	r4, r3, #4
 800efc8:	10e4      	asrs	r4, r4, #3
 800efca:	2500      	movs	r5, #0
 800efcc:	f04f 0a00 	mov.w	sl, #0
 800efd0:	1c67      	adds	r7, r4, #1
 800efd2:	00fb      	lsls	r3, r7, #3
 800efd4:	9306      	str	r3, [sp, #24]
 800efd6:	9b02      	ldr	r3, [sp, #8]
 800efd8:	9a03      	ldr	r2, [sp, #12]
 800efda:	eba3 07c7 	sub.w	r7, r3, r7, lsl #3
 800efde:	9b01      	ldr	r3, [sp, #4]
 800efe0:	1aa6      	subs	r6, r4, r2
 800efe2:	eb03 0802 	add.w	r8, r3, r2
 800efe6:	9b65      	ldr	r3, [sp, #404]	; 0x194
 800efe8:	f10d 0b78 	add.w	fp, sp, #120	; 0x78
 800efec:	eb03 0986 	add.w	r9, r3, r6, lsl #2
 800eff0:	4545      	cmp	r5, r8
 800eff2:	f340 8083 	ble.w	800f0fc <__kernel_rem_pio2f+0x160>
 800eff6:	f04f 0800 	mov.w	r8, #0
 800effa:	f04f 0b00 	mov.w	fp, #0
 800effe:	9b04      	ldr	r3, [sp, #16]
 800f000:	aa1e      	add	r2, sp, #120	; 0x78
 800f002:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 800f006:	ab46      	add	r3, sp, #280	; 0x118
 800f008:	9a01      	ldr	r2, [sp, #4]
 800f00a:	4590      	cmp	r8, r2
 800f00c:	f340 809c 	ble.w	800f148 <__kernel_rem_pio2f+0x1ac>
 800f010:	4613      	mov	r3, r2
 800f012:	aa0a      	add	r2, sp, #40	; 0x28
 800f014:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800f018:	9308      	str	r3, [sp, #32]
 800f01a:	9b65      	ldr	r3, [sp, #404]	; 0x194
 800f01c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800f020:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800f024:	9307      	str	r3, [sp, #28]
 800f026:	ad0a      	add	r5, sp, #40	; 0x28
 800f028:	462e      	mov	r6, r5
 800f02a:	46c3      	mov	fp, r8
 800f02c:	f04f 4987 	mov.w	r9, #1132462080	; 0x43800000
 800f030:	ab5a      	add	r3, sp, #360	; 0x168
 800f032:	eb03 0388 	add.w	r3, r3, r8, lsl #2
 800f036:	f853 4c50 	ldr.w	r4, [r3, #-80]
 800f03a:	f50d 7a8c 	add.w	sl, sp, #280	; 0x118
 800f03e:	f1bb 0f00 	cmp.w	fp, #0
 800f042:	f300 8086 	bgt.w	800f152 <__kernel_rem_pio2f+0x1b6>
 800f046:	4639      	mov	r1, r7
 800f048:	4620      	mov	r0, r4
 800f04a:	f000 fc25 	bl	800f898 <scalbnf>
 800f04e:	f04f 5178 	mov.w	r1, #1040187392	; 0x3e000000
 800f052:	4604      	mov	r4, r0
 800f054:	f7f1 feb2 	bl	8000dbc <__aeabi_fmul>
 800f058:	f000 fbd8 	bl	800f80c <floorf>
 800f05c:	f04f 4182 	mov.w	r1, #1090519040	; 0x41000000
 800f060:	f7f1 feac 	bl	8000dbc <__aeabi_fmul>
 800f064:	4601      	mov	r1, r0
 800f066:	4620      	mov	r0, r4
 800f068:	f7f1 fd9e 	bl	8000ba8 <__aeabi_fsub>
 800f06c:	4604      	mov	r4, r0
 800f06e:	f7f2 f881 	bl	8001174 <__aeabi_f2iz>
 800f072:	4606      	mov	r6, r0
 800f074:	f7f1 fe4e 	bl	8000d14 <__aeabi_i2f>
 800f078:	4601      	mov	r1, r0
 800f07a:	4620      	mov	r0, r4
 800f07c:	f7f1 fd94 	bl	8000ba8 <__aeabi_fsub>
 800f080:	2f00      	cmp	r7, #0
 800f082:	4681      	mov	r9, r0
 800f084:	f340 8084 	ble.w	800f190 <__kernel_rem_pio2f+0x1f4>
 800f088:	f108 32ff 	add.w	r2, r8, #4294967295
 800f08c:	ab0a      	add	r3, sp, #40	; 0x28
 800f08e:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
 800f092:	f1c7 0108 	rsb	r1, r7, #8
 800f096:	fa44 f301 	asr.w	r3, r4, r1
 800f09a:	441e      	add	r6, r3
 800f09c:	408b      	lsls	r3, r1
 800f09e:	1ae4      	subs	r4, r4, r3
 800f0a0:	f1c7 0007 	rsb	r0, r7, #7
 800f0a4:	ab0a      	add	r3, sp, #40	; 0x28
 800f0a6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800f0aa:	4104      	asrs	r4, r0
 800f0ac:	2c00      	cmp	r4, #0
 800f0ae:	dd7e      	ble.n	800f1ae <__kernel_rem_pio2f+0x212>
 800f0b0:	2200      	movs	r2, #0
 800f0b2:	4692      	mov	sl, r2
 800f0b4:	3601      	adds	r6, #1
 800f0b6:	4590      	cmp	r8, r2
 800f0b8:	f300 80b0 	bgt.w	800f21c <__kernel_rem_pio2f+0x280>
 800f0bc:	2f00      	cmp	r7, #0
 800f0be:	dd05      	ble.n	800f0cc <__kernel_rem_pio2f+0x130>
 800f0c0:	2f01      	cmp	r7, #1
 800f0c2:	f000 80bd 	beq.w	800f240 <__kernel_rem_pio2f+0x2a4>
 800f0c6:	2f02      	cmp	r7, #2
 800f0c8:	f000 80c5 	beq.w	800f256 <__kernel_rem_pio2f+0x2ba>
 800f0cc:	2c02      	cmp	r4, #2
 800f0ce:	d16e      	bne.n	800f1ae <__kernel_rem_pio2f+0x212>
 800f0d0:	4649      	mov	r1, r9
 800f0d2:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800f0d6:	f7f1 fd67 	bl	8000ba8 <__aeabi_fsub>
 800f0da:	4681      	mov	r9, r0
 800f0dc:	f1ba 0f00 	cmp.w	sl, #0
 800f0e0:	d065      	beq.n	800f1ae <__kernel_rem_pio2f+0x212>
 800f0e2:	4639      	mov	r1, r7
 800f0e4:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800f0e8:	f000 fbd6 	bl	800f898 <scalbnf>
 800f0ec:	4601      	mov	r1, r0
 800f0ee:	4648      	mov	r0, r9
 800f0f0:	f7f1 fd5a 	bl	8000ba8 <__aeabi_fsub>
 800f0f4:	4681      	mov	r9, r0
 800f0f6:	e05a      	b.n	800f1ae <__kernel_rem_pio2f+0x212>
 800f0f8:	2400      	movs	r4, #0
 800f0fa:	e766      	b.n	800efca <__kernel_rem_pio2f+0x2e>
 800f0fc:	42ee      	cmn	r6, r5
 800f0fe:	d407      	bmi.n	800f110 <__kernel_rem_pio2f+0x174>
 800f100:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800f104:	f7f1 fe06 	bl	8000d14 <__aeabi_i2f>
 800f108:	f84b 0025 	str.w	r0, [fp, r5, lsl #2]
 800f10c:	3501      	adds	r5, #1
 800f10e:	e76f      	b.n	800eff0 <__kernel_rem_pio2f+0x54>
 800f110:	4650      	mov	r0, sl
 800f112:	e7f9      	b.n	800f108 <__kernel_rem_pio2f+0x16c>
 800f114:	9b05      	ldr	r3, [sp, #20]
 800f116:	f8da 1000 	ldr.w	r1, [sl]
 800f11a:	f853 0029 	ldr.w	r0, [r3, r9, lsl #2]
 800f11e:	f7f1 fe4d 	bl	8000dbc <__aeabi_fmul>
 800f122:	4601      	mov	r1, r0
 800f124:	4630      	mov	r0, r6
 800f126:	f7f1 fd41 	bl	8000bac <__addsf3>
 800f12a:	4606      	mov	r6, r0
 800f12c:	f109 0901 	add.w	r9, r9, #1
 800f130:	ab46      	add	r3, sp, #280	; 0x118
 800f132:	9a03      	ldr	r2, [sp, #12]
 800f134:	f1aa 0a04 	sub.w	sl, sl, #4
 800f138:	4591      	cmp	r9, r2
 800f13a:	ddeb      	ble.n	800f114 <__kernel_rem_pio2f+0x178>
 800f13c:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 800f140:	3504      	adds	r5, #4
 800f142:	f108 0801 	add.w	r8, r8, #1
 800f146:	e75f      	b.n	800f008 <__kernel_rem_pio2f+0x6c>
 800f148:	46aa      	mov	sl, r5
 800f14a:	465e      	mov	r6, fp
 800f14c:	f04f 0900 	mov.w	r9, #0
 800f150:	e7ef      	b.n	800f132 <__kernel_rem_pio2f+0x196>
 800f152:	f04f 516e 	mov.w	r1, #998244352	; 0x3b800000
 800f156:	4620      	mov	r0, r4
 800f158:	f7f1 fe30 	bl	8000dbc <__aeabi_fmul>
 800f15c:	f7f2 f80a 	bl	8001174 <__aeabi_f2iz>
 800f160:	f7f1 fdd8 	bl	8000d14 <__aeabi_i2f>
 800f164:	4649      	mov	r1, r9
 800f166:	9009      	str	r0, [sp, #36]	; 0x24
 800f168:	f7f1 fe28 	bl	8000dbc <__aeabi_fmul>
 800f16c:	4601      	mov	r1, r0
 800f16e:	4620      	mov	r0, r4
 800f170:	f7f1 fd1a 	bl	8000ba8 <__aeabi_fsub>
 800f174:	f7f1 fffe 	bl	8001174 <__aeabi_f2iz>
 800f178:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f17a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800f17e:	f846 0b04 	str.w	r0, [r6], #4
 800f182:	f85a 102b 	ldr.w	r1, [sl, fp, lsl #2]
 800f186:	4618      	mov	r0, r3
 800f188:	f7f1 fd10 	bl	8000bac <__addsf3>
 800f18c:	4604      	mov	r4, r0
 800f18e:	e756      	b.n	800f03e <__kernel_rem_pio2f+0xa2>
 800f190:	d106      	bne.n	800f1a0 <__kernel_rem_pio2f+0x204>
 800f192:	f108 33ff 	add.w	r3, r8, #4294967295
 800f196:	aa0a      	add	r2, sp, #40	; 0x28
 800f198:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800f19c:	1224      	asrs	r4, r4, #8
 800f19e:	e785      	b.n	800f0ac <__kernel_rem_pio2f+0x110>
 800f1a0:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800f1a4:	f7f1 ffbc 	bl	8001120 <__aeabi_fcmpge>
 800f1a8:	4604      	mov	r4, r0
 800f1aa:	2800      	cmp	r0, #0
 800f1ac:	d134      	bne.n	800f218 <__kernel_rem_pio2f+0x27c>
 800f1ae:	2100      	movs	r1, #0
 800f1b0:	4648      	mov	r0, r9
 800f1b2:	f7f1 ff97 	bl	80010e4 <__aeabi_fcmpeq>
 800f1b6:	2800      	cmp	r0, #0
 800f1b8:	f000 809a 	beq.w	800f2f0 <__kernel_rem_pio2f+0x354>
 800f1bc:	f108 35ff 	add.w	r5, r8, #4294967295
 800f1c0:	462b      	mov	r3, r5
 800f1c2:	2200      	movs	r2, #0
 800f1c4:	9901      	ldr	r1, [sp, #4]
 800f1c6:	428b      	cmp	r3, r1
 800f1c8:	da4d      	bge.n	800f266 <__kernel_rem_pio2f+0x2ca>
 800f1ca:	2a00      	cmp	r2, #0
 800f1cc:	d07c      	beq.n	800f2c8 <__kernel_rem_pio2f+0x32c>
 800f1ce:	ab0a      	add	r3, sp, #40	; 0x28
 800f1d0:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800f1d4:	3f08      	subs	r7, #8
 800f1d6:	2b00      	cmp	r3, #0
 800f1d8:	f000 8088 	beq.w	800f2ec <__kernel_rem_pio2f+0x350>
 800f1dc:	4639      	mov	r1, r7
 800f1de:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800f1e2:	f000 fb59 	bl	800f898 <scalbnf>
 800f1e6:	46aa      	mov	sl, r5
 800f1e8:	4681      	mov	r9, r0
 800f1ea:	f04f 586e 	mov.w	r8, #998244352	; 0x3b800000
 800f1ee:	af46      	add	r7, sp, #280	; 0x118
 800f1f0:	f1ba 0f00 	cmp.w	sl, #0
 800f1f4:	f280 80b1 	bge.w	800f35a <__kernel_rem_pio2f+0x3be>
 800f1f8:	46a9      	mov	r9, r5
 800f1fa:	f04f 0a00 	mov.w	sl, #0
 800f1fe:	2200      	movs	r2, #0
 800f200:	f1b9 0f00 	cmp.w	r9, #0
 800f204:	f2c0 80db 	blt.w	800f3be <__kernel_rem_pio2f+0x422>
 800f208:	a946      	add	r1, sp, #280	; 0x118
 800f20a:	4617      	mov	r7, r2
 800f20c:	f04f 0800 	mov.w	r8, #0
 800f210:	4b2c      	ldr	r3, [pc, #176]	; (800f2c4 <__kernel_rem_pio2f+0x328>)
 800f212:	eb01 0b89 	add.w	fp, r1, r9, lsl #2
 800f216:	e0c3      	b.n	800f3a0 <__kernel_rem_pio2f+0x404>
 800f218:	2402      	movs	r4, #2
 800f21a:	e749      	b.n	800f0b0 <__kernel_rem_pio2f+0x114>
 800f21c:	682b      	ldr	r3, [r5, #0]
 800f21e:	f1ba 0f00 	cmp.w	sl, #0
 800f222:	d108      	bne.n	800f236 <__kernel_rem_pio2f+0x29a>
 800f224:	b11b      	cbz	r3, 800f22e <__kernel_rem_pio2f+0x292>
 800f226:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 800f22a:	602b      	str	r3, [r5, #0]
 800f22c:	2301      	movs	r3, #1
 800f22e:	469a      	mov	sl, r3
 800f230:	3201      	adds	r2, #1
 800f232:	3504      	adds	r5, #4
 800f234:	e73f      	b.n	800f0b6 <__kernel_rem_pio2f+0x11a>
 800f236:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 800f23a:	602b      	str	r3, [r5, #0]
 800f23c:	4653      	mov	r3, sl
 800f23e:	e7f6      	b.n	800f22e <__kernel_rem_pio2f+0x292>
 800f240:	f108 32ff 	add.w	r2, r8, #4294967295
 800f244:	ab0a      	add	r3, sp, #40	; 0x28
 800f246:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f24a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f24e:	a90a      	add	r1, sp, #40	; 0x28
 800f250:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800f254:	e73a      	b.n	800f0cc <__kernel_rem_pio2f+0x130>
 800f256:	f108 32ff 	add.w	r2, r8, #4294967295
 800f25a:	ab0a      	add	r3, sp, #40	; 0x28
 800f25c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f260:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f264:	e7f3      	b.n	800f24e <__kernel_rem_pio2f+0x2b2>
 800f266:	a90a      	add	r1, sp, #40	; 0x28
 800f268:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800f26c:	3b01      	subs	r3, #1
 800f26e:	430a      	orrs	r2, r1
 800f270:	e7a8      	b.n	800f1c4 <__kernel_rem_pio2f+0x228>
 800f272:	3301      	adds	r3, #1
 800f274:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800f278:	2900      	cmp	r1, #0
 800f27a:	d0fa      	beq.n	800f272 <__kernel_rem_pio2f+0x2d6>
 800f27c:	9a04      	ldr	r2, [sp, #16]
 800f27e:	f108 0501 	add.w	r5, r8, #1
 800f282:	eb08 0402 	add.w	r4, r8, r2
 800f286:	aa1e      	add	r2, sp, #120	; 0x78
 800f288:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 800f28c:	4498      	add	r8, r3
 800f28e:	f50d 798c 	add.w	r9, sp, #280	; 0x118
 800f292:	45a8      	cmp	r8, r5
 800f294:	f6ff aec7 	blt.w	800f026 <__kernel_rem_pio2f+0x8a>
 800f298:	9b07      	ldr	r3, [sp, #28]
 800f29a:	46a3      	mov	fp, r4
 800f29c:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800f2a0:	f7f1 fd38 	bl	8000d14 <__aeabi_i2f>
 800f2a4:	f04f 0a00 	mov.w	sl, #0
 800f2a8:	2600      	movs	r6, #0
 800f2aa:	f84b 0b04 	str.w	r0, [fp], #4
 800f2ae:	9b03      	ldr	r3, [sp, #12]
 800f2b0:	459a      	cmp	sl, r3
 800f2b2:	dd0c      	ble.n	800f2ce <__kernel_rem_pio2f+0x332>
 800f2b4:	f849 6025 	str.w	r6, [r9, r5, lsl #2]
 800f2b8:	465c      	mov	r4, fp
 800f2ba:	3501      	adds	r5, #1
 800f2bc:	e7e9      	b.n	800f292 <__kernel_rem_pio2f+0x2f6>
 800f2be:	bf00      	nop
 800f2c0:	080135ec 	.word	0x080135ec
 800f2c4:	080135c0 	.word	0x080135c0
 800f2c8:	2301      	movs	r3, #1
 800f2ca:	9a08      	ldr	r2, [sp, #32]
 800f2cc:	e7d2      	b.n	800f274 <__kernel_rem_pio2f+0x2d8>
 800f2ce:	9b05      	ldr	r3, [sp, #20]
 800f2d0:	f854 0904 	ldr.w	r0, [r4], #-4
 800f2d4:	f853 102a 	ldr.w	r1, [r3, sl, lsl #2]
 800f2d8:	f7f1 fd70 	bl	8000dbc <__aeabi_fmul>
 800f2dc:	4601      	mov	r1, r0
 800f2de:	4630      	mov	r0, r6
 800f2e0:	f7f1 fc64 	bl	8000bac <__addsf3>
 800f2e4:	f10a 0a01 	add.w	sl, sl, #1
 800f2e8:	4606      	mov	r6, r0
 800f2ea:	e7e0      	b.n	800f2ae <__kernel_rem_pio2f+0x312>
 800f2ec:	3d01      	subs	r5, #1
 800f2ee:	e76e      	b.n	800f1ce <__kernel_rem_pio2f+0x232>
 800f2f0:	9b06      	ldr	r3, [sp, #24]
 800f2f2:	9a02      	ldr	r2, [sp, #8]
 800f2f4:	4648      	mov	r0, r9
 800f2f6:	1a99      	subs	r1, r3, r2
 800f2f8:	f000 face 	bl	800f898 <scalbnf>
 800f2fc:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 800f300:	4605      	mov	r5, r0
 800f302:	f7f1 ff0d 	bl	8001120 <__aeabi_fcmpge>
 800f306:	b300      	cbz	r0, 800f34a <__kernel_rem_pio2f+0x3ae>
 800f308:	f04f 516e 	mov.w	r1, #998244352	; 0x3b800000
 800f30c:	4628      	mov	r0, r5
 800f30e:	f7f1 fd55 	bl	8000dbc <__aeabi_fmul>
 800f312:	f7f1 ff2f 	bl	8001174 <__aeabi_f2iz>
 800f316:	f7f1 fcfd 	bl	8000d14 <__aeabi_i2f>
 800f31a:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 800f31e:	4681      	mov	r9, r0
 800f320:	f7f1 fd4c 	bl	8000dbc <__aeabi_fmul>
 800f324:	4601      	mov	r1, r0
 800f326:	4628      	mov	r0, r5
 800f328:	f7f1 fc3e 	bl	8000ba8 <__aeabi_fsub>
 800f32c:	f7f1 ff22 	bl	8001174 <__aeabi_f2iz>
 800f330:	ab0a      	add	r3, sp, #40	; 0x28
 800f332:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 800f336:	4648      	mov	r0, r9
 800f338:	f7f1 ff1c 	bl	8001174 <__aeabi_f2iz>
 800f33c:	f108 0501 	add.w	r5, r8, #1
 800f340:	ab0a      	add	r3, sp, #40	; 0x28
 800f342:	3708      	adds	r7, #8
 800f344:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
 800f348:	e748      	b.n	800f1dc <__kernel_rem_pio2f+0x240>
 800f34a:	4628      	mov	r0, r5
 800f34c:	f7f1 ff12 	bl	8001174 <__aeabi_f2iz>
 800f350:	ab0a      	add	r3, sp, #40	; 0x28
 800f352:	4645      	mov	r5, r8
 800f354:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 800f358:	e740      	b.n	800f1dc <__kernel_rem_pio2f+0x240>
 800f35a:	ab0a      	add	r3, sp, #40	; 0x28
 800f35c:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 800f360:	f7f1 fcd8 	bl	8000d14 <__aeabi_i2f>
 800f364:	4649      	mov	r1, r9
 800f366:	f7f1 fd29 	bl	8000dbc <__aeabi_fmul>
 800f36a:	4641      	mov	r1, r8
 800f36c:	f847 002a 	str.w	r0, [r7, sl, lsl #2]
 800f370:	4648      	mov	r0, r9
 800f372:	f7f1 fd23 	bl	8000dbc <__aeabi_fmul>
 800f376:	f10a 3aff 	add.w	sl, sl, #4294967295
 800f37a:	4681      	mov	r9, r0
 800f37c:	e738      	b.n	800f1f0 <__kernel_rem_pio2f+0x254>
 800f37e:	f853 0b04 	ldr.w	r0, [r3], #4
 800f382:	f85b 1b04 	ldr.w	r1, [fp], #4
 800f386:	9203      	str	r2, [sp, #12]
 800f388:	9302      	str	r3, [sp, #8]
 800f38a:	f7f1 fd17 	bl	8000dbc <__aeabi_fmul>
 800f38e:	4601      	mov	r1, r0
 800f390:	4638      	mov	r0, r7
 800f392:	f7f1 fc0b 	bl	8000bac <__addsf3>
 800f396:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800f39a:	4607      	mov	r7, r0
 800f39c:	f108 0801 	add.w	r8, r8, #1
 800f3a0:	9901      	ldr	r1, [sp, #4]
 800f3a2:	4588      	cmp	r8, r1
 800f3a4:	dc01      	bgt.n	800f3aa <__kernel_rem_pio2f+0x40e>
 800f3a6:	45c2      	cmp	sl, r8
 800f3a8:	dae9      	bge.n	800f37e <__kernel_rem_pio2f+0x3e2>
 800f3aa:	ab5a      	add	r3, sp, #360	; 0x168
 800f3ac:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 800f3b0:	f843 7ca0 	str.w	r7, [r3, #-160]
 800f3b4:	f109 39ff 	add.w	r9, r9, #4294967295
 800f3b8:	f10a 0a01 	add.w	sl, sl, #1
 800f3bc:	e720      	b.n	800f200 <__kernel_rem_pio2f+0x264>
 800f3be:	9b64      	ldr	r3, [sp, #400]	; 0x190
 800f3c0:	2b02      	cmp	r3, #2
 800f3c2:	dc07      	bgt.n	800f3d4 <__kernel_rem_pio2f+0x438>
 800f3c4:	2b00      	cmp	r3, #0
 800f3c6:	dc4d      	bgt.n	800f464 <__kernel_rem_pio2f+0x4c8>
 800f3c8:	d02e      	beq.n	800f428 <__kernel_rem_pio2f+0x48c>
 800f3ca:	f006 0007 	and.w	r0, r6, #7
 800f3ce:	b05b      	add	sp, #364	; 0x16c
 800f3d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f3d4:	9b64      	ldr	r3, [sp, #400]	; 0x190
 800f3d6:	2b03      	cmp	r3, #3
 800f3d8:	d1f7      	bne.n	800f3ca <__kernel_rem_pio2f+0x42e>
 800f3da:	f10d 0bc8 	add.w	fp, sp, #200	; 0xc8
 800f3de:	eb0b 0785 	add.w	r7, fp, r5, lsl #2
 800f3e2:	46b8      	mov	r8, r7
 800f3e4:	46aa      	mov	sl, r5
 800f3e6:	f1ba 0f00 	cmp.w	sl, #0
 800f3ea:	dc48      	bgt.n	800f47e <__kernel_rem_pio2f+0x4e2>
 800f3ec:	46a9      	mov	r9, r5
 800f3ee:	f1b9 0f01 	cmp.w	r9, #1
 800f3f2:	dc5f      	bgt.n	800f4b4 <__kernel_rem_pio2f+0x518>
 800f3f4:	2000      	movs	r0, #0
 800f3f6:	2d01      	cmp	r5, #1
 800f3f8:	dc75      	bgt.n	800f4e6 <__kernel_rem_pio2f+0x54a>
 800f3fa:	9a32      	ldr	r2, [sp, #200]	; 0xc8
 800f3fc:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 800f3fe:	2c00      	cmp	r4, #0
 800f400:	d177      	bne.n	800f4f2 <__kernel_rem_pio2f+0x556>
 800f402:	9900      	ldr	r1, [sp, #0]
 800f404:	600a      	str	r2, [r1, #0]
 800f406:	460a      	mov	r2, r1
 800f408:	604b      	str	r3, [r1, #4]
 800f40a:	6090      	str	r0, [r2, #8]
 800f40c:	e7dd      	b.n	800f3ca <__kernel_rem_pio2f+0x42e>
 800f40e:	f857 1025 	ldr.w	r1, [r7, r5, lsl #2]
 800f412:	f7f1 fbcb 	bl	8000bac <__addsf3>
 800f416:	3d01      	subs	r5, #1
 800f418:	2d00      	cmp	r5, #0
 800f41a:	daf8      	bge.n	800f40e <__kernel_rem_pio2f+0x472>
 800f41c:	b10c      	cbz	r4, 800f422 <__kernel_rem_pio2f+0x486>
 800f41e:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800f422:	9b00      	ldr	r3, [sp, #0]
 800f424:	6018      	str	r0, [r3, #0]
 800f426:	e7d0      	b.n	800f3ca <__kernel_rem_pio2f+0x42e>
 800f428:	2000      	movs	r0, #0
 800f42a:	af32      	add	r7, sp, #200	; 0xc8
 800f42c:	e7f4      	b.n	800f418 <__kernel_rem_pio2f+0x47c>
 800f42e:	f858 1027 	ldr.w	r1, [r8, r7, lsl #2]
 800f432:	f7f1 fbbb 	bl	8000bac <__addsf3>
 800f436:	3f01      	subs	r7, #1
 800f438:	2f00      	cmp	r7, #0
 800f43a:	daf8      	bge.n	800f42e <__kernel_rem_pio2f+0x492>
 800f43c:	b1bc      	cbz	r4, 800f46e <__kernel_rem_pio2f+0x4d2>
 800f43e:	f100 4300 	add.w	r3, r0, #2147483648	; 0x80000000
 800f442:	9a00      	ldr	r2, [sp, #0]
 800f444:	4601      	mov	r1, r0
 800f446:	6013      	str	r3, [r2, #0]
 800f448:	9832      	ldr	r0, [sp, #200]	; 0xc8
 800f44a:	f7f1 fbad 	bl	8000ba8 <__aeabi_fsub>
 800f44e:	2701      	movs	r7, #1
 800f450:	f10d 08c8 	add.w	r8, sp, #200	; 0xc8
 800f454:	42bd      	cmp	r5, r7
 800f456:	da0c      	bge.n	800f472 <__kernel_rem_pio2f+0x4d6>
 800f458:	b10c      	cbz	r4, 800f45e <__kernel_rem_pio2f+0x4c2>
 800f45a:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800f45e:	9b00      	ldr	r3, [sp, #0]
 800f460:	6058      	str	r0, [r3, #4]
 800f462:	e7b2      	b.n	800f3ca <__kernel_rem_pio2f+0x42e>
 800f464:	462f      	mov	r7, r5
 800f466:	2000      	movs	r0, #0
 800f468:	f10d 08c8 	add.w	r8, sp, #200	; 0xc8
 800f46c:	e7e4      	b.n	800f438 <__kernel_rem_pio2f+0x49c>
 800f46e:	4603      	mov	r3, r0
 800f470:	e7e7      	b.n	800f442 <__kernel_rem_pio2f+0x4a6>
 800f472:	f858 1027 	ldr.w	r1, [r8, r7, lsl #2]
 800f476:	f7f1 fb99 	bl	8000bac <__addsf3>
 800f47a:	3701      	adds	r7, #1
 800f47c:	e7ea      	b.n	800f454 <__kernel_rem_pio2f+0x4b8>
 800f47e:	f8d8 3000 	ldr.w	r3, [r8]
 800f482:	f858 2c04 	ldr.w	r2, [r8, #-4]
 800f486:	4619      	mov	r1, r3
 800f488:	4610      	mov	r0, r2
 800f48a:	9302      	str	r3, [sp, #8]
 800f48c:	9201      	str	r2, [sp, #4]
 800f48e:	f7f1 fb8d 	bl	8000bac <__addsf3>
 800f492:	9a01      	ldr	r2, [sp, #4]
 800f494:	4601      	mov	r1, r0
 800f496:	4681      	mov	r9, r0
 800f498:	4610      	mov	r0, r2
 800f49a:	f7f1 fb85 	bl	8000ba8 <__aeabi_fsub>
 800f49e:	9b02      	ldr	r3, [sp, #8]
 800f4a0:	f10a 3aff 	add.w	sl, sl, #4294967295
 800f4a4:	4619      	mov	r1, r3
 800f4a6:	f7f1 fb81 	bl	8000bac <__addsf3>
 800f4aa:	f848 0904 	str.w	r0, [r8], #-4
 800f4ae:	f8c8 9000 	str.w	r9, [r8]
 800f4b2:	e798      	b.n	800f3e6 <__kernel_rem_pio2f+0x44a>
 800f4b4:	f857 3c04 	ldr.w	r3, [r7, #-4]
 800f4b8:	f8d7 a000 	ldr.w	sl, [r7]
 800f4bc:	4618      	mov	r0, r3
 800f4be:	4651      	mov	r1, sl
 800f4c0:	9301      	str	r3, [sp, #4]
 800f4c2:	f7f1 fb73 	bl	8000bac <__addsf3>
 800f4c6:	9b01      	ldr	r3, [sp, #4]
 800f4c8:	4601      	mov	r1, r0
 800f4ca:	4680      	mov	r8, r0
 800f4cc:	4618      	mov	r0, r3
 800f4ce:	f7f1 fb6b 	bl	8000ba8 <__aeabi_fsub>
 800f4d2:	4651      	mov	r1, sl
 800f4d4:	f7f1 fb6a 	bl	8000bac <__addsf3>
 800f4d8:	f847 0904 	str.w	r0, [r7], #-4
 800f4dc:	f109 39ff 	add.w	r9, r9, #4294967295
 800f4e0:	f8c7 8000 	str.w	r8, [r7]
 800f4e4:	e783      	b.n	800f3ee <__kernel_rem_pio2f+0x452>
 800f4e6:	f85b 1025 	ldr.w	r1, [fp, r5, lsl #2]
 800f4ea:	f7f1 fb5f 	bl	8000bac <__addsf3>
 800f4ee:	3d01      	subs	r5, #1
 800f4f0:	e781      	b.n	800f3f6 <__kernel_rem_pio2f+0x45a>
 800f4f2:	9900      	ldr	r1, [sp, #0]
 800f4f4:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
 800f4f8:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800f4fc:	600a      	str	r2, [r1, #0]
 800f4fe:	604b      	str	r3, [r1, #4]
 800f500:	460a      	mov	r2, r1
 800f502:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800f506:	e780      	b.n	800f40a <__kernel_rem_pio2f+0x46e>

0800f508 <__kernel_sinf>:
 800f508:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f50c:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 800f510:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 800f514:	4604      	mov	r4, r0
 800f516:	460f      	mov	r7, r1
 800f518:	4691      	mov	r9, r2
 800f51a:	da03      	bge.n	800f524 <__kernel_sinf+0x1c>
 800f51c:	f7f1 fe2a 	bl	8001174 <__aeabi_f2iz>
 800f520:	2800      	cmp	r0, #0
 800f522:	d035      	beq.n	800f590 <__kernel_sinf+0x88>
 800f524:	4621      	mov	r1, r4
 800f526:	4620      	mov	r0, r4
 800f528:	f7f1 fc48 	bl	8000dbc <__aeabi_fmul>
 800f52c:	4605      	mov	r5, r0
 800f52e:	4601      	mov	r1, r0
 800f530:	4620      	mov	r0, r4
 800f532:	f7f1 fc43 	bl	8000dbc <__aeabi_fmul>
 800f536:	4929      	ldr	r1, [pc, #164]	; (800f5dc <__kernel_sinf+0xd4>)
 800f538:	4606      	mov	r6, r0
 800f53a:	4628      	mov	r0, r5
 800f53c:	f7f1 fc3e 	bl	8000dbc <__aeabi_fmul>
 800f540:	4927      	ldr	r1, [pc, #156]	; (800f5e0 <__kernel_sinf+0xd8>)
 800f542:	f7f1 fb31 	bl	8000ba8 <__aeabi_fsub>
 800f546:	4629      	mov	r1, r5
 800f548:	f7f1 fc38 	bl	8000dbc <__aeabi_fmul>
 800f54c:	4925      	ldr	r1, [pc, #148]	; (800f5e4 <__kernel_sinf+0xdc>)
 800f54e:	f7f1 fb2d 	bl	8000bac <__addsf3>
 800f552:	4629      	mov	r1, r5
 800f554:	f7f1 fc32 	bl	8000dbc <__aeabi_fmul>
 800f558:	4923      	ldr	r1, [pc, #140]	; (800f5e8 <__kernel_sinf+0xe0>)
 800f55a:	f7f1 fb25 	bl	8000ba8 <__aeabi_fsub>
 800f55e:	4629      	mov	r1, r5
 800f560:	f7f1 fc2c 	bl	8000dbc <__aeabi_fmul>
 800f564:	4921      	ldr	r1, [pc, #132]	; (800f5ec <__kernel_sinf+0xe4>)
 800f566:	f7f1 fb21 	bl	8000bac <__addsf3>
 800f56a:	4680      	mov	r8, r0
 800f56c:	f1b9 0f00 	cmp.w	r9, #0
 800f570:	d111      	bne.n	800f596 <__kernel_sinf+0x8e>
 800f572:	4601      	mov	r1, r0
 800f574:	4628      	mov	r0, r5
 800f576:	f7f1 fc21 	bl	8000dbc <__aeabi_fmul>
 800f57a:	491d      	ldr	r1, [pc, #116]	; (800f5f0 <__kernel_sinf+0xe8>)
 800f57c:	f7f1 fb14 	bl	8000ba8 <__aeabi_fsub>
 800f580:	4631      	mov	r1, r6
 800f582:	f7f1 fc1b 	bl	8000dbc <__aeabi_fmul>
 800f586:	4601      	mov	r1, r0
 800f588:	4620      	mov	r0, r4
 800f58a:	f7f1 fb0f 	bl	8000bac <__addsf3>
 800f58e:	4604      	mov	r4, r0
 800f590:	4620      	mov	r0, r4
 800f592:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f596:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800f59a:	4638      	mov	r0, r7
 800f59c:	f7f1 fc0e 	bl	8000dbc <__aeabi_fmul>
 800f5a0:	4641      	mov	r1, r8
 800f5a2:	4681      	mov	r9, r0
 800f5a4:	4630      	mov	r0, r6
 800f5a6:	f7f1 fc09 	bl	8000dbc <__aeabi_fmul>
 800f5aa:	4601      	mov	r1, r0
 800f5ac:	4648      	mov	r0, r9
 800f5ae:	f7f1 fafb 	bl	8000ba8 <__aeabi_fsub>
 800f5b2:	4629      	mov	r1, r5
 800f5b4:	f7f1 fc02 	bl	8000dbc <__aeabi_fmul>
 800f5b8:	4639      	mov	r1, r7
 800f5ba:	f7f1 faf5 	bl	8000ba8 <__aeabi_fsub>
 800f5be:	490c      	ldr	r1, [pc, #48]	; (800f5f0 <__kernel_sinf+0xe8>)
 800f5c0:	4605      	mov	r5, r0
 800f5c2:	4630      	mov	r0, r6
 800f5c4:	f7f1 fbfa 	bl	8000dbc <__aeabi_fmul>
 800f5c8:	4601      	mov	r1, r0
 800f5ca:	4628      	mov	r0, r5
 800f5cc:	f7f1 faee 	bl	8000bac <__addsf3>
 800f5d0:	4601      	mov	r1, r0
 800f5d2:	4620      	mov	r0, r4
 800f5d4:	f7f1 fae8 	bl	8000ba8 <__aeabi_fsub>
 800f5d8:	e7d9      	b.n	800f58e <__kernel_sinf+0x86>
 800f5da:	bf00      	nop
 800f5dc:	2f2ec9d3 	.word	0x2f2ec9d3
 800f5e0:	32d72f34 	.word	0x32d72f34
 800f5e4:	3638ef1b 	.word	0x3638ef1b
 800f5e8:	39500d01 	.word	0x39500d01
 800f5ec:	3c088889 	.word	0x3c088889
 800f5f0:	3e2aaaab 	.word	0x3e2aaaab

0800f5f4 <fabs>:
 800f5f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800f5f8:	4770      	bx	lr
 800f5fa:	0000      	movs	r0, r0
 800f5fc:	0000      	movs	r0, r0
	...

0800f600 <floor>:
 800f600:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f604:	f3c1 580a 	ubfx	r8, r1, #20, #11
 800f608:	f2a8 36ff 	subw	r6, r8, #1023	; 0x3ff
 800f60c:	2e13      	cmp	r6, #19
 800f60e:	4602      	mov	r2, r0
 800f610:	460b      	mov	r3, r1
 800f612:	4607      	mov	r7, r0
 800f614:	460c      	mov	r4, r1
 800f616:	4605      	mov	r5, r0
 800f618:	dc34      	bgt.n	800f684 <floor+0x84>
 800f61a:	2e00      	cmp	r6, #0
 800f61c:	da15      	bge.n	800f64a <floor+0x4a>
 800f61e:	a334      	add	r3, pc, #208	; (adr r3, 800f6f0 <floor+0xf0>)
 800f620:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f624:	f7f0 fdde 	bl	80001e4 <__adddf3>
 800f628:	2200      	movs	r2, #0
 800f62a:	2300      	movs	r3, #0
 800f62c:	f7f1 fa20 	bl	8000a70 <__aeabi_dcmpgt>
 800f630:	b140      	cbz	r0, 800f644 <floor+0x44>
 800f632:	2c00      	cmp	r4, #0
 800f634:	da59      	bge.n	800f6ea <floor+0xea>
 800f636:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800f63a:	ea57 0503 	orrs.w	r5, r7, r3
 800f63e:	d001      	beq.n	800f644 <floor+0x44>
 800f640:	2500      	movs	r5, #0
 800f642:	4c2d      	ldr	r4, [pc, #180]	; (800f6f8 <floor+0xf8>)
 800f644:	4623      	mov	r3, r4
 800f646:	462f      	mov	r7, r5
 800f648:	e025      	b.n	800f696 <floor+0x96>
 800f64a:	4a2c      	ldr	r2, [pc, #176]	; (800f6fc <floor+0xfc>)
 800f64c:	fa42 f806 	asr.w	r8, r2, r6
 800f650:	ea01 0208 	and.w	r2, r1, r8
 800f654:	4302      	orrs	r2, r0
 800f656:	d01e      	beq.n	800f696 <floor+0x96>
 800f658:	a325      	add	r3, pc, #148	; (adr r3, 800f6f0 <floor+0xf0>)
 800f65a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f65e:	f7f0 fdc1 	bl	80001e4 <__adddf3>
 800f662:	2200      	movs	r2, #0
 800f664:	2300      	movs	r3, #0
 800f666:	f7f1 fa03 	bl	8000a70 <__aeabi_dcmpgt>
 800f66a:	2800      	cmp	r0, #0
 800f66c:	d0ea      	beq.n	800f644 <floor+0x44>
 800f66e:	2c00      	cmp	r4, #0
 800f670:	bfbe      	ittt	lt
 800f672:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800f676:	fa43 f606 	asrlt.w	r6, r3, r6
 800f67a:	19a4      	addlt	r4, r4, r6
 800f67c:	2500      	movs	r5, #0
 800f67e:	ea24 0408 	bic.w	r4, r4, r8
 800f682:	e7df      	b.n	800f644 <floor+0x44>
 800f684:	2e33      	cmp	r6, #51	; 0x33
 800f686:	dd0a      	ble.n	800f69e <floor+0x9e>
 800f688:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800f68c:	d103      	bne.n	800f696 <floor+0x96>
 800f68e:	f7f0 fda9 	bl	80001e4 <__adddf3>
 800f692:	4607      	mov	r7, r0
 800f694:	460b      	mov	r3, r1
 800f696:	4638      	mov	r0, r7
 800f698:	4619      	mov	r1, r3
 800f69a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f69e:	f04f 32ff 	mov.w	r2, #4294967295
 800f6a2:	f2a8 4813 	subw	r8, r8, #1043	; 0x413
 800f6a6:	fa22 f808 	lsr.w	r8, r2, r8
 800f6aa:	ea18 0f00 	tst.w	r8, r0
 800f6ae:	d0f2      	beq.n	800f696 <floor+0x96>
 800f6b0:	a30f      	add	r3, pc, #60	; (adr r3, 800f6f0 <floor+0xf0>)
 800f6b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f6b6:	f7f0 fd95 	bl	80001e4 <__adddf3>
 800f6ba:	2200      	movs	r2, #0
 800f6bc:	2300      	movs	r3, #0
 800f6be:	f7f1 f9d7 	bl	8000a70 <__aeabi_dcmpgt>
 800f6c2:	2800      	cmp	r0, #0
 800f6c4:	d0be      	beq.n	800f644 <floor+0x44>
 800f6c6:	2c00      	cmp	r4, #0
 800f6c8:	da02      	bge.n	800f6d0 <floor+0xd0>
 800f6ca:	2e14      	cmp	r6, #20
 800f6cc:	d103      	bne.n	800f6d6 <floor+0xd6>
 800f6ce:	3401      	adds	r4, #1
 800f6d0:	ea25 0508 	bic.w	r5, r5, r8
 800f6d4:	e7b6      	b.n	800f644 <floor+0x44>
 800f6d6:	2301      	movs	r3, #1
 800f6d8:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800f6dc:	fa03 f606 	lsl.w	r6, r3, r6
 800f6e0:	4435      	add	r5, r6
 800f6e2:	42bd      	cmp	r5, r7
 800f6e4:	bf38      	it	cc
 800f6e6:	18e4      	addcc	r4, r4, r3
 800f6e8:	e7f2      	b.n	800f6d0 <floor+0xd0>
 800f6ea:	2500      	movs	r5, #0
 800f6ec:	462c      	mov	r4, r5
 800f6ee:	e7a9      	b.n	800f644 <floor+0x44>
 800f6f0:	8800759c 	.word	0x8800759c
 800f6f4:	7e37e43c 	.word	0x7e37e43c
 800f6f8:	bff00000 	.word	0xbff00000
 800f6fc:	000fffff 	.word	0x000fffff

0800f700 <scalbn>:
 800f700:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f702:	f3c1 560a 	ubfx	r6, r1, #20, #11
 800f706:	4604      	mov	r4, r0
 800f708:	460d      	mov	r5, r1
 800f70a:	4617      	mov	r7, r2
 800f70c:	460b      	mov	r3, r1
 800f70e:	b996      	cbnz	r6, 800f736 <scalbn+0x36>
 800f710:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800f714:	4303      	orrs	r3, r0
 800f716:	d039      	beq.n	800f78c <scalbn+0x8c>
 800f718:	4b35      	ldr	r3, [pc, #212]	; (800f7f0 <scalbn+0xf0>)
 800f71a:	2200      	movs	r2, #0
 800f71c:	f7f0 ff18 	bl	8000550 <__aeabi_dmul>
 800f720:	4b34      	ldr	r3, [pc, #208]	; (800f7f4 <scalbn+0xf4>)
 800f722:	4604      	mov	r4, r0
 800f724:	429f      	cmp	r7, r3
 800f726:	460d      	mov	r5, r1
 800f728:	da0f      	bge.n	800f74a <scalbn+0x4a>
 800f72a:	a32d      	add	r3, pc, #180	; (adr r3, 800f7e0 <scalbn+0xe0>)
 800f72c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f730:	f7f0 ff0e 	bl	8000550 <__aeabi_dmul>
 800f734:	e006      	b.n	800f744 <scalbn+0x44>
 800f736:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800f73a:	4296      	cmp	r6, r2
 800f73c:	d10a      	bne.n	800f754 <scalbn+0x54>
 800f73e:	4602      	mov	r2, r0
 800f740:	f7f0 fd50 	bl	80001e4 <__adddf3>
 800f744:	4604      	mov	r4, r0
 800f746:	460d      	mov	r5, r1
 800f748:	e020      	b.n	800f78c <scalbn+0x8c>
 800f74a:	460b      	mov	r3, r1
 800f74c:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800f750:	f1a1 0636 	sub.w	r6, r1, #54	; 0x36
 800f754:	f240 72fe 	movw	r2, #2046	; 0x7fe
 800f758:	19b9      	adds	r1, r7, r6
 800f75a:	4291      	cmp	r1, r2
 800f75c:	dd0e      	ble.n	800f77c <scalbn+0x7c>
 800f75e:	a322      	add	r3, pc, #136	; (adr r3, 800f7e8 <scalbn+0xe8>)
 800f760:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f764:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 800f768:	f044 41fc 	orr.w	r1, r4, #2113929216	; 0x7e000000
 800f76c:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
 800f770:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
 800f774:	4820      	ldr	r0, [pc, #128]	; (800f7f8 <scalbn+0xf8>)
 800f776:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
 800f77a:	e7d9      	b.n	800f730 <scalbn+0x30>
 800f77c:	2900      	cmp	r1, #0
 800f77e:	dd08      	ble.n	800f792 <scalbn+0x92>
 800f780:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800f784:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800f788:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 800f78c:	4620      	mov	r0, r4
 800f78e:	4629      	mov	r1, r5
 800f790:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f792:	f111 0f35 	cmn.w	r1, #53	; 0x35
 800f796:	da16      	bge.n	800f7c6 <scalbn+0xc6>
 800f798:	f24c 3350 	movw	r3, #50000	; 0xc350
 800f79c:	429f      	cmp	r7, r3
 800f79e:	ea4f 73d5 	mov.w	r3, r5, lsr #31
 800f7a2:	dd08      	ble.n	800f7b6 <scalbn+0xb6>
 800f7a4:	4c15      	ldr	r4, [pc, #84]	; (800f7fc <scalbn+0xfc>)
 800f7a6:	4814      	ldr	r0, [pc, #80]	; (800f7f8 <scalbn+0xf8>)
 800f7a8:	f363 74df 	bfi	r4, r3, #31, #1
 800f7ac:	a30e      	add	r3, pc, #56	; (adr r3, 800f7e8 <scalbn+0xe8>)
 800f7ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f7b2:	4621      	mov	r1, r4
 800f7b4:	e7bc      	b.n	800f730 <scalbn+0x30>
 800f7b6:	4c12      	ldr	r4, [pc, #72]	; (800f800 <scalbn+0x100>)
 800f7b8:	4812      	ldr	r0, [pc, #72]	; (800f804 <scalbn+0x104>)
 800f7ba:	f363 74df 	bfi	r4, r3, #31, #1
 800f7be:	a308      	add	r3, pc, #32	; (adr r3, 800f7e0 <scalbn+0xe0>)
 800f7c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f7c4:	e7f5      	b.n	800f7b2 <scalbn+0xb2>
 800f7c6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800f7ca:	3136      	adds	r1, #54	; 0x36
 800f7cc:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800f7d0:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 800f7d4:	4620      	mov	r0, r4
 800f7d6:	4629      	mov	r1, r5
 800f7d8:	2200      	movs	r2, #0
 800f7da:	4b0b      	ldr	r3, [pc, #44]	; (800f808 <scalbn+0x108>)
 800f7dc:	e7a8      	b.n	800f730 <scalbn+0x30>
 800f7de:	bf00      	nop
 800f7e0:	c2f8f359 	.word	0xc2f8f359
 800f7e4:	01a56e1f 	.word	0x01a56e1f
 800f7e8:	8800759c 	.word	0x8800759c
 800f7ec:	7e37e43c 	.word	0x7e37e43c
 800f7f0:	43500000 	.word	0x43500000
 800f7f4:	ffff3cb0 	.word	0xffff3cb0
 800f7f8:	8800759c 	.word	0x8800759c
 800f7fc:	7e37e43c 	.word	0x7e37e43c
 800f800:	01a56e1f 	.word	0x01a56e1f
 800f804:	c2f8f359 	.word	0xc2f8f359
 800f808:	3c900000 	.word	0x3c900000

0800f80c <floorf>:
 800f80c:	b570      	push	{r4, r5, r6, lr}
 800f80e:	f3c0 55c7 	ubfx	r5, r0, #23, #8
 800f812:	3d7f      	subs	r5, #127	; 0x7f
 800f814:	2d16      	cmp	r5, #22
 800f816:	4601      	mov	r1, r0
 800f818:	4604      	mov	r4, r0
 800f81a:	f020 4600 	bic.w	r6, r0, #2147483648	; 0x80000000
 800f81e:	dc26      	bgt.n	800f86e <floorf+0x62>
 800f820:	2d00      	cmp	r5, #0
 800f822:	da0e      	bge.n	800f842 <floorf+0x36>
 800f824:	4917      	ldr	r1, [pc, #92]	; (800f884 <floorf+0x78>)
 800f826:	f7f1 f9c1 	bl	8000bac <__addsf3>
 800f82a:	2100      	movs	r1, #0
 800f82c:	f7f1 fc82 	bl	8001134 <__aeabi_fcmpgt>
 800f830:	b128      	cbz	r0, 800f83e <floorf+0x32>
 800f832:	2c00      	cmp	r4, #0
 800f834:	da23      	bge.n	800f87e <floorf+0x72>
 800f836:	4b14      	ldr	r3, [pc, #80]	; (800f888 <floorf+0x7c>)
 800f838:	2e00      	cmp	r6, #0
 800f83a:	bf18      	it	ne
 800f83c:	461c      	movne	r4, r3
 800f83e:	4621      	mov	r1, r4
 800f840:	e01b      	b.n	800f87a <floorf+0x6e>
 800f842:	4e12      	ldr	r6, [pc, #72]	; (800f88c <floorf+0x80>)
 800f844:	412e      	asrs	r6, r5
 800f846:	4230      	tst	r0, r6
 800f848:	d017      	beq.n	800f87a <floorf+0x6e>
 800f84a:	490e      	ldr	r1, [pc, #56]	; (800f884 <floorf+0x78>)
 800f84c:	f7f1 f9ae 	bl	8000bac <__addsf3>
 800f850:	2100      	movs	r1, #0
 800f852:	f7f1 fc6f 	bl	8001134 <__aeabi_fcmpgt>
 800f856:	2800      	cmp	r0, #0
 800f858:	d0f1      	beq.n	800f83e <floorf+0x32>
 800f85a:	2c00      	cmp	r4, #0
 800f85c:	bfbe      	ittt	lt
 800f85e:	f44f 0300 	movlt.w	r3, #8388608	; 0x800000
 800f862:	fa43 f505 	asrlt.w	r5, r3, r5
 800f866:	1964      	addlt	r4, r4, r5
 800f868:	ea24 0406 	bic.w	r4, r4, r6
 800f86c:	e7e7      	b.n	800f83e <floorf+0x32>
 800f86e:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 800f872:	d302      	bcc.n	800f87a <floorf+0x6e>
 800f874:	f7f1 f99a 	bl	8000bac <__addsf3>
 800f878:	4601      	mov	r1, r0
 800f87a:	4608      	mov	r0, r1
 800f87c:	bd70      	pop	{r4, r5, r6, pc}
 800f87e:	2400      	movs	r4, #0
 800f880:	e7dd      	b.n	800f83e <floorf+0x32>
 800f882:	bf00      	nop
 800f884:	7149f2ca 	.word	0x7149f2ca
 800f888:	bf800000 	.word	0xbf800000
 800f88c:	007fffff 	.word	0x007fffff

0800f890 <nanf>:
 800f890:	4800      	ldr	r0, [pc, #0]	; (800f894 <nanf+0x4>)
 800f892:	4770      	bx	lr
 800f894:	7fc00000 	.word	0x7fc00000

0800f898 <scalbnf>:
 800f898:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 800f89c:	b538      	push	{r3, r4, r5, lr}
 800f89e:	4603      	mov	r3, r0
 800f8a0:	460d      	mov	r5, r1
 800f8a2:	4604      	mov	r4, r0
 800f8a4:	d02a      	beq.n	800f8fc <scalbnf+0x64>
 800f8a6:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800f8aa:	d304      	bcc.n	800f8b6 <scalbnf+0x1e>
 800f8ac:	4601      	mov	r1, r0
 800f8ae:	f7f1 f97d 	bl	8000bac <__addsf3>
 800f8b2:	4603      	mov	r3, r0
 800f8b4:	e022      	b.n	800f8fc <scalbnf+0x64>
 800f8b6:	f010 4fff 	tst.w	r0, #2139095040	; 0x7f800000
 800f8ba:	d117      	bne.n	800f8ec <scalbnf+0x54>
 800f8bc:	f04f 4198 	mov.w	r1, #1275068416	; 0x4c000000
 800f8c0:	f7f1 fa7c 	bl	8000dbc <__aeabi_fmul>
 800f8c4:	4a17      	ldr	r2, [pc, #92]	; (800f924 <scalbnf+0x8c>)
 800f8c6:	4603      	mov	r3, r0
 800f8c8:	4295      	cmp	r5, r2
 800f8ca:	db0b      	blt.n	800f8e4 <scalbnf+0x4c>
 800f8cc:	4604      	mov	r4, r0
 800f8ce:	f3c0 52c7 	ubfx	r2, r0, #23, #8
 800f8d2:	3a19      	subs	r2, #25
 800f8d4:	442a      	add	r2, r5
 800f8d6:	2afe      	cmp	r2, #254	; 0xfe
 800f8d8:	dd0a      	ble.n	800f8f0 <scalbnf+0x58>
 800f8da:	4913      	ldr	r1, [pc, #76]	; (800f928 <scalbnf+0x90>)
 800f8dc:	4618      	mov	r0, r3
 800f8de:	f361 001e 	bfi	r0, r1, #0, #31
 800f8e2:	e000      	b.n	800f8e6 <scalbnf+0x4e>
 800f8e4:	4911      	ldr	r1, [pc, #68]	; (800f92c <scalbnf+0x94>)
 800f8e6:	f7f1 fa69 	bl	8000dbc <__aeabi_fmul>
 800f8ea:	e7e2      	b.n	800f8b2 <scalbnf+0x1a>
 800f8ec:	0dd2      	lsrs	r2, r2, #23
 800f8ee:	e7f1      	b.n	800f8d4 <scalbnf+0x3c>
 800f8f0:	2a00      	cmp	r2, #0
 800f8f2:	dd05      	ble.n	800f900 <scalbnf+0x68>
 800f8f4:	f024 40ff 	bic.w	r0, r4, #2139095040	; 0x7f800000
 800f8f8:	ea40 53c2 	orr.w	r3, r0, r2, lsl #23
 800f8fc:	4618      	mov	r0, r3
 800f8fe:	bd38      	pop	{r3, r4, r5, pc}
 800f900:	f112 0f16 	cmn.w	r2, #22
 800f904:	da05      	bge.n	800f912 <scalbnf+0x7a>
 800f906:	f24c 3250 	movw	r2, #50000	; 0xc350
 800f90a:	4295      	cmp	r5, r2
 800f90c:	dce5      	bgt.n	800f8da <scalbnf+0x42>
 800f90e:	4907      	ldr	r1, [pc, #28]	; (800f92c <scalbnf+0x94>)
 800f910:	e7e4      	b.n	800f8dc <scalbnf+0x44>
 800f912:	3219      	adds	r2, #25
 800f914:	f024 44ff 	bic.w	r4, r4, #2139095040	; 0x7f800000
 800f918:	f04f 514c 	mov.w	r1, #855638016	; 0x33000000
 800f91c:	ea44 50c2 	orr.w	r0, r4, r2, lsl #23
 800f920:	e7e1      	b.n	800f8e6 <scalbnf+0x4e>
 800f922:	bf00      	nop
 800f924:	ffff3cb0 	.word	0xffff3cb0
 800f928:	7149f2ca 	.word	0x7149f2ca
 800f92c:	0da24260 	.word	0x0da24260

0800f930 <__errno>:
 800f930:	4b01      	ldr	r3, [pc, #4]	; (800f938 <__errno+0x8>)
 800f932:	6818      	ldr	r0, [r3, #0]
 800f934:	4770      	bx	lr
 800f936:	bf00      	nop
 800f938:	200001a8 	.word	0x200001a8

0800f93c <__libc_init_array>:
 800f93c:	b570      	push	{r4, r5, r6, lr}
 800f93e:	2600      	movs	r6, #0
 800f940:	4d0c      	ldr	r5, [pc, #48]	; (800f974 <__libc_init_array+0x38>)
 800f942:	4c0d      	ldr	r4, [pc, #52]	; (800f978 <__libc_init_array+0x3c>)
 800f944:	1b64      	subs	r4, r4, r5
 800f946:	10a4      	asrs	r4, r4, #2
 800f948:	42a6      	cmp	r6, r4
 800f94a:	d109      	bne.n	800f960 <__libc_init_array+0x24>
 800f94c:	f002 fed8 	bl	8012700 <_init>
 800f950:	2600      	movs	r6, #0
 800f952:	4d0a      	ldr	r5, [pc, #40]	; (800f97c <__libc_init_array+0x40>)
 800f954:	4c0a      	ldr	r4, [pc, #40]	; (800f980 <__libc_init_array+0x44>)
 800f956:	1b64      	subs	r4, r4, r5
 800f958:	10a4      	asrs	r4, r4, #2
 800f95a:	42a6      	cmp	r6, r4
 800f95c:	d105      	bne.n	800f96a <__libc_init_array+0x2e>
 800f95e:	bd70      	pop	{r4, r5, r6, pc}
 800f960:	f855 3b04 	ldr.w	r3, [r5], #4
 800f964:	4798      	blx	r3
 800f966:	3601      	adds	r6, #1
 800f968:	e7ee      	b.n	800f948 <__libc_init_array+0xc>
 800f96a:	f855 3b04 	ldr.w	r3, [r5], #4
 800f96e:	4798      	blx	r3
 800f970:	3601      	adds	r6, #1
 800f972:	e7f2      	b.n	800f95a <__libc_init_array+0x1e>
 800f974:	080139e4 	.word	0x080139e4
 800f978:	080139e4 	.word	0x080139e4
 800f97c:	080139e4 	.word	0x080139e4
 800f980:	080139f0 	.word	0x080139f0

0800f984 <malloc>:
 800f984:	4b02      	ldr	r3, [pc, #8]	; (800f990 <malloc+0xc>)
 800f986:	4601      	mov	r1, r0
 800f988:	6818      	ldr	r0, [r3, #0]
 800f98a:	f000 b86d 	b.w	800fa68 <_malloc_r>
 800f98e:	bf00      	nop
 800f990:	200001a8 	.word	0x200001a8

0800f994 <free>:
 800f994:	4b02      	ldr	r3, [pc, #8]	; (800f9a0 <free+0xc>)
 800f996:	4601      	mov	r1, r0
 800f998:	6818      	ldr	r0, [r3, #0]
 800f99a:	f000 b819 	b.w	800f9d0 <_free_r>
 800f99e:	bf00      	nop
 800f9a0:	200001a8 	.word	0x200001a8

0800f9a4 <memcmp>:
 800f9a4:	b530      	push	{r4, r5, lr}
 800f9a6:	2400      	movs	r4, #0
 800f9a8:	3901      	subs	r1, #1
 800f9aa:	42a2      	cmp	r2, r4
 800f9ac:	d101      	bne.n	800f9b2 <memcmp+0xe>
 800f9ae:	2000      	movs	r0, #0
 800f9b0:	e005      	b.n	800f9be <memcmp+0x1a>
 800f9b2:	5d03      	ldrb	r3, [r0, r4]
 800f9b4:	3401      	adds	r4, #1
 800f9b6:	5d0d      	ldrb	r5, [r1, r4]
 800f9b8:	42ab      	cmp	r3, r5
 800f9ba:	d0f6      	beq.n	800f9aa <memcmp+0x6>
 800f9bc:	1b58      	subs	r0, r3, r5
 800f9be:	bd30      	pop	{r4, r5, pc}

0800f9c0 <memset>:
 800f9c0:	4603      	mov	r3, r0
 800f9c2:	4402      	add	r2, r0
 800f9c4:	4293      	cmp	r3, r2
 800f9c6:	d100      	bne.n	800f9ca <memset+0xa>
 800f9c8:	4770      	bx	lr
 800f9ca:	f803 1b01 	strb.w	r1, [r3], #1
 800f9ce:	e7f9      	b.n	800f9c4 <memset+0x4>

0800f9d0 <_free_r>:
 800f9d0:	b538      	push	{r3, r4, r5, lr}
 800f9d2:	4605      	mov	r5, r0
 800f9d4:	2900      	cmp	r1, #0
 800f9d6:	d043      	beq.n	800fa60 <_free_r+0x90>
 800f9d8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f9dc:	1f0c      	subs	r4, r1, #4
 800f9de:	2b00      	cmp	r3, #0
 800f9e0:	bfb8      	it	lt
 800f9e2:	18e4      	addlt	r4, r4, r3
 800f9e4:	f001 fbce 	bl	8011184 <__malloc_lock>
 800f9e8:	4a1e      	ldr	r2, [pc, #120]	; (800fa64 <_free_r+0x94>)
 800f9ea:	6813      	ldr	r3, [r2, #0]
 800f9ec:	4610      	mov	r0, r2
 800f9ee:	b933      	cbnz	r3, 800f9fe <_free_r+0x2e>
 800f9f0:	6063      	str	r3, [r4, #4]
 800f9f2:	6014      	str	r4, [r2, #0]
 800f9f4:	4628      	mov	r0, r5
 800f9f6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f9fa:	f001 bbc9 	b.w	8011190 <__malloc_unlock>
 800f9fe:	42a3      	cmp	r3, r4
 800fa00:	d90a      	bls.n	800fa18 <_free_r+0x48>
 800fa02:	6821      	ldr	r1, [r4, #0]
 800fa04:	1862      	adds	r2, r4, r1
 800fa06:	4293      	cmp	r3, r2
 800fa08:	bf01      	itttt	eq
 800fa0a:	681a      	ldreq	r2, [r3, #0]
 800fa0c:	685b      	ldreq	r3, [r3, #4]
 800fa0e:	1852      	addeq	r2, r2, r1
 800fa10:	6022      	streq	r2, [r4, #0]
 800fa12:	6063      	str	r3, [r4, #4]
 800fa14:	6004      	str	r4, [r0, #0]
 800fa16:	e7ed      	b.n	800f9f4 <_free_r+0x24>
 800fa18:	461a      	mov	r2, r3
 800fa1a:	685b      	ldr	r3, [r3, #4]
 800fa1c:	b10b      	cbz	r3, 800fa22 <_free_r+0x52>
 800fa1e:	42a3      	cmp	r3, r4
 800fa20:	d9fa      	bls.n	800fa18 <_free_r+0x48>
 800fa22:	6811      	ldr	r1, [r2, #0]
 800fa24:	1850      	adds	r0, r2, r1
 800fa26:	42a0      	cmp	r0, r4
 800fa28:	d10b      	bne.n	800fa42 <_free_r+0x72>
 800fa2a:	6820      	ldr	r0, [r4, #0]
 800fa2c:	4401      	add	r1, r0
 800fa2e:	1850      	adds	r0, r2, r1
 800fa30:	4283      	cmp	r3, r0
 800fa32:	6011      	str	r1, [r2, #0]
 800fa34:	d1de      	bne.n	800f9f4 <_free_r+0x24>
 800fa36:	6818      	ldr	r0, [r3, #0]
 800fa38:	685b      	ldr	r3, [r3, #4]
 800fa3a:	4401      	add	r1, r0
 800fa3c:	6011      	str	r1, [r2, #0]
 800fa3e:	6053      	str	r3, [r2, #4]
 800fa40:	e7d8      	b.n	800f9f4 <_free_r+0x24>
 800fa42:	d902      	bls.n	800fa4a <_free_r+0x7a>
 800fa44:	230c      	movs	r3, #12
 800fa46:	602b      	str	r3, [r5, #0]
 800fa48:	e7d4      	b.n	800f9f4 <_free_r+0x24>
 800fa4a:	6820      	ldr	r0, [r4, #0]
 800fa4c:	1821      	adds	r1, r4, r0
 800fa4e:	428b      	cmp	r3, r1
 800fa50:	bf01      	itttt	eq
 800fa52:	6819      	ldreq	r1, [r3, #0]
 800fa54:	685b      	ldreq	r3, [r3, #4]
 800fa56:	1809      	addeq	r1, r1, r0
 800fa58:	6021      	streq	r1, [r4, #0]
 800fa5a:	6063      	str	r3, [r4, #4]
 800fa5c:	6054      	str	r4, [r2, #4]
 800fa5e:	e7c9      	b.n	800f9f4 <_free_r+0x24>
 800fa60:	bd38      	pop	{r3, r4, r5, pc}
 800fa62:	bf00      	nop
 800fa64:	200009c0 	.word	0x200009c0

0800fa68 <_malloc_r>:
 800fa68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fa6a:	1ccd      	adds	r5, r1, #3
 800fa6c:	f025 0503 	bic.w	r5, r5, #3
 800fa70:	3508      	adds	r5, #8
 800fa72:	2d0c      	cmp	r5, #12
 800fa74:	bf38      	it	cc
 800fa76:	250c      	movcc	r5, #12
 800fa78:	2d00      	cmp	r5, #0
 800fa7a:	4606      	mov	r6, r0
 800fa7c:	db01      	blt.n	800fa82 <_malloc_r+0x1a>
 800fa7e:	42a9      	cmp	r1, r5
 800fa80:	d903      	bls.n	800fa8a <_malloc_r+0x22>
 800fa82:	230c      	movs	r3, #12
 800fa84:	6033      	str	r3, [r6, #0]
 800fa86:	2000      	movs	r0, #0
 800fa88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fa8a:	f001 fb7b 	bl	8011184 <__malloc_lock>
 800fa8e:	4921      	ldr	r1, [pc, #132]	; (800fb14 <_malloc_r+0xac>)
 800fa90:	680a      	ldr	r2, [r1, #0]
 800fa92:	4614      	mov	r4, r2
 800fa94:	b99c      	cbnz	r4, 800fabe <_malloc_r+0x56>
 800fa96:	4f20      	ldr	r7, [pc, #128]	; (800fb18 <_malloc_r+0xb0>)
 800fa98:	683b      	ldr	r3, [r7, #0]
 800fa9a:	b923      	cbnz	r3, 800faa6 <_malloc_r+0x3e>
 800fa9c:	4621      	mov	r1, r4
 800fa9e:	4630      	mov	r0, r6
 800faa0:	f000 fca4 	bl	80103ec <_sbrk_r>
 800faa4:	6038      	str	r0, [r7, #0]
 800faa6:	4629      	mov	r1, r5
 800faa8:	4630      	mov	r0, r6
 800faaa:	f000 fc9f 	bl	80103ec <_sbrk_r>
 800faae:	1c43      	adds	r3, r0, #1
 800fab0:	d123      	bne.n	800fafa <_malloc_r+0x92>
 800fab2:	230c      	movs	r3, #12
 800fab4:	4630      	mov	r0, r6
 800fab6:	6033      	str	r3, [r6, #0]
 800fab8:	f001 fb6a 	bl	8011190 <__malloc_unlock>
 800fabc:	e7e3      	b.n	800fa86 <_malloc_r+0x1e>
 800fabe:	6823      	ldr	r3, [r4, #0]
 800fac0:	1b5b      	subs	r3, r3, r5
 800fac2:	d417      	bmi.n	800faf4 <_malloc_r+0x8c>
 800fac4:	2b0b      	cmp	r3, #11
 800fac6:	d903      	bls.n	800fad0 <_malloc_r+0x68>
 800fac8:	6023      	str	r3, [r4, #0]
 800faca:	441c      	add	r4, r3
 800facc:	6025      	str	r5, [r4, #0]
 800face:	e004      	b.n	800fada <_malloc_r+0x72>
 800fad0:	6863      	ldr	r3, [r4, #4]
 800fad2:	42a2      	cmp	r2, r4
 800fad4:	bf0c      	ite	eq
 800fad6:	600b      	streq	r3, [r1, #0]
 800fad8:	6053      	strne	r3, [r2, #4]
 800fada:	4630      	mov	r0, r6
 800fadc:	f001 fb58 	bl	8011190 <__malloc_unlock>
 800fae0:	f104 000b 	add.w	r0, r4, #11
 800fae4:	1d23      	adds	r3, r4, #4
 800fae6:	f020 0007 	bic.w	r0, r0, #7
 800faea:	1ac2      	subs	r2, r0, r3
 800faec:	d0cc      	beq.n	800fa88 <_malloc_r+0x20>
 800faee:	1a1b      	subs	r3, r3, r0
 800faf0:	50a3      	str	r3, [r4, r2]
 800faf2:	e7c9      	b.n	800fa88 <_malloc_r+0x20>
 800faf4:	4622      	mov	r2, r4
 800faf6:	6864      	ldr	r4, [r4, #4]
 800faf8:	e7cc      	b.n	800fa94 <_malloc_r+0x2c>
 800fafa:	1cc4      	adds	r4, r0, #3
 800fafc:	f024 0403 	bic.w	r4, r4, #3
 800fb00:	42a0      	cmp	r0, r4
 800fb02:	d0e3      	beq.n	800facc <_malloc_r+0x64>
 800fb04:	1a21      	subs	r1, r4, r0
 800fb06:	4630      	mov	r0, r6
 800fb08:	f000 fc70 	bl	80103ec <_sbrk_r>
 800fb0c:	3001      	adds	r0, #1
 800fb0e:	d1dd      	bne.n	800facc <_malloc_r+0x64>
 800fb10:	e7cf      	b.n	800fab2 <_malloc_r+0x4a>
 800fb12:	bf00      	nop
 800fb14:	200009c0 	.word	0x200009c0
 800fb18:	200009c4 	.word	0x200009c4

0800fb1c <__cvt>:
 800fb1c:	2b00      	cmp	r3, #0
 800fb1e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fb22:	461f      	mov	r7, r3
 800fb24:	bfbb      	ittet	lt
 800fb26:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 800fb2a:	461f      	movlt	r7, r3
 800fb2c:	2300      	movge	r3, #0
 800fb2e:	232d      	movlt	r3, #45	; 0x2d
 800fb30:	b088      	sub	sp, #32
 800fb32:	4614      	mov	r4, r2
 800fb34:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800fb36:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800fb38:	7013      	strb	r3, [r2, #0]
 800fb3a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800fb3c:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 800fb40:	f023 0820 	bic.w	r8, r3, #32
 800fb44:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800fb48:	d005      	beq.n	800fb56 <__cvt+0x3a>
 800fb4a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800fb4e:	d100      	bne.n	800fb52 <__cvt+0x36>
 800fb50:	3501      	adds	r5, #1
 800fb52:	2302      	movs	r3, #2
 800fb54:	e000      	b.n	800fb58 <__cvt+0x3c>
 800fb56:	2303      	movs	r3, #3
 800fb58:	aa07      	add	r2, sp, #28
 800fb5a:	9204      	str	r2, [sp, #16]
 800fb5c:	aa06      	add	r2, sp, #24
 800fb5e:	e9cd a202 	strd	sl, r2, [sp, #8]
 800fb62:	e9cd 3500 	strd	r3, r5, [sp]
 800fb66:	4622      	mov	r2, r4
 800fb68:	463b      	mov	r3, r7
 800fb6a:	f000 fcfd 	bl	8010568 <_dtoa_r>
 800fb6e:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800fb72:	4606      	mov	r6, r0
 800fb74:	d102      	bne.n	800fb7c <__cvt+0x60>
 800fb76:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800fb78:	07db      	lsls	r3, r3, #31
 800fb7a:	d522      	bpl.n	800fbc2 <__cvt+0xa6>
 800fb7c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800fb80:	eb06 0905 	add.w	r9, r6, r5
 800fb84:	d110      	bne.n	800fba8 <__cvt+0x8c>
 800fb86:	7833      	ldrb	r3, [r6, #0]
 800fb88:	2b30      	cmp	r3, #48	; 0x30
 800fb8a:	d10a      	bne.n	800fba2 <__cvt+0x86>
 800fb8c:	2200      	movs	r2, #0
 800fb8e:	2300      	movs	r3, #0
 800fb90:	4620      	mov	r0, r4
 800fb92:	4639      	mov	r1, r7
 800fb94:	f7f0 ff44 	bl	8000a20 <__aeabi_dcmpeq>
 800fb98:	b918      	cbnz	r0, 800fba2 <__cvt+0x86>
 800fb9a:	f1c5 0501 	rsb	r5, r5, #1
 800fb9e:	f8ca 5000 	str.w	r5, [sl]
 800fba2:	f8da 3000 	ldr.w	r3, [sl]
 800fba6:	4499      	add	r9, r3
 800fba8:	2200      	movs	r2, #0
 800fbaa:	2300      	movs	r3, #0
 800fbac:	4620      	mov	r0, r4
 800fbae:	4639      	mov	r1, r7
 800fbb0:	f7f0 ff36 	bl	8000a20 <__aeabi_dcmpeq>
 800fbb4:	b108      	cbz	r0, 800fbba <__cvt+0x9e>
 800fbb6:	f8cd 901c 	str.w	r9, [sp, #28]
 800fbba:	2230      	movs	r2, #48	; 0x30
 800fbbc:	9b07      	ldr	r3, [sp, #28]
 800fbbe:	454b      	cmp	r3, r9
 800fbc0:	d307      	bcc.n	800fbd2 <__cvt+0xb6>
 800fbc2:	4630      	mov	r0, r6
 800fbc4:	9b07      	ldr	r3, [sp, #28]
 800fbc6:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800fbc8:	1b9b      	subs	r3, r3, r6
 800fbca:	6013      	str	r3, [r2, #0]
 800fbcc:	b008      	add	sp, #32
 800fbce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fbd2:	1c59      	adds	r1, r3, #1
 800fbd4:	9107      	str	r1, [sp, #28]
 800fbd6:	701a      	strb	r2, [r3, #0]
 800fbd8:	e7f0      	b.n	800fbbc <__cvt+0xa0>

0800fbda <__exponent>:
 800fbda:	4603      	mov	r3, r0
 800fbdc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800fbde:	2900      	cmp	r1, #0
 800fbe0:	f803 2b02 	strb.w	r2, [r3], #2
 800fbe4:	bfb6      	itet	lt
 800fbe6:	222d      	movlt	r2, #45	; 0x2d
 800fbe8:	222b      	movge	r2, #43	; 0x2b
 800fbea:	4249      	neglt	r1, r1
 800fbec:	2909      	cmp	r1, #9
 800fbee:	7042      	strb	r2, [r0, #1]
 800fbf0:	dd2b      	ble.n	800fc4a <__exponent+0x70>
 800fbf2:	f10d 0407 	add.w	r4, sp, #7
 800fbf6:	46a4      	mov	ip, r4
 800fbf8:	270a      	movs	r7, #10
 800fbfa:	fb91 f6f7 	sdiv	r6, r1, r7
 800fbfe:	460a      	mov	r2, r1
 800fc00:	46a6      	mov	lr, r4
 800fc02:	fb07 1516 	mls	r5, r7, r6, r1
 800fc06:	2a63      	cmp	r2, #99	; 0x63
 800fc08:	f105 0530 	add.w	r5, r5, #48	; 0x30
 800fc0c:	4631      	mov	r1, r6
 800fc0e:	f104 34ff 	add.w	r4, r4, #4294967295
 800fc12:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800fc16:	dcf0      	bgt.n	800fbfa <__exponent+0x20>
 800fc18:	3130      	adds	r1, #48	; 0x30
 800fc1a:	f1ae 0502 	sub.w	r5, lr, #2
 800fc1e:	f804 1c01 	strb.w	r1, [r4, #-1]
 800fc22:	4629      	mov	r1, r5
 800fc24:	1c44      	adds	r4, r0, #1
 800fc26:	4561      	cmp	r1, ip
 800fc28:	d30a      	bcc.n	800fc40 <__exponent+0x66>
 800fc2a:	f10d 0209 	add.w	r2, sp, #9
 800fc2e:	eba2 020e 	sub.w	r2, r2, lr
 800fc32:	4565      	cmp	r5, ip
 800fc34:	bf88      	it	hi
 800fc36:	2200      	movhi	r2, #0
 800fc38:	4413      	add	r3, r2
 800fc3a:	1a18      	subs	r0, r3, r0
 800fc3c:	b003      	add	sp, #12
 800fc3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fc40:	f811 2b01 	ldrb.w	r2, [r1], #1
 800fc44:	f804 2f01 	strb.w	r2, [r4, #1]!
 800fc48:	e7ed      	b.n	800fc26 <__exponent+0x4c>
 800fc4a:	2330      	movs	r3, #48	; 0x30
 800fc4c:	3130      	adds	r1, #48	; 0x30
 800fc4e:	7083      	strb	r3, [r0, #2]
 800fc50:	70c1      	strb	r1, [r0, #3]
 800fc52:	1d03      	adds	r3, r0, #4
 800fc54:	e7f1      	b.n	800fc3a <__exponent+0x60>
	...

0800fc58 <_printf_float>:
 800fc58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fc5c:	b091      	sub	sp, #68	; 0x44
 800fc5e:	460c      	mov	r4, r1
 800fc60:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 800fc64:	4616      	mov	r6, r2
 800fc66:	461f      	mov	r7, r3
 800fc68:	4605      	mov	r5, r0
 800fc6a:	f001 fa6b 	bl	8011144 <_localeconv_r>
 800fc6e:	6803      	ldr	r3, [r0, #0]
 800fc70:	4618      	mov	r0, r3
 800fc72:	9309      	str	r3, [sp, #36]	; 0x24
 800fc74:	f7f0 faa8 	bl	80001c8 <strlen>
 800fc78:	2300      	movs	r3, #0
 800fc7a:	930e      	str	r3, [sp, #56]	; 0x38
 800fc7c:	f8d8 3000 	ldr.w	r3, [r8]
 800fc80:	900a      	str	r0, [sp, #40]	; 0x28
 800fc82:	3307      	adds	r3, #7
 800fc84:	f023 0307 	bic.w	r3, r3, #7
 800fc88:	f103 0208 	add.w	r2, r3, #8
 800fc8c:	f894 9018 	ldrb.w	r9, [r4, #24]
 800fc90:	f8d4 b000 	ldr.w	fp, [r4]
 800fc94:	f8c8 2000 	str.w	r2, [r8]
 800fc98:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc9c:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800fca0:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 800fca4:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 800fca8:	930b      	str	r3, [sp, #44]	; 0x2c
 800fcaa:	f04f 32ff 	mov.w	r2, #4294967295
 800fcae:	4640      	mov	r0, r8
 800fcb0:	4b9c      	ldr	r3, [pc, #624]	; (800ff24 <_printf_float+0x2cc>)
 800fcb2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800fcb4:	f7f0 fee6 	bl	8000a84 <__aeabi_dcmpun>
 800fcb8:	bb70      	cbnz	r0, 800fd18 <_printf_float+0xc0>
 800fcba:	f04f 32ff 	mov.w	r2, #4294967295
 800fcbe:	4640      	mov	r0, r8
 800fcc0:	4b98      	ldr	r3, [pc, #608]	; (800ff24 <_printf_float+0x2cc>)
 800fcc2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800fcc4:	f7f0 fec0 	bl	8000a48 <__aeabi_dcmple>
 800fcc8:	bb30      	cbnz	r0, 800fd18 <_printf_float+0xc0>
 800fcca:	2200      	movs	r2, #0
 800fccc:	2300      	movs	r3, #0
 800fcce:	4640      	mov	r0, r8
 800fcd0:	4651      	mov	r1, sl
 800fcd2:	f7f0 feaf 	bl	8000a34 <__aeabi_dcmplt>
 800fcd6:	b110      	cbz	r0, 800fcde <_printf_float+0x86>
 800fcd8:	232d      	movs	r3, #45	; 0x2d
 800fcda:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800fcde:	4b92      	ldr	r3, [pc, #584]	; (800ff28 <_printf_float+0x2d0>)
 800fce0:	4892      	ldr	r0, [pc, #584]	; (800ff2c <_printf_float+0x2d4>)
 800fce2:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800fce6:	bf94      	ite	ls
 800fce8:	4698      	movls	r8, r3
 800fcea:	4680      	movhi	r8, r0
 800fcec:	2303      	movs	r3, #3
 800fcee:	f04f 0a00 	mov.w	sl, #0
 800fcf2:	6123      	str	r3, [r4, #16]
 800fcf4:	f02b 0304 	bic.w	r3, fp, #4
 800fcf8:	6023      	str	r3, [r4, #0]
 800fcfa:	4633      	mov	r3, r6
 800fcfc:	4621      	mov	r1, r4
 800fcfe:	4628      	mov	r0, r5
 800fd00:	9700      	str	r7, [sp, #0]
 800fd02:	aa0f      	add	r2, sp, #60	; 0x3c
 800fd04:	f000 f9d4 	bl	80100b0 <_printf_common>
 800fd08:	3001      	adds	r0, #1
 800fd0a:	f040 8090 	bne.w	800fe2e <_printf_float+0x1d6>
 800fd0e:	f04f 30ff 	mov.w	r0, #4294967295
 800fd12:	b011      	add	sp, #68	; 0x44
 800fd14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fd18:	4642      	mov	r2, r8
 800fd1a:	4653      	mov	r3, sl
 800fd1c:	4640      	mov	r0, r8
 800fd1e:	4651      	mov	r1, sl
 800fd20:	f7f0 feb0 	bl	8000a84 <__aeabi_dcmpun>
 800fd24:	b148      	cbz	r0, 800fd3a <_printf_float+0xe2>
 800fd26:	f1ba 0f00 	cmp.w	sl, #0
 800fd2a:	bfb8      	it	lt
 800fd2c:	232d      	movlt	r3, #45	; 0x2d
 800fd2e:	4880      	ldr	r0, [pc, #512]	; (800ff30 <_printf_float+0x2d8>)
 800fd30:	bfb8      	it	lt
 800fd32:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800fd36:	4b7f      	ldr	r3, [pc, #508]	; (800ff34 <_printf_float+0x2dc>)
 800fd38:	e7d3      	b.n	800fce2 <_printf_float+0x8a>
 800fd3a:	6863      	ldr	r3, [r4, #4]
 800fd3c:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800fd40:	1c5a      	adds	r2, r3, #1
 800fd42:	d142      	bne.n	800fdca <_printf_float+0x172>
 800fd44:	2306      	movs	r3, #6
 800fd46:	6063      	str	r3, [r4, #4]
 800fd48:	2200      	movs	r2, #0
 800fd4a:	9206      	str	r2, [sp, #24]
 800fd4c:	aa0e      	add	r2, sp, #56	; 0x38
 800fd4e:	e9cd 9204 	strd	r9, r2, [sp, #16]
 800fd52:	aa0d      	add	r2, sp, #52	; 0x34
 800fd54:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 800fd58:	9203      	str	r2, [sp, #12]
 800fd5a:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 800fd5e:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800fd62:	6023      	str	r3, [r4, #0]
 800fd64:	6863      	ldr	r3, [r4, #4]
 800fd66:	4642      	mov	r2, r8
 800fd68:	9300      	str	r3, [sp, #0]
 800fd6a:	4628      	mov	r0, r5
 800fd6c:	4653      	mov	r3, sl
 800fd6e:	910b      	str	r1, [sp, #44]	; 0x2c
 800fd70:	f7ff fed4 	bl	800fb1c <__cvt>
 800fd74:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800fd76:	4680      	mov	r8, r0
 800fd78:	2947      	cmp	r1, #71	; 0x47
 800fd7a:	990d      	ldr	r1, [sp, #52]	; 0x34
 800fd7c:	d108      	bne.n	800fd90 <_printf_float+0x138>
 800fd7e:	1cc8      	adds	r0, r1, #3
 800fd80:	db02      	blt.n	800fd88 <_printf_float+0x130>
 800fd82:	6863      	ldr	r3, [r4, #4]
 800fd84:	4299      	cmp	r1, r3
 800fd86:	dd40      	ble.n	800fe0a <_printf_float+0x1b2>
 800fd88:	f1a9 0902 	sub.w	r9, r9, #2
 800fd8c:	fa5f f989 	uxtb.w	r9, r9
 800fd90:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800fd94:	d81f      	bhi.n	800fdd6 <_printf_float+0x17e>
 800fd96:	464a      	mov	r2, r9
 800fd98:	3901      	subs	r1, #1
 800fd9a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800fd9e:	910d      	str	r1, [sp, #52]	; 0x34
 800fda0:	f7ff ff1b 	bl	800fbda <__exponent>
 800fda4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800fda6:	4682      	mov	sl, r0
 800fda8:	1813      	adds	r3, r2, r0
 800fdaa:	2a01      	cmp	r2, #1
 800fdac:	6123      	str	r3, [r4, #16]
 800fdae:	dc02      	bgt.n	800fdb6 <_printf_float+0x15e>
 800fdb0:	6822      	ldr	r2, [r4, #0]
 800fdb2:	07d2      	lsls	r2, r2, #31
 800fdb4:	d501      	bpl.n	800fdba <_printf_float+0x162>
 800fdb6:	3301      	adds	r3, #1
 800fdb8:	6123      	str	r3, [r4, #16]
 800fdba:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800fdbe:	2b00      	cmp	r3, #0
 800fdc0:	d09b      	beq.n	800fcfa <_printf_float+0xa2>
 800fdc2:	232d      	movs	r3, #45	; 0x2d
 800fdc4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800fdc8:	e797      	b.n	800fcfa <_printf_float+0xa2>
 800fdca:	2947      	cmp	r1, #71	; 0x47
 800fdcc:	d1bc      	bne.n	800fd48 <_printf_float+0xf0>
 800fdce:	2b00      	cmp	r3, #0
 800fdd0:	d1ba      	bne.n	800fd48 <_printf_float+0xf0>
 800fdd2:	2301      	movs	r3, #1
 800fdd4:	e7b7      	b.n	800fd46 <_printf_float+0xee>
 800fdd6:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800fdda:	d118      	bne.n	800fe0e <_printf_float+0x1b6>
 800fddc:	2900      	cmp	r1, #0
 800fdde:	6863      	ldr	r3, [r4, #4]
 800fde0:	dd0b      	ble.n	800fdfa <_printf_float+0x1a2>
 800fde2:	6121      	str	r1, [r4, #16]
 800fde4:	b913      	cbnz	r3, 800fdec <_printf_float+0x194>
 800fde6:	6822      	ldr	r2, [r4, #0]
 800fde8:	07d0      	lsls	r0, r2, #31
 800fdea:	d502      	bpl.n	800fdf2 <_printf_float+0x19a>
 800fdec:	3301      	adds	r3, #1
 800fdee:	440b      	add	r3, r1
 800fdf0:	6123      	str	r3, [r4, #16]
 800fdf2:	f04f 0a00 	mov.w	sl, #0
 800fdf6:	65a1      	str	r1, [r4, #88]	; 0x58
 800fdf8:	e7df      	b.n	800fdba <_printf_float+0x162>
 800fdfa:	b913      	cbnz	r3, 800fe02 <_printf_float+0x1aa>
 800fdfc:	6822      	ldr	r2, [r4, #0]
 800fdfe:	07d2      	lsls	r2, r2, #31
 800fe00:	d501      	bpl.n	800fe06 <_printf_float+0x1ae>
 800fe02:	3302      	adds	r3, #2
 800fe04:	e7f4      	b.n	800fdf0 <_printf_float+0x198>
 800fe06:	2301      	movs	r3, #1
 800fe08:	e7f2      	b.n	800fdf0 <_printf_float+0x198>
 800fe0a:	f04f 0967 	mov.w	r9, #103	; 0x67
 800fe0e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800fe10:	4299      	cmp	r1, r3
 800fe12:	db05      	blt.n	800fe20 <_printf_float+0x1c8>
 800fe14:	6823      	ldr	r3, [r4, #0]
 800fe16:	6121      	str	r1, [r4, #16]
 800fe18:	07d8      	lsls	r0, r3, #31
 800fe1a:	d5ea      	bpl.n	800fdf2 <_printf_float+0x19a>
 800fe1c:	1c4b      	adds	r3, r1, #1
 800fe1e:	e7e7      	b.n	800fdf0 <_printf_float+0x198>
 800fe20:	2900      	cmp	r1, #0
 800fe22:	bfcc      	ite	gt
 800fe24:	2201      	movgt	r2, #1
 800fe26:	f1c1 0202 	rsble	r2, r1, #2
 800fe2a:	4413      	add	r3, r2
 800fe2c:	e7e0      	b.n	800fdf0 <_printf_float+0x198>
 800fe2e:	6823      	ldr	r3, [r4, #0]
 800fe30:	055a      	lsls	r2, r3, #21
 800fe32:	d407      	bmi.n	800fe44 <_printf_float+0x1ec>
 800fe34:	6923      	ldr	r3, [r4, #16]
 800fe36:	4642      	mov	r2, r8
 800fe38:	4631      	mov	r1, r6
 800fe3a:	4628      	mov	r0, r5
 800fe3c:	47b8      	blx	r7
 800fe3e:	3001      	adds	r0, #1
 800fe40:	d12b      	bne.n	800fe9a <_printf_float+0x242>
 800fe42:	e764      	b.n	800fd0e <_printf_float+0xb6>
 800fe44:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800fe48:	f240 80dd 	bls.w	8010006 <_printf_float+0x3ae>
 800fe4c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800fe50:	2200      	movs	r2, #0
 800fe52:	2300      	movs	r3, #0
 800fe54:	f7f0 fde4 	bl	8000a20 <__aeabi_dcmpeq>
 800fe58:	2800      	cmp	r0, #0
 800fe5a:	d033      	beq.n	800fec4 <_printf_float+0x26c>
 800fe5c:	2301      	movs	r3, #1
 800fe5e:	4631      	mov	r1, r6
 800fe60:	4628      	mov	r0, r5
 800fe62:	4a35      	ldr	r2, [pc, #212]	; (800ff38 <_printf_float+0x2e0>)
 800fe64:	47b8      	blx	r7
 800fe66:	3001      	adds	r0, #1
 800fe68:	f43f af51 	beq.w	800fd0e <_printf_float+0xb6>
 800fe6c:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800fe70:	429a      	cmp	r2, r3
 800fe72:	db02      	blt.n	800fe7a <_printf_float+0x222>
 800fe74:	6823      	ldr	r3, [r4, #0]
 800fe76:	07d8      	lsls	r0, r3, #31
 800fe78:	d50f      	bpl.n	800fe9a <_printf_float+0x242>
 800fe7a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800fe7e:	4631      	mov	r1, r6
 800fe80:	4628      	mov	r0, r5
 800fe82:	47b8      	blx	r7
 800fe84:	3001      	adds	r0, #1
 800fe86:	f43f af42 	beq.w	800fd0e <_printf_float+0xb6>
 800fe8a:	f04f 0800 	mov.w	r8, #0
 800fe8e:	f104 091a 	add.w	r9, r4, #26
 800fe92:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800fe94:	3b01      	subs	r3, #1
 800fe96:	4543      	cmp	r3, r8
 800fe98:	dc09      	bgt.n	800feae <_printf_float+0x256>
 800fe9a:	6823      	ldr	r3, [r4, #0]
 800fe9c:	079b      	lsls	r3, r3, #30
 800fe9e:	f100 8102 	bmi.w	80100a6 <_printf_float+0x44e>
 800fea2:	68e0      	ldr	r0, [r4, #12]
 800fea4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800fea6:	4298      	cmp	r0, r3
 800fea8:	bfb8      	it	lt
 800feaa:	4618      	movlt	r0, r3
 800feac:	e731      	b.n	800fd12 <_printf_float+0xba>
 800feae:	2301      	movs	r3, #1
 800feb0:	464a      	mov	r2, r9
 800feb2:	4631      	mov	r1, r6
 800feb4:	4628      	mov	r0, r5
 800feb6:	47b8      	blx	r7
 800feb8:	3001      	adds	r0, #1
 800feba:	f43f af28 	beq.w	800fd0e <_printf_float+0xb6>
 800febe:	f108 0801 	add.w	r8, r8, #1
 800fec2:	e7e6      	b.n	800fe92 <_printf_float+0x23a>
 800fec4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800fec6:	2b00      	cmp	r3, #0
 800fec8:	dc38      	bgt.n	800ff3c <_printf_float+0x2e4>
 800feca:	2301      	movs	r3, #1
 800fecc:	4631      	mov	r1, r6
 800fece:	4628      	mov	r0, r5
 800fed0:	4a19      	ldr	r2, [pc, #100]	; (800ff38 <_printf_float+0x2e0>)
 800fed2:	47b8      	blx	r7
 800fed4:	3001      	adds	r0, #1
 800fed6:	f43f af1a 	beq.w	800fd0e <_printf_float+0xb6>
 800feda:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800fede:	4313      	orrs	r3, r2
 800fee0:	d102      	bne.n	800fee8 <_printf_float+0x290>
 800fee2:	6823      	ldr	r3, [r4, #0]
 800fee4:	07d9      	lsls	r1, r3, #31
 800fee6:	d5d8      	bpl.n	800fe9a <_printf_float+0x242>
 800fee8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800feec:	4631      	mov	r1, r6
 800feee:	4628      	mov	r0, r5
 800fef0:	47b8      	blx	r7
 800fef2:	3001      	adds	r0, #1
 800fef4:	f43f af0b 	beq.w	800fd0e <_printf_float+0xb6>
 800fef8:	f04f 0900 	mov.w	r9, #0
 800fefc:	f104 0a1a 	add.w	sl, r4, #26
 800ff00:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ff02:	425b      	negs	r3, r3
 800ff04:	454b      	cmp	r3, r9
 800ff06:	dc01      	bgt.n	800ff0c <_printf_float+0x2b4>
 800ff08:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ff0a:	e794      	b.n	800fe36 <_printf_float+0x1de>
 800ff0c:	2301      	movs	r3, #1
 800ff0e:	4652      	mov	r2, sl
 800ff10:	4631      	mov	r1, r6
 800ff12:	4628      	mov	r0, r5
 800ff14:	47b8      	blx	r7
 800ff16:	3001      	adds	r0, #1
 800ff18:	f43f aef9 	beq.w	800fd0e <_printf_float+0xb6>
 800ff1c:	f109 0901 	add.w	r9, r9, #1
 800ff20:	e7ee      	b.n	800ff00 <_printf_float+0x2a8>
 800ff22:	bf00      	nop
 800ff24:	7fefffff 	.word	0x7fefffff
 800ff28:	080135fc 	.word	0x080135fc
 800ff2c:	08013600 	.word	0x08013600
 800ff30:	08013608 	.word	0x08013608
 800ff34:	08013604 	.word	0x08013604
 800ff38:	0801360c 	.word	0x0801360c
 800ff3c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ff3e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800ff40:	429a      	cmp	r2, r3
 800ff42:	bfa8      	it	ge
 800ff44:	461a      	movge	r2, r3
 800ff46:	2a00      	cmp	r2, #0
 800ff48:	4691      	mov	r9, r2
 800ff4a:	dc37      	bgt.n	800ffbc <_printf_float+0x364>
 800ff4c:	f04f 0b00 	mov.w	fp, #0
 800ff50:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ff54:	f104 021a 	add.w	r2, r4, #26
 800ff58:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800ff5c:	ebaa 0309 	sub.w	r3, sl, r9
 800ff60:	455b      	cmp	r3, fp
 800ff62:	dc33      	bgt.n	800ffcc <_printf_float+0x374>
 800ff64:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800ff68:	429a      	cmp	r2, r3
 800ff6a:	db3b      	blt.n	800ffe4 <_printf_float+0x38c>
 800ff6c:	6823      	ldr	r3, [r4, #0]
 800ff6e:	07da      	lsls	r2, r3, #31
 800ff70:	d438      	bmi.n	800ffe4 <_printf_float+0x38c>
 800ff72:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ff74:	990d      	ldr	r1, [sp, #52]	; 0x34
 800ff76:	eba2 030a 	sub.w	r3, r2, sl
 800ff7a:	eba2 0901 	sub.w	r9, r2, r1
 800ff7e:	4599      	cmp	r9, r3
 800ff80:	bfa8      	it	ge
 800ff82:	4699      	movge	r9, r3
 800ff84:	f1b9 0f00 	cmp.w	r9, #0
 800ff88:	dc34      	bgt.n	800fff4 <_printf_float+0x39c>
 800ff8a:	f04f 0800 	mov.w	r8, #0
 800ff8e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ff92:	f104 0a1a 	add.w	sl, r4, #26
 800ff96:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800ff9a:	1a9b      	subs	r3, r3, r2
 800ff9c:	eba3 0309 	sub.w	r3, r3, r9
 800ffa0:	4543      	cmp	r3, r8
 800ffa2:	f77f af7a 	ble.w	800fe9a <_printf_float+0x242>
 800ffa6:	2301      	movs	r3, #1
 800ffa8:	4652      	mov	r2, sl
 800ffaa:	4631      	mov	r1, r6
 800ffac:	4628      	mov	r0, r5
 800ffae:	47b8      	blx	r7
 800ffb0:	3001      	adds	r0, #1
 800ffb2:	f43f aeac 	beq.w	800fd0e <_printf_float+0xb6>
 800ffb6:	f108 0801 	add.w	r8, r8, #1
 800ffba:	e7ec      	b.n	800ff96 <_printf_float+0x33e>
 800ffbc:	4613      	mov	r3, r2
 800ffbe:	4631      	mov	r1, r6
 800ffc0:	4642      	mov	r2, r8
 800ffc2:	4628      	mov	r0, r5
 800ffc4:	47b8      	blx	r7
 800ffc6:	3001      	adds	r0, #1
 800ffc8:	d1c0      	bne.n	800ff4c <_printf_float+0x2f4>
 800ffca:	e6a0      	b.n	800fd0e <_printf_float+0xb6>
 800ffcc:	2301      	movs	r3, #1
 800ffce:	4631      	mov	r1, r6
 800ffd0:	4628      	mov	r0, r5
 800ffd2:	920b      	str	r2, [sp, #44]	; 0x2c
 800ffd4:	47b8      	blx	r7
 800ffd6:	3001      	adds	r0, #1
 800ffd8:	f43f ae99 	beq.w	800fd0e <_printf_float+0xb6>
 800ffdc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800ffde:	f10b 0b01 	add.w	fp, fp, #1
 800ffe2:	e7b9      	b.n	800ff58 <_printf_float+0x300>
 800ffe4:	4631      	mov	r1, r6
 800ffe6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ffea:	4628      	mov	r0, r5
 800ffec:	47b8      	blx	r7
 800ffee:	3001      	adds	r0, #1
 800fff0:	d1bf      	bne.n	800ff72 <_printf_float+0x31a>
 800fff2:	e68c      	b.n	800fd0e <_printf_float+0xb6>
 800fff4:	464b      	mov	r3, r9
 800fff6:	4631      	mov	r1, r6
 800fff8:	4628      	mov	r0, r5
 800fffa:	eb08 020a 	add.w	r2, r8, sl
 800fffe:	47b8      	blx	r7
 8010000:	3001      	adds	r0, #1
 8010002:	d1c2      	bne.n	800ff8a <_printf_float+0x332>
 8010004:	e683      	b.n	800fd0e <_printf_float+0xb6>
 8010006:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8010008:	2a01      	cmp	r2, #1
 801000a:	dc01      	bgt.n	8010010 <_printf_float+0x3b8>
 801000c:	07db      	lsls	r3, r3, #31
 801000e:	d537      	bpl.n	8010080 <_printf_float+0x428>
 8010010:	2301      	movs	r3, #1
 8010012:	4642      	mov	r2, r8
 8010014:	4631      	mov	r1, r6
 8010016:	4628      	mov	r0, r5
 8010018:	47b8      	blx	r7
 801001a:	3001      	adds	r0, #1
 801001c:	f43f ae77 	beq.w	800fd0e <_printf_float+0xb6>
 8010020:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8010024:	4631      	mov	r1, r6
 8010026:	4628      	mov	r0, r5
 8010028:	47b8      	blx	r7
 801002a:	3001      	adds	r0, #1
 801002c:	f43f ae6f 	beq.w	800fd0e <_printf_float+0xb6>
 8010030:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8010034:	2200      	movs	r2, #0
 8010036:	2300      	movs	r3, #0
 8010038:	f7f0 fcf2 	bl	8000a20 <__aeabi_dcmpeq>
 801003c:	b9d8      	cbnz	r0, 8010076 <_printf_float+0x41e>
 801003e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010040:	f108 0201 	add.w	r2, r8, #1
 8010044:	3b01      	subs	r3, #1
 8010046:	4631      	mov	r1, r6
 8010048:	4628      	mov	r0, r5
 801004a:	47b8      	blx	r7
 801004c:	3001      	adds	r0, #1
 801004e:	d10e      	bne.n	801006e <_printf_float+0x416>
 8010050:	e65d      	b.n	800fd0e <_printf_float+0xb6>
 8010052:	2301      	movs	r3, #1
 8010054:	464a      	mov	r2, r9
 8010056:	4631      	mov	r1, r6
 8010058:	4628      	mov	r0, r5
 801005a:	47b8      	blx	r7
 801005c:	3001      	adds	r0, #1
 801005e:	f43f ae56 	beq.w	800fd0e <_printf_float+0xb6>
 8010062:	f108 0801 	add.w	r8, r8, #1
 8010066:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010068:	3b01      	subs	r3, #1
 801006a:	4543      	cmp	r3, r8
 801006c:	dcf1      	bgt.n	8010052 <_printf_float+0x3fa>
 801006e:	4653      	mov	r3, sl
 8010070:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8010074:	e6e0      	b.n	800fe38 <_printf_float+0x1e0>
 8010076:	f04f 0800 	mov.w	r8, #0
 801007a:	f104 091a 	add.w	r9, r4, #26
 801007e:	e7f2      	b.n	8010066 <_printf_float+0x40e>
 8010080:	2301      	movs	r3, #1
 8010082:	4642      	mov	r2, r8
 8010084:	e7df      	b.n	8010046 <_printf_float+0x3ee>
 8010086:	2301      	movs	r3, #1
 8010088:	464a      	mov	r2, r9
 801008a:	4631      	mov	r1, r6
 801008c:	4628      	mov	r0, r5
 801008e:	47b8      	blx	r7
 8010090:	3001      	adds	r0, #1
 8010092:	f43f ae3c 	beq.w	800fd0e <_printf_float+0xb6>
 8010096:	f108 0801 	add.w	r8, r8, #1
 801009a:	68e3      	ldr	r3, [r4, #12]
 801009c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 801009e:	1a5b      	subs	r3, r3, r1
 80100a0:	4543      	cmp	r3, r8
 80100a2:	dcf0      	bgt.n	8010086 <_printf_float+0x42e>
 80100a4:	e6fd      	b.n	800fea2 <_printf_float+0x24a>
 80100a6:	f04f 0800 	mov.w	r8, #0
 80100aa:	f104 0919 	add.w	r9, r4, #25
 80100ae:	e7f4      	b.n	801009a <_printf_float+0x442>

080100b0 <_printf_common>:
 80100b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80100b4:	4616      	mov	r6, r2
 80100b6:	4699      	mov	r9, r3
 80100b8:	688a      	ldr	r2, [r1, #8]
 80100ba:	690b      	ldr	r3, [r1, #16]
 80100bc:	4607      	mov	r7, r0
 80100be:	4293      	cmp	r3, r2
 80100c0:	bfb8      	it	lt
 80100c2:	4613      	movlt	r3, r2
 80100c4:	6033      	str	r3, [r6, #0]
 80100c6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80100ca:	460c      	mov	r4, r1
 80100cc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80100d0:	b10a      	cbz	r2, 80100d6 <_printf_common+0x26>
 80100d2:	3301      	adds	r3, #1
 80100d4:	6033      	str	r3, [r6, #0]
 80100d6:	6823      	ldr	r3, [r4, #0]
 80100d8:	0699      	lsls	r1, r3, #26
 80100da:	bf42      	ittt	mi
 80100dc:	6833      	ldrmi	r3, [r6, #0]
 80100de:	3302      	addmi	r3, #2
 80100e0:	6033      	strmi	r3, [r6, #0]
 80100e2:	6825      	ldr	r5, [r4, #0]
 80100e4:	f015 0506 	ands.w	r5, r5, #6
 80100e8:	d106      	bne.n	80100f8 <_printf_common+0x48>
 80100ea:	f104 0a19 	add.w	sl, r4, #25
 80100ee:	68e3      	ldr	r3, [r4, #12]
 80100f0:	6832      	ldr	r2, [r6, #0]
 80100f2:	1a9b      	subs	r3, r3, r2
 80100f4:	42ab      	cmp	r3, r5
 80100f6:	dc28      	bgt.n	801014a <_printf_common+0x9a>
 80100f8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80100fc:	1e13      	subs	r3, r2, #0
 80100fe:	6822      	ldr	r2, [r4, #0]
 8010100:	bf18      	it	ne
 8010102:	2301      	movne	r3, #1
 8010104:	0692      	lsls	r2, r2, #26
 8010106:	d42d      	bmi.n	8010164 <_printf_common+0xb4>
 8010108:	4649      	mov	r1, r9
 801010a:	4638      	mov	r0, r7
 801010c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8010110:	47c0      	blx	r8
 8010112:	3001      	adds	r0, #1
 8010114:	d020      	beq.n	8010158 <_printf_common+0xa8>
 8010116:	6823      	ldr	r3, [r4, #0]
 8010118:	68e5      	ldr	r5, [r4, #12]
 801011a:	f003 0306 	and.w	r3, r3, #6
 801011e:	2b04      	cmp	r3, #4
 8010120:	bf18      	it	ne
 8010122:	2500      	movne	r5, #0
 8010124:	6832      	ldr	r2, [r6, #0]
 8010126:	f04f 0600 	mov.w	r6, #0
 801012a:	68a3      	ldr	r3, [r4, #8]
 801012c:	bf08      	it	eq
 801012e:	1aad      	subeq	r5, r5, r2
 8010130:	6922      	ldr	r2, [r4, #16]
 8010132:	bf08      	it	eq
 8010134:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8010138:	4293      	cmp	r3, r2
 801013a:	bfc4      	itt	gt
 801013c:	1a9b      	subgt	r3, r3, r2
 801013e:	18ed      	addgt	r5, r5, r3
 8010140:	341a      	adds	r4, #26
 8010142:	42b5      	cmp	r5, r6
 8010144:	d11a      	bne.n	801017c <_printf_common+0xcc>
 8010146:	2000      	movs	r0, #0
 8010148:	e008      	b.n	801015c <_printf_common+0xac>
 801014a:	2301      	movs	r3, #1
 801014c:	4652      	mov	r2, sl
 801014e:	4649      	mov	r1, r9
 8010150:	4638      	mov	r0, r7
 8010152:	47c0      	blx	r8
 8010154:	3001      	adds	r0, #1
 8010156:	d103      	bne.n	8010160 <_printf_common+0xb0>
 8010158:	f04f 30ff 	mov.w	r0, #4294967295
 801015c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010160:	3501      	adds	r5, #1
 8010162:	e7c4      	b.n	80100ee <_printf_common+0x3e>
 8010164:	2030      	movs	r0, #48	; 0x30
 8010166:	18e1      	adds	r1, r4, r3
 8010168:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801016c:	1c5a      	adds	r2, r3, #1
 801016e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8010172:	4422      	add	r2, r4
 8010174:	3302      	adds	r3, #2
 8010176:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801017a:	e7c5      	b.n	8010108 <_printf_common+0x58>
 801017c:	2301      	movs	r3, #1
 801017e:	4622      	mov	r2, r4
 8010180:	4649      	mov	r1, r9
 8010182:	4638      	mov	r0, r7
 8010184:	47c0      	blx	r8
 8010186:	3001      	adds	r0, #1
 8010188:	d0e6      	beq.n	8010158 <_printf_common+0xa8>
 801018a:	3601      	adds	r6, #1
 801018c:	e7d9      	b.n	8010142 <_printf_common+0x92>
	...

08010190 <_printf_i>:
 8010190:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8010194:	460c      	mov	r4, r1
 8010196:	7e27      	ldrb	r7, [r4, #24]
 8010198:	4691      	mov	r9, r2
 801019a:	2f78      	cmp	r7, #120	; 0x78
 801019c:	4680      	mov	r8, r0
 801019e:	469a      	mov	sl, r3
 80101a0:	990c      	ldr	r1, [sp, #48]	; 0x30
 80101a2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80101a6:	d807      	bhi.n	80101b8 <_printf_i+0x28>
 80101a8:	2f62      	cmp	r7, #98	; 0x62
 80101aa:	d80a      	bhi.n	80101c2 <_printf_i+0x32>
 80101ac:	2f00      	cmp	r7, #0
 80101ae:	f000 80d9 	beq.w	8010364 <_printf_i+0x1d4>
 80101b2:	2f58      	cmp	r7, #88	; 0x58
 80101b4:	f000 80a4 	beq.w	8010300 <_printf_i+0x170>
 80101b8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80101bc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80101c0:	e03a      	b.n	8010238 <_printf_i+0xa8>
 80101c2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80101c6:	2b15      	cmp	r3, #21
 80101c8:	d8f6      	bhi.n	80101b8 <_printf_i+0x28>
 80101ca:	a001      	add	r0, pc, #4	; (adr r0, 80101d0 <_printf_i+0x40>)
 80101cc:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80101d0:	08010229 	.word	0x08010229
 80101d4:	0801023d 	.word	0x0801023d
 80101d8:	080101b9 	.word	0x080101b9
 80101dc:	080101b9 	.word	0x080101b9
 80101e0:	080101b9 	.word	0x080101b9
 80101e4:	080101b9 	.word	0x080101b9
 80101e8:	0801023d 	.word	0x0801023d
 80101ec:	080101b9 	.word	0x080101b9
 80101f0:	080101b9 	.word	0x080101b9
 80101f4:	080101b9 	.word	0x080101b9
 80101f8:	080101b9 	.word	0x080101b9
 80101fc:	0801034b 	.word	0x0801034b
 8010200:	0801026d 	.word	0x0801026d
 8010204:	0801032d 	.word	0x0801032d
 8010208:	080101b9 	.word	0x080101b9
 801020c:	080101b9 	.word	0x080101b9
 8010210:	0801036d 	.word	0x0801036d
 8010214:	080101b9 	.word	0x080101b9
 8010218:	0801026d 	.word	0x0801026d
 801021c:	080101b9 	.word	0x080101b9
 8010220:	080101b9 	.word	0x080101b9
 8010224:	08010335 	.word	0x08010335
 8010228:	680b      	ldr	r3, [r1, #0]
 801022a:	f104 0642 	add.w	r6, r4, #66	; 0x42
 801022e:	1d1a      	adds	r2, r3, #4
 8010230:	681b      	ldr	r3, [r3, #0]
 8010232:	600a      	str	r2, [r1, #0]
 8010234:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8010238:	2301      	movs	r3, #1
 801023a:	e0a4      	b.n	8010386 <_printf_i+0x1f6>
 801023c:	6825      	ldr	r5, [r4, #0]
 801023e:	6808      	ldr	r0, [r1, #0]
 8010240:	062e      	lsls	r6, r5, #24
 8010242:	f100 0304 	add.w	r3, r0, #4
 8010246:	d50a      	bpl.n	801025e <_printf_i+0xce>
 8010248:	6805      	ldr	r5, [r0, #0]
 801024a:	600b      	str	r3, [r1, #0]
 801024c:	2d00      	cmp	r5, #0
 801024e:	da03      	bge.n	8010258 <_printf_i+0xc8>
 8010250:	232d      	movs	r3, #45	; 0x2d
 8010252:	426d      	negs	r5, r5
 8010254:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010258:	230a      	movs	r3, #10
 801025a:	485e      	ldr	r0, [pc, #376]	; (80103d4 <_printf_i+0x244>)
 801025c:	e019      	b.n	8010292 <_printf_i+0x102>
 801025e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8010262:	6805      	ldr	r5, [r0, #0]
 8010264:	600b      	str	r3, [r1, #0]
 8010266:	bf18      	it	ne
 8010268:	b22d      	sxthne	r5, r5
 801026a:	e7ef      	b.n	801024c <_printf_i+0xbc>
 801026c:	680b      	ldr	r3, [r1, #0]
 801026e:	6825      	ldr	r5, [r4, #0]
 8010270:	1d18      	adds	r0, r3, #4
 8010272:	6008      	str	r0, [r1, #0]
 8010274:	0628      	lsls	r0, r5, #24
 8010276:	d501      	bpl.n	801027c <_printf_i+0xec>
 8010278:	681d      	ldr	r5, [r3, #0]
 801027a:	e002      	b.n	8010282 <_printf_i+0xf2>
 801027c:	0669      	lsls	r1, r5, #25
 801027e:	d5fb      	bpl.n	8010278 <_printf_i+0xe8>
 8010280:	881d      	ldrh	r5, [r3, #0]
 8010282:	2f6f      	cmp	r7, #111	; 0x6f
 8010284:	bf0c      	ite	eq
 8010286:	2308      	moveq	r3, #8
 8010288:	230a      	movne	r3, #10
 801028a:	4852      	ldr	r0, [pc, #328]	; (80103d4 <_printf_i+0x244>)
 801028c:	2100      	movs	r1, #0
 801028e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8010292:	6866      	ldr	r6, [r4, #4]
 8010294:	2e00      	cmp	r6, #0
 8010296:	bfa8      	it	ge
 8010298:	6821      	ldrge	r1, [r4, #0]
 801029a:	60a6      	str	r6, [r4, #8]
 801029c:	bfa4      	itt	ge
 801029e:	f021 0104 	bicge.w	r1, r1, #4
 80102a2:	6021      	strge	r1, [r4, #0]
 80102a4:	b90d      	cbnz	r5, 80102aa <_printf_i+0x11a>
 80102a6:	2e00      	cmp	r6, #0
 80102a8:	d04d      	beq.n	8010346 <_printf_i+0x1b6>
 80102aa:	4616      	mov	r6, r2
 80102ac:	fbb5 f1f3 	udiv	r1, r5, r3
 80102b0:	fb03 5711 	mls	r7, r3, r1, r5
 80102b4:	5dc7      	ldrb	r7, [r0, r7]
 80102b6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80102ba:	462f      	mov	r7, r5
 80102bc:	42bb      	cmp	r3, r7
 80102be:	460d      	mov	r5, r1
 80102c0:	d9f4      	bls.n	80102ac <_printf_i+0x11c>
 80102c2:	2b08      	cmp	r3, #8
 80102c4:	d10b      	bne.n	80102de <_printf_i+0x14e>
 80102c6:	6823      	ldr	r3, [r4, #0]
 80102c8:	07df      	lsls	r7, r3, #31
 80102ca:	d508      	bpl.n	80102de <_printf_i+0x14e>
 80102cc:	6923      	ldr	r3, [r4, #16]
 80102ce:	6861      	ldr	r1, [r4, #4]
 80102d0:	4299      	cmp	r1, r3
 80102d2:	bfde      	ittt	le
 80102d4:	2330      	movle	r3, #48	; 0x30
 80102d6:	f806 3c01 	strble.w	r3, [r6, #-1]
 80102da:	f106 36ff 	addle.w	r6, r6, #4294967295
 80102de:	1b92      	subs	r2, r2, r6
 80102e0:	6122      	str	r2, [r4, #16]
 80102e2:	464b      	mov	r3, r9
 80102e4:	4621      	mov	r1, r4
 80102e6:	4640      	mov	r0, r8
 80102e8:	f8cd a000 	str.w	sl, [sp]
 80102ec:	aa03      	add	r2, sp, #12
 80102ee:	f7ff fedf 	bl	80100b0 <_printf_common>
 80102f2:	3001      	adds	r0, #1
 80102f4:	d14c      	bne.n	8010390 <_printf_i+0x200>
 80102f6:	f04f 30ff 	mov.w	r0, #4294967295
 80102fa:	b004      	add	sp, #16
 80102fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010300:	4834      	ldr	r0, [pc, #208]	; (80103d4 <_printf_i+0x244>)
 8010302:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8010306:	680e      	ldr	r6, [r1, #0]
 8010308:	6823      	ldr	r3, [r4, #0]
 801030a:	f856 5b04 	ldr.w	r5, [r6], #4
 801030e:	061f      	lsls	r7, r3, #24
 8010310:	600e      	str	r6, [r1, #0]
 8010312:	d514      	bpl.n	801033e <_printf_i+0x1ae>
 8010314:	07d9      	lsls	r1, r3, #31
 8010316:	bf44      	itt	mi
 8010318:	f043 0320 	orrmi.w	r3, r3, #32
 801031c:	6023      	strmi	r3, [r4, #0]
 801031e:	b91d      	cbnz	r5, 8010328 <_printf_i+0x198>
 8010320:	6823      	ldr	r3, [r4, #0]
 8010322:	f023 0320 	bic.w	r3, r3, #32
 8010326:	6023      	str	r3, [r4, #0]
 8010328:	2310      	movs	r3, #16
 801032a:	e7af      	b.n	801028c <_printf_i+0xfc>
 801032c:	6823      	ldr	r3, [r4, #0]
 801032e:	f043 0320 	orr.w	r3, r3, #32
 8010332:	6023      	str	r3, [r4, #0]
 8010334:	2378      	movs	r3, #120	; 0x78
 8010336:	4828      	ldr	r0, [pc, #160]	; (80103d8 <_printf_i+0x248>)
 8010338:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801033c:	e7e3      	b.n	8010306 <_printf_i+0x176>
 801033e:	065e      	lsls	r6, r3, #25
 8010340:	bf48      	it	mi
 8010342:	b2ad      	uxthmi	r5, r5
 8010344:	e7e6      	b.n	8010314 <_printf_i+0x184>
 8010346:	4616      	mov	r6, r2
 8010348:	e7bb      	b.n	80102c2 <_printf_i+0x132>
 801034a:	680b      	ldr	r3, [r1, #0]
 801034c:	6826      	ldr	r6, [r4, #0]
 801034e:	1d1d      	adds	r5, r3, #4
 8010350:	6960      	ldr	r0, [r4, #20]
 8010352:	600d      	str	r5, [r1, #0]
 8010354:	0635      	lsls	r5, r6, #24
 8010356:	681b      	ldr	r3, [r3, #0]
 8010358:	d501      	bpl.n	801035e <_printf_i+0x1ce>
 801035a:	6018      	str	r0, [r3, #0]
 801035c:	e002      	b.n	8010364 <_printf_i+0x1d4>
 801035e:	0671      	lsls	r1, r6, #25
 8010360:	d5fb      	bpl.n	801035a <_printf_i+0x1ca>
 8010362:	8018      	strh	r0, [r3, #0]
 8010364:	2300      	movs	r3, #0
 8010366:	4616      	mov	r6, r2
 8010368:	6123      	str	r3, [r4, #16]
 801036a:	e7ba      	b.n	80102e2 <_printf_i+0x152>
 801036c:	680b      	ldr	r3, [r1, #0]
 801036e:	1d1a      	adds	r2, r3, #4
 8010370:	600a      	str	r2, [r1, #0]
 8010372:	681e      	ldr	r6, [r3, #0]
 8010374:	2100      	movs	r1, #0
 8010376:	4630      	mov	r0, r6
 8010378:	6862      	ldr	r2, [r4, #4]
 801037a:	f000 fee7 	bl	801114c <memchr>
 801037e:	b108      	cbz	r0, 8010384 <_printf_i+0x1f4>
 8010380:	1b80      	subs	r0, r0, r6
 8010382:	6060      	str	r0, [r4, #4]
 8010384:	6863      	ldr	r3, [r4, #4]
 8010386:	6123      	str	r3, [r4, #16]
 8010388:	2300      	movs	r3, #0
 801038a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801038e:	e7a8      	b.n	80102e2 <_printf_i+0x152>
 8010390:	4632      	mov	r2, r6
 8010392:	4649      	mov	r1, r9
 8010394:	4640      	mov	r0, r8
 8010396:	6923      	ldr	r3, [r4, #16]
 8010398:	47d0      	blx	sl
 801039a:	3001      	adds	r0, #1
 801039c:	d0ab      	beq.n	80102f6 <_printf_i+0x166>
 801039e:	6823      	ldr	r3, [r4, #0]
 80103a0:	079b      	lsls	r3, r3, #30
 80103a2:	d413      	bmi.n	80103cc <_printf_i+0x23c>
 80103a4:	68e0      	ldr	r0, [r4, #12]
 80103a6:	9b03      	ldr	r3, [sp, #12]
 80103a8:	4298      	cmp	r0, r3
 80103aa:	bfb8      	it	lt
 80103ac:	4618      	movlt	r0, r3
 80103ae:	e7a4      	b.n	80102fa <_printf_i+0x16a>
 80103b0:	2301      	movs	r3, #1
 80103b2:	4632      	mov	r2, r6
 80103b4:	4649      	mov	r1, r9
 80103b6:	4640      	mov	r0, r8
 80103b8:	47d0      	blx	sl
 80103ba:	3001      	adds	r0, #1
 80103bc:	d09b      	beq.n	80102f6 <_printf_i+0x166>
 80103be:	3501      	adds	r5, #1
 80103c0:	68e3      	ldr	r3, [r4, #12]
 80103c2:	9903      	ldr	r1, [sp, #12]
 80103c4:	1a5b      	subs	r3, r3, r1
 80103c6:	42ab      	cmp	r3, r5
 80103c8:	dcf2      	bgt.n	80103b0 <_printf_i+0x220>
 80103ca:	e7eb      	b.n	80103a4 <_printf_i+0x214>
 80103cc:	2500      	movs	r5, #0
 80103ce:	f104 0619 	add.w	r6, r4, #25
 80103d2:	e7f5      	b.n	80103c0 <_printf_i+0x230>
 80103d4:	0801360e 	.word	0x0801360e
 80103d8:	0801361f 	.word	0x0801361f

080103dc <realloc>:
 80103dc:	4b02      	ldr	r3, [pc, #8]	; (80103e8 <realloc+0xc>)
 80103de:	460a      	mov	r2, r1
 80103e0:	4601      	mov	r1, r0
 80103e2:	6818      	ldr	r0, [r3, #0]
 80103e4:	f001 ba6a 	b.w	80118bc <_realloc_r>
 80103e8:	200001a8 	.word	0x200001a8

080103ec <_sbrk_r>:
 80103ec:	b538      	push	{r3, r4, r5, lr}
 80103ee:	2300      	movs	r3, #0
 80103f0:	4d05      	ldr	r5, [pc, #20]	; (8010408 <_sbrk_r+0x1c>)
 80103f2:	4604      	mov	r4, r0
 80103f4:	4608      	mov	r0, r1
 80103f6:	602b      	str	r3, [r5, #0]
 80103f8:	f7f4 fe32 	bl	8005060 <_sbrk>
 80103fc:	1c43      	adds	r3, r0, #1
 80103fe:	d102      	bne.n	8010406 <_sbrk_r+0x1a>
 8010400:	682b      	ldr	r3, [r5, #0]
 8010402:	b103      	cbz	r3, 8010406 <_sbrk_r+0x1a>
 8010404:	6023      	str	r3, [r4, #0]
 8010406:	bd38      	pop	{r3, r4, r5, pc}
 8010408:	20002290 	.word	0x20002290

0801040c <siprintf>:
 801040c:	b40e      	push	{r1, r2, r3}
 801040e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8010412:	b500      	push	{lr}
 8010414:	b09c      	sub	sp, #112	; 0x70
 8010416:	ab1d      	add	r3, sp, #116	; 0x74
 8010418:	9002      	str	r0, [sp, #8]
 801041a:	9006      	str	r0, [sp, #24]
 801041c:	9107      	str	r1, [sp, #28]
 801041e:	9104      	str	r1, [sp, #16]
 8010420:	4808      	ldr	r0, [pc, #32]	; (8010444 <siprintf+0x38>)
 8010422:	4909      	ldr	r1, [pc, #36]	; (8010448 <siprintf+0x3c>)
 8010424:	f853 2b04 	ldr.w	r2, [r3], #4
 8010428:	9105      	str	r1, [sp, #20]
 801042a:	6800      	ldr	r0, [r0, #0]
 801042c:	a902      	add	r1, sp, #8
 801042e:	9301      	str	r3, [sp, #4]
 8010430:	f001 fac6 	bl	80119c0 <_svfiprintf_r>
 8010434:	2200      	movs	r2, #0
 8010436:	9b02      	ldr	r3, [sp, #8]
 8010438:	701a      	strb	r2, [r3, #0]
 801043a:	b01c      	add	sp, #112	; 0x70
 801043c:	f85d eb04 	ldr.w	lr, [sp], #4
 8010440:	b003      	add	sp, #12
 8010442:	4770      	bx	lr
 8010444:	200001a8 	.word	0x200001a8
 8010448:	ffff0208 	.word	0xffff0208

0801044c <quorem>:
 801044c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010450:	6903      	ldr	r3, [r0, #16]
 8010452:	690c      	ldr	r4, [r1, #16]
 8010454:	4607      	mov	r7, r0
 8010456:	42a3      	cmp	r3, r4
 8010458:	f2c0 8083 	blt.w	8010562 <quorem+0x116>
 801045c:	3c01      	subs	r4, #1
 801045e:	f100 0514 	add.w	r5, r0, #20
 8010462:	f101 0814 	add.w	r8, r1, #20
 8010466:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801046a:	9301      	str	r3, [sp, #4]
 801046c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8010470:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8010474:	3301      	adds	r3, #1
 8010476:	429a      	cmp	r2, r3
 8010478:	fbb2 f6f3 	udiv	r6, r2, r3
 801047c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8010480:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8010484:	d332      	bcc.n	80104ec <quorem+0xa0>
 8010486:	f04f 0e00 	mov.w	lr, #0
 801048a:	4640      	mov	r0, r8
 801048c:	46ac      	mov	ip, r5
 801048e:	46f2      	mov	sl, lr
 8010490:	f850 2b04 	ldr.w	r2, [r0], #4
 8010494:	b293      	uxth	r3, r2
 8010496:	fb06 e303 	mla	r3, r6, r3, lr
 801049a:	0c12      	lsrs	r2, r2, #16
 801049c:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80104a0:	fb06 e202 	mla	r2, r6, r2, lr
 80104a4:	b29b      	uxth	r3, r3
 80104a6:	ebaa 0303 	sub.w	r3, sl, r3
 80104aa:	f8dc a000 	ldr.w	sl, [ip]
 80104ae:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80104b2:	fa1f fa8a 	uxth.w	sl, sl
 80104b6:	4453      	add	r3, sl
 80104b8:	fa1f fa82 	uxth.w	sl, r2
 80104bc:	f8dc 2000 	ldr.w	r2, [ip]
 80104c0:	4581      	cmp	r9, r0
 80104c2:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 80104c6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80104ca:	b29b      	uxth	r3, r3
 80104cc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80104d0:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80104d4:	f84c 3b04 	str.w	r3, [ip], #4
 80104d8:	d2da      	bcs.n	8010490 <quorem+0x44>
 80104da:	f855 300b 	ldr.w	r3, [r5, fp]
 80104de:	b92b      	cbnz	r3, 80104ec <quorem+0xa0>
 80104e0:	9b01      	ldr	r3, [sp, #4]
 80104e2:	3b04      	subs	r3, #4
 80104e4:	429d      	cmp	r5, r3
 80104e6:	461a      	mov	r2, r3
 80104e8:	d32f      	bcc.n	801054a <quorem+0xfe>
 80104ea:	613c      	str	r4, [r7, #16]
 80104ec:	4638      	mov	r0, r7
 80104ee:	f001 f8cf 	bl	8011690 <__mcmp>
 80104f2:	2800      	cmp	r0, #0
 80104f4:	db25      	blt.n	8010542 <quorem+0xf6>
 80104f6:	4628      	mov	r0, r5
 80104f8:	f04f 0c00 	mov.w	ip, #0
 80104fc:	3601      	adds	r6, #1
 80104fe:	f858 1b04 	ldr.w	r1, [r8], #4
 8010502:	f8d0 e000 	ldr.w	lr, [r0]
 8010506:	b28b      	uxth	r3, r1
 8010508:	ebac 0303 	sub.w	r3, ip, r3
 801050c:	fa1f f28e 	uxth.w	r2, lr
 8010510:	4413      	add	r3, r2
 8010512:	0c0a      	lsrs	r2, r1, #16
 8010514:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8010518:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801051c:	b29b      	uxth	r3, r3
 801051e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8010522:	45c1      	cmp	r9, r8
 8010524:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8010528:	f840 3b04 	str.w	r3, [r0], #4
 801052c:	d2e7      	bcs.n	80104fe <quorem+0xb2>
 801052e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8010532:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8010536:	b922      	cbnz	r2, 8010542 <quorem+0xf6>
 8010538:	3b04      	subs	r3, #4
 801053a:	429d      	cmp	r5, r3
 801053c:	461a      	mov	r2, r3
 801053e:	d30a      	bcc.n	8010556 <quorem+0x10a>
 8010540:	613c      	str	r4, [r7, #16]
 8010542:	4630      	mov	r0, r6
 8010544:	b003      	add	sp, #12
 8010546:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801054a:	6812      	ldr	r2, [r2, #0]
 801054c:	3b04      	subs	r3, #4
 801054e:	2a00      	cmp	r2, #0
 8010550:	d1cb      	bne.n	80104ea <quorem+0x9e>
 8010552:	3c01      	subs	r4, #1
 8010554:	e7c6      	b.n	80104e4 <quorem+0x98>
 8010556:	6812      	ldr	r2, [r2, #0]
 8010558:	3b04      	subs	r3, #4
 801055a:	2a00      	cmp	r2, #0
 801055c:	d1f0      	bne.n	8010540 <quorem+0xf4>
 801055e:	3c01      	subs	r4, #1
 8010560:	e7eb      	b.n	801053a <quorem+0xee>
 8010562:	2000      	movs	r0, #0
 8010564:	e7ee      	b.n	8010544 <quorem+0xf8>
	...

08010568 <_dtoa_r>:
 8010568:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801056c:	4616      	mov	r6, r2
 801056e:	461f      	mov	r7, r3
 8010570:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8010572:	b099      	sub	sp, #100	; 0x64
 8010574:	4605      	mov	r5, r0
 8010576:	e9cd 6704 	strd	r6, r7, [sp, #16]
 801057a:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 801057e:	b974      	cbnz	r4, 801059e <_dtoa_r+0x36>
 8010580:	2010      	movs	r0, #16
 8010582:	f7ff f9ff 	bl	800f984 <malloc>
 8010586:	4602      	mov	r2, r0
 8010588:	6268      	str	r0, [r5, #36]	; 0x24
 801058a:	b920      	cbnz	r0, 8010596 <_dtoa_r+0x2e>
 801058c:	21ea      	movs	r1, #234	; 0xea
 801058e:	4bae      	ldr	r3, [pc, #696]	; (8010848 <_dtoa_r+0x2e0>)
 8010590:	48ae      	ldr	r0, [pc, #696]	; (801084c <_dtoa_r+0x2e4>)
 8010592:	f001 fb15 	bl	8011bc0 <__assert_func>
 8010596:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801059a:	6004      	str	r4, [r0, #0]
 801059c:	60c4      	str	r4, [r0, #12]
 801059e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80105a0:	6819      	ldr	r1, [r3, #0]
 80105a2:	b151      	cbz	r1, 80105ba <_dtoa_r+0x52>
 80105a4:	685a      	ldr	r2, [r3, #4]
 80105a6:	2301      	movs	r3, #1
 80105a8:	4093      	lsls	r3, r2
 80105aa:	604a      	str	r2, [r1, #4]
 80105ac:	608b      	str	r3, [r1, #8]
 80105ae:	4628      	mov	r0, r5
 80105b0:	f000 fe34 	bl	801121c <_Bfree>
 80105b4:	2200      	movs	r2, #0
 80105b6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80105b8:	601a      	str	r2, [r3, #0]
 80105ba:	1e3b      	subs	r3, r7, #0
 80105bc:	bfaf      	iteee	ge
 80105be:	2300      	movge	r3, #0
 80105c0:	2201      	movlt	r2, #1
 80105c2:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80105c6:	9305      	strlt	r3, [sp, #20]
 80105c8:	bfa8      	it	ge
 80105ca:	f8c8 3000 	strge.w	r3, [r8]
 80105ce:	f8dd 9014 	ldr.w	r9, [sp, #20]
 80105d2:	4b9f      	ldr	r3, [pc, #636]	; (8010850 <_dtoa_r+0x2e8>)
 80105d4:	bfb8      	it	lt
 80105d6:	f8c8 2000 	strlt.w	r2, [r8]
 80105da:	ea33 0309 	bics.w	r3, r3, r9
 80105de:	d119      	bne.n	8010614 <_dtoa_r+0xac>
 80105e0:	f242 730f 	movw	r3, #9999	; 0x270f
 80105e4:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80105e6:	6013      	str	r3, [r2, #0]
 80105e8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80105ec:	4333      	orrs	r3, r6
 80105ee:	f000 8580 	beq.w	80110f2 <_dtoa_r+0xb8a>
 80105f2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80105f4:	b953      	cbnz	r3, 801060c <_dtoa_r+0xa4>
 80105f6:	4b97      	ldr	r3, [pc, #604]	; (8010854 <_dtoa_r+0x2ec>)
 80105f8:	e022      	b.n	8010640 <_dtoa_r+0xd8>
 80105fa:	4b97      	ldr	r3, [pc, #604]	; (8010858 <_dtoa_r+0x2f0>)
 80105fc:	9308      	str	r3, [sp, #32]
 80105fe:	3308      	adds	r3, #8
 8010600:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8010602:	6013      	str	r3, [r2, #0]
 8010604:	9808      	ldr	r0, [sp, #32]
 8010606:	b019      	add	sp, #100	; 0x64
 8010608:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801060c:	4b91      	ldr	r3, [pc, #580]	; (8010854 <_dtoa_r+0x2ec>)
 801060e:	9308      	str	r3, [sp, #32]
 8010610:	3303      	adds	r3, #3
 8010612:	e7f5      	b.n	8010600 <_dtoa_r+0x98>
 8010614:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8010618:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 801061c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8010620:	2200      	movs	r2, #0
 8010622:	2300      	movs	r3, #0
 8010624:	f7f0 f9fc 	bl	8000a20 <__aeabi_dcmpeq>
 8010628:	4680      	mov	r8, r0
 801062a:	b158      	cbz	r0, 8010644 <_dtoa_r+0xdc>
 801062c:	2301      	movs	r3, #1
 801062e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8010630:	6013      	str	r3, [r2, #0]
 8010632:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8010634:	2b00      	cmp	r3, #0
 8010636:	f000 8559 	beq.w	80110ec <_dtoa_r+0xb84>
 801063a:	4888      	ldr	r0, [pc, #544]	; (801085c <_dtoa_r+0x2f4>)
 801063c:	6018      	str	r0, [r3, #0]
 801063e:	1e43      	subs	r3, r0, #1
 8010640:	9308      	str	r3, [sp, #32]
 8010642:	e7df      	b.n	8010604 <_dtoa_r+0x9c>
 8010644:	ab16      	add	r3, sp, #88	; 0x58
 8010646:	9301      	str	r3, [sp, #4]
 8010648:	ab17      	add	r3, sp, #92	; 0x5c
 801064a:	9300      	str	r3, [sp, #0]
 801064c:	4628      	mov	r0, r5
 801064e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8010652:	f001 f8c9 	bl	80117e8 <__d2b>
 8010656:	f3c9 540a 	ubfx	r4, r9, #20, #11
 801065a:	4682      	mov	sl, r0
 801065c:	2c00      	cmp	r4, #0
 801065e:	d07e      	beq.n	801075e <_dtoa_r+0x1f6>
 8010660:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8010664:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010666:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 801066a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801066e:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8010672:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8010676:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 801067a:	2200      	movs	r2, #0
 801067c:	4b78      	ldr	r3, [pc, #480]	; (8010860 <_dtoa_r+0x2f8>)
 801067e:	f7ef fdaf 	bl	80001e0 <__aeabi_dsub>
 8010682:	a36b      	add	r3, pc, #428	; (adr r3, 8010830 <_dtoa_r+0x2c8>)
 8010684:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010688:	f7ef ff62 	bl	8000550 <__aeabi_dmul>
 801068c:	a36a      	add	r3, pc, #424	; (adr r3, 8010838 <_dtoa_r+0x2d0>)
 801068e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010692:	f7ef fda7 	bl	80001e4 <__adddf3>
 8010696:	4606      	mov	r6, r0
 8010698:	4620      	mov	r0, r4
 801069a:	460f      	mov	r7, r1
 801069c:	f7ef feee 	bl	800047c <__aeabi_i2d>
 80106a0:	a367      	add	r3, pc, #412	; (adr r3, 8010840 <_dtoa_r+0x2d8>)
 80106a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80106a6:	f7ef ff53 	bl	8000550 <__aeabi_dmul>
 80106aa:	4602      	mov	r2, r0
 80106ac:	460b      	mov	r3, r1
 80106ae:	4630      	mov	r0, r6
 80106b0:	4639      	mov	r1, r7
 80106b2:	f7ef fd97 	bl	80001e4 <__adddf3>
 80106b6:	4606      	mov	r6, r0
 80106b8:	460f      	mov	r7, r1
 80106ba:	f7f0 f9f9 	bl	8000ab0 <__aeabi_d2iz>
 80106be:	2200      	movs	r2, #0
 80106c0:	4681      	mov	r9, r0
 80106c2:	2300      	movs	r3, #0
 80106c4:	4630      	mov	r0, r6
 80106c6:	4639      	mov	r1, r7
 80106c8:	f7f0 f9b4 	bl	8000a34 <__aeabi_dcmplt>
 80106cc:	b148      	cbz	r0, 80106e2 <_dtoa_r+0x17a>
 80106ce:	4648      	mov	r0, r9
 80106d0:	f7ef fed4 	bl	800047c <__aeabi_i2d>
 80106d4:	4632      	mov	r2, r6
 80106d6:	463b      	mov	r3, r7
 80106d8:	f7f0 f9a2 	bl	8000a20 <__aeabi_dcmpeq>
 80106dc:	b908      	cbnz	r0, 80106e2 <_dtoa_r+0x17a>
 80106de:	f109 39ff 	add.w	r9, r9, #4294967295
 80106e2:	f1b9 0f16 	cmp.w	r9, #22
 80106e6:	d857      	bhi.n	8010798 <_dtoa_r+0x230>
 80106e8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80106ec:	4b5d      	ldr	r3, [pc, #372]	; (8010864 <_dtoa_r+0x2fc>)
 80106ee:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 80106f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80106f6:	f7f0 f99d 	bl	8000a34 <__aeabi_dcmplt>
 80106fa:	2800      	cmp	r0, #0
 80106fc:	d04e      	beq.n	801079c <_dtoa_r+0x234>
 80106fe:	2300      	movs	r3, #0
 8010700:	f109 39ff 	add.w	r9, r9, #4294967295
 8010704:	930f      	str	r3, [sp, #60]	; 0x3c
 8010706:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8010708:	1b1c      	subs	r4, r3, r4
 801070a:	1e63      	subs	r3, r4, #1
 801070c:	9309      	str	r3, [sp, #36]	; 0x24
 801070e:	bf49      	itett	mi
 8010710:	f1c4 0301 	rsbmi	r3, r4, #1
 8010714:	2300      	movpl	r3, #0
 8010716:	9306      	strmi	r3, [sp, #24]
 8010718:	2300      	movmi	r3, #0
 801071a:	bf54      	ite	pl
 801071c:	9306      	strpl	r3, [sp, #24]
 801071e:	9309      	strmi	r3, [sp, #36]	; 0x24
 8010720:	f1b9 0f00 	cmp.w	r9, #0
 8010724:	db3c      	blt.n	80107a0 <_dtoa_r+0x238>
 8010726:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010728:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 801072c:	444b      	add	r3, r9
 801072e:	9309      	str	r3, [sp, #36]	; 0x24
 8010730:	2300      	movs	r3, #0
 8010732:	930a      	str	r3, [sp, #40]	; 0x28
 8010734:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8010736:	2b09      	cmp	r3, #9
 8010738:	d86c      	bhi.n	8010814 <_dtoa_r+0x2ac>
 801073a:	2b05      	cmp	r3, #5
 801073c:	bfc4      	itt	gt
 801073e:	3b04      	subgt	r3, #4
 8010740:	9322      	strgt	r3, [sp, #136]	; 0x88
 8010742:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8010744:	bfc8      	it	gt
 8010746:	2400      	movgt	r4, #0
 8010748:	f1a3 0302 	sub.w	r3, r3, #2
 801074c:	bfd8      	it	le
 801074e:	2401      	movle	r4, #1
 8010750:	2b03      	cmp	r3, #3
 8010752:	f200 808b 	bhi.w	801086c <_dtoa_r+0x304>
 8010756:	e8df f003 	tbb	[pc, r3]
 801075a:	4f2d      	.short	0x4f2d
 801075c:	5b4d      	.short	0x5b4d
 801075e:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8010762:	441c      	add	r4, r3
 8010764:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8010768:	2b20      	cmp	r3, #32
 801076a:	bfc3      	ittte	gt
 801076c:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8010770:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 8010774:	fa09 f303 	lslgt.w	r3, r9, r3
 8010778:	f1c3 0320 	rsble	r3, r3, #32
 801077c:	bfc6      	itte	gt
 801077e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8010782:	4318      	orrgt	r0, r3
 8010784:	fa06 f003 	lslle.w	r0, r6, r3
 8010788:	f7ef fe68 	bl	800045c <__aeabi_ui2d>
 801078c:	2301      	movs	r3, #1
 801078e:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8010792:	3c01      	subs	r4, #1
 8010794:	9313      	str	r3, [sp, #76]	; 0x4c
 8010796:	e770      	b.n	801067a <_dtoa_r+0x112>
 8010798:	2301      	movs	r3, #1
 801079a:	e7b3      	b.n	8010704 <_dtoa_r+0x19c>
 801079c:	900f      	str	r0, [sp, #60]	; 0x3c
 801079e:	e7b2      	b.n	8010706 <_dtoa_r+0x19e>
 80107a0:	9b06      	ldr	r3, [sp, #24]
 80107a2:	eba3 0309 	sub.w	r3, r3, r9
 80107a6:	9306      	str	r3, [sp, #24]
 80107a8:	f1c9 0300 	rsb	r3, r9, #0
 80107ac:	930a      	str	r3, [sp, #40]	; 0x28
 80107ae:	2300      	movs	r3, #0
 80107b0:	930e      	str	r3, [sp, #56]	; 0x38
 80107b2:	e7bf      	b.n	8010734 <_dtoa_r+0x1cc>
 80107b4:	2300      	movs	r3, #0
 80107b6:	930b      	str	r3, [sp, #44]	; 0x2c
 80107b8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80107ba:	2b00      	cmp	r3, #0
 80107bc:	dc59      	bgt.n	8010872 <_dtoa_r+0x30a>
 80107be:	f04f 0b01 	mov.w	fp, #1
 80107c2:	465b      	mov	r3, fp
 80107c4:	f8cd b008 	str.w	fp, [sp, #8]
 80107c8:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 80107cc:	2200      	movs	r2, #0
 80107ce:	6a68      	ldr	r0, [r5, #36]	; 0x24
 80107d0:	6042      	str	r2, [r0, #4]
 80107d2:	2204      	movs	r2, #4
 80107d4:	f102 0614 	add.w	r6, r2, #20
 80107d8:	429e      	cmp	r6, r3
 80107da:	6841      	ldr	r1, [r0, #4]
 80107dc:	d94f      	bls.n	801087e <_dtoa_r+0x316>
 80107de:	4628      	mov	r0, r5
 80107e0:	f000 fcdc 	bl	801119c <_Balloc>
 80107e4:	9008      	str	r0, [sp, #32]
 80107e6:	2800      	cmp	r0, #0
 80107e8:	d14d      	bne.n	8010886 <_dtoa_r+0x31e>
 80107ea:	4602      	mov	r2, r0
 80107ec:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80107f0:	4b1d      	ldr	r3, [pc, #116]	; (8010868 <_dtoa_r+0x300>)
 80107f2:	e6cd      	b.n	8010590 <_dtoa_r+0x28>
 80107f4:	2301      	movs	r3, #1
 80107f6:	e7de      	b.n	80107b6 <_dtoa_r+0x24e>
 80107f8:	2300      	movs	r3, #0
 80107fa:	930b      	str	r3, [sp, #44]	; 0x2c
 80107fc:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80107fe:	eb09 0b03 	add.w	fp, r9, r3
 8010802:	f10b 0301 	add.w	r3, fp, #1
 8010806:	2b01      	cmp	r3, #1
 8010808:	9302      	str	r3, [sp, #8]
 801080a:	bfb8      	it	lt
 801080c:	2301      	movlt	r3, #1
 801080e:	e7dd      	b.n	80107cc <_dtoa_r+0x264>
 8010810:	2301      	movs	r3, #1
 8010812:	e7f2      	b.n	80107fa <_dtoa_r+0x292>
 8010814:	2401      	movs	r4, #1
 8010816:	2300      	movs	r3, #0
 8010818:	940b      	str	r4, [sp, #44]	; 0x2c
 801081a:	9322      	str	r3, [sp, #136]	; 0x88
 801081c:	f04f 3bff 	mov.w	fp, #4294967295
 8010820:	2200      	movs	r2, #0
 8010822:	2312      	movs	r3, #18
 8010824:	f8cd b008 	str.w	fp, [sp, #8]
 8010828:	9223      	str	r2, [sp, #140]	; 0x8c
 801082a:	e7cf      	b.n	80107cc <_dtoa_r+0x264>
 801082c:	f3af 8000 	nop.w
 8010830:	636f4361 	.word	0x636f4361
 8010834:	3fd287a7 	.word	0x3fd287a7
 8010838:	8b60c8b3 	.word	0x8b60c8b3
 801083c:	3fc68a28 	.word	0x3fc68a28
 8010840:	509f79fb 	.word	0x509f79fb
 8010844:	3fd34413 	.word	0x3fd34413
 8010848:	0801363d 	.word	0x0801363d
 801084c:	08013654 	.word	0x08013654
 8010850:	7ff00000 	.word	0x7ff00000
 8010854:	08013639 	.word	0x08013639
 8010858:	08013630 	.word	0x08013630
 801085c:	0801360d 	.word	0x0801360d
 8010860:	3ff80000 	.word	0x3ff80000
 8010864:	08013750 	.word	0x08013750
 8010868:	080136b3 	.word	0x080136b3
 801086c:	2301      	movs	r3, #1
 801086e:	930b      	str	r3, [sp, #44]	; 0x2c
 8010870:	e7d4      	b.n	801081c <_dtoa_r+0x2b4>
 8010872:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 8010876:	465b      	mov	r3, fp
 8010878:	f8cd b008 	str.w	fp, [sp, #8]
 801087c:	e7a6      	b.n	80107cc <_dtoa_r+0x264>
 801087e:	3101      	adds	r1, #1
 8010880:	6041      	str	r1, [r0, #4]
 8010882:	0052      	lsls	r2, r2, #1
 8010884:	e7a6      	b.n	80107d4 <_dtoa_r+0x26c>
 8010886:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8010888:	9a08      	ldr	r2, [sp, #32]
 801088a:	601a      	str	r2, [r3, #0]
 801088c:	9b02      	ldr	r3, [sp, #8]
 801088e:	2b0e      	cmp	r3, #14
 8010890:	f200 80a8 	bhi.w	80109e4 <_dtoa_r+0x47c>
 8010894:	2c00      	cmp	r4, #0
 8010896:	f000 80a5 	beq.w	80109e4 <_dtoa_r+0x47c>
 801089a:	f1b9 0f00 	cmp.w	r9, #0
 801089e:	dd34      	ble.n	801090a <_dtoa_r+0x3a2>
 80108a0:	4a9a      	ldr	r2, [pc, #616]	; (8010b0c <_dtoa_r+0x5a4>)
 80108a2:	f009 030f 	and.w	r3, r9, #15
 80108a6:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80108aa:	f419 7f80 	tst.w	r9, #256	; 0x100
 80108ae:	e9d3 3400 	ldrd	r3, r4, [r3]
 80108b2:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80108b6:	ea4f 1429 	mov.w	r4, r9, asr #4
 80108ba:	d016      	beq.n	80108ea <_dtoa_r+0x382>
 80108bc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80108c0:	4b93      	ldr	r3, [pc, #588]	; (8010b10 <_dtoa_r+0x5a8>)
 80108c2:	2703      	movs	r7, #3
 80108c4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80108c8:	f7ef ff6c 	bl	80007a4 <__aeabi_ddiv>
 80108cc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80108d0:	f004 040f 	and.w	r4, r4, #15
 80108d4:	4e8e      	ldr	r6, [pc, #568]	; (8010b10 <_dtoa_r+0x5a8>)
 80108d6:	b954      	cbnz	r4, 80108ee <_dtoa_r+0x386>
 80108d8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80108dc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80108e0:	f7ef ff60 	bl	80007a4 <__aeabi_ddiv>
 80108e4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80108e8:	e029      	b.n	801093e <_dtoa_r+0x3d6>
 80108ea:	2702      	movs	r7, #2
 80108ec:	e7f2      	b.n	80108d4 <_dtoa_r+0x36c>
 80108ee:	07e1      	lsls	r1, r4, #31
 80108f0:	d508      	bpl.n	8010904 <_dtoa_r+0x39c>
 80108f2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80108f6:	e9d6 2300 	ldrd	r2, r3, [r6]
 80108fa:	f7ef fe29 	bl	8000550 <__aeabi_dmul>
 80108fe:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8010902:	3701      	adds	r7, #1
 8010904:	1064      	asrs	r4, r4, #1
 8010906:	3608      	adds	r6, #8
 8010908:	e7e5      	b.n	80108d6 <_dtoa_r+0x36e>
 801090a:	f000 80a5 	beq.w	8010a58 <_dtoa_r+0x4f0>
 801090e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8010912:	f1c9 0400 	rsb	r4, r9, #0
 8010916:	4b7d      	ldr	r3, [pc, #500]	; (8010b0c <_dtoa_r+0x5a4>)
 8010918:	f004 020f 	and.w	r2, r4, #15
 801091c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010920:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010924:	f7ef fe14 	bl	8000550 <__aeabi_dmul>
 8010928:	2702      	movs	r7, #2
 801092a:	2300      	movs	r3, #0
 801092c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8010930:	4e77      	ldr	r6, [pc, #476]	; (8010b10 <_dtoa_r+0x5a8>)
 8010932:	1124      	asrs	r4, r4, #4
 8010934:	2c00      	cmp	r4, #0
 8010936:	f040 8084 	bne.w	8010a42 <_dtoa_r+0x4da>
 801093a:	2b00      	cmp	r3, #0
 801093c:	d1d2      	bne.n	80108e4 <_dtoa_r+0x37c>
 801093e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8010940:	2b00      	cmp	r3, #0
 8010942:	f000 808b 	beq.w	8010a5c <_dtoa_r+0x4f4>
 8010946:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 801094a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 801094e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8010952:	2200      	movs	r2, #0
 8010954:	4b6f      	ldr	r3, [pc, #444]	; (8010b14 <_dtoa_r+0x5ac>)
 8010956:	f7f0 f86d 	bl	8000a34 <__aeabi_dcmplt>
 801095a:	2800      	cmp	r0, #0
 801095c:	d07e      	beq.n	8010a5c <_dtoa_r+0x4f4>
 801095e:	9b02      	ldr	r3, [sp, #8]
 8010960:	2b00      	cmp	r3, #0
 8010962:	d07b      	beq.n	8010a5c <_dtoa_r+0x4f4>
 8010964:	f1bb 0f00 	cmp.w	fp, #0
 8010968:	dd38      	ble.n	80109dc <_dtoa_r+0x474>
 801096a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 801096e:	2200      	movs	r2, #0
 8010970:	4b69      	ldr	r3, [pc, #420]	; (8010b18 <_dtoa_r+0x5b0>)
 8010972:	f7ef fded 	bl	8000550 <__aeabi_dmul>
 8010976:	465c      	mov	r4, fp
 8010978:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801097c:	f109 38ff 	add.w	r8, r9, #4294967295
 8010980:	3701      	adds	r7, #1
 8010982:	4638      	mov	r0, r7
 8010984:	f7ef fd7a 	bl	800047c <__aeabi_i2d>
 8010988:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801098c:	f7ef fde0 	bl	8000550 <__aeabi_dmul>
 8010990:	2200      	movs	r2, #0
 8010992:	4b62      	ldr	r3, [pc, #392]	; (8010b1c <_dtoa_r+0x5b4>)
 8010994:	f7ef fc26 	bl	80001e4 <__adddf3>
 8010998:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 801099c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80109a0:	9611      	str	r6, [sp, #68]	; 0x44
 80109a2:	2c00      	cmp	r4, #0
 80109a4:	d15d      	bne.n	8010a62 <_dtoa_r+0x4fa>
 80109a6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80109aa:	2200      	movs	r2, #0
 80109ac:	4b5c      	ldr	r3, [pc, #368]	; (8010b20 <_dtoa_r+0x5b8>)
 80109ae:	f7ef fc17 	bl	80001e0 <__aeabi_dsub>
 80109b2:	4602      	mov	r2, r0
 80109b4:	460b      	mov	r3, r1
 80109b6:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80109ba:	4633      	mov	r3, r6
 80109bc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80109be:	f7f0 f857 	bl	8000a70 <__aeabi_dcmpgt>
 80109c2:	2800      	cmp	r0, #0
 80109c4:	f040 829e 	bne.w	8010f04 <_dtoa_r+0x99c>
 80109c8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80109cc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80109ce:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80109d2:	f7f0 f82f 	bl	8000a34 <__aeabi_dcmplt>
 80109d6:	2800      	cmp	r0, #0
 80109d8:	f040 8292 	bne.w	8010f00 <_dtoa_r+0x998>
 80109dc:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 80109e0:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80109e4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80109e6:	2b00      	cmp	r3, #0
 80109e8:	f2c0 8153 	blt.w	8010c92 <_dtoa_r+0x72a>
 80109ec:	f1b9 0f0e 	cmp.w	r9, #14
 80109f0:	f300 814f 	bgt.w	8010c92 <_dtoa_r+0x72a>
 80109f4:	4b45      	ldr	r3, [pc, #276]	; (8010b0c <_dtoa_r+0x5a4>)
 80109f6:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 80109fa:	e9d3 3400 	ldrd	r3, r4, [r3]
 80109fe:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8010a02:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8010a04:	2b00      	cmp	r3, #0
 8010a06:	f280 80db 	bge.w	8010bc0 <_dtoa_r+0x658>
 8010a0a:	9b02      	ldr	r3, [sp, #8]
 8010a0c:	2b00      	cmp	r3, #0
 8010a0e:	f300 80d7 	bgt.w	8010bc0 <_dtoa_r+0x658>
 8010a12:	f040 8274 	bne.w	8010efe <_dtoa_r+0x996>
 8010a16:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8010a1a:	2200      	movs	r2, #0
 8010a1c:	4b40      	ldr	r3, [pc, #256]	; (8010b20 <_dtoa_r+0x5b8>)
 8010a1e:	f7ef fd97 	bl	8000550 <__aeabi_dmul>
 8010a22:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010a26:	f7f0 f819 	bl	8000a5c <__aeabi_dcmpge>
 8010a2a:	9c02      	ldr	r4, [sp, #8]
 8010a2c:	4626      	mov	r6, r4
 8010a2e:	2800      	cmp	r0, #0
 8010a30:	f040 824a 	bne.w	8010ec8 <_dtoa_r+0x960>
 8010a34:	2331      	movs	r3, #49	; 0x31
 8010a36:	9f08      	ldr	r7, [sp, #32]
 8010a38:	f109 0901 	add.w	r9, r9, #1
 8010a3c:	f807 3b01 	strb.w	r3, [r7], #1
 8010a40:	e246      	b.n	8010ed0 <_dtoa_r+0x968>
 8010a42:	07e2      	lsls	r2, r4, #31
 8010a44:	d505      	bpl.n	8010a52 <_dtoa_r+0x4ea>
 8010a46:	e9d6 2300 	ldrd	r2, r3, [r6]
 8010a4a:	f7ef fd81 	bl	8000550 <__aeabi_dmul>
 8010a4e:	2301      	movs	r3, #1
 8010a50:	3701      	adds	r7, #1
 8010a52:	1064      	asrs	r4, r4, #1
 8010a54:	3608      	adds	r6, #8
 8010a56:	e76d      	b.n	8010934 <_dtoa_r+0x3cc>
 8010a58:	2702      	movs	r7, #2
 8010a5a:	e770      	b.n	801093e <_dtoa_r+0x3d6>
 8010a5c:	46c8      	mov	r8, r9
 8010a5e:	9c02      	ldr	r4, [sp, #8]
 8010a60:	e78f      	b.n	8010982 <_dtoa_r+0x41a>
 8010a62:	9908      	ldr	r1, [sp, #32]
 8010a64:	4b29      	ldr	r3, [pc, #164]	; (8010b0c <_dtoa_r+0x5a4>)
 8010a66:	4421      	add	r1, r4
 8010a68:	9112      	str	r1, [sp, #72]	; 0x48
 8010a6a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8010a6c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8010a70:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8010a74:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8010a78:	2900      	cmp	r1, #0
 8010a7a:	d055      	beq.n	8010b28 <_dtoa_r+0x5c0>
 8010a7c:	2000      	movs	r0, #0
 8010a7e:	4929      	ldr	r1, [pc, #164]	; (8010b24 <_dtoa_r+0x5bc>)
 8010a80:	f7ef fe90 	bl	80007a4 <__aeabi_ddiv>
 8010a84:	463b      	mov	r3, r7
 8010a86:	4632      	mov	r2, r6
 8010a88:	f7ef fbaa 	bl	80001e0 <__aeabi_dsub>
 8010a8c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8010a90:	9f08      	ldr	r7, [sp, #32]
 8010a92:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010a96:	f7f0 f80b 	bl	8000ab0 <__aeabi_d2iz>
 8010a9a:	4604      	mov	r4, r0
 8010a9c:	f7ef fcee 	bl	800047c <__aeabi_i2d>
 8010aa0:	4602      	mov	r2, r0
 8010aa2:	460b      	mov	r3, r1
 8010aa4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010aa8:	f7ef fb9a 	bl	80001e0 <__aeabi_dsub>
 8010aac:	4602      	mov	r2, r0
 8010aae:	460b      	mov	r3, r1
 8010ab0:	3430      	adds	r4, #48	; 0x30
 8010ab2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8010ab6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8010aba:	f807 4b01 	strb.w	r4, [r7], #1
 8010abe:	f7ef ffb9 	bl	8000a34 <__aeabi_dcmplt>
 8010ac2:	2800      	cmp	r0, #0
 8010ac4:	d174      	bne.n	8010bb0 <_dtoa_r+0x648>
 8010ac6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010aca:	2000      	movs	r0, #0
 8010acc:	4911      	ldr	r1, [pc, #68]	; (8010b14 <_dtoa_r+0x5ac>)
 8010ace:	f7ef fb87 	bl	80001e0 <__aeabi_dsub>
 8010ad2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8010ad6:	f7ef ffad 	bl	8000a34 <__aeabi_dcmplt>
 8010ada:	2800      	cmp	r0, #0
 8010adc:	f040 80b6 	bne.w	8010c4c <_dtoa_r+0x6e4>
 8010ae0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8010ae2:	429f      	cmp	r7, r3
 8010ae4:	f43f af7a 	beq.w	80109dc <_dtoa_r+0x474>
 8010ae8:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8010aec:	2200      	movs	r2, #0
 8010aee:	4b0a      	ldr	r3, [pc, #40]	; (8010b18 <_dtoa_r+0x5b0>)
 8010af0:	f7ef fd2e 	bl	8000550 <__aeabi_dmul>
 8010af4:	2200      	movs	r2, #0
 8010af6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8010afa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010afe:	4b06      	ldr	r3, [pc, #24]	; (8010b18 <_dtoa_r+0x5b0>)
 8010b00:	f7ef fd26 	bl	8000550 <__aeabi_dmul>
 8010b04:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8010b08:	e7c3      	b.n	8010a92 <_dtoa_r+0x52a>
 8010b0a:	bf00      	nop
 8010b0c:	08013750 	.word	0x08013750
 8010b10:	08013728 	.word	0x08013728
 8010b14:	3ff00000 	.word	0x3ff00000
 8010b18:	40240000 	.word	0x40240000
 8010b1c:	401c0000 	.word	0x401c0000
 8010b20:	40140000 	.word	0x40140000
 8010b24:	3fe00000 	.word	0x3fe00000
 8010b28:	4630      	mov	r0, r6
 8010b2a:	4639      	mov	r1, r7
 8010b2c:	f7ef fd10 	bl	8000550 <__aeabi_dmul>
 8010b30:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8010b32:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8010b36:	9c08      	ldr	r4, [sp, #32]
 8010b38:	9314      	str	r3, [sp, #80]	; 0x50
 8010b3a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010b3e:	f7ef ffb7 	bl	8000ab0 <__aeabi_d2iz>
 8010b42:	9015      	str	r0, [sp, #84]	; 0x54
 8010b44:	f7ef fc9a 	bl	800047c <__aeabi_i2d>
 8010b48:	4602      	mov	r2, r0
 8010b4a:	460b      	mov	r3, r1
 8010b4c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010b50:	f7ef fb46 	bl	80001e0 <__aeabi_dsub>
 8010b54:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8010b56:	4606      	mov	r6, r0
 8010b58:	3330      	adds	r3, #48	; 0x30
 8010b5a:	f804 3b01 	strb.w	r3, [r4], #1
 8010b5e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8010b60:	460f      	mov	r7, r1
 8010b62:	429c      	cmp	r4, r3
 8010b64:	f04f 0200 	mov.w	r2, #0
 8010b68:	d124      	bne.n	8010bb4 <_dtoa_r+0x64c>
 8010b6a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8010b6e:	4bb3      	ldr	r3, [pc, #716]	; (8010e3c <_dtoa_r+0x8d4>)
 8010b70:	f7ef fb38 	bl	80001e4 <__adddf3>
 8010b74:	4602      	mov	r2, r0
 8010b76:	460b      	mov	r3, r1
 8010b78:	4630      	mov	r0, r6
 8010b7a:	4639      	mov	r1, r7
 8010b7c:	f7ef ff78 	bl	8000a70 <__aeabi_dcmpgt>
 8010b80:	2800      	cmp	r0, #0
 8010b82:	d162      	bne.n	8010c4a <_dtoa_r+0x6e2>
 8010b84:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8010b88:	2000      	movs	r0, #0
 8010b8a:	49ac      	ldr	r1, [pc, #688]	; (8010e3c <_dtoa_r+0x8d4>)
 8010b8c:	f7ef fb28 	bl	80001e0 <__aeabi_dsub>
 8010b90:	4602      	mov	r2, r0
 8010b92:	460b      	mov	r3, r1
 8010b94:	4630      	mov	r0, r6
 8010b96:	4639      	mov	r1, r7
 8010b98:	f7ef ff4c 	bl	8000a34 <__aeabi_dcmplt>
 8010b9c:	2800      	cmp	r0, #0
 8010b9e:	f43f af1d 	beq.w	80109dc <_dtoa_r+0x474>
 8010ba2:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8010ba4:	1e7b      	subs	r3, r7, #1
 8010ba6:	9314      	str	r3, [sp, #80]	; 0x50
 8010ba8:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8010bac:	2b30      	cmp	r3, #48	; 0x30
 8010bae:	d0f8      	beq.n	8010ba2 <_dtoa_r+0x63a>
 8010bb0:	46c1      	mov	r9, r8
 8010bb2:	e03a      	b.n	8010c2a <_dtoa_r+0x6c2>
 8010bb4:	4ba2      	ldr	r3, [pc, #648]	; (8010e40 <_dtoa_r+0x8d8>)
 8010bb6:	f7ef fccb 	bl	8000550 <__aeabi_dmul>
 8010bba:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8010bbe:	e7bc      	b.n	8010b3a <_dtoa_r+0x5d2>
 8010bc0:	9f08      	ldr	r7, [sp, #32]
 8010bc2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8010bc6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010bca:	f7ef fdeb 	bl	80007a4 <__aeabi_ddiv>
 8010bce:	f7ef ff6f 	bl	8000ab0 <__aeabi_d2iz>
 8010bd2:	4604      	mov	r4, r0
 8010bd4:	f7ef fc52 	bl	800047c <__aeabi_i2d>
 8010bd8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8010bdc:	f7ef fcb8 	bl	8000550 <__aeabi_dmul>
 8010be0:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8010be4:	460b      	mov	r3, r1
 8010be6:	4602      	mov	r2, r0
 8010be8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010bec:	f7ef faf8 	bl	80001e0 <__aeabi_dsub>
 8010bf0:	f807 6b01 	strb.w	r6, [r7], #1
 8010bf4:	9e08      	ldr	r6, [sp, #32]
 8010bf6:	9b02      	ldr	r3, [sp, #8]
 8010bf8:	1bbe      	subs	r6, r7, r6
 8010bfa:	42b3      	cmp	r3, r6
 8010bfc:	d13a      	bne.n	8010c74 <_dtoa_r+0x70c>
 8010bfe:	4602      	mov	r2, r0
 8010c00:	460b      	mov	r3, r1
 8010c02:	f7ef faef 	bl	80001e4 <__adddf3>
 8010c06:	4602      	mov	r2, r0
 8010c08:	460b      	mov	r3, r1
 8010c0a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8010c0e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8010c12:	f7ef ff2d 	bl	8000a70 <__aeabi_dcmpgt>
 8010c16:	bb58      	cbnz	r0, 8010c70 <_dtoa_r+0x708>
 8010c18:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8010c1c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010c20:	f7ef fefe 	bl	8000a20 <__aeabi_dcmpeq>
 8010c24:	b108      	cbz	r0, 8010c2a <_dtoa_r+0x6c2>
 8010c26:	07e1      	lsls	r1, r4, #31
 8010c28:	d422      	bmi.n	8010c70 <_dtoa_r+0x708>
 8010c2a:	4628      	mov	r0, r5
 8010c2c:	4651      	mov	r1, sl
 8010c2e:	f000 faf5 	bl	801121c <_Bfree>
 8010c32:	2300      	movs	r3, #0
 8010c34:	703b      	strb	r3, [r7, #0]
 8010c36:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8010c38:	f109 0001 	add.w	r0, r9, #1
 8010c3c:	6018      	str	r0, [r3, #0]
 8010c3e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8010c40:	2b00      	cmp	r3, #0
 8010c42:	f43f acdf 	beq.w	8010604 <_dtoa_r+0x9c>
 8010c46:	601f      	str	r7, [r3, #0]
 8010c48:	e4dc      	b.n	8010604 <_dtoa_r+0x9c>
 8010c4a:	4627      	mov	r7, r4
 8010c4c:	463b      	mov	r3, r7
 8010c4e:	461f      	mov	r7, r3
 8010c50:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8010c54:	2a39      	cmp	r2, #57	; 0x39
 8010c56:	d107      	bne.n	8010c68 <_dtoa_r+0x700>
 8010c58:	9a08      	ldr	r2, [sp, #32]
 8010c5a:	429a      	cmp	r2, r3
 8010c5c:	d1f7      	bne.n	8010c4e <_dtoa_r+0x6e6>
 8010c5e:	2230      	movs	r2, #48	; 0x30
 8010c60:	9908      	ldr	r1, [sp, #32]
 8010c62:	f108 0801 	add.w	r8, r8, #1
 8010c66:	700a      	strb	r2, [r1, #0]
 8010c68:	781a      	ldrb	r2, [r3, #0]
 8010c6a:	3201      	adds	r2, #1
 8010c6c:	701a      	strb	r2, [r3, #0]
 8010c6e:	e79f      	b.n	8010bb0 <_dtoa_r+0x648>
 8010c70:	46c8      	mov	r8, r9
 8010c72:	e7eb      	b.n	8010c4c <_dtoa_r+0x6e4>
 8010c74:	2200      	movs	r2, #0
 8010c76:	4b72      	ldr	r3, [pc, #456]	; (8010e40 <_dtoa_r+0x8d8>)
 8010c78:	f7ef fc6a 	bl	8000550 <__aeabi_dmul>
 8010c7c:	4602      	mov	r2, r0
 8010c7e:	460b      	mov	r3, r1
 8010c80:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8010c84:	2200      	movs	r2, #0
 8010c86:	2300      	movs	r3, #0
 8010c88:	f7ef feca 	bl	8000a20 <__aeabi_dcmpeq>
 8010c8c:	2800      	cmp	r0, #0
 8010c8e:	d098      	beq.n	8010bc2 <_dtoa_r+0x65a>
 8010c90:	e7cb      	b.n	8010c2a <_dtoa_r+0x6c2>
 8010c92:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8010c94:	2a00      	cmp	r2, #0
 8010c96:	f000 80cd 	beq.w	8010e34 <_dtoa_r+0x8cc>
 8010c9a:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8010c9c:	2a01      	cmp	r2, #1
 8010c9e:	f300 80af 	bgt.w	8010e00 <_dtoa_r+0x898>
 8010ca2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8010ca4:	2a00      	cmp	r2, #0
 8010ca6:	f000 80a7 	beq.w	8010df8 <_dtoa_r+0x890>
 8010caa:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8010cae:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8010cb0:	9f06      	ldr	r7, [sp, #24]
 8010cb2:	9a06      	ldr	r2, [sp, #24]
 8010cb4:	2101      	movs	r1, #1
 8010cb6:	441a      	add	r2, r3
 8010cb8:	9206      	str	r2, [sp, #24]
 8010cba:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010cbc:	4628      	mov	r0, r5
 8010cbe:	441a      	add	r2, r3
 8010cc0:	9209      	str	r2, [sp, #36]	; 0x24
 8010cc2:	f000 fb65 	bl	8011390 <__i2b>
 8010cc6:	4606      	mov	r6, r0
 8010cc8:	2f00      	cmp	r7, #0
 8010cca:	dd0c      	ble.n	8010ce6 <_dtoa_r+0x77e>
 8010ccc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010cce:	2b00      	cmp	r3, #0
 8010cd0:	dd09      	ble.n	8010ce6 <_dtoa_r+0x77e>
 8010cd2:	42bb      	cmp	r3, r7
 8010cd4:	bfa8      	it	ge
 8010cd6:	463b      	movge	r3, r7
 8010cd8:	9a06      	ldr	r2, [sp, #24]
 8010cda:	1aff      	subs	r7, r7, r3
 8010cdc:	1ad2      	subs	r2, r2, r3
 8010cde:	9206      	str	r2, [sp, #24]
 8010ce0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010ce2:	1ad3      	subs	r3, r2, r3
 8010ce4:	9309      	str	r3, [sp, #36]	; 0x24
 8010ce6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010ce8:	b1f3      	cbz	r3, 8010d28 <_dtoa_r+0x7c0>
 8010cea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010cec:	2b00      	cmp	r3, #0
 8010cee:	f000 80a9 	beq.w	8010e44 <_dtoa_r+0x8dc>
 8010cf2:	2c00      	cmp	r4, #0
 8010cf4:	dd10      	ble.n	8010d18 <_dtoa_r+0x7b0>
 8010cf6:	4631      	mov	r1, r6
 8010cf8:	4622      	mov	r2, r4
 8010cfa:	4628      	mov	r0, r5
 8010cfc:	f000 fc02 	bl	8011504 <__pow5mult>
 8010d00:	4652      	mov	r2, sl
 8010d02:	4601      	mov	r1, r0
 8010d04:	4606      	mov	r6, r0
 8010d06:	4628      	mov	r0, r5
 8010d08:	f000 fb58 	bl	80113bc <__multiply>
 8010d0c:	4680      	mov	r8, r0
 8010d0e:	4651      	mov	r1, sl
 8010d10:	4628      	mov	r0, r5
 8010d12:	f000 fa83 	bl	801121c <_Bfree>
 8010d16:	46c2      	mov	sl, r8
 8010d18:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010d1a:	1b1a      	subs	r2, r3, r4
 8010d1c:	d004      	beq.n	8010d28 <_dtoa_r+0x7c0>
 8010d1e:	4651      	mov	r1, sl
 8010d20:	4628      	mov	r0, r5
 8010d22:	f000 fbef 	bl	8011504 <__pow5mult>
 8010d26:	4682      	mov	sl, r0
 8010d28:	2101      	movs	r1, #1
 8010d2a:	4628      	mov	r0, r5
 8010d2c:	f000 fb30 	bl	8011390 <__i2b>
 8010d30:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010d32:	4604      	mov	r4, r0
 8010d34:	2b00      	cmp	r3, #0
 8010d36:	f340 8087 	ble.w	8010e48 <_dtoa_r+0x8e0>
 8010d3a:	461a      	mov	r2, r3
 8010d3c:	4601      	mov	r1, r0
 8010d3e:	4628      	mov	r0, r5
 8010d40:	f000 fbe0 	bl	8011504 <__pow5mult>
 8010d44:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8010d46:	4604      	mov	r4, r0
 8010d48:	2b01      	cmp	r3, #1
 8010d4a:	f340 8080 	ble.w	8010e4e <_dtoa_r+0x8e6>
 8010d4e:	f04f 0800 	mov.w	r8, #0
 8010d52:	6923      	ldr	r3, [r4, #16]
 8010d54:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8010d58:	6918      	ldr	r0, [r3, #16]
 8010d5a:	f000 facb 	bl	80112f4 <__hi0bits>
 8010d5e:	f1c0 0020 	rsb	r0, r0, #32
 8010d62:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010d64:	4418      	add	r0, r3
 8010d66:	f010 001f 	ands.w	r0, r0, #31
 8010d6a:	f000 8092 	beq.w	8010e92 <_dtoa_r+0x92a>
 8010d6e:	f1c0 0320 	rsb	r3, r0, #32
 8010d72:	2b04      	cmp	r3, #4
 8010d74:	f340 808a 	ble.w	8010e8c <_dtoa_r+0x924>
 8010d78:	f1c0 001c 	rsb	r0, r0, #28
 8010d7c:	9b06      	ldr	r3, [sp, #24]
 8010d7e:	4407      	add	r7, r0
 8010d80:	4403      	add	r3, r0
 8010d82:	9306      	str	r3, [sp, #24]
 8010d84:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010d86:	4403      	add	r3, r0
 8010d88:	9309      	str	r3, [sp, #36]	; 0x24
 8010d8a:	9b06      	ldr	r3, [sp, #24]
 8010d8c:	2b00      	cmp	r3, #0
 8010d8e:	dd05      	ble.n	8010d9c <_dtoa_r+0x834>
 8010d90:	4651      	mov	r1, sl
 8010d92:	461a      	mov	r2, r3
 8010d94:	4628      	mov	r0, r5
 8010d96:	f000 fc0f 	bl	80115b8 <__lshift>
 8010d9a:	4682      	mov	sl, r0
 8010d9c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010d9e:	2b00      	cmp	r3, #0
 8010da0:	dd05      	ble.n	8010dae <_dtoa_r+0x846>
 8010da2:	4621      	mov	r1, r4
 8010da4:	461a      	mov	r2, r3
 8010da6:	4628      	mov	r0, r5
 8010da8:	f000 fc06 	bl	80115b8 <__lshift>
 8010dac:	4604      	mov	r4, r0
 8010dae:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8010db0:	2b00      	cmp	r3, #0
 8010db2:	d070      	beq.n	8010e96 <_dtoa_r+0x92e>
 8010db4:	4621      	mov	r1, r4
 8010db6:	4650      	mov	r0, sl
 8010db8:	f000 fc6a 	bl	8011690 <__mcmp>
 8010dbc:	2800      	cmp	r0, #0
 8010dbe:	da6a      	bge.n	8010e96 <_dtoa_r+0x92e>
 8010dc0:	2300      	movs	r3, #0
 8010dc2:	4651      	mov	r1, sl
 8010dc4:	220a      	movs	r2, #10
 8010dc6:	4628      	mov	r0, r5
 8010dc8:	f000 fa4a 	bl	8011260 <__multadd>
 8010dcc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010dce:	4682      	mov	sl, r0
 8010dd0:	f109 39ff 	add.w	r9, r9, #4294967295
 8010dd4:	2b00      	cmp	r3, #0
 8010dd6:	f000 8193 	beq.w	8011100 <_dtoa_r+0xb98>
 8010dda:	4631      	mov	r1, r6
 8010ddc:	2300      	movs	r3, #0
 8010dde:	220a      	movs	r2, #10
 8010de0:	4628      	mov	r0, r5
 8010de2:	f000 fa3d 	bl	8011260 <__multadd>
 8010de6:	f1bb 0f00 	cmp.w	fp, #0
 8010dea:	4606      	mov	r6, r0
 8010dec:	f300 8093 	bgt.w	8010f16 <_dtoa_r+0x9ae>
 8010df0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8010df2:	2b02      	cmp	r3, #2
 8010df4:	dc57      	bgt.n	8010ea6 <_dtoa_r+0x93e>
 8010df6:	e08e      	b.n	8010f16 <_dtoa_r+0x9ae>
 8010df8:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8010dfa:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8010dfe:	e756      	b.n	8010cae <_dtoa_r+0x746>
 8010e00:	9b02      	ldr	r3, [sp, #8]
 8010e02:	1e5c      	subs	r4, r3, #1
 8010e04:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010e06:	42a3      	cmp	r3, r4
 8010e08:	bfb7      	itett	lt
 8010e0a:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8010e0c:	1b1c      	subge	r4, r3, r4
 8010e0e:	1ae2      	sublt	r2, r4, r3
 8010e10:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8010e12:	bfbe      	ittt	lt
 8010e14:	940a      	strlt	r4, [sp, #40]	; 0x28
 8010e16:	189b      	addlt	r3, r3, r2
 8010e18:	930e      	strlt	r3, [sp, #56]	; 0x38
 8010e1a:	9b02      	ldr	r3, [sp, #8]
 8010e1c:	bfb8      	it	lt
 8010e1e:	2400      	movlt	r4, #0
 8010e20:	2b00      	cmp	r3, #0
 8010e22:	bfbb      	ittet	lt
 8010e24:	9b06      	ldrlt	r3, [sp, #24]
 8010e26:	9a02      	ldrlt	r2, [sp, #8]
 8010e28:	9f06      	ldrge	r7, [sp, #24]
 8010e2a:	1a9f      	sublt	r7, r3, r2
 8010e2c:	bfac      	ite	ge
 8010e2e:	9b02      	ldrge	r3, [sp, #8]
 8010e30:	2300      	movlt	r3, #0
 8010e32:	e73e      	b.n	8010cb2 <_dtoa_r+0x74a>
 8010e34:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8010e36:	9f06      	ldr	r7, [sp, #24]
 8010e38:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8010e3a:	e745      	b.n	8010cc8 <_dtoa_r+0x760>
 8010e3c:	3fe00000 	.word	0x3fe00000
 8010e40:	40240000 	.word	0x40240000
 8010e44:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010e46:	e76a      	b.n	8010d1e <_dtoa_r+0x7b6>
 8010e48:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8010e4a:	2b01      	cmp	r3, #1
 8010e4c:	dc19      	bgt.n	8010e82 <_dtoa_r+0x91a>
 8010e4e:	9b04      	ldr	r3, [sp, #16]
 8010e50:	b9bb      	cbnz	r3, 8010e82 <_dtoa_r+0x91a>
 8010e52:	9b05      	ldr	r3, [sp, #20]
 8010e54:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8010e58:	b99b      	cbnz	r3, 8010e82 <_dtoa_r+0x91a>
 8010e5a:	9b05      	ldr	r3, [sp, #20]
 8010e5c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8010e60:	0d1b      	lsrs	r3, r3, #20
 8010e62:	051b      	lsls	r3, r3, #20
 8010e64:	b183      	cbz	r3, 8010e88 <_dtoa_r+0x920>
 8010e66:	f04f 0801 	mov.w	r8, #1
 8010e6a:	9b06      	ldr	r3, [sp, #24]
 8010e6c:	3301      	adds	r3, #1
 8010e6e:	9306      	str	r3, [sp, #24]
 8010e70:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010e72:	3301      	adds	r3, #1
 8010e74:	9309      	str	r3, [sp, #36]	; 0x24
 8010e76:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010e78:	2b00      	cmp	r3, #0
 8010e7a:	f47f af6a 	bne.w	8010d52 <_dtoa_r+0x7ea>
 8010e7e:	2001      	movs	r0, #1
 8010e80:	e76f      	b.n	8010d62 <_dtoa_r+0x7fa>
 8010e82:	f04f 0800 	mov.w	r8, #0
 8010e86:	e7f6      	b.n	8010e76 <_dtoa_r+0x90e>
 8010e88:	4698      	mov	r8, r3
 8010e8a:	e7f4      	b.n	8010e76 <_dtoa_r+0x90e>
 8010e8c:	f43f af7d 	beq.w	8010d8a <_dtoa_r+0x822>
 8010e90:	4618      	mov	r0, r3
 8010e92:	301c      	adds	r0, #28
 8010e94:	e772      	b.n	8010d7c <_dtoa_r+0x814>
 8010e96:	9b02      	ldr	r3, [sp, #8]
 8010e98:	2b00      	cmp	r3, #0
 8010e9a:	dc36      	bgt.n	8010f0a <_dtoa_r+0x9a2>
 8010e9c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8010e9e:	2b02      	cmp	r3, #2
 8010ea0:	dd33      	ble.n	8010f0a <_dtoa_r+0x9a2>
 8010ea2:	f8dd b008 	ldr.w	fp, [sp, #8]
 8010ea6:	f1bb 0f00 	cmp.w	fp, #0
 8010eaa:	d10d      	bne.n	8010ec8 <_dtoa_r+0x960>
 8010eac:	4621      	mov	r1, r4
 8010eae:	465b      	mov	r3, fp
 8010eb0:	2205      	movs	r2, #5
 8010eb2:	4628      	mov	r0, r5
 8010eb4:	f000 f9d4 	bl	8011260 <__multadd>
 8010eb8:	4601      	mov	r1, r0
 8010eba:	4604      	mov	r4, r0
 8010ebc:	4650      	mov	r0, sl
 8010ebe:	f000 fbe7 	bl	8011690 <__mcmp>
 8010ec2:	2800      	cmp	r0, #0
 8010ec4:	f73f adb6 	bgt.w	8010a34 <_dtoa_r+0x4cc>
 8010ec8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8010eca:	9f08      	ldr	r7, [sp, #32]
 8010ecc:	ea6f 0903 	mvn.w	r9, r3
 8010ed0:	f04f 0800 	mov.w	r8, #0
 8010ed4:	4621      	mov	r1, r4
 8010ed6:	4628      	mov	r0, r5
 8010ed8:	f000 f9a0 	bl	801121c <_Bfree>
 8010edc:	2e00      	cmp	r6, #0
 8010ede:	f43f aea4 	beq.w	8010c2a <_dtoa_r+0x6c2>
 8010ee2:	f1b8 0f00 	cmp.w	r8, #0
 8010ee6:	d005      	beq.n	8010ef4 <_dtoa_r+0x98c>
 8010ee8:	45b0      	cmp	r8, r6
 8010eea:	d003      	beq.n	8010ef4 <_dtoa_r+0x98c>
 8010eec:	4641      	mov	r1, r8
 8010eee:	4628      	mov	r0, r5
 8010ef0:	f000 f994 	bl	801121c <_Bfree>
 8010ef4:	4631      	mov	r1, r6
 8010ef6:	4628      	mov	r0, r5
 8010ef8:	f000 f990 	bl	801121c <_Bfree>
 8010efc:	e695      	b.n	8010c2a <_dtoa_r+0x6c2>
 8010efe:	2400      	movs	r4, #0
 8010f00:	4626      	mov	r6, r4
 8010f02:	e7e1      	b.n	8010ec8 <_dtoa_r+0x960>
 8010f04:	46c1      	mov	r9, r8
 8010f06:	4626      	mov	r6, r4
 8010f08:	e594      	b.n	8010a34 <_dtoa_r+0x4cc>
 8010f0a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010f0c:	f8dd b008 	ldr.w	fp, [sp, #8]
 8010f10:	2b00      	cmp	r3, #0
 8010f12:	f000 80fc 	beq.w	801110e <_dtoa_r+0xba6>
 8010f16:	2f00      	cmp	r7, #0
 8010f18:	dd05      	ble.n	8010f26 <_dtoa_r+0x9be>
 8010f1a:	4631      	mov	r1, r6
 8010f1c:	463a      	mov	r2, r7
 8010f1e:	4628      	mov	r0, r5
 8010f20:	f000 fb4a 	bl	80115b8 <__lshift>
 8010f24:	4606      	mov	r6, r0
 8010f26:	f1b8 0f00 	cmp.w	r8, #0
 8010f2a:	d05c      	beq.n	8010fe6 <_dtoa_r+0xa7e>
 8010f2c:	4628      	mov	r0, r5
 8010f2e:	6871      	ldr	r1, [r6, #4]
 8010f30:	f000 f934 	bl	801119c <_Balloc>
 8010f34:	4607      	mov	r7, r0
 8010f36:	b928      	cbnz	r0, 8010f44 <_dtoa_r+0x9dc>
 8010f38:	4602      	mov	r2, r0
 8010f3a:	f240 21ea 	movw	r1, #746	; 0x2ea
 8010f3e:	4b7e      	ldr	r3, [pc, #504]	; (8011138 <_dtoa_r+0xbd0>)
 8010f40:	f7ff bb26 	b.w	8010590 <_dtoa_r+0x28>
 8010f44:	6932      	ldr	r2, [r6, #16]
 8010f46:	f106 010c 	add.w	r1, r6, #12
 8010f4a:	3202      	adds	r2, #2
 8010f4c:	0092      	lsls	r2, r2, #2
 8010f4e:	300c      	adds	r0, #12
 8010f50:	f000 f90a 	bl	8011168 <memcpy>
 8010f54:	2201      	movs	r2, #1
 8010f56:	4639      	mov	r1, r7
 8010f58:	4628      	mov	r0, r5
 8010f5a:	f000 fb2d 	bl	80115b8 <__lshift>
 8010f5e:	46b0      	mov	r8, r6
 8010f60:	4606      	mov	r6, r0
 8010f62:	9b08      	ldr	r3, [sp, #32]
 8010f64:	3301      	adds	r3, #1
 8010f66:	9302      	str	r3, [sp, #8]
 8010f68:	9b08      	ldr	r3, [sp, #32]
 8010f6a:	445b      	add	r3, fp
 8010f6c:	930a      	str	r3, [sp, #40]	; 0x28
 8010f6e:	9b04      	ldr	r3, [sp, #16]
 8010f70:	f003 0301 	and.w	r3, r3, #1
 8010f74:	9309      	str	r3, [sp, #36]	; 0x24
 8010f76:	9b02      	ldr	r3, [sp, #8]
 8010f78:	4621      	mov	r1, r4
 8010f7a:	4650      	mov	r0, sl
 8010f7c:	f103 3bff 	add.w	fp, r3, #4294967295
 8010f80:	f7ff fa64 	bl	801044c <quorem>
 8010f84:	4603      	mov	r3, r0
 8010f86:	4641      	mov	r1, r8
 8010f88:	3330      	adds	r3, #48	; 0x30
 8010f8a:	9004      	str	r0, [sp, #16]
 8010f8c:	4650      	mov	r0, sl
 8010f8e:	930b      	str	r3, [sp, #44]	; 0x2c
 8010f90:	f000 fb7e 	bl	8011690 <__mcmp>
 8010f94:	4632      	mov	r2, r6
 8010f96:	9006      	str	r0, [sp, #24]
 8010f98:	4621      	mov	r1, r4
 8010f9a:	4628      	mov	r0, r5
 8010f9c:	f000 fb94 	bl	80116c8 <__mdiff>
 8010fa0:	68c2      	ldr	r2, [r0, #12]
 8010fa2:	4607      	mov	r7, r0
 8010fa4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010fa6:	bb02      	cbnz	r2, 8010fea <_dtoa_r+0xa82>
 8010fa8:	4601      	mov	r1, r0
 8010faa:	4650      	mov	r0, sl
 8010fac:	f000 fb70 	bl	8011690 <__mcmp>
 8010fb0:	4602      	mov	r2, r0
 8010fb2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010fb4:	4639      	mov	r1, r7
 8010fb6:	4628      	mov	r0, r5
 8010fb8:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8010fbc:	f000 f92e 	bl	801121c <_Bfree>
 8010fc0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8010fc2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8010fc4:	9f02      	ldr	r7, [sp, #8]
 8010fc6:	ea43 0102 	orr.w	r1, r3, r2
 8010fca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010fcc:	430b      	orrs	r3, r1
 8010fce:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010fd0:	d10d      	bne.n	8010fee <_dtoa_r+0xa86>
 8010fd2:	2b39      	cmp	r3, #57	; 0x39
 8010fd4:	d027      	beq.n	8011026 <_dtoa_r+0xabe>
 8010fd6:	9a06      	ldr	r2, [sp, #24]
 8010fd8:	2a00      	cmp	r2, #0
 8010fda:	dd01      	ble.n	8010fe0 <_dtoa_r+0xa78>
 8010fdc:	9b04      	ldr	r3, [sp, #16]
 8010fde:	3331      	adds	r3, #49	; 0x31
 8010fe0:	f88b 3000 	strb.w	r3, [fp]
 8010fe4:	e776      	b.n	8010ed4 <_dtoa_r+0x96c>
 8010fe6:	4630      	mov	r0, r6
 8010fe8:	e7b9      	b.n	8010f5e <_dtoa_r+0x9f6>
 8010fea:	2201      	movs	r2, #1
 8010fec:	e7e2      	b.n	8010fb4 <_dtoa_r+0xa4c>
 8010fee:	9906      	ldr	r1, [sp, #24]
 8010ff0:	2900      	cmp	r1, #0
 8010ff2:	db04      	blt.n	8010ffe <_dtoa_r+0xa96>
 8010ff4:	9822      	ldr	r0, [sp, #136]	; 0x88
 8010ff6:	4301      	orrs	r1, r0
 8010ff8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010ffa:	4301      	orrs	r1, r0
 8010ffc:	d120      	bne.n	8011040 <_dtoa_r+0xad8>
 8010ffe:	2a00      	cmp	r2, #0
 8011000:	ddee      	ble.n	8010fe0 <_dtoa_r+0xa78>
 8011002:	4651      	mov	r1, sl
 8011004:	2201      	movs	r2, #1
 8011006:	4628      	mov	r0, r5
 8011008:	9302      	str	r3, [sp, #8]
 801100a:	f000 fad5 	bl	80115b8 <__lshift>
 801100e:	4621      	mov	r1, r4
 8011010:	4682      	mov	sl, r0
 8011012:	f000 fb3d 	bl	8011690 <__mcmp>
 8011016:	2800      	cmp	r0, #0
 8011018:	9b02      	ldr	r3, [sp, #8]
 801101a:	dc02      	bgt.n	8011022 <_dtoa_r+0xaba>
 801101c:	d1e0      	bne.n	8010fe0 <_dtoa_r+0xa78>
 801101e:	07da      	lsls	r2, r3, #31
 8011020:	d5de      	bpl.n	8010fe0 <_dtoa_r+0xa78>
 8011022:	2b39      	cmp	r3, #57	; 0x39
 8011024:	d1da      	bne.n	8010fdc <_dtoa_r+0xa74>
 8011026:	2339      	movs	r3, #57	; 0x39
 8011028:	f88b 3000 	strb.w	r3, [fp]
 801102c:	463b      	mov	r3, r7
 801102e:	461f      	mov	r7, r3
 8011030:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8011034:	3b01      	subs	r3, #1
 8011036:	2a39      	cmp	r2, #57	; 0x39
 8011038:	d050      	beq.n	80110dc <_dtoa_r+0xb74>
 801103a:	3201      	adds	r2, #1
 801103c:	701a      	strb	r2, [r3, #0]
 801103e:	e749      	b.n	8010ed4 <_dtoa_r+0x96c>
 8011040:	2a00      	cmp	r2, #0
 8011042:	dd03      	ble.n	801104c <_dtoa_r+0xae4>
 8011044:	2b39      	cmp	r3, #57	; 0x39
 8011046:	d0ee      	beq.n	8011026 <_dtoa_r+0xabe>
 8011048:	3301      	adds	r3, #1
 801104a:	e7c9      	b.n	8010fe0 <_dtoa_r+0xa78>
 801104c:	9a02      	ldr	r2, [sp, #8]
 801104e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8011050:	f802 3c01 	strb.w	r3, [r2, #-1]
 8011054:	428a      	cmp	r2, r1
 8011056:	d02a      	beq.n	80110ae <_dtoa_r+0xb46>
 8011058:	4651      	mov	r1, sl
 801105a:	2300      	movs	r3, #0
 801105c:	220a      	movs	r2, #10
 801105e:	4628      	mov	r0, r5
 8011060:	f000 f8fe 	bl	8011260 <__multadd>
 8011064:	45b0      	cmp	r8, r6
 8011066:	4682      	mov	sl, r0
 8011068:	f04f 0300 	mov.w	r3, #0
 801106c:	f04f 020a 	mov.w	r2, #10
 8011070:	4641      	mov	r1, r8
 8011072:	4628      	mov	r0, r5
 8011074:	d107      	bne.n	8011086 <_dtoa_r+0xb1e>
 8011076:	f000 f8f3 	bl	8011260 <__multadd>
 801107a:	4680      	mov	r8, r0
 801107c:	4606      	mov	r6, r0
 801107e:	9b02      	ldr	r3, [sp, #8]
 8011080:	3301      	adds	r3, #1
 8011082:	9302      	str	r3, [sp, #8]
 8011084:	e777      	b.n	8010f76 <_dtoa_r+0xa0e>
 8011086:	f000 f8eb 	bl	8011260 <__multadd>
 801108a:	4631      	mov	r1, r6
 801108c:	4680      	mov	r8, r0
 801108e:	2300      	movs	r3, #0
 8011090:	220a      	movs	r2, #10
 8011092:	4628      	mov	r0, r5
 8011094:	f000 f8e4 	bl	8011260 <__multadd>
 8011098:	4606      	mov	r6, r0
 801109a:	e7f0      	b.n	801107e <_dtoa_r+0xb16>
 801109c:	f1bb 0f00 	cmp.w	fp, #0
 80110a0:	bfcc      	ite	gt
 80110a2:	465f      	movgt	r7, fp
 80110a4:	2701      	movle	r7, #1
 80110a6:	f04f 0800 	mov.w	r8, #0
 80110aa:	9a08      	ldr	r2, [sp, #32]
 80110ac:	4417      	add	r7, r2
 80110ae:	4651      	mov	r1, sl
 80110b0:	2201      	movs	r2, #1
 80110b2:	4628      	mov	r0, r5
 80110b4:	9302      	str	r3, [sp, #8]
 80110b6:	f000 fa7f 	bl	80115b8 <__lshift>
 80110ba:	4621      	mov	r1, r4
 80110bc:	4682      	mov	sl, r0
 80110be:	f000 fae7 	bl	8011690 <__mcmp>
 80110c2:	2800      	cmp	r0, #0
 80110c4:	dcb2      	bgt.n	801102c <_dtoa_r+0xac4>
 80110c6:	d102      	bne.n	80110ce <_dtoa_r+0xb66>
 80110c8:	9b02      	ldr	r3, [sp, #8]
 80110ca:	07db      	lsls	r3, r3, #31
 80110cc:	d4ae      	bmi.n	801102c <_dtoa_r+0xac4>
 80110ce:	463b      	mov	r3, r7
 80110d0:	461f      	mov	r7, r3
 80110d2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80110d6:	2a30      	cmp	r2, #48	; 0x30
 80110d8:	d0fa      	beq.n	80110d0 <_dtoa_r+0xb68>
 80110da:	e6fb      	b.n	8010ed4 <_dtoa_r+0x96c>
 80110dc:	9a08      	ldr	r2, [sp, #32]
 80110de:	429a      	cmp	r2, r3
 80110e0:	d1a5      	bne.n	801102e <_dtoa_r+0xac6>
 80110e2:	2331      	movs	r3, #49	; 0x31
 80110e4:	f109 0901 	add.w	r9, r9, #1
 80110e8:	7013      	strb	r3, [r2, #0]
 80110ea:	e6f3      	b.n	8010ed4 <_dtoa_r+0x96c>
 80110ec:	4b13      	ldr	r3, [pc, #76]	; (801113c <_dtoa_r+0xbd4>)
 80110ee:	f7ff baa7 	b.w	8010640 <_dtoa_r+0xd8>
 80110f2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80110f4:	2b00      	cmp	r3, #0
 80110f6:	f47f aa80 	bne.w	80105fa <_dtoa_r+0x92>
 80110fa:	4b11      	ldr	r3, [pc, #68]	; (8011140 <_dtoa_r+0xbd8>)
 80110fc:	f7ff baa0 	b.w	8010640 <_dtoa_r+0xd8>
 8011100:	f1bb 0f00 	cmp.w	fp, #0
 8011104:	dc03      	bgt.n	801110e <_dtoa_r+0xba6>
 8011106:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8011108:	2b02      	cmp	r3, #2
 801110a:	f73f aecc 	bgt.w	8010ea6 <_dtoa_r+0x93e>
 801110e:	9f08      	ldr	r7, [sp, #32]
 8011110:	4621      	mov	r1, r4
 8011112:	4650      	mov	r0, sl
 8011114:	f7ff f99a 	bl	801044c <quorem>
 8011118:	9a08      	ldr	r2, [sp, #32]
 801111a:	f100 0330 	add.w	r3, r0, #48	; 0x30
 801111e:	f807 3b01 	strb.w	r3, [r7], #1
 8011122:	1aba      	subs	r2, r7, r2
 8011124:	4593      	cmp	fp, r2
 8011126:	ddb9      	ble.n	801109c <_dtoa_r+0xb34>
 8011128:	4651      	mov	r1, sl
 801112a:	2300      	movs	r3, #0
 801112c:	220a      	movs	r2, #10
 801112e:	4628      	mov	r0, r5
 8011130:	f000 f896 	bl	8011260 <__multadd>
 8011134:	4682      	mov	sl, r0
 8011136:	e7eb      	b.n	8011110 <_dtoa_r+0xba8>
 8011138:	080136b3 	.word	0x080136b3
 801113c:	0801360c 	.word	0x0801360c
 8011140:	08013630 	.word	0x08013630

08011144 <_localeconv_r>:
 8011144:	4800      	ldr	r0, [pc, #0]	; (8011148 <_localeconv_r+0x4>)
 8011146:	4770      	bx	lr
 8011148:	200002fc 	.word	0x200002fc

0801114c <memchr>:
 801114c:	4603      	mov	r3, r0
 801114e:	b510      	push	{r4, lr}
 8011150:	b2c9      	uxtb	r1, r1
 8011152:	4402      	add	r2, r0
 8011154:	4293      	cmp	r3, r2
 8011156:	4618      	mov	r0, r3
 8011158:	d101      	bne.n	801115e <memchr+0x12>
 801115a:	2000      	movs	r0, #0
 801115c:	e003      	b.n	8011166 <memchr+0x1a>
 801115e:	7804      	ldrb	r4, [r0, #0]
 8011160:	3301      	adds	r3, #1
 8011162:	428c      	cmp	r4, r1
 8011164:	d1f6      	bne.n	8011154 <memchr+0x8>
 8011166:	bd10      	pop	{r4, pc}

08011168 <memcpy>:
 8011168:	440a      	add	r2, r1
 801116a:	4291      	cmp	r1, r2
 801116c:	f100 33ff 	add.w	r3, r0, #4294967295
 8011170:	d100      	bne.n	8011174 <memcpy+0xc>
 8011172:	4770      	bx	lr
 8011174:	b510      	push	{r4, lr}
 8011176:	f811 4b01 	ldrb.w	r4, [r1], #1
 801117a:	4291      	cmp	r1, r2
 801117c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8011180:	d1f9      	bne.n	8011176 <memcpy+0xe>
 8011182:	bd10      	pop	{r4, pc}

08011184 <__malloc_lock>:
 8011184:	4801      	ldr	r0, [pc, #4]	; (801118c <__malloc_lock+0x8>)
 8011186:	f000 bd4c 	b.w	8011c22 <__retarget_lock_acquire_recursive>
 801118a:	bf00      	nop
 801118c:	20002298 	.word	0x20002298

08011190 <__malloc_unlock>:
 8011190:	4801      	ldr	r0, [pc, #4]	; (8011198 <__malloc_unlock+0x8>)
 8011192:	f000 bd47 	b.w	8011c24 <__retarget_lock_release_recursive>
 8011196:	bf00      	nop
 8011198:	20002298 	.word	0x20002298

0801119c <_Balloc>:
 801119c:	b570      	push	{r4, r5, r6, lr}
 801119e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80111a0:	4604      	mov	r4, r0
 80111a2:	460d      	mov	r5, r1
 80111a4:	b976      	cbnz	r6, 80111c4 <_Balloc+0x28>
 80111a6:	2010      	movs	r0, #16
 80111a8:	f7fe fbec 	bl	800f984 <malloc>
 80111ac:	4602      	mov	r2, r0
 80111ae:	6260      	str	r0, [r4, #36]	; 0x24
 80111b0:	b920      	cbnz	r0, 80111bc <_Balloc+0x20>
 80111b2:	2166      	movs	r1, #102	; 0x66
 80111b4:	4b17      	ldr	r3, [pc, #92]	; (8011214 <_Balloc+0x78>)
 80111b6:	4818      	ldr	r0, [pc, #96]	; (8011218 <_Balloc+0x7c>)
 80111b8:	f000 fd02 	bl	8011bc0 <__assert_func>
 80111bc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80111c0:	6006      	str	r6, [r0, #0]
 80111c2:	60c6      	str	r6, [r0, #12]
 80111c4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80111c6:	68f3      	ldr	r3, [r6, #12]
 80111c8:	b183      	cbz	r3, 80111ec <_Balloc+0x50>
 80111ca:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80111cc:	68db      	ldr	r3, [r3, #12]
 80111ce:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80111d2:	b9b8      	cbnz	r0, 8011204 <_Balloc+0x68>
 80111d4:	2101      	movs	r1, #1
 80111d6:	fa01 f605 	lsl.w	r6, r1, r5
 80111da:	1d72      	adds	r2, r6, #5
 80111dc:	4620      	mov	r0, r4
 80111de:	0092      	lsls	r2, r2, #2
 80111e0:	f000 fb5e 	bl	80118a0 <_calloc_r>
 80111e4:	b160      	cbz	r0, 8011200 <_Balloc+0x64>
 80111e6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80111ea:	e00e      	b.n	801120a <_Balloc+0x6e>
 80111ec:	2221      	movs	r2, #33	; 0x21
 80111ee:	2104      	movs	r1, #4
 80111f0:	4620      	mov	r0, r4
 80111f2:	f000 fb55 	bl	80118a0 <_calloc_r>
 80111f6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80111f8:	60f0      	str	r0, [r6, #12]
 80111fa:	68db      	ldr	r3, [r3, #12]
 80111fc:	2b00      	cmp	r3, #0
 80111fe:	d1e4      	bne.n	80111ca <_Balloc+0x2e>
 8011200:	2000      	movs	r0, #0
 8011202:	bd70      	pop	{r4, r5, r6, pc}
 8011204:	6802      	ldr	r2, [r0, #0]
 8011206:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801120a:	2300      	movs	r3, #0
 801120c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8011210:	e7f7      	b.n	8011202 <_Balloc+0x66>
 8011212:	bf00      	nop
 8011214:	0801363d 	.word	0x0801363d
 8011218:	080136c4 	.word	0x080136c4

0801121c <_Bfree>:
 801121c:	b570      	push	{r4, r5, r6, lr}
 801121e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8011220:	4605      	mov	r5, r0
 8011222:	460c      	mov	r4, r1
 8011224:	b976      	cbnz	r6, 8011244 <_Bfree+0x28>
 8011226:	2010      	movs	r0, #16
 8011228:	f7fe fbac 	bl	800f984 <malloc>
 801122c:	4602      	mov	r2, r0
 801122e:	6268      	str	r0, [r5, #36]	; 0x24
 8011230:	b920      	cbnz	r0, 801123c <_Bfree+0x20>
 8011232:	218a      	movs	r1, #138	; 0x8a
 8011234:	4b08      	ldr	r3, [pc, #32]	; (8011258 <_Bfree+0x3c>)
 8011236:	4809      	ldr	r0, [pc, #36]	; (801125c <_Bfree+0x40>)
 8011238:	f000 fcc2 	bl	8011bc0 <__assert_func>
 801123c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8011240:	6006      	str	r6, [r0, #0]
 8011242:	60c6      	str	r6, [r0, #12]
 8011244:	b13c      	cbz	r4, 8011256 <_Bfree+0x3a>
 8011246:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8011248:	6862      	ldr	r2, [r4, #4]
 801124a:	68db      	ldr	r3, [r3, #12]
 801124c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8011250:	6021      	str	r1, [r4, #0]
 8011252:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8011256:	bd70      	pop	{r4, r5, r6, pc}
 8011258:	0801363d 	.word	0x0801363d
 801125c:	080136c4 	.word	0x080136c4

08011260 <__multadd>:
 8011260:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011264:	4698      	mov	r8, r3
 8011266:	460c      	mov	r4, r1
 8011268:	2300      	movs	r3, #0
 801126a:	690e      	ldr	r6, [r1, #16]
 801126c:	4607      	mov	r7, r0
 801126e:	f101 0014 	add.w	r0, r1, #20
 8011272:	6805      	ldr	r5, [r0, #0]
 8011274:	3301      	adds	r3, #1
 8011276:	b2a9      	uxth	r1, r5
 8011278:	fb02 8101 	mla	r1, r2, r1, r8
 801127c:	0c2d      	lsrs	r5, r5, #16
 801127e:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8011282:	fb02 c505 	mla	r5, r2, r5, ip
 8011286:	b289      	uxth	r1, r1
 8011288:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 801128c:	429e      	cmp	r6, r3
 801128e:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8011292:	f840 1b04 	str.w	r1, [r0], #4
 8011296:	dcec      	bgt.n	8011272 <__multadd+0x12>
 8011298:	f1b8 0f00 	cmp.w	r8, #0
 801129c:	d022      	beq.n	80112e4 <__multadd+0x84>
 801129e:	68a3      	ldr	r3, [r4, #8]
 80112a0:	42b3      	cmp	r3, r6
 80112a2:	dc19      	bgt.n	80112d8 <__multadd+0x78>
 80112a4:	6861      	ldr	r1, [r4, #4]
 80112a6:	4638      	mov	r0, r7
 80112a8:	3101      	adds	r1, #1
 80112aa:	f7ff ff77 	bl	801119c <_Balloc>
 80112ae:	4605      	mov	r5, r0
 80112b0:	b928      	cbnz	r0, 80112be <__multadd+0x5e>
 80112b2:	4602      	mov	r2, r0
 80112b4:	21b5      	movs	r1, #181	; 0xb5
 80112b6:	4b0d      	ldr	r3, [pc, #52]	; (80112ec <__multadd+0x8c>)
 80112b8:	480d      	ldr	r0, [pc, #52]	; (80112f0 <__multadd+0x90>)
 80112ba:	f000 fc81 	bl	8011bc0 <__assert_func>
 80112be:	6922      	ldr	r2, [r4, #16]
 80112c0:	f104 010c 	add.w	r1, r4, #12
 80112c4:	3202      	adds	r2, #2
 80112c6:	0092      	lsls	r2, r2, #2
 80112c8:	300c      	adds	r0, #12
 80112ca:	f7ff ff4d 	bl	8011168 <memcpy>
 80112ce:	4621      	mov	r1, r4
 80112d0:	4638      	mov	r0, r7
 80112d2:	f7ff ffa3 	bl	801121c <_Bfree>
 80112d6:	462c      	mov	r4, r5
 80112d8:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 80112dc:	3601      	adds	r6, #1
 80112de:	f8c3 8014 	str.w	r8, [r3, #20]
 80112e2:	6126      	str	r6, [r4, #16]
 80112e4:	4620      	mov	r0, r4
 80112e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80112ea:	bf00      	nop
 80112ec:	080136b3 	.word	0x080136b3
 80112f0:	080136c4 	.word	0x080136c4

080112f4 <__hi0bits>:
 80112f4:	0c02      	lsrs	r2, r0, #16
 80112f6:	0412      	lsls	r2, r2, #16
 80112f8:	4603      	mov	r3, r0
 80112fa:	b9ca      	cbnz	r2, 8011330 <__hi0bits+0x3c>
 80112fc:	0403      	lsls	r3, r0, #16
 80112fe:	2010      	movs	r0, #16
 8011300:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8011304:	bf04      	itt	eq
 8011306:	021b      	lsleq	r3, r3, #8
 8011308:	3008      	addeq	r0, #8
 801130a:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 801130e:	bf04      	itt	eq
 8011310:	011b      	lsleq	r3, r3, #4
 8011312:	3004      	addeq	r0, #4
 8011314:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8011318:	bf04      	itt	eq
 801131a:	009b      	lsleq	r3, r3, #2
 801131c:	3002      	addeq	r0, #2
 801131e:	2b00      	cmp	r3, #0
 8011320:	db05      	blt.n	801132e <__hi0bits+0x3a>
 8011322:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8011326:	f100 0001 	add.w	r0, r0, #1
 801132a:	bf08      	it	eq
 801132c:	2020      	moveq	r0, #32
 801132e:	4770      	bx	lr
 8011330:	2000      	movs	r0, #0
 8011332:	e7e5      	b.n	8011300 <__hi0bits+0xc>

08011334 <__lo0bits>:
 8011334:	6803      	ldr	r3, [r0, #0]
 8011336:	4602      	mov	r2, r0
 8011338:	f013 0007 	ands.w	r0, r3, #7
 801133c:	d00b      	beq.n	8011356 <__lo0bits+0x22>
 801133e:	07d9      	lsls	r1, r3, #31
 8011340:	d422      	bmi.n	8011388 <__lo0bits+0x54>
 8011342:	0798      	lsls	r0, r3, #30
 8011344:	bf49      	itett	mi
 8011346:	085b      	lsrmi	r3, r3, #1
 8011348:	089b      	lsrpl	r3, r3, #2
 801134a:	2001      	movmi	r0, #1
 801134c:	6013      	strmi	r3, [r2, #0]
 801134e:	bf5c      	itt	pl
 8011350:	2002      	movpl	r0, #2
 8011352:	6013      	strpl	r3, [r2, #0]
 8011354:	4770      	bx	lr
 8011356:	b299      	uxth	r1, r3
 8011358:	b909      	cbnz	r1, 801135e <__lo0bits+0x2a>
 801135a:	2010      	movs	r0, #16
 801135c:	0c1b      	lsrs	r3, r3, #16
 801135e:	f013 0fff 	tst.w	r3, #255	; 0xff
 8011362:	bf04      	itt	eq
 8011364:	0a1b      	lsreq	r3, r3, #8
 8011366:	3008      	addeq	r0, #8
 8011368:	0719      	lsls	r1, r3, #28
 801136a:	bf04      	itt	eq
 801136c:	091b      	lsreq	r3, r3, #4
 801136e:	3004      	addeq	r0, #4
 8011370:	0799      	lsls	r1, r3, #30
 8011372:	bf04      	itt	eq
 8011374:	089b      	lsreq	r3, r3, #2
 8011376:	3002      	addeq	r0, #2
 8011378:	07d9      	lsls	r1, r3, #31
 801137a:	d403      	bmi.n	8011384 <__lo0bits+0x50>
 801137c:	085b      	lsrs	r3, r3, #1
 801137e:	f100 0001 	add.w	r0, r0, #1
 8011382:	d003      	beq.n	801138c <__lo0bits+0x58>
 8011384:	6013      	str	r3, [r2, #0]
 8011386:	4770      	bx	lr
 8011388:	2000      	movs	r0, #0
 801138a:	4770      	bx	lr
 801138c:	2020      	movs	r0, #32
 801138e:	4770      	bx	lr

08011390 <__i2b>:
 8011390:	b510      	push	{r4, lr}
 8011392:	460c      	mov	r4, r1
 8011394:	2101      	movs	r1, #1
 8011396:	f7ff ff01 	bl	801119c <_Balloc>
 801139a:	4602      	mov	r2, r0
 801139c:	b928      	cbnz	r0, 80113aa <__i2b+0x1a>
 801139e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80113a2:	4b04      	ldr	r3, [pc, #16]	; (80113b4 <__i2b+0x24>)
 80113a4:	4804      	ldr	r0, [pc, #16]	; (80113b8 <__i2b+0x28>)
 80113a6:	f000 fc0b 	bl	8011bc0 <__assert_func>
 80113aa:	2301      	movs	r3, #1
 80113ac:	6144      	str	r4, [r0, #20]
 80113ae:	6103      	str	r3, [r0, #16]
 80113b0:	bd10      	pop	{r4, pc}
 80113b2:	bf00      	nop
 80113b4:	080136b3 	.word	0x080136b3
 80113b8:	080136c4 	.word	0x080136c4

080113bc <__multiply>:
 80113bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80113c0:	4614      	mov	r4, r2
 80113c2:	690a      	ldr	r2, [r1, #16]
 80113c4:	6923      	ldr	r3, [r4, #16]
 80113c6:	460d      	mov	r5, r1
 80113c8:	429a      	cmp	r2, r3
 80113ca:	bfbe      	ittt	lt
 80113cc:	460b      	movlt	r3, r1
 80113ce:	4625      	movlt	r5, r4
 80113d0:	461c      	movlt	r4, r3
 80113d2:	f8d5 a010 	ldr.w	sl, [r5, #16]
 80113d6:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80113da:	68ab      	ldr	r3, [r5, #8]
 80113dc:	6869      	ldr	r1, [r5, #4]
 80113de:	eb0a 0709 	add.w	r7, sl, r9
 80113e2:	42bb      	cmp	r3, r7
 80113e4:	b085      	sub	sp, #20
 80113e6:	bfb8      	it	lt
 80113e8:	3101      	addlt	r1, #1
 80113ea:	f7ff fed7 	bl	801119c <_Balloc>
 80113ee:	b930      	cbnz	r0, 80113fe <__multiply+0x42>
 80113f0:	4602      	mov	r2, r0
 80113f2:	f240 115d 	movw	r1, #349	; 0x15d
 80113f6:	4b41      	ldr	r3, [pc, #260]	; (80114fc <__multiply+0x140>)
 80113f8:	4841      	ldr	r0, [pc, #260]	; (8011500 <__multiply+0x144>)
 80113fa:	f000 fbe1 	bl	8011bc0 <__assert_func>
 80113fe:	f100 0614 	add.w	r6, r0, #20
 8011402:	4633      	mov	r3, r6
 8011404:	2200      	movs	r2, #0
 8011406:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 801140a:	4543      	cmp	r3, r8
 801140c:	d31e      	bcc.n	801144c <__multiply+0x90>
 801140e:	f105 0c14 	add.w	ip, r5, #20
 8011412:	f104 0314 	add.w	r3, r4, #20
 8011416:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 801141a:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 801141e:	9202      	str	r2, [sp, #8]
 8011420:	ebac 0205 	sub.w	r2, ip, r5
 8011424:	3a15      	subs	r2, #21
 8011426:	f022 0203 	bic.w	r2, r2, #3
 801142a:	3204      	adds	r2, #4
 801142c:	f105 0115 	add.w	r1, r5, #21
 8011430:	458c      	cmp	ip, r1
 8011432:	bf38      	it	cc
 8011434:	2204      	movcc	r2, #4
 8011436:	9201      	str	r2, [sp, #4]
 8011438:	9a02      	ldr	r2, [sp, #8]
 801143a:	9303      	str	r3, [sp, #12]
 801143c:	429a      	cmp	r2, r3
 801143e:	d808      	bhi.n	8011452 <__multiply+0x96>
 8011440:	2f00      	cmp	r7, #0
 8011442:	dc55      	bgt.n	80114f0 <__multiply+0x134>
 8011444:	6107      	str	r7, [r0, #16]
 8011446:	b005      	add	sp, #20
 8011448:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801144c:	f843 2b04 	str.w	r2, [r3], #4
 8011450:	e7db      	b.n	801140a <__multiply+0x4e>
 8011452:	f8b3 a000 	ldrh.w	sl, [r3]
 8011456:	f1ba 0f00 	cmp.w	sl, #0
 801145a:	d020      	beq.n	801149e <__multiply+0xe2>
 801145c:	46b1      	mov	r9, r6
 801145e:	2200      	movs	r2, #0
 8011460:	f105 0e14 	add.w	lr, r5, #20
 8011464:	f85e 4b04 	ldr.w	r4, [lr], #4
 8011468:	f8d9 b000 	ldr.w	fp, [r9]
 801146c:	b2a1      	uxth	r1, r4
 801146e:	fa1f fb8b 	uxth.w	fp, fp
 8011472:	fb0a b101 	mla	r1, sl, r1, fp
 8011476:	4411      	add	r1, r2
 8011478:	f8d9 2000 	ldr.w	r2, [r9]
 801147c:	0c24      	lsrs	r4, r4, #16
 801147e:	0c12      	lsrs	r2, r2, #16
 8011480:	fb0a 2404 	mla	r4, sl, r4, r2
 8011484:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8011488:	b289      	uxth	r1, r1
 801148a:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 801148e:	45f4      	cmp	ip, lr
 8011490:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8011494:	f849 1b04 	str.w	r1, [r9], #4
 8011498:	d8e4      	bhi.n	8011464 <__multiply+0xa8>
 801149a:	9901      	ldr	r1, [sp, #4]
 801149c:	5072      	str	r2, [r6, r1]
 801149e:	9a03      	ldr	r2, [sp, #12]
 80114a0:	3304      	adds	r3, #4
 80114a2:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80114a6:	f1b9 0f00 	cmp.w	r9, #0
 80114aa:	d01f      	beq.n	80114ec <__multiply+0x130>
 80114ac:	46b6      	mov	lr, r6
 80114ae:	f04f 0a00 	mov.w	sl, #0
 80114b2:	6834      	ldr	r4, [r6, #0]
 80114b4:	f105 0114 	add.w	r1, r5, #20
 80114b8:	880a      	ldrh	r2, [r1, #0]
 80114ba:	f8be b002 	ldrh.w	fp, [lr, #2]
 80114be:	b2a4      	uxth	r4, r4
 80114c0:	fb09 b202 	mla	r2, r9, r2, fp
 80114c4:	4492      	add	sl, r2
 80114c6:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80114ca:	f84e 4b04 	str.w	r4, [lr], #4
 80114ce:	f851 4b04 	ldr.w	r4, [r1], #4
 80114d2:	f8be 2000 	ldrh.w	r2, [lr]
 80114d6:	0c24      	lsrs	r4, r4, #16
 80114d8:	fb09 2404 	mla	r4, r9, r4, r2
 80114dc:	458c      	cmp	ip, r1
 80114de:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 80114e2:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80114e6:	d8e7      	bhi.n	80114b8 <__multiply+0xfc>
 80114e8:	9a01      	ldr	r2, [sp, #4]
 80114ea:	50b4      	str	r4, [r6, r2]
 80114ec:	3604      	adds	r6, #4
 80114ee:	e7a3      	b.n	8011438 <__multiply+0x7c>
 80114f0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80114f4:	2b00      	cmp	r3, #0
 80114f6:	d1a5      	bne.n	8011444 <__multiply+0x88>
 80114f8:	3f01      	subs	r7, #1
 80114fa:	e7a1      	b.n	8011440 <__multiply+0x84>
 80114fc:	080136b3 	.word	0x080136b3
 8011500:	080136c4 	.word	0x080136c4

08011504 <__pow5mult>:
 8011504:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011508:	4615      	mov	r5, r2
 801150a:	f012 0203 	ands.w	r2, r2, #3
 801150e:	4606      	mov	r6, r0
 8011510:	460f      	mov	r7, r1
 8011512:	d007      	beq.n	8011524 <__pow5mult+0x20>
 8011514:	4c25      	ldr	r4, [pc, #148]	; (80115ac <__pow5mult+0xa8>)
 8011516:	3a01      	subs	r2, #1
 8011518:	2300      	movs	r3, #0
 801151a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801151e:	f7ff fe9f 	bl	8011260 <__multadd>
 8011522:	4607      	mov	r7, r0
 8011524:	10ad      	asrs	r5, r5, #2
 8011526:	d03d      	beq.n	80115a4 <__pow5mult+0xa0>
 8011528:	6a74      	ldr	r4, [r6, #36]	; 0x24
 801152a:	b97c      	cbnz	r4, 801154c <__pow5mult+0x48>
 801152c:	2010      	movs	r0, #16
 801152e:	f7fe fa29 	bl	800f984 <malloc>
 8011532:	4602      	mov	r2, r0
 8011534:	6270      	str	r0, [r6, #36]	; 0x24
 8011536:	b928      	cbnz	r0, 8011544 <__pow5mult+0x40>
 8011538:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 801153c:	4b1c      	ldr	r3, [pc, #112]	; (80115b0 <__pow5mult+0xac>)
 801153e:	481d      	ldr	r0, [pc, #116]	; (80115b4 <__pow5mult+0xb0>)
 8011540:	f000 fb3e 	bl	8011bc0 <__assert_func>
 8011544:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8011548:	6004      	str	r4, [r0, #0]
 801154a:	60c4      	str	r4, [r0, #12]
 801154c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8011550:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8011554:	b94c      	cbnz	r4, 801156a <__pow5mult+0x66>
 8011556:	f240 2171 	movw	r1, #625	; 0x271
 801155a:	4630      	mov	r0, r6
 801155c:	f7ff ff18 	bl	8011390 <__i2b>
 8011560:	2300      	movs	r3, #0
 8011562:	4604      	mov	r4, r0
 8011564:	f8c8 0008 	str.w	r0, [r8, #8]
 8011568:	6003      	str	r3, [r0, #0]
 801156a:	f04f 0900 	mov.w	r9, #0
 801156e:	07eb      	lsls	r3, r5, #31
 8011570:	d50a      	bpl.n	8011588 <__pow5mult+0x84>
 8011572:	4639      	mov	r1, r7
 8011574:	4622      	mov	r2, r4
 8011576:	4630      	mov	r0, r6
 8011578:	f7ff ff20 	bl	80113bc <__multiply>
 801157c:	4680      	mov	r8, r0
 801157e:	4639      	mov	r1, r7
 8011580:	4630      	mov	r0, r6
 8011582:	f7ff fe4b 	bl	801121c <_Bfree>
 8011586:	4647      	mov	r7, r8
 8011588:	106d      	asrs	r5, r5, #1
 801158a:	d00b      	beq.n	80115a4 <__pow5mult+0xa0>
 801158c:	6820      	ldr	r0, [r4, #0]
 801158e:	b938      	cbnz	r0, 80115a0 <__pow5mult+0x9c>
 8011590:	4622      	mov	r2, r4
 8011592:	4621      	mov	r1, r4
 8011594:	4630      	mov	r0, r6
 8011596:	f7ff ff11 	bl	80113bc <__multiply>
 801159a:	6020      	str	r0, [r4, #0]
 801159c:	f8c0 9000 	str.w	r9, [r0]
 80115a0:	4604      	mov	r4, r0
 80115a2:	e7e4      	b.n	801156e <__pow5mult+0x6a>
 80115a4:	4638      	mov	r0, r7
 80115a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80115aa:	bf00      	nop
 80115ac:	08013818 	.word	0x08013818
 80115b0:	0801363d 	.word	0x0801363d
 80115b4:	080136c4 	.word	0x080136c4

080115b8 <__lshift>:
 80115b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80115bc:	460c      	mov	r4, r1
 80115be:	4607      	mov	r7, r0
 80115c0:	4691      	mov	r9, r2
 80115c2:	6923      	ldr	r3, [r4, #16]
 80115c4:	6849      	ldr	r1, [r1, #4]
 80115c6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80115ca:	68a3      	ldr	r3, [r4, #8]
 80115cc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80115d0:	f108 0601 	add.w	r6, r8, #1
 80115d4:	42b3      	cmp	r3, r6
 80115d6:	db0b      	blt.n	80115f0 <__lshift+0x38>
 80115d8:	4638      	mov	r0, r7
 80115da:	f7ff fddf 	bl	801119c <_Balloc>
 80115de:	4605      	mov	r5, r0
 80115e0:	b948      	cbnz	r0, 80115f6 <__lshift+0x3e>
 80115e2:	4602      	mov	r2, r0
 80115e4:	f240 11d9 	movw	r1, #473	; 0x1d9
 80115e8:	4b27      	ldr	r3, [pc, #156]	; (8011688 <__lshift+0xd0>)
 80115ea:	4828      	ldr	r0, [pc, #160]	; (801168c <__lshift+0xd4>)
 80115ec:	f000 fae8 	bl	8011bc0 <__assert_func>
 80115f0:	3101      	adds	r1, #1
 80115f2:	005b      	lsls	r3, r3, #1
 80115f4:	e7ee      	b.n	80115d4 <__lshift+0x1c>
 80115f6:	2300      	movs	r3, #0
 80115f8:	f100 0114 	add.w	r1, r0, #20
 80115fc:	f100 0210 	add.w	r2, r0, #16
 8011600:	4618      	mov	r0, r3
 8011602:	4553      	cmp	r3, sl
 8011604:	db33      	blt.n	801166e <__lshift+0xb6>
 8011606:	6920      	ldr	r0, [r4, #16]
 8011608:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801160c:	f104 0314 	add.w	r3, r4, #20
 8011610:	f019 091f 	ands.w	r9, r9, #31
 8011614:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8011618:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801161c:	d02b      	beq.n	8011676 <__lshift+0xbe>
 801161e:	468a      	mov	sl, r1
 8011620:	2200      	movs	r2, #0
 8011622:	f1c9 0e20 	rsb	lr, r9, #32
 8011626:	6818      	ldr	r0, [r3, #0]
 8011628:	fa00 f009 	lsl.w	r0, r0, r9
 801162c:	4302      	orrs	r2, r0
 801162e:	f84a 2b04 	str.w	r2, [sl], #4
 8011632:	f853 2b04 	ldr.w	r2, [r3], #4
 8011636:	459c      	cmp	ip, r3
 8011638:	fa22 f20e 	lsr.w	r2, r2, lr
 801163c:	d8f3      	bhi.n	8011626 <__lshift+0x6e>
 801163e:	ebac 0304 	sub.w	r3, ip, r4
 8011642:	3b15      	subs	r3, #21
 8011644:	f023 0303 	bic.w	r3, r3, #3
 8011648:	3304      	adds	r3, #4
 801164a:	f104 0015 	add.w	r0, r4, #21
 801164e:	4584      	cmp	ip, r0
 8011650:	bf38      	it	cc
 8011652:	2304      	movcc	r3, #4
 8011654:	50ca      	str	r2, [r1, r3]
 8011656:	b10a      	cbz	r2, 801165c <__lshift+0xa4>
 8011658:	f108 0602 	add.w	r6, r8, #2
 801165c:	3e01      	subs	r6, #1
 801165e:	4638      	mov	r0, r7
 8011660:	4621      	mov	r1, r4
 8011662:	612e      	str	r6, [r5, #16]
 8011664:	f7ff fdda 	bl	801121c <_Bfree>
 8011668:	4628      	mov	r0, r5
 801166a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801166e:	f842 0f04 	str.w	r0, [r2, #4]!
 8011672:	3301      	adds	r3, #1
 8011674:	e7c5      	b.n	8011602 <__lshift+0x4a>
 8011676:	3904      	subs	r1, #4
 8011678:	f853 2b04 	ldr.w	r2, [r3], #4
 801167c:	459c      	cmp	ip, r3
 801167e:	f841 2f04 	str.w	r2, [r1, #4]!
 8011682:	d8f9      	bhi.n	8011678 <__lshift+0xc0>
 8011684:	e7ea      	b.n	801165c <__lshift+0xa4>
 8011686:	bf00      	nop
 8011688:	080136b3 	.word	0x080136b3
 801168c:	080136c4 	.word	0x080136c4

08011690 <__mcmp>:
 8011690:	4603      	mov	r3, r0
 8011692:	690a      	ldr	r2, [r1, #16]
 8011694:	6900      	ldr	r0, [r0, #16]
 8011696:	b530      	push	{r4, r5, lr}
 8011698:	1a80      	subs	r0, r0, r2
 801169a:	d10d      	bne.n	80116b8 <__mcmp+0x28>
 801169c:	3314      	adds	r3, #20
 801169e:	3114      	adds	r1, #20
 80116a0:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80116a4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80116a8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80116ac:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80116b0:	4295      	cmp	r5, r2
 80116b2:	d002      	beq.n	80116ba <__mcmp+0x2a>
 80116b4:	d304      	bcc.n	80116c0 <__mcmp+0x30>
 80116b6:	2001      	movs	r0, #1
 80116b8:	bd30      	pop	{r4, r5, pc}
 80116ba:	42a3      	cmp	r3, r4
 80116bc:	d3f4      	bcc.n	80116a8 <__mcmp+0x18>
 80116be:	e7fb      	b.n	80116b8 <__mcmp+0x28>
 80116c0:	f04f 30ff 	mov.w	r0, #4294967295
 80116c4:	e7f8      	b.n	80116b8 <__mcmp+0x28>
	...

080116c8 <__mdiff>:
 80116c8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80116cc:	460c      	mov	r4, r1
 80116ce:	4606      	mov	r6, r0
 80116d0:	4611      	mov	r1, r2
 80116d2:	4620      	mov	r0, r4
 80116d4:	4692      	mov	sl, r2
 80116d6:	f7ff ffdb 	bl	8011690 <__mcmp>
 80116da:	1e05      	subs	r5, r0, #0
 80116dc:	d111      	bne.n	8011702 <__mdiff+0x3a>
 80116de:	4629      	mov	r1, r5
 80116e0:	4630      	mov	r0, r6
 80116e2:	f7ff fd5b 	bl	801119c <_Balloc>
 80116e6:	4602      	mov	r2, r0
 80116e8:	b928      	cbnz	r0, 80116f6 <__mdiff+0x2e>
 80116ea:	f240 2132 	movw	r1, #562	; 0x232
 80116ee:	4b3c      	ldr	r3, [pc, #240]	; (80117e0 <__mdiff+0x118>)
 80116f0:	483c      	ldr	r0, [pc, #240]	; (80117e4 <__mdiff+0x11c>)
 80116f2:	f000 fa65 	bl	8011bc0 <__assert_func>
 80116f6:	2301      	movs	r3, #1
 80116f8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80116fc:	4610      	mov	r0, r2
 80116fe:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011702:	bfa4      	itt	ge
 8011704:	4653      	movge	r3, sl
 8011706:	46a2      	movge	sl, r4
 8011708:	4630      	mov	r0, r6
 801170a:	f8da 1004 	ldr.w	r1, [sl, #4]
 801170e:	bfa6      	itte	ge
 8011710:	461c      	movge	r4, r3
 8011712:	2500      	movge	r5, #0
 8011714:	2501      	movlt	r5, #1
 8011716:	f7ff fd41 	bl	801119c <_Balloc>
 801171a:	4602      	mov	r2, r0
 801171c:	b918      	cbnz	r0, 8011726 <__mdiff+0x5e>
 801171e:	f44f 7110 	mov.w	r1, #576	; 0x240
 8011722:	4b2f      	ldr	r3, [pc, #188]	; (80117e0 <__mdiff+0x118>)
 8011724:	e7e4      	b.n	80116f0 <__mdiff+0x28>
 8011726:	f100 0814 	add.w	r8, r0, #20
 801172a:	f8da 7010 	ldr.w	r7, [sl, #16]
 801172e:	60c5      	str	r5, [r0, #12]
 8011730:	f04f 0c00 	mov.w	ip, #0
 8011734:	f10a 0514 	add.w	r5, sl, #20
 8011738:	f10a 0010 	add.w	r0, sl, #16
 801173c:	46c2      	mov	sl, r8
 801173e:	6926      	ldr	r6, [r4, #16]
 8011740:	f104 0914 	add.w	r9, r4, #20
 8011744:	eb05 0e87 	add.w	lr, r5, r7, lsl #2
 8011748:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 801174c:	f850 bf04 	ldr.w	fp, [r0, #4]!
 8011750:	f859 3b04 	ldr.w	r3, [r9], #4
 8011754:	fa1f f18b 	uxth.w	r1, fp
 8011758:	4461      	add	r1, ip
 801175a:	fa1f fc83 	uxth.w	ip, r3
 801175e:	0c1b      	lsrs	r3, r3, #16
 8011760:	eba1 010c 	sub.w	r1, r1, ip
 8011764:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8011768:	eb03 4321 	add.w	r3, r3, r1, asr #16
 801176c:	b289      	uxth	r1, r1
 801176e:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8011772:	454e      	cmp	r6, r9
 8011774:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8011778:	f84a 3b04 	str.w	r3, [sl], #4
 801177c:	d8e6      	bhi.n	801174c <__mdiff+0x84>
 801177e:	1b33      	subs	r3, r6, r4
 8011780:	3b15      	subs	r3, #21
 8011782:	f023 0303 	bic.w	r3, r3, #3
 8011786:	3415      	adds	r4, #21
 8011788:	3304      	adds	r3, #4
 801178a:	42a6      	cmp	r6, r4
 801178c:	bf38      	it	cc
 801178e:	2304      	movcc	r3, #4
 8011790:	441d      	add	r5, r3
 8011792:	4443      	add	r3, r8
 8011794:	461e      	mov	r6, r3
 8011796:	462c      	mov	r4, r5
 8011798:	4574      	cmp	r4, lr
 801179a:	d30e      	bcc.n	80117ba <__mdiff+0xf2>
 801179c:	f10e 0103 	add.w	r1, lr, #3
 80117a0:	1b49      	subs	r1, r1, r5
 80117a2:	f021 0103 	bic.w	r1, r1, #3
 80117a6:	3d03      	subs	r5, #3
 80117a8:	45ae      	cmp	lr, r5
 80117aa:	bf38      	it	cc
 80117ac:	2100      	movcc	r1, #0
 80117ae:	4419      	add	r1, r3
 80117b0:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 80117b4:	b18b      	cbz	r3, 80117da <__mdiff+0x112>
 80117b6:	6117      	str	r7, [r2, #16]
 80117b8:	e7a0      	b.n	80116fc <__mdiff+0x34>
 80117ba:	f854 8b04 	ldr.w	r8, [r4], #4
 80117be:	fa1f f188 	uxth.w	r1, r8
 80117c2:	4461      	add	r1, ip
 80117c4:	1408      	asrs	r0, r1, #16
 80117c6:	eb00 4018 	add.w	r0, r0, r8, lsr #16
 80117ca:	b289      	uxth	r1, r1
 80117cc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80117d0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80117d4:	f846 1b04 	str.w	r1, [r6], #4
 80117d8:	e7de      	b.n	8011798 <__mdiff+0xd0>
 80117da:	3f01      	subs	r7, #1
 80117dc:	e7e8      	b.n	80117b0 <__mdiff+0xe8>
 80117de:	bf00      	nop
 80117e0:	080136b3 	.word	0x080136b3
 80117e4:	080136c4 	.word	0x080136c4

080117e8 <__d2b>:
 80117e8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80117ec:	2101      	movs	r1, #1
 80117ee:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 80117f2:	4690      	mov	r8, r2
 80117f4:	461d      	mov	r5, r3
 80117f6:	f7ff fcd1 	bl	801119c <_Balloc>
 80117fa:	4604      	mov	r4, r0
 80117fc:	b930      	cbnz	r0, 801180c <__d2b+0x24>
 80117fe:	4602      	mov	r2, r0
 8011800:	f240 310a 	movw	r1, #778	; 0x30a
 8011804:	4b24      	ldr	r3, [pc, #144]	; (8011898 <__d2b+0xb0>)
 8011806:	4825      	ldr	r0, [pc, #148]	; (801189c <__d2b+0xb4>)
 8011808:	f000 f9da 	bl	8011bc0 <__assert_func>
 801180c:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8011810:	f3c5 550a 	ubfx	r5, r5, #20, #11
 8011814:	bb2d      	cbnz	r5, 8011862 <__d2b+0x7a>
 8011816:	9301      	str	r3, [sp, #4]
 8011818:	f1b8 0300 	subs.w	r3, r8, #0
 801181c:	d026      	beq.n	801186c <__d2b+0x84>
 801181e:	4668      	mov	r0, sp
 8011820:	9300      	str	r3, [sp, #0]
 8011822:	f7ff fd87 	bl	8011334 <__lo0bits>
 8011826:	9900      	ldr	r1, [sp, #0]
 8011828:	b1f0      	cbz	r0, 8011868 <__d2b+0x80>
 801182a:	9a01      	ldr	r2, [sp, #4]
 801182c:	f1c0 0320 	rsb	r3, r0, #32
 8011830:	fa02 f303 	lsl.w	r3, r2, r3
 8011834:	430b      	orrs	r3, r1
 8011836:	40c2      	lsrs	r2, r0
 8011838:	6163      	str	r3, [r4, #20]
 801183a:	9201      	str	r2, [sp, #4]
 801183c:	9b01      	ldr	r3, [sp, #4]
 801183e:	2b00      	cmp	r3, #0
 8011840:	bf14      	ite	ne
 8011842:	2102      	movne	r1, #2
 8011844:	2101      	moveq	r1, #1
 8011846:	61a3      	str	r3, [r4, #24]
 8011848:	6121      	str	r1, [r4, #16]
 801184a:	b1c5      	cbz	r5, 801187e <__d2b+0x96>
 801184c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8011850:	4405      	add	r5, r0
 8011852:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8011856:	603d      	str	r5, [r7, #0]
 8011858:	6030      	str	r0, [r6, #0]
 801185a:	4620      	mov	r0, r4
 801185c:	b002      	add	sp, #8
 801185e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011862:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8011866:	e7d6      	b.n	8011816 <__d2b+0x2e>
 8011868:	6161      	str	r1, [r4, #20]
 801186a:	e7e7      	b.n	801183c <__d2b+0x54>
 801186c:	a801      	add	r0, sp, #4
 801186e:	f7ff fd61 	bl	8011334 <__lo0bits>
 8011872:	2101      	movs	r1, #1
 8011874:	9b01      	ldr	r3, [sp, #4]
 8011876:	6121      	str	r1, [r4, #16]
 8011878:	6163      	str	r3, [r4, #20]
 801187a:	3020      	adds	r0, #32
 801187c:	e7e5      	b.n	801184a <__d2b+0x62>
 801187e:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 8011882:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8011886:	6038      	str	r0, [r7, #0]
 8011888:	6918      	ldr	r0, [r3, #16]
 801188a:	f7ff fd33 	bl	80112f4 <__hi0bits>
 801188e:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 8011892:	6031      	str	r1, [r6, #0]
 8011894:	e7e1      	b.n	801185a <__d2b+0x72>
 8011896:	bf00      	nop
 8011898:	080136b3 	.word	0x080136b3
 801189c:	080136c4 	.word	0x080136c4

080118a0 <_calloc_r>:
 80118a0:	b538      	push	{r3, r4, r5, lr}
 80118a2:	fb02 f501 	mul.w	r5, r2, r1
 80118a6:	4629      	mov	r1, r5
 80118a8:	f7fe f8de 	bl	800fa68 <_malloc_r>
 80118ac:	4604      	mov	r4, r0
 80118ae:	b118      	cbz	r0, 80118b8 <_calloc_r+0x18>
 80118b0:	462a      	mov	r2, r5
 80118b2:	2100      	movs	r1, #0
 80118b4:	f7fe f884 	bl	800f9c0 <memset>
 80118b8:	4620      	mov	r0, r4
 80118ba:	bd38      	pop	{r3, r4, r5, pc}

080118bc <_realloc_r>:
 80118bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80118be:	4607      	mov	r7, r0
 80118c0:	4614      	mov	r4, r2
 80118c2:	460e      	mov	r6, r1
 80118c4:	b921      	cbnz	r1, 80118d0 <_realloc_r+0x14>
 80118c6:	4611      	mov	r1, r2
 80118c8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80118cc:	f7fe b8cc 	b.w	800fa68 <_malloc_r>
 80118d0:	b922      	cbnz	r2, 80118dc <_realloc_r+0x20>
 80118d2:	f7fe f87d 	bl	800f9d0 <_free_r>
 80118d6:	4625      	mov	r5, r4
 80118d8:	4628      	mov	r0, r5
 80118da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80118dc:	f000 f9cf 	bl	8011c7e <_malloc_usable_size_r>
 80118e0:	42a0      	cmp	r0, r4
 80118e2:	d20f      	bcs.n	8011904 <_realloc_r+0x48>
 80118e4:	4621      	mov	r1, r4
 80118e6:	4638      	mov	r0, r7
 80118e8:	f7fe f8be 	bl	800fa68 <_malloc_r>
 80118ec:	4605      	mov	r5, r0
 80118ee:	2800      	cmp	r0, #0
 80118f0:	d0f2      	beq.n	80118d8 <_realloc_r+0x1c>
 80118f2:	4631      	mov	r1, r6
 80118f4:	4622      	mov	r2, r4
 80118f6:	f7ff fc37 	bl	8011168 <memcpy>
 80118fa:	4631      	mov	r1, r6
 80118fc:	4638      	mov	r0, r7
 80118fe:	f7fe f867 	bl	800f9d0 <_free_r>
 8011902:	e7e9      	b.n	80118d8 <_realloc_r+0x1c>
 8011904:	4635      	mov	r5, r6
 8011906:	e7e7      	b.n	80118d8 <_realloc_r+0x1c>

08011908 <__ssputs_r>:
 8011908:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801190c:	688e      	ldr	r6, [r1, #8]
 801190e:	4682      	mov	sl, r0
 8011910:	429e      	cmp	r6, r3
 8011912:	460c      	mov	r4, r1
 8011914:	4690      	mov	r8, r2
 8011916:	461f      	mov	r7, r3
 8011918:	d838      	bhi.n	801198c <__ssputs_r+0x84>
 801191a:	898a      	ldrh	r2, [r1, #12]
 801191c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8011920:	d032      	beq.n	8011988 <__ssputs_r+0x80>
 8011922:	6825      	ldr	r5, [r4, #0]
 8011924:	6909      	ldr	r1, [r1, #16]
 8011926:	3301      	adds	r3, #1
 8011928:	eba5 0901 	sub.w	r9, r5, r1
 801192c:	6965      	ldr	r5, [r4, #20]
 801192e:	444b      	add	r3, r9
 8011930:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8011934:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8011938:	106d      	asrs	r5, r5, #1
 801193a:	429d      	cmp	r5, r3
 801193c:	bf38      	it	cc
 801193e:	461d      	movcc	r5, r3
 8011940:	0553      	lsls	r3, r2, #21
 8011942:	d531      	bpl.n	80119a8 <__ssputs_r+0xa0>
 8011944:	4629      	mov	r1, r5
 8011946:	f7fe f88f 	bl	800fa68 <_malloc_r>
 801194a:	4606      	mov	r6, r0
 801194c:	b950      	cbnz	r0, 8011964 <__ssputs_r+0x5c>
 801194e:	230c      	movs	r3, #12
 8011950:	f04f 30ff 	mov.w	r0, #4294967295
 8011954:	f8ca 3000 	str.w	r3, [sl]
 8011958:	89a3      	ldrh	r3, [r4, #12]
 801195a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801195e:	81a3      	strh	r3, [r4, #12]
 8011960:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011964:	464a      	mov	r2, r9
 8011966:	6921      	ldr	r1, [r4, #16]
 8011968:	f7ff fbfe 	bl	8011168 <memcpy>
 801196c:	89a3      	ldrh	r3, [r4, #12]
 801196e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8011972:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011976:	81a3      	strh	r3, [r4, #12]
 8011978:	6126      	str	r6, [r4, #16]
 801197a:	444e      	add	r6, r9
 801197c:	6026      	str	r6, [r4, #0]
 801197e:	463e      	mov	r6, r7
 8011980:	6165      	str	r5, [r4, #20]
 8011982:	eba5 0509 	sub.w	r5, r5, r9
 8011986:	60a5      	str	r5, [r4, #8]
 8011988:	42be      	cmp	r6, r7
 801198a:	d900      	bls.n	801198e <__ssputs_r+0x86>
 801198c:	463e      	mov	r6, r7
 801198e:	4632      	mov	r2, r6
 8011990:	4641      	mov	r1, r8
 8011992:	6820      	ldr	r0, [r4, #0]
 8011994:	f000 f959 	bl	8011c4a <memmove>
 8011998:	68a3      	ldr	r3, [r4, #8]
 801199a:	6822      	ldr	r2, [r4, #0]
 801199c:	1b9b      	subs	r3, r3, r6
 801199e:	4432      	add	r2, r6
 80119a0:	2000      	movs	r0, #0
 80119a2:	60a3      	str	r3, [r4, #8]
 80119a4:	6022      	str	r2, [r4, #0]
 80119a6:	e7db      	b.n	8011960 <__ssputs_r+0x58>
 80119a8:	462a      	mov	r2, r5
 80119aa:	f7ff ff87 	bl	80118bc <_realloc_r>
 80119ae:	4606      	mov	r6, r0
 80119b0:	2800      	cmp	r0, #0
 80119b2:	d1e1      	bne.n	8011978 <__ssputs_r+0x70>
 80119b4:	4650      	mov	r0, sl
 80119b6:	6921      	ldr	r1, [r4, #16]
 80119b8:	f7fe f80a 	bl	800f9d0 <_free_r>
 80119bc:	e7c7      	b.n	801194e <__ssputs_r+0x46>
	...

080119c0 <_svfiprintf_r>:
 80119c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80119c4:	4698      	mov	r8, r3
 80119c6:	898b      	ldrh	r3, [r1, #12]
 80119c8:	4607      	mov	r7, r0
 80119ca:	061b      	lsls	r3, r3, #24
 80119cc:	460d      	mov	r5, r1
 80119ce:	4614      	mov	r4, r2
 80119d0:	b09d      	sub	sp, #116	; 0x74
 80119d2:	d50e      	bpl.n	80119f2 <_svfiprintf_r+0x32>
 80119d4:	690b      	ldr	r3, [r1, #16]
 80119d6:	b963      	cbnz	r3, 80119f2 <_svfiprintf_r+0x32>
 80119d8:	2140      	movs	r1, #64	; 0x40
 80119da:	f7fe f845 	bl	800fa68 <_malloc_r>
 80119de:	6028      	str	r0, [r5, #0]
 80119e0:	6128      	str	r0, [r5, #16]
 80119e2:	b920      	cbnz	r0, 80119ee <_svfiprintf_r+0x2e>
 80119e4:	230c      	movs	r3, #12
 80119e6:	603b      	str	r3, [r7, #0]
 80119e8:	f04f 30ff 	mov.w	r0, #4294967295
 80119ec:	e0d1      	b.n	8011b92 <_svfiprintf_r+0x1d2>
 80119ee:	2340      	movs	r3, #64	; 0x40
 80119f0:	616b      	str	r3, [r5, #20]
 80119f2:	2300      	movs	r3, #0
 80119f4:	9309      	str	r3, [sp, #36]	; 0x24
 80119f6:	2320      	movs	r3, #32
 80119f8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80119fc:	2330      	movs	r3, #48	; 0x30
 80119fe:	f04f 0901 	mov.w	r9, #1
 8011a02:	f8cd 800c 	str.w	r8, [sp, #12]
 8011a06:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8011bac <_svfiprintf_r+0x1ec>
 8011a0a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8011a0e:	4623      	mov	r3, r4
 8011a10:	469a      	mov	sl, r3
 8011a12:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011a16:	b10a      	cbz	r2, 8011a1c <_svfiprintf_r+0x5c>
 8011a18:	2a25      	cmp	r2, #37	; 0x25
 8011a1a:	d1f9      	bne.n	8011a10 <_svfiprintf_r+0x50>
 8011a1c:	ebba 0b04 	subs.w	fp, sl, r4
 8011a20:	d00b      	beq.n	8011a3a <_svfiprintf_r+0x7a>
 8011a22:	465b      	mov	r3, fp
 8011a24:	4622      	mov	r2, r4
 8011a26:	4629      	mov	r1, r5
 8011a28:	4638      	mov	r0, r7
 8011a2a:	f7ff ff6d 	bl	8011908 <__ssputs_r>
 8011a2e:	3001      	adds	r0, #1
 8011a30:	f000 80aa 	beq.w	8011b88 <_svfiprintf_r+0x1c8>
 8011a34:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011a36:	445a      	add	r2, fp
 8011a38:	9209      	str	r2, [sp, #36]	; 0x24
 8011a3a:	f89a 3000 	ldrb.w	r3, [sl]
 8011a3e:	2b00      	cmp	r3, #0
 8011a40:	f000 80a2 	beq.w	8011b88 <_svfiprintf_r+0x1c8>
 8011a44:	2300      	movs	r3, #0
 8011a46:	f04f 32ff 	mov.w	r2, #4294967295
 8011a4a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011a4e:	f10a 0a01 	add.w	sl, sl, #1
 8011a52:	9304      	str	r3, [sp, #16]
 8011a54:	9307      	str	r3, [sp, #28]
 8011a56:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8011a5a:	931a      	str	r3, [sp, #104]	; 0x68
 8011a5c:	4654      	mov	r4, sl
 8011a5e:	2205      	movs	r2, #5
 8011a60:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011a64:	4851      	ldr	r0, [pc, #324]	; (8011bac <_svfiprintf_r+0x1ec>)
 8011a66:	f7ff fb71 	bl	801114c <memchr>
 8011a6a:	9a04      	ldr	r2, [sp, #16]
 8011a6c:	b9d8      	cbnz	r0, 8011aa6 <_svfiprintf_r+0xe6>
 8011a6e:	06d0      	lsls	r0, r2, #27
 8011a70:	bf44      	itt	mi
 8011a72:	2320      	movmi	r3, #32
 8011a74:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011a78:	0711      	lsls	r1, r2, #28
 8011a7a:	bf44      	itt	mi
 8011a7c:	232b      	movmi	r3, #43	; 0x2b
 8011a7e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011a82:	f89a 3000 	ldrb.w	r3, [sl]
 8011a86:	2b2a      	cmp	r3, #42	; 0x2a
 8011a88:	d015      	beq.n	8011ab6 <_svfiprintf_r+0xf6>
 8011a8a:	4654      	mov	r4, sl
 8011a8c:	2000      	movs	r0, #0
 8011a8e:	f04f 0c0a 	mov.w	ip, #10
 8011a92:	9a07      	ldr	r2, [sp, #28]
 8011a94:	4621      	mov	r1, r4
 8011a96:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011a9a:	3b30      	subs	r3, #48	; 0x30
 8011a9c:	2b09      	cmp	r3, #9
 8011a9e:	d94e      	bls.n	8011b3e <_svfiprintf_r+0x17e>
 8011aa0:	b1b0      	cbz	r0, 8011ad0 <_svfiprintf_r+0x110>
 8011aa2:	9207      	str	r2, [sp, #28]
 8011aa4:	e014      	b.n	8011ad0 <_svfiprintf_r+0x110>
 8011aa6:	eba0 0308 	sub.w	r3, r0, r8
 8011aaa:	fa09 f303 	lsl.w	r3, r9, r3
 8011aae:	4313      	orrs	r3, r2
 8011ab0:	46a2      	mov	sl, r4
 8011ab2:	9304      	str	r3, [sp, #16]
 8011ab4:	e7d2      	b.n	8011a5c <_svfiprintf_r+0x9c>
 8011ab6:	9b03      	ldr	r3, [sp, #12]
 8011ab8:	1d19      	adds	r1, r3, #4
 8011aba:	681b      	ldr	r3, [r3, #0]
 8011abc:	9103      	str	r1, [sp, #12]
 8011abe:	2b00      	cmp	r3, #0
 8011ac0:	bfbb      	ittet	lt
 8011ac2:	425b      	neglt	r3, r3
 8011ac4:	f042 0202 	orrlt.w	r2, r2, #2
 8011ac8:	9307      	strge	r3, [sp, #28]
 8011aca:	9307      	strlt	r3, [sp, #28]
 8011acc:	bfb8      	it	lt
 8011ace:	9204      	strlt	r2, [sp, #16]
 8011ad0:	7823      	ldrb	r3, [r4, #0]
 8011ad2:	2b2e      	cmp	r3, #46	; 0x2e
 8011ad4:	d10c      	bne.n	8011af0 <_svfiprintf_r+0x130>
 8011ad6:	7863      	ldrb	r3, [r4, #1]
 8011ad8:	2b2a      	cmp	r3, #42	; 0x2a
 8011ada:	d135      	bne.n	8011b48 <_svfiprintf_r+0x188>
 8011adc:	9b03      	ldr	r3, [sp, #12]
 8011ade:	3402      	adds	r4, #2
 8011ae0:	1d1a      	adds	r2, r3, #4
 8011ae2:	681b      	ldr	r3, [r3, #0]
 8011ae4:	9203      	str	r2, [sp, #12]
 8011ae6:	2b00      	cmp	r3, #0
 8011ae8:	bfb8      	it	lt
 8011aea:	f04f 33ff 	movlt.w	r3, #4294967295
 8011aee:	9305      	str	r3, [sp, #20]
 8011af0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8011bbc <_svfiprintf_r+0x1fc>
 8011af4:	2203      	movs	r2, #3
 8011af6:	4650      	mov	r0, sl
 8011af8:	7821      	ldrb	r1, [r4, #0]
 8011afa:	f7ff fb27 	bl	801114c <memchr>
 8011afe:	b140      	cbz	r0, 8011b12 <_svfiprintf_r+0x152>
 8011b00:	2340      	movs	r3, #64	; 0x40
 8011b02:	eba0 000a 	sub.w	r0, r0, sl
 8011b06:	fa03 f000 	lsl.w	r0, r3, r0
 8011b0a:	9b04      	ldr	r3, [sp, #16]
 8011b0c:	3401      	adds	r4, #1
 8011b0e:	4303      	orrs	r3, r0
 8011b10:	9304      	str	r3, [sp, #16]
 8011b12:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011b16:	2206      	movs	r2, #6
 8011b18:	4825      	ldr	r0, [pc, #148]	; (8011bb0 <_svfiprintf_r+0x1f0>)
 8011b1a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8011b1e:	f7ff fb15 	bl	801114c <memchr>
 8011b22:	2800      	cmp	r0, #0
 8011b24:	d038      	beq.n	8011b98 <_svfiprintf_r+0x1d8>
 8011b26:	4b23      	ldr	r3, [pc, #140]	; (8011bb4 <_svfiprintf_r+0x1f4>)
 8011b28:	bb1b      	cbnz	r3, 8011b72 <_svfiprintf_r+0x1b2>
 8011b2a:	9b03      	ldr	r3, [sp, #12]
 8011b2c:	3307      	adds	r3, #7
 8011b2e:	f023 0307 	bic.w	r3, r3, #7
 8011b32:	3308      	adds	r3, #8
 8011b34:	9303      	str	r3, [sp, #12]
 8011b36:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011b38:	4433      	add	r3, r6
 8011b3a:	9309      	str	r3, [sp, #36]	; 0x24
 8011b3c:	e767      	b.n	8011a0e <_svfiprintf_r+0x4e>
 8011b3e:	460c      	mov	r4, r1
 8011b40:	2001      	movs	r0, #1
 8011b42:	fb0c 3202 	mla	r2, ip, r2, r3
 8011b46:	e7a5      	b.n	8011a94 <_svfiprintf_r+0xd4>
 8011b48:	2300      	movs	r3, #0
 8011b4a:	f04f 0c0a 	mov.w	ip, #10
 8011b4e:	4619      	mov	r1, r3
 8011b50:	3401      	adds	r4, #1
 8011b52:	9305      	str	r3, [sp, #20]
 8011b54:	4620      	mov	r0, r4
 8011b56:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011b5a:	3a30      	subs	r2, #48	; 0x30
 8011b5c:	2a09      	cmp	r2, #9
 8011b5e:	d903      	bls.n	8011b68 <_svfiprintf_r+0x1a8>
 8011b60:	2b00      	cmp	r3, #0
 8011b62:	d0c5      	beq.n	8011af0 <_svfiprintf_r+0x130>
 8011b64:	9105      	str	r1, [sp, #20]
 8011b66:	e7c3      	b.n	8011af0 <_svfiprintf_r+0x130>
 8011b68:	4604      	mov	r4, r0
 8011b6a:	2301      	movs	r3, #1
 8011b6c:	fb0c 2101 	mla	r1, ip, r1, r2
 8011b70:	e7f0      	b.n	8011b54 <_svfiprintf_r+0x194>
 8011b72:	ab03      	add	r3, sp, #12
 8011b74:	9300      	str	r3, [sp, #0]
 8011b76:	462a      	mov	r2, r5
 8011b78:	4638      	mov	r0, r7
 8011b7a:	4b0f      	ldr	r3, [pc, #60]	; (8011bb8 <_svfiprintf_r+0x1f8>)
 8011b7c:	a904      	add	r1, sp, #16
 8011b7e:	f7fe f86b 	bl	800fc58 <_printf_float>
 8011b82:	1c42      	adds	r2, r0, #1
 8011b84:	4606      	mov	r6, r0
 8011b86:	d1d6      	bne.n	8011b36 <_svfiprintf_r+0x176>
 8011b88:	89ab      	ldrh	r3, [r5, #12]
 8011b8a:	065b      	lsls	r3, r3, #25
 8011b8c:	f53f af2c 	bmi.w	80119e8 <_svfiprintf_r+0x28>
 8011b90:	9809      	ldr	r0, [sp, #36]	; 0x24
 8011b92:	b01d      	add	sp, #116	; 0x74
 8011b94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011b98:	ab03      	add	r3, sp, #12
 8011b9a:	9300      	str	r3, [sp, #0]
 8011b9c:	462a      	mov	r2, r5
 8011b9e:	4638      	mov	r0, r7
 8011ba0:	4b05      	ldr	r3, [pc, #20]	; (8011bb8 <_svfiprintf_r+0x1f8>)
 8011ba2:	a904      	add	r1, sp, #16
 8011ba4:	f7fe faf4 	bl	8010190 <_printf_i>
 8011ba8:	e7eb      	b.n	8011b82 <_svfiprintf_r+0x1c2>
 8011baa:	bf00      	nop
 8011bac:	08013824 	.word	0x08013824
 8011bb0:	0801382e 	.word	0x0801382e
 8011bb4:	0800fc59 	.word	0x0800fc59
 8011bb8:	08011909 	.word	0x08011909
 8011bbc:	0801382a 	.word	0x0801382a

08011bc0 <__assert_func>:
 8011bc0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8011bc2:	4614      	mov	r4, r2
 8011bc4:	461a      	mov	r2, r3
 8011bc6:	4b09      	ldr	r3, [pc, #36]	; (8011bec <__assert_func+0x2c>)
 8011bc8:	4605      	mov	r5, r0
 8011bca:	681b      	ldr	r3, [r3, #0]
 8011bcc:	68d8      	ldr	r0, [r3, #12]
 8011bce:	b14c      	cbz	r4, 8011be4 <__assert_func+0x24>
 8011bd0:	4b07      	ldr	r3, [pc, #28]	; (8011bf0 <__assert_func+0x30>)
 8011bd2:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8011bd6:	9100      	str	r1, [sp, #0]
 8011bd8:	462b      	mov	r3, r5
 8011bda:	4906      	ldr	r1, [pc, #24]	; (8011bf4 <__assert_func+0x34>)
 8011bdc:	f000 f80e 	bl	8011bfc <fiprintf>
 8011be0:	f000 fa7a 	bl	80120d8 <abort>
 8011be4:	4b04      	ldr	r3, [pc, #16]	; (8011bf8 <__assert_func+0x38>)
 8011be6:	461c      	mov	r4, r3
 8011be8:	e7f3      	b.n	8011bd2 <__assert_func+0x12>
 8011bea:	bf00      	nop
 8011bec:	200001a8 	.word	0x200001a8
 8011bf0:	08013835 	.word	0x08013835
 8011bf4:	08013842 	.word	0x08013842
 8011bf8:	08013870 	.word	0x08013870

08011bfc <fiprintf>:
 8011bfc:	b40e      	push	{r1, r2, r3}
 8011bfe:	b503      	push	{r0, r1, lr}
 8011c00:	4601      	mov	r1, r0
 8011c02:	ab03      	add	r3, sp, #12
 8011c04:	4805      	ldr	r0, [pc, #20]	; (8011c1c <fiprintf+0x20>)
 8011c06:	f853 2b04 	ldr.w	r2, [r3], #4
 8011c0a:	6800      	ldr	r0, [r0, #0]
 8011c0c:	9301      	str	r3, [sp, #4]
 8011c0e:	f000 f865 	bl	8011cdc <_vfiprintf_r>
 8011c12:	b002      	add	sp, #8
 8011c14:	f85d eb04 	ldr.w	lr, [sp], #4
 8011c18:	b003      	add	sp, #12
 8011c1a:	4770      	bx	lr
 8011c1c:	200001a8 	.word	0x200001a8

08011c20 <__retarget_lock_init_recursive>:
 8011c20:	4770      	bx	lr

08011c22 <__retarget_lock_acquire_recursive>:
 8011c22:	4770      	bx	lr

08011c24 <__retarget_lock_release_recursive>:
 8011c24:	4770      	bx	lr

08011c26 <__ascii_mbtowc>:
 8011c26:	b082      	sub	sp, #8
 8011c28:	b901      	cbnz	r1, 8011c2c <__ascii_mbtowc+0x6>
 8011c2a:	a901      	add	r1, sp, #4
 8011c2c:	b142      	cbz	r2, 8011c40 <__ascii_mbtowc+0x1a>
 8011c2e:	b14b      	cbz	r3, 8011c44 <__ascii_mbtowc+0x1e>
 8011c30:	7813      	ldrb	r3, [r2, #0]
 8011c32:	600b      	str	r3, [r1, #0]
 8011c34:	7812      	ldrb	r2, [r2, #0]
 8011c36:	1e10      	subs	r0, r2, #0
 8011c38:	bf18      	it	ne
 8011c3a:	2001      	movne	r0, #1
 8011c3c:	b002      	add	sp, #8
 8011c3e:	4770      	bx	lr
 8011c40:	4610      	mov	r0, r2
 8011c42:	e7fb      	b.n	8011c3c <__ascii_mbtowc+0x16>
 8011c44:	f06f 0001 	mvn.w	r0, #1
 8011c48:	e7f8      	b.n	8011c3c <__ascii_mbtowc+0x16>

08011c4a <memmove>:
 8011c4a:	4288      	cmp	r0, r1
 8011c4c:	b510      	push	{r4, lr}
 8011c4e:	eb01 0402 	add.w	r4, r1, r2
 8011c52:	d902      	bls.n	8011c5a <memmove+0x10>
 8011c54:	4284      	cmp	r4, r0
 8011c56:	4623      	mov	r3, r4
 8011c58:	d807      	bhi.n	8011c6a <memmove+0x20>
 8011c5a:	1e43      	subs	r3, r0, #1
 8011c5c:	42a1      	cmp	r1, r4
 8011c5e:	d008      	beq.n	8011c72 <memmove+0x28>
 8011c60:	f811 2b01 	ldrb.w	r2, [r1], #1
 8011c64:	f803 2f01 	strb.w	r2, [r3, #1]!
 8011c68:	e7f8      	b.n	8011c5c <memmove+0x12>
 8011c6a:	4601      	mov	r1, r0
 8011c6c:	4402      	add	r2, r0
 8011c6e:	428a      	cmp	r2, r1
 8011c70:	d100      	bne.n	8011c74 <memmove+0x2a>
 8011c72:	bd10      	pop	{r4, pc}
 8011c74:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8011c78:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8011c7c:	e7f7      	b.n	8011c6e <memmove+0x24>

08011c7e <_malloc_usable_size_r>:
 8011c7e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011c82:	1f18      	subs	r0, r3, #4
 8011c84:	2b00      	cmp	r3, #0
 8011c86:	bfbc      	itt	lt
 8011c88:	580b      	ldrlt	r3, [r1, r0]
 8011c8a:	18c0      	addlt	r0, r0, r3
 8011c8c:	4770      	bx	lr

08011c8e <__sfputc_r>:
 8011c8e:	6893      	ldr	r3, [r2, #8]
 8011c90:	b410      	push	{r4}
 8011c92:	3b01      	subs	r3, #1
 8011c94:	2b00      	cmp	r3, #0
 8011c96:	6093      	str	r3, [r2, #8]
 8011c98:	da07      	bge.n	8011caa <__sfputc_r+0x1c>
 8011c9a:	6994      	ldr	r4, [r2, #24]
 8011c9c:	42a3      	cmp	r3, r4
 8011c9e:	db01      	blt.n	8011ca4 <__sfputc_r+0x16>
 8011ca0:	290a      	cmp	r1, #10
 8011ca2:	d102      	bne.n	8011caa <__sfputc_r+0x1c>
 8011ca4:	bc10      	pop	{r4}
 8011ca6:	f000 b949 	b.w	8011f3c <__swbuf_r>
 8011caa:	6813      	ldr	r3, [r2, #0]
 8011cac:	1c58      	adds	r0, r3, #1
 8011cae:	6010      	str	r0, [r2, #0]
 8011cb0:	7019      	strb	r1, [r3, #0]
 8011cb2:	4608      	mov	r0, r1
 8011cb4:	bc10      	pop	{r4}
 8011cb6:	4770      	bx	lr

08011cb8 <__sfputs_r>:
 8011cb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011cba:	4606      	mov	r6, r0
 8011cbc:	460f      	mov	r7, r1
 8011cbe:	4614      	mov	r4, r2
 8011cc0:	18d5      	adds	r5, r2, r3
 8011cc2:	42ac      	cmp	r4, r5
 8011cc4:	d101      	bne.n	8011cca <__sfputs_r+0x12>
 8011cc6:	2000      	movs	r0, #0
 8011cc8:	e007      	b.n	8011cda <__sfputs_r+0x22>
 8011cca:	463a      	mov	r2, r7
 8011ccc:	4630      	mov	r0, r6
 8011cce:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011cd2:	f7ff ffdc 	bl	8011c8e <__sfputc_r>
 8011cd6:	1c43      	adds	r3, r0, #1
 8011cd8:	d1f3      	bne.n	8011cc2 <__sfputs_r+0xa>
 8011cda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08011cdc <_vfiprintf_r>:
 8011cdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011ce0:	460d      	mov	r5, r1
 8011ce2:	4614      	mov	r4, r2
 8011ce4:	4698      	mov	r8, r3
 8011ce6:	4606      	mov	r6, r0
 8011ce8:	b09d      	sub	sp, #116	; 0x74
 8011cea:	b118      	cbz	r0, 8011cf4 <_vfiprintf_r+0x18>
 8011cec:	6983      	ldr	r3, [r0, #24]
 8011cee:	b90b      	cbnz	r3, 8011cf4 <_vfiprintf_r+0x18>
 8011cf0:	f000 fb14 	bl	801231c <__sinit>
 8011cf4:	4b89      	ldr	r3, [pc, #548]	; (8011f1c <_vfiprintf_r+0x240>)
 8011cf6:	429d      	cmp	r5, r3
 8011cf8:	d11b      	bne.n	8011d32 <_vfiprintf_r+0x56>
 8011cfa:	6875      	ldr	r5, [r6, #4]
 8011cfc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011cfe:	07d9      	lsls	r1, r3, #31
 8011d00:	d405      	bmi.n	8011d0e <_vfiprintf_r+0x32>
 8011d02:	89ab      	ldrh	r3, [r5, #12]
 8011d04:	059a      	lsls	r2, r3, #22
 8011d06:	d402      	bmi.n	8011d0e <_vfiprintf_r+0x32>
 8011d08:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011d0a:	f7ff ff8a 	bl	8011c22 <__retarget_lock_acquire_recursive>
 8011d0e:	89ab      	ldrh	r3, [r5, #12]
 8011d10:	071b      	lsls	r3, r3, #28
 8011d12:	d501      	bpl.n	8011d18 <_vfiprintf_r+0x3c>
 8011d14:	692b      	ldr	r3, [r5, #16]
 8011d16:	b9eb      	cbnz	r3, 8011d54 <_vfiprintf_r+0x78>
 8011d18:	4629      	mov	r1, r5
 8011d1a:	4630      	mov	r0, r6
 8011d1c:	f000 f96e 	bl	8011ffc <__swsetup_r>
 8011d20:	b1c0      	cbz	r0, 8011d54 <_vfiprintf_r+0x78>
 8011d22:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011d24:	07dc      	lsls	r4, r3, #31
 8011d26:	d50e      	bpl.n	8011d46 <_vfiprintf_r+0x6a>
 8011d28:	f04f 30ff 	mov.w	r0, #4294967295
 8011d2c:	b01d      	add	sp, #116	; 0x74
 8011d2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011d32:	4b7b      	ldr	r3, [pc, #492]	; (8011f20 <_vfiprintf_r+0x244>)
 8011d34:	429d      	cmp	r5, r3
 8011d36:	d101      	bne.n	8011d3c <_vfiprintf_r+0x60>
 8011d38:	68b5      	ldr	r5, [r6, #8]
 8011d3a:	e7df      	b.n	8011cfc <_vfiprintf_r+0x20>
 8011d3c:	4b79      	ldr	r3, [pc, #484]	; (8011f24 <_vfiprintf_r+0x248>)
 8011d3e:	429d      	cmp	r5, r3
 8011d40:	bf08      	it	eq
 8011d42:	68f5      	ldreq	r5, [r6, #12]
 8011d44:	e7da      	b.n	8011cfc <_vfiprintf_r+0x20>
 8011d46:	89ab      	ldrh	r3, [r5, #12]
 8011d48:	0598      	lsls	r0, r3, #22
 8011d4a:	d4ed      	bmi.n	8011d28 <_vfiprintf_r+0x4c>
 8011d4c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011d4e:	f7ff ff69 	bl	8011c24 <__retarget_lock_release_recursive>
 8011d52:	e7e9      	b.n	8011d28 <_vfiprintf_r+0x4c>
 8011d54:	2300      	movs	r3, #0
 8011d56:	9309      	str	r3, [sp, #36]	; 0x24
 8011d58:	2320      	movs	r3, #32
 8011d5a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8011d5e:	2330      	movs	r3, #48	; 0x30
 8011d60:	f04f 0901 	mov.w	r9, #1
 8011d64:	f8cd 800c 	str.w	r8, [sp, #12]
 8011d68:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8011f28 <_vfiprintf_r+0x24c>
 8011d6c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8011d70:	4623      	mov	r3, r4
 8011d72:	469a      	mov	sl, r3
 8011d74:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011d78:	b10a      	cbz	r2, 8011d7e <_vfiprintf_r+0xa2>
 8011d7a:	2a25      	cmp	r2, #37	; 0x25
 8011d7c:	d1f9      	bne.n	8011d72 <_vfiprintf_r+0x96>
 8011d7e:	ebba 0b04 	subs.w	fp, sl, r4
 8011d82:	d00b      	beq.n	8011d9c <_vfiprintf_r+0xc0>
 8011d84:	465b      	mov	r3, fp
 8011d86:	4622      	mov	r2, r4
 8011d88:	4629      	mov	r1, r5
 8011d8a:	4630      	mov	r0, r6
 8011d8c:	f7ff ff94 	bl	8011cb8 <__sfputs_r>
 8011d90:	3001      	adds	r0, #1
 8011d92:	f000 80aa 	beq.w	8011eea <_vfiprintf_r+0x20e>
 8011d96:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011d98:	445a      	add	r2, fp
 8011d9a:	9209      	str	r2, [sp, #36]	; 0x24
 8011d9c:	f89a 3000 	ldrb.w	r3, [sl]
 8011da0:	2b00      	cmp	r3, #0
 8011da2:	f000 80a2 	beq.w	8011eea <_vfiprintf_r+0x20e>
 8011da6:	2300      	movs	r3, #0
 8011da8:	f04f 32ff 	mov.w	r2, #4294967295
 8011dac:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011db0:	f10a 0a01 	add.w	sl, sl, #1
 8011db4:	9304      	str	r3, [sp, #16]
 8011db6:	9307      	str	r3, [sp, #28]
 8011db8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8011dbc:	931a      	str	r3, [sp, #104]	; 0x68
 8011dbe:	4654      	mov	r4, sl
 8011dc0:	2205      	movs	r2, #5
 8011dc2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011dc6:	4858      	ldr	r0, [pc, #352]	; (8011f28 <_vfiprintf_r+0x24c>)
 8011dc8:	f7ff f9c0 	bl	801114c <memchr>
 8011dcc:	9a04      	ldr	r2, [sp, #16]
 8011dce:	b9d8      	cbnz	r0, 8011e08 <_vfiprintf_r+0x12c>
 8011dd0:	06d1      	lsls	r1, r2, #27
 8011dd2:	bf44      	itt	mi
 8011dd4:	2320      	movmi	r3, #32
 8011dd6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011dda:	0713      	lsls	r3, r2, #28
 8011ddc:	bf44      	itt	mi
 8011dde:	232b      	movmi	r3, #43	; 0x2b
 8011de0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011de4:	f89a 3000 	ldrb.w	r3, [sl]
 8011de8:	2b2a      	cmp	r3, #42	; 0x2a
 8011dea:	d015      	beq.n	8011e18 <_vfiprintf_r+0x13c>
 8011dec:	4654      	mov	r4, sl
 8011dee:	2000      	movs	r0, #0
 8011df0:	f04f 0c0a 	mov.w	ip, #10
 8011df4:	9a07      	ldr	r2, [sp, #28]
 8011df6:	4621      	mov	r1, r4
 8011df8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011dfc:	3b30      	subs	r3, #48	; 0x30
 8011dfe:	2b09      	cmp	r3, #9
 8011e00:	d94e      	bls.n	8011ea0 <_vfiprintf_r+0x1c4>
 8011e02:	b1b0      	cbz	r0, 8011e32 <_vfiprintf_r+0x156>
 8011e04:	9207      	str	r2, [sp, #28]
 8011e06:	e014      	b.n	8011e32 <_vfiprintf_r+0x156>
 8011e08:	eba0 0308 	sub.w	r3, r0, r8
 8011e0c:	fa09 f303 	lsl.w	r3, r9, r3
 8011e10:	4313      	orrs	r3, r2
 8011e12:	46a2      	mov	sl, r4
 8011e14:	9304      	str	r3, [sp, #16]
 8011e16:	e7d2      	b.n	8011dbe <_vfiprintf_r+0xe2>
 8011e18:	9b03      	ldr	r3, [sp, #12]
 8011e1a:	1d19      	adds	r1, r3, #4
 8011e1c:	681b      	ldr	r3, [r3, #0]
 8011e1e:	9103      	str	r1, [sp, #12]
 8011e20:	2b00      	cmp	r3, #0
 8011e22:	bfbb      	ittet	lt
 8011e24:	425b      	neglt	r3, r3
 8011e26:	f042 0202 	orrlt.w	r2, r2, #2
 8011e2a:	9307      	strge	r3, [sp, #28]
 8011e2c:	9307      	strlt	r3, [sp, #28]
 8011e2e:	bfb8      	it	lt
 8011e30:	9204      	strlt	r2, [sp, #16]
 8011e32:	7823      	ldrb	r3, [r4, #0]
 8011e34:	2b2e      	cmp	r3, #46	; 0x2e
 8011e36:	d10c      	bne.n	8011e52 <_vfiprintf_r+0x176>
 8011e38:	7863      	ldrb	r3, [r4, #1]
 8011e3a:	2b2a      	cmp	r3, #42	; 0x2a
 8011e3c:	d135      	bne.n	8011eaa <_vfiprintf_r+0x1ce>
 8011e3e:	9b03      	ldr	r3, [sp, #12]
 8011e40:	3402      	adds	r4, #2
 8011e42:	1d1a      	adds	r2, r3, #4
 8011e44:	681b      	ldr	r3, [r3, #0]
 8011e46:	9203      	str	r2, [sp, #12]
 8011e48:	2b00      	cmp	r3, #0
 8011e4a:	bfb8      	it	lt
 8011e4c:	f04f 33ff 	movlt.w	r3, #4294967295
 8011e50:	9305      	str	r3, [sp, #20]
 8011e52:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8011f38 <_vfiprintf_r+0x25c>
 8011e56:	2203      	movs	r2, #3
 8011e58:	4650      	mov	r0, sl
 8011e5a:	7821      	ldrb	r1, [r4, #0]
 8011e5c:	f7ff f976 	bl	801114c <memchr>
 8011e60:	b140      	cbz	r0, 8011e74 <_vfiprintf_r+0x198>
 8011e62:	2340      	movs	r3, #64	; 0x40
 8011e64:	eba0 000a 	sub.w	r0, r0, sl
 8011e68:	fa03 f000 	lsl.w	r0, r3, r0
 8011e6c:	9b04      	ldr	r3, [sp, #16]
 8011e6e:	3401      	adds	r4, #1
 8011e70:	4303      	orrs	r3, r0
 8011e72:	9304      	str	r3, [sp, #16]
 8011e74:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011e78:	2206      	movs	r2, #6
 8011e7a:	482c      	ldr	r0, [pc, #176]	; (8011f2c <_vfiprintf_r+0x250>)
 8011e7c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8011e80:	f7ff f964 	bl	801114c <memchr>
 8011e84:	2800      	cmp	r0, #0
 8011e86:	d03f      	beq.n	8011f08 <_vfiprintf_r+0x22c>
 8011e88:	4b29      	ldr	r3, [pc, #164]	; (8011f30 <_vfiprintf_r+0x254>)
 8011e8a:	bb1b      	cbnz	r3, 8011ed4 <_vfiprintf_r+0x1f8>
 8011e8c:	9b03      	ldr	r3, [sp, #12]
 8011e8e:	3307      	adds	r3, #7
 8011e90:	f023 0307 	bic.w	r3, r3, #7
 8011e94:	3308      	adds	r3, #8
 8011e96:	9303      	str	r3, [sp, #12]
 8011e98:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011e9a:	443b      	add	r3, r7
 8011e9c:	9309      	str	r3, [sp, #36]	; 0x24
 8011e9e:	e767      	b.n	8011d70 <_vfiprintf_r+0x94>
 8011ea0:	460c      	mov	r4, r1
 8011ea2:	2001      	movs	r0, #1
 8011ea4:	fb0c 3202 	mla	r2, ip, r2, r3
 8011ea8:	e7a5      	b.n	8011df6 <_vfiprintf_r+0x11a>
 8011eaa:	2300      	movs	r3, #0
 8011eac:	f04f 0c0a 	mov.w	ip, #10
 8011eb0:	4619      	mov	r1, r3
 8011eb2:	3401      	adds	r4, #1
 8011eb4:	9305      	str	r3, [sp, #20]
 8011eb6:	4620      	mov	r0, r4
 8011eb8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011ebc:	3a30      	subs	r2, #48	; 0x30
 8011ebe:	2a09      	cmp	r2, #9
 8011ec0:	d903      	bls.n	8011eca <_vfiprintf_r+0x1ee>
 8011ec2:	2b00      	cmp	r3, #0
 8011ec4:	d0c5      	beq.n	8011e52 <_vfiprintf_r+0x176>
 8011ec6:	9105      	str	r1, [sp, #20]
 8011ec8:	e7c3      	b.n	8011e52 <_vfiprintf_r+0x176>
 8011eca:	4604      	mov	r4, r0
 8011ecc:	2301      	movs	r3, #1
 8011ece:	fb0c 2101 	mla	r1, ip, r1, r2
 8011ed2:	e7f0      	b.n	8011eb6 <_vfiprintf_r+0x1da>
 8011ed4:	ab03      	add	r3, sp, #12
 8011ed6:	9300      	str	r3, [sp, #0]
 8011ed8:	462a      	mov	r2, r5
 8011eda:	4630      	mov	r0, r6
 8011edc:	4b15      	ldr	r3, [pc, #84]	; (8011f34 <_vfiprintf_r+0x258>)
 8011ede:	a904      	add	r1, sp, #16
 8011ee0:	f7fd feba 	bl	800fc58 <_printf_float>
 8011ee4:	4607      	mov	r7, r0
 8011ee6:	1c78      	adds	r0, r7, #1
 8011ee8:	d1d6      	bne.n	8011e98 <_vfiprintf_r+0x1bc>
 8011eea:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011eec:	07d9      	lsls	r1, r3, #31
 8011eee:	d405      	bmi.n	8011efc <_vfiprintf_r+0x220>
 8011ef0:	89ab      	ldrh	r3, [r5, #12]
 8011ef2:	059a      	lsls	r2, r3, #22
 8011ef4:	d402      	bmi.n	8011efc <_vfiprintf_r+0x220>
 8011ef6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011ef8:	f7ff fe94 	bl	8011c24 <__retarget_lock_release_recursive>
 8011efc:	89ab      	ldrh	r3, [r5, #12]
 8011efe:	065b      	lsls	r3, r3, #25
 8011f00:	f53f af12 	bmi.w	8011d28 <_vfiprintf_r+0x4c>
 8011f04:	9809      	ldr	r0, [sp, #36]	; 0x24
 8011f06:	e711      	b.n	8011d2c <_vfiprintf_r+0x50>
 8011f08:	ab03      	add	r3, sp, #12
 8011f0a:	9300      	str	r3, [sp, #0]
 8011f0c:	462a      	mov	r2, r5
 8011f0e:	4630      	mov	r0, r6
 8011f10:	4b08      	ldr	r3, [pc, #32]	; (8011f34 <_vfiprintf_r+0x258>)
 8011f12:	a904      	add	r1, sp, #16
 8011f14:	f7fe f93c 	bl	8010190 <_printf_i>
 8011f18:	e7e4      	b.n	8011ee4 <_vfiprintf_r+0x208>
 8011f1a:	bf00      	nop
 8011f1c:	0801399c 	.word	0x0801399c
 8011f20:	080139bc 	.word	0x080139bc
 8011f24:	0801397c 	.word	0x0801397c
 8011f28:	08013824 	.word	0x08013824
 8011f2c:	0801382e 	.word	0x0801382e
 8011f30:	0800fc59 	.word	0x0800fc59
 8011f34:	08011cb9 	.word	0x08011cb9
 8011f38:	0801382a 	.word	0x0801382a

08011f3c <__swbuf_r>:
 8011f3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011f3e:	460e      	mov	r6, r1
 8011f40:	4614      	mov	r4, r2
 8011f42:	4605      	mov	r5, r0
 8011f44:	b118      	cbz	r0, 8011f4e <__swbuf_r+0x12>
 8011f46:	6983      	ldr	r3, [r0, #24]
 8011f48:	b90b      	cbnz	r3, 8011f4e <__swbuf_r+0x12>
 8011f4a:	f000 f9e7 	bl	801231c <__sinit>
 8011f4e:	4b21      	ldr	r3, [pc, #132]	; (8011fd4 <__swbuf_r+0x98>)
 8011f50:	429c      	cmp	r4, r3
 8011f52:	d12b      	bne.n	8011fac <__swbuf_r+0x70>
 8011f54:	686c      	ldr	r4, [r5, #4]
 8011f56:	69a3      	ldr	r3, [r4, #24]
 8011f58:	60a3      	str	r3, [r4, #8]
 8011f5a:	89a3      	ldrh	r3, [r4, #12]
 8011f5c:	071a      	lsls	r2, r3, #28
 8011f5e:	d52f      	bpl.n	8011fc0 <__swbuf_r+0x84>
 8011f60:	6923      	ldr	r3, [r4, #16]
 8011f62:	b36b      	cbz	r3, 8011fc0 <__swbuf_r+0x84>
 8011f64:	6923      	ldr	r3, [r4, #16]
 8011f66:	6820      	ldr	r0, [r4, #0]
 8011f68:	b2f6      	uxtb	r6, r6
 8011f6a:	1ac0      	subs	r0, r0, r3
 8011f6c:	6963      	ldr	r3, [r4, #20]
 8011f6e:	4637      	mov	r7, r6
 8011f70:	4283      	cmp	r3, r0
 8011f72:	dc04      	bgt.n	8011f7e <__swbuf_r+0x42>
 8011f74:	4621      	mov	r1, r4
 8011f76:	4628      	mov	r0, r5
 8011f78:	f000 f93c 	bl	80121f4 <_fflush_r>
 8011f7c:	bb30      	cbnz	r0, 8011fcc <__swbuf_r+0x90>
 8011f7e:	68a3      	ldr	r3, [r4, #8]
 8011f80:	3001      	adds	r0, #1
 8011f82:	3b01      	subs	r3, #1
 8011f84:	60a3      	str	r3, [r4, #8]
 8011f86:	6823      	ldr	r3, [r4, #0]
 8011f88:	1c5a      	adds	r2, r3, #1
 8011f8a:	6022      	str	r2, [r4, #0]
 8011f8c:	701e      	strb	r6, [r3, #0]
 8011f8e:	6963      	ldr	r3, [r4, #20]
 8011f90:	4283      	cmp	r3, r0
 8011f92:	d004      	beq.n	8011f9e <__swbuf_r+0x62>
 8011f94:	89a3      	ldrh	r3, [r4, #12]
 8011f96:	07db      	lsls	r3, r3, #31
 8011f98:	d506      	bpl.n	8011fa8 <__swbuf_r+0x6c>
 8011f9a:	2e0a      	cmp	r6, #10
 8011f9c:	d104      	bne.n	8011fa8 <__swbuf_r+0x6c>
 8011f9e:	4621      	mov	r1, r4
 8011fa0:	4628      	mov	r0, r5
 8011fa2:	f000 f927 	bl	80121f4 <_fflush_r>
 8011fa6:	b988      	cbnz	r0, 8011fcc <__swbuf_r+0x90>
 8011fa8:	4638      	mov	r0, r7
 8011faa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011fac:	4b0a      	ldr	r3, [pc, #40]	; (8011fd8 <__swbuf_r+0x9c>)
 8011fae:	429c      	cmp	r4, r3
 8011fb0:	d101      	bne.n	8011fb6 <__swbuf_r+0x7a>
 8011fb2:	68ac      	ldr	r4, [r5, #8]
 8011fb4:	e7cf      	b.n	8011f56 <__swbuf_r+0x1a>
 8011fb6:	4b09      	ldr	r3, [pc, #36]	; (8011fdc <__swbuf_r+0xa0>)
 8011fb8:	429c      	cmp	r4, r3
 8011fba:	bf08      	it	eq
 8011fbc:	68ec      	ldreq	r4, [r5, #12]
 8011fbe:	e7ca      	b.n	8011f56 <__swbuf_r+0x1a>
 8011fc0:	4621      	mov	r1, r4
 8011fc2:	4628      	mov	r0, r5
 8011fc4:	f000 f81a 	bl	8011ffc <__swsetup_r>
 8011fc8:	2800      	cmp	r0, #0
 8011fca:	d0cb      	beq.n	8011f64 <__swbuf_r+0x28>
 8011fcc:	f04f 37ff 	mov.w	r7, #4294967295
 8011fd0:	e7ea      	b.n	8011fa8 <__swbuf_r+0x6c>
 8011fd2:	bf00      	nop
 8011fd4:	0801399c 	.word	0x0801399c
 8011fd8:	080139bc 	.word	0x080139bc
 8011fdc:	0801397c 	.word	0x0801397c

08011fe0 <__ascii_wctomb>:
 8011fe0:	4603      	mov	r3, r0
 8011fe2:	4608      	mov	r0, r1
 8011fe4:	b141      	cbz	r1, 8011ff8 <__ascii_wctomb+0x18>
 8011fe6:	2aff      	cmp	r2, #255	; 0xff
 8011fe8:	d904      	bls.n	8011ff4 <__ascii_wctomb+0x14>
 8011fea:	228a      	movs	r2, #138	; 0x8a
 8011fec:	f04f 30ff 	mov.w	r0, #4294967295
 8011ff0:	601a      	str	r2, [r3, #0]
 8011ff2:	4770      	bx	lr
 8011ff4:	2001      	movs	r0, #1
 8011ff6:	700a      	strb	r2, [r1, #0]
 8011ff8:	4770      	bx	lr
	...

08011ffc <__swsetup_r>:
 8011ffc:	4b32      	ldr	r3, [pc, #200]	; (80120c8 <__swsetup_r+0xcc>)
 8011ffe:	b570      	push	{r4, r5, r6, lr}
 8012000:	681d      	ldr	r5, [r3, #0]
 8012002:	4606      	mov	r6, r0
 8012004:	460c      	mov	r4, r1
 8012006:	b125      	cbz	r5, 8012012 <__swsetup_r+0x16>
 8012008:	69ab      	ldr	r3, [r5, #24]
 801200a:	b913      	cbnz	r3, 8012012 <__swsetup_r+0x16>
 801200c:	4628      	mov	r0, r5
 801200e:	f000 f985 	bl	801231c <__sinit>
 8012012:	4b2e      	ldr	r3, [pc, #184]	; (80120cc <__swsetup_r+0xd0>)
 8012014:	429c      	cmp	r4, r3
 8012016:	d10f      	bne.n	8012038 <__swsetup_r+0x3c>
 8012018:	686c      	ldr	r4, [r5, #4]
 801201a:	89a3      	ldrh	r3, [r4, #12]
 801201c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8012020:	0719      	lsls	r1, r3, #28
 8012022:	d42c      	bmi.n	801207e <__swsetup_r+0x82>
 8012024:	06dd      	lsls	r5, r3, #27
 8012026:	d411      	bmi.n	801204c <__swsetup_r+0x50>
 8012028:	2309      	movs	r3, #9
 801202a:	6033      	str	r3, [r6, #0]
 801202c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8012030:	f04f 30ff 	mov.w	r0, #4294967295
 8012034:	81a3      	strh	r3, [r4, #12]
 8012036:	e03e      	b.n	80120b6 <__swsetup_r+0xba>
 8012038:	4b25      	ldr	r3, [pc, #148]	; (80120d0 <__swsetup_r+0xd4>)
 801203a:	429c      	cmp	r4, r3
 801203c:	d101      	bne.n	8012042 <__swsetup_r+0x46>
 801203e:	68ac      	ldr	r4, [r5, #8]
 8012040:	e7eb      	b.n	801201a <__swsetup_r+0x1e>
 8012042:	4b24      	ldr	r3, [pc, #144]	; (80120d4 <__swsetup_r+0xd8>)
 8012044:	429c      	cmp	r4, r3
 8012046:	bf08      	it	eq
 8012048:	68ec      	ldreq	r4, [r5, #12]
 801204a:	e7e6      	b.n	801201a <__swsetup_r+0x1e>
 801204c:	0758      	lsls	r0, r3, #29
 801204e:	d512      	bpl.n	8012076 <__swsetup_r+0x7a>
 8012050:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8012052:	b141      	cbz	r1, 8012066 <__swsetup_r+0x6a>
 8012054:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8012058:	4299      	cmp	r1, r3
 801205a:	d002      	beq.n	8012062 <__swsetup_r+0x66>
 801205c:	4630      	mov	r0, r6
 801205e:	f7fd fcb7 	bl	800f9d0 <_free_r>
 8012062:	2300      	movs	r3, #0
 8012064:	6363      	str	r3, [r4, #52]	; 0x34
 8012066:	89a3      	ldrh	r3, [r4, #12]
 8012068:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801206c:	81a3      	strh	r3, [r4, #12]
 801206e:	2300      	movs	r3, #0
 8012070:	6063      	str	r3, [r4, #4]
 8012072:	6923      	ldr	r3, [r4, #16]
 8012074:	6023      	str	r3, [r4, #0]
 8012076:	89a3      	ldrh	r3, [r4, #12]
 8012078:	f043 0308 	orr.w	r3, r3, #8
 801207c:	81a3      	strh	r3, [r4, #12]
 801207e:	6923      	ldr	r3, [r4, #16]
 8012080:	b94b      	cbnz	r3, 8012096 <__swsetup_r+0x9a>
 8012082:	89a3      	ldrh	r3, [r4, #12]
 8012084:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8012088:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801208c:	d003      	beq.n	8012096 <__swsetup_r+0x9a>
 801208e:	4621      	mov	r1, r4
 8012090:	4630      	mov	r0, r6
 8012092:	f000 fa05 	bl	80124a0 <__smakebuf_r>
 8012096:	89a0      	ldrh	r0, [r4, #12]
 8012098:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801209c:	f010 0301 	ands.w	r3, r0, #1
 80120a0:	d00a      	beq.n	80120b8 <__swsetup_r+0xbc>
 80120a2:	2300      	movs	r3, #0
 80120a4:	60a3      	str	r3, [r4, #8]
 80120a6:	6963      	ldr	r3, [r4, #20]
 80120a8:	425b      	negs	r3, r3
 80120aa:	61a3      	str	r3, [r4, #24]
 80120ac:	6923      	ldr	r3, [r4, #16]
 80120ae:	b943      	cbnz	r3, 80120c2 <__swsetup_r+0xc6>
 80120b0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80120b4:	d1ba      	bne.n	801202c <__swsetup_r+0x30>
 80120b6:	bd70      	pop	{r4, r5, r6, pc}
 80120b8:	0781      	lsls	r1, r0, #30
 80120ba:	bf58      	it	pl
 80120bc:	6963      	ldrpl	r3, [r4, #20]
 80120be:	60a3      	str	r3, [r4, #8]
 80120c0:	e7f4      	b.n	80120ac <__swsetup_r+0xb0>
 80120c2:	2000      	movs	r0, #0
 80120c4:	e7f7      	b.n	80120b6 <__swsetup_r+0xba>
 80120c6:	bf00      	nop
 80120c8:	200001a8 	.word	0x200001a8
 80120cc:	0801399c 	.word	0x0801399c
 80120d0:	080139bc 	.word	0x080139bc
 80120d4:	0801397c 	.word	0x0801397c

080120d8 <abort>:
 80120d8:	2006      	movs	r0, #6
 80120da:	b508      	push	{r3, lr}
 80120dc:	f000 fa48 	bl	8012570 <raise>
 80120e0:	2001      	movs	r0, #1
 80120e2:	f7f2 ff4a 	bl	8004f7a <_exit>
	...

080120e8 <__sflush_r>:
 80120e8:	898a      	ldrh	r2, [r1, #12]
 80120ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80120ee:	4605      	mov	r5, r0
 80120f0:	0710      	lsls	r0, r2, #28
 80120f2:	460c      	mov	r4, r1
 80120f4:	d458      	bmi.n	80121a8 <__sflush_r+0xc0>
 80120f6:	684b      	ldr	r3, [r1, #4]
 80120f8:	2b00      	cmp	r3, #0
 80120fa:	dc05      	bgt.n	8012108 <__sflush_r+0x20>
 80120fc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80120fe:	2b00      	cmp	r3, #0
 8012100:	dc02      	bgt.n	8012108 <__sflush_r+0x20>
 8012102:	2000      	movs	r0, #0
 8012104:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012108:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801210a:	2e00      	cmp	r6, #0
 801210c:	d0f9      	beq.n	8012102 <__sflush_r+0x1a>
 801210e:	2300      	movs	r3, #0
 8012110:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8012114:	682f      	ldr	r7, [r5, #0]
 8012116:	602b      	str	r3, [r5, #0]
 8012118:	d032      	beq.n	8012180 <__sflush_r+0x98>
 801211a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801211c:	89a3      	ldrh	r3, [r4, #12]
 801211e:	075a      	lsls	r2, r3, #29
 8012120:	d505      	bpl.n	801212e <__sflush_r+0x46>
 8012122:	6863      	ldr	r3, [r4, #4]
 8012124:	1ac0      	subs	r0, r0, r3
 8012126:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8012128:	b10b      	cbz	r3, 801212e <__sflush_r+0x46>
 801212a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801212c:	1ac0      	subs	r0, r0, r3
 801212e:	2300      	movs	r3, #0
 8012130:	4602      	mov	r2, r0
 8012132:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8012134:	4628      	mov	r0, r5
 8012136:	6a21      	ldr	r1, [r4, #32]
 8012138:	47b0      	blx	r6
 801213a:	1c43      	adds	r3, r0, #1
 801213c:	89a3      	ldrh	r3, [r4, #12]
 801213e:	d106      	bne.n	801214e <__sflush_r+0x66>
 8012140:	6829      	ldr	r1, [r5, #0]
 8012142:	291d      	cmp	r1, #29
 8012144:	d82c      	bhi.n	80121a0 <__sflush_r+0xb8>
 8012146:	4a2a      	ldr	r2, [pc, #168]	; (80121f0 <__sflush_r+0x108>)
 8012148:	40ca      	lsrs	r2, r1
 801214a:	07d6      	lsls	r6, r2, #31
 801214c:	d528      	bpl.n	80121a0 <__sflush_r+0xb8>
 801214e:	2200      	movs	r2, #0
 8012150:	6062      	str	r2, [r4, #4]
 8012152:	6922      	ldr	r2, [r4, #16]
 8012154:	04d9      	lsls	r1, r3, #19
 8012156:	6022      	str	r2, [r4, #0]
 8012158:	d504      	bpl.n	8012164 <__sflush_r+0x7c>
 801215a:	1c42      	adds	r2, r0, #1
 801215c:	d101      	bne.n	8012162 <__sflush_r+0x7a>
 801215e:	682b      	ldr	r3, [r5, #0]
 8012160:	b903      	cbnz	r3, 8012164 <__sflush_r+0x7c>
 8012162:	6560      	str	r0, [r4, #84]	; 0x54
 8012164:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8012166:	602f      	str	r7, [r5, #0]
 8012168:	2900      	cmp	r1, #0
 801216a:	d0ca      	beq.n	8012102 <__sflush_r+0x1a>
 801216c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8012170:	4299      	cmp	r1, r3
 8012172:	d002      	beq.n	801217a <__sflush_r+0x92>
 8012174:	4628      	mov	r0, r5
 8012176:	f7fd fc2b 	bl	800f9d0 <_free_r>
 801217a:	2000      	movs	r0, #0
 801217c:	6360      	str	r0, [r4, #52]	; 0x34
 801217e:	e7c1      	b.n	8012104 <__sflush_r+0x1c>
 8012180:	6a21      	ldr	r1, [r4, #32]
 8012182:	2301      	movs	r3, #1
 8012184:	4628      	mov	r0, r5
 8012186:	47b0      	blx	r6
 8012188:	1c41      	adds	r1, r0, #1
 801218a:	d1c7      	bne.n	801211c <__sflush_r+0x34>
 801218c:	682b      	ldr	r3, [r5, #0]
 801218e:	2b00      	cmp	r3, #0
 8012190:	d0c4      	beq.n	801211c <__sflush_r+0x34>
 8012192:	2b1d      	cmp	r3, #29
 8012194:	d001      	beq.n	801219a <__sflush_r+0xb2>
 8012196:	2b16      	cmp	r3, #22
 8012198:	d101      	bne.n	801219e <__sflush_r+0xb6>
 801219a:	602f      	str	r7, [r5, #0]
 801219c:	e7b1      	b.n	8012102 <__sflush_r+0x1a>
 801219e:	89a3      	ldrh	r3, [r4, #12]
 80121a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80121a4:	81a3      	strh	r3, [r4, #12]
 80121a6:	e7ad      	b.n	8012104 <__sflush_r+0x1c>
 80121a8:	690f      	ldr	r7, [r1, #16]
 80121aa:	2f00      	cmp	r7, #0
 80121ac:	d0a9      	beq.n	8012102 <__sflush_r+0x1a>
 80121ae:	0793      	lsls	r3, r2, #30
 80121b0:	bf18      	it	ne
 80121b2:	2300      	movne	r3, #0
 80121b4:	680e      	ldr	r6, [r1, #0]
 80121b6:	bf08      	it	eq
 80121b8:	694b      	ldreq	r3, [r1, #20]
 80121ba:	eba6 0807 	sub.w	r8, r6, r7
 80121be:	600f      	str	r7, [r1, #0]
 80121c0:	608b      	str	r3, [r1, #8]
 80121c2:	f1b8 0f00 	cmp.w	r8, #0
 80121c6:	dd9c      	ble.n	8012102 <__sflush_r+0x1a>
 80121c8:	4643      	mov	r3, r8
 80121ca:	463a      	mov	r2, r7
 80121cc:	4628      	mov	r0, r5
 80121ce:	6a21      	ldr	r1, [r4, #32]
 80121d0:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80121d2:	47b0      	blx	r6
 80121d4:	2800      	cmp	r0, #0
 80121d6:	dc06      	bgt.n	80121e6 <__sflush_r+0xfe>
 80121d8:	89a3      	ldrh	r3, [r4, #12]
 80121da:	f04f 30ff 	mov.w	r0, #4294967295
 80121de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80121e2:	81a3      	strh	r3, [r4, #12]
 80121e4:	e78e      	b.n	8012104 <__sflush_r+0x1c>
 80121e6:	4407      	add	r7, r0
 80121e8:	eba8 0800 	sub.w	r8, r8, r0
 80121ec:	e7e9      	b.n	80121c2 <__sflush_r+0xda>
 80121ee:	bf00      	nop
 80121f0:	20400001 	.word	0x20400001

080121f4 <_fflush_r>:
 80121f4:	b538      	push	{r3, r4, r5, lr}
 80121f6:	690b      	ldr	r3, [r1, #16]
 80121f8:	4605      	mov	r5, r0
 80121fa:	460c      	mov	r4, r1
 80121fc:	b913      	cbnz	r3, 8012204 <_fflush_r+0x10>
 80121fe:	2500      	movs	r5, #0
 8012200:	4628      	mov	r0, r5
 8012202:	bd38      	pop	{r3, r4, r5, pc}
 8012204:	b118      	cbz	r0, 801220e <_fflush_r+0x1a>
 8012206:	6983      	ldr	r3, [r0, #24]
 8012208:	b90b      	cbnz	r3, 801220e <_fflush_r+0x1a>
 801220a:	f000 f887 	bl	801231c <__sinit>
 801220e:	4b14      	ldr	r3, [pc, #80]	; (8012260 <_fflush_r+0x6c>)
 8012210:	429c      	cmp	r4, r3
 8012212:	d11b      	bne.n	801224c <_fflush_r+0x58>
 8012214:	686c      	ldr	r4, [r5, #4]
 8012216:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801221a:	2b00      	cmp	r3, #0
 801221c:	d0ef      	beq.n	80121fe <_fflush_r+0xa>
 801221e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8012220:	07d0      	lsls	r0, r2, #31
 8012222:	d404      	bmi.n	801222e <_fflush_r+0x3a>
 8012224:	0599      	lsls	r1, r3, #22
 8012226:	d402      	bmi.n	801222e <_fflush_r+0x3a>
 8012228:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801222a:	f7ff fcfa 	bl	8011c22 <__retarget_lock_acquire_recursive>
 801222e:	4628      	mov	r0, r5
 8012230:	4621      	mov	r1, r4
 8012232:	f7ff ff59 	bl	80120e8 <__sflush_r>
 8012236:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8012238:	4605      	mov	r5, r0
 801223a:	07da      	lsls	r2, r3, #31
 801223c:	d4e0      	bmi.n	8012200 <_fflush_r+0xc>
 801223e:	89a3      	ldrh	r3, [r4, #12]
 8012240:	059b      	lsls	r3, r3, #22
 8012242:	d4dd      	bmi.n	8012200 <_fflush_r+0xc>
 8012244:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8012246:	f7ff fced 	bl	8011c24 <__retarget_lock_release_recursive>
 801224a:	e7d9      	b.n	8012200 <_fflush_r+0xc>
 801224c:	4b05      	ldr	r3, [pc, #20]	; (8012264 <_fflush_r+0x70>)
 801224e:	429c      	cmp	r4, r3
 8012250:	d101      	bne.n	8012256 <_fflush_r+0x62>
 8012252:	68ac      	ldr	r4, [r5, #8]
 8012254:	e7df      	b.n	8012216 <_fflush_r+0x22>
 8012256:	4b04      	ldr	r3, [pc, #16]	; (8012268 <_fflush_r+0x74>)
 8012258:	429c      	cmp	r4, r3
 801225a:	bf08      	it	eq
 801225c:	68ec      	ldreq	r4, [r5, #12]
 801225e:	e7da      	b.n	8012216 <_fflush_r+0x22>
 8012260:	0801399c 	.word	0x0801399c
 8012264:	080139bc 	.word	0x080139bc
 8012268:	0801397c 	.word	0x0801397c

0801226c <std>:
 801226c:	2300      	movs	r3, #0
 801226e:	b510      	push	{r4, lr}
 8012270:	4604      	mov	r4, r0
 8012272:	e9c0 3300 	strd	r3, r3, [r0]
 8012276:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801227a:	6083      	str	r3, [r0, #8]
 801227c:	8181      	strh	r1, [r0, #12]
 801227e:	6643      	str	r3, [r0, #100]	; 0x64
 8012280:	81c2      	strh	r2, [r0, #14]
 8012282:	6183      	str	r3, [r0, #24]
 8012284:	4619      	mov	r1, r3
 8012286:	2208      	movs	r2, #8
 8012288:	305c      	adds	r0, #92	; 0x5c
 801228a:	f7fd fb99 	bl	800f9c0 <memset>
 801228e:	4b05      	ldr	r3, [pc, #20]	; (80122a4 <std+0x38>)
 8012290:	6224      	str	r4, [r4, #32]
 8012292:	6263      	str	r3, [r4, #36]	; 0x24
 8012294:	4b04      	ldr	r3, [pc, #16]	; (80122a8 <std+0x3c>)
 8012296:	62a3      	str	r3, [r4, #40]	; 0x28
 8012298:	4b04      	ldr	r3, [pc, #16]	; (80122ac <std+0x40>)
 801229a:	62e3      	str	r3, [r4, #44]	; 0x2c
 801229c:	4b04      	ldr	r3, [pc, #16]	; (80122b0 <std+0x44>)
 801229e:	6323      	str	r3, [r4, #48]	; 0x30
 80122a0:	bd10      	pop	{r4, pc}
 80122a2:	bf00      	nop
 80122a4:	080125a9 	.word	0x080125a9
 80122a8:	080125cb 	.word	0x080125cb
 80122ac:	08012603 	.word	0x08012603
 80122b0:	08012627 	.word	0x08012627

080122b4 <_cleanup_r>:
 80122b4:	4901      	ldr	r1, [pc, #4]	; (80122bc <_cleanup_r+0x8>)
 80122b6:	f000 b8af 	b.w	8012418 <_fwalk_reent>
 80122ba:	bf00      	nop
 80122bc:	080121f5 	.word	0x080121f5

080122c0 <__sfmoreglue>:
 80122c0:	b570      	push	{r4, r5, r6, lr}
 80122c2:	2568      	movs	r5, #104	; 0x68
 80122c4:	1e4a      	subs	r2, r1, #1
 80122c6:	4355      	muls	r5, r2
 80122c8:	460e      	mov	r6, r1
 80122ca:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80122ce:	f7fd fbcb 	bl	800fa68 <_malloc_r>
 80122d2:	4604      	mov	r4, r0
 80122d4:	b140      	cbz	r0, 80122e8 <__sfmoreglue+0x28>
 80122d6:	2100      	movs	r1, #0
 80122d8:	e9c0 1600 	strd	r1, r6, [r0]
 80122dc:	300c      	adds	r0, #12
 80122de:	60a0      	str	r0, [r4, #8]
 80122e0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80122e4:	f7fd fb6c 	bl	800f9c0 <memset>
 80122e8:	4620      	mov	r0, r4
 80122ea:	bd70      	pop	{r4, r5, r6, pc}

080122ec <__sfp_lock_acquire>:
 80122ec:	4801      	ldr	r0, [pc, #4]	; (80122f4 <__sfp_lock_acquire+0x8>)
 80122ee:	f7ff bc98 	b.w	8011c22 <__retarget_lock_acquire_recursive>
 80122f2:	bf00      	nop
 80122f4:	2000229c 	.word	0x2000229c

080122f8 <__sfp_lock_release>:
 80122f8:	4801      	ldr	r0, [pc, #4]	; (8012300 <__sfp_lock_release+0x8>)
 80122fa:	f7ff bc93 	b.w	8011c24 <__retarget_lock_release_recursive>
 80122fe:	bf00      	nop
 8012300:	2000229c 	.word	0x2000229c

08012304 <__sinit_lock_acquire>:
 8012304:	4801      	ldr	r0, [pc, #4]	; (801230c <__sinit_lock_acquire+0x8>)
 8012306:	f7ff bc8c 	b.w	8011c22 <__retarget_lock_acquire_recursive>
 801230a:	bf00      	nop
 801230c:	20002297 	.word	0x20002297

08012310 <__sinit_lock_release>:
 8012310:	4801      	ldr	r0, [pc, #4]	; (8012318 <__sinit_lock_release+0x8>)
 8012312:	f7ff bc87 	b.w	8011c24 <__retarget_lock_release_recursive>
 8012316:	bf00      	nop
 8012318:	20002297 	.word	0x20002297

0801231c <__sinit>:
 801231c:	b510      	push	{r4, lr}
 801231e:	4604      	mov	r4, r0
 8012320:	f7ff fff0 	bl	8012304 <__sinit_lock_acquire>
 8012324:	69a3      	ldr	r3, [r4, #24]
 8012326:	b11b      	cbz	r3, 8012330 <__sinit+0x14>
 8012328:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801232c:	f7ff bff0 	b.w	8012310 <__sinit_lock_release>
 8012330:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8012334:	6523      	str	r3, [r4, #80]	; 0x50
 8012336:	4b13      	ldr	r3, [pc, #76]	; (8012384 <__sinit+0x68>)
 8012338:	4a13      	ldr	r2, [pc, #76]	; (8012388 <__sinit+0x6c>)
 801233a:	681b      	ldr	r3, [r3, #0]
 801233c:	62a2      	str	r2, [r4, #40]	; 0x28
 801233e:	42a3      	cmp	r3, r4
 8012340:	bf08      	it	eq
 8012342:	2301      	moveq	r3, #1
 8012344:	4620      	mov	r0, r4
 8012346:	bf08      	it	eq
 8012348:	61a3      	streq	r3, [r4, #24]
 801234a:	f000 f81f 	bl	801238c <__sfp>
 801234e:	6060      	str	r0, [r4, #4]
 8012350:	4620      	mov	r0, r4
 8012352:	f000 f81b 	bl	801238c <__sfp>
 8012356:	60a0      	str	r0, [r4, #8]
 8012358:	4620      	mov	r0, r4
 801235a:	f000 f817 	bl	801238c <__sfp>
 801235e:	2200      	movs	r2, #0
 8012360:	2104      	movs	r1, #4
 8012362:	60e0      	str	r0, [r4, #12]
 8012364:	6860      	ldr	r0, [r4, #4]
 8012366:	f7ff ff81 	bl	801226c <std>
 801236a:	2201      	movs	r2, #1
 801236c:	2109      	movs	r1, #9
 801236e:	68a0      	ldr	r0, [r4, #8]
 8012370:	f7ff ff7c 	bl	801226c <std>
 8012374:	2202      	movs	r2, #2
 8012376:	2112      	movs	r1, #18
 8012378:	68e0      	ldr	r0, [r4, #12]
 801237a:	f7ff ff77 	bl	801226c <std>
 801237e:	2301      	movs	r3, #1
 8012380:	61a3      	str	r3, [r4, #24]
 8012382:	e7d1      	b.n	8012328 <__sinit+0xc>
 8012384:	080135f8 	.word	0x080135f8
 8012388:	080122b5 	.word	0x080122b5

0801238c <__sfp>:
 801238c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801238e:	4607      	mov	r7, r0
 8012390:	f7ff ffac 	bl	80122ec <__sfp_lock_acquire>
 8012394:	4b1e      	ldr	r3, [pc, #120]	; (8012410 <__sfp+0x84>)
 8012396:	681e      	ldr	r6, [r3, #0]
 8012398:	69b3      	ldr	r3, [r6, #24]
 801239a:	b913      	cbnz	r3, 80123a2 <__sfp+0x16>
 801239c:	4630      	mov	r0, r6
 801239e:	f7ff ffbd 	bl	801231c <__sinit>
 80123a2:	3648      	adds	r6, #72	; 0x48
 80123a4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80123a8:	3b01      	subs	r3, #1
 80123aa:	d503      	bpl.n	80123b4 <__sfp+0x28>
 80123ac:	6833      	ldr	r3, [r6, #0]
 80123ae:	b30b      	cbz	r3, 80123f4 <__sfp+0x68>
 80123b0:	6836      	ldr	r6, [r6, #0]
 80123b2:	e7f7      	b.n	80123a4 <__sfp+0x18>
 80123b4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80123b8:	b9d5      	cbnz	r5, 80123f0 <__sfp+0x64>
 80123ba:	4b16      	ldr	r3, [pc, #88]	; (8012414 <__sfp+0x88>)
 80123bc:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80123c0:	60e3      	str	r3, [r4, #12]
 80123c2:	6665      	str	r5, [r4, #100]	; 0x64
 80123c4:	f7ff fc2c 	bl	8011c20 <__retarget_lock_init_recursive>
 80123c8:	f7ff ff96 	bl	80122f8 <__sfp_lock_release>
 80123cc:	2208      	movs	r2, #8
 80123ce:	4629      	mov	r1, r5
 80123d0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80123d4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80123d8:	6025      	str	r5, [r4, #0]
 80123da:	61a5      	str	r5, [r4, #24]
 80123dc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80123e0:	f7fd faee 	bl	800f9c0 <memset>
 80123e4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80123e8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80123ec:	4620      	mov	r0, r4
 80123ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80123f0:	3468      	adds	r4, #104	; 0x68
 80123f2:	e7d9      	b.n	80123a8 <__sfp+0x1c>
 80123f4:	2104      	movs	r1, #4
 80123f6:	4638      	mov	r0, r7
 80123f8:	f7ff ff62 	bl	80122c0 <__sfmoreglue>
 80123fc:	4604      	mov	r4, r0
 80123fe:	6030      	str	r0, [r6, #0]
 8012400:	2800      	cmp	r0, #0
 8012402:	d1d5      	bne.n	80123b0 <__sfp+0x24>
 8012404:	f7ff ff78 	bl	80122f8 <__sfp_lock_release>
 8012408:	230c      	movs	r3, #12
 801240a:	603b      	str	r3, [r7, #0]
 801240c:	e7ee      	b.n	80123ec <__sfp+0x60>
 801240e:	bf00      	nop
 8012410:	080135f8 	.word	0x080135f8
 8012414:	ffff0001 	.word	0xffff0001

08012418 <_fwalk_reent>:
 8012418:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801241c:	4606      	mov	r6, r0
 801241e:	4688      	mov	r8, r1
 8012420:	2700      	movs	r7, #0
 8012422:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8012426:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801242a:	f1b9 0901 	subs.w	r9, r9, #1
 801242e:	d505      	bpl.n	801243c <_fwalk_reent+0x24>
 8012430:	6824      	ldr	r4, [r4, #0]
 8012432:	2c00      	cmp	r4, #0
 8012434:	d1f7      	bne.n	8012426 <_fwalk_reent+0xe>
 8012436:	4638      	mov	r0, r7
 8012438:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801243c:	89ab      	ldrh	r3, [r5, #12]
 801243e:	2b01      	cmp	r3, #1
 8012440:	d907      	bls.n	8012452 <_fwalk_reent+0x3a>
 8012442:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8012446:	3301      	adds	r3, #1
 8012448:	d003      	beq.n	8012452 <_fwalk_reent+0x3a>
 801244a:	4629      	mov	r1, r5
 801244c:	4630      	mov	r0, r6
 801244e:	47c0      	blx	r8
 8012450:	4307      	orrs	r7, r0
 8012452:	3568      	adds	r5, #104	; 0x68
 8012454:	e7e9      	b.n	801242a <_fwalk_reent+0x12>

08012456 <__swhatbuf_r>:
 8012456:	b570      	push	{r4, r5, r6, lr}
 8012458:	460e      	mov	r6, r1
 801245a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801245e:	4614      	mov	r4, r2
 8012460:	2900      	cmp	r1, #0
 8012462:	461d      	mov	r5, r3
 8012464:	b096      	sub	sp, #88	; 0x58
 8012466:	da07      	bge.n	8012478 <__swhatbuf_r+0x22>
 8012468:	2300      	movs	r3, #0
 801246a:	602b      	str	r3, [r5, #0]
 801246c:	89b3      	ldrh	r3, [r6, #12]
 801246e:	061a      	lsls	r2, r3, #24
 8012470:	d410      	bmi.n	8012494 <__swhatbuf_r+0x3e>
 8012472:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8012476:	e00e      	b.n	8012496 <__swhatbuf_r+0x40>
 8012478:	466a      	mov	r2, sp
 801247a:	f000 f8fb 	bl	8012674 <_fstat_r>
 801247e:	2800      	cmp	r0, #0
 8012480:	dbf2      	blt.n	8012468 <__swhatbuf_r+0x12>
 8012482:	9a01      	ldr	r2, [sp, #4]
 8012484:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8012488:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801248c:	425a      	negs	r2, r3
 801248e:	415a      	adcs	r2, r3
 8012490:	602a      	str	r2, [r5, #0]
 8012492:	e7ee      	b.n	8012472 <__swhatbuf_r+0x1c>
 8012494:	2340      	movs	r3, #64	; 0x40
 8012496:	2000      	movs	r0, #0
 8012498:	6023      	str	r3, [r4, #0]
 801249a:	b016      	add	sp, #88	; 0x58
 801249c:	bd70      	pop	{r4, r5, r6, pc}
	...

080124a0 <__smakebuf_r>:
 80124a0:	898b      	ldrh	r3, [r1, #12]
 80124a2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80124a4:	079d      	lsls	r5, r3, #30
 80124a6:	4606      	mov	r6, r0
 80124a8:	460c      	mov	r4, r1
 80124aa:	d507      	bpl.n	80124bc <__smakebuf_r+0x1c>
 80124ac:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80124b0:	6023      	str	r3, [r4, #0]
 80124b2:	6123      	str	r3, [r4, #16]
 80124b4:	2301      	movs	r3, #1
 80124b6:	6163      	str	r3, [r4, #20]
 80124b8:	b002      	add	sp, #8
 80124ba:	bd70      	pop	{r4, r5, r6, pc}
 80124bc:	466a      	mov	r2, sp
 80124be:	ab01      	add	r3, sp, #4
 80124c0:	f7ff ffc9 	bl	8012456 <__swhatbuf_r>
 80124c4:	9900      	ldr	r1, [sp, #0]
 80124c6:	4605      	mov	r5, r0
 80124c8:	4630      	mov	r0, r6
 80124ca:	f7fd facd 	bl	800fa68 <_malloc_r>
 80124ce:	b948      	cbnz	r0, 80124e4 <__smakebuf_r+0x44>
 80124d0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80124d4:	059a      	lsls	r2, r3, #22
 80124d6:	d4ef      	bmi.n	80124b8 <__smakebuf_r+0x18>
 80124d8:	f023 0303 	bic.w	r3, r3, #3
 80124dc:	f043 0302 	orr.w	r3, r3, #2
 80124e0:	81a3      	strh	r3, [r4, #12]
 80124e2:	e7e3      	b.n	80124ac <__smakebuf_r+0xc>
 80124e4:	4b0d      	ldr	r3, [pc, #52]	; (801251c <__smakebuf_r+0x7c>)
 80124e6:	62b3      	str	r3, [r6, #40]	; 0x28
 80124e8:	89a3      	ldrh	r3, [r4, #12]
 80124ea:	6020      	str	r0, [r4, #0]
 80124ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80124f0:	81a3      	strh	r3, [r4, #12]
 80124f2:	9b00      	ldr	r3, [sp, #0]
 80124f4:	6120      	str	r0, [r4, #16]
 80124f6:	6163      	str	r3, [r4, #20]
 80124f8:	9b01      	ldr	r3, [sp, #4]
 80124fa:	b15b      	cbz	r3, 8012514 <__smakebuf_r+0x74>
 80124fc:	4630      	mov	r0, r6
 80124fe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012502:	f000 f8c9 	bl	8012698 <_isatty_r>
 8012506:	b128      	cbz	r0, 8012514 <__smakebuf_r+0x74>
 8012508:	89a3      	ldrh	r3, [r4, #12]
 801250a:	f023 0303 	bic.w	r3, r3, #3
 801250e:	f043 0301 	orr.w	r3, r3, #1
 8012512:	81a3      	strh	r3, [r4, #12]
 8012514:	89a0      	ldrh	r0, [r4, #12]
 8012516:	4305      	orrs	r5, r0
 8012518:	81a5      	strh	r5, [r4, #12]
 801251a:	e7cd      	b.n	80124b8 <__smakebuf_r+0x18>
 801251c:	080122b5 	.word	0x080122b5

08012520 <_raise_r>:
 8012520:	291f      	cmp	r1, #31
 8012522:	b538      	push	{r3, r4, r5, lr}
 8012524:	4604      	mov	r4, r0
 8012526:	460d      	mov	r5, r1
 8012528:	d904      	bls.n	8012534 <_raise_r+0x14>
 801252a:	2316      	movs	r3, #22
 801252c:	6003      	str	r3, [r0, #0]
 801252e:	f04f 30ff 	mov.w	r0, #4294967295
 8012532:	bd38      	pop	{r3, r4, r5, pc}
 8012534:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8012536:	b112      	cbz	r2, 801253e <_raise_r+0x1e>
 8012538:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801253c:	b94b      	cbnz	r3, 8012552 <_raise_r+0x32>
 801253e:	4620      	mov	r0, r4
 8012540:	f000 f830 	bl	80125a4 <_getpid_r>
 8012544:	462a      	mov	r2, r5
 8012546:	4601      	mov	r1, r0
 8012548:	4620      	mov	r0, r4
 801254a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801254e:	f000 b817 	b.w	8012580 <_kill_r>
 8012552:	2b01      	cmp	r3, #1
 8012554:	d00a      	beq.n	801256c <_raise_r+0x4c>
 8012556:	1c59      	adds	r1, r3, #1
 8012558:	d103      	bne.n	8012562 <_raise_r+0x42>
 801255a:	2316      	movs	r3, #22
 801255c:	6003      	str	r3, [r0, #0]
 801255e:	2001      	movs	r0, #1
 8012560:	e7e7      	b.n	8012532 <_raise_r+0x12>
 8012562:	2400      	movs	r4, #0
 8012564:	4628      	mov	r0, r5
 8012566:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801256a:	4798      	blx	r3
 801256c:	2000      	movs	r0, #0
 801256e:	e7e0      	b.n	8012532 <_raise_r+0x12>

08012570 <raise>:
 8012570:	4b02      	ldr	r3, [pc, #8]	; (801257c <raise+0xc>)
 8012572:	4601      	mov	r1, r0
 8012574:	6818      	ldr	r0, [r3, #0]
 8012576:	f7ff bfd3 	b.w	8012520 <_raise_r>
 801257a:	bf00      	nop
 801257c:	200001a8 	.word	0x200001a8

08012580 <_kill_r>:
 8012580:	b538      	push	{r3, r4, r5, lr}
 8012582:	2300      	movs	r3, #0
 8012584:	4d06      	ldr	r5, [pc, #24]	; (80125a0 <_kill_r+0x20>)
 8012586:	4604      	mov	r4, r0
 8012588:	4608      	mov	r0, r1
 801258a:	4611      	mov	r1, r2
 801258c:	602b      	str	r3, [r5, #0]
 801258e:	f7f2 fce4 	bl	8004f5a <_kill>
 8012592:	1c43      	adds	r3, r0, #1
 8012594:	d102      	bne.n	801259c <_kill_r+0x1c>
 8012596:	682b      	ldr	r3, [r5, #0]
 8012598:	b103      	cbz	r3, 801259c <_kill_r+0x1c>
 801259a:	6023      	str	r3, [r4, #0]
 801259c:	bd38      	pop	{r3, r4, r5, pc}
 801259e:	bf00      	nop
 80125a0:	20002290 	.word	0x20002290

080125a4 <_getpid_r>:
 80125a4:	f7f2 bcd2 	b.w	8004f4c <_getpid>

080125a8 <__sread>:
 80125a8:	b510      	push	{r4, lr}
 80125aa:	460c      	mov	r4, r1
 80125ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80125b0:	f000 f894 	bl	80126dc <_read_r>
 80125b4:	2800      	cmp	r0, #0
 80125b6:	bfab      	itete	ge
 80125b8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80125ba:	89a3      	ldrhlt	r3, [r4, #12]
 80125bc:	181b      	addge	r3, r3, r0
 80125be:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80125c2:	bfac      	ite	ge
 80125c4:	6563      	strge	r3, [r4, #84]	; 0x54
 80125c6:	81a3      	strhlt	r3, [r4, #12]
 80125c8:	bd10      	pop	{r4, pc}

080125ca <__swrite>:
 80125ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80125ce:	461f      	mov	r7, r3
 80125d0:	898b      	ldrh	r3, [r1, #12]
 80125d2:	4605      	mov	r5, r0
 80125d4:	05db      	lsls	r3, r3, #23
 80125d6:	460c      	mov	r4, r1
 80125d8:	4616      	mov	r6, r2
 80125da:	d505      	bpl.n	80125e8 <__swrite+0x1e>
 80125dc:	2302      	movs	r3, #2
 80125de:	2200      	movs	r2, #0
 80125e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80125e4:	f000 f868 	bl	80126b8 <_lseek_r>
 80125e8:	89a3      	ldrh	r3, [r4, #12]
 80125ea:	4632      	mov	r2, r6
 80125ec:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80125f0:	81a3      	strh	r3, [r4, #12]
 80125f2:	4628      	mov	r0, r5
 80125f4:	463b      	mov	r3, r7
 80125f6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80125fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80125fe:	f000 b817 	b.w	8012630 <_write_r>

08012602 <__sseek>:
 8012602:	b510      	push	{r4, lr}
 8012604:	460c      	mov	r4, r1
 8012606:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801260a:	f000 f855 	bl	80126b8 <_lseek_r>
 801260e:	1c43      	adds	r3, r0, #1
 8012610:	89a3      	ldrh	r3, [r4, #12]
 8012612:	bf15      	itete	ne
 8012614:	6560      	strne	r0, [r4, #84]	; 0x54
 8012616:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801261a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801261e:	81a3      	strheq	r3, [r4, #12]
 8012620:	bf18      	it	ne
 8012622:	81a3      	strhne	r3, [r4, #12]
 8012624:	bd10      	pop	{r4, pc}

08012626 <__sclose>:
 8012626:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801262a:	f000 b813 	b.w	8012654 <_close_r>
	...

08012630 <_write_r>:
 8012630:	b538      	push	{r3, r4, r5, lr}
 8012632:	4604      	mov	r4, r0
 8012634:	4608      	mov	r0, r1
 8012636:	4611      	mov	r1, r2
 8012638:	2200      	movs	r2, #0
 801263a:	4d05      	ldr	r5, [pc, #20]	; (8012650 <_write_r+0x20>)
 801263c:	602a      	str	r2, [r5, #0]
 801263e:	461a      	mov	r2, r3
 8012640:	f7f2 fcc2 	bl	8004fc8 <_write>
 8012644:	1c43      	adds	r3, r0, #1
 8012646:	d102      	bne.n	801264e <_write_r+0x1e>
 8012648:	682b      	ldr	r3, [r5, #0]
 801264a:	b103      	cbz	r3, 801264e <_write_r+0x1e>
 801264c:	6023      	str	r3, [r4, #0]
 801264e:	bd38      	pop	{r3, r4, r5, pc}
 8012650:	20002290 	.word	0x20002290

08012654 <_close_r>:
 8012654:	b538      	push	{r3, r4, r5, lr}
 8012656:	2300      	movs	r3, #0
 8012658:	4d05      	ldr	r5, [pc, #20]	; (8012670 <_close_r+0x1c>)
 801265a:	4604      	mov	r4, r0
 801265c:	4608      	mov	r0, r1
 801265e:	602b      	str	r3, [r5, #0]
 8012660:	f7f2 fcce 	bl	8005000 <_close>
 8012664:	1c43      	adds	r3, r0, #1
 8012666:	d102      	bne.n	801266e <_close_r+0x1a>
 8012668:	682b      	ldr	r3, [r5, #0]
 801266a:	b103      	cbz	r3, 801266e <_close_r+0x1a>
 801266c:	6023      	str	r3, [r4, #0]
 801266e:	bd38      	pop	{r3, r4, r5, pc}
 8012670:	20002290 	.word	0x20002290

08012674 <_fstat_r>:
 8012674:	b538      	push	{r3, r4, r5, lr}
 8012676:	2300      	movs	r3, #0
 8012678:	4d06      	ldr	r5, [pc, #24]	; (8012694 <_fstat_r+0x20>)
 801267a:	4604      	mov	r4, r0
 801267c:	4608      	mov	r0, r1
 801267e:	4611      	mov	r1, r2
 8012680:	602b      	str	r3, [r5, #0]
 8012682:	f7f2 fcc8 	bl	8005016 <_fstat>
 8012686:	1c43      	adds	r3, r0, #1
 8012688:	d102      	bne.n	8012690 <_fstat_r+0x1c>
 801268a:	682b      	ldr	r3, [r5, #0]
 801268c:	b103      	cbz	r3, 8012690 <_fstat_r+0x1c>
 801268e:	6023      	str	r3, [r4, #0]
 8012690:	bd38      	pop	{r3, r4, r5, pc}
 8012692:	bf00      	nop
 8012694:	20002290 	.word	0x20002290

08012698 <_isatty_r>:
 8012698:	b538      	push	{r3, r4, r5, lr}
 801269a:	2300      	movs	r3, #0
 801269c:	4d05      	ldr	r5, [pc, #20]	; (80126b4 <_isatty_r+0x1c>)
 801269e:	4604      	mov	r4, r0
 80126a0:	4608      	mov	r0, r1
 80126a2:	602b      	str	r3, [r5, #0]
 80126a4:	f7f2 fcc6 	bl	8005034 <_isatty>
 80126a8:	1c43      	adds	r3, r0, #1
 80126aa:	d102      	bne.n	80126b2 <_isatty_r+0x1a>
 80126ac:	682b      	ldr	r3, [r5, #0]
 80126ae:	b103      	cbz	r3, 80126b2 <_isatty_r+0x1a>
 80126b0:	6023      	str	r3, [r4, #0]
 80126b2:	bd38      	pop	{r3, r4, r5, pc}
 80126b4:	20002290 	.word	0x20002290

080126b8 <_lseek_r>:
 80126b8:	b538      	push	{r3, r4, r5, lr}
 80126ba:	4604      	mov	r4, r0
 80126bc:	4608      	mov	r0, r1
 80126be:	4611      	mov	r1, r2
 80126c0:	2200      	movs	r2, #0
 80126c2:	4d05      	ldr	r5, [pc, #20]	; (80126d8 <_lseek_r+0x20>)
 80126c4:	602a      	str	r2, [r5, #0]
 80126c6:	461a      	mov	r2, r3
 80126c8:	f7f2 fcbe 	bl	8005048 <_lseek>
 80126cc:	1c43      	adds	r3, r0, #1
 80126ce:	d102      	bne.n	80126d6 <_lseek_r+0x1e>
 80126d0:	682b      	ldr	r3, [r5, #0]
 80126d2:	b103      	cbz	r3, 80126d6 <_lseek_r+0x1e>
 80126d4:	6023      	str	r3, [r4, #0]
 80126d6:	bd38      	pop	{r3, r4, r5, pc}
 80126d8:	20002290 	.word	0x20002290

080126dc <_read_r>:
 80126dc:	b538      	push	{r3, r4, r5, lr}
 80126de:	4604      	mov	r4, r0
 80126e0:	4608      	mov	r0, r1
 80126e2:	4611      	mov	r1, r2
 80126e4:	2200      	movs	r2, #0
 80126e6:	4d05      	ldr	r5, [pc, #20]	; (80126fc <_read_r+0x20>)
 80126e8:	602a      	str	r2, [r5, #0]
 80126ea:	461a      	mov	r2, r3
 80126ec:	f7f2 fc4f 	bl	8004f8e <_read>
 80126f0:	1c43      	adds	r3, r0, #1
 80126f2:	d102      	bne.n	80126fa <_read_r+0x1e>
 80126f4:	682b      	ldr	r3, [r5, #0]
 80126f6:	b103      	cbz	r3, 80126fa <_read_r+0x1e>
 80126f8:	6023      	str	r3, [r4, #0]
 80126fa:	bd38      	pop	{r3, r4, r5, pc}
 80126fc:	20002290 	.word	0x20002290

08012700 <_init>:
 8012700:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012702:	bf00      	nop
 8012704:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012706:	bc08      	pop	{r3}
 8012708:	469e      	mov	lr, r3
 801270a:	4770      	bx	lr

0801270c <_fini>:
 801270c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801270e:	bf00      	nop
 8012710:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012712:	bc08      	pop	{r3}
 8012714:	469e      	mov	lr, r3
 8012716:	4770      	bx	lr
